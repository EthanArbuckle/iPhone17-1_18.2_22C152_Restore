uint64_t initLDO(uint64_t a1, void *a2)
{
  int v2;
  uint64_t vars8;

  v2 = PNEW_LDO_ConFromText(a1, a1, "", "SENTENCE", "SENTENCE", a2);

  return LH_ERROR_to_VERROR(v2);
}

uint64_t deinitLDO(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return OOC_PlacementDeleteObject(a1, a2);
  }
  return a1;
}

uint64_t importFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v17 = 0;
  int v18 = 0;
  uint64_t v15 = 0;
  v16 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v18 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a2 + 176))(a3, a4, HIWORD(v18), 0, &v16, &v18);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v18), 3, 1, &v17, &v18);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v11 = *a5;
        uint64_t v12 = *(void *)(*a5 + 16);
        int v13 = LDOTreeNode_SetText(v12, v16);
        uint64_t result = LH_ERROR_to_VERROR(v13);
        if ((result & 0x80000000) == 0)
        {
          LDOObject_SetU32Attribute(v12, "EOS", v17 != 0);
          uint64_t result = LH_ERROR_to_VERROR(v14);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a2 + 176))(a3, a4, HIWORD(v18), 1, &v15, &v18);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = loc_importTokenRecFromLingDB(a1, a2, a3, a4, v11, HIWORD(v18), 0);
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = loc_importTokenRecFromLingDB(a1, a2, a3, a4, v11, HIWORD(v18), 1);
                if ((result & 0x80000000) == 0) {
                  return loc_importMrkFromLingDB(v11, v15, (unsigned __int16)v18, v12, 0);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t loc_importTokenRecFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned __int16 v45 = 0;
  int v44 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 104))(a3, a4, 3, a6, &v45);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v43 = a1;
    unsigned __int16 v14 = v45;
    if (v45)
    {
      while (1)
      {
        LOWORD(v46) = 0;
        LOWORD(v48) = 0;
        LOWORD(v47) = 0;
        __s1 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char **))(a2 + 168))(a3, a4, v14, 0, 1, &v44, &v46);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        char v15 = 0;
        v16 = "TOKEN_ALPHA";
        switch(v44)
        {
          case 0:
            break;
          case 1:
            char v15 = 0;
            v16 = "TOKEN_DIGIT";
            break;
          case 2:
            char v15 = 0;
            v16 = "TOKEN_PUNCT";
            break;
          case 3:
            char v15 = 0;
            v16 = "TOKEN_WSPACE";
            break;
          default:
            v16 = 0;
            char v15 = 1;
            break;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, char **))(a2 + 168))(a3, a4, v14, 1, 1, &v48, &v46);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, char **))(a2 + 168))(a3, a4, v14, 2, 1, &v47, &v46);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (v44 != 6) {
          goto LABEL_15;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char **))(a2 + 176))(a3, a4, v14, 4, &__s1, &v46);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if ((_WORD)v46 && !cstdlib_strcmp(__s1, "_PR_"))
        {
          char v15 = 0;
          uint64_t v17 = (unsigned __int16)v48;
          uint64_t v18 = (unsigned __int16)v47;
          v16 = "TOKEN_INT_TN";
        }
        else
        {
LABEL_15:
          uint64_t v17 = (unsigned __int16)v48;
          uint64_t v18 = (unsigned __int16)v47;
          char v19 = v15 ^ 1;
          if (!a7) {
            char v19 = 1;
          }
          if ((v19 & 1) == 0)
          {
            uint64_t v20 = v45;
            int v21 = v44;
            v46 = 0;
            unsigned int v47 = (unsigned __int16)v47;
            unsigned int v48 = (unsigned __int16)v48;
            int v22 = LDO_AddLabelOnSubstring(a5, "TOKEN", "TOKEN", &v48, &v47, &v46);
            uint64_t result = LH_ERROR_to_VERROR(v22);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            LDOObject_SetU32Attribute((uint64_t)v46, "_TTYPE", v21);
            uint64_t result = LH_ERROR_to_VERROR(v23);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            switch(v21)
            {
              case 4:
                v34 = v46;
                uint64_t v35 = a2;
                uint64_t v36 = a3;
                uint64_t v37 = a4;
                uint64_t v38 = v20;
                goto LABEL_45;
              case 5:
                uint64_t v39 = (uint64_t)v46;
                __s1 = 0;
                int v49 = 0;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, v20, 4, &__s1, (char *)&v49 + 2);
                if ((result & 0x80000000) == 0)
                {
                  int v40 = LDOObject_SetStringAttribute(v39, "TNTAG", __s1);
                  uint64_t result = LH_ERROR_to_VERROR(v40);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, v20, 3, &v49);
                    if ((result & 0x80000000) == 0)
                    {
                      if (!(_WORD)v49
                        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, v20, 3, &__s1, (char *)&v49 + 2), (result & 0x80000000) == 0)&& (v41 = LDOObject_SetStringAttribute(v39, "NORM", __s1), uint64_t result = LH_ERROR_to_VERROR(v41), (result & 0x80000000) == 0))
                      {
                        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, v20, 6, &v49);
                        if ((result & 0x80000000) == 0)
                        {
                          if ((_WORD)v49)
                          {
                            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, v20, 6, &__s1, (char *)&v49 + 2);
                            if ((result & 0x80000000) == 0)
                            {
                              int v42 = LDOObject_SetStringAttribute(v39, "LANGMAP", __s1);
                              uint64_t result = LH_ERROR_to_VERROR(v42);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_46;
              case 6:
                v24 = v46;
                uint64_t v25 = v43;
                uint64_t v26 = a2;
                uint64_t v27 = a3;
                uint64_t v28 = a4;
                uint64_t v29 = v20;
LABEL_32:
                uint64_t result = loc_importTokenIntTnFieldsFromLingDB(v25, v26, v27, v28, (uint64_t)v24, v29);
                goto LABEL_46;
            }
            goto LABEL_47;
          }
        }
        if ((v15 & 1) == 0 && !a7)
        {
          uint64_t v30 = v45;
          int v31 = v44;
          __s1 = 0;
          int appended = LDO_AppendNewNode(a5, *(void *)(a5 + 16), "TOKEN", v16, v17, v18, &__s1);
          uint64_t result = LH_ERROR_to_VERROR(appended);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          LDOObject_SetU32Attribute((uint64_t)__s1, "_TTYPE", v31);
          uint64_t result = LH_ERROR_to_VERROR(v33);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (v31 == 4)
          {
            v34 = __s1;
            uint64_t v35 = a2;
            uint64_t v36 = a3;
            uint64_t v37 = a4;
            uint64_t v38 = v30;
LABEL_45:
            uint64_t result = loc_importTokenDctFieldsFromLingDB(v35, v36, v37, (uint64_t)v34, v38);
LABEL_46:
            if ((result & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_47;
          }
          if (v31 == 6)
          {
            v24 = __s1;
            uint64_t v25 = v43;
            uint64_t v26 = a2;
            uint64_t v27 = a3;
            uint64_t v28 = a4;
            uint64_t v29 = v30;
            goto LABEL_32;
          }
        }
LABEL_47:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *, uint64_t, uint64_t))(a2 + 120))(a3, a4, v45, &v45, v17, v18);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v14 = v45;
          if (v45) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t loc_importMrkFromLingDB(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  int v45 = 0;
  int v46 = 0;
  int v42 = 0;
  if (a3)
  {
    uint64_t v6 = a1;
    uint64_t v7 = 0;
    uint64_t v8 = a3;
    int v37 = 1;
    while (1)
    {
      uint64_t v41 = 0;
      int v9 = *(_DWORD *)a2;
      if (*(int *)a2 <= 50) {
        break;
      }
      if (v9 <= 60)
      {
        switch(v9)
        {
          case '3':
            char v10 = 0;
            uint64_t v11 = "MARKER_NLU";
            goto LABEL_36;
          case '9':
            char v10 = 0;
            uint64_t v11 = "MARKER_NEW";
            goto LABEL_36;
          case '<':
            char v10 = 0;
            uint64_t v11 = "MARKER_SET_STYLE";
            goto LABEL_36;
        }
LABEL_35:
        char v10 = 0;
        uint64_t v11 = "MARKER";
        goto LABEL_36;
      }
      if (v9 == 61)
      {
        char v10 = 0;
        uint64_t v11 = "MARKER_AGREEMENT";
        goto LABEL_36;
      }
      if (v9 == 99)
      {
        char v10 = 0;
        uint64_t v11 = "MARKER_SET_PINYIN";
        goto LABEL_36;
      }
      if (v9 != 0x4000) {
        goto LABEL_35;
      }
      int v12 = v37;
      if (v37 == 1) {
        uint64_t v7 = *(unsigned int *)(a2 + 12);
      }
      else {
        uint64_t v7 = v7;
      }
      if (v37 == 1) {
        int v12 = 0;
      }
      int v37 = v12;
      char v10 = 1;
      uint64_t v11 = "MARKER_SYNC";
LABEL_36:
      unsigned int v13 = *(_DWORD *)(a2 + 12);
      BOOL v14 = v13 >= v7;
      unsigned int v15 = v13 - v7;
      if (!v14) {
        return 2147499534;
      }
      unsigned int v44 = v15;
      unsigned int v43 = *(_DWORD *)(a2 + 16) + v15;
      uint64_t v16 = loc_compute_overflow(v6, &v44, &v43, &v46, &v45);
      if ((v16 & 0x80000000) != 0) {
        return v16;
      }
      int v17 = LDO_CountLeafNodesOnRange(v6, &v44, &v43, &v42, 0);
      uint64_t v34 = LH_ERROR_to_VERROR(v17);
      if ((v34 & 0x80000000) != 0) {
        return v34;
      }
      if (*(_DWORD *)a2 == 40) {
        goto LABEL_41;
      }
      if (!v42 && v43 != v44)
      {
        if (a5 != 1) {
          goto LABEL_46;
        }
LABEL_41:
        int v18 = LDO_AddSpecialLabel(v6, "MARKER", v11, &v44, &v43, &v41);
        goto LABEL_45;
      }
      int v18 = LDO_AddLabelOnSubstring(v6, "MARKER", v11, &v44, &v43, &v41);
LABEL_45:
      uint64_t v34 = LH_ERROR_to_VERROR(v18);
      if ((v34 & 0x80000000) != 0) {
        return v34;
      }
LABEL_46:
      if (v41)
      {
        LDOObject_SetU32Attribute(a4, "SENT_REC_OFFSET", v7);
        uint64_t v16 = LH_ERROR_to_VERROR(v19);
        if ((v16 & 0x80000000) != 0) {
          return v16;
        }
        uint64_t v20 = v7;
        uint64_t v21 = v41;
        int v22 = v45;
        int v24 = *(_DWORD *)a2;
        int v23 = *(_DWORD *)(a2 + 4);
        int v25 = *(_DWORD *)(a2 + 8);
        uint64_t v39 = *(char **)(a2 + 24);
        if (v46)
        {
          LDOObject_SetU32Attribute(v41, "FROMOVERFLOW", v46);
          uint64_t v16 = LH_ERROR_to_VERROR(v26);
          if ((v16 & 0x80000000) != 0) {
            return v16;
          }
        }
        if (v22)
        {
          LDOObject_SetU32Attribute(v21, "TOOVERFLOW", v22);
          uint64_t v16 = LH_ERROR_to_VERROR(v27);
          if ((v16 & 0x80000000) != 0) {
            return v16;
          }
        }
        LDOObject_SetU32Attribute(v21, "_MTYPE", v24);
        uint64_t v16 = LH_ERROR_to_VERROR(v28);
        if ((v16 & 0x80000000) != 0) {
          return v16;
        }
        int v29 = LDOLabel_SetReferenceFrom(v21, v23);
        uint64_t v16 = LH_ERROR_to_VERROR(v29);
        if ((v16 & 0x80000000) != 0) {
          return v16;
        }
        int v30 = LDOLabel_SetReferenceTo(v21, v25 + v23);
        uint64_t v31 = LH_ERROR_to_VERROR(v30);
        uint64_t v34 = v31;
        if ((int)v31 < 0) {
          char v32 = 1;
        }
        else {
          char v32 = v10;
        }
        if (v32)
        {
          uint64_t v7 = v20;
          uint64_t v6 = a1;
          if ((v31 & 0x80000000) != 0) {
            return v34;
          }
          goto LABEL_66;
        }
        unsigned int v48 = 0;
        int v47 = 0;
        marker_tag2string(v24, &v48, &v47);
        if ((v47 - 3) > 1)
        {
          if ((v47 - 1) <= 1)
          {
            LDOObject_SetU32Attribute(v21, "U32ARGS", (int)v39);
            goto LABEL_64;
          }
        }
        else
        {
          int v33 = LDOObject_SetStringAttribute(v21, "STRARGS", v39);
LABEL_64:
          uint64_t v34 = LH_ERROR_to_VERROR(v33);
          if ((v34 & 0x80000000) != 0) {
            return v34;
          }
        }
        uint64_t v7 = v20;
        uint64_t v6 = a1;
      }
LABEL_66:
      a2 += 32;
      if (!--v8) {
        return v34;
      }
    }
    if (v9 > 35)
    {
      switch(v9)
      {
        case '$':
          char v10 = 0;
          uint64_t v11 = "MARKER_SET_LANG";
          goto LABEL_36;
        case '%':
          char v10 = 0;
          uint64_t v11 = "MARKER_SET_HEXA";
          goto LABEL_36;
        case '(':
          char v10 = 0;
          uint64_t v11 = "MARKER_INSERT_PROMPT";
          goto LABEL_36;
      }
    }
    else
    {
      switch(v9)
      {
        case 1:
          char v10 = 1;
          uint64_t v11 = "MARKER_WORD";
          goto LABEL_36;
        case 7:
          char v10 = 0;
          uint64_t v11 = "MARKER_SET_TYPE_OF_INPUT";
          goto LABEL_36;
        case 26:
          char v10 = 0;
          uint64_t v11 = "MARKER_INSERT_AUDIO";
          goto LABEL_36;
      }
    }
    goto LABEL_35;
  }
  return 0;
}

uint64_t importFromLingDBWordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  int v22 = 0;
  __int16 v21 = 0;
  int v20 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v22 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v13 = *a5;
    uint64_t v14 = *(void *)(*a5 + 16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a2 + 176))(a3, a4, HIWORD(v22), 0, &v19, &v22);
    if ((result & 0x80000000) == 0)
    {
      int v15 = LDOTreeNode_SetText(v14, v19);
      uint64_t result = LH_ERROR_to_VERROR(v15);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v22), 3, 1, &v20, &v22);
        if ((result & 0x80000000) == 0)
        {
          LDOObject_SetU32Attribute(v14, "EOS", v20 != 0);
          uint64_t result = LH_ERROR_to_VERROR(v16);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a2 + 184))(a3, a4, HIWORD(v22), 2, &v21);
            if ((result & 0x80000000) == 0)
            {
              if (!v21
                || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v22), 2, &v19, &v22), (result & 0x80000000) == 0)&& (v17 = LDOObject_SetStringAttribute(v14, "SYNTAX", v19), uint64_t result = LH_ERROR_to_VERROR(v17), (result & 0x80000000) == 0))
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a2 + 176))(a3, a4, HIWORD(v22), 1, &v18, &v22);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = loc_importWordRecFromLingDB(a1, a2, a3, a4, v13, HIWORD(v22), 0, a6);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = loc_importWordRecFromLingDB(a1, a2, a3, a4, v13, HIWORD(v22), 1, a6);
                    if ((result & 0x80000000) == 0) {
                      return loc_importMrkFromLingDB(v13, v18, (unsigned __int16)v22, v14, 1);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t loc_importWordRecFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unsigned __int16 v29 = 0;
  int v28 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 104))(a3, a4, 2, a6, &v29);
  if ((result & 0x80000000) == 0)
  {
    unsigned __int16 v13 = v29;
    if (v29)
    {
      unsigned __int16 v14 = 0;
      int v15 = 0;
      while (1)
      {
        LOWORD(v32) = 0;
        LOWORD(v31) = 0;
        WORD2(v30) = 0;
        __s1 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(a2 + 168))(a3, a4, v13, 0, 1, &v28, &v32);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v16 = 0;
        while (v28 != wordRecMap[v16])
        {
          v16 += 24;
          if (v16 == 432)
          {
            int v17 = 0;
            goto LABEL_10;
          }
        }
        uint64_t v18 = &wordRecMap[v16];
        int v17 = (char *)*((void *)v18 + 1);
        int v15 = *((_DWORD *)v18 + 4);
LABEL_10:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v13, 1, 1, &v31, &v32);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, v13, 2, 1, (char *)&v30 + 4, &v32);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (v28 == 6)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, v13, 4, &__s1, &v32);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if ((_WORD)v32 && !cstdlib_strcmp(__s1, "_PR_")) {
            int v15 = 0;
          }
        }
        int v19 = (unsigned __int16)v31;
        unsigned int v20 = WORD2(v30);
        ++v14;
        if (a7 && v15)
        {
          uint64_t v21 = v29;
          int v22 = v28;
          uint64_t v30 = 0;
          __s1 = 0;
          unsigned int v31 = v20;
          int v32 = v19;
          uint64_t result = loc_compute_overflow(a5, (unsigned int *)&v32, &v31, (_DWORD *)&v30 + 1, &v30);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int appended = LDO_AddSpecialLabel(a5, "WORD", v17, (unsigned int *)&v32, &v31, &__s1);
        }
        else
        {
          if (a7 | v15) {
            goto LABEL_27;
          }
          uint64_t v21 = v29;
          int v22 = v28;
          __s1 = 0;
          uint64_t v30 = 0;
          unsigned int v31 = v20;
          int v32 = v19;
          uint64_t result = loc_compute_overflow(a5, (unsigned int *)&v32, &v31, (_DWORD *)&v30 + 1, &v30);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int appended = LDO_AppendNewNode(a5, *(void *)(a5 + 16), "WORD", v17, v32, v31, &__s1);
        }
        uint64_t result = LH_ERROR_to_VERROR(appended);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        LDOObject_SetU32Attribute((uint64_t)__s1, "_WTYPE", v22);
        uint64_t result = LH_ERROR_to_VERROR(v24);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = loc_importWordRecordFieldsFromLingDB(a1, a2, a3, a4, (uint64_t)__s1, v21, v14, a8, SHIDWORD(v30), v30);
        if ((result & 0x80000000) != 0) {
          return result;
        }
LABEL_27:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 120))(a3, a4, v29, &v29);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v13 = v29;
          if (v29) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t exportToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unsigned __int16 v69 = 0;
  unsigned __int16 v68 = 0;
  uint64_t v67 = 0;
  int v66 = 1;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a3, a4);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a3, a4);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 104))(a3, a4, 1, 0, &v69);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v16 = loc_exportSentenceFields(a2, a3, a4, a5, a6, &v69, (_DWORD *)&v67 + 1);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v16 = loc_exportMrkLabelsToLingDB(a1, a2, a3, a4, a6, v69, SHIDWORD(v67));
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  int v63 = a7;
  uint64_t v71 = 0;
  int v70 = 0;
  uint64_t v17 = *(void *)(a6 + 32);
  uint64_t v18 = *(uint64_t ***)(v17 + 24);
  int v57 = a8;
  uint64_t v61 = a1;
  uint64_t v58 = a5;
  if ((unint64_t)v18 >= *(void *)(v17 + 32))
  {
    unint64_t v20 = 0;
    unint64_t v19 = 0;
    uint64_t v22 = 0;
LABEL_49:
    int v34 = HIDWORD(v71);
    if (HIDWORD(v71)) {
LABEL_50:
    }
      uint64_t v22 = LH_ERROR_to_VERROR(v34);
    if ((v22 & 0x80000000) == 0)
    {
      uint64_t v44 = *(void *)(a6 + 16);
      unint64_t v45 = v20;
      int v46 = *(uint64_t ***)(v44 + 80);
      unint64_t v47 = *(void *)(v44 + 88);
      unint64_t v65 = v45;
      unsigned int v48 = (uint64_t **)v19;
      BOOL v49 = (unint64_t)v46 >= v47 || v19 >= v45;
      if (v49)
      {
LABEL_57:
        if ((unint64_t)v46 >= v47)
        {
LABEL_60:
          if ((unint64_t)v48 < v65)
          {
            v50 = v48 + 1;
            do
            {
              uint64_t v22 = loc_exportNonMarkerLabelWithTType(v61, a2, a3, a4, v69, *(v50 - 1), v57, &v66, &v68);
              if ((v22 & 0x80000000) != 0) {
                break;
              }
              BOOL v49 = (unint64_t)v50++ >= v65;
            }
            while (!v49);
          }
        }
        else
        {
          while (1)
          {
            uint64_t v22 = loc_exportNode(v61, a2, a3, a4, v69, *v46, v63, &v66, &v68);
            if ((v22 & 0x80000000) != 0) {
              break;
            }
            if ((unint64_t)++v46 >= v47) {
              goto LABEL_60;
            }
          }
        }
      }
      else
      {
        while (1)
        {
          v51 = *v46;
          v52 = *v48;
          int v53 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)*v46, &v67);
          uint64_t v54 = LH_ERROR_to_VERROR(v53);
          if ((v54 & 0x80000000) != 0) {
            break;
          }
          unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v52);
          if (v67 <= AbsoluteFrom)
          {
            uint64_t v22 = loc_exportNode(v61, a2, a3, a4, v69, v51, v63, &v66, &v68);
            if ((v22 & 0x80000000) != 0) {
              goto LABEL_76;
            }
            ++v46;
          }
          else
          {
            uint64_t v22 = loc_exportNonMarkerLabelWithTType(v61, a2, a3, a4, v69, v52, v57, &v66, &v68);
            if ((v22 & 0x80000000) != 0) {
              goto LABEL_76;
            }
            ++v48;
          }
          if ((unint64_t)v46 >= v47 || (unint64_t)v48 >= v65) {
            goto LABEL_57;
          }
        }
        uint64_t v22 = v54;
      }
    }
  }
  else
  {
    uint64_t v59 = a6;
    unsigned int v60 = 0;
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = 0;
    do
    {
      int v23 = *v18;
      if (*((_DWORD *)*v18 + 26) == 1)
      {
        int U32Attribute = LDOObject_GetU32Attribute(*v18, "_TTYPE", &v71, &v70);
        uint64_t v22 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v22 & 0x80000000) != 0) {
          goto LABEL_76;
        }
        if (v71 == 1)
        {
          LDOObject_SetU32Attribute((uint64_t)v23, "__ldoutilID", *((_DWORD *)v23 + 4));
          uint64_t v22 = LH_ERROR_to_VERROR(v25);
          if ((v22 & 0x80000000) != 0) {
            goto LABEL_76;
          }
          int v62 = v21;
          *((_DWORD *)v23 + 4) = v21;
          unint64_t v64 = v20;
          if (v20 != v19)
          {
            unint64_t v26 = 0;
            unint64_t v56 = v20 - v19;
            unint64_t v27 = (uint64_t)(v20 - v19) >> 3;
            while (1)
            {
              unint64_t v28 = v27 >> 1;
              int v29 = LDOLabel_CompareToWithID((uint64_t)v23, *(void *)(v19 + 8 * v26 + 8 * (v27 >> 1)));
              if (v29 < 1)
              {
                v27 >>= 1;
                if ((v29 & 0x80000000) == 0)
                {
                  unint64_t v20 = v64;
                  a6 = v59;
                  goto LABEL_36;
                }
              }
              else
              {
                v26 += v28 + 1;
                v27 -= v28 + 1;
              }
              if (!v27)
              {
                unint64_t v30 = v56;
                goto LABEL_20;
              }
            }
          }
          unint64_t v30 = 0;
          unint64_t v26 = 0;
LABEL_20:
          unint64_t v31 = v30 >> 3;
          if ((v30 >> 3) == -1 || v60 != v31)
          {
            unint64_t v35 = (v30 >> 3);
            unint64_t v36 = v64;
          }
          else
          {
            unsigned int v32 = 2 * v60;
            if (2 * v60 >= v60 + 1000000) {
              unsigned int v32 = v60 + 1000000;
            }
            if (v32 <= v60 + 1) {
              unsigned int v33 = v60 + 1;
            }
            else {
              unsigned int v33 = v32;
            }
            if (v33 <= 8) {
              unsigned int v33 = 8;
            }
            unsigned int v60 = v33;
            unint64_t v19 = OOCAllocator_Realloc(v58, v19, 8 * v33, (_DWORD *)&v71 + 1);
            int v34 = HIDWORD(v71);
            if (HIDWORD(v71))
            {
              a6 = v59;
              unint64_t v20 = v64;
              goto LABEL_50;
            }
            unint64_t v35 = (v30 >> 3);
            unint64_t v36 = v19 + 8 * v31;
          }
          BOOL v37 = v35 > v26;
          unint64_t v38 = v35 - v26;
          a6 = v59;
          if (v37) {
            cstdlib_memmove((void *)(v19 + 8 * v26 + 8), (const void *)(v19 + 8 * v26), 8 * v38);
          }
          unint64_t v20 = v36 + 8;
          *(void *)(v19 + 8 * v26) = v23;
LABEL_36:
          int v21 = v62 + 1;
        }
      }
      ++v18;
    }
    while ((unint64_t)v18 < *(void *)(*(void *)(a6 + 32) + 32));
    if (v19 >= v20) {
      goto LABEL_49;
    }
    int v40 = (uint64_t **)v19;
    while (1)
    {
      uint64_t v41 = *v40;
      int v42 = LDOObject_GetU32Attribute(*v40, "__ldoutilID", &v71, &v70);
      uint64_t v22 = LH_ERROR_to_VERROR(v42);
      if ((v22 & 0x80000000) != 0) {
        break;
      }
      if (v71 == 1)
      {
        *((_DWORD *)v41 + 4) = v70;
        int v43 = LDOObject_RemoveAttribute((uint64_t)v41, "__ldoutilID");
        uint64_t v22 = LH_ERROR_to_VERROR(v43);
        if ((v22 & 0x80000000) != 0) {
          break;
        }
      }
      if ((unint64_t)++v40 >= v20) {
        goto LABEL_49;
      }
    }
  }
LABEL_76:
  if (v19) {
    OOCAllocator_Free(v58, v19);
  }
  return v22;
}

uint64_t loc_exportSentenceFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, _DWORD *a7)
{
  __int16 v35 = 0;
  int v33 = 0;
  int v34 = 0;
  uint64_t v32 = 0;
  int v31 = 0;
  __s = 0;
  int v14 = LDO_ComputeText(a5, &v32);
  uint64_t v15 = LH_ERROR_to_VERROR(v14);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, __int16 *))(a1 + 160);
  uint64_t v17 = *a6;
  unsigned __int16 v18 = LHString_Length(v32) + 1;
  uint64_t v19 = LHString_BorrowCPtr(v32);
  uint64_t v20 = v16(a2, a3, v17, 0, v18, v19, &v35);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  int v21 = *(uint64_t **)(a5 + 16);
  int U32Attribute = LDOObject_GetU32Attribute(v21, "SENT_REC_OFFSET", &v34, a7);
  uint64_t v20 = LH_ERROR_to_VERROR(U32Attribute);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  uint64_t v23 = 2147491860;
  if (v34 != 1) {
    goto LABEL_12;
  }
  int v24 = LDOObject_GetU32Attribute(v21, "EOS", &v34, &v31);
  uint64_t v20 = LH_ERROR_to_VERROR(v24);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  if (v34 != 1) {
    goto LABEL_12;
  }
  int v33 = v31;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, *a6, 3, 1, &v33, &v35);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  int StringAttribute = LDOObject_GetStringAttribute(v21, "SYNTAX", &v34, (uint64_t *)&__s);
  uint64_t v23 = LH_ERROR_to_VERROR(StringAttribute);
  if ((v23 & 0x80000000) == 0 && v34)
  {
    unint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a1 + 160);
    uint64_t v27 = *a6;
    __int16 v28 = cstdlib_strlen(__s);
    uint64_t v20 = v26(a2, a3, v27, 2, (unsigned __int16)(v28 + 1), __s, &v35);
LABEL_11:
    uint64_t v23 = v20;
  }
LABEL_12:
  if (v32) {
    OOC_PlacementDeleteObject(a4, v32);
  }
  return v23;
}

uint64_t loc_exportMrkLabelsToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  __int16 v53 = 0;
  int v52 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v12 = *(void *)(a5 + 32);
  unsigned __int16 v13 = *(uint64_t ***)(v12 + 24);
  if ((unint64_t)v13 >= *(void *)(v12 + 32))
  {
    LOWORD(v15) = 0;
LABEL_43:
    uint64_t v19 = 0;
LABEL_44:
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *))(a2 + 160))(a3, a4, a6, 1, (unsigned __int16)v15, v19, &v53);
    if (v19) {
      goto LABEL_45;
    }
    return v41;
  }
  unsigned int v15 = 0;
  do
  {
    if (*((_DWORD *)*v13 + 26) == 1)
    {
      int U32Attribute = LDOObject_GetU32Attribute(*v13, "_MTYPE", &v52, (_DWORD *)&v50 + 1);
      uint64_t v17 = LH_ERROR_to_VERROR(U32Attribute);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      if (v52) {
        ++v15;
      }
      uint64_t v12 = *(void *)(a5 + 32);
    }
    ++v13;
  }
  while ((unint64_t)v13 < *(void *)(v12 + 32));
  if (!v15) {
    goto LABEL_43;
  }
  uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), v15, 32);
  if (!v18) {
    return 2147491850;
  }
  uint64_t v19 = v18;
  uint64_t v43 = a1;
  uint64_t v20 = *(void *)(a5 + 32);
  int v21 = *(uint64_t ***)(v20 + 24);
  if ((unint64_t)v21 >= *(void *)(v20 + 32))
  {
LABEL_41:
    marker_sort(v19, v15);
    a1 = v43;
    goto LABEL_44;
  }
  int v22 = 0;
  uint64_t v47 = a2;
  while (1)
  {
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v25 = a6;
    uint64_t v26 = (uint64_t)*v21;
    if (*((_DWORD *)*v21 + 26) != 1)
    {
LABEL_35:
      a6 = v25;
      a4 = v24;
      a3 = v23;
      a2 = v47;
      goto LABEL_40;
    }
    int v27 = LDOObject_GetU32Attribute(*v21, "_MTYPE", &v52, (_DWORD *)&v50 + 1);
    uint64_t v28 = LH_ERROR_to_VERROR(v27);
    if ((v28 & 0x80000000) != 0) {
      break;
    }
    if (!v52) {
      goto LABEL_35;
    }
    uint64_t v44 = (unsigned __int16)v22;
    int v45 = v22;
    int v29 = (_DWORD *)(v19 + 32 * (unsigned __int16)v22);
    *int v29 = HIDWORD(v50);
    int v30 = *(_DWORD *)(v26 + 96);
    v29[1] = v30;
    v29[2] = *(_DWORD *)(v26 + 100) - v30;
    int AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v26);
    v29[3] = AbsoluteFrom + a7;
    if ((*v29 - 36) <= 0x22 && ((1 << (*v29 - 36)) & 0x402008001) != 0 || *v29 == 1) {
      int v40 = 0;
    }
    else {
      int v40 = LDOLabel_GetAbsoluteTo(v26) - AbsoluteFrom;
    }
    v29[4] = v40;
    int v34 = v29 + 4;
    int v35 = LDOObject_GetU32Attribute((uint64_t *)v26, "FROMOVERFLOW", &v52, (_DWORD *)&v49 + 1);
    uint64_t v36 = LH_ERROR_to_VERROR(v35);
    if ((v36 & 0x80000000) != 0) {
      goto LABEL_49;
    }
    if (v52) {
      *v34 += HIDWORD(v49);
    }
    int v37 = LDOObject_GetU32Attribute((uint64_t *)v26, "TOOVERFLOW", &v52, &v49);
    uint64_t v36 = LH_ERROR_to_VERROR(v37);
    if ((v36 & 0x80000000) != 0) {
      goto LABEL_49;
    }
    if (v52) {
      *v34 += v49;
    }
    int StringAttribute = LDOObject_GetStringAttribute((uint64_t *)v26, "STRARGS", (_DWORD *)&v51 + 1, &v48);
    uint64_t v36 = LH_ERROR_to_VERROR(StringAttribute);
    if ((v36 & 0x80000000) != 0
      || (int v39 = LDOObject_GetU32Attribute((uint64_t *)v26, "U32ARGS", &v51, &v50),
          uint64_t v36 = LH_ERROR_to_VERROR(v39),
          (v36 & 0x80000000) != 0))
    {
LABEL_49:
      uint64_t v41 = v36;
      a1 = v43;
      goto LABEL_45;
    }
    if (HIDWORD(v51))
    {
      *(void *)(v19 + 32 * v44 + 24) = v48;
    }
    else if (v51)
    {
      *(_DWORD *)(v19 + 32 * v44 + 24) = v50;
    }
    else
    {
      *(void *)(v19 + 32 * v44 + 24) = 0;
    }
    a6 = v25;
    a4 = v24;
    a3 = v23;
    a2 = v47;
    int v22 = v45 + 1;
LABEL_40:
    if ((unint64_t)++v21 >= *(void *)(*(void *)(a5 + 32) + 32)) {
      goto LABEL_41;
    }
  }
  uint64_t v41 = v28;
  a1 = v43;
LABEL_45:
  heap_Free(*(void **)(a1 + 8), v19);
  return v41;
}

uint64_t loc_exportNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, _DWORD *a8, unsigned __int16 *a9)
{
  unsigned int v21 = 0;
  int v22 = 0;
  if (a7 == 1
    || (int v16 = LDOObject_GetU32Attribute(a6, "_TTYPE", &v22, &v21),
        uint64_t result = LH_ERROR_to_VERROR(v16),
        (result & 0x80000000) == 0)
    && v22
    && v21 >= 4)
  {
    if (*a8 == 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 3, a5, a9);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      *a8 = 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 80))(a3, a4, *a9, a9);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    __int16 v28 = 0;
    int v25 = 0;
    uint64_t v24 = 0;
    int v23 = 0;
    int U32Attribute = LDOObject_GetU32Attribute(a6, "_TTYPE", &v23, &v25);
    uint64_t result = LH_ERROR_to_VERROR(U32Attribute);
    if ((result & 0x80000000) == 0)
    {
      if (v23)
      {
        int v29 = v25;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, *a9, 0, 1, &v29, &v28);
        if ((result & 0x80000000) == 0)
        {
          int v19 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)a6, (_DWORD *)&v24 + 1);
          uint64_t result = LH_ERROR_to_VERROR(v19);
          if ((result & 0x80000000) == 0)
          {
            __int16 v27 = WORD2(v24);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a9, 1, 1, &v27, &v28);
            if ((result & 0x80000000) == 0)
            {
              int v20 = LDOTreeNode_ComputeAbsoluteTo((size_t)a6, &v24);
              uint64_t result = LH_ERROR_to_VERROR(v20);
              if ((result & 0x80000000) == 0)
              {
                __int16 v26 = v24;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a9, 2, 1, &v26, &v28);
                if ((result & 0x80000000) == 0 && v29 == 6) {
                  return loc_exportTokenIntTnSpecificFieldToLingDB(a1, a2, a3, a4, a6, *a9);
                }
              }
            }
          }
        }
      }
      else
      {
        return 2147491860;
      }
    }
  }
  return result;
}

uint64_t loc_exportNonMarkerLabelWithTType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, _DWORD *a8, unsigned __int16 *a9)
{
  if (a7 != 1
    || (LODWORD(__s) = 0,
        int v45 = 0,
        int v41 = 0,
        int v16 = LDOObject_GetU32Attribute(a6, "_TTYPE", &__s, &v45),
        uint64_t result = LH_ERROR_to_VERROR(v16),
        (result & 0x80000000) == 0)
    && (v45 != 6
     || (int v18 = LDOObject_GetU32Attribute(a6, "CREATED_BEFORE_TOKENTN", &__s, &v41),
         uint64_t result = LH_ERROR_to_VERROR(v18),
         (result & 0x80000000) == 0)
     && __s
     && v41 == 1))
  {
    if (*a8 == 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 3, a5, a9);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      *a8 = 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 80))(a3, a4, *a9, a9);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    uint64_t v19 = *a9;
    __int16 v44 = 0;
    int v40 = 0;
    int v41 = 0;
    __s = 0;
    int U32Attribute = LDOObject_GetU32Attribute(a6, "_TTYPE", &v40, &v41);
    uint64_t result = LH_ERROR_to_VERROR(U32Attribute);
    if ((result & 0x80000000) == 0)
    {
      __int16 AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a6);
      __int16 AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)a6);
      int v45 = v41;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, v19, 0, 1, &v45, &v44);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v19, 1, 1, &AbsoluteFrom, &v44);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v19, 2, 1, &AbsoluteTo, &v44);
          if ((result & 0x80000000) == 0)
          {
            int v21 = v45;
            if (v45 == 6)
            {
              uint64_t result = loc_exportTokenIntTnSpecificFieldToLingDB(a1, a2, a3, a4, a6, v19);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v21 = v45;
            }
            if ((v21 & 0xFFFFFFFD) == 5)
            {
              int StringAttribute = LDOObject_GetStringAttribute(a6, "TNTAG", &v40, (uint64_t *)&__s);
              uint64_t result = LH_ERROR_to_VERROR(StringAttribute);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if (v40)
              {
                int v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a2 + 160);
                __int16 v24 = cstdlib_strlen(__s);
                uint64_t result = v23(a3, a4, v19, 4, (unsigned __int16)(v24 + 1), __s, &v44);
                if ((result & 0x80000000) == 0)
                {
                  int v25 = LDOObject_GetStringAttribute(a6, "NORM", &v40, (uint64_t *)&__s);
                  uint64_t result = LH_ERROR_to_VERROR(v25);
                  if ((result & 0x80000000) == 0)
                  {
                    if (!v40
                      || (__int16 v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a2 + 160),
                          __int16 v27 = cstdlib_strlen(__s),
                          uint64_t result = v26(a3, a4, v19, 3, (unsigned __int16)(v27 + 1), __s, &v44),
                          (result & 0x80000000) == 0))
                    {
                      int v28 = LDOObject_GetStringAttribute(a6, "LANGMAP", &v40, (uint64_t *)&__s);
                      uint64_t result = LH_ERROR_to_VERROR(v28);
                      if ((result & 0x80000000) == 0)
                      {
                        if (v40)
                        {
                          int v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a2 + 160);
                          __int16 v30 = cstdlib_strlen(__s);
                          int v31 = __s;
                          uint64_t v32 = (unsigned __int16)(v30 + 1);
                          uint64_t v33 = a3;
                          uint64_t v34 = a4;
                          uint64_t v35 = v19;
                          uint64_t v36 = 6;
                          return v29(v33, v34, v35, v36, v32, v31, &v44);
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                return 2147491860;
              }
            }
            else if (v21 == 4)
            {
              int v37 = LDOObject_GetStringAttribute(a6, "NORM", &v40, (uint64_t *)&__s);
              uint64_t result = LH_ERROR_to_VERROR(v37);
              if ((result & 0x80000000) == 0)
              {
                if (v40)
                {
                  int v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a2 + 160);
                  __int16 v38 = cstdlib_strlen(__s);
                  int v31 = __s;
                  uint64_t v32 = (unsigned __int16)(v38 + 1);
                  uint64_t v33 = a3;
                  uint64_t v34 = a4;
                  uint64_t v35 = v19;
                  uint64_t v36 = 3;
                  return v29(v33, v34, v35, v36, v32, v31, &v44);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t exportToLingDBWordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned __int16 v63 = 0;
  unsigned __int16 v62 = 0;
  uint64_t v61 = 0;
  int v59 = 1;
  unsigned int v60 = 0;
  int v58 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a3, a4);
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a3, a4);
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 104))(a3, a4, 1, 0, &v63);
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t v14 = loc_exportSentenceFields(a2, a3, a4, a5, a6, &v63, (_DWORD *)&v61 + 1);
        if ((v14 & 0x80000000) == 0)
        {
          uint64_t v14 = loc_exportMrkLabelsToLingDB(a1, a2, a3, a4, a6, v63, SHIDWORD(v61));
          if ((v14 & 0x80000000) == 0)
          {
            uint64_t v56 = a1;
            uint64_t v65 = 0;
            int v64 = 0;
            uint64_t v15 = *(void *)(a6 + 32);
            int v16 = *(uint64_t ***)(v15 + 24);
            if ((unint64_t)v16 >= *(void *)(v15 + 32))
            {
              unint64_t v17 = 0;
              uint64_t v19 = 0;
              unint64_t v54 = 0;
              uint64_t v39 = *(void *)(a6 + 16);
              unint64_t v37 = 0;
              uint64_t v35 = *(uint64_t ***)(v39 + 80);
              unint64_t v36 = *(void *)(v39 + 88);
              goto LABEL_39;
            }
            uint64_t v51 = a5;
            unsigned int v53 = 0;
            unint64_t v17 = 0;
            unint64_t v57 = 0;
            unint64_t v18 = 0;
            uint64_t v19 = 0;
            int v52 = a7;
            while (1)
            {
              int v20 = *v16;
              if (*((_DWORD *)*v16 + 26) == 1)
              {
                unint64_t v21 = v18;
                int U32Attribute = LDOObject_GetU32Attribute(*v16, "_WTYPE", &v65, &v64);
                uint64_t v19 = LH_ERROR_to_VERROR(U32Attribute);
                if ((v19 & 0x80000000) != 0)
                {
                  a5 = v51;
                  goto LABEL_49;
                }
                if (v65 == 1)
                {
                  uint64_t v23 = v17;
                  unint64_t v24 = v57 - v17;
                  unint64_t v25 = (v57 - v17) >> 3;
                  if (v53 != v25 || v25 == -1)
                  {
                    unint64_t v30 = (v24 >> 3);
                    a7 = v52;
                    unint64_t v17 = v23;
                  }
                  else
                  {
                    unsigned int v26 = 2 * v53;
                    if (2 * v53 >= v53 + 1000000) {
                      unsigned int v26 = v53 + 1000000;
                    }
                    if (v26 <= v53 + 1) {
                      unsigned int v27 = v53 + 1;
                    }
                    else {
                      unsigned int v27 = v26;
                    }
                    if (v27 <= 8) {
                      unsigned int v27 = 8;
                    }
                    unsigned int v53 = v27;
                    uint64_t v28 = OOCAllocator_Realloc(v51, v23, 8 * v27, (_DWORD *)&v65 + 1);
                    int v29 = HIDWORD(v65);
                    if (HIDWORD(v65))
                    {
                      a7 = v52;
                      unint64_t v17 = v28;
LABEL_30:
                      uint64_t v19 = LH_ERROR_to_VERROR(v29);
LABEL_31:
                      a5 = v51;
                      if ((v19 & 0x80000000) == 0)
                      {
                        uint64_t v34 = *(void *)(a6 + 16);
                        uint64_t v35 = *(uint64_t ***)(v34 + 80);
                        unint64_t v36 = *(void *)(v34 + 88);
                        unint64_t v37 = v57;
                        BOOL v38 = (unint64_t)v35 >= v36 || v17 >= v57;
                        if (v38)
                        {
                          unint64_t v54 = v17;
                          goto LABEL_39;
                        }
                        uint64_t v43 = (uint64_t **)v17;
                        unint64_t v49 = v36;
                        unint64_t v50 = v17;
                        while (1)
                        {
                          __int16 v44 = *v35;
                          v55 = v43;
                          int v45 = *v43;
                          int v46 = LDOObject_GetU32Attribute(*v35, "INDEX", &v58, &v61);
                          uint64_t v14 = LH_ERROR_to_VERROR(v46);
                          if ((v14 & 0x80000000) != 0) {
                            return v14;
                          }
                          int v47 = LDOObject_GetU32Attribute(v45, "INDEX", &v58, &v60);
                          uint64_t v14 = LH_ERROR_to_VERROR(v47);
                          if ((v14 & 0x80000000) != 0) {
                            return v14;
                          }
                          if (v61 <= v60)
                          {
                            uint64_t v19 = loc_exportNode_WordRecord(v56, a2, a3, a4, v63, v44, &v59, &v62, a7);
                            unint64_t v37 = v57;
                            unint64_t v17 = v50;
                            if ((v19 & 0x80000000) != 0) {
                              break;
                            }
                            ++v35;
                            unint64_t v36 = v49;
                            uint64_t v43 = v55;
                          }
                          else
                          {
                            uint64_t v19 = loc_exportNonMarkerLabelWithWType(v56, a2, a3, a4, v63, v45, &v59, &v62, a7);
                            unint64_t v36 = v49;
                            unint64_t v17 = v50;
                            if ((v19 & 0x80000000) != 0) {
                              break;
                            }
                            uint64_t v43 = v55 + 1;
                            unint64_t v37 = v57;
                          }
                          if ((unint64_t)v35 >= v36 || (unint64_t)v43 >= v37)
                          {
                            unint64_t v54 = (unint64_t)v43;
                            unint64_t v17 = v50;
LABEL_39:
                            while ((unint64_t)v35 < v36)
                            {
                              uint64_t v19 = loc_exportNode_WordRecord(v56, a2, a3, a4, v63, *v35, &v59, &v62, a7);
                              if ((v19 & 0x80000000) != 0) {
                                goto LABEL_49;
                              }
                              ++v35;
                            }
                            if (v54 < v37)
                            {
                              unint64_t v40 = v37;
                              unint64_t v41 = v17;
                              unint64_t v42 = v54 + 8;
                              do
                              {
                                uint64_t v19 = loc_exportNonMarkerLabelWithWType(v56, a2, a3, a4, v63, *(uint64_t **)(v42 - 8), &v59, &v62, a7);
                                if ((v19 & 0x80000000) != 0) {
                                  break;
                                }
                                BOOL v38 = v42 >= v40;
                                v42 += 8;
                              }
                              while (!v38);
                              unint64_t v17 = v41;
                            }
                            break;
                          }
                        }
                      }
LABEL_49:
                      if (v17) {
                        OOCAllocator_Free(a5, v17);
                      }
                      return v19;
                    }
                    unint64_t v30 = (v24 >> 3);
                    unint64_t v57 = v28 + 8 * v25;
                    a7 = v52;
                    unint64_t v17 = v28;
                  }
                  unint64_t v31 = v21;
                  BOOL v32 = v30 > v21;
                  unint64_t v33 = v30 - v21;
                  if (v32)
                  {
                    cstdlib_memmove((void *)(v17 + 8 * v21 + 8), (const void *)(v17 + 8 * v21), 8 * v33);
                    unint64_t v31 = v21;
                  }
                  v57 += 8;
                  *(void *)(v17 + 8 * v31) = v20;
                  unint64_t v18 = v31 + 1;
                }
                else
                {
                  unint64_t v18 = v21;
                }
              }
              if ((unint64_t)++v16 >= *(void *)(*(void *)(a6 + 32) + 32))
              {
                int v29 = HIDWORD(v65);
                if (HIDWORD(v65)) {
                  goto LABEL_30;
                }
                goto LABEL_31;
              }
            }
          }
        }
      }
    }
  }
  return v14;
}

uint64_t loc_exportNode_WordRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _DWORD *a7, unsigned __int16 *a8, int a9)
{
  if (*a7 == 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 2, a5, a8);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *a7 = 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 80))(a3, a4, *a8, a8);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  int v31 = 0;
  __int16 v30 = 0;
  int v27 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v24 = 0;
  int U32Attribute = LDOObject_GetU32Attribute(a6, "_WTYPE", &v24, &v26);
  uint64_t result = LH_ERROR_to_VERROR(U32Attribute);
  if ((result & 0x80000000) == 0)
  {
    if (v24)
    {
      int v31 = v26;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, *a8, 0, 1, &v31, &v30);
      if ((result & 0x80000000) == 0)
      {
        int v18 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)a6, (_DWORD *)&v25 + 1);
        uint64_t result = LH_ERROR_to_VERROR(v18);
        if ((result & 0x80000000) == 0)
        {
          __int16 v19 = WORD2(v25);
          __int16 v29 = WORD2(v25);
          int v20 = LDOObject_GetU32Attribute(a6, "FROMOVERFLOW", &v24, &v27);
          uint64_t result = LH_ERROR_to_VERROR(v20);
          if ((result & 0x80000000) == 0)
          {
            if (v24) {
              __int16 v29 = v27 + v19;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a8, 1, 1, &v29, &v30);
            if ((result & 0x80000000) == 0)
            {
              int v21 = LDOTreeNode_ComputeAbsoluteTo((size_t)a6, &v25);
              uint64_t result = LH_ERROR_to_VERROR(v21);
              if ((result & 0x80000000) == 0)
              {
                __int16 v22 = v25;
                __int16 v28 = v25;
                int v23 = LDOObject_GetU32Attribute(a6, "TOOVERFLOW", &v24, (_DWORD *)&v26 + 1);
                uint64_t result = LH_ERROR_to_VERROR(v23);
                if ((result & 0x80000000) == 0)
                {
                  if (v24) {
                    __int16 v28 = WORD2(v26) + v22;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, *a8, 2, 1, &v28, &v30);
                  if ((result & 0x80000000) == 0) {
                    return loc_exportWordRecordCommonFieldsToLingDB(a1, a2, a3, a4, a6, *a8, a9);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 2147491860;
    }
  }
  return result;
}

uint64_t loc_exportNonMarkerLabelWithWType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, _DWORD *a7, unsigned __int16 *a8, int a9)
{
  if (*a7 == 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a2 + 72))(a3, a4, 2, a5, a8);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *a7 = 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 80))(a3, a4, *a8, a8);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  uint64_t v17 = *a8;
  __int16 v28 = 0;
  int v25 = 0;
  uint64_t v24 = 0;
  int v23 = 0;
  int U32Attribute = LDOObject_GetU32Attribute(a6, "_WTYPE", &v23, &v24);
  uint64_t result = LH_ERROR_to_VERROR(U32Attribute);
  if ((result & 0x80000000) == 0)
  {
    __int16 AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a6);
    __int16 v27 = AbsoluteFrom;
    int v20 = LDOObject_GetU32Attribute(a6, "FROMOVERFLOW", &v23, &v25);
    uint64_t result = LH_ERROR_to_VERROR(v20);
    if ((result & 0x80000000) == 0)
    {
      if (v23) {
        __int16 v27 = v25 + AbsoluteFrom;
      }
      __int16 AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)a6);
      __int16 v26 = AbsoluteTo;
      int v22 = LDOObject_GetU32Attribute(a6, "TOOVERFLOW", &v23, (_DWORD *)&v24 + 1);
      uint64_t result = LH_ERROR_to_VERROR(v22);
      if ((result & 0x80000000) == 0)
      {
        if (v23) {
          __int16 v26 = WORD2(v24) + AbsoluteTo;
        }
        int v29 = v24;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, v17, 0, 1, &v29, &v28);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v17, 1, 1, &v27, &v28);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v17, 2, 1, &v26, &v28);
            if ((result & 0x80000000) == 0) {
              return loc_exportWordRecordCommonFieldsToLingDB(a1, a2, a3, a4, a6, v17, a9);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t replaceBasicTokensWithTokenIntTnInLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  int v59 = 0;
  uint64_t v58 = 0;
  uint64_t v7 = *(void *)(a5 + 32);
  uint64_t v8 = *(uint64_t ***)(v7 + 24);
  if ((unint64_t)v8 >= *(void *)(v7 + 32)) {
    return v6;
  }
  uint64_t v6 = 0;
  while (1)
  {
    unsigned __int16 v13 = *v8;
    if (*((_DWORD *)*v8 + 26) != 1) {
      goto LABEL_50;
    }
    int U32Attribute = LDOObject_GetU32Attribute(*v8, "_TTYPE", (_DWORD *)&v58 + 1, &v59);
    uint64_t v6 = LH_ERROR_to_VERROR(U32Attribute);
    if ((v6 & 0x80000000) != 0) {
      return v6;
    }
    if (!HIDWORD(v58) || v59 != 6) {
      goto LABEL_50;
    }
    unsigned __int16 AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v13);
    unsigned __int16 AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)v13);
    int v17 = LDOObject_GetU32Attribute(v13, "CREATED_BEFORE_TOKENTN", (_DWORD *)&v58 + 1, &v58);
    uint64_t v6 = LH_ERROR_to_VERROR(v17);
    if ((v6 & 0x80000000) != 0) {
      return v6;
    }
    if (HIDWORD(v58) && v58 == 1) {
      goto LABEL_50;
    }
    int v62 = 0;
    int v63 = 0;
    unsigned int v61 = 0;
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v63 + 2);
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 3, HIWORD(v63), &v63);
    if ((v25 & 0x80000000) == 0 && (_WORD)v63)
    {
      int v26 = 0;
      unsigned int v55 = AbsoluteFrom;
      unsigned int v27 = AbsoluteTo;
      int v28 = 1;
LABEL_14:
      int v54 = v26;
      while (1)
      {
        uint64_t v29 = (unsigned __int16)v63;
        LOWORD(v64) = 0;
        __int16 v67 = 0;
        int v30 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a2 + 184))(a3, a4, (unsigned __int16)v63, 1, &v64);
        uint64_t v35 = 24031;
        if (v30 < 0 || (unsigned __int16)v64 != 1) {
          goto LABEL_56;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a2 + 168))(a3, a4, v29, 1, 1, (char *)&v62 + 2, &v67);
        if (v67 != 1) {
          goto LABEL_55;
        }
        uint64_t v36 = (unsigned __int16)v63;
        LOWORD(v64) = 0;
        __int16 v67 = 0;
        int v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a2 + 184))(a3, a4, (unsigned __int16)v63, 2, &v64);
        uint64_t v35 = 24031;
        if (v37 < 0 || (unsigned __int16)v64 != 1) {
          goto LABEL_56;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, __int16 *))(a2 + 168))(a3, a4, v36, 2, 1, &v62, &v67);
        if (v67 != 1)
        {
LABEL_55:
          uint64_t v35 = 24030;
LABEL_56:
          uint64_t v6 = 2147491840;
          uint64_t v25 = a6;
          uint64_t v49 = a1;
          uint64_t v50 = *(void *)(a1 + 32);
          uint64_t v51 = a6;
LABEL_57:
          log_OutPublic(v50, v51, v35, 0, v31, v32, v33, v34, v53);
          goto LABEL_62;
        }
        uint64_t v38 = (unsigned __int16)v63;
        LOWORD(v64) = 0;
        __int16 v67 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(a2 + 184))(a3, a4, (unsigned __int16)v63, 0, &v64) & 0x80000000) == 0&& (unsigned __int16)v64 == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, unsigned int *, __int16 *))(a2 + 168))(a3, a4, v38, 0, 1, &v61, &v67);
          if (v67 != 1)
          {
            uint64_t v6 = 2147491840;
            uint64_t v25 = a6;
            uint64_t v49 = a1;
            uint64_t v50 = *(void *)(a1 + 32);
            uint64_t v51 = a6;
            uint64_t v35 = 24030;
            goto LABEL_57;
          }
        }
        if (HIWORD(v62) >= v27 && v61 != 5)
        {
          uint64_t v6 = 0;
LABEL_54:
          log_OutText(*(void *)(a1 + 32), a6, 4, 0, (uint64_t)"ldoutil : loc_replaceBasicTokensWithTokenIntTnInLingDB End (%x) ", v32, v33, v34, v6);
          goto LABEL_50;
        }
        if (HIWORD(v62) < v55 || (unsigned __int16)v62 > v27 || v61 > 3)
        {
          uint64_t v6 = 0;
          int v26 = (unsigned __int16)v63;
LABEL_46:
          if ((*(unsigned int (**)(uint64_t, uint64_t, void, int *))(a2 + 120))(a3, a4, (unsigned __int16)v26, &v63)|| !(_WORD)v63)
          {
            goto LABEL_54;
          }
          goto LABEL_14;
        }
        if (v28 != 1) {
          break;
        }
        if (HIWORD(v62) != v55)
        {
          uint64_t v6 = 0;
          int v28 = 1;
          goto LABEL_39;
        }
        unsigned __int16 v60 = v63;
        int v39 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a3, a4);
        if (v39 < 0)
        {
          LODWORD(v25) = v39;
          return v25 | 0x80002000;
        }
        uint64_t v40 = v60;
        __int16 v67 = v55;
        __int16 v66 = v27;
        __int16 v65 = 0;
        int v64 = 6;
        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, v60, 0, 1, &v64, &v65);
        if ((v41 & 0x80000000) != 0
          || (uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v40, 1, 1, &v67, &v65), (v41 & 0x80000000) != 0)|| (uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, v40, 2, 1, &v66, &v65), (v41 & 0x80000000) != 0))
        {
          uint64_t v6 = v41;
LABEL_60:
          uint64_t v25 = a6;
          goto LABEL_61;
        }
        uint64_t v42 = a1;
        uint64_t v6 = loc_exportTokenIntTnSpecificFieldToLingDB(a1, a2, a3, a4, v13, v40);
        if ((v6 & 0x80000000) != 0) {
          goto LABEL_60;
        }
        int v28 = 0;
LABEL_40:
        int v47 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 192))(a3, a4, (unsigned __int16)v63);
        uint64_t v48 = *(void *)(v42 + 32);
        if (v47)
        {
          log_OutPublic(v48, a6, 24033, (uint64_t)"%s%d", v43, v44, v45, v46, "tokenRecId");
          goto LABEL_54;
        }
        log_OutText(v48, a6, 5, 0, (uint64_t)"deleting key %d", v44, v45, v46, (unsigned __int16)v63);
        if ((_WORD)v54)
        {
          int v26 = v54;
          LOWORD(v63) = v54;
          goto LABEL_46;
        }
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 3, HIWORD(v63), &v63);
        if ((v18 & 0x80000000) != 0) {
          goto LABEL_58;
        }
      }
      uint64_t v6 = 0;
      int v28 = 0;
LABEL_39:
      uint64_t v42 = a1;
      goto LABEL_40;
    }
    log_OutText(*(void *)(a1 + 32), a6, 4, 0, (uint64_t)"ldoutil : loc_replaceBasicTokensWithTokenIntTnInLingDB End (%x) ", v22, v23, v24, v25);
    uint64_t v6 = v25;
    if ((v25 & 0x80000000) != 0) {
      return v25 | 0x80002000;
    }
LABEL_50:
    if ((unint64_t)++v8 >= *(void *)(*(void *)(a5 + 32) + 32)) {
      return v6;
    }
  }
LABEL_58:
  uint64_t v6 = v18;
  uint64_t v25 = a6;
LABEL_61:
  uint64_t v49 = a1;
LABEL_62:
  log_OutText(*(void *)(v49 + 32), v25, 4, 0, (uint64_t)"ldoutil : loc_replaceBasicTokensWithTokenIntTnInLingDB End (%x) ", v19, v20, v21, v6);
  LODWORD(v25) = v6;
  return v25 | 0x80002000;
}

uint64_t LingDBIsValid(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v10 = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0)
  {
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1 + 184))(a2, a3, HIWORD(v10), 3, &v10);
    uint64_t result = 0;
    if ((v9 & 0x80000000) == 0)
    {
      if ((_WORD)v10)
      {
        uint64_t result = 0;
        *a4 = 1;
      }
    }
  }
  return result;
}

uint64_t LingDBHasSentence(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v11 = 0;
  unsigned __int16 v10 = 0;
  uint64_t v9 = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v11 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(a1 + 184))(a2, a3, HIWORD(v11), 0, &v11);
    if ((result & 0x80000000) == 0)
    {
      if ((_WORD)v11)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(a1 + 176))(a2, a3, HIWORD(v11), 0, &v9, &v10);
        if ((result & 0x80000000) == 0 && v10 >= 2u) {
          *a4 = 1;
        }
      }
    }
  }
  return result;
}

uint64_t loc_importTokenIntTnFieldsFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = 0;
  int v28 = 0;
  uint64_t v27 = 0;
  LDOObject_SetU32Attribute(a5, "CREATED_BEFORE_TOKENTN", 1);
  uint64_t v13 = LH_ERROR_to_VERROR(v12);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, 3, &v29, (char *)&v28 + 2);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v14 = LDOObject_SetStringAttribute(a5, "NORM", v29);
  uint64_t v13 = LH_ERROR_to_VERROR(v14);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, 4, &v29, (char *)&v28 + 2);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v15 = LDOObject_SetStringAttribute(a5, "TNTAG", v29);
  uint64_t v13 = LH_ERROR_to_VERROR(v15);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, 5, &v28);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (!(_WORD)v28)
  {
    uint64_t v18 = 0;
    goto LABEL_21;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, char *))(a2 + 176))(a3, a4, a6, 5, &v27, (char *)&v28 + 2);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  LDOObject_SetU32Attribute(a5, "_MRKRD", HIWORD(v28));
  uint64_t v13 = LH_ERROR_to_VERROR(v16);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (HIWORD(v28))
  {
    uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), HIWORD(v28), 4);
    if (!v17) {
      return 2147491850;
    }
    uint64_t v18 = (const void *)v17;
    uint64_t v19 = HIWORD(v28);
    if (HIWORD(v28))
    {
      uint64_t v20 = 0;
      uint64_t v21 = v27;
      do
      {
        *(_DWORD *)(v17 + 4 * v20) = *(unsigned __int16 *)(v21 + 2 * v20);
        ++v20;
      }
      while (v19 != v20);
    }
  }
  else
  {
    uint64_t v18 = 0;
    LODWORD(v19) = 0;
  }
  int v24 = LDOObject_SetListU32Attribute(a5, "_MRK", v18, v19);
  uint64_t v25 = LH_ERROR_to_VERROR(v24);
  if ((v25 & 0x80000000) != 0) {
    goto LABEL_25;
  }
LABEL_21:
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, 6, &v28);
  if ((v22 & 0x80000000) == 0 && (_WORD)v28)
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, 6, &v29, (char *)&v28 + 2);
    if ((v25 & 0x80000000) == 0)
    {
      int v26 = LDOObject_SetStringAttribute(a5, "LANGMAP", v29);
      uint64_t v25 = LH_ERROR_to_VERROR(v26);
    }
LABEL_25:
    uint64_t v22 = v25;
  }
  if (v18) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v18);
  }
  return v22;
}

uint64_t loc_importTokenDctFieldsFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v14 = 0;
  __int16 v13 = 0;
  LDOObject_SetU32Attribute(a4, "CREATED_BEFORE_TOKENTN", 1);
  uint64_t result = LH_ERROR_to_VERROR(v10);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(a1 + 176))(a2, a3, a5, 3, &v14, &v13);
    if ((result & 0x80000000) == 0)
    {
      int v12 = LDOObject_SetStringAttribute(a4, "NORM", v14);
      return LH_ERROR_to_VERROR(v12);
    }
  }
  return result;
}

uint64_t loc_compute_overflow(uint64_t a1, unsigned int *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v16 = 0;
  int v9 = LDO_ComputeText(a1, &v16);
  uint64_t v10 = LH_ERROR_to_VERROR(v9);
  if ((v10 & 0x80000000) == 0)
  {
    unsigned int v11 = LHString_Length(v16);
    *a4 = 0;
    *a5 = 0;
    unsigned int v12 = *a3;
    if (*a3 > v11)
    {
      *a5 = *a3 - v11;
      *a3 = v11;
      unsigned int v12 = v11;
    }
    unsigned int v13 = *a2;
    if (*a2 > v11)
    {
      *a4 = *a2 - v11;
      *a2 = v11;
      unsigned int v12 = *a3;
      unsigned int v13 = v11;
    }
    if (v13 > v12) {
      *a2 = v12;
    }
  }
  if (v16)
  {
    uint64_t v14 = LDOString_BorrowAllocator(v16);
    OOC_PlacementDeleteObject(v14, v16);
  }
  return v10;
}

uint64_t loc_importWordRecordFieldsFromLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  uint64_t v12 = a5;
  int v48 = 0;
  unsigned __int16 v47 = 0;
  uint64_t v45 = 0;
  __s = 0;
  LDOObject_SetU32Attribute(a5, "INDEX", a7);
  uint64_t v18 = LH_ERROR_to_VERROR(v17);
  if ((v18 & 0x80000000) == 0)
  {
    if (!a9
      || (LDOObject_SetU32Attribute(v12, "FROMOVERFLOW", a9), uint64_t v18 = LH_ERROR_to_VERROR(v19), (v18 & 0x80000000) == 0))
    {
      if (!a10
        || (LDOObject_SetU32Attribute(v12, "TOOVERFLOW", a10), uint64_t v18 = LH_ERROR_to_VERROR(v20), (v18 & 0x80000000) == 0))
      {
        int v43 = a8;
        uint64_t v44 = a1;
        uint64_t v21 = 0;
        uint64_t v22 = "PRIORITY";
        do
        {
          uint64_t v23 = LOBYTE((&u16Attributes)[v21 + 1]);
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, v23, &v48);
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
          if ((_WORD)v48)
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *))(a2 + 168))(a3, a4, a6, v23, 1, &v47, (char *)&v48 + 2);
            if ((v18 & 0x80000000) != 0) {
              return v18;
            }
            LDOObject_SetU32Attribute(v12, v22, v47);
            uint64_t v18 = LH_ERROR_to_VERROR(v24);
            if ((v18 & 0x80000000) != 0) {
              return v18;
            }
          }
          uint64_t v22 = (&u16Attributes)[v21 + 2];
          v21 += 2;
        }
        while (v21 != 8);
        uint64_t v25 = 0;
        int v26 = "PHON";
        uint64_t v27 = &off_264560080;
        uint64_t v42 = v12;
        while (1)
        {
          uint64_t v28 = *((unsigned __int8 *)v27 - 8);
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, v28, &v48);
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
          if ((_WORD)v48)
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a6, v28, &__s, (char *)&v48 + 2);
            if ((v18 & 0x80000000) != 0) {
              return v18;
            }
            if (v43)
            {
              if ((unsigned __int16)v25 <= 0xCu && ((1 << v25) & 0x1101) != 0)
              {
LABEL_19:
                uint64_t v29 = (unsigned __int8 *)__s;
                unsigned int v49 = 0;
                unsigned int v30 = cstdlib_strlen(__s);
                unsigned int v31 = Utf8_DepesLengthInBytesUtf8(v29, v30);
                uint64_t v32 = heap_Calloc(*(void **)(v44 + 8), v31 + 1, 1);
                if (!v32) {
                  return 2147491850;
                }
                uint64_t v33 = (char *)v32;
                unsigned int v34 = cstdlib_strlen((const char *)v29);
                uint64_t v35 = utf8_DepesToUtf8((uint64_t)v29, v34, 0, (uint64_t)v33, v31, &v49, 0);
                if ((v35 & 0x80000000) != 0
                  || (v33[v49] = 0,
                      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 320))(a3, a4, 0),
                      (v35 & 0x80000000) != 0)
                  || (int v36 = LDOObject_SetStringAttribute(v42, v26, v33),
                      uint64_t v35 = LH_ERROR_to_VERROR(v36),
                      (v35 & 0x80000000) != 0))
                {
                  uint64_t v39 = v35;
                  heap_Free(*(void **)(v44 + 8), (uint64_t)v33);
                  return v39;
                }
                heap_Free(*(void **)(v44 + 8), (uint64_t)v33);
                uint64_t v12 = v42;
                goto LABEL_26;
              }
            }
            else if (v25 == 12)
            {
              goto LABEL_19;
            }
            int v37 = LDOObject_SetStringAttribute(v12, v26, __s);
            uint64_t v18 = LH_ERROR_to_VERROR(v37);
            if ((v18 & 0x80000000) != 0) {
              return v18;
            }
          }
LABEL_26:
          uint64_t v38 = *v27;
          v27 += 2;
          int v26 = v38;
          if (++v25 == 14)
          {
            uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a2 + 184))(a3, a4, a6, 16, &v48);
            if ((v39 & 0x80000000) != 0 || !(_WORD)v48) {
              return v39;
            }
            uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void **, char *))(a2 + 176))(a3, a4, a6, 16, &v45, (char *)&v48 + 2);
            if ((v18 & 0x80000000) == 0)
            {
              int v40 = LDOObject_SetListU32Attribute(v12, "SGT", v45, HIWORD(v48));
              return LH_ERROR_to_VERROR(v40);
            }
            return v18;
          }
        }
      }
    }
  }
  return v18;
}

uint64_t loc_exportTokenIntTnSpecificFieldToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  int v41 = 1;
  __s = 0;
  __int16 v39 = 0;
  int v37 = 0;
  int v38 = 0;
  __int16 v36 = 0;
  int StringAttribute = LDOObject_GetStringAttribute(a5, "NORM", &v41, (uint64_t *)&__s);
  uint64_t v13 = LH_ERROR_to_VERROR(StringAttribute);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v14 = 2147491860;
  if (!v41) {
    return 2147491860;
  }
  int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a2 + 160);
  __int16 v16 = cstdlib_strlen(__s);
  uint64_t v13 = v15(a3, a4, a6, 3, (unsigned __int16)(v16 + 1), __s, &v39);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v17 = LDOObject_GetStringAttribute(a5, "TNTAG", &v41, (uint64_t *)&__s);
  uint64_t v13 = LH_ERROR_to_VERROR(v17);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (!v41) {
    return 2147491860;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a2 + 160);
  __int16 v19 = cstdlib_strlen(__s);
  uint64_t v13 = v18(a3, a4, a6, 4, (unsigned __int16)(v19 + 1), __s, &v39);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v20 = LDOObject_GetStringAttribute(a5, "LANGMAP", &v41, (uint64_t *)&__s);
  uint64_t v13 = LH_ERROR_to_VERROR(v20);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (v41)
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a2 + 160);
    __int16 v22 = cstdlib_strlen(__s);
    uint64_t v13 = v21(a3, a4, a6, 6, (unsigned __int16)(v22 + 1), __s, &v39);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
  }
  int U32Attribute = LDOObject_GetU32Attribute(a5, "ORIGREFDUR", &v41, &v37);
  uint64_t v13 = LH_ERROR_to_VERROR(U32Attribute);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (v41)
  {
    __int16 v36 = v37;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, a6, 8, 1, &v36, &v39);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
  }
  int v24 = LDOObject_GetU32Attribute(a5, "_MRKRD", &v41, &v38);
  uint64_t v25 = LH_ERROR_to_VERROR(v24);
  if ((v25 & 0x80000000) == 0 && v41)
  {
    uint64_t v35 = 0;
    int v34 = 0;
    Listint U32Attribute = LDOObject_GetListU32Attribute(a5, "_MRK", &v41, &v35, &v34);
    uint64_t v27 = LH_ERROR_to_VERROR(ListU32Attribute);
    if ((v27 & 0x80000000) != 0) {
      return v27;
    }
    if (!v41) {
      return v14;
    }
    __int16 v33 = v34;
    unsigned int v28 = (unsigned __int16)v34;
    if ((_WORD)v34)
    {
      uint64_t v29 = heap_Calloc(*(void **)(a1 + 8), (unsigned __int16)v34, 2);
      if (!v29) {
        return 2147491850;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    if (v28)
    {
      unint64_t v31 = 0;
      uint64_t v32 = v35;
      do
      {
        *(_WORD *)(v29 + 2 * v31) = *(_DWORD *)(v32 + 4 * v31);
        ++v31;
      }
      while (v31 < v28);
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *))(a2 + 160))(a3, a4, a6, 5, (unsigned __int16)v38, v29, &v33);
    if (v29) {
      heap_Free(*(void **)(a1 + 8), v29);
    }
    if (v35) {
      heap_Free(*(void **)(a1 + 8), v35);
    }
  }
  return v25;
}

uint64_t loc_exportWordRecordCommonFieldsToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v37 = 0;
  uint64_t v12 = 0;
  __s = 0;
  __int16 v40 = 0;
  int v39 = 0;
  uint64_t v38 = 0;
  uint64_t v13 = "PRIORITY";
  while (1)
  {
    int U32Attribute = LDOObject_GetU32Attribute(a5, v13, &v37, &v39);
    uint64_t v15 = LH_ERROR_to_VERROR(U32Attribute);
    if ((v15 & 0x80000000) != 0) {
      break;
    }
    if (v37)
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, __int16 *))(a2 + 160))(a3, a4, a6, LOBYTE((&u16Attributes)[v12 + 1]), 1, &v39, &v40);
      if ((v15 & 0x80000000) != 0) {
        break;
      }
    }
    uint64_t v13 = (&u16Attributes)[v12 + 2];
    v12 += 2;
    if (v12 == 8)
    {
      uint64_t v16 = 0;
      int v17 = "PHON";
      while (1)
      {
        int StringAttribute = LDOObject_GetStringAttribute(a5, v17, &v37, (uint64_t *)&__s);
        uint64_t v15 = LH_ERROR_to_VERROR(StringAttribute);
        if ((v15 & 0x80000000) != 0) {
          break;
        }
        if (v37)
        {
          __int16 v19 = &(&stringAttributes)[v16];
          if ((!a7 || cstdlib_strcmp(v17, "PHON") && cstdlib_strcmp(v17, "MULTIPHON")) && cstdlib_strcmp(v17, "SPTCHK"))
          {
            int v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a2 + 160);
            uint64_t v21 = *((unsigned __int8 *)v19 + 8);
            __int16 v22 = cstdlib_strlen(__s);
            uint64_t v15 = v20(a3, a4, a6, v21, (unsigned __int16)(v22 + 1), __s, &v40);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
          }
          else
          {
            uint64_t v23 = __s;
            int v24 = cstdlib_strlen(__s);
            uint64_t v25 = (v24 + 1);
            unsigned int v42 = v24 + 1;
            uint64_t v26 = heap_Calloc(*(void **)(a1 + 8), v25, 1);
            if (!v26) {
              return 2147491850;
            }
            uint64_t v27 = (const char *)v26;
            uint64_t v15 = utf8_Utf8ToDepes((uint64_t)v23, v25, 0, v26, v25, &v42, 0);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            v27[v42 - 1] = 0;
            uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 320))(a3, a4, 1);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            unsigned int v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a2 + 160);
            uint64_t v29 = *((unsigned __int8 *)v19 + 8);
            __int16 v30 = cstdlib_strlen(v27);
            uint64_t v31 = v28(a3, a4, a6, v29, (unsigned __int16)(v30 + 1), v27, &v40);
            heap_Free(*(void **)(a1 + 8), (uint64_t)v27);
            if ((v31 & 0x80000000) != 0) {
              return v31;
            }
          }
        }
        int v17 = (&stringAttributes)[v16 + 2];
        v16 += 2;
        if (v16 == 28)
        {
          Listint U32Attribute = LDOObject_GetListU32Attribute(a5, "SGT", &v37, &v38, (_DWORD *)&v37 + 1);
          uint64_t v31 = LH_ERROR_to_VERROR(ListU32Attribute);
          uint64_t v33 = v38;
          if ((v31 & 0x80000000) == 0
            && v37
            && (uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *))(a2 + 160))(a3, a4, a6, 16, WORD2(v37), v38, &v40), v33 = v38, (v31 & 0x80000000) == 0)&& v38|| v33)
          {
            heap_Free(*(void **)(a1 + 8), v33);
          }
          return v31;
        }
      }
      return v15;
    }
  }
  return v15;
}

uint64_t luavmldoutil_destroy_lua_vm(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (v3)
  {
    uint64_t result = OOC_PlacementDeleteObject(result, v3);
    *a2 = 0;
  }
  return result;
}

uint64_t luavmldoutil_initialize_lua_vm(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char *a7)
{
  return hlp_luavmldoutil_initialize_lua_vm(a1, a2, a3, a4, a5, a6, a7, 0, 1);
}

uint64_t hlp_luavmldoutil_initialize_lua_vm(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char *__src, unsigned int a8, int a9)
{
  int v21 = 0;
  if (*a6)
  {
    OOC_PlacementDeleteObject(a3, *a6);
    *a6 = 0;
  }
  if (a9 == 1)
  {
    int IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(a1, a2, __src, &v21);
    if (IsLuaCodeAvailable) {
      goto LABEL_7;
    }
    if (!v21)
    {
      int v18 = 0;
      goto LABEL_10;
    }
  }
  int v21 = 0;
  int IsLuaCodeAvailable = PNEW_LuaVMLDO_Con(a3, a3, (uint64_t)a1, a2, a5, (uint64_t **)a6);
  if (IsLuaCodeAvailable) {
    goto LABEL_7;
  }
  uint64_t v20 = *a6;
  if (a9 != 1)
  {
    int IsLuaCodeAvailable = LuaVMLDO_LoadScriptFromBuffer(v20, (uint64_t)__src, a8);
    if (!IsLuaCodeAvailable) {
      goto LABEL_20;
    }
LABEL_7:
    if (IsLuaCodeAvailable == 1) {
      int v18 = -2147475446;
    }
    else {
      int v18 = -2147475456;
    }
    goto LABEL_10;
  }
  int IsLuaCodeAvailable = LuaVMLDO_LoadScriptFromRIFF(v20, __src);
  if (IsLuaCodeAvailable) {
    goto LABEL_7;
  }
LABEL_20:
  uint64_t result = LuaVMLDO_IsLuaFunctionAvailable(*a6, a4, &v21);
  if (result == 1)
  {
    int v18 = -2147475446;
  }
  else
  {
    if (result) {
      int v18 = -2147475456;
    }
    else {
      int v18 = 0;
    }
    if (!result && v21) {
      return result;
    }
  }
LABEL_10:
  if (*a6)
  {
    OOC_PlacementDeleteObject(a3, *a6);
    *a6 = 0;
  }
  if (v18 < 0) {
    return v18;
  }
  else {
    return 2147491860;
  }
}

uint64_t luavmldoutil_initialize_lua_vm_from_buffer(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, char *a7, unsigned int a8)
{
  return hlp_luavmldoutil_initialize_lua_vm(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t LDO_ConFromNode(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__LDO;
    a1[1] = a2;
    a1[2] = a3;
    uint64_t result = PNEW_LDOLabelSet_Con(a2, a2, a1 + 4);
    if (!result)
    {
      size_t v7 = a1[2];
      return LDOTreeNode_ComputeText(v7, a1 + 3);
    }
  }
  return result;
}

uint64_t LDO_ConFromText(void *a1, uint64_t a2, char *a3, char *a4, char *a5)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__LDO;
    a1[1] = a2;
    uint64_t result = PNEW_LDOString_ConFromCPtr(a2, a2, a3, a1 + 3);
    if (!result)
    {
      uint64_t result = PNEW_LDOTreeNode_ConRoot(a1[1], a1[1], a3, a4, a5, a1 + 2);
      if (!result)
      {
        uint64_t v11 = a1[1];
        return PNEW_LDOLabelSet_Con(v11, v11, a1 + 4);
      }
    }
  }
  return result;
}

uint64_t LDO_Des(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  if (!v2 || (uint64_t result = OOC_PlacementDeleteObject(a1[1], v2), !result))
  {
    uint64_t v4 = a1[2];
    if (!v4 || (uint64_t result = OOC_PlacementDeleteObject(a1[1], v4), !result))
    {
      uint64_t v5 = a1[4];
      if (!v5 || (uint64_t result = OOC_PlacementDeleteObject(a1[1], v5), !result))
      {
        return Object_Des();
      }
    }
  }
  return result;
}

uint64_t LDO_AddLabel(uint64_t a1, char *a2, char *a3, uint64_t a4, void *a5)
{
  uint64_t v15 = 0;
  if (((*(void *)(a4 + 16) - *(void *)(a4 + 8)) & 0x7FFFFFFF8) != 0
    && LDOTreeNode_HaveSameParent(a4) == 1)
  {
    PNEW_LDOLabel_Con(*(void *)(a1 + 8), *(void *)(a1 + 8), a2, a3, a4, &v15);
    uint64_t v11 = v15;
    if (v10)
    {
      uint64_t v12 = v10;
    }
    else
    {
      uint64_t v14 = LDOLabelSet_AddLabel(*(void *)(a1 + 32), v15);
      uint64_t v12 = v14;
      uint64_t v11 = v15;
      if (a5 && !v14)
      {
        *a5 = v15;
        return v12;
      }
    }
    if (v12)
    {
      if (v11) {
        OOC_PlacementDeleteObject(*(void *)(a1 + 8), v11);
      }
    }
    return v12;
  }

  return err_GenerateErrorArg();
}

uint64_t LDO_AddLabelOnSubstring(uint64_t a1, char *a2, char *a3, unsigned int *a4, unsigned int *a5, void *a6)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = LDO_ValidateIndices(a1, a4, a5, (unsigned int *)&v14 + 1, (unsigned int *)&v14, 0);
  if (!v12)
  {
    if (HIDWORD(v14) == v14)
    {
      return LDO_AddSpecialLabel(a1, a2, a3, (unsigned int *)&v14 + 1, (unsigned int *)&v14, a6);
    }
    else
    {
      uint64_t v12 = LDO_ComputeLeafNodesByRange(a1, a4, a5, (unsigned int *)&v15);
      if (!v12)
      {
        uint64_t v12 = LDO_AddLabel(a1, a2, a3, (uint64_t)&v15, a6);
        LODWORD(v15) = 0;
        if (v16) {
          OOCAllocator_Free(*(void *)(a1 + 8), v16);
        }
      }
    }
  }
  return v12;
}

uint64_t LDO_ValidateIndices(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v17 = 0;
  LDOTreeNode_ComputeAbsoluteTo(*(void *)(a1 + 16), &v17);
  if (a2)
  {
    unsigned int v11 = *a2;
    if (a3) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = &v17;
    }
    unsigned int v13 = *v12;
    if (v11 > v13) {
      return err_GenerateErrorArg();
    }
    unsigned int v15 = v17;
    if (v11 > v17) {
      return err_GenerateErrorArg();
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (a3) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = &v17;
    }
    unsigned int v13 = *v14;
    unsigned int v15 = v17;
  }
  if (v13 > v15) {
    return err_GenerateErrorArg();
  }
  if (a4) {
    *a4 = v11;
  }
  if (a5) {
    *a5 = v13;
  }
  uint64_t result = 0;
  if (a6) {
    *a6 = v15;
  }
  return result;
}

uint64_t LDO_AddSpecialLabel(uint64_t a1, char *a2, char *a3, unsigned int *a4, unsigned int *a5, void *a6)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v10 = LDO_ValidateIndices(a1, a4, a5, (unsigned int *)&v16 + 1, (unsigned int *)&v16, 0);
  if (!v10)
  {
    PNEW_LDOLabel_ConSpecial(*(void *)(a1 + 8), *(void *)(a1 + 8), a2, a3, SHIDWORD(v16), v16, &v17);
    uint64_t v13 = v17;
    if (v12)
    {
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v15 = LDOLabelSet_AddLabel(*(void *)(a1 + 32), v17);
      uint64_t v10 = v15;
      uint64_t v13 = v17;
      if (a6 && !v15)
      {
        *a6 = v17;
        return v10;
      }
    }
    if (v10) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      OOC_PlacementDeleteObject(*(void *)(a1 + 8), v13);
    }
  }
  return v10;
}

uint64_t LDO_ComputeLeafNodesByRange(uint64_t a1, _DWORD *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v26 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  size_t v21 = 0;
  LDOTreeNode_ComputeAbsoluteTo(*(void *)(a1 + 16), &v25);
  if (a2) {
    LODWORD(a2) = *a2;
  }
  if (a3) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = (unsigned int *)&v25;
  }
  unsigned int v9 = *v8;
  *a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  unsigned int ErrorArg = LDOTreeNode_ComputeSubtreeNodes(*(void *)(a1 + 16), (uint64_t)&v22);
  if (!ErrorArg)
  {
    if (a2 <= v9 && a2 <= v25 && v9 <= v25)
    {
      for (i = v23; (unint64_t)i < v24; ++i)
      {
        size_t v21 = *i;
        if (LDOTreeNode_IsLeaf(v21))
        {
          LDOTreeNode_ComputeAbsoluteFrom(v21, &v26);
          if (a2 <= v26)
          {
            LDOTreeNode_ComputeAbsoluteTo(v21, (_DWORD *)&v25 + 1);
            if (v9 >= HIDWORD(v25))
            {
              uint64_t v13 = *((void *)a4 + 1);
              uint64_t v12 = (char *)*((void *)a4 + 2);
              unint64_t v14 = (unint64_t)&v12[-v13];
              unsigned int v15 = ((unint64_t)&v12[-v13] >> 3) + 1;
              unsigned int v16 = *a4;
              if (v15 > *a4)
              {
                unsigned int v17 = 2 * v16;
                unsigned int v18 = v16 + 1000000;
                if (v17 < v18) {
                  unsigned int v18 = v17;
                }
                if (v18 > v15) {
                  unsigned int v15 = v18;
                }
                if (v15 <= 8) {
                  unsigned int v19 = 8;
                }
                else {
                  unsigned int v19 = v15;
                }
                uint64_t v20 = OOCAllocator_Realloc(*(void *)(a1 + 8), v13, 8 * v19, &ErrorArg);
                *((void *)a4 + 1) = v20;
                if (ErrorArg) {
                  break;
                }
                *a4 = v19;
                uint64_t v12 = (char *)(v20 + (v14 & 0x7FFFFFFF8));
                *((void *)a4 + 2) = v12;
              }
              cstdlib_memcpy(v12, &v21, 8uLL);
              *((void *)a4 + 2) += 8;
            }
          }
        }
      }
    }
    else
    {
      unsigned int ErrorArg = err_GenerateErrorArg();
    }
  }
  LODWORD(v22) = 0;
  if (v23) {
    OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v23);
  }
  return ErrorArg;
}

uint64_t LDO_AppendNewNode(uint64_t a1, size_t a2, char *a3, char *a4, int a5, unsigned int a6, void *a7)
{
  uint64_t v9 = 0;
  uint64_t result = PNEW_LDOTreeNode_Con(*(void *)(a1 + 8), *(void *)(a1 + 8), a2, a3, a4, a5, a6, &v9);
  if (a7)
  {
    if (!result) {
      *a7 = v9;
    }
  }
  return result;
}

uint64_t LDO_ComputeLeafNodeContainingRange(uint64_t a1, _DWORD *a2, _DWORD *a3, size_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v16 = 0;
  unsigned int v17 = 0;
  uint64_t v15 = 0;
  unint64_t v18 = 0;
  *a4 = 0;
  if (*a2 == *a3) {
    return v4;
  }
  uint64_t v4 = LDO_ComputeLeafNodesByRange(a1, 0, 0, (unsigned int *)&v16);
  uint64_t v9 = (uint64_t)v17;
  if (v4)
  {
LABEL_13:
    if (!v9) {
      return v4;
    }
    goto LABEL_14;
  }
  unint64_t v10 = v18;
  if ((unint64_t)v17 >= v18)
  {
LABEL_10:
    uint64_t v4 = 0;
    if (!v9) {
      return v4;
    }
    goto LABEL_14;
  }
  unsigned int v11 = v17;
  while (1)
  {
    size_t v12 = *v11;
    uint64_t v13 = LDOTreeNode_ComputeAbsoluteFrom(*v11, (_DWORD *)&v15 + 1);
    if (v13 || (uint64_t v13 = LDOTreeNode_ComputeAbsoluteTo(v12, &v15), v13))
    {
      uint64_t v4 = v13;
      goto LABEL_13;
    }
    if (HIDWORD(v15) <= *a2 && v15 >= *a3) {
      break;
    }
    if ((unint64_t)++v11 >= v10) {
      goto LABEL_10;
    }
  }
  uint64_t v4 = 0;
  *a4 = v12;
  if (v9) {
LABEL_14:
  }
    OOCAllocator_Free(*(void *)(a1 + 8), v9);
  return v4;
}

uint64_t LDO_FreeLDOTreeNodeVector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    OOCAllocator_Free(*(void *)(a1 + 8), v3);
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a2 + 16) = 0;
  return 0;
}

uint64_t LDO_ComputeNodesCoveredByLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v13 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v5 = (void *)(a3 + 8);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = a2 + 72;
  uint64_t v6 = *(const void **)(a2 + 72);
  unint64_t v8 = *(void *)(v7 + 8) - (void)v6;
  if (!(v8 >> 3))
  {
    unint64_t v10 = 0;
    goto LABEL_8;
  }
  if ((v8 >> 3) <= 8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = v8 >> 3;
  }
  unint64_t v10 = (void *)OOCAllocator_Realloc(*(void *)(a1 + 8), 0, 8 * v9, &v13);
  *uint64_t v5 = v10;
  uint64_t v11 = v13;
  if (!v13)
  {
    *(_DWORD *)a3 = v9;
    *(void *)(a3 + 16) = v10;
    uint64_t v6 = *(const void **)(a2 + 72);
    unint64_t v8 = *(void *)(a2 + 80) - (void)v6;
LABEL_8:
    cstdlib_memcpy(v10, v6, v8 & 0x7FFFFFFF8);
    *(void *)(a3 + 16) += (*(void *)(a2 + 80) - *(void *)(a2 + 72)) & 0x7FFFFFFF8;
    return v13;
  }
  return v11;
}

uint64_t LDO_ComputeOverlappingLabels(uint64_t a1, unsigned int *a2, unsigned int *a3, int a4, unsigned int *a5)
{
  uint64_t v9 = 0;
  uint64_t result = LDO_ValidateIndices(a1, a2, a3, (unsigned int *)&v9 + 1, (unsigned int *)&v9, 0);
  if (!result) {
    return LDOLabelSet_ComputeOverlappingLabels(*(uint64_t **)(a1 + 32), HIDWORD(v9), v9, a4, a5);
  }
  return result;
}

uint64_t LDO_ComputeText(uint64_t a1, void *a2)
{
  return LDOTreeNode_ComputeText(*(void *)(a1 + 16), a2);
}

uint64_t LDO_CountLeafNodesOnRange(uint64_t a1, _DWORD *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v8 = LDO_ComputeLeafNodesByRange(a1, a2, a3, (unsigned int *)&v12);
  if (v8)
  {
    uint64_t v9 = v13;
    goto LABEL_3;
  }
  uint64_t v9 = v13;
  unint64_t v10 = (unint64_t)(v14 - (void)v13) >> 3;
  *a4 = v10;
  if (!a5 || !v10)
  {
LABEL_3:
    if (!v9) {
      return v8;
    }
    goto LABEL_8;
  }
  LDOTreeNode_ComputeAbsoluteFrom(*v9, a5);
LABEL_8:
  OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v9);
  return v8;
}

uint64_t LDO_FreeLDOLabelVector(uint64_t a1, uint64_t a2)
{
  return LDOLabelSet_FreeLDOLabelVector(*(void *)(a1 + 32), a2);
}

__n128 LDO_GetLabels@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *(__n128 **)(a1 + 32);
  __n128 result = v2[1];
  *a2 = result;
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  return result;
}

uint64_t LDO_GetNumberLabels(uint64_t a1)
{
  return LDOLabelSet_GetNumberLabels(*(void *)(a1 + 32));
}

uint64_t LDO_InsertNewNodeWithText(uint64_t a1, size_t a2, char *a3, char *a4, unsigned int a5, char *a6, uint64_t *a7)
{
  *(void *)uint64_t v16 = 0;
  uint64_t v10 = PNEW_LDOTreeNode_Con(*(void *)(a1 + 8), *(void *)(a1 + 8), a2, a3, a4, a5, a5, (uint64_t *)v16);
  if (v10) {
    return v10;
  }
  uint64_t v12 = *(void *)v16;
  uint64_t v13 = LDO_SetText(a1, *(size_t *)v16, a6);
  uint64_t v11 = v13;
  if (!a7 || v13)
  {
    if (v12 && v13)
    {
      uint64_t v14 = LDOObject_BorrowAllocator(v12);
      OOC_PlacementDeleteObject(v14, v12);
    }
  }
  else
  {
    *a7 = v12;
  }
  return v11;
}

uint64_t LDO_SetText(uint64_t a1, size_t a2, char *__s)
{
  uint64_t v7 = 0;
  uint64_t result = LDOTreeNode_ComputeUpdateInfo(a2, __s, (_DWORD *)&v7 + 1, &v7);
  if (!result)
  {
    uint64_t result = LDOTreeNode_SetText(a2, __s);
    if (!result) {
      return LDOLabelSet_UpdateSpan(*(void *)(a1 + 32), HIDWORD(v7), v7);
    }
  }
  return result;
}

uint64_t LDO_MergeLabels(uint64_t a1, uint64_t a2, char *a3, char *a4, void *a5)
{
  return LDOLabelSet_MergeLabels(*(void *)(a1 + 32), a2, a3, a4, a5);
}

uint64_t LDO_RemoveLabel(uint64_t a1, uint64_t a2)
{
  return LDOLabelSet_RemoveLabel(*(void *)(a1 + 32), a2);
}

uint64_t LDO_ReplaceNodes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  if (((*(void *)(a2 + 16) - *(void *)(a2 + 8)) & 0x7FFFFFFF8) != 0
    && LDOTreeNode_HaveSameParent(a2) == 1)
  {
    uint64_t v6 = **(void **)(a2 + 8);
    uint64_t v7 = *(void *)(v6 + 64);
    if (!v7) {
      uint64_t v7 = *(void *)(a1 + 16);
    }
    int v8 = *(_DWORD *)(v6 + 104);
    uint64_t updated = LDOTreeNode_ComputeFromToIndices(a2, 1, (unsigned int *)&v26 + 1, (unsigned int *)&v26);
    if (!updated)
    {
      uint64_t updated = LDOTreeNode_ComputeVectorTextLength(a2, (_DWORD *)&v25 + 1);
      if (!updated)
      {
        uint64_t updated = LDOTreeNode_ComputeVectorTextLength(a3, &v25);
        if (!updated)
        {
          int v10 = v25;
          int v11 = HIDWORD(v25);
          int v13 = v26;
          int v12 = HIDWORD(v26);
          uint64_t updated = LDOLabelSet_ComputeContainedLabels(*(uint64_t **)(a1 + 32), HIDWORD(v26), v26, 0, (unsigned int *)&v22);
          if (!updated)
          {
            uint64_t updated = __LDO_UpdateOrthography(a2, a3, v7, v8);
            if (!updated)
            {
              uint64_t updated = LDOLabelSet_UpdateRegularLabels(*(void *)(a1 + 32), a2, a3);
              if (!updated)
              {
                uint64_t updated = LDOLabelSet_UpdateSpan(*(void *)(a1 + 32), HIDWORD(v26), v10 - v11);
                if (!updated)
                {
                  uint64_t v15 = (uint64_t *)v23;
                  unint64_t v14 = v24;
                  if (v23 < v24)
                  {
                    int v16 = v13 + v10 - v11;
                    do
                    {
                      unsigned int v17 = (_DWORD *)*v15;
                      if (*(_DWORD *)(*v15 + 112) == 1)
                      {
                        int v18 = v17[22];
                        int v19 = v17[23];
                        v17[22] = v12;
                        if (v18 == v19) {
                          v17[23] = v12;
                        }
                        else {
                          v17[23] = v16;
                        }
                      }
                      else
                      {
                        uint64_t ErrorArg = LDOLabel_RemoveNodes(*v15, a2);
                        if (ErrorArg) {
                          goto LABEL_24;
                        }
                        uint64_t ErrorArg = LDOLabel_AddNodes((uint64_t)v17, a3);
                        if (ErrorArg) {
                          goto LABEL_24;
                        }
                        unint64_t v14 = v24;
                      }
                      v17[26] = 1;
                      ++v15;
                    }
                    while ((unint64_t)v15 < v14);
                  }
                  __LDO_DestroyLDOTreeNodeVector(a2);
                  uint64_t updated = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t ErrorArg = err_GenerateErrorArg();
LABEL_24:
    uint64_t updated = ErrorArg;
  }
  LODWORD(v22) = 0;
  if (v23) {
    OOCAllocator_Free(*(void *)(a1 + 8), v23);
  }
  return updated;
}

uint64_t __LDO_UpdateOrthography(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v22 = 0;
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v7 >= *(void *)(a1 + 16))
  {
LABEL_5:
    for (i = *(size_t **)(a2 + 8); ; ++i)
    {
      if ((unint64_t)i >= *(void *)(a2 + 16)) {
        return 0;
      }
      uint64_t v12 = *i;
      uint64_t v13 = LDOTreeNode_ComputeText(*i, &v22);
      uint64_t v14 = v22;
      if (v13) {
        break;
      }
      int v15 = LHString_Length(v22);
      uint64_t v16 = *(void *)(v12 + 96);
      if (v16)
      {
        uint64_t v17 = LHString_Erase(v16);
        if (v17)
        {
          uint64_t v13 = v17;
          uint64_t v14 = v22;
          break;
        }
      }
      *(_DWORD *)(v12 + 104) = a4;
      *(_DWORD *)(v12 + 108) = a4;
      uint64_t v13 = LDOTreeNode_AddChild(a3, v12);
      uint64_t v14 = v22;
      if (v13) {
        break;
      }
      int v18 = (char *)LHString_BorrowCPtr(v22);
      uint64_t v13 = LDOTreeNode_SetText(v12, v18);
      uint64_t v14 = v22;
      if (v13) {
        break;
      }
      if (v22)
      {
        uint64_t v19 = LDOString_BorrowAllocator(v22);
        OOC_PlacementDeleteObject(v19, v22);
        uint64_t v22 = 0;
      }
      a4 += v15;
    }
    if (v14)
    {
      uint64_t v20 = LDOString_BorrowAllocator(v14);
      OOC_PlacementDeleteObject(v20, v22);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v9 = (_DWORD *)*v7;
      uint64_t v10 = LDOTreeNode_SetText(*v7, "");
      if (v10) {
        return v10;
      }
      uint64_t v10 = LDOTreeNode_RemoveChild(a3, v9);
      if (v10) {
        return v10;
      }
      if ((unint64_t)++v7 >= *(void *)(a1 + 16)) {
        goto LABEL_5;
      }
    }
  }
  return v13;
}

uint64_t __LDO_DestroyLDOTreeNodeVector(uint64_t result)
{
  v1 = *(uint64_t **)(result + 8);
  if ((unint64_t)v1 < *(void *)(result + 16))
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = *v1++;
      uint64_t v4 = LDOObject_BorrowAllocator(v3);
      uint64_t result = OOC_PlacementDeleteObject(v4, v3);
    }
    while ((unint64_t)v1 < *(void *)(v2 + 16));
  }
  return result;
}

size_t LDO_ReplaceNodesUsingMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 72);
  unint64_t v3 = *(void *)(a2 + 80) - (void)v2;
  if ((v3 & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  uint64_t v5 = (v3 >> 3);
  while (1)
  {
    uint64_t v6 = *v2;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    long long v15 = *(_OWORD *)(v6 + 72);
    uint64_t v16 = *(void *)(v6 + 88);
    long long v13 = *(_OWORD *)(v6 + 96);
    uint64_t v14 = *(void *)(v6 + 112);
    size_t result = LDOTreeNode_ComputeVectorTextLength((uint64_t)&v15, (_DWORD *)&v11 + 1);
    if (result) {
      break;
    }
    size_t result = LDOTreeNode_ComputeVectorTextLength((uint64_t)&v13, &v11);
    if (result) {
      break;
    }
    int v8 = v11;
    int v9 = HIDWORD(v11);
    uint64_t ParentNode = LDOTreeNodeMappingItem_GetParentNode(v6);
    if (!ParentNode) {
      uint64_t ParentNode = *(void *)(a1 + 16);
    }
    size_t result = LDOTreeNodeMappingItem_GetPositions((void *)v6, &v12, (_DWORD *)&v12 + 1);
    if (result) {
      break;
    }
    size_t result = __LDO_UpdateOrthography((uint64_t)&v15, (uint64_t)&v13, ParentNode, SHIDWORD(v12));
    if (result) {
      break;
    }
    size_t result = LDOLabelSet_UpdateRegularLabels(*(void *)(a1 + 32), (uint64_t)&v15, (uint64_t)&v13);
    if (result) {
      break;
    }
    size_t result = LDOLabelSet_UpdateSpan(*(void *)(a1 + 32), v12, v8 - v9);
    if (result) {
      break;
    }
    __LDO_DestroyLDOTreeNodeVector((uint64_t)&v15);
    ++v2;
    if (!--v5) {
      return 0;
    }
  }
  return result;
}

uint64_t LDO_ReplaceNodesUsingMappingString(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v8 = 0;
  int v9 = 0;
  unsigned int v25 = 0;
  uint64_t __src = 0;
  uint64_t v24 = 0;
  int v22 = 0;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(uint64_t **)(v10 + 24);
  if ((unint64_t)v11 < *(void *)(v10 + 32))
  {
    int v9 = 0;
    unint64_t v8 = 0;
    unsigned int v12 = 0;
    do
    {
      uint64_t v13 = *v11;
      uint64_t __src = v13;
      if (*(_DWORD *)(v13 + 112) != 1)
      {
        int v22 = 0;
        unsigned int v25 = LDOLabel_ContainsAllNodes(v13, a2, &v22);
        if (v25) {
          goto LABEL_27;
        }
        if (v22 == 1)
        {
          unint64_t v14 = (unint64_t)&v9[-v8];
          unsigned int v15 = ((unint64_t)&v9[-v8] >> 3) + 1;
          if (v15 > v12)
          {
            unsigned int v16 = 2 * v12;
            if (2 * v12 >= v12 + 1000000) {
              unsigned int v16 = v12 + 1000000;
            }
            if (v16 > v15) {
              unsigned int v15 = v16;
            }
            if (v15 <= 8) {
              unsigned int v12 = 8;
            }
            else {
              unsigned int v12 = v15;
            }
            uint64_t v17 = OOCAllocator_Realloc(*(void *)(a1 + 8), v8, 8 * v12, &v25);
            unint64_t v8 = v17;
            if (v25) {
              goto LABEL_27;
            }
            int v9 = (char *)(v17 + (v14 & 0x7FFFFFFF8));
          }
          cstdlib_memcpy(v9, &__src, 8uLL);
          v9 += 8;
        }
      }
      ++v11;
    }
    while ((unint64_t)v11 < *(void *)(*(void *)(a1 + 32) + 32));
  }
  unsigned int v25 = PNEW_LDOTreeNodeMapping_ConEx(*(void *)(a1 + 8), *(void *)(a1 + 8), a2, a3, a4, &v24);
  if (!v25)
  {
    unsigned int v25 = LDO_ReplaceNodesUsingMapping(a1, v24);
    if (!v25 && v8 < (unint64_t)v9)
    {
      unint64_t v18 = v8 + 8;
      do
      {
        uint64_t __src = *(void *)(v18 - 8);
        unsigned int v25 = LDOLabel_AddNodes(__src, a3);
        if (v25) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v18 >= (unint64_t)v9;
        }
        v18 += 8;
      }
      while (!v19);
    }
  }
LABEL_27:
  if (v8) {
    OOCAllocator_Free(*(void *)(a1 + 8), v8);
  }
  if (v24)
  {
    uint64_t v20 = LDOObject_BorrowAllocator(v24);
    OOC_PlacementDeleteObject(v20, v24);
  }
  return v25;
}

uint64_t LDO_ToString(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = 0;
  uint64_t appended = PNEW_LDOString_Con(*(void *)(a1 + 8), *(void *)(a1 + 8), a2);
  if (appended) {
    return appended;
  }
  uint64_t v5 = *a2;
  uint64_t appended = LHString_Append(v5, "LDO\n");
  if (!appended)
  {
    uint64_t appended = LDOString_AppendPrefixStringSuffix(v5, "  Initial text: ", *(char **)(a1 + 24), "\n");
    if (!appended)
    {
      uint64_t v6 = LDOTreeNode_ComputeText(*(void *)(a1 + 16), &v17);
      uint64_t v7 = v17;
      if (v6) {
        goto LABEL_6;
      }
      uint64_t v6 = LDOString_AppendPrefixStringSuffix(v5, "  Current text: ", v17, "\n");
      uint64_t v7 = v17;
      if (v6) {
        goto LABEL_6;
      }
      if (v17)
      {
        uint64_t v12 = LDOString_BorrowAllocator((uint64_t)v17);
        OOC_PlacementDeleteObject(v12, (uint64_t)v17);
        uint64_t v17 = 0;
      }
      uint64_t v13 = *(void *)(a1 + 16);
      if (v13)
      {
        uint64_t appended = (*(uint64_t (**)(uint64_t, char **, char *))(*(void *)v13 + 24))(v13, &v17, v7);
        uint64_t v7 = v17;
        if (appended) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v6 = LDOString_AppendPrefixStringSuffix(v5, "LDO Tree:\n", v7, "\n");
      uint64_t v7 = v17;
      if (v6)
      {
LABEL_6:
        uint64_t appended = v6;
        goto LABEL_7;
      }
      if (v17)
      {
        uint64_t v14 = LDOString_BorrowAllocator((uint64_t)v17);
        OOC_PlacementDeleteObject(v14, (uint64_t)v17);
        uint64_t v17 = 0;
      }
      unsigned int v15 = *(uint64_t **)(a1 + 32);
      if (!v15)
      {
        uint64_t v7 = 0;
LABEL_28:
        uint64_t appended = LDOString_AppendPrefixStringSuffix(v5, "LDO Labels:\n", v7, "\n");
        uint64_t v7 = v17;
        if (!appended && v17)
        {
          uint64_t v16 = LDOString_BorrowAllocator((uint64_t)v17);
          OOC_PlacementDeleteObject(v16, (uint64_t)v17);
          return 0;
        }
        goto LABEL_7;
      }
      uint64_t appended = LDOLabelSet_ToString(v15, (uint64_t *)&v17);
      uint64_t v7 = v17;
      if (!appended) {
        goto LABEL_28;
      }
LABEL_7:
      if (v7)
      {
        uint64_t v8 = LDOString_BorrowAllocator((uint64_t)v7);
        OOC_PlacementDeleteObject(v8, (uint64_t)v17);
        uint64_t v17 = 0;
      }
    }
  }
  if (appended) {
    BOOL v9 = v5 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = LDOString_BorrowAllocator(v5);
    OOC_PlacementDeleteObject(v10, v5);
  }
  return appended;
}

uint64_t PNEW_LDO_ConFromText(uint64_t a1, uint64_t a2, char *a3, char *a4, char *a5, void *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = (void *)OOCAllocator_Malloc(a1, 40, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = LDO_ConFromText(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

uint64_t PNEW_LDO_ConFromNode(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = (void *)OOCAllocator_Malloc(a1, 40, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = LDO_ConFromNode(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetLDOClass()
{
  return &__LDO;
}

uint64_t LDOTreeNodeMapping_Con(uint64_t a1, uint64_t a2)
{
  uint64_t result = LDOObject_Con(a1, a2);
  if (!result)
  {
    *(void *)a1 = &__LDOTreeNodeMapping;
    *(_DWORD *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  return result;
}

size_t LDOTreeNodeMapping_ConEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  unint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  size_t appended = LDOObject_Con(a1, a2);
  if (appended) {
    goto LABEL_35;
  }
  *(void *)a1 = &__LDOTreeNodeMapping;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  LODWORD(v28) = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  if (((*(void *)(a3 + 16) - *(void *)(a3 + 8)) & 0x7FFFFFFF8) == 0) {
    goto LABEL_33;
  }
  if (!a5)
  {
    uint64_t v39 = 0;
    uint64_t v18 = LDOObject_BorrowAllocator(a1);
    size_t appended = PNEW_LDOTreeNodeMappingItem_ConEx(v18, v18, a3, a4, &v39);
    if (appended || (size_t appended = LDOTreeNodeMapping_AppendMappingItem(a1, v39), appended))
    {
      if (v39) {
        OOC_PlacementDeleteObject(v18, v39);
      }
    }
LABEL_34:
    if (!appended) {
      goto LABEL_43;
    }
LABEL_35:
    BOOL v19 = *(uint64_t **)(a1 + 72);
    if (!v19) {
      goto LABEL_43;
    }
    if ((unint64_t)v19 >= *(void *)(a1 + 80))
    {
      *(_DWORD *)(a1 + 64) = 0;
    }
    else
    {
      do
      {
        uint64_t v20 = LDOObject_BorrowAllocator(a1);
        uint64_t v21 = *v19++;
        OOC_PlacementDeleteObject(v20, v21);
      }
      while ((unint64_t)v19 < *(void *)(a1 + 80));
      uint64_t v22 = *(void *)(a1 + 72);
      *(_DWORD *)(a1 + 64) = 0;
      if (!v22) {
        goto LABEL_42;
      }
    }
    uint64_t v23 = LDOObject_BorrowAllocator(a1);
    OOCAllocator_Free(v23, *(void *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
LABEL_42:
    *(void *)(a1 + 80) = 0;
    goto LABEL_43;
  }
  if (!cstdlib_strlen(a5))
  {
LABEL_33:
    size_t appended = err_GenerateErrorArg();
    goto LABEL_34;
  }
  size_t appended = PNEW_LDOString_ConFromCPtr(a2, a2, a5, &v31);
  if (appended) {
    goto LABEL_35;
  }
  size_t appended = LDOString_SplitEx(v31, ";", (unsigned int *)&v28);
  if (appended) {
    goto LABEL_35;
  }
  __LDOTreeNodeMapping_AddRemoveMappedAttribute(a3, 1);
  size_t appended = v11;
  if (v11) {
    goto LABEL_35;
  }
  __LDOTreeNodeMapping_AddRemoveMappedAttribute(a4, 1);
  size_t appended = v12;
  if (v12) {
    goto LABEL_35;
  }
  for (i = v29; (unint64_t)i < v30; ++i)
  {
    uint64_t v14 = *i;
    uint64_t v39 = 0;
    uint64_t v36 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v15 = LDOObject_BorrowAllocator(a1);
    LODWORD(v36) = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    LODWORD(v33) = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    LODWORD(v39) = 0;
    __int16 v40 = 0;
    uint64_t v41 = 0;
    size_t appended = LDOString_SplitEx(v14, ":", (unsigned int *)&v39);
    if (!appended)
    {
      if (((v41 - (void)v40) & 0x7FFFFFFF8) == 0x10)
      {
        size_t appended = __LDOTreeNodeMapping_ParseMappingItemPartString(a1, a3, *v40, (unsigned int *)&v36);
        if (!appended)
        {
          size_t appended = __LDOTreeNodeMapping_ParseMappingItemPartString(a1, a4, v40[1], (unsigned int *)&v33);
          if (!appended)
          {
            uint64_t v16 = PNEW_LDOTreeNodeMappingItem_ConEx(v15, v15, (uint64_t)&v36, (uint64_t)&v33, &v32);
            uint64_t v17 = v32;
            if (v16)
            {
              size_t appended = v16;
            }
            else
            {
              size_t appended = LDOTreeNodeMapping_AppendMappingItem(a1, v32);
              uint64_t v17 = v32;
            }
            if (appended && v17)
            {
              OOC_PlacementDeleteObject(v15, v17);
              uint64_t v32 = 0;
            }
          }
        }
      }
      else
      {
        size_t appended = err_GenerateErrorArg();
      }
    }
    LDOString_FreeAndDestroyLDOStringVector(v15, (uint64_t)&v39);
    LODWORD(v33) = 0;
    if (v34)
    {
      OOCAllocator_Free(v15, v34);
      uint64_t v34 = 0;
    }
    uint64_t v35 = 0;
    LODWORD(v36) = 0;
    if (v37) {
      OOCAllocator_Free(v15, v37);
    }
    if (appended) {
      goto LABEL_35;
    }
  }
  size_t appended = __LDOTreeNodeMapping_AppendMappingItemDeletedOldNodes(a1, a3);
  if (appended) {
    goto LABEL_35;
  }
  size_t appended = __LDOTreeNodeMapping_AppendMappingItemUnmappedNewNodes(a1, a4);
  if (appended) {
    goto LABEL_35;
  }
  unsigned int v25 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v25 < *(void *)(a3 + 16))
  {
    while (1)
    {
      uint64_t v26 = LDOObject_RemoveAttribute(*v25, "__MAPPED");
      if (v26) {
        break;
      }
      if ((unint64_t)++v25 >= *(void *)(a3 + 16)) {
        goto LABEL_51;
      }
    }
    size_t appended = v26;
    goto LABEL_35;
  }
LABEL_51:
  uint64_t v27 = *(uint64_t **)(a4 + 8);
  if ((unint64_t)v27 < *(void *)(a4 + 16))
  {
    while (1)
    {
      size_t appended = LDOObject_RemoveAttribute(*v27, "__MAPPED");
      if (appended) {
        goto LABEL_35;
      }
      if ((unint64_t)++v27 >= *(void *)(a4 + 16)) {
        goto LABEL_43;
      }
    }
  }
  size_t appended = 0;
LABEL_43:
  LDOString_FreeAndDestroyLDOStringVector(a2, (uint64_t)&v28);
  if (v31) {
    OOC_PlacementDeleteObject(a2, v31);
  }
  return appended;
}

void __LDOTreeNodeMapping_AddRemoveMappedAttribute(uint64_t a1, int a2)
{
  for (i = *(uint64_t **)(a1 + 8); (unint64_t)i < *(void *)(a1 + 16); ++i)
  {
    uint64_t v5 = *i;
    if (a2 == 1)
    {
      LDOObject_SetBoolAttribute(v5, "__MAPPED", 0);
      if (v6) {
        return;
      }
    }
    else if (LDOObject_RemoveAttribute(v5, "__MAPPED"))
    {
      return;
    }
  }
}

uint64_t __LDOTreeNodeMapping_AppendMappingItemDeletedOldNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v4 = LDOObject_BorrowAllocator(a1);
  uint64_t v5 = 0;
  int v6 = *(uint64_t ***)(a2 + 8);
  if ((unint64_t)v6 < *(void *)(a2 + 16))
  {
    uint64_t v7 = v4;
    while (1)
    {
      uint64_t v8 = *v6;
      uint64_t BoolAttribute = LDOObject_GetBoolAttribute(*v6, "__MAPPED", (_DWORD *)&v12 + 1, &v12);
      if (BoolAttribute) {
        break;
      }
      if (v12 != 1)
      {
        uint64_t BoolAttribute = PNEW_LDOTreeNodeMappingItem_Con(v7, v7, &v11);
        if (BoolAttribute) {
          break;
        }
        uint64_t BoolAttribute = LDOTreeNodeMappingItem_AppendOldNode(v11, (uint64_t)v8);
        if (BoolAttribute) {
          break;
        }
        uint64_t BoolAttribute = LDOTreeNodeMapping_AppendMappingItem(a1, v11);
        if (BoolAttribute) {
          break;
        }
        uint64_t v11 = 0;
      }
      if ((unint64_t)++v6 >= *(void *)(a2 + 16)) {
        return 0;
      }
    }
    uint64_t v5 = BoolAttribute;
    if (v11) {
      OOC_PlacementDeleteObject(v7, v11);
    }
  }
  return v5;
}

uint64_t __LDOTreeNodeMapping_AppendMappingItemUnmappedNewNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v4 = LDOObject_BorrowAllocator(a1);
  uint64_t v5 = 0;
  int v6 = *(uint64_t ***)(a2 + 8);
  if ((unint64_t)v6 < *(void *)(a2 + 16))
  {
    uint64_t v7 = v4;
    for (unsigned int i = -1; ; ++i)
    {
      BOOL v9 = *v6;
      uint64_t BoolAttribute = LDOObject_GetBoolAttribute(*v6, "__MAPPED", (_DWORD *)&v14 + 1, &v14);
      if (BoolAttribute) {
        break;
      }
      if (v14 != 1)
      {
        if (i == -1) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = *(void *)(*(void *)(a2 + 8) + 8 * i);
        }
        uint64_t BoolAttribute = PNEW_LDOTreeNodeMappingItem_ConUnmappedNewNode(v7, v7, (uint64_t)v9, v11, &v13);
        if (BoolAttribute) {
          break;
        }
        uint64_t BoolAttribute = LDOTreeNodeMapping_AppendMappingItem(a1, v13);
        if (BoolAttribute) {
          break;
        }
        uint64_t v13 = 0;
      }
      if ((unint64_t)++v6 >= *(void *)(a2 + 16)) {
        return 0;
      }
    }
    uint64_t v5 = BoolAttribute;
    if (v13) {
      OOC_PlacementDeleteObject(v7, v13);
    }
  }
  return v5;
}

uint64_t LDOTreeNodeMapping_Des(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 72);
  if (v2)
  {
    if ((unint64_t)v2 >= *(void *)(a1 + 80))
    {
      *(_DWORD *)(a1 + 64) = 0;
    }
    else
    {
      do
      {
        uint64_t v3 = LDOObject_BorrowAllocator(a1);
        uint64_t v4 = *v2++;
        OOC_PlacementDeleteObject(v3, v4);
      }
      while ((unint64_t)v2 < *(void *)(a1 + 80));
      uint64_t v5 = *(void *)(a1 + 72);
      *(_DWORD *)(a1 + 64) = 0;
      if (!v5) {
        goto LABEL_8;
      }
    }
    uint64_t v6 = LDOObject_BorrowAllocator(a1);
    OOCAllocator_Free(v6, *(void *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
LABEL_8:
    *(void *)(a1 + 80) = 0;
  }

  return LDOObject_Des(a1);
}

uint64_t LDOTreeNodeMapping_AppendMappingItem(uint64_t a1, uint64_t a2)
{
  uint64_t __src = a2;
  unsigned int v14 = 0;
  uint64_t v3 = *(char **)(a1 + 80);
  unint64_t v4 = (unint64_t)&v3[-*(void *)(a1 + 72)];
  unsigned int v5 = (v4 >> 3) + 1;
  unsigned int v6 = *(_DWORD *)(a1 + 64);
  if (v5 <= v6) {
    goto LABEL_11;
  }
  unsigned int v7 = 2 * v6;
  unsigned int v8 = v6 + 1000000;
  if (v7 < v8) {
    unsigned int v8 = v7;
  }
  if (v8 > v5) {
    unsigned int v5 = v8;
  }
  if (v5 <= 8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = v5;
  }
  uint64_t v10 = LDOObject_BorrowAllocator(a1);
  uint64_t v11 = OOCAllocator_Realloc(v10, *(void *)(a1 + 72), 8 * v9, &v14);
  *(void *)(a1 + 72) = v11;
  uint64_t v12 = v14;
  if (!v14)
  {
    *(_DWORD *)(a1 + 64) = v9;
    uint64_t v3 = (char *)(v11 + (v4 & 0x7FFFFFFF8));
    *(void *)(a1 + 80) = v3;
LABEL_11:
    cstdlib_memcpy(v3, &__src, 8uLL);
    *(void *)(a1 + 80) += 8;
    return v14;
  }
  return v12;
}

uint64_t PNEW_LDOTreeNodeMapping_Con(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = OOCAllocator_Malloc(a1, 88, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = LDOObject_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *(void *)uint64_t v6 = &__LDOTreeNodeMapping;
      *(_DWORD *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      *(void *)(v6 + 80) = 0;
      *a3 = v6;
    }
  }
  return result;
}

size_t PNEW_LDOTreeNodeMapping_ConEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 88, &v14);
  size_t result = v14;
  if (!v14)
  {
    size_t result = LDOTreeNodeMapping_ConEx(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetLDOTreeNodeMappingClass()
{
  return &__LDOTreeNodeMapping;
}

uint64_t __LDOTreeNodeMapping_ParseMappingItemPartString(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t __src = 0;
  uint64_t v7 = LDOObject_BorrowAllocator(a1);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned int ErrorArg = LDOString_SplitEx(a3, ",", (unsigned int *)&v26);
  if (!ErrorArg)
  {
    uint64_t v10 = v27;
    if ((unint64_t)v27 < v28)
    {
      unint64_t v11 = (unint64_t)(v8 - v9) >> 3;
      while (1)
      {
        unsigned int v12 = LDOString_ConvertToU32(*v10);
        if (v12 >= v11) {
          break;
        }
        uint64_t v13 = *(void *)(*(void *)(a2 + 8) + 8 * v12);
        uint64_t __src = v13;
        if (!v13) {
          break;
        }
        LDOObject_SetBoolAttribute(v13, "__MAPPED", 1);
        unsigned int ErrorArg = v14;
        if (v14) {
          goto LABEL_20;
        }
        uint64_t v16 = *((void *)a4 + 1);
        uint64_t v15 = (char *)*((void *)a4 + 2);
        unint64_t v17 = (unint64_t)&v15[-v16];
        unsigned int v18 = ((unint64_t)&v15[-v16] >> 3) + 1;
        unsigned int v19 = *a4;
        if (v18 > *a4)
        {
          unsigned int v20 = 2 * v19;
          unsigned int v21 = v19 + 1000000;
          if (v20 < v21) {
            unsigned int v21 = v20;
          }
          if (v21 > v18) {
            unsigned int v18 = v21;
          }
          if (v18 <= 8) {
            unsigned int v22 = 8;
          }
          else {
            unsigned int v22 = v18;
          }
          uint64_t v23 = OOCAllocator_Realloc(v7, v16, 8 * v22, &ErrorArg);
          *((void *)a4 + 1) = v23;
          if (ErrorArg) {
            goto LABEL_20;
          }
          *a4 = v22;
          uint64_t v15 = (char *)(v23 + (v17 & 0x7FFFFFFF8));
          *((void *)a4 + 2) = v15;
        }
        cstdlib_memcpy(v15, &__src, 8uLL);
        *((void *)a4 + 2) += 8;
        if ((unint64_t)++v10 >= v28) {
          goto LABEL_20;
        }
      }
      unsigned int ErrorArg = err_GenerateErrorArg();
    }
  }
LABEL_20:
  LDOString_FreeAndDestroyLDOStringVector(v7, (uint64_t)&v26);
  return ErrorArg;
}

double LDOLabel_Con(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  if (!LDOObject_Con(a1, a2))
  {
    *(void *)a1 = &__LDOLabel;
    *(_DWORD *)(a1 + 112) = 0;
    if (!LDOObject_SetCategory(a1, a3) && !LDOObject_SetType(a1, a4))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      if (!LDOLabel_AddNodes(a1, a5)
        && !LDOTreeNode_ComputeFromToIndices(a5, 1, (unsigned int *)(a1 + 96), (unsigned int *)(a1 + 100)))
      {
        *(void *)&double result = 1;
        *(void *)(a1 + 104) = 1;
      }
    }
  }
  return result;
}

uint64_t LDOLabel_AddNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(size_t **)(a2 + 8);
  if ((unint64_t)v2 >= *(void *)(a2 + 16)) {
    return 0;
  }
  while (1)
  {
    uint64_t result = LDOLabel_AddNode(a1, *v2);
    if (result) {
      break;
    }
    if ((unint64_t)++v2 >= *(void *)(a2 + 16)) {
      return 0;
    }
  }
  return result;
}

double LDOLabel_ConSpecial(uint64_t a1, uint64_t a2, char *a3, char *a4, int a5, int a6)
{
  if (!LDOObject_Con(a1, a2))
  {
    *(void *)a1 = &__LDOLabel;
    *(_DWORD *)(a1 + 112) = 1;
    if (!LDOObject_SetCategory(a1, a3) && !LDOObject_SetType(a1, a4))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = a5;
      *(_DWORD *)(a1 + 92) = a6;
      *(_DWORD *)(a1 + 96) = a5;
      *(_DWORD *)(a1 + 100) = a6;
      *(void *)&double result = 1;
      *(void *)(a1 + 104) = 1;
    }
  }
  return result;
}

uint64_t LDOLabel_Des(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = 0;
  if (*(void *)(a1 + 72))
  {
    uint64_t v2 = LDOObject_BorrowAllocator(a1);
    OOCAllocator_Free(v2, *(void *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 80) = 0;

  return LDOObject_Des(a1);
}

uint64_t LDOLabel_AddNode(uint64_t a1, size_t a2)
{
  unsigned int v23 = 0;
  if (*(_DWORD *)(a1 + 112) != 1)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    unint64_t v6 = 0;
    uint64_t v7 = v5 - *(void *)(a1 + 72);
    if (v7)
    {
      unint64_t v8 = v7 >> 3;
      while (1)
      {
        unint64_t v9 = v8 >> 1;
        int v10 = LDOTreeNode_CompareToWithID(a2, *(void *)(*(void *)(a1 + 72) + 8 * v6 + 8 * (v8 >> 1)));
        if (v10 < 1)
        {
          v8 >>= 1;
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v19 = 0;
            goto LABEL_32;
          }
        }
        else
        {
          v6 += v9 + 1;
          v8 -= v9 + 1;
        }
        if (!v8)
        {
          uint64_t v5 = *(void *)(a1 + 72);
          uint64_t v11 = *(void *)(a1 + 80);
          goto LABEL_13;
        }
      }
    }
    uint64_t v11 = v5;
LABEL_13:
    unint64_t v12 = v11 - v5;
    unint64_t v13 = (unint64_t)(v11 - v5) >> 3;
    if (*(_DWORD *)(a1 + 64) == v13 && v13 != -1)
    {
      unsigned int v15 = 2 * v13;
      if (2 * (int)v13 >= (v13 + 1000000)) {
        unsigned int v15 = v13 + 1000000;
      }
      if (v15 <= (int)v13 + 1) {
        unsigned int v16 = v13 + 1;
      }
      else {
        unsigned int v16 = v15;
      }
      if (v16 <= 8) {
        unsigned int v17 = 8;
      }
      else {
        unsigned int v17 = v16;
      }
      uint64_t v18 = LDOObject_BorrowAllocator(a1);
      uint64_t v5 = OOCAllocator_Realloc(v18, *(void *)(a1 + 72), 8 * v17, &v23);
      *(void *)(a1 + 72) = v5;
      uint64_t v19 = v23;
      if (v23) {
        return v19;
      }
      *(_DWORD *)(a1 + 64) = v17;
      uint64_t v11 = v5 + (v12 & 0x7FFFFFFF8);
    }
    *(void *)(a1 + 80) = v11 + 8;
    unint64_t v20 = (v12 >> 3);
    BOOL v21 = v20 > v6;
    unint64_t v22 = v20 - v6;
    if (v21)
    {
      cstdlib_memmove((void *)(v5 + 8 * v6 + 8), (const void *)(v5 + 8 * v6), 8 * v22);
      uint64_t v5 = *(void *)(a1 + 72);
      uint64_t v19 = v23;
    }
    else
    {
      uint64_t v19 = 0;
    }
    *(void *)(v5 + 8 * v6) = a2;
LABEL_32:
    *(_DWORD *)(a1 + 104) = 1;
    return v19;
  }

  return err_GenerateErrorArg();
}

uint64_t LDOLabel_CompareTo(uint64_t a1, uint64_t a2)
{
  unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom(a1);
  unsigned int AbsoluteTo = LDOLabel_GetAbsoluteTo(a1);
  unsigned int v6 = LDOLabel_GetAbsoluteFrom(a2);
  unsigned int v7 = LDOLabel_GetAbsoluteTo(a2);
  if (AbsoluteTo >= v7) {
    int v8 = AbsoluteTo > v7;
  }
  else {
    int v8 = -1;
  }
  if (AbsoluteFrom <= v6) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 1;
  }
  if (AbsoluteFrom >= v6) {
    return v9;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t LDOLabel_GetAbsoluteFrom(uint64_t a1)
{
  unsigned int v3 = 0;
  if (*(_DWORD *)(a1 + 112) == 1) {
    return *(unsigned int *)(a1 + 88);
  }
  uint64_t v2 = *(uint64_t **)(a1 + 72);
  if (((*(void *)(a1 + 80) - (void)v2) & 0x7FFFFFFF8) == 0) {
    return 0xFFFFFFFFLL;
  }
  LDOTreeNode_ComputeAbsoluteFrom(*v2, &v3);
  return v3;
}

uint64_t LDOLabel_GetAbsoluteTo(uint64_t a1)
{
  unsigned int v3 = 0;
  if (*(_DWORD *)(a1 + 112) == 1) {
    return *(unsigned int *)(a1 + 92);
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (((v2 - *(void *)(a1 + 72)) & 0x7FFFFFFF8) == 0) {
    return 0xFFFFFFFFLL;
  }
  LDOTreeNode_ComputeAbsoluteTo(*(void *)(v2 - 8), &v3);
  return v3;
}

uint64_t LDOLabel_CompareToWithID(uint64_t a1, uint64_t a2)
{
  uint64_t result = LDOLabel_CompareTo(a1, a2);
  if (!result)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16);
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    BOOL v7 = v5 >= v6;
    BOOL v8 = v5 > v6;
    if (v7) {
      return v8;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t LDOLabel_ComputeText(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  uint64_t v4 = LDOObject_BorrowAllocator(a1);
  uint64_t v5 = PNEW_LDOString_Con(v4, v4, a2);
  if (!v5)
  {
    for (unsigned int i = *(size_t **)(a1 + 72); ; ++i)
    {
      if ((unint64_t)i >= *(void *)(a1 + 80)) {
        return 0;
      }
      uint64_t appended = LDOTreeNode_ComputeText(*i, &v11);
      uint64_t v8 = v11;
      if (appended) {
        break;
      }
      uint64_t appended = LDOString_AppendString(*a2, v11);
      uint64_t v8 = v11;
      if (appended) {
        break;
      }
      uint64_t v9 = OOC_PlacementDeleteObject(v4, v11);
      if (v9)
      {
        uint64_t v5 = v9;
        uint64_t v8 = v11;
        if (!v11) {
          return v5;
        }
LABEL_10:
        OOC_PlacementDeleteObject(v4, v8);
        return v5;
      }
      uint64_t v11 = 0;
    }
    uint64_t v5 = appended;
    if (!v8) {
      return v5;
    }
    goto LABEL_10;
  }
  return v5;
}

uint64_t LDOLabel_ContainsAllNodes(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  unint64_t v3 = *(void *)(a2 + 16);
  if (((v3 - (void)v4) & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  if ((unint64_t)v4 >= v3)
  {
LABEL_6:
    uint64_t result = 0;
    *a3 = 1;
  }
  else
  {
    while (1)
    {
      uint64_t result = LDOLabel_ContainsNode(a1, *v4, a3);
      if (result) {
        break;
      }
      if (!*a3) {
        return 0;
      }
      if ((unint64_t)++v4 >= *(void *)(a2 + 16)) {
        goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t LDOLabel_ContainsNode(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    return err_GenerateErrorArg();
  }
  else
  {
    *a3 = 0;
    unsigned int v6 = *(uint64_t **)(a1 + 72);
    if ((unint64_t)v6 < *(void *)(a1 + 80))
    {
      while (!LDOObject_IsEqual(a2, *v6))
      {
        if ((unint64_t)++v6 >= *(void *)(a1 + 80)) {
          return 0;
        }
      }
      *a3 = 1;
    }
    return 0;
  }
}

uint64_t LDOLabel_ContainsAtLeastOneNode(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = 0;
  *a3 = 0;
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 < *(void *)(a2 + 16))
  {
    while (1)
    {
      uint64_t result = LDOLabel_ContainsNode(a1, *v5, a3);
      if (result) {
        break;
      }
      if (*a3 != 1 && (unint64_t)++v5 < *(void *)(a2 + 16)) {
        continue;
      }
      return 0;
    }
  }
  return result;
}

uint64_t LDOLabel_Invalidate(uint64_t a1)
{
  *(_DWORD *)(a1 + 104) = 0;
  return 0;
}

uint64_t LDOLabel_RemoveNode(uint64_t a1, uint64_t a2)
{
  unsigned int v17 = 0;
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    return err_GenerateErrorArg();
  }
  uint64_t v5 = *(uint64_t **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 >= v4)
  {
LABEL_10:
    if (((v4 - (void)v5) & 0x7FFFFFFF8) == 0)
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 104) = 0;
      return result;
    }
    return 0;
  }
  int v7 = 1;
  while (!LDOObject_IsEqual(a2, *v5))
  {
    ++v5;
    unint64_t v4 = *(void *)(a1 + 80);
    ++v7;
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v5 = *(uint64_t **)(a1 + 72);
      goto LABEL_10;
    }
  }
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = (unint64_t)(*(void *)(a1 + 80) - v8) >> 3;
  cstdlib_memmove((void *)(v8 + 8 * (v7 - 1)), (const void *)(v8 + 8 * (v7 - 1) + 8), 8 * (v9 - v7));
  uint64_t v10 = *(void *)(a1 + 80) - 8;
  *(void *)(a1 + 80) = v10;
  int v11 = v9 - 1;
  if (*(_DWORD *)(a1 + 64) < (3 * (v9 - 1))) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 72);
  unsigned int v13 = 2 * v11;
  if (v13 <= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = LDOObject_BorrowAllocator(a1);
  uint64_t v16 = OOCAllocator_Realloc(v15, *(void *)(a1 + 72), 8 * v14, &v17);
  *(void *)(a1 + 72) = v16;
  uint64_t result = v17;
  if (!v17)
  {
    *(_DWORD *)(a1 + 64) = v14;
    *(void *)(a1 + 80) = v16 + ((v10 - v12) & 0x7FFFFFFF8);
  }
  return result;
}

uint64_t LDOLabel_RemoveNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v2 >= *(void *)(a2 + 16)) {
    return 0;
  }
  while (1)
  {
    uint64_t result = LDOLabel_RemoveNode(a1, *v2);
    if (result) {
      break;
    }
    if ((unint64_t)++v2 >= *(void *)(a2 + 16)) {
      return 0;
    }
  }
  return result;
}

uint64_t LDOLabel_SetReferenceFrom(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 108) = 1;
  return 0;
}

uint64_t LDOLabel_SetReferenceTo(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 100) = a2;
  *(_DWORD *)(a1 + 108) = 1;
  return 0;
}

uint64_t LDOLabel_ToString(unsigned int *a1, uint64_t *a2)
{
  uint64_t v15 = 0;
  uint64_t v4 = LDOObject_BorrowAllocator((uint64_t)a1);
  uint64_t appended = PNEW_LDOString_Con(v4, v4, a2);
  if (appended) {
    return appended;
  }
  uint64_t v6 = *a2;
  uint64_t appended = LHString_Append(v6, "  LDOLabel\n");
  if (!appended)
  {
    uint64_t appended = LDOObject_ToString((uint64_t)a1, &v15);
    if (!appended)
    {
      uint64_t appended = LDOString_AppendString(v6, v15);
      if (!appended)
      {
        if (v15)
        {
          uint64_t v7 = LDOString_BorrowAllocator(v15);
          OOC_PlacementDeleteObject(v7, v15);
          uint64_t v15 = 0;
        }
        uint64_t v8 = a1[26] == 1 ? "  Is valid: LH_TRUE\n" : "  Is valid: LH_FALSE\n";
        uint64_t appended = LHString_Append(v6, v8);
        if (!appended)
        {
          unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a1);
          uint64_t appended = LDOString_AppendPrefixU32Suffix(v6, "  Absolute from: ", AbsoluteFrom, "\n");
          if (!appended)
          {
            unsigned int AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)a1);
            uint64_t appended = LDOString_AppendPrefixU32Suffix(v6, "  Absolute to: ", AbsoluteTo, "\n");
            if (!appended)
            {
              if (a1[27] == 1)
              {
                uint64_t appended = LHString_Append(v6, "  Has reference indices: LH_TRUE\n");
                if (appended) {
                  goto LABEL_19;
                }
                uint64_t appended = LDOString_AppendPrefixU32Suffix(v6, "  Reference from: ", a1[24], "\n");
                if (appended) {
                  goto LABEL_19;
                }
                uint64_t v11 = LDOString_AppendPrefixU32Suffix(v6, "  Reference to: ", a1[25], "\n");
              }
              else
              {
                uint64_t v11 = LHString_Append(v6, "  Has reference indices: LH_FALSE\n");
              }
              uint64_t appended = v11;
            }
          }
        }
      }
    }
  }
LABEL_19:
  if (v15)
  {
    uint64_t v12 = LDOString_BorrowAllocator(v15);
    OOC_PlacementDeleteObject(v12, v15);
    uint64_t v15 = 0;
  }
  if (v6 && appended)
  {
    uint64_t v13 = LDOString_BorrowAllocator(v6);
    OOC_PlacementDeleteObject(v13, v6);
  }
  return appended;
}

uint64_t LDOLabel_UpdateSpanLength(_DWORD *a1, unsigned int a2, int a3)
{
  if (a1[28] == 1)
  {
    int AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)a1);
    unsigned int v7 = LDOLabel_GetAbsoluteTo((uint64_t)a1) + a3;
    if (LDOLabel_GetAbsoluteFrom((uint64_t)a1) > a2)
    {
      if (((AbsoluteFrom + a3) & 0x80000000) == 0)
      {
        a1[22] = AbsoluteFrom + a3;
LABEL_8:
        a1[23] = v7;
        return 0;
      }
LABEL_9:
      a1[26] = 0;
      return 0;
    }
    unsigned int v8 = a1[22];
    if (v8 <= a2)
    {
      if ((v7 & 0x80000000) == 0 && v7 >= v8) {
        goto LABEL_8;
      }
      goto LABEL_9;
    }
  }
  return 0;
}

void PNEW_LDOLabel_Con(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t *a6)
{
  int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 120, &v14);
  if (!v14)
  {
    LDOLabel_Con(v12, a2, a3, a4, a5);
    int v14 = v13;
    if (v13)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
    }
    else
    {
      *a6 = v12;
    }
  }
}

void PNEW_LDOLabel_ConSpecial(uint64_t a1, uint64_t a2, char *a3, char *a4, int a5, int a6, uint64_t *a7)
{
  int v16 = 0;
  uint64_t v14 = OOCAllocator_Malloc(a1, 120, &v16);
  if (!v16)
  {
    LDOLabel_ConSpecial(v14, a2, a3, a4, a5, a6);
    int v16 = v15;
    if (v15)
    {
      OOCAllocator_Free(a1, v14);
      *a7 = 0;
    }
    else
    {
      *a7 = v14;
    }
  }
}

void *GetLDOLabelClass()
{
  return &__LDOLabel;
}

uint64_t LDOTreeNode_Con(uint64_t a1, uint64_t a2, size_t a3, char *a4, char *a5, int a6, unsigned int a7)
{
  unsigned int v14 = a7;
  int v15 = a6;
  uint64_t v13 = 0;
  uint64_t result = LDOObject_Con(a1, a2);
  if (!result)
  {
    *(void *)a1 = &__LDOTreeNode;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 64) = 0;
    uint64_t result = __LDOTreeNode_ValidateIndices(a3, &v15, &v14, (_DWORD *)&v13 + 1, (unsigned int *)&v13);
    if (!result)
    {
      int v12 = v13;
      *(_DWORD *)(a1 + 104) = HIDWORD(v13);
      *(_DWORD *)(a1 + 108) = v12;
      *(_DWORD *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      uint64_t result = LDOObject_SetCategory(a1, a4);
      if (!result)
      {
        uint64_t result = LDOObject_SetType(a1, a5);
        if (!result) {
          return LDOTreeNode_SetParent(a1, a3);
        }
      }
    }
  }
  return result;
}

uint64_t __LDOTreeNode_ValidateIndices(size_t a1, _DWORD *a2, unsigned int *a3, _DWORD *a4, unsigned int *a5)
{
  unsigned int v19 = 0;
  uint64_t v18 = 0;
  __LDOTreeNode_ComputeTextLength(a1, &v19);
  if (a2)
  {
    LODWORD(a2) = *a2;
    if (a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = &v19;
    }
    unsigned int v11 = *v10;
    if (a2 > *v10) {
      goto LABEL_13;
    }
    unsigned int v13 = v19;
    if (a2 > v19) {
      goto LABEL_13;
    }
  }
  else
  {
    if (a3) {
      int v12 = a3;
    }
    else {
      int v12 = &v19;
    }
    unsigned int v11 = *v12;
    unsigned int v13 = v19;
  }
  if (v11 > v13)
  {
LABEL_13:
    uint64_t ErrorArg = err_GenerateErrorArg();
    goto LABEL_14;
  }
  uint64_t ErrorArg = LDOTreeNode_ComputeText(a1, &v18);
  if (!ErrorArg)
  {
    unsigned int v17 = (char *)LHString_BorrowCPtr(v18);
    if (!LDOString_IsValidUTF8(v17, 0)) {
      goto LABEL_13;
    }
    if (a4) {
      *a4 = a2;
    }
    uint64_t ErrorArg = 0;
    if (a5) {
      *a5 = v11;
    }
  }
LABEL_14:
  if (v18)
  {
    uint64_t v15 = LDOString_BorrowAllocator(v18);
    OOC_PlacementDeleteObject(v15, v18);
  }
  return ErrorArg;
}

uint64_t LDOTreeNode_SetParent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4 || (uint64_t result = LDOTreeNode_RemoveChild(v4, (_DWORD *)a1), !result))
  {
    if (a2)
    {
      return LDOTreeNode_AddChild(a2, a1);
    }
    else
    {
      uint64_t result = 0;
      *(void *)(a1 + 64) = 0;
    }
  }
  return result;
}

uint64_t LDOTreeNode_ConEx(uint64_t a1, uint64_t a2, size_t a3, char *a4, char *a5, _DWORD *a6, unsigned int *a7)
{
  uint64_t v15 = 0;
  uint64_t result = LDOObject_Con(a1, a2);
  if (!result)
  {
    *(void *)a1 = &__LDOTreeNode;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 64) = 0;
    uint64_t result = __LDOTreeNode_ValidateIndices(a3, a6, a7, (_DWORD *)&v15 + 1, (unsigned int *)&v15);
    if (!result)
    {
      int v14 = v15;
      *(_DWORD *)(a1 + 104) = HIDWORD(v15);
      *(_DWORD *)(a1 + 108) = v14;
      *(_DWORD *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      uint64_t result = LDOObject_SetCategory(a1, a4);
      if (!result)
      {
        uint64_t result = LDOObject_SetType(a1, a5);
        if (!result) {
          return LDOTreeNode_SetParent(a1, a3);
        }
      }
    }
  }
  return result;
}

uint64_t LDOTreeNode_ConRoot(uint64_t a1, uint64_t a2, char *a3, char *a4, char *a5)
{
  uint64_t result = LDOObject_Con(a1, a2);
  if (!result)
  {
    *(void *)a1 = &__LDOTreeNode;
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    uint64_t result = LDOObject_SetCategory(a1, a4);
    if (!result)
    {
      uint64_t result = LDOObject_SetType(a1, a5);
      if (!result)
      {
        return LDOTreeNode_SetText(a1, a3);
      }
    }
  }
  return result;
}

uint64_t LDOTreeNode_SetText(uint64_t a1, char *a2)
{
  unsigned int v26 = 0;
  int v25 = 0;
  if (*(void *)(a1 + 80) != *(void *)(a1 + 88))
  {
    return err_GenerateErrorStateObjName();
  }
  size_t v4 = a1;
  uint64_t v5 = LDOObject_BorrowAllocator(a1);
  uint64_t v6 = v5;
  if (*(void *)(v4 + 64))
  {
    memset(v22, 0, sizeof(v22));
    __LDOTreeNode_ComputeTextLength(v4, &v26);
    uint64_t v7 = LDOString_ComputeCPtrLength(a2, 0, &v25);
    if (!v7)
    {
      int v24 = 0;
      size_t v8 = *(void *)(v4 + 64);
      if (v8)
      {
        int v9 = 0;
        int v10 = v25 - v26;
        size_t v11 = *(void *)(v4 + 64);
        size_t v12 = v4;
        do
        {
          v9 += *(_DWORD *)(v12 + 104);
          size_t v12 = v11;
          size_t v11 = *(void *)(v11 + 64);
        }
        while (v11);
        unsigned int v23 = v9 + v26;
        int v24 = v9;
        size_t v13 = v4;
        do
        {
          size_t v4 = v8;
          unsigned int v14 = *(_DWORD *)(v13 + 104);
          int v15 = *(_DWORD *)(v13 + 108);
          int v16 = *(uint64_t **)(v4 + 80);
          unint64_t v17 = *(void *)(v4 + 88);
          while ((unint64_t)v16 < v17)
          {
            uint64_t v18 = *v16;
            unsigned int v19 = *(_DWORD *)(*v16 + 104);
            if (v19 >= v14)
            {
              int v20 = *(_DWORD *)(v18 + 108) + v10;
              *(_DWORD *)(v18 + 104) = v19 + v10;
              *(_DWORD *)(v18 + 108) = v20;
            }
            ++v16;
          }
          *(_DWORD *)(v13 + 104) = v14;
          *(_DWORD *)(v13 + 108) = v15 + v10;
          size_t v8 = *(void *)(v4 + 64);
          size_t v13 = v4;
        }
        while (v8);
      }
      else
      {
        unsigned int v23 = v26;
      }
      uint64_t v7 = LDOString_ConFromCPtr(v22, v6, a2);
      if (!v7)
      {
        uint64_t v7 = LDOString_ReplaceSubstring(*(void *)(v4 + 96), &v24, &v23, (uint64_t)v22);
        if (!v7)
        {
          *(_DWORD *)(v4 + 104) = 0;
          *(_DWORD *)(v4 + 108) = LHString_Length(*(void *)(v4 + 96));
        }
        (*(void (**)(_OWORD *))(*(void *)&v22[0] + 16))(v22);
      }
    }
    return v7;
  }
  if (*(void *)(v4 + 96))
  {
    if (!LDOString_IsValidUTF8(a2, 0))
    {
      return err_GenerateErrorArg();
    }
    uint64_t v21 = LHString_SetContentFromCPtr(*(void *)(v4 + 96), a2);
  }
  else
  {
    uint64_t v21 = PNEW_LDOString_ConFromCPtr(v5, v5, a2, (void *)(v4 + 96));
  }
  uint64_t v7 = v21;
  if (v21) {
    return v7;
  }
  *(_DWORD *)(v4 + 104) = 0;

  return LDOString_ComputeCPtrLength(a2, 0, (_DWORD *)(v4 + 108));
}

uint64_t LDOTreeNode_Des(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  if (v2)
  {
    uint64_t v3 = LDOString_BorrowAllocator(v2);
    uint64_t result = OOC_PlacementDeleteObject(v3, *(void *)(a1 + 96));
    if (result) {
      return result;
    }
  }
  uint64_t v5 = *(uint64_t **)(a1 + 80);
  if (v5)
  {
    if ((unint64_t)v5 >= *(void *)(a1 + 88))
    {
      *(_DWORD *)(a1 + 72) = 0;
    }
    else
    {
      do
      {
        uint64_t v6 = LDOObject_BorrowAllocator(a1);
        uint64_t v7 = *v5++;
        OOC_PlacementDeleteObject(v6, v7);
      }
      while ((unint64_t)v5 < *(void *)(a1 + 88));
      uint64_t v8 = *(void *)(a1 + 80);
      *(_DWORD *)(a1 + 72) = 0;
      if (!v8) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = LDOObject_BorrowAllocator(a1);
    OOCAllocator_Free(v9, *(void *)(a1 + 80));
    *(void *)(a1 + 80) = 0;
LABEL_10:
    *(void *)(a1 + 88) = 0;
  }

  return LDOObject_Des(a1);
}

uint64_t LDOTreeNode_AddChild(uint64_t a1, uint64_t a2)
{
  unsigned int v21 = 0;
  uint64_t v4 = *(void *)(a1 + 80);
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = 0;
  unint64_t v7 = v5 - v4;
  if (v5 != v4)
  {
    unint64_t v8 = (uint64_t)v7 >> 3;
    do
    {
      unint64_t v9 = v8 >> 1;
      int v10 = __LDOTreeNode_CompareToWithIDRelativeToParent((_DWORD *)a2, *(_DWORD **)(v4 + 8 * v6 + 8 * (v8 >> 1)));
      if (v10 < 1)
      {
        v8 >>= 1;
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t result = 0;
          goto LABEL_26;
        }
      }
      else
      {
        v6 += v9 + 1;
        v8 -= v9 + 1;
      }
    }
    while (v8);
  }
  unint64_t v11 = v7 >> 3;
  if (*(_DWORD *)(a1 + 72) == (v7 >> 3) && v11 != -1)
  {
    unsigned int v13 = 2 * v11;
    if (2 * (int)v11 >= (v11 + 1000000)) {
      unsigned int v13 = v11 + 1000000;
    }
    if (v13 <= (int)v11 + 1) {
      unsigned int v14 = v11 + 1;
    }
    else {
      unsigned int v14 = v13;
    }
    if (v14 <= 8) {
      unsigned int v15 = 8;
    }
    else {
      unsigned int v15 = v14;
    }
    uint64_t v16 = LDOObject_BorrowAllocator(a1);
    uint64_t v4 = OOCAllocator_Realloc(v16, *(void *)(a1 + 80), 8 * v15, &v21);
    *(void *)(a1 + 80) = v4;
    uint64_t result = v21;
    if (v21) {
      return result;
    }
    *(_DWORD *)(a1 + 72) = v15;
    unint64_t v5 = v4 + (v7 & 0x7FFFFFFF8);
  }
  *(void *)(a1 + 88) = v5 + 8;
  unint64_t v18 = (v7 >> 3);
  BOOL v19 = v18 > v6;
  unint64_t v20 = v18 - v6;
  if (v19)
  {
    cstdlib_memmove((void *)(v4 + 8 * v6 + 8), (const void *)(v4 + 8 * v6), 8 * v20);
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t result = v21;
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(v4 + 8 * v6) = a2;
LABEL_26:
  *(void *)(a2 + 64) = a1;
  return result;
}

uint64_t __LDOTreeNode_CompareToWithIDRelativeToParent(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = a1[26];
  unsigned int v3 = a2[26];
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  if (v2 > v3) {
    return 1;
  }
  unsigned int v4 = a1[27];
  unsigned int v5 = a2[27];
  if (v4 < v5) {
    return 0xFFFFFFFFLL;
  }
  if (v4 > v5) {
    return 1;
  }
  unsigned int v7 = a1[4];
  unsigned int v8 = a2[4];
  BOOL v9 = v7 >= v8;
  BOOL v10 = v7 > v8;
  if (v9) {
    return v10;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t LDOTreeNode_CompareTo(size_t a1, size_t a2)
{
  uint64_t v10 = 0;
  size_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    unsigned int v4 = 0;
    size_t v5 = a1;
    do
    {
      v4 += *(_DWORD *)(v5 + 104);
      size_t v5 = v3;
      size_t v3 = *(void *)(v3 + 64);
    }
    while (v3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  size_t v6 = *(void *)(a2 + 64);
  if (v6)
  {
    unsigned int v7 = 0;
    size_t v8 = a2;
    do
    {
      v7 += *(_DWORD *)(v8 + 104);
      size_t v8 = v6;
      size_t v6 = *(void *)(v6 + 64);
    }
    while (v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  if (v4 < v7) {
    return 0xFFFFFFFFLL;
  }
  if (v4 > v7) {
    return 1;
  }
  LDOTreeNode_ComputeAbsoluteTo(a1, (_DWORD *)&v10 + 1);
  LDOTreeNode_ComputeAbsoluteTo(a2, &v10);
  if (HIDWORD(v10) >= v10) {
    return HIDWORD(v10) > v10;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t LDOTreeNode_ComputeAbsoluteFrom(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    int v3 = 0;
    do
    {
      v3 += *(_DWORD *)(a1 + 104);
      *a2 = v3;
      a1 = v2;
      uint64_t v2 = *(void *)(v2 + 64);
    }
    while (v2);
  }
  return 0;
}

uint64_t LDOTreeNode_ComputeAbsoluteTo(size_t a1, _DWORD *a2)
{
  size_t v3 = a1;
  int v7 = 0;
  __LDOTreeNode_ComputeTextLength(a1, &v7);
  size_t v4 = *(void *)(v3 + 64);
  if (v4)
  {
    int v5 = 0;
    do
    {
      v5 += *(_DWORD *)(v3 + 104);
      size_t v3 = v4;
      size_t v4 = *(void *)(v4 + 64);
    }
    while (v4);
  }
  else
  {
    int v5 = 0;
  }
  *a2 = v7 + v5;
  return 0;
}

uint64_t LDOTreeNode_CompareToWithID(size_t a1, size_t a2)
{
  uint64_t result = LDOTreeNode_CompareTo(a1, a2);
  if (!result)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 16);
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    BOOL v7 = v5 >= v6;
    BOOL v8 = v5 > v6;
    if (v7) {
      return v8;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL LDOTreeNode_IsRoot(uint64_t a1)
{
  return *(void *)(a1 + 64) == 0;
}

size_t __LDOTreeNode_ComputeTextLength(size_t result, _DWORD *a2)
{
  *a2 = 0;
  if (result)
  {
    if (*(void *)(result + 64))
    {
      unsigned int v3 = *(_DWORD *)(result + 104);
      unsigned int v4 = *(_DWORD *)(result + 108);
      uint64_t result = v4 - v3;
      if (v4 < v3) {
        return result;
      }
    }
    else
    {
      uint64_t result = *(void *)(result + 96);
      if (!result) {
        return result;
      }
      uint64_t result = LHString_Length(result);
    }
    *a2 = result;
  }
  return result;
}

uint64_t LDOTreeNode_ComputeFromToIndices(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v22 = 0;
  unsigned int v4 = *(size_t **)(a1 + 8);
  if (((*(void *)(a1 + 16) - (void)v4) & 0x7FFFFFFF8) != 0)
  {
    if (a2 == 1)
    {
      size_t v9 = *v4;
      size_t v10 = *(void *)(*v4 + 64);
      if (v10)
      {
        unsigned int v11 = 0;
        size_t v12 = v9;
        do
        {
          v11 += *(_DWORD *)(v12 + 104);
          size_t v12 = v10;
          size_t v10 = *(void *)(v10 + 64);
        }
        while (v10);
      }
      else
      {
        unsigned int v11 = 0;
      }
      LDOTreeNode_ComputeAbsoluteTo(v9, (_DWORD *)&v22 + 1);
      unsigned int v14 = *(size_t **)(a1 + 8);
      unsigned int v13 = HIDWORD(v22);
LABEL_15:
      unint64_t v16 = *(void *)(a1 + 16);
      while ((unint64_t)v14 < v16)
      {
        size_t v17 = *v14;
        if (a2 == 1)
        {
          size_t v18 = *(void *)(v17 + 64);
          if (v18)
          {
            unsigned int v19 = 0;
            size_t v20 = *v14;
            do
            {
              v19 += *(_DWORD *)(v20 + 104);
              size_t v20 = v18;
              size_t v18 = *(void *)(v18 + 64);
            }
            while (v18);
          }
          else
          {
            unsigned int v19 = 0;
          }
          LDOTreeNode_ComputeAbsoluteTo(v17, &v22);
          unsigned int v21 = v22;
          unint64_t v16 = *(void *)(a1 + 16);
        }
        else
        {
          unsigned int v19 = *(_DWORD *)(v17 + 104);
          unsigned int v21 = *(_DWORD *)(v17 + 108);
          LODWORD(v22) = v21;
        }
        if (v19 < v11) {
          unsigned int v11 = v19;
        }
        if (v21 > v13) {
          unsigned int v13 = v21;
        }
        ++v14;
      }
      if (a3) {
        *a3 = v11;
      }
      if (a4) {
        *a4 = v13;
      }
      return 0;
    }
    if (LDOTreeNode_HaveSameParent(a1) == 1)
    {
      unsigned int v13 = 0;
      unsigned int v11 = 0;
      unsigned int v14 = *(size_t **)(a1 + 8);
      LODWORD(v22) = *(_DWORD *)(*v14 + 108);
      goto LABEL_15;
    }
  }

  return err_GenerateErrorArg();
}

uint64_t LDOTreeNode_HaveSameParent(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v1 = *(void *)(a1 + 16);
  if (((v1 - v2) & 0x7FFFFFFF8) == 0) {
    return 1;
  }
  uint64_t v3 = *(void *)(*(void *)v2 + 64);
  if (!v3)
  {
    while (v2 < v1)
    {
      if (*(void *)(*(void *)v2 + 64)) {
        return 0;
      }
      v2 += 8;
    }
    return 1;
  }
  if (v2 >= v1) {
    return 1;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(*(void *)v2 + 64);
    if (!v5 || !LDOObject_IsEqual(v3, v5)) {
      break;
    }
    v2 += 8;
    if (v2 >= *(void *)(a1 + 16)) {
      return 1;
    }
  }
  return 0;
}

uint64_t LDOTreeNode_ComputeIndexInParent(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    return __LDOTreeNode_ComputeChildIndex(v4, (_DWORD *)a1, a2);
  }
  else {
    return err_GenerateErrorStateObjName();
  }
}

uint64_t __LDOTreeNode_ComputeChildIndex(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88) - v3;
  if (v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v4 >> 3;
    do
    {
      unint64_t v9 = v8 >> 1;
      int v10 = __LDOTreeNode_CompareToWithIDRelativeToParent(a2, *(_DWORD **)(v3 + 8 * v7 + 8 * (v8 >> 1)));
      if (v10 < 1)
      {
        if ((v10 & 0x80000000) == 0)
        {
          *a3 = v9 + v7;
          return 0;
        }
      }
      else
      {
        v7 += v9 + 1;
        unint64_t v9 = v8 - (v9 + 1);
      }
      unint64_t v8 = v9;
    }
    while (v9);
  }

  return err_GenerateErrorArg();
}

uint64_t LDOTreeNode_ComputeRoot(uint64_t result, void *a2)
{
  do
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(result + 64);
  }
  while (result);
  *a2 = v2;
  return result;
}

uint64_t LDOTreeNode_ComputeSubtreeNodes(uint64_t a1, uint64_t a2)
{
  size_t __src = a1;
  unsigned int v66 = 0;
  size_t v65 = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = LDOObject_BorrowAllocator(a1);
  uint64_t v5 = (void *)OOCAllocator_Realloc(v4, 0, 64, &v66);
  uint64_t v6 = (uint64_t)v5;
  BOOL v7 = v66 == 0;
  if (v66) {
    goto LABEL_2;
  }
  cstdlib_memcpy(v5, &__src, 8uLL);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = v6;
  unint64_t v12 = 0;
  uint64_t v13 = v10 - *(void *)(a2 + 8);
  if (v13)
  {
    unint64_t v14 = v13 >> 3;
    while (1)
    {
      unint64_t v15 = v14 >> 1;
      size_t v16 = __src;
      size_t v17 = *(void *)(*v3 + 8 * v12 + 8 * (v14 >> 1));
      int v18 = LDOTreeNode_CompareTo(__src, v17);
      if (v18) {
        goto LABEL_10;
      }
      unsigned int v19 = *(_DWORD *)(v16 + 16);
      unsigned int v20 = *(_DWORD *)(v17 + 16);
      if (v19 >= v20) {
        break;
      }
LABEL_13:
      unint64_t v14 = v15;
      if (!v15)
      {
        uint64_t v10 = *(void *)(a2 + 8);
        uint64_t v21 = *(void *)(a2 + 16);
        goto LABEL_16;
      }
    }
    int v18 = v19 > v20;
LABEL_10:
    if (v18 < 1)
    {
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
    else
    {
      v12 += v15 + 1;
      unint64_t v15 = v14 - (v15 + 1);
    }
    goto LABEL_13;
  }
  uint64_t v21 = *(void *)(a2 + 16);
LABEL_16:
  unint64_t v22 = v21 - v10;
  unint64_t v23 = (unint64_t)(v21 - v10) >> 3;
  if (*(_DWORD *)a2 != v23 || v23 == -1) {
    goto LABEL_30;
  }
  unsigned int v25 = 2 * v23;
  if (2 * (int)v23 >= (v23 + 1000000)) {
    unsigned int v25 = v23 + 1000000;
  }
  if (v25 <= (int)v23 + 1) {
    unsigned int v26 = v23 + 1;
  }
  else {
    unsigned int v26 = v25;
  }
  if (v26 <= 8) {
    unsigned int v27 = 8;
  }
  else {
    unsigned int v27 = v26;
  }
  uint64_t v28 = LDOObject_BorrowAllocator(__src);
  uint64_t v10 = OOCAllocator_Realloc(v28, *v3, 8 * v27, &v66);
  *uint64_t v3 = v10;
  uint64_t v6 = v11;
  if (!v66)
  {
    *(_DWORD *)a2 = v27;
    uint64_t v21 = v10 + (v22 & 0x7FFFFFFF8);
LABEL_30:
    *(void *)(a2 + 16) = v21 + 8;
    unint64_t v29 = (v22 >> 3);
    BOOL v30 = v29 > v12;
    unint64_t v31 = v29 - v12;
    if (v30)
    {
      cstdlib_memmove((void *)(v10 + 8 * v12 + 8), (const void *)(v10 + 8 * v12), 8 * v31);
      uint64_t v10 = *v3;
    }
    *(void *)(v10 + 8 * v12) = __src;
LABEL_34:
    uint64_t v32 = 0;
    unsigned int v33 = 8 * v7;
    uint64_t v6 = v11;
    uint64_t v34 = (char *)(v11 + 8);
    while (1)
    {
      uint64_t v35 = *(void *)(v6 + 8 * v32);
      uint64_t v36 = *(size_t **)(v35 + 80);
      uint64_t v62 = v32;
      if ((unint64_t)v36 < *(void *)(v35 + 88)) {
        break;
      }
LABEL_77:
      uint64_t v32 = v62 + 1;
      if (v62 + 1 >= (unint64_t)((unint64_t)&v34[-v6] >> 3)) {
        goto LABEL_2;
      }
    }
    uint64_t v63 = *(void *)(v6 + 8 * v32);
    while (1)
    {
      size_t v65 = *v36;
      unint64_t v37 = (unint64_t)&v34[-v6];
      unsigned int v38 = ((unint64_t)&v34[-v6] >> 3) + 1;
      if (v38 > v33)
      {
        unsigned int v39 = 2 * v33;
        if (2 * v33 >= v33 + 1000000) {
          unsigned int v39 = v33 + 1000000;
        }
        if (v39 > v38) {
          unsigned int v38 = v39;
        }
        if (v38 <= 8) {
          unsigned int v33 = 8;
        }
        else {
          unsigned int v33 = v38;
        }
        uint64_t v40 = LDOObject_BorrowAllocator(__src);
        uint64_t v41 = OOCAllocator_Realloc(v40, v6, 8 * v33, &v66);
        uint64_t v6 = v41;
        if (v66) {
          goto LABEL_2;
        }
        uint64_t v34 = (char *)(v41 + (v37 & 0x7FFFFFFF8));
      }
      cstdlib_memcpy(v34, &v65, 8uLL);
      uint64_t v42 = *(void *)(a2 + 16);
      uint64_t v43 = v42 - *(void *)(a2 + 8);
      uint64_t v64 = v6;
      unint64_t v44 = 0;
      if (v43) {
        break;
      }
      uint64_t v52 = *(void *)(a2 + 16);
LABEL_58:
      unint64_t v53 = v52 - v42;
      unint64_t v54 = (unint64_t)(v52 - v42) >> 3;
      if (*(_DWORD *)a2 == v54 && v54 != -1)
      {
        unsigned int v56 = 2 * v54;
        if (2 * (int)v54 >= (v54 + 1000000)) {
          unsigned int v56 = v54 + 1000000;
        }
        if (v56 <= (int)v54 + 1) {
          unsigned int v57 = v54 + 1;
        }
        else {
          unsigned int v57 = v56;
        }
        if (v57 <= 8) {
          unsigned int v58 = 8;
        }
        else {
          unsigned int v58 = v57;
        }
        uint64_t v59 = LDOObject_BorrowAllocator(__src);
        uint64_t v42 = OOCAllocator_Realloc(v59, *v3, 8 * v58, &v66);
        *uint64_t v3 = v42;
        if (v66)
        {
          uint64_t v6 = v64;
          goto LABEL_2;
        }
        *(_DWORD *)a2 = v58;
        uint64_t v52 = v42 + (v53 & 0x7FFFFFFF8);
      }
      *(void *)(a2 + 16) = v52 + 8;
      unint64_t v60 = (v53 >> 3);
      BOOL v30 = v60 > v44;
      unint64_t v61 = v60 - v44;
      if (v30)
      {
        cstdlib_memmove((void *)(v42 + 8 * v44 + 8), (const void *)(v42 + 8 * v44), 8 * v61);
        uint64_t v42 = *v3;
      }
      *(void *)(v42 + 8 * v44) = v65;
LABEL_76:
      v34 += 8;
      ++v36;
      uint64_t v6 = v64;
      if ((unint64_t)v36 >= *(void *)(v63 + 88)) {
        goto LABEL_77;
      }
    }
    unint64_t v45 = v43 >> 3;
    while (1)
    {
      unint64_t v46 = v45 >> 1;
      size_t v47 = v65;
      size_t v48 = *(void *)(*v3 + 8 * v44 + 8 * (v45 >> 1));
      int v49 = LDOTreeNode_CompareTo(v65, v48);
      if (v49) {
        goto LABEL_52;
      }
      unsigned int v50 = *(_DWORD *)(v47 + 16);
      unsigned int v51 = *(_DWORD *)(v48 + 16);
      if (v50 >= v51) {
        break;
      }
LABEL_55:
      unint64_t v45 = v46;
      if (!v46)
      {
        uint64_t v42 = *(void *)(a2 + 8);
        uint64_t v52 = *(void *)(a2 + 16);
        goto LABEL_58;
      }
    }
    int v49 = v50 > v51;
LABEL_52:
    if (v49 < 1)
    {
      if ((v49 & 0x80000000) == 0) {
        goto LABEL_76;
      }
    }
    else
    {
      v44 += v46 + 1;
      unint64_t v46 = v45 - (v46 + 1);
    }
    goto LABEL_55;
  }
LABEL_2:
  if (v6)
  {
    uint64_t v8 = LDOObject_BorrowAllocator(__src);
    OOCAllocator_Free(v8, v6);
  }
  return v66;
}

uint64_t LDOTreeNode_ComputeText(size_t a1, void *a2)
{
  unsigned int v12 = 0;
  size_t v4 = a1;
  do
  {
    size_t v5 = v4;
    size_t v4 = *(void *)(v4 + 64);
  }
  while (v4);
  uint64_t v6 = LDOObject_BorrowAllocator(a1);
  uint64_t v7 = v6;
  if (*(void *)(v5 + 96))
  {
    int v13 = 0;
    size_t v8 = *(void *)(a1 + 64);
    if (v8)
    {
      int v9 = 0;
      size_t v10 = a1;
      do
      {
        v9 += *(_DWORD *)(v10 + 104);
        size_t v10 = v8;
        size_t v8 = *(void *)(v8 + 64);
      }
      while (v8);
      int v13 = v9;
    }
    LDOTreeNode_ComputeAbsoluteTo(a1, &v12);
    return PNEW_LDOString_ConFromStringSubstring(v7, v7, *(void *)(v5 + 96), &v13, &v12, a2);
  }
  else
  {
    return PNEW_LDOString_Con(v6, v6, a2);
  }
}

uint64_t LDOTreeNode_ComputeUpdateInfo(size_t a1, char *__s, _DWORD *a3, _DWORD *a4)
{
  uint64_t v11 = 0;
  if (LDOString_IsValidUTF8(__s, 0))
  {
    uint64_t result = LDOString_ComputeCPtrLength(__s, 0, &v11);
    if (!result)
    {
      __LDOTreeNode_ComputeTextLength(a1, (_DWORD *)&v11 + 1);
      *a3 = 0;
      size_t v9 = *(void *)(a1 + 64);
      if (v9)
      {
        int v10 = 0;
        do
        {
          v10 += *(_DWORD *)(a1 + 104);
          *a3 = v10;
          a1 = v9;
          size_t v9 = *(void *)(v9 + 64);
        }
        while (v9);
      }
      uint64_t result = 0;
      *a4 = v11 - HIDWORD(v11);
    }
  }
  else
  {
    return err_GenerateErrorArg();
  }
  return result;
}

uint64_t LDOTreeNode_ComputeVectorTextLength(uint64_t a1, _DWORD *a2)
{
  int v3 = 0;
  uint64_t v11 = 0;
  *a2 = 0;
  size_t v4 = *(size_t **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
LABEL_7:
    uint64_t v6 = 0;
    *a2 = v3;
  }
  else
  {
    int v3 = 0;
    while (1)
    {
      uint64_t v6 = LDOTreeNode_ComputeText(*v4, &v11);
      if (v6) {
        break;
      }
      int v7 = LHString_Length(v11);
      if (v11)
      {
        uint64_t v8 = LDOString_BorrowAllocator(v11);
        OOC_PlacementDeleteObject(v8, v11);
        uint64_t v11 = 0;
      }
      v3 += v7;
      if ((unint64_t)++v4 >= *(void *)(a1 + 16)) {
        goto LABEL_7;
      }
    }
    if (v11)
    {
      uint64_t v10 = LDOString_BorrowAllocator(v11);
      OOC_PlacementDeleteObject(v10, v11);
    }
  }
  return v6;
}

uint64_t LDOTreeNode_DestroyAllChildren(uint64_t a1)
{
  return LDOTreeNode_DestroyChildrenMatchingCondition(a1, 0);
}

uint64_t LDOTreeNode_DestroyChildrenMatchingCondition(uint64_t a1, uint64_t (*a2)(void, uint64_t *))
{
  uint64_t v12 = 0;
  int v13 = 0;
  unint64_t v14 = 0;
  uint64_t ChildrenMatchingCondition = LDOTreeNode_FindChildrenMatchingCondition(a1, a2, (unsigned int *)&v12);
  uint64_t v4 = (uint64_t)v13;
  if (ChildrenMatchingCondition)
  {
LABEL_7:
    if (!v4) {
      return ChildrenMatchingCondition;
    }
LABEL_8:
    uint64_t v10 = LDOObject_BorrowAllocator(a1);
    OOCAllocator_Free(v10, v4);
    return ChildrenMatchingCondition;
  }
  unint64_t v5 = v14;
  if ((unint64_t)v13 >= v14)
  {
LABEL_6:
    uint64_t ChildrenMatchingCondition = 0;
    goto LABEL_7;
  }
  uint64_t v6 = v13;
  while (1)
  {
    uint64_t v7 = LDOTreeNode_RemoveChild(a1, (_DWORD *)*v6);
    if (v7) {
      break;
    }
    uint64_t v8 = LDOObject_BorrowAllocator(a1);
    uint64_t v9 = *v6++;
    OOC_PlacementDeleteObject(v8, v9);
    if ((unint64_t)v6 >= v5) {
      goto LABEL_6;
    }
  }
  uint64_t ChildrenMatchingCondition = v7;
  if (v4) {
    goto LABEL_8;
  }
  return ChildrenMatchingCondition;
}

uint64_t LDOTreeNode_FindChildrenMatchingCondition(uint64_t a1, uint64_t (*a2)(void, uint64_t *), unsigned int *a3)
{
  uint64_t v17 = 0;
  if (*((void *)a3 + 1) == *((void *)a3 + 2))
  {
    unint64_t v5 = *(void **)(a1 + 80);
    if ((unint64_t)v5 >= *(void *)(a1 + 88)) {
      return 0;
    }
    while (a2)
    {
      uint64_t result = a2(*v5, &v17);
      HIDWORD(v17) = result;
      if (result) {
        return result;
      }
      if (v17) {
        goto LABEL_11;
      }
LABEL_22:
      if ((unint64_t)++v5 >= *(void *)(a1 + 88)) {
        return HIDWORD(v17);
      }
    }
    LODWORD(v17) = 1;
LABEL_11:
    uint64_t v8 = (char *)*((void *)a3 + 2);
    unint64_t v9 = (unint64_t)&v8[-*((void *)a3 + 1)];
    unsigned int v10 = (v9 >> 3) + 1;
    unsigned int v11 = *a3;
    if (v10 > *a3)
    {
      unsigned int v12 = 2 * v11;
      unsigned int v13 = v11 + 1000000;
      if (v12 < v13) {
        unsigned int v13 = v12;
      }
      if (v13 > v10) {
        unsigned int v10 = v13;
      }
      if (v10 <= 8) {
        unsigned int v14 = 8;
      }
      else {
        unsigned int v14 = v10;
      }
      uint64_t v15 = LDOObject_BorrowAllocator(a1);
      uint64_t v16 = OOCAllocator_Realloc(v15, *((void *)a3 + 1), 8 * v14, (_DWORD *)&v17 + 1);
      *((void *)a3 + 1) = v16;
      uint64_t result = HIDWORD(v17);
      if (HIDWORD(v17)) {
        return result;
      }
      *a3 = v14;
      uint64_t v8 = (char *)(v16 + (v9 & 0x7FFFFFFF8));
      *((void *)a3 + 2) = v8;
    }
    cstdlib_memcpy(v8, v5, 8uLL);
    *((void *)a3 + 2) += 8;
    goto LABEL_22;
  }

  return err_GenerateErrorArg();
}

uint64_t LDOTreeNode_RemoveChild(uint64_t a1, _DWORD *a2)
{
  unsigned int v5 = 0;
  uint64_t result = __LDOTreeNode_ComputeChildIndex(a1, a2, &v5);
  if (!result)
  {
    unsigned int v4 = v5;
    return LDOTreeNode_RemoveChildAtIndex(a1, v4);
  }
  return result;
}

uint64_t LDOTreeNode_GetNextSibling(uint64_t a1, void *a2)
{
  int v6 = 0;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t result = __LDOTreeNode_ComputeChildIndex(result, (_DWORD *)a1, &v6);
    if (!result)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 80);
      uint64_t result = 0;
      if (v6 + 1 < ((unint64_t)(*(void *)(*(void *)(a1 + 64) + 88) - v5) >> 3)) {
        *a2 = *(void *)(v5 + 8 * (v6 + 1));
      }
    }
  }
  return result;
}

uint64_t LDOTreeNode_GetNumberChildren(uint64_t a1)
{
  return (*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3;
}

uint64_t LDOTreeNode_GetPreviousSibling(uint64_t a1, void *a2)
{
  int v6 = 0;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t result = __LDOTreeNode_ComputeChildIndex(result, (_DWORD *)a1, &v6);
    if (result) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v6 == 0;
    }
    if (!v5)
    {
      uint64_t result = 0;
      *a2 = *(void *)(*(void *)(*(void *)(a1 + 64) + 80) + 8 * (v6 - 1));
    }
  }
  return result;
}

BOOL LDOTreeNode_IsLeaf(uint64_t a1)
{
  return *(void *)(a1 + 80) == *(void *)(a1 + 88);
}

uint64_t LDOTreeNode_RemoveChildAtIndex(uint64_t a1, unsigned int a2)
{
  unsigned int v13 = 0;
  uint64_t v3 = *(void *)(a1 + 80);
  unint64_t v4 = (unint64_t)(*(void *)(a1 + 88) - v3) >> 3;
  cstdlib_memmove((void *)(v3 + 8 * a2), (const void *)(v3 + 8 * a2 + 8), 8 * (v4 + ~a2));
  uint64_t result = 0;
  uint64_t v6 = *(void *)(a1 + 88) - 8;
  *(void *)(a1 + 88) = v6;
  int v7 = v4 - 1;
  if (*(_DWORD *)(a1 + 72) >= (3 * (v4 - 1)))
  {
    uint64_t v8 = *(void *)(a1 + 80);
    unsigned int v9 = 2 * v7;
    if (v9 <= 8) {
      unsigned int v10 = 8;
    }
    else {
      unsigned int v10 = v9;
    }
    uint64_t v11 = LDOObject_BorrowAllocator(a1);
    uint64_t v12 = OOCAllocator_Realloc(v11, *(void *)(a1 + 80), 8 * v10, &v13);
    *(void *)(a1 + 80) = v12;
    uint64_t result = v13;
    if (!v13)
    {
      *(_DWORD *)(a1 + 72) = v10;
      *(void *)(a1 + 88) = v12 + ((v6 - v8) & 0x7FFFFFFF8);
    }
  }
  return result;
}

uint64_t LDOTreeNode_ToString(size_t a1, uint64_t *a2)
{
  uint64_t v16 = 0;
  uint64_t v4 = LDOObject_BorrowAllocator(a1);
  uint64_t appended = PNEW_LDOString_Con(v4, v4, a2);
  if (!appended)
  {
    uint64_t v6 = *a2;
    uint64_t appended = LHString_Append(v6, "  LDOTreeNode\n");
    if (!appended)
    {
      uint64_t appended = LDOObject_ToString(a1, (uint64_t *)&v16);
      if (!appended)
      {
        uint64_t appended = LDOString_AppendString(v6, (uint64_t)v16);
        if (!appended)
        {
          if (v16)
          {
            uint64_t v7 = LDOString_BorrowAllocator((uint64_t)v16);
            OOC_PlacementDeleteObject(v7, (uint64_t)v16);
            uint64_t v16 = 0;
          }
          uint64_t appended = LDOString_AppendPrefixU32Suffix(v6, "  Parent from: ", *(_DWORD *)(a1 + 104), "\n");
          if (!appended)
          {
            uint64_t appended = LDOString_AppendPrefixU32Suffix(v6, "  Parent to: ", *(_DWORD *)(a1 + 108), "\n");
            if (!appended)
            {
              uint64_t appended = LDOString_AppendPrefixStringSuffix(v6, "  pText: ", *(char **)(a1 + 96), "\n");
              if (!appended)
              {
                uint64_t appended = LDOTreeNode_ComputeText(a1, &v16);
                if (!appended)
                {
                  uint64_t appended = LDOString_AppendPrefixStringSuffix(v6, "  text: ", v16, "\n");
                  if (!appended)
                  {
                    if (v16)
                    {
                      uint64_t v8 = LDOString_BorrowAllocator((uint64_t)v16);
                      OOC_PlacementDeleteObject(v8, (uint64_t)v16);
                      uint64_t v16 = 0;
                    }
                    uint64_t appended = LDOString_AppendPrefixU32Suffix(v6, "  children: ", (*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3, "\n\n");
                    if (!appended)
                    {
                      unsigned int v9 = *(void **)(a1 + 80);
                      if ((unint64_t)v9 >= *(void *)(a1 + 88))
                      {
                        uint64_t appended = 0;
                      }
                      else
                      {
                        unsigned int v10 = 0;
                        while (1)
                        {
                          uint64_t v11 = LDOString_AppendPrefixU32Suffix(v6, "  child #", v10, "\n");
                          if (v11) {
                            break;
                          }
                          uint64_t v11 = (*(uint64_t (**)(void, char **))(*(void *)*v9 + 24))(*v9, &v16);
                          if (v11) {
                            break;
                          }
                          uint64_t v11 = LDOString_AppendString(v6, (uint64_t)v16);
                          if (v11) {
                            break;
                          }
                          if (v16)
                          {
                            uint64_t v12 = LDOString_BorrowAllocator((uint64_t)v16);
                            OOC_PlacementDeleteObject(v12, (uint64_t)v16);
                            uint64_t v16 = 0;
                          }
                          uint64_t appended = 0;
                          ++v10;
                          if ((unint64_t)++v9 >= *(void *)(a1 + 88)) {
                            goto LABEL_26;
                          }
                        }
                        uint64_t appended = v11;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_26:
    if (v16)
    {
      uint64_t v13 = LDOString_BorrowAllocator((uint64_t)v16);
      OOC_PlacementDeleteObject(v13, (uint64_t)v16);
      uint64_t v16 = 0;
    }
    if (v6 && appended)
    {
      uint64_t v14 = LDOString_BorrowAllocator(v6);
      OOC_PlacementDeleteObject(v14, v6);
    }
  }
  return appended;
}

uint64_t PNEW_LDOTreeNode_Con(uint64_t a1, uint64_t a2, size_t a3, char *a4, char *a5, int a6, unsigned int a7, uint64_t *a8)
{
  unsigned int v18 = 0;
  uint64_t v16 = OOCAllocator_Malloc(a1, 112, &v18);
  uint64_t result = v18;
  if (!v18)
  {
    uint64_t result = LDOTreeNode_Con(v16, a2, a3, a4, a5, a6, a7);
    unsigned int v18 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v16);
      *a8 = 0;
      return v18;
    }
    else
    {
      *a8 = v16;
    }
  }
  return result;
}

uint64_t PNEW_LDOTreeNode_ConEx(uint64_t a1, uint64_t a2, size_t a3, char *a4, char *a5, _DWORD *a6, unsigned int *a7, uint64_t *a8)
{
  unsigned int v18 = 0;
  uint64_t v16 = OOCAllocator_Malloc(a1, 112, &v18);
  uint64_t result = v18;
  if (!v18)
  {
    uint64_t result = LDOTreeNode_ConEx(v16, a2, a3, a4, a5, a6, a7);
    unsigned int v18 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v16);
      *a8 = 0;
      return v18;
    }
    else
    {
      *a8 = v16;
    }
  }
  return result;
}

uint64_t PNEW_LDOTreeNode_ConRoot(uint64_t a1, uint64_t a2, char *a3, char *a4, char *a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 112, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = LDOTreeNode_ConRoot(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetLDOTreeNodeClass()
{
  return &__LDOTreeNode;
}

uint64_t LDOString_Con(void *a1, uint64_t a2)
{
  uint64_t result = LHString_Con(a1, a2);
  if (!result) {
    *a1 = &__LDOString;
  }
  return result;
}

uint64_t LDOString_ConFromCPtr(void *a1, uint64_t a2, char *__s)
{
  uint64_t result = LDOString_ValidateIndicesCPtr(__s, 0, 0, 1, 0, 0, 0);
  if (!result)
  {
    uint64_t result = LHString_ConFromCPtr(a1, a2, __s);
    if (!result) {
      *a1 = &__LDOString;
    }
  }
  return result;
}

uint64_t LDOString_ValidateIndicesCPtr(char *__s, _DWORD *a2, unsigned int *a3, int a4, _DWORD *a5, unsigned int *a6, unsigned int *a7)
{
  if (__s)
  {
    unsigned int v14 = cstdlib_strlen(__s);
    if (a2) {
LABEL_3:
    }
      LODWORD(a2) = *a2;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
    unsigned int v14 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  unsigned int v15 = v14;
  if (a3) {
    unsigned int v15 = *a3;
  }
  if (a2 > v15
    || a2 > v14
    || v15 > v14
    || a4 == 1 && !LDOString_IsValidUTF8(&__s[a2], (unint64_t)&__s[v15]))
  {
    return err_GenerateErrorArg();
  }
  else
  {
    if (a5) {
      *a5 = a2;
    }
    if (a6) {
      *a6 = v15;
    }
    uint64_t result = 0;
    if (a7) {
      *a7 = v14;
    }
  }
  return result;
}

uint64_t LDOString_ConFromCPtrSubstring(void *a1, uint64_t a2, char *__s, _DWORD *a4, unsigned int *a5)
{
  uint64_t v9 = 0;
  uint64_t result = LDOString_ValidateIndicesCPtr(__s, a4, a5, 1, (_DWORD *)&v9 + 1, (unsigned int *)&v9, 0);
  if (!result)
  {
    uint64_t result = LHString_ConFromCPtrInterval((uint64_t)a1, a2, &__s[HIDWORD(v9)], &__s[v9]);
    if (!result) {
      *a1 = &__LDOString;
    }
  }
  return result;
}

uint64_t LDOString_ConFromString(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = (char *)LHString_BorrowCPtr(a3);
  uint64_t result = LDOString_ConFromCPtr(a1, a2, v5);
  if (!result) {
    *a1 = &__LDOString;
  }
  return result;
}

uint64_t LDOString_ConFromStringSubstring(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5)
{
  uint64_t v9 = (char *)LHString_BorrowCPtr(a3);
  uint64_t result = LDOString_ConFromCPtrSubstring(a1, a2, v9, a4, a5);
  if (!result) {
    *a1 = &__LDOString;
  }
  return result;
}

uint64_t LDOString_AppendPrefixBoolSuffix(uint64_t a1, char *a2, int a3, char *a4)
{
  if (a3 == 1) {
    uint64_t v4 = "true";
  }
  else {
    uint64_t v4 = "false";
  }
  return __LDOString_AppendPrefixCPtrSuffix(a1, a2, v4, a4);
}

uint64_t __LDOString_AppendPrefixCPtrSuffix(uint64_t a1, char *__s, char *a3, char *a4)
{
  if (__s)
  {
    if (!LDOString_IsValidUTF8(__s, 0)) {
      goto LABEL_18;
    }
    uint64_t result = LHString_Append(a1, __s);
    if (result) {
      return result;
    }
  }
  if (a3)
  {
    if (!LDOString_IsValidUTF8(a3, 0)) {
      goto LABEL_18;
    }
    uint64_t v9 = a1;
    unsigned int v10 = a3;
  }
  else
  {
    unsigned int v10 = "NULL";
    uint64_t v9 = a1;
  }
  uint64_t result = LHString_Append(v9, v10);
  if (result) {
    return result;
  }
  if (!a4) {
    return 0;
  }
  if (LDOString_IsValidUTF8(a4, 0))
  {
    return LHString_Append(a1, a4);
  }
LABEL_18:

  return err_GenerateErrorArg();
}

uint64_t LDOString_AppendPrefixS32Suffix(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v8 = 0;
  uint64_t v9 = 0;
  LH_itoa(a3, v8, 0xAu);
  return __LDOString_AppendPrefixCPtrSuffix(a1, a2, v8, a4);
}

uint64_t LDOString_AppendPrefixStringSuffix(uint64_t a1, char *__s, char *a3, char *a4)
{
  if (a3) {
    a3 = (char *)LHString_BorrowCPtr((uint64_t)a3);
  }

  return __LDOString_AppendPrefixCPtrSuffix(a1, __s, a3, a4);
}

uint64_t LDOString_AppendPrefixU32Suffix(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v8 = 0;
  uint64_t v9 = 0;
  LH_utoa(a3, v8, 0xAu);
  return __LDOString_AppendPrefixCPtrSuffix(a1, a2, v8, a4);
}

uint64_t LDOString_AppendString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const char *)LHString_BorrowCPtr(a2);

  return LHString_Append(a1, v3);
}

uint64_t LDOString_BorrowAllocator(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t LDOString_CompareTo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const char *)LHString_BorrowCPtr(a1);
  uint64_t v4 = (const char *)LHString_BorrowCPtr(a2);

  return cstdlib_strcmp(v3, v4);
}

uint64_t LDOString_CompareToCPtr(uint64_t a1, const char *a2)
{
  uint64_t v3 = (const char *)LHString_BorrowCPtr(a1);

  return cstdlib_strcmp(v3, a2);
}

uint64_t LDOString_ComputeCPtrLength(const char *a1, int a2, _DWORD *a3)
{
  if (a1)
  {
    *a3 = cstdlib_strlen(a1);
    return 0;
  }
  if (a2 == 1)
  {
    *a3 = 0;
    return 0;
  }

  return err_GenerateErrorArg();
}

unsigned __int8 *LDOString_ConvertToU32(uint64_t a1)
{
  uint64_t result = (unsigned __int8 *)LHString_BorrowCPtr(a1);
  if (result)
  {
    return (unsigned __int8 *)cstdlib_atoi(result);
  }
  return result;
}

uint64_t LDOString_FreeAndDestroyLDOStringVector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v4 < *(void *)(a2 + 16))
  {
    do
    {
      uint64_t v5 = *v4++;
      OOC_PlacementDeleteObject(a1, v5);
    }
    while ((unint64_t)v4 < *(void *)(a2 + 16));
    uint64_t v4 = *(uint64_t **)(a2 + 8);
  }
  *(_DWORD *)a2 = 0;
  if (v4)
  {
    OOCAllocator_Free(a1, (uint64_t)v4);
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a2 + 16) = 0;
  return 0;
}

BOOL LDOString_IsValidUTF8(char *__s, unint64_t a2)
{
  if (a2)
  {
    BOOL v3 = a2 >= (unint64_t)__s;
    unsigned int v4 = a2 - __s;
    if (!v3 || !v4) {
      return 1;
    }
    return utf8_CheckValid((uint64_t)__s, v4) == 1;
  }
  if (__s)
  {
    unsigned int v4 = cstdlib_strlen(__s);
    if (v4) {
      return utf8_CheckValid((uint64_t)__s, v4) == 1;
    }
  }
  else if (err_GenerateErrorArg())
  {
    return 0;
  }
  return 1;
}

uint64_t LDOString_ReplaceSubstring(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  uint64_t v8 = (char *)LHString_BorrowCPtr(a1);
  uint64_t v9 = LDOString_ValidateIndicesCPtr(v8, a2, a3, 1, (_DWORD *)&v17 + 1, (unsigned int *)&v17, 0);
  if (!v9)
  {
    uint64_t v9 = LDOString_ConFromString(v16, *(void *)(a1 + 24), a1);
    if (!v9)
    {
      uint64_t v9 = LDOString_ConFromStringSubstring(v15, *(void *)(a1 + 24), a1, &v17, 0);
      if (v9)
      {
LABEL_11:
        (*(void (**)(_OWORD *))(*(void *)&v16[0] + 16))(v16);
        return v9;
      }
      uint64_t v10 = (char *)LHString_BorrowCPtr((uint64_t)v16);
      if (LDOString_IsValidUTF8(v10, (unint64_t)&v10[HIDWORD(v17)]))
      {
        uint64_t v9 = LHString_SetContentFromNCPtr(a1, v10, HIDWORD(v17));
        if (v9) {
          goto LABEL_10;
        }
        uint64_t v11 = (const char *)LHString_BorrowCPtr(a4);
        uint64_t v9 = LHString_Append(a1, v11);
        if (v9) {
          goto LABEL_10;
        }
        uint64_t v12 = (const char *)LHString_BorrowCPtr((uint64_t)v15);
        uint64_t ErrorArg = LHString_Append(a1, v12);
      }
      else
      {
        uint64_t ErrorArg = err_GenerateErrorArg();
      }
      uint64_t v9 = ErrorArg;
LABEL_10:
      (*(void (**)(_OWORD *))(*(void *)&v15[0] + 16))(v15);
      goto LABEL_11;
    }
  }
  return v9;
}

uint64_t LDOString_ValidateIndices(uint64_t a1, _DWORD *a2, unsigned int *a3, int a4, _DWORD *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v13 = (char *)LHString_BorrowCPtr(a1);

  return LDOString_ValidateIndicesCPtr(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t LDOString_SetContentFromStringSubstring(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int *a4)
{
  uint64_t v11 = 0;
  uint64_t v8 = (char *)LHString_BorrowCPtr(a2);
  uint64_t result = LDOString_ValidateIndicesCPtr(v8, a3, a4, 1, (_DWORD *)&v11 + 1, (unsigned int *)&v11, 0);
  if (!result)
  {
    uint64_t v10 = LHString_BorrowCPtr(a2);
    return LHString_SetContentFromNCPtr(a1, (const char *)(v10 + HIDWORD(v11)), (int)v11 - HIDWORD(v11));
  }
  return result;
}

size_t LDOString_SplitEx(uint64_t a1, const char *a2, unsigned int *a3)
{
  unsigned int v28 = 0;
  uint64_t v26 = 0;
  uint64_t __src = 0;
  uint64_t v6 = (const char *)LHString_BorrowCPtr(a1);
  size_t result = cstdlib_strlen(v6);
  if (result)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    size_t result = LHString_BorrowCPtr(a1);
    if (result)
    {
      uint64_t v9 = (char *)result;
      while (1)
      {
        uint64_t v10 = cstdlib_strstr(v9, a2);
        uint64_t v11 = v10;
        HIDWORD(v26) = 0;
        if (v10)
        {
          LODWORD(v26) = v10 - v9;
          uint64_t v12 = (unsigned int *)&v26;
          uint64_t v13 = v8;
          uint64_t v14 = v8;
          unsigned int v15 = v9;
        }
        else
        {
          uint64_t v13 = v8;
          uint64_t v14 = v8;
          unsigned int v15 = v9;
          uint64_t v12 = 0;
        }
        size_t result = PNEW_LDOString_ConFromCPtrSubstring(v13, v14, v15, (_DWORD *)&v26 + 1, v12, &__src);
        unsigned int v28 = result;
        if (result) {
          break;
        }
        uint64_t v16 = (const char *)LHString_BorrowCPtr(__src);
        if (cstdlib_strlen(v16))
        {
          uint64_t v18 = *((void *)a3 + 1);
          uint64_t v17 = (char *)*((void *)a3 + 2);
          unint64_t v19 = (unint64_t)&v17[-v18];
          unsigned int v20 = ((unint64_t)&v17[-v18] >> 3) + 1;
          unsigned int v21 = *a3;
          if (v20 > *a3)
          {
            unsigned int v22 = 2 * v21;
            unsigned int v23 = v21 + 1000000;
            if (v22 < v23) {
              unsigned int v23 = v22;
            }
            if (v23 > v20) {
              unsigned int v20 = v23;
            }
            if (v20 <= 8) {
              unsigned int v24 = 8;
            }
            else {
              unsigned int v24 = v20;
            }
            uint64_t v25 = OOCAllocator_Realloc(v8, v18, 8 * v24, &v28);
            *((void *)a3 + 1) = v25;
            size_t result = v28;
            if (v28) {
              return result;
            }
            *a3 = v24;
            uint64_t v17 = (char *)(v25 + (v19 & 0x7FFFFFFF8));
            *((void *)a3 + 2) = v17;
          }
          cstdlib_memcpy(v17, &__src, 8uLL);
          *((void *)a3 + 2) += 8;
          uint64_t v9 = v11 + 1;
          if (!v11) {
            return v28;
          }
        }
        else
        {
          size_t result = OOC_PlacementDeleteObject(v8, __src);
          unsigned int v28 = result;
          if (v11) {
            uint64_t v9 = v11 + 1;
          }
          else {
            uint64_t v9 = 0;
          }
          if (result || !v11) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t PNEW_LDOString_ConFromCPtrSubstring(uint64_t a1, uint64_t a2, char *a3, _DWORD *a4, unsigned int *a5, void *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = (void *)OOCAllocator_Malloc(a1, 32, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = LDOString_ConFromCPtrSubstring(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

uint64_t PNEW_LDOString_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 32, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = LHString_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *uint64_t v6 = &__LDOString;
      *a3 = v6;
    }
  }
  return result;
}

uint64_t PNEW_LDOString_ConFromCPtr(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  unsigned int v10 = 0;
  unsigned int v8 = (void *)OOCAllocator_Malloc(a1, 32, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = LDOString_ConFromCPtr(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

uint64_t PNEW_LDOString_ConFromString(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v10 = 0;
  unsigned int v8 = (void *)OOCAllocator_Malloc(a1, 32, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = LDOString_ConFromString(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

uint64_t PNEW_LDOString_ConFromStringSubstring(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5, void *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = (void *)OOCAllocator_Malloc(a1, 32, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = LDOString_ConFromStringSubstring(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetLDOStringClass()
{
  return &__LDOString;
}

uint64_t LDOLabelSet_Con(uint64_t a1, uint64_t a2)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)a1 = &__LDOLabelSet;
    *(void *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t LDOLabelSet_Des(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  if (!v2)
  {
    *(_DWORD *)(a1 + 16) = 0;
LABEL_10:
    *(void *)(a1 + 32) = 0;
    return Object_Des();
  }
  if ((unint64_t)v2 >= *(void *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 16) = 0;
LABEL_9:
    OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v2);
    *(void *)(a1 + 24) = 0;
    goto LABEL_10;
  }
  while (1)
  {
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), *v2);
    if (result) {
      return result;
    }
    if ((unint64_t)++v2 >= *(void *)(a1 + 32))
    {
      uint64_t v2 = *(uint64_t **)(a1 + 24);
      *(_DWORD *)(a1 + 16) = 0;
      if (v2) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
}

uint64_t LDOLabelSet_AddLabel(uint64_t a1, uint64_t a2)
{
  uint64_t __src = a2;
  unsigned int v14 = 0;
  BOOL v3 = *(char **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = (unint64_t)&v3[-v4];
  unsigned int v6 = ((unint64_t)&v3[-v4] >> 3) + 1;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (v6 <= v7) {
    goto LABEL_11;
  }
  unsigned int v8 = 2 * v7;
  unsigned int v9 = v7 + 1000000;
  if (v8 < v9) {
    unsigned int v9 = v8;
  }
  if (v9 > v6) {
    unsigned int v6 = v9;
  }
  if (v6 <= 8) {
    unsigned int v10 = 8;
  }
  else {
    unsigned int v10 = v6;
  }
  uint64_t v11 = OOCAllocator_Realloc(*(void *)(a1 + 8), v4, 8 * v10, &v14);
  *(void *)(a1 + 24) = v11;
  uint64_t v12 = v14;
  if (!v14)
  {
    *(_DWORD *)(a1 + 16) = v10;
    BOOL v3 = (char *)(v11 + (v5 & 0x7FFFFFFF8));
    *(void *)(a1 + 32) = v3;
LABEL_11:
    cstdlib_memcpy(v3, &__src, 8uLL);
    *(void *)(a1 + 32) += 8;
    return v14;
  }
  return v12;
}

uint64_t LDOLabelSet_ComputeContainedLabels(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, unsigned int *a5)
{
  uint64_t result = 0;
  unsigned int v31 = 0;
  *a5 = 0;
  *((void *)a5 + 1) = 0;
  unsigned int v7 = (uint64_t *)(a5 + 2);
  *((void *)a5 + 2) = 0;
  unsigned int v8 = (uint64_t *)a1[3];
  if ((unint64_t)v8 < a1[4])
  {
    do
    {
      uint64_t v30 = *v8;
      unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v30);
      unsigned int AbsoluteTo = LDOLabel_GetAbsoluteTo(v30);
      BOOL v16 = AbsoluteFrom >= a2 && AbsoluteTo <= a3;
      BOOL v18 = AbsoluteFrom == a2 && AbsoluteTo == a3;
      if (a4 == 1) {
        BOOL v16 = v18;
      }
      if ((AbsoluteFrom != a3 || *(_DWORD *)(v30 + 112) != 1) && v16)
      {
        uint64_t v22 = *((void *)a5 + 1);
        unsigned int v21 = (char *)*((void *)a5 + 2);
        unint64_t v23 = (unint64_t)&v21[-v22];
        unsigned int v24 = ((unint64_t)&v21[-v22] >> 3) + 1;
        unsigned int v25 = *a5;
        if (v24 > *a5)
        {
          unsigned int v26 = 2 * v25;
          unsigned int v27 = v25 + 1000000;
          if (v26 < v27) {
            unsigned int v27 = v26;
          }
          if (v27 > v24) {
            unsigned int v24 = v27;
          }
          if (v24 <= 8) {
            unsigned int v28 = 8;
          }
          else {
            unsigned int v28 = v24;
          }
          uint64_t v29 = OOCAllocator_Realloc(a1[1], v22, 8 * v28, &v31);
          *unsigned int v7 = v29;
          uint64_t result = v31;
          if (v31) {
            return result;
          }
          *a5 = v28;
          unsigned int v21 = (char *)(v29 + (v23 & 0x7FFFFFFF8));
          *((void *)a5 + 2) = v21;
        }
        cstdlib_memcpy(v21, &v30, 8uLL);
        *((void *)a5 + 2) += 8;
      }
      ++v8;
    }
    while ((unint64_t)v8 < a1[4]);
    return v31;
  }
  return result;
}

uint64_t LDOLabelSet_ComputeOverlappingLabels(uint64_t *a1, unsigned int a2, unsigned int a3, int a4, unsigned int *a5)
{
  uint64_t result = 0;
  unsigned int v33 = 0;
  *a5 = 0;
  *((void *)a5 + 1) = 0;
  unsigned int v7 = (uint64_t *)(a5 + 2);
  *((void *)a5 + 2) = 0;
  unsigned int v8 = (uint64_t *)a1[3];
  if ((unint64_t)v8 < a1[4])
  {
    while (1)
    {
      uint64_t v32 = *v8;
      unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v32);
      unsigned int AbsoluteTo = LDOLabel_GetAbsoluteTo(v32);
      BOOL v16 = AbsoluteFrom > a2 || AbsoluteTo < a3;
      if (a4 == 1)
      {
        if (!v16) {
          goto LABEL_30;
        }
      }
      else
      {
        BOOL v18 = AbsoluteFrom >= a3 || AbsoluteTo < a3;
        if (AbsoluteTo > a2 && AbsoluteFrom <= a2 || !v18) {
          goto LABEL_30;
        }
        char v21 = !v16;
        if (AbsoluteFrom >= a2 && AbsoluteTo <= a3) {
          char v21 = 1;
        }
        if (v21)
        {
LABEL_30:
          uint64_t v24 = *((void *)a5 + 1);
          unint64_t v23 = (char *)*((void *)a5 + 2);
          unint64_t v25 = (unint64_t)&v23[-v24];
          unsigned int v26 = ((unint64_t)&v23[-v24] >> 3) + 1;
          unsigned int v27 = *a5;
          if (v26 > *a5)
          {
            unsigned int v28 = 2 * v27;
            unsigned int v29 = v27 + 1000000;
            if (v28 < v29) {
              unsigned int v29 = v28;
            }
            if (v29 > v26) {
              unsigned int v26 = v29;
            }
            if (v26 <= 8) {
              unsigned int v30 = 8;
            }
            else {
              unsigned int v30 = v26;
            }
            uint64_t v31 = OOCAllocator_Realloc(a1[1], v24, 8 * v30, &v33);
            *unsigned int v7 = v31;
            uint64_t result = v33;
            if (v33) {
              return result;
            }
            *a5 = v30;
            unint64_t v23 = (char *)(v31 + (v25 & 0x7FFFFFFF8));
            *((void *)a5 + 2) = v23;
          }
          cstdlib_memcpy(v23, &v32, 8uLL);
          *((void *)a5 + 2) += 8;
        }
      }
      if ((unint64_t)++v8 >= a1[4]) {
        return v33;
      }
    }
  }
  return result;
}

uint64_t LDOLabelSet_FreeLDOLabelVector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    OOCAllocator_Free(*(void *)(a1 + 8), v3);
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a2 + 16) = 0;
  return 0;
}

uint64_t LDOLabelSet_GetNumberLabels(uint64_t a1)
{
  return (*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
}

uint64_t LDOLabelSet_MergeLabels(uint64_t a1, uint64_t a2, char *a3, char *a4, void *a5)
{
  uint64_t v20 = 0;
  unsigned int v6 = *(uint64_t **)(a2 + 8);
  if (((*(void *)(a2 + 16) - (void)v6) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v9 = *v6;
    long long v18 = *(_OWORD *)(v9 + 64);
    uint64_t v19 = *(void *)(v9 + 80);
    PNEW_LDOLabel_Con(*(void *)(a1 + 8), *(void *)(a1 + 8), a3, a4, (uint64_t)&v18, &v20);
    uint64_t v11 = v10;
    if (!v10)
    {
      for (unsigned int i = *(void **)(a2 + 8); (unint64_t)i < *(void *)(a2 + 16); ++i)
      {
        uint64_t v13 = LDOLabel_AddNodes(v20, *i + 64);
        if (v13) {
          return v13;
        }
      }
      uint64_t v15 = LDOLabelSet_AddLabel(a1, v20);
      if (v15)
      {
        uint64_t v11 = v15;
        if (v20) {
          OOC_PlacementDeleteObject(*(void *)(a1 + 8), v20);
        }
      }
      else
      {
        for (j = *(uint64_t ***)(a2 + 8); (unint64_t)j < *(void *)(a2 + 16); ++j)
        {
          uint64_t v17 = *j;
          uint64_t v13 = LDOObject_CopyAttributes(v20, *j);
          if (v13) {
            return v13;
          }
          uint64_t v13 = LDOLabelSet_RemoveLabel(a1, (uint64_t)v17);
          if (v13) {
            return v13;
          }
        }
        uint64_t v11 = 0;
        if (a5) {
          *a5 = v20;
        }
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    *a5 = 0;
  }
  return v11;
}

uint64_t LDOLabelSet_RemoveLabel(uint64_t a1, uint64_t a2)
{
  unsigned int v15 = 0;
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  if (v4 >= v5) {
    return OOC_PlacementDeleteObject(*(void *)(a1 + 8), a2);
  }
  unsigned int v6 = 0;
  unint64_t v7 = *(void *)(a1 + 24);
  while (*(_DWORD *)(a2 + 16) != *(_DWORD *)(*(void *)v7 + 16))
  {
    v7 += 8;
    ++v6;
    if (v7 >= v5) {
      return OOC_PlacementDeleteObject(*(void *)(a1 + 8), a2);
    }
  }
  int v8 = ((v5 - v4) >> 3) - 1;
  cstdlib_memmove((void *)(v4 + 8 * v6), (const void *)(v4 + 8 * v6 + 8), 8 * (v8 - v6));
  uint64_t v9 = *(void *)(a1 + 32) - 8;
  *(void *)(a1 + 32) = v9;
  if (*(_DWORD *)(a1 + 16) < (3 * v8)) {
    return OOC_PlacementDeleteObject(*(void *)(a1 + 8), a2);
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if ((2 * v8) <= 8) {
    unsigned int v11 = 8;
  }
  else {
    unsigned int v11 = 2 * v8;
  }
  uint64_t v12 = OOCAllocator_Realloc(*(void *)(a1 + 8), *(void *)(a1 + 24), 8 * v11, &v15);
  *(void *)(a1 + 24) = v12;
  uint64_t v13 = v15;
  if (!v15)
  {
    *(_DWORD *)(a1 + 16) = v11;
    *(void *)(a1 + 32) = v12 + ((v9 - v10) & 0x7FFFFFFF8);
    return OOC_PlacementDeleteObject(*(void *)(a1 + 8), a2);
  }
  return v13;
}

uint64_t LDOLabelSet_ToString(uint64_t *a1, uint64_t *a2)
{
  unsigned int v15 = 0;
  uint64_t v4 = PNEW_LDOString_Con(a1[1], a1[1], a2);
  if (!v4)
  {
    unint64_t v5 = (void *)a1[3];
    if ((unint64_t)v5 >= a1[4])
    {
      return 0;
    }
    else
    {
      unsigned int v6 = 0;
      uint64_t v7 = *a2;
      while (1)
      {
        uint64_t appended = LDOString_AppendPrefixU32Suffix(v7, "  label #", v6, "\n");
        if (appended) {
          break;
        }
        uint64_t v9 = (*(uint64_t (**)(void, char **))(*(void *)*v5 + 24))(*v5, &v15);
        uint64_t v10 = v15;
        if (v9 || (uint64_t v9 = LDOString_AppendPrefixStringSuffix(v7, 0, v15, "\n"), v10 = v15, v9))
        {
          uint64_t v4 = v9;
          if (!v10) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
        if (v15)
        {
          uint64_t v11 = LDOString_BorrowAllocator((uint64_t)v15);
          OOC_PlacementDeleteObject(v11, (uint64_t)v15);
          unsigned int v15 = 0;
        }
        ++v6;
        if ((unint64_t)++v5 >= a1[4]) {
          return 0;
        }
      }
      uint64_t v4 = appended;
      uint64_t v10 = v15;
      if (v15)
      {
LABEL_12:
        uint64_t v12 = LDOString_BorrowAllocator((uint64_t)v10);
        OOC_PlacementDeleteObject(v12, (uint64_t)v15);
        unsigned int v15 = 0;
      }
LABEL_13:
      if (v7)
      {
        uint64_t v13 = LDOString_BorrowAllocator(v7);
        OOC_PlacementDeleteObject(v13, v7);
      }
    }
  }
  return v4;
}

uint64_t LDOLabelSet_UpdateRegularLabels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  int v9 = 0;
  unint64_t v5 = *(uint64_t **)(a1 + 24);
  if ((unint64_t)v5 < *(void *)(a1 + 32))
  {
    do
    {
      uint64_t v8 = *v5;
      if (*(_DWORD *)(*v5 + 112) != 1)
      {
        int v10 = 0;
        uint64_t result = LDOLabel_ContainsAllNodes(v8, a2, &v10);
        if (result) {
          return result;
        }
        if (v10 == 1)
        {
          uint64_t result = LDOLabel_RemoveNodes(v8, a2);
          if (result) {
            return result;
          }
          uint64_t result = LDOLabel_AddNodes(v8, a3);
          if (result) {
            return result;
          }
        }
        else
        {
          uint64_t result = LDOLabel_ContainsAtLeastOneNode(v8, a2, &v9);
          if (result) {
            return result;
          }
          if (v9 == 1)
          {
            uint64_t result = LDOLabel_RemoveNodes(v8, a2);
            if (result) {
              return result;
            }
            uint64_t result = LDOLabel_Invalidate(v8);
            if (result) {
              return result;
            }
          }
        }
      }
      ++v5;
    }
    while ((unint64_t)v5 < *(void *)(a1 + 32));
    return 0;
  }
  return result;
}

uint64_t LDOLabelSet_UpdateSpan(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if ((unint64_t)v3 >= *(void *)(a1 + 32)) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = *v3;
    if (*(_DWORD *)(*v3 + 104) == 1 && *(_DWORD *)(v7 + 112) == 1 && LDOLabel_GetAbsoluteTo(v7) > a2)
    {
      uint64_t result = LDOLabel_UpdateSpanLength((_DWORD *)*v3, a2, a3);
      if (result) {
        break;
      }
    }
    if ((unint64_t)++v3 >= *(void *)(a1 + 32)) {
      return 0;
    }
  }
  return result;
}

uint64_t PNEW_LDOLabelSet_Con(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = OOCAllocator_Malloc(a1, 40, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = Object_Con((void *)v6);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *(void *)uint64_t v6 = &__LDOLabelSet;
      *(void *)(v6 + 8) = a2;
      *(_DWORD *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
      *a3 = v6;
    }
  }
  return result;
}

void *GetLDOLabelSetClass()
{
  return &__LDOLabelSet;
}

uint64_t LDOTreeNodeMappingItem_Con(uint64_t a1, uint64_t a2)
{
  uint64_t result = LDOObject_Con(a1, a2);
  if (!result)
  {
    *(void *)a1 = &__LDOTreeNodeMappingItem;
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  return result;
}

uint64_t LDOTreeNodeMappingItem_ConEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t appended = LDOObject_Con(a1, a2);
  if (appended) {
    goto LABEL_11;
  }
  *(void *)a1 = &__LDOTreeNodeMappingItem;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t appended = LDOTreeNodeMappingItem_AppendOldNodes(a1, a3);
  if (appended || (uint64_t appended = LDOTreeNodeMappingItem_AppendNewNodes(a1, a4), appended))
  {
LABEL_11:
    if (*(void *)(a1 + 80))
    {
      *(_DWORD *)(a1 + 72) = 0;
      uint64_t v8 = LDOObject_BorrowAllocator(a1);
      OOCAllocator_Free(v8, *(void *)(a1 + 80));
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
    }
    if (*(void *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 96) = 0;
      uint64_t v9 = LDOObject_BorrowAllocator(a1);
      OOCAllocator_Free(v9, *(void *)(a1 + 104));
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
  }
  return appended;
}

uint64_t LDOTreeNodeMappingItem_AppendOldNodes(uint64_t a1, uint64_t a2)
{
  unsigned int v18 = 0;
  uint64_t v4 = *(char **)(a1 + 88);
  unint64_t v5 = (unint64_t)&v4[-*(void *)(a1 + 80)];
  uint64_t v7 = a2 + 8;
  uint64_t v6 = *(const void **)(a2 + 8);
  unint64_t v8 = *(void *)(v7 + 8) - (void)v6;
  unsigned int v9 = (v8 >> 3) + (v5 >> 3);
  unsigned int v10 = *(_DWORD *)(a1 + 72);
  if (v9 <= v10) {
    goto LABEL_11;
  }
  unsigned int v11 = 2 * v10;
  unsigned int v12 = v10 + 1000000;
  if (v11 >= v12) {
    unsigned int v11 = v12;
  }
  if (v11 <= v9) {
    unsigned int v11 = v9;
  }
  if (v11 <= 8) {
    unsigned int v13 = 8;
  }
  else {
    unsigned int v13 = v11;
  }
  uint64_t v14 = LDOObject_BorrowAllocator(a1);
  uint64_t v15 = OOCAllocator_Realloc(v14, *(void *)(a1 + 80), 8 * v13, &v18);
  *(void *)(a1 + 80) = v15;
  uint64_t v16 = v18;
  if (!v18)
  {
    *(_DWORD *)(a1 + 72) = v13;
    uint64_t v4 = (char *)(v15 + (v5 & 0x7FFFFFFF8));
    *(void *)(a1 + 88) = v4;
    uint64_t v6 = *(const void **)(a2 + 8);
    unint64_t v8 = *(void *)(a2 + 16) - (void)v6;
LABEL_11:
    cstdlib_memcpy(v4, v6, v8 & 0x7FFFFFFF8);
    *(void *)(a1 + 88) += (*(void *)(a2 + 16) - *(void *)(a2 + 8)) & 0x7FFFFFFF8;
    *(void *)(a1 + 64) = 0;
    return v18;
  }
  return v16;
}

uint64_t LDOTreeNodeMappingItem_AppendNewNodes(uint64_t a1, uint64_t a2)
{
  unsigned int v18 = 0;
  uint64_t v4 = *(char **)(a1 + 112);
  unint64_t v5 = (unint64_t)&v4[-*(void *)(a1 + 104)];
  uint64_t v7 = a2 + 8;
  uint64_t v6 = *(const void **)(a2 + 8);
  unint64_t v8 = *(void *)(v7 + 8) - (void)v6;
  unsigned int v9 = (v8 >> 3) + (v5 >> 3);
  unsigned int v10 = *(_DWORD *)(a1 + 96);
  if (v9 <= v10) {
    goto LABEL_11;
  }
  unsigned int v11 = 2 * v10;
  unsigned int v12 = v10 + 1000000;
  if (v11 >= v12) {
    unsigned int v11 = v12;
  }
  if (v11 <= v9) {
    unsigned int v11 = v9;
  }
  if (v11 <= 8) {
    unsigned int v13 = 8;
  }
  else {
    unsigned int v13 = v11;
  }
  uint64_t v14 = LDOObject_BorrowAllocator(a1);
  uint64_t v15 = OOCAllocator_Realloc(v14, *(void *)(a1 + 104), 8 * v13, &v18);
  *(void *)(a1 + 104) = v15;
  uint64_t v16 = v18;
  if (!v18)
  {
    *(_DWORD *)(a1 + 96) = v13;
    uint64_t v4 = (char *)(v15 + (v5 & 0x7FFFFFFF8));
    *(void *)(a1 + 112) = v4;
    uint64_t v6 = *(const void **)(a2 + 8);
    unint64_t v8 = *(void *)(a2 + 16) - (void)v6;
LABEL_11:
    cstdlib_memcpy(v4, v6, v8 & 0x7FFFFFFF8);
    *(void *)(a1 + 112) += (*(void *)(a2 + 16) - *(void *)(a2 + 8)) & 0x7FFFFFFF8;
    return v18;
  }
  return v16;
}

uint64_t LDOTreeNodeMappingItem_ConUnmappedNewNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t appended = LDOObject_Con(a1, a2);
  if (appended) {
    goto LABEL_10;
  }
  *(void *)a1 = &__LDOTreeNodeMappingItem;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 64) = a4;
  uint64_t appended = LDOTreeNodeMappingItem_AppendNewNode(a1, a3);
  if (appended)
  {
LABEL_10:
    if (*(void *)(a1 + 80))
    {
      *(_DWORD *)(a1 + 72) = 0;
      uint64_t v8 = LDOObject_BorrowAllocator(a1);
      OOCAllocator_Free(v8, *(void *)(a1 + 80));
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
    }
    if (*(void *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 96) = 0;
      uint64_t v9 = LDOObject_BorrowAllocator(a1);
      OOCAllocator_Free(v9, *(void *)(a1 + 104));
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
    }
  }
  return appended;
}

uint64_t LDOTreeNodeMappingItem_AppendNewNode(uint64_t a1, uint64_t a2)
{
  uint64_t __src = a2;
  unsigned int v14 = 0;
  uint64_t v3 = *(char **)(a1 + 112);
  unint64_t v4 = (unint64_t)&v3[-*(void *)(a1 + 104)];
  unsigned int v5 = (v4 >> 3) + 1;
  unsigned int v6 = *(_DWORD *)(a1 + 96);
  if (v5 <= v6) {
    goto LABEL_11;
  }
  unsigned int v7 = 2 * v6;
  unsigned int v8 = v6 + 1000000;
  if (v7 < v8) {
    unsigned int v8 = v7;
  }
  if (v8 > v5) {
    unsigned int v5 = v8;
  }
  if (v5 <= 8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = v5;
  }
  uint64_t v10 = LDOObject_BorrowAllocator(a1);
  uint64_t v11 = OOCAllocator_Realloc(v10, *(void *)(a1 + 104), 8 * v9, &v14);
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = v14;
  if (!v14)
  {
    *(_DWORD *)(a1 + 96) = v9;
    uint64_t v3 = (char *)(v11 + (v4 & 0x7FFFFFFF8));
    *(void *)(a1 + 112) = v3;
LABEL_11:
    cstdlib_memcpy(v3, &__src, 8uLL);
    *(void *)(a1 + 112) += 8;
    return v14;
  }
  return v12;
}

uint64_t LDOTreeNodeMappingItem_Des(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 80);
  if (*(void *)(a1 + 80))
  {
    *(_DWORD *)(a1 + 72) = 0;
    uint64_t v3 = LDOObject_BorrowAllocator(a1);
    OOCAllocator_Free(v3, *(void *)(a1 + 80));
    *uint64_t v2 = 0;
    v2[1] = 0;
  }
  if (*(void *)(a1 + 104))
  {
    *(_DWORD *)(a1 + 96) = 0;
    uint64_t v4 = LDOObject_BorrowAllocator(a1);
    OOCAllocator_Free(v4, *(void *)(a1 + 104));
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }

  return LDOObject_Des(a1);
}

uint64_t LDOTreeNodeMappingItem_AppendOldNode(uint64_t a1, uint64_t a2)
{
  uint64_t __src = a2;
  unsigned int v14 = 0;
  uint64_t v3 = *(char **)(a1 + 88);
  unint64_t v4 = (unint64_t)&v3[-*(void *)(a1 + 80)];
  unsigned int v5 = (v4 >> 3) + 1;
  unsigned int v6 = *(_DWORD *)(a1 + 72);
  if (v5 <= v6) {
    goto LABEL_11;
  }
  unsigned int v7 = 2 * v6;
  unsigned int v8 = v6 + 1000000;
  if (v7 < v8) {
    unsigned int v8 = v7;
  }
  if (v8 > v5) {
    unsigned int v5 = v8;
  }
  if (v5 <= 8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = v5;
  }
  uint64_t v10 = LDOObject_BorrowAllocator(a1);
  uint64_t v11 = OOCAllocator_Realloc(v10, *(void *)(a1 + 80), 8 * v9, &v14);
  *(void *)(a1 + 80) = v11;
  uint64_t v12 = v14;
  if (!v14)
  {
    *(_DWORD *)(a1 + 72) = v9;
    uint64_t v3 = (char *)(v11 + (v4 & 0x7FFFFFFF8));
    *(void *)(a1 + 88) = v3;
LABEL_11:
    cstdlib_memcpy(v3, &__src, 8uLL);
    *(void *)(a1 + 88) += 8;
    *(void *)(a1 + 64) = 0;
    return v14;
  }
  return v12;
}

uint64_t LDOTreeNodeMappingItem_GetParentNode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (((*(void *)(a1 + 88) - v1) & 0x7FFFFFFF8) != 0) {
    return *(void *)(*(void *)v1 + 64);
  }
  else {
    return 0;
  }
}

size_t LDOTreeNodeMappingItem_GetPositions(void *a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  unint64_t v4 = (uint64_t *)a1[10];
  if (((a1[11] - (void)v4) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v5 = *v4;
    size_t result = LDOTreeNode_ComputeAbsoluteFrom(*v4, a2);
    if (result) {
      return result;
    }
    unsigned int v7 = (_DWORD *)(v5 + 104);
    goto LABEL_7;
  }
  size_t result = a1[8];
  if (result)
  {
    size_t result = LDOTreeNode_ComputeAbsoluteTo(result, a2);
    if (!result)
    {
      unsigned int v7 = (_DWORD *)(a1[8] + 108);
LABEL_7:
      size_t result = 0;
      *a3 = *v7;
    }
  }
  return result;
}

BOOL LDOTreeNodeMappingItem_IsUnmappedNewNode(uint64_t a1)
{
  return ((*(void *)(a1 + 88) - *(void *)(a1 + 80)) & 0x7FFFFFFF8) == 0;
}

uint64_t PNEW_LDOTreeNodeMappingItem_Con(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = OOCAllocator_Malloc(a1, 120, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = LDOObject_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *(void *)uint64_t v6 = &__LDOTreeNodeMappingItem;
      *(_DWORD *)(v6 + 72) = 0;
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 80) = 0;
      *(void *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 96) = 0;
      *(void *)(v6 + 104) = 0;
      *(void *)(v6 + 112) = 0;
      *a3 = v6;
    }
  }
  return result;
}

uint64_t PNEW_LDOTreeNodeMappingItem_ConEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v12 = 0;
  uint64_t v10 = OOCAllocator_Malloc(a1, 120, &v12);
  uint64_t result = v12;
  if (!v12)
  {
    uint64_t result = LDOTreeNodeMappingItem_ConEx(v10, a2, a3, a4);
    unsigned int v12 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v10);
      *a5 = 0;
      return v12;
    }
    else
    {
      *a5 = v10;
    }
  }
  return result;
}

uint64_t PNEW_LDOTreeNodeMappingItem_ConUnmappedNewNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v12 = 0;
  uint64_t v10 = OOCAllocator_Malloc(a1, 120, &v12);
  uint64_t result = v12;
  if (!v12)
  {
    uint64_t result = LDOTreeNodeMappingItem_ConUnmappedNewNode(v10, a2, a3, a4);
    unsigned int v12 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v10);
      *a5 = 0;
      return v12;
    }
    else
    {
      *a5 = v10;
    }
  }
  return result;
}

void *GetLDOTreeNodeMappingItemClass()
{
  return &__LDOTreeNodeMappingItem;
}

uint64_t LDOObject_Con(uint64_t a1, uint64_t a2)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)a1 = &__LDOObject;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 16) = a1;
    *(_DWORD *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  return result;
}

uint64_t LDOObject_Des(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), v2);
    if (result) {
      return result;
    }
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), v4);
    if (result) {
      return result;
    }
    *(void *)(a1 + 56) = 0;
  }
  unint64_t v5 = *(void *)(a1 + 32);
  if (!v5)
  {
    *(_DWORD *)(a1 + 24) = 0;
LABEL_18:
    *(void *)(a1 + 40) = 0;
    return Object_Des();
  }
  if (v5 >= *(void *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 24) = 0;
LABEL_17:
    OOCAllocator_Free(*(void *)(a1 + 8), v5);
    *(void *)(a1 + 32) = 0;
    goto LABEL_18;
  }
  while (1)
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 24);
    uint64_t result = __LDOObject_DeallocateValue(a1, (int *)&v6);
    if (result) {
      return result;
    }
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), *(void *)v5);
    if (result) {
      return result;
    }
    v5 += 32;
    if (v5 >= *(void *)(a1 + 40))
    {
      unint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)(a1 + 24) = 0;
      if (v5) {
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
}

uint64_t __LDOObject_DeallocateValue(uint64_t a1, int *a2)
{
  int v4 = *a2;
  if (*a2 == 2)
  {
    uint64_t v5 = *((void *)a2 + 2);
    if (!v5) {
      return 0;
    }
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), v5);
    if (result) {
      return result;
    }
    *((void *)a2 + 2) = 0;
    int v4 = *a2;
  }
  if (v4 != 3) {
    return 0;
  }
  uint64_t v7 = *((void *)a2 + 2);
  if (!v7) {
    return 0;
  }
  *(_DWORD *)uint64_t v7 = 0;
  if (*(void *)(v7 + 8))
  {
    OOCAllocator_Free(*(void *)(a1 + 8), *(void *)(v7 + 8));
    uint64_t v7 = *((void *)a2 + 2);
    *(void *)(v7 + 8) = 0;
  }
  *(void *)(v7 + 16) = 0;
  OOCAllocator_Free(*(void *)(a1 + 8), v7);
  uint64_t result = 0;
  *((void *)a2 + 2) = 0;
  return result;
}

uint64_t LDOObject_BorrowAllocator(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t LDOObject_CopyAttributes(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = a2[4];
  if (v2 >= a2[5]) {
    return 0;
  }
  while (1)
  {
    int v5 = *(_DWORD *)(v2 + 8);
    long long v6 = (char *)LHString_BorrowCPtr(*(void *)v2);
    switch(v5)
    {
      case 0:
        LODWORD(v17) = 0;
        int v18 = 0;
        uint64_t U32Attribute = LDOObject_GetU32Attribute(a2, v6, &v17, &v18);
        if (U32Attribute) {
          BOOL v8 = 0;
        }
        else {
          BOOL v8 = v17 == 1;
        }
        if (!v8) {
          goto LABEL_36;
        }
        LDOObject_SetU32Attribute(a1, v6, v18);
        break;
      case 1:
        LODWORD(v17) = 0;
        int v18 = 0;
        uint64_t U32Attribute = LDOObject_GetS32Attribute(a2, v6, &v17, &v18);
        if (U32Attribute) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v17 == 1;
        }
        if (!v10) {
          goto LABEL_36;
        }
        LDOObject_SetS32Attribute(a1, v6, v18);
        break;
      case 2:
        int v18 = 0;
        uint64_t v17 = 0;
        uint64_t U32Attribute = LDOObject_GetStringAttribute(a2, v6, &v18, (uint64_t *)&v17);
        if (U32Attribute) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v18 == 1;
        }
        if (!v11) {
          goto LABEL_36;
        }
        uint64_t v9 = LDOObject_SetStringAttribute(a1, v6, v17);
        break;
      case 3:
        int v18 = 0;
        uint64_t v17 = 0;
        unsigned int v16 = 0;
        uint64_t U32Attribute = LDOObject_GetListU32Attribute(a2, v6, &v18, (uint64_t *)&v17, &v16);
        unsigned int v12 = v17;
        if (U32Attribute) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v18 == 1;
        }
        if (v13) {
          uint64_t U32Attribute = LDOObject_SetListU32Attribute(a1, v6, v17, v16);
        }
        if (v12) {
          OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v12);
        }
        goto LABEL_36;
      case 4:
        LODWORD(v17) = 0;
        int v18 = 0;
        uint64_t U32Attribute = LDOObject_GetBoolAttribute(a2, v6, &v17, &v18);
        if (U32Attribute) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v17 == 1;
        }
        if (!v14) {
          goto LABEL_36;
        }
        LDOObject_SetBoolAttribute(a1, v6, v18);
        break;
      default:
        goto LABEL_37;
    }
    uint64_t U32Attribute = v9;
LABEL_36:
    if (U32Attribute) {
      return U32Attribute;
    }
LABEL_37:
    v2 += 32;
    if (v2 >= a2[5]) {
      return 0;
    }
  }
}

uint64_t LDOObject_GetAttributeType(uint64_t *a1, char *a2, int *a3)
{
  long long __b = 0u;
  long long v18 = 0u;
  uint64_t v16 = 0;
  cstdlib_memset(&__b, 0, 0x20uLL);
  uint64_t result = PNEW_LDOString_ConFromCPtr(a1[1], a1[1], a2, &v16);
  if (!result)
  {
    uint64_t v7 = a1[5] - a1[4];
    if (v7)
    {
      uint64_t v8 = 0;
      unint64_t v9 = v7 >> 5;
      do
      {
        unint64_t v10 = v9 >> 1;
        int v11 = LDOString_CompareTo(v16, *(void *)(a1[4] + 32 * v8 + 32 * (v9 >> 1)));
        if (v11 < 1)
        {
          if ((v11 & 0x80000000) == 0)
          {
            BOOL v14 = (long long *)(a1[4] + 32 * (v10 + v8));
            long long v15 = v14[1];
            long long __b = *v14;
            long long v18 = v15;
            int v12 = 1;
            goto LABEL_9;
          }
        }
        else
        {
          v8 += v10 + 1;
          unint64_t v10 = v9 - (v10 + 1);
        }
        unint64_t v9 = v10;
      }
      while (v10);
    }
    int v12 = 0;
LABEL_9:
    uint64_t result = OOC_PlacementDeleteObject(a1[1], v16);
    if (!result)
    {
      int v13 = DWORD2(__b);
      if (!v12) {
        int v13 = 5;
      }
      *a3 = v13;
    }
  }
  return result;
}

uint64_t LDOObject_GetBoolAttribute(uint64_t *a1, char *a2, _DWORD *a3, _DWORD *a4)
{
  long long v9 = xmmword_2206E1C70;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  uint64_t result = __LDOObject_GetAttributeMapItem(a1, a2, &v8, (uint64_t)&v9);
  if (!result)
  {
    *a3 = 0;
    if (v8) {
      BOOL v7 = v9 == 4;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *a3 = 1;
      *a4 = DWORD1(v9) == 1;
    }
  }
  return result;
}

uint64_t __LDOObject_GetAttributeMapItem(uint64_t *a1, char *a2, void *a3, uint64_t a4)
{
  memset(__b, 0, sizeof(__b));
  uint64_t v17 = 0;
  cstdlib_memset(__b, 0, 0x20uLL);
  uint64_t result = PNEW_LDOString_ConFromCPtr(a1[1], a1[1], a2, &v17);
  if (!result)
  {
    uint64_t v9 = a1[5] - a1[4];
    if (v9)
    {
      uint64_t v10 = 0;
      unint64_t v11 = v9 >> 5;
      do
      {
        unint64_t v12 = v11 >> 1;
        int v13 = LDOString_CompareTo(v17, *(void *)(a1[4] + 32 * v10 + 32 * (v11 >> 1)));
        if (v13 < 1)
        {
          if ((v13 & 0x80000000) == 0)
          {
            long long v15 = (_OWORD *)(a1[4] + 32 * (v12 + v10));
            long long v16 = v15[1];
            __b[0] = *v15;
            __b[1] = v16;
            int v14 = 1;
            goto LABEL_9;
          }
        }
        else
        {
          v10 += v12 + 1;
          unint64_t v12 = v11 - (v12 + 1);
        }
        unint64_t v11 = v12;
      }
      while (v12);
    }
    int v14 = 0;
LABEL_9:
    uint64_t result = OOC_PlacementDeleteObject(a1[1], v17);
    if (!result)
    {
      uint64_t result = 0;
      if (v14)
      {
        *a3 = *(void *)&__b[0];
        *(void *)(a4 + 16) = *((void *)&__b[1] + 1);
        *(_OWORD *)a4 = *(_OWORD *)((char *)__b + 8);
      }
      else
      {
        *a3 = 0;
      }
    }
  }
  return result;
}

uint64_t LDOObject_GetCategory(uint64_t a1, uint64_t *a2)
{
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    *a2 = LHString_BorrowCPtr(v2);
  }
  return 0;
}

uint64_t LDOObject_GetListU32Attribute(uint64_t *a1, char *a2, _DWORD *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v17 = 0;
  long long v18 = xmmword_2206E1C88;
  uint64_t v19 = 0;
  uint64_t result = __LDOObject_GetAttributeMapItem(a1, a2, &v17, (uint64_t)&v18);
  unsigned int v20 = result;
  if (!result)
  {
    *a3 = 0;
    if (v17)
    {
      if (v18 == 3)
      {
        *a3 = 1;
        uint64_t v10 = v19;
        unint64_t v11 = *(void *)(v19 + 16) - *(void *)(v19 + 8);
        *a5 = v11 >> 2;
        if ((v11 >> 2))
        {
          uint64_t v12 = OOCAllocator_Calloc(a1[1], (v11 >> 2), 4, &v20);
          *a4 = v12;
          uint64_t result = v20;
          if (!v20)
          {
            int v13 = *(int **)(v10 + 8);
            unint64_t v14 = *(void *)(v10 + 16);
            if ((unint64_t)v13 >= v14)
            {
              return 0;
            }
            else
            {
              unsigned int v15 = 0;
              do
              {
                int v16 = *v13++;
                *(_DWORD *)(v12 + 4 * v15++) = v16;
              }
              while ((unint64_t)v13 < v14);
              return v20;
            }
          }
        }
        else
        {
          uint64_t result = 0;
          *a4 = 0;
        }
      }
    }
  }
  return result;
}

uint64_t LDOObject_GetS32Attribute(uint64_t *a1, char *a2, _DWORD *a3, _DWORD *a4)
{
  long long v9 = xmmword_2206E1CA0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  uint64_t result = __LDOObject_GetAttributeMapItem(a1, a2, &v8, (uint64_t)&v9);
  if (!result)
  {
    *a3 = 0;
    if (v8) {
      BOOL v7 = v9 == 1;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *a3 = 1;
      *a4 = DWORD2(v9);
    }
  }
  return result;
}

uint64_t LDOObject_GetStringAttribute(uint64_t *a1, char *a2, _DWORD *a3, uint64_t *a4)
{
  long long v10 = xmmword_2206E1CB8;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  uint64_t AttributeMapItem = __LDOObject_GetAttributeMapItem(a1, a2, &v9, (uint64_t)&v10);
  if (!AttributeMapItem)
  {
    *a3 = 0;
    if (v9) {
      BOOL v7 = v10 == 2;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *a3 = 1;
      *a4 = LHString_BorrowCPtr(v11);
    }
  }
  return AttributeMapItem;
}

uint64_t LDOObject_GetType(uint64_t a1, uint64_t *a2)
{
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    *a2 = LHString_BorrowCPtr(v2);
  }
  return 0;
}

uint64_t LDOObject_GetU32Attribute(uint64_t *a1, char *a2, _DWORD *a3, _DWORD *a4)
{
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = 0;
  uint64_t result = __LDOObject_GetAttributeMapItem(a1, a2, &v8, (uint64_t)v9);
  if (!result)
  {
    *a3 = 0;
    if (v8) {
      BOOL v7 = LODWORD(v9[0]) == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      *a3 = 1;
      *a4 = HIDWORD(v9[0]);
    }
  }
  return result;
}

uint64_t LDOObject_HasAttribute(uint64_t *a1, char *a2, _DWORD *a3)
{
  int v5 = 5;
  uint64_t result = LDOObject_GetAttributeType(a1, a2, &v5);
  if (!result) {
    *a3 = v5 != 5;
  }
  return result;
}

BOOL LDOObject_IsEqual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t LDOObject_RemoveAttribute(uint64_t a1, char *a2)
{
  uint64_t v21 = 0;
  long long v19 = xmmword_2206E1C58;
  uint64_t v20 = 0;
  uint64_t result = __LDOObject_GetAttributeMapItem((uint64_t *)a1, a2, &v21, (uint64_t)&v19);
  unsigned int v22 = result;
  uint64_t v4 = v21;
  if (result || !v21) {
    goto LABEL_11;
  }
  unsigned int v22 = __LDOObject_DeallocateValue(a1, (int *)&v19);
  if (v22 || (uint64_t v5 = *(void *)(a1 + 40) - *(void *)(a1 + 32)) == 0)
  {
LABEL_12:
    OOC_PlacementDeleteObject(*(void *)(a1 + 8), v4);
    return v22;
  }
  uint64_t v6 = 0;
  unint64_t v7 = v5 >> 5;
  while (1)
  {
    unint64_t v8 = v7 >> 1;
    int v9 = LDOString_CompareTo(v4, *(void *)(*(void *)(a1 + 32) + 32 * v6 + 32 * (v7 >> 1)));
    if (v9 < 1) {
      break;
    }
    v6 += v8 + 1;
    unint64_t v8 = v7 - (v8 + 1);
LABEL_9:
    unint64_t v7 = v8;
    if (!v8) {
      goto LABEL_10;
    }
  }
  if (v9 < 0) {
    goto LABEL_9;
  }
  uint64_t v10 = v8 + v6;
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = (unint64_t)(*(void *)(a1 + 40) - v11) >> 5;
  cstdlib_memmove((void *)(v11 + 32 * v10), (const void *)(v11 + 32 * v10 + 32), 32 * (~v10 + v12));
  uint64_t v13 = *(void *)(a1 + 40) - 32;
  *(void *)(a1 + 40) = v13;
  int v14 = v12 - 1;
  if (*(_DWORD *)(a1 + 24) < (3 * (v12 - 1)))
  {
LABEL_10:
    uint64_t result = 0;
    goto LABEL_11;
  }
  uint64_t v15 = *(void *)(a1 + 32);
  unsigned int v16 = 2 * v14;
  if (v16 <= 8) {
    unsigned int v17 = 8;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = OOCAllocator_Realloc(*(void *)(a1 + 8), *(void *)(a1 + 32), 32 * v17, &v22);
  *(void *)(a1 + 32) = v18;
  uint64_t result = v22;
  if (!v22)
  {
    *(_DWORD *)(a1 + 24) = v17;
    *(void *)(a1 + 40) = v18 + ((v13 - v15) & 0x1FFFFFFFE0);
  }
LABEL_11:
  if (v4) {
    goto LABEL_12;
  }
  return result;
}

uint64_t LDOObject_RemoveAttributes(uint64_t *a1)
{
  unsigned int v17 = 0;
  uint64_t v1 = (uint64_t *)a1[4];
  if ((unint64_t)v1 >= a1[5]) {
    return 0;
  }
  unsigned int v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    uint64_t v16 = *v1;
    uint64_t v6 = &v5[-v4];
    unsigned int v7 = ((unint64_t)&v5[-v4] >> 3) + 1;
    if (v7 <= v3)
    {
      uint64_t v11 = v5;
    }
    else
    {
      unsigned int v8 = 2 * v3;
      if (2 * v3 >= v3 + 1000000) {
        unsigned int v8 = v3 + 1000000;
      }
      if (v8 <= v7) {
        unsigned int v8 = v7;
      }
      if (v8 <= 8) {
        unsigned int v3 = 8;
      }
      else {
        unsigned int v3 = v8;
      }
      uint64_t v9 = OOCAllocator_Realloc(a1[1], v4, 8 * v3, &v17);
      unint64_t v4 = v9;
      uint64_t v10 = v17;
      if (v17) {
        goto LABEL_21;
      }
      uint64_t v11 = (char *)(v9 + ((unint64_t)v6 & 0x7FFFFFFF8));
    }
    cstdlib_memcpy(v11, &v16, 8uLL);
    uint64_t v5 = v11 + 8;
    v1 += 4;
  }
  while ((unint64_t)v1 < a1[5]);
  uint64_t v10 = v17;
  if (v17) {
    goto LABEL_21;
  }
  if (v4 >= (unint64_t)v5)
  {
LABEL_20:
    uint64_t v10 = 0;
LABEL_21:
    if (!v4) {
      return v10;
    }
    goto LABEL_22;
  }
  unint64_t v12 = v4 - 8;
  while (1)
  {
    uint64_t v13 = (char *)LHString_BorrowCPtr(*(void *)(v12 + 8));
    uint64_t v14 = LDOObject_RemoveAttribute((uint64_t)a1, v13);
    if (v14) {
      break;
    }
    v12 += 8;
    if (v12 >= (unint64_t)v11) {
      goto LABEL_20;
    }
  }
  uint64_t v10 = v14;
  if (v4) {
LABEL_22:
  }
    OOCAllocator_Free(a1[1], v4);
  return v10;
}

double LDOObject_SetBoolAttribute(uint64_t a1, char *a2, int a3)
{
  long long v28 = xmmword_2206E1C70;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  int v5 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v27, (int *)&v28);
  int v30 = v5;
  if (!v5)
  {
    DWORD1(v28) = a3 == 1;
    uint64_t v7 = *(void *)(a1 + 40);
    unint64_t v8 = 0;
    uint64_t v9 = v7 - *(void *)(a1 + 32);
    if (v9)
    {
      unint64_t v10 = v9 >> 5;
      while (1)
      {
        unint64_t v11 = v10 >> 1;
        int v12 = LDOString_CompareTo(v27, *(void *)(*(void *)(a1 + 32) + 32 * v8 + 32 * (v10 >> 1)));
        if (v12 < 1)
        {
          if ((v12 & 0x80000000) == 0)
          {
            uint64_t v24 = *(void *)(a1 + 32) + 32 * (v11 + v8);
            double result = *(double *)&v28;
            *(_OWORD *)(v24 + 8) = v28;
            *(void *)(v24 + 24) = v29;
            return result;
          }
        }
        else
        {
          v8 += v11 + 1;
          unint64_t v11 = v10 - (v11 + 1);
        }
        unint64_t v10 = v11;
        if (!v11)
        {
          uint64_t v7 = *(void *)(a1 + 32);
          uint64_t v13 = *(void *)(a1 + 40);
          goto LABEL_10;
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 40);
LABEL_10:
    uint64_t v14 = v27;
    long long v25 = v28;
    uint64_t v26 = v29;
    unint64_t v15 = v13 - v7;
    unint64_t v16 = (unint64_t)(v13 - v7) >> 5;
    if (*(_DWORD *)(a1 + 24) == v16 && v16 != -1)
    {
      unsigned int v17 = 2 * v16;
      if (2 * (int)v16 >= (v16 + 1000000)) {
        unsigned int v17 = v16 + 1000000;
      }
      if (v17 <= (int)v16 + 1) {
        unsigned int v18 = v16 + 1;
      }
      else {
        unsigned int v18 = v17;
      }
      if (v18 <= 8) {
        unsigned int v19 = 8;
      }
      else {
        unsigned int v19 = v18;
      }
      uint64_t v7 = OOCAllocator_Realloc(*(void *)(a1 + 8), v7, 32 * v19, &v30);
      *(void *)(a1 + 32) = v7;
      int v5 = v30;
      if (v30) {
        goto LABEL_26;
      }
      *(_DWORD *)(a1 + 24) = v19;
      uint64_t v13 = v7 + (v15 & 0x1FFFFFFFE0);
    }
    *(void *)(a1 + 40) = v13 + 32;
    unint64_t v20 = (v15 >> 5);
    BOOL v21 = v20 > v8;
    unint64_t v22 = v20 - v8;
    if (v21)
    {
      cstdlib_memmove((void *)(v7 + 32 * v8 + 32), (const void *)(v7 + 32 * v8), 32 * v22);
      uint64_t v7 = *(void *)(a1 + 32);
      int v5 = v30;
    }
    else
    {
      int v5 = 0;
    }
    uint64_t v23 = v7 + 32 * v8;
    *(void *)uint64_t v23 = v14;
    double result = *(double *)&v25;
    *(void *)(v23 + 24) = v26;
    *(_OWORD *)(v23 + 8) = v25;
  }
LABEL_26:
  if (v5)
  {
    if (v27) {
      OOC_PlacementDeleteObject(*(void *)(a1 + 8), v27);
    }
  }
  return result;
}

uint64_t __LDOObject_EnsureKeyWithEmptyValue(uint64_t *a1, char *a2, void *a3, int *a4)
{
  uint64_t result = __LDOObject_GetAttributeMapItem(a1, a2, a3, (uint64_t)a4);
  if (!result)
  {
    if (*a3)
    {
      return __LDOObject_DeallocateValue((uint64_t)a1, a4);
    }
    else
    {
      uint64_t v9 = a1[1];
      return PNEW_LDOString_ConFromCPtr(v9, v9, a2, a3);
    }
  }
  return result;
}

uint64_t LDOObject_SetCategory(uint64_t a1, char *a2)
{
  int v5 = (void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), v4);
    if (result) {
      return result;
    }
    *int v5 = 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);

  return PNEW_LDOString_ConFromCPtr(v7, v7, a2, v5);
}

uint64_t LDOObject_SetListU32Attribute(uint64_t a1, char *a2, const void *a3, unsigned int a4)
{
  long long v35 = xmmword_2206E1C88;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  uint64_t v7 = 0;
  unsigned int v37 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v34, (int *)&v35);
  if (v37 || (v8 = OOCAllocator_Calloc(*(void *)(a1 + 8), 1, 24, &v37), uint64_t v7 = v8, v37))
  {
LABEL_3:
    if (v34) {
      OOC_PlacementDeleteObject(*(void *)(a1 + 8), v34);
    }
    if (v7) {
      OOCAllocator_Free(*(void *)(a1 + 8), v7);
    }
    return v37;
  }
  *(_DWORD *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  if (a4)
  {
    if (a4 <= 8) {
      unsigned int v10 = 8;
    }
    else {
      unsigned int v10 = a4;
    }
    unint64_t v11 = (void *)OOCAllocator_Realloc(*(void *)(a1 + 8), 0, 4 * v10, &v37);
    *(void *)(v7 + 8) = v11;
    if (v37) {
      goto LABEL_3;
    }
    *(_DWORD *)uint64_t v7 = v10;
    *(void *)(v7 + 16) = v11;
    cstdlib_memcpy(v11, a3, 4 * a4);
    *(void *)(v7 + 16) += 4 * a4;
  }
  uint64_t v36 = v7;
  uint64_t v12 = *(void *)(a1 + 40);
  unint64_t v13 = 0;
  uint64_t v14 = v12 - *(void *)(a1 + 32);
  if (v14)
  {
    unint64_t v15 = v14 >> 5;
    while (1)
    {
      unint64_t v16 = v15 >> 1;
      int v17 = LDOString_CompareTo(v34, *(void *)(*(void *)(a1 + 32) + 32 * v13 + 32 * (v15 >> 1)));
      if (v17 < 1)
      {
        if ((v17 & 0x80000000) == 0)
        {
          uint64_t v31 = *(void *)(a1 + 32) + 32 * (v16 + v13);
          *(_OWORD *)(v31 + 8) = v35;
          *(void *)(v31 + 24) = v36;
          goto LABEL_41;
        }
      }
      else
      {
        v13 += v16 + 1;
        unint64_t v16 = v15 - (v16 + 1);
      }
      unint64_t v15 = v16;
      if (!v16)
      {
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 40);
        goto LABEL_22;
      }
    }
  }
  uint64_t v18 = *(void *)(a1 + 40);
LABEL_22:
  uint64_t v19 = v34;
  long long v32 = v35;
  uint64_t v33 = v36;
  unint64_t v20 = v18 - v12;
  unint64_t v21 = (unint64_t)(v18 - v12) >> 5;
  if (*(_DWORD *)(a1 + 24) == v21 && v21 != -1)
  {
    unsigned int v23 = 2 * v21;
    if (2 * (int)v21 >= (v21 + 1000000)) {
      unsigned int v23 = v21 + 1000000;
    }
    if (v23 <= (int)v21 + 1) {
      unsigned int v24 = v21 + 1;
    }
    else {
      unsigned int v24 = v23;
    }
    if (v24 <= 8) {
      unsigned int v25 = 8;
    }
    else {
      unsigned int v25 = v24;
    }
    uint64_t v26 = OOCAllocator_Realloc(*(void *)(a1 + 8), v12, 32 * v25, &v37);
    *(void *)(a1 + 32) = v26;
    if (v37) {
      goto LABEL_3;
    }
    uint64_t v12 = v26;
    *(_DWORD *)(a1 + 24) = v25;
    uint64_t v18 = v26 + (v20 & 0x1FFFFFFFE0);
  }
  *(void *)(a1 + 40) = v18 + 32;
  unint64_t v27 = (v20 >> 5);
  BOOL v28 = v27 > v13;
  unint64_t v29 = v27 - v13;
  if (v28)
  {
    cstdlib_memmove((void *)(v12 + 32 * v13 + 32), (const void *)(v12 + 32 * v13), 32 * v29);
    uint64_t v12 = *(void *)(a1 + 32);
  }
  uint64_t v30 = v12 + 32 * v13;
  *(void *)uint64_t v30 = v19;
  *(void *)(v30 + 24) = v33;
  *(_OWORD *)(v30 + 8) = v32;
LABEL_41:
  if (v37) {
    goto LABEL_3;
  }
  return v37;
}

double LDOObject_SetS32Attribute(uint64_t a1, char *a2, int a3)
{
  long long v28 = xmmword_2206E1CA0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  int v5 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v27, (int *)&v28);
  int v30 = v5;
  if (!v5)
  {
    DWORD2(v28) = a3;
    uint64_t v7 = *(void *)(a1 + 40);
    unint64_t v8 = 0;
    uint64_t v9 = v7 - *(void *)(a1 + 32);
    if (v9)
    {
      unint64_t v10 = v9 >> 5;
      while (1)
      {
        unint64_t v11 = v10 >> 1;
        int v12 = LDOString_CompareTo(v27, *(void *)(*(void *)(a1 + 32) + 32 * v8 + 32 * (v10 >> 1)));
        if (v12 < 1)
        {
          if ((v12 & 0x80000000) == 0)
          {
            uint64_t v24 = *(void *)(a1 + 32) + 32 * (v11 + v8);
            double result = *(double *)&v28;
            *(_OWORD *)(v24 + 8) = v28;
            *(void *)(v24 + 24) = v29;
            return result;
          }
        }
        else
        {
          v8 += v11 + 1;
          unint64_t v11 = v10 - (v11 + 1);
        }
        unint64_t v10 = v11;
        if (!v11)
        {
          uint64_t v7 = *(void *)(a1 + 32);
          uint64_t v13 = *(void *)(a1 + 40);
          goto LABEL_10;
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 40);
LABEL_10:
    uint64_t v14 = v27;
    long long v25 = v28;
    uint64_t v26 = v29;
    unint64_t v15 = v13 - v7;
    unint64_t v16 = (unint64_t)(v13 - v7) >> 5;
    if (*(_DWORD *)(a1 + 24) == v16 && v16 != -1)
    {
      unsigned int v17 = 2 * v16;
      if (2 * (int)v16 >= (v16 + 1000000)) {
        unsigned int v17 = v16 + 1000000;
      }
      if (v17 <= (int)v16 + 1) {
        unsigned int v18 = v16 + 1;
      }
      else {
        unsigned int v18 = v17;
      }
      if (v18 <= 8) {
        unsigned int v19 = 8;
      }
      else {
        unsigned int v19 = v18;
      }
      uint64_t v7 = OOCAllocator_Realloc(*(void *)(a1 + 8), v7, 32 * v19, &v30);
      *(void *)(a1 + 32) = v7;
      int v5 = v30;
      if (v30) {
        goto LABEL_26;
      }
      *(_DWORD *)(a1 + 24) = v19;
      uint64_t v13 = v7 + (v15 & 0x1FFFFFFFE0);
    }
    *(void *)(a1 + 40) = v13 + 32;
    unint64_t v20 = (v15 >> 5);
    BOOL v21 = v20 > v8;
    unint64_t v22 = v20 - v8;
    if (v21)
    {
      cstdlib_memmove((void *)(v7 + 32 * v8 + 32), (const void *)(v7 + 32 * v8), 32 * v22);
      uint64_t v7 = *(void *)(a1 + 32);
      int v5 = v30;
    }
    else
    {
      int v5 = 0;
    }
    uint64_t v23 = v7 + 32 * v8;
    *(void *)uint64_t v23 = v14;
    double result = *(double *)&v25;
    *(void *)(v23 + 24) = v26;
    *(_OWORD *)(v23 + 8) = v25;
  }
LABEL_26:
  if (v5)
  {
    if (v27) {
      OOC_PlacementDeleteObject(*(void *)(a1 + 8), v27);
    }
  }
  return result;
}

uint64_t LDOObject_SetStringAttribute(uint64_t a1, char *a2, char *a3)
{
  uint64_t v33 = 0;
  long long v31 = xmmword_2206E1CB8;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  unsigned int v34 = PNEW_LDOString_ConFromCPtr(*(void *)(a1 + 8), *(void *)(a1 + 8), a3, &v33);
  if (!v34)
  {
    unsigned int v34 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v30, (int *)&v31);
    if (!v34)
    {
      uint64_t v32 = v33;
      uint64_t v6 = *(void *)(a1 + 40);
      unint64_t v7 = 0;
      uint64_t v8 = v6 - *(void *)(a1 + 32);
      if (v8)
      {
        unint64_t v9 = v8 >> 5;
        while (1)
        {
          unint64_t v10 = v9 >> 1;
          int v11 = LDOString_CompareTo(v30, *(void *)(*(void *)(a1 + 32) + 32 * v7 + 32 * (v9 >> 1)));
          if (v11 < 1)
          {
            if ((v11 & 0x80000000) == 0)
            {
              uint64_t v27 = *(void *)(a1 + 32) + 32 * (v10 + v7);
              *(_OWORD *)(v27 + 8) = v31;
              *(void *)(v27 + 24) = v32;
              return v34;
            }
          }
          else
          {
            v7 += v10 + 1;
            unint64_t v10 = v9 - (v10 + 1);
          }
          unint64_t v9 = v10;
          if (!v10)
          {
            uint64_t v6 = *(void *)(a1 + 32);
            uint64_t v12 = *(void *)(a1 + 40);
            goto LABEL_16;
          }
        }
      }
      uint64_t v12 = *(void *)(a1 + 40);
LABEL_16:
      uint64_t v13 = v30;
      long long v28 = v31;
      uint64_t v29 = v32;
      unint64_t v14 = v12 - v6;
      unint64_t v15 = (unint64_t)(v12 - v6) >> 5;
      if (*(_DWORD *)(a1 + 24) == v15 && v15 != -1)
      {
        unsigned int v17 = 2 * v15;
        if (2 * (int)v15 >= (v15 + 1000000)) {
          unsigned int v17 = v15 + 1000000;
        }
        if (v17 <= (int)v15 + 1) {
          unsigned int v18 = v15 + 1;
        }
        else {
          unsigned int v18 = v17;
        }
        if (v18 <= 8) {
          unsigned int v19 = 8;
        }
        else {
          unsigned int v19 = v18;
        }
        uint64_t v20 = OOCAllocator_Realloc(*(void *)(a1 + 8), v6, 32 * v19, &v34);
        *(void *)(a1 + 32) = v20;
        if (v34) {
          goto LABEL_3;
        }
        uint64_t v6 = v20;
        *(_DWORD *)(a1 + 24) = v19;
        uint64_t v12 = v20 + (v14 & 0x1FFFFFFFE0);
      }
      *(void *)(a1 + 40) = v12 + 32;
      unint64_t v21 = (v14 >> 5);
      unint64_t v22 = (char *)(v6 + 32 * v7);
      BOOL v23 = v21 > v7;
      unint64_t v24 = v21 - v7;
      if (!v23)
      {
        *(void *)unint64_t v22 = v13;
        *((void *)v22 + 3) = v29;
        *(_OWORD *)(v22 + 8) = v28;
        return v34;
      }
      cstdlib_memmove(v22 + 32, v22, 32 * v24);
      unsigned int v25 = v34;
      uint64_t v26 = *(void *)(a1 + 32) + 32 * v7;
      *(void *)uint64_t v26 = v13;
      *(void *)(v26 + 24) = v29;
      *(_OWORD *)(v26 + 8) = v28;
      if (!v25) {
        return v34;
      }
    }
  }
LABEL_3:
  if (v30) {
    OOC_PlacementDeleteObject(*(void *)(a1 + 8), v30);
  }
  if (v33) {
    OOC_PlacementDeleteObject(*(void *)(a1 + 8), v33);
  }
  return v34;
}

uint64_t LDOObject_SetType(uint64_t a1, char *a2)
{
  int v5 = (void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), v4);
    if (result) {
      return result;
    }
    *int v5 = 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);

  return PNEW_LDOString_ConFromCPtr(v7, v7, a2, v5);
}

double LDOObject_SetU32Attribute(uint64_t a1, char *a2, int a3)
{
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  int v5 = __LDOObject_EnsureKeyWithEmptyValue((uint64_t *)a1, a2, &v28, (int *)&v29);
  int v31 = v5;
  if (!v5)
  {
    DWORD1(v29) = a3;
    uint64_t v7 = *(void *)(a1 + 40);
    unint64_t v8 = 0;
    uint64_t v9 = v7 - *(void *)(a1 + 32);
    if (v9)
    {
      unint64_t v10 = v9 >> 5;
      while (1)
      {
        unint64_t v11 = v10 >> 1;
        int v12 = LDOString_CompareTo(v28, *(void *)(*(void *)(a1 + 32) + 32 * v8 + 32 * (v10 >> 1)));
        if (v12 < 1)
        {
          if ((v12 & 0x80000000) == 0)
          {
            uint64_t v25 = *(void *)(a1 + 32) + 32 * (v11 + v8);
            double result = *(double *)&v29;
            *(_OWORD *)(v25 + 8) = v29;
            *(void *)(v25 + 24) = v30;
            return result;
          }
        }
        else
        {
          v8 += v11 + 1;
          unint64_t v11 = v10 - (v11 + 1);
        }
        unint64_t v10 = v11;
        if (!v11)
        {
          uint64_t v7 = *(void *)(a1 + 32);
          uint64_t v13 = *(void *)(a1 + 40);
          goto LABEL_10;
        }
      }
    }
    uint64_t v13 = *(void *)(a1 + 40);
LABEL_10:
    uint64_t v14 = v28;
    long long v26 = v29;
    uint64_t v27 = v30;
    unint64_t v15 = v13 - v7;
    unint64_t v16 = (unint64_t)(v13 - v7) >> 5;
    if (*(_DWORD *)(a1 + 24) == v16 && v16 != -1)
    {
      unsigned int v18 = 2 * v16;
      if (2 * (int)v16 >= (v16 + 1000000)) {
        unsigned int v18 = v16 + 1000000;
      }
      if (v18 <= (int)v16 + 1) {
        unsigned int v19 = v16 + 1;
      }
      else {
        unsigned int v19 = v18;
      }
      if (v19 <= 8) {
        unsigned int v20 = 8;
      }
      else {
        unsigned int v20 = v19;
      }
      uint64_t v7 = OOCAllocator_Realloc(*(void *)(a1 + 8), v7, 32 * v20, &v31);
      *(void *)(a1 + 32) = v7;
      int v5 = v31;
      if (v31) {
        goto LABEL_28;
      }
      *(_DWORD *)(a1 + 24) = v20;
      uint64_t v13 = v7 + (v15 & 0x1FFFFFFFE0);
    }
    *(void *)(a1 + 40) = v13 + 32;
    unint64_t v21 = (v15 >> 5);
    BOOL v22 = v21 > v8;
    unint64_t v23 = v21 - v8;
    if (v22)
    {
      cstdlib_memmove((void *)(v7 + 32 * v8 + 32), (const void *)(v7 + 32 * v8), 32 * v23);
      uint64_t v7 = *(void *)(a1 + 32);
      int v5 = v31;
    }
    else
    {
      int v5 = 0;
    }
    uint64_t v24 = v7 + 32 * v8;
    *(void *)uint64_t v24 = v14;
    double result = *(double *)&v26;
    *(void *)(v24 + 24) = v27;
    *(_OWORD *)(v24 + 8) = v26;
  }
LABEL_28:
  if (v5)
  {
    if (v28) {
      OOC_PlacementDeleteObject(*(void *)(a1 + 8), v28);
    }
  }
  return result;
}

uint64_t LDOObject_ToString(uint64_t a1, uint64_t *a2)
{
  uint64_t appended = PNEW_LDOString_Con(*(void *)(a1 + 8), *(void *)(a1 + 8), a2);
  if (!appended)
  {
    uint64_t v5 = *a2;
    uint64_t appended = LDOString_AppendPrefixU32Suffix(v5, "  ID: ", *(_DWORD *)(a1 + 16), "\n");
    if (!appended)
    {
      uint64_t appended = LDOString_AppendPrefixStringSuffix(v5, "  Category: ", *(char **)(a1 + 48), "\n");
      if (!appended)
      {
        uint64_t appended = LDOString_AppendPrefixStringSuffix(v5, "  Type: ", *(char **)(a1 + 56), "\n");
        if (!appended)
        {
          uint64_t appended = LHString_Append(v5, "  Attributes:\n");
          if (!appended)
          {
            unint64_t v8 = *(void *)(a1 + 32);
            if (!v8 || v8 >= *(void *)(a1 + 40)) {
              return 0;
            }
            while (1)
            {
              int v10 = *(_DWORD *)(v8 + 8);
              unsigned int v9 = *(_DWORD *)(v8 + 12);
              unsigned int v11 = *(_DWORD *)(v8 + 16);
              uint64_t v12 = *(void *)(v8 + 24);
              uint64_t v13 = LDOString_AppendPrefixStringSuffix(v5, "    ", *(char **)v8, " = ");
              if (v13) {
                break;
              }
              switch(v10)
              {
                case 0:
                  uint64_t v14 = LDOString_AppendPrefixU32Suffix(v5, 0, v9, "\n");
                  goto LABEL_25;
                case 1:
                  uint64_t v14 = LDOString_AppendPrefixS32Suffix(v5, 0, v11, "\n");
                  goto LABEL_25;
                case 2:
                  uint64_t v14 = LDOString_AppendPrefixStringSuffix(v5, 0, (char *)v12, "\n");
                  goto LABEL_25;
                case 3:
                  uint64_t v13 = LHString_Append(v5, "[");
                  if (v13) {
                    goto LABEL_29;
                  }
                  unsigned int v17 = *(unsigned int **)(v12 + 8);
                  break;
                case 4:
                  uint64_t v14 = LDOString_AppendPrefixBoolSuffix(v5, 0, v9 == 1, "\n");
                  goto LABEL_25;
                default:
                  uint64_t v15 = v5;
                  unint64_t v16 = "UNKNOWN TYPE OF ATTRIBUTE\n";
                  goto LABEL_23;
              }
              while ((unint64_t)v17 < *(void *)(v12 + 16))
              {
                uint64_t v13 = LDOString_AppendPrefixU32Suffix(v5, 0, *v17, ", ");
                if (v13) {
                  goto LABEL_29;
                }
                ++v17;
              }
              uint64_t v15 = v5;
              unint64_t v16 = "]\n";
LABEL_23:
              uint64_t v14 = LHString_Append(v15, v16);
LABEL_25:
              uint64_t appended = v14;
              if (v14) {
                goto LABEL_6;
              }
              v8 += 32;
              if (v8 >= *(void *)(a1 + 40)) {
                return appended;
              }
            }
LABEL_29:
            uint64_t appended = v13;
          }
        }
      }
    }
LABEL_6:
    if (v5)
    {
      uint64_t v6 = LDOString_BorrowAllocator(v5);
      OOC_PlacementDeleteObject(v6, v5);
    }
  }
  return appended;
}

uint64_t PNEW_LDOObject_Con(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = OOCAllocator_Malloc(a1, 64, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = Object_Con((void *)v6);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *(void *)uint64_t v6 = &__LDOObject;
      *(void *)(v6 + 8) = a2;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 16) = v6;
      *(_DWORD *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 40) = 0;
      *a3 = v6;
    }
  }
  return result;
}

void *GetLDOObjectClass()
{
  return &__LDOObject;
}

uint64_t lua_checkstack(void *a1, int a2)
{
  int v8 = a2;
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[2];
  uint64_t v4 = a2;
  if (a2 >= (a1[6] - v3) >> 4)
  {
    if ((int)(((unint64_t)(v3 - a1[7]) >> 4) + 5) > 1000000 - a2
      || luaD_rawrunprotected((uint64_t)a1, (void (*)(uint64_t, uint64_t))growstack, (uint64_t)&v8))
    {
      return 0;
    }
    uint64_t v3 = a1[2];
    uint64_t v4 = v8;
  }
  unint64_t v5 = v3 + 16 * v4;
  if (*(void *)(v2 + 8) < v5) {
    *(void *)(v2 + 8) = v5;
  }
  return 1;
}

uint64_t growstack(uint64_t a1, int *a2)
{
  return luaD_growstack(a1, *a2);
}

__n128 lua_xmove(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 16) -= 16 * a3;
    if (a3 >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = *(__n128 **)(a2 + 16);
      do
      {
        __n128 result = *(__n128 *)(*(void *)(a1 + 16) + v3);
        *uint64_t v4 = result;
        uint64_t v4 = (__n128 *)(*(void *)(a2 + 16) + 16);
        *(void *)(a2 + 16) = v4;
        v3 += 16;
      }
      while (16 * a3 != v3);
    }
  }
  return result;
}

uint64_t lua_atpanic(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t result = *(void *)(v2 + 216);
  *(void *)(v2 + 216) = a2;
  return result;
}

void *lua_version(uint64_t a1)
{
  if (a1) {
    return *(void **)(*(void *)(a1 + 24) + 232);
  }
  else {
    return &lua_version_version;
  }
}

uint64_t lua_absindex(uint64_t a1, uint64_t a2)
{
  if ((a2 - 1) >= 0xFFF0B9D8) {
    return ((*(void *)(a1 + 16) - **(void **)(a1 + 32)) >> 4) + a2;
  }
  return a2;
}

unint64_t lua_gettop(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - **(void **)(a1 + 32) - 16) >> 4;
}

uint64_t lua_settop(uint64_t result, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    unint64_t v2 = *(void *)(result + 16) + 16 * (int)(a2 + 1);
  }
  else
  {
    unint64_t v2 = **(void **)(result + 32) + 16 * a2 + 16;
    for (unint64_t i = *(void *)(result + 16); i < v2; i += 16)
      *(_DWORD *)(i + 8) = 0;
  }
  *(void *)(result + 16) = v2;
  return result;
}

uint64_t *lua_rotate(void *a1, int a2, int a3)
{
  unint64_t v4 = a1[2] - 16;
  uint64_t result = index2addr(a1, a2);
  unint64_t v6 = v4 - 16 * a3;
  if (a3 < 0) {
    unint64_t v6 = (unint64_t)&result[-2 * a3 - 2];
  }
  if ((unint64_t)result < v6)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    do
    {
      uint64_t v9 = *v7;
      uint64_t v10 = v7[1];
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      v7 += 2;
      *(void *)unint64_t v8 = v9;
      *(void *)(v8 + 8) = v10;
      v8 -= 16;
    }
    while ((unint64_t)v7 < v8);
  }
  unsigned int v11 = (uint64_t *)(v6 + 16);
  if ((unint64_t)v11 < v4)
  {
    unint64_t v12 = v4;
    do
    {
      uint64_t v13 = *v11;
      uint64_t v14 = v11[1];
      *(_OWORD *)unsigned int v11 = *(_OWORD *)v12;
      v11 += 2;
      *(void *)unint64_t v12 = v13;
      *(void *)(v12 + 8) = v14;
      v12 -= 16;
    }
    while ((unint64_t)v11 < v12);
  }
  while ((unint64_t)result < v4)
  {
    uint64_t v15 = *result;
    uint64_t v16 = result[1];
    *(_OWORD *)uint64_t result = *(_OWORD *)v4;
    result += 2;
    *(void *)unint64_t v4 = v15;
    *(void *)(v4 + 8) = v16;
    v4 -= 16;
  }
  return result;
}

uint64_t *index2addr(void *a1, int a2)
{
  unint64_t v2 = (uint64_t **)a1[4];
  if (a2 < 1)
  {
    if (a2 >= -1000999)
    {
      return (uint64_t *)(a1[2] + 16 * a2);
    }
    else if (-1001000 == a2)
    {
      return (uint64_t *)(a1[3] + 64);
    }
    else
    {
      unint64_t v4 = *v2;
      uint64_t result = &luaO_nilobject_;
      if (*((_DWORD *)v4 + 2) != 22)
      {
        uint64_t v5 = *v4;
        unsigned int v6 = *(unsigned __int8 *)(v5 + 10);
        uint64_t v7 = v5 + 16 * (-1001001 - a2) + 32;
        if (-1001000 - a2 <= v6) {
          return (uint64_t *)v7;
        }
      }
    }
  }
  else if ((unint64_t)&(*v2)[2 * a2] >= a1[2])
  {
    return &luaO_nilobject_;
  }
  else
  {
    return &(*v2)[2 * a2];
  }
  return result;
}

uint64_t *lua_copy(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = index2addr((void *)a1, a2);
  uint64_t result = index2addr((void *)a1, a3);
  *(_OWORD *)uint64_t result = *(_OWORD *)v5;
  if (a3 <= -1001001 && (v5[1] & 0x40) != 0)
  {
    uint64_t v7 = ***(void ***)(a1 + 32);
    if ((*(unsigned char *)(v7 + 9) & 4) != 0)
    {
      uint64_t v8 = *v5;
      if ((*(unsigned char *)(*v5 + 9) & 3) != 0)
      {
        return (uint64_t *)luaC_barrier_(a1, v7, v8);
      }
    }
  }
  return result;
}

__n128 lua_pushvalue(void *a1, int a2)
{
  uint64_t v3 = (__n128 *)a1[2];
  unint64_t v4 = (__n128 *)index2addr(a1, a2);
  __n128 result = *v4;
  *uint64_t v3 = *v4;
  a1[2] += 16;
  return result;
}

uint64_t lua_type(void *a1, int a2)
{
  unint64_t v2 = index2addr(a1, a2);
  if (v2 == &luaO_nilobject_) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v2[1] & 0xF;
  }
}

char *lua_typename(uint64_t a1, int a2)
{
  return luaT_typenames_[a2 + 1];
}

BOOL lua_iscfunction(void *a1, int a2)
{
  int v2 = *((_DWORD *)index2addr(a1, a2) + 2);
  return v2 == 22 || v2 == 102;
}

BOOL lua_isinteger(void *a1, int a2)
{
  return *((_DWORD *)index2addr(a1, a2) + 2) == 19;
}

uint64_t lua_isnumber(void *a1, int a2)
{
  int v2 = index2addr(a1, a2);
  if (*((_DWORD *)v2 + 2) == 3) {
    return 1;
  }
  uint64_t v4 = 0;
  return luaV_tonumber_(v2, (double *)&v4);
}

BOOL lua_isstring(void *a1, int a2)
{
  return (index2addr(a1, a2)[1] & 0xFu) - 3 < 2;
}

BOOL lua_isuserdata(void *a1, int a2)
{
  int v2 = *((_DWORD *)index2addr(a1, a2) + 2);
  return v2 == 71 || v2 == 2;
}

uint64_t lua_rawequal(void *a1, int a2, int a3)
{
  uint64_t v5 = index2addr(a1, a2);
  unsigned int v6 = index2addr(a1, a3);
  if (v5 == &luaO_nilobject_ || v6 == &luaO_nilobject_) {
    return 0;
  }

  return luaV_equalobj(0, v5, v6);
}

void *lua_arith(void *a1, int a2)
{
  uint64_t v3 = (double *)a1[2];
  if ((a2 - 14) >= 0xFFFFFFFE)
  {
    *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 - 1);
    uint64_t v3 = (double *)(a1[2] + 16);
    a1[2] = v3;
  }
  __n128 result = luaO_arith(a1, a2, v3 - 4, v3 - 2, (uint64_t)(v3 - 4));
  a1[2] -= 16;
  return result;
}

uint64_t lua_compare(void *a1, int a2, int a3, int a4)
{
  uint64_t v7 = index2addr(a1, a2);
  uint64_t v8 = index2addr(a1, a3);
  if (v7 == &luaO_nilobject_ || v8 == &luaO_nilobject_) {
    return 0;
  }
  switch(a4)
  {
    case 2:
      return luaV_lessequal((uint64_t)a1, (uint64_t)v7, (uint64_t)v8);
    case 1:
      return luaV_lessthan((uint64_t)a1, (uint64_t)v7, (uint64_t)v8);
    case 0:
      return luaV_equalobj((uint64_t)a1, v7, v8);
    default:
      return 0;
  }
}

uint64_t lua_stringtonumber(uint64_t a1, char *__s1)
{
  uint64_t result = luaO_str2num(__s1, *(void *)(a1 + 16));
  if (result) {
    *(void *)(a1 + 16) += 16;
  }
  return result;
}

double lua_tonumberx(void *a1, int a2, int *a3)
{
  double v7 = 0.0;
  uint64_t v4 = index2addr(a1, a2);
  if (*((_DWORD *)v4 + 2) == 3)
  {
    double v7 = *(double *)v4;
    int v5 = 1;
    if (!a3) {
      return v7;
    }
    goto LABEL_6;
  }
  int v5 = luaV_tonumber_(v4, &v7);
  if (!v5)
  {
    double v7 = 0.0;
    if (!a3) {
      return v7;
    }
    goto LABEL_6;
  }
  if (a3) {
LABEL_6:
  }
    *a3 = v5;
  return v7;
}

uint64_t lua_tointegerx(void *a1, int a2, int *a3)
{
  uint64_t v7 = 0;
  uint64_t v4 = index2addr(a1, a2);
  if (*((_DWORD *)v4 + 2) == 19)
  {
    uint64_t v7 = *v4;
    int v5 = 1;
    if (!a3) {
      return v7;
    }
    goto LABEL_6;
  }
  int v5 = luaV_tointeger(v4, &v7);
  if (!v5)
  {
    uint64_t v7 = 0;
    if (!a3) {
      return v7;
    }
    goto LABEL_6;
  }
  if (a3) {
LABEL_6:
  }
    *a3 = v5;
  return v7;
}

uint64_t lua_toBOOLean(void *a1, int a2)
{
  int v2 = index2addr(a1, a2);
  uint64_t result = *((unsigned int *)v2 + 2);
  if (result) {
    return result != 1 || *(_DWORD *)v2 != 0;
  }
  return result;
}

uint64_t lua_tolstring(void *a1, int a2, void *a3)
{
  unsigned int v6 = index2addr(a1, a2);
  if ((v6[1] & 0xF) == 3)
  {
    if (*(uint64_t *)(a1[3] + 24) >= 1) {
      luaC_step((uint64_t)a1);
    }
    uint64_t v7 = index2addr(a1, a2);
    luaO_tostring((uint64_t)a1, (uint64_t)v7, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    uint64_t v7 = v6;
    if ((v6[1] & 0xF) != 4)
    {
      uint64_t result = 0;
      if (a3) {
        *a3 = 0;
      }
      return result;
    }
  }
  if (a3)
  {
    uint64_t v15 = *v7;
    if (*(unsigned char *)(*v7 + 8) == 4) {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 11);
    }
    else {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    *a3 = v16;
  }
  return *v7 + 24;
}

uint64_t lua_rawlen(void *a1, int a2)
{
  int v2 = index2addr(a1, a2);
  uint64_t result = 0;
  unsigned int v4 = v2[1] & 0x3F;
  if (v4 > 6)
  {
    if (v4 == 7)
    {
      return *(void *)(*v2 + 24);
    }
    else if (v4 == 20)
    {
      return *(void *)(*v2 + 16);
    }
  }
  else if (v4 == 4)
  {
    return *(unsigned __int8 *)(*v2 + 11);
  }
  else if (v4 == 5)
  {
    return (int)luaH_getn(*v2);
  }
  return result;
}

uint64_t lua_tocfunction(void *a1, int a2)
{
  int v2 = index2addr(a1, a2);
  int v3 = *((_DWORD *)v2 + 2);
  if (v3 == 22) {
    return *v2;
  }
  if (v3 == 102)
  {
    int v2 = (uint64_t *)(*v2 + 24);
    return *v2;
  }
  return 0;
}

uint64_t lua_touserdata(void *a1, int a2)
{
  int v2 = index2addr(a1, a2);
  if ((v2[1] & 0xF) == 2) {
    return *v2;
  }
  if ((v2[1] & 0xF) == 7) {
    return *v2 + 40;
  }
  return 0;
}

uint64_t lua_tothread(void *a1, int a2)
{
  int v2 = index2addr(a1, a2);
  if (*((_DWORD *)v2 + 2) == 72) {
    return *v2;
  }
  else {
    return 0;
  }
}

uint64_t lua_topointer(void *a1, int a2)
{
  int v2 = index2addr(a1, a2);
  uint64_t result = 0;
  int v4 = v2[1] & 0x3F;
  switch(v4)
  {
    case 2:
    case 5:
    case 6:
    case 8:
      goto LABEL_2;
    case 3:
    case 4:
      return result;
    case 7:
      uint64_t result = *v2 + 40;
      break;
    default:
      if (v4 == 22 || v4 == 38) {
LABEL_2:
      }
        uint64_t result = *v2;
      break;
  }
  return result;
}

uint64_t lua_pushnil(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  *(_DWORD *)(v1 + 8) = 0;
  *(void *)(result + 16) = v1 + 16;
  return result;
}

uint64_t lua_pushnumber(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(double *)uint64_t v2 = a2;
  *(_DWORD *)(v2 + 8) = 3;
  *(void *)(result + 16) += 16;
  return result;
}

uint64_t lua_pushinteger(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(void *)uint64_t v2 = a2;
  *(_DWORD *)(v2 + 8) = 19;
  *(void *)(result + 16) += 16;
  return result;
}

uint64_t lua_pushlstring(uint64_t a1, char *a2, size_t a3)
{
  if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
    luaC_step(a1);
  }
  uint64_t v6 = luaS_newlstr(a1, a2, a3);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)uint64_t v7 = v6;
  *(_DWORD *)(v7 + 8) = *(unsigned __int8 *)(v6 + 8) | 0x40;
  *(void *)(a1 + 16) += 16;
  return v6 + 24;
}

uint64_t lua_pushstring(uint64_t a1, char *a2)
{
  if (a2)
  {
    if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
      luaC_step(a1);
    }
    uint64_t v4 = luaS_new(a1, a2);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)uint64_t v5 = v4;
    *(_DWORD *)(v5 + 8) = *(unsigned __int8 *)(v4 + 8) | 0x40;
    uint64_t result = v4 + 24;
    uint64_t v7 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t result = 0;
    uint64_t v7 = *(void *)(a1 + 16);
    *(_DWORD *)(v7 + 8) = 0;
  }
  *(void *)(a1 + 16) = v7 + 16;
  return result;
}

uint64_t lua_pushvfstring(uint64_t a1, char *a2, uint64_t *a3)
{
  if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
    luaC_step(a1);
  }

  return luaO_pushvfstring(a1, a2, a3);
}

uint64_t lua_pushfstring(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
    luaC_step(a1);
  }
  return luaO_pushvfstring(a1, a2, &a9);
}

uint64_t lua_pushcclosure(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  if (a3)
  {
    if (*(uint64_t *)(*(void *)(result + 24) + 24) >= 1) {
      luaC_step(result);
    }
    uint64_t result = luaF_newCclosure(v4, a3);
    *(void *)(result + 24) = a2;
    *(void *)(v4 + 16) -= 16 * a3;
    uint64_t v6 = a3 - 1;
    uint64_t v7 = 16 * a3;
    do
    {
      *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(*(void *)(v4 + 16) + v7 - 16);
      int v8 = v6--;
      v7 -= 16;
    }
    while (v8);
    uint64_t v9 = *(void *)(v4 + 16);
    *(void *)uint64_t v9 = result;
    int v10 = 102;
  }
  else
  {
    uint64_t v9 = *(void *)(result + 16);
    *(void *)uint64_t v9 = a2;
    int v10 = 22;
  }
  *(_DWORD *)(v9 + 8) = v10;
  *(void *)(v4 + 16) += 16;
  return result;
}

uint64_t lua_pushBOOLean(uint64_t result, int a2)
{
  uint64_t v2 = *(_DWORD **)(result + 16);
  *uint64_t v2 = a2 != 0;
  v2[2] = 1;
  *(void *)(result + 16) += 16;
  return result;
}

uint64_t lua_pushlightuserdata(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(void *)uint64_t v2 = a2;
  *(_DWORD *)(v2 + 8) = 2;
  *(void *)(result + 16) += 16;
  return result;
}

BOOL lua_pushthread(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)uint64_t v1 = a1;
  *(_DWORD *)(v1 + 8) = 72;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) += 16;
  return *(void *)(v2 + 224) == a1;
}

uint64_t lua_getglobal(uint64_t a1, char *a2)
{
  uint64_t v4 = luaH_getint(*(void *)(*(void *)(a1 + 24) + 64), 2);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = luaS_new(a1, a2);
  *(void *)uint64_t v5 = v6;
  *(_DWORD *)(v5 + 8) = *(unsigned __int8 *)(v6 + 8) | 0x40;
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  *(void *)(a1 + 16) = v7 + 2;
  luaV_gettable(a1, (uint64_t)v4, v7, v7);
  return *(_DWORD *)(*(void *)(a1 + 16) - 8) & 0xF;
}

uint64_t lua_gettable(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  luaV_gettable((uint64_t)a1, (uint64_t)v3, (uint64_t *)(a1[2] - 16), (_OWORD *)(a1[2] - 16));
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_getfield(void *a1, int a2, char *a3)
{
  uint64_t v5 = index2addr(a1, a2);
  uint64_t v6 = a1[2];
  uint64_t v7 = luaS_new((uint64_t)a1, a3);
  *(void *)uint64_t v6 = v7;
  *(_DWORD *)(v6 + 8) = *(unsigned __int8 *)(v7 + 8) | 0x40;
  int v8 = (uint64_t *)a1[2];
  a1[2] = v8 + 2;
  luaV_gettable((uint64_t)a1, (uint64_t)v5, v8, v8);
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_geti(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = index2addr(a1, a2);
  uint64_t v6 = a1[2];
  *(void *)uint64_t v6 = a3;
  *(_DWORD *)(v6 + 8) = 19;
  uint64_t v7 = (uint64_t *)a1[2];
  a1[2] = v7 + 2;
  luaV_gettable((uint64_t)a1, (uint64_t)v5, v7, v7);
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_rawget(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  uint64_t v4 = a1[2];
  *(_OWORD *)(v4 - 16) = *(_OWORD *)luaH_get(*v3, (uint64_t *)(v4 - 16));
  return *(_DWORD *)(a1[2] - 8) & 0xF;
}

uint64_t lua_rawgeti(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = index2addr(a1, a2);
  uint64_t v6 = (_OWORD *)a1[2];
  *uint64_t v6 = *(_OWORD *)luaH_getint(*v5, a3);
  uint64_t v7 = a1[2];
  a1[2] = v7 + 16;
  return *(_DWORD *)(v7 + 8) & 0xF;
}

uint64_t lua_rawgetp(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = index2addr(a1, a2);
  v9[0] = a3;
  v9[1] = 2;
  uint64_t v6 = (_OWORD *)a1[2];
  *uint64_t v6 = *(_OWORD *)luaH_get(*v5, v9);
  uint64_t v7 = a1[2];
  a1[2] = v7 + 16;
  return *(_DWORD *)(v7 + 8) & 0xF;
}

_OWORD *lua_createtable(uint64_t a1, signed int a2, int a3)
{
  if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
    luaC_step(a1);
  }
  uint64_t result = (_OWORD *)luaH_new(a1);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)uint64_t v7 = result;
  *(_DWORD *)(v7 + 8) = 69;
  *(void *)(a1 + 16) += 16;
  if (a2 > 0 || a3 >= 1)
  {
    return luaH_resize(a1, (uint64_t)result, a2, a3);
  }
  return result;
}

uint64_t lua_getmetatable(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  if ((v3[1] & 0xF) == 7)
  {
    uint64_t v4 = (uint64_t *)(*v3 + 16);
  }
  else if ((v3[1] & 0xF) == 5)
  {
    uint64_t v4 = (uint64_t *)(*v3 + 40);
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1[3] + 8 * (v3[1] & 0xF) + 440);
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = a1[2];
  *(void *)uint64_t v6 = v5;
  *(_DWORD *)(v6 + 8) = 69;
  a1[2] += 16;
  return 1;
}

uint64_t lua_getuservalue(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  uint64_t v4 = a1[2];
  uint64_t v5 = *v3;
  *(void *)uint64_t v4 = *(void *)(*v3 + 32);
  *(_DWORD *)(v4 + 8) = *(unsigned __int8 *)(v5 + 10);
  uint64_t v6 = a1[2];
  a1[2] = v6 + 16;
  return *(_DWORD *)(v6 + 8) & 0xF;
}

uint64_t *lua_setglobal(uint64_t a1, char *a2)
{
  uint64_t v4 = luaH_getint(*(void *)(*(void *)(a1 + 24) + 64), 2);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = luaS_new(a1, a2);
  *(void *)uint64_t v5 = v6;
  *(_DWORD *)(v5 + 8) = *(unsigned __int8 *)(v6 + 8) | 0x40;
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  *(void *)(a1 + 16) = v7 + 2;
  uint64_t result = luaV_settable(a1, (uint64_t)v4, v7, (unsigned char *)v7 - 16);
  *(void *)(a1 + 16) -= 32;
  return result;
}

uint64_t *lua_settable(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  uint64_t result = luaV_settable((uint64_t)a1, (uint64_t)v3, (uint64_t *)(a1[2] - 32), (unsigned char *)(a1[2] - 16));
  a1[2] -= 32;
  return result;
}

uint64_t *lua_setfield(void *a1, int a2, char *a3)
{
  uint64_t v5 = index2addr(a1, a2);
  uint64_t v6 = a1[2];
  uint64_t v7 = luaS_new((uint64_t)a1, a3);
  *(void *)uint64_t v6 = v7;
  *(_DWORD *)(v6 + 8) = *(unsigned __int8 *)(v7 + 8) | 0x40;
  int v8 = (uint64_t *)a1[2];
  a1[2] = v8 + 2;
  uint64_t result = luaV_settable((uint64_t)a1, (uint64_t)v5, v8, (unsigned char *)v8 - 16);
  a1[2] -= 32;
  return result;
}

uint64_t *lua_seti(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = index2addr(a1, a2);
  uint64_t v6 = a1[2];
  *(void *)uint64_t v6 = a3;
  *(_DWORD *)(v6 + 8) = 19;
  uint64_t v7 = (uint64_t *)a1[2];
  a1[2] = v7 + 2;
  uint64_t result = luaV_settable((uint64_t)a1, (uint64_t)v5, v7, (unsigned char *)v7 - 16);
  a1[2] -= 32;
  return result;
}

_OWORD *lua_rawset(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  uint64_t v4 = *v3;
  uint64_t result = luaH_set((uint64_t)a1, *v3, (uint64_t *)(a1[2] - 32));
  *uint64_t result = *(_OWORD *)(a1[2] - 16);
  *(unsigned char *)(v4 + 10) = 0;
  uint64_t v6 = a1[2];
  if ((*(unsigned char *)(v6 - 8) & 0x40) != 0
    && (*(unsigned char *)(v4 + 9) & 4) != 0
    && (*(unsigned char *)(*(void *)(v6 - 16) + 9) & 3) != 0)
  {
    uint64_t result = (_OWORD *)luaC_barrierback_((uint64_t)a1, v4);
    uint64_t v6 = a1[2];
  }
  a1[2] = v6 - 32;
  return result;
}

void lua_rawseti(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = index2addr(a1, a2);
  uint64_t v6 = *v5;
  luaH_setint((uint64_t)a1, *v5, a3, (__n128 *)(a1[2] - 16));
  uint64_t v7 = a1[2];
  if ((*(unsigned char *)(v7 - 8) & 0x40) != 0
    && (*(unsigned char *)(v6 + 9) & 4) != 0
    && (*(unsigned char *)(*(void *)(v7 - 16) + 9) & 3) != 0)
  {
    luaC_barrierback_((uint64_t)a1, v6);
    uint64_t v7 = a1[2];
  }
  a1[2] = v7 - 16;
}

_OWORD *lua_rawsetp(void *a1, int a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v5 = *index2addr(a1, a2);
  uint64_t v8 = a3;
  LODWORD(v9) = 2;
  uint64_t result = luaH_set((uint64_t)a1, v5, &v8);
  *uint64_t result = *(_OWORD *)(a1[2] - 16);
  uint64_t v7 = a1[2];
  if ((*(unsigned char *)(v7 - 8) & 0x40) != 0
    && (*(unsigned char *)(v5 + 9) & 4) != 0
    && (*(unsigned char *)(*(void *)(v7 - 16) + 9) & 3) != 0)
  {
    uint64_t result = (_OWORD *)luaC_barrierback_((uint64_t)a1, v5);
    uint64_t v7 = a1[2];
  }
  a1[2] = v7 - 16;
  return result;
}

uint64_t lua_setmetatable(uint64_t *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = a1[2];
  if (*(_DWORD *)(v5 - 8)) {
    uint64_t v6 = *(void *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  if ((v3[1] & 0xF) == 7)
  {
    *(void *)(*v3 + 16) = v6;
    if (!v6) {
      goto LABEL_14;
    }
  }
  else
  {
    if ((v3[1] & 0xF) != 5)
    {
      *(void *)(a1[3] + 8 * (v3[1] & 0xF) + 440) = v6;
      goto LABEL_14;
    }
    *(void *)(*v3 + 40) = v6;
    if (!v6) {
      goto LABEL_14;
    }
  }
  uint64_t v7 = *v3;
  if ((*(unsigned char *)(*v3 + 9) & 4) != 0 && (*(unsigned char *)(v6 + 9) & 3) != 0)
  {
    luaC_barrier_((uint64_t)a1, v7, v6);
    uint64_t v7 = *v4;
  }
  luaC_checkfinalizer(a1, v7, v6);
LABEL_14:
  a1[2] -= 16;
  return 1;
}

uint64_t *lua_setuservalue(void *a1, int a2)
{
  uint64_t result = index2addr(a1, a2);
  uint64_t v4 = a1[2];
  uint64_t v5 = *result;
  *(void *)(v5 + 32) = *(void *)(v4 - 16);
  *(unsigned char *)(v5 + 10) = *(_DWORD *)(v4 - 8);
  uint64_t v6 = a1[2];
  if ((*(unsigned char *)(v6 - 8) & 0x40) != 0 && (*(unsigned char *)(*result + 9) & 4) != 0)
  {
    uint64_t v7 = *(void *)(v6 - 16);
    if ((*(unsigned char *)(v7 + 9) & 3) != 0)
    {
      uint64_t result = (uint64_t *)luaC_barrier_((uint64_t)a1, *result, v7);
      uint64_t v6 = a1[2];
    }
  }
  a1[2] = v6 - 16;
  return result;
}

uint64_t lua_callk(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (char *)(*(void *)(a1 + 16) + 16 * ~a2);
  if (a5 && !*(_WORD *)(a1 + 196))
  {
    *(void *)(*(void *)(a1 + 32) + 32) = a5;
    *(void *)(*(void *)(a1 + 32) + 48) = a4;
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t result = luaD_call(a1, v7, a3, v8);
  if (a3 == -1)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    unint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v10 + 8) < v11) {
      *(void *)(v10 + 8) = v11;
    }
  }
  return result;
}

uint64_t lua_pcallk(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a4) {
    unint64_t v11 = (char *)index2addr((void *)a1, a4) - *(void *)(a1 + 56);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = (char *)(*(void *)(a1 + 16) + 16 * ~a2);
  unsigned int v17 = v12;
  uint64_t v18 = 0;
  if (a6 && !*(_WORD *)(a1 + 196))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    *(void *)(v14 + 32) = a6;
    *(void *)(v14 + 48) = a5;
    *(void *)(v14 + 56) = &v12[-*(void *)(a1 + 56)];
    *(void *)(v14 + 40) = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = v11;
    *(unsigned char *)(v14 + 66) |= 0x10u;
    luaD_call(a1, v12, a3, 1);
    uint64_t result = 0;
    *(unsigned char *)(v14 + 66) &= ~0x10u;
    *(void *)(a1 + 176) = *(void *)(v14 + 40);
  }
  else
  {
    LODWORD(v18) = a3;
    uint64_t result = luaD_pcall(a1, (void (*)(uint64_t, uint64_t))f_call, (uint64_t)&v17, (uint64_t)&v12[-*(void *)(a1 + 56)], (uint64_t)v11);
  }
  if (a3 == -1)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    unint64_t v16 = *(void *)(a1 + 16);
    if (*(void *)(v15 + 8) < v16) {
      *(void *)(v15 + 8) = v16;
    }
  }
  return result;
}

uint64_t f_call(uint64_t a1, uint64_t a2)
{
  return luaD_call(a1, *(char **)a2, *(_DWORD *)(a2 + 8), 0);
}

uint64_t lua_load(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  if (a4) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = "?";
  }
  luaZ_init(a1, v15, a2, a3);
  uint64_t v8 = luaD_protectedparser(a1, (uint64_t)v15, (uint64_t)v7, a5);
  if (!v8)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 16) - 16);
    if (*(unsigned char *)(v10 + 10))
    {
      *(_OWORD *)**(void **)(v10 + 32) = *(_OWORD *)luaH_getint(*(void *)(*(void *)(a1 + 24) + 64), 2);
      unint64_t v11 = *(uint64_t **)(v10 + 32);
      uint64_t v14 = *v11;
      uint64_t v12 = v11 + 2;
      uint64_t v13 = (void *)v14;
      if ((*(unsigned char *)(v14 + 8) & 0x40) != 0 && v13 == v12) {
        luaC_upvalbarrier_(a1, *(uint64_t ***)(v10 + 32));
      }
    }
  }
  return v8;
}

uint64_t lua_dump(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v4 - 8) == 70) {
    return luaU_dump(a1, *(void *)(*(void *)(v4 - 16) + 24), a2, a3, a4);
  }
  else {
    return 1;
  }
}

uint64_t lua_status(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

uint64_t lua_gc(uint64_t a1, int a2, int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  uint64_t v5 = *(void *)(a1 + 24);
  switch(a2)
  {
    case 0:
      uint64_t result = 0;
      *(unsigned char *)(v5 + 87) = 0;
      return result;
    case 1:
      luaE_setdebt(*(void *)(a1 + 24), 0);
      uint64_t result = 0;
      *(unsigned char *)(v5 + 87) = 1;
      return result;
    case 2:
      luaC_fullgc(a1, 0);
      return 0;
    case 3:
      return (*(void *)(v5 + 24) + *(void *)(v5 + 16)) >> 10;
    case 4:
      return (*(_DWORD *)(v5 + 24) + *(_DWORD *)(v5 + 16)) & 0x3FF;
    case 5:
      char v6 = *(unsigned char *)(v5 + 87);
      *(unsigned char *)(v5 + 87) = 1;
      if (a3)
      {
        uint64_t v7 = *(void *)(v5 + 24) + ((uint64_t)a3 << 10);
        luaE_setdebt(v5, v7);
        if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
          luaC_step(a1);
        }
        *(unsigned char *)(v5 + 87) = v6;
        if (v7 < 1) {
          return 0;
        }
      }
      else
      {
        luaE_setdebt(v5, -2400);
        luaC_step(a1);
        *(unsigned char *)(v5 + 87) = v6;
      }
      return *(unsigned __int8 *)(v5 + 85) == 7;
    case 6:
      uint64_t result = *(unsigned int *)(v5 + 204);
      *(_DWORD *)(v5 + 204) = a3;
      return result;
    case 7:
      uint64_t result = *(unsigned int *)(v5 + 208);
      if (a3 <= 40) {
        int v8 = 40;
      }
      else {
        int v8 = a3;
      }
      *(_DWORD *)(v5 + 208) = v8;
      return result;
    case 9:
      return *(unsigned __int8 *)(v5 + 87);
    default:
      return result;
  }
}

uint64_t lua_error(void *a1)
{
  return 0;
}

uint64_t lua_next(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  uint64_t result = luaH_next(a1, *v3, (uint64_t *)(a1[2] - 16));
  uint64_t v5 = -16;
  if (result) {
    uint64_t v5 = 16;
  }
  a1[2] += v5;
  return result;
}

uint64_t lua_concat(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = result;
  if (a2 < 2)
  {
    if (!a2)
    {
      uint64_t v10 = *(void *)(result + 16);
      uint64_t result = luaS_newlstr(result, "", 0);
      *(void *)uint64_t v10 = result;
      *(_DWORD *)(v10 + 8) = *(unsigned __int8 *)(result + 8) | 0x40;
      *(void *)(v9 + 16) += 16;
    }
  }
  else
  {
    if (*(uint64_t *)(*(void *)(result + 24) + 24) >= 1) {
      luaC_step(result);
    }
    return luaV_concat(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t lua_len(void *a1, int a2)
{
  int v3 = index2addr(a1, a2);
  uint64_t result = luaV_objlen((uint64_t)a1, a1[2], v3);
  a1[2] += 16;
  return result;
}

uint64_t lua_getallocf(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = *(void *)(*(void *)(a1 + 24) + 8);
  }
  return **(void **)(a1 + 24);
}

uint64_t lua_setallocf(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(result + 24);
  *int v3 = a2;
  v3[1] = a3;
  return result;
}

uint64_t lua_newuserdata(uint64_t a1, unint64_t a2)
{
  if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
    luaC_step(a1);
  }
  uint64_t v4 = luaS_newudata(a1, a2);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)uint64_t v5 = v4;
  *(_DWORD *)(v5 + 8) = 71;
  *(void *)(a1 + 16) += 16;
  return v4 + 40;
}

__n128 lua_getupvalue(void *a1, int a2, int a3)
{
  uint64_t v7 = 0;
  uint64_t v5 = index2addr(a1, a2);
  if (aux_upvalue(v5, a3, &v7, 0, 0))
  {
    __n128 result = *v7;
    *(__n128 *)a1[2] = *v7;
    a1[2] += 16;
  }
  return result;
}

const char *aux_upvalue(_DWORD *a1, int a2, void *a3, void *a4, void *a5)
{
  if ((a1[2] & 0x3F) != 6)
  {
    if ((a1[2] & 0x3F) == 0x26 && a2 >= 1)
    {
      uint64_t v5 = *(void *)a1;
      if (*(unsigned __int8 *)(*(void *)a1 + 10) >= a2)
      {
        *a3 = v5 + 16 * (a2 - 1) + 32;
        if (a4) {
          *a4 = v5;
        }
        return "";
      }
    }
    return 0;
  }
  uint64_t v7 = (a2 - 1);
  if (a2 < 1) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (*(_DWORD *)(v8 + 16) < a2) {
    return 0;
  }
  uint64_t v9 = *(void *)a1 + 8 * v7;
  unint64_t v11 = *(void **)(v9 + 32);
  uint64_t v10 = (void *)(v9 + 32);
  *a3 = *v11;
  if (a5) {
    *a5 = *v10;
  }
  uint64_t v12 = *(void *)(*(void *)(v8 + 88) + 16 * v7);
  if (v12) {
    return (const char *)(v12 + 24);
  }
  else {
    return "(*no name)";
  }
}

const char *lua_setupvalue(void *a1, int a2, int a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v11 = 0;
  uint64_t v5 = index2addr(a1, a2);
  char v6 = aux_upvalue(v5, a3, &v13, &v12, &v11);
  if (v6)
  {
    uint64_t v7 = a1[2];
    a1[2] = v7 - 16;
    uint64_t v8 = v12;
    *uint64_t v13 = *(_OWORD *)(v7 - 16);
    if (v8)
    {
      uint64_t v9 = a1[2];
      if ((*(unsigned char *)(v9 + 8) & 0x40) != 0
        && (*(unsigned char *)(v8 + 9) & 4) != 0
        && (*(unsigned char *)(*(void *)v9 + 9) & 3) != 0)
      {
        luaC_barrier_((uint64_t)a1, v8, *(void *)v9);
      }
    }
    else if (v11 && ((*v11)[1] & 0x40) != 0 && *v11 == (uint64_t *)(v11 + 2))
    {
      luaC_upvalbarrier_((uint64_t)a1, v11);
    }
  }
  return v6;
}

uint64_t lua_upvalueid(void *a1, int a2, int a3)
{
  uint64_t v4 = index2addr(a1, a2);
  if ((v4[1] & 0x3F) == 0x26) {
    return *v4 + 16 * a3 + 16;
  }
  if ((v4[1] & 0x3F) == 6) {
    return *(void *)(*v4 + 8 * a3 + 24);
  }
  return 0;
}

uint64_t lua_upvaluejoin(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v8 = *index2addr(a1, a2) + 8 * a3;
  uint64_t v9 = index2addr(a1, a4);
  unint64_t v11 = *(void **)(v8 + 24);
  uint64_t v10 = (uint64_t ***)(v8 + 24);
  uint64_t v12 = *v9 + 8 * a5;
  uint64_t result = luaC_upvdeccount((uint64_t)a1, v11);
  uint64_t v14 = *(uint64_t ***)(v12 + 24);
  *uint64_t v10 = v14;
  uint64_t v15 = *v14;
  v14[1] = (uint64_t *)((char *)v14[1] + 1);
  if (v15 != (uint64_t *)(v14 + 2))
  {
    *((_DWORD *)v14 + 6) = 1;
    uint64_t v14 = *v10;
    uint64_t v15 = **v10;
  }
  if ((v15[1] & 0x40) != 0 && v15 == (uint64_t *)(v14 + 2))
  {
    return luaC_upvalbarrier_((uint64_t)a1, v14);
  }
  return result;
}

uint64_t luaL_traceback(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  long long v68 = 0u;
  memset(v69, 0, sizeof(v69));
  long long v66 = 0u;
  long long v67 = 0u;
  int v8 = lua_gettop((uint64_t)a1);
  int v9 = 1;
  int v10 = 1;
  memset(v70, 0, sizeof(v70));
  do
  {
    int v11 = v10;
    int v12 = v9;
    int v13 = lua_getstack(a2, v10, (uint64_t)v70);
    int v10 = 2 * v11;
    int v9 = v11;
  }
  while (v13);
  while (v12 < v11)
  {
    int v20 = v12 + v11;
    if (v12 + v11 < 0 != __OFADD__(v12, v11)) {
      ++v20;
    }
    int v21 = v20 >> 1;
    if (lua_getstack(a2, v20 >> 1, (uint64_t)v70)) {
      int v12 = v21 + 1;
    }
    else {
      int v11 = v21;
    }
  }
  if (v11 <= 23) {
    int v22 = 0;
  }
  else {
    int v22 = 12;
  }
  if (a3) {
    lua_pushfstring((uint64_t)a1, "%s\n", v14, v15, v16, v17, v18, v19, a3);
  }
  lua_pushstring((uint64_t)a1, "stack traceback:");
  if (lua_getstack(a2, a4, (uint64_t)&v66))
  {
    while (++a4 == v22)
    {
      lua_pushstring((uint64_t)a1, "\n\t...");
      a4 = v11 - 11;
LABEL_32:
      if (!lua_getstack(a2, a4, (uint64_t)&v66)) {
        goto LABEL_35;
      }
    }
    lua_getinfo(a2, "Slnt", (uint64_t)&v66);
    lua_pushfstring((uint64_t)a1, "\n\t%s:", v23, v24, v25, v26, v27, v28, (uint64_t)v69 + 8);
    if (SDWORD2(v68) >= 1) {
      lua_pushfstring((uint64_t)a1, "%d:", v29, v30, v31, v32, v33, v34, DWORD2(v68));
    }
    lua_pushstring((uint64_t)a1, " in ");
    if (pushglobalfuncname(a1, (uint64_t)&v66))
    {
      uint64_t v41 = lua_tolstring(a1, -1, 0);
      lua_pushfstring((uint64_t)a1, "function '%s'", v42, v43, v44, v45, v46, v47, v41);
      lua_rotate(a1, -2, -1);
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    else if (*(unsigned char *)v67)
    {
      lua_pushfstring((uint64_t)a1, "%s '%s'", v35, v36, v37, v38, v39, v40, v67);
    }
    else
    {
      int v48 = **((unsigned char **)&v67 + 1);
      if (v48 == 67)
      {
        uint64_t v49 = (uint64_t)a1;
        unsigned int v50 = "?";
      }
      else
      {
        if (v48 != 109)
        {
          lua_pushfstring((uint64_t)a1, "function <%s:%d>", v35, v36, v37, v38, v39, v40, (uint64_t)v69 + 8);
          goto LABEL_29;
        }
        uint64_t v49 = (uint64_t)a1;
        unsigned int v50 = "main chunk";
      }
      lua_pushstring(v49, v50);
    }
LABEL_29:
    if (BYTE7(v69[0])) {
      lua_pushstring((uint64_t)a1, "\n\t(...tail calls...)");
    }
    int v51 = lua_gettop((uint64_t)a1);
    lua_concat((uint64_t)a1, v51 - v8, v52, v53, v54, v55, v56, v57);
    goto LABEL_32;
  }
LABEL_35:
  int v58 = lua_gettop((uint64_t)a1);
  return lua_concat((uint64_t)a1, v58 - v8, v59, v60, v61, v62, v63, v64);
}

uint64_t luaL_argerror(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  *(_OWORD *)__s1 = 0u;
  if (!lua_getstack((uint64_t)a1, 0, (uint64_t)&v18)) {
    return luaL_error(a1, "bad argument #%d (%s)", v4, v5, v6, v7, v8, v9, a2);
  }
  lua_getinfo((uint64_t)a1, "n", (uint64_t)&v18);
  if (!cstdlib_strcmp(__s1[0], "method"))
  {
    a2 = (a2 - 1);
    if (!a2) {
      return luaL_error(a1, "calling '%s' on bad self (%s)", v10, v11, v12, v13, v14, v15, *((uint64_t *)&v18 + 1));
    }
  }
  if (!*((void *)&v18 + 1))
  {
    if (pushglobalfuncname(a1, (uint64_t)&v18)) {
      uint64_t v16 = (const char *)lua_tolstring(a1, -1, 0);
    }
    else {
      uint64_t v16 = "?";
    }
    *((void *)&v18 + 1) = v16;
  }
  return luaL_error(a1, "bad argument #%d to '%s' (%s)", v10, v11, v12, v13, v14, v15, a2);
}

uint64_t luaL_error(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  luaL_where((uint64_t)a1, 1);
  lua_pushvfstring((uint64_t)a1, a2, &a9);
  lua_concat((uint64_t)a1, 2, v11, v12, v13, v14, v15, v16);
  return lua_error(a1);
}

uint64_t pushglobalfuncname(void *a1, uint64_t a2)
{
  unsigned int v4 = lua_gettop((uint64_t)a1);
  lua_getinfo((uint64_t)a1, "f", a2);
  lua_getfield(a1, -1001000, "_LOADED");
  int v5 = v4 + 1;
  if (findfield(a1, v4 + 1, 2))
  {
    uint64_t v6 = lua_tolstring(a1, -1, 0);
    if (!cstdlib_strncmp((const char *)v6, "_G.", 3uLL))
    {
      lua_pushstring((uint64_t)a1, (char *)(v6 + 3));
      lua_rotate(a1, -2, -1);
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    lua_copy((uint64_t)a1, -1, v5);
    uint64_t v7 = 1;
    unsigned int v4 = -3;
  }
  else
  {
    uint64_t v7 = 0;
  }
  lua_settop((uint64_t)a1, v4);
  return v7;
}

uint64_t luaL_where(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  memset(v10, 0, sizeof(v10));
  if (lua_getstack(a1, a2, (uint64_t)v10) && (lua_getinfo(a1, "Sl", (uint64_t)v10), SDWORD2(v11) >= 1)) {
    return lua_pushfstring(a1, "%s:%d: ", v3, v4, v5, v6, v7, v8, (uint64_t)v12 + 8);
  }
  else {
    return lua_pushstring(a1, "");
  }
}

uint64_t luaL_newmetatable(void *a1, char *a2)
{
  if (lua_getfield(a1, -1001000, a2)) {
    return 0;
  }
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushstring((uint64_t)a1, a2);
  lua_setfield(a1, -2, "__name");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -1001000, a2);
  return 1;
}

uint64_t luaL_setmetatable(uint64_t *a1, char *a2)
{
  lua_getfield(a1, -1001000, a2);

  return lua_setmetatable(a1, -2);
}

uint64_t luaL_testudata(void *a1, int a2, char *a3)
{
  uint64_t v6 = lua_touserdata(a1, a2);
  if (v6)
  {
    lua_getfield(a1, -1001000, a3);
    if (lua_getmetatable(a1, a2))
    {
      unsigned int v7 = -3;
      while (!lua_rawequal(a1, -1, v7 + 1))
      {
        --v7;
        if (!lua_getmetatable(a1, -1))
        {
          uint64_t v6 = 0;
          break;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
      unsigned int v7 = -3;
    }
    lua_settop((uint64_t)a1, v7);
  }
  return v6;
}

uint64_t luaL_checkudata(void *a1, uint64_t a2, char *a3)
{
  uint64_t v6 = luaL_testudata(a1, a2, a3);
  if (!v6) {
    typeerror(a1, a2, (uint64_t)a3);
  }
  return v6;
}

uint64_t typeerror(void *a1, uint64_t a2, uint64_t a3)
{
  if (luaL_getmetafield(a1, a2, "__name") == 4)
  {
    lua_tolstring(a1, -1, 0);
  }
  else if (lua_type(a1, a2) != 2)
  {
    int v12 = lua_type(a1, a2);
    lua_typename((uint64_t)a1, v12);
  }
  lua_pushfstring((uint64_t)a1, "%s expected, got %s", v6, v7, v8, v9, v10, v11, a3);

  return luaL_argerror(a1, a2);
}

uint64_t luaL_checkoption(void *a1, uint64_t a2, const char *a3, const char **a4)
{
  if (!a3 || (uint64_t v7 = a3, (int)lua_type(a1, a2) >= 1)) {
    uint64_t v7 = (const char *)luaL_checklstring(a1, a2, 0);
  }
  uint64_t v14 = *a4;
  if (*a4)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a4 + 1;
    while (cstdlib_strcmp(v14, v7))
    {
      uint64_t v14 = v16[v15++];
      if (!v14) {
        goto LABEL_8;
      }
    }
    return v15;
  }
  else
  {
LABEL_8:
    lua_pushfstring((uint64_t)a1, "invalid option '%s'", v8, v9, v10, v11, v12, v13, (uint64_t)v7);
    return luaL_argerror(a1, a2);
  }
}

uint64_t luaL_optlstring(void *a1, uint64_t a2, const char *a3, size_t *a4)
{
  if ((int)lua_type(a1, a2) <= 0)
  {
    if (a4)
    {
      if (a3) {
        size_t v9 = cstdlib_strlen(a3);
      }
      else {
        size_t v9 = 0;
      }
      *a4 = v9;
    }
    return (uint64_t)a3;
  }
  else
  {
    return luaL_checklstring(a1, a2, a4);
  }
}

uint64_t luaL_checklstring(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = lua_tolstring(a1, a2, a3);
  if (!v5)
  {
    uint64_t v6 = lua_typename((uint64_t)a1, 4);
    typeerror(a1, a2, (uint64_t)v6);
  }
  return v5;
}

uint64_t luaL_checkstack(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = lua_checkstack(a1, a2 + 20);
  if (!result)
  {
    if (a3)
    {
      return luaL_error(a1, "stack overflow (%s)", v12, v13, v14, v15, v16, v17, a3);
    }
    else
    {
      return luaL_error(a1, "stack overflow", v12, v13, v14, v15, v16, v17, a9);
    }
  }
  return result;
}

uint64_t luaL_checktype(void *a1, uint64_t a2, int a3)
{
  uint64_t result = lua_type(a1, a2);
  if (result != a3)
  {
    uint64_t v7 = lua_typename((uint64_t)a1, a3);
    return typeerror(a1, a2, (uint64_t)v7);
  }
  return result;
}

uint64_t luaL_checkany(void *a1, uint64_t a2)
{
  uint64_t result = lua_type(a1, a2);
  if (result == -1)
  {
    return luaL_argerror(a1, a2);
  }
  return result;
}

double luaL_checknumber(void *a1, uint64_t a2)
{
  int v7 = 0;
  double v4 = lua_tonumberx(a1, a2, &v7);
  if (!v7)
  {
    uint64_t v5 = lua_typename((uint64_t)a1, 3);
    typeerror(a1, a2, (uint64_t)v5);
  }
  return v4;
}

double luaL_optnumber(void *a1, uint64_t a2, double a3)
{
  if ((int)lua_type(a1, a2) < 1) {
    return a3;
  }

  return luaL_checknumber(a1, a2);
}

uint64_t luaL_checkinteger(void *a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t v4 = lua_tointegerx(a1, a2, &v7);
  if (!v7)
  {
    if (lua_isnumber(a1, a2))
    {
      luaL_argerror(a1, a2);
    }
    else
    {
      uint64_t v5 = lua_typename((uint64_t)a1, 3);
      typeerror(a1, a2, (uint64_t)v5);
    }
  }
  return v4;
}

uint64_t luaL_optinteger(void *a1, uint64_t a2, uint64_t a3)
{
  if ((int)lua_type(a1, a2) < 1) {
    return a3;
  }

  return luaL_checkinteger(a1, a2);
}

char *luaL_prepbuffsize(const void **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (char *)a1[1];
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)&v10[-v9] >= a2)
  {
    uint64_t v16 = (char *)*a1;
  }
  else
  {
    uint64_t v11 = (char *)a1[3];
    uint64_t v12 = 2 * (void)v10;
    if (v12 - v9 >= a2) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v9 + a2;
    }
    BOOL v15 = v13 >= v9;
    unint64_t v14 = v13 - v9;
    BOOL v15 = v15 && v14 >= a2;
    if (!v15) {
      luaL_error(a1[3], "buffer too large", a3, a4, a5, a6, a7, a8, v18);
    }
    uint64_t v16 = (char *)lua_newuserdata((uint64_t)v11, v13);
    cstdlib_memcpy(v16, *a1, (size_t)a1[2]);
    if (*a1 != a1 + 4)
    {
      lua_rotate(v11, -2, -1);
      lua_settop((uint64_t)v11, 0xFFFFFFFE);
    }
    *a1 = v16;
    a1[1] = (const void *)v13;
    unint64_t v9 = (unint64_t)a1[2];
  }
  return &v16[v9];
}

void *luaL_addlstring(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = luaL_prepbuffsize((const void **)a1, a3, a3, a4, a5, a6, a7, a8);
  uint64_t result = cstdlib_memcpy(v11, a2, a3);
  *(void *)(a1 + 16) += a3;
  return result;
}

void *luaL_addstring(uint64_t a1, char *__s)
{
  size_t v4 = cstdlib_strlen(__s);
  uint64_t v11 = luaL_prepbuffsize((const void **)a1, v4, v5, v6, v7, v8, v9, v10);
  uint64_t result = cstdlib_memcpy(v11, __s, v4);
  *(void *)(a1 + 16) += v4;
  return result;
}

uint64_t luaL_pushresult(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t result = lua_pushlstring((uint64_t)v2, *(char **)a1, *(void *)(a1 + 16));
  if (*(void *)a1 != a1 + 32)
  {
    lua_rotate(v2, -2, -1);
    return lua_settop((uint64_t)v2, 0xFFFFFFFE);
  }
  return result;
}

uint64_t luaL_pushresultsize(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) += a2;
  return luaL_pushresult(a1);
}

uint64_t luaL_addvalue(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  size_t v14 = 0;
  uint64_t v9 = (const void *)lua_tolstring(v2, -1, &v14);
  if (*(void *)a1 != a1 + 32) {
    lua_rotate(v2, -2, 1);
  }
  size_t v10 = v14;
  uint64_t v11 = luaL_prepbuffsize((const void **)a1, v14, v3, v4, v5, v6, v7, v8);
  cstdlib_memcpy(v11, v9, v10);
  *(void *)(a1 + 16) += v10;
  if (*(void *)a1 == a1 + 32) {
    int v12 = -1;
  }
  else {
    int v12 = -2;
  }
  lua_rotate(v2, v12, -1);
  return lua_settop((uint64_t)v2, 0xFFFFFFFE);
}

double luaL_buffinit(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = a1;
  *(void *)a2 = a2 + 32;
  *(void *)&double result = 0x2000;
  *(_OWORD *)(a2 + 8) = xmmword_2206E1D60;
  return result;
}

char *luaL_buffinitsize(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a2 + 24) = a1;
  *(void *)a2 = a2 + 32;
  *(_OWORD *)(a2 + 8) = xmmword_2206E1D60;
  return luaL_prepbuffsize((const void **)a2, a3, a3, a4, a5, a6, a7, a8);
}

uint64_t luaL_ref(void *a1, uint64_t a2)
{
  if (lua_type(a1, -1))
  {
    int v4 = lua_absindex((uint64_t)a1, a2);
    lua_rawgeti(a1, v4, 0);
    uint64_t v5 = lua_tointegerx(a1, -1, 0);
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    if (v5)
    {
      lua_rawgeti(a1, v4, (int)v5);
      lua_rawseti(a1, v4, 0);
    }
    else
    {
      uint64_t v5 = lua_rawlen(a1, v4) + 1;
    }
    lua_rawseti(a1, v4, (int)v5);
  }
  else
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    return 0xFFFFFFFFLL;
  }
  return v5;
}

void luaL_unref(void *a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    int v5 = lua_absindex((uint64_t)a1, a2);
    lua_rawgeti(a1, v5, 0);
    lua_rawseti(a1, v5, a3);
    lua_pushinteger((uint64_t)a1, a3);
    lua_rawseti(a1, v5, 0);
  }
}

uint64_t luaL_loadbufferx(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  return lua_load(a1, (uint64_t)getS, (uint64_t)v6, a4, a5);
}

uint64_t getS(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  if (!v3) {
    return 0;
  }
  *a3 = v3;
  a2[1] = 0;
  return *a2;
}

uint64_t luaL_loadstring(uint64_t a1, char *__s)
{
  v4[0] = __s;
  v4[1] = (const char *)cstdlib_strlen(__s);
  return lua_load(a1, (uint64_t)getS, (uint64_t)v4, v4[0], 0);
}

uint64_t luaL_getmetafield(void *a1, int a2, char *a3)
{
  if (!lua_getmetatable(a1, a2)) {
    return 0;
  }
  lua_pushstring((uint64_t)a1, a3);
  uint64_t v5 = lua_rawget(a1, -2);
  if (v5)
  {
    unsigned int v6 = -2;
    lua_rotate(a1, -2, -1);
  }
  else
  {
    unsigned int v6 = -3;
  }
  lua_settop((uint64_t)a1, v6);
  return v5;
}

uint64_t luaL_callmeta(void *a1, uint64_t a2, char *a3)
{
  int v5 = lua_absindex((uint64_t)a1, a2);
  if (!luaL_getmetafield(a1, v5, a3)) {
    return 0;
  }
  lua_pushvalue(a1, v5);
  uint64_t v6 = 1;
  lua_callk((uint64_t)a1, 1, 1, 0, 0);
  return v6;
}

uint64_t luaL_len(void *a1, int a2)
{
  int v12 = 0;
  lua_len(a1, a2);
  uint64_t v9 = lua_tointegerx(a1, -1, &v12);
  if (!v12) {
    luaL_error(a1, "object length is not an integer", v3, v4, v5, v6, v7, v8, v11);
  }
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return v9;
}

uint64_t luaL_tolstring(void *a1, uint64_t a2, void *a3)
{
  int v4 = a2;
  if (!luaL_callmeta(a1, a2, "__tostring"))
  {
    switch(lua_type(a1, v4))
    {
      case 0u:
        uint64_t v7 = "nil";
        goto LABEL_10;
      case 1u:
        if (lua_toBOOLean(a1, v4)) {
          uint64_t v7 = "true";
        }
        else {
          uint64_t v7 = "false";
        }
LABEL_10:
        lua_pushstring((uint64_t)a1, v7);
        break;
      case 3u:
        if (lua_isinteger(a1, v4))
        {
          uint64_t v28 = lua_tointegerx(a1, v4, 0);
          lua_pushfstring((uint64_t)a1, "%I", v16, v17, v18, v19, v20, v21, v28);
        }
        else
        {
          uint64_t v29 = lua_tonumberx(a1, v4, 0);
          lua_pushfstring((uint64_t)a1, "%f", v22, v23, v24, v25, v26, v27, v29);
        }
        break;
      case 4u:
        lua_pushvalue(a1, v4);
        break;
      default:
        int v8 = lua_type(a1, v4);
        uint64_t v9 = lua_typename((uint64_t)a1, v8);
        lua_topointer(a1, v4);
        lua_pushfstring((uint64_t)a1, "%s: %p", v10, v11, v12, v13, v14, v15, (uint64_t)v9);
        break;
    }
  }

  return lua_tolstring(a1, -1, a3);
}

uint64_t luaL_setfuncs(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_checkstack(a1, a3, (uint64_t)"too many upvalues", a4, a5, a6, a7, a8, v14);
  if (*(void *)a2)
  {
    do
    {
      if (a3 >= 1)
      {
        int v11 = a3;
        do
        {
          lua_pushvalue(a1, -a3);
          --v11;
        }
        while (v11);
      }
      lua_pushcclosure((uint64_t)a1, *(void *)(a2 + 8), a3);
      lua_setfield(a1, -2 - a3, *(char **)a2);
      uint64_t v12 = *(void *)(a2 + 16);
      a2 += 16;
    }
    while (v12);
  }

  return lua_settop((uint64_t)a1, ~a3);
}

uint64_t luaL_getsubtable(void *a1, uint64_t a2, char *a3)
{
  if (lua_getfield(a1, a2, a3) == 5) {
    return 1;
  }
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  int v7 = lua_absindex((uint64_t)a1, a2);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushvalue(a1, -1);
  lua_setfield(a1, v7, a3);
  return 0;
}

uint64_t *luaL_requiref(void *a1, char *a2, uint64_t a3, int a4)
{
  luaL_getsubtable(a1, 4293966296, "_LOADED");
  lua_getfield(a1, -1, a2);
  if (!lua_toBOOLean(a1, -1))
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    lua_pushcclosure((uint64_t)a1, a3, 0);
    lua_pushstring((uint64_t)a1, a2);
    lua_callk((uint64_t)a1, 1, 1, 0, 0);
    lua_pushvalue(a1, -1);
    lua_setfield(a1, -3, a2);
  }
  lua_rotate(a1, -2, -1);
  double result = (uint64_t *)lua_settop((uint64_t)a1, 0xFFFFFFFE);
  if (a4)
  {
    lua_pushvalue(a1, -1);
    return lua_setglobal((uint64_t)a1, a2);
  }
  return result;
}

uint64_t luaL_gsub(void *a1, char *a2, char *__s, char *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  size_t v8 = cstdlib_strlen(__s);
  memset(v22, 0, 480);
  uint64_t v21 = a1;
  uint64_t v19 = v22;
  long long v20 = xmmword_2206E1D60;
  uint64_t v9 = cstdlib_strstr(a2, __s);
  if (v9)
  {
    uint64_t v16 = v9;
    do
    {
      uint64_t v17 = luaL_prepbuffsize((const void **)&v19, v16 - a2, v10, v11, v12, v13, v14, v15);
      cstdlib_memcpy(v17, a2, v16 - a2);
      *((void *)&v20 + 1) += v16 - a2;
      luaL_addstring((uint64_t)&v19, a4);
      a2 = &v16[v8];
      uint64_t v16 = cstdlib_strstr(&v16[v8], __s);
    }
    while (v16);
  }
  luaL_addstring((uint64_t)&v19, a2);
  luaL_pushresult((uint64_t)&v19);
  return lua_tolstring(a1, -1, 0);
}

double *luaL_checkversion_(void *a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19 = (double *)lua_version((uint64_t)a1);
  if (a2 != 136) {
    luaL_error(a1, "core and library have incompatible numeric types", v13, v14, v15, v16, v17, v18, v27);
  }
  double result = (double *)lua_version(0);
  if (v19 == result)
  {
    if (*v19 != a3) {
      return (double *)luaL_error(a1, "version mismatch: app. needs %f, Lua core provides %f", v21, v22, v23, v24, v25, v26, *(uint64_t *)&a3);
    }
  }
  else
  {
    return (double *)luaL_error(a1, "multiple Lua VMs detected", v21, v22, v23, v24, v25, v26, a10);
  }
  return result;
}

uint64_t findfield(void *a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 0;
  }
  if (lua_type(a1, -1) != 5) {
    return 0;
  }
  lua_pushnil((uint64_t)a1);
  if (!lua_next(a1, -2)) {
    return 0;
  }
  uint64_t v6 = (a3 - 1);
  while (1)
  {
    if (lua_type(a1, -2) == 4)
    {
      if (lua_rawequal(a1, a2, -1))
      {
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
        return 1;
      }
      if (findfield(a1, a2, v6)) {
        break;
      }
    }
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    if (!lua_next(a1, -2)) {
      return 0;
    }
  }
  lua_rotate(a1, -2, -1);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  lua_pushstring((uint64_t)a1, ".");
  uint64_t v7 = 1;
  lua_rotate(a1, -2, 1);
  lua_concat((uint64_t)a1, 3, v9, v10, v11, v12, v13, v14);
  return v7;
}

uint64_t luaopen_base(void *a1)
{
  lua_rawgeti(a1, -1001000, 2);
  luaL_setfuncs(a1, (uint64_t)&base_funcs, 0, v2, v3, v4, v5, v6);
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "_G");
  lua_pushstring((uint64_t)a1, "Lua 5.3");
  lua_setfield(a1, -2, "_VERSION");
  for (int i = 0; i != 9; ++i)
  {
    size_t v8 = lua_typename((uint64_t)a1, i);
    lua_pushstring((uint64_t)a1, v8);
  }
  lua_pushcclosure((uint64_t)a1, (uint64_t)luaB_type, 9);
  lua_setfield(a1, -2, "type");
  return 1;
}

uint64_t luaB_type(void *a1)
{
  luaL_checkany(a1, 1);
  int v2 = lua_type(a1, 1);
  lua_pushvalue(a1, -1001001 - v2);
  return 1;
}

unint64_t luaB_assert(void *a1)
{
  if (lua_toBOOLean(a1, 1))
  {
    return lua_gettop((uint64_t)a1);
  }
  else
  {
    luaL_checkany(a1, 1);
    lua_rotate(a1, 1, -1);
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    lua_pushstring((uint64_t)a1, "assertion failed!");
    lua_settop((uint64_t)a1, 1u);
    return luaB_error(a1);
  }
}

uint64_t luaB_collectgarbage(void *a1)
{
  int v2 = luaB_collectgarbage_optsnum[(int)luaL_checkoption(a1, 1, "collect", (const char **)luaB_collectgarbage_opts)];
  int v3 = luaL_optinteger(a1, 2, 0);
  int v4 = lua_gc((uint64_t)a1, v2, v3);
  int v5 = v4;
  if (v2 == 9 || v2 == 5)
  {
    lua_pushBOOLean((uint64_t)a1, v4);
  }
  else if (v2 == 3)
  {
    int v7 = lua_gc((uint64_t)a1, 4, 0);
    lua_pushnumber((uint64_t)a1, (double)v7 * 0.0009765625 + (double)v5);
  }
  else
  {
    lua_pushinteger((uint64_t)a1, v4);
  }
  return 1;
}

uint64_t luaB_error(void *a1)
{
  int v2 = luaL_optinteger(a1, 2, 1);
  lua_settop((uint64_t)a1, 1u);
  if (lua_isstring(a1, 1) && v2 >= 1)
  {
    luaL_where((uint64_t)a1, v2);
    lua_pushvalue(a1, 1);
    lua_concat((uint64_t)a1, 2, v3, v4, v5, v6, v7, v8);
  }

  return lua_error(a1);
}

uint64_t luaB_getmetatable(void *a1)
{
  if (lua_getmetatable(a1, 1)) {
    luaL_getmetafield(a1, 1, "__metatable");
  }
  else {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t luaB_ipairs(void *a1)
{
  if (luaL_getmetafield(a1, 1, "__index")) {
    int v2 = ipairsaux;
  }
  else {
    int v2 = ipairsaux_raw;
  }
  luaL_checkany(a1, 1);
  lua_pushcclosure((uint64_t)a1, (uint64_t)v2, 0);
  lua_pushvalue(a1, 1);
  lua_pushinteger((uint64_t)a1, 0);
  return 3;
}

uint64_t luaB_load(void *a1)
{
  uint64_t v9 = 0;
  int v2 = (const char *)lua_tolstring(a1, 1, &v9);
  uint64_t v3 = luaL_optlstring(a1, 3, "bt", 0);
  int v4 = lua_type(a1, 4);
  if (v2)
  {
    uint64_t v5 = (const char *)luaL_optlstring(a1, 2, v2, 0);
    if (luaL_loadbufferx((uint64_t)a1, (uint64_t)v2, v9, v5, v3))
    {
LABEL_3:
      lua_pushnil((uint64_t)a1);
      lua_rotate(a1, -2, 1);
      return 2;
    }
  }
  else
  {
    uint64_t v8 = (const char *)luaL_optlstring(a1, 2, "=(load)", 0);
    luaL_checktype(a1, 1, 6);
    lua_settop((uint64_t)a1, 5u);
    if (lua_load((uint64_t)a1, (uint64_t)generic_reader, 0, v8, v3)) {
      goto LABEL_3;
    }
  }
  if (v4 == -1) {
    return 1;
  }
  lua_pushvalue(a1, 4);
  uint64_t v6 = 1;
  if (!lua_setupvalue(a1, -2, 1)) {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
  }
  return v6;
}

uint64_t luaB_next(void *a1)
{
  luaL_checktype(a1, 1, 5);
  uint64_t v2 = 2;
  lua_settop((uint64_t)a1, 2u);
  if (!lua_next(a1, 1))
  {
    lua_pushnil((uint64_t)a1);
    return 1;
  }
  return v2;
}

uint64_t luaB_pairs(void *a1)
{
  if (luaL_getmetafield(a1, 1, "__pairs"))
  {
    lua_pushvalue(a1, 1);
    lua_callk((uint64_t)a1, 1, 3, 0, 0);
  }
  else
  {
    luaL_checktype(a1, 1, 5);
    lua_pushcclosure((uint64_t)a1, (uint64_t)luaB_next, 0);
    lua_pushvalue(a1, 1);
    lua_pushnil((uint64_t)a1);
  }
  return 3;
}

uint64_t luaB_pcall(void *a1)
{
  luaL_checkany(a1, 1);
  lua_pushBOOLean((uint64_t)a1, 1);
  lua_rotate(a1, 1, 1);
  int v2 = lua_gettop((uint64_t)a1);
  unsigned int v3 = lua_pcallk((uint64_t)a1, v2 - 2, -1, 0, 0, (uint64_t)finishpcall);

  return finishpcall(a1, v3, 0);
}

uint64_t luaB_rawequal(void *a1)
{
  luaL_checkany(a1, 1);
  luaL_checkany(a1, 2);
  int v2 = lua_rawequal(a1, 1, 2);
  lua_pushBOOLean((uint64_t)a1, v2);
  return 1;
}

uint64_t luaB_rawlen(void *a1)
{
  if ((lua_type(a1, 1) & 0xFFFFFFFE) != 4) {
    luaL_argerror(a1, 1);
  }
  uint64_t v2 = lua_rawlen(a1, 1);
  lua_pushinteger((uint64_t)a1, v2);
  return 1;
}

uint64_t luaB_rawget(void *a1)
{
  return 1;
}

uint64_t luaB_rawset(void *a1)
{
  return 1;
}

uint64_t luaB_select(void *a1)
{
  int v2 = lua_gettop((uint64_t)a1);
  if (lua_type(a1, 1) == 4 && *(unsigned char *)lua_tolstring(a1, 1, 0) == 35)
  {
    lua_pushinteger((uint64_t)a1, v2 - 1);
    return 1;
  }
  else
  {
    uint64_t v4 = luaL_checkinteger(a1, 1);
    uint64_t v5 = v2;
    if (v4 < v2) {
      uint64_t v5 = v4;
    }
    if (v4 >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = v4 + v2;
    }
    if (v6 <= 0) {
      luaL_argerror(a1, 1);
    }
    return (v2 - v6);
  }
}

uint64_t luaB_setmetatable(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10 = lua_type(a1, 2);
  luaL_checktype(a1, 1, 5);
  if (v10 && v10 != 5) {
    luaL_argerror(a1, 2);
  }
  if (luaL_getmetafield(a1, 1, "__metatable"))
  {
    return luaL_error(a1, "cannot change a protected metatable", v11, v12, v13, v14, v15, v16, a9);
  }
  else
  {
    lua_settop((uint64_t)a1, 2u);
    lua_setmetatable(a1, 1);
    return 1;
  }
}

uint64_t luaB_tonumber(void *a1)
{
  if ((int)lua_type(a1, 2) > 0)
  {
    uint64_t v16 = 0;
    uint64_t v2 = luaL_checkinteger(a1, 2);
    luaL_checktype(a1, 1, 4);
    unsigned int v3 = (const char *)luaL_checklstring(a1, 1, &v16);
    if ((unint64_t)(v2 - 2) >= 0x23) {
      luaL_argerror(a1, 2);
    }
    size_t v4 = cstdlib_strspn(v3, " \f\n\r\t\v");
    int v5 = v3[v4];
    if (v5 == 45 || v5 == 43) {
      uint64_t v7 = (unsigned __int8 *)&v3[v4 + 1];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)&v3[v4];
    }
    if (cstdlib_isalnum(*v7))
    {
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = cstdlib_isdigit(*v7) ? (char)*v7 - 48 : cstdlib_toupper(*v7) - 55;
        if (v9 >= (int)v2) {
          break;
        }
        unsigned __int8 v10 = *++v7;
        uint64_t v8 = v8 * (int)v2 + v9;
        if (!cstdlib_isalnum(v10))
        {
          uint64_t v11 = (const char *)&v7[cstdlib_strspn((const char *)v7, " \f\n\r\t\v")];
          if (v5 == 45) {
            uint64_t v12 = -v8;
          }
          else {
            uint64_t v12 = v8;
          }
          goto LABEL_21;
        }
      }
    }
    uint64_t v12 = 0;
    uint64_t v11 = 0;
LABEL_21:
    if (v11 == &v3[v16])
    {
      lua_pushinteger((uint64_t)a1, v12);
      return 1;
    }
LABEL_22:
    lua_pushnil((uint64_t)a1);
    return 1;
  }
  luaL_checkany(a1, 1);
  if (lua_type(a1, 1) == 3)
  {
    lua_settop((uint64_t)a1, 1u);
    return 1;
  }
  uint64_t v16 = 0;
  uint64_t v13 = (char *)lua_tolstring(a1, 1, &v16);
  if (!v13) {
    goto LABEL_22;
  }
  uint64_t v14 = lua_stringtonumber((uint64_t)a1, v13);
  if (v14 != v16 + 1) {
    goto LABEL_22;
  }
  return 1;
}

uint64_t luaB_tostring(void *a1)
{
  return 1;
}

uint64_t luaB_xpcall(void *a1)
{
  int v2 = lua_gettop((uint64_t)a1);
  luaL_checktype(a1, 2, 6);
  lua_pushBOOLean((uint64_t)a1, 1);
  lua_pushvalue(a1, 1);
  lua_rotate(a1, 3, 2);
  unsigned int v3 = lua_pcallk((uint64_t)a1, v2 - 2, -1, 2, 2, (uint64_t)finishpcall);

  return finishpcall(a1, v3, 2);
}

uint64_t ipairsaux(void *a1)
{
  uint64_t v2 = luaL_checkinteger(a1, 2) + 1;
  lua_pushinteger((uint64_t)a1, v2);
  if (lua_geti(a1, 1, v2)) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t ipairsaux_raw(void *a1)
{
  uint64_t v2 = luaL_checkinteger(a1, 2) + 1;
  luaL_checktype(a1, 1, 5);
  lua_pushinteger((uint64_t)a1, v2);
  if (lua_rawgeti(a1, 1, v2)) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t generic_reader(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_checkstack(a1, 2, (uint64_t)"too many nested functions", a4, a5, a6, a7, a8, v17);
  lua_pushvalue(a1, 1);
  lua_callk((uint64_t)a1, 0, 1, 0, 0);
  if (lua_type(a1, -1))
  {
    if (!lua_isstring(a1, -1)) {
      luaL_error(a1, "reader function must return a string", v10, v11, v12, v13, v14, v15, v18);
    }
    lua_copy((uint64_t)a1, -1, 5);
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    return lua_tolstring(a1, 5, a3);
  }
  else
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    *a3 = 0;
    return 0;
  }
}

uint64_t finishpcall(void *a1, unsigned int a2, int a3)
{
  if (a2 < 2) {
    return lua_gettop((uint64_t)a1) - a3;
  }
  lua_pushBOOLean((uint64_t)a1, 0);
  lua_pushvalue(a1, -2);
  return 2;
}

uint64_t luaopen_bit32(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return luaL_error(a1, "library 'bit32' has been deprecated", a3, a4, a5, a6, a7, a8, a9);
}

int *luaK_nil(int *result, int a2, int a3)
{
  uint64_t v3 = result[8];
  if ((int)v3 <= result[9]) {
    return (int *)luaK_code((uint64_t)result, ((a3 << 23) - 0x800000) | (a2 << 6) | 4u);
  }
  uint64_t v4 = *(void *)(*(void *)result + 56);
  uint64_t v5 = v3 - 1;
  unsigned int v6 = *(_DWORD *)(v4 + 4 * v5);
  if ((v6 & 0x3F) != 4) {
    return (int *)luaK_code((uint64_t)result, ((a3 << 23) - 0x800000) | (a2 << 6) | 4u);
  }
  int v7 = a3 + a2;
  int v8 = (v6 >> 6);
  int v9 = (v6 >> 23) + v8;
  if ((v8 > a2 || v9 + 1 < a2) && (v8 < a2 || v8 > v7)) {
    return (int *)luaK_code((uint64_t)result, ((a3 << 23) - 0x800000) | (a2 << 6) | 4u);
  }
  if (v8 >= a2) {
    int v8 = a2;
  }
  if (v9 >= v7) {
    int v12 = (v6 >> 23) + (v6 >> 6);
  }
  else {
    int v12 = v7 + 511;
  }
  *(_DWORD *)(v4 + 4 * v5) = v6 & 0x7FC03F | (v8 << 6) | ((v12 - v8) << 23);
  return result;
}

uint64_t luaK_codeABC(uint64_t a1, int a2, int a3, int a4, int a5)
{
  return luaK_code(a1, a2 | (a3 << 6) | (a4 << 23) | (a5 << 14));
}

uint64_t luaK_jump(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = -1;
  unsigned int v4 = luaK_code(a1, 2147450910);
  luaK_concat((uint64_t *)a1, (int *)&v4, v2);
  return v4;
}

uint64_t luaK_codeABx(uint64_t a1, int a2, int a3, int a4)
{
  return luaK_code(a1, a2 | (a3 << 6) | (a4 << 14));
}

uint64_t *luaK_concat(uint64_t *result, int *a2, int a3)
{
  if (a3 != -1)
  {
    int v3 = *a2;
    if (*a2 == -1)
    {
      *a2 = a3;
    }
    else
    {
      do
      {
        int v4 = v3;
        int v5 = (*(_DWORD *)(*(void *)(*result + 56) + 4 * v3) >> 14) - 0x1FFFF;
        v3 += v5 + 1;
      }
      while (v5 != -1 && v3 != -1);
      return (uint64_t *)fixjump(result, v4, a3);
    }
  }
  return result;
}

uint64_t luaK_ret(uint64_t a1, int a2, int a3)
{
  return luaK_code(a1, ((a3 << 23) + 0x800000) | (a2 << 6) | 0x26u);
}

uint64_t luaK_getlabel(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(a1 + 36) = v1;
  return v1;
}

uint64_t *luaK_patchlist(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 32) != a3) {
    return (uint64_t *)patchlistaux(a1, a2, a3, 255, a3);
  }
  *(_DWORD *)(a1 + 36) = a3;
  return luaK_concat((uint64_t *)a1, (int *)(a1 + 40), a2);
}

uint64_t *luaK_patchtohere(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 32);
  return luaK_concat((uint64_t *)a1, (int *)(a1 + 40), a2);
}

uint64_t patchlistaux(uint64_t result, int a2, int a3, int a4, int a5)
{
  if (a2 != -1)
  {
    int v8 = a2;
    int v9 = (uint64_t *)result;
    do
    {
      int v10 = (*(_DWORD *)(*(void *)(*v9 + 56) + 4 * v8) >> 14) - 0x1FFFF;
      if (patchtestreg((uint64_t)v9, v8, a4)) {
        int v11 = a3;
      }
      else {
        int v11 = a5;
      }
      double result = fixjump(v9, v8, v11);
      BOOL v12 = v10 == -1 || v8 + v10 == -2;
      v8 += v10 + 1;
    }
    while (!v12);
  }
  return result;
}

uint64_t luaK_patchclose(uint64_t result, int a2, __int16 a3)
{
  if (a2 != -1)
  {
    uint64_t v3 = *(void *)(*(void *)result + 56);
    do
    {
      unsigned int v4 = *(_DWORD *)(v3 + 4 * a2);
      *(_DWORD *)(v3 + 4 * a2) = v4 & 0xFFFFC03F | ((a3 << 6) + 64) & 0x3FC0;
      a2 += (v4 >> 14) - 0x1FFFF + 1;
    }
    while (v4 >> 14 != 131070 && a2 != -1);
  }
  return result;
}

uint64_t fixjump(uint64_t *a1, int a2, int a3)
{
  uint64_t v5 = *(void *)(*a1 + 56);
  unsigned int v6 = ~a2 + a3;
  uint64_t result = cstdlib_abs(v6);
  if ((int)result >= 0x20000) {
    uint64_t result = luaX_syntaxerror(a1[2], "control structure too long");
  }
  *(_DWORD *)(v5 + 4 * a2) = (*(_DWORD *)(v5 + 4 * a2) & 0x3FFF | (v6 << 14)) + 2147467264;
  return result;
}

uint64_t luaK_code(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  patchlistaux(a1, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 32), 255, *(_DWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 40) = -1;
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 >= *(_DWORD *)(v4 + 24))
  {
    uint64_t v6 = luaM_growaux_(*(void **)(*(void *)(a1 + 16) + 56), *(void *)(v4 + 56), (int *)(v4 + 24), 4, 0x7FFFFFFF, "opcodes");
    *(void *)(v4 + 56) = v6;
    int v5 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 56);
  }
  *(_DWORD *)(v6 + 4 * v5) = a2;
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    uint64_t v8 = luaM_growaux_(*(void **)(*(void *)(a1 + 16) + 56), *(void *)(v4 + 72), (int *)(v4 + 28), 4, 0x7FFFFFFF, "opcodes");
    *(void *)(v4 + 72) = v8;
    int v7 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 72);
  }
  *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(*(void *)(a1 + 16) + 8);
  uint64_t result = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = result + 1;
  return result;
}

uint64_t luaK_codek(uint64_t a1, int a2, int a3)
{
  int v5 = a2 << 6;
  if (a3 >= 0x40000)
  {
    uint64_t v7 = luaK_code(a1, v5 | 2u);
    luaK_code(a1, (a3 << 6) | 0x2E);
    return v7;
  }
  else
  {
    return luaK_code(a1, v5 | (a3 << 14) | 1u);
  }
}

uint64_t luaK_checkstack(uint64_t result, int a2)
{
  int v2 = *(unsigned __int8 *)(result + 60) + a2;
  uint64_t v3 = *(void *)result;
  if (v2 > *(unsigned __int8 *)(*(void *)result + 12))
  {
    if (v2 >= 255)
    {
      uint64_t v4 = (uint64_t *)result;
      uint64_t result = luaX_syntaxerror(*(void *)(result + 16), "function or expression needs too many registers");
      uint64_t v3 = *v4;
    }
    *(unsigned char *)(v3 + 12) = v2;
  }
  return result;
}

uint64_t luaK_reserveregs(uint64_t a1, int a2)
{
  char v2 = a2;
  uint64_t result = luaK_checkstack(a1, a2);
  *(unsigned char *)(a1 + 60) += v2;
  return result;
}

uint64_t luaK_stringK(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = 0;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 8) | 0x40;
  return addk(a1, &v3, (uint64_t)&v3);
}

uint64_t addk(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void **)(v5 + 56);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = luaH_set((uint64_t)v6, *(void *)(v5 + 80), a2);
  int v9 = v8;
  if (*((_DWORD *)v8 + 2) != 19
    || (uint64_t v10 = *v8, *(_DWORD *)(a1 + 44) <= (int)*v8)
    || (uint64_t v11 = *(void *)(v7 + 48), ((*(_DWORD *)(a3 + 8) ^ *(_DWORD *)(v11 + 16 * (int)v10 + 8)) & 0x3F) != 0)
    || !luaV_equalobj(0, (_DWORD *)(v11 + 16 * (int)v10), (uint64_t *)a3))
  {
    uint64_t v12 = *(int *)(v7 + 20);
    uint64_t v10 = *(unsigned int *)(a1 + 44);
    *int v9 = (int)v10;
    *((_DWORD *)v9 + 2) = 19;
    int v13 = *(_DWORD *)(v7 + 20);
    if ((int)v10 >= v13)
    {
      *(void *)(v7 + 48) = luaM_growaux_(v6, *(void *)(v7 + 48), (int *)(v7 + 20), 16, 0x3FFFFFF, "constants");
      int v13 = *(_DWORD *)(v7 + 20);
    }
    uint64_t v14 = *(void *)(v7 + 48);
    if ((int)v12 < v13)
    {
      uint64_t v15 = v13;
      uint64_t v16 = (_DWORD *)(v14 + 16 * v12 + 8);
      uint64_t v17 = v15 - v12;
      do
      {
        _DWORD *v16 = 0;
        v16 += 4;
        --v17;
      }
      while (v17);
    }
    *(_OWORD *)(v14 + 16 * (int)v10) = *(_OWORD *)a3;
    ++*(_DWORD *)(a1 + 44);
    if ((*(unsigned char *)(a3 + 8) & 0x40) != 0 && (*(unsigned char *)(v7 + 9) & 4) != 0 && (*(unsigned char *)(*(void *)a3 + 9) & 3) != 0) {
      luaC_barrier_((uint64_t)v6, v7, *(void *)a3);
    }
  }
  return v10;
}

uint64_t luaK_intK(uint64_t a1, uint64_t a2)
{
  v4[0] = a2;
  v4[1] = 2;
  v3[0] = a2;
  v3[1] = 19;
  return addk(a1, v4, (uint64_t)v3);
}

unsigned __int8 *luaK_setreturns(unsigned __int8 *result, _DWORD *a2, int a3)
{
  uint64_t v3 = result;
  if (*a2 == 14)
  {
    uint64_t v4 = *(void *)(*(void *)result + 56);
    *(_DWORD *)(v4 + 4 * (int)a2[2]) = (*(_DWORD *)(v4 + 4 * (int)a2[2]) & 0x7FFFFF | ((unsigned __int16)a3 << 23))
                                       + 0x800000;
    *(_DWORD *)(v4 + 4 * (int)a2[2]) = *(_DWORD *)(v4 + 4 * (int)a2[2]) & 0xFFFFC03F | (result[60] << 6);
    uint64_t result = (unsigned __int8 *)luaK_checkstack((uint64_t)result, 1);
    ++v3[60];
  }
  else if (*a2 == 13)
  {
    *(_DWORD *)(*(void *)(*(void *)result + 56) + 4 * (int)a2[2]) = *(_DWORD *)(*(void *)(*(void *)result
                                                                                                  + 56)
                                                                                      + 4 * (int)a2[2]) & 0xFF803FFF | (((((a3 << 14) + 0x4000) >> 14) & 0x1FF) << 14);
  }
  return result;
}

uint64_t luaK_setoneret(uint64_t result, _DWORD *a2)
{
  if (*a2 == 14)
  {
    *(_DWORD *)(*(void *)(*(void *)result + 56) + 4 * (int)a2[2]) = *(_DWORD *)(*(void *)(*(void *)result
                                                                                                  + 56)
                                                                                      + 4 * (int)a2[2]) & 0x7FFFFF | 0x1000000;
    *a2 = 12;
  }
  else if (*a2 == 13)
  {
    *a2 = 7;
    a2[2] = (*(_DWORD *)(*(void *)(*(void *)result + 56) + 4 * (int)a2[2]) >> 6);
  }
  return result;
}

uint64_t luaK_dischargevars(uint64_t result, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 8:
      int v3 = 7;
      goto LABEL_17;
    case 9:
      int v4 = (*(_DWORD *)(a2 + 8) << 23) | 5;
      goto LABEL_16;
    case 0xA:
      int v5 = *(__int16 *)(a2 + 8);
      if ((v5 & 0x100) == 0 && *(unsigned __int8 *)(result + 58) <= v5) {
        --*(unsigned char *)(result + 60);
      }
      if (*(unsigned char *)(a2 + 11) == 8)
      {
        if (*(unsigned __int8 *)(result + 58) <= *(unsigned __int8 *)(a2 + 10)) {
          --*(unsigned char *)(result + 60);
        }
        int v6 = 7;
      }
      else
      {
        int v6 = 6;
      }
      int v4 = v6 | (*(unsigned __int8 *)(a2 + 10) << 23) | (*(__int16 *)(a2 + 8) << 14);
LABEL_16:
      uint64_t result = luaK_code(result, v4);
      *(_DWORD *)(a2 + 8) = result;
      int v3 = 12;
LABEL_17:
      *(_DWORD *)a2 = v3;
      break;
    case 0xD:
    case 0xE:
      uint64_t result = luaK_setoneret(result, (_DWORD *)a2);
      break;
    default:
      return result;
  }
  return result;
}

double luaK_exp2nextreg(uint64_t a1, _DWORD *a2)
{
  luaK_dischargevars(a1, (uint64_t)a2);
  if (*a2 == 7)
  {
    int v4 = a2[2];
    if ((v4 & 0x100) == 0 && v4 >= *(unsigned __int8 *)(a1 + 58)) {
      --*(unsigned char *)(a1 + 60);
    }
  }
  luaK_checkstack(a1, 1);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 60) + 1;
  *(unsigned char *)(a1 + 60) = v5;

  return exp2reg((int *)a1, a2, v5 - 1);
}

double exp2reg(int *a1, _DWORD *a2, int a3)
{
  discharge2reg(a1, a2, a3);
  if (*a2 == 11) {
    luaK_concat((uint64_t *)a1, a2 + 4, a2[2]);
  }
  int v6 = a2[4];
  int v7 = a2[5];
  if (v6 != v7)
  {
    if (need_value((uint64_t)a1, v6) || need_value((uint64_t)a1, v7))
    {
      if (*a2 == 11) {
        int v8 = -1;
      }
      else {
        int v8 = luaK_jump((uint64_t)a1);
      }
      a1[9] = a1[8];
      int v9 = luaK_code((uint64_t)a1, (a3 << 6) | 0x4003u);
      a1[9] = a1[8];
      int v10 = luaK_code((uint64_t)a1, (a3 << 6) | 0x800003u);
      a1[9] = a1[8];
      luaK_concat((uint64_t *)a1, a1 + 10, v8);
      int v7 = a2[5];
    }
    else
    {
      int v9 = -1;
      int v10 = -1;
    }
    int v11 = a1[8];
    a1[9] = v11;
    patchlistaux((uint64_t)a1, v7, v11, a3, v9);
    patchlistaux((uint64_t)a1, a2[4], v11, a3, v10);
  }
  double result = NAN;
  *((void *)a2 + 2) = -1;
  a2[2] = a3;
  *a2 = 7;
  return result;
}

uint64_t luaK_exp2anyreg(uint64_t a1, _DWORD *a2)
{
  luaK_dischargevars(a1, (uint64_t)a2);
  if (*a2 != 7)
  {
LABEL_4:
    luaK_exp2nextreg(a1, a2);
    int v4 = a2 + 2;
    return *v4;
  }
  int v4 = a2 + 2;
  if (a2[4] != a2[5])
  {
    if (*v4 >= *(unsigned __int8 *)(a1 + 58))
    {
      exp2reg((int *)a1, a2, *v4);
      return *v4;
    }
    goto LABEL_4;
  }
  return *v4;
}

uint64_t luaK_exp2anyregup(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 9 || a2[4] != a2[5]) {
    return luaK_exp2anyreg(a1, a2);
  }
  return a1;
}

uint64_t luaK_exp2val(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(a2 + 20)) {
    return luaK_dischargevars(result, a2);
  }
  else {
    return luaK_exp2anyreg(result, (_DWORD *)a2);
  }
}

uint64_t luaK_exp2RK(uint64_t a1, _DWORD *a2)
{
  luaK_exp2val(a1, (uint64_t)a2);
  int v4 = *a2;
  switch(*a2)
  {
    case 1:
    case 2:
    case 3:
      if (*(int *)(a1 + 44) > 255) {
        goto LABEL_10;
      }
      if (v4 == 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 80);
        uint64_t v13 = 69;
        unsigned __int8 v5 = &v10;
      }
      else
      {
        uint64_t v12 = v4 == 2;
        uint64_t v13 = 1;
        unsigned __int8 v5 = &v12;
      }
      int v6 = addk(a1, &v12, (uint64_t)v5);
      a2[2] = v6;
      *a2 = 4;
      goto LABEL_13;
    case 4:
      int v6 = a2[2];
      goto LABEL_9;
    case 5:
      uint64_t v7 = *((void *)a2 + 1);
      uint64_t v13 = 3;
      uint64_t v12 = v7;
      int v8 = &v12;
      goto LABEL_8;
    case 6:
      uint64_t v12 = *((void *)a2 + 1);
      uint64_t v13 = 2;
      uint64_t v10 = v12;
      uint64_t v11 = 19;
      int v8 = &v10;
LABEL_8:
      int v6 = addk(a1, &v12, (uint64_t)v8);
      a2[2] = v6;
      *a2 = 4;
LABEL_9:
      if (v6 > 255) {
        goto LABEL_10;
      }
LABEL_13:
      uint64_t result = v6 | 0x100u;
      break;
    default:
LABEL_10:
      uint64_t result = luaK_exp2anyreg(a1, a2);
      break;
  }
  return result;
}

void luaK_storevar(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5 = *a2;
  if (*a2 == 10)
  {
    if (*((unsigned char *)a2 + 11) == 8) {
      int v8 = 10;
    }
    else {
      int v8 = 8;
    }
    unsigned int v9 = v8 | (*((unsigned __int8 *)a2 + 10) << 6) | (*((unsigned __int16 *)a2 + 4) << 23) | (luaK_exp2RK(a1, a3) << 14);
    goto LABEL_16;
  }
  if (v5 == 9)
  {
    unsigned int v9 = (luaK_exp2anyreg(a1, a3) << 6) | (a2[2] << 23) | 9;
LABEL_16:
    luaK_code(a1, v9);
    goto LABEL_17;
  }
  if (v5 == 8)
  {
    if (*a3 == 7)
    {
      int v6 = a3[2];
      if ((v6 & 0x100) == 0 && v6 >= *(unsigned __int8 *)(a1 + 58)) {
        --*(unsigned char *)(a1 + 60);
      }
    }
    int v7 = a2[2];
    exp2reg((int *)a1, a3, v7);
    return;
  }
LABEL_17:
  if (*a3 == 7)
  {
    int v10 = a3[2];
    if ((v10 & 0x100) == 0 && v10 >= *(unsigned __int8 *)(a1 + 58)) {
      --*(unsigned char *)(a1 + 60);
    }
  }
}

uint64_t luaK_self(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  luaK_exp2anyreg(a1, a2);
  int v6 = a2[2];
  BOOL v7 = *a2 == 7 && (a2[2] & 0x100) == 0;
  if (v7 && v6 >= *(unsigned __int8 *)(a1 + 58)) {
    --*(unsigned char *)(a1 + 60);
  }
  a2[2] = *(unsigned __int8 *)(a1 + 60);
  *a2 = 7;
  luaK_checkstack(a1, 2);
  *(unsigned char *)(a1 + 60) += 2;
  int v8 = a2[2];
  int v9 = luaK_exp2RK(a1, a3);
  uint64_t result = luaK_code(a1, (v6 << 23) | (v8 << 6) | (v9 << 14) | 0xCu);
  if (*a3 == 7)
  {
    int v11 = a3[2];
    if ((v11 & 0x100) == 0 && v11 >= *(unsigned __int8 *)(a1 + 58)) {
      --*(unsigned char *)(a1 + 60);
    }
  }
  return result;
}

uint64_t *luaK_goiftrue(uint64_t a1, int *a2)
{
  luaK_dischargevars(a1, (uint64_t)a2);
  int v4 = *a2;
  BOOL v5 = (*a2 - 4) < 3 || v4 == 2;
  int v6 = -1;
  if (!v5)
  {
    if (v4 == 11)
    {
      invertjump(a1, (uint64_t)a2);
      int v6 = a2[2];
    }
    else
    {
      int v6 = jumponcond(a1, a2, 0);
    }
  }
  luaK_concat((uint64_t *)a1, a2 + 5, v6);
  int v7 = a2[4];
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 32);
  uint64_t result = luaK_concat((uint64_t *)a1, (int *)(a1 + 40), v7);
  a2[4] = -1;
  return result;
}

uint64_t invertjump(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 8);
  int v3 = (unsigned int *)(*(void *)(*(void *)result + 56) + 4 * v2);
  if ((int)v2 >= 1 && (unsigned int v4 = *(v3 - 1), luaP_opmodes[v4 & 0x3F] < 0)) {
    --v3;
  }
  else {
    unsigned int v4 = *v3;
  }
  *int v3 = v4 & 0xFFFFC03F | (((v4 & 0x3FC0) == 0) << 6);
  return result;
}

uint64_t jumponcond(uint64_t a1, _DWORD *a2, int a3)
{
  if (*a2 == 12 && (unsigned int v6 = *(_DWORD *)(*(void *)(*(void *)a1 + 56) + 4 * (int)a2[2]), (v6 & 0x3F) == 0x1B))
  {
    --*(_DWORD *)(a1 + 32);
    unsigned int v7 = v6 >> 23;
    if (a3) {
      int v8 = 34;
    }
    else {
      int v8 = 16418;
    }
    int v9 = v8 | (v7 << 6);
  }
  else
  {
    discharge2anyreg(a1, a2);
    if (*a2 == 7)
    {
      int v10 = a2[2];
      if ((v10 & 0x100) == 0 && v10 >= *(unsigned __int8 *)(a1 + 58)) {
        --*(unsigned char *)(a1 + 60);
      }
    }
    int v9 = (a3 << 14) | (a2[2] << 23) | 0x3FE3;
  }
  luaK_code(a1, v9);

  return luaK_jump(a1);
}

uint64_t *luaK_goiffalse(uint64_t a1, int *a2)
{
  luaK_dischargevars(a1, (uint64_t)a2);
  int v4 = *a2;
  BOOL v5 = *a2 == 1 || v4 == 3;
  int v6 = -1;
  if (!v5)
  {
    if (v4 == 11) {
      int v6 = a2[2];
    }
    else {
      int v6 = jumponcond(a1, a2, 1);
    }
  }
  luaK_concat((uint64_t *)a1, a2 + 4, v6);
  int v7 = a2[5];
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 32);
  uint64_t result = luaK_concat((uint64_t *)a1, (int *)(a1 + 40), v7);
  a2[5] = -1;
  return result;
}

uint64_t luaK_indexed(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(unsigned char *)(a2 + 10) = *(_DWORD *)(a2 + 8);
  uint64_t result = luaK_exp2RK(a1, a3);
  *(_WORD *)(a2 + 8) = result;
  if (*(_DWORD *)a2 == 9) {
    char v5 = 9;
  }
  else {
    char v5 = 8;
  }
  *(unsigned char *)(a2 + 11) = v5;
  *(_DWORD *)a2 = 10;
  return result;
}

uint64_t luaK_prefix(uint64_t result, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v5 = result;
  _OWORD v10[2] = -1;
  v10[1] = 0;
  v10[0] = 6;
  if (a2 < 2) {
    return codeexpval(result, a2 + 25, (_DWORD *)a3, (uint64_t)v10, a4);
  }
  if (a2 != 2)
  {
    if (a2 != 3) {
      return result;
    }
    return codeexpval(result, a2 + 25, (_DWORD *)a3, (uint64_t)v10, a4);
  }
  luaK_dischargevars(result, a3);
  switch(*(_DWORD *)a3)
  {
    case 1:
    case 3:
      int v6 = 2;
      goto LABEL_14;
    case 2:
    case 4:
    case 5:
    case 6:
      int v6 = 3;
      goto LABEL_14;
    case 7:
    case 0xC:
      discharge2anyreg(v5, (_DWORD *)a3);
      if (*(_DWORD *)a3 == 7)
      {
        int v7 = *(_DWORD *)(a3 + 8);
        if ((v7 & 0x100) == 0 && v7 >= *(unsigned __int8 *)(v5 + 58)) {
          --*(unsigned char *)(v5 + 60);
        }
      }
      *(_DWORD *)(a3 + 8) = luaK_code(v5, (*(_DWORD *)(a3 + 8) << 23) | 0x1Bu);
      int v6 = 12;
LABEL_14:
      *(_DWORD *)a3 = v6;
      break;
    case 0xB:
      invertjump(v5, a3);
      break;
    default:
      break;
  }
  int32x2_t v8 = *(int32x2_t *)(a3 + 16);
  *(int32x2_t *)(a3 + 16) = vrev64_s32(v8);
  removevalues(v5, v8.i32[0]);
  int v9 = *(_DWORD *)(a3 + 16);

  return removevalues(v5, v9);
}

uint64_t codeexpval(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, int a5)
{
  if (a2 <= 0x1A && a3[4] == -1 && a3[5] == -1)
  {
    if (*a3 == 6)
    {
      int v11 = 19;
      int v10 = 1;
    }
    else
    {
      if (*a3 != 5) {
        goto LABEL_10;
      }
      int v10 = 0;
      int v11 = 3;
    }
    uint64_t v29 = 0;
    uint64_t v12 = *((void *)a3 + 1);
    uint64_t v28 = v12;
    LODWORD(v29) = v11;
    if (*(_DWORD *)(a4 + 16) == -1 && *(_DWORD *)(a4 + 20) == -1)
    {
      if (*(_DWORD *)a4 == 6)
      {
        int v20 = 19;
        int v19 = 1;
      }
      else
      {
        if (*(_DWORD *)a4 != 5) {
          goto LABEL_10;
        }
        int v19 = 0;
        int v20 = 3;
      }
      uint64_t v27 = 0;
      double v24 = 0.0;
      uint64_t v25 = 0;
      double v21 = *(double *)(a4 + 8);
      double v26 = v21;
      LODWORD(v27) = v20;
      if (((1 << a2) & 0x5F00000) != 0)
      {
        uint64_t v30 = 0;
        if (v10)
        {
          uint64_t v30 = v12;
        }
        else
        {
          if (!luaV_tointeger(&v28, &v30)) {
            goto LABEL_10;
          }
          int v20 = v27;
        }
        if (v20 != 19 && !luaV_tointeger(&v26, &v30)) {
          goto LABEL_10;
        }
      }
      else if (((1 << a2) & 0xD0000) != 0)
      {
        double v22 = (double)*(uint64_t *)&v21;
        if (!v19) {
          double v22 = v21;
        }
        if (v22 == 0.0) {
          goto LABEL_10;
        }
      }
      uint64_t result = (uint64_t)luaO_arith(*(void **)(*(void *)(a1 + 16) + 56), a2 - 13, (double *)&v28, &v26, (uint64_t)&v24);
      if (v25 == 19)
      {
        *a3 = 6;
        double v23 = v24;
      }
      else
      {
        double v23 = v24;
        if (v24 == 0.0) {
          goto LABEL_10;
        }
        *a3 = 5;
      }
      *((double *)a3 + 1) = v23;
      return result;
    }
  }
LABEL_10:
  if (a2 <= 0x1C && ((1 << a2) & 0x16000000) != 0)
  {
    int v13 = luaK_exp2anyreg(a1, a3);
    int v14 = 0;
  }
  else
  {
    int v14 = luaK_exp2RK(a1, (_DWORD *)a4);
    int v13 = luaK_exp2RK(a1, a3);
  }
  if (v13 <= v14)
  {
    if (*(_DWORD *)a4 == 7)
    {
      int v17 = *(_DWORD *)(a4 + 8);
      if ((v17 & 0x100) == 0 && v17 >= *(unsigned __int8 *)(a1 + 58)) {
        --*(unsigned char *)(a1 + 60);
      }
    }
    if (*a3 != 7) {
      goto LABEL_30;
    }
    int v16 = a3[2];
    if ((v16 & 0x100) != 0) {
      goto LABEL_30;
    }
  }
  else
  {
    if (*a3 == 7)
    {
      int v15 = a3[2];
      if ((v15 & 0x100) == 0 && v15 >= *(unsigned __int8 *)(a1 + 58)) {
        --*(unsigned char *)(a1 + 60);
      }
    }
    if (*(_DWORD *)a4 != 7) {
      goto LABEL_30;
    }
    int v16 = *(_DWORD *)(a4 + 8);
    if ((v16 & 0x100) != 0) {
      goto LABEL_30;
    }
  }
  if (v16 >= *(unsigned __int8 *)(a1 + 58)) {
    --*(unsigned char *)(a1 + 60);
  }
LABEL_30:
  uint64_t result = luaK_code(a1, (v13 << 23) | (v14 << 14) | a2);
  a3[2] = result;
  *a3 = 12;
  *(_DWORD *)(*(void *)(*(void *)a1 + 72) + 4 * *(int *)(a1 + 32) - 4) = a5;
  return result;
}

void luaK_infix(uint64_t a1, unsigned int a2, int *a3)
{
  if (a2 >= 0xC)
  {
    switch(a2)
    {
      case 0xCu:
        luaK_exp2nextreg(a1, a3);
        return;
      case 0x14u:
        luaK_goiffalse(a1, a3);
        return;
      case 0x13u:
        luaK_goiftrue(a1, a3);
        return;
    }
LABEL_10:
    luaK_exp2RK(a1, a3);
    return;
  }
  if (a3[4] != -1 || a3[5] != -1 || (*a3 - 5) >= 2) {
    goto LABEL_10;
  }
}

__n128 luaK_posfix(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, int a5)
{
  int32x2_t v8 = (unsigned __int8 *)a1;
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      unsigned int v9 = a2 + 13;
      goto LABEL_3;
    case 12:
      luaK_exp2val(a1, a4);
      if (*(_DWORD *)a4 == 12
        && (uint64_t v13 = *(void *)(*(void *)v8 + 56),
            uint64_t v14 = *(int *)(a4 + 8),
            int v15 = *(_DWORD *)(v13 + 4 * v14),
            (v15 & 0x3F) == 0x1D))
      {
        if (*a3 == 7)
        {
          int v16 = a3[2];
          if ((v16 & 0x100) == 0 && v16 >= v8[58])
          {
            --v8[60];
            uint64_t v14 = *(int *)(a4 + 8);
            int v15 = *(_DWORD *)(v13 + 4 * v14);
          }
        }
        *(_DWORD *)(v13 + 4 * v14) = v15 & 0x7FFFFF | ((unsigned __int16)a3[2] << 23);
        *a3 = 12;
        a3[2] = *(_DWORD *)(a4 + 8);
      }
      else
      {
        luaK_exp2nextreg((uint64_t)v8, (_DWORD *)a4);
        a1 = (uint64_t)v8;
        unsigned int v9 = 29;
LABEL_3:
        codeexpval(a1, v9, a3, a4, a5);
      }
      return result;
    case 13:
    case 14:
    case 15:
      int v11 = a2 + 18;
      int v12 = 1;
      goto LABEL_8;
    case 16:
    case 17:
    case 18:
      int v11 = a2 + 15;
      int v12 = 0;
LABEL_8:
      codecomp(a1, v11, v12, a3, (_DWORD *)a4);
      return result;
    case 19:
      luaK_dischargevars(a1, a4);
      int v17 = (int *)(a4 + 20);
      int v18 = a3[5];
      goto LABEL_20;
    case 20:
      luaK_dischargevars(a1, a4);
      int v17 = (int *)(a4 + 16);
      int v18 = a3[4];
LABEL_20:
      luaK_concat((uint64_t *)v8, v17, v18);
      __n128 result = *(__n128 *)a4;
      *((void *)a3 + 2) = *(void *)(a4 + 16);
      *(__n128 *)a3 = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t codecomp(uint64_t a1, int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  int v10 = luaK_exp2RK(a1, a4);
  int v11 = luaK_exp2RK(a1, a5);
  if (*a5 == 7)
  {
    int v12 = a5[2];
    if ((v12 & 0x100) == 0 && v12 >= *(unsigned __int8 *)(a1 + 58)) {
      --*(unsigned char *)(a1 + 60);
    }
  }
  if (*a4 == 7)
  {
    int v13 = a4[2];
    if ((v13 & 0x100) == 0 && v13 >= *(unsigned __int8 *)(a1 + 58)) {
      --*(unsigned char *)(a1 + 60);
    }
  }
  BOOL v14 = a3 == 0;
  BOOL v15 = a2 != 31;
  BOOL v16 = !v15 || !v14;
  if (v15 && v14) {
    int v17 = v11;
  }
  else {
    int v17 = v10;
  }
  if (v16) {
    int v18 = v11;
  }
  else {
    int v18 = v10;
  }
  int v19 = a3 << 6;
  if (!v16) {
    int v19 = 64;
  }
  luaK_code(a1, v19 | (v17 << 23) | (v18 << 14) | a2);
  uint64_t result = luaK_jump(a1);
  a4[2] = result;
  *a4 = 11;
  return result;
}

int *luaK_fixline(int *result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)result + 72) + 4 * result[8] - 4) = a2;
  return result;
}

uint64_t luaK_setlist(uint64_t a1, int a2, int a3, int a4)
{
  char v4 = a2;
  int v6 = (a3 - 1) / 50 + 1;
  int v7 = a4 << 23;
  int v8 = a2 << 6;
  if (a4 == -1) {
    int v7 = 0;
  }
  if (a3 > 25550)
  {
    luaK_code(a1, v8 | v7 | 0x2B);
    int v9 = (v6 << 6) | 0x2E;
  }
  else
  {
    int v9 = v7 | (v6 << 14) | v8 | 0x2B;
  }
  uint64_t result = luaK_code(a1, v9);
  *(unsigned char *)(a1 + 60) = v4 + 1;
  return result;
}

uint64_t patchtestreg(uint64_t a1, int a2, int a3)
{
  int v3 = (unsigned int *)(*(void *)(*(void *)a1 + 56) + 4 * a2);
  if (a2 >= 1 && (unsigned int v4 = *(v3 - 1), luaP_opmodes[v4 & 0x3F] < 0)) {
    --v3;
  }
  else {
    unsigned int v4 = *v3;
  }
  if ((v4 & 0x3F) != 0x23) {
    return 0;
  }
  unsigned int v5 = v4 >> 23;
  if (a3 == 255 || v5 == a3) {
    unsigned int v6 = v4 & 0x7FC000 | (v5 << 6) | 0x22;
  }
  else {
    unsigned int v6 = v4 & 0xFFFFC03F | (a3 << 6);
  }
  *int v3 = v6;
  return 1;
}

uint64_t discharge2reg(int *a1, _DWORD *a2, int a3)
{
  uint64_t result = luaK_dischargevars((uint64_t)a1, (uint64_t)a2);
  switch(*a2)
  {
    case 1:
      uint64_t result = (uint64_t)luaK_nil(a1, a3, 1);
      goto LABEL_16;
    case 2:
    case 3:
      if (*a2 == 2) {
        int v7 = 0x800000;
      }
      else {
        int v7 = 2;
      }
      int v8 = v7 | (a3 << 6) | 3;
      goto LABEL_10;
    case 4:
      int v11 = a2[2];
      goto LABEL_14;
    case 5:
      uint64_t v12 = *((void *)a2 + 1);
      uint64_t v15 = 3;
      uint64_t v14 = v12;
      int v9 = &v14;
      goto LABEL_13;
    case 6:
      uint64_t v14 = *((void *)a2 + 1);
      uint64_t v15 = 2;
      v13[0] = v14;
      v13[1] = 19;
      int v9 = v13;
LABEL_13:
      int v11 = addk((uint64_t)a1, &v14, (uint64_t)v9);
LABEL_14:
      uint64_t result = luaK_codek((uint64_t)a1, a3, v11);
      goto LABEL_16;
    case 7:
      int v10 = a2[2];
      if (v10 != a3)
      {
        int v8 = (v10 << 23) | (a3 << 6);
LABEL_10:
        uint64_t result = luaK_code((uint64_t)a1, v8);
      }
      goto LABEL_16;
    case 0xC:
      *(_DWORD *)(*(void *)(*(void *)a1 + 56) + 4 * (int)a2[2]) = *(_DWORD *)(*(void *)(*(void *)a1 + 56)
                                                                                    + 4 * (int)a2[2]) & 0xFFFFC03F | (a3 << 6);
LABEL_16:
      a2[2] = a3;
      *a2 = 7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t need_value(uint64_t a1, int a2)
{
  if (a2 == -1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = (int *)(*(void *)(*(void *)a1 + 56) + 4 * a2);
    if (a2 < 1 || (int v3 = *(v2 - 1), (luaP_opmodes[v3 & 0x3F] & 0x80000000) == 0)) {
      int v3 = *v2;
    }
    if ((v3 & 0x3F) != 0x23) {
      break;
    }
    int v4 = (*v2 >> 14) - 0x1FFFF;
    a2 += v4 + 1;
    if (v4 == -1 || a2 == -1) {
      return 0;
    }
  }
  return 1;
}

uint64_t discharge2anyreg(uint64_t result, _DWORD *a2)
{
  if (*a2 != 7)
  {
    uint64_t v3 = result;
    luaK_checkstack(result, 1);
    unsigned __int8 v4 = *(unsigned char *)(v3 + 60) + 1;
    *(unsigned char *)(v3 + 60) = v4;
    return discharge2reg((int *)v3, a2, v4 - 1);
  }
  return result;
}

uint64_t removevalues(uint64_t result, int a2)
{
  if (a2 != -1)
  {
    int v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t result = patchtestreg(v3, v2, 255);
      int v4 = (*(_DWORD *)(*(void *)(*(void *)v3 + 56) + 4 * v2) >> 14) - 0x1FFFF;
      v2 += v4 + 1;
    }
    while (v4 != -1 && v2 != -1);
  }
  return result;
}

uint64_t luaopen_coroutine(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 7);
  luaL_setfuncs(a1, (uint64_t)&co_funcs, 0, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t luaB_cocreate(void *a1)
{
  luaL_checktype(a1, 1, 6);
  uint64_t v2 = lua_newthread((uint64_t)a1);
  lua_pushvalue(a1, 1);
  lua_xmove((uint64_t)a1, v2, 1);
  return 1;
}

uint64_t luaB_coresume(void *a1)
{
  uint64_t v2 = (void *)getco(a1);
  int v3 = lua_gettop((uint64_t)a1);
  int v4 = auxresume(a1, v2, v3 - 1);
  if (v4 < 0)
  {
    lua_pushBOOLean((uint64_t)a1, 0);
    uint64_t v6 = 2;
    int v7 = -2;
  }
  else
  {
    int v5 = v4;
    lua_pushBOOLean((uint64_t)a1, 1);
    uint64_t v6 = (v5 + 1);
    int v7 = ~v5;
  }
  lua_rotate(a1, v7, 1);
  return v6;
}

uint64_t luaB_corunning(uint64_t a1)
{
  BOOL v2 = lua_pushthread(a1);
  lua_pushBOOLean(a1, v2);
  return 2;
}

uint64_t luaB_costatus(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = getco(a1);
  if ((void *)v2 == a1)
  {
    int v5 = "running";
  }
  else
  {
    uint64_t v3 = v2;
    int v4 = lua_status(v2);
    if (v4)
    {
      if (v4 == 1) {
        int v5 = "suspended";
      }
      else {
        int v5 = "dead";
      }
    }
    else
    {
      memset(v7, 0, sizeof(v7));
      if ((int)lua_getstack(v3, 0, (uint64_t)v7) <= 0)
      {
        if (lua_gettop(v3)) {
          int v5 = "suspended";
        }
        else {
          int v5 = "dead";
        }
      }
      else
      {
        int v5 = "normal";
      }
    }
  }
  lua_pushstring((uint64_t)a1, v5);
  return 1;
}

uint64_t luaB_cowrap(void *a1)
{
  return 1;
}

uint64_t luaB_yield(uint64_t a1)
{
  int v2 = lua_gettop(a1);

  return lua_yieldk(a1, v2, 0, 0);
}

uint64_t luaB_yieldable(uint64_t a1)
{
  BOOL v2 = lua_isyieldable(a1);
  lua_pushBOOLean(a1, v2);
  return 1;
}

uint64_t getco(void *a1)
{
  uint64_t v2 = lua_tothread(a1, 1);
  if (!v2) {
    luaL_argerror(a1, 1);
  }
  return v2;
}

uint64_t auxresume(void *a1, void *a2, int a3)
{
  if (!lua_checkstack(a2, a3))
  {
    int v7 = "too many arguments to resume";
LABEL_11:
    lua_pushstring((uint64_t)a1, v7);
    return 0xFFFFFFFFLL;
  }
  if (!lua_status((uint64_t)a2) && !lua_gettop((uint64_t)a2))
  {
    int v7 = "cannot resume dead coroutine";
    goto LABEL_11;
  }
  lua_xmove((uint64_t)a1, (uint64_t)a2, a3);
  if (lua_resume((uint64_t)a2, (uint64_t)a1, a3) > 1)
  {
    lua_xmove((uint64_t)a2, (uint64_t)a1, 1);
    return 0xFFFFFFFFLL;
  }
  unint64_t v6 = lua_gettop((uint64_t)a2);
  if (!lua_checkstack(a1, (int)v6 + 1))
  {
    lua_settop((uint64_t)a2, ~v6);
    int v7 = "too many results to resume";
    goto LABEL_11;
  }
  lua_xmove((uint64_t)a2, (uint64_t)a1, v6);
  return v6;
}

uint64_t luaB_auxwrap(void *a1)
{
  uint64_t v2 = (void *)lua_tothread(a1, -1001001);
  int v3 = lua_gettop((uint64_t)a1);
  uint64_t result = auxresume(a1, v2, v3);
  if ((result & 0x80000000) != 0)
  {
    if (lua_isstring(a1, -1))
    {
      luaL_where((uint64_t)a1, 1);
      lua_rotate(a1, -2, 1);
      lua_concat((uint64_t)a1, 2, v5, v6, v7, v8, v9, v10);
    }
    return lua_error(a1);
  }
  return result;
}

uint64_t luaopen_debug(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 15);
  luaL_setfuncs(a1, (uint64_t)&dblib, 0, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t db_getuservalue(void *a1)
{
  if (lua_type(a1, 1) == 7) {
    lua_getuservalue(a1, 1);
  }
  else {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t db_gethook(void *a1)
{
  uint64_t v2 = (void *)getthread(a1, &v14);
  char v3 = lua_gethookmask((uint64_t)v2);
  int v4 = (uint64_t (*)(void *, int *))lua_gethook((uint64_t)v2);
  if (v4)
  {
    if (v4 == hookf)
    {
      lua_rawgetp(a1, -1001000, (uint64_t)&HOOKKEY);
      checkstack((uint64_t)a1, v2, 1, v6, v7, v8, v9, v10, v13);
      lua_pushthread((uint64_t)v2);
      lua_xmove((uint64_t)v2, (uint64_t)a1, 1);
      lua_rawget(a1, -2);
      lua_rotate(a1, -2, -1);
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      if (v3) {
        goto LABEL_9;
      }
    }
    else
    {
      lua_pushstring((uint64_t)a1, "external hook");
      if (v3)
      {
LABEL_9:
        HIBYTE(v13) = 99;
        unsigned int v5 = 1;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
    lua_pushnil((uint64_t)a1);
    if (v3) {
      goto LABEL_9;
    }
  }
  unsigned int v5 = 0;
  if ((v3 & 2) != 0) {
LABEL_10:
  }
    *((unsigned char *)&v13 + v5++ + 7) = 114;
LABEL_11:
  if ((v3 & 4) != 0) {
    *((unsigned char *)&v13 + v5++ + 7) = 108;
  }
  *((unsigned char *)&v13 + v5 + 7) = 0;
  lua_pushstring((uint64_t)a1, (char *)&v13 + 7);
  int v11 = lua_gethookcount((uint64_t)v2);
  lua_pushinteger((uint64_t)a1, v11);
  return 3;
}

uint64_t db_getinfo(void *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v22 = 0u;
  long long v23 = 0u;
  int v21 = 0;
  uint64_t v2 = (void *)getthread(a1, &v21);
  int v3 = v21;
  uint64_t v4 = (v21 + 2);
  unsigned int v5 = (char *)luaL_optlstring(a1, v4, "flnStu", 0);
  checkstack((uint64_t)a1, v2, 3, v6, v7, v8, v9, v10, v20);
  uint64_t v11 = (v3 + 1);
  if (lua_type(a1, v11) == 6)
  {
    unsigned int v5 = (char *)lua_pushfstring((uint64_t)a1, ">%s", v12, v13, v14, v15, v16, v17, (uint64_t)v5);
    lua_pushvalue(a1, v11);
    lua_xmove((uint64_t)a1, (uint64_t)v2, 1);
  }
  else
  {
    int v18 = luaL_checkinteger(a1, v11);
    if (!lua_getstack((uint64_t)v2, v18, (uint64_t)&v22))
    {
      lua_pushnil((uint64_t)a1);
      return 1;
    }
  }
  if (!lua_getinfo((uint64_t)v2, v5, (uint64_t)&v22)) {
    return luaL_argerror(a1, v4);
  }
  lua_createtable((uint64_t)a1, 0, 0);
  if (cstdlib_strchr(v5, 83))
  {
    lua_pushstring((uint64_t)a1, (char *)v24);
    lua_setfield(a1, -2, "source");
    lua_pushstring((uint64_t)a1, (char *)v25 + 8);
    lua_setfield(a1, -2, "short_src");
    lua_pushinteger((uint64_t)a1, SHIDWORD(v24));
    lua_setfield(a1, -2, "linedefined");
    lua_pushinteger((uint64_t)a1, SLODWORD(v25[0]));
    lua_setfield(a1, -2, "lastlinedefined");
    lua_pushstring((uint64_t)a1, *((char **)&v23 + 1));
    lua_setfield(a1, -2, "what");
  }
  if (cstdlib_strchr(v5, 108))
  {
    lua_pushinteger((uint64_t)a1, SDWORD2(v24));
    lua_setfield(a1, -2, "currentline");
  }
  if (cstdlib_strchr(v5, 117))
  {
    lua_pushinteger((uint64_t)a1, BYTE4(v25[0]));
    lua_setfield(a1, -2, "nups");
    lua_pushinteger((uint64_t)a1, BYTE5(v25[0]));
    lua_setfield(a1, -2, "nparams");
    lua_pushBOOLean((uint64_t)a1, SBYTE6(v25[0]));
    lua_setfield(a1, -2, "isvararg");
  }
  if (cstdlib_strchr(v5, 110))
  {
    lua_pushstring((uint64_t)a1, *((char **)&v22 + 1));
    lua_setfield(a1, -2, "name");
    lua_pushstring((uint64_t)a1, (char *)v23);
    lua_setfield(a1, -2, "namewhat");
  }
  if (cstdlib_strchr(v5, 116))
  {
    lua_pushBOOLean((uint64_t)a1, SBYTE7(v25[0]));
    lua_setfield(a1, -2, "istailcall");
  }
  if (cstdlib_strchr(v5, 76)) {
    treatstackoption(a1, (uint64_t)v2, "activelines");
  }
  if (cstdlib_strchr(v5, 102)) {
    treatstackoption(a1, (uint64_t)v2, "func");
  }
  return 1;
}

uint64_t db_getlocal(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v17 = 0;
  uint64_t v2 = (void *)getthread(a1, &v17);
  int v3 = v17;
  int v4 = luaL_checkinteger(a1, (v17 + 2));
  uint64_t v5 = (v3 + 1);
  if (lua_type(a1, v5) == 6)
  {
    lua_pushvalue(a1, v5);
    uint64_t v6 = (char *)lua_getlocal((uint64_t)a1, 0, v4);
    lua_pushstring((uint64_t)a1, v6);
    return 1;
  }
  memset(v18, 0, sizeof(v18));
  int v8 = luaL_checkinteger(a1, v5);
  if (!lua_getstack((uint64_t)v2, v8, (uint64_t)v18)) {
    return luaL_argerror(a1, v5);
  }
  checkstack((uint64_t)a1, v2, 1, v9, v10, v11, v12, v13, v16);
  uint64_t v14 = lua_getlocal((uint64_t)v2, (uint64_t)v18, v4);
  if (!v14)
  {
    lua_pushnil((uint64_t)a1);
    return 1;
  }
  uint64_t v15 = (char *)v14;
  lua_xmove((uint64_t)v2, (uint64_t)a1, 1);
  lua_pushstring((uint64_t)a1, v15);
  lua_rotate(a1, -2, 1);
  return 2;
}

uint64_t db_getregistry(void *a1)
{
  return 1;
}

uint64_t db_getmetatable(void *a1)
{
  if (!lua_getmetatable(a1, 1)) {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t db_getupvalue(void *a1)
{
  return auxupvalue(a1, 1);
}

uint64_t db_upvaluejoin(void *a1)
{
  int v2 = checkupval(a1, 1, 2);
  int v3 = checkupval(a1, 3, 4);
  if (lua_iscfunction(a1, 1)) {
    luaL_argerror(a1, 1);
  }
  if (lua_iscfunction(a1, 3)) {
    luaL_argerror(a1, 3);
  }
  lua_upvaluejoin(a1, 1, v2, 3, v3);
  return 0;
}

uint64_t db_upvalueid(void *a1)
{
  int v2 = checkupval(a1, 1, 2);
  uint64_t v3 = lua_upvalueid(a1, 1, v2);
  lua_pushlightuserdata((uint64_t)a1, v3);
  return 1;
}

uint64_t db_setuservalue(void *a1)
{
  return 1;
}

uint64_t db_sethook(uint64_t *a1)
{
  int v19 = 0;
  int v2 = (void *)getthread(a1, &v19);
  int v3 = v19;
  uint64_t v4 = (v19 + 1);
  if ((int)lua_type(a1, v19 + 1) <= 0)
  {
    lua_settop((uint64_t)a1, v4);
    int v6 = 0;
    uint64_t v11 = 0;
    int v10 = 0;
  }
  else
  {
    uint64_t v5 = (char *)luaL_checklstring(a1, (v3 + 2), 0);
    luaL_checktype(a1, v4, 6);
    int v6 = luaL_optinteger(a1, (v3 + 3), 0);
    int v7 = cstdlib_strchr(v5, 99) != 0;
    if (cstdlib_strchr(v5, 114)) {
      v7 |= 2u;
    }
    int v8 = cstdlib_strchr(v5, 108);
    int v9 = v7 | 4;
    if (!v8) {
      int v9 = v7;
    }
    if (v6 <= 0) {
      int v10 = v9;
    }
    else {
      int v10 = v9 | 8;
    }
    uint64_t v11 = hookf;
  }
  if (!lua_rawgetp(a1, -1001000, (uint64_t)&HOOKKEY))
  {
    lua_createtable((uint64_t)a1, 0, 2);
    lua_pushvalue(a1, -1);
    lua_rawsetp(a1, -1001000, (uint64_t)&HOOKKEY);
    lua_pushstring((uint64_t)a1, "k");
    lua_setfield(a1, -2, "__mode");
    lua_pushvalue(a1, -1);
    lua_setmetatable(a1, -2);
  }
  checkstack((uint64_t)a1, v2, 1, v12, v13, v14, v15, v16, v18);
  lua_pushthread((uint64_t)v2);
  lua_xmove((uint64_t)v2, (uint64_t)a1, 1);
  lua_pushvalue(a1, v4);
  lua_rawset(a1, -3);
  lua_sethook((uint64_t)v2, (uint64_t)v11, v10, v6);
  return 0;
}

uint64_t db_setlocal(void *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v15 = 0;
  int v2 = (void *)getthread(a1, &v15);
  memset(v16, 0, sizeof(v16));
  int v3 = v15;
  uint64_t v4 = (v15 + 1);
  int v5 = luaL_checkinteger(a1, v4);
  int v6 = luaL_checkinteger(a1, (v3 + 2));
  if (!lua_getstack((uint64_t)v2, v5, (uint64_t)v16)) {
    return luaL_argerror(a1, v4);
  }
  luaL_checkany(a1, (v3 + 3));
  lua_settop((uint64_t)a1, v3 + 3);
  checkstack((uint64_t)a1, v2, 1, v7, v8, v9, v10, v11, v14);
  lua_xmove((uint64_t)a1, (uint64_t)v2, 1);
  uint64_t v12 = (char *)lua_setlocal((uint64_t)v2, (uint64_t)v16, v6);
  if (!v12) {
    lua_settop((uint64_t)v2, 0xFFFFFFFE);
  }
  lua_pushstring((uint64_t)a1, v12);
  return 1;
}

uint64_t db_setmetatable(uint64_t *a1)
{
  int v2 = lua_type(a1, 2);
  if (v2 && v2 != 5) {
    luaL_argerror(a1, 2);
  }
  lua_settop((uint64_t)a1, 2u);
  lua_setmetatable(a1, 1);
  return 1;
}

uint64_t db_setupvalue(void *a1)
{
  luaL_checkany(a1, 3);

  return auxupvalue(a1, 0);
}

uint64_t db_traceback(void *a1)
{
  int v8 = 0;
  uint64_t v2 = getthread(a1, &v8);
  int v3 = v8;
  int v4 = v8 + 1;
  uint64_t v5 = lua_tolstring(a1, v8 + 1, 0);
  if (v5 || (int)lua_type(a1, v4) < 1)
  {
    int v6 = luaL_optinteger(a1, (v3 + 2), v2 == (void)a1);
    luaL_traceback(a1, v2, v5, v6);
  }
  else
  {
    lua_pushvalue(a1, v4);
  }
  return 1;
}

uint64_t getthread(void *a1, _DWORD *a2)
{
  if (lua_type(a1, 1) == 8)
  {
    *a2 = 1;
    return lua_tothread(a1, 1);
  }
  else
  {
    *a2 = 0;
    return (uint64_t)a1;
  }
}

uint64_t hookf(void *a1, int *a2)
{
  lua_rawgetp(a1, -1001000, (uint64_t)&HOOKKEY);
  lua_pushthread((uint64_t)a1);
  uint64_t result = lua_rawget(a1, -2);
  if (result == 6)
  {
    lua_pushstring((uint64_t)a1, hookf_hooknames[*a2]);
    uint64_t v5 = a2[10];
    if ((v5 & 0x80000000) != 0) {
      lua_pushnil((uint64_t)a1);
    }
    else {
      lua_pushinteger((uint64_t)a1, v5);
    }
    return lua_callk((uint64_t)a1, 2, 0, 0, 0);
  }
  return result;
}

uint64_t checkstack(uint64_t result, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((void *)result != a2)
  {
    uint64_t v9 = (void *)result;
    uint64_t result = lua_checkstack(a2, a3);
    if (!result)
    {
      return luaL_error(v9, "stack overflow", v10, v11, v12, v13, v14, v15, a9);
    }
  }
  return result;
}

uint64_t *treatstackoption(void *a1, uint64_t a2, char *a3)
{
  if (a1 == (void *)a2) {
    lua_rotate(a1, -2, 1);
  }
  else {
    lua_xmove(a2, (uint64_t)a1, 1);
  }

  return lua_setfield(a1, -2, a3);
}

uint64_t auxupvalue(void *a1, int a2)
{
  int v4 = luaL_checkinteger(a1, 2);
  luaL_checktype(a1, 1, 6);
  if (a2) {
    lua_getupvalue(a1, 1, v4);
  }
  else {
    uint64_t v5 = (char *)lua_setupvalue(a1, 1, v4);
  }
  if (!v5) {
    return 0;
  }
  lua_pushstring((uint64_t)a1, v5);
  uint64_t v6 = (a2 + 1);
  lua_rotate(a1, ~a2, 1);
  return v6;
}

uint64_t checkupval(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = luaL_checkinteger(a1, a3);
  luaL_checktype(a1, a2, 6);
  lua_getupvalue(a1, a2, v6);
  if (!v7) {
    luaL_argerror(a1, a3);
  }
  return v6;
}

uint64_t lua_sethook(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if ((*(unsigned char *)(v4 + 66) & 2) != 0) {
    *(void *)(result + 40) = *(void *)(v4 + 40);
  }
  if (a2) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a2;
  }
  *(void *)(result + 168) = v6;
  *(_DWORD *)(result + 188) = a4;
  *(_DWORD *)(result + 192) = a4;
  if (v5) {
    char v7 = 0;
  }
  else {
    char v7 = a3;
  }
  *(unsigned char *)(result + 200) = v7;
  return result;
}

uint64_t lua_gethook(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

uint64_t lua_gethookmask(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t lua_gethookcount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

uint64_t lua_getstack(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 < 0) {
    return 0;
  }
  uint64_t v3 = a1 + 96;
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = v4 != a1 + 96;
  if (a2 && v4 != a1 + 96)
  {
    do
    {
      uint64_t v4 = *(void *)(v4 + 16);
      BOOL v5 = v4 != v3;
      --a2;
    }
    while (a2 && v4 != v3);
  }
  uint64_t result = 0;
  if (!a2 && v5)
  {
    *(void *)(a3 + 120) = v4;
    return 1;
  }
  return result;
}

uint64_t lua_getlocal(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *v4;
    uint64_t v6 = *(void *)(a1 + 56);
    *uint64_t v4 = v6 + v4[7];
    v4[7] = v5 - v6;
  }
  if (a2)
  {
    uint64_t v12 = 0;
    uint64_t result = (uint64_t)findlocal(a1, *(void **)(a2 + 120), a3, (uint64_t *)&v12);
    if (result)
    {
      *(_OWORD *)*(void *)(a1 + 16) = *v12;
      *(void *)(a1 + 16) += 16;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(_DWORD *)(v8 - 8) == 70) {
      uint64_t result = luaF_getlocalname(*(void *)(*(void *)(v8 - 16) + 24), a3, 0);
    }
    else {
      uint64_t result = 0;
    }
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v9 = *(uint64_t **)(a1 + 32);
    uint64_t v10 = *v9;
    uint64_t v11 = *(void *)(a1 + 56);
    *uint64_t v9 = v11 + v9[7];
    v9[7] = v10 - v11;
  }
  return result;
}

const char *findlocal(uint64_t a1, void *a2, int a3, uint64_t *a4)
{
  if ((*((unsigned char *)a2 + 66) & 2) != 0)
  {
    if (a3 < 0)
    {
      uint64_t v12 = *(unsigned __int8 *)(*(void *)(*(void *)*a2 + 24) + 10);
      if ((int)(((a2[4] - *a2) >> 4) - v12) <= -a3) {
        return 0;
      }
      uint64_t v11 = *a2 + 16 * v12 + 16 * -a3;
      uint64_t result = "(*vararg)";
      goto LABEL_13;
    }
    uint64_t v8 = a2[4];
    uint64_t result = (const char *)luaF_getlocalname(*(void *)(*(void *)*a2 + 24), a3, ((a2[5] - *(void *)(*(void *)(*(void *)*a2 + 24) + 56)) >> 2) - 1);
    if (result)
    {
LABEL_12:
      uint64_t v11 = v8 + 16 * (a3 - 1);
LABEL_13:
      *a4 = v11;
      return result;
    }
  }
  else
  {
    uint64_t v8 = *a2 + 16;
  }
  if (*(void **)(a1 + 32) == a2) {
    uint64_t v9 = (void *)(a1 + 16);
  }
  else {
    uint64_t v9 = (void *)a2[3];
  }
  uint64_t result = 0;
  if (a3 >= 1 && (*v9 - v8) >> 4 >= a3)
  {
    uint64_t result = "(*temporary)";
    goto LABEL_12;
  }
  return result;
}

const char *lua_setlocal(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = 0;
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *v4;
    uint64_t v6 = *(void *)(a1 + 56);
    *uint64_t v4 = v6 + v4[7];
    v4[7] = v5 - v6;
  }
  uint64_t result = findlocal(a1, *(void **)(a2 + 120), a3, (uint64_t *)&v11);
  if (result)
  {
    *uint64_t v11 = *(_OWORD *)(*(void *)(a1 + 16) - 16);
    *(void *)(a1 + 16) -= 16;
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 32);
    uint64_t v9 = *v8;
    uint64_t v10 = *(void *)(a1 + 56);
    *uint64_t v8 = v10 + v8[7];
    v8[7] = v9 - v10;
  }
  return result;
}

uint64_t lua_getinfo(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 32);
    uint64_t v7 = *v6;
    uint64_t v8 = *(void *)(a1 + 56);
    *uint64_t v6 = v8 + v6[7];
    v6[7] = v7 - v8;
  }
  if (*a2 == 62)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 16) - 16;
    uint64_t v4 = a2 + 1;
    *(void *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v9 = *(void *)(a3 + 120);
    uint64_t v10 = *(void *)v9;
  }
  if ((*(_DWORD *)(v10 + 8) & 0x1F) == 6) {
    uint64_t v11 = *(void *)v10;
  }
  else {
    uint64_t v11 = 0;
  }
  char v12 = *v4;
  if (*v4)
  {
    uint64_t v44 = (const char **)(a3 + 8);
    uint64_t v13 = (unsigned __int8 *)(v4 + 1);
    uint64_t v14 = 1;
    do
    {
      if (v12 <= 107)
      {
        if (v12 != 76)
        {
          if (v12 == 83)
          {
            if (v11 && *(unsigned char *)(v11 + 8) != 38)
            {
              uint64_t v22 = *(void *)(v11 + 24);
              uint64_t v23 = *(void *)(v22 + 104);
              if (v23) {
                int v21 = (char *)(v23 + 24);
              }
              else {
                int v21 = "=?";
              }
              *(void *)(a3 + 32) = v21;
              uint64_t v24 = *(void *)(v22 + 40);
              *(void *)(a3 + 44) = v24;
              uint64_t v20 = "Lua";
              if (!v24) {
                uint64_t v20 = "main";
              }
            }
            else
            {
              *(void *)(a3 + 32) = "=[C]";
              *(void *)(a3 + 44) = -1;
              uint64_t v20 = "C";
              int v21 = "=[C]";
            }
            *(void *)(a3 + 24) = v20;
            luaO_chunkid((char *)(a3 + 56), v21, 0x3CuLL);
          }
          else if (v12 != 102)
          {
LABEL_20:
            uint64_t v14 = 0;
          }
        }
      }
      else
      {
        switch(v12)
        {
          case 'l':
            if (v9
              && (*(unsigned char *)(v9 + 66) & 2) != 0
              && (uint64_t v15 = *(void *)(**(void **)v9 + 24), (v16 = *(void *)(v15 + 72)) != 0))
            {
              int v17 = *(_DWORD *)(v16
                              + 4 * ((((*(void *)(v9 + 40) - *(void *)(v15 + 56)) << 30) - 0x100000000) >> 32));
            }
            else
            {
              int v17 = -1;
            }
            *(_DWORD *)(a3 + 40) = v17;
            break;
          case 'n':
            if (v9
              && (*(unsigned char *)(v9 + 66) & 0x20) == 0
              && (uint64_t v18 = *(void *)(v9 + 16), (*(unsigned char *)(v18 + 66) & 2) != 0))
            {
              if ((*(unsigned char *)(v18 + 66) & 4) != 0)
              {
                uint64_t v32 = "?";
                uint64_t v31 = "hook";
              }
              else
              {
                uint64_t v26 = 0;
                uint64_t v27 = *(void **)(**(void **)v18 + 24);
                uint64_t v28 = v27[7];
                int v29 = ((unint64_t)(*(void *)(v18 + 40) - v28) >> 2) - 1;
                unsigned int v30 = *(_DWORD *)(v28 + 4 * v29);
                uint64_t v31 = "for iterator";
                uint64_t v32 = "for iterator";
                switch(v30 & 0x3F)
                {
                  case 8u:
                  case 0xAu:
                    uint64_t v26 = 1;
                    goto LABEL_50;
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                    uint64_t v26 = (*(_DWORD *)(v28 + 4 * v29) & 0x3Fu) - 7;
                    goto LABEL_50;
                  case 0x19u:
                    uint64_t v26 = 18;
                    goto LABEL_50;
                  case 0x1Au:
                    uint64_t v26 = 19;
                    goto LABEL_50;
                  case 0x1Cu:
                    uint64_t v26 = 4;
                    goto LABEL_50;
                  case 0x1Du:
                    uint64_t v26 = 22;
                    goto LABEL_50;
                  case 0x1Fu:
                    uint64_t v26 = 5;
                    goto LABEL_50;
                  case 0x20u:
                    uint64_t v26 = 20;
                    goto LABEL_50;
                  case 0x21u:
                    uint64_t v26 = 21;
                    goto LABEL_50;
                  case 0x24u:
                  case 0x25u:
                    uint64_t v33 = getobjname(v27, v29, (v30 >> 6), v44);
                    *(void *)(a3 + 16) = v33;
                    if (!v33) {
                      goto LABEL_24;
                    }
                    goto LABEL_45;
                  case 0x29u:
                    break;
                  default:
LABEL_50:
                    uint64_t v32 = (const char *)(*(void *)(*(void *)(a1 + 24) + 8 * v26 + 248) + 24);
                    uint64_t v31 = "metamethod";
                    break;
                }
              }
              *(void *)(a3 + 8) = v32;
              *(void *)(a3 + 16) = v31;
            }
            else
            {
LABEL_24:
              *(void *)(a3 + 8) = 0;
              *(void *)(a3 + 16) = "";
            }
            break;
          case 't':
            if (v9) {
              char v19 = *(unsigned char *)(v9 + 66) & 0x20;
            }
            else {
              char v19 = 0;
            }
            *(unsigned char *)(a3 + 55) = v19;
            break;
          case 'u':
            if (v11)
            {
              *(unsigned char *)(a3 + 52) = *(unsigned char *)(v11 + 10);
              if (*(unsigned char *)(v11 + 8) != 38)
              {
                *(unsigned char *)(a3 + 54) = *(unsigned char *)(*(void *)(v11 + 24) + 11);
                *(unsigned char *)(a3 + 53) = *(unsigned char *)(*(void *)(v11 + 24) + 10);
                break;
              }
            }
            else
            {
              *(unsigned char *)(a3 + 52) = 0;
            }
            *(_WORD *)(a3 + 53) = 256;
            break;
          default:
            goto LABEL_20;
        }
      }
LABEL_45:
      int v25 = *v13++;
      char v12 = v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v14 = 1;
  }
  if (cstdlib_strchr(v4, 102))
  {
    *(_OWORD *)*(void *)(a1 + 16) = *(_OWORD *)v10;
    *(void *)(a1 + 16) += 16;
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v34 = *(uint64_t **)(a1 + 32);
    uint64_t v35 = *v34;
    uint64_t v36 = *(void *)(a1 + 56);
    uint64_t *v34 = v36 + v34[7];
    v34[7] = v35 - v36;
  }
  if (cstdlib_strchr(v4, 76))
  {
    if (v11 && *(unsigned char *)(v11 + 8) != 38)
    {
      __n128 v45 = 0uLL;
      uint64_t v38 = *(void *)(*(void *)(v11 + 24) + 72);
      uint64_t v39 = luaH_new(a1);
      uint64_t v40 = *(void *)(a1 + 16);
      *(void *)uint64_t v40 = v39;
      *(_DWORD *)(v40 + 8) = 69;
      *(void *)(a1 + 16) += 16;
      v45.n128_u32[0] = 1;
      v45.n128_u32[2] = 1;
      if (*(int *)(*(void *)(v11 + 24) + 28) >= 1)
      {
        uint64_t v41 = v39;
        uint64_t v42 = 0;
        do
          luaH_setint(a1, v41, *(int *)(v38 + 4 * v42++), &v45);
        while (v42 < *(int *)(*(void *)(v11 + 24) + 28));
      }
    }
    else
    {
      uint64_t v37 = *(void *)(a1 + 16);
      *(_DWORD *)(v37 + 8) = 0;
      *(void *)(a1 + 16) = v37 + 16;
    }
  }
  return v14;
}

uint64_t luaG_typeerror(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = luaT_typenames_[(*(_DWORD *)(a2 + 8) & 0xF) + 1];
  uint64_t v6 = varinfo(a1, a2);
  return luaG_runerror(a1, "attempt to %s a %s value%s", a3, v5, v6);
}

uint64_t luaG_runerror(void *a1, char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = a1[4];
  uint64_t v4 = (const char *)luaO_pushvfstring((uint64_t)a1, a2, (uint64_t *)va);
  if ((*(unsigned char *)(v3 + 66) & 2) != 0)
  {
    uint64_t v5 = *(void **)(**(void **)v3 + 24);
    uint64_t v6 = v5[9];
    if (v6) {
      int v7 = *(_DWORD *)(v6 + 4 * ((((*(void *)(v3 + 40) - v5[7]) << 30) - 0x100000000) >> 32));
    }
    else {
      int v7 = -1;
    }
    luaG_addinfo((uint64_t)a1, v4, v5[13], v7);
  }
  return luaG_errormsg(a1);
}

const char *varinfo(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  uint64_t v2 = *(uint64_t ***)(a1 + 32);
  if ((*((unsigned char *)v2 + 66) & 2) == 0) {
    return "";
  }
  uint64_t v4 = **v2;
  if (*(unsigned char *)(v4 + 10))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void **)(v4 + 32);
    while (**v6 != a2)
    {
      v5 += 16;
      ++v6;
      if (16 * *(unsigned __int8 *)(v4 + 10) == v5) {
        goto LABEL_6;
      }
    }
    uint64_t v12 = *(void *)(*(void *)(*(void *)(v4 + 24) + 88) + v5);
    if (v12) {
      uint64_t v10 = (const char *)(v12 + 24);
    }
    else {
      uint64_t v10 = "?";
    }
    uint64_t v9 = "upvalue";
    return (const char *)luaO_pushfstring(a1, " (%s '%s')", v9, v10);
  }
LABEL_6:
  int v7 = v2[4];
  uint64_t v8 = a2 - (void)v7;
  if (a2 - (uint64_t)v7 < -15) {
    return "";
  }
  if (v8 >> 4 >= ((char *)v2[1] - (char *)v7) >> 4) {
    return "";
  }
  uint64_t v9 = getobjname(*(void **)(v4 + 24), (((unint64_t)v2[5] - *(void *)(*(void *)(v4 + 24) + 56)) >> 2) - 1, (unint64_t)v8 >> 4, &v13);
  if (!v9) {
    return "";
  }
  uint64_t v10 = v13;
  return (const char *)luaO_pushfstring(a1, " (%s '%s')", v9, v10);
}

uint64_t luaG_concaterror(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a2 + 8) & 0xFu) - 3 < 2) {
    a2 = a3;
  }
  return luaG_typeerror(a1, a2, "concatenate");
}

uint64_t luaG_opinterror(uint64_t a1, _DWORD *a2, uint64_t a3, const char *a4)
{
  uint64_t v9 = 0;
  if (a2[2] == 3)
  {
    uint64_t v9 = *(void *)a2;
  }
  else if (!luaV_tonumber_(a2, (double *)&v9))
  {
    a3 = (uint64_t)a2;
  }
  return luaG_typeerror(a1, a3, a4);
}

uint64_t luaG_tointerror(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v8 = 0;
  if (a2[2] == 19)
  {
    uint64_t v8 = *(void *)a2;
  }
  else if (!luaV_tointeger(a2, &v8))
  {
    a3 = (uint64_t)a2;
  }
  uint64_t v6 = varinfo(a1, a3);
  return luaG_runerror(a1, "number%s has no integer representation", v6);
}

uint64_t luaG_ordererror(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (luaT_typenames_[(*(_DWORD *)(a2 + 8) & 0xF) + 1] == luaT_typenames_[(*(_DWORD *)(a3 + 8) & 0xF) + 1]) {
    return luaG_runerror(a1, "attempt to compare two %s values");
  }
  else {
    return luaG_runerror(a1, "attempt to compare %s with %s");
  }
}

uint64_t luaG_addinfo(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a3) {
    luaO_chunkid(v8, (char *)(a3 + 24), 0x3CuLL);
  }
  else {
    *(_WORD *)uint64_t v8 = 63;
  }
  return luaO_pushfstring(a1, "%s:%d: %s", v8, a4, a2);
}

uint64_t luaG_errormsg(void *a1)
{
  uint64_t v2 = a1[22];
  if (v2)
  {
    uint64_t v3 = a1[7];
    *(_OWORD *)a1[2] = *(_OWORD *)(a1[2] - 16);
    *(_OWORD *)(a1[2] - 16) = *(_OWORD *)(v3 + v2);
    uint64_t v4 = a1[2];
    a1[2] = v4 + 16;
    luaD_call((uint64_t)a1, (char *)(v4 - 16), 1, 0);
  }

  return luaD_throw((uint64_t)a1, 2);
}

uint64_t luaG_traceexec(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  char v3 = *(unsigned char *)(result + 200);
  if ((v3 & 8) != 0 && !*(_DWORD *)(result + 192))
  {
    *(_DWORD *)(result + 192) = *(_DWORD *)(result + 188);
    uint64_t v4 = (unsigned char *)(v2 + 66);
    char v5 = *(unsigned char *)(v2 + 66);
    if ((v5 & 0x40) == 0)
    {
      uint64_t result = luaD_hook(result, 3, -1);
      int v6 = 1;
      if ((v3 & 4) == 0) {
        goto LABEL_19;
      }
      goto LABEL_5;
    }
LABEL_11:
    *uint64_t v4 = v5 & 0xBF;
    return result;
  }
  uint64_t v4 = (unsigned char *)(v2 + 66);
  char v5 = *(unsigned char *)(v2 + 66);
  if ((v5 & 0x40) != 0) {
    goto LABEL_11;
  }
  int v6 = 0;
  if ((*(unsigned char *)(result + 200) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_5:
  uint64_t v7 = *(void *)(**(void **)v2 + 24);
  unint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(v7 + 72);
  if (v10)
  {
    int v11 = *(_DWORD *)(v10 + 4 * (int)(((v8 - v9) >> 2) - 1));
    if (((v8 - v9) >> 2) == 1) {
      goto LABEL_18;
    }
  }
  else
  {
    int v11 = -1;
    if (((v8 - v9) >> 2) == 1)
    {
LABEL_18:
      uint64_t result = luaD_hook(v1, 2, v11);
      goto LABEL_19;
    }
  }
  unint64_t v12 = *(void *)(v1 + 40);
  if (v8 <= v12) {
    goto LABEL_18;
  }
  int v13 = v10 ? *(_DWORD *)(v10 + 4 * ((uint64_t)(((v12 - v9) << 30) - 0x100000000) >> 32)) : -1;
  if (v11 != v13) {
    goto LABEL_18;
  }
LABEL_19:
  *(void *)(v1 + 40) = *(void *)(v2 + 40);
  if (*(unsigned char *)(v1 + 10) == 1)
  {
    if (v6) {
      *(_DWORD *)(v1 + 192) = 1;
    }
    *(void *)(v2 + 40) -= 4;
    *(unsigned char *)(v2 + 66) |= 0x40u;
    *(void *)uint64_t v2 = *(void *)(v1 + 16) - 16;
    return luaD_throw(v1, 1);
  }
  return result;
}

const char *getobjname(void *a1, int a2, signed int a3, const char **a4)
{
  LODWORD(v6) = a2;
  unint64_t v8 = "local";
  while (1)
  {
    uint64_t v9 = luaF_getlocalname((uint64_t)a1, a3 + 1, v6);
    *a4 = (const char *)v9;
    if (v9) {
      return v8;
    }
    uint64_t v10 = v6;
    if ((int)v6 < 1) {
      return 0;
    }
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = a1[7];
    uint64_t v6 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v14 = *(unsigned int *)(v13 + 4 * v11);
      uint64_t v15 = v14 & 0x3F;
      signed int v16 = (v14 >> 6);
      if ((*(_DWORD *)(v13 + 4 * v11) & 0x3Fu) > 0x23)
      {
        if ((v15 - 36) < 2) {
          goto LABEL_9;
        }
        if (v15 == 41)
        {
          v16 += 2;
LABEL_9:
          if (v11 < v12) {
            unsigned int v17 = -1;
          }
          else {
            unsigned int v17 = v11;
          }
          if (v16 <= a3) {
            uint64_t v6 = v17;
          }
          else {
            uint64_t v6 = v6;
          }
          goto LABEL_44;
        }
LABEL_35:
        int v24 = luaP_opmodes[v15] & 0x40;
        if (v11 < v12) {
          unsigned int v25 = -1;
        }
        else {
          unsigned int v25 = v11;
        }
        if (v16 != a3 || v24 == 0) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v25;
        }
        goto LABEL_44;
      }
      if (v15 == 4)
      {
        if (v11 < v12) {
          unsigned int v21 = -1;
        }
        else {
          unsigned int v21 = v11;
        }
        BOOL v19 = v16 <= a3;
        signed int v22 = v16 + (v14 >> 23);
        if (!v19 || v22 < a3) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v21;
        }
      }
      else
      {
        if (v15 != 30) {
          goto LABEL_35;
        }
        uint64_t v18 = v11 + (v14 >> 14) - 131070;
        BOOL v19 = (int)v18 > v12 && v11 < (int)v18;
        if (v19 && (int)v18 <= (int)v10) {
          int v12 = v11 + (*(_DWORD *)(v13 + 4 * v11) >> 14) - 131070;
        }
      }
LABEL_44:
      ++v11;
    }
    while (v10 != v11);
    if (v6 == -1) {
      return 0;
    }
    unint64_t v27 = *(unsigned int *)(v13 + 4 * (int)v6);
    int v28 = *(_DWORD *)(v13 + 4 * (int)v6) & 0x3F;
    if ((v27 & 0x3F) != 0)
    {
      unint64_t v8 = 0;
      switch(v28)
      {
        case 1:
          unsigned int v32 = v27 >> 14;
          goto LABEL_55;
        case 2:
          unsigned int v32 = *(_DWORD *)(v13 + 4 * (int)v6 + 4) >> 6;
LABEL_55:
          uint64_t v33 = a1[6];
          if ((*(_DWORD *)(v33 + 16 * v32 + 8) & 0xF) != 4) {
            return 0;
          }
          *a4 = (const char *)(*(void *)(v33 + 16 * v32) + 24);
          return "constant";
        case 5:
          uint64_t v34 = *(void *)(a1[11] + ((v27 >> 19) & 0x1FF0));
          if (v34) {
            uint64_t v35 = (const char *)(v34 + 24);
          }
          else {
            uint64_t v35 = "?";
          }
          *a4 = v35;
          return "upvalue";
        case 6:
        case 7:
          unsigned int v29 = (v27 >> 14) & 0x1FF;
          unint64_t v30 = v27 >> 23;
          if (v28 == 7)
          {
            uint64_t v31 = (const char *)luaF_getlocalname((uint64_t)a1, (int)v30 + 1, v6);
            kname((uint64_t)a1, v6, v29, a4);
            if (!v31) {
              return "field";
            }
          }
          else
          {
            uint64_t v36 = *(void *)(a1[11] + 16 * v30);
            if (v36) {
              uint64_t v31 = (const char *)(v36 + 24);
            }
            else {
              uint64_t v31 = "?";
            }
            kname((uint64_t)a1, v6, (v27 >> 14) & 0x1FF, a4);
          }
          if (cstdlib_strcmp(v31, "_ENV")) {
            unint64_t v8 = "field";
          }
          else {
            unint64_t v8 = "global";
          }
          break;
        case 12:
          kname((uint64_t)a1, v6, (v27 >> 14) & 0x1FF, a4);
          return "method";
        default:
          return v8;
      }
      return v8;
    }
    a3 = v27 >> 23;
    if (v27 >> 23 >= (v27 >> 6)) {
      return 0;
    }
  }
}

uint64_t kname(uint64_t result, uint64_t a2, int a3, const char **a4)
{
  if ((a3 & 0x100) != 0)
  {
    uint64_t v5 = *(void *)(result + 48);
    uint64_t v6 = a3 & 0xFFFFFEFF;
    if ((*(_DWORD *)(v5 + 16 * v6 + 8) & 0xF) == 4)
    {
      uint64_t v7 = (const char *)(*(void *)(v5 + 16 * v6) + 24);
LABEL_8:
      *a4 = v7;
      return result;
    }
LABEL_7:
    uint64_t v7 = "?";
    goto LABEL_8;
  }
  uint64_t result = getobjname();
  if (!result || *(unsigned char *)result != 99) {
    goto LABEL_7;
  }
  return result;
}

uint64_t luaD_throw(uint64_t result, int a2)
{
  while (1)
  {
    uint64_t v2 = *(void *)(result + 88);
    if (v2)
    {
      *(_DWORD *)(v2 + 200) = a2;
      longjmp((int *)(v2 + 8), 1);
    }
    uint64_t v3 = *(void *)(result + 24);
    *(unsigned char *)(result + 10) = a2;
    uint64_t v4 = *(void *)(v3 + 224);
    if (!*(void *)(v4 + 88)) {
      break;
    }
    uint64_t v5 = *(_OWORD **)(v4 + 16);
    *(void *)(v4 + 16) = v5 + 1;
    *uint64_t v5 = *(_OWORD *)(*(void *)(result + 16) - 16);
    uint64_t result = *(void *)(v3 + 224);
  }
  return result;
}

uint64_t luaD_rawrunprotected(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  __int16 v6 = *(_WORD *)(a1 + 198);
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0;
  uint64_t v8 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = &v8;
  if (!setjmp((int *)v9)) {
    a2(a1, a3);
  }
  *(void *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 198) = v6;
  return v10;
}

uint64_t luaD_reallocstack(uint64_t a1, int a2)
{
  uint64_t v4 = *(int *)(a1 + 184);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = a2;
  uint64_t result = luaM_realloc_(a1, v5, 16 * v4, 16 * a2);
  *(void *)(a1 + 56) = result;
  if ((int)v4 < a2)
  {
    uint64_t v8 = (_DWORD *)(result + 16 * v4 + 8);
    uint64_t v9 = v6 - v4;
    do
    {
      *uint64_t v8 = 0;
      v8 += 4;
      --v9;
    }
    while (v9);
  }
  *(_DWORD *)(a1 + 184) = a2;
  *(void *)(a1 + 48) = result + 16 * v6 - 80;
  *(void *)(a1 + 16) = result + *(void *)(a1 + 16) - v5;
  for (int i = *(void **)(a1 + 64); i; int i = (void *)i[2])
    void *i = result + *i - v5;
  for (uint64_t j = *(void *)(a1 + 32); j; uint64_t j = *(void *)(j + 16))
  {
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = v12 + *(void *)(j + 8) - v5;
    *(void *)uint64_t j = v12 + *(void *)j - v5;
    *(void *)(j + 8) = v13;
    if ((*(unsigned char *)(j + 66) & 2) != 0) {
      *(void *)(j + 32) = v12 + *(void *)(j + 32) - v5;
    }
  }
  return result;
}

uint64_t luaD_growstack(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (v3 <= 1000000)
  {
    int v5 = 2 * v3;
    if (v5 >= 1000000) {
      int v5 = 1000000;
    }
    if (v5 <= (int)(a2 + ((*(void *)(a1 + 16) - *(void *)(a1 + 56)) >> 4) + 5)) {
      int v6 = a2 + ((*(void *)(a1 + 16) - *(void *)(a1 + 56)) >> 4) + 5;
    }
    else {
      int v6 = v5;
    }
    if (v6 <= 1000000)
    {
      return luaD_reallocstack(a1, v6);
    }
    else
    {
      luaD_reallocstack(a1, 1000200);
      return luaG_runerror(a1, "stack overflow");
    }
  }
  else
  {
    return luaD_throw(a1, 6);
  }
}

uint64_t luaD_shrinkstack(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  while (v3)
  {
    unint64_t v4 = *(void *)(v3 + 8);
    uint64_t v3 = *(void *)(v3 + 16);
    if (v2 < v4) {
      unint64_t v2 = v4;
    }
  }
  unint64_t v5 = (v2 - *(void *)(a1 + 56)) >> 4;
  int v6 = v5 + 8;
  if ((int)v5 >= -1) {
    int v6 = v5 + 1;
  }
  if ((int)v5 + 1 + (v6 >> 3) >= 999990) {
    int v7 = 999990;
  }
  else {
    int v7 = v5 + 1 + (v6 >> 3);
  }
  if (*(int *)(a1 + 184) <= 1000000) {
    uint64_t result = luaE_shrinkCI(a1);
  }
  else {
    uint64_t result = luaE_freeCI(a1);
  }
  if ((int)v5 <= 999999 && v7 + 10 < *(_DWORD *)(a1 + 184))
  {
    return luaD_reallocstack(a1, v7 + 10);
  }
  return result;
}

uint64_t luaD_hook(uint64_t result, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t (**)(uint64_t, _OWORD *))(result + 168);
  if (v3)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(result + 201))
    {
      uint64_t v5 = *(void *)(result + 32);
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 48);
      uint64_t v7 = *(void *)(result + 56);
      uint64_t v9 = *(void *)(v5 + 8) - v7;
      uint64_t v10 = v6 - v7;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      memset(v12, 0, sizeof(v12));
      LODWORD(v12[0]) = a2;
      DWORD2(v13) = a3;
      uint64_t v18 = 0;
      uint64_t v19 = v5;
      if (v8 - v6 <= 335)
      {
        luaD_growstack(result, 20);
        uint64_t v6 = *(void *)(v4 + 16);
      }
      *(void *)(v5 + 8) = v6 + 320;
      *(unsigned char *)(v4 + 201) = 0;
      *(unsigned char *)(v5 + 66) |= 4u;
      uint64_t result = v3(v4, v12);
      *(unsigned char *)(v4 + 201) = 1;
      uint64_t v11 = *(void *)(v4 + 56);
      *(void *)(v5 + 8) = v11 + v9;
      *(void *)(v4 + 16) = v11 + v10;
      *(unsigned char *)(v5 + 66) &= ~4u;
    }
  }
  return result;
}

uint64_t luaD_precall(uint64_t a1, char *a2, __int16 a3)
{
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = &a2[-v6];
    int v8 = *((_DWORD *)a2 + 2) & 0x3F;
    if (v8 == 6) {
      break;
    }
    if (v8 == 22) {
      goto LABEL_28;
    }
    if (v8 == 38)
    {
      a2 = (char *)(*(void *)a2 + 24);
LABEL_28:
      int v24 = *(uint64_t (**)(uint64_t))a2;
      if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1) {
        luaC_step(a1);
      }
      if ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 16)) <= 335) {
        luaD_growstack(a1, 20);
      }
      uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 24);
      if (!v25) {
        uint64_t v25 = luaE_extendCI(a1);
      }
      *(void *)(a1 + 32) = v25;
      *(_WORD *)(v25 + 64) = a3;
      uint64_t v26 = *(void *)(a1 + 16) + 320;
      *(void *)uint64_t v25 = &v7[*(void *)(a1 + 56)];
      *(void *)(v25 + 8) = v26;
      *(unsigned char *)(v25 + 66) = 0;
      if (*(unsigned char *)(a1 + 200)) {
        luaD_hook(a1, 0, -1);
      }
      int v27 = v24(a1);
      luaD_poscall(a1, (char *)(*(void *)(a1 + 16) - 16 * v27), v27);
      return 1;
    }
    if ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 16)) <= 31)
    {
      luaD_growstack(a1, 1);
      uint64_t v6 = *(void *)(a1 + 56);
    }
    a2 = &v7[v6];
    uint64_t v9 = luaT_gettmbyobj(a1, &v7[v6], 0x17u);
    if ((v9[1] & 0xF) != 6) {
      luaG_typeerror(a1, (uint64_t)a2, "call");
    }
    uint64_t v10 = *(char **)(a1 + 16);
    if (v10 > a2)
    {
      do
      {
        *(_OWORD *)uint64_t v10 = *((_OWORD *)v10 - 1);
        v10 -= 16;
      }
      while (v10 > a2);
      uint64_t v10 = *(char **)(a1 + 16);
    }
    *(void *)(a1 + 16) = v10 + 16;
    *(_OWORD *)a2 = *(_OWORD *)v9;
  }
  uint64_t v11 = *(void *)(*(void *)a2 + 24);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = (unint64_t)(v12 - (void)a2) >> 4;
  if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1)
  {
    luaC_step(a1);
    uint64_t v12 = *(void *)(a1 + 16);
  }
  unsigned int v14 = v13 - 1;
  uint64_t v15 = *(unsigned __int8 *)(v11 + 12);
  if (v15 >= (*(void *)(a1 + 48) - v12) >> 4) {
    luaD_growstack(a1, v15);
  }
  uint64_t v16 = *(unsigned __int8 *)(v11 + 10);
  if ((int)v13 <= (int)v16)
  {
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = v16 - v13 + 1;
    do
    {
      *(_DWORD *)(v17 + 8) = 0;
      v17 += 16;
      --v18;
    }
    while (v18);
    *(void *)(a1 + 16) = v17;
    unsigned int v14 = v16;
  }
  if (*(unsigned char *)(v11 + 11))
  {
    uint64_t v19 = *(char **)(a1 + 16);
    uint64_t v20 = *(unsigned __int8 *)(v11 + 12);
    if (v20 >= (uint64_t)(*(void *)(a1 + 48) - (void)v19) >> 4)
    {
      luaD_growstack(a1, v20);
      uint64_t v19 = *(char **)(a1 + 16);
    }
    if (v16)
    {
      unsigned int v21 = &v19[-16 * v14 + 8];
      do
      {
        signed int v22 = *(_OWORD **)(a1 + 16);
        *(void *)(a1 + 16) = v22 + 1;
        *signed int v22 = *(_OWORD *)(v21 - 8);
        *(_DWORD *)unsigned int v21 = 0;
        v21 += 16;
        --v16;
      }
      while (v16);
    }
    uint64_t v23 = &v7[*(void *)(a1 + 56)];
  }
  else
  {
    uint64_t v23 = &v7[*(void *)(a1 + 56)];
    uint64_t v19 = v23 + 16;
  }
  uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 24);
  if (!v29) {
    uint64_t v29 = luaE_extendCI(a1);
  }
  *(void *)(a1 + 32) = v29;
  *(_WORD *)(v29 + 64) = a3;
  *(void *)(v29 + 32) = v19;
  unint64_t v30 = &v19[16 * *(unsigned __int8 *)(v11 + 12)];
  *(void *)uint64_t v29 = v23;
  *(void *)(v29 + 8) = v30;
  *(void *)(v29 + 40) = *(void *)(v11 + 56);
  *(unsigned char *)(v29 + 66) = 2;
  *(void *)(a1 + 16) = v30;
  if ((*(unsigned char *)(a1 + 200) & 1) == 0) {
    return 0;
  }
  *(void *)(v29 + 40) += 4;
  uint64_t v31 = *(void *)(v29 + 16);
  if ((*(unsigned char *)(v31 + 66) & 2) != 0 && (*(_DWORD *)(*(void *)(v31 + 40) - 4) & 0x3F) == 0x25)
  {
    *(unsigned char *)(v29 + 66) = 34;
    int v32 = 4;
  }
  else
  {
    int v32 = 0;
  }
  luaD_hook(a1, v32, -1);
  uint64_t result = 0;
  *(void *)(v29 + 40) -= 4;
  return result;
}

uint64_t luaD_poscall(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  if ((*(unsigned char *)(a1 + 200) & 6) != 0)
  {
    if ((*(unsigned char *)(a1 + 200) & 2) != 0)
    {
      uint64_t v6 = &a2[-*(void *)(a1 + 56)];
      luaD_hook(a1, 1, -1);
      a2 = &v6[*(void *)(a1 + 56)];
    }
    uint64_t v7 = v5[2];
    *(void *)(a1 + 40) = *(void *)(v7 + 40);
  }
  else
  {
    uint64_t v7 = v5[2];
  }
  uint64_t v8 = *v5;
  int v9 = *((__int16 *)v5 + 32);
  *(void *)(a1 + 32) = v7;
  int v10 = v9;
  if (v9) {
    BOOL v11 = a3 < 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    do
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
      v8 += 16;
      if (!--v10) {
        break;
      }
      a2 += 16;
      BOOL v11 = a3-- > 1;
    }
    while (v11);
  }
  if (v10 < 1)
  {
    uint64_t v13 = v8;
  }
  else
  {
    unsigned int v12 = v10 + 1;
    do
    {
      uint64_t v13 = v8 + 16;
      *(_DWORD *)(v8 + 8) = 0;
      --v12;
      v8 += 16;
    }
    while (v12 > 1);
  }
  *(void *)(a1 + 16) = v13;
  return (v9 + 1);
}

uint64_t luaD_call(uint64_t a1, char *a2, __int16 a3, int a4)
{
  unsigned __int16 v8 = *(_WORD *)(a1 + 198) + 1;
  *(_WORD *)(a1 + 198) = v8;
  if (v8 >= 0xC8u)
  {
    if (v8 == 200)
    {
      luaG_runerror(a1, "C stack overflow");
    }
    else if (v8 >= 0xE1u)
    {
      luaD_throw(a1, 6);
    }
  }
  if (!a4) {
    ++*(_WORD *)(a1 + 196);
  }
  uint64_t result = luaD_precall(a1, a2, a3);
  if (!result)
  {
    uint64_t result = luaV_execute(a1);
    if (a4) {
      goto LABEL_10;
    }
LABEL_12:
    --*(_WORD *)(a1 + 196);
    goto LABEL_10;
  }
  if (!a4) {
    goto LABEL_12;
  }
LABEL_10:
  --*(_WORD *)(a1 + 198);
  return result;
}

uint64_t lua_resume(uint64_t a1, uint64_t a2, int a3)
{
  int v12 = a3;
  if (a2) {
    __int16 v4 = *(_WORD *)(a2 + 198) + 1;
  }
  else {
    __int16 v4 = 1;
  }
  __int16 v5 = *(_WORD *)(a1 + 196);
  *(_WORD *)(a1 + 198) = v4;
  *(_WORD *)(a1 + 196) = 0;
  uint64_t v6 = luaD_rawrunprotected(a1, (void (*)(uint64_t, uint64_t))resume, (uint64_t)&v12);
  unsigned int v11 = v6;
  if (v6 == -1)
  {
    uint64_t v7 = 2;
  }
  else
  {
    uint64_t v7 = v6;
    if ((int)v6 >= 2)
    {
LABEL_6:
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8)
      {
        do
        {
          if ((*(unsigned char *)(v8 + 66) & 0x10) != 0)
          {
            unint64_t v9 = *(void *)(a1 + 56) + *(void *)(v8 + 56);
            luaF_close(a1, v9);
            seterrorobj(a1, v7, v9);
            *(void *)(a1 + 32) = v8;
            *(unsigned char *)(a1 + 201) = *(unsigned char *)(v8 + 66) & 1;
            *(_WORD *)(a1 + 196) = 0;
            luaD_shrinkstack(a1);
            *(void *)(a1 + 176) = *(void *)(v8 + 40);
            uint64_t v7 = luaD_rawrunprotected(a1, (void (*)(uint64_t, uint64_t))unroll, (uint64_t)&v11);
            unsigned int v11 = v7;
            if ((int)v7 > 1) {
              goto LABEL_6;
            }
            goto LABEL_15;
          }
          uint64_t v8 = *(void *)(v8 + 16);
        }
        while (v8);
        if ((int)v7 < 2) {
          goto LABEL_15;
        }
      }
      *(unsigned char *)(a1 + 10) = v7;
      seterrorobj(a1, v7, *(void *)(a1 + 16));
      *(void *)(*(void *)(a1 + 32) + 8) = *(void *)(a1 + 16);
      uint64_t v7 = v11;
    }
  }
LABEL_15:
  *(_WORD *)(a1 + 196) = v5;
  --*(_WORD *)(a1 + 198);
  return v7;
}

void *resume(uint64_t a1, int *a2)
{
  uint64_t v3 = *a2;
  __int16 v4 = (char *)(*(void *)(a1 + 16) - 16 * v3);
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned __int16 *)(a1 + 198) >= 0xC8u) {
    resume_error(a1, "C stack overflow", *(void *)(a1 + 16) - 16 * v3);
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    *(unsigned char *)(a1 + 10) = 0;
    *(void *)uint64_t v5 = *(void *)(a1 + 56) + *(void *)(v5 + 56);
    if ((*(unsigned char *)(v5 + 66) & 2) != 0)
    {
      luaV_execute(a1);
    }
    else
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(v5 + 32);
      if (v7)
      {
        LODWORD(v3) = v7(a1, 1, *(void *)(v5 + 48));
        __int16 v4 = (char *)(*(void *)(a1 + 16) - 16 * (int)v3);
      }
      luaD_poscall(a1, v4, v3);
    }
    return unroll((void *)a1, 0, v8, v9, v10, v11, v12, v13);
  }
  else if (*(unsigned char *)(a1 + 10))
  {
    return (void *)resume_error(a1, "cannot resume dead coroutine", (uint64_t)v4);
  }
  else
  {
    if (v5 != a1 + 96) {
      resume_error(a1, "cannot resume non-suspended coroutine", (uint64_t)v4);
    }
    uint64_t result = (void *)luaD_precall(a1, v4 - 16, -1);
    if (!result)
    {
      return (void *)luaV_execute(a1);
    }
  }
  return result;
}

void *unroll(void *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  if (a2) {
    uint64_t result = (void *)finishCcall(result, *a2);
  }
  while (1)
  {
    uint64_t v9 = v8[4];
    if ((void *)v9 == v8 + 12) {
      break;
    }
    if ((*(unsigned char *)(v9 + 66) & 2) != 0)
    {
      luaV_finishOp((uint64_t)v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      uint64_t result = (void *)luaV_execute((uint64_t)v8);
    }
    else
    {
      uint64_t result = (void *)finishCcall(v8, 1);
    }
  }
  return result;
}

uint64_t seterrorobj(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (a2 == 6)
  {
    uint64_t result = luaS_newlstr(result, "error in error handling", 0x17uLL);
    *(void *)a3 = result;
    int v6 = *(unsigned __int8 *)(result + 8);
  }
  else
  {
    if (a2 != 4)
    {
      *(_OWORD *)a3 = *(_OWORD *)(*(void *)(result + 16) - 16);
      goto LABEL_7;
    }
    uint64_t v5 = *(void *)(*(void *)(result + 24) + 240);
    *(void *)a3 = v5;
    int v6 = *(unsigned __int8 *)(v5 + 8);
  }
  *(_DWORD *)(a3 + 8) = v6 | 0x40;
LABEL_7:
  *(void *)(v4 + 16) = a3 + 16;
  return result;
}

BOOL lua_isyieldable(uint64_t a1)
{
  return *(_WORD *)(a1 + 196) == 0;
}

uint64_t lua_yieldk(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(_WORD *)(a1 + 196))
  {
    if (*(void *)(*(void *)(a1 + 24) + 224) == a1) {
      luaG_runerror((void *)a1, "attempt to yield from outside a coroutine");
    }
    else {
      luaG_runerror((void *)a1, "attempt to yield across a C-call boundary");
    }
  }
  *(unsigned char *)(a1 + 10) = 1;
  *(void *)(v8 + 56) = *(void *)v8 - *(void *)(a1 + 56);
  if ((*(unsigned char *)(v8 + 66) & 2) == 0)
  {
    *(void *)(v8 + 32) = a4;
    if (a4) {
      *(void *)(v8 + 48) = a3;
    }
    *(void *)uint64_t v8 = *(void *)(a1 + 16) - 16 * a2 - 16;
    luaD_throw(a1, 1);
  }
  return 0;
}

uint64_t luaD_pcall(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 201);
  __int16 v9 = *(_WORD *)(a1 + 196);
  uint64_t v10 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = a5;
  uint64_t v11 = luaD_rawrunprotected(a1, a2, a3);
  if (v11)
  {
    unint64_t v12 = *(void *)(a1 + 56) + a4;
    luaF_close(a1, v12);
    seterrorobj(a1, v11, v12);
    *(void *)(a1 + 32) = v7;
    *(unsigned char *)(a1 + 201) = v8;
    *(_WORD *)(a1 + 196) = v9;
    luaD_shrinkstack(a1);
  }
  *(void *)(a1 + 176) = v10;
  return v11;
}

uint64_t luaD_protectedparser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  ++*(_WORD *)(a1 + 196);
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  *(void *)&long long v11 = 0;
  *(void *)&long long v12 = 0;
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  *((void *)&v9 + 1) = 0;
  *(void *)&long long v10 = 0;
  uint64_t v5 = luaD_pcall(a1, (void (*)(uint64_t, uint64_t))f_parser, (uint64_t)&v7, *(void *)(a1 + 16) - *(void *)(a1 + 56), *(void *)(a1 + 176));
  uint64_t v8 = luaM_realloc_(a1, v8, *((uint64_t *)&v9 + 1), 0);
  *((void *)&v9 + 1) = 0;
  luaM_realloc_(a1, v10, 2 * SHIDWORD(v10), 0);
  luaM_realloc_(a1, v11, 24 * SHIDWORD(v11), 0);
  luaM_realloc_(a1, v12, 24 * SHIDWORD(v12), 0);
  --*(_WORD *)(a1 + 196);
  return v5;
}

uint64_t f_parser(char *a1, uint64_t **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = **a2;
  **a2 = v5 - 1;
  if (v5)
  {
    int v6 = (unsigned __int8 *)v4[1];
    v4[1] = (uint64_t)(v6 + 1);
    int v7 = *v6;
  }
  else
  {
    int v7 = luaZ_fill((uint64_t)v4);
  }
  uint64_t v8 = (char *)a2[10];
  if (v7 == 27)
  {
    checkmode(a1, v8, "binary");
    uint64_t v9 = luaU_undump((uint64_t)a1, (uint64_t)*a2, (uint64_t)(a2 + 1), (const char *)a2[11]);
  }
  else
  {
    checkmode(a1, v8, "text");
    uint64_t v9 = luaY_parser((uint64_t)a1, (uint64_t)*a2, (uint64_t)(a2 + 1), (_DWORD *)a2 + 8, (char *)a2[11], v7);
  }

  return luaF_initupvals((uint64_t)a1, v9);
}

uint64_t resume_error(uint64_t a1, char *a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  uint64_t v5 = luaS_new(a1, a2);
  *(void *)a3 = v5;
  *(_DWORD *)(a3 + 8) = *(unsigned __int8 *)(v5 + 8) | 0x40;
  *(void *)(a1 + 16) += 16;

  return luaD_throw(a1, -1);
}

uint64_t finishCcall(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  if ((*(unsigned char *)(v3 + 66) & 0x10) != 0)
  {
    *(unsigned char *)(v3 + 66) &= ~0x10u;
    a1[22] = *(void *)(v3 + 40);
  }
  if (*(__int16 *)(v3 + 64) == -1)
  {
    unint64_t v4 = a1[2];
    if (*(void *)(v3 + 8) < v4) {
      *(void *)(v3 + 8) = v4;
    }
  }
  int v5 = (*(uint64_t (**)(void *, uint64_t, void))(v3 + 32))(a1, a2, *(void *)(v3 + 48));
  int v6 = (char *)(a1[2] - 16 * v5);

  return luaD_poscall((uint64_t)a1, v6, v5);
}

char *checkmode(char *result, char *__s, const char *a3)
{
  if (__s)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t result = cstdlib_strchr(__s, *a3);
    if (!result)
    {
      luaO_pushfstring(v5, "attempt to load a %s chunk (mode is '%s')", a3, __s);
      return (char *)luaD_throw(v5, 3);
    }
  }
  return result;
}

uint64_t luaU_dump(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, int a5)
{
  v10[0] = a1;
  v10[1] = a3;
  _OWORD v10[2] = a4;
  int v11 = a5;
  unsigned int v12 = a3();
  LOBYTE(v13) = 83;
  if (!v12)
  {
    unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
    LOBYTE(v13) = 0;
    if (!v12)
    {
      unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
      if (!v12)
      {
        unsigned int v12 = ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))a3)(a1, "\x19\x93\r\n\x1A\n", 6, a4);
        LOBYTE(v13) = 4;
        if (!v12)
        {
          unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
          LOBYTE(v13) = 8;
          if (!v12)
          {
            unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
            LOBYTE(v13) = 4;
            if (!v12)
            {
              unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
              LOBYTE(v13) = 8;
              if (!v12)
              {
                unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
                LOBYTE(v13) = 8;
                if (!v12)
                {
                  unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
                  uint64_t v13 = 22136;
                  if (!v12)
                  {
                    unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 8, a4);
                    uint64_t v13 = 0x4077280000000000;
                    if (!v12)
                    {
                      unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 8, a4);
                      LOBYTE(v13) = *(_DWORD *)(a2 + 16);
                      if (!v12) {
                        unsigned int v12 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))a3)(a1, &v13, 1, a4);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  DumpFunction(a2, 0, v10);
  return v12;
}

uint64_t DumpFunction(uint64_t a1, uint64_t a2, void *a3)
{
  if (*((_DWORD *)a3 + 6) || (uint64_t v6 = *(void *)(a1 + 104), v6 == a2))
  {
    LOBYTE(v29) = 0;
    int v5 = *((_DWORD *)a3 + 7);
    if (!v5)
    {
      int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]);
      *((_DWORD *)a3 + 7) = v5;
    }
  }
  else
  {
    DumpString(v6, a3);
    int v5 = *((_DWORD *)a3 + 7);
  }
  LODWORD(v29) = *(_DWORD *)(a1 + 40);
  if (v5) {
    goto LABEL_13;
  }
  int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LODWORD(v29) = *(_DWORD *)(a1 + 44);
  if (v5) {
    goto LABEL_13;
  }
  int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LOBYTE(v29) = *(unsigned char *)(a1 + 10);
  if (v5) {
    goto LABEL_13;
  }
  int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LOBYTE(v29) = *(unsigned char *)(a1 + 11);
  if (v5) {
    goto LABEL_13;
  }
  int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]);
  *((_DWORD *)a3 + 7) = v5;
  LOBYTE(v29) = *(unsigned char *)(a1 + 12);
  if (v5
    || (int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]),
        *((_DWORD *)a3 + 7) = v5,
        LODWORD(v29) = *(_DWORD *)(a1 + 24),
        v5)
    || (int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]),
        (*((_DWORD *)a3 + 7) = v5) != 0))
  {
LABEL_13:
    int v7 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    int v5 = ((uint64_t (*)(void, void, uint64_t, void))a3[1])(*a3, *(void *)(a1 + 56), 4 * *(int *)(a1 + 24), a3[2]);
    *((_DWORD *)a3 + 7) = v5;
    int v7 = *(_DWORD *)(a1 + 20);
    LODWORD(v29) = v7;
    if (!v5)
    {
      int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
      *((_DWORD *)a3 + 7) = v5;
    }
  }
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v7;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      int v11 = *(_DWORD *)(v10 + v8 + 8);
      LOBYTE(v29) = v11 & 0x3F;
      int v12 = *((_DWORD *)a3 + 7);
      if (!v12)
      {
        int v12 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]);
        *((_DWORD *)a3 + 7) = v12;
        int v11 = *(_DWORD *)(v10 + v8 + 8);
      }
      int v13 = v11 & 0x3F;
      if (v13 <= 3)
      {
        if (v13 != 1)
        {
          if (v13 != 3) {
            goto LABEL_32;
          }
          uint64_t v29 = *(void *)(v10 + v8);
          if (v12) {
            goto LABEL_32;
          }
LABEL_28:
          int v14 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 8, a3[2]);
LABEL_31:
          *((_DWORD *)a3 + 7) = v14;
          goto LABEL_32;
        }
        LOBYTE(v29) = *(_DWORD *)(v10 + v8);
        if (!v12)
        {
          int v14 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]);
          goto LABEL_31;
        }
      }
      else
      {
        switch(v13)
        {
          case 4:
            goto LABEL_22;
          case 19:
            uint64_t v29 = *(void *)(v10 + v8);
            if (!v12) {
              goto LABEL_28;
            }
            break;
          case 20:
LABEL_22:
            DumpString(*(void *)(v10 + v8), a3);
            break;
        }
      }
LABEL_32:
      v8 += 16;
      if (v9 == v8)
      {
        int v5 = *((_DWORD *)a3 + 7);
        break;
      }
    }
  }
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  LODWORD(v29) = *(_DWORD *)(a1 + 16);
  if (!v5)
  {
    int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = v5;
  }
  if ((int)v15 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 16 * v15;
    do
    {
      LOBYTE(v29) = *(unsigned char *)(*(void *)(a1 + 88) + v16 + 8);
      if (!v5)
      {
        int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]);
        *((_DWORD *)a3 + 7) = v5;
        LOBYTE(v29) = *(unsigned char *)(*(void *)(a1 + 88) + v16 + 9);
        if (!v5)
        {
          int v5 = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 1, a3[2]);
          *((_DWORD *)a3 + 7) = v5;
        }
      }
      v16 += 16;
    }
    while (v17 != v16);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 32);
  LODWORD(v29) = *(_DWORD *)(a1 + 32);
  if (!v5) {
    *((_DWORD *)a3 + 7) = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
  }
  if ((int)v18 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 8 * v18;
    do
    {
      DumpFunction(*(void *)(*(void *)(a1 + 64) + v19), *(void *)(a1 + 104), a3);
      v19 += 8;
    }
    while (v20 != v19);
  }
  if (*((_DWORD *)a3 + 6)) {
    int v21 = 0;
  }
  else {
    int v21 = *(_DWORD *)(a1 + 28);
  }
  LODWORD(v29) = v21;
  uint64_t result = *((unsigned int *)a3 + 7);
  if (!result)
  {
    uint64_t result = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = result;
    if (!result)
    {
      uint64_t result = ((uint64_t (*)(void, void, uint64_t, void))a3[1])(*a3, *(void *)(a1 + 72), 4 * v21, a3[2]);
      *((_DWORD *)a3 + 7) = result;
    }
  }
  if (*((_DWORD *)a3 + 6)) {
    int v23 = 0;
  }
  else {
    int v23 = *(_DWORD *)(a1 + 36);
  }
  LODWORD(v29) = v23;
  if (!result)
  {
    uint64_t result = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = result;
  }
  if (v23 >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 16 * v23;
    do
    {
      DumpString(*(void *)(*(void *)(a1 + 80) + v24), a3);
      LODWORD(v29) = *(_DWORD *)(*(void *)(a1 + 80) + v24 + 8);
      uint64_t result = *((unsigned int *)a3 + 7);
      if (!result)
      {
        uint64_t result = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
        *((_DWORD *)a3 + 7) = result;
        LODWORD(v29) = *(_DWORD *)(*(void *)(a1 + 80) + v24 + 12);
        if (!result)
        {
          uint64_t result = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
          *((_DWORD *)a3 + 7) = result;
        }
      }
      v24 += 16;
    }
    while (v25 != v24);
  }
  if (*((_DWORD *)a3 + 6)) {
    int v26 = 0;
  }
  else {
    int v26 = *(_DWORD *)(a1 + 16);
  }
  LODWORD(v29) = v26;
  if (!result)
  {
    uint64_t result = ((uint64_t (*)(void, uint64_t *, uint64_t, void))a3[1])(*a3, &v29, 4, a3[2]);
    *((_DWORD *)a3 + 7) = result;
  }
  if (v26 >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 16 * v26;
    do
    {
      uint64_t result = DumpString(*(void *)(*(void *)(a1 + 88) + v27), a3);
      v27 += 16;
    }
    while (v28 != v27);
  }
  return result;
}

uint64_t DumpString(uint64_t result, void *a2)
{
  if (!result)
  {
    char v7 = 0;
    if (*((_DWORD *)a2 + 7)) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(void, char *, uint64_t, void))a2[1])(*a2, &v7, 1, a2[2]);
LABEL_16:
    *((_DWORD *)a2 + 7) = result;
    return result;
  }
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 8) == 4) {
    uint64_t v4 = *(unsigned __int8 *)(result + 11);
  }
  else {
    uint64_t v4 = *(void *)(result + 16);
  }
  unint64_t v5 = v4 + 1;
  unint64_t v6 = v5;
  if (v5 <= 0xFE)
  {
    char v8 = v5;
    uint64_t result = *((unsigned int *)a2 + 7);
    if (result) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(void, char *, uint64_t, void))a2[1])(*a2, &v8, 1, a2[2]);
    goto LABEL_14;
  }
  char v9 = -1;
  if (!*((_DWORD *)a2 + 7))
  {
    uint64_t result = ((uint64_t (*)(void, char *, uint64_t, void))a2[1])(*a2, &v9, 1, a2[2]);
    *((_DWORD *)a2 + 7) = result;
    if (!result)
    {
      uint64_t result = ((uint64_t (*)(void, unint64_t *, uint64_t, void))a2[1])(*a2, &v6, 8, a2[2]);
LABEL_14:
      *((_DWORD *)a2 + 7) = result;
      if (result) {
        return result;
      }
      uint64_t result = ((uint64_t (*)(void, uint64_t, unint64_t, void))a2[1])(*a2, v3 + 24, v6 - 1, a2[2]);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t luaF_newCclosure(uint64_t a1, int a2)
{
  char v2 = a2;
  uint64_t result = luaC_newobj(a1, 38, 16 * a2 + 32);
  *(unsigned char *)(result + 10) = v2;
  return result;
}

uint64_t luaF_newLclosure(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = luaC_newobj(a1, 6, (int)(8 * a2 + 32));
  uint64_t v4 = v3;
  *(void *)(v3 + 24) = 0;
  *(unsigned char *)(v3 + 10) = a2;
  if (a2) {
    bzero((void *)(v3 - 8 * (a2 - 1) + 8 * (int)(a2 - 1) + 32), 8 * a2);
  }
  return v4;
}

uint64_t luaF_initupvals(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 10))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 32;
    do
    {
      uint64_t result = luaM_realloc_(v3, 0, 0, 32);
      *(void *)uint64_t result = result + 16;
      *(void *)(result + 8) = 1;
      *(_DWORD *)(result + 24) = 0;
      *(void *)(v5 + 8 * v4++) = result;
    }
    while (v4 < *(unsigned __int8 *)(a2 + 10));
  }
  return result;
}

uint64_t luaF_findupval(void *a1, unint64_t a2)
{
  uint64_t v5 = a1 + 8;
  unint64_t v4 = (unint64_t *)a1[8];
  if (v4 && (unint64_t v6 = *v4, *v4 >= a2))
  {
    while (1)
    {
      uint64_t result = (uint64_t)v4;
      if (v6 == a2) {
        break;
      }
      unint64_t v4 = (unint64_t *)v4[2];
      if (v4)
      {
        unint64_t v6 = *v4;
        if (*v4 >= a2) {
          continue;
        }
      }
      uint64_t v5 = (uint64_t *)(result + 16);
      goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    uint64_t result = luaM_realloc_((uint64_t)a1, 0, 0, 32);
    *(void *)(result + 16) = *v5;
    *(_DWORD *)(result + 24) = 1;
    *uint64_t v5 = result;
    *(void *)uint64_t result = a2;
    *(void *)(result + 8) = 0;
    if ((void *)a1[10] == a1)
    {
      uint64_t v8 = a1[3];
      a1[10] = *(void *)(v8 + 168);
      *(void *)(v8 + 168) = a1;
    }
  }
  return result;
}

uint64_t luaF_close(uint64_t result, unint64_t a2)
{
  uint64_t v3 = *(void *)(result + 64);
  if (v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(uint64_t **)v3;
      if (*(void *)v3 < a2) {
        break;
      }
      unint64_t v6 = (_OWORD *)(v3 + 16);
      *(void *)(v4 + 64) = *(void *)(v3 + 16);
      if (*(void *)(v3 + 8))
      {
        *unint64_t v6 = *(_OWORD *)v5;
        *(void *)uint64_t v3 = v6;
        if ((*(unsigned char *)(v3 + 24) & 0x40) != 0) {
          uint64_t result = luaC_upvalbarrier_(v4, (uint64_t **)v3);
        }
      }
      else
      {
        uint64_t result = luaM_realloc_(v4, v3, 32, 0);
      }
      uint64_t v3 = *(void *)(v4 + 64);
    }
    while (v3);
  }
  return result;
}

double luaF_newproto(uint64_t a1)
{
  uint64_t v1 = luaC_newobj(a1, 9, 120);
  *(_WORD *)(v1 + 10) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  return result;
}

uint64_t luaF_freeproto(uint64_t a1, uint64_t a2)
{
  luaM_realloc_(a1, *(void *)(a2 + 56), 4 * *(int *)(a2 + 24), 0);
  luaM_realloc_(a1, *(void *)(a2 + 64), 8 * *(int *)(a2 + 32), 0);
  luaM_realloc_(a1, *(void *)(a2 + 48), 16 * *(int *)(a2 + 20), 0);
  luaM_realloc_(a1, *(void *)(a2 + 72), 4 * *(int *)(a2 + 28), 0);
  luaM_realloc_(a1, *(void *)(a2 + 80), 16 * *(int *)(a2 + 36), 0);
  luaM_realloc_(a1, *(void *)(a2 + 88), 16 * *(int *)(a2 + 16), 0);

  return luaM_realloc_(a1, a2, 120, 0);
}

uint64_t luaF_getlocalname(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 36);
  if ((int)v3 >= 1)
  {
    for (int i = (_DWORD *)(*(void *)(a1 + 80) + 12); *(i - 1) <= a3; i += 4)
    {
      if (*i > a3 && !--a2) {
        return *(void *)(i - 3) + 24;
      }
      if (!--v3) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t luaC_barrier_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 24);
  if (*(unsigned __int8 *)(result + 85) <= 1u) {
    return reallymarkobject(result, a3);
  }
  *(unsigned char *)(a2 + 9) = *(unsigned char *)(a2 + 9) & 0xF8 | *(unsigned char *)(result + 84) & 3;
  return result;
}

uint64_t reallymarkobject(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(a2 + 9);
  while (1)
  {
    char v5 = v4 & 0xFC;
    *(unsigned char *)(v2 + 9) = v5;
    int v6 = *(unsigned __int8 *)(v2 + 8);
    if (v6 != 7) {
      break;
    }
    uint64_t v7 = *(void *)(v2 + 16);
    if (v7 && (*(unsigned char *)(v7 + 9) & 3) != 0)
    {
      uint64_t result = reallymarkobject(v3);
      char v5 = *(unsigned char *)(v2 + 9);
    }
    *(unsigned char *)(v2 + 9) = v5 | 4;
    *(void *)(v3 + 32) += *(void *)(v2 + 24) + 40;
    if ((*(unsigned char *)(v2 + 10) & 0x40) != 0)
    {
      uint64_t v2 = *(void *)(v2 + 32);
      char v4 = *(unsigned char *)(v2 + 9);
      if ((v4 & 3) != 0) {
        continue;
      }
    }
    return result;
  }
  switch(*(unsigned char *)(v2 + 8))
  {
    case 4:
      *(unsigned char *)(v2 + 9) = v5 | 4;
      uint64_t v8 = *(unsigned __int8 *)(v2 + 11);
      goto LABEL_19;
    case 5:
      *(void *)(v2 + 48) = *(void *)(v3 + 112);
      goto LABEL_17;
    case 6:
      goto LABEL_13;
    case 7:
      return result;
    case 8:
      *(void *)(v2 + 72) = *(void *)(v3 + 112);
      goto LABEL_17;
    case 9:
      *(void *)(v2 + 112) = *(void *)(v3 + 112);
      goto LABEL_17;
    default:
      if (v6 == 20)
      {
        *(unsigned char *)(v2 + 9) = v5 | 4;
        uint64_t v8 = *(void *)(v2 + 16);
LABEL_19:
        *(void *)(v3 + 32) += v8 + 25;
      }
      else if (v6 == 38)
      {
LABEL_13:
        *(void *)(v2 + 16) = *(void *)(v3 + 112);
LABEL_17:
        *(void *)(v3 + 112) = v2;
      }
      break;
  }
  return result;
}

uint64_t luaC_barrierback_(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 24);
  *(unsigned char *)(a2 + 9) &= ~4u;
  *(void *)(a2 + 48) = *(void *)(v2 + 120);
  *(void *)(v2 + 120) = a2;
  return result;
}

uint64_t luaC_upvalbarrier_(uint64_t a1, uint64_t **a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (*(unsigned __int8 *)(result + 85) <= 1u)
  {
    uint64_t v3 = **a2;
    if ((*(unsigned char *)(v3 + 9) & 3) != 0) {
      return reallymarkobject(result, v3);
    }
  }
  return result;
}

uint64_t luaC_fix(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 24);
  *(unsigned char *)(a2 + 9) &= 0xFCu;
  *(void *)(v2 + 88) = *(void *)a2;
  *(void *)a2 = *(void *)(v2 + 160);
  *(void *)(v2 + 160) = a2;
  return result;
}

uint64_t luaC_newobj(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = luaM_realloc_(a1, 0, a2 & 0xF, a3);
  *(unsigned char *)(result + 9) = *(unsigned char *)(v4 + 84) & 3;
  *(unsigned char *)(result + 8) = a2;
  *(void *)uint64_t result = *(void *)(v4 + 88);
  *(void *)(v4 + 88) = result;
  return result;
}

uint64_t luaC_upvdeccount(uint64_t result, void *a2)
{
  uint64_t v2 = a2[1] - 1;
  a2[1] = v2;
  if (!v2 && (void *)*a2 == a2 + 2) {
    return luaM_realloc_(result, (uint64_t)a2, 32, 0);
  }
  return result;
}

uint64_t *luaC_checkfinalizer(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if ((*(unsigned char *)(a2 + 9) & 8) == 0 && (*(unsigned char *)(a3 + 10) & 4) == 0)
    {
      uint64_t v4 = (uint64_t)result;
      uint64_t v5 = result[3];
      uint64_t result = luaT_gettm(a3, 2, *(void *)(v5 + 264));
      if (result)
      {
        if (*(unsigned __int8 *)(v5 + 85) - 2 <= 3)
        {
          *(unsigned char *)(a2 + 9) = *(unsigned char *)(a2 + 9) & 0xF8 | *(unsigned char *)(v5 + 84) & 3;
          if (*(void *)(v5 + 96) == a2)
          {
            do
              uint64_t result = sweeplist(v4, (uint64_t *)a2, 1);
            while (result == (uint64_t *)a2);
            *(void *)(v5 + 96) = result;
          }
        }
        int v6 = (void *)(v5 + 88);
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6 != (void *)a2);
        *uint64_t v7 = *(void *)a2;
        *(void *)a2 = *(void *)(v5 + 104);
        *(void *)(v5 + 104) = a2;
        *(unsigned char *)(a2 + 9) |= 8u;
      }
    }
  }
  return result;
}

uint64_t *luaC_freeallobjects(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)(v2 + 152);
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v6 = (void *)(v2 + 104);
  uint64_t v5 = *(void **)(v2 + 104);
  uint64_t v7 = *(void *)(a1 + 24);
  if (v5)
  {
    do
    {
      *int v6 = *v5;
      *uint64_t v5 = *v4;
      *uint64_t v4 = v5;
      uint64_t v4 = v5;
      uint64_t v5 = (void *)*v6;
    }
    while (*v6);
    uint64_t v7 = *(void *)(a1 + 24);
  }
  while (*(void *)(v7 + 152))
    GCTM(a1, 0);
  *(unsigned char *)(v2 + 84) = 3;
  *(unsigned char *)(v2 + 86) = 0;
  sweeplist(a1, (uint64_t *)(v2 + 104), -1);
  sweeplist(a1, (uint64_t *)(v2 + 88), -1);

  return sweeplist(a1, (uint64_t *)(v2 + 160), -1);
}

uint64_t *sweeplist(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v5 = a2;
  int v7 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 84);
  int v8 = v7 ^ 3;
  char v9 = v7 & 3;
  while (a3)
  {
    int v10 = *(unsigned __int8 *)(v3 + 9);
    if (((v10 ^ 3) & v8) != 0)
    {
      *(unsigned char *)(v3 + 9) = v10 & 0xF8 | v9;
      uint64_t v5 = (uint64_t *)v3;
    }
    else
    {
      uint64_t v11 = *(void *)v3;
      *uint64_t v5 = *(void *)v3;
      switch(*(unsigned char *)(v3 + 8))
      {
        case 4:
          luaS_remove(a1, v3);
          uint64_t v12 = *(unsigned __int8 *)(v3 + 11);
          goto LABEL_22;
        case 5:
          luaH_free(a1, v3);
          break;
        case 6:
          unsigned __int8 v14 = *(unsigned char *)(v3 + 10);
          if (v14)
          {
            for (unint64_t i = 0; i < v14; ++i)
            {
              uint64_t v16 = *(void **)(v3 + 32 + 8 * i);
              if (v16)
              {
                luaC_upvdeccount(a1, v16);
                unsigned __int8 v14 = *(unsigned char *)(v3 + 10);
              }
            }
          }
          uint64_t v13 = 8 * v14;
          goto LABEL_17;
        case 7:
          uint64_t v17 = *(void *)(v3 + 24) + 40;
          goto LABEL_23;
        case 8:
          luaE_freethread(a1, v3);
          break;
        case 9:
          luaF_freeproto(a1, v3);
          break;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
          goto LABEL_25;
        case 0x14:
          uint64_t v12 = *(void *)(v3 + 16);
LABEL_22:
          uint64_t v17 = v12 + 25;
          goto LABEL_23;
        default:
          if (*(unsigned char *)(v3 + 8) != 38) {
            goto LABEL_25;
          }
          uint64_t v13 = 16 * *(unsigned __int8 *)(v3 + 10);
LABEL_17:
          uint64_t v17 = v13 + 32;
LABEL_23:
          luaM_realloc_(a1, v3, v17, 0);
          break;
      }
    }
    uint64_t v11 = *v5;
LABEL_25:
    --a3;
    uint64_t v3 = v11;
    if (!v11) {
      return 0;
    }
  }
  return v5;
}

uint64_t luaC_runtilstate(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (((a2 >> *(unsigned char *)(v2 + 85)) & 1) == 0)
  {
    uint64_t v4 = result;
    do
      uint64_t result = singlestep(v4);
    while (((a2 >> *(unsigned char *)(v2 + 85)) & 1) == 0);
  }
  return result;
}

uint64_t singlestep(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  switch(*(unsigned char *)(v1 + 85))
  {
    case 0:
      *(void *)(v1 + 32) = 0;
      propagatemark(v1);
      if (!*(void *)(v1 + 112)) {
        *(unsigned char *)(v1 + 85) = 1;
      }
      return *(void *)(v1 + 32);
    case 1:
      uint64_t v3 = *(void *)(a1 + 24);
      if (*(void *)(v1 + 112))
      {
        do
          propagatemark(v1);
        while (*(void *)(v1 + 112));
        uint64_t v3 = *(void *)(a1 + 24);
      }
      uint64_t v4 = *(void *)(v3 + 120);
      *(unsigned char *)(v3 + 85) = 8;
      *(void *)(v3 + 32) = 0;
      if ((*(unsigned char *)(a1 + 9) & 3) != 0) {
        reallymarkobject(v3, a1);
      }
      if ((*(unsigned char *)(v3 + 72) & 0x40) != 0)
      {
        uint64_t v5 = *(void *)(v3 + 64);
        if ((*(unsigned char *)(v5 + 9) & 3) != 0) {
          reallymarkobject(v3, v5);
        }
      }
      markmt(v3);
      int v7 = (uint64_t *)(v3 + 168);
      uint64_t v6 = *(void *)(v3 + 168);
      if (v6)
      {
        do
        {
          if ((*(unsigned char *)(v6 + 9) & 7) != 0 || !*(void *)(v6 + 64))
          {
            *int v7 = *(void *)(v6 + 80);
            *(void *)(v6 + 80) = v6;
            for (uint64_t i = *(void *)(v6 + 64); i; uint64_t i = *(void *)(i + 16))
            {
              if (*(_DWORD *)(i + 24))
              {
                char v9 = *(uint64_t **)i;
                if ((*(unsigned char *)(*(void *)i + 8) & 0x40) != 0 && (*(unsigned char *)(*v9 + 9) & 3) != 0) {
                  reallymarkobject(v3, *v9);
                }
                *(_DWORD *)(i + 24) = 0;
              }
            }
          }
          else
          {
            int v7 = (uint64_t *)(v6 + 80);
          }
          uint64_t v6 = *v7;
        }
        while (*v7);
      }
      while (*(void *)(v3 + 112))
        propagatemark(v3);
      uint64_t v10 = *(void *)(v3 + 32);
      *(void *)(v3 + 112) = v4;
      while (*(void *)(v3 + 112))
        propagatemark(v3);
      *(void *)(v3 + 32) = 0;
      convergeephemerons(v3);
      clearvalues(v3, *(void *)(v3 + 128), 0);
      clearvalues(v3, *(void *)(v3 + 144), 0);
      uint64_t v11 = *(void *)(v3 + 128);
      uint64_t v12 = *(void *)(v3 + 144);
      uint64_t v13 = (void *)(v3 + 152);
      uint64_t v14 = *(void *)(v3 + 32);
      do
      {
        uint64_t v15 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
      uint64_t v16 = (uint64_t *)(v3 + 104);
      uint64_t v17 = *(void *)(v3 + 104);
      if (v17)
      {
        do
        {
          if ((*(unsigned char *)(v17 + 9) & 3) != 0)
          {
            uint64_t *v16 = *(void *)v17;
            *(void *)uint64_t v17 = *v15;
            *uint64_t v15 = v17;
            uint64_t v15 = (void *)v17;
          }
          else
          {
            uint64_t v16 = (uint64_t *)v17;
          }
          uint64_t v17 = *v16;
        }
        while (*v16);
      }
      *(_DWORD *)(v3 + 200) = 1;
      markbeingfnz(v3);
      while (*(void *)(v3 + 112))
        propagatemark(v3);
      *(void *)(v3 + 32) = 0;
      convergeephemerons(v3);
      clearkeys(v3, *(void *)(v3 + 136));
      clearkeys(v3, *(void *)(v3 + 144));
      clearvalues(v3, *(void *)(v3 + 128), v11);
      clearvalues(v3, *(void *)(v3 + 144), v12);
      luaS_clearcache(v3);
      *(unsigned char *)(v3 + 84) ^= 3u;
      uint64_t v28 = *(void *)(v3 + 32);
      uint64_t v29 = *(void *)(a1 + 24);
      *(unsigned char *)(v29 + 85) = 2;
      uint64_t v24 = v14 + v10 + v28;
      do
      {
        unint64_t v30 = sweeplist(a1, (uint64_t *)(v29 + 88), 1);
        v24 += 7;
      }
      while (v30 == (uint64_t *)(v29 + 88));
      *(void *)(v29 + 96) = v30;
      *(void *)(v1 + 40) = *(void *)(v1 + 24) + *(void *)(v1 + 16);
      return v24;
    case 2:
      uint64_t v18 = v1 + 104;
      uint64_t v19 = *(void *)(a1 + 24);
      char v20 = 3;
      goto LABEL_43;
    case 3:
      uint64_t v18 = v1 + 152;
      uint64_t v19 = *(void *)(a1 + 24);
      char v20 = 4;
      goto LABEL_43;
    case 4:
      uint64_t v19 = *(void *)(a1 + 24);
      char v20 = 5;
      uint64_t v18 = 0;
LABEL_43:
      return sweepstep(a1, v19, v20, v18);
    case 5:
      *(unsigned char *)(*(void *)(v1 + 224) + 9) = *(unsigned char *)(*(void *)(v1 + 224) + 9) & 0xF8 | *(unsigned char *)(v1 + 84) & 3;
      if (*(unsigned char *)(v1 + 86) != 1)
      {
        uint64_t v22 = *(void *)(v1 + 24);
        *(void *)(v1 + 176) = luaM_realloc_(a1, *(void *)(v1 + 176), *(void *)(v1 + 192), 0);
        *(void *)(v1 + 192) = 0;
        int v23 = *(_DWORD *)(v1 + 60);
        if (*(_DWORD *)(v1 + 56) < v23 / 4) {
          luaS_resize(a1, v23 / 2);
        }
        *(void *)(v1 + 40) += *(void *)(v1 + 24) - v22;
      }
      uint64_t v24 = 0;
      char v25 = 6;
      goto LABEL_65;
    case 6:
      if (*(void *)(v1 + 152) && *(unsigned char *)(v1 + 86) != 1) {
        return 7 * (int)runafewfinalizers(a1);
      }
      uint64_t v24 = 0;
      char v25 = 7;
LABEL_65:
      *(unsigned char *)(v1 + 85) = v25;
      return v24;
    case 7:
      *(void *)(v1 + 32) = 8 * *(int *)(v1 + 60);
      *(_OWORD *)(v1 + 112) = 0u;
      *(_OWORD *)(v1 + 128) = 0u;
      *(void *)(v1 + 144) = 0;
      uint64_t v26 = *(void *)(v1 + 224);
      if ((*(unsigned char *)(v26 + 9) & 3) != 0) {
        reallymarkobject(v1, v26);
      }
      if ((*(unsigned char *)(v1 + 72) & 0x40) != 0)
      {
        uint64_t v27 = *(void *)(v1 + 64);
        if ((*(unsigned char *)(v27 + 9) & 3) != 0) {
          reallymarkobject(v1, v27);
        }
      }
      markmt(v1);
      markbeingfnz(v1);
      *(unsigned char *)(v1 + 85) = 0;
      return *(void *)(v1 + 32);
    default:
      return 0;
  }
}

uint64_t luaC_step(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v1 + 87))
  {
    uint64_t v3 = *(void *)(v1 + 24) / 200 + 1;
    uint64_t v4 = *(int *)(v1 + 208);
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL / v4;
    uint64_t v6 = v3 * v4;
    if (v3 >= v5) {
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v7 = v6;
    }
    while (1)
    {
      v7 -= singlestep(a1);
      int v8 = *(unsigned __int8 *)(v1 + 85);
      if (v7 < -2399) {
        break;
      }
      if (v8 == 7) {
        goto LABEL_10;
      }
    }
    if (v8 == 7)
    {
LABEL_10:
      unint64_t v11 = *(void *)(v1 + 40) / 0x64uLL;
      int64_t v12 = *(int *)(v1 + 204);
      int64_t v13 = 0x7FFFFFFFFFFFFFFFLL / v11;
      uint64_t v14 = v11 * v12;
      if (v13 <= v12) {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v10 = *(void *)(v1 + 24) + *(void *)(v1 + 16) - v14;
      uint64_t v9 = v1;
      goto LABEL_13;
    }
    luaE_setdebt(v1, 200 * (v7 / *(int *)(v1 + 208)));
    return runafewfinalizers(a1);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = -24000;
LABEL_13:
    return luaE_setdebt(v9, v10);
  }
}

uint64_t runafewfinalizers(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(v1 + 152);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      unsigned int v5 = *(_DWORD *)(v1 + 200);
      if (v4 >= v5) {
        break;
      }
      GCTM(a1, 1);
      uint64_t v4 = (v4 + 1);
      uint64_t v2 = *(void *)(v1 + 152);
      if (!v2) {
        goto LABEL_8;
      }
    }
    LODWORD(v2) = 2 * v5;
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_8:
  *(_DWORD *)(v1 + 200) = v2;
  return v4;
}

uint64_t luaC_fullgc(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (a2) {
    *(unsigned char *)(v3 + 86) = 1;
  }
  if (*(unsigned __int8 *)(v3 + 85) <= 1u)
  {
    *(unsigned char *)(v3 + 85) = 2;
    do
      uint64_t v4 = sweeplist(a1, (uint64_t *)(v3 + 88), 1);
    while (v4 == (uint64_t *)(v3 + 88));
    *(void *)(v3 + 96) = v4;
  }
  luaC_runtilstate(a1, 0x80u);
  luaC_runtilstate(a1, 0xFFFFFF7F);
  luaC_runtilstate(a1, 0x40u);
  luaC_runtilstate(a1, 0x80u);
  *(unsigned char *)(v3 + 86) = 0;
  unint64_t v5 = *(void *)(v3 + 40) / 0x64uLL;
  int64_t v6 = *(int *)(v3 + 204);
  int64_t v7 = 0x7FFFFFFFFFFFFFFFLL / v5;
  uint64_t v8 = v5 * v6;
  if (v7 <= v6) {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = *(void *)(v3 + 24) + *(void *)(v3 + 16) - v8;

  return luaE_setdebt(v3, v9);
}

uint64_t GCTM(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  *((void *)&v14 + 1) = 0;
  uint64_t v5 = *(void *)(v4 + 152);
  *(void *)(v4 + 152) = *(void *)v5;
  *(void *)uint64_t v5 = *(void *)(v4 + 88);
  *(void *)(v4 + 88) = v5;
  char v6 = *(unsigned char *)(v5 + 9);
  *(unsigned char *)(v5 + 9) = v6 & 0xF7;
  if (*(unsigned __int8 *)(v4 + 85) - 2 <= 3) {
    *(unsigned char *)(v5 + 9) = v6 & 0xF0 | *(unsigned char *)(v4 + 84) & 3;
  }
  *(void *)&long long v14 = v5;
  DWORD2(v14) = *(unsigned __int8 *)(v5 + 8) | 0x40;
  uint64_t result = (uint64_t)luaT_gettmbyobj(a1, &v14, 2u);
  if (result)
  {
    if ((*(_DWORD *)(result + 8) & 0xF) == 6)
    {
      char v8 = *(unsigned char *)(a1 + 201);
      char v9 = *(unsigned char *)(v4 + 87);
      *(unsigned char *)(a1 + 201) = 0;
      *(unsigned char *)(v4 + 87) = 0;
      *(_OWORD *)*(void *)(a1 + 16) = *(_OWORD *)result;
      *(_OWORD *)(*(void *)(a1 + 16) + 16) = v14;
      uint64_t v10 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v10 + 32;
      uint64_t result = luaD_pcall(a1, (void (*)(uint64_t, uint64_t))dothecall, 0, v10 - *(void *)(a1 + 56), 0);
      *(unsigned char *)(a1 + 201) = v8;
      *(unsigned char *)(v4 + 87) = v9;
      if (a2)
      {
        int v11 = result;
        if (result)
        {
          if (result == 2)
          {
            uint64_t v12 = *(void *)(a1 + 16);
            if ((*(_DWORD *)(v12 - 8) & 0xF) == 4) {
              int64_t v13 = (const char *)(*(void *)(v12 - 16) + 24);
            }
            else {
              int64_t v13 = "no message";
            }
            luaO_pushfstring(a1, "error in __gc metamethod (%s)", v13);
            int v11 = 5;
          }
          return luaD_throw(a1, v11);
        }
      }
    }
  }
  return result;
}

uint64_t dothecall()
{
  return luaD_call();
}

uint64_t propagatemark(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 112);
  char v3 = *(unsigned char *)(v2 + 9);
  *(unsigned char *)(v2 + 9) = v3 | 4;
  switch(*(unsigned char *)(v2 + 8))
  {
    case 5:
      uint64_t v4 = *(void *)(v2 + 40);
      *(void *)(result + 112) = *(void *)(v2 + 48);
      if (!v4) {
        goto LABEL_83;
      }
      if ((*(unsigned char *)(v4 + 10) & 8) != 0)
      {
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t result = (uint64_t)luaT_gettm(v4, 3, *(void *)(result + 272));
        uint64_t v5 = (_DWORD *)result;
        uint64_t v4 = *(void *)(v2 + 40);
        if (!v4) {
          goto LABEL_77;
        }
      }
      if ((*(unsigned char *)(v4 + 9) & 3) != 0) {
        uint64_t result = reallymarkobject(v1, v4);
      }
LABEL_77:
      if (!v5
        || (v5[2] & 0xF) != 4
        || (uint64_t v39 = cstdlib_strchr((char *)(*(void *)v5 + 24), 107),
            uint64_t result = (uint64_t)cstdlib_strchr((char *)(*(void *)v5 + 24), 118),
            !((unint64_t)v39 | result)))
      {
LABEL_83:
        unint64_t v40 = *(void *)(v2 + 24);
        unint64_t v41 = v40 + 32 * (1 << *(unsigned char *)(v2 + 11));
        unint64_t v42 = *(unsigned int *)(v2 + 12);
        if (v42)
        {
          uint64_t v43 = 0;
          for (unint64_t i = 0; i < v42; ++i)
          {
            uint64_t v45 = *(void *)(v2 + 16);
            if ((*(unsigned char *)(v45 + v43 + 8) & 0x40) != 0)
            {
              uint64_t v46 = *(void *)(v45 + v43);
              if ((*(unsigned char *)(v46 + 9) & 3) != 0)
              {
                uint64_t result = reallymarkobject(v1, v46);
                unint64_t v42 = *(unsigned int *)(v2 + 12);
              }
            }
            v43 += 16;
          }
          unint64_t v40 = *(void *)(v2 + 24);
        }
        for (; v40 < v41; v40 += 32)
        {
          int v47 = *(_DWORD *)(v40 + 8);
          int v48 = *(_DWORD *)(v40 + 24);
          if (v47)
          {
            if ((v48 & 0x40) != 0)
            {
              uint64_t v49 = *(void *)(v40 + 16);
              if ((*(unsigned char *)(v49 + 9) & 3) != 0)
              {
                uint64_t result = reallymarkobject(v1, v49);
                int v47 = *(_DWORD *)(v40 + 8);
              }
            }
            if ((v47 & 0x40) != 0 && (*(unsigned char *)(*(void *)v40 + 9) & 3) != 0) {
              uint64_t result = reallymarkobject(v1, *(void *)v40);
            }
          }
          else if ((v48 & 0x40) != 0 && (*(unsigned char *)(*(void *)(v40 + 16) + 9) & 3) != 0)
          {
            *(_DWORD *)(v40 + 24) = 10;
          }
        }
        goto LABEL_102;
      }
      *(unsigned char *)(v2 + 9) &= ~4u;
      if (v39)
      {
        if (result)
        {
          *(void *)(v2 + 48) = *(void *)(v1 + 144);
          *(void *)(v1 + 144) = v2;
        }
        else
        {
          uint64_t result = traverseephemeron(v1, v2);
        }
        goto LABEL_102;
      }
      uint64_t v50 = *(unsigned __int8 *)(v2 + 11);
      BOOL v51 = *(_DWORD *)(v2 + 12) != 0;
      if (v50 != 31)
      {
        unint64_t v52 = *(void *)(v2 + 24);
        unint64_t v53 = v52 + 32 * (1 << v50);
        do
        {
          int v54 = *(_DWORD *)(v52 + 24);
          if (*(_DWORD *)(v52 + 8))
          {
            if ((v54 & 0x40) != 0)
            {
              uint64_t v55 = *(void *)(v52 + 16);
              if ((*(unsigned char *)(v55 + 9) & 3) != 0) {
                uint64_t result = reallymarkobject(v1, v55);
              }
            }
            if (v51)
            {
              BOOL v51 = 1;
            }
            else
            {
              uint64_t result = iscleared(v1, v52);
              BOOL v51 = result != 0;
            }
          }
          else if ((v54 & 0x40) != 0 && (*(unsigned char *)(*(void *)(v52 + 16) + 9) & 3) != 0)
          {
            *(_DWORD *)(v52 + 24) = 10;
          }
          v52 += 32;
        }
        while (v52 < v53);
      }
      if (*(unsigned char *)(v1 + 85))
      {
        if (!v51)
        {
LABEL_102:
          uint64_t v16 = 32 * (1 << *(unsigned char *)(v2 + 11)) + 16 * *(unsigned int *)(v2 + 12) + 56;
          goto LABEL_109;
        }
        uint64_t v56 = (uint64_t *)(v1 + 128);
      }
      else
      {
        uint64_t v56 = (uint64_t *)(v1 + 120);
      }
      *(void *)(v2 + 48) = *v56;
      *uint64_t v56 = v2;
      goto LABEL_102;
    case 6:
      uint64_t v11 = *(void *)(v2 + 24);
      *(void *)(result + 112) = *(void *)(v2 + 16);
      if (v11 && (*(unsigned char *)(v11 + 9) & 3) != 0) {
        uint64_t result = reallymarkobject(result, v11);
      }
      if (*(unsigned char *)(v2 + 10))
      {
        unint64_t v12 = 0;
        do
        {
          int64_t v13 = *(uint64_t **)(v2 + 32 + 8 * v12);
          if (v13)
          {
            uint64_t v14 = *v13;
            if ((uint64_t *)*v13 == v13 + 2 || *(unsigned char *)(v1 + 85) == 8)
            {
              if ((*(unsigned char *)(v14 + 8) & 0x40) != 0 && (*(unsigned char *)(*(void *)v14 + 9) & 3) != 0) {
                uint64_t result = reallymarkobject(v1, *(void *)v14);
              }
            }
            else
            {
              *((_DWORD *)v13 + 6) = 1;
            }
          }
          ++v12;
          unint64_t v15 = *(unsigned __int8 *)(v2 + 10);
        }
        while (v12 < v15);
        uint64_t v10 = 8 * v15;
LABEL_28:
        uint64_t v16 = v10 + 32;
      }
      else
      {
        uint64_t v16 = 32;
      }
LABEL_109:
      *(void *)(v1 + 32) += v16;
      return result;
    case 7:
      return result;
    case 8:
      uint64_t v17 = *(void *)(v2 + 72);
      *(void *)(v2 + 72) = *(void *)(result + 120);
      *(void *)(result + 112) = v17;
      *(void *)(result + 120) = v2;
      *(unsigned char *)(v2 + 9) = v3 & 0xFB;
      unint64_t v18 = *(void *)(v2 + 56);
      if (v18)
      {
        unint64_t v19 = *(void *)(v2 + 16);
        while (v18 < v19)
        {
          if ((*(unsigned char *)(v18 + 8) & 0x40) != 0 && (*(unsigned char *)(*(void *)v18 + 9) & 3) != 0)
          {
            uint64_t result = reallymarkobject(v1, *(void *)v18);
            unint64_t v19 = *(void *)(v2 + 16);
          }
          v18 += 16;
        }
        if (*(unsigned char *)(v1 + 85) == 8)
        {
          unint64_t v38 = *(void *)(v2 + 56) + 16 * *(int *)(v2 + 184);
          while (v18 < v38)
          {
            *(_DWORD *)(v18 + 8) = 0;
            v18 += 16;
          }
          if (*(void *)(v2 + 80) == v2 && *(void *)(v2 + 64))
          {
            *(void *)(v2 + 80) = *(void *)(v1 + 168);
            *(void *)(v1 + 168) = v2;
          }
        }
        else if (*(unsigned char *)(v1 + 86) != 1)
        {
          uint64_t result = luaD_shrinkstack(v2);
        }
        uint64_t v16 = 16 * *(int *)(v2 + 184) + 208;
      }
      else
      {
        uint64_t v16 = 1;
      }
      goto LABEL_109;
    case 9:
      *(void *)(result + 112) = *(void *)(v2 + 112);
      uint64_t v20 = *(void *)(v2 + 96);
      if (v20 && (*(unsigned char *)(v20 + 9) & 3) != 0) {
        *(void *)(v2 + 96) = 0;
      }
      uint64_t v21 = *(void *)(v2 + 104);
      if (v21 && (*(unsigned char *)(v21 + 9) & 3) != 0) {
        uint64_t result = reallymarkobject(result, v21);
      }
      int v22 = *(_DWORD *)(v2 + 20);
      if (v22 >= 1)
      {
        uint64_t v23 = 0;
        for (uint64_t j = 0; j < v22; ++j)
        {
          uint64_t v25 = *(void *)(v2 + 48);
          if ((*(unsigned char *)(v25 + v23 + 8) & 0x40) != 0)
          {
            uint64_t v26 = *(void *)(v25 + v23);
            if ((*(unsigned char *)(v26 + 9) & 3) != 0)
            {
              uint64_t result = reallymarkobject(v1, v26);
              int v22 = *(_DWORD *)(v2 + 20);
            }
          }
          v23 += 16;
        }
      }
      int v27 = *(_DWORD *)(v2 + 16);
      if (v27 >= 1)
      {
        uint64_t v28 = 0;
        for (uint64_t k = 0; k < v27; ++k)
        {
          uint64_t v30 = *(void *)(*(void *)(v2 + 88) + v28);
          if (v30 && (*(unsigned char *)(v30 + 9) & 3) != 0)
          {
            uint64_t result = reallymarkobject(v1, v30);
            int v27 = *(_DWORD *)(v2 + 16);
          }
          v28 += 16;
        }
      }
      int v31 = *(_DWORD *)(v2 + 32);
      if (v31 >= 1)
      {
        for (uint64_t m = 0; m < v31; ++m)
        {
          uint64_t v33 = *(void *)(*(void *)(v2 + 64) + 8 * m);
          if (v33 && (*(unsigned char *)(v33 + 9) & 3) != 0)
          {
            uint64_t result = reallymarkobject(v1, v33);
            int v31 = *(_DWORD *)(v2 + 32);
          }
        }
      }
      int v34 = *(_DWORD *)(v2 + 36);
      if (v34 >= 1)
      {
        uint64_t v35 = 0;
        for (uint64_t n = 0; n < v34; ++n)
        {
          uint64_t v37 = *(void *)(*(void *)(v2 + 80) + v35);
          if (v37 && (*(unsigned char *)(v37 + 9) & 3) != 0)
          {
            uint64_t result = reallymarkobject(v1, v37);
            int v34 = *(_DWORD *)(v2 + 36);
          }
          v35 += 16;
        }
        int v31 = *(_DWORD *)(v2 + 32);
      }
      uint64_t v16 = 8 * v31
          + 4 * (*(_DWORD *)(v2 + 28) + *(_DWORD *)(v2 + 24))
          + 16 * (*(_DWORD *)(v2 + 20) + v34 + *(_DWORD *)(v2 + 16))
          + 120;
      goto LABEL_109;
    default:
      if (*(unsigned char *)(v2 + 8) != 38) {
        return result;
      }
      *(void *)(result + 112) = *(void *)(v2 + 16);
      unsigned int v6 = *(unsigned __int8 *)(v2 + 10);
      if (*(unsigned char *)(v2 + 10))
      {
        unint64_t v7 = 0;
        char v8 = (unsigned char *)(v2 + 40);
        do
        {
          if ((*v8 & 0x40) != 0)
          {
            uint64_t v9 = *((void *)v8 - 1);
            if ((*(unsigned char *)(v9 + 9) & 3) != 0)
            {
              uint64_t result = reallymarkobject(v1, v9);
              unsigned int v6 = *(unsigned __int8 *)(v2 + 10);
            }
          }
          ++v7;
          v8 += 16;
        }
        while (v7 < v6);
      }
      uint64_t v10 = 16 * v6;
      goto LABEL_28;
  }
}

uint64_t sweepstep(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = *(uint64_t **)(a2 + 96);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = sweeplist(a1, v7, 85);
    *(void *)(a2 + 96) = v9;
    *(void *)(a2 + 40) += *(void *)(a2 + 24) - v8;
    if (v9) {
      return 595;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(a2 + 85) = a3;
  *(void *)(a2 + 96) = a4;
  return result;
}

uint64_t markmt(uint64_t result)
{
  uint64_t v1 = result;
  for (uint64_t i = 440; i != 512; i += 8)
  {
    uint64_t v3 = *(void *)(v1 + i);
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 9) & 3) != 0) {
        uint64_t result = reallymarkobject(v1, v3);
      }
    }
  }
  return result;
}

uint64_t markbeingfnz(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 152);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      if ((*(unsigned char *)(v1 + 9) & 3) != 0) {
        uint64_t result = reallymarkobject(v2, v1);
      }
      uint64_t v1 = *(void *)v1;
    }
    while (v1);
  }
  return result;
}

uint64_t traverseephemeron(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a2 + 24);
  uint64_t v5 = &v4[8 * (1 << *(unsigned char *)(a2 + 11))];
  unint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(a2 + 16);
      if ((*(unsigned char *)(v10 + v7 + 8) & 0x40) != 0)
      {
        uint64_t v11 = *(void *)(v10 + v7);
        if ((*(unsigned char *)(v11 + 9) & 3) != 0)
        {
          reallymarkobject(a1, v11);
          unint64_t v6 = *(unsigned int *)(a2 + 12);
          uint64_t v9 = 1;
        }
      }
      ++v8;
      v7 += 16;
    }
    while (v8 < v6);
    uint64_t v4 = *(_DWORD **)(a2 + 24);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v4 < v5)
  {
    int v12 = 0;
    int v13 = 0;
    do
    {
      if (v4[2])
      {
        int v14 = iscleared(a1, (uint64_t)(v4 + 4));
        int v15 = v4[2];
        if (v14)
        {
          if ((v15 & 0x40) != 0 && (*(unsigned char *)(*(void *)v4 + 9) & 3) != 0) {
            int v12 = 1;
          }
          int v13 = 1;
        }
        else if ((v15 & 0x40) != 0 && (*(unsigned char *)(*(void *)v4 + 9) & 3) != 0)
        {
          reallymarkobject(a1, *(void *)v4);
          uint64_t v9 = 1;
        }
      }
      else if ((v4[6] & 0x40) != 0 && (*(unsigned char *)(*((void *)v4 + 2) + 9) & 3) != 0)
      {
        v4[6] = 10;
      }
      v4 += 8;
    }
    while (v4 < v5);
    if (*(unsigned char *)(a1 + 85))
    {
      if (v12)
      {
        uint64_t v16 = (void *)(a1 + 136);
      }
      else
      {
        if (!v13) {
          return v9;
        }
        uint64_t v16 = (void *)(a1 + 144);
      }
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v16 = (void *)(a1 + 120);
LABEL_29:
    *(void *)(a2 + 48) = *v16;
    void *v16 = a2;
    return v9;
  }
  if (!*(unsigned char *)(a1 + 85)) {
    goto LABEL_28;
  }
  return v9;
}

uint64_t iscleared(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0x40) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)a2;
  if ((v2 & 0xF) == 4)
  {
    if ((*(unsigned char *)(v3 + 9) & 3) != 0) {
      reallymarkobject(a1, v3);
    }
    return 0;
  }
  return *(unsigned char *)(v3 + 9) & 3;
}

uint64_t convergeephemerons(uint64_t result)
{
  uint64_t v1 = result;
  do
  {
    uint64_t v2 = *(void *)(v1 + 136);
    *(void *)(v1 + 136) = 0;
    if (!v2) {
      break;
    }
    int v3 = 0;
    do
    {
      while (1)
      {
        uint64_t v4 = v2;
        uint64_t v2 = *(void *)(v2 + 48);
        uint64_t result = traverseephemeron(v1, v4);
        if (result) {
          break;
        }
        if (!v2) {
          goto LABEL_10;
        }
      }
      while (*(void *)(v1 + 112))
        uint64_t result = propagatemark(v1);
      int v3 = 1;
    }
    while (v2);
LABEL_10:
    ;
  }
  while (v3);
  return result;
}

uint64_t clearvalues(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(void *)(v4 + 24);
      char v7 = *(unsigned char *)(v4 + 11);
      if (*(_DWORD *)(v4 + 12))
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        do
        {
          uint64_t v10 = *(void *)(v4 + 16) + v8;
          uint64_t result = iscleared(v5, v10);
          if (result) {
            *(_DWORD *)(v10 + 8) = 0;
          }
          ++v9;
          v8 += 16;
        }
        while (v9 < *(unsigned int *)(v4 + 12));
        unint64_t v11 = *(void *)(v4 + 24);
      }
      else
      {
        unint64_t v11 = *(void *)(v4 + 24);
      }
      unint64_t v12 = v6 + 32 * (1 << v7);
      while (v11 < v12)
      {
        if (*(_DWORD *)(v11 + 8))
        {
          uint64_t result = iscleared(v5, v11);
          if (result)
          {
            *(_DWORD *)(v11 + 8) = 0;
            if ((*(unsigned char *)(v11 + 24) & 0x40) != 0 && (*(unsigned char *)(*(void *)(v11 + 16) + 9) & 3) != 0) {
              *(_DWORD *)(v11 + 24) = 10;
            }
          }
        }
        v11 += 32;
      }
      uint64_t v4 = *(void *)(v4 + 48);
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t clearkeys(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(unsigned __int8 *)(v2 + 11);
      if (v4 != 31)
      {
        uint64_t v5 = *(void *)(v2 + 24);
        unint64_t v6 = v5 + 32 * (1 << v4);
        char v7 = (_DWORD *)(v5 + 16);
        do
        {
          if (*(v7 - 2))
          {
            uint64_t result = iscleared(v3, (uint64_t)v7);
            if (result)
            {
              *(v7 - 2) = 0;
              if ((v7[2] & 0x40) != 0 && (*(unsigned char *)(*(void *)v7 + 9) & 3) != 0) {
                v7[2] = 10;
              }
            }
          }
          uint64_t v8 = v7 + 4;
          v7 += 8;
        }
        while ((unint64_t)v8 < v6);
      }
      uint64_t v2 = *(void *)(v2 + 48);
    }
    while (v2);
  }
  return result;
}

uint64_t luaL_openlibs(uint64_t a1)
{
  uint64_t v2 = &loadedlibs;
  do
  {
    uint64_t v3 = luaD_rawrunprotected(a1, (void (*)(uint64_t, uint64_t))requiref, (uint64_t)v2);
    if (v3) {
      break;
    }
    lua_settop(a1, 0xFFFFFFFE);
    uint64_t v4 = v2[3];
    v2 += 2;
  }
  while (v4);
  return v3;
}

uint64_t *requiref(void *a1, uint64_t a2)
{
  return luaL_requiref(a1, *(char **)a2, *(void *)(a2 + 8), 1);
}

uint64_t luaX_init(uint64_t a1)
{
  uint64_t v2 = luaS_newlstr(a1, "_ENV", 4uLL);
  luaC_fix(a1, v2);
  for (uint64_t i = 0; i != 22; *(unsigned char *)(v4 + 10) = i)
  {
    uint64_t v4 = luaS_new(a1, luaX_tokens[i]);
    uint64_t result = luaC_fix(a1, v4);
    ++i;
  }
  return result;
}

char *luaX_token2str(uint64_t a1, int a2)
{
  if (a2 <= 256) {
    return (char *)luaO_pushfstring(*(void *)(a1 + 56), "'%c'");
  }
  if (a2 > 0x120) {
    return luaX_tokens[a2 - 257];
  }
  return (char *)luaO_pushfstring(*(void *)(a1 + 56), "'%s'");
}

uint64_t luaX_syntaxerror(uint64_t a1, const char *a2)
{
  return lexerror(a1, a2, *(_DWORD *)(a1 + 16));
}

uint64_t lexerror(uint64_t a1, const char *a2, int a3)
{
  uint64_t v5 = luaG_addinfo(*(void *)(a1 + 56), a2, *(void *)(a1 + 96), *(_DWORD *)(a1 + 4));
  if (a3)
  {
    unint64_t v6 = (const char *)v5;
    uint64_t v7 = *(void *)(a1 + 56);
    if ((a3 - 290) > 3)
    {
      uint64_t v8 = luaX_token2str(a1, a3);
    }
    else
    {
      save(a1, 0);
      uint64_t v8 = (const char *)luaO_pushfstring(*(void *)(a1 + 56), "'%s'", **(const char ***)(a1 + 72));
    }
    luaO_pushfstring(v7, "%s near %s", v6, v8);
  }
  uint64_t v9 = *(void *)(a1 + 56);

  return luaD_throw(v9, 3);
}

uint64_t luaX_newstring(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = luaS_newlstr(v4, a2, a3);
  uint64_t v6 = *(void *)(v4 + 16);
  *(void *)(v4 + 16) = v6 + 16;
  *(void *)uint64_t v6 = v5;
  *(_DWORD *)(v6 + 8) = *(unsigned __int8 *)(v5 + 8) | 0x40;
  uint64_t v7 = luaH_set(v4, *(void *)(a1 + 80), (uint64_t *)(*(void *)(v4 + 16) - 16));
  if (*((_DWORD *)v7 + 2))
  {
    uint64_t v5 = v7[2];
  }
  else
  {
    *(_DWORD *)uint64_t v7 = 1;
    *((_DWORD *)v7 + 2) = 1;
    if (*(uint64_t *)(*(void *)(v4 + 24) + 24) >= 1) {
      luaC_step(v4);
    }
  }
  *(void *)(v4 + 16) -= 16;
  return v5;
}

uint64_t luaX_setinput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 112) = 46;
  *(_DWORD *)a2 = a5;
  *(_DWORD *)(a2 + 32) = 289;
  *(void *)(a2 + 56) = a1;
  *(void *)(a2 + 64) = a3;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 4) = 0x100000001;
  *(void *)(a2 + 96) = a4;
  *(void *)(a2 + 104) = luaS_newlstr(a1, "_ENV", 4uLL);
  uint64_t result = luaM_realloc_(*(void *)(a2 + 56), **(void **)(a2 + 72), *(void *)(*(void *)(a2 + 72) + 16), 32);
  uint64_t v7 = *(uint64_t **)(a2 + 72);
  *uint64_t v7 = result;
  v7[2] = 32;
  return result;
}

__n128 luaX_next(__n128 *a1)
{
  uint64_t v1 = a1 + 2;
  unsigned __int32 v2 = a1[2].n128_u32[0];
  a1->n128_u32[2] = a1->n128_u32[1];
  if (v2 == 289)
  {
    llex((int *)a1, &a1[1].n128_i64[1]);
    a1[1].n128_u32[0] = v5;
  }
  else
  {
    __n128 result = *v1;
    a1[1] = a1[2];
    v1->n128_u32[0] = 289;
  }
  return result;
}

void llex(int *a1, uint64_t *a2)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  *(void *)(*((void *)a1 + 9) + 8) = 0;
  while (2)
  {
    int v4 = *a1;
    switch(*a1)
    {
      case -1:
        return;
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 59:
        goto LABEL_34;
      case 9:
      case 11:
      case 12:
      case 32:
        unsigned __int32 v5 = (void *)*((void *)a1 + 8);
        if ((*v5)--)
        {
          uint64_t v7 = (unsigned __int8 *)v5[1];
          v5[1] = v7 + 1;
          int v8 = *v7;
        }
        else
        {
          int v8 = luaZ_fill((uint64_t)v5);
        }
        *a1 = v8;
        continue;
      case 10:
      case 13:
        inclinenumber(a1);
        continue;
      case 34:
      case 39:
        save((uint64_t)a1, *a1);
        uint64_t v26 = (void *)*((void *)a1 + 8);
        if ((*v26)--)
        {
          uint64_t v28 = (unsigned __int8 *)v26[1];
          v26[1] = v28 + 1;
          int v29 = *v28;
        }
        else
        {
          int v29 = luaZ_fill((uint64_t)v26);
        }
        *a1 = v29;
        if (v29 == v4) {
          goto LABEL_59;
        }
        break;
      case 45:
        uint64_t v9 = (void *)*((void *)a1 + 8);
        if ((*v9)--)
        {
          unint64_t v11 = (unsigned __int8 *)v9[1];
          v9[1] = v11 + 1;
          int v12 = *v11;
        }
        else
        {
          int v12 = luaZ_fill((uint64_t)v9);
        }
        *a1 = v12;
        if (v12 != 45) {
          return;
        }
        int v13 = (void *)*((void *)a1 + 8);
        if ((*v13)--)
        {
          int v15 = (unsigned __int8 *)v13[1];
          v13[1] = v15 + 1;
          int v16 = *v15;
        }
        else
        {
          int v16 = luaZ_fill((uint64_t)v13);
        }
        *a1 = v16;
        if (v16 != 91) {
          goto LABEL_23;
        }
        int v17 = skip_sep((uint64_t)a1);
        *(void *)(*((void *)a1 + 9) + 8) = 0;
        if (v17 < 0)
        {
          int v16 = *a1;
LABEL_23:
          while ((v16 + 1) > 0xE || ((1 << (v16 + 1)) & 0x4801) == 0)
          {
            unint64_t v18 = (void *)*((void *)a1 + 8);
            if ((*v18)--)
            {
              uint64_t v20 = (unsigned __int8 *)v18[1];
              v18[1] = v20 + 1;
              int v16 = *v20;
            }
            else
            {
              int v16 = luaZ_fill((uint64_t)v18);
            }
            *a1 = v16;
          }
        }
        else
        {
          read_long_string((uint64_t)a1, 0, v17);
          *(void *)(*((void *)a1 + 9) + 8) = 0;
        }
        continue;
      case 46:
        save((uint64_t)a1, 46);
        uint64_t v37 = (void *)*((void *)a1 + 8);
        if ((*v37)--)
        {
          uint64_t v39 = (unsigned __int8 *)v37[1];
          v37[1] = v39 + 1;
          int v40 = *v39;
        }
        else
        {
          int v40 = luaZ_fill((uint64_t)v37);
        }
        *a1 = v40;
        if (check_next1((uint64_t)a1, 46))
        {
          check_next1((uint64_t)a1, 46);
        }
        else if ((luai_ctype_[*a1 + 1] & 2) != 0)
        {
LABEL_159:
          read_numeral(a1, a2);
        }
        return;
      case 47:
        unint64_t v41 = (void *)*((void *)a1 + 8);
        if ((*v41)--)
        {
          uint64_t v43 = (unsigned __int8 *)v41[1];
          v41[1] = v43 + 1;
          int v44 = *v43;
        }
        else
        {
          int v44 = luaZ_fill((uint64_t)v41);
        }
        *a1 = v44;
        check_next1((uint64_t)a1, 47);
        return;
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        goto LABEL_159;
      case 58:
        uint64_t v45 = (void *)*((void *)a1 + 8);
        if ((*v45)--)
        {
          int v47 = (unsigned __int8 *)v45[1];
          v45[1] = v47 + 1;
          int v48 = *v47;
        }
        else
        {
          int v48 = luaZ_fill((uint64_t)v45);
        }
        *a1 = v48;
        check_next1((uint64_t)a1, 58);
        return;
      case 60:
        uint64_t v49 = (void *)*((void *)a1 + 8);
        if ((*v49)--)
        {
          BOOL v51 = (unsigned __int8 *)v49[1];
          v49[1] = v51 + 1;
          int v52 = *v51;
        }
        else
        {
          int v52 = luaZ_fill((uint64_t)v49);
        }
        *a1 = v52;
        if (!check_next1((uint64_t)a1, 61)) {
          check_next1((uint64_t)a1, 60);
        }
        return;
      case 61:
        int v22 = (void *)*((void *)a1 + 8);
        if (!(*v22)--) {
          goto LABEL_164;
        }
        int v54 = (unsigned __int8 *)v22[1];
        v22[1] = v54 + 1;
        int v25 = *v54;
        goto LABEL_165;
      case 62:
        uint64_t v55 = (void *)*((void *)a1 + 8);
        if ((*v55)--)
        {
          uint64_t v57 = (unsigned __int8 *)v55[1];
          v55[1] = v57 + 1;
          int v58 = *v57;
        }
        else
        {
          int v58 = luaZ_fill((uint64_t)v55);
        }
        *a1 = v58;
        if (!check_next1((uint64_t)a1, 61)) {
          check_next1((uint64_t)a1, 62);
        }
        return;
      default:
        if (v4 == 91)
        {
          int v59 = skip_sep((uint64_t)a1);
          if (v59 < 0)
          {
            if (v59 != -1) {
              lexerror((uint64_t)a1, "invalid long string delimiter", 293);
            }
          }
          else
          {
            read_long_string((uint64_t)a1, a2, v59);
          }
        }
        else if (v4 == 126)
        {
          int v22 = (void *)*((void *)a1 + 8);
          if ((*v22)--)
          {
            uint64_t v24 = (unsigned __int8 *)v22[1];
            v22[1] = v24 + 1;
            int v25 = *v24;
          }
          else
          {
LABEL_164:
            int v25 = luaZ_fill((uint64_t)v22);
          }
LABEL_165:
          *a1 = v25;
          check_next1((uint64_t)a1, 61);
        }
        else
        {
LABEL_34:
          if (luai_ctype_[v4 + 1])
          {
            do
            {
              save((uint64_t)a1, v4);
              int v34 = (void *)*((void *)a1 + 8);
              if ((*v34)--)
              {
                uint64_t v36 = (unsigned __int8 *)v34[1];
                v34[1] = v36 + 1;
                int v4 = *v36;
              }
              else
              {
                int v4 = luaZ_fill((uint64_t)v34);
              }
              *a1 = v4;
            }
            while ((luai_ctype_[v4 + 1] & 3) != 0);
            *a2 = luaX_newstring((uint64_t)a1, **((char ***)a1 + 9), *(void *)(*((void *)a1 + 9) + 8));
          }
          else
          {
            uint64_t v30 = (void *)*((void *)a1 + 8);
            if ((*v30)--)
            {
              int v32 = (unsigned __int8 *)v30[1];
              v30[1] = v32 + 1;
              int v33 = *v32;
            }
            else
            {
              int v33 = luaZ_fill((uint64_t)v30);
            }
            *a1 = v33;
          }
        }
        return;
    }
    break;
  }
  do
  {
    if (v29 <= 12)
    {
      if (v29 != -1)
      {
        if (v29 == 10) {
          goto LABEL_69;
        }
LABEL_72:
        save((uint64_t)a1, v29);
        int v70 = (void *)*((void *)a1 + 8);
        if ((*v70)--)
        {
          v72 = (unsigned __int8 *)v70[1];
          v70[1] = v72 + 1;
          int v73 = *v72;
        }
        else
        {
          int v73 = luaZ_fill((uint64_t)v70);
        }
        *a1 = v73;
        goto LABEL_126;
      }
      uint64_t v68 = (uint64_t)a1;
      int v69 = 289;
LABEL_71:
      lexerror(v68, "unfinished string", v69);
      goto LABEL_126;
    }
    if (v29 == 13)
    {
LABEL_69:
      uint64_t v68 = (uint64_t)a1;
      int v69 = 293;
      goto LABEL_71;
    }
    if (v29 != 92) {
      goto LABEL_72;
    }
    save((uint64_t)a1, 92);
    uint64_t v64 = (void *)*((void *)a1 + 8);
    if ((*v64)--)
    {
      long long v66 = (unsigned __int8 *)v64[1];
      v64[1] = v66 + 1;
      int v67 = *v66;
    }
    else
    {
      int v67 = luaZ_fill((uint64_t)v64);
    }
    *a1 = v67;
    if (v67 <= 97)
    {
      if (v67 <= 33)
      {
        if (v67 == -1) {
          goto LABEL_126;
        }
        if (v67 == 10 || v67 == 13)
        {
          inclinenumber(a1);
          LOBYTE(v67) = 10;
          goto LABEL_125;
        }
      }
      else
      {
        if (v67 <= 91)
        {
          if (v67 != 34 && v67 != 39) {
            goto LABEL_98;
          }
LABEL_121:
          v90 = (void *)*((void *)a1 + 8);
          if ((*v90)--)
          {
            v92 = (unsigned __int8 *)v90[1];
            v90[1] = v92 + 1;
            int v93 = *v92;
          }
          else
          {
            int v93 = luaZ_fill((uint64_t)v90);
          }
          *a1 = v93;
LABEL_125:
          --*(void *)(*((void *)a1 + 9) + 8);
          save((uint64_t)a1, v67);
          goto LABEL_126;
        }
        if (v67 == 92) {
          goto LABEL_121;
        }
        if (v67 == 97)
        {
          LOBYTE(v67) = 7;
          goto LABEL_121;
        }
      }
LABEL_98:
      esccheck(a1, luai_ctype_[v67 + 1] & 2, "invalid escape sequence");
      int v67 = 0;
      uint64_t v75 = 0;
      int v76 = *a1;
      do
      {
        if ((luai_ctype_[v76 + 1] & 2) == 0) {
          break;
        }
        save((uint64_t)a1, v76);
        v77 = (void *)*((void *)a1 + 8);
        if ((*v77)--)
        {
          v79 = (unsigned __int8 *)v77[1];
          v77[1] = v79 + 1;
          int v80 = *v79;
        }
        else
        {
          int v80 = luaZ_fill((uint64_t)v77);
        }
        int v67 = v76 + 10 * v67 - 48;
        *a1 = v80;
        ++v75;
        int v76 = v80;
      }
      while (v75 != 3);
      esccheck(a1, v67 < 256, "decimal escape too large");
      *(void *)(*((void *)a1 + 9) + 8) -= v75;
      goto LABEL_125;
    }
    switch(v67)
    {
      case 'n':
        LOBYTE(v67) = 10;
        goto LABEL_121;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'w':
      case 'y':
        goto LABEL_98;
      case 'r':
        LOBYTE(v67) = 13;
        goto LABEL_121;
      case 't':
        LOBYTE(v67) = 9;
        goto LABEL_121;
      case 'u':
        save((uint64_t)a1, 117);
        v81 = (void *)*((void *)a1 + 8);
        if ((*v81)--)
        {
          v83 = (unsigned __int8 *)v81[1];
          v81[1] = v83 + 1;
          int v84 = *v83;
        }
        else
        {
          int v84 = luaZ_fill((uint64_t)v81);
        }
        *a1 = v84;
        esccheck(a1, v84 == 123, "missing '{'");
        unint64_t v94 = (int)gethexa((uint64_t)a1);
        for (uint64_t i = -4; ; --i)
        {
          save((uint64_t)a1, *a1);
          v96 = (void *)*((void *)a1 + 8);
          if ((*v96)--)
          {
            v98 = (unsigned __int8 *)v96[1];
            v96[1] = v98 + 1;
            int v99 = *v98;
          }
          else
          {
            int v99 = luaZ_fill((uint64_t)v96);
          }
          *a1 = v99;
          if ((luai_ctype_[v99 + 1] & 0x10) == 0) {
            break;
          }
          unint64_t v94 = 16 * v94 + (int)luaO_hexavalue(v99);
          esccheck(a1, v94 < 0x110000, "UTF-8 value too large");
        }
        esccheck(a1, v99 == 125, "missing '}'");
        v100 = (void *)*((void *)a1 + 8);
        if ((*v100)--)
        {
          v102 = (unsigned __int8 *)v100[1];
          v100[1] = v102 + 1;
          int v103 = *v102;
        }
        else
        {
          int v103 = luaZ_fill((uint64_t)v100);
        }
        *a1 = v103;
        *(void *)(*((void *)a1 + 9) + 8) += i;
        int v104 = luaO_utf8esc((uint64_t)v108, v94);
        if (v104 >= 1)
        {
          unint64_t v105 = v104 + 1;
          v106 = (char *)&v109 - v104;
          do
          {
            char v107 = *v106++;
            save((uint64_t)a1, v107);
            --v105;
          }
          while (v105 > 1);
        }
        goto LABEL_126;
      case 'v':
        LOBYTE(v67) = 11;
        goto LABEL_121;
      case 'x':
        char v85 = gethexa((uint64_t)a1);
        LOBYTE(v67) = gethexa((uint64_t)a1) + 16 * v85;
        *(void *)(*((void *)a1 + 9) + 8) -= 2;
        goto LABEL_121;
      case 'z':
        --*(void *)(*((void *)a1 + 9) + 8);
        break;
      default:
        if (v67 == 102)
        {
          LOBYTE(v67) = 12;
        }
        else
        {
          if (v67 != 98) {
            goto LABEL_98;
          }
          LOBYTE(v67) = 8;
        }
        goto LABEL_121;
    }
LABEL_112:
    v86 = (void *)*((void *)a1 + 8);
    if ((*v86)--)
    {
      v88 = (unsigned __int8 *)v86[1];
      v86[1] = v88 + 1;
      int v89 = *v88;
    }
    else
    {
      int v89 = luaZ_fill((uint64_t)v86);
    }
    *a1 = v89;
    while ((luai_ctype_[v89 + 1] & 8) != 0)
    {
      if (v89 != 13 && v89 != 10) {
        goto LABEL_112;
      }
      inclinenumber(a1);
      int v89 = *a1;
    }
LABEL_126:
    int v29 = *a1;
  }
  while (*a1 != v4);
LABEL_59:
  save((uint64_t)a1, v4);
  uint64_t v60 = (void *)*((void *)a1 + 8);
  if ((*v60)--)
  {
    uint64_t v62 = (unsigned __int8 *)v60[1];
    v60[1] = v62 + 1;
    int v63 = *v62;
  }
  else
  {
    int v63 = luaZ_fill((uint64_t)v60);
  }
  *a1 = v63;
  *a2 = luaX_newstring((uint64_t)a1, (char *)(**((void **)a1 + 9) + 1), *(void *)(*((void *)a1 + 9) + 8) - 2);
}

void luaX_lookahead(uint64_t a1)
{
  llex((int *)a1, (uint64_t *)(a1 + 40));
  *(_DWORD *)(a1 + 32) = v2;
}

uint64_t save(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 72);
  uint64_t v5 = v3[1];
  unint64_t v4 = v3[2];
  uint64_t v6 = v5 + 1;
  if (v5 + 1 <= v4)
  {
    uint64_t result = *v3;
  }
  else
  {
    if (v4 >= 0x3FFFFFFFFFFFFFFFLL)
    {
      luaG_addinfo(*(void *)(a1 + 56), "lexical element too long", *(void *)(a1 + 96), *(_DWORD *)(a1 + 4));
      luaD_throw(*(void *)(a1 + 56), 3);
      unint64_t v4 = v3[2];
    }
    uint64_t v8 = 2 * v4;
    uint64_t result = luaM_realloc_(*(void *)(a1 + 56), *v3, v4, 2 * v4);
    *uint64_t v3 = result;
    void v3[2] = v8;
    uint64_t v5 = v3[1];
    uint64_t v6 = v5 + 1;
  }
  v3[1] = v6;
  *(unsigned char *)(result + v5) = a2;
  return result;
}

uint64_t inclinenumber(int *a1)
{
  int v2 = *a1;
  uint64_t v3 = (void *)*((void *)a1 + 8);
  if ((*v3)--)
  {
    uint64_t v5 = (unsigned __int8 *)v3[1];
    v3[1] = v5 + 1;
    uint64_t result = *v5;
  }
  else
  {
    uint64_t result = luaZ_fill((uint64_t)v3);
  }
  *a1 = result;
  if ((result == 13 || result == 10) && result != v2)
  {
    uint64_t v9 = (void *)*((void *)a1 + 8);
    if ((*v9)--)
    {
      unint64_t v11 = (unsigned __int8 *)v9[1];
      v9[1] = v11 + 1;
      uint64_t result = *v11;
    }
    else
    {
      uint64_t result = luaZ_fill((uint64_t)v9);
    }
    *a1 = result;
  }
  int v12 = a1[1] + 1;
  a1[1] = v12;
  if (v12 == 0x7FFFFFFF)
  {
    luaG_addinfo(*((void *)a1 + 7), "chunk has too many lines", *((void *)a1 + 12), 0x7FFFFFFF);
    uint64_t v13 = *((void *)a1 + 7);
    return luaD_throw(v13, 3);
  }
  return result;
}

uint64_t skip_sep(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  save(a1, *(_DWORD *)a1);
  uint64_t v3 = *(void **)(a1 + 64);
  if ((*v3)--)
  {
    uint64_t v5 = (unsigned __int8 *)v3[1];
    v3[1] = v5 + 1;
    int v6 = *v5;
  }
  else
  {
    int v6 = luaZ_fill((uint64_t)v3);
  }
  *(_DWORD *)a1 = v6;
  if (v6 == 61)
  {
    unsigned int v7 = 0;
    do
    {
      save(a1, 61);
      uint64_t v8 = *(void **)(a1 + 64);
      if ((*v8)--)
      {
        uint64_t v10 = (unsigned __int8 *)v8[1];
        v8[1] = v10 + 1;
        int v6 = *v10;
      }
      else
      {
        int v6 = luaZ_fill((uint64_t)v8);
      }
      *(_DWORD *)a1 = v6;
      ++v7;
    }
    while (v6 == 61);
  }
  else
  {
    unsigned int v7 = 0;
  }
  if (v6 == v2) {
    return v7;
  }
  else {
    return ~v7;
  }
}

uint64_t read_long_string(uint64_t a1, uint64_t *a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 4);
  save(a1, *(_DWORD *)a1);
  unsigned int v7 = *(void **)(a1 + 64);
  if ((*v7)--)
  {
    uint64_t v9 = (unsigned __int8 *)v7[1];
    v7[1] = v9 + 1;
    int v10 = *v9;
  }
  else
  {
    int v10 = luaZ_fill((uint64_t)v7);
  }
  *(_DWORD *)a1 = v10;
  if (v10 == 13 || v10 == 10) {
    inclinenumber((int *)a1);
  }
  if (a2) {
    int v12 = "string";
  }
  else {
    int v12 = "comment";
  }
  do
  {
    while (1)
    {
      int v13 = *(_DWORD *)a1;
      if (*(int *)a1 > 12) {
        break;
      }
      if (v13 == -1)
      {
        int v14 = (const char *)luaO_pushfstring(*(void *)(a1 + 56), "unfinished long %s (starting at line %d)", v12, v6);
        lexerror(a1, v14, 289);
      }
      else if (v13 == 10)
      {
LABEL_21:
        save(a1, 10);
        inclinenumber((int *)a1);
        if (!a2) {
          *(void *)(*(void *)(a1 + 72) + 8) = 0;
        }
      }
      else
      {
LABEL_24:
        if (a2) {
          save(a1, v13);
        }
        int v15 = *(void **)(a1 + 64);
        if ((*v15)--)
        {
          int v17 = (unsigned __int8 *)v15[1];
          v15[1] = v17 + 1;
          int v18 = *v17;
        }
        else
        {
          int v18 = luaZ_fill((uint64_t)v15);
        }
        *(_DWORD *)a1 = v18;
      }
    }
    if (v13 == 13) {
      goto LABEL_21;
    }
    if (v13 != 93) {
      goto LABEL_24;
    }
  }
  while (skip_sep(a1) != a3);
  save(a1, *(_DWORD *)a1);
  unint64_t v19 = *(void **)(a1 + 64);
  if ((*v19)--)
  {
    uint64_t v21 = (unsigned __int8 *)v19[1];
    v19[1] = v21 + 1;
    uint64_t result = *v21;
  }
  else
  {
    uint64_t result = luaZ_fill((uint64_t)v19);
  }
  *(_DWORD *)a1 = result;
  if (a2)
  {
    uint64_t result = luaX_newstring(a1, (char *)(**(void **)(a1 + 72) + a3 + 2), *(void *)(*(void *)(a1 + 72) + 8) - 2 * (a3 + 2));
    *a2 = result;
  }
  return result;
}

uint64_t check_next1(uint64_t a1, int a2)
{
  if (*(_DWORD *)a1 != a2) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if ((*v3)--)
  {
    uint64_t v5 = (unsigned __int8 *)v3[1];
    v3[1] = v5 + 1;
    int v6 = *v5;
  }
  else
  {
    int v6 = luaZ_fill((uint64_t)v3);
  }
  *(_DWORD *)a1 = v6;
  return 1;
}

double read_numeral(int *a1, void *a2)
{
  v29[0] = 0;
  v29[1] = 0;
  int v4 = *a1;
  save((uint64_t)a1, *a1);
  uint64_t v5 = (void *)*((void *)a1 + 8);
  if ((*v5)--)
  {
    unsigned int v7 = (unsigned __int8 *)v5[1];
    v5[1] = v7 + 1;
    int v8 = *v7;
  }
  else
  {
    int v8 = luaZ_fill((uint64_t)v5);
  }
  *a1 = v8;
  uint64_t v9 = "Ee";
  if (v4 == 48 && check_next2((uint64_t)a1, "xX")) {
    uint64_t v9 = "Pp";
  }
  while (1)
  {
    if (check_next2((uint64_t)a1, v9)) {
      check_next2((uint64_t)a1, "-+");
    }
    uint64_t v10 = *a1;
    if ((luai_ctype_[v10 + 1] & 0x10) == 0) {
      break;
    }
    uint64_t v11 = (uint64_t)a1;
LABEL_13:
    save(v11, v10);
    int v12 = (void *)*((void *)a1 + 8);
    if ((*v12)--)
    {
      int v14 = (unsigned __int8 *)v12[1];
      v12[1] = v14 + 1;
      int v15 = *v14;
    }
    else
    {
      int v15 = luaZ_fill((uint64_t)v12);
    }
    *a1 = v15;
  }
  uint64_t v11 = (uint64_t)a1;
  if (v10 == 46) {
    goto LABEL_13;
  }
  save((uint64_t)a1, 0);
  int v16 = *((unsigned __int8 *)a1 + 112);
  if (v16 != 46)
  {
    int v17 = (void *)*((void *)a1 + 9);
    uint64_t v18 = v17[1];
    if (v18)
    {
      uint64_t v19 = *v17 - 1;
      do
      {
        if (*(unsigned char *)(v19 + v18) == 46) {
          *(unsigned char *)(v19 + v18) = v16;
        }
        --v18;
      }
      while (v18);
    }
  }
  if (!luaO_str2num(**((char ***)a1 + 9), (uint64_t)v29))
  {
    int v20 = *((unsigned __int8 *)a1 + 112);
    *((unsigned char *)a1 + 112) = 46;
    uint64_t v21 = *((void *)a1 + 9);
    if (v20 != 46)
    {
      uint64_t v22 = *(void *)(v21 + 8);
      if (v22)
      {
        uint64_t v23 = *(void *)v21 - 1;
        do
        {
          if (*(unsigned __int8 *)(v23 + v22) == v20) {
            *(unsigned char *)(v23 + v22) = 46;
          }
          --v22;
        }
        while (v22);
        uint64_t v21 = *((void *)a1 + 9);
      }
    }
    if (!luaO_str2num(*(char **)v21, (uint64_t)v29))
    {
      int v24 = *((unsigned __int8 *)a1 + 112);
      if (v24 != 46)
      {
        int v25 = (void *)*((void *)a1 + 9);
        uint64_t v26 = v25[1];
        if (v26)
        {
          uint64_t v27 = *v25 - 1;
          do
          {
            if (*(unsigned __int8 *)(v27 + v26) == v24) {
              *(unsigned char *)(v27 + v26) = 46;
            }
            --v26;
          }
          while (v26);
        }
      }
      lexerror((uint64_t)a1, "malformed number", 290);
    }
  }
  double result = *(double *)v29;
  *a2 = v29[0];
  return result;
}

_DWORD *esccheck(_DWORD *result, int a2, const char *a3)
{
  if (!a2)
  {
    uint64_t v5 = (uint64_t)result;
    if (*result != -1)
    {
      save((uint64_t)result, *result);
      int v6 = *(void **)(v5 + 64);
      if ((*v6)--)
      {
        int v8 = (unsigned __int8 *)v6[1];
        v6[1] = v8 + 1;
        int v9 = *v8;
      }
      else
      {
        int v9 = luaZ_fill((uint64_t)v6);
      }
      *(_DWORD *)uint64_t v5 = v9;
    }
    return (_DWORD *)lexerror(v5, a3, 293);
  }
  return result;
}

uint64_t gethexa(uint64_t a1)
{
  save(a1, *(_DWORD *)a1);
  int v2 = *(void **)(a1 + 64);
  if ((*v2)--)
  {
    int v4 = (unsigned __int8 *)v2[1];
    v2[1] = v4 + 1;
    int v5 = *v4;
  }
  else
  {
    int v5 = luaZ_fill((uint64_t)v2);
  }
  *(_DWORD *)a1 = v5;
  esccheck((_DWORD *)a1, luai_ctype_[v5 + 1] & 0x10, "hexadecimal digit expected");
  int v6 = *(_DWORD *)a1;

  return luaO_hexavalue(v6);
}

uint64_t check_next2(uint64_t a1, char *a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != *a2 && v4 != a2[1]) {
    return 0;
  }
  save(a1, v4);
  int v5 = *(void **)(a1 + 64);
  if ((*v5)--)
  {
    unsigned int v7 = (unsigned __int8 *)v5[1];
    v5[1] = v7 + 1;
    int v8 = *v7;
  }
  else
  {
    int v8 = luaZ_fill((uint64_t)v5);
  }
  *(_DWORD *)a1 = v8;
  return 1;
}

uint64_t luaM_growaux_(void *a1, uint64_t a2, int *a3, uint64_t a4, int a5, const char *a6)
{
  int v10 = *a3;
  if (a5 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = a5 + 1;
  }
  if (v10 >= v11 >> 1)
  {
    int v12 = a5;
    if (v10 >= a5)
    {
      luaG_runerror(a1, "too many %s (limit is %d)", a6, a5);
      int v10 = *a3;
    }
  }
  else if (2 * v10 <= 4)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = 2 * v10;
  }
  uint64_t result = luaM_realloc_((uint64_t)a1, a2, v10 * a4, v12 * a4);
  *a3 = v12;
  return result;
}

uint64_t luaM_realloc_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = (*(uint64_t (**)(void))v8)(*(void *)(v8 + 8));
  uint64_t v10 = v9;
  if (a4 && !v9) {
    luaD_throw(a1, 4);
  }
  if (a2) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)(v8 + 24) += a4 - v11;
  return v10;
}

uint64_t luaM_toobig(uint64_t a1)
{
  return luaG_runerror(a1, "memory allocation error: block too big");
}

uint64_t luaO_int2fb(uint64_t result)
{
  if (result >= 8)
  {
    if (result < 0x80)
    {
      int v1 = 0;
    }
    else
    {
      int v1 = 0;
      do
      {
        unsigned int v2 = result + 15;
        LODWORD(result) = (result + 15) >> 4;
        v1 += 4;
      }
      while (v2 > 0x7FF);
    }
    if (result < 0x10)
    {
      unsigned int v3 = result;
    }
    else
    {
      do
      {
        unsigned int v3 = (result + 1) >> 1;
        ++v1;
        BOOL v4 = result > 0x1E;
        LODWORD(result) = v3;
      }
      while (v4);
    }
    return (8 * v1 + 8) | (v3 - 8);
  }
  return result;
}

uint64_t luaO_fb2int(uint64_t result)
{
  if (result >> 3) {
    return (result & 7 | 8) << ((result >> 3) - 1);
  }
  else {
    return result;
  }
}

uint64_t luaO_ceillog2(int a1)
{
  unsigned int v1 = a1 - 1;
  if ((a1 - 1) < 0x100)
  {
    int v2 = 0;
  }
  else
  {
    int v2 = 0;
    unsigned int v3 = a1 - 1;
    do
    {
      v2 += 8;
      unsigned int v1 = v3 >> 8;
      unsigned int v4 = HIWORD(v3);
      v3 >>= 8;
    }
    while (v4);
  }
  return v2 + luaO_ceillog2_log_2[v1];
}

void *luaO_arith(void *result, int a2, double *a3, double *a4, uint64_t a5)
{
  uint64_t v9 = result;
  if ((a2 - 7) >= 5)
  {
    if (a2 == 5)
    {
      uint64_t v17 = 0;
      double v18 = 0.0;
      if (*((_DWORD *)a3 + 2) == 3)
      {
        double v18 = *a3;
      }
      else
      {
        uint64_t result = (void *)luaV_tonumber_(a3, &v18);
        if (!result) {
          return (void *)luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
        }
      }
      if (*((_DWORD *)a4 + 2) == 3)
      {
        int v14 = a4;
      }
      else
      {
        int v14 = (double *)&v17;
        uint64_t result = (void *)luaV_tonumber_(a4, (double *)&v17);
        if (!result) {
          return (void *)luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
        }
      }
      *(double *)a5 = v18 / *v14;
      int v12 = 3;
      goto LABEL_16;
    }
    if (a2 != 13)
    {
      uint64_t v17 = 0;
      double v18 = 0.0;
      int v10 = *((_DWORD *)a3 + 2);
      if (v10 == 3)
      {
        double v18 = *a3;
      }
      else
      {
        if (v10 == 19 && *((_DWORD *)a4 + 2) == 19)
        {
          uint64_t result = (void *)intarith(result, a2, *(void *)a3, *(void *)a4);
          double v11 = *(double *)&result;
          int v12 = 19;
          goto LABEL_40;
        }
        uint64_t result = (void *)luaV_tonumber_(a3, &v18);
        if (!result) {
          return (void *)luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
        }
      }
      if (*((_DWORD *)a4 + 2) == 3)
      {
        int v15 = a4;
      }
      else
      {
        int v15 = (double *)&v17;
        uint64_t result = (void *)luaV_tonumber_(a4, (double *)&v17);
        if (!result) {
          return (void *)luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
        }
      }
      int v12 = 3;
      double v11 = 0.0;
      double v16 = *v15;
      switch(a2)
      {
        case 0:
          double v11 = v18 + v16;
          break;
        case 1:
          double v11 = v18 - v16;
          break;
        case 2:
          double v11 = v18 * v16;
          break;
        case 3:
        case 4:
          break;
        case 5:
          double v11 = v18 / v16;
          break;
        default:
          if (a2 == 12) {
            double v11 = -v18;
          }
          int v12 = 3;
          break;
      }
LABEL_40:
      *(double *)a5 = v11;
      goto LABEL_16;
    }
  }
  uint64_t v17 = 0;
  double v18 = 0.0;
  if (*((_DWORD *)a3 + 2) == 19)
  {
    double v18 = *a3;
  }
  else if (!luaV_tointeger(a3, &v18))
  {
    return (void *)luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
  }
  if (*((_DWORD *)a4 + 2) == 19)
  {
    uint64_t v13 = *(void *)a4;
    uint64_t v17 = *(void *)a4;
LABEL_15:
    uint64_t result = (void *)intarith(v9, a2, *(unint64_t *)&v18, v13);
    *(void *)a5 = result;
    int v12 = 19;
LABEL_16:
    *(_DWORD *)(a5 + 8) = v12;
    return result;
  }
  if (luaV_tointeger(a4, &v17))
  {
    uint64_t v13 = v17;
    goto LABEL_15;
  }
  return (void *)luaT_trybinTM(v9, a3, a4, (_OWORD *)a5, a2 + 6);
}

unint64_t intarith(void *a1, int a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = 0;
  switch(a2)
  {
    case 0:
      unint64_t result = a4 + a3;
      break;
    case 1:
      unint64_t result = a3 - a4;
      break;
    case 2:
      unint64_t result = a4 * a3;
      break;
    case 3:
      unint64_t result = luaV_mod((uint64_t)a1, a3, a4);
      break;
    case 6:
      unint64_t result = luaV_div(a1, a3, a4);
      break;
    case 7:
      unint64_t result = a4 & a3;
      break;
    case 8:
      unint64_t result = a4 | a3;
      break;
    case 9:
      unint64_t result = a4 ^ a3;
      break;
    case 10:
      unint64_t result = luaV_shiftl(a3, a4);
      break;
    case 11:
      unint64_t result = luaV_shiftl(a3, -a4);
      break;
    case 12:
      unint64_t result = -(uint64_t)a3;
      break;
    case 13:
      unint64_t result = ~a3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t luaO_hexavalue(int a1)
{
  if ((luai_ctype_[a1 + 1] & 2) != 0) {
    return (a1 - 48);
  }
  else {
    return (a1 | 0x20u) - 87;
  }
}

uint64_t luaO_str2num(char *__s1, uint64_t a2)
{
  unsigned int v4 = __s1;
  do
  {
    int v6 = *v4++;
    int v5 = v6;
  }
  while ((luai_ctype_[v6 + 1] & 8) != 0);
  if (v5 == 43)
  {
    int v7 = 0;
  }
  else
  {
    if (v5 != 45)
    {
      int v7 = 0;
      --v4;
      goto LABEL_9;
    }
    int v7 = 1;
  }
  int v5 = *v4;
LABEL_9:
  if (v5 == 48 && (v4[1] | 0x20) == 0x78)
  {
    int v9 = v4[2];
    v4 += 2;
    char v8 = v9;
    if ((luai_ctype_[v9 + 1] & 0x10) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = 16 * v10;
        if ((luai_ctype_[v8 + 1] & 2) != 0) {
          int v12 = v8 - 48;
        }
        else {
          int v12 = (v8 | 0x20) - 87;
        }
        uint64_t v10 = v11 + v12;
        int v13 = *++v4;
        char v8 = v13;
      }
      while ((luai_ctype_[v13 + 1] & 0x10) != 0);
      goto LABEL_22;
    }
  }
  else if ((luai_ctype_[v5 + 1] & 2) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v10 = 10 * v10 + (char)v5 - 48;
      int v15 = *++v4;
      LOBYTE(v5) = v15;
    }
    while ((luai_ctype_[v15 + 1] & 2) != 0);
LABEL_22:
    char v14 = 1;
    goto LABEL_23;
  }
  uint64_t v10 = 0;
  char v14 = 0;
LABEL_23:
  double v16 = v4 - 1;
  do
  {
    int v18 = *++v16;
    int v17 = v18;
  }
  while ((luai_ctype_[v18 + 1] & 8) != 0);
  char v19 = v14 ^ 1;
  if (v17) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    if (v7) {
      uint64_t v20 = -v10;
    }
    else {
      uint64_t v20 = v10;
    }
    uint64_t v21 = v20;
    int v22 = 19;
    goto LABEL_32;
  }
  if (!cstdlib_strpbrk(__s1, "nN"))
  {
    uint64_t v27 = 0;
    cstdlib_strtod((unsigned __int8 *)__s1, (unsigned __int8 **)&v27);
    double v16 = v27;
    if (v27 != __s1)
    {
      uint64_t v24 = *v27;
      if ((luai_ctype_[v24 + 1] & 8) != 0)
      {
        int v25 = (unsigned __int8 *)(v27 + 1);
        do
        {
          uint64_t v27 = (char *)v25;
          int v26 = *v25++;
          LODWORD(v24) = v26;
        }
        while ((luai_ctype_[v26 + 1] & 8) != 0);
        double v16 = (char *)(v25 - 1);
      }
      if (!v24)
      {
        int v22 = 3;
LABEL_32:
        *(void *)a2 = v21;
        *(_DWORD *)(a2 + 8) = v22;
        return v16 - __s1 + 1;
      }
    }
  }
  return 0;
}

uint64_t luaO_utf8esc(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x80)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 63;
    uint64_t v6 = 0x700000000;
    do
    {
      *(unsigned char *)(a1 + 7 + v4) = a2 & 0x3F | 0x80;
      a2 >>= 6;
      unint64_t v5 = v5 >> 1;
      v6 -= 0x100000000;
      --v4;
    }
    while (a2 > v5);
    uint64_t v2 = (1 - v4);
    LOBYTE(a2) = a2 | (2 * ~(_BYTE)v5);
    uint64_t v3 = v6 >> 32;
  }
  else
  {
    uint64_t v2 = 1;
    uint64_t v3 = 7;
  }
  *(unsigned char *)(a1 + v3) = a2;
  return v2;
}

uint64_t luaO_tostring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 8) == 19)
  {
    size_t v10 = (int)luaI_snprintf(a1, (uint64_t)__s, 50, "%d", a5, a6, a7, a8, *(void *)a2);
  }
  else
  {
    size_t v10 = (int)luaI_snprintf(a1, (uint64_t)__s, 50, "%.14g", a5, a6, a7, a8, *(void *)a2);
    if (!__s[cstdlib_strcspn(__s, "-0123456789")])
    {
      *(_WORD *)&__s[v10] = 12334;
      v10 += 2;
    }
  }
  uint64_t result = luaS_newlstr(a1, __s, v10);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = *(unsigned __int8 *)(result + 8) | 0x40;
  return result;
}

uint64_t luaO_pushvfstring(uint64_t a1, char *__s, uint64_t *a3)
{
  uint64_t v3 = __s;
  v46[4] = *MEMORY[0x263EF8340];
  unint64_t v5 = cstdlib_strchr(__s, 37);
  if (v5)
  {
    uint64_t v6 = v5;
    int v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      if (*(void *)(a1 + 48) - v8 <= 47)
      {
        luaD_growstack(a1, 2);
        uint64_t v8 = *(void *)(a1 + 16);
      }
      *(void *)(a1 + 16) = v8 + 16;
      uint64_t v9 = luaS_newlstr(a1, v3, v6 - v3);
      *(void *)uint64_t v8 = v9;
      *(_DWORD *)(v8 + 8) = *(unsigned __int8 *)(v9 + 8) | 0x40;
      int v16 = v6[1];
      if (v16 > 99) {
        break;
      }
      if (v16 <= 84)
      {
        if (v16 == 37)
        {
          uint64_t v27 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v27 + 16;
          uint64_t v28 = a1;
          int v29 = "%";
LABEL_33:
          size_t v26 = 1;
          goto LABEL_34;
        }
        if (v16 != 73) {
          goto LABEL_31;
        }
        uint64_t v17 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v17 + 16;
        int v18 = a3++;
        uint64_t v19 = *v18;
LABEL_26:
        *(void *)uint64_t v17 = v19;
        *(_DWORD *)(v17 + 8) = 19;
        goto LABEL_27;
      }
      if (v16 == 85)
      {
        int v31 = (unint64_t *)a3++;
        size_t v26 = (int)luaO_utf8esc((uint64_t)__s1, *v31);
        int v29 = (char *)v46 - v26;
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v27 + 16;
        goto LABEL_30;
      }
      if (v16 != 99) {
        goto LABEL_31;
      }
      int v22 = a3++;
      __s1[0] = *(_DWORD *)v22;
      if ((luai_ctype_[__s1[0] + 1] & 4) != 0)
      {
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v27 + 16;
        int v29 = __s1;
        uint64_t v28 = a1;
        goto LABEL_33;
      }
      luaO_pushfstring(a1, "<\\%d>", __s1[0]);
LABEL_35:
      v7 += 2;
      uint64_t v3 = v6 + 2;
      uint64_t v6 = cstdlib_strchr(v6 + 2, 37);
      if (!v6) {
        goto LABEL_38;
      }
    }
    if (v16 > 111)
    {
      if (v16 == 112)
      {
        int v32 = a3++;
        size_t v26 = (int)luaI_snprintf(a1, (uint64_t)__s1, 40, "%p", v12, v13, v14, v15, *v32);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v27 + 16;
        int v29 = __s1;
LABEL_30:
        uint64_t v28 = a1;
LABEL_34:
        uint64_t v33 = luaS_newlstr(v28, v29, v26);
        *(void *)uint64_t v27 = v33;
        *(_DWORD *)(v27 + 8) = *(unsigned __int8 *)(v33 + 8) | 0x40;
        goto LABEL_35;
      }
      if (v16 == 115)
      {
        uint64_t v23 = (const char **)a3++;
        uint64_t v24 = *v23;
        if (v24) {
          int v25 = v24;
        }
        else {
          int v25 = "(null)";
        }
        size_t v26 = cstdlib_strlen(v25);
        uint64_t v27 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v27 + 16;
        uint64_t v28 = a1;
        int v29 = (char *)v25;
        goto LABEL_34;
      }
LABEL_31:
      luaG_runerror(a1, "invalid option '%%%c' to 'lua_pushfstring'", v6[1]);
      goto LABEL_35;
    }
    if (v16 == 100)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v17 + 16;
      uint64_t v30 = a3++;
      uint64_t v19 = *(int *)v30;
      goto LABEL_26;
    }
    if (v16 != 102) {
      goto LABEL_31;
    }
    uint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20 + 16;
    uint64_t v21 = a3++;
    *(void *)uint64_t v20 = *v21;
    *(_DWORD *)(v20 + 8) = 3;
LABEL_27:
    luaO_tostring(a1, *(void *)(a1 + 16) - 16, v10, v11, v12, v13, v14, v15);
    goto LABEL_35;
  }
  int v7 = 0;
LABEL_38:
  if ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 16)) <= 31) {
    luaD_growstack(a1, 1);
  }
  size_t v34 = cstdlib_strlen(v3);
  uint64_t v35 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v35 + 16;
  uint64_t v36 = luaS_newlstr(a1, v3, v34);
  *(void *)uint64_t v35 = v36;
  *(_DWORD *)(v35 + 8) = *(unsigned __int8 *)(v36 + 8) | 0x40;
  if (v7) {
    luaV_concat(a1, v7 | 1, v37, v38, v39, v40, v41, v42);
  }
  return *(void *)(*(void *)(a1 + 16) - 16) + 24;
}

uint64_t luaO_pushfstring(uint64_t a1, char *a2, ...)
{
  va_start(va, a2);
  return luaO_pushvfstring(a1, a2, (uint64_t *)va);
}

void *luaO_chunkid(char *a1, char *__s, size_t a3)
{
  size_t v6 = cstdlib_strlen(__s);
  size_t v7 = v6;
  int v8 = *__s;
  if (v8 != 64)
  {
    if (v8 != 61)
    {
      uint64_t v13 = cstdlib_strchr(__s, 10);
      cstdlib_memcpy(a1, "[string \"", 9uLL);
      uint64_t v14 = a1 + 9;
      if (v7 >= a3 - 15 || v13)
      {
        unint64_t v15 = v13 - __s;
        if (!v13) {
          unint64_t v15 = v7;
        }
        if (v15 >= a3 - 15) {
          size_t v16 = a3 - 15;
        }
        else {
          size_t v16 = v15;
        }
        cstdlib_memcpy(v14, __s, v16);
        uint64_t v17 = &v14[v16];
        cstdlib_memcpy(v17, "...", 3uLL);
        uint64_t v11 = v17 + 3;
      }
      else
      {
        cstdlib_memcpy(v14, __s, v7);
        uint64_t v11 = &v14[v7];
      }
      uint64_t v9 = "\"]";
      size_t v12 = 3;
      goto LABEL_19;
    }
    uint64_t v9 = __s + 1;
    if (v6 > a3)
    {
      uint64_t result = cstdlib_memcpy(a1, v9, a3 - 1);
      a1[a3 - 1] = 0;
      return result;
    }
    goto LABEL_11;
  }
  if (v6 <= a3)
  {
    uint64_t v9 = __s + 1;
LABEL_11:
    uint64_t v11 = a1;
    size_t v12 = v7;
    goto LABEL_19;
  }
  cstdlib_memcpy(a1, "...", 3uLL);
  uint64_t v11 = a1 + 3;
  size_t v12 = a3 - 3;
  uint64_t v9 = &__s[v7 - a3 + 4];
LABEL_19:

  return cstdlib_memcpy(v11, v9, v12);
}

uint64_t luaY_parser(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char *a5, int a6)
{
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  __n128 v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  uint64_t v12 = luaF_newLclosure(a1, 1u);
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)uint64_t v13 = v12;
  *(_DWORD *)(v13 + 8) = 70;
  uint64_t v14 = *(void *)(a1 + 16) + 16;
  *(void *)(a1 + 16) = v14;
  if (*(void *)(a1 + 48) - v14 <= 15) {
    luaD_growstack(a1, 0);
  }
  *(void *)&long long v32 = luaH_new(a1);
  uint64_t v15 = *(void *)(a1 + 16);
  *(void *)uint64_t v15 = v32;
  *(_DWORD *)(v15 + 8) = 69;
  uint64_t v16 = *(void *)(a1 + 16) + 16;
  *(void *)(a1 + 16) = v16;
  if (*(void *)(a1 + 48) - v16 <= 15) {
    luaD_growstack(a1, 0);
  }
  luaF_newproto(a1);
  uint64_t v18 = v17;
  *(void *)(v12 + 24) = v17;
  *(void *)&long long v23 = v17;
  uint64_t v19 = luaS_new(a1, a5);
  *(void *)(v18 + 104) = v19;
  *((void *)&v31 + 1) = a3;
  *((void *)&v32 + 1) = a4;
  a4[10] = 0;
  a4[6] = 0;
  a4[2] = 0;
  luaX_setinput(a1, (uint64_t)&v27, a2, v19, a6);
  uint64_t v39 = 0;
  v35[0] = 0;
  v35[1] = 0;
  uint64_t v20 = *((void *)&v32 + 1);
  *((void *)&v23 + 1) = v30;
  *(void *)&long long v24 = &v27;
  *(void *)&long long v30 = &v23;
  long long v25 = xmmword_2206E1FE0;
  LODWORD(v26) = 0;
  DWORD2(v26) = 0;
  BYTE12(v26) = 0;
  DWORD1(v26) = *(_DWORD *)(*((void *)&v32 + 1) + 8);
  *(void *)(v18 + 104) = v33;
  int v21 = *(_DWORD *)(v20 + 40);
  *(_WORD *)(v18 + 11) = 513;
  LODWORD(v20) = *(_DWORD *)(v20 + 24);
  int v37 = v21;
  int v38 = v20;
  uint64_t v36 = 0;
  *((void *)&v24 + 1) = &v36;
  v35[2] = -1;
  LODWORD(v35[0]) = 8;
  newupvalue((uint64_t)&v23, *((uint64_t *)&v33 + 1), v35);
  luaX_next(&v27);
  statlist(&v27);
  if (v28 != 289) {
    error_expected((uint64_t)&v27, 289);
  }
  close_func((uint64_t)&v27);
  *(void *)(a1 + 16) -= 16;
  return v12;
}

uint64_t newupvalue(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)a1;
  size_t v7 = (int *)(*(void *)a1 + 16);
  uint64_t v8 = *v7;
  checklimit((void *)a1, *(unsigned __int8 *)(a1 + 59) + 1, 255, "upvalues");
  int v9 = *v7;
  if (*v7 <= *(unsigned __int8 *)(a1 + 59))
  {
    *(void *)(v6 + 88) = luaM_growaux_(*(void **)(*(void *)(a1 + 16) + 56), *(void *)(v6 + 88), v7, 16, 255, "upvalues");
    int v9 = *(_DWORD *)(v6 + 16);
  }
  uint64_t v10 = *(void *)(v6 + 88);
  if ((int)v8 < v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = (void *)(v10 + 16 * v8);
    uint64_t v13 = v11 - v8;
    do
    {
      *uint64_t v12 = 0;
      v12 += 2;
      --v13;
    }
    while (v13);
  }
  uint64_t result = *(unsigned __int8 *)(a1 + 59);
  uint64_t v15 = v10 + 16 * result;
  *(unsigned char *)(v15 + 8) = *a3 == 8;
  *(unsigned char *)(v15 + 9) = a3[2];
  *(void *)uint64_t v15 = a2;
  if ((*(unsigned char *)(v6 + 9) & 4) != 0 && (*(unsigned char *)(a2 + 9) & 3) != 0)
  {
    luaC_barrier_(*(void *)(*(void *)(a1 + 16) + 56), v6, a2);
    uint64_t result = *(unsigned __int8 *)(a1 + 59);
  }
  *(unsigned char *)(a1 + 59) = result + 1;
  return result;
}

void statlist(__n128 *a1)
{
  while (1)
  {
    unsigned int v2 = a1[1].n128_u32[0] - 260;
    if (v2 <= 0x1D)
    {
      if (((1 << v2) & 0x20020007) != 0) {
        return;
      }
      if (a1[1].n128_u32[0] == 274) {
        break;
      }
    }
    statement(a1);
  }

  statement(a1);
}

uint64_t close_func(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)v3;
  luaK_ret(v3, 0, 0);
  leaveblock(v3);
  *(void *)(v4 + 56) = luaM_realloc_(v2, *(void *)(v4 + 56), 4 * *(int *)(v4 + 24), 4 * *(int *)(v3 + 32));
  uint64_t v5 = *(int *)(v3 + 32);
  *(_DWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 72) = luaM_realloc_(v2, *(void *)(v4 + 72), 4 * *(int *)(v4 + 28), 4 * v5);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v3 + 32);
  *(void *)(v4 + 48) = luaM_realloc_(v2, *(void *)(v4 + 48), 16 * *(int *)(v4 + 20), 16 * *(int *)(v3 + 44));
  uint64_t v6 = *(int *)(v3 + 48);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 44);
  *(void *)(v4 + 64) = luaM_realloc_(v2, *(void *)(v4 + 64), 8 * *(int *)(v4 + 32), 8 * v6);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(v3 + 48);
  *(void *)(v4 + 80) = luaM_realloc_(v2, *(void *)(v4 + 80), 16 * *(int *)(v4 + 36), 16 * *(__int16 *)(v3 + 56));
  *(_DWORD *)(v4 + 36) = *(__int16 *)(v3 + 56);
  uint64_t result = luaM_realloc_(v2, *(void *)(v4 + 88), 16 * *(int *)(v4 + 16), 16 * *(unsigned __int8 *)(v3 + 59));
  *(void *)(v4 + 88) = result;
  *(_DWORD *)(v4 + 16) = *(unsigned __int8 *)(v3 + 59);
  *(void *)(a1 + 48) = *(void *)(v3 + 8);
  if (*(uint64_t *)(*(void *)(v2 + 24) + 24) >= 1)
  {
    return luaC_step(v2);
  }
  return result;
}

void *checklimit(void *result, int a2, int a3, const char *a4)
{
  if (a2 > a3)
  {
    size_t v7 = result;
    uint64_t v8 = *(void *)(result[2] + 56);
    if (*(_DWORD *)(*result + 40)) {
      int v9 = (const char *)luaO_pushfstring(v8, "function at line %d", *(_DWORD *)(*result + 40));
    }
    else {
      int v9 = "main function";
    }
    uint64_t v10 = (const char *)luaO_pushfstring(v8, "too many %s (limit is %d) in %s", a4, a3, v9);
    uint64_t v11 = v7[2];
    return (void *)luaX_syntaxerror(v11, v10);
  }
  return result;
}

void statement(__n128 *a1)
{
  int v2 = a1->n128_i32[1];
  unint64_t v3 = a1[3].n128_u64[1];
  unsigned __int16 v4 = *(_WORD *)(v3 + 198) + 1;
  *(_WORD *)(v3 + 198) = v4;
  checklimit((void *)a1[3].n128_u64[0], v4, 200, "C levels");
  unsigned __int32 v5 = a1[1].n128_u32[0];
  switch(v5)
  {
    case 0x102u:
    case 0x10Au:
      int v6 = luaK_jump(a1[3].n128_i64[0]);
      gotostat(a1, v6);
      goto LABEL_92;
    case 0x103u:
      luaX_next(a1);
      block((uint64_t)a1);
      check_match(a1, 262, 259, v2);
      goto LABEL_92;
    case 0x104u:
    case 0x105u:
    case 0x106u:
    case 0x107u:
    case 0x10Cu:
    case 0x10Eu:
    case 0x10Fu:
    case 0x110u:
    case 0x113u:
    case 0x114u:
    case 0x115u:
      goto LABEL_5;
    case 0x108u:
      uint64_t v14 = a1[3].n128_i64[0];
      uint64_t v75 = 0x10000;
      LOBYTE(v75) = *(unsigned char *)(v14 + 58);
      uint64_t v15 = *(long long **)(v14 + 24);
      unint64_t v74 = __PAIR64__(*(_DWORD *)(*(void *)(*(void *)(v14 + 16) + 88) + 24), *(_DWORD *)(*(void *)(*(void *)(v14 + 16) + 88) + 40));
      int v73 = v15;
      *(void *)(v14 + 24) = &v73;
      luaX_next(a1);
      unint64_t v16 = str_checkname(a1);
      unsigned __int32 v17 = a1[1].n128_u32[0];
      if (v17 == 44 || v17 == 268)
      {
        uint64_t v55 = a1[3].n128_i64[0];
        long long v71 = 0uLL;
        *(void *)&long long v72 = 0;
        int v56 = *(unsigned __int8 *)(v55 + 60);
        uint64_t v57 = luaX_newstring((uint64_t)a1, "(for generator)", 0xFuLL);
        new_localvar(a1, v57);
        uint64_t v58 = luaX_newstring((uint64_t)a1, "(for state)", 0xBuLL);
        new_localvar(a1, v58);
        uint64_t v59 = luaX_newstring((uint64_t)a1, "(for control)", 0xDuLL);
        new_localvar(a1, v59);
        new_localvar(a1, v16);
        unsigned __int32 v60 = a1[1].n128_u32[0];
        unsigned int v61 = 1;
        while (v60 == 44)
        {
          luaX_next(a1);
          unint64_t v62 = str_checkname(a1);
          new_localvar(a1, v62);
          unsigned __int32 v60 = a1[1].n128_u32[0];
          ++v61;
        }
        checknext(a1, 268);
        int v67 = a1->n128_i32[1];
        int v68 = explist(a1, &v71);
        adjust_assign((uint64_t)a1, 3, v68, &v71);
        luaK_checkstack(v55, 3);
        forbody(a1, v56, v67, v61, 0);
      }
      else if (v17 == 61)
      {
        fornum(a1, v16, v2);
      }
      else
      {
        luaX_syntaxerror((uint64_t)a1, "'=' or 'in' expected");
      }
      check_match(a1, 262, 264, v2);
      goto LABEL_86;
    case 0x109u:
      long long v71 = 0uLL;
      *(void *)&long long v72 = 0;
      int v73 = 0;
      unint64_t v74 = 0;
      uint64_t v75 = 0;
      luaX_next(a1);
      singlevar(a1, (uint64_t)&v71);
      while (1)
      {
        unsigned __int32 v18 = a1[1].n128_u32[0];
        if (v18 != 46) {
          break;
        }
        fieldsel(a1, &v71);
      }
      if (v18 == 58)
      {
        fieldsel(a1, &v71);
        int v41 = 1;
      }
      else
      {
        int v41 = 0;
      }
      body(a1, (uint64_t)&v73, v41, v2);
      luaK_storevar(a1[3].n128_i64[0], (int *)&v71, &v73);
      luaK_fixline((int *)a1[3].n128_u64[0], v2);
      goto LABEL_92;
    case 0x10Bu:
      uint64_t v19 = a1[3].n128_i64[0];
      int v70 = -1;
      do
      {
        long long v71 = 0uLL;
        *(void *)&long long v72 = 0;
        uint64_t v20 = a1[3].n128_i64[0];
        int v73 = 0;
        unint64_t v74 = 0;
        uint64_t v75 = 0;
        luaX_next(a1);
        subexpr(a1, (uint64_t)&v73, 0);
        checknext(a1, 275);
        if ((a1[1].n128_u32[0] | 8) == 0x10A)
        {
          luaK_goiffalse(a1[3].n128_i64[0], (int *)&v73);
          LOBYTE(v72) = *(unsigned char *)(v20 + 58);
          *(_WORD *)((char *)&v72 + 1) = 0;
          uint64_t v21 = *(void *)(v20 + 24);
          *((void *)&v71 + 1) = __PAIR64__(*(_DWORD *)(*(void *)(*(void *)(v20 + 16) + 88) + 24), *(_DWORD *)(*(void *)(*(void *)(v20 + 16) + 88) + 40));
          *(void *)&long long v71 = v21;
          *(void *)(v20 + 24) = &v71;
          gotostat(a1, v75);
          while (1)
          {
            int v22 = a1[1].n128_i32[0];
            if (v22 > 287)
            {
              if (v22 != 288)
              {
                if (v22 != 289)
                {
LABEL_34:
                  int v25 = luaK_jump(v20);
                  goto LABEL_35;
                }
LABEL_31:
                leaveblock(v20);
                goto LABEL_38;
              }
            }
            else if (v22 != 59)
            {
              if ((v22 - 260) >= 3) {
                goto LABEL_34;
              }
              goto LABEL_31;
            }
            statement(a1);
          }
        }
        luaK_goiftrue(a1[3].n128_i64[0], (int *)&v73);
        LOBYTE(v72) = *(unsigned char *)(v20 + 58);
        *(_WORD *)((char *)&v72 + 1) = 0;
        uint64_t v24 = *(void *)(v20 + 24);
        *((void *)&v71 + 1) = __PAIR64__(*(_DWORD *)(*(void *)(*(void *)(v20 + 16) + 88) + 24), *(_DWORD *)(*(void *)(*(void *)(v20 + 16) + 88) + 40));
        *(void *)&long long v71 = v24;
        *(void *)(v20 + 24) = &v71;
        int v25 = HIDWORD(v75);
LABEL_35:
        statlist(a1, v23);
        leaveblock(v20);
        if ((a1[1].n128_u32[0] & 0xFFFFFFFE) == 0x104)
        {
          int v26 = luaK_jump(v20);
          luaK_concat((uint64_t *)v20, &v70, v26);
        }
        luaK_patchtohere(v20, v25);
LABEL_38:
        unsigned __int32 v27 = a1[1].n128_u32[0];
      }
      while (v27 == 261);
      if (v27 == 260)
      {
        luaX_next(a1);
        block((uint64_t)a1);
      }
      check_match(a1, 262, 267, v2);
      int v28 = v70;
      uint64_t v29 = v19;
LABEL_48:
      luaK_patchtohere(v29, v28);
      goto LABEL_92;
    case 0x10Du:
      luaX_next(a1);
      if (a1[1].n128_u32[0] == 265)
      {
        luaX_next(a1);
        long long v71 = 0uLL;
        *(void *)&long long v72 = 0;
        unint64_t v30 = a1[3].n128_u64[0];
        unint64_t v31 = str_checkname(a1);
        new_localvar(a1, v31);
        adjustlocalvars((uint64_t)a1, 1u);
        body(a1, (uint64_t)&v71, 0, a1->n128_i32[1]);
        *(_DWORD *)(*(void *)(*(void *)v30 + 80)
                  + 16
                  * *(__int16 *)(**(void **)(*(void *)(v30 + 16) + 88)
                               + 2 * (*(_DWORD *)(v30 + 52) + DWORD2(v71)))
                  + 8) = *(_DWORD *)(v30 + 32);
      }
      else
      {
        long long v71 = 0uLL;
        *(void *)&long long v72 = 0;
        unint64_t v63 = str_checkname(a1);
        new_localvar(a1, v63);
        unsigned __int32 v64 = a1[1].n128_u32[0];
        unsigned int v65 = 1;
        while (v64 == 44)
        {
          luaX_next(a1);
          unint64_t v66 = str_checkname(a1);
          new_localvar(a1, v66);
          ++v65;
          unsigned __int32 v64 = a1[1].n128_u32[0];
        }
        if (v64 == 61)
        {
          luaX_next(a1);
          int v69 = explist(a1, &v71);
        }
        else
        {
          int v69 = 0;
          LODWORD(v71) = 0;
        }
        adjust_assign((uint64_t)a1, v65, v69, &v71);
        adjustlocalvars((uint64_t)a1, v65);
      }
      goto LABEL_92;
    case 0x111u:
      uint64_t v14 = a1[3].n128_i64[0];
      int v32 = luaK_getlabel(v14);
      *(void *)&long long v72 = 0x10000;
      uint64_t v75 = 0;
      LOBYTE(v72) = *(unsigned char *)(v14 + 58);
      uint64_t v33 = *(void *)(v14 + 24);
      *((void *)&v71 + 1) = __PAIR64__(*(_DWORD *)(*(void *)(*(void *)(v14 + 16) + 88) + 24), *(_DWORD *)(*(void *)(*(void *)(v14 + 16) + 88) + 40));
      *(void *)&long long v71 = v33;
      LOBYTE(v75) = v72;
      unint64_t v74 = *((void *)&v71 + 1);
      int v73 = &v71;
      *(void *)(v14 + 24) = &v73;
      *(void *)&double v34 = luaX_next(a1).n128_u64[0];
      statlist(a1, v34);
      check_match(a1, 277, 273, v2);
      int v35 = cond(a1);
      if (BYTE1(v75)) {
        luaK_patchclose(v14, v35, v75);
      }
      leaveblock(v14);
      luaK_patchlist(v14, v35, v32);
LABEL_86:
      leaveblock(v14);
      goto LABEL_92;
    case 0x112u:
      luaX_next(a1);
      int v9 = 0;
      uint64_t v10 = (unsigned __int8 *)a1[3].n128_u64[0];
      long long v71 = 0uLL;
      *(void *)&long long v72 = 0;
      unsigned __int32 v11 = a1[1].n128_u32[0];
      int v12 = 0;
      BOOL v13 = v11 - 260 > 0x1D || ((1 << (v11 - 4)) & 0x20020007) == 0;
      if (v13 && v11 != 59)
      {
        int v12 = explist(a1, &v71);
        if ((v71 - 13) > 1)
        {
          if (v12 == 1)
          {
            int v9 = luaK_exp2anyreg((uint64_t)v10, &v71);
          }
          else
          {
            luaK_exp2nextreg((uint64_t)v10, &v71);
            int v9 = v10[58];
          }
        }
        else
        {
          luaK_setreturns(v10, &v71, -1);
          if (v71 == 13 && v12 == 1) {
            *(_DWORD *)(*(void *)(*(void *)v10 + 56) + 4 * SDWORD2(v71)) = *(_DWORD *)(*(void *)(*(void *)v10 + 56)
          }
                                                                                             + 4 * SDWORD2(v71)) & 0xFFFFFFC0 | 0x25;
          int v9 = v10[58];
          int v12 = -1;
        }
      }
      luaK_ret((uint64_t)v10, v9, v12);
      if (a1[1].n128_u32[0] == 59) {
        goto LABEL_13;
      }
      goto LABEL_92;
    case 0x116u:
      uint64_t v36 = a1[3].n128_i64[0];
      *(void *)&long long v72 = 0x10000;
      luaX_next(a1);
      int v37 = luaK_getlabel(v36);
      int v38 = cond(a1);
      LOBYTE(v72) = *(unsigned char *)(v36 + 58);
      uint64_t v39 = *(void *)(v36 + 24);
      *((void *)&v71 + 1) = __PAIR64__(*(_DWORD *)(*(void *)(*(void *)(v36 + 16) + 88) + 24), *(_DWORD *)(*(void *)(*(void *)(v36 + 16) + 88) + 40));
      *(void *)&long long v71 = v39;
      *(void *)(v36 + 24) = &v71;
      checknext(a1, 259);
      block((uint64_t)a1);
      int v40 = luaK_jump(v36);
      luaK_patchlist(v36, v40, v37);
      check_match(a1, 262, 278, v2);
      leaveblock(v36);
      uint64_t v29 = v36;
      int v28 = v38;
      goto LABEL_48;
    default:
      if (v5 == 288)
      {
        luaX_next(a1);
        unint64_t v42 = str_checkname(a1);
        unint64_t v43 = a1[3].n128_u64[0];
        unint64_t v44 = a1[5].n128_u64[1];
        uint64_t v45 = (uint64_t *)(v44 + 32);
        uint64_t v46 = *(int *)(*(void *)(v43 + 24) + 8);
        int v47 = *(_DWORD *)(v44 + 40);
        if ((int)v46 < v47)
        {
          uint64_t v48 = 24 * v46;
          do
          {
            if (*(void *)(*v45 + v48) == v42)
            {
              uint64_t v49 = (const char *)luaO_pushfstring(*(void *)(*(void *)(v43 + 16) + 56), "label '%s' already defined on line %d", (const char *)(v42 + 24), *(_DWORD *)(*v45 + v48 + 12));
              uint64_t v50 = *(void *)(v43 + 16);
              *(_DWORD *)(v50 + 16) = 0;
              luaX_syntaxerror(v50, v49);
              int v47 = *(_DWORD *)(v44 + 40);
            }
            ++v46;
            v48 += 24;
          }
          while (v46 < v47);
        }
        checknext(a1, 288);
        int v51 = newlabelentry((uint64_t)a1, v44 + 32, v42, v2, *(_DWORD *)(v43 + 32));
        while (1)
        {
          int v52 = a1[1].n128_i32[0];
          if (v52 > 287)
          {
            if (v52 != 288)
            {
              if (v52 != 289)
              {
LABEL_88:
                uint64_t v53 = *v45;
                int v54 = v51;
                goto LABEL_89;
              }
LABEL_63:
              uint64_t v53 = *v45;
              int v54 = v51;
              *(unsigned char *)(*v45 + 24 * v51 + 16) = *(unsigned char *)(*(void *)(v43 + 24) + 16);
LABEL_89:
              findgotos((uint64_t *)a1, (void *)(v53 + 24 * v54));
              goto LABEL_92;
            }
          }
          else if (v52 != 59)
          {
            if ((v52 - 260) >= 3) {
              goto LABEL_88;
            }
            goto LABEL_63;
          }
          statement(a1);
        }
      }
      if (v5 == 59)
      {
LABEL_13:
        luaX_next(a1);
      }
      else
      {
LABEL_5:
        unint64_t v7 = a1[3].n128_u64[0];
        long long v71 = 0u;
        long long v72 = 0u;
        suffixedexp(a1, (_DWORD *)&v71 + 2);
        unsigned __int32 v8 = a1[1].n128_u32[0];
        if (v8 == 61 || v8 == 44)
        {
          *(void *)&long long v71 = 0;
          assignment(a1, (uint64_t *)&v71, 1);
        }
        else
        {
          if (DWORD2(v71) != 13) {
            luaX_syntaxerror((uint64_t)a1, "syntax error");
          }
          *(_DWORD *)(*(void *)(*(void *)v7 + 56) + 4 * (int)v72) = *(_DWORD *)(*(void *)(*(void *)v7 + 56)
                                                                                      + 4 * (int)v72) & 0xFF803FFF | 0x4000;
        }
      }
LABEL_92:
      *(unsigned char *)(a1[3].n128_u64[0] + 60) = *(unsigned char *)(a1[3].n128_u64[0] + 58);
      --*(_WORD *)(a1[3].n128_u64[1] + 198);
      return;
  }
}

uint64_t block(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v9 = 0;
  LOBYTE(v9) = *(unsigned char *)(v1 + 58);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 88);
  int v4 = *(_DWORD *)(v3 + 40);
  LODWORD(v3) = *(_DWORD *)(v3 + 24);
  int v7 = v4;
  int v8 = v3;
  uint64_t v6 = v2;
  *(void *)(v1 + 24) = &v6;
  statlist();
  return leaveblock(v1);
}

void check_match(__n128 *a1, int a2, int a3, int a4)
{
  if (a1[1].n128_u32[0] == a2)
  {
    luaX_next(a1);
  }
  else if (a1->n128_u32[1] == a4)
  {
    error_expected((uint64_t)a1, a2);
  }
  else
  {
    uint64_t v7 = a1[3].n128_i64[1];
    int v8 = luaX_token2str((uint64_t)a1, a2);
    uint64_t v9 = luaX_token2str((uint64_t)a1, a3);
    uint64_t v10 = (const char *)luaO_pushfstring(v7, "%s expected (to close %s at line %d)", v8, v9, a4);
    luaX_syntaxerror((uint64_t)a1, v10);
  }
}

unint64_t str_checkname(__n128 *a1)
{
  if (a1[1].n128_u32[0] != 292) {
    error_expected((uint64_t)a1, 292);
  }
  unint64_t v2 = a1[1].n128_u64[1];
  luaX_next(a1);
  return v2;
}

uint64_t gotostat(__n128 *a1, int a2)
{
  int v4 = a1->n128_i32[1];
  unsigned __int32 v5 = a1[1].n128_u32[0];
  luaX_next(a1);
  if (v5 == 266) {
    uint64_t v6 = str_checkname(a1);
  }
  else {
    uint64_t v6 = luaS_new(a1[3].n128_i64[1], "break");
  }
  int v7 = newlabelentry((uint64_t)a1, a1[5].n128_u64[1] + 16, v6, v4, a2);

  return findlabel((uint64_t)a1, v7);
}

double checknext(__n128 *a1, int a2)
{
  if (a1[1].n128_u32[0] != a2) {
    error_expected((uint64_t)a1, a2);
  }

  *(void *)&double result = luaX_next(a1).n128_u64[0];
  return result;
}

uint64_t leaveblock(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(uint64_t **)(result + 24);
  if (*v3 && *((unsigned char *)v3 + 17))
  {
    int v4 = luaK_jump(result);
    luaK_patchclose(v1, v4, *((unsigned __int8 *)v3 + 16));
    double result = (uint64_t)luaK_patchtohere(v1, v4);
  }
  if (*((unsigned char *)v3 + 18))
  {
    uint64_t v5 = luaS_new(*(void *)(v2 + 56), "break");
    int v6 = newlabelentry(v2, *(void *)(v2 + 88) + 32, v5, 0, *(_DWORD *)(*(void *)(v2 + 48) + 32));
    double result = (uint64_t)findgotos((uint64_t *)v2, (void *)(*(void *)(*(void *)(v2 + 88) + 32) + 24 * v6));
  }
  uint64_t v7 = *v3;
  *(void *)(v1 + 24) = *v3;
  unsigned int v8 = *((unsigned __int8 *)v3 + 16);
  unsigned int v9 = *(unsigned __int8 *)(v1 + 58);
  uint64_t v10 = *(uint64_t **)(*(void *)(v1 + 16) + 88);
  *((_DWORD *)v10 + 2) += v8 - v9;
  if (v8 < v9)
  {
    int v11 = *(_DWORD *)(v1 + 32);
    uint64_t v12 = *v10;
    uint64_t v13 = *(void *)(*(void *)v1 + 80);
    int v14 = v9 - 1;
    int v15 = *(_DWORD *)(v1 + 52) + v14;
    do
      *(_DWORD *)(v13 + 16 * *(__int16 *)(v12 + 2 * v15--) + 12) = v11;
    while (v8 < v14--);
    *(unsigned char *)(v1 + 58) = v8;
    LOBYTE(v9) = v8;
  }
  *(unsigned char *)(v1 + 60) = v9;
  uint64_t v17 = *(void *)(v2 + 88);
  int v18 = *((_DWORD *)v3 + 3);
  *(_DWORD *)(v17 + 40) = *((_DWORD *)v3 + 2);
  if (v7)
  {
    while (v18 < *((_DWORD *)v10 + 6))
    {
      uint64_t v19 = v10[2];
      int v20 = v18;
      uint64_t v21 = v19 + 24 * v18;
      unsigned int v23 = *(unsigned __int8 *)(v21 + 16);
      int v22 = (unsigned char *)(v21 + 16);
      unsigned int v24 = *((unsigned __int8 *)v3 + 16);
      if (v23 > v24)
      {
        if (*((unsigned char *)v3 + 17))
        {
          luaK_patchclose(v1, *(_DWORD *)(v19 + 24 * v18 + 8), v24);
          LOBYTE(v24) = *((unsigned char *)v3 + 16);
        }
        *int v22 = v24;
      }
      double result = findlabel(*(void *)(v1 + 16), v20);
      if (result) {
        int v18 = v20;
      }
      else {
        int v18 = v20 + 1;
      }
    }
  }
  else if (v18 < *(_DWORD *)(v17 + 24))
  {
    int v25 = v18;
    uint64_t v26 = *(void *)(v17 + 16);
    uint64_t v27 = *(void *)(v26 + 24 * v25);
    int v28 = "no visible label '%s' for <goto> at line %d";
    if (*(unsigned char *)(v27 + 8) == 4 && *(unsigned char *)(v27 + 10)) {
      int v28 = "<%s> at line %d not inside a loop";
    }
    uint64_t v29 = (const char *)luaO_pushfstring(*(void *)(v2 + 56), v28, v27 + 24, *(unsigned int *)(v26 + 24 * v25 + 12));
    *(_DWORD *)(v2 + 16) = 0;
    return luaX_syntaxerror(v2, v29);
  }
  return result;
}

uint64_t subexpr(__n128 *a1, uint64_t a2, int a3)
{
  unint64_t v6 = a1[3].n128_u64[1];
  unsigned __int16 v7 = *(_WORD *)(v6 + 198) + 1;
  *(_WORD *)(v6 + 198) = v7;
  checklimit((void *)a1[3].n128_u64[0], v7, 200, "C levels");
  int v8 = a1[1].n128_i32[0];
  if (v8 <= 275)
  {
    if (v8 > 125)
    {
      unsigned int v11 = 2;
      switch(v8)
      {
        case 263:
          *(void *)(a2 + 16) = -1;
          int v12 = 3;
          goto LABEL_31;
        case 264:
        case 266:
        case 267:
        case 268:
        case 269:
          goto LABEL_28;
        case 265:
          luaX_next(a1);
          body(a1, a2, 0, a1->n128_i32[1]);
          goto LABEL_33;
        case 270:
          *(void *)(a2 + 16) = -1;
          int v12 = 1;
          goto LABEL_31;
        case 271:
          goto LABEL_27;
        default:
          if (v8 != 126) {
            goto LABEL_28;
          }
          unsigned int v11 = 1;
          goto LABEL_27;
      }
    }
    switch(v8)
    {
      case '#':
        unsigned int v11 = 3;
        break;
      case '-':
        unsigned int v11 = 0;
        break;
      case '{':
        constructor(a1, a2);
        goto LABEL_33;
      default:
        goto LABEL_28;
    }
LABEL_27:
    int v14 = a1->n128_i32[1];
    luaX_next(a1);
    subexpr(a1, a2, 12);
    luaK_prefix(a1[3].n128_i64[0], v11, a2, v14);
    goto LABEL_33;
  }
  if (v8 <= 289)
  {
    if (v8 == 276)
    {
      *(void *)(a2 + 16) = -1;
      int v12 = 2;
LABEL_31:
      *(_DWORD *)a2 = v12;
      *(_DWORD *)(a2 + 8) = 0;
      goto LABEL_32;
    }
    if (v8 == 281)
    {
      uint64_t v13 = a1[3].n128_i64[0];
      if (!*(unsigned char *)(*(void *)v13 + 11)) {
        luaX_syntaxerror((uint64_t)a1, "cannot use '...' outside a vararg function");
      }
      int v9 = luaK_codeABC(v13, 45, 0, 1, 0);
      *(void *)(a2 + 16) = -1;
      int v10 = 14;
      goto LABEL_19;
    }
LABEL_28:
    suffixedexp(a1, (_DWORD *)a2);
    goto LABEL_33;
  }
  if (v8 == 290)
  {
    *(void *)(a2 + 16) = -1;
    *(_DWORD *)a2 = 5;
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)(a2 + 8) = a1[1].n128_u64[1];
    goto LABEL_32;
  }
  if (v8 == 291)
  {
    *(void *)(a2 + 16) = -1;
    *(_DWORD *)a2 = 6;
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)(a2 + 8) = a1[1].n128_u64[1];
    goto LABEL_32;
  }
  if (v8 != 293) {
    goto LABEL_28;
  }
  int v9 = luaK_stringK(a1[3].n128_i64[0], a1[1].n128_i64[1]);
  *(void *)(a2 + 16) = -1;
  int v10 = 4;
LABEL_19:
  *(_DWORD *)a2 = v10;
  *(_DWORD *)(a2 + 8) = v9;
LABEL_32:
  luaX_next(a1);
LABEL_33:
  int v15 = a1[1].n128_i32[0];
  uint64_t v16 = 21;
  if (v15 > 125)
  {
    switch(v15)
    {
      case 272:
        uint64_t v18 = 20;
        break;
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 281:
        goto LABEL_68;
      case 279:
        uint64_t v18 = 6;
        break;
      case 280:
        uint64_t v18 = 12;
        break;
      case 282:
        uint64_t v18 = 13;
        break;
      case 283:
        uint64_t v18 = 18;
        break;
      case 284:
        uint64_t v18 = 15;
        break;
      case 285:
        uint64_t v18 = 16;
        break;
      case 286:
        uint64_t v18 = 10;
        break;
      case 287:
        uint64_t v18 = 11;
        break;
      default:
        if (v15 == 126)
        {
          uint64_t v18 = 9;
        }
        else
        {
          if (v15 != 257) {
            goto LABEL_68;
          }
          uint64_t v18 = 19;
        }
        break;
    }
  }
  else
  {
    if (v15 <= 59)
    {
      int v17 = v15 - 37;
      uint64_t v18 = 0;
      switch(v17)
      {
        case 0:
          uint64_t v18 = 3;
          goto LABEL_64;
        case 1:
          uint64_t v18 = 7;
          goto LABEL_64;
        case 5:
          uint64_t v18 = 2;
          goto LABEL_64;
        case 6:
          goto LABEL_64;
        case 8:
          uint64_t v18 = 1;
          goto LABEL_64;
        case 10:
          uint64_t v18 = 5;
          goto LABEL_64;
        default:
          goto LABEL_68;
      }
      goto LABEL_68;
    }
    if (v15 > 93)
    {
      if (v15 == 94)
      {
        uint64_t v18 = 4;
      }
      else
      {
        if (v15 != 124) {
          goto LABEL_68;
        }
        uint64_t v18 = 8;
      }
    }
    else if (v15 == 60)
    {
      uint64_t v18 = 14;
    }
    else
    {
      if (v15 != 62) {
        goto LABEL_68;
      }
      uint64_t v18 = 17;
    }
  }
LABEL_64:
  uint64_t v16 = v18;
  while (*((unsigned __int8 *)&priority + 2 * v16) > a3)
  {
    memset(v22, 0, sizeof(v22));
    int v19 = a1->n128_i32[1];
    luaX_next(a1);
    luaK_infix(a1[3].n128_i64[0], v16, (int *)a2);
    uint64_t v20 = subexpr(a1, v22, *((unsigned __int8 *)&priority + 2 * v16 + 1));
    luaK_posfix(a1[3].n128_i64[0], v16, (_DWORD *)a2, (uint64_t)v22, v19);
    uint64_t v16 = v20;
    if (v20 == 21)
    {
      uint64_t v16 = 21;
      break;
    }
  }
LABEL_68:
  --*(_WORD *)(a1[3].n128_u64[1] + 198);
  return v16;
}

uint64_t constructor(__n128 *a1, uint64_t a2)
{
  int v4 = (unsigned __int8 *)a1[3].n128_u64[0];
  int v5 = a1->n128_i32[1];
  int v6 = luaK_codeABC((uint64_t)v4, 11, 0, 0, 0);
  long long v15 = 0u;
  long long v18 = 0u;
  uint64_t v17 = a2;
  *(void *)(a2 + 16) = -1;
  *(_DWORD *)a2 = 12;
  *(_DWORD *)(a2 + 8) = v6;
  uint64_t v16 = -1;
  DWORD2(v15) = 0;
  luaK_exp2nextreg(a1[3].n128_i64[0], (_DWORD *)a2);
  checknext(a1, 123);
  while (1)
  {
    unsigned __int32 v7 = a1[1].n128_u32[0];
    if (v7 == 125) {
      break;
    }
    if (v15)
    {
      luaK_exp2nextreg((uint64_t)v4, &v15);
      LODWORD(v15) = 0;
      if (DWORD2(v18) == 50)
      {
        luaK_setlist((uint64_t)v4, *(_DWORD *)(v17 + 8), SDWORD1(v18), 50);
        DWORD2(v18) = 0;
      }
      unsigned __int32 v7 = a1[1].n128_u32[0];
    }
    if (v7 == 91 || v7 == 292 && (luaX_lookahead((uint64_t)a1), v8 == 61)) {
      recfield(a1, (uint64_t)&v15);
    }
    else {
      listfield((uint64_t)a1, (uint64_t)&v15);
    }
    unsigned __int32 v9 = a1[1].n128_u32[0];
    if (v9 != 59 && v9 != 44) {
      break;
    }
    luaX_next(a1);
  }
  check_match(a1, 125, 123, v5);
  int v10 = DWORD2(v18);
  if (DWORD2(v18))
  {
    if ((v15 - 13) >= 2)
    {
      if (v15)
      {
        luaK_exp2nextreg((uint64_t)v4, &v15);
        int v10 = DWORD2(v18);
      }
      luaK_setlist((uint64_t)v4, *(_DWORD *)(v17 + 8), SDWORD1(v18), v10);
    }
    else
    {
      luaK_setreturns(v4, &v15, -1);
      luaK_setlist((uint64_t)v4, *(_DWORD *)(v17 + 8), SDWORD1(v18), -1);
      --DWORD1(v18);
    }
  }
  uint64_t v11 = *(void *)(*(void *)v4 + 56);
  int v12 = *(_DWORD *)(v11 + 4 * v6);
  int v13 = v12 & 0x7FFFFF | ((unsigned __int16)luaO_int2fb(DWORD1(v18)) << 23);
  *(_DWORD *)(v11 + 4 * v6) = v13;
  uint64_t result = luaO_int2fb(v18);
  *(_DWORD *)(v11 + 4 * v6) = v13 & 0xFF803FFF | ((result & 0x1FF) << 14);
  return result;
}

uint64_t body(__n128 *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v36 = 0;
  memset(&v35[3], 0, 32);
  uint64_t v34 = 0;
  unsigned __int32 v9 = (_DWORD *)a1[3].n128_u64[0];
  uint64_t v8 = a1[3].n128_i64[1];
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(int *)(*(void *)v9 + 32);
  if (v9[12] >= (int)v11)
  {
    *(void *)(v10 + 64) = luaM_growaux_((void *)a1[3].n128_u64[1], *(void *)(v10 + 64), (int *)(*(void *)v9 + 32), 8, 0x3FFFF, "functions");
    uint64_t v12 = *(int *)(v10 + 32);
    if ((int)v11 < (int)v12)
    {
      do
        *(void *)(*(void *)(v10 + 64) + 8 * v11++) = 0;
      while (v12 != v11);
    }
  }
  luaF_newproto(v8);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v10 + 64);
  uint64_t v16 = (int)v9[12];
  _OWORD v9[12] = v16 + 1;
  *(void *)(v15 + 8 * v16) = v13;
  if ((*(unsigned char *)(v10 + 9) & 4) != 0 && (*(unsigned char *)(v13 + 9) & 3) != 0) {
    luaC_barrier_(v8, v10, v13);
  }
  *(_DWORD *)(v14 + 40) = a4;
  unint64_t v17 = a1[3].n128_u64[0];
  v35[0] = v14;
  v35[1] = v17;
  v35[2] = a1;
  a1[3].n128_u64[0] = (unint64_t)v35;
  *(_OWORD *)&v35[4] = xmmword_2206E1FE0;
  LODWORD(v35[6]) = 0;
  LODWORD(v36) = 0;
  BYTE4(v36) = 0;
  long long v18 = (_DWORD *)a1[5].n128_u64[1];
  unint64_t v19 = a1[6].n128_u64[0];
  HIDWORD(v35[6]) = v18[2];
  *(void *)(v14 + 104) = v19;
  *(unsigned char *)(v14 + 12) = 2;
  BYTE2(v34) = 0;
  LOWORD(v34) = 0;
  LODWORD(v19) = v18[10];
  LODWORD(v18) = v18[6];
  int v32 = v19;
  int v33 = (int)v18;
  uint64_t v31 = 0;
  void v35[3] = &v31;
  checknext(a1, 40);
  if (a3)
  {
    uint64_t v20 = luaX_newstring((uint64_t)a1, "self", 4uLL);
    new_localvar(a1, v20);
    adjustlocalvars((uint64_t)a1, 1u);
  }
  unsigned int v21 = 0;
  int v22 = (unsigned __int8 *)a1[3].n128_u64[0];
  uint64_t v23 = *(void *)v22;
  *(unsigned char *)(*(void *)v22 + 11) = 0;
  unsigned __int32 v24 = a1[1].n128_u32[0];
  if (v24 != 41)
  {
    unsigned int v21 = 0;
    while (1)
    {
      if (v24 == 292)
      {
        unint64_t v30 = str_checkname(a1);
        new_localvar(a1, v30);
        ++v21;
      }
      else
      {
        if (v24 == 281)
        {
          luaX_next(a1);
          *(unsigned char *)(v23 + 11) = 1;
          break;
        }
        luaX_syntaxerror((uint64_t)a1, "<name> or '...' expected");
      }
      if (*(unsigned char *)(v23 + 11) || a1[1].n128_u32[0] != 44) {
        break;
      }
      luaX_next(a1);
      unsigned __int32 v24 = a1[1].n128_u32[0];
    }
  }
  adjustlocalvars((uint64_t)a1, v21);
  int v25 = v22[58];
  *(unsigned char *)(v23 + 10) = v25;
  luaK_reserveregs((uint64_t)v22, v25);
  double v26 = checknext(a1, 41);
  statlist(a1, v26);
  *(_DWORD *)(v35[0] + 44) = a1->n128_u32[1];
  check_match(a1, 262, 265, a4);
  uint64_t v27 = *(void *)(a1[3].n128_u64[0] + 8);
  int v28 = luaK_codeABx(v27, 44, 0, *(_DWORD *)(v27 + 48) - 1);
  *(void *)(a2 + 16) = -1;
  *(_DWORD *)a2 = 12;
  *(_DWORD *)(a2 + 8) = v28;
  luaK_exp2nextreg(v27, (_DWORD *)a2);
  return close_func((uint64_t)a1);
}

uint64_t suffixedexp(__n128 *a1, _DWORD *a2)
{
  uint64_t v4 = a1[3].n128_i64[0];
  int v5 = a1->n128_i32[1];
  unsigned __int32 v6 = a1[1].n128_u32[0];
  if (v6 == 292)
  {
    uint64_t result = singlevar(a1, (uint64_t)a2);
  }
  else if (v6 == 40)
  {
    luaX_next(a1);
    subexpr(a1, a2, 0);
    check_match(a1, 41, 40, v5);
    uint64_t result = luaK_dischargevars(a1[3].n128_i64[0], (uint64_t)a2);
  }
  else
  {
    uint64_t result = luaX_syntaxerror((uint64_t)a1, "unexpected symbol");
  }
  while (1)
  {
    while (1)
    {
      int v8 = a1[1].n128_i32[0];
      if (v8 > 90) {
        break;
      }
      switch(v8)
      {
        case '(':
          goto LABEL_14;
        case '.':
          uint64_t result = fieldsel(a1, a2);
          break;
        case ':':
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          luaX_next(a1);
          unint64_t v9 = str_checkname(a1);
          int v10 = luaK_stringK(a1[3].n128_i64[0], v9);
          uint64_t v13 = -1;
          LODWORD(v11) = 4;
          LODWORD(v12) = v10;
          luaK_self(v4, a2, &v11);
LABEL_15:
          uint64_t result = (uint64_t)funcargs(a1, (uint64_t)a2, v5);
          break;
        default:
          return result;
      }
    }
    if (v8 != 91) {
      break;
    }
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    luaK_exp2anyregup(v4, a2);
    yindex(a1, (uint64_t)&v11);
    uint64_t result = luaK_indexed(v4, (uint64_t)a2, &v11);
  }
  if (v8 == 123 || v8 == 293)
  {
LABEL_14:
    luaK_exp2nextreg(v4, a2);
    goto LABEL_15;
  }
  return result;
}

int32x2_t listfield(uint64_t a1, uint64_t a2)
{
  subexpr(a1, a2, 0);
  checklimit(*(void **)(a1 + 48), *(_DWORD *)(a2 + 36), 0x7FFFFFFF, "items in a constructor");
  int32x2_t result = vadd_s32(*(int32x2_t *)(a2 + 36), (int32x2_t)0x100000001);
  *(int32x2_t *)(a2 + 36) = result;
  return result;
}

uint64_t recfield(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = a1[3].n128_i64[0];
  char v5 = *(unsigned char *)(v4 + 60);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  memset(v12, 0, sizeof(v12));
  if (a1[1].n128_u32[0] == 292)
  {
    checklimit((void *)v4, *(_DWORD *)(a2 + 32), 0x7FFFFFFF, "items in a constructor");
    unint64_t v6 = str_checkname(a1);
    int v7 = luaK_stringK(a1[3].n128_i64[0], v6);
    uint64_t v15 = -1;
    LODWORD(v13) = 4;
    LODWORD(v14) = v7;
  }
  else
  {
    yindex(a1, (uint64_t)&v13);
  }
  ++*(_DWORD *)(a2 + 32);
  checknext(a1, 61);
  int v8 = luaK_exp2RK(v4, &v13);
  subexpr(a1, v12, 0);
  int v9 = *(_DWORD *)(*(void *)(a2 + 24) + 8);
  int v10 = luaK_exp2RK(v4, v12);
  uint64_t result = luaK_codeABC(v4, 10, v9, v8, v10);
  *(unsigned char *)(v4 + 60) = v5;
  return result;
}

double yindex(__n128 *a1, uint64_t a2)
{
  luaX_next(a1);
  subexpr(a1, a2, 0);
  luaK_exp2val(a1[3].n128_i64[0], a2);

  return checknext(a1, 93);
}

uint64_t adjustlocalvars(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 48);
  unsigned __int8 v3 = *(unsigned char *)(v2 + 58) + a2;
  *(unsigned char *)(v2 + 58) = v3;
  if (a2)
  {
    int v4 = *(_DWORD *)(v2 + 32);
    uint64_t v5 = **(void **)(*(void *)(v2 + 16) + 88);
    int v6 = *(_DWORD *)(v2 + 52);
    uint64_t v7 = *(void *)(*(void *)v2 + 80);
    unsigned int v8 = v6 + v3 - a2;
    uint64_t v9 = a2 - 1;
    do
      *(_DWORD *)(v7 + 16 * *(__int16 *)(v5 + 2 * (int)v8++) + 8) = v4;
    while (v9--);
  }
  return result;
}

uint64_t new_localvar(void *a1, uint64_t a2)
{
  int v4 = (__int16 *)a1[6];
  uint64_t v5 = a1[11];
  uint64_t v6 = *(void *)v4;
  uint64_t v7 = *(int *)(*(void *)v4 + 36);
  if ((int)v7 <= v4[28])
  {
    uint64_t v8 = luaM_growaux_((void *)a1[7], *(void *)(v6 + 80), (int *)(*(void *)v4 + 36), 16, 0x7FFF, "local variables");
    *(void *)(v6 + 80) = v8;
    uint64_t v9 = *(int *)(v6 + 36);
    if ((int)v7 < (int)v9)
    {
      uint64_t v10 = 16 * v7;
      uint64_t v11 = v9 - v7;
      do
      {
        *(void *)(v8 + v10) = 0;
        v10 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v6 + 80);
  }
  __int16 v12 = v4[28];
  *(void *)(v8 + 16 * v12) = a2;
  if ((*(unsigned char *)(v6 + 9) & 4) != 0 && (*(unsigned char *)(a2 + 9) & 3) != 0)
  {
    luaC_barrier_(a1[7], v6, a2);
    __int16 v12 = v4[28];
  }
  v4[28] = v12 + 1;
  uint64_t result = (uint64_t)checklimit(v4, *(_DWORD *)(v5 + 8) - *((_DWORD *)v4 + 13) + 1, 200, "local variables");
  int v14 = *(_DWORD *)(v5 + 8);
  uint64_t v15 = *(void *)v5;
  if (v14 + 2 > *(_DWORD *)(v5 + 12))
  {
    uint64_t result = luaM_growaux_((void *)a1[7], v15, (int *)(v5 + 12), 2, 0x7FFFFFFF, "local variables");
    uint64_t v15 = result;
    *(void *)uint64_t v5 = result;
    int v14 = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v14 + 1;
  *(_WORD *)(v15 + 2 * v14) = v12;
  return result;
}

uint64_t fieldsel(__n128 *a1, _DWORD *a2)
{
  uint64_t v4 = a1[3].n128_i64[0];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  luaK_exp2anyregup(v4, a2);
  luaX_next(a1);
  unint64_t v5 = str_checkname(a1);
  int v6 = luaK_stringK(a1[3].n128_i64[0], v5);
  uint64_t v10 = -1;
  LODWORD(v8) = 4;
  LODWORD(v9) = v6;
  return luaK_indexed(v4, (uint64_t)a2, &v8);
}

int *funcargs(__n128 *a1, uint64_t a2, int a3)
{
  int v6 = (unsigned __int8 *)a1[3].n128_u64[0];
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned __int32 v7 = a1[1].n128_u32[0];
  switch(v7)
  {
    case 0x125u:
      int v8 = luaK_stringK((uint64_t)v6, a1[1].n128_i64[1]);
      uint64_t v15 = -1;
      LODWORD(v13) = 4;
      LODWORD(v14) = v8;
      luaX_next(a1);
      int v9 = *(_DWORD *)(a2 + 8);
LABEL_14:
      luaK_exp2nextreg((uint64_t)v6, &v13);
      goto LABEL_15;
    case 0x7Bu:
      constructor(a1, (uint64_t)&v13);
      break;
    case 0x28u:
      luaX_next(a1);
      if (a1[1].n128_u32[0] == 41)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        explist(a1, &v13);
        luaK_setreturns(v6, &v13, -1);
      }
      check_match(a1, 41, 40, a3);
      break;
    default:
      luaX_syntaxerror((uint64_t)a1, "function arguments expected");
      int v9 = *(_DWORD *)(a2 + 8);
      goto LABEL_15;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  if ((v13 - 13) >= 2)
  {
    if (v13) {
      goto LABEL_14;
    }
LABEL_15:
    int v10 = v6[60] - v9;
    goto LABEL_16;
  }
  int v10 = 0;
LABEL_16:
  int v11 = luaK_codeABC((uint64_t)v6, 36, v9, v10, 2);
  *(void *)(a2 + 16) = -1;
  *(_DWORD *)a2 = 13;
  *(_DWORD *)(a2 + 8) = v11;
  uint64_t result = luaK_fixline((int *)v6, a3);
  v6[60] = v9 + 1;
  return result;
}

uint64_t singlevar(__n128 *a1, uint64_t a2)
{
  unint64_t v4 = str_checkname(a1);
  uint64_t v5 = a1[3].n128_i64[0];
  uint64_t result = singlevaraux(v5, v4, a2, 1);
  if (!result)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    singlevaraux(v5, a1[6].n128_i64[1], a2, 1);
    int v7 = luaK_stringK(a1[3].n128_i64[0], v4);
    uint64_t v10 = -1;
    LODWORD(v8) = 4;
    LODWORD(v9) = v7;
    return luaK_indexed(v5, a2, &v8);
  }
  return result;
}

uint64_t singlevaraux(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1) {
    return 0;
  }
  int v7 = *(unsigned __int8 *)(a1 + 58);
  do
  {
    BOOL v8 = __OFSUB__(v7--, 1);
    if (v7 < 0 != v8)
    {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 59);
      if (!*(unsigned char *)(a1 + 59)) {
        goto LABEL_16;
      }
      uint64_t v13 = 0;
      uint64_t v14 = *(void **)(*(void *)a1 + 88);
      while (*v14 != a2)
      {
        ++v13;
        v14 += 2;
        if (v12 == v13) {
          goto LABEL_16;
        }
      }
      if ((v13 & 0x80000000) != 0)
      {
LABEL_16:
        if (!singlevaraux(*(void *)(a1 + 8), a2, a3, 0)) {
          return 0;
        }
        LODWORD(v13) = newupvalue(a1, a2, (_DWORD *)a3);
      }
      *(void *)(a3 + 16) = -1;
      uint64_t v9 = 9;
      *(_DWORD *)a3 = 9;
      *(_DWORD *)(a3 + 8) = v13;
      return v9;
    }
  }
  while (*(void *)(*(void *)(*(void *)a1 + 80)
                    + 16
                    * *(__int16 *)(**(void **)(*(void *)(a1 + 16) + 88) + 2 * (v7 + *(_DWORD *)(a1 + 52)))) != a2);
  *(void *)(a3 + 16) = -1;
  uint64_t v9 = 8;
  *(_DWORD *)a3 = 8;
  *(_DWORD *)(a3 + 8) = v7;
  if (!a4)
  {
    int v10 = v7 + 1;
    uint64_t v11 = a1 + 24;
    do
      uint64_t v11 = *(void *)v11;
    while (v10 <= *(unsigned __int8 *)(v11 + 16));
    *(unsigned char *)(v11 + 17) = 1;
    return 8;
  }
  return v9;
}

uint64_t explist(__n128 *a1, _DWORD *a2)
{
  subexpr(a1, a2, 0);
  unsigned __int32 v4 = a1[1].n128_u32[0];
  uint64_t v5 = 1;
  while (v4 == 44)
  {
    luaX_next(a1);
    luaK_exp2nextreg(a1[3].n128_i64[0], a2);
    subexpr(a1, a2, 0);
    uint64_t v5 = (v5 + 1);
    unsigned __int32 v4 = a1[1].n128_u32[0];
  }
  return v5;
}

uint64_t newlabelentry(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = *(int *)(a2 + 8);
  uint64_t v11 = (int *)(a2 + 12);
  int v12 = *(_DWORD *)(a2 + 12);
  uint64_t v13 = *(void *)a2;
  if ((int)v10 >= v12)
  {
    uint64_t v13 = luaM_growaux_(*(void **)(a1 + 56), v13, v11, 24, 0x7FFF, "labels/gotos");
    *(void *)a2 = v13;
  }
  uint64_t v14 = v13 + 24 * (int)v10;
  *(void *)uint64_t v14 = a3;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(*(void *)(a1 + 48) + 58);
  *(_DWORD *)(v14 + 8) = a5;
  *(_DWORD *)(v14 + 12) = a4;
  *(_DWORD *)(a2 + 8) = v10 + 1;
  return v10;
}

uint64_t *findgotos(uint64_t *result, void *a2)
{
  uint64_t v2 = result[11];
  int v3 = *(_DWORD *)(*(void *)(result[6] + 24) + 12);
  int v4 = *(_DWORD *)(v2 + 24);
  if (v3 < v4)
  {
    uint64_t v6 = (uint64_t)result;
    do
    {
      if (*(void *)(*(void *)(v2 + 16) + 24 * v3) == *a2)
      {
        uint64_t result = closegoto(v6, v3, (uint64_t)a2);
        int v4 = *(_DWORD *)(v2 + 24);
      }
      else
      {
        ++v3;
      }
    }
    while (v3 < v4);
  }
  return result;
}

uint64_t *closegoto(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = a2;
  unsigned int v9 = *(unsigned __int8 *)(v7 + 24 * a2 + 16);
  if (v9 < *(unsigned __int8 *)(a3 + 16))
  {
    uint64_t v11 = (const char *)luaO_pushfstring(*(void *)(a1 + 56), "<goto %s> at line %d jumps into the scope of local '%s'", (const char *)(*(void *)(v7 + 24 * a2) + 24), *(_DWORD *)(v7 + 24 * a2 + 12), (const char *)(*(void *)(*(void *)(*(void *)v5 + 80)+ 16* *(__int16 *)(**(void **)(*(void *)(v5 + 16) + 88)+ 2 * (int)(*(_DWORD *)(v5 + 52) + v9)))+ 24));
    *(_DWORD *)(a1 + 16) = 0;
    luaX_syntaxerror(a1, v11);
  }
  uint64_t result = luaK_patchlist(v5, *(_DWORD *)(v7 + 24 * (int)v8 + 8), *(_DWORD *)(a3 + 8));
  LODWORD(v13) = *(_DWORD *)(v6 + 24) - 1;
  if ((int)v13 > a2)
  {
    uint64_t v14 = 24 * v8;
    do
    {
      uint64_t v15 = *(void *)(v6 + 16) + v14;
      ++v8;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 + 24);
      *(void *)(v15 + 16) = *(void *)(v15 + 40);
      uint64_t v13 = *(int *)(v6 + 24) - 1;
      v14 += 24;
    }
    while (v8 < v13);
  }
  *(_DWORD *)(v6 + 24) = v13;
  return result;
}

uint64_t findlabel(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(int *)(*(void *)(v3 + 24) + 8);
  uint64_t v6 = *(int *)(v4 + 40);
  if ((int)v5 >= (int)v6) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 32) + 24 * (int)v5;
  uint64_t v10 = v6 - v5;
  while (*(void *)v9 != *(void *)(v8 + 24 * a2))
  {
    v9 += 24;
    if (!--v10) {
      return 0;
    }
  }
  unsigned int v12 = *(unsigned __int8 *)(v9 + 16);
  if (*(unsigned __int8 *)(v8 + 24 * a2 + 16) > v12) {
    luaK_patchclose(v3, *(_DWORD *)(v8 + 24 * a2 + 8), v12);
  }
  closegoto(a1, a2, v9);
  return 1;
}

uint64_t cond(__n128 *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  subexpr(a1, (uint64_t)v3, 0);
  if (LODWORD(v3[0]) == 1) {
    LODWORD(v3[0]) = 3;
  }
  luaK_goiftrue(a1[3].n128_i64[0], (int *)v3);
  return HIDWORD(v4);
}

uint64_t error_expected(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = luaX_token2str(a1, a2);
  uint64_t v5 = (const char *)luaO_pushfstring(v3, "%s expected", v4);

  return luaX_syntaxerror(a1, v5);
}

int *fornum(__n128 *a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1[3].n128_i64[0];
  int v7 = *(unsigned __int8 *)(v6 + 60);
  uint64_t v8 = luaX_newstring((uint64_t)a1, "(for index)", 0xBuLL);
  new_localvar(a1, v8);
  uint64_t v9 = luaX_newstring((uint64_t)a1, "(for limit)", 0xBuLL);
  new_localvar(a1, v9);
  uint64_t v10 = luaX_newstring((uint64_t)a1, "(for step)", 0xAuLL);
  new_localvar(a1, v10);
  new_localvar(a1, a2);
  checknext(a1, 61);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  subexpr(a1, (uint64_t)&v14, 0);
  luaK_exp2nextreg(a1[3].n128_i64[0], &v14);
  checknext(a1, 44);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  subexpr(a1, (uint64_t)&v14, 0);
  luaK_exp2nextreg(a1[3].n128_i64[0], &v14);
  if (a1[1].n128_u32[0] == 44)
  {
    luaX_next(a1);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    subexpr(a1, (uint64_t)&v14, 0);
    luaK_exp2nextreg(a1[3].n128_i64[0], &v14);
  }
  else
  {
    int v11 = *(unsigned __int8 *)(v6 + 60);
    int v12 = luaK_intK(v6, 1);
    luaK_codek(v6, v11, v12);
    luaK_reserveregs(v6, 1);
  }
  return forbody(a1, v7, a3, 1u, 1);
}

int *forbody(__n128 *a1, int a2, int a3, unsigned int a4, int a5)
{
  uint64_t v10 = a1[3].n128_i64[0];
  adjustlocalvars((uint64_t)a1, 3u);
  checknext(a1, 259);
  if (a5) {
    int v11 = luaK_codeABx(v10, 40, a2, 131070);
  }
  else {
    int v11 = luaK_jump(v10);
  }
  int v12 = v11;
  uint64_t v24 = 0;
  LOBYTE(v24) = *(unsigned char *)(v10 + 58);
  uint64_t v13 = *(void *)(v10 + 24);
  uint64_t v14 = *(void *)(*(void *)(v10 + 16) + 88);
  int v15 = *(_DWORD *)(v14 + 40);
  LODWORD(v14) = *(_DWORD *)(v14 + 24);
  int v22 = v15;
  int v23 = v14;
  uint64_t v21 = v13;
  *(void *)(v10 + 24) = &v21;
  adjustlocalvars((uint64_t)a1, a4);
  luaK_reserveregs(v10, a4);
  block((uint64_t)a1);
  leaveblock(v10);
  luaK_patchtohere(v10, v12);
  uint64_t v16 = v10;
  if (a5)
  {
    int v17 = 39;
    int v18 = a2;
  }
  else
  {
    luaK_codeABC(v10, 41, a2, 0, a4);
    luaK_fixline((int *)v10, a3);
    int v18 = a2 + 2;
    uint64_t v16 = v10;
    int v17 = 42;
  }
  int v19 = luaK_codeABx(v16, v17, v18, 131070);
  luaK_patchlist(v10, v19, v12 + 1);
  return luaK_fixline((int *)v10, a3);
}

void adjust_assign(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  int v5 = a2 - a3;
  if ((*a4 - 13) >= 2)
  {
    if (*a4) {
      luaK_exp2nextreg(*(void *)(a1 + 48), a4);
    }
    if (v5 >= 1)
    {
      int v6 = *(unsigned __int8 *)(v4 + 60);
      luaK_reserveregs(v4, v5);
      luaK_nil((int *)v4, v6, v5);
    }
  }
  else
  {
    if (v5 < 0) {
      int v5 = -1;
    }
    luaK_setreturns(*(unsigned __int8 **)(a1 + 48), a4, v5 + 1);
    if (v5 >= 1)
    {
      luaK_reserveregs(v4, v5);
    }
  }
}

void assignment(__n128 *a1, uint64_t *a2, int a3)
{
  uint64_t v4 = a2;
  int v6 = (int *)(a2 + 1);
  if ((*((_DWORD *)a2 + 2) - 8) >= 3) {
    luaX_syntaxerror((uint64_t)a1, "syntax error");
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a1[1].n128_u32[0] == 44)
  {
    luaX_next(a1);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v16 = v4;
    uint64_t v17 = 0;
    suffixedexp(a1, &v17);
    int v7 = v17;
    if (v17 != 10)
    {
      int v8 = 0;
      uint64_t v9 = a1[3].n128_i64[0];
      int v10 = *(unsigned __int8 *)(v9 + 60);
      do
      {
        while (*((_DWORD *)v4 + 2) == 10)
        {
          if (v7 == *((unsigned __int8 *)v4 + 19) && v18 == *((unsigned __int8 *)v4 + 18))
          {
            *((unsigned char *)v4 + 19) = 8;
            *((unsigned char *)v4 + 18) = v10;
            int v8 = 1;
          }
          if (v7 != 8 || v18 != *((__int16 *)v4 + 8)) {
            break;
          }
          *((_WORD *)v4 + 8) = v10;
          uint64_t v4 = (uint64_t *)*v4;
          int v8 = 1;
          if (!v4) {
            goto LABEL_16;
          }
        }
        uint64_t v4 = (uint64_t *)*v4;
      }
      while (v4);
      if (!v8) {
        goto LABEL_20;
      }
LABEL_16:
      if (v7 == 8) {
        int v11 = 0;
      }
      else {
        int v11 = 5;
      }
      luaK_codeABC(v9, v11, v10, v18, 0);
      luaK_reserveregs(v9, 1);
    }
LABEL_20:
    checklimit((void *)a1[3].n128_u64[0], *(unsigned __int16 *)(a1[3].n128_u64[1] + 198) + a3, 200, "C levels");
    assignment(a1, &v16, (a3 + 1));
    goto LABEL_25;
  }
  checknext(a1, 61);
  int v12 = explist(a1, &v20);
  if (a3 != v12)
  {
    int v14 = v12;
    adjust_assign((uint64_t)a1, a3, v12, &v20);
    if (a3 < v14) {
      *(unsigned char *)(a1[3].n128_u64[0] + 60) += a3 - v14;
    }
LABEL_25:
    uint64_t v13 = a1[3].n128_i64[0];
    int v15 = *(unsigned __int8 *)(v13 + 60) - 1;
    uint64_t v22 = -1;
    LODWORD(v20) = 7;
    LODWORD(v21) = v15;
    goto LABEL_26;
  }
  luaK_setoneret(a1[3].n128_i64[0], &v20);
  uint64_t v13 = a1[3].n128_i64[0];
LABEL_26:
  luaK_storevar(v13, v6, &v20);
}

uint64_t luaE_setdebt(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) += *(void *)(result + 24) - a2;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t luaE_extendCI(uint64_t a1)
{
  uint64_t result = luaM_realloc_(a1, 0, 0, 72);
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(v3 + 24) = result;
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t luaE_freeCI(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t result = luaM_realloc_(v3, v2, 72, 0);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t luaE_shrinkCI(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v3 = (void *)(v1 + 24);
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(v2 + 24);
      if (!v5) {
        break;
      }
      uint64_t result = luaM_realloc_(v4, v2, 72, 0);
      *uint64_t v3 = v5;
      uint64_t v3 = (void *)(v5 + 24);
      uint64_t v2 = *(void *)(v5 + 24);
      *(void *)(v5 + 16) = v1;
      uint64_t v1 = v5;
    }
    while (v2);
  }
  return result;
}

uint64_t lua_newthread(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(uint64_t *)(v2 + 24) >= 1) {
    luaC_step(a1);
  }
  uint64_t v3 = luaM_realloc_(a1, 0, 8, 216);
  *(unsigned char *)(v3 + 17) = *(unsigned char *)(v2 + 84) & 3;
  *(unsigned char *)(v3 + 16) = 8;
  *(void *)(v3 + 8) = *(void *)(v2 + 88);
  uint64_t v4 = v3 + 8;
  *(void *)(v2 + 88) = v3 + 8;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)uint64_t v5 = v3 + 8;
  *(_DWORD *)(v5 + 8) = 72;
  *(void *)(a1 + 16) += 16;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 88) = v3 + 8;
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(_WORD *)(v3 + 208) = 256;
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 204) = 1;
  *(unsigned char *)(v3 + 18) = 0;
  *(unsigned char *)(v3 + 208) = *(unsigned char *)(a1 + 200);
  LODWORD(v5) = *(_DWORD *)(a1 + 188);
  *(void *)(v3 + 176) = *(void *)(a1 + 168);
  *(_DWORD *)(v3 + 196) = v5;
  *(_DWORD *)(v3 + 200) = v5;
  cstdlib_memcpy((void *)v3, (const void *)(*(void *)(v2 + 224) - 8), 8uLL);
  stack_init(v4, a1);
  return v4;
}

uint64_t stack_init(uint64_t a1, uint64_t a2)
{
  uint64_t result = luaM_realloc_(a2, 0, 0, 640);
  *(void *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 184) = 40;
  for (uint64_t i = 8; i != 648; i += 16)
    *(_DWORD *)(result + i) = 0;
  *(void *)(a1 + 96) = result;
  uint64_t v5 = a1 + 96;
  *(void *)(v5 - 48) = result + 560;
  *(unsigned char *)(v5 + 66) = 0;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 - 80) = result + 16;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(v5 + 8) = result + 336;
  *(void *)(v5 - 64) = v5;
  return result;
}

uint64_t luaE_freethread(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - 8;
  luaF_close(a2, *(void *)(a2 + 56));
  freestack(a2);

  return luaM_realloc_(a1, v4, 216, 0);
}

uint64_t freestack(uint64_t result)
{
  if (*(void *)(result + 56))
  {
    uint64_t v1 = result;
    *(void *)(result + 32) = result + 96;
    luaE_freeCI(result);
    uint64_t v2 = *(void *)(v1 + 56);
    uint64_t v3 = 16 * *(int *)(v1 + 184);
    return luaM_realloc_(v1, v2, v3, 0);
  }
  return result;
}

uint64_t lua_newstate(uint64_t (*a1)(uint64_t, void, uint64_t, uint64_t), uint64_t a2)
{
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1(a2, 0, 8, 1744);
  uint64_t v5 = v4;
  if (v4)
  {
    *(void *)(v4 + 8) = 0;
    uint64_t v5 = v4 + 8;
    *(unsigned char *)(v4 + 16) = 8;
    *(unsigned char *)(v4 + 300) = 1;
    *(void *)(v4 + 216) = a1;
    *(_WORD *)(v4 + 17) = 1;
    *(void *)(v4 + 32) = v4 + 216;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 88) = v4 + 8;
    *(void *)(v4 + 96) = 0;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_WORD *)(v4 + 208) = 256;
    *(void *)(v4 + 192) = 0;
    *(void *)(v4 + 200) = 0x100000000;
    *(_OWORD *)(v4 + 64) = 0u;
    *(void *)(v4 + 224) = a2;
    *(void *)(v4 + 440) = v4 + 8;
    int v8 = 1;
    uint64_t __src = (uint64_t *)(v4 + 8);
    cstdlib_memcpy(__dst, &__src, 8uLL);
    uint64_t __src = (uint64_t *)&v8;
    cstdlib_memcpy(&v10, &__src, 8uLL);
    uint64_t __src = &luaO_nilobject_;
    cstdlib_memcpy(&v11, &__src, 8uLL);
    uint64_t __src = (uint64_t *)lua_newstate;
    cstdlib_memcpy(v12, &__src, 8uLL);
    *(_DWORD *)(v5 + 288) = luaS_hash((uint64_t)__dst, 0x20uLL, v8);
    *(unsigned char *)(v5 + 295) = 0;
    *(_DWORD *)(v5 + 280) = 0;
    *(void *)(v5 + 400) = 0;
    *(void *)(v5 + 424) = 0;
    *(void *)(v5 + 440) = 0;
    *(void *)(v5 + 248) = 0;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_WORD *)(v5 + 293) = 7;
    *(_OWORD *)(v5 + 296) = 0u;
    *(_OWORD *)(v5 + 312) = 0u;
    *(_OWORD *)(v5 + 328) = 0u;
    *(_OWORD *)(v5 + 344) = 0u;
    *(_OWORD *)(v5 + 360) = 0u;
    *(_OWORD *)(v5 + 376) = 0u;
    *(_OWORD *)(v5 + 224) = xmmword_2206E2020;
    *(void *)(v5 + 408) = 0xC800000000;
    *(_DWORD *)(v5 + 416) = 200;
    *(void *)(v5 + 712) = 0;
    *(_OWORD *)(v5 + 696) = 0u;
    *(_OWORD *)(v5 + 680) = 0u;
    *(_OWORD *)(v5 + 664) = 0u;
    *(_OWORD *)(v5 + 648) = 0u;
    if (luaD_rawrunprotected(v5, (void (*)(uint64_t, uint64_t))f_luaopen, 0))
    {
      close_state(v5);
      return 0;
    }
  }
  return v5;
}

void *f_luaopen(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  stack_init(a1, a1);
  v5.n128_u64[1] = 72;
  uint64_t v3 = luaH_new(a1);
  *(void *)(v2 + 64) = v3;
  *(_DWORD *)(v2 + 72) = 69;
  luaH_resize(a1, v3, 2u, 0);
  v5.n128_u64[0] = a1;
  luaH_setint(a1, v3, 1, &v5);
  v5.n128_u64[0] = luaH_new(a1);
  v5.n128_u32[2] = 69;
  luaH_setint(a1, v3, 2, &v5);
  luaS_init(a1);
  luaT_init(a1);
  luaX_init(a1);
  *(unsigned char *)(v2 + 87) = 1;
  uint64_t result = lua_version(0);
  *(void *)(v2 + 232) = result;
  return result;
}

uint64_t close_state(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  luaF_close(a1, *(void *)(a1 + 56));
  luaC_freeallobjects(a1);
  luaM_realloc_(a1, *(void *)(*(void *)(a1 + 24) + 48), 8 * *(int *)(*(void *)(a1 + 24) + 60), 0);
  *(void *)(v2 + 176) = luaM_realloc_(a1, *(void *)(v2 + 176), *(void *)(v2 + 192), 0);
  *(void *)(v2 + 192) = 0;
  freestack(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v2;
  uint64_t v3 = *(void *)(v2 + 8);

  return v4(v3, a1 - 8, 1744, 0);
}

uint64_t lua_close(uint64_t a1)
{
  return close_state(*(void *)(*(void *)(a1 + 24) + 224));
}

BOOL luaS_eqlngstr(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  size_t v2 = *(void *)(a1 + 16);
  return v2 == *(void *)(a2 + 16) && cstdlib_memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), v2) == 0;
}

uint64_t luaS_hash(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t result = a2 ^ a3;
  unint64_t v5 = a2 >> 5;
  if (a2 >> 5 < a2)
  {
    unint64_t v6 = ~(a2 >> 5);
    uint64_t v7 = a1 - 1;
    do
    {
      uint64_t result = (32 * result + (result >> 2) + *(unsigned __int8 *)(v7 + a2)) ^ result;
      a2 += v6;
    }
    while (a2 > v5);
  }
  return result;
}

uint64_t luaS_resize(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 24);
  int v5 = *(_DWORD *)(v4 + 60);
  int v6 = v5;
  if (v5 < a2)
  {
    uint64_t result = luaM_realloc_(result, *(void *)(v4 + 48), 8 * v5, 8 * a2);
    *(void *)(v4 + 48) = result;
    int v6 = *(_DWORD *)(v4 + 60);
    if (v6 < a2)
    {
      uint64_t v7 = v6;
      do
        *(void *)(*(void *)(v4 + 48) + 8 * v7++) = 0;
      while (a2 != v7);
    }
  }
  if (v6 >= 1)
  {
    for (uint64_t i = 0; i < v6; ++i)
    {
      uint64_t v9 = *(void *)(v4 + 48);
      uint64_t v10 = *(void *)(v9 + 8 * i);
      *(void *)(v9 + 8 * i) = 0;
      if (v10)
      {
        do
        {
          unsigned int v11 = *(_DWORD *)(v10 + 12) & (a2 - 1);
          uint64_t v12 = *(void *)(v10 + 16);
          *(void *)(v10 + 16) = *(void *)(*(void *)(v4 + 48) + 8 * v11);
          *(void *)(*(void *)(v4 + 48) + 8 * v11) = v10;
          uint64_t v10 = v12;
        }
        while (v12);
        int v6 = *(_DWORD *)(v4 + 60);
      }
    }
  }
  if (v6 > a2)
  {
    uint64_t result = luaM_realloc_(v3, *(void *)(v4 + 48), 8 * v6, 8 * a2);
    *(void *)(v4 + 48) = result;
  }
  *(_DWORD *)(v4 + 60) = a2;
  return result;
}

uint64_t luaS_clearcache(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = result + 512;
  do
  {
    if ((*(unsigned char *)(*(void *)(v2 + v1) + 9) & 3) != 0) {
      *(void *)(v2 + v1) = *(void *)(result + 240);
    }
    v1 += 8;
  }
  while (v1 != 1016);
  return result;
}

uint64_t luaS_init(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  luaS_resize(a1, 128);
  uint64_t v3 = luaS_newlstr(a1, "not enough memory", 0x11uLL);
  *(void *)(v2 + 240) = v3;
  uint64_t result = luaC_fix(a1, v3);
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v2 + 240);
  do
  {
    *(void *)(v2 + 512 + v5) = v6;
    v5 += 8;
  }
  while (v5 != 1016);
  return result;
}

uint64_t luaS_newlstr(uint64_t a1, char *__s1, size_t __n)
{
  if (__n > 0x28)
  {
    if (__n - 0x7FFFFFFFFFFFFFE7 < 0x8000000000000018) {
      luaM_toobig(a1);
    }
    int v13 = *(_DWORD *)(*(void *)(a1 + 24) + 80);
    uint64_t v11 = luaC_newobj(a1, 20, __n + 25);
    *(_DWORD *)(v11 + 12) = v13;
    *(unsigned char *)(v11 + 10) = 0;
    cstdlib_memcpy((void *)(v11 + 24), __s1, __n);
    *(unsigned char *)(v11 + 24 + __n) = 0;
    *(void *)(v11 + 16) = __n;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    unsigned int v7 = *(_DWORD *)(v6 + 80) ^ __n;
    if (__n >> 5 < __n)
    {
      size_t v8 = __n;
      do
      {
        v7 ^= 32 * v7 + (v7 >> 2) + __s1[v8 - 1];
        v8 += ~(__n >> 5);
      }
      while (v8 > __n >> 5);
    }
    int v9 = *(_DWORD *)(v6 + 60);
    uint64_t v10 = (uint64_t *)(*(void *)(v6 + 48) + 8 * (int)((v9 - 1) & v7));
    uint64_t v11 = *v10;
    if (*v10)
    {
      while (*(unsigned __int8 *)(v11 + 11) != __n || cstdlib_memcmp(__s1, (const void *)(v11 + 24), __n))
      {
        uint64_t v11 = *(void *)(v11 + 16);
        if (!v11)
        {
          int v9 = *(_DWORD *)(v6 + 60);
          goto LABEL_10;
        }
      }
      int v15 = *(unsigned __int8 *)(v11 + 9) ^ 3;
      if (((*(unsigned __int8 *)(v6 + 84) ^ 3) & v15) == 0) {
        *(unsigned char *)(v11 + 9) = v15;
      }
    }
    else
    {
LABEL_10:
      if (v9 <= 0x3FFFFFFF && *(_DWORD *)(v6 + 56) >= v9)
      {
        luaS_resize(a1, 2 * v9);
        uint64_t v10 = (uint64_t *)(*(void *)(v6 + 48) + 8 * (int)((*(_DWORD *)(v6 + 60) - 1) & v7));
      }
      uint64_t v11 = luaC_newobj(a1, 4, __n + 25);
      *(_DWORD *)(v11 + 12) = v7;
      *(unsigned char *)(v11 + 10) = 0;
      cstdlib_memcpy((void *)(v11 + 24), __s1, __n);
      *(unsigned char *)(v11 + 24 + __n) = 0;
      *(unsigned char *)(v11 + 11) = __n;
      *(void *)(v11 + 16) = *v10;
      *uint64_t v10 = v11;
      ++*(_DWORD *)(v6 + 56);
    }
  }
  return v11;
}

uint64_t luaS_remove(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = (void *)(*(void *)(v2 + 48) + 8 * ((*(_DWORD *)(v2 + 60) - 1) & *(_DWORD *)(a2 + 12)));
  do
  {
    uint64_t v4 = v3;
    uint64_t v5 = *v3;
    uint64_t v3 = (void *)(*v3 + 16);
  }
  while (v5 != a2);
  *uint64_t v4 = *(void *)(a2 + 16);
  --*(_DWORD *)(v2 + 56);
  return result;
}

uint64_t luaS_new(uint64_t a1, char *__s1)
{
  uint64_t v4 = *(void *)(a1 + 24) + 8 * (__s1 % 0x7F) + 512;
  if (!cstdlib_strcmp(__s1, (const char *)(*(void *)v4 + 24))) {
    return *(void *)v4;
  }
  size_t v5 = cstdlib_strlen(__s1);
  uint64_t result = luaS_newlstr(a1, __s1, v5);
  *(void *)uint64_t v4 = result;
  return result;
}

uint64_t luaS_newudata(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFD8) {
    luaM_toobig(a1);
  }
  uint64_t result = luaC_newobj(a1, 7, a2 + 40);
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 10) = 0;
  return result;
}

uint64_t luaopen_string(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 17);
  luaL_setfuncs(a1, (uint64_t)&strlib, 0, v9, v10, v11, v12, v13);
  lua_createtable((uint64_t)a1, 0, 1);
  lua_pushstring((uint64_t)a1, "");
  lua_pushvalue(a1, -2);
  lua_setmetatable(a1, -2);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  lua_pushvalue(a1, -2);
  lua_setfield(a1, -2, "__index");
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return 1;
}

uint64_t str_byte(void *a1)
{
  unint64_t v24 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v24);
  uint64_t v3 = luaL_optinteger(a1, 2, 1);
  if (v24 >= -v3) {
    uint64_t v4 = v3 + v24 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = luaL_optinteger(a1, 3, v5);
  if (v24 >= -v6) {
    uint64_t v13 = v6 + v24 + 1;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v6 >= 0) {
    uint64_t v13 = v6;
  }
  if (v5 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v5;
  }
  if (v13 >= (uint64_t)v24) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = v13;
  }
  uint64_t v16 = v15 - v14;
  if (v15 < v14) {
    return 0;
  }
  if (v16 >= 0x7FFFFFFF) {
    return luaL_error(a1, "string slice too long", v7, v8, v9, v10, v11, v12, v23);
  }
  uint64_t v17 = (v16 + 1);
  luaL_checkstack(a1, v16 + 1, (uint64_t)"string slice too long", v8, v9, v10, v11, v12, v23);
  if ((v16 & 0x80000000) == 0)
  {
    uint64_t v18 = v14 + v2;
    uint64_t v19 = (v15 - v14 + 1);
    uint64_t v20 = (unsigned __int8 *)(v18 - 1);
    do
    {
      unsigned int v21 = *v20++;
      lua_pushinteger((uint64_t)a1, v21);
      --v19;
    }
    while (v19);
  }
  return v17;
}

uint64_t str_char(void *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v2 = lua_gettop((uint64_t)a1);
  memset(v15, 0, 512);
  uint64_t v8 = luaL_buffinitsize((uint64_t)a1, (uint64_t)v15, v2, v3, v4, v5, v6, v7);
  if (v2 >= 1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v10 + 1;
      unint64_t v12 = luaL_checkinteger(a1, v10 + 1);
      char v13 = v12;
      if (v12 >= 0x100) {
        luaL_argerror(a1, v10 + 1);
      }
      v9[v10++] = v13;
    }
    while ((v2 + 1) - 1 != v11);
  }
  luaL_pushresultsize((uint64_t)v15, v2);
  return 1;
}

uint64_t str_dump(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  memset(v10, 0, 512);
  int v2 = lua_toBOOLean(a1, 2);
  luaL_checktype(a1, 1, 6);
  lua_settop((uint64_t)a1, 1u);
  luaL_buffinit((uint64_t)a1, (uint64_t)v10);
  if (lua_dump((uint64_t)a1, (uint64_t (*)(void))writer, (uint64_t)v10, v2)) {
    return luaL_error(a1, "unable to dump given function", v3, v4, v5, v6, v7, v8, *(uint64_t *)&v10[0]);
  }
  luaL_pushresult((uint64_t)v10);
  return 1;
}

uint64_t str_find(void *a1)
{
  return str_find_aux(a1, 1);
}

uint64_t str_format(void *a1)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  int v2 = lua_gettop((uint64_t)a1);
  uint64_t v85 = 0;
  uint64_t v3 = (unsigned __int8 *)luaL_checklstring(a1, 1, &v85);
  uint64_t v4 = v85;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  luaL_buffinit((uint64_t)a1, (uint64_t)&v89);
  if (v4 < 1) {
    goto LABEL_75;
  }
  uint64_t v11 = &v3[v4];
  uint64_t v12 = 1;
  while (1)
  {
    int v13 = *v3;
    if (v13 != 37)
    {
      uint64_t v17 = v90;
      if ((unint64_t)v90 >= *((void *)&v89 + 1))
      {
        luaL_prepbuffsize((const void **)&v89, 1uLL, v5, v6, v7, v8, v9, v10);
        LOBYTE(v13) = *v3;
        uint64_t v17 = v90;
      }
      ++v3;
      *(void *)&long long v90 = v17 + 1;
      *(unsigned char *)(v89 + v17) = v13;
      goto LABEL_36;
    }
    uint64_t v14 = (char *)(v3 + 1);
    if (v3[1] == 37)
    {
      uint64_t v15 = v90;
      if ((unint64_t)v90 >= *((void *)&v89 + 1))
      {
        luaL_prepbuffsize((const void **)&v89, 1uLL, v5, v6, v7, v8, v9, v10);
        char v16 = *v14;
        uint64_t v15 = v90;
      }
      else
      {
        char v16 = 37;
      }
      v3 += 2;
      *(void *)&long long v90 = v15 + 1;
      *(unsigned char *)(v89 + v15) = v16;
LABEL_36:
      uint64_t v25 = v12;
      goto LABEL_44;
    }
    unint64_t v24 = luaL_prepbuffsize((const void **)&v89, 0x1ACuLL, v5, v6, v7, v8, v9, v10);
    uint64_t v25 = (v12 + 1);
    if ((int)v12 >= v2) {
      luaL_argerror(a1, (v12 + 1));
    }
    char v26 = *v14;
    uint64_t v27 = v3 + 1;
    if (*v14)
    {
      uint64_t v27 = (unsigned __int8 *)v14;
      do
      {
        if (!cstdlib_strchr("-+ #0", v26)) {
          break;
        }
        int v28 = *++v27;
        char v26 = v28;
      }
      while (v28);
    }
    if ((unint64_t)(v27 - (unsigned __int8 *)v14) >= 6) {
      luaL_error(a1, "invalid format (repeated flags)", v18, v19, v20, v21, v22, v23, v82);
    }
    if (cstdlib_isdigit(*v27)) {
      ++v27;
    }
    if (cstdlib_isdigit(*v27)) {
      ++v27;
    }
    int v29 = *v27;
    if (v29 == 46)
    {
      unint64_t v30 = v27 + 1;
      int v31 = cstdlib_isdigit(v27[1]);
      uint64_t v32 = 1;
      if (v31)
      {
        uint64_t v32 = 2;
        unint64_t v30 = v27 + 2;
      }
      if (cstdlib_isdigit(v27[v32])) {
        uint64_t v27 = v30 + 1;
      }
      else {
        uint64_t v27 = v30;
      }
      LOBYTE(v29) = *v27;
    }
    if (cstdlib_isdigit(v29)) {
      luaL_error(a1, "invalid format (width or precision too long)", v33, v34, v35, v36, v37, v38, v82);
    }
    char __s = 37;
    cstdlib_memcpy(v88, v14, v27 - (unsigned __int8 *)v14 + 1);
    v88[v27 - (unsigned __int8 *)v14 + 1] = 0;
    int v46 = (char)*v27;
    uint64_t v3 = v27 + 1;
    uint64_t v45 = v46;
    if (v46 <= 98) {
      break;
    }
    switch((int)v45)
    {
      case 'c':
        uint64_t v84 = luaL_checkinteger(a1, v25);
        int v52 = luaI_snprintf((uint64_t)a1, (uint64_t)v24, 428, (unsigned __int8 *)&__s, v58, v59, v60, v61, v84);
        goto LABEL_42;
      case 'd':
      case 'i':
      case 'o':
      case 'u':
      case 'x':
        goto LABEL_33;
      case 'e':
      case 'f':
      case 'g':
        goto LABEL_41;
      case 'q':
        uint64_t v86 = 0;
        unint64_t v62 = (char *)luaL_checklstring(a1, v25, &v86);
        uint64_t v63 = v90;
        if ((unint64_t)v90 >= *((void *)&v89 + 1))
        {
          luaL_prepbuffsize((const void **)&v89, 1uLL, v5, v6, v7, v8, v9, v10);
          uint64_t v63 = v90;
        }
        *(void *)&long long v90 = v63 + 1;
        *(unsigned char *)(v89 + v63) = 34;
        if (!v86--) {
          goto LABEL_68;
        }
        break;
      case 's':
        *(void *)v121 = 0;
        uint64_t v76 = luaL_tolstring(a1, v25, v121);
        if (cstdlib_strchr(&__s, 46) || *(void *)v121 < 0x64uLL)
        {
          int v57 = luaI_snprintf((uint64_t)a1, (uint64_t)v24, 428, (unsigned __int8 *)&__s, v77, v78, v79, v80, v76);
          lua_settop((uint64_t)a1, 0xFFFFFFFE);
        }
        else
        {
          luaL_addvalue((uint64_t)&v89);
          int v57 = 0;
        }
        goto LABEL_43;
      default:
        return luaL_error(a1, "invalid option '%%%c' to 'format'", v39, v40, v41, v42, v43, v44, v45);
    }
    do
    {
      unsigned int v65 = *v62;
      if (v65 > 0x21)
      {
        if (v65 == 92 || v65 == 34) {
          goto LABEL_56;
        }
      }
      else
      {
        if (!*v62) {
          goto LABEL_63;
        }
        if (v65 == 10)
        {
LABEL_56:
          uint64_t v66 = v90;
          if ((unint64_t)v90 >= *((void *)&v89 + 1))
          {
            luaL_prepbuffsize((const void **)&v89, 1uLL, v5, v6, v7, v8, v9, v10);
            uint64_t v66 = v90;
          }
          *(void *)&long long v90 = v66 + 1;
          *(unsigned char *)(v89 + v66) = 92;
          goto LABEL_59;
        }
      }
      if (cstdlib_iscntrl(v65))
      {
LABEL_63:
        if (cstdlib_isdigit(v62[1])) {
          int v73 = "\\%03d";
        }
        else {
          int v73 = "\\%d";
        }
        luaI_snprintf((uint64_t)a1, (uint64_t)v121, 10, (unsigned __int8 *)v73, v69, v70, v71, v72, *v62);
        luaL_addstring((uint64_t)&v89, v121);
        goto LABEL_67;
      }
LABEL_59:
      uint64_t v67 = v90;
      if ((unint64_t)v90 >= *((void *)&v89 + 1))
      {
        luaL_prepbuffsize((const void **)&v89, 1uLL, v5, v6, v7, v8, v9, v10);
        uint64_t v67 = v90;
      }
      char v68 = *v62;
      *(void *)&long long v90 = v67 + 1;
      *(unsigned char *)(v89 + v67) = v68;
LABEL_67:
      ++v62;
    }
    while (v86--);
LABEL_68:
    uint64_t v75 = v90;
    if ((unint64_t)v90 >= *((void *)&v89 + 1))
    {
      luaL_prepbuffsize((const void **)&v89, 1uLL, v5, v6, v7, v8, v9, v10);
      uint64_t v75 = v90;
    }
    int v57 = 0;
    *(void *)&long long v90 = v75 + 1;
    *(unsigned char *)(v89 + v75) = 34;
LABEL_43:
    *(void *)&long long v90 = v90 + v57;
LABEL_44:
    uint64_t v12 = v25;
    if (v3 >= v11)
    {
LABEL_75:
      luaL_pushresult((uint64_t)&v89);
      return 1;
    }
  }
  if (v45 == 69 || v45 == 71)
  {
LABEL_41:
    addlenmod(&__s);
    uint64_t v83 = luaL_checknumber(a1, v25);
    int v52 = luaI_snprintf((uint64_t)a1, (uint64_t)v24, 428, (unsigned __int8 *)&__s, v53, v54, v55, v56, v83);
    goto LABEL_42;
  }
  if (v45 == 88)
  {
LABEL_33:
    uint64_t v47 = luaL_checkinteger(a1, v25);
    addlenmod(&__s);
    int v52 = luaI_snprintf((uint64_t)a1, (uint64_t)v24, 428, (unsigned __int8 *)&__s, v48, v49, v50, v51, v47);
LABEL_42:
    int v57 = v52;
    goto LABEL_43;
  }
  return luaL_error(a1, "invalid option '%%%c' to 'format'", v39, v40, v41, v42, v43, v44, v45);
}

uint64_t gmatch(void *a1)
{
  return 1;
}

uint64_t str_gsub(void *a1)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  int v2 = (char *)luaL_checklstring(a1, 1, &v80);
  uint64_t v3 = (unsigned __int8 *)luaL_checklstring(a1, 2, &v79);
  int v4 = lua_type(a1, 3);
  uint64_t v5 = luaL_optinteger(a1, 4, v80 + 1);
  int v6 = *v3;
  long long v113 = 0u;
  long long v112 = 0u;
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  if ((v4 - 3) >= 4) {
    luaL_argerror(a1, 3);
  }
  luaL_buffinit((uint64_t)a1, (uint64_t)&v82);
  uint64_t v12 = v79;
  if (v6 == 94)
  {
    ++v3;
    uint64_t v12 = --v79;
  }
  uint64_t v13 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  v46[0] = 200;
  v46[1] = v2;
  uint64_t v47 = &v2[v80];
  uint64_t v48 = &v3[v12];
  long long v49 = (unint64_t)a1;
  uint64_t v44 = (uint64_t)a1;
  uint64_t v45 = v5;
  while (v13 < v5)
  {
    DWORD2(v49) = 0;
    uint64_t v14 = match((uint64_t)v46, (uint64_t)v2, (uint64_t)v3, v7, v8, v9, v10, v11);
    if (v14)
    {
      char v16 = (char *)v14;
      uint64_t v17 = (void *)v49;
      if (v4 == 5)
      {
        push_onecapture((uint64_t)v46, 0, (uint64_t)v2, v14, v8, v9, v10, v11);
        lua_gettable(v17, 3);
LABEL_12:
        if (lua_toBOOLean(v17, -1))
        {
          if (!lua_isstring(v17, -1))
          {
            int v24 = lua_type(v17, -1);
            uint64_t v25 = lua_typename((uint64_t)v17, v24);
            luaL_error(v17, "invalid replacement value (a %s)", v26, v27, v28, v29, v30, v31, (uint64_t)v25);
          }
        }
        else
        {
          lua_settop((uint64_t)v17, 0xFFFFFFFE);
          lua_pushlstring((uint64_t)v17, v2, v16 - v2);
        }
        luaL_addvalue((uint64_t)&v82);
      }
      else
      {
        if (v4 == 6)
        {
          lua_pushvalue((void *)v49, 3);
          int v23 = push_captures((uint64_t)v46, (uint64_t)v2, (uint64_t)v16, v18, v19, v20, v21, v22);
          lua_callk((uint64_t)v17, v23, 1, 0, 0);
          goto LABEL_12;
        }
        unint64_t v81 = 0;
        uint64_t v32 = lua_tolstring((void *)v49, 3, &v81);
        if (v81)
        {
          uint64_t v33 = v32;
          for (unint64_t i = 0; i < v81; ++i)
          {
            int v35 = *(unsigned __int8 *)(v33 + i);
            if (v35 == 37)
            {
              ++i;
              int v36 = cstdlib_isdigit(*(unsigned char *)(v33 + i));
              int v37 = *(char *)(v33 + i);
              if (v36)
              {
                if (v37 == 48)
                {
                  luaL_addlstring((uint64_t)&v82, v2, v16 - v2, v7, v8, v9, v10, v11);
                }
                else
                {
                  push_onecapture((uint64_t)v46, v37 - 49, (uint64_t)v2, (uint64_t)v16, v8, v9, v10, v11);
                  luaL_tolstring(v17, 0xFFFFFFFFLL, 0);
                  lua_rotate(v17, -2, -1);
                  lua_settop((uint64_t)v17, 0xFFFFFFFE);
                  luaL_addvalue((uint64_t)&v82);
                }
              }
              else
              {
                if (v37 != 37) {
                  luaL_error(v17, "invalid use of '%c' in replacement string", v15, v7, v8, v9, v10, v11, 37);
                }
                uint64_t v39 = v83;
                if ((unint64_t)v83 >= *((void *)&v82 + 1))
                {
                  luaL_prepbuffsize((const void **)&v82, 1uLL, v15, v7, v8, v9, v10, v11);
                  uint64_t v39 = v83;
                }
                char v40 = *(unsigned char *)(v33 + i);
                *(void *)&long long v83 = v39 + 1;
                *(unsigned char *)(v82 + v39) = v40;
              }
            }
            else
            {
              uint64_t v38 = v83;
              if ((unint64_t)v83 >= *((void *)&v82 + 1))
              {
                luaL_prepbuffsize((const void **)&v82, 1uLL, v15, v7, v8, v9, v10, v11);
                LOBYTE(v35) = *(unsigned char *)(v33 + i);
                uint64_t v38 = v83;
              }
              *(void *)&long long v83 = v38 + 1;
              *(unsigned char *)(v82 + v38) = v35;
            }
          }
        }
        uint64_t v5 = v45;
      }
      ++v13;
      if (v16 > v2) {
        goto LABEL_39;
      }
    }
    if (v2 >= v47) {
      break;
    }
    uint64_t v41 = v83;
    if ((unint64_t)v83 >= *((void *)&v82 + 1))
    {
      luaL_prepbuffsize((const void **)&v82, 1uLL, v15, v7, v8, v9, v10, v11);
      uint64_t v41 = v83;
    }
    char v42 = *v2;
    *(void *)&long long v83 = v41 + 1;
    *(unsigned char *)(v82 + v41) = v42;
    char v16 = v2 + 1;
LABEL_39:
    int v2 = v16;
    if (v6 == 94) {
      goto LABEL_42;
    }
  }
  char v16 = v2;
LABEL_42:
  luaL_addlstring((uint64_t)&v82, v16, v47 - v16, v7, v8, v9, v10, v11);
  luaL_pushresult((uint64_t)&v82);
  lua_pushinteger(v44, v13);
  return 2;
}

uint64_t str_len(void *a1)
{
  uint64_t v3 = 0;
  luaL_checklstring(a1, 1, &v3);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t str_lower(void *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v13 = 0;
  memset(v14, 0, 512);
  uint64_t v2 = luaL_checklstring(a1, 1, &v13);
  uint64_t v8 = luaL_buffinitsize((uint64_t)a1, (uint64_t)v14, v13, v3, v4, v5, v6, v7);
  if (v13)
  {
    uint64_t v9 = v8;
    for (unint64_t i = 0; i < v13; ++i)
    {
      v9[i] = cstdlib_tolower(*(unsigned __int8 *)(v2 + i));
      uint64_t v11 = v13;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  luaL_pushresultsize((uint64_t)v14, v11);
  return 1;
}

uint64_t str_match(void *a1)
{
  return str_find_aux(a1, 0);
}

uint64_t str_rep(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void *)luaL_checklstring(a1, 1, &__n);
  uint64_t v3 = luaL_checkinteger(a1, 2);
  uint64_t v4 = luaL_optlstring(a1, 3, "", &v16);
  if (v3 <= 0)
  {
    lua_pushstring((uint64_t)a1, "");
  }
  else
  {
    if (__CFADD__(v16, __n) || v16 + __n > 0x7FFFFFFFuLL / v3) {
      return luaL_error(a1, "resulting string too large", v5, v6, v7, v8, v9, v10, v16);
    }
    uint64_t v12 = (const void *)v4;
    size_t v13 = __n * v3 + v16 * (v3 - 1);
    memset(v18, 0, 512);
    uint64_t v14 = luaL_buffinitsize((uint64_t)a1, (uint64_t)v18, v13, v6, v7, v8, v9, v10);
    if ((unint64_t)v3 >= 2)
    {
      unint64_t v15 = v3 + 1;
      do
      {
        cstdlib_memcpy(v14, v2, __n);
        v14 += __n;
        if (v16)
        {
          cstdlib_memcpy(v14, v12, v16);
          v14 += v16;
        }
        --v15;
      }
      while (v15 > 2);
    }
    cstdlib_memcpy(v14, v2, __n);
    luaL_pushresultsize((uint64_t)v18, v13);
  }
  return 1;
}

uint64_t str_reverse(void *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v13 = 0;
  memset(v14, 0, 512);
  uint64_t v2 = luaL_checklstring(a1, 1, &v13);
  uint64_t v8 = luaL_buffinitsize((uint64_t)a1, (uint64_t)v14, v13, v3, v4, v5, v6, v7);
  uint64_t v9 = v13;
  if (v13)
  {
    unint64_t v10 = 0;
    uint64_t v11 = v2 - 1;
    do
    {
      v8[v10++] = *(unsigned char *)(v11 + v9);
      uint64_t v9 = v13;
      --v11;
    }
    while (v10 < v13);
  }
  luaL_pushresultsize((uint64_t)v14, v9);
  return 1;
}

uint64_t str_sub(void *a1)
{
  unint64_t v14 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v14);
  uint64_t v3 = luaL_checkinteger(a1, 2);
  if (v14 >= -v3) {
    uint64_t v4 = v3 + v14 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = luaL_optinteger(a1, 3, -1);
  uint64_t v7 = v14;
  if (v14 >= -v6) {
    uint64_t v8 = v6 + v14 + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6 < 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v6;
  }
  if (v5 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v5;
  }
  if (v9 < (uint64_t)v14) {
    uint64_t v7 = v9;
  }
  BOOL v11 = v7 < v10;
  uint64_t v12 = v7 - v10;
  if (v11) {
    lua_pushstring((uint64_t)a1, "");
  }
  else {
    lua_pushlstring((uint64_t)a1, (char *)(v2 + v10 - 1), v12 + 1);
  }
  return 1;
}

uint64_t str_upper(void *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v13 = 0;
  memset(v14, 0, 512);
  uint64_t v2 = luaL_checklstring(a1, 1, &v13);
  uint64_t v8 = luaL_buffinitsize((uint64_t)a1, (uint64_t)v14, v13, v3, v4, v5, v6, v7);
  if (v13)
  {
    uint64_t v9 = v8;
    for (unint64_t i = 0; i < v13; ++i)
    {
      v9[i] = cstdlib_toupper(*(unsigned __int8 *)(v2 + i));
      uint64_t v11 = v13;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  luaL_pushresultsize((uint64_t)v14, v11);
  return 1;
}

uint64_t str_pack(void *a1)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v68 = (unsigned char *)luaL_checklstring(a1, 1, 0);
  long long v69 = a1;
  uint64_t v70 = 0x100000001;
  lua_pushnil((uint64_t)a1);
  luaL_buffinit((uint64_t)a1, (uint64_t)&v73);
  if (*v68)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      uint64_t v67 = 0;
      int v10 = getdetails(&v69, v5, &v68, (int *)&v67 + 1, (int *)&v67, v2, v3, v4);
      int v11 = v67;
      uint64_t v12 = HIDWORD(v67);
      if ((int)v67 >= 1)
      {
        int v13 = v67 + 1;
        do
        {
          uint64_t v14 = v74;
          if ((unint64_t)v74 >= *((void *)&v73 + 1))
          {
            luaL_prepbuffsize((const void **)&v73, 1uLL, v7, v8, v9, v2, v3, v4);
            uint64_t v14 = v74;
          }
          *(void *)&long long v74 = v14 + 1;
          *(unsigned char *)(v73 + v14) = 0;
          --v13;
        }
        while (v13 > 1);
      }
      v5 += (int)v12 + v11;
      uint64_t v15 = (v6 + 1);
      uint64_t v16 = (int)v12;
      switch(v10)
      {
        case 0:
          uint64_t v17 = luaL_checkinteger(a1, (v6 + 1));
          unint64_t v21 = v17;
          if ((int)v12 <= 7)
          {
            uint64_t v22 = 1 << (8 * v12 - 1);
            if (v17 < -v22 || v17 >= v22) {
              luaL_argerror(a1, (v6 + 1));
            }
          }
          uint64_t v24 = v70;
          uint64_t v25 = v21 >> 63;
          unint64_t v26 = v21;
          uint64_t v27 = v12;
          goto LABEL_20;
        case 1:
          unint64_t v28 = luaL_checkinteger(a1, (v6 + 1));
          unint64_t v29 = v28;
          if ((int)v12 <= 7 && v28 >> (8 * v12)) {
            luaL_argerror(a1, (v6 + 1));
          }
          uint64_t v24 = v70;
          unint64_t v26 = v29;
          uint64_t v27 = v12;
          uint64_t v25 = 0;
LABEL_20:
          packint((uint64_t)&v73, v26, v24, v27, v25, v18, v19, v20);
          break;
        case 2:
          uint64_t v72 = 0;
          memset(v71, 0, sizeof(v71));
          uint64_t v30 = luaL_prepbuffsize((const void **)&v73, (int)v12, v7, v8, v9, v2, v3, v4);
          double v31 = luaL_checknumber(a1, (v6 + 1));
          if (v12 == 4)
          {
            float v32 = v31;
            *(float *)long long v71 = v32;
          }
          else
          {
            *(double *)long long v71 = v31;
          }
          if (v70 == 1)
          {
            if (v12)
            {
              long long v61 = (char *)v71;
              do
              {
                char v62 = *v61++;
                *v30++ = v62;
                LODWORD(v12) = v12 - 1;
              }
              while (v12);
            }
          }
          else if (v12)
          {
            long long v63 = &v30[(int)v12 - 1];
            long long v64 = (char *)v71;
            do
            {
              char v65 = *v64++;
              *v63-- = v65;
              LODWORD(v12) = v12 - 1;
            }
            while (v12);
          }
          *(void *)&long long v74 = v74 + v16;
          break;
        case 3:
          *(void *)&v71[0] = 0;
          uint64_t v38 = (const void *)luaL_checklstring(a1, (v6 + 1), v71);
          if (*(void *)&v71[0] != (int)v12) {
            luaL_argerror(a1, (v6 + 1));
          }
          luaL_addlstring((uint64_t)&v73, v38, (int)v12, v33, v34, v35, v36, v37);
          break;
        case 4:
          *(void *)&v71[0] = 0;
          char v42 = (const void *)luaL_checklstring(a1, (v6 + 1), v71);
          unint64_t v43 = *(void *)&v71[0];
          if ((int)v12 <= 7 && *(void *)&v71[0] >> (8 * v12))
          {
            luaL_argerror(a1, (v6 + 1));
            unint64_t v43 = *(void *)&v71[0];
          }
          packint((uint64_t)&v73, v43, v70, v12, 0, v39, v40, v41);
          luaL_addlstring((uint64_t)&v73, v42, *(unint64_t *)&v71[0], v44, v45, v46, v47, v48);
          v5 += *(void *)&v71[0];
          break;
        case 5:
          *(void *)&v71[0] = 0;
          long long v49 = (const char *)luaL_checklstring(a1, (v6 + 1), v71);
          size_t v50 = cstdlib_strlen(v49);
          if (v50 != *(void *)&v71[0])
          {
            luaL_argerror(a1, (v6 + 1));
            size_t v50 = *(void *)&v71[0];
          }
          luaL_addlstring((uint64_t)&v73, v49, v50, v51, v52, v53, v54, v55);
          uint64_t v59 = v74;
          if ((unint64_t)v74 >= *((void *)&v73 + 1))
          {
            luaL_prepbuffsize((const void **)&v73, 1uLL, v56, v57, v58, v2, v3, v4);
            uint64_t v59 = v74;
          }
          *(void *)&long long v74 = v59 + 1;
          *(unsigned char *)(v73 + v59) = 0;
          v5 += *(void *)&v71[0] + 1;
          break;
        case 6:
          uint64_t v60 = v74;
          if ((unint64_t)v74 >= *((void *)&v73 + 1))
          {
            luaL_prepbuffsize((const void **)&v73, 1uLL, v7, v8, v9, v2, v3, v4);
            uint64_t v60 = v74;
          }
          *(void *)&long long v74 = v60 + 1;
          *(unsigned char *)(v73 + v60) = 0;
          goto LABEL_38;
        case 7:
        case 8:
LABEL_38:
          uint64_t v15 = v6;
          break;
        default:
          break;
      }
      uint64_t v6 = v15;
    }
    while (*v68);
  }
  luaL_pushresult((uint64_t)&v73);
  return 1;
}

uint64_t str_packsize(void *a1)
{
  int v10 = (unsigned char *)luaL_checklstring(a1, 1, 0);
  v11[0] = a1;
  v11[1] = (void *)0x100000001;
  if (*v10)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v9 = 0;
      char v6 = getdetails(v11, v5, &v10, (int *)&v9 + 1, (int *)&v9, v2, v3, v4);
      uint64_t v7 = SHIDWORD(v9) + (uint64_t)(int)v9;
      if (v5 > 0x7FFFFFFF - v7) {
        luaL_argerror(a1, 1);
      }
      if ((v6 & 0xE) == 4) {
        luaL_argerror(a1, 1);
      }
      v5 += v7;
    }
    while (*v10);
  }
  else
  {
    unint64_t v5 = 0;
  }
  lua_pushinteger((uint64_t)a1, v5);
  return 1;
}

uint64_t str_unpack(void *a1)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned char *)luaL_checklstring(a1, 1, 0);
  unint64_t v39 = 0;
  uint64_t v40 = v2;
  uint64_t v3 = luaL_checklstring(a1, 2, &v39);
  uint64_t v4 = luaL_optinteger(a1, 3, 1);
  if (v39 >= -v4) {
    uint64_t v8 = v4 + v39 + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v4 < 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v4;
  }
  uint64_t v10 = v9 - 1;
  if (v9 - 1 > v39) {
    luaL_argerror(a1, 3);
  }
  uint64_t v41 = a1;
  uint64_t v42 = 0x100000001;
  if (*v2)
  {
    int v11 = 0;
    while (2)
    {
      uint64_t v38 = 0;
      int v17 = getdetails(&v41, v10, &v40, (int *)&v38 + 1, (int *)&v38, v5, v6, v7);
      uint64_t v18 = HIDWORD(v38);
      size_t v19 = SHIDWORD(v38);
      uint64_t v20 = v10 + (int)v38;
      if (__CFADD__(v10, (int)v38 + (uint64_t)SHIDWORD(v38)) || v20 + SHIDWORD(v38) > v39) {
        luaL_argerror(a1, 2);
      }
      luaL_checkstack(a1, 2, (uint64_t)"too many results", v12, v13, v14, v15, v16, v37);
      switch(v17)
      {
        case 0:
        case 1:
          uint64_t v21 = unpackint(a1, v3 + v20, v42, v18, v17 == 0, v5, v6, v7);
          lua_pushinteger((uint64_t)a1, v21);
          goto LABEL_34;
        case 2:
          uint64_t v44 = 0;
          memset(v43, 0, sizeof(v43));
          uint64_t v22 = (char *)(v3 + v20);
          if (v42 == 1)
          {
            if (!v18) {
              goto LABEL_32;
            }
            int v23 = v43;
            int v24 = v18;
            do
            {
              char v25 = *v22++;
              *v23++ = v25;
              --v24;
            }
            while (v24);
          }
          else
          {
            if (!v18) {
              goto LABEL_32;
            }
            float v32 = (char *)v43 + v19 - 1;
            int v33 = v18;
            do
            {
              char v34 = *v22++;
              *v32-- = v34;
              --v33;
            }
            while (v33);
          }
          if (v18 == 4)
          {
            double v35 = *(float *)v43;
            goto LABEL_33;
          }
LABEL_32:
          double v35 = *(double *)v43;
LABEL_33:
          lua_pushnumber((uint64_t)a1, v35);
LABEL_34:
          ++v11;
LABEL_35:
          uint64_t v10 = v20 + v19;
          if (*v40) {
            continue;
          }
          uint64_t v9 = v10 + 1;
          break;
        case 3:
          unint64_t v26 = (char *)(v3 + v20);
          uint64_t v27 = (uint64_t)a1;
          size_t v28 = v19;
          goto LABEL_25;
        case 4:
          uint64_t v29 = v3 + v20;
          uint64_t v30 = unpackint(a1, v3 + v20, v42, v18, 0, v5, v6, v7);
          v20 += v30;
          if (v20 + v19 > v39) {
            luaL_argerror(a1, 2);
          }
          unint64_t v26 = (char *)(v29 + v19);
          uint64_t v27 = (uint64_t)a1;
          size_t v28 = v30;
LABEL_25:
          lua_pushlstring(v27, v26, v28);
          goto LABEL_34;
        case 5:
          int v31 = cstdlib_strlen((const char *)(v3 + v20));
          lua_pushlstring((uint64_t)a1, (char *)(v3 + v20), v31);
          v20 += v31 + 1;
          goto LABEL_34;
        case 6:
        case 7:
        case 8:
          goto LABEL_35;
        default:
          goto LABEL_34;
      }
      break;
    }
  }
  else
  {
    int v11 = 0;
  }
  lua_pushinteger((uint64_t)a1, v9);
  return (v11 + 1);
}

uint64_t writer(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t str_find_aux(void *a1, int a2)
{
  unint64_t v68 = 0;
  unint64_t v69 = 0;
  uint64_t v4 = luaL_checklstring(a1, 1, &v69);
  uint64_t v5 = (unsigned __int8 *)luaL_checklstring(a1, 2, &v68);
  uint64_t v6 = luaL_optinteger(a1, 3, 1);
  uint64_t v12 = v6;
  if (v6 < 0)
  {
    if (v69 < -v6) {
      goto LABEL_8;
    }
    uint64_t v12 = v69 + v6 + 1;
  }
  if (v12 < 1)
  {
LABEL_8:
    uint64_t v12 = 1;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_9;
  }
  if (v12 > (uint64_t)(v69 + 1)) {
    goto LABEL_26;
  }
  if (a2)
  {
LABEL_9:
    if (!lua_toBOOLean(a1, 4))
    {
      unint64_t v13 = 0;
      unint64_t v14 = v68;
      while (!cstdlib_strpbrk((char *)&v5[v13], "^$*+?.([%-"))
      {
        v13 += cstdlib_strlen((const char *)&v5[v13]) + 1;
        if (v13 > v14) {
          goto LABEL_13;
        }
      }
      goto LABEL_20;
    }
LABEL_13:
    uint64_t v15 = (char *)(v4 + v12 - 1);
    if (!v68)
    {
LABEL_31:
      double v35 = &v15[-v4];
      lua_pushinteger((uint64_t)a1, (uint64_t)(v35 + 1));
      lua_pushinteger((uint64_t)a1, (uint64_t)&v35[v68]);
      return 2;
    }
    unint64_t v16 = v69 - v12 + 1;
    if (v68 <= v16)
    {
      size_t v17 = v68 - 1;
      size_t v18 = v16 - (v68 - 1);
      if (v16 != v68 - 1)
      {
        do
        {
          size_t v19 = (char *)cstdlib_memchr(v15, (char)*v5, v18);
          if (!v19) {
            break;
          }
          uint64_t v20 = v19;
          uint64_t v21 = v19 + 1;
          if (!cstdlib_memcmp(v19 + 1, v5 + 1, v17))
          {
            uint64_t v15 = v20;
            goto LABEL_31;
          }
          uint64_t v22 = &v15[v18];
          uint64_t v15 = v21;
          size_t v18 = v22 - v21;
        }
        while (v22 != v21);
      }
    }
LABEL_26:
    lua_pushnil((uint64_t)a1);
    return 1;
  }
LABEL_20:
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  int v23 = *v5;
  unint64_t v24 = v68;
  if (v23 == 94)
  {
    ++v5;
    unint64_t v24 = --v68;
  }
  LODWORD(v36) = 200;
  *((void *)&v36 + 1) = v4;
  *(void *)&long long v37 = v4 + v69;
  *((void *)&v37 + 1) = &v5[v24];
  *(void *)&long long v38 = a1;
  uint64_t v25 = v4 - 1;
  while (1)
  {
    unint64_t v26 = v25 + v12;
    DWORD2(v38) = 0;
    uint64_t v27 = match((uint64_t)&v36, v25 + v12, (uint64_t)v5, v7, v8, v9, v10, v11);
    if (v27) {
      break;
    }
    if (v23 != 94)
    {
      ++v12;
      if (v26 < (unint64_t)v37) {
        continue;
      }
    }
    goto LABEL_26;
  }
  uint64_t v29 = v27;
  if (!a2) {
    return push_captures((uint64_t)&v36, v4 + v12 - 1, v27, v7, v8, v9, v10, v11);
  }
  lua_pushinteger((uint64_t)a1, v12);
  lua_pushinteger((uint64_t)a1, v29 - v4);
  return push_captures((uint64_t)&v36, 0, 0, v30, v31, v32, v33, v34) + 2;
}

uint64_t match(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (char *)a3;
  if (!(*(_DWORD *)a1)--) {
    luaL_error(*(void **)(a1 + 32), "pattern too complex", a3, a4, a5, a6, a7, a8, v47);
  }
LABEL_3:
  uint64_t v12 = v8;
  while (2)
  {
    unint64_t v13 = *(char **)(a1 + 24);
    if (v12 == v13)
    {
      uint64_t result = a2;
      goto LABEL_79;
    }
    switch(*v12)
    {
      case '$':
        if (v12 + 1 != v13) {
          goto LABEL_11;
        }
        if (a2 == *(void *)(a1 + 16)) {
          uint64_t result = a2;
        }
        else {
          uint64_t result = 0;
        }
        goto LABEL_79;
      case '%':
        int v14 = v12[1];
        if (v14 == 102)
        {
          int v22 = v12[2];
          uint64_t v21 = v12 + 2;
          if (v22 != 91) {
            luaL_error(*(void **)(a1 + 32), "missing '[' after '%%f' in pattern", a3, a4, a5, a6, a7, a8, v47);
          }
          int v23 = classend(a1, v21, a3, a4, a5, a6, a7, a8);
          if (a2 == *(void *)(a1 + 8)) {
            int v24 = 0;
          }
          else {
            int v24 = *(unsigned __int8 *)(a2 - 1);
          }
          if (!matchbracketclass(v24, (unsigned __int8 *)v21, (unint64_t)(v23 - 1)))
          {
            BOOL v25 = matchbracketclass(*(unsigned __int8 *)a2, (unsigned __int8 *)v21, (unint64_t)(v23 - 1));
            uint64_t v12 = v23;
            if (v25) {
              continue;
            }
          }
          goto LABEL_64;
        }
        if ((v14 - 48) < 0xA)
        {
          int v26 = v12[1] - 49;
          if (v12[1] < 0x31u
            || v26 >= *(_DWORD *)(a1 + 40)
            || *(void *)(a1 + 16 * v26 + 56) == -1)
          {
            int v26 = luaL_error(*(void **)(a1 + 32), "invalid capture index %%%d", a3, a4, a5, a6, a7, a8, v12[1] - 48);
          }
          size_t v27 = *(void *)(a1 + 16 * v26 + 56);
          if (*(void *)(a1 + 16) - a2 >= v27
            && !cstdlib_memcmp(*(const void **)(a1 + 16 * v26 + 48), (const void *)a2, v27)
            && a2 != 0)
          {
            a2 += v27;
            uint64_t v8 = v12 + 2;
            goto LABEL_3;
          }
          goto LABEL_64;
        }
        if (v14 != 98) {
          goto LABEL_11;
        }
        if (v13 - 1 <= v12 + 2) {
          luaL_error(*(void **)(a1 + 32), "malformed pattern (missing arguments to '%%b')", a3, a4, a5, a6, a7, a8, v47);
        }
        int v29 = *(unsigned __int8 *)a2;
        if (v29 != v12[2]) {
          goto LABEL_64;
        }
        unint64_t v30 = *(void *)(a1 + 16);
        if (a2 + 1 >= v30) {
          goto LABEL_64;
        }
        unint64_t v31 = ~a2;
        a2 += 2;
        unint64_t v32 = v31 + v30;
        int v33 = 1;
        do
        {
          int v34 = *(unsigned __int8 *)(a2 - 1);
          if (v34 == v12[3])
          {
            if (!--v33)
            {
              uint64_t v8 = v12 + 4;
              goto LABEL_3;
            }
          }
          else if (v34 == v29)
          {
            ++v33;
          }
          uint64_t result = 0;
          ++a2;
          --v32;
        }
        while (v32);
        goto LABEL_79;
      case '(':
        uint64_t v36 = (uint64_t)(v12 + 1);
        if (v12[1] == 41)
        {
          uint64_t v36 = (uint64_t)(v12 + 2);
          uint64_t v37 = a1;
          uint64_t v38 = a2;
          uint64_t v39 = 4294967294;
        }
        else
        {
          uint64_t v37 = a1;
          uint64_t v38 = a2;
          uint64_t v39 = 0xFFFFFFFFLL;
        }
        uint64_t result = start_capture(v37, v38, v36, v39, a5, a6, a7, a8);
        goto LABEL_79;
      case ')':
        long long v40 = v12 + 1;
        uint64_t v41 = *(unsigned int *)(a1 + 40);
        uint64_t v42 = 16 * v41 + 40;
        while (1)
        {
          BOOL v43 = __OFSUB__(v41, 1);
          LODWORD(v41) = v41 - 1;
          if ((int)v41 < 0 != v43) {
            break;
          }
          uint64_t v44 = *(void *)(a1 + v42);
          v42 -= 16;
          if (v44 == -1) {
            goto LABEL_75;
          }
        }
        LODWORD(v41) = luaL_error(*(void **)(a1 + 32), "invalid pattern capture", a3, a4, a5, a6, a7, a8, v47);
LABEL_75:
        uint64_t v45 = a1 + 16 * (int)v41;
        *(void *)(v45 + 56) = a2 - *(void *)(v45 + 48);
        long long v46 = (void *)(v45 + 56);
        uint64_t result = match(a1, a2, v40);
        if (!result) {
          void *v46 = -1;
        }
        goto LABEL_79;
      default:
LABEL_11:
        uint64_t v8 = classend(a1, v12, a3, a4, a5, a6, a7, a8);
        int v15 = singlematch(a1, (unsigned __int8 *)a2, (unsigned __int8 *)v12, (uint64_t)v8);
        unsigned int v16 = *v8;
        if (!v15)
        {
          BOOL v18 = v16 > 0x3F;
          unint64_t v19 = (1 << v16) & 0x8000240000000000;
          if (!v18 && v19 != 0)
          {
            uint64_t v12 = v8 + 1;
            continue;
          }
LABEL_64:
          uint64_t result = 0;
          goto LABEL_79;
        }
        switch(v16)
        {
          case '?':
            uint64_t v12 = v8 + 1;
            uint64_t result = match(a1, a2 + 1, v8 + 1);
            if (!result) {
              continue;
            }
            goto LABEL_79;
          case '*':
            goto LABEL_56;
          case '+':
            ++a2;
LABEL_56:
            uint64_t v35 = -1;
            do
              ++v35;
            while (singlematch(a1, (unsigned __int8 *)(v35 + a2), (unsigned __int8 *)v12, (uint64_t)v8));
            while ((v35 & 0x8000000000000000) == 0)
            {
              uint64_t result = match(a1, a2 + v35--, v8 + 1);
              if (result) {
                goto LABEL_79;
              }
            }
            goto LABEL_64;
        }
        if (v16 != 45)
        {
          ++a2;
          goto LABEL_3;
        }
        while (1)
        {
          uint64_t result = match(a1, a2, v8 + 1);
          if (result) {
            break;
          }
          if (!singlematch(a1, (unsigned __int8 *)a2, (unsigned __int8 *)v12, (uint64_t)v8)) {
            goto LABEL_64;
          }
          ++a2;
        }
LABEL_79:
        ++*(_DWORD *)a1;
        return result;
    }
  }
}

uint64_t push_captures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = *(_DWORD *)(a1 + 40);
  if (v11) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a2 == 0;
  }
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 1;
  }
  luaL_checkstack(*(void **)(a1 + 32), v13, (uint64_t)"too many captures", a4, a5, a6, a7, a8, v20);
  if ((int)v13 >= 1)
  {
    int v18 = 0;
    do
      push_onecapture(a1, v18++, a2, a3, v14, v15, v16, v17);
    while (v13 != v18);
  }
  return v13;
}

uint64_t start_capture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  uint64_t v12 = *(int *)(a1 + 40);
  if ((int)v12 >= 32) {
    luaL_error(*(void **)(a1 + 32), "too many captures", a3, a4, a5, a6, a7, a8, v15);
  }
  uint64_t v13 = a1 + 16 * v12;
  *(void *)(v13 + 48) = a2;
  *(void *)(v13 + 56) = v8;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  uint64_t result = match(a1, a2, a3);
  if (!result) {
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

char *classend(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = a2 + 1;
  int v11 = *a2;
  if (v11 == 91)
  {
    if (a2[1] == 94) {
      uint64_t v12 = a2 + 2;
    }
    else {
      uint64_t v12 = a2 + 1;
    }
    do
    {
      if (v12 == *(unsigned char **)(a1 + 24)) {
        luaL_error(*(void **)(a1 + 32), "malformed pattern (missing ']')", a3, a4, a5, a6, a7, a8, v14);
      }
      uint64_t v13 = v12 + 1;
      if (*v12 == 37 && (unint64_t)v13 < *(void *)(a1 + 24)) {
        uint64_t v13 = v12 + 2;
      }
      uint64_t v12 = v13;
    }
    while (*v13 != 93);
    return v13 + 1;
  }
  else if (v11 == 37)
  {
    if (result == *(char **)(a1 + 24)) {
      luaL_error(*(void **)(a1 + 32), "malformed pattern (ends with '%%')", a3, a4, a5, a6, a7, a8, v14);
    }
    return a2 + 2;
  }
  return result;
}

BOOL matchbracketclass(int a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3 = a2 + 1;
  int v4 = a2[1];
  BOOL v5 = v4 == 94;
  BOOL v6 = v4 != 94;
  if (v4 != 94) {
    uint64_t v3 = a2;
  }
  for (unint64_t i = v3 + 1; (unint64_t)(v3 + 1) < a3; unint64_t i = v3 + 1)
  {
    int v11 = v3 + 2;
    uint64_t v10 = v3[2];
    int v12 = v3[1];
    if (v12 == 37)
    {
      int matched = match_class(a1, v10);
      uint64_t v3 = v11;
      if (matched) {
        return v6;
      }
    }
    else
    {
      v3 += 3;
      if (v10 != 45 || (unint64_t)v3 >= a3)
      {
        uint64_t v3 = i;
        if (v12 == a1) {
          return v6;
        }
      }
      else if (v12 <= a1 && *v3 >= a1)
      {
        return v6;
      }
    }
  }
  return v5;
}

uint64_t singlematch(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (*(void *)(a1 + 16) <= (unint64_t)a2) {
    return 0;
  }
  int v4 = *a2;
  int v5 = (char)*a3;
  switch(v5)
  {
    case '[':
      return matchbracketclass(v4, a3, a4 - 1);
    case '.':
      return 1;
    case '%':
      return match_class(v4, a3[1]);
  }
  return *a3 == v4;
}

uint64_t match_class(int a1, uint64_t a2)
{
  int v2 = a2;
  switch(cstdlib_tolower(a2))
  {
    case 'a':
      int v4 = cstdlib_isalpha(a1);
      goto LABEL_13;
    case 'c':
      int v4 = cstdlib_iscntrl(a1);
      goto LABEL_13;
    case 'd':
      int v4 = cstdlib_isdigit(a1);
      goto LABEL_13;
    case 'g':
      int v4 = cstdlib_isgraph(a1);
      goto LABEL_13;
    case 'l':
      int v4 = cstdlib_islower(a1);
      goto LABEL_13;
    case 'p':
      int v4 = cstdlib_ispunct(a1);
      goto LABEL_13;
    case 's':
      int v4 = cstdlib_isspace(a1);
      goto LABEL_13;
    case 'u':
      int v4 = cstdlib_isupper(a1);
      goto LABEL_13;
    case 'w':
      int v4 = cstdlib_isalnum(a1);
      goto LABEL_13;
    case 'x':
      int v4 = cstdlib_isxdigit(a1);
LABEL_13:
      BOOL v6 = v4;
      goto LABEL_14;
    case 'z':
      BOOL v6 = a1 == 0;
LABEL_14:
      if (cstdlib_islower(v2)) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = !v6;
      }
      break;
    default:
      uint64_t result = v2 == a1;
      break;
  }
  return result;
}

uint64_t push_onecapture(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 40) <= a2)
  {
    int v12 = *(void **)(a1 + 32);
    if (a2) {
      return luaL_error(v12, "invalid capture index %%%d", a3, a4, a5, a6, a7, a8, (a2 + 1));
    }
    uint64_t v13 = (char *)a3;
    size_t v14 = a4 - a3;
    goto LABEL_12;
  }
  uint64_t v9 = a1 + 16 * a2;
  uint64_t v10 = (char **)(v9 + 48);
  size_t v11 = *(void *)(v9 + 56);
  if (v11 != -2)
  {
    if (v11 == -1) {
      luaL_error(*(void **)(a1 + 32), "unfinished capture", a3, a4, a5, a6, a7, a8, v18);
    }
    int v12 = *(void **)(a1 + 32);
    uint64_t v13 = *v10;
    size_t v14 = v11;
LABEL_12:
    return lua_pushlstring((uint64_t)v12, v13, v14);
  }
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = (uint64_t)&(*v10)[-*(void *)(a1 + 8) + 1];

  return lua_pushinteger(v16, v17);
}

char *addlenmod(const char *a1)
{
  size_t v2 = cstdlib_strlen(a1);
  size_t v3 = cstdlib_strlen("");
  int v4 = &a1[v2];
  LOBYTE(v2) = *(v4 - 1);
  uint64_t result = cstdlib_strcpy((char *)v4 - 1, "");
  BOOL v6 = &v4[v3];
  *((unsigned char *)v6 - 1) = v2;
  *BOOL v6 = 0;
  return result;
}

uint64_t gmatch_aux(void *a1)
{
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v2 = lua_tolstring(a1, -1001001, &v22);
  uint64_t v3 = lua_tolstring(a1, -1001002, &v21);
  LODWORD(v23) = 200;
  uint64_t v4 = v22;
  *((void *)&v23 + 1) = v2;
  *(void *)&long long v24 = v2 + v22;
  *((void *)&v24 + 1) = v3 + v21;
  *(void *)&long long v25 = a1;
  uint64_t v5 = lua_tointegerx(a1, -1001003, 0);
  if (v5 > v4) {
    return 0;
  }
  uint64_t v11 = v2 + v5;
  while (1)
  {
    DWORD2(v25) = 0;
    uint64_t v12 = match((uint64_t)&v23, v11, v3, v6, v7, v8, v9, v10);
    if (v12) {
      break;
    }
    if (++v11 > (unint64_t)v24) {
      return 0;
    }
  }
  uint64_t v14 = v12;
  if (v11 == v12) {
    uint64_t v15 = v12 - v2 + 1;
  }
  else {
    uint64_t v15 = v12 - v2;
  }
  lua_pushinteger((uint64_t)a1, v15);
  lua_copy((uint64_t)a1, -1, -1001003);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return push_captures((uint64_t)&v23, v11, v14, v16, v17, v18, v19, v20);
}

uint64_t getdetails(void **a1, int a2, void *a3, int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = getoption(a1, a3, a4, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  int v19 = *a4;
  int v24 = v19;
  if (v18 == 7)
  {
    if (!*(unsigned char *)*a3 || (v20 = getoption(a1, a3, &v24, v13, v14, v15, v16, v17), int v19 = v24, v20 == 3) || !v24) {
      luaL_argerror(*a1, 1);
    }
  }
  int v21 = 0;
  if (v18 != 3 && v19 >= 2)
  {
    if (v19 >= *((_DWORD *)a1 + 3)) {
      int v22 = *((_DWORD *)a1 + 3);
    }
    else {
      int v22 = v19;
    }
    if ((v22 & (v22 - 1)) != 0) {
      luaL_argerror(*a1, 1);
    }
    int v21 = (v22 - ((v22 - 1) & a2)) & (v22 - 1);
  }
  *a5 = v21;
  return v18;
}

char *packint(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  int v10 = a3;
  uint64_t v13 = (int)a4;
  uint64_t result = luaL_prepbuffsize((const void **)a1, (int)a4, a3, a4, a5, a6, a7, a8);
  int v15 = v9 - 1;
  if (v10) {
    int v15 = 0;
  }
  result[v15] = a2;
  int v16 = v9 - 2;
  if (v9 >= 2)
  {
    int v17 = 1;
    do
    {
      a2 >>= 8;
      if (v10) {
        int v18 = v17;
      }
      else {
        int v18 = v16;
      }
      result[v18] = a2;
      ++v17;
      --v16;
    }
    while (v16 != -1);
    int v19 = v9 - 9;
    if (v9 >= 9)
    {
      if (v8)
      {
        int v20 = 8;
        do
        {
          if (v10) {
            int v21 = v20;
          }
          else {
            int v21 = v19;
          }
          result[v21] = -1;
          ++v20;
          --v19;
        }
        while (v19 != -1);
      }
    }
  }
  *(void *)(a1 + 16) += v13;
  return result;
}

uint64_t getoption(void **a1, void *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = (char *)*a2;
  uint64_t v11 = (char *)(*a2 + 1);
  *a2 = v11;
  uint64_t v12 = *v10;
  *a3 = 0;
  if ((int)v12 > 83)
  {
    uint64_t result = 5;
    switch((int)v12)
    {
      case 'b':
        uint64_t result = 0;
        int v14 = 1;
        goto LABEL_27;
      case 'c':
        if ((*v11 - 58) >= 0xFFFFFFF6)
        {
          int v17 = 0;
          int v18 = v10 + 2;
          do
          {
            *a2 = v18;
            int v17 = *(v18 - 1) + 10 * v17 - 48;
            unsigned int v19 = *v18++ - 48;
          }
          while (v19 <= 9 && v17 < 214748364);
          *a3 = v17;
          if (v17 != -1) {
            return 3;
          }
        }
        else
        {
          *a3 = -1;
        }
        luaL_error(*a1, "missing size for format option 'c'", (uint64_t)a3, a4, a5, a6, a7, a8, v21);
        return 3;
      case 'd':
      case 'n':
        int v16 = 8;
        goto LABEL_24;
      case 'e':
      case 'g':
      case 'k':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'y':
        goto LABEL_20;
      case 'f':
        int v16 = 4;
LABEL_24:
        *a3 = v16;
        return 2;
      case 'h':
        uint64_t result = 0;
        int v14 = 2;
        goto LABEL_27;
      case 'i':
        int v14 = getnumlimit(a1, a2, 4, a4, a5, a6, a7, a8);
        uint64_t result = 0;
        goto LABEL_27;
      case 'j':
      case 'l':
        uint64_t result = 0;
        int v14 = 8;
LABEL_27:
        *a3 = v14;
        return result;
      case 's':
        *a3 = getnumlimit(a1, a2, 8, a4, a5, a6, a7, a8);
        return 4;
      case 'x':
        *a3 = 1;
        return 6;
      case 'z':
        return result;
      default:
        if (v12 == 84)
        {
LABEL_12:
          int v15 = 8;
LABEL_17:
          *a3 = v15;
          return 1;
        }
        if (v12 == 88) {
          return 7;
        }
LABEL_20:
        luaL_error(*a1, "invalid format option '%c'", (uint64_t)a3, a4, a5, a6, a7, a8, v12);
        return 8;
    }
  }
  switch((int)v12)
  {
    case '<':
    case '=':
      *((_DWORD *)a1 + 2) = 1;
      return 8;
    case '>':
      *((_DWORD *)a1 + 2) = 0;
      return 8;
    case '?':
    case '@':
    case 'A':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'K':
      goto LABEL_20;
    case 'B':
      uint64_t result = 1;
      *a3 = 1;
      return result;
    case 'H':
      int v15 = 2;
      goto LABEL_17;
    case 'I':
      *a3 = getnumlimit(a1, a2, 4, a4, a5, a6, a7, a8);
      return 1;
    case 'J':
    case 'L':
      goto LABEL_12;
    default:
      if (v12 == 32) {
        return 8;
      }
      if (v12 != 33) {
        goto LABEL_20;
      }
      *((_DWORD *)a1 + 3) = getnumlimit(a1, a2, 8, a4, a5, a6, a7, a8);
      break;
  }
  return 8;
}

uint64_t getnumlimit(void **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  if ((*(char *)*a2 - 58) >= 0xFFFFFFF6)
  {
    LODWORD(v8) = 0;
    int v9 = (char *)(*a2 + 1);
    do
    {
      *a2 = v9;
      uint64_t v8 = (*(v9 - 1) + 10 * v8 - 48);
      unsigned int v10 = *v9++ - 48;
    }
    while (v10 <= 9 && (int)v8 < 214748364);
  }
  if ((v8 - 17) <= 0xFFFFFFEF) {
    luaL_error(*a1, "integral size (%d) out of limits [1,%d]", a3, a4, a5, a6, a7, a8, v8);
  }
  return v8;
}

uint64_t unpackint(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((int)a4 >= 8) {
    int v9 = 8;
  }
  else {
    int v9 = a4;
  }
  if ((int)a4 < 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    int v10 = a3;
    uint64_t v13 = 0;
    int v14 = v9 + 1;
    int v15 = a4 - v9;
    do
    {
      int v16 = v14 - 2;
      if (!a3) {
        int v16 = v15;
      }
      uint64_t v13 = *(unsigned __int8 *)(a2 + v16) | (unint64_t)(v13 << 8);
      --v14;
      ++v15;
    }
    while (v14 > 1);
    if ((int)a4 > 7)
    {
      if (a4 != 8)
      {
        if (v13 > -1 || a5 == 0) {
          int v18 = 0;
        }
        else {
          int v18 = 255;
        }
        int v19 = ~v9 + a4;
        do
        {
          if (v10) {
            int v20 = v9;
          }
          else {
            int v20 = v19;
          }
          if (v18 != *(unsigned __int8 *)(a2 + v20)) {
            luaL_error(a1, "%d-byte integer does not fit into Lua Integer", a3, a4, a5, a6, a7, a8, a4);
          }
          ++v9;
          --v19;
        }
        while (v19 != -1);
      }
      return v13;
    }
  }
  if (a5) {
    return (v13 ^ (1 << (8 * a4 - 1))) - (1 << (8 * a4 - 1));
  }
  return v13;
}

uint64_t luaH_next(void *a1, uint64_t a2, uint64_t *a3)
{
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 19)
  {
    uint64_t v7 = *a3;
    if ((unint64_t)(*a3 - 2147483649) >= 0xFFFFFFFF80000000 && v7 != 0)
    {
      unsigned int v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= v7) {
        goto LABEL_18;
      }
    }
  }
  else if (!v6)
  {
    LODWORD(v7) = 0;
    unsigned int v8 = *(_DWORD *)(a2 + 12);
    goto LABEL_18;
  }
  int v10 = (_DWORD *)mainposition(a2, a3);
  for (unint64_t i = v10 + 4; !luaV_equalobj(0, v10 + 4, a3); unint64_t i = v10 + 4)
  {
    if (v10[6] == 10 && (a3[1] & 0x40) != 0 && *i == *a3) {
      break;
    }
    uint64_t v12 = (int)v10[7];
    if (v12) {
      v10 += 8 * v12;
    }
    else {
      luaG_runerror(a1, "invalid key to 'next'");
    }
  }
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  LODWORD(v7) = v8 + (((unint64_t)v10 - *(void *)(a2 + 24)) >> 5) + 1;
LABEL_18:
  int v13 = v8 - v7;
  if (v8 <= v7)
  {
LABEL_23:
    unsigned int v17 = v7 - v8;
    int v18 = 1 << *(unsigned char *)(a2 + 11);
    if ((int)v17 >= v18) {
      return 0;
    }
    while (1)
    {
      uint64_t v19 = *(void *)(a2 + 24) + 32 * v17;
      if (*(_DWORD *)(v19 + 8)) {
        break;
      }
      if (v18 == ++v17) {
        return 0;
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)(v19 + 16);
    long long v21 = *(_OWORD *)(*(void *)(a2 + 24) + 32 * v17);
  }
  else
  {
    int v14 = v7;
    uint64_t v15 = 16 * v7;
    unsigned int v16 = v14 + 1;
    while (!*(_DWORD *)(*(void *)(a2 + 16) + 8 + v15))
    {
      v15 += 16;
      ++v16;
      if (!--v13)
      {
        LODWORD(v7) = v8;
        goto LABEL_23;
      }
    }
    *a3 = v16;
    *((_DWORD *)a3 + 2) = 19;
    long long v21 = *(_OWORD *)(*(void *)(a2 + 16) + v15);
  }
  *((_OWORD *)a3 + 1) = v21;
  return 1;
}

_OWORD *luaH_resize(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  int v9 = *(unsigned __int8 *)(a2 + 11);
  int v10 = *(char **)(a2 + 24);
  uint64_t v11 = a3;
  if (v8 < a3)
  {
    uint64_t v12 = luaM_realloc_(a1, *(void *)(a2 + 16), 16 * v8, 16 * a3);
    *(void *)(a2 + 16) = v12;
    uint64_t v13 = *(unsigned int *)(a2 + 12);
    if (v13 < a3)
    {
      uint64_t v14 = v11 - v13;
      uint64_t v15 = (_DWORD *)(v12 + 16 * v13 + 8);
      do
      {
        *uint64_t v15 = 0;
        v15 += 4;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(a2 + 12) = a3;
  }
  uint64_t result = setnodevector(a1, a2, a4);
  if (v8 > a3)
  {
    *(_DWORD *)(a2 + 12) = a3;
    uint64_t v17 = v11;
    do
    {
      int v18 = (__n128 *)(*(void *)(a2 + 16) + 16 * v17++);
      if (v18->n128_u32[2]) {
        luaH_setint(a1, a2, v17, v18);
      }
    }
    while (v17 != v8);
    uint64_t result = (_OWORD *)luaM_realloc_(a1, *(void *)(a2 + 16), 16 * v8, 16 * v11);
    *(void *)(a2 + 16) = result;
  }
  int v19 = 1 << v9;
  if (v9 != 31)
  {
    int v20 = v19 + 1;
    long long v21 = (uint64_t *)&v10[32 * (v19 - 1) + 16];
    do
    {
      if (*((_DWORD *)v21 - 2))
      {
        uint64_t result = luaH_set(a1, a2, v21);
        *uint64_t result = *((_OWORD *)v21 - 1);
      }
      --v20;
      v21 -= 4;
    }
    while (v20 > 1);
  }
  if (v10 != (char *)&dummynode_)
  {
    return (_OWORD *)luaM_realloc_(a1, (uint64_t)v10, 32 * v19, 0);
  }
  return result;
}

char *setnodevector(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    int v5 = luaO_ceillog2(a3);
    if (v5 >= 31) {
      luaG_runerror(a1, "table overflow");
    }
    uint64_t v6 = (1 << v5);
    uint64_t result = (char *)luaM_realloc_(a1, 0, 0, 32 * v6);
    *(void *)(a2 + 24) = result;
    if (v5 != 31)
    {
      uint64_t v8 = 0;
      if ((int)v6 <= 1) {
        unsigned int v9 = 1;
      }
      else {
        unsigned int v9 = v6;
      }
      uint64_t v10 = 32 * v9;
      do
      {
        uint64_t v11 = *(void *)(a2 + 24) + v8;
        *(void *)(v11 + 24) = 0;
        *(_DWORD *)(v11 + 8) = 0;
        v8 += 32;
      }
      while (v10 != v8);
      uint64_t result = *(char **)(a2 + 24);
    }
  }
  else
  {
    LOBYTE(v5) = 0;
    uint64_t v6 = 0;
    uint64_t result = (char *)&dummynode_;
    *(void *)(a2 + 24) = &dummynode_;
  }
  *(unsigned char *)(a2 + 11) = v5;
  *(void *)(a2 + 32) = &result[32 * v6];
  return result;
}

__n128 luaH_setint(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v8 = luaH_getint(a2, a3);
  if (v8 == &luaO_nilobject_)
  {
    v10[0] = a3;
    v10[1] = 19;
    uint64_t v8 = luaH_newkey(a1, a2, v10);
  }
  __n128 result = *a4;
  *(__n128 *)uint64_t v8 = *a4;
  return result;
}

uint64_t *luaH_set(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __n128 result = luaH_get(a2, a3);
  if (result == &luaO_nilobject_)
  {
    return (uint64_t *)luaH_newkey(a1, a2, a3);
  }
  return result;
}

_OWORD *luaH_resizearray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_UNKNOWN **)(a2 + 24) == &dummynode_) {
    int v3 = 0;
  }
  else {
    int v3 = 1 << *(unsigned char *)(a2 + 11);
  }
  return luaH_resize(a1, a2, a3, v3);
}

uint64_t luaH_new(uint64_t a1)
{
  uint64_t result = luaC_newobj(a1, 5, 56);
  *(_WORD *)(result + 10) = 255;
  *(_DWORD *)(result + 12) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &dummynode_;
  *(void *)(result + 32) = &dummynode_;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t luaH_free(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 24);
  if (v4 != &dummynode_) {
    luaM_realloc_(a1, (uint64_t)v4, 32 * (1 << *(unsigned char *)(a2 + 11)), 0);
  }
  luaM_realloc_(a1, *(void *)(a2 + 16), 16 * *(unsigned int *)(a2 + 12), 0);

  return luaM_realloc_(a1, a2, 56, 0);
}

uint64_t *luaH_newkey(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = a3;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v6 = *((_DWORD *)a3 + 2);
  if (v6 == 3)
  {
    *(void *)&v45[0] = 0;
    if (luaV_tointeger(a3, v45))
    {
      uint64_t v43 = *(void *)&v45[0];
      LODWORD(v44) = 19;
      int v3 = &v43;
    }
  }
  else if (!v6)
  {
    luaG_runerror(a1, "table index is nil", v43, v44);
  }
  uint64_t v7 = mainposition(a2, v3);
  uint64_t v8 = v7;
  if ((_UNKNOWN *)v7 == &dummynode_ || *(_DWORD *)(v7 + 8))
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    while (1)
    {
      uint64_t v12 = v11 + v9;
      if (v11 + v9 <= v10) {
        break;
      }
      *(void *)(a2 + 32) = v12 - 32;
      v9 -= 32;
      if (!*(_DWORD *)(v12 - 8))
      {
        uint64_t v13 = mainposition(a2, (_DWORD *)(v7 + 16));
        uint64_t v14 = (_OWORD *)(v11 + v9);
        if (v13 == v8)
        {
          uint64_t v41 = *(int *)(v8 + 28);
          if (v41) {
            *(_DWORD *)(v11 + v9 + 28) = (unint64_t)(v8 - v11 + 32 * v41 - v9) >> 5;
          }
          *(_DWORD *)(v8 + 28) = (unint64_t)(v11 + v9 - v8) >> 5;
          uint64_t v8 = v11 + v9;
        }
        else
        {
          do
          {
            uint64_t v15 = v13;
            v13 += 32 * *(int *)(v13 + 28);
          }
          while (v13 != v8);
          *(_DWORD *)(v15 + 28) = (unint64_t)(v11 - v15 + v9) >> 5;
          long long v16 = *(_OWORD *)(v8 + 16);
          *uint64_t v14 = *(_OWORD *)v8;
          v14[1] = v16;
          if (*(_DWORD *)(v8 + 28))
          {
            *(_DWORD *)(v11 + v9 + 28) += (unint64_t)(v8 - v11 - v9) >> 5;
            *(_DWORD *)(v8 + 28) = 0;
          }
          *(_DWORD *)(v8 + 8) = 0;
        }
        goto LABEL_51;
      }
    }
    uint64_t v17 = 0;
    int v18 = 0;
    memset(v45, 0, sizeof(v45));
    unsigned int v19 = 1;
    unsigned int v20 = 1;
    unsigned int v21 = *(_DWORD *)(a2 + 12);
    do
    {
      unsigned int v22 = v20;
      if (v20 > v21)
      {
        unsigned int v22 = v21;
        if (v19 > v21) {
          break;
        }
      }
      if (v19 <= v22)
      {
        int v23 = 0;
        int v24 = v19 + 1 <= v22 + 1 ? v22 + 1 : v19 + 1;
        do
        {
          if (*(_DWORD *)(*(void *)(a2 + 16) + 16 * (v19 - 1) + 8)) {
            ++v23;
          }
          ++v19;
        }
        while (v24 != v19);
        unsigned int v19 = v24;
      }
      else
      {
        int v23 = 0;
      }
      *((_DWORD *)v45 + v17) += v23;
      v18 += v23;
      ++v17;
      v20 *= 2;
    }
    while (v17 != 32);
    int v25 = 0;
    int v26 = 0;
    uint64_t v27 = 32 * ~(-1 << *(unsigned char *)(a2 + 11));
    do
    {
      uint64_t v28 = *(void *)(a2 + 24) + v27;
      if (*(_DWORD *)(v28 + 8))
      {
        v25 += countint((uint64_t *)(v28 + 16), (uint64_t)v45);
        ++v26;
      }
      v27 -= 32;
    }
    while (v27 != -32);
    unsigned int v29 = v25 + v18 + countint(v3, (uint64_t)v45);
    if (v29)
    {
      unsigned int v30 = 0;
      LODWORD(v31) = 0;
      unsigned int v32 = 0;
      unsigned int v33 = 0;
      int v34 = 1;
      long long v35 = (int *)v45;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        v33 += v37;
        BOOL v38 = v33 > v30;
        if (v33 <= v30) {
          unsigned int v39 = v32;
        }
        else {
          unsigned int v39 = v33;
        }
        if (v38) {
          unsigned int v40 = v34;
        }
        else {
          unsigned int v40 = v31;
        }
        if (v36)
        {
          unsigned int v32 = v39;
          uint64_t v31 = v40;
        }
        else
        {
          uint64_t v31 = v31;
        }
        unsigned int v30 = v34 & 0x7FFFFFFF;
        v34 *= 2;
      }
      while (v29 > v30);
    }
    else
    {
      unsigned int v32 = 0;
      uint64_t v31 = 0;
    }
    luaH_resize(a1, a2, v31, v18 + v26 - v32 + 1);
    return luaH_set(a1, a2, v3);
  }
  else
  {
LABEL_51:
    *(void *)(v8 + 16) = *v3;
    *(_DWORD *)(v8 + 24) = *((_DWORD *)v3 + 2);
    if ((v3[1] & 0x40) != 0 && (*(unsigned char *)(a2 + 9) & 4) != 0 && (*(unsigned char *)(*v3 + 9) & 3) != 0) {
      luaC_barrierback_(a1, a2);
    }
  }
  return (uint64_t *)v8;
}

uint64_t mainposition(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = a2[2] & 0x3F;
  if (v4 > 0x12)
  {
    if (v4 == 22) {
      goto LABEL_9;
    }
    if (v4 == 20)
    {
      uint64_t v7 = *(void *)a2;
      if (!*(unsigned char *)(*(void *)a2 + 10))
      {
        *(_DWORD *)(v7 + 12) = luaS_hash(v7 + 24, *(void *)(v7 + 16), *(_DWORD *)(v7 + 12));
        *(unsigned char *)(v7 + 10) = 1;
        uint64_t v7 = *(void *)a2;
      }
      int v5 = *(_DWORD *)(v7 + 12);
      goto LABEL_13;
    }
    if (v4 != 19) {
      goto LABEL_9;
    }
LABEL_8:
    int v5 = *a2;
    goto LABEL_13;
  }
  if (v4 == 1) {
    goto LABEL_8;
  }
  if (v4 == 4)
  {
    int v5 = *(_DWORD *)(*(void *)a2 + 12);
LABEL_13:
    unsigned int v6 = v5 & ~(-1 << *(unsigned char *)(a1 + 11));
    return *(void *)(a1 + 24) + 32 * v6;
  }
LABEL_9:
  unsigned int v6 = *a2 % (~(-1 << *(unsigned char *)(a1 + 11)) | 1u);
  return *(void *)(a1 + 24) + 32 * v6;
}

uint64_t *luaH_getint(uint64_t a1, uint64_t a2)
{
  if (a2 - 1 < (unint64_t)*(unsigned int *)(a1 + 12)) {
    return (uint64_t *)(*(void *)(a1 + 16) + 16 * (a2 - 1));
  }
  uint64_t result = (uint64_t *)(*(void *)(a1 + 24) + 32 * (a2 & ~(-1 << *(unsigned char *)(a1 + 11))));
  while (*((_DWORD *)result + 6) != 19 || result[2] != a2)
  {
    uint64_t v3 = *((int *)result + 7);
    result += 4 * v3;
    if (!v3) {
      return &luaO_nilobject_;
    }
  }
  return result;
}

uint64_t *luaH_getstr(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)(*(void *)(a1 + 24) + 32 * (*(_DWORD *)(a2 + 12) & ~(-1 << *(unsigned char *)(a1 + 11))));
  while (*((_DWORD *)result + 6) != 68 || result[2] != a2)
  {
    uint64_t v3 = *((int *)result + 7);
    result += 4 * v3;
    if (!v3) {
      return &luaO_nilobject_;
    }
  }
  return result;
}

uint64_t *luaH_get(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = a2[1] & 0x3F;
  if (v4 <= 3)
  {
    if (!v4) {
      return &luaO_nilobject_;
    }
    if (v4 == 3)
    {
      uint64_t v10 = 0;
      if (luaV_tointeger(a2, &v10)) {
        return luaH_getint(a1, v10);
      }
    }
LABEL_13:
    int v5 = (_DWORD *)mainposition(a1, a2);
    while (!luaV_equalobj(0, v5 + 4, a2))
    {
      uint64_t v7 = (int)v5[7];
      v5 += 8 * v7;
      if (!v7) {
        return &luaO_nilobject_;
      }
    }
    return (uint64_t *)v5;
  }
  if (v4 != 19)
  {
    if (v4 == 4)
    {
      int v5 = (_DWORD *)(*(void *)(a1 + 24) + 32 * (*(_DWORD *)(*a2 + 12) & ~(-1 << *(unsigned char *)(a1 + 11))));
      while (v5[6] != 68 || *((void *)v5 + 2) != *a2)
      {
        uint64_t v6 = (int)v5[7];
        v5 += 8 * v6;
        if (!v6) {
          return &luaO_nilobject_;
        }
      }
      return (uint64_t *)v5;
    }
    goto LABEL_13;
  }
  uint64_t v9 = *a2;

  return luaH_getint(a1, v9);
}

uint64_t luaH_getn(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2 && (uint64_t v3 = *(void *)(a1 + 16), !*(_DWORD *)(v3 + 16 * (v2 - 1) + 8)))
  {
    if (v2 < 2)
    {
      return 0;
    }
    else
    {
      LODWORD(v7) = 0;
      do
      {
        unsigned int v8 = (v7 + v2) >> 1;
        if (*(_DWORD *)(v3 + 16 * (v8 - 1) + 8))
        {
          uint64_t v7 = v8;
        }
        else
        {
          LODWORD(v2) = (v7 + v2) >> 1;
          uint64_t v7 = v7;
        }
      }
      while ((v2 - v7) > 1);
    }
  }
  else if (*(_UNKNOWN **)(a1 + 24) == &dummynode_)
  {
    return *(unsigned int *)(a1 + 12);
  }
  else
  {
    uint64_t v4 = (v2 + 1);
    if (*((_DWORD *)luaH_getint(a1, v4) + 2))
    {
      while (!(v4 >> 30))
      {
        unsigned int v5 = 2 * v4;
        uint64_t v6 = luaH_getint(a1, (2 * v4));
        uint64_t v7 = v4;
        uint64_t v4 = (2 * v4);
        if (!*((_DWORD *)v6 + 2)) {
          goto LABEL_17;
        }
      }
      LODWORD(v7) = -1;
      do
      {
        uint64_t v10 = luaH_getint(a1, (v7 + 2));
        uint64_t v7 = (v7 + 1);
      }
      while (*((_DWORD *)v10 + 2));
    }
    else
    {
      unsigned int v5 = v2 + 1;
      uint64_t v7 = v2;
LABEL_17:
      if (v5 - v7 >= 2)
      {
        do
        {
          unsigned int v9 = (v5 + v7) >> 1;
          if (*((_DWORD *)luaH_getint(a1, v9) + 2))
          {
            uint64_t v7 = v9;
          }
          else
          {
            unsigned int v5 = (v5 + v7) >> 1;
            uint64_t v7 = v7;
          }
        }
        while (v5 - v7 > 1);
      }
    }
  }
  return v7;
}

uint64_t countint(uint64_t *a1, uint64_t a2)
{
  if (*((_DWORD *)a1 + 2) != 19) {
    return 0;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)(v2 - 2147483649) < 0xFFFFFFFF80000000 || v2 == 0) {
    return 0;
  }
  int v5 = luaO_ceillog2(v2);
  ++*(_DWORD *)(a2 + 4 * v5);
  return 1;
}

uint64_t luaopen_table(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 7);
  luaL_setfuncs(a1, (uint64_t)&tab_funcs, 0, v9, v10, v11, v12, v13);
  return 1;
}

uint64_t tconcat(void *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  v13[0] = 0;
  v13[1] = 0;
  memset(v14, 0, 512);
  size_t v12 = 0;
  uint64_t v2 = (const void *)luaL_optlstring(a1, 2, "", &v12);
  checktab(a1, v13);
  uint64_t v3 = luaL_optinteger(a1, 3, 1);
  if ((int)lua_type(a1, 4) <= 0) {
    uint64_t v4 = luaL_len(a1, 1);
  }
  else {
    uint64_t v4 = luaL_checkinteger(a1, 4);
  }
  uint64_t v5 = v4;
  luaL_buffinit((uint64_t)a1, (uint64_t)v14);
  if (v3 < v5)
  {
    do
    {
      addfield(a1, (uint64_t)v14, v13, v3);
      luaL_addlstring((uint64_t)v14, v2, v12, v6, v7, v8, v9, v10);
      ++v3;
    }
    while (v5 != v3);
    goto LABEL_8;
  }
  if (v3 == v5) {
LABEL_8:
  }
    addfield(a1, (uint64_t)v14, v13, v5);
  luaL_pushresult((uint64_t)v14);
  return 1;
}

uint64_t tinsert(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v24 = 0;
  int v25 = 0;
  checktab(a1, &v24);
  uint64_t v10 = luaL_len(a1, 1);
  int v11 = lua_gettop((uint64_t)a1);
  if (v11 == 2)
  {
    uint64_t v19 = v10 + 1;
LABEL_12:
    v25(a1, 1, v19);
    return 0;
  }
  if (v11 == 3)
  {
    uint64_t v18 = luaL_checkinteger(a1, 2);
    uint64_t v19 = v18;
    if (v18 < 1 || v18 > v10 + 1) {
      luaL_argerror(a1, 2);
    }
    if (v10 >= v19)
    {
      unsigned int v20 = v24;
      unsigned int v21 = v25;
      do
      {
        v20(a1, 1, v10);
        v21(a1, 1, v10 + 1);
      }
      while (v10-- > v19);
    }
    goto LABEL_12;
  }

  return luaL_error(a1, "wrong number of arguments to 'insert'", v12, v13, v14, v15, v16, v17, a9);
}

uint64_t pack(void *a1)
{
  signed int v2 = lua_gettop((uint64_t)a1);
  lua_createtable((uint64_t)a1, v2, 1);
  lua_rotate(a1, 1, 1);
  if (v2 >= 1)
  {
    unint64_t v3 = v2;
    do
      lua_rawseti(a1, 1, v3);
    while (v3-- > 1);
  }
  lua_pushinteger((uint64_t)a1, v2);
  lua_setfield(a1, 1, "n");
  return 1;
}

uint64_t unpack(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v24[0] = 0;
  v24[1] = 0;
  checktab(a1, v24);
  uint64_t v10 = luaL_optinteger(a1, 2, 1);
  if ((int)lua_type(a1, 3) <= 0) {
    uint64_t v11 = luaL_len(a1, 1);
  }
  else {
    uint64_t v11 = luaL_checkinteger(a1, 3);
  }
  uint64_t v18 = v11;
  unint64_t v19 = v11 - v10;
  if (v11 < v10) {
    return 0;
  }
  if (v19 <= 0x7FFFFFFE)
  {
    uint64_t v20 = (v19 + 1);
    if (lua_checkstack(a1, (int)v19 + 1))
    {
      unsigned int v21 = (void (*)(void *, uint64_t, uint64_t))v24[0];
      uint64_t v22 = v18 + 1;
      do
        v21(a1, 1, v10++);
      while (v22 != v10);
      return v20;
    }
  }

  return luaL_error(a1, "too many results to unpack", v12, v13, v14, v15, v16, v17, a9);
}

uint64_t tremove(void *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  checktab(a1, &v8);
  uint64_t v2 = luaL_len(a1, 1);
  uint64_t v3 = luaL_optinteger(a1, 2, v2);
  uint64_t v4 = v3;
  if (v3 != v2 && (v3 < 1 || v3 > v2 + 1)) {
    luaL_argerror(a1, 1);
  }
  uint64_t v5 = v8;
  v8(a1, 1, v4);
  uint64_t v6 = v9;
  if (v4 < v2)
  {
    do
    {
      v5(a1, 1, v4 + 1);
      v6(a1, 1, v4++);
    }
    while (v2 != v4);
    uint64_t v4 = v2;
  }
  lua_pushnil((uint64_t)a1);
  v6(a1, 1, v4);
  return 1;
}

uint64_t tmove(void *a1)
{
  uint64_t v2 = luaL_checkinteger(a1, 2);
  uint64_t v3 = luaL_checkinteger(a1, 3);
  uint64_t v4 = luaL_checkinteger(a1, 4);
  if ((int)lua_type(a1, 5) < 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 5;
  }
  uint64_t v6 = v3 - v2;
  if (v3 >= v2)
  {
    int v7 = luaL_getmetafield(a1, 1, "__index");
    uint64_t v8 = (void (*)(void *, uint64_t, uint64_t))lua_geti;
    if (!v7)
    {
      luaL_checktype(a1, 1, 5);
      uint64_t v8 = (void (*)(void *, uint64_t, uint64_t))lua_rawgeti;
    }
    uint64_t v9 = v8;
    int v10 = luaL_getmetafield(a1, v5, "__newindex");
    uint64_t v11 = (void (*)(void *, uint64_t, uint64_t))lua_seti;
    if (!v10)
    {
      luaL_checktype(a1, v5, 5);
      uint64_t v11 = (void (*)(void *, uint64_t, uint64_t))lua_rawseti;
    }
    uint64_t v12 = v11;
    if (v2 <= 0 && v3 >= v2 + 0x7FFFFFFFFFFFFFFFLL) {
      luaL_argerror(a1, 3);
    }
    if (v4 > (v6 ^ 0x7FFFFFFFFFFFFFFFLL)) {
      luaL_argerror(a1, 4);
    }
    uint64_t v13 = v4 - v2;
    if (v4 <= v2)
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        uint64_t v15 = v3 + 1;
        do
        {
          v9(a1, 1, v2);
          v12(a1, v5, v4);
          ++v2;
          ++v4;
        }
        while (v15 != v2);
      }
    }
    else if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v14 = v2 - 1;
      do
      {
        v9(a1, 1, v3);
        v12(a1, v5, v13 + v3--);
      }
      while (v14 != v3);
    }
  }
  lua_pushvalue(a1, v5);
  return 1;
}

uint64_t sort(void *a1)
{
  v9[0] = 0;
  v9[1] = 0;
  checktab(a1, v9);
  int v2 = luaL_len(a1, 1);
  luaL_checkstack(a1, 50, (uint64_t)"", v3, v4, v5, v6, v7, (uint64_t)v9[0]);
  if ((int)lua_type(a1, 2) >= 1) {
    luaL_checktype(a1, 2, 6);
  }
  lua_settop((uint64_t)a1, 2u);
  auxsort((uint64_t)a1, v9, 1, v2);
  return 0;
}

uint64_t checktab(void *a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = lua_getmetatable(a1, 1);
  if (result)
  {
    lua_pushstring((uint64_t)a1, "__index");
    if (lua_rawget(a1, -2)) {
      *a2 = lua_geti;
    }
    lua_pushstring((uint64_t)a1, "__newindex");
    if (lua_rawget(a1, -3)) {
      a2[1] = lua_seti;
    }
    uint64_t result = lua_settop((uint64_t)a1, 0xFFFFFFFC);
  }
  if (!*a2 || !a2[1])
  {
    uint64_t result = luaL_checktype(a1, 1, 5);
    if (!*a2) {
      *a2 = lua_rawgeti;
    }
    if (!a2[1]) {
      a2[1] = lua_rawseti;
    }
  }
  return result;
}

uint64_t addfield(void *a1, uint64_t a2, void (**a3)(void *, uint64_t, uint64_t), uint64_t a4)
{
  (*a3)(a1, 1, a4);
  if (!lua_isstring(a1, -1))
  {
    int v6 = lua_type(a1, -1);
    uint64_t v7 = lua_typename((uint64_t)a1, v6);
    luaL_error(a1, "invalid value (%s) at index %d in table for 'concat'", v8, v9, v10, v11, v12, v13, (uint64_t)v7);
  }

  return luaL_addvalue(a2);
}

uint64_t auxsort(uint64_t result, void (**a2)(void *, uint64_t, uint64_t), int a3, int a4)
{
  if (a3 < a4)
  {
    int v4 = a4;
    int v5 = a3;
    uint64_t v7 = (void *)result;
    do
    {
      uint64_t v8 = v5;
      (*a2)(v7, 1, v5);
      uint64_t v9 = v4;
      (*a2)(v7, 1, v4);
      if (sort_comp(v7, -1, -2))
      {
        a2[1](v7, 1, v5);
        uint64_t result = ((uint64_t (*)(void *, uint64_t, void))a2[1])(v7, 1, v4);
      }
      else
      {
        uint64_t result = lua_settop((uint64_t)v7, 0xFFFFFFFD);
      }
      if (v4 - v5 == 1) {
        break;
      }
      int v10 = v4 + v5;
      if (v4 + v5 < 0 != __OFADD__(v4, v5)) {
        ++v10;
      }
      uint64_t v11 = (uint64_t)v10 >> 1;
      (*a2)(v7, 1, v11);
      (*a2)(v7, 1, v5);
      if (sort_comp(v7, -2, -1))
      {
        a2[1](v7, 1, v11);
        uint64_t result = ((uint64_t (*)(void *, uint64_t, void))a2[1])(v7, 1, v5);
      }
      else
      {
        lua_settop((uint64_t)v7, 0xFFFFFFFE);
        (*a2)(v7, 1, v9);
        if (sort_comp(v7, -1, -2))
        {
          a2[1](v7, 1, v11);
          uint64_t result = ((uint64_t (*)(void *, uint64_t, uint64_t))a2[1])(v7, 1, v9);
        }
        else
        {
          uint64_t result = lua_settop((uint64_t)v7, 0xFFFFFFFD);
        }
      }
      if (v9 - v5 == 2) {
        break;
      }
      (*a2)(v7, 1, v11);
      __n128 v12 = lua_pushvalue(v7, -1);
      int v13 = v9 - 1;
      uint64_t v14 = (int)v9 - 1;
      ((void (*)(void *, uint64_t, uint64_t, __n128))*a2)(v7, 1, v14, v12);
      uint64_t v35 = v14;
      unsigned int v36 = v5;
      do
      {
        a2[1](v7, 1, v11);
        a2[1](v7, 1, v14);
        uint64_t v11 = v5 + 1;
        (*a2)(v7, 1, v11);
        if (sort_comp(v7, -1, -2))
        {
          uint64_t v11 = v5 + 1;
          do
          {
            if (v11 >= v9) {
              luaL_error(v7, "invalid order function for sorting", v15, v16, v17, v18, v19, v20, v34);
            }
            lua_settop((uint64_t)v7, 0xFFFFFFFE);
            (*a2)(v7, 1, ++v11);
            ++v5;
          }
          while (sort_comp(v7, -1, -2));
          unsigned int v37 = v5++;
        }
        else
        {
          unsigned int v37 = v5++;
        }
        int v21 = v13 - 1;
        uint64_t v14 = v13 - 1;
        (*a2)(v7, 1, v14);
        if (sort_comp(v7, -3, -1))
        {
          do
          {
            if (v14 <= v8) {
              luaL_error(v7, "invalid order function for sorting", v22, v23, v24, v25, v26, v27, v34);
            }
            lua_settop((uint64_t)v7, 0xFFFFFFFE);
            (*a2)(v7, 1, --v14);
            --v13;
          }
          while (sort_comp(v7, -3, -1));
          int v21 = v13 - 1;
        }
        BOOL v28 = v13 <= v5;
        int v13 = v21;
      }
      while (!v28);
      lua_settop((uint64_t)v7, 0xFFFFFFFC);
      (*a2)(v7, 1, v35);
      (*a2)(v7, 1, v11);
      a2[1](v7, 1, v35);
      a2[1](v7, 1, v11);
      int v29 = v5 - v36;
      int v30 = v9 - v5;
      int v31 = (int)(v5 - v36) >= (int)v9 - v5 ? v36 : v37 + 2;
      int v4 = v29 >= v30 ? v37 : v9;
      uint64_t v32 = v29 >= v30 ? v9 : v37;
      uint64_t v33 = v29 >= v30 ? v37 + 2 : v36;
      uint64_t result = auxsort(v7, a2, v33, v32);
      int v5 = v31;
    }
    while (v31 < v4);
  }
  return result;
}

uint64_t sort_comp(void *a1, int a2, int a3)
{
  if (lua_type(a1, 2))
  {
    lua_pushvalue(a1, 2);
    lua_pushvalue(a1, a2 - 1);
    lua_pushvalue(a1, a3 - 2);
    lua_callk((uint64_t)a1, 2, 1, 0, 0);
    uint64_t v6 = lua_toBOOLean(a1, -1);
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    return v6;
  }
  else
  {
    return lua_compare(a1, a2, a3, 1);
  }
}

uint64_t luaT_init(uint64_t a1)
{
  for (uint64_t i = 0; i != 24; ++i)
  {
    *(void *)(*(void *)(a1 + 24) + i * 8 + 248) = luaS_new(a1, luaT_init_luaT_eventname[i]);
    uint64_t result = luaC_fix(a1, *(void *)(*(void *)(a1 + 24) + i * 8 + 248));
  }
  return result;
}

uint64_t *luaT_gettm(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = luaH_getstr(a1, a3);
  if (!*((_DWORD *)result + 2))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 10) |= 1 << a2;
  }
  return result;
}

uint64_t *luaT_gettmbyobj(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if ((a2[2] & 0xF) == 7)
  {
    uint64_t v3 = (uint64_t *)(*(void *)a2 + 16);
  }
  else if ((a2[2] & 0xF) == 5)
  {
    uint64_t v3 = (uint64_t *)(*(void *)a2 + 40);
  }
  else
  {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 24) + 8 * (a2[2] & 0xF) + 440);
  }
  uint64_t v4 = *v3;
  if (v4) {
    return luaH_getstr(v4, *(void *)(*(void *)(a1 + 24) + 8 * a3 + 248));
  }
  else {
    return &luaO_nilobject_;
  }
}

__n128 luaT_callTM(void *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, int a6)
{
  uint64_t v9 = a1[7];
  int v10 = (_OWORD *)a1[2];
  a1[2] = v10 + 1;
  *int v10 = *a2;
  uint64_t v11 = (_OWORD *)a1[2];
  a1[2] = v11 + 1;
  *uint64_t v11 = *a3;
  __n128 v12 = (_OWORD *)a1[2];
  a1[2] = v12 + 1;
  *__n128 v12 = *a4;
  if (!a6)
  {
    int v13 = (_OWORD *)a1[2];
    a1[2] = v13 + 1;
    *int v13 = *a5;
  }
  luaD_call((uint64_t)a1, (char *)(a1[2] - 16 * (4 - a6)), a6, *(unsigned char *)(a1[4] + 66) & 2);
  if (a6)
  {
    uint64_t v15 = a1[7];
    uint64_t v16 = (__n128 *)(a1[2] - 16);
    a1[2] = v16;
    __n128 result = *v16;
    *(__n128 *)((char *)a5 + v15 - v9) = *v16;
  }
  return result;
}

uint64_t luaT_callbinTM(void *a1, _DWORD *a2, _DWORD *a3, _OWORD *a4, unsigned int a5)
{
  int v10 = luaT_gettmbyobj((uint64_t)a1, a2, a5);
  if (!*((_DWORD *)v10 + 2))
  {
    int v10 = luaT_gettmbyobj((uint64_t)a1, a3, a5);
    if (!*((_DWORD *)v10 + 2)) {
      return 0;
    }
  }
  uint64_t v11 = 1;
  luaT_callTM(a1, v10, a2, a3, a4, 1);
  return v11;
}

uint64_t luaT_trybinTM(void *a1, _DWORD *a2, _DWORD *a3, _OWORD *a4, unsigned int a5)
{
  uint64_t result = luaT_callbinTM(a1, a2, a3, a4, a5);
  if (!result)
  {
    if (a5 - 13 >= 5 && a5 != 19)
    {
      if (a5 != 22) {
        return luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform arithmetic on");
      }
      luaG_concaterror((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    }
    uint64_t v10 = 0;
    if (a2[2] == 3)
    {
      uint64_t v10 = *(void *)a2;
    }
    else if (!luaV_tonumber_(a2, (double *)&v10))
    {
      goto LABEL_13;
    }
    if (a3[2] == 3)
    {
      uint64_t v10 = *(void *)a3;
LABEL_12:
      luaG_tointerror((uint64_t)a1, a2, (uint64_t)a3);
      return luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform arithmetic on");
    }
    if (luaV_tonumber_(a3, (double *)&v10)) {
      goto LABEL_12;
    }
LABEL_13:
    luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform bitwise operation on");
    return luaG_opinterror((uint64_t)a1, a2, (uint64_t)a3, "perform arithmetic on");
  }
  return result;
}

uint64_t luaT_callorderTM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!luaT_callbinTM(a1, a2, a3, *(void *)(a1 + 16), a4)) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *(_DWORD **)(a1 + 16);
  uint64_t result = v5[2];
  if (result) {
    return result != 1 || *v5 != 0;
  }
  return result;
}

uint64_t luaU_undump(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v13 = 0;
  int v5 = *(unsigned __int8 *)a4;
  if (v5 == 27)
  {
    uint64_t v6 = "binary string";
  }
  else
  {
    uint64_t v6 = a4;
    if (v5 == 64 || v5 == 61) {
      uint64_t v6 = a4 + 1;
    }
  }
  v12[0] = a1;
  v12[1] = a2;
  void v12[2] = a3;
  int v13 = v6;
  checkliteral((uint64_t)v12, "Lua", "not a");
  LOBYTE(v14) = 0;
  LoadBlock((uint64_t)v12, (char *)&v14, 1uLL);
  if (LOBYTE(v14) != 83)
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "version mismatch in");
    luaD_throw(a1, 3);
  }
  LOBYTE(v14) = 0;
  LoadBlock((uint64_t)v12, (char *)&v14, 1uLL);
  if (LOBYTE(v14))
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "format mismatch in");
    luaD_throw(a1, 3);
  }
  checkliteral((uint64_t)v12, "\x19\x93\r\n\x1A\n", "corrupted");
  fchecksize((uint64_t)v12, 4, "int");
  fchecksize((uint64_t)v12, 8, "size_t");
  fchecksize((uint64_t)v12, 4, "Instruction");
  fchecksize((uint64_t)v12, 8, "lua_Integer");
  fchecksize((uint64_t)v12, 8, "lua_Number");
  double v14 = 0.0;
  LoadBlock((uint64_t)v12, (char *)&v14, 8uLL);
  if (*(void *)&v14 != 22136)
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "endianness mismatch in");
    luaD_throw(a1, 3);
  }
  double v14 = 0.0;
  LoadBlock((uint64_t)v12, (char *)&v14, 8uLL);
  if (v14 != 370.5)
  {
    luaO_pushfstring(a1, "%s: %s precompiled chunk", v6, "float format mismatch in");
    luaD_throw(a1, 3);
  }
  LOBYTE(v14) = 0;
  LoadBlock((uint64_t)v12, (char *)&v14, 1uLL);
  uint64_t v7 = luaF_newLclosure(a1, LOBYTE(v14));
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)uint64_t v8 = v7;
  *(_DWORD *)(v8 + 8) = 70;
  uint64_t v9 = *(void *)(a1 + 16) + 16;
  *(void *)(a1 + 16) = v9;
  if (*(void *)(a1 + 48) - v9 <= 15) {
    luaD_growstack(a1, 0);
  }
  luaF_newproto(a1);
  *(void *)(v7 + 24) = v10;
  LoadFunction(v12, v10, 0);
  return v7;
}

size_t LoadFunction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t String = LoadString(a1);
  if (String) {
    uint64_t v7 = String;
  }
  else {
    uint64_t v7 = a3;
  }
  *(void *)(a2 + 104) = v7;
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  *(_DWORD *)(a2 + 40) = v45;
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  *(_DWORD *)(a2 + 44) = v45;
  LOBYTE(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
  *(unsigned char *)(a2 + 10) = v45;
  LOBYTE(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
  *(unsigned char *)(a2 + 11) = v45;
  LOBYTE(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
  *(unsigned char *)(a2 + 12) = v45;
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  int v8 = v45;
  uint64_t v9 = 4 * (int)v45;
  uint64_t v10 = (char *)luaM_realloc_(*a1, 0, 0, v9);
  *(void *)(a2 + 56) = v10;
  *(_DWORD *)(a2 + 24) = v8;
  LoadBlock((uint64_t)a1, v10, v9);
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  int v11 = v45;
  uint64_t v12 = luaM_realloc_(*a1, 0, 0, 16 * (int)v45);
  *(void *)(a2 + 48) = v12;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 >= 1)
  {
    uint64_t v13 = v11;
    double v14 = (_DWORD *)(v12 + 8);
    uint64_t v15 = v11;
    do
    {
      *double v14 = 0;
      v14 += 4;
      --v15;
    }
    while (v15);
    uint64_t v16 = 0;
    uint64_t v17 = 16 * v13;
    while (2)
    {
      uint64_t v18 = *(void *)(a2 + 48);
      LOBYTE(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
      int v19 = v45;
      switch((char)v45)
      {
        case 0:
          goto LABEL_15;
        case 1:
          LOBYTE(v45) = 0;
          LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
          *(_DWORD *)(v18 + v16) = v45;
          int v19 = 1;
          goto LABEL_15;
        case 2:
          goto LABEL_16;
        case 3:
          uint64_t v45 = 0;
          LoadBlock((uint64_t)a1, (char *)&v45, 8uLL);
          *(void *)(v18 + v16) = v45;
          int v19 = 3;
          goto LABEL_15;
        case 4:
          goto LABEL_12;
        default:
          if (v45 == 19)
          {
            uint64_t v45 = 0;
            LoadBlock((uint64_t)a1, (char *)&v45, 8uLL);
            *(void *)(v18 + v16) = v45;
            int v19 = 19;
          }
          else
          {
            if (v45 != 20) {
              goto LABEL_16;
            }
LABEL_12:
            uint64_t v20 = LoadString(a1);
            *(void *)(v18 + v16) = v20;
            int v19 = *(unsigned __int8 *)(v20 + 8) | 0x40;
          }
LABEL_15:
          *(_DWORD *)(v18 + v16 + 8) = v19;
LABEL_16:
          v16 += 16;
          if (v17 == v16) {
            break;
          }
          continue;
      }
      break;
    }
  }
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  int v21 = v45;
  uint64_t v22 = (void *)luaM_realloc_(*a1, 0, 0, 16 * (int)v45);
  *(void *)(a2 + 88) = v22;
  *(_DWORD *)(a2 + 16) = v21;
  if (v21 >= 1)
  {
    uint64_t v23 = v21;
    uint64_t v24 = v21;
    do
    {
      *uint64_t v22 = 0;
      v22 += 2;
      --v24;
    }
    while (v24);
    uint64_t v25 = 0;
    uint64_t v26 = 16 * v23;
    do
    {
      LOBYTE(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
      *(unsigned char *)(*(void *)(a2 + 88) + v25 + 8) = v45;
      LOBYTE(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 1uLL);
      *(unsigned char *)(*(void *)(a2 + 88) + v25 + 9) = v45;
      v25 += 16;
    }
    while (v26 != v25);
  }
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  int v27 = v45;
  *(void *)(a2 + 64) = luaM_realloc_(*a1, 0, 0, 8 * (int)v45);
  *(_DWORD *)(a2 + 32) = v27;
  if (v27 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 8 * v27;
    do
    {
      *(void *)(*(void *)(a2 + 64) + v28) = 0;
      v28 += 8;
    }
    while (v29 != v28);
    uint64_t v30 = 0;
    do
    {
      double v31 = luaF_newproto(*a1);
      *(void *)(*(void *)(a2 + 64) + v30) = v32;
      LoadFunction(a1, *(void *)(*(void *)(a2 + 64) + v30), *(void *)(a2 + 104), v31);
      v30 += 8;
    }
    while (v29 != v30);
  }
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  int v33 = v45;
  uint64_t v34 = 4 * (int)v45;
  uint64_t v35 = (char *)luaM_realloc_(*a1, 0, 0, v34);
  *(void *)(a2 + 72) = v35;
  *(_DWORD *)(a2 + 28) = v33;
  LoadBlock((uint64_t)a1, v35, v34);
  LODWORD(v45) = 0;
  LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  int v36 = v45;
  unsigned int v37 = (void *)luaM_realloc_(*a1, 0, 0, 16 * (int)v45);
  *(void *)(a2 + 80) = v37;
  *(_DWORD *)(a2 + 36) = v36;
  if (v36 >= 1)
  {
    uint64_t v38 = v36;
    uint64_t v39 = v36;
    do
    {
      *unsigned int v37 = 0;
      v37 += 2;
      --v39;
    }
    while (v39);
    uint64_t v40 = 0;
    uint64_t v41 = 16 * v38;
    do
    {
      *(void *)(*(void *)(a2 + 80) + v40) = LoadString(a1);
      LODWORD(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
      *(_DWORD *)(*(void *)(a2 + 80) + v40 + 8) = v45;
      LODWORD(v45) = 0;
      LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
      *(_DWORD *)(*(void *)(a2 + 80) + v40 + 12) = v45;
      v40 += 16;
    }
    while (v41 != v40);
  }
  LODWORD(v45) = 0;
  size_t result = LoadBlock((uint64_t)a1, (char *)&v45, 4uLL);
  if ((int)v45 >= 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 16 * v45;
    do
    {
      size_t result = LoadString(a1);
      *(void *)(*(void *)(a2 + 88) + v43) = result;
      v43 += 16;
    }
    while (v44 != v43);
  }
  return result;
}

uint64_t checkliteral(uint64_t a1, char *__s, const char *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  size_t v6 = cstdlib_strlen(__s);
  LoadBlock(a1, __s2, v6);
  uint64_t result = cstdlib_memcmp(__s, __s2, v6);
  if (result)
  {
    luaO_pushfstring(*(void *)a1, "%s: %s precompiled chunk", *(const char **)(a1 + 24), a3);
    return luaD_throw(*(void *)a1, 3);
  }
  return result;
}

size_t fchecksize(uint64_t a1, uint64_t a2, const char *a3)
{
  unsigned __int8 v8 = 0;
  size_t result = LoadBlock(a1, (char *)&v8, 1uLL);
  if (v8 != a2)
  {
    uint64_t v7 = (const char *)luaO_pushfstring(*(void *)a1, "%s size mismatch in", a3);
    luaO_pushfstring(*(void *)a1, "%s: %s precompiled chunk", *(const char **)(a1 + 24), v7);
    return luaD_throw(*(void *)a1, 3);
  }
  return result;
}

size_t LoadBlock(uint64_t a1, char *a2, size_t a3)
{
  size_t result = luaZ_read(*(unint64_t **)(a1 + 8), a2, a3);
  if (result)
  {
    luaO_pushfstring(*(void *)a1, "%s: %s precompiled chunk", *(const char **)(a1 + 24), "truncated");
    uint64_t v5 = *(void *)a1;
    return luaD_throw(v5, 3);
  }
  return result;
}

uint64_t LoadString(uint64_t *a1)
{
  unsigned __int8 v8 = 0;
  LoadBlock((uint64_t)a1, (char *)&v8, 1uLL);
  size_t v2 = v8;
  __uint64_t n = v8;
  if (v8 == 255)
  {
    LoadBlock((uint64_t)a1, (char *)&__n, 8uLL);
    size_t v2 = __n;
    if (__n) {
      goto LABEL_3;
    }
  }
  else if (v8)
  {
LABEL_3:
    uint64_t v3 = *a1;
    uint64_t v4 = (uint64_t *)a1[2];
    __uint64_t n = v2 - 1;
    uint64_t v5 = (char *)luaZ_openspace(v3, v4, v2 - 1);
    LoadBlock((uint64_t)a1, v5, __n);
    return luaS_newlstr(*a1, v5, __n);
  }
  return 0;
}

uint64_t luaopen_utf8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  luaL_checkversion_(a1, 136, 503.0, a3, a4, a5, a6, a7, a8, v15);
  lua_createtable((uint64_t)a1, 0, 6);
  luaL_setfuncs(a1, (uint64_t)&funcs, 0, v9, v10, v11, v12, v13);
  lua_pushlstring((uint64_t)a1, "[", 0xEuLL);
  lua_setfield(a1, -2, "charpattern");
  return 1;
}

uint64_t byteoffset(void *a1)
{
  int64_t v22 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v22);
  uint64_t v3 = luaL_checkinteger(a1, 2);
  if (v3 < 0) {
    uint64_t v4 = v22 + 1;
  }
  else {
    uint64_t v4 = 1;
  }
  uint64_t v5 = luaL_optinteger(a1, 3, v4);
  uint64_t v12 = v5;
  if (v5 < 0)
  {
    uint64_t v12 = 0;
    if (v22 < (unint64_t)-v5)
    {
LABEL_9:
      luaL_argerror(a1, 3);
      goto LABEL_10;
    }
    uint64_t v12 = v5 + v22 + 1;
  }
  uint64_t v13 = v12 - 1;
  if (v12 < 1) {
    goto LABEL_9;
  }
  --v12;
  if (v13 > v22) {
    goto LABEL_9;
  }
LABEL_10:
  if (!v3)
  {
    if (v12 >= 1)
    {
      while ((*(unsigned char *)(v2 + v12) & 0xC0) == 0x80)
      {
        if (v12-- <= 1)
        {
          uint64_t v12 = 0;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_36;
  }
  if ((*(unsigned char *)(v2 + v12) & 0xC0) == 0x80) {
    luaL_error(a1, "initial position is a continuation byte", v6, v7, v8, v9, v10, v11, v21);
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = v3 - 1;
    if ((unint64_t)v3 < 2 || v12 >= v22)
    {
      uint64_t v16 = v3 - 1;
    }
    else
    {
      do
      {
        do
          char v15 = *(unsigned char *)(v2 + 1 + v12++);
        while ((v15 & 0xC0) == 0x80);
        uint64_t v16 = v14 - 1;
        if (v14 < 2) {
          break;
        }
        --v14;
      }
      while (v12 < v22);
    }
    goto LABEL_33;
  }
  if (v12 >= 1)
  {
    while (2)
    {
      unint64_t v18 = v12;
      do
      {
        uint64_t v12 = v18 - 1;
        if (v18 <= 1)
        {
          uint64_t v12 = 0;
          if (v3 != -1) {
            goto LABEL_34;
          }
          goto LABEL_36;
        }
        int v19 = *(unsigned char *)(v2 - 1 + v18--) & 0xC0;
      }
      while (v19 == 128);
      uint64_t v16 = v3 + 1;
      if (v3 <= -2)
      {
        ++v3;
        if (v12 + 1 > 1) {
          continue;
        }
      }
      break;
    }
LABEL_33:
    if (v16) {
      goto LABEL_34;
    }
LABEL_36:
    lua_pushinteger((uint64_t)a1, v12 + 1);
    return 1;
  }
LABEL_34:
  lua_pushnil((uint64_t)a1);
  return 1;
}

uint64_t codepoint(void *a1)
{
  unint64_t v24 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v24);
  uint64_t v3 = luaL_optinteger(a1, 2, 1);
  if (v24 >= -v3) {
    uint64_t v4 = v3 + v24 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = luaL_optinteger(a1, 3, v5);
  int64_t v13 = v24;
  if (v24 >= -v6) {
    uint64_t v14 = v6 + v24 + 1;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v6 < 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v6;
  }
  if (v5 <= 0)
  {
    luaL_argerror(a1, 2);
    int64_t v13 = v24;
  }
  if (v15 > v13) {
    luaL_argerror(a1, 3);
  }
  uint64_t v16 = v15 - v5;
  if (v15 < v5) {
    return 0;
  }
  if (v16 < 0x7FFFFFFF)
  {
    luaL_checkstack(a1, v16 + 1, (uint64_t)"string slice too long", v8, v9, v10, v11, v12, v23);
    LODWORD(v17) = 0;
    unint64_t v19 = v2 + v15;
    uint64_t v20 = (char *)(v5 + v2 - 1);
    while (1)
    {
      HIDWORD(v23) = 0;
      uint64_t v21 = utf8_decode(v20, (unsigned int *)&v23 + 1);
      if (!v21) {
        break;
      }
      uint64_t v20 = (char *)v21;
      lua_pushinteger((uint64_t)a1, SHIDWORD(v23));
      uint64_t v17 = (v17 + 1);
      if ((unint64_t)v20 >= v19) {
        return v17;
      }
    }
    unint64_t v18 = "invalid UTF-8 code";
  }
  else
  {
    unint64_t v18 = "string slice too long";
  }
  return luaL_error(a1, v18, v7, v8, v9, v10, v11, v12, v23);
}

uint64_t utfchar(void *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = lua_gettop((uint64_t)a1);
  if (v2 == 1)
  {
    pushutfchar(a1, 1);
  }
  else
  {
    int v3 = v2;
    memset(v6, 0, 512);
    luaL_buffinit((uint64_t)a1, (uint64_t)v6);
    if (v3 >= 1)
    {
      LODWORD(v4) = 0;
      do
      {
        uint64_t v4 = (v4 + 1);
        pushutfchar(a1, v4);
        luaL_addvalue((uint64_t)v6);
      }
      while (v3 != v4);
    }
    luaL_pushresult((uint64_t)v6);
  }
  return 1;
}

uint64_t utflen(void *a1)
{
  unint64_t v15 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v15);
  uint64_t v3 = luaL_optinteger(a1, 2, 1);
  if (v15 >= -v3) {
    uint64_t v4 = v3 + v15 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = luaL_optinteger(a1, 3, -1);
  int64_t v7 = v15;
  if (v15 >= -v6) {
    uint64_t v8 = v6 + v15 + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6 < 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v6;
  }
  uint64_t v10 = (unsigned __int8 *)(v5 - 1);
  if (v5 < 1 || (--v5, (uint64_t)v10 > (uint64_t)v15))
  {
    luaL_argerror(a1, 2);
    int64_t v7 = v15;
    uint64_t v10 = (unsigned __int8 *)v5;
  }
  if (v9 > v7) {
    luaL_argerror(a1, 3);
  }
  if ((uint64_t)v10 >= v9)
  {
    uint64_t v11 = 0;
LABEL_24:
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = utf8_decode((char *)&v10[v2], 0);
      if (!v12) {
        break;
      }
      uint64_t v10 = &v12[-v2];
      ++v11;
      if ((uint64_t)&v12[-v2] >= v9) {
        goto LABEL_24;
      }
    }
    lua_pushnil((uint64_t)a1);
    uint64_t v11 = (uint64_t)(v10 + 1);
    uint64_t v13 = 2;
  }
  lua_pushinteger((uint64_t)a1, v11);
  return v13;
}

uint64_t iter_codes(void *a1)
{
  return 3;
}

unsigned __int8 *utf8_decode(char *a1, unsigned int *a2)
{
  unsigned int v2 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    if (!a2) {
      return (unsigned __int8 *)(a1 + 1);
    }
LABEL_3:
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  char v4 = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  while ((v2 & 0x40) != 0)
  {
    unsigned __int8 v7 = a1[++v5];
    LOBYTE(v2) = 2 * v2;
    v4 += 5;
    int v6 = v7 & 0x3F | (v6 << 6);
    if ((v7 & 0xC0) != 0x80) {
      return 0;
    }
  }
  uint64_t v3 = 0;
  if (v5 <= 3)
  {
    unsigned int v2 = ((v2 & 0x7F) << v4) | v6;
    if (HIWORD(v2) <= 0x10u)
    {
      if (v2 <= utf8_decode_limits[v5]) {
        return 0;
      }
      a1 += v5;
      if (!a2) {
        return (unsigned __int8 *)(a1 + 1);
      }
      goto LABEL_3;
    }
  }
  return (unsigned __int8 *)v3;
}

uint64_t pushutfchar(void *a1, uint64_t a2)
{
  unint64_t v10 = luaL_checkinteger(a1, a2);
  if (v10 >= 0x110000) {
    luaL_argerror(a1, a2);
  }
  return lua_pushfstring((uint64_t)a1, "%U", v4, v5, v6, v7, v8, v9, v10);
}

uint64_t iter_aux(void *a1)
{
  uint64_t v15 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v15);
  uint64_t v3 = lua_tointegerx(a1, 2, 0);
  uint64_t v4 = v3 - 1;
  if (v3 < 1)
  {
    uint64_t v4 = 0;
  }
  else if (v3 <= v15)
  {
    do
      int v5 = *(unsigned char *)(v2 + v3++) & 0xC0;
    while (v5 == 128);
    uint64_t v4 = v3 - 1;
  }
  if (v4 >= v15) {
    return 0;
  }
  HIDWORD(v14) = 0;
  uint64_t v6 = utf8_decode((char *)(v2 + v4), (unsigned int *)&v14 + 1);
  if (!v6 || (*v6 & 0xC0) == 0x80) {
    return luaL_error(a1, "invalid UTF-8 code", v7, v8, v9, v10, v11, v12, v14);
  }
  lua_pushinteger((uint64_t)a1, v4 + 1);
  lua_pushinteger((uint64_t)a1, SHIDWORD(v14));
  return 2;
}

uint64_t luaV_tonumber_(_DWORD *a1, double *a2)
{
  if (a1[2] == 19)
  {
    double v4 = (double)*(uint64_t *)a1;
LABEL_10:
    *a2 = v4;
    return 1;
  }
  if ((a1[2] & 0xF) == 4)
  {
    double v9 = 0.0;
    uint64_t v10 = 0;
    uint64_t v5 = luaO_str2num((char *)(*(void *)a1 + 24), (uint64_t)&v9);
    uint64_t v6 = *(void *)a1;
    uint64_t v7 = *(unsigned char *)(*(void *)a1 + 8) == 4 ? *(unsigned __int8 *)(v6 + 11) : *(void *)(v6 + 16);
    if (v5 == v7 + 1)
    {
      double v4 = (double)*(uint64_t *)&v9;
      if (v10 != 19) {
        double v4 = v9;
      }
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t luaV_tointeger(_DWORD *a1, void *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  while (a1[2] != 19)
  {
    if ((a1[2] & 0xF) == 4)
    {
      uint64_t v4 = luaO_str2num((char *)(*(void *)a1 + 24), (uint64_t)v8);
      uint64_t v5 = *(void *)a1;
      uint64_t v6 = *(unsigned char *)(*(void *)a1 + 8) == 4 ? *(unsigned __int8 *)(v5 + 11) : *(void *)(v5 + 16);
      a1 = v8;
      if (v4 == v6 + 1) {
        continue;
      }
    }
    return 0;
  }
  *a2 = *(void *)a1;
  return 1;
}

uint64_t *luaV_gettable(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (uint64_t *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  int v9 = 2000;
  while (1)
  {
    if (v8 == 69)
    {
      uint64_t v10 = *v6;
      size_t result = luaH_get(*v6, a3);
      uint64_t v12 = result;
      if (*((_DWORD *)result + 2)
        || (size_t result = *(uint64_t **)(v10 + 40)) == 0
        || (*((unsigned char *)result + 10) & 1) != 0
        || (size_t result = luaT_gettm((uint64_t)result, 0, *(void *)(*(void *)(a1 + 24) + 248)), (v13 = result) == 0))
      {
        *a4 = *(_OWORD *)v12;
        return result;
      }
    }
    else
    {
      uint64_t v13 = luaT_gettmbyobj(a1, v6, 0);
      if (!*((_DWORD *)v13 + 2)) {
        luaG_typeerror(a1, (uint64_t)v6, "index");
      }
    }
    int v8 = *((_DWORD *)v13 + 2);
    if ((v8 & 0xF) == 6) {
      break;
    }
    uint64_t v6 = v13;
    if (!--v9)
    {
      return (uint64_t *)luaG_runerror(a1, "gettable chain too long; possible loop");
    }
  }

  return (uint64_t *)luaT_callTM(a1, v13, v6, a3, a4, 1);
}

uint64_t *luaV_settable(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v6 = (uint64_t *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  int v9 = 2000;
  while (1)
  {
    if (v8 == 69)
    {
      uint64_t v10 = *v6;
      size_t result = luaH_get(*v6, a3);
      uint64_t v12 = result;
      if (*((_DWORD *)result + 2)) {
        goto LABEL_17;
      }
      size_t result = *(uint64_t **)(v10 + 40);
      if (!result
        || (*((unsigned char *)result + 10) & 2) != 0
        || (size_t result = luaT_gettm((uint64_t)result, 1, *(void *)(*(void *)(a1 + 24) + 256)), (v13 = result) == 0))
      {
        if (v12 == &luaO_nilobject_)
        {
          size_t result = luaH_newkey(a1, v10, a3);
          uint64_t v12 = result;
        }
LABEL_17:
        *(_OWORD *)uint64_t v12 = *(_OWORD *)a4;
        *(unsigned char *)(v10 + 10) = 0;
        if ((a4[8] & 0x40) != 0 && (*(unsigned char *)(v10 + 9) & 4) != 0 && (*(unsigned char *)(*(void *)a4 + 9) & 3) != 0)
        {
          return (uint64_t *)luaC_barrierback_(a1, v10);
        }
        return result;
      }
    }
    else
    {
      uint64_t v13 = luaT_gettmbyobj(a1, v6, 1u);
      if (!*((_DWORD *)v13 + 2)) {
        luaG_typeerror(a1, (uint64_t)v6, "index");
      }
    }
    int v8 = *((_DWORD *)v13 + 2);
    if ((v8 & 0xF) == 6) {
      break;
    }
    uint64_t v6 = v13;
    if (!--v9)
    {
      return (uint64_t *)luaG_runerror(a1, "settable chain too long; possible loop");
    }
  }

  return (uint64_t *)luaT_callTM(a1, v13, v6, a3, a4, 0);
}

uint64_t luaV_lessthan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 0xF) == 4)
  {
    if ((*(_DWORD *)(a3 + 8) & 0xF) == 4) {
      return l_strcmp(*(void *)a2, *(void *)a3) >> 31;
    }
    goto LABEL_10;
  }
  if ((v6 & 0xF) != 3 || (int v7 = *(_DWORD *)(a3 + 8), (v7 & 0xF) != 3))
  {
LABEL_10:
    uint64_t v10 = luaT_callorderTM(a1, a2, a3, 20);
    if ((v10 & 0x80000000) != 0) {
      luaG_ordererror(a1, a2, a3);
    }
    return v10;
  }
  if (v6 == 19)
  {
    uint64_t v8 = *(void *)a2;
    if (v7 == 19)
    {
      uint64_t v9 = *(void *)a3;
    }
    else
    {
      double v13 = *(double *)a3;
      if ((unint64_t)(v8 + 0x20000000000000) < 0x40000000000001) {
        return v13 > (double)v8;
      }
      if (v13 >= 9.22337204e18) {
        return 1;
      }
      if (v13 <= -9.22337204e18) {
        return 0;
      }
      uint64_t v9 = (uint64_t)v13;
    }
    return v8 < v9;
  }
  else
  {
    double v12 = *(double *)a2;
    if (v7 == 3)
    {
      return v12 < *(double *)a3;
    }
    else
    {
      uint64_t v14 = *(void *)a3;
      if ((unint64_t)(*(void *)a3 + 0x20000000000000) >= 0x40000000000001)
      {
        if (v12 >= 9.22337204e18) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = v12 >= -9.22337204e18 && v14 <= (uint64_t)v12;
        }
      }
      else
      {
        BOOL v15 = v12 >= (double)v14;
      }
      return !v15;
    }
  }
}

uint64_t l_strcmp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const char *)(a1 + 24);
  if (*(unsigned char *)(a1 + 8) == 4) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 11);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = (const char *)(a2 + 24);
  if (*(unsigned char *)(a2 + 8) == 4) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 11);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  while (1)
  {
    uint64_t result = cstdlib_strcmp(v2, v4);
    if (result) {
      break;
    }
    size_t v6 = cstdlib_strlen(v2);
    if (v6 == v5) {
      return v5 != v3;
    }
    if (v6 == v3) {
      return 0xFFFFFFFFLL;
    }
    v2 += v6 + 1;
    v3 -= v6 + 1;
    v4 += v6 + 1;
    v5 -= v6 + 1;
  }
  return result;
}

uint64_t luaV_lessequal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 0xF) == 4)
  {
    if ((*(_DWORD *)(a3 + 8) & 0xF) == 4) {
      return (int)l_strcmp(*(void *)a2, *(void *)a3) < 1;
    }
    goto LABEL_10;
  }
  if ((v6 & 0xF) != 3 || (int v7 = *(_DWORD *)(a3 + 8), (v7 & 0xF) != 3))
  {
LABEL_10:
    uint64_t result = luaT_callorderTM(a1, a2, a3, 21);
    if ((result & 0x80000000) != 0)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 66) |= 0x80u;
      int v11 = luaT_callorderTM(a1, a3, a2, 20);
      *(unsigned char *)(*(void *)(a1 + 32) + 66) ^= 0x80u;
      if (v11 < 0) {
        luaG_ordererror(a1, a2, a3);
      }
      return v11 == 0;
    }
    return result;
  }
  if (v6 == 19)
  {
    uint64_t v8 = *(void *)a2;
    if (v7 == 19)
    {
      uint64_t v9 = *(void *)a3;
      return v8 <= v9;
    }
    double v13 = *(double *)a3;
    if ((unint64_t)(v8 + 0x20000000000000) >= 0x40000000000001)
    {
      if (v13 >= 9.22337204e18)
      {
        return 1;
      }
      else
      {
        if (v13 >= -9.22337204e18)
        {
          uint64_t v9 = (uint64_t)v13;
          return v8 <= v9;
        }
        return 0;
      }
    }
    else
    {
      return v13 >= (double)v8;
    }
  }
  else
  {
    double v12 = *(double *)a2;
    if (v7 == 3)
    {
      return v12 <= *(double *)a3;
    }
    else
    {
      uint64_t v14 = *(void *)a3;
      if ((unint64_t)(*(void *)a3 + 0x20000000000000) >= 0x40000000000001)
      {
        if (v12 >= 9.22337204e18) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = v12 > -9.22337204e18 && v14 < (uint64_t)v12;
        }
      }
      else
      {
        BOOL v15 = v12 > (double)v14;
      }
      return !v15;
    }
  }
}

uint64_t luaV_equalobj(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  int v5 = a2[2];
  int v6 = *((_DWORD *)a3 + 2);
  if ((v5 & 0x3F) == (v6 & 0x3F))
  {
    uint64_t result = 1;
    switch(v5 & 0x3F)
    {
      case 0:
        return result;
      case 1:
        return *a2 == *(_DWORD *)a3;
      case 3:
        return *(double *)a2 == *(double *)a3;
      case 5:
        uint64_t v11 = *a3;
        if (*(void *)a2 == *a3) {
          return result;
        }
        if (!a1) {
          return 0;
        }
        uint64_t v12 = *(void *)(*(void *)a2 + 40);
        if (!v12 || (*(unsigned char *)(v12 + 10) & 0x20) != 0) {
          goto LABEL_28;
        }
        double v13 = luaT_gettm(v12, 5, *(void *)(*(void *)(a1 + 24) + 288));
        if (v13) {
          goto LABEL_39;
        }
        uint64_t v11 = *v3;
LABEL_28:
        uint64_t result = *(void *)(v11 + 40);
        if (!result) {
          return result;
        }
        goto LABEL_37;
      case 7:
        uint64_t v14 = *a3;
        if (*(void *)a2 == *a3) {
          return result;
        }
        if (!a1) {
          return 0;
        }
        uint64_t v15 = *(void *)(*(void *)a2 + 16);
        if (!v15 || (*(unsigned char *)(v15 + 10) & 0x20) != 0) {
          goto LABEL_36;
        }
        double v13 = luaT_gettm(v15, 5, *(void *)(*(void *)(a1 + 24) + 288));
        if (v13) {
          goto LABEL_39;
        }
        uint64_t v14 = *v3;
LABEL_36:
        uint64_t result = *(void *)(v14 + 16);
        if (!result) {
          return result;
        }
LABEL_37:
        if ((*(unsigned char *)(result + 10) & 0x20) != 0) {
          return 0;
        }
        uint64_t result = (uint64_t)luaT_gettm(result, 5, *(void *)(*(void *)(a1 + 24) + 288));
        double v13 = (uint64_t *)result;
        if (result)
        {
LABEL_39:
          luaT_callTM(a1, v13, a2, v3, *(void *)(a1 + 16), 1);
          uint64_t v16 = *(_DWORD **)(a1 + 16);
          uint64_t result = v16[2];
          if (result) {
            uint64_t result = result != 1 || *v16 != 0;
          }
        }
        break;
      case 0x14:
        uint64_t v17 = *(void *)a2;
        uint64_t v18 = *a3;
        return luaS_eqlngstr(v17, v18);
      default:
        return *(void *)a2 == *a3;
    }
  }
  else
  {
    if ((v5 & 0xF) != 3 || (v6 & 0xF) != 3) {
      return 0;
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    if (v5 == 19)
    {
      uint64_t v20 = *(void *)a2;
    }
    else
    {
      uint64_t result = luaV_tointeger(a2, &v20);
      if (!result) {
        return result;
      }
      int v6 = *((_DWORD *)v3 + 2);
    }
    if (v6 == 19) {
      return v20 == *v3;
    }
    uint64_t result = luaV_tointeger(v3, &v19);
    uint64_t v3 = &v19;
    if (result) {
      return v20 == *v3;
    }
  }
  return result;
}

uint64_t luaV_concat(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (void *)result;
  uint64_t v9 = *(void *)(result + 16);
  do
  {
    uint64_t v10 = a2;
    uint64_t v11 = (_DWORD *)(v9 - 32);
    if ((*(_DWORD *)(v9 - 24) & 0xFu) - 3 > 1)
    {
LABEL_10:
      uint64_t result = luaT_trybinTM(v8, (_DWORD *)(v9 - 32), (_DWORD *)(v9 - 16), (_OWORD *)(v9 - 32), 0x16u);
LABEL_11:
      LODWORD(v15) = 2;
      goto LABEL_36;
    }
    uint64_t v12 = v9 - 16;
    int v13 = *(_DWORD *)(v9 - 8);
    if ((v13 & 0xF) != 4)
    {
      if ((v13 & 0xF) != 3) {
        goto LABEL_10;
      }
      uint64_t result = luaO_tostring((uint64_t)v8, v9 - 16, a3, a4, a5, a6, a7, a8);
      int v13 = *(_DWORD *)(v9 - 8);
    }
    if (v13 == 68)
    {
      int v14 = *(_DWORD *)(v9 - 24);
      if (!*(unsigned char *)(*(void *)(v9 - 16) + 11))
      {
        if ((*(_DWORD *)(v9 - 24) & 0xF) == 3) {
          uint64_t result = luaO_tostring((uint64_t)v8, v9 - 32, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_11;
      }
    }
    else
    {
      int v14 = *(_DWORD *)(v9 - 24);
    }
    if (v14 == 68 && !*(unsigned char *)(*(void *)v11 + 11))
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      goto LABEL_11;
    }
    uint64_t v16 = *(void *)v12;
    if (*(unsigned char *)(*(void *)v12 + 8) == 4) {
      unint64_t v17 = *(unsigned __int8 *)(v16 + 11);
    }
    else {
      unint64_t v17 = *(void *)(v16 + 16);
    }
    uint64_t v15 = 1;
    if ((int)v10 >= 2)
    {
      do
      {
        if ((v11[2] & 0xF) != 4)
        {
          if ((v11[2] & 0xF) != 3) {
            goto LABEL_30;
          }
          luaO_tostring((uint64_t)v8, (uint64_t)v11, a3, a4, a5, a6, a7, a8);
        }
        uint64_t v18 = *(void *)v11;
        if (*(unsigned char *)(*(void *)v11 + 8) == 4) {
          unint64_t v19 = *(unsigned __int8 *)(v18 + 11);
        }
        else {
          unint64_t v19 = *(void *)(v18 + 16);
        }
        if (v19 >= (v17 ^ 0x7FFFFFFFFFFFFFFFLL)) {
          luaG_runerror(v8, "string length overflow");
        }
        v11 -= 4;
        v17 += v19;
        ++v15;
      }
      while (v10 != v15);
      LODWORD(v15) = v10;
    }
LABEL_30:
    uint64_t v20 = (char *)luaZ_openspace((uint64_t)v8, (uint64_t *)(v8[3] + 176), v17);
    size_t v21 = 0;
    uint64_t v22 = (int)v15 + 1;
    uint64_t v23 = v9 - 16 * (int)v15;
    do
    {
      uint64_t v24 = *(void *)v23;
      if (*(unsigned char *)(*(void *)v23 + 8) == 4) {
        size_t v25 = *(unsigned __int8 *)(v24 + 11);
      }
      else {
        size_t v25 = *(void *)(v24 + 16);
      }
      cstdlib_memcpy(&v20[v21], (const void *)(v24 + 24), v25);
      v21 += v25;
      --v22;
      v23 += 16;
    }
    while (v22 > 1);
    uint64_t v26 = v9 - 16 * v15;
    uint64_t result = luaS_newlstr((uint64_t)v8, v20, v21);
    *(void *)uint64_t v26 = result;
    *(_DWORD *)(v26 + 8) = *(unsigned __int8 *)(result + 8) | 0x40;
LABEL_36:
    a2 = v10 - (v15 - 1);
    uint64_t v9 = v8[2] - 16 * ((int)v15 - 1);
    void v8[2] = v9;
  }
  while (a2 > 1);
  return result;
}

uint64_t luaV_objlen(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v5 = a3[2] & 0x3F;
  if (v5 == 4)
  {
    uint64_t v10 = *(unsigned __int8 *)(*(void *)a3 + 11);
    goto LABEL_10;
  }
  if (v5 == 20)
  {
    uint64_t v10 = *(void *)(*(void *)a3 + 16);
    goto LABEL_10;
  }
  uint64_t v6 = result;
  if (v5 == 5)
  {
    uint64_t v7 = *(void *)a3;
    uint64_t v8 = *(void *)(*(void *)a3 + 40);
    if (!v8
      || (*(unsigned char *)(v8 + 10) & 0x10) != 0
      || (uint64_t v9 = luaT_gettm(v8, 4, *(void *)(*(void *)(v6 + 24) + 280))) == 0)
    {
      uint64_t result = luaH_getn(v7);
      uint64_t v10 = (int)result;
LABEL_10:
      *(void *)a2 = v10;
      *(_DWORD *)(a2 + 8) = 19;
      return result;
    }
  }
  else
  {
    uint64_t v9 = luaT_gettmbyobj(result, a3, 4u);
    if (!*((_DWORD *)v9 + 2)) {
      luaG_typeerror(v6, (uint64_t)a3, "get length of");
    }
  }

  return luaT_callTM(v6, v9, a3, a3, a2, 1);
}

uint64_t luaV_div(void *a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)(a3 + 1) > 1)
  {
    uint64_t result = a2 / a3;
    if ((a3 ^ a2) < 0) {
      result -= a2 != result * a3;
    }
  }
  else
  {
    if (!a3) {
      luaG_runerror(a1, "attempt to divide by zero");
    }
    return -a2;
  }
  return result;
}

uint64_t luaV_mod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)(a3 + 1) > 1)
  {
    if (a2 % a3) {
      return a2 % a3 + (a3 & ((a3 ^ a2) >> 63));
    }
  }
  else if (!a3)
  {
    luaG_runerror(a1, "attempt to perform 'n%%0'", v3, v4);
    return 0;
  }
  return 0;
}

unint64_t luaV_shiftl(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 << a2;
  if ((unint64_t)a2 > 0x3F) {
    uint64_t v2 = 0;
  }
  unint64_t v3 = a1 >> -(char)a2;
  if ((unint64_t)a2 < 0xFFFFFFFFFFFFFFC1) {
    unint64_t v3 = 0;
  }
  if (a2 < 0) {
    return v3;
  }
  else {
    return v2;
  }
}

uint64_t luaV_finishOp(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(result + 32);
  unint64_t v9 = *(unsigned int *)(*(void *)(v8 + 40) - 4);
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(v8 + 32);
  switch(v9 & 0x3F)
  {
    case 6uLL:
    case 7uLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1CuLL:
      uint64_t v12 = (_OWORD *)(*(void *)(result + 16) - 16);
      *(void *)(result + 16) = v12;
      *(_OWORD *)(v11 + 16 * (v9 >> 6)) = *v12;
      return result;
    case 0x1DuLL:
      uint64_t v17 = *(void *)(result + 16);
      unint64_t v18 = (v17 - 32 - v11 - ((v9 >> 19) & 0x1FF0)) >> 4;
      *(_OWORD *)(v17 - 48) = *(_OWORD *)(v17 - 16);
      if ((int)v18 >= 2)
      {
        *(void *)(result + 16) = v17 - 32;
        uint64_t result = luaV_concat(result, v18, a3, a4, a5, a6, a7, a8);
      }
      *(_OWORD *)(*(void *)(v8 + 32) + 16 * (v9 >> 6)) = *(_OWORD *)(*(void *)(v10 + 16) - 16);
      goto LABEL_11;
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
      uint64_t v13 = *(void *)(result + 16);
      int v14 = (_DWORD *)(v13 - 16);
      int v15 = *(_DWORD *)(v13 - 8);
      if (v15) {
        int v16 = v15 == 1 && *v14 == 0;
      }
      else {
        int v16 = 1;
      }
      *(void *)(result + 16) = v14;
      int v19 = *(char *)(v8 + 66);
      if (v19 < 0) {
        *(unsigned char *)(v8 + 66) = v19 ^ 0x80;
      }
      else {
        v16 ^= 1u;
      }
      if (v16 != (v9 >> 6)) {
        *(void *)(v8 + 40) += 4;
      }
      return result;
    case 0x24uLL:
      if ((v9 & 0x7FC000) != 0) {
        goto LABEL_11;
      }
      return result;
    case 0x29uLL:
LABEL_11:
      *(void *)(v10 + 16) = *(void *)(v8 + 8);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t luaV_execute(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 32);
LABEL_2:
  uint64_t v3 = **v2;
  uint64_t v4 = *(void *)(*(void *)(v3 + 24) + 48);
  unint64_t v5 = (unint64_t)v2[4];
  uint64_t v162 = v3;
  uint64_t v163 = v3 + 32;
  while (2)
  {
    uint64_t v6 = (unsigned int *)v2[5];
    v2[5] = (uint64_t *)(v6 + 1);
    unint64_t v7 = *v6;
    char v8 = *(unsigned char *)(a1 + 200);
    if ((v8 & 0xC) != 0)
    {
      int v9 = *(_DWORD *)(a1 + 192) - 1;
      *(_DWORD *)(a1 + 192) = v9;
      if ((v8 & 4) != 0 || !v9)
      {
        luaG_traceexec(a1);
        unint64_t v5 = (unint64_t)v2[4];
      }
    }
    uint64_t v10 = (v7 >> 6);
    unint64_t v11 = v5 + 16 * v10;
    switch(v7 & 0x3F)
    {
      case 0uLL:
        *(_OWORD *)unint64_t v11 = *(_OWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        continue;
      case 1uLL:
        unint64_t v12 = (v7 >> 10) & 0x3FFFF0;
        goto LABEL_11;
      case 2uLL:
        uint64_t v13 = (unsigned int *)v2[5];
        v2[5] = (uint64_t *)(v13 + 1);
        unint64_t v12 = ((unint64_t)*v13 >> 2) & 0x3FFFFFF0;
LABEL_11:
        *(_OWORD *)unint64_t v11 = *(_OWORD *)(v4 + v12);
        continue;
      case 3uLL:
        *(_DWORD *)unint64_t v11 = v7 >> 23;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 1;
        if ((v7 & 0x7FC000) == 0) {
          continue;
        }
        goto LABEL_332;
      case 4uLL:
        unsigned int v14 = (v7 >> 23) + 1;
        uint64_t v15 = (16 * v10) | 8;
        do
        {
          *(_DWORD *)(v5 + v15) = 0;
          v15 += 16;
          --v14;
        }
        while (v14);
        continue;
      case 5uLL:
        *(_OWORD *)unint64_t v11 = *(_OWORD *)**(void **)(v162 + ((v7 >> 20) & 0xFF8) + 32);
        continue;
      case 6uLL:
        int v16 = **(_OWORD ***)(v162 + ((v7 >> 20) & 0xFF8) + 32);
        goto LABEL_44;
      case 7uLL:
        int v16 = (_OWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        goto LABEL_44;
      case 8uLL:
        uint64_t v17 = **(void **)(v162 + 8 * v10 + 32);
        if ((v7 & 0x80000000) == 0) {
          unint64_t v18 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          unint64_t v18 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          int v19 = (unsigned char *)(v4 + 16 * (v7 >> 14));
        }
        else {
          int v19 = (unsigned char *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        uint64_t v20 = a1;
        goto LABEL_37;
      case 9uLL:
        size_t v21 = *(uint64_t ***)(v162 + ((v7 >> 20) & 0xFF8) + 32);
        *(_OWORD *)*size_t v21 = *(_OWORD *)v11;
        if (((*v21)[1] & 0x40) != 0 && *v21 == (uint64_t *)(v21 + 2)) {
          luaC_upvalbarrier_(a1, v21);
        }
        continue;
      case 0xAuLL:
        if ((v7 & 0x80000000) == 0) {
          unint64_t v18 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          unint64_t v18 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          int v19 = (unsigned char *)(v4 + 16 * (v7 >> 14));
        }
        else {
          int v19 = (unsigned char *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        uint64_t v20 = a1;
        uint64_t v17 = v5 + 16 * (v7 >> 6);
LABEL_37:
        luaV_settable(v20, v17, v18, v19);
        goto LABEL_375;
      case 0xBuLL:
        uint64_t v22 = luaH_new(a1);
        *(void *)unint64_t v11 = v22;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 69;
        uint64_t v23 = v7 >> 23;
        if (v23) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = ((v7 >> 14) & 0x1FF) == 0;
        }
        if (!v24)
        {
          unsigned int v25 = luaO_fb2int(v23);
          int v26 = luaO_fb2int((v7 >> 14) & 0x1FF);
          luaH_resize(a1, v22, v25, v26);
        }
        goto LABEL_257;
      case 0xCuLL:
        int v16 = (_OWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        *(_OWORD *)(v11 + 16) = *v16;
LABEL_44:
        if ((v7 & 0x400000) != 0) {
          int v27 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          int v27 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        luaV_gettable(a1, (uint64_t)v16, v27, (_OWORD *)(v5 + 16 * (v7 >> 6)));
        goto LABEL_375;
      case 0xDuLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v28 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v28 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          uint64_t v29 = (double *)(v4 + 16 * (v7 >> 14));
        }
        else {
          uint64_t v29 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        int v30 = *((_DWORD *)v28 + 2);
        if (v30 == 3)
        {
          double v167 = *(double *)v28;
        }
        else
        {
          if (v30 == 19 && *((_DWORD *)v29 + 2) == 19)
          {
            unint64_t v31 = *(void *)v29 + *v28;
            goto LABEL_321;
          }
          if (!luaV_tonumber_(v28, &v167)) {
            goto LABEL_365;
          }
        }
        if (*((_DWORD *)v29 + 2) == 3)
        {
          v144 = v29;
LABEL_359:
          double v133 = v167 + *v144;
          goto LABEL_364;
        }
        v144 = (double *)&v166;
        if (luaV_tonumber_(v29, (double *)&v166)) {
          goto LABEL_359;
        }
LABEL_365:
        uint64_t v112 = a1;
        uint64_t v38 = v28;
        uint64_t v39 = (uint64_t *)v29;
        unint64_t v113 = v5 + 16 * v10;
        uint64_t v114 = 6;
        goto LABEL_374;
      case 0xEuLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v32 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v32 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          int v33 = (double *)(v4 + 16 * (v7 >> 14));
        }
        else {
          int v33 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        int v34 = *((_DWORD *)v32 + 2);
        if (v34 == 3)
        {
          double v167 = *(double *)v32;
        }
        else
        {
          if (v34 == 19 && *((_DWORD *)v33 + 2) == 19)
          {
            unint64_t v31 = *v32 - *(void *)v33;
            goto LABEL_321;
          }
          if (!luaV_tonumber_(v32, &v167)) {
            goto LABEL_366;
          }
        }
        if (*((_DWORD *)v33 + 2) == 3)
        {
          v145 = v33;
LABEL_361:
          double v133 = v167 - *v145;
          goto LABEL_364;
        }
        v145 = (double *)&v166;
        if (luaV_tonumber_(v33, (double *)&v166)) {
          goto LABEL_361;
        }
LABEL_366:
        uint64_t v112 = a1;
        uint64_t v38 = v32;
        uint64_t v39 = (uint64_t *)v33;
        unint64_t v113 = v5 + 16 * v10;
        uint64_t v114 = 7;
        goto LABEL_374;
      case 0xFuLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v35 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v35 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          int v36 = (double *)(v4 + 16 * (v7 >> 14));
        }
        else {
          int v36 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        int v37 = *((_DWORD *)v35 + 2);
        if (v37 == 3)
        {
          double v167 = *(double *)v35;
        }
        else
        {
          if (v37 == 19 && *((_DWORD *)v36 + 2) == 19)
          {
            unint64_t v31 = *(void *)v36 * *v35;
            goto LABEL_321;
          }
          if (!luaV_tonumber_(v35, &v167)) {
            goto LABEL_367;
          }
        }
        if (*((_DWORD *)v36 + 2) == 3)
        {
          v146 = v36;
LABEL_363:
          double v133 = v167 * *v146;
          goto LABEL_364;
        }
        v146 = (double *)&v166;
        if (luaV_tonumber_(v36, (double *)&v166)) {
          goto LABEL_363;
        }
LABEL_367:
        uint64_t v112 = a1;
        uint64_t v38 = v35;
        uint64_t v39 = (uint64_t *)v36;
        unint64_t v113 = v5 + 16 * v10;
        uint64_t v114 = 8;
LABEL_374:
        luaT_trybinTM(v112, v38, v39, v113, v114);
LABEL_375:
        unint64_t v5 = (unint64_t)v2[4];
        continue;
      case 0x10uLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v38 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v38 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          uint64_t v39 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          uint64_t v39 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        if (*((_DWORD *)v38 + 2) == 19 && *((_DWORD *)v39 + 2) == 19)
        {
          uint64_t v40 = luaV_mod(a1, *v38, *v39);
          goto LABEL_104;
        }
        uint64_t v112 = a1;
        unint64_t v113 = v5 + 16 * (v7 >> 6);
        uint64_t v114 = 9;
        goto LABEL_374;
      case 0x12uLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v41 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v41 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          long long v42 = (double *)(v4 + 16 * (v7 >> 14));
        }
        else {
          long long v42 = (double *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        if (*((_DWORD *)v41 + 2) == 3)
        {
          double v167 = *(double *)v41;
        }
        else if (!luaV_tonumber_(v41, &v167))
        {
          goto LABEL_337;
        }
        if (*((_DWORD *)v42 + 2) == 3)
        {
          v121 = v42;
LABEL_298:
          double v133 = v167 / *v121;
          goto LABEL_364;
        }
        v121 = (double *)&v166;
        if (luaV_tonumber_(v42, (double *)&v166)) {
          goto LABEL_298;
        }
LABEL_337:
        uint64_t v112 = a1;
        uint64_t v38 = v41;
        uint64_t v39 = (uint64_t *)v42;
        unint64_t v113 = v5 + 16 * v10;
        uint64_t v114 = 11;
        goto LABEL_374;
      case 0x13uLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v38 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v38 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          uint64_t v39 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          uint64_t v39 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        if (*((_DWORD *)v38 + 2) != 19 || *((_DWORD *)v39 + 2) != 19)
        {
          uint64_t v112 = a1;
          unint64_t v113 = v5 + 16 * (v7 >> 6);
          uint64_t v114 = 12;
          goto LABEL_374;
        }
        uint64_t v40 = luaV_div(a1, *v38, *v39);
LABEL_104:
        *(void *)unint64_t v11 = v40;
        goto LABEL_322;
      case 0x14uLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v43 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v43 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          uint64_t v44 = (unint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          uint64_t v44 = (unint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        if (*((_DWORD *)v43 + 2) == 19)
        {
          double v167 = *(double *)v43;
        }
        else if (!luaV_tointeger(v43, &v167))
        {
          goto LABEL_338;
        }
        if (*((_DWORD *)v44 + 2) == 19)
        {
          uint64_t v122 = v44;
LABEL_300:
          unint64_t v31 = *v122 & *(void *)&v167;
          goto LABEL_321;
        }
        uint64_t v122 = &v166;
        if (luaV_tointeger(v44, &v166)) {
          goto LABEL_300;
        }
LABEL_338:
        uint64_t v112 = a1;
        uint64_t v38 = v43;
        uint64_t v39 = (uint64_t *)v44;
        unint64_t v113 = v5 + 16 * v10;
        uint64_t v114 = 13;
        goto LABEL_374;
      case 0x15uLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v45 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          uint64_t v45 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          uint64_t v46 = (unint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          uint64_t v46 = (unint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        if (*((_DWORD *)v45 + 2) == 19)
        {
          double v167 = *(double *)v45;
        }
        else if (!luaV_tointeger(v45, &v167))
        {
          goto LABEL_339;
        }
        if (*((_DWORD *)v46 + 2) == 19)
        {
          v123 = v46;
LABEL_302:
          unint64_t v31 = *v123 | *(void *)&v167;
          goto LABEL_321;
        }
        v123 = &v166;
        if (luaV_tointeger(v46, &v166)) {
          goto LABEL_302;
        }
LABEL_339:
        uint64_t v112 = a1;
        uint64_t v38 = v45;
        uint64_t v39 = (uint64_t *)v46;
        unint64_t v113 = v5 + 16 * v10;
        uint64_t v114 = 14;
        goto LABEL_374;
      case 0x16uLL:
        if ((v7 & 0x80000000) == 0) {
          long long v47 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          long long v47 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          long long v48 = (unint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          long long v48 = (unint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        if (*((_DWORD *)v47 + 2) == 19)
        {
          double v167 = *(double *)v47;
        }
        else if (!luaV_tointeger(v47, &v167))
        {
          goto LABEL_340;
        }
        if (*((_DWORD *)v48 + 2) == 19)
        {
          v124 = v48;
LABEL_304:
          unint64_t v31 = *v124 ^ *(void *)&v167;
          goto LABEL_321;
        }
        v124 = &v166;
        if (luaV_tointeger(v48, &v166)) {
          goto LABEL_304;
        }
LABEL_340:
        uint64_t v112 = a1;
        uint64_t v38 = v47;
        uint64_t v39 = (uint64_t *)v48;
        unint64_t v113 = v5 + 16 * v10;
        uint64_t v114 = 15;
        goto LABEL_374;
      case 0x17uLL:
        if ((v7 & 0x80000000) == 0) {
          long long v49 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          long long v49 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          long long v50 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          long long v50 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        if (*((_DWORD *)v49 + 2) == 19)
        {
          double v167 = *(double *)v49;
        }
        else if (!luaV_tointeger(v49, &v167))
        {
          goto LABEL_341;
        }
        if (*((_DWORD *)v50 + 2) == 19)
        {
          v125 = v50;
        }
        else
        {
          v125 = (uint64_t *)&v166;
          if (!luaV_tointeger(v50, &v166))
          {
LABEL_341:
            uint64_t v112 = a1;
            uint64_t v38 = v49;
            uint64_t v39 = v50;
            unint64_t v113 = v5 + 16 * v10;
            uint64_t v114 = 16;
            goto LABEL_374;
          }
        }
        uint64_t v134 = *v125;
        unint64_t v135 = *(void *)&v167 << *v125;
        if ((unint64_t)*v125 > 0x3F) {
          unint64_t v135 = 0;
        }
        unint64_t v136 = *(void *)&v167 >> -(char)v134;
        if ((unint64_t)v134 < 0xFFFFFFFFFFFFFFC1) {
          unint64_t v136 = 0;
        }
        if (v134 < 0) {
          unint64_t v31 = v136;
        }
        else {
          unint64_t v31 = v135;
        }
        goto LABEL_321;
      case 0x18uLL:
        if ((v7 & 0x80000000) == 0) {
          long long v51 = (uint64_t *)(v5 + 16 * (v7 >> 23));
        }
        else {
          long long v51 = (uint64_t *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          long long v52 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          long long v52 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        unint64_t v166 = 0;
        double v167 = 0.0;
        if (*((_DWORD *)v51 + 2) == 19)
        {
          double v167 = *(double *)v51;
        }
        else if (!luaV_tointeger(v51, &v167))
        {
          goto LABEL_342;
        }
        if (*((_DWORD *)v52 + 2) == 19)
        {
          v126 = v52;
        }
        else
        {
          v126 = (uint64_t *)&v166;
          if (!luaV_tointeger(v52, &v166))
          {
LABEL_342:
            uint64_t v112 = a1;
            uint64_t v38 = v51;
            uint64_t v39 = v52;
            unint64_t v113 = v5 + 16 * v10;
            uint64_t v114 = 17;
            goto LABEL_374;
          }
        }
        uint64_t v137 = *v126;
        unint64_t v138 = -*v126;
        unint64_t v139 = *(void *)&v167 << v138;
        if (v138 > 0x3F) {
          unint64_t v139 = 0;
        }
        unint64_t v140 = *(void *)&v167 >> v137;
        if (v138 < 0xFFFFFFFFFFFFFFC1) {
          unint64_t v140 = 0;
        }
        if (v137 >= 1) {
          unint64_t v31 = v140;
        }
        else {
          unint64_t v31 = v139;
        }
LABEL_321:
        *(void *)unint64_t v11 = v31;
LABEL_322:
        *(_DWORD *)(v5 + 16 * v10 + 8) = 19;
        continue;
      case 0x19uLL:
        unint64_t v53 = v5 + ((v7 >> 19) & 0x1FF0);
        double v167 = 0.0;
        int v54 = *(_DWORD *)(v53 + 8);
        if (v54 == 3)
        {
          v147 = (double *)(v5 + ((v7 >> 19) & 0x1FF0));
        }
        else
        {
          if (v54 == 19)
          {
            unint64_t v31 = -*(void *)v53;
            goto LABEL_321;
          }
          v147 = &v167;
          if (!luaV_tonumber_((_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0)), &v167))
          {
            uint64_t v112 = a1;
            uint64_t v38 = (uint64_t *)(v5 + ((v7 >> 19) & 0x1FF0));
            uint64_t v39 = v38;
            unint64_t v113 = v5 + 16 * (v7 >> 6);
            uint64_t v114 = 18;
            goto LABEL_374;
          }
        }
        double v133 = -*v147;
LABEL_364:
        *(double *)unint64_t v11 = v133;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 3;
        continue;
      case 0x1AuLL:
        double v167 = 0.0;
        if (*(_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0) + 8) == 19)
        {
          long long v55 = (double *)(v5 + ((v7 >> 19) & 0x1FF0));
LABEL_285:
          unint64_t v31 = ~*(void *)v55;
          goto LABEL_321;
        }
        long long v55 = &v167;
        if (luaV_tointeger((_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0)), &v167)) {
          goto LABEL_285;
        }
        uint64_t v112 = a1;
        uint64_t v38 = (uint64_t *)(v5 + ((v7 >> 19) & 0x1FF0));
        uint64_t v39 = v38;
        unint64_t v113 = v5 + 16 * (v7 >> 6);
        uint64_t v114 = 19;
        goto LABEL_374;
      case 0x1BuLL:
        int v56 = *(_DWORD *)(v5 + 16 * (v7 >> 23) + 8);
        if (v56) {
          BOOL v57 = v56 == 1 && *(_DWORD *)(v5 + 16 * (v7 >> 23)) == 0;
        }
        else {
          BOOL v57 = 1;
        }
        *(_DWORD *)unint64_t v11 = v57;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 1;
        continue;
      case 0x1CuLL:
        luaV_objlen(a1, v5 + 16 * (v7 >> 6), (_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0)));
        goto LABEL_375;
      case 0x1DuLL:
        *(void *)(a1 + 16) = v5 + 16 * ((v7 >> 14) & 0x1FF) + 16;
        luaV_concat(a1);
        long long v58 = v2[4];
        long long v59 = &v58[2 * v10];
        long long v60 = &v58[2 * (v7 >> 23)];
        *(_OWORD *)long long v59 = *(_OWORD *)v60;
        if (*(uint64_t *)(*(void *)(a1 + 24) + 24) <= 0)
        {
          long long v62 = v2[1];
        }
        else
        {
          long long v61 = v59 + 2;
          if (v10 >= (v7 >> 23)) {
            long long v60 = v61;
          }
          *(void *)(a1 + 16) = v60;
          luaC_step(a1);
          long long v62 = v2[1];
          *(void *)(a1 + 16) = v62;
        }
        unint64_t v5 = (unint64_t)v2[4];
        *(void *)(a1 + 16) = v62;
        continue;
      case 0x1EuLL:
        if (v10) {
          luaF_close(a1, (unint64_t)&v2[4][2 * v10 - 2]);
        }
        goto LABEL_398;
      case 0x1FuLL:
        if ((v7 & 0x80000000) == 0) {
          long long v63 = (_DWORD *)(v5 + 16 * (v7 >> 23));
        }
        else {
          long long v63 = (_DWORD *)(v4 + 16 * (v7 >> 23));
        }
        if ((v7 & 0x400000) != 0) {
          long long v64 = (uint64_t *)(v4 + 16 * (v7 >> 14));
        }
        else {
          long long v64 = (uint64_t *)(v5 + 16 * ((v7 >> 14) & 0x1FF));
        }
        int v65 = luaV_equalobj(a1, v63, v64);
        goto LABEL_181;
      case 0x20uLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v66 = v5 + 16 * (v7 >> 23);
        }
        else {
          uint64_t v66 = v4 + 16 * (v7 >> 23);
        }
        if ((v7 & 0x400000) != 0) {
          uint64_t v67 = v4 + 16 * (v7 >> 14);
        }
        else {
          uint64_t v67 = v5 + 16 * ((v7 >> 14) & 0x1FF);
        }
        int v65 = luaV_lessthan(a1, v66, v67);
        goto LABEL_181;
      case 0x21uLL:
        if ((v7 & 0x80000000) == 0) {
          uint64_t v68 = v5 + 16 * (v7 >> 23);
        }
        else {
          uint64_t v68 = v4 + 16 * (v7 >> 23);
        }
        if ((v7 & 0x400000) != 0) {
          uint64_t v69 = v4 + 16 * (v7 >> 14);
        }
        else {
          uint64_t v69 = v5 + 16 * ((v7 >> 14) & 0x1FF);
        }
        int v65 = luaV_lessequal(a1, v68, v69);
LABEL_181:
        uint64_t v70 = (unsigned int *)v2[5];
        if (v65 == v10)
        {
          unint64_t v71 = *v70;
          if ((v71 >> 6))
          {
            luaF_close(a1, (unint64_t)&v2[4][2 * (v71 >> 6) - 2]);
            uint64_t v70 = (unsigned int *)v2[5];
          }
          uint64_t v72 = &v70[(v71 >> 14) - 131070];
        }
        else
        {
          uint64_t v72 = v70 + 1;
        }
        v2[5] = (uint64_t *)v72;
        goto LABEL_375;
      case 0x22uLL:
        int v73 = *(_DWORD *)(v5 + 16 * v10 + 8);
        if ((v7 & 0x7FC000) != 0)
        {
          if (v73 && (v73 != 1 || *(_DWORD *)v11)) {
            goto LABEL_334;
          }
          goto LABEL_332;
        }
        if (v73 && (v73 != 1 || *(_DWORD *)v11)) {
          goto LABEL_332;
        }
        goto LABEL_334;
      case 0x23uLL:
        long long v74 = (_DWORD *)(v5 + ((v7 >> 19) & 0x1FF0));
        int v75 = v74[2];
        if ((v7 & 0x7FC000) != 0)
        {
          if (!v75 || v75 == 1 && !*v74) {
            goto LABEL_332;
          }
        }
        else if (v75 && (v75 != 1 || *v74))
        {
LABEL_332:
          uint64_t v141 = (uint64_t)v2[5] + 4;
          goto LABEL_399;
        }
        *(_OWORD *)unint64_t v11 = *(_OWORD *)v74;
LABEL_334:
        v142 = (unsigned int *)v2[5];
        unint64_t v143 = *v142;
        if ((v143 >> 6))
        {
          luaF_close(a1, (unint64_t)&v2[4][2 * (v143 >> 6) - 2]);
          v142 = (unsigned int *)v2[5];
        }
        uint64_t v141 = (uint64_t)&v142[(v143 >> 14) - 131070];
        goto LABEL_399;
      case 0x24uLL:
        if (v7 >= 0x800000) {
          *(void *)(a1 + 16) = v11 + ((v7 >> 19) & 0x1FF0);
        }
        if (!luaD_precall(a1, (char *)v11, ((v7 >> 14) & 0x1FF) - 1))
        {
          uint64_t v2 = *(uint64_t ***)(a1 + 32);
          *((unsigned char *)v2 + 66) |= 8u;
          goto LABEL_2;
        }
        if (((v7 >> 14) & 0x1FF) != 0) {
          goto LABEL_259;
        }
        goto LABEL_375;
      case 0x25uLL:
        if (v7 >= 0x800000) {
          *(void *)(a1 + 16) = v11 + ((v7 >> 19) & 0x1FF0);
        }
        if (luaD_precall(a1, (char *)(v5 + 16 * (v7 >> 6)), -1)) {
          goto LABEL_375;
        }
        v151 = *(long long ***)(a1 + 32);
        uint64_t v2 = (uint64_t **)v151[2];
        v152 = *v151;
        v153 = *v2;
        v154 = v151[4];
        uint64_t v155 = *(unsigned __int8 *)(*(void *)(*(void *)*v151 + 24) + 10);
        if (*(int *)(*(void *)(v162 + 24) + 32) >= 1) {
          luaF_close(a1, (unint64_t)v2[4]);
        }
        unint64_t v156 = (unint64_t)&v154[v155];
        if ((unint64_t)v152 < v156)
        {
          v157 = v152;
          v158 = v153;
          do
          {
            long long v159 = *v157++;
            *(_OWORD *)v158 = v159;
            v158 += 2;
          }
          while ((unint64_t)v157 < v156);
        }
        v2[4] = (uint64_t *)((char *)v153 + (char *)v151[4] - (char *)v152);
        v160 = (char *)v153 + *(void *)(a1 + 16) - (void)v152;
        *(void *)(a1 + 16) = v160;
        v2[1] = (uint64_t *)v160;
        v2[5] = (uint64_t *)v151[5];
        *((unsigned char *)v2 + 66) |= 0x20u;
        *(void *)(a1 + 32) = v2;
        goto LABEL_2;
      case 0x26uLL:
        if (*(int *)(*(void *)(v162 + 24) + 32) >= 1) {
          luaF_close(a1, v5);
        }
        if (v7 >= 0x800000) {
          LODWORD(v150) = (v7 >> 23) - 1;
        }
        else {
          uint64_t v150 = (uint64_t)(*(void *)(a1 + 16) - v11) >> 4;
        }
        uint64_t result = luaD_poscall(a1, (char *)(v5 + 16 * (v7 >> 6)), v150);
        if ((*((unsigned char *)v2 + 66) & 8) != 0)
        {
          uint64_t v2 = *(uint64_t ***)(a1 + 32);
          if (result) {
            *(void *)(a1 + 16) = v2[1];
          }
          goto LABEL_2;
        }
        return result;
      case 0x27uLL:
        if (*(_DWORD *)(v5 + 16 * v10 + 8) == 19)
        {
          uint64_t v76 = *(void *)(v11 + 32);
          uint64_t v77 = *(void *)v11 + v76;
          uint64_t v78 = *(void *)(v11 + 16);
          if (v76 < 1)
          {
            if (v78 > v77) {
              continue;
            }
          }
          else if (v77 > v78)
          {
            continue;
          }
          v2[5] = (uint64_t *)((char *)v2[5] + 4 * (int)((v7 >> 14) - 0x1FFFF));
          *(void *)unint64_t v11 = v77;
          *(void *)(v11 + 48) = v77;
          *(_DWORD *)(v11 + 56) = 19;
        }
        else
        {
          double v127 = *(double *)(v11 + 32);
          double v128 = v127 + *(double *)v11;
          double v129 = *(double *)(v11 + 16);
          if (v127 <= 0.0)
          {
            if (v129 > v128) {
              continue;
            }
          }
          else if (v128 > v129)
          {
            continue;
          }
          v2[5] = (uint64_t *)((char *)v2[5] + 4 * (int)((v7 >> 14) - 0x1FFFF));
          *(double *)unint64_t v11 = v128;
          *(double *)(v11 + 48) = v128;
          *(_DWORD *)(v11 + 56) = 3;
        }
        continue;
      case 0x28uLL:
        long long v79 = (double *)(v11 + 32);
        unint64_t v166 = 0;
        unint64_t v80 = v5 + 16 * v10;
        int v82 = *(_DWORD *)(v80 + 8);
        long long v81 = (int *)(v80 + 8);
        if (v82 != 19 || *(_DWORD *)(v11 + 40) != 19) {
          goto LABEL_384;
        }
        double v83 = *v79;
        if (luaV_tointeger((_DWORD *)(v11 + 16), &v166))
        {
          unint64_t v84 = v166;
          goto LABEL_214;
        }
        double v167 = 0.0;
        if (*(_DWORD *)(v11 + 24) == 3)
        {
          v148 = (double *)(v11 + 16);
LABEL_379:
          if (*v148 <= 0.0)
          {
            unint64_t v84 = 0x8000000000000000;
            unint64_t v166 = 0x8000000000000000;
            if ((*(void *)&v83 & 0x8000000000000000) == 0) {
              goto LABEL_383;
            }
          }
          else
          {
            unint64_t v84 = 0x7FFFFFFFFFFFFFFFLL;
            unint64_t v166 = 0x7FFFFFFFFFFFFFFFLL;
            if ((*(void *)&v83 & 0x8000000000000000) != 0)
            {
LABEL_383:
              uint64_t v85 = 0;
              goto LABEL_215;
            }
          }
LABEL_214:
          uint64_t v85 = *(void *)v11;
LABEL_215:
          *(void *)(v11 + 16) = v84;
          int v86 = 19;
          *(_DWORD *)(v11 + 24) = 19;
          *(void *)unint64_t v11 = v85 - *(void *)(v11 + 32);
          goto LABEL_397;
        }
        int v149 = luaV_tonumber_((_DWORD *)(v11 + 16), &v167);
        v148 = &v167;
        if (v149) {
          goto LABEL_379;
        }
LABEL_384:
        double v167 = 0.0;
        double v164 = 0.0;
        uint64_t v165 = 0;
        if (*(_DWORD *)(v11 + 24) == 3)
        {
          uint64_t v165 = *(void *)(v11 + 16);
        }
        else if (!luaV_tonumber_((_DWORD *)(v11 + 16), (double *)&v165))
        {
          luaG_runerror(a1, "'for' limit must be a number");
        }
        *(void *)(v11 + 16) = v165;
        *(_DWORD *)(v11 + 24) = 3;
        if (*(_DWORD *)(v11 + 40) == 3)
        {
          double v164 = *v79;
        }
        else if (!luaV_tonumber_((_DWORD *)(v11 + 32), &v164))
        {
          luaG_runerror(a1, "'for' step must be a number");
        }
        *(double *)(v11 + 32) = v164;
        *(_DWORD *)(v11 + 40) = 3;
        if (*v81 == 3)
        {
          double v167 = *(double *)v11;
        }
        else if (!luaV_tonumber_((_DWORD *)(v5 + 16 * (v7 >> 6)), &v167))
        {
          luaG_runerror(a1, "'for' initial value must be a number");
        }
        *(double *)unint64_t v11 = v167 - v164;
        int v86 = 3;
LABEL_397:
        int *v81 = v86;
LABEL_398:
        uint64_t v141 = (uint64_t)v2[5] + 4 * (int)((v7 >> 14) - 0x1FFFF);
LABEL_399:
        v2[5] = (uint64_t *)v141;
        continue;
      case 0x29uLL:
        long long v87 = *(_OWORD *)(v11 + 32);
        long long v88 = *(_OWORD *)v11;
        *(_OWORD *)(v11 + 64) = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v11 + 80) = v87;
        *(_OWORD *)(v11 + 48) = v88;
        *(void *)(a1 + 16) = v11 + 96;
        luaD_call(a1, v11 + 48, (v7 >> 14) & 0x1FF, 1);
        unint64_t v5 = (unint64_t)v2[4];
        *(void *)(a1 + 16) = v2[1];
        long long v89 = (unsigned int *)v2[5];
        v2[5] = (uint64_t *)(v89 + 1);
        unint64_t v7 = *v89;
        unint64_t v11 = v5 + 16 * (v7 >> 6);
        goto LABEL_217;
      case 0x2AuLL:
LABEL_217:
        if (!*(_DWORD *)(v11 + 24)) {
          continue;
        }
        *(_OWORD *)unint64_t v11 = *(_OWORD *)(v11 + 16);
        goto LABEL_398;
      case 0x2BuLL:
        unsigned int v90 = v7 >> 23;
        if (!(v7 >> 23)) {
          unsigned int v90 = ((*(void *)(a1 + 16) - v11) >> 4) - 1;
        }
        unsigned int v91 = (v7 >> 14) & 0x1FF;
        if (!v91)
        {
          long long v92 = v2[5];
          v2[5] = (uint64_t *)((char *)v92 + 4);
          unsigned int v91 = *(_DWORD *)v92 >> 6;
        }
        uint64_t v93 = *(void *)v11;
        int v94 = 50 * v91;
        unsigned int v95 = v90 + 50 * v91 - 50;
        if (v95 > *(_DWORD *)(v93 + 12)) {
          luaH_resizearray(a1, v93, v95);
        }
        if ((int)v90 >= 1)
        {
          uint64_t v96 = v90;
          long long v97 = (__n128 *)(v5 + 16 * v10 + 16 * v90);
          do
          {
            luaH_setint(a1, v93, (v94 - 50 + v96), v97);
            if ((v97->n128_u8[8] & 0x40) != 0
              && (*(unsigned char *)(v93 + 9) & 4) != 0
              && (*(unsigned char *)(v97->n128_u64[0] + 9) & 3) != 0)
            {
              luaC_barrierback_(a1, v93);
            }
            --v97;
          }
          while (v96-- > 1);
        }
        *(void *)(a1 + 16) = v2[1];
        continue;
      case 0x2CuLL:
        uint64_t v99 = *(void *)(*(void *)(*(void *)(v162 + 24) + 64) + ((v7 >> 11) & 0x1FFFF8));
        uint64_t v100 = *(unsigned int *)(v99 + 16);
        uint64_t v102 = *(void *)(v99 + 88);
        uint64_t v101 = *(void *)(v99 + 96);
        if (!v101) {
          goto LABEL_249;
        }
        if ((int)v100 < 1) {
          goto LABEL_242;
        }
        long long v103 = (void **)(v101 + 32);
        long long v104 = (unsigned __int8 *)(v102 + 9);
        uint64_t v105 = *(unsigned int *)(v99 + 16);
        while (1)
        {
          uint64_t v106 = *v104;
          uint64_t v107 = *(v104 - 1) ? v5 + 16 * v106 : **(void **)(v163 + 8 * v106);
          if (**v103 != v107) {
            break;
          }
          v104 += 16;
          ++v103;
          if (!--v105)
          {
LABEL_242:
            *(void *)unint64_t v11 = v101;
            *(_DWORD *)(v5 + 16 * v10 + 8) = 70;
            goto LABEL_257;
          }
        }
LABEL_249:
        uint64_t v115 = luaF_newLclosure(a1, *(_DWORD *)(v99 + 16));
        uint64_t v116 = v115;
        *(void *)(v115 + 24) = v99;
        *(void *)unint64_t v11 = v115;
        *(_DWORD *)(v5 + 16 * v10 + 8) = 70;
        if ((int)v100 >= 1)
        {
          long long v117 = (uint64_t *)(v115 + 32);
          long long v118 = (unsigned __int8 *)(v102 + 9);
          do
          {
            uint64_t v119 = *v118;
            if (*(v118 - 1)) {
              uint64_t v120 = luaF_findupval((void *)a1, v5 + 16 * v119);
            }
            else {
              uint64_t v120 = *(void *)(v163 + 8 * v119);
            }
            v118 += 16;
            *v117++ = v120;
            ++*(void *)(v120 + 8);
            --v100;
          }
          while (v100);
        }
        if ((*(unsigned char *)(v99 + 9) & 4) == 0) {
          *(void *)(v99 + 96) = v116;
        }
LABEL_257:
        if (*(uint64_t *)(*(void *)(a1 + 24) + 24) >= 1)
        {
          *(void *)(a1 + 16) = v11 + 16;
          luaC_step(a1);
LABEL_259:
          *(void *)(a1 + 16) = v2[1];
        }
        goto LABEL_375;
      case 0x2DuLL:
        unint64_t v108 = (v5 - (unint64_t)*v2) >> 4;
        int v109 = ~*(unsigned __int8 *)(*(void *)(v162 + 24) + 10);
        signed int v110 = v108 + v109;
        if (v7 >> 23)
        {
          signed int v111 = (v7 >> 23) - 1;
        }
        else
        {
          if (v110 >= (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 16)) >> 4) {
            luaD_growstack(a1, v108 + v109);
          }
          unint64_t v5 = (unint64_t)v2[4];
          unint64_t v11 = v5 + 16 * v10;
          *(void *)(a1 + 16) = v11 + 16 * v110;
          signed int v111 = v110;
        }
        if (v111 >= 1)
        {
          uint64_t v130 = 0;
          v131 = (_DWORD *)(v11 + 8);
          uint64_t v132 = -16 * v110;
          do
          {
            if (v130 >= v110) {
              _DWORD *v131 = 0;
            }
            else {
              *(_OWORD *)(v131 - 2) = *(_OWORD *)(v5 + v132);
            }
            ++v130;
            v131 += 4;
            v132 += 16;
          }
          while (v111 != v130);
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t luaZ_fill(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v2 = (unsigned __int8 *)(*(uint64_t (**)(void, void, uint64_t *))(a1 + 16))(*(void *)(a1 + 32), *(void *)(a1 + 24), &v5);
  if (v2) {
    BOOL v3 = v5 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  *(void *)a1 = v5 - 1;
  *(void *)(a1 + 8) = v2 + 1;
  return *v2;
}

uint64_t luaZ_init(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  a2[3] = a4;
  a2[4] = result;
  a2[1] = 0;
  a2[2] = a3;
  *a2 = 0;
  return result;
}

size_t luaZ_read(unint64_t *a1, char *__dst, size_t a3)
{
  size_t v3 = a3;
  if (a3)
  {
    unint64_t v6 = *a1;
    do
    {
      if (v6)
      {
        unint64_t v7 = (const void *)a1[1];
      }
      else
      {
        if (luaZ_fill((uint64_t)a1) == -1) {
          return v3;
        }
        unint64_t v6 = *a1 + 1;
        unint64_t v7 = (const void *)(a1[1] - 1);
        *a1 = v6;
        a1[1] = (unint64_t)v7;
      }
      if (v3 >= v6) {
        size_t v8 = v6;
      }
      else {
        size_t v8 = v3;
      }
      cstdlib_memcpy(__dst, v7, v8);
      unint64_t v6 = *a1 - v8;
      size_t v9 = a1[1] + v8;
      *a1 = v6;
      a1[1] = v9;
      __dst += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return v3;
}

uint64_t luaZ_openspace(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v5 = a2[2];
  uint64_t v6 = *a2;
  if (v5 < a3)
  {
    if (a3 <= 0x20) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v7 = a3;
    }
    uint64_t v6 = luaM_realloc_(a1, v6, v5, v7);
    *a2 = v6;
    a2[2] = v7;
  }
  return v6;
}

uint64_t luaI_snprintf(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *__src, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v190 = *MEMORY[0x263EF8340];
  if (a3 < 1) {
    return 0;
  }
  int v10 = a3;
  uint64_t result = 0;
  int v186 = 0;
  uint64_t v13 = 0;
  v188 = (int *)&a9;
LABEL_3:
  if (*__src == 37)
  {
    int v187 = v10;
    int v19 = __src;
  }
  else
  {
    if (!*__src) {
      goto LABEL_314;
    }
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      int v16 = __src[++v15];
      v14 += 0x100000000;
    }
    while (v16 != 37 && v16 != 0);
    uint64_t v18 = v15 + result;
    int v19 = &__src[v15];
    if ((int)v18 >= v10)
    {
      int v186 = 2;
      int v187 = 0;
      uint64_t result = result;
    }
    else
    {
      int v187 = v10;
      cstdlib_memcpy((void *)(a2 + (int)result), __src, v14 >> 32);
      int v16 = *v19;
      uint64_t result = v18;
    }
    uint64_t v13 = (char *)__src;
    if (!v16) {
      goto LABEL_314;
    }
  }
  LOBYTE(v20) = v19[1];
  if ((_BYTE)v20)
  {
    int v21 = 0;
    int v22 = 0;
    char v23 = 0;
    unsigned __int8 v24 = 0;
    int v25 = 0;
    char v26 = 0;
    int v27 = v19 + 2;
    while (1)
    {
      int v20 = (char)v20;
      if ((char)v20 > 42)
      {
        switch((char)v20)
        {
          case '0':
            int v25 = 1;
            break;
          case '-':
            char v26 = 1;
            break;
          case '+':
            int v21 = 1;
            break;
          default:
LABEL_46:
            if ((char)v20 != 42)
            {
              --v27;
              if (((char)v20 - 48) > 9)
              {
                int v29 = 0;
              }
              else
              {
                int v29 = 0;
                do
                {
                  int v29 = v20 + 10 * v29 - 48;
                  int v80 = (char)*++v27;
                  int v20 = v80;
                }
                while ((v80 - 48) < 0xA);
              }
              goto LABEL_33;
            }
            uint64_t v38 = v188;
            v188 += 2;
            int v39 = *v38;
            if (v39 == 0x80000000) {
              int v40 = 0;
            }
            else {
              int v40 = -v39;
            }
            if (v39 >= 0)
            {
              int v30 = v39;
            }
            else
            {
              char v26 = 1;
              int v30 = v40;
            }
            int v20 = (char)*v27;
LABEL_34:
            if (v20 == 46)
            {
              unint64_t v31 = (char *)(v27 + 1);
              int v20 = (char)v27[1];
              if (v20 == 42)
              {
                uint64_t v32 = v188;
                v188 += 2;
                int v33 = *v32;
                int v34 = (char)v27[2];
                v27 += 2;
                int v20 = v34;
                if (v33 == 0x80000000) {
                  int v35 = -1;
                }
                else {
                  int v35 = -v33;
                }
                if (v33 < 0) {
                  int v33 = v35;
                }
              }
              else
              {
                if ((v20 - 48) > 9)
                {
                  int v36 = 0;
                }
                else
                {
                  int v36 = 0;
                  do
                  {
                    int v36 = v20 + 10 * v36 - 48;
                    int v37 = *++v31;
                    int v20 = v37;
                  }
                  while ((v37 - 48) < 0xA);
                }
                int v33 = v36 & 0x7FFFFFFF;
                int v27 = (unsigned __int8 *)v31;
              }
            }
            else
            {
              int v33 = -1;
            }
            uint64_t v41 = 0;
            long long v42 = &byte_2206E20BD;
            while (v20 != *(v42 - 5))
            {
              ++v41;
              v42 += 6;
              if (v41 == 17) {
                goto LABEL_314;
              }
            }
            char v43 = *(v42 - 2);
            switch(v43)
            {
              case 1:
              case 14:
                char v184 = v26;
                unsigned int v179 = result;
                uint64_t v181 = a2;
                unint64_t v62 = 0x1C1FAuLL >> v41;
                long long v63 = (uint64_t *)v188;
                v188 += 2;
                uint64_t v64 = *v63;
                int v65 = 32 * (v22 != 0);
                if (v21) {
                  int v66 = 43;
                }
                else {
                  int v66 = v65;
                }
                if (v64 >= 0)
                {
                  uint64_t v67 = v64;
                }
                else
                {
                  int v66 = 45;
                  uint64_t v67 = -v64;
                }
                if (v62) {
                  int v68 = 0;
                }
                else {
                  int v68 = v66;
                }
                if (v62) {
                  uint64_t v69 = v64;
                }
                else {
                  uint64_t v69 = v67;
                }
                int v177 = v30;
                int v70 = v30 - (v68 != 0);
                if (v33 > v70) {
                  int v70 = v33;
                }
                if (v25) {
                  int v71 = v70;
                }
                else {
                  int v71 = v33;
                }
                if (v71 < 60)
                {
                  uint64_t v72 = 0;
                  int v73 = 70;
                  long long v74 = v189;
LABEL_205:
                  uint64_t v125 = 0;
                  int v126 = v74 + v73 - 1;
                  double v127 = &aDigits[*(v42 - 1)];
                  unint64_t v128 = *(v42 - 4);
                  if (v71 <= 60) {
                    uint64_t v129 = 60;
                  }
                  else {
                    uint64_t v129 = v71;
                  }
                  unsigned int v130 = v71 - 1;
                  unint64_t v131 = v69;
                  do
                  {
                    v74[v129 + 8 + v125--] = v127[v131 % v128];
                    --v130;
                    BOOL v132 = v131 >= v128;
                    v131 /= v128;
                  }
                  while (v132);
                  double v133 = &v74[v129];
                  if ((int)v125 + v71 < 1)
                  {
                    uint64_t v13 = &v133[v125 + 9];
                  }
                  else
                  {
                    uint64_t v13 = &v133[v125 - v130 + 8];
                    memset(v13, 48, (v125 + v71));
                  }
                  uint64_t result = v179;
                  char v26 = v184;
                  uint64_t v78 = (uint64_t)v72;
                  if (v68) {
                    *--uint64_t v13 = v68;
                  }
                  a2 = v181;
                  int v30 = v177;
                  if (v69 && v23)
                  {
                    int v10 = v187;
                    if (((0xFE5FuLL >> v41) & 1) == 0)
                    {
                      v145 = (char *)&aPrefix + *v42;
                      char v148 = *v145;
                      v146 = v145 + 1;
                      char v147 = v148;
                      do
                      {
                        *--uint64_t v13 = v147;
                        int v149 = *v146++;
                        char v147 = v149;
                      }
                      while (v149);
                    }
                  }
                  else
                  {
                    int v10 = v187;
                  }
                  LODWORD(i) = v126 - v13;
                  goto LABEL_282;
                }
                int v73 = v71 + 10;
                long long v74 = (unsigned char *)luaM_realloc_(a1, 0, 0, (v71 + 10));
                if (v74)
                {
                  uint64_t v72 = v74;
                  goto LABEL_205;
                }
                a2 = v181;
                uint64_t result = v179;
                goto LABEL_314;
              case 2:
              case 3:
              case 4:
                char v183 = v26;
                uint64_t v44 = (double *)v188;
                v188 += 2;
                double v45 = *v44;
                if (v33 >= 0) {
                  int v46 = v33;
                }
                else {
                  int v46 = 6;
                }
                BOOL v47 = v22 == 0;
                uint64_t v48 = !v47;
                char v49 = 32 * v48;
                BOOL v50 = v21 == 0;
                long long v51 = "+Inf";
                if (v50) {
                  long long v51 = "Inf";
                }
                if (!v50)
                {
                  BOOL v47 = 0;
                  uint64_t v48 = 1;
                  char v49 = 43;
                }
                double v52 = -v45;
                if (v45 < 0.0) {
                  uint64_t v13 = "-Inf";
                }
                else {
                  uint64_t v13 = (char *)v51;
                }
                if (v45 < 0.0)
                {
                  BOOL v53 = 0;
                }
                else
                {
                  double v52 = v45;
                  BOOL v53 = v47;
                }
                if (v45 < 0.0) {
                  uint64_t v54 = 1;
                }
                else {
                  uint64_t v54 = v48;
                }
                if (v45 < 0.0) {
                  char v55 = 45;
                }
                else {
                  char v55 = v49;
                }
                BOOL v57 = v41 != 2 && v41 != 12 || v46 <= 0;
                int v58 = !v57;
                int v59 = v46 - v58;
                if (((v46 - v58) & 0xFFF) != 0)
                {
                  unsigned int v60 = (v59 & 0xFFF) + 1;
                  double v61 = 0.5;
                  do
                  {
                    double v61 = v61 * 0.1;
                    --v60;
                  }
                  while (v60 > 1);
                }
                else
                {
                  double v61 = 0.5;
                }
                double v81 = -0.0;
                if (v41 == 9) {
                  double v81 = v61;
                }
                double v82 = v52 + v81;
                if (v52 + v81 <= 0.0)
                {
                  int v96 = 0;
                }
                else
                {
                  double v83 = 1.0;
                  unsigned int v84 = -100;
                  int v85 = -64;
                  int v86 = -8;
                  int v87 = -1;
                  do
                  {
                    double v88 = v83;
                    unsigned int v89 = v85;
                    unsigned int v90 = v86;
                    int v91 = v87;
                    double v83 = v83 * 1.0e100;
                    if (v82 < v83) {
                      break;
                    }
                    v84 += 100;
                    v85 += 100;
                    v86 += 100;
                    v87 += 100;
                  }
                  while (v84 < 0x15F);
                  do
                  {
                    double v92 = v88;
                    unsigned int v93 = v90;
                    int v94 = v91;
                    double v88 = v88 * 1.0e64;
                    if (v82 < v88) {
                      break;
                    }
                    v89 += 64;
                    v90 += 64;
                    v91 += 64;
                  }
                  while (v89 < 0x15F);
                  do
                  {
                    double v95 = v92;
                    int v96 = v94;
                    double v92 = v92 * 100000000.0;
                    if (v82 < v92) {
                      break;
                    }
                    v93 += 8;
                    v94 += 8;
                  }
                  while (v93 < 0x15F);
                  do
                  {
                    double v97 = v95;
                    ++v96;
                    double v95 = v95 * 10.0;
                  }
                  while (v82 >= v95 && v96 < 0x15F);
                  double v82 = v82 / v97;
                  while (v82 < 0.00000001)
                  {
                    double v82 = v82 * 100000000.0;
                    v96 -= 8;
                  }
                  while (v82 < 1.0)
                  {
                    double v82 = v82 * 10.0;
                    --v96;
                  }
                  if (v96 >= 351)
                  {
                    uint64_t v98 = result;
                    int v99 = v30;
                    int v100 = cstdlib_strlen(v13);
                    int v30 = v99;
                    uint64_t v78 = 0;
                    LODWORD(i) = v100 & 0x3FFFFFFF;
                    uint64_t result = v98;
                    int v10 = v187;
                    char v26 = v183;
                    goto LABEL_282;
                  }
                }
                uint64_t v182 = a2;
                if (v41 == 9)
                {
                  char v43 = 2;
LABEL_178:
                  BOOL v174 = v24;
                  goto LABEL_179;
                }
                double v101 = v61 + v82;
                if (v101 < 10.0) {
                  double v82 = v101;
                }
                else {
                  double v82 = v101 * 0.1;
                }
                if (v101 >= 10.0) {
                  ++v96;
                }
                if (v41 != 12 && v41 != 2) {
                  goto LABEL_178;
                }
                BOOL v174 = v23 == 0;
                BOOL v103 = v96 < -4 || v96 > v59;
                if (v103) {
                  char v43 = 3;
                }
                else {
                  char v43 = 2;
                }
                if (v103) {
                  int v104 = 0;
                }
                else {
                  int v104 = v96;
                }
                v59 -= v104;
LABEL_179:
                if (v43 == 3) {
                  int v105 = 0;
                }
                else {
                  int v105 = v96;
                }
                int v106 = v59 + v30 + (v105 & ~(v105 >> 31));
                unsigned int v180 = result;
                int v178 = v30;
                uint64_t v173 = v54;
                char v176 = v43;
                if (v106 < 56)
                {
                  uint64_t v175 = 0;
                  uint64_t v13 = v189;
                }
                else
                {
                  char v107 = v55;
                  int v108 = v59;
                  uint64_t v109 = luaM_realloc_(a1, 0, 0, (v106 + 15));
                  char v55 = v107;
                  int v59 = v108;
                  signed int v110 = (char *)v109;
                  uint64_t result = v180;
                  uint64_t v13 = v110;
                  uint64_t v175 = (uint64_t)v110;
                  if (!v110)
                  {
                    a2 = v182;
                    goto LABEL_314;
                  }
                }
                BOOL v111 = v59 > 0;
                uint64_t v112 = v13;
                if (!v53)
                {
                  *uint64_t v13 = v55;
                  uint64_t v112 = v13 + 1;
                }
                int v113 = 10 * v24 + 16;
                if (v105 < 0)
                {
                  *v112++ = 48;
                  int v117 = v96;
                }
                else
                {
                  int v114 = v105 + 1;
                  do
                  {
                    if (v113 < 1)
                    {
                      char v116 = 48;
                    }
                    else
                    {
                      int v115 = (int)v82;
                      double v82 = (v82 - (double)(int)v82) * 10.0;
                      char v116 = v115 + 48;
                      --v113;
                    }
                    *v112++ = v116;
                    --v114;
                  }
                  while (v114 > 0);
                  int v117 = -1;
                }
                char v134 = v23 | v24 | v111;
                if (v134) {
                  *v112++ = 46;
                }
                if (v117 > -2)
                {
                  int v135 = v59;
                }
                else
                {
                  char v171 = v23 | v24 | v111;
                  int v172 = v59;
                  memset(v112, 48, (-2 - v117) + 1);
                  char v134 = v171;
                  int v59 = v172;
                  uint64_t result = v180;
                  v112 += (-2 - v117) + 1;
                  int v135 = v172 + v117 + 1;
                }
                int v10 = v187;
                char v26 = v183;
                int v30 = v178;
                if (v135 < 1)
                {
                  a2 = v182;
                }
                else
                {
                  if (v117 >= -1) {
                    int v136 = -1;
                  }
                  else {
                    int v136 = v117;
                  }
                  unsigned int v137 = v59 + v136 + 2;
                  a2 = v182;
                  do
                  {
                    if (v113 < 1)
                    {
                      char v139 = 48;
                    }
                    else
                    {
                      int v138 = (int)v82;
                      double v82 = (v82 - (double)(int)v82) * 10.0;
                      char v139 = v138 + 48;
                      --v113;
                    }
                    *v112++ = v139;
                    --v137;
                  }
                  while (v137 > 1);
                }
                if (v174 && v134)
                {
                  --v112;
                  while (1)
                  {
                    int v140 = *v112;
                    if (v140 != 48) {
                      break;
                    }
                    *v112-- = 0;
                  }
                  if (v140 == 46)
                  {
                    if (v24)
                    {
                      v112[1] = 48;
                      v112 += 2;
                    }
                    else
                    {
                      *uint64_t v112 = 0;
                    }
                  }
                  else
                  {
                    ++v112;
                  }
                }
                uint64_t v78 = v175;
                if (v176 == 3)
                {
                  *uint64_t v112 = aDigits[*(v42 - 1)];
                  if (v96 >= 0) {
                    char v150 = 43;
                  }
                  else {
                    char v150 = 45;
                  }
                  if (v96 >= 0) {
                    unsigned int v151 = v96;
                  }
                  else {
                    unsigned int v151 = -v96;
                  }
                  v112[1] = v150;
                  if (v151 < 0x64)
                  {
                    v152 = v112 + 2;
                  }
                  else
                  {
                    v152 = v112 + 3;
                    v112[2] = v151 / 0x64 + 48;
                    v151 %= 0x64u;
                  }
                  unsigned char *v152 = (v151 / 0xAu) | 0x30;
                  uint64_t v112 = v152 + 2;
                  v152[1] = (v151 % 0xAu) | 0x30;
                }
                *uint64_t v112 = 0;
                LODWORD(i) = v112 - v13;
                if (v25)
                {
                  if (!v183)
                  {
                    int v153 = v178 - i;
                    if (v178 > (int)i)
                    {
                      if ((i & 0x80000000) == 0)
                      {
                        uint64_t v154 = v178;
                        uint64_t v155 = v153;
                        unint64_t v156 = &v13[-v153];
                        do
                        {
                          v13[v154] = v156[v154];
                          BOOL v57 = v154-- <= v155;
                        }
                        while (!v57);
                      }
                      if (v178 == i)
                      {
                        LODWORD(i) = v178;
                      }
                      else
                      {
                        uint64_t v157 = result;
                        LODWORD(i) = v178;
                        memset(&v13[v173], 48, (~v112 + v178 + v13) + 1);
                        int v30 = v178;
                        char v26 = v183;
                        uint64_t result = v157;
                      }
                    }
                  }
                }
LABEL_282:
                int v161 = v30 - i;
                if (v30 - (int)i < 1 || v26)
                {
                  uint64_t v163 = a2;
                  uint64_t v164 = (i + result);
                  if ((int)v164 >= v10)
                  {
                    int v10 = 0;
                    int v186 = 2;
                  }
                  else
                  {
                    size_t v165 = (int)i;
                    char v166 = v26;
                    cstdlib_memcpy((void *)(v163 + (int)result), v13, v165);
                    char v26 = v166;
                    uint64_t result = v164;
                  }
                  a2 = v163;
                  if (v161 >= 1)
                  {
                    if (v26)
                    {
                      if ((int)result + v161 < v10
                        || !v186 && (v161 = v10 + ~result, v186 = 2, int v10 = 0, v161 >= 1))
                      {
                        int v168 = result;
                        memset((void *)(v163 + (int)result), 32, (v161 - 1) + 1);
                        uint64_t result = (v168 + v161);
                      }
                    }
                  }
                }
                else
                {
                  if (v161 + (int)result < v10 || !v186 && (v161 = v10 + ~result, v186 = 2, int v10 = 0, v161 >= 1))
                  {
                    int v162 = result;
                    memset((void *)(a2 + (int)result), 32, (v161 - 1) + 1);
                    uint64_t result = (v162 + v161);
                  }
                  uint64_t v167 = (result + i);
                  if ((int)v167 >= v10)
                  {
                    int v10 = 0;
                    int v186 = 2;
                  }
                  else
                  {
                    cstdlib_memcpy((void *)(a2 + (int)result), v13, (int)i);
                    uint64_t result = v167;
                  }
                }
                if (v78)
                {
                  uint64_t v169 = result;
                  luaM_realloc_(a1, v78, 1, 0);
                  uint64_t result = v169;
                }
                uint64_t __src = v27 + 1;
                break;
              case 5:
                uint64_t v78 = 0;
                int v30 = 0;
                LODWORD(i) = 0;
                long long v118 = v188;
                v188 += 2;
                **(_DWORD **)long long v118 = result;
                goto LABEL_238;
              case 6:
              case 7:
                int v75 = (char **)v188;
                v188 += 2;
                uint64_t v76 = *v75;
                if (v41 == 3) {
                  uint64_t v77 = (uint64_t)v76;
                }
                else {
                  uint64_t v77 = 0;
                }
                if (v76) {
                  uint64_t v78 = v77;
                }
                else {
                  uint64_t v78 = 0;
                }
                if (v76) {
                  uint64_t v13 = v76;
                }
                else {
                  uint64_t v13 = "";
                }
                if (v33 < 0)
                {
                  uint64_t v141 = result;
                  char v142 = v26;
                  int v143 = v30;
                  int v144 = cstdlib_strlen(v13);
                  int v30 = v143;
                  char v26 = v142;
                  LODWORD(i) = v144 & 0x3FFFFFFF;
                  uint64_t result = v141;
LABEL_238:
                  int v10 = v187;
                }
                else
                {
                  int v10 = v187;
                  if (v33)
                  {
                    for (uint64_t i = 0; i != v33; ++i)
                    {
                      if (!v13[i]) {
                        goto LABEL_282;
                      }
                    }
                    LODWORD(i) = v33;
                  }
                  else
                  {
                    LODWORD(i) = 0;
                  }
                }
                goto LABEL_282;
              case 8:
                uint64_t v78 = 0;
                v189[0] = 37;
                uint64_t v13 = v189;
                LODWORD(i) = 1;
                goto LABEL_238;
              case 9:
                uint64_t v119 = v188;
                v188 += 2;
                int v120 = *v119;
                int v121 = v33 - 1;
                if (v33 <= 1)
                {
                  int v10 = v187;
                  goto LABEL_281;
                }
                v30 -= v121;
                int v10 = v187;
                if (v30 < 2 || v26) {
                  goto LABEL_278;
                }
                int v122 = v30 - 1;
                if (v30 - 1 + (int)result < v187)
                {
                  char v123 = v26;
LABEL_202:
                  int v124 = result;
                  memset((void *)(a2 + (int)result), 32, (v122 - 1) + 1);
                  int v30 = 0;
                  uint64_t result = (v124 + v122);
                  char v26 = v123;
                  goto LABEL_278;
                }
                if (!v186)
                {
                  int v122 = v187 + ~result;
                  if (v122 < 1)
                  {
                    int v30 = 0;
                    int v10 = 0;
                    int v186 = 2;
                    if (v121 + (int)result < 0) {
                      goto LABEL_279;
                    }
                    goto LABEL_281;
                  }
                  char v123 = v26;
                  int v10 = 0;
                  int v186 = 2;
                  goto LABEL_202;
                }
                int v30 = 0;
LABEL_278:
                if ((int)result + v121 < v10 || !v186 && (v121 = v10 + ~result, v186 = 2, int v10 = 0, v121 >= 1))
                {
LABEL_279:
                  int v158 = result;
                  char v159 = v26;
                  int v160 = v30;
                  memset((void *)(a2 + (int)result), v120, (v121 - 1) + 1);
                  int v30 = v160;
                  char v26 = v159;
                  uint64_t result = (v158 + v121);
                }
LABEL_281:
                uint64_t v78 = 0;
                v189[0] = v120;
                uint64_t v13 = v189;
                LODWORD(i) = 1;
                goto LABEL_282;
              default:
                goto LABEL_314;
            }
            goto LABEL_3;
        }
      }
      else
      {
        switch((char)v20)
        {
          case ' ':
            int v22 = 1;
            break;
          case '!':
            unsigned __int8 v24 = 1;
            break;
          case '#':
            char v23 = 1;
            break;
          default:
            goto LABEL_46;
        }
      }
      int v28 = *v27++;
      int v20 = v28;
      if (!v28)
      {
        int v29 = 0;
        --v27;
LABEL_33:
        int v30 = v29 & 0x7FFFFFFF;
        goto LABEL_34;
      }
    }
  }
  uint64_t v170 = (result + 1);
  if ((int)v170 < v187)
  {
    cstdlib_memcpy((void *)(a2 + (int)result), "%", 1uLL);
    uint64_t result = v170;
  }
LABEL_314:
  if (a2) {
    *(unsigned char *)(a2 + (int)result) = 0;
  }
  return result;
}

uint64_t getAllocatorLua(uint64_t a1)
{
  uint64_t v2 = 0;
  lua_getallocf(a1, &v2);
  return v2;
}

uint64_t getMetatableLua(void *a1, char *a2)
{
  return lua_getfield(a1, -1001000, a2);
}

uint64_t LuaStateFactory_Con(void *a1, uint64_t a2)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__LuaStateFactory;
    a1[1] = &unk_26D20E410;
    a1[2] = a2;
  }
  return result;
}

uint64_t LuaStateFactory_CreateLuaState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = lua_newstate(__LuaStateFactory_CustomAlloc, *(void *)(a1 + 16));
  *a2 = v3;
  if (v3) {
    return 0;
  }

  return err_GenerateErrorResource();
}

uint64_t __LuaStateFactory_CustomAlloc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (a4)
    {
      if (a2)
      {
        int v4 = 0;
        uint64_t result = OOCAllocator_Realloc(result, a2, a4, &v4);
        if (!v4) {
          return result;
        }
      }
      else
      {
        int v5 = 0;
        uint64_t result = OOCAllocator_Malloc(result, a4, &v5);
        if (!v5) {
          return result;
        }
      }
    }
    else
    {
      OOCAllocator_Free(result, a2);
    }
    return 0;
  }
  return result;
}

uint64_t PNEW_LuaStateFactory_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 24, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = Object_Con(v6);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *uint64_t v6 = &__LuaStateFactory;
      v6[1] = &unk_26D20E410;
      void v6[2] = a2;
      *a3 = v6;
    }
  }
  return result;
}

void *GetLuaStateFactoryClass()
{
  return &__LuaStateFactory;
}

uint64_t LuaStateFactoryMemLog_Con(void *a1, uint64_t a2)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__LuaStateFactoryMemLog;
    a1[1] = &unk_26D20E438;
    a1[2] = a2;
  }
  return result;
}

uint64_t LuaStateFactoryMemLog_CreateLuaState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = lua_newstate(__LuaStateFactory_CustomAlloc_0, *(void *)(a1 + 16));
  *a2 = v3;
  if (v3) {
    return 0;
  }

  return err_GenerateErrorResource();
}

uint64_t __LuaStateFactory_CustomAlloc_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (a4)
    {
      if (a2)
      {
        int v4 = 0;
        uint64_t result = OOCAllocator_Realloc(result, a2, a4, &v4);
        if (!v4) {
          return result;
        }
      }
      else
      {
        int v5 = 0;
        uint64_t result = OOCAllocator_Malloc(result, a4, &v5);
        if (!v5) {
          return result;
        }
      }
    }
    else
    {
      OOCAllocator_Free(result, a2);
    }
    return 0;
  }
  return result;
}

uint64_t LuaStateFactoryMemLog_CreateLuaStateWithMemoryLogging(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = lua_newstate((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))__LuaStateFactory_CustomAllocMemLog, a3);
  *a2 = v4;
  if (v4) {
    return 0;
  }

  return err_GenerateErrorResource();
}

uint64_t __LuaStateFactory_CustomAllocMemLog(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v10 = 0;
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    int v6 = a4;
    if (a4)
    {
      if (a2)
      {
        uint64_t result = OOCAllocator_Realloc(result, a2, a4, &v10);
        if (!v10)
        {
          v6 -= a3;
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = OOCAllocator_Malloc(result, a4, &v10);
        if (!v10)
        {
LABEL_10:
          unsigned int v8 = *(_DWORD *)(a1 + 4);
          unsigned int v9 = *(_DWORD *)a1 + v6;
          *(_DWORD *)a1 = v9;
          if (v8 < v9) {
            *(_DWORD *)(a1 + 4) = v9;
          }
          return result;
        }
      }
    }
    else
    {
      *(_DWORD *)a1 -= a3;
      OOCAllocator_Free(result, a2);
    }
    return 0;
  }
  return result;
}

uint64_t PNEW_LuaStateFactoryMemLog_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  int v6 = (void *)OOCAllocator_Malloc(a1, 24, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = Object_Con(v6);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *int v6 = &__LuaStateFactoryMemLog;
      v6[1] = &unk_26D20E438;
      void v6[2] = a2;
      *a3 = v6;
    }
  }
  return result;
}

void *GetLuaStateFactoryMemLogClass()
{
  return &__LuaStateFactoryMemLog;
}

uint64_t getOOCObject_LuaLDO(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)luaL_checkudata(a1, a2, "vocalizer.LDO");
  if (v4)
  {
    *a3 = *v4;
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t pushLuaObject_LuaLDO(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (void *)lua_newuserdata((uint64_t)a1, 8uLL);
  if (v4)
  {
    *uint64_t v4 = a2;
    getMetatableLua(a1, "vocalizer.LDO");
    lua_setmetatable(a1, -2);
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t getRoot_LuaLDO(uint64_t *a1)
{
  uint64_t v4 = 0;
  if (!getOOCObject_LuaLDO(a1, 1, &v4))
  {
    uint64_t v3 = *(void *)(v4 + 16);
    if (v3)
    {
      if (!pushLuaObject_LuaLDOTreeNode(a1, v3)) {
        return 1;
      }
    }
  }

  return LuaVMUtil_error(a1, "Error in ldo:getRoot");
}

uint64_t getInitialText_LuaLDO(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldo:getInitialText");
  }
  else
  {
    uint64_t v3 = (char *)LHString_BorrowCPtr(*(void *)(v4 + 24));
    lua_pushstring((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t computeText_LuaLDO(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldo:computeText");
  }
  int v2 = LDO_ComputeText(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldo:computeText");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:computeText");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldo:computeText");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t getLabelSet_LuaLDO(uint64_t *a1)
{
  uint64_t v3 = 0;
  if (!getOOCObject_LuaLDO(a1, 1, &v3)
    && !pushLuaObject_LuaLDOLabelSet(a1, *(void *)(v3 + 32)))
  {
    return 1;
  }

  return LuaVMUtil_error(a1, "Error in ldo:getLabelSet");
}

uint64_t getLabels_LuaLDO(uint64_t *a1)
{
  uint64_t v9 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v9)) {
    return LuaVMUtil_error(a1, "Error in ldo:getLabels");
  }
  LDO_GetLabels(v9, &v7);
  uint64_t v3 = (uint64_t *)v7.n128_u64[1];
  unint64_t v4 = v8;
  lua_createtable((uint64_t)a1, 0, 0);
  if ((unint64_t)v3 < v4)
  {
    int v5 = 0;
    while (!pushLuaObject_LuaLDOLabel(a1, *v3))
    {
      uint64_t v6 = LuaVMUtil_u32_index_to_luainteger(v5);
      lua_rawseti(a1, -2, v6);
      ++v5;
      if ((unint64_t)++v3 >= v4) {
        return 1;
      }
    }
    return LuaVMUtil_error(a1, "Error in ldo:getLabels");
  }
  return 1;
}

uint64_t setText_LuaLDO(void *a1)
{
  size_t v6 = 0;
  uint64_t v7 = 0;
  char __s = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v7)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v6)
    || LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&__s)
    || !__s
    || LDO_SetText(v7, v6, __s))
  {
    return LuaVMUtil_error(a1, "Error in ldo:setText");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t addLabel_LuaLDO(uint64_t *a1)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v14 = 0;
  uint64_t __src = 0;
  uint64_t v13 = 0;
  int OOCObject_LuaLDO = getOOCObject_LuaLDO(a1, 1, &v20);
  if (OOCObject_LuaLDO) {
    goto LABEL_2;
  }
  if (lua_type(a1, 2))
  {
    int OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v14);
    if (OOCObject_LuaLDO) {
      goto LABEL_2;
    }
  }
  if (lua_type(a1, 3))
  {
    int OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v13);
    if (OOCObject_LuaLDO) {
      goto LABEL_2;
    }
  }
  LODWORD(v16) = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  lua_pushnil((uint64_t)a1);
  if (lua_next(a1, 4))
  {
    unsigned int v3 = 0;
    uint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = v20;
    do
    {
      unint64_t v7 = lua_gettop((uint64_t)a1);
      int OOCObject_LuaLDO = getOOCObject_LuaLDOTreeNode(a1, v7, &__src);
      if (OOCObject_LuaLDO) {
        goto LABEL_2;
      }
      unint64_t v8 = (unint64_t)&v5[-v4];
      unsigned int v9 = ((unint64_t)&v5[-v4] >> 3) + 1;
      if (v9 > v3)
      {
        unsigned int v10 = 2 * v3;
        if (2 * v3 >= v3 + 1000000) {
          unsigned int v10 = v3 + 1000000;
        }
        if (v10 > v9) {
          unsigned int v9 = v10;
        }
        if (v9 <= 8) {
          unsigned int v3 = 8;
        }
        else {
          unsigned int v3 = v9;
        }
        uint64_t v11 = OOCAllocator_Realloc(*(void *)(v6 + 8), v4, 8 * v3, &OOCObject_LuaLDO);
        uint64_t v17 = v11;
        if (OOCObject_LuaLDO) {
          goto LABEL_2;
        }
        uint64_t v4 = v11;
        LODWORD(v16) = v3;
        int v5 = (char *)(v11 + (v8 & 0x7FFFFFFF8));
        uint64_t v18 = v5;
      }
      cstdlib_memcpy(v5, &__src, 8uLL);
      int v5 = v18 + 8;
      v18 += 8;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 4));
  }
  uint64_t v12 = v20;
  int OOCObject_LuaLDO = LDO_AddLabel(v20, v14, v13, (uint64_t)&v16, &v19);
  if (OOCObject_LuaLDO || (int OOCObject_LuaLDO = pushLuaObject_LuaLDOLabel(a1, v19)) != 0)
  {
LABEL_2:
    LODWORD(v16) = 0;
    if (v17)
    {
      OOCAllocator_Free(*(void *)(v20 + 8), v17);
      uint64_t v17 = 0;
    }
    uint64_t v18 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:addLabel");
  }
  LODWORD(v16) = 0;
  if (v17) {
    OOCAllocator_Free(*(void *)(v12 + 8), v17);
  }
  return 1;
}

uint64_t removeLabel_LuaLDO(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v6)
    || getOOCObject_LuaLDOLabel(a1, 2, &v5)
    || LDO_RemoveLabel(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldo:removeLabel");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t computeOverlappingLabels_LuaLDO(uint64_t *a1)
{
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  int v9 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v14)) {
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  if (lua_type(a1, 2))
  {
    unsigned int v3 = (unsigned int *)&v10 + 1;
    if (LuaVMUtil_luainteger_to_u32_index(a1, 2, (_DWORD *)&v10 + 1)) {
      return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  if (lua_type(a1, 3))
  {
    BOOL v4 = (unsigned int *)&v10;
    if (!LuaVMUtil_luainteger_to_u32_index(a1, 3, &v10)) {
      goto LABEL_11;
    }
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  BOOL v4 = 0;
LABEL_11:
  if (LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 4, &v9)) {
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  uint64_t v5 = v14;
  if (LDO_ComputeOverlappingLabels(v14, v3, v4, v9, (unsigned int *)&v11)) {
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  lua_createtable((uint64_t)a1, 0, 0);
  uint64_t v6 = v12;
  if ((unint64_t)v12 < v13)
  {
    int v7 = 0;
    while (!pushLuaObject_LuaLDOLabel(a1, *v6))
    {
      uint64_t v8 = LuaVMUtil_u32_index_to_luainteger(v7);
      lua_rawseti(a1, -2, v8);
      ++v7;
      if ((unint64_t)++v6 >= v13) {
        goto LABEL_17;
      }
    }
    goto LABEL_18;
  }
LABEL_17:
  if (LDO_FreeLDOLabelVector(v5, (uint64_t)&v11))
  {
LABEL_18:
    LDO_FreeLDOLabelVector(v5, (uint64_t)&v11);
    return LuaVMUtil_error(a1, "Error in ldo:computeOverlappingLabels");
  }
  return 1;
}

uint64_t appendNewNode_LuaLDO(uint64_t *a1)
{
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  size_t v7 = 0;
  BOOL v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v8)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v7)
    || lua_type(a1, 3) && LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v5)
    || lua_type(a1, 4) && LuaVMUtil_luastring_to_string(a1, 4, (uint64_t *)&v4)
    || LuaVMUtil_luainteger_to_u32_index(a1, 5, (_DWORD *)&v3 + 1)
    || LuaVMUtil_luainteger_to_u32_index(a1, 6, &v3)
    || LDO_AppendNewNode(v8, v7, v5, v4, SHIDWORD(v3), v3, &v6)
    || pushLuaObject_LuaLDOTreeNode(a1, v6))
  {
    return LuaVMUtil_error(a1, "Error in ldo:appendNewNode");
  }
  else
  {
    return 1;
  }
}

uint64_t addLabelOnSubstring_LuaLDO(uint64_t *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  size_t v7 = 0;
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v9)
    || lua_type(a1, 2) && LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v7)
    || lua_type(a1, 3) && LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v6))
  {
    return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
  }
  if (lua_type(a1, 4))
  {
    uint64_t v3 = (unsigned int *)&v5 + 1;
    if (LuaVMUtil_luainteger_to_u32_index(a1, 4, (_DWORD *)&v5 + 1)) {
      return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (lua_type(a1, 5))
  {
    BOOL v4 = (unsigned int *)&v5;
    if (!LuaVMUtil_luainteger_to_u32_index(a1, 5, &v5)) {
      goto LABEL_15;
    }
    return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
  }
  BOOL v4 = 0;
LABEL_15:
  if (LDO_AddLabelOnSubstring(v9, v7, v6, v3, v4, &v8) || pushLuaObject_LuaLDOLabel(a1, v8)) {
    return LuaVMUtil_error(a1, "Error in ldo:addLabelOnSubstring");
  }
  return 1;
}

uint64_t getNumberLabels_LuaLDO(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldo:getNumberLabels");
  }
  else
  {
    unsigned int NumberLabels = LDO_GetNumberLabels(v4);
    lua_pushinteger((uint64_t)a1, NumberLabels);
    return 1;
  }
}

uint64_t mergeLabels_LuaLDO(uint64_t *a1)
{
  uint64_t __src = 0;
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  int OOCObject_LuaLDO = getOOCObject_LuaLDO(a1, 1, &v20);
  if (OOCObject_LuaLDO) {
    goto LABEL_2;
  }
  if (lua_type(a1, 2))
  {
    int OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v14);
    if (OOCObject_LuaLDO) {
      goto LABEL_2;
    }
  }
  if (lua_type(a1, 3))
  {
    int OOCObject_LuaLDO = LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v13);
    if (OOCObject_LuaLDO) {
      goto LABEL_2;
    }
  }
  LODWORD(v15) = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  lua_pushnil((uint64_t)a1);
  if (lua_next(a1, 4))
  {
    unsigned int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = v20;
    do
    {
      unint64_t v7 = lua_gettop((uint64_t)a1);
      int OOCObject_LuaLDO = getOOCObject_LuaLDOLabel(a1, v7, &__src);
      if (OOCObject_LuaLDO) {
        goto LABEL_2;
      }
      unint64_t v8 = (unint64_t)&v5[-v4];
      unsigned int v9 = ((unint64_t)&v5[-v4] >> 3) + 1;
      if (v9 > v3)
      {
        unsigned int v10 = 2 * v3;
        if (2 * v3 >= v3 + 1000000) {
          unsigned int v10 = v3 + 1000000;
        }
        if (v10 > v9) {
          unsigned int v9 = v10;
        }
        if (v9 <= 8) {
          unsigned int v3 = 8;
        }
        else {
          unsigned int v3 = v9;
        }
        uint64_t v11 = OOCAllocator_Realloc(*(void *)(v6 + 8), v4, 8 * v3, &OOCObject_LuaLDO);
        uint64_t v16 = v11;
        if (OOCObject_LuaLDO) {
          goto LABEL_2;
        }
        uint64_t v4 = v11;
        LODWORD(v15) = v3;
        uint64_t v5 = (char *)(v11 + (v8 & 0x7FFFFFFF8));
        uint64_t v17 = v5;
      }
      cstdlib_memcpy(v5, &__src, 8uLL);
      uint64_t v5 = v17 + 8;
      v17 += 8;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 4));
  }
  uint64_t v12 = v20;
  int OOCObject_LuaLDO = LDO_MergeLabels(v20, (uint64_t)&v15, v14, v13, &v18);
  if (OOCObject_LuaLDO || (int OOCObject_LuaLDO = pushLuaObject_LuaLDOLabel(a1, v18)) != 0)
  {
LABEL_2:
    LODWORD(v15) = 0;
    if (v16)
    {
      OOCAllocator_Free(*(void *)(v20 + 8), v16);
      uint64_t v16 = 0;
    }
    uint64_t v17 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:mergeLabels");
  }
  LODWORD(v15) = 0;
  if (v16) {
    OOCAllocator_Free(*(void *)(v12 + 8), v16);
  }
  return 1;
}

uint64_t replaceNodes_LuaLDO(uint64_t *a1)
{
  double v52 = 0;
  uint64_t v53 = 0;
  uint64_t v45 = 0;
  uint64_t __src = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  unint64_t v49 = 0;
  int OOCObject_LuaLDO = getOOCObject_LuaLDO(a1, 1, &v53);
  if (OOCObject_LuaLDO) {
    goto LABEL_2;
  }
  lua_pushnil((uint64_t)a1);
  int v4 = lua_next(a1, 2);
  uint64_t v5 = v53;
  if (v4)
  {
    do
    {
      unint64_t v6 = lua_gettop((uint64_t)a1);
      int OOCObject_LuaLDO = getOOCObject_LuaLDOTreeNode(a1, v6, &__src);
      if (OOCObject_LuaLDO) {
        goto LABEL_2;
      }
      unint64_t v7 = v52;
      unint64_t v8 = (unint64_t)&v52[-v51];
      unsigned int v9 = ((unint64_t)&v52[-v51] >> 3) + 1;
      if (v9 > v50)
      {
        unsigned int v10 = v50 + 1000000;
        if (2 * (int)v50 < (v50 + 1000000)) {
          unsigned int v10 = 2 * v50;
        }
        if (v10 > v9) {
          unsigned int v9 = v10;
        }
        if (v9 <= 8) {
          unsigned int v11 = 8;
        }
        else {
          unsigned int v11 = v9;
        }
        uint64_t v12 = OOCAllocator_Realloc(*(void *)(v5 + 8), v51, 8 * v11, &OOCObject_LuaLDO);
        uint64_t v2 = v12;
        uint64_t v51 = v12;
        if (OOCObject_LuaLDO)
        {
LABEL_3:
          LODWORD(v50) = 0;
          if (v2)
          {
            OOCAllocator_Free(*(void *)(v53 + 8), v2);
            uint64_t v51 = 0;
          }
          double v52 = 0;
          LODWORD(v47) = 0;
          if (v48)
          {
            OOCAllocator_Free(*(void *)(v53 + 8), v48);
            unint64_t v48 = 0;
          }
          unint64_t v49 = 0;
          return LuaVMUtil_error(a1, "Error in ldo:replaceNodes");
        }
        LODWORD(v50) = v11;
        unint64_t v7 = (void *)(v12 + (v8 & 0x7FFFFFFF8));
        double v52 = (char *)(v2 + (v8 & 0x7FFFFFFF8));
      }
      cstdlib_memcpy(v7, &__src, 8uLL);
      v52 += 8;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 2));
  }
  lua_pushnil((uint64_t)a1);
  if (!lua_next(a1, 3)) {
    goto LABEL_89;
  }
  do
  {
    uint64_t v45 = 0;
    int v13 = lua_gettop((uint64_t)a1);
    if (lua_type(a1, v13) != 5)
    {
      uint64_t v15 = v45;
      goto LABEL_28;
    }
    int v14 = PNEW_LDOTreeNode_ConRoot(*(void *)(v5 + 8), *(void *)(v5 + 8), "", 0, 0, &v45);
    if (v14) {
      goto LABEL_24;
    }
    lua_pushnil((uint64_t)a1);
    int v22 = 0;
    if (!lua_next(a1, v13))
    {
LABEL_85:
      uint64_t v15 = v45;
      if (v45 && v22 != 1)
      {
        int v14 = 0;
        goto LABEL_25;
      }
LABEL_28:
      int OOCObject_LuaLDO = 0;
      if (v15)
      {
        uint64_t v16 = (void *)v49;
        unint64_t v17 = v49 - v48;
        unsigned int v18 = ((v49 - v48) >> 3) + 1;
        if (v18 > v47)
        {
          unsigned int v19 = v47 + 1000000;
          if (2 * (int)v47 < (v47 + 1000000)) {
            unsigned int v19 = 2 * v47;
          }
          if (v19 > v18) {
            unsigned int v18 = v19;
          }
          if (v18 <= 8) {
            unsigned int v20 = 8;
          }
          else {
            unsigned int v20 = v18;
          }
          uint64_t v21 = OOCAllocator_Realloc(*(void *)(v5 + 8), v48, 8 * v20, &OOCObject_LuaLDO);
          unint64_t v48 = v21;
          if (OOCObject_LuaLDO) {
            goto LABEL_2;
          }
          LODWORD(v47) = v20;
          uint64_t v16 = (void *)(v21 + (v17 & 0x7FFFFFFF8));
          unint64_t v49 = (unint64_t)v16;
        }
        cstdlib_memcpy(v16, &v45, 8uLL);
        v49 += 8;
      }
      goto LABEL_40;
    }
    while (1)
    {
      if (!lua_isstring(a1, -2)) {
        goto LABEL_84;
      }
      uint64_t v23 = lua_tolstring(a1, -2, 0);
      if (!v23) {
        goto LABEL_84;
      }
      unsigned __int8 v24 = (const char *)v23;
      if (lua_isinteger(a1, -1))
      {
        uint64_t v55 = 0;
        if (!cstdlib_strcmp(v24, "par_from"))
        {
          int v14 = LuaVMUtil_luainteger_to_u32_index(a1, -1, (_DWORD *)&v55 + 1);
          if (v14) {
            goto LABEL_83;
          }
          LDOObject_SetU32Attribute(v45, "repl_from", SHIDWORD(v55));
          int v14 = v28;
          if (v28) {
            goto LABEL_83;
          }
        }
        if (cstdlib_strcmp(v24, "par_to"))
        {
          int v14 = 0;
          goto LABEL_83;
        }
        int v14 = LuaVMUtil_luainteger_to_u32_index(a1, -1, &v55);
        if (v14)
        {
LABEL_83:
          if (v14) {
            goto LABEL_24;
          }
          goto LABEL_84;
        }
        LDOObject_SetU32Attribute(v45, "repl_to", v55);
LABEL_82:
        int v14 = v27;
        goto LABEL_83;
      }
      if (!lua_isstring(a1, -1))
      {
        if (lua_type(a1, -1) == 5 && !cstdlib_strcmp(v24, "attr"))
        {
          int v29 = lua_gettop((uint64_t)a1);
          lua_pushnil((uint64_t)a1);
          while (2)
          {
            if (!lua_next(a1, v29)) {
              goto LABEL_84;
            }
            if (!lua_isstring(a1, -2)) {
              goto LABEL_84;
            }
            uint64_t v30 = lua_tolstring(a1, -2, 0);
            if (!v30) {
              goto LABEL_84;
            }
            unint64_t v31 = (char *)v30;
            if (lua_isinteger(a1, -1))
            {
              int v32 = lua_tointegerx(a1, -1, 0);
              uint64_t v33 = v45;
              int v34 = v31;
              if ((v32 & 0x80000000) == 0) {
                goto LABEL_71;
              }
              LDOObject_SetS32Attribute(v45, v31, v32);
              if (v35) {
                goto LABEL_88;
              }
            }
            else if (lua_type(a1, -1) == 1)
            {
              int v32 = lua_toBOOLean(a1, -1) == 1;
              uint64_t v33 = v45;
              int v34 = v31;
LABEL_71:
              LDOObject_SetU32Attribute(v33, v34, v32);
              if (v35) {
                goto LABEL_88;
              }
            }
            else if (lua_isstring(a1, -1))
            {
              int v36 = (char *)lua_tolstring(a1, -1, 0);
              if (!v36) {
                goto LABEL_84;
              }
              int v35 = LDOObject_SetStringAttribute(v45, v31, v36);
              if (v35) {
                goto LABEL_88;
              }
            }
            lua_settop((uint64_t)a1, 0xFFFFFFFE);
            continue;
          }
        }
        goto LABEL_84;
      }
      uint64_t v25 = lua_tolstring(a1, -1, 0);
      if (!v25) {
        goto LABEL_84;
      }
      char v26 = (char *)v25;
      if (!cstdlib_strcmp(v24, "text")) {
        break;
      }
      if (!cstdlib_strcmp(v24, "nc"))
      {
        int v27 = LDOObject_SetCategory(v45, v26);
        goto LABEL_82;
      }
      if (!cstdlib_strcmp(v24, "nt"))
      {
        int v27 = LDOObject_SetType(v45, v26);
        goto LABEL_82;
      }
LABEL_84:
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      if (!lua_next(a1, v13)) {
        goto LABEL_85;
      }
    }
    int v35 = LDOTreeNode_SetText(v45, v26);
    if (!v35)
    {
      int v22 = 1;
      goto LABEL_84;
    }
LABEL_88:
    int v14 = v35;
LABEL_24:
    uint64_t v15 = v45;
    if (!v45)
    {
      int OOCObject_LuaLDO = v14;
      goto LABEL_2;
    }
LABEL_25:
    OOC_PlacementDeleteObject(*(void *)(v5 + 8), v15);
    uint64_t v45 = 0;
    int OOCObject_LuaLDO = v14;
    if (v14)
    {
LABEL_2:
      uint64_t v2 = v51;
      goto LABEL_3;
    }
LABEL_40:
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
  }
  while (lua_next(a1, 3));
LABEL_89:
  int OOCObject_LuaLDO = LDO_ReplaceNodes(v5, (uint64_t)&v50, (uint64_t)&v47);
  if (OOCObject_LuaLDO) {
    goto LABEL_2;
  }
  int v37 = (uint64_t **)v48;
  if (v48 < v49)
  {
    do
    {
      int OOCObject_LuaLDO = LDOObject_GetStringAttribute(*v37, "label_category", (_DWORD *)&v44 + 1, &v42);
      if (OOCObject_LuaLDO) {
        goto LABEL_2;
      }
      if (!HIDWORD(v44)) {
        uint64_t v42 = 0;
      }
      int OOCObject_LuaLDO = LDOObject_GetStringAttribute(*v37, "label_type", &v44, &v41);
      if (OOCObject_LuaLDO) {
        goto LABEL_2;
      }
      if (!v44) {
        uint64_t v41 = 0;
      }
      if (v44 == 1 || HIDWORD(v44) == 1)
      {
        int OOCObject_LuaLDO = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)*v37, (_DWORD *)&v43 + 1);
        if (OOCObject_LuaLDO) {
          goto LABEL_2;
        }
        int OOCObject_LuaLDO = LDOTreeNode_ComputeAbsoluteTo((size_t)*v37, &v43);
        if (OOCObject_LuaLDO) {
          goto LABEL_2;
        }
        int OOCObject_LuaLDO = LDOLabelSet_AddLabel(*(void *)(v5 + 32), 0);
        if (OOCObject_LuaLDO) {
          goto LABEL_2;
        }
      }
      ++v37;
    }
    while ((unint64_t)v37 < v49);
  }
  lua_createtable((uint64_t)a1, 0, 0);
  uint64_t v38 = (uint64_t *)v48;
  if (v48 < v49)
  {
    int v39 = 0;
    do
    {
      int OOCObject_LuaLDO = pushLuaObject_LuaLDOTreeNode(a1, *v38);
      if (OOCObject_LuaLDO) {
        goto LABEL_2;
      }
      uint64_t v40 = LuaVMUtil_u32_index_to_luainteger(v39);
      lua_rawseti(a1, -2, v40);
      ++v39;
      ++v38;
    }
    while ((unint64_t)v38 < v49);
  }
  LODWORD(v50) = 0;
  if (v51)
  {
    OOCAllocator_Free(*(void *)(v5 + 8), v51);
    uint64_t v51 = 0;
  }
  double v52 = 0;
  LODWORD(v47) = 0;
  if (v48) {
    OOCAllocator_Free(*(void *)(v5 + 8), v48);
  }
  return 1;
}

uint64_t toString_LuaLDO(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (getOOCObject_LuaLDO(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldo:tostring");
  }
  int v2 = LDO_ToString(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldo:tostring");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldo:tostring");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t computeLabelText_LuaLDO(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (!getOOCObject_LuaLDO(a1, 1, &v8) && !getOOCObject_LuaLDOLabel(a1, 2, &v7))
  {
    int v2 = LDOLabel_ComputeText(v7, &v6);
    uint64_t v3 = v6;
    if (!v2)
    {
      if (!LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6)) {
        return 1;
      }
      uint64_t v3 = v6;
    }
    if (v3)
    {
      uint64_t v4 = LDOString_BorrowAllocator(v3);
      OOC_PlacementDeleteObject(v4, v6);
      uint64_t v6 = 0;
    }
  }
  return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
}

uint64_t computeNodesCoveredByLabel_LuaLDO(uint64_t *a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  if (!getOOCObject_LuaLDO(a1, 1, &v11) && !getOOCObject_LuaLDOLabel(a1, 2, &v10))
  {
    uint64_t v2 = v11;
    if (!LDO_ComputeNodesCoveredByLabel(v11, v10, (uint64_t)&v7))
    {
      lua_createtable((uint64_t)a1, 0, 0);
      uint64_t v3 = v8;
      if ((unint64_t)v8 >= v9)
      {
LABEL_8:
        if (!LDO_FreeLDOTreeNodeVector(v2, (uint64_t)&v7)) {
          return 1;
        }
      }
      else
      {
        int v4 = 0;
        while (!pushLuaObject_LuaLDOTreeNode(a1, *v3))
        {
          uint64_t v5 = LuaVMUtil_u32_index_to_luainteger(v4);
          lua_rawseti(a1, -2, v5);
          ++v4;
          if ((unint64_t)++v3 >= v9) {
            goto LABEL_8;
          }
        }
      }
      LDO_FreeLDOTreeNodeVector(v2, (uint64_t)&v7);
    }
  }
  return LuaVMUtil_error(a1, "Error in ldo:get_nodes_covered_by_label");
}

uint64_t luaopen_LDO(void *a1)
{
  newMetatableLua(a1, "vocalizer.LDO");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  luaL_setfuncs(a1, (uint64_t)&lib_m, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal((uint64_t)a1, "LDO");
  return 0;
}

uint64_t getOOCObject_LuaLDOLabel(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)luaL_checkudata(a1, a2, "vocalizer.LDOLabel");
  if (v4)
  {
    *a3 = *v4;
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t pushLuaObject_LuaLDOLabel(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (void *)lua_newuserdata((uint64_t)a1, 8uLL);
  if (v4)
  {
    *uint64_t v4 = a2;
    getMetatableLua(a1, "vocalizer.LDOLabel");
    lua_setmetatable(a1, -2);
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t getAbsoluteFrom_LuaLDOLabel(void *a1)
{
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:getAbsoluteFrom");
  }
  else
  {
    int AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v5);
    uint64_t v4 = LuaVMUtil_u32_index_to_luainteger(AbsoluteFrom);
    lua_pushinteger((uint64_t)a1, v4);
    return 1;
  }
}

uint64_t getAbsoluteTo_LuaLDOLabel(void *a1)
{
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:getAbsoluteTo");
  }
  else
  {
    int AbsoluteTo = LDOLabel_GetAbsoluteTo(v5);
    uint64_t v4 = LuaVMUtil_u32_index_to_luainteger(AbsoluteTo);
    lua_pushinteger((uint64_t)a1, v4);
    return 1;
  }
}

uint64_t isValid_LuaLDOLabel(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:isValid");
  }
  else
  {
    BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(*(_DWORD *)(v4 + 104));
    lua_pushBOOLean((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t invalidate_LuaLDOLabel(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4) || LDOLabel_Invalidate(v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:invalidate");
  }
  else
  {
    BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
    lua_pushBOOLean((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t getReferenceFrom_LuaLDOLabel(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:getReferenceFrom");
  }
  else
  {
    uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 96));
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t getReferenceTo_LuaLDOLabel(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:getReferenceTo");
  }
  else
  {
    uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 100));
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t setReferenceFrom_LuaLDOLabel(void *a1)
{
  uint64_t v6 = 0;
  int v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v6)
    || LuaVMUtil_luainteger_to_u32_index(a1, 2, &v5)
    || LDOLabel_SetReferenceFrom(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:setReferenceFrom");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t setReferenceTo_LuaLDOLabel(void *a1)
{
  uint64_t v6 = 0;
  int v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v6)
    || LuaVMUtil_luainteger_to_u32_index(a1, 2, &v5)
    || LDOLabel_SetReferenceTo(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:setReferenceTo");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t hasReferenceIndices_LuaLDOLabel(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:hasReferenceIndices");
  }
  else
  {
    BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(*(_DWORD *)(v4 + 108));
    lua_pushBOOLean((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t compareTo_LuaLDOLabel(void *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5) || getOOCObject_LuaLDOLabel(a1, 2, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:compareTo");
  }
  else
  {
    int v3 = LDOLabel_CompareTo(v5, v4);
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t compareToWithID_LuaLDOLabel(void *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v5) || getOOCObject_LuaLDOLabel(a1, 2, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:compareToWithID");
  }
  else
  {
    int v3 = LDOLabel_CompareToWithID(v5, v4);
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t toString_LuaLDOLabel(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
  }
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 24))(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldolabel:tostring");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t containsNode_LuaLDOLabel(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v6)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v5)
    || LDOLabel_ContainsNode(v6, v5, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabel:contains_node");
  }
  BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t addNode_LuaLDOLabel(void *a1)
{
  size_t v3 = 0;
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4)) {
    return LuaVMUtil_error(a1, "Error in ldolabel:add_node");
  }
  if (getOOCObject_LuaLDOTreeNode(a1, 2, &v3)) {
    return LuaVMUtil_error(a1, "Error in ldolabel:add_node");
  }
  uint64_t result = LDOLabel_AddNode(v4, v3);
  if (result) {
    return LuaVMUtil_error(a1, "Error in ldolabel:add_node");
  }
  return result;
}

uint64_t addNodes_LuaLDOLabel(void *a1)
{
  uint64_t __src = 0;
  uint64_t v20 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned int v18 = 0;
  int OOCObject_LuaLDOLabel = getOOCObject_LuaLDOLabel(a1, 1, &v20);
  if (OOCObject_LuaLDOLabel) {
    goto LABEL_2;
  }
  LODWORD(v16) = 0;
  uint64_t v17 = 0;
  unsigned int v18 = 0;
  lua_pushnil((uint64_t)a1);
  if (lua_next(a1, 2))
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v20;
    do
    {
      unint64_t v8 = lua_gettop((uint64_t)a1);
      int OOCObject_LuaLDOLabel = getOOCObject_LuaLDOTreeNode(a1, v8, &__src);
      if (OOCObject_LuaLDOLabel) {
        goto LABEL_2;
      }
      unint64_t v9 = (unint64_t)&v6[-v5];
      unsigned int v10 = ((unint64_t)&v6[-v5] >> 3) + 1;
      if (v10 > v4)
      {
        unsigned int v11 = 2 * v4;
        if (2 * v4 >= v4 + 1000000) {
          unsigned int v11 = v4 + 1000000;
        }
        if (v11 > v10) {
          unsigned int v10 = v11;
        }
        if (v10 <= 8) {
          unsigned int v4 = 8;
        }
        else {
          unsigned int v4 = v10;
        }
        uint64_t v12 = LDOObject_BorrowAllocator(v7);
        uint64_t v13 = OOCAllocator_Realloc(v12, v5, 8 * v4, &OOCObject_LuaLDOLabel);
        uint64_t v17 = v13;
        if (OOCObject_LuaLDOLabel) {
          goto LABEL_2;
        }
        uint64_t v5 = v13;
        LODWORD(v16) = v4;
        uint64_t v6 = (char *)(v13 + (v9 & 0x7FFFFFFF8));
        unsigned int v18 = v6;
      }
      cstdlib_memcpy(v6, &__src, 8uLL);
      uint64_t v6 = v18 + 8;
      v18 += 8;
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
    }
    while (lua_next(a1, 2));
  }
  uint64_t v14 = v20;
  int OOCObject_LuaLDOLabel = LDOLabel_AddNodes(v20, (uint64_t)&v16);
  if (OOCObject_LuaLDOLabel)
  {
LABEL_2:
    LODWORD(v16) = 0;
    if (v17)
    {
      uint64_t v2 = LDOObject_BorrowAllocator(v20);
      OOCAllocator_Free(v2, v17);
      uint64_t v17 = 0;
    }
    unsigned int v18 = 0;
    return LuaVMUtil_error(a1, "Error in ldolabel:add_nodes");
  }
  LODWORD(v16) = 0;
  if (v17)
  {
    uint64_t v15 = LDOObject_BorrowAllocator(v14);
    OOCAllocator_Free(v15, v17);
  }
  return 0;
}

uint64_t removeNode_LuaLDOLabel(void *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v4)) {
    return LuaVMUtil_error(a1, "Error in ldolabel:remove_node");
  }
  if (getOOCObject_LuaLDOTreeNode(a1, 2, &v3)) {
    return LuaVMUtil_error(a1, "Error in ldolabel:remove_node");
  }
  uint64_t result = LDOLabel_RemoveNode(v4, v3);
  if (result) {
    return LuaVMUtil_error(a1, "Error in ldolabel:remove_node");
  }
  return result;
}

uint64_t computeText_LuaLDOLabel(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (getOOCObject_LuaLDOLabel(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
  }
  int v2 = LDOLabel_ComputeText(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldo:get_label_text");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOLabel(uint64_t *a1)
{
  newMetatableLua(a1, "vocalizer.LDOLabel");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  getMetatableLua(a1, "vocalizer.LDOObject");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  lua_setmetatable(a1, -2);
  luaL_setfuncs(a1, (uint64_t)&lib_m_0, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal((uint64_t)a1, "LDOLabel");
  return 0;
}

uint64_t getOOCObject_LuaLDOLabelSet(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)luaL_checkudata(a1, a2, "vocalizer.LDOLabelSet");
  if (v4)
  {
    *a3 = *v4;
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t pushLuaObject_LuaLDOLabelSet(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (void *)lua_newuserdata((uint64_t)a1, 8uLL);
  if (v4)
  {
    *uint64_t v4 = a2;
    getMetatableLua(a1, "vocalizer.LDOLabelSet");
    lua_setmetatable(a1, -2);
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t getLabels_LuaLDOLabelSet(uint64_t *a1)
{
  uint64_t v7 = 0;
  if (!getOOCObject_LuaLDOLabelSet(a1, 1, &v7))
  {
    uint64_t v3 = *(uint64_t **)(v7 + 24);
    unint64_t v4 = *(void *)(v7 + 32);
    lua_createtable((uint64_t)a1, 0, 0);
    if ((unint64_t)v3 >= v4) {
      return 1;
    }
    int v5 = 0;
    while (!pushLuaObject_LuaLDOLabel(a1, *v3))
    {
      uint64_t v6 = LuaVMUtil_u32_index_to_luainteger(v5);
      lua_rawseti(a1, -2, v6);
      ++v5;
      if ((unint64_t)++v3 >= v4) {
        return 1;
      }
    }
  }

  return LuaVMUtil_error(a1, "Error in ldolabelset:getLabels");
}

uint64_t addLabel_LuaLDOLabelSet(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v6)
    || getOOCObject_LuaLDOLabel(a1, 2, &v5)
    || LDOLabelSet_AddLabel(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabelset:addLabel");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t removeLabel_LuaLDOLabelSet(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v6)
    || getOOCObject_LuaLDOLabel(a1, 2, &v5)
    || LDOLabelSet_RemoveLabel(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldolabelset:removeLabel");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t getNumberLabels_LuaLDOLabelSet(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldolabelset:getNumberLabels");
  }
  else
  {
    unsigned int NumberLabels = LDOLabelSet_GetNumberLabels(v4);
    lua_pushinteger((uint64_t)a1, NumberLabels);
    return 1;
  }
}

uint64_t computeOverlappingLabels_LuaLDOLabelSet(uint64_t *a1)
{
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  uint64_t v8 = 0;
  int v7 = 0;
  if (!getOOCObject_LuaLDOLabelSet(a1, 1, &v12)
    && !LuaVMUtil_luainteger_to_u32_index(a1, 2, (_DWORD *)&v8 + 1)
    && !LuaVMUtil_luainteger_to_u32_index(a1, 3, &v8)
    && !LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 4, &v7))
  {
    uint64_t v2 = v12;
    if (!LDOLabelSet_ComputeOverlappingLabels(v12, HIDWORD(v8), v8, v7, (unsigned int *)&v9))
    {
      lua_createtable((uint64_t)a1, 0, 0);
      uint64_t v3 = v10;
      if ((unint64_t)v10 >= v11)
      {
LABEL_10:
        if (!LDOLabelSet_FreeLDOLabelVector((uint64_t)v2, (uint64_t)&v9)) {
          return 1;
        }
      }
      else
      {
        int v4 = 0;
        while (!pushLuaObject_LuaLDOLabel(a1, *v3))
        {
          uint64_t v5 = LuaVMUtil_u32_index_to_luainteger(v4);
          lua_rawseti(a1, -2, v5);
          ++v4;
          if ((unint64_t)++v3 >= v11) {
            goto LABEL_10;
          }
        }
      }
    }
  }
  LDOLabelSet_FreeLDOLabelVector((uint64_t)v12, (uint64_t)&v9);
  return LuaVMUtil_error(a1, "Error in ldolabelset:computeOverlappingLabels");
}

uint64_t toString_LuaLDOLabelSet(void *a1)
{
  uint64_t v6 = 0;
  int v7 = 0;
  if (getOOCObject_LuaLDOLabelSet(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
  }
  int v2 = LDOLabelSet_ToString(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldolabelset:tostring");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOLabelSet(void *a1)
{
  newMetatableLua(a1, "vocalizer.LDOLabelSet");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  luaL_setfuncs(a1, (uint64_t)&lib_m_1, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal((uint64_t)a1, "LDOLabelSet");
  return 0;
}

uint64_t getOOCObject_LuaLDOObject(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)luaL_checkudata(a1, a2, "vocalizer.LDOObject");
  if (v4)
  {
    *a3 = *v4;
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t pushLuaObject_LuaLDOObject(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (void *)lua_newuserdata((uint64_t)a1, 8uLL);
  if (v4)
  {
    *uint64_t v4 = a2;
    getMetatableLua(a1, "vocalizer.LDOObject");
    lua_setmetatable(a1, -2);
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t getID_LuaLDOObject(void *a1)
{
  uint64_t v3 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v3))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:getID");
  }
  else
  {
    lua_pushinteger((uint64_t)a1, *(unsigned int *)(v3 + 16));
    return 1;
  }
}

uint64_t getCategory_LuaLDOObject(void *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v4) || LDOObject_GetCategory(v4, (uint64_t *)&v3)) {
    return LuaVMUtil_error(a1, "Error in ldoobject:getCategory");
  }
  lua_pushstring((uint64_t)a1, v3);
  return 1;
}

uint64_t getType_LuaLDOObject(void *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v4) || LDOObject_GetType(v4, (uint64_t *)&v3)) {
    return LuaVMUtil_error(a1, "Error in ldoobject:getType");
  }
  lua_pushstring((uint64_t)a1, v3);
  return 1;
}

uint64_t setCategory_LuaLDOObject(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || LDOObject_SetCategory(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:setCategory");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t setType_LuaLDOObject(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || LDOObject_SetType(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:setType");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t isEqual_LuaLDOObject(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6) || getOOCObject_LuaLDOObject(a1, 2, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:isEqual");
  }
  else
  {
    BOOL IsEqual = LDOObject_IsEqual(v6, v5);
    BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsEqual);
    lua_pushBOOLean((uint64_t)a1, v4);
    return 1;
  }
}

uint64_t getAttribute_LuaLDOObject(void *a1)
{
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  if (!getOOCObject_LuaLDOObject(a1, 1, &v13)
    && !LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v12))
  {
    if (v12)
    {
      uint64_t v3 = v13;
      if (!LDOObject_GetS32Attribute(v13, v12, (_DWORD *)&v11 + 1, (_DWORD *)&v10 + 1))
      {
        if (HIDWORD(v11) == 1)
        {
          uint64_t v4 = SHIDWORD(v10);
LABEL_9:
          lua_pushinteger((uint64_t)a1, v4);
          return 1;
        }
        if (!LDOObject_GetU32Attribute(v3, v12, (_DWORD *)&v11 + 1, &v11))
        {
          if (HIDWORD(v11) == 1)
          {
            uint64_t v4 = v11;
            goto LABEL_9;
          }
          if (!LDOObject_GetBoolAttribute(v3, v12, (_DWORD *)&v11 + 1, &v10))
          {
            if (HIDWORD(v11) == 1)
            {
              lua_pushBOOLean((uint64_t)a1, v10);
              return 1;
            }
            if (!LDOObject_GetStringAttribute(v3, v12, (_DWORD *)&v11 + 1, (uint64_t *)&v9))
            {
              if (HIDWORD(v11) == 1)
              {
                lua_pushstring((uint64_t)a1, v9);
                return 1;
              }
              if (!LDOObject_GetListU32Attribute(v3, v12, (_DWORD *)&v11 + 1, &v8, &v7))
              {
                if (HIDWORD(v11) == 1)
                {
                  lua_createtable((uint64_t)a1, 0, 0);
                  if (v7)
                  {
                    for (unint64_t i = 0; i < v7; ++i)
                    {
                      lua_pushinteger((uint64_t)a1, *(unsigned int *)(v8 + 4 * i));
                      uint64_t v6 = LuaVMUtil_u32_index_to_luainteger(i);
                      lua_rawseti(a1, -2, v6);
                    }
                    OOCAllocator_Free(v3[1], v8);
                  }
                }
                else
                {
                  lua_pushnil((uint64_t)a1);
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return LuaVMUtil_error(a1, "Error in ldoobject:getAttribute");
}

uint64_t setAttribute_LuaLDOObject(void *a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (!getOOCObject_LuaLDOObject(a1, 1, &v11)
    && !LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v10)
    && v10)
  {
    if (lua_isinteger(a1, 3))
    {
      if (!LuaVMUtil_luainteger_to_s32(a1, 3, (_DWORD *)&v9 + 1))
      {
        if (v9 < 0)
        {
          LDOObject_SetS32Attribute(v11, v10, SHIDWORD(v9));
          if (!v6) {
            goto LABEL_24;
          }
        }
        else
        {
          LDOObject_SetU32Attribute(v11, v10, SHIDWORD(v9));
          if (!v4)
          {
LABEL_24:
            uint64_t v2 = 1;
            BOOL v7 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
            lua_pushBOOLean((uint64_t)a1, v7);
            return v2;
          }
        }
      }
    }
    else if (lua_type(a1, 3) == 1)
    {
      if (!LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 3, &v9))
      {
        LDOObject_SetBoolAttribute(v11, v10, v9);
        if (!v5) {
          goto LABEL_24;
        }
      }
    }
    else if (lua_isstring(a1, 3))
    {
      if (!LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v8)
        && v8
        && !LDOObject_SetStringAttribute(v11, v10, v8))
      {
        goto LABEL_24;
      }
    }
    else if (lua_type(a1, 3) != 5 || !hlp_set_listu32_attribute(a1, v11, v10))
    {
      goto LABEL_24;
    }
  }
  return LuaVMUtil_error(a1, "Error in ldoobject:setAttribute");
}

uint64_t hlp_set_listu32_attribute(void *a1, uint64_t a2, char *a3)
{
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  uint64_t v5 = LuaVMUtil_luatable_to_u32array(a1, 3, *(void *)(a2 + 8), (uint64_t *)&v8, &v7);
  if (!v5) {
    uint64_t v5 = LDOObject_SetListU32Attribute(a2, a3, v8, v7);
  }
  if (v8) {
    OOCAllocator_Free(*(void *)(a2 + 8), (uint64_t)v8);
  }
  return v5;
}

uint64_t getAttributes_LuaLDOObject(void *a1)
{
  uint64_t v18 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v18))
  {
LABEL_2:
    return LuaVMUtil_error(a1, "Error in ldoobject:getAttributes");
  }
  else
  {
    unint64_t v3 = *(void *)(v18 + 32);
    unint64_t v4 = *(void *)(v18 + 40);
    lua_createtable((uint64_t)a1, 0, 0);
    while (v3 < v4)
    {
      int v6 = *(_DWORD *)(v3 + 8);
      uint64_t v5 = *(unsigned int *)(v3 + 12);
      uint64_t v7 = *(int *)(v3 + 16);
      uint64_t v8 = *(void *)(v3 + 24);
      uint64_t v9 = (char *)LHString_BorrowCPtr(*(void *)v3);
      lua_pushstring((uint64_t)a1, v9);
      switch(v6)
      {
        case 0:
          uint64_t v10 = (uint64_t)a1;
          uint64_t v11 = v5;
          goto LABEL_10;
        case 1:
          uint64_t v10 = (uint64_t)a1;
          uint64_t v11 = v7;
LABEL_10:
          lua_pushinteger(v10, v11);
          break;
        case 2:
          uint64_t v12 = (char *)LHString_BorrowCPtr(v8);
          lua_pushstring((uint64_t)a1, v12);
          break;
        case 3:
          lua_createtable((uint64_t)a1, 0, 0);
          uint64_t v13 = *(unsigned int **)(v8 + 8);
          if ((unint64_t)v13 < *(void *)(v8 + 16))
          {
            int v14 = 0;
            do
            {
              unsigned int v15 = *v13++;
              lua_pushinteger((uint64_t)a1, v15);
              uint64_t v16 = LuaVMUtil_u32_index_to_luainteger(v14);
              lua_rawseti(a1, -2, v16);
              ++v14;
            }
            while ((unint64_t)v13 < *(void *)(v8 + 16));
          }
          break;
        case 4:
          BOOL v17 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
          lua_pushBOOLean((uint64_t)a1, v17);
          break;
        default:
          goto LABEL_2;
      }
      lua_settable(a1, -3);
      v3 += 32;
    }
    return 1;
  }
}

uint64_t removeAttribute_LuaLDOObject(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || !v5
    || LDOObject_RemoveAttribute(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:removeAttribute");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t removeAttributes_LuaLDOObject(void *a1)
{
  BOOL v4 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v4) || LDOObject_RemoveAttributes(v4))
  {
    return LuaVMUtil_error(a1, "Error in ldoobject:removeAttributes");
  }
  else
  {
    BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
    lua_pushBOOLean((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t toString_LuaLDOObject(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (getOOCObject_LuaLDOObject(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
  }
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 24))(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldoobject:tostring");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOObject(void *a1)
{
  newMetatableLua(a1, "vocalizer.LDOObject");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  luaL_setfuncs(a1, (uint64_t)&lib_m_2, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal((uint64_t)a1, "LDOObject");
  return 0;
}

uint64_t getOOCObject_LuaLDOTreeNode(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)luaL_checkudata(a1, a2, "vocalizer.LDOTreeNode");
  if (v4)
  {
    *a3 = *v4;
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t pushLuaObject_LuaLDOTreeNode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (void *)lua_newuserdata((uint64_t)a1, 8uLL);
  if (v4)
  {
    *uint64_t v4 = a2;
    getMetatableLua(a1, "vocalizer.LDOTreeNode");
    lua_setmetatable(a1, -2);
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t isRoot_LuaLDOTreeNode(void *a1)
{
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:isRoot");
  }
  else
  {
    BOOL IsRoot = LDOTreeNode_IsRoot(v5);
    BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsRoot);
    lua_pushBOOLean((uint64_t)a1, v4);
    return 1;
  }
}

uint64_t isLeaf_LuaLDOTreeNode(void *a1)
{
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:isLeaf");
  }
  else
  {
    BOOL IsLeaf = LDOTreeNode_IsLeaf(v5);
    BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsLeaf);
    lua_pushBOOLean((uint64_t)a1, v4);
    return 1;
  }
}

uint64_t computeText_LuaLDOTreeNode(void *a1)
{
  uint64_t v6 = 0;
  size_t v7 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
  }
  int v2 = LDOTreeNode_ComputeText(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldotreenode:computeText");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t setText_LuaLDOTreeNode(void *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v6)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v5)
    || !v5
    || LDOTreeNode_SetText(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:setText");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t getParent_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v4 = 0;
  if (!getOOCObject_LuaLDOTreeNode(a1, 1, &v4))
  {
    uint64_t v3 = *(void *)(v4 + 64);
    if (v3)
    {
      if (!pushLuaObject_LuaLDOTreeNode(a1, v3)) {
        return 1;
      }
    }
  }

  return LuaVMUtil_error(a1, "Error in ldotreenode:getParent");
}

uint64_t getChildren_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v7 = 0;
  if (!getOOCObject_LuaLDOTreeNode(a1, 1, &v7))
  {
    uint64_t v3 = *(uint64_t **)(v7 + 80);
    unint64_t v4 = *(void *)(v7 + 88);
    lua_createtable((uint64_t)a1, 0, 0);
    if ((unint64_t)v3 >= v4) {
      return 1;
    }
    int v5 = 0;
    while (!pushLuaObject_LuaLDOTreeNode(a1, *v3))
    {
      uint64_t v6 = LuaVMUtil_u32_index_to_luainteger(v5);
      lua_rawseti(a1, -2, v6);
      ++v5;
      if ((unint64_t)++v3 >= v4) {
        return 1;
      }
    }
  }

  return LuaVMUtil_error(a1, "Error in ldotreenode:getChildren");
}

uint64_t getNumberChildren_LuaLDOTreeNode(void *a1)
{
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:getNumberChildren");
  }
  else
  {
    NumberChildreuint64_t n = LDOTreeNode_GetNumberChildren(v5);
    uint64_t v4 = LuaVMUtil_u32_to_luainteger(NumberChildren);
    lua_pushinteger((uint64_t)a1, v4);
    return 1;
  }
}

uint64_t getParentFrom_LuaLDOTreeNode(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:getParentFrom");
  }
  else
  {
    uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 104));
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t getParentTo_LuaLDOTreeNode(void *a1)
{
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:getParentTo");
  }
  else
  {
    uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(v4 + 108));
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t setParent_LuaLDOTreeNode(void *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4)
    || LDOTreeNode_SetParent(v5, v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:setParent");
  }
  else
  {
    BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
    lua_pushBOOLean((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t getPreviousSibling_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4) || LDOTreeNode_GetPreviousSibling(v4, &v3)) {
    return LuaVMUtil_error(a1, "Error in ldotreenode:get_previous_sibling");
  }
  if (v3)
  {
    if (pushLuaObject_LuaLDOTreeNode(a1, v3)) {
      return LuaVMUtil_error(a1, "Error in ldotreenode:get_previous_sibling");
    }
  }
  else
  {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t getNextSibling_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4) || LDOTreeNode_GetNextSibling(v4, &v3)) {
    return LuaVMUtil_error(a1, "Error in ldotreenode:get_next_sibling");
  }
  if (v3)
  {
    if (pushLuaObject_LuaLDOTreeNode(a1, v3)) {
      return LuaVMUtil_error(a1, "Error in ldotreenode:get_next_sibling");
    }
  }
  else
  {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t computeRoot_LuaLDOTreeNode(uint64_t *a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v4)
    || LDOTreeNode_ComputeRoot(v4, &v3)
    || pushLuaObject_LuaLDOTreeNode(a1, v3))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeRoot");
  }
  else
  {
    return 1;
  }
}

uint64_t computeAbsoluteFrom_LuaLDOTreeNode(void *a1)
{
  uint64_t v5 = 0;
  int v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5) || LDOTreeNode_ComputeAbsoluteFrom(v5, &v4)) {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeAbsoluteFrom");
  }
  uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t computeAbsoluteTo_LuaLDOTreeNode(void *a1)
{
  size_t v5 = 0;
  int v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5) || LDOTreeNode_ComputeAbsoluteTo(v5, &v4)) {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeAbsoluteTo");
  }
  uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t computeUpdateInfo_LuaLDOTreeNode(void *a1)
{
  char __s = 0;
  *(void *)uint64_t v7 = 0;
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, v7)
    || LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&__s)
    || !__s
    || LDOTreeNode_ComputeUpdateInfo(*(size_t *)v7, __s, (_DWORD *)&v5 + 1, &v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeUpdateInfo");
  }
  uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(SHIDWORD(v5));
  lua_pushinteger((uint64_t)a1, v3);
  uint64_t v4 = LuaVMUtil_s32_to_luainteger(v5);
  lua_pushinteger((uint64_t)a1, v4);
  return 2;
}

uint64_t removeChildAtIndex_LuaLDOTreeNode(void *a1)
{
  uint64_t v6 = 0;
  unsigned int v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v6)
    || LuaVMUtil_luainteger_to_u32_index(a1, 2, &v5)
    || LDOTreeNode_RemoveChildAtIndex(v6, v5))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:removeChildAtIndex");
  }
  uint64_t v2 = 1;
  BOOL v4 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
  lua_pushBOOLean((uint64_t)a1, v4);
  return v2;
}

uint64_t removeChild_LuaLDOTreeNode(void *a1)
{
  BOOL v4 = 0;
  uint64_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4)
    || LDOTreeNode_RemoveChild(v5, v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:removeChild");
  }
  else
  {
    BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(1);
    lua_pushBOOLean((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t compareTo_LuaLDOTreeNode(void *a1)
{
  size_t v4 = 0;
  size_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:compareTo");
  }
  else
  {
    int v3 = LDOTreeNode_CompareTo(v5, v4);
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t compareToWithID_LuaLDOTreeNode(void *a1)
{
  size_t v4 = 0;
  size_t v5 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || getOOCObject_LuaLDOTreeNode(a1, 2, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:compareToWithID");
  }
  else
  {
    int v3 = LDOTreeNode_CompareToWithID(v5, v4);
    lua_pushinteger((uint64_t)a1, v3);
    return 1;
  }
}

uint64_t computeIndexInParent_LuaLDOTreeNode(void *a1)
{
  uint64_t v5 = 0;
  int v4 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v5)
    || LDOTreeNode_ComputeIndexInParent(v5, &v4))
  {
    return LuaVMUtil_error(a1, "Error in ldotreenode:computeIndexInParent");
  }
  uint64_t v3 = LuaVMUtil_u32_index_to_luainteger(v4);
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t toString_LuaLDOTreeNode(void *a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (getOOCObject_LuaLDOTreeNode(a1, 1, &v7)) {
    return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
  }
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 24))(v7, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
    }
LABEL_4:
    uint64_t v4 = LDOString_BorrowAllocator(v3);
    OOC_PlacementDeleteObject(v4, v6);
    uint64_t v6 = 0;
    return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
  }
  if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v6))
  {
    uint64_t v3 = v6;
    if (!v6) {
      return LuaVMUtil_error(a1, "Error in ldotreenode:tostring");
    }
    goto LABEL_4;
  }
  return 1;
}

uint64_t luaopen_LDOTreeNode(uint64_t *a1)
{
  newMetatableLua(a1, "vocalizer.LDOTreeNode");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  getMetatableLua(a1, "vocalizer.LDOObject");
  lua_pushvalue(a1, -1);
  lua_setfield(a1, -2, "__index");
  lua_setmetatable(a1, -2);
  luaL_setfuncs(a1, (uint64_t)&lib_m_3, 0, v2, v3, v4, v5, v6);
  lua_createtable((uint64_t)a1, 0, 0);
  lua_setglobal((uint64_t)a1, "LDOTreeNode");
  return 0;
}

uint64_t init_LuaLog(void *a1)
{
  if (lua_type(a1, 1) == 2 && lua_type(a1, 2) == 2 && lua_type(a1, 3) == 2)
  {
    if (lua_type(a1, 4) == 2 && lua_type(a1, 5) == 2)
    {
      lua_setfield(a1, -1001000, "LUA_LOG_PEAK_ALLOCATED_BYTES");
      lua_setfield(a1, -1001000, "LUA_LOG_ALLOCATED_BYTES");
    }
    lua_setfield(a1, -1001000, "LUA_LOG_PMODULE");
    lua_setfield(a1, -1001000, "LUA_LOG_HHEAP");
    lua_setfield(a1, -1001000, "LUA_LOG_HLOG");
  }
  return 0;
}

uint64_t getLevel_LuaLog(void *a1)
{
  if (lua_getfield(a1, -1001000, "LUA_LOG_HLOG") == 2)
  {
    uint64_t v2 = lua_touserdata(a1, -1);
    uint64_t LogLevel = log_GetLogLevel(v2);
  }
  else
  {
    uint64_t LogLevel = 0;
  }
  uint64_t v4 = LuaVMUtil_u32_to_luainteger(LogLevel);
  lua_pushinteger((uint64_t)a1, v4);
  return 1;
}

uint64_t log_LuaLog(void *a1)
{
  int v2 = lua_gettop((uint64_t)a1);
  if (v2)
  {
    int v3 = v2;
    if (lua_isstring(a1, 1))
    {
      uint64_t v4 = lua_tolstring(a1, 1, 0);
      if (v3 >= 2 && lua_isinteger(a1, 2)) {
        uint64_t v5 = lua_tointegerx(a1, 2, 0);
      }
      else {
        uint64_t v5 = 4;
      }
      if (lua_getfield(a1, -1001000, "LUA_LOG_HLOG") == 2)
      {
        uint64_t v6 = lua_touserdata(a1, -1);
        if (log_GetLogLevel(v6) >= v5
          && lua_getfield(a1, -1001000, "LUA_LOG_PMODULE") == 2)
        {
          uint64_t v7 = lua_touserdata(a1, -1);
          log_OutText(v6, v7, v5, 0, (uint64_t)"[lua] %s", v8, v9, v10, v4);
          lua_gettop((uint64_t)a1);
        }
      }
    }
  }
  return 0;
}

uint64_t logvm_LuaLog(void *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v13 = 0u;
  *(void *)__s2 = 0;
  uint64_t v11 = 0;
  if (lua_getfield(a1, -1001000, "LUA_LOG_HLOG") == 2)
  {
    uint64_t v2 = lua_touserdata(a1, -1);
    if (log_GetLogLevel(v2) >= 4 && lua_getfield(a1, -1001000, "LUA_LOG_PMODULE") == 2)
    {
      uint64_t v3 = lua_touserdata(a1, -1);
      if (lua_getfield(a1, -1001000, "LUA_LOG_ALLOCATED_BYTES"))
      {
        uint64_t v4 = (unsigned int *)lua_touserdata(a1, -1);
        if (lua_getfield(a1, -1001000, "LUA_LOG_PEAK_ALLOCATED_BYTES"))
        {
          uint64_t v5 = (unsigned int *)lua_touserdata(a1, -1);
          cstdlib_strcpy(__dst, "LUA VM bytes: allocated=");
          LH_itoa(*v4, __s2, 0xAu);
          cstdlib_strcat(__dst, __s2);
          cstdlib_strcat(__dst, " peak=");
          LH_itoa(*v5, __s2, 0xAu);
          cstdlib_strcat(__dst, __s2);
          log_OutText(v2, v3, 4, 0, (uint64_t)"[lua] %s", v6, v7, v8, (uint64_t)__dst);
        }
      }
    }
  }
  return 0;
}

uint64_t luaopen_Log(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 3);
  luaL_setfuncs(a1, (uint64_t)&lib_m_4, 0, v2, v3, v4, v5, v6);
  lua_setglobal((uint64_t)a1, "Log");
  return 0;
}

uint64_t hlpCopyFieldSepartorToCString(uint64_t result, unsigned char *a2)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t hlpGetDctHandleAndInterface(void *a1, void *a2, _OWORD *a3)
{
  if (lua_getfield(a1, -1001000, "LUA_DICTIONARYLOOKUP_PSPIOBJSTDCTLKP") == 2)
  {
    uint64_t v6 = lua_touserdata(a1, -1);
    *a2 = *(void *)(v6 + 8);
    *a3 = *(_OWORD *)(v6 + 16);
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t hlpGetPartNumber(uint64_t a1, uint64_t a2, uint64_t a3, char *__s1, char *a5)
{
  uint64_t v10 = 0;
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t v11 = "tn";
  while (cstdlib_strcmp(__s1, v11))
  {
    uint64_t v11 = FE_DCT_TO_PARAM_NAME_MAP[v10 + 2];
    v10 += 2;
    if (v10 == 8)
    {
      uint64_t result = 0;
      char v13 = 1;
LABEL_6:
      *a5 = v13;
      return result;
    }
  }
  __c[0] = 0;
  long long v14 = FE_DCT_TO_PARAM_NAME_MAP[v10 + 1];
  if (cstdlib_strncmp(__s1, "ext_", 4uLL)) {
    long long v15 = "fecfg";
  }
  else {
    long long v15 = "ext_fecfg";
  }
  *a5 = 1;
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, v15, v14, &__c[3], &__c[1], __c) & 0x80000000) != 0)return err_GenerateErrorArg(); {
  if (*(_WORD *)&__c[1])
  }
  {
    long long v16 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v16) {
      char *v16 = 0;
    }
    char v13 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    uint64_t result = 0;
    goto LABEL_6;
  }
  return 0;
}

uint64_t hlpParseField(char *a1, const char *a2, uint64_t a3, char **a4)
{
  uint64_t v5 = cstdlib_strstr(a1, a2);
  *a4 = v5;
  if (v5)
  {
    *uint64_t v5 = 0;
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t hlpSplitAndPush(void *a1, const char *a2, const char *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v15 = 0;
  memset(v14, 0, sizeof(v14));
  lua_createtable((uint64_t)a1, 0, 0);
  if (a2)
  {
    unsigned int v6 = cstdlib_strlen(a2);
    if (v6 >= 0x100) {
      size_t v7 = 256;
    }
    else {
      size_t v7 = v6;
    }
    cstdlib_strncpy((char *)v14, a2, v7);
    *((unsigned char *)v14 + v7) = *a3;
    uint64_t v8 = cstdlib_strstr((char *)v14, a3);
    if (v8)
    {
      uint64_t v9 = v8;
      int v10 = 0;
      uint64_t v11 = (char *)v14;
      do
      {
        *uint64_t v9 = 0;
        lua_pushstring((uint64_t)a1, v11);
        uint64_t v12 = LuaVMUtil_u32_index_to_luainteger(v10);
        lua_rawseti(a1, -2, v12);
        ++v10;
        uint64_t v11 = v9 + 1;
        uint64_t v9 = cstdlib_strstr(v9 + 1, a3);
      }
      while (v9);
    }
  }
  return 0;
}

uint64_t hlpSplitAndPushTN(void *a1, char *__s1, char *__s2)
{
  unsigned int v6 = cstdlib_strstr(__s1, __s2);
  size_t v7 = v6;
  if (v6)
  {
    *unsigned int v6 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  uint64_t v8 = v7 + 1;
  uint64_t v9 = cstdlib_strstr(v8, __s2);
  int v10 = v9;
  if (v9)
  {
    *uint64_t v9 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  uint64_t v11 = v10 + 1;
  uint64_t v12 = cstdlib_strstr(v11, __s2);
  char v13 = v12;
  if (v12)
  {
    *uint64_t v12 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  long long v14 = v13 + 1;
  char v15 = cstdlib_strstr(v14, __s2);
  uint64_t v16 = v15;
  if (v15)
  {
    *char v15 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  long long v17 = v16 + 1;
  long long v18 = cstdlib_strstr(v17, __s2);
  long long v19 = v18;
  if (v18)
  {
    *long long v18 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushstring((uint64_t)a1, __s1);
  lua_setfield(a1, -2, "norm_orth");
  lua_pushstring((uint64_t)a1, v8);
  lua_setfield(a1, -2, "tn_label");
  lua_pushstring((uint64_t)a1, v11);
  lua_setfield(a1, -2, "domain_label");
  lua_pushstring((uint64_t)a1, v14);
  lua_setfield(a1, -2, "std_orth");
  int v21 = cstdlib_atoi((unsigned __int8 *)v17);
  lua_pushinteger((uint64_t)a1, v21);
  lua_setfield(a1, -2, "sens");
  int v22 = cstdlib_atoi((unsigned __int8 *)v19 + 1);
  lua_pushinteger((uint64_t)a1, v22);
  lua_setfield(a1, -2, "prio");
  return 0;
}

uint64_t hlpSplitAndPushG2P(void *a1, char *__s1, char *__s2)
{
  unsigned int v6 = cstdlib_strstr(__s1, __s2);
  size_t v7 = v6;
  if (v6)
  {
    *unsigned int v6 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  uint64_t v8 = v7 + 1;
  uint64_t v9 = cstdlib_strstr(v8, __s2);
  int v10 = v9;
  if (v9)
  {
    *uint64_t v9 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  uint64_t v11 = v10 + 1;
  uint64_t v12 = cstdlib_strstr(v11, __s2);
  char v13 = v12;
  if (v12)
  {
    *uint64_t v12 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  long long v14 = v13 + 1;
  char v15 = cstdlib_strstr(v14, __s2);
  uint64_t v16 = v15;
  if (v15)
  {
    *char v15 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  long long v17 = v16 + 1;
  long long v18 = cstdlib_strstr(v17, __s2);
  long long v19 = v18;
  if (v18)
  {
    *long long v18 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  long long v20 = v19 + 1;
  int v21 = cstdlib_strstr(v20, __s2);
  int v22 = v21;
  if (v21)
  {
    *int v21 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  long long v23 = v22 + 1;
  long long v24 = cstdlib_strstr(v23, __s2);
  long long v25 = v24;
  if (v24)
  {
    char *v24 = 0;
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  long long v26 = v25 + 1;
  long long v27 = cstdlib_strstr(v26, __s2);
  uint64_t v28 = v27;
  if (v27)
  {
    *long long v27 = 0;
LABEL_32:
    unint64_t v31 = v28 + 1;
    goto LABEL_33;
  }
  int ErrorArg = err_GenerateErrorArg();
  unint64_t v31 = v26;
  if (!ErrorArg) {
    goto LABEL_32;
  }
LABEL_33:
  int v32 = v31;
  lua_createtable((uint64_t)a1, 0, 0);
  lua_pushstring((uint64_t)a1, __s1);
  lua_setfield(a1, -2, "phon");
  lua_pushstring((uint64_t)a1, v8);
  lua_setfield(a1, -2, "tn_label");
  lua_pushstring((uint64_t)a1, v11);
  lua_setfield(a1, -2, "domain_label");
  lua_pushstring((uint64_t)a1, v14);
  lua_setfield(a1, -2, "pos");
  lua_pushstring((uint64_t)a1, v17);
  lua_setfield(a1, -2, "cgn");
  int v33 = cstdlib_atoi((unsigned __int8 *)v20);
  lua_pushinteger((uint64_t)a1, v33);
  lua_setfield(a1, -2, "prio");
  lua_pushstring((uint64_t)a1, v23);
  lua_setfield(a1, -2, "mde");
  lua_pushstring((uint64_t)a1, v26);
  lua_setfield(a1, -2, "lng");
  lua_pushstring((uint64_t)a1, v32);
  lua_setfield(a1, -2, "extra");
  return 0;
}

uint64_t hlpLookupTNG2P(void *a1, char *a2, uint64_t (*a3)(void *, void, unsigned char *))
{
  *(void *)&long long v19 = safeh_GetNullHandle();
  *((void *)&v19 + 1) = v6;
  uint64_t v18 = 0;
  unsigned __int8 v16 = 0;
  unsigned __int16 v15 = 0;
  char v14 = 0;
  uint64_t result = lua_isstring(a1, 1);
  if (result)
  {
    uint64_t v17 = 0;
    uint64_t v8 = lua_tolstring(a1, 1, 0);
    uint64_t result = hlpGetDctHandleAndInterface(a1, &v18, &v19);
    if (!result)
    {
      uint64_t v9 = v18;
      long long v10 = v19;
      uint64_t result = hlpGetPartNumber(v18, v19, *((uint64_t *)&v19 + 1), a2, (char *)&v16);
      if (!result)
      {
        if (((*(uint64_t (**)(void, void, char *, uint64_t, uint64_t *, unsigned __int16 *, char *, void, void))(v9 + 240))(v10, *((void *)&v10 + 1), a2, v8, &v17, &v15, &v14, v16, 0) & 0x80000000) != 0)
        {
          return err_GenerateErrorArg();
        }
        else
        {
          v13[0] = v14;
          v13[1] = 0;
          lua_createtable((uint64_t)a1, 0, 0);
          if (v15)
          {
            for (unint64_t i = 0; i < v15; ++i)
            {
              uint64_t result = a3(a1, *(void *)(v17 + 8 * i), v13);
              if (result) {
                break;
              }
              uint64_t v12 = LuaVMUtil_u32_index_to_luainteger(i);
              lua_rawseti(a1, -2, v12);
              uint64_t result = 0;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

char *hlpTerminateMultiwordSequenceAfterCntWords(char *a1, unsigned int *a2)
{
  uint64_t result = cstdlib_strchr(a1, 32);
  unsigned int v4 = *a2;
  BOOL v5 = result != 0;
  unsigned int v6 = 1;
  if (*a2 >= 2 && result != 0)
  {
    do
    {
      uint64_t result = cstdlib_strchr(result + 1, 32);
      ++v6;
      unsigned int v4 = *a2;
      BOOL v5 = result != 0;
    }
    while (v6 < *a2 && result != 0);
  }
  if (v5)
  {
    *uint64_t result = 0;
    unsigned int v4 = *a2;
  }
  if (v6 < v4) {
    *a2 = v6;
  }
  return result;
}

uint64_t hlpGetLengthLongestMultiword(uint64_t a1, uint64_t a2, uint64_t a3, char *__s2, uint64_t a5, unsigned int *a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  memset(v19, 0, sizeof(v19));
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  *(_DWORD *)__s1 = 2003658086;
  cstdlib_strcat(__s1, __s2);
  if (((*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, __s1, a5, &__c[3], &__c[1], __c) & 0x80000000) != 0)return err_GenerateErrorArg(); {
  if (*(_WORD *)&__c[1] && *(void *)&__c[3])
  }
  {
    uint64_t v11 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v11) {
      *uint64_t v11 = 0;
    }
    unsigned int v12 = LH_atou(**(const char ***)&__c[3]);
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 0;
    unsigned int v12 = 1;
  }
  *a6 = v12;
  return result;
}

uint64_t init_LuaDictionaryLookup(void *a1)
{
  if (lua_type(a1, 1) == 2) {
    lua_setfield(a1, -1001000, "LUA_DICTIONARYLOOKUP_PSPIOBJSTDCTLKP");
  }
  return 0;
}

uint64_t getFEConfigurationParameterValue_LuaDictionaryLookup(void *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  char v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v10 = 0u;
  *(void *)&long long v8 = safeh_GetNullHandle();
  *((void *)&v8 + 1) = v2;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  if (lua_isstring(a1, 1))
  {
    uint64_t v3 = lua_tolstring(a1, 1, 0);
    if (lua_isstring(a1, 2))
    {
      unsigned int v4 = (const char *)lua_tolstring(a1, 2, 0);
      cstdlib_strncpy(__dst, v4, 0x100uLL);
    }
    else
    {
      cstdlib_strcpy(__dst, "");
    }
    if (!hlpGetDctHandleAndInterface(a1, &v7, &v8))
    {
      if (((*(uint64_t (**)(void, void, uint64_t, char *, char **))(v7 + 256))(v8, *((void *)&v8 + 1), v3, __dst, &v6) & 0x80000000) == 0)
      {
        lua_pushstring((uint64_t)a1, v6);
        return 1;
      }
      err_GenerateErrorArg();
    }
  }
  return LuaVMUtil_error(a1, "Error in DictionaryLookup:get_fe_parameter_value");
}

uint64_t singleLookup_LuaDictionaryLookup(void *a1)
{
  *(void *)&long long v15 = safeh_GetNullHandle();
  *((void *)&v15 + 1) = v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  unsigned __int8 v12 = 0;
  unsigned __int16 __c_1 = -1;
  unsigned __int8 __c = 0;
  if (!lua_isstring(a1, 1)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  }
  if (!lua_isstring(a1, 2)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  }
  uint64_t v3 = (char *)lua_tolstring(a1, 1, 0);
  uint64_t v4 = lua_tolstring(a1, 2, 0);
  if (hlpGetDctHandleAndInterface(a1, &v14, &v15)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  }
  uint64_t v5 = v14;
  long long v6 = v15;
  if (hlpGetPartNumber(v14, v15, *((uint64_t *)&v15 + 1), v3, (char *)&v12)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  }
  if (((*(uint64_t (**)(void, void, char *, uint64_t, char ***, unsigned __int16 *, unsigned __int8 *, void, void))(v5 + 240))(v6, *((void *)&v6 + 1), v3, v4, &v13, &__c_1, &__c, v12, 0) & 0x80000000) != 0)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup");
  }
  int v8 = __c_1;
  if (__c_1 && v13)
  {
    uint64_t v9 = cstdlib_strchr(*v13, __c);
    if (v9) {
      *uint64_t v9 = 0;
    }
    int v8 = __c_1;
  }
  if (v8) {
    lua_pushstring((uint64_t)a1, *v13);
  }
  else {
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t singleLookupMultiword_LuaDictionaryLookup(void *a1)
{
  *(void *)&long long v23 = safeh_GetNullHandle();
  *((void *)&v23 + 1) = v2;
  *(void *)&__c[3] = 0;
  uint64_t v22 = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  unsigned int v20 = 1;
  uint64_t Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup_multiword");
  }
  uint64_t v4 = Rsrc;
  if (hlpGetDctHandleAndInterface(a1, &v22, &v23)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup_multiword");
  }
  if (!lua_isstring(a1, 1)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup_multiword");
  }
  if (!lua_isstring(a1, 2)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup_multiword");
  }
  uint64_t v5 = (char *)lua_tolstring(a1, 1, 0);
  long long v6 = (const char *)lua_tolstring(a1, 2, 0);
  uint64_t v7 = *(void *)(v4 + 8);
  size_t v8 = cstdlib_strlen(v6);
  uint64_t v9 = (char *)heap_Alloc(v7, v8 + 1);
  if (!v9) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup_multiword");
  }
  long long v10 = v9;
  unsigned int v19 = 0;
  cstdlib_strcpy(v9, v6);
  long long v11 = hlpTerminateMultiwordSequenceAfterCntWords(v10, &v20);
  uint64_t v12 = v22;
  long long v13 = v23;
  int LengthLongestMultiword = hlpGetLengthLongestMultiword(v22, v23, *((uint64_t *)&v23 + 1), v5, (uint64_t)v10, &v19);
  if (v11) {
    *long long v11 = 32;
  }
  if (LengthLongestMultiword)
  {
LABEL_9:
    heap_Free(*(void **)(v4 + 8), (uint64_t)v10);
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:single_lookup_multiword");
  }
  if (v19)
  {
    while (1)
    {
      hlpTerminateMultiwordSequenceAfterCntWords(v10, &v19);
      if (((*(uint64_t (**)(void, void, char *, char *, unsigned char *, unsigned char *, unsigned char *))(v12 + 96))(v13, *((void *)&v13 + 1), v5, v10, &__c[3], &__c[1], __c) & 0x80000000) != 0)
      {
        err_GenerateErrorArg();
        goto LABEL_9;
      }
      if (*(_WORD *)&__c[1] && *(void *)&__c[3] != 0) {
        break;
      }
      if (!--v19) {
        goto LABEL_25;
      }
    }
    long long v18 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v18) {
      *long long v18 = 0;
    }
  }
LABEL_25:
  if (*(_WORD *)&__c[1])
  {
    lua_pushstring((uint64_t)a1, v10);
    lua_pushstring((uint64_t)a1, **(char ***)&__c[3]);
    lua_pushinteger((uint64_t)a1, v19);
    uint64_t v15 = 3;
  }
  else
  {
    lua_pushnil((uint64_t)a1);
    uint64_t v15 = 1;
  }
  heap_Free(*(void **)(v4 + 8), (uint64_t)v10);
  return v15;
}

uint64_t multipleLookup_LuaDictionaryLookup(void *a1)
{
  *(void *)&long long v18 = safeh_GetNullHandle();
  *((void *)&v18 + 1) = v2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unsigned __int8 v15 = 0;
  unsigned __int16 v14 = 0;
  char v13 = 0;
  int v11 = 0;
  if (!lua_isstring(a1, 1)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  }
  if (!lua_isstring(a1, 2)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  }
  uint64_t v3 = (char *)lua_tolstring(a1, 1, 0);
  uint64_t v4 = lua_tolstring(a1, 2, 0);
  if (LuaVMUtil_luaBOOLean_to_lhBOOL(a1, 3, &v11)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  }
  if (hlpGetDctHandleAndInterface(a1, &v17, &v18)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  }
  uint64_t v5 = v17;
  long long v6 = v18;
  if (hlpGetPartNumber(v17, v18, *((uint64_t *)&v18 + 1), v3, (char *)&v15)) {
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  }
  if (((*(uint64_t (**)(void, void, char *, uint64_t, uint64_t *, unsigned __int16 *, char *, void, void))(v5 + 240))(v6, *((void *)&v6 + 1), v3, v4, &v16, &v14, &v13, v15, 0) & 0x80000000) != 0)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in DictionaryLookup:multiple_lookup");
  }
  v12[0] = v13;
  v12[1] = 0;
  lua_createtable((uint64_t)a1, 0, 0);
  if (!v14) {
    goto LABEL_18;
  }
  for (unint64_t i = 0; i < v14; ++i)
  {
    uint64_t v9 = *(char **)(v16 + 8 * i);
    if (v11 == 1) {
      hlpSplitAndPush(a1, v9, v12);
    }
    else {
      lua_pushstring((uint64_t)a1, v9);
    }
    uint64_t v10 = LuaVMUtil_u32_index_to_luainteger(i);
    lua_rawseti(a1, -2, v10);
  }
  if (v14) {
    lua_pushstring((uint64_t)a1, v12);
  }
  else {
LABEL_18:
  }
    lua_pushnil((uint64_t)a1);
  return 2;
}

uint64_t tnLookup_LuaDictionaryLookup(void *a1)
{
  if (!hlpLookupTNG2P(a1, "tn", (uint64_t (*)(void *, void, unsigned char *))hlpSplitAndPushTN)) {
    return 1;
  }

  return LuaVMUtil_error(a1, "Error in DictionaryLookup:tn_lookup");
}

uint64_t g2pLookup_LuaDictionaryLookup(void *a1)
{
  if (!hlpLookupTNG2P(a1, "g2p", (uint64_t (*)(void *, void, unsigned char *))hlpSplitAndPushG2P)) {
    return 1;
  }

  return LuaVMUtil_error(a1, "Error in DictionaryLookup:g2p_lookup");
}

uint64_t luaopen_DictionaryLookup(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 6);
  luaL_setfuncs(a1, (uint64_t)&lib_m_5, 0, v2, v3, v4, v5, v6);
  lua_setglobal((uint64_t)a1, "DictionaryLookup");
  return 0;
}

uint64_t hlpGetDctEgHandleAndInterface(void *a1, void *a2, _OWORD *a3)
{
  if (lua_getfield(a1, -1001000, "LUA_DICTIONARYENGINE_PSPIOBJSTDCTEG") == 2)
  {
    uint64_t v6 = lua_touserdata(a1, -1);
    *a2 = *(void *)(v6 + 8);
    *a3 = *(_OWORD *)(v6 + 16);
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t init_LuaDictionaryEngine(void *a1)
{
  if (lua_type(a1, 1) == 2) {
    lua_setfield(a1, -1001000, "LUA_DICTIONARYENGINE_PSPIOBJSTDCTEG");
  }
  return 0;
}

uint64_t checkProtectURLHashtag_LuaDictionaryEngine(void *a1)
{
  *(void *)&long long v8 = safeh_GetNullHandle();
  *((void *)&v8 + 1) = v2;
  uint64_t v7 = 0;
  int v6 = 0;
  if (lua_isstring(a1, 1)
    && (uint64_t v3 = lua_tolstring(a1, 1, 0), !hlpGetDctEgHandleAndInterface(a1, &v7, &v8)))
  {
    if (((*(uint64_t (**)(void, void, uint64_t, int *))(v7 + 128))(v8, *((void *)&v8 + 1), v3, &v6) & 0x80000000) != 0)
    {
      return err_GenerateErrorArg();
    }
    else
    {
      BOOL v5 = LuaVMUtil_lhBOOL_to_luaBOOLean(v6);
      lua_pushBOOLean((uint64_t)a1, v5);
      return 1;
    }
  }
  else
  {
    return LuaVMUtil_error(a1, "Error in DictionaryEngine:check_protect_url_hashtag");
  }
}

uint64_t luaopen_DictionaryEngine(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 1);
  luaL_setfuncs(a1, (uint64_t)&lib_m_6, 0, v2, v3, v4, v5, v6);
  lua_setglobal((uint64_t)a1, "DictionaryEngine");
  return 0;
}

uint64_t init_LuaParameters(void *a1)
{
  if (lua_type(a1, 1) == 2) {
    lua_setfield(a1, -1001000, "LUA_PARAMETERS_PPARAMC");
  }
  return 0;
}

uint64_t get_LuaParameters(void *a1)
{
  if (lua_isstring(a1, 1))
  {
    uint64_t v2 = lua_tolstring(a1, 1, 0);
    return hlpGetString_LuaParameters(a1, v2);
  }
  else
  {
    return LuaVMUtil_error(a1, "Error in Parameters.get");
  }
}

uint64_t hlpGetString_LuaParameters(void *a1, uint64_t a2)
{
  uint64_t v7 = 0;
  if (lua_getfield(a1, -1001000, "LUA_PARAMETERS_PPARAMC") != 2) {
    return LuaVMUtil_error(a1, "Error in Parameters.hlpGetString");
  }
  uint64_t v4 = lua_touserdata(a1, -1);
  if (!v4) {
    return LuaVMUtil_error(a1, "Error in Parameters.hlpGetString");
  }
  uint64_t v5 = v4;
  if ((paramc_ParamGetStr(v4, a2, &v7) & 0x1FFF) == 0x14)
  {
    uint64_t v7 = 0;
  }
  else if (v7)
  {
    lua_pushstring((uint64_t)a1, v7);
    goto LABEL_8;
  }
  lua_pushnil((uint64_t)a1);
LABEL_8:
  if ((paramc_ParamRelease(v5) & 0x80000000) == 0) {
    return 1;
  }
  return LuaVMUtil_error(a1, "Error in Parameters.hlpGetString");
}

uint64_t getFEVoice_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"fevoice");
}

uint64_t getLanguage_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"language");
}

uint64_t getLanguageCode_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langcode");
}

uint64_t getLanguageGroup_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langgroup");
}

uint64_t getLanguageID_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langid");
}

uint64_t getLanguageIETF_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langietf");
}

uint64_t getLanguageVersion_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"langversion");
}

uint64_t getVoice_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voice");
}

uint64_t getVoiceAge_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"age");
}

uint64_t getVoiceGender_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"gender");
}

uint64_t getVoiceID_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceid");
}

uint64_t getVoiceModel_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voicemodel");
}

uint64_t getVoiceOperatingPoint_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceoperatingpoint");
}

uint64_t getVoicePitchBaseline_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"pitch_baseline");
}

uint64_t getVoiceRateBaseline_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"rate_baseline");
}

uint64_t getVoiceTimbreBaseline_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"timbre_baseline");
}

uint64_t getVoiceVersion_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceversion");
}

uint64_t getVoiceVolumeBaseline_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"volume_baseline");
}

uint64_t getVopVersion_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"vopversion");
}

uint64_t getMLSet_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"mlset");
}

uint64_t getNoCLMSet_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"noclmset");
}

uint64_t getCLM_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"clm");
}

uint64_t getVoiceML_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"voiceml");
}

uint64_t getExtCLCCFG_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"extclccfg");
}

uint64_t getExtraEscLang_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"extraesclang");
}

uint64_t getExtraEscTN_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"extraesctn");
}

uint64_t getExtendedReferences_LuaParameters(void *a1)
{
  return hlpGetString_LuaParameters(a1, (uint64_t)"extendedreferences");
}

uint64_t luaopen_Parameters(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 28);
  luaL_setfuncs(a1, (uint64_t)&lib_m_7, 0, v2, v3, v4, v5, v6);
  lua_setglobal((uint64_t)a1, "Parameters");
  return 0;
}

uint64_t hlpReadStringInputTable(void *a1, int a2, uint64_t a3, unsigned int *a4, uint64_t *a5)
{
  unsigned int v18 = 0;
  lua_len(a1, a2);
  int v10 = lua_gettop((uint64_t)a1);
  uint64_t result = LuaVMUtil_luainteger_to_u32(a1, v10, &v18);
  if (!result)
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    uint64_t v12 = v18;
    if (!v18) {
      return 0;
    }
    if (*a4)
    {
      if (*a4 != v18) {
        return 0;
      }
    }
    else
    {
      *a4 = v18;
    }
    uint64_t v13 = heap_Alloc(*(void *)(a3 + 8), 8 * v12);
    if (v13)
    {
      uint64_t v14 = v13;
      lua_pushnil((uint64_t)a1);
      unsigned int v18 = 0;
      while (lua_next(a1, a2))
      {
        int v15 = lua_gettop((uint64_t)a1);
        uint64_t result = lua_isstring(a1, v15);
        if (!result) {
          return result;
        }
        uint64_t v16 = lua_tolstring(a1, v15, 0);
        unsigned int v17 = v18;
        *(void *)(v14 + 8 * v18) = v16;
        unsigned int v18 = v17 + 1;
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
      }
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      uint64_t result = 0;
      *a5 = v14;
    }
    else
    {
      return err_GenerateErrorResource();
    }
  }
  return result;
}

uint64_t hlpGetOutputTables(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = 4 * a2;
  uint64_t v8 = heap_Alloc(*(void *)(a1 + 8), v7);
  *a3 = v8;
  if (v8)
  {
    uint64_t v9 = heap_Alloc(*(void *)(a1 + 8), v7);
    *a4 = v9;
    if (v9) {
      return 0;
    }
  }

  return err_GenerateErrorResource();
}

void hlpWriteOutputTables(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  lua_createtable((uint64_t)a1, 0, 0);
  if (a2)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = LuaVMUtil_u32_to_luainteger(*(unsigned int *)(a3 + 4 * v8));
      lua_pushinteger((uint64_t)a1, v9);
      uint64_t v10 = LuaVMUtil_u32_index_to_luainteger(v8);
      lua_rawseti(a1, -2, v10);
      ++v8;
    }
    while (a2 != v8);
    lua_createtable((uint64_t)a1, 0, 0);
    uint64_t v11 = 0;
    do
    {
      lua_pushnumber((uint64_t)a1, *(float *)(a4 + 4 * v11));
      uint64_t v12 = LuaVMUtil_u32_index_to_luainteger(v11);
      lua_rawseti(a1, -2, v12);
      ++v11;
    }
    while (a2 != v11);
  }
  else
  {
    lua_createtable((uint64_t)a1, 0, 0);
  }
}

void hlpWriteOutputTablesWithIndexes(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  lua_createtable((uint64_t)a1, 0, 0);
  if (a2)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = LuaVMUtil_u32_index_to_luainteger(*(_DWORD *)(a3 + 4 * v8));
      lua_pushinteger((uint64_t)a1, v9);
      uint64_t v10 = LuaVMUtil_u32_index_to_luainteger(v8);
      lua_rawseti(a1, -2, v10);
      ++v8;
    }
    while (a2 != v8);
    lua_createtable((uint64_t)a1, 0, 0);
    uint64_t v11 = 0;
    do
    {
      lua_pushnumber((uint64_t)a1, *(float *)(a4 + 4 * v11));
      uint64_t v12 = LuaVMUtil_u32_index_to_luainteger(v11);
      lua_rawseti(a1, -2, v12);
      ++v11;
    }
    while (a2 != v11);
  }
  else
  {
    lua_createtable((uint64_t)a1, 0, 0);
  }
}

uint64_t luaopen_NN(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 16);
  luaL_setfuncs(a1, (uint64_t)&lib_m_8, 0, v2, v3, v4, v5, v6);
  lua_setglobal((uint64_t)a1, "NN");
  return 0;
}

uint64_t ToBeSpelled_QueryModelExists_LuaNN(void *a1)
{
  uint64_t v7 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    long long v8 = 0uLL;
    if (!auxGetObjectHandleAndInterface(Objc, &v7, &v8))
    {
      int v4 = (*(uint64_t (**)(void, void))(v7 + 56))(v8, *((void *)&v8 + 1));
      BOOL v5 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
      lua_pushBOOLean((uint64_t)a1, v5);
      objc_ReleaseObject(v3, (uint64_t)"FE_NN");
      return 1;
    }
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in NN.ToBeSpelled_QueryModelExists_LuaNN");
}

uint64_t ToBeSpelled_Predict_LuaNN(void *a1)
{
  uint64_t v9 = 0;
  int v8 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      long long v10 = 0uLL;
      uint64_t v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v9, &v10))
      {
        int v5 = (*(uint64_t (**)(void, void, uint64_t, int *))(v9 + 64))(v10, *((void *)&v10 + 1), v4, &v8);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        if ((v5 & 0x80000000) == 0)
        {
          BOOL v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v8);
          lua_pushBOOLean((uint64_t)a1, v6);
          return 1;
        }
      }
    }
  }
  else
  {
    err_GenerateErrorArg();
  }
  return LuaVMUtil_error(a1, "Error in NN:ToBeSpelled_Predict_LuaNN");
}

uint64_t G2POneWord_QueryModelExists_LuaNN(void *a1)
{
  uint64_t v7 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    long long v8 = 0uLL;
    if (!auxGetObjectHandleAndInterface(Objc, &v7, &v8))
    {
      int v4 = (*(uint64_t (**)(void, void))(v7 + 72))(v8, *((void *)&v8 + 1));
      BOOL v5 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
      lua_pushBOOLean((uint64_t)a1, v5);
      objc_ReleaseObject(v3, (uint64_t)"FE_NN");
      return 1;
    }
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in NN.G2POneWord_QueryModelExists_LuaNN");
}

uint64_t G2POneWord_Predict_LuaNN(void *a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      long long v9 = 0uLL;
      uint64_t v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        int v5 = (*(uint64_t (**)(void, void, uint64_t, char **))(v8 + 80))(v9, *((void *)&v9 + 1), v4, &v7);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        if ((v5 & 0x80000000) == 0)
        {
          lua_pushstring((uint64_t)a1, v7);
          return 1;
        }
      }
    }
  }
  else
  {
    err_GenerateErrorArg();
  }
  return LuaVMUtil_error(a1, "Error in NN:ToBeSpelled_Predict_LuaNN");
}

uint64_t CGN_QueryModelExists_LuaNN(void *a1)
{
  uint64_t v8 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      long long v9 = 0uLL;
      uint64_t v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        int v5 = (*(uint64_t (**)(void, void, uint64_t))(v8 + 88))(v9, *((void *)&v9 + 1), v4);
        BOOL v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
        lua_pushBOOLean((uint64_t)a1, v6);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        return 1;
      }
    }
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in NN.CGN_QueryModelExists_LuaNN");
}

uint64_t CGN_Predict_LuaNN(void *a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  }
  uint64_t v3 = Objc;
  if (!lua_isstring(a1, 1)) {
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  }
  uint64_t v4 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2)) {
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  }
  uint64_t v5 = lua_tolstring(a1, 2, 0);
  if (LuaVMUtil_luainteger_to_u32_index(a1, 3, (_DWORD *)&v10 + 1)) {
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  }
  long long v13 = 0uLL;
  if (auxGetObjectHandleAndInterface(v3, &v12, &v13)) {
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  }
  int v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void, uint64_t *, uint64_t *))(v12 + 96))(v13, *((void *)&v13 + 1), v4, v5, WORD2(v10), &v11, &v10);
  objc_ReleaseObject(v3, (uint64_t)"FE_NN");
  if (v6 < 0) {
    return LuaVMUtil_error(a1, "Error in NN:CGN_Predict_LuaNN");
  }
  lua_createtable((uint64_t)a1, 0, 0);
  if (!v10) {
    return 1;
  }
  unint64_t v7 = 0;
  do
  {
    lua_pushnumber((uint64_t)a1, *(float *)(v11 + 4 * v7));
    uint64_t v8 = LuaVMUtil_u32_index_to_luainteger(v7);
    lua_rawseti(a1, -2, v8);
    ++v7;
    uint64_t result = 1;
  }
  while (v7 < v10);
  return result;
}

uint64_t TN_QueryModelExists_LuaNN(void *a1)
{
  uint64_t v8 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      long long v9 = 0uLL;
      uint64_t v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        int v5 = (*(uint64_t (**)(void, void, uint64_t))(v8 + 104))(v9, *((void *)&v9 + 1), v4);
        BOOL v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
        lua_pushBOOLean((uint64_t)a1, v6);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        return 1;
      }
    }
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in NN.TN_QueryModelExists_LuaNN");
}

uint64_t TN_Predict_LuaNN(void *a1)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  uint64_t v3 = Objc;
  if (!lua_isstring(a1, 1)) {
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  uint64_t v4 = lua_tolstring(a1, 1, 0);
  if (LuaVMUtil_luainteger_to_u32_index(a1, 2, (_DWORD *)&v11 + 1)) {
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  if (!lua_isstring(a1, 3)) {
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  uint64_t v5 = lua_tolstring(a1, 3, 0);
  if (LuaVMUtil_luainteger_to_u32_index(a1, 4, &v11)) {
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  if (LuaVMUtil_luainteger_to_u32_index(a1, 5, (_DWORD *)&v10 + 1)) {
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  long long v14 = 0uLL;
  if (auxGetObjectHandleAndInterface(v3, &v13, &v14)) {
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  int v6 = (*(uint64_t (**)(void, void, uint64_t, void, uint64_t, void, void, uint64_t *, uint64_t *))(v13 + 112))(v14, *((void *)&v14 + 1), v4, WORD2(v11), v5, (unsigned __int16)v11, WORD2(v10), &v12, &v10);
  objc_ReleaseObject(v3, (uint64_t)"FE_NN");
  if (v6 < 0) {
    return LuaVMUtil_error(a1, "Error in NN:TN_Predict_LuaNN");
  }
  lua_createtable((uint64_t)a1, 0, 0);
  if (!v10) {
    return 1;
  }
  unint64_t v7 = 0;
  do
  {
    lua_pushnumber((uint64_t)a1, *(float *)(v12 + 4 * v7));
    uint64_t v8 = LuaVMUtil_u32_index_to_luainteger(v7);
    lua_rawseti(a1, -2, v8);
    ++v7;
    uint64_t result = 1;
  }
  while (v7 < v10);
  return result;
}

uint64_t CLM_QueryModelExists_LuaNN(void *a1)
{
  uint64_t v8 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    if (lua_isstring(a1, 1))
    {
      long long v9 = 0uLL;
      uint64_t v4 = lua_tolstring(a1, 1, 0);
      if (!auxGetObjectHandleAndInterface(v3, &v8, &v9))
      {
        int v5 = (*(uint64_t (**)(void, void, uint64_t))(v8 + 120))(v9, *((void *)&v9 + 1), v4);
        BOOL v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(v5);
        lua_pushBOOLean((uint64_t)a1, v6);
        objc_ReleaseObject(v3, (uint64_t)"FE_NN");
        return 1;
      }
    }
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in NN.CLM_QueryModelExists_LuaNN");
}

uint64_t CLM_Predict_LuaNN(void *a1)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unsigned int v17 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc || (uint64_t v3 = Objc, (Rsrc = LuaVMUtil_GetRsrc(a1)) == 0))
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in NN:CLM_Predict_LuaNN");
  }
  uint64_t v5 = Rsrc;
  if (!lua_isstring(a1, 1))
  {
    char v10 = 0;
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  uint64_t v6 = lua_tolstring(a1, 1, 0);
  int v7 = hlpReadStringInputTable(a1, 2, v5, &v17, &v22);
  uint64_t v8 = v22;
  if (v7)
  {
    uint64_t v9 = 0;
    char v10 = 0;
    if (!v22) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (!v22)
  {
    lua_createtable((uint64_t)a1, 0, 0);
    lua_createtable((uint64_t)a1, 0, 0);
    uint64_t v9 = 2;
    char v10 = 1;
    goto LABEL_15;
  }
  if (hlpReadStringInputTable(a1, 3, v5, &v17, &v21)) {
    goto LABEL_11;
  }
  uint64_t v12 = v21;
  if (!v21) {
    goto LABEL_31;
  }
  if (hlpReadStringInputTable(a1, 4, v5, &v17, &v20))
  {
LABEL_11:
    uint64_t v9 = 0;
    char v10 = 0;
    goto LABEL_12;
  }
  uint64_t v13 = v20;
  if (!v20)
  {
LABEL_31:
    lua_createtable((uint64_t)a1, 0, 0);
    lua_createtable((uint64_t)a1, 0, 0);
    goto LABEL_32;
  }
  if (hlpGetOutputTables(v5, v17, &v18, &v19)) {
    goto LABEL_11;
  }
  long long v24 = 0uLL;
  if (auxGetObjectHandleAndInterface(v3, &v23, &v24)) {
    goto LABEL_11;
  }
  uint64_t v14 = v18;
  uint64_t v15 = v19;
  int v16 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, uint64_t))(v23 + 128))(v24, *((void *)&v24 + 1), v6, v8, v12, v13, &v17, v18, v19);
  objc_ReleaseObject(v3, (uint64_t)"FE_NN");
  if (v16 < 0) {
    goto LABEL_11;
  }
  hlpWriteOutputTablesWithIndexes(a1, v17, v14, v15);
LABEL_32:
  char v10 = 1;
  uint64_t v9 = 2;
LABEL_12:
  heap_Free(*(void **)(v5 + 8), v8);
  if (v21) {
    heap_Free(*(void **)(v5 + 8), v21);
  }
LABEL_15:
  if (v20) {
    heap_Free(*(void **)(v5 + 8), v20);
  }
  if (v18) {
    heap_Free(*(void **)(v5 + 8), v18);
  }
  if (v19) {
    heap_Free(*(void **)(v5 + 8), v19);
  }
  if ((v10 & 1) == 0) {
    return LuaVMUtil_error(a1, "Error in NN:CLM_Predict_LuaNN");
  }
  return v9;
}

uint64_t Diacritizer_QueryModelExists_LuaNN(void *a1)
{
  uint64_t v7 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    long long v8 = 0uLL;
    if (!auxGetObjectHandleAndInterface(Objc, &v7, &v8))
    {
      int v4 = (*(uint64_t (**)(void, void))(v7 + 136))(v8, *((void *)&v8 + 1));
      BOOL v5 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
      lua_pushBOOLean((uint64_t)a1, v5);
      objc_ReleaseObject(v3, (uint64_t)"FE_NN");
      return 1;
    }
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in NN.Diacritizer_QueryModelExists_LuaNN");
}

uint64_t Diacritizer_Predict_LuaNN(void *a1)
{
  uint64_t v16 = 0;
  unsigned int v15 = 0;
  unsigned int v14 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc || (uint64_t v3 = Objc, (Rsrc = LuaVMUtil_GetRsrc(a1)) == 0))
  {
    err_GenerateErrorArg();
LABEL_12:
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  if (ooc_utils_createAllocator_UseHeapHandle((uint64_t)v10, *(void *)(Rsrc + 8))) {
    goto LABEL_12;
  }
  if (LuaVMUtil_luatable_to_u32array(a1, 1, (uint64_t)v10, &v13, &v15)) {
    goto LABEL_12;
  }
  long long v17 = 0uLL;
  if (auxGetObjectHandleAndInterface(v3, &v16, &v17)) {
    goto LABEL_12;
  }
  int v5 = (*(uint64_t (**)(void, void, uint64_t, void, uint64_t *, unsigned int *))(v16 + 144))(v17, *((void *)&v17 + 1), v13, v15, &v12, &v14);
  objc_ReleaseObject(v3, (uint64_t)"FE_NN");
  if (v5 < 0) {
    goto LABEL_12;
  }
  lua_createtable((uint64_t)a1, 0, 0);
  if (v14)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 1;
    do
    {
      lua_pushinteger((uint64_t)a1, *(unsigned int *)(v12 + 4 * v6));
      uint64_t v8 = LuaVMUtil_u32_index_to_luainteger(v6);
      lua_rawseti(a1, -2, v8);
      ++v6;
    }
    while (v6 < v14);
  }
  else
  {
    uint64_t v7 = 1;
  }
LABEL_13:
  if (v13) {
    OOCAllocator_Free((uint64_t)v10, v13);
  }
  return v7;
}

uint64_t URL_QueryModelExists_LuaNN(void *a1)
{
  uint64_t v7 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    long long v8 = 0uLL;
    if (!auxGetObjectHandleAndInterface(Objc, &v7, &v8))
    {
      int v4 = (*(uint64_t (**)(void, void))(v7 + 152))(v8, *((void *)&v8 + 1));
      BOOL v5 = LuaVMUtil_lhBOOL_to_luaBOOLean(v4);
      lua_pushBOOLean((uint64_t)a1, v5);
      objc_ReleaseObject(v3, (uint64_t)"FE_NN");
      return 1;
    }
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in NN.URL_QueryModelExists_LuaNN");
}

uint64_t URL_Predict_LuaNN(void *a1)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unsigned int v12 = 0;
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    err_GenerateErrorArg();
    uint64_t Rsrc = 0;
    char v8 = 0;
    goto LABEL_14;
  }
  uint64_t Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    err_GenerateErrorArg();
    goto LABEL_13;
  }
  if (!lua_isstring(a1, 1)) {
    goto LABEL_13;
  }
  uint64_t v4 = lua_tolstring(a1, 1, 0);
  if (ooc_utils_createAllocator_UseHeapHandle((uint64_t)v10, *(void *)(Rsrc + 8))
    || LuaVMUtil_luatable_to_u32array(a1, 2, (uint64_t)v10, &v14, &v12))
  {
    goto LABEL_13;
  }
  if (!v14)
  {
    lua_createtable((uint64_t)a1, 0, 0);
    lua_createtable((uint64_t)a1, 0, 0);
    goto LABEL_25;
  }
  if (hlpGetOutputTables(Rsrc, v12, &v13, &v15)
    || (long long v17 = 0uLL, auxGetObjectHandleAndInterface(Objc, &v16, &v17))
    || (uint64_t v5 = v15,
        uint64_t v6 = v13,
        int v7 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, uint64_t, uint64_t))(v16 + 160))(v17, *((void *)&v17 + 1), v4, v14, &v12, v13, v15), objc_ReleaseObject(Objc, (uint64_t)"FE_NN"), v7 < 0))
  {
LABEL_13:
    char v8 = 0;
    uint64_t Objc = 0;
    goto LABEL_14;
  }
  hlpWriteOutputTables(a1, v12, v6, v5);
LABEL_25:
  uint64_t Objc = 2;
  char v8 = 1;
LABEL_14:
  if (v14) {
    OOCAllocator_Free((uint64_t)v10, v14);
  }
  if (Rsrc)
  {
    if (v13) {
      heap_Free(*(void **)(Rsrc + 8), v13);
    }
    if (v15) {
      heap_Free(*(void **)(Rsrc + 8), v15);
    }
  }
  if ((v8 & 1) == 0) {
    return LuaVMUtil_error(a1, "Error in NN:URL_Predict_LuaNN");
  }
  return Objc;
}

uint64_t auxGetObjectHandleAndInterface(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v7 = 0;
  if ((objc_GetObject(a1, (uint64_t)"FE_NN", &v7) & 0x80000000) != 0) {
    return err_GenerateErrorArg();
  }
  uint64_t v5 = v7;
  if (!v7) {
    return err_GenerateErrorArg();
  }
  uint64_t result = 0;
  *a2 = *(void *)(v7 + 8);
  *a3 = *(_OWORD *)(v5 + 16);
  return result;
}

uint64_t luaopen_CLM(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 5);
  luaL_setfuncs(a1, (uint64_t)&lib_m_9, 0, v2, v3, v4, v5, v6);
  lua_setglobal((uint64_t)a1, "CLM");
  return 0;
}

uint64_t CLM_TokenizeLHP_LuaCLM(void *a1)
{
  uint64_t v14 = 0;
  int v13 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in CLM.TokenizeLHP");
  }
  uint64_t v3 = Objc;
  uint64_t Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    err_GenerateErrorArg();
LABEL_9:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.TokenizeLHP");
  }
  uint64_t v5 = Rsrc;
  if (!lua_isstring(a1, 1)) {
    goto LABEL_9;
  }
  uint64_t v6 = (const char *)lua_tolstring(a1, 1, 0);
  size_t v7 = (2 * cstdlib_strlen(v6)) | 1;
  uint64_t v8 = heap_Alloc(*(void *)(v5 + 8), v7);
  if (!v8) {
    goto LABEL_9;
  }
  uint64_t v9 = (char *)v8;
  long long v15 = 0uLL;
  if (auxGetObjectHandleAndInterface_0(v3, &v14, &v15)
    || ((*(uint64_t (**)(void, void, const char *, char *, size_t, int *))(v14 + 80))(v15, *((void *)&v15 + 1), v6, v9, v7, &v13) & 0x80000000) != 0)
  {
    char v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    lua_pushstring((uint64_t)a1, v9);
    lua_pushBOOLean((uint64_t)a1, v13 == 1);
    uint64_t v11 = 2;
    char v10 = 1;
  }
  heap_Free(*(void **)(v5 + 8), (uint64_t)v9);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if ((v10 & 1) == 0) {
    return LuaVMUtil_error(a1, "Error in CLM.TokenizeLHP");
  }
  return v11;
}

uint64_t CLM_ConvertLHP_LuaCLM(void *a1)
{
  uint64_t v12 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (Objc)
  {
    uint64_t v3 = Objc;
    uint64_t Rsrc = LuaVMUtil_GetRsrc(a1);
    if (Rsrc)
    {
      uint64_t v5 = Rsrc;
      if (lua_isstring(a1, 1))
      {
        uint64_t v6 = lua_tolstring(a1, 1, 0);
        if (lua_isstring(a1, 2))
        {
          size_t v7 = (const char *)lua_tolstring(a1, 2, 0);
          uint64_t v8 = 4 * cstdlib_strlen(v7) + 4;
          uint64_t v9 = heap_Calloc(*(void **)(v5 + 8), 1, v8);
          if (v9)
          {
            char v10 = (char *)v9;
            long long v13 = 0uLL;
            if (!auxGetObjectHandleAndInterface_0(v3, &v12, &v13))
            {
              (*(void (**)(void, void, uint64_t, const char *, char *, void, void, uint64_t))(v12 + 64))(v13, *((void *)&v13 + 1), v6, v7, v10, 0, 0, v8);
              lua_pushstring((uint64_t)a1, v10);
              heap_Free(*(void **)(v5 + 8), (uint64_t)v10);
              objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
              return 1;
            }
            heap_Free(*(void **)(v5 + 8), (uint64_t)v10);
          }
        }
      }
    }
    else
    {
      err_GenerateErrorArg();
    }
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  }
  else
  {
    err_GenerateErrorArg();
  }

  return LuaVMUtil_error(a1, "Error in CLM.ConvertLHP");
}

uint64_t CLM_ConvertAndAlignLHP_LuaCLM(void *a1)
{
  uint64_t v18 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    err_GenerateErrorArg();
    goto LABEL_13;
  }
  uint64_t v3 = Objc;
  uint64_t Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    err_GenerateErrorArg();
LABEL_12:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    goto LABEL_13;
  }
  uint64_t v5 = Rsrc;
  if (!lua_isstring(a1, 1)) {
    goto LABEL_12;
  }
  uint64_t v6 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2)) {
    goto LABEL_12;
  }
  size_t v7 = (const char *)lua_tolstring(a1, 2, 0);
  uint64_t v8 = 16 * cstdlib_strlen(v7) + 16;
  uint64_t v9 = (char *)heap_Calloc(*(void **)(v5 + 8), 1, v8);
  char v10 = (char *)heap_Calloc(*(void **)(v5 + 8), 1, v8);
  uint64_t v11 = heap_Calloc(*(void **)(v5 + 8), 1, v8);
  uint64_t v12 = (char *)v11;
  if (v9 && v10 && v11)
  {
    long long v19 = 0uLL;
    if (auxGetObjectHandleAndInterface_0(v3, &v18, &v19))
    {
      uint64_t v13 = 0;
      char v14 = 0;
    }
    else
    {
      if (((*(uint64_t (**)(void, void, uint64_t, const char *, char *, char *, char *, uint64_t))(v18 + 64))(v19, *((void *)&v19 + 1), v6, v7, v9, v10, v12, v8) & 0x80000000) != 0)
      {
        *char v10 = 0;
        *uint64_t v12 = 0;
      }
      lua_pushstring((uint64_t)a1, v9);
      if (cstdlib_strlen(v10) && cstdlib_strlen(v12))
      {
        lua_pushstring((uint64_t)a1, v10);
        lua_pushstring((uint64_t)a1, v12);
      }
      else
      {
        lua_pushnil((uint64_t)a1);
        lua_pushnil((uint64_t)a1);
      }
      char v14 = 1;
      uint64_t v13 = 3;
    }
    goto LABEL_25;
  }
  uint64_t v13 = 0;
  char v14 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  if (v9)
  {
LABEL_25:
    heap_Free(*(void **)(v5 + 8), (uint64_t)v9);
    uint64_t v16 = v13;
    char v17 = v14;
  }
  if (v10) {
    heap_Free(*(void **)(v5 + 8), (uint64_t)v10);
  }
  if (v12) {
    heap_Free(*(void **)(v5 + 8), (uint64_t)v12);
  }
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if (v17) {
    return v16;
  }
LABEL_13:

  return LuaVMUtil_error(a1, "Error in CLM.ConvertLHP");
}

uint64_t CLM_RemoveInvalidLHP_LuaCLM(void *a1)
{
  uint64_t v15 = 0;
  int v14 = 0;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in CLM.RemoveInvalidLHP");
  }
  uint64_t v3 = Objc;
  uint64_t Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    err_GenerateErrorArg();
LABEL_10:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.RemoveInvalidLHP");
  }
  uint64_t v5 = Rsrc;
  if (!lua_isstring(a1, 1)) {
    goto LABEL_10;
  }
  uint64_t v6 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2)) {
    goto LABEL_10;
  }
  size_t v7 = (const char *)lua_tolstring(a1, 2, 0);
  size_t v8 = cstdlib_strlen(v7);
  uint64_t v9 = (char *)heap_Calloc(*(void **)(v5 + 8), 1, v8 + 1);
  if (!v9) {
    goto LABEL_10;
  }
  char v10 = v9;
  long long v16 = 0uLL;
  cstdlib_strcpy(v9, v7);
  if (auxGetObjectHandleAndInterface_0(v3, &v15, &v16)
    || (int v14 = 0,
        ((*(uint64_t (**)(void, void, uint64_t, char *, int *))(v15 + 72))(v16, *((void *)&v16 + 1), v6, v10, &v14) & 0x80000000) != 0))
  {
    char v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    lua_pushstring((uint64_t)a1, v10);
    lua_pushBOOLean((uint64_t)a1, v14 == 1);
    uint64_t v12 = 2;
    char v11 = 1;
  }
  heap_Free(*(void **)(v5 + 8), (uint64_t)v10);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if ((v11 & 1) == 0) {
    return LuaVMUtil_error(a1, "Error in CLM.RemoveInvalidLHP");
  }
  return v12;
}

uint64_t CLM_ValidateTranscription_LuaCLM(void *a1)
{
  uint64_t v16 = 0;
  int v15 = 1;
  uint64_t Objc = LuaVMUtil_GetObjc(a1);
  if (!Objc)
  {
    err_GenerateErrorArg();
    return LuaVMUtil_error(a1, "Error in CLM.ValidateTranscription");
  }
  uint64_t v3 = Objc;
  uint64_t Rsrc = LuaVMUtil_GetRsrc(a1);
  if (!Rsrc)
  {
    err_GenerateErrorArg();
LABEL_11:
    objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
    return LuaVMUtil_error(a1, "Error in CLM.ValidateTranscription");
  }
  uint64_t v5 = Rsrc;
  if (!lua_isstring(a1, 1)) {
    goto LABEL_11;
  }
  uint64_t v6 = lua_tolstring(a1, 1, 0);
  if (!lua_isstring(a1, 2)) {
    goto LABEL_11;
  }
  uint64_t v7 = lua_tolstring(a1, 2, 0);
  if (!lua_isstring(a1, 3)) {
    goto LABEL_11;
  }
  size_t v8 = (const char *)lua_tolstring(a1, 3, 0);
  size_t v9 = cstdlib_strlen(v8);
  char v10 = (char *)heap_Calloc(*(void **)(v5 + 8), 1, v9 + 1);
  if (!v10) {
    goto LABEL_11;
  }
  char v11 = v10;
  long long v17 = 0uLL;
  cstdlib_strcpy(v10, v8);
  if (auxGetObjectHandleAndInterface_0(v3, &v16, &v17)
    || (int v15 = 1,
        ((*(uint64_t (**)(void, void, uint64_t, uint64_t, char *, int *))(v16 + 88))(v17, *((void *)&v17 + 1), v6, v7, v11, &v15) & 0x80000000) != 0))
  {
    char v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    lua_pushstring((uint64_t)a1, v11);
    lua_pushBOOLean((uint64_t)a1, v15 == 1);
    uint64_t v13 = 2;
    char v12 = 1;
  }
  heap_Free(*(void **)(v5 + 8), (uint64_t)v11);
  objc_ReleaseObject(v3, (uint64_t)"CLMOBJECT");
  if ((v12 & 1) == 0) {
    return LuaVMUtil_error(a1, "Error in CLM.ValidateTranscription");
  }
  return v13;
}

uint64_t auxGetObjectHandleAndInterface_0(uint64_t a1, void *a2, _OWORD *a3)
{
  uint64_t v7 = 0;
  if ((objc_GetObject(a1, (uint64_t)"CLMOBJECT", &v7) & 0x80000000) != 0) {
    return err_GenerateErrorArg();
  }
  uint64_t v5 = v7;
  if (!v7) {
    return err_GenerateErrorArg();
  }
  uint64_t result = 0;
  *a2 = *(void *)(v7 + 8);
  *a3 = *(_OWORD *)(v5 + 16);
  return result;
}

uint64_t abs_LuaMath(void *a1)
{
  uint64_t v2 = luaL_checkinteger(a1, 1);
  if (v2 >= 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = -v2;
  }
  lua_pushinteger((uint64_t)a1, v3);
  return 1;
}

uint64_t intdiv_LuaMath(void *a1)
{
  uint64_t v2 = luaL_checkinteger(a1, 1);
  uint64_t v3 = luaL_checkinteger(a1, 2);
  if ((unint64_t)(v3 + 1) > 1)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v2 / v3;
    lua_pushinteger((uint64_t)a1, v2 / v3);
    uint64_t v4 = v2 - v6 * v5;
  }
  else
  {
    lua_pushinteger((uint64_t)a1, v2);
    uint64_t v4 = 0;
  }
  lua_pushinteger((uint64_t)a1, v4);
  return 2;
}

uint64_t max_LuaMath(void *a1)
{
  int v2 = lua_gettop((uint64_t)a1);
  if (v2 <= 0)
  {
    int v4 = 1;
    luaL_argerror(a1, 1);
  }
  else
  {
    int v3 = v2;
    if (v2 == 1)
    {
      int v4 = 1;
    }
    else
    {
      int v5 = 1;
      int v4 = 1;
      do
      {
        int v6 = v5 + 1;
        if (lua_compare(a1, v4, v5 + 1, 1)) {
          int v4 = v5 + 1;
        }
        ++v5;
      }
      while (v3 != v6);
    }
  }
  lua_pushvalue(a1, v4);
  return 1;
}

uint64_t min_LuaMath(void *a1)
{
  int v2 = lua_gettop((uint64_t)a1);
  if (v2 <= 0)
  {
    int v4 = 1;
    luaL_argerror(a1, 1);
  }
  else
  {
    int v3 = v2;
    if (v2 == 1)
    {
      int v4 = 1;
    }
    else
    {
      int v5 = 1;
      int v4 = 1;
      do
      {
        int v6 = v5 + 1;
        if (lua_compare(a1, v5 + 1, v4, 1)) {
          int v4 = v5 + 1;
        }
        ++v5;
      }
      while (v3 != v6);
    }
  }
  lua_pushvalue(a1, v4);
  return 1;
}

uint64_t toint_LuaMath(void *a1)
{
  int v4 = 0;
  uint64_t v2 = lua_tointegerx(a1, 1, &v4);
  if (v4)
  {
    lua_pushinteger((uint64_t)a1, v2);
  }
  else
  {
    luaL_checkany(a1, 1);
    lua_pushnil((uint64_t)a1);
  }
  return 1;
}

uint64_t ult_LuaMath(void *a1)
{
  unint64_t v2 = luaL_checkinteger(a1, 1);
  BOOL v3 = v2 < luaL_checkinteger(a1, 2);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t luaopen_math(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 8);
  luaL_setfuncs(a1, (uint64_t)&lib_m_10, 0, v2, v3, v4, v5, v6);
  lua_pushinteger((uint64_t)a1, 0x7FFFFFFFLL);
  lua_setfield(a1, -2, "maxinteger");
  lua_pushinteger((uint64_t)a1, -2147483647);
  lua_setfield(a1, -2, "mininteger");
  lua_setglobal((uint64_t)a1, "math");
  return 0;
}

uint64_t getLuaAPIVersion_LuaUtilities(uint64_t a1)
{
  return 3;
}

uint64_t nodesToRange_LuaUtilities(void *a1)
{
  uint64_t v9 = 0;
  size_t v10 = 0;
  if (lua_gettop((uint64_t)a1))
  {
    lua_pushnil((uint64_t)a1);
    if (lua_next(a1, 1))
    {
      unsigned int v2 = 0;
      unsigned int v3 = 0;
      for (char i = 1; ; char i = 0)
      {
        unint64_t v5 = lua_gettop((uint64_t)a1);
        if (getOOCObject_LuaLDOTreeNode(a1, v5, &v10)
          || LDOTreeNode_ComputeAbsoluteFrom(v10, (_DWORD *)&v9 + 1)
          || LDOTreeNode_ComputeAbsoluteTo(v10, &v9))
        {
          break;
        }
        if (i)
        {
          unsigned int v2 = v9;
          unsigned int v3 = HIDWORD(v9);
        }
        else
        {
          if (HIDWORD(v9) < v3) {
            unsigned int v3 = HIDWORD(v9);
          }
          if (v9 > v2) {
            unsigned int v2 = v9;
          }
        }
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
        if (!lua_next(a1, 1))
        {
          uint64_t v6 = LuaVMUtil_u32_index_to_luainteger(v3);
          lua_pushinteger((uint64_t)a1, v6);
          uint64_t v7 = LuaVMUtil_u32_index_to_luainteger(v2);
          lua_pushinteger((uint64_t)a1, v7);
          return 2;
        }
      }
    }
  }
  return LuaVMUtil_error(a1, "Error in Utilities:nodes_to_range");
}

uint64_t concatenateStrings_LuaUtilities(void *a1)
{
  uint64_t v9 = 0;
  size_t v10 = 0;
  uint64_t v8 = 0;
  unsigned int v2 = lua_gettop((uint64_t)a1);
  if (v2)
  {
    unsigned int v3 = v2;
    lua_getallocf((uint64_t)a1, &v8);
    uint64_t v4 = *(void *)(v8 + 8);
    if (v4 && !PNEW_LDOString_Con(v4, *(void *)(v8 + 8), &v9))
    {
      int v7 = 1;
      while (!LuaVMUtil_luastring_to_string(a1, v7, (uint64_t *)&v10)
           && v10
           && !LHString_Append(v9, v10))
      {
        if (++v7 > v3)
        {
          if (LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v9)) {
            break;
          }
          return 1;
        }
      }
    }
    if (v9)
    {
      uint64_t v5 = LDOString_BorrowAllocator(v9);
      OOC_PlacementDeleteObject(v5, v9);
      uint64_t v9 = 0;
    }
  }
  return LuaVMUtil_error(a1, "Error in Utilities:concatenate_strings");
}

uint64_t joinStrings_LuaUtilities(void *a1)
{
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unsigned int v2 = lua_gettop((uint64_t)a1);
  if (v2 >= 2)
  {
    unsigned int v3 = v2;
    if (!LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v8))
    {
      if (v8)
      {
        lua_getallocf((uint64_t)a1, &v9);
        uint64_t v4 = *(void *)(v9 + 8);
        if (v4)
        {
          if (!PNEW_LDOString_Con(v4, *(void *)(v9 + 8), &v10))
          {
            if (v3 < 3)
            {
LABEL_17:
              if (!LuaVMUtil_luastring_to_string(a1, v3, (uint64_t *)&v11)
                && v11
                && !LHString_Append(v10, v11)
                && !LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v10))
              {
                return 1;
              }
            }
            else
            {
              int v7 = 2;
              while (!LuaVMUtil_luastring_to_string(a1, v7, (uint64_t *)&v11)
                   && v11
                   && !LHString_Append(v10, v11)
                   && !LHString_Append(v10, v8))
              {
                if (v3 == ++v7) {
                  goto LABEL_17;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v10)
  {
    uint64_t v5 = LDOString_BorrowAllocator(v10);
    OOC_PlacementDeleteObject(v5, v10);
    uint64_t v10 = 0;
  }
  return LuaVMUtil_error(a1, "Error in Utilities:join_strings");
}

uint64_t padString_LuaUtilities(void *a1)
{
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (lua_gettop((uint64_t)a1) >= 3)
  {
    if (!LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v10))
    {
      if (v10)
      {
        if (!LuaVMUtil_luainteger_to_u32(a1, 2, (_DWORD *)&v8 + 1)
          && !LuaVMUtil_luastring_to_string(a1, 3, (uint64_t *)&v9))
        {
          if (v9)
          {
            if (!LDOString_ComputeCPtrLength(v9, 0, &v8))
            {
              lua_getallocf((uint64_t)a1, &v6);
              uint64_t v4 = *(void *)(v6 + 8);
              if (v4)
              {
                if (!PNEW_LDOString_ConFromCPtr(v4, *(void *)(v6 + 8), v10, &v7))
                {
                  if (v8)
                  {
                    while (1)
                    {
                      unsigned int v5 = LHString_Length(v7);
                      if (v5 >= HIDWORD(v8)) {
                        break;
                      }
                      if (LHString_Append(v7, v9)) {
                        goto LABEL_5;
                      }
                    }
                  }
                  if (!LuaVMUtil_pushLuaStringAndDestroy((uint64_t)a1, v7)) {
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_5:
    if (v7)
    {
      uint64_t v2 = LDOString_BorrowAllocator(v7);
      OOC_PlacementDeleteObject(v2, v7);
      uint64_t v7 = 0;
    }
  }
  return LuaVMUtil_error(a1, "Error in Utilities:pad_string");
}

uint64_t splitString_LuaUtilities(void *a1)
{
  long long v17 = 0;
  uint64_t v16 = 0;
  int v15 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  if (lua_gettop((uint64_t)a1) >= 2
    && !LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v17))
  {
    if (v17)
    {
      if (!LuaVMUtil_luastring_to_string(a1, 2, (uint64_t *)&v16))
      {
        if (v16)
        {
          if (!LDOString_ComputeCPtrLength(v16, 0, &v15))
          {
            if (v15)
            {
              lua_getallocf((uint64_t)a1, &v13);
              uint64_t v2 = *(void *)(v13 + 8);
              if (v2)
              {
                if (!PNEW_LDOString_ConFromCPtr(*(void *)(v13 + 8), *(void *)(v13 + 8), v17, &v14)
                  && !PtrList_Con((uint64_t)v11, v2, 4u, 4))
                {
                  if (!LHString_Split(v14, v16, (uint64_t)v11))
                  {
                    lua_createtable((uint64_t)a1, 0, 0);
                    if (PtrList_NrItems((uint64_t)v11))
                    {
                      int v3 = 0;
                      unsigned int v4 = 0;
                      do
                      {
                        uint64_t v5 = PtrList_ItemN((uint64_t)v11, v4);
                        if (v5)
                        {
                          uint64_t v6 = v5;
                          uint64_t v7 = (char *)LHString_BorrowCPtr(v5);
                          lua_pushstring((uint64_t)a1, v7);
                          uint64_t v8 = LuaVMUtil_u32_index_to_luainteger(v3);
                          lua_rawseti(a1, -2, v8);
                          if (OOC_PlacementDeleteObject(v2, v6)) {
                            goto LABEL_20;
                          }
                          ++v3;
                        }
                        ++v4;
                      }
                      while (v4 < PtrList_NrItems((uint64_t)v11));
                    }
                    PtrList_RemoveAll((uint64_t)v11);
                    if (!PtrList_Des((uint64_t)v11) && !OOC_PlacementDeleteObject(v2, v14)) {
                      return 1;
                    }
                  }
LABEL_20:
                  PtrList_RemoveAll((uint64_t)v11);
                  PtrList_Des((uint64_t)v11);
                }
              }
            }
          }
        }
      }
    }
  }
  if (v14)
  {
    uint64_t v9 = LDOString_BorrowAllocator(v14);
    OOC_PlacementDeleteObject(v9, v14);
    uint64_t v14 = 0;
  }
  return LuaVMUtil_error(a1, "Error in Utilities:split_string");
}

uint64_t isValidUTF8String_LuaUtilities(void *a1)
{
  char __s = 0;
  if (!lua_gettop((uint64_t)a1)
    || LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&__s)
    || !__s)
  {
    return LuaVMUtil_error(a1, "Error in Utilities:join_strings");
  }
  BOOL IsValidUTF8 = LDOString_IsValidUTF8(__s, 0);
  BOOL v3 = LuaVMUtil_lhBOOL_to_luaBOOLean(IsValidUTF8);
  lua_pushBOOLean((uint64_t)a1, v3);
  return 1;
}

uint64_t stringToBytes_LuaUtilities(void *a1)
{
  uint64_t v7 = 0;
  if (!lua_gettop((uint64_t)a1)) {
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_bytes");
  }
  if (LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&v7)) {
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_bytes");
  }
  uint64_t v2 = v7;
  if (!v7) {
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_bytes");
  }
  lua_createtable((uint64_t)a1, 0, 0);
  unsigned int v3 = *v2;
  if (*v2)
  {
    unsigned int v4 = 0;
    do
    {
      lua_pushinteger((uint64_t)a1, v3);
      uint64_t v5 = LuaVMUtil_u32_index_to_luainteger(v4);
      lua_rawseti(a1, -2, v5);
      unsigned int v3 = v2[++v4];
    }
    while (v2[v4]);
  }
  return 1;
}

uint64_t stringToUTF8Characters_LuaUtilities(void *a1)
{
  char __s = 0;
  if (!lua_gettop((uint64_t)a1)
    || LuaVMUtil_luastring_to_string(a1, 1, (uint64_t *)&__s)
    || !__s
    || !LDOString_IsValidUTF8(__s, 0))
  {
    return LuaVMUtil_error(a1, "Error in Utilities:string_to_utf8_characters");
  }
  uint64_t v2 = __s;
  lua_createtable((uint64_t)a1, 0, 0);
  if (!*v2) {
    return 1;
  }
  int v3 = 0;
  LODWORD(v4) = 0;
  uint64_t v5 = v2;
  uint64_t v6 = 1;
  do
  {
    size_t v7 = 1;
    while (!LDOString_IsValidUTF8(v5, (unint64_t)&v5[v7]))
    {
      if (++v7 == 5) {
        return LuaVMUtil_error(a1, "Error in Utilities:string_to_utf8_characters");
      }
    }
    __int16 v14 = 0;
    int v13 = 0;
    cstdlib_strncpy((char *)&v13, v5, v7);
    lua_createtable((uint64_t)a1, 0, 0);
    lua_pushstring((uint64_t)a1, (char *)&v13);
    uint64_t v8 = LuaVMUtil_u32_index_to_luainteger(0);
    lua_rawseti(a1, -2, v8);
    uint64_t v9 = LuaVMUtil_u32_index_to_luainteger(v4);
    lua_pushinteger((uint64_t)a1, v9);
    uint64_t v10 = LuaVMUtil_u32_index_to_luainteger(1);
    lua_rawseti(a1, -2, v10);
    uint64_t v11 = LuaVMUtil_u32_index_to_luainteger(v3);
    lua_rawseti(a1, -2, v11);
    ++v3;
    uint64_t v4 = (v4 + v7);
    uint64_t v5 = &v2[v4];
  }
  while (v2[v4]);
  return v6;
}

uint64_t luaopen_Utilities(void *a1)
{
  lua_createtable((uint64_t)a1, 0, 10);
  luaL_setfuncs(a1, (uint64_t)&lib_m_11, 0, v2, v3, v4, v5, v6);
  lua_setglobal((uint64_t)a1, "Utilities");
  return 0;
}

uint64_t LuaVMLDO_Con(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  memset(v17, 0, sizeof(v17));
  uint64_t result = Object_Con(a1);
  unsigned int LuaStateWithMemoryLogging = result;
  if (!result)
  {
    *a1 = (uint64_t)&__LuaVMLDO;
    a1[1] = a2;
    a1[3] = a3;
    a1[4] = a4;
    a1[5] = 0;
    a1[6] = 0;
    a1[7] = 0;
    a1[8] = a5;
    a1[2] = 0;
    uint64_t v11 = a1 + 2;
    uint64_t v12 = (void *)OOCAllocator_Calloc(a2, 1, 16, &LuaStateWithMemoryLogging);
    a1[9] = (uint64_t)v12;
    uint64_t result = LuaStateWithMemoryLogging;
    if (!LuaStateWithMemoryLogging)
    {
      uint64_t v13 = a1[1];
      *uint64_t v12 = 0;
      v12[1] = v13;
      unsigned int LuaStateWithMemoryLogging = LuaStateFactoryMemLog_Con(v17, v13);
      if (LuaStateWithMemoryLogging) {
        goto LABEL_4;
      }
      uint64_t NullHandle = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(a1[3], a1[4], NullHandle, v16)
        && ((InitRsrcFunction((_WORD *)a1[3], a1[4], a1 + 5) & 0x80000000) != 0
         || (__LuaVMLDO_GetObjects(a1) & 0x80000000) != 0))
      {
        uint64_t result = err_GenerateErrorArg();
        unsigned int LuaStateWithMemoryLogging = result;
      }
      else
      {
        unsigned int LuaStateWithMemoryLogging = LuaStateFactoryMemLog_CreateLuaStateWithMemoryLogging((uint64_t)v17, a1 + 2, a1[9]);
        if (!LuaStateWithMemoryLogging)
        {
          unsigned int LuaStateWithMemoryLogging = __LuaVMLDO_ProtectedRegisterRSRC((uint64_t)a1);
          if (!LuaStateWithMemoryLogging) {
            unsigned int LuaStateWithMemoryLogging = __LuaVMLDO_OpenLibs(a1);
          }
        }
        (*(void (**)(void *))(v17[0] + 16))(v17);
        if (!LuaStateWithMemoryLogging) {
          return 0;
        }
        if (!*v11) {
          goto LABEL_4;
        }
        lua_close(*v11);
        *uint64_t v11 = 0;
        uint64_t result = LuaStateWithMemoryLogging;
      }
      if (!result) {
        return result;
      }
LABEL_4:
      __LuaVMLDO_ReleaseObjects((uint64_t)a1);
      uint64_t result = LuaStateWithMemoryLogging;
      if (!LuaStateWithMemoryLogging) {
        return result;
      }
    }
  }
  uint64_t v14 = a1[9];
  if (v14)
  {
    OOCAllocator_Free(a1[1], v14);
    return LuaStateWithMemoryLogging;
  }
  return result;
}

uint64_t __LuaVMLDO_GetObjects(void *a1)
{
  uint64_t result = objc_GetObject(*(void *)(a1[5] + 48), (uint64_t)"FE_DCTLKP", a1 + 6);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1[5] + 48);
    return objc_GetObject(v3, (uint64_t)"DCTEG", a1 + 7);
  }
  return result;
}

uint64_t __LuaVMLDO_ProtectedRegisterRSRC(uint64_t a1)
{
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)LuaVMUtil_RegisterRSRC, 0);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2) {
    lua_pushlightuserdata(v3, v2);
  }
  else {
    lua_pushnil(v3);
  }
  uint64_t result = lua_pcallk(*(void *)(a1 + 16), 1, 0, 0, 0, 0);
  if (result)
  {
    if (result == 4)
    {
      return err_GenerateErrorResource();
    }
    else
    {
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t __LuaVMLDO_OpenLibs(uint64_t *a1)
{
  if (luaL_openlibs(a1[2]))
  {
    return err_GenerateErrorResource();
  }
  else
  {
    uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_Log);
    if (result) {
      return result;
    }
    lua_pushcclosure(a1[2], (uint64_t)init_LuaLog, 0);
    uint64_t v3 = a1[5];
    if (v3 && a1[8])
    {
      lua_pushlightuserdata(a1[2], *(void *)(v3 + 32));
      lua_pushlightuserdata(a1[2], *(void *)(a1[5] + 8));
      lua_pushlightuserdata(a1[2], a1[8]);
    }
    else
    {
      lua_pushnil(a1[2]);
      lua_pushnil(a1[2]);
      lua_pushnil(a1[2]);
    }
    uint64_t v4 = a1[9];
    uint64_t v5 = a1[2];
    if (v4)
    {
      lua_pushlightuserdata(v5, v4);
      lua_pushlightuserdata(a1[2], a1[9] + 4);
    }
    else
    {
      lua_pushnil(v5);
      lua_pushnil(a1[2]);
    }
    int v6 = lua_pcallk(a1[2], 5, 0, 0, 0, 0);
    if (v6)
    {
      if (v6 == 4)
      {
        uint64_t result = err_GenerateErrorResource();
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t result = err_GenerateErrorArg();
        if (result) {
          return result;
        }
      }
    }
    uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_DictionaryLookup);
    if (!result)
    {
      lua_pushcclosure(a1[2], (uint64_t)init_LuaDictionaryLookup, 0);
      uint64_t v7 = a1[6];
      uint64_t v8 = a1[2];
      if (v7) {
        lua_pushlightuserdata(v8, v7);
      }
      else {
        lua_pushnil(v8);
      }
      int v9 = lua_pcallk(a1[2], 1, 0, 0, 0, 0);
      if (!v9
        || (v9 != 4 ? (uint64_t result = err_GenerateErrorArg()) : (uint64_t result = err_GenerateErrorResource()), !result))
      {
        uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_DictionaryEngine);
        if (!result)
        {
          lua_pushcclosure(a1[2], (uint64_t)init_LuaDictionaryEngine, 0);
          uint64_t v10 = a1[7];
          uint64_t v11 = a1[2];
          if (v10) {
            lua_pushlightuserdata(v11, v10);
          }
          else {
            lua_pushnil(v11);
          }
          int v12 = lua_pcallk(a1[2], 1, 0, 0, 0, 0);
          if (!v12
            || (v12 != 4 ? (uint64_t result = err_GenerateErrorArg()) : (uint64_t result = err_GenerateErrorResource()), !result))
          {
            uint64_t result = __LuaVMLDO_OpenParametersLib((uint64_t)a1);
            if (!result)
            {
              uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_NN);
              if (!result)
              {
                uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_CLM);
                if (!result)
                {
                  uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_math);
                  if (!result)
                  {
                    uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_Utilities);
                    if (!result)
                    {
                      uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDO);
                      if (!result)
                      {
                        uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOObject);
                        if (!result)
                        {
                          uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOTreeNode);
                          if (!result)
                          {
                            uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOLabel);
                            if (!result)
                            {
                              uint64_t result = __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_LDOLabelSet);
                              if (!result)
                              {
                                return __LuaVMLDO_OpenLib((uint64_t)a1, (uint64_t)luaopen_luautf8);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t __LuaVMLDO_ReleaseObjects(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (v1)
  {
    uint64_t v2 = (void *)result;
    uint64_t v3 = *(void *)(v1 + 48);
    if (!v3 || !v2[6] || (uint64_t result = objc_ReleaseObject(v3, (uint64_t)"FE_DCTLKP"), (v1 = v2[5]) != 0))
    {
      uint64_t result = *(void *)(v1 + 48);
      if (result)
      {
        if (v2[7])
        {
          return objc_ReleaseObject(result, (uint64_t)"DCTEG");
        }
      }
    }
  }
  return result;
}

uint64_t LuaVMLDO_Des(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    lua_close(v2);
    a1[2] = 0;
  }
  uint64_t v3 = a1[9];
  if (v3) {
    OOCAllocator_Free(a1[1], v3);
  }
  __LuaVMLDO_ReleaseObjects((uint64_t)a1);

  return Object_Des();
}

uint64_t LuaVMLDO_FreeMemory(uint64_t a1, uint64_t a2)
{
  if (a2) {
    OOCAllocator_Free(*(void *)(a1 + 8), a2);
  }
  return 0;
}

uint64_t LuaVMLDO_IsLuaCodeAvailable(_WORD *a1, uint64_t a2, char *__src, _DWORD *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  unsigned int v21 = 0;
  uint64_t v20 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v24 = 0u;
  *a4 = 0;
  if (!__src)
  {
    uint64_t ErrorArg = __LuaVMLDO_ComposeBrokerString(a1, a2, __dst);
    if (ErrorArg) {
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  cstdlib_strcpy(__dst, __src);
  if (LH_stricmp(__src, "clm"))
  {
LABEL_5:
    uint64_t v8 = "LUAC";
    goto LABEL_6;
  }
  uint64_t v8 = "CLMP";
LABEL_6:
  int v17 = ssftriff_reader_ObjOpen(a1, a2, 2, __dst, v8, 1031, (uint64_t *)&v22);
  if ((v17 & 0x80000000) == 0)
  {
    Chunuint64_t k = ssftriff_reader_FindChunk((uint64_t)v22, "LUAA", 0, &v21, &v20);
    if (Chunk < 0)
    {
      if ((Chunk & 0x1FFF) == 0x14)
      {
        uint64_t ErrorArg = 0;
        goto LABEL_16;
      }
    }
    else if ((ssftriff_reader_CloseChunk((uint64_t)v22) & 0x80000000) == 0)
    {
      uint64_t ErrorArg = 0;
      *a4 = 1;
      goto LABEL_16;
    }
LABEL_15:
    uint64_t ErrorArg = err_GenerateErrorArg();
    goto LABEL_16;
  }
  uint64_t ErrorArg = 0;
  if ((v17 & 0x1FFF) != 3 && (v17 & 0x1FFF) != 0xD) {
    goto LABEL_15;
  }
LABEL_16:
  if (v22 && (ssftriff_reader_ObjClose(v22, v9, v10, v11, v12, v13, v14, v15) & 0x80000000) != 0)
  {
    *a4 = 0;
    return err_GenerateErrorArg();
  }
  return ErrorArg;
}

uint64_t __LuaVMLDO_ComposeBrokerString(_WORD *a1, int a2, char *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  __s2 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  memset(__dst, 0, sizeof(__dst));
  long long v15 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)uint64_t __src = 0u;
  if ((InitRsrcFunction(a1, a2, &v7) & 0x80000000) != 0) {
    return err_GenerateErrorArg();
  }
  if ((paramc_ParamGetStr(*(void *)(v7 + 40), (uint64_t)"langcode", &__s2) & 0x80000000) != 0) {
    return err_GenerateErrorArg();
  }
  if ((paramc_ParamGetStr(*(void *)(v7 + 40), (uint64_t)"fecfg", &v5) & 0x80000000) != 0) {
    return err_GenerateErrorArg();
  }
  cstdlib_strcpy((char *)__dst, "amalgamated/");
  cstdlib_strcat((char *)__dst, __s2);
  cstdlib_strcat((char *)__dst, "/");
  cstdlib_strcat((char *)__dst, v5);
  if ((brokeraux_ComposeBrokerString(v7, (const char *)__dst, 1, 1, __s2, 0, 0, __src, 0x80uLL) & 0x80000000) != 0) {
    return err_GenerateErrorArg();
  }
  cstdlib_strcpy(a3, __src);
  return 0;
}

uint64_t LuaVMLDO_IsLuaFunctionAvailable(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v6 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v6)
  {
    if (v6 == 4)
    {
      return err_GenerateErrorResource();
    }
    else
    {
      return err_GenerateErrorArg();
    }
  }
  else
  {
    if (lua_type(*(void **)(a1 + 16), -1) == 6) {
      *a3 = 1;
    }
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
    return 0;
  }
}

uint64_t __LuaVMLDO_ProtectedGetGlobal(void *a1)
{
  uint64_t v2 = (char *)lua_touserdata(a1, 1);
  lua_getglobal((uint64_t)a1, v2);
  return 1;
}

uint64_t LuaVMLDO_LoadScriptFromBuffer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  LODWORD(result) = luaL_loadbufferx(*(void *)(a1 + 16), a2, a3, "@ldoscriptchunk", 0);
  if (result || (uint64_t result = lua_pcallk(*(void *)(a1 + 16), 0, 0, 0, 0, 0), result))
  {
    if (result == 4)
    {
      return err_GenerateErrorResource();
    }
    else
    {
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t LuaVMLDO_LoadScriptFromRIFF(uint64_t a1, char *__src)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unsigned int v26 = 0;
  uint64_t v24 = 0;
  long long v25 = 0;
  int v23 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v28 = 0u;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_27;
  }
  if (__src)
  {
    cstdlib_strcpy(__dst, __src);
    if (!LH_stricmp(__src, "clm"))
    {
      char v4 = 0;
      uint64_t v5 = "CLMP";
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t result = __LuaVMLDO_ComposeBrokerString(*(_WORD **)(a1 + 24), *(void *)(a1 + 32), __dst);
    unsigned int v26 = result;
    if (result) {
      goto LABEL_28;
    }
  }
  uint64_t v5 = "LUAC";
  char v4 = 1;
LABEL_8:
  int v14 = ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 24), *(void *)(a1 + 32), 2, __dst, v5, 1031, (uint64_t *)&v25);
  if (v14 < 0)
  {
    __int16 v17 = v14;
    uint64_t result = 0;
    int v18 = v17 & 0x1FFF;
    if (v18 == 3 || v18 == 13) {
      goto LABEL_28;
    }
LABEL_27:
    uint64_t result = err_GenerateErrorArg();
    unsigned int v26 = result;
    goto LABEL_28;
  }
  if ((ssftriff_reader_FindChunk((uint64_t)v25, "LUAA", 0, (unsigned int *)&v23, &v24) & 0x80000000) != 0) {
    goto LABEL_27;
  }
  long long v15 = (unsigned char *)OOCAllocator_Calloc(*(void *)(a1 + 8), v23, 1, &v26);
  if (v26) {
    goto LABEL_23;
  }
  if (v4)
  {
    unsigned int v16 = 0;
  }
  else
  {
    int v22 = v23;
    if ((ssftriff_reader_ReadStringZ((uint64_t)v25, v24, v23, 0, v15, (unsigned int *)&v22) & 0x80000000) != 0)
    {
LABEL_21:
      unsigned int ErrorArg = err_GenerateErrorArg();
      goto LABEL_22;
    }
    unsigned int v16 = v22;
  }
  if ((ssftriff_reader_ReadStringZ((uint64_t)v25, v24, v23, v16, v15, (unsigned int *)&v23) & 0x80000000) != 0) {
    goto LABEL_21;
  }
  unsigned int ErrorArg = LuaVMLDO_LoadScriptFromBuffer(a1, (uint64_t)v15, v23 - 1);
LABEL_22:
  unsigned int v26 = ErrorArg;
LABEL_23:
  if (v15) {
    OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v15);
  }
  int v20 = ssftriff_reader_CloseChunk((uint64_t)v25);
  uint64_t result = v26;
  if (v20 < 0 && !v26) {
    goto LABEL_27;
  }
LABEL_28:
  if (v25)
  {
    int v21 = ssftriff_reader_ObjClose(v25, v7, v8, v9, v10, v11, v12, v13);
    uint64_t result = v26;
    if (v21 < 0 && !v26) {
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t LuaVMLDO_ReleasePointerToString(uint64_t a1)
{
  return 0;
}

uint64_t LuaVMLDO_RunFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v6 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v6)
  {
    if (v6 == 4)
    {
LABEL_3:
      return err_GenerateErrorResource();
    }
  }
  else if (lua_type(*(void **)(a1 + 16), -1) == 6)
  {
    lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_CreateLuaLDO, 0);
    lua_pushlightuserdata(*(void *)(a1 + 16), a3);
    LODWORD(result) = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
    if (!result)
    {
      uint64_t result = lua_pcallk(*(void *)(a1 + 16), 1, 0, 0, 0, 0);
      if (!result) {
        return result;
      }
    }
    if (result == 4) {
      goto LABEL_3;
    }
  }

  return err_GenerateErrorArg();
}

uint64_t __LuaVMLDO_CreateLuaLDO(uint64_t *a1)
{
  uint64_t v2 = lua_touserdata(a1, 1);
  *(void *)lua_newuserdata((uint64_t)a1, 8uLL) = v2;
  getMetatableLua(a1, "vocalizer.LDO");
  lua_setmetatable(a1, -2);
  return 1;
}

uint64_t LuaVMLDO_RunFunctionReturningPointerToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v8 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v8)
  {
    if (v8 == 4)
    {
LABEL_3:
      return err_GenerateErrorResource();
    }
  }
  else if (lua_type(*(void **)(a1 + 16), -1) == 6)
  {
    uint64_t result = __LuaVMLDO_PushStringProtected(*(void *)(a1 + 16), a3);
    if (result) {
      return result;
    }
    int v10 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
    if (v10)
    {
      if (v10 == 4) {
        goto LABEL_3;
      }
    }
    else if (lua_isstring(*(void **)(a1 + 16), -1))
    {
      uint64_t v11 = lua_tolstring(*(void **)(a1 + 16), -1, 0);
      uint64_t result = 0;
      *a4 = v11;
      return result;
    }
  }

  return err_GenerateErrorArg();
}

uint64_t __LuaVMLDO_PushStringProtected(uint64_t a1, uint64_t a2)
{
  lua_pushcclosure(a1, (uint64_t)__LuaVMLDO_PushStringProtected_AuxCFunction, 0);
  lua_pushlightuserdata(a1, a2);
  uint64_t result = lua_pcallk(a1, 1, 1, 0, 0, 0);
  if (result)
  {
    if (result == 4)
    {
      return err_GenerateErrorResource();
    }
    else
    {
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t LuaVMLDO_RunFunctionReturningString(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5)
{
  char __s = 0;
  uint64_t v8 = LuaVMLDO_RunFunctionReturningPointerToString(a1, a2, a3, (uint64_t *)&__s);
  if (!v8)
  {
    uint64_t v9 = __s;
    if (cstdlib_strlen(__s) + 1 <= a4) {
      cstdlib_strcpy(a5, v9);
    }
    else {
      err_GenerateErrorArg();
    }
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
  }
  return v8;
}

void LuaVMLDO_RunFunctionReturningTable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v6 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v6)
  {
    if (v6 == 4)
    {
LABEL_3:
      err_GenerateErrorResource();
      return;
    }
    goto LABEL_9;
  }
  if (lua_type(*(void **)(a1 + 16), -1) != 6) {
    goto LABEL_9;
  }
  int v7 = lua_pcallk(*(void *)(a1 + 16), 0, 1, 0, 0, 0);
  if (v7)
  {
    if (v7 == 4) {
      goto LABEL_3;
    }
    goto LABEL_9;
  }
  if (lua_type(*(void **)(a1 + 16), -1) != 5)
  {
LABEL_9:
    err_GenerateErrorArg();
    return;
  }
  lua_pushnil(*(void *)(a1 + 16));
  while (lua_next(*(void **)(a1 + 16), -2))
  {
    if (!lua_isstring(*(void **)(a1 + 16), -2)) {
      goto LABEL_9;
    }
    uint64_t v8 = (char *)lua_tolstring(*(void **)(a1 + 16), -2, 0);
    if (lua_type(*(void **)(a1 + 16), -1) != 1) {
      goto LABEL_9;
    }
    BOOL v9 = lua_toBOOLean(*(void **)(a1 + 16), -1) == 1;
    LDOObject_SetBoolAttribute(a3, v8, v9);
    if (v10) {
      return;
    }
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
  }
  lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
}

uint64_t LuaVMLDO_RunFunctionWithLDOAndTableArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v8 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v8)
  {
    if (v8 == 4)
    {
LABEL_3:
      return err_GenerateErrorResource();
    }
  }
  else if (lua_type(*(void **)(a1 + 16), -1) == 6)
  {
    lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_CreateLuaLDO, 0);
    lua_pushlightuserdata(*(void *)(a1 + 16), a3);
    LODWORD(result) = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
    if (!result)
    {
      lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_PushTableFromLDOObject, 0);
      lua_pushlightuserdata(*(void *)(a1 + 16), a4);
      LODWORD(result) = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
      if (!result)
      {
        uint64_t result = lua_pcallk(*(void *)(a1 + 16), 2, 0, 0, 0, 0);
        if (!result) {
          return result;
        }
      }
    }
    if (result == 4) {
      goto LABEL_3;
    }
  }

  return err_GenerateErrorArg();
}

uint64_t __LuaVMLDO_PushTableFromLDOObject(void *a1)
{
  uint64_t v2 = lua_touserdata(a1, 1);
  lua_createtable((uint64_t)a1, 0, 0);
  unint64_t v4 = *(void *)(v2 + 32);
  unint64_t v3 = *(void *)(v2 + 40);
  while (v4 < v3)
  {
    if (*(_DWORD *)(v4 + 8) == 4)
    {
      int v5 = *(_DWORD *)(v4 + 12);
      int v6 = (char *)LHString_BorrowCPtr(*(void *)v4);
      lua_pushstring((uint64_t)a1, v6);
      lua_pushBOOLean((uint64_t)a1, v5 == 1);
      lua_settable(a1, -3);
    }
    v4 += 32;
  }
  return 1;
}

uint64_t LuaVMLDO_RunFunctionWithStringAndMarkerArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5, int a6)
{
  lua_checkstack(*(void **)(a1 + 16), 10);
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v12 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v12) {
    goto LABEL_2;
  }
  if (lua_type(*(void **)(a1 + 16), -1) != 6) {
    goto LABEL_39;
  }
  uint64_t result = __LuaVMLDO_PushStringProtected(*(void *)(a1 + 16), a3);
  if (result) {
    return result;
  }
  if (!a6)
  {
    lua_createtable(*(void *)(a1 + 16), 0, 0);
    int v14 = 0;
LABEL_30:
    int v12 = lua_pcallk(*(void *)(a1 + 16), 2, 2, 0, 0, 0);
    if (v12)
    {
LABEL_2:
      if (v12 == 4)
      {
        return err_GenerateErrorResource();
      }
      goto LABEL_39;
    }
    if (lua_type(*(void **)(a1 + 16), -1) == 5)
    {
      if (a6)
      {
        uint64_t v22 = 0;
        int v23 = v14 - 1;
        uint64_t v24 = a5 + 4;
        do
        {
          lua_rawgeti(*(void **)(a1 + 16), -1, ++v22);
          long long v25 = *(void **)(a1 + 16);
          int v28 = 0;
          uint64_t result = __LuaVMLDO_GetTableKeyIntValue(v25, "__pos", &v28);
          if (result) {
            return result;
          }
          int v27 = 0;
          uint64_t result = __LuaVMLDO_GetTableKeyIntValue(v25, "__len", &v27);
          if (result) {
            return result;
          }
          *(v24 - 1) = v23 + v28;
          _DWORD *v24 = v27;
          v24 += 8;
          lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
        }
        while (a6 != v22);
      }
      lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
      if (lua_isstring(*(void **)(a1 + 16), -1))
      {
        uint64_t v26 = lua_tolstring(*(void **)(a1 + 16), -1, 0);
        uint64_t result = 0;
        *a4 = v26;
        return result;
      }
    }
LABEL_39:
    return err_GenerateErrorArg();
  }
  if (*a5 == 0x4000) {
    int v14 = a5[3];
  }
  else {
    int v14 = 0;
  }
  lua_createtable(*(void *)(a1 + 16), 0, 0);
  uint64_t v15 = 0;
  unsigned int v16 = a5 + 6;
  while (1)
  {
    __int16 v17 = *(void **)(a1 + 16);
    lua_createtable((uint64_t)v17, 0, 0);
    uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v17, "__type", *(v16 - 6));
    if (result) {
      return result;
    }
    uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v17, "__pos", *(v16 - 3) - v14 + 1);
    if (result) {
      return result;
    }
    uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v17, "__len", *(v16 - 2));
    if (result) {
      return result;
    }
    int ArgType = marker_getArgType(*(v16 - 6));
    if ((ArgType - 2) >= 3)
    {
      if (ArgType == 1)
      {
        int v20 = *v16;
        int v21 = v17;
      }
      else
      {
        int v21 = v17;
        int v20 = 0;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v21, "__arg", v20);
      if (result) {
        return result;
      }
    }
    else
    {
      long long v19 = *(const char **)v16;
      if (!*(void *)v16) {
        long long v19 = "";
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v17, "__arg", (uint64_t)v19);
      if (result) {
        return result;
      }
    }
    lua_rawseti(*(void **)(a1 + 16), -2, ++v15);
    v16 += 8;
    if (a6 == v15) {
      goto LABEL_30;
    }
  }
}

uint64_t LuaVMLDO_RunFunctionWithStringArgumentReturningTableWithStrings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v8 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v8) {
    goto LABEL_2;
  }
  if (lua_type(*(void **)(a1 + 16), -1) != 6) {
    goto LABEL_10;
  }
  uint64_t result = __LuaVMLDO_PushStringProtected(*(void *)(a1 + 16), a3);
  if (result) {
    return result;
  }
  int v8 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v8)
  {
LABEL_2:
    if (v8 == 4)
    {
      return err_GenerateErrorResource();
    }
    goto LABEL_10;
  }
  if (lua_type(*(void **)(a1 + 16), -1) != 5)
  {
LABEL_10:
    return err_GenerateErrorArg();
  }
  lua_pushnil(*(void *)(a1 + 16));
  while (lua_next(*(void **)(a1 + 16), -2))
  {
    if (!lua_isstring(*(void **)(a1 + 16), -2)) {
      goto LABEL_10;
    }
    int v10 = (char *)lua_tolstring(*(void **)(a1 + 16), -2, 0);
    if (!lua_isstring(*(void **)(a1 + 16), -1)) {
      goto LABEL_10;
    }
    uint64_t v11 = (char *)lua_tolstring(*(void **)(a1 + 16), -1, 0);
    uint64_t result = LDOObject_SetStringAttribute(a4, v10, v11);
    if (result) {
      return result;
    }
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
  }
  lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
  return 0;
}

uint64_t LuaVMLDO_RunFunctionWithTnplusWordsArgumentReturningJSONString(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)__LuaVMLDO_ProtectedGetGlobal, 0);
  lua_pushlightuserdata(*(void *)(a1 + 16), a2);
  int v10 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v10) {
    goto LABEL_2;
  }
  if (lua_type(*(void **)(a1 + 16), -1) != 6)
  {
LABEL_70:
    return err_GenerateErrorArg();
  }
  lua_createtable(*(void *)(a1 + 16), 0, 0);
  if (a3)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 160 * a3;
    uint64_t v14 = 1;
    do
    {
      uint64_t v15 = *(void **)(a1 + 16);
      lua_createtable((uint64_t)v15, 0, 0);
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "orth", *(void *)(a4 + v12));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "phon", *(void *)(a4 + v12 + 8));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "punc_beg", *(void *)(a4 + v12 + 16));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "punc_end", *(void *)(a4 + v12 + 24));
      if (result) {
        return result;
      }
      lua_createtable((uint64_t)v15, 0, 0);
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "token", *(void *)(a4 + v12 + 32));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyBooleanValue(v15, "spell", *(_DWORD *)(a4 + v12 + 40));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "stylename", *(void *)(a4 + v12 + 48));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "styleintensity", *(void *)(a4 + v12 + 56));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyBooleanValue(v15, "compound", *(_DWORD *)(a4 + v12 + 64));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyBooleanValue(v15, "oriorthjoined", *(_DWORD *)(a4 + v12 + 68));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "phrasetype", *(void *)(a4 + v12 + 72));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "language", *(void *)(a4 + v12 + 80));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "audiosrc", *(void *)(a4 + v12 + 88));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "origortho", *(void *)(a4 + v12 + 96));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "break", *(void *)(a4 + v12 + 104));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyBooleanValue(v15, "userphon", *(_DWORD *)(a4 + v12 + 112));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "tone", *(void *)(a4 + v12 + 120));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v15, "sildur", *(_DWORD *)(a4 + v12 + 128));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v15, "volume", *(_DWORD *)(a4 + v12 + 132));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v15, "pitch", *(_DWORD *)(a4 + v12 + 136));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v15, "rate", *(_DWORD *)(a4 + v12 + 140));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyIntValue(v15, "timbre", *(_DWORD *)(a4 + v12 + 144));
      if (result) {
        return result;
      }
      uint64_t result = __LuaVMLDO_SetTableKeyStringValue(v15, "loo", *(void *)(a4 + v12 + 152));
      if (result) {
        return result;
      }
      lua_setfield(v15, -2, "metadata");
      lua_rawseti(*(void **)(a1 + 16), -2, v14++);
      v12 += 160;
    }
    while (v13 != v12);
  }
  int v10 = lua_pcallk(*(void *)(a1 + 16), 1, 1, 0, 0, 0);
  if (v10)
  {
LABEL_2:
    if (v10 == 4)
    {
      return err_GenerateErrorResource();
    }
    goto LABEL_70;
  }
  unsigned int v37 = 0;
  __uint64_t n = 0;
  if (lua_type(*(void **)(a1 + 16), -1) != 5)
  {
LABEL_73:
    uint64_t result = err_GenerateErrorArg();
    unsigned int v37 = result;
LABEL_74:
    if (result) {
      goto LABEL_75;
    }
    return result;
  }
  unint64_t v36 = 0x2000;
  unsigned int v16 = (unsigned char *)OOCAllocator_Malloc(*(void *)(a1 + 8), 0x2000, &v37);
  *a5 = (uint64_t)v16;
  uint64_t result = v37;
  if (v37) {
    goto LABEL_76;
  }
  unsigned char *v16 = 91;
  lua_pushnil(*(void *)(a1 + 16));
  uint64_t v17 = 1;
  if (!lua_next(*(void **)(a1 + 16), -2))
  {
LABEL_67:
    uint64_t result = hlpDoubleBufferIfNeeded(*(void *)(a1 + 8), a5, v17 + 1, &v36);
    unsigned int v37 = result;
    if (result) {
      goto LABEL_75;
    }
    *(unsigned char *)(*a5 + v17) = 93;
    uint64_t result = hlpDoubleBufferIfNeeded(*(void *)(a1 + 8), a5, v17 + 2, &v36);
    unsigned int v37 = result;
    if (result) {
      goto LABEL_75;
    }
    *(unsigned char *)(*a5 + v17 + 1) = 0;
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
    uint64_t result = v37;
    goto LABEL_74;
  }
  while (1)
  {
    if (lua_type(*(void **)(a1 + 16), -1) != 5) {
      goto LABEL_73;
    }
    uint64_t result = hlpDoubleBufferIfNeeded(*(void *)(a1 + 8), a5, v17 + 2, &v36);
    unsigned int v37 = result;
    if (result) {
      goto LABEL_75;
    }
    uint64_t v18 = *a5;
    if (*(unsigned char *)(v17 + *a5 - 1) == 93)
    {
      *(unsigned char *)(v18 + v17++) = 44;
      uint64_t v18 = *a5;
    }
    uint64_t v19 = v17 + 1;
    *(unsigned char *)(v18 + v17) = 91;
    lua_pushnil(*(void *)(a1 + 16));
LABEL_43:
    if (lua_next(*(void **)(a1 + 16), -2)) {
      break;
    }
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
    uint64_t v17 = v19 + 1;
    uint64_t result = hlpDoubleBufferIfNeeded(*(void *)(a1 + 8), a5, v19 + 1, &v36);
    unsigned int v37 = result;
    if (result) {
      goto LABEL_75;
    }
    *(unsigned char *)(*a5 + v19) = 93;
    if (!lua_next(*(void **)(a1 + 16), -2)) {
      goto LABEL_67;
    }
  }
  if (lua_type(*(void **)(a1 + 16), -1) != 5) {
    goto LABEL_43;
  }
  uint64_t result = hlpDoubleBufferIfNeeded(*(void *)(a1 + 8), a5, v19 + 2, &v36);
  unsigned int v37 = result;
  if (result) {
    goto LABEL_75;
  }
  uint64_t v20 = *a5;
  if (*(unsigned char *)(v19 + *a5 - 1) == 125)
  {
    *(unsigned char *)(v20 + v19++) = 44;
    uint64_t v20 = *a5;
  }
  size_t v21 = v19 + 1;
  *(unsigned char *)(v20 + v19) = 123;
  lua_pushnil(*(void *)(a1 + 16));
  while (lua_next(*(void **)(a1 + 16), -2))
  {
    int v22 = lua_type(*(void **)(a1 + 16), -1);
    int v23 = *(void **)(a1 + 16);
    if (v22 == 4)
    {
      uint64_t v24 = (const char *)lua_tolstring(v23, -1, &__n);
      if (!v24) {
        goto LABEL_73;
      }
      long long v25 = (char *)v24;
      if (!cstdlib_strcmp(v24, "\\""))
      {
        __uint64_t n = 0;
        goto LABEL_62;
      }
    }
    else
    {
      unsigned int v26 = lua_tointegerx(v23, -1, 0);
      long long v25 = __s;
      LH_itoa(v26, __s, 0xAu);
      __uint64_t n = cstdlib_strlen(__s);
    }
    if (!lua_isnumber(*(void **)(a1 + 16), -2)) {
      goto LABEL_73;
    }
    uint64_t v27 = 8 * (int)lua_tointegerx(*(void **)(a1 + 16), -2, 0);
    int v28 = *(const void **)((char *)&off_264560790 + v27);
    size_t v29 = *(void *)((char *)&unk_2206E2130 + v27);
    uint64_t result = hlpDoubleBufferIfNeeded(*(void *)(a1 + 8), a5, v21 + __n + v29 + 4, &v36);
    unsigned int v37 = result;
    if (result) {
      goto LABEL_75;
    }
    uint64_t v30 = *a5;
    if (*(unsigned char *)(v21 + *a5 - 1) != 123)
    {
      *(unsigned char *)(v30 + v21++) = 44;
      uint64_t v30 = *a5;
    }
    cstdlib_memcpy((void *)(v30 + v21), v28, v29);
    size_t v31 = v21 + v29;
    uint64_t v32 = v21 + v29 + 1;
    *(unsigned char *)(*a5 + v31) = 58;
    uint64_t v33 = *a5;
    if (v22 == 4)
    {
      size_t v34 = v31 + 2;
      *(unsigned char *)(v33 + v32) = 34;
      cstdlib_memcpy((void *)(*a5 + v31 + 2), v25, __n);
      size_t v21 = __n + v34 + 1;
      *(unsigned char *)(*a5 + __n + v34) = 34;
    }
    else
    {
      cstdlib_memcpy((void *)(v33 + v32), v25, __n);
      size_t v21 = __n + v32;
    }
LABEL_62:
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
  }
  uint64_t v19 = v21 + 1;
  uint64_t result = hlpDoubleBufferIfNeeded(*(void *)(a1 + 8), a5, v21 + 1, &v36);
  unsigned int v37 = result;
  if (!result)
  {
    *(unsigned char *)(*a5 + v21) = 125;
    lua_settop(*(void *)(a1 + 16), 0xFFFFFFFE);
    goto LABEL_43;
  }
LABEL_75:
  unsigned int v16 = (unsigned char *)*a5;
LABEL_76:
  if (v16)
  {
    OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v16);
    *a5 = 0;
    return v37;
  }
  return result;
}

uint64_t PNEW_LuaVMLDO_Con(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = (uint64_t *)OOCAllocator_Malloc(a1, 80, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = LuaVMLDO_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetLuaVMLDOClass()
{
  return &__LuaVMLDO;
}

uint64_t hlpDoubleBufferIfNeeded(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t result = 0;
  unsigned int v8 = 0;
  if (*a4 < a3)
  {
    if (2 * *a4 > a3) {
      a3 = 2 * *a4;
    }
    *a4 = a3;
    uint64_t v7 = OOCAllocator_Realloc(a1, *a2, a3, &v8);
    uint64_t result = v8;
    if (!v8) {
      *a2 = v7;
    }
  }
  return result;
}

uint64_t __LuaVMLDO_GetTableKeyIntValue(void *a1, char *a2, _DWORD *a3)
{
  if (lua_type(a1, -1) == 5)
  {
    if (lua_getfield(a1, -1, a2) == 3) {
      uint64_t ErrorArg = 0;
    }
    else {
      uint64_t ErrorArg = err_GenerateErrorArg();
    }
    *a3 = lua_tointegerx(a1, -1, 0);
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    return ErrorArg;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t __LuaVMLDO_OpenParametersLib(uint64_t a1)
{
  uint64_t result = __LuaVMLDO_OpenLib(a1, (uint64_t)luaopen_Parameters);
  if (!result)
  {
    lua_pushcclosure(*(void *)(a1 + 16), (uint64_t)init_LuaParameters, 0);
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 16);
    if (v3) {
      lua_pushlightuserdata(v4, *(void *)(v3 + 40));
    }
    else {
      lua_pushnil(v4);
    }
    uint64_t result = lua_pcallk(*(void *)(a1 + 16), 1, 0, 0, 0, 0);
    if (result)
    {
      if (result == 4)
      {
        return err_GenerateErrorResource();
      }
      else
      {
        return err_GenerateErrorArg();
      }
    }
  }
  return result;
}

uint64_t __LuaVMLDO_OpenLib(uint64_t a1, uint64_t a2)
{
  lua_pushcclosure(*(void *)(a1 + 16), a2, 0);
  uint64_t result = lua_pcallk(*(void *)(a1 + 16), 0, 0, 0, 0, 0);
  if (result)
  {
    if (result == 4)
    {
      return err_GenerateErrorResource();
    }
    else
    {
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t __LuaVMLDO_PushStringProtected_AuxCFunction(void *a1)
{
  uint64_t v2 = (char *)lua_touserdata(a1, 1);
  lua_pushstring((uint64_t)a1, v2);
  return 1;
}

uint64_t __LuaVMLDO_SetTableKeyIntValue(void *a1, char *a2, int a3)
{
  if (lua_type(a1, -1) == 5)
  {
    lua_pushinteger((uint64_t)a1, a3);
    lua_setfield(a1, -2, a2);
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t __LuaVMLDO_SetTableKeyStringValue(void *a1, char *a2, uint64_t a3)
{
  if (lua_type(a1, -1) == 5)
  {
    uint64_t result = __LuaVMLDO_PushStringProtected((uint64_t)a1, a3);
    if (!result)
    {
      lua_setfield(a1, -2, a2);
      return 0;
    }
  }
  else
  {
    return err_GenerateErrorArg();
  }
  return result;
}

uint64_t __LuaVMLDO_SetTableKeyBooleanValue(void *a1, char *a2, int a3)
{
  if (lua_type(a1, -1) == 5)
  {
    BOOL v6 = LuaVMUtil_lhBOOL_to_luaBOOLean(a3);
    lua_pushBOOLean((uint64_t)a1, v6);
    lua_setfield(a1, -2, a2);
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t LuaVMUtil_pushLuaStringAndDestroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (char *)LHString_BorrowCPtr(a2);
    lua_pushstring(a1, v4);
    uint64_t v5 = LDOString_BorrowAllocator(a2);
    OOC_PlacementDeleteObject(v5, a2);
  }
  return 0;
}

uint64_t LuaVMUtil_u32_index_to_luainteger(int a1)
{
  return (a1 + 1);
}

uint64_t LuaVMUtil_u32_to_luainteger(uint64_t result)
{
  return result;
}

uint64_t LuaVMUtil_s32_to_luainteger(uint64_t result)
{
  return (int)result;
}

uint64_t LuaVMUtil_luainteger_to_u32_index(void *a1, int a2, _DWORD *a3)
{
  if (lua_isinteger(a1, a2) && (int v6 = lua_tointegerx(a1, a2, 0), v6 > 0))
  {
    if (a3) {
      *a3 = v6 - 1;
    }
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t LuaVMUtil_luainteger_to_u32(void *a1, int a2, _DWORD *a3)
{
  if (!lua_isinteger(a1, a2) || (int v6 = lua_tointegerx(a1, a2, 0), v6 < 0))
  {
    return err_GenerateErrorArg();
  }
  else
  {
    if (a3) {
      *a3 = v6;
    }
    return 0;
  }
}

uint64_t LuaVMUtil_luainteger_to_s32(void *a1, int a2, _DWORD *a3)
{
  if (lua_isinteger(a1, a2))
  {
    if (a3) {
      *a3 = lua_tointegerx(a1, a2, 0);
    }
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t LuaVMUtil_luaBOOLean_to_lhBOOL(void *a1, int a2, _DWORD *a3)
{
  if (lua_type(a1, a2) == 1)
  {
    if (a3) {
      *a3 = lua_toBOOLean(a1, a2) == 1;
    }
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

BOOL LuaVMUtil_lhBOOL_to_luaBOOLean(int a1)
{
  return a1 == 1;
}

uint64_t LuaVMUtil_luastring_to_string(void *a1, int a2, uint64_t *a3)
{
  if (lua_isstring(a1, a2))
  {
    if (a3) {
      *a3 = lua_tolstring(a1, a2, 0);
    }
    return 0;
  }
  else
  {
    return err_GenerateErrorArg();
  }
}

uint64_t LuaVMUtil_luatable_to_u32array(void *a1, int a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  int v16 = 0;
  *a5 = 0;
  *a4 = 0;
  lua_len(a1, a2);
  int v10 = lua_gettop((uint64_t)a1);
  uint64_t result = LuaVMUtil_luainteger_to_u32(a1, v10, a5);
  unsigned int v17 = result;
  if (!result)
  {
    lua_settop((uint64_t)a1, 0xFFFFFFFE);
    uint64_t v13 = *a5;
    if (!v13) {
      return 0;
    }
    uint64_t v12 = OOCAllocator_Calloc(a3, v13, 4, &v17);
    *a4 = v12;
    uint64_t result = v17;
    if (v17) {
      goto LABEL_3;
    }
    lua_pushnil((uint64_t)a1);
    if (lua_next(a1, a2))
    {
      unsigned int v14 = 0;
      while (1)
      {
        int v15 = lua_gettop((uint64_t)a1);
        uint64_t result = LuaVMUtil_luainteger_to_u32(a1, v15, &v16);
        unsigned int v17 = result;
        if (result) {
          break;
        }
        *(_DWORD *)(*a4 + 4 * v14++) = v16;
        lua_settop((uint64_t)a1, 0xFFFFFFFE);
        if (!lua_next(a1, a2)) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      lua_settop((uint64_t)a1, 0xFFFFFFFE);
      uint64_t result = v17;
      if (!v17) {
        return result;
      }
    }
  }
  uint64_t v12 = *a4;
LABEL_3:
  if (v12)
  {
    OOCAllocator_Free(a3, v12);
    *a4 = 0;
    return v17;
  }
  return result;
}

uint64_t LuaVMUtil_error(void *a1, char *a2)
{
  if (!a2) {
    a2 = "Unknown Lua error";
  }
  lua_pushstring((uint64_t)a1, a2);
  log_LuaLog(a1);

  return lua_error(a1);
}

uint64_t LuaVMUtil_RegisterRSRC(void *a1)
{
  if (lua_type(a1, 1) == 2) {
    lua_setfield(a1, -1001000, "LUA_RSRC_ST");
  }
  return 0;
}

uint64_t LuaVMUtil_GetObjc(void *a1)
{
  if (lua_getfield(a1, -1001000, "LUA_RSRC_ST") != 2) {
    return 0;
  }
  uint64_t result = lua_touserdata(a1, -1);
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

uint64_t LuaVMUtil_GetRsrc(void *a1)
{
  if (lua_getfield(a1, -1001000, "LUA_RSRC_ST") != 2) {
    return 0;
  }
  uint64_t result = lua_touserdata(a1, -1);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t luaopen_luautf8(void *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  memcpy(__dst, &off_26D20EEA0, sizeof(__dst));
  luaL_checkversion_(a1, 136, 503.0, v2, v3, v4, v5, v6, v7, v14);
  lua_createtable((uint64_t)a1, 0, 24);
  luaL_setfuncs(a1, (uint64_t)__dst, 0, v8, v9, v10, v11, v12);
  lua_pushlstring((uint64_t)a1, "[", 0xEuLL);
  lua_setfield(a1, -2, "charpattern");
  lua_setglobal((uint64_t)a1, "luautf8");
  return 1;
}

uint64_t Lutf8_offset(void *a1)
{
  int64_t v22 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v22);
  uint64_t v3 = luaL_checkinteger(a1, 2);
  if (v3 < 0) {
    uint64_t v4 = v22 + 1;
  }
  else {
    uint64_t v4 = 1;
  }
  uint64_t v5 = luaL_optinteger(a1, 3, v4);
  uint64_t v12 = v5;
  if (v5 < 0)
  {
    uint64_t v12 = 0;
    if (v22 < (unint64_t)-v5)
    {
LABEL_9:
      luaL_argerror(a1, 3);
      goto LABEL_10;
    }
    uint64_t v12 = v5 + v22 + 1;
  }
  uint64_t v13 = v12 - 1;
  if (v12 < 1) {
    goto LABEL_9;
  }
  --v12;
  if (v13 > v22) {
    goto LABEL_9;
  }
LABEL_10:
  if (!v3)
  {
    if (v12 >= 1)
    {
      while ((*(unsigned char *)(v2 + v12) & 0xC0) == 0x80)
      {
        if (v12-- <= 1)
        {
          uint64_t v12 = 0;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_36;
  }
  if ((*(unsigned char *)(v2 + v12) & 0xC0) == 0x80) {
    return luaL_error(a1, "initial position is a continuation byte", v6, v7, v8, v9, v10, v11, v21);
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = v3 - 1;
    if ((unint64_t)v3 < 2 || v12 >= v22)
    {
      uint64_t v18 = v3 - 1;
    }
    else
    {
      do
      {
        do
          char v17 = *(unsigned char *)(v2 + 1 + v12++);
        while ((v17 & 0xC0) == 0x80);
        uint64_t v18 = v16 - 1;
        if (v16 < 2) {
          break;
        }
        --v16;
      }
      while (v12 < v22);
    }
    goto LABEL_33;
  }
  if (v12 >= 1)
  {
    while (2)
    {
      unint64_t v19 = v12;
      do
      {
        uint64_t v12 = v19 - 1;
        if (v19 <= 1)
        {
          uint64_t v12 = 0;
          if (v3 != -1) {
            goto LABEL_34;
          }
          goto LABEL_36;
        }
        int v20 = *(unsigned char *)(v2 - 1 + v19--) & 0xC0;
      }
      while (v20 == 128);
      uint64_t v18 = v3 + 1;
      if (v3 <= -2)
      {
        ++v3;
        if (v12 + 1 > 1) {
          continue;
        }
      }
      break;
    }
LABEL_33:
    if (v18) {
      goto LABEL_34;
    }
LABEL_36:
    lua_pushinteger((uint64_t)a1, v12 + 1);
    return 1;
  }
LABEL_34:
  lua_pushnil((uint64_t)a1);
  return 1;
}

uint64_t Lutf8_codes(void *a1)
{
  int v2 = lua_toBOOLean(a1, 2);
  luaL_checklstring(a1, 1, 0);
  if (v2) {
    uint64_t v3 = iter_auxlax;
  }
  else {
    uint64_t v3 = iter_auxstrict;
  }
  lua_pushcclosure((uint64_t)a1, (uint64_t)v3, 0);
  lua_pushvalue(a1, 1);
  lua_pushinteger((uint64_t)a1, 0);
  return 3;
}

uint64_t Lutf8_codepoint(void *a1)
{
  unint64_t v25 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v25);
  unint64_t v3 = v25;
  uint64_t v4 = luaL_optinteger(a1, 2, 1);
  if (v3 >= -v4) {
    uint64_t v5 = v3 + v4 + 1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4 < 0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = luaL_optinteger(a1, 3, v6);
  if (v3 >= -v7) {
    uint64_t v8 = v3 + v7 + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7 < 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v7;
  }
  int v16 = lua_toBOOLean(a1, 4);
  if (v6 <= 0) {
    luaL_argerror(a1, 2);
  }
  if (v9 > (uint64_t)v3) {
    luaL_argerror(a1, 3);
  }
  uint64_t v17 = v9 - v6;
  if (v9 < v6) {
    return 0;
  }
  if (v17 < 0x7FFFFFFF)
  {
    luaL_checkstack(a1, v17 + 1, (uint64_t)"string slice too long", v11, v12, v13, v14, v15, v24);
    LODWORD(v18) = 0;
    unint64_t v20 = v2 + v9;
    uint64_t v21 = (unsigned __int8 *)(v6 + v2 - 1);
    while (1)
    {
      HIDWORD(v24) = 0;
      uint64_t v21 = utf8_safe_decode(a1, (char *)v21, (unsigned int *)&v24 + 1);
      if (!v16 && (HIWORD(v24) > 0x10u || (HIDWORD(v24) & 0xFFFFF800) == 55296)) {
        break;
      }
      lua_pushinteger((uint64_t)a1, HIDWORD(v24));
      uint64_t v18 = (v18 + 1);
      if ((unint64_t)v21 >= v20) {
        return v18;
      }
    }
    unint64_t v19 = "invalid UTF-8 code";
  }
  else
  {
    unint64_t v19 = "string slice too long";
  }
  return luaL_error(a1, v19, v10, v11, v12, v13, v14, v15, v24);
}

uint64_t Lutf8_len(void *a1)
{
  unint64_t v23 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v23);
  uint64_t v3 = luaL_optinteger(a1, 2, 1);
  if (v23 >= -v3) {
    uint64_t v4 = v3 + v23 + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = luaL_optinteger(a1, 3, -1);
  if (v23 >= -v6) {
    uint64_t v7 = v6 + v23 + 1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6 < 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v6;
  }
  int v9 = lua_toBOOLean(a1, 4);
  uint64_t v10 = v5 - 1;
  if (v5 < 1 || (int64_t v11 = v23, --v5, v10 > (uint64_t)v23))
  {
    luaL_argerror(a1, 2);
    int64_t v11 = v23;
    uint64_t v10 = v5;
  }
  uint64_t v12 = v8 - 1;
  if (v8 > v11) {
    luaL_argerror(a1, 3);
  }
  uint64_t v13 = (char *)(v2 + v10);
  unint64_t v14 = v2 + v12 + 1;
  if ((unint64_t)v13 < v14)
  {
    uint64_t v15 = 0;
    while (1)
    {
      if (v9)
      {
        int v16 = v13 + 1;
        do
        {
          uint64_t v17 = v16;
          unint64_t v18 = (unint64_t)(v16 - 1);
          if ((unint64_t)(v16 - 1) >= v14) {
            break;
          }
          ++v16;
        }
        while ((*v17 & 0xC0) == 0x80);
        if (v18 >= v14) {
          uint64_t v13 = (char *)v14;
        }
        else {
          uint64_t v13 = v17;
        }
      }
      else
      {
        unsigned int v22 = 0;
        unint64_t v19 = utf8_decode_0(v13, &v22, 1);
        if (!v19 || (HIWORD(v22) <= 0x10u ? (BOOL v20 = (v22 & 0xFFFFF800) == 55296) : (BOOL v20 = 1), v20))
        {
          lua_pushnil((uint64_t)a1);
          lua_pushinteger((uint64_t)a1, (uint64_t)&v13[-v2 + 1]);
          return 2;
        }
        uint64_t v13 = (char *)v19;
      }
      ++v15;
      if ((unint64_t)v13 >= v14) {
        goto LABEL_36;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_36:
  lua_pushinteger((uint64_t)a1, v15);
  return 1;
}

uint64_t Lutf8_sub(void *a1)
{
  uint64_t v6 = 0;
  unint64_t v2 = luaL_checklstring(a1, 1, &v6);
  unint64_t v3 = v2 + v6;
  uint64_t v6 = luaL_checkinteger(a1, 2);
  uint64_t v5 = luaL_optinteger(a1, 3, -1);
  if (utf8_range(v2, v3, &v6, &v5)) {
    lua_pushlstring((uint64_t)a1, (char *)(v2 + v6), v5 - v6);
  }
  else {
    lua_pushstring((uint64_t)a1, "");
  }
  return 1;
}

uint64_t Lutf8_reverse(void *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  memset(v33, 0, 512);
  uint64_t v32 = 0;
  unint64_t v2 = luaL_checklstring(a1, 1, &v32);
  uint64_t v3 = v32;
  uint64_t v4 = (char *)(v2 + v32);
  int v5 = lua_toBOOLean(a1, 2);
  luaL_buffinit((uint64_t)a1, (uint64_t)v33);
  if (v5)
  {
    if (v3 >= 1)
    {
      do
      {
        int64_t v11 = v4 - 1;
        do
        {
          uint64_t v12 = v11;
          unint64_t v13 = (unint64_t)(v11 + 1);
          if ((unint64_t)(v11 + 1) <= v2) {
            break;
          }
          --v11;
        }
        while ((*v12 & 0xC0) == 0x80);
        if (v13 <= v2) {
          unint64_t v14 = (void *)v2;
        }
        else {
          unint64_t v14 = v12;
        }
        luaL_addlstring((uint64_t)v33, v14, v4 - (unsigned char *)v14, v6, v7, v8, v9, v10);
        uint64_t v4 = (char *)v14;
      }
      while (v2 < (unint64_t)v14);
    }
    goto LABEL_26;
  }
  if (v3 < 1)
  {
LABEL_26:
    luaL_pushresult((uint64_t)v33);
    return 1;
  }
  uint64_t v15 = v4;
  while (1)
  {
    LODWORD(v32) = 0;
    int v16 = v4 - 1;
    do
    {
      uint64_t v17 = v16;
      unint64_t v18 = (unint64_t)(v16 + 1);
      if ((unint64_t)(v16 + 1) <= v2) {
        break;
      }
      --v16;
    }
    while ((*v17 & 0xC0) == 0x80);
    uint64_t v4 = v18 <= v2 ? (char *)v2 : v17;
    utf8_safe_decode(a1, v4, (unsigned int *)&v32);
    if (WORD1(v32) > 0x10u || (v32 & 0xFFFFF800) == 55296) {
      return luaL_error(a1, "invalid UTF-8 code", v32, v19, v20, v21, v22, v23, v31);
    }
    if (!find_in_range((uint64_t)&compose_table, 0x13FuLL, v32))
    {
      luaL_addlstring((uint64_t)v33, v4, v15 - v4, v25, v26, v27, v28, v29);
      uint64_t v15 = v4;
    }
    if (v2 >= (unint64_t)v4) {
      goto LABEL_26;
    }
  }
}

uint64_t Lutf8_lower(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v2 = lua_type(a1, 1);
  if (v2 == 4)
  {
    memset(v17, 0, 512);
    uint64_t v16 = 0;
    int v5 = (char *)lua_tolstring(a1, 1, &v16);
    uint64_t v6 = v16;
    luaL_buffinit((uint64_t)a1, (uint64_t)v17);
    if (v6 >= 1)
    {
      uint64_t v7 = &v5[v6];
      do
      {
        LODWORD(v16) = 0;
        int v5 = (char *)utf8_safe_decode(a1, v5, (unsigned int *)&v16);
        unsigned int v8 = convert_char((uint64_t)&tolower_table, 0xB2uLL, v16);
        add_utf8char((uint64_t)v17, v8, v9, v10, v11, v12, v13, v14);
      }
      while (v5 < v7);
    }
    luaL_pushresult((uint64_t)v17);
    return 1;
  }
  if (v2 == 3)
  {
    uint64_t v3 = lua_tointegerx(a1, 1, 0);
    unsigned int v4 = convert_char((uint64_t)&tolower_table, 0xB2uLL, v3);
    lua_pushinteger((uint64_t)a1, v4);
    return 1;
  }

  return typeerror_0(a1);
}

uint64_t Lutf8_upper(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v2 = lua_type(a1, 1);
  if (v2 == 4)
  {
    memset(v17, 0, 512);
    uint64_t v16 = 0;
    int v5 = (char *)lua_tolstring(a1, 1, &v16);
    uint64_t v6 = v16;
    luaL_buffinit((uint64_t)a1, (uint64_t)v17);
    if (v6 >= 1)
    {
      uint64_t v7 = &v5[v6];
      do
      {
        LODWORD(v16) = 0;
        int v5 = (char *)utf8_safe_decode(a1, v5, (unsigned int *)&v16);
        unsigned int v8 = convert_char((uint64_t)&toupper_table, 0xC1uLL, v16);
        add_utf8char((uint64_t)v17, v8, v9, v10, v11, v12, v13, v14);
      }
      while (v5 < v7);
    }
    luaL_pushresult((uint64_t)v17);
    return 1;
  }
  if (v2 == 3)
  {
    uint64_t v3 = lua_tointegerx(a1, 1, 0);
    unsigned int v4 = convert_char((uint64_t)&toupper_table, 0xC1uLL, v3);
    lua_pushinteger((uint64_t)a1, v4);
    return 1;
  }

  return typeerror_0(a1);
}

uint64_t Lutf8_title(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v2 = lua_type(a1, 1);
  if (v2 == 4)
  {
    memset(v17, 0, 512);
    uint64_t v16 = 0;
    int v5 = (char *)lua_tolstring(a1, 1, &v16);
    uint64_t v6 = v16;
    luaL_buffinit((uint64_t)a1, (uint64_t)v17);
    if (v6 >= 1)
    {
      uint64_t v7 = &v5[v6];
      do
      {
        LODWORD(v16) = 0;
        int v5 = (char *)utf8_safe_decode(a1, v5, (unsigned int *)&v16);
        unsigned int v8 = convert_char((uint64_t)&totitle_table, 0xC3uLL, v16);
        add_utf8char((uint64_t)v17, v8, v9, v10, v11, v12, v13, v14);
      }
      while (v5 < v7);
    }
    luaL_pushresult((uint64_t)v17);
    return 1;
  }
  if (v2 == 3)
  {
    uint64_t v3 = lua_tointegerx(a1, 1, 0);
    unsigned int v4 = convert_char((uint64_t)&totitle_table, 0xC3uLL, v3);
    lua_pushinteger((uint64_t)a1, v4);
    return 1;
  }

  return typeerror_0(a1);
}

uint64_t Lutf8_fold(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v2 = lua_type(a1, 1);
  if (v2 == 4)
  {
    memset(v17, 0, 512);
    uint64_t v16 = 0;
    int v5 = (char *)lua_tolstring(a1, 1, &v16);
    uint64_t v6 = v16;
    luaL_buffinit((uint64_t)a1, (uint64_t)v17);
    if (v6 >= 1)
    {
      uint64_t v7 = &v5[v6];
      do
      {
        LODWORD(v16) = 0;
        int v5 = (char *)utf8_safe_decode(a1, v5, (unsigned int *)&v16);
        unsigned int v8 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v16);
        add_utf8char((uint64_t)v17, v8, v9, v10, v11, v12, v13, v14);
      }
      while (v5 < v7);
    }
    luaL_pushresult((uint64_t)v17);
    return 1;
  }
  if (v2 == 3)
  {
    uint64_t v3 = lua_tointegerx(a1, 1, 0);
    unsigned int v4 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v3);
    lua_pushinteger((uint64_t)a1, v4);
    return 1;
  }

  return typeerror_0(a1);
}

uint64_t Lutf8_byte(void *a1)
{
  uint64_t v10 = 0;
  unint64_t v2 = luaL_checklstring(a1, 1, &v10);
  unint64_t v3 = v2 + v10;
  uint64_t v10 = luaL_optinteger(a1, 2, 1);
  uint64_t v9 = luaL_optinteger(a1, 3, v10);
  if (!utf8_range(v2, v3, &v10, &v9) || v10 >= v9) {
    return 0;
  }
  LODWORD(v4) = 0;
  unint64_t v5 = v2 + v9;
  uint64_t v6 = (unsigned __int8 *)(v2 + v10);
  do
  {
    unsigned int v8 = 0;
    uint64_t v6 = utf8_safe_decode(a1, (char *)v6, &v8);
    lua_pushinteger((uint64_t)a1, v8);
    uint64_t v4 = (v4 + 1);
  }
  while ((unint64_t)v6 < v5);
  return v4;
}

uint64_t Lutf8_char(void *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v2 = lua_gettop((uint64_t)a1);
  memset(v13, 0, 512);
  luaL_buffinit((uint64_t)a1, (uint64_t)v13);
  if (v2 >= 1)
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v3 = (v3 + 1);
      uint64_t v4 = luaL_checkinteger(a1, v3);
      unsigned int v11 = v4;
      if (v4 >= 1114112) {
        luaL_argerror(a1, v3);
      }
      add_utf8char((uint64_t)v13, v11, v5, v6, v7, v8, v9, v10);
    }
    while (v2 != v3);
  }
  luaL_pushresult((uint64_t)v13);
  return 1;
}

uint64_t Lutf8_escape(void *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)&v21[0] = 0;
  int v2 = (char *)luaL_checklstring(a1, 1, v21);
  uint64_t v3 = *(void *)&v21[0];
  memset(v21, 0, 512);
  luaL_buffinit((uint64_t)a1, (uint64_t)v21);
  if (v3 < 1) {
    goto LABEL_40;
  }
  unint64_t v4 = (unint64_t)&v2[v3];
  do
  {
    unsigned int v20 = 0;
    uint64_t v5 = utf8_safe_decode(a1, v2, &v20);
    int v2 = (char *)v5;
    unsigned int v12 = v20;
    if (v20 != 37) {
      goto LABEL_26;
    }
    int v13 = 0;
    int v14 = (char)*v5;
    int v15 = *v5;
    if (v14 > 84)
    {
      if (v14 <= 116)
      {
        if (v14 != 85)
        {
          if (v14 != 88) {
            goto LABEL_38;
          }
LABEL_35:
          int v13 = 1;
        }
LABEL_36:
        if ((unint64_t)(v5 + 1) >= v4)
        {
LABEL_38:
          int v2 = (char *)utf8_safe_decode(a1, (char *)v5, &v20);
          unsigned int v12 = v20;
          goto LABEL_26;
        }
        int v15 = v5[1];
        int v2 = (char *)(v5 + 1);
        goto LABEL_6;
      }
      if (v14 == 117) {
        goto LABEL_36;
      }
      if (v14 != 123)
      {
        if (v14 != 120) {
          goto LABEL_38;
        }
        goto LABEL_35;
      }
    }
    else if ((v14 - 48) >= 0xA)
    {
      goto LABEL_38;
    }
LABEL_6:
    if (v15 == 123) {
      ++v2;
    }
    if ((unint64_t)v2 >= v4)
    {
      unsigned int v12 = 0;
      goto LABEL_25;
    }
    unsigned int v12 = 0;
    if (v13) {
      int v16 = 16;
    }
    else {
      int v16 = 10;
    }
    while (1)
    {
      int v17 = *v2;
      int v18 = v17 - 48;
      if ((v17 - 48) > 9) {
        break;
      }
LABEL_22:
      unsigned int v12 = v18 + v12 * v16;
      if ((unint64_t)++v2 >= v4) {
        goto LABEL_25;
      }
    }
    if (v13 && (v17 - 65) <= 5)
    {
      int v18 = v17 - 55;
      goto LABEL_22;
    }
    if (v13 && (v17 - 97) <= 5)
    {
      int v18 = v17 - 87;
      goto LABEL_22;
    }
    if (v15 != 123) {
      goto LABEL_25;
    }
    if (v17 != 125)
    {
      luaL_error(a1, "invalid escape '%c'", v6, v7, v8, v9, v10, v11, *v2);
      int v18 = v17;
      goto LABEL_22;
    }
    ++v2;
LABEL_25:
    unsigned int v20 = v12;
LABEL_26:
    add_utf8char((uint64_t)v21, v12, v6, v7, v8, v9, v10, v11);
  }
  while ((unint64_t)v2 < v4);
LABEL_40:
  luaL_pushresult((uint64_t)v21);
  return 1;
}

uint64_t Lutf8_insert(void *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(void *)&v27[0] = 0;
  int v2 = (const void *)luaL_checklstring(a1, 1, v27);
  uint64_t v3 = *(void *)&v27[0];
  unint64_t v4 = (unint64_t)v2 + *(void *)&v27[0];
  unint64_t v26 = 0;
  memset(v27, 0, 512);
  uint64_t v5 = 2;
  if (lua_type(a1, 2) != 3)
  {
    uint64_t v8 = (unsigned char *)v4;
    goto LABEL_10;
  }
  int v6 = lua_tointegerx(a1, 2, 0);
  if (v6)
  {
    if (v6 < 0) {
      uint64_t v7 = v3 + 1;
    }
    else {
      uint64_t v7 = 1;
    }
    uint64_t v8 = utf8_offset((unint64_t)v2, v4, v7, v6 + (~v6 >> 31));
    if (v8) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = (unsigned char *)v4;
    if (v4) {
      goto LABEL_8;
    }
  }
  luaL_argerror(a1, 2);
LABEL_8:
  uint64_t v5 = 3;
LABEL_10:
  uint64_t v9 = (const void *)luaL_checklstring(a1, v5, &v26);
  luaL_buffinit((uint64_t)a1, (uint64_t)v27);
  luaL_addlstring((uint64_t)v27, v2, v8 - (unsigned char *)v2, v10, v11, v12, v13, v14);
  luaL_addlstring((uint64_t)v27, v9, v26, v15, v16, v17, v18, v19);
  luaL_addlstring((uint64_t)v27, v8, v4 - (void)v8, v20, v21, v22, v23, v24);
  luaL_pushresult((uint64_t)v27);
  return 1;
}

uint64_t Lutf8_remove(void *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)&v18[0] = 0;
  int v2 = (char *)luaL_checklstring(a1, 1, v18);
  uint64_t v3 = *(void *)&v18[0];
  unint64_t v4 = (unint64_t)&v2[*(void *)&v18[0]];
  unint64_t v17 = luaL_optinteger(a1, 2, -1);
  uint64_t v16 = luaL_optinteger(a1, 3, -1);
  if (utf8_range((unint64_t)v2, v4, (uint64_t *)&v17, &v16))
  {
    memset(v18, 0, 512);
    luaL_buffinit((uint64_t)a1, (uint64_t)v18);
    luaL_addlstring((uint64_t)v18, v2, v17, v5, v6, v7, v8, v9);
    luaL_addlstring((uint64_t)v18, &v2[v16], v3 - v16, v10, v11, v12, v13, v14);
    luaL_pushresult((uint64_t)v18);
  }
  else
  {
    lua_settop((uint64_t)a1, 1u);
  }
  return 1;
}

uint64_t Lutf8_charpos(void *a1)
{
  unint64_t v15 = 0;
  uint64_t v2 = luaL_checklstring(a1, 1, &v15);
  unint64_t v3 = v15;
  unint64_t v4 = v2 + v15;
  if ((int)lua_type(a1, 3) <= 0)
  {
    uint64_t v13 = luaL_optinteger(a1, 2, 0);
    if (v13 < 0) {
      uint64_t v12 = v3 + 1;
    }
    else {
      uint64_t v12 = 1;
    }
    uint64_t v8 = v13 - (v13 > 0);
    uint64_t v9 = (uint64_t)a1;
    unint64_t v10 = v2;
    unint64_t v11 = v4;
  }
  else
  {
    uint64_t v5 = luaL_optinteger(a1, 2, 1);
    if (v3 >= -v5) {
      uint64_t v6 = v3 + v5 + 1;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v5 >= 0) {
      uint64_t v6 = v5;
    }
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    uint64_t v8 = luaL_checkinteger(a1, 3);
    uint64_t v9 = (uint64_t)a1;
    unint64_t v10 = v2;
    unint64_t v11 = v4;
    uint64_t v12 = v7;
  }
  return push_offset(v9, v10, v11, v12, v8);
}

uint64_t Lutf8_next(void *a1)
{
  unint64_t v10 = 0;
  unint64_t v2 = luaL_checklstring(a1, 1, &v10);
  unint64_t v3 = v10;
  uint64_t v4 = luaL_optinteger(a1, 2, 1);
  if (v3 >= -v4) {
    uint64_t v5 = v3 + v4 + 1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4 < 0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  BOOL v7 = (int)lua_type(a1, 2) > 0;
  uint64_t v8 = luaL_optinteger(a1, 3, v7);
  return push_offset((uint64_t)a1, v2, v2 + v3, v6, v8);
}

uint64_t Lutf8_width(void *a1)
{
  int v2 = lua_type(a1, 1);
  BOOL v3 = lua_toBOOLean(a1, 2) == 0;
  int v4 = luaL_optinteger(a1, 3, 0);
  if (v2 == 4)
  {
    uint64_t v16 = 0;
    uint64_t v8 = lua_tolstring(a1, 1, &v16);
    if (v16 < 1)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v9 = (unsigned __int8 *)v8;
      int v10 = 0;
      unint64_t v11 = v8 + v16;
      do
      {
        unsigned int v15 = 0;
        uint64_t v9 = utf8_safe_decode(a1, (char *)v9, &v15);
        int v12 = utf8_width(v15, v3);
        if (v12) {
          int v13 = v12;
        }
        else {
          int v13 = v4;
        }
        v10 += v13;
      }
      while ((unint64_t)v9 < v11);
      uint64_t v7 = v10;
    }
    goto LABEL_17;
  }
  if (v2 == 3)
  {
    unsigned int v5 = lua_tointegerx(a1, 1, 0);
    unsigned int v6 = utf8_width(v5, v3);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = v4;
    }
LABEL_17:
    lua_pushinteger((uint64_t)a1, v7);
    return 1;
  }

  return typeerror_0(a1);
}

uint64_t Lutf8_widthindex(void *a1)
{
  uint64_t v15 = 0;
  uint64_t v2 = 1;
  BOOL v3 = (char *)luaL_checklstring(a1, 1, &v15);
  uint64_t v4 = v15;
  int v5 = luaL_checkinteger(a1, 2);
  BOOL v6 = lua_toBOOLean(a1, 3) == 0;
  int v7 = luaL_optinteger(a1, 4, 0);
  if (v4 < 1)
  {
LABEL_8:
    lua_pushinteger((uint64_t)a1, v2);
    return 1;
  }
  else
  {
    uint64_t v8 = &v3[v4];
    uint64_t v9 = v7;
    uint64_t v2 = 1;
    while (1)
    {
      unsigned int v14 = 0;
      BOOL v3 = (char *)utf8_safe_decode(a1, v3, &v14);
      unsigned int v10 = utf8_width(v14, v6);
      uint64_t v11 = v10 ? v10 : v9;
      BOOL v12 = __OFSUB__(v5, v11);
      v5 -= v11;
      if ((v5 < 0) ^ v12 | (v5 == 0)) {
        break;
      }
      ++v2;
      if (v3 >= v8) {
        goto LABEL_8;
      }
    }
    lua_pushinteger((uint64_t)a1, v2);
    lua_pushinteger((uint64_t)a1, v11 + v5);
    lua_pushinteger((uint64_t)a1, v11);
    return 3;
  }
}

uint64_t Lutf8_ncasecmp(void *a1)
{
  uint64_t v15 = 0;
  uint64_t v2 = (char *)luaL_checklstring(a1, 1, &v15);
  uint64_t v3 = v15;
  uint64_t v15 = 0;
  uint64_t v4 = luaL_checklstring(a1, 2, &v15);
  if (v3 <= 0 && v15 < 1)
  {
LABEL_11:
    uint64_t v11 = (uint64_t)a1;
    uint64_t v12 = 0;
  }
  else
  {
    BOOL v6 = (unsigned __int8 *)v4;
    int v7 = &v2[v3];
    uint64_t v8 = (unsigned __int8 *)(v4 + v15);
    while (1)
    {
      unsigned int v14 = 0;
      LODWORD(v15) = 0;
      if (v2 == v7)
      {
        unsigned int v9 = 0;
        unsigned int v10 = 1;
        unsigned int v14 = 1;
        goto LABEL_14;
      }
      if (v6 == v8) {
        break;
      }
      uint64_t v2 = (char *)utf8_safe_decode(a1, v2, (unsigned int *)&v15);
      BOOL v6 = utf8_safe_decode(a1, (char *)v6, &v14);
      unsigned int v9 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v15);
      LODWORD(v15) = v9;
      unsigned int v10 = convert_char((uint64_t)&tofold_table, 0xC6uLL, v14);
      unsigned int v14 = v10;
      if (v9 != v10) {
        goto LABEL_14;
      }
      if (v2 >= v7 && v6 >= v8) {
        goto LABEL_11;
      }
    }
    unsigned int v10 = 0;
    unsigned int v9 = 1;
    LODWORD(v15) = 1;
LABEL_14:
    if (v9 > v10) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = -1;
    }
    uint64_t v11 = (uint64_t)a1;
  }
  lua_pushinteger(v11, v12);
  return 1;
}

uint64_t Lutf8_find(void *a1)
{
  return find_aux(a1, 1);
}

uint64_t Lutf8_gmatch(void *a1)
{
  return 1;
}

uint64_t Lutf8_gsub(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v90 = *MEMORY[0x263EF8340];
  *(void *)&v89[0] = 0;
  uint64_t v2 = (char *)luaL_checklstring(a1, 1, v89);
  uint64_t v3 = *(void *)&v89[0];
  uint64_t v53 = &v2[*(void *)&v89[0]];
  *(void *)&v89[0] = 0;
  uint64_t v4 = (unsigned __int8 *)luaL_checklstring(v1, 2, v89);
  int v5 = &v4[*(void *)&v89[0]];
  int v6 = lua_type(v1, 3);
  uint64_t v54 = luaL_optinteger(v1, 4, v3 + 1);
  int v55 = *v4;
  long long v7 = 0uLL;
  memset(v89, 0, 512);
  if ((v6 - 3) >= 4)
  {
    luaL_argerror(v1, 3);
    long long v7 = 0uLL;
  }
  long long v86 = v7;
  long long v87 = v7;
  long long v84 = v7;
  long long v85 = v7;
  long long v82 = v7;
  long long v83 = v7;
  long long v80 = v7;
  long long v81 = v7;
  long long v78 = v7;
  long long v79 = v7;
  long long v76 = v7;
  long long v77 = v7;
  long long v74 = v7;
  long long v75 = v7;
  long long v72 = v7;
  long long v73 = v7;
  long long v70 = v7;
  long long v71 = v7;
  long long v68 = v7;
  long long v69 = v7;
  long long v66 = v7;
  long long v67 = v7;
  long long v64 = v7;
  long long v65 = v7;
  long long v62 = v7;
  long long v63 = v7;
  long long v60 = v7;
  long long v61 = v7;
  long long v58 = v7;
  long long v59 = v7;
  long long v56 = v7;
  long long v57 = v7;
  luaL_buffinit((uint64_t)v1, (uint64_t)v89);
  uint64_t v13 = 0;
  LODWORD(v56) = 200;
  if (v55 == 94) {
    ++v4;
  }
  *((void *)&v56 + 1) = v2;
  *(void *)&long long v57 = v53;
  *((void *)&v57 + 1) = v5;
  *(void *)&long long v58 = v1;
  double v52 = v1;
  int v51 = v6;
  while (v13 < v54)
  {
    DWORD2(v58) = 0;
    int matched = match_0((uint64_t)&v56, v2, (uint64_t)v4, v8, v9, v10, v11, v12);
    if (!matched) {
      goto LABEL_31;
    }
    uint64_t v15 = (unsigned __int8 *)matched;
    uint64_t v16 = (void *)v58;
    if (v6 == 5)
    {
      push_onecapture_0((uint64_t)&v56, 0, (uint64_t)v2, (uint64_t)matched, v9, v10, v11, v12, v50);
      lua_gettable(v16, 3);
    }
    else
    {
      if (v6 != 6)
      {
        uint64_t v88 = 0;
        uint64_t v31 = lua_tolstring((void *)v58, 3, &v88);
        if (v88 < 1) {
          goto LABEL_30;
        }
        uint64_t v32 = (unsigned __int8 *)v31;
        unint64_t v33 = v31 + v88;
        while (2)
        {
          LODWORD(v88) = 0;
          uint64_t v32 = utf8_safe_decode((void *)v58, (char *)v32, (unsigned int *)&v88);
          unsigned int v40 = v88;
          if (v88 == 37)
          {
            uint64_t v41 = (void *)v58;
            uint64_t v32 = utf8_safe_decode((void *)v58, (char *)v32, (unsigned int *)&v88);
            int v42 = v88;
            if (find_in_range((uint64_t)&digit_table, 0x40uLL, v88))
            {
              if (v42 == 48)
              {
                luaL_addlstring((uint64_t)v89, v2, v15 - (unsigned __int8 *)v2, v35, v36, v37, v38, v39);
              }
              else
              {
                push_onecapture_0((uint64_t)&v56, v42 - 49, (uint64_t)v2, (uint64_t)v15, v36, v37, v38, v39, v50);
                luaL_addvalue((uint64_t)v89);
              }
LABEL_26:
              if ((unint64_t)v32 >= v33) {
                goto LABEL_30;
              }
              continue;
            }
            if (v42 == 37)
            {
              unsigned int v40 = 37;
            }
            else
            {
              luaL_error(v41, "invalid use of '%c' in replacement string", v34, v35, v36, v37, v38, v39, 37);
              unsigned int v40 = v88;
            }
          }
          break;
        }
        add_utf8char((uint64_t)v89, v40, v34, v35, v36, v37, v38, v39);
        goto LABEL_26;
      }
      lua_pushvalue((void *)v58, 3);
      int v22 = push_captures_0((uint64_t)&v56, (uint64_t)v2, (uint64_t)v15, v17, v18, v19, v20, v21);
      lua_callk((uint64_t)v16, v22, 1, 0, 0);
    }
    if (lua_toBOOLean(v16, -1))
    {
      if (!lua_isstring(v16, -1))
      {
        int v23 = lua_type(v16, -1);
        uint64_t v24 = lua_typename((uint64_t)v16, v23);
        luaL_error(v16, "invalid replacement value (a %s)", v25, v26, v27, v28, v29, v30, (uint64_t)v24);
      }
    }
    else
    {
      lua_settop((uint64_t)v16, 0xFFFFFFFE);
      lua_pushlstring((uint64_t)v16, v2, v15 - (unsigned __int8 *)v2);
    }
    luaL_addvalue((uint64_t)v89);
LABEL_30:
    ++v13;
    uint64_t v1 = v52;
    int v6 = v51;
    if (v15 <= (unsigned __int8 *)v2)
    {
LABEL_31:
      if (v2 >= v53) {
        break;
      }
      LODWORD(v88) = 0;
      uint64_t v15 = utf8_safe_decode(v1, v2, (unsigned int *)&v88);
      add_utf8char((uint64_t)v89, v88, v43, v44, v45, v46, v47, v48);
    }
    uint64_t v2 = (char *)v15;
    if (v55 == 94) {
      goto LABEL_36;
    }
  }
  uint64_t v15 = (unsigned __int8 *)v2;
LABEL_36:
  luaL_addlstring((uint64_t)v89, v15, v53 - (char *)v15, v8, v9, v10, v11, v12);
  luaL_pushresult((uint64_t)v89);
  lua_pushinteger((uint64_t)v1, v13);
  return 2;
}

uint64_t Lutf8_match(void *a1)
{
  return find_aux(a1, 0);
}

uint64_t iter_auxlax(void *a1)
{
  return iter_aux_0(a1, 0);
}

uint64_t iter_auxstrict(void *a1)
{
  return iter_aux_0(a1, 1);
}

uint64_t iter_aux_0(void *a1, int a2)
{
  uint64_t v19 = 0;
  uint64_t v4 = luaL_checklstring(a1, 1, &v19);
  unint64_t v5 = v4 + v19;
  int v6 = lua_tointegerx(a1, 2, 0);
  if (v6 < 1)
  {
    uint64_t v10 = (char *)v4;
  }
  else
  {
    long long v7 = (char *)(v4 + v6);
    do
    {
      uint64_t v8 = v7;
      unint64_t v9 = (unint64_t)(v7 - 1);
      if ((unint64_t)(v7 - 1) >= v5) {
        break;
      }
      ++v7;
    }
    while ((*v8 & 0xC0) == 0x80);
    if (v9 >= v5) {
      uint64_t v10 = (char *)v5;
    }
    else {
      uint64_t v10 = v8;
    }
  }
  if ((unint64_t)v10 >= v5) {
    return 0;
  }
  HIDWORD(v18) = 0;
  utf8_safe_decode(a1, v10, (unsigned int *)&v18 + 1);
  if (a2 && (HIWORD(HIDWORD(v18)) > 0x10u || (HIDWORD(v18) & 0xFFFFF800) == 0xD800)) {
    return luaL_error(a1, "invalid UTF-8 code", v11, v12, v13, v14, v15, v16, v18);
  }
  lua_pushinteger((uint64_t)a1, (uint64_t)&v10[-v4 + 1]);
  lua_pushinteger((uint64_t)a1, HIDWORD(v18));
  return 2;
}

unsigned __int8 *utf8_safe_decode(void *a1, char *a2, unsigned int *a3)
{
  uint64_t v10 = utf8_decode_0(a2, a3, 0);
  if (!v10) {
    luaL_error(a1, "invalid UTF-8 code", v4, v5, v6, v7, v8, v9, v12);
  }
  return v10;
}

unsigned __int8 *utf8_decode_0(char *a1, unsigned int *a2, int a3)
{
  unsigned int v3 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    if (!a3) {
      goto LABEL_22;
    }
LABEL_3:
    if (HIWORD(v3) <= 0x10u && (v3 & 0xFFFFF800) != 55296)
    {
LABEL_22:
      if (a2) {
        *a2 = v3;
      }
      return (unsigned __int8 *)(a1 + 1);
    }
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    uint64_t v7 = 0;
    int v6 = 0;
    while (1)
    {
      unsigned int v8 = v3;
      unsigned __int8 v9 = a1[v7 + 1];
      if ((v9 & 0xC0) != 0x80) {
        return 0;
      }
      int v6 = v9 & 0x3F | (v6 << 6);
      unsigned int v3 = 2 * v8;
      ++v7;
      if ((v8 & 0x20) == 0) {
        goto LABEL_14;
      }
    }
  }
  int v6 = 0;
  LODWORD(v7) = 0;
LABEL_14:
  uint64_t v5 = 0;
  if (v7 <= 5)
  {
    unsigned int v3 = ((v3 & 0x7F) << (5 * v7)) | v6;
    if ((v3 & 0x80000000) == 0)
    {
      uint64_t v5 = 0;
      uint64_t v10 = v7;
      unsigned int v11 = utf8_decode_limits_0[v7];
      BOOL v12 = v3 >= v11;
      uint64_t v13 = v3 >= v11 ? v10 : 0;
      if (v12)
      {
        a1 += v13;
        if (!a3) {
          goto LABEL_22;
        }
        goto LABEL_3;
      }
    }
  }
  return (unsigned __int8 *)v5;
}

BOOL utf8_range(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a3;
  unint64_t v9 = a2 - a1;
  BOOL v10 = (*a3 & 0x80000000) == 0;
  if ((*a3 & 0x80000000) != 0) {
    uint64_t v11 = v9 + 1;
  }
  else {
    uint64_t v11 = 1;
  }
  BOOL v12 = utf8_offset(a1, a2, v11, (int)v8 - v10);
  if ((*a4 & 0x80000000) != 0) {
    uint64_t v13 = v9 + 1;
  }
  else {
    uint64_t v13 = 1;
  }
  uint64_t v14 = utf8_offset(a1, a2, v13, (int)(*a4 - ((*a4 & 0x80000000) == 0)));
  if (v8 <= 0) {
    uint64_t v15 = (unsigned char *)a1;
  }
  else {
    uint64_t v15 = (unsigned char *)a2;
  }
  if (v12) {
    uint64_t v15 = v12;
  }
  *a3 = (uint64_t)&v15[-a1];
  if (v14)
  {
    uint64_t v16 = v14 + 1;
    do
    {
      uint64_t v17 = v16;
      unint64_t v18 = (unint64_t)(v16 - 1);
      if ((unint64_t)(v16 - 1) >= a2) {
        break;
      }
      ++v16;
    }
    while ((*v17 & 0xC0) == 0x80);
    if (v18 >= a2) {
      uint64_t v17 = (unsigned char *)a2;
    }
  }
  else if (*a4 <= 0)
  {
    uint64_t v17 = (unsigned char *)a1;
  }
  else
  {
    uint64_t v17 = (unsigned char *)a2;
  }
  uint64_t v19 = &v17[-a1];
  *a4 = (uint64_t)v19;
  return *a3 < (uint64_t)v19;
}

unsigned char *utf8_offset(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned char *)(a1 + a3 - 1);
  if (a4 < 0)
  {
    if ((unint64_t)v4 <= a1) {
      return 0;
    }
    do
    {
      BOOL v10 = v4 - 1;
      do
      {
        uint64_t v4 = v10;
        unint64_t v11 = (unint64_t)(v10 + 1);
        if ((unint64_t)(v10 + 1) <= a1) {
          break;
        }
        --v10;
      }
      while ((*v4 & 0xC0) == 0x80);
      if (v11 <= a1) {
        uint64_t v4 = (unsigned char *)a1;
      }
      uint64_t v6 = a4 + 1;
    }
    while ((unint64_t)v4 > a1 && a4++ < -1);
  }
  else if ((unint64_t)v4 >= a2 || a4 == 0)
  {
    uint64_t v6 = a4;
  }
  else
  {
    do
    {
      uint64_t v7 = v4 + 1;
      do
      {
        uint64_t v4 = v7;
        unint64_t v8 = (unint64_t)(v7 - 1);
        if ((unint64_t)(v7 - 1) >= a2) {
          break;
        }
        ++v7;
      }
      while ((*v4 & 0xC0) == 0x80);
      if (v8 >= a2) {
        uint64_t v4 = (unsigned char *)a2;
      }
      uint64_t v6 = a4 - 1;
    }
    while ((unint64_t)v4 < a2 && a4-- > 1);
  }
  if (v6) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL find_in_range(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0;
  while (1)
  {
    unint64_t v4 = (a2 + v3) >> 1;
    if (*(_DWORD *)(a1 + 12 * v4 + 4) >= a3) {
      break;
    }
    unint64_t v3 = v4 + 1;
LABEL_6:
    if (v3 >= a2) {
      return 0;
    }
  }
  unsigned int v5 = *(_DWORD *)(a1 + 12 * v4);
  a2 = (a2 + v3) >> 1;
  BOOL v6 = a3 >= v5;
  unsigned int v7 = a3 - v5;
  if (!v6) {
    goto LABEL_6;
  }
  return v7 % *(_DWORD *)(a1 + 12 * v4 + 8) == 0;
}

void *add_utf8char(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 >= 0x80)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 63;
    uint64_t v11 = 0x700000000;
    do
    {
      *(&v16 + v9) = a2 & 0x3F | 0x80;
      a2 >>= 6;
      unsigned int v12 = v10 >> 1;
      v11 -= 0x100000000;
      --v9;
      BOOL v13 = a2 > v10 >> 1;
      v10 >>= 1;
    }
    while (v13);
    v15[v11 >> 32] = a2 | (2 * ~(_BYTE)v12);
    unint64_t v8 = (1 - v9);
  }
  else
  {
    char v16 = a2;
    unint64_t v8 = 1;
  }
  return luaL_addlstring(a1, &v15[-v8 + 8], v8, a4, a5, a6, a7, a8);
}

uint64_t typeerror_0(void *a1)
{
  int v2 = lua_type(a1, 1);
  lua_typename((uint64_t)a1, v2);
  return luaL_error(a1, "%s expected, got %s", v3, v4, v5, v6, v7, v8, (uint64_t)"number/string");
}

uint64_t convert_char(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a2) {
    return a3;
  }
  unint64_t v3 = 0;
  while (1)
  {
    unint64_t v4 = (a2 + v3) >> 1;
    if (*(_DWORD *)(a1 + 16 * v4 + 4) >= a3) {
      break;
    }
    unint64_t v3 = v4 + 1;
LABEL_6:
    if (v3 >= a2) {
      return a3;
    }
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16 * v4);
  a2 = (a2 + v3) >> 1;
  BOOL v6 = a3 >= v5;
  unsigned int v7 = a3 - v5;
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v8 = a1 + 16 * v4;
  if (!(v7 % *(_DWORD *)(v8 + 8))) {
    return (*(_DWORD *)(v8 + 12) + a3);
  }
  return a3;
}

uint64_t push_offset(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v13 = 0;
  if (a5)
  {
    uint64_t v8 = utf8_offset(a2, a3, a4, a5);
  }
  else
  {
    uint64_t v8 = (char *)(a2 + a4 - 1);
    if ((*v8 & 0xC0) == 0x80)
    {
      uint64_t v9 = a4 + a2 - 2;
      do
      {
        unsigned int v10 = (char *)v9;
        unint64_t v11 = v9 + 1;
        if (v9 + 1 <= a2) {
          break;
        }
        --v9;
      }
      while ((*v10 & 0xC0) == 0x80);
      if (v11 <= a2) {
        uint64_t v8 = (char *)a2;
      }
      else {
        uint64_t v8 = v10;
      }
    }
  }
  uint64_t result = 0;
  if (v8)
  {
    if (v8 != (char *)a3)
    {
      utf8_decode_0(v8, &v13, 0);
      lua_pushinteger(a1, (uint64_t)&v8[-a2 + 1]);
      lua_pushinteger(a1, v13);
      return 2;
    }
  }
  return result;
}

uint64_t utf8_width(unsigned int a1, int a2)
{
  if (find_in_range((uint64_t)&doublewidth_table, 0x6EuLL, a1)) {
    return 2;
  }
  if (find_in_range((uint64_t)&ambiwidth_table, 0x8DuLL, a1))
  {
    if (a2) {
      return 1;
    }
    else {
      return 2;
    }
  }
  else
  {
    return !find_in_range((uint64_t)&compose_table, 0x13FuLL, a1)
        && !find_in_range((uint64_t)&unprintable_table, 0xFuLL, a1);
  }
}

uint64_t find_aux(void *a1, int a2)
{
  *(void *)&long long v54 = 0;
  unint64_t v4 = (unsigned char *)luaL_checklstring(a1, 1, &v54);
  uint64_t v5 = v54;
  unint64_t v6 = (unint64_t)&v4[v54];
  *(void *)&long long v54 = 0;
  unsigned int v7 = (char *)luaL_checklstring(a1, 2, &v54);
  uint64_t v8 = v54;
  unint64_t v9 = luaL_optinteger(a1, 3, 1);
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  if ((v10 & 0x80000000) != 0) {
    uint64_t v11 = v5 + 1;
  }
  else {
    uint64_t v11 = 1;
  }
  uint64_t v17 = utf8_offset((unint64_t)v4, v6, v11, (int)(v10 - ((int)v10 >= 0)));
  if (!v17)
  {
    uint64_t v17 = v4;
    if (v10 >= 1) {
      goto LABEL_50;
    }
  }
  uint64_t v53 = v4;
  unint64_t v18 = &v7[v8];
  int v52 = a2;
  if (a2)
  {
    if (!lua_toBOOLean(a1, 4) && v8 >= 1)
    {
      uint64_t v19 = v7;
      while (!cstdlib_strpbrk(v19, "^$*+?.([%-"))
      {
        v19 += cstdlib_strlen(v19) + 1;
        if (v19 >= v18) {
          goto LABEL_14;
        }
      }
      goto LABEL_21;
    }
LABEL_14:
    if (v8)
    {
      unint64_t v20 = v6 - (void)v17;
      if (v8 <= v6 - (unint64_t)v17)
      {
        size_t v21 = v20 - (v8 - 1);
        if (v20 != v8 - 1)
        {
          do
          {
            int v22 = (char *)cstdlib_memchr(v17, *v7, v21);
            if (!v22) {
              break;
            }
            int v23 = v22;
            uint64_t v24 = v22 + 1;
            if (!cstdlib_memcmp(v22 + 1, v7 + 1, v8 - 1))
            {
              uint64_t v17 = v23;
              goto LABEL_66;
            }
            uint64_t v25 = &v17[v21];
            uint64_t v17 = v24;
            size_t v21 = v25 - v24;
          }
          while (v25 != v24);
        }
      }
    }
    else if (v17)
    {
LABEL_66:
      uint64_t v46 = &v17[v8];
      if ((v17[v8] & 0xC0) == 0x80)
      {
        uint64_t v47 = (uint64_t)&v17[v8 + 1];
        do
        {
          uint64_t v48 = (unsigned char *)v47;
          unint64_t v49 = v47 - 1;
          if (v47 - 1 >= v6) {
            break;
          }
          ++v47;
        }
        while ((*v48 & 0xC0) == 0x80);
        if (v49 >= v6) {
          uint64_t v46 = (unsigned char *)v6;
        }
        else {
          uint64_t v46 = v48;
        }
      }
      uint64_t v50 = (int)(get_index(v17, v4, v6) + 1);
      lua_pushinteger((uint64_t)a1, v50);
      int index = get_index(v46, v17, v6);
      lua_pushinteger((uint64_t)a1, v50 + index - 1);
      return 2;
    }
LABEL_50:
    lua_pushnil((uint64_t)a1);
    return 1;
  }
LABEL_21:
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  int v26 = *v7;
  if (v26 == 94) {
    ++v7;
  }
  if (v10 < 0)
  {
    if (v5 < 1)
    {
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = v53;
      do
      {
        uint64_t v29 = v28 + 1;
        do
        {
          uint64_t v28 = v29;
          unint64_t v30 = (unint64_t)(v29 - 1);
          if ((unint64_t)(v29 - 1) >= v6) {
            break;
          }
          ++v29;
        }
        while ((*v28 & 0xC0) == 0x80);
        if (v30 >= v6) {
          uint64_t v28 = (unsigned char *)v6;
        }
        ++v27;
      }
      while ((unint64_t)v28 < v6);
    }
    v10 += v27 + 1;
  }
  LODWORD(v54) = 200;
  *((void *)&v54 + 1) = v53;
  *(void *)&long long v55 = v6;
  *((void *)&v55 + 1) = v18;
  *(void *)&long long v56 = a1;
  while (1)
  {
    DWORD2(v56) = 0;
    int matched = match_0((uint64_t)&v54, v17, (uint64_t)v7, v12, v13, v14, v15, v16);
    if (matched) {
      break;
    }
    if (v17 != (unsigned char *)v6)
    {
      ++v10;
      uint64_t v32 = v17 + 1;
      do
      {
        unint64_t v33 = v32;
        unint64_t v34 = (unint64_t)(v32 - 1);
        if ((unint64_t)(v32 - 1) >= v6) {
          break;
        }
        ++v32;
      }
      while ((*v33 & 0xC0) == 0x80);
      uint64_t v17 = v34 >= v6 ? (unsigned char *)v6 : v33;
      if (v26 != 94 && (unint64_t)v17 <= v6) {
        continue;
      }
    }
    goto LABEL_50;
  }
  unint64_t v36 = (unint64_t)matched;
  if (!v52) {
    return push_captures_0((uint64_t)&v54, (uint64_t)v17, (uint64_t)matched, v12, v13, v14, v15, v16);
  }
  lua_pushinteger((uint64_t)a1, v10);
  if ((unint64_t)v17 >= v36)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    do
    {
      uint64_t v38 = v17 + 1;
      do
      {
        uint64_t v39 = v38;
        unint64_t v40 = (unint64_t)(v38 - 1);
        if ((unint64_t)(v38 - 1) >= v36) {
          break;
        }
        ++v38;
      }
      while ((*v39 & 0xC0) == 0x80);
      if (v40 >= v36) {
        uint64_t v17 = (unsigned char *)v36;
      }
      else {
        uint64_t v17 = v39;
      }
      ++v37;
    }
    while ((unint64_t)v17 < v36);
  }
  lua_pushinteger((uint64_t)a1, v10 + v37 - 1);
  return push_captures_0((uint64_t)&v54, 0, 0, v41, v42, v43, v44, v45) + 2;
}

uint64_t get_index(unsigned char *a1, unsigned char *a2, unint64_t a3)
{
  int v3 = 0;
  if ((unint64_t)a2 < a3 && a2 < a1)
  {
    int v3 = 0;
    do
    {
      unint64_t v4 = a2 + 1;
      do
      {
        uint64_t v5 = v4;
        unint64_t v6 = (unint64_t)(v4 - 1);
        if ((unint64_t)(v4 - 1) >= a3) {
          break;
        }
        ++v4;
      }
      while ((*v5 & 0xC0) == 0x80);
      if (v6 >= a3) {
        a2 = (unsigned char *)a3;
      }
      else {
        a2 = v5;
      }
      ++v3;
    }
    while ((unint64_t)a2 < a3 && a2 < a1);
  }
  return v3 - (a2 != a1);
}

char *match_0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (char *)a3;
  if (!(*(_DWORD *)a1)--) {
    luaL_error(*(void **)(a1 + 32), "pattern too complex", a3, a4, a5, a6, a7, a8, v84);
  }
  if (*(char **)(a1 + 24) == v8) {
    goto LABEL_108;
  }
  do
  {
    unsigned int v85 = 0;
    utf8_safe_decode(*(void **)(a1 + 32), v8, &v85);
    switch(v85)
    {
      case '$':
        if (v8 + 1 != *(char **)(a1 + 24)) {
          goto LABEL_6;
        }
        if (a2 == *(char **)(a1 + 16)) {
          uint64_t matched = (uint64_t)a2;
        }
        else {
          uint64_t matched = 0;
        }
        goto LABEL_107;
      case '%':
        unint64_t v30 = (char *)utf8_safe_decode(*(void **)(a1 + 32), v8 + 1, &v85);
        unint64_t v18 = (unsigned __int8 *)v30;
        if (v85 - 48 < 0xA)
        {
          unsigned int v37 = v85 - 49;
          if (v85 < 0x31 || (signed int)v37 >= *(_DWORD *)(a1 + 40) || *(void *)(a1 + 16 * v37 + 56) == -1) {
            unsigned int v37 = luaL_error(*(void **)(a1 + 32), "invalid capture index %%%d", v31, v32, v33, v34, v35, v36, v85 - 48);
          }
          size_t v38 = *(void *)(a1 + 16 * (int)v37 + 56);
          if (*(void *)(a1 + 16) - (void)a2 >= v38
            && !cstdlib_memcmp(*(const void **)(a1 + 16 * (int)v37 + 48), a2, v38)
            && a2 != 0)
          {
            a2 += v38;
            goto LABEL_43;
          }
          goto LABEL_106;
        }
        if (v85 == 102)
        {
          uint64_t v87 = 0;
          if (*v30 != 91) {
            luaL_error(*(void **)(a1 + 32), "missing '[' after '%%f' in pattern", v31, v32, v33, v34, v35, v36, v84);
          }
          long long v54 = classend_0(a1, (char *)v18);
          unint64_t v55 = *(void *)(a1 + 8);
          if (a2 != (char *)v55)
          {
            long long v56 = a2 - 1;
            do
            {
              long long v57 = v56;
              unint64_t v58 = (unint64_t)(v56 + 1);
              if ((unint64_t)(v56 + 1) <= v55) {
                break;
              }
              --v56;
            }
            while ((*v57 & 0xC0) == 0x80);
            if (v58 <= v55) {
              long long v59 = *(char **)(a1 + 8);
            }
            else {
              long long v59 = v57;
            }
            utf8_decode_0(v59, (unsigned int *)&v87 + 1, 0);
          }
          if (a2 != *(char **)(a1 + 16)) {
            utf8_decode_0(a2, (unsigned int *)&v87, 0);
          }
          if (!matchbracketclass_0(a1, HIDWORD(v87), (uint64_t)v18, (unint64_t)(v54 - 1))
            && matchbracketclass_0(a1, v87, (uint64_t)v18, (unint64_t)(v54 - 1)))
          {
            unint64_t v18 = v54;
            goto LABEL_43;
          }
          goto LABEL_106;
        }
        if (v85 != 98)
        {
LABEL_6:
          unint64_t v18 = classend_0(a1, v8);
          if (singlematch_0(a1, a2, v8, (uint64_t)v18))
          {
            unint64_t v19 = *(void *)(a1 + 16);
            unint64_t v20 = a2 + 1;
            do
            {
              size_t v21 = v20;
              unint64_t v22 = (unint64_t)(v20 - 1);
              if ((unint64_t)(v20 - 1) >= v19) {
                break;
              }
              ++v20;
            }
            while ((*v21 & 0xC0) == 0x80);
            if (v22 >= v19) {
              int v23 = *(char **)(a1 + 16);
            }
            else {
              int v23 = v21;
            }
            int v24 = (char)*v18;
            if (v24 > 62)
            {
              if (v24 == 63)
              {
                unint64_t v25 = *(void *)(a1 + 24);
                int v26 = v18 + 1;
                do
                {
                  uint64_t v27 = v26;
                  unint64_t v28 = (unint64_t)(v26 - 1);
                  if ((unint64_t)(v26 - 1) >= v25) {
                    break;
                  }
                  ++v26;
                }
                while ((*v27 & 0xC0) == 0x80);
                if (v28 >= v25) {
                  unint64_t v18 = *(unsigned __int8 **)(a1 + 24);
                }
                else {
                  unint64_t v18 = v27;
                }
                uint64_t matched = match_0(a1, v23, v18);
                if (!matched) {
                  goto LABEL_43;
                }
                goto LABEL_107;
              }
              goto LABEL_42;
            }
            if (v24 != 42)
            {
              if (v24 != 43)
              {
                if (v24 == 45)
                {
                  while (1)
                  {
                    uint64_t matched = match_0(a1, a2, v18 + 1);
                    if (matched) {
                      goto LABEL_107;
                    }
                    if (!singlematch_0(a1, a2, v8, (uint64_t)v18)) {
                      goto LABEL_106;
                    }
                    unint64_t v78 = *(void *)(a1 + 16);
                    long long v79 = a2 + 1;
                    do
                    {
                      long long v80 = v79;
                      unint64_t v81 = (unint64_t)(v79 - 1);
                      if ((unint64_t)(v79 - 1) >= v78) {
                        break;
                      }
                      ++v79;
                    }
                    while ((*v80 & 0xC0) == 0x80);
                    if (v81 >= v78) {
                      a2 = *(char **)(a1 + 16);
                    }
                    else {
                      a2 = v80;
                    }
                  }
                }
LABEL_42:
                a2 = v23;
                goto LABEL_43;
              }
              a2 = v23;
            }
            long long v68 = a2;
            if (!singlematch_0(a1, a2, v8, (uint64_t)v18)) {
              goto LABEL_96;
            }
            long long v68 = a2;
            do
            {
              unint64_t v69 = *(void *)(a1 + 16);
              long long v70 = v68 + 1;
              do
              {
                long long v71 = v70;
                unint64_t v72 = (unint64_t)(v70 - 1);
                if ((unint64_t)(v70 - 1) >= v69) {
                  break;
                }
                ++v70;
              }
              while ((*v71 & 0xC0) == 0x80);
              if (v72 >= v69) {
                long long v68 = *(char **)(a1 + 16);
              }
              else {
                long long v68 = v71;
              }
            }
            while (singlematch_0(a1, v68, v8, (uint64_t)v18));
            if (v68 >= a2)
            {
LABEL_96:
              long long v73 = v18 + 1;
              while (1)
              {
                uint64_t matched = match_0(a1, v68, v73);
                if (matched) {
                  break;
                }
                if (v68 != a2)
                {
                  long long v74 = v68 - 1;
                  do
                  {
                    long long v75 = v74;
                    unint64_t v76 = (unint64_t)(v74 + 1);
                    if (v74 + 1 <= a2) {
                      break;
                    }
                    --v74;
                  }
                  while ((*v75 & 0xC0) == 0x80);
                  long long v68 = v76 <= (unint64_t)a2 ? a2 : v75;
                  if (v68 >= a2) {
                    continue;
                  }
                }
                goto LABEL_106;
              }
LABEL_107:
              a2 = (char *)matched;
              goto LABEL_108;
            }
          }
          else
          {
            unsigned int v40 = *v18;
            BOOL v41 = v40 > 0x3F;
            unint64_t v42 = (1 << v40) & 0x8000240000000000;
            if (!v41 && v42 != 0)
            {
              ++v18;
              goto LABEL_43;
            }
          }
LABEL_106:
          uint64_t matched = 0;
          goto LABEL_107;
        }
        uint64_t v87 = 0;
        unsigned int v86 = 0;
        uint64_t v50 = utf8_safe_decode(*(void **)(a1 + 32), v30, (unsigned int *)&v87);
        if ((unint64_t)v50 >= *(void *)(a1 + 24)) {
          luaL_error(*(void **)(a1 + 32), "malformed pattern (missing arguments to '%%b')", v44, v45, v46, v47, v48, v49, v84);
        }
        unint64_t v18 = utf8_safe_decode(*(void **)(a1 + 32), (char *)v50, &v86);
        int v51 = utf8_safe_decode(*(void **)(a1 + 32), a2, (unsigned int *)&v87 + 1);
        if (HIDWORD(v87) != v87) {
          goto LABEL_106;
        }
        a2 = (char *)v51;
        if ((unint64_t)v51 >= *(void *)(a1 + 16)) {
          goto LABEL_106;
        }
        int v52 = 1;
        break;
      case '(':
        uint64_t v60 = (uint64_t)(v8 + 1);
        if (v8[1] == 41)
        {
          uint64_t v60 = (uint64_t)(v8 + 2);
          uint64_t v61 = a1;
          uint64_t v62 = (uint64_t)a2;
          uint64_t v63 = 4294967294;
        }
        else
        {
          uint64_t v61 = a1;
          uint64_t v62 = (uint64_t)a2;
          uint64_t v63 = 0xFFFFFFFFLL;
        }
        uint64_t matched = start_capture_0(v61, v62, v60, v63, v14, v15, v16, v17);
        goto LABEL_107;
      case ')':
        uint64_t v64 = *(unsigned int *)(a1 + 40);
        uint64_t v65 = 16 * v64 + 40;
        while (1)
        {
          BOOL v66 = __OFSUB__(v64, 1);
          LODWORD(v64) = v64 - 1;
          if ((int)v64 < 0 != v66) {
            break;
          }
          uint64_t v67 = *(void *)(a1 + v65);
          v65 -= 16;
          if (v67 == -1) {
            goto LABEL_120;
          }
        }
        LODWORD(v64) = luaL_error(*(void **)(a1 + 32), "invalid pattern capture", v12, v13, v14, v15, v16, v17, v84);
LABEL_120:
        uint64_t v82 = a1 + 16 * (int)v64;
        *(void *)(v82 + 56) = &a2[-*(void *)(v82 + 48)];
        long long v83 = (void *)(v82 + 56);
        uint64_t matched = match_0(a1, a2, v8 + 1);
        if (!matched) {
          void *v83 = -1;
        }
        goto LABEL_107;
      default:
        goto LABEL_6;
    }
    while (1)
    {
      uint64_t v53 = utf8_safe_decode(*(void **)(a1 + 32), a2, (unsigned int *)&v87 + 1);
      a2 = (char *)v53;
      if (HIDWORD(v87) != v86)
      {
        if (HIDWORD(v87) == v87) {
          ++v52;
        }
        goto LABEL_57;
      }
      if (!--v52) {
        break;
      }
LABEL_57:
      if ((unint64_t)v53 >= *(void *)(a1 + 16)) {
        goto LABEL_106;
      }
    }
    if (!v53) {
      goto LABEL_106;
    }
LABEL_43:
    uint64_t v8 = (char *)v18;
  }
  while (v18 != *(unsigned __int8 **)(a1 + 24));
LABEL_108:
  ++*(_DWORD *)a1;
  return a2;
}

uint64_t push_captures_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11 = *(_DWORD *)(a1 + 40);
  if (v11) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a2 == 0;
  }
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 1;
  }
  luaL_checkstack(*(void **)(a1 + 32), v13, (uint64_t)"too many captures", a4, a5, a6, a7, a8, v20);
  if ((int)v13 >= 1)
  {
    int v18 = 0;
    do
      push_onecapture_0(a1, v18++, a2, a3, v14, v15, v16, v17, v21);
    while (v13 != v18);
  }
  return v13;
}

uint64_t start_capture_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  uint64_t v12 = *(int *)(a1 + 40);
  if ((int)v12 >= 32) {
    luaL_error(*(void **)(a1 + 32), "too many captures", a3, a4, a5, a6, a7, a8, v15);
  }
  uint64_t v13 = a1 + 16 * v12;
  *(void *)(v13 + 48) = a2;
  *(void *)(v13 + 56) = v8;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  uint64_t result = match_0(a1, a2, a3);
  if (!result) {
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

unsigned __int8 *classend_0(uint64_t a1, char *a2)
{
  unsigned int v19 = 0;
  int v3 = utf8_safe_decode(*(void **)(a1 + 32), a2, &v19);
  uint64_t v10 = v3;
  if (v19 == 91)
  {
    if (*v3 == 94) {
      uint64_t v15 = v3 + 1;
    }
    else {
      uint64_t v15 = v3;
    }
    do
    {
      if (v15 == *(unsigned __int8 **)(a1 + 24)) {
        luaL_error(*(void **)(a1 + 32), "malformed pattern (missing ']')", v4, v5, v6, v7, v8, v9, v18);
      }
      uint64_t v16 = v15 + 1;
      if (*v15 == 37 && (unint64_t)v16 < *(void *)(a1 + 24)) {
        uint64_t v16 = v15 + 2;
      }
      uint64_t v15 = v16;
    }
    while (*v16 != 93);
    return v16 + 1;
  }
  else if (v19 == 37)
  {
    unint64_t v11 = *(void *)(a1 + 24);
    if (v3 == (unsigned __int8 *)v11)
    {
      luaL_error(*(void **)(a1 + 32), "malformed pattern (ends with '%%')", v4, v5, v6, v7, v8, v9, v18);
      unint64_t v11 = *(void *)(a1 + 24);
    }
    uint64_t v12 = v10 + 1;
    do
    {
      uint64_t v13 = v12;
      unint64_t v14 = (unint64_t)(v12 - 1);
      if ((unint64_t)(v12 - 1) >= v11) {
        break;
      }
      ++v12;
    }
    while ((*v13 & 0xC0) == 0x80);
    if (v14 >= v11) {
      return (unsigned __int8 *)v11;
    }
    else {
      return v13;
    }
  }
  return v10;
}

BOOL matchbracketclass_0(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  int v5 = *(unsigned __int8 *)(a3 + 1);
  uint64_t v4 = (unsigned __int8 *)(a3 + 1);
  BOOL v6 = v5 == 94;
  BOOL v7 = v5 != 94;
  if (v5 == 94) {
    uint64_t v8 = v4 + 1;
  }
  else {
    uint64_t v8 = v4;
  }
  while ((unint64_t)v8 < a4)
  {
    unsigned int v16 = 0;
    uint64_t v8 = utf8_safe_decode(*(void **)(a1 + 32), (char *)v8, &v16);
    if (v16 == 37)
    {
      uint64_t v8 = utf8_safe_decode(*(void **)(a1 + 32), (char *)v8, &v16);
      if (match_class_0(a2, v16)) {
        return v7;
      }
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v12 = utf8_safe_decode(*(void **)(a1 + 32), (char *)v8, &v15);
      if (v15 != 45 || (unint64_t)v12 >= a4)
      {
        if (v16 == a2) {
          return v7;
        }
      }
      else
      {
        uint64_t v8 = utf8_safe_decode(*(void **)(a1 + 32), (char *)v12, &v15);
        if (v16 <= a2 && v15 >= a2) {
          return v7;
        }
      }
    }
  }
  return v6;
}

uint64_t singlematch_0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (*(void *)(a1 + 16) <= (unint64_t)a2) {
    return 0;
  }
  uint64_t v9 = 0;
  utf8_safe_decode(*(void **)(a1 + 32), a2, (unsigned int *)&v9 + 1);
  BOOL v7 = utf8_safe_decode(*(void **)(a1 + 32), a3, (unsigned int *)&v9);
  if (v9 == 91) {
    return matchbracketclass_0(a1, HIDWORD(v9), (uint64_t)(v7 - 1), a4 - 1);
  }
  if (v9 == 46) {
    return 1;
  }
  if (v9 != 37) {
    return v9 == HIDWORD(v9);
  }
  utf8_safe_decode(*(void **)(a1 + 32), (char *)v7, (unsigned int *)&v9);
  return match_class_0(HIDWORD(v9), v9);
}

BOOL match_class_0(unsigned int a1, uint64_t a2)
{
  unsigned int v2 = a2;
  switch(convert_char((uint64_t)&tolower_table, 0xB2uLL, a2))
  {
    case 'a':
      uint64_t v4 = &alpha_table;
      unint64_t v5 = 701;
      goto LABEL_16;
    case 'c':
      uint64_t v4 = &cntrl_table;
      unint64_t v5 = 26;
      goto LABEL_16;
    case 'd':
      uint64_t v4 = &digit_table;
      unint64_t v5 = 64;
      goto LABEL_16;
    case 'g':
      if (find_in_range((uint64_t)&space_table, 7uLL, a1))
      {
        BOOL v7 = 0;
      }
      else if (find_in_range((uint64_t)&graph_table, 0x349uLL, a1))
      {
LABEL_23:
        BOOL v7 = 1;
      }
      else
      {
        uint64_t v8 = &compose_table;
        unint64_t v9 = 319;
LABEL_25:
        BOOL v7 = find_in_range((uint64_t)v8, v9, a1);
      }
LABEL_17:
      if (find_in_range((uint64_t)&lower_table, 0xB1uLL, v2)) {
        return v7;
      }
      else {
        return !v7;
      }
    case 'l':
      uint64_t v4 = &lower_table;
      unint64_t v5 = 177;
      goto LABEL_16;
    case 'p':
      uint64_t v4 = &punct_table;
      unint64_t v5 = 213;
      goto LABEL_16;
    case 's':
      uint64_t v4 = &space_table;
      unint64_t v5 = 7;
      goto LABEL_16;
    case 't':
      uint64_t v4 = &compose_table;
      unint64_t v5 = 319;
      goto LABEL_16;
    case 'u':
      uint64_t v4 = &upper_table;
      unint64_t v5 = 155;
      goto LABEL_16;
    case 'w':
      if (find_in_range((uint64_t)&alpha_table, 0x2BDuLL, a1)) {
        goto LABEL_23;
      }
      uint64_t v8 = &alnum_extend_table;
      unint64_t v9 = 135;
      goto LABEL_25;
    case 'x':
      uint64_t v4 = &xdigit_table;
      unint64_t v5 = 6;
LABEL_16:
      BOOL v7 = find_in_range((uint64_t)v4, v5, a1);
      goto LABEL_17;
    case 'z':
      BOOL v7 = a1 == 0;
      goto LABEL_17;
    default:
      return v2 == a1;
  }
}

uint64_t push_onecapture_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 40) <= a2)
  {
    uint64_t v13 = *(void **)(a1 + 32);
    if (!a2)
    {
      unint64_t v14 = (char *)a3;
      size_t v15 = a4 - a3;
LABEL_14:
      return lua_pushlstring((uint64_t)v13, v14, v15);
    }
    return luaL_error(v13, "invalid capture index", a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    uint64_t v10 = a1 + 16 * a2;
    unint64_t v11 = (char **)(v10 + 48);
    size_t v12 = *(void *)(v10 + 56);
    if (v12 != -2)
    {
      if (v12 == -1) {
        luaL_error(*(void **)(a1 + 32), "unfinished capture", a3, a4, a5, a6, a7, a8, v19);
      }
      uint64_t v13 = *(void **)(a1 + 32);
      unint64_t v14 = *v11;
      size_t v15 = v12;
      goto LABEL_14;
    }
    uint64_t v17 = (int)(get_index(*v11, *(unsigned char **)(a1 + 8), *(void *)(a1 + 16)) + 1);
    uint64_t v18 = *(void *)(a1 + 32);
    return lua_pushinteger(v18, v17);
  }
}

uint64_t gmatch_aux_0(void *a1)
{
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  v25[0] = 200;
  uint64_t v58 = 0;
  uint64_t v2 = luaL_checklstring(a1, 4293966295, &v58);
  uint64_t v3 = v58;
  unint64_t v4 = v2 + v58;
  uint64_t v58 = 0;
  uint64_t v5 = luaL_checklstring(a1, 4293966294, &v58);
  v25[1] = v2;
  unint64_t v26 = v4;
  uint64_t v27 = v5 + v58;
  *(void *)&long long v28 = a1;
  uint64_t v6 = lua_tointegerx(a1, -1001003, 0);
  if (v6 > v3) {
    return 0;
  }
  size_t v12 = (char *)(v2 + v6);
  while (1)
  {
    DWORD2(v28) = 0;
    uint64_t matched = match_0((uint64_t)v25, v12, v5, v7, v8, v9, v10, v11);
    if (matched) {
      break;
    }
    if (v12 != (char *)v26)
    {
      unint64_t v14 = v12 + 1;
      do
      {
        size_t v15 = v14;
        unint64_t v16 = (unint64_t)(v14 - 1);
        if ((unint64_t)(v14 - 1) >= v26) {
          break;
        }
        ++v14;
      }
      while ((*v15 & 0xC0) == 0x80);
      size_t v12 = v16 >= v26 ? (char *)v26 : v15;
      if ((unint64_t)v12 <= v26) {
        continue;
      }
    }
    return 0;
  }
  uint64_t v18 = (uint64_t)matched;
  if (matched == v12) {
    uint64_t v19 = (uint64_t)&matched[-v2 + 1];
  }
  else {
    uint64_t v19 = (uint64_t)&matched[-v2];
  }
  lua_pushinteger((uint64_t)a1, v19);
  lua_copy((uint64_t)a1, -1, -1001003);
  lua_settop((uint64_t)a1, 0xFFFFFFFE);
  return push_captures_0((uint64_t)v25, (uint64_t)v12, v18, v20, v21, v22, v23, v24);
}

uint64_t Dictionary_Con(uint64_t a1, uint64_t a2, char **a3, const void *a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v13 = 0;
  *(_DWORD *)(a1 + 184) = 0;
  if (a5)
  {
    uint64_t result = PNEW_BinBlockStreamReader_Con(a2, a2, a4, a5, a6, &v13);
    if (result) {
      return result;
    }
    uint64_t v12 = v13 + 32;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t result = Dictionary_ConFromStreamReader(a1, a2, a3, v12, a7);
  if (!result)
  {
    if (v13) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
    }
  }
  return result;
}

uint64_t Dictionary_ConFromStreamReader(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5)
{
  unsigned int v16 = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 152) = a5;
  *(_DWORD *)(a1 + 184) = 0;
  if (!a4) {
    return Dictionary_ConFromBuffer(a1, a2, a3, a4, a5);
  }
  uint64_t v9 = a4;
  uint64_t v15 = 0;
  unsigned int v14 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 56))(a4 - *(void *)(*(void *)a4 + 224)) != 341630714) {
    return err_GenerateErrorData();
  }
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9 - *(void *)(*(void *)v9 + 224));
  if (!BinBlockStreamReader_IsVersionAccepted(v10, 0x10000)) {
    return err_GenerateErrorVersion();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, unsigned int *))(*(void *)v9 + 8))(v9 - *(void *)(*(void *)v9 + 224), 414429700, 0, &v15, &v14);
  unsigned int v16 = result;
  if (result) {
    return result;
  }
  if (!BinBlockStreamReader_IsVersionAccepted(v14, 0x10000)) {
    return err_GenerateErrorVersion();
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15 - *(void *)(*(void *)v15 + 48));
  uint64_t v13 = OOCAllocator_Realloc(*(void *)(a1 + 120), *(void *)(a1 + 136), v12, &v16);
  *(void *)(a1 + 136) = v13;
  uint64_t result = v16;
  if (!v16)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15 - *(void *)(*(void *)v15 + 48), v13);
    unsigned int v16 = result;
    if (!result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9 - *(void *)(*(void *)v9 + 224), v15);
      unsigned int v16 = result;
      if (!result)
      {
        a4 = *(void *)(a1 + 136);
        return Dictionary_ConFromBuffer(a1, a2, a3, a4, a5);
      }
    }
  }
  return result;
}

uint64_t Dictionary_ConFromBuffer(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5)
{
  uint64_t result = VoConObject_Con2((void *)a1, a2);
  unsigned int v21 = result;
  if (!result)
  {
    *(void *)a1 = &__Dictionary;
    *(void *)(a1 + 56) = &unk_26D20F0A8;
    *(void *)(a1 + 64) = &unk_26D20F0C0;
    *(void *)(a1 + 72) = &unk_26D20F0F8;
    *(void *)(a1 + 80) = &unk_26D20F120;
    *(void *)(a1 + 88) = &unk_26D20F138;
    *(void *)(a1 + 96) = &unk_26D20F150;
    *(void *)(a1 + 104) = &unk_26D20F160;
    *(void *)(a1 + 112) = &unk_26D20F178;
    *(void *)(a1 + 24) = &unk_26D20F060;
    *(void *)(a1 + 120) = a2;
    *(void *)(a1 + 136) = a4;
    *(_DWORD *)(a1 + 152) = a5;
    *(_DWORD *)(a1 + 184) = 0;
    uint64_t v11 = (char **)OOCAllocator_Calloc(a2, 1, 40, &v21);
    *(void *)(a1 + 144) = v11;
    uint64_t result = v21;
    if (!v21)
    {
      BOOL v12 = a3 && a4 == 0;
      BOOL v13 = v12;
      if (!v12) {
        goto LABEL_17;
      }
      uint64_t result = cloneString(*(void *)(a1 + 120), v11, *a3);
      unsigned int v21 = result;
      if (!result)
      {
        unsigned int v14 = cstdlib_strchr(**(char ***)(a1 + 144), 124);
        if (v14) {
          *unsigned int v14 = 0;
        }
        uint64_t result = cloneString(*(void *)(a1 + 120), (char **)(*(void *)(a1 + 144) + 16), a3[2]);
        unsigned int v21 = result;
        if (!result)
        {
          uint64_t result = cloneString(*(void *)(a1 + 120), (char **)(*(void *)(a1 + 144) + 24), a3[3]);
          unsigned int v21 = result;
          if (!result)
          {
LABEL_17:
            uint64_t result = edct_DctOpen(*(void *)(a1 + 120), *(int **)(a1 + 136), a5, (uint64_t *)(a1 + 128));
            unsigned int v21 = result;
            if (!result)
            {
              if (!v13)
              {
LABEL_25:
                uint64_t result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
                unsigned int v21 = result;
                if (!result) {
                  return PNEW_TranscriptionTokenizer_Con(*(void *)(a1 + 120), *(void *)(a1 + 120), (void *)(a1 + 160));
                }
                return result;
              }
              uint64_t v20 = 0;
              long long v18 = 0u;
              long long v19 = 0u;
              long long v17 = 0u;
              uint64_t v15 = *(void *)(a1 + 144);
              *(void *)&long long v19 = *(void *)(v15 + 24);
              uint64_t v16 = -1;
              LODWORD(v17) = -1;
              *((void *)&v17 + 1) = 0;
              long long v18 = 0uLL;
              uint64_t result = __ConvertDictionaryLanguageModelToEDCTModelInfo(a1, *(const char **)(v15 + 16), (void **)&v18 + 1);
              unsigned int v21 = result;
              if (!result)
              {
                if (**(void **)(a1 + 144)) {
                  *((void *)&v17 + 1) = **(void **)(a1 + 144);
                }
                uint64_t result = edct_DctInitSubDctFromTransSpec(*(void *)(a1 + 128), &v16);
                unsigned int v21 = result;
                if (!result)
                {
                  if (*((void *)&v18 + 1)) {
                    OOCAllocator_Free(*(void *)(a1 + 120), *((uint64_t *)&v18 + 1));
                  }
                  goto LABEL_25;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t cloneString(uint64_t a1, char **a2, char *__s)
{
  unsigned int v9 = 0;
  if (__s)
  {
    size_t v6 = cstdlib_strlen(__s) + 1;
    uint64_t v7 = (char *)OOCAllocator_Malloc(a1, v6, &v9);
    *a2 = v7;
    uint64_t result = v9;
    if (!v9)
    {
      cstdlib_strncpy(v7, __s, v6);
      return v9;
    }
  }
  else
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t __ConvertDictionaryLanguageModelToEDCTModelInfo(uint64_t a1, const char *a2, void **a3)
{
  unsigned int v9 = 0;
  if (a2)
  {
    uint64_t v5 = (void *)OOCAllocator_Malloc(*(void *)(a1 + 120), 129, &v9);
    *a3 = v5;
    uint64_t result = v9;
    if (!v9)
    {
      cstdlib_memset(v5, 0, 0x81uLL);
      uint64_t v7 = *a3;
      size_t v8 = cstdlib_strlen(a2);
      cstdlib_memcpy(v7, a2, v8);
      return v9;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t __Dictionary_CheckAndFillTranscriptionSpec(uint64_t a1)
{
  int v7 = 0;
  uint64_t v6 = 0;
  uint64_t result = edct_DctGetAllEntryDataSpec(*(void *)(a1 + 128), &v6, (unsigned int *)&v7);
  if (!result)
  {
    if (v7)
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      while (1)
      {
        uint64_t result = checkAndFillField(*(void *)(a1 + 120), 1, (int)"dictionary has multiple language entries", *(char **)(v6 + v3 + 8), *(const char ***)(a1 + 144));
        if (result) {
          break;
        }
        uint64_t result = checkAndFillField(*(void *)(a1 + 120), 1, (int)"dictionary has multiple language of origin codes", *(char **)(v6 + v3 + 16), (const char **)(*(void *)(a1 + 144) + 8));
        if (result) {
          break;
        }
        uint64_t result = checkAndFillField(*(void *)(a1 + 120), 0, (int)"dictionary has multiple acmod entries", *(char **)(v6 + v3 + 24), (const char **)(*(void *)(a1 + 144) + 16));
        if (result) {
          break;
        }
        uint64_t result = checkAndFillField(*(void *)(a1 + 120), 0, (int)"dictionary has multiple engine version entries", *(char **)(v6 + v3 + 32), (const char **)(*(void *)(a1 + 144) + 24));
        if (result) {
          break;
        }
        ++v4;
        int v5 = v7;
        v3 += 40;
        if (v4 >= v7) {
          return edct_DctFreeAllEntryDataSpec(*(void *)(a1 + 128), v6, v5);
        }
      }
    }
    else
    {
      int v5 = 0;
      return edct_DctFreeAllEntryDataSpec(*(void *)(a1 + 128), v6, v5);
    }
  }
  return result;
}

uint64_t Dictionary_Des(uint64_t *a1)
{
  uint64_t result = OOC_PlacementDeleteObject(a1[15], a1[20]);
  if (!result)
  {
    uint64_t result = edct_DctClose(a1[16]);
    if (!result)
    {
      uint64_t v3 = a1[17];
      if (v3) {
        OOCAllocator_Free(a1[15], v3);
      }
      unint64_t v4 = (uint64_t *)a1[18];
      if (*v4)
      {
        OOCAllocator_Free(a1[15], *v4);
        unint64_t v4 = (uint64_t *)a1[18];
      }
      if (v4[1])
      {
        OOCAllocator_Free(a1[15], v4[1]);
        unint64_t v4 = (uint64_t *)a1[18];
      }
      if (v4[2])
      {
        OOCAllocator_Free(a1[15], v4[2]);
        unint64_t v4 = (uint64_t *)a1[18];
      }
      if (v4[3])
      {
        OOCAllocator_Free(a1[15], v4[3]);
        unint64_t v4 = (uint64_t *)a1[18];
      }
      OOCAllocator_Free(a1[15], (uint64_t)v4);
      return VoConObject_Des((uint64_t)a1);
    }
  }
  return result;
}

uint64_t Dictionary_AddWord(uint64_t a1, char *a2, uint64_t a3, const char **a4)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  if (!**(void **)(a1 + 144))
  {
    uint64_t result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
    if (result) {
      return result;
    }
  }
  size_t v8 = *a4;
  if (!*a4) {
    goto LABEL_4;
  }
  unsigned int v9 = **(const char ***)(a1 + 144);
  size_t v10 = cstdlib_strlen(v9);
  if (cstdlib_strncmp(v8, v9, v10)) {
    goto LABEL_4;
  }
  BOOL v12 = a4[1];
  if (v12)
  {
    BOOL v13 = *(const char **)(*(void *)(a1 + 144) + 8);
    if (v13)
    {
      if (cstdlib_strcmp(v12, v13)) {
        goto LABEL_4;
      }
    }
  }
  if ((unsigned int v14 = a4[2]) != 0 && (v15 = *(const char **)(*(void *)(a1 + 144) + 16)) != 0 && cstdlib_strcmp(v14, v15)
    || (v16 = a4[3]) != 0 && (long long v17 = *(const char **)(*(void *)(a1 + 144) + 24)) != 0 && cstdlib_strcmp(v16, v17))
  {
LABEL_4:
    return err_GenerateErrorArg();
  }
  long long v18 = cstdlib_strchr((char *)*a4, 124);
  long long v19 = v18;
  if (v18) {
    *long long v18 = 0;
  }
  long long v28 = 0uLL;
  *(void *)&long long v29 = 0;
  int v20 = *(_DWORD *)a3 - 1;
  if v20 < 8 && ((0x8Bu >> v20))
  {
    *(void *)&long long v27 = __PAIR64__(dword_2206E21F0[v20], dword_2206E21D0[v20]);
  }
  else
  {
    uint64_t result = err_GenerateErrorArg();
    if (result) {
      return result;
    }
  }
  unsigned int v21 = a4[3];
  DWORD2(v27) = -1;
  uint64_t v23 = *(void *)(a3 + 8);
  uint64_t v22 = *(void *)(a3 + 16);
  *((void *)&v29 + 1) = v21;
  *(void *)&long long v30 = v23;
  DWORD2(v30) = v22;
  if (v23)
  {
    if (*(_DWORD *)a3 == 1 && v22 && v22)
    {
      uint64_t v24 = (unsigned __int8 *)(v22 + v23 - 1);
      int v25 = v22 - 1;
      do
      {
        if (*v24--) {
          break;
        }
        DWORD2(v30) = v25--;
      }
      while (v25 != -1);
    }
    uint64_t result = __ConvertDictionaryLanguageModelToEDCTModelInfo(a1, a4[2], (void **)&v29);
    if (result) {
      return result;
    }
    if (*a4) {
      *(void *)&long long v28 = *a4;
    }
  }
  else
  {
    uint64_t result = err_GenerateErrorData();
    if (result) {
      return result;
    }
  }
  uint64_t result = edct_DctAddEntry(*(void *)(a1 + 128), a2, (uint64_t *)&v27, 1u);
  if (!v19 || result)
  {
    if (result) {
      return result;
    }
  }
  else
  {
    *long long v19 = 124;
  }
  if ((void)v29) {
    OOCAllocator_Free(*(void *)(a1 + 120), v29);
  }
  return __Dictionary_CheckAndFillTranscriptionSpec(a1);
}

uint64_t Dictionary_Archive(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 344))(a1, a2, 0);
}

uint64_t Dictionary_ArchiveEx(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v9 = 0;
  unsigned int v8 = 0;
  uint64_t result = edct_DctArchive(a1[16], 0, (int *)&v8, a3);
  unsigned int v10 = result;
  if (!result)
  {
    int v7 = (char *)OOCAllocator_Realloc(a1[15], a1[17], v8, &v10);
    a1[17] = (uint64_t)v7;
    uint64_t result = v10;
    if (!v10)
    {
      uint64_t result = edct_DctArchive(a1[16], v7, (int *)&v8, a3);
      unsigned int v10 = result;
      if (!result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 80))(a2 - *(void *)(*(void *)a2 + 120))
          || (uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))a2)(a2 - *(void *)(*(void *)a2 + 120), 341630714, 0x10000, 10), (v10 = result) == 0))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 32))(a2 - *(void *)(*(void *)a2 + 120), 414429700, 0x10000, &v9);
          unsigned int v10 = result;
          if (!result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v9 + 8))(v9 - *(void *)(*(void *)v9 + 56), a1[17], v8);
            unsigned int v10 = result;
            if (!result) {
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2 - *(void *)(*(void *)a2 + 120), v9);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t Dictionary_BorrowTranscriptionSpec(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 144);
  return 0;
}

uint64_t Dictionary_CastToIVoConObject(uint64_t a1)
{
  return a1 + 24;
}

uint64_t Dictionary_FetchInfo(uint64_t a1, char ***a2)
{
  unsigned int v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  unint64_t v4 = **(const char ***)(a1 + 144);
  if (v4) {
    goto LABEL_2;
  }
  uint64_t result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
  unsigned int v12 = result;
  if (result) {
    return result;
  }
  unint64_t v4 = **(const char ***)(a1 + 144);
  if (v4)
  {
LABEL_2:
    char v5 = 0;
    uint64_t v6 = cstdlib_strlen(v4) + 25;
  }
  else
  {
    char v5 = 1;
    uint64_t v6 = 24;
  }
  *a2 = (char **)OOCAllocator_Malloc(*(void *)(a1 + 120), v6, &v12);
  uint64_t result = v12;
  if (!v12)
  {
    uint64_t result = edct_DctGetInfo(*(void *)(a1 + 128), (uint64_t)&v10);
    unsigned int v12 = result;
    if (!result)
    {
      **a2 = 0;
      unsigned int v8 = *a2;
      *(void *)&long long v9 = DWORD1(v11);
      *((void *)&v9 + 1) = DWORD2(v11);
      *(_OWORD *)(*a2 + 1) = v9;
      if ((v5 & 1) == 0)
      {
        *unsigned int v8 = (char *)(v8 + 3);
        cstdlib_strcpy(**a2, v4);
      }
      return edct_DctFreeInfo(*(void *)(a1 + 128), (uint64_t *)&v10);
    }
  }
  return result;
}

void Dictionary_FetchKeys(uint64_t a1, char ***a2, void *a3)
{
  char v5 = *(_DWORD **)(a1 + 128);
  if (v5[11] == 1) {
    goto LABEL_2;
  }
  char __s = 0;
  long long v17 = 0;
  *a3 = 0;
  edct_DctItOpen(*(void *)(a1 + 120), v5, (uint64_t *)&v17);
  if (!v7)
  {
    int v15 = 0;
    if (!edct_DctItHasEnded((uint64_t)v17, &v15))
    {
      uint64_t v8 = 0;
      while (v15 != 1)
      {
        if (!edct_DctItCurrent((uint64_t)v17, &__s, 0, 0, 0))
        {
          size_t v9 = cstdlib_strlen(__s);
          if (!edct_DctItIncrement((uint64_t)v17))
          {
            v8 += v9 + 9;
            int v15 = 0;
            int HasEnded = edct_DctItHasEnded((uint64_t)v17, &v15);
            if (!HasEnded) {
              continue;
            }
          }
        }
        return;
      }
      if (!edct_DctItClose(v17))
      {
        if (!v8)
        {
LABEL_2:
          *a3 = 0;
          *a2 = 0;
          return;
        }
        edct_DctItOpen(*(void *)(a1 + 120), *(_DWORD **)(a1 + 128), (uint64_t *)&v17);
        int HasEnded = v10;
        if (!v10)
        {
          long long v11 = (char **)OOCAllocator_Malloc(*(void *)(a1 + 120), v8, &HasEnded);
          *a2 = v11;
          if (!HasEnded)
          {
            int v15 = 0;
            int HasEnded = edct_DctItHasEnded((uint64_t)v17, &v15);
            if (!HasEnded)
            {
              uint64_t v12 = 0;
              BOOL v13 = (char *)v11 + v8;
              while (v15 != 1)
              {
                int HasEnded = edct_DctItCurrent((uint64_t)v17, &__s, 0, 0, 0);
                if (!HasEnded)
                {
                  size_t v14 = cstdlib_strlen(__s);
                  if (v11)
                  {
                    v13 += ~v14;
                    *v11++ = v13;
                    cstdlib_strcpy(v13, __s);
                    ++v12;
                  }
                  int HasEnded = edct_DctItIncrement((uint64_t)v17);
                  if (!HasEnded)
                  {
                    int v15 = 0;
                    int HasEnded = edct_DctItHasEnded((uint64_t)v17, &v15);
                    if (!HasEnded) {
                      continue;
                    }
                  }
                }
                return;
              }
              if (!edct_DctItClose(v17)) {
                *a3 = v12;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t Dictionary_FetchTranscriptionSpec(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 144);
  return 0;
}

uint64_t Dictionary_FetchTranscriptions(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v57 = 0;
  unsigned int v54 = 0;
  uint64_t v8 = *(uint64_t **)(a1 + 144);
  if (!*v8)
  {
    uint64_t result = __Dictionary_CheckAndFillTranscriptionSpec(a1);
    if (result) {
      return result;
    }
    uint64_t v8 = *(uint64_t **)(a1 + 144);
  }
  uint64_t v56 = 0;
  v58[0] = 0;
  uint64_t v55 = -1;
  v58[1] = (void *)v8[3];
  uint64_t result = __ConvertDictionaryLanguageModelToEDCTModelInfo(a1, (const char *)v8[2], v58);
  if (!result)
  {
    if (*v8) {
      uint64_t v56 = *v8;
    }
    int v10 = (uint64_t *)(a1 + 168);
    uint64_t result = edct_DctGetEntryData(*(void *)(a1 + 128), a2, (uint64_t)&v55, (uint64_t *)(a1 + 168), &v54);
    unsigned int v59 = result;
    if (!result)
    {
      if (v54)
      {
        uint64_t v11 = OOCAllocator_Malloc(*(void *)(a1 + 120), 24 * v54, &v59);
        uint64_t result = v59;
        if (v59) {
          return result;
        }
        if (v54)
        {
          uint64_t v12 = 0;
          uint64_t v52 = v11;
          long long v53 = a3;
          long long v51 = a4;
          while (1)
          {
            uint64_t v13 = *v10;
            size_t v14 = (int *)(*v10 + (v12 << 6));
            int v15 = *v14;
            int v16 = v14[1];
            if (v16 & 0xFFFFFFFD | *v14)
            {
              if (v15 == 1 && v16 == 1)
              {
                unsigned int ErrorArg = 0;
                int v22 = 2;
              }
              else if (v15 == 3 && v16 == 1)
              {
                unsigned int ErrorArg = 0;
                int v22 = 8;
              }
              else
              {
                unsigned int v19 = v16 & 0xFFFFFFFE;
                if (v15 != 2 || v19 != 2)
                {
                  unsigned int ErrorArg = err_GenerateErrorArg();
                  goto LABEL_29;
                }
                unsigned int ErrorArg = 0;
                int v22 = 4;
              }
            }
            else
            {
              unsigned int ErrorArg = 0;
              int v22 = 1;
            }
            *(_DWORD *)(v11 + 24 * v12) = v22;
LABEL_29:
            unsigned int v60 = ErrorArg;
            uint64_t v23 = v13 + (v12 << 6);
            unint64_t v26 = *(unsigned __int8 **)(v23 + 48);
            uint64_t v25 = v23 + 48;
            uint64_t v24 = v26;
            uint64_t v27 = v11 + 24 * v12;
            *(void *)(v27 + 8) = v26;
            long long v28 = (uint64_t *)(v27 + 8);
            uint64_t v29 = *(unsigned int *)(v25 + 8);
            v28[1] = v29;
            long long v30 = (size_t *)(v28 + 1);
            if (*v14 != 2)
            {
              if (!*v14)
              {
                int v31 = *v24;
                while (v31 == 32)
                {
                  int v32 = *++v24;
                  int v31 = v32;
                  --v29;
                }
                int v33 = *(_DWORD *)(a1 + 184);
                BOOL v34 = v31 != 35 || v33 == 0;
                uint64_t v35 = !v34;
                if (v34) {
                  long long v36 = v24;
                }
                else {
                  long long v36 = v24 + 1;
                }
                size_t v37 = v29 - v35;
                uint64_t v38 = v29 - v35 - 3;
                if ((unint64_t)(v29 - v35) < 3)
                {
                  if (v37 == 2) {
                    goto LABEL_55;
                  }
                  goto LABEL_56;
                }
                if (!v36[v37 - 2])
                {
                  if (v33 && v36[v38] == 35)
                  {
                    v36[v38] = 0;
                    --v37;
                  }
                  *long long v30 = v37 - 1;
                  uint64_t v39 = OOCAllocator_Malloc(*(void *)(a1 + 120), v37 - 1, &v60);
                  uint64_t result = v60;
                  if (v60) {
                    return result;
                  }
                  size_t v40 = *v30;
                  long long v41 = (void *)v39;
                  long long v42 = v36;
                  goto LABEL_66;
                }
LABEL_55:
                if (v36[v37 - 1])
                {
LABEL_56:
                  if (v33 && v36[v37 - 1] == 35) {
                    v36[--v37] = 0;
                  }
                  long long v44 = (void *)OOCAllocator_Malloc(*(void *)(a1 + 120), v37 + 1, &v60);
                  uint64_t result = v60;
                  if (v60) {
                    return result;
                  }
                  cstdlib_memcpy(v44, v36, v37);
                  *((unsigned char *)v44 + v37) = 0;
                  *long long v28 = (uint64_t)v44;
                  *long long v30 = v37 + 1;
                }
                else
                {
                  if (v33 && v36[v37 - 2] == 35)
                  {
                    v36[v37 - 2] = 0;
                    --v37;
                  }
                  *long long v30 = v37;
                  uint64_t v39 = OOCAllocator_Malloc(*(void *)(a1 + 120), v37, &v60);
                  uint64_t result = v60;
                  if (v60) {
                    return result;
                  }
                  long long v41 = (void *)v39;
                  long long v42 = v36;
                  size_t v40 = v37;
LABEL_66:
                  cstdlib_memcpy(v41, v42, v40);
                  *long long v28 = v39;
                }
                a4 = v51;
              }
LABEL_68:
              uint64_t result = v60;
              goto LABEL_69;
            }
            if (v14[1] != 3)
            {
              long long v43 = (void *)OOCAllocator_Malloc(*(void *)(a1 + 120), v29, &v60);
              *long long v28 = (uint64_t)v43;
              uint64_t result = v60;
              if (v60) {
                return result;
              }
              cstdlib_memcpy(v43, *(const void **)v25, *v30);
              goto LABEL_68;
            }
            uint64_t result = err_GenerateErrorData();
LABEL_69:
            unsigned int v59 = result;
            uint64_t v11 = v52;
            a3 = v53;
            if (result) {
              return result;
            }
            if (++v12 >= (unint64_t)v54)
            {
              *(_DWORD *)(a1 + 176) = v54;
              *(_DWORD *)(a1 + 180) = v12;
              goto LABEL_77;
            }
          }
        }
        *(void *)(a1 + 176) = 0;
        OOCAllocator_Free(*(void *)(a1 + 120), v11);
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
LABEL_77:
      if (v58[0]) {
        OOCAllocator_Free(*(void *)(a1 + 120), (uint64_t)v58[0]);
      }
      uint64_t result = v59;
      if (!v59)
      {
        uint64_t result = TranscriptionTokenizer_FetchTranscriptions(*(void *)(a1 + 160), v11, v12, a3, a4);
        if (!result)
        {
          if (!v11) {
            return lhi_LogPhoneticTranscriptions(*(void *)(a1 + 40), (const char *)0x3E62B2CD, a2, *a3, *a4);
          }
          uint64_t v45 = v11;
          unint64_t v46 = *(unsigned int *)(a1 + 180);
          if (v46)
          {
            unint64_t v47 = 0;
            long long v48 = (uint64_t *)(v11 + 8);
            do
            {
              int v49 = *((_DWORD *)v48 - 2);
              if (v49 == 4 || v49 == 1)
              {
                OOCAllocator_Free(*(void *)(a1 + 120), *v48);
                unint64_t v46 = *(unsigned int *)(a1 + 180);
              }
              ++v47;
              v48 += 3;
            }
            while (v47 < v46);
          }
          OOCAllocator_Free(*(void *)(a1 + 120), v45);
          uint64_t result = edct_DctFreeEntryData(*(void *)(a1 + 128), *(_DWORD **)(a1 + 168), *(_DWORD *)(a1 + 176));
          if (!result)
          {
            *(void *)(a1 + 168) = 0;
            *(_DWORD *)(a1 + 176) = 0;
            return lhi_LogPhoneticTranscriptions(*(void *)(a1 + 40), (const char *)0x3E62B2CD, a2, *a3, *a4);
          }
        }
      }
    }
  }
  return result;
}

BOOL Dictionary_IsBufferTypeSupported(int a1)
{
  return a1 == 341630714;
}

uint64_t Dictionary_IsReadyForMerge()
{
  return 1;
}

uint64_t Dictionary_IsReadyToArchive()
{
  return 1;
}

void Dictionary_Merge(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int AllEntryDataSpec = 0;
  uint64_t v24 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  unsigned int v19 = 0;
  uint64_t v20 = 0;
  long long v18 = 0;
  uint64_t v6 = **(const char ***)(a1 + 144);
  if (a5) {
    *a5 = 0;
  }
  unsigned int v21 = 0;
  if (!PNEW_BinBlockStreamReader_Con(*(void *)(a1 + 120), *(void *)(a1 + 120), a2, a3, a4, (uint64_t *)&v18))
  {
    uint64_t v17 = 0;
    unsigned int v16 = 0;
    if ((*(unsigned int (**)(uint64_t))(v18[4] + 56))((uint64_t)v18 - *(void *)(v18[4] + 224) + 32) != 341630714)
    {
      err_GenerateErrorData();
      return;
    }
    unsigned int v7 = (*(uint64_t (**)(uint64_t))(v18[4] + 64))((uint64_t)v18 - *(void *)(v18[4] + 224) + 32);
    if (!BinBlockStreamReader_IsVersionAccepted(v7, 0x10000)) {
      goto LABEL_17;
    }
    int AllEntryDataSpec = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, unsigned int *))(v18[4] + 8))((uint64_t)v18 - *(void *)(v18[4] + 224) + 32, 414429700, 0, &v17, &v16);
    if (AllEntryDataSpec) {
      return;
    }
    if (!BinBlockStreamReader_IsVersionAccepted(v16, 0x10000))
    {
LABEL_17:
      err_GenerateErrorVersion();
      return;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17 - *(void *)(*(void *)v17 + 48));
    size_t v9 = (int *)OOCAllocator_Malloc(*(void *)(a1 + 120), v8, &AllEntryDataSpec);
    if (!AllEntryDataSpec)
    {
      int AllEntryDataSpec = (*(uint64_t (**)(uint64_t, int *))(*(void *)v17 + 32))(v17 - *(void *)(*(void *)v17 + 48), v9);
      if (!AllEntryDataSpec)
      {
        int AllEntryDataSpec = (*(uint64_t (**)(uint64_t, uint64_t))(v18[4] + 24))((uint64_t)v18 - *(void *)(v18[4] + 224) + 32, v17);
        if (!AllEntryDataSpec)
        {
          int AllEntryDataSpec = edct_DctOpen(*(void *)(a1 + 120), v9, 1, (uint64_t *)&v24);
          if (!AllEntryDataSpec)
          {
            int AllEntryDataSpec = edct_DctGetAllEntryDataSpec((uint64_t)v24, &v20, &v21);
            if (!AllEntryDataSpec)
            {
              if (v21)
              {
                int v10 = *(const char **)(v20 + 8);
                if (v10)
                {
                  BOOL v11 = 1;
LABEL_24:
                  if (v6)
                  {
                    if (!cstdlib_strcmp(v6, v10)) {
                      goto LABEL_26;
                    }
LABEL_34:
                    err_GenerateErrorArg();
                    return;
                  }
                  if (v11) {
                    goto LABEL_34;
                  }
LABEL_26:
                  edct_DctItOpen(*(void *)(a1 + 120), v24, (uint64_t *)&v19);
                  while (1)
                  {
                    int AllEntryDataSpec = v15;
                    if (v15) {
                      break;
                    }
                    LODWORD(v17) = 0;
                    int AllEntryDataSpec = edct_DctItHasEnded((uint64_t)v19, &v17);
                    if (AllEntryDataSpec) {
                      break;
                    }
                    if (v17 == 1)
                    {
                      int AllEntryDataSpec = edct_DctItClose(v19);
                      if (!AllEntryDataSpec)
                      {
                        int AllEntryDataSpec = edct_DctFreeAllEntryDataSpec((uint64_t)v24, v20, v21);
                        if (!AllEntryDataSpec)
                        {
                          int AllEntryDataSpec = edct_DctClose((uint64_t)v24);
                          if (!AllEntryDataSpec)
                          {
                            int AllEntryDataSpec = __Dictionary_CheckAndFillTranscriptionSpec(a1);
                            if (!AllEntryDataSpec)
                            {
                              int AllEntryDataSpec = (*(uint64_t (**)(void *))(*v18 + 32))(v18);
                              if (!AllEntryDataSpec) {
                                OOCAllocator_Free(*(void *)(a1 + 120), (uint64_t)v9);
                              }
                            }
                          }
                        }
                      }
                      return;
                    }
                    int AllEntryDataSpec = edct_DctItCurrent((uint64_t)v19, &v23, &v22, &v21, 0);
                    if (AllEntryDataSpec) {
                      return;
                    }
                    int AllEntryDataSpec = edct_DctAddEntry(*(void *)(a1 + 128), v23, v22, v21);
                    if (AllEntryDataSpec) {
                      return;
                    }
                    int v15 = edct_DctItIncrement((uint64_t)v19);
                  }
                  return;
                }
                unint64_t v12 = 0;
                uint64_t v13 = (const char **)(v20 + 48);
                while (v21 - 1 != v12)
                {
                  size_t v14 = *v13;
                  v13 += 5;
                  int v10 = v14;
                  ++v12;
                  if (v14)
                  {
                    BOOL v11 = v12 < v21;
                    goto LABEL_24;
                  }
                }
              }
              if (v6) {
                goto LABEL_34;
              }
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
}

uint64_t Dictionary_QueryInterface(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  switch(a2)
  {
    case 334061197:
      uint64_t v3 = a1 + 96;
      goto LABEL_20;
    case 414531721:
      uint64_t v3 = a1 + 64;
      goto LABEL_20;
    case 414531107:
      uint64_t v3 = a1 + 72;
LABEL_20:
      *a3 = v3;
      return 0;
  }
  int v4 = *(_DWORD *)(a1 + 152);
  if (a2 == 334065222 && !v4)
  {
    uint64_t v3 = a1 + 80;
    goto LABEL_20;
  }
  if (a2 == 653755852 && !v4)
  {
    uint64_t v3 = a1 + 56;
    goto LABEL_20;
  }
  if (a2 == 522614898 && !v4)
  {
    uint64_t v3 = a1 + 88;
    goto LABEL_20;
  }
  if (a2 == 3420193956)
  {
    uint64_t v3 = a1 + 112;
    goto LABEL_20;
  }
  if (a2 == 1210932136)
  {
    uint64_t v3 = a1 + 104;
    goto LABEL_20;
  }
  return VoConObject_QueryInterface(a1, a2, a3);
}

uint64_t Dictionary_RemoveWord(uint64_t a1, uint64_t a2)
{
  uint64_t result = edct_DctRemoveEntry(*(void *)(a1 + 128), a2);
  if (!result)
  {
    return __Dictionary_CheckAndFillTranscriptionSpec(a1);
  }
  return result;
}

uint64_t Dictionary_ReturnInfo(uint64_t a1, uint64_t a2)
{
  if (a2) {
    OOCAllocator_Free(*(void *)(a1 + 120), a2);
  }
  return 0;
}

uint64_t Dictionary_ReturnKeys(uint64_t a1, uint64_t a2)
{
  if (a2) {
    OOCAllocator_Free(*(void *)(a1 + 120), a2);
  }
  return 0;
}

uint64_t Dictionary_ReturnTranscriptionSpec()
{
  return 0;
}

uint64_t Dictionary_ReturnTranscriptions(uint64_t a1, uint64_t a2)
{
  return TranscriptionTokenizer_ReturnTranscriptions(*(void *)(a1 + 160), a2);
}

uint64_t Dictionary_SetSilenceRemoveMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t PNEW_Dictionary_Con(uint64_t a1, uint64_t a2, char **a3, const void *a4, uint64_t a5, _DWORD *a6, int a7, uint64_t *a8)
{
  unsigned int v18 = 0;
  uint64_t v16 = OOCAllocator_Malloc(a1, 192, &v18);
  uint64_t result = v18;
  if (!v18)
  {
    uint64_t result = Dictionary_Con(v16, a2, a3, a4, a5, a6, a7);
    unsigned int v18 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v16);
      *a8 = 0;
      return v18;
    }
    else
    {
      *(void *)(v16 + 16) = a1;
      *a8 = v16;
    }
  }
  return result;
}

uint64_t PNEW_Dictionary_ConFromBuffer(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 192, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = Dictionary_ConFromBuffer(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *(void *)(v12 + 16) = a1;
      *a6 = v12;
    }
  }
  return result;
}

uint64_t PNEW_Dictionary_ConFromStreamReader(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 192, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = Dictionary_ConFromStreamReader(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *(void *)(v12 + 16) = a1;
      *a6 = v12;
    }
  }
  return result;
}

void *GetDictionaryClass()
{
  return &__Dictionary;
}

uint64_t checkAndFillField(uint64_t a1, int a2, int a3, char *__s, const char **a5)
{
  if (!__s) {
    return 0;
  }
  if (a2 && !lhi_IsValidLanguageString((uint64_t)__s)) {
    goto LABEL_10;
  }
  uint64_t v8 = *a5;
  if (*a5)
  {
    size_t v9 = cstdlib_strlen(*a5);
    if (!cstdlib_strncmp(v8, v8, v9)) {
      return 0;
    }
LABEL_10:
    return err_GenerateErrorData();
  }

  return cloneString(a1, (char **)a5, __s);
}

uint64_t TranscriptionTokenizer_Con(void *a1, uint64_t a2)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__TranscriptionTokenizer;
    a1[1] = a2;
    return PNEW_StringTokenizer_Con(a2, a2, a1 + 2);
  }
  return result;
}

uint64_t TranscriptionTokenizer_Des(uint64_t a1)
{
  uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 8), *(void *)(a1 + 16));
  if (!result)
  {
    return Object_Des();
  }
  return result;
}

uint64_t TranscriptionTokenizer_FetchTranscriptions(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  unsigned int v26 = 0;
  if (a3)
  {
    int v10 = (void *)OOCAllocator_Malloc(*(void *)(a1 + 8), 24 * a3 + 8, &v26);
    uint64_t result = v26;
    if (v26) {
      return result;
    }
    int v22 = a5;
    unsigned int v21 = a4;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v23 = (uint64_t)v10;
    *int v10 = a3;
    unsigned int v14 = v10 + 1;
    uint64_t v15 = a3;
    do
    {
      uint64_t v16 = (_DWORD *)(a2 + 24 * v13);
      if (*v16 == 1)
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t result = StringTokenizer_ExpandPhoneticMultiples(*(void *)(a1 + 16), *(void *)(a1 + 8), *(char **)(a2 + 24 * v13 + 8), &v25, &v24);
        unsigned int v26 = result;
        if (result) {
          return result;
        }
        unint64_t v17 = v24;
        if (!v24)
        {
          uint64_t result = __TranscriptionTokenizer_GetTranscriptionData(a1, a2 + 24 * v13, (uint64_t)&v14[3 * v12]);
          unsigned int v26 = result;
          if (result) {
            return result;
          }
          ++v12;
          unint64_t v17 = v24;
        }
        if (v17 >= 2)
        {
          uint64_t v15 = v15 + v17 - 1;
          unsigned int v18 = (void *)OOCAllocator_Realloc(*(void *)(a1 + 8), v23, 24 * v15 + 8, &v26);
          uint64_t result = v26;
          if (v26) {
            return result;
          }
          uint64_t v23 = (uint64_t)v18;
          *unsigned int v18 = v15;
          unsigned int v14 = v18 + 1;
          unint64_t v17 = v24;
        }
        if (v17)
        {
          unint64_t v19 = 0;
          uint64_t v20 = &v14[3 * v12 + 2];
          do
          {
            *((_DWORD *)v20 - 4) = *v16;
            *(v20 - 1) = v25[v19];
            *uint64_t v20 = cstdlib_strlen(v25[v19]) + 1;
            v20 += 3;
            ++v19;
          }
          while (v19 < v24);
          v12 += v19;
        }
        OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v25);
      }
      else
      {
        uint64_t result = __TranscriptionTokenizer_GetTranscriptionData(a1, a2 + 24 * v13, (uint64_t)&v14[3 * v12]);
        unsigned int v26 = result;
        if (result) {
          return result;
        }
        ++v12;
      }
      ++v13;
    }
    while (v13 != a3);
    uint64_t result = v26;
    a4 = v21;
    a5 = v22;
  }
  else
  {
    uint64_t result = 0;
    unsigned int v14 = 0;
    uint64_t v15 = 0;
  }
  *a4 = v14;
  *a5 = v15;
  return result;
}

uint64_t __TranscriptionTokenizer_GetTranscriptionData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v10 = 0;
  if (*(_DWORD *)a2 == 1) {
    size_t v6 = cstdlib_strlen(*(const char **)(a2 + 8)) + 1;
  }
  else {
    size_t v6 = *(void *)(a2 + 16);
  }
  unsigned int v7 = (void *)OOCAllocator_Malloc(*(void *)(a1 + 8), v6, &v10);
  *(void *)(a3 + 8) = v7;
  uint64_t v8 = v10;
  if (!v10)
  {
    *(_DWORD *)a3 = *(_DWORD *)a2;
    cstdlib_memcpy(v7, *(const void **)(a2 + 8), v6);
    *(void *)(a3 + 16) = v6;
    return v10;
  }
  return v8;
}

uint64_t TranscriptionTokenizer_ReturnTranscriptions(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 - 8;
    uint64_t v4 = *(void *)(a2 - 8);
    if (v4)
    {
      char v5 = (uint64_t *)(a2 + 8);
      do
      {
        uint64_t v6 = *v5;
        v5 += 3;
        OOCAllocator_Free(*(void *)(a1 + 8), v6);
        --v4;
      }
      while (v4);
    }
    OOCAllocator_Free(*(void *)(a1 + 8), v3);
  }
  return 0;
}

uint64_t PNEW_TranscriptionTokenizer_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 24, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = TranscriptionTokenizer_Con(v6, a2);
    unsigned int v8 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *a3 = v6;
    }
  }
  return result;
}

void *GetTranscriptionTokenizerClass()
{
  return &__TranscriptionTokenizer;
}

uint64_t DestroySubDct(uint64_t a1, void *a2)
{
  uint64_t v4 = DICT_Destruct(a2 + 7);
  if (!v4)
  {
    uint64_t v5 = a2[3];
    if (v5) {
      OOCAllocator_Free(a1, v5);
    }
    uint64_t v6 = a2[4];
    if (v6) {
      OOCAllocator_Free(a1, v6);
    }
    uint64_t v7 = a2[5];
    if (v7) {
      OOCAllocator_Free(a1, v7);
    }
    uint64_t v8 = a2[6];
    if (v8) {
      OOCAllocator_Free(a1, v8);
    }
  }
  return v4;
}

uint64_t edct_Close_RWDCT(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)a1[7];
  if (*a1) {
    OOCAllocator_Free(a1[6], *a1);
  }
  uint64_t v4 = a1[1];
  if (v4) {
    OOCAllocator_Free(v2, v4);
  }
  if (v3)
  {
    while (1)
    {
      uint64_t v5 = (void *)v3[17];
      uint64_t result = DestroySubDct(v2, v3);
      if (result) {
        break;
      }
      OOCAllocator_Free(v2, (uint64_t)v3);
      uint64_t v3 = v5;
      if (!v5) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    OOCAllocator_Free(v2, (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t edct_Close_RODCT(uint64_t a1)
{
  return 0;
}

uint64_t edct_Free_ROSUBDCT_List(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (*(void *)(a2 + 80)) {
      edct_Free_ROSUBDCT_List(result);
    }
    return OOCAllocator_Free(v3, a2);
  }
  return result;
}

uint64_t edct_GetEntryDataSpec_In_RWDCT(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  unsigned int v25 = 0;
  uint64_t v4 = *(void **)(a2 + 56);
  if (!v4) {
    return 0;
  }
  LODWORD(v9) = 0;
  unsigned int v10 = 0;
  do
  {
    BOOL v11 = (const char *)v4[3];
    if (v11) {
      LODWORD(v9) = v9 + cstdlib_strlen(v11) + 41;
    }
    else {
      LODWORD(v9) = v9 + 40;
    }
    uint64_t v12 = (const char *)v4[4];
    if (v12) {
      LODWORD(v9) = v9 + cstdlib_strlen(v12) + 1;
    }
    uint64_t v13 = (const char *)v4[6];
    if (v13) {
      LODWORD(v9) = v9 + cstdlib_strlen(v13) + 1;
    }
    if (v4[5]) {
      uint64_t v9 = (v9 + 128);
    }
    else {
      uint64_t v9 = v9;
    }
    ++v10;
    uint64_t v4 = (void *)v4[17];
  }
  while (v4);
  if (!v9) {
    return 0;
  }
  uint64_t v14 = OOCAllocator_Malloc(a1, v9, &v25);
  uint64_t result = v25;
  if (!v25)
  {
    uint64_t v16 = *(void *)(a2 + 56);
    if (v16)
    {
      unint64_t v17 = (char *)(v14 + 40 * v10);
      uint64_t v18 = v14 + 16;
      do
      {
        int v19 = *(_DWORD *)(v16 + 8);
        int v20 = *(_DWORD *)(v16 + 16);
        *(_OWORD *)(v18 - 8) = 0u;
        *(_DWORD *)(v18 - 16) = v19;
        *(_DWORD *)(v18 - 12) = v20;
        *(_OWORD *)(v18 + 8) = 0u;
        unsigned int v21 = *(const char **)(v16 + 24);
        if (v21)
        {
          *(void *)(v18 - 8) = v17;
          cstdlib_strcpy(v17, v21);
          v17 += cstdlib_strlen(*(const char **)(v16 + 24)) + 1;
        }
        int v22 = *(const char **)(v16 + 32);
        if (v22)
        {
          *(void *)uint64_t v18 = v17;
          cstdlib_strcpy(v17, v22);
          v17 += cstdlib_strlen(*(const char **)(v16 + 32)) + 1;
        }
        uint64_t v23 = *(const char **)(v16 + 48);
        if (v23)
        {
          *(void *)(v18 + 16) = v17;
          cstdlib_strcpy(v17, v23);
          v17 += cstdlib_strlen(*(const char **)(v16 + 48)) + 1;
        }
        unint64_t v24 = *(const void **)(v16 + 40);
        if (v24)
        {
          *(void *)(v18 + 8) = v17;
          cstdlib_memcpy(v17, v24, 0x80uLL);
          v17 += 128;
        }
        uint64_t v16 = *(void *)(v16 + 136);
        v18 += 40;
      }
      while (v16);
      uint64_t result = v25;
    }
    else
    {
      uint64_t result = 0;
    }
    *a3 = v14;
    *a4 = v10;
  }
  return result;
}

uint64_t edct_GetEntryDataSpec_In_RODCT(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  unsigned int v24 = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void **)(a1 + 56);
  if (!v4) {
    return 0;
  }
  LODWORD(v8) = 0;
  unsigned int v9 = 0;
  do
  {
    unsigned int v10 = (const char *)v4[2];
    if (v10) {
      LODWORD(v8) = v8 + cstdlib_strlen(v10) + 41;
    }
    else {
      LODWORD(v8) = v8 + 40;
    }
    BOOL v11 = (const char *)v4[3];
    if (v11) {
      LODWORD(v8) = v8 + cstdlib_strlen(v11) + 1;
    }
    uint64_t v12 = (const char *)v4[5];
    if (v12) {
      LODWORD(v8) = v8 + cstdlib_strlen(v12) + 1;
    }
    if (v4[4]) {
      uint64_t v8 = (v8 + 128);
    }
    else {
      uint64_t v8 = v8;
    }
    ++v9;
    uint64_t v4 = (void *)v4[10];
  }
  while (v4);
  if (!v8) {
    return 0;
  }
  uint64_t v13 = OOCAllocator_Malloc(v3, v8, &v24);
  uint64_t result = v24;
  if (!v24)
  {
    uint64_t v15 = *(uint64_t **)(a1 + 56);
    if (v15)
    {
      uint64_t v16 = (char *)(v13 + 40 * v9);
      uint64_t v17 = v13 + 16;
      do
      {
        uint64_t v18 = *v15;
        if (!*v15) {
          uint64_t v18 = v15[1];
        }
        *(_DWORD *)(v17 - 16) = *(_DWORD *)(v18 + 8);
        int v19 = *(_DWORD *)(v18 + 16);
        *(_OWORD *)(v17 - 8) = 0u;
        *(_DWORD *)(v17 - 12) = v19;
        *(_OWORD *)(v17 + 8) = 0u;
        int v20 = (const char *)v15[2];
        if (v20)
        {
          *(void *)(v17 - 8) = v16;
          cstdlib_strcpy(v16, v20);
          v16 += cstdlib_strlen((const char *)v15[2]) + 1;
        }
        unsigned int v21 = (const char *)v15[3];
        if (v21)
        {
          *(void *)uint64_t v17 = v16;
          cstdlib_strcpy(v16, v21);
          v16 += cstdlib_strlen((const char *)v15[3]) + 1;
        }
        int v22 = (const char *)v15[5];
        if (v22)
        {
          *(void *)(v17 + 16) = v16;
          cstdlib_strcpy(v16, v22);
          v16 += cstdlib_strlen((const char *)v15[5]) + 1;
        }
        uint64_t v23 = (const void *)v15[4];
        if (v23)
        {
          *(void *)(v17 + 8) = v16;
          cstdlib_memcpy(v16, v23, 0x80uLL);
          v16 += 128;
        }
        uint64_t v15 = (uint64_t *)v15[10];
        v17 += 40;
      }
      while (v15);
      uint64_t result = v24;
    }
    else
    {
      uint64_t result = 0;
    }
    *a2 = v13;
    *a3 = v9;
  }
  return result;
}

uint64_t edct_RemoveEntry_RWDCT(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  int v11 = -1;
  if (!v2) {
    return err_GenerateErrorArg();
  }
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  while (1)
  {
    int v10 = 0;
    uint64_t result = DICT_Remove(v2 + 56, a2, &v10, &v11);
    if (result) {
      break;
    }
    if (!v11)
    {
      int v9 = *(_DWORD *)(v2 + 4) - v10;
      --*(_DWORD *)v2;
      *(_DWORD *)(v2 + 4) = v9;
      v6 += v10;
      ++v5;
      int v7 = 1;
    }
    uint64_t v2 = *(void *)(v2 + 136);
    if (!v2)
    {
      *(_DWORD *)(a1 + 24) -= v6;
      if (v5) {
        --*(_DWORD *)(a1 + 20);
      }
      if (v7) {
        return 0;
      }
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t edct_FreeEntryDataSpec_In_RWDCT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t edct_FreeEntryDataSpec_In_RODCT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t edct_EntryFree_In_RWDCT(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4)
  {
    unint64_t v6 = a3 + ((unint64_t)a4 << 6);
    int v7 = (void *)a3;
    do
    {
      uint64_t v8 = v7[2];
      if (v8 || (uint64_t v8 = v7[3]) != 0 || (uint64_t v8 = v7[4]) != 0 || (uint64_t v8 = v7[5]) != 0) {
        OOCAllocator_Free(a1, v8);
      }
      OOCAllocator_Free(a1, v7[6]);
      v7 += 8;
    }
    while ((unint64_t)v7 < v6);
  }
  OOCAllocator_Free(a1, a3);
  return 0;
}

uint64_t edct_EntryFree_In_RODCT(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if (a3)
  {
    int v5 = &a2[16 * (unint64_t)a3];
    unint64_t v6 = a2;
    do
    {
      if ((*a2 | 2) == 3) {
        OOCAllocator_Free(a1, *((void *)v6 + 6));
      }
      v6 += 16;
    }
    while (v6 < v5);
  }

  return OOCAllocator_Free(a1, (uint64_t)a2);
}

uint64_t edct_CheckEntryDataHealth(uint64_t a1)
{
  if (*(_DWORD *)a1 || *(_DWORD *)(a1 + 56) && **(unsigned char **)(a1 + 48)) {
    return 0;
  }
  else {
    return err_GenerateErrorData();
  }
}

uint64_t edct_AddEntry_RWDCT(uint64_t a1, char *a2, uint64_t *a3, _DWORD *a4)
{
  int v10 = -1;
  *a4 = 2;
  if (*a2)
  {
    uint64_t result = edct_QuickEntryFind_RWDCT(a1, (uint64_t)a2, &v10);
    if (!result)
    {
      if (v10 == 1)
      {
        ++*(_DWORD *)(a1 + 20);
        *a4 = 0;
      }
      SubDct = (_DWORD *)GetSubDct(a1, (uint64_t)a3);
      int v11 = SubDct;
      if (SubDct
        || (uint64_t result = CreateSubDct(a1, (uint64_t *)&v11), !result)
        && (SubDct = v11, uint64_t result = InitSubDct((uint64_t)v11, *(void *)(a1 + 48), a3), !result))
      {
        uint64_t result = AddEntrySubDct(SubDct, a2, (uint64_t)a3);
        if (!result) {
          ++*(_DWORD *)(a1 + 24);
        }
      }
    }
  }
  else
  {
    return err_GenerateErrorData();
  }
  return result;
}

uint64_t edct_QuickEntryFind_RWDCT(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    while (1)
    {
      memset(v7, 0, sizeof(v7));
      *(_DWORD *)(v4 + 120) = -1;
      uint64_t result = DICT_Find(v4 + 56, a2, (uint64_t)v7, a3);
      if (result) {
        break;
      }
      if (!*a3) {
        return 0;
      }
      uint64_t v4 = *(void *)(v4 + 136);
      if (!v4) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = 0;
    *a3 = 1;
  }
  return result;
}

uint64_t GetSubDct(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    return v2;
  }
  while (1)
  {
    int v4 = *(_DWORD *)(v2 + 8);
    if (v4 != -1 && v4 != *(_DWORD *)a2) {
      goto LABEL_37;
    }
    int v6 = *(_DWORD *)(v2 + 16);
    if (v6 != -1 && v6 != *(_DWORD *)(a2 + 8)) {
      goto LABEL_37;
    }
    int v8 = *(_DWORD *)(v2 + 12);
    if (v8 != -1 && v8 != *(_DWORD *)(a2 + 4)) {
      goto LABEL_37;
    }
    int v10 = *(const char **)(v2 + 24);
    int v11 = *(const char **)(a2 + 16);
    if (v10 && v11)
    {
      if (cstdlib_strcmp(v10, v11)) {
        goto LABEL_37;
      }
    }
    else if (v10 != v11)
    {
      goto LABEL_37;
    }
    uint64_t v12 = *(const char **)(v2 + 32);
    uint64_t v13 = *(const char **)(a2 + 24);
    if (v12 && v13)
    {
      if (cstdlib_strcmp(v12, v13)) {
        goto LABEL_37;
      }
    }
    else if (v12 != v13)
    {
      goto LABEL_37;
    }
    uint64_t v14 = *(const char **)(v2 + 48);
    uint64_t v15 = *(const char **)(a2 + 40);
    if (v14 && v15)
    {
      if (cstdlib_strcmp(v14, v15)) {
        goto LABEL_37;
      }
    }
    else if (v14 != v15)
    {
      goto LABEL_37;
    }
    uint64_t v16 = *(const void **)(v2 + 40);
    uint64_t v17 = *(const void **)(a2 + 32);
    if (!v16 || !v17) {
      break;
    }
    if (!cstdlib_memcmp(v16, v17, 0x80uLL)) {
      goto LABEL_39;
    }
LABEL_37:
    uint64_t v2 = *(void *)(v2 + 136);
    if (!v2) {
      return v2;
    }
  }
  if (v16 != v17) {
    goto LABEL_37;
  }
LABEL_39:
  if (*(_DWORD *)(v2 + 8) == -1 && *(_DWORD *)(v2 + 12) == -1 && *(_DWORD *)(v2 + 16) == -1)
  {
    *(void *)(v2 + 8) = *(void *)a2;
    *(_DWORD *)(v2 + 16) = *(_DWORD *)(a2 + 8);
  }
  return v2;
}

uint64_t CreateSubDct(uint64_t a1, uint64_t *a2)
{
  unsigned int v8 = 0;
  uint64_t v3 = (uint64_t *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = OOCAllocator_Calloc(*(void *)(a1 + 48), 1, 144, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    if (v4)
    {
      do
      {
        uint64_t v7 = v4;
        uint64_t v4 = *(void *)(v4 + 136);
      }
      while (v4);
      uint64_t v3 = (uint64_t *)(v7 + 136);
    }
    *uint64_t v3 = v5;
    *(void *)(v5 + 136) = 0;
    *a2 = v5;
  }
  return result;
}

uint64_t InitSubDct(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v19 = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 2);
  uint64_t v6 = *a3;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v7 = (char **)(a1 + 24);
  *(void *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 40) = 0u;
  unsigned int v8 = (const char *)a3[2];
  if (v8)
  {
    size_t v9 = cstdlib_strlen(v8);
    int v10 = (char *)OOCAllocator_Malloc(a2, v9 + 1, &v19);
    *uint64_t v7 = v10;
    uint64_t result = v19;
    if (v19) {
      return result;
    }
    cstdlib_strcpy(v10, (const char *)a3[2]);
  }
  uint64_t v12 = (const char *)a3[3];
  if (v12)
  {
    size_t v13 = cstdlib_strlen(v12);
    uint64_t v14 = (char *)OOCAllocator_Malloc(a2, v13 + 1, &v19);
    *(void *)(a1 + 32) = v14;
    uint64_t result = v19;
    if (v19) {
      return result;
    }
    cstdlib_strcpy(v14, (const char *)a3[3]);
  }
  if (a3[4])
  {
    uint64_t v15 = (void *)OOCAllocator_Malloc(a2, 129, &v19);
    *(void *)(a1 + 40) = v15;
    uint64_t result = v19;
    if (v19) {
      return result;
    }
    cstdlib_memcpy(v15, (const void *)a3[4], 0x80uLL);
    *(unsigned char *)(*(void *)(a1 + 40) + 128) = 0;
  }
  uint64_t v16 = (const char *)a3[5];
  if (v16)
  {
    size_t v17 = cstdlib_strlen(v16);
    uint64_t v18 = (char *)OOCAllocator_Malloc(a2, v17 + 1, &v19);
    *(void *)(a1 + 48) = v18;
    uint64_t result = v19;
    if (v19) {
      return result;
    }
    cstdlib_strcpy(v18, (const char *)a3[5]);
  }
  return DICT_Init(a1 + 56, a2, 10000, 50000);
}

uint64_t AddEntrySubDct(_DWORD *a1, char *a2, uint64_t a3)
{
  int v5 = -1;
  uint64_t result = DICT_Add((uint64_t)(a1 + 14), a2, *(void **)(a3 + 48), *(_DWORD *)(a3 + 56), &v5);
  if (!result)
  {
    if (v5) {
      ++*a1;
    }
    ++a1[1];
  }
  return result;
}

uint64_t edct_Open_RODCT(uint64_t a1, int *a2, uint64_t *a3)
{
  unsigned int v32 = 0;
  uint64_t v4 = (const char *)(a2 + 6);
  int v3 = *a2;
  *a3 = 0;
  int v5 = v3 & 0xFFFFFF;
  if ((v3 & 0xFFFFFFu) - 8 >= 0xFFFFFFFE && !a2[2])
  {
    uint64_t v10 = OOCAllocator_Calloc(a1, 1, 64, &v32);
    uint64_t result = v32;
    if (v32) {
      return result;
    }
    *(_DWORD *)(v10 + 32) = 1;
    *(void *)(v10 + 48) = a1;
    *(void *)(v10 + 20) = *(void *)(a2 + 3);
    int v11 = cstdlib_strlen(v4);
    uint64_t v12 = (v11 + 1);
    if (v11) {
      size_t v13 = v4;
    }
    else {
      size_t v13 = 0;
    }
    *(void *)uint64_t v10 = v13;
    uint64_t v14 = &v4[v12];
    int v15 = cstdlib_strlen(&v4[v12]);
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0;
    }
    *(void *)(v10 + 8) = v16;
    uint64_t v17 = a2[5];
    if (!v17) {
      goto LABEL_48;
    }
    uint64_t v18 = OOCAllocator_Calloc(a1, 1, 88, &v32);
    *(void *)(v10 + 56) = v18;
    uint64_t result = v32;
    if (v32) {
      return result;
    }
    if (!a2[5])
    {
LABEL_48:
      *a3 = v10;
      return v32;
    }
    unint64_t v19 = 0;
    uint64_t v31 = (uint64_t)&v14[4 * v17
                      + (v15 + 1)
                      + ((((_BYTE)v14 + v15 + 1) ^ (2 * ((_BYTE)v14 + v15 + 1))) & 3)];
    int v20 = &v14[v15 + 1 + ((((_BYTE)v14 + v15 + 1) ^ (2 * ((_BYTE)v14 + v15 + 1))) & 3)];
    unsigned int v21 = (void *)v18;
    while (1)
    {
      int v22 = (_DWORD *)(v31 + *(unsigned int *)&v20[4 * v19]);
      if (v5 == 6) {
        break;
      }
      v21[1] = v22;
      uint64_t v23 = (const char *)(v22 + 13);
      if (*v21)
      {
        int v22 = (_DWORD *)*v21;
LABEL_21:
        if (!v22[5]) {
          goto LABEL_26;
        }
        goto LABEL_22;
      }
      if (!v22[5])
      {
        int v22 = 0;
LABEL_26:
        v21[2] = 0;
        if (v22) {
          goto LABEL_33;
        }
        goto LABEL_27;
      }
LABEL_22:
      v21[2] = v23;
      v23 += cstdlib_strlen(v23) + 1;
      int v22 = (_DWORD *)*v21;
      if (*v21) {
        goto LABEL_33;
      }
LABEL_27:
      if (*(_DWORD *)(v21[1] + 24))
      {
        v21[3] = v23;
        v23 += cstdlib_strlen(v23) + 1;
        int v22 = (_DWORD *)*v21;
        if (!*v21) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
LABEL_33:
      v21[3] = 0;
      if (!v22)
      {
LABEL_29:
        if (!*(_DWORD *)(v21[1] + 28)) {
          goto LABEL_30;
        }
        goto LABEL_35;
      }
LABEL_34:
      if (!v22[6])
      {
LABEL_30:
        v21[4] = 0;
        if (!v22) {
          goto LABEL_31;
        }
        goto LABEL_36;
      }
LABEL_35:
      v21[4] = v23;
      v23 += 129;
      if (!v22)
      {
LABEL_31:
        if (*(_DWORD *)(v21[1] + 32)) {
          goto LABEL_37;
        }
        goto LABEL_32;
      }
LABEL_36:
      if (v22[7])
      {
LABEL_37:
        v21[5] = v23;
        v23 += cstdlib_strlen(v23) + 1;
        int v22 = (_DWORD *)*v21;
        goto LABEL_38;
      }
LABEL_32:
      v21[5] = 0;
LABEL_38:
      unsigned int v24 = &v23[(v23 ^ (2 * (_BYTE)v23)) & 3];
      v21[6] = v24;
      if (v22) {
        unsigned int v25 = v22 + 8;
      }
      else {
        unsigned int v25 = (unsigned int *)(v21[1] + 36);
      }
      unsigned int v26 = &v24[4 * *v25];
      int v27 = *(_DWORD *)v26;
      v26 += 4;
      v21[7] = v26;
      long long v28 = (char *)&v26[v27
                       + ((((_BYTE)v26 + v27) ^ (2
                                                                                 * ((_BYTE)v26
                                                                                  + *(_DWORD *)&v24[4 * *v25]))) & 3)];
      v21[8] = v28;
      if (v22) {
        uint64_t v29 = v22 + 8;
      }
      else {
        uint64_t v29 = (unsigned int *)(v21[1] + 36);
      }
      v21[9] = &v28[4 * *v29 + 4];
      ++v19;
      unint64_t v30 = a2[5];
      if (v19 < v30)
      {
        unsigned int v21 = (void *)OOCAllocator_Calloc(a1, 1, 88, &v32);
        *(void *)(v18 + 80) = v21;
        uint64_t result = v32;
        if (v32) {
          return result;
        }
        unint64_t v30 = a2[5];
        uint64_t v18 = (uint64_t)v21;
      }
      if (v19 >= v30) {
        goto LABEL_48;
      }
    }
    *unsigned int v21 = v22;
    uint64_t v23 = (const char *)(v22 + 12);
    goto LABEL_21;
  }

  return err_GenerateErrorArg();
}

uint64_t edct_Open_RWDCT(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = OOCAllocator_Calloc(a1, 1, 72, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    *(_DWORD *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 20) = 0;
    *(_DWORD *)(v6 + 24) = 0;
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
    *(void *)(v6 + 48) = a1;
    if (!a2 || (uint64_t result = DctFromArchive((char **)v6, a2), !result))
    {
      uint64_t result = 0;
      *a3 = v6;
    }
  }
  return result;
}

uint64_t GetNbrSubDct(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = (result + 1);
    uint64_t v1 = *(void *)(v1 + 136);
  }
  while (v1);
  return result;
}

uint64_t edct_EntryLookup_In_RODCT(char *__s1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  unsigned int v63 = 0;
  int v5 = *(int ***)(a3 + 56);
  if (!v5)
  {
    uint64_t result = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    goto LABEL_67;
  }
  uint64_t v6 = a2;
  long long v53 = a4;
  unsigned int v54 = a5;
  unsigned int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v57 = *(void *)(a3 + 48);
  do
  {
    unsigned int v64 = 0;
    uint64_t v10 = *v5;
    unsigned int v62 = v8;
    if (*v5)
    {
      int v11 = v10 + 2;
      uint64_t v12 = v10 + 3;
      size_t v13 = v10 + 4;
      uint64_t v14 = v10 + 8;
    }
    else
    {
      int v15 = v5[1];
      int v11 = v15 + 2;
      uint64_t v12 = v15 + 3;
      size_t v13 = v15 + 4;
      uint64_t v14 = v15 + 9;
    }
    int v16 = *v12;
    int v17 = *v11;
    int v61 = *v13;
    uint64_t v18 = (const char *)v5[2];
    unint64_t v19 = (unsigned int *)v5[6];
    unsigned int v59 = v5[5];
    unsigned int v60 = v5[4];
    int v20 = v5[7];
    int v21 = *v14;
    if (v6)
    {
      int v22 = *(const char **)(v6 + 8);
      if (v22)
      {
        if (!v18 || cstdlib_strcmp(v22, v18)) {
          goto LABEL_38;
        }
      }
      uint64_t v23 = *(const char **)(v6 + 32);
      if (v23)
      {
        unsigned int v24 = (const char *)v5[5];
        if (v24)
        {
          if (cstdlib_strcmp(v23, v24)) {
            goto LABEL_38;
          }
        }
      }
      unsigned int v25 = *(const void **)(v6 + 24);
      if (v25)
      {
        unsigned int v26 = v5[4];
        if (v26)
        {
          if (cstdlib_memcmp(v25, v26, 0x80uLL)) {
            goto LABEL_38;
          }
        }
      }
      uint64_t v10 = *v5;
      if (*(_DWORD *)v6 != -1)
      {
        int v27 = v10 ? v10 + 2 : v5[1] + 2;
        if (*(_DWORD *)v6 != *v27) {
          goto LABEL_38;
        }
      }
      int v28 = *(_DWORD *)(v6 + 4);
      if (v28 != -1)
      {
        uint64_t v29 = v10 ? v10 + 4 : v5[1] + 4;
        if (v28 != *v29) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v30 = v10 ? v10 + 8 : v5[1] + 9;
    if (!*v30) {
      goto LABEL_38;
    }
    int v55 = v16;
    int v56 = v17;
    unsigned int v31 = v21 - 1;
    int v32 = cstdlib_strcmp(__s1, (const char *)v20 + *v19);
    int v33 = cstdlib_strcmp(__s1, (const char *)v20 + v19[v21 - 1]);
    LODWORD(v34) = 0;
    uint64_t v35 = 0;
    if ((v32 & 0x80000000) == 0 && v33 <= 0)
    {
      unsigned int v36 = 0;
      while (1)
      {
        uint64_t v37 = (v36 + v31) >> 1;
        int v38 = cstdlib_strcmp(__s1, (const char *)v20 + v19[v37]);
        if (!v38) {
          break;
        }
        if (v38 <= 0) {
          unsigned int v31 = v37 - 1;
        }
        else {
          unsigned int v36 = v37 + 1;
        }
        if (v36 > v31) {
          goto LABEL_38;
        }
      }
      size_t v40 = v5[8];
      uint64_t v41 = v40[v37];
      int v42 = v40[(v37 + 1)];
      if (v42 >= 0) {
        unsigned int v43 = v42;
      }
      else {
        unsigned int v43 = -v42;
      }
      if ((v41 & 0x80000000) != 0)
      {
        unint64_t v46 = v5[9];
        unint64_t v47 = (char *)v46 + (((unint64_t)v46 - v41) & 1) - v41;
        unint64_t v48 = (unint64_t)v46 + v43;
        int v49 = v47 + 2;
        if ((unint64_t)(v47 + 2) < v48)
        {
          LODWORD(v34) = 0;
          uint64_t v35 = 0;
          while (1)
          {
            uint64_t v34 = (v34 + 1);
            uint64_t v35 = (_DWORD *)OOCAllocator_Realloc(v57, (uint64_t)v35, (unint64_t)v34 << 6, &v64);
            uint64_t result = v64;
            if (v64) {
              break;
            }
            long long v50 = (char *)&v35[16 * v34];
            *((_DWORD *)v50 - 16) = v56;
            *((_DWORD *)v50 - 15) = v55;
            *((_DWORD *)v50 - 14) = v61;
            *((void *)v50 - 6) = v18;
            *((void *)v50 - 4) = v60;
            *((void *)v50 - 3) = v59;
            uint64_t v51 = *(unsigned __int16 *)v47;
            *((_DWORD *)v50 - 2) = v51;
            if ((*v35 | 2) == 3)
            {
              uint64_t v52 = (void *)OOCAllocator_Malloc(v57, v51, &v64);
              uint64_t result = v64;
              if (v64) {
                break;
              }
              *((void *)v50 - 2) = v52;
              cstdlib_memcpy(v52, v49, *((_DWORD *)v50 - 2) & 0xFFFFFFFE);
              uint64_t v51 = *(unsigned __int16 *)v47;
            }
            else
            {
              *((void *)v50 - 2) = v49;
            }
            unint64_t v47 = &v49[v51 + ((unint64_t)&v49[v51] & 1)];
            int v49 = v47 + 2;
            if ((unint64_t)(v47 + 2) >= v48) {
              goto LABEL_39;
            }
          }
LABEL_65:
          a4 = v53;
          a5 = v54;
          unsigned int v8 = v62;
          goto LABEL_67;
        }
LABEL_38:
        uint64_t v35 = 0;
        LODWORD(v34) = 0;
        goto LABEL_39;
      }
      uint64_t v35 = (_DWORD *)OOCAllocator_Malloc(v57, 64, &v64);
      uint64_t result = v64;
      if (v64) {
        goto LABEL_65;
      }
      *uint64_t v35 = v56;
      v35[1] = v55;
      v35[2] = v61;
      *((void *)v35 + 2) = v18;
      *((void *)v35 + 4) = v60;
      *((void *)v35 + 5) = v59;
      uint64_t v44 = v43 - v41;
      v35[14] = v44;
      if ((v56 | 2) == 3)
      {
        uint64_t v45 = (void *)OOCAllocator_Malloc(v57, v44, &v64);
        uint64_t result = v64;
        if (v64) {
          goto LABEL_65;
        }
        *((void *)v35 + 6) = v45;
        cstdlib_memcpy(v45, (char *)v5[9] + v41, v35[14] & 0xFFFFFFFE);
      }
      else
      {
        *((void *)v35 + 6) = (char *)v5[9] + v41;
      }
      LODWORD(v34) = 1;
    }
LABEL_39:
    uint64_t result = v64;
    unsigned int v63 = v64;
    if (v64) {
      goto LABEL_65;
    }
    unsigned int v8 = v62;
    if (v34)
    {
      uint64_t v9 = OOCAllocator_Realloc(v57, v9, (unint64_t)(v34 + v62) << 6, &v63);
      uint64_t result = v63;
      if (v63) {
        goto LABEL_66;
      }
      cstdlib_memcpy((void *)(v9 + ((unint64_t)v62 << 6)), v35, (unint64_t)v34 << 6);
      OOCAllocator_Free(v57, (uint64_t)v35);
      unsigned int v8 = v34 + v62;
    }
    int v5 = (int **)v5[10];
    uint64_t v6 = a2;
  }
  while (v5);
  uint64_t result = v63;
LABEL_66:
  a4 = v53;
  a5 = v54;
LABEL_67:
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t edct_EntryLookup_In_RWDCT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int *a6)
{
  uint64_t v7 = *(void *)(a4 + 56);
  int v24 = -1;
  unsigned int v25 = 0;
  if (v7)
  {
    int v21 = a6;
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    while (1)
    {
      __b[0] = 0;
      __b[1] = 0;
      uint64_t v23 = 0;
      cstdlib_memset(__b, 0, 0x18uLL);
      if (!a3) {
        break;
      }
      if (*(_DWORD *)a3 == -1 || *(_DWORD *)a3 == *(_DWORD *)(v7 + 8))
      {
        int v13 = *(_DWORD *)(a3 + 4);
        if (v13 == -1 || v13 == *(_DWORD *)(v7 + 16))
        {
          uint64_t v14 = *(const char **)(a3 + 8);
          if (!v14 || (int v15 = *(const char **)(v7 + 24)) != 0 && !cstdlib_strcmp(v14, v15))
          {
            int v16 = *(const char **)(a3 + 32);
            if (!v16 || (int v17 = *(const char **)(v7 + 48)) == 0 || !cstdlib_strcmp(v16, v17))
            {
              uint64_t v18 = *(const void **)(a3 + 24);
              if (!v18) {
                break;
              }
              unint64_t v19 = *(const void **)(v7 + 40);
              if (!v19 || !cstdlib_memcmp(v18, v19, 0x80uLL)) {
                break;
              }
            }
          }
        }
      }
LABEL_24:
      uint64_t v7 = *(void *)(v7 + 136);
      if (!v7)
      {
        uint64_t result = v25;
        a6 = v21;
        goto LABEL_27;
      }
    }
    *(_DWORD *)(v7 + 120) = -1;
    while (1)
    {
      uint64_t result = DICT_Find(v7 + 56, a2, (uint64_t)__b, &v24);
      unsigned int v25 = result;
      if (result) {
        break;
      }
      if (!v24)
      {
        uint64_t v12 = OOCAllocator_Realloc(a1, v12, (unint64_t)(v11 + 1) << 6, &v25);
        uint64_t result = v25;
        if (v25) {
          return result;
        }
        uint64_t result = edct_CopyFoundMatch(a1, v12 + ((unint64_t)v11 << 6), v7, (uint64_t)__b);
        unsigned int v25 = result;
        if (result) {
          return result;
        }
        ++v11;
      }
      if (HIDWORD(v23) != 1) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v12 = 0;
    unsigned int v11 = 0;
LABEL_27:
    *a5 = v12;
    *a6 = v11;
  }
  return result;
}

uint64_t edct_CopyFoundMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v22 = 0;
  unsigned int v8 = *(const char **)(a3 + 24);
  if (v8) {
    unsigned int v9 = cstdlib_strlen(v8) + 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(const char **)(a3 + 32);
  if (v10) {
    v9 += cstdlib_strlen(v10) + 1;
  }
  unsigned int v11 = *(const char **)(a3 + 48);
  if (*(void *)(a3 + 40)) {
    v9 += 128;
  }
  if (v11) {
    v9 += cstdlib_strlen(v11) + 1;
  }
  if (!v9)
  {
    uint64_t v12 = 0;
    int v15 = 0;
    int v16 = 0;
LABEL_15:
    int v17 = 0;
    goto LABEL_25;
  }
  uint64_t v12 = (char *)OOCAllocator_Malloc(a1, v9, &v22);
  uint64_t result = v22;
  if (v22) {
    return result;
  }
  uint64_t v14 = *(const char **)(a3 + 24);
  if (v14)
  {
    cstdlib_strcpy(v12, v14);
    int v15 = &v12[cstdlib_strlen(v12) + 1];
  }
  else
  {
    int v15 = v12;
    uint64_t v12 = 0;
  }
  uint64_t v18 = *(const char **)(a3 + 32);
  if (v18)
  {
    cstdlib_strcpy(v15, v18);
    int v16 = &v15[cstdlib_strlen(v15) + 1];
  }
  else
  {
    int v16 = v15;
    int v15 = 0;
  }
  unint64_t v19 = *(const void **)(a3 + 40);
  if (v19)
  {
    cstdlib_memcpy(v16, v19, 0x80uLL);
    int v17 = v16 + 128;
  }
  else
  {
    int v17 = v16;
    int v16 = 0;
  }
  int v20 = *(const char **)(a3 + 48);
  if (!v20) {
    goto LABEL_15;
  }
  cstdlib_strcpy(v17, v20);
  cstdlib_strlen(v17);
LABEL_25:
  int v21 = (void *)OOCAllocator_Malloc(a1, *(unsigned int *)(a4 + 16), &v22);
  uint64_t result = v22;
  if (!v22)
  {
    cstdlib_memcpy(v21, *(const void **)(a4 + 8), *(unsigned int *)(a4 + 16));
    *(void *)a2 = *(void *)(a3 + 8);
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 40) = v17;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 16);
    *(void *)(a2 + 48) = v21;
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a4 + 16);
    return v22;
  }
  return result;
}

uint64_t srvspi_MemblockInit(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1) {
    return err_GenerateErrorArg();
  }
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a2;
  *(void *)(a1 + 8) = a3;
  return 0;
}

uint64_t srvspi_MemblockAlign(int *a1, unsigned int a2)
{
  if (!a1) {
    return err_GenerateErrorArg();
  }
  int v2 = *a1;
  int v3 = *a1 % a2;
  int v4 = v3 ? a2 - v3 : 0;
  if (*((void *)a1 + 1) && a1[1] < (v4 + v2)) {
    return err_GenerateErrorArg();
  }
  if (v4) {
    *a1 = v4 + v2;
  }
  return 0;
}

uint64_t srvspi_MemblockAlloc(unsigned int *a1, int a2, void *a3)
{
  if (!a1) {
    return err_GenerateErrorArg();
  }
  if (a3)
  {
    uint64_t v3 = *((void *)a1 + 1);
    if (v3) {
      v3 += *a1;
    }
    *a3 = v3;
  }
  unsigned int v4 = *a1 + a2;
  *a1 = v4;
  if (!*((void *)a1 + 1) || a1[1] >= v4) {
    return 0;
  }
  else {
    return err_GenerateErrorArg();
  }
}

uint64_t srvspi_MemblockGetUsed(_DWORD *a1, _DWORD *a2)
{
  if (!a1 || !a2) {
    return err_GenerateErrorArg();
  }
  *a2 = *a1;
  return 0;
}

uint64_t srvspi_MemblockGetBegin(uint64_t a1, void *a2)
{
  if (!a1 || !a2) {
    return err_GenerateErrorArg();
  }
  *a2 = *(void *)(a1 + 8);
  return 0;
}

uint64_t edct_DctArchive(uint64_t a1, char *a2, int *a3, int a4)
{
  if (!a4 && *(_DWORD *)(a1 + 44) == 1 || *(_DWORD *)(a1 + 32) == 1) {
    return err_GenerateErrorArg();
  }
  else {
    return DctArchive(a1, a2, a3, a4);
  }
}

uint64_t edct_DctArchiveStream(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4, int a5)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unsigned int v12 = 0;
  uint64_t result = edct_DctArchive(a1, 0, (int *)&v12, a5);
  unsigned int v15 = result;
  if (!result)
  {
    unsigned int v11 = (char *)OOCAllocator_Malloc(*(void *)(a1 + 48), v12, &v15);
    uint64_t result = v15;
    if (!v15)
    {
      uint64_t result = edct_DctArchive(a1, v11, (int *)&v12, a5);
      unsigned int v15 = result;
      if (!result)
      {
        uint64_t result = PNEW_BinBlockStreamWriter_Con(*(void *)(a1 + 48), *(void *)(a1 + 48), a2, a3, a4, 341630714, 0x10000, 10, (uint64_t *)&v14);
        unsigned int v15 = result;
        if (!result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v14[3] + 32))((uint64_t)v14 - *(void *)(v14[3] + 120) + 24, 414429700, 0x10000, &v13);
          unsigned int v15 = result;
          if (!result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)v13 + 8))(v13 - *(void *)(*(void *)v13 + 56), v11, v12);
            unsigned int v15 = result;
            if (!result)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14[3] + 48))((uint64_t)v14 - *(void *)(v14[3] + 120) + 24, v13);
              unsigned int v15 = result;
              if (!result)
              {
                uint64_t result = (*(uint64_t (**)(void *))(*v14 + 32))(v14);
                unsigned int v15 = result;
              }
            }
          }
        }
      }
    }
    if (v11)
    {
      OOCAllocator_Free(*(void *)(a1 + 48), (uint64_t)v11);
      return v15;
    }
  }
  return result;
}

uint64_t edct_DctFreeAllEntryDataSpec(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v5 == 1) {
    return edct_FreeEntryDataSpec_In_RODCT(v6, a1, a2);
  }
  else {
    return edct_FreeEntryDataSpec_In_RWDCT(v6, a1, a2);
  }
}

uint64_t edct_DctAddEntry(uint64_t a1, char *a2, uint64_t *a3, unsigned int a4)
{
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    return err_GenerateErrorArg();
  }
  else if (a4)
  {
    int v5 = a3;
    unint64_t v8 = (unint64_t)&a3[8 * (unint64_t)a4];
    while (1)
    {
      int v9 = 0;
      uint64_t result = edct_CheckEntryDataHealth((uint64_t)v5);
      if (result) {
        break;
      }
      uint64_t result = edct_AddEntry_RWDCT(a1, a2, v5, &v9);
      if (result) {
        break;
      }
      v5 += 8;
      if ((unint64_t)v5 >= v8) {
        return 0;
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t edct_DctOpen(uint64_t a1, int *a2, int a3, uint64_t *a4)
{
  unsigned int v12 = a2;
  int v11 = 0;
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t result = DctDecryptArchive((const void **)&v12, &v11);
  if (result) {
    return result;
  }
  unint64_t v8 = v12;
  if (!v12)
  {
LABEL_7:
    if (a3 == 1)
    {
      uint64_t result = err_GenerateErrorArg();
      if (result) {
        return result;
      }
      goto LABEL_12;
    }
    uint64_t v9 = a1;
    unint64_t v8 = 0;
LABEL_11:
    uint64_t result = edct_Open_RWDCT(v9, (uint64_t)v8, a4);
    if (result) {
      return result;
    }
    goto LABEL_12;
  }
  uint64_t v9 = a1;
  if (a3 != 1) {
    goto LABEL_11;
  }
  uint64_t result = edct_Open_RODCT(a1, v12, a4);
  if (result) {
    return result;
  }
LABEL_12:
  uint64_t result = 0;
  uint64_t v10 = (_DWORD *)*a4;
  v10[9] = 0;
  v10[10] = 0;
  v10[11] = v11;
  return result;
}

uint64_t edct_DctUpdateBuffer(uint64_t *a1, uint64_t a2, const void *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v14 = 0;
  unsigned int v13 = 0;
  uint64_t v12 = 0;
  uint64_t result = PNEW_BinBlockStreamReader_Con(a2, a2, a3, a4, a5, (uint64_t *)&v14);
  if (!result)
  {
    if ((*(unsigned int (**)(uint64_t))(v14[4] + 56))((uint64_t)v14 - *(void *)(v14[4] + 224) + 32) != 341630714) {
      return err_GenerateErrorData();
    }
    unsigned int v8 = (*(uint64_t (**)(uint64_t))(v14[4] + 64))((uint64_t)v14 - *(void *)(v14[4] + 224) + 32);
    if (!BinBlockStreamReader_IsVersionAccepted(v8, 0x10000)) {
      return err_GenerateErrorVersion();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, unsigned int *))(v14[4] + 8))((uint64_t)v14 - *(void *)(v14[4] + 224) + 32, 414429700, 0, &v12, &v13);
    unsigned int v11 = result;
    if (result) {
      return result;
    }
    if (BinBlockStreamReader_IsVersionAccepted(v13, 0x10000))
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12 - *(void *)(*(void *)v12 + 48));
      uint64_t v10 = OOCAllocator_Malloc(a2, v9, &v11);
      *a1 = v10;
      uint64_t result = v11;
      if (!v11)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12 - *(void *)(*(void *)v12 + 48), v10);
        unsigned int v11 = result;
        if (!result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14[4] + 24))((uint64_t)v14 - *(void *)(v14[4] + 224) + 32, v12);
          unsigned int v11 = result;
          if (!result) {
            return (*(uint64_t (**)(void *))(*v14 + 32))(v14);
          }
        }
      }
    }
    else
    {
      return err_GenerateErrorVersion();
    }
  }
  return result;
}

uint64_t edct_DctOpenFromStream(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4, int a5, uint64_t *a6)
{
  uint64_t v12 = 0;
  uint64_t updated = edct_DctUpdateBuffer((uint64_t *)&v12, a1, a2, a3, a4);
  uint64_t v10 = v12;
  if (!updated)
  {
    uint64_t updated = edct_DctOpen(a1, v12, a5, a6);
    if (!v10) {
      return updated;
    }
    goto LABEL_3;
  }
  if (v12) {
LABEL_3:
  }
    OOCAllocator_Free(a1, (uint64_t)v10);
  return updated;
}

uint64_t edct_DctGetEntryData(uint64_t a1, char *__s1, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  *a4 = 0;
  *a5 = 0;
  if (*(_DWORD *)(a1 + 32) == 1) {
    return edct_EntryLookup_In_RODCT(__s1, a3, a1, a4, a5);
  }
  else {
    return edct_EntryLookup_In_RWDCT(*(void *)(a1 + 48), (uint64_t)__s1, a3, a1, a4, a5);
  }
}

uint64_t edct_DctRemoveEntry(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 32) == 1) {
    return err_GenerateErrorArg();
  }
  else {
    return edct_RemoveEntry_RWDCT(a1, a2);
  }
}

uint64_t edct_DctFreeEntryData(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v6 == 1)
  {
    edct_EntryFree_In_RODCT(v7, a2, a3);
    return 0;
  }

  return edct_EntryFree_In_RWDCT(v7, a1, (uint64_t)a2, a3);
}

uint64_t edct_DctGetInfo(uint64_t a1, uint64_t a2)
{
  unsigned int v13 = 0;
  unsigned int v4 = *(const char **)a1;
  int v5 = *(const char **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 20);
  if (*(_DWORD *)(a1 + 32))
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
LABEL_3:
    *(void *)(a2 + 20) = v6;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 44);
    return v13;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v5)
  {
    size_t v9 = cstdlib_strlen(*(const char **)(a1 + 8));
    uint64_t v10 = (char *)OOCAllocator_Malloc(v8, v9 + 1, &v13);
    *(void *)(a2 + 8) = v10;
    uint64_t result = v13;
    if (v13) {
      return result;
    }
    cstdlib_strcpy(v10, v5);
    if (!v4)
    {
LABEL_8:
      *(void *)a2 = 0;
      goto LABEL_3;
    }
  }
  else
  {
    *(void *)(a2 + 8) = 0;
    if (!v4) {
      goto LABEL_8;
    }
  }
  size_t v11 = cstdlib_strlen(v4);
  uint64_t v12 = (char *)OOCAllocator_Malloc(v8, v11 + 1, &v13);
  *(void *)a2 = v12;
  uint64_t result = v13;
  if (!v13)
  {
    cstdlib_strcpy(v12, v4);
    goto LABEL_3;
  }
  return result;
}

uint64_t edct_DctFreeInfo(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t v4 = a2[1];
    if (v4) {
      OOCAllocator_Free(*(void *)(a1 + 48), v4);
    }
    if (*a2) {
      OOCAllocator_Free(*(void *)(a1 + 48), *a2);
    }
  }
  return 0;
}

uint64_t edct_DctGetAllEntryDataSpec(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  *a2 = 0;
  *a3 = 0;
  if (*(_DWORD *)(a1 + 32) == 1) {
    return edct_GetEntryDataSpec_In_RODCT(a1, a2, a3);
  }
  else {
    return edct_GetEntryDataSpec_In_RWDCT(*(void *)(a1 + 48), a1, a2, a3);
  }
}

uint64_t edct_DctClose(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36)) {
    return err_GenerateErrorArg();
  }
  if (*(_DWORD *)(a1 + 32) == 1) {
    return edct_Close_RODCT(a1);
  }
  return edct_Close_RWDCT((uint64_t *)a1);
}

uint64_t edct_DctSetInfo(uint64_t a1, const char **a2)
{
  unsigned int v13 = 0;
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    return err_GenerateErrorArg();
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      OOCAllocator_Free(*(void *)(a1 + 48), v4);
    }
    if (*(void *)a1) {
      OOCAllocator_Free(*(void *)(a1 + 48), *(void *)a1);
    }
    int v5 = a2[1];
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      size_t v7 = cstdlib_strlen(v5);
      uint64_t v8 = (char *)OOCAllocator_Malloc(v6, v7 + 1, &v13);
      *(void *)(a1 + 8) = v8;
      if (v13) {
        return v13;
      }
      cstdlib_strcpy(v8, a2[1]);
    }
    else
    {
      *(void *)(a1 + 8) = 0;
    }
    if (*a2)
    {
      uint64_t v9 = *(void *)(a1 + 48);
      size_t v10 = cstdlib_strlen(*a2);
      size_t v11 = (char *)OOCAllocator_Malloc(v9, v10 + 1, &v13);
      *(void *)a1 = v11;
      if (!v13) {
        cstdlib_strcpy(v11, *a2);
      }
    }
    else
    {
      *(void *)a1 = 0;
    }
  }
  return v13;
}

uint64_t edct_DctInitSubDctFromTransSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = 0;
  uint64_t result = CreateSubDct(a1, &v5);
  if (!result) {
    return InitSubDct(v5, *(void *)(a1 + 48), a2);
  }
  return result;
}

uint64_t DctIt_RO_Open(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v7 = 0;
  uint64_t v5 = OOCAllocator_Calloc(a1, 1, 80, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *(void *)(v5 + 64) = *(void *)(a2 + 56);
    *(_DWORD *)(v5 + 72) = 0;
    *a3 = v5;
  }
  return result;
}

uint64_t DctIt_RO_HasEnded(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (v1)
  {
    int v2 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v3 = (_DWORD *)(*v1 ? *v1 + 32 : v1[1] + 36);
      if (v2 != *v3) {
        break;
      }
      int v2 = 0;
      uint64_t v1 = (void *)v1[10];
      *(void *)(a1 + 64) = v1;
      *(_DWORD *)(a1 + 72) = 0;
      if (!v1) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    *(_DWORD *)(a1 + 40) = 1;
  }
  return 0;
}

uint64_t DctIt_RO_Increment(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 72) + 1;
  *(_DWORD *)(a1 + 72) = v1;
  int v2 = *(void **)(a1 + 64);
  do
  {
    if (*v2) {
      uint64_t v3 = (_DWORD *)(*v2 + 32);
    }
    else {
      uint64_t v3 = (_DWORD *)(v2[1] + 36);
    }
    if (v1 != *v3) {
      break;
    }
    int v1 = 0;
    int v2 = (void *)v2[10];
    *(void *)(a1 + 64) = v2;
    *(_DWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 48) = 1;
  }
  while (v2);
  return 0;
}

uint64_t DctIt_RO_Current(uint64_t a1)
{
  unsigned int v29 = 0;
  uint64_t v28 = *(void *)a1;
  int v2 = *(void **)(a1 + 64);
  uint64_t v3 = (_DWORD *)*v2;
  if (!*v2) {
    uint64_t v3 = (_DWORD *)v2[1];
  }
  int v26 = v3[3];
  int v27 = v3[2];
  int v4 = v3[4];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v9 = v2[8];
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  uint64_t v11 = *(unsigned int *)(v9 + 4 * v10);
  *(void *)(a1 + 16) = 0;
  int v12 = *(_DWORD *)(v9 + 4 * (v10 + 1));
  if (v12 >= 0) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = -v12;
  }
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v16 = v2[9];
    int v17 = (unsigned __int16 *)(((v16 + -(int)v11) & 1) + v16 + -(int)v11);
    unint64_t v18 = v16 + v13;
    unint64_t v19 = v17 + 1;
    if ((unint64_t)(v17 + 1) < v18)
    {
      LODWORD(v20) = 0;
      uint64_t v21 = 0;
      do
      {
        if (*(_DWORD *)(a1 + 56))
        {
          uint64_t v22 = OOCAllocator_Realloc(v28, v21, (unint64_t)(v20 + 1) << 6, &v29);
          *(void *)(a1 + 16) = v22;
          uint64_t v15 = v29;
          if (v29) {
            return v15;
          }
          uint64_t v21 = v22;
          uint64_t v20 = *(unsigned int *)(a1 + 24);
          uint64_t v23 = v22 + (v20 << 6);
          *(_DWORD *)uint64_t v23 = v27;
          *(_DWORD *)(v23 + 4) = v26;
          *(_DWORD *)(v23 + 8) = v4;
          *(void *)(v23 + 16) = v5;
          *(void *)(v23 + 24) = v6;
          *(void *)(v23 + 32) = v7;
          *(void *)(v23 + 40) = v8;
          uint64_t v24 = *v17;
          *(_DWORD *)(v23 + 56) = v24;
          *(void *)(v23 + 48) = v19;
        }
        else
        {
          uint64_t v24 = *v17;
        }
        int v17 = (unsigned __int16 *)((char *)v19 + v24 + (((unint64_t)v19 + v24) & 1));
        LODWORD(v20) = v20 + 1;
        *(_DWORD *)(a1 + 24) = v20;
        unint64_t v19 = v17 + 1;
      }
      while ((unint64_t)(v17 + 1) < v18);
    }
    goto LABEL_18;
  }
  if (!*(_DWORD *)(a1 + 56))
  {
LABEL_10:
    *(_DWORD *)(a1 + 24) = 1;
LABEL_18:
    *(void *)(a1 + 32) = v2[7] + *(unsigned int *)(v2[6] + 4 * *(unsigned int *)(a1 + 72));
    return v29;
  }
  uint64_t v14 = OOCAllocator_Malloc(v28, 64, &v29);
  *(void *)(a1 + 16) = v14;
  uint64_t v15 = v29;
  if (!v29)
  {
    *(_DWORD *)uint64_t v14 = v27;
    *(_DWORD *)(v14 + 4) = v26;
    *(_DWORD *)(v14 + 8) = v4;
    *(void *)(v14 + 16) = v5;
    *(void *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = v7;
    *(void *)(v14 + 40) = v8;
    *(void *)(v14 + 48) = v2[9] + v11;
    *(_DWORD *)(v14 + 56) = v13 - v11;
    goto LABEL_10;
  }
  return v15;
}

uint64_t DctIt_RO_FreeLastItem(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    OOCAllocator_Free(*a1, v1);
    a1[2] = 0;
  }
  return 0;
}

uint64_t DctIt_RO_Reset(uint64_t a1)
{
  *(void *)(a1 + 64) = *(void *)(*(void *)(a1 + 8) + 56);
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  return 0;
}

uint64_t DctIt_RW_Open(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v8 = 0;
  uint64_t v5 = OOCAllocator_Calloc(a1, 1, 144, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(v5 + 64) = v7;
    if (!v7 || (uint64_t result = DICTITT_Init(v5 + 72, (uint64_t *)(v7 + 56)), !result))
    {
      uint64_t result = 0;
      *a3 = v5;
    }
  }
  return result;
}

uint64_t DctIt_RW_Close(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return ARRAY_Flush(a1 + 96);
  }
  else {
    return 0;
  }
}

uint64_t DctIt_RW_Reset(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(void *)(a1 + 64) || (uint64_t result = ARRAY_Flush(a1 + 96), !result))
  {
    uint64_t v4 = *(void *)(v2 + 56);
    *(void *)(a1 + 64) = v4;
    if (v4)
    {
      uint64_t result = DICTITT_Init(a1 + 72, (uint64_t *)(v4 + 56));
      if (!result) {
        *(_DWORD *)(a1 + 48) = 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t DctIt_RW_HasEnded(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    while (!*(_DWORD *)(a1 + 80) && *(_DWORD *)(a1 + 136) == -1)
    {
      uint64_t result = ARRAY_Flush(a1 + 96);
      if (result) {
        return result;
      }
      uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 136);
      *(void *)(a1 + 64) = v3;
      if (!v3) {
        goto LABEL_8;
      }
      uint64_t result = DICTITT_Init(a1 + 72, (uint64_t *)(v3 + 56));
      if (result) {
        return result;
      }
    }
    return 0;
  }
  else
  {
LABEL_8:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 40) = 1;
  }
  return result;
}

uint64_t DctIt_RW_Increment(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 136) != -1 || (uint64_t result = BINTREEITT_Inc((unsigned int *)(a1 + 80)), !result))
  {
    for (; !*(_DWORD *)(a1 + 80); *(_DWORD *)(a1 + 48) = 1)
    {
      if (*(_DWORD *)(a1 + 136) != -1) {
        break;
      }
      uint64_t result = ARRAY_Flush(a1 + 96);
      if (result) {
        return result;
      }
      uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 136);
      *(void *)(a1 + 64) = v3;
      if (!v3) {
        break;
      }
      uint64_t result = DICTITT_Init(a1 + 72, (uint64_t *)(v3 + 56));
      if (result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t DctIt_RW_Current(uint64_t a1)
{
  unsigned int found = 0;
  __s[0] = 0;
  __s[1] = 0;
  uint64_t v11 = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (unsigned int *)(a1 + 72);
  *(_DWORD *)(a1 + 24) = 0;
  while (1)
  {
    DICTITT_Current(v2, (uint64_t)&v8);
    *(_OWORD *)char __s = v8;
    uint64_t v11 = v9;
    if (*(_DWORD *)(a1 + 56))
    {
      uint64_t v3 = OOCAllocator_Realloc(*(void *)a1, *(void *)(a1 + 16), (unint64_t)(*(_DWORD *)(a1 + 24) + 1) << 6, &found);
      *(void *)(a1 + 16) = v3;
      if (found) {
        break;
      }
      unsigned int found = edct_CopyFoundMatch(*(void *)a1, v3 + ((unint64_t)*(unsigned int *)(a1 + 24) << 6), *(void *)(a1 + 64), (uint64_t)__s);
      if (found) {
        break;
      }
    }
    ++*(_DWORD *)(a1 + 24);
    if (HIDWORD(v11) != 1)
    {
      if (*(_DWORD *)(a1 + 52))
      {
        uint64_t v4 = *(void *)a1;
        size_t v5 = cstdlib_strlen(__s[0]);
        uint64_t v6 = (char *)OOCAllocator_Malloc(v4, v5 + 1, &found);
        *(void *)(a1 + 32) = v6;
        if (!found) {
          cstdlib_strcpy(v6, __s[0]);
        }
      }
      return found;
    }
  }
  return found;
}

uint64_t DctIt_RW_FreeLastItem(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    OOCAllocator_Free(*(void *)a1, v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t result = edct_EntryFree_In_RWDCT(*(void *)a1, *(void *)(a1 + 8), v3, *(_DWORD *)(a1 + 24));
    if (result) {
      return result;
    }
    *(void *)(a1 + 16) = 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

double edct_DctItOpen(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (a2[11] != 1)
  {
    if (a2[8])
    {
      if (DctIt_RO_Open(a1, (uint64_t)a2, a3)) {
        return result;
      }
      uint64_t v7 = *a3;
      *(_DWORD *)(v7 + 40) = 0;
      if (DctIt_RO_HasEnded(v7)) {
        return result;
      }
    }
    else
    {
      ++a2[10];
      if (DctIt_RW_Open(a1, (uint64_t)a2, a3)) {
        return result;
      }
      uint64_t v8 = *a3;
      *(_DWORD *)(v8 + 40) = 0;
      if (DctIt_RW_HasEnded(v8)) {
        return result;
      }
    }
    *(void *)*a3 = a1;
    *(void *)(*a3 + 8) = a2;
    *(void *)(*a3 + 32) = 0;
    *(void *)(*a3 + 16) = 0;
    uint64_t v9 = *a3;
    *(_DWORD *)(v9 + 24) = 0;
    *(void *)&double result = 0x100000000;
    *(void *)(v9 + 44) = 0x100000000;
    return result;
  }

  err_GenerateErrorArg();
  return result;
}

uint64_t edct_DctItClose(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (*(_DWORD *)(v2 + 32))
  {
    uint64_t result = DctIt_RO_FreeLastItem(a1);
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  --*(_DWORD *)(v2 + 40);
  uint64_t result = DctIt_RW_FreeLastItem((uint64_t)a1);
  if (!result)
  {
    uint64_t result = DctIt_RW_Close((uint64_t)a1);
    if (!result)
    {
LABEL_6:
      OOCAllocator_Free(*a1, (uint64_t)a1);
      return 0;
    }
  }
  return result;
}

uint64_t edct_DctItReset(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 8) + 32))
  {
    uint64_t result = DctIt_RO_FreeLastItem((uint64_t *)a1);
    if (!result)
    {
      uint64_t result = DctIt_RO_Reset(a1);
      if (!result)
      {
        uint64_t result = DctIt_RO_HasEnded(a1);
        if (!result)
        {
LABEL_9:
          uint64_t result = 0;
          *(_DWORD *)(a1 + 40) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 24) = 0;
        }
      }
    }
  }
  else
  {
    uint64_t result = DctIt_RW_FreeLastItem(a1);
    if (!result)
    {
      uint64_t result = DctIt_RW_Reset(a1);
      if (!result)
      {
        uint64_t result = DctIt_RW_HasEnded(a1);
        if (!result) {
          goto LABEL_9;
        }
      }
    }
  }
  return result;
}

uint64_t edct_DctItHasEnded(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 40);
  return 0;
}

uint64_t edct_DctItCurrent(uint64_t a1, void *a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (a2) {
    *(_DWORD *)(a1 + 52) = 1;
  }
  if (a3) {
    *(_DWORD *)(a1 + 56) = 1;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    return err_GenerateErrorArg();
  }
  else
  {
    if (!*(_DWORD *)(a1 + 44))
    {
      if (*(_DWORD *)(*(void *)(a1 + 8) + 32))
      {
        uint64_t result = DctIt_RO_Current(a1);
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t result = DctIt_RW_Current(a1);
        if (result) {
          return result;
        }
      }
    }
    if (a2) {
      *a2 = *(void *)(a1 + 32);
    }
    if (a3) {
      *a3 = *(void *)(a1 + 16);
    }
    if (a4) {
      *a4 = *(_DWORD *)(a1 + 24);
    }
    if (a5) {
      *a5 = *(_DWORD *)(a1 + 48);
    }
    uint64_t result = 0;
    *(void *)(a1 + 44) = 1;
  }
  return result;
}

uint64_t edct_DctItIncrement(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 40))
  {
    if (*(_DWORD *)(*(void *)(a1 + 8) + 32))
    {
      uint64_t result = DctIt_RO_FreeLastItem((uint64_t *)a1);
      if (result) {
        return result;
      }
      uint64_t result = DctIt_RO_Increment(a1);
      if (result) {
        return result;
      }
      uint64_t result = DctIt_RO_HasEnded(a1);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = DctIt_RW_FreeLastItem(a1);
      if (result) {
        return result;
      }
      uint64_t result = DctIt_RW_Increment(a1);
      if (result) {
        return result;
      }
      uint64_t result = DctIt_RW_HasEnded(a1);
      if (result) {
        return result;
      }
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 44) = 0;
    return result;
  }

  return err_GenerateErrorArg();
}

uint64_t CDSObject_Con(void *a1, uint64_t a2, const void *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = CDSBase_Con(a1, a2, a3, a4, a5);
  if (!result)
  {
    *a1 = &__CDSObject;
    a1[19] = &unk_26D20F220;
    a1[20] = &unk_26D20F258;
    a1[21] = &unk_26D20F280;
    a1[22] = &unk_26D20F298;
    a1[3] = &unk_26D20F1D8;
    return __CDSObject_Init((uint64_t)a1, a2);
  }
  return result;
}

uint64_t __CDSObject_Init(uint64_t a1, uint64_t a2)
{
  unsigned int v7 = 0;
  *(_DWORD *)(a1 + 200) = 0;
  uint64_t v4 = (void *)OOCAllocator_Calloc(a2, 1, 40, &v7);
  *(void *)(a1 + 184) = v4;
  uint64_t v5 = v7;
  if (!v7)
  {
    *uint64_t v4 = a1 + 144;
    return PNEW_TranscriptionTokenizer_Con(a2, a2, (void *)(a1 + 192));
  }
  return v5;
}

uint64_t CDSObject_Con2(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CDSBase_Con2(a1, a2, a3);
  if (!result)
  {
    *a1 = &__CDSObject;
    a1[19] = &unk_26D20F220;
    a1[20] = &unk_26D20F258;
    a1[21] = &unk_26D20F280;
    a1[22] = &unk_26D20F298;
    a1[3] = &unk_26D20F1D8;
    return __CDSObject_Init((uint64_t)a1, a2);
  }
  return result;
}

uint64_t CDSObject_Des(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t result = OOC_PlacementDeleteObject(v2, a1[24]);
  if (!result)
  {
    uint64_t v4 = a1[23];
    if (v4) {
      OOCAllocator_Free(v2, v4);
    }
    return CDSBase_Des(a1);
  }
  return result;
}

uint64_t CDSObject_BorrowTranscriptionSpec(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 184);
  return 0;
}

uint64_t CDSObject_CastToIVoConObject(uint64_t a1)
{
  return a1 + 24;
}

uint64_t CDSObject_FetchInfo(uint64_t a1, uint64_t a2)
{
  unsigned int v7 = 0;
  uint64_t v4 = (void *)OOCAllocator_Calloc(*(void *)(a1 + 104), 1, 24, &v7);
  *(void *)a2 = v4;
  uint64_t v5 = v7;
  if (!v7)
  {
    *uint64_t v4 = a1 + 144;
    *(void *)(*(void *)a2 + 8) = CDSHash_GetNbrKeyEntries(a1);
    *(void *)(*(void *)a2 + 16) = CDSBase_GetNbrValueEntries(a1);
    return v7;
  }
  return v5;
}

uint64_t CDSObject_FetchKeys(uint64_t a1, uint64_t *a2, void *a3)
{
  unsigned int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v6 = *(void *)(a1 + 104);
  unsigned int NbrKeyEntries = CDSHash_GetNbrKeyEntries(a1);
  uint64_t v8 = NbrKeyEntries;
  *a3 = NbrKeyEntries;
  uint64_t v9 = 8 * NbrKeyEntries;
  unint64_t v10 = 0;
  if (NbrKeyEntries)
  {
    int v11 = 0;
    while (1)
    {
      uint64_t v12 = CDSHash_UnhashKey(a1) + 1;
      unsigned int v13 = (unsigned __int16 *)OOCAllocator_Calloc(v6, 2, v12, &v23);
      uint64_t result = v23;
      if (v23) {
        break;
      }
      CDSHash_UnhashKey(a1);
      CDSHash_DecodeKey(a1, v12, (uint64_t)v13);
      uint64_t v21 = v13;
      unint64_t v15 = utf16_utf8_byte_count(&v21);
      if (v15 == -1) {
        return err_GenerateErrorCharacter();
      }
      v9 += v15 + 1;
      if (v15 >= v10) {
        unint64_t v10 = v15 + 1;
      }
      OOCAllocator_Free(v6, (uint64_t)v13);
      if (v8 == ++v11) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v16 = OOCAllocator_Calloc(v6, 1, v9, &v23);
    *a2 = v16;
    uint64_t result = v23;
    if (!v23)
    {
      uint64_t v22 = v16 + 8 * v8;
      int v17 = (unsigned __int16 *)OOCAllocator_Calloc(v6, 2, v10, &v23);
      uint64_t result = v23;
      if (!v23)
      {
        if (v8)
        {
          uint64_t v18 = 0;
          uint64_t v19 = v16 + v9;
          while (1)
          {
            int v20 = CDSHash_UnhashKey(a1);
            CDSHash_DecodeKey(a1, v20 + 1, (uint64_t)v17);
            *(void *)(v16 + 8 * v18) = v22;
            uint64_t v21 = v17;
            if (utf16_to_utf8(&v21, &v17[v20 + 1], &v22, v19)) {
              return err_GenerateErrorCharacter();
            }
            if (v8 == ++v18) {
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          OOCAllocator_Free(v6, (uint64_t)v17);
          return v23;
        }
      }
    }
  }
  return result;
}

uint64_t CDSObject_FetchTranscriptionSpec(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 184);
  return 0;
}

uint64_t CDSObject_FetchTranscriptions(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v27 = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  char FieldSeparator = CDSBase_GetFieldSeparator(a1);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t result = utf8_str_to_utf16(v9, a2, &v30, &v29);
  if (!result)
  {
    unsigned int v28 = 0;
    uint64_t result = CDSBase_GetOutputString(a1, v30, 0, &v27, &v31, (int *)&v28, &v32);
    unsigned int v33 = result;
    if (!result)
    {
      OOCAllocator_Free(v9, v30);
      uint64_t v11 = v28;
      if (v28)
      {
        uint64_t v12 = v27;
        uint64_t v13 = OOCAllocator_Calloc(v9, v28, 24, &v33);
        uint64_t result = v33;
        if (v33) {
          return result;
        }
        unsigned int v25 = a4;
        unint64_t v26 = v11;
        unint64_t v14 = 0;
        unint64_t v15 = 0;
        unint64_t v16 = 0;
        unint64_t v17 = v31;
        do
        {
          if (v16 == v17 || FieldSeparator == *(char *)(v12 + v16))
          {
            uint64_t v19 = v16 - v15;
            if (v16 > v15)
            {
              if (v14 >= v26)
              {
                uint64_t result = err_GenerateErrorData();
                a4 = v25;
                uint64_t v11 = v26;
                if (result) {
                  return result;
                }
                goto LABEL_25;
              }
              *(_DWORD *)(v13 + 24 * v14) = CDSBase_GetTranscriptionType(a1);
              int v20 = (unsigned char *)(v12 + v15);
              if (*(_DWORD *)(a1 + 200))
              {
                BOOL v21 = *v20 == 35;
                if (*v20 == 35) {
                  uint64_t v22 = v20 + 1;
                }
                else {
                  uint64_t v22 = (unsigned char *)(v12 + v15);
                }
                *(void *)(v13 + 24 * v14 + 8) = v22;
                uint64_t v19 = v19 - v21 - (v20[v19 - v21] == 35);
                int v20 = v22;
              }
              else
              {
                *(void *)(v13 + 24 * v14 + 8) = v20;
              }
              v20[v19] = 0;
              *(void *)(v13 + 24 * v14++ + 16) = v19 + 1;
              unint64_t v17 = v31;
            }
            unint64_t v18 = v16 + 1;
            unint64_t v15 = v16 + 1;
          }
          else
          {
            unint64_t v18 = v16 + 1;
          }
          BOOL v23 = v16 >= v17;
          unint64_t v16 = v18;
        }
        while (!v23);
        uint64_t v11 = v26;
        if (v14 == v26) {
          uint64_t result = v33;
        }
        else {
          uint64_t result = err_GenerateErrorData();
        }
        a4 = v25;
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
LABEL_25:
      uint64_t result = TranscriptionTokenizer_FetchTranscriptions(*(void *)(a1 + 192), v13, v11, a3, a4);
      if (!result)
      {
        if (v13)
        {
          uint64_t v24 = *(void *)(a1 + 104);
          OOCAllocator_Free(v24, v27);
          OOCAllocator_Free(v24, v13);
        }
        return lhi_LogPhoneticTranscriptions(*(void *)(a1 + 40), (const char *)0x3E62B2CD, a2, *a3, *a4);
      }
    }
  }
  return result;
}

BOOL CDSObject_IsBufferTypeSupported(int a1)
{
  return a1 == 388438978;
}

uint64_t CDSObject_QueryInterface(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 > 1210932135)
  {
    if (a2 == 1210932136)
    {
      uint64_t v3 = a1 + 168;
      goto LABEL_11;
    }
    if (a2 == 3420193956)
    {
      uint64_t v3 = a1 + 176;
      goto LABEL_11;
    }
    return VoConObject_QueryInterface(a1, a2, a3);
  }
  if (a2 == 414531107)
  {
    uint64_t v3 = a1 + 160;
    goto LABEL_11;
  }
  if (a2 != 414531721) {
    return VoConObject_QueryInterface(a1, a2, a3);
  }
  uint64_t v3 = a1 + 152;
LABEL_11:
  *a3 = v3;
  return 0;
}

uint64_t CDSObject_ReturnInfo(uint64_t a1, uint64_t a2)
{
  if (a2) {
    OOCAllocator_Free(*(void *)(a1 + 104), a2);
  }
  return 0;
}

uint64_t CDSObject_ReturnKeys(uint64_t a1, uint64_t a2)
{
  if (a2) {
    OOCAllocator_Free(*(void *)(a1 + 104), a2);
  }
  return 0;
}

uint64_t CDSObject_ReturnTranscriptionSpec()
{
  return 0;
}

uint64_t CDSObject_ReturnTranscriptions(uint64_t a1, uint64_t a2)
{
  return TranscriptionTokenizer_ReturnTranscriptions(*(void *)(a1 + 192), a2);
}

uint64_t CDSObject_SetSilenceRemoveMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 200) = a2;
  return result;
}

uint64_t PNEW_CDSObject_Con(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, _DWORD *a5, void *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = (void *)OOCAllocator_Malloc(a1, 208, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = CDSObject_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      void v12[2] = a1;
      *a6 = v12;
    }
  }
  return result;
}

uint64_t PNEW_CDSObject_Con2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = (void *)OOCAllocator_Malloc(a1, 208, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = CDSObject_Con2(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      void v8[2] = a1;
      *a4 = v8;
    }
  }
  return result;
}

void *GetCDSObjectClass()
{
  return &__CDSObject;
}

uint64_t CDSStreamInfo_Con(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = StreamInfo_Con(a1, a2, a3);
  if (!result)
  {
    *a1 = &__CDSStreamInfo;
    a1[3] = &unk_26D20F2D8;
    a1[7] = &unk_26D20F320;
    a1[13] = &unk_26D20F458;
    a1[14] = 0;
  }
  return result;
}

uint64_t CDSStreamInfo_Des(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (!v2 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2), !result))
  {
    return StreamInfo_Des(a1);
  }
  return result;
}

uint64_t CDSStreamInfo_FetchValue(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t result = __CDSStreamInfo_BorrowCDSObject(a1, &v7);
  if (!result)
  {
    uint64_t v4 = *(void *)(v7 + 168);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))v4;
    uint64_t v6 = v7 + 168 - *(void *)(v4 + 16);
    return v5(v6, a2);
  }
  return result;
}

uint64_t __CDSStreamInfo_BorrowCDSObject(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3) {
    goto LABEL_2;
  }
  uint64_t v7 = 0;
  uint64_t result = _StreamInfo_BorrowBinBlockStreamReader(a1, &v7);
  if (!result)
  {
    uint64_t result = PNEW_CDSObject_Con2(*(void *)(a1 + 80), *(void *)(a1 + 80), v7, v4);
    if (!result)
    {
      uint64_t v3 = *v4;
LABEL_2:
      uint64_t result = 0;
      *a2 = v3;
    }
  }
  return result;
}

uint64_t CDSStreamInfo_GetVersion(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = _StreamInfo_BorrowBinBlockStreamReader(a1, &v8);
  if (!v5)
  {
    unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8 - *(void *)(*(void *)v8 + 224));
    *a2 = v6;
    *a3 = !BinBlockStreamReader_IsVersionAccepted(v6, 0x10000);
  }
  return v5;
}

uint64_t CDSStreamInfo_QueryInterface(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 != 1210932136) {
    return StreamInfo_QueryInterface(a1, a2, a3);
  }
  *a3 = a1 + 104;
  return 0;
}

uint64_t CDSStreamInfo_ReturnValue(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t result = __CDSStreamInfo_BorrowCDSObject(a1, &v7);
  if (!result)
  {
    uint64_t v4 = *(void *)(v7 + 168);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v6 = v7 + 168 - *(void *)(v4 + 16);
    return v5(v6, a2);
  }
  return result;
}

uint64_t _CDSStreamInfo_GetNbrSections(uint64_t a1, _WORD *a2)
{
  *a2 = 6;
  return 0;
}

uint64_t PNEW_CDSStreamInfo_Con(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = (void *)OOCAllocator_Malloc(a1, 120, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = StreamInfo_Con(v8, a2, a3);
    if (result)
    {
      unsigned int v10 = result;
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *uint64_t v8 = &__CDSStreamInfo;
      v8[7] = &unk_26D20F320;
      v8[13] = &unk_26D20F458;
      v8[14] = 0;
      void v8[2] = a1;
      v8[3] = &unk_26D20F2D8;
      *a4 = v8;
    }
  }
  return result;
}

void *GetCDSStreamInfoClass()
{
  return &__CDSStreamInfo;
}

uint64_t DictionaryStreamInfo_Con(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = StreamInfo_Con(a1, a2, a3);
  if (!result)
  {
    *a1 = &__DictionaryStreamInfo;
    a1[3] = &unk_26D20F4A0;
    a1[7] = &unk_26D20F4E8;
    a1[13] = &unk_26D20F620;
    a1[14] = 0;
  }
  return result;
}

uint64_t DictionaryStreamInfo_Des(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (!v2 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2), !result))
  {
    return StreamInfo_Des(a1);
  }
  return result;
}

uint64_t DictionaryStreamInfo_FetchValue(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t result = __DictionaryStreamInfo_BorrowDictionary(a1, &v7);
  if (!result)
  {
    uint64_t v4 = *(void *)(v7 + 104);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))v4;
    uint64_t v6 = v7 + 104 - *(void *)(v4 + 16);
    return v5(v6, a2);
  }
  return result;
}

uint64_t __DictionaryStreamInfo_BorrowDictionary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3) {
    goto LABEL_2;
  }
  uint64_t v7 = 0;
  uint64_t result = _StreamInfo_BorrowBinBlockStreamReader(a1, &v7);
  if (!result)
  {
    uint64_t result = PNEW_Dictionary_ConFromStreamReader(*(void *)(a1 + 80), *(void *)(a1 + 80), 0, v7, 1, v4);
    if (!result)
    {
      uint64_t v3 = *v4;
LABEL_2:
      uint64_t result = 0;
      *a2 = v3;
    }
  }
  return result;
}

uint64_t DictionaryStreamInfo_GetVersion(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = _StreamInfo_BorrowBinBlockStreamReader(a1, &v8);
  if (!v5)
  {
    unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8 - *(void *)(*(void *)v8 + 224));
    *a2 = v6;
    *a3 = !BinBlockStreamReader_IsVersionAccepted(v6, 0x10000);
  }
  return v5;
}

uint64_t DictionaryStreamInfo_QueryInterface(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 != 1210932136) {
    return StreamInfo_QueryInterface(a1, a2, a3);
  }
  *a3 = a1 + 104;
  return 0;
}

uint64_t DictionaryStreamInfo_ReturnValue(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t result = __DictionaryStreamInfo_BorrowDictionary(a1, &v7);
  if (!result)
  {
    uint64_t v4 = *(void *)(v7 + 104);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v6 = v7 + 104 - *(void *)(v4 + 16);
    return v5(v6, a2);
  }
  return result;
}

uint64_t _DictionaryStreamInfo_GetNbrSections(uint64_t a1, _WORD *a2)
{
  *a2 = 10;
  return 0;
}

uint64_t PNEW_DictionaryStreamInfo_Con(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = (void *)OOCAllocator_Malloc(a1, 120, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = StreamInfo_Con(v8, a2, a3);
    if (result)
    {
      unsigned int v10 = result;
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *uint64_t v8 = &__DictionaryStreamInfo;
      v8[7] = &unk_26D20F4E8;
      v8[13] = &unk_26D20F620;
      v8[14] = 0;
      void v8[2] = a1;
      v8[3] = &unk_26D20F4A0;
      *a4 = v8;
    }
  }
  return result;
}

void *GetDictionaryStreamInfoClass()
{
  return &__DictionaryStreamInfo;
}

uint64_t DctArchive(uint64_t a1, char *__b, int *a3, int a4)
{
  int v8 = *a3;
  if (__b) {
    cstdlib_memset(__b, 170, *a3);
  }
  v33[0] = 0;
  v33[1] = 0;
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  __dst = 0;
  uint64_t result = srvspi_MemblockInit((uint64_t)v33, v8, (uint64_t)__b);
  if (result) {
    return result;
  }
  if (a4)
  {
    uint64_t result = srvspi_MemblockAlign((int *)v33, 4u);
    if (result) {
      return result;
    }
    uint64_t result = srvspi_MemblockAlloc((unsigned int *)v33, 8, &__dst);
    if (result) {
      return result;
    }
    if (__dst) {
      cstdlib_memcpy(__dst, "_LHS", 4uLL);
    }
  }
  uint64_t result = srvspi_MemblockAlign((int *)v33, 4u);
  if (result) {
    return result;
  }
  uint64_t result = srvspi_MemblockAlloc((unsigned int *)v33, 24, &v32);
  if (result) {
    return result;
  }
  if (*(void *)a1)
  {
    int v10 = cstdlib_strlen(*(const char **)a1) + 1;
    HIDWORD(v30) = v10;
    uint64_t result = srvspi_MemblockAlign((int *)v33, 1u);
    if (result) {
      return result;
    }
    uint64_t result = srvspi_MemblockAlloc((unsigned int *)v33, v10, &v31);
    if (result) {
      return result;
    }
    uint64_t v11 = v31;
    if (v31)
    {
      uint64_t v12 = *(const char **)a1;
LABEL_21:
      cstdlib_strcpy(v11, v12);
    }
  }
  else
  {
    uint64_t result = srvspi_MemblockAlign((int *)v33, 1u);
    if (result) {
      return result;
    }
    uint64_t result = srvspi_MemblockAlloc((unsigned int *)v33, 1, &v31);
    if (result) {
      return result;
    }
    uint64_t v11 = v31;
    if (v31)
    {
      uint64_t v12 = (const char *)&g_pEmptyString;
      goto LABEL_21;
    }
  }
  uint64_t v13 = *(const char **)(a1 + 8);
  if (v13)
  {
    int v14 = cstdlib_strlen(v13);
    uint64_t result = srvspi_MemblockAlign((int *)v33, 1u);
    if (result) {
      return result;
    }
    uint64_t result = srvspi_MemblockAlloc((unsigned int *)v33, v14 + 1, &v31);
    if (result) {
      return result;
    }
    unint64_t v15 = v31;
    if (v31)
    {
      unint64_t v16 = *(const char **)(a1 + 8);
LABEL_31:
      cstdlib_strcpy(v15, v16);
    }
  }
  else
  {
    uint64_t result = srvspi_MemblockAlign((int *)v33, 1u);
    if (result) {
      return result;
    }
    uint64_t result = srvspi_MemblockAlloc((unsigned int *)v33, 1, &v31);
    if (result) {
      return result;
    }
    unint64_t v15 = v31;
    if (v31)
    {
      unint64_t v16 = (const char *)&g_pEmptyString;
      goto LABEL_31;
    }
  }
  int NbrSubDct = GetNbrSubDct(a1);
  HIDWORD(v30) = 4 * NbrSubDct;
  uint64_t result = srvspi_MemblockAlign((int *)v33, 4u);
  if (result) {
    return result;
  }
  uint64_t result = srvspi_MemblockAlloc((unsigned int *)v33, 4 * NbrSubDct, &v29);
  if (result) {
    return result;
  }
  int v27 = 0;
  uint64_t result = DctGetBufferType(a1, &v27);
  if (result) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t result = srvspi_MemblockGetUsed(v33, &v30);
  if (result) {
    return result;
  }
  if (!v18)
  {
LABEL_44:
    uint64_t result = srvspi_MemblockGetUsed(v33, (_DWORD *)&v30 + 1);
    if (result) {
      return result;
    }
    BOOL v21 = v32;
    if (v32)
    {
      uint64_t result = 0;
      *unsigned int v32 = v27;
      int v22 = HIDWORD(v30);
      *(void *)(v21 + 1) = HIDWORD(v30);
      *(void *)(v21 + 3) = *(void *)(a1 + 20);
      v21[5] = NbrSubDct;
      *a3 = v22;
      if (a4 != 1) {
        return result;
      }
      v21[1] = v22 - 8;
    }
    else
    {
      int v22 = HIDWORD(v30);
      *a3 = HIDWORD(v30);
      if (a4 != 1) {
        return 0;
      }
    }
    if (__b)
    {
      *((_DWORD *)__b + 1) = v22;
      uint64_t v23 = (v22 - 8);
      if (v23)
      {
        uint64_t v24 = &__b[v23 + 8];
        unsigned int v25 = __b + 8;
        char v26 = -21;
        do
        {
          uint64_t result = 0;
          *v25++ += v26;
          v26 += 111;
        }
        while (v25 < v24);
        return result;
      }
    }
    return 0;
  }
  int v19 = v27;
  while (1)
  {
    uint64_t result = srvspi_MemblockAlign((int *)v33, 4u);
    if (result) {
      return result;
    }
    uint64_t result = srvspi_MemblockGetUsed(v33, (_DWORD *)&v30 + 1);
    if (result) {
      return result;
    }
    int v20 = v29;
    if (v29)
    {
      *unint64_t v29 = HIDWORD(v30) - v30;
      unint64_t v29 = v20 + 1;
    }
    uint64_t result = SubDctArchive(v18, v19, (int *)v33);
    if (result) {
      return result;
    }
    uint64_t v18 = *(void *)(v18 + 136);
    if (!v18) {
      goto LABEL_44;
    }
  }
}

uint64_t DctGetBufferType(uint64_t a1, int *a2)
{
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    int v3 = 0;
    while (1)
    {
      if (*(void *)(v2 + 32))
      {
        if (!v3)
        {
          int v3 = 7;
LABEL_12:
          *a2 = v3;
          goto LABEL_13;
        }
        if (v3 != 7) {
          return err_GenerateErrorData();
        }
      }
      else
      {
        if (!v3)
        {
          int v3 = 6;
          goto LABEL_12;
        }
        if (v3 != 6) {
          return err_GenerateErrorData();
        }
      }
LABEL_13:
      uint64_t v2 = *(void *)(v2 + 136);
      if (!v2) {
        return 0;
      }
    }
  }
  *a2 = 6;
  return 0;
}

uint64_t SubDctArchive(uint64_t a1, int a2, int *a3)
{
  uint64_t v58 = 0;
  v59[0] = 0;
  int v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  uint64_t v52 = 0;
  long long v53 = 0;
  long long v50 = 0;
  uint64_t v51 = 0;
  uint64_t result = srvspi_MemblockGetUsed(a3, v59);
  if (!result)
  {
    if (a2 == 7)
    {
      HIDWORD(v59[0]) = 52;
      uint64_t result = srvspi_MemblockAlign(a3, 4u);
      if (result) {
        return result;
      }
      int v7 = HIDWORD(v59[0]);
      int v8 = &v57;
    }
    else
    {
      HIDWORD(v59[0]) = 48;
      uint64_t result = srvspi_MemblockAlign(a3, 4u);
      if (result) {
        return result;
      }
      int v7 = HIDWORD(v59[0]);
      int v8 = &v56;
    }
    uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, v7, v8);
    if (!result)
    {
      uint64_t v9 = *(const char **)(a1 + 24);
      if (v9)
      {
        __dst[0] = 0;
        HIDWORD(v59[0]) = cstdlib_strlen(v9) + 1;
        uint64_t result = srvspi_MemblockAlign(a3, 1u);
        if (result) {
          return result;
        }
        uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, SHIDWORD(v59[0]), __dst);
        if (result) {
          return result;
        }
        if (__dst[0]) {
          cstdlib_strcpy(__dst[0], *(const char **)(a1 + 24));
        }
        int v10 = 1;
      }
      else
      {
        int v10 = 0;
      }
      uint64_t v11 = *(const char **)(a1 + 32);
      if (v11)
      {
        __dst[0] = 0;
        HIDWORD(v59[0]) = cstdlib_strlen(v11) + 1;
        uint64_t result = srvspi_MemblockAlign(a3, 1u);
        if (result) {
          return result;
        }
        uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, SHIDWORD(v59[0]), __dst);
        if (result) {
          return result;
        }
        if (__dst[0]) {
          cstdlib_strcpy(__dst[0], *(const char **)(a1 + 32));
        }
        int v12 = 1;
        int v13 = 6;
      }
      else
      {
        int v12 = 0;
        int v13 = 7;
      }
      if (v13 == a2) {
        return err_GenerateErrorData();
      }
      if (*(void *)(a1 + 40))
      {
        __dst[0] = 0;
        HIDWORD(v59[0]) = 129;
        uint64_t result = srvspi_MemblockAlign(a3, 1u);
        if (result) {
          return result;
        }
        uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, SHIDWORD(v59[0]), __dst);
        if (result) {
          return result;
        }
        if (__dst[0]) {
          cstdlib_memcpy(__dst[0], *(const void **)(a1 + 40), 0x81uLL);
        }
        int v14 = 1;
      }
      else
      {
        int v14 = 0;
      }
      unint64_t v15 = *(const char **)(a1 + 48);
      if (v15)
      {
        __dst[0] = 0;
        HIDWORD(v59[0]) = cstdlib_strlen(v15) + 1;
        uint64_t result = srvspi_MemblockAlign(a3, 1u);
        if (result) {
          return result;
        }
        uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, SHIDWORD(v59[0]), __dst);
        if (result) {
          return result;
        }
        if (__dst[0]) {
          cstdlib_strcpy(__dst[0], *(const char **)(a1 + 48));
        }
        int v16 = 1;
      }
      else
      {
        int v16 = 0;
      }
      HIDWORD(v59[0]) = 4 * *(_DWORD *)a1 + 4;
      uint64_t result = srvspi_MemblockAlign(a3, 4u);
      if (!result)
      {
        uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, SHIDWORD(v59[0]), &v53);
        if (!result)
        {
          uint64_t result = srvspi_MemblockGetUsed(a3, (_DWORD *)&v58 + 1);
          if (!result)
          {
            uint64_t result = DICTITT_Init((uint64_t)v54, (uint64_t *)(a1 + 56));
            if (!result)
            {
              int v17 = 0;
              while (DWORD2(v54[0]) || v55 != -1)
              {
                do
                  DICTITT_Current((unsigned int *)v54, (uint64_t)__dst);
                while (v49 == 1);
                int v19 = cstdlib_strlen(__dst[0]);
                if (v55 == -1) {
                  uint64_t result = BINTREEITT_Inc((unsigned int *)v54 + 2);
                }
                else {
                  uint64_t result = 0;
                }
                v17 += v19 + 1;
                if (result) {
                  return result;
                }
              }
              uint64_t result = ARRAY_Flush((uint64_t)&v54[1] + 8);
              if (!result)
              {
                HIDWORD(v59[0]) = 1;
                uint64_t result = srvspi_MemblockAlign(a3, 1u);
                if (!result)
                {
                  uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, v17, &v50);
                  if (!result)
                  {
                    uint64_t result = srvspi_MemblockGetUsed(a3, (_DWORD *)v59 + 1);
                    if (!result)
                    {
                      int v45 = HIDWORD(v59[0]);
                      int v20 = HIDWORD(v58);
                      HIDWORD(v59[0]) = 4 * *(_DWORD *)a1 + 4;
                      uint64_t result = srvspi_MemblockAlign(a3, 4u);
                      if (!result)
                      {
                        uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, SHIDWORD(v59[0]), &v52);
                        if (!result)
                        {
                          uint64_t result = srvspi_MemblockGetUsed(a3, &v58);
                          if (!result)
                          {
                            uint64_t result = srvspi_MemblockAlign(a3, 1u);
                            if (!result)
                            {
                              uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, 1, &v51);
                              if (!result)
                              {
                                int v40 = v14;
                                int v41 = v16;
                                int v38 = v12;
                                int v39 = v10;
                                if (v51) {
                                  unsigned char *v51 = -86;
                                }
                                unsigned int v43 = v50;
                                uint64_t result = DICTITT_Init((uint64_t)v54, (uint64_t *)(a1 + 56));
                                if (!result)
                                {
                                  if (!DWORD2(v54[0]) && v55 == -1)
                                  {
LABEL_68:
                                    uint64_t result = ARRAY_Flush((uint64_t)&v54[1] + 8);
                                    if (!result)
                                    {
                                      uint64_t result = srvspi_MemblockGetUsed(a3, (_DWORD *)v59 + 1);
                                      if (!result)
                                      {
                                        if (v52) {
                                          _DWORD *v52 = HIDWORD(v59[0]) - v58;
                                        }
                                        int v21 = HIDWORD(v59[0]);
                                        int v22 = v58;
                                        if (v53 && v43 && v50) {
                                          *long long v53 = v43 - v50;
                                        }
                                        int v23 = v45 - v20;
                                        int v24 = v21 - v22;
                                        unsigned int v25 = v57;
                                        if (v57)
                                        {
                                          uint64_t result = 0;
                                          *uint64_t v57 = HIDWORD(v59[0]) - LODWORD(v59[0]);
                                          *((void *)v25 + 1) = *(void *)(a1 + 8);
                                          v25[4] = *(_DWORD *)(a1 + 16);
                                          _OWORD v25[5] = v39;
                                          v25[6] = v38;
                                          v25[7] = v40;
                                          v25[8] = v41;
                                          *(void *)(v25 + 9) = *(void *)a1;
                                          v25[11] = v23;
                                          v25[12] = v24;
                                        }
                                        else
                                        {
                                          unsigned int v25 = v56;
                                          if (!v56) {
                                            return 0;
                                          }
                                          uint64_t result = 0;
                                          *int v56 = HIDWORD(v59[0]) - LODWORD(v59[0]);
                                          *((void *)v25 + 1) = *(void *)(a1 + 8);
                                          v25[4] = *(_DWORD *)(a1 + 16);
                                          _OWORD v25[5] = v39;
                                          v25[6] = v40;
                                          v25[7] = v41;
                                          *((void *)v25 + 4) = *(void *)a1;
                                          v25[10] = v23;
                                          v25[11] = v24;
                                        }
                                        v25[1] = 0;
                                        return result;
                                      }
                                    }
                                    return result;
                                  }
                                  int v26 = 0;
                                  while (1)
                                  {
                                    unint64_t v46 = 0;
                                    DICTITT_Current((unsigned int *)v54, (uint64_t)__dst);
                                    uint64_t __src = __dst[1];
                                    int v27 = v48;
                                    int v44 = v49;
                                    if (!v26)
                                    {
                                      uint64_t v30 = __dst[0];
                                      unsigned int v31 = v53;
                                      unsigned int v32 = v50;
                                      if (v53) {
                                        BOOL v33 = v43 == 0;
                                      }
                                      else {
                                        BOOL v33 = 1;
                                      }
                                      if (!v33 && v50 != 0)
                                      {
                                        *long long v53 = v43 - v50;
                                        long long v53 = v31 + 1;
                                      }
                                      if (v32 && v43)
                                      {
                                        size_t v35 = cstdlib_strlen(v30) + 1;
                                        cstdlib_memcpy(v43, v30, v35);
                                        v43 += v35;
                                      }
                                      uint64_t result = srvspi_MemblockGetUsed(a3, (_DWORD *)v59 + 1);
                                      if (result) {
                                        return result;
                                      }
                                      unsigned int v36 = v52;
                                      if (v52)
                                      {
                                        if (v44 == 1)
                                        {
                                          _DWORD *v52 = v58 - HIDWORD(v59[0]);
                                          uint64_t v52 = v36 + 1;
                                          HIDWORD(v59[0]) = v27;
                                          int v28 = 1;
LABEL_84:
                                          __dst[0] = 0;
                                          uint64_t result = srvspi_MemblockAlign(a3, 2u);
                                          if (result) {
                                            return result;
                                          }
                                          uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, 2, __dst);
                                          if (result) {
                                            return result;
                                          }
                                          if (__dst[0]) {
                                            *(_WORD *)__dst[0] = WORD2(v59[0]);
                                          }
                                          char v29 = 0;
                                          goto LABEL_105;
                                        }
                                        _DWORD *v52 = HIDWORD(v59[0]) - v58;
                                        uint64_t v52 = v36 + 1;
                                      }
                                    }
                                    if (v44 == 1) {
                                      int v28 = 1;
                                    }
                                    else {
                                      int v28 = v26;
                                    }
                                    HIDWORD(v59[0]) = v27;
                                    if (v28) {
                                      goto LABEL_84;
                                    }
                                    char v29 = 1;
LABEL_105:
                                    uint64_t result = srvspi_MemblockAlign(a3, 1u);
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t result = srvspi_MemblockAlloc((unsigned int *)a3, SHIDWORD(v59[0]), &v46);
                                    if (result) {
                                      return result;
                                    }
                                    if (v46) {
                                      cstdlib_memcpy(v46, __src, HIDWORD(v59[0]));
                                    }
                                    if ((v29 & 1) == 0)
                                    {
                                      uint64_t result = srvspi_MemblockAlign(a3, 2u);
                                      if (result) {
                                        return result;
                                      }
                                    }
                                    if (v44) {
                                      int v26 = v28;
                                    }
                                    else {
                                      int v26 = 0;
                                    }
                                    int v37 = v55;
                                    if (v55 == -1)
                                    {
                                      uint64_t result = BINTREEITT_Inc((unsigned int *)v54 + 2);
                                      if (result) {
                                        return result;
                                      }
                                      int v37 = v55;
                                    }
                                    if (!DWORD2(v54[0]) && v37 == -1) {
                                      goto LABEL_68;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DctFromArchive(char **a1, uint64_t a2)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t __src = 0;
  char __s = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v16 = a2;
  uint64_t result = srvspi_MemblockInit((uint64_t)v15, *(_DWORD *)(a2 + 4), a2);
  if (!result)
  {
    uint64_t result = srvspi_MemblockAlign((int *)v15, 4u);
    if (!result)
    {
      uint64_t result = srvspi_MemblockRead(v15, 24, &v16);
      if (!result)
      {
        int v4 = *(_DWORD *)v16;
        if ((*(_DWORD *)v16 & 0xFFFFFE) != 6 || *(_DWORD *)(v16 + 8)) {
          return err_GenerateErrorData();
        }
        *(char **)((char *)a1 + 20) = *(char **)(v16 + 12);
        uint64_t result = srvspi_MemblockAlign((int *)v15, 1u);
        if (!result)
        {
          uint64_t result = srvspi_MemblockRead(v15, 0, &__s);
          if (!result)
          {
            size_t v5 = cstdlib_strlen(__s);
            uint64_t result = srvspi_MemblockRead(v15, v5 + 1, &__s);
            unsigned int v17 = result;
            if (!result)
            {
              if (v5)
              {
                uint64_t v6 = (char *)OOCAllocator_Malloc((uint64_t)a1[6], v5 + 1, &v17);
                *a1 = v6;
                uint64_t result = v17;
                if (v17) {
                  return result;
                }
                cstdlib_strcpy(v6, __s);
              }
              else
              {
                *a1 = 0;
              }
              uint64_t result = srvspi_MemblockAlign((int *)v15, 1u);
              unsigned int v17 = result;
              if (!result)
              {
                uint64_t result = srvspi_MemblockRead(v15, 0, &__src);
                unsigned int v17 = result;
                if (!result)
                {
                  size_t v7 = cstdlib_strlen(__src);
                  uint64_t result = srvspi_MemblockRead(v15, v7 + 1, &__src);
                  unsigned int v17 = result;
                  if (!result)
                  {
                    if (v7)
                    {
                      int v8 = (char *)OOCAllocator_Malloc((uint64_t)a1[6], v7 + 1, &v17);
                      a1[1] = v8;
                      uint64_t result = v17;
                      if (v17) {
                        return result;
                      }
                      cstdlib_strcpy(v8, __src);
                    }
                    else
                    {
                      a1[1] = 0;
                    }
                    uint64_t result = srvspi_MemblockAlign((int *)v15, 4u);
                    unsigned int v17 = result;
                    if (!result)
                    {
                      uint64_t result = srvspi_MemblockRead(v15, (4 * *(_DWORD *)(v16 + 20)), &v12);
                      unsigned int v17 = result;
                      if (!result)
                      {
                        uint64_t result = srvspi_MemblockAlign((int *)v15, 4u);
                        unsigned int v17 = result;
                        if (!result)
                        {
                          uint64_t result = srvspi_MemblockRead(v15, 0, &v11);
                          unsigned int v17 = result;
                          if (!result)
                          {
                            if (*(_DWORD *)(v16 + 20))
                            {
                              unsigned int v9 = 0;
                              do
                              {
                                uint64_t v10 = 0;
                                uint64_t result = CreateSubDct((uint64_t)a1, &v10);
                                unsigned int v17 = result;
                                if (result) {
                                  break;
                                }
                                uint64_t result = srvspi_MemblockAlign((int *)v15, 4u);
                                unsigned int v17 = result;
                                if (result) {
                                  break;
                                }
                                uint64_t result = SubDctFromArchive(v10, v4 & 0xFFFFFF, (int *)v15, (uint64_t)a1[6]);
                                unsigned int v17 = result;
                                if (result) {
                                  break;
                                }
                                v12 += 4;
                                ++v9;
                              }
                              while (v9 < *(_DWORD *)(v16 + 20));
                            }
                            else
                            {
                              return 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t SubDctFromArchive(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v44 = 0;
  int v45 = 0;
  int v39 = 0;
  uint64_t result = srvspi_MemblockAlign(a3, 4u);
  unsigned int v46 = result;
  if (!result)
  {
    int v43 = 0;
    int v41 = 0;
    int v42 = 0;
    uint64_t v40 = 0;
    if (a2 == 6)
    {
      uint64_t result = srvspi_MemblockRead(a3, 48, &v45);
      unsigned int v46 = result;
      if (result) {
        return result;
      }
      unsigned int v9 = 0;
      uint64_t v10 = v45;
    }
    else
    {
      uint64_t result = srvspi_MemblockRead(a3, 52, &v44);
      unsigned int v46 = result;
      if (result) {
        return result;
      }
      uint64_t v10 = 0;
      unsigned int v9 = v44;
    }
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v9;
    }
    int v12 = v11[1];
    *(_DWORD *)(a1 + 8) = v11[2];
    *(_DWORD *)(a1 + 16) = v11[4];
    *(_DWORD *)(a1 + 12) = v11[3];
    int v13 = v10 + 8;
    if (!v10) {
      int v13 = v9 + 9;
    }
    *(_DWORD *)a1 = *v13;
    int v14 = v10 + 9;
    if (!v10) {
      int v14 = v9 + 10;
    }
    *(_DWORD *)(a1 + 4) = *v14;
    *(void *)(a1 + 24) = 0;
    uint64_t result = srvspi_MemblockAlign(a3, 1u);
    unsigned int v46 = result;
    if (!result)
    {
      if (v10) {
        unint64_t v15 = v10;
      }
      else {
        unint64_t v15 = v9;
      }
      if (v15[5] == 1)
      {
        char __s = 0;
        uint64_t result = srvspi_MemblockRead(a3, 0, &__s);
        unsigned int v46 = result;
        if (result) {
          return result;
        }
        uint64_t v16 = cstdlib_strlen(__s) + 1;
        uint64_t result = srvspi_MemblockRead(a3, v16, &__s);
        unsigned int v46 = result;
        if (result) {
          return result;
        }
        unsigned int v17 = (char *)OOCAllocator_Malloc(a4, v16, &v46);
        *(void *)(a1 + 24) = v17;
        uint64_t result = v46;
        if (v46) {
          return result;
        }
        cstdlib_strcpy(v17, __s);
      }
      *(void *)(a1 + 32) = 0;
      uint64_t result = srvspi_MemblockAlign(a3, 1u);
      unsigned int v46 = result;
      if (result) {
        return result;
      }
      if (!v10 && v9[6] == 1)
      {
        char __s = 0;
        uint64_t result = srvspi_MemblockRead(a3, 0, &__s);
        unsigned int v46 = result;
        if (result) {
          return result;
        }
        uint64_t v18 = cstdlib_strlen(__s) + 1;
        uint64_t result = srvspi_MemblockRead(a3, v18, &__s);
        unsigned int v46 = result;
        if (result) {
          return result;
        }
        int v19 = (char *)OOCAllocator_Malloc(a4, v18, &v46);
        *(void *)(a1 + 32) = v19;
        uint64_t result = v46;
        if (v46) {
          return result;
        }
        cstdlib_strcpy(v19, __s);
      }
      *(void *)(a1 + 40) = 0;
      uint64_t result = srvspi_MemblockAlign(a3, 1u);
      unsigned int v46 = result;
      if (result) {
        return result;
      }
      int v20 = v10 + 6;
      if (!v10) {
        int v20 = v9 + 7;
      }
      if (*v20 == 1)
      {
        char __s = 0;
        uint64_t result = srvspi_MemblockRead(a3, 0, &__s);
        unsigned int v46 = result;
        if (result) {
          return result;
        }
        uint64_t result = srvspi_MemblockRead(a3, 129, &__s);
        unsigned int v46 = result;
        if (result) {
          return result;
        }
        int v21 = (void *)OOCAllocator_Malloc(a4, 129, &v46);
        *(void *)(a1 + 40) = v21;
        uint64_t result = v46;
        if (v46) {
          return result;
        }
        cstdlib_memcpy(v21, __s, 0x80uLL);
        *(unsigned char *)(*(void *)(a1 + 40) + 128) = 0;
      }
      *(void *)(a1 + 48) = 0;
      unsigned int v46 = srvspi_MemblockAlign(a3, 1u);
      if (v10)
      {
        if (!v10[7]) {
          goto LABEL_47;
        }
      }
      else if (!v9[8])
      {
LABEL_47:
        uint64_t result = DICT_Init(a1 + 56, a4, 10000, 50000);
        unsigned int v46 = result;
        if (!result)
        {
          uint64_t result = srvspi_MemblockAlign(a3, 4u);
          unsigned int v46 = result;
          if (!result)
          {
            uint64_t result = srvspi_MemblockRead(a3, (4 * *(_DWORD *)a1 + 4), &v42);
            unsigned int v46 = result;
            if (!result)
            {
              unsigned int v24 = v12 ? 2 : 1;
              uint64_t result = srvspi_MemblockAlign(a3, v24);
              unsigned int v46 = result;
              if (!result)
              {
                unsigned int v25 = v10 + 10;
                if (!v10) {
                  unsigned int v25 = v9 + 11;
                }
                uint64_t result = srvspi_MemblockRead(a3, *v25, &v40);
                unsigned int v46 = result;
                if (!result)
                {
                  uint64_t result = srvspi_MemblockAlign(a3, 4u);
                  unsigned int v46 = result;
                  if (!result)
                  {
                    uint64_t result = srvspi_MemblockRead(a3, (4 * *(_DWORD *)a1 + 4), &v41);
                    unsigned int v46 = result;
                    if (!result)
                    {
                      uint64_t result = srvspi_MemblockGetUsed(a3, &v43);
                      unsigned int v46 = result;
                      if (!result)
                      {
                        uint64_t result = srvspi_MemblockAlign(a3, 1u);
                        unsigned int v46 = result;
                        if (!result)
                        {
                          uint64_t result = srvspi_MemblockRead(a3, 1, 0);
                          unsigned int v46 = result;
                          if (!result)
                          {
                            if (*(_DWORD *)a1)
                            {
                              int v26 = v12;
                              for (unsigned int i = 0; i < *(_DWORD *)a1; ++i)
                              {
                                char __s = 0;
                                int v37 = -1;
                                if (v26)
                                {
                                  unsigned int v36 = 0;
                                  uint64_t result = utf16_str_to_utf8(a4, (unsigned __int16 *)(v40 + *v42), (uint64_t *)&v39, (unint64_t *)&v36);
                                  unsigned int v46 = result;
                                  if (result) {
                                    return result;
                                  }
                                }
                                else
                                {
                                  int v28 = v39;
                                  size_t v29 = cstdlib_strlen((const char *)(v40 + *v42));
                                  uint64_t v30 = (char *)OOCAllocator_Realloc(a4, (uint64_t)v28, v29 + 1, &v46);
                                  int v39 = v30;
                                  uint64_t result = v46;
                                  if (v46) {
                                    return result;
                                  }
                                  cstdlib_strcpy(v30, (const char *)(v40 + *v42));
                                }
                                int v31 = v41[1];
                                if (v31 >= 0) {
                                  unsigned int v32 = v41[1];
                                }
                                else {
                                  unsigned int v32 = -v31;
                                }
                                if ((*v41 & 0x80000000) != 0)
                                {
                                  int v35 = 0;
                                  int v35 = -*v41;
                                  uint64_t result = srvspi_MemblockAlign(a3, 2u);
                                  unsigned int v46 = result;
                                  if (result) {
                                    return result;
                                  }
                                  unsigned int v34 = v35;
                                  while (v34 < v32)
                                  {
                                    unsigned int v36 = 0;
                                    uint64_t result = srvspi_MemblockRead(a3, 2, &v36);
                                    unsigned int v46 = result;
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t result = srvspi_MemblockAlign(a3, 1u);
                                    unsigned int v46 = result;
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t result = srvspi_MemblockRead(a3, *v36, &__s);
                                    unsigned int v46 = result;
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t result = DICT_Add(a1 + 56, v39, __s, *v36, &v37);
                                    unsigned int v46 = result;
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t result = srvspi_MemblockAlign(a3, 2u);
                                    unsigned int v46 = result;
                                    if (result) {
                                      return result;
                                    }
                                    uint64_t result = srvspi_MemblockGetUsed(a3, &v35);
                                    unsigned int v46 = result;
                                    if (result) {
                                      return result;
                                    }
                                    unsigned int v34 = v35 - v43;
                                    v35 -= v43;
                                  }
                                }
                                else
                                {
                                  LODWORD(v36) = 0;
                                  uint64_t result = srvspi_MemblockAlign(a3, 1u);
                                  unsigned int v46 = result;
                                  if (result) {
                                    return result;
                                  }
                                  uint64_t result = srvspi_MemblockGetUsed(a3, &v36);
                                  unsigned int v46 = result;
                                  if (result) {
                                    return result;
                                  }
                                  LODWORD(v36) = v36 - v43;
                                  uint64_t v33 = v32 - v36;
                                  uint64_t result = srvspi_MemblockRead(a3, v33, &__s);
                                  unsigned int v46 = result;
                                  if (result) {
                                    return result;
                                  }
                                  uint64_t result = DICT_Add(a1 + 56, v39, __s, v33, &v37);
                                  unsigned int v46 = result;
                                  if (result) {
                                    return result;
                                  }
                                }
                                ++v41;
                                ++v42;
                              }
                            }
                            OOCAllocator_Free(a4, (uint64_t)v39);
                            return v46;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result;
      }
      char __s = 0;
      uint64_t result = srvspi_MemblockRead(a3, 0, &__s);
      unsigned int v46 = result;
      if (result) {
        return result;
      }
      uint64_t v22 = cstdlib_strlen(__s) + 1;
      uint64_t result = srvspi_MemblockRead(a3, v22, &__s);
      unsigned int v46 = result;
      if (result) {
        return result;
      }
      int v23 = (char *)OOCAllocator_Malloc(a4, v22, &v46);
      *(void *)(a1 + 48) = v23;
      uint64_t result = v46;
      if (v46) {
        return result;
      }
      cstdlib_strcpy(v23, __s);
      goto LABEL_47;
    }
  }
  return result;
}

uint64_t DctDecryptArchive(const void **a1, int *a2)
{
  int v4 = cstdlib_memcmp(*a1, "_LHS", 4uLL);
  size_t v5 = *a1;
  if (!v4)
  {
    uint64_t v7 = (uint64_t)(v5 + 2);
    if (v5[1] != 8)
    {
      unint64_t v8 = v7 + (v5[1] - 8);
      char v9 = -21;
      uint64_t v10 = v5 + 2;
      do
      {
        *v10++ -= v9;
        v9 += 111;
      }
      while ((unint64_t)v10 < v8);
      size_t v5 = *a1;
    }
    cstdlib_memcpy(v5, "-LHS", 4uLL);
    goto LABEL_10;
  }
  if (!cstdlib_memcmp(v5, "-LHS", 4uLL))
  {
    uint64_t v7 = (uint64_t)*a1 + 8;
LABEL_10:
    *a1 = (const void *)v7;
    int v6 = 1;
    goto LABEL_11;
  }
  int v6 = 0;
LABEL_11:
  *a2 = v6;
  return 0;
}

uint64_t _DTQuestion_Con(void *a1, uint64_t a2)
{
  *a1 = &__DTQuestion;
  a1[1] = a2;
  return 0;
}

void *GetDTQuestionClass()
{
  return &__DTQuestion;
}

uint64_t DTHypothesisList_Con(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = PtrList_Con((uint64_t)a1, a2, 1u, 1);
  if (!result)
  {
    *a1 = &__DTHypothesisList;
    a1[5] = a3;
  }
  return result;
}

uint64_t PNEW_DTHypothesisList_Con(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v10 = 0;
  unint64_t v8 = (void *)OOCAllocator_Malloc(a1, 48, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = PtrList_Con((uint64_t)v8, a2, 1u, 1);
    if (result)
    {
      unsigned int v10 = result;
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *unint64_t v8 = &__DTHypothesisList;
      v8[5] = a3;
      *a4 = v8;
    }
  }
  return result;
}

void *GetDTHypothesisListClass()
{
  return &__DTHypothesisList;
}

uint64_t DTGraphemeBuffer_Con(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)a1 = &__DTGraphemeBuffer;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 40) = 0;
    return _DTGraphemeBuffer_CreateGPTable(a1);
  }
  return result;
}

uint64_t _DTGraphemeBuffer_CreateGPTable(uint64_t a1)
{
  unsigned int v22 = 0;
  uint64_t v2 = (void *)OOCAllocator_Realloc(*(void *)(a1 + 8), *(void *)(a1 + 24), 8 * *(unsigned __int16 *)(*(void *)(a1 + 16) + 4) + 8, &v22);
  *(void *)(a1 + 24) = v2;
  uint64_t v3 = v22;
  if (!v22)
  {
    int v4 = *(_DWORD **)(a1 + 16);
    unsigned int v6 = *v4;
    size_t v5 = (char *)v4 + 6;
    unint64_t v7 = *(void *)(a1 + 16) + v6;
    *uint64_t v2 = v5;
    uint64_t v8 = 1;
    *(unsigned char *)(a1 + 40) = 1;
    if (*(unsigned __int16 *)(*(void *)(a1 + 16) + 4) >= 2u)
    {
      uint64_t v8 = 1;
      unsigned __int8 v9 = 1;
      int v10 = 1;
      while (!*v5)
      {
LABEL_7:
        *(void *)(*(void *)(a1 + 24) + 8 * v8) = ++v5;
        if (**(unsigned __int8 **)(*(void *)(a1 + 24) + 8 * v8) != **(unsigned __int8 **)(*(void *)(a1 + 24)
                                                                                           + 8 * v8
                                                                                           - 8))
          *(unsigned char *)(a1 + 40) = ++v9;
        uint64_t v8 = ++v10;
        if (*(unsigned __int16 *)(*(void *)(a1 + 16) + 4) <= v10) {
          goto LABEL_12;
        }
      }
      while ((unint64_t)v5 < v7)
      {
        if (!*++v5) {
          goto LABEL_7;
        }
      }
      return err_GenerateErrorData();
    }
    unsigned __int8 v9 = 1;
LABEL_12:
    if (*v5)
    {
      while ((unint64_t)v5 < v7)
      {
        if (!*++v5) {
          goto LABEL_15;
        }
      }
      return err_GenerateErrorData();
    }
LABEL_15:
    *(void *)(*(void *)(a1 + 24) + 8 * v8) = v5 + 1;
    uint64_t v13 = OOCAllocator_Realloc(*(void *)(a1 + 8), *(void *)(a1 + 32), 16 * v9, &v22);
    *(void *)(a1 + 32) = v13;
    uint64_t v3 = v22;
    if (v22)
    {
      *(unsigned char *)(a1 + 40) = 0;
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 16);
      unint64_t v15 = *(void **)(a1 + 24);
      *(void *)uint64_t v13 = *v15;
      *(unsigned char *)(v13 + 8) = 0;
      unsigned int v17 = *(unsigned __int16 *)(v16 + 4);
      if (v17 >= 2)
      {
        unsigned __int8 v18 = 0;
        for (unsigned __int8 i = 1; i < v17; ++i)
        {
          int v20 = (unsigned __int8 *)v15[i];
          if (*v20 != **(unsigned __int8 **)(v13 + 16 * v18))
          {
            uint64_t v21 = v13 + 16 * ++v18;
            *(void *)uint64_t v21 = v20;
            *(unsigned char *)(v21 + 8) = i;
          }
        }
      }
      lhstdlib_qsort(v13, *(unsigned __int8 *)(a1 + 40), 0x10u, (uint64_t (*)(unsigned char *, unsigned char *))__DTGraphemeBuffer_Compare);
      return v22;
    }
  }
  return v3;
}

uint64_t DTGraphemeBuffer_Des(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    OOCAllocator_Free(*(void *)(a1 + 8), v2);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    OOCAllocator_Free(*(void *)(a1 + 8), v3);
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 0;
  }

  return Object_Des();
}

uint64_t DTGraphemeBuffer_FirstGraphemeID(uint64_t a1, uint64_t a2)
{
  int v4 = -1;
  v5[0] = a2;
  v5[1] = 0;
  unint64_t v2 = lhstdlib_bsearch((uint64_t)v5, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 0x10uLL, (uint64_t (*)(uint64_t, unint64_t))__DTGraphemeBuffer_Compare, &v4);
  if (v2) {
    return *(unsigned __int8 *)(v2 + 8);
  }
  else {
    return 255;
  }
}

uint64_t __DTGraphemeBuffer_Compare(char **a1, char **a2)
{
  int v2 = **a1;
  int v3 = **a2;
  BOOL v4 = v2 < v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5;
  }
}

uint64_t PNEW_DTGraphemeBuffer_Con(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = OOCAllocator_Malloc(a1, 48, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = DTGraphemeBuffer_Con(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetDTGraphemeBufferClass()
{
  return &__DTGraphemeBuffer;
}

uint64_t DTQuestionGPBin_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionGPBin;
  }
  return result;
}

uint64_t DTQuestionGPBin_IsTrue(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(char *)(v4 + 1) + a2;
  if (v5 < 0) {
    return 0;
  }
  uint64_t result = 0;
  if (a3 && v5 < a4)
  {
    int v7 = *(unsigned __int8 *)(v4 + 2);
    if (*(unsigned char *)(v4 + 2))
    {
      int v8 = 0;
      unsigned int v9 = *(unsigned __int8 *)(a3 + v5);
      uint64_t v10 = v4 + 3;
      int v11 = v7 - 1;
      while (1)
      {
        int v12 = (v11 + v8) >> 1;
        unsigned int v13 = *(unsigned __int8 *)(v10 + v12);
        if (v9 >= v13)
        {
          if (v9 <= v13) {
            return 1;
          }
          int v8 = v12 + 1;
        }
        else
        {
          int v11 = v12 - 1;
        }
        if (v8 > v11) {
          return 0;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t PNEW_DTQuestionGPBin_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  unsigned int v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *unsigned int v6 = &__DTQuestionGPBin;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionGPBinClass()
{
  return &__DTQuestionGPBin;
}

uint64_t DTQuestionPP_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionPP;
  }
  return result;
}

uint64_t DTQuestionPP_IsTrue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(char *)(v6 + 1);
  unsigned int v8 = v7 + a6;
  if (v7 + a6 < 0) {
    return 0;
  }
  uint64_t result = 0;
  if (!a5 || (v7 & 0x80000000) == 0) {
    return result;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 2);
  if (!*(unsigned char *)(v6 + 2)) {
    return 0;
  }
  int v11 = *(unsigned __int16 *)(a5 + 2 * v8);
  int v12 = (unsigned __int16 *)(v6 + 3);
  while (1)
  {
    int v13 = *v12++;
    if (v13 == v11) {
      break;
    }
    if (!--v10) {
      return 0;
    }
  }
  return 1;
}

uint64_t PNEW_DTQuestionPP_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *uint64_t v6 = &__DTQuestionPP;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionPPClass()
{
  return &__DTQuestionPP;
}

uint64_t DTQuestionSG_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionSG;
  }
  return result;
}

BOOL DTQuestionSG_IsTrue(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL result = 0;
  int v6 = *(char *)(v4 + 1) + a2;
  if (v6 >= 0 && a3 && v6 < a4) {
    return *(unsigned __int8 *)(a3 + v6) == *(unsigned __int8 *)(v4 + 2);
  }
  return result;
}

uint64_t PNEW_DTQuestionSG_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  int v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *int v6 = &__DTQuestionSG;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionSGClass()
{
  return &__DTQuestionSG;
}

uint64_t DTNodeBuffer_Con(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = a2 + 4;
  return 0;
}

uint64_t PNEW_DTNodeBuffer_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  int v5 = (void *)OOCAllocator_Malloc(a1, 16, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *int v5 = a2;
    v5[1] = a2 + 4;
    *a3 = v5;
  }
  return result;
}

uint64_t PDELETE_DTNodeBuffer(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t DTQuestionGP_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionGP;
  }
  return result;
}

uint64_t DTQuestionGP_IsTrue(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(char *)(v4 + 1) + a2;
  if (v5 < 0) {
    return 0;
  }
  uint64_t result = 0;
  if (!a3 || v5 >= a4) {
    return result;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 2);
  if (!*(unsigned char *)(v4 + 2)) {
    return 0;
  }
  int v8 = *(unsigned __int8 *)(a3 + v5);
  unsigned int v9 = (unsigned __int8 *)(v4 + 3);
  while (1)
  {
    int v10 = *v9++;
    if (v10 == v8) {
      break;
    }
    if (!--v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t PNEW_DTQuestionGP_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  int v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *int v6 = &__DTQuestionGP;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionGPClass()
{
  return &__DTQuestionGP;
}

uint64_t addExpScore(int a1, int a2)
{
  __int16 v2 = a1 - a2;
  int v3 = (a1 - a2) << 16;
  if (((a1 - a2) & 0x8000) != 0) {
    int v4 = a1;
  }
  else {
    int v4 = a2;
  }
  if ((((_WORD)a1 - (_WORD)a2) & 0x8000) != 0) {
    __int16 v2 = a2 - a1;
  }
  BOOL v5 = v3 <= 16646144;
  if (v3 <= 16646144) {
    int v6 = v4;
  }
  else {
    int v6 = a2;
  }
  if (!v5) {
    __int16 v2 = 254;
  }
  return (v6 + sc_logAddTable[v2]);
}

uint64_t DTPhonemeBuffer_Con(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = a2 + 2;
  return 0;
}

uint64_t PNEW_DTPhonemeBuffer_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  BOOL v5 = (void *)OOCAllocator_Malloc(a1, 16, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *BOOL v5 = a2;
    v5[1] = a2 + 2;
    *a3 = v5;
  }
  return result;
}

uint64_t PDELETE_DTPhonemeBuffer(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t DTNode_Con(void *a1, uint64_t a2)
{
  *a1 = a2;
  return 0;
}

uint64_t PNEW_DTNode_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  BOOL v5 = (void *)OOCAllocator_Malloc(a1, 8, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *BOOL v5 = a2;
    *a3 = v5;
  }
  return result;
}

uint64_t PDELETE_DTNode(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t DTTree_Con(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = (uint64_t)&__DTTree;
    a1[1] = a2;
    uint64_t result = PNEW_DTBuffer_Con(a2, a3, a1 + 2);
    if (!result)
    {
      uint64_t result = PNEW_DTNodeBuffer_Con(a2, *(void *)a1[2] + *(unsigned int *)(*(void *)a1[2] + 32), a1 + 3);
      if (!result)
      {
        uint64_t result = PNEW_DTLeafBuffer_Con(a2, *(void *)a1[2] + *(unsigned int *)(*(void *)a1[2] + 36), a1 + 4);
        if (!result)
        {
          uint64_t result = PNEW_DTPPBuffer_Con(a2, *(void *)a1[2] + *(unsigned int *)(*(void *)a1[2] + 44), a1 + 5);
          if (!result)
          {
            uint64_t result = PNEW_DTPhonemeBuffer_Con(a2, *(void *)a1[2] + *(unsigned int *)(*(void *)a1[2] + 48), a1 + 6);
            if (!result)
            {
              uint64_t result = PNEW_DTGraphemeBuffer_Con(a2, a2, *(void *)a1[2] + *(unsigned int *)(*(void *)a1[2] + 40), a1 + 7);
              if (!result)
              {
                uint64_t result = PNEW_DTQuestionBuffer_Con(a2, a2, *(void *)a1[2] + *(unsigned int *)(*(void *)a1[2] + 52), a1 + 8);
                if (!result)
                {
                  uint64_t v7 = *(void *)a1[2];
                  a1[9] = v7 + *(unsigned int *)(v7 + 28);
                  uint64_t v8 = *(unsigned int *)(v7 + 56);
                  if (v8)
                  {
                    uint64_t result = PNEW_DTGraphemeFallback_Con(a2, v7 + v8, a1 + 10);
                    if (result) {
                      return result;
                    }
                  }
                  else
                  {
                    a1[10] = 0;
                  }
                  uint64_t result = PNEW_DTNode_Con(a2, 0, a1 + 11);
                  if (!result)
                  {
                    a1[12] = 0;
                    return _DTTree_CreateStartNodeIdTable(a1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _DTTree_CreateStartNodeIdTable(uint64_t *a1)
{
  unsigned int v16 = 0;
  uint64_t v2 = *(unsigned __int16 *)(*(void *)(a1[7] + 16) + 4);
  uint64_t v3 = OOCAllocator_Realloc(a1[1], a1[12], 2 * v2, &v16);
  a1[12] = v3;
  uint64_t v4 = v16;
  if (!v16)
  {
    unsigned __int8 v15 = 0;
    if (v2)
    {
      unsigned __int8 v5 = 0;
      uint64_t v6 = a1[3];
      uint64_t v7 = a1[11];
      do
      {
        *(_WORD *)(v3 + 2 * v5) = 0;
        uint64_t v8 = *(unsigned __int16 **)(v6 + 8);
        *(void *)uint64_t v7 = v8;
        uint64_t v9 = *v8;
        if (v9 != 0xFFFF)
        {
          for (uint64_t i = a1[8]; *(unsigned char *)(*(void *)(i + 32) + v9) == 4; uint64_t i = a1[8])
          {
            uint64_t v11 = DTQuestionBuffer_BorrowQuestion(i, (unsigned __int16)v9);
            if ((*(unsigned int (**)(uint64_t, void, unsigned __int8 *, uint64_t, void, void))(*(void *)v11 + 24))(v11, 0, &v15, 1, 0, 0))
            {
              uint64_t v7 = a1[11];
              uint64_t v3 = a1[12];
              unsigned __int16 v12 = *(_WORD *)(*(void *)v7 + 2);
              unsigned __int8 v5 = v15;
            }
            else
            {
              unsigned __int8 v5 = v15;
              uint64_t v7 = a1[11];
              uint64_t v3 = a1[12];
              unsigned __int16 v12 = *(_WORD *)(v3 + 2 * v15) + 1;
            }
            *(_WORD *)(v3 + 2 * v15) = v12;
            uint64_t v6 = a1[3];
            uint64_t v13 = *(void *)(v6 + 8);
            *(void *)uint64_t v7 = v13 + 4 * v12;
            uint64_t v9 = *(unsigned __int16 *)(v13 + 4 * v12);
            if (v9 == 0xFFFF) {
              break;
            }
          }
        }
        unsigned __int8 v15 = ++v5;
      }
      while (v2 > v5);
      return v16;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t DTTree_Des(uint64_t *a1)
{
  uint64_t result = OOC_PlacementDeleteObject(a1[1], a1[8]);
  if (!result)
  {
    uint64_t result = OOC_PlacementDeleteObject(a1[1], a1[7]);
    if (!result)
    {
      uint64_t result = PDELETE_DTPhonemeBuffer(a1[1], a1[6]);
      if (!result)
      {
        uint64_t result = PDELETE_DTPPBuffer(a1[1], a1[5]);
        if (!result)
        {
          uint64_t result = PDELETE_DTLeafBuffer(a1[1], a1[4]);
          if (!result)
          {
            uint64_t result = PDELETE_DTNodeBuffer(a1[1], a1[3]);
            if (!result)
            {
              uint64_t result = PDELETE_DTBuffer(a1[1], a1[2]);
              if (!result)
              {
                uint64_t result = PDELETE_DTNode(a1[1], a1[11]);
                if (!result)
                {
                  uint64_t v3 = a1[10];
                  if (!v3 || (uint64_t result = PDELETE_DTGraphemeFallback(a1[1], v3), !result))
                  {
                    uint64_t v4 = a1[12];
                    if (v4) {
                      OOCAllocator_Free(a1[1], v4);
                    }
                    return Object_Des();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t DTTree_Traverse(uint64_t a1, uint64_t a2, unsigned char *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v14 = *(unsigned __int16 *)(*(void *)(a1 + 96) + 2 * a3[a2]);
  unsigned __int8 v15 = (unsigned __int16 *)(*(void *)(*(void *)(a1 + 24) + 8) + 4 * v14);
  **(void **)(a1 + 88) = v15;
  int v16 = *v15;
  if (v16 != 0xFFFF)
  {
    do
    {
      uint64_t v17 = DTQuestionBuffer_BorrowQuestion(*(void *)(a1 + 64), (unsigned __int16)v16);
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned char *, size_t, uint64_t, uint64_t))(*(void *)v17 + 24))(v17, a2, a3, a4, a5, a6))
      {
        uint64_t v18 = *(void *)(a1 + 88);
        LOWORD(v14) = *(_WORD *)(*(void *)v18 + 2);
      }
      else
      {
        LOWORD(v14) = v14 + 1;
        uint64_t v18 = *(void *)(a1 + 88);
      }
      uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 8);
      uint64_t v20 = 4 * (unsigned __int16)v14;
      *(void *)uint64_t v18 = v19 + v20;
      int v16 = *(unsigned __int16 *)(v19 + v20);
    }
    while (v16 != 0xFFFF);
    unsigned __int8 v15 = (unsigned __int16 *)(v19 + v20);
  }
  uint64_t PLeaf = DTLeafBuffer_GetPLeaf(*(void **)(a1 + 32), v15[1]);
  *a7 = PLeaf;
  if (((*(unsigned char *)(PLeaf + 1) & 2) == 0 || !*(void *)(a1 + 80))
    && ((*(unsigned char *)(PLeaf + 1) & 1) == 0
     || (*(unsigned char *)(PLeaf + 1) & 0xFC | (*(unsigned __int8 *)(PLeaf + 2) << 8)) != 4
     || !*(void *)(a1 + 80)))
  {
    return 0;
  }

  return _DTTree_GraphemeFallbackTraverse(a1, a2, a3, a4, a5, a6, (uint64_t)a7);
}

unint64_t _DTTree_GraphemeFallbackTraverse(uint64_t a1, uint64_t a2, unsigned char *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v16 = a3[a2];
  unint64_t result = DTGraphemeFallback_GetFallback(*(void **)(a1 + 80), v16, &v16);
  unsigned int v17 = result;
  if (!result)
  {
    unsigned __int8 v15 = (void *)OOCAllocator_Malloc(*(void *)(a1 + 8), a4, &v17);
    unint64_t result = v17;
    if (!v17)
    {
      cstdlib_memcpy(v15, a3, a4);
      *((unsigned char *)v15 + a2) = v16;
      unint64_t result = DTTree_Traverse(a1, a2, v15, a4, a5, a6, a7);
      unsigned int v17 = result;
      if (!result)
      {
        OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v15);
        return v17;
      }
    }
  }
  return result;
}

uint64_t PNEW_DTTree_Con(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t **a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = (uint64_t *)OOCAllocator_Malloc(a1, 104, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = DTTree_Con(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetDTTreeClass()
{
  return &__DTTree;
}

uint64_t DTGraphemeFallback_Con(void *a1, uint64_t a2)
{
  *a1 = a2;
  return 0;
}

unint64_t DTGraphemeFallback_GetFallback(void *a1, char a2, unsigned char *a3)
{
  int v7 = 0;
  unint64_t v5 = *a1 + 2;
  unint64_t v4 = *(unsigned __int16 *)*a1;
  v8[0] = a2;
  v8[1] = 0;
  unint64_t result = lhstdlib_bsearch((uint64_t)v8, v5, v4, 2uLL, (uint64_t (*)(uint64_t, unint64_t))compareFallback, &v7);
  if (result)
  {
    *a3 = *(unsigned char *)(result + 1);
    return 1;
  }
  return result;
}

uint64_t compareFallback(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t PNEW_DTGraphemeFallback_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  BOOL v5 = (void *)OOCAllocator_Malloc(a1, 8, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *BOOL v5 = a2;
    *a3 = v5;
  }
  return result;
}

uint64_t PDELETE_DTGraphemeFallback(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t DTBuffer_Con(void *a1, _DWORD *a2)
{
  *a1 = a2;
  if (a2[2] == 4)
  {
    if (a2[3] != 21586)
    {
      *a1 = 0;
      return err_GenerateErrorData();
    }
    unsigned int v2 = a2[1];
    if (a2[8] > v2)
    {
      *a1 = 0;
      return err_GenerateErrorData();
    }
    if (a2[9] > v2)
    {
      *a1 = 0;
      return err_GenerateErrorData();
    }
    if (a2[11] > v2 || a2[10] > v2)
    {
      *a1 = 0;
      return err_GenerateErrorData();
    }
    if (a2[13] > v2)
    {
      *a1 = 0;
      return err_GenerateErrorData();
    }
    return 0;
  }
  else
  {
    *a1 = 0;
    return err_GenerateErrorVersion();
  }
}

uint64_t PNEW_DTBuffer_Con(uint64_t a1, _DWORD *a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 8, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = DTBuffer_Con(v6, a2);
    unsigned int v8 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *a3 = v6;
    }
  }
  return result;
}

uint64_t PDELETE_DTBuffer(uint64_t a1, uint64_t a2)
{
  return 0;
}

int8x16_t DTPostProcessor_Con(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!Object_Con((void *)a1))
  {
    *(void *)a1 = &__DTPostProcessor;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    uint64_t v7 = *(void *)(a3 + 72);
    *(void *)(a1 + 56) = *(void *)(v7 + 16);
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 40);
    int8x16_t result = vextq_s8(*(int8x16_t *)(v7 + 28), *(int8x16_t *)(v7 + 28), 8uLL);
    *(int8x16_t *)(a1 + 80) = result;
  }
  return result;
}

uint64_t DTPostProcessor_Des(uint64_t a1)
{
  _DTPostProcessor_Clear(a1);

  return Object_Des();
}

uint64_t _DTPostProcessor_Clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    unint64_t v3 = *(void *)(result + 40);
    if (v3)
    {
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v5 = *(void *)(*(void *)(v1 + 32) + 8 * i);
        if (v5)
        {
          OOCAllocator_Free(*(void *)(v1 + 8), v5);
          unint64_t v3 = *(void *)(v1 + 40);
        }
      }
      uint64_t v2 = *(void *)(v1 + 32);
    }
    int8x16_t result = OOCAllocator_Free(*(void *)(v1 + 8), v2);
    *(void *)(v1 + 32) = 0;
  }
  uint64_t v6 = *(void *)(v1 + 48);
  if (v6)
  {
    int8x16_t result = OOCAllocator_Free(*(void *)(v1 + 8), v6);
    *(void *)(v1 + 48) = 0;
  }
  *(void *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  *(_WORD *)(v1 + 100) = -1;
  *(_DWORD *)(v1 + 104) = 1;
  return result;
}

uint64_t DTPostProcessor_CreateNBest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int PhonemeSeq = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  __s2 = 0;
  _DTPostProcessor_Clear(a1);
  *(void *)(a1 + 40) = 0;
  if (PtrList_NrItems(a2) < a3) {
    a3 = PtrList_NrItems(a2);
  }
  if (a3)
  {
    *(void *)(a1 + 32) = OOCAllocator_Calloc(*(void *)(a1 + 8), a3, 8, &PhonemeSeq);
    if (!PhonemeSeq)
    {
      *(void *)(a1 + 48) = OOCAllocator_Calloc(*(void *)(a1 + 8), a3, 4, &PhonemeSeq);
      if (!PhonemeSeq && *(void *)(a1 + 40) < (unint64_t)a3)
      {
        unsigned int v6 = 0;
        do
        {
          if (v6 >= PtrList_NrItems(a2)) {
            break;
          }
          uint64_t v7 = *(void *)(*(void *)(a2 + 40) + 16);
          if (*(__int16 *)(v7 + PtrList_ItemN(a2, v6) * *(void *)(*(void *)(a2 + 40) + 24) + 4) == -1) {
            break;
          }
          uint64_t v8 = PtrList_ItemN(a2, v6);
          uint64_t v9 = (unsigned int *)(*(void *)(*(void *)(a2 + 40) + 16) + *(void *)(*(void *)(a2 + 40) + 24) * v8);
          unsigned int PhonemeSeq = _DTPostProcessor_GetPhonemeSeq(a1, (uint64_t)v9 + 6, *v9, (uint64_t *)&v21, &v20);
          if (PhonemeSeq) {
            return PhonemeSeq;
          }
          if (v20)
          {
            unsigned int v10 = v21;
            unsigned int PhonemeSeq = _DTPostProcessor_GetTransFromPhnId(a1, v21, v20, &__s2);
            if (PhonemeSeq) {
              return PhonemeSeq;
            }
            if (*(_DWORD *)(a1 + 60) || (char v16 = __s2, !_DTPostProcessor_IsDoubleTranscription(a1, __s2)))
            {
              int v11 = *(_DWORD *)(a1 + 80);
              int v12 = *(_DWORD *)(a1 + 84);
              unsigned int v13 = (v12
                   + v11
                   * *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 40) + 16)
                                                       + *(void *)(*(void *)(a2 + 40) + 24) * v8
                                                       + 4))
                  / 0x3E8;
              if (*(_DWORD *)(a1 + 88))
              {
                BOOL v14 = _DTPostProcessor_KeepVariant(a1, (v12+ v11* *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 40) + 16)+ *(void *)(*(void *)(a2 + 40) + 24) * v8+ 4))/ 0x3E8);
                unsigned __int8 v15 = __s2;
                if (!v14)
                {
                  OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)__s2);
                  if (!v10) {
                    return PhonemeSeq;
                  }
LABEL_23:
                  OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v10);
                  return PhonemeSeq;
                }
              }
              else
              {
                unsigned __int8 v15 = __s2;
              }
              uint64_t v17 = *(void *)(a1 + 40);
              *(void *)(*(void *)(a1 + 32) + 8 * v17) = v15;
              *(_DWORD *)(*(void *)(a1 + 48) + 4 * v17) = v13;
              *(void *)(a1 + 40) = v17 + 1;
            }
            else
            {
              OOCAllocator_Free(*(void *)(a1 + 8), (uint64_t)v16);
              __s2 = 0;
            }
          }
          ++v6;
        }
        while (*(void *)(a1 + 40) < (unint64_t)a3);
        unsigned int v10 = v21;
        if (!v21) {
          return PhonemeSeq;
        }
        goto LABEL_23;
      }
    }
  }
  return PhonemeSeq;
}

uint64_t _DTPostProcessor_GetPhonemeSeq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v22 = 0;
  if (a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
      v10 += *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 16) + 8) + *(unsigned __int16 *)(a2 + 2 * v11++));
    while (a3 != v11);
    if (v10)
    {
      *a4 = OOCAllocator_Realloc(*(void *)(a1 + 8), *a4, v10, &v22);
      uint64_t result = v22;
      if (v22) {
        return result;
      }
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      *a5 = 0;
      uint64_t v15 = *(void *)(a1 + 16);
      while (1)
      {
        uint64_t v16 = *(unsigned __int16 *)(a2 + 2 * v14);
        uint64_t v17 = (unsigned __int8 *)(*(void *)(v15 + 8) + v16);
        int v19 = *v17;
        uint64_t v18 = v17 + 1;
        if (v19) {
          break;
        }
LABEL_17:
        if (++v14 == a3) {
          return v22;
        }
      }
      uint64_t v20 = 0;
      while (1)
      {
        if (*(_DWORD *)(a1 + 56))
        {
          uint64_t v21 = *a4;
        }
        else
        {
          uint64_t v21 = *a4;
          if (v13 && *(unsigned __int8 *)(v13 + v21 - 1) == v18[v20]) {
            goto LABEL_12;
          }
        }
        *(unsigned char *)(v21 + v13) = v18[v20];
        uint64_t v13 = *a5 + 1;
        *a5 = v13;
        uint64_t v15 = *(void *)(a1 + 16);
        uint64_t v16 = *(unsigned __int16 *)(a2 + 2 * v14);
LABEL_12:
        if (++v20 >= (unint64_t)*(unsigned __int8 *)(*(void *)(v15 + 8) + v16)) {
          goto LABEL_17;
        }
      }
    }
  }
  uint64_t result = 0;
  *a5 = 0;
  return result;
}

uint64_t _DTPostProcessor_GetTransFromPhnId(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unsigned int v17 = 0;
  if (!a3) {
    goto LABEL_8;
  }
  uint64_t v5 = a3;
  unsigned int v6 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  do
  {
    unsigned int v11 = *v9++;
    v8 += cstdlib_strlen((const char *)(*(void *)(*(void *)(a1 + 24) + 8) + v11));
    --v10;
  }
  while (v10);
  if (v8)
  {
    int v12 = (unsigned char *)OOCAllocator_Malloc(*(void *)(a1 + 8), v8 + 1, &v17);
    *a4 = v12;
    uint64_t result = v17;
    if (!v17)
    {
      do
      {
        unsigned int v14 = *v6++;
        uint64_t v15 = (const char *)(*(void *)(*(void *)(a1 + 24) + 8) + v14);
        size_t v16 = cstdlib_strlen(v15);
        cstdlib_memcpy(v12, v15, v16);
        v12 += v16;
        --v5;
      }
      while (v5);
      *int v12 = 0;
      return v17;
    }
  }
  else
  {
LABEL_8:
    uint64_t result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t _DTPostProcessor_IsDoubleTranscription(uint64_t a1, char *__s2)
{
  if (!__s2) {
    return 0;
  }
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  uint64_t v4 = 0;
  while (cstdlib_strcmp(*(const char **)(*(void *)(a1 + 32) + 8 * v4), __s2))
  {
    if ((unint64_t)++v4 >= *(void *)(a1 + 40)) {
      return 0;
    }
  }
  return 1;
}

unint64_t _DTPostProcessor_RescaleScore(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 80) * a2) / 0x3E8uLL;
}

BOOL _DTPostProcessor_KeepVariant(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 104))
  {
    *(_DWORD *)(a1 + 96) = a2;
  }
  else
  {
    int v4 = addExpScore(a2, *(_DWORD *)(a1 + 96));
    *(_DWORD *)(a1 + 96) = v4;
    if (v4 <= *(_DWORD *)(a1 + 88))
    {
      BOOL result = *(_DWORD *)(a1 + 92) + *(unsigned __int16 *)(a1 + 100) > a2;
      goto LABEL_6;
    }
  }
  BOOL result = 1;
LABEL_6:
  *(_WORD *)(a1 + 100) = a2;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

size_t DTPostProcessor_GetTranscriptionSize(uint64_t a1, uint64_t a2)
{
  return cstdlib_strlen(*(const char **)(*(void *)(a1 + 32) + 8 * a2));
}

uint64_t _DTPostProcessor_InitVariantPruning(uint64_t result)
{
  *(_DWORD *)(result + 96) = 0;
  *(_WORD *)(result + 100) = -1;
  *(_DWORD *)(result + 104) = 1;
  return result;
}

void PNEW_DTPostProcessor_Con(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v10 = 0;
  uint64_t v8 = OOCAllocator_Malloc(a1, 112, &v10);
  if (!v10)
  {
    DTPostProcessor_Con(v8, a2, a3);
    int v10 = v9;
    if (v9)
    {
      OOCAllocator_Free(a1, v8);
      *a4 = 0;
    }
    else
    {
      *a4 = v8;
    }
  }
}

void *GetDTPostProcessorClass()
{
  return &__DTPostProcessor;
}

uint64_t DTHypothesisPool_Compare(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = (unsigned int *)(v3 + v4 * *a2);
  unsigned int v6 = *((unsigned __int16 *)v5 + 2);
  uint64_t v7 = v3 + v4 * *a3;
  unsigned int v8 = *(unsigned __int16 *)(v7 + 4);
  if (v6 < v8) {
    return 0xFFFFFFFFLL;
  }
  if (v6 > v8) {
    return 1;
  }
  uint64_t v10 = *v5;
  if (v10 < *(_DWORD *)v7) {
    return 0xFFFFFFFFLL;
  }
  if (v10 > *(_DWORD *)v7) {
    return 1;
  }
  if (v10)
  {
    unsigned int v11 = (unsigned __int16 *)v5 + 3;
    int v12 = (unsigned __int16 *)(v7 + 6);
    while (1)
    {
      unsigned int v14 = *v11++;
      unsigned int v13 = v14;
      unsigned int v15 = *v12++;
      BOOL v16 = v13 > v15;
      if (v13 < v15) {
        break;
      }
      if (v16) {
        return 1;
      }
      uint64_t result = 0;
      if (!--v10) {
        return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t DTHypothesisPool_Con(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = ((2 - 2 * (_BYTE)a3) & 2) + 2 * a3 + 6;
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)a1 = &__DTHypothesisPool;
    *(void *)(a1 + 8) = a2;
    return PNEW_PtrStack_Con(a2, a2, 1, (uint64_t *)(a1 + 40));
  }
  return result;
}

uint64_t DTHypothesisPool_Des(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    OOCAllocator_Free(a1[1], v2);
  }
  uint64_t result = OOC_PlacementDeleteObject(a1[1], a1[5]);
  if (!result)
  {
    return Object_Des();
  }
  return result;
}

uint64_t DTHypothesisPool_FetchHypoID(uint64_t a1, _DWORD *a2)
{
  unsigned int v14 = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(_DWORD *)(v4 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v4 + 32) + 8 * (v5 - 1));
    uint64_t result = PtrStack_Remove(v4);
    if (result) {
      return result;
    }
    uint64_t v8 = (v6 - 1);
    uint64_t v9 = *(void *)(a1 + 16) + *(void *)(a1 + 24) * v8;
    *(_DWORD *)uint64_t v9 = 0;
    *(_WORD *)(v9 + 4) = 0;
    goto LABEL_10;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  uint64_t v10 = (v8 + 1);
  uint64_t v11 = OOCAllocator_Realloc(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24) * v10, &v14);
  uint64_t result = v14;
  if (v14) {
    return result;
  }
  *(void *)(a1 + 16) = v11;
  uint64_t v12 = (*(_DWORD *)(a1 + 32) + 1);
  *(_DWORD *)(a1 + 32) = v12;
  if (v12 <= v10)
  {
LABEL_9:
    uint64_t v13 = v11 + *(void *)(a1 + 24) * v8;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)(v13 + 4) = 0;
    uint64_t result = v14;
LABEL_10:
    *a2 = v8;
    return result;
  }
  while (1)
  {
    uint64_t result = PtrStack_Put(*(void *)(a1 + 40), v12);
    unsigned int v14 = result;
    if (result) {
      return result;
    }
    if (v10 >= --v12)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      goto LABEL_9;
    }
  }
}

uint64_t DTHypothesisPool_Resize(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 24) = ((2 - 2 * (_BYTE)a2) & 2) + 2 * a2 + 6;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    OOCAllocator_Free(*(void *)(a1 + 8), v3);
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  if (!*(_DWORD *)(v4 + 24)) {
    return 0;
  }
  do
  {
    uint64_t v5 = PtrStack_Remove(v4);
    uint64_t v4 = *(void *)(a1 + 40);
  }
  while (*(_DWORD *)(v4 + 24));
  return v5;
}

uint64_t DTHypothesisPool_ReturnHypoID(void *a1, unsigned int a2)
{
  *(_DWORD *)(a1[2] + a1[3] * a2) = -1;
  return PtrStack_Put(a1[5], a2 + 1);
}

uint64_t PNEW_DTHypothesisPool_Con(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = OOCAllocator_Malloc(a1, 48, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = DTHypothesisPool_Con(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetDTHypothesisPoolClass()
{
  return &__DTHypothesisPool;
}

uint64_t DTQuestionBuffer_Con(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  uint64_t result = Object_Con(a1);
  unsigned int v15 = result;
  if (!result)
  {
    *a1 = &__DTQuestionBuffer;
    a1[1] = a2;
    a1[2] = a3;
    a1[4] = a3 + 4;
    a1[3] = OOCAllocator_Calloc(a2, 9, 8, &v15);
    uint64_t result = v15;
    if (!v15)
    {
      uint64_t result = PNEW_DTQuestionPP_Con(a2, 0, &v14);
      unsigned int v15 = result;
      if (!result)
      {
        *(void *)(a1[3] + 8) = v14;
        uint64_t result = PNEW_DTQuestionWB_Con(a2, 0, &v12);
        unsigned int v15 = result;
        if (!result)
        {
          *(void *)(a1[3] + 16) = v12;
          uint64_t result = PNEW_DTQuestionGP_Con(a2, 0, &v13);
          unsigned int v15 = result;
          if (!result)
          {
            *(void *)(a1[3] + 24) = v13;
            uint64_t result = PNEW_DTQuestionTG_Con(a2, 0, &v11);
            unsigned int v15 = result;
            if (!result)
            {
              *(void *)(a1[3] + 32) = v11;
              uint64_t result = PNEW_DTQuestionSG_Con(a2, 0, &v10);
              unsigned int v15 = result;
              if (!result)
              {
                *(void *)(a1[3] + 40) = v10;
                uint64_t result = PNEW_DTQuestionSP_Con(a2, 0, &v9);
                unsigned int v15 = result;
                if (!result)
                {
                  *(void *)(a1[3] + 48) = v9;
                  uint64_t result = PNEW_DTQuestionPPBin_Con(a2, 0, &v8);
                  unsigned int v15 = result;
                  if (!result)
                  {
                    *(void *)(a1[3] + 56) = v8;
                    uint64_t result = PNEW_DTQuestionGPBin_Con(a2, 0, &v7);
                    if (!result) {
                      *(void *)(a1[3] + 64) = v7;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DTQuestionBuffer_Des(uint64_t *a1)
{
  uint64_t v2 = 0;
  a1[2] = 0;
  while (1)
  {
    uint64_t v3 = *(void *)(a1[3] + v2);
    if (v3)
    {
      uint64_t result = OOC_PlacementDeleteObject(a1[1], v3);
      if (result) {
        break;
      }
    }
    v2 += 8;
    if (v2 == 72)
    {
      OOCAllocator_Free(a1[1], a1[3]);
      return Object_Des();
    }
  }
  return result;
}

uint64_t DTQuestionBuffer_BorrowQuestion(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (unsigned __int8 *)(*(void *)(a1 + 32) + a2);
  uint64_t result = *(void *)(*(void *)(a1 + 24) + 8 * *v2);
  *(void *)(result + 8) = v2;
  return result;
}

uint64_t PNEW_DTQuestionBuffer_Con(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = (void *)OOCAllocator_Malloc(a1, 40, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = DTQuestionBuffer_Con(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetDTQuestionBufferClass()
{
  return &__DTQuestionBuffer;
}

uint64_t DTSearch_Con(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)a1 = &__DTSearch;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = a3;
    uint64_t result = PNEW_DTHypothesisPool_Con(a2, a2, 0, (uint64_t *)(a1 + 24));
    if (!result)
    {
      uint64_t result = PNEW_DTHypothesisList_Con(a2, a2, *(void *)(a1 + 24), (void *)(a1 + 32));
      if (!result)
      {
        uint64_t result = PNEW_DTHypothesisList_Con(a2, a2, *(void *)(a1 + 24), (void *)(a1 + 40));
        unsigned int v10 = result;
        if (!result)
        {
          *(void *)(a1 + 64) = 0;
          *(void *)(a1 + 72) = 0;
          uint64_t v7 = *(__int16 **)(*(void *)(a1 + 16) + 72);
          __int16 v8 = *v7;
          *(_WORD *)(a1 + 48) = *v7;
          *(_WORD *)(a1 + 50) = v8;
          uint64_t v9 = *((unsigned int *)v7 + 2);
          *(_DWORD *)(a1 + 52) = *((_DWORD *)v7 + 1);
          *(_DWORD *)(a1 + 56) = v9;
          LOWORD(v7) = v7[6];
          *(_WORD *)(a1 + 60) = (_WORD)v7;
          *(_WORD *)(a1 + 62) = (_WORD)v7;
          *(void *)(a1 + 80) = 0;
          if (v9)
          {
            *(void *)(a1 + 80) = OOCAllocator_Realloc(a2, 0, 4 * v9, &v10);
            return v10;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t DTSearch_Des(uint64_t *a1)
{
  uint64_t result = _DTSearch_ClearHypothesis((uint64_t)a1, a1[5]);
  if (!result)
  {
    uint64_t result = _DTSearch_ClearHypothesis((uint64_t)a1, a1[4]);
    if (!result)
    {
      uint64_t result = OOC_PlacementDeleteObject(a1[1], a1[4]);
      if (!result)
      {
        uint64_t result = OOC_PlacementDeleteObject(a1[1], a1[5]);
        if (!result)
        {
          uint64_t result = OOC_PlacementDeleteObject(a1[1], a1[3]);
          if (!result)
          {
            uint64_t result = __DTSearch_LeafPoolClear(a1);
            if (!result)
            {
              a1[2] = 0;
              a1[4] = 0;
              a1[5] = 0;
              uint64_t v3 = a1[10];
              if (v3) {
                OOCAllocator_Free(a1[1], v3);
              }
              return Object_Des();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _DTSearch_ClearHypothesis(uint64_t a1, uint64_t a2)
{
  if (PtrList_NrItems(a2))
  {
    unsigned int v4 = 0;
    while (1)
    {
      unsigned int v5 = PtrList_ItemN(a2, v4);
      uint64_t result = DTHypothesisPool_ReturnHypoID(*(void **)(a1 + 24), v5);
      if (result) {
        break;
      }
      if (++v4 >= PtrList_NrItems(a2)) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    PtrList_RemoveAll(a2);
    return 0;
  }
  return result;
}

uint64_t __DTSearch_LeafPoolClear(uint64_t *a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v1 = a1[8];
  if (!v1) {
    return 0;
  }
  if (a1[9])
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t result = DTLeaf_Con((void *)(*v2 + v4), 0);
      if (result) {
        break;
      }
      ++v5;
      v4 += 8;
      if (v5 >= a1[9])
      {
        uint64_t v1 = *v2;
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    OOCAllocator_Free(a1[1], v1);
    uint64_t result = 0;
    *uint64_t v2 = 0;
    v2[1] = 0;
  }
  return result;
}

unint64_t DTSearch_BeamSearch(uint64_t a1, unsigned char *a2, size_t a3, void *a4)
{
  unsigned int v36 = 0;
  unint64_t result = _DTSearch_LeafPoolResize((uint64_t *)a1, 1uLL);
  if (result) {
    return result;
  }
  unint64_t result = _DTSearch_ClearHypothesis(a1, *(void *)(a1 + 32));
  if (result) {
    return result;
  }
  if (!a3)
  {
    uint64_t v15 = 0;
    goto LABEL_19;
  }
  unint64_t result = DTHypothesisPool_Resize(*(void *)(a1 + 24), a3);
  if (result) {
    return result;
  }
  int v9 = *(unsigned __int16 *)(a1 + 48);
  *(_WORD *)(a1 + 50) = v9;
  if (!v9) {
    LOWORD(v9) = *(_WORD *)(a1 + 60);
  }
  *(_WORD *)(a1 + 62) = v9;
  unint64_t result = DTTree_Traverse(*(void *)(a1 + 16), 0, a2, a3, 0, 0, *(uint64_t **)(a1 + 64));
  if (result) {
    return result;
  }
  if ((*(unsigned char *)(**(void **)(a1 + 64) + 1) & 2) != 0)
  {
LABEL_20:
    if (a3 >= 2)
    {
      uint64_t v16 = 1;
      do
      {
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        *(void *)(a1 + 32) = v17;
        *(void *)(a1 + 40) = v18;
        unint64_t result = _DTSearch_ClearHypothesis(a1, v17);
        if (result) {
          return result;
        }
        unsigned int v19 = PtrList_NrItems(*(void *)(a1 + 40));
        unint64_t result = _DTSearch_LeafPoolResize((uint64_t *)a1, v19);
        if (result) {
          return result;
        }
        if (PtrList_NrItems(*(void *)(a1 + 40)))
        {
          uint64_t v23 = 0;
          unint64_t v24 = 0;
          do
          {
            unsigned int v25 = (unsigned int *)(*(void *)(*(void *)(a1 + 24) + 16)
                                 + *(void *)(*(void *)(a1 + 24) + 24)
                                 * PtrList_ItemN(*(void *)(a1 + 40), v24));
            unint64_t result = DTTree_Traverse(*(void *)(a1 + 16), v16, a2, a3, (uint64_t)v25 + 6, *v25, (uint64_t *)(*(void *)(a1 + 64) + v23));
            if (result) {
              return result;
            }
            ++v24;
            v23 += 8;
          }
          while (v24 < PtrList_NrItems(*(void *)(a1 + 40)));
        }
        if (*(_DWORD *)(a1 + 52)) {
          _DTSearch_GetHistogramPruningThreshold(a1, *(void *)(a1 + 40), v20, v21, v22, (_WORD *)(a1 + 50));
        }
        if (PtrList_NrItems(*(void *)(a1 + 40)))
        {
          uint64_t v26 = 0;
LABEL_32:
          uint64_t v27 = 0;
          uint64_t v28 = PtrList_ItemN(*(void *)(a1 + 40), v26);
          uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8 * v26);
          while (1)
          {
            __int16 v30 = *(unsigned __int8 *)(v29 + v27);
            if (!_DTSearch_HypoWillBePruned(a1, *(void *)(a1 + 32), *(unsigned __int8 *)(v29 + v27)))
            {
              unint64_t result = DTHypothesisPool_FetchHypoID(*(void *)(a1 + 24), &v36);
              if (result) {
                return result;
              }
              uint64_t v31 = *(void *)(a1 + 24);
              cstdlib_memcpy((void *)(*(void *)(v31 + 16) + *(void *)(v31 + 24) * v36), (const void *)(*(void *)(v31 + 16) + *(void *)(v31 + 24) * v28), *(void *)(v31 + 24));
              unsigned int v32 = v36;
              uint64_t v33 = (unsigned int *)(*(void *)(*(void *)(a1 + 24) + 16)
                                   + *(void *)(*(void *)(a1 + 24) + 24) * v36);
              *((_WORD *)v33 + 2) += v30;
              if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 64) + 8 * v26) + v27 + 1) >= 4u)
              {
                uint64_t v34 = *v33;
                *((_WORD *)v33 + v34 + 3) = *(_WORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v26) + v27 + 1) >> 2;
                *uint64_t v33 = v34 + 1;
                unsigned int v32 = v36;
              }
              unint64_t result = _DTSearch_AddHypothesis(a1, *(void *)(a1 + 32), v32);
              if (result) {
                return result;
              }
            }
            uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8 * v26);
            char v35 = *(unsigned char *)(v29 + v27 + 1);
            v27 += 3;
            if (v35)
            {
              if (++v26 < (unint64_t)PtrList_NrItems(*(void *)(a1 + 40))) {
                goto LABEL_32;
              }
              break;
            }
          }
        }
      }
      while (++v16 != a3);
    }
    unint64_t result = _DTSearch_ClearHypothesis(a1, *(void *)(a1 + 40));
    if (result) {
      return result;
    }
    PtrList_UdSort(*(void *)(a1 + 32), (uint64_t (*)(char *, char *, uint64_t))__DTSearch_HypoCompare, *(void *)(a1 + 24));
    uint64_t v15 = PtrList_NrItems(*(void *)(a1 + 32));
LABEL_19:
    unint64_t result = 0;
    *a4 = v15;
    return result;
  }
  unint64_t result = DTHypothesisPool_FetchHypoID(*(void *)(a1 + 24), &v36);
  if (!result)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (unsigned __int8 *)(**(void **)(a1 + 64) + v10);
      unsigned int v12 = v36;
      uint64_t v13 = *(void *)(*(void *)(a1 + 24) + 16) + *(void *)(*(void *)(a1 + 24) + 24) * v36;
      *(_WORD *)(v13 + 4) = *v11;
      unsigned int v14 = *(unsigned __int16 *)(v11 + 1);
      if (v14 >= 4)
      {
        *(_WORD *)(v13 + 6) = v14 >> 2;
        *(_DWORD *)uint64_t v13 = 1;
        unsigned int v12 = v36;
      }
      unint64_t result = _DTSearch_AddHypothesis(a1, *(void *)(a1 + 32), v12);
      if (result) {
        break;
      }
      if (*(unsigned char *)(**(void **)(a1 + 64) + v10 + 1)) {
        goto LABEL_20;
      }
      unint64_t result = DTHypothesisPool_FetchHypoID(*(void *)(a1 + 24), &v36);
      v10 += 3;
    }
    while (!result);
  }
  return result;
}

uint64_t _DTSearch_LeafPoolResize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = 0;
  unsigned int v8 = 0;
  if (a1[9] < a2)
  {
    a1[8] = OOCAllocator_Realloc(a1[1], a1[8], 8 * a2, &v8);
    uint64_t result = v8;
    if (!v8)
    {
      unint64_t v5 = a1[9];
      unint64_t v6 = a2 - v5;
      if (a2 <= v5)
      {
LABEL_7:
        uint64_t result = 0;
        a1[9] = a2;
      }
      else
      {
        uint64_t v7 = 8 * v5;
        while (1)
        {
          uint64_t result = DTLeaf_Con((void *)(a1[8] + v7), 0);
          unsigned int v8 = result;
          if (result) {
            break;
          }
          v7 += 8;
          if (!--v6) {
            goto LABEL_7;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _DTSearch_AddHypothesis(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (PtrList_NrItems(a2))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(v6 + 16);
    unsigned int v8 = *(unsigned __int16 *)(v7 + *(void *)(v6 + 24) * a3 + 4);
    unsigned int v9 = PtrList_ItemN(a2, 0);
    uint64_t v10 = *(void **)(a1 + 24);
    if (v8 == 0xFFFF
      || (unsigned int v11 = *(unsigned __int16 *)(v7 + v9 * v10[3] + 4), *(_WORD *)(a1 + 50))
      && *(unsigned __int16 *)(a1 + 50) + v11 < v8)
    {
      return DTHypothesisPool_ReturnHypoID(v10, a3);
    }
    uint64_t v14 = a2;
    uint64_t v13 = a3;
    if (v8 >= v11)
    {
      return PtrList_Append(a2, a3);
    }
  }
  else
  {
    uint64_t v13 = a3;
    uint64_t v14 = a2;
  }

  return PtrList_Prepend(v14, v13);
}

uint64_t _DTSearch_GetHistogramPruningThreshold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  unsigned int v9 = *(char **)(a1 + 80);
  if (PtrList_NrItems(a2))
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8 * v10);
      char v14 = *(unsigned char *)(v12 + 1);
      uint64_t v13 = (char *)(v12 + 1);
      if ((v14 & 2) == 0)
      {
        do
        {
          ++v11;
          char v15 = *v13;
          v13 += 3;
        }
        while ((v15 & 1) == 0);
      }
      ++v10;
    }
    while (v10 < PtrList_NrItems(a2));
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 56);
  if (v11 < *(_DWORD *)(a1 + 52))
  {
    LOWORD(v17) = 0;
    unsigned __int16 v18 = 0;
    unsigned __int16 v19 = 0;
    LODWORD(v20) = *(_DWORD *)(a1 + 56);
LABEL_31:
    if (v20) {
      unint64_t v17 = v16 * (unint64_t)*(unsigned __int16 *)(a1 + 62) / v20;
    }
    goto LABEL_33;
  }
  cstdlib_memset(v9, 0, 4 * v16);
  if (PtrList_NrItems(a2))
  {
    uint64_t v21 = 0;
    unsigned __int16 v19 = 0;
    unsigned __int16 v18 = 0;
    LOWORD(v17) = 0;
    while (1)
    {
      __int16 v22 = *(_WORD *)(*(void *)(*(void *)(a1 + 24) + 16)
                     + *(void *)(*(void *)(a1 + 24) + 24) * PtrList_ItemN(a2, v21)
                     + 4);
      uint64_t v23 = *(unsigned __int8 ***)(a1 + 64);
      if (!v21)
      {
        unsigned __int16 v18 = v22 + **v23;
        unsigned __int16 v19 = v18;
      }
      unint64_t v24 = v23[v21];
      if ((v24[1] & 2) == 0) {
        break;
      }
LABEL_23:
      if (++v21 >= (unint64_t)PtrList_NrItems(a2)) {
        goto LABEL_26;
      }
    }
    unsigned int v25 = (char *)(v24 + 1);
    while (1)
    {
      LOWORD(v17) = v22 + *(v25 - 1);
      uint64_t v26 = v9;
      if ((unsigned __int16)v17 < v18) {
        goto LABEL_19;
      }
      unsigned int v27 = *(_DWORD *)(a1 + 56);
      unsigned int v28 = v27 * ((unsigned __int16)v17 - v18) / *(unsigned __int16 *)(a1 + 62);
      if (v28 < v27) {
        break;
      }
LABEL_20:
      if ((unsigned __int16)v17 < v19) {
        unsigned __int16 v19 = v17;
      }
      char v29 = *v25;
      v25 += 3;
      if (v29) {
        goto LABEL_23;
      }
    }
    uint64_t v26 = &v9[4 * v28];
LABEL_19:
    ++*(_DWORD *)v26;
    goto LABEL_20;
  }
  LOWORD(v17) = 0;
  unsigned __int16 v18 = 0;
  unsigned __int16 v19 = 0;
LABEL_26:
  uint64_t v20 = *(unsigned int *)(a1 + 56);
  if (v20)
  {
    unint64_t v30 = 0;
    uint64_t v16 = 0;
    while (v30 < *(unsigned int *)(a1 + 52))
    {
      v30 += *(unsigned int *)&v9[4 * v16++];
      if (v20 == v16)
      {
        uint64_t v16 = *(unsigned int *)(a1 + 56);
        goto LABEL_31;
      }
    }
    goto LABEL_31;
  }
LABEL_33:
  *a6 = v17 - v19 + v18;
  if (*(_WORD *)(a1 + 48))
  {
    unsigned int v31 = (unsigned __int16)(v17 - v19 + v18);
    if (v31 >= *(unsigned __int16 *)(a1 + 48)) {
      LOWORD(v31) = *(_WORD *)(a1 + 48);
    }
    *a6 = v31;
  }
  return 0;
}

uint64_t _DTSearch_HypoWillBePruned(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = PtrList_NrItems(a2);
  if (result)
  {
    unsigned int v7 = PtrList_ItemN(a2, 0);
    return *(_WORD *)(a1 + 50)
        && *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 24) + 16)
                               + *(void *)(*(void *)(a1 + 24) + 24) * v7
                               + 4)
         + *(unsigned __int16 *)(a1 + 50) < a3;
  }
  return result;
}

uint64_t __DTSearch_HypoCompare(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  return DTHypothesisPool_Compare(a3, a1, a2);
}

uint64_t DTSearch_SetHistogramBins(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = 0;
  *(_DWORD *)(a1 + 56) = a2;
  if (!a2) {
    return 0;
  }
  *(void *)(a1 + 80) = OOCAllocator_Realloc(*(void *)(a1 + 8), *(void *)(a1 + 80), 4 * a2, &v3);
  return v3;
}

uint64_t DTSearch_SetHistogramDiff(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 60) = a2;
  return result;
}

uint64_t DTSearch_SetHistogramPruning(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t DTSearch_SetPruning(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 48) = a2;
  return result;
}

uint64_t PNEW_DTSearch_Con(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = OOCAllocator_Malloc(a1, 88, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = DTSearch_Con(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetDTSearchClass()
{
  return &__DTSearch;
}

uint64_t DTQuestionSP_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionSP;
  }
  return result;
}

BOOL DTQuestionSP_IsTrue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(char *)(v6 + 1);
  BOOL result = 0;
  if (v7 + a6 >= 0 && a5 && v7 < 0) {
    return *(unsigned __int16 *)(a5 + 2 * (v7 + a6)) == *(unsigned __int16 *)(v6 + 2);
  }
  return result;
}

uint64_t PNEW_DTQuestionSP_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *uint64_t v6 = &__DTQuestionSP;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionSPClass()
{
  return &__DTQuestionSP;
}

uint64_t DTQuestionTG_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionTG;
  }
  return result;
}

BOOL DTQuestionTG_IsTrue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(a3 + a2) == *(unsigned __int8 *)(*(void *)(a1 + 8) + 2);
}

uint64_t PNEW_DTQuestionTG_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *uint64_t v6 = &__DTQuestionTG;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionTGClass()
{
  return &__DTQuestionTG;
}

uint64_t DTGraphemeParser_Con(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__DTGraphemeParser;
    a1[1] = a2;
    uint64_t v7 = *(void *)(a3 + 56);
    a1[4] = 0;
    a1[5] = 0;
    a1[2] = v7;
    a1[3] = 0;
  }
  return result;
}

uint64_t DTGraphemeParser_Des(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    OOCAllocator_Free(*(void *)(a1 + 8), v2);
    *(void *)(a1 + 24) = 0;
  }

  return Object_Des();
}

uint64_t DTGraphemeParser_Parse(void *a1, char *__s)
{
  unsigned int v15 = 0;
  if (cstdlib_strlen(__s))
  {
    size_t v4 = cstdlib_strlen(__s);
    size_t v5 = a1[4];
    if (v4 >= v5)
    {
      uint64_t v6 = (void *)OOCAllocator_Realloc(a1[1], a1[3], v4, &v15);
      a1[3] = v6;
      if (v15) {
        return v15;
      }
      a1[4] = v4;
      size_t v5 = v4;
    }
    else
    {
      uint64_t v6 = (void *)a1[3];
    }
    a1[5] = 0;
    cstdlib_memset(v6, 0, v5);
    if (v4)
    {
      size_t v8 = 0;
      unsigned int v9 = *(unsigned __int16 *)(*(void *)(a1[2] + 16) + 4);
      while (1)
      {
        unsigned int GraphemeID = DTGraphemeBuffer_FirstGraphemeID(a1[2], (uint64_t)&__s[v8]);
        if (v9 <= GraphemeID) {
          break;
        }
        unsigned __int8 v11 = GraphemeID;
        while (1)
        {
          uint64_t v12 = *(void *)(a1[2] + 24) + 8 * v11;
          size_t v13 = *(void *)(v12 + 8) + ~*(void *)v12;
          if (!cstdlib_strncmp(*(const char **)v12, &__s[v8], v13)) {
            break;
          }
          if (v9 <= ++v11) {
            goto LABEL_17;
          }
        }
        *(unsigned char *)(a1[3] + a1[5]++) = v11;
        v8 += v13;
        if (v8 >= v4) {
          return v15;
        }
      }
LABEL_17:
      a1[5] = 0;
      cstdlib_memset((void *)a1[3], 0, a1[4]);
      return 4;
    }
  }
  else
  {
    a1[5] = 0;
    uint64_t v7 = (void *)a1[3];
    if (v7) {
      cstdlib_memset(v7, 0, a1[4]);
    }
  }
  return v15;
}

uint64_t PNEW_DTGraphemeParser_Con(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v11 = 0;
  size_t v8 = (void *)OOCAllocator_Malloc(a1, 48, &v11);
  uint64_t result = v11;
  if (!v11)
  {
    uint64_t result = Object_Con(v8);
    if (result)
    {
      unsigned int v11 = result;
      OOCAllocator_Free(a1, (uint64_t)v8);
      *a4 = 0;
      return v11;
    }
    else
    {
      *size_t v8 = &__DTGraphemeParser;
      v8[1] = a2;
      uint64_t v10 = *(void *)(a3 + 56);
      v8[4] = 0;
      v8[5] = 0;
      unsigned char v8[2] = v10;
      v8[3] = 0;
      *a4 = v8;
    }
  }
  return result;
}

void *GetDTGraphemeParserClass()
{
  return &__DTGraphemeParser;
}

uint64_t DTQuestionPPBin_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionPPBin;
  }
  return result;
}

uint64_t DTQuestionPPBin_IsTrue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(char *)(v6 + 1);
  unsigned int v8 = v7 + a6;
  if (v7 + a6 < 0) {
    return 0;
  }
  uint64_t result = 0;
  if (a5 && v7 < 0)
  {
    int v10 = *(unsigned __int8 *)(v6 + 2);
    if (*(unsigned char *)(v6 + 2))
    {
      int v11 = 0;
      unsigned int v12 = *(unsigned __int16 *)(a5 + 2 * v8);
      uint64_t v13 = v6 + 3;
      int v14 = v10 - 1;
      while (1)
      {
        int v15 = (v14 + v11) >> 1;
        unsigned int v16 = *(unsigned __int16 *)(v13 + 2 * v15);
        if (v12 >= v16)
        {
          if (v12 <= v16) {
            return 1;
          }
          int v11 = v15 + 1;
        }
        else
        {
          int v14 = v15 - 1;
        }
        if (v11 > v14) {
          return 0;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t PNEW_DTQuestionPPBin_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *uint64_t v6 = &__DTQuestionPPBin;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionPPBinClass()
{
  return &__DTQuestionPPBin;
}

uint64_t DTPPBuffer_Con(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = a2 + 2;
  return 0;
}

uint64_t PNEW_DTPPBuffer_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  size_t v5 = (void *)OOCAllocator_Malloc(a1, 16, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *size_t v5 = a2;
    v5[1] = a2 + 2;
    *a3 = v5;
  }
  return result;
}

uint64_t PDELETE_DTPPBuffer(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t DTLeaf_Con(void *a1, uint64_t a2)
{
  *a1 = a2;
  return 0;
}

uint64_t PNEW_DTLeaf_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  size_t v5 = (void *)OOCAllocator_Malloc(a1, 8, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *size_t v5 = a2;
    *a3 = v5;
  }
  return result;
}

uint64_t PDELETE_DTLeaf(uint64_t a1, uint64_t a2)
{
  return 0;
}

double LexDT_Con(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  if (!_LexChain_Con((void *)a1, a2, a3))
  {
    *(void *)a1 = &__LexDT;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    if (a4)
    {
      *(void *)(a1 + 72) = a4;
      *(void *)(a1 + 80) = a5;
      if (!PNEW_DTTree_Con(a2, a2, a4, (uint64_t **)(a1 + 56))
        && !PNEW_DTGraphemeParser_Con(a2, a2, *(void *)(a1 + 56), (void *)(a1 + 32))
        && !PNEW_DTSearch_Con(a2, a2, *(void *)(a1 + 56), (uint64_t *)(a1 + 40)))
      {
        PNEW_DTPostProcessor_Con(a2, a2, *(void *)(a1 + 56), (uint64_t *)(a1 + 48));
        if (!v10) {
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 72) + 24);
        }
      }
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
    }
  }
  return result;
}

uint64_t LexDT_Des(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[6];
  if (!v3 || (uint64_t result = OOC_PlacementDeleteObject(a1[2], v3), !result))
  {
    uint64_t v5 = a1[5];
    if (!v5 || (uint64_t result = OOC_PlacementDeleteObject(v2, v5), !result))
    {
      uint64_t v6 = a1[4];
      if (!v6 || (uint64_t result = OOC_PlacementDeleteObject(v2, v6), !result))
      {
        uint64_t v7 = a1[7];
        if (!v7 || (uint64_t result = OOC_PlacementDeleteObject(v2, v7), !result))
        {
          uint64_t v8 = a1[10];
          if (v8) {
            OOCAllocator_Free(v8, a1[9]);
          }
          return LexChain_Des((uint64_t)a1);
        }
      }
    }
  }
  return result;
}

uint64_t LexDT_BorrowGrapheme(uint64_t a1, unsigned __int8 a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 56) + 24) + 8 * a2);
}

uint64_t LexDT_GetNumGraphemes(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 56) + 16) + 4);
}

uint64_t LexDT_GetParamList(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = a3;
  uint64_t v6 = (_DWORD *)(a2 + 4);
  do
  {
    switch(*(v6 - 1))
    {
      case 0:
        int v7 = *(_DWORD *)(a1 + 64);
        goto LABEL_15;
      case 1:
        int v7 = *(unsigned __int16 *)(*(void *)(a1 + 40) + 48);
        goto LABEL_15;
      case 2:
        int v7 = *(_DWORD *)(*(void *)(a1 + 40) + 52);
        goto LABEL_15;
      case 3:
        uint64_t v8 = *(void *)(a1 + 40);
        goto LABEL_13;
      case 4:
        int v7 = *(unsigned __int16 *)(*(void *)(a1 + 40) + 60);
        goto LABEL_15;
      case 5:
        int v7 = *(_DWORD *)(*(void *)(a1 + 48) + 88);
        goto LABEL_15;
      case 6:
        int v7 = *(_DWORD *)(*(void *)(a1 + 48) + 92);
        goto LABEL_15;
      case 7:
        uint64_t v8 = *(void *)(a1 + 48);
LABEL_13:
        int v7 = *(_DWORD *)(v8 + 56);
        goto LABEL_15;
      case 8:
        int v7 = *(_DWORD *)(*(void *)(a1 + 48) + 60);
LABEL_15:
        *uint64_t v6 = v7;
        break;
      default:
        uint64_t result = err_GenerateErrorData();
        break;
    }
    v6 += 2;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t LexDT_GetParamListDefaults(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(int **)(*(void *)(a1 + 56) + 72);
  uint64_t v6 = a3;
  int v7 = (_DWORD *)(a2 + 4);
  do
  {
    switch(*(v7 - 1))
    {
      case 0:
        int v8 = v5[6];
        goto LABEL_14;
      case 1:
        int v8 = *v5;
        goto LABEL_14;
      case 2:
        int v8 = v5[1];
        goto LABEL_14;
      case 3:
        int v8 = v5[2];
        goto LABEL_14;
      case 4:
        int v8 = v5[3];
        goto LABEL_14;
      case 5:
        int v8 = v5[7];
        goto LABEL_14;
      case 6:
        int v8 = v5[8];
        goto LABEL_14;
      case 7:
        int v8 = v5[4];
        goto LABEL_14;
      case 8:
        int v8 = v5[5];
LABEL_14:
        *int v7 = v8;
        break;
      default:
        uint64_t result = err_GenerateErrorData();
        break;
    }
    v7 += 2;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t LexDT_GetVersionString(uint64_t a1, void *a2)
{
  unsigned int v46 = 0;
  uint64_t v3 = (char *)OOCAllocator_Malloc(*(void *)(a1 + 16), 800, &v46);
  uint64_t result = v46;
  if (!v46)
  {
    int v5 = spr_pcat_noerr(v3, (uint64_t)(v3 + 800), "s", "LexDT Version ");
    uint64_t v6 = &v3[v5 + (int)spr_lcat_noerr(&v3[v5], (uint64_t)(v3 + 800), "d", 4)];
    int v7 = &v6[(int)spr_pcat_noerr(v6, (uint64_t)(v3 + 800), "s", "\n")];
    int v8 = &v7[(int)spr_pcat_noerr(v7, (uint64_t)(v3 + 800), "s", "LexDT build ID: ")];
    unsigned int v9 = &v8[(int)spr_lcat_noerr(v8, (uint64_t)(v3 + 800), "d", 21586)];
    int v10 = &v9[(int)spr_pcat_noerr(v9, (uint64_t)(v3 + 800), "s", "\n")];
    int v11 = &v10[(int)spr_pcat_noerr(v10, (uint64_t)(v3 + 800), "s", "  question ID size ")];
    unsigned int v12 = &v11[(int)spr_lcat_noerr(v11, (uint64_t)(v3 + 800), "d", 2)];
    uint64_t v13 = &v12[(int)spr_pcat_noerr(v12, (uint64_t)(v3 + 800), "s", "\n")];
    int v14 = &v13[(int)spr_pcat_noerr(v13, (uint64_t)(v3 + 800), "s", "  node ID size ")];
    int v15 = &v14[(int)spr_lcat_noerr(v14, (uint64_t)(v3 + 800), "d", 2)];
    unsigned int v16 = &v15[(int)spr_pcat_noerr(v15, (uint64_t)(v3 + 800), "s", "\n")];
    unint64_t v17 = &v16[(int)spr_pcat_noerr(v16, (uint64_t)(v3 + 800), "s", "  grapheme ID size ")];
    unsigned __int16 v18 = &v17[(int)spr_lcat_noerr(v17, (uint64_t)(v3 + 800), "d", 1)];
    unsigned __int16 v19 = &v18[(int)spr_pcat_noerr(v18, (uint64_t)(v3 + 800), "s", "\n")];
    uint64_t v20 = &v19[(int)spr_pcat_noerr(v19, (uint64_t)(v3 + 800), "s", "  pseudo-phoneme ID size ")];
    uint64_t v21 = &v20[(int)spr_lcat_noerr(v20, (uint64_t)(v3 + 800), "d", 2)];
    __int16 v22 = &v21[(int)spr_pcat_noerr(v21, (uint64_t)(v3 + 800), "s", "\n")];
    uint64_t v23 = &v22[(int)spr_pcat_noerr(v22, (uint64_t)(v3 + 800), "s", "  next node is YES: ")];
    unint64_t v24 = &v23[(int)spr_lcat_noerr(v23, (uint64_t)(v3 + 800), "d", 1)];
    unsigned int v25 = &v24[(int)spr_pcat_noerr(v24, (uint64_t)(v3 + 800), "s", "\n")];
    uint64_t v26 = &v25[(int)spr_pcat_noerr(v25, (uint64_t)(v3 + 800), "s", "  phoneme separator enabled: ")];
    unsigned int v27 = &v26[(int)spr_lcat_noerr(v26, (uint64_t)(v3 + 800), "d", 0)];
    unsigned int v28 = &v27[(int)spr_pcat_noerr(v27, (uint64_t)(v3 + 800), "s", "\n")];
    char v29 = &v28[(int)spr_pcat_noerr(v28, (uint64_t)(v3 + 800), "s", "  grapheme initials table: ")];
    unint64_t v30 = &v29[(int)spr_lcat_noerr(v29, (uint64_t)(v3 + 800), "d", 0)];
    unsigned int v31 = &v30[(int)spr_pcat_noerr(v30, (uint64_t)(v3 + 800), "s", "\n")];
    unsigned int v32 = &v31[(int)spr_pcat_noerr(v31, (uint64_t)(v3 + 800), "s", "  grapheme start node table: ")];
    uint64_t v33 = &v32[(int)spr_lcat_noerr(v32, (uint64_t)(v3 + 800), "d", 1)];
    uint64_t v34 = &v33[(int)spr_pcat_noerr(v33, (uint64_t)(v3 + 800), "s", "\n")];
    char v35 = &v34[(int)spr_pcat_noerr(v34, (uint64_t)(v3 + 800), "s", "  grapheme fallback enabled: ")];
    unsigned int v36 = &v35[(int)spr_lcat_noerr(v35, (uint64_t)(v3 + 800), "d", 1)];
    int v37 = &v36[(int)spr_pcat_noerr(v36, (uint64_t)(v3 + 800), "s", "\n")];
    int v38 = &v37[(int)spr_pcat_noerr(v37, (uint64_t)(v3 + 800), "s", "  compatible hypothesis sorting: ")];
    int v39 = &v38[(int)spr_lcat_noerr(v38, (uint64_t)(v3 + 800), "d", 1)];
    uint64_t v40 = &v39[(int)spr_pcat_noerr(v39, (uint64_t)(v3 + 800), "s", "\n")];
    int v41 = &v40[(int)spr_pcat_noerr(v40, (uint64_t)(v3 + 800), "s", "  character size: ")];
    int v42 = &v41[(int)spr_lcat_noerr(v41, (uint64_t)(v3 + 800), "d", 1)];
    int v43 = &v42[(int)spr_pcat_noerr(v42, (uint64_t)(v3 + 800), "s", "\n")];
    int v44 = &v43[(int)spr_pcat_noerr(v43, (uint64_t)(v3 + 800), "s", "  node links: ")];
    int v45 = spr_lcat_noerr(v44, (uint64_t)(v3 + 800), "d", 1);
    spr_pcat_noerr(&v44[v45], (uint64_t)(v3 + 800), "s", "\n");
    uint64_t result = v46;
  }
  *a2 = v3;
  return result;
}

uint64_t LexDT_HasParam(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  while (dword_2206E231C[v2] != a2)
  {
    if (++v2 == 9) {
      return 0;
    }
  }
  return 1;
}

uint64_t LexDT_SetParamList(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  uint64_t v6 = (__int16 *)(a2 + 4);
  do
  {
    switch(*((_DWORD *)v6 - 1))
    {
      case 0:
        *(_DWORD *)(a1 + 64) = *(_DWORD *)v6;
        break;
      case 1:
        DTSearch_SetPruning(*(void *)(a1 + 40), *v6);
        break;
      case 2:
        DTSearch_SetHistogramPruning(*(void *)(a1 + 40), *(_DWORD *)v6);
        break;
      case 3:
        uint64_t ErrorData = DTSearch_SetHistogramBins(*(void *)(a1 + 40), *(_DWORD *)v6);
        goto LABEL_9;
      case 4:
        DTSearch_SetHistogramDiff(*(void *)(a1 + 40), *v6);
        break;
      case 5:
        *(_DWORD *)(*(void *)(a1 + 48) + 88) = *(_DWORD *)v6;
        break;
      case 6:
        *(_DWORD *)(*(void *)(a1 + 48) + 92) = *(_DWORD *)v6;
        break;
      case 7:
        *(_DWORD *)(*(void *)(a1 + 48) + 56) = *(_DWORD *)v6;
        break;
      case 8:
        *(_DWORD *)(*(void *)(a1 + 48) + 60) = *(_DWORD *)v6;
        break;
      default:
        uint64_t ErrorData = err_GenerateErrorData();
LABEL_9:
        uint64_t v4 = ErrorData;
        break;
    }
    v6 += 4;
    --v5;
  }
  while (v5);
  return v4;
}

BOOL _LexDT_AcceptWordType(uint64_t a1, int a2)
{
  return a2 == 4;
}

unint64_t _LexDT_FindWord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t result = DTGraphemeParser_Parse(*(void **)(a1 + 32), *(char **)(a2 + 8));
  if (!result)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    size_t v8 = *(unsigned int *)(v7 + 40);
    if (!*(_DWORD *)(v7 + 40)) {
      return 0;
    }
    unsigned int v9 = *(unsigned char **)(v7 + 24);
    uint64_t v17 = 0;
    unint64_t result = DTSearch_BeamSearch(*(void *)(a1 + 40), v9, v8, &v17);
    if (result) {
      return result;
    }
    unint64_t result = DTPostProcessor_CreateNBest(*(void *)(a1 + 48), *(void *)(*(void *)(a1 + 40) + 32), *(_DWORD *)(a1 + 64));
    if (result) {
      return result;
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 40);
    if (!v10) {
      return 0;
    }
    for (uint64_t i = 0; i != v10; ++i)
    {
      uint64_t v16 = 0;
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *(unsigned char **)(*(void *)(v12 + 32) + 8 * i);
      unsigned int TranscriptionSize = DTPostProcessor_GetTranscriptionSize(v12, i);
      unint64_t result = PNEW_Transcription_Con(v5, v5, v13, TranscriptionSize, 1, 1, &v16);
      if (result) {
        break;
      }
      uint64_t v15 = v16;
      *(_DWORD *)(v16 + 28) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 48) + 4 * i);
      unint64_t result = PtrQueue_Put(a3, v15);
      if (result) {
        break;
      }
    }
  }
  return result;
}

void PNEW_LexDT_Con(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t *a6)
{
  int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 88, &v14);
  if (!v14)
  {
    LexDT_Con(v12, a2, a3, a4, a5);
    int v14 = v13;
    if (v13)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
    }
    else
    {
      *a6 = v12;
    }
  }
}

void *GetLexDTClass()
{
  return &__LexDT;
}

uint64_t DTLeafBuffer_Con(void *a1, uint64_t a2)
{
  *a1 = a2;
  return 0;
}

uint64_t DTLeafBuffer_GetNumLeafs(unsigned int **a1)
{
  return **a1;
}

uint64_t DTLeafBuffer_GetPLeaf(void *a1, unsigned int a2)
{
  return *a1 + a2 + 4;
}

uint64_t PNEW_DTLeafBuffer_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  uint64_t v5 = (void *)OOCAllocator_Malloc(a1, 8, &v7);
  uint64_t result = v7;
  if (!v7)
  {
    *uint64_t v5 = a2;
    *a3 = v5;
  }
  return result;
}

uint64_t PDELETE_DTLeafBuffer(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t DTQuestionWB_Con(void *a1, uint64_t a2)
{
  uint64_t result = _DTQuestion_Con(a1, a2);
  if (!result) {
    *a1 = &__DTQuestionWB;
  }
  return result;
}

uint64_t DTQuestionWB_IsTrue(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4 = *(char *)(*(void *)(a1 + 8) + 1);
  unsigned int v5 = v4 + a2;
  if (v4 < 0)
  {
    if ((int)v5 < a4)
    {
      if ((v5 & 0x80000000) != 0) {
        return 1;
      }
      if (!*(unsigned char *)(a3 + v5))
      {
        uint64_t result = 1;
        if (v5 == a4 - 1) {
          return result;
        }
        return *(unsigned __int8 *)(a3 + v5 + result) != 0;
      }
    }
    return 0;
  }
  if ((v5 & 0x80000000) != 0) {
    return 0;
  }
  if ((int)v5 >= a4) {
    return 1;
  }
  if (*(unsigned char *)(a3 + v5)) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  LODWORD(result) = -1;
  return *(unsigned __int8 *)(a3 + v5 + result) != 0;
}

uint64_t PNEW_DTQuestionWB_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (void *)OOCAllocator_Malloc(a1, 16, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = _DTQuestion_Con(v6, a2);
    if (result)
    {
      unsigned int v8 = result;
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *uint64_t v6 = &__DTQuestionWB;
      *a3 = v6;
    }
  }
  return result;
}

void *GetDTQuestionWBClass()
{
  return &__DTQuestionWB;
}

uint64_t _LexChain_Con(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__LexChain;
    a1[1] = a3;
    a1[2] = a2;
    a1[3] = 0;
  }
  return result;
}

uint64_t LexChain_Des(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t result = OOC_PlacementDeleteObject(*(void *)(a1 + 16), v2);
    if (result) {
      return result;
    }
    *(void *)(a1 + 24) = 0;
  }

  return Object_Des();
}

uint64_t LexChain_AddPostProcessor(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = (uint64_t *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4)
  {
    uint64_t result = PNEW_PtrList_Con(*(void *)(a1 + 16), *(void *)(a1 + 16), 8u, 8, v5);
    if (result) {
      return result;
    }
    uint64_t v4 = *v5;
  }

  return PtrList_Append(v4, a2);
}

uint64_t LexChain_FetchTranscription(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned int (**)(void *, void))(*a1 + 72))(a1, *(unsigned int *)(a2 + 20)))
  {
    memset(v17, 0, sizeof(v17));
    uint64_t result = PtrQueue_Con((uint64_t)v17, a1[2], 5u, 5);
    if (!result)
    {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, _OWORD *))(*a1 + 64))(a1, a2, v17);
      if (!result)
      {
        if (PtrQueue_IsEmpty((uint64_t)v17))
        {
          uint64_t v9 = a1[1];
          if (v9)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, a2, a3, a4);
            if (result) {
              return result;
            }
          }
        }
        else
        {
          while (!PtrQueue_IsEmpty((uint64_t)v17))
          {
            uint64_t v11 = PtrQueue_Item((uint64_t)v17);
            uint64_t v12 = v11;
            if (a3 && (*(_DWORD *)(v11 + 20) & a3) == 0)
            {
              uint64_t v13 = a1[1];
              if (v13)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v12, a3, a4);
                if (result) {
                  return result;
                }
              }
              uint64_t result = PDELETE_Transcription(a1[2], v12);
              if (result) {
                return result;
              }
            }
            else
            {
              uint64_t result = PtrQueue_Put(a4, v11);
              if (result) {
                return result;
              }
            }
            uint64_t result = PtrQueue_Remove((uint64_t)v17);
            if (result) {
              return result;
            }
          }
        }
        uint64_t v14 = a1[3];
        if (v14 && PtrList_NrItems(v14))
        {
          unsigned int v15 = 0;
          while (1)
          {
            uint64_t v16 = PtrList_ItemN(a1[3], v15);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 80))(v16, a2, a3, a4);
            if (result) {
              break;
            }
            if (++v15 >= PtrList_NrItems(a1[3])) {
              return (*(uint64_t (**)(_OWORD *))(*(void *)&v17[0] + 16))(v17);
            }
          }
        }
        else
        {
          return (*(uint64_t (**)(_OWORD *))(*(void *)&v17[0] + 16))(v17);
        }
      }
    }
  }
  else
  {
    uint64_t result = a1[1];
    if (result)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 24);
      return v10();
    }
  }
  return result;
}

uint64_t LexChain_GetParamList()
{
  return err_GenerateErrorNotSupported();
}

uint64_t LexChain_HasParam()
{
  return 0;
}

uint64_t LexChain_SetParamList()
{
  return err_GenerateErrorNotSupported();
}

uint64_t _LexChain_PostProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v13, 0, sizeof(v13));
  int v7 = PtrQueue_NrItems(a4);
  uint64_t result = PtrQueue_Con((uint64_t)v13, a1[2], 5u, 5);
  if (!result)
  {
    if (v7)
    {
      int v9 = 0;
      while (1)
      {
        uint64_t v10 = PtrQueue_Item(a4);
        uint64_t result = PtrQueue_Remove(a4);
        if (result) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t *, void))(*a1 + 72))(a1, *(unsigned int *)(v10 + 20)))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _OWORD *))(*a1 + 24))(a1, v10, a3, v13);
          if (result) {
            return result;
          }
          while (!PtrQueue_IsEmpty((uint64_t)v13))
          {
            uint64_t v11 = PtrQueue_Item((uint64_t)v13);
            uint64_t result = PtrQueue_Put(a4, v11);
            if (!result)
            {
              uint64_t result = PtrQueue_Remove((uint64_t)v13);
              if (!result) {
                continue;
              }
            }
            return result;
          }
          uint64_t result = PDELETE_Transcription(a1[2], v10);
          if (result) {
            return result;
          }
        }
        else
        {
          uint64_t result = PtrQueue_Put(a4, v10);
          if (result) {
            return result;
          }
          while (!PtrQueue_IsEmpty((uint64_t)v13))
          {
            uint64_t v12 = PtrQueue_Item((uint64_t)v13);
            uint64_t result = PDELETE_Transcription(a1[2], v12);
            if (!result)
            {
              uint64_t result = PtrQueue_Remove((uint64_t)v13);
              if (!result) {
                continue;
              }
            }
            return result;
          }
        }
        if (++v9 == v7) {
          return (*(uint64_t (**)(_OWORD *))(*(void *)&v13[0] + 16))(v13);
        }
      }
    }
    else
    {
      return (*(uint64_t (**)(_OWORD *))(*(void *)&v13[0] + 16))(v13);
    }
  }
  return result;
}

void *GetLexChainClass()
{
  return &__LexChain;
}

uint64_t _LexTokenChain_Con(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _LexChain_Con((void *)a1, a2, a3);
  if (!result)
  {
    *(void *)a1 = &__LexTokenChain;
    *(void *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 40) = 0;
    uint64_t result = PNEW_PtrQueue_Con(a2, a2, 5u, 5, (uint64_t *)(a1 + 48));
    if (!result)
    {
      uint64_t result = PNEW_PtrQueue_Con(a2, a2, 5u, 5, (uint64_t *)(a1 + 56));
      if (!result)
      {
        return PNEW_PtrQueue_Con(a2, a2, 5u, 5, (uint64_t *)(a1 + 64));
      }
    }
  }
  return result;
}

uint64_t LexTokenChain_Des(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  if (!v2 || (uint64_t result = OOC_PlacementDeleteObject(a1[4], v2), !result))
  {
    uint64_t v4 = a1[7];
    if (!v4 || (uint64_t result = OOC_PlacementDeleteObject(a1[4], v4), !result))
    {
      uint64_t v5 = a1[8];
      if (!v5 || (uint64_t result = OOC_PlacementDeleteObject(a1[4], v5), !result))
      {
        return LexChain_Des((uint64_t)a1);
      }
    }
  }
  return result;
}

uint64_t LexTokenChain_FetchTranscription(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned int (**)(void *, void))(*a1 + 72))(a1, *(unsigned int *)(a2 + 20)))
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 88))(a1, a2, a1[6]);
    if (!result)
    {
      if (!PtrQueue_IsEmpty(a1[6]))
      {
        while (!PtrQueue_IsEmpty(a1[6]))
        {
          uint64_t v12 = PtrQueue_Item(a1[6]);
          uint64_t v13 = v12;
          if (a3 && (*(_DWORD *)(v12 + 20) & a3) == 0)
          {
            uint64_t v14 = a1[1];
            if (v14)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v14 + 24))(v14, v13, a3, a1[8]);
              if (result) {
                return result;
              }
            }
            uint64_t result = PDELETE_Transcription(a1[4], v13);
            if (result) {
              return result;
            }
          }
          else
          {
            uint64_t result = PtrQueue_Put(a1[8], v12);
            if (result) {
              return result;
            }
          }
          (*(void (**)(void *, void, void, uint64_t))(*a1 + 96))(a1, a1[7], a1[8], a3);
          while (!PtrQueue_IsEmpty(a1[8]))
          {
            uint64_t v15 = PtrQueue_Item(a1[8]);
            uint64_t result = PDELETE_Transcription(a1[4], v15);
            if (!result)
            {
              uint64_t result = PtrQueue_Remove(a1[8]);
              if (!result) {
                continue;
              }
            }
            return result;
          }
          uint64_t result = PtrQueue_Remove(a1[6]);
          if (result) {
            return result;
          }
        }
        while (!PtrQueue_IsEmpty(a1[7]))
        {
          uint64_t v16 = PtrQueue_Item(a1[7]);
          uint64_t result = PtrQueue_Put(a4, v16);
          if (!result)
          {
            uint64_t result = PtrQueue_Remove(a1[7]);
            if (!result) {
              continue;
            }
          }
          return result;
        }
      }
      uint64_t result = a1[3];
      if (result)
      {
        uint64_t result = PtrList_NrItems(result);
        if (result)
        {
          unsigned int v9 = 0;
          while (1)
          {
            uint64_t v10 = PtrList_ItemN(a1[3], v9);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 80))(v10, a2, a3, a4);
            if (result) {
              break;
            }
            if (++v9 >= PtrList_NrItems(a1[3])) {
              return 0;
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t result = a1[1];
    if (result)
    {
      uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 24);
      return v11();
    }
  }
  return result;
}

uint64_t _LexTokenChain_AcceptWordType()
{
  return 0;
}

uint64_t _LexTokenChain_FindWord()
{
  return err_GenerateErrorNotSupported();
}

uint64_t _LexTokenChain_PhonemePostProcess()
{
  return 0;
}

uint64_t _LexTokenChain_SynthesizeTokens(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return TranscriptionQueue_SynthesizeTokens(*(void *)(a1 + 32), a2, a3, a4, *(_DWORD *)(a1 + 40));
}

void *GetLexTokenChainClass()
{
  return &__LexTokenChain;
}

uint64_t Transcription_Con(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int a4, int a5, int a6)
{
  unsigned int v16 = 0;
  if (a5 == 1)
  {
    if (a3[a4 - 1]) {
      unsigned int v12 = a4 + 1;
    }
    else {
      unsigned int v12 = a4;
    }
  }
  else
  {
    unsigned int v12 = a4;
    if (a5 == 4)
    {
      if (!a4 || (unsigned int v12 = a4, cstdlib_memcmp(&a3[a4 - 1], "", 1uLL))) {
        unsigned int v12 = a4 + 1;
      }
    }
  }
  uint64_t v13 = (void *)OOCAllocator_Calloc(a2, 1, v12, &v16);
  *(void *)(a1 + 8) = v13;
  uint64_t v14 = v16;
  if (!v16)
  {
    cstdlib_memcpy(v13, a3, a4);
    *(_DWORD *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 20) = a5;
    *(_DWORD *)(a1 + 24) = a6;
    *(_DWORD *)(a1 + 28) = 0;
    *(void *)a1 = a2;
    return v16;
  }
  return v14;
}

uint64_t Transcription_ConFromLhTrans(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return Transcription_Con(a1, a2, *(unsigned char **)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)a3, a4);
}

uint64_t Transcription_ConFromLhTransNoCopy(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v4 = *((void *)a3 + 1);
  int v5 = *a3;
  *(_DWORD *)(a1 + 16) = -a3[4];
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v4;
  return 0;
}

uint64_t Transcription_ConNoCopy(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a7) {
    int v7 = a4;
  }
  else {
    int v7 = -a4;
  }
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = a5;
  *(_DWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  return 0;
}

uint64_t Transcription_Con_Append(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v28 = 0;
  int v7 = *(const char **)(a3 + 8);
  unsigned int v8 = *(const char **)(a4 + 8);
  *(void *)(a1 + 20) = *(void *)(a3 + 20);
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  int v9 = *(_DWORD *)(a3 + 20);
  if (v9 != 1)
  {
    if (v9 == 4)
    {
      uint64_t __src = " ";
      size_t v10 = cstdlib_strlen(" ");
      unsigned int v11 = cstdlib_strlen(v7);
      unsigned int v12 = cstdlib_strlen(v8);
      char v13 = 0;
      int v14 = 1;
      unsigned int v15 = 1;
    }
    else
    {
      uint64_t __src = 0;
      size_t v10 = 0;
      int v14 = 0;
      unsigned int v15 = 0;
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      char v13 = 1;
    }
    goto LABEL_15;
  }
  size_t v10 = cstdlib_strlen(" ");
  int v16 = cstdlib_strlen(v7);
  unsigned int v17 = cstdlib_strlen(v8);
  if (v16)
  {
    unsigned int v11 = v16 - (v7[v16 - 1] == 35);
    if (v17) {
      goto LABEL_6;
    }
LABEL_14:
    char v13 = 0;
    unsigned int v12 = 0;
    unsigned int v15 = 2;
    int v14 = 1;
    uint64_t __src = "_";
    goto LABEL_15;
  }
  unsigned int v11 = 0;
  if (!v17) {
    goto LABEL_14;
  }
LABEL_6:
  char v13 = 0;
  uint64_t __src = "_";
  int v14 = 1;
  unsigned int v15 = 2;
  if (*v8 == 35) {
    unsigned int v12 = v17 - 1;
  }
  else {
    unsigned int v12 = v17;
  }
  if (*v8 == 35) {
    ++v8;
  }
LABEL_15:
  int v18 = v15 + v10;
  uint64_t v19 = v15 + v10 + v11 + v12;
  if (v15 + v10 + v11 + v12)
  {
    __uint64_t n = v10;
    char v20 = v13;
    int v25 = v14;
    uint64_t v21 = (void *)OOCAllocator_Malloc(a2, v18 + v11 + v12, &v28);
    *(void *)(a1 + 8) = v21;
    uint64_t result = v28;
    if (v28) {
      return result;
    }
    cstdlib_memcpy(v21, v7, v11);
    uint64_t v23 = (void *)(*(void *)(a1 + 8) + v11);
    if ((v20 & 1) == 0)
    {
      cstdlib_memcpy(v23, __src, __n);
      uint64_t v23 = (void *)(*(void *)(a1 + 8) + v11 + __n);
    }
    cstdlib_memcpy(v23, v8, v12);
    if (v25) {
      cstdlib_memset((void *)(*(void *)(a1 + 8) + v19 - v15), 0, v15);
    }
    *(_DWORD *)(a1 + 16) = v19;
    uint64_t result = v28;
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a4 + 28) + *(_DWORD *)(a3 + 28);
  return result;
}

uint64_t Transcription_Des(uint64_t a1)
{
  if (*(int *)(a1 + 16) >= 1) {
    OOCAllocator_Free(*(void *)a1, *(void *)(a1 + 8));
  }
  return 0;
}

uint64_t Transcription_Append(uint64_t a1, uint64_t a2)
{
  unsigned int v18 = 0;
  int v2 = *(_DWORD *)(a1 + 20);
  BOOL v3 = v2 == 1 || v2 == 4;
  if (!v3 || v2 != *(_DWORD *)(a2 + 20))
  {
    return err_GenerateErrorData();
  }
  uint64_t v6 = *(const char **)(a1 + 8);
  int v7 = *(const char **)(a2 + 8);
  if (v2 != 1)
  {
    if (v2 != 4) {
      goto LABEL_20;
    }
    unsigned int v8 = " ";
    size_t v9 = cstdlib_strlen(" ");
    unsigned int v10 = cstdlib_strlen(v6);
    unsigned int v11 = 1;
    unsigned int v12 = cstdlib_strlen(v7);
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  size_t v9 = cstdlib_strlen(" ");
  int v14 = cstdlib_strlen(v6);
  unsigned int v15 = cstdlib_strlen(v7);
  unsigned int v12 = v15;
  if (v14)
  {
    unsigned int v10 = v14 - (v6[v14 - 1] == 35);
    if (!v15) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v10 = 0;
    if (!v15)
    {
LABEL_20:
      uint64_t result = 0;
LABEL_21:
      *(_DWORD *)(a1 + 28) += *(_DWORD *)(a2 + 28);
      return result;
    }
  }
  if (*v7 == 35)
  {
    unsigned int v12 = v15 - 1;
    ++v7;
    unsigned int v11 = 2;
    unsigned int v8 = "_";
    if (v15 == 1) {
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v8 = "_";
    unsigned int v11 = 2;
  }
LABEL_23:
  uint64_t v16 = v10 + v9 + v12 + v11;
  uint64_t v17 = OOCAllocator_Realloc(*(void *)a1, *(void *)(a1 + 8), v16, &v18);
  *(void *)(a1 + 8) = v17;
  uint64_t result = v18;
  if (!v18)
  {
    cstdlib_memcpy((void *)(v17 + v10), v8, v9);
    cstdlib_memcpy((void *)(*(void *)(a1 + 8) + v10 + v9), v7, v12);
    cstdlib_memset((void *)(*(void *)(a1 + 8) + v16 - v11), 0, v11);
    *(_DWORD *)(a1 + 16) = v16;
    uint64_t result = v18;
    goto LABEL_21;
  }
  return result;
}

uint64_t Transcription_CommitToLhTranscription(uint64_t result, uint64_t a2)
{
  LODWORD(v2) = *(_DWORD *)(result + 16);
  if (v2)
  {
    *(_DWORD *)a2 = *(_DWORD *)(result + 20);
    if ((int)v2 >= 0) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = -(int)v2;
    }
    *(void *)(a2 + 8) = *(void *)(result + 8);
    *(void *)(a2 + 16) = v2;
    *(_DWORD *)(result + 16) = -(int)v2;
  }
  return result;
}

uint64_t Transcription_Compare(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2) {
    return 0;
  }
  int v3 = a1[5];
  int v4 = a2[5];
  uint64_t result = (v3 - v4);
  if (v3 == v4)
  {
    int v6 = a1[6];
    int v7 = a2[6];
    uint64_t result = (v6 - v7);
    if (v6 == v7)
    {
      int v8 = a1[4];
      if (v8 < 0) {
        int v8 = -v8;
      }
      int v9 = a2[4];
      if (v9 < 0) {
        int v9 = -v9;
      }
      return (v8 - v9);
    }
  }
  return result;
}

uint64_t PNEW_Transcription_Con(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int a4, int a5, int a6, uint64_t *a7)
{
  unsigned int v16 = 0;
  uint64_t v14 = OOCAllocator_Malloc(a1, 32, &v16);
  uint64_t result = v16;
  if (!v16)
  {
    uint64_t result = Transcription_Con(v14, a2, a3, a4, a5, a6);
    unsigned int v16 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v14);
      *a7 = 0;
      return v16;
    }
    else
    {
      *a7 = v14;
    }
  }
  return result;
}

uint64_t PNEW_Transcription_ConNoCopy(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t *a8)
{
  unsigned int v18 = 0;
  uint64_t v15 = OOCAllocator_Malloc(a1, 32, &v18);
  uint64_t result = v18;
  if (!v18)
  {
    if (a7) {
      int v17 = a4;
    }
    else {
      int v17 = -a4;
    }
    *(_DWORD *)(v15 + 16) = v17;
    *(_DWORD *)(v15 + 20) = a5;
    *(_DWORD *)(v15 + 24) = a6;
    *(_DWORD *)(v15 + 28) = 0;
    *(void *)uint64_t v15 = a2;
    *(void *)(v15 + 8) = a3;
    *a8 = v15;
  }
  return result;
}

uint64_t PNEW_Transcription_ConFromLhTrans(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  unsigned int v12 = 0;
  uint64_t v10 = OOCAllocator_Malloc(a1, 32, &v12);
  uint64_t result = v12;
  if (!v12)
  {
    uint64_t result = Transcription_Con(v10, a2, *(unsigned char **)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)a3, a4);
    unsigned int v12 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v10);
      *a5 = 0;
      return v12;
    }
    else
    {
      *a5 = v10;
    }
  }
  return result;
}

uint64_t PNEW_Transcription_ConFromLhTransNoCopy(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t *a5)
{
  unsigned int v13 = 0;
  uint64_t v9 = OOCAllocator_Malloc(a1, 32, &v13);
  uint64_t result = v13;
  if (!v13)
  {
    uint64_t v11 = *((void *)a3 + 1);
    int v12 = *a3;
    *(_DWORD *)(v9 + 16) = -a3[4];
    *(_DWORD *)(v9 + 20) = v12;
    *(_DWORD *)(v9 + 24) = a4;
    *(_DWORD *)(v9 + 28) = 0;
    *(void *)uint64_t v9 = a2;
    *(void *)(v9 + 8) = v11;
    *a5 = v9;
  }
  return result;
}

uint64_t PNEW_Transcription_Con_Append(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v12 = 0;
  uint64_t v10 = OOCAllocator_Malloc(a1, 32, &v12);
  uint64_t result = v12;
  if (!v12)
  {
    uint64_t result = Transcription_Con_Append(v10, a2, a3, a4);
    unsigned int v12 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v10);
      *a5 = 0;
      return v12;
    }
    else
    {
      *a5 = v10;
    }
  }
  return result;
}

uint64_t PDELETE_Transcription(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 16) >= 1) {
    OOCAllocator_Free(*(void *)a2, *(void *)(a2 + 8));
  }
  OOCAllocator_Free(a1, a2);
  return 0;
}

uint64_t TranscriptionQueue_SynthesizeTokens(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  int v10 = PtrQueue_NrItems(a2);
  int v11 = PtrQueue_NrItems(a3);
  int v12 = v11;
  if (v10 && v11)
  {
    uint64_t v33 = 0;
    memset(v32, 0, sizeof(v32));
    uint64_t result = PtrList_Con((uint64_t)v32, a1, v11 * v10, 1);
    if (!result)
    {
      unsigned int v14 = 0;
      unsigned int v15 = a5 - 1;
      uint64_t v28 = a3;
      int v30 = a4;
      int v27 = v12;
      while (1)
      {
        unsigned int v29 = v14;
        uint64_t v16 = PtrQueue_ItemN(a3, v14);
        uint64_t v17 = v16;
        if (!a4 || (*(_DWORD *)(v16 + 20) & v30) != 0) {
          break;
        }
LABEL_16:
        a4 = v30;
        unsigned int v14 = v29 + 1;
        a3 = v28;
        if (v29 + 1 == v27)
        {
          while (1)
          {
            uint64_t v22 = PtrQueue_Item(a2);
            uint64_t result = PtrQueue_Remove(a2);
            if (result) {
              break;
            }
            uint64_t result = PDELETE_Transcription(a1, v22);
            if (result) {
              break;
            }
            if (!--v10)
            {
              if (PtrList_NrItems((uint64_t)v32))
              {
                unsigned int v25 = 0;
                do
                {
                  uint64_t v26 = PtrList_ItemN((uint64_t)v32, v25);
                  if (v15 >= v25)
                  {
                    uint64_t result = PtrQueue_Put(a2, v26);
                    if (result) {
                      return result;
                    }
                  }
                  else
                  {
                    uint64_t result = PDELETE_Transcription(a1, v26);
                    if (result) {
                      return result;
                    }
                  }
                  ++v25;
                }
                while (v25 < PtrList_NrItems((uint64_t)v32));
              }
              return (*(uint64_t (**)(_OWORD *))(*(void *)&v32[0] + 16))(v32);
            }
          }
          return result;
        }
      }
      unsigned int v18 = 0;
      while (1)
      {
        uint64_t v19 = PtrQueue_ItemN(a2, v18);
        unsigned int v20 = *(_DWORD *)(v17 + 28) + *(_DWORD *)(v19 + 28);
        if (!a5
          || PtrList_NrItems((uint64_t)v32) < a5
          || (unsigned int Insert_Score = a5, v20 < *(_DWORD *)(PtrList_ItemN((uint64_t)v32, a5 - 1) + 28)))
        {
          unsigned int Insert_Score = __TranscriptionQueue_FindInsert_Score((uint64_t)v32, v20);
        }
        if (v15 >= Insert_Score)
        {
          uint64_t v31 = 0;
          uint64_t result = PNEW_Transcription_Con_Append(a1, a1, v19, v17, &v31);
          if (result) {
            break;
          }
          uint64_t result = PtrList_Insert((uint64_t)v32, Insert_Score, v31);
          if (result) {
            break;
          }
        }
        if (v10 == ++v18) {
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
    uint64_t result = 0;
    if (!v10 && v12)
    {
      if (PtrQueue_IsEmpty(a3))
      {
        return 0;
      }
      else
      {
        for (unsigned int i = 0; ; ++i)
        {
          uint64_t v24 = PtrQueue_Item(a3);
          uint64_t result = PtrQueue_Remove(a3);
          if (result) {
            break;
          }
          if (a5 - 1 >= i)
          {
            uint64_t result = PtrQueue_Put(a2, v24);
            if (result) {
              return result;
            }
          }
          else
          {
            uint64_t result = PDELETE_Transcription(a1, v24);
            if (result) {
              return result;
            }
          }
          if (PtrQueue_IsEmpty(a3)) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t __TranscriptionQueue_FindInsert_Score(uint64_t a1, unsigned int a2)
{
  if ((int)PtrList_NrItems(a1) < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    if (*(_DWORD *)(PtrList_ItemN(a1, v4) + 28) > a2) {
      break;
    }
    uint64_t v4 = (v4 + 1);
  }
  while ((int)v4 < (int)PtrList_NrItems(a1));
  return v4;
}

uint64_t StringTokenizer_Con(void *a1, uint64_t a2)
{
  uint64_t result = Object_Con(a1);
  unsigned int v5 = result;
  if (!result)
  {
    *a1 = &__StringTokenizer;
    a1[1] = a2;
    a1[3] = 50;
    a1[5] = 50;
    a1[2] = OOCAllocator_Malloc(a2, 50, &v5);
    uint64_t result = v5;
    if (!v5)
    {
      a1[4] = OOCAllocator_Malloc(a1[1], a1[5], &v5);
      uint64_t result = v5;
      if (!v5) {
        a1[6] = 0;
      }
    }
  }
  return result;
}

uint64_t StringTokenizer_Des(uint64_t *a1)
{
  OOCAllocator_Free(a1[1], a1[2]);
  OOCAllocator_Free(a1[1], a1[4]);

  return Object_Des();
}

uint64_t StringTokenizer_ExpandPhoneticMultiples(uint64_t a1, uint64_t a2, char *a3, char ***a4, void *a5)
{
  unsigned int v15 = 0;
  unsigned int v16 = 0;
  *a4 = 0;
  uint64_t v8 = __StringTokenizer_ExpandMultiple(a2, a3, &v15, &v16);
  if (!v8)
  {
    unsigned int v9 = v16;
    int v10 = v15;
    if (v16 >= 0x11)
    {
      int v11 = (uint64_t *)(v15 + 16);
      uint64_t v12 = v16 - 16;
      do
      {
        uint64_t v13 = *v11++;
        OOCAllocator_Free(a2, v13);
        --v12;
      }
      while (v12);
      unsigned int v9 = 16;
    }
    *a4 = v10;
    *a5 = v9;
  }
  return v8;
}

uint64_t __StringTokenizer_ExpandMultiple(uint64_t a1, char *a2, char ***a3, unsigned int *a4)
{
  unsigned int v5 = a2;
  unsigned int v95 = 0;
  *a4 = 0;
  *a3 = 0;
  int v6 = cstdlib_strchr(a2, 40);
  if (!v6)
  {
    if (!cstdlib_strchr(v5, 124))
    {
      *a3 = (char **)OOCAllocator_Malloc(a1, 8, &v95);
      if (!v95)
      {
        size_t v30 = cstdlib_strlen(v5);
        **a3 = (char *)OOCAllocator_Malloc(a1, v30 + 2, &v95);
        if (!v95)
        {
          cstdlib_strcpy(**a3, v5);
          uint64_t v31 = **a3;
          v31[cstdlib_strlen(v5) + 1] = 0;
          *a4 = 1;
        }
      }
      return v95;
    }
LABEL_8:
    *a4 = 0;
    return v95;
  }
  int v7 = v6;
  uint64_t v8 = v6 + 1;
  unsigned int v9 = cstdlib_strchr(v6 + 2, 37);
  int v10 = cstdlib_strchr(v8, 41);
  if (!v10) {
    goto LABEL_8;
  }
  int v11 = v10;
  while (*(v11 - 1) == 37)
  {
    int v11 = cstdlib_strchr(v11 + 1, 41);
    if (!v11) {
      goto LABEL_8;
    }
  }
  if (v9 && v9 < v11)
  {
    do
    {
      uint64_t v13 = v9 + 1;
      if (v9[1] == 34)
      {
        unsigned int v14 = cstdlib_strchr(v9 + 2, 34);
        if (!v14) {
          goto LABEL_8;
        }
        unsigned int v15 = v14;
        if (v14 > v11)
        {
          for (unsigned int i = v14 + 1; ; unsigned int i = v17 + 1)
          {
            uint64_t v17 = cstdlib_strchr(i, 41);
            int v11 = v17;
            if (!v17 || *(v17 - 1) != 37) {
              break;
            }
          }
        }
        uint64_t v13 = v15 + 1;
      }
      unsigned int v18 = cstdlib_strchr(v13, 37);
      if (!v18) {
        break;
      }
      unsigned int v9 = v18;
    }
    while (v18 < v11);
    if (!v11) {
      goto LABEL_8;
    }
  }
  for (uint64_t j = v8; ; uint64_t j = v21)
  {
    unsigned int v20 = cstdlib_strchr(j, 40);
    if (!v20 || v20 >= v11) {
      break;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v22 = cstdlib_strchr(v20 + 1, 37);
    uint64_t v23 = cstdlib_strchr(v11 + 1, 41);
    if (!v23) {
      goto LABEL_8;
    }
    int v11 = v23;
    while (*(v11 - 1) == 37)
    {
      int v11 = cstdlib_strchr(v11 + 1, 41);
      if (!v11) {
        goto LABEL_8;
      }
    }
    if (v22 && v22 < v11)
    {
      do
      {
        uint64_t v24 = v22 + 1;
        if (v22[1] == 34)
        {
          unsigned int v25 = cstdlib_strchr(v22 + 2, 34);
          if (!v25) {
            goto LABEL_8;
          }
          uint64_t v26 = v25;
          if (v25 > v11)
          {
            for (uint64_t k = v25 + 1; ; uint64_t k = v28 + 1)
            {
              uint64_t v28 = cstdlib_strchr(k, 41);
              int v11 = v28;
              if (!v28 || *(v28 - 1) != 37) {
                break;
              }
            }
          }
          uint64_t v24 = v26 + 1;
        }
        unsigned int v29 = cstdlib_strchr(v24, 37);
        if (!v29) {
          break;
        }
        uint64_t v22 = v29;
      }
      while (v29 < v11);
      if (!v11) {
        goto LABEL_8;
      }
    }
  }
  int v32 = cstdlib_strlen(v11);
  uint64_t v33 = (char *)OOCAllocator_Malloc(a1, v11 - v7, &v95);
  if (!v95)
  {
    uint64_t v34 = v33;
    int v89 = v32;
    cstdlib_strncpy(v33, v8, v11 - v7 - 1);
    v34[v11 - v7 - 1] = 0;
    LODWORD(v94) = 0;
    char v35 = cstdlib_strchr(v34, 124);
    uint64_t v87 = v34;
    if (v35)
    {
      unsigned int v36 = v35;
      uint64_t v90 = 0;
      unsigned int v37 = 0;
      int v38 = v34;
      uint64_t v88 = v5;
      while (1)
      {
        int v39 = cstdlib_strchr(v34, 40);
        if (!v39 || v36 <= v39) {
          goto LABEL_57;
        }
        int v40 = 1;
        do
        {
          int v39 = cstdlib_strchr(v39 + 1, 40);
          --v40;
        }
        while (v39 && v36 > v39);
        if (v40 != 1)
        {
          int v46 = 0;
          int v85 = -v40;
          do
          {
            unint64_t v47 = v34 + 1;
            int v48 = cstdlib_strchr(v47, 37);
            int v49 = cstdlib_strchr(v47, 41);
            if (!v49) {
              goto LABEL_85;
            }
            uint64_t v34 = v49;
            while (*(v34 - 1) == 37)
            {
              uint64_t v34 = cstdlib_strchr(v34 + 1, 41);
              if (!v34) {
                goto LABEL_85;
              }
            }
            if (v48 && v48 < v34)
            {
              do
              {
                long long v50 = v48 + 1;
                if (v48[1] == 34)
                {
                  uint64_t v51 = cstdlib_strchr(v48 + 2, 34);
                  if (!v51) {
                    goto LABEL_85;
                  }
                  uint64_t v52 = v51;
                  if (v51 > v34)
                  {
                    for (uint64_t m = v51 + 1; ; uint64_t m = v54 + 1)
                    {
                      unsigned int v54 = cstdlib_strchr(m, 41);
                      uint64_t v34 = v54;
                      if (!v54 || *(v54 - 1) != 37) {
                        break;
                      }
                    }
                  }
                  long long v50 = v52 + 1;
                }
                uint64_t v55 = cstdlib_strchr(v50, 37);
                if (!v55) {
                  break;
                }
                int v48 = v55;
              }
              while (v55 < v34);
              if (!v34)
              {
LABEL_85:
                unsigned int v86 = 0;
                int v57 = v89;
                uint64_t v58 = v90;
                goto LABEL_86;
              }
            }
          }
          while (v85 != v46++);
          if (v36 > v34) {
            goto LABEL_57;
          }
          ++v34;
        }
        else
        {
LABEL_57:
          uint64_t v41 = OOCAllocator_Realloc(a1, v90, 8 * (v37 + 1), &v94);
          unsigned int v42 = v94;
          if (v94) {
            return v42;
          }
          uint64_t v43 = v41;
          int64_t v44 = v36 - v38;
          int v45 = (char *)OOCAllocator_Malloc(a1, v36 - v38 + 2, &v94);
          *(void *)(v43 + 8 * v37) = v45;
          unsigned int v42 = v94;
          if (v94) {
            return v42;
          }
          cstdlib_strncpy(v45, v38, v36 - v38);
          *(unsigned char *)(*(void *)(v43 + 8 * v37) + v44) = 0;
          uint64_t v90 = v43;
          unsigned int v5 = v88;
          *(unsigned char *)(v44 + *(void *)(v43 + 8 * v37) + 1) = 0;
          uint64_t v34 = v36 + 1;
          ++v37;
          int v38 = v36 + 1;
        }
        unsigned int v36 = cstdlib_strchr(v34, 124);
        if (!v36) {
          goto LABEL_126;
        }
      }
    }
    uint64_t v90 = 0;
    unsigned int v37 = 0;
    int v38 = v34;
LABEL_126:
    uint64_t v78 = OOCAllocator_Realloc(a1, v90, 8 * (v37 + 1), &v94);
    unsigned int v42 = v94;
    if (v94) {
      return v42;
    }
    uint64_t v58 = v78;
    int v79 = cstdlib_strlen(v38);
    long long v80 = (char *)OOCAllocator_Malloc(a1, (v79 + 2), &v94);
    *(void *)(v58 + 8 * v37) = v80;
    unsigned int v42 = v94;
    if (v94)
    {
      return v42;
    }
    else
    {
      cstdlib_strcpy(v80, v38);
      *(unsigned char *)(*(void *)(v58 + 8 * v37) + (v79 + 1)) = 0;
      unsigned int v86 = v37 + 1;
      int v57 = v89;
LABEL_86:
      uint64_t v59 = (uint64_t)v87;
      unsigned int v95 = v94;
      if (!v94)
      {
        *a3 = (char **)OOCAllocator_Malloc(a1, 8 * v86, &v95);
        if (!v95)
        {
          *a4 = v86;
          if (v86)
          {
            uint64_t v60 = 0;
            unsigned int v61 = 0;
            int v83 = v57 + 1;
            int v84 = v7 - v5;
            uint64_t __src = v11 + 1;
            __uint64_t n = (v7 - v5);
            while (1)
            {
              unsigned int v62 = cstdlib_strlen(*(const char **)(v58 + 8 * v60));
              unsigned int v63 = (char *)OOCAllocator_Malloc(a1, v83 + v62 + v84, &v95);
              if (v95) {
                break;
              }
              unsigned int v64 = v63;
              cstdlib_strncpy(v63, v5, __n);
              uint64_t v65 = v58;
              cstdlib_strcpy(&v64[__n], *(const char **)(v58 + 8 * v60));
              cstdlib_strcpy(&v64[__n + v62], __src);
              v64[v62 + v84 + v89] = 0;
              if (cstdlib_strchr(v64, 40))
              {
                int v94 = 0;
                unsigned int v93 = 0;
                unsigned int v95 = __StringTokenizer_ExpandMultiple(a1, v64, &v94, &v93);
                if (v95) {
                  return v95;
                }
                uint64_t v66 = v93;
                unsigned int v67 = *a4 + v93 - 1;
                if (v67 > 0x10)
                {
                  if (*a4 < 0x10)
                  {
                    *a3 = (char **)OOCAllocator_Realloc(a1, (uint64_t)*a3, 128, &v95);
                    if (v95) {
                      return v95;
                    }
                    uint64_t v68 = (uint64_t)v94;
                    if (v66)
                    {
                      long long v73 = v94;
                      do
                      {
                        uint64_t v74 = *v73;
                        if (v61 > 0xF)
                        {
                          if (v74)
                          {
                            OOCAllocator_Free(a1, v74);
                            *long long v73 = 0;
                          }
                        }
                        else
                        {
                          (*a3)[v61++] = (char *)v74;
                        }
                        ++v73;
                        --v66;
                      }
                      while (v66);
                    }
                    *a4 = 16;
                  }
                  else
                  {
                    uint64_t v68 = (uint64_t)v94;
                    if (v93)
                    {
                      uint64_t v70 = 0;
                      uint64_t v71 = 8 * v93;
                      do
                      {
                        uint64_t v72 = *(void *)(v68 + v70);
                        if (v72)
                        {
                          OOCAllocator_Free(a1, v72);
                          *(void *)(v68 + v70) = 0;
                        }
                        v70 += 8;
                      }
                      while (v71 != v70);
                    }
                  }
                }
                else
                {
                  *a4 = v67;
                  *a3 = (char **)OOCAllocator_Realloc(a1, (uint64_t)*a3, 8 * v67, &v95);
                  if (v95) {
                    return v95;
                  }
                  uint64_t v68 = (uint64_t)v94;
                  if (v66)
                  {
                    for (uint64_t n = 0; n != v66; ++n)
                      (&(*a3)[v61])[n] = *(char **)(v68 + 8 * n);
                    v61 += n;
                  }
                }
                OOCAllocator_Free(a1, v68);
                OOCAllocator_Free(a1, (uint64_t)v64);
              }
              else
              {
                (*a3)[v61++] = v64;
              }
              uint64_t v59 = (uint64_t)v87;
              uint64_t v58 = v65;
              if (++v60 == v86) {
                goto LABEL_118;
              }
            }
          }
          else
          {
LABEL_118:
            if (v59) {
              OOCAllocator_Free(a1, v59);
            }
            if (v58)
            {
              uint64_t v75 = v86;
              if (v86)
              {
                unint64_t v76 = (uint64_t *)v58;
                do
                {
                  uint64_t v77 = *v76++;
                  OOCAllocator_Free(a1, v77);
                  --v75;
                }
                while (v75);
              }
              OOCAllocator_Free(a1, v58);
            }
          }
        }
      }
    }
  }
  return v95;
}

uint64_t StringTokenizer_TokenizeLHString(uint64_t *a1, char *__s, void *a3)
{
  *a3 = 0;
  int v6 = __s;
  do
  {
    int v8 = *v6++;
    int v7 = v8;
  }
  while ((v8 - 32) < 0x5F);
  if (v7)
  {
    uint64_t result = 0;
    a1[6] = 0;
    return result;
  }
  size_t v10 = cstdlib_strlen(__s);
  a1[6] = v10;
  unint64_t v11 = 2 * v10 + 2;
  LODWORD(v72[0]) = 0;
  size_t v12 = a1[5];
  if (v12 >= v11)
  {
    uint64_t v13 = (void *)a1[4];
  }
  else
  {
    a1[5] = v11;
    OOCAllocator_Free(a1[1], a1[4]);
    uint64_t v13 = (void *)OOCAllocator_Malloc(a1[1], a1[5], v72);
    a1[4] = (uint64_t)v13;
    uint64_t result = LODWORD(v72[0]);
    if (LODWORD(v72[0])) {
      return result;
    }
    size_t v12 = a1[5];
  }
  cstdlib_memset(v13, 0, v12);
  uint64_t result = LODWORD(v72[0]);
  if (!LODWORD(v72[0]))
  {
    unint64_t v14 = 2 * a1[6] + 2;
    LODWORD(v72[0]) = 0;
    size_t v15 = a1[3];
    if (v15 >= v14)
    {
      unsigned int v16 = (void *)a1[2];
    }
    else
    {
      a1[3] = v14;
      OOCAllocator_Free(a1[1], a1[2]);
      unsigned int v16 = (void *)OOCAllocator_Malloc(a1[1], a1[3], v72);
      a1[2] = (uint64_t)v16;
      uint64_t result = LODWORD(v72[0]);
      if (LODWORD(v72[0])) {
        return result;
      }
      size_t v15 = a1[3];
    }
    cstdlib_memset(v16, 0, v15);
    uint64_t result = LODWORD(v72[0]);
    if (!LODWORD(v72[0]))
    {
      cstdlib_strcpy((char *)a1[2], __s);
      uint64_t v73 = 0;
      memset(v72, 0, sizeof(v72));
      uint64_t v17 = a1[6];
      unsigned int v18 = (unsigned char *)a1[4];
      if (v17 >= 1)
      {
        uint64_t v19 = (unsigned __int8 *)a1[2];
        unsigned int v20 = &v19[v17];
        do
        {
          int v21 = *v19;
          if (v21 != 32) {
            *v18++ = v21;
          }
          ++v19;
        }
        while (v19 < v20);
      }
      *unsigned int v18 = 0;
      size_t v22 = cstdlib_strlen((const char *)a1[4]);
      uint64_t v23 = (const char *)str2lhps((const char *)a1[4], (uint64_t)v72);
      uint64_t v24 = (char *)a1[2];
      if (v23)
      {
        unsigned int v25 = v23;
        size_t v26 = cstdlib_strlen(v23);
        cstdlib_strcpy(v24, v25);
        v24 += v26;
        uint64_t v27 = str2lhps(0, (uint64_t)v72);
        if (v27)
        {
          uint64_t v28 = (const char *)v27;
          do
          {
            char *v24 = 32;
            unsigned int v29 = v24 + 1;
            size_t v30 = cstdlib_strlen(v28);
            cstdlib_strcpy(v29, v28);
            uint64_t v24 = &v29[v30];
            v26 += v30;
            uint64_t v28 = (const char *)str2lhps(0, (uint64_t)v72);
          }
          while (v28);
        }
      }
      else
      {
        size_t v26 = 0;
      }
      *(_WORD *)uint64_t v24 = 32;
      uint64_t v31 = v24 + 1;
      if (v26 == v22)
      {
        int v32 = (char *)a1[2];
        a1[6] = v31 - v32;
        uint64_t v33 = cstdlib_strpbrk(v32, "'");
        if (v33)
        {
          uint64_t v34 = v33;
          cstdlib_memset((void *)a1[4], 0, a1[5]);
          char v35 = (char *)a1[4];
          do
          {
            size_t v36 = cstdlib_strlen(v34);
            size_t v37 = v36 + 1;
            size_t v38 = cstdlib_strcspn(v34, "'");
            if (v38 >= v36 + 1) {
              goto LABEL_62;
            }
            size_t v39 = v38;
            size_t v40 = cstdlib_strcspn(v34, "iyuIYUeo$EO^@aA");
            if (v40 >= v36) {
              goto LABEL_62;
            }
            size_t v41 = v40;
            cstdlib_strncpy(v35, v34, v39);
            int v42 = v34[v39 + 1];
            if (v42 == 75 || v42 == 70)
            {
              size_t v53 = v39 + 3;
              if (v41 != v39 + 3)
              {
                if (v53 < v41)
                {
                  uint64_t v54 = v41 - v39 - 3;
                  uint64_t v55 = &v35[v39];
                  int v56 = &v34[v39 + 3];
                  do
                  {
                    char v57 = *v56++;
                    *v55++ = v57;
                    --v54;
                  }
                  while (v54);
                  size_t v53 = v41;
                }
                uint64_t v58 = &v35[v53];
                *(v58 - 3) = 39;
                *(v58 - 2) = v34[v39 + 1];
                *(v58 - 1) = 32;
                if (v53 < v37)
                {
                  uint64_t v59 = v36 - v53 + 1;
                  uint64_t v60 = &v35[v53];
                  unsigned int v61 = &v34[v53];
                  do
                  {
                    char v62 = *v61++;
                    *v60++ = v62;
                    --v59;
                  }
                  while (v59);
                }
                goto LABEL_60;
              }
            }
            else if (v42 == 50)
            {
              size_t v43 = v39 + 3;
              if (v41 != v39 + 3)
              {
                if (v43 < v41)
                {
                  uint64_t v44 = v41 - v39 - 3;
                  int v45 = &v35[v39];
                  int v46 = &v34[v39 + 3];
                  do
                  {
                    char v47 = *v46++;
                    *v45++ = v47;
                    --v44;
                  }
                  while (v44);
                  size_t v43 = v41;
                }
                int v48 = &v35[v43];
                *(_WORD *)(v48 - 3) = 12839;
                *(v48 - 1) = 32;
                if (v43 < v37)
                {
                  uint64_t v49 = v36 - v43 + 1;
                  long long v50 = &v35[v43];
                  uint64_t v51 = &v34[v43];
                  do
                  {
                    char v52 = *v51++;
                    *v50++ = v52;
                    --v49;
                  }
                  while (v49);
                }
LABEL_60:
                cstdlib_strcpy(v34, v35);
              }
            }
            else
            {
              size_t v63 = v39 + 2;
              if (v41 != v39 + 2)
              {
                if (v63 < v41)
                {
                  uint64_t v64 = v41 - v39 - 2;
                  uint64_t v65 = &v35[v39];
                  uint64_t v66 = &v34[v39 + 2];
                  do
                  {
                    char v67 = *v66++;
                    *v65++ = v67;
                    --v64;
                  }
                  while (v64);
                  size_t v63 = v41;
                }
                *(_WORD *)&v35[v63 - 2] = 8231;
                if (v63 < v37)
                {
                  uint64_t v68 = v36 - v63 + 1;
                  unint64_t v69 = &v35[v63];
                  uint64_t v70 = &v34[v63];
                  do
                  {
                    char v71 = *v70++;
                    *v69++ = v71;
                    --v68;
                  }
                  while (v68);
                }
                goto LABEL_60;
              }
            }
            cstdlib_strcpy(v35, (const char *)&__StringTokenizer_MoveStressMarkerInScratchArray_szEmpty);
LABEL_62:
            uint64_t v34 = cstdlib_strpbrk(v34 + 1, "'");
          }
          while (v34);
        }
        uint64_t result = 0;
        *a3 = a1[2];
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t PNEW_StringTokenizer_Con(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v8 = 0;
  int v6 = (void *)OOCAllocator_Malloc(a1, 56, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = StringTokenizer_Con(v6, a2);
    unsigned int v8 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *a3 = v6;
    }
  }
  return result;
}

void *GetStringTokenizerClass()
{
  return &__StringTokenizer;
}

uint64_t abbrtn_checkIfBisectedbyTokenType(uint64_t a1, unsigned int a2, unsigned int a3, int a4, _DWORD *a5)
{
  int v20 = 0;
  *a5 = 0;
  LDO_GetLabels(*(void *)(a1 + 192), &v18);
  uint64_t v9 = 0;
  size_t v10 = (uint64_t **)v18.n128_u64[1];
  unint64_t v11 = v19;
  if (v18.n128_u64[1] < v19)
  {
    do
    {
      v18.n128_u32[0] = 0;
      int U32Attribute = LDOObject_GetU32Attribute(*v10, "_TTYPE", &v18, &v20);
      uint64_t v9 = LH_ERROR_to_VERROR(U32Attribute);
      if ((v9 & 0x80000000) != 0) {
        break;
      }
      unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)*v10);
      unsigned int AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)*v10);
      if (v18.n128_u32[0] == 1 && v20 == a4)
      {
        BOOL v16 = AbsoluteFrom < a2 || AbsoluteFrom >= a3;
        if (!v16 || AbsoluteTo > a2 && AbsoluteTo <= a3)
        {
          *a5 = 1;
          return v9;
        }
      }
      ++v10;
    }
    while ((unint64_t)v10 < v11);
  }
  return v9;
}

uint64_t abbrtn_checkIfSubsumedbyOtherToken(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, _DWORD *a6)
{
  int v24 = 0;
  *a6 = 0;
  LDO_GetLabels(*(void *)(a1 + 192), &v22);
  uint64_t v10 = 0;
  size_t v12 = (uint64_t **)v22.n128_u64[1];
  unint64_t v11 = v23;
  if (v22.n128_u64[1] < v23)
  {
    do
    {
      uint64_t v13 = *v12;
      v22.n128_u32[0] = 0;
      int U32Attribute = LDOObject_GetU32Attribute(v13, "_TTYPE", &v22, &v24);
      uint64_t v10 = LH_ERROR_to_VERROR(U32Attribute);
      if ((v10 & 0x80000000) != 0) {
        break;
      }
      unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v13);
      unsigned int AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)v13);
      if (v22.n128_u32[0] == 1)
      {
        BOOL v17 = AbsoluteFrom == a2 && AbsoluteTo == a3;
        BOOL v18 = v17;
        BOOL v19 = v24 == a4 && v18;
        if (v24 == a5 && !v19 && AbsoluteFrom <= a2 && AbsoluteTo >= a3 && !v18)
        {
          *a6 = 1;
          return v10;
        }
      }
      ++v12;
    }
    while ((unint64_t)v12 < v11);
  }
  return v10;
}

uint64_t abbrtn_TnLookup(void *a1, const char *a2, unsigned __int16 a3, __int16 a4, const char *a5, uint64_t a6)
{
  unsigned __int16 v9 = a3;
  uint64_t v106 = *MEMORY[0x263EF8340];
  signed __int16 v12 = a3 - 1;
  __int16 v94 = a3 - 1;
  __n128 v92 = 0uLL;
  unint64_t v93 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  int v88 = 0;
  int v89 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  cstdlib_strcpy(__dst, "");
  cstdlib_strcpy(__src, "");
  cstdlib_strcpy(v103, "");
  cstdlib_strcpy(__s2, "");
  cstdlib_strcpy(__s, "");
  cstdlib_strcpy(v100, "");
  int v13 = LDO_ComputeNodesCoveredByLabel(a1[24], a6, (uint64_t)&v92);
  uint64_t v14 = LH_ERROR_to_VERROR(v13);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  unint64_t v15 = (v93 - v92.n128_u64[1]) >> 3;
  if (!v15) {
    goto LABEL_140;
  }
  int v85 = a2;
  if (a4 < 1) {
    goto LABEL_140;
  }
  unsigned int v16 = 0;
  __int16 v82 = a4;
  int v83 = 3;
  unint64_t v81 = a5;
  do
  {
    signed __int16 v84 = v12;
    int v17 = v9;
    while (1)
    {
      BOOL v18 = *(uint64_t **)(v92.n128_u64[1] + 8 * v16);
      int v19 = abbrtn_checkForTokens((uint64_t)a1, (uint64_t)v18, v17, (_WORD *)&v88 + 1, &v88, (_DWORD *)&v87 + 1, (_DWORD *)&v86 + 1);
      if (v19 < 0) {
        goto LABEL_145;
      }
      unint64_t v20 = v15;
      int v97 = 0;
      LODWORD(v87) = 0;
      LDO_GetLabels(a1[24], &v95);
      LODWORD(v14) = 0;
      int v21 = (uint64_t **)v95.n128_u64[1];
      unint64_t v22 = v96;
      while ((unint64_t)v21 < v22)
      {
        unint64_t v23 = *v21;
        int v98 = 0;
        int U32Attribute = LDOObject_GetU32Attribute(v23, "_TTYPE", &v98, &v97);
        LODWORD(v14) = LH_ERROR_to_VERROR(U32Attribute);
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_141;
        }
        if (v98 == 1 && v97 == 4)
        {
          int v26 = LDOLabel_ContainsNode((uint64_t)v23, (uint64_t)v18, &v87);
          LODWORD(v14) = LH_ERROR_to_VERROR(v26);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_141;
          }
          if (v87 == 1) {
            break;
          }
        }
        ++v21;
      }
      uint64_t v27 = v16;
      unint64_t v15 = v20;
      if (HIDWORD(v87) != 1) {
        break;
      }
      if (HIDWORD(v86) == 1)
      {
        LOWORD(v28) = HIWORD(v88);
        int v29 = 6;
        unsigned __int16 v30 = v88;
        goto LABEL_28;
      }
LABEL_22:
      ++v16;
      if ((int)v27 + 1 >= v20) {
        goto LABEL_141;
      }
    }
    if (v87 == 1) {
      goto LABEL_22;
    }
    int v31 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)v18, &v90);
    int v19 = LH_ERROR_to_VERROR(v31);
    if (v19 < 0) {
      goto LABEL_145;
    }
    LOWORD(v28) = v90;
    int v32 = LDOTreeNode_ComputeAbsoluteTo((size_t)v18, &v89);
    int v19 = LH_ERROR_to_VERROR(v32);
    if (v19 < 0) {
      goto LABEL_145;
    }
    unsigned __int16 v30 = v89;
    int v33 = LDOObject_GetU32Attribute(v18, "_TTYPE", &v91, (_DWORD *)&v91 + 1);
    int v19 = LH_ERROR_to_VERROR(v33);
    if (v19 < 0) {
      goto LABEL_145;
    }
    int v29 = HIDWORD(v91);
LABEL_28:
    uint64_t v14 = abbrtn_checkForTokens((uint64_t)a1, (uint64_t)v18, v30, (_WORD *)&v88 + 1, &v88, &v86, (_DWORD *)&v86 + 1);
    if ((v14 & 0x80000000) != 0) {
      goto LABEL_141;
    }
    ++v16;
    if ((int)v27 + 1 >= v15)
    {
      unsigned int v34 = 9999;
      int v80 = 3;
      goto LABEL_36;
    }
    if (v86 == 1)
    {
      int v80 = 1;
      goto LABEL_35;
    }
    char v35 = *(uint64_t **)(v92.n128_u64[1] + 8 * v16);
    int v36 = LDOObject_GetU32Attribute(v35, "_TTYPE", &v91, (_DWORD *)&v91 + 1);
    int v19 = LH_ERROR_to_VERROR(v36);
    if (v19 < 0) {
      goto LABEL_145;
    }
    int v80 = HIDWORD(v91);
    int v37 = LDOTreeNode_ComputeAbsoluteTo((size_t)v35, (_DWORD *)&v90 + 1);
    uint64_t v14 = LH_ERROR_to_VERROR(v37);
    if ((v14 & 0x80000000) != 0) {
      goto LABEL_141;
    }
LABEL_35:
    unsigned int v34 = v27 + 1;
LABEL_36:
    int v38 = (__int16)v28;
    if ((__int16)v28 > v84)
    {
      if (v83 == 3)
      {
        size_t v39 = v85;
        if (v29 == 3)
        {
          unsigned __int16 v45 = v28;
          signed __int16 v46 = v84;
        }
        else
        {
          int v79 = (__int16)v28;
          int v78 = v29;
          uint64_t v40 = 0;
          unsigned __int16 v41 = v28;
          int v42 = v81;
          while (1)
          {
            unsigned int v43 = v85[v41];
            BOOL v44 = v43 > 0x20 || ((1 << v43) & 0x100002601) == 0;
            if (!v44 || v43 == 95) {
              break;
            }
            ++v41;
            __dst[v40++] = v43;
            if (v40 == 128)
            {
              unsigned __int16 v45 = v28;
              signed __int16 v46 = v84;
LABEL_115:
              int v29 = v78;
              unsigned int v16 = v27 + 1;
              int v38 = v79;
              goto LABEL_118;
            }
          }
          __dst[v40] = 0;
          cstdlib_strcpy(__src, __dst);
          v95.n128_u64[0] = 0;
          LOWORD(v98) = 0;
          cstdlib_memset(__b, 0, 0x40uLL);
          uint64_t v14 = (*(uint64_t (**)(void, void, char *, uint64_t, const char *, const char *, __n128 *, int *))(a1[8] + 120))(a1[6], a1[7], __src, 255, "femwtn", v81, &v95, &v98);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_141;
          }
          if ((_WORD)v98)
          {
            LOBYTE(v47) = 0;
            unint64_t v48 = 0;
            do
            {
              unsigned int v49 = LH_atou(*(const char **)(v95.n128_u64[0] + 8 * v48));
              if (v49 <= 0x3F)
              {
                __b[v47] = v49;
                LOBYTE(v47) = v47 + 1;
              }
              ++v48;
            }
            while (v48 < (unsigned __int16)v98);
            unint64_t v77 = v47;
            ssft_qsort((uint64_t)__b, v47, 1, (uint64_t (*)(unint64_t, unint64_t))compare);
            size_t v39 = v85;
            if ((_BYTE)v47)
            {
              unsigned __int16 v76 = v30;
              unint64_t v50 = 0;
              unint64_t v47 = v47;
              do
              {
                if (v34 == 9999)
                {
LABEL_57:
                  unsigned int v34 = 9999;
                }
                else if (__b[v50])
                {
                  while (1)
                  {
                    int v51 = LDOObject_GetU32Attribute(*(uint64_t **)(v92.n128_u64[1] + 8 * v34), "_TTYPE", &v91, (_DWORD *)&v91 + 1);
                    uint64_t v14 = LH_ERROR_to_VERROR(v51);
                    if ((v14 & 0x80000000) != 0) {
                      goto LABEL_141;
                    }
                    unsigned int v52 = v34 + 1;
                    if (v34 + 1 >= v15)
                    {
                      int v80 = 0;
                      unsigned int v34 = 9999;
                      break;
                    }
                    if (v34 == 9998)
                    {
                      int v80 = 0;
                      goto LABEL_57;
                    }
                    ++v34;
                    if (!__b[v50])
                    {
                      int v80 = 0;
                      unsigned int v34 = v52;
                      break;
                    }
                  }
                }
                unsigned int v53 = __b[v50];
                if (__b[v50])
                {
                  uint64_t v54 = 0;
                  int v55 = 0;
                  uint64_t v56 = 0;
                  unsigned int v57 = v85[(unsigned __int16)v28];
                  unsigned __int16 v58 = v28;
                  while (v57)
                  {
                    __src[v54] = v57;
                    if (v54 == 255) {
                      goto LABEL_100;
                    }
                    uint64_t v59 = ++v58;
                    unsigned int v57 = v85[v58];
                    BOOL v60 = v57 > 0x20 || ((1 << v57) & 0x100002600) == 0;
                    if (!v60 || v57 == 95)
                    {
                      unsigned int v61 = v85[v58 - 1];
                      int v62 = v61 == 95 ? v55 : v55 + 1;
                      BOOL v63 = v61 > 0x20;
                      uint64_t v64 = (1 << v61) & 0x100002600;
                      if (v63 || v64 == 0) {
                        int v55 = v62;
                      }
                    }
                    ++v54;
                    ++v56;
                    if (v53 <= v55) {
                      goto LABEL_88;
                    }
                  }
                  uint64_t v56 = (unsigned __int16)v54;
                  uint64_t v59 = v58;
                }
                else
                {
                  uint64_t v56 = 0;
                  LOBYTE(v55) = 0;
                  uint64_t v59 = (unsigned __int16)v28;
                }
LABEL_88:
                __src[v56] = 0;
                if (!v85[v59])
                {
                  unsigned int v66 = v85[v59 - 1];
                  BOOL v67 = v66 > 0x20 || ((1 << v66) & 0x100002600) == 0;
                  if (v67 && v66 != 95) {
                    LOBYTE(v55) = v55 + 1;
                  }
                }
                if (v53 == v55)
                {
                  cstdlib_strcpy(__s, __src);
                  int v19 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(a1[8] + 112))(a1[6], a1[7], v81, __s, 256);
                  if (v19 < 0) {
                    goto LABEL_145;
                  }
                  __n128 v95 = v92;
                  unint64_t v96 = v93;
                  uint64_t v14 = abbrtn_Lookup((uint64_t)a1, __s, __src, v81, v85, (unsigned __int16)v28, v27, (unsigned __int16 *)&v94, (uint64_t)&v95);
                  if ((v14 & 0x80000000) != 0) {
                    goto LABEL_141;
                  }
                  signed __int16 v84 = v94;
                  unint64_t v47 = v77;
                }
LABEL_100:
                ++v50;
              }
              while (v50 < v47 && (__int16)v28 > v84);
              unsigned __int16 v45 = v28;
              signed __int16 v46 = v84;
              int v42 = v81;
              unsigned __int16 v30 = v76;
              if (v79 > v84) {
                goto LABEL_108;
              }
              goto LABEL_110;
            }
            unsigned __int16 v45 = v28;
            int v42 = v81;
          }
          else
          {
            unsigned __int16 v45 = v28;
            ssft_qsort((uint64_t)__b, 0, 1, (uint64_t (*)(unint64_t, unint64_t))compare);
          }
LABEL_108:
          __n128 v95 = v92;
          unint64_t v96 = v93;
          uint64_t v14 = abbrtn_Lookup((uint64_t)a1, __dst, __dst, v42, v39, v45, v27, (unsigned __int16 *)&v94, (uint64_t)&v95);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_141;
          }
          signed __int16 v46 = v94;
LABEL_110:
          int v38 = v79;
          if (v79 > v46)
          {
            cstdlib_strcpy(__s2, __dst);
            uint64_t v14 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(a1[8] + 112))(a1[6], a1[7], v42, __s2, 128);
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_141;
            }
            if (cstdlib_strcmp(__dst, __s2))
            {
              __n128 v95 = v92;
              unint64_t v96 = v93;
              uint64_t v14 = abbrtn_Lookup((uint64_t)a1, __s2, __dst, v42, v39, v45, v27, (unsigned __int16 *)&v94, (uint64_t)&v95);
              if ((v14 & 0x80000000) != 0) {
                goto LABEL_141;
              }
              signed __int16 v46 = v94;
            }
            goto LABEL_115;
          }
          int v29 = v78;
        }
        unsigned int v16 = v27 + 1;
      }
      else
      {
        unsigned __int16 v45 = v28;
        signed __int16 v46 = v84;
      }
LABEL_118:
      if (v38 <= v46)
      {
        LOWORD(v28) = v45;
        goto LABEL_130;
      }
      LOWORD(v28) = v45;
      if (!v29 && (v83 != 3 || v80 != 3))
      {
        size_t v68 = *(void *)(v92.n128_u64[1] + 8 * v27);
        int v69 = LDOTreeNode_ComputeAbsoluteFrom(v68, &v90);
        int v19 = LH_ERROR_to_VERROR(v69);
        if ((v19 & 0x80000000) == 0)
        {
          uint64_t v28 = (unsigned __int16)v90;
          int v70 = LDOTreeNode_ComputeAbsoluteTo(v68, (_DWORD *)&v90 + 1);
          uint64_t v14 = LH_ERROR_to_VERROR(v70);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_141;
          }
          unint64_t v71 = WORD2(v90) - (unint64_t)v28;
          if ((int)v71 <= 127)
          {
            cstdlib_strncpy(v103, &v85[v28], WORD2(v90) - (unint64_t)v28);
            v103[v71] = 0;
            cstdlib_strcpy(v100, v103);
            uint64_t v14 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(a1[8] + 104))(a1[6], a1[7], v81, v100, 128);
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_141;
            }
            if (cstdlib_strcmp(__s2, v100))
            {
              __n128 v95 = v92;
              unint64_t v96 = v93;
              uint64_t v14 = abbrtn_Lookup((uint64_t)a1, v100, v103, v81, v85, v28, v27, (unsigned __int16 *)&v94, (uint64_t)&v95);
              int v29 = 0;
              if ((v14 & 0x80000000) != 0) {
                goto LABEL_141;
              }
            }
            else
            {
              int v29 = 0;
            }
          }
          goto LABEL_130;
        }
LABEL_145:
        LODWORD(v14) = v19;
        goto LABEL_141;
      }
    }
LABEL_130:
    __int16 v72 = v94;
    if (v94 < (__int16)v28) {
      __int16 v72 = v30;
    }
    if (HIDWORD(v87) == 1) {
      unsigned int v16 = v27;
    }
    signed __int16 v12 = v72 - 1;
    __int16 v94 = v72 - 1;
    if (v16 >= v15) {
      break;
    }
    unsigned __int16 v9 = v72;
    int v83 = v29;
  }
  while (v72 < v82);
LABEL_140:
  if (v15)
  {
LABEL_141:
    int v73 = LDO_FreeLDOTreeNodeVector(a1[24], (uint64_t)&v92);
    unsigned int v74 = LH_ERROR_to_VERROR(v73);
    if ((int)v14 >= 0) {
      return v74;
    }
    else {
      return v14;
    }
  }
  return v14;
}

uint64_t abbrtn_checkForTokens(uint64_t a1, uint64_t a2, int a3, _WORD *a4, _WORD *a5, _DWORD *a6, _DWORD *a7)
{
  int v25 = 0;
  *a6 = 0;
  *a7 = 0;
  LDO_GetLabels(*(void *)(a1 + 192), &v23);
  uint64_t v12 = 0;
  uint64_t v14 = (uint64_t **)v23.n128_u64[1];
  unint64_t v13 = v24;
  if (v23.n128_u64[1] < v24)
  {
    do
    {
      unint64_t v15 = *v14;
      v23.n128_u32[0] = 0;
      int U32Attribute = LDOObject_GetU32Attribute(v15, "_TTYPE", &v23, &v25);
      uint64_t v12 = LH_ERROR_to_VERROR(U32Attribute);
      if ((v12 & 0x80000000) != 0) {
        break;
      }
      if (v23.n128_u32[0] == 1 && v25 == 6)
      {
        int v18 = LDOLabel_ContainsNode((uint64_t)v15, a2, a6);
        uint64_t v12 = LH_ERROR_to_VERROR(v18);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        if (*a6 == 1)
        {
          int AbsoluteFrom = LDOLabel_GetAbsoluteFrom((uint64_t)v15);
          __int16 AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)v15);
          if (AbsoluteFrom == a3)
          {
            *a4 = a3;
            *a5 = AbsoluteTo;
            *a7 = 1;
          }
          return v12;
        }
      }
      ++v14;
    }
    while ((unint64_t)v14 < v13);
  }
  return v12;
}

uint64_t abbrtn_Lookup(uint64_t a1, char *__s, char *a3, const char *a4, const char *a5, uint64_t a6, unsigned int a7, unsigned __int16 *a8, uint64_t a9)
{
  unint64_t v15 = __s;
  uint64_t v254 = *MEMORY[0x263EF8340];
  unsigned __int16 v251 = 0;
  int v248 = 0;
  int v249 = 0;
  if (__s && !cstdlib_strlen(__s)) {
    return 0;
  }
  v236 = a4;
  v234 = a8;
  unsigned __int16 v17 = cstdlib_strlen(a3) + a6;
  *(_DWORD *)__dst = 0;
  LOWORD(v18) = a6;
  unsigned __int16 v240 = cstdlib_strlen(a3) + a6;
  if (v15)
  {
    LOWORD(v18) = a6;
    if (cstdlib_strcmp(v15, a3))
    {
      LOWORD(v18) = a6;
      v237 = (char *)v15;
      int v19 = (char *)&a5[a6];
      if ((*(unsigned int (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v19))
      {
        int v18 = a6;
        do
        {
          v18 += utf8_determineUTF8CharLength(*v19);
          int v19 = (char *)&a5[(unsigned __int16)v18];
        }
        while ((*(unsigned int (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v19));
      }
      uint64_t PreviousUtf8Offset = (unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)a5, v240);
      int v21 = &a5[PreviousUtf8Offset];
      int v22 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), &a5[PreviousUtf8Offset]);
      if (PreviousUtf8Offset && v22)
      {
        do
        {
          uint64_t PreviousUtf8Offset = (unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)a5, PreviousUtf8Offset);
          int v21 = &a5[PreviousUtf8Offset];
          int v23 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), &a5[PreviousUtf8Offset]);
        }
        while (PreviousUtf8Offset && v23);
      }
      utf8_determineUTF8CharLength(*(unsigned __int8 *)v21);
      unint64_t v15 = v237;
    }
  }
  uint64_t v252 = 0;
  unsigned __int8 v250 = 0;
  uint64_t v27 = abbrtn_checkIfSubsumedbyOtherToken(a1, (unsigned __int16)v18, v17, 4, 6, __dst);
  if ((v27 & 0x80000000) == 0)
  {
    if (*(_DWORD *)__dst == 1)
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 16) + 32);
      int v29 = "BLOCK Creating TN DCT token record for %s %d,%d bSubsumed=%d";
      v217 = a3;
      goto LABEL_16;
    }
    size_t v30 = *(void *)(*(void *)(a9 + 8) + 8 * a7);
    int v31 = LDOTreeNode_ComputeAbsoluteFrom(v30, &v249);
    uint64_t v32 = LH_ERROR_to_VERROR(v31);
    if ((v32 & 0x80000000) != 0) {
      return v32;
    }
    int v33 = LDOTreeNode_ComputeAbsoluteTo(v30, &v248);
    uint64_t v32 = LH_ERROR_to_VERROR(v33);
    if ((v32 & 0x80000000) != 0) {
      return v32;
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"TN look up %s", v34, v35, v36, (uint64_t)v15);
    LODWORD(v217) = 0;
    uint64_t v37 = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, unsigned __int16 *, unsigned __int8 *, void))(*(void *)(a1 + 64) + 240))(*(void *)(a1 + 48), *(void *)(a1 + 56), "tn", v15, &v252, &v251, &v250, *(unsigned __int8 *)(a1 + 112));
    uint64_t v27 = v37;
    if ((v37 & 0x80000000) != 0 || !v251) {
      return v27;
    }
    unsigned int NextTOKEN_INT_TNPos = v37;
    unsigned __int16 v235 = 0;
    uint64_t j = 0;
    v225 = a3 - 1;
    v224 = "";
    unsigned int v229 = 1;
    unsigned int v227 = a6;
    size_t v39 = v236;
    v238 = (char *)v15;
LABEL_22:
    __sa = *(char **)(v252 + 8 * j);
    uint64_t v40 = cstdlib_strchr(__sa, v250);
    if (v40)
    {
      *uint64_t v40 = 0;
      v232 = v40 + 1;
      unsigned __int16 v45 = cstdlib_strchr(v40 + 1, v250);
      signed __int16 v46 = v45;
      if (v45)
      {
        *unsigned __int16 v45 = 0;
        signed __int16 v46 = v45 + 1;
        unint64_t v47 = cstdlib_strchr(v45 + 1, v250);
        unint64_t v48 = v47;
        if (v47)
        {
          *unint64_t v47 = 0;
          unint64_t v48 = v47 + 1;
          unsigned int v49 = cstdlib_strchr(v47 + 1, v250);
          unint64_t v50 = v49;
          if (v49)
          {
            *unsigned int v49 = 0;
            unint64_t v50 = v49 + 1;
            int v51 = cstdlib_strchr(v49 + 1, v250);
            if (v51)
            {
              char *v51 = 0;
              __s1 = v51 + 1;
              unsigned int v52 = cstdlib_strchr(v51 + 1, v250);
              if (v52) {
                char *v52 = 0;
              }
LABEL_33:
              uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 32);
              if (!__sa)
              {
                uint64_t v27 = 2310021127;
                log_OutPublic(v53, (uint64_t)"FE_ABBRTN", 32001, 0, v41, v42, v43, v44, v217);
                return v27;
              }
              log_OutText(v53, (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"TN Validating %s", v42, v43, v44, (uint64_t)__sa);
              if (v46 && cstdlib_strcmp(v46, ""))
              {
                if ((uint64_t v54 = cstdlib_strstr(v46, v39)) == 0
                  || (v55 = v54, size_t v56 = cstdlib_strlen(v39), v55 != v46) && *(v55 - 1) != 44
                  || v55[v56] && v55[v56] != 44)
                {
                  uint64_t v61 = *(void *)(*(void *)(a1 + 16) + 32);
                  int v62 = "TN Domain validation not OK";
                  goto LABEL_135;
                }
              }
              if (!v50)
              {
LABEL_140:
                unint64_t v96 = v238;
                goto LABEL_141;
              }
              if (!cstdlib_strcmp(v50, "8"))
              {
                uint64_t v61 = *(void *)(*(void *)(a1 + 16) + 32);
                int v62 = "TN expansion only valid within regexps";
                goto LABEL_135;
              }
              uint64_t v230 = j;
              if (!cstdlib_strcmp(v50, "1")
                || !cstdlib_strcmp(v50, "4")
                || !cstdlib_strcmp(v50, "5")
                || !cstdlib_strcmp(v50, "7"))
              {
                if (v48 && cstdlib_strcmp(v48, ""))
                {
                  int64_t v57 = cstdlib_strlen(a3);
                  if (v57 < 1)
                  {
                    BOOL v60 = &a3[v57];
                  }
                  else
                  {
                    unsigned __int16 v58 = &v225[v57];
                    while (v58 > a3)
                    {
                      int v59 = *v58--;
                      if (v59 >= -64)
                      {
                        BOOL v60 = v58 + 1;
                        goto LABEL_71;
                      }
                    }
                    BOOL v60 = a3;
                  }
LABEL_71:
                  int v68 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v60);
                  if (v60)
                  {
                    do
                    {
                      int v69 = v60;
                      if (!v68) {
                        break;
                      }
                      if (v60 <= a3) {
                        goto LABEL_79;
                      }
                      int v70 = v60 - 1;
                      while (v70 > a3)
                      {
                        int v71 = *v70--;
                        if (v71 >= -64)
                        {
                          BOOL v60 = v70 + 1;
                          goto LABEL_79;
                        }
                      }
                      BOOL v60 = a3;
LABEL_79:
                      int v68 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v60);
                    }
                    while (v60 != v69);
                  }
                  for (unsigned int i = a3;
                        (*(unsigned int (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), i);
                  for (uint64_t j = v230;
                        (*(unsigned int (**)(void, void, const char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v48);
                  if (i <= v60)
                  {
                    do
                    {
                      int v73 = abbrtn_compareUtf8Char((uint64_t)i, (uint64_t)v48);
                      unsigned int v74 = utf8_determineUTF8CharLength(*i);
                      v48 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v48);
                      if (v73) {
                        break;
                      }
                      i += v74;
                    }
                    while (i <= v60);
                    BOOL v66 = v73 == 0;
                    uint64_t j = v230;
                  }
                  else
                  {
                    BOOL v66 = 1;
                  }
                  size_t v39 = v236;
                  if (v66 && *v48)
                  {
                    do
                    {
                      int v75 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v48);
                      v48 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v48);
                      if (v75) {
                        BOOL v76 = *v48 == 0;
                      }
                      else {
                        BOOL v76 = 1;
                      }
                    }
                    while (!v76);
                    BOOL v66 = v75 != 0;
                  }
LABEL_97:
                  if (!v66)
                  {
                    uint64_t v61 = *(void *)(*(void *)(a1 + 16) + 32);
                    int v62 = "TN Case validation not OK";
                    goto LABEL_135;
                  }
                  goto LABEL_98;
                }
                unsigned __int8 v63 = *a3;
                if (*a3)
                {
                  uint64_t v64 = a3;
                  do
                  {
                    BOOL v66 = 0;
                    if ((v63 - 97) >= 0x1Au)
                    {
                      if (v63 != 195
                        || (v64[1] - 133 <= 0x37
                          ? (BOOL v65 = ((1 << (v64[1] + 123)) & 0x82101780000001) == 0)
                          : (BOOL v65 = 1),
                            v65))
                      {
                        BOOL v66 = 1;
                      }
                    }
                    unsigned int v67 = utf8_determineUTF8CharLength(v63);
                    if (!v66) {
                      break;
                    }
                    v64 += v67;
                    unsigned __int8 v63 = *v64;
                  }
                  while (*v64);
                  uint64_t j = v230;
                  goto LABEL_97;
                }
              }
LABEL_98:
              if (cstdlib_strcmp(v50, "3")
                && cstdlib_strcmp(v50, "5")
                && cstdlib_strcmp(v50, "6")
                && cstdlib_strcmp(v50, "7"))
              {
                goto LABEL_136;
              }
              __int16 v77 = cstdlib_strlen(a3);
              int64_t v78 = cstdlib_strlen(a3);
              if (v78 < 1)
              {
                unint64_t v81 = &a3[v78];
              }
              else
              {
                int v79 = &v225[v78];
                do
                {
                  if (v79 <= a3)
                  {
                    unint64_t v81 = a3;
                    goto LABEL_110;
                  }
                  int v80 = *v79--;
                }
                while (v80 < -64);
                unint64_t v81 = v79 + 1;
              }
LABEL_110:
              unsigned __int16 v82 = v77 - cstdlib_strlen(v81);
              unsigned int NextUtf8Offset = v82;
              uint64_t v84 = v82;
              int v85 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), &a3[v82]);
              if (NextUtf8Offset && v85)
              {
                do
                {
                  unsigned __int16 v86 = utf8_GetPreviousUtf8Offset((uint64_t)a3, NextUtf8Offset);
                  uint64_t v84 = v86;
                  unsigned int NextUtf8Offset = v86;
                  int v87 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), &a3[v86]);
                }
                while (v84 && v87);
              }
              size_t v88 = cstdlib_strlen(a3);
              int64_t v89 = cstdlib_strlen(a3);
              if (v89 < 1)
              {
                __n128 v92 = &a3[v89];
              }
              else
              {
                uint64_t v90 = &v225[v89];
                while (v90 > a3)
                {
                  int v91 = *v90--;
                  if (v91 >= -64)
                  {
                    __n128 v92 = v90 + 1;
                    goto LABEL_121;
                  }
                }
                __n128 v92 = a3;
              }
LABEL_121:
              if (v88 - cstdlib_strlen(v92) != v84) {
                unsigned int NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(a3, NextUtf8Offset);
              }
              size_t v39 = v236;
              uint64_t j = v230;
              if (v48 && cstdlib_strcmp(v48, ""))
              {
                int64_t v93 = cstdlib_strlen(v48);
                if (v93 < 1)
                {
                  v48 += v93;
                }
                else
                {
                  __int16 v94 = &v48[v93 - 1];
                  do
                  {
                    if (v94 <= v48) {
                      goto LABEL_133;
                    }
                    int v95 = *v94--;
                  }
                  while (v95 < -64);
                  unint64_t v48 = v94 + 1;
                }
LABEL_133:
                if (abbrtn_compareUtf8Char((uint64_t)&a3[NextUtf8Offset], (uint64_t)v48))
                {
                  uint64_t v61 = *(void *)(*(void *)(a1 + 16) + 32);
                  int v62 = "Punctuation validation not OK";
                  goto LABEL_135;
                }
LABEL_136:
                if (cstdlib_strcmp(v50, "2")
                  && cstdlib_strcmp(v50, "4")
                  && cstdlib_strcmp(v50, "6")
                  && cstdlib_strcmp(v50, "7"))
                {
                  goto LABEL_140;
                }
                v247 = 0;
                LOWORD(v244) = 0;
                __int16 v98 = cstdlib_strlen(a5);
                int64_t v99 = cstdlib_strlen(a5);
                if (v99 < 1)
                {
                  uint64_t v102 = &a5[v99];
                }
                else
                {
                  int v100 = &a5[v99 - 1];
                  do
                  {
                    if (v100 <= a5)
                    {
                      uint64_t v102 = a5;
                      goto LABEL_162;
                    }
                    int v101 = *v100--;
                  }
                  while (v101 < -64);
                  uint64_t v102 = v100 + 1;
                }
LABEL_162:
                __int16 v103 = cstdlib_strlen(v102);
                v246 = 0;
                BYTE4(v241) = 0;
                LOWORD(v243) = 0;
                LOWORD(v242) = 0;
                int v245 = 0;
                cstdlib_strcpy(__dst, "disambiguate_abbreviations");
                unsigned __int16 v222 = cstdlib_strlen(__dst);
                unsigned __int16 v104 = v227;
                if (!(_WORD)v227) {
                  goto LABEL_183;
                }
                int v105 = 0;
                uint64_t v106 = &a5[(unsigned __int16)v227];
                do
                {
                  unsigned int v107 = a5[--v104];
                  BOOL v108 = v107 > 0x20 || ((1 << v107) & 0x100002600) == 0;
                  if (!v108 || v107 == 95)
                  {
                    unsigned int v109 = *(unsigned __int8 *)v106;
                    int v110 = v109 == 95 ? v105 : v105 + 1;
                    BOOL v155 = v109 > 0x20;
                    uint64_t v111 = (1 << v109) & 0x100002600;
                    if (v155 || v111 == 0) {
                      int v105 = v110;
                    }
                  }
                  if (v105 > 3u) {
                    break;
                  }
                  --v106;
                }
                while (v104);
                if (v104) {
                  unsigned int v228 = v104 + utf8_determineUTF8CharLength(a5[v104]);
                }
                else {
LABEL_183:
                }
                  unsigned int v228 = 0;
                unsigned int v113 = (unsigned __int16)(v98 - v103);
                unsigned int v114 = v227;
                if (v113 >= (unsigned __int16)v227)
                {
                  int v116 = 0;
                  LOBYTE(v117) = a5[(unsigned __int16)v227];
                  do
                  {
                    v114 += utf8_determineUTF8CharLength(v117);
                    unsigned int v117 = a5[(unsigned __int16)v114];
                    BOOL v118 = v117 > 0x20 || ((1 << v117) & 0x100002600) == 0;
                    if (!v118 || v117 == 95)
                    {
                      unsigned int v119 = a5[(unsigned __int16)v114 - 1];
                      int v120 = v119 == 95 ? v116 : v116 + 1;
                      BOOL v155 = v119 > 0x20;
                      uint64_t v121 = (1 << v119) & 0x100002600;
                      if (v155 || v121 == 0) {
                        int v116 = v120;
                      }
                    }
                    int v115 = (unsigned __int16)v114;
                  }
                  while (v116 <= 3u && v113 >= (unsigned __int16)v114);
                }
                else
                {
                  int v115 = (unsigned __int16)v227;
                }
                char v123 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
                uint64_t v124 = *(void *)(a1 + 96);
                int v125 = v115 - (unsigned __int16)v228;
                int v126 = cstdlib_strlen(__sa);
                int v127 = v125 + 25;
                unint64_t v128 = (char *)heap_Realloc(v123, v124, (v127 + v126));
                if (v128
                  && (*(void *)(a1 + 96) = v128,
                      cstdlib_strcpy(v128, ""),
                      double v133 = *(uint64_t **)(*(void *)(a1 + 16) + 8),
                      uint64_t v134 = *(void *)(a1 + 104),
                      int v135 = cstdlib_strlen(__sa),
                      (int v136 = (char *)heap_Realloc(v133, v134, (v127 + v135))) != 0))
                {
                  *(void *)(a1 + 104) = v136;
                  cstdlib_strcpy(v136, "");
                  __int16 v137 = cstdlib_strlen(a3);
                  int v138 = (char *)&a5[(unsigned __int16)v227];
                  LOWORD(v139) = v227;
                  if ((*(unsigned int (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v138))
                  {
                    unsigned int v139 = v227;
                    do
                    {
                      v139 += utf8_determineUTF8CharLength(*v138);
                      int v138 = (char *)&a5[(unsigned __int16)v139];
                    }
                    while ((*(unsigned int (**)(void, void, char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v138));
                  }
                  unsigned __int16 v140 = utf8_GetPreviousUtf8Offset((uint64_t)a5, (unsigned __int16)(v227 + v137));
                  unsigned int v141 = v140;
                  char v142 = (unsigned __int8 *)&a5[v140];
                  int v143 = (*(uint64_t (**)(void, void, unsigned __int8 *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v142);
                  if (v140 && v143)
                  {
                    do
                    {
                      unsigned __int16 v140 = utf8_GetPreviousUtf8Offset((uint64_t)a5, v141);
                      unsigned int v141 = v140;
                      char v142 = (unsigned __int8 *)&a5[v140];
                      int v144 = (*(uint64_t (**)(void, void, unsigned __int8 *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v142);
                    }
                    while (v140 && v144);
                  }
                  __int16 v145 = utf8_determineUTF8CharLength(*v142);
                  unsigned int NextTOKEN_INT_TNPos = getNextTOKEN_INT_TNPos(a1, &v243, &v242, (uint64_t *)&v246, (unsigned __int16)v228, (unsigned __int16)v114, &v245);
                  if ((NextTOKEN_INT_TNPos & 0x80000000) == 0)
                  {
                    if ((unsigned __int16)v228 < (unsigned __int16)v114)
                    {
                      unsigned __int16 v149 = v145 + v140;
                      unsigned int v221 = v149;
                      unsigned __int16 v150 = v228;
                      size_t v39 = v236;
                      uint64_t v220 = a6;
                      unsigned __int16 v223 = v149;
                      while (1)
                      {
                        uint64_t v151 = (unsigned __int16)v243;
                        unsigned int v152 = (unsigned __int16)v242;
                        if (v245 == 1
                          && (unsigned __int16)v243 == (unsigned __int16)v228
                          && (unsigned __int16)v242 == (unsigned __int16)v114)
                        {
                          addToLayer(a1, (uint64_t)a5, (unsigned __int16)v228, (unsigned __int16)v114, __sa, v232, (unsigned __int8 *)&v241 + 4);
                          int v245 = 0;
                          unsigned int v227 = v228;
                          goto LABEL_274;
                        }
                        if (v245 == 1)
                        {
                          if ((unsigned __int16)v243 < (unsigned __int16)v139
                            || v150 > (unsigned __int16)v139
                            || v150 > (unsigned __int16)v243)
                          {
                            BOOL v153 = v150 > (unsigned __int16)v243;
                            if (v221 > v150) {
                              BOOL v153 = 1;
                            }
                            BOOL v155 = v150 <= (unsigned __int16)v243
                                && v150 < (unsigned __int16)v139
                                && (unsigned __int16)v139 > (unsigned __int16)v243;
                            if (!v155 && v153)
                            {
LABEL_273:
                              addToLayer(a1, (uint64_t)a5, v150, (unsigned __int16)v114, 0, 0, (unsigned __int8 *)&v241 + 4);
LABEL_274:
                              unint64_t v96 = v238;
                              if (BYTE4(v241) <= 0x13u) {
                                goto LABEL_275;
                              }
LABEL_287:
                              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"Context validation not OK", v146, v147, v148, (uint64_t)v217);
                              uint64_t j = v230;
LABEL_157:
                              if (++j >= (unint64_t)v251 || v235 >= 2u)
                              {
                                uint64_t v27 = NextTOKEN_INT_TNPos;
                                if (!v235) {
                                  return v27;
                                }
                                if (v235 == 1)
                                {
                                  unsigned __int16 *v234 = v240;
                                  unsigned int v190 = v240;
                                  int v245 = v240;
                                  LODWORD(v246) = 0;
                                  unsigned int v244 = v240;
                                  if (v96 && cstdlib_strcmp(v96, a3))
                                  {
                                    v191 = (char *)&a5[a6];
                                    for (int k = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 64)
                                                                                                + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v191);
                                          k;
                                          int k = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 64)
                                                                                                + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), v191))
                                    {
                                      LODWORD(a6) = a6 + utf8_determineUTF8CharLength(*v191);
                                      v191 = (char *)&a5[(unsigned __int16)a6];
                                    }
                                    do
                                    {
                                      unsigned int v190 = utf8_GetPreviousUtf8Offset((uint64_t)a5, v190);
                                      if ((*(unsigned int (**)(void, void, const char *))(*(void *)(a1 + 64) + 128))(*(void *)(a1 + 48), *(void *)(a1 + 56), &a5[v190]))
                                      {
                                        BOOL v193 = v190 == 0;
                                      }
                                      else
                                      {
                                        BOOL v193 = 1;
                                      }
                                    }
                                    while (!v193);
                                    int v245 = v190 + utf8_determineUTF8CharLength(a5[v190]);
                                  }
                                  int v194 = LDO_CountLeafNodesOnRange(*(void *)(a1 + 192), &v245, &v244, &v246, &v245);
                                  uint64_t v32 = LH_ERROR_to_VERROR(v194);
                                  if ((v32 & 0x80000000) != 0) {
                                    return v32;
                                  }
                                  unsigned __int16 v198 = v240;
                                  if (v246) {
                                    unsigned __int16 v198 = v245;
                                  }
                                  unsigned int v199 = v198;
                                  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"Creating TN DCT token record for %s %d,%d %s", v195, v196, v197, (uint64_t)a3);
                                  *(void *)__dst = 0;
                                  v247 = 0;
                                  unsigned int v242 = v199;
                                  unsigned int v243 = (unsigned __int16)a6;
                                  uint64_t v241 = 0;
                                  LODWORD(v246) = 0;
                                  int v200 = LDO_CountLeafNodesOnRange(*(void *)(a1 + 192), &v243, &v242, &v246, 0);
                                  uint64_t v32 = LH_ERROR_to_VERROR(v200);
                                  if ((v32 & 0x80000000) != 0) {
                                    return v32;
                                  }
                                  if (v242 <= v243 || v246)
                                  {
                                    uint64_t v210 = *(void *)(a1 + 192);
                                    v211 = &v243;
                                    v212 = &v242;
LABEL_321:
                                    int v213 = LDO_AddLabelOnSubstring(v210, "TOKEN", "TOKEN", v211, v212, __dst);
                                    uint64_t v27 = LH_ERROR_to_VERROR(v213);
                                    if ((v27 & 0x80000000) != 0) {
                                      return v27;
                                    }
                                  }
                                  else
                                  {
                                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"No node in the given range => attempting to find a containing node", v201, v202, v203, v218);
                                    int v204 = LDO_ComputeLeafNodeContainingRange(*(void *)(a1 + 192), &v243, &v242, (size_t *)&v247);
                                    uint64_t v27 = LH_ERROR_to_VERROR(v204);
                                    if ((v27 & 0x80000000) != 0) {
                                      return v27;
                                    }
                                    if (v247)
                                    {
                                      int v208 = LDOTreeNode_ComputeAbsoluteFrom((uint64_t)v247, (_DWORD *)&v241 + 1);
                                      uint64_t v32 = LH_ERROR_to_VERROR(v208);
                                      if ((v32 & 0x80000000) == 0)
                                      {
                                        int v209 = LDOTreeNode_ComputeAbsoluteTo((size_t)v247, &v241);
                                        uint64_t v32 = LH_ERROR_to_VERROR(v209);
                                        if ((v32 & 0x80000000) == 0)
                                        {
                                          uint64_t v210 = *(void *)(a1 + 192);
                                          v211 = (unsigned int *)&v241 + 1;
                                          v212 = (unsigned int *)&v241;
                                          goto LABEL_321;
                                        }
                                      }
                                      return v32;
                                    }
                                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"No containing node found => no label created", v205, v206, v207, v219);
                                  }
                                  if (*(void *)__dst)
                                  {
                                    LDOObject_SetU32Attribute(*(uint64_t *)__dst, "_TTYPE", 4);
                                    uint64_t v32 = LH_ERROR_to_VERROR(v214);
                                    if ((v32 & 0x80000000) == 0)
                                    {
                                      int v215 = LDOObject_SetStringAttribute(*(uint64_t *)__dst, "NORM", v224);
                                      return LH_ERROR_to_VERROR(v215);
                                    }
                                    return v32;
                                  }
                                  return v27;
                                }
                                uint64_t v28 = *(void *)(*(void *)(a1 + 16) + 32);
                                int v29 = "Multiple valid lookups => no normalization";
LABEL_16:
                                log_OutText(v28, (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)v29, v24, v25, v26, (uint64_t)v217);
                                return v27;
                              }
                              goto LABEL_22;
                            }
                            addToLayer(a1, (uint64_t)a5, v150, (unsigned __int16)v243, 0, 0, (unsigned __int8 *)&v241 + 4);
                            unsigned int v156 = BYTE4(v241);
                            if (BYTE4(v241) > 0x13u) {
                              goto LABEL_271;
                            }
                            if (v152 <= (unsigned __int16)v114)
                            {
                              unsigned __int16 v231 = v152;
                              if (v152) {
                                goto LABEL_243;
                              }
                              unsigned __int16 v231 = 0;
                            }
                            else
                            {
                              LOWORD(v242) = v114;
                              unsigned __int16 v231 = v114;
LABEL_243:
                              LOWORD(v152) = 0;
                              int v158 = 0;
                              do
                              {
                                if (!a5[(unsigned __int16)v158]) {
                                  break;
                                }
                                v158 += utf8_determineUTF8CharLength(a5[(unsigned __int16)v158]);
                                LOWORD(v152) = v152 + 1;
                              }
                              while ((unsigned __int16)v158 < v231);
                            }
                            unsigned __int16 v159 = 0;
                            if (v151)
                            {
                              int v160 = 0;
                              do
                              {
                                if (!a5[(unsigned __int16)v160]) {
                                  break;
                                }
                                v160 += utf8_determineUTF8CharLength(a5[(unsigned __int16)v160]);
                                ++v159;
                              }
                              while (v151 > (unsigned __int16)v160);
                            }
                            cstdlib_strncat(*(char **)(a1 + 96), &a5[v151], v231 - v151);
                            int v161 = *(char **)(a1 + 104);
                            int v162 = v246 + 1;
                            size_t v163 = cstdlib_strlen(v246);
                            cstdlib_strncat(v161, v162, v163 - 2);
                            LODWORD(v162) = (cstdlib_strlen(v246) << 16) - 0x20000;
                            int v164 = (unsigned __int16)v152 - v159;
                            size_t v165 = cstdlib_strlen(v246);
                            if ((int)v162 <= v164 << 16)
                            {
                              a6 = v220;
                              if (v165 != v164 + 2)
                              {
                                int v168 = 0;
                                do
                                {
                                  cstdlib_strcat(*(char **)(a1 + 104), "~");
                                  ++v168;
                                }
                                while (v164 + 2 - cstdlib_strlen(v246) > (unsigned __int16)v168);
                              }
                            }
                            else
                            {
                              unint64_t v166 = v159 - (unint64_t)(unsigned __int16)v152 - 2;
                              if (v166 + v165)
                              {
                                unint64_t v169 = 1;
                                do
                                {
                                  cstdlib_strcat(*(char **)(a1 + 96), "~");
                                  unsigned int v167 = v156 + 1;
                                  BOOL v155 = v166 + cstdlib_strlen(v246) > v169++;
                                }
                                while (v155 && v156++ < 0x13);
                              }
                              else
                              {
                                unsigned int v167 = v156;
                              }
                              BYTE4(v241) = v167;
                              a6 = v220;
                              if (v167 > 0x13)
                              {
                                size_t v39 = v236;
                                unint64_t v96 = v238;
                                goto LABEL_287;
                              }
                            }
                            unsigned __int16 v150 = v231;
                            unsigned int v157 = getNextTOKEN_INT_TNPos(a1, &v243, &v242, (uint64_t *)&v246, v231, (unsigned __int16)v114, &v245);
                            size_t v39 = v236;
                            goto LABEL_267;
                          }
                        }
                        else if (v150 > (unsigned __int16)v139 || v245)
                        {
                          goto LABEL_273;
                        }
                        addToLayer(a1, (uint64_t)a5, v150, (unsigned __int16)v139, 0, 0, (unsigned __int8 *)&v241 + 4);
                        if (BYTE4(v241) > 0x13u
                          || (addToLayer(a1, (uint64_t)a5, (unsigned __int16)v139, v223, __sa, v232, (unsigned __int8 *)&v241 + 4), BYTE4(v241) > 0x13u))
                        {
LABEL_271:
                          unint64_t v96 = v238;
                          goto LABEL_287;
                        }
                        unsigned __int16 v150 = v223;
                        if (v151 != (unsigned __int16)v139) {
                          goto LABEL_268;
                        }
                        unsigned int v157 = getNextTOKEN_INT_TNPos(a1, &v243, &v242, (uint64_t *)&v246, v223, (unsigned __int16)v114, &v245);
                        unsigned __int16 v150 = v223;
LABEL_267:
                        unsigned int NextTOKEN_INT_TNPos = v157;
                        if ((v157 & 0x80000000) != 0) {
                          return NextTOKEN_INT_TNPos;
                        }
LABEL_268:
                        if (v150 >= (unsigned __int16)v114) {
                          goto LABEL_274;
                        }
                      }
                    }
                    size_t v39 = v236;
                    unint64_t v96 = v238;
LABEL_275:
                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"%s L1: %s", v146, v147, v148, (uint64_t)__dst);
                    char v171 = *(const char **)(a1 + 96);
                    int v172 = *(uint64_t (**)(void, void, void, const char *, void))(*(void *)(a1 + 88)
                                                                                                  + 120);
                    unsigned __int16 v173 = cstdlib_strlen(v171);
                    unsigned int v174 = v172(*(void *)(a1 + 72), *(void *)(a1 + 80), 0, v171, v173);
                    if ((v174 & 0x80000000) != 0) {
                      return v174;
                    }
                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"%s L2: %s", v175, v176, v177, (uint64_t)__dst);
                    int v178 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 88) + 120);
                    unsigned int v179 = *(const char **)(a1 + 104);
                    unsigned __int16 v180 = cstdlib_strlen(v179);
                    unsigned int v174 = v178(*(void *)(a1 + 72), *(void *)(a1 + 80), 1, v179, v180);
                    if ((v174 & 0x80000000) != 0) {
                      return v174;
                    }
                    if (cstdlib_strcmp(v39, "normal") && cstdlib_strlen(v39) + v222 + 2 <= 0x7F)
                    {
                      cstdlib_strcat(__dst, "_");
                      cstdlib_strcat(__dst, v39);
                    }
                    if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 88) + 80))(*(void *)(a1 + 72), *(void *)(a1 + 80), __dst) & 0x80000000) != 0&& (__dst[v222] = 0, unsigned int v174 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 88) + 80))(*(void *)(a1 + 72), *(void *)(a1 + 80), __dst), (v174 & 0x80000000) != 0))
                    {
                      return v174;
                    }
                    else
                    {
                      unsigned int NextTOKEN_INT_TNPos = (*(uint64_t (**)(void, void, void, char **, unsigned int *))(*(void *)(a1 + 88) + 128))(*(void *)(a1 + 72), *(void *)(a1 + 80), 0, &v247, &v244);
                      if ((NextTOKEN_INT_TNPos & 0x80000000) == 0)
                      {
                        v247[(unsigned __int16)v244] = 0;
                        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"%s O1: %s", v181, v182, v183, (uint64_t)__dst);
                        char v184 = cstdlib_strstr(v247, "§");
                        if (v184)
                        {
                          v185 = v184;
                          while (1)
                          {
                            int v186 = utf8_determineUTF8CharLength(*v185);
                            int v187 = cstdlib_strstr(&v185[v186], "§");
                            if (!v187) {
                              break;
                            }
                            v188 = v187;
                            int v189 = v185[utf8_determineUTF8CharLength(*v185)];
                            v185 = v188;
                            if (v189 != 32) {
                              goto LABEL_287;
                            }
                          }
                        }
                        uint64_t j = v230;
LABEL_141:
                        if (__s1)
                        {
                          if (!cstdlib_strcmp(__s1, "")) {
                            goto LABEL_155;
                          }
                          unsigned int v97 = (unsigned __int16)cstdlib_atoi((unsigned __int8 *)__s1);
                          if (v97 < v229)
                          {
                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"Lower priority than previous valid normalizations", v24, v25, v26, (uint64_t)v217);
                            goto LABEL_157;
                          }
                          if (v97 > v229)
                          {
                            if (v235) {
                              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)"Higher priority than previous valid normalizations", v24, v25, v26, (uint64_t)v217);
                            }
                            unsigned __int16 v235 = 0;
                          }
                          else
                          {
LABEL_155:
                            unsigned int v97 = v229;
                          }
                        }
                        else
                        {
                          unsigned int v97 = v229;
                        }
                        ++v235;
                        v224 = __sa;
                        unsigned int v229 = v97;
                        goto LABEL_157;
                      }
                    }
                  }
                }
                else
                {
                  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ABBRTN", 32000, 0, v129, v130, v131, v132, v217);
                  return -1984946166;
                }
                return NextTOKEN_INT_TNPos;
              }
              if (a3[NextUtf8Offset] == 46) {
                goto LABEL_136;
              }
              uint64_t v61 = *(void *)(*(void *)(a1 + 16) + 32);
              int v62 = "TN Punctuation validation not OK";
LABEL_135:
              log_OutText(v61, (uint64_t)"FE_ABBRTN", 5, 0, (uint64_t)v62, v24, v25, v26, (uint64_t)v217);
              unint64_t v96 = v238;
              goto LABEL_157;
            }
          }
LABEL_32:
          __s1 = 0;
          goto LABEL_33;
        }
LABEL_31:
        unint64_t v50 = 0;
        goto LABEL_32;
      }
    }
    else
    {
      v232 = 0;
      signed __int16 v46 = 0;
    }
    unint64_t v48 = 0;
    goto LABEL_31;
  }
  return v27;
}

uint64_t abbrtn_sanitizeTokenDCTAndIntTN(uint64_t a1)
{
  uint64_t v2 = 0;
  int v27 = 0;
  uint64_t v26 = 0;
  uint64_t v3 = *(void *)(*(void *)(a1 + 192) + 32);
  uint64_t v4 = *(uint64_t **)(v3 + 24);
  if ((unint64_t)v4 >= *(void *)(v3 + 32))
  {
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(a1 + 192) + 32);
    unsigned int v16 = *(uint64_t **)(v15 + 24);
    if ((unint64_t)v16 >= *(void *)(v15 + 32))
    {
      unint64_t v6 = 0;
    }
    else
    {
      unsigned __int16 v17 = 0;
      unint64_t v6 = 0;
      unsigned int v18 = 0;
      do
      {
        uint64_t v26 = *v16;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v19 = abbrtn_filterLabelByTokenType(v26, 6, (_DWORD *)&v28 + 1, (_DWORD *)&v29 + 1, &v29);
        uint64_t v2 = v19;
        if ((v19 & 0x80000000) != 0 || !HIDWORD(v28))
        {
          if ((v19 & 0x80000000) != 0) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v2 = abbrtn_checkIfBisectedbyTokenType(a1, HIDWORD(v29), v29, 4, &v28);
          if ((v2 & 0x80000000) != 0) {
            goto LABEL_56;
          }
          if (v28 == 1)
          {
            unint64_t v20 = (unint64_t)v17 - v6;
            unsigned int v21 = (((unint64_t)v17 - v6) >> 3) + 1;
            if (v21 > v18)
            {
              unsigned int v22 = 2 * v18;
              if (2 * v18 >= v18 + 1000000) {
                unsigned int v22 = v18 + 1000000;
              }
              if (v22 > v21) {
                unsigned int v21 = v22;
              }
              if (v21 <= 8) {
                unsigned int v18 = 8;
              }
              else {
                unsigned int v18 = v21;
              }
              unint64_t v6 = OOCAllocator_Realloc(a1 + 152, v6, 8 * v18, &v27);
              int v12 = v27;
              if (v27) {
                goto LABEL_55;
              }
              unsigned __int16 v17 = (uint64_t *)(v6 + (v20 & 0x7FFFFFFF8));
            }
            cstdlib_memcpy(v17++, &v26, 8uLL);
          }
        }
        ++v16;
      }
      while ((unint64_t)v16 < *(void *)(*(void *)(*(void *)(a1 + 192) + 32) + 32));
      if (v6 < (unint64_t)v17)
      {
        int v23 = (uint64_t *)v6;
        do
        {
          uint64_t v26 = *v23;
          int v24 = LDO_RemoveLabel(*(void *)(a1 + 192), v26);
          uint64_t v2 = LH_ERROR_to_VERROR(v24);
          if ((v2 & 0x80000000) != 0) {
            goto LABEL_56;
          }
          ++v23;
        }
        while (v23 < v17);
      }
    }
    int v12 = v27;
    if (v27) {
LABEL_55:
    }
      uint64_t v2 = LH_ERROR_to_VERROR(v12);
  }
  else
  {
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    unsigned int v7 = 0;
    while (1)
    {
      uint64_t v8 = *v4;
      uint64_t v26 = v8;
      HIDWORD(v29) = 0;
      uint64_t v2 = abbrtn_checkIfLabelSpanIsStrictlyContainedInOtherLabelSpan(a1, v8, 4, 6, (_DWORD *)&v29 + 1);
      if ((v2 & 0x80000000) != 0) {
        break;
      }
      if (HIDWORD(v29) == 1) {
        goto LABEL_11;
      }
      uint64_t v2 = abbrtn_checkIfLabelSpanIsStrictlyContainedInOtherLabelSpan(a1, v8, 4, 4, (_DWORD *)&v29 + 1);
      if ((v2 & 0x80000000) != 0) {
        break;
      }
      if (HIDWORD(v29) == 1) {
        goto LABEL_11;
      }
      uint64_t v2 = abbrtn_checkIfLabelSpanIsStrictlyContainedInOtherLabelSpan(a1, v8, 6, 4, (_DWORD *)&v29 + 1);
      if ((v2 & 0x80000000) != 0) {
        break;
      }
      if (HIDWORD(v29) == 1) {
        goto LABEL_11;
      }
      uint64_t v2 = abbrtn_checkIfLabelSpanIsStrictlyContainedInOtherLabelSpan(a1, v8, 6, 6, (_DWORD *)&v29 + 1);
      if ((v2 & 0x80000000) != 0) {
        break;
      }
      if (HIDWORD(v29) == 1)
      {
LABEL_11:
        unint64_t v9 = (unint64_t)v5 - v6;
        unsigned int v10 = (((unint64_t)v5 - v6) >> 3) + 1;
        if (v10 > v7)
        {
          unsigned int v11 = 2 * v7;
          if (2 * v7 >= v7 + 1000000) {
            unsigned int v11 = v7 + 1000000;
          }
          if (v11 > v10) {
            unsigned int v10 = v11;
          }
          if (v10 <= 8) {
            unsigned int v7 = 8;
          }
          else {
            unsigned int v7 = v10;
          }
          unint64_t v6 = OOCAllocator_Realloc(a1 + 152, v6, 8 * v7, &v27);
          int v12 = v27;
          if (v27) {
            goto LABEL_55;
          }
          unsigned int v5 = (uint64_t *)(v6 + (v9 & 0x7FFFFFFF8));
        }
        cstdlib_memcpy(v5++, &v26, 8uLL);
      }
      if ((unint64_t)++v4 >= *(void *)(*(void *)(*(void *)(a1 + 192) + 32) + 32))
      {
        if (v6 >= (unint64_t)v5)
        {
LABEL_27:
          if (v6) {
            OOCAllocator_Free(a1 + 152, v6);
          }
          goto LABEL_29;
        }
        unint64_t v13 = (uint64_t *)v6;
        while (1)
        {
          uint64_t v26 = *v13;
          int v14 = LDO_RemoveLabel(*(void *)(a1 + 192), v26);
          uint64_t v2 = LH_ERROR_to_VERROR(v14);
          if ((v2 & 0x80000000) != 0) {
            goto LABEL_56;
          }
          if (++v13 >= v5) {
            goto LABEL_27;
          }
        }
      }
    }
  }
LABEL_56:
  if (v6) {
    OOCAllocator_Free(a1 + 152, v6);
  }
  return v2;
}

BOOL compare(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t abbrtn_compareUtf8Char(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  utf8_getUTF8Char(a1, 0, __s1);
  utf8_getUTF8Char(a2, 0, __s2);
  return cstdlib_strcmp(__s1, __s2);
}

uint64_t getNextTOKEN_INT_TNPos(uint64_t a1, _WORD *a2, _WORD *a3, uint64_t *a4, unsigned int a5, unsigned int a6, _DWORD *a7)
{
  __n128 v25 = 0uLL;
  unint64_t v26 = 0;
  LDO_GetLabels(*(void *)(a1 + 192), &v25);
  uint64_t v11 = 0;
  __s1 = 0;
  *a7 = 0;
  int v12 = (uint64_t *)v25.n128_u64[1];
  if (v25.n128_u64[1] < v26)
  {
    int v24 = 0;
    while (1)
    {
      uint64_t v22 = 0;
      unsigned __int16 AbsoluteFrom = LDOLabel_GetAbsoluteFrom(*v12);
      unsigned __int16 AbsoluteTo = LDOLabel_GetAbsoluteTo(*v12);
      int Category = LDOObject_GetCategory(*v12, (uint64_t *)&__s1);
      uint64_t v11 = LH_ERROR_to_VERROR(Category);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      if (!cstdlib_strcmp(__s1, "TOKEN")) {
        break;
      }
LABEL_5:
      if ((unint64_t)++v12 >= v26) {
        return v11;
      }
    }
    if (AbsoluteFrom >= a5)
    {
      if (AbsoluteTo > a6) {
        goto LABEL_12;
      }
    }
    else if (AbsoluteTo <= a5 || AbsoluteTo >= a6)
    {
LABEL_12:
      if (AbsoluteFrom <= a5 || AbsoluteFrom >= a6 || AbsoluteTo <= a6) {
        goto LABEL_5;
      }
    }
    int U32Attribute = LDOObject_GetU32Attribute((uint64_t *)*v12, "_TTYPE", (_DWORD *)&v22 + 1, &v24);
    uint64_t v11 = LH_ERROR_to_VERROR(U32Attribute);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    if (v24 == 6)
    {
      int StringAttribute = LDOObject_GetStringAttribute((uint64_t *)*v12, "TNTAG", &v22, a4);
      uint64_t v11 = LH_ERROR_to_VERROR(StringAttribute);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      if (v22 == 1)
      {
        if (AbsoluteFrom >= a5 || AbsoluteTo <= a5 || (__int16 v18 = a5, AbsoluteTo >= a6)) {
          __int16 v18 = AbsoluteFrom;
        }
        *a2 = v18;
        if (AbsoluteFrom <= a5 || AbsoluteFrom >= a6 || AbsoluteTo <= a6) {
          LOWORD(a6) = AbsoluteTo;
        }
        *a3 = a6;
        *a7 = 1;
        return v11;
      }
    }
    goto LABEL_5;
  }
  return v11;
}

uint64_t addToLayer(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, const char *a5, const char *a6, unsigned __int8 *a7)
{
  uint64_t v8 = *(char **)(a1 + 96);
  if (a5)
  {
    cstdlib_strcat(v8, "§");
    cstdlib_strcat(*(char **)(a1 + 96), a5);
    int v12 = cstdlib_strlen(a6);
    unsigned __int16 v13 = Utf8_LengthInUtf8chars((unint64_t)a6, v12);
    int v14 = cstdlib_strlen(a5);
    unsigned __int16 v15 = Utf8_LengthInUtf8chars((unint64_t)a5, v14);
    if (v13 > v15)
    {
      int v16 = v13 - v15;
      if (v16 >= 1)
      {
        int v17 = 0;
        unsigned __int8 v18 = *a7;
        do
        {
          if (v18 > 0x13u) {
            break;
          }
          cstdlib_strcat(*(char **)(a1 + 96), "~");
          ++v17;
          unsigned __int8 v18 = *a7 + 1;
          *a7 = v18;
        }
        while (v16 > (unsigned __int16)v17);
      }
    }
    cstdlib_strcat(*(char **)(a1 + 96), "§");
    cstdlib_strcat(*(char **)(a1 + 104), "§");
    cstdlib_strcat(*(char **)(a1 + 104), a6);
    int v19 = cstdlib_strlen(a5);
    unsigned __int16 v20 = Utf8_LengthInUtf8chars((unint64_t)a5, v19);
    int v21 = cstdlib_strlen(a6);
    unsigned __int16 v22 = Utf8_LengthInUtf8chars((unint64_t)a6, v21);
    if (v20 > v22)
    {
      int v23 = v20 - v22;
      if (v23 >= 1)
      {
        int v24 = 0;
        do
        {
          cstdlib_strcat(*(char **)(a1 + 104), "~");
          ++v24;
        }
        while (v23 > (unsigned __int16)v24);
      }
    }
    __n128 v25 = *(char **)(a1 + 104);
    return (uint64_t)cstdlib_strcat(v25, "§");
  }
  else
  {
    uint64_t result = (uint64_t)cstdlib_strncat(v8, (const char *)(a2 + a3), a4 - (unint64_t)a3);
    int v30 = 0;
    if (a3)
    {
      unsigned __int16 v31 = 0;
      do
      {
        uint64_t result = *(unsigned __int8 *)(a2 + v31);
        if (!*(unsigned char *)(a2 + v31)) {
          break;
        }
        uint64_t result = utf8_determineUTF8CharLength(result);
        v31 += result;
        ++v30;
      }
      while (a3 > v31);
    }
    unsigned __int16 v32 = 0;
    if (a4)
    {
      unsigned __int16 v33 = 0;
      do
      {
        uint64_t result = *(unsigned __int8 *)(a2 + v33);
        if (!*(unsigned char *)(a2 + v33)) {
          break;
        }
        uint64_t result = utf8_determineUTF8CharLength(result);
        v33 += result;
        ++v32;
      }
      while (a4 > v33);
    }
    for (; (unsigned __int16)v30 < v32; ++v30)
      uint64_t result = (uint64_t)cstdlib_strcat(*(char **)(a1 + 104), " ");
  }
  return result;
}

uint64_t abbrtn_checkIfLabelSpanIsStrictlyContainedInOtherLabelSpan(uint64_t a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unsigned int v14 = 0;
  *a5 = 0;
  uint64_t result = abbrtn_filterLabelByTokenType(a2, a3, (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1);
  if ((result & 0x80000000) == 0)
  {
    if (HIDWORD(v16))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 192) + 32);
      unsigned int v10 = *(uint64_t **)(v9 + 24);
      if ((unint64_t)v10 < *(void *)(v9 + 32))
      {
        unsigned int v12 = HIDWORD(v15);
        unsigned int v11 = v16;
        do
        {
          uint64_t result = abbrtn_filterLabelByTokenType(*v10, a4, (_DWORD *)&v16 + 1, &v15, &v14);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (HIDWORD(v16) == 1)
          {
            BOOL v13 = v11 < v15 || v12 >= v14;
            if (!v13 || v11 > v15 && v12 <= v14)
            {
              *a5 = 1;
              return result;
            }
          }
          ++v10;
        }
        while ((unint64_t)v10 < *(void *)(*(void *)(*(void *)(a1 + 192) + 32) + 32));
      }
    }
  }
  return result;
}

uint64_t abbrtn_filterLabelByTokenType(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v13 = 0;
  *a3 = 0;
  if (!*(_DWORD *)(a1 + 104)) {
    return 0;
  }
  int U32Attribute = LDOObject_GetU32Attribute((uint64_t *)a1, "_TTYPE", (_DWORD *)&v13 + 1, &v13);
  uint64_t v11 = LH_ERROR_to_VERROR(U32Attribute);
  if ((v11 & 0x80000000) == 0 && HIDWORD(v13) && v13 == a2)
  {
    *a3 = 1;
    *a4 = LDOLabel_GetAbsoluteFrom(a1);
    *a5 = LDOLabel_GetAbsoluteTo(a1);
  }
  return v11;
}

uint64_t abbrtn_deallocate_LuaVM(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (v3)
  {
    uint64_t result = OOC_PlacementDeleteObject(result, v3);
    *a2 = 0;
  }
  return result;
}

uint64_t abbrtn_load_lua_code(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v16 = 0;
  if (*a4)
  {
    OOC_PlacementDeleteObject(a3, *a4);
    *a4 = 0;
  }
  int IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(a1, a2, 0, &v16);
  uint64_t v9 = LH_ERROR_to_VERROR(IsLuaCodeAvailable);
  int v10 = v16;
  if ((v9 & 0x80000000) != 0 || v16 != 1)
  {
LABEL_8:
    if ((v9 & 0x80000000) == 0 && v10) {
      return v9;
    }
    goto LABEL_12;
  }
  int v16 = 0;
  int v11 = PNEW_LuaVMLDO_Con(a3, a3, (uint64_t)a1, a2, (uint64_t)"FE_ABBRTN", (uint64_t **)a4);
  uint64_t v12 = LH_ERROR_to_VERROR(v11);
  if ((v12 & 0x80000000) == 0)
  {
    int ScriptFromRIFF = LuaVMLDO_LoadScriptFromRIFF(*a4, 0);
    uint64_t v12 = LH_ERROR_to_VERROR(ScriptFromRIFF);
    if ((v12 & 0x80000000) == 0)
    {
      int IsLuaFunctionAvailable = LuaVMLDO_IsLuaFunctionAvailable(*a4, (uint64_t)"runAbbrtn", &v16);
      uint64_t v9 = LH_ERROR_to_VERROR(IsLuaFunctionAvailable);
      int v10 = v16;
      goto LABEL_8;
    }
  }
  uint64_t v9 = v12;
LABEL_12:
  if (*a4)
  {
    OOC_PlacementDeleteObject(a3, *a4);
    *a4 = 0;
  }
  return v9;
}

uint64_t abbrtn_dumpNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  log_OutText(*(void *)(a1 + 32), a2, 4, 0, (uint64_t)"abbrtn_dumpNodes : %s : Start", a6, a7, a8, a5);
  int v12 = LDO_ComputeText(a3, &v33);
  uint64_t v13 = LH_ERROR_to_VERROR(v12);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v14 = LHString_BorrowCPtr(v33);
    log_OutText(*(void *)(a1 + 32), a2, 4, 0, (uint64_t)"LDO text |%s|", v15, v16, v17, v14);
    uint64_t v21 = *(void *)(a3 + 16);
    unsigned __int16 v22 = *(uint64_t **)(v21 + 80);
    if ((unint64_t)v22 >= *(void *)(v21 + 88))
    {
LABEL_13:
      log_OutText(*(void *)(a1 + 32), a2, 4, 0, (uint64_t)"abbrtn_dumpNodes : End", v18, v19, v20, 0);
    }
    else
    {
      int v23 = 0;
      while (1)
      {
        int v24 = LDOTreeNode_ComputeAbsoluteFrom(*v22, &v35);
        uint64_t v25 = LH_ERROR_to_VERROR(v24);
        if ((v25 & 0x80000000) != 0) {
          break;
        }
        int v26 = LDOTreeNode_ComputeAbsoluteTo(*v22, (_DWORD *)&v34 + 1);
        uint64_t v25 = LH_ERROR_to_VERROR(v26);
        if ((v25 & 0x80000000) != 0) {
          break;
        }
        int U32Attribute = LDOObject_GetU32Attribute((uint64_t *)*v22, "_TTYPE", (_DWORD *)&v35 + 1, &v34);
        uint64_t v13 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v13 & 0x80000000) != 0) {
          goto LABEL_15;
        }
        if (HIDWORD(v35) == 1)
        {
          size_t v28 = (HIDWORD(v34) - v35);
          if (v28 < 0x80)
          {
            cstdlib_strncpy(__dst, (const char *)(v14 + v35), v28);
            __dst[(HIDWORD(v34) - v35)] = 0;
          }
          else
          {
            cstdlib_strcpy(__dst, "(TOKEN TOO LONG)");
          }
          log_OutText(*(void *)(a1 + 32), a2, 4, 0, (uint64_t)"[%d] %s %d,%d |%s|", v29, v30, v31, (unsigned __int16)v23++);
        }
        if ((unint64_t)++v22 >= *(void *)(v21 + 88)) {
          goto LABEL_13;
        }
      }
      uint64_t v13 = v25;
    }
  }
LABEL_15:
  if (v33) {
    OOC_PlacementDeleteObject(a4, v33);
  }
  return v13;
}

uint64_t abbrtn_dumpLabels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  log_OutText(*(void *)(a1 + 32), a2, 4, 0, (uint64_t)"abbrtn_dumpLabels : %s : Start", a6, a7, a8, a5);
  int v12 = LDO_ComputeText(a3, &v59);
  uint64_t v13 = LH_ERROR_to_VERROR(v12);
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_33;
  }
  uint64_t v55 = a4;
  uint64_t v54 = LHString_BorrowCPtr(v59);
  uint64_t v56 = a2;
  log_OutText(*(void *)(a1 + 32), a2, 4, 0, (uint64_t)"LDO text |%s|", v14, v15, v16, v54);
  uint64_t v20 = *(void *)(a3 + 32);
  uint64_t v21 = *(uint64_t **)(v20 + 24);
  if ((unint64_t)v21 >= *(void *)(v20 + 32))
  {
LABEL_30:
    log_OutText(*(void *)(a1 + 32), v56, 4, 0, (uint64_t)"abbrtn_dumpLabels : End", v17, v18, v19, 0);
    goto LABEL_32;
  }
  unsigned __int16 v22 = 0;
  int v23 = "_TTYPE";
  while (1)
  {
    int v24 = (uint64_t *)*v21;
    unsigned int AbsoluteFrom = LDOLabel_GetAbsoluteFrom(*v21);
    int AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)v24);
    int U32Attribute = LDOObject_GetU32Attribute(v24, v23, &v60, (_DWORD *)&v60 + 1);
    uint64_t v28 = LH_ERROR_to_VERROR(U32Attribute);
    if ((v28 & 0x80000000) != 0) {
      break;
    }
    if (v60 == 1)
    {
      uint64_t v29 = a3;
      uint64_t v30 = v23;
      int v31 = HIDWORD(v60);
      unsigned int v32 = AbsoluteTo - AbsoluteFrom;
      if (AbsoluteTo == AbsoluteFrom)
      {
        uint64_t v33 = "NULL";
        goto LABEL_10;
      }
      if (v32 < 0x80)
      {
        cstdlib_strncpy(__dst, (const char *)(v54 + AbsoluteFrom), AbsoluteTo - AbsoluteFrom);
        __dst[v32] = 0;
      }
      else
      {
        uint64_t v33 = "(TOKEN TOO LONG)";
LABEL_10:
        cstdlib_strcpy(__dst, v33);
      }
      int v37 = v31 - 4;
      int v23 = v30;
      switch(v37)
      {
        case 0:
          log_OutText(*(void *)(a1 + 32), v56, 4, 0, (uint64_t)"[%d] TOKEN_DCT %d,%d |%s|", v34, v35, v36, v22);
          goto LABEL_23;
        case 1:
          int StringAttribute = LDOObject_GetStringAttribute(v24, "TNTAG", &v60, &v58);
          uint64_t v28 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v28 & 0x80000000) != 0) {
            goto LABEL_31;
          }
          a3 = v29;
          uint64_t v42 = *(void *)(a1 + 32);
          if (v60 == 1) {
            log_OutText(v42, v56, 4, 0, (uint64_t)"[%d] TOKEN_USER_TN %d,%d |%s| (%s)", v39, v40, v41, v22);
          }
          else {
            log_OutText(v42, v56, 4, 0, (uint64_t)"[%d] TOKEN_USER_TN %d,%d |%s| (no TNTAG)", v39, v40, v41, v22);
          }
          break;
        case 2:
          int v43 = LDOObject_GetStringAttribute(v24, "LANGMAP", &v60, &v57);
          uint64_t v28 = LH_ERROR_to_VERROR(v43);
          if ((v28 & 0x80000000) != 0) {
            goto LABEL_31;
          }
          a3 = v29;
          uint64_t v47 = *(void *)(a1 + 32);
          if (v60 == 1) {
            log_OutText(v47, v56, 4, 0, (uint64_t)"[%d] TOKEN_INT_TN %d,%d |%s| LANGMAP=\"%s\"", v44, v45, v46, v22);
          }
          else {
            log_OutText(v47, v56, 4, 0, (uint64_t)"[%d] TOKEN_INT_TN %d,%d |%s|", v44, v45, v46, v22);
          }
          break;
        case 3:
          log_OutText(*(void *)(a1 + 32), v56, 4, 0, (uint64_t)"[%d] TOKEN_CASEGENDER %d,%d |%s|", v34, v35, v36, v22);
          goto LABEL_23;
        case 4:
          log_OutText(*(void *)(a1 + 32), v56, 4, 0, (uint64_t)"[%d] TOKEN_DEPES %d,%d |%s|", v34, v35, v36, v22);
          goto LABEL_23;
        default:
          log_OutText(*(void *)(a1 + 32), v56, 4, 0, (uint64_t)"[%d] TOKEN type=%d %d,%d |%s|", v34, v35, v36, v22);
          int v23 = v30;
LABEL_23:
          a3 = v29;
          break;
      }
    }
    int v48 = LDOObject_GetU32Attribute(v24, "_MTYPE", &v60, (_DWORD *)&v60 + 1);
    uint64_t v13 = LH_ERROR_to_VERROR(v48);
    if ((v13 & 0x80000000) != 0) {
      goto LABEL_32;
    }
    if (v60 == 1)
    {
      uint64_t v49 = *(void *)(a1 + 32);
      marker_getString(SHIDWORD(v60));
      log_OutText(v49, v56, 4, 0, (uint64_t)"[%d] MARKER %s %d,%d", v50, v51, v52, v22);
    }
    ++v22;
    if ((unint64_t)++v21 >= *(void *)(*(void *)(a3 + 32) + 32)) {
      goto LABEL_30;
    }
  }
LABEL_31:
  uint64_t v13 = v28;
LABEL_32:
  a4 = v55;
LABEL_33:
  if (v59) {
    OOC_PlacementDeleteObject(a4, v59);
  }
  return v13;
}

uint64_t abbrtn_process_ldo_with_lua(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = 0;
  int v10 = LDO_ComputeText(a3, &v34);
  uint64_t v11 = LH_ERROR_to_VERROR(v10);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = LHString_BorrowCPtr(v34);
    if (v12)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"LDO sentence: %s", v13, v14, v15, v12);
      uint64_t v19 = abbrtn_dumpNodes(a1, a2, a3, a4, (uint64_t)"abbrtn: before Lua", v16, v17, v18);
      if ((v19 & 0x80000000) != 0
        || (uint64_t v19 = abbrtn_dumpLabels(a1, a2, a3, a4, (uint64_t)"abbrtn: before Lua", v20, v21, v22),
            (v19 & 0x80000000) != 0))
      {
LABEL_8:
        uint64_t v11 = v19;
        goto LABEL_9;
      }
      int v23 = LuaVMLDO_RunFunction(a5, (uint64_t)"runAbbrtn", a3);
      uint64_t v24 = LH_ERROR_to_VERROR(v23);
      if ((v24 & 0x80000000) == 0)
      {
        uint64_t v19 = abbrtn_dumpNodes(a1, a2, a3, a4, (uint64_t)"abbrtn: after Lua", v26, v27, v28);
        if ((v19 & 0x80000000) == 0) {
          uint64_t v19 = abbrtn_dumpLabels(a1, a2, a3, a4, (uint64_t)"abbrtn: after Lua", v29, v30, v31);
        }
        goto LABEL_8;
      }
      uint64_t v11 = v24;
      log_OutPublic(*(void *)(a1 + 32), a2, 32004, 0, v25, v26, v27, v28, v33);
    }
  }
LABEL_9:
  if (v34) {
    OOC_PlacementDeleteObject(a4, v34);
  }
  return v11;
}

uint64_t fe_abbrtn_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2310021121;
  }
  uint64_t result = 0;
  *a2 = &IFeAbbrtn;
  return result;
}

uint64_t fe_abbrtn_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2310021127;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_abbrtn_ClassClose()
{
  return 0;
}

uint64_t fe_abbrtn_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  int v37 = 0;
  uint64_t v5 = 2310021127;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (!a5) {
    return v5;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v37);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(v37[6], (uint64_t)"LINGDB", &v36);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(v37[6], (uint64_t)"FE_DCTLKP", &v35);
  uint64_t v13 = v37[6];
  if ((Object & 0x80000000) != 0)
  {
    unsigned int v32 = "LINGDB";
LABEL_13:
    objc_ReleaseObject(v13, (uint64_t)v32);
    return Object;
  }
  uint64_t v14 = objc_GetObject(v13, (uint64_t)"FE_DEPES", &v34);
  if ((v14 & 0x80000000) != 0)
  {
    uint64_t Object = v14;
    objc_ReleaseObject(v37[6], (uint64_t)"LINGDB");
    uint64_t v13 = v37[6];
    unsigned int v32 = "FE_DCTLKP";
    goto LABEL_13;
  }
  uint64_t v15 = heap_Alloc(v37[1], 216);
  if (v15)
  {
    uint64_t v20 = v15;
    *(void *)uint64_t v15 = a1;
    *(void *)(v15 + 8) = a2;
    uint64_t v22 = v36;
    uint64_t v21 = v37;
    *(void *)(v15 + 16) = v37;
    *(void *)(v15 + 24) = a3;
    *(void *)(v15 + 32) = a4;
    *(void *)(v15 + 40) = *(void *)(v22 + 8);
    uint64_t v23 = v35;
    *(void *)(v15 + 64) = *(void *)(v35 + 8);
    *(_OWORD *)(v15 + 48) = *(_OWORD *)(v23 + 16);
    uint64_t v24 = v34;
    *(void *)(v15 + 88) = *(void *)(v34 + 8);
    long long v25 = *(_OWORD *)(v24 + 16);
    *(void *)(v15 + 120) = heap_Alloc;
    *(_OWORD *)(v15 + 72) = v25;
    *(void *)(v15 + 96) = 0;
    *(void *)(v15 + 104) = 0;
    *(void *)(v15 + 192) = 0;
    *(void *)(v15 + 200) = 0;
    *(void *)(v15 + 208) = "FE_ABBRTN";
    *(void *)(v15 + 128) = heap_Calloc;
    *(void *)(v15 + 136) = heap_Realloc;
    *(void *)(v15 + 144) = heap_Free;
    int v26 = OOCAllocator_Con(v15 + 152, (_OWORD *)(v15 + 120), v21[1]);
    uint64_t v27 = LH_ERROR_to_VERROR(v26);
    if ((v27 & 0x80000000) != 0)
    {
      uint64_t v5 = v27;
      log_OutPublic(v37[4], (uint64_t)"FE_ABBRTN", 32003, 0, v28, v29, v30, v31, v34);
LABEL_17:
      fe_abbrtn_ObjClose(*(void *)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return v5;
    }
    *(void *)a5 = v20;
    *(_DWORD *)(a5 + 8) = 62338;
    uint64_t v5 = fe_abbrtn_ObjReopen(v20, *(void *)(a5 + 8));
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    log_OutPublic(v37[4], (uint64_t)"FE_ABBRTN", 32000, 0, v16, v17, v18, v19, v34);
    objc_ReleaseObject(v37[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v37[6], (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(v37[6], (uint64_t)"FE_DEPES");
    return 2310021130;
  }
  return v5;
}

uint64_t fe_abbrtn_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62338, 216);
  if ((result & 0x80000000) != 0) {
    return 2310021128;
  }
  if (a1)
  {
    abbrtn_deallocate_LuaVM(a1 + 152, (uint64_t *)(a1 + 200));
    OOCAllocator_Des();
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_abbrtn_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62338, 216);
  if ((result & 0x80000000) != 0) {
    return 2310021128;
  }
  if (!a1) {
    return result;
  }
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "fecfg", "nrpart_tn", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) != 0 || !*(_WORD *)&__c[1])
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else
  {
    uint64_t v4 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v4) {
      *uint64_t v4 = 0;
    }
    *(unsigned char *)(a1 + 112) = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  abbrtn_deallocate_LuaVM(a1 + 152, (uint64_t *)(a1 + 200));
  return abbrtn_load_lua_code(*(_WORD **)(a1 + 24), *(void *)(a1 + 32), a1 + 152, (uint64_t *)(a1 + 200));
}

uint64_t fe_abbrtn_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62338, 216);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2310021128;
  }
}

uint64_t fe_abbrtn_Process(void *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v45 = 0;
  __s1 = 0;
  int v43 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t __src = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62338, 216) & 0x80000000) != 0) {
    return 2310021128;
  }
  *a5 = 1;
  uint64_t v9 = LingDBHasSentence(a1[5], a3, a4, &v43);
  unint64_t v10 = 0;
  if ((v9 & 0x80000000) != 0 || v43 != 1)
  {
LABEL_48:
    if ((v9 & 0x80000000) != 0) {
      goto LABEL_52;
    }
    goto LABEL_49;
  }
  uint64_t v11 = (uint64_t)(a1 + 19);
  uint64_t v12 = a1 + 24;
  uint64_t inited = initLDO((uint64_t)(a1 + 19), a1 + 24);
  if ((inited & 0x80000000) != 0)
  {
LABEL_45:
    uint64_t v9 = inited;
    goto LABEL_46;
  }
  uint64_t v9 = importFromLingDB(a1[2], a1[5], a3, a4, a1 + 24);
  if ((v9 & 0x80000000) != 0)
  {
LABEL_46:
    unint64_t v10 = 0;
    goto LABEL_52;
  }
  if (!*v12)
  {
    unint64_t v10 = 0;
    goto LABEL_48;
  }
  int v14 = LDO_ComputeText(*v12, &v42);
  uint64_t inited = LH_ERROR_to_VERROR(v14);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_45;
  }
  uint64_t v15 = LHString_BorrowCPtr(v42);
  uint64_t v16 = *(void *)(*v12 + 32);
  uint64_t v17 = *(uint64_t **)(v16 + 24);
  if ((unint64_t)v17 >= *(void *)(v16 + 32))
  {
    unint64_t v10 = 0;
  }
  else
  {
    int v38 = (const char *)v15;
    uint64_t v39 = 0;
    unint64_t v10 = 0;
    unsigned int v18 = 0;
    do
    {
      uint64_t v19 = *v17;
      uint64_t __src = (uint64_t *)v19;
      if (*(_DWORD *)(v19 + 104))
      {
        LODWORD(v41) = 0;
        int U32Attribute = LDOObject_GetU32Attribute((uint64_t *)v19, "_TTYPE", &v41, (_DWORD *)&v41 + 1);
        uint64_t v9 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v9 & 0x80000000) != 0) {
          goto LABEL_52;
        }
        if (v41 == 1 && HIDWORD(v41) == 5)
        {
          uint64_t v22 = (char *)v39 - v10;
          unsigned int v23 = (((unint64_t)v39 - v10) >> 3) + 1;
          if (v23 <= v18)
          {
            int v26 = (char *)v39;
          }
          else
          {
            unsigned int v24 = 2 * v18;
            if (2 * v18 >= v18 + 1000000) {
              unsigned int v24 = v18 + 1000000;
            }
            if (v24 > v23) {
              unsigned int v23 = v24;
            }
            if (v23 <= 8) {
              unsigned int v18 = 8;
            }
            else {
              unsigned int v18 = v23;
            }
            uint64_t v25 = OOCAllocator_Realloc((uint64_t)(a1 + 19), v10, 8 * v18, &v45);
            unint64_t v10 = v25;
            if (v45) {
              goto LABEL_48;
            }
            int v26 = (char *)(v25 + ((unint64_t)v22 & 0x7FFFFFFF8));
          }
          cstdlib_memcpy(v26, &__src, 8uLL);
          uint64_t v39 = (uint64_t *)(v26 + 8);
        }
      }
      ++v17;
    }
    while ((unint64_t)v17 < *(void *)(*(void *)(*v12 + 32) + 32));
    if (v10 < (unint64_t)v39)
    {
      uint64_t v27 = (uint64_t *)v10;
      do
      {
        uint64_t v28 = *v27;
        uint64_t __src = (uint64_t *)v28;
        if (*(_DWORD *)(v28 + 104))
        {
          unsigned __int16 AbsoluteFrom = LDOLabel_GetAbsoluteFrom(v28);
          __int16 AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)__src);
          int StringAttribute = LDOObject_GetStringAttribute(__src, "TNTAG", &v41, (uint64_t *)&__s1);
          uint64_t v32 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v32 & 0x80000000) != 0) {
            goto LABEL_51;
          }
          if (!cstdlib_strstr(__s1, "spell"))
          {
            if (cstdlib_strcmp(__s1, "phon"))
            {
              if (!cstdlib_strstr(__s1, "prompt")
                && !cstdlib_strstr(__s1, "raw")
                && !cstdlib_strstr(__s1, "RAW")
                && !cstdlib_strstr(__s1, "internal-nuance-system-norm"))
              {
                uint64_t v32 = abbrtn_TnLookup(a1, v38, AbsoluteFrom, AbsoluteTo, __s1, (uint64_t)__src);
                if ((v32 & 0x80000000) != 0) {
                  goto LABEL_51;
                }
              }
            }
          }
        }
        ++v27;
      }
      while (v27 < v39);
    }
    uint64_t v11 = (uint64_t)(a1 + 19);
  }
  uint64_t v32 = abbrtn_sanitizeTokenDCTAndIntTN((uint64_t)a1);
  if ((v32 & 0x80000000) != 0
    || (uint64_t v37 = a1[25]) != 0
    && (uint64_t v32 = abbrtn_process_ldo_with_lua(a1[2], a1[26], a1[24], v11, v37), (v32 & 0x80000000) != 0))
  {
LABEL_51:
    uint64_t v9 = v32;
    goto LABEL_52;
  }
  uint64_t v9 = exportToLingDB(a1[2], a1[5], a3, a4, v11, a1[24], 1, 0);
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_52;
  }
LABEL_49:
  if (v45)
  {
    uint64_t v32 = LH_ERROR_to_VERROR(v45);
    goto LABEL_51;
  }
LABEL_52:
  uint64_t v33 = a1[12];
  if (v33)
  {
    heap_Free(*(void **)(a1[2] + 8), v33);
    a1[12] = 0;
  }
  uint64_t v34 = a1[13];
  if (v34)
  {
    heap_Free(*(void **)(a1[2] + 8), v34);
    a1[13] = 0;
  }
  if (v42)
  {
    OOC_PlacementDeleteObject((uint64_t)(a1 + 19), v42);
    uint64_t v42 = 0;
  }
  if (v10) {
    OOCAllocator_Free((uint64_t)(a1 + 19), v10);
  }
  uint64_t v35 = a1[24];
  if (v35)
  {
    deinitLDO((uint64_t)(a1 + 19), v35);
    a1[24] = 0;
  }
  return v9;
}

uint64_t fe_abbrtn_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62338, 216);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2310021128;
  }
}

uint64_t fe_dctlkp_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t CanonMap = 2306875402;
  int v48 = 0;
  if (!a5) {
    return 2306875399;
  }
  memset(__c, 0, sizeof(__c));
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v51);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  log_OutText(v51[4], (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_ObjOpen", v8, v9, v10, v46);
  uint64_t inited = objc_GetObject(v51[6], (uint64_t)"LINGDB", &v50);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v11 = heap_Calloc((void *)v51[1], 1, 4032);
  if (v11)
  {
    uint64_t v16 = v11;
    *(void *)a5 = v11;
    *(_DWORD *)(a5 + 8) = 62335;
    *(void *)(v11 + 648) = *(void *)(v50 + 8);
    *(void *)uint64_t v11 = v51;
    *(_WORD *)(v11 + 1712) = 1;
    *(_DWORD *)(v11 + 2996) = 1;
    *(void *)(v11 + 576) = 0;
    *(_DWORD *)(v11 + 568) = 0;
    uint64_t v17 = (_DWORD *)(v11 + 8);
    *(_WORD *)(v11 + 80) = 0;
    *(_WORD *)(v11 + 160) = 0;
    *(_WORD *)(v11 + 240) = 0;
    *(_WORD *)(v11 + 320) = 0;
    *(_WORD *)(v11 + 400) = 0;
    *(_WORD *)(v11 + 480) = 0;
    *(_WORD *)(v11 + 560) = 0;
    unsigned int v18 = (uint64_t *)(v11 + 16);
    set_DctBrk(v11 + 16, v51[3]);
    set_DctBrk(v16 + 96, v51[3]);
    set_DctBrk(v16 + 176, v51[3]);
    set_DctBrk(v16 + 256, v51[3]);
    set_DctBrk(v16 + 336, v51[3]);
    set_DctBrk(v16 + 416, v51[3]);
    set_DctBrk(v16 + 496, v51[3]);
    *(void *)(v16 + 64) = 0;
    *(void *)(v16 + 144) = 0;
    *(void *)(v16 + 224) = 0;
    *(void *)(v16 + 304) = 0;
    *(void *)(v16 + 384) = 0;
    *(void *)(v16 + 464) = 0;
    *(void *)(v16 + 544) = 0;
    *(_DWORD *)(v16 + 72) = 0;
    *(_DWORD *)(v16 + 152) = 0;
    *(_DWORD *)(v16 + 232) = 0;
    *(_DWORD *)(v16 + 312) = 0;
    *(_DWORD *)(v16 + 392) = 0;
    *(_DWORD *)(v16 + 472) = 0;
    *(_DWORD *)(v16 + 552) = 0;
    if ((hlp_CreateBrokerString((uint64_t)v51, (unsigned char *)(v16 + 1714), 0) & 0x80000000) != 0
      || (open_DctRom(v18, v16 + 1714, v17) & 0x80000000) != 0)
    {
      Brokeruint64_t String = hlp_CreateBrokerString((uint64_t)v51, (unsigned char *)(v16 + 1714), 1);
      if ((BrokerString & 0x80000000) != 0) {
        goto LABEL_49;
      }
      Brokeruint64_t String = open_DctRom(v18, v16 + 1714, v17);
      if ((BrokerString & 0x80000000) != 0) {
        goto LABEL_49;
      }
    }
    if ((hlp_CreateVoiceBrokerString((uint64_t)v51, (unsigned char *)(v16 + 1970), 1) & 0x80000000) != 0
      || (open_DctRom((uint64_t *)(v16 + 336), v16 + 1970, (_DWORD *)(v16 + 328)) & 0x80000000) != 0)
    {
      Brokeruint64_t String = hlp_CreateVoiceBrokerString((uint64_t)v51, (unsigned char *)(v16 + 1970), 0);
      if ((BrokerString & 0x80000000) != 0) {
        goto LABEL_49;
      }
      if ((open_DctRom((uint64_t *)(v16 + 336), v16 + 1970, (_DWORD *)(v16 + 328)) & 0x80000000) != 0) {
        *(_DWORD *)(v16 + 328) = 0;
      }
    }
    BOOL v20 = 0;
    if ((paramc_ParamGetStr(*(void *)(*(void *)v16 + 40), (uint64_t)"clcpppipelinemode", &v48) & 0x80000000) == 0
      && v48)
    {
      BOOL v20 = *v48 != 0;
    }
    uint64_t v21 = open_DctRom((uint64_t *)(v16 + 96), (uint64_t)"sysdct", (_DWORD *)(v16 + 88));
    uint64_t CanonMap = v21;
    if (!v20 && (v21 & 0x80000000) != 0)
    {
      *(_DWORD *)(v16 + 88) = 0;
      log_OutPublic(*(void *)(*(void *)v16 + 32), (uint64_t)"FE_DCTLKP", 41005, (uint64_t)"%s", v22, v23, v24, v25, "sysdct.dat not found");
      goto LABEL_51;
    }
    char v26 = !v20;
    if ((int)v21 >= 0) {
      char v26 = 1;
    }
    if ((v26 & 1) == 0) {
      *(_DWORD *)(v16 + 88) = 0;
    }
    uint64_t v27 = open_DctRom((uint64_t *)(v16 + 176), (uint64_t)"lid", (_DWORD *)(v16 + 168));
    char v32 = (int)v27 >= 0 || v20;
    if ((v32 & 1) == 0)
    {
      uint64_t CanonMap = v27;
      *(_DWORD *)(v16 + 168) = 0;
      log_OutPublic(*(void *)(*(void *)v16 + 32), (uint64_t)"FE_DCTLKP", 41007, (uint64_t)"%s", v28, v29, v30, v31, "lid.dat not found");
      goto LABEL_51;
    }
    char v33 = !v20;
    if ((int)v27 >= 0) {
      char v33 = 1;
    }
    if ((v33 & 1) == 0) {
      *(_DWORD *)(v16 + 168) = 0;
    }
    if ((open_DctRom((uint64_t *)(v16 + 416), (uint64_t)"clmnn:clmnndic", (_DWORD *)(v16 + 408)) & 0x80000000) != 0) {
      *(_DWORD *)(v16 + 408) = 0;
    }
    hlp_OpenMl2Dct((uint64_t)v51, v16);
    Brokeruint64_t String = hlp_OpenExtDct(*(void *)a5, *(void *)(a5 + 8), (_DWORD *)v16);
    if ((BrokerString & 0x80000000) == 0)
    {
      *(_WORD *)&__c[1] = -1;
      Brokeruint64_t String = loc_fe_dctlkp_LookupUtf(*(void *)a5, *(void *)(a5 + 8), "fecfg", "punc", &__c[3], &__c[1], __c, 0);
      if ((BrokerString & 0x80000000) == 0)
      {
        if (*(void *)&__c[3])
        {
          uint64_t v34 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
          if (v34) {
            char *v34 = 0;
          }
          uint64_t v35 = v51[1];
          int v36 = cstdlib_strlen(**(const char ***)&__c[3]);
          uint64_t v37 = (char *)heap_Alloc(v35, (v36 + 1));
          *(void *)(v16 + 584) = v37;
          if (v37)
          {
            cstdlib_strcpy(v37, **(const char ***)&__c[3]);
            *(_WORD *)&__c[1] = -1;
            Brokeruint64_t String = loc_fe_dctlkp_LookupUtf(*(void *)a5, *(void *)(a5 + 8), "fecfg", "canonmapdomain", &__c[3], &__c[1], __c, 0);
            if ((BrokerString & 0x80000000) == 0)
            {
              if (*(_WORD *)&__c[1]) {
                *(_DWORD *)(v16 + 2996) = 0;
              }
              Brokeruint64_t String = loc_fe_dctlkp_getDomainTokenDefs(*(void *)a5, *(void *)(a5 + 8), v16);
              if ((BrokerString & 0x80000000) == 0)
              {
                cstdlib_strcpy((char *)(v16 + 2738), "normal");
                *(void *)(v16 + 664) = 0;
                *(void *)(v16 + 3000) = 0;
                uint64_t CanonMap = LoadCanonMap(*(void *)a5, *(void *)(a5 + 8), "normal");
                if ((CanonMap & 0x80000000) == 0)
                {
LABEL_52:
                  log_OutText(v51[4], (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_ObjOpen", v42, v43, v44, v47);
                  return CanonMap;
                }
LABEL_51:
                fe_dctlkp_ObjClose(*(unsigned __int16 **)a5, *(void *)(a5 + 8));
                *(void *)a5 = 0;
                *(_DWORD *)(a5 + 8) = 0;
                goto LABEL_52;
              }
            }
            goto LABEL_49;
          }
          log_OutPublic(*(void *)(*(void *)v16 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v38, v39, v40, v41, v47);
        }
        uint64_t CanonMap = 2306875402;
        goto LABEL_51;
      }
    }
LABEL_49:
    uint64_t CanonMap = BrokerString;
    goto LABEL_51;
  }
  log_OutPublic(v51[4], (uint64_t)"FE_DCTLKP", 41000, 0, v12, v13, v14, v15, v47);
  objc_ReleaseObject(v51[6], (uint64_t)"LINGDB");
  return CanonMap;
}

uint64_t hlp_CreateBrokerString(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = "";
  __s2 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v10 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "sysdct/");
    cstdlib_strcat(__dst, __s2);
    if (!a3)
    {
      uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v7);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      cstdlib_strcat(__dst, "/");
      cstdlib_strcat(__dst, v7);
    }
    return brokeraux_ComposeBrokerString(a1, __dst, 1, 1, __s2, 0, 0, a2, 0x100uLL);
  }
  return result;
}

uint64_t hlp_CreateVoiceBrokerString(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v11 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v9);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v8);
    if ((result & 0x80000000) == 0)
    {
      if (a3)
      {
        if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voicemodel", &v7) & 0x80000000) != 0) {
          uint64_t v7 = 0;
        }
      }
      cstdlib_strcpy(__dst, "voicedct");
      return brokeraux_ComposeBrokerString(a1, __dst, 1, 1, v9, v8, v7, a2, 0x100uLL);
    }
  }
  return result;
}

uint64_t hlp_OpenMl2Dct(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v10 = 0u;
  __s2 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = (unsigned char *)(a2 + 2226);
    cstdlib_strcpy(__dst, "ml2dct");
    cstdlib_strcat(__dst, __s2);
    uint64_t result = brokeraux_ComposeBrokerString(a1, __dst, 1, 0, __s2, 0, 0, (unsigned char *)(a2 + 2226), 0x100uLL);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v6 = (_DWORD *)(a2 + 248);
      uint64_t v7 = (uint64_t *)(a2 + 256);
      uint64_t result = open_DctRom(v7, (uint64_t)v5, v6);
      if ((result & 0x80000000) != 0)
      {
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        *(_OWORD *)__dst = 0u;
        long long v10 = 0u;
        __s2 = 0;
        uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
        if ((result & 0x80000000) == 0)
        {
          cstdlib_strcpy(__dst, "ml2dct");
          uint64_t result = brokeraux_ComposeBrokerString(a1, __dst, 1, 0, __s2, 0, 0, v5, 0x100uLL);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = open_DctRom(v7, (uint64_t)v5, v6);
            if ((result & 0x80000000) != 0) {
              *uint64_t v6 = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_OpenExtDct(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v40 = 0;
  a3[122] = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)a3 + 40), (uint64_t)"clcpppipelinemode", &v40) & 0x80000000) == 0
    && v40
    && *v40)
  {
    return 0;
  }
  uint64_t v6 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", "extdctlkp_extlangcode", &__c[3], &__c[1], __c, 0);
  if ((v6 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    uint64_t v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7) {
      *uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(*(void *)a3 + 8);
    int v9 = cstdlib_strlen(**(const char ***)&__c[3]);
    long long v10 = (char *)heap_Alloc(v8, (v9 + 1));
    if (v10)
    {
      long long v15 = v10;
      cstdlib_strcpy(v10, **(const char ***)&__c[3]);
      long long v16 = *(uint64_t **)a3;
      __s1[0] = 0;
      if ((paramc_ParamGetStr(v16[5], (uint64_t)"extclccfg", __s1) & 0x80000000) != 0) {
        goto LABEL_23;
      }
      if (!__s1[0]) {
        goto LABEL_23;
      }
      if (!*__s1[0]) {
        goto LABEL_23;
      }
      unsigned __int16 v20 = cstdlib_strlen(v15);
      uint64_t v21 = __s1[0];
      if (!__s1[0]) {
        goto LABEL_23;
      }
      size_t v22 = v20;
      while (cstdlib_strncmp(v21, v15, v22))
      {
        uint64_t v23 = cstdlib_strchr(v21, 44);
        uint64_t v21 = v23 + 1;
        if (!v23) {
          goto LABEL_23;
        }
      }
      uint64_t v24 = cstdlib_strchr(v21, 47);
      if (v24 && (uint64_t v25 = cstdlib_strchr(v24 + 1, 47)) != 0)
      {
        char v26 = v25 + 1;
        uint64_t v27 = cstdlib_strchr(v25 + 1, 44);
        if (v27) {
          unsigned __int16 v28 = (_WORD)v27 - (_WORD)v26;
        }
        else {
          unsigned __int16 v28 = cstdlib_strlen(v26);
        }
        size_t v31 = v28;
        char v32 = (char *)heap_Alloc(v16[1], v28 + 1);
        uint64_t v29 = v32;
        if (v32)
        {
          cstdlib_strncpy(v32, v26, v31);
          cstdlib_strcpy((char *)&v29[v31], "");
          uint64_t v37 = *(void *)a3;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          *(_OWORD *)__s1 = 0u;
          long long v43 = 0u;
          cstdlib_strcpy((char *)__s1, "sysdct/");
          cstdlib_strcat((char *)__s1, v15);
          cstdlib_strcat((char *)__s1, "/");
          cstdlib_strcat((char *)__s1, v29);
          uint64_t v38 = brokeraux_ComposeBrokerStringEx(v37, (const char *)__s1, 1, 1, v15, 0, 0, v29, (unsigned char *)a3 + 2482, 0x100uLL);
          if ((v38 & 0x80000000) == 0) {
            uint64_t v38 = open_DctRom((uint64_t *)a3 + 62, (uint64_t)a3 + 2482, a3 + 122);
          }
          uint64_t v6 = v38;
        }
        else
        {
          uint64_t v6 = 2306875402;
          log_OutPublic(v16[4], (uint64_t)"FE_DCTLKP", 41000, 0, v33, v34, v35, v36, v39);
        }
      }
      else
      {
LABEL_23:
        log_OutText(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_DCTLKP", 1, 0, (uint64_t)"Monolingual configuration, no extclccfg", v17, v18, v19, v39);
        uint64_t v29 = 0;
        uint64_t v6 = 0;
      }
      heap_Free(*(void **)(*(void *)a3 + 8), (uint64_t)v15);
      if (v29) {
        heap_Free(*(void **)(*(void *)a3 + 8), (uint64_t)v29);
      }
    }
    else
    {
      uint64_t v6 = 2306875402;
      log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v11, v12, v13, v14, v39);
    }
  }
  return v6;
}

uint64_t fe_dctlkp_LookupUtf(uint64_t a1, int a2, char *a3, const char *a4, void *a5, _WORD *a6, unsigned char *a7)
{
  return loc_fe_dctlkp_LookupUtf(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t loc_fe_dctlkp_getDomainTokenDefs(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)(a3 + 1696) = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t v6 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", "domdef", &__c[3], &__c[1], __c, 0);
  if ((v6 & 0x80000000) != 0 || *(unsigned __int16 *)&__c[1] != 1) {
    return v6;
  }
  cstdlib_strcpy(__dst, **(const char ***)&__c[3]);
  uint64_t v7 = cstdlib_strchr(__dst, __c[0]);
  if (v7) {
    *uint64_t v7 = 0;
  }
  if (cstdlib_strlen(**(const char ***)&__c[3]) <= 0xFF)
  {
    if (!__dst[0]) {
      return v6;
    }
    unsigned __int16 v12 = 0;
    while (1)
    {
      for (unsigned __int16 i = v12; ; unsigned __int16 i = v14 + 1)
      {
        uint64_t v14 = i;
        int v15 = __dst[i];
        if (!v15 || v15 == 44) {
          break;
        }
      }
      if (v14 != v12)
      {
        size_t v16 = v14 - v12;
        cstdlib_strncpy(__s, &__dst[v12], v16);
        __s[v16] = 0;
        if (*(_WORD *)(a3 + 1696))
        {
          uint64_t v17 = heap_Realloc(*(uint64_t **)(*(void *)a3 + 8), *(void *)(a3 + 1704), 32 * *(unsigned __int16 *)(a3 + 1696) + 32);
          if (!v17) {
            return 2306875402;
          }
          *(void *)(a3 + 1704) = v17;
        }
        else
        {
          uint64_t v17 = heap_Calloc(*(void **)(*(void *)a3 + 8), 32, 1);
          *(void *)(a3 + 1704) = v17;
          if (!v17) {
            return 2306875402;
          }
        }
        uint64_t v18 = (_OWORD *)(v17 + 32 * *(unsigned __int16 *)(a3 + 1696));
        *uint64_t v18 = 0u;
        v18[1] = 0u;
        uint64_t v19 = *(void **)(*(void *)a3 + 8);
        int v20 = cstdlib_strlen(__s);
        uint64_t v21 = (char *)heap_Calloc(v19, (v20 + 1), 1);
        uint64_t v22 = *(unsigned __int16 *)(a3 + 1696);
        *(void *)(*(void *)(a3 + 1704) + 32 * v22) = v21;
        if (!v21)
        {
          *(_WORD *)(a3 + 1696) = v22 + 1;
          return 2306875402;
        }
        cstdlib_strcpy(v21, __s);
        uint64_t TokenDef = loc_fe_dctlkp_getTokenDef(a1, a2, (uint64_t *)a3, __s, "_alpha", (char **)(*(void *)(a3 + 1704) + 32 * *(unsigned __int16 *)(a3 + 1696) + 8));
        if ((TokenDef & 0x80000000) != 0
          || (uint64_t TokenDef = loc_fe_dctlkp_getTokenDef(a1, a2, (uint64_t *)a3, __s, "_digit", (char **)(*(void *)(a3 + 1704) + 32 * *(unsigned __int16 *)(a3 + 1696) + 16)), (TokenDef & 0x80000000) != 0))
        {
          uint64_t v6 = TokenDef;
LABEL_30:
          ++*(_WORD *)(a3 + 1696);
          return v6;
        }
        uint64_t v6 = loc_fe_dctlkp_getTokenDef(a1, a2, (uint64_t *)a3, __s, "_punc", (char **)(*(void *)(a3 + 1704) + 32 * *(unsigned __int16 *)(a3 + 1696) + 24));
        if ((v6 & 0x80000000) != 0) {
          goto LABEL_30;
        }
        uint64_t v28 = *(void *)(a3 + 1704);
        uint64_t v29 = *(unsigned __int16 *)(a3 + 1696);
        uint64_t v30 = v28 + 32 * v29;
        if (!*(void *)(v30 + 8) && !*(void *)(v30 + 16) && !*(void *)(v28 + 32 * v29 + 24))
        {
          log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_DCTLKP", 41004, (uint64_t)"%s%s", v24, v25, v26, v27, __s);
          ++*(_WORD *)(a3 + 1696);
          return 2306875392;
        }
        *(_WORD *)(a3 + 1696) = v29 + 1;
        unsigned __int16 v12 = v14 + 1;
      }
      if (!__dst[v12]) {
        return v6;
      }
    }
  }
  log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_DCTLKP", 41003, 0, v8, v9, v10, v11, v32);
  return 2306875392;
}

uint64_t LoadCanonMap(uint64_t a1, int a2, const char *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2306875402;
  if (!a1) {
    return 2306875400;
  }
  memset(__c, 0, sizeof(__c));
  bzero((void *)(a1 + 672), 0x400uLL);
  bzero((void *)(a1 + 3008), 0x400uLL);
  cstdlib_strcpy(__dst, "canonmap_");
  cstdlib_strcat(__dst, a3);
  uint64_t v7 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &__c[3], &__c[1], __c, 0);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  unsigned int v8 = *(unsigned __int16 *)&__c[1];
  if (*(_WORD *)&__c[1]) {
    goto LABEL_53;
  }
  *(_WORD *)&__c[1] = 0;
  cstdlib_strcpy(__dst, "canonmap");
  uint64_t v7 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &__c[3], &__c[1], __c, 0);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  unsigned int v8 = *(unsigned __int16 *)&__c[1];
  if (*(_WORD *)&__c[1])
  {
LABEL_53:
    if (*(void *)(a1 + 664)) {
      goto LABEL_5;
    }
    uint64_t v32 = heap_Alloc(*(void *)(*(void *)a1 + 8), 2048);
    *(void *)(a1 + 664) = v32;
    if (!v32) {
      goto LABEL_49;
    }
    for (uint64_t i = 0; i != 2048; i += 8)
      *(void *)(*(void *)(a1 + 664) + i) = 0;
    unsigned int v8 = *(unsigned __int16 *)&__c[1];
    if (*(_WORD *)&__c[1])
    {
LABEL_5:
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(unsigned __int8 **)(*(void *)&__c[3] + 8 * v9);
        unsigned int v13 = *v10;
        uint64_t v11 = (const char *)(v10 + 2);
        uint64_t v12 = v13;
        *(_DWORD *)(a1 + 4 * v13 + 672) = 1;
        if (!*(void *)(*(void *)(a1 + 664) + 8 * v13))
        {
          uint64_t v14 = *(void *)(*(void *)a1 + 8);
          int v15 = cstdlib_strlen(v11);
          *(void *)(*(void *)(a1 + 664) + 8 * v12) = heap_Alloc(v14, (v15 + 1));
          int v20 = *(char **)(*(void *)(a1 + 664) + 8 * v12);
          if (!v20) {
            goto LABEL_49;
          }
          cstdlib_strcpy(v20, v11);
          unsigned int v8 = *(unsigned __int16 *)&__c[1];
        }
        ++v9;
      }
      while (v9 < v8);
    }
  }
  *(_WORD *)&__c[1] = 0;
  cstdlib_strcpy(__dst, "canonmapg2pdct_");
  cstdlib_strcat(__dst, a3);
  uint64_t v7 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &__c[3], &__c[1], __c, 0);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  unsigned int v21 = *(unsigned __int16 *)&__c[1];
  if (*(_WORD *)&__c[1]) {
    goto LABEL_12;
  }
  *(_WORD *)&__c[1] = 0;
  cstdlib_strcpy(__dst, "canonmapg2pdct");
  uint64_t v7 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &__c[3], &__c[1], __c, 0);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  unsigned int v21 = *(unsigned __int16 *)&__c[1];
  if (!*(_WORD *)&__c[1]) {
    goto LABEL_18;
  }
LABEL_12:
  if (!*(void *)(a1 + 3000))
  {
    uint64_t v34 = heap_Alloc(*(void *)(*(void *)a1 + 8), 2048);
    *(void *)(a1 + 3000) = v34;
    if (v34)
    {
      for (uint64_t j = 0; j != 2048; j += 8)
        *(void *)(*(void *)(a1 + 3000) + j) = 0;
      unsigned int v21 = *(unsigned __int16 *)&__c[1];
      if (!*(_WORD *)&__c[1]) {
        goto LABEL_18;
      }
      goto LABEL_13;
    }
LABEL_49:
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v16, v17, v18, v19, v37);
    return v3;
  }
LABEL_13:
  unint64_t v22 = 0;
  do
  {
    uint64_t v23 = *(unsigned __int8 **)(*(void *)&__c[3] + 8 * v22);
    unsigned int v26 = *v23;
    uint64_t v24 = (const char *)(v23 + 2);
    uint64_t v25 = v26;
    *(_DWORD *)(a1 + 4 * v26 + 3008) = 1;
    if (!*(void *)(*(void *)(a1 + 3000) + 8 * v26))
    {
      uint64_t v27 = *(void *)(*(void *)a1 + 8);
      int v28 = cstdlib_strlen(v24);
      *(void *)(*(void *)(a1 + 3000) + 8 * v25) = heap_Alloc(v27, (v28 + 1));
      uint64_t v29 = *(char **)(*(void *)(a1 + 3000) + 8 * v25);
      if (!v29) {
        goto LABEL_49;
      }
      cstdlib_strcpy(v29, v24);
      unsigned int v21 = *(unsigned __int16 *)&__c[1];
    }
    ++v22;
  }
  while (v22 < v21);
LABEL_18:
  *(_WORD *)&__c[1] = -1;
  cstdlib_strcpy(__dst, "canonmapusage_");
  cstdlib_strcat(__dst, a3);
  uint64_t v3 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &__c[3], &__c[1], __c, 0);
  if ((v3 & 0x80000000) == 0)
  {
    int v30 = *(unsigned __int16 *)&__c[1];
    if (!*(_WORD *)&__c[1])
    {
      *(_WORD *)&__c[1] = -1;
      cstdlib_strcpy(__dst, "canonmapusage");
      uint64_t v3 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &__c[3], &__c[1], __c, 0);
      if ((v3 & 0x80000000) != 0) {
        return v3;
      }
      int v30 = *(unsigned __int16 *)&__c[1];
    }
    if (v30 == 1)
    {
      size_t v31 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v31) {
        *size_t v31 = 0;
      }
      if (!cstdlib_strcmp(**(const char ***)&__c[3], "all")) {
        *(_WORD *)(a1 + 1712) = 0;
      }
      if (!cstdlib_strcmp(**(const char ***)&__c[3], "nocaseconv")) {
        *(_WORD *)(a1 + 1712) = 2;
      }
      if (!cstdlib_strcmp(**(const char ***)&__c[3], "g2pdct")) {
        *(_WORD *)(a1 + 1712) = 1;
      }
    }
  }
  return v3;
}

uint64_t fe_dctlkp_ObjClose(unsigned __int16 *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62335, 4032);
  if ((result & 0x80000000) != 0) {
    return 2306875400;
  }
  if (a1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_ObjClose", v4, v5, v6, v20);
    if (a1[284])
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*((void *)a1 + 72) + 8 * v7);
        uint64_t v9 = *(void *)(v8 + 624);
        if (v9)
        {
          uint64_t v10 = *(void *)(v8 + 56);
          if (v10)
          {
            brk_DataUnmap(*(void *)(*(void *)a1 + 24), v9, v10);
            uint64_t v9 = *(void *)(*(void *)(*((void *)a1 + 72) + 8 * v7) + 624);
          }
          brk_DataClose(*(void *)(*(void *)a1 + 24), v9);
          uint64_t v8 = *(void *)(*((void *)a1 + 72) + 8 * v7);
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v8);
        ++v7;
      }
      while (v7 < a1[284]);
    }
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"LINGDB");
    hlp_LookupFree(a1);
    close_DctRom((uint64_t)(a1 + 8));
    close_DctRom((uint64_t)(a1 + 48));
    close_DctRom((uint64_t)(a1 + 88));
    close_DctRom((uint64_t)(a1 + 128));
    close_DctRom((uint64_t)(a1 + 168));
    close_DctRom((uint64_t)(a1 + 208));
    close_DctRom((uint64_t)(a1 + 248));
    uint64_t v11 = *((void *)a1 + 73);
    if (v11) {
      heap_Free(*(void **)(*(void *)a1 + 8), v11);
    }
    uint64_t v12 = *((void *)a1 + 72);
    if (v12) {
      heap_Free(*(void **)(*(void *)a1 + 8), v12);
    }
    hlp_domainToksFree(a1);
    if (*((void *)a1 + 83))
    {
      for (uint64_t i = 0; i != 2048; i += 8)
      {
        uint64_t v17 = *(void *)(*((void *)a1 + 83) + i);
        if (v17) {
          heap_Free(*(void **)(*(void *)a1 + 8), v17);
        }
      }
      heap_Free(*(void **)(*(void *)a1 + 8), *((void *)a1 + 83));
    }
    if (*((void *)a1 + 375))
    {
      for (uint64_t j = 0; j != 2048; j += 8)
      {
        uint64_t v19 = *(void *)(*((void *)a1 + 375) + j);
        if (v19) {
          heap_Free(*(void **)(*(void *)a1 + 8), v19);
        }
      }
      heap_Free(*(void **)(*(void *)a1 + 8), *((void *)a1 + 375));
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_ObjClose", v13, v14, v15, v21);
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_dctlkp_ObjReopen(uint64_t a1, int a2)
{
  uint64_t CanonMap = 2306875400;
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0 || !a1) {
    return CanonMap;
  }
  __c_3 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_ObjReopen", v5, v6, v7, v27);
  hlp_LookupFree((void *)a1);
  close_DctRom(a1 + 16);
  close_DctRom(a1 + 256);
  close_DctRom(a1 + 336);
  close_DctRom(a1 + 496);
  uint64_t v8 = *(void *)(a1 + 584);
  if (v8) {
    heap_Free(*(void **)(*(void *)a1 + 8), v8);
  }
  hlp_domainToksFree((void *)a1);
  if (*(void *)(a1 + 664))
  {
    for (uint64_t i = 0; i != 2048; i += 8)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 664) + i);
      if (v10)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v10);
        *(void *)(*(void *)(a1 + 664) + i) = 0;
      }
    }
    heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(a1 + 664));
    *(void *)(a1 + 664) = 0;
  }
  if (*(void *)(a1 + 3000))
  {
    for (uint64_t j = 0; j != 2048; j += 8)
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 3000) + j);
      if (v12)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v12);
        *(void *)(*(void *)(a1 + 3000) + j) = 0;
      }
    }
    heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(a1 + 3000));
    *(void *)(a1 + 3000) = 0;
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 2996) = 1;
  *(_WORD *)(a1 + 1712) = 1;
  if ((hlp_CreateBrokerString(*(void *)a1, (unsigned char *)(a1 + 1714), 0) & 0x80000000) != 0
    || (open_DctRom((uint64_t *)(a1 + 16), a1 + 1714, (_DWORD *)(a1 + 8)) & 0x80000000) != 0)
  {
    Brokeruint64_t String = hlp_CreateBrokerString(*(void *)a1, (unsigned char *)(a1 + 1714), 1);
    if ((BrokerString & 0x80000000) != 0) {
      return BrokerString;
    }
    Brokeruint64_t String = open_DctRom((uint64_t *)(a1 + 16), a1 + 1714, (_DWORD *)(a1 + 8));
    if ((BrokerString & 0x80000000) != 0) {
      return BrokerString;
    }
  }
  if ((hlp_CreateVoiceBrokerString(*(void *)a1, (unsigned char *)(a1 + 1970), 1) & 0x80000000) != 0
    || (open_DctRom((uint64_t *)(a1 + 336), a1 + 1970, (_DWORD *)(a1 + 328)) & 0x80000000) != 0)
  {
    Brokeruint64_t String = hlp_CreateVoiceBrokerString(*(void *)a1, (unsigned char *)(a1 + 1970), 0);
    if ((BrokerString & 0x80000000) == 0)
    {
      if ((open_DctRom((uint64_t *)(a1 + 336), a1 + 1970, (_DWORD *)(a1 + 328)) & 0x80000000) != 0) {
        *(_DWORD *)(a1 + 328) = 0;
      }
      goto LABEL_26;
    }
    return BrokerString;
  }
LABEL_26:
  hlp_OpenMl2Dct(*(void *)a1, a1);
  Brokeruint64_t String = hlp_OpenExtDct(a1, a2, (_DWORD *)a1);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  BYTE5(v27) = 0;
  HIWORD(v27) = -1;
  Brokeruint64_t String = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", "punc", &__c_3, (_WORD *)&v27 + 3, (unsigned char *)&v27 + 5, 0);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t v14 = cstdlib_strchr(*__c_3, BYTE5(v27));
  if (v14) {
    *uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(*(void *)a1 + 8);
  int v16 = cstdlib_strlen(*__c_3);
  uint64_t v17 = (char *)heap_Alloc(v15, (v16 + 1));
  *(void *)(a1 + 584) = v17;
  if (!v17)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v18, v19, v20, v21, v27);
    return 2306875402;
  }
  cstdlib_strcpy(v17, *__c_3);
  HIWORD(v27) = -1;
  Brokeruint64_t String = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", "canonmapdomain", &__c_3, (_WORD *)&v27 + 3, (unsigned char *)&v27 + 5, 0);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  if (HIWORD(v27)) {
    *(_DWORD *)(a1 + 2996) = 0;
  }
  Brokeruint64_t String = loc_fe_dctlkp_getDomainTokenDefs(a1, a2, a1);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  cstdlib_strcpy((char *)(a1 + 2738), "normal");
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 3000) = 0;
  uint64_t CanonMap = LoadCanonMap(a1, a2, "normal");
  if ((CanonMap & 0x80000000) == 0)
  {
    if (*(_WORD *)(a1 + 568))
    {
      uint64_t v25 = 0;
      while (1)
      {
        uint64_t CanonMap = hlp_EnableAddon(a1, a2, *(void *)(*(void *)(a1 + 576) + 8 * v25));
        if ((CanonMap & 0x80000000) != 0) {
          break;
        }
        if (++v25 >= (unint64_t)*(unsigned __int16 *)(a1 + 568)) {
          goto LABEL_40;
        }
      }
    }
    else
    {
LABEL_40:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_ObjReopen", v22, v23, v24, v27);
    }
  }
  return CanonMap;
}

void *hlp_LookupFree(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[77];
  if (v2)
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), v2);
    v1[77] = 0;
  }
  uint64_t v3 = v1[7];
  if (v3)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v3);
    v1[7] = 0;
  }
  uint64_t v4 = (uint64_t *)v1[76];
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      uint64_t v6 = 0;
      unsigned __int16 v7 = 0;
      do
      {
        heap_Free(*(void **)(*v1 + 8), v5);
        *(void *)(v1[76] + 8 * v6) = 0;
        ++v7;
        uint64_t v4 = (uint64_t *)v1[76];
        uint64_t v6 = v7;
        uint64_t v5 = v4[v7];
      }
      while (v5);
    }
    else
    {
      unsigned __int16 v7 = 0;
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), (uint64_t)v4);
    v1[76] = 0;
  }
  else
  {
    unsigned __int16 v7 = 0;
  }
  uint64_t v8 = (uint64_t *)v1[74];
  if (v8)
  {
    uint64_t v9 = *v8;
    if (*v8)
    {
      uint64_t v10 = 0;
      unsigned __int16 v7 = 0;
      do
      {
        heap_Free(*(void **)(*v1 + 8), v9);
        *(void *)(v1[74] + 8 * v10) = 0;
        ++v7;
        uint64_t v8 = (uint64_t *)v1[74];
        uint64_t v10 = v7;
        uint64_t v9 = v8[v7];
      }
      while (v9);
    }
    else
    {
      unsigned __int16 v7 = 0;
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), (uint64_t)v8);
    v1[74] = 0;
  }
  uint64_t v11 = (uint64_t *)v1[75];
  if (v11)
  {
    uint64_t v12 = *v11;
    if (*v11)
    {
      uint64_t v13 = 0;
      unsigned __int16 v14 = 0;
      do
      {
        v1[4] = v12;
        exit_DctRom((uint64_t)(v1 + 2), *(void *)(v1[78] + 8 * v13));
        heap_Free(*(void **)(*v1 + 8), *(void *)(v1[75] + 8 * v13));
        *(void *)(v1[75] + 8 * v13) = 0;
        ++v14;
        uint64_t v11 = (uint64_t *)v1[75];
        uint64_t v13 = v14;
        uint64_t v12 = v11[v14];
      }
      while (v12);
    }
    else
    {
      unsigned __int16 v14 = 0;
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), (uint64_t)v11);
    v1[75] = 0;
    unsigned __int16 v7 = v14;
  }
  uint64_t v15 = v1[78];
  if (v15)
  {
    if (v7)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 8 * v7;
      do
      {
        uint64_t v18 = *(void *)(v1[78] + v16);
        if (v18)
        {
          brk_DataClose(*(void *)(*v1 + 24), v18);
          *(void *)(v1[78] + v16) = 0;
        }
        v16 += 8;
      }
      while (v17 != v16);
      uint64_t v15 = v1[78];
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v15);
    v1[78] = 0;
  }
  uint64_t v19 = v1[79];
  if (v19)
  {
    uint64_t v20 = v1[80];
    if (v20)
    {
      brk_DataUnmap(*(void *)(*v1 + 24), v19, v20);
      v1[80] = 0;
      uint64_t v19 = v1[79];
    }
    uint64_t result = (void *)brk_DataClose(*(void *)(*v1 + 24), v19);
    v1[79] = 0;
  }
  v1[82] = 0;
  return result;
}

void *hlp_domainToksFree(void *result)
{
  if (*((_WORD *)result + 848))
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    uint64_t v4 = result[213];
    do
    {
      if (*(void *)(v4 + v2))
      {
        heap_Free(*(void **)(*v1 + 8), *(void *)(v4 + v2));
        uint64_t v4 = v1[213];
        *(void *)(v4 + v2) = 0;
      }
      if (*(void *)(v4 + v2 + 8))
      {
        heap_Free(*(void **)(*v1 + 8), *(void *)(v4 + v2 + 8));
        uint64_t v4 = v1[213];
        *(void *)(v4 + v2 + 8) = 0;
      }
      if (*(void *)(v4 + v2 + 16))
      {
        heap_Free(*(void **)(*v1 + 8), *(void *)(v4 + v2 + 16));
        uint64_t v4 = v1[213];
        *(void *)(v4 + v2 + 16) = 0;
      }
      if (*(void *)(v4 + v2 + 24))
      {
        heap_Free(*(void **)(*v1 + 8), *(void *)(v4 + v2 + 24));
        uint64_t v4 = v1[213];
        *(void *)(v4 + v2 + 24) = 0;
      }
      ++v3;
      v2 += 32;
    }
    while (v3 < *((unsigned __int16 *)v1 + 848));
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v4);
    v1[213] = 0;
    *((_WORD *)v1 + 848) = 0;
  }
  return result;
}

uint64_t hlp_EnableAddon(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v13 = "";
  unsigned __int16 v14 = 0;
  *(_WORD *)&__c[1] = -1;
  if (!a1) {
    return 2306875400;
  }
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_DWORD *)(a3 + 620) = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", &v14);
  if ((Str & 0x80000000) == 0)
  {
    lowercase(v14, (uint64_t)__s1);
    lowercase((const char *)(a3 + 80), (uint64_t)__s2);
    if (!cstdlib_strcmp(__s1, __s2))
    {
      uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"fecfg", &v13);
      if ((Str & 0x80000000) == 0 && !cstdlib_strcmp(v13, (const char *)(a3 + 84)))
      {
        uint64_t Str = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", "addoncomp", &__c[3], &__c[1], __c, 0);
        if (*(_WORD *)&__c[1])
        {
          unsigned __int16 v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
          if (v7) {
            *unsigned __int16 v7 = 0;
          }
          int v8 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
        }
        else
        {
          int v8 = 1;
        }
        if (v8 == *(unsigned __int8 *)(a3 + 105) && *(unsigned char *)(a3 + 104) == 1) {
          *(_DWORD *)(a3 + 620) = 1;
        }
      }
    }
  }
  return Str;
}

uint64_t fe_dctlkp_CheckVersion(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  *(void *)&__c[1] = 0;
  __c[0] = 0;
  *a4 = 0;
  *a3 = 0;
  __int16 v24 = -1;
  uint64_t v8 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", "versioninfo", &__c[1], &v24, __c, 0);
  if ((v8 & 0x80001FFF) != 0x8000000A && v24)
  {
    uint64_t v21 = 0;
    uint64_t v9 = cstdlib_strchr(**(char ***)&__c[1], __c[0]);
    if (v9) {
      *uint64_t v9 = 0;
    }
    uint64_t v22 = **(unsigned __int8 ***)&__c[1];
    uint64_t v10 = v22;
    *a4 = 1;
    int v15 = cstdlib_strtol(v10, &v21, 0xAu);
    BOOL v16 = v15 < 1 || v21 == 0;
    if (v16
      || *v21 != 46
      || (unsigned int v17 = cstdlib_strtol(v21 + 1, &v22, 0xAu), (v17 & 0x80000000) != 0)
      || !v22
      || *v22 != 46
      || (int v18 = cstdlib_strtol(v22 + 1, &v21, 0xAu), v18 < 0)
      || !v21
      || *v21 != 46 && *v21)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41006, 0, v11, v12, v13, v14, v20);
      return 2306875392;
    }
    if (v15 > 7) {
      goto LABEL_19;
    }
    if (v15 == 7)
    {
      if (v17 > 4 || v17 == 4 && v18)
      {
LABEL_19:
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 5, 0, (uint64_t)"productVersion %d.%d.%d dctVersion %s", v12, v13, v14, 7);
        return v8;
      }
    }
    else if (v15 == 1 && !(v18 | v17))
    {
      *a3 = 0;
      return v8;
    }
    *a3 = 1;
  }
  return v8;
}

uint64_t fe_dctlkp_GetDataBlock(uint64_t a1, int a2, char *a3, void *a4)
{
  uint64_t v25 = 0;
  uint64_t v7 = 2306875399;
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  uint64_t v12 = *(void *)a1;
  if (a3)
  {
    uint64_t v13 = brk_DataOpen(*(void *)(v12 + 24));
    if ((v13 & 0x80000000) != 0)
    {
      return v13;
    }
    else
    {
      uint64_t v14 = brk_DataMap(*(void *)(*(void *)a1 + 24), *(void *)(a1 + 632), 40, *(unsigned int *)(a1 + 8), (uint64_t)&v25);
      if (v14)
      {
        uint64_t v15 = v14;
        brk_DataClose(*(void *)(*(void *)a1 + 24), *(void *)(a1 + 632));
        *(void *)(a1 + 632) = 0;
        return v15;
      }
      else
      {
        if (LH_stricmp(v25, a3))
        {
          uint64_t v16 = 0;
          unsigned int v17 = 0;
          while (v17 < *(_DWORD *)(a1 + 8))
          {
            int v18 = cstdlib_strlen(&v25[v16]);
            uint64_t v16 = v18 + v17 + ((~(_BYTE)v18 - (_BYTE)v17) & 3) + 5;
            unsigned int v17 = v16;
            unsigned int v19 = v16;
            if (!LH_stricmp(&v25[v16], a3)) {
              goto LABEL_16;
            }
          }
          unsigned int v19 = v17;
        }
        else
        {
          unsigned int v19 = 0;
          uint64_t v16 = 0;
        }
LABEL_16:
        if (v19 >= *(_DWORD *)(a1 + 8))
        {
          brk_DataUnmap(*(void *)(*(void *)a1 + 24), *(void *)(a1 + 632), (uint64_t)v25);
          return 2306875412;
        }
        else
        {
          int v20 = cstdlib_strlen(&v25[v16]);
          uint64_t v21 = *(unsigned int *)&v25[v19 + 1 + v20 + ((~(_BYTE)v20 - (_BYTE)v19) & 3)];
          brk_DataUnmap(*(void *)(*(void *)a1 + 24), *(void *)(a1 + 632), (uint64_t)v25);
          uint64_t v7 = brk_DataMap(*(void *)(*(void *)a1 + 24), *(void *)(a1 + 632), v21, 4, (uint64_t)&v25);
          if (!v7)
          {
            uint64_t v22 = *(unsigned int *)v25;
            brk_DataUnmap(*(void *)(*(void *)a1 + 24), *(void *)(a1 + 632), (uint64_t)v25);
            uint64_t v7 = brk_DataMap(*(void *)(*(void *)a1 + 24), *(void *)(a1 + 632), (v21 + 4), v22, (uint64_t)a4);
            if ((v7 & 0x80000000) == 0) {
              *(void *)(a1 + 640) = *a4;
            }
          }
        }
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(v12 + 32), (uint64_t)"FE_DCTLKP", 41001, 0, v8, v9, v10, v11, v24);
  }
  return v7;
}

uint64_t fe_dctlkp_QueryDictExists(_DWORD *a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t optional_brk_resource = 2306875399;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  uint64_t v12 = *(void *)(*(void *)a1 + 32);
  if (!a3)
  {
    log_OutPublic(v12, (uint64_t)"FE_DCTLKP", 41001, 0, v8, v9, v10, v11, v16);
    return optional_brk_resource;
  }
  log_OutText(v12, (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_QueryDictExists : %s?", v9, v10, v11, a3);
  *a4 = 0;
  if ((hlp_SearchDctName((uint64_t)a1, (const char *)a3, "") & 0x80000000) == 0)
  {
    uint64_t optional_brk_resource = 0;
    *a4 = 1;
    return optional_brk_resource;
  }
  uint64_t v14 = *(void *)(*(void *)a1 + 24);
  uint64_t optional_brk_resource = loc_fe_dctlkp_query_optional_brk_resource(v14, (uint64_t)"sysdct", a1 + 22, (char *)a3, a4);
  if ((optional_brk_resource & 0x80000000) == 0 && !*a4)
  {
    *a4 = 0;
    if (!a1[2]) {
      goto LABEL_14;
    }
    uint64_t v15 = brk_DataOpen(v14);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    uint64_t optional_brk_resource = query_DctRom((uint64_t)(a1 + 4), (char *)a3, a1[2], 0, a4);
    if ((optional_brk_resource & 0x80000000) == 0)
    {
      brk_DataClose(v14, 0);
      if (!*a4)
      {
LABEL_14:
        uint64_t optional_brk_resource = loc_fe_dctlkp_query_optional_brk_resource(v14, (uint64_t)"lid", a1 + 42, (char *)a3, a4);
        if ((optional_brk_resource & 0x80000000) == 0 && !*a4)
        {
          uint64_t optional_brk_resource = loc_fe_dctlkp_query_optional_brk_resource(v14, (uint64_t)a1 + 2226, a1 + 62, (char *)a3, a4);
          if ((optional_brk_resource & 0x80000000) == 0 && !*a4)
          {
            uint64_t optional_brk_resource = loc_fe_dctlkp_query_optional_brk_resource(v14, (uint64_t)a1 + 1970, a1 + 82, (char *)a3, a4);
            if ((optional_brk_resource & 0x80000000) == 0 && !*a4)
            {
              uint64_t optional_brk_resource = loc_fe_dctlkp_query_optional_brk_resource(v14, (uint64_t)"clmnn:clmnndic", a1 + 102, (char *)a3, a4);
              if ((optional_brk_resource & 0x80000000) == 0 && !*a4 && !cstdlib_strncmp((const char *)a3, "ext_", 4uLL)) {
                return loc_fe_dctlkp_query_optional_brk_resource(v14, (uint64_t)a1 + 2482, a1 + 122, (char *)(a3 + 4), a4);
              }
            }
          }
        }
      }
    }
  }
  return optional_brk_resource;
}

uint64_t loc_fe_dctlkp_query_optional_brk_resource(uint64_t a1, uint64_t a2, _DWORD *a3, char *a4, _DWORD *a5)
{
  uint64_t v11 = 0;
  *a5 = 0;
  if (!*a3 || (brk_DataOpenEx(a1, a2, 1, (uint64_t)&v11) & 0x80000000) != 0) {
    return 0;
  }
  DctRouint64_t m = query_DctRom((uint64_t)(a3 + 2), a4, *a3, v11, a5);
  if ((DctRom & 0x80000000) == 0) {
    brk_DataClose(a1, v11);
  }
  return DctRom;
}

uint64_t fe_dctlkp_QueryLidDictExists(unsigned int *a1, int a2, char *a3, int a4, _DWORD *a5)
{
  DctRouint64_t m = 2306875399;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  uint64_t v21 = 0;
  *a5 = 0;
  uint64_t v14 = *(void *)(*(void *)a1 + 32);
  if (a3)
  {
    log_OutText(v14, (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_QueryLidDictExists : %s?", v11, v12, v13, (uint64_t)a3);
    uint64_t v15 = *(void *)(*(void *)a1 + 24);
    if (a4)
    {
      if ((brk_DataOpenEx(v15, (uint64_t)"lid", 1, (uint64_t)&v21) & 0x80000000) != 0) {
        return 0;
      }
      uint64_t v16 = (uint64_t)(a1 + 44);
      uint64_t v17 = a1[42];
    }
    else
    {
      uint64_t v18 = brk_DataOpen(v15);
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v16 = (uint64_t)(a1 + 4);
      uint64_t v17 = a1[2];
    }
    DctRouint64_t m = query_DctRom(v16, a3, v17, v21, a5);
    if ((DctRom & 0x80000000) == 0) {
      brk_DataClose(*(void *)(*(void *)a1 + 24), v21);
    }
  }
  else
  {
    log_OutPublic(v14, (uint64_t)"FE_DCTLKP", 41001, 0, v10, v11, v12, v13, v20);
  }
  return DctRom;
}

uint64_t fe_dctlkp_LangAndDomCheck(uint64_t result, _WORD *a2, __int16 *a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6 = (unsigned __int16)*a2;
  if (v6 < a6)
  {
    uint64_t v8 = result;
    int v9 = *(_DWORD *)(a5 + 12);
    unsigned __int16 v10 = a6;
    uint64_t v11 = (int *)(a5 + 32 * v6);
    do
    {
      if (v11[3] - v9 > a4) {
        break;
      }
      int v12 = *v11;
      v11 += 8;
      if (v12 == 36) {
        unsigned __int16 v10 = v6;
      }
      *a2 = ++v6;
    }
    while (a6 != v6);
    if (a6 > v10)
    {
      unsigned int v13 = *(unsigned __int16 *)(result + 1696);
      if (*(_WORD *)(result + 1696))
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = (uint64_t *)(a5 + 32 * v10 + 24);
        do
        {
          uint64_t result = *v16;
          if (*v16)
          {
            uint64_t result = cstdlib_strcmp((const char *)result, *(const char **)(*(void *)(v8 + 1704) + v14));
            if (result) {
              __int16 v17 = 999;
            }
            else {
              __int16 v17 = v15;
            }
            unsigned int v13 = *(unsigned __int16 *)(v8 + 1696);
          }
          else
          {
            __int16 v17 = 999;
          }
          if (++v15 >= (unint64_t)v13) {
            break;
          }
          v14 += 32;
        }
        while (v17 == 999);
      }
      else
      {
        __int16 v17 = 999;
      }
      *a3 = v17;
    }
  }
  return result;
}

uint64_t fe_dctlkp_Tokenize(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v77 = 0;
  unsigned __int16 v76 = 0;
  unsigned __int16 v74 = 0;
  int v72 = 0;
  int v73 = 0;
  char __s = 0;
  unsigned __int16 v70 = 999;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_Tokenize", v11, v12, v13, v65);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[81] + 104))(a3, a4, 1, 0, (char *)&v77 + 2);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_62:
    uint64_t v18 = v14;
    goto LABEL_65;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(a1[81] + 176))(a3, a4, HIWORD(v77), 0, &__s, (char *)&v72 + 2);
  if ((v18 & 0x80000000) == 0)
  {
    LOWORD(v77) = 0;
    __int16 v75 = 0;
    if ((unsigned __int16)cstdlib_strlen(__s))
    {
      uint64_t v67 = a6;
      uint64_t v68 = a4;
      unsigned int v69 = a6;
      do
      {
        unsigned __int16 v76 = v77;
        unsigned int v19 = cstdlib_strlen(__s);
        if (a6)
        {
          uint64_t v20 = v67;
          uint64_t v21 = (unsigned int *)a5;
          uint64_t v22 = (unsigned int *)a5;
          while (1)
          {
            unsigned int v23 = *v22;
            v22 += 8;
            uint64_t v24 = (1 << v23) & 0x3C8010124021140;
            if (v23 <= 0x39 && v24 != 0)
            {
              unsigned int v26 = v21[3];
              int v27 = *(_DWORD *)(a5 + 12);
              if (v26 > v27 + (unsigned __int16)v77) {
                break;
              }
            }
            uint64_t v21 = v22;
            if (!--v20) {
              goto LABEL_16;
            }
          }
          unsigned int v19 = v26 - v27;
        }
LABEL_16:
        fe_dctlkp_LangAndDomCheck((uint64_t)a1, &v75, (__int16 *)&v70, v76, a5, a6);
        unsigned int v28 = v70;
        BOOL v29 = IsAlphaUtf((uint64_t)a1, &__s[(unsigned __int16)v77], v70);
        int v30 = &__s[(unsigned __int16)v77];
        if (v29)
        {
          __int16 v31 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v30);
          unsigned int v32 = 0;
          int v73 = 0;
          __int16 v33 = v77;
          do
          {
            LOWORD(v77) = v33 + v31;
            __int16 v31 = utf8_determineUTF8CharLength(__s[(unsigned __int16)(v33 + v31)]);
            if (!IsAlphaUtf((uint64_t)a1, &__s[(unsigned __int16)v77], v28) || v32 > 0x7E) {
              break;
            }
            ++v32;
            unsigned int v34 = (unsigned __int16)v77;
            unsigned __int16 v35 = cstdlib_strlen(__s);
            __int16 v33 = v77;
          }
          while (v34 < v35 && v19 > (unsigned __int16)v77);
        }
        else
        {
          BOOL v37 = IsDigitUtf((uint64_t)a1, v30, v28);
          uint64_t v38 = &__s[(unsigned __int16)v77];
          if (v37)
          {
            __int16 v39 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v38);
            unsigned int v40 = 0;
            int v73 = 1;
            __int16 v41 = v77;
            do
            {
              LOWORD(v77) = v41 + v39;
              __int16 v39 = utf8_determineUTF8CharLength(__s[(unsigned __int16)(v41 + v39)]);
              if (!IsDigitUtf((uint64_t)a1, &__s[(unsigned __int16)v77], v28) || v40 > 0x7E) {
                break;
              }
              ++v40;
              unsigned int v42 = (unsigned __int16)v77;
              unsigned __int16 v43 = cstdlib_strlen(__s);
              __int16 v41 = v77;
            }
            while (v42 < v43 && v19 > (unsigned __int16)v77);
          }
          else
          {
            if (IsPuncUtf((uint64_t)a1, v38, v28))
            {
              int v73 = 2;
              __int16 v45 = v77 + 1;
LABEL_36:
              LOWORD(v77) = v45;
              goto LABEL_49;
            }
            unsigned int v46 = __s[(unsigned __int16)v77];
            BOOL v47 = v46 > 0x20 || ((1 << v46) & 0x100002600) == 0;
            if (v47 && v46 != 95)
            {
              __int16 v60 = utf8_determineUTF8CharLength(v46);
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Warning - character \"%c\" marked as alpha by default. Assign to domain definitions.", v61, v62, v63, __s[(unsigned __int16)v77]);
              int v73 = 0;
              __int16 v45 = v77 + v60;
              goto LABEL_36;
            }
            int v73 = 3;
            do
            {
              LOWORD(v77) = v77 + 1;
              fe_dctlkp_LangAndDomCheck((uint64_t)a1, &v75, (__int16 *)&v70, v76, a5, v69);
              unsigned int v48 = (unsigned __int16)v77;
              unsigned int v49 = __s[(unsigned __int16)v77];
              BOOL v50 = v49 > 0x20 || ((1 << v49) & 0x100002600) == 0;
            }
            while ((!v50 || v49 == 95) && v48 < (unsigned __int16)cstdlib_strlen(__s));
          }
        }
LABEL_49:
        uint64_t v51 = a1[81];
        if (v76)
        {
          uint64_t v52 = v68;
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(v51 + 80))(a3, v68, v74, &v74);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v52 = v68;
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(v51 + 72))(a3, v68, 3, HIWORD(v77), &v74);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_62;
          }
        }
        uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(a1[81] + 160))(a3, v52, v74, 0, 1, &v73, &v72);
        if ((v53 & 0x80000000) != 0
          || (uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[81] + 160))(a3, v52, v74, 1, 1, &v76, &v72), (v53 & 0x80000000) != 0))
        {
          uint64_t v18 = v53;
LABEL_64:
          log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_DCTLKP", 41002, 0, v54, v55, v56, v57, v66);
          break;
        }
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[81] + 160))(a3, v52, v74, 2, 1, &v77, &v72);
        if ((v18 & 0x80000000) != 0) {
          goto LABEL_64;
        }
        unsigned int v58 = (unsigned __int16)v77;
        BOOL v59 = v58 >= (unsigned __int16)cstdlib_strlen(__s);
        a6 = v69;
      }
      while (!v59);
    }
  }
LABEL_65:
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_Tokenize", v15, v16, v17, v66);
  return v18;
}

BOOL IsAlphaUtf(uint64_t a1, const char *a2, unsigned int a3)
{
  if (a3 != 999)
  {
    uint64_t v6 = *(char **)(*(void *)(a1 + 1704) + 32 * a3 + 8);
    if (v6)
    {
      if (a2) {
        return utf8_strchr(v6, a2) != 0;
      }
      return 0;
    }
  }
  BOOL result = 0;
  unsigned int v8 = *(unsigned __int8 *)a2;
  BOOL v9 = v8 > 0x20 || ((1 << v8) & 0x100002600) == 0;
  if (v9 && v8 != 95)
  {
    if (!IsPuncUtf(a1, a2, a3)) {
      return !IsDigitUtf(a1, a2, a3);
    }
    return 0;
  }
  return result;
}

BOOL IsDigitUtf(uint64_t a1, const char *a2, unsigned int a3)
{
  if (a3 == 999) {
    return *(unsigned __int8 *)a2 - 48 < 0xA;
  }
  unint64_t v3 = *(char **)(*(void *)(a1 + 1704) + 32 * a3 + 16);
  if (!v3) {
    return *(unsigned __int8 *)a2 - 48 < 0xA;
  }
  if (a2) {
    return utf8_strchr(v3, a2) != 0;
  }
  return 0;
}

BOOL IsPuncUtf(uint64_t a1, const char *a2, unsigned int a3)
{
  if (a3 == 999 || !*(void *)(*(void *)(a1 + 1704) + 32 * a3 + 24))
  {
    return loc_fe_dctlkp_IsPunctUtf(a1, a2);
  }
  else
  {
    return a2 && utf8_strchr(*(char **)(*(void *)(a1 + 1704) + 32 * a3 + 24), a2) != 0;
  }
}

uint64_t fe_dctlkp_PartLookupUtf(uint64_t a1, int a2, char *__src, const char *a4, void *a5, __int16 *a6, unsigned char *a7, uint64_t a8)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!a8) {
    return a8;
  }
  int v15 = a8 - 1;
  if (a8 != 1)
  {
    unsigned int v17 = 0;
    __int16 v18 = *a6;
    do
    {
      cstdlib_strcpy(__dst, __src);
      LH_itoa(v17, __s2, 0xAu);
      cstdlib_strcat(__dst, __s2);
      *a6 = v18;
      a8 = loc_fe_dctlkp_LookupUtf(a1, a2, __dst, a4, a5, a6, a7, 0);
      if ((a8 & 0x80000000) != 0) {
        break;
      }
      if (*a6) {
        break;
      }
    }
    while (v15 != v17++);
    return a8;
  }

  return loc_fe_dctlkp_LookupUtf(a1, a2, __src, a4, a5, a6, a7, 0);
}

uint64_t fe_dctlkp_PartLookupAddonDct(uint64_t a1, int a2, char *__src, const char *a4, void *a5, unsigned __int16 *a6, unsigned char *a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!a8) {
    return a8;
  }
  int v15 = a8 - 1;
  if (a8 != 1)
  {
    unsigned int v17 = 0;
    unsigned __int16 v18 = *a6;
    do
    {
      cstdlib_strcpy(__dst, __src);
      LH_itoa(v17, __s2, 0xAu);
      cstdlib_strcat(__dst, __s2);
      *a6 = v18;
      a8 = fe_dctlkp_LookupAddonDct(a1, a2, __dst, a4, a5, a6, a7, a9);
      if ((a8 & 0x80000000) != 0) {
        break;
      }
      if (*a6) {
        break;
      }
    }
    while (v15 != v17++);
    return a8;
  }

  return fe_dctlkp_LookupAddonDct(a1, a2, __src, a4, a5, a6, a7, a9);
}

uint64_t fe_dctlkp_LookupAddonDct(uint64_t a1, int a2, char *a3, const char *a4, void *a5, unsigned __int16 *a6, unsigned char *a7, _DWORD *a8)
{
  uint64_t v13 = a1;
  int v87 = 0;
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  int v85 = a5;
  unsigned int Str = paramc_ParamGetStr(*(void *)(*(void *)v13 + 40), (uint64_t)"addondct_extended_lookup", &v87);
  if ((Str & 0x80000000) != 0 || cstdlib_strcmp(v87, "yes"))
  {
    char v18 = 0;
  }
  else
  {
    log_OutText(*(void *)(*(void *)v13 + 32), (uint64_t)"FE_DCTLKP", 5, 0, (uint64_t)"<%s> enables extended lookup (both DDU and system dct)", v14, v15, v16, (uint64_t)"addondct_extended_lookup");
    char v18 = 1;
  }
  uint64_t v20 = v85;
  unsigned __int16 v78 = *a6;
  if (!*(_WORD *)(v13 + 568))
  {
    LOWORD(v23) = 0;
    uint64_t v86 = 0;
    char v56 = 1;
    goto LABEL_54;
  }
  char v73 = v18;
  unsigned int v76 = Str;
  unsigned __int16 v74 = a8;
  unint64_t v21 = 0;
  unsigned int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v77 = a3;
  uint64_t v84 = v13;
  while (1)
  {
    unint64_t v83 = v21;
    uint64_t v25 = *(void *)(*(void *)(v13 + 576) + 8 * v21);
    if (*(_DWORD *)(v25 + 620))
    {
      if (cstdlib_strstr(a3, "femwg2p"))
      {
        unsigned int v26 = 0;
        int v27 = "addonmwg2p";
        goto LABEL_19;
      }
      if (cstdlib_strstr(a3, "femwtn"))
      {
        unsigned int v26 = 0;
        int v27 = "addonmwtn";
        goto LABEL_19;
      }
      int v27 = (char *)(cstdlib_strstr(a3, "g2p") ? v25 + 106 : v25 + 362);
      if (cstdlib_strlen(v27)) {
        break;
      }
    }
    unint64_t v28 = v83;
LABEL_46:
    unint64_t v21 = v28 + 1;
    a3 = v77;
    if (v21 >= *(unsigned __int16 *)(v13 + 568))
    {
      uint64_t v86 = v24;
      if (v22)
      {
        a8 = v74;
        char v55 = v73 ^ 1;
        if (!v74) {
          char v55 = 1;
        }
        if (v55)
        {
          if (v74) {
            *unsigned __int16 v74 = 1;
          }
          *a6 = 0;
          uint64_t v57 = v76;
          goto LABEL_68;
        }
        char v56 = 0;
      }
      else
      {
        char v56 = 1;
        a8 = v74;
      }
LABEL_54:
      *a6 = v78;
      uint64_t v57 = loc_fe_dctlkp_LookupUtf(v13, a2, a3, a4, v20, a6, a7, 0);
      if ((v57 & 0x80000000) != 0)
      {
        uint64_t v19 = v57;
        goto LABEL_83;
      }
      if (a8)
      {
        if ((v56 & 1) == 0 && !*a6)
        {
          *a8 = 1;
          *a7 = 14;
          goto LABEL_69;
        }
        *a8 = 0;
      }
      unsigned int v58 = *a6;
      if (*a6)
      {
        unint64_t v59 = 0;
        do
        {
          __int16 v60 = *(unsigned char **)(*v20 + 8 * v59);
          char v61 = *v60;
          if (*v60)
          {
            uint64_t v62 = v60 + 1;
            do
            {
              if (*a7 == v61) {
                *(v62 - 1) = 14;
              }
              int v63 = *v62++;
              char v61 = v63;
            }
            while (v63);
            unsigned int v58 = *a6;
          }
          ++v59;
        }
        while (v59 < v58);
      }
LABEL_68:
      *a7 = 14;
      uint64_t v19 = v57;
      if (!a8)
      {
LABEL_70:
        __int16 v64 = 0;
        if (v86)
        {
          uint64_t v65 = a6;
          if ((_WORD)v23)
          {
            uint64_t v66 = 0;
            __int16 v64 = 0;
            do
            {
              uint64_t v67 = *a6;
              if ((int)v66 + (int)v67 >= 100 * *(unsigned __int16 *)(v13 + 658)) {
                break;
              }
              uint64_t v68 = *(char **)(*(void *)(v13 + 608) + 8 * (v66 + v67));
              if (v68)
              {
                cstdlib_strcpy(v68, *(const char **)(v86 + 8 * v66));
                ++v64;
              }
              else
              {
                log_OutText(*(void *)(*(void *)v13 + 32), (uint64_t)"FE_DCTLKP", 1, 0, (uint64_t)"Function fe_dctlkp_LookupAddonDct attempted to strcpy into a NULL pointer", v14, v15, v16, v72);
              }
              ++v66;
            }
            while ((unsigned __int16)v23 != v66);
          }
        }
        else
        {
          uint64_t v65 = a6;
        }
        *v65 += v64;
LABEL_83:
        LOWORD(v42) = v23;
        uint64_t v35 = v86;
        if (v86) {
          goto LABEL_84;
        }
        return v19;
      }
LABEL_69:
      uint64_t v19 = v57;
      if (!*a8) {
        goto LABEL_83;
      }
      goto LABEL_70;
    }
  }
  unsigned int v26 = (unsigned __int16)cstdlib_atoi((unsigned __int8 *)v27 + 6);
LABEL_19:
  unint64_t v28 = v83;
  if (v26 < v22) {
    goto LABEL_46;
  }
  unsigned int v75 = v26;
  if (!*v27) {
    goto LABEL_46;
  }
  while (1)
  {
    BOOL v29 = cstdlib_strchr(v27, 124);
    int v80 = v29;
    if (v29)
    {
      int v79 = *v29;
      *BOOL v29 = 0;
    }
    else
    {
      int v79 = 0;
    }
    *a6 = v78;
    unsigned int v76 = loc_fe_dctlkp_LookupUtf(v13, a2, v27, a4, v20, a6, a7, *(unsigned int **)(*(void *)(v13 + 576) + 8 * v28));
    if ((v76 & 0x80000000) != 0)
    {
      uint64_t v86 = v24;
      uint64_t v19 = v76;
      goto LABEL_83;
    }
    if (*a6) {
      break;
    }
LABEL_39:
    if (v80 && v79)
    {
      *int v80 = v79;
      unint64_t v28 = v83;
    }
    else
    {
      unint64_t v28 = v83;
      if (!v80) {
        goto LABEL_46;
      }
    }
    int v27 = v80 + 1;
    if (!v80[1]) {
      goto LABEL_46;
    }
  }
  uint64_t v30 = heap_Realloc(*(uint64_t **)(*(void *)v13 + 8), v24, 8 * (*a6 + (unint64_t)(unsigned __int16)v23));
  if (!v30)
  {
    uint64_t v86 = v24;
    log_OutPublic(*(void *)(*(void *)v13 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v31, v32, v33, v34, v72);
    uint64_t v19 = 2306875402;
    goto LABEL_83;
  }
  uint64_t v35 = v30;
  cstdlib_memset((void *)(v30 + 8 * (unsigned __int16)v23), 0, 8 * *a6);
  if (!*a6)
  {
    uint64_t v42 = v23;
LABEL_38:
    uint64_t v13 = v84;
    log_OutEvent(*(uint64_t ***)(*(void *)v84 + 32), 28, (uint64_t)"%s%s", v36, v37, v38, v39, v40, "ADDON_NAME");
    uint64_t v24 = v35;
    uint64_t v23 = v42;
    unsigned int v22 = v75;
    uint64_t v20 = v85;
    goto LABEL_39;
  }
  uint64_t v41 = 0;
  LODWORD(v42) = v23;
  while (1)
  {
    unsigned __int16 v43 = *(uint64_t **)(*(void *)v84 + 8);
    uint64_t v44 = *(void *)(v35 + 8 * (unsigned __int16)v42);
    int v45 = cstdlib_strlen(*(const char **)(*v85 + 8 * v41));
    unsigned int v46 = (char *)heap_Realloc(v43, v44, (v45 + 1));
    if (!v46) {
      break;
    }
    *(void *)(v35 + 8 * (unsigned __int16)v42) = v46;
    cstdlib_strcpy(v46, *(const char **)(*v85 + 8 * v41));
    uint64_t v51 = *(unsigned char **)(v35 + 8 * (unsigned __int16)v42);
    char v52 = *v51;
    if (*v51)
    {
      uint64_t v53 = v51 + 1;
      do
      {
        if (*a7 == v52) {
          *(v53 - 1) = 14;
        }
        int v54 = *v53++;
        char v52 = v54;
      }
      while (v54);
    }
    uint64_t v42 = (v42 + 1);
    if (++v41 >= (unint64_t)*a6) {
      goto LABEL_38;
    }
  }
  uint64_t v13 = v84;
  log_OutPublic(*(void *)(*(void *)v84 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v47, v48, v49, v50, v72);
  uint64_t v19 = 2306875402;
LABEL_84:
  if ((_WORD)v42)
  {
    uint64_t v42 = (unsigned __int16)v42;
    unsigned int v69 = (uint64_t *)v35;
    do
    {
      uint64_t v70 = *v69++;
      heap_Free(*(void **)(*(void *)v13 + 8), v70);
      --v42;
    }
    while (v42);
  }
  heap_Free(*(void **)(*(void *)v13 + 8), v35);
  return v19;
}

uint64_t fe_dctlkp_InitStatus(uint64_t a1)
{
  if (!a1) {
    return 2306875399;
  }
  uint64_t result = 0;
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

BOOL fe_dctlkp_IsValidStatus(_DWORD *a1)
{
  return *a1 != 0;
}

uint64_t fe_dctlkp_InitEntry(uint64_t a1)
{
  if (!a1) {
    return 2306875399;
  }
  uint64_t result = 0;
  *(_DWORD *)a1 = -1;
  *(_WORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

BOOL fe_dctlkp_IsValidEntry(_DWORD *a1)
{
  return *a1 >= 0;
}

uint64_t fe_dctlkp_DoLookupStep(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v13 = 2306875399;
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_DoLookupStep (%d byte(s) of '%s')", v14, v15, v16, a7);
  if (a5)
  {
    *(_DWORD *)a5 = -1;
    *(_WORD *)(a5 + 4) = 0;
    *(void *)(a5 + 8) = 0;
    *(_WORD *)(a5 + 16) = 0;
    int v17 = WordToHashOpt(a3 + 8, a6, 0, (unsigned __int16)a7 - 1, 0, a4);
    *(_DWORD *)a5 = v17;
    if (v17 == -2) {
      uint64_t v13 = 10;
    }
    else {
      uint64_t v13 = 0;
    }
    int v18 = *(_DWORD *)(a4 + 8);
    *(void *)(a5 + 8) = *(void *)a4;
    *(_DWORD *)(a5 + 16) = v18;
  }
  return v13;
}

uint64_t fe_dctlkp_GetEntryContents(uint64_t a1, uint64_t a2, void *a3, int *a4, unsigned __int8 **a5, _WORD *a6, unsigned char *a7, unsigned char *a8)
{
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_GetEntryContents", v16, v17, v18, v21);
  uint64_t v19 = fe_dctlkp_LookupFromStateAddress(a1, a2, a3, *a4, a5, a6, a8);
  *a7 = GetFieldSeparator((uint64_t)(a3 + 1));
  return v19;
}

uint64_t fe_dctlkp_LookupFromStateAddress(uint64_t a1, uint64_t a2, void *a3, int a4, unsigned __int8 **a5, _WORD *a6, unsigned char *a7)
{
  v50[7] = *MEMORY[0x263EF8340];
  if (!a1) {
    return 2306875400;
  }
  v50[0] = a3[2];
  BOOL v9 = *a5;
  *a7 = 1;
  if (a4 < 0) {
    goto LABEL_8;
  }
  int v11 = DecoAddr(a3 + 1, a4);
  if (v11 == -2) {
    return 10;
  }
  if (v11 < 0
    || brk_DataMap(a3[4], a3[5], (*(_DWORD *)(a3[3] + 132) + v11), *(unsigned __int16 *)(*(void *)a3[3] + 52), (uint64_t)v50))
  {
LABEL_8:
    uint64_t result = 0;
    *a7 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    LOWORD(v14) = 0;
    int v15 = 0;
    LOBYTE(v16) = *(unsigned char *)v50[0];
    do
    {
      v9[(__int16)v15++] = v16;
      uint64_t v17 = (unsigned __int8 **)a3[3];
      uint64_t v18 = *v17;
      do
      {
        uint64_t v14 = (__int16)v14;
        uint64_t v19 = v9[(__int16)v14];
        uint64_t v20 = 2 * (v19 - v18[6]);
        unsigned int v21 = v17[2][v20];
        if (v17[2][v20])
        {
          __int16 v22 = v15 - 1;
          do
          {
            if ((int)v14 < (__int16)(v15 - 1))
            {
              uint64_t v23 = v22;
              do
              {
                v9[v23 + 1] = v9[v23];
                --v23;
              }
              while (v23 > v14);
              uint64_t v17 = (unsigned __int8 **)a3[3];
              LODWORD(v19) = v9[v14];
              uint64_t v18 = *v17;
            }
            ++v15;
            v9[v14 + 1] = v17[2][2 * (v19 - (unint64_t)v18[6]) + 1];
            v9[v14] = v21;
            uint64_t v17 = (unsigned __int8 **)a3[3];
            uint64_t v18 = *v17;
            ++v22;
            LODWORD(v19) = v21;
            unsigned int v21 = v17[2][2 * (v21 - (unint64_t)(*v17)[6])];
          }
          while (v21);
        }
        LODWORD(v14) = (__int16)(v14 + 1);
      }
      while ((int)v14 < (__int16)v15);
      ++v13;
      uint64_t v24 = v50[0];
      unsigned int v16 = *(unsigned __int8 *)(v50[0] + v13);
      unsigned int v25 = v18[10];
    }
    while (v16 != v18[8] && (v16 < v25 || v16 > v18[11]));
    unsigned int v26 = *v9;
    if (v26 >= v25)
    {
      while (1)
      {
        int v27 = v26;
        unsigned int v28 = v18[11];
        uint64_t v24 = v50[0];
        if (v26 > v28) {
          break;
        }
        int v29 = v18[8];
        int v30 = *(unsigned __int8 *)(v50[0] + (int)v13);
        if (v30 == v29)
        {
LABEL_29:
          int v33 = 1;
        }
        else
        {
          uint64_t v31 = (unsigned __int8 *)(v50[0] + (int)v13 + 1);
          while (v30 < v25 || v28 < v30)
          {
            LODWORD(v13) = v13 + 1;
            int v32 = *v31++;
            LOBYTE(v30) = v32;
            if (v32 == v29) {
              goto LABEL_29;
            }
          }
          int v33 = 0;
          LOBYTE(v29) = v30;
        }
        LODWORD(v13) = v13 + v33;
        unsigned int v34 = v25;
        unsigned __int8 v35 = v25 - 1;
        if (v29 <= v28 && v29 >= v34) {
          unsigned __int8 v35 = v29;
        }
        if (v35 >= v26)
        {
          LODWORD(v13) = v13 + 1;
        }
        else
        {
          LOWORD(v37) = 0;
          int v38 = 0;
          uint64_t v39 = v17[2];
          uint64_t v40 = v18[6];
          uint64_t v13 = (int)v13;
          do
          {
            uint64_t v41 = (__int16)v38++;
            *((unsigned char *)&v50[1] + v41 + 7) = *(unsigned char *)(v24 + v13);
            do
            {
              uint64_t v37 = (__int16)v37;
              uint64_t v42 = *((unsigned __int8 *)&v50[1] + (__int16)v37 + 7);
              if (v39[2 * (v42 - v40)])
              {
                __int16 v43 = v38 - 1;
                do
                {
                  if ((int)v37 < (__int16)(v38 - 1))
                  {
                    uint64_t v44 = v43;
                    do
                    {
                      *((unsigned char *)&v50[2] + v44) = *((unsigned char *)&v50[1] + v44 + 7);
                      --v44;
                    }
                    while (v44 > v37);
                    uint64_t v42 = *((unsigned __int8 *)&v50[1] + v37 + 7);
                  }
                  int v45 = &v39[2 * (v42 - v40)];
                  *((unsigned char *)&v50[2] + v37) = v45[1];
                  uint64_t v42 = *v45;
                  *((unsigned char *)&v50[1] + v37 + 7) = v42;
                  ++v38;
                  ++v43;
                }
                while (v39[2 * (v42 - v40)]);
              }
              LODWORD(v37) = (__int16)(v37 + 1);
              LOBYTE(v26) = v26 - 1;
            }
            while ((int)v37 < (__int16)v38 && v26 >= v35);
            ++v13;
          }
          while (v26 >= v35);
          int v46 = v27 - v35;
          if ((__int16)v15 >= 2)
          {
            uint64_t v47 = (unsigned __int16)v15 - 1;
            uint64_t v48 = (__int16)(v15 + v27 - v35) - 1;
            do
              v9[v48--] = v9[v47--];
            while (v47);
          }
          if ((v46 & 0x80000000) == 0)
          {
            int v49 = 0;
            do
            {
              v9[(__int16)v49] = *((unsigned char *)&v50[1] + (__int16)v49 + 7);
              ++v49;
            }
            while (v46 >= (__int16)v49);
          }
          LOWORD(v15) = v15 + v46;
          LOBYTE(v26) = v35;
        }
        uint64_t v17 = (unsigned __int8 **)a3[3];
        uint64_t v18 = *v17;
        unsigned int v25 = (*v17)[10];
        if (v25 > v26)
        {
          uint64_t v24 = v50[0];
          break;
        }
      }
    }
    brk_DataUnmap(a3[4], a3[5], v24);
    uint64_t result = 0;
    *a6 = v15;
  }
  return result;
}

uint64_t fe_dctlkp_GetNextEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v10 = 0;
  *(_DWORD *)__s2 = 0;
  __int16 v12 = 0;
  *(void *)__s1 = 0;
  uint64_t v3 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 16);
  ++*(_WORD *)(a2 + 4);
  cstdlib_strcat(__s1, "\x17");
  LH_itoa(*(unsigned __int16 *)(a2 + 4), __s2, 0xAu);
  cstdlib_strcat(__s1, __s2);
  __int16 v4 = cstdlib_strlen(__s1);
  int v5 = WordToHashOpt(v3, (uint64_t)__s1, 0, v4 - 1, 0, (uint64_t)&v7);
  *(_DWORD *)a2 = v5;
  if (v5 == -2) {
    return 10;
  }
  else {
    return 0;
  }
}

uint64_t loc_fe_dctlkp_LookupUtf(uint64_t a1, int a2, char *a3, const char *a4, void *a5, _WORD *a6, unsigned char *a7, unsigned int *a8)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  __int16 v126 = 0;
  char v125 = 0;
  *(_DWORD *)__s2 = 0;
  uint64_t v8 = 2306875402;
  __int16 v129 = 0;
  *(void *)char __s = 0;
  uint64_t v9 = 2306875399;
  if (a3)
  {
    if (a4)
    {
      int v11 = a5;
      if (a5)
      {
        if (a6 && a7)
        {
          if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) == 0)
          {
            int v127 = 0;
            int v123 = 0;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 5, 0, (uint64_t)"Entering fe_dctlkp_Lookup: searching %s in %s", v17, v18, v19, (uint64_t)a4);
            uint64_t v122 = 0;
            uint64_t v120 = 0;
            int v121 = 0;
            if (a8)
            {
              uint64_t __src = heap_strdup(*(void *)(*(void *)a1 + 8), a3);
              if (__src)
              {
                LH_itoa(*((unsigned __int16 *)a8 + 36), __s, 0xAu);
                int v27 = a8;
LABEL_10:
                int v115 = a3;
                goto LABEL_29;
              }
              goto LABEL_32;
            }
            int v28 = (unsigned __int16)*a6;
            if (v28 == 2)
            {
              if (*(_DWORD *)(a1 + 328))
              {
                int v27 = (unsigned int *)(a1 + 328);
LABEL_27:
                int v115 = a3;
                goto LABEL_28;
              }
            }
            else
            {
              if (v28 == 1)
              {
                uint64_t v29 = *(void *)(*(void *)a1 + 8);
                int v30 = cstdlib_strlen(a3);
                uint64_t v31 = (char *)heap_Alloc(v29, (v30 + 2));
                if (v31)
                {
                  int v32 = v31;
                  cstdlib_strcpy(v31, a3);
                  uint64_t __src = v32;
                  cstdlib_strcat(v32, "C");
                  if (cstdlib_strcmp(a3, "lidcfg")
                    && cstdlib_strncmp(a3, "mertfrq", 7uLL)
                    && cstdlib_strncmp(a3, "merwfrq", 7uLL))
                  {
                    if (cstdlib_strncmp(a3, "ml2", 3uLL) && cstdlib_strncmp(a3, "lid", 3uLL))
                    {
                      if (cstdlib_strncmp(a3, "clm", 3uLL))
                      {
                        int v27 = (unsigned int *)(a1 + 88);
                        if (*(_DWORD *)(a1 + 88)) {
                          goto LABEL_10;
                        }
                      }
                      else if (*(_DWORD *)(a1 + 408))
                      {
                        int v27 = (unsigned int *)(a1 + 408);
                        goto LABEL_10;
                      }
                    }
                    else
                    {
                      int v27 = (unsigned int *)(a1 + 248);
                      if (*(_DWORD *)(a1 + 248)) {
                        goto LABEL_10;
                      }
                    }
                  }
                  else
                  {
                    int v27 = (unsigned int *)(a1 + 168);
                    if (*(_DWORD *)(a1 + 168)) {
                      goto LABEL_10;
                    }
                  }
                  int v27 = 0;
                  char v74 = 1;
                  uint64_t v8 = 2306875399;
                  goto LABEL_82;
                }
                goto LABEL_32;
              }
              if (cstdlib_strncmp(a3, "ext_", 4uLL))
              {
                int v27 = (unsigned int *)(a1 + 8);
                goto LABEL_27;
              }
              if (*(_DWORD *)(a1 + 488))
              {
                int v27 = (unsigned int *)(a1 + 488);
                int v115 = a3 + 4;
LABEL_28:
                uint64_t __src = heap_strdup(*(void *)(*(void *)a1 + 8), a3);
                if (__src)
                {
LABEL_29:
                  int v33 = (unsigned __int16)*a6;
                  if ((v33 - 1) < 2 || v33 == 0xFFFF)
                  {
                    BOOL v117 = cstdlib_strncmp(a3, "ml2mw", 5uLL) == 0;
                    *a6 = 0;
                  }
                  else
                  {
                    BOOL v117 = 1;
                  }
                  uint64_t v35 = (uint64_t)__src;
                  int v36 = hlp_SearchDctName(a1, __src, __s);
                  if ((v36 & 0x80000000) == 0)
                  {
                    uint64_t v37 = 0;
                    unsigned int v114 = 0;
                    *((void *)v27 + 3) = *(void *)(*(void *)(a1 + 600) + 8 * (unsigned __int16)v36);
                    BOOL v38 = v117;
LABEL_36:
                    *a7 = GetFieldSeparator((uint64_t)(v27 + 2));
                    if (*(__int16 *)(a1 + 662) < (__int16)(cstdlib_strlen(a4) + 5))
                    {
                      unsigned __int16 v39 = cstdlib_strlen(a4) + 5;
                      uint64_t v40 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 616), v39);
                      if (!v40)
                      {
                        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v41, v42, v43, v44, v112);
                        uint64_t v37 = 2306875402;
                        goto LABEL_94;
                      }
                      *(_WORD *)(a1 + 662) = v39;
                      *(void *)(a1 + 616) = v40;
                    }
                    *a6 = 0;
                    *int v11 = *(void *)(a1 + 608);
                    unsigned int v113 = v11;
                    if (v114 > *(unsigned __int16 *)(a1 + 660))
                    {
                      if (*(_WORD *)(a1 + 658))
                      {
                        unsigned __int16 v45 = 0;
                        do
                        {
                          uint64_t v46 = v45;
                          uint64_t v47 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(*(void *)(a1 + 608) + 8 * v45), v114 + 1);
                          if (!v47)
                          {
                            log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v48, v49, v50, v51, v112);
                            uint64_t v37 = 2306875402;
                            int v11 = v113;
                            goto LABEL_93;
                          }
                          *(void *)(*(void *)(a1 + 608) + 8 * v46) = v47;
                          unsigned __int16 v45 = v46 + 1;
                        }
                        while (100 * *(unsigned __int16 *)(a1 + 658) - 1 > (unsigned __int16)(v46 + 1));
                      }
                      *(_WORD *)(a1 + 660) = v114;
                      int v11 = v113;
                      uint64_t v35 = (uint64_t)__src;
                      BOOL v38 = v117;
                    }
                    LOWORD(v52) = *a6;
                    if (v38 || !*a6)
                    {
                      uint64_t v53 = "\x17";
                      BOOL v118 = v38;
                      while (1)
                      {
                        HIWORD(v127) = 0;
                        if ((unsigned __int16)v52 == 1)
                        {
                          uint64_t v120 = v122;
                          int v121 = v123;
                        }
                        else
                        {
                          if (!(_WORD)v52)
                          {
                            cstdlib_strcpy(*(char **)(a1 + 616), a4);
                            goto LABEL_54;
                          }
                          uint64_t v122 = v120;
                          int v123 = v121;
                        }
                        cstdlib_strcpy(*(char **)(a1 + 616), v53);
                        LH_itoa((unsigned __int16)*a6, __s2, 0xAu);
                        cstdlib_strcat(*(char **)(a1 + 616), __s2);
LABEL_54:
                        LOWORD(v127) = cstdlib_strlen(*(const char **)(a1 + 616)) - 1;
                        unsigned int v54 = DctLookup((uint64_t)(v27 + 2), *(void *)(a1 + 616), (unsigned __int16 *)&v127 + 1, (__int16 *)&v127, 0, &v126, (uint64_t)&v122);
                        if (v54)
                        {
                          if ((v54 & 0x1FFF) == 0x14) {
                            unsigned int v75 = 0;
                          }
                          else {
                            unsigned int v75 = v54;
                          }
                          if ((v54 & 0x1FFF) == 0xA) {
                            uint64_t v37 = 2306875402;
                          }
                          else {
                            uint64_t v37 = v75;
                          }
LABEL_93:
                          uint64_t v35 = (uint64_t)__src;
                          break;
                        }
                        if ((unsigned __int16)*a6 + 2 > 100
                                                                     * *(unsigned __int16 *)(a1 + 658))
                        {
                          uint64_t v55 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 608), 800 * *(unsigned __int16 *)(a1 + 658) + 800);
                          if (!v55) {
                            goto LABEL_78;
                          }
                          __int16 v60 = v53;
                          *(void *)(a1 + 608) = v55;
                          __int16 v61 = 100 * *(_WORD *)(a1 + 658);
                          if (*(_WORD *)(a1 + 658)) {
                            unsigned __int16 v62 = v61 - 1;
                          }
                          else {
                            unsigned __int16 v62 = 0;
                          }
                          unsigned int v63 = v62;
                          unint64_t v64 = v62;
                          cstdlib_memset((void *)(v55 + 8 * v62), 0, 8 * (((unsigned __int16)(v61 + 100) & 0xFFFC) - (unint64_t)v62));
                          __int16 v65 = *(_WORD *)(a1 + 658);
                          if (v63 < (unsigned __int16)(100 * v65 + 99))
                          {
                            int v11 = v113;
                            while (1)
                            {
                              uint64_t v66 = heap_Alloc(*(void *)(*(void *)a1 + 8), *(unsigned __int16 *)(a1 + 660) + 1);
                              if (!v66) {
                                break;
                              }
                              *(void *)(*(void *)(a1 + 608) + 8 * v64++) = v66;
                              __int16 v65 = *(_WORD *)(a1 + 658);
                              if (v64 >= (unsigned __int16)(100 * v65 + 99))
                              {
                                unint64_t v64 = (unsigned __int16)v64;
                                goto LABEL_66;
                              }
                            }
LABEL_78:
                            log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v56, v57, v58, v59, v112);
                            uint64_t v37 = 2306875402;
                            goto LABEL_93;
                          }
                          int v11 = v113;
LABEL_66:
                          *(void *)(*(void *)(a1 + 608) + 8 * v64) = 0;
                          *(_WORD *)(a1 + 658) = v65 + 1;
                          uint64_t v53 = v60;
                          BOOL v38 = v118;
                        }
                        if (v126 < 1)
                        {
                          LOWORD(v67) = 0;
                        }
                        else
                        {
                          uint64_t v67 = 0;
                          do
                          {
                            *(unsigned char *)(*(void *)(*(void *)(a1 + 608) + 8 * (unsigned __int16)*a6) + v67) = *(unsigned char *)(*((void *)v27 + 6) + v67);
                            ++v67;
                          }
                          while (v67 < v126);
                        }
                        *(unsigned char *)(*(void *)(*(void *)(a1 + 608) + 8 * (unsigned __int16)*a6)
                                 + (unsigned __int16)v67) = 0;
                        int v52 = (unsigned __int16)(*a6)++ + 1;
                        if (!v38 && (v52 & 0x10000) == 0)
                        {
                          uint64_t v37 = 0;
                          goto LABEL_93;
                        }
                      }
                    }
LABEL_94:
                    char v74 = 1;
                    goto LABEL_95;
                  }
                  uint64_t v68 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 624), 8 * *(unsigned __int16 *)(a1 + 656) + 16);
                  if (!v68) {
                    goto LABEL_119;
                  }
                  *(void *)(a1 + 624) = v68;
                  uint64_t v73 = *(unsigned __int16 *)(a1 + 656);
                  *(void *)(v68 + 8 * v73) = 0;
                  *(void *)(*(void *)(a1 + 624) + 8 * v73 + 8) = 0;
                  if (!a8)
                  {
                    uint64_t v76 = brk_DataOpen(*(void *)(*(void *)a1 + 24));
                    if ((v76 & 0x80000000) != 0)
                    {
                      char v74 = 0;
                      uint64_t v8 = v76;
                      goto LABEL_120;
                    }
                    uint64_t v73 = *(unsigned __int16 *)(a1 + 656);
                  }
                  uint64_t v77 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 600), 8 * v73 + 16);
                  if (!v77) {
                    goto LABEL_119;
                  }
                  *(void *)(a1 + 600) = v77;
                  uint64_t v78 = *(unsigned __int16 *)(a1 + 656);
                  *(void *)(v77 + 8 * v78) = 0;
                  *(void *)(*(void *)(a1 + 600) + 8 * v78 + 8) = 0;
                  uint64_t v79 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 144);
                  if (!v79) {
                    goto LABEL_119;
                  }
                  uint64_t v80 = *(unsigned __int16 *)(a1 + 656);
                  *(void *)(*(void *)(a1 + 600) + 8 * v80) = v79;
                  *((void *)v27 + 3) = *(void *)(*(void *)(a1 + 600) + 8 * v80);
                  uint64_t inited = init_DctRom((uint64_t)(v27 + 2), v115, *v27, *(void *)(*(void *)(a1 + 624) + 8 * v80));
                  uint64_t v37 = inited;
                  if ((inited & 0x80000000) != 0)
                  {
                    if ((inited & 0x1FFF) != 0x14)
                    {
                      char v74 = 0;
LABEL_95:
                      uint64_t v8 = v37;
                      goto LABEL_120;
                    }
                    heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*(void *)(a1 + 600) + 8 * *(unsigned __int16 *)(a1 + 656)));
                    uint64_t v111 = *(unsigned __int16 *)(a1 + 656);
                    *(void *)(*(void *)(a1 + 600) + 8 * v111) = 0;
                    brk_DataClose(*(void *)(*(void *)a1 + 24), *(void *)(*(void *)(a1 + 624) + 8 * v111));
                    char v74 = 0;
                    uint64_t v8 = 0;
                    *(void *)(*(void *)(a1 + 624) + 8 * *(unsigned __int16 *)(a1 + 656)) = 0;
                    goto LABEL_120;
                  }
                  uint64_t v82 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 592), 8 * *(unsigned __int16 *)(a1 + 656) + 16);
                  if (!v82)
                  {
LABEL_119:
                    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v69, v70, v71, v72, v112);
                    char v74 = 0;
                    goto LABEL_120;
                  }
                  *(void *)(a1 + 592) = v82;
                  uint64_t v83 = *(unsigned __int16 *)(a1 + 656);
                  *(void *)(v82 + 8 * v83) = 0;
                  *(void *)(*(void *)(a1 + 592) + 8 * v83 + 8) = 0;
                  unsigned __int16 v116 = cstdlib_strlen(__s);
                  int v84 = cstdlib_strlen(__src);
                  if (v116) {
                    int v85 = v116 + 1;
                  }
                  else {
                    int v85 = 0;
                  }
                  uint64_t v86 = heap_Alloc(*(void *)(*(void *)a1 + 8), (v84 + v85 + 1));
                  if (v86)
                  {
                    uint64_t v91 = *(unsigned __int16 *)(a1 + 656);
                    *(void *)(*(void *)(a1 + 592) + 8 * v91) = v86;
                    __n128 v92 = *(void **)(*(void *)(a1 + 592) + 8 * v91);
                    if (v116)
                    {
                      cstdlib_memcpy(v92, __s, v116);
                      *(unsigned char *)(*(void *)(*(void *)(a1 + 592) + 8 * *(unsigned __int16 *)(a1 + 656)) + v116) = 95;
                      __n128 v92 = (void *)(*(void *)(*(void *)(a1 + 592) + 8 * *(unsigned __int16 *)(a1 + 656))
                                   + v116
                                   + 1);
                    }
                    uint64_t v35 = (uint64_t)__src;
                    cstdlib_strcpy((char *)v92, __src);
                    MaxOutLeuint64_t n = GetMaxOutLen((uint64_t)(v27 + 2));
                    if (MaxOutLen)
                    {
                      BOOL v38 = v117;
                      unsigned int v114 = MaxOutLen;
                      if (MaxOutLen <= *(unsigned __int16 *)(a1 + 660))
                      {
LABEL_118:
                        ++*(_WORD *)(a1 + 656);
                        goto LABEL_36;
                      }
                      uint64_t v98 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *((void *)v27 + 6), MaxOutLen + 1);
                      if (v98)
                      {
                        *(void *)(a1 + 56) = v98;
                        *(void *)(a1 + 136) = v98;
                        *(void *)(a1 + 216) = v98;
                        *(void *)(a1 + 296) = v98;
                        *(void *)(a1 + 376) = v98;
                        *(void *)(a1 + 456) = v98;
                        *(void *)(a1 + 536) = v98;
                        uint64_t v99 = *(unsigned __int16 *)(a1 + 568);
                        if (*(_WORD *)(a1 + 568))
                        {
                          int v100 = *(uint64_t **)(a1 + 576);
                          do
                          {
                            uint64_t v101 = *v100++;
                            *(void *)(v101 + 48) = v98;
                            --v99;
                          }
                          while (v99);
                        }
                        goto LABEL_118;
                      }
                      goto LABEL_119;
                    }
                    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41001, 0, v94, v95, v96, v97, v112);
                    char v74 = 0;
                    uint64_t v8 = 2306875399;
LABEL_120:
                    heap_Free(*(void **)(*(void *)a1 + 8), v35);
                    if ((v8 & 0x80000000) != 0)
                    {
                      if ((v74 & 1) == 0)
                      {
                        uint64_t v102 = *(void *)(a1 + 592);
                        if (v102)
                        {
                          uint64_t v103 = *(void *)(v102 + 8 * *(unsigned __int16 *)(a1 + 656));
                          if (v103)
                          {
                            heap_Free(*(void **)(*(void *)a1 + 8), v103);
                            *(void *)(*(void *)(a1 + 592) + 8 * *(unsigned __int16 *)(a1 + 656)) = 0;
                          }
                        }
                        uint64_t v104 = *(void *)(a1 + 600);
                        if (v104)
                        {
                          uint64_t v105 = *(unsigned __int16 *)(a1 + 656);
                          uint64_t v106 = *(void *)(v104 + 8 * v105);
                          if (v106)
                          {
                            if (v27)
                            {
                              uint64_t v107 = *(void *)(a1 + 624);
                              if (v107)
                              {
                                if (*(void *)(v107 + 8 * v105))
                                {
                                  *((void *)v27 + 3) = v106;
                                  exit_DctRom((uint64_t)(v27 + 2), *(void *)(v107 + 8 * v105));
                                  uint64_t v106 = *(void *)(*(void *)(a1 + 600) + 8 * *(unsigned __int16 *)(a1 + 656));
                                }
                              }
                            }
                            heap_Free(*(void **)(*(void *)a1 + 8), v106);
                            *(void *)(*(void *)(a1 + 600) + 8 * *(unsigned __int16 *)(a1 + 656)) = 0;
                          }
                        }
                        uint64_t v108 = *(void *)(a1 + 624);
                        if (v108)
                        {
                          uint64_t v109 = *(void *)(v108 + 8 * *(unsigned __int16 *)(a1 + 656));
                          if (v109)
                          {
                            brk_DataClose(*(void *)(*(void *)a1 + 24), v109);
                            *(void *)(*(void *)(a1 + 624) + 8 * *(unsigned __int16 *)(a1 + 656)) = 0;
                          }
                        }
                      }
                      uint64_t v34 = v8;
                    }
                    else
                    {
                      uint64_t v34 = v8;
                      if (*a6) {
                        *int v11 = *(void *)(a1 + 608);
                      }
                    }
                    goto LABEL_138;
                  }
                  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v87, v88, v89, v90, v112);
                  char v74 = 0;
LABEL_82:
                  uint64_t v35 = (uint64_t)__src;
                  goto LABEL_120;
                }
LABEL_32:
                log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v23, v24, v25, v26, v112);
                uint64_t v34 = 2306875402;
LABEL_138:
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_Lookup", v20, v21, v22, v112);
                return v34;
              }
            }
            uint64_t v34 = 2306875399;
            goto LABEL_138;
          }
          return 2306875400;
        }
      }
    }
  }
  return v9;
}

uint64_t fe_dctlkp_ConvertToCanonicalTokenUtf(size_t a1, int a2, const char *a3, const char *a4, unsigned int a5)
{
  uint64_t v10 = safeh_HandleCheck(a1, a2, 62335, 4032);
  if ((v10 & 0x80000000) != 0) {
    return 2306875400;
  }
  uint64_t CanonMap = v10;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_ConvertToCanonicalToken", v11, v12, v13, v21);
  if (!a4)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41001, 0, v15, v16, v17, v18, v22);
    return 2306875399;
  }
  if (*(_DWORD *)(a1 + 2996) && cstdlib_strcmp(a3, (const char *)(a1 + 2738)))
  {
    uint64_t CanonMap = LoadCanonMap(a1, a2, a3);
    if ((CanonMap & 0x80000000) != 0) {
      return CanonMap;
    }
    cstdlib_strcpy((char *)(a1 + 2738), a3);
  }
  if (*(_WORD *)(a1 + 1712) != 2)
  {
    if (*(_WORD *)(a1 + 1712))
    {
      if ((unsigned __int16)Utf8_Utf8NbrOfSymbols(a4) - 3 <= 0xFFFFFFFD
        && (unsigned __int16)cstdlib_strlen(a4))
      {
        int v19 = 0;
        do
          v19 += hlp_tolower_char((unsigned __int8 *)&a4[(unsigned __int16)v19]);
        while ((unsigned __int16)cstdlib_strlen(a4) > (unsigned __int16)v19);
      }
    }
    else
    {
      hlp_ConvertToCanonicalTokenUtf(a1, a2, a1, *(void *)(a1 + 664), a4, a5);
      uint64_t CanonMap = 0;
    }
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_ConvertToCanonicalToken", v16, v17, v18, v22);
  return CanonMap;
}

size_t hlp_ConvertToCanonicalTokenUtf(size_t result, int a2, uint64_t a3, uint64_t a4, const char *a5, unsigned int a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(_WORD *)(a3 + 1712) != 2)
  {
    uint64_t v9 = result;
    cstdlib_strcpy(__dst, "canonmap");
    if (*(void *)(a3 + 3000) == a4)
    {
      cstdlib_strcat(__dst, "g2pdct");
      uint64_t v10 = a3 + 3008;
    }
    else
    {
      uint64_t v10 = a3 + 672;
    }
    uint64_t result = Utf8_Utf8NbrOfSymbols(a5);
    if ((unsigned __int16)result - 3 <= 0xFFFFFFFD)
    {
      uint64_t result = cstdlib_strlen(a5);
      unsigned __int16 v11 = result;
      if ((_WORD)result)
      {
        int v12 = 0;
        unsigned __int16 v13 = 0;
        int v14 = (unsigned __int16)result;
        do
        {
          uint64_t v15 = &a5[v13];
          unsigned __int16 v16 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v15);
          if (hlp_getUtf8CanMap(v9, a2, __dst, v10, v15, __s))
          {
            unsigned __int16 v17 = cstdlib_strlen(__s);
            unsigned __int16 v18 = v14 - v16 + v17;
            if (a6 > v18)
            {
              size_t v19 = v17;
              cstdlib_memmove((void *)&v15[v17], &v15[v16], v14 - (v12 + v16) + 1);
              cstdlib_strncpy((char *)&a5[v13], __s, v19);
              unsigned __int16 v11 = v18;
            }
          }
          else
          {
            hlp_tolower_char((unsigned __int8 *)&a5[v13]);
          }
          uint64_t result = utf8_determineUTF8CharLength(*(unsigned __int8 *)v15);
          v13 += result;
          int v12 = v13;
          int v14 = v11;
        }
        while (v13 < v11);
      }
    }
  }
  return result;
}

unsigned __int8 *hlp_tolower_char(unsigned __int8 *result)
{
  uint64_t v1 = result;
  LODWORD(result) = *result;
  if ((result - 65) > 0x19)
  {
    if (result == 195)
    {
      int v2 = v1[1];
      LOWORD(result) = 2;
      switch(v1[1])
      {
        case 0x84:
          char v3 = -92;
          goto LABEL_16;
        case 0x85:
          char v3 = -91;
          goto LABEL_16;
        case 0x86:
          char v3 = -90;
          goto LABEL_16;
        case 0x87:
          char v3 = -89;
          goto LABEL_16;
        case 0x88:
        case 0x8A:
        case 0x8B:
        case 0x8C:
        case 0x8D:
        case 0x8E:
        case 0x8F:
        case 0x90:
          return (unsigned __int8 *)(unsigned __int16)result;
        case 0x89:
          char v3 = -87;
          goto LABEL_16;
        case 0x91:
          char v3 = -79;
          goto LABEL_16;
        default:
          if (v2 == 150)
          {
            char v3 = -74;
          }
          else
          {
            if (v2 != 156) {
              return (unsigned __int8 *)(unsigned __int16)result;
            }
            char v3 = -68;
          }
LABEL_16:
          v1[1] = v3;
          break;
      }
    }
    else
    {
      LOWORD(result) = utf8_determineUTF8CharLength(result);
    }
  }
  else
  {
    unsigned char *v1 = (_BYTE)result + 32;
    LOWORD(result) = 1;
  }
  return (unsigned __int8 *)(unsigned __int16)result;
}

uint64_t fe_dctlkp_G2PConvertToCanonicalTokenUtf(size_t a1, int a2, const char *a3, const char *a4, unsigned int a5)
{
  uint64_t v10 = 2306875399;
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_G2PConvertToCanonicalToken", v11, v12, v13, v24);
  if (a4)
  {
    if (*(_DWORD *)(a1 + 2996) && cstdlib_strcmp(a3, (const char *)(a1 + 2738)))
    {
      uint64_t CanonMap = LoadCanonMap(a1, a2, a3);
      if ((CanonMap & 0x80000000) != 0) {
        return CanonMap;
      }
      cstdlib_strcpy((char *)(a1 + 2738), a3);
    }
    uint64_t v19 = *(void *)(a1 + 3000);
    if (!v19) {
      uint64_t v19 = *(void *)(a1 + 664);
    }
    hlp_ConvertToCanonicalTokenUtf(a1, a2, a1, v19, a4, a5);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_G2PConvertToCanonicalToken", v20, v21, v22, v25);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41001, 0, v14, v15, v16, v17, v25);
  }
  return v10;
}

uint64_t fe_dctlkp_ConvertToCanonicalWordUtf(uint64_t a1, int a2, const char *a3, char *a4, unsigned int a5)
{
  uint64_t v10 = safeh_HandleCheck(a1, a2, 62335, 4032);
  if ((v10 & 0x80000000) != 0) {
    return 2306875400;
  }
  uint64_t CanonMap = v10;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_ConvertToCanonicalWord", v11, v12, v13, v35);
  if (a4)
  {
    if (cstdlib_strlen(a4))
    {
      if (!*(_DWORD *)(a1 + 2996) || !cstdlib_strcmp(a3, (const char *)(a1 + 2738)))
      {
LABEL_8:
        if (*(_WORD *)(a1 + 1712))
        {
          if ((unsigned __int16)cstdlib_strlen(a4))
          {
            int v19 = 0;
            do
            {
              uint64_t v20 = *(char **)(a1 + 584);
              if (!v20) {
                break;
              }
              uint64_t v21 = &a4[(unsigned __int16)v19];
              if (!*v21) {
                break;
              }
              if (!utf8_strchr(v20, &a4[(unsigned __int16)v19])) {
                break;
              }
              v19 += utf8_determineUTF8CharLength(*v21);
            }
            while ((unsigned __int16)cstdlib_strlen(a4) > (unsigned __int16)v19);
          }
          else
          {
            int v19 = 0;
          }
          __int16 v25 = cstdlib_strlen(a4);
          int v26 = (__int16)(v25 - 1) & ((__int16)(v25 - 1) >> 31);
          LOWORD(v27) = v25;
          do
          {
            int v27 = (__int16)(v27 - 1);
            if (v27 < 1) {
              goto LABEL_35;
            }
          }
          while (a4[(unsigned __int16)v27] < -64);
          int v28 = *(char **)(a1 + 584);
          if (v28)
          {
            while (2)
            {
              uint64_t v29 = &a4[(unsigned __int16)v27];
              if (*v29 && utf8_strchr(v28, v29))
              {
                LOWORD(v26) = v27;
                do
                {
                  int v26 = (__int16)(v26 - 1);
                  if (v26 < 1)
                  {
                    __int16 v30 = v27;
                    if ((__int16)v27 >= 1) {
                      __int16 v30 = 1;
                    }
                    LOWORD(v26) = v30 - 1;
                    goto LABEL_35;
                  }
                }
                while (a4[(unsigned __int16)v26] < -64);
                int v28 = *(char **)(a1 + 584);
                LOWORD(v27) = v26;
                if (v28) {
                  continue;
                }
LABEL_35:
                a4[(unsigned __int16)(v26 + utf8_determineUTF8CharLength(a4[(unsigned __int16)v26]))] = 0;
                uint64_t v31 = (unsigned __int16)v19;
                if (*(_WORD *)(a1 + 1712) != 2
                  && (unsigned __int16)Utf8_Utf8NbrOfSymbols(&a4[(unsigned __int16)v19]) - 3 <= 0xFFFFFFFD
                  && (unsigned __int16)cstdlib_strlen(a4) > (unsigned __int16)v19)
                {
                  do
                    v19 += hlp_tolower_char((unsigned __int8 *)&a4[(unsigned __int16)v19]);
                  while ((unsigned __int16)cstdlib_strlen(a4) > (unsigned __int16)v19);
                }
                int v32 = &a4[v31];
                size_t v33 = cstdlib_strlen(v32);
                cstdlib_memmove(a4, v32, v33 + 1);
                goto LABEL_40;
              }
              break;
            }
          }
          LOWORD(v26) = v27;
          goto LABEL_35;
        }
        hlp_ConvertToCanonicalWordUtf(a1, a2, a1, *(void *)(a1 + 664), a4, a5);
        uint64_t CanonMap = 0;
LABEL_40:
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_ConvertToCanonicalWord", v22, v23, v24, v36);
        return CanonMap;
      }
      uint64_t CanonMap = LoadCanonMap(a1, a2, a3);
      if ((CanonMap & 0x80000000) == 0)
      {
        cstdlib_strcpy((char *)(a1 + 2738), a3);
        goto LABEL_8;
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41001, 0, v15, v16, v17, v18, v36);
    return 2306875399;
  }
  return CanonMap;
}

void *hlp_ConvertToCanonicalWordUtf(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, unsigned int a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  cstdlib_strcpy(__dst, "canonmap");
  if (*(void *)(a3 + 3000) == a4)
  {
    cstdlib_strcat(__dst, "g2pdct");
    uint64_t v10 = a3 + 3008;
  }
  else
  {
    uint64_t v10 = a3 + 672;
  }
  if ((unsigned __int16)cstdlib_strlen(a5))
  {
    int v11 = 0;
    do
    {
      if (!loc_fe_dctlkp_IsPunctUtf(a3, &a5[(unsigned __int16)v11])) {
        break;
      }
      v11 += utf8_determineUTF8CharLength(a5[(unsigned __int16)v11]);
    }
    while ((unsigned __int16)cstdlib_strlen(a5) > (unsigned __int16)v11);
  }
  else
  {
    LOWORD(v11) = 0;
  }
  if (cstdlib_strlen(a5))
  {
    int v12 = (__int16)(cstdlib_strlen(a5) - 1);
    if (v12 < 1) {
      goto LABEL_21;
    }
    while (a5[(unsigned __int16)v12] < -64)
    {
      int v13 = (__int16)v12;
      LOWORD(v12) = v12 - 1;
      if (v13 <= 1) {
        goto LABEL_14;
      }
    }
    if (loc_fe_dctlkp_IsPunctUtf(a3, &a5[(unsigned __int16)v12]))
    {
      while (2)
      {
        LOWORD(v14) = v12;
        do
        {
          int v14 = (__int16)(v14 - 1);
          if (v14 < 1)
          {
            __int16 v15 = v12;
            if ((__int16)v12 >= 1) {
              __int16 v15 = 1;
            }
            LOWORD(v14) = v15 - 1;
            goto LABEL_25;
          }
        }
        while (a5[(unsigned __int16)v14] < -64);
        LOWORD(v12) = v14;
        if (loc_fe_dctlkp_IsPunctUtf(a3, &a5[(unsigned __int16)v14])) {
          continue;
        }
        break;
      }
    }
    else
    {
LABEL_21:
      LOWORD(v14) = v12;
    }
  }
  else
  {
LABEL_14:
    LOWORD(v14) = 0;
  }
LABEL_25:
  unsigned int v16 = (unsigned __int16)utf8_determineUTF8CharLength(a5[(unsigned __int16)v14])
      + (unsigned __int16)v14;
  if (v16 >= a6) {
    LOWORD(v16) = a6 - 1;
  }
  a5[(unsigned __int16)v16] = 0;
  uint64_t v29 = (unsigned __int16)v11;
  if (*(_WORD *)(a3 + 1712) != 2
    && (unsigned __int16)Utf8_Utf8NbrOfSymbols(&a5[(unsigned __int16)v11]) - 3 <= 0xFFFFFFFD)
  {
    unsigned __int16 v17 = cstdlib_strlen(a5);
    unsigned __int16 v18 = v17;
    if (v17)
    {
      int v19 = 0;
      int v20 = 0;
      int v21 = v17;
      do
      {
        uint64_t v22 = &a5[(unsigned __int16)v20];
        unsigned __int16 v23 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v22);
        if (hlp_getUtf8CanMap(a1, a2, __dst, v10, v22, __s))
        {
          unsigned __int16 v24 = cstdlib_strlen(__s);
          unsigned __int16 v25 = v21 - v23 + v24;
          if (a6 > v25)
          {
            size_t v26 = v24;
            cstdlib_memmove((void *)&v22[v24], &v22[v23], v21 - (v19 + v23) + 1);
            cstdlib_strncpy(&a5[(unsigned __int16)v20], __s, v26);
            unsigned __int16 v18 = v25;
          }
        }
        else
        {
          hlp_tolower_char((unsigned __int8 *)&a5[(unsigned __int16)v20]);
        }
        v20 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v22);
        int v19 = (unsigned __int16)v20;
        int v21 = v18;
      }
      while ((unsigned __int16)v20 < v18);
    }
  }
  size_t v27 = cstdlib_strlen(&a5[v29]);
  return cstdlib_memmove(a5, &a5[v29], v27 + 1);
}

BOOL loc_fe_dctlkp_IsPunctUtf(BOOL result, const char *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t result = 0;
    if (a2)
    {
      char v3 = *(char **)(v2 + 584);
      if (v3) {
        return *a2 && utf8_strchr(v3, a2) != 0;
      }
    }
  }
  return result;
}

uint64_t fe_dctlkp_G2PConvertToCanonicalWordUtf(uint64_t a1, int a2, const char *a3, char *a4, unsigned int a5)
{
  uint64_t v10 = 2306875399;
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_G2PConvertToCanonicalWord", v11, v12, v13, v24);
  if (a4)
  {
    if (*(_DWORD *)(a1 + 2996) && cstdlib_strcmp(a3, (const char *)(a1 + 2738)))
    {
      uint64_t CanonMap = LoadCanonMap(a1, a2, a3);
      if ((CanonMap & 0x80000000) != 0) {
        return CanonMap;
      }
      cstdlib_strcpy((char *)(a1 + 2738), a3);
    }
    uint64_t v19 = *(void *)(a1 + 3000);
    if (!v19) {
      uint64_t v19 = *(void *)(a1 + 664);
    }
    hlp_ConvertToCanonicalWordUtf(a1, a2, a1, v19, a4, a5);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_G2PConvertToCanonicalWord", v20, v21, v22, v25);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41001, 0, v14, v15, v16, v17, v25);
  }
  return v10;
}

uint64_t fe_dctlkp_LookupMultiwordUtf(uint64_t a1, int a2, char *a3, unsigned int a4, char *a5, const char *a6, void *a7, unsigned __int16 *a8)
{
  char v35 = 0;
  uint64_t v16 = 2306875399;
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 2306875400;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Entering fe_dctlkp_LookupMultiword", v17, v18, v19, v33);
  if (!a3 || !a7 || !a8)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41001, 0, v20, v21, v22, v23, v34);
    return v16;
  }
  if (*(_DWORD *)(a1 + 2996) && cstdlib_strcmp(a6, (const char *)(a1 + 2738)))
  {
    uint64_t CanonMap = LoadCanonMap(a1, a2, a6);
    if ((CanonMap & 0x80000000) != 0) {
      return CanonMap;
    }
    cstdlib_strcpy((char *)(a1 + 2738), a6);
  }
  if ((unsigned __int16)cstdlib_strlen(a3))
  {
    int v25 = 0;
    do
    {
      if (!loc_fe_dctlkp_IsPunctUtf(a1, &a3[(unsigned __int16)v25])) {
        break;
      }
      v25 += utf8_determineUTF8CharLength(a3[(unsigned __int16)v25]);
    }
    while ((unsigned __int16)cstdlib_strlen(a3) > (unsigned __int16)v25);
  }
  else
  {
    int v25 = 0;
  }
  int v26 = *(unsigned __int16 *)(a1 + 1712);
  if (*(_WORD *)(a1 + 1712)) {
    goto LABEL_22;
  }
  if ((unsigned __int16)Utf8_Utf8NbrOfSymbols(a3) - 3 > 0xFFFFFFFD)
  {
    int v26 = *(unsigned __int16 *)(a1 + 1712);
LABEL_22:
    if (v26 != 2 && (unsigned __int16)cstdlib_strlen(a3) > (unsigned __int16)v25)
    {
      int v27 = v25;
      do
        v27 += hlp_tolower_char((unsigned __int8 *)&a3[(unsigned __int16)v27]);
      while ((unsigned __int16)cstdlib_strlen(a3) > (unsigned __int16)v27);
    }
    goto LABEL_26;
  }
  hlp_ConvertToCanonicalWordUtf(a1, a2, a1, *(void *)(a1 + 664), a3, a4);
LABEL_26:
  size_t v28 = cstdlib_strlen(&a3[(unsigned __int16)v25]);
  cstdlib_memmove(a3, &a3[(unsigned __int16)v25], v28 + 1);
  *a8 = 0;
  uint64_t v16 = fe_dctlkp_LookupAddonDct(a1, a2, a5, a3, a7, a8, &v35, 0);
  if ((v16 & 0x80000000) == 0) {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 4, 0, (uint64_t)"Leaving fe_dctlkp_LookupMultiword", v29, v30, v31, v34);
  }
  return v16;
}

BOOL fe_dctlkp_IsPunctUtf(uint64_t a1, int a2, const char *a3)
{
  if ((safeh_HandleCheck(a1, a2, 62335, 4032) & 0x80000000) != 0) {
    return 0;
  }

  return loc_fe_dctlkp_IsPunctUtf(a1, a3);
}

unsigned int *fe_GetDct(unsigned int *a1, int a2, char *__s, _WORD *a4)
{
  if (!a1) {
    return 0;
  }
  int v7 = (unsigned __int16)*a4;
  if (v7 == 2)
  {
    uint64_t v16 = a1 + 82;
    uint64_t v15 = __s;
LABEL_13:
    *a4 = 0;
    goto LABEL_14;
  }
  if (v7 == 1)
  {
    uint64_t v8 = *(void *)(*(void *)a1 + 8);
    int v9 = cstdlib_strlen(__s);
    uint64_t v10 = (char *)heap_Alloc(v8, (v9 + 2));
    if (!v10)
    {
LABEL_24:
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v11, v12, v13, v14, v38);
      return 0;
    }
    uint64_t v15 = v10;
    cstdlib_strcpy(v10, __s);
    cstdlib_strcat(v15, "C");
    uint64_t v16 = a1 + 22;
    int v7 = (unsigned __int16)*a4;
  }
  else
  {
    uint64_t v16 = a1 + 2;
    uint64_t v15 = __s;
  }
  if ((v7 - 1) < 2 || v7 == 0xFFFF) {
    goto LABEL_13;
  }
LABEL_14:
  int v18 = hlp_SearchDctName((uint64_t)a1, v15, "");
  if ((v18 & 0x80000000) == 0)
  {
    *((void *)v16 + 3) = *(void *)(*((void *)a1 + 75) + 8 * (unsigned __int16)v18);
    return v16;
  }
  uint64_t v19 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *((void *)a1 + 78), 8 * *((unsigned __int16 *)a1 + 328) + 16);
  if (!v19) {
    goto LABEL_24;
  }
  *((void *)a1 + 78) = v19;
  uint64_t v20 = *((unsigned __int16 *)a1 + 328);
  *(void *)(v19 + 8 * v20) = 0;
  *(void *)(*((void *)a1 + 78) + 8 * v20 + 8) = 0;
  if ((brk_DataOpen(*(void *)(*(void *)a1 + 24)) & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v21 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *((void *)a1 + 75), 8 * *((unsigned __int16 *)a1 + 328) + 16);
  if (!v21) {
    goto LABEL_24;
  }
  *((void *)a1 + 75) = v21;
  uint64_t v22 = *((unsigned __int16 *)a1 + 328);
  *(void *)(v21 + 8 * v22) = 0;
  *(void *)(*((void *)a1 + 75) + 8 * v22 + 8) = 0;
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 144);
  if (!v23) {
    goto LABEL_24;
  }
  uint64_t v24 = *((unsigned __int16 *)a1 + 328);
  *(void *)(*((void *)a1 + 75) + 8 * v24) = v23;
  *((void *)v16 + 3) = *(void *)(*((void *)a1 + 75) + 8 * v24);
  int inited = init_DctRom((uint64_t)(v16 + 2), __s, *v16, *(void *)(*((void *)a1 + 78) + 8 * v24));
  if (inited < 0)
  {
    if ((inited & 0x1FFF) == 0x14)
    {
      heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*((void *)a1 + 75) + 8 * *((unsigned __int16 *)a1 + 328)));
      uint64_t v37 = *((unsigned __int16 *)a1 + 328);
      *(void *)(*((void *)a1 + 75) + 8 * v37) = 0;
      brk_DataClose(*(void *)(*(void *)a1 + 24), *(void *)(*((void *)a1 + 78) + 8 * v37));
      *(void *)(*((void *)a1 + 78) + 8 * *((unsigned __int16 *)a1 + 328)) = 0;
    }
  }
  else
  {
    uint64_t v26 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *((void *)a1 + 74), 8 * *((unsigned __int16 *)a1 + 328) + 16);
    if (v26
      && (*((void *)a1 + 74) = v26,
          uint64_t v31 = *((unsigned __int16 *)a1 + 328),
          *(void *)(v26 + 8 * v31) = 0,
          *(void *)(*((void *)a1 + 74) + 8 * v31 + 8) = 0,
          uint64_t v32 = *(void *)(*(void *)a1 + 8),
          int v33 = cstdlib_strlen(v15),
          (uint64_t v34 = heap_Alloc(v32, (v33 + 1))) != 0))
    {
      uint64_t v35 = *((unsigned __int16 *)a1 + 328);
      *(void *)(*((void *)a1 + 74) + 8 * v35) = v34;
      cstdlib_strcpy(*(char **)(*((void *)a1 + 74) + 8 * v35), v15);
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v27, v28, v29, v30, v38);
    }
  }
  return v16;
}

uint64_t hlp_SearchDctName(uint64_t a1, const char *a2, char *__s)
{
  unsigned __int16 v6 = cstdlib_strlen(__s);
  if (*(_WORD *)(a1 + 656))
  {
    unint64_t v7 = 0;
    size_t v8 = v6;
    do
    {
      int v9 = *(const char **)(*(void *)(a1 + 592) + 8 * v7);
      if (v8)
      {
        if (!cstdlib_strncmp(v9, __s, v8))
        {
          uint64_t v10 = (unsigned char *)(*(void *)(*(void *)(a1 + 592) + 8 * v7) + v8);
          if (*v10 == 95)
          {
            uint64_t v11 = v10 + 1;
            size_t v12 = cstdlib_strlen(a2);
            if (!cstdlib_strncmp(v11, a2, v12)) {
              return (__int16)v7;
            }
          }
        }
      }
      else if (!cstdlib_strcmp(v9, a2))
      {
        return (__int16)v7;
      }
      ++v7;
    }
    while (v7 < *(unsigned __int16 *)(a1 + 656));
  }
  LOWORD(v7) = -1;
  return (__int16)v7;
}

size_t lowercase(const char *a1, uint64_t a2)
{
  size_t result = cstdlib_strlen(a1);
  uint64_t v5 = 0;
  if (result)
  {
    int v6 = 0;
    do
    {
      int v7 = a1[v5];
      if ((v7 - 65) < 0x1A) {
        LOBYTE(v7) = v7 + 32;
      }
      *(unsigned char *)(a2 + v5) = v7;
      uint64_t v5 = (unsigned __int16)++v6;
      size_t result = cstdlib_strlen(a1);
    }
    while (result > (unsigned __int16)v6);
  }
  *(unsigned char *)(a2 + v5) = 0;
  return result;
}

uint64_t fe_dctlkp_LoadAddonDct(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, const char *a7)
{
  *(_WORD *)&__c[1] = -1;
  uint64_t v7 = 2306875402;
  if (!a1) {
    return 2306875400;
  }
  *(void *)&__c[3] = 0;
  uint64_t v15 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 576), 8 * *(unsigned __int16 *)(a1 + 568) + 8);
  if (!v15) {
    goto LABEL_6;
  }
  *(void *)(a1 + 576) = v15;
  uint64_t v20 = heap_Alloc(*(void *)(*(void *)a1 + 8), 640);
  uint64_t v21 = *(unsigned __int16 *)(a1 + 568);
  *(void *)(*(void *)(a1 + 576) + 8 * v21) = v20;
  uint64_t v22 = *(void *)(*(void *)(a1 + 576) + 8 * v21);
  if (!v22) {
    goto LABEL_6;
  }
  if (a7)
  {
    uint64_t v23 = *(void *)(*(void *)a1 + 8);
    int v24 = cstdlib_strlen(a7);
    uint64_t v25 = heap_Alloc(v23, (v24 + 1));
    uint64_t v26 = *(void *)(a1 + 576);
    uint64_t v27 = *(unsigned __int16 *)(a1 + 568);
    *(void *)(*(void *)(v26 + 8 * v27) + 632) = v25;
    uint64_t v28 = *(char **)(*(void *)(v26 + 8 * v27) + 632);
    if (!v28)
    {
LABEL_6:
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DCTLKP", 41000, 0, v16, v17, v18, v19, v52);
      return v7;
    }
  }
  else
  {
    uint64_t v28 = *(char **)(v22 + 632);
  }
  cstdlib_strcpy(v28, a7);
  uint64_t v29 = *(void *)(a1 + 576);
  uint64_t v30 = *(unsigned __int16 *)(a1 + 568);
  *(void *)(*(void *)(v29 + 8 * v30) + 624) = a5;
  uint64_t v31 = *(void *)(v29 + 8 * v30);
  *(_WORD *)(v31 + 72) = *(_WORD *)(a1 + 570);
  *(void *)(v31 + 56) = a3;
  uint64_t v32 = *(void *)(v29 + 8 * v30);
  *(_DWORD *)(v32 + 64) = a4;
  uint64_t v33 = open_DctRom((uint64_t *)(v32 + 8), 0, (_DWORD *)v32);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  __c[0] = 0;
  uint64_t v34 = *(void *)(a1 + 576);
  uint64_t v35 = *(unsigned __int16 *)(a1 + 568);
  *(void *)(*(void *)(v34 + 8 * v35) + 48) = *(void *)(a1 + 56);
  loc_fe_dctlkp_LookupUtf(a1, a2, "addoncfg", "lang", &__c[3], &__c[1], __c, *(unsigned int **)(v34 + 8 * v35));
  if (*(_WORD *)&__c[1])
  {
    uint64_t v36 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v36) {
      *uint64_t v36 = 0;
    }
    cstdlib_strcpy((char *)(*(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)) + 80), **(const char ***)&__c[3]);
  }
  *(_WORD *)&__c[1] = -1;
  loc_fe_dctlkp_LookupUtf(a1, a2, "addoncfg", "cfg", &__c[3], &__c[1], __c, *(unsigned int **)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)));
  if (*(_WORD *)&__c[1])
  {
    uint64_t v37 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v37) {
      *uint64_t v37 = 0;
    }
    cstdlib_strcpy((char *)(*(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)) + 84), **(const char ***)&__c[3]);
  }
  *(_WORD *)&__c[1] = -1;
  loc_fe_dctlkp_LookupUtf(a1, a2, "addoncfg", "codecomp", &__c[3], &__c[1], __c, *(unsigned int **)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)));
  if (*(_WORD *)&__c[1])
  {
    unsigned int v38 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v38) {
      *unsigned int v38 = 0;
    }
    char v39 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    uint64_t v40 = *(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568));
    *(unsigned char *)(v40 + 104) = v39;
  }
  else
  {
    uint64_t v40 = *(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568));
  }
  *(_WORD *)&__c[1] = -1;
  loc_fe_dctlkp_LookupUtf(a1, a2, "addoncfg", "datacomp", &__c[3], &__c[1], __c, (unsigned int *)v40);
  if (*(_WORD *)&__c[1])
  {
    uint64_t v41 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v41) {
      *uint64_t v41 = 0;
    }
    char v42 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    uint64_t v43 = *(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568));
    *(unsigned char *)(v43 + 105) = v42;
  }
  else
  {
    uint64_t v43 = *(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568));
  }
  *(_WORD *)&__c[1] = -1;
  loc_fe_dctlkp_LookupUtf(a1, a2, "addoncfg", "g2pdcts", &__c[3], &__c[1], __c, (unsigned int *)v43);
  if (*(_WORD *)&__c[1])
  {
    uint64_t v44 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v44) {
      *uint64_t v44 = 0;
    }
    unsigned __int16 v45 = (char *)(*(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)) + 106);
    uint64_t v46 = **(const char ***)&__c[3];
  }
  else
  {
    unsigned __int16 v45 = (char *)(*(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)) + 106);
    uint64_t v46 = "";
  }
  cstdlib_strcpy(v45, v46);
  *(_WORD *)&__c[1] = -1;
  loc_fe_dctlkp_LookupUtf(a1, a2, "addoncfg", "tndcts", &__c[3], &__c[1], __c, *(unsigned int **)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)));
  if (*(_WORD *)&__c[1])
  {
    uint64_t v47 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v47) {
      *uint64_t v47 = 0;
    }
    uint64_t v48 = (char *)(*(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)) + 362);
    uint64_t v49 = **(const char ***)&__c[3];
  }
  else
  {
    uint64_t v48 = (char *)(*(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)) + 362);
    uint64_t v49 = "";
  }
  cstdlib_strcpy(v48, v49);
  uint64_t v7 = hlp_EnableAddon(a1, a2, *(void *)(*(void *)(a1 + 576) + 8 * *(unsigned __int16 *)(a1 + 568)));
  uint64_t v50 = *(unsigned __int16 *)(a1 + 568);
  *(void *)a6 = *(void *)(*(void *)(a1 + 576) + 8 * v50);
  *(_DWORD *)(a6 + 8) = 62335;
  *(_WORD *)(a1 + 568) = v50 + 1;
  ++*(_WORD *)(a1 + 570);
  return v7;
}

uint64_t fe_dctlkp_UnLoadAddonDct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2306875402;
  if (!a1) {
    return 2306875400;
  }
  LOWORD(v5) = *(_WORD *)(a1 + 568);
  if (!(_WORD)v5) {
    return 0;
  }
  uint64_t v7 = 0;
  for (uint64_t i = 8; ; i += 8)
  {
    if (*(void *)(*(void *)(a1 + 576) + 8 * v7) != a3) {
      goto LABEL_36;
    }
    uint64_t v9 = *(void *)(a3 + 632);
    if (v9) {
      break;
    }
    __int16 v35 = 0;
    *(void *)char __s = 0;
    uint64_t v11 = a3;
LABEL_9:
    LH_itoa(*(unsigned __int16 *)(v11 + 72), __s, 0xAu);
    if (*(_WORD *)(a1 + 656))
    {
      unint64_t v12 = 0;
      unsigned __int16 v13 = 0;
      int v14 = 0;
      __int16 v15 = 0;
      do
      {
        uint64_t v16 = *(const char **)(*(void *)(a1 + 592) + 8 * v12);
        size_t v17 = cstdlib_strlen(__s);
        if (cstdlib_strncmp(v16, __s, v17))
        {
          if (v14)
          {
            *(void *)(*(void *)(a1 + 592) + 8 * v13) = *(void *)(*(void *)(a1 + 592) + 8 * v12);
            *(void *)(*(void *)(a1 + 600) + 8 * v13) = *(void *)(*(void *)(a1 + 600) + 8 * v12);
            *(void *)(*(void *)(a1 + 624) + 8 * v13) = *(void *)(*(void *)(a1 + 624) + 8 * v12);
          }
          ++v13;
        }
        else
        {
          uint64_t v18 = *(void *)(*(void *)(a1 + 600) + 8 * v12);
          if (v18)
          {
            heap_Free(*(void **)(*(void *)a1 + 8), v18);
            *(void *)(*(void *)(a1 + 600) + 8 * v12) = 0;
          }
          uint64_t v19 = *(void *)(*(void *)(a1 + 592) + 8 * v12);
          if (v19)
          {
            heap_Free(*(void **)(*(void *)a1 + 8), v19);
            *(void *)(*(void *)(a1 + 592) + 8 * v12) = 0;
          }
          uint64_t v20 = *(void *)(*(void *)(a1 + 624) + 8 * v12);
          if (v20)
          {
            brk_DataClose(*(void *)(*(void *)a1 + 24), v20);
            *(void *)(*(void *)(a1 + 624) + 8 * v12) = 0;
          }
          ++v15;
          int v14 = 1;
        }
        ++v12;
        unint64_t v21 = *(unsigned __int16 *)(a1 + 656);
      }
      while (v12 < v21);
      if (v15)
      {
        unsigned __int16 v22 = v21 - v15;
        *(_WORD *)(a1 + 656) = v22;
        uint64_t v23 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 592), 8 * v22 + 16);
        if (!v23) {
          return v3;
        }
        *(void *)(a1 + 592) = v23;
        uint64_t v24 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 600), 8 * *(unsigned __int16 *)(a1 + 656) + 16);
        if (!v24) {
          return v3;
        }
        *(void *)(a1 + 600) = v24;
        uint64_t v25 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 624), 8 * *(unsigned __int16 *)(a1 + 656) + 16);
        if (!v25) {
          return v3;
        }
        *(void *)(a1 + 624) = v25;
        uint64_t v26 = *(unsigned __int16 *)(a1 + 656);
        *(void *)(*(void *)(a1 + 592) + 8 * v26) = 0;
        uint64_t v27 = 8 * v26 + 8;
        *(void *)(*(void *)(a1 + 592) + v27) = 0;
        *(void *)(*(void *)(a1 + 600) + 8 * v26) = 0;
        *(void *)(*(void *)(a1 + 600) + v27) = 0;
        *(void *)(*(void *)(a1 + 624) + 8 * v26) = 0;
        *(void *)(*(void *)(a1 + 624) + v27) = 0;
      }
    }
    uint64_t v28 = *(void *)(*(void *)(a1 + 576) + 8 * v7);
    uint64_t v29 = *(void *)(v28 + 624);
    if (v29)
    {
      uint64_t v30 = *(void *)(v28 + 56);
      if (v30)
      {
        brk_DataUnmap(*(void *)(*(void *)a1 + 24), v29, v30);
        uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 576) + 8 * v7) + 624);
      }
      brk_DataClose(*(void *)(*(void *)a1 + 24), v29);
      uint64_t v28 = *(void *)(*(void *)(a1 + 576) + 8 * v7);
    }
    heap_Free(*(void **)(*(void *)a1 + 8), v28);
    int v5 = *(unsigned __int16 *)(a1 + 568) - 1;
    if (v5 > (int)v7)
    {
      uint64_t v31 = (unsigned __int16)v7;
      uint64_t v32 = i;
      do
      {
        *(void *)(*(void *)(a1 + 576) + 8 * v31++) = *(void *)(*(void *)(a1 + 576) + v32);
        v32 += 8;
      }
      while (v5 > (unsigned __int16)v31);
    }
    *(_WORD *)(a1 + 568) = v5;
LABEL_36:
    if (++v7 >= (unint64_t)(unsigned __int16)v5) {
      return 0;
    }
  }
  heap_Free(*(void **)(*(void *)a1 + 8), v9);
  uint64_t v10 = *(void *)(a1 + 576);
  *(void *)(*(void *)(v10 + 8 * v7) + 632) = 0;
  uint64_t v11 = *(void *)(v10 + 8 * v7);
  __int16 v35 = 0;
  *(void *)char __s = 0;
  if (v11) {
    goto LABEL_9;
  }
  return 2306875400;
}

uint64_t fe_dctlkp_GetCfgParamVal(uint64_t a1, int a2, const char *a3, char *a4, char **a5)
{
  *a5 = a4;
  __int16 __c_1 = -1;
  unsigned __int8 __c = 0;
  uint64_t v9 = 0;
  uint64_t v6 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", a3, &v9, &__c_1, &__c, 0);
  if ((v6 & 0x80000000) == 0 && __c_1)
  {
    uint64_t v7 = cstdlib_strchr(*v9, __c);
    if (v7) {
      *uint64_t v7 = 0;
    }
    *a5 = *v9;
  }
  return v6;
}

uint64_t fe_dctlkp_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2306875393;
  }
  uint64_t result = 0;
  *a2 = &IFeDctLkp;
  return result;
}

uint64_t loc_fe_dctlkp_getTokenDef(uint64_t a1, int a2, uint64_t *a3, char *__src, const char *a5, char **a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  memset(__c, 0, sizeof(__c));
  cstdlib_strcpy(__dst, __src);
  cstdlib_strcat(__dst, a5);
  uint64_t v11 = loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &__c[3], &__c[1], __c, 0);
  if ((v11 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1)
  {
    unint64_t v12 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v12) {
      *unint64_t v12 = 0;
    }
    size_t v13 = cstdlib_strlen(**(const char ***)&__c[3]);
    uint64_t v18 = *a3;
    if (v13 < 0x100)
    {
      uint64_t v19 = *(void **)(v18 + 8);
      int v20 = cstdlib_strlen(**(const char ***)&__c[3]);
      unint64_t v21 = (char *)heap_Calloc(v19, (v20 + 1), 1);
      *a6 = v21;
      if (v21) {
        cstdlib_strcpy(v21, **(const char ***)&__c[3]);
      }
      else {
        return 2306875402;
      }
    }
    else
    {
      uint64_t v11 = 2306875392;
      log_OutPublic(*(void *)(v18 + 32), (uint64_t)"FE_DCTLKP", 41003, 0, v14, v15, v16, v17, v23);
    }
  }
  return v11;
}

char *heap_strdup(uint64_t a1, char *__s)
{
  int v4 = cstdlib_strlen(__s);
  int v5 = (char *)heap_Alloc(a1, (v4 + 1));
  uint64_t v6 = v5;
  if (v5) {
    cstdlib_strcpy(v5, __s);
  }
  return v6;
}

BOOL hlp_getUtf8CanMap(uint64_t a1, int a2, char *__src, uint64_t a4, const char *a5, char *a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned __int16 v17 = 0;
  if (!*(_DWORD *)(a4 + 4 * *(unsigned __int8 *)a5)) {
    return 0;
  }
  uint64_t v18 = 0;
  char v16 = 0;
  *a6 = 0;
  cstdlib_strcpy(__dst, __src);
  cstdlib_strcat(__dst, "_");
  cstdlib_strcat(__dst, (const char *)(a1 + 2738));
  if ((loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &v18, &v17, &v16, 0) & 0x80000000) != 0) {
    return 0;
  }
  if (!v17)
  {
    unsigned __int16 v17 = 0;
    cstdlib_strcpy(__dst, __src);
    if ((loc_fe_dctlkp_LookupUtf(a1, a2, "fecfg", __dst, &v18, &v17, &v16, 0) & 0x80000000) != 0 || !v17) {
      return 0;
    }
  }
  if (*a6) {
    return 1;
  }
  for (unint64_t i = 0; i < v17; ++i)
  {
    unint64_t v12 = *(const char **)(v18 + 8 * i);
    int v13 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v12);
    v12[utf8_determineUTF8CharLength(*(unsigned __int8 *)v12)] = 0;
    size_t v14 = cstdlib_strlen(v12);
    if (!cstdlib_strncmp(v12, a5, v14)) {
      cstdlib_strcpy(a6, &v12[v13 + 1]);
    }
    if (*a6) {
      break;
    }
  }
  return *a6 != 0;
}

uint64_t fe_nn_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2706382849;
  }
  uint64_t result = 0;
  *a2 = &IFeNn;
  return result;
}

uint64_t WordScanner_Con(uint64_t a1, const char *a2)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)a1 = &__WordScanner;
    if (a2)
    {
      *(void *)(a1 + 8) = a2;
      *(_WORD *)(a1 + 16) = cstdlib_strlen(a2);
      return WordScanner_ResetFrom(a1, 0);
    }
    else
    {
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t WordScanner_ResetFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  if (v2 <= a2 || (uint64_t v3 = a2, utf8_BelongsToSet(1u, *(unsigned char **)(a1 + 8), a2, v2)))
  {
LABEL_3:
    return err_GenerateErrorArg();
  }
  unsigned int PreviousUtf8OffsetLimit = (unsigned __int16)utf8_GetPreviousUtf8OffsetLimit(*(void *)(a1 + 8), v3, *(unsigned __int16 *)(a1 + 16));
  unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
  if (PreviousUtf8OffsetLimit < v7)
  {
    if (!utf8_BelongsToSet(1u, *(unsigned char **)(a1 + 8), PreviousUtf8OffsetLimit, v7)) {
      goto LABEL_3;
    }
    unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
  }
  for (*(_WORD *)(a1 + 18) = v3; v7 > v3; unsigned int v7 = *(unsigned __int16 *)(a1 + 16))
  {
    if (utf8_BelongsToSet(1u, *(unsigned char **)(a1 + 8), v3, v7)) {
      break;
    }
    LODWORD(v3) = (unsigned __int16)utf8_GetNextUtf8OffsetLimit(*(unsigned char **)(a1 + 8), v3, *(unsigned __int16 *)(a1 + 16));
  }
  *(_WORD *)(a1 + 20) = v3;
  return 0;
}

uint64_t WordScanner_ConFrom(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)a1 = &__WordScanner;
    if (a2)
    {
      *(void *)(a1 + 8) = a2;
      *(_WORD *)(a1 + 16) = cstdlib_strlen(a2);
      return WordScanner_ResetFrom(a1, a3);
    }
    else
    {
      return err_GenerateErrorArg();
    }
  }
  return result;
}

uint64_t WordScanner_NextWord(uint64_t a1)
{
  uint64_t NextUtf8OffsetLimit = *(unsigned __int16 *)(a1 + 20);
  for (unsigned int i = *(unsigned __int16 *)(a1 + 16); i > NextUtf8OffsetLimit; unsigned int i = *(unsigned __int16 *)(a1 + 16))
  {
    int v4 = utf8_BelongsToSet(1u, *(unsigned char **)(a1 + 8), NextUtf8OffsetLimit, i);
    unsigned int i = *(unsigned __int16 *)(a1 + 16);
    if (!v4) {
      break;
    }
    uint64_t NextUtf8OffsetLimit = (unsigned __int16)utf8_GetNextUtf8OffsetLimit(*(unsigned char **)(a1 + 8), NextUtf8OffsetLimit, *(unsigned __int16 *)(a1 + 16));
  }
  if (NextUtf8OffsetLimit >= i) {
    return 0;
  }
  *(_WORD *)(a1 + 18) = NextUtf8OffsetLimit;
  do
  {
    if (utf8_BelongsToSet(1u, *(unsigned char **)(a1 + 8), NextUtf8OffsetLimit, i)) {
      break;
    }
    LODWORD(NextUtf8OffsetLimit) = (unsigned __int16)utf8_GetNextUtf8OffsetLimit(*(unsigned char **)(a1 + 8), NextUtf8OffsetLimit, *(unsigned __int16 *)(a1 + 16));
    unsigned int i = *(unsigned __int16 *)(a1 + 16);
  }
  while (i > NextUtf8OffsetLimit);
  *(_WORD *)(a1 + 20) = NextUtf8OffsetLimit;
  return 1;
}

uint64_t WordScanner_PrevWord(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 18);
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 16);
  unsigned int v5 = v2;
  while (1)
  {
    unsigned int PreviousUtf8OffsetLimit = (unsigned __int16)utf8_GetPreviousUtf8OffsetLimit(v3, v5, v4);
    unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
    if (PreviousUtf8OffsetLimit >= v7) {
      break;
    }
    int v8 = utf8_BelongsToSet(1u, *(unsigned char **)(a1 + 8), PreviousUtf8OffsetLimit, v7);
    unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
    if (!v8) {
      break;
    }
    LOWORD(v2) = PreviousUtf8OffsetLimit;
    uint64_t v3 = *(void *)(a1 + 8);
    unsigned int v5 = PreviousUtf8OffsetLimit;
    unsigned int v4 = *(unsigned __int16 *)(a1 + 16);
  }
  if (PreviousUtf8OffsetLimit >= v7) {
    return 0;
  }
  *(_WORD *)(a1 + 20) = v2;
  while (!utf8_BelongsToSet(1u, *(unsigned char **)(a1 + 8), PreviousUtf8OffsetLimit, v7))
  {
    LOWORD(v2) = PreviousUtf8OffsetLimit;
    unsigned __int16 v9 = utf8_GetPreviousUtf8OffsetLimit(*(void *)(a1 + 8), PreviousUtf8OffsetLimit, *(unsigned __int16 *)(a1 + 16));
    unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
    if (v7 <= v9) {
      break;
    }
    unsigned int PreviousUtf8OffsetLimit = v9;
  }
  *(_WORD *)(a1 + 18) = v2;
  return 1;
}

uint64_t WordScanner_WordLen(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 20) - *(_WORD *)(a1 + 18));
}

uint64_t PNEW_WordScanner_Con(uint64_t a1, const char *a2, uint64_t *a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = OOCAllocator_Malloc(a1, 24, &v8);
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t result = WordScanner_Con(v6, a2);
    unsigned int v8 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v6);
      *a3 = 0;
      return v8;
    }
    else
    {
      *a3 = v6;
    }
  }
  return result;
}

uint64_t PNEW_WordScanner_ConFrom(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = OOCAllocator_Malloc(a1, 24, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = WordScanner_ConFrom(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetWordScannerClass()
{
  return &__WordScanner;
}

uint64_t ooc_utils_createAllocator(uint64_t a1, _WORD *a2, int a3)
{
  uint64_t v6 = 0;
  if ((InitRsrcFunction(a2, a3, &v6) & 0x80000000) != 0)
  {
    err_GenerateErrorInternalMsg((uint64_t)"InitRsrcFunction");
    return 9;
  }
  else
  {
    uint64_t v4 = *(void *)(v6 + 8);
    *(void *)&long long v7 = heap_Alloc;
    *((void *)&v7 + 1) = heap_Calloc;
    uint64_t v8 = heap_Realloc;
    unsigned __int16 v9 = heap_Free;
    return OOCAllocator_Con(a1, &v7, v4);
  }
}

uint64_t err_GenerateErrorInternalMsg(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  err_ErrorGetCallback(&v4, &v3);
  if (v4) {
    v4(v3, 9, "Internal Error.", a1);
  }
  return 9;
}

uint64_t ooc_utils_createAllocator_UseHeapHandle(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v3 = heap_Alloc;
  *((void *)&v3 + 1) = heap_Calloc;
  uint64_t v4 = heap_Realloc;
  unsigned int v5 = heap_Free;
  return OOCAllocator_Con(a1, &v3, a2);
}

uint64_t Params_Con(void *a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    *a1 = &__Params;
    a1[1] = a2;
    a1[2] = a3;
    a1[3] = 0;
    if ((InitRsrcFunction(a2, a3, a1 + 3) & 0x80000000) != 0)
    {
      return err_GenerateErrorInternalMsg((uint64_t)"InitRsrcFunction");
    }
    else
    {
      uint64_t result = ooc_utils_createAllocator((uint64_t)(a1 + 4), (_WORD *)a1[1], a1[2]);
      if (!result) {
        a1[9] = a4;
      }
    }
  }
  return result;
}

uint64_t Params_Des()
{
  OOCAllocator_Des();

  return Object_Des();
}

uint64_t Params_GetCfgParamValueFloat(uint64_t a1, unsigned char *a2, float *a3, float a4)
{
  unsigned int v10 = 0;
  if (a3)
  {
    *a3 = a4;
    CfgParamValueuint64_t String = Params_GetCfgParamValueString(a1, a2, &v10);
    long long v7 = v10;
    if (!CfgParamValueString && v10)
    {
      if (!*v10)
      {
        CfgParamValueuint64_t String = 0;
LABEL_12:
        heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v7);
        return CfgParamValueString;
      }
      cstdlib_atof((unsigned __int8 *)v10);
      *(float *)&double v8 = v8;
      *a3 = *(float *)&v8;
      long long v7 = v10;
    }
    if (!v7) {
      return CfgParamValueString;
    }
    goto LABEL_12;
  }

  return err_GenerateErrorArg();
}

uint64_t Params_GetCfgParamValueString(uint64_t a1, unsigned char *a2, char **a3)
{
  char v16 = 0;
  unsigned __int16 v17 = 0;
  __int16 v15 = -1;
  *(_DWORD *)&__c[1] = 0;
  __c[0] = 0;
  if (!a2 || !*a2 || !a3)
  {
    uint64_t ErrorArg = err_GenerateErrorArg();
LABEL_17:
    uint64_t v6 = ErrorArg;
    goto LABEL_18;
  }
  *a3 = 0;
  if ((objc_GetObject(*(void *)(*(void *)(a1 + 24) + 48), (uint64_t)"FE_DCTLKP", &v17) & 0x80000000) != 0)
  {
    int v13 = "objc_GetObject";
LABEL_25:
    uint64_t ErrorArg = err_GenerateErrorInternalMsg((uint64_t)v13);
    goto LABEL_17;
  }
  if (!cstdlib_strcmp(*(const char **)(a1 + 72), "fecfg")) {
    goto LABEL_9;
  }
  if (((*(uint64_t (**)(void, void, void, unsigned char *))(v17[1] + 72))(v17[2], v17[3], *(void *)(a1 + 72), &__c[1]) & 0x80000000) != 0)
  {
    int v13 = "pIDctlkp->pfQueryDictExists";
    goto LABEL_25;
  }
  if (!*(_DWORD *)&__c[1])
  {
    uint64_t v6 = 0;
    __int16 v15 = 0;
    goto LABEL_18;
  }
  __int16 v15 = 1;
LABEL_9:
  if (((*(uint64_t (**)(void, void, void, unsigned char *, char ***, __int16 *, unsigned char *))(v17[1] + 96))(v17[2], v17[3], *(void *)(a1 + 72), a2, &v16, &v15, __c) & 0x80000000) != 0)
  {
    int v13 = "pIDctlkp->pfLookupUtf";
    goto LABEL_25;
  }
  uint64_t v6 = 0;
  if (v15 == 1 && v16)
  {
    long long v7 = cstdlib_strchr(*v16, __c[0]);
    if (v7) {
      *long long v7 = 0;
    }
    double v8 = *(void **)(*(void *)(a1 + 24) + 8);
    int v9 = cstdlib_strlen(*v16);
    unsigned int v10 = (char *)heap_Calloc(v8, 1, (v9 + 1));
    *a3 = v10;
    if (v10)
    {
      cstdlib_strcpy(v10, *v16);
      uint64_t v6 = 0;
      goto LABEL_18;
    }
    uint64_t ErrorArg = err_GenerateErrorResource();
    goto LABEL_17;
  }
LABEL_18:
  if (v17) {
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 24) + 48), (uint64_t)"FE_DCTLKP");
  }
  return v6;
}

uint64_t Params_GetCfgParamValueInteger(uint64_t a1, unsigned char *a2, int a3, _DWORD *a4)
{
  int v9 = 0;
  if (a4)
  {
    *a4 = a3;
    CfgParamValueuint64_t String = Params_GetCfgParamValueString(a1, a2, &v9);
    long long v7 = v9;
    if (!CfgParamValueString && v9)
    {
      if (!*v9)
      {
        CfgParamValueuint64_t String = 0;
LABEL_12:
        heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v7);
        return CfgParamValueString;
      }
      *a4 = cstdlib_atoi((unsigned __int8 *)v9);
      long long v7 = v9;
    }
    if (!v7) {
      return CfgParamValueString;
    }
    goto LABEL_12;
  }

  return err_GenerateErrorArg();
}

uint64_t Params_GetCfgParamValueListOfStrings(uint64_t a1, unsigned char *a2, unsigned __int8 a3, uint64_t *a4)
{
  uint64_t v11 = 0;
  if (*a4
    || (CfgParamValueuint64_t String = PNEW_StringList_Con(a1 + 32, *(_WORD **)(a1 + 8), *(void *)(a1 + 16), a4),
        !CfgParamValueString))
  {
    CfgParamValueuint64_t String = Params_GetCfgParamValueString(a1, a2, &v11);
    int v9 = v11;
    if (!CfgParamValueString && v11)
    {
      CfgParamValueuint64_t String = StringList_FromSplitString(*a4, v11, a3);
      int v9 = v11;
    }
    if (v9) {
      heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v9);
    }
  }
  return CfgParamValueString;
}

uint64_t PNEW_Params_Con(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int v12 = 0;
  unsigned int v10 = (void *)OOCAllocator_Malloc(a1, 80, &v12);
  uint64_t result = v12;
  if (!v12)
  {
    uint64_t result = Params_Con(v10, a2, a3, a4);
    unsigned int v12 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v10);
      *a5 = 0;
      return v12;
    }
    else
    {
      *a5 = v10;
    }
  }
  return result;
}

void *GetParamsClass()
{
  return &__Params;
}

uint64_t StringList_Con(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(void *)a1 = &__StringList;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = a3;
    *(_WORD *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(_WORD *)(a1 + 64) = -1;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
    int inited = InitRsrcFunction(a2, a3, (void *)(a1 + 24));
    uint64_t result = 0;
    if (inited < 0)
    {
      return err_GenerateErrorInternalMsg((uint64_t)"InitRsrcFunction");
    }
  }
  return result;
}

uint64_t StringList_Des(void *a1)
{
  StringList_Reset(a1);

  return Object_Des();
}

void *StringList_Reset(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = (uint64_t *)result[4];
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = 0;
      int v5 = 0;
      do
      {
        heap_Free(*(void **)(v1[3] + 8), v3);
        *(void *)(v1[4] + 8 * v4) = 0;
        ++v5;
        unsigned int v2 = (uint64_t *)v1[4];
        uint64_t v4 = (unsigned __int16)v5;
        uint64_t v3 = v2[(unsigned __int16)v5];
      }
      while (v3);
    }
    uint64_t result = heap_Free(*(void **)(v1[3] + 8), (uint64_t)v2);
    v1[4] = 0;
    *((_WORD *)v1 + 20) = 0;
  }
  v1[6] = 0;
  v1[7] = 0;
  *((_WORD *)v1 + 32) = -1;
  return result;
}

uint64_t StringList_Append(uint64_t a1, char *__s)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    int v3 = 0;
    do
      unsigned __int16 v4 = v3;
    while (*(void *)(v2 + 8 * (unsigned __int16)v3++));
  }
  else
  {
    unsigned __int16 v4 = 0;
  }
  return StringList_InsertAt(a1, v4, __s);
}

uint64_t StringList_InsertAt(uint64_t a1, unsigned int a2, char *__s)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    int v7 = 0;
    do
      unsigned __int16 v8 = v7;
    while (*(void *)(v6 + 8 * (unsigned __int16)v7++));
  }
  else
  {
    unsigned __int16 v8 = 0;
  }
  unsigned int v10 = v8;
  if (v8 < a2) {
    return 3;
  }
  unsigned int v12 = *(unsigned __int16 *)(a1 + 40);
  if (v8 + 2 > v12)
  {
    unsigned __int16 v13 = v12 + 20;
    uint64_t v14 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 24) + 8), v6, 8 * (unsigned __int16)(v12 + 20));
    if (!v14) {
      goto LABEL_15;
    }
    uint64_t v15 = v14;
    if (v10 < v13) {
      bzero((void *)(v14 + 8 * v10), 8 * (unsigned __int16)(v12 - v10 + 19) + 8);
    }
    *(void *)(a1 + 32) = v15;
    *(_WORD *)(a1 + 40) = v13;
  }
  size_t v16 = cstdlib_strlen(__s);
  unsigned __int16 v17 = __StringList_hlpDuplicateSubString(a1, (uint64_t)__s, 0, v16);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)(a1 + 32) + 8 * a2;
    cstdlib_memmove((void *)(v19 + 8), (const void *)v19, 8 * (int)(v10 - a2));
    uint64_t result = 0;
    *(void *)(*(void *)(a1 + 32) + 8 * a2) = v18;
    return result;
  }
LABEL_15:

  return err_GenerateErrorResource();
}

uint64_t StringList_GetCountStrings(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    int v2 = 0;
    do
      unsigned __int16 v3 = v2;
    while (*(void *)(v1 + 8 * (unsigned __int16)v2++));
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t StringList_FromSplitString(uint64_t a1, const char *a2, unsigned __int8 a3)
{
  int v5 = a3;
  StringList_Reset((void *)a1);
  size_t v6 = cstdlib_strlen(a2);
  size_t v7 = v6;
  uint64_t v8 = 0;
  unsigned __int16 v9 = 0;
  uint64_t v10 = 1;
  if (v6 + 1 > 1) {
    uint64_t v10 = v6 + 1;
  }
  do
  {
    int v11 = a2[v8];
    if (v11 == v5 || v11 == 0) {
      ++v9;
    }
    ++v8;
  }
  while (v10 != v8);
  int v13 = v9 + 1;
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), 1, (8 * v13));
  *(void *)(a1 + 32) = v14;
  if (v14)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    unsigned __int16 v17 = 0;
    *(_WORD *)(a1 + 40) = v13;
    do
    {
      int v18 = a2[v16];
      if (v18 == v5 || v18 == 0)
      {
        *(void *)(*(void *)(a1 + 32) + 8 * v17) = __StringList_hlpDuplicateSubString(a1, (uint64_t)a2, v15, v16);
        if (!*(void *)(*(void *)(a1 + 32) + 8 * v17)) {
          goto LABEL_20;
        }
        ++v16;
        ++v17;
        uint64_t v15 = v16;
      }
      else
      {
        ++v16;
      }
    }
    while (v16 <= v7);
    return 0;
  }
  else
  {
LABEL_20:
    uint64_t ErrorResource = err_GenerateErrorResource();
    if (ErrorResource) {
      StringList_Reset((void *)a1);
    }
  }
  return ErrorResource;
}

char *__StringList_hlpDuplicateSubString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v6 = a4 - a3;
  size_t v7 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), 1, a4 - a3 + 1);
  uint64_t v8 = v7;
  if (v7) {
    cstdlib_strncpy(v7, (const char *)(a2 + a3), v6);
  }
  return v8;
}

uint64_t StringList_FromSplitStringInUtf8(uint64_t a1, char *__s, int a3, const char *a4, const char *a5, _WORD *a6)
{
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12
    && ((unsigned int v13 = *(unsigned __int16 *)(a1 + 64), v13 >= 7) ? (v14 = v13 == 0xFFFF) : (v14 = 1),
        !v14 || (StringList_Reset((void *)a1), (uint64_t v12 = *(void *)(a1 + 32)) != 0)))
  {
    int v15 = 0;
    do
      LODWORD(v16) = v15;
    while (*(void *)(v12 + 8 * (unsigned __int16)v15++));
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if (a3 == 0xFFFF) {
    LOWORD(a3) = cstdlib_strlen(__s);
  }
  if ((unsigned __int16)v16 < (unsigned __int16)a3)
  {
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(uint64_t **)(*(void *)(a1 + 24) + 8);
    uint64_t v20 = 8 * (unsigned __int16)a3;
    if (v18)
    {
      uint64_t v21 = heap_Realloc(v19, v18, v20 + 8);
      if (!v21) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v21 = heap_Alloc((uint64_t)v19, v20 + 8);
      if (!v21)
      {
LABEL_41:
        return err_GenerateErrorResource();
      }
    }
    int v22 = v16;
    do
      *(void *)(v21 + 8 * (unsigned __int16)v22++) = 0;
    while ((unsigned __int16)v22 <= (unsigned __int16)a3);
    *(void *)(a1 + 32) = v21;
    *(_WORD *)(a1 + 40) = a3 + 1;
    uint64_t v16 = (unsigned __int16)v16;
    while (1)
    {
      *(void *)(*(void *)(a1 + 32) + 8 * v16) = heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), 1, 7);
      if (!*(void *)(*(void *)(a1 + 32) + 8 * v16)) {
        goto LABEL_41;
      }
      if ((unsigned __int16)a3 == ++v16)
      {
        *(_WORD *)(a1 + 64) = 7;
        break;
      }
    }
  }
  LOWORD(v23) = 0;
  if (cstdlib_strlen(__s) && (_WORD)a3)
  {
    uint64_t v31 = a6;
    uint64_t v32 = a4;
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    unsigned __int16 v25 = 0;
    do
    {
      uint64_t v26 = &__s[v24];
      unsigned __int16 v27 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v24], 1);
      if (a5 && !cstdlib_strncmp(v26, " ", v27))
      {
        cstdlib_strcpy(*(char **)(*(void *)(a1 + 32) + 8 * v23), a5);
      }
      else
      {
        cstdlib_strncpy(*(char **)(*(void *)(a1 + 32) + 8 * v23), v26, v27);
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8 * v23) + v27) = 0;
      }
      ++v23;
      v25 += v27;
      if (cstdlib_strlen(__s) <= v25) {
        break;
      }
      uint64_t v24 = v25;
    }
    while (v23 < (unsigned __int16)a3);
    a6 = v31;
    a4 = v32;
  }
  *a6 = v23;
  if ((unsigned __int16)v23 < (unsigned __int16)a3)
  {
    uint64_t v28 = (unsigned __int16)v23;
    if (a4) {
      uint64_t v29 = a4;
    }
    else {
      uint64_t v29 = "";
    }
    do
      cstdlib_strcpy(*(char **)(*(void *)(a1 + 32) + 8 * v28++), v29);
    while ((unsigned __int16)a3 != (unsigned __int16)v28);
  }
  return 0;
}

uint64_t StringList_GetAt(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 0;
  }
  int v3 = 0;
  do
    unsigned __int16 v4 = v3;
  while (*(void *)(v2 + 8 * (unsigned __int16)v3++));
  if (a2 < v4) {
    return *(void *)(v2 + 8 * a2);
  }
  else {
    return 0;
  }
}

uint64_t StringList_GetIndex(uint64_t a1, const char *a2)
{
  if (a2)
  {
    int v3 = **(const char ***)(a1 + 32);
    if (!v3) {
      return (unsigned __int16)-1;
    }
    int v5 = cstdlib_strcmp(v3, a2);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v5)
    {
      unsigned __int16 v7 = 0;
      while (1)
      {
        uint64_t v8 = ++v7;
        unsigned __int16 v9 = *(const char **)(v6 + 8 * v7);
        if (!v9) {
          return (unsigned __int16)-1;
        }
        int v10 = cstdlib_strcmp(v9, a2);
        uint64_t v6 = *(void *)(a1 + 32);
        if (!v10) {
          goto LABEL_11;
        }
      }
    }
    uint64_t v8 = 0;
    unsigned __int16 v7 = 0;
LABEL_11:
    if (*(void *)(v6 + 8 * v8)) {
      return v7;
    }
    else {
      return (unsigned __int16)-1;
    }
  }
  else
  {
    return (unsigned __int16)-1;
  }
}

uint64_t StringList_RemoveAt(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return 3;
  }
  int v5 = 0;
  do
    unsigned __int16 v6 = v5;
  while (*(void *)(v2 + 8 * (unsigned __int16)v5++));
  if (a2 >= v6) {
    return 3;
  }
  heap_Free(*(void **)(*(void *)(a1 + 24) + 8), *(void *)(v2 + 8 * a2));
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = 0;
  uint64_t v8 = *(void *)(a1 + 32) + 8 * a2;
  cstdlib_memmove((void *)v8, (const void *)(v8 + 8), 8 * (int)(~a2 + v6));
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 32) + 8 * (v6 - 1)) = 0;
  return result;
}

uint64_t PNEW_StringList_Con(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v10 = 0;
  uint64_t v8 = OOCAllocator_Malloc(a1, 72, &v10);
  uint64_t result = v10;
  if (!v10)
  {
    uint64_t result = StringList_Con(v8, a2, a3);
    unsigned int v10 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v8);
      *a4 = 0;
      return v10;
    }
    else
    {
      *a4 = v8;
    }
  }
  return result;
}

void *GetStringListClass()
{
  return &__StringList;
}

uint64_t NN_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t result = Object_Con((void *)a1);
  if (!result)
  {
    *(_WORD *)(a1 + 144) = 0;
    *(_WORD *)(a1 + 160) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(_WORD *)(a1 + 128) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)a1 = &__NN;
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = a3;
    *(void *)(a1 + 32) = a4;
    *(void *)(a1 + 40) = a5;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    if ((InitRsrcFunction(a4, a5, (void *)(a1 + 48)) & 0x80000000) != 0
      || (InitRsrcFunction(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), (void *)(a1 + 24)) & 0x80000000) != 0)
    {
      return err_GenerateErrorInternalMsg((uint64_t)"InitRsrcFunction");
    }
    else
    {
      int v11 = *(_WORD **)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      return ooc_utils_createAllocator(a1 + 56, v11, v12);
    }
  }
  return result;
}

uint64_t NN_Des(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void *)(result + 96);
    if (v2)
    {
      OOCAllocator_Free(result + 56, v2);
      v1[12] = 0;
    }
    uint64_t v3 = v1[13];
    if (v3)
    {
      OOC_PlacementDeleteObject((uint64_t)(v1 + 7), v3);
      v1[13] = 0;
    }
    uint64_t v4 = v1[14];
    if (v4)
    {
      OOC_PlacementDeleteObject((uint64_t)(v1 + 7), v4);
      v1[14] = 0;
    }
    uint64_t v5 = v1[15];
    if (v5)
    {
      OOC_PlacementDeleteObject((uint64_t)(v1 + 7), v5);
      v1[15] = 0;
    }
    __NN_CGN_Deinitialize((uint64_t)v1);
    __NN_TN_Deinitialize((uint64_t)v1);
    __NN_CLM_Deinitialize((uint64_t)v1);
    uint64_t v6 = v1[22];
    if (v6)
    {
      OOC_PlacementDeleteObject((uint64_t)(v1 + 7), v6);
      v1[22] = 0;
    }
    OOCAllocator_Des();
    return Object_Des();
  }
  return result;
}

uint64_t __NN_CGN_Deinitialize(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int16 *)(result + 128);
  if (*(_WORD *)(result + 128))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(v1 + 136) + 8 * v3);
      if (v4)
      {
        uint64_t result = OOC_PlacementDeleteObject(v1 + 56, v4);
        *(void *)(*(void *)(v1 + 136) + 8 * v3) = 0;
        unsigned int v2 = *(unsigned __int16 *)(v1 + 128);
      }
      ++v3;
    }
    while (v3 < v2);
    if (v2)
    {
      uint64_t result = OOCAllocator_Free(v1 + 56, *(void *)(v1 + 136));
      *(void *)(v1 + 136) = 0;
    }
  }
  *(_WORD *)(v1 + 128) = 0;
  return result;
}

uint64_t __NN_TN_Deinitialize(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int16 *)(result + 144);
  if (*(_WORD *)(result + 144))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(v1 + 152) + 8 * v3);
      if (v4)
      {
        uint64_t result = OOC_PlacementDeleteObject(v1 + 56, v4);
        *(void *)(*(void *)(v1 + 152) + 8 * v3) = 0;
        unsigned int v2 = *(unsigned __int16 *)(v1 + 144);
      }
      ++v3;
    }
    while (v3 < v2);
    if (v2)
    {
      uint64_t result = OOCAllocator_Free(v1 + 56, *(void *)(v1 + 152));
      *(void *)(v1 + 152) = 0;
    }
  }
  *(_WORD *)(v1 + 144) = 0;
  return result;
}

uint64_t __NN_CLM_Deinitialize(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int16 *)(result + 160);
  if (*(_WORD *)(result + 160))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(v1 + 168) + 8 * v3);
      if (v4)
      {
        uint64_t result = OOC_PlacementDeleteObject(v1 + 56, v4);
        *(void *)(*(void *)(v1 + 168) + 8 * v3) = 0;
        unsigned int v2 = *(unsigned __int16 *)(v1 + 160);
      }
      ++v3;
    }
    while (v3 < v2);
    if (v2)
    {
      uint64_t result = OOCAllocator_Free(v1 + 56, *(void *)(v1 + 168));
      *(void *)(v1 + 168) = 0;
    }
  }
  *(_WORD *)(v1 + 160) = 0;
  return result;
}

uint64_t NN_CGN_Predict(uint64_t a1, int a2, const char *a3, const char *a4, uint64_t a5, void *a6, int *a7)
{
  int v13 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v13 & 0x80000000) == 0 && a1)
  {
    if (!NN_IsInitializedForCurrent(a1)) {
      return 2706382848;
    }
    unsigned int v15 = *(unsigned __int16 *)(a1 + 128);
    if (!*(_WORD *)(a1 + 128)) {
      goto LABEL_10;
    }
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 136) + 8 * v16);
      if (v17)
      {
        if (!cstdlib_strcmp(a3, *(const char **)(v17 + 120)))
        {
          uint64_t result = CGN_Predict(*(void *)(*(void *)(a1 + 136) + 8 * v16), a4, a5, a6, a7);
          if (!result) {
            return result;
          }
          uint64_t result = LH_ERROR_to_VERROR(result);
          if ((result & 0x1FFF) != 7) {
            return result;
          }
LABEL_10:
          uint64_t result = 0;
          *a7 = 0;
          return result;
        }
        unsigned int v15 = *(unsigned __int16 *)(a1 + 128);
      }
      if (++v16 >= (unint64_t)v15) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

BOOL NN_IsInitializedForCurrent(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (__NN_GetIdentificationForCurrent(a1, __s1)) {
    return 0;
  }
  unint64_t v3 = *(const char **)(a1 + 96);
  return v3 && cstdlib_strcmp(__s1, v3) == 0;
}

BOOL NN_CGN_QueryModelExists(uint64_t a1, int a2, const char *a3)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  if (!NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 128);
  if (!*(_WORD *)(a1 + 128)) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 136) + 8 * v6);
    if (v7) {
      break;
    }
LABEL_9:
    if (++v6 >= (unint64_t)v5) {
      return 0;
    }
  }
  if (cstdlib_strcmp(a3, *(const char **)(v7 + 120)))
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 128);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 136) + 8 * v6);

  return Model_QueryExists(v9);
}

uint64_t NN_CLM_Predict(uint64_t a1, int a2, const char *a3, char **a4, char **a5, char **a6, unsigned int *a7, uint64_t a8, uint64_t a9)
{
  int v16 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v16 & 0x80000000) == 0 && a1)
  {
    if (!NN_IsInitializedForCurrent(a1)) {
      return 2706382848;
    }
    unsigned int v18 = *(unsigned __int16 *)(a1 + 160);
    if (!*(_WORD *)(a1 + 160)) {
      goto LABEL_10;
    }
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 168) + 8 * v19);
      if (v20)
      {
        if (!cstdlib_strcmp(a3, *(const char **)(v20 + 120)))
        {
          uint64_t result = CLM_Predict(*(void *)(*(void *)(a1 + 168) + 8 * v19), a4, a5, a6, *a7, a8, a9);
          if (!result) {
            return result;
          }
          uint64_t result = LH_ERROR_to_VERROR(result);
          if ((result & 0x1FFF) != 7) {
            return result;
          }
LABEL_10:
          uint64_t result = 0;
          *a7 = 0;
          return result;
        }
        unsigned int v18 = *(unsigned __int16 *)(a1 + 160);
      }
      if (++v19 >= (unint64_t)v18) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

BOOL NN_CLM_QueryModelExists(uint64_t a1, int a2, const char *a3)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  if (!NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 160);
  if (!*(_WORD *)(a1 + 160)) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 168) + 8 * v6);
    if (v7) {
      break;
    }
LABEL_9:
    if (++v6 >= (unint64_t)v5) {
      return 0;
    }
  }
  if (cstdlib_strcmp(a3, *(const char **)(v7 + 120)))
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 160);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 168) + 8 * v6);

  return Model_QueryExists(v9);
}

uint64_t NN_ClassClose()
{
  return 0;
}

uint64_t NN_ClassOpen(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2706382855;
  }
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *a3 = a1;
    a3[1] = a2;
  }
  return result;
}

uint64_t NN_Diacritizer_Predict(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, void *a5, _DWORD *a6)
{
  uint64_t v11 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v11 & 0x80000000) == 0 && a1)
  {
    if (NN_IsInitializedForCurrent(a1))
    {
      uint64_t v16 = *(void *)(a1 + 120);
      if (v16)
      {
        int v17 = Diacritizer_Predict(v16, a3, a4, a5, a6, v13, v14, v15);
        uint64_t result = v11;
        if (v17)
        {
          return LH_ERROR_to_VERROR(v17);
        }
      }
      else
      {
        return v11;
      }
    }
    else
    {
      return 2706382848;
    }
  }
  return result;
}

BOOL NN_Diacritizer_QueryModelExists(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  if (!NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 120);
  if (!v3) {
    return 0;
  }

  return Model_QueryExists(v3);
}

uint64_t NN_G2POneWord_Predict(uint64_t a1, int a2, char *a3, void *a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v7 & 0x80000000) == 0 && a1)
  {
    if (NN_IsInitializedForCurrent(a1))
    {
      uint64_t v9 = *(void *)(a1 + 112);
      if (v9)
      {
        int v10 = G2POneWord_Predict(v9, a3, a4);
        uint64_t result = v7;
        if (v10)
        {
          return LH_ERROR_to_VERROR(v10);
        }
      }
      else
      {
        return v7;
      }
    }
    else
    {
      return 2706382848;
    }
  }
  return result;
}

BOOL NN_G2POneWord_QueryModelExists(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  if (!NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 112);
  if (!v3) {
    return 0;
  }

  return Model_QueryExists(v3);
}

uint64_t NN_InitializeForCurrent(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    OOCAllocator_Free(a1 + 56, v3);
    *(void *)(a1 + 96) = 0;
  }
  unsigned int v5 = (uint64_t *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 104);
  if (v4)
  {
    OOC_PlacementDeleteObject(a1 + 56, v4);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 112);
  if (v6)
  {
    OOC_PlacementDeleteObject(a1 + 56, v6);
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v7 = *(void *)(a1 + 120);
  if (v7)
  {
    OOC_PlacementDeleteObject(a1 + 56, v7);
    *(void *)(a1 + 120) = 0;
  }
  __NN_CGN_Deinitialize(a1);
  __NN_TN_Deinitialize(a1);
  __NN_CLM_Deinitialize(a1);
  uint64_t v8 = *(void *)(a1 + 176);
  if (v8)
  {
    OOC_PlacementDeleteObject(a1 + 56, v8);
    *(void *)(a1 + 176) = 0;
  }
  size_t IdentificationForCurrent = __NN_GetIdentificationForCurrent(a1, __s);
  unsigned int v13 = IdentificationForCurrent;
  if (!IdentificationForCurrent)
  {
    size_t v9 = cstdlib_strlen(__s);
    int v10 = (char *)OOCAllocator_Malloc(a1 + 56, v9 + 1, &v13);
    *(void *)(a1 + 96) = v10;
    size_t IdentificationForCurrent = v13;
    if (!v13)
    {
      cstdlib_strcpy(v10, __s);
      int v14 = 0;
      uint64_t v11 = PNEW_ToBeSpelled_Con(a1 + 56, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 104));
      if (v11) {
        return v11;
      }
      size_t IdentificationForCurrent = ToBeSpelled_LoadModel(*v5, &v14);
      if (IdentificationForCurrent || !v14)
      {
        OOC_PlacementDeleteObject(a1 + 56, *v5);
        *unsigned int v5 = 0;
        unsigned int v13 = IdentificationForCurrent;
        if (IdentificationForCurrent) {
          return IdentificationForCurrent;
        }
      }
      else
      {
        unsigned int v13 = 0;
      }
      size_t IdentificationForCurrent = __NN_G2POneWord_Initialize(a1);
      unsigned int v13 = IdentificationForCurrent;
      if (!IdentificationForCurrent)
      {
        size_t IdentificationForCurrent = __NN_CGN_Initialize(a1);
        unsigned int v13 = IdentificationForCurrent;
        if (!IdentificationForCurrent)
        {
          size_t IdentificationForCurrent = __NN_TN_Initialize(a1);
          unsigned int v13 = IdentificationForCurrent;
          if (!IdentificationForCurrent)
          {
            size_t IdentificationForCurrent = __NN_CLM_Initialize(a1);
            unsigned int v13 = IdentificationForCurrent;
            if (!IdentificationForCurrent)
            {
              size_t IdentificationForCurrent = __NN_Diacritizer_Initialize(a1);
              unsigned int v13 = IdentificationForCurrent;
              if (!IdentificationForCurrent) {
                return __NN_URL_Initialize(a1);
              }
            }
          }
        }
      }
    }
  }
  return IdentificationForCurrent;
}

size_t __NN_GetIdentificationForCurrent(uint64_t a1, char *a2)
{
  __s2 = 0;
  uint64_t __src = 0;
  uint64_t v6 = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 48) + 40), (uint64_t)"langcode", &__src) & 0x80000000) != 0
    || (paramc_ParamGetStr(*(void *)(*(void *)(a1 + 48) + 40), (uint64_t)"fecfg", &__s2) & 0x80000000) != 0)
  {
    return err_GenerateErrorInternalMsg((uint64_t)"paramc_ParamGetStr");
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 48) + 40), (uint64_t)"voice", &v6) & 0x80000000) != 0) {
    uint64_t v6 = 0;
  }
  cstdlib_strcpy(a2, __src);
  cstdlib_strcat(a2, "_");
  cstdlib_strcat(a2, __s2);
  if (v6)
  {
    cstdlib_strcat(a2, "_");
    cstdlib_strcat(a2, v6);
  }
  size_t result = cstdlib_strlen(a2);
  if (result)
  {
    size_t v5 = 0;
    do
    {
      a2[v5] = cstdlib_tolower(a2[v5]);
      ++v5;
    }
    while (v5 < cstdlib_strlen(a2));
    return 0;
  }
  return result;
}

uint64_t __NN_G2POneWord_Initialize(uint64_t a1)
{
  int v7 = 0;
  uint64_t v1 = a1 + 56;
  unsigned int v2 = (uint64_t *)(a1 + 112);
  uint64_t v3 = PNEW_G2POneWord_Con(a1 + 56, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 112));
  if (!v3)
  {
    uint64_t v4 = G2POneWord_LoadModel(*v2, &v7);
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v7 == 0;
    }
    if (v5)
    {
      uint64_t v3 = v4;
      OOC_PlacementDeleteObject(v1, *v2);
      *unsigned int v2 = 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t __NN_CGN_Initialize(uint64_t a1)
{
  uint64_t v11 = 0;
  int v10 = 0;
  uint64_t v2 = a1 + 56;
  unsigned int ErrorInternalMsg = PNEW_StringList_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), &v11);
  if (!ErrorInternalMsg)
  {
    unsigned int ErrorInternalMsg = CGN_Models(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), v11);
    if (!ErrorInternalMsg)
    {
      unsigned int CountStrings = StringList_GetCountStrings(v11);
      *(_WORD *)(a1 + 128) = CountStrings;
      if (CountStrings)
      {
        *(void *)(a1 + 136) = OOCAllocator_Malloc(v2, 8 * CountStrings, &ErrorInternalMsg);
        if (!ErrorInternalMsg)
        {
          if (*(_WORD *)(a1 + 128))
          {
            for (unint64_t i = 0; i < *(unsigned __int16 *)(a1 + 128); ++i)
            {
              unsigned int ErrorInternalMsg = PNEW_CGN_Con(v2, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(*(void *)(a1 + 136) + 8 * i));
              if (ErrorInternalMsg) {
                break;
              }
              uint64_t v6 = *(void *)(*(void *)(a1 + 136) + 8 * i);
              int v7 = (char *)StringList_GetAt(v11, (unsigned __int16)i);
              unsigned int v8 = CGN_LoadModel(v6, v7, &v10);
              unsigned int ErrorInternalMsg = v8;
              if (v8) {
                BOOL v9 = 1;
              }
              else {
                BOOL v9 = v10 == 0;
              }
              if (v9)
              {
                if (!v8) {
                  unsigned int ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)"not loaded");
                }
                OOC_PlacementDeleteObject(v2, *(void *)(*(void *)(a1 + 136) + 8 * i));
                *(void *)(*(void *)(a1 + 136) + 8 * i) = 0;
                break;
              }
            }
          }
        }
      }
    }
  }
  if (v11) {
    OOC_PlacementDeleteObject(v2, v11);
  }
  return ErrorInternalMsg;
}

uint64_t __NN_TN_Initialize(uint64_t a1)
{
  uint64_t v11 = 0;
  int v10 = 0;
  uint64_t v2 = a1 + 56;
  unsigned int ErrorInternalMsg = PNEW_StringList_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), &v11);
  if (!ErrorInternalMsg)
  {
    unsigned int ErrorInternalMsg = TN_Models(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), v11);
    if (!ErrorInternalMsg)
    {
      unsigned int CountStrings = StringList_GetCountStrings(v11);
      *(_WORD *)(a1 + 144) = CountStrings;
      if (CountStrings)
      {
        *(void *)(a1 + 152) = OOCAllocator_Malloc(v2, 8 * CountStrings, &ErrorInternalMsg);
        if (!ErrorInternalMsg)
        {
          if (*(_WORD *)(a1 + 144))
          {
            for (unint64_t i = 0; i < *(unsigned __int16 *)(a1 + 144); ++i)
            {
              unsigned int ErrorInternalMsg = PNEW_TN_Con(v2, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(*(void *)(a1 + 152) + 8 * i));
              if (ErrorInternalMsg) {
                break;
              }
              uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 8 * i);
              int v7 = (char *)StringList_GetAt(v11, (unsigned __int16)i);
              unsigned int v8 = TN_LoadModel(v6, v7, &v10);
              unsigned int ErrorInternalMsg = v8;
              if (v8) {
                BOOL v9 = 1;
              }
              else {
                BOOL v9 = v10 == 0;
              }
              if (v9)
              {
                if (!v8) {
                  unsigned int ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)"not loaded");
                }
                OOC_PlacementDeleteObject(v2, *(void *)(*(void *)(a1 + 152) + 8 * i));
                *(void *)(*(void *)(a1 + 152) + 8 * i) = 0;
                break;
              }
            }
          }
        }
      }
    }
  }
  if (v11) {
    OOC_PlacementDeleteObject(v2, v11);
  }
  return ErrorInternalMsg;
}

uint64_t __NN_CLM_Initialize(uint64_t a1)
{
  uint64_t v11 = 0;
  int v10 = 0;
  uint64_t v2 = a1 + 56;
  unsigned int ErrorInternalMsg = PNEW_StringList_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), &v11);
  if (!ErrorInternalMsg)
  {
    unsigned int ErrorInternalMsg = CLM_Models(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), v11);
    if (!ErrorInternalMsg)
    {
      unsigned int CountStrings = StringList_GetCountStrings(v11);
      *(_WORD *)(a1 + 160) = CountStrings;
      if (CountStrings)
      {
        *(void *)(a1 + 168) = OOCAllocator_Malloc(v2, 8 * CountStrings, &ErrorInternalMsg);
        if (!ErrorInternalMsg)
        {
          if (*(_WORD *)(a1 + 160))
          {
            for (unint64_t i = 0; i < *(unsigned __int16 *)(a1 + 160); ++i)
            {
              unsigned int ErrorInternalMsg = PNEW_CLM_Con(v2, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(*(void *)(a1 + 168) + 8 * i));
              if (ErrorInternalMsg) {
                break;
              }
              uint64_t v6 = *(void *)(*(void *)(a1 + 168) + 8 * i);
              int v7 = (char *)StringList_GetAt(v11, (unsigned __int16)i);
              unsigned int v8 = CLM_LoadModel(v6, v7, &v10);
              unsigned int ErrorInternalMsg = v8;
              if (v8) {
                BOOL v9 = 1;
              }
              else {
                BOOL v9 = v10 == 0;
              }
              if (v9)
              {
                if (!v8) {
                  unsigned int ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)"not loaded");
                }
                OOC_PlacementDeleteObject(v2, *(void *)(*(void *)(a1 + 168) + 8 * i));
                *(void *)(*(void *)(a1 + 168) + 8 * i) = 0;
                break;
              }
            }
          }
        }
      }
    }
  }
  if (v11) {
    OOC_PlacementDeleteObject(v2, v11);
  }
  return ErrorInternalMsg;
}

uint64_t __NN_Diacritizer_Initialize(uint64_t a1)
{
  int v7 = 0;
  uint64_t v1 = a1 + 56;
  uint64_t v2 = (uint64_t *)(a1 + 120);
  uint64_t v3 = PNEW_Diacritizer_Con(a1 + 56, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 120));
  if (!v3)
  {
    uint64_t v4 = Diacritizer_LoadModel(*v2, &v7);
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v7 == 0;
    }
    if (v5)
    {
      uint64_t v3 = v4;
      OOC_PlacementDeleteObject(v1, *v2);
      *uint64_t v2 = 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t __NN_URL_Initialize(uint64_t a1)
{
  int v7 = 0;
  uint64_t v1 = a1 + 56;
  uint64_t v2 = (uint64_t *)(a1 + 176);
  uint64_t v3 = PNEW_URL_Con(a1 + 56, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (void *)(a1 + 176));
  if (!v3)
  {
    uint64_t v4 = URL_LoadModel(*v2, &v7);
    if (v4) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v7 == 0;
    }
    if (v5)
    {
      uint64_t v3 = v4;
      OOC_PlacementDeleteObject(v1, *v2);
      *uint64_t v2 = 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t NN_ObjClose(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) == 0)
  {
    if (a1)
    {
      uint64_t v6 = 0;
      memset(v5, 0, sizeof(v5));
      int Allocator = ooc_utils_createAllocator((uint64_t)v5, *(_WORD **)(a1 + 32), *(void *)(a1 + 40));
      if (Allocator || (int Allocator = OOC_PlacementDeleteObject((uint64_t)v5, a1)) != 0) {
        LH_ERROR_to_VERROR(Allocator);
      }
    }
  }
  return 0;
}

uint64_t NN_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = 0;
  if (!a5) {
    return 2706382855;
  }
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  int Allocator = ooc_utils_createAllocator((uint64_t)v16, a3, a4);
  if (Allocator) {
    return LH_ERROR_to_VERROR(Allocator);
  }
  int v12 = PNEW_NN_Con((uint64_t)v16, a1, a2, a3, a4, &v18);
  if (v12)
  {
    uint64_t v13 = LH_ERROR_to_VERROR(v12);
  }
  else
  {
    uint64_t v14 = v18;
    *(void *)a5 = v18;
    *(_DWORD *)(a5 + 8) = 1067;
    uint64_t v13 = NN_ObjReopen(v14, *(void *)(a5 + 8));
  }
  uint64_t v11 = v13;
  OOCAllocator_Des();
  return v11;
}

uint64_t PNEW_NN_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 184, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = NN_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

uint64_t NN_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v3 & 0x80000000) == 0 && a1)
  {
    int v5 = NN_InitializeForCurrent(a1);
    if (v5)
    {
      return LH_ERROR_to_VERROR(v5);
    }
    else
    {
      return v3;
    }
  }
  return result;
}

uint64_t NN_TN_Predict(uint64_t a1, int a2, const char *a3, unsigned int a4, char *a5, unsigned int a6, unsigned int a7, void *a8, int *a9)
{
  int v16 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v16 & 0x80000000) == 0 && a1)
  {
    if (!NN_IsInitializedForCurrent(a1)) {
      return 2706382848;
    }
    unsigned int v18 = *(unsigned __int16 *)(a1 + 144);
    if (!*(_WORD *)(a1 + 144)) {
      goto LABEL_10;
    }
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 152) + 8 * v19);
      if (v20)
      {
        if (!cstdlib_strcmp(a3, *(const char **)(v20 + 120)))
        {
          uint64_t result = TN_Predict(*(void *)(*(void *)(a1 + 152) + 8 * v19), a4, a5, a6, a7, a8, a9);
          if (!result) {
            return result;
          }
          uint64_t result = LH_ERROR_to_VERROR(result);
          if ((result & 0x1FFF) != 7) {
            return result;
          }
LABEL_10:
          uint64_t result = 0;
          *a9 = 0;
          return result;
        }
        unsigned int v18 = *(unsigned __int16 *)(a1 + 144);
      }
      if (++v19 >= (unint64_t)v18) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

BOOL NN_TN_QueryModelExists(uint64_t a1, int a2, const char *a3)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  if (!NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 144);
  if (!*(_WORD *)(a1 + 144)) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 152) + 8 * v6);
    if (v7) {
      break;
    }
LABEL_9:
    if (++v6 >= (unint64_t)v5) {
      return 0;
    }
  }
  if (cstdlib_strcmp(a3, *(const char **)(v7 + 120)))
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 144);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 152) + 8 * v6);

  return Model_QueryExists(v9);
}

uint64_t NN_ToBeSpelled_Predict(uint64_t a1, int a2, char *a3, _DWORD *a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v7 & 0x80000000) == 0 && a1)
  {
    if (NN_IsInitializedForCurrent(a1))
    {
      uint64_t v9 = *(void *)(a1 + 104);
      if (v9)
      {
        int v10 = ToBeSpelled_Predict(v9, a3, a4);
        uint64_t result = v7;
        if (v10)
        {
          return LH_ERROR_to_VERROR(v10);
        }
      }
      else
      {
        return v7;
      }
    }
    else
    {
      return 2706382848;
    }
  }
  return result;
}

BOOL NN_ToBeSpelled_QueryModelExists(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  if (!NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if (!v3) {
    return 0;
  }

  return Model_QueryExists(v3);
}

uint64_t NN_URL_Predict(uint64_t a1, int a2, const char *a3, unsigned int *a4, unsigned int *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v13 = safeh_HandleCheck(a1, a2, 1067, 8);
  uint64_t result = 2706382856;
  if ((v13 & 0x80000000) == 0 && a1)
  {
    if (NN_IsInitializedForCurrent(a1))
    {
      uint64_t v15 = *(void *)(a1 + 176);
      if (v15)
      {
        int v16 = URL_Predict(v15, a3, a4, *a5, a6, a7);
        if (v16) {
          uint64_t v13 = LH_ERROR_to_VERROR(v16);
        }
      }
      uint64_t result = v13;
      if ((v13 & 0x1FFF) == 7)
      {
        uint64_t result = 0;
        *a5 = 0;
      }
    }
    else
    {
      return 2706382848;
    }
  }
  return result;
}

BOOL NN_URL_QueryModelExists(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 1067, 8) & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  if (!NN_IsInitializedForCurrent(a1)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 176);
  if (!v3) {
    return 0;
  }

  return Model_QueryExists(v3);
}

void *GetNNClass()
{
  return &__NN;
}

uint64_t _Model_Con(void *a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t result = Object_Con(a1);
  if (!result)
  {
    a1[12] = 0;
    a1[13] = 0;
    a1[14] = -1;
    *a1 = &__Model;
    a1[1] = a2;
    a1[2] = a3;
    a1[4] = a4;
    a1[5] = a5;
    a1[3] = 0;
    a1[6] = 0;
    if ((InitRsrcFunction(a4, a5, a1 + 6) & 0x80000000) == 0)
    {
      uint64_t result = ooc_utils_createAllocator((uint64_t)(a1 + 7), (_WORD *)a1[4], a1[5]);
      if (result) {
        return result;
      }
      if ((InitRsrcFunction((_WORD *)a1[1], a1[2], a1 + 3) & 0x80000000) == 0) {
        return 0;
      }
    }
    return err_GenerateErrorInternalMsg((uint64_t)"InitRsrcFunction");
  }
  return result;
}

uint64_t Model_Des()
{
  OOCAllocator_Des();

  return Object_Des();
}

BOOL Model_QueryExists(BOOL result)
{
  if (result) {
    return *(void *)(result + 104) != 0;
  }
  return result;
}

uint64_t _Model_Load(uint64_t a1, char *a2, _DWORD *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 24))(a1, a3);
  if (result) {
    return result;
  }
  if (!*a3) {
    return 0;
  }
  int v10 = "";
  __s2 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v13 = 0u;
  uint64_t v7 = heap_Calloc(*(void **)(*(void *)(a1 + 48) + 8), 1, 1024);
  *(void *)(a1 + 96) = v7;
  if (!v7)
  {
    err_GenerateErrorResource();
    goto LABEL_14;
  }
  if (cstdlib_strstr(a2, ":"))
  {
    cstdlib_strcpy(*(char **)(a1 + 96), a2);
    goto LABEL_14;
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 48) + 40), (uint64_t)"langcode", &__s2) & 0x80000000) != 0
    || (paramc_ParamGetStr(*(void *)(*(void *)(a1 + 48) + 40), (uint64_t)"fecfg", &v10) & 0x80000000) != 0)
  {
    unsigned int v8 = "paramc_ParamGetStr";
  }
  else
  {
    cstdlib_strcat(__s1, a2);
    cstdlib_strcat(__s1, "_");
    cstdlib_strcat(__s1, __s2);
    cstdlib_strcat(__s1, "_");
    cstdlib_strcat(__s1, v10);
    if ((brokeraux_ComposeBrokerString(*(void *)(a1 + 48), __s1, 1, 1, __s2, 0, 0, *(unsigned char **)(a1 + 96), 0x400uLL) & 0x80000000) == 0)goto LABEL_14; {
    unsigned int v8 = "brokeraux_ComposeBrokerString";
    }
  }
  err_GenerateErrorInternalMsg((uint64_t)v8);
LABEL_14:
  if ((fi_init(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), *(_WORD **)(a1 + 8), *(void *)(a1 + 16), (void *)(a1 + 104), 0, *(void *)(a1 + 96), "FINN", 1, 0) & 0x80000000) != 0)return err_GenerateErrorInternalMsg((uint64_t)"fi_init"); {
  uint64_t v9 = **(_DWORD ***)(a1 + 104);
  }
  *(_DWORD *)(a1 + 112) = v9[14];
  if (v9[13] >= 2u) {
    *(_DWORD *)(a1 + 116) = v9[15];
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

uint64_t _Model_Unload(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  if (result) {
    return result;
  }
  uint64_t v3 = a1[12];
  if (v3)
  {
    heap_Free(*(void **)(a1[6] + 8), v3);
    a1[12] = 0;
  }
  uint64_t v4 = (uint64_t *)a1[13];
  if (!v4) {
    goto LABEL_7;
  }
  if ((fi_deinit(a1[6], a1[3], v4) & 0x80000000) == 0)
  {
    a1[13] = 0;
    a1[14] = -1;
LABEL_7:
    unsigned int v5 = *(uint64_t (**)(uint64_t *))(*a1 + 48);
    return v5(a1);
  }

  return err_GenerateErrorInternalMsg((uint64_t)"fi_deinit");
}

void *GetModelClass()
{
  return &__Model;
}

uint64_t ToBeSpelled_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v6 = _Model_Con((void *)a1, a2, a3, a4, a5);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  }
  else
  {
    *(void *)a1 = &__ToBeSpelled;
    *(_DWORD *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = safeh_GetNullHandle();
    *(void *)(a1 + 144) = v7;
    *(_DWORD *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(_WORD *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(_WORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 188) = 0;
    *(void *)(a1 + 192) = 0;
  }
  return v6;
}

uint64_t ToBeSpelled_Des(uint64_t *a1)
{
  uint64_t result = _Model_Unload(a1);
  if (!result)
  {
    return Model_Des();
  }
  return result;
}

uint64_t ToBeSpelled_LoadModel(uint64_t a1, _DWORD *a2)
{
  return _Model_Load(a1, "nn_tobespelled", a2);
}

uint64_t ToBeSpelled_Predict(uint64_t a1, char *a2, _DWORD *a3)
{
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  unsigned int v56 = 0;
  *a3 = 0;
  unsigned __int16 v59 = 0;
  uint64_t v5 = StringList_FromSplitStringInUtf8(*(void *)(a1 + 192), a2, *(unsigned __int16 *)(a1 + 120), "\v", "<sp>", &v59);
  if (v5) {
    goto LABEL_34;
  }
  log_OutText(*(void *)(*(void *)(a1 + 48) + 32), (uint64_t)"NN_TOBESPELLED", 5, 0, (uint64_t)"char lookup:", v6, v7, v8, 0);
  unsigned int v9 = *(_DWORD *)(a1 + 120);
  if (v9)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 32);
      StringList_GetAt(*(void *)(a1 + 192), (unsigned __int16)v11);
      log_OutText(v12, (uint64_t)"NN_TOBESPELLED", 5, 0, (uint64_t)"[%d] \"%s\"", v13, v14, v15, v10);
      uint64_t v10 = (unsigned __int16)++v11;
      unsigned int v9 = *(_DWORD *)(a1 + 120);
    }
    while (v9 > (unsigned __int16)v11);
  }
  unsigned int v16 = *(_DWORD *)(a1 + 152) * v9;
  long long v17 = (_DWORD *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * v16);
  uint64_t v58 = (uint64_t)v17;
  if (v17)
  {
    int v22 = v17;
    if (v16)
    {
      int v23 = 0;
      do
        v17[(unsigned __int16)v23++] = 0;
      while (v16 > (unsigned __int16)v23);
    }
    if (!v59) {
      goto LABEL_21;
    }
    unsigned int v24 = 0;
    while (1)
    {
      unsigned __int16 v25 = *(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 128) + 56);
      uint64_t v26 = StringList_GetAt(*(void *)(a1 + 192), (unsigned __int16)v24);
      int v27 = v25(*(void *)(a1 + 136), *(void *)(a1 + 144), v26, *(void *)(a1 + 160));
      if ((v27 & 0x1FFF) == 0x14)
      {
        int v27 = (*(uint64_t (**)(void, void, const char *, void))(*(void *)(a1 + 128) + 56))(*(void *)(a1 + 136), *(void *)(a1 + 144), "$MEANW2V$", *(void *)(a1 + 160));
        if ((v27 & 0x1FFF) == 0x14) {
          break;
        }
      }
      if (v27 < 0)
      {
        uint64_t v29 = "__pIWordLkp->pfWord2fVector";
        goto LABEL_19;
      }
      cstdlib_memcpy(&v22[*(_DWORD *)(a1 + 152) * v24++], *(const void **)(a1 + 160), 4 * *(unsigned int *)(a1 + 152));
      if (v24 >= v59) {
        goto LABEL_21;
      }
    }
    uint64_t v29 = "mean vector $MEANW2V$ not found";
LABEL_19:
    uint64_t ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)v29);
  }
  else
  {
    uint64_t ErrorInternalMsg = err_GenerateErrorResource();
  }
  uint64_t v30 = ErrorInternalMsg;
  if (ErrorInternalMsg) {
    goto LABEL_35;
  }
LABEL_21:
  if ((fi_predict(*(uint64_t ****)(a1 + 104), (const void **)&v58, *(unsigned int *)(a1 + 120), &v57, v18, v19, v20, v21) & 0x80000000) != 0)
  {
    uint64_t v37 = "fi_predict";
LABEL_33:
    uint64_t v5 = err_GenerateErrorInternalMsg((uint64_t)v37);
LABEL_34:
    uint64_t v30 = v5;
    goto LABEL_35;
  }
  if ((fi_shape_get_size((int *)(**(void **)(a1 + 104) + 92), (int *)&v56) & 0x80000000) != 0)
  {
    uint64_t v37 = "fi_shape_get_size";
    goto LABEL_33;
  }
  if (v56 != *(unsigned __int16 *)(a1 + 184))
  {
    uint64_t v37 = "Unexpected";
    goto LABEL_33;
  }
  uint64_t v55 = a3;
  unsigned __int16 v34 = 0;
  if (v56)
  {
    unsigned __int16 v35 = 0;
    float v36 = 0.0;
    do
    {
      if (v36 < *(float *)(v57 + 4 * v35))
      {
        float v36 = *(float *)(v57 + 4 * v35);
        unsigned __int16 v34 = v35;
      }
      ++v35;
    }
    while (v56 > v35);
  }
  else
  {
    float v36 = 0.0;
  }
  log_OutText(*(void *)(*(void *)(a1 + 48) + 32), (uint64_t)"NN_TOBESPELLED", 5, 0, (uint64_t)"results (threshold=%1.5lf)", v31, v32, v33, COERCE__INT64(*(float *)(a1 + 188)));
  if (v56)
  {
    uint64_t v39 = 0;
    for (i = 0; i < v56; uint64_t v39 = ++i)
    {
      uint64_t v41 = *(void *)(*(void *)(a1 + 48) + 32);
      StringList_GetAt(*(void *)(a1 + 176), i);
      log_OutText(v41, (uint64_t)"NN_TOBESPELLED", 5, 0, (uint64_t)"[%3d] %1.5lf : %s %s", v42, v43, v44, v39);
    }
  }
  if (*(unsigned __int16 *)(a1 + 168) != v34)
  {
    uint64_t v50 = *(void *)(*(void *)(a1 + 48) + 32);
    uint64_t v51 = StringList_GetAt(*(void *)(a1 + 176), v34);
    StringList_GetAt(*(void *)(a1 + 176), *(unsigned __int16 *)(a1 + 168));
    log_OutText(v50, (uint64_t)"NN_TOBESPELLED", 5, 0, (uint64_t)"blocked selected prediction \"%s\"; not target label \"%s\"",
      v52,
      v53,
      v54,
      v51);
    goto LABEL_46;
  }
  if (v36 < *(float *)(a1 + 188))
  {
    uint64_t v45 = *(void *)(*(void *)(a1 + 48) + 32);
    uint64_t v46 = StringList_GetAt(*(void *)(a1 + 176), v34);
    log_OutText(v45, (uint64_t)"NN_TOBESPELLED", 5, 0, (uint64_t)"blocked selected prediction \"%s\"; value %1.5lf below pattern threshold %1.5lf",
      v47,
      v48,
      v49,
      v46);
LABEL_46:
    uint64_t v30 = 0;
    goto LABEL_35;
  }
  uint64_t v30 = 0;
  *uint64_t v55 = 1;
LABEL_35:
  if (v58) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v58);
  }
  return v30;
}

uint64_t _ToBeSpelled_PostFIDeinit(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 176);
  if (v1)
  {
    OOC_PlacementDeleteObject(a1 + 56, v1);
    *(void *)(a1 + 176) = 0;
    *(_WORD *)(a1 + 184) = 0;
  }
  return 0;
}

uint64_t _ToBeSpelled_PostFIInit(uint64_t a1)
{
  if ((nn_word_lkp_GetInterface(1u, (void *)(a1 + 128)) & 0x80000000) != 0
    || (uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 128) + 16),
        uint64_t NullHandle = safeh_GetNullHandle(),
        (v2(NullHandle) & 0x80000000) != 0))
  {
    unsigned int v9 = "nn_word_lkp_GetInterface";
  }
  else
  {
    if (((*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 128) + 40))(*(void *)(a1 + 136), *(void *)(a1 + 144), a1 + 152) & 0x80000000) == 0)
    {
      unsigned int v4 = *(_DWORD *)(a1 + 152);
      if (v4 != *(_DWORD *)(a1 + 116))
      {
        err_GenerateErrorInternalMsg((uint64_t)"Mismatch between __word2vecVecLength and __inshape_dim2");
        unsigned int v4 = *(_DWORD *)(a1 + 152);
      }
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 112);
      uint64_t v5 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * v4);
      *(void *)(a1 + 160) = v5;
      if (v5)
      {
        uint64_t v6 = *(_WORD **)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 40);
        return PNEW_StringList_Con(a1 + 56, v6, v7, (uint64_t *)(a1 + 192));
      }
      else
      {
        return err_GenerateErrorResource();
      }
    }
    unsigned int v9 = "__pIWordLkp->pfGetVectorLength";
  }

  return err_GenerateErrorInternalMsg((uint64_t)v9);
}

uint64_t _ToBeSpelled_PreFIDeinit(void *a1)
{
  uint64_t v2 = a1[20];
  if (v2)
  {
    heap_Free(*(void **)(a1[6] + 8), v2);
    a1[20] = 0;
  }
  uint64_t v3 = a1[24];
  if (v3)
  {
    OOC_PlacementDeleteObject((uint64_t)(a1 + 7), v3);
    a1[24] = 0;
  }
  if (a1[16])
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[17], a1[18], NullHandle, v5))
    {
      (*(void (**)(void, void))(a1[16] + 24))(a1[17], a1[18]);
      a1[17] = safeh_GetNullHandle();
      a1[18] = v6;
    }
    a1[16] = 0;
  }
  return 0;
}

uint64_t _ToBeSpelled_PreFIInit(uint64_t a1, _DWORD *a2)
{
  __s2 = 0;
  uint64_t v14 = 0;
  *a2 = 0;
  uint64_t v4 = a1 + 56;
  CfgParamValueuint64_t String = PNEW_Params_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)"fecfg", &v14);
  if (CfgParamValueString) {
    goto LABEL_17;
  }
  CfgParamValueuint64_t String = Params_GetCfgParamValueString(v14, "nntobespelled_prediction", &__s2);
  if (CfgParamValueString || __s2 == 0) {
    goto LABEL_17;
  }
  uint64_t v7 = (uint64_t *)(a1 + 176);
  CfgParamValueuint64_t String = Params_GetCfgParamValueListOfStrings(v14, "nntobespelled_labels", 0x3Bu, (uint64_t *)(a1 + 176));
  if (CfgParamValueString) {
    goto LABEL_17;
  }
  if (!*v7)
  {
    *(_WORD *)(a1 + 184) = 0;
LABEL_15:
    int v11 = "Unexpected";
LABEL_16:
    CfgParamValueuint64_t String = err_GenerateErrorInternalMsg((uint64_t)v11);
    goto LABEL_17;
  }
  int CountStrings = StringList_GetCountStrings(*v7);
  *(_WORD *)(a1 + 184) = CountStrings;
  if (!CountStrings) {
    goto LABEL_15;
  }
  unsigned __int16 v9 = 0;
  *a2 = 0;
  while (1)
  {
    if (*(unsigned __int16 *)(a1 + 184) <= v9)
    {
      int v11 = "Prediction does not exists";
      goto LABEL_16;
    }
    uint64_t v10 = (const char *)StringList_GetAt(*v7, v9);
    if (!cstdlib_strcmp(v10, __s2)) {
      break;
    }
    ++v9;
    if (*a2) {
      goto LABEL_24;
    }
  }
  *(_WORD *)(a1 + 168) = v9;
  *a2 = 1;
LABEL_24:
  CfgParamValueuint64_t String = Params_GetCfgParamValueFloat(v14, "nntobespelled_patternThreshold", (float *)(a1 + 188), 0.6);
  if (CfgParamValueString) {
    *a2 = 0;
  }
LABEL_17:
  if (v14) {
    OOC_PlacementDeleteObject(v4, v14);
  }
  if (__s2) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)__s2);
  }
  return CfgParamValueString;
}

uint64_t PNEW_ToBeSpelled_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 200, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = ToBeSpelled_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetToBeSpelledClass()
{
  return &__ToBeSpelled;
}

uint64_t G2POneWord_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t result = _Model_Con((void *)a1, a2, a3, a4, a5);
  if (!result)
  {
    *(void *)a1 = &__G2POneWord;
    *(void *)(a1 + 120) = 0;
    *(_WORD *)(a1 + 128) = 0;
    *(void *)(a1 + 132) = 0xFFFFFFFF00000000;
    *(void *)(a1 + 144) = 0;
  }
  return result;
}

uint64_t G2POneWord_Des(uint64_t *a1)
{
  uint64_t result = _Model_Unload(a1);
  if (!result)
  {
    uint64_t v3 = a1[18];
    if (v3)
    {
      heap_Free(*(void **)(a1[6] + 8), v3);
      a1[18] = 0;
    }
    return Model_Des();
  }
  return result;
}

uint64_t G2POneWord_LoadModel(uint64_t a1, _DWORD *a2)
{
  return _Model_Load(a1, "nn_g2poneword", a2);
}

uint64_t G2POneWord_Predict(uint64_t a1, char *__s, void *a3)
{
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unsigned int v44 = 0;
  if (!__s || !cstdlib_strlen(__s))
  {
    uint64_t v10 = 0;
LABEL_8:
    uint64_t ErrorResource = 0;
    *a3 = "";
    goto LABEL_9;
  }
  unsigned __int16 v49 = 0;
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  uint64_t ErrorResource = StringList_Con((uint64_t)v47, *(_WORD **)(a1 + 32), *(void *)(a1 + 40));
  if (ErrorResource
    || (uint64_t ErrorResource = StringList_FromSplitStringInUtf8((uint64_t)v47, __s, 0xFFFF, 0, 0, &v49),
        ErrorResource))
  {
    StringList_Des(v47);
    uint64_t v10 = 0;
LABEL_6:
    log_OutText(*(void *)(*(void *)(a1 + 48) + 32), (uint64_t)"NN_G2PONEWORD", 0, 0, (uint64_t)"%s : Error extracting features", v7, v8, v9, (uint64_t)__s);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  size_t v13 = cstdlib_strlen(__s);
  unsigned int v14 = (char *)heap_Alloc(v12, v13 + 1);
  uint64_t v10 = v14;
  if (v14
    && (*unsigned int v14 = 0,
        uint64_t v15 = (float *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * *(unsigned int *)(a1 + 132)),
        (uint64_t v46 = (uint64_t)v15) != 0))
  {
    long long v17 = v15;
    unsigned int v18 = *(_DWORD *)(a1 + 132);
    if (v18)
    {
      int v19 = 0;
      LOWORD(v16) = *(_WORD *)(a1 + 136);
      float v16 = (float)LODWORD(v16);
      do
        v15[(unsigned __int16)v19++] = v16;
      while (v18 > (unsigned __int16)v19);
    }
    if (v49)
    {
      unsigned __int16 v20 = 0;
      unsigned __int16 v21 = 0;
      do
      {
        int v22 = (const char *)StringList_GetAt((uint64_t)v47, v21);
        unsigned int Index = StringList_GetIndex(*(void *)(a1 + 120), v22);
        if (Index != 0xFFFF)
        {
          unsigned int v24 = Index;
          cstdlib_strcat(v10, v22);
          float v16 = (float)v24;
          v17[v20++] = (float)v24;
          if (*(_DWORD *)(a1 + 132) - 1 == v20) {
            break;
          }
        }
        ++v21;
      }
      while (v49 > v21);
    }
    else
    {
      unsigned __int16 v20 = 0;
    }
    LOWORD(v16) = *(_WORD *)(a1 + 138);
    v17[v20] = (float)LODWORD(v16);
    StringList_Des(v47);
  }
  else
  {
    uint64_t ErrorResource = err_GenerateErrorResource();
    StringList_Des(v47);
    if (ErrorResource) {
      goto LABEL_6;
    }
  }
  if (!cstdlib_strlen(v10)) {
    goto LABEL_8;
  }
  if ((fi_predict(*(uint64_t ****)(a1 + 104), (const void **)&v46, 1, &v45, v25, v26, v27, v28) & 0x80000000) != 0)
  {
    uint64_t v33 = "nn_g2poneword:fi_predict";
LABEL_41:
    uint64_t ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)v33);
LABEL_42:
    uint64_t ErrorResource = ErrorInternalMsg;
    goto LABEL_9;
  }
  if ((fi_shape_get_size((int *)(**(void **)(a1 + 104) + 92), (int *)&v44) & 0x80000000) != 0)
  {
    uint64_t v33 = "nn_g2poneword:fi_shape_get_size";
    goto LABEL_41;
  }
  if (v44)
  {
    unint64_t v29 = 0;
    uint64_t v30 = 0;
    do
    {
      unsigned int v31 = (int)*(float *)(v45 + 4 * v29);
      if (*(unsigned __int16 *)(a1 + 138) == v31) {
        break;
      }
      uint64_t v32 = (const char *)StringList_GetAt(*(void *)(a1 + 120), v31);
      if (v32) {
        v30 += cstdlib_strlen(v32);
      }
      ++v29;
    }
    while (v29 < v44);
  }
  else
  {
    uint64_t v30 = 0;
  }
  unsigned __int16 v35 = (unsigned char *)heap_Realloc(*(uint64_t **)(*(void *)(a1 + 48) + 8), *(void *)(a1 + 144), v30 + 1);
  *(void *)(a1 + 144) = v35;
  if (!a3)
  {
    uint64_t ErrorInternalMsg = err_GenerateErrorResource();
    goto LABEL_42;
  }
  *unsigned __int16 v35 = 0;
  if (v44)
  {
    for (unint64_t i = 0; i < v44; ++i)
    {
      unsigned int v37 = (int)*(float *)(v45 + 4 * i);
      if (*(unsigned __int16 *)(a1 + 138) == v37) {
        break;
      }
      unsigned int v38 = (const char *)StringList_GetAt(*(void *)(a1 + 120), v37);
      if (v38) {
        cstdlib_strcat(*(char **)(a1 + 144), v38);
      }
    }
  }
  *a3 = *(void *)(a1 + 144);
  int v42 = cstdlib_strcmp(__s, v10);
  uint64_t v43 = *(void *)(*(void *)(a1 + 48) + 32);
  if (v42) {
    log_OutText(v43, (uint64_t)"NN_G2PONEWORD", 4, 0, (uint64_t)"(warning: word was [%s]) [%s]  --> [%s]", v39, v40, v41, (uint64_t)__s);
  }
  else {
    log_OutText(v43, (uint64_t)"NN_G2PONEWORD", 4, 0, (uint64_t)"[%s] --> [%s]", v39, v40, v41, (uint64_t)v10);
  }
  uint64_t ErrorResource = 0;
LABEL_9:
  if (v46)
  {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v46);
    uint64_t v46 = 0;
  }
  if (v10) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v10);
  }
  return ErrorResource;
}

uint64_t _G2POneWord_PostFIDeinit(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1)
  {
    OOC_PlacementDeleteObject(a1 + 56, v1);
    *(void *)(a1 + 120) = 0;
    *(_WORD *)(a1 + 128) = 0;
  }
  return 0;
}

uint64_t _G2POneWord_PostFIInit(_DWORD *a1)
{
  int v1 = a1[29];
  a1[33] = a1[28];
  if (v1 == -1) {
    return 0;
  }
  else {
    return err_GenerateErrorInternalMsg((uint64_t)"nn_g2poneword:only supports 1D inshape");
  }
}

uint64_t _G2POneWord_PreFIDeinit()
{
  return 0;
}

uint64_t _G2POneWord_PreFIInit(uint64_t a1, _DWORD *a2)
{
  uint64_t v13 = 0;
  char __s = 0;
  *a2 = 0;
  uint64_t v4 = a1 + 56;
  CfgParamValueuint64_t String = PNEW_Params_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)"fecfg", &v13);
  if (!CfgParamValueString)
  {
    CfgParamValueuint64_t String = Params_GetCfgParamValueString(v13, "nn_g2poneword_vocab_separator", &__s);
    if (!CfgParamValueString)
    {
      unsigned __int8 v6 = __s && cstdlib_strlen(__s) == 1 ? *__s : 124;
      uint64_t v7 = (uint64_t *)(a1 + 120);
      CfgParamValueuint64_t String = Params_GetCfgParamValueListOfStrings(v13, "nn_g2poneword_vocab", v6, (uint64_t *)(a1 + 120));
      if (!CfgParamValueString)
      {
        if (*v7 && (int CountStrings = StringList_GetCountStrings(*v7), *(_WORD *)(a1 + 128) = CountStrings, CountStrings))
        {
          int Index = StringList_GetIndex(*(void *)(a1 + 120), "<pad>");
          *(_WORD *)(a1 + 136) = Index;
          if (Index == 0xFFFF)
          {
            int v11 = "nn_g2poneword:missing <pad> in vocab";
          }
          else
          {
            int v10 = StringList_GetIndex(*(void *)(a1 + 120), "<EOS>");
            *(_WORD *)(a1 + 138) = v10;
            if (v10 != 0xFFFF)
            {
              CfgParamValueuint64_t String = 0;
              *a2 = 1;
              goto LABEL_17;
            }
            int v11 = "nn_g2poneword:missing <EOS> in vocab";
          }
          CfgParamValueuint64_t String = err_GenerateErrorInternalMsg((uint64_t)v11);
        }
        else
        {
          CfgParamValueuint64_t String = 0;
        }
      }
    }
  }
LABEL_17:
  if (__s)
  {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)__s);
    char __s = 0;
  }
  if (v13) {
    OOC_PlacementDeleteObject(v4, v13);
  }
  return CfgParamValueString;
}

uint64_t PNEW_G2POneWord_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 152, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = _Model_Con((void *)v12, a2, a3, a4, a5);
    if (result)
    {
      unsigned int v14 = result;
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *(void *)uint64_t v12 = &__G2POneWord;
      *(void *)(v12 + 120) = 0;
      *(_WORD *)(v12 + 128) = 0;
      *(void *)(v12 + 132) = 0xFFFFFFFF00000000;
      *(void *)(v12 + 144) = 0;
      *a6 = v12;
    }
  }
  return result;
}

void *GetG2POneWordClass()
{
  return &__G2POneWord;
}

uint64_t CGN_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v6 = _Model_Con((void *)a1, a2, a3, a4, a5);
  if (!v6)
  {
    *(void *)a1 = &__CGN;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = safeh_GetNullHandle();
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = safeh_GetNullHandle();
    *(void *)(a1 + 160) = v8;
    *(void *)(a1 + 208) = 0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_DWORD *)(a1 + 200) = 0;
  }
  return v6;
}

uint64_t CGN_Des(uint64_t *a1)
{
  uint64_t v2 = a1[15];
  if (v2)
  {
    heap_Free(*(void **)(a1[6] + 8), v2);
    a1[15] = 0;
  }
  uint64_t result = _Model_Unload(a1);
  if (!result)
  {
    return Model_Des();
  }
  return result;
}

uint64_t CGN_LoadModel(uint64_t a1, char *__s, _DWORD *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  size_t v7 = cstdlib_strlen(__s);
  uint64_t v8 = (char *)heap_Alloc(v6, v7 + 1);
  *(void *)(a1 + 120) = v8;
  if (v8
    && (cstdlib_strcpy(v8, __s),
        uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8),
        size_t v10 = cstdlib_strlen(__s),
        (int v11 = (char *)heap_Alloc(v9, v10 + 8)) != 0))
  {
    uint64_t v12 = v11;
    cstdlib_strcpy(v11, "nn_cgn_");
    cstdlib_strcat(v12, __s);
    uint64_t v13 = _Model_Load(a1, v12, a3);
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v12);
    return v13;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t CGN_Models(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a3;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t Allocator = ooc_utils_createAllocator((uint64_t)v9, a1, a2);
  if (!Allocator)
  {
    uint64_t v6 = PNEW_Params_Con((uint64_t)v9, a1, a2, (uint64_t)"fecfg", &v11);
    uint64_t v7 = v11;
    if (!v6)
    {
      uint64_t Allocator = Params_GetCfgParamValueListOfStrings(v11, "nn_cgn_models", 0x3Bu, &v12);
      uint64_t v7 = v11;
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t Allocator = v6;
    if (v11) {
LABEL_4:
    }
      OOC_PlacementDeleteObject((uint64_t)v9, v7);
  }
LABEL_5:
  OOCAllocator_Des();
  return Allocator;
}

uint64_t CGN_Predict(uint64_t a1, const char *a2, uint64_t a3, void *a4, int *a5)
{
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v10 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * *(unsigned __int16 *)(a1 + 184) * (unint64_t)*(unsigned __int16 *)(a1 + 186));
  uint64_t v28 = v10;
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t ErrorInternalMsg = PNEW_WordScanner_ConFrom(a1 + 56, a2, a3, &v30);
    if (!ErrorInternalMsg)
    {
      unsigned int v17 = *(unsigned __int16 *)(a1 + 194);
      unsigned int v18 = *(unsigned __int16 *)(a1 + 186);
      uint64_t ErrorInternalMsg = __CGN_CloneWord(a1, v30, (uint64_t *)&v29);
      if (!ErrorInternalMsg)
      {
        int v19 = (char *)(v11 + 4 * v18 * (unint64_t)v17);
        uint64_t ErrorInternalMsg = __CGN_FeaturesCurrent(a1, v29, v19);
        if (!ErrorInternalMsg)
        {
          if (*(_WORD *)(a1 + 194))
          {
            unsigned int v20 = 0;
            do
            {
              v19 += 4 * *(unsigned __int16 *)(a1 + 186);
              if (WordScanner_NextWord(v30))
              {
                uint64_t ErrorResource = __CGN_CloneWord(a1, v30, (uint64_t *)&v29);
                if (ErrorResource) {
                  goto LABEL_16;
                }
                uint64_t ErrorResource = __CGN_FeaturesCurrent(a1, v29, v19);
                if (ErrorResource) {
                  goto LABEL_16;
                }
              }
              else if (*(_WORD *)(a1 + 186))
              {
                memset_pattern16(v19, &unk_2206E2470, 4 * *(unsigned __int16 *)(a1 + 186));
              }
              ++v20;
              unsigned int v22 = *(unsigned __int16 *)(a1 + 194);
            }
            while (v20 < v22);
            uint64_t v11 = v28;
          }
          else
          {
            unsigned int v22 = 0;
          }
          unsigned int v25 = *(unsigned __int16 *)(a1 + 186);
          uint64_t ErrorInternalMsg = WordScanner_ResetFrom(v30, a3);
          if (!ErrorInternalMsg)
          {
            if (*(_WORD *)(a1 + 194))
            {
              int v26 = 0;
              uint64_t v27 = (char *)(v11 + 4 * v22 * (unint64_t)v25);
              while (1)
              {
                v27 -= 4 * *(unsigned __int16 *)(a1 + 186);
                if (WordScanner_PrevWord(v30))
                {
                  uint64_t ErrorResource = __CGN_CloneWord(a1, v30, (uint64_t *)&v29);
                  if (ErrorResource) {
                    goto LABEL_16;
                  }
                  uint64_t ErrorResource = __CGN_FeaturesCurrent(a1, v29, v27);
                  if (ErrorResource) {
                    goto LABEL_16;
                  }
                }
                else if (*(_WORD *)(a1 + 186))
                {
                  memset_pattern16(v27, &unk_2206E2470, 4 * *(unsigned __int16 *)(a1 + 186));
                }
                uint64_t ErrorInternalMsg = 0;
                if (++v26 >= *(unsigned __int16 *)(a1 + 194)) {
                  goto LABEL_17;
                }
              }
            }
            uint64_t ErrorInternalMsg = 0;
          }
        }
      }
    }
  }
  else
  {
    uint64_t ErrorResource = err_GenerateErrorResource();
LABEL_16:
    uint64_t ErrorInternalMsg = ErrorResource;
  }
LABEL_17:
  if (v30) {
    OOC_PlacementDeleteObject(a1 + 56, v30);
  }
  if (v29) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v29);
  }
  if (!ErrorInternalMsg)
  {
    if ((fi_predict(*(uint64_t ****)(a1 + 104), (const void **)&v28, *(unsigned __int16 *)(a1 + 184), a4, v12, v13, v14, v15) & 0x80000000) != 0)
    {
      int v23 = "fi_predict";
    }
    else
    {
      if ((fi_shape_get_size((int *)(**(void **)(a1 + 104) + 92), a5) & 0x80000000) == 0)
      {
        uint64_t ErrorInternalMsg = 0;
        goto LABEL_28;
      }
      int v23 = "fi_shape_get_size";
    }
    uint64_t ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)v23);
  }
LABEL_28:
  if (v28) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v28);
  }
  return ErrorInternalMsg;
}

uint64_t CGN_UnloadModel(uint64_t *a1)
{
  uint64_t v2 = a1[15];
  if (v2)
  {
    heap_Free(*(void **)(a1[6] + 8), v2);
    a1[15] = 0;
  }

  return _Model_Unload(a1);
}

uint64_t _CGN_PostFIDeinit(void *a1)
{
  *(void *)((char *)a1 + 196) = 0;
  *(void *)((char *)a1 + 190) = 0;
  uint64_t v2 = a1[26];
  if (v2) {
    heap_Free(*(void **)(a1[6] + 8), v2);
  }
  a1[26] = 0;
  return 0;
}

uint64_t _CGN_PostFIInit(uint64_t a1)
{
  if ((nn_word_lkp_GetInterface(1u, (void *)(a1 + 128)) & 0x80000000) != 0)
  {
    uint64_t v12 = "nn_word_lkp_GetInterface";
  }
  else
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 128) + 16);
    uint64_t NullHandle = safeh_GetNullHandle();
    if ((v2(NullHandle) & 0x80000000) == 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 128) + 16);
      uint64_t v5 = safeh_GetNullHandle();
      if ((v4(v5) & 0x80000000) == 0)
      {
        int v14 = 0;
        if (((*(uint64_t (**)(void, void, int *))(*(void *)(a1 + 128) + 40))(*(void *)(a1 + 136), *(void *)(a1 + 144), &v14) & 0x80000000) == 0)
        {
          if (v14 != *(unsigned __int16 *)(a1 + 196))
          {
            uint64_t v13 = "word embedding dimension";
            return err_GenerateErrorInternalMsg((uint64_t)v13);
          }
          if (((*(uint64_t (**)(void, void, int *))(*(void *)(a1 + 128) + 40))(*(void *)(a1 + 152), *(void *)(a1 + 160), &v14) & 0x80000000) == 0)
          {
            if (v14 == *(unsigned __int16 *)(a1 + 198))
            {
              uint64_t v6 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * *(unsigned __int16 *)(a1 + 196));
              *(void *)(a1 + 168) = v6;
              if (!v6) {
                return err_GenerateErrorResource();
              }
              uint64_t v7 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * *(unsigned __int16 *)(a1 + 198));
              *(void *)(a1 + 176) = v7;
              if (!v7) {
                return err_GenerateErrorResource();
              }
              unsigned __int16 v8 = (2 * *(_WORD *)(a1 + 194)) | 1;
              *(_WORD *)(a1 + 184) = v8;
              if (*(_DWORD *)(a1 + 112) == v8)
              {
                __int16 v9 = cstdlib_strlen(*(const char **)(a1 + 208));
                *(_WORD *)(a1 + 188) = v9;
                unsigned __int16 v10 = *(_WORD *)(a1 + 196) + (*(_WORD *)(a1 + 192) + *(_WORD *)(a1 + 190)) * *(_WORD *)(a1 + 198);
                *(_WORD *)(a1 + 186) = v10;
                if (*(_DWORD *)(a1 + 200))
                {
                  v10 += v9 + 2;
                  *(_WORD *)(a1 + 186) = v10;
                }
                if (*(_DWORD *)(a1 + 116) == v10) {
                  return 0;
                }
                uint64_t v13 = "inshape dimension 2";
              }
              else
              {
                uint64_t v13 = "inshape dimension 1";
              }
            }
            else
            {
              uint64_t v13 = "char embedding dimension";
            }
            return err_GenerateErrorInternalMsg((uint64_t)v13);
          }
        }
        uint64_t v13 = "__pIWordLkp->pfGetVectorLength";
        return err_GenerateErrorInternalMsg((uint64_t)v13);
      }
    }
    uint64_t v12 = "__pIWordLkp->pfObjOpen";
  }

  return err_GenerateErrorInternalMsg((uint64_t)v12);
}

uint64_t _CGN_PreFIDeinit(void *a1)
{
  if (a1[16])
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[17], a1[18], NullHandle, v3))
    {
      (*(void (**)(void, void))(a1[16] + 24))(a1[17], a1[18]);
      a1[17] = safeh_GetNullHandle();
      a1[18] = v4;
    }
    uint64_t v5 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[19], a1[20], v5, v6))
    {
      (*(void (**)(void, void))(a1[16] + 24))(a1[19], a1[20]);
      a1[19] = safeh_GetNullHandle();
      a1[20] = v7;
    }
    a1[16] = 0;
  }
  uint64_t v8 = a1[21];
  if (v8) {
    heap_Free(*(void **)(a1[6] + 8), v8);
  }
  uint64_t v9 = a1[22];
  a1[21] = 0;
  if (v9) {
    heap_Free(*(void **)(a1[6] + 8), v9);
  }
  *(void *)((char *)a1 + 182) = 0;
  a1[22] = 0;
  return 0;
}

uint64_t _CGN_PreFIInit(uint64_t a1, _DWORD *a2)
{
  unsigned __int16 v10 = 0;
  *(void *)uint64_t v11 = 0;
  __s1 = 0;
  *a2 = 0;
  uint64_t v4 = a1 + 56;
  uint64_t ParamValueUnsignedShort = PNEW_Params_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)"fecfg", v11);
  if (!ParamValueUnsignedShort)
  {
    uint64_t ParamValueUnsignedShort = __CGN_GetParamValueUnsignedShort(a1, *(uint64_t *)v11, "concatenatedLeftChars", 0, (_WORD *)(a1 + 190), (uint64_t *)&v10);
    if (!ParamValueUnsignedShort)
    {
      uint64_t ParamValueUnsignedShort = __CGN_GetParamValueUnsignedShort(a1, *(uint64_t *)v11, "concatenatedRightChars", 3, (_WORD *)(a1 + 192), (uint64_t *)&v10);
      if (!ParamValueUnsignedShort)
      {
        uint64_t ParamValueUnsignedShort = __CGN_GetParamValueUnsignedShort(a1, *(uint64_t *)v11, "wordContextWindow", 5, (_WORD *)(a1 + 194), (uint64_t *)&v10);
        if (!ParamValueUnsignedShort)
        {
          uint64_t ParamValueUnsignedShort = __CGN_GetParamValueUnsignedShort(a1, *(uint64_t *)v11, "wordEmbeddingDimension", 0, (_WORD *)(a1 + 196), (uint64_t *)&v10);
          if (!ParamValueUnsignedShort)
          {
            uint64_t ParamValueUnsignedShort = __CGN_GetParamValueUnsignedShort(a1, *(uint64_t *)v11, "charEmbeddingDimension", 0, (_WORD *)(a1 + 198), (uint64_t *)&v10);
            if (!ParamValueUnsignedShort)
            {
              uint64_t ParamValueUnsignedShort = __CGN_FullParamName(a1, "wordPUNCTFeatureEnabled", (uint64_t *)&v10);
              if (!ParamValueUnsignedShort)
              {
                uint64_t ParamValueUnsignedShort = Params_GetCfgParamValueString(*(uint64_t *)v11, v10, &__s1);
                if (!ParamValueUnsignedShort)
                {
                  *(_DWORD *)(a1 + 200) = 1;
                  if (__s1)
                  {
                    if (!cstdlib_strcmp(__s1, "False")) {
                      *(_DWORD *)(a1 + 200) = 0;
                    }
                    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)__s1);
                  }
                  uint64_t ParamValueUnsignedShort = __CGN_FullParamName(a1, "wordPUNCTLoadList", (uint64_t *)&v10);
                  if (!ParamValueUnsignedShort)
                  {
                    uint64_t ParamValueUnsignedShort = Params_GetCfgParamValueString(*(uint64_t *)v11, v10, &__s1);
                    if (!ParamValueUnsignedShort)
                    {
                      int v6 = __s1;
                      if (__s1)
                      {
LABEL_18:
                        uint64_t ParamValueUnsignedShort = 0;
                        *(void *)(a1 + 208) = v6;
                        *a2 = 1;
                        goto LABEL_19;
                      }
                      uint64_t v7 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 1);
                      __s1 = v7;
                      if (v7)
                      {
                        cstdlib_strcpy(v7, "");
                        int v6 = __s1;
                        goto LABEL_18;
                      }
                      uint64_t ParamValueUnsignedShort = err_GenerateErrorResource();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  if (*(void *)v11) {
    OOC_PlacementDeleteObject(v4, *(uint64_t *)v11);
  }
  if (v10) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v10);
  }
  return ParamValueUnsignedShort;
}

uint64_t __CGN_GetParamValueUnsignedShort(uint64_t a1, uint64_t a2, char *__s, int a4, _WORD *a5, uint64_t *a6)
{
  uint64_t result = __CGN_FullParamName(a1, __s, a6);
  if (!result)
  {
    int v11 = 0;
    uint64_t result = Params_GetCfgParamValueInteger(a2, (unsigned char *)*a6, a4, &v11);
    if (!result) {
      *a5 = v11;
    }
  }
  return result;
}

uint64_t __CGN_FullParamName(uint64_t a1, char *__s, uint64_t *a3)
{
  int v6 = *(uint64_t **)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *a3;
  size_t v8 = cstdlib_strlen(__s);
  size_t v9 = cstdlib_strlen(*(const char **)(a1 + 120));
  unsigned __int16 v10 = (char *)heap_Realloc(v6, v7, v8 + v9 + 9);
  if (v10)
  {
    int v11 = v10;
    cstdlib_strcpy(v10, "nn_cgn_");
    cstdlib_strcat(v11, *(const char **)(a1 + 120));
    cstdlib_strcat(v11, "_");
    cstdlib_strcat(v11, __s);
    *a3 = (uint64_t)v11;
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t PNEW_CGN_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 216, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = CGN_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetCGNClass()
{
  return &__CGN;
}

uint64_t __CGN_CloneWord(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6 = WordScanner_WordLen(a2);
  uint64_t v7 = *(uint64_t **)(*(void *)(a1 + 48) + 8);
  size_t v8 = v6;
  size_t v9 = (char *)heap_Realloc(v7, *a3, v6 + 1);
  if (v9)
  {
    unsigned __int16 v10 = v9;
    cstdlib_strncpy(v9, (const char *)(*(void *)(a2 + 8) + *(unsigned __int16 *)(a2 + 18)), v8);
    cstdlib_strcpy(&v10[v8], "");
    *a3 = (uint64_t)v10;
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t __CGN_FeaturesCurrent(uint64_t a1, const char *a2, char *a3)
{
  unsigned int v6 = (char *)a2;
  do
  {
    if (!__CGN_IsPunct(v6))
    {
      unsigned __int16 v8 = cstdlib_strlen(a2);
      unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a2, v8);
      unsigned __int16 v10 = v8;
      if (__CGN_IsPunct((char *)&a2[PreviousUtf8Offset]))
      {
        unsigned int v11 = PreviousUtf8Offset;
        do
        {
          unsigned __int16 v10 = PreviousUtf8Offset;
          unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a2, v11);
          unsigned int v11 = PreviousUtf8Offset;
        }
        while (__CGN_IsPunct((char *)&a2[PreviousUtf8Offset]));
      }
      int i = 0;
      if (*(_DWORD *)(a1 + 200))
      {
        uint64_t v12 = &a3[4 * *(unsigned __int16 *)(a1 + 186) + -4 * (unsigned __int16)(*(_WORD *)(a1 + 188) + 2)];
        cstdlib_memset(v12, 0, 4 * (unsigned __int16)(*(_WORD *)(a1 + 188) + 2));
        int i = 1;
        if (v6 > a2)
        {
          uint64_t v13 = a2;
          do
          {
            __CGN_InPunctList(a1, v13, (uint64_t)v12, &i);
            unsigned int v14 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v13);
            if (i) {
              *(_DWORD *)&v12[4 * *(unsigned __int16 *)(a1 + 188)] = 1065353216;
            }
            v13 += v14;
          }
          while (v13 < v6);
        }
        uint64_t v15 = v10;
        float v16 = &a2[v10];
        for (int i = 1; cstdlib_strcmp(v16, ""); v16 += v17)
        {
          __CGN_InPunctList(a1, v16, (uint64_t)v12, &i);
          unsigned int v17 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v16);
          if (i) {
            *(_DWORD *)&v12[4 * *(unsigned __int16 *)(a1 + 188) + 4] = 1065353216;
          }
        }
      }
      else
      {
        uint64_t v15 = v10;
      }
      cstdlib_strcpy((char *)&a2[v15], "");
      int v18 = (*(uint64_t (**)(void, void, char *, void))(*(void *)(a1 + 128) + 56))(*(void *)(a1 + 136), *(void *)(a1 + 144), v6, *(void *)(a1 + 168));
      if ((v18 & 0x1FFF) != 0x14)
      {
        unsigned int v22 = 0;
        goto LABEL_31;
      }
      uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
      int v20 = Utf8_Utf8NbrOfSymbols(v6);
      uint64_t v21 = heap_Alloc(v19, (6 * v20) | 1);
      if (!v21)
      {
        uint64_t ErrorResource = err_GenerateErrorResource();
        goto LABEL_41;
      }
      unsigned int v22 = (const char *)v21;
      unsigned __int16 v23 = cstdlib_strlen(v6);
      unsigned int v24 = (char *)v22;
      uint64_t v25 = v23;
      if (v23)
      {
        uint64_t NextUtf8OffsetLimit = 0;
        unsigned int v24 = (char *)v22;
        do
        {
          utf8_ToLower(v6, NextUtf8OffsetLimit, (uint64_t)v24);
          v24 += utf8_determineUTF8CharLength(*v24);
          uint64_t NextUtf8OffsetLimit = (unsigned __int16)utf8_GetNextUtf8OffsetLimit(v6, NextUtf8OffsetLimit, v25);
        }
        while (NextUtf8OffsetLimit < v25);
      }
      cstdlib_strcpy(v24, "");
      int v27 = cstdlib_strcmp(v22, v6);
      uint64_t v28 = *(void *)(a1 + 136);
      unint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)(a1 + 128) + 56);
      uint64_t v30 = *(void *)(a1 + 168);
      uint64_t v31 = *(void *)(a1 + 144);
      if (v27)
      {
        int v18 = v29(v28, v31, v22, v30);
        if ((v18 & 0x1FFF) != 0x14) {
          goto LABEL_31;
        }
        int v18 = (*(uint64_t (**)(void, void, const char *, void))(*(void *)(a1 + 128) + 56))(*(void *)(a1 + 136), *(void *)(a1 + 144), "$MEANW2V$", *(void *)(a1 + 168));
      }
      else
      {
        int v18 = v29(v28, v31, "$MEANW2V$", v30);
      }
      if ((v18 & 0x1FFF) == 0x14)
      {
        uint64_t v33 = "mean vector";
        goto LABEL_39;
      }
LABEL_31:
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t ErrorResource = 0;
        if (!v22)
        {
LABEL_41:
          if (!ErrorResource)
          {
            cstdlib_memcpy(a3, *(const void **)(a1 + 168), 4 * *(unsigned __int16 *)(a1 + 196));
            unsigned __int16 v34 = &a3[4 * *(unsigned __int16 *)(a1 + 196)];
            unsigned __int16 v35 = Utf8_Utf8NbrOfSymbols(v6);
            __int16 v36 = *(_WORD *)(a1 + 190);
            unsigned __int16 v37 = *(_WORD *)(a1 + 192) + v36;
            if (v37 + 1 >= v35)
            {
              if (*(_WORD *)(a1 + 192) + v36)
              {
                int v47 = 0;
                do
                {
                  if (cstdlib_strcmp(v6, ""))
                  {
                    size_t v48 = (unsigned __int16)utf8_determineUTF8CharLength(*v6);
                    cstdlib_strncpy(__dst, v6, v48);
                    cstdlib_strcpy(&__dst[v48], "");
                    uint64_t v41 = __CGN_CharLookup((void *)a1, (uint64_t)__dst);
                    if (v41) {
                      return v41;
                    }
                    v6 += v48;
                    cstdlib_memcpy(v34, *(const void **)(a1 + 176), 4 * *(unsigned __int16 *)(a1 + 198));
                  }
                  else
                  {
                    cstdlib_memset(v34, 0, 4 * *(unsigned __int16 *)(a1 + 198));
                  }
                  v34 += 4 * *(unsigned __int16 *)(a1 + 198);
                  ++v47;
                }
                while ((unsigned __int16)v47 < v37);
              }
            }
            else
            {
              if (*(_WORD *)(a1 + 190))
              {
                int v38 = 0;
                uint64_t v39 = v6;
                do
                {
                  size_t v40 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v39);
                  cstdlib_strncpy(__dst, v39, v40);
                  cstdlib_strcpy(&__dst[v40], "");
                  uint64_t v41 = __CGN_CharLookup((void *)a1, (uint64_t)__dst);
                  if (v41) {
                    return v41;
                  }
                  v39 += v40;
                  cstdlib_memcpy(v34, *(const void **)(a1 + 176), 4 * *(unsigned __int16 *)(a1 + 198));
                  v34 += 4 * *(unsigned __int16 *)(a1 + 198);
                }
                while (++v38 < *(unsigned __int16 *)(a1 + 190));
              }
              unsigned __int16 v42 = cstdlib_strlen(v6);
              if (*(_WORD *)(a1 + 192))
              {
                unsigned int v43 = 0;
                do
                {
                  unsigned __int16 v42 = utf8_GetPreviousUtf8Offset((uint64_t)v6, v42);
                  ++v43;
                }
                while (v43 < *(unsigned __int16 *)(a1 + 192));
                if (*(_WORD *)(a1 + 192))
                {
                  unsigned int v44 = 0;
                  uint64_t v45 = &v6[v42];
                  do
                  {
                    size_t v46 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v45);
                    cstdlib_strncpy(__dst, v45, v46);
                    cstdlib_strcpy(&__dst[v46], "");
                    uint64_t ErrorResource = __CGN_CharLookup((void *)a1, (uint64_t)__dst);
                    if (ErrorResource) {
                      break;
                    }
                    v45 += v46;
                    cstdlib_memcpy(v34, *(const void **)(a1 + 176), 4 * *(unsigned __int16 *)(a1 + 198));
                    v34 += 4 * *(unsigned __int16 *)(a1 + 198);
                    ++v44;
                  }
                  while (v44 < *(unsigned __int16 *)(a1 + 192));
                  return ErrorResource;
                }
              }
            }
            return 0;
          }
          return ErrorResource;
        }
LABEL_40:
        heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v22);
        goto LABEL_41;
      }
      uint64_t v33 = "__pIWordLkp->pfWord2fVector";
LABEL_39:
      uint64_t ErrorResource = err_GenerateErrorInternalMsg((uint64_t)v33);
      if (!v22) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    v6 += utf8_determineUTF8CharLength(*v6);
  }
  while (cstdlib_strcmp(v6, ""));

  return err_GenerateErrorArg();
}

uint64_t __CGN_IsPunct(char *a1)
{
  uint64_t result = cstdlib_strcmp(a1, "");
  if (result)
  {
    if (cstdlib_strstr(a1, "#") == a1)
    {
      return 0;
    }
    else
    {
      unsigned int v3 = cstdlib_strlen(a1);
      return utf8_BelongsToSet(9u, a1, 0, v3) == 0;
    }
  }
  return result;
}

uint64_t __CGN_InPunctList(uint64_t result, const char *a2, uint64_t a3, _DWORD *a4)
{
  if (*(_WORD *)(result + 188))
  {
    uint64_t v7 = result;
    unsigned __int16 v8 = 0;
    unsigned __int16 v9 = 0;
    while (1)
    {
      unsigned __int16 v10 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(v7 + 208) + v9));
      uint64_t result = cstdlib_strncmp(a2, (const char *)(*(void *)(v7 + 208) + v9), v10);
      if (!result) {
        break;
      }
      v9 += v10;
      ++v8;
      if (*(unsigned __int16 *)(v7 + 188) <= v9) {
        return result;
      }
    }
    *(_DWORD *)(a3 + 4 * v8) = 1065353216;
    *a4 = 0;
  }
  return result;
}

uint64_t __CGN_CharLookup(void *a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(void, void, uint64_t, void))(a1[16] + 56))(a1[19], a1[20], a2, a1[22]);
  if ((v3 & 0x1FFF) == 0x14
    && (int v3 = (*(uint64_t (**)(void, void, const char *, void))(a1[16] + 56))(a1[19], a1[20], "$MEANW2V$", a1[22]), (v3 & 0x1FFF) == 0x14))
  {
    uint64_t v4 = "mean vector";
  }
  else
  {
    if ((v3 & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v4 = "__pIWordLkp->pfWord2fVector";
  }

  return err_GenerateErrorInternalMsg((uint64_t)v4);
}

uint64_t TN_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v6 = _Model_Con((void *)a1, a2, a3, a4, a5);
  if (!v6)
  {
    *(void *)a1 = &__TN;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = safeh_GetNullHandle();
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(_WORD *)(a1 + 168) = 0;
  }
  return v6;
}

uint64_t TN_Des(uint64_t *a1)
{
  uint64_t v2 = a1[15];
  if (v2)
  {
    heap_Free(*(void **)(a1[6] + 8), v2);
    a1[15] = 0;
  }
  uint64_t result = _Model_Unload(a1);
  if (!result)
  {
    return Model_Des();
  }
  return result;
}

uint64_t TN_LoadModel(uint64_t a1, char *__s, _DWORD *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  size_t v7 = cstdlib_strlen(__s);
  unsigned __int16 v8 = (char *)heap_Alloc(v6, v7 + 1);
  *(void *)(a1 + 120) = v8;
  if (v8
    && (cstdlib_strcpy(v8, __s),
        uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8),
        size_t v10 = cstdlib_strlen(__s),
        (unsigned int v11 = (char *)heap_Alloc(v9, v10 + 8)) != 0))
  {
    uint64_t v12 = v11;
    cstdlib_strcpy(v11, "nn_tn2_");
    unsigned __int16 v13 = cstdlib_strlen(__s);
    unsigned int v14 = &v12[cstdlib_strlen("nn_tn2_")];
    if (v13)
    {
      uint64_t v15 = 0;
      do
      {
        utf8_ToLower(__s, v15, (uint64_t)v14);
        if (cstdlib_strstr(v14, "_") != v14) {
          v14 += utf8_determineUTF8CharLength(*v14);
        }
        LODWORD(v15) = (unsigned __int16)utf8_GetNextUtf8OffsetLimit(__s, v15, v13);
      }
      while (v15 < v13);
    }
    cstdlib_strcpy(v14, "");
    uint64_t v16 = _Model_Load(a1, v12, a3);
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v12);
    return v16;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t TN_Models(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a3;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t Allocator = ooc_utils_createAllocator((uint64_t)v9, a1, a2);
  if (!Allocator)
  {
    uint64_t v6 = PNEW_Params_Con((uint64_t)v9, a1, a2, (uint64_t)"fecfg", &v11);
    uint64_t v7 = v11;
    if (!v6)
    {
      uint64_t Allocator = Params_GetCfgParamValueListOfStrings(v11, "nn_tn2_models", 0x3Bu, &v12);
      uint64_t v7 = v11;
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t Allocator = v6;
    if (v11) {
LABEL_4:
    }
      OOC_PlacementDeleteObject((uint64_t)v9, v7);
  }
LABEL_5:
  OOCAllocator_Des();
  return Allocator;
}

uint64_t TN_Predict(uint64_t a1, unsigned int a2, char *__s, unsigned int a4, unsigned int a5, void *a6, int *a7)
{
  uint64_t v31 = 0;
  if (*(unsigned __int16 *)(a1 + 166) <= a2 || !__s || a5 > (unsigned __int16)cstdlib_strlen(__s) || a4 >= a5)
  {
    uint64_t ErrorArg = err_GenerateErrorArg();
    goto LABEL_24;
  }
  uint64_t v34 = 0;
  int v32 = 0;
  int v33 = 0;
  unsigned int v14 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * *(unsigned __int16 *)(a1 + 168) * (unint64_t)*(unsigned __int16 *)(a1 + 160));
  uint64_t v31 = (uint64_t)v14;
  if (!v14)
  {
    uint64_t ErrorResource = err_GenerateErrorResource();
    goto LABEL_33;
  }
  uint64_t v15 = v14;
  if ((nn_tn_getCharContextString(*(void *)(a1 + 48), (uint64_t)"NN_TN", __s, a4, a5, &v34, (unsigned __int16 *)&v33 + 1, *(unsigned __int16 *)(a1 + 162), 2, "*", *(_WORD *)(a1 + 168), (unsigned __int16 *)&v33, (_WORD *)&v32 + 1, &v32) & 0x80000000) != 0)
  {
    int v27 = "nn_tn_getCharContextString";
    goto LABEL_32;
  }
  cstdlib_memset(v15, 0, 4 * *(unsigned __int16 *)(a1 + 168) * (unint64_t)*(unsigned __int16 *)(a1 + 160));
  if (!(_WORD)v33)
  {
LABEL_22:
    uint64_t v23 = 0;
    goto LABEL_34;
  }
  unint64_t v20 = 0;
  while (1)
  {
    if (!cstdlib_strcmp(*(const char **)(v34 + 8 * v20), "*"))
    {
      if (*(_WORD *)(a1 + 160)) {
        memset_pattern16(v15, &unk_2206E2470, 4 * *(unsigned __int16 *)(a1 + 160));
      }
      goto LABEL_21;
    }
    int v21 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 128) + 56))(*(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(v34 + 8 * v20), *(void *)(a1 + 152));
    if ((v21 & 0x1FFF) == 0x14)
    {
      int v21 = (*(uint64_t (**)(void, void, const char *, void))(*(void *)(a1 + 128) + 56))(*(void *)(a1 + 136), *(void *)(a1 + 144), "$MEANW2V$", *(void *)(a1 + 152));
      if ((v21 & 0x1FFF) == 0x14) {
        break;
      }
    }
    if (v21 < 0)
    {
      int v27 = "__pIWordLkp->pfWord2fVector";
      goto LABEL_32;
    }
    cstdlib_memcpy(v15, *(const void **)(a1 + 152), 4 * *(unsigned __int16 *)(a1 + 164));
    uint64_t v22 = *(unsigned __int16 *)(a1 + 164);
    *(_DWORD *)&v15[4 * v22 + 4 * a2] = 1065353216;
    if (v20 >= HIWORD(v32) && v20 < (unsigned __int16)v32) {
      *(_DWORD *)&v15[4 * *(unsigned __int16 *)(a1 + 166) + 4 * v22] = 1065353216;
    }
LABEL_21:
    v15 += 4 * *(unsigned __int16 *)(a1 + 160);
    if (++v20 >= (unsigned __int16)v33) {
      goto LABEL_22;
    }
  }
  int v27 = "mean vector";
LABEL_32:
  uint64_t ErrorResource = err_GenerateErrorInternalMsg((uint64_t)v27);
LABEL_33:
  uint64_t v23 = ErrorResource;
LABEL_34:
  uint64_t v28 = v34;
  if (v34)
  {
    if (HIWORD(v33))
    {
      unint64_t v29 = 0;
      do
        heap_Free(*(void **)(*(void *)(a1 + 48) + 8), *(void *)(v34 + 8 * v29++));
      while (v29 < HIWORD(v33));
      uint64_t v28 = v34;
    }
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v28);
  }
  if (!v23)
  {
    if ((fi_predict(*(uint64_t ****)(a1 + 104), (const void **)&v31, *(unsigned __int16 *)(a1 + 168), a6, v16, v17, v18, v19) & 0x80000000) != 0)
    {
      uint64_t v30 = "fi_predict";
    }
    else
    {
      if ((fi_shape_get_size((int *)(**(void **)(a1 + 104) + 92), a7) & 0x80000000) == 0)
      {
        uint64_t v23 = 0;
        goto LABEL_25;
      }
      uint64_t v30 = "fi_shape_get_size";
    }
    uint64_t ErrorArg = err_GenerateErrorInternalMsg((uint64_t)v30);
LABEL_24:
    uint64_t v23 = ErrorArg;
  }
LABEL_25:
  if (v31) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v31);
  }
  return v23;
}

uint64_t TN_UnloadModel(uint64_t *a1)
{
  uint64_t v2 = a1[15];
  if (v2)
  {
    heap_Free(*(void **)(a1[6] + 8), v2);
    a1[15] = 0;
  }

  return _Model_Unload(a1);
}

uint64_t _TN_PostFIDeinit(uint64_t a1)
{
  *(void *)(a1 + 162) = 0;
  return 0;
}

uint64_t _TN_PostFIInit(uint64_t a1)
{
  if ((nn_word_lkp_GetInterface(1u, (void *)(a1 + 128)) & 0x80000000) != 0)
  {
    unsigned __int16 v8 = "nn_word_lkp_GetInterface";
LABEL_11:
    return err_GenerateErrorInternalMsg((uint64_t)v8);
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 128) + 16);
  uint64_t NullHandle = safeh_GetNullHandle();
  if ((v2(NullHandle) & 0x80000000) != 0)
  {
    unsigned __int16 v8 = "__pIWordLkp->pfObjOpen";
    goto LABEL_11;
  }
  int v10 = 0;
  if (((*(uint64_t (**)(void, void, int *))(*(void *)(a1 + 128) + 40))(*(void *)(a1 + 136), *(void *)(a1 + 144), &v10) & 0x80000000) != 0)
  {
    uint64_t v9 = "__pIWordLkp->pfGetVectorLength";
  }
  else
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 164);
    if (v10 == v4)
    {
      uint64_t v5 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * v4);
      *(void *)(a1 + 152) = v5;
      if (!v5) {
        return err_GenerateErrorResource();
      }
      if (*(_DWORD *)(a1 + 112) == *(unsigned __int16 *)(a1 + 168))
      {
        unsigned __int16 v6 = *(_WORD *)(a1 + 164) + *(_WORD *)(a1 + 166) + 1;
        *(_WORD *)(a1 + 160) = v6;
        if (*(_DWORD *)(a1 + 116) == v6) {
          return 0;
        }
        uint64_t v9 = "inshape dimension 2";
      }
      else
      {
        uint64_t v9 = "inshape dimension 1";
      }
    }
    else
    {
      uint64_t v9 = "char embedding dimension";
    }
  }
  return err_GenerateErrorInternalMsg((uint64_t)v9);
}

uint64_t _TN_PreFIDeinit(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(void *)(a1 + 136), *(void *)(a1 + 144), NullHandle, v3))
    {
      (*(void (**)(void, void))(*(void *)(a1 + 128) + 24))(*(void *)(a1 + 136), *(void *)(a1 + 144));
      *(void *)(a1 + 136) = safeh_GetNullHandle();
      *(void *)(a1 + 144) = v4;
    }
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v5);
  }
  *(void *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 0;
  return 0;
}

uint64_t _TN_PreFIInit(uint64_t a1, _DWORD *a2)
{
  unsigned __int16 v8 = 0;
  uint64_t v9 = 0;
  int v7 = 0;
  *a2 = 0;
  uint64_t v4 = a1 + 56;
  uint64_t CfgParamValueInteger = PNEW_Params_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)"fecfg", &v9);
  if (!CfgParamValueInteger)
  {
    uint64_t CfgParamValueInteger = __TN_FullParamName(a1, "charContextWindow", (uint64_t *)&v8);
    if (!CfgParamValueInteger)
    {
      uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v9, v8, 40, &v7);
      if (!CfgParamValueInteger)
      {
        *(_WORD *)(a1 + 162) = v7;
        uint64_t CfgParamValueInteger = __TN_FullParamName(a1, "charEmbeddingDimension", (uint64_t *)&v8);
        if (!CfgParamValueInteger)
        {
          uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v9, v8, 0, &v7);
          if (!CfgParamValueInteger)
          {
            *(_WORD *)(a1 + 164) = v7;
            uint64_t CfgParamValueInteger = __TN_FullParamName(a1, "numPatterns", (uint64_t *)&v8);
            if (!CfgParamValueInteger)
            {
              uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v9, v8, 1, &v7);
              if (!CfgParamValueInteger)
              {
                *(_WORD *)(a1 + 166) = v7;
                uint64_t CfgParamValueInteger = __TN_FullParamName(a1, "max_x_len", (uint64_t *)&v8);
                if (!CfgParamValueInteger)
                {
                  uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v9, v8, 0, &v7);
                  if (!CfgParamValueInteger)
                  {
                    *(_WORD *)(a1 + 168) = v7;
                    *a2 = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v9) {
    OOC_PlacementDeleteObject(v4, v9);
  }
  if (v8) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v8);
  }
  return CfgParamValueInteger;
}

uint64_t __TN_FullParamName(uint64_t a1, char *__s, uint64_t *a3)
{
  unsigned __int16 v6 = *(uint64_t **)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *a3;
  size_t v8 = cstdlib_strlen(__s);
  size_t v9 = cstdlib_strlen(*(const char **)(a1 + 120));
  int v10 = (char *)heap_Realloc(v6, v7, v8 + v9 + 9);
  if (v10)
  {
    uint64_t v11 = v10;
    cstdlib_strcpy(v10, "nn_tn2_");
    cstdlib_strcat(v11, *(const char **)(a1 + 120));
    cstdlib_strcat(v11, "_");
    cstdlib_strcat(v11, __s);
    *a3 = (uint64_t)v11;
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t PNEW_TN_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 176, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = TN_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetTNClass()
{
  return &__TN;
}

uint64_t CLM_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v6 = _Model_Con((void *)a1, a2, a3, a4, a5);
  if (!v6)
  {
    *(void *)a1 = &__CLM;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = safeh_GetNullHandle();
    *(void *)(a1 + 144) = v7;
    *(void *)(a1 + 152) = safeh_GetNullHandle();
    *(void *)(a1 + 160) = v8;
    *(void *)(a1 + 168) = safeh_GetNullHandle();
    *(void *)(a1 + 176) = v9;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(void *)(a1 + 214) = 0;
  }
  return v6;
}

uint64_t CLM_Des(uint64_t *a1)
{
  uint64_t v2 = a1[15];
  if (v2)
  {
    heap_Free(*(void **)(a1[6] + 8), v2);
    a1[15] = 0;
  }
  uint64_t result = _Model_Unload(a1);
  if (!result)
  {
    return Model_Des();
  }
  return result;
}

uint64_t CLM_LoadModel(uint64_t a1, char *__s, _DWORD *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  size_t v7 = cstdlib_strlen(__s);
  uint64_t v8 = (char *)heap_Alloc(v6, v7 + 1);
  *(void *)(a1 + 120) = v8;
  if (v8
    && (cstdlib_strcpy(v8, __s),
        uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8),
        size_t v10 = cstdlib_strlen(__s),
        (uint64_t v11 = (char *)heap_Alloc(v9, v10 + 14)) != 0))
  {
    uint64_t v12 = v11;
    cstdlib_strcpy(v11, "clmnn:nn_clm_");
    cstdlib_strcat(v12, __s);
    uint64_t v13 = _Model_Load(a1, v12, a3);
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v12);
    return v13;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t CLM_Models(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a3;
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t Allocator = ooc_utils_createAllocator((uint64_t)v9, a1, a2);
  if (!Allocator)
  {
    uint64_t v6 = PNEW_Params_Con((uint64_t)v9, a1, a2, (uint64_t)"clmnncfg", &v11);
    uint64_t v7 = v11;
    if (!v6)
    {
      uint64_t Allocator = Params_GetCfgParamValueListOfStrings(v11, "nn_clm_models", 0x3Bu, &v12);
      uint64_t v7 = v11;
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t Allocator = v6;
    if (v11) {
LABEL_4:
    }
      OOC_PlacementDeleteObject((uint64_t)v9, v7);
  }
LABEL_5:
  OOCAllocator_Des();
  return Allocator;
}

uint64_t CLM_Predict(uint64_t a1, char **a2, char **a3, char **a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v14 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 12* *(unsigned __int16 *)(a1 + 220)* (2 * *(unsigned __int16 *)(a1 + 218) + (unsigned __int16)a5));
  uint64_t v40 = (uint64_t)v14;
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v39 = a7;
    uint64_t v16 = (unsigned __int16)a5;
    __int16 v17 = 3 * *(_WORD *)(a1 + 218) * *(_WORD *)(a1 + 220);
    if (v17)
    {
      uint64_t v18 = (unsigned __int16)(3 * *(_WORD *)(a1 + 218) * *(_WORD *)(a1 + 220));
      memset_pattern16(v14, &unk_2206E2470, 4 * v18);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v38 = v18;
    unint64_t v20 = &v15[4 * v18];
    if ((_WORD)a5)
    {
      while (1)
      {
        uint64_t v21 = __CLM_FeaturesLookups(a1, *(void *)(a1 + 136), *(void *)(a1 + 144), *a2, v20);
        if (v21) {
          break;
        }
        uint64_t v22 = &v20[4 * *(unsigned __int16 *)(a1 + 220)];
        uint64_t v21 = __CLM_FeaturesLookups(a1, *(void *)(a1 + 152), *(void *)(a1 + 160), *a3, v22);
        if (v21) {
          break;
        }
        uint64_t v23 = &v22[4 * *(unsigned __int16 *)(a1 + 220)];
        uint64_t v21 = __CLM_FeaturesLookups(a1, *(void *)(a1 + 168), *(void *)(a1 + 176), *a4, v23);
        if (v21) {
          break;
        }
        unint64_t v20 = &v23[4 * *(unsigned __int16 *)(a1 + 220)];
        ++a4;
        ++a3;
        ++a2;
        if (!--v16) {
          goto LABEL_12;
        }
      }
      uint64_t ErrorResource = v21;
      goto LABEL_39;
    }
LABEL_12:
    BOOL v24 = v17 == 0;
    a7 = v39;
    if (!v24) {
      memset_pattern16(v20, &unk_2206E2470, 4 * v38);
    }
  }
  else
  {
    uint64_t ErrorResource = err_GenerateErrorResource();
    if (ErrorResource) {
      return ErrorResource;
    }
  }
  if (a5)
  {
    int v25 = 0;
    int v26 = 0;
    float v27 = 0.0;
    uint64_t v28 = (char *)v40;
    while (1)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      unsigned int v41 = 0;
      if (!v28) {
        break;
      }
      uint64_t v29 = 4 * ((*(_WORD *)(a1 + 216) * *(_WORD *)(a1 + 220)) & 0x3FFF);
      uint64_t v30 = (void *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), v29);
      uint64_t v43 = (uint64_t)v30;
      if (v30)
      {
        cstdlib_memcpy(v30, v28, v29);
        if ((fi_predict(*(uint64_t ****)(a1 + 104), (const void **)&v43, *(unsigned __int16 *)(a1 + 216), &v42, v31, v32, v33, v34) & 0x80000000) != 0)
        {
          __int16 v36 = "fi_predict";
        }
        else
        {
          if ((fi_shape_get_size((int *)(**(void **)(a1 + 104) + 92), (int *)&v41) & 0x80000000) == 0)
          {
            if (v41)
            {
              uint64_t v35 = 0;
              int v26 = 0;
              float v27 = 0.0;
              do
              {
                if (v27 < *(float *)(v42 + 4 * v35))
                {
                  float v27 = *(float *)(v42 + 4 * v35);
                  int v26 = v35;
                }
                ++v35;
              }
              while (v41 > (unsigned __int16)v35);
              uint64_t ErrorResource = 0;
            }
            else
            {
              int v26 = 0;
              uint64_t ErrorResource = 0;
              float v27 = 0.0;
            }
            goto LABEL_31;
          }
          __int16 v36 = "fi_shape_get_size";
        }
LABEL_30:
        uint64_t ErrorResource = err_GenerateErrorInternalMsg((uint64_t)v36);
LABEL_31:
        if (v43) {
          heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v43);
        }
        goto LABEL_33;
      }
      uint64_t ErrorResource = err_GenerateErrorResource();
LABEL_33:
      if (ErrorResource) {
        goto LABEL_39;
      }
      *(float *)(a7 + 4 * (unsigned __int16)v25) = v27;
      *(_DWORD *)(a6 + 4 * (unsigned __int16)v25) = v26;
      v28 += 12 * *(unsigned __int16 *)(a1 + 220);
      if (a5 <= (unsigned __int16)++v25) {
        goto LABEL_37;
      }
    }
    __int16 v36 = "pElemFeatures == NULL";
    goto LABEL_30;
  }
LABEL_37:
  uint64_t ErrorResource = 0;
LABEL_39:
  if (v40) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v40);
  }
  return ErrorResource;
}

uint64_t CLM_UnloadModel(uint64_t *a1)
{
  uint64_t v2 = a1[15];
  if (v2)
  {
    heap_Free(*(void **)(a1[6] + 8), v2);
    a1[15] = 0;
  }

  return _Model_Unload(a1);
}

uint64_t _CLM_PostFIDeinit(uint64_t a1)
{
  *(_DWORD *)(a1 + 218) = 0;
  return 0;
}

uint64_t _CLM_PostFIInit(uint64_t a1)
{
  if ((nn_word_lkp_GetInterface(1u, (void *)(a1 + 128)) & 0x80000000) != 0)
  {
    uint64_t v21 = "nn_word_lkp_GetInterface";
LABEL_23:
    return err_GenerateErrorInternalMsg((uint64_t)v21);
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  size_t v3 = cstdlib_strlen(*(const char **)(a1 + 120));
  uint64_t v4 = (char *)heap_Alloc(v2, v3 + 16);
  *(void *)(a1 + 184) = v4;
  if (v4)
  {
    cstdlib_strcpy(v4, "clmorthforeign_");
    cstdlib_strcat(*(char **)(a1 + 184), *(const char **)(a1 + 120));
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 128) + 16);
    uint64_t NullHandle = safeh_GetNullHandle();
    if ((v5(NullHandle) & 0x80000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    size_t v8 = cstdlib_strlen(*(const char **)(a1 + 120));
    uint64_t v9 = (char *)heap_Alloc(v7, v8 + 16);
    *(void *)(a1 + 192) = v9;
    if (!v9) {
      goto LABEL_19;
    }
    cstdlib_strcpy(v9, "clmphonforeign_");
    cstdlib_strcat(*(char **)(a1 + 192), *(const char **)(a1 + 120));
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 128) + 16);
    uint64_t v11 = safeh_GetNullHandle();
    if ((v10(v11) & 0x80000000) != 0)
    {
LABEL_22:
      uint64_t v21 = "__pIWordLkp->pfObjOpen";
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    size_t v13 = cstdlib_strlen(*(const char **)(a1 + 120));
    unsigned int v14 = (char *)heap_Alloc(v12, v13 + 13);
    *(void *)(a1 + 200) = v14;
    if (v14)
    {
      cstdlib_strcpy(v14, "clmphonmain_");
      cstdlib_strcat(*(char **)(a1 + 200), *(const char **)(a1 + 120));
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 128) + 16);
      uint64_t v16 = safeh_GetNullHandle();
      if ((v15(v16) & 0x80000000) == 0)
      {
        int v23 = 0;
        if (((*(uint64_t (**)(void, void, int *))(*(void *)(a1 + 128) + 40))(*(void *)(a1 + 136), *(void *)(a1 + 144), &v23) & 0x80000000) == 0)
        {
          if (v23 != *(unsigned __int16 *)(a1 + 220))
          {
            uint64_t v22 = "orth embedding dimension";
            return err_GenerateErrorInternalMsg((uint64_t)v22);
          }
          if (((*(uint64_t (**)(void, void, int *))(*(void *)(a1 + 128) + 40))(*(void *)(a1 + 152), *(void *)(a1 + 160), &v23) & 0x80000000) == 0)
          {
            if (v23 != *(unsigned __int16 *)(a1 + 220))
            {
              uint64_t v22 = "phon embedding dimension";
              return err_GenerateErrorInternalMsg((uint64_t)v22);
            }
            if (((*(uint64_t (**)(void, void, int *))(*(void *)(a1 + 128) + 40))(*(void *)(a1 + 168), *(void *)(a1 + 176), &v23) & 0x80000000) == 0)
            {
              uint64_t v17 = *(unsigned __int16 *)(a1 + 220);
              if (v23 == v17)
              {
                uint64_t v18 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * v17);
                *(void *)(a1 + 208) = v18;
                if (!v18) {
                  return err_GenerateErrorResource();
                }
                unsigned __int16 v19 = 6 * *(_WORD *)(a1 + 218) + 3;
                *(_WORD *)(a1 + 216) = v19;
                if (*(_DWORD *)(a1 + 112) == v19)
                {
                  if (*(_DWORD *)(a1 + 116) == *(unsigned __int16 *)(a1 + 220)) {
                    return 0;
                  }
                  uint64_t v22 = "inshape dimension 2";
                }
                else
                {
                  uint64_t v22 = "inshape dimension 1";
                }
              }
              else
              {
                uint64_t v22 = "main embedding dimension";
              }
              return err_GenerateErrorInternalMsg((uint64_t)v22);
            }
          }
        }
        uint64_t v22 = "__pIWordLkp->pfGetVectorLength";
        return err_GenerateErrorInternalMsg((uint64_t)v22);
      }
      goto LABEL_22;
    }
  }
LABEL_19:

  return err_GenerateErrorResource();
}

uint64_t _CLM_PreFIDeinit(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(void *)(a1 + 136), *(void *)(a1 + 144), NullHandle, v3))
    {
      (*(void (**)(void, void))(*(void *)(a1 + 128) + 24))(*(void *)(a1 + 136), *(void *)(a1 + 144));
      *(void *)(a1 + 136) = safeh_GetNullHandle();
      *(void *)(a1 + 144) = v4;
    }
    uint64_t v5 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(void *)(a1 + 152), *(void *)(a1 + 160), v5, v6))
    {
      (*(void (**)(void, void))(*(void *)(a1 + 128) + 24))(*(void *)(a1 + 152), *(void *)(a1 + 160));
      *(void *)(a1 + 152) = safeh_GetNullHandle();
      *(void *)(a1 + 160) = v7;
    }
    uint64_t v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(void *)(a1 + 168), *(void *)(a1 + 176), v8, v9))
    {
      (*(void (**)(void, void))(*(void *)(a1 + 128) + 24))(*(void *)(a1 + 168), *(void *)(a1 + 176));
      *(void *)(a1 + 168) = safeh_GetNullHandle();
      *(void *)(a1 + 176) = v10;
    }
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v11 = *(void *)(a1 + 184);
  if (v11) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v11);
  }
  *(void *)(a1 + 184) = 0;
  uint64_t v12 = *(void *)(a1 + 192);
  if (v12) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v12);
  }
  *(void *)(a1 + 192) = 0;
  uint64_t v13 = *(void *)(a1 + 200);
  if (v13) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v13);
  }
  *(void *)(a1 + 200) = 0;
  uint64_t v14 = *(void *)(a1 + 208);
  if (v14) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v14);
  }
  *(void *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 216) = 0;
  return 0;
}

uint64_t _CLM_PreFIInit(uint64_t a1, _DWORD *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v7 = 0;
  *a2 = 0;
  uint64_t v4 = a1 + 56;
  uint64_t CfgParamValueInteger = PNEW_Params_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)"clmnncfg", &v9);
  if (!CfgParamValueInteger)
  {
    uint64_t CfgParamValueInteger = __CLM_FullParamName(a1, "charContextWindow", (uint64_t *)&v8);
    if (!CfgParamValueInteger)
    {
      uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v9, v8, 3, &v7);
      if (!CfgParamValueInteger)
      {
        *(_WORD *)(a1 + 218) = v7;
        uint64_t CfgParamValueInteger = __CLM_FullParamName(a1, "embxEmbeddingDimension", (uint64_t *)&v8);
        if (!CfgParamValueInteger)
        {
          uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v9, v8, 0, &v7);
          if (!CfgParamValueInteger)
          {
            *(_WORD *)(a1 + 220) = v7;
            *a2 = 1;
          }
        }
      }
    }
  }
  if (v9) {
    OOC_PlacementDeleteObject(v4, v9);
  }
  if (v8) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v8);
  }
  return CfgParamValueInteger;
}

uint64_t __CLM_FullParamName(uint64_t a1, char *__s, uint64_t *a3)
{
  int v6 = *(uint64_t **)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *a3;
  size_t v8 = cstdlib_strlen(__s);
  size_t v9 = cstdlib_strlen(*(const char **)(a1 + 120));
  uint64_t v10 = (char *)heap_Realloc(v6, v7, v8 + v9 + 9);
  if (v10)
  {
    uint64_t v11 = v10;
    cstdlib_strcpy(v10, "nn_clm_");
    cstdlib_strcat(v11, *(const char **)(a1 + 120));
    cstdlib_strcat(v11, "_");
    cstdlib_strcat(v11, __s);
    *a3 = (uint64_t)v11;
    return 0;
  }
  else
  {
    return err_GenerateErrorResource();
  }
}

uint64_t PNEW_CLM_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 224, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = CLM_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetCLMClass()
{
  return &__CLM;
}

uint64_t __CLM_FeaturesLookups(uint64_t a1, uint64_t a2, uint64_t a3, char *__s1, void *a5)
{
  if (!cstdlib_strcmp(__s1, "#"))
  {
    if (*(_WORD *)(a1 + 220)) {
      memset_pattern16(a5, &unk_2206E24D0, 4 * *(unsigned __int16 *)(a1 + 220));
    }
    return 0;
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, char *, void))(*(void *)(a1 + 128) + 56))(a2, a3, __s1, *(void *)(a1 + 208));
  if ((v10 & 0x1FFF) != 0x14
    || (int v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, void))(*(void *)(a1 + 128) + 56))(a2, a3, "$MEANW2V$", *(void *)(a1 + 208)), (v10 & 0x1FFF) != 0x14))
  {
    if (v10 < 0)
    {
      uint64_t v11 = "__pIWordLkp->pfWord2fVector";
      goto LABEL_11;
    }
    cstdlib_memcpy(a5, *(const void **)(a1 + 208), 4 * *(unsigned __int16 *)(a1 + 220));
    return 0;
  }
  uint64_t v11 = "mean vector";
LABEL_11:

  return err_GenerateErrorInternalMsg((uint64_t)v11);
}

uint64_t Diacritizer_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t result = _Model_Con((void *)a1, a2, a3, a4, a5);
  if (!result)
  {
    *(void *)a1 = &__Diacritizer;
    *(_DWORD *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
  }
  return result;
}

uint64_t Diacritizer_Des(uint64_t a1)
{
  uint64_t result = _Model_Unload((uint64_t *)a1);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 128);
    if (v3)
    {
      heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v3);
      *(void *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 136) = 0;
    }
    return Model_Des();
  }
  return result;
}

uint64_t Diacritizer_LoadModel(uint64_t a1, _DWORD *a2)
{
  return _Model_Load(a1, "nn_diacritizer", a2);
}

uint64_t Diacritizer_Predict(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v39 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (a3 <= 2)
  {
    log_OutText(*(void *)(*(void *)(a1 + 48) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 5, 0, (uint64_t)"WARNING: not enough input features [%d]", a6, a7, a8, a3);
    size_t v9 = "nn_diacritizer:unexpected";
LABEL_5:
    uint64_t ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)v9);
LABEL_6:
    if (v37) {
      heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v37);
    }
    return ErrorInternalMsg;
  }
  uint64_t v10 = (a3 - 1);
  uint64_t v11 = *(unsigned int *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 48);
  if (v11 < v10)
  {
    log_OutText(*(void *)(v12 + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 5, 0, (uint64_t)"WARNING: Number of input features [%d] exceeds max_x_len [%d]", a6, a7, a8, (a3 - 1));
    size_t v9 = "nn_diacritizer";
    goto LABEL_5;
  }
  uint64_t v17 = a2;
  unsigned int v18 = a2[(a3 - 2)];
  unsigned int v19 = a2[v10];
  unint64_t v20 = (float *)heap_Alloc(*(void *)(v12 + 8), 4 * v11);
  uint64_t v37 = (uint64_t)v20;
  if (v20)
  {
    uint64_t v25 = v10;
    int v26 = v20;
    do
    {
      unsigned int v27 = *v17++;
      *v26++ = (float)v27;
      --v25;
    }
    while (v25);
    uint64_t v28 = *(unsigned int *)(a1 + 120);
    if (v10 < v28)
    {
      uint64_t v29 = &v20[v10];
      uint64_t v30 = v28 - v10;
      do
      {
        *v29++ = (float)v19;
        --v30;
      }
      while (v30);
    }
    if ((fi_predict(*(uint64_t ****)(a1 + 104), (const void **)&v37, 1, &v38, v21, v22, v23, v24) & 0x80000000) != 0)
    {
      size_t v9 = "nn_diacritizer:fi_predict";
      goto LABEL_5;
    }
    if ((fi_shape_get_size((int *)(**(void **)(a1 + 104) + 92), &v39) & 0x80000000) != 0)
    {
      size_t v9 = "nn_diacritizer:fi_shape_get_size";
      goto LABEL_5;
    }
    if (v39)
    {
      uint64_t v31 = 0;
      while (v18 != *(float *)(v38 + 4 * v31))
      {
        if (v39 == ++v31)
        {
          LODWORD(v31) = v39;
          break;
        }
      }
      *a5 = v31;
      if (v31 > *(_DWORD *)(a1 + 136))
      {
        unsigned int v32 = v31 + 10;
        *(_DWORD *)(a1 + 136) = v32;
        uint64_t v33 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 48) + 8), *(void *)(a1 + 128), 4 * v32);
        *(void *)(a1 + 128) = v33;
        if (!v33)
        {
          uint64_t ErrorInternalMsg = err_GenerateErrorResource();
          *(_DWORD *)(a1 + 136) = 0;
          goto LABEL_6;
        }
        LODWORD(v31) = *a5;
      }
      if (v31)
      {
        unint64_t v34 = 0;
        uint64_t v35 = v38;
        uint64_t v36 = *(void *)(a1 + 128);
        do
        {
          *(_DWORD *)(v36 + 4 * v34) = *(float *)(v35 + 4 * v34);
          ++v34;
        }
        while (v34 < *a5);
        goto LABEL_36;
      }
    }
    else
    {
      *a5 = 0;
    }
    uint64_t v36 = *(void *)(a1 + 128);
LABEL_36:
    uint64_t ErrorInternalMsg = 0;
    *a4 = v36;
    goto LABEL_6;
  }

  return err_GenerateErrorResource();
}

uint64_t _Diacritizer_PostFIDeinit()
{
  return 0;
}

uint64_t _Diacritizer_PostFIInit(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 120) = v2;
  v2 *= 2;
  *(_DWORD *)(a1 + 136) = v2;
  uint64_t v3 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * v2);
  *(void *)(a1 + 128) = v3;
  if (v3)
  {
    if (*(_DWORD *)(a1 + 116) == -1)
    {
      return 0;
    }
    else
    {
      return err_GenerateErrorInternalMsg((uint64_t)"nn_diacritizer:only supports 1D inshape");
    }
  }
  else
  {
    uint64_t result = err_GenerateErrorResource();
    *(_DWORD *)(a1 + 136) = 0;
  }
  return result;
}

uint64_t _Diacritizer_PreFIDeinit()
{
  return 0;
}

uint64_t _Diacritizer_PreFIInit(uint64_t a1, _DWORD *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  *a2 = 0;
  uint64_t v4 = a1 + 56;
  uint64_t v5 = PNEW_Params_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)"fecfg", &v13);
  if (v5) {
    goto LABEL_2;
  }
  CfgParamValueuint64_t String = Params_GetCfgParamValueString(v13, "nn_diacritizer_enable", &v12);
  int v6 = v12;
  if (CfgParamValueString) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v12 == 0;
  }
  if (!v10)
  {
    int v11 = LH_stricmp(v12, "yes");
    if (!v11 || !LH_stricmp(v12, "true") || !LH_stricmp(v12, "1")) {
      *a2 = 1;
    }
LABEL_2:
    int v6 = v12;
    uint64_t v7 = v5;
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = CfgParamValueString;
  if (v12) {
LABEL_3:
  }
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v6);
LABEL_4:
  if (v13) {
    OOC_PlacementDeleteObject(v4, v13);
  }
  return v7;
}

uint64_t PNEW_Diacritizer_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = OOCAllocator_Malloc(a1, 144, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = _Model_Con((void *)v12, a2, a3, a4, a5);
    if (result)
    {
      unsigned int v14 = result;
      OOCAllocator_Free(a1, v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *(void *)uint64_t v12 = &__Diacritizer;
      *(_DWORD *)(v12 + 120) = 0;
      *(void *)(v12 + 128) = 0;
      *(_DWORD *)(v12 + 136) = 0;
      *a6 = v12;
    }
  }
  return result;
}

void *GetDiacritizerClass()
{
  return &__Diacritizer;
}

uint64_t URL_Con(void *a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  uint64_t v6 = _Model_Con(a1, a2, a3, a4, a5);
  if (!v6)
  {
    *a1 = &__URL;
    a1[15] = 0;
    a1[16] = safeh_GetNullHandle();
    a1[17] = v7;
    a1[18] = 0;
    a1[19] = 0x100000000;
  }
  return v6;
}

uint64_t URL_Des(uint64_t *a1)
{
  uint64_t result = _Model_Unload(a1);
  if (!result)
  {
    return Model_Des();
  }
  return result;
}

uint64_t URL_LoadModel(uint64_t a1, _DWORD *a2)
{
  return _Model_Load(a1, "nn_url", a2);
}

uint64_t URL_Predict(uint64_t a1, const char *a2, unsigned int *a3, unsigned int a4, _DWORD *a5, _DWORD *a6)
{
  if (a4)
  {
    size_t v9 = a2;
    if (a4 + 1 == Utf8_Utf8NbrOfSymbols(a2))
    {
      int v11 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4* (2 * *(unsigned __int16 *)(a1 + 156) + (unsigned __int16)a4 - 1)* *(unsigned __int16 *)(a1 + 154));
      uint64_t v12 = v11;
      uint64_t v37 = (uint64_t)v11;
      if (v11)
      {
        uint64_t v36 = a6;
        uint64_t v13 = (unsigned __int16)a4;
        __int16 v14 = *(_WORD *)(a1 + 156);
        LOWORD(v15) = *(_WORD *)(a1 + 154);
        if ((v14 - 1) * (_WORD)v15)
        {
          uint64_t v16 = (unsigned __int16)((v14 - 1) * v15);
          memset_pattern16(v11, &unk_2206E2470, 4 * v16);
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v20 = &v12[4 * v16];
        if ((_WORD)a4)
        {
          while (1)
          {
            size_t v21 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v9);
            cstdlib_strncpy(__dst, v9, v21);
            cstdlib_strcpy(&__dst[v21], "");
            int v22 = (*(uint64_t (**)(void, void, char *, void))(*(void *)(a1 + 120) + 56))(*(void *)(a1 + 128), *(void *)(a1 + 136), __dst, *(void *)(a1 + 144));
            if ((v22 & 0x1FFF) != 0x14
              || (int v22 = (*(uint64_t (**)(void, void, const char *, void))(*(void *)(a1 + 120) + 56))(*(void *)(a1 + 128), *(void *)(a1 + 136), "$MEANW2V$", *(void *)(a1 + 144)), v23 = "mean vector", (v22 & 0x1FFF) != 0x14))
            {
              if ((v22 & 0x80000000) == 0)
              {
                cstdlib_memcpy(v20, *(const void **)(a1 + 144), 4 * *(unsigned __int16 *)(a1 + 158));
                goto LABEL_19;
              }
              uint64_t v23 = "__pIWordLkp->pfWord2fVector";
            }
            uint64_t ErrorInternalMsg = err_GenerateErrorInternalMsg((uint64_t)v23);
            if (ErrorInternalMsg)
            {
              uint64_t ErrorResource = ErrorInternalMsg;
              goto LABEL_48;
            }
LABEL_19:
            v9 += v21;
            unsigned int v25 = *a3++;
            *(float *)&v20[4 * *(unsigned __int16 *)(a1 + 158)] = (float)v25;
            uint64_t v15 = *(unsigned __int16 *)(a1 + 154);
            v20 += 4 * v15;
            if (!--v13)
            {
              __int16 v14 = *(_WORD *)(a1 + 156);
              uint64_t v12 = (char *)v37;
              unsigned int v19 = a5;
              goto LABEL_22;
            }
          }
        }
        unsigned int v19 = a5;
LABEL_22:
        if (v14 * (_WORD)v15) {
          memset_pattern16(v20, &unk_2206E2470, 4 * (unsigned __int16)(v14 * v15));
        }
        a6 = v36;
      }
      else
      {
        uint64_t ErrorResource = err_GenerateErrorResource();
        unsigned int v19 = a5;
        if (ErrorResource) {
          return ErrorResource;
        }
      }
      *a6 = 1065353216;
      *unsigned int v19 = 1;
      if (a4 >= 2)
      {
        int v26 = 0;
        float v27 = 0.0;
        int v28 = 1;
        while (1)
        {
          uint64_t v40 = 0;
          *(void *)__dst = 0;
          int v39 = 0;
          if (!v12) {
            break;
          }
          uint64_t v29 = 4 * ((*(_WORD *)(a1 + 152) * *(_WORD *)(a1 + 154)) & 0x3FFF);
          uint64_t v30 = (void *)heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), v29);
          *(void *)__dst = v30;
          if (v30)
          {
            cstdlib_memcpy(v30, v12, v29);
            if ((fi_predict(*(uint64_t ****)(a1 + 104), (const void **)__dst, *(unsigned __int16 *)(a1 + 152), &v40, v31, v32, v33, v34) & 0x80000000) != 0)
            {
              uint64_t v35 = "fi_predict";
            }
            else if ((fi_shape_get_size((int *)(**(void **)(a1 + 104) + 92), &v39) & 0x80000000) != 0)
            {
              uint64_t v35 = "fi_shape_get_size";
            }
            else
            {
              if (v39 == 2)
              {
                float v27 = v40[1];
                if (*v40 >= v27)
                {
                  int v26 = 0;
                  uint64_t ErrorResource = 0;
                  float v27 = *v40;
                }
                else
                {
                  uint64_t ErrorResource = 0;
                  int v26 = 1;
                }
LABEL_40:
                if (*(void *)__dst) {
                  heap_Free(*(void **)(*(void *)(a1 + 48) + 8), *(uint64_t *)__dst);
                }
                goto LABEL_42;
              }
              uint64_t v35 = "Unexpected";
            }
LABEL_39:
            uint64_t ErrorResource = err_GenerateErrorInternalMsg((uint64_t)v35);
            goto LABEL_40;
          }
          uint64_t ErrorResource = err_GenerateErrorResource();
LABEL_42:
          if (ErrorResource) {
            goto LABEL_48;
          }
          *(float *)&a6[(unsigned __int16)v28] = v27;
          v19[(unsigned __int16)v28] = v26;
          v12 += 4 * *(unsigned __int16 *)(a1 + 154);
          if (a4 <= (unsigned __int16)++v28) {
            goto LABEL_46;
          }
        }
        uint64_t v35 = "pElemFeatures == NULL";
        goto LABEL_39;
      }
LABEL_46:
      uint64_t ErrorResource = 0;
LABEL_48:
      if (v37) {
        heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v37);
      }
      return ErrorResource;
    }
  }

  return err_GenerateErrorArg();
}

uint64_t _URL_PostFIDeinit(uint64_t a1)
{
  *(_DWORD *)(a1 + 156) = 1;
  return 0;
}

uint64_t _URL_PostFIInit(uint64_t a1)
{
  if ((nn_word_lkp_GetInterface(1u, (void *)(a1 + 120)) & 0x80000000) != 0)
  {
    size_t v9 = "nn_word_lkp_GetInterface";
LABEL_11:
    return err_GenerateErrorInternalMsg((uint64_t)v9);
  }
  unsigned int v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 120) + 16);
  uint64_t NullHandle = safeh_GetNullHandle();
  if ((v2(NullHandle) & 0x80000000) != 0)
  {
    size_t v9 = "__pIWordLkp->pfObjOpen";
    goto LABEL_11;
  }
  int v11 = 0;
  if (((*(uint64_t (**)(void, void, int *))(*(void *)(a1 + 120) + 40))(*(void *)(a1 + 128), *(void *)(a1 + 136), &v11) & 0x80000000) != 0)
  {
    BOOL v10 = "__pIWordLkp->pfGetVectorLength";
  }
  else
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 158);
    if (v11 == v4)
    {
      uint64_t v5 = heap_Alloc(*(void *)(*(void *)(a1 + 48) + 8), 4 * v4);
      *(void *)(a1 + 144) = v5;
      if (!v5) {
        return err_GenerateErrorResource();
      }
      unsigned __int16 v6 = (2 * *(_WORD *)(a1 + 156)) | 1;
      *(_WORD *)(a1 + 152) = v6;
      if (*(_DWORD *)(a1 + 112) == v6)
      {
        unsigned __int16 v7 = *(_WORD *)(a1 + 158) + 1;
        *(_WORD *)(a1 + 154) = v7;
        if (*(_DWORD *)(a1 + 116) == v7) {
          return 0;
        }
        BOOL v10 = "inshape dimension 2";
      }
      else
      {
        BOOL v10 = "inshape dimension 1";
      }
    }
    else
    {
      BOOL v10 = "char embedding dimension";
    }
  }
  return err_GenerateErrorInternalMsg((uint64_t)v10);
}

uint64_t _URL_PreFIDeinit(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(void *)(a1 + 128), *(void *)(a1 + 136), NullHandle, v3))
    {
      (*(void (**)(void, void))(*(void *)(a1 + 120) + 24))(*(void *)(a1 + 128), *(void *)(a1 + 136));
      *(void *)(a1 + 128) = safeh_GetNullHandle();
      *(void *)(a1 + 136) = v4;
    }
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 144);
  if (v5) {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v5);
  }
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  return 0;
}

uint64_t _URL_PreFIInit(uint64_t a1, _DWORD *a2)
{
  __s1 = 0;
  uint64_t v12 = 0;
  int v10 = 0;
  *a2 = 0;
  uint64_t v4 = a1 + 56;
  uint64_t CfgParamValueInteger = PNEW_Params_Con(a1 + 56, *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)"fecfg", &v12);
  if (CfgParamValueInteger) {
    goto LABEL_2;
  }
  CfgParamValueuint64_t String = Params_GetCfgParamValueString(v12, "nn_url_enable", &__s1);
  unsigned __int16 v6 = __s1;
  if (CfgParamValueString) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = __s1 == 0;
  }
  if (!v9)
  {
    if (cstdlib_strcmp(__s1, "yes"))
    {
      uint64_t CfgParamValueInteger = 0;
    }
    else
    {
      uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v12, "nn_url_charContextWindow", 4, &v10);
      if (!CfgParamValueInteger)
      {
        if (v10)
        {
          *(_WORD *)(a1 + 156) = v10;
          uint64_t CfgParamValueInteger = Params_GetCfgParamValueInteger(v12, "nn_url_charEmbeddingDimension", 0, &v10);
          if (!CfgParamValueInteger)
          {
            *(_WORD *)(a1 + 158) = v10;
            *a2 = 1;
          }
        }
        else
        {
          uint64_t CfgParamValueInteger = err_GenerateErrorInternalMsg((uint64_t)"empty context not supported");
        }
      }
    }
LABEL_2:
    unsigned __int16 v6 = __s1;
    if (!__s1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t CfgParamValueInteger = CfgParamValueString;
  if (__s1)
  {
LABEL_3:
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), (uint64_t)v6);
    __s1 = 0;
  }
LABEL_4:
  if (v12) {
    OOC_PlacementDeleteObject(v4, v12);
  }
  return CfgParamValueInteger;
}

uint64_t PNEW_URL_Con(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, void *a6)
{
  unsigned int v14 = 0;
  uint64_t v12 = (void *)OOCAllocator_Malloc(a1, 160, &v14);
  uint64_t result = v14;
  if (!v14)
  {
    uint64_t result = URL_Con(v12, a2, a3, a4, a5);
    unsigned int v14 = result;
    if (result)
    {
      OOCAllocator_Free(a1, (uint64_t)v12);
      *a6 = 0;
      return v14;
    }
    else
    {
      *a6 = v12;
    }
  }
  return result;
}

void *GetURLClass()
{
  return &__URL;
}

uint64_t fe_nn_g2p_component_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2707431425;
  }
  uint64_t result = 0;
  *a2 = &IFeNng2p;
  return result;
}

uint64_t fe_nng2p_ClassOpen(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2707431431;
  }
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *a3 = a1;
    a3[1] = a2;
  }
  return result;
}

uint64_t fe_nng2p_ClassClose()
{
  return 0;
}

uint64_t fe_nng2p_ObjOpen(_WORD *a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v5 = 2707431431;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v19);
    if ((inited & 0x80000000) == 0)
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      uint64_t inited = InitRsrcFunction(a3, a4, &v18);
      if ((inited & 0x80000000) == 0)
      {
        int v10 = (void *)heap_Calloc(*(void **)(v18 + 8), 1, 64);
        if (!v10)
        {
          log_OutPublic(*(void *)(v18 + 32), (uint64_t)"FE_NN_G2P", 78000, 0, v11, v12, v13, v14, v18);
          return 2707431434;
        }
        uint64_t v15 = v10;
        *int v10 = a3;
        v10[1] = a4;
        int Allocator = ooc_utils_createAllocator((uint64_t)(v10 + 2), a3, a4);
        uint64_t inited = LH_ERROR_to_VERROR(Allocator);
        if ((inited & 0x80000000) == 0)
        {
          *(void *)a5 = v15;
          *(_DWORD *)(a5 + 8) = 1069;
          return fe_nng2p_ObjReopen(v15, *(void *)(a5 + 8));
        }
      }
    }
    return inited;
  }
  return v5;
}

uint64_t fe_nng2p_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = 2707431432;
  if ((safeh_HandleCheck(a1, a2, 1069, 64) & 0x80000000) == 0 && a1)
  {
    uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v6);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      uint64_t v3 = LH_ERROR_to_VERROR(0);
      if ((v3 & 0x80000000) == 0)
      {
        luavmldoutil_destroy_lua_vm(a1 + 16, (uint64_t *)(a1 + 56));
        OOCAllocator_Des();
        heap_Free(*(void **)(v6 + 8), a1);
      }
    }
  }
  return v3;
}

uint64_t fe_nng2p_ObjReopen(void *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1069, 64) & 0x80000000) != 0 || !a1) {
    return 2707431432;
  }
  uint64_t v3 = (_WORD *)*a1;
  uint64_t v4 = a1[1];

  return luavmldoutil_initialize_lua_vm(v3, v4, (uint64_t)(a1 + 2), (uint64_t)"runG2P", (uint64_t)"FE_NN_G2P", a1 + 7, 0);
}

uint64_t fe_nng2p_ProcessStart()
{
  return 0;
}

uint64_t fe_nng2p_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if ((safeh_HandleCheck(a1, a2, 1069, 64) & 0x80000000) != 0) {
    return 2707431432;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v25);
  if ((inited & 0x80000000) == 0)
  {
    *a5 = 1;
    log_OutText(*(void *)(v25 + 32), (uint64_t)"FE_NN_G2P", 4, 0, (uint64_t)"Entering fe_nng2p_Process", v9, v10, v11, v22);
    if (*(void *)(a1 + 56))
    {
      uint64_t Interface = lingdb_GetInterface(1u, &v24);
      if ((Interface & 0x80000000) != 0) {
        return Interface;
      }
      uint64_t inited = LingDBIsValid(v24, a3, a4, &v26);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_22;
      }
      if (v26 == 1)
      {
        uint64_t inited = LingDBHasSentence(v24, a3, a4, (_DWORD *)&v26 + 1);
        if ((inited & 0x80000000) != 0) {
          goto LABEL_22;
        }
        if (HIDWORD(v26) == 1)
        {
          uint64_t v17 = auxTouchLingdbInstance(v24, a3, a4);
          if ((v17 & 0x80000000) != 0)
          {
LABEL_15:
            uint64_t inited = v17;
            goto LABEL_22;
          }
          uint64_t inited = initLDO(a1 + 16, &v23);
          if ((inited & 0x80000000) != 0) {
            goto LABEL_22;
          }
          if (v23)
          {
            uint64_t v17 = importFromLingDBWordRecord(v25, v24, a3, a4, &v23, 0);
            if ((v17 & 0x80000000) == 0)
            {
              int v18 = LuaVMLDO_RunFunction(*(void *)(a1 + 56), (uint64_t)"runG2P", v23);
              uint64_t v17 = LH_ERROR_to_VERROR(v18);
              if ((v17 & 0x80000000) == 0) {
                uint64_t v17 = exportToLingDBWordRecord(v25, v24, a3, a4, a1 + 16, v23, 0);
              }
            }
            goto LABEL_15;
          }
          uint64_t v19 = *(void *)(v25 + 32);
          unint64_t v20 = "Init LDO is NULL, returning";
        }
        else
        {
          uint64_t v19 = *(void *)(v25 + 32);
          unint64_t v20 = "LingDB has no sentence, returning";
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v25 + 32);
        unint64_t v20 = "Empty or Invalid LingDB, returning";
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v25 + 32);
      unint64_t v20 = "No NNG2P Lua script available, returning";
    }
    log_OutText(v19, (uint64_t)"FE_NN_G2P", 5, 0, (uint64_t)v20, v13, v14, v15, 0);
LABEL_22:
    if (v23) {
      deinitLDO(a1 + 16, v23);
    }
  }
  return inited;
}

uint64_t fe_nng2p_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 1069, 64);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2707431432;
  }
}

uint64_t auxTouchLingdbInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v7 + 2);
  if ((result & 0x80000000) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(a1 + 160))(a2, a3, HIWORD(v7), 2, 1, "", &v7);
  }
  return result;
}

uint64_t fe_clm_component_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2346721281;
  }
  uint64_t result = 0;
  *a2 = &IFeClm;
  return result;
}

uint64_t fe_clm_ClassOpen(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2346721287;
  }
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *a3 = a1;
    a3[1] = a2;
  }
  return result;
}

uint64_t fe_clm_ClassClose()
{
  return 0;
}

uint64_t fe_clm_ObjOpen(_WORD *a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v5 = 2346721287;
  uint64_t v20 = 0;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v22);
    if ((inited & 0x80000000) == 0)
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      uint64_t inited = InitRsrcFunction(a3, a4, &v21);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v10 = (uint64_t *)heap_Calloc(*(void **)(v21 + 8), 1, 72);
        if (!v10)
        {
          log_OutPublic(*(void *)(v21 + 32), (uint64_t)"FE_CLM", 78000, 0, v11, v12, v13, v14, v19[0]);
          return 2346721290;
        }
        uint64_t v15 = v10;
        *uint64_t v10 = (uint64_t)a3;
        v10[1] = a4;
        if ((paramc_ParamGetStr(*(void *)(v21 + 40), (uint64_t)"shortfragmentforceclm", &v20) & 0x80000000) != 0
          || !v20
          || (uint64_t v16 = *(void *)(v21 + 40),
              v19[0] = v15,
              v19[1] = fe_clm_CheckParamChange,
              v19[2] = fe_clm_LearnParamChange,
              uint64_t inited = paramc_ListenerAdd(v16, "shortfragmentforceclm", v19),
              (inited & 0x80000000) == 0))
        {
          int Allocator = ooc_utils_createAllocator((uint64_t)(v15 + 2), (_WORD *)*v15, v15[1]);
          uint64_t inited = LH_ERROR_to_VERROR(Allocator);
          if ((inited & 0x80000000) == 0)
          {
            *(void *)a5 = v15;
            *(_DWORD *)(a5 + 8) = 381;
            return fe_clm_ObjReopen(v15, *(void *)(a5 + 8));
          }
        }
      }
    }
    return inited;
  }
  return v5;
}

uint64_t fe_clm_ObjClose(uint64_t a1, int a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t inited = 2346721288;
  if ((safeh_HandleCheck(a1, a2, 381, 72) & 0x80000000) == 0)
  {
    if (a1)
    {
      uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v9);
      if ((inited & 0x80000000) == 0)
      {
        if ((paramc_ParamGetStr(*(void *)(v9 + 40), (uint64_t)"shortfragmentforceclm", &v8) & 0x80000000) == 0 && v8)
        {
          uint64_t v4 = *(void *)(v9 + 40);
          *(void *)&long long v6 = a1;
          *((void *)&v6 + 1) = fe_clm_CheckParamChange;
          uint64_t v7 = fe_clm_LearnParamChange;
          paramc_ListenerRemove(v4, "shortfragmentforceclm", &v6);
        }
        luavmldoutil_destroy_lua_vm(a1 + 16, (uint64_t *)(a1 + 56));
        OOCAllocator_Des();
        heap_Free(*(void **)(v9 + 8), a1);
      }
    }
  }
  return inited;
}

uint64_t fe_clm_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  uint64_t v3 = 2346721288;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 381, 72) & 0x80000000) == 0 && a1)
  {
    uint64_t inited = InitRsrcFunction((_WORD *)*a1, a1[1], &v17);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      luavmldoutil_destroy_lua_vm((uint64_t)(a1 + 2), a1 + 7);
      uint64_t Object = paramc_ParamGet(v17[5], (uint64_t)"langcode", &v18, 0);
      if ((Object & 0x80000000) != 0
        || (uint64_t Object = objc_GetObject(v17[6], (uint64_t)"CLMOBJECT", &v16), (Object & 0x80000000) != 0))
      {
        uint64_t v3 = Object;
      }
      else
      {
        uint64_t v3 = (*(uint64_t (**)(void, void, _WORD **))(v16[1] + 96))(v16[2], v16[3], (_WORD **)a1 + 8);
        if ((v3 & 0x80000000) != 0)
        {
LABEL_8:
          log_OutText(v17[4], (uint64_t)"FE_CLM", 5, 0, (uint64_t)"CLM Lua script for main language [%s] is not available, no CLM to main language in \"fe/fe_clm\" component (CLM done in upstream components).", v6, v7, v8, v18);
        }
        else
        {
          switch(*((_DWORD *)a1 + 16))
          {
            case 0:
              goto LABEL_8;
            case 1:
              uint64_t v10 = v17[4];
              uint64_t v11 = v18;
              uint64_t v12 = "CLM to main language [%s]  will be done in  \"fe/fe_clm\" component (before fe_global).";
              goto LABEL_17;
            case 2:
              uint64_t v10 = v17[4];
              uint64_t v11 = v18;
              uint64_t v12 = "CLM to main language [%s]  will be done in  \"fe/fe_clm\" component (after fe_global).";
              goto LABEL_17;
            case 3:
              uint64_t v10 = v17[4];
              uint64_t v11 = v18;
              uint64_t v12 = "CLM to main language [%s] will be done with explicit insertion of the  \"fe/fe_clm\" component.";
LABEL_17:
              log_OutText(v10, (uint64_t)"FE_CLM", 5, 0, (uint64_t)v12, v6, v7, v8, v11);
              break;
            default:
              break;
          }
          uint64_t v3 = luavmldoutil_initialize_lua_vm((_WORD *)*a1, a1[1], (uint64_t)(a1 + 2), (uint64_t)"runCLM", (uint64_t)"FE_CLM", a1 + 7, "clm");
          if ((v3 & 0x80000000) != 0)
          {
            log_OutText(v17[4], (uint64_t)"FE_CLM", 5, 0, (uint64_t)"CLM Lua function [%s] is not available, no CLM to main language in \"fe/fe_clm\" component (CLM done in upstream components).", v13, v14, v15, (uint64_t)"runCLM");
            uint64_t v3 = 0;
          }
        }
      }
      if (v16) {
        objc_ReleaseObject(v17[6], (uint64_t)"CLMOBJECT");
      }
    }
  }
  return v3;
}

uint64_t fe_clm_ProcessStart()
{
  return 0;
}

uint64_t fe_clm_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t inited = 2346721288;
  if ((safeh_HandleCheck(a1, a2, 381, 72) & 0x80000000) != 0) {
    return inited;
  }
  if (!a1) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v27);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a5 = 1;
  log_OutText(*(void *)(v27 + 32), (uint64_t)"FE_CLM", 4, 0, (uint64_t)"Entering fe_clm_Process", v10, v11, v12, v23);
  if (*(void *)(a1 + 56))
  {
    uint64_t Interface = lingdb_GetInterface(1u, &v25);
    if ((Interface & 0x80000000) != 0) {
      return Interface;
    }
    uint64_t inited = LingDBIsValid(v25, a3, a4, &v24);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_22;
    }
    if (v24 == 1)
    {
      uint64_t inited = LingDBHasSentence(v25, a3, a4, (_DWORD *)&v24 + 1);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_22;
      }
      if (HIDWORD(v24) == 1)
      {
        uint64_t v17 = auxTouchLingdbInstance(v25, a3, a4);
        if ((v17 & 0x80000000) != 0)
        {
LABEL_16:
          uint64_t inited = v17;
          goto LABEL_22;
        }
        uint64_t inited = initLDO(a1 + 16, &v26);
        if ((inited & 0x80000000) != 0) {
          goto LABEL_22;
        }
        if (v26)
        {
          BOOL v18 = *(_DWORD *)(a1 + 64) != 1;
          uint64_t v17 = importFromLingDBWordRecord(v27, v25, a3, a4, &v26, v18);
          if ((v17 & 0x80000000) == 0)
          {
            int v19 = LuaVMLDO_RunFunction(*(void *)(a1 + 56), (uint64_t)"runCLM", v26);
            uint64_t v17 = LH_ERROR_to_VERROR(v19);
            if ((v17 & 0x80000000) == 0) {
              uint64_t v17 = exportToLingDBWordRecord(v27, v25, a3, a4, a1 + 16, v26, v18);
            }
          }
          goto LABEL_16;
        }
        uint64_t v20 = *(void *)(v27 + 32);
        uint64_t v21 = "Init LDO is NULL, returning";
      }
      else
      {
        uint64_t v20 = *(void *)(v27 + 32);
        uint64_t v21 = "LingDB has no sentence, returning";
      }
    }
    else
    {
      uint64_t v20 = *(void *)(v27 + 32);
      uint64_t v21 = "Empty or Invalid LingDB, returning";
    }
  }
  else
  {
    uint64_t v20 = *(void *)(v27 + 32);
    uint64_t v21 = "No CLM Lua script available, returning";
  }
  log_OutText(v20, (uint64_t)"FE_CLM", 5, 0, (uint64_t)v21, v13, v14, v15, 0);
LABEL_22:
  if (v26) {
    deinitLDO(a1 + 16, v26);
  }
  return inited;
}

uint64_t fe_clm_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 381, 72);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2346721288;
  }
}

uint64_t fe_clm_CheckParamChange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  uint64_t v20 = 0;
  if (a1 && (int v7 = cstdlib_strcmp(__s1, "shortfragmentforceclm"), a3) && !v7 && cstdlib_strlen(a3))
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v20);
    if ((result & 0x80000000) == 0)
    {
      if (LH_strnicmp((uint64_t)a3, (uint64_t)"phrase:", 7uLL))
      {
        uint64_t v12 = a3 + 1;
        int v13 = 1;
        while (1)
        {
          int v14 = *(v12 - 1);
          if (!*(v12 - 1)) {
            goto LABEL_28;
          }
          if (v14 == 58) {
            break;
          }
          if ((v14 - 58) < 0xFFFFFFF6) {
            goto LABEL_28;
          }
          if (v13) {
            BOOL v15 = v14 == 48;
          }
          else {
            BOOL v15 = 0;
          }
          int v13 = v15;
          ++v12;
        }
        if (v13)
        {
LABEL_28:
          *a4 = 0;
          goto LABEL_29;
        }
        *a4 = 1;
      }
      else
      {
        *a4 = 1;
        uint64_t v12 = a3 + 7;
      }
      char v18 = *v12;
      uint64_t v16 = v12 + 1;
      char v17 = v18;
      while (v17 > 89 || v17 == 44)
      {
        int v19 = *v16++;
        char v17 = v19;
        if (!v19) {
          goto LABEL_23;
        }
      }
      *a4 = v17 == 0;
      if (v17) {
LABEL_29:
      }
        log_OutText(*(void *)(v20 + 32), (uint64_t)"FE_CLM", 5, 0, (uint64_t)"%s=%s : IGNORED (invalid)", v9, v10, v11, (uint64_t)"shortfragmentforceclm");
      return 0;
    }
  }
  else
  {
LABEL_23:
    uint64_t result = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t fe_clm_LearnParamChange()
{
  return 0;
}

uint64_t com_depes_InitLayers(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = a1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  return 0;
}

uint64_t com_depes_FreeLayers(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 16;
  uint64_t v5 = (_WORD *)(a2 + 112);
  do
  {
    uint64_t v6 = *(void *)(v4 + v3);
    if (v6)
    {
      heap_Free(*(void **)(a1 + 8), v6);
      *(void *)(v4 + v3) = 0;
    }
    *(v5 - 16) = 0;
    *(v5 - 8) = 0;
    *v5++ = 0;
    v3 += 8;
  }
  while (v3 != 64);
  return 0;
}

uint64_t com_depes_PrepareLayersForLen(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 0xFFFF)
  {
    uint64_t v25 = 2305826825;
    uint64_t v21 = *a1;
    goto LABEL_28;
  }
  unsigned int v9 = *((unsigned __int16 *)a1 + 40);
  uint64_t v10 = *((unsigned __int16 *)a1 + 5);
  if (v10 >= 2)
  {
    uint64_t v11 = (unsigned __int16 *)a1 + 41;
    uint64_t v12 = v10 - 1;
    do
    {
      unsigned int v14 = *v11++;
      unsigned int v13 = v14;
      if (v14 >= (unsigned __int16)v9) {
        unsigned int v9 = (unsigned __int16)v9;
      }
      else {
        unsigned int v9 = v13;
      }
      --v12;
    }
    while (v12);
  }
  unsigned __int16 v15 = a2 + 1;
  if (v9 >= (unsigned __int16)(a2 + 1)) {
    return 0;
  }
  unsigned __int16 v16 = v9 ? v9 : 200;
  do
  {
    __int16 v17 = v16;
    unsigned int v18 = v16;
    if (v16 >= v15) {
      break;
    }
    v16 *= 2;
  }
  while ((v17 & 0x8000) == 0);
  unsigned __int16 v19 = v18 < v15 ? -1 : v17;
  if (!*((_WORD *)a1 + 5)) {
    return 0;
  }
  uint64_t v20 = 0;
  uint64_t v21 = *a1;
  uint64_t v22 = a1 + 10;
  while (*((unsigned __int16 *)v22 + v20) >= v19)
  {
LABEL_25:
    if (++v20 >= (unint64_t)v10) {
      return 0;
    }
  }
  uint64_t v23 = *(uint64_t **)(v21 + 8);
  if (*((_WORD *)v22 + v20))
  {
    uint64_t v24 = heap_Realloc(v23, v22[v20 - 8], v19);
    if (!v24) {
      goto LABEL_30;
    }
    goto LABEL_24;
  }
  uint64_t v24 = heap_Alloc((uint64_t)v23, v19);
  if (v24)
  {
LABEL_24:
    v22[v20 - 8] = v24;
    *((_WORD *)v22 + v20) = v19;
    LODWORD(v10) = *((unsigned __int16 *)a1 + 5);
    goto LABEL_25;
  }
LABEL_30:
  uint64_t v25 = 2305826826;
LABEL_28:
  log_OutPublic(*(void *)(v21 + 32), (uint64_t)"COM_DEPES", 38000, 0, a5, a6, a7, a8, v27);
  return v25;
}

uint64_t com_depes_StartWritingToLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = com_depes_PrepareLayersForLen((uint64_t *)a1, 1, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0 && *(_WORD *)(a1 + 10))
  {
    unint64_t v10 = 0;
    do
      **(unsigned char **)(a1 + 16 + 8 * v10++) = 0;
    while (v10 < *(unsigned __int16 *)(a1 + 10));
  }
  return result;
}

uint64_t com_depes_GetMaxLayerLenBytes(uint64_t a1, unsigned int a2, unsigned int a3, _WORD *a4)
{
  *a4 = 0;
  if (a2 <= a3)
  {
    unsigned __int16 v4 = 0;
    do
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 2 * (unsigned __int16)a2 + 96);
      if (v5 > v4)
      {
        *a4 = v5;
        unsigned __int16 v4 = v5;
      }
      LOWORD(a2) = a2 + 1;
    }
    while (a3 >= (unsigned __int16)a2);
  }
  return 0;
}

uint64_t com_depes_AddToLayerGen(uint64_t *a1, unsigned int a2, char *__s, int a4, int a5)
{
  uint64_t v6 = __s;
  unsigned int v9 = a4 & ~(a4 >> 31);
  unsigned __int16 v10 = cstdlib_strlen(__s);
  if (v9 >= v10) {
    unsigned __int16 v11 = v10;
  }
  else {
    unsigned __int16 v11 = v9;
  }
  int v12 = v11;
  __int16 v19 = Utf8_LengthInUtf8chars((unint64_t)v6, v11);
  __int16 v20 = 0;
  if (v12)
  {
    int v21 = v12;
    uint64_t v22 = v6;
    do
    {
      __int16 v23 = 1;
      if (a5 && *v22 == 126) {
        __int16 v23 = cstdlib_strlen("¡");
      }
      v20 += v23;
      ++v22;
      --v21;
    }
    while (v21);
  }
  uint64_t v24 = (char *)a1 + 2 * a2;
  __int16 v26 = *((_WORD *)v24 + 48);
  uint64_t v25 = v24 + 96;
  uint64_t result = com_depes_PrepareLayersForLen(a1, (unsigned __int16)(v26 + v20), v13, v14, v15, v16, v17, v18);
  if ((result & 0x80000000) == 0)
  {
    int v28 = (unsigned char *)(a1[a2 + 2] + (unsigned __int16)*v25);
    if (v12)
    {
      int v29 = 0;
      __int16 v30 = 0;
      do
      {
        LODWORD(v31) = *v6;
        if (a5 && v31 == 126)
        {
          uint64_t v31 = 0;
          char v32 = -62;
          do
          {
            v28[v31] = v32;
            char v32 = asc_2207C18CE[++v31];
          }
          while (v31 != 2);
          v28 += 2;
        }
        else
        {
          *v28++ = v31;
          LOWORD(v31) = 1;
        }
        v30 += v31;
        ++v6;
        ++v29;
      }
      while (v29 != v12);
    }
    else
    {
      __int16 v30 = 0;
    }
    *int v28 = 0;
    *v25 += v30;
    *((_WORD *)a1 + a2 + 56) += v19;
  }
  return result;
}

uint64_t com_depes_AddToLayerN(uint64_t *a1, unsigned int a2, char *a3, int a4)
{
  return com_depes_AddToLayerGen(a1, a2, a3, a4, 1);
}

uint64_t com_depes_AddToLayer(uint64_t *a1, unsigned int a2, char *__s)
{
  int v6 = (unsigned __int16)cstdlib_strlen(__s);

  return com_depes_AddToLayerGen(a1, a2, __s, v6, 1);
}

uint64_t com_depes_FillToMaxLayerSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    uint64_t v12 = 0;
    unsigned __int16 v13 = 0;
    do
    {
      if (*(_DWORD *)(a2 + 4 * v12) == 1 && *(unsigned __int16 *)(a1 + 2 * v12 + 112) > v13) {
        unsigned __int16 v13 = *(_WORD *)(a1 + 2 * v12 + 112);
      }
      ++v12;
    }
    while (v8 != v12);
    unint64_t v14 = 0;
    do
    {
      if (*(_DWORD *)(a2 + 4 * v14) == 1)
      {
        uint64_t v15 = a1 + 2 * v14;
        int v16 = *(unsigned __int16 *)(v15 + 112);
        __int16 v17 = v13 - v16;
        uint64_t result = com_depes_PrepareLayersForLen((uint64_t *)a1, (unsigned __int16)(*(_WORD *)(v15 + 96) + v13 - v16), a3, a4, a5, a6, a7, a8);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v19 = *(unsigned __int8 *)(a3 + v14);
        uint64_t v20 = *(unsigned __int16 *)(v15 + 96);
        if (!*(unsigned char *)(a3 + v14))
        {
          if (*(_WORD *)(v15 + 96)) {
            int v19 = *(unsigned __int8 *)(*(void *)(a1 + 8 * v14 + 16) + (v20 - 1));
          }
          else {
            int v19 = 126;
          }
        }
        uint64_t v21 = *(void *)(a1 + 8 * v14 + 16);
        uint64_t v22 = (unsigned char *)(v21 + v20);
        if (v16 != v13)
        {
          unsigned __int16 v23 = v13 + ~(_WORD)v16;
          memset(v22, v19, v23 + 1);
          uint64_t v22 = (unsigned char *)(v21 + v20 + v23 + 1);
        }
        *uint64_t v22 = 0;
        *(_WORD *)(v15 + 96) += v17;
        *(_WORD *)(v15 + 112) += v17;
        LODWORD(v8) = *(unsigned __int16 *)(a1 + 10);
      }
      ++v14;
    }
    while (v14 < v8);
  }
  return 0;
}

uint64_t com_depes_FillToMaxLayerRange(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = a2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a2 || (bzero(v14, 4 * a2), v10 <= a3))
  {
    do
    {
      v14[(unsigned __int16)v10] = 1;
      LOWORD(v10) = v10 + 1;
    }
    while (a3 >= (unsigned __int16)v10);
  }
  unsigned int v12 = *(unsigned __int16 *)(a1 + 10);
  if (v12 > (unsigned __int16)v10) {
    bzero(&v14[(unsigned __int16)v10], 4 * (unsigned __int16)(v12 + ~(_WORD)v10) + 4);
  }
  return com_depes_FillToMaxLayerSet(a1, (uint64_t)v14, a4, a4, a5, a6, a7, a8);
}

uint64_t com_depes_FillToMaxAllLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return com_depes_FillToMaxLayerRange(a1, 0, (unsigned __int16)(*(_WORD *)(a1 + 10) - 1), a2, a5, a6, a7, a8);
}

uint64_t com_depes_InsertBeforeEnd(uint64_t *a1, unsigned int a2, char *__s, int a4)
{
  unsigned int v5 = __s;
  uint64_t v8 = (char *)a1 + 2 * a2;
  unsigned int v11 = *((unsigned __int16 *)v8 + 48);
  unsigned int v9 = v8 + 96;
  unsigned int v10 = v11;
  unsigned __int16 v12 = cstdlib_strlen(__s);
  int v13 = v12;
  __int16 v14 = Utf8_LengthInUtf8chars((unint64_t)v5, v12);
  uint64_t v21 = com_depes_PrepareLayersForLen(a1, (unsigned __int16)(*v9 + v12), v15, v16, v17, v18, v19, v20);
  if ((v21 & 0x80000000) == 0)
  {
    unsigned int v22 = a4 & ~(a4 >> 31);
    if (v22 >= v10) {
      size_t v23 = v10;
    }
    else {
      size_t v23 = v22;
    }
    uint64_t v24 = &a1[a2];
    uint64_t v26 = v24[2];
    uint64_t v25 = v24 + 2;
    unsigned int v27 = (unsigned char *)(v26 + (unsigned __int16)*v9 - v23);
    cstdlib_memmove(&v27[v12], v27, v23);
    if (v12)
    {
      do
      {
        char v28 = *v5++;
        *v27++ = v28;
        --v13;
      }
      while (v13);
    }
    unsigned __int16 v29 = *v9 + v12;
    *unsigned int v9 = v29;
    *((_WORD *)a1 + a2 + 56) += v14;
    *(unsigned char *)(*v25 + v29) = 0;
  }
  return v21;
}

size_t GetContextLenInNrChars(size_t result, int a2, int a3, int a4, int a5, _WORD *a6, _WORD *a7)
{
  size_t v13 = result;
  int v14 = 0;
  *a6 = 0;
  LOWORD(v15) = a2;
  *a7 = 0;
  if (a2 <= a3)
  {
    Utf32SymToUtf8Sym(*(_DWORD *)(result + 4 * a2), __s, 5u);
    uint64_t result = cstdlib_strlen(__s);
    int v14 = (__int16)result;
  }
  if (a2 < a3 && v14 <= a4)
  {
    uint64_t v15 = a2;
    do
    {
      unsigned int v16 = *(_DWORD *)(v13 + 4 + 4 * v15++);
      Utf32SymToUtf8Sym(v16, __s, 5u);
      uint64_t result = cstdlib_strlen(__s);
      if (v15 >= a3) {
        break;
      }
      int v14 = (__int16)(v14 + result);
    }
    while (v14 <= a4);
  }
  *a6 = v15 - a2;
  if (a2 <= a3)
  {
    Utf32SymToUtf8Sym(*(_DWORD *)(v13 + 4 * a3), __s, 5u);
    uint64_t result = cstdlib_strlen(__s);
    int v17 = (__int16)result;
  }
  else
  {
    int v17 = 0;
  }
  LOWORD(v18) = a3;
  if (a2 < a3 && v17 <= a5)
  {
    uint64_t v18 = a3;
    do
    {
      unsigned int v19 = *(_DWORD *)(v13 - 4 + 4 * v18--);
      Utf32SymToUtf8Sym(v19, __s, 5u);
      uint64_t result = cstdlib_strlen(__s);
      if (v18 <= a2) {
        break;
      }
      int v17 = (__int16)(v17 + result);
    }
    while (v17 <= a5);
  }
  *a7 = a3 - v18;
  return result;
}

uint64_t INFERENCE(uint64_t a1, uint64_t a2, int a3, __int16 *a4)
{
  if (*(unsigned char *)(a1 + 1428)) {
    return 0;
  }
  unsigned int v5 = a4;
  uint64_t v7 = a2;
  long long v172 = 0u;
  long long v173 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  memset(v147, 0, sizeof(v147));
  uint64_t v9 = *a4;
  if (*(__int16 *)(a1 + 24) <= 0)
  {
    uint64_t v12 = a3;
    uint64_t v13 = a3 - 1;
    size_t v14 = (unsigned __int16)(v9 - a3 + 1);
    uint64_t v15 = v9 + 1;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = a3;
    uint64_t v13 = a3 - 1;
    size_t v14 = (unsigned __int16)(v9 - a3 + 1);
    uint64_t v15 = v9 + 1;
    uint64_t v16 = *(void *)(a1 + 1504);
    do
    {
      cstdlib_memmove((void *)(*(void *)(v16 + 8 * v11) + 4 * a3), (const void *)(*(void *)(v16 + 8 * v11) + 4 * v13), 4 * v14);
      uint64_t v16 = *(void *)(a1 + 1504);
      uint64_t v17 = *(void *)(v16 + 8 * v11);
      *(_DWORD *)(v17 + 4 * v15) = 31;
      *(_DWORD *)(v17 + 4 * v13) = 31;
      ++v11;
    }
    while (v11 < *(__int16 *)(a1 + 24));
    unsigned int v5 = a4;
    uint64_t v7 = a2;
  }
  cstdlib_memmove((void *)(*(void *)(a1 + 1560) + v12), (const void *)(*(void *)(a1 + 1560) + v13), v14);
  *(unsigned char *)(*(void *)(a1 + 1560) + v15) = 0;
  *(unsigned char *)(*(void *)(a1 + 1560) + v13) = 0;
  __int16 v18 = *v5 + 1;
  *unsigned int v5 = v18;
  WORD1(v147[2]) = v18;
  uint64_t v19 = **(void **)(a1 + 1504);
  *(void *)(a1 + 1448) = v19;
  *(void *)(a1 + 1440) = v19;
  *((void *)&v147[0] + 1) = v19;
  *(void *)&v147[1] = v19;
  *(_WORD *)(a1 + 1410) = 0;
  __int16 v177 = 0;
  uint64_t v175 = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  cstdlib_memset((char *)&v147[2] + 4, 0, 0x200uLL);
  if (SWORD1(v147[2]) > a3)
  {
    uint64_t v23 = a3;
    do
    {
      Utf32SymToUtf8Sym(*(_DWORD *)(**(void **)(a1 + 1504) + 4 * v23), v146, 5u);
      unsigned int v24 = v146[0];
      if (v146[0])
      {
        int v25 = 0;
        do
        {
          ++*((_WORD *)&v147[2] + v24 + 2);
          unsigned int v24 = v146[(__int16)++v25];
        }
        while (v146[(__int16)v25]);
      }
      ++v23;
    }
    while (v23 < SWORD1(v147[2]));
  }
  WORD1(v148) = 2;
  HIWORD(v147[1]) = *(_WORD *)(*(void *)(a1 + 64) + 2 * ((int)v7 - 1)) - 1;
  if ((HIWORD(v147[1]) & 0x8000) != 0) {
    return 0;
  }
  uint64_t v26 = (int)v7 - 1;
  log_OutText(*(void *)(*(void *)(a1 + 2080) + 32), (uint64_t)"FE_DEPES", 6, 0, (uint64_t)"Start gram number %d", v20, v21, v22, v7);
  *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 1430) + 1568) = a3;
  int v27 = SHIWORD(v147[1]);
  *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 1430) + 1824) = HIWORD(v147[1]);
  if (v27 < *(__int16 *)(*(void *)(a1 + 72) + 2 * v26))
  {
    char v28 = (uint64_t *)(a1 + 152);
    do
    {
      uint64_t v29 = *(void *)(a1 + 120);
      LODWORD(v147[0]) = *(_DWORD *)(*(void *)(a1 + 112) + 4 * (__int16)v27);
      GetContextLenInNrChars(*((size_t *)&v147[0] + 1), a3, SWORD1(v147[2]), *(unsigned __int8 *)(v29 + (__int16)v27), *(unsigned __int8 *)(*(void *)(a1 + 128) + (__int16)v27), (_WORD *)&v147[1] + 4, (_WORD *)&v147[1] + 5);
      uint64_t v34 = HIWORD(v147[1]) + 1;
      ++HIWORD(v147[1]);
      uint64_t v35 = *(void *)(a1 + 176);
      uint64_t v36 = LODWORD(v147[0]);
      unsigned int v37 = *(unsigned __int8 *)(v35 + (LODWORD(v147[0]) - 1));
      if (v37 > 0x64) {
        v37 -= 100;
      }
      *(_WORD *)(a1 + 1408) = v37;
      switch(v37)
      {
        case 1u:
          uint64_t v38 = (__int16)v34 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v38) + 2))
          {
            if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v38) + 2))
            {
              unsigned __int8 v176 = *(unsigned char *)(v35 + v36);
              LOWORD(v39) = WORD4(v147[1]) + a3;
              LOWORD(v147[2]) = WORD4(v147[1]) + a3;
              if (SWORD1(v147[2]) - SWORD5(v147[1]) >= (__int16)(WORD4(v147[1]) + a3))
              {
                int v39 = (__int16)v39;
                do
                {
                  if (*(unsigned char *)(a1 + 1428)) {
                    break;
                  }
                  Utf32SymToUtf8Sym(*(_DWORD *)(*(void *)(a1 + 1440) + 4 * (v39 - 1)), v146, 5u);
                  if (v146[0] == v176)
                  {
                    unsigned __int16 v174 = 0;
                    *(void *)(a1 + 1456) = *(void *)(a1 + 176) + (LODWORD(v147[0]) + 1);
                    *(_WORD *)(a1 + 1470) = 1;
                    EXEC_RULE(a1, SHIWORD(v147[1]), (__int16)(LOWORD(v147[2]) + 1), (uint64_t)v147, v40, v41, v42, v43);
                    __int16 v44 = v174 + 1;
                    __int16 v45 = v147[2];
                  }
                  else
                  {
                    __int16 v45 = 1;
                    __int16 v44 = v147[2];
                  }
                  LOWORD(v147[2]) = v44 + v45;
                  int v39 = (__int16)(v44 + v45);
                }
                while (SWORD1(v147[2]) - SWORD5(v147[1]) >= SLOWORD(v147[2]));
              }
            }
          }
          goto LABEL_219;
        case 2u:
          uint64_t v48 = (__int16)v34 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v48) + 2))
          {
            if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v48) + 2))
            {
              LOWORD(v49) = WORD1(v147[2]) - WORD5(v147[1]) + 1;
              LOWORD(v147[2]) = v49;
              unsigned __int8 v176 = *(unsigned char *)(v35 + v36);
              if (SWORD4(v147[1]) + a3 <= (__int16)v49)
              {
                int v49 = (__int16)v49;
                do
                {
                  if (*(unsigned char *)(a1 + 1428)) {
                    break;
                  }
                  Utf32SymToUtf8Sym(*(_DWORD *)(*(void *)(a1 + 1440) + 4 * (v49 - 1)), v146, 5u);
                  if (v146[0] == v176)
                  {
                    *(void *)(a1 + 1456) = *(void *)(a1 + 176) + (LODWORD(v147[0]) + 1);
                    *(_WORD *)(a1 + 1470) = 1;
                    EXEC_RULE(a1, SHIWORD(v147[1]), (__int16)(LOWORD(v147[2]) + 1), (uint64_t)v147, v50, v51, v52, v53);
                  }
                  --LOWORD(v147[2]);
                  int v49 = SLOWORD(v147[2]);
                }
                while (SWORD4(v147[1]) + a3 <= SLOWORD(v147[2]));
              }
            }
          }
          goto LABEL_219;
        case 3u:
          uint64_t v54 = (__int16)v34 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v54) + 2))
          {
            if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v54) + 2))
            {
              __int16 v55 = WORD4(v147[1]) + a3;
              LOWORD(v147[2]) = WORD4(v147[1]) + a3;
              unsigned __int8 v176 = *(unsigned char *)(v35 + v36);
              *(_DWORD *)(a1 + 1384) = 0;
              if (SWORD1(v147[2]) - SWORD5(v147[1]) >= v55)
              {
                int v56 = v55;
                do
                {
                  if (*(unsigned char *)(a1 + 1428)) {
                    goto LABEL_62;
                  }
                  Utf32SymToUtf8Sym(*(_DWORD *)(*(void *)(a1 + 1440) + 4 * (v56 - 1)), v146, 5u);
                  if (v146[0] == v176)
                  {
                    *(void *)(a1 + 1456) = *(void *)(a1 + 176) + (LODWORD(v147[0]) + 1);
                    *(_WORD *)(a1 + 1470) = 1;
                    EXEC_RULE(a1, SHIWORD(v147[1]), (__int16)(LOWORD(v147[2]) + 1), (uint64_t)v147, v57, v58, v59, v60);
                    __int16 v61 = ++LOWORD(v147[2]);
                    if (*(_DWORD *)(a1 + 1384) == 1) {
                      goto LABEL_91;
                    }
                  }
                  else
                  {
                    __int16 v61 = ++LOWORD(v147[2]);
                  }
                  int v56 = v61;
                }
                while (SWORD1(v147[2]) - SWORD5(v147[1]) >= v61);
                goto LABEL_62;
              }
            }
          }
          goto LABEL_219;
        case 4u:
          uint64_t v62 = (__int16)v34 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v62) + 2))
          {
            if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v62) + 2))
            {
              __int16 v63 = WORD1(v147[2]) - WORD5(v147[1]) + 1;
              LOWORD(v147[2]) = v63;
              unsigned __int8 v176 = *(unsigned char *)(v35 + v36);
              *(_DWORD *)(a1 + 1384) = 0;
              if (SWORD4(v147[1]) + a3 <= v63)
              {
                int v64 = v63;
                do
                {
                  if (*(unsigned char *)(a1 + 1428)) {
                    break;
                  }
                  Utf32SymToUtf8Sym(*(_DWORD *)(*(void *)(a1 + 1440) + 4 * (v64 - 1)), v146, 5u);
                  if (v146[0] == v176)
                  {
                    *(_WORD *)(a1 + 1470) = 1;
                    *(void *)(a1 + 1456) = *(void *)(a1 + 176) + (LODWORD(v147[0]) + 1);
                    EXEC_RULE(a1, SHIWORD(v147[1]), (__int16)(LOWORD(v147[2]) + 1), (uint64_t)v147, v65, v66, v67, v68);
                    __int16 v69 = --LOWORD(v147[2]);
                    if (*(_DWORD *)(a1 + 1384) == 1) {
                      goto LABEL_91;
                    }
                  }
                  else
                  {
                    __int16 v69 = --LOWORD(v147[2]);
                  }
                  int v64 = v69;
                }
                while (SWORD4(v147[1]) + a3 <= v69);
LABEL_62:
                if (*(_DWORD *)(a1 + 1384) == 1) {
                  goto LABEL_91;
                }
              }
            }
          }
          goto LABEL_219;
        case 5u:
          uint64_t v70 = (__int16)v34 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v70) + 2)
            && *((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v70) + 2))
          {
            for (__int16 i = WORD4(v147[1]) + a3; ; __int16 i = v174 + LOWORD(v147[2]) + 1)
            {
              LOWORD(v147[2]) = i;
              if (SWORD1(v147[2]) - SWORD5(v147[1]) < i || *(unsigned char *)(a1 + 1428)) {
                break;
              }
              unsigned __int16 v174 = 0;
              *(void *)(a1 + 1456) = *(void *)(a1 + 176) + LODWORD(v147[0]);
              *(_WORD *)(a1 + 1470) = 0;
              EXEC_RULE(a1, SHIWORD(v147[1]), i, (uint64_t)v147, v30, v31, v32, v33);
            }
          }
          goto LABEL_219;
        case 6u:
          uint64_t v72 = (__int16)v34 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v72) + 2)
            && *((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v72) + 2))
          {
            for (__int16 j = WORD1(v147[2]) - WORD5(v147[1]); ; __int16 j = LOWORD(v147[2]) - 1)
            {
              LOWORD(v147[2]) = j;
              if (SWORD4(v147[1]) + a3 > j || *(unsigned char *)(a1 + 1428)) {
                break;
              }
              *(void *)(a1 + 1456) = *(void *)(a1 + 176) + LODWORD(v147[0]);
              *(_WORD *)(a1 + 1470) = 0;
              EXEC_RULE(a1, SHIWORD(v147[1]), j, (uint64_t)v147, v30, v31, v32, v33);
            }
          }
          goto LABEL_219;
        case 7u:
          uint64_t v74 = (__int16)v34 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v74) + 2))
          {
            if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v74) + 2))
            {
              __int16 v75 = WORD4(v147[1]) + a3;
              LOWORD(v147[2]) = WORD4(v147[1]) + a3;
              *(_DWORD *)(a1 + 1384) = 0;
              if (SWORD1(v147[2]) - SWORD5(v147[1]) >= v75)
              {
                while (1)
                {
                  int v76 = *(_DWORD *)(a1 + 1384);
                  if (v76) {
                    goto LABEL_90;
                  }
                  if (*(unsigned char *)(a1 + 1428)) {
                    break;
                  }
                  *(void *)(a1 + 1456) = *(void *)(a1 + 176) + LODWORD(v147[0]);
                  *(_WORD *)(a1 + 1470) = 0;
                  EXEC_RULE(a1, SHIWORD(v147[1]), v75, (uint64_t)v147, v30, v31, v32, v33);
                  __int16 v75 = LOWORD(v147[2]) + 1;
                  LOWORD(v147[2]) = v75;
                  if (SWORD1(v147[2]) - SWORD5(v147[1]) < v75) {
                    goto LABEL_89;
                  }
                }
              }
            }
          }
          goto LABEL_219;
        case 8u:
          uint64_t v77 = (__int16)v34 - 1;
          if (!*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v77) + 2)) {
            goto LABEL_219;
          }
          if (!*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 168) + v77) + 2)) {
            goto LABEL_219;
          }
          __int16 v78 = WORD1(v147[2]) - WORD5(v147[1]);
          LOWORD(v147[2]) = WORD1(v147[2]) - WORD5(v147[1]);
          *(_DWORD *)(a1 + 1384) = 0;
          if (SWORD4(v147[1]) + a3 > v78) {
            goto LABEL_219;
          }
          while (1)
          {
            int v76 = *(_DWORD *)(a1 + 1384);
            if (v76) {
              break;
            }
            if (*(unsigned char *)(a1 + 1428)) {
              goto LABEL_219;
            }
            *(void *)(a1 + 1456) = *(void *)(a1 + 176) + LODWORD(v147[0]);
            *(_WORD *)(a1 + 1470) = 0;
            EXEC_RULE(a1, SHIWORD(v147[1]), v78, (uint64_t)v147, v30, v31, v32, v33);
            __int16 v78 = LOWORD(v147[2]) - 1;
            LOWORD(v147[2]) = v78;
            if (SWORD4(v147[1]) + a3 > v78)
            {
LABEL_89:
              int v76 = *(_DWORD *)(a1 + 1384);
              break;
            }
          }
LABEL_90:
          if (v76 == 1)
          {
LABEL_91:
            uint64_t v79 = *(void *)(a1 + 144);
            uint64_t v80 = SHIWORD(v147[1]);
            goto LABEL_131;
          }
          goto LABEL_219;
        case 9u:
          LODWORD(v175) = 1;
          int v81 = WORD4(v147[1]) + a3;
          LOWORD(v147[2]) = WORD4(v147[1]) + a3;
          __int16 v82 = WORD5(v147[1]);
          if (SWORD1(v147[2]) - SWORD5(v147[1]) < (__int16)(WORD4(v147[1]) + a3)) {
            goto LABEL_217;
          }
          __int16 v83 = WORD1(v147[2]);
          while (1)
          {
            LOWORD(v84) = HIWORD(v147[1]);
            if (*(unsigned char *)(a1 + 1428)) {
              break;
            }
            unsigned __int16 v174 = -2;
            __int16 v85 = HIWORD(v147[1]) + *(unsigned __int8 *)(SHIWORD(v147[1]) + *v28 - 1);
            WORD6(v147[1]) = v85;
            if (SHIWORD(v147[1]) > v85) {
              goto LABEL_101;
            }
            __int16 v86 = v85;
            do
            {
              uint64_t v87 = (__int16)v84 - 1;
              if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v87) + 2))
              {
                *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v87);
                *(_WORD *)(a1 + 1470) = 0;
                EXEC_RULE(a1, (__int16)v84, SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
                __int16 v86 = WORD6(v147[1]);
              }
              int v84 = (__int16)(v84 + 1);
            }
            while (v84 <= v86);
            int v81 = LOWORD(v147[2]);
            __int16 v83 = WORD1(v147[2]);
            __int16 v82 = WORD5(v147[1]);
            if (v174 == 65534) {
LABEL_101:
            }
              int v88 = 1;
            else {
              int v88 = v174 + 1;
            }
            v81 += v88;
            LOWORD(v147[2]) = v81;
            if (v83 - v82 < (__int16)v81)
            {
              LOWORD(v34) = HIWORD(v147[1]);
              goto LABEL_217;
            }
          }
          LOWORD(v34) = HIWORD(v147[1]);
          goto LABEL_217;
        case 0xAu:
          int v89 = WORD1(v147[2]) - WORD5(v147[1]);
          LOWORD(v147[2]) = WORD1(v147[2]) - WORD5(v147[1]);
          if (SWORD4(v147[1]) + a3 > (__int16)(WORD1(v147[2]) - WORD5(v147[1]))) {
            goto LABEL_222;
          }
          __int16 v90 = WORD4(v147[1]);
          while (1)
          {
            LOWORD(v91) = HIWORD(v147[1]);
            if (*(unsigned char *)(a1 + 1428)) {
              break;
            }
            __int16 v92 = HIWORD(v147[1]) + *(unsigned __int8 *)(SHIWORD(v147[1]) + *v28 - 1);
            WORD6(v147[1]) = v92;
            if (SHIWORD(v147[1]) <= v92)
            {
              __int16 v93 = v92;
              do
              {
                if (*(unsigned char *)(a1 + 1428)) {
                  break;
                }
                uint64_t v94 = (__int16)v91 - 1;
                if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v94) + 2))
                {
                  *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v94);
                  *(_WORD *)(a1 + 1470) = 0;
                  EXEC_RULE(a1, (__int16)v91, SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
                  __int16 v93 = WORD6(v147[1]);
                }
                int v91 = (__int16)(v91 + 1);
              }
              while (v91 <= v93);
              int v89 = LOWORD(v147[2]);
              __int16 v90 = WORD4(v147[1]);
            }
            LOWORD(v147[2]) = --v89;
            if (a3 + v90 > (__int16)v89)
            {
              LOWORD(v34) = HIWORD(v147[1]);
              goto LABEL_222;
            }
          }
          LOWORD(v34) = HIWORD(v147[1]);
LABEL_222:
          __int16 v131 = v34 + *(unsigned __int8 *)(*v28 + (__int16)v34 - 1);
          goto LABEL_199;
        case 0xBu:
          int v95 = WORD4(v147[1]) + a3;
          LOWORD(v147[2]) = WORD4(v147[1]) + a3;
          *(_DWORD *)(a1 + 1384) = 0;
          __int16 v96 = v34 + *(unsigned __int8 *)(*(void *)(a1 + 152) + (__int16)v34 - 1);
          WORD6(v147[1]) = v96;
          __int16 v97 = WORD1(v147[2]);
          __int16 v98 = WORD5(v147[1]);
          if (SWORD1(v147[2]) - SWORD5(v147[1]) < (__int16)v95) {
            goto LABEL_129;
          }
          while (!*(_DWORD *)(a1 + 1384))
          {
            if (*(unsigned char *)(a1 + 1428)) {
              goto LABEL_129;
            }
            LOWORD(v99) = HIWORD(v147[1]);
            if (SHIWORD(v147[1]) <= v96)
            {
              do
              {
                if (*(unsigned char *)(a1 + 1428)) {
                  break;
                }
                uint64_t v100 = (__int16)v99 - 1;
                if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v100) + 2))
                {
                  *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v100);
                  *(_WORD *)(a1 + 1470) = 0;
                  EXEC_RULE(a1, (__int16)v99, SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
                  __int16 v96 = WORD6(v147[1]);
                }
                int v99 = (__int16)(v99 + 1);
              }
              while (v99 <= v96);
              int v95 = LOWORD(v147[2]);
              __int16 v97 = WORD1(v147[2]);
              __int16 v98 = WORD5(v147[1]);
            }
            LOWORD(v147[2]) = ++v95;
            if (v97 - v98 < (__int16)v95) {
              goto LABEL_182;
            }
          }
          goto LABEL_214;
        case 0xCu:
          int v101 = WORD1(v147[2]) - WORD5(v147[1]);
          LOWORD(v147[2]) = WORD1(v147[2]) - WORD5(v147[1]);
          *(_DWORD *)(a1 + 1384) = 0;
          __int16 v102 = v34 + *(unsigned __int8 *)(*(void *)(a1 + 152) + (__int16)v34 - 1);
          WORD6(v147[1]) = v102;
          __int16 v103 = WORD4(v147[1]);
          if (SWORD4(v147[1]) + a3 > (__int16)v101) {
            goto LABEL_129;
          }
          do
          {
            if (*(_DWORD *)(a1 + 1384))
            {
LABEL_214:
              uint64_t v104 = (uint64_t *)(a1 + 144);
              goto LABEL_130;
            }
            if (*(unsigned char *)(a1 + 1428)) {
              goto LABEL_129;
            }
            LOWORD(v124) = HIWORD(v147[1]);
            if (SHIWORD(v147[1]) <= v102)
            {
              do
              {
                if (*(unsigned char *)(a1 + 1428)) {
                  break;
                }
                uint64_t v125 = (__int16)v124 - 1;
                if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v125) + 2))
                {
                  *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v125);
                  *(_WORD *)(a1 + 1470) = 0;
                  EXEC_RULE(a1, (__int16)v124, SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
                  __int16 v102 = WORD6(v147[1]);
                }
                int v124 = (__int16)(v124 + 1);
              }
              while (v124 <= v102);
              int v101 = LOWORD(v147[2]);
              __int16 v103 = WORD4(v147[1]);
            }
            LOWORD(v147[2]) = --v101;
          }
          while (a3 + v103 <= (__int16)v101);
LABEL_182:
          uint64_t v104 = (uint64_t *)(a1 + 144);
          if (!*(_DWORD *)(a1 + 1384)) {
LABEL_129:
          }
            uint64_t v104 = (uint64_t *)(a1 + 152);
LABEL_130:
          uint64_t v80 = SHIWORD(v147[1]);
          uint64_t v79 = *v104;
LABEL_131:
          uint64_t v105 = v80 + v79;
          goto LABEL_198;
        case 0xDu:
          LODWORD(v175) = 1;
          __int16 v106 = WORD4(v147[1]) + a3;
          LOWORD(v147[2]) = WORD4(v147[1]) + a3;
          do
          {
            if (SWORD1(v147[2]) - SWORD5(v147[1]) < v106 || *(unsigned char *)(a1 + 1428)) {
              break;
            }
            __int16 v107 = 0;
            unsigned __int16 v174 = -2;
            *(_DWORD *)(a1 + 1384) = 0;
            while (1)
            {
              int v108 = v107;
              uint64_t v109 = (__int16)v34 - 1;
              int v110 = *(_DWORD *)(a1 + 1384);
              BOOL v111 = v108 <= *(unsigned __int8 *)(*(void *)(a1 + 152) + v109) && v110 == 0;
              if (!v111 || *(unsigned char *)(a1 + 1428)) {
                break;
              }
              int v112 = v109 + v108;
              if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v112) + 2))
              {
                *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v112);
                *(_WORD *)(a1 + 1470) = 0;
                EXEC_RULE(a1, (__int16)(v34 + v108), SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
                LOWORD(v34) = HIWORD(v147[1]);
              }
              __int16 v107 = v108 + 1;
              int v113 = *(__int16 *)(a1 + 44);
              if (v113 < (__int16)v34)
              {
                int v110 = *(_DWORD *)(a1 + 1384);
                goto LABEL_147;
              }
            }
            LOWORD(v113) = *(_WORD *)(a1 + 44);
LABEL_147:
            __int16 v114 = v110 ? v174 + 1 : 1;
            __int16 v106 = v114 + LOWORD(v147[2]);
            LOWORD(v147[2]) = v106;
          }
          while ((__int16)v34 <= (__int16)v113);
          if (*(__int16 *)(a1 + 44) > (__int16)v34) {
LABEL_217:
          }
            HIWORD(v147[1]) = v34 + *(unsigned __int8 *)(*v28 + (__int16)v34 - 1);
          LODWORD(v175) = 0;
          goto LABEL_219;
        case 0xEu:
          LOWORD(v147[2]) = WORD1(v147[2]) - WORD5(v147[1]);
          if (SWORD4(v147[1]) + a3 > (__int16)(WORD1(v147[2]) - WORD5(v147[1])))
          {
            LOWORD(v80) = v34;
            goto LABEL_196;
          }
          uint64_t v80 = v34;
          do
          {
            int v126 = *(unsigned __int8 *)(a1 + 1428);
            if (*(unsigned char *)(a1 + 1428)) {
              break;
            }
            __int16 v127 = 0;
            *(_DWORD *)(a1 + 1384) = 0;
            int v128 = (__int16)v34;
            while (1)
            {
              if (*(unsigned char *)(a1 + 1428))
              {
                uint64_t v130 = v34;
                goto LABEL_195;
              }
              int v129 = v128 + v126 - 1;
              if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v129) + 2))
              {
                *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v129);
                *(_WORD *)(a1 + 1470) = 0;
                EXEC_RULE(a1, (__int16)(v34 + v127), SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
                uint64_t v80 = HIWORD(v147[1]);
              }
              int v126 = ++v127;
              if (v127 > (int)*(unsigned __int8 *)(*v28 + (__int16)v80 - 1)) {
                break;
              }
              int v128 = (__int16)v80;
              uint64_t v34 = v80;
              uint64_t v130 = v80;
              if (*(_DWORD *)(a1 + 1384)) {
                goto LABEL_195;
              }
            }
            uint64_t v130 = v80;
LABEL_195:
            --LOWORD(v147[2]);
            uint64_t v34 = v130;
          }
          while (SWORD4(v147[1]) + a3 <= SLOWORD(v147[2]));
LABEL_196:
          uint64_t v123 = *v28;
          goto LABEL_197;
        case 0xFu:
          __int16 v115 = WORD4(v147[1]) + a3;
          LOWORD(v147[2]) = WORD4(v147[1]) + a3;
          *(_DWORD *)(a1 + 1384) = 0;
          if (SWORD1(v147[2]) - SWORD5(v147[1]) < v115) {
            goto LABEL_170;
          }
          uint64_t v80 = v34;
          while (!*(_DWORD *)(a1 + 1384))
          {
            int v116 = *(unsigned __int8 *)(a1 + 1428);
            if (*(unsigned char *)(a1 + 1428)) {
              goto LABEL_171;
            }
            __int16 v117 = 0;
            int v118 = (__int16)v34;
            while (!*(_DWORD *)(a1 + 1384) && !*(unsigned char *)(a1 + 1428))
            {
              int v119 = v118 + v116 - 1;
              if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v119) + 2))
              {
                *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v119);
                *(_WORD *)(a1 + 1470) = 0;
                EXEC_RULE(a1, (__int16)(v34 + v117), SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
                uint64_t v80 = HIWORD(v147[1]);
              }
              int v116 = ++v117;
              int v118 = (__int16)v80;
              uint64_t v34 = v80;
              uint64_t v120 = v80;
              if (v117 > (int)*(unsigned __int8 *)(*v28 + (__int16)v80 - 1)) {
                goto LABEL_167;
              }
            }
            uint64_t v120 = v34;
LABEL_167:
            ++LOWORD(v147[2]);
            uint64_t v34 = v120;
            if (SWORD1(v147[2]) - SWORD5(v147[1]) < SLOWORD(v147[2])) {
              goto LABEL_212;
            }
          }
          goto LABEL_215;
        case 0x10u:
          __int16 v121 = WORD1(v147[2]) - WORD5(v147[1]);
          LOWORD(v147[2]) = WORD1(v147[2]) - WORD5(v147[1]);
          *(_DWORD *)(a1 + 1384) = 0;
          if (SWORD4(v147[1]) + a3 > v121)
          {
LABEL_170:
            LOWORD(v80) = v34;
            goto LABEL_171;
          }
          uint64_t v80 = v34;
          break;
        default:
          if (v37 == 99)
          {
            uint64_t v46 = *(void *)(a1 + 1504);
            *((void *)&v147[0] + 1) = *(void *)(v46 + 8 * *(unsigned __int8 *)(v35 + v36) - 8);
            *(void *)(a1 + 1440) = *((void *)&v147[0] + 1);
            unsigned int v47 = v36 + 1;
            *(void *)&v147[1] = *(void *)(v46 + 8 * *(unsigned __int8 *)(v35 + v47) - 8);
            *(void *)(a1 + 1448) = *(void *)&v147[1];
            LOWORD(v46) = *(unsigned __int8 *)(v35 + v47) - 1;
            *(_WORD *)(a1 + 1410) = v46;
            __int16 v177 = v46;
          }
          goto LABEL_219;
      }
      do
      {
        if (*(_DWORD *)(a1 + 1384))
        {
LABEL_215:
          uint64_t v122 = (uint64_t *)(a1 + 144);
          goto LABEL_172;
        }
        int v132 = *(unsigned __int8 *)(a1 + 1428);
        if (*(unsigned char *)(a1 + 1428)) {
          goto LABEL_171;
        }
        __int16 v133 = 0;
        int v134 = (__int16)v34;
        while (!*(_DWORD *)(a1 + 1384) && !*(unsigned char *)(a1 + 1428))
        {
          int v135 = v134 + v132 - 1;
          if (*((_WORD *)&v147[2] + *(unsigned __int8 *)(*(void *)(a1 + 160) + v135) + 2))
          {
            *(void *)(a1 + 1456) = *(void *)(a1 + 176) + *(unsigned int *)(*(void *)(a1 + 112) + 4 * v135);
            *(_WORD *)(a1 + 1470) = 0;
            EXEC_RULE(a1, (__int16)(v34 + v133), SLOWORD(v147[2]), (uint64_t)v147, v30, v31, v32, v33);
            uint64_t v80 = HIWORD(v147[1]);
          }
          int v132 = ++v133;
          int v134 = (__int16)v80;
          uint64_t v34 = v80;
          uint64_t v136 = v80;
          if (v133 > (int)*(unsigned __int8 *)(*v28 + (__int16)v80 - 1)) {
            goto LABEL_211;
          }
        }
        uint64_t v136 = v34;
LABEL_211:
        --LOWORD(v147[2]);
        uint64_t v34 = v136;
      }
      while (SWORD4(v147[1]) + a3 <= SLOWORD(v147[2]));
LABEL_212:
      uint64_t v122 = (uint64_t *)(a1 + 144);
      if (!*(_DWORD *)(a1 + 1384)) {
LABEL_171:
      }
        uint64_t v122 = (uint64_t *)(a1 + 152);
LABEL_172:
      uint64_t v123 = *v122;
LABEL_197:
      uint64_t v105 = v123 + (__int16)v80;
LABEL_198:
      __int16 v131 = v80 + *(unsigned __int8 *)(v105 - 1);
LABEL_199:
      HIWORD(v147[1]) = v131;
LABEL_219:
      LOWORD(v27) = HIWORD(v147[1]);
    }
    while (SHIWORD(v147[1]) < *(__int16 *)(*(void *)(a1 + 72) + 2 * v26));
  }
  uint64_t v137 = SWORD1(v147[2]);
  *unsigned int v5 = WORD1(v147[2]);
  uint64_t v138 = a3 - 1;
  if (*(__int16 *)(a1 + 24) >= 1)
  {
    uint64_t v139 = 0;
    do
    {
      uint64_t v140 = *(void *)(*(void *)(a1 + 1504) + 8 * v139);
      cstdlib_memmove((void *)(v140 + 4 * v138), (const void *)(v140 + 4 * a3), 4 * (unsigned __int16)(v137 - a3 + 1));
      ++v139;
    }
    while (v139 < *(__int16 *)(a1 + 24));
  }
  *(unsigned char *)(*(void *)(a1 + 1560) + a3) += *(unsigned char *)(*(void *)(a1 + 1560) + v138);
  *(unsigned char *)(*(void *)(a1 + 1560) + v137 - 1) += *(unsigned char *)(*(void *)(a1 + 1560) + v137);
  cstdlib_memmove((void *)(*(void *)(a1 + 1560) + v138), (const void *)(*(void *)(a1 + 1560) + a3), (unsigned __int16)(v137 - a3));
  *(unsigned char *)(*(void *)(a1 + 1560) + v137 - 1) = 0;
  __int16 v144 = *v5 - 1;
  *unsigned int v5 = v144;
  if (!*(_WORD *)(a1 + 1430) && v144) {
    *(unsigned char *)(*(void *)(a1 + 1560) + v144 - 1) += *(unsigned char *)(*(void *)(a1 + 1560) + v144);
  }
  *(_DWORD *)(a1 + 1432) = 1;
  log_OutText(*(void *)(*(void *)(a1 + 2080) + 32), (uint64_t)"FE_DEPES", 6, 0, (uint64_t)"End gram number %d", v141, v142, v143, a2);
  if (*(unsigned char *)(a1 + 1428)) {
    *unsigned int v5 = a3 - 1;
  }
  return HIDWORD(v175);
}

uint64_t EXEC_RULE(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a3;
  int v288 = a2;
  uint64_t v10 = result;
  LOWORD(v11) = 0;
  unsigned int v291 = *(unsigned __int16 *)(a4 + 34);
  v289 = (__int16 *)(a4 + 34);
  *(_WORD *)(result + 1476) = 0;
  uint64_t v12 = (unsigned int **)(result + 2096);
  uint64_t v13 = (unsigned __int8 *)(result + 1400);
  char __s = (char *)(result + 1484);
  __int16 i = *(char **)(result + 1456);
  while (2)
  {
    switch(*i)
    {
      case 0:
        if (!(_WORD)v9) {
          goto LABEL_431;
        }
        __int16 v188 = *(_WORD *)(a4 + 32);
        *(_WORD *)(v10 + 1474) = v9 - v188;
        *(_WORD *)(v10 + 1468) = -1;
        *(_WORD *)(v10 + 1466) = v188 - 1;
        uint64_t result = CTXT(v10, a2, a3, a4, a5, a6, a7, a8);
        if (!result) {
          goto LABEL_431;
        }
        *(_WORD *)(v10 + 1468) = 1;
        *(_WORD *)(v10 + 1466) = v9;
        uint64_t result = CTXT(v10, v189, v190, v191, v192, v193, v194, v195);
        if (!result) {
          goto LABEL_431;
        }
        int v293 = 0;
        uint64_t v199 = *(__int16 *)(a4 + 32);
        __int16 v200 = *(_WORD *)(v10 + 1474);
        uint64_t v201 = (__int16)(v200 + v199);
        *(void *)(v10 + 1448) = *(void *)(a4 + 16);
        *(_DWORD *)(v10 + 1384) = 1;
        *(_WORD *)(v10 + 1410) = *(_WORD *)(a4 + 562);
        LOWORD(v202) = *(_WORD *)(a4 + 34);
        uint64_t v203 = *(void *)(v10 + 1456);
        uint64_t result = v203 + 1;
        *(void *)(v10 + 1456) = v203 + 1;
        int v204 = *(unsigned __int8 *)(v203 + 1);
        if (v204 == 22)
        {
          int v207 = *(unsigned __int8 *)(*(void *)(v10 + 136) + v288 - 1);
          if ((int)v201 - (int)v199 <= v207) {
            int v208 = 0;
          }
          else {
            int v208 = v201 - v199 - v207;
          }
          uint64_t result = v203 + 2;
          *(void *)(v10 + 1456) = v203 + 2;
        }
        else
        {
          if (v204 == 1)
          {
            *(void *)(v10 + 1456) = v203 + 2;
            int v205 = *(unsigned __int8 *)(v203 + 2);
            if (v205 == 1)
            {
              __int16 v206 = v200 - 1;
            }
            else if (v205 == 2)
            {
              __int16 v206 = v200 - 1;
              *(_WORD *)(a4 + 32) = **(_WORD **)(v10 + 184);
              *(_WORD *)(a4 + 30) = *(_WORD *)(v10 + 44);
            }
            else
            {
              if ((int)v199 < (int)v201)
              {
                uint64_t v238 = v199;
                do
                {
                  Utf32SymToUtf8Sym(*(_DWORD *)(**(void **)(v10 + 1504) + 4 * v238), v294, 5u);
                  unsigned int v239 = v294[0];
                  if (v294[0])
                  {
                    int v240 = 0;
                    do
                    {
                      --*(_WORD *)(a4 + 2 * v239 + 36);
                      unsigned int v239 = v294[(__int16)++v240];
                    }
                    while (v294[(__int16)v240]);
                  }
                  ++v238;
                }
                while (v238 != (int)v201);
              }
              uint64_t v241 = *(__int16 *)(v10 + 24);
              uint64_t v242 = (int)v201;
              if (v241 <= 0)
              {
                unsigned __int16 v244 = v202 - v201 + 1;
              }
              else
              {
                uint64_t v243 = 0;
                unsigned __int16 v244 = v202 - v201 + 1;
                do
                {
                  uint64_t v245 = *(void *)(v10 + 1416);
                  __int16 v246 = *(_WORD *)(v245 + 2 * v243) - v244;
                  *(_WORD *)(v245 + 2 * v243) = v246;
                  uint64_t v247 = *(void *)(*(void *)(v10 + 1504) + 8 * v243);
                  cstdlib_memmove((void *)(v247 + 4 * v246), (const void *)(v247 + 4 * (int)v201), 4 * v244);
                  ++v243;
                  uint64_t v241 = *(__int16 *)(v10 + 24);
                }
                while (v243 < v241);
              }
              uint64_t v248 = *(void *)(v10 + 1416);
              *(_WORD *)(v248 + 2 * v241) -= v244;
              cstdlib_memmove((void *)(*(void *)(v10 + 1560) + *(__int16 *)(v248 + 2 * *(__int16 *)(v10 + 24))), (const void *)(*(void *)(v10 + 1560) + (int)v201), v244);
              cstdlib_memset((void *)(*(void *)(v10 + 1560) + (int)v201), 0, v244);
              __int16 *v289 = v201;
              *(_DWORD *)(v10 + 1432) = 0;
              ++*(_WORD *)(v10 + 1430);
              __int16 v249 = *(_WORD *)(v10 + 1476);
              uint64_t v250 = **(unsigned __int8 **)(v10 + 1456) - 1;
              switch(*(unsigned char *)(*(void *)(v10 + 56) + v250))
              {
                case 0:
                  uint64_t v251 = v199;
                  INFERENCE(v10);
                  uint64_t result = 1;
                  break;
                case 1:
                  uint64_t v251 = v199;
                  INFERENCE(v10);
                  uint64_t result = 0;
                  break;
                case 2:
                  uint64_t v251 = v199;
                  uint64_t result = INFERENCE(v10);
                  break;
                case 3:
                  uint64_t v251 = v199;
                  uint64_t result = DCT_LKP(v10, *(void *)(*(void *)(v10 + 1520) + 8 * v250), v199, v289);
                  break;
                default:
                  uint64_t v251 = v199;
                  uint64_t result = pfExt[*(unsigned __int8 *)(*(void *)(v10 + 56) + v250)](v10, v199, v289);
                  break;
              }
              *(_DWORD *)(v10 + 1384) = result;
              *(_WORD *)(v10 + 1476) = v249;
              --*(_WORD *)(v10 + 1430);
              if (*(unsigned __int8 *)(v10 + 1428) == 156)
              {
LABEL_421:
                if (*(unsigned __int8 *)(v10 + 1428) == 156)
                {
                  *(_DWORD *)(v10 + 1384) = 1;
                  *(_WORD *)(a4 + 548) = *(_WORD *)(a4 + 34) - *(_WORD *)(a4 + 32);
                  *(_WORD *)(a4 + 32) = **(_WORD **)(v10 + 184);
                  *(_WORD *)(a4 + 30) = *(_WORD *)(v10 + 44);
                  *uint64_t v12 = 0;
                  v12[1] = 0;
                }
                else
                {
                  int v265 = *(_DWORD *)(v10 + 1384);
                  *uint64_t v12 = 0;
                  v12[1] = 0;
                  if (!v265)
                  {
LABEL_425:
                    uint64_t v266 = *(void *)(a4 + 8);
                    if (*(void *)(v10 + 1440) != v266) {
                      *(void *)(v10 + 1440) = v266;
                    }
                    if (*(__int16 *)(v10 + 2088) >= 6)
                    {
                      int v267 = *(__int16 *)(v10 + 2 * *(__int16 *)(v10 + 1430) + 1568);
                      int v268 = *v289;
                      Utf32LayersToUtf8Layers(v10, *v289);
                      uint64_t result = log_OutText(*(void *)(*(void *)(v10 + 2080) + 32), (uint64_t)"FE_DEPES", 6, 0, (uint64_t)"Rule number %d", v269, v270, v271, (v288 - *(__int16 *)(v10 + 2 * *(__int16 *)(v10 + 1430) + 1824)));
                      if (*(__int16 *)(v10 + 24) >= 1)
                      {
                        uint64_t v272 = 0;
                        do
                        {
                          v273 = *(unsigned __int8 **)(*(void *)(v10 + 1496) + 8 * v272);
                          uint64_t v274 = (uint64_t)&v273[(int)Utf8_LengthInBytes(v273, v267)];
                          v275 = *(unsigned __int8 **)(*(void *)(v10 + 1496) + 8 * v272);
                          unsigned __int8 v276 = v275[(int)Utf8_LengthInBytes(v275, v268)];
                          v277 = *(unsigned __int8 **)(*(void *)(v10 + 1496) + 8 * v272);
                          v277[(int)Utf8_LengthInBytes(v277, v268)] = 0;
                          log_OutText(*(void *)(*(void *)(v10 + 2080) + 32), (uint64_t)"FE_DEPES", 6, 0, (uint64_t)"%s", v278, v279, v280, v274);
                          v281 = *(unsigned __int8 **)(*(void *)(v10 + 1496) + 8 * v272);
                          uint64_t result = Utf8_LengthInBytes(v281, v268);
                          v281[(int)result] = v276;
                          ++v272;
                        }
                        while (v272 < *(__int16 *)(v10 + 24));
                      }
                    }
                    goto LABEL_431;
                  }
                }
                *(_DWORD *)(a4 + 556) = 1;
                goto LABEL_425;
              }
              v256 = v289;
              uint64_t v257 = *v289;
              if (*(_DWORD *)(v10 + 1432))
              {
                uint64_t v258 = v251;
              }
              else
              {
                if ((int)v201 >= (int)v257)
                {
                  __int16 v259 = *v289;
                  LOWORD(v260) = v201;
                  v256 = v289;
                  do
                  {
                    uint64_t v261 = *(void *)(v10 + 1560);
                    if (*(unsigned char *)(v261 + (__int16)v260))
                    {
                      *(unsigned char *)(v257 + v261 - 1) += *(unsigned char *)(v261 + (__int16)v260);
                      __int16 v259 = *v289;
                    }
                    int v260 = (__int16)(v260 - 1);
                    uint64_t v257 = v259;
                  }
                  while (v260 >= v259);
                }
                else
                {
                  v256 = v289;
                }
                *(unsigned char *)(*(void *)(v10 + 1560) + v257) = 0;
                LODWORD(v257) = *v256;
                uint64_t v258 = v251;
                if ((int)v201 < (int)v257)
                {
                  do
                  {
                    *(unsigned char *)(*(void *)(v10 + 1560) + v242++) = 0;
                    uint64_t v257 = *v256;
                  }
                  while (v242 < v257);
                }
              }
              if ((int)v258 < (__int16)v257)
              {
                uint64_t v262 = (__int16)v257;
                do
                {
                  Utf32SymToUtf8Sym(*(_DWORD *)(**(void **)(v10 + 1504) + 4 * v258), v294, 5u);
                  unsigned int v263 = v294[0];
                  if (v294[0])
                  {
                    int v264 = 0;
                    do
                    {
                      ++*(_WORD *)(a4 + 2 * v263 + 36);
                      unsigned int v263 = v294[(__int16)++v264];
                    }
                    while (v294[(__int16)v264]);
                  }
                  ++v258;
                }
                while (v258 != v262);
                LOWORD(v257) = *v256;
              }
              if (*(_DWORD *)(v10 + 1384)) {
                __int16 v206 = v257 + *(_WORD *)(v10 + 1476) + ~*(_WORD *)(a4 + 32);
              }
              else {
                __int16 v206 = 0;
              }
              uint64_t result = RESTORE_SUBSTITUTION(v10, (__int16)v257);
              __int16 *v256 = result;
            }
LABEL_418:
            if (!*(_DWORD *)(a4 + 552) || *(__int16 *)(a4 + 548) < v206) {
              *(_WORD *)(a4 + 548) = v206;
            }
            goto LABEL_421;
          }
          int v208 = 0;
        }
        if ((int)v199 < (int)v201)
        {
          uint64_t v209 = v199;
          do
          {
            Utf32SymToUtf8Sym(*(_DWORD *)(**(void **)(v10 + 1504) + 4 * v209), v294, 5u);
            unsigned int v210 = v294[0];
            if (v294[0])
            {
              int v211 = 0;
              do
              {
                --*(_WORD *)(a4 + 2 * v210 + 36);
                unsigned int v210 = v294[(__int16)++v211];
              }
              while (v294[(__int16)v211]);
            }
            ++v209;
          }
          while (v209 != (int)v201);
          uint64_t result = *(void *)(v10 + 1456);
        }
        int v286 = v208 << 16;
        int v287 = (unsigned __int16)v202;
        int v292 = (__int16)v208;
        uint64_t v212 = v199;
        int v213 = v199;
        int v202 = (unsigned __int16)v202;
        uint64_t v285 = v199;
        int v214 = v199;
        while (2)
        {
          LOBYTE(v215) = *(unsigned char *)result;
          switch(*(unsigned char *)result)
          {
            case 0:
              if ((__int16)v213 < (__int16)v201) {
                cstdlib_memmove((void *)(*(void *)(v10 + 1448) + 4 * (__int16)v213), (const void *)(*(void *)(v10 + 1448) + 4 * (__int16)v201), 4 * (unsigned __int16)(v202 - v201 + 1));
              }
              uint64_t result = MOVE_FOR_SUBSTITUTION(v10, (__int16)v201, (__int16)v287, (__int16)(v212 - v201));
              if (result)
              {
                *(_WORD *)(a4 + 34) = v212 + v287 - v201;
                __int16 v206 = v212 + ~*(_WORD *)(a4 + 32);
                if ((int)v285 < (__int16)v212)
                {
                  uint64_t v252 = (__int16)v212;
                  uint64_t v253 = v285;
                  do
                  {
                    uint64_t result = Utf32SymToUtf8Sym(*(_DWORD *)(**(void **)(v10 + 1504) + 4 * v253), v294, 5u);
                    unsigned int v254 = v294[0];
                    if (v294[0])
                    {
                      int v255 = 0;
                      do
                      {
                        ++*(_WORD *)(a4 + 2 * v254 + 36);
                        unsigned int v254 = v294[(__int16)++v255];
                      }
                      while (v294[(__int16)v255]);
                    }
                    ++v253;
                  }
                  while (v253 != v252);
                }
                goto LABEL_418;
              }
              goto LABEL_421;
            case 2:
              *(void *)(v10 + 1456) = result + 1;
              uint64_t v218 = *(unsigned __int8 *)(result + 1);
              int v219 = *(__int16 *)(v10 + 46);
              if ((int)v218 > v219)
              {
                uint64_t result = log_OutText(*(void *)(*(void *)(v10 + 2080) + 32), (uint64_t)"FE_DEPES", 3, 0, (uint64_t)"warning: pActRule > nr_vars (3)", v196, v197, v198, v284);
                uint64_t v218 = **(unsigned __int8 **)(v10 + 1456);
                int v219 = *(__int16 *)(v10 + 46);
              }
              if ((int)v218 > v219) {
                goto LABEL_367;
              }
              uint64_t result = cstdlib_strlen((const char *)(*(void *)(v10 + 1512) + 5 * v218));
              if ((int)(result << 16) < 1) {
                goto LABEL_366;
              }
              uint64_t v220 = v201;
              int v221 = 0;
              int v222 = 0;
              do
              {
                if ((__int16)v213 >= (__int16)v220)
                {
                  if ((__int16)v202 + 1 >= *(__int16 *)(*(void *)(v10 + 1416) + 2 * *(__int16 *)(v10 + 1410)) - 1) {
                    goto LABEL_367;
                  }
                  if (*(char *)(*(void *)(v10 + 1512) + 5 * **(unsigned __int8 **)(v10 + 1456) + v221) >= -64)
                  {
                    uint64_t v223 = *(void *)(v10 + 1448) + 4 * (__int16)v213;
                    cstdlib_memmove((void *)(v223 + 4), (const void *)v223, 4 * (unsigned __int16)(v202++ - v213 + 1));
                  }
                }
                uint64_t v224 = *(void *)(v10 + 1512);
                uint64_t v225 = **(unsigned __int8 **)(v10 + 1456);
                v226 = (unsigned __int8 *)(v224 + 5 * (int)v225 + v221);
                if ((char)*v226 >= -64)
                {
                  uint64_t v212 = (v212 + 1);
                  ++v214;
                  FirstUtf8SymToUtf32(v226, &v293);
                  __int16 v227 = v213++;
                  *(_DWORD *)(*(void *)(v10 + 1448) + 4 * v227) = v293;
                  uint64_t v224 = *(void *)(v10 + 1512);
                  uint64_t v225 = **(unsigned __int8 **)(v10 + 1456);
                }
                int v221 = (__int16)++v222;
                uint64_t result = cstdlib_strlen((const char *)(v224 + 5 * v225));
              }
              while ((__int16)v222 < (__int16)result);
              uint64_t v201 = v220;
              goto LABEL_366;
            case 7:
              *(void *)(v10 + 1456) = result + 1;
              uint64_t result = cstdlib_strlen(__s);
              if ((int)(result << 16) < 1) {
                goto LABEL_366;
              }
              uint64_t v228 = v201;
              __int16 v229 = 0;
              do
              {
                if ((__int16)v213 >= (__int16)v228)
                {
                  if ((__int16)v202 + 1 >= *(__int16 *)(*(void *)(v10 + 1416) + 2 * *(__int16 *)(v10 + 1410)) - 1) {
                    goto LABEL_367;
                  }
                  uint64_t v230 = v229;
                  if (*(char *)(v10 + v229 + 1484) >= -64)
                  {
                    uint64_t v231 = *(void *)(v10 + 1448) + 4 * (__int16)v213;
                    cstdlib_memmove((void *)(v231 + 4), (const void *)v231, 4 * (unsigned __int16)(v202++ - v213 + 1));
                  }
                }
                else
                {
                  uint64_t v230 = v229;
                }
                if (*(char *)(v10 + v230 + 1484) >= -64)
                {
                  uint64_t v212 = (v212 + 1);
                  ++v214;
                  FirstUtf8SymToUtf32((unsigned __int8 *)(v10 + v230 + 1484), &v293);
                  __int16 v232 = v213++;
                  *(_DWORD *)(*(void *)(v10 + 1448) + 4 * v232) = v293;
                }
                ++v229;
                uint64_t result = cstdlib_strlen(__s);
              }
              while ((__int16)result > v229);
              uint64_t v201 = v228;
              goto LABEL_366;
            case 0xE:
            case 0x10:
              *(void *)(v10 + 1456) = result + 1;
              if ((__int16)v213 < (__int16)v214) {
                cstdlib_memmove((void *)(*(void *)(v10 + 1448) + 4 * (__int16)v213), (const void *)(*(void *)(v10 + 1448) + 4 * (__int16)v214), 4 * (unsigned __int16)(v202 - v214 + 1));
              }
              if ((__int16)v212 <= (__int16)v201)
              {
                int v202 = v287;
              }
              else
              {
                uint64_t result = MOVE_FOR_SUBSTITUTION(v10, (__int16)v201, (__int16)v287, (__int16)(v212 - v201));
                if (!result) {
                  goto LABEL_421;
                }
                int v202 = v212 + v287 - v201;
                uint64_t v201 = v212;
              }
              v236 = *(unsigned __int8 **)(v10 + 1456);
              *(void *)(v10 + 1448) = *(void *)(*(void *)(v10 + 1504) + 8 * *v236 - 8);
              __int16 v237 = *v236 - 1;
              goto LABEL_365;
            case 0xF:
            case 0x11:
              *(void *)(v10 + 1456) = result + 1;
              if ((__int16)v213 < (__int16)v214) {
                cstdlib_memmove((void *)(*(void *)(v10 + 1448) + 4 * (__int16)v213), (const void *)(*(void *)(v10 + 1448) + 4 * (__int16)v214), 4 * (unsigned __int16)(v202 - v214 + 1));
              }
              if ((__int16)v212 <= (__int16)v201)
              {
                int v202 = v287;
              }
              else
              {
                uint64_t result = MOVE_FOR_SUBSTITUTION(v10, (__int16)v201, (__int16)v287, (__int16)(v212 - v201));
                if (!result) {
                  goto LABEL_421;
                }
                int v202 = v212 + v287 - v201;
                __int16 *v289 = v212 + v287 - v201;
                uint64_t v201 = v212;
              }
              *(void *)(v10 + 1448) = *(void *)(a4 + 16);
              __int16 v237 = *(_WORD *)(a4 + 562);
LABEL_365:
              *(_WORD *)(v10 + 1410) = v237;
              int v213 = v212;
              int v287 = v202;
              int v214 = v212;
LABEL_366:
              uint64_t result = *(void *)(v10 + 1456) + 1;
              *(void *)(v10 + 1456) = result;
              continue;
            case 0x13:
              if (v286 < 1) {
                goto LABEL_366;
              }
              int v233 = 0;
              while (2)
              {
                if ((__int16)v213 >= (__int16)v201)
                {
                  if ((__int16)v202 + 1 >= *(__int16 *)(*(void *)(v10 + 1416) + 2 * *(__int16 *)(v10 + 1410)) - 1)
                  {
LABEL_367:
                    *(unsigned char *)(v10 + 1428) = -100;
                    goto LABEL_421;
                  }
                  uint64_t v234 = (__int16)v213;
                  uint64_t v235 = *(void *)(v10 + 1448) + 4 * (__int16)v213;
                  uint64_t result = (uint64_t)cstdlib_memmove((void *)(v235 + 4), (const void *)v235, 4 * (unsigned __int16)(v202++ - v213 + 1));
                }
                else
                {
                  uint64_t v234 = (__int16)v213;
                }
                uint64_t v212 = (v212 + 1);
                ++v214;
                ++v213;
                *(_DWORD *)(*(void *)(v10 + 1448) + 4 * v234) = 126;
                if (v292 <= (__int16)++v233) {
                  goto LABEL_366;
                }
                continue;
              }
            default:
              int v215 = (char)v215;
              if ((__int16)v213 < (__int16)v201) {
                goto LABEL_327;
              }
              if ((__int16)v202 + 1 >= *(__int16 *)(*(void *)(v10 + 1416) + 2 * *(__int16 *)(v10 + 1410)) - 1) {
                goto LABEL_367;
              }
              if (v215 >= -64)
              {
                uint64_t v216 = *(void *)(v10 + 1448) + 4 * (__int16)v213;
                cstdlib_memmove((void *)(v216 + 4), (const void *)v216, 4 * (unsigned __int16)(v202++ - v213 + 1));
                uint64_t result = *(void *)(v10 + 1456);
                LOBYTE(v215) = *(unsigned char *)result;
LABEL_327:
                if ((char)v215 >= -64)
                {
                  uint64_t v212 = (v212 + 1);
                  ++v214;
                  FirstUtf8SymToUtf32((unsigned __int8 *)result, &v293);
                  __int16 v217 = v213++;
                  *(_DWORD *)(*(void *)(v10 + 1448) + 4 * v217) = v293;
                }
              }
              goto LABEL_366;
          }
        }
      case 2:
        uint64_t v22 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          int v23 = v9;
          do
          {
            LODWORD(v9) = v23;
            uint64_t v24 = (__int16)v23;
            int v25 = *(_DWORD *)(v22 + 4 * (__int16)v23);
            v23 += *(unsigned __int16 *)(v10 + 1470);
          }
          while (v25 == 126);
        }
        else
        {
          uint64_t v24 = (__int16)v9;
        }
        uint64_t v79 = (unsigned int *)(v22 + 4 * v24);
        if (*v12 != v79)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v79, v13, 5u);
          uint64_t v80 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v24);
          *(unsigned char *)(v10 + 1405) = *v80 & 0x3F;
          *(void *)(v10 + 2096) = v80;
        }
        int v81 = *v13;
        if (*v13) {
          BOOL v82 = v81 == 31;
        }
        else {
          BOOL v82 = 1;
        }
        if (v82) {
          goto LABEL_431;
        }
        uint64_t v83 = *(void *)(v10 + 1512);
        int v84 = (unsigned __int8 *)(*(void *)(v10 + 1456) + 1);
        *(void *)(v10 + 1456) = v84;
        a2 = *v84;
        uint64_t v85 = 5 * a2;
        __int16 v86 = (unsigned char *)(v83 + 5 * a2);
        if (!*v86)
        {
          uint64_t result = VAR_APPEARENCE(v10, a2);
          if (!result) {
            goto LABEL_431;
          }
          *(_DWORD *)(v10 + 1480) = 1;
          uint64_t result = SETUTF8CHAR(*(void *)(v10 + 1512) + v85, v13);
          int v84 = *(unsigned __int8 **)(v10 + 1456);
LABEL_220:
          *(_WORD *)(v10 + 1470) = 1;
          uint64_t v9 = (v9 + 1);
LABEL_127:
          __int16 i = (char *)(v84 + 1);
          *(void *)(v10 + 1456) = v84 + 1;
          continue;
        }
        uint64_t v87 = 0;
        int v88 = 0;
        while (v81 == v86[v87])
        {
          uint64_t v87 = (__int16)++v88;
          int v81 = v13[(__int16)v88];
          if (!v13[(__int16)v88]) {
            goto LABEL_220;
          }
        }
LABEL_431:
        if (*(_DWORD *)(v10 + 1480))
        {
          if ((*(__int16 *)(v10 + 46) & 0x80000000) == 0)
          {
            int v282 = 0;
            do
            {
              *(unsigned char *)(*(void *)(v10 + 1512) + (__int16)v282) = 0;
              v282 += 5;
            }
            while (5 * *(__int16 *)(v10 + 46) + 5 > (__int16)v282);
          }
          *(_DWORD *)(v10 + 1480) = 0;
        }
        uint64_t v283 = *(void *)(a4 + 8);
        if (*(void *)(v10 + 1440) != v283) {
          *(void *)(v10 + 1440) = v283;
        }
        return result;
      case 3:
        uint64_t v26 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v27 = v9;
            uint64_t v28 = (__int16)v9;
            int v29 = *(_DWORD *)(v26 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v29 == 126);
          LODWORD(v9) = v27;
        }
        else
        {
          uint64_t v28 = (__int16)v9;
        }
        int v89 = (unsigned int *)(v26 + 4 * v28);
        if (*v12 != v89)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v89, v13, 5u);
          __int16 v90 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v28);
          *(unsigned char *)(v10 + 1405) = *v90 & 0x3F;
          *(void *)(v10 + 2096) = v90;
        }
        if (*v13) {
          BOOL v91 = *v13 == 31;
        }
        else {
          BOOL v91 = 1;
        }
        if (v91) {
          goto LABEL_431;
        }
        uint64_t v92 = *(void *)(v10 + 2120);
        goto LABEL_97;
      case 4:
        uint64_t v30 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v31 = v9;
            uint64_t v32 = (__int16)v9;
            int v33 = *(_DWORD *)(v30 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v33 == 126);
          LODWORD(v9) = v31;
        }
        else
        {
          uint64_t v32 = (__int16)v9;
        }
        __int16 v93 = (unsigned int *)(v30 + 4 * v32);
        if (*v12 != v93)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v93, v13, 5u);
          uint64_t v94 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v32);
          *(unsigned char *)(v10 + 1405) = *v94 & 0x3F;
          *(void *)(v10 + 2096) = v94;
        }
        if (*v13) {
          BOOL v95 = *v13 == 31;
        }
        else {
          BOOL v95 = 1;
        }
        if (v95) {
          goto LABEL_431;
        }
        uint64_t v96 = *(void *)(v10 + 2120);
        goto LABEL_107;
      case 5:
        uint64_t v34 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v35 = v9;
            uint64_t v36 = (__int16)v9;
            int v37 = *(_DWORD *)(v34 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v37 == 126);
          LODWORD(v9) = v35;
        }
        else
        {
          uint64_t v36 = (__int16)v9;
        }
        __int16 v97 = (unsigned int *)(v34 + 4 * v36);
        if (*v12 != v97)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v97, v13, 5u);
          __int16 v98 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v36);
          *(unsigned char *)(v10 + 1405) = *v98 & 0x3F;
          *(void *)(v10 + 2096) = v98;
        }
        if (*v13) {
          BOOL v99 = *v13 == 31;
        }
        else {
          BOOL v99 = 1;
        }
        if (v99) {
          goto LABEL_431;
        }
        uint64_t v92 = *(void *)(v10 + 2128);
LABEL_97:
        uint64_t v100 = (unsigned char *)(*(void *)(v10 + 1456) + 1);
        *(void *)(v10 + 1456) = v100;
        uint64_t result = (uint64_t)cstdlib_strstr(*(char **)(*(void *)(v92 + 8 * (*v100 - 1))+ 8 * *(unsigned __int8 *)(v10 + 1405)), (const char *)v13);
        if (!result) {
          goto LABEL_431;
        }
        goto LABEL_126;
      case 6:
        uint64_t v38 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v39 = v9;
            uint64_t v40 = (__int16)v9;
            int v41 = *(_DWORD *)(v38 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v41 == 126);
          LODWORD(v9) = v39;
        }
        else
        {
          uint64_t v40 = (__int16)v9;
        }
        int v101 = (unsigned int *)(v38 + 4 * v40);
        if (*v12 != v101)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v101, v13, 5u);
          __int16 v102 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v40);
          *(unsigned char *)(v10 + 1405) = *v102 & 0x3F;
          *(void *)(v10 + 2096) = v102;
        }
        if (*v13) {
          BOOL v103 = *v13 == 31;
        }
        else {
          BOOL v103 = 1;
        }
        if (v103) {
          goto LABEL_431;
        }
        uint64_t v96 = *(void *)(v10 + 2128);
LABEL_107:
        uint64_t v104 = (unsigned char *)(*(void *)(v10 + 1456) + 1);
        *(void *)(v10 + 1456) = v104;
        uint64_t result = (uint64_t)cstdlib_strstr(*(char **)(*(void *)(v96 + 8 * (*v104 - 1))+ 8 * *(unsigned __int8 *)(v10 + 1405)), (const char *)v13);
        if (result) {
          goto LABEL_431;
        }
        goto LABEL_126;
      case 7:
        uint64_t v42 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v43 = v9;
            uint64_t v44 = (__int16)v9;
            int v45 = *(_DWORD *)(v42 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v45 == 126);
          LODWORD(v9) = v43;
        }
        else
        {
          uint64_t v44 = (__int16)v9;
        }
        uint64_t v105 = (unsigned int *)(v42 + 4 * v44);
        if (*v12 != v105)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v105, v13, 5u);
          __int16 v106 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v44);
          *(unsigned char *)(v10 + 1405) = *v106 & 0x3F;
          *(void *)(v10 + 2096) = v106;
        }
        if (*v13) {
          BOOL v107 = *v13 == 31;
        }
        else {
          BOOL v107 = 1;
        }
        if (v107) {
          goto LABEL_431;
        }
        uint64_t v108 = *(void *)(v10 + 1456);
        *(void *)(v10 + 1456) = v108 + 1;
        uint64_t result = (uint64_t)cstdlib_strstr(*(char **)(*(void *)(*(void *)(v10 + 2128)+ 8 * (*(unsigned char *)(v108 + 1) - 1))+ 8 * *(unsigned __int8 *)(v10 + 1405)), (const char *)v13);
        if (!result) {
          goto LABEL_431;
        }
        uint64_t result = (uint64_t)cstdlib_strstr((char *)(*(void *)(v10 + 88)+ ((unint64_t)**(unsigned __int8 **)(v10 + 1456) << 8)- 256), (const char *)v13);
        if (!result) {
          goto LABEL_431;
        }
        uint64_t v109 = **(unsigned __int8 **)(v10 + 1456);
        uint64_t v110 = v109 - 1;
        if ((v109 - 1))
        {
          v109 -= 2;
          uint64_t v111 = *(void *)(v10 + 96);
        }
        else
        {
          uint64_t v111 = *(void *)(v10 + 96);
          uint64_t v110 = v110;
        }
        uint64_t result = SETUTF8CHAR((uint64_t)__s, (unsigned __int8 *)(*(void *)(v10 + 88)+ (v109 << 8)+ *(unsigned __int8 *)(v111+ (v110 << 8)+ result- (*(void *)(v10 + 88)+ (v110 << 8)))));
LABEL_126:
        *(_WORD *)(v10 + 1470) = 1;
        uint64_t v9 = (v9 + 1);
        int v84 = *(unsigned __int8 **)(v10 + 1456);
        goto LABEL_127;
      case 8:
        uint64_t v46 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v47 = v9;
            uint64_t v48 = (__int16)v9;
            int v49 = *(_DWORD *)(v46 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v49 == 126);
          LODWORD(v9) = v47;
        }
        else
        {
          uint64_t v48 = (__int16)v9;
        }
        int v112 = (unsigned int *)(v46 + 4 * v48);
        if (*v12 != v112)
        {
          Utf32SymToUtf8Sym(*v112, v13, 5u);
          int v113 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v48);
          *(unsigned char *)(v10 + 1405) = *v113 & 0x3F;
          *(void *)(v10 + 2096) = v113;
          __int16 i = *(char **)(v10 + 1456);
        }
        *(void *)(v10 + 1456) = i + 1;
        uint64_t result = CHECK_OF_LIST(v10, 8u, (__int16)v9, a4, a5, a6, a7, a8);
        if (result) {
          goto LABEL_126;
        }
        goto LABEL_431;
      case 11:
        *(_WORD *)(v10 + 1472) = v9;
        uint64_t v50 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            __int16 v51 = v9;
            uint64_t v52 = (__int16)v9;
            int v53 = *(_DWORD *)(v50 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v53 == 126);
          LOWORD(v9) = v51;
        }
        else
        {
          uint64_t v52 = (__int16)v9;
        }
        __int16 v114 = (unsigned int *)(v50 + 4 * v52);
        if (*v12 != v114)
        {
          Utf32SymToUtf8Sym(*v114, v13, 5u);
          __int16 v115 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v52);
          *(unsigned char *)(v10 + 1405) = *v115 & 0x3F;
          *(void *)(v10 + 2096) = v115;
          __int16 i = *(char **)(v10 + 1456);
        }
        int v116 = i[2];
        if (v116 == 220) {
          int v116 = 5000;
        }
        *(_WORD *)(v10 + 1406) = v116;
        if (v116
          && (*(void *)(v10 + 1456) = i + 3, CHECK_OF_LIST(v10, 0xBu, (__int16)v9, a4, a5, a6, a7, a8)))
        {
          LOWORD(v11) = 0;
          do
          {
            uint64_t v118 = *(void *)(v10 + 1456);
            *(_WORD *)(v10 + 1472) = v9 + 1;
            int v119 = TOKEN1(v10, (__int16)(v9 + 1), v117, a4, a5, a6, a7, a8);
            int v11 = (__int16)(v11 + 1);
            if (v11 >= *(__int16 *)(v10 + 1406)) {
              break;
            }
            LOWORD(v9) = v119;
            *(void *)(v10 + 1456) = i + 3;
          }
          while (CHECK_OF_LIST(v10, 0xBu, v119, a4, a5, a6, a7, a8));
        }
        else
        {
          int v11 = 0;
          uint64_t v118 = 0;
        }
        uint64_t result = LOG_WARNING_ON_MAX_NUMBER(v10, v11, 1u, a4, a5, a6, a7, a8);
        if (v11 < i[1]) {
          goto LABEL_431;
        }
        if (v118) {
          *(void *)(v10 + 1456) = v118;
        }
        else {
          uint64_t v118 = *(void *)(v10 + 1456);
        }
        uint64_t v9 = *(unsigned __int16 *)(v10 + 1472);
        for (__int16 i = (char *)(v118 + 1); ; ++i)
        {
          if (*(i - 1) == 11)
          {
            unsigned int v159 = *(i - 2);
            BOOL v160 = v159 > 0x15;
            int v161 = (1 << v159) & 0x20067C;
            if (v160 || v161 == 0) {
              break;
            }
            unsigned int v163 = *(i - 3);
            BOOL v160 = v163 > 0x15;
            int v164 = (1 << v163) & 0x20C67C;
            if (!v160 && v164 != 0) {
              break;
            }
          }
          *(void *)(v10 + 1456) = i;
        }
        goto LABEL_290;
      case 12:
        uint64_t v54 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v55 = v9;
            uint64_t v56 = (__int16)v9;
            int v57 = *(_DWORD *)(v54 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v57 == 126);
          LODWORD(v9) = v55;
        }
        else
        {
          uint64_t v56 = (__int16)v9;
        }
        uint64_t v120 = (unsigned int *)(v54 + 4 * v56);
        if (*v12 != v120)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v120, v13, 5u);
          __int16 v121 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v56);
          *(unsigned char *)(v10 + 1405) = *v121 & 0x3F;
          *(void *)(v10 + 2096) = v121;
        }
        int v122 = *v13;
        if (*v13) {
          BOOL v123 = v122 == 31;
        }
        else {
          BOOL v123 = 1;
        }
        if (v123) {
          goto LABEL_431;
        }
        uint64_t v124 = 0;
        int v125 = 0;
        uint64_t v126 = *(void *)(v10 + 1456) + 1;
        *(void *)(v10 + 1456) = v126;
        do
        {
          if (v122 != *(unsigned __int8 *)(v126 + v124)) {
            goto LABEL_431;
          }
          uint64_t v124 = (__int16)++v125;
          int v122 = v13[(__int16)v125];
        }
        while (v13[(__int16)v125]);
        *(_WORD *)(v10 + 1470) = 1;
        uint64_t v9 = (v9 + 1);
        uint64_t result = cstdlib_strlen((const char *)v13);
        __int16 i = (char *)(*(void *)(v10 + 1456) + result);
        *(void *)(v10 + 1456) = i;
        continue;
      case 13:
        uint64_t v58 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v59 = v9;
            uint64_t v60 = (__int16)v9;
            int v61 = *(_DWORD *)(v58 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v61 == 126);
          LODWORD(v9) = v59;
        }
        else
        {
          uint64_t v60 = (__int16)v9;
        }
        __int16 v127 = (unsigned int *)(v58 + 4 * v60);
        if (*v12 != v127)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v127, v13, 5u);
          int v128 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v60);
          *(unsigned char *)(v10 + 1405) = *v128 & 0x3F;
          *(void *)(v10 + 2096) = v128;
        }
        int v129 = *v13;
        if (*v13) {
          BOOL v130 = v129 == 31;
        }
        else {
          BOOL v130 = 1;
        }
        if (v130) {
          goto LABEL_431;
        }
        uint64_t v131 = 0;
        int v132 = 0;
        uint64_t v133 = *(void *)(v10 + 1456);
        *(void *)(v10 + 1456) = v133 + 1;
        while (v129 == *(unsigned __int8 *)(v133 + 1 + v131))
        {
          uint64_t v131 = (__int16)++v132;
          int v129 = v13[(__int16)v132];
          if (!v13[(__int16)v132]) {
            goto LABEL_431;
          }
        }
        int v134 = (char *)(v133 + 2);
        do
        {
          *(void *)(v10 + 1456) = v134;
          int v135 = *v134++;
        }
        while (v135 < -64);
        *(_WORD *)(v10 + 1470) = 1;
        uint64_t v9 = (v9 + 1);
        __int16 i = v134 - 1;
        continue;
      case 14:
      case 16:
        uint64_t v15 = *(void *)(v10 + 1440);
        *(void *)(v10 + 1368) = v15;
        uint64_t v16 = v15 + 4 * (__int16)v9;
        if (*(void *)(v10 + 2104) == v16)
        {
          uint64_t v9 = *(unsigned __int16 *)(v10 + 2112);
        }
        else
        {
          *(void *)(v10 + 2104) = v16;
          *(_WORD *)(v10 + 2112) = v9;
        }
        uint64_t v17 = *(void *)(*(void *)(v10 + 1504) + 8 * i[1] - 8);
        goto LABEL_52;
      case 15:
      case 17:
        uint64_t v17 = *(void *)(v10 + 1368);
LABEL_52:
        *(void *)(v10 + 1440) = v17;
        *(_WORD *)(v10 + 1470) = 0;
        i += 2;
        *(void *)(v10 + 1456) = i;
        continue;
      case 18:
        *(_WORD *)(v10 + 1472) = v9;
        uint64_t v62 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            __int16 v63 = v9;
            uint64_t v64 = (__int16)v9;
            int v65 = *(_DWORD *)(v62 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v65 == 126);
          LOWORD(v9) = v63;
        }
        else
        {
          uint64_t v64 = (__int16)v9;
        }
        uint64_t v136 = (unsigned int *)(v62 + 4 * v64);
        if (*v12 != v136)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v136, v13, 5u);
          uint64_t v137 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v64);
          *(unsigned char *)(v10 + 1405) = *v137 & 0x3F;
          *(void *)(v10 + 2096) = v137;
          __int16 i = *(char **)(v10 + 1456);
        }
        int v138 = i[2];
        if (v138 == 220) {
          int v138 = 5000;
        }
        *(_WORD *)(v10 + 1406) = v138;
        *(void *)(v10 + 1392) = i + 4;
        switch(i[3])
        {
          case 2:
            LOWORD(v11) = 0;
            if (!v138) {
              goto LABEL_187;
            }
            while (1)
            {
              int v139 = *v13;
              if (*v13) {
                BOOL v140 = v139 == 31;
              }
              else {
                BOOL v140 = 1;
              }
              if (v140) {
                goto LABEL_187;
              }
              uint64_t v141 = **(unsigned __int8 **)(v10 + 1392);
              uint64_t v142 = (unsigned char *)(*(void *)(v10 + 1512) + 5 * v141);
              if (*v142) {
                break;
              }
              if (VAR_APPEARENCE(v10, v141))
              {
                *(_DWORD *)(v10 + 1480) = 1;
                SETUTF8CHAR(*(void *)(v10 + 1512) + 5 * **(unsigned __int8 **)(v10 + 1392), v13);
LABEL_186:
                *(_WORD *)(v10 + 1472) = v9 + 1;
                LOWORD(v9) = TOKEN1(v10, (__int16)(v9 + 1), a3, a4, a5, a6, a7, a8);
                int v11 = (__int16)(v11 + 1);
                if (v11 < *(__int16 *)(v10 + 1406)) {
                  continue;
                }
              }
              goto LABEL_187;
            }
            uint64_t v143 = 0;
            int v144 = 0;
            while (v139 == v142[v143])
            {
              uint64_t v143 = (__int16)++v144;
              int v139 = v13[(__int16)v144];
              if (!v13[(__int16)v144]) {
                goto LABEL_186;
              }
            }
LABEL_187:
            int v145 = (__int16)v11;
            uint64_t v146 = v10;
            unsigned int v147 = 7;
            goto LABEL_286;
          case 3:
            LOWORD(v11) = 0;
            if (v138)
            {
              do
              {
                if (*v13) {
                  BOOL v166 = *v13 == 31;
                }
                else {
                  BOOL v166 = 1;
                }
                if (v166) {
                  break;
                }
                if (!cstdlib_strstr(*(char **)(*(void *)(*(void *)(v10 + 2120)+ 8 * (**(unsigned char **)(v10 + 1392) - 1))+ 8 * *(unsigned __int8 *)(v10 + 1405)), (const char *)v13))break; {
                *(_WORD *)(v10 + 1472) = v9 + 1;
                }
                LOWORD(v9) = TOKEN1(v10, (__int16)(v9 + 1), v167, a4, a5, a6, a7, a8);
                int v11 = (__int16)(v11 + 1);
              }
              while (v11 < *(__int16 *)(v10 + 1406));
            }
            int v145 = (__int16)v11;
            uint64_t v146 = v10;
            unsigned int v147 = 2;
            goto LABEL_286;
          case 4:
            LOWORD(v11) = 0;
            if (v138)
            {
              do
              {
                if (*v13) {
                  BOOL v168 = *v13 == 31;
                }
                else {
                  BOOL v168 = 1;
                }
                if (v168) {
                  break;
                }
                if (cstdlib_strstr(*(char **)(*(void *)(*(void *)(v10 + 2120)+ 8 * (**(unsigned char **)(v10 + 1392) - 1))+ 8 * *(unsigned __int8 *)(v10 + 1405)), (const char *)v13))
                {
                  break;
                }
                *(_WORD *)(v10 + 1472) = v9 + 1;
                LOWORD(v9) = TOKEN1(v10, (__int16)(v9 + 1), v169, a4, a5, a6, a7, a8);
                int v11 = (__int16)(v11 + 1);
              }
              while (v11 < *(__int16 *)(v10 + 1406));
            }
            int v145 = (__int16)v11;
            uint64_t v146 = v10;
            unsigned int v147 = 3;
            goto LABEL_286;
          case 5:
            LOWORD(v11) = 0;
            if (v138)
            {
              do
              {
                if (*v13) {
                  BOOL v170 = *v13 == 31;
                }
                else {
                  BOOL v170 = 1;
                }
                if (v170) {
                  break;
                }
                uint64_t result = (uint64_t)cstdlib_strstr(*(char **)(*(void *)(*(void *)(v10 + 2128)+ 8 * (**(unsigned char **)(v10 + 1392) - 1))+ 8 * *(unsigned __int8 *)(v10 + 1405)), (const char *)v13);
                if (!result) {
                  break;
                }
                *(_WORD *)(v10 + 1472) = v9 + 1;
                uint64_t result = TOKEN1(v10, (__int16)(v9 + 1), a3, a4, a5, a6, a7, a8);
                LOWORD(v9) = result;
                int v11 = (__int16)(v11 + 1);
              }
              while (v11 < *(__int16 *)(v10 + 1406));
            }
            goto LABEL_287;
          case 6:
            LOWORD(v11) = 0;
            if (v138)
            {
              do
              {
                if (*v13) {
                  BOOL v171 = *v13 == 31;
                }
                else {
                  BOOL v171 = 1;
                }
                if (v171) {
                  break;
                }
                if (cstdlib_strstr(*(char **)(*(void *)(*(void *)(v10 + 2128)+ 8 * (**(unsigned char **)(v10 + 1392) - 1))+ 8 * *(unsigned __int8 *)(v10 + 1405)), (const char *)v13))
                {
                  break;
                }
                *(_WORD *)(v10 + 1472) = v9 + 1;
                LOWORD(v9) = TOKEN1(v10, (__int16)(v9 + 1), v172, a4, a5, a6, a7, a8);
                int v11 = (__int16)(v11 + 1);
              }
              while (v11 < *(__int16 *)(v10 + 1406));
            }
            int v145 = (__int16)v11;
            uint64_t v146 = v10;
            unsigned int v147 = 4;
            goto LABEL_286;
          case 12:
            LOWORD(v11) = 0;
            if (!v138) {
              goto LABEL_262;
            }
LABEL_254:
            int v173 = *v13;
            if (*v13) {
              BOOL v174 = v173 == 31;
            }
            else {
              BOOL v174 = 1;
            }
            if (v174) {
              goto LABEL_262;
            }
            uint64_t v175 = 0;
            int v176 = 0;
            while (v173 == *(unsigned __int8 *)(*(void *)(v10 + 1392) + v175))
            {
              uint64_t v175 = (__int16)++v176;
              int v173 = v13[(__int16)v176];
              if (!v13[(__int16)v176])
              {
                *(_WORD *)(v10 + 1472) = v9 + 1;
                LOWORD(v9) = TOKEN1(v10, (__int16)(v9 + 1), a3, a4, a5, a6, a7, a8);
                int v11 = (__int16)(v11 + 1);
                if (v11 < *(__int16 *)(v10 + 1406)) {
                  goto LABEL_254;
                }
                break;
              }
            }
LABEL_262:
            int v145 = (__int16)v11;
            uint64_t v146 = v10;
            unsigned int v147 = 5;
            goto LABEL_286;
          case 13:
            LOWORD(v11) = 0;
            if (!v138) {
              goto LABEL_273;
            }
            do
            {
              int v177 = *v13;
              if (*v13) {
                BOOL v178 = v177 == 31;
              }
              else {
                BOOL v178 = 1;
              }
              if (v178) {
                break;
              }
              uint64_t v179 = 0;
              int v180 = 0;
              while (v177 == *(unsigned __int8 *)(*(void *)(v10 + 1392) + v179))
              {
                uint64_t v179 = (__int16)++v180;
                int v177 = v13[(__int16)v180];
                if (!v13[(__int16)v180]) {
                  goto LABEL_273;
                }
              }
              *(_WORD *)(v10 + 1472) = v9 + 1;
              LOWORD(v9) = TOKEN1(v10, (__int16)(v9 + 1), a3, a4, a5, a6, a7, a8);
              int v11 = (__int16)(v11 + 1);
            }
            while (v11 < *(__int16 *)(v10 + 1406));
LABEL_273:
            int v145 = (__int16)v11;
            uint64_t v146 = v10;
            unsigned int v147 = 6;
            goto LABEL_286;
          case 21:
            LOWORD(v11) = 0;
            if (!v138) {
              goto LABEL_285;
            }
            break;
          default:
            goto LABEL_287;
        }
        do
        {
          int v181 = *v13;
          if (*v13) {
            BOOL v182 = v181 == 31;
          }
          else {
            BOOL v182 = 1;
          }
          if (v182) {
            break;
          }
          uint64_t v183 = (unsigned char *)(*(void *)(v10 + 1512) + 5 * **(unsigned __int8 **)(v10 + 1392));
          if (*v183)
          {
            uint64_t v184 = 0;
            int v185 = 0;
            while (v181 == v183[v184])
            {
              uint64_t v184 = (__int16)++v185;
              int v181 = v13[(__int16)v185];
              if (!v13[(__int16)v185]) {
                goto LABEL_285;
              }
            }
          }
          *(_WORD *)(v10 + 1472) = v9 + 1;
          LOWORD(v9) = TOKEN1(v10, (__int16)(v9 + 1), a3, a4, a5, a6, a7, a8);
          int v11 = (__int16)(v11 + 1);
        }
        while (v11 < *(__int16 *)(v10 + 1406));
LABEL_285:
        int v145 = (__int16)v11;
        uint64_t v146 = v10;
        unsigned int v147 = 8;
LABEL_286:
        uint64_t result = LOG_WARNING_ON_MAX_NUMBER(v146, v145, v147, a4, a5, a6, a7, a8);
LABEL_287:
        uint64_t v186 = *(void *)(v10 + 1456);
        if (*(unsigned __int8 *)(v186 + 1) > (unsigned __int16)v11) {
          goto LABEL_431;
        }
        uint64_t v9 = *(unsigned __int16 *)(v10 + 1472);
        __int16 i = (char *)(v186 + 5);
        do
        {
          *(void *)(v10 + 1456) = i;
          int v187 = *i++;
        }
        while (v187 < -64);
LABEL_290:
        *(_WORD *)(v10 + 1470) = 1;
        *(void *)(v10 + 1456) = i;
        continue;
      case 19:
        uint64_t v66 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            uint64_t v67 = v9;
            uint64_t v68 = (__int16)v9;
            int v69 = *(_DWORD *)(v66 + 4 * (__int16)v9);
            uint64_t v9 = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v69 == 126);
          uint64_t v9 = v67;
        }
        else
        {
          uint64_t v68 = (__int16)v9;
        }
        long long v148 = (unsigned int *)(v66 + 4 * v68);
        if (*v12 != v148)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v148, v13, 5u);
          long long v149 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v68);
          *(unsigned char *)(v10 + 1405) = *v149 & 0x3F;
          *(void *)(v10 + 2096) = v149;
          __int16 i = *(char **)(v10 + 1456);
        }
        *(_WORD *)(v10 + 1470) = 1;
        *(void *)(v10 + 1456) = ++i;
        continue;
      case 20:
        *(_WORD *)(v10 + 1476) = 1;
        *(_WORD *)(v10 + 1470) = 1;
        *(void *)(v10 + 1456) = ++i;
        uint64_t v9 = v291;
        continue;
      case 21:
        uint64_t v70 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v71 = v9;
            uint64_t v72 = (__int16)v9;
            int v73 = *(_DWORD *)(v70 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v73 == 126);
          LODWORD(v9) = v71;
        }
        else
        {
          uint64_t v72 = (__int16)v9;
        }
        long long v150 = (unsigned int *)(v70 + 4 * v72);
        if (*v12 != v150)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v150, v13, 5u);
          long long v151 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v72);
          *(unsigned char *)(v10 + 1405) = *v151 & 0x3F;
          *(void *)(v10 + 2096) = v151;
        }
        int v152 = *v13;
        if (*v13) {
          BOOL v153 = v152 == 31;
        }
        else {
          BOOL v153 = 1;
        }
        if (v153) {
          goto LABEL_431;
        }
        uint64_t v154 = *(void *)(v10 + 1512);
        uint64_t v155 = *(void *)(v10 + 1456);
        *(void *)(v10 + 1456) = v155 + 1;
        long long v156 = (unsigned char *)(v154 + 5 * *(unsigned __int8 *)(v155 + 1));
        if (!*v156) {
          goto LABEL_204;
        }
        uint64_t v157 = 0;
        int v158 = 0;
        while (v152 == v156[v157])
        {
          uint64_t v157 = (__int16)++v158;
          int v152 = v13[(__int16)v158];
          if (!v13[(__int16)v158]) {
            goto LABEL_431;
          }
        }
LABEL_204:
        *(_WORD *)(v10 + 1470) = 1;
        uint64_t v9 = (v9 + 1);
        __int16 i = (char *)(v155 + 2);
        *(void *)(v10 + 1456) = v155 + 2;
        continue;
      default:
        uint64_t v18 = *(void *)(v10 + 1440);
        if (*(_WORD *)(v10 + 1470))
        {
          do
          {
            int v19 = v9;
            uint64_t v20 = (__int16)v9;
            int v21 = *(_DWORD *)(v18 + 4 * (__int16)v9);
            LODWORD(v9) = v9 + *(unsigned __int16 *)(v10 + 1470);
          }
          while (v21 == 126);
          LODWORD(v9) = v19;
        }
        else
        {
          uint64_t v20 = (__int16)v9;
        }
        uint64_t v74 = (unsigned int *)(v18 + 4 * v20);
        if (*v12 != v74)
        {
          uint64_t result = Utf32SymToUtf8Sym(*v74, v13, 5u);
          __int16 v75 = (_DWORD *)(*(void *)(v10 + 1440) + 4 * v20);
          *(unsigned char *)(v10 + 1405) = *v75 & 0x3F;
          *(void *)(v10 + 2096) = v75;
          __int16 i = *(char **)(v10 + 1456);
        }
        int v76 = *v13;
        if (!*v13) {
          goto LABEL_431;
        }
        uint64_t v77 = 0;
        int v78 = 0;
        do
        {
          if (v76 != i[v77]) {
            goto LABEL_431;
          }
          uint64_t v77 = (__int16)++v78;
          int v76 = v13[(__int16)v78];
        }
        while (v13[(__int16)v78]);
        *(_WORD *)(v10 + 1470) = 1;
        uint64_t result = cstdlib_strlen((const char *)v13);
        __int16 i = (char *)(*(void *)(v10 + 1456) + result);
        *(void *)(v10 + 1456) = i;
        uint64_t v9 = (v9 + 1);
        continue;
    }
  }
}

uint64_t INFERENCE_MAIN(uint64_t a1, uint64_t a2, int a3, __int16 *a4)
{
  if (*(__int16 *)(a1 + 24) >= 1)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = *a4;
    int v22 = 0;
    int v11 = v10 + 1;
    while (1)
    {
      unsigned int v12 = (unsigned __int16)Utf8_LengthInBytes(*(unsigned __int8 **)(*(void *)(a1 + 1496) + 8 * v8), v11);
      int v13 = utf8_CheckValid(*(void *)(*(void *)(a1 + 1496) + 8 * v8), v12);
      uint64_t v14 = utf8_Utf8ToUtf32_Tolerant(*(void *)(*(void *)(a1 + 1496) + 8 * v8), v12, *(void *)(*(void *)(a1 + 1504) + 8 * v8), **(unsigned __int16 **)(a1 + 184), &v22);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
      if (!v13) {
        int v9 = 1;
      }
      if (++v8 >= *(__int16 *)(a1 + 24))
      {
        if (v9) {
          log_OutText(*(void *)(*(void *)(a1 + 2080) + 32), (uint64_t)"FE_DEPES", 1, 0, (uint64_t)"Invalid utf8 layer string found", v15, v16, v17, v21);
        }
        break;
      }
    }
  }
  uint64_t v18 = 2305826816;
  INFERENCE(a1, a2, a3, a4);
  int v19 = *(unsigned __int8 *)(a1 + 1428);
  if (v19 == 155) {
    return 2305826826;
  }
  if (v19 != 156) {
    return Utf32LayersToUtf8Layers(a1, *a4);
  }
  return v18;
}

uint64_t Utf32LayersToUtf8Layers(uint64_t a1, __int16 a2)
{
  if (*(__int16 *)(a1 + 24) < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v6 = 0;
  int v4 = (unsigned __int16)(a2 + 1);
  do
  {
    uint64_t result = utf8_Utf32ToUtf8(*(void *)(*(void *)(a1 + 1504) + 8 * v3), v4, *(void *)(*(void *)(a1 + 1496) + 8 * v3), **(unsigned __int16 **)(a1 + 184), &v6);
    if ((result & 0x80000000) != 0) {
      break;
    }
    ++v3;
  }
  while (*(__int16 *)(a1 + 24) > (__int16)v3);
  return result;
}

uint64_t CTXT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 1456);
  *(void *)(a1 + 1456) = v9 + 1;
  *(_WORD *)(a1 + 1470) = *(_WORD *)(a1 + 1468);
  *(_WORD *)(a1 + 1464) = 0;
  uint64_t result = 1;
  *(_DWORD *)(a1 + 1352) = 1;
  if (*(unsigned char *)(v9 + 1))
  {
    do
    {
      int v11 = CONTEXT_CHOICE(a1, a2, a3, a4, a5, a6, a7, a8);
      if (**(unsigned char **)(a1 + 1456)) {
        BOOL v12 = v11 == 0;
      }
      else {
        BOOL v12 = 1;
      }
    }
    while (!v12);
    if (v11) {
      return 1;
    }
    while (1)
    {
      if (*(__int16 *)(a1 + 1464) < 1) {
        return 0;
      }
      uint64_t v13 = *(unsigned __int16 *)(a1 + 1464);
      *(void *)(a1 + 1456) = *(void *)(a1 + 8 * v13 + 248);
      *(_WORD *)(a1 + 1466) = *(_WORD *)(a1 + 2 * v13 + 648);
      ++*(unsigned char *)(a1 + v13 + 192);
      uint64_t v14 = *(__int16 *)(a1 + 1464);
      __int16 v15 = *(_WORD *)(a1 + 1464);
      uint64_t v16 = a1 + 2 * v14;
      *(_WORD *)(a1 + 1470) = *(_WORD *)(v16 + 748);
      *(void *)(a1 + 1440) = *(void *)(a1 + 8 * v14 + 952);
      int v17 = *(__int16 *)(v16 + 848);
      if (v17 == 10)
      {
        *(_WORD *)(a1 + 1464) = v15 - 1;
        if (!**(unsigned char **)(a1 + 1456)) {
          return 1;
        }
        do
        {
          int v20 = CONTEXT_CHOICE(a1, a2, a3, a4, a5, a6, a7, a8);
          if (**(unsigned char **)(a1 + 1456)) {
            BOOL v22 = v20 == 0;
          }
          else {
            BOOL v22 = 1;
          }
        }
        while (!v22);
        goto LABEL_42;
      }
      if (v17 == 9) {
        break;
      }
      if (v17 == 8)
      {
        unsigned int v18 = *(unsigned __int8 *)(a1 + v14 + 192);
        int v19 = *(unsigned char **)(a1 + 1456);
        if (v18 <= v19[2])
        {
          *(_DWORD *)(a1 + 1352) = 0;
          if (!*v19) {
            return 1;
          }
          do
          {
            int v20 = CONTEXT_CHOICE(a1, a2, a3, a4, a5, a6, a7, a8);
            if (**(unsigned char **)(a1 + 1456)) {
              BOOL v21 = v20 == 0;
            }
            else {
              BOOL v21 = 1;
            }
          }
          while (!v21);
          goto LABEL_42;
        }
LABEL_45:
        *(_WORD *)(a1 + 1464) = v15 - 1;
      }
      else
      {
        int v20 = 0;
LABEL_42:
        if (v20) {
          return 1;
        }
      }
    }
    int v23 = *(unsigned char **)(a1 + 1456);
    if (*v23 == 9
      && v23[1] != 1
      && (*(v23 - 2) != 9 || *(unsigned __int8 *)(a1 + v14 + 192) - 1 != *(v23 - 1)))
    {
      *(void *)(a1 + 1456) = v23 + 2;
    }
    int v24 = SKIP_DATA(a1, 9, *(unsigned __int8 *)(a1 + v14 + 192));
    uint64_t v25 = *(void *)(a1 + 1456);
    if (v24)
    {
      *(void *)(a1 + 8 * *(__int16 *)(a1 + 1464) + 248) = v25;
      uint64_t v26 = (unsigned char *)(*(void *)(a1 + 1456) + 2);
      *(void *)(a1 + 1456) = v26;
      if (!*v26) {
        return 1;
      }
      do
      {
        int v20 = CONTEXT_CHOICE(a1, a2, a3, a4, a5, a6, a7, a8);
        if (**(unsigned char **)(a1 + 1456)) {
          BOOL v27 = v20 == 0;
        }
        else {
          BOOL v27 = 1;
        }
      }
      while (!v27);
      goto LABEL_42;
    }
    *(void *)(a1 + 1456) = v25 + 2;
    __int16 v15 = *(_WORD *)(a1 + 1464);
    goto LABEL_45;
  }
  return result;
}

uint64_t VAR_APPEARENCE(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = a2 - 1;
  int v4 = *(unsigned __int8 *)(v2 + 2 * v3);
  if (v4 == 5)
  {
    uint64_t v5 = *(void *)(a1 + 2128);
LABEL_5:
    uint64_t result = (uint64_t)cstdlib_strstr(*(char **)(*(void *)(v5 + 8 * *(unsigned __int8 *)(v2 + 2 * v3 + 1))+ 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400));
    if (!result) {
      return result;
    }
    return 1;
  }
  if (v4 == 4)
  {
    uint64_t v5 = *(void *)(a1 + 2120);
    goto LABEL_5;
  }
  return 1;
}

uint64_t SETUTF8CHAR(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if ((char)*a2 < -64 || (uint64_t result = utf8_determineUTF8CharLength(*a2), (int)(result << 16) < 1))
  {
    uint64_t v4 = 0;
  }
  else
  {
    LOWORD(v4) = 0;
    do
    {
      *(unsigned char *)(v2 + (__int16)v4) = a2[(__int16)v4];
      LOWORD(v4) = v4 + 1;
    }
    while ((__int16)result > (__int16)v4);
    uint64_t v4 = (__int16)v4;
  }
  *(unsigned char *)(v2 + v4) = 0;
  return result;
}

uint64_t CHECK_OF_LIST(uint64_t a1, unsigned __int16 a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 1360) = 0;
  uint64_t v9 = *(char **)(a1 + 1456);
  int v10 = *v9;
  uint64_t result = 1;
  if (v10 != a2)
  {
    int v12 = a2;
    uint64_t v13 = (unsigned char *)(a1 + 1400);
    uint64_t v14 = a3;
LABEL_3:
    __int16 v15 = v9 + 1;
    *(void *)(a1 + 1456) = v9 + 1;
    size_t v16 = 1;
    switch((char)v10)
    {
      case 2:
        signed int v20 = *v15;
        int v21 = *(__int16 *)(a1 + 46);
        if (v20 > v21)
        {
          log_OutText(*(void *)(*(void *)(a1 + 2080) + 32), (uint64_t)"FE_DEPES", 3, 0, (uint64_t)"warning: pActRule > nr_vars (1)", a6, a7, a8, v56);
          signed int v20 = **(unsigned __int8 **)(a1 + 1456);
          int v21 = *(__int16 *)(a1 + 46);
        }
        if (v20 > v21) {
          return 0;
        }
        BOOL v22 = (unsigned char *)(*(void *)(a1 + 1512) + 5 * v20);
        if (*v22)
        {
          int v23 = *v13;
          if (!*v13) {
            goto LABEL_88;
          }
          uint64_t v24 = 0;
          int v25 = 0;
          do
          {
            if (v23 != v22[v24]) {
              goto LABEL_88;
            }
            uint64_t v24 = (__int16)++v25;
            int v23 = v13[(__int16)v25];
            size_t v16 = 1;
          }
          while (v13[(__int16)v25]);
          goto LABEL_85;
        }
        if (!VAR_APPEARENCE(a1, v20)) {
          goto LABEL_88;
        }
        *(_DWORD *)(a1 + 1480) = 1;
        uint64_t v52 = *(void *)(a1 + 1512) + 5 * **(unsigned __int8 **)(a1 + 1456);
        int v37 = (unsigned __int8 *)(a1 + 1400);
        goto LABEL_83;
      case 3:
        if (*v13) {
          BOOL v26 = *v13 == 31;
        }
        else {
          BOOL v26 = 1;
        }
        if (v26) {
          goto LABEL_88;
        }
        uint64_t v27 = *(void *)(a1 + 2120);
        goto LABEL_36;
      case 4:
        if (*v13) {
          BOOL v28 = *v13 == 31;
        }
        else {
          BOOL v28 = 1;
        }
        if (v28) {
          goto LABEL_88;
        }
        uint64_t v29 = *(void *)(a1 + 2120);
        goto LABEL_43;
      case 5:
        if (*v13) {
          BOOL v30 = *v13 == 31;
        }
        else {
          BOOL v30 = 1;
        }
        if (v30) {
          goto LABEL_88;
        }
        uint64_t v27 = *(void *)(a1 + 2128);
LABEL_36:
        if (!cstdlib_strstr(*(char **)(*(void *)(v27 + 8 * (*v15 - 1)) + 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400)))goto LABEL_88; {
        goto LABEL_84;
        }
      case 6:
        if (*v13) {
          BOOL v31 = *v13 == 31;
        }
        else {
          BOOL v31 = 1;
        }
        if (v31) {
          goto LABEL_88;
        }
        uint64_t v29 = *(void *)(a1 + 2128);
LABEL_43:
        if (cstdlib_strstr(*(char **)(*(void *)(v29 + 8 * (*v15 - 1)) + 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400)))
        {
          goto LABEL_88;
        }
        goto LABEL_84;
      case 7:
        if (!cstdlib_strstr(*(char **)(*(void *)(*(void *)(a1 + 2128) + 8 * (*v15 - 1))+ 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400)))goto LABEL_88; {
        uint64_t v32 = cstdlib_strstr((char *)(*(void *)(a1 + 88) + ((unint64_t)**(unsigned __int8 **)(a1 + 1456) << 8) - 256), (const char *)(a1 + 1400));
        }
        if (!v32 || !*v13 || *v13 == 31) {
          goto LABEL_88;
        }
        uint64_t v33 = **(unsigned __int8 **)(a1 + 1456);
        uint64_t v34 = v33 - 1;
        uint64_t v35 = *(void *)(a1 + 88);
        uint64_t v36 = v35 + (v33 << 8);
        if (v34) {
          int v37 = (unsigned __int8 *)(v36 + v32[256 * v34 + *(void *)(a1 + 96) - v35 + -256 * v34] - 512);
        }
        else {
          int v37 = (unsigned __int8 *)(v36
        }
                                  + v32[256 * (unint64_t)v34
                                                       + *(void *)(a1 + 96)
                                                       - v35
                                                       + -256 * (unint64_t)v34]);
        uint64_t v52 = a1 + 1484;
LABEL_83:
        SETUTF8CHAR(v52, v37);
        goto LABEL_84;
      case 12:
        int v38 = *v13;
        if (*v13) {
          BOOL v39 = v38 == 31;
        }
        else {
          BOOL v39 = 1;
        }
        if (v39) {
          goto LABEL_88;
        }
        uint64_t v40 = 0;
        int v41 = 0;
        do
        {
          if (v38 != v15[v40]) {
            goto LABEL_88;
          }
          uint64_t v40 = (__int16)++v41;
          int v38 = v13[(__int16)v41];
        }
        while (v13[(__int16)v41]);
        size_t v16 = cstdlib_strlen((const char *)(a1 + 1400));
        goto LABEL_85;
      case 13:
        int v42 = *v13;
        if (*v13) {
          BOOL v43 = v42 == 31;
        }
        else {
          BOOL v43 = 1;
        }
        if (v43) {
          goto LABEL_88;
        }
        uint64_t v44 = 0;
        int v45 = 0;
        while (v42 == v15[v44])
        {
          uint64_t v44 = (__int16)++v45;
          int v42 = v13[(__int16)v45];
          if (!v13[(__int16)v45]) {
            goto LABEL_88;
          }
        }
        int v53 = v9 + 2;
        do
        {
          *(void *)(a1 + 1456) = v53;
          int v54 = *v53++;
        }
        while (v54 <= -65);
        uint64_t v9 = v53 - 1;
        goto LABEL_86;
      case 14:
      case 16:
        *(void *)(a1 + 1360) = *(void *)(a1 + 1440);
        uint64_t v17 = *(void *)(*(void *)(a1 + 1504) + 8 * *v15 - 8);
        *(void *)(a1 + 1440) = v17;
        goto LABEL_7;
      case 15:
      case 17:
        uint64_t v17 = *(void *)(a1 + 1360);
        if (!v17) {
          return 0;
        }
        *(void *)(a1 + 1440) = v17;
        *(void *)(a1 + 1360) = 0;
LABEL_7:
        unsigned int v18 = (unsigned int *)(v17 + 4 * v14);
        if (*(unsigned int **)(a1 + 2096) != v18)
        {
          Utf32SymToUtf8Sym(*v18, (unsigned char *)(a1 + 1400), 5u);
          int v19 = (_DWORD *)(*(void *)(a1 + 1440) + 4 * v14);
          *(unsigned char *)(a1 + 1405) = *v19 & 0x3F;
          *(void *)(a1 + 2096) = v19;
        }
        uint64_t result = 0;
        if (!*v13 || *v13 == 31) {
          return result;
        }
        goto LABEL_84;
      case 21:
        signed int v46 = *v15;
        int v47 = *(__int16 *)(a1 + 46);
        if (v46 > v47)
        {
          log_OutText(*(void *)(*(void *)(a1 + 2080) + 32), (uint64_t)"FE_DEPES", 3, 0, (uint64_t)"warning: pActRule > nr_vars (2)", a6, a7, a8, v56);
          signed int v46 = **(unsigned __int8 **)(a1 + 1456);
          int v47 = *(__int16 *)(a1 + 46);
        }
        if (v46 > v47) {
          return 0;
        }
        uint64_t v48 = (unsigned char *)(*(void *)(a1 + 1512) + 5 * v46);
        if (!*v48) {
          goto LABEL_84;
        }
        int v49 = *v13;
        if (!*v13) {
          goto LABEL_84;
        }
        uint64_t v50 = 0;
        int v51 = 0;
        break;
      default:
        goto LABEL_85;
    }
    do
    {
      if (v49 != v48[v50])
      {
LABEL_84:
        size_t v16 = 1;
LABEL_85:
        uint64_t v9 = (char *)(*(void *)(a1 + 1456) + v16);
        *(void *)(a1 + 1456) = v9;
LABEL_86:
        int v10 = *v9;
        if (v10 == v12) {
          return 1;
        }
        goto LABEL_3;
      }
      uint64_t v50 = (__int16)++v51;
      int v49 = v13[(__int16)v51];
    }
    while (v13[(__int16)v51]);
LABEL_88:
    uint64_t v55 = *(void *)(a1 + 1360);
    if (v55)
    {
      uint64_t result = 0;
      *(void *)(a1 + 1440) = v55;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TOKEN1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (a2 < 0) {
    log_OutText(*(void *)(*(void *)(a1 + 2080) + 32), (uint64_t)"FE_DEPES", 3, 0, (uint64_t)"warning: nr < 0 (2)", a6, a7, a8, v15);
  }
  uint64_t v10 = *(void *)(a1 + 1440);
  do
  {
    uint64_t v11 = (__int16)v8;
    unsigned int v12 = *(_DWORD *)(v10 + 4 * (__int16)v8++);
  }
  while (v12 == 126);
  if (*(void *)(a1 + 2096) != v10 + 4 * v11)
  {
    Utf32SymToUtf8Sym(v12, (unsigned char *)(a1 + 1400), 5u);
    uint64_t v13 = (_DWORD *)(*(void *)(a1 + 1440) + 4 * v11);
    *(unsigned char *)(a1 + 1405) = *v13 & 0x3F;
    *(void *)(a1 + 2096) = v13;
  }
  return v11;
}

uint64_t LOG_WARNING_ON_MAX_NUMBER(uint64_t result, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 5000 && *(__int16 *)(result + 2088) >= 3) {
    return log_OutText(*(void *)(*(void *)(result + 2080) + 32), (uint64_t)"FE_DEPES", 3, 0, (uint64_t)"warning: number of iterations >= MAX_NUMBER_UPPER_BOUND, output might be incorrect (%u)", a6, a7, a8, a3);
  }
  return result;
}

uint64_t CONTEXT_CHOICE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned char **)(a1 + 1456);
  switch(*v9)
  {
    case 2:
      int v12 = *(__int16 *)(a1 + 1466);
      if (v12 < 0) {
        return 0;
      }
      __int16 v13 = TOKEN(a1, v12, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 1466) = v13;
      uint64_t v15 = *(void *)(a1 + 1456);
      *(void *)(a1 + 1456) = v15 + 1;
      uint64_t v16 = *(unsigned __int8 *)(v15 + 1);
      __int16 v17 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v17;
      *(void *)(a1 + 1456) = v15 + 2;
      *(_WORD *)(a1 + 1466) = v17 + v13;
      int v18 = *(unsigned __int8 *)(a1 + 1400);
      if (!*(unsigned char *)(a1 + 1400) || v18 == 31) {
        return v14;
      }
      uint64_t v19 = a1 + 1400;
      uint64_t v20 = 5 * v16;
      int v21 = (unsigned char *)(*(void *)(a1 + 1512) + 5 * v16);
      if (*v21)
      {
        uint64_t v22 = 0;
        int v23 = 0;
        uint64_t v14 = 1;
        do
        {
          if (v18 != v21[v22]) {
            return 0;
          }
          uint64_t v22 = (__int16)++v23;
          int v18 = *(unsigned __int8 *)(v19 + (__int16)v23);
        }
        while (*(unsigned char *)(v19 + (__int16)v23));
      }
      else
      {
        if (!VAR_APPEARENCE(a1, v16)) {
          return 0;
        }
        uint64_t v14 = 1;
        *(_DWORD *)(a1 + 1480) = 1;
        SETUTF8CHAR(*(void *)(a1 + 1512) + v20, (unsigned __int8 *)(a1 + 1400));
      }
      return v14;
    case 3:
      int v24 = *(__int16 *)(a1 + 1466);
      if (v24 < 0) {
        return 0;
      }
      __int16 v25 = TOKEN(a1, v24, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 1466) = v25;
      uint64_t v26 = *(void *)(a1 + 1456);
      *(void *)(a1 + 1456) = v26 + 1;
      char v27 = *(unsigned char *)(v26 + 1);
      __int16 v28 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v28;
      *(void *)(a1 + 1456) = v26 + 2;
      *(_WORD *)(a1 + 1466) = v28 + v25;
      if (!*(unsigned char *)(a1 + 1400) || *(unsigned char *)(a1 + 1400) == 31) {
        return v14;
      }
      uint64_t v29 = (const char *)(a1 + 1400);
      uint64_t v30 = *(void *)(a1 + 2120);
      return cstdlib_strstr(*(char **)(*(void *)(v30 + 8 * (v27 - 1)) + 8 * *(unsigned __int8 *)(a1 + 1405)), v29) != 0;
    case 4:
      int v31 = *(__int16 *)(a1 + 1466);
      if (v31 < 0) {
        return 0;
      }
      __int16 v32 = TOKEN(a1, v31, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 1466) = v32;
      uint64_t v33 = *(void *)(a1 + 1456);
      *(void *)(a1 + 1456) = v33 + 1;
      char v34 = *(unsigned char *)(v33 + 1);
      __int16 v35 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v35;
      *(void *)(a1 + 1456) = v33 + 2;
      *(_WORD *)(a1 + 1466) = v35 + v32;
      if (!*(unsigned char *)(a1 + 1400) || *(unsigned char *)(a1 + 1400) == 31) {
        return v14;
      }
      uint64_t v36 = (const char *)(a1 + 1400);
      uint64_t v37 = *(void *)(a1 + 2120);
      return cstdlib_strstr(*(char **)(*(void *)(v37 + 8 * (v34 - 1)) + 8 * *(unsigned __int8 *)(a1 + 1405)), v36) == 0;
    case 5:
      int v38 = *(__int16 *)(a1 + 1466);
      if (v38 < 0) {
        return 0;
      }
      __int16 v39 = TOKEN(a1, v38, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 1466) = v39;
      uint64_t v40 = *(void *)(a1 + 1456);
      *(void *)(a1 + 1456) = v40 + 1;
      char v27 = *(unsigned char *)(v40 + 1);
      __int16 v41 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v41;
      *(void *)(a1 + 1456) = v40 + 2;
      *(_WORD *)(a1 + 1466) = v41 + v39;
      if (!*(unsigned char *)(a1 + 1400) || *(unsigned char *)(a1 + 1400) == 31) {
        return v14;
      }
      uint64_t v29 = (const char *)(a1 + 1400);
      uint64_t v30 = *(void *)(a1 + 2128);
      return cstdlib_strstr(*(char **)(*(void *)(v30 + 8 * (v27 - 1)) + 8 * *(unsigned __int8 *)(a1 + 1405)), v29) != 0;
    case 6:
      int v42 = *(__int16 *)(a1 + 1466);
      if (v42 < 0) {
        return 0;
      }
      __int16 v43 = TOKEN(a1, v42, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 1466) = v43;
      uint64_t v44 = *(void *)(a1 + 1456);
      *(void *)(a1 + 1456) = v44 + 1;
      char v34 = *(unsigned char *)(v44 + 1);
      __int16 v45 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v45;
      *(void *)(a1 + 1456) = v44 + 2;
      *(_WORD *)(a1 + 1466) = v45 + v43;
      if (!*(unsigned char *)(a1 + 1400) || *(unsigned char *)(a1 + 1400) == 31) {
        return v14;
      }
      uint64_t v36 = (const char *)(a1 + 1400);
      uint64_t v37 = *(void *)(a1 + 2128);
      return cstdlib_strstr(*(char **)(*(void *)(v37 + 8 * (v34 - 1)) + 8 * *(unsigned __int8 *)(a1 + 1405)), v36) == 0;
    case 8:
      *(void *)(a1 + 1456) = v9 + 3;
      if (*(_DWORD *)(a1 + 1352))
      {
        __int16 v51 = *(_WORD *)(a1 + 1464) + 1;
        *(_WORD *)(a1 + 1464) = v51;
        *(_WORD *)(a1 + 2 * v51 + 848) = 8;
        uint64_t v52 = *(__int16 *)(a1 + 1464);
        *(void *)(a1 + 8 * v52 + 952) = *(void *)(a1 + 1440);
        *(void *)(a1 + 248 + 8 * v52) = *(void *)(a1 + 1456) - 3;
        *(unsigned char *)(a1 + 192 + v52) = 0;
        uint64_t v53 = *(__int16 *)(a1 + 1464);
        if (*(unsigned __int8 *)(a1 + 192 + v53) >= *(unsigned __int8 *)(*(void *)(a1 + 248 + 8 * v53)
                                                                                      + 1))
        {
          __int16 v61 = *(_WORD *)(a1 + 1470);
          uint64_t v14 = 1;
          BOOL v62 = 1;
        }
        else
        {
          __int16 v54 = *(_WORD *)(a1 + 1466);
          do
          {
            if (v54 < 0) {
              return 0;
            }
            *(_WORD *)(a1 + 1466) = TOKEN(a1, v54, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
            ++*(unsigned char *)(a1 + 192 + *(__int16 *)(a1 + 1464));
            *(void *)(a1 + 1456) = *(void *)(a1 + 248 + 8 * *(__int16 *)(a1 + 1464)) + 3;
            uint64_t v60 = CHECK_OF_LIST(a1, 8u, *(__int16 *)(a1 + 1466), v55, v56, v57, v58, v59);
            __int16 v61 = *(_WORD *)(a1 + 1468);
            *(_WORD *)(a1 + 1470) = v61;
            __int16 v54 = *(_WORD *)(a1 + 1466) + v61;
            *(_WORD *)(a1 + 1466) = v54;
            uint64_t v53 = *(__int16 *)(a1 + 1464);
            BOOL v62 = v60 != 0;
          }
          while (*(unsigned __int8 *)(a1 + 192 + v53) < *(unsigned __int8 *)(*(void *)(a1 + 248 + 8 * v53)
                                                                                          + 1)
               && v60 != 0);
          uint64_t v14 = v60;
        }
        *(_WORD *)(a1 + 2 * v53 + 748) = v61;
        uint64_t v144 = *(__int16 *)(a1 + 1464);
        if (!*(unsigned char *)(a1 + v144 + 192))
        {
          int v145 = *(unsigned char **)(a1 + 1456);
          if (*v145 != 8)
          {
            uint64_t v146 = v145 + 1;
            do
            {
              *(void *)(a1 + 1456) = v146;
              int v147 = *v146++;
            }
            while (v147 != 8);
          }
        }
        *(_WORD *)(a1 + 2 * v144 + 648) = *(_WORD *)(a1 + 1466);
        if (!v62) {
LABEL_117:
        }
          --*(_WORD *)(a1 + 1464);
      }
      else
      {
        int v135 = *(__int16 *)(a1 + 1466);
        if (v135 < 0) {
          return 0;
        }
        int v136 = TOKEN(a1, v135, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
        *(_WORD *)(a1 + 1466) = v136;
        *(_DWORD *)(a1 + 1352) = 1;
        uint64_t v14 = CHECK_OF_LIST(a1, 8u, v136, v137, v138, v139, v140, v141);
        *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 1464) + 748) = *(_WORD *)(a1 + 1468);
        __int16 v142 = *(_WORD *)(a1 + 1468);
        *(_WORD *)(a1 + 1470) = v142;
        __int16 v143 = *(_WORD *)(a1 + 1466) + v142;
        *(_WORD *)(a1 + 1466) = v143;
        *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 1464) + 648) = v143;
        if (!v14) {
          goto LABEL_117;
        }
      }
      ++*(void *)(a1 + 1456);
      return v14;
    case 9:
      uint64_t v64 = (uint64_t)(v9 + 1);
      *(void *)(a1 + 1456) = v9 + 1;
      int v65 = v9[1];
      if (v65)
      {
        if (v65 == 1)
        {
          __int16 v66 = *(_WORD *)(a1 + 1464) + 1;
          *(_WORD *)(a1 + 1464) = v66;
          *(_WORD *)(a1 + 2 * v66 + 748) = *(_WORD *)(a1 + 1470);
          uint64_t v67 = *(__int16 *)(a1 + 1464);
          *(void *)(a1 + 8 * v67 + 952) = *(void *)(a1 + 1440);
          *(_WORD *)(a1 + 2 * v67 + 848) = 9;
          *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 1464) + 648) = *(_WORD *)(a1 + 1466);
          *(unsigned char *)(a1 + *(__int16 *)(a1 + 1464) + 192) = **(unsigned char **)(a1 + 1456);
          *(void *)(a1 + 8 * *(__int16 *)(a1 + 1464) + 248) = *(void *)(a1 + 1456) + 1;
          uint64_t v64 = *(void *)(a1 + 1456);
        }
        else
        {
          SKIP_DATA(a1, 9, 0);
          uint64_t v64 = *(void *)(a1 + 1456) + 1;
        }
      }
      goto LABEL_237;
    case 0xA:
      *(void *)(a1 + 1456) = v9 + 1;
      if (v9[1])
      {
        __int16 v68 = *(_WORD *)(a1 + 1464) + 1;
        *(_WORD *)(a1 + 1464) = v68;
        *(_WORD *)(a1 + 2 * v68 + 748) = *(_WORD *)(a1 + 1470);
        uint64_t v69 = *(__int16 *)(a1 + 1464);
        *(void *)(a1 + 8 * v69 + 952) = *(void *)(a1 + 1440);
        *(_WORD *)(a1 + 2 * v69 + 848) = 10;
        *(_WORD *)(a1 + 2 * *(__int16 *)(a1 + 1464) + 648) = *(_WORD *)(a1 + 1466);
        uint64_t v70 = *(__int16 *)(a1 + 1464);
        *(void *)(a1 + 8 * v70 + 248) = *(void *)(a1 + 1456) + 1;
        *(unsigned char *)(a1 + v70 + 192) = 0;
        SKIP_DATA(a1, 10, 0);
        uint64_t v9 = *(unsigned char **)(a1 + 1456);
      }
      goto LABEL_5;
    case 0xB:
      int v71 = *(__int16 *)(a1 + 1466);
      *(_WORD *)(a1 + 1472) = *(_WORD *)(a1 + 1466);
      if (v71 < 0) {
        return 0;
      }
      int v72 = TOKEN(a1, v71, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 1466) = v72;
      uint64_t v78 = *(void *)(a1 + 1456);
      int v79 = *(unsigned __int8 *)(v78 + 2);
      if (v79 == 220) {
        int v79 = 5000;
      }
      *(_WORD *)(a1 + 1406) = v79;
      if (v79
        && (*(void *)(a1 + 1456) = v78 + 3, CHECK_OF_LIST(a1, 0xBu, v72, v73, v74, v75, v76, v77)))
      {
        LOWORD(v80) = 0;
        do
        {
          uint64_t v81 = *(void *)(a1 + 1456);
          __int16 v82 = *(_WORD *)(a1 + 1468);
          __int16 v83 = v82 + *(_WORD *)(a1 + 1466);
          *(_WORD *)(a1 + 1466) = v83;
          *(_WORD *)(a1 + 1472) = v83;
          if (v83 < 0) {
            return 0;
          }
          int v84 = TOKEN(a1, v83, v82, v73, v74, v75, v76, v77);
          *(_WORD *)(a1 + 1466) = v84;
          int v80 = (__int16)(v80 + 1);
          if (v80 >= *(__int16 *)(a1 + 1406)) {
            break;
          }
          *(void *)(a1 + 1456) = v78 + 3;
        }
        while (CHECK_OF_LIST(a1, 0xBu, v84, v73, v74, v75, v76, v77));
      }
      else
      {
        int v80 = 0;
        uint64_t v81 = 0;
      }
      LOG_WARNING_ON_MAX_NUMBER(a1, v80, 9u, v73, v74, v75, v76, v77);
      *(_WORD *)(a1 + 1466) = *(_WORD *)(a1 + 1472);
      if (v81) {
        *(void *)(a1 + 1456) = v81;
      }
      else {
        uint64_t v81 = *(void *)(a1 + 1456);
      }
      for (uint64_t i = v81 + 1; ; ++i)
      {
        if (*(unsigned char *)(i - 1) == 11)
        {
          unsigned int v154 = *(unsigned __int8 *)(i - 2);
          BOOL v155 = v154 > 0x15;
          int v156 = (1 << v154) & 0x20067C;
          if (v155 || v156 == 0) {
            break;
          }
          unsigned int v158 = *(unsigned __int8 *)(i - 3);
          BOOL v155 = v158 > 0x15;
          int v159 = (1 << v158) & 0x20C67C;
          if (!v155 && v159 != 0) {
            break;
          }
        }
        *(void *)(a1 + 1456) = i;
      }
      *(_WORD *)(a1 + 1470) = *(_WORD *)(a1 + 1468);
      *(void *)(a1 + 1456) = i;
      return v80 >= *(unsigned __int8 *)(v78 + 1);
    case 0xC:
      int v85 = *(__int16 *)(a1 + 1466);
      if (v85 < 0) {
        return 0;
      }
      __int16 v86 = TOKEN(a1, v85, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v87 = *(void *)(a1 + 1456);
      __int16 v88 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v88;
      *(_WORD *)(a1 + 1466) = v88 + v86;
      *(void *)(a1 + 1456) = v87 + 2;
      int v89 = *(unsigned __int8 *)(a1 + 1400);
      if (*(unsigned char *)(a1 + 1400))
      {
        uint64_t v90 = 0;
        int v91 = 0;
        uint64_t v92 = a1 + 1400;
        int v93 = *(unsigned __int8 *)(a1 + 1400);
        do
        {
          BOOL v94 = v93 == *(unsigned __int8 *)(v87 + 1 + v90);
          if (v93 != *(unsigned __int8 *)(v87 + 1 + v90)) {
            break;
          }
          uint64_t v90 = (__int16)++v91;
          int v93 = *(unsigned __int8 *)(v92 + (__int16)v91);
        }
        while (*(unsigned char *)(v92 + (__int16)v91));
      }
      else
      {
        BOOL v94 = 0;
      }
      if (*(char *)(v87 + 2) <= -65)
      {
        long long v148 = (char *)(v87 + 3);
        do
        {
          *(void *)(a1 + 1456) = v148;
          int v149 = *v148++;
        }
        while (v149 < -64);
      }
      if (v89) {
        unsigned int v150 = v94;
      }
      else {
        unsigned int v150 = 0;
      }
      goto LABEL_132;
    case 0xD:
      int v95 = *(__int16 *)(a1 + 1466);
      if (v95 < 0) {
        return 0;
      }
      __int16 v96 = TOKEN(a1, v95, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v97 = *(void *)(a1 + 1456);
      __int16 v98 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v98;
      *(_WORD *)(a1 + 1466) = v98 + v96;
      *(void *)(a1 + 1456) = v97 + 2;
      int v89 = *(unsigned __int8 *)(a1 + 1400);
      if (*(unsigned char *)(a1 + 1400))
      {
        uint64_t v99 = 0;
        int v100 = 0;
        uint64_t v101 = a1 + 1400;
        int v102 = *(unsigned __int8 *)(a1 + 1400);
        do
        {
          BOOL v103 = v102 == *(unsigned __int8 *)(v97 + 1 + v99);
          if (v102 != *(unsigned __int8 *)(v97 + 1 + v99)) {
            break;
          }
          uint64_t v99 = (__int16)++v100;
          int v102 = *(unsigned __int8 *)(v101 + (__int16)v100);
        }
        while (*(unsigned char *)(v101 + (__int16)v100));
      }
      else
      {
        BOOL v103 = 0;
      }
      if (*(char *)(v97 + 2) <= -65)
      {
        long long v151 = (char *)(v97 + 3);
        do
        {
          *(void *)(a1 + 1456) = v151;
          int v152 = *v151++;
        }
        while (v152 < -64);
      }
      unsigned int v150 = !v103;
      if (!v89) {
        unsigned int v150 = 0;
      }
LABEL_132:
      if (v89 == 31) {
        return 0;
      }
      else {
        return v150;
      }
    case 0xE:
    case 0x10:
      *(void *)(a1 + 1456) = v9 + 1;
      *(void *)(a1 + 1376) = *(void *)(a1 + 1440);
      uint64_t v10 = *(void *)(*(void *)(a1 + 1504) + 8 * v9[1] - 8);
      goto LABEL_4;
    case 0xF:
    case 0x11:
      uint64_t v10 = *(void *)(a1 + 1376);
LABEL_4:
      *(void *)(a1 + 1440) = v10;
      *(_WORD *)(a1 + 1470) = 0;
LABEL_5:
      uint64_t v11 = (uint64_t)(v9 + 2);
      goto LABEL_238;
    case 0x12:
      int v104 = *(__int16 *)(a1 + 1466);
      *(_WORD *)(a1 + 1472) = *(_WORD *)(a1 + 1466);
      if (v104 < 0) {
        return 0;
      }
      __int16 v105 = TOKEN(a1, v104, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      LOWORD(v111) = 0;
      *(_WORD *)(a1 + 1466) = v105;
      uint64_t v112 = *(void *)(a1 + 1456);
      int v113 = *(unsigned __int8 *)(v112 + 2);
      if (v113 == 220) {
        int v113 = 5000;
      }
      *(_WORD *)(a1 + 1406) = v113;
      *(void *)(a1 + 1392) = v112 + 4;
      switch(*(unsigned char *)(v112 + 3))
      {
        case 2:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_91;
          }
          __int16 v114 = (unsigned char *)(a1 + 1400);
          while (1)
          {
            uint64_t v115 = 5 * **(unsigned __int8 **)(a1 + 1392);
            int v116 = (unsigned char *)(*(void *)(a1 + 1512) + v115);
            if (*v116) {
              break;
            }
            if (VAR_APPEARENCE(a1, v115))
            {
              *(_DWORD *)(a1 + 1480) = 1;
              SETUTF8CHAR(*(void *)(a1 + 1512) + 5 * **(unsigned __int8 **)(a1 + 1392), (unsigned __int8 *)(a1 + 1400));
              __int16 v105 = *(_WORD *)(a1 + 1466);
LABEL_89:
              __int16 v120 = *(_WORD *)(a1 + 1468);
              *(_WORD *)(a1 + 1466) = v120 + v105;
              *(_WORD *)(a1 + 1472) = v120 + v105;
              if (((v120 + v105) & 0x8000) != 0) {
                return 0;
              }
              __int16 v105 = TOKEN(a1, (__int16)(v120 + v105), v120, v106, v107, v108, v109, v110);
              *(_WORD *)(a1 + 1466) = v105;
              int v111 = (__int16)(v111 + 1);
              if (v111 < *(__int16 *)(a1 + 1406)) {
                continue;
              }
            }
            goto LABEL_91;
          }
          int v117 = *v114;
          if (*v114)
          {
            uint64_t v118 = 0;
            int v119 = 0;
            while (v117 == v116[v118])
            {
              uint64_t v118 = (__int16)++v119;
              int v117 = v114[(__int16)v119];
              if (!v114[(__int16)v119]) {
                goto LABEL_89;
              }
            }
          }
LABEL_91:
          int v121 = (__int16)v111;
          uint64_t v122 = a1;
          unsigned int v123 = 15;
          goto LABEL_230;
        case 3:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_160;
          }
          int v161 = (unsigned char *)(a1 + 1400);
          do
          {
            if (*v161) {
              BOOL v162 = *v161 == 31;
            }
            else {
              BOOL v162 = 1;
            }
            if (v162
              || !cstdlib_strstr(*(char **)(*(void *)(*(void *)(a1 + 2120) + 8 * (**(unsigned char **)(a1 + 1392) - 1))+ 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400)))
            {
              break;
            }
            __int16 v163 = *(_WORD *)(a1 + 1468);
            __int16 v164 = v163 + *(_WORD *)(a1 + 1466);
            *(_WORD *)(a1 + 1466) = v164;
            *(_WORD *)(a1 + 1472) = v164;
            if (v164 < 0) {
              return 0;
            }
            *(_WORD *)(a1 + 1466) = TOKEN(a1, v164, v163, v106, v107, v108, v109, v110);
            int v111 = (__int16)(v111 + 1);
          }
          while (v111 < *(__int16 *)(a1 + 1406));
LABEL_160:
          int v121 = (__int16)v111;
          uint64_t v122 = a1;
          unsigned int v123 = 10;
          goto LABEL_230;
        case 4:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_170;
          }
          long long v165 = (unsigned char *)(a1 + 1400);
          do
          {
            if (*v165) {
              BOOL v166 = *v165 == 31;
            }
            else {
              BOOL v166 = 1;
            }
            if (v166
              || cstdlib_strstr(*(char **)(*(void *)(*(void *)(a1 + 2120) + 8 * (**(unsigned char **)(a1 + 1392) - 1))+ 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400)))
            {
              break;
            }
            __int16 v167 = *(_WORD *)(a1 + 1468);
            __int16 v168 = v167 + *(_WORD *)(a1 + 1466);
            *(_WORD *)(a1 + 1466) = v168;
            *(_WORD *)(a1 + 1472) = v168;
            if (v168 < 0) {
              return 0;
            }
            *(_WORD *)(a1 + 1466) = TOKEN(a1, v168, v167, v106, v107, v108, v109, v110);
            int v111 = (__int16)(v111 + 1);
          }
          while (v111 < *(__int16 *)(a1 + 1406));
LABEL_170:
          int v121 = (__int16)v111;
          uint64_t v122 = a1;
          unsigned int v123 = 11;
          goto LABEL_230;
        case 5:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_231;
          }
          uint64_t v169 = (unsigned char *)(a1 + 1400);
          do
          {
            if (*v169) {
              BOOL v170 = *v169 == 31;
            }
            else {
              BOOL v170 = 1;
            }
            if (v170
              || !cstdlib_strstr(*(char **)(*(void *)(*(void *)(a1 + 2128) + 8 * (**(unsigned char **)(a1 + 1392) - 1))+ 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400)))
            {
              break;
            }
            __int16 v176 = *(_WORD *)(a1 + 1468);
            __int16 v177 = v176 + *(_WORD *)(a1 + 1466);
            *(_WORD *)(a1 + 1466) = v177;
            *(_WORD *)(a1 + 1472) = v177;
            if (v177 < 0) {
              return 0;
            }
            *(_WORD *)(a1 + 1466) = TOKEN(a1, v177, v176, v171, v172, v173, v174, v175);
            int v111 = (__int16)(v111 + 1);
          }
          while (v111 < *(__int16 *)(a1 + 1406));
          goto LABEL_231;
        case 6:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_190;
          }
          BOOL v178 = (unsigned char *)(a1 + 1400);
          do
          {
            if (*v178) {
              BOOL v179 = *v178 == 31;
            }
            else {
              BOOL v179 = 1;
            }
            if (v179
              || cstdlib_strstr(*(char **)(*(void *)(*(void *)(a1 + 2128) + 8 * (**(unsigned char **)(a1 + 1392) - 1))+ 8 * *(unsigned __int8 *)(a1 + 1405)), (const char *)(a1 + 1400)))
            {
              break;
            }
            __int16 v180 = *(_WORD *)(a1 + 1468);
            __int16 v181 = v180 + *(_WORD *)(a1 + 1466);
            *(_WORD *)(a1 + 1466) = v181;
            *(_WORD *)(a1 + 1472) = v181;
            if (v181 < 0) {
              return 0;
            }
            *(_WORD *)(a1 + 1466) = TOKEN(a1, v181, v180, v106, v107, v108, v109, v110);
            int v111 = (__int16)(v111 + 1);
          }
          while (v111 < *(__int16 *)(a1 + 1406));
LABEL_190:
          int v121 = (__int16)v111;
          uint64_t v122 = a1;
          unsigned int v123 = 12;
          goto LABEL_230;
        case 0xC:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_202;
          }
          BOOL v182 = (unsigned char *)(a1 + 1400);
LABEL_193:
          int v183 = *v182;
          if (*v182) {
            BOOL v184 = v183 == 31;
          }
          else {
            BOOL v184 = 1;
          }
          if (v184) {
            goto LABEL_202;
          }
          uint64_t v185 = 0;
          int v186 = 0;
          while (v183 == *(unsigned __int8 *)(*(void *)(a1 + 1392) + v185))
          {
            uint64_t v185 = (__int16)++v186;
            int v183 = v182[(__int16)v186];
            if (!v182[(__int16)v186])
            {
              __int16 v187 = *(_WORD *)(a1 + 1468);
              *(_WORD *)(a1 + 1466) = v187 + v105;
              *(_WORD *)(a1 + 1472) = v187 + v105;
              if (((v187 + v105) & 0x8000) != 0) {
                return 0;
              }
              __int16 v105 = TOKEN(a1, (__int16)(v187 + v105), v187, v106, v107, v108, v109, v110);
              *(_WORD *)(a1 + 1466) = v105;
              int v111 = (__int16)(v111 + 1);
              if (v111 < *(__int16 *)(a1 + 1406)) {
                goto LABEL_193;
              }
              break;
            }
          }
LABEL_202:
          int v121 = (__int16)v111;
          uint64_t v122 = a1;
          unsigned int v123 = 13;
          goto LABEL_230;
        case 0xD:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_215;
          }
          __int16 v188 = (unsigned char *)(a1 + 1400);
          do
          {
            int v189 = *v188;
            if (*v188) {
              BOOL v190 = v189 == 31;
            }
            else {
              BOOL v190 = 1;
            }
            if (v190) {
              break;
            }
            uint64_t v191 = 0;
            int v192 = 0;
            while (v189 == *(unsigned __int8 *)(*(void *)(a1 + 1392) + v191))
            {
              uint64_t v191 = (__int16)++v192;
              int v189 = v188[(__int16)v192];
              if (!v188[(__int16)v192]) {
                goto LABEL_215;
              }
            }
            __int16 v193 = *(_WORD *)(a1 + 1468);
            *(_WORD *)(a1 + 1466) = v193 + v105;
            *(_WORD *)(a1 + 1472) = v193 + v105;
            if (((v193 + v105) & 0x8000) != 0) {
              return 0;
            }
            __int16 v105 = TOKEN(a1, (__int16)(v193 + v105), v193, v106, v107, v108, v109, v110);
            *(_WORD *)(a1 + 1466) = v105;
            int v111 = (__int16)(v111 + 1);
          }
          while (v111 < *(__int16 *)(a1 + 1406));
LABEL_215:
          int v121 = (__int16)v111;
          uint64_t v122 = a1;
          unsigned int v123 = 14;
          goto LABEL_230;
        case 0x15:
          LOWORD(v111) = 0;
          if (!v113) {
            goto LABEL_229;
          }
          uint64_t v194 = (unsigned char *)(a1 + 1400);
          break;
        default:
          goto LABEL_231;
      }
      while (2)
      {
        int v195 = *v194;
        if (*v194) {
          BOOL v196 = v195 == 31;
        }
        else {
          BOOL v196 = 1;
        }
        if (!v196)
        {
          uint64_t v197 = (unsigned char *)(*(void *)(a1 + 1512) + 5 * **(unsigned __int8 **)(a1 + 1392));
          if (*v197)
          {
            uint64_t v198 = 0;
            int v199 = 0;
            while (v195 == v197[v198])
            {
              uint64_t v198 = (__int16)++v199;
              int v195 = v194[(__int16)v199];
              if (!v194[(__int16)v199]) {
                goto LABEL_229;
              }
            }
          }
          __int16 v200 = *(_WORD *)(a1 + 1468);
          *(_WORD *)(a1 + 1466) = v200 + v105;
          *(_WORD *)(a1 + 1472) = v200 + v105;
          if (((v200 + v105) & 0x8000) == 0)
          {
            __int16 v105 = TOKEN(a1, (__int16)(v200 + v105), v200, v106, v107, v108, v109, v110);
            *(_WORD *)(a1 + 1466) = v105;
            int v111 = (__int16)(v111 + 1);
            if (v111 >= *(__int16 *)(a1 + 1406)) {
              break;
            }
            continue;
          }
          return 0;
        }
        break;
      }
LABEL_229:
      int v121 = (__int16)v111;
      uint64_t v122 = a1;
      unsigned int v123 = 16;
LABEL_230:
      LOG_WARNING_ON_MAX_NUMBER(v122, v121, v123, v106, v107, v108, v109, v110);
LABEL_231:
      uint64_t v201 = *(void *)(a1 + 1456);
      if (*(unsigned __int8 *)(v201 + 1) > (unsigned __int16)v111) {
        return 0;
      }
      *(_WORD *)(a1 + 1466) = *(_WORD *)(a1 + 1472);
      uint64_t v64 = v201 + 5;
      *(void *)(a1 + 1456) = v201 + 5;
      *(_WORD *)(a1 + 1470) = *(_WORD *)(a1 + 1468);
      if (*(char *)(v201 + 5) <= -65)
      {
        int v202 = (char *)(v201 + 6);
        do
        {
          *(void *)(a1 + 1456) = v202;
          int v203 = *v202++;
        }
        while (v203 < -64);
        uint64_t v64 = (uint64_t)(v202 - 1);
      }
LABEL_237:
      uint64_t v11 = v64 + 1;
LABEL_238:
      *(void *)(a1 + 1456) = v11;
      return 1;
    case 0x13:
      int v124 = *(__int16 *)(a1 + 1466);
      if (v124 < 0) {
        return 0;
      }
      *(_WORD *)(a1 + 1466) = TOKEN(a1, v124, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 1470) = *(_WORD *)(a1 + 1468);
      uint64_t v11 = *(void *)(a1 + 1456) + 1;
      goto LABEL_238;
    case 0x15:
      int v125 = *(__int16 *)(a1 + 1466);
      if (v125 < 0) {
        return 0;
      }
      __int16 v126 = TOKEN(a1, v125, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      uint64_t v14 = 0;
      *(_WORD *)(a1 + 1466) = v126;
      uint64_t v127 = *(void *)(a1 + 1456);
      *(void *)(a1 + 1456) = v127 + 1;
      uint64_t v128 = *(unsigned __int8 *)(v127 + 1);
      __int16 v129 = *(_WORD *)(a1 + 1468);
      *(_WORD *)(a1 + 1470) = v129;
      *(void *)(a1 + 1456) = v127 + 2;
      *(_WORD *)(a1 + 1466) = v129 + v126;
      int v130 = *(unsigned __int8 *)(a1 + 1400);
      if (!*(unsigned char *)(a1 + 1400) || v130 == 31) {
        return v14;
      }
      uint64_t v131 = (unsigned char *)(*(void *)(a1 + 1512) + 5 * v128);
      if (!*v131) {
        return 1;
      }
      uint64_t v132 = 0;
      int v133 = 0;
      uint64_t v134 = a1 + 1400;
      while (v130 == v131[v132])
      {
        uint64_t v14 = 0;
        uint64_t v132 = (__int16)++v133;
        int v130 = *(unsigned __int8 *)(v134 + (__int16)v133);
        if (!*(unsigned char *)(v134 + (__int16)v133)) {
          return v14;
        }
      }
      return 1;
    default:
      int v46 = *(__int16 *)(a1 + 1466);
      if (v46 < 0) {
        return 0;
      }
      *(_WORD *)(a1 + 1466) = TOKEN(a1, v46, *(__int16 *)(a1 + 1470), a4, a5, a6, a7, a8);
      *(_WORD *)(a1 + 1470) = *(_WORD *)(a1 + 1468);
      int v47 = (const char *)(a1 + 1400);
      int v48 = *(unsigned __int8 *)(a1 + 1400);
      if (!*(unsigned char *)(a1 + 1400)) {
        goto LABEL_102;
      }
      uint64_t v49 = 0;
      int v50 = 0;
      while (v48 == *(unsigned __int8 *)(*(void *)(a1 + 1456) + v49))
      {
        uint64_t v49 = (__int16)++v50;
        int v48 = v47[(__int16)v50];
        if (!v47[(__int16)v50])
        {
          uint64_t v14 = 1;
          goto LABEL_103;
        }
      }
LABEL_102:
      uint64_t v14 = 0;
LABEL_103:
      *(void *)(a1 + 1456) += cstdlib_strlen(v47);
      *(_WORD *)(a1 + 1466) += *(_WORD *)(a1 + 1468);
      return v14;
  }
}

uint64_t SKIP_DATA(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = 0;
  uint64_t v7 = *(unsigned char **)(a1 + 1456);
  LOBYTE(v8) = *v7;
  while (1)
  {
    if (a2 != v8)
    {
LABEL_11:
      if (a2 != 10 || v8 != 10 || !v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    int v6 = v7[1];
    if (v6 == a3)
    {
      unsigned int v9 = *(v7 - 1);
      BOOL v10 = v9 > 0x15;
      int v11 = (1 << v9) & 0x20067C;
      if (v10 || v11 == 0) {
        return 1;
      }
      unsigned int v13 = *(v7 - 2) - 2;
      if (v13 < 0x14 && ((0x8319Fu >> v13) & 1) != 0) {
        return 1;
      }
    }
    if (v6 != 1) {
      goto LABEL_11;
    }
LABEL_14:
    unsigned int v14 = *(v7 - 1);
    BOOL v10 = v14 > 0x15;
    int v15 = (1 << v14) & 0x20067C;
    BOOL v16 = v10 || v15 == 0;
    if (v16 || (unsigned int v17 = *(v7 - 2), v17 <= 0x15) && ((1 << v17) & 0x20C67C) != 0)
    {
      *(void *)(a1 + 1456) = v7 + 1;
      SKIP_DATA(a1, a2, 0);
      uint64_t v18 = *(void *)(a1 + 1456) + 1;
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v18 = (uint64_t)v7;
LABEL_22:
    uint64_t v7 = (unsigned char *)(v18 + 1);
    *(void *)(a1 + 1456) = v18 + 1;
    int v8 = *(unsigned __int8 *)(v18 + 1);
    if (v8 == a2 && !*(unsigned char *)(v18 + 2)) {
      return 0;
    }
  }
}

uint64_t TOKEN(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  if (a2 < 0) {
    log_OutText(*(void *)(*(void *)(a1 + 2080) + 32), (uint64_t)"FE_DEPES", 3, 0, (uint64_t)"warning: nr < 0 (1)", a6, a7, a8, v18);
  }
  uint64_t v11 = *(void *)(a1 + 1440);
  if (a3)
  {
    do
    {
      __int16 v12 = v9;
      int v13 = *(_DWORD *)(v11 + 4 * (__int16)v9);
      v9 += a3;
    }
    while (v13 == 126);
  }
  else
  {
    __int16 v12 = v9;
  }
  uint64_t v14 = v12;
  int v15 = (unsigned int *)(v11 + 4 * v12);
  if (*(unsigned int **)(a1 + 2096) != v15)
  {
    Utf32SymToUtf8Sym(*v15, (unsigned char *)(a1 + 1400), 5u);
    BOOL v16 = (_DWORD *)(*(void *)(a1 + 1440) + 4 * v14);
    *(unsigned char *)(a1 + 1405) = *v16 & 0x3F;
    *(void *)(a1 + 2096) = v16;
  }
  return v14;
}

uint64_t DCT_LKP(uint64_t a1, uint64_t a2, int a3, __int16 *a4)
{
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  unsigned __int16 v8 = 5 * (*a4 - a3) + 1;
  uint64_t v9 = heap_Alloc(*(void *)(a1 + 1528), v8);
  if (!v9)
  {
    uint64_t v26 = 0;
    *(unsigned char *)(a1 + 1428) = -101;
    return v26;
  }
  uint64_t v10 = v9;
  *(void *)&__c[3] = 0;
  unsigned int v29 = 0;
  utf8_Utf32ToUtf8(**(void **)(a1 + 1504) + 4 * a3, (unsigned __int16)(*a4 - a3), v9, v8, &v29);
  *(unsigned char *)(v10 + v29) = 0;
  (*(void (**)(void, void, uint64_t, uint64_t, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 1552) + 96))(*(void *)(a1 + 1536), *(void *)(a1 + 1544), a2, v10, &__c[3], &__c[1], __c);
  if (*(unsigned __int16 *)&__c[1] != 1)
  {
LABEL_30:
    heap_Free(*(void **)(a1 + 1528), v10);
    return 0;
  }
  uint64_t v11 = heap_Alloc(*(void *)(a1 + 1528), 2 * *(unsigned __int16 *)(a1 + 24));
  if (!v11)
  {
    *(unsigned char *)(a1 + 1428) = -101;
    goto LABEL_30;
  }
  uint64_t v12 = v11;
  if (*(__int16 *)(a1 + 24) < 1) {
    goto LABEL_26;
  }
  uint64_t v13 = 0;
  uint64_t v14 = **(char ***)&__c[3];
  do
  {
    *(_WORD *)(v11 + 2 * v13++) = *a4;
    uint64_t v15 = *(__int16 *)(a1 + 24);
  }
  while (v13 < v15);
  if ((int)v15 < 1)
  {
LABEL_26:
    __int16 v17 = 0;
  }
  else
  {
    uint64_t v28 = v10;
    uint64_t v16 = 0;
    __int16 v17 = 0;
    do
    {
      uint64_t v18 = cstdlib_strchr(v14, __c[0]);
      uint64_t v19 = v18;
      if (v18) {
        *uint64_t v18 = 0;
      }
      if (cstdlib_strlen(v14))
      {
        unsigned int v20 = (unsigned __int16)cstdlib_strlen(v14);
        __int16 v21 = Utf8_LengthInUtf8chars((unint64_t)v14, v20);
        int v22 = a3 + v21;
        if (v22 >= *(__int16 *)(*(void *)(a1 + 1416) + 2 * v16) - 1)
        {
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 1428) = -100;
          uint64_t v10 = v28;
          goto LABEL_28;
        }
        utf8_Utf8ToUtf32((uint64_t)v14, v20, 0, *(void *)(*(void *)(a1 + 1504) + 8 * v16) + 4 * a3, (unsigned __int16)(v21 + a3), &v29, 0);
        *(_WORD *)(v12 + 2 * v16) = v22;
      }
      else
      {
        LOWORD(v22) = *(_WORD *)(v12 + 2 * v16);
      }
      if (v17 <= (__int16)v22) {
        __int16 v17 = v22;
      }
      uint64_t v23 = *(__int16 *)(a1 + 24);
      if (!v19) {
        break;
      }
      uint64_t v14 = v19 + 1;
      ++v16;
    }
    while (v16 < v23);
    uint64_t v24 = *(unsigned __int16 *)(a1 + 24);
    if ((__int16)v23 < 1)
    {
      uint64_t v10 = v28;
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v10 = v28;
      do
      {
        if (*(__int16 *)(v12 + 2 * v25) < v17) {
          memset_pattern16((void *)(*(void *)(*(void *)(a1 + 1504) + 8 * v25) + 4 * *(__int16 *)(v12 + 2 * v25)), &unk_2206E25F0, 4 * (unsigned __int16)(v17 + ~*(_WORD *)(v12 + 2 * v25)) + 4);
        }
        ++v25;
      }
      while (v24 != v25);
    }
  }
  *a4 = v17;
  uint64_t v26 = 1;
LABEL_28:
  heap_Free(*(void **)(a1 + 1528), v10);
  heap_Free(*(void **)(a1 + 1528), v12);
  return v26;
}

uint64_t RESTORE_SUBSTITUTION(uint64_t a1, int a2)
{
  uint64_t v4 = *(__int16 *)(a1 + 24);
  if (v4 <= 0)
  {
    __int16 v6 = 0;
    uint64_t v8 = *(void *)(a1 + 1416);
    uint64_t v7 = a2;
  }
  else
  {
    uint64_t v5 = 0;
    __int16 v6 = 0;
    uint64_t v7 = a2;
    uint64_t v8 = *(void *)(a1 + 1416);
    do
    {
      __int16 v9 = *(_WORD *)(v8 + 2 * v5);
      uint64_t v10 = *(void *)(*(void *)(a1 + 1504) + 8 * v5);
      for (__int16 i = v9; ; ++i)
      {
        int v12 = *(_DWORD *)(v10 + 4 * i);
        if (!v12) {
          break;
        }
        if (v12 == 31)
        {
          __int16 v6 = i - v9;
          unsigned __int16 v13 = i - v9 + 1;
          cstdlib_memmove((void *)(v10 + 4 * a2), (const void *)(v10 + 4 * *(__int16 *)(v8 + 2 * v5)), 4 * v13);
          uint64_t v8 = *(void *)(a1 + 1416);
          *(_WORD *)(v8 + 2 * v5) += v13;
          LOWORD(v4) = *(_WORD *)(a1 + 24);
          break;
        }
      }
      ++v5;
    }
    while (v5 < (__int16)v4);
    uint64_t v4 = (__int16)v4;
  }
  cstdlib_memmove((void *)(*(void *)(a1 + 1560) + v7), (const void *)(*(void *)(a1 + 1560) + *(__int16 *)(v8 + 2 * v4)), (unsigned __int16)(v6 + 1));
  *(_WORD *)(*(void *)(a1 + 1416) + 2 * *(__int16 *)(a1 + 24)) += v6 + 1;
  return (__int16)(v6 + a2);
}

uint64_t FirstUtf8SymToUtf32(unsigned __int8 *a1, _DWORD *a2)
{
  int v6 = 0;
  *a2 = 0;
  unsigned int v4 = utf8_determineUTF8CharLength(*a1);
  uint64_t result = utf8_Utf8ToUtf32((uint64_t)a1, v4, 0, (uint64_t)a2, 1u, &v6, 0);
  if ((result & 0x80000000) == 0 && v6 != 1) {
    *a2 = 0;
  }
  return result;
}

uint64_t MOVE_FOR_SUBSTITUTION(uint64_t a1, int a2, int a3, int a4)
{
  if (a4)
  {
    int v5 = a2;
    LODWORD(v7) = *(__int16 *)(a1 + 24);
    if ((int)v7 > 0)
    {
      uint64_t v8 = 0;
      int v9 = a4 + a3 + 1;
      uint64_t v10 = (__int16)(a4 + a2);
      int v23 = a4;
      size_t v11 = 4 * (unsigned __int16)a4;
      do
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 1504) + 8 * v8);
        if (v12 != *(void *)(a1 + 1448))
        {
          if (v9 >= *(__int16 *)(*(void *)(a1 + 1416) + 2 * v8)) {
            goto LABEL_24;
          }
          cstdlib_memmove((void *)(v12 + 4 * v10), (const void *)(v12 + 4 * v5), 4 * (unsigned __int16)(a3 - v5 + 1));
          if ((int)v10 > v5) {
            memset_pattern16((void *)(*(void *)(*(void *)(a1 + 1504) + 8 * v8) + 4 * v5), &unk_2206E25F0, v11);
          }
        }
        ++v8;
        uint64_t v7 = *(__int16 *)(a1 + 24);
      }
      while (v8 < v7);
      a4 = v23;
    }
    if (a4 < 0)
    {
      uint64_t v7 = *(void *)(a1 + 1560);
      if ((__int16)(a4 + v5) >= v5)
      {
        char v13 = 0;
        uint64_t v14 = v5;
      }
      else
      {
        char v13 = 0;
        uint64_t v14 = v5;
        uint64_t v15 = (char *)(v7 + (__int16)(a4 + v5));
        uint64_t v16 = v5 - (uint64_t)(__int16)(a4 + v5);
        do
        {
          char v17 = *v15++;
          v13 += v17;
          --v16;
        }
        while (v16);
      }
      *(unsigned char *)(v7 + v14) += v13;
      LOWORD(v7) = *(_WORD *)(a1 + 24);
    }
    __int16 v18 = a4 + a3;
    if (a4 + a3 >= *(__int16 *)(*(void *)(a1 + 1416) + 2 * (__int16)v7) - 1)
    {
LABEL_24:
      __int16 v18 = 0;
      *(unsigned char *)(a1 + 1428) = -100;
    }
    else
    {
      int v19 = a4;
      uint64_t v20 = a4 + (uint64_t)v5;
      cstdlib_memmove((void *)(*(void *)(a1 + 1560) + v20), (const void *)(*(void *)(a1 + 1560) + v5), (unsigned __int16)(a3 - v5 + 1));
      if (v19 >= 1)
      {
        do
          *(unsigned char *)(*(void *)(a1 + 1560) + (__int16)v5++) = 0;
        while ((int)v20 > (__int16)v5);
      }
      for (__int16 i = v18 + 1; i <= a3; ++i)
        *(unsigned char *)(*(void *)(a1 + 1560) + i) = 0;
    }
  }
  else
  {
    return (__int16)a3;
  }
  return v18;
}

uint64_t COUNTSYL(uint64_t a1, int a2, _WORD *a3)
{
  LODWORD(v3) = (__int16)(*a3 - 1);
  if ((int)v3 >= a2)
  {
    unsigned int v4 = *(uint64_t **)(a1 + 1504);
    uint64_t v5 = *v4;
    __int16 v6 = 1;
    do
    {
      uint64_t v3 = (__int16)v3;
      if (*(_DWORD *)(v5 + 4 * (__int16)v3) == 45)
      {
        if (v6 <= 9) {
          *(_DWORD *)(v4[3] + 4 * v3) = (unsigned __int16)(v6 + 48);
        }
        ++v6;
      }
      LODWORD(v3) = (__int16)(v3 - 1);
    }
    while ((int)v3 >= a2);
  }
  return 1;
}

uint64_t COPY_L1_TO_L2(uint64_t a1, int a2, __int16 *a3)
{
  int v3 = *a3;
  if (*(__int16 *)(*(void *)(a1 + 1416) + 2) - 1 <= v3)
  {
    uint64_t v4 = 0;
    *(unsigned char *)(a1 + 1428) = -100;
  }
  else
  {
    cstdlib_memmove((void *)(*(void *)(*(void *)(a1 + 1504) + 8) + 4 * a2), (const void *)(**(void **)(a1 + 1504) + 4 * a2), 4 * (unsigned __int16)(v3 - a2));
    return 1;
  }
  return v4;
}

uint64_t TAGTQ(uint64_t a1, int a2, __int16 *a3)
{
  int v5 = *a3;
  int v6 = (__int16)(*a3 - 1);
  uint64_t v7 = *(uint64_t **)(a1 + 1504);
  uint64_t v8 = v7[1];
  if (v6 >= a2)
  {
    LOWORD(v22) = *a3 - 1;
    do
    {
      int v23 = *(_DWORD *)(v8 + 4 * (__int16)v22);
      if (v23 != 126 && v23 != 32) {
        break;
      }
      int v22 = (__int16)(v22 - 1);
    }
    while (v22 >= a2);
    if (*(_DWORD *)(v8 + 4 * (__int16)v22) == 63)
    {
      uint64_t v9 = *v7;
      while (v6 >= a2)
      {
        int v24 = *(_DWORD *)(v9 + 4 * (__int16)v6);
        if (v24 != 20 && v24 != 126 && v24 != 32) {
          break;
        }
        int v6 = (__int16)(v6 - 1);
      }
      goto LABEL_4;
    }
    return 1;
  }
  if (*(_DWORD *)(v8 + 4 * (__int16)(*a3 - 1)) != 63) {
    return 1;
  }
  uint64_t v9 = *v7;
LABEL_4:
  if (a2 <= (__int16)v6)
  {
    __int16 v25 = 0;
    int v10 = v6;
    do
    {
      int v26 = *(_DWORD *)(v9 + 4 * (__int16)v10);
      if (v26 == 45 || v26 == 32) {
        ++v25;
      }
      if (v26 == 35) {
        break;
      }
      int v10 = (__int16)(v10 - 1);
      if (v10 < a2) {
        break;
      }
    }
    while (v25 < 3);
  }
  else
  {
    int v10 = v6;
  }
  do
  {
    unsigned int v11 = *(_DWORD *)(v9 + 4 * (__int16)++v10);
    BOOL v12 = v11 > 0x23 || ((1 << v11) & 0x900100000) == 0;
  }
  while (!v12 || v11 == 126);
  if (v5 + 4 >= **(__int16 **)(a1 + 1416) - 1
    || (uint64_t v13 = (__int16)v10 + 4,
        cstdlib_memmove((void *)(v9 + 4 * v13), (const void *)(v9 + 4 * (__int16)v10), 4 * (unsigned __int16)(v5 - v10)), int v14 = *a3, v14 + 4 >= *(__int16 *)(*(void *)(a1 + 1416) + 2) - 1)|| (cstdlib_memmove((void *)(*(void *)(*(void *)(a1 + 1504) + 8) + 4 * v13), (const void *)(*(void *)(*(void *)(a1 + 1504) + 8) + 4 * (__int16)v10), 4 * (unsigned __int16)(v14 - v10)), v15 = *a3, v15 + 4 >= *(__int16 *)(*(void *)(a1 + 1416) + 4) - 1)|| (cstdlib_memmove((void *)(*(void *)(*(void *)(a1 + 1504) + 16) + 4 * v13), (const void *)(*(void *)(*(void *)(a1 + 1504) + 16) + 4 * (__int16)v10), 4 * (unsigned __int16)(v15 - v10)), v16 = *a3, v16 + 4 >= *(__int16 *)(*(void *)(a1 + 1416) + 6) - 1))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 1428) = -100;
  }
  else
  {
    cstdlib_memmove((void *)(*(void *)(*(void *)(a1 + 1504) + 24) + 4 * v13), (const void *)(*(void *)(*(void *)(a1 + 1504) + 24) + 4 * (__int16)v10), 4 * (unsigned __int16)(v16 - v10));
    *a3 += 4;
    char v17 = *(void **)(a1 + 1504);
    uint64_t v18 = v17[1];
    *(_OWORD *)(*v17 + 4 * (__int16)v10) = xmmword_2206E2600;
    uint64_t v19 = v17[2];
    uint64_t v20 = v17[3];
    uint64_t result = 1;
    do
    {
      *(_DWORD *)(v18 + 4 * (__int16)v10) = 126;
      *(_DWORD *)(v19 + 4 * (__int16)v10) = 126;
      *(_DWORD *)(v20 + 4 * (__int16)v10++) = 126;
    }
    while ((int)v13 > (__int16)v10);
  }
  return result;
}

uint64_t fe_depes_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v10 = 2305826826;
  HIWORD(v41) = 0;
  cstdlib_strcpy(__dst, "");
  if (!a5) {
    return 2305826823;
  }
  *a5 = 0;
  *((_DWORD *)a5 + 2) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v43);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  log_OutText(*(void *)(v43 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Entering fe_depes_ObjOpen", v12, v13, v14, v41);
  uint64_t inited = objc_GetObject(*(void *)(v43 + 48), (uint64_t)"FE_DCTLKP", &v42);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v15 = heap_Calloc(*(void **)(v43 + 8), 1, 712);
  if (v15)
  {
    uint64_t v20 = v15;
    *a5 = v15;
    *((_DWORD *)a5 + 2) = 62334;
    uint64_t v21 = v43;
    *(void *)(v20 + 16) = a3;
    *(void *)(v20 + 24) = a4;
    *(void *)(v20 + 32) = a1;
    *(void *)(v20 + 40) = a2;
    *(void *)uint64_t v20 = v21;
    *(void *)(v20 + 8) = a1;
    uint64_t v22 = v42;
    *(void *)(v20 + 64) = *(void *)(v42 + 8);
    long long v23 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 48) = v23;
    *(_OWORD *)(v20 + 170) = 0u;
    *(_OWORD *)(v20 + 160) = 0u;
    *(void *)(v20 + 72) = 0;
    *(_DWORD *)(v20 + 186) = 3172;
    *(void *)(v20 + 80) = 0;
    int v24 = (void *)(v20 + 80);
    *(void *)(v20 + 192) = 0;
    if (((hlp_CreateLngBrokerString(v21, __dst, 0) & 0x80000000) != 0
       || (hlp_OpenData(*(void *)v20, (uint64_t)__dst, (uint64_t *)(v20 + 72), (_DWORD *)(v20 + 136)) & 0x80000000) != 0
       || !*(void *)(v20 + 72))
      && ((LngBrokeruint64_t String = hlp_CreateLngBrokerString(*(void *)v20, __dst, 1), (LngBrokerString & 0x80000000) != 0)
       || (LngBrokeruint64_t String = hlp_OpenData(*(void *)v20, (uint64_t)__dst, (uint64_t *)(v20 + 72), (_DWORD *)(v20 + 136)),
           (LngBrokerString & 0x80000000) != 0))
      || ((cstdlib_strcpy((char *)(v20 + 200), __dst),
           (hlp_CreateVoiceBrokerString_0(*(void *)v20, __dst, 0, 0) & 0x80000000) != 0)
       || (hlp_OpenData(*(void *)v20, (uint64_t)__dst, (uint64_t *)(v20 + 80), (_DWORD *)(v20 + 140)) & 0x80000000) != 0
       || !*v24)
      && ((hlp_CreateVoiceBrokerString_0(*(void *)v20, __dst, 1, 1) & 0x80000000) != 0
       || (hlp_OpenData(*(void *)v20, (uint64_t)__dst, (uint64_t *)(v20 + 80), (_DWORD *)(v20 + 140)) & 0x80000000) != 0
       || !*v24)
      && ((LngBrokeruint64_t String = hlp_CreateVoiceBrokerString_0(*(void *)v20, __dst, 1, 0),
           (LngBrokerString & 0x80000000) != 0)
       || (LngBrokeruint64_t String = hlp_OpenData(*(void *)v20, (uint64_t)__dst, (uint64_t *)(v20 + 80), (_DWORD *)(v20 + 140)),
           (LngBrokerString & 0x80000000) != 0)))
    {
      uint64_t v10 = LngBrokerString;
      goto LABEL_34;
    }
    cstdlib_strcpy((char *)(v20 + 456), __dst);
    if (*(void *)(v20 + 72))
    {
      uint64_t v30 = heap_Calloc(*(void **)(*(void *)v20 + 8), 1, 2136);
      *(void *)(v20 + 144) = v30;
      if (!v30)
      {
LABEL_31:
        uint64_t v39 = 42000;
LABEL_33:
        log_OutPublic(*(void *)(*(void *)v20 + 32), (uint64_t)"FE_DEPES", v39, 0, v26, v27, v28, v29, v41);
        goto LABEL_34;
      }
      *(void *)(v30 + 1560) = 0;
      *(_OWORD *)(v30 + 1496) = 0u;
      *(_OWORD *)(v30 + 1512) = 0u;
      *(void *)(v30 + 1528) = *(void *)(v43 + 8);
      uint64_t v31 = v42;
      *(_OWORD *)(v30 + 1536) = *(_OWORD *)(v42 + 16);
      uint64_t v32 = *(void *)(v20 + 144);
      *(void *)(v32 + 1552) = *(void *)(v31 + 8);
      *(void *)uint64_t v32 = 0;
      *(_OWORD *)(v32 + 2120) = 0u;
      if (!*v24)
      {
LABEL_29:
        uint64_t v10 = fe_depes_InitModule((char *)*a5, a5[1], "fe_depes", (_WORD *)&v41 + 3);
        if ((v10 & 0x80000000) == 0)
        {
LABEL_35:
          log_OutText(*(void *)(v43 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Leaving fe_depes_ObjOpen", v36, v37, v38, v41);
          return v10;
        }
LABEL_34:
        fe_depes_ObjClose((void *)*a5, a5[1]);
        *a5 = 0;
        *((_DWORD *)a5 + 2) = 0;
        goto LABEL_35;
      }
    }
    else if (!*v24)
    {
      uint64_t v10 = 2305826819;
      uint64_t v39 = 42002;
      goto LABEL_33;
    }
    uint64_t v33 = heap_Calloc(*(void **)(*(void *)v20 + 8), 1, 2136);
    *(void *)(v20 + 152) = v33;
    if (v33)
    {
      *(void *)(v33 + 1560) = 0;
      *(_OWORD *)(v33 + 1496) = 0u;
      *(_OWORD *)(v33 + 1512) = 0u;
      *(void *)(v33 + 1528) = *(void *)(v43 + 8);
      uint64_t v34 = v42;
      *(_OWORD *)(v33 + 1536) = *(_OWORD *)(v42 + 16);
      uint64_t v35 = *(void *)(v20 + 152);
      *(void *)(v35 + 1552) = *(void *)(v34 + 8);
      *(void *)uint64_t v35 = 0;
      *(_OWORD *)(v35 + 2120) = 0u;
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  log_OutPublic(*(void *)(v43 + 32), (uint64_t)"FE_DEPES", 42000, 0, v16, v17, v18, v19, v41);
  objc_ReleaseObject(*(void *)(v43 + 48), (uint64_t)"FE_DCTLKP");
  return v10;
}

uint64_t hlp_CreateLngBrokerString(uint64_t a1, unsigned char *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = "";
  __s2 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v10 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "depes/");
    cstdlib_strcat(__dst, __s2);
    if (!a3)
    {
      uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v7);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      cstdlib_strcat(__dst, "/");
      cstdlib_strcat(__dst, v7);
    }
    return brokeraux_ComposeBrokerString(a1, __dst, 1, 1, __s2, 0, 0, a2, 0x100uLL);
  }
  return result;
}

uint64_t hlp_OpenData(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v15 = 0;
  if ((brk_DataOpenEx(*(void *)(a1 + 24), a2, 1, (uint64_t)a3) & 0x80000000) != 0)
  {
    uint64_t v11 = 0;
LABEL_10:
    *a3 = 0;
    return v11;
  }
  uint64_t v11 = brk_DataMap(*(void *)(a1 + 24), *a3, 0, 72, (uint64_t)&v15);
  if ((v11 & 0x80000000) != 0)
  {
    brk_DataClose(*(void *)(a1 + 24), *a3);
    goto LABEL_10;
  }
  if ((v15 & 3) != 0
    || *(_DWORD *)v15 != 65279
    || LH_strnicmp(v15 + 4, (uint64_t)"SCANSOFT", 8uLL)
    || LH_strnicmp(v15 + 12, (uint64_t)"depes", 5uLL))
  {
    uint64_t v11 = 2305826841;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_DEPES", 42006, 0, v7, v8, v9, v10, v14);
  }
  else
  {
    int v13 = *(_DWORD *)(v15 + 20);
    brk_DataUnmap(*(void *)(a1 + 24), *a3, v15);
    *a4 = v13 - 72;
  }
  return v11;
}

uint64_t hlp_CreateVoiceBrokerString_0(uint64_t a1, unsigned char *a2, int a3, int a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v12 = 0;
  __s2 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = "";
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v15 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fevoice", &v12) & 0x80000000) == 0
      || (uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v12), (result & 0x80000000) == 0))
    {
      cstdlib_strcpy(__dst, "depes/");
      cstdlib_strcat(__dst, __s2);
      cstdlib_strcat(__dst, "/");
      cstdlib_strcat(__dst, v12);
      if (a3)
      {
        if (a4)
        {
LABEL_6:
          if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voicemodel", &v10) & 0x80000000) != 0)
          {
            uint64_t v9 = 0;
            uint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = v10;
          }
          return brokeraux_ComposeBrokerString(a1, __dst, 1, 1, __s2, v12, v9, a2, 0x100uLL);
        }
      }
      else
      {
        uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v11);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        cstdlib_strcat(__dst, "/");
        cstdlib_strcat(__dst, v11);
        if (a4) {
          goto LABEL_6;
        }
      }
      uint64_t v9 = 0;
      return brokeraux_ComposeBrokerString(a1, __dst, 1, 1, __s2, v12, v9, a2, 0x100uLL);
    }
  }
  return result;
}

uint64_t fe_depes_InitModule(char *a1, int a2, char *a3, _WORD *a4)
{
  uint64_t v8 = 2305826826;
  uint64_t v9 = safeh_HandleCheck((uint64_t)a1, a2, 62334, 712);
  if ((v9 & 0x80000000) == 0)
  {
    uint64_t inited = v9;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Entering fe_depes_InitModule", v10, v11, v12, v37);
    *a4 = 0;
    uint64_t v14 = *((void *)a1 + 9);
    if (v14)
    {
      long long v15 = (_DWORD *)*((void *)a1 + 18);
      if (!v15) {
        goto LABEL_18;
      }
      uint64_t inited = hlp_InitData((uint64_t)a1, *(uint64_t **)a1, a3, 1, a1 + 200, v14, *((unsigned int *)a1 + 34), v15);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_45;
      }
      uint64_t v20 = *((void *)a1 + 18);
      if (*a4)
      {
        if ((unsigned __int16)*a4 != *(__int16 *)(v20 + 24)) {
          goto LABEL_19;
        }
        unsigned int v21 = *(unsigned __int16 *)(v20 + 24);
      }
      else
      {
        unsigned int v21 = *(unsigned __int16 *)(v20 + 24);
      }
      *a4 = v21;
      *(void *)(v20 + 184) = a1 + 186;
    }
    else
    {
      unsigned int v21 = 0;
    }
    uint64_t v22 = *((void *)a1 + 10);
    if (!v22)
    {
LABEL_22:
      uint64_t v26 = heap_Calloc(*(void **)(*(void *)a1 + 8), v21, 8);
      *((void *)a1 + 20) = v26;
      uint64_t v27 = *(uint64_t **)a1;
      if (!v26)
      {
        uint64_t v25 = 42000;
LABEL_44:
        log_OutPublic(v27[4], (uint64_t)"FE_DEPES", v25, 0, v16, v17, v18, v19, v38);
        uint64_t inited = v8;
        goto LABEL_45;
      }
      uint64_t v28 = heap_Calloc((void *)v27[1], (unsigned __int16)*a4, 8);
      *((void *)a1 + 21) = v28;
      if (v28)
      {
        int v29 = (__int16)*a4;
        *((_WORD *)a1 + 92) = *a4;
        if (v29 >= 1)
        {
          uint64_t v30 = 0;
          do
          {
            *(void *)(*((void *)a1 + 20) + 8 * v30) = 0;
            *(void *)(*((void *)a1 + 20) + 8 * v30) = heap_Alloc(*(void *)(*(void *)a1 + 8), 3172);
            if (!*(void *)(*((void *)a1 + 20) + 8 * v30)) {
              goto LABEL_41;
            }
            *(void *)(*((void *)a1 + 21) + 8 * v30) = 0;
            *(void *)(*((void *)a1 + 21) + 8 * v30) = heap_Alloc(*(void *)(*(void *)a1 + 8), 12688);
            if (!*(void *)(*((void *)a1 + 21) + 8 * v30)) {
              goto LABEL_41;
            }
            if (*((void *)a1 + 9))
            {
              *(void *)(*(void *)(*((void *)a1 + 18) + 1496) + 8 * v30) = *(void *)(*((void *)a1 + 20)
                                                                                            + 8 * v30);
              *(void *)(*(void *)(*((void *)a1 + 18) + 1504) + 8 * v30) = *(void *)(*((void *)a1 + 21)
                                                                                            + 8 * v30);
            }
            if (*((void *)a1 + 10))
            {
              *(void *)(*(void *)(*((void *)a1 + 19) + 1496) + 8 * v30) = *(void *)(*((void *)a1 + 20)
                                                                                            + 8 * v30);
              *(void *)(*(void *)(*((void *)a1 + 19) + 1504) + 8 * v30) = *(void *)(*((void *)a1 + 21)
                                                                                            + 8 * v30);
            }
          }
          while (++v30 < *((__int16 *)a1 + 92));
        }
        uint64_t v35 = heap_Calloc(*(void **)(*(void *)a1 + 8), 3172, 1);
        *((void *)a1 + 22) = v35;
        if (!v35)
        {
LABEL_41:
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42000, 0, v31, v32, v33, v34, v38);
          return v8;
        }
        if (*((void *)a1 + 9)) {
          *(void *)(*((void *)a1 + 18) + 1560) = v35;
        }
        if (*((void *)a1 + 10)) {
          *(void *)(*((void *)a1 + 19) + 1560) = v35;
        }
        if ((inited & 0x80000000) == 0)
        {
LABEL_46:
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Leaving fe_depes_InitModule", v32, v33, v34, v38);
          return inited;
        }
LABEL_45:
        fe_depes_ExitModule(a1, a2);
        goto LABEL_46;
      }
      uint64_t v25 = 42000;
LABEL_43:
      uint64_t v27 = *(uint64_t **)a1;
      goto LABEL_44;
    }
    long long v23 = (_DWORD *)*((void *)a1 + 19);
    if (v23)
    {
      uint64_t inited = hlp_InitData((uint64_t)a1, *(uint64_t **)a1, a3, 0, a1 + 456, v22, *((unsigned int *)a1 + 35), v23);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_45;
      }
      uint64_t v24 = *((void *)a1 + 19);
      if (!*a4)
      {
        unsigned int v21 = *(unsigned __int16 *)(v24 + 24);
        goto LABEL_21;
      }
      if ((unsigned __int16)*a4 == *(__int16 *)(v24 + 24))
      {
        unsigned int v21 = *(unsigned __int16 *)(v24 + 24);
LABEL_21:
        *a4 = v21;
        *(void *)(v24 + 184) = a1 + 186;
        goto LABEL_22;
      }
LABEL_19:
      uint64_t v8 = 2305826841;
      uint64_t v25 = 42003;
      goto LABEL_43;
    }
LABEL_18:
    uint64_t inited = 2305826823;
    goto LABEL_45;
  }
  return 2305826824;
}

uint64_t fe_depes_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62334, 712);
  if ((result & 0x80000000) != 0) {
    return 2305826824;
  }
  if (a1)
  {
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Entering fe_depes_ObjClose", v5, v6, v7, v15);
    objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    fe_depes_ExitModule(a1, a2);
    uint64_t v11 = a1[18];
    if (v11)
    {
      heap_Free(*(void **)(*a1 + 8), v11);
      a1[18] = 0;
    }
    uint64_t v12 = a1[19];
    if (v12)
    {
      heap_Free(*(void **)(*a1 + 8), v12);
      a1[19] = 0;
    }
    uint64_t v13 = a1[9];
    if (v13)
    {
      brk_DataClose(*(void *)(*a1 + 24), v13);
      a1[9] = 0;
    }
    uint64_t v14 = a1[10];
    if (v14)
    {
      brk_DataClose(*(void *)(*a1 + 24), v14);
      a1[10] = 0;
    }
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Leaving fe_depes_ObjClose", v8, v9, v10, v16);
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_depes_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t inited = 2305826826;
  HIWORD(v31) = 0;
  cstdlib_strcpy(__dst, "");
  LngBrokeruint64_t String = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((LngBrokerString & 0x80000000) != 0) {
    return 2305826824;
  }
  if (!a1) {
    return LngBrokerString;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Entering fe_depes_ObjReopen", v6, v7, v8, v31);
  fe_depes_ExitModule((void *)a1, a2);
  uint64_t v9 = *(void *)(a1 + 144);
  if (v9)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v9);
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v10 = *(void *)(a1 + 152);
  if (v10)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v10);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v12 = (void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    brk_DataClose(*(void *)(*(void *)a1 + 24), v11);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v14 = (void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  if (v13) {
    brk_DataClose(*(void *)(*(void *)a1 + 24), v13);
  }
  *(_WORD *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 186) = 3172;
  *(void *)(a1 + 192) = 0;
  *uint64_t v12 = 0;
  *(void *)(a1 + 80) = 0;
  if ((hlp_CreateLngBrokerString(*(void *)a1, __dst, 0) & 0x80000000) != 0
    || (hlp_OpenData(*(void *)a1, (uint64_t)__dst, (uint64_t *)(a1 + 72), (_DWORD *)(a1 + 136)) & 0x80000000) != 0
    || !*v12)
  {
    LngBrokeruint64_t String = hlp_CreateLngBrokerString(*(void *)a1, __dst, 1);
    if ((LngBrokerString & 0x80000000) != 0) {
      return LngBrokerString;
    }
    LngBrokeruint64_t String = hlp_OpenData(*(void *)a1, (uint64_t)__dst, (uint64_t *)(a1 + 72), (_DWORD *)(a1 + 136));
    if ((LngBrokerString & 0x80000000) != 0) {
      return LngBrokerString;
    }
  }
  cstdlib_strcpy((char *)(a1 + 200), __dst);
  if ((hlp_CreateVoiceBrokerString_0(*(void *)a1, __dst, 0, 0) & 0x80000000) != 0
    || (hlp_OpenData(*(void *)a1, (uint64_t)__dst, (uint64_t *)(a1 + 80), (_DWORD *)(a1 + 140)) & 0x80000000) != 0
    || !*v14)
  {
    LngBrokeruint64_t String = hlp_CreateVoiceBrokerString_0(*(void *)a1, __dst, 1, 1);
    if ((LngBrokerString & 0x80000000) != 0) {
      return LngBrokerString;
    }
    if ((hlp_OpenData(*(void *)a1, (uint64_t)__dst, (uint64_t *)(a1 + 80), (_DWORD *)(a1 + 140)) & 0x80000000) != 0
      || !*v14)
    {
      LngBrokeruint64_t String = hlp_CreateVoiceBrokerString_0(*(void *)a1, __dst, 1, 0);
      if ((LngBrokerString & 0x80000000) != 0) {
        return LngBrokerString;
      }
      LngBrokeruint64_t String = hlp_OpenData(*(void *)a1, (uint64_t)__dst, (uint64_t *)(a1 + 80), (_DWORD *)(a1 + 140));
      if ((LngBrokerString & 0x80000000) != 0) {
        return LngBrokerString;
      }
    }
  }
  cstdlib_strcpy((char *)(a1 + 456), __dst);
  if (!*(void *)(a1 + 72))
  {
    if (!*v14)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42002, 0, v15, v16, v17, v18, v31);
      return 2305826819;
    }
    goto LABEL_32;
  }
  uint64_t v19 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 2136);
  *(void *)(a1 + 144) = v19;
  if (!v19) {
    goto LABEL_36;
  }
  *(void *)(v19 + 1560) = 0;
  *(_OWORD *)(v19 + 1496) = 0u;
  *(_OWORD *)(v19 + 1512) = 0u;
  *(void *)(v19 + 1528) = *(void *)(*(void *)a1 + 8);
  *(_OWORD *)(v19 + 1536) = *(_OWORD *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 144);
  *(void *)(v24 + 1552) = *(void *)(a1 + 64);
  *(void *)uint64_t v24 = 0;
  *(_OWORD *)(v24 + 2120) = 0u;
  if (*(void *)(a1 + 80))
  {
LABEL_32:
    uint64_t v26 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 2136);
    *(void *)(a1 + 152) = v26;
    if (v26)
    {
      *(void *)(v26 + 1560) = 0;
      *(_OWORD *)(v26 + 1496) = 0u;
      *(_OWORD *)(v26 + 1512) = 0u;
      *(void *)(v26 + 1528) = *(void *)(*(void *)a1 + 8);
      *(_OWORD *)(v26 + 1536) = *(_OWORD *)(a1 + 48);
      uint64_t v27 = *(void *)(a1 + 152);
      *(void *)(v27 + 1552) = *(void *)(a1 + 64);
      *(void *)uint64_t v27 = 0;
      *(_OWORD *)(v27 + 2120) = 0u;
      goto LABEL_34;
    }
LABEL_36:
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42000, 0, v20, v21, v22, v23, v31);
    return inited;
  }
LABEL_34:
  uint64_t inited = fe_depes_InitModule((char *)a1, a2, "fe_depes", (_WORD *)&v31 + 3);
  if ((inited & 0x80000000) == 0) {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Leaving fe_depes_ObjReopen", v28, v29, v30, v31);
  }
  return inited;
}

uint64_t fe_depes_ExitModule(void *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62334, 712) & 0x80000000) != 0) {
    return 2305826824;
  }
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Entering fe_depes_ExitModule", v3, v4, v5, v19);
  uint64_t v9 = a1[20];
  if (v9)
  {
    if (*((__int16 *)a1 + 92) >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(a1[20] + 8 * v10);
        if (v11)
        {
          heap_Free(*(void **)(*a1 + 8), v11);
          *(void *)(a1[20] + 8 * v10) = 0;
        }
        if (a1[9]) {
          *(void *)(*(void *)(a1[18] + 1496) + 8 * v10) = 0;
        }
        if (a1[10]) {
          *(void *)(*(void *)(a1[19] + 1496) + 8 * v10) = 0;
        }
        ++v10;
      }
      while (v10 < *((__int16 *)a1 + 92));
      uint64_t v9 = a1[20];
    }
    heap_Free(*(void **)(*a1 + 8), v9);
    a1[20] = 0;
  }
  uint64_t v12 = a1[21];
  if (v12)
  {
    if (*((__int16 *)a1 + 92) >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(void *)(a1[21] + 8 * v13);
        if (v14)
        {
          heap_Free(*(void **)(*a1 + 8), v14);
          *(void *)(a1[21] + 8 * v13) = 0;
        }
        if (a1[9]) {
          *(void *)(*(void *)(a1[18] + 1504) + 8 * v13) = 0;
        }
        if (a1[10]) {
          *(void *)(*(void *)(a1[19] + 1504) + 8 * v13) = 0;
        }
        ++v13;
      }
      while (v13 < *((__int16 *)a1 + 92));
      uint64_t v12 = a1[21];
    }
    heap_Free(*(void **)(*a1 + 8), v12);
    a1[21] = 0;
  }
  uint64_t v15 = a1[22];
  if (v15)
  {
    heap_Free(*(void **)(*a1 + 8), v15);
    a1[22] = 0;
  }
  if (a1[9])
  {
    hlp_ExitData((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], a1[18], a1[11], a1[14], a1[13]);
    uint64_t v16 = (void *)a1[18];
    if (v16) {
      void *v16 = 0;
    }
    a1[13] = 0;
    a1[14] = 0;
  }
  if (a1[10])
  {
    hlp_ExitData((_WORD *)a1[2], a1[3], (_WORD *)a1[4], a1[5], a1[19], a1[12], a1[16], a1[15]);
    uint64_t v17 = (void *)a1[19];
    if (v17) {
      *uint64_t v17 = 0;
    }
    a1[15] = 0;
    a1[16] = 0;
  }
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Leaving fe_depes_ExitModule", v6, v7, v8, v20);
  return 0;
}

uint64_t hlp_InitData(uint64_t a1, uint64_t *a2, char *a3, int a4, const char *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  unsigned int v9 = a7;
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v84 = 0;
  int v85 = 0;
  uint64_t v83 = 0;
  unsigned int __dst = 0;
  *((void *)a8 + 260) = a2;
  uint64_t v16 = brk_DataMap(a2[3], a6, 72, a7, (uint64_t)&v85);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  int v17 = LH_stricmp(v85, a3);
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  BOOL v20 = v9 != 0;
  if (v9 && v17)
  {
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    do
    {
      int v21 = cstdlib_strlen(&v85[v18]);
      v19 += v21 + ((~(_BYTE)v21 - (_BYTE)v19) & 3) + 9;
      uint64_t v18 = v19;
      int v22 = LH_stricmp(&v85[v19], a3);
      BOOL v20 = v19 < v9;
    }
    while (v19 < v9 && v22 != 0);
  }
  if (!v20)
  {
    brk_DataUnmap(a2[3], a6, (uint64_t)v85);
    return 2305826820;
  }
  int v24 = cstdlib_strlen(&v85[v18]);
  unsigned int v25 = (v19 + v24 + ((~(_BYTE)v24 - (_BYTE)v19) & 3) + 1) >> 2;
  unsigned int __dst = *(_DWORD *)&v85[4 * v25];
  unsigned int v26 = *(_DWORD *)&v85[4 * v25 + 4];
  brk_DataUnmap(a2[3], a6, (uint64_t)v85);
  uint64_t v16 = brk_DataMapRefCnt(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)a5, __dst, v26, &v84);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v27 = v84;
  uint64_t v28 = 88;
  if (!a4) {
    uint64_t v28 = 96;
  }
  *(void *)(a1 + v28) = v84;
  uint64_t v29 = *(char **)(v27 + 264);
  uint64_t v30 = 2305826825;
  int v85 = v29;
  *(void *)a8 = v29;
  if (v26 >= 4)
  {
    cstdlib_memcpy(a8 + 2, v29, 4uLL);
    int v31 = a8[2];
    if (v31 + 4 <= v26)
    {
      uint64_t v32 = v85;
      *((void *)a8 + 2) = v85 + 4;
      unsigned int v33 = (v31 + 7) & 0xFFFFFFFC;
      if (v33 + 4 <= v26)
      {
        cstdlib_memcpy(&__dst, &v32[v33], 4uLL);
        *((_WORD *)a8 + 12) = __dst;
        unsigned int v34 = (v33 + 7) & 0xFFFFFFFC;
        if (v34 + 4 <= v26)
        {
          uint64_t v35 = a8 + 7;
          cstdlib_memcpy(a8 + 7, &v85[v34], 4uLL);
          unsigned int v36 = (v34 + 7) & 0xFFFFFFFC;
          if (v36 + 4 <= v26)
          {
            cstdlib_memcpy(a8 + 8, &v85[v36], 4uLL);
            unsigned int v37 = (v36 + 7) & 0xFFFFFFFC;
            if (v37 + 4 <= v26)
            {
              cstdlib_memcpy(a8 + 9, &v85[v37], 4uLL);
              unsigned int v38 = (v37 + 7) & 0xFFFFFFFC;
              if (v38 + 4 <= v26)
              {
                cstdlib_memcpy(a8 + 10, &v85[v38], 4uLL);
                unsigned int v39 = (v38 + 7) & 0xFFFFFFFC;
                if (v39 + 4 <= v26)
                {
                  cstdlib_memcpy(&__dst, &v85[v39], 4uLL);
                  *((_WORD *)a8 + 23) = __dst;
                  unsigned int v40 = (v39 + 7) & 0xFFFFFFFC;
                  if (v40 + 4 <= v26)
                  {
                    cstdlib_memcpy(&__dst, &v85[v40], 4uLL);
                    *((_WORD *)a8 + 22) = __dst;
                    unsigned int v41 = (v40 + 7) & 0xFFFFFFFC;
                    unsigned int v42 = v41 + 4;
                    if (v41 + 4 <= v26)
                    {
                      cstdlib_memcpy(a8 + 12, &v85[v41], 4uLL);
                      uint64_t v43 = *v35;
                      int v44 = v43 + v42;
                      if (v43 + v42 <= v26)
                      {
                        *((void *)a8 + 7) = &v85[v42];
                        uint64_t v45 = heap_Alloc(a2[1], 8 * v43);
                        *((void *)a8 + 190) = v45;
                        if (!v45) {
                          goto LABEL_61;
                        }
                        int v50 = *v35;
                        if ((int)(*v35 << 16) >= 1)
                        {
                          LOWORD(v51) = 0;
                          do
                          {
                            uint64_t v51 = (__int16)v51;
                            if (v44 + 1 <= v26)
                            {
                              *(void *)(v45 + 8 * v51) = &v85[v44];
                              uint64_t v45 = *((void *)a8 + 190);
                              ++v44;
                            }
                            if (**(unsigned char **)(v45 + 8 * v51))
                            {
                              while (v85[v44++])
                                ;
                            }
                            LOWORD(v51) = v51 + 1;
                          }
                          while ((__int16)v50 > (__int16)v51);
                        }
                        unsigned int v53 = (v44 + 1) & 0xFFFFFFFE;
                        unsigned int v54 = v53 + 2 * v50;
                        if (v54 <= v26)
                        {
                          uint64_t v55 = v85;
                          *((void *)a8 + 8) = &v85[v53];
                          unsigned int v56 = v54 + 2 * v50;
                          if (v56 <= v26)
                          {
                            *((void *)a8 + 9) = &v55[v54];
                            unsigned int v57 = v56 + (a8[8] << 8);
                            if (v57 <= v26)
                            {
                              *((void *)a8 + 10) = &v55[v56];
                              int v58 = a8[9];
                              unsigned int v59 = v57 + (v58 << 8);
                              if (v59 <= v26)
                              {
                                *((void *)a8 + 11) = &v55[v57];
                                unsigned int v60 = v59 + (v58 << 8);
                                if (v60 <= v26)
                                {
                                  *((void *)a8 + 12) = &v55[v59];
                                  unsigned int v61 = v60 + 2 * (*((_WORD *)a8 + 23) & 0x7FFF);
                                  if (v61 <= v26)
                                  {
                                    *((void *)a8 + 13) = &v55[v60];
                                    int v62 = *((unsigned __int16 *)a8 + 22);
                                    unsigned int v63 = (v61 + 3) & 0xFFFFFFFC;
                                    unsigned int v64 = v63 + 4 * (v62 & 0x3FFF);
                                    if (v64 <= v26)
                                    {
                                      *((void *)a8 + 14) = &v55[v63];
                                      int v65 = v64 + v62;
                                      if (v64 + v62 <= v26)
                                      {
                                        *((void *)a8 + 15) = &v55[v64];
                                        int v66 = v65 + v62;
                                        if (v65 + v62 <= v26)
                                        {
                                          *((void *)a8 + 16) = &v55[v65];
                                          int v67 = v66 + v62;
                                          if (v66 + v62 <= v26)
                                          {
                                            *((void *)a8 + 17) = &v55[v66];
                                            int v68 = v67 + v62;
                                            if (v67 + v62 <= v26)
                                            {
                                              *((void *)a8 + 18) = &v55[v67];
                                              int v69 = v68 + v62;
                                              if (v68 + v62 <= v26)
                                              {
                                                *((void *)a8 + 19) = &v55[v68];
                                                int v70 = v69 + v62;
                                                if (v69 + v62 <= v26)
                                                {
                                                  *((void *)a8 + 20) = &v55[v69];
                                                  unsigned int v71 = v70 + v62;
                                                  if (v71 <= v26)
                                                  {
                                                    *((void *)a8 + 21) = &v55[v70];
                                                    if (a8[12] + v71 <= v26)
                                                    {
                                                      *((void *)a8 + 22) = &v55[v71];
                                                      uint64_t v72 = heap_Calloc((void *)a2[1], *((__int16 *)a8 + 12), 8);
                                                      *((void *)a8 + 187) = v72;
                                                      if (v72)
                                                      {
                                                        uint64_t v73 = heap_Calloc((void *)a2[1], *((__int16 *)a8 + 12), 8);
                                                        *((void *)a8 + 188) = v73;
                                                        if (v73)
                                                        {
                                                          uint64_t v74 = heap_Calloc((void *)a2[1], (*((__int16 *)a8 + 12) + 1), 2);
                                                          *((void *)a8 + 177) = v74;
                                                          if (v74)
                                                          {
                                                            uint64_t v75 = heap_Alloc(a2[1], 5 * (unsigned __int16)(*((_WORD *)a8 + 23) + 1));
                                                            *((void *)a8 + 189) = v75;
                                                            uint64_t v76 = a2[4];
                                                            if (v75)
                                                            {
                                                              *((_WORD *)a8 + 1044) = log_GetLogLevel(v76);
                                                              cstdlib_strcpy(__s1, a5);
                                                              cstdlib_strcat(__s1, "new_feature_feat");
                                                              uint64_t v16 = hlp_SetupNewFeatRefCnt(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)__s1, *((void *)a8 + 10), a8[8], &v83);
                                                              if ((v16 & 0x80000000) == 0)
                                                              {
                                                                uint64_t v77 = v83;
                                                                *((void *)a8 + 265) = *(void *)(v83 + 272);
                                                                uint64_t v78 = 112;
                                                                if (!a4) {
                                                                  uint64_t v78 = 128;
                                                                }
                                                                *(void *)(a1 + v78) = v77;
                                                                cstdlib_strcpy(__s1, a5);
                                                                cstdlib_strcat(__s1, "new_feature_efeat");
                                                                uint64_t v30 = hlp_SetupNewFeatRefCnt(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)__s1, *((void *)a8 + 11), a8[9], &v83);
                                                                if ((v30 & 0x80000000) == 0)
                                                                {
                                                                  uint64_t v79 = v83;
                                                                  *((void *)a8 + 266) = *(void *)(v83 + 272);
                                                                  if (a4) {
                                                                    *(void *)(a1 + 104) = v79;
                                                                  }
                                                                  else {
                                                                    *(void *)(a1 + 120) = v79;
                                                                  }
                                                                }
                                                                return v30;
                                                              }
                                                              return v16;
                                                            }
LABEL_62:
                                                            log_OutPublic(v76, (uint64_t)"FE_DEPES", 42000, 0, v46, v47, v48, v49, v81);
                                                            return 2305826826;
                                                          }
                                                        }
                                                      }
LABEL_61:
                                                      uint64_t v76 = a2[4];
                                                      goto LABEL_62;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v30;
}

uint64_t fe_depes_SetLayerUtf8(__int16 *a1, int a2, signed int a3, const void *a4, int a5)
{
  uint64_t v10 = 2305826823;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62334, 712) & 0x80000000) != 0) {
    return 2305826824;
  }
  if (!a4 || a3 >= a1[92])
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42001, 0, v11, v12, v13, v14, v16);
    return v10;
  }

  return fe_depes_SetLayerExUtf8((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t fe_depes_SetLayerExUtf8(uint64_t a1, int a2, unsigned int a3, const void *a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v9 = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((v9 & 0x80000000) != 0) {
    return 2305826824;
  }
  uint64_t v13 = v9;
  if (a4 && (int v14 = *(__int16 *)(a1 + 184), (int)a3 < v14))
  {
    if (v5 >= 0x2710) {
      size_t v5 = 10000;
    }
    else {
      size_t v5 = v5;
    }
    uint64_t v15 = (3 * v5);
    if ((int)v15 > *(__int16 *)(a1 + 186))
    {
      if (v14 > 0)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v17 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(*(void *)(a1 + 160) + 8 * v16), (3 * v5));
          if (!v17) {
            goto LABEL_40;
          }
          *(void *)(*(void *)(a1 + 160) + 8 * v16) = v17;
          if (*(void *)(a1 + 72)) {
            *(void *)(*(void *)(*(void *)(a1 + 144) + 1496) + 8 * v16) = *(void *)(*(void *)(a1 + 160)
          }
                                                                                           + 8 * v16);
          if (*(void *)(a1 + 80)) {
            *(void *)(*(void *)(*(void *)(a1 + 152) + 1496) + 8 * v16) = *(void *)(*(void *)(a1 + 160)
          }
                                                                                           + 8 * v16);
          if ((int)v15 > *(__int16 *)(a1 + 186))
          {
            uint64_t v22 = *(__int16 *)(a1 + 186);
            do
              *(unsigned char *)(*(void *)(*(void *)(a1 + 160) + 8 * v16) + v22++) = 32;
            while (v15 != v22);
          }
          uint64_t v23 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(*(void *)(a1 + 168) + 8 * v16), 4 * (3 * v5));
          if (!v23) {
            goto LABEL_40;
          }
          *(void *)(*(void *)(a1 + 168) + 8 * v16) = v23;
          if (*(void *)(a1 + 72)) {
            *(void *)(*(void *)(*(void *)(a1 + 144) + 1504) + 8 * v16) = *(void *)(*(void *)(a1 + 168)
          }
                                                                                           + 8 * v16);
          if (*(void *)(a1 + 80)) {
            *(void *)(*(void *)(*(void *)(a1 + 152) + 1504) + 8 * v16) = *(void *)(*(void *)(a1 + 168)
          }
                                                                                           + 8 * v16);
          if ((int)v15 > *(__int16 *)(a1 + 186)) {
            memset_pattern16((void *)(*(void *)(*(void *)(a1 + 168) + 8 * v16) + 4 * *(__int16 *)(a1 + 186)), &unk_2206E2660, 4 * (v15 + ~*(__int16 *)(a1 + 186)) + 4);
          }
        }
        while (++v16 < *(__int16 *)(a1 + 184));
      }
      uint64_t v24 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 176), (3 * v5));
      if (!v24)
      {
LABEL_40:
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42000, 0, v18, v19, v20, v21, v30);
        return 2305826826;
      }
      *(void *)(a1 + 176) = v24;
      if (*(void *)(a1 + 72)) {
        *(void *)(*(void *)(a1 + 144) + 1560) = v24;
      }
      if (*(void *)(a1 + 80)) {
        *(void *)(*(void *)(a1 + 152) + 1560) = v24;
      }
      if ((int)v15 > *(__int16 *)(a1 + 186))
      {
        uint64_t v25 = *(__int16 *)(a1 + 186);
        do
          *(unsigned char *)(*(void *)(a1 + 176) + v25++) = 0;
        while (v15 != v25);
      }
      *(_WORD *)(a1 + 186) = 3 * v5;
    }
    uint64_t v26 = a3;
    cstdlib_memcpy(*(void **)(*(void *)(a1 + 160) + 8 * a3), a4, v5);
    cstdlib_memset((void *)(*(void *)(*(void *)(a1 + 160) + 8 * a3) + v5), 32, *(unsigned __int16 *)(a1 + 186) - (unint64_t)v5);
    if (a3)
    {
      int v27 = *(__int16 *)(a1 + 188);
      if (v27 >= (__int16)Utf8_LengthInUtf8chars(*(void *)(*(void *)(a1 + 160) + 8 * v26), v5)) {
        return v13;
      }
    }
    else if (*(unsigned __int16 *)(a1 + 184) >= 2u)
    {
      unint64_t v28 = 1;
      do
        cstdlib_memset(*(void **)(*(void *)(a1 + 160) + 8 * v28++), 32, *(unsigned __int16 *)(a1 + 186));
      while (v28 < *(unsigned __int16 *)(a1 + 184));
    }
    *(_WORD *)(a1 + 188) = Utf8_LengthInUtf8chars(*(void *)(*(void *)(a1 + 160) + 8 * v26), v5);
  }
  else
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 5, 0, (uint64_t)"Layer %d not defined in depes grammar", v10, v11, v12, a3 + 1);
  }
  return v13;
}

uint64_t fe_depes_SetMarker(uint64_t a1, int a2, const void *a3, int a4)
{
  LODWORD(v4) = a4;
  uint64_t v7 = 2305826823;
  uint64_t v8 = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((v8 & 0x80000000) != 0) {
    return 2305826824;
  }
  if (v4 >= 0x2710) {
    size_t v4 = 10000;
  }
  else {
    size_t v4 = v4;
  }
  if (a3 && *(__int16 *)(a1 + 188) >= (__int16)v4)
  {
    uint64_t v13 = v8;
    cstdlib_memcpy(*(void **)(a1 + 176), a3, v4);
    cstdlib_memset((void *)(*(void *)(a1 + 176) + v4), 0, *(unsigned __int16 *)(a1 + 186) - (unint64_t)v4);
    return v13;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42001, 0, v9, v10, v11, v12, v15);
  }
  return v7;
}

uint64_t fe_depes_GetLayerUtf8(uint64_t a1, int a2, unsigned int a3, void *a4, _WORD *a5)
{
  uint64_t v9 = 2305826823;
  uint64_t v10 = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((v10 & 0x80000000) != 0) {
    return 2305826824;
  }
  if (a4 && (int)a3 < *(__int16 *)(a1 + 184))
  {
    uint64_t v15 = v10;
    *a5 = Utf8_LengthInBytes(*(unsigned __int8 **)(*(void *)(a1 + 160) + 8 * a3), *(__int16 *)(a1 + 188));
    *a4 = *(void *)(*(void *)(a1 + 160) + 8 * a3);
    return v15;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42001, 0, v11, v12, v13, v14, v17);
  }
  return v9;
}

uint64_t fe_depes_GetNrLayers(uint64_t a1, int a2, _WORD *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((result & 0x80000000) != 0) {
    return 2305826824;
  }
  *a3 = *(_WORD *)(a1 + 184);
  return result;
}

uint64_t fe_depes_GetMarker(uint64_t a1, int a2, void *a3, _WORD *a4)
{
  uint64_t v7 = 2305826823;
  uint64_t v8 = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((v8 & 0x80000000) != 0) {
    return 2305826824;
  }
  if (a3)
  {
    *a4 = *(_WORD *)(a1 + 188);
    *a3 = *(void *)(a1 + 176);
    return v8;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 42001, 0, v9, v10, v11, v12, v14);
  }
  return v7;
}

double hlp_ExitData(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (a5 && (InitRsrcFunction(a1, a2, &v23) & 0x80000000) == 0 && (InitRsrcFunction(a3, a4, &v22) & 0x80000000) == 0)
  {
    if (*(void *)a5) {
      brk_DataMapDeRefCnt(a1, a2, a3, a4, a6);
    }
    uint64_t v17 = *(void *)(a5 + 1496);
    if (v17)
    {
      heap_Free(*(void **)(v23 + 8), v17);
      *(void *)(a5 + 1496) = 0;
    }
    uint64_t v18 = *(void *)(a5 + 1504);
    if (v18)
    {
      heap_Free(*(void **)(v23 + 8), v18);
      *(void *)(a5 + 1504) = 0;
    }
    uint64_t v19 = *(void *)(a5 + 1416);
    if (v19)
    {
      heap_Free(*(void **)(v23 + 8), v19);
      *(void *)(a5 + 1416) = 0;
    }
    uint64_t v20 = *(void *)(a5 + 1512);
    if (v20)
    {
      heap_Free(*(void **)(v23 + 8), v20);
      *(void *)(a5 + 1512) = 0;
    }
    uint64_t v21 = *(void *)(a5 + 1520);
    if (v21)
    {
      heap_Free(*(void **)(v23 + 8), v21);
      *(void *)(a5 + 1520) = 0;
    }
    hlp_SetupNewFeatDeRefCnt(a1, a2, a3, a4, a7);
    hlp_SetupNewFeatDeRefCnt(a1, a2, a3, a4, a8);
    double result = 0.0;
    *(_OWORD *)(a5 + 2120) = 0u;
  }
  return result;
}

uint64_t fe_depes_ExistModule(void *a1, int a2, char *a3)
{
  unsigned int v15 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62334, 712) & 0x80000000) == 0)
  {
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Entering fe_depes_ExistModule for %s", v5, v6, v7, (uint64_t)a3);
    if (a1[10])
    {
      BOOL exist = hlp_ExistModule(a3, a1[19], &v15);
      if (exist || !a1[9])
      {
        if (exist)
        {
          uint64_t v12 = 1;
LABEL_12:
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Leaving fe_depes_ExistModule", v8, v9, v10, v14);
          return v12;
        }
        goto LABEL_11;
      }
    }
    else if (!a1[9])
    {
      goto LABEL_11;
    }
    if (hlp_ExistModule(a3, a1[18], &v15))
    {
      uint64_t v12 = 2;
      goto LABEL_12;
    }
LABEL_11:
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Module sequence not found", v8, v9, v10, v14);
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  return 0;
}

BOOL hlp_ExistModule(char *a1, uint64_t a2, unsigned int *a3)
{
  *a3 = 0;
  for (__int16 i = *(char **)(a2 + 16); LH_stricmp(i, a1); __int16 i = (char *)(v10 + v11))
  {
    uint64_t v7 = *a3;
    if (v7 >= *(_DWORD *)(a2 + 8)) {
      break;
    }
    int v8 = cstdlib_strlen((const char *)(*(void *)(a2 + 16) + v7));
    unsigned int v9 = *a3 + v8 + ((~(_BYTE)v8 - *a3) & 3) + 1;
    *a3 = v9;
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = v9 + *(_DWORD *)(v10 + v9) + 4;
    *a3 = v11;
  }
  return *a3 < *(_DWORD *)(a2 + 8);
}

uint64_t fe_depes_ExecModule(uint64_t a1, int a2, char *a3)
{
  uint64_t v5 = 2305826820;
  if ((safeh_HandleCheck(a1, a2, 62334, 712) & 0x80000000) != 0) {
    return 2305826824;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Entering fe_depes_ExecModule for %s", v6, v7, v8, (uint64_t)a3);
  if (*(void *)(a1 + 80)) {
    uint64_t v5 = hlp_ExecModule(a3, *(void *)(a1 + 152), (__int16 *)(a1 + 188));
  }
  if (*(void *)(a1 + 72) && (v5 & 0x1FFF) == 4) {
    uint64_t v5 = hlp_ExecModule(a3, *(void *)(a1 + 144), (__int16 *)(a1 + 188));
  }
  if ((v5 & 0x80000000) != 0)
  {
    if ((v5 & 0x1FFF) == 4)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Module sequence not found", v10, v11, v12, v15);
    }
    else
    {
      if ((v5 & 0x1FFF) == 0xA) {
        uint64_t v13 = 42000;
      }
      else {
        uint64_t v13 = 42005;
      }
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", v13, 0, v9, v10, v11, v12, v15);
    }
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_DEPES", 4, 0, (uint64_t)"Leaving fe_depes_ExecModule", v10, v11, v12, v15);
  return v5;
}

uint64_t hlp_ExecModule(char *a1, uint64_t a2, __int16 *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unsigned int v21 = 0;
  if (!hlp_ExistModule(a1, a2, &v21)) {
    return 2305826820;
  }
  unsigned int v5 = v21;
  int v6 = cstdlib_strlen((const char *)(*(void *)(a2 + 16) + v21));
  int v7 = v5 + v6 + ((~(_BYTE)v6 - (_BYTE)v5) & 3);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(unsigned int *)(v8 + (v7 + 1));
  if (v9)
  {
    unsigned int v10 = v7 + 5;
    uint64_t v11 = v22;
    uint64_t v12 = v9;
    do
    {
      *v11++ = *(unsigned char *)(v8 + v10++);
      --v12;
    }
    while (v12);
  }
  *(_WORD *)(a2 + 1430) = 0;
  *(unsigned char *)(a2 + 1428) = 0;
  uint64_t v13 = *(_WORD **)(a2 + 184);
  *(_WORD *)(a2 + 1410) = *v13;
  if ((*(__int16 *)(a2 + 24) & 0x80000000) == 0)
  {
    __int16 v14 = 0;
    uint64_t v15 = *(void *)(a2 + 1416);
    do
      *(_WORD *)(v15 + 2 * v14++) = *v13;
    while (*(__int16 *)(a2 + 24) >= v14);
  }
  cstdlib_memset(*(void **)(a2 + 1512), 0, (5 * *(__int16 *)(a2 + 46) + 5));
  *(_DWORD *)(a2 + 1480) = 1;
  if (!v9) {
    return 0;
  }
  uint64_t v16 = v9 - 1;
  uint64_t v17 = v22;
  do
  {
    uint64_t v18 = v16;
    unsigned int v19 = *v17++;
    uint64_t result = INFERENCE_MAIN(a2, v19, 1, a3);
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t v16 = v18 - 1;
  }
  while (v18);
  return result;
}

uint64_t fe_depes_SetcbInsMrk(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((result & 0x80000000) != 0) {
    return 2305826824;
  }
  if (a4 == 1) {
    *(_DWORD *)(a1 + 192) = a3;
  }
  else {
    *(_DWORD *)(a1 + 196) = a3;
  }
  return result;
}

uint64_t fe_depes_GetcbInsMrk(uint64_t a1, int a2, _DWORD *a3, int a4)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62334, 712);
  if ((result & 0x80000000) != 0) {
    return 2305826824;
  }
  uint64_t v8 = 196;
  if (a4 == 1) {
    uint64_t v8 = 192;
  }
  *a3 = *(_DWORD *)(a1 + v8);
  return result;
}

uint64_t hlp_Utf8HashCode(const char *a1, _WORD *a2)
{
  uint64_t v6 = 0;
  unsigned int v4 = cstdlib_strlen(a1);
  uint64_t result = utf8_Utf8ToUtf32((uint64_t)a1, v4, 0, (uint64_t)&v6 + 4, 1u, &v6, 0);
  if ((result & 0x80000000) == 0) {
    *a2 = BYTE4(v6) & 0x3F;
  }
  return result;
}

uint64_t hlp_SetupNewFeatDeRefCnt(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v11);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v10);
    if (a5)
    {
      if ((result & 0x80000000) == 0)
      {
        ObjcForThisAp__int16 i = getObjcForThisApi(v11, v10);
        return objc_ReleaseObject(ObjcForThisApi, a5);
      }
    }
  }
  return result;
}

uint64_t fe_depes_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2305826817;
  }
  uint64_t result = 0;
  *a2 = &IFeDepes;
  return result;
}

uint64_t hlp_SetupNewFeatRefCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  uint64_t result = InitRsrcFunction(a1, a2, &v24);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v23);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_memset(&v19, 0, 0x30uLL);
      *(void *)&long long v19 = a1;
      *((void *)&v19 + 1) = a2;
      *(void *)&long long v20 = a3;
      *((void *)&v20 + 1) = a4;
      *(void *)&long long v21 = a6;
      DWORD2(v21) = a7;
      ObjcForThisAp__int16 i = getObjcForThisApi(v24, v23);
      uint64_t result = objc_GetAddRefCountedObject(ObjcForThisApi, a5, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))hlp_SetupNewFeat_ObjcLoad, (void (*)(void, void, _OWORD *))hlp_SetupNewFeat_ObjcClose, (uint64_t)&v19, &v22);
      if ((result & 0x80000000) != 0) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(void *)(v22 + 32);
      }
      *a8 = v18;
    }
  }
  return result;
}

uint64_t hlp_SetupNewFeat_ObjcLoad(_WORD *a1, int a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t __src = 0;
  uint64_t v72 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(__dst, 0, sizeof(__dst));
  uint64_t inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)(a5 + 16), *(void *)(a5 + 24), &v72);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  cstdlib_memcpy(__dst, __src, 0x1A0uLL);
  uint64_t v9 = __src;
  long long v47 = *(_OWORD *)(v72 + 32);
  uint64_t v10 = *(void *)(a5 + 32);
  uint64_t v11 = *(unsigned int *)(a5 + 40);
  uint64_t v12 = heap_Calloc(*((void **)__src + 1), 1, 280);
  *(void *)(a4 + 32) = v12;
  if (!v12
    || (*(void *)(*(void *)(a4 + 32) + 272) = heap_Alloc(v9[1], 8 * v11),
        uint64_t v17 = *(void *)(a4 + 32),
        !*(void *)(v17 + 272)))
  {
LABEL_27:
    uint64_t v30 = 2305826826;
    log_OutPublic(v9[4], (uint64_t)"FE_DEPES", 42000, 0, v13, v14, v15, v16, v42);
    return v30;
  }
  if (v11)
  {
    unsigned int v42 = (char *)a3;
    unsigned __int16 v18 = 0;
LABEL_7:
    uint64_t v19 = heap_Alloc(v9[1], 512);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v45 = v18;
      long long v21 = (char *)(v10 + ((unint64_t)v18 << 8));
      memset(v75, 0, sizeof(v75));
      unsigned __int16 v22 = cstdlib_strlen(v21);
      uint64_t v23 = 0;
      unsigned int v24 = v22;
      uint64_t v25 = (unsigned __int16)(v22 + 65);
      while (1)
      {
        uint64_t v26 = (unsigned char *)heap_Alloc(v9[1], v25);
        *(void *)((char *)v75 + v23) = v26;
        if (!v26) {
          break;
        }
        *uint64_t v26 = 0;
        v23 += 8;
        if (v23 == 512)
        {
          uint64_t v43 = v10;
          uint64_t v44 = v11;
          unsigned __int16 v74 = 64;
          unsigned int Utf8Symbol = utf8_GetUtf8Symbol(v21, 0, v24, __s2);
          if (Utf8Symbol)
          {
            unsigned int v28 = Utf8Symbol;
            unsigned int v29 = 0;
            while (1)
            {
              uint64_t v30 = hlp_Utf8HashCode(__s2, &v74);
              if ((v30 & 0x80000000) != 0) {
                return v30;
              }
              cstdlib_strcat(*((char **)v75 + v74), __s2);
              v29 += v28;
              unsigned int v28 = utf8_GetUtf8Symbol(v21, v29, v24, __s2);
              if (!v28) {
                goto LABEL_17;
              }
            }
          }
          uint64_t v30 = 0;
LABEL_17:
          int v31 = (unsigned char *)heap_Alloc(v9[1], v25);
          uint64_t v11 = v44;
          if (v31)
          {
            uint64_t v32 = v31;
            uint64_t v33 = 0;
            int v34 = 0;
            *int v31 = 0;
            do
            {
              uint64_t v35 = &v32[(unsigned __int16)v34];
              *(void *)(v20 + v33) = v35;
              unsigned int v36 = *(const char **)((char *)v75 + v33);
              cstdlib_strcpy(v35, v36);
              int v37 = cstdlib_strlen(v36);
              v32[(unsigned __int16)(v34 + v37)] = 0;
              v34 += v37 + 1;
              v33 += 8;
            }
            while (v33 != 512);
            uint64_t v38 = 0;
            uint64_t v10 = v43;
            do
            {
              uint64_t v39 = *(void *)((char *)v75 + v38);
              if (v39)
              {
                heap_Free((void *)v9[1], v39);
                *(void *)((char *)v75 + v38) = 0;
              }
              v38 += 8;
            }
            while (v38 != 512);
            *(void *)(*(void *)(*(void *)(a4 + 32) + 272) + 8 * v45) = v20;
            unsigned __int16 v18 = v45 + 1;
            if (v44 <= (unsigned __int16)(v45 + 1))
            {
              uint64_t v17 = *(void *)(a4 + 32);
              a3 = v42;
              goto LABEL_30;
            }
            goto LABEL_7;
          }
          goto LABEL_27;
        }
      }
    }
    goto LABEL_27;
  }
  uint64_t v30 = 0;
LABEL_30:
  *(void *)(v17 + 256) = v10;
  uint64_t v41 = *(void *)(a4 + 32);
  *(_DWORD *)(v41 + 264) = v11;
  cstdlib_strcpy((char *)v41, a3);
  return v30;
}

uint64_t hlp_SetupNewFeat_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v14 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v14);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a3 + 32);
    uint64_t v6 = v14;
    uint64_t v7 = *(void *)(v5 + 272);
    if (v7)
    {
      unsigned int v8 = *(_DWORD *)(v5 + 264);
      if (v8)
      {
        for (unsigned __int16 i = 0; i < v8; ++i)
        {
          uint64_t v10 = *(void *)(v7 + 8 * i);
          if (v10)
          {
            uint64_t v11 = 0;
            while (1)
            {
              uint64_t v12 = *(void *)(v10 + v11);
              if (v12) {
                break;
              }
              v11 += 8;
              if (v11 == 512) {
                goto LABEL_11;
              }
            }
            heap_Free(*(void **)(v6 + 8), v12);
            *(void *)(v10 + v11) = 0;
LABEL_11:
            heap_Free(*(void **)(v6 + 8), v10);
          }
        }
      }
      heap_Free(*(void **)(v6 + 8), v7);
      uint64_t v6 = v14;
    }
    heap_Free(*(void **)(v6 + 8), v5);
  }
  return inited;
}

uint64_t fe_depes_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2305826823;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_depes_ClassClose()
{
  return 0;
}

unsigned __int8 **m2__fix__carray__len(unsigned __int8 **result, int *a2)
{
  if (*a2 <= 0)
  {
    uint64_t v2 = *result;
    int v3 = -1;
    do
    {
      int v4 = *v2++;
      ++v3;
    }
    while (v4);
    *a2 = v3;
  }
  return result;
}

unsigned __int8 *m2__cp__str(unsigned __int8 *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    while (1)
    {
      int v5 = *result++;
      char v4 = v5;
      if (!v5) {
        break;
      }
      *a2++ = v4;
      if (!--v3) {
        return result;
      }
    }
    *a2 = 0;
  }
  return result;
}

char *m2__cp__arr(char *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      char v4 = *result++;
      *a2++ = v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t mosyntkbsymtab_KnownGraphId(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return kbsymtab_KnownGraphId(a2, a3);
}

uint64_t mosyntkbsymtab_KnownPhonId(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return kbsymtab_KnownPhonId(a2, a3);
}

uint64_t mosyntkbsymtab_KnownAtomId(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return kbsymtab_KnownAtomId(a2, a3);
}

uint64_t mosyntkbsymtab_KnownConsId(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return kbsymtab_KnownConsId(a2, a3);
}

uint64_t mosyntkbsymtab_GraphSymString(int a1, uint64_t a2, signed int a3, char *__dst, int a5)
{
  return 0;
}

uint64_t mosyntkbsymtab_AtomSymString(uint64_t a1, uint64_t *a2, unsigned int a3, char *a4, int a5)
{
  return 0;
}

uint64_t mosyntkbsymtab_ConsToString(uint64_t a1, uint64_t *a2, unsigned int a3, char *a4, int a5)
{
  return 0;
}

uint64_t mosyntkbsymtab_PhonSymString(uint64_t a1, uint64_t *a2, unsigned int a3, char *a4, int a5)
{
  return 0;
}

uint64_t mosyntkbsymtab_WriteGraphSym(uint64_t a1, uint64_t a2, signed int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  kbsymtab_GraphSymString(a2, a3, (char *)v5, 0xC8uLL);
  return mosyntbase_WString(a1, (unsigned __int8 *)v5, 200);
}

uint64_t mosyntkbsymtab_WritePhonSym(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  kbsymtab_PhonSymString(a2, a3, (char *)v5, 200);
  return mosyntbase_WString(a1, (unsigned __int8 *)v5, 200);
}

uint64_t mosyntkbsymtab_WriteCons(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  kbsymtab_ConsSymString(a2, a3, (char *)v5, 200);
  return mosyntbase_WString(a1, (unsigned __int8 *)v5, 200);
}

uint64_t mosyntkbsymtab_ConsFeatToComprConsFeatStr(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    for (uint64_t i = 0; i != a2; ++i)
    {
      int v3 = *(unsigned __int8 *)(a1 + i);
      if ((v3 - 40) < 2 || v3 == 44)
      {
        *(unsigned char *)(a1 + i) = 58;
      }
      else if (!*(unsigned char *)(a1 + i))
      {
        goto LABEL_10;
      }
    }
    LODWORD(i) = a2;
LABEL_10:
    uint64_t v4 = (i - 2);
    if (i >= 2 && *(unsigned char *)(a1 + v4) == 40 && *(unsigned char *)(a1 + (i - 1)) == 41) {
      *(unsigned char *)(a1 + v4) = 0;
    }
  }
  return 0;
}

uint64_t mosyntkbsymtab_ComprConsFeatToConsFeatStr(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = 0;
    int v3 = 1;
    unsigned int v4 = -1;
    LODWORD(v5) = a2;
    while (1)
    {
      if (*(unsigned char *)(a1 + v2) == 58)
      {
        if (v3) {
          char v6 = 40;
        }
        else {
          char v6 = 44;
        }
        *(unsigned char *)(a1 + v2) = v6;
        unsigned int v4 = v2;
        int v3 = 0;
      }
      else if (!*(unsigned char *)(a1 + v2))
      {
        LODWORD(v5) = v2;
        if ((v4 & 0x80000000) != 0) {
          goto LABEL_16;
        }
LABEL_15:
        uint64_t v5 = v4;
        char v7 = 41;
LABEL_20:
        *(unsigned char *)(a1 + v5) = v7;
        return 0;
      }
      if (a2 == ++v2)
      {
        if ((v4 & 0x80000000) != 0) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
  }
  LODWORD(v5) = 0;
LABEL_16:
  if ((int)v5 + 2 < a2)
  {
    *(_WORD *)(a1 + v5) = 10536;
    LODWORD(v5) = v5 + 2;
  }
  if ((int)v5 < a2)
  {
    char v7 = 0;
    uint64_t v5 = (int)v5;
    goto LABEL_20;
  }
  return 0;
}

uint64_t mosyntkbsymtab_AppDecomprConsToString(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  BOOL v10 = 0;
  kbsymtab_ConsSymString(a2, a3, (char *)v11, 200);
  mosyntkbsymtab_ComprConsFeatToConsFeatStr((uint64_t)v11, 200);
  return mosyntbase_App(a4, a5, a6, (uint64_t)v11, 200, &v10);
}

uint64_t mosyntkbsymtab_AppConsFeatToString(uint64_t a1, uint64_t *a2, unsigned int a3, __int16 *a4, uint64_t a5, int a6, int *a7)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL v13 = 0;
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  kbsymtab_ConsSymString(a2, a3, (char *)v14, 200);
  uint64_t result = mosyntbase_App(a5, a6, a7, (uint64_t)v14, 200, &v13);
  if ((result & 0x80000000) == 0) {
    return AppFeatListToString(a2, a4, a5, a6, a7);
  }
  return result;
}

uint64_t AppFeatListToString(uint64_t *a1, __int16 *a2, uint64_t a3, int a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  BOOL v14 = 0;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t result = mosyntbase_CApp(a3, a4, a5, "(", 0, &v14);
  if ((result & 0x80000000) == 0)
  {
    if (*a2 < 1)
    {
      return mosyntbase_CApp(a3, a4, a5, ")", 0, &v14);
    }
    else
    {
      uint64_t v11 = 0;
      while (1)
      {
        if (v11)
        {
          uint64_t result = mosyntbase_CApp(a3, a4, a5, ",", 0, &v14);
          if ((result & 0x80000000) != 0) {
            break;
          }
        }
        uint64_t v12 = &a2[v11];
        int v13 = v12[1];
        if (v13 < 0)
        {
          kbsymtab_AtomSymString(a1, -v13, (char *)v15, 200);
        }
        else
        {
          uint64_t result = mosyntbase_CApp(a3, a4, a5, "?", 0, &v14);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = mosyntpal_IntToString(v12[1], 0, v15, 200);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        uint64_t result = mosyntbase_App(a3, a4, a5, (uint64_t)v15, 200, &v14);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (++v11 >= *a2) {
          return mosyntbase_CApp(a3, a4, a5, ")", 0, &v14);
        }
      }
    }
  }
  return result;
}

uint64_t mosyntkbsymtab_WriteFeatList(uint64_t a1, uint64_t *a2, __int16 *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  int v5 = 0;
  uint64_t result = AppFeatListToString(a2, a3, (uint64_t)v6, 200, &v5);
  if ((result & 0x80000000) == 0) {
    return mosyntbase_WString(a1, (unsigned __int8 *)v6, 200);
  }
  return result;
}

uint64_t mosyntkbsymtab_WriteConsAndFeat(uint64_t a1, uint64_t *a2, unsigned int a3, __int16 *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  kbsymtab_ConsSymString(a2, a3, (char *)v8, 200);
  uint64_t result = mosyntbase_WString(a1, (unsigned __int8 *)v8, 200);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntbase_WString(a1, " ", 0);
    if ((result & 0x80000000) == 0) {
      return mosyntkbsymtab_WriteFeatList(a1, a2, a4);
    }
  }
  return result;
}

uint64_t mosyntkbsymtab_GetConsFeatFromString(uint64_t a1, uint64_t *a2, int a3, unsigned __int8 *a4, int a5, signed int *a6, _DWORD *a7, __int16 *a8)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v26 = 0;
  memset(v25, 0, sizeof(v25));
  signed int v24 = 0;
  uint64_t result = mosyntutils_GetIdentFromString(a1, a4, a5, a6, v25, 100);
  if ((result & 0x80000000) == 0)
  {
    int v17 = kbsymtab_KnownConsId(a2, (uint64_t)v25);
    *a7 = v17;
    if (v17 < 0)
    {
      uint64_t result = mosyntbase_WString3Ln(a1, "*** error: unknown constituent symbol '", 0, (unsigned __int8 *)v25, 100, "'", 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      *a7 = 0;
    }
    uint64_t result = mosyntutils_SkipBlanksInString((uint64_t)a4, a5, a6);
    if ((result & 0x80000000) == 0)
    {
      *a8 = 0;
      uint64_t v18 = *a6;
      if ((int)v18 >= a5 || a4[v18] != 40) {
        return mosyntutils_SkipBlanksInString((uint64_t)a4, a5, a6);
      }
      uint64_t result = mosyntutils_CheckSkipCharInString(a1, a4, a5, a6, 0x28u);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = mosyntutils_SkipBlanksInString((uint64_t)a4, a5, a6);
        if ((result & 0x80000000) == 0)
        {
          uint64_t v19 = *a6;
          if ((int)v19 >= a5 || a4[v19] == 41)
          {
LABEL_12:
            uint64_t result = mosyntutils_CheckSkipCharInString(a1, a4, a5, a6, 0x29u);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            return mosyntutils_SkipBlanksInString((uint64_t)a4, a5, a6);
          }
          while (1)
          {
            uint64_t result = mosyntutils_SkipBlanksInString((uint64_t)a4, a5, a6);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (a4[*a6] != 63)
            {
              uint64_t result = mosyntutils_GetIdentFromString(a1, a4, a5, a6, v25, 100);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v21 = kbsymtab_KnownAtomId(a2, (uint64_t)v25);
              if ((v21 & 0x80000000) == 0)
              {
                int v20 = -v21;
                goto LABEL_28;
              }
              uint64_t result = mosyntbase_WString3Ln(a1, "*** error: unknown feature value '", 0, (unsigned __int8 *)v25, 100, "'", 0);
              goto LABEL_27;
            }
            if (!a3) {
              break;
            }
            uint64_t result = mosyntutils_CheckSkipCharInString(a1, a4, a5, a6, 0x3Fu);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = mosyntutils_GetCardFromString(a1, a4, a5, a6, &v24);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            LOWORD(v20) = v24;
            if (v24 >= 50)
            {
              uint64_t result = mosyntbase_WInt3Ln(a1, "*** error: illegal variable number '", 0, v24, "'", 0);
              goto LABEL_27;
            }
LABEL_28:
            uint64_t result = mosyntutils_SkipBlanksInString((uint64_t)a4, a5, a6);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v22 = *a8;
            if (v22 > 8)
            {
              uint64_t result = mosyntbase_WString3Ln(a1, "*** error: too many features in '", 0, a4, a5, "'", 0);
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
            else
            {
              a8[v22 + 1] = v20;
              ++*a8;
            }
            uint64_t v23 = *a6;
            if ((int)v23 >= a5 || a4[v23] != 44) {
              goto LABEL_12;
            }
            uint64_t result = mosyntutils_CheckSkipCharInString(a1, a4, a5, a6, 0x2Cu);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          uint64_t result = mosyntbase_WStringLn(a1, "*** error: variables are not allowed as features'", 0);
LABEL_27:
          LOWORD(v20) = 0;
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_28;
        }
      }
    }
  }
  return result;
}

uint64_t mosyntkbsymtab_DecompressCons(uint64_t a1, uint64_t *a2, unsigned int a3, _DWORD *a4, __int16 *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  kbsymtab_ConsSymString(a2, a3, (char *)v15, 200);
  signed int v14 = 0;
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  IdentFromuint64_t String = mosyntutils_GetIdentFromString(a1, (unsigned __int8 *)v15, 200, &v14, v17, 100);
  if ((IdentFromString & 0x80000000) == 0)
  {
    int v10 = kbsymtab_KnownConsId(a2, (uint64_t)v17);
    *a4 = v10;
    if (v10 < 0)
    {
      IdentFromuint64_t String = mosyntbase_WString3Ln(a1, "*** error: unknown constituent symbol '", 0, v17, 100, "'", 0);
      if ((IdentFromString & 0x80000000) != 0) {
        return IdentFromString;
      }
      *a4 = 0;
    }
    *a5 = 0;
    if (v14 <= 199 && *((unsigned char *)v15 + v14) == 58)
    {
      IdentFromuint64_t String = mosyntutils_CheckSkipCharInString(a1, (unsigned __int8 *)v15, 200, &v14, 0x3Au);
      if ((IdentFromString & 0x80000000) == 0 && v14 <= 199 && *((unsigned char *)v15 + v14))
      {
        while (1)
        {
          uint64_t v11 = mosyntutils_GetIdentFromString(a1, (unsigned __int8 *)v15, 200, &v14, v17, 100);
          if ((v11 & 0x80000000) != 0) {
            break;
          }
          IdentFromuint64_t String = mosyntutils_CheckSkipCharInString(a1, (unsigned __int8 *)v15, 200, &v14, 0x3Au);
          if ((IdentFromString & 0x80000000) != 0) {
            return IdentFromString;
          }
          if (*a5 > 8)
          {
            IdentFromuint64_t String = mosyntbase_WString3Ln(a1, "*** error: too many features in '", 0, (unsigned __int8 *)v15, 200, "'", 0);
            if ((IdentFromString & 0x80000000) != 0) {
              return IdentFromString;
            }
          }
          else
          {
            int v12 = kbsymtab_KnownAtomId(a2, (uint64_t)v17);
            if (v12 < 0)
            {
              IdentFromuint64_t String = mosyntbase_WString3Ln(a1, "*** error: unknown feature value '", 0, v17, 100, "'", 0);
              LOWORD(v12) = 0;
              if ((IdentFromString & 0x80000000) != 0) {
                return IdentFromString;
              }
            }
            a5[++*a5] = -(__int16)v12;
          }
          if (v14 >= 200 || !*((unsigned char *)v15 + v14)) {
            return IdentFromString;
          }
        }
        return v11;
      }
    }
  }
  return IdentFromString;
}

BOOL mosyntkbsymtab_PropTabAvailable(uint64_t a1)
{
  return kbsymtab_PropTabAvailable(a1);
}

uint64_t mosyntkbsymtab_IntPropValue(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  return kbsymtab_IntPropValue(a2, a3, a4);
}

BOOL mosyntkbsymtab_HasIntPropValue(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  return kbsymtab_HasIntPropValue(a2, a3, a4, a5);
}

uint64_t mosyntkbsymtab_GetFirstAccPatVal(uint64_t a1, uint64_t **a2, int a3, int a4, uint64_t a5, void *a6)
{
  return 0;
}

uint64_t mosyntkbsymtab_GetNextAccPatVal(uint64_t **a1, void *a2)
{
  return 0;
}

uint64_t mosyntkbsymtab_DisposeAccPat(void *a1, void **a2)
{
  return 0;
}

uint64_t mosyntkbsymtab_GetFeatMatchedFirstIntPropVal(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, _DWORD *a7)
{
  return 0;
}

uint64_t mosyntkbsymtab_GetFeatMatchedNextIntPropVal(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return 0;
}

uint64_t mosyntkbsymtab_GetLhPlusPhone(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int *a5, char *a6, int a7, unsigned char *a8)
{
  return 0;
}

uint64_t mosyntwordana_ParseWord(uint64_t a1, int a2, uint64_t a3, int a4, char *a5, int a6, char *a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, char a14, char a15, char a16, BOOL *a17, void *a18)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  uint64_t v115 = 0;
  memset(v126, 0, 512);
  uint64_t v25 = *(void *)(a9 + 8);
  uint64_t result = mosyntpal_ALLOCATE(a1, &v115, 0x8A8u);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v27 = 0;
  uint64_t v28 = v115;
  *(_DWORD *)uint64_t v115 = a2;
  *(void *)(v28 + 8) = a3;
  do
  {
    *(void *)(v115 + 8 * v27 + 16) = mosyntkblex_NilLexicon();
    *(unsigned char *)(v115 + v27 + 104) = 0;
    *(void *)(v115 + 8 * v27 + 120) = mosyntkblex_NilLexicon();
    *(unsigned char *)(v115 + v27++ + 208) = 0;
  }
  while (v27 != 11);
  uint64_t v29 = v115;
  *(_DWORD *)(v115 + 220) = 0;
  *(_DWORD *)(v29 + 224) = a4;
  m2__cp__arr(a5, (unsigned char *)(v29 + 232), 80);
  uint64_t v30 = v115;
  *(_DWORD *)(v115 + 312) = a6;
  m2__cp__arr(a7, (unsigned char *)(v30 + 320), 80);
  uint64_t v32 = a1;
  int v31 = (void *)v115;
  *(void *)(v115 + 400) = a8;
  v31[51] = v25;
  v31[52] = a10;
  uint64_t result = mosyntdata_StartItemList(a1, v31 + 62, v31 + 63);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v33 = v115;
  LODWORD(v120) = 0;
  if (a13 < 1)
  {
    int v35 = 0;
  }
  else
  {
    int v34 = 0;
    int v35 = 0;
    LODWORD(v116) = 0;
    LODWORD(__dst[0]) = 0;
    BYTE4(__dst[0]) = 0;
    LOBYTE(v129) = 0;
    do
    {
      if (!*(unsigned char *)(a12 + v34)) {
        break;
      }
      uint64_t result = mosyntutils_GetUTF8Char(a1, a12, a13, (int *)&v120, &v116);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if ((_BYTE)v116)
      {
        uint64_t result = mosyntbase_Copy((uint64_t)&v116, 4, (uint64_t)__dst, 5, (BOOL *)&v129);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        __int16 v36 = mosyntkbsymtab_KnownGraphId(a1, *(void *)(v33 + 8), (unsigned __int8 *)__dst);
        if (v35 < 499)
        {
          v126[v35++] = v36;
        }
        else
        {
          uint64_t result = mosyntbase_WStringLn(a1, "*** token too long; character ignored", 0);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
      int v34 = v120;
    }
    while ((int)v120 < a13);
    if (v35 > 499) {
      goto LABEL_20;
    }
  }
  v126[v35] = 0;
LABEL_20:
  uint64_t v37 = v115;
  uint64_t v38 = (void *)(v115 + 424);
  uint64_t result = mosyntpal_ALLOCATE(a1, (uint64_t *)(v115 + 424), 0x9C48u);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v118 = 0;
  int v119 = 0;
  long long v116 = 0u;
  long long v117 = 0u;
  *(void *)&__dst[0] = 0;
  *(_DWORD *)(v37 + 432) = 0;
  uint64_t result = mosyntpal_ALLOCATE(a1, (uint64_t *)__dst, 0x80u);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v39 = *(void *)&__dst[0];
  **(_WORD **)&__dst[0] = 0;
  *(_DWORD *)(v39 + 4) = 3;
  *(void *)(v39 + 8) = 0;
  for (uint64_t i = 16; i != 120; i += 8)
    *(void *)(*(void *)&__dst[0] + i) = 0;
  uint64_t v41 = 0;
  uint64_t v42 = *(void *)&__dst[0];
  *(void *)(*(void *)&__dst[0] + 120) = 0;
  **(void **)(v37 + 424) = v42;
  *(void *)(v37 + 440) = 0;
  *(_DWORD *)(v37 + 448) = 0;
  *(void *)(v37 + 456) = 0;
  *(void *)(v37 + 464) = 0;
  do
  {
    if (!v126[v41]) {
      break;
    }
    ++v41;
  }
  while (v41 != 500);
  LODWORD(v43) = *(_DWORD *)(v37 + 432);
  if ((int)v43 + (int)v41 >= 5001)
  {
    uint64_t result = mosyntbase_WriteDevelMessage(a1, "token too long; truncated", 0, "", 0, "", 0, "", 0, 0, 0, 0);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    LODWORD(v43) = *(_DWORD *)(v37 + 432);
    LODWORD(v41) = 5000 - v43;
  }
  if ((int)v41 <= 0)
  {
    uint64_t v49 = (int)v43;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = v41;
    do
    {
      **(_WORD **)(*(void *)(v37 + 424) + 8 * (int)v43) = v126[v44];
      int v46 = *(_DWORD *)(v37 + 220);
      uint64_t result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v119, 0x80u);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      long long v47 = v119;
      *int v119 = 0;
      *((_DWORD *)v47 + 1) = v46 == 1;
      *((void *)v47 + 1) = 0;
      for (uint64_t j = 8; j != 60; j += 4)
        *(void *)&v119[j] = 0;
      uint64_t v43 = *(int *)(v37 + 432) + 1;
      *(_DWORD *)(v37 + 432) = v43;
      *(void *)(*(void *)(v37 + 424) + 8 * v43) = v119;
      ++v44;
    }
    while (v44 != v45);
    uint64_t v49 = v43;
  }
  *(_DWORD *)(*(void *)(*(void *)(v37 + 424) + 8 * v49) + 4) = 3;
  *(_DWORD *)(v37 + 436) = 0;
  if ((int)v43 < 1)
  {
LABEL_157:
    DWORD2(v116) = 0;
    *(void *)&long long v117 = -1;
    DWORD2(v117) = -1;
    uint64_t v118 = 0;
    uint64_t result = mosyntdata_AddOutItem(v32, (void *)(v37 + 496), (uint64_t *)(v37 + 504), (uint64_t)&v116);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v96 = v115;
      *a17 = *(_DWORD *)(v115 + 488) > 0;
      *a18 = *(void *)(v96 + 496);
      if (a11 && *(int *)v96 >= 1)
      {
        uint64_t v97 = (void *)(v96 + 496);
        while (1)
        {
          uint64_t v97 = (void *)*v97;
          uint64_t v96 = v115;
          if (!v97) {
            break;
          }
          uint64_t result = mosyntdata_WriteReadingList(v32, *(uint64_t **)(v115 + 8), (uint64_t)(v97 + 2));
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
      __int16 v98 = *(void **)(v96 + 440);
      if (v98)
      {
        while (1)
        {
          *(void *)&__dst[0] = v98;
          __int16 v98 = (void *)*v98;
          uint64_t result = mosyntpal_DEALLOCATE(v32, (uint64_t *)__dst);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (!v98) {
            goto LABEL_167;
          }
        }
      }
      else
      {
LABEL_167:
        *(void *)(v96 + 440) = 0;
        *(_DWORD *)(v96 + 448) = 0;
        *(void *)(v96 + 456) = 0;
        if ((*(_DWORD *)(v96 + 432) & 0x80000000) != 0)
        {
LABEL_177:
          uint64_t result = mosyntpal_DEALLOCATE(v32, (uint64_t *)(v96 + 424));
          if ((result & 0x80000000) == 0)
          {
            int v102 = *(void **)(v96 + 464);
            if (v102)
            {
              while (1)
              {
                *(void *)&__dst[0] = v102;
                int v102 = (void *)*v102;
                uint64_t result = mosyntpal_DEALLOCATE(v32, (uint64_t *)__dst);
                if ((result & 0x80000000) != 0) {
                  break;
                }
                if (!v102) {
                  goto LABEL_181;
                }
              }
            }
            else
            {
LABEL_181:
              *(void *)(v96 + 464) = 0;
              return mosyntpal_DEALLOCATE(v32, &v115);
            }
          }
        }
        else
        {
          uint64_t v99 = 0;
          while (1)
          {
            uint64_t v100 = *(void *)(*(void *)(v96 + 424) + 8 * v99);
            uint64_t result = mosyntdata_SetLexEleRefCounts(v32, *(void **)(v100 + 120));
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t v101 = *(void **)(v100 + 120);
            if (v101)
            {
              *(void *)&__dst[0] = 0;
              do
              {
                uint64_t result = mosyntdata_PruneLexEleBranch(v32, v101 + 2);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                *(void *)&__dst[0] = v101;
                uint64_t v101 = (void *)*v101;
                uint64_t result = mosyntpal_DEALLOCATE(v32, (uint64_t *)__dst);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              while (v101);
            }
            *(void *)(v100 + 120) = 0;
            uint64_t result = mosyntpal_DEALLOCATE(v32, (uint64_t *)(*(void *)(v96 + 424) + 8 * v99));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            BOOL v75 = v99++ < *(int *)(v96 + 432);
            if (!v75) {
              goto LABEL_177;
            }
          }
        }
      }
    }
    return result;
  }
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  long long v52 = (uint64_t *)(v37 + 480);
  uint64_t v110 = (void *)(v37 + 496);
  uint64_t __src = (void *)(v37 + 320);
  uint64_t v109 = (uint64_t *)(v37 + 504);
  int v53 = 2;
  long long v54 = 0uLL;
  int v55 = 1;
  while (*(_DWORD *)(*(void *)(*v38 + 8 * v51) + 4) < 2u)
  {
LABEL_156:
    ++v51;
    ++v55;
    --v53;
    v50 += 8;
    if ((uint64_t)v51 >= (int)v43) {
      goto LABEL_157;
    }
  }
  int64_t v56 = (int)v43;
  if ((int)v43 <= v55) {
    LODWORD(v57) = v55;
  }
  else {
    LODWORD(v57) = v43;
  }
  unsigned int v58 = v57 - 1;
  unint64_t v59 = v51;
  while (1)
  {
    int v60 = v59 + 1;
    if ((uint64_t)(v59 + 1) >= v56) {
      break;
    }
    unsigned int v61 = *(_DWORD *)(*(void *)(*v38 + 8 + 8 * v59++) + 4);
    if (v61 >= 3)
    {
      unsigned int v58 = v60 - 1;
      LODWORD(v57) = v60;
      break;
    }
  }
  *(_DWORD *)(v37 + 2212) = v51;
  uint64_t v128 = 0;
  __dst[10] = v54;
  __dst[9] = v54;
  char __dst[8] = v54;
  char __dst[7] = v54;
  __dst[6] = v54;
  __dst[5] = v54;
  __dst[4] = v54;
  __dst[3] = v54;
  _OWORD __dst[2] = v54;
  __dst[0] = v54;
  __dst[1] = v54;
  uint64_t result = mosyntpal_ALLOCATE(a1, v52, 0x18u);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v122 = 0;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v62 = (void *)*v52;
  v62[1] = 0;
  v62[2] = 0;
  *long long v62 = 0;
  if (v51 <= v57)
  {
    unsigned int v63 = v58 + v53;
    long long v64 = (uint64_t *)(*v38 + v50);
    do
    {
      uint64_t v65 = *v64++;
      *(void *)(v65 + 120) = 0;
      --v63;
    }
    while (v63);
  }
  *(_DWORD *)(v37 + 488) = 0;
  if (!a14) {
    goto LABEL_61;
  }
  if (*(int *)v37 > 1)
  {
    uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = mosyntbase_WInt3Ln(a1, "analyzing as internal full-form starting at position ", 0, v51, "", 0);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  if (*(int *)(v37 + 224) < 1)
  {
LABEL_61:
    int v68 = *(_DWORD *)(v37 + 488);
    if (a15 && !v68)
    {
      if (*(int *)v37 > 1)
      {
        uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = mosyntbase_WInt3Ln(a1, "analyzing as morpheme sequence starting at position ", 0, v51, "", 0);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      uint64_t v69 = v50;
      uint64_t v70 = *(unsigned int *)(v37 + 312);
      if ((int)v70 < 1) {
        LODWORD(v70) = 0;
      }
      else {
        memcpy(__dst, __src, 8 * v70);
      }
      for (uint64_t k = 0; k != 11; ++k)
      {
        if (*(unsigned char *)(v37 + k + 208))
        {
          *((void *)__dst + (int)v70) = *(void *)(v37 + 8 * k + 120);
          LODWORD(v70) = v70 + 1;
        }
      }
      uint64_t result = AnalyzeInParts(a1, v37, v51, v57, __dst, v70);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v68 = *(_DWORD *)(v37 + 488);
      uint64_t v50 = v69;
    }
    uint64_t v113 = v50;
    if (a16)
    {
      long long v52 = (uint64_t *)(v37 + 480);
      if (v68) {
        goto LABEL_94;
      }
      if ((int)v57 <= (int)v51) {
        signed int v72 = v51;
      }
      else {
        signed int v72 = v57;
      }
      if (v51 > v58) {
        goto LABEL_149;
      }
      if (*(int *)v37 > 1)
      {
        uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = mosyntbase_WInt3Ln(a1, "analyzing as submorpheme sequence starting at position ", 0, v51, "", 0);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      uint64_t v73 = *(unsigned int *)(v37 + 312);
      if ((int)v73 < 1) {
        LODWORD(v73) = 0;
      }
      else {
        memcpy(__dst, __src, 8 * v73);
      }
      for (uint64_t m = 0; m != 11; ++m)
      {
        if (*(unsigned char *)(v37 + m + 208))
        {
          *((void *)__dst + (int)v73) = *(void *)(v37 + 8 * m + 120);
          LODWORD(v73) = v73 + 1;
        }
      }
      *((void *)__dst + (int)v73) = *(void *)(v37 + 400);
      uint64_t result = AnalyzeInParts(a1, v37, v51, v72, __dst, (int)v73 + 1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v68 = *(_DWORD *)(v37 + 488);
    }
    long long v52 = (uint64_t *)(v37 + 480);
LABEL_94:
    if (v68)
    {
      if (*(void *)(*(void *)(*v38 + 8 * v51) + 120))
      {
        uint64_t result = mosyntbase_WriteDevelMessage(a1, "*** error: empty reading detected; check word grammar\\n",
                   0,
                   "",
                   0,
                   "",
                   0,
                   "",
                   0,
                   0,
                   0,
                   0);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      BOOL v75 = v51 > v58;
      uint64_t v32 = a1;
      uint64_t v50 = v113;
      if (!v75)
      {
        uint64_t v57 = v57;
        unint64_t v76 = v51;
        uint64_t v104 = v57;
        __int16 v105 = v38;
        while (1)
        {
          ++v76;
          uint64_t v77 = *(void *)(*v38 + 8 * v76);
          uint64_t v78 = *(void **)(v77 + 120);
          if (v78)
          {
            unint64_t v106 = v76;
            uint64_t result = mosyntdata_SetLexEleRefCounts(v32, v78);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v79 = *(uint64_t **)(v77 + 120);
            if (v79)
            {
              int v80 = -1;
              unsigned int v81 = *(uint64_t **)(v77 + 120);
              do
              {
                if (*((_DWORD *)v81 + 3) < v80 || v80 == -1) {
                  int v80 = *((_DWORD *)v81 + 3);
                }
                unsigned int v81 = (uint64_t *)*v81;
              }
              while (v81);
              uint64_t v83 = 0;
              *(void *)&long long v129 = *(void *)(v77 + 120);
              int v84 = v80 + 20;
              do
              {
                int v85 = (uint64_t *)*v79;
                if (*((_DWORD *)v79 + 3) <= v84)
                {
                  uint64_t *v79 = v83;
                  uint64_t v83 = v129;
                }
                else
                {
                  uint64_t result = mosyntdata_PruneLexEleBranch(v32, v79 + 2);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t result = mosyntpal_DEALLOCATE(v32, (uint64_t *)&v129);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
                *(void *)&long long v129 = v85;
                uint64_t v79 = v85;
              }
              while (v85);
              *(void *)(v77 + 120) = v83;
              uint64_t v57 = v104;
              uint64_t v38 = v105;
              uint64_t v50 = v113;
              unint64_t v76 = v106;
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
            else
            {
              *(void *)(v77 + 120) = 0;
              unint64_t v76 = v106;
            }
            if (*(int *)(v37 + 220) <= 1)
            {
              DWORD2(v120) = 0;
              uint64_t v122 = *(void *)(*(void *)(*(void *)(v37 + 424) + 8 * v76) + 120);
              LODWORD(v121) = *(_DWORD *)(v37 + 2212);
              *(void *)((char *)&v121 + 4) = __PAIR64__(v76, v51);
              uint64_t result = mosyntdata_AddOutItem(v32, v110, v109, (uint64_t)&v120);
              goto LABEL_121;
            }
            uint64_t v86 = *(void *)(*(void *)(*v38 + 8 * v76) + 120);
            int v125 = 0;
            if (v86)
            {
              *(void *)&long long v123 = 0;
              *(void *)&long long v129 = 0;
              WORD4(v129) = 0;
              do
              {
                int v107 = *(_DWORD *)(v86 + 12);
                int v108 = *(_DWORD *)(v86 + 8);
                uint64_t v87 = *(uint64_t **)(v86 + 16);
                BOOL v103 = (uint64_t *)v86;
                if (v87)
                {
                  int v88 = 0;
                  uint64_t v112 = 0;
                  int v89 = 0;
                  unint64_t v90 = v76;
                  while (1)
                  {
                    uint64_t result = mosyntkblex_GetEntryPhon(a1, v87 + 1, &v129, 10);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                    if ((_BYTE)v129)
                    {
                      uint64_t result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v123, 0x38u);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      *(void *)long long v123 = 0;
                      uint64_t v91 = v123;
                      long long v92 = *(_OWORD *)(v87 + 3);
                      *(_OWORD *)(v123 + 8) = *(_OWORD *)(v87 + 1);
                      *(_OWORD *)(v91 + 24) = v92;
                      *(_WORD *)(v91 + 40) = *((_WORD *)v87 + 20);
                      v88 += *((__int16 *)v87 + 20);
                      if (v89)
                      {
                        *int v89 = v91;
                        uint64_t v91 = v123;
                      }
                      else
                      {
                        uint64_t v112 = v91;
                      }
                      unint64_t v93 = v90;
                    }
                    else
                    {
                      unint64_t v93 = (v90 - v88);
                      if (v112)
                      {
                        if (v88 >= 1)
                        {
                          uint64_t result = PutOutReadingItem(a1, v37, v108, v107, (int)v90 - v88, v90, v112, &v125);
                          if ((result & 0x80000000) != 0) {
                            return result;
                          }
                        }
                      }
                      uint64_t v91 = 0;
                      uint64_t v112 = 0;
                      int v88 = 0;
                      int v107 = 0;
                      int v108 = *((_DWORD *)v87 + 8);
                    }
                    uint64_t v87 = (uint64_t *)*v87;
                    unint64_t v90 = v93;
                    int v89 = (void *)v91;
                    if (!v87) {
                      goto LABEL_141;
                    }
                  }
                }
                uint64_t v112 = 0;
                int v88 = 0;
                LODWORD(v93) = v76;
LABEL_141:
                uint64_t result = PutOutReadingItem(a1, v37, v108, v107, (int)v93 - v88, v93, v112, &v125);
                uint64_t v38 = v105;
                uint64_t v50 = v113;
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v86 = *v103;
                unint64_t v76 = v106;
              }
              while (*v103);
              BOOL v94 = v125;
              uint64_t v32 = a1;
              uint64_t v57 = v104;
              if (!v125) {
                goto LABEL_147;
              }
              do
              {
                int v95 = v94;
                BOOL v94 = (void *)*v94;
                *int v95 = 0;
                uint64_t result = mosyntdata_AppendItem(a1, v110, (void **)v109, v95);
              }
              while ((result & 0x80000000) == 0 && v94);
LABEL_121:
              unint64_t v76 = v106;
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
          }
LABEL_147:
          long long v52 = (uint64_t *)(v37 + 480);
          if (v76 == v57) {
            goto LABEL_154;
          }
        }
      }
      goto LABEL_154;
    }
LABEL_149:
    uint64_t v32 = a1;
    uint64_t v50 = v113;
    if ((uint64_t)v51 >= *(int *)(v37 + 436) && !mosyntpal_IsAborted() && (a16 || *(int *)v37 >= 1))
    {
      uint64_t result = mosyntbase_WriteDevelMessage(a1, "*** no word analysis found starting at token position %d\\n", 0, "", 0, "", 0, "", 0, v51, 0, 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
LABEL_154:
    uint64_t result = DisposeLexEleTreeList(v32, v52);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    LODWORD(v43) = *(_DWORD *)(v37 + 432);
    long long v54 = 0uLL;
    goto LABEL_156;
  }
  uint64_t v66 = 0;
  while (1)
  {
    uint64_t v67 = *(void *)(v37 + 8 * v66 + 232);
    long long v129 = 0uLL;
    uint64_t v130 = 0;
    uint64_t result = mosyntkblex_StartLookup(v67, &v129);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    long long v123 = v129;
    uint64_t v124 = v130;
    uint64_t result = GetAndTreatEntries(a1, v37, 1, 1, v51, v51, v57, 1, 1u, &v123, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, int))GenFullFormReading);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (++v66 >= *(int *)(v37 + 224)) {
      goto LABEL_61;
    }
  }
}

uint64_t AnalyzeInParts(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4, void *a5, int a6)
{
  uint64_t v9 = a3;
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  if ((int)a3 <= a4)
  {
    int v12 = a4 - a3 + 1;
    uint64_t v13 = 8 * (int)a3;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + 424) + v13);
      *(_OWORD *)(v14 + 104) = 0uLL;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *(_OWORD *)(v14 + 72) = 0uLL;
      *(_OWORD *)(v14 + 56) = 0uLL;
      *(_OWORD *)(v14 + 40) = 0uLL;
      *(_OWORD *)(v14 + 24) = 0uLL;
      *(_OWORD *)(v14 + 8) = 0uLL;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  int v35 = 0;
  uint64_t result = mosyntdata_GetNilLexItem((uint64_t)&v36);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntkbwgram_GetNFAStartState(*(void *)(a2 + 416), &v35);
    if ((result & 0x80000000) == 0)
    {
      v34[0] = v36;
      v34[1] = v37;
      uint64_t result = InsertEntry(a1, a2, v9, v9, 1, v35, 1, 0, 0, v34);
      if ((result & 0x80000000) == 0 && (int)v9 <= a4)
      {
        uint64_t v16 = (uint64_t *)(a2 + 464);
        uint64_t v9 = (int)v9;
        int v17 = a4 + 1;
        while (1)
        {
          if (*(int *)a2 >= 2)
          {
            uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t result = mosyntbase_WInt3Ln(a1, "parsing at position ", 0, v9, "", 0);
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
          uint64_t v18 = *(void *)(*(void *)(a2 + 424) + 8 * v9);
          uint64_t v19 = *(void *)(a2 + 464);
          if (!v19)
          {
            uint64_t result = mosyntpal_ALLOCATE(a1, v16, 0x10u);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v19 = *v16;
            *(void *)uint64_t *v16 = 0;
          }
          *(void *)(a2 + 472) = v19;
          while (1)
          {
            uint64_t v18 = *(void *)(v18 + 8);
            if (!v18) {
              break;
            }
            uint64_t result = AddTwolState(a1, a2, *(__int16 *)(v18 + 36));
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          int v29 = v17;
          uint64_t v30 = v16;
          unsigned int v31 = 1;
LABEL_20:
          if (*(int *)a2 >= 3)
          {
            uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t result = mosyntbase_WInt3Ln(a1, "epsilon closure run number ", 0, v31, "", 0);
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
          *(unsigned char *)(a2 + 492) = 0;
          int v21 = *(uint64_t ***)(a2 + 464);
          int v20 = *(uint64_t ***)(a2 + 472);
          if (v21 != v20)
          {
            do
            {
              uint64_t v22 = a6;
              uint64_t v23 = a5;
              if (a6 >= 1)
              {
                while (1)
                {
                  uint64_t result = mosyntkblex_StartLookup(*v23, &v32);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t v24 = *((__int16 *)v21 + 4);
                  long long v36 = v32;
                  *(void *)&long long v37 = v33;
                  uint64_t result = GetAndTreatEntries(a1, a2, 1, 0, v9, v9, a4, v24, v24, &v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, int))TreatLexEntryList);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  ++v23;
                  if (!--v22)
                  {
                    int v20 = *(uint64_t ***)(a2 + 472);
                    break;
                  }
                }
              }
              int v21 = (uint64_t **)*v21;
            }
            while (v21 != v20);
            ++v31;
            int v21 = v20;
            if (*(unsigned char *)(a2 + 492)) {
              goto LABEL_20;
            }
          }
          if (*(int *)a2 >= 3)
          {
            uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = mosyntbase_WInt3Ln(a1, "non-empty search run in position ", 0, v9, "", 0);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v21 = *(uint64_t ***)(a2 + 472);
          }
          *(unsigned char *)(a2 + 492) = 0;
          uint64_t v25 = *(uint64_t ***)(a2 + 464);
          uint64_t v28 = a5;
          if (v25 != v21)
          {
            while (1)
            {
              uint64_t v26 = a6;
              if (a6 >= 1) {
                break;
              }
LABEL_41:
              uint64_t v25 = (uint64_t **)*v25;
              a5 = v28;
              if (v25 == v21) {
                goto LABEL_42;
              }
            }
            while (1)
            {
              uint64_t result = mosyntkblex_StartLookup(*a5, &v32);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v27 = *((__int16 *)v25 + 4);
              long long v36 = v32;
              *(void *)&long long v37 = v33;
              uint64_t result = GetAndTreatEntries(a1, a2, 0, 1, v9, v9, a4, v27, v27, &v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, int))TreatLexEntryList);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              ++a5;
              if (!--v26)
              {
                int v21 = *(uint64_t ***)(a2 + 472);
                goto LABEL_41;
              }
            }
          }
LABEL_42:
          if (!*(_DWORD *)(*(void *)(*(void *)(a2 + 424) + 8 * v9) + 4)
            || (uint64_t result = FindReadings(a1, a2, v9), (result & 0x80000000) == 0))
          {
            RemoveUnreferenced(a2, v9);
            uint64_t result = 0;
            ++v9;
            int v17 = v29;
            uint64_t v16 = v30;
            if (v29 != v9) {
              continue;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t GetAndTreatEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned int a9, long long *a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, int))
{
  v33[0] = 0;
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  BOOL v28 = 0;
  uint64_t FirstSameInSymPair = mosyntkbfst_GetFirstSameInSymPair(*(__int16 **)(a2 + 408), 0, (uint64_t)v33, &v28);
  if ((FirstSameInSymPair & 0x80000000) == 0)
  {
    char v32 = 0;
    int v31 = 0;
    while (v28)
    {
      uint64_t v19 = ApplyChar(a1, a2, a3, a4, a5, a6, v33[0], a8, a9, a10, a11, &v31, (uint64_t)&v29, &v32);
      if ((v19 & 0x80000000) != 0) {
        return v19;
      }
      if (v32)
      {
        long long v26 = v29;
        uint64_t v27 = v30;
        uint64_t v19 = GetAndTreatEntries(a1, a2, a3, a4, a5, a6, a7, a8, v31, &v26, a11);
        if ((v19 & 0x80000000) != 0) {
          return v19;
        }
      }
      uint64_t FirstSameInSymPair = mosyntkbfst_GetNextSameInSymPair(*(void *)(a2 + 408), (int *)v33, &v28);
      if ((FirstSameInSymPair & 0x80000000) != 0) {
        return FirstSameInSymPair;
      }
    }
    if (*(_DWORD *)(*(void *)(*(void *)(a2 + 424) + 8 * (int)a6) + 4))
    {
      int v20 = mosyntkbsymtab_GraphTermId(*(void *)(a2 + 8));
      for (uint64_t i = mosyntkbfst_GetFirstSameInSymPair(*(__int16 **)(a2 + 408), v20, (uint64_t)v33, &v28);
            ;
            uint64_t i = mosyntkbfst_GetNextSameInSymPair(*(void *)(a2 + 408), (int *)v33, &v28))
      {
        uint64_t FirstSameInSymPair = i;
        if ((i & 0x80000000) != 0) {
          break;
        }
        if (!v28) {
          goto LABEL_18;
        }
        if (mosyntkbfst_OutSym(*(void *)(a2 + 408), v33) == v20)
        {
          if (!v28) {
            goto LABEL_18;
          }
          uint64_t v22 = ApplyChar(a1, a2, a3, a4, a5, a6, v33[0], a8, a9, a10, a11, &v31, (uint64_t)&v29, &v32);
          uint64_t FirstSameInSymPair = v22;
          if (a4 && (v22 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          return FirstSameInSymPair;
        }
      }
    }
    else
    {
LABEL_18:
      if (a4)
      {
LABEL_19:
        if ((int)a6 < (int)a7)
        {
          uint64_t FirstSameInSymPair = mosyntkbfst_GetFirstSameInSymPair(*(__int16 **)(a2 + 408), **(_WORD **)(*(void *)(a2 + 424) + 8 * (int)a6), (uint64_t)v33, &v28);
          if ((FirstSameInSymPair & 0x80000000) == 0 && v28)
          {
            uint64_t v23 = (a6 + 1);
            while (1)
            {
              uint64_t v19 = ApplyChar(a1, a2, a3, a4, a5, v23, v33[0], a8, a9, a10, a11, &v31, (uint64_t)&v29, &v32);
              if ((v19 & 0x80000000) != 0) {
                break;
              }
              if (v32)
              {
                long long v26 = v29;
                uint64_t v27 = v30;
                uint64_t v19 = GetAndTreatEntries(a1, a2, a3, a4, a5, v23, a7, a8, v31, &v26, a11);
                if ((v19 & 0x80000000) != 0) {
                  break;
                }
              }
              uint64_t FirstSameInSymPair = mosyntkbfst_GetNextSameInSymPair(*(void *)(a2 + 408), (int *)v33, &v28);
              if ((FirstSameInSymPair & 0x80000000) != 0 || !v28) {
                return FirstSameInSymPair;
              }
            }
            return v19;
          }
        }
      }
    }
  }
  return FirstSameInSymPair;
}

uint64_t GenFullFormReading(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7, int a8, unsigned int a9)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  int v34 = 0;
  memset(v33, 0, sizeof(v33));
  if (!*(_DWORD *)(*(void *)(*(void *)(a2 + 424) + 8 * a8) + 4)) {
    return 0;
  }
  uint64_t result = IsAcceptingFSTState(a1, a2, a9);
  if (result)
  {
    char v30 = 0;
    char v25 = 0;
    int v23 = 0;
    int v24 = 0;
    uint64_t result = mosyntkblex_GetFirstEntry(a5, &v30, &v28);
    if ((result & 0x80000000) == 0)
    {
      __int16 v15 = a8 - a6;
      while (v30)
      {
        uint64_t result = mosyntkblex_GetEntryCostAndConsList(a1, &v28, &v23, v33, 500);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mosyntdata_GetFirstLexItem(a1, *(uint64_t **)(a2 + 8), &v28, (uint64_t)v33, 500, &v24, &v25, (uint64_t)&v26);
          if ((result & 0x80000000) == 0)
          {
            while (v25)
            {
              int v16 = v23;
              long long v17 = v27;
              long long v22 = v26;
              int v31 = 0;
              uint64_t v32 = 0;
              uint64_t result = mosyntpal_ALLOCATE(a1, &v32, 0x38u);
              if ((result & 0x80000000) == 0)
              {
                *(void *)uint64_t v32 = 0;
                uint64_t v18 = v32;
                *(_OWORD *)(v32 + 8) = v22;
                *(_OWORD *)(v18 + 24) = v17;
                *(_WORD *)(v18 + 40) = v15;
                *(_DWORD *)(v18 + 48) = 1;
                uint64_t result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v31, 0x18u);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t v19 = *(void *)(a2 + 424);
                  *int v31 = *(void *)(*(void *)(v19 + 8 * a8) + 120);
                  int v20 = v31;
                  *(void *)(*(void *)(v19 + 8 * a8) + 120) = v31;
                  *((_DWORD *)v20 + 2) = DWORD2(v17);
                  *((_DWORD *)v20 + 3) = v16;
                  v20[2] = v32;
                  if (*(_DWORD *)(a2 + 436) < a8) {
                    *(_DWORD *)(a2 + 436) = a8;
                  }
                  ++*(_DWORD *)(a2 + 488);
                  uint64_t result = mosyntdata_GetNextLexItem(a1, *(uint64_t **)(a2 + 8), &v28, (uint64_t)v33, 500, &v24, &v25, (uint64_t)&v26);
                  if ((result & 0x80000000) == 0) {
                    continue;
                  }
                }
              }
              return result;
            }
            uint64_t result = mosyntkblex_GetNextEntry(&v30, &v28);
            if ((result & 0x80000000) == 0) {
              continue;
            }
          }
        }
        return result;
      }
      uint64_t result = mosyntkblex_FinishEntrySearch(&v28);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v21 = *(void *)(*(void *)(a2 + 424) + 8 * a8);
        if (*(_DWORD *)(v21 + 4) <= 1u)
        {
          uint64_t result = 0;
          *(_DWORD *)(v21 + 4) = 2;
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t ApplyChar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, long long *a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, int), int *a12, uint64_t a13, unsigned char *a14)
{
  uint64_t v20 = 0;
  uint64_t v36 = a7;
  *a14 = 0;
  if (*(int *)a2 >= 3)
  {
    uint64_t v21 = mosyntknowl_WriteTraceHeader(a1, 1u);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntbase_WString(a1, "trying pair ", 0);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntkbfst_WriteGraphPair(a1, *(uint64_t **)(a2 + 8), *(void *)(a2 + 408), &v36, 2);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v20 = mosyntbase_WLn(a1);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
  }
  int v22 = mosyntkbfst_FSTTrans(*(void *)(a2 + 408), a9, &v36);
  *a12 = v22;
  if (v22 < 1) {
    return v20;
  }
  long long v23 = *a10;
  *(void *)(a13 + 16) = *((void *)a10 + 2);
  *(_OWORD *)a13 = v23;
  if (*(int *)a2 >= 3)
  {
    uint64_t v21 = mosyntknowl_WriteTraceHeader(a1, 1u);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntbase_WString(a1, "looking up ", 0);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntkbfst_WriteGraphPair(a1, *(uint64_t **)(a2 + 8), *(void *)(a2 + 408), &v36, 1);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntbase_WLn(a1);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
  }
  if (!mosyntkbfst_OutSym(*(void *)(a2 + 408), &v36))
  {
    if (*(int *)a2 >= 3)
    {
      uint64_t v21 = mosyntknowl_WriteTraceHeader(a1, 1u);
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
      uint64_t v21 = mosyntbase_WString(a1, "looking up emtpy lex char", 0);
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
      uint64_t v21 = mosyntbase_WLn(a1);
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
    }
    char v35 = 1;
LABEL_34:
    *a14 = 1;
    return a11(a1, a2, a3, a4, a13, a5, a8, a6, *a12);
  }
  unsigned int v33 = a6;
  uint64_t v24 = *(void *)(a2 + 8);
  signed int v25 = mosyntkbfst_OutSym(*(void *)(a2 + 408), &v36);
  uint64_t v21 = mosyntkbsymtab_GraphSymString(a1, v24, v25, (char *)(a2 + 512), 500);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  if (*(int *)a2 >= 3)
  {
    uint64_t v21 = mosyntknowl_WriteTraceHeader(a1, 1u);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntbase_WString(a1, "looking up ", 0);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntbase_WString(a1, (unsigned __int8 *)(a2 + 512), 500);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    uint64_t v21 = mosyntbase_WLn(a1);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
  }
  int v26 = mosyntbase_Length(a2 + 512, 500);
  char v35 = 1;
  a6 = a6;
  if (v26 < 1) {
    goto LABEL_34;
  }
  unsigned int v32 = a8;
  unint64_t v27 = v26;
  uint64_t v28 = 512;
  while (1)
  {
    uint64_t v20 = mosyntkblex_LookupChar(*(char *)(a2 + v28), a13, &v35);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
    unint64_t v29 = v28 - 511;
    ++v28;
    if (v35) {
      BOOL v30 = v29 >= v27;
    }
    else {
      BOOL v30 = 1;
    }
    if (v30)
    {
      a8 = v32;
      a6 = v33;
      if (v35) {
        goto LABEL_34;
      }
      return v20;
    }
  }
}

BOOL IsAcceptingFSTState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  BOOL v8 = 0;
  int v6 = mosyntkbsymtab_GraphTermId(*(void *)(a2 + 8));
  mosyntkbfst_GetFirstSameInSymPair(*(__int16 **)(a2 + 408), v6, (uint64_t)&v9, &v8);
  while (v8)
  {
    if (mosyntkbfst_OutSym(*(void *)(a2 + 408), &v9) == v6)
    {
      if (v8) {
        return mosyntkbfst_FSTTrans(*(void *)(a2 + 408), a3, &v9) == 1;
      }
      break;
    }
    mosyntkbfst_GetNextSameInSymPair(*(void *)(a2 + 408), (int *)&v9, &v8);
  }
  mosyntbase_WString(a1, "*** error: termination pair not found in FST alphabet", 0);
  mosyntbase_WLn(a1);
  return 0;
}

uint64_t AddTwolState(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4 = (void *)(a2 + 464);
  uint64_t v5 = *(void *)(a2 + 472);
  while (1)
  {
    unsigned int v4 = (void *)*v4;
    BOOL v8 = v4;
    if (v4 == (void *)v5) {
      break;
    }
    if (*((__int16 *)v4 + 4) == a3) {
      return 0;
    }
  }
  *(_WORD *)(v5 + 8) = a3;
  uint64_t v7 = *(void **)v5;
  if (v7)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = mosyntpal_ALLOCATE(a1, (uint64_t *)&v8, 0x10u);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    *BOOL v8 = 0;
    uint64_t v7 = v8;
    **(void **)(a2 + 472) = v8;
  }
  *(void *)(a2 + 472) = v7;
  return result;
}

uint64_t TreatLexEntryList(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, signed int a6, unsigned int a7, uint64_t a8, unsigned int a9)
{
  v37[2] = *MEMORY[0x263EF8340];
  if (a3 && a8 == a6 || (uint64_t result = 0, a4) && (int)a8 > a6)
  {
    char v32 = 0;
    uint64_t v31 = 0;
    long long v30 = 0uLL;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    v36[1] = 0;
    v37[0] = 0;
    v36[0] = 0;
    *(void *)((char *)v37 + 6) = 0;
    char v24 = 0;
    int v23 = 0;
    int v35 = 0;
    memset(v34, 0, sizeof(v34));
    uint64_t result = mosyntkblex_GetFirstEntry(a5, &v32, &v30);
    if ((result & 0x80000000) == 0)
    {
      __int16 v15 = (unsigned __int8 *)(a2 + 1012);
      int v16 = "found lex item";
      while (1)
      {
        if (!v32) {
          return mosyntkblex_FinishEntrySearch(&v30);
        }
        uint64_t result = mosyntkblex_GetEntryCostAndConsList(a1, &v30, (char *)&v25 + 4, v34, 500);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = mosyntdata_GetFirstLexItem(a1, *(uint64_t **)(a2 + 8), &v30, (uint64_t)v34, 500, &v23, &v24, (uint64_t)&v28);
        if ((result & 0x80000000) != 0) {
          return result;
        }
LABEL_10:
        if (v24 && !mosyntpal_IsAborted()) {
          break;
        }
        uint64_t result = mosyntkblex_GetNextEntry(&v32, &v30);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      if (*(int *)a2 < 2) {
        goto LABEL_53;
      }
      uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u);
      if ((result & 0x80000000) == 0)
      {
        m2__cp__str(v16, v36, 30);
        long long v21 = v28;
        long long v22 = v29;
        uint64_t result = mosyntkblex_GetEntryGraph(a1, &v21, v15, 1000);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mosyntbase_WString(a1, (unsigned __int8 *)v36, 30);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = mosyntbase_WString(a1, " ", 0);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = mosyntbase_WString(a1, v15, 1000);
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = mosyntkblex_GetEntryPhon(a1, &v21, v15, 1000);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = mosyntbase_WString(a1, " [", 0);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = mosyntbase_WString(a1, v15, 1000);
                    if ((result & 0x80000000) == 0)
                    {
                      unsigned int v33 = 0;
                      uint64_t result = mosyntkblex_GetEntryCost(a1, &v21, &v33);
                      if ((result & 0x80000000) == 0)
                      {
                        uint64_t result = mosyntbase_WString(a1, "] cons ", 0);
                        if ((result & 0x80000000) == 0)
                        {
                          uint64_t result = mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), DWORD2(v22));
                          if ((result & 0x80000000) == 0)
                          {
                            if (v33 == 1
                              || (uint64_t result = mosyntbase_WString(a1, "(cost ", 0), (result & 0x80000000) == 0)
                              && (uint64_t result = mosyntbase_WInt(a1, v33, 0), (result & 0x80000000) == 0)
                              && (uint64_t result = mosyntbase_WString(a1, ") ", 0), (result & 0x80000000) == 0))
                            {
                              uint64_t result = mosyntbase_WString(a1, " from pos ", 0);
                              if ((result & 0x80000000) == 0)
                              {
                                uint64_t result = mosyntbase_WInt(a1, a6, 0);
                                if ((result & 0x80000000) == 0)
                                {
                                  uint64_t result = mosyntbase_WString(a1, " / FST state ", 0);
                                  if ((result & 0x80000000) == 0)
                                  {
                                    uint64_t result = mosyntbase_WInt(a1, a7, 0);
                                    if ((result & 0x80000000) == 0)
                                    {
                                      uint64_t result = mosyntbase_WString(a1, " to pos ", 0);
                                      if ((result & 0x80000000) == 0)
                                      {
                                        uint64_t result = mosyntbase_WInt(a1, a8, 0);
                                        if ((result & 0x80000000) == 0)
                                        {
                                          uint64_t result = mosyntbase_WString(a1, " / FST state ", 0);
                                          if ((result & 0x80000000) == 0)
                                          {
                                            uint64_t result = mosyntbase_WInt(a1, a9, 0);
                                            if ((result & 0x80000000) == 0)
                                            {
                                              uint64_t result = mosyntbase_WLn(a1);
                                              if ((result & 0x80000000) == 0)
                                              {
LABEL_53:
                                                uint64_t result = mosyntkbwgram_GetFirstNFATrans(*(void *)(a2 + 416), DWORD2(v29), &v27, (char *)&v26 + 4, &v26, &v25);
                                                if ((result & 0x80000000) == 0)
                                                {
                                                  uint64_t v20 = v15;
                                                  long long v17 = v16;
                                                  while ((v26 & 0x8000000000000000) == 0)
                                                  {
                                                    for (uint64_t i = *(void *)(*(void *)(*(void *)(a2 + 424) + 8 * a6)
                                                                        + 8 * ((int)(HIDWORD(v26) + a7) % 13)
                                                                        + 16); i; uint64_t i = *(void *)(i + 16))
                                                    {
                                                      if (__PAIR64__(*(__int16 *)(i + 36), *(_DWORD *)(i + 32)) == __PAIR64__(a7, HIDWORD(v26)))
                                                      {
                                                        int v19 = v25 + *(_DWORD *)(i + 40) + HIDWORD(v25);
                                                        long long v21 = v28;
                                                        long long v22 = v29;
                                                        uint64_t result = InsertEntry(a1, a2, a6, a8, 0, v26, a9, v19, i, &v21);
                                                        if ((result & 0x80000000) != 0) {
                                                          return result;
                                                        }
                                                      }
                                                    }
                                                    uint64_t result = mosyntkbwgram_GetNextNFATrans(*(void *)(a2 + 416), DWORD2(v29), &v27, (char *)&v26 + 4, &v26, &v25);
                                                    if ((result & 0x80000000) != 0) {
                                                      return result;
                                                    }
                                                  }
                                                  uint64_t result = mosyntdata_GetNextLexItem(a1, *(uint64_t **)(a2 + 8), &v30, (uint64_t)v34, 500, &v23, &v24, (uint64_t)&v28);
                                                  int v16 = v17;
                                                  __int16 v15 = v20;
                                                  if ((result & 0x80000000) == 0) {
                                                    goto LABEL_10;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FindReadings(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 424) + 8 * a3) + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v25 = a3;
  while (!*(unsigned char *)(v3 + 38) || !IsAcceptingFSTState(a1, a2, *(__int16 *)(v3 + 36)))
  {
LABEL_30:
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      return 0;
    }
  }
  uint64_t v7 = 0;
  uint64_t v26 = 0;
  uint64_t v8 = v3;
  do
  {
    uint64_t v9 = v8;
    *(void *)(v8 + 88) = v7;
    uint64_t v8 = *(void *)(v8 + 48);
    uint64_t v7 = v9;
  }
  while (v8);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v27 = 0;
  long long v28 = 0;
  int v12 = *(void **)(a2 + 480);
  while (1)
  {
    uint64_t v13 = *(void *)(v9 + 48);
    if (v13)
    {
      if (*(unsigned __int16 *)(v13 + 30) != *(unsigned __int16 *)(v9 + 28))
      {
        uint64_t v11 = mosyntbase_WriteDevelMessage(a1, "***** inconsistent word analysis reading\\n", 0, "", 0, "", 0, "", 0, 0, 0, 0);
        if ((v11 & 0x80000000) != 0) {
          return v11;
        }
      }
    }
    if (mosyntdata_IsValidLexItem(v9 + 56))
    {
      for (uint64_t i = (void *)*v12; ; uint64_t i = (void *)i[1])
      {
        long long v28 = i;
        if (!i) {
          break;
        }
        uint64_t v15 = i[2];
        if (v15)
        {
          BOOL v16 = mosyntdata_IdenticalLexItems(v15 + 8, v9 + 56);
          uint64_t i = v28;
          if (v16)
          {
            if (v28)
            {
              uint64_t v10 = v28[2];
              goto LABEL_23;
            }
            break;
          }
        }
      }
      uint64_t v17 = mosyntpal_ALLOCATE(a1, &v27, 0x38u);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      *(void *)uint64_t v27 = v12[2];
      uint64_t v18 = v27;
      long long v19 = *(_OWORD *)(v9 + 72);
      *(_OWORD *)(v27 + 8) = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v18 + 24) = v19;
      *(_WORD *)(v18 + 40) = *(_WORD *)(v9 + 30) - *(_WORD *)(v9 + 28);
      uint64_t v11 = mosyntpal_ALLOCATE(a1, (uint64_t *)&v28, 0x18u);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      uint64_t v20 = v28;
      v28[1] = *v12;
      *int v12 = v20;
      *long long v28 = 0;
      uint64_t v10 = v27;
      uint64_t i = v28;
      v28[2] = v27;
    }
    else
    {
      uint64_t i = v12;
    }
LABEL_23:
    uint64_t v9 = *(void *)(v9 + 88);
    int v12 = i;
    if (!v9)
    {
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      uint64_t v17 = mosyntpal_ALLOCATE(a1, (uint64_t *)&v26, 0x18u);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      uint64_t v21 = *(void *)(a2 + 424);
      *uint64_t v26 = *(void *)(*(void *)(v21 + 8 * v25) + 120);
      long long v22 = v26;
      *(void *)(*(void *)(v21 + 8 * v25) + 120) = v26;
      *((_DWORD *)v22 + 2) = *(_DWORD *)(v3 + 32);
      *((_DWORD *)v22 + 3) = *(_DWORD *)(v3 + 40);
      _OWORD v22[2] = v10;
      if (*(_DWORD *)(a2 + 436) < a3) {
        *(_DWORD *)(a2 + 436) = a3;
      }
      ++*(_DWORD *)(a2 + 488);
      uint64_t v23 = *(void *)(v21 + 8 * v25);
      if (*(_DWORD *)(v23 + 4) <= 1u) {
        *(_DWORD *)(v23 + 4) = 2;
      }
      goto LABEL_30;
    }
  }
}

uint64_t RemoveUnreferenced(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 424);
  uint64_t v3 = *(void *)(v2 + 8 * a2);
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      do
      {
        if (*(_DWORD *)(v5 + 24)) {
          break;
        }
        uint64_t v6 = *(void *)(v5 + 48);
        if (v6) {
          --*(_DWORD *)(v6 + 24);
        }
        *(void *)(v5 + 48) = 0;
        if (*(__int16 *)(v5 + 30) < a2)
        {
          *(void *)(v5 + 8) = *(void *)(result + 456);
          *(void *)(result + 456) = v5;
        }
        uint64_t v5 = v6;
      }
      while (v6);
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
    uint64_t v3 = *(void *)(v2 + 8 * a2);
    uint64_t v7 = *(void *)(v3 + 8);
    if (v7)
    {
      do
      {
        uint64_t v8 = *(void *)(v7 + 8);
        if (!*(_DWORD *)(v7 + 24))
        {
          *(void *)(v7 + 8) = *(void *)(result + 456);
          *(void *)(result + 456) = v7;
        }
        uint64_t v7 = v8;
      }
      while (v8);
      uint64_t v3 = *(void *)(v2 + 8 * a2);
    }
  }
  *(void *)(v3 + 8) = 0;
  for (uint64_t i = 16; i != 120; i += 8)
    *(void *)(*(void *)(*(void *)(result + 424) + 8 * a2) + i) = 0;
  return result;
}

uint64_t InsertEntry(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, long long *a10)
{
  v33[4] = *MEMORY[0x263EF8340];
  memset(v33, 0, 30);
  int v16 = (a7 + a6) % 13;
  uint64_t v17 = *(void *)(a2 + 424);
  uint64_t v18 = *(void *)(*(void *)(v17 + 8 * (int)a4) + 8 * v16 + 16);
  uint64_t v32 = v18;
  if (v18)
  {
    while (*(_DWORD *)(v18 + 32) != a6 || *(__int16 *)(v18 + 36) != a7)
    {
      uint64_t v18 = *(void *)(v18 + 16);
      if (!v18)
      {
        uint64_t v32 = 0;
        goto LABEL_6;
      }
    }
    if (*(_DWORD *)(v18 + 40) <= a8)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(v18 + 40) = a8;
      uint64_t v28 = *(void *)(v18 + 48);
      if (v28) {
        --*(_DWORD *)(v28 + 24);
      }
      *(void *)(v18 + 48) = a9;
      if (a9) {
        ++*(_DWORD *)(a9 + 24);
      }
      unsigned int v29 = a3;
      *(_WORD *)(v18 + 28) = a3;
      long long v30 = *a10;
      *(_OWORD *)(v18 + 72) = a10[1];
      *(_OWORD *)(v18 + 56) = v30;
      uint64_t result = TreatEmptyTrans(a1, a2, a4, v18);
      if ((result & 0x80000000) == 0)
      {
        if (*(int *)a2 < 2
          || (uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u), (result & 0x80000000) == 0)
          && (m2__cp__str("modified edge", v33, 30),
              uint64_t result = WriteParseEntry(a1, a2, (unsigned __int8 *)v33, v18, v29, a4),
              (result & 0x80000000) == 0))
        {
          *(unsigned char *)(a2 + 492) = 1;
        }
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v19 = *(void *)(a2 + 456);
    if (v19)
    {
      uint64_t v32 = *(void *)(a2 + 456);
      *(void *)(a2 + 456) = *(void *)(v19 + 8);
    }
    else
    {
      int v31 = a5;
      unsigned int v20 = a3;
      uint64_t result = mosyntpal_ALLOCATE(a1, &v32, 0x60u);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      *(void *)uint64_t v32 = *(void *)(a2 + 440);
      uint64_t v19 = v32;
      *(void *)(a2 + 440) = v32;
      ++*(_DWORD *)(a2 + 448);
      uint64_t v17 = *(void *)(a2 + 424);
      a3 = v20;
      a5 = v31;
    }
    uint64_t v22 = *(void *)(v17 + 8 * (int)a4);
    *(void *)(v19 + 8) = *(void *)(v22 + 8);
    *(void *)(v22 + 8) = v19;
    uint64_t v23 = v22 + 8 * v16;
    *(void *)(v19 + 16) = *(void *)(v23 + 16);
    *(void *)(v23 + 16) = v19;
    uint64_t v24 = v32;
    *(_DWORD *)(v32 + 24) = 0;
    *(_WORD *)(v24 + 28) = a3;
    *(_WORD *)(v24 + 30) = a4;
    *(_DWORD *)(v24 + 32) = a6;
    *(_WORD *)(v24 + 36) = a7;
    *(unsigned char *)(v24 + 38) = 0;
    *(_DWORD *)(v24 + 40) = a8;
    *(void *)(v24 + 48) = a9;
    if (a9) {
      ++*(_DWORD *)(a9 + 24);
    }
    long long v25 = *a10;
    *(_OWORD *)(v24 + 72) = a10[1];
    *(_OWORD *)(v24 + 56) = v25;
    if (a4 != a3 || a5 || (v26 = a3, uint64_t result = AddTwolState(a1, a2, a7), a3 = v26, (result & 0x80000000) == 0))
    {
      if (*(int *)a2 < 2
        || (v27 = a3, uint64_t result = mosyntknowl_WriteTraceHeader(a1, 1u), (result & 0x80000000) == 0)
        && (m2__cp__str("inserted edge", v33, 30),
            uint64_t result = WriteParseEntry(a1, a2, (unsigned __int8 *)v33, v32, v27, a4),
            (result & 0x80000000) == 0))
      {
        *(unsigned char *)(a2 + 492) = 1;
        return TreatEmptyTrans(a1, a2, a4, v32);
      }
    }
  }
  return result;
}

uint64_t WriteParseEntry(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t result = mosyntbase_WString(a1, a3, 30);
  if ((result & 0x80000000) == 0)
  {
    if (*(void *)(a4 + 48))
    {
      uint64_t result = mosyntbase_WString(a1, " from position ", 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = mosyntbase_WInt(a1, a5, 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = mosyntbase_WString(a1, " / state ", 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), *(_DWORD *)(*(void *)(a4 + 48) + 32));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = mosyntbase_WString(a1, " / FST state ", 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = mosyntbase_WInt(a1, *(__int16 *)(*(void *)(a4 + 48) + 36), 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      uint64_t result = mosyntbase_WString(a1, " from inexistent predecessor", 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    uint64_t result = mosyntbase_WString(a1, " to position ", 0);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mosyntbase_WInt(a1, a6, 0);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = mosyntbase_WString(a1, " / state ", 0);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mosyntkbsymtab_WriteCons(a1, *(uint64_t **)(a2 + 8), *(_DWORD *)(a4 + 32));
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = mosyntbase_WString(a1, " / FST state ", 0);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = mosyntbase_WInt(a1, *(__int16 *)(a4 + 36), 0);
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = mosyntbase_WString(a1, " cost ", 0);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = mosyntbase_WInt(a1, *(_DWORD *)(a4 + 40), 0);
                  if ((result & 0x80000000) == 0)
                  {
                    return mosyntbase_WLn(a1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TreatEmptyTrans(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = 0;
  int v12 = 0;
  char v11 = 0;
  int v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t result = mosyntdata_GetNilLexItem((uint64_t)v9);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntkbwgram_GetFirstEpsTrans(*(void *)(a2 + 416), *(_DWORD *)(a4 + 32), &v13, &v12, &v11, &v10);
    if ((result & 0x80000000) == 0 && (v12 & 0x80000000) == 0)
    {
      do
      {
        if (v11) {
          *(unsigned char *)(a4 + 38) = 1;
        }
        uint64_t result = InsertEntry(a1, a2, a3, a3, 1);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = mosyntkbwgram_GetNextEpsTrans(*(void *)(a2 + 416), *(_DWORD *)(a4 + 32), (unsigned int *)&v13, &v12, &v11, &v10);
        if ((result & 0x80000000) != 0) {
          break;
        }
      }
      while ((v12 & 0x80000000) == 0);
    }
  }
  return result;
}

uint64_t PutOutReadingItem(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6, uint64_t a7, void *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t result = mosyntpal_ALLOCATE(a1, &v19, 0x18u);
  if ((result & 0x80000000) == 0)
  {
    *(void *)uint64_t v19 = 0;
    uint64_t v17 = v19;
    *(_DWORD *)(v19 + 8) = a3;
    *(_DWORD *)(v17 + 12) = a4;
    *(void *)(v17 + 16) = a7;
    uint64_t result = mosyntpal_ALLOCATE(a1, &v20, 0x28u);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v18 = v20;
      *(_DWORD *)(v20 + 8) = 0;
      *(_DWORD *)(v18 + 16) = *(_DWORD *)(a2 + 2212);
      *(_DWORD *)(v18 + 20) = a5;
      *(_DWORD *)(v18 + 24) = a6;
      *(void *)(v18 + 32) = v19;
      if ((a5 & 0x80000000) != 0)
      {
        uint64_t result = mosyntbase_WriteDevelMessage(a1, "***** erroneous reading start position %d; reading ignored\\n",
                   0,
                   "",
                   0,
                   "",
                   0,
                   "",
                   0,
                   a5,
                   0,
                   0);
        if ((result & 0x80000000) == 0) {
          return mosyntdata_DisposeItem(a1, &v20);
        }
      }
      else
      {
        *(void *)uint64_t v18 = *a8;
        *a8 = v20;
      }
    }
  }
  return result;
}

uint64_t DisposeLexEleTreeList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t result = DisposeLexEleTreeList(a1, v3);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t v6 = v3;
      uint64_t v3 = *(void *)(v3 + 8);
      uint64_t result = mosyntpal_DEALLOCATE(a1, &v6);
      if ((result & 0x80000000) != 0) {
        break;
      }
      if (!v3) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t result = 0;
LABEL_8:
    *a2 = 0;
  }
  return result;
}

uint64_t mosyntknowl_GetPhraseBoundFromString(uint64_t a1, unsigned __int8 *a2, int a3, int *a4, _DWORD *a5)
{
  *a5 = -1;
  uint64_t result = mosyntutils_SkipBlanksInString((uint64_t)a2, a3, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntutils_CheckSkipCharInString(a1, a2, a3, a4, 0x23u);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mosyntutils_CheckSkipCharInString(a1, a2, a3, a4, 0x7Bu);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = mosyntutils_GetCardFromString(a1, a2, a3, a4, a5);
        if ((result & 0x80000000) == 0)
        {
          return mosyntutils_CheckSkipCharInString(a1, a2, a3, a4, 0x7Du);
        }
      }
    }
  }
  return result;
}

uint64_t mosyntknowl_GetPhraseTypeFromString(uint64_t a1, unsigned __int8 *a2, int a3, int *a4, int *a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *a5 = 0;
  uint64_t result = mosyntutils_SkipBlanksInString((uint64_t)a2, a3, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntutils_CheckSkipCharInString(a1, a2, a3, a4, 0x28u);
    if ((result & 0x80000000) == 0)
    {
      __int16 v12 = 0;
      uint64_t v11 = 0;
      uint64_t result = mosyntutils_GetIdent1FromString(a1, a2, a3, a4, &v11, 10);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = mosyntutils_CheckSkipCharInString(a1, a2, a3, a4, 0x29u);
        if ((result & 0x80000000) == 0) {
          return mosyntkbaccphr_StringToPhraseType(a1, (unsigned __int8 *)&v11, 10, a5);
        }
      }
    }
  }
  return result;
}

uint64_t mosyntknowl_GetAccentFromString(uint64_t a1, unsigned __int8 *a2, int a3, int *a4, _DWORD *a5)
{
  *a5 = -1;
  uint64_t result = mosyntutils_SkipBlanksInString((uint64_t)a2, a3, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntutils_CheckSkipCharInString(a1, a2, a3, a4, 0x5Bu);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mosyntutils_GetCardFromString(a1, a2, a3, a4, a5);
      if ((result & 0x80000000) == 0)
      {
        return mosyntutils_CheckSkipCharInString(a1, a2, a3, a4, 0x5Du);
      }
    }
  }
  return result;
}

uint64_t mosyntknowl_GetPhoneFromString(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, int a4, int *a5, int *a6)
{
  v28[2] = *MEMORY[0x263EF8340];
  int v12 = mosyntkbsymtab_LHPlusMode(a2);
  uint64_t v13 = 0;
  *a6 = 0;
  uint64_t v14 = *a5;
  if ((int)v14 < a4)
  {
    if (!a3[v14]) {
      return 0;
    }
    int v15 = v12;
    uint64_t v13 = mosyntutils_SkipBlanksInString((uint64_t)a3, a4, a5);
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v16 = *a5;
      if ((int)v16 < a4)
      {
        unsigned int v17 = a3[v16];
        if (v17)
        {
          __int16 v25 = 0;
          memset(v28, 0, 15);
          uint64_t v26 = 0;
          __int16 v27 = 0;
          if (v17 > 0x1F)
          {
            if (v15 == 1) {
              uint64_t LhPlusPhone = mosyntkbsymtab_GetLhPlusPhone(a1, a2, (uint64_t)a3, a4, a5, (char *)v28, 15, (unsigned char *)&v25 + 1);
            }
            else {
              uint64_t LhPlusPhone = GetSVOXPAPhone(a1, (uint64_t)a3, a4, a5, v28, (char *)&v25 + 1);
            }
            uint64_t v13 = LhPlusPhone;
            if ((LhPlusPhone & 0x80000000) != 0) {
              return v13;
            }
            if (!HIBYTE(v25))
            {
              uint64_t v20 = mosyntbase_WriteDevelMessage(a1, "***** unknown phone at pos %d in '%s'\\n", 0, a3, a4, "", 0, "", 0, *a5, 0, 0);
LABEL_23:
              uint64_t v13 = v20;
              if ((v20 & 0x80000000) == 0) {
                goto LABEL_24;
              }
              return v13;
            }
            BYTE6(v28[1]) = 0;
            int v23 = mosyntkbsymtab_KnownPhonId(a1, a2, (uint64_t)v28);
            *a6 = v23;
            if (v23 > 0) {
              return v13;
            }
            return mosyntbase_WriteDevelMessage(a1, "***** unknown phone '%s'\\n", 0, (unsigned __int8 *)v28, 15, "", 0, "", 0, 0, 0, 0);
          }
          else
          {
            m2__cp__str("{c", v28, 15);
            uint64_t v18 = mosyntpal_IntToString(a3[*a5], 0, &v26, 10);
            if ((v18 & 0x80000000) == 0)
            {
              uint64_t v18 = mosyntbase_AppendTo((uint64_t)v28, 15, (uint64_t)&v26, 10, (BOOL *)&v25);
              if ((v18 & 0x80000000) == 0)
              {
                m2__cp__str("}", &v26, 10);
                uint64_t v13 = mosyntbase_AppendTo((uint64_t)v28, 15, (uint64_t)&v26, 10, (BOOL *)&v25);
                if ((v13 & 0x80000000) != 0) {
                  return v13;
                }
                BYTE6(v28[1]) = 0;
                int v19 = mosyntkbsymtab_KnownPhonId(a1, a2, (uint64_t)v28);
                *a6 = v19;
                if (v19 > 0)
                {
LABEL_24:
                  ++*a5;
                  return v13;
                }
                uint64_t v24 = a3[*a5];
                uint64_t v20 = mosyntbase_WriteDevelMessage(a1, "***** error in conversion of control character %d to symbol\\n", 0, "", 0, "", 0, "", 0, v24, HIDWORD(v24), 0);
                goto LABEL_23;
              }
            }
          }
          return v18;
        }
      }
    }
  }
  return v13;
}

uint64_t GetSVOXPAPhone(uint64_t a1, uint64_t a2, int a3, int *a4, unsigned char *a5, char *a6)
{
  _OWORD v22[2] = *MEMORY[0x263EF8340];
  memset(v22, 0, 14);
  BOOL v21 = 0;
  int v19 = 0;
  int v20 = 0;
  int v12 = *a4;
  *a5 = 0;
  *a6 = 1;
  uint64_t v13 = *a4;
  if ((int)v13 < a3 && *(unsigned char *)(a2 + v13) == 123)
  {
    uint64_t result = mosyntutils_AppChar((uint64_t)a5, 15, &v20, 123);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v15 = *a4 + 1;
    *a4 = v15;
    if ((int)v15 < a3)
    {
      unsigned int v16 = *(unsigned __int8 *)(a2 + v15);
      if (v16 >= 0x21)
      {
        while (v16 != 125)
        {
          uint64_t result = mosyntutils_GetUTF8Char(a1, a2, a3, a4, &v19);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = mosyntbase_App((uint64_t)a5, 15, &v20, (uint64_t)&v19, 4, &v21);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          LODWORD(v15) = *a4;
          if (*a4 < a3)
          {
            unsigned int v16 = *(unsigned __int8 *)(a2 + (int)v15);
            if (v16 >= 0x21) {
              continue;
            }
          }
          break;
        }
      }
    }
    if ((int)v15 >= a3 - 1 || *(unsigned char *)(a2 + (int)v15) != 125)
    {
      *a6 = 0;
LABEL_31:
      *a4 = v12;
      *a5 = 0;
      return result;
    }
    uint64_t result = mosyntutils_AppChar((uint64_t)a5, 15, &v20, 125);
    if ((result & 0x80000000) == 0)
    {
      ++*a4;
      if (!*a6) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = GetSVOXPADiacPhone(a1, a2, a3, a4, v22, a6);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t result = mosyntbase_App((uint64_t)a5, 15, &v20, (uint64_t)v22, 14, &v21);
      if ((result & 0x80000000) != 0) {
        break;
      }
      if (*a6) {
        BOOL v17 = !v21;
      }
      else {
        BOOL v17 = 1;
      }
      char v18 = !v17;
      *a6 = v18;
      if (v17) {
        goto LABEL_31;
      }
      if (*a4 >= a3) {
        return result;
      }
      if (*(unsigned char *)(a2 + *a4) != 95) {
        return result;
      }
      uint64_t result = mosyntutils_AppChar((uint64_t)a5, 15, &v20, 95);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      ++*a4;
    }
  }
  return result;
}

BOOL mosyntknowl_IsSentFinalPunct(uint64_t a1, unsigned int a2)
{
  return a2 > 8;
}

BOOL mosyntknowl_IsIntraSentPunct(uint64_t a1, int a2)
{
  return (a2 - 1) < 8;
}

uint64_t mosyntknowl_OrthPunctType(uint64_t a1, int a2)
{
  uint64_t result = 1;
  if (a2 > 57)
  {
    if ((a2 - 58) >= 2)
    {
      if (a2 == 63) {
        return 10;
      }
      return 0;
    }
  }
  else
  {
    if (a2 == 33) {
      return 11;
    }
    if (a2 != 44)
    {
      if (a2 == 46) {
        return 9;
      }
      return 0;
    }
  }
  return result;
}

uint64_t mosyntknowl_CopyFeatList(__int16 *a1, _WORD *a2)
{
  *a2 = *a1;
  if (*a1 >= 1)
  {
    uint64_t v2 = 1;
    do
      a2[v2] = a1[v2];
    while (v2++ < *a1);
  }
  return 0;
}

uint64_t mosyntknowl_NewBindingDesc(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mosyntpal_ALLOCATE(a1, a2, 0x4B4u);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *a2;
    do
    {
      *(_DWORD *)(v5 + 4 * v4) = v4;
      ++v4;
    }
    while (v4 != 150);
    *(_DWORD *)(v5 + 600) = 0;
  }
  return result;
}

uint64_t mosyntknowl_ClearBindings(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(int *)(a2 + 600) >= 1)
    {
      uint64_t v2 = 0;
      do
      {
        *(_DWORD *)(a2 + 4 * *(int *)(a2 + 604 + 4 * v2)) = *(_DWORD *)(a2 + 604 + 4 * v2);
        ++v2;
      }
      while (v2 < *(int *)(a2 + 600));
    }
    *(_DWORD *)(a2 + 600) = 0;
  }
  return 0;
}

uint64_t mosyntknowl_DisposeBindingDesc(uint64_t a1, uint64_t *a2)
{
  if (!*a2)
  {
    uint64_t result = 0;
    goto LABEL_5;
  }
  uint64_t result = mosyntpal_DEALLOCATE(a1, a2);
  if ((result & 0x80000000) == 0) {
LABEL_5:
  }
    *a2 = 0;
  return result;
}

BOOL mosyntknowl_DiffFeat(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  int v3 = *a2;
  if (v3 != *a3) {
    return 1;
  }
  if (!(_WORD)v3 || (__int16)v3 < 1) {
    return 0;
  }
  if (a2[1] != a3[1]) {
    return 1;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = v4;
    if ((__int16)v3 - 1 == v4) {
      break;
    }
    int v6 = a2[v4 + 2];
    int v7 = a3[v4++ + 2];
  }
  while (v6 == v7);
  return v5 + 1 < (unint64_t)(unsigned __int16)v3;
}

uint64_t mosyntknowl_Unif (uint64_t a1, uint64_t *a2, int a3, uint64_t a4, unsigned __int16 *a5, unsigned __int16 *a6, __int16 *a7, __int16 *a8, char *a9)
{
  char v21 = 0;
  if (a3 < 3)
  {
    Unify(a4, a5, a6, 50, &v21);
    if (v21)
    {
      uint64_t result = GenRetFeat(a1, a4, a7, a8);
      if ((result & 0x80000000) != 0) {
        return result;
      }
LABEL_17:
      if (!a4)
      {
        char v19 = 1;
LABEL_32:
        uint64_t result = 0;
        *a9 = v19;
        return result;
      }
      BOOL v17 = (_DWORD *)(a4 + 600);
      if (*(int *)(a4 + 600) >= 1)
      {
        uint64_t v18 = 0;
        do
        {
          *(_DWORD *)(a4 + 4 * *(int *)(a4 + 604 + 4 * v18)) = *(_DWORD *)(a4 + 604 + 4 * v18);
          ++v18;
        }
        while (v18 < *(int *)(a4 + 600));
      }
      char v19 = 1;
LABEL_30:
      *BOOL v17 = 0;
      goto LABEL_32;
    }
LABEL_25:
    if (!a4)
    {
      char v19 = 0;
      goto LABEL_32;
    }
    BOOL v17 = (_DWORD *)(a4 + 600);
    if (*(int *)(a4 + 600) >= 1)
    {
      uint64_t v20 = 0;
      do
      {
        *(_DWORD *)(a4 + 4 * *(int *)(a4 + 604 + 4 * v20)) = *(_DWORD *)(a4 + 604 + 4 * v20);
        ++v20;
      }
      while (v20 < *(int *)(a4 + 600));
    }
    char v19 = 0;
    goto LABEL_30;
  }
  uint64_t result = mosyntbase_WString(a1, "      unifying sc1A", 0);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, (__int16 *)a5);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mosyntbase_WString(a1, "/sc1B", 0);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, (__int16 *)a6);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mosyntbase_WLn(a1);
          if ((result & 0x80000000) == 0)
          {
            Unify(a4, a5, a6, 50, &v21);
            if (v21)
            {
              uint64_t result = GenRetFeat(a1, a4, a7, a8);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = mosyntbase_WString(a1, "      returning ", 0);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a7);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = mosyntbase_WString(a1, " as ", 0);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a8);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = mosyntbase_WLn(a1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              goto LABEL_17;
            }
            uint64_t result = mosyntbase_WString(a1, "      failed", 0);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = mosyntbase_WLn(a1);
              if ((result & 0x80000000) == 0) {
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t Unify(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3, int a4, char *a5)
{
  *a5 = 0;
  unint64_t v5 = *a2;
  if (v5 == *a3)
  {
    if ((__int16)v5 < 1)
    {
      char v7 = 1;
    }
    else
    {
      unint64_t v6 = 0;
      char v7 = 1;
      do
      {
        unsigned int v8 = (__int16)a2[v6 + 1];
        if ((v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *(_DWORD *)(result + 4 * v8);
          do
          {
            unsigned int v8 = v9;
            if ((v9 & 0x80000000) != 0) {
              break;
            }
            unsigned int v9 = *(_DWORD *)(result + 4 * v9);
          }
          while (v9 != v8);
        }
        unsigned int v10 = (__int16)a3[v6 + 1];
        if ((v10 & 0x80000000) == 0)
        {
          unsigned int v11 = *(_DWORD *)(result + 4 * (v10 + a4));
          while (1)
          {
            unsigned int v10 = v11;
            if ((v11 & 0x80000000) != 0) {
              break;
            }
            unsigned int v11 = *(_DWORD *)(result + 4 * v11);
            if (v11 == v10)
            {
              *(_DWORD *)(result + 4 * v10) = v8;
              *(_DWORD *)(result + 4 * *(int *)(result + 600) + 604) = v10;
              goto LABEL_15;
            }
          }
        }
        if ((v8 & 0x80000000) != 0)
        {
          if (v8 != v10) {
            char v7 = 0;
          }
        }
        else
        {
          *(_DWORD *)(result + 4 * v8) = v10;
          *(_DWORD *)(result + 4 * *(int *)(result + 600) + 604) = v8;
LABEL_15:
          ++*(_DWORD *)(result + 600);
        }
        ++v6;
      }
      while (v6 < v5 && v7);
    }
    *a5 = v7;
  }
  return result;
}

uint64_t GenRetFeat(uint64_t a1, uint64_t a2, __int16 *a3, _WORD *a4)
{
  *a4 = *a3;
  if (*a3 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t result = 0;
    while (1)
    {
      int v10 = a3[v8 + 1];
      if (v10 < 0)
      {
LABEL_7:
        if (v10 >= 50)
        {
          uint64_t result = mosyntbase_WStringLn(a1, "***** internal error: returned variable exceeds scope", 0);
          LOWORD(v10) = 0;
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
      else
      {
        unsigned int v11 = *(_DWORD *)(a2 + 4 * v10);
        while (1)
        {
          int v10 = v11;
          if ((v11 & 0x80000000) != 0) {
            break;
          }
          unsigned int v11 = *(_DWORD *)(a2 + 4 * v11);
          if (v11 == v10) {
            goto LABEL_7;
          }
        }
      }
      a4[++v8] = v10;
      if (v8 >= *a3) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t mosyntknowl_Unif2(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, __int16 *a5, __int16 *a6, __int16 *a7, __int16 *a8, __int16 *a9, __int16 *a10, char *a11)
{
  char v24 = 0;
  if (a3 < 3) {
    goto LABEL_11;
  }
  uint64_t result = mosyntbase_WString(a1, "      unifying sc1A", 0);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a5);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mosyntbase_WString(a1, "/sc1B", 0);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a6);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mosyntbase_WString(a1, " and sc2A", 0);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a7);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = mosyntbase_WString(a1, "/sc2B", 0);
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a8);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = mosyntbase_WLn(a1);
                  if ((result & 0x80000000) == 0)
                  {
LABEL_11:
                    char v25 = 0;
                    Unify(a4, (unsigned __int16 *)a5, (unsigned __int16 *)a6, 50, &v25);
                    if (v25 && (Unify(a4, (unsigned __int16 *)a7, (unsigned __int16 *)a8, 100, &v24), v24))
                    {
                      uint64_t result = GenRetFeat(a1, a4, a9, a10);
                      if ((result & 0x80000000) == 0)
                      {
                        if (a3 < 3
                          || (uint64_t result = mosyntbase_WString(a1, "      returning ", 0), (result & 0x80000000) == 0)
                          && (uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a9), (result & 0x80000000) == 0)
                          && (uint64_t result = mosyntbase_WString(a1, " as ", 0), (result & 0x80000000) == 0)
                          && (uint64_t result = mosyntkbsymtab_WriteFeatList(a1, a2, a10), (result & 0x80000000) == 0)
                          && (uint64_t result = mosyntbase_WLn(a1), (result & 0x80000000) == 0))
                        {
                          if (!a4)
                          {
                            char v22 = 1;
                            goto LABEL_36;
                          }
                          uint64_t v20 = (_DWORD *)(a4 + 600);
                          if (*(int *)(a4 + 600) >= 1)
                          {
                            uint64_t v21 = 0;
                            do
                            {
                              *(_DWORD *)(a4 + 4 * *(int *)(a4 + 604 + 4 * v21)) = *(_DWORD *)(a4 + 604 + 4 * v21);
                              ++v21;
                            }
                            while (v21 < *(int *)(a4 + 600));
                          }
                          char v22 = 1;
                          goto LABEL_33;
                        }
                      }
                    }
                    else if (a3 < 3 {
                           || (uint64_t result = mosyntbase_WString(a1, "      failed", 0), (result & 0x80000000) == 0)
                    }
                           && (uint64_t result = mosyntbase_WLn(a1), (result & 0x80000000) == 0))
                    {
                      if (!a4)
                      {
                        char v22 = 0;
                        goto LABEL_36;
                      }
                      uint64_t v20 = (_DWORD *)(a4 + 600);
                      if (*(int *)(a4 + 600) >= 1)
                      {
                        uint64_t v23 = 0;
                        do
                        {
                          *(_DWORD *)(a4 + 4 * *(int *)(a4 + 604 + 4 * v23)) = *(_DWORD *)(a4 + 604 + 4 * v23);
                          ++v23;
                        }
                        while (v23 < *(int *)(a4 + 600));
                      }
                      char v22 = 0;
LABEL_33:
                      *uint64_t v20 = 0;
LABEL_36:
                      uint64_t result = 0;
                      *a11 = v22;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosyntknowl_CheckUnifiable(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, char *a4)
{
  uint64_t v11 = 0;
  *a4 = 0;
  uint64_t result = mosyntpal_ALLOCATE(a1, &v11, 0x4B4u);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v11;
    do
    {
      *(_DWORD *)(v10 + 4 * v9) = v9;
      ++v9;
    }
    while (v9 != 150);
    *(_DWORD *)(v10 + 600) = 0;
    if (v11)
    {
      Unify(v11, a2, a3, 50, a4);
      if (v11) {
        return mosyntpal_DEALLOCATE(a1, &v11);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t mosyntknowl_WriteTraceHeader(uint64_t a1, unsigned int a2)
{
  if (a2 > 7) {
    return 0;
  }
  else {
    return mosyntbase_WString(a1, (unsigned __int8 *)off_264560850[a2], 0);
  }
}

uint64_t GetSVOXPADiacPhone(uint64_t a1, uint64_t a2, int a3, int *a4, unsigned char *a5, char *a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  BOOL v19 = 0;
  *(void *)&void v22[3] = 0;
  *(void *)((char *)v22 + 1) = 0;
  *a5 = 0;
  int v18 = 0;
  uint64_t v12 = *a4;
  int v13 = *(unsigned __int8 *)(a2 + v12);
  if ((int)v12 < a3 && v13 == 94 || v13 == 126 || v13 == 61)
  {
    uint64_t result = mosyntutils_AppChar((uint64_t)a5, 14, &v18, v13);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v15 = *a4 + 1;
    *a4 = v15;
    int v13 = *(unsigned __int8 *)(a2 + v15);
  }
  LOBYTE(v22[0]) = 0;
  if (!v13) {
    goto LABEL_15;
  }
  uint64_t v21 = 0;
  BOOL v20 = 0;
  uint64_t result = mosyntutils_GetUTF8Char(a1, a2, a3, a4, (unsigned char *)&v21 + 4);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = mosyntbase_App((uint64_t)v22, 14, (int *)&v21, (uint64_t)&v21 + 4, 4, &v20);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (LOBYTE(v22[0]) < 0x21u
    || LOBYTE(v22[0]) - 58 <= 0x25 && ((1 << (LOBYTE(v22[0]) - 58)) & 0x3000000009) != 0
    || (char v16 = 1, LOBYTE(v22[0]) - 123 <= 3) && LOBYTE(v22[0]) != 124)
  {
LABEL_15:
    char v16 = 0;
    v22[0] = 33;
  }
  *a6 = v16;
  uint64_t result = mosyntbase_App((uint64_t)a5, 14, &v18, (uint64_t)v22, 14, &v19);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v17 = *a4;
    if ((int)v17 < a3 && *(unsigned char *)(a2 + v17) == 58)
    {
      uint64_t result = mosyntutils_AppChar((uint64_t)a5, 14, &v18, 58);
      if ((result & 0x80000000) == 0) {
        ++*a4;
      }
    }
  }
  return result;
}

uint64_t auxkbcommondef_RecallString(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, int a5)
{
  signed int v9 = a3;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((a3 & 0x80000000) == 0 && *(_DWORD *)(a2 + 8) > a3
    || (uint64_t result = mosyntbase_WString(a1, "*** error in dynamic array reading position: start ", 0),
        (result & 0x80000000) == 0)
    && (uint64_t result = mosyntbase_WInt(a1, v9, 0), (result & 0x80000000) == 0)
    && (uint64_t result = mosyntbase_WString(a1, ", length ", 0), (result & 0x80000000) == 0)
    && (uint64_t result = mosyntbase_WInt(a1, 1u, 0), (result & 0x80000000) == 0)
    && (uint64_t result = mosyntbase_WString(a1, ", actual data length: ", 0), (result & 0x80000000) == 0)
    && (uint64_t result = mosyntbase_WInt(a1, *(_DWORD *)(a2 + 8), 0), (result & 0x80000000) == 0)
    && (uint64_t result = mosyntbase_WLn(a1), (result & 0x80000000) == 0))
  {
    uint64_t v12 = 0;
    int v26 = 0;
    uint64_t v25 = 0;
    int v13 = v9 / 512;
    do
    {
      *(_DWORD *)((char *)&v25 + v12) = v13 - (v5 & 0xFFFFFFC0);
      v12 += 4;
      v13 /= 64;
    }
    while (v12 != 12);
    int v14 = v9 % 512;
    uint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 16) + 8 * v26 + 8) + 8 * SHIDWORD(v25) + 8)
                    + 8 * (int)v25
                    + 8);
    char v16 = *(unsigned char *)(v15 + v9 % 512);
    BOOL v17 = a5 > 0;
    if (v16) {
      BOOL v18 = a5 < 1;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      uint64_t v19 = 0;
      if (*(unsigned char *)(v15 + v14)) {
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v21 = 0;
      do
      {
        *(unsigned char *)(a4 + v21) = v16;
        ++v9;
        if (v14 < 511)
        {
          ++v14;
        }
        else
        {
          uint64_t v22 = 0;
          int v26 = 0;
          uint64_t v25 = 0;
          int v23 = v9 / 512;
          do
          {
            *(_DWORD *)((char *)&v25 + v22) = v23 - (v6 & 0xFFFFFFC0);
            v22 += 4;
            v23 /= 64;
          }
          while (v22 != 12);
          int v14 = v9 % 512;
          uint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)(a2 + 16) + 8 * v26 + 8) + 8 * SHIDWORD(v25) + 8)
                          + 8 * (int)v25
                          + 8);
        }
        ++v21;
        char v16 = *(unsigned char *)(v15 + v14);
        BOOL v17 = v21 < a5;
        if (v16) {
          BOOL v24 = v21 >= a5;
        }
        else {
          BOOL v24 = 1;
        }
      }
      while (!v24);
      uint64_t v19 = v21;
      if (*(unsigned char *)(v15 + v14))
      {
LABEL_31:
        uint64_t result = mosyntbase_WStringLn(a1, "*** RecallString: output array too small", 0);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        goto LABEL_32;
      }
    }
    uint64_t result = 0;
LABEL_32:
    if (v17) {
      *(unsigned char *)(a4 + v19) = 0;
    }
  }
  return result;
}

uint64_t accphr_LoadData(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v48 = 0;
  uint64_t v49 = 0;
  memset(v55, 0, sizeof(v55));
  *a3 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v49);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = kbaux_BuildBrokerString(v49, "accphr", v55, 0x100uLL);
    if ((result & 0x80000000) == 0)
    {
      int v7 = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v55, "ACPH", 1031, (uint64_t *)&v48);
      if (v7 < 0)
      {
        int v17 = v7;
      }
      else
      {
        uint64_t v15 = v48;
        uint64_t v16 = v49;
        unsigned int v54 = 0;
        int v53 = 0;
        char v52 = 0;
        *(_DWORD *)__s1 = 0;
        int v17 = ssftriff_reader_OpenChunk((uint64_t)v48, (__int32 *)__s1, &v54, &v53);
        if ((v17 & 0x80000000) == 0 && !cstdlib_strcmp(__s1, "ACPH"))
        {
          uint64_t v50 = 0;
          int v17 = ssftriff_reader_DetachChunkData((uint64_t)v15, (void **)&v50, &v53);
          if ((v17 & 0x80000000) == 0)
          {
            int v18 = -1923080192;
            uint64_t v19 = (void *)heap_Alloc(*(void *)(v16 + 8), 176);
            *a3 = (uint64_t)v19;
            if (v19)
            {
              cstdlib_memset(v19, 0, 0xB0uLL);
              uint64_t v20 = *a3;
              *(_DWORD *)uint64_t v20 = v54;
              *(void *)(v20 + 16) = v50;
              unint64_t v21 = v53;
              *(void *)(*a3 + 8) = v53;
              uint64_t v22 = *a3;
              *(_DWORD *)(v22 + 24) = *v21;
              *(_DWORD *)(v22 + 28) = v21[1];
              v21 += 2;
              *(void *)(v22 + 64) = v21;
              int v23 = &v21[*(int *)(*a3 + 28)];
              *(void *)(*a3 + 72) = v23;
              uint64_t v24 = *a3;
              int v25 = *(_DWORD *)(*a3 + 28);
              if (v25 >= 1)
              {
                do
                {
                  v23 += *v23 + 1;
                  --v25;
                }
                while (v25);
              }
              int v27 = *v23;
              int v26 = v23 + 1;
              *(_DWORD *)(v24 + 32) = v27;
              *(void *)(v24 + 80) = v26;
              uint64_t v28 = *a3;
              unsigned int v29 = &v26[3 * *(int *)(*a3 + 32)];
              int v30 = *v29++;
              *(_DWORD *)(v28 + 36) = v30;
              *(void *)(v28 + 88) = v29;
              uint64_t v31 = *a3;
              uint64_t v32 = &v29[7 * *(int *)(*a3 + 36)];
              int v33 = *v32++;
              *(_DWORD *)(v31 + 40) = v33;
              *(void *)(v31 + 96) = v32;
              uint64_t v34 = *a3;
              int v35 = &v32[3 * *(int *)(*a3 + 40)];
              int v36 = *v35++;
              *(_DWORD *)(v34 + 44) = v36;
              *(void *)(v34 + 104) = v35;
              uint64_t v37 = *a3;
              uint64_t v38 = &v35[7 * *(int *)(*a3 + 44)];
              int v39 = *v38++;
              *(_DWORD *)(v37 + 48) = v39;
              *(void *)(v37 + 112) = v38;
              uint64_t v40 = *a3;
              uint64_t v41 = &v38[16 * (uint64_t)*(int *)(*a3 + 48)];
              int v42 = *v41++;
              *(_DWORD *)(v40 + 52) = v42;
              *(void *)(v40 + 120) = v41;
              uint64_t v43 = *a3;
              uint64_t v44 = &v41[4 * *(int *)(*a3 + 52)];
              int v45 = *v44++;
              *(_DWORD *)(v43 + 56) = v45;
              *(void *)(v43 + 128) = v44;
              uint64_t v46 = *a3;
              long long v47 = &v44[16 * (uint64_t)*(int *)(*a3 + 56)];
              *(_DWORD *)(v46 + 136) = *v47;
              *(_DWORD *)(v46 + 140) = v47[1];
              *(_DWORD *)(v46 + 144) = v47[2];
              *(_DWORD *)(v46 + 148) = v47[3];
              *(_DWORD *)(v46 + 152) = v47[4];
              *(_DWORD *)(v46 + 156) = v47[5];
              *(_DWORD *)(v46 + 160) = v47[6];
              v47 += 7;
              *(void *)(v46 + 168) = v47;
              if (v47[*(int *)(*a3 + 160)] == 1234567890) {
                goto LABEL_13;
              }
            }
            else
            {
              int v18 = -1923080182;
            }
            ssftriff_reader_ReleaseChunkData(v50);
            uint64_t v8 = *a3;
            if (*a3)
            {
              heap_Free(*(void **)(v16 + 8), v8);
              *a3 = 0;
            }
            int v17 = v18;
          }
        }
      }
LABEL_13:
      LODWORD(result) = ssftriff_reader_ObjClose(v48, v8, v9, v10, v11, v12, v13, v14);
      if (v17 >= 0) {
        return result;
      }
      else {
        return v17;
      }
    }
  }
  return result;
}

uint64_t accphr_UnloadData(_WORD *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  if (!a3) {
    return 2371887111;
  }
  uint64_t inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0)
  {
    if (*a3)
    {
      ssftriff_reader_ReleaseChunkData(*(void **)(*a3 + 16));
      if (*a3)
      {
        heap_Free(*(void **)(v6 + 8), *a3);
        *a3 = 0;
      }
    }
  }
  return inited;
}

uint64_t accphr_Nil()
{
  return 0xFFFFFFFFLL;
}

uint64_t accphr_getAccPhrType(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

uint64_t accphr_getFunctionWords(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 144);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t accphr_getHierarchy(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 148);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t accphr_getDefaultEmph(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 140);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t accphr_getScenarios(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 156);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t accphr_getDomains(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 152);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t accphr_getFeatList(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t result = 2371887111;
  if (a1 && (a2 & 0x80000000) == 0 && *(_DWORD *)(a1 + 28) > (signed int)a2)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    uint64_t v6 = *(int *)(*(void *)(a1 + 64) + 4 * a2);
    uint64_t v7 = *(unsigned int *)(v5 + 4 * v6);
    *a3 = v7;
    if ((int)v7 >= 1)
    {
      uint64_t v8 = (int *)(v5 + 4 * v6 + 4);
      uint64_t v9 = a3 + 1;
      do
      {
        int v10 = *v8++;
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
    return 0;
  }
  return result;
}

uint64_t accphr_getConsList(int a1, uint64_t a2, int a3)
{
  uint64_t result = 0;
  if (a1) {
    int v5 = -1;
  }
  else {
    int v5 = 0;
  }
  BOOL v6 = a1 == 1 || a1 == 0;
  if (a1 == 1) {
    int v7 = 1;
  }
  else {
    int v7 = v5;
  }
  char v8 = a1 == 2 || v6;
  if (a1 == 2) {
    int v9 = 2;
  }
  else {
    int v9 = v7;
  }
  if (a2 && (a3 & 0x80000000) == 0)
  {
    char v10 = v8 ^ 1;
    if (*(_DWORD *)(a2 + 32) <= a3) {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a2 + 80) + 4 * (v9 + 3 * a3));
    }
  }
  return result;
}

uint64_t accphr_getNode(int a1, uint64_t a2, int a3)
{
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      goto LABEL_6;
    case 5:
    case 7:
      a1 = 4;
      goto LABEL_6;
    case 6:
      a1 = 5;
      goto LABEL_6;
    case 8:
      a1 = 6;
LABEL_6:
      char v3 = 1;
      break;
    default:
      char v3 = 0;
      a1 = -1;
      break;
  }
  uint64_t v4 = 0;
  if (a2 && (a3 & 0x80000000) == 0)
  {
    char v5 = v3 ^ 1;
    if (*(_DWORD *)(a2 + 36) <= a3) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a2 + 88) + 4 * (a1 + 7 * a3));
    }
  }
  return v4;
}

uint64_t accphr_getNodeMatchOp(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 36) <= a2) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a1 + 88) + 4 * (7 * a2 + 1));
    }
  }
  return result;
}

uint64_t accphr_getNodeNegated(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 36) <= a2) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a1 + 88) + 28 * a2);
    }
  }
  return result;
}

uint64_t accphr_getChildren(int a1, uint64_t a2, int a3)
{
  uint64_t result = 0;
  if (a1) {
    int v5 = -1;
  }
  else {
    int v5 = 0;
  }
  BOOL v6 = a1 == 1 || a1 == 0;
  if (a1 == 1) {
    int v7 = 1;
  }
  else {
    int v7 = v5;
  }
  char v8 = a1 == 2 || v6;
  if (a1 == 2) {
    int v9 = 2;
  }
  else {
    int v9 = v7;
  }
  if (a2 && (a3 & 0x80000000) == 0)
  {
    char v10 = v8 ^ 1;
    if (*(_DWORD *)(a2 + 40) <= a3) {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a2 + 96) + 4 * (v9 + 3 * a3));
    }
  }
  return result;
}

uint64_t accphr_getChildrenOpType(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 40) <= a2) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a1 + 96) + 12 * a2);
    }
  }
  return result;
}

uint64_t accphr_getInstr(int a1, uint64_t a2, int a3)
{
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      char v3 = 1;
      break;
    default:
      char v3 = 0;
      a1 = -1;
      break;
  }
  uint64_t v4 = 0;
  if (a2 && (a3 & 0x80000000) == 0)
  {
    char v5 = v3 ^ 1;
    if (*(_DWORD *)(a2 + 44) <= a3) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a2 + 104) + 4 * (a1 + 7 * a3));
    }
  }
  return v4;
}

uint64_t accphr_getInstrType(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 44) <= a2) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a1 + 104) + 4 * (7 * a2 + 1));
    }
  }
  return result;
}

uint64_t accphr_getInstrRight(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 44) <= a2) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a1 + 104) + 4 * (7 * a2 + 4));
    }
  }
  return result;
}

uint64_t accphr_getInstrTargetRange(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 44) <= a2) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a1 + 104) + 4 * (7 * a2 + 3));
    }
  }
  return result;
}

uint64_t accphr_getRule(int a1, uint64_t a2, int a3)
{
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      char v3 = 1;
      break;
    default:
      char v3 = 0;
      a1 = -1;
      break;
  }
  uint64_t v4 = 0;
  if (a2 && (a3 & 0x80000000) == 0)
  {
    char v5 = v3 ^ 1;
    if (*(_DWORD *)(a2 + 52) <= a3) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a2 + 112) + 4 * (a1 + 16 * a3));
    }
  }
  return v4;
}

uint64_t accphr_getFirstRule(uint64_t a1, int a2)
{
  if (a1) {
    return *(unsigned int *)(*(void *)(a1 + 168) + 4 * (a2 % *(_DWORD *)(a1 + 160)));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t accphr_getRuleSet(int a1, uint64_t a2, int a3)
{
  switch(a1)
  {
    case 0:
    case 1:
      goto LABEL_6;
    case 2:
      char v3 = 1;
      a1 = 1;
      break;
    case 3:
      a1 = 2;
      goto LABEL_6;
    case 4:
      a1 = 3;
LABEL_6:
      char v3 = 1;
      break;
    default:
      char v3 = 0;
      a1 = -1;
      break;
  }
  uint64_t v4 = 0;
  if (a2 && (a3 & 0x80000000) == 0)
  {
    char v5 = v3 ^ 1;
    if (*(_DWORD *)(a2 + 52) <= a3) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a2 + 120) + 4 * (a1 + 4 * a3));
    }
  }
  return v4;
}

uint64_t accphr_getRuleSetIsSubset(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 52) <= a2) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a1 + 120) + 16 * a2);
    }
  }
  return result;
}

uint64_t accphr_getScenario(int a1, uint64_t a2, int a3)
{
  switch(a1)
  {
    case 0:
      int v3 = 0;
      goto LABEL_7;
    case 1:
      int v3 = 13;
      goto LABEL_7;
    case 2:
      int v3 = 14;
      goto LABEL_7;
    case 3:
      int v3 = 15;
LABEL_7:
      char v4 = 1;
      break;
    default:
      char v4 = 0;
      int v3 = -1;
      break;
  }
  uint64_t result = 0;
  if (a2 && (a3 & 0x80000000) == 0)
  {
    char v6 = v4 ^ 1;
    if (*(_DWORD *)(a2 + 56) <= a3) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
    else {
      return *(unsigned int *)(*(void *)(a2 + 128) + 4 * (v3 + 16 * a3));
    }
  }
  return result;
}

uint64_t accphr_getScenarioNamePtr(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 56) <= a2) {
      return 0;
    }
    else {
      return *(void *)(a1 + 128) + 64 * a2;
    }
  }
  return result;
}

uint64_t mosyntutils_UTF32ToUTF8(uint64_t a1, unsigned int a2, unsigned char *a3, int a4, unsigned char *a5)
{
  *a5 = 1;
  if (a4 < 4)
  {
    uint64_t result = 0;
    *a5 = 0;
    return result;
  }
  LOBYTE(v5) = a2;
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (HIWORD(a2) > 0x10u)
        {
          *a5 = 0;
          mosyntbase_WInt3Ln(a1, "*** UTF32ToUTF8: unable to convert UTF32 char ", 0, a2, " to UTF8", 0);
          return 0;
        }
        a3[3] = a2 & 0x3F | 0x80;
        a3[2] = (a2 >> 6) & 0x3F | 0x80;
        a3[1] = (a2 >> 12) & 0x3F | 0x80;
        unsigned int v5 = (a2 >> 18) - 16;
        uint64_t result = 4;
      }
      else
      {
        a3[2] = a2 & 0x3F | 0x80;
        a3[1] = (a2 >> 6) & 0x3F | 0x80;
        unsigned int v5 = (a2 >> 12) - 32;
        uint64_t result = 3;
      }
    }
    else
    {
      a3[1] = a2 & 0x3F | 0x80;
      unsigned int v5 = (a2 >> 6) | 0xFFFFFFC0;
      uint64_t result = 2;
    }
  }
  else
  {
    uint64_t result = 1;
  }
  *a3 = v5;
  if (result < a4) {
    a3[result] = 0;
  }
  return result;
}

uint64_t mosyntutils_UTF8ToUTF32(uint64_t a1, unsigned __int8 *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  uint64_t result = *a2;
  if ((char)*a2 < 0)
  {
    if (result > 0xF7) {
      return 0;
    }
    if (result >= 0xF0)
    {
      int v7 = ((result & 7) << 18) | ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6);
      unsigned __int8 v8 = a2[3];
      return v7 & 0xFFFFFFC0 | v8 & 0x3F;
    }
    if (result >= 0xE0)
    {
      int v7 = ((result & 0xF) << 12) | ((a2[1] & 0x3F) << 6);
      unsigned __int8 v8 = a2[2];
      return v7 & 0xFFFFFFC0 | v8 & 0x3F;
    }
    if (result < 0xC0)
    {
      *a4 = 0;
      mosyntbase_WString(a1, "*** UTF8ToUTF32: unable to convert UTF8 char '", 0);
      mosyntbase_WString(a1, a2, a3);
      mosyntbase_WString(a1, "'", 0);
      if ((int)mosyntbase_Length((uint64_t)a2, a3) >= 1)
      {
        uint64_t v10 = 0;
        do
        {
          mosyntbase_WString(a1, " ", 0);
          mosyntbase_WInt(a1, a2[v10++], 1);
        }
        while (v10 < (int)mosyntbase_Length((uint64_t)a2, a3));
      }
      mosyntbase_WString(a1, " to UTF32", 0);
      mosyntbase_WLn(a1);
      return 0;
    }
    return a2[1] & 0x3F | ((result & 0x1F) << 6);
  }
  return result;
}

uint64_t mosyntutils_DetUTF8Length(uint64_t a1, unsigned int a2)
{
  if ((int)a2 > -9) {
    return 1;
  }
  if (a2 > 0xFFFFFFEF) {
    return 4;
  }
  if (a2 > 0xFFFFFFDF) {
    return 3;
  }
  if (a2 > 0xFFFFFFBF) {
    return 2;
  }
  mosyntbase_WriteDevelMessage(a1, "DetUTF8Length: malformed UTF8 string starting with %d", 0, "", 0, "", 0, "", 0, a2, 0, 0);
  return 1;
}

uint64_t mosyntutils_GetUTF8Char(uint64_t a1, uint64_t a2, int a3, int *a4, unsigned char *a5)
{
  *a5 = 0;
  uint64_t v5 = *a4;
  if ((int)v5 < a3)
  {
    unsigned int v10 = mosyntutils_DetUTF8Length(a1, *(char *)(a2 + v5));
    unint64_t v11 = 0;
    unint64_t v12 = v10;
    int v13 = *a4;
    do
    {
      unint64_t v14 = v11;
      if (v13 >= a3)
      {
        unint64_t v12 = v11;
        goto LABEL_8;
      }
      a5[v11] = *(unsigned char *)(a2 + v13);
      int v13 = *a4 + 1;
      *a4 = v13;
      ++v11;
    }
    while (v10 != v14 + 1);
    if (v14 > 2) {
      return 0;
    }
LABEL_8:
    a5[v12] = 0;
  }
  return 0;
}

uint64_t mosyntutils_UTF8Length(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  unint64_t v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  char v6 = 1;
  while (1)
  {
    unsigned int v7 = *(unsigned __int8 *)(a2 + v3);
    if (!*(unsigned char *)(a2 + v3)) {
      return v5;
    }
    if (v4 < 1)
    {
      if ((v7 & 0x80) != 0)
      {
        if (v7 > 0xF7) {
          goto LABEL_23;
        }
        if (v7 < 0xF0)
        {
          if (v7 < 0xE0)
          {
            if (v7 < 0xC0) {
              goto LABEL_23;
            }
            uint64_t v5 = (v5 + 1);
            int v4 = 1;
          }
          else
          {
            uint64_t v5 = (v5 + 1);
            int v4 = 2;
          }
        }
        else
        {
          uint64_t v5 = (v5 + 1);
          int v4 = 3;
        }
      }
      else
      {
        int v4 = 0;
        uint64_t v5 = (v5 + 1);
      }
    }
    else
    {
      BOOL v8 = (char)v7 < -64;
      if (!v8) {
        char v6 = 0;
      }
      v4 -= v8;
    }
    ++v3;
    if (v6) {
      BOOL v9 = v3 >= a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      if (v6) {
        return v5;
      }
LABEL_23:
      mosyntbase_WriteDevelMessage(a1, "UTF8Length: malformed UTF8 string", 0, "", 0, "", 0, "", 0, 0, 0, 0);
      return 1;
    }
  }
}

uint64_t mosyntutils_AppChar(uint64_t a1, int a2, int *a3, char a4)
{
  BOOL v5 = 0;
  v6[0] = a4;
  v6[1] = 0;
  return mosyntbase_App(a1, a2, a3, (uint64_t)v6, 2, &v5);
}

uint64_t mosyntutils_SkipBlanksInString(uint64_t a1, int a2, int *a3)
{
  int v3 = *a3;
  if (*a3 < a2)
  {
    int v4 = (unsigned __int8 *)(a1 + v3);
    do
    {
      int v5 = *v4++;
      if (v5 != 32) {
        break;
      }
      *a3 = ++v3;
    }
    while (a2 != v3);
  }
  return 0;
}

uint64_t mosyntutils_CheckSkipCharInString(uint64_t a1, unsigned __int8 *a2, int a3, signed int *a4, unsigned __int8 a5)
{
  signed int v8 = *a4;
  if (*a4 >= a3 || a2[v8] == a5)
  {
    uint64_t result = 0;
  }
  else
  {
    v10[0] = a5;
    v10[1] = 0;
    uint64_t result = mosyntbase_WriteDevelMessage(a1, "***** error getting character '%s' at position %d in string '%s'\\n", 0, v10, 2, a2, a3, "", 0, v8, 0, 0);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    signed int v8 = *a4;
  }
  if (v8 < a3)
  {
    if (a2[v8]) {
      *a4 = v8 + 1;
    }
  }
  return result;
}

uint64_t mosyntutils_GetCardFromString(uint64_t a1, unsigned __int8 *a2, int a3, signed int *a4, _DWORD *a5)
{
  signed int v9 = *a4;
  if (*a4 < a3 && a2[v9] == 32)
  {
    unsigned int v10 = &a2[v9 + 1];
    signed int v11 = v9 + 1;
    while (1)
    {
      *a4 = v11;
      if (a3 == v11) {
        break;
      }
      int v12 = *v10++;
      ++v11;
      if (v12 != 32)
      {
        signed int v9 = v11 - 1;
        goto LABEL_8;
      }
    }
    signed int v9 = a3;
  }
LABEL_8:
  if (a2[v9] - 58 > 0xFFFFFFF5)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = mosyntbase_WriteDevelMessage(a1, "***** error in getting cardinal from string '%s' at position %d\\n", 0, a2, a3, "", 0, "", 0, v9, 0, 0);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  *a5 = 0;
  for (int i = *a4; i < a3; *a4 = i)
  {
    int v15 = a2[i];
    if ((v15 - 48) > 9) {
      break;
    }
    *a5 = v15 + 10 * *a5 - 48;
    int i = *a4 + 1;
  }
  return result;
}

uint64_t mosyntutils_GetIdentFromString(uint64_t a1, unsigned __int8 *a2, int a3, signed int *a4, unsigned char *a5, int a6)
{
  signed int v11 = *a4;
  if (*a4 < a3 && a2[v11] == 32)
  {
    int v12 = &a2[v11 + 1];
    signed int v13 = v11 + 1;
    while (1)
    {
      *a4 = v13;
      if (a3 == v13) {
        break;
      }
      int v14 = *v12++;
      ++v13;
      if (v14 != 32)
      {
        signed int v11 = v13 - 1;
        goto LABEL_8;
      }
    }
    signed int v11 = a3;
  }
LABEL_8:
  if ((a2[v11] & 0xDFu) - 91 > 0xFFFFFFE5
    || (uint64_t result = mosyntbase_WriteDevelMessage(a1, "***** error in getting identifier from string '%s' at position %d\\n", 0, a2, a3, "", 0, "", 0, v11, 0, 0), (result & 0x80000000) == 0))
  {
    *a5 = 0;
    int v21 = 0;
    unsigned __int8 v16 = a2[*a4];
    BOOL v22 = 0;
    v23[0] = v16;
    v23[1] = 0;
    uint64_t result = mosyntbase_App((uint64_t)a5, a6, &v21, (uint64_t)v23, 2, &v22);
    if ((result & 0x80000000) == 0)
    {
      int v17 = a3 - 1;
      do
      {
        uint64_t v18 = *a4;
        *a4 = v18 + 1;
        int v19 = a2[v18 + 1];
        if ((int)v18 >= v17)
        {
          if ((v19 - 48) < 0xA) {
            goto LABEL_21;
          }
        }
        else if ((v19 & 0xFFFFFFDF) - 65 < 0x1A || (v19 - 48) < 0xA)
        {
          goto LABEL_21;
        }
        if (v19 != 95 && v19 != 45) {
          return mosyntbase_UpperCase(a5, a6);
        }
LABEL_21:
        BOOL v24 = 0;
        v25[0] = v19;
        v25[1] = 0;
        uint64_t result = mosyntbase_App((uint64_t)a5, a6, &v21, (uint64_t)v25, 2, &v24);
      }
      while ((result & 0x80000000) == 0);
    }
  }
  return result;
}

uint64_t mosyntutils_GetIdent1FromString(uint64_t a1, unsigned __int8 *a2, int a3, signed int *a4, unsigned char *a5, int a6)
{
  signed int v11 = *a4;
  if (*a4 < a3 && a2[v11] == 32)
  {
    int v12 = &a2[v11 + 1];
    signed int v13 = v11 + 1;
    while (1)
    {
      *a4 = v13;
      if (a3 == v13) {
        break;
      }
      int v14 = *v12++;
      ++v13;
      if (v14 != 32)
      {
        signed int v11 = v13 - 1;
        goto LABEL_8;
      }
    }
    signed int v11 = a3;
  }
LABEL_8:
  if ((a2[v11] & 0xDFu) - 91 > 0xFFFFFFE5
    || (uint64_t result = mosyntbase_WriteDevelMessage(a1, "***** error in getting identifier from string '%s' at position %d\\n", 0, a2, a3, "", 0, "", 0, v11, 0, 0), (result & 0x80000000) == 0))
  {
    *a5 = 0;
    int v20 = 0;
    unsigned __int8 v16 = a2[*a4];
    BOOL v21 = 0;
    v22[0] = v16;
    v22[1] = 0;
    uint64_t result = mosyntbase_App((uint64_t)a5, a6, &v20, (uint64_t)v22, 2, &v21);
    if ((result & 0x80000000) == 0)
    {
      int v17 = a3 - 1;
      while (1)
      {
        uint64_t v18 = *a4;
        *a4 = v18 + 1;
        if ((int)v18 >= v17) {
          break;
        }
        int v19 = a2[v18 + 1];
        if ((v19 & 0xFFFFFFDF) - 65 > 0x19) {
          break;
        }
        BOOL v23 = 0;
        v24[0] = v19;
        v24[1] = 0;
        uint64_t result = mosyntbase_App((uint64_t)a5, a6, &v20, (uint64_t)v24, 2, &v23);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      return mosyntbase_UpperCase(a5, a6);
    }
  }
  return result;
}

uint64_t mosynttrans_InitTransDesc(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = mosyntpal_ALLOCATE(a1, a4, 0x18u);
  if ((result & 0x80000000) == 0)
  {
    *(void *)(*a4 + 8) = a3;
    uint64_t v8 = *a4;
    *(_DWORD *)uint64_t v8 = a2;
    *(void *)(v8 + 16) = 0;
  }
  return result;
}

uint64_t mosynttrans_FinishTransDesc(uint64_t a1, uint64_t *a2)
{
  int v4 = (uint64_t *)(*a2 + 16);
  int v5 = (void *)*v4;
  if (*v4)
  {
    while (1)
    {
      int v5 = (void *)*v5;
      uint64_t result = mosyntpal_DEALLOCATE(a1, v4);
      if ((result & 0x80000000) != 0) {
        break;
      }
      *int v4 = (uint64_t)v5;
      if (!v5) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    return mosyntpal_DEALLOCATE(a1, a2);
  }
  return result;
}

uint64_t mosynttrans_NilState()
{
  return 0;
}

uint64_t mosynttrans_NewTransState(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, char a7, int a8, uint64_t *a9)
{
  uint64_t TransductionMode = mosyntpal_ALLOCATE(a1, a9, 0xA0u);
  if ((TransductionMode & 0x80000000) != 0) {
    return TransductionMode;
  }
  *(void *)*a9 = 0;
  *(void *)(*a9 + 8) = 0;
  uint64_t v18 = *a9;
  *(_DWORD *)(v18 + 16) = a3;
  *(_DWORD *)(v18 + 20) = a5;
  *(unsigned char *)(v18 + 24) = 0;
  *(void *)(v18 + 32) = a4;
  uint64_t v19 = *a9;
  *(_DWORD *)(v19 + 40) = a6;
  *(unsigned char *)(v19 + 44) = a7;
  uint64_t TransductionMode = mosyntkbfst_GetTransductionMode(*(void *)(v19 + 32), (_DWORD *)(v19 + 128));
  if ((TransductionMode & 0x80000000) != 0) {
    return TransductionMode;
  }
  uint64_t TransductionMode = mosyntdata_StartPhonList(a1, (void *)(*a9 + 48), (void *)(*a9 + 56));
  if ((TransductionMode & 0x80000000) != 0) {
    return TransductionMode;
  }
  uint64_t v20 = *a9;
  if (a8 >= 0x3E8) {
    int v21 = 1000;
  }
  else {
    int v21 = a8;
  }
  if (a8 < 0) {
    int v21 = 50;
  }
  *(_DWORD *)(v20 + 64) = 0;
  *(_DWORD *)(v20 + 68) = v21;
  *(_DWORD *)(v20 + 72) = 0;
  uint64_t started = mosyntdata_StartPhonList(a1, (void *)(v20 + 80), (void *)(v20 + 88));
  if ((started & 0x80000000) == 0)
  {
    uint64_t v23 = *a9;
    *(unsigned char *)(v23 + 96) = 0;
    *(_DWORD *)(v23 + 100) = -1;
    *(void *)(v23 + 112) = 0;
    *(void *)(*a9 + 120) = 0;
    *(void *)(*a9 + 104) = 0;
    if ((a6 - 1) > 1)
    {
      *(_WORD *)(*a9 + 132) = mosyntkbsymtab_PhonStartId(*(void *)(a2 + 8));
      *(_WORD *)(*a9 + 134) = mosyntkbsymtab_PhonTermId(*(void *)(a2 + 8));
      *(_WORD *)(*a9 + 136) = mosyntkbsymtab_FSTDefaultId(*(void *)(a2 + 8));
      __int16 v28 = mosyntkbsymtab_SyllSepId(*(void *)(a2 + 8));
      uint64_t v29 = *a9;
      *(_WORD *)(v29 + 138) = v28;
      int v30 = *(_DWORD *)(v29 + 128);
      if (!v30) {
        goto LABEL_26;
      }
      if (v30 == 1)
      {
        *(_WORD *)(*a9 + 140) = mosyntkbsymtab_WordSep2Id(*(void *)(a2 + 8));
        *(_WORD *)(*a9 + 142) = mosyntkbsymtab_PhrSepPause2Id(*(void *)(a2 + 8));
        uint64_t v31 = 0;
        *(_WORD *)(*a9 + 144) = mosyntkbsymtab_PhrSepNoPause2Id(*(void *)(a2 + 8));
        do
        {
          *(_WORD *)(*a9 + 2 * v31 + 146) = mosyntkbsymtab_AccId(*(void *)(a2 + 8), v31);
          ++v31;
        }
        while (v31 != 5);
        return started;
      }
      if (*(int *)a2 < 1
        || (uint64_t started = TraceUnknownTransductionMode(a1, (unsigned int *)v29), (started & 0x80000000) == 0))
      {
LABEL_26:
        *(_WORD *)(*a9 + 140) = mosyntkbsymtab_WordSepId(*(void *)(a2 + 8));
        *(_WORD *)(*a9 + 142) = mosyntkbsymtab_PhrSepPauseId(*(void *)(a2 + 8));
        *(_WORD *)(*a9 + 144) = mosyntkbsymtab_PhrSepNoPauseId(*(void *)(a2 + 8));
        for (uint64_t i = 146; i != 156; i += 2)
          *(_WORD *)(*a9 + i) = mosyntkbsymtab_PrimAccId(*(void *)(a2 + 8));
      }
    }
    else if (!*(_DWORD *)(*a9 + 128) {
           || *(int *)a2 < 1
    }
           || (uint64_t started = TraceUnknownTransductionMode(a1, (unsigned int *)*a9), (started & 0x80000000) == 0))
    {
      *(_WORD *)(*a9 + 132) = mosyntkbsymtab_IPABeginId(*(void *)(a2 + 8));
      *(_WORD *)(*a9 + 134) = mosyntkbsymtab_IPAEndId(*(void *)(a2 + 8));
      *(_WORD *)(*a9 + 136) = mosyntkbsymtab_FSTDefaultId(*(void *)(a2 + 8));
      *(_WORD *)(*a9 + 138) = mosyntkbsymtab_IPASyllSepId(*(void *)(a2 + 8));
      __int16 v24 = mosyntkbsymtab_IPAWordSepId(*(void *)(a2 + 8));
      uint64_t v25 = *a9;
      *(_WORD *)(v25 + 140) = v24;
      *(_DWORD *)(v25 + 142) = 0;
      for (uint64_t j = 146; j != 156; j += 2)
        *(_WORD *)(*a9 + j) = mosyntkbsymtab_IPAPrimAccId(*(void *)(a2 + 8));
    }
  }
  return started;
}

uint64_t TraceUnknownTransductionMode(uint64_t a1, unsigned int *a2)
{
  uint64_t result = mosyntknowl_WriteTraceHeader(a1, a2[4]);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mosyntbase_WString(a1, "fst: ", 0);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = mosyntbase_WInt(a1, a2[5], 1);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = mosyntbase_WString(a1, " ***** unknown transduction mode: ", 0);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mosyntbase_WInt(a1, a2[32], 0);
          if ((result & 0x80000000) == 0)
          {
            return mosyntbase_WStringLn(a1, "; using default instead", 0);
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosynttrans_NewTransStateSeq(uint64_t a1, uint64_t a2, int a3, int *a4, int a5, int a6, unsigned int a7, int a8, uint64_t *a9)
{
  *a9 = 0;
  LODWORD(v13) = *a4;
  if (*a4 <= a6 || a6 <= -1) {
    uint64_t v13 = v13;
  }
  else {
    uint64_t v13 = a6;
  }
  do
  {
    if ((int)v13 < 1)
    {
      uint64_t v20 = 0;
      goto LABEL_18;
    }
    uint64_t v15 = v13 - 1;
    uint64_t v16 = *(void *)&a4[2 * v13];
    uint64_t v17 = mosyntkbfst_NilFST();
    uint64_t v13 = v15;
  }
  while (v16 == v17);
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v21 = a4 + 2;
  uint64_t v22 = v15 + 1;
  unint64_t v23 = a7;
  do
  {
    uint64_t v24 = *(void *)&v21[2 * v18];
    if (v24 != mosyntkbfst_NilFST())
    {
      uint64_t v20 = mosynttrans_NewTransState(a1, a2, a3, *(void *)&v21[2 * v18], v18, a5, v18 < v23, a8, a9);
      if ((v20 & 0x80000000) != 0) {
        return v20;
      }
      *(void *)*a9 = v19;
      if (v19) {
        *(void *)(v19 + 8) = *a9;
      }
      uint64_t v19 = *a9;
    }
    ++v18;
  }
  while (v22 != v18);
LABEL_18:
  if (*a9) {
    return v20;
  }
  uint64_t v26 = mosyntkbfst_NilFST();

  return mosynttrans_NewTransState(a1, a2, a3, v26, -1, a5, 1, a8, a9);
}

uint64_t mosynttrans_DisposeTransState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3 = (void *)*a3;
  if (!*a3) {
    return 0;
  }
  do
  {
    int v3 = (void *)*v3;
    uint64_t result = mosyntpal_DEALLOCATE(a1, a3);
    if ((result & 0x80000000) != 0) {
      break;
    }
    *a3 = (uint64_t)v3;
  }
  while (v3);
  return result;
}

uint64_t mosynttrans_PutPhonList(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t *a5)
{
  signed int v9 = a5;
  if (!a3) {
    return 0;
  }
  do
  {
    char v6 = a3;
    a3 = (void *)*a3;
  }
  while (a3);
  *((unsigned char *)v6 + 24) = a4;
  uint64_t result = mosyntdata_CopyPhonList(a1, &v9);
  if ((result & 0x80000000) == 0)
  {
    PhonEle = mosyntdata_LastPhonEle(a1, v9);
    return mosyntdata_AppendPhonList(a1, v6 + 6, v6 + 7, (uint64_t)v9, (uint64_t)PhonEle);
  }
  return result;
}

uint64_t mosynttrans_GetPhonList(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5)
{
  uint64_t result = mosyntdata_StartPhonList(a1, a4, a5);
  if (a3)
  {
    if ((result & 0x80000000) == 0)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      for (uint64_t result = SingleTransducerGet(a1, a2, (uint64_t)a3, &v13, &v12); (result & 0x80000000) == 0; a3 = (uint64_t *)v11)
      {
        uint64_t v11 = a3[1];
        if (v13)
        {
          if (!v11) {
            return mosyntdata_AppendPhonList(a1, a4, a5, v13, v12);
          }
          uint64_t result = mosyntdata_AppendPhonList(a1, (void *)(v11 + 48), (void *)(v11 + 56), v13, v12);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        else if (!v11 || !*(unsigned char *)(v11 + 24))
        {
          uint64_t v11 = *a3;
          if (!*a3) {
            return result;
          }
        }
        uint64_t result = SingleTransducerGet(a1, a2, v11, &v13, &v12);
      }
    }
  }
  return result;
}

uint64_t SingleTransducerGet(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = mosyntdata_StartPhonList(a1, a4, a5);
  if ((result & 0x80000000) == 0)
  {
    int v33 = 0;
    uint64_t v11 = *(void *)(a3 + 32);
    if (v11 == mosyntkbfst_NilFST())
    {
      int v23 = *(_DWORD *)(a3 + 100);
      uint64_t v24 = (void *)(a3 + 48);
      if (v23 < 0)
      {
        uint64_t v27 = *(void *)(a3 + 56);
        uint64_t v26 = (void *)(a3 + 56);
        uint64_t result = mosyntdata_AppendPhonList(a1, a4, a5, *(v26 - 1), v27);
        if ((result & 0x80000000) == 0)
        {
          return mosyntdata_StartPhonList(a1, v24, v26);
        }
      }
      else
      {
        uint64_t v25 = (void *)(a3 + 56);
        do
        {
          uint64_t result = mosyntdata_PopPhonEle(a1, (void **)v24, v25, &v33);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (!v33) {
            break;
          }
          uint64_t result = mosyntdata_AppendPhonList(a1, a4, a5, (uint64_t)v33, (uint64_t)v33);
          if ((result & 0x80000000) != 0) {
            break;
          }
          --v23;
        }
        while (v23);
      }
    }
    else
    {
      if (!*(void *)(a3 + 80) && *(_DWORD *)(a3 + 64) < *(_DWORD *)(a3 + 68))
      {
        while (1)
        {
          uint64_t result = mosyntdata_PopPhonEle(a1, (void **)(a3 + 48), (void *)(a3 + 56), &v33);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v12 = v33;
          if (!v33) {
            goto LABEL_55;
          }
          uint64_t v34 = 0;
          int v35 = v33;
          if (*v33)
          {
            *int v33 = 0;
            uint64_t result = mosyntbase_WriteDevelMessage(a1, "*** SVOXTrans.DoTransduction() expects isolated phone\\n", 0, "", 0, "", 0, "", 0, 0, 0, 0);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          if (!*(unsigned char *)(a3 + 96))
          {
            uint64_t result = StartTransduction(a1, a2, a3);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          if (*((unsigned char *)v12 + 20)) {
            break;
          }
          int v16 = *((unsigned __int16 *)v12 + 12);
          if (v16 != *(unsigned __int16 *)(a3 + 134))
          {
            unsigned int v17 = (__int16)v16;
            unint64_t v18 = (uint64_t *)&v35;
            uint64_t v19 = a1;
            uint64_t v20 = a2;
            uint64_t v21 = a3;
            char v22 = 0;
            goto LABEL_32;
          }
LABEL_33:
          if (v35)
          {
            uint64_t result = mosyntdata_DisposePhonEleList(a1, &v35);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          if (*(void *)(a3 + 104))
          {
            uint64_t result = GetTransduction(a1, a2, a3);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          if (*(void *)(a3 + 80) || *(_DWORD *)(a3 + 64) >= *(_DWORD *)(a3 + 68))
          {
            int v33 = 0;
            goto LABEL_55;
          }
        }
        uint64_t v13 = *((unsigned __int16 *)v12 + 18);
        int v14 = *((_DWORD *)v12 + 6);
        switch(v14)
        {
          case 3:
            if (!*(_DWORD *)(a3 + 40))
            {
              if (*((__int16 *)v12 + 14) > 1) {
                unsigned int v15 = *(__int16 *)(a3 + 144);
              }
              else {
                unsigned int v15 = *(__int16 *)(a3 + 142);
              }
              goto LABEL_20;
            }
            break;
          case 2:
            break;
          case 1:
            unsigned int v15 = *(__int16 *)(a3 + 138);
LABEL_20:
            uint64_t result = TransduceSymbol(a1, a2, a3, v15, 0, (uint64_t *)&v35);
            if ((result & 0x80000000) != 0) {
              return result;
            }
LABEL_23:
            if (*(_DWORD *)(a3 + 128) == 1)
            {
              if ((__int16)v13 <= 4)
              {
                if ((v13 & 0x8000) != 0)
                {
                  uint64_t result = mosyntbase_WriteDevelMessage(a1, "fst: %d ***** negative accent %d; using 0 instead\\n",
                             0,
                             "",
                             0,
                             "",
                             0,
                             "",
                             0,
                             *(_DWORD *)(a3 + 20),
                             0,
                             0);
                  uint64_t v13 = 0;
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
              }
              else
              {
                uint64_t v13 = 4;
              }
              unsigned int v17 = *(__int16 *)(a3 + 2 * v13 + 146);
LABEL_31:
              unint64_t v18 = &v34;
              uint64_t v19 = a1;
              uint64_t v20 = a2;
              uint64_t v21 = a3;
              char v22 = 1;
LABEL_32:
              uint64_t result = TransduceSymbol(v19, v20, v21, v17, v22, v18);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              goto LABEL_33;
            }
            if ((__int16)v13 >= 1)
            {
              unsigned int v17 = *(__int16 *)(a3 + 146);
              goto LABEL_31;
            }
            goto LABEL_33;
          default:
            uint64_t result = mosyntbase_WriteDevelMessage(a1, "*** unexpected NILBOUNDARY boundary phone\\n", 0, "", 0, "", 0, "", 0, 0, 0, 0);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_23;
        }
        unsigned int v15 = *(__int16 *)(a3 + 140);
        goto LABEL_20;
      }
LABEL_55:
      int v28 = *(_DWORD *)(a3 + 100);
      if (v28 < 0)
      {
        uint64_t result = mosyntdata_AppendPhonList(a1, a4, a5, *(void *)(a3 + 80), *(void *)(a3 + 88));
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = mosyntdata_StartPhonList(a1, (void *)(a3 + 80), (void *)(a3 + 88));
          if ((result & 0x80000000) == 0)
          {
LABEL_63:
            signed int v29 = *(_DWORD *)(a3 + 64);
            signed int v30 = *(_DWORD *)(a3 + 68);
            if (v29 >= v30)
            {
              uint64_t result = mosyntbase_WriteDevelMessage(a1, "---- forced emission %d >= %d\\n", 0, "", 0, "", 0, "", 0, v29, v30, 0);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              char v31 = 1;
              *(unsigned char *)(a3 + 24) = 1;
            }
            else
            {
              if (!*(unsigned char *)(a3 + 24)) {
                return result;
              }
              char v31 = 0;
            }
            if (!*a4)
            {
              uint64_t result = TerminateTransduction(a1, a2, a3);
              if ((result & 0x80000000) == 0)
              {
                *(unsigned char *)(a3 + 24) = v31;
                uint64_t v32 = *(void *)(a3 + 8);
                if (v32) {
                  *(unsigned char *)(v32 + 24) = v29 < v30;
                }
                return SingleTransducerGet(a1, a2, a3, a4, a5);
              }
            }
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t result = mosyntdata_PopPhonEle(a1, (void **)(a3 + 80), (void *)(a3 + 88), &v33);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (!v33) {
            goto LABEL_63;
          }
          uint64_t result = mosyntdata_AppendPhonList(a1, a4, a5, (uint64_t)v33, (uint64_t)v33);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (!--v28)
          {
            int v33 = 0;
            goto LABEL_63;
          }
        }
      }
    }
  }
  return result;
}

uint64_t mosynttrans_TransducePhonList(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t *a6, int a7, char a8, void *a9, void *a10)
{
  uint64_t result = mosyntdata_StartPhonList(a1, a9, a10);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    char v22 = 0;
    uint64_t result = mosynttrans_NewTransState(a1, a2, a3, a4, a5, a7, a8, 1000, (uint64_t *)&v22);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v20 = v22;
      *((_DWORD *)v22 + 25) = -1;
      for (uint64_t result = mosynttrans_PutPhonList(a1, v19, v20, 1, a6);
            (result & 0x80000000) == 0;
            uint64_t result = mosyntdata_AppendPhonList(a1, a9, a10, v24, v23))
      {
        uint64_t result = mosynttrans_GetPhonList(a1, a2, v22, &v24, &v23);
        if ((result & 0x80000000) != 0) {
          break;
        }
        if (!v24)
        {
          uint64_t v21 = v22;
          if (!v22) {
            return 0;
          }
          do
          {
            uint64_t v21 = (uint64_t *)*v21;
            uint64_t result = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v22);
            if ((result & 0x80000000) != 0) {
              break;
            }
            char v22 = v21;
          }
          while (v21);
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t mosynttrans_SeqTransducePhonList(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t **a5, uint64_t a6, int a7, int a8, unsigned int a9, unsigned __int8 *a10, int a11)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t result = mosyntdata_StartPhonList(a1, a5, &v29);
  if ((result & 0x80000000) == 0)
  {
    long long v20 = *(_OWORD *)(a6 + 48);
    unsigned char v24[2] = *(_OWORD *)(a6 + 32);
    v24[3] = v20;
    v24[4] = *(_OWORD *)(a6 + 64);
    uint64_t v25 = *(void *)(a6 + 80);
    long long v21 = *(_OWORD *)(a6 + 16);
    v24[0] = *(_OWORD *)a6;
    v24[1] = v21;
    uint64_t result = mosynttrans_NewTransStateSeq(a1, a2, a3, (int *)v24, a7, a8, a9, 1000, (uint64_t *)&v26);
    if ((result & 0x80000000) == 0)
    {
      if (*(int *)a2 < 2
        || (uint64_t result = mosyntknowl_WriteTraceHeader(a1, a3), (result & 0x80000000) == 0)
        && (uint64_t result = mosyntbase_WString(a1, "before ", 0), (result & 0x80000000) == 0)
        && (uint64_t result = mosyntbase_WString(a1, a10, a11), (result & 0x80000000) == 0)
        && (uint64_t result = mosyntbase_WString(a1, " ", 0), (result & 0x80000000) == 0)
        && (uint64_t result = mosyntdata_WritePhonList(a1, *(uint64_t **)(a2 + 8), a4), (result & 0x80000000) == 0)
        && (uint64_t result = mosyntbase_WLn(a1), (result & 0x80000000) == 0))
      {
        if (v26)
        {
          for (uint64_t result = mosynttrans_PutPhonList(a1, v22, v26, 1, a4);
                (result & 0x80000000) == 0;
                uint64_t result = mosyntdata_AppendPhonList(a1, a5, &v29, v28, v27))
          {
            uint64_t result = mosynttrans_GetPhonList(a1, a2, v26, &v28, &v27);
            if ((result & 0x80000000) != 0) {
              break;
            }
            if (!v28) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          *a5 = a4;
          uint64_t result = mosyntdata_CopyPhonList(a1, a5);
          if ((result & 0x80000000) == 0)
          {
LABEL_17:
            if (*(int *)a2 < 2
              || (uint64_t result = mosyntknowl_WriteTraceHeader(a1, a3), (result & 0x80000000) == 0)
              && (uint64_t result = mosyntbase_WString(a1, "after ", 0), (result & 0x80000000) == 0)
              && (uint64_t result = mosyntbase_WString(a1, a10, a11), (result & 0x80000000) == 0)
              && (uint64_t result = mosyntbase_WString(a1, " ", 0), (result & 0x80000000) == 0)
              && (uint64_t result = mosyntdata_WritePhonList(a1, *(uint64_t **)(a2 + 8), *a5), (result & 0x80000000) == 0)
              && (uint64_t result = mosyntbase_WLn(a1), (result & 0x80000000) == 0)
              && (uint64_t result = mosyntbase_WLn(a1), (result & 0x80000000) == 0))
            {
              uint64_t v23 = v26;
              if (v26)
              {
                do
                {
                  uint64_t v23 = (uint64_t *)*v23;
                  uint64_t result = mosyntpal_DEALLOCATE(a1, (uint64_t *)&v26);
                  if ((result & 0x80000000) != 0) {
                    break;
                  }
                  uint64_t v26 = v23;
                }
                while (v23);
              }
              else
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}