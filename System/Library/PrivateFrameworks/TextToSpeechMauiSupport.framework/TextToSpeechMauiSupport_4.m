uint64_t phonmap_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t *v70;

  v3 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  v7 = v3;
  if ((int)v3 >= 0) {
    v8 = a1;
  }
  else {
    v8 = 0;
  }
  if ((v3 & 0x80000000) == 0)
  {
    v9 = a1[2];
    log_OutText(*(void *)(v9 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjClose : Begin", v4, v5, v6, v67);
    v17 = (void *)a1[3];
    if (v17) {
      v7 = stringmap_reader_ObjClose(v17, v10, v11, v12, v13, v14, v15, v16);
    }
    v18 = (void *)a1[4];
    if (v18) {
      v7 = stringmap_reader_ObjClose(v18, v10, v11, v12, v13, v14, v15, v16);
    }
    v19 = (void *)a1[5];
    if (v19) {
      v7 = stringmap_reader_ObjClose(v19, v10, v11, v12, v13, v14, v15, v16);
    }
    v20 = (void *)a1[6];
    if (v20) {
      v7 = stringmap_reader_ObjClose(v20, v10, v11, v12, v13, v14, v15, v16);
    }
    v21 = a1[7];
    if (v21)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v21, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v22, v23, v24, v25, v26, v27, v28);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(a1[7]);
    }
    v29 = v8[9];
    if (v29)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v29, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v30, v31, v32, v33, v34, v35, v36);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[9]);
    }
    v37 = v8[8];
    if (v37)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v37, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v38, v39, v40, v41, v42, v43, v44);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[8]);
    }
    v45 = v8[10];
    if (v45)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v45, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v46, v47, v48, v49, v50, v51, v52);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[10]);
    }
    v53 = (void *)v8[75];
    if (v53) {
      v7 = stringmap_reader_ObjClose(v53, v10, v11, v12, v13, v14, v15, v16);
    }
    v54 = (void *)v8[76];
    if (v54) {
      v7 = stringmap_reader_ObjClose(v54, v10, v11, v12, v13, v14, v15, v16);
    }
    v55 = v8[77];
    if (v55)
    {
      v70 = 0;
      if ((ssftmap_IteratorOpen(v55, 0, 1, (uint64_t)&v70) & 0x80000000) == 0)
      {
        v68 = 0;
        v69 = 0;
        while ((ssftmap_IteratorNext(v70, &v69, &v68) & 0x80000000) == 0)
          v7 = stringmap_reader_ObjClose(v68, v56, v57, v58, v59, v60, v61, v62);
        ssftmap_IteratorClose((uint64_t)v70);
      }
      ssftmap_ObjClose(v8[77]);
    }
    heap_Free(*(void **)(v9 + 8), (uint64_t)v8);
    log_OutText(*(void *)(v9 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjClose : End (%x)", v63, v64, v65, v7);
  }
  return v7;
}

uint64_t phonmap_ObjReopen(uint64_t a1, int a2)
{
  v18 = 0;
  uint64_t v3 = safeh_HandleCheck(a1, a2, 29348, 624);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v7 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjReopen : Begin", v4, v5, v6, v17);
  if ((paramc_ParamGetStr(*(void *)(v7 + 40), (uint64_t)"fevoice", &v18) & 0x80000000) != 0
    && (uint64_t Str = paramc_ParamGetStr(*(void *)(v7 + 40), (uint64_t)"voice", &v18), (Str & 0x80000000) != 0))
  {
    uint64_t Data = Str;
  }
  else
  {
    uint64_t Data = phonmap_loc_LoadData((_WORD **)a1, v18, v8, v9, v10, v11, v12, v13);
    if (v18) {
      paramc_ParamRelease(*(void *)(v7 + 40));
    }
  }
  log_OutText(*(void *)(v7 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjReopen : End (%x)", v11, v12, v13, Data);
  return Data;
}

uint64_t phonmap_LhPToLhTtsSym(void *a1, int a2, int a3, char *a4, uint64_t *a5)
{
  return phonmap_LhPToLhTtsSymEx(a1, a2, a3, a4, a5, 0);
}

uint64_t phonmap_LhTtsToLhPSym(void *a1, int a2, int a3, char *a4, uint64_t *a5, char *a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  if (!a4 || !a5 || !*a4) {
    return 2322604039;
  }
  uint64_t v11 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  uint64_t v12 = a1[2];
  unsigned int v13 = cstdlib_strlen(a4);
  unsigned int v14 = Utf8_DepesLengthInBytesUtf8((unsigned __int8 *)a4, v13);
  uint64_t v15 = heap_Alloc(*(void *)(v12 + 8), v14 + 1);
  if (!v15)
  {
    log_OutPublic(*(void *)(v12 + 32), (uint64_t)"PHONMAP", 29000, 0, v16, v17, v18, v19, v34);
    return 2322604042;
  }
  uint64_t v20 = v15;
  uint64_t StrMap = utf8_DepesToUtf8((uint64_t)a4, v13, 0, v15, v14, 0, 0);
  if ((StrMap & 0x80000000) != 0)
  {
LABEL_17:
    uint64_t v29 = StrMap;
    goto LABEL_18;
  }
  *(unsigned char *)(v20 + v14) = 0;
  log_OutText(*(void *)(v12 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhTtsToLhPSym : Begin (%s)", v22, v23, v24, v20);
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v31 = *(void *)(v12 + 32);
      uint64_t v29 = 2322604039;
      goto LABEL_28;
    }
    if (!a6 || !*a6)
    {
      uint64_t MapTroughLng = a1[3];
      uint64_t v35 = MapTroughLng;
      goto LABEL_25;
    }
    cstdlib_strcpy(__dst, "phonmap/");
    cstdlib_strcat(__dst, a6);
    uint64_t StrMap = phonmap_loc_GetStrMap((uint64_t)a1, __dst, "LANG", &v35, 0);
    if ((StrMap & 0x80000000) == 0)
    {
      uint64_t MapTroughLng = v35;
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  if (!a6 || !*a6)
  {
    uint64_t v32 = phonmap_reader_Maps(a1[7], 1, a4, a5);
    goto LABEL_27;
  }
  uint64_t MapTroughLng = phonmap_findMapTroughLng(a1[7], a6);
  if (MapTroughLng)
  {
LABEL_25:
    uint64_t v32 = stringmap_reader_ReverseMap(MapTroughLng, a4, a5);
LABEL_27:
    uint64_t v29 = v32;
    uint64_t v31 = *(void *)(v12 + 32);
LABEL_28:
    log_OutText(v31, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhTtsToLhPSym : End (%x, %s)", v25, v26, v27, v29);
    heap_Free(*(void **)(v12 + 8), v20);
    if ((v29 & 0x80000000) == 0) {
      return v29;
    }
    goto LABEL_29;
  }
  uint64_t v29 = 2322604052;
LABEL_18:
  heap_Free(*(void **)(v12 + 8), v20);
LABEL_29:
  if (((unsigned __int16)v29 & 0x1FFFu) <= 0x14 && ((1 << v29) & 0x10001A) != 0) {
    return v29 & 0x1FFF | 0x8A702000;
  }
  return v29;
}

uint64_t phonmap_LhPToLhTtsSequence(void *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6, char *a7)
{
  int v7 = phonmap_LhPToLhTtsSequenceLng(a1, a2, a3, a4, a5, a6, a7);
  unsigned int v8 = v7 & 0x1FFF | 0x8A702000;
  if (((1 << v7) & 0x10001A) == 0) {
    unsigned int v8 = v7;
  }
  if ((v7 & 0x1FFFu) <= 0x14) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v7;
  }
  if (v7 >= 0) {
    unsigned int v9 = v7;
  }
  if (v7 == 1) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t phonmap_LhPToLhTtsSequenceWithCheck(void *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6)
{
  LODWORD(result) = phonmap_LhPToLhTtsSequenceLng(a1, a2, a3, a4, a5, a6, 0);
  BOOL v7 = ((unsigned __int16)result & 0x1FFFu) > 0x14 || ((1 << result) & 0x10001A) == 0;
  unsigned int v8 = result & 0x1FFF | 0x8A702000;
  if (v7) {
    unsigned int v8 = result;
  }
  if ((int)result < 0) {
    return v8;
  }
  else {
    return result;
  }
}

uint64_t phonmap_LhPToIpaSym(uint64_t a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t v4 = 2322604039;
  if (a3 && a4 && *(_WORD *)a3)
  {
    uint64_t v8 = safeh_HandleCheck(a1, a2, 29348, 624);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToIpaSym : Begin", v9, v10, v11, v20);
      uint64_t v15 = *(void *)(a1 + 600);
      if (v15) {
        uint64_t v16 = stringmap_reader_WReverseMap(v15, a3, a4);
      }
      else {
        uint64_t v16 = 2322604033;
      }
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToIpaSym : End (%x)", v12, v13, v14, v16);
      if (((1 << v16) & 0x10001A) != 0) {
        unsigned int v17 = v16 & 0x1FFF | 0x8A702000;
      }
      else {
        unsigned int v17 = v16;
      }
      if (((unsigned __int16)v16 & 0x1FFFu) <= 0x14) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v16;
      }
      if ((int)v16 < 0) {
        return v18;
      }
      else {
        return v16;
      }
    }
  }
  return v4;
}

uint64_t phonmap_IpaToLhPSequence(uint64_t a1, int a2, _WORD *a3, unsigned int a4, _WORD *a5, char *a6, unsigned char *a7)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unsigned __int16 v47 = 0;
  uint64_t v45 = 0;
  v46 = 0;
  memset(v57, 0, sizeof(v57));
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v50 = 0u;
  __s = 0;
  if (!a3) {
    return 2322604039;
  }
  uint64_t StrMap = 2322604039;
  if (a5 && a4 && *a3)
  {
    *a5 = 0;
    uint64_t v14 = safeh_HandleCheck(a1, a2, 29348, 624);
    uint64_t StrMap = v14;
    uint64_t v18 = (int)v14 >= 0 ? a1 : 0;
    if ((v14 & 0x80000000) == 0)
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : Begin", v15, v16, v17, v43);
      if (a6 && a7 && *a6 && *a7)
      {
        cstdlib_strcpy(__dst, "phonmap_ipa/");
        cstdlib_strcat(__dst, a6);
        paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"fedataprefix", &__s);
        uint64_t v22 = __s;
        if (__s && *__s && (size_t v23 = cstdlib_strlen(__s) - 1, v22[v23] == 47))
        {
          cstdlib_strcpy(v48, __s);
          v48[v23] = 0;
          unsigned int v24 = 1;
          do
          {
            if (v24 == 1) {
              int v25 = 1;
            }
            else {
              int v25 = 2;
            }
            int v26 = brokeraux_ComposeBrokerString(*(void *)(a1 + 16), __dst, v25, 1, a6, v48, 0, v57, 0x80uLL);
            if (v26 < 0) {
              uint64_t StrMap = v26 | 0x8A702000;
            }
            else {
              uint64_t StrMap = phonmap_loc_GetStrMap(v18, (const char *)v57, "IPA ", &v45, v24 == 1);
            }
            if (v24 > 1) {
              break;
            }
            ++v24;
          }
          while ((StrMap & 0x80000000) != 0);
        }
        else
        {
          int v29 = brokeraux_ComposeBrokerString(*(void *)(a1 + 16), __dst, 0, 1, a6, 0, 0, v57, 0x80uLL);
          if (v29 < 0) {
            uint64_t StrMap = v29 | 0x8A702000;
          }
          else {
            uint64_t StrMap = phonmap_loc_GetStrMap(a1, (const char *)v57, "IPA ", &v45, 0);
          }
        }
        BOOL v27 = v45 != 0;
      }
      else
      {
        if (!*(void *)(a1 + 600))
        {
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v19, v20, v21, 2322604033);
          unsigned int v28 = 1;
          return v28 | 0x8A702000;
        }
        uint64_t v45 = *(void *)(a1 + 600);
        BOOL v27 = 1;
      }
      BOOL v30 = (int)StrMap >= 0;
      if ((StrMap & 0x80000000) != 0 || !v27)
      {
LABEL_45:
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v19, v20, v21, StrMap);
        if (v30) {
          return StrMap;
        }
      }
      else
      {
        unsigned int v31 = 0;
        unsigned int v32 = 0;
        while (1)
        {
          if (LH_wcslen((uint64_t)a3) <= (unint64_t)v32)
          {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v33, v34, v35, StrMap);
            return StrMap;
          }
          v36 = &a3[v32];
          if (*v36 == 32)
          {
            int v37 = 1;
            unsigned __int16 v47 = 1;
            v46 = (unsigned __int16 *)&phonmap_IpaToLhPSequence_szWordBnd;
            v38 = (unsigned __int16 *)&phonmap_IpaToLhPSequence_szWordBnd;
          }
          else
          {
            uint64_t StrMap = stringmap_reader_WMapToken(v45, v36, &v47, (uint64_t *)&v46);
            if ((StrMap & 0x80000000) != 0) {
              goto LABEL_49;
            }
            int v37 = v47;
            v38 = v46;
          }
          if (LH_wcslen((uint64_t)v38) + (unint64_t)v31 + 1 >= a4) {
            break;
          }
          v32 += v37;
          LH_wcscpy(&a5[v31], v46);
          v31 += LH_wcslen((uint64_t)v46);
          if (!v45)
          {
            BOOL v30 = 1;
            goto LABEL_45;
          }
        }
        uint64_t StrMap = 2322604041;
LABEL_49:
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP IpaToLhPSequence : End (%x)", v39, v40, v41, StrMap);
      }
      unsigned int v28 = StrMap & 0x1FFF;
      if (v28 <= 0x14 && ((1 << StrMap) & 0x10001A) != 0) {
        return v28 | 0x8A702000;
      }
    }
  }
  return StrMap;
}

uint64_t phonmap_LhPToSapi5Sym(void *a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t v4 = 2322604039;
  if (a3 && a4 && *(_WORD *)a3)
  {
    uint64_t v8 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      log_OutText(*(void *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToSapi5Sym : Begin", v9, v10, v11, v20);
      uint64_t v15 = a1[76];
      if (v15 || (uint64_t v15 = a1[75]) != 0) {
        uint64_t v16 = stringmap_reader_WReverseMap(v15, a3, a4);
      }
      else {
        uint64_t v16 = 2322604033;
      }
      log_OutText(*(void *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToSapi5Sym : End (%x)", v12, v13, v14, v16);
      if (((1 << v16) & 0x10001A) != 0) {
        unsigned int v17 = v16 & 0x1FFF | 0x8A702000;
      }
      else {
        unsigned int v17 = v16;
      }
      if (((unsigned __int16)v16 & 0x1FFFu) <= 0x14) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v16;
      }
      if ((int)v16 < 0) {
        return v18;
      }
      else {
        return v16;
      }
    }
  }
  return v4;
}

uint64_t phonmap_Sapi5ToLhPSequence(void *a1, int a2, _WORD *a3, unsigned int a4, _WORD *a5)
{
  unsigned __int16 v33 = 0;
  unsigned int v32 = 0;
  uint64_t v5 = 2322604039;
  if (!a3 || !a5 || !a4 || !*a3) {
    return v5;
  }
  *a5 = 0;
  uint64_t v13 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  log_OutText(*(void *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : Begin", v10, v11, v12, v31);
  uint64_t v17 = a1[76];
  if (!v17) {
    uint64_t v17 = a1[75];
  }
  if (v17) {
    uint64_t v18 = v13;
  }
  else {
    uint64_t v18 = 2322604033;
  }
  if ((v18 & 0x80000000) == 0)
  {
    if (LH_wcslen((uint64_t)a3))
    {
      unint64_t v22 = 0;
      int v23 = 0;
      unsigned int v24 = 0;
      do
      {
        uint64_t v13 = stringmap_reader_WMapToken(v17, &a3[v22], &v33, (uint64_t *)&v32);
        if ((v13 & 0x80000000) != 0) {
          goto LABEL_20;
        }
        int v25 = v33;
        if (LH_wcslen((uint64_t)v32) + (unint64_t)v24 + 1 >= a4)
        {
          uint64_t v5 = 2322604041;
          log_OutText(*(void *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : End (%x)", v26, v27, v28, 2322604041);
          return v5;
        }
        unint64_t v22 = (v23 + v25);
        LH_wcscpy(&a5[v24], v32);
        v24 += LH_wcslen((uint64_t)v32);
        int v23 = v22;
      }
      while (LH_wcslen((uint64_t)a3) > v22);
    }
    log_OutText(*(void *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : End (%x)", v19, v20, v21, v13);
    return v13;
  }
  uint64_t v13 = v18;
LABEL_20:
  log_OutText(*(void *)(a1[2] + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP Sapi5ToLhPSequence : End (%x)", v14, v15, v16, v13);
  if (((1 << v13) & 0x10001A) != 0) {
    unsigned int v29 = v13 & 0x1FFF | 0x8A702000;
  }
  else {
    unsigned int v29 = v13;
  }
  if (((unsigned __int16)v13 & 0x1FFFu) <= 0x14) {
    return v29;
  }
  else {
    return v13;
  }
}

uint64_t phonmap_GetLhPAlphabetInfo(void *a1, int a2, int a3, char *a4, __int16 *a5, char *a6)
{
  return phonmap_GetLhPAlphabetInfoEx(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t phonmap_GetLhPSample(void *a1, int a2, int a3, char *a4, uint64_t *a5)
{
  return phonmap_GetLhPSampleEx(a1, a2, a3, a4, a5, 0);
}

uint64_t phonmap_LhPToLhPSequence(void *a1, int a2, int a3, const char **a4)
{
  return phonmap_LhPToLhPSequenceEx(a1, a2, a3, a4, 0);
}

uint64_t phonmap_GetLhPAlphabetInfoEx(void *a1, int a2, int a3, char *a4, __int16 *a5, char *a6, char *a7)
{
  uint64_t v14 = 2322604039;
  if (!LH_stricmp(a4, "alphabet"))
  {
    if (a5)
    {
      uint64_t v25 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
      if ((v25 & 0x80000000) != 0) {
        return v25;
      }
      uint64_t v29 = a1[2];
      log_OutText(*(void *)(v29 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabet : Begin", v26, v27, v28, v43);
      switch(a3)
      {
        case 0:
          if (a7 && *a7)
          {
            uint64_t v33 = a1[7];
            goto LABEL_27;
          }
          uint64_t v41 = a1[7];
          goto LABEL_34;
        case 1:
          uint64_t MapTroughLng = a1[3];
          goto LABEL_31;
        case 2:
          if (a7 && *a7)
          {
            uint64_t v33 = a1[9];
LABEL_27:
            uint64_t MapTroughLng = phonmap_findMapTroughLng(v33, a7);
            if (!MapTroughLng)
            {
              uint64_t v14 = 2322604052;
LABEL_29:
              log_OutText(*(void *)(v29 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabet : End (%x)", v30, v31, v32, v14);
              LODWORD(v18) = v14;
              goto LABEL_36;
            }
LABEL_31:
            uint64_t LhPAlphabetCore = phonmap_GetLhPAlphabetCore(MapTroughLng, a5, (uint64_t)a6);
          }
          else
          {
            uint64_t v41 = a1[9];
LABEL_34:
            uint64_t LhPAlphabetCore = phonmap_reader_MapsGetGetLhPAlphabetCore(v41, a5, (uint64_t)a6);
          }
          uint64_t v18 = LhPAlphabetCore;
          log_OutText(*(void *)(v29 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabet : End (%x)", v38, v39, v40, LhPAlphabetCore);
          if ((v18 & 0x80000000) == 0) {
            return v18;
          }
LABEL_36:
          if (((1 << v18) & 0x10001A) != 0) {
            unsigned int v42 = v18 & 0x1FFF | 0x8A702000;
          }
          else {
            unsigned int v42 = v18;
          }
          if (((unsigned __int16)v18 & 0x1FFFu) <= 0x14) {
            uint64_t v18 = v42;
          }
          else {
            uint64_t v18 = v18;
          }
          break;
        case 3:
          uint64_t MapTroughLng = a1[5];
          goto LABEL_31;
        default:
          goto LABEL_29;
      }
      return v18;
    }
    return 2322604039;
  }
  if (LH_stricmp(a4, "version")) {
    return 2322604039;
  }
  uint64_t v18 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v18 & 0x80000000) == 0)
  {
    uint64_t v19 = a1[2];
    log_OutText(*(void *)(v19 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabetInfo : Begin (%s)", v15, v16, v17, (uint64_t)a4);
    switch(a3)
    {
      case 0:
      case 2:
        int v23 = (unsigned __int16)*a5;
        unsigned int v24 = (const char *)(a1 + 43);
        goto LABEL_16;
      case 1:
      case 3:
        int v23 = (unsigned __int16)*a5;
        unsigned int v24 = (const char *)(a1 + 11);
LABEL_16:
        size_t v35 = cstdlib_strlen(v24);
        if (!v23)
        {
          *a5 = v35 + 1;
          goto LABEL_20;
        }
        if (v35 < (unsigned __int16)*a5)
        {
          cstdlib_strcpy(a6, v24);
LABEL_20:
          log_OutText(*(void *)(v19 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabetInfo : End (%x, %s)", v20, v21, v22, v18);
          return v18;
        }
        uint64_t v14 = 2322604041;
LABEL_22:
        log_OutText(*(void *)(v19 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPAlphabetInfo : End (%x, %s)", v20, v21, v22, v14);
        uint64_t v18 = v14;
        break;
      default:
        goto LABEL_22;
    }
  }
  return v18;
}

uint64_t phonmap_GetLhPSampleEx(void *a1, int a2, int a3, char *a4, uint64_t *a5, char *a6)
{
  uint64_t v6 = 2322604039;
  if (a4 && a5 && *a4)
  {
    uint64_t v12 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v12 & 0x80000000) != 0)
    {
      return v12;
    }
    else
    {
      uint64_t v16 = a1[2];
      log_OutText(*(void *)(v16 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP GetLhPSample : Begin (%s)", v13, v14, v15, (uint64_t)a4);
      switch(a3)
      {
        case 0:
          if (a6 && *a6)
          {
            uint64_t v20 = a1[8];
            goto LABEL_14;
          }
          uint64_t v24 = a1[8];
          goto LABEL_21;
        case 1:
          uint64_t MapTroughLng = a1[4];
          goto LABEL_18;
        case 2:
          if (a6 && *a6)
          {
            uint64_t v20 = a1[10];
LABEL_14:
            uint64_t MapTroughLng = phonmap_findMapTroughLng(v20, a6);
            if (!MapTroughLng)
            {
              uint64_t v6 = 2322604052;
LABEL_16:
              uint64_t v22 = *(void *)(v16 + 32);
              goto LABEL_24;
            }
LABEL_18:
            uint64_t v23 = stringmap_reader_Map(MapTroughLng, a4, a5);
          }
          else
          {
            uint64_t v24 = a1[10];
LABEL_21:
            uint64_t v23 = phonmap_reader_Maps(v24, 0, a4, a5);
          }
          uint64_t v6 = v23;
          uint64_t v22 = *(void *)(v16 + 32);
          if ((v6 & 0x80000000) == 0)
          {
            log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_GetLhPSample : End (%x, %s)", v17, v18, v19, v6);
            return v6;
          }
LABEL_24:
          log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_GetLhPSample : End (%x, %s)", v17, v18, v19, v6);
          if (((1 << v6) & 0x10001A) != 0) {
            unsigned int v25 = v6 & 0x1FFF | 0x8A702000;
          }
          else {
            unsigned int v25 = v6;
          }
          if (((unsigned __int16)v6 & 0x1FFFu) <= 0x14) {
            uint64_t v6 = v25;
          }
          else {
            uint64_t v6 = v6;
          }
          break;
        case 3:
          uint64_t MapTroughLng = a1[6];
          goto LABEL_18;
        default:
          goto LABEL_16;
      }
    }
  }
  return v6;
}

uint64_t phonmap_LhPToLhTtsSymEx(void *a1, int a2, int a3, char *a4, uint64_t *a5, char *a6)
{
  uint64_t v6 = 2322604039;
  if (a4 && a5 && *a4)
  {
    uint64_t v12 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    if ((v12 & 0x80000000) != 0)
    {
      return v12;
    }
    else
    {
      uint64_t v16 = a1[2];
      log_OutText(*(void *)(v16 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSym : Begin (%s)", v13, v14, v15, (uint64_t)a4);
      switch(a3)
      {
        case 0:
          if (a6 && *a6)
          {
            uint64_t v20 = a1[7];
            goto LABEL_14;
          }
          uint64_t v24 = a1[7];
          goto LABEL_21;
        case 1:
          uint64_t MapTroughLng = a1[3];
          goto LABEL_18;
        case 2:
          if (a6 && *a6)
          {
            uint64_t v20 = a1[9];
LABEL_14:
            uint64_t MapTroughLng = phonmap_findMapTroughLng(v20, a6);
            if (!MapTroughLng)
            {
              uint64_t v6 = 2322604052;
LABEL_16:
              uint64_t v22 = *(void *)(v16 + 32);
              goto LABEL_24;
            }
LABEL_18:
            uint64_t v23 = stringmap_reader_Map(MapTroughLng, a4, a5);
          }
          else
          {
            uint64_t v24 = a1[9];
LABEL_21:
            uint64_t v23 = phonmap_reader_Maps(v24, 0, a4, a5);
          }
          uint64_t v6 = v23;
          uint64_t v22 = *(void *)(v16 + 32);
          if ((v6 & 0x80000000) == 0)
          {
            log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSym : End (%x, %s)", v17, v18, v19, v6);
            return v6;
          }
LABEL_24:
          log_OutText(v22, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSym : End (%x, %s)", v17, v18, v19, v6);
          if (((1 << v6) & 0x10001A) != 0) {
            unsigned int v25 = v6 & 0x1FFF | 0x8A702000;
          }
          else {
            unsigned int v25 = v6;
          }
          if (((unsigned __int16)v6 & 0x1FFFu) <= 0x14) {
            uint64_t v6 = v25;
          }
          else {
            uint64_t v6 = v6;
          }
          break;
        case 3:
          uint64_t MapTroughLng = a1[5];
          goto LABEL_18;
        default:
          goto LABEL_16;
      }
    }
  }
  return v6;
}

uint64_t phonmap_LhPToLhPSequenceEx(void *a1, int a2, int a3, const char **a4, char *a5)
{
  uint64_t v5 = 2322604039;
  if (a4 && *a4)
  {
    uint64_t v10 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
    unsigned int v11 = v10;
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    if (a3)
    {
      if (a3 != 1) {
        return v5;
      }
      unsigned int v54 = v10;
      uint64_t v12 = 0;
      uint64_t v13 = a1[3];
    }
    else
    {
      uint64_t MapTroughLng = phonmap_findMapTroughLng(a1[7], a5);
      if (!MapTroughLng) {
        return 2322604052;
      }
      uint64_t v12 = MapTroughLng;
      unsigned int v54 = v11;
      if (a5)
      {
        if (*a5) {
          uint64_t v13 = MapTroughLng;
        }
        else {
          uint64_t v13 = 0;
        }
        if (*a5) {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
    }
    uint64_t v15 = a1[2];
    uint64_t v16 = *a4;
    size_t v17 = cstdlib_strlen(*a4);
    uint64_t v18 = (char *)*a4;
    log_OutText(*(void *)(v15 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhPSequence : Begin (%s)", v19, v20, v21, (uint64_t)*a4);
    uint64_t v61 = LhpuCreate(*(void *)(v15 + 8));
    if (v61)
    {
      uint64_t v26 = (char *)&v16[v17];
      __int16 v60 = 0;
      uint64_t v59 = 0;
      if (v18 < &v16[v17])
      {
        uint64_t v27 = "PHONMAP";
        uint64_t v28 = "Wrong L&H+ phoneme";
        uint64_t v55 = v13;
        do
        {
          if (*v18 == 18)
          {
            ++v18;
          }
          else if (LhplGetSymbol(v18, v61, (unsigned char *)&v60 + 1, &v60))
          {
            cstdlib_memmove(v18, v18 + 1, (unsigned __int16)((_WORD)v26 + ~(_WORD)v18));
            *--uint64_t v26 = 0;
            log_OutText(*(void *)(v15 + 32), (uint64_t)v27, 4, 0, (uint64_t)v28, v29, v30, v31, v53);
          }
          else
          {
            if (v13)
            {
              uint64_t v32 = v12;
              uint64_t v33 = (uint64_t)v28;
              uint64_t v34 = v27;
              uint64_t v59 = 0;
              uint64_t v35 = v13;
              uint64_t v36 = v61;
              Symbol = (char *)LhpuGetSymbol(v61);
              stringmap_reader_Map(v35, Symbol, &v59);
              if (v59 || (uint64_t v38 = (const char *)LhpuGetSymbol(v36), !cstdlib_strcmp(v38, "_")))
              {
                v18 += v60 + 1;
                uint64_t v13 = v55;
                uint64_t v27 = v34;
                uint64_t v28 = (const char *)v33;
              }
              else
              {
                cstdlib_memmove(v18, &v18[v60 + 1], (unsigned __int16)(~(v60 + (_WORD)v18) + (_WORD)v26));
                v26 += ~(unint64_t)v60;
                *uint64_t v26 = 0;
                uint64_t v27 = v34;
                uint64_t v39 = (uint64_t)v34;
                uint64_t v28 = (const char *)v33;
                log_OutText(*(void *)(v15 + 32), v39, 4, 0, v33, v40, v41, v42, v53);
                uint64_t v13 = v55;
              }
              uint64_t v12 = v32;
            }
            if (v12)
            {
              uint64_t v58 = 0;
              if ((ssftmap_IteratorOpen(a1[7], 0, 1, (uint64_t)&v58) & 0x80000000) == 0)
              {
                uint64_t v56 = 0;
                uint64_t v57 = 0;
                uint64_t v59 = 0;
                while ((ssftmap_IteratorNext(v58, &v57, &v56) & 0x80000000) == 0)
                {
                  uint64_t v59 = 0;
                  uint64_t v43 = v56;
                  v44 = (char *)LhpuGetSymbol(v61);
                  stringmap_reader_Map(v43, v44, &v59);
                  if (v59)
                  {
                    v18 += v60 + 1;
                    uint64_t v13 = v55;
                    goto LABEL_42;
                  }
                }
                uint64_t v13 = v55;
                if (!v59)
                {
                  uint64_t v45 = (const char *)LhpuGetSymbol(v61);
                  if (cstdlib_strcmp(v45, "_"))
                  {
                    cstdlib_memmove(v18, &v18[v60 + 1], (unsigned __int16)(~(v60 + (_WORD)v18) + (_WORD)v26));
                    v26 += ~(unint64_t)v60;
                    *uint64_t v26 = 0;
                    log_OutText(*(void *)(v15 + 32), (uint64_t)v27, 4, 0, (uint64_t)v28, v46, v47, v48, v53);
                  }
                }
LABEL_42:
                ssftmap_IteratorClose((uint64_t)v58);
              }
            }
          }
        }
        while (v18 < v26);
      }
      LhpuRemove(*(void **)(v15 + 8), &v61);
      log_OutText(*(void *)(v15 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhPSequence : End (%s)", v49, v50, v51, (uint64_t)*a4);
      return v54;
    }
    else
    {
      log_OutPublic(*(void *)(v15 + 32), (uint64_t)"PHONMAP", 29000, 0, v22, v23, v24, v25, v53);
      return 2322604042;
    }
  }
  return v5;
}

uint64_t phonmap_LhPToLhTtsSequenceWithCheckEx(void *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6, char *a7)
{
  LODWORD(result) = phonmap_LhPToLhTtsSequenceLng(a1, a2, a3, a4, a5, a6, a7);
  BOOL v8 = ((unsigned __int16)result & 0x1FFFu) > 0x14 || ((1 << result) & 0x10001A) == 0;
  unsigned int v9 = result & 0x1FFF | 0x8A702000;
  if (v8) {
    unsigned int v9 = result;
  }
  if ((int)result < 0) {
    return v9;
  }
  else {
    return result;
  }
}

uint64_t phonmap_loc_LoadData(_WORD **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  *(void *)v117 = 0;
  char v116 = 0;
  int v114 = 0;
  *(_DWORD *)__s1 = 0;
  __s2 = 0;
  *(void *)v113 = 0;
  v111 = 0;
  v109 = 0;
  v127[0] = 0;
  v126[0] = 0;
  v125[0] = 0;
  v110[0] = 0;
  unsigned int v11 = a1 + 3;
  uint64_t v10 = a1[3];
  if (v10)
  {
    stringmap_reader_ObjClose(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    *unsigned int v11 = 0;
  }
  uint64_t v12 = a1[4];
  if (v12)
  {
    stringmap_reader_ObjClose(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a1[4] = 0;
  }
  uint64_t v13 = a1[5];
  if (v13)
  {
    stringmap_reader_ObjClose(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a1[5] = 0;
  }
  uint64_t v14 = a1[6];
  if (v14)
  {
    stringmap_reader_ObjClose(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    a1[6] = 0;
  }
  v108 = 0;
  long long __b = 0u;
  long long v107 = 0u;
  uint64_t v16 = (uint64_t *)(a1 + 7);
  uint64_t v15 = (uint64_t)a1[7];
  if (v15)
  {
    *(void *)&long long __dst = 0;
    if ((ssftmap_IteratorOpen(v15, 0, 1, (uint64_t)&__dst) & 0x80000000) == 0)
    {
      v119[0] = 0;
      *(void *)__src = 0;
      while ((ssftmap_IteratorNext((uint64_t *)__dst, v119, __src) & 0x80000000) == 0)
        stringmap_reader_ObjClose(*(void **)__src, v17, v18, v19, v20, v21, v22, v23);
      ssftmap_IteratorClose(__dst);
    }
    ssftmap_ObjClose(*v16);
    *uint64_t v16 = 0;
  }
  cstdlib_memset(&__b, 0, 0x28uLL);
  *(void *)&long long __b = ssftmap_ElemCopyString;
  *((void *)&v107 + 1) = stringmap_loc_ElemCopyPtr_0;
  *((void *)&__b + 1) = ssftmap_ElemFreeString;
  v108 = stringmap_loc_ElemFreeNoOp_0;
  *(void *)&long long v107 = ssftmap_ElemCompareKeysString;
  uint64_t v24 = (void *)*((void *)a1[2] + 1);
  long long __dst = __b;
  long long v121 = v107;
  v122 = stringmap_loc_ElemFreeNoOp_0;
  uint64_t v25 = ssftmap_ObjOpen(v24, 0, &__dst, (uint64_t *)a1 + 7);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v27 = (uint64_t *)(a1 + 8);
  uint64_t v26 = (uint64_t)a1[8];
  if (v26)
  {
    *(void *)&long long __dst = 0;
    if ((ssftmap_IteratorOpen(v26, 0, 1, (uint64_t)&__dst) & 0x80000000) == 0)
    {
      v119[0] = 0;
      *(void *)__src = 0;
      while ((ssftmap_IteratorNext((uint64_t *)__dst, v119, __src) & 0x80000000) == 0)
        stringmap_reader_ObjClose(*(void **)__src, v28, v29, v30, v31, v32, v33, v34);
      ssftmap_IteratorClose(__dst);
    }
    ssftmap_ObjClose(*v27);
    *uint64_t v27 = 0;
  }
  uint64_t v35 = (void *)*((void *)a1[2] + 1);
  long long __dst = __b;
  long long v121 = v107;
  v122 = v108;
  uint64_t v25 = ssftmap_ObjOpen(v35, 0, &__dst, (uint64_t *)a1 + 8);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  int v37 = (uint64_t *)(a1 + 9);
  uint64_t v36 = (uint64_t)a1[9];
  if (v36)
  {
    *(void *)&long long __dst = 0;
    if ((ssftmap_IteratorOpen(v36, 0, 1, (uint64_t)&__dst) & 0x80000000) == 0)
    {
      v119[0] = 0;
      *(void *)__src = 0;
      while ((ssftmap_IteratorNext((uint64_t *)__dst, v119, __src) & 0x80000000) == 0)
        stringmap_reader_ObjClose(*(void **)__src, v38, v39, v40, v41, v42, v43, v44);
      ssftmap_IteratorClose(__dst);
    }
    ssftmap_ObjClose(*v37);
    *int v37 = 0;
  }
  uint64_t v45 = (void *)*((void *)a1[2] + 1);
  long long __dst = __b;
  long long v121 = v107;
  v122 = v108;
  uint64_t v25 = ssftmap_ObjOpen(v45, 0, &__dst, (uint64_t *)a1 + 9);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v47 = (uint64_t *)(a1 + 10);
  uint64_t v46 = (uint64_t)a1[10];
  if (v46)
  {
    *(void *)&long long __dst = 0;
    if ((ssftmap_IteratorOpen(v46, 0, 1, (uint64_t)&__dst) & 0x80000000) == 0)
    {
      v119[0] = 0;
      *(void *)__src = 0;
      while ((ssftmap_IteratorNext((uint64_t *)__dst, v119, __src) & 0x80000000) == 0)
        stringmap_reader_ObjClose(*(void **)__src, v48, v49, v50, v51, v52, v53, v54);
      ssftmap_IteratorClose(__dst);
    }
    ssftmap_ObjClose(*v47);
    *uint64_t v47 = 0;
  }
  uint64_t v55 = (void *)*((void *)a1[2] + 1);
  long long __dst = __b;
  long long v121 = v107;
  v122 = v108;
  uint64_t v25 = ssftmap_ObjOpen(v55, 0, &__dst, (uint64_t *)a1 + 10);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  v63 = a1[75];
  if (v63)
  {
    stringmap_reader_ObjClose(v63, v56, v57, v58, v59, v60, v61, v62);
    a1[75] = 0;
  }
  v64 = a1[76];
  if (v64)
  {
    stringmap_reader_ObjClose(v64, v56, v57, v58, v59, v60, v61, v62);
    a1[76] = 0;
  }
  if ((paramc_ParamGetStr(*((void *)a1[2] + 5), (uint64_t)"langcode", &__s2) & 0x80000000) != 0) {
    __s2 = "";
  }
  if ((paramc_ParamGetStr(*((void *)a1[2] + 5), (uint64_t)"voicemodel", &v111) & 0x80000000) != 0) {
    v111 = 0;
  }
  cstdlib_strcpy((char *)&__dst, "phonmap/");
  cstdlib_strcat((char *)&__dst, __s2);
  cstdlib_strcat((char *)&__dst, "/");
  cstdlib_strcat((char *)&__dst, a2);
  brokeraux_ComposeBrokerString((uint64_t)a1[2], (const char *)&__dst, 1, 1, __s2, a2, v111, v125, 0x80uLL);
  cstdlib_strcpy(v123, "phonmap_ipa/");
  cstdlib_strcat(v123, __s2);
  brokeraux_ComposeBrokerString((uint64_t)a1[2], v123, 1, 1, __s2, 0, 0, v126, 0x80uLL);
  cstdlib_strcpy(v124, (const char *)&__dst);
  brokeraux_ComposeBrokerString((uint64_t)a1[2], v124, 1, 1, __s2, a2, 0, v127, 0x80uLL);
  for (uint64_t i = 0; i != 3; ++i)
  {
    if (*((void *)a1[2] + 3))
    {
      int v66 = 2;
      goto LABEL_58;
    }
    for (j = &v125[128 * i]; *j == 47; ++j)
    {
      char *j = 95;
LABEL_57:
      ;
    }
    if (*j) {
      goto LABEL_57;
    }
    cstdlib_strcat(&v125[128 * i], ".dat");
    int v66 = 3;
LABEL_58:
    *((_DWORD *)&v119[32] + i + 1) = v66;
  }
  BOOL v68 = 0;
  int v103 = 0;
  uint64_t v69 = 0;
  BOOL v70 = 1;
  while (1)
  {
    v104 = &v125[128 * v69];
    uint64_t v71 = ssftriff_reader_ObjOpen(*a1, (uint64_t)a1[1], *((unsigned int *)&v119[32] + v69 + 1), v104, "PHMP", 1031, (uint64_t *)v117);
    if ((v71 & 0x80000000) != 0) {
      break;
    }
    int v72 = v103;
    if (!v69) {
      int v72 = 1;
    }
    int v103 = v72;
    while ((ssftriff_reader_OpenChunk(*(uint64_t *)v117, (__int32 *)__s1, (unsigned int *)&v114, v113) & 0x80000000) == 0)
    {
      if (cstdlib_strcmp(__s1, "LINF") && cstdlib_strcmp(__s1, "VINF"))
      {
        if (!cstdlib_strcmp(__s1, "LANG"))
        {
          uint64_t v80 = *(void *)v117;
          v81 = &v125[128 * v69];
          v82 = *a1;
          uint64_t v83 = (uint64_t)a1[1];
          v84 = v11;
LABEL_101:
          int v89 = stringmap_reader_ObjOpen(v82, v83, v81, v80, v84);
LABEL_102:
          LODWORD(v71) = v89;
          goto LABEL_103;
        }
        if (!cstdlib_strcmp(__s1, "LEXA"))
        {
          uint64_t v80 = *(void *)v117;
          v81 = &v125[128 * v69];
          v82 = *a1;
          uint64_t v83 = (uint64_t)a1[1];
          v84 = a1 + 4;
          goto LABEL_101;
        }
        if (!cstdlib_strcmp(__s1, "SLAN"))
        {
          uint64_t v80 = *(void *)v117;
          v81 = &v125[128 * v69];
          v82 = *a1;
          uint64_t v83 = (uint64_t)a1[1];
          v84 = a1 + 5;
          goto LABEL_101;
        }
        if (!cstdlib_strcmp(__s1, "SLEX"))
        {
          uint64_t v80 = *(void *)v117;
          v81 = &v125[128 * v69];
          v82 = *a1;
          uint64_t v83 = (uint64_t)a1[1];
          v84 = a1 + 6;
          goto LABEL_101;
        }
        if (cstdlib_strcmp(__s1, "VOIC"))
        {
          if (!cstdlib_strcmp(__s1, "VEXA"))
          {
            LODWORD(v71) = ssftmap_Find((uint64_t)a1[8], (uint64_t)v110, &v109);
            if ((v71 & 0x80000000) == 0) {
              goto LABEL_103;
            }
            int v89 = stringmap_reader_ObjOpen(*a1, (uint64_t)a1[1], v104, *(uint64_t *)v117, &v109);
            if (v89 < 0) {
              goto LABEL_102;
            }
            v92 = (uint64_t *)(a1 + 8);
            goto LABEL_123;
          }
          if (!cstdlib_strcmp(__s1, "SVOI"))
          {
            LODWORD(v71) = ssftmap_Find((uint64_t)a1[9], (uint64_t)v110, &v109);
            if ((v71 & 0x80000000) == 0) {
              goto LABEL_103;
            }
            int v89 = stringmap_reader_ObjOpen(*a1, (uint64_t)a1[1], v104, *(uint64_t *)v117, &v109);
            if (v89 < 0) {
              goto LABEL_102;
            }
            v92 = (uint64_t *)(a1 + 9);
            goto LABEL_123;
          }
          if (cstdlib_strcmp(__s1, "SVEX"))
          {
            if (cstdlib_strcmp(__s1, "IPA "))
            {
              if (cstdlib_strcmp(__s1, "SAPI")) {
                goto LABEL_103;
              }
              uint64_t v80 = *(void *)v117;
              v81 = &v125[128 * v69];
              v82 = *a1;
              uint64_t v83 = (uint64_t)a1[1];
              v84 = a1 + 76;
            }
            else
            {
              uint64_t v80 = *(void *)v117;
              v81 = &v125[128 * v69];
              v82 = *a1;
              uint64_t v83 = (uint64_t)a1[1];
              v84 = a1 + 75;
            }
            goto LABEL_101;
          }
          LODWORD(v71) = ssftmap_Find((uint64_t)a1[10], (uint64_t)v110, &v109);
          if ((v71 & 0x80000000) != 0)
          {
            int v89 = stringmap_reader_ObjOpen(*a1, (uint64_t)a1[1], v104, *(uint64_t *)v117, &v109);
            if (v89 < 0) {
              goto LABEL_102;
            }
            v92 = (uint64_t *)(a1 + 10);
            goto LABEL_123;
          }
        }
        else
        {
          if (!v110[0]) {
            cstdlib_strcpy(v110, __s2);
          }
          LODWORD(v71) = ssftmap_Find((uint64_t)a1[7], (uint64_t)v110, &v109);
          if ((v71 & 0x80000000) != 0)
          {
            int v89 = stringmap_reader_ObjOpen(*a1, (uint64_t)a1[1], v104, *(uint64_t *)v117, &v109);
            if (v89 < 0) {
              goto LABEL_102;
            }
            v92 = (uint64_t *)(a1 + 7);
LABEL_123:
            LODWORD(v71) = ssftmap_Insert(*v92, (uint64_t)v110, (uint64_t)v109);
            if ((v71 & 0x80000000) != 0) {
              stringmap_reader_ObjClose(v109, v93, v94, v95, v96, v97, v98, v99);
            }
          }
        }
      }
      else if ((v71 & 0x80000000) == 0)
      {
        unsigned int v85 = v114;
        if (v114)
        {
          unsigned int v86 = 0;
          do
          {
            __src[0] = 0;
            LOBYTE(v119[0]) = 0;
            unsigned int v105 = 256;
            LODWORD(v71) = ssftriff_reader_ReadStringZ(*(uint64_t *)v117, *(uint64_t *)v113, v85, v86, v119, &v105);
            if ((v71 & 0x80000000) == 0 && v86 < v114)
            {
              v86 += v105;
              unsigned int v105 = 256;
              LODWORD(v71) = ssftriff_reader_ReadStringZ(*(uint64_t *)v117, *(uint64_t *)v113, v114, v86, __src, &v105);
            }
            if ((v71 & 0x80000000) != 0) {
              break;
            }
            unsigned int v87 = v105;
            if (!LH_stricmp((char *)v119, "version"))
            {
              v88 = (char *)(a1 + 11);
              if ((v69 | 2) != 2) {
                v88 = (char *)(a1 + 43);
              }
              cstdlib_strcpy(v88, __src);
            }
            if (!cstdlib_strcmp(__s1, "VINF") && !LH_stricmp((char *)v119, "language")) {
              cstdlib_strcpy(v110, __src);
            }
            if (!cstdlib_strcmp(__s1, "VINF") && !LH_stricmp((char *)v119, "version")) {
              cstdlib_strcpy((char *)a1 + 344, __src);
            }
            v86 += v87;
            unsigned int v85 = v114;
          }
          while (v86 < v114);
        }
      }
LABEL_103:
      int v90 = ssftriff_reader_CloseChunk(*(uint64_t *)v117);
      if ((int)v71 > -1 && v90 < 0) {
        uint64_t v71 = v90;
      }
      else {
        uint64_t v71 = v71;
      }
    }
    if (*(void *)v117)
    {
      int v100 = ssftriff_reader_ObjClose(*(void **)v117, v73, v74, v75, v76, v77, v78, v79);
      *(void *)v117 = 0;
      if ((int)v71 > -1 && v100 < 0) {
        uint64_t v71 = v100;
      }
      else {
        uint64_t v71 = v71;
      }
    }
LABEL_135:
    if (++v69 != 3)
    {
      BOOL v68 = v103 != 0;
      BOOL v70 = v69 != 2;
      if (v69 != 2 || !v103) {
        continue;
      }
    }
    return v71;
  }
  if (v70 || v68)
  {
    uint64_t v71 = 0;
    goto LABEL_135;
  }
  return v71;
}

uint64_t stringmap_loc_ElemCopyPtr_0(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t phonmap_loc_GetStrMap(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  unsigned int v25 = 0;
  uint64_t v24 = 0;
  *a4 = 0;
  cstdlib_strcpy(__dst, a2);
  cstdlib_strcat(__dst, "/");
  cstdlib_strcat(__dst, a3);
  uint64_t v10 = 0;
  if ((ssftmap_Find(*(void *)(a1 + 616), (uint64_t)__dst, a4) & 0x80000000) != 0)
  {
    uint64_t Chunk = ssftriff_reader_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), 2 * (a5 != 0), a2, "PHMP", 1031, (uint64_t *)&v26);
    if ((Chunk & 0x80000000) != 0
      || (uint64_t Chunk = ssftriff_reader_FindChunk((uint64_t)v26, a3, 1, &v25, &v24), (Chunk & 0x80000000) != 0)
      || (uint64_t Chunk = stringmap_reader_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a2, (uint64_t)v26, a4),
          (Chunk & 0x80000000) != 0))
    {
      uint64_t v10 = Chunk;
    }
    else
    {
      uint64_t v10 = ssftmap_Insert(*(void *)(a1 + 616), (uint64_t)__dst, *a4);
      if ((v10 & 0x80000000) != 0)
      {
        stringmap_reader_ObjClose((void *)*a4, v12, v13, v14, v15, v16, v17, v18);
        *a4 = 0;
      }
    }
    if (v24)
    {
      int v19 = ssftriff_reader_CloseChunk((uint64_t)v26);
      if (v19 >= 0 || (int)v10 <= -1) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = v19;
      }
    }
    if (v26)
    {
      int v21 = ssftriff_reader_ObjClose(v26, v12, v13, v14, v15, v16, v17, v18);
      if (v21 >= 0 || (int)v10 <= -1) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = v21;
      }
    }
    if ((v10 & 0x80000000) == 0)
    {
      if (*a4) {
        return v10;
      }
      else {
        return 2322604033;
      }
    }
  }
  return v10;
}

uint64_t phonmap_findMapTroughLng(uint64_t result, char *a2)
{
  if (result)
  {
    uint64_t v5 = 0;
    if ((ssftmap_IteratorOpen(result, 0, 1, (uint64_t)&v5) & 0x80000000) == 0)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      while ((ssftmap_IteratorNext(v5, &v4, &v3) & 0x80000000) == 0)
      {
        if (!a2 || !LH_stricmp(v4, a2))
        {
          ssftmap_IteratorClose((uint64_t)v5);
          return v3;
        }
      }
      ssftmap_IteratorClose((uint64_t)v5);
    }
    return 0;
  }
  return result;
}

uint64_t phonmap_reader_Maps(uint64_t a1, int a2, char *a3, uint64_t *a4)
{
  uint64_t v12 = 0;
  uint64_t v4 = 2322604052;
  if (!a1) {
    return 2322604039;
  }
  if ((ssftmap_IteratorOpen(a1, 0, 1, (uint64_t)&v12) & 0x80000000) == 0)
  {
    *(void *)uint64_t v10 = 0;
    uint64_t v11 = 0;
    while ((ssftmap_IteratorNext(v12, &v11, v10) & 0x80000000) == 0)
    {
      if (a2) {
        uint64_t v8 = stringmap_reader_ReverseMap(*(uint64_t *)v10, a3, a4);
      }
      else {
        uint64_t v8 = stringmap_reader_Map(*(uint64_t *)v10, a3, a4);
      }
      uint64_t v4 = v8;
      if ((v8 & 0x80000000) == 0)
      {
        uint64_t v4 = 0;
        break;
      }
    }
    ssftmap_IteratorClose((uint64_t)v12);
  }
  return v4;
}

uint64_t phonmap_LhPToLhTtsSequenceLng(void *a1, int a2, int a3, const char *a4, unsigned int a5, char *a6, char *a7)
{
  uint64_t v203 = *MEMORY[0x263EF8340];
  uint64_t v7 = 2322604039;
  uint64_t v192 = 0;
  if (!a4) {
    return 2322604039;
  }
  uint64_t v8 = a6;
  if (!a6 || !a5 || !*a4) {
    return 2322604039;
  }
  uint64_t StrMap = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((StrMap & 0x80000000) != 0) {
    return StrMap;
  }
  uint64_t v187 = a1[2];
  if (a3)
  {
    if (a3 == 1)
    {
      if (a7 && *a7)
      {
        cstdlib_strcpy(&__dst, "phonmap/");
        cstdlib_strcat(&__dst, a7);
        uint64_t StrMap = phonmap_loc_GetStrMap((uint64_t)a1, &__dst, "LANG", &v192, 0);
        if ((StrMap & 0x80000000) != 0) {
          return StrMap;
        }
        uint64_t v19 = v192;
      }
      else
      {
        uint64_t v19 = a1[3];
        uint64_t v192 = v19;
      }
      uint64_t v181 = v19;
      if (v19)
      {
LABEL_20:
        if (!*a4) {
          goto LABEL_189;
        }
        uint64_t v22 = a4;
        uint64_t v7 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
        if ((v7 & 0x80000000) != 0) {
          goto LABEL_189;
        }
        uint64_t v23 = a1[2];
        int64_t v24 = cstdlib_strlen(v22);
        *uint64_t v8 = 0;
        log_OutText(*(void *)(v23 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : Begin (%s)", v25, v26, v27, (uint64_t)v22);
        __src = (char *)LhpuCreate(*(void *)(v23 + 8));
        if (__src)
        {
          uint64_t v171 = v23;
          LOBYTE(v193) = 0;
          LOBYTE(v200) = 0;
          __s = 0;
          if (v24 < 1) {
            goto LABEL_186;
          }
          uint64_t v32 = 0;
          uint64_t v33 = &v22[v24];
          size_t v179 = a5;
          uint64_t v34 = ")";
          v173 = &v22[v24];
          v183 = v8;
          while (1)
          {
            uint64_t v188 = v7;
            uint64_t v35 = __src;
            int Symbol = LhplGetSymbol(v22, (uint64_t)__src, &v193, &v200);
            if (Symbol)
            {
              if (Symbol == 1)
              {
                uint64_t v7 = v188;
LABEL_186:
                LhpuRemove(*(void **)(v171 + 8), (uint64_t *)&__src);
                log_OutText(*(void *)(v171 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : End (%x, %s)", v162, v163, v164, v7);
                if (v7 == 1)
                {
                  uint64_t v160 = *(void *)(v171 + 32);
LABEL_188:
                  log_OutText(v160, (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Wrong L&H+ phoneme", v15, v16, v17, v169);
                  uint64_t v7 = 1;
                }
                goto LABEL_189;
              }
              int v37 = 0;
              uint64_t v38 = 1;
              uint64_t v7 = v188;
            }
            else
            {
              __s1[0] = 0;
              __s = 0;
              uint64_t v39 = (char *)LhpuGetSymbol(v35);
              stringmap_reader_Map(v181, v39, (uint64_t *)&__s);
              if (__s)
              {
                if (LhpuHasDurSpec((uint64_t)v35) || LhpuGetcBp((uint64_t)v35))
                {
                  uint64_t v40 = cstdlib_strchr(__s, 124);
                  if (v40)
                  {
                    int v41 = 0;
                    do
                    {
                      unsigned __int8 v42 = v41;
                      uint64_t v43 = &__s[v41++];
                    }
                    while (v43 < v40);
                  }
                  else
                  {
                    unsigned __int8 v42 = cstdlib_strlen(__s);
                  }
                  uint64_t v177 = v32;
                  if (v42 < 2u)
                  {
                    cstdlib_strcpy(__s1, __s);
                    if (LhpuHasDurSpec((uint64_t)v35))
                    {
                      signed int DurValue = LhpuGetDurValue((uint64_t)v35);
                      __s2[0] = 91;
                      BOOL IsAbs = LhpuDurSpecIsAbs((uint64_t)v35);
                      uint64_t v58 = &__s2[1];
                      if (!IsAbs)
                      {
                        if (DurValue < 1)
                        {
                          uint64_t v59 = 1;
                        }
                        else
                        {
                          __s2[1] = 43;
                          uint64_t v59 = 2;
                        }
                        uint64_t v58 = &__s2[v59];
                      }
                      LH_itoa(DurValue, v58, 0xAu);
                      cstdlib_strcat(__s1, __s2);
                      int v66 = v34;
                      if (LhpuGetcBp((uint64_t)v35))
                      {
                        uint64_t v77 = 0;
                        unint64_t v78 = 0;
                        do
                        {
                          __s2[0] = 40;
                          uint64_t v79 = LhpuGetpBp((uint64_t)v35);
                          LH_itoa(*(__int16 *)(v79 + v77 + 2), &__s2[1], 0xAu);
                          cstdlib_strcat(__s2, ",");
                          unsigned int v80 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v35) + v77);
                          size_t v81 = cstdlib_strlen(__s2);
                          LH_itoa(v80, &__s2[v81], 0xAu);
                          cstdlib_strcat(__s2, v34);
                          cstdlib_strcat(__s1, __s2);
                          ++v78;
                          v77 += 4;
                        }
                        while (v78 < LhpuGetcBp((uint64_t)v35));
                      }
                    }
                    else
                    {
                      cstdlib_strcat(__s1, "[");
                      int v66 = v34;
                      if (LhpuGetcBp((uint64_t)v35))
                      {
                        uint64_t v67 = 0;
                        unint64_t v68 = 0;
                        do
                        {
                          __s2[0] = 40;
                          uint64_t v69 = LhpuGetpBp((uint64_t)v35);
                          LH_itoa(*(__int16 *)(v69 + v67 + 2), &__s2[1], 0xAu);
                          cstdlib_strcat(__s2, ",");
                          unsigned int v70 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v35) + v67);
                          size_t v71 = cstdlib_strlen(__s2);
                          LH_itoa(v70, &__s2[v71], 0xAu);
                          cstdlib_strcat(__s2, v34);
                          cstdlib_strcat(__s1, __s2);
                          ++v68;
                          v67 += 4;
                        }
                        while (v68 < LhpuGetcBp((uint64_t)v35));
                      }
                    }
                    cstdlib_strcat(__s1, "]");
                    uint64_t v8 = v183;
                    uint64_t v7 = v188;
                    uint64_t v34 = v66;
                    uint64_t v32 = v177;
                    uint64_t v33 = v173;
                  }
                  else
                  {
                    uint64_t v44 = 0;
                    uint64_t v201 = 0;
                    uint64_t v45 = v42;
                    do
                    {
                      if (v40)
                      {
                        uint64_t v46 = (unsigned __int8 *)(v40 + 1);
                        __s1[v44 - 8] = cstdlib_atoi(v46);
                        uint64_t v40 = cstdlib_strchr((char *)v46, 58);
                      }
                      ++v44;
                    }
                    while (v45 != v44);
                    uint64_t v190 = v45;
                    uint64_t v47 = __src;
                    v175 = v22;
                    if (LhpuHasDurSpec((uint64_t)__src))
                    {
                      if (LhpuDurSpecIsAbs((uint64_t)v47))
                      {
                        uint64_t v48 = 0;
                        LODWORD(v49) = 0;
                        unsigned __int16 v50 = 0;
                        do
                        {
                          *(_WORD *)__s2 = __s[v48];
                          cstdlib_strcat(__s1, __s2);
                          int v51 = (int)(__s1[v48 - 8] * LhpuGetDurValue((uint64_t)v47) + 50)
                              / 100;
                          __s2[0] = 91;
                          LH_itoa((unsigned __int16)v51, &__s2[1], 0xAu);
                          cstdlib_strcat(__s1, __s2);
                          if (v49 < LhpuGetcBp((uint64_t)v47))
                          {
                            uint64_t v52 = 4 * v49;
                            unint64_t v49 = v49;
                            do
                            {
                              if ((unsigned __int16)v51 + v50 < *(__int16 *)(LhpuGetpBp((uint64_t)v47) + v52 + 2)) {
                                break;
                              }
                              __s2[0] = 40;
                              uint64_t v53 = LhpuGetpBp((uint64_t)v47);
                              LH_itoa(*(__int16 *)(v53 + v52 + 2) - v50, &__s2[1], 0xAu);
                              cstdlib_strcat(__s2, ",");
                              unsigned int v54 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v47) + v52);
                              size_t v55 = cstdlib_strlen(__s2);
                              LH_itoa(v54, &__s2[v55], 0xAu);
                              cstdlib_strcat(__s2, ")");
                              cstdlib_strcat(__s1, __s2);
                              ++v49;
                              v52 += 4;
                            }
                            while (v49 < LhpuGetcBp((uint64_t)v47));
                            LODWORD(v49) = v49;
                            uint64_t v8 = v183;
                          }
                          cstdlib_strcat(__s1, "]");
                          v50 += v51;
                          ++v48;
                        }
                        while (v48 != v190);
                      }
                      else
                      {
                        *(_WORD *)__s2 = *__s;
                        cstdlib_strcat(__s1, __s2);
                        __s2[0] = 91;
                        int v73 = LhpuGetDurValue((uint64_t)v47);
                        uint64_t v74 = 1374389535 * (v201 * v73 + 50);
                        int v75 = (v74 >> 37) + ((unint64_t)v74 >> 63);
                        if (v75 << 16 < 1)
                        {
                          uint64_t v76 = 1;
                        }
                        else
                        {
                          __s2[1] = 43;
                          uint64_t v76 = 2;
                        }
                        LH_itoa((__int16)v75, &__s2[v76], 0xAu);
                        cstdlib_strcat(__s1, __s2);
                        if (LhpuGetcBp((uint64_t)v47))
                        {
                          uint64_t v82 = 0;
                          unint64_t v83 = 0;
                          do
                          {
                            __s2[0] = 40;
                            uint64_t v84 = LhpuGetpBp((uint64_t)v47);
                            LH_itoa(*(__int16 *)(v84 + v82 + 2), &__s2[1], 0xAu);
                            cstdlib_strcat(__s2, ",");
                            unsigned int v85 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v47) + v82);
                            size_t v86 = cstdlib_strlen(__s2);
                            LH_itoa(v85, &__s2[v86], 0xAu);
                            cstdlib_strcat(__s2, ")");
                            cstdlib_strcat(__s1, __s2);
                            ++v83;
                            v82 += 4;
                          }
                          while (v83 < LhpuGetcBp((uint64_t)v47));
                        }
                        cstdlib_strcat(__s1, "]");
                        uint64_t v87 = 1;
                        uint64_t v8 = v183;
                        do
                        {
                          *(_WORD *)__s2 = __s[v87];
                          cstdlib_strcat(__s1, __s2);
                          __s2[0] = 91;
                          uint64_t v88 = 1374389535
                              * (int)(__s1[v87 - 8] * LhpuGetDurValue((uint64_t)v47) + 50);
                          int v89 = (v88 >> 37) + ((unint64_t)v88 >> 63);
                          if (v89 << 16 < 1)
                          {
                            uint64_t v90 = 1;
                          }
                          else
                          {
                            __s2[1] = 43;
                            uint64_t v90 = 2;
                          }
                          LH_itoa((__int16)v89, &__s2[v90], 0xAu);
                          cstdlib_strcat(__s1, __s2);
                          cstdlib_strcat(__s1, "]");
                          ++v87;
                        }
                        while (v190 != v87);
                      }
                    }
                    else
                    {
                      *(_WORD *)__s2 = *__s;
                      cstdlib_strcat(__s1, __s2);
                      cstdlib_strcat(__s1, "[");
                      if (LhpuGetcBp((uint64_t)v47))
                      {
                        uint64_t v60 = 0;
                        unint64_t v61 = 0;
                        do
                        {
                          __s2[0] = 40;
                          uint64_t v62 = LhpuGetpBp((uint64_t)v47);
                          LH_itoa(*(__int16 *)(v62 + v60 + 2), &__s2[1], 0xAu);
                          cstdlib_strcat(__s2, ",");
                          unsigned int v63 = *(unsigned __int16 *)(LhpuGetpBp((uint64_t)v47) + v60);
                          size_t v64 = cstdlib_strlen(__s2);
                          LH_itoa(v63, &__s2[v64], 0xAu);
                          cstdlib_strcat(__s2, v34);
                          cstdlib_strcat(__s1, __s2);
                          ++v61;
                          v60 += 4;
                        }
                        while (v61 < LhpuGetcBp((uint64_t)v47));
                      }
                      cstdlib_strcat(__s1, "]");
                      uint64_t v65 = 1;
                      uint64_t v8 = v183;
                      do
                      {
                        *(_WORD *)__s2 = __s[v65];
                        cstdlib_strcat(__s1, __s2);
                        ++v65;
                      }
                      while (v190 != v65);
                    }
                    uint64_t v22 = v175;
                    uint64_t v32 = v177;
                    uint64_t v7 = v188;
                    uint64_t v33 = v173;
                    uint64_t v34 = ")";
                  }
                }
                else
                {
                  cstdlib_strcpy(__s1, __s);
                  int v72 = cstdlib_strchr(__s1, 124);
                  if (v72) {
                    *int v72 = 0;
                  }
                  uint64_t v7 = v188;
                }
              }
              else
              {
                uint64_t v7 = 1;
              }
              if (cstdlib_strlen(__s1) + (unsigned __int16)v32 >= v179)
              {
                int v37 = 1;
              }
              else
              {
                cstdlib_strcat(v8, __s1);
                int v91 = cstdlib_strlen(__s1);
                int v37 = 0;
                uint64_t v32 = (v32 + v91);
              }
              uint64_t v38 = v200 + 1;
            }
            if (!v37)
            {
              v22 += v38;
              if (v22 < v33) {
                continue;
              }
            }
            goto LABEL_186;
          }
        }
        uint64_t v161 = *(void *)(v23 + 32);
LABEL_184:
        log_OutPublic(v161, (uint64_t)"PHONMAP", 29000, 0, v28, v29, v30, v31, v168);
        uint64_t v7 = 2322604042;
        goto LABEL_189;
      }
      goto LABEL_190;
    }
    return 2322604039;
  }
  uint64_t MapTroughLng = phonmap_findMapTroughLng(a1[7], a7);
  if (!MapTroughLng) {
    return 2322604052;
  }
  if (a7 && *a7)
  {
    uint64_t v181 = MapTroughLng;
    uint64_t v192 = MapTroughLng;
    goto LABEL_20;
  }
  if (!*a4) {
    goto LABEL_189;
  }
  v92 = a4;
  uint64_t v180 = a1[7];
  uint64_t v7 = safeh_HandleCheck((uint64_t)a1, a2, 29348, 624);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_189;
  }
  uint64_t v93 = a1[2];
  int64_t v94 = cstdlib_strlen(a4);
  *uint64_t v8 = 0;
  log_OutText(*(void *)(v93 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : Begin (%s)", v95, v96, v97, (uint64_t)a4);
  *(void *)__s2 = LhpuCreate(*(void *)(v93 + 8));
  if (!*(void *)__s2)
  {
    uint64_t v161 = *(void *)(v93 + 32);
    goto LABEL_184;
  }
  __int16 v196 = 0;
  __src = 0;
  if (v94 >= 1)
  {
    v184 = v8;
    v185 = &a4[v94];
    size_t v186 = a5;
    uint64_t v98 = 0;
    uint64_t v172 = v93;
    do
    {
      int v99 = LhplGetSymbol(v92, *(uint64_t *)__s2, (unsigned char *)&v196 + 1, &v196);
      if (v99)
      {
        if (v99 == 1) {
          break;
        }
        int v100 = 0;
        ++v92;
      }
      else
      {
        __s = 0;
        if ((ssftmap_IteratorOpen(v180, 0, 1, (uint64_t)&__s) & 0x80000000) != 0)
        {
          int v100 = 0;
        }
        else
        {
          uint64_t v201 = 0;
          uint64_t v193 = 0;
          __src = 0;
          if ((ssftmap_IteratorNext((uint64_t *)__s, &v201, &v193) & 0x80000000) != 0)
          {
            int v100 = 0;
          }
          else
          {
            uint64_t v189 = v7;
            uint64_t v101 = *(void *)__s2;
            __s1[0] = 0;
            __src = 0;
            uint64_t v102 = v193;
            int v103 = (char *)LhpuGetSymbol(*(void *)__s2);
            stringmap_reader_Map(v102, v103, (uint64_t *)&__src);
            if (__src)
            {
              int v100 = 0;
LABEL_115:
              if (LhpuHasDurSpec(v101) || LhpuGetcBp(v101))
              {
                int v174 = v100;
                v106 = cstdlib_strchr(__src, 124);
                if (v106)
                {
                  int v107 = 0;
                  do
                  {
                    unsigned __int8 v108 = v107;
                    v109 = &__src[v107++];
                  }
                  while (v109 < v106);
                }
                else
                {
                  unsigned __int8 v108 = cstdlib_strlen(__src);
                }
                if (v108 < 2u)
                {
                  cstdlib_strcpy(__s1, __src);
                  if (LhpuHasDurSpec(v101))
                  {
                    signed int v123 = LhpuGetDurValue(v101);
                    char __dst = 91;
                    BOOL v124 = LhpuDurSpecIsAbs(v101);
                    v125 = v198;
                    if (!v124)
                    {
                      if (v123 < 1)
                      {
                        uint64_t v126 = 1;
                      }
                      else
                      {
                        v198[0] = 43;
                        uint64_t v126 = 2;
                      }
                      v125 = &v198[v126 - 1];
                    }
                    LH_itoa(v123, v125, 0xAu);
                    cstdlib_strcat(__s1, &__dst);
                    if (LhpuGetcBp(v101))
                    {
                      uint64_t v143 = 0;
                      unint64_t v144 = 0;
                      do
                      {
                        char __dst = 40;
                        uint64_t v145 = LhpuGetpBp(v101);
                        LH_itoa(*(__int16 *)(v145 + v143 + 2), v198, 0xAu);
                        cstdlib_strcat(&__dst, ",");
                        unsigned int v146 = *(unsigned __int16 *)(LhpuGetpBp(v101) + v143);
                        size_t v147 = cstdlib_strlen(&__dst);
                        LH_itoa(v146, &v198[v147 - 1], 0xAu);
                        cstdlib_strcat(&__dst, ")");
                        cstdlib_strcat(__s1, &__dst);
                        ++v144;
                        v143 += 4;
                      }
                      while (v144 < LhpuGetcBp(v101));
                    }
                  }
                  else
                  {
                    cstdlib_strcat(__s1, "[");
                    if (LhpuGetcBp(v101))
                    {
                      uint64_t v133 = 0;
                      unint64_t v134 = 0;
                      do
                      {
                        char __dst = 40;
                        uint64_t v135 = LhpuGetpBp(v101);
                        LH_itoa(*(__int16 *)(v135 + v133 + 2), v198, 0xAu);
                        cstdlib_strcat(&__dst, ",");
                        unsigned int v136 = *(unsigned __int16 *)(LhpuGetpBp(v101) + v133);
                        size_t v137 = cstdlib_strlen(&__dst);
                        LH_itoa(v136, &v198[v137 - 1], 0xAu);
                        cstdlib_strcat(&__dst, ")");
                        cstdlib_strcat(__s1, &__dst);
                        ++v134;
                        v133 += 4;
                      }
                      while (v134 < LhpuGetcBp(v101));
                    }
                  }
                  cstdlib_strcat(__s1, "]");
                  uint64_t v8 = v184;
                  int v100 = v174;
                  uint64_t v93 = v172;
                }
                else
                {
                  uint64_t v110 = 0;
                  uint64_t v200 = 0;
                  uint64_t v111 = v108;
                  do
                  {
                    if (v106)
                    {
                      v112 = (unsigned __int8 *)(v106 + 1);
                      *((unsigned char *)&v200 + v110) = cstdlib_atoi(v112);
                      v106 = cstdlib_strchr((char *)v112, 58);
                    }
                    ++v110;
                  }
                  while (v111 != v110);
                  uint64_t v113 = *(void *)__s2;
                  uint64_t v191 = v111;
                  v176 = v92;
                  if (LhpuHasDurSpec(*(uint64_t *)__s2))
                  {
                    uint64_t v178 = v98;
                    if (LhpuDurSpecIsAbs(v113))
                    {
                      uint64_t v114 = 0;
                      LODWORD(v115) = 0;
                      unsigned __int16 v116 = 0;
                      do
                      {
                        char __dst = __src[v114];
                        v198[0] = 0;
                        cstdlib_strcat(__s1, &__dst);
                        int v117 = (int)(*((unsigned __int8 *)&v200 + v114) * LhpuGetDurValue(v113) + 50)
                             / 100;
                        char __dst = 91;
                        LH_itoa((unsigned __int16)v117, v198, 0xAu);
                        cstdlib_strcat(__s1, &__dst);
                        if (v115 < LhpuGetcBp(v113))
                        {
                          __int16 v182 = v117;
                          int v118 = (unsigned __int16)v117 + v116;
                          uint64_t v119 = 4 * v115;
                          unint64_t v115 = v115;
                          do
                          {
                            if (v118 < *(__int16 *)(LhpuGetpBp(v113) + v119 + 2)) {
                              break;
                            }
                            char __dst = 40;
                            uint64_t v120 = LhpuGetpBp(v113);
                            LH_itoa(*(__int16 *)(v120 + v119 + 2) - v116, v198, 0xAu);
                            cstdlib_strcat(&__dst, ",");
                            unsigned int v121 = *(unsigned __int16 *)(LhpuGetpBp(v113) + v119);
                            size_t v122 = cstdlib_strlen(&__dst);
                            LH_itoa(v121, &v198[v122 - 1], 0xAu);
                            cstdlib_strcat(&__dst, ")");
                            cstdlib_strcat(__s1, &__dst);
                            ++v115;
                            v119 += 4;
                          }
                          while (v115 < LhpuGetcBp(v113));
                          LODWORD(v115) = v115;
                          uint64_t v98 = v178;
                          LOWORD(v117) = v182;
                        }
                        cstdlib_strcat(__s1, "]");
                        v116 += v117;
                        ++v114;
                      }
                      while (v114 != v191);
                    }
                    else
                    {
                      char __dst = *__src;
                      v198[0] = 0;
                      cstdlib_strcat(__s1, &__dst);
                      char __dst = 91;
                      int v139 = LhpuGetDurValue(v113);
                      uint64_t v140 = 1374389535 * (v200 * v139 + 50);
                      int v141 = (v140 >> 37) + ((unint64_t)v140 >> 63);
                      if (v141 << 16 < 1)
                      {
                        uint64_t v142 = 1;
                      }
                      else
                      {
                        v198[0] = 43;
                        uint64_t v142 = 2;
                      }
                      LH_itoa((__int16)v141, &v198[v142 - 1], 0xAu);
                      cstdlib_strcat(__s1, &__dst);
                      if (LhpuGetcBp(v113))
                      {
                        uint64_t v148 = 0;
                        unint64_t v149 = 0;
                        do
                        {
                          char __dst = 40;
                          uint64_t v150 = LhpuGetpBp(v113);
                          LH_itoa(*(__int16 *)(v150 + v148 + 2), v198, 0xAu);
                          cstdlib_strcat(&__dst, ",");
                          unsigned int v151 = *(unsigned __int16 *)(LhpuGetpBp(v113) + v148);
                          size_t v152 = cstdlib_strlen(&__dst);
                          LH_itoa(v151, &v198[v152 - 1], 0xAu);
                          cstdlib_strcat(&__dst, ")");
                          cstdlib_strcat(__s1, &__dst);
                          ++v149;
                          v148 += 4;
                        }
                        while (v149 < LhpuGetcBp(v113));
                      }
                      cstdlib_strcat(__s1, "]");
                      uint64_t v153 = 1;
                      do
                      {
                        char __dst = __src[v153];
                        v198[0] = 0;
                        cstdlib_strcat(__s1, &__dst);
                        char __dst = 91;
                        uint64_t v154 = 1374389535
                             * (int)(*((unsigned __int8 *)&v200 + v153) * LhpuGetDurValue(v113) + 50);
                        int v155 = (v154 >> 37) + ((unint64_t)v154 >> 63);
                        if (v155 << 16 < 1)
                        {
                          uint64_t v156 = 1;
                        }
                        else
                        {
                          v198[0] = 43;
                          uint64_t v156 = 2;
                        }
                        LH_itoa((__int16)v155, &v198[v156 - 1], 0xAu);
                        cstdlib_strcat(__s1, &__dst);
                        cstdlib_strcat(__s1, "]");
                        ++v153;
                      }
                      while (v191 != v153);
                    }
                  }
                  else
                  {
                    char __dst = *__src;
                    v198[0] = 0;
                    cstdlib_strcat(__s1, &__dst);
                    cstdlib_strcat(__s1, "[");
                    if (LhpuGetcBp(v113))
                    {
                      uint64_t v127 = 0;
                      unint64_t v128 = 0;
                      do
                      {
                        char __dst = 40;
                        uint64_t v129 = LhpuGetpBp(v113);
                        LH_itoa(*(__int16 *)(v129 + v127 + 2), v198, 0xAu);
                        cstdlib_strcat(&__dst, ",");
                        unsigned int v130 = *(unsigned __int16 *)(LhpuGetpBp(v113) + v127);
                        size_t v131 = cstdlib_strlen(&__dst);
                        LH_itoa(v130, &v198[v131 - 1], 0xAu);
                        cstdlib_strcat(&__dst, ")");
                        cstdlib_strcat(__s1, &__dst);
                        ++v128;
                        v127 += 4;
                      }
                      while (v128 < LhpuGetcBp(v113));
                    }
                    cstdlib_strcat(__s1, "]");
                    uint64_t v132 = 1;
                    do
                    {
                      char __dst = __src[v132];
                      v198[0] = 0;
                      cstdlib_strcat(__s1, &__dst);
                      ++v132;
                    }
                    while (v111 != v132);
                  }
                  uint64_t v8 = v184;
                  v92 = v176;
                  uint64_t v93 = v172;
                  int v100 = v174;
                }
              }
              else
              {
                cstdlib_strcpy(__s1, __src);
                v138 = cstdlib_strchr(__s1, 124);
                if (v138) {
                  char *v138 = 0;
                }
              }
              uint64_t v7 = v189;
              if (cstdlib_strlen(__s1) + (unsigned __int16)v98 >= v186)
              {
                int v100 = 1;
              }
              else
              {
                cstdlib_strcat(v8, __s1);
                uint64_t v98 = v98 + cstdlib_strlen(__s1);
              }
              v92 += v196 + 1;
            }
            else
            {
              int v100 = 0;
              while (1)
              {
                if (cstdlib_strlen(__s1) + (unsigned __int16)v98 >= v186)
                {
                  int v100 = 1;
                }
                else
                {
                  cstdlib_strcat(v8, __s1);
                  uint64_t v98 = v98 + cstdlib_strlen(__s1);
                }
                v92 += v196 + 1;
                if ((ssftmap_IteratorNext((uint64_t *)__s, &v201, &v193) & 0x80000000) != 0) {
                  break;
                }
                __s1[0] = 0;
                __src = 0;
                uint64_t v104 = v193;
                unsigned int v105 = (char *)LhpuGetSymbol(v101);
                stringmap_reader_Map(v104, v105, (uint64_t *)&__src);
                if (__src)
                {
                  uint64_t v189 = 1;
                  goto LABEL_115;
                }
              }
              uint64_t v7 = 1;
            }
          }
          ssftmap_IteratorClose((uint64_t)__s);
        }
      }
    }
    while (!v100 && v92 < v185);
  }
  LhpuRemove(*(void **)(v93 + 8), (uint64_t *)__s2);
  log_OutText(*(void *)(v93 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP phonmap_LhPToLhTtsSequenceLngOneMap : End (%x, %s)", v157, v158, v159, v7);
  if (v7 == 1)
  {
    uint64_t v160 = *(void *)(v93 + 32);
    goto LABEL_188;
  }
LABEL_189:
  uint64_t StrMap = v7;
LABEL_190:
  log_OutText(*(void *)(v187 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP LhPToLhTtsSequence : End (%x, %s)", v15, v16, v17, StrMap);
  if (StrMap == 1)
  {
    log_OutText(*(void *)(v187 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Wrong L&H+ phoneme", v165, v166, v167, v170);
    return 1;
  }
  else if ((StrMap & 0x80000000) != 0 {
         && ((unsigned __int16)StrMap & 0x1FFFu) <= 0x14
  }
         && ((1 << StrMap) & 0x10001A) != 0)
  {
    return StrMap & 0x1FFF | 0x8A702000;
  }
  return StrMap;
}

uint64_t phonmap_GetLhPAlphabetCore(uint64_t a1, _WORD *a2, uint64_t a3)
{
  unsigned int v13 = 0;
  uint64_t v12 = 0;
  uint64_t result = stringmap_reader_MapGetRawData(a1, &v13, &v12);
  if ((result & 0x80000000) == 0)
  {
    unint64_t v6 = v13;
    if (v13)
    {
      unint64_t v7 = 0;
      int v8 = 0;
      uint64_t v9 = v12;
      int v10 = 1;
      while (1)
      {
        if (*(unsigned char *)(v9 + v7))
        {
          if (v6 > v7)
          {
            while (*(unsigned char *)(v9 + v7))
            {
              if (v10)
              {
                unsigned int v11 = (unsigned __int16)*a2;
                if (*a2)
                {
                  if (v11 <= (unsigned __int16)v8) {
                    goto LABEL_26;
                  }
                  *(unsigned char *)(a3 + (unsigned __int16)v8) = *(unsigned char *)(v9 + v7);
                }
                ++v8;
              }
              if (++v7 >= v6)
              {
                unint64_t v7 = v6;
                if (v10) {
                  goto LABEL_19;
                }
                goto LABEL_23;
              }
            }
          }
          unint64_t v7 = v7;
          if (v10)
          {
LABEL_19:
            unsigned int v11 = (unsigned __int16)*a2;
            if (*a2)
            {
              if (v11 <= (unsigned __int16)v8) {
                goto LABEL_26;
              }
              *(unsigned char *)(a3 + (unsigned __int16)v8) = 32;
            }
            ++v8;
          }
LABEL_23:
          v10 ^= 1u;
        }
        else
        {
          ++v7;
        }
        if (v7 >= v6) {
          goto LABEL_25;
        }
      }
    }
  }
  LOWORD(v8) = 0;
LABEL_25:
  unsigned int v11 = (unsigned __int16)*a2;
  if (*a2)
  {
LABEL_26:
    if (v11 <= (unsigned __int16)v8) {
      uint64_t result = 2322604041;
    }
    else {
      *(unsigned char *)(a3 + (unsigned __int16)v8) = 0;
    }
  }
  *a2 = v8 + 1;
  return result;
}

uint64_t phonmap_reader_MapsGetGetLhPAlphabetCore(uint64_t a1, __int16 *a2, uint64_t a3)
{
  uint64_t LhPAlphabetCore = 2322604052;
  uint64_t v14 = 0;
  uint64_t v4 = 2322604039;
  if (a1 && a3)
  {
    __int16 v7 = *a2;
    __int16 v13 = *a2;
    if ((ssftmap_IteratorOpen(a1, 0, 1, (uint64_t)&v14) & 0x80000000) != 0)
    {
      return 2322604052;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      if ((ssftmap_IteratorNext(v14, &v12, &v11) & 0x80000000) == 0)
      {
        unsigned __int16 v8 = 0;
        __int16 v9 = v7;
        while (1)
        {
          uint64_t LhPAlphabetCore = phonmap_GetLhPAlphabetCore(v11, &v13, a3 + v8);
          if ((LhPAlphabetCore & 0x80000000) != 0) {
            break;
          }
          v9 -= v13 - 1;
          v8 += v13 - 1;
          __int16 v13 = v9;
          if ((ssftmap_IteratorNext(v14, &v12, &v11) & 0x80000000) != 0)
          {
            __int16 v7 = v7 - v9 + 1;
            break;
          }
        }
      }
      *a2 = v7;
      ssftmap_IteratorClose((uint64_t)v14);
      return LhPAlphabetCore;
    }
  }
  return v4;
}

uint64_t charcount_CountBlanks(unsigned char *a1, unsigned int a2)
{
  if (a1 && a2)
  {
    unsigned int v4 = 0;
    unsigned __int16 v5 = 0;
    do
    {
      if (utf8_BelongsToSet(4u, a1, v4, a2)) {
        ++v5;
      }
      unsigned int v4 = (unsigned __int16)(utf8_determineUTF8CharLength(a1[v4]) + v4);
    }
    while (v4 < a2);
  }
  else
  {
    return 0;
  }
  return v5;
}

uint64_t charcount_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 2) {
    return 2709528577;
  }
  uint64_t result = 0;
  *a2 = &ICharcount;
  return result;
}

uint64_t charcount_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2709528586;
  uint64_t v34 = 0;
  if (!a5) {
    return 2709528582;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v34);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  log_OutText(*(void *)(v34 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjOpen: Begin", v10, v11, v12, v29);
  __int16 v13 = (void *)heap_Calloc(*(void **)(v34 + 8), 1, 48);
  if (!v13)
  {
    uint64_t v22 = v34;
    goto LABEL_11;
  }
  uint64_t v18 = v13;
  *__int16 v13 = a3;
  v13[1] = a4;
  uint64_t v19 = v34;
  v13[2] = v34;
  uint64_t v20 = *(void **)(v19 + 8);
  long long v31 = xmmword_26D211200;
  *(void *)&long long v32 = off_26D211210;
  int v21 = vector_ObjOpen(v20, &v31, 1, v18 + 3);
  uint64_t v22 = v34;
  if (!v21)
  {
LABEL_11:
    log_OutPublic(*(void *)(v22 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v14, v15, v16, v17, v30);
    return v5;
  }
  uint64_t v23 = *(void **)(v34 + 8);
  long long v31 = xmmword_26D211218;
  long long v32 = *(_OWORD *)off_26D211228;
  uint64_t v33 = off_26D211238;
  uint64_t v5 = ssftmap_ObjOpen(v23, 0, &v31, v18 + 4);
  int v27 = 29350;
  if ((v5 & 0x80000000) != 0)
  {
    *(void *)a5 = v18;
    *(_DWORD *)(a5 + 8) = 29350;
    charcount_ObjClose(v18, *(void *)(a5 + 8));
    uint64_t v18 = 0;
    int v27 = 0;
  }
  *(void *)a5 = v18;
  *(_DWORD *)(a5 + 8) = v27;
  log_OutText(*(void *)(v34 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjOpen: End (%x)", v24, v25, v26, v5);
  return v5;
}

uint64_t charcount_ObjClose(void *a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck((uint64_t)a1, a2, 29350, 48);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = a1[2];
    log_OutText(*(void *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjClose : Begin", v3, v4, v5, v12);
    vector_ObjClose(a1[3]);
    ssftmap_ObjClose(a1[4]);
    heap_Free(*(void **)(v7 + 8), (uint64_t)a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t charcount_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 29350, 48);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjReopen : Begin", v3, v4, v5, v12);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"CHARCOUNT", 4, 0, (uint64_t)"CHARCOUNT ObjReopen : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t charcount_AddCharcountEvent(uint64_t a1, int a2, unsigned char *a3, unsigned __int16 a4)
{
  __s2 = 0;
  __s = 0;
  uint64_t Str = safeh_HandleCheck(a1, a2, 29350, 48);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  v26[0] = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned int v9 = a4;
  int v10 = Utf8_LengthInUtf8chars((unint64_t)a3, a4);
  int v11 = v10 - charcount_CountBlanks(a3, v9);
  *(_DWORD *)(a1 + 40) += v11;
  uint64_t Str = paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"voice", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v12 = paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"voiceoperatingpoint", &__s2);
  if ((v12 & 0x80000000) == 0
    || (uint64_t v12 = paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"voicemodel", &__s2), (v12 & 0x80000000) == 0))
  {
    int v13 = cstdlib_strlen(__s);
    int v14 = cstdlib_strlen(__s2);
    uint64_t v15 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, (v13 + v14 + 2));
    if (v15)
    {
      uint64_t v20 = v15;
      cstdlib_strcpy(v15, __s);
      cstdlib_strcat(v20, "_");
      cstdlib_strcat(v20, __s2);
      LODWORD(v26[0]) = v11;
      v26[1] = v20;
      if (!vector_Add(*(void *)(a1 + 24), v26))
      {
        uint64_t v12 = 2709528586;
        log_OutPublic(*(void *)(v8 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v21, v22, v23, v24, v26[0]);
      }
      heap_Free(*(void **)(v8 + 8), (uint64_t)v20);
    }
    else
    {
      uint64_t v12 = 2709528586;
      log_OutPublic(*(void *)(v8 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v16, v17, v18, v19, v26[0]);
    }
  }
  return v12;
}

uint64_t charcount_ReportCharcounts(void *a1, int a2)
{
  long long v31 = 0;
  int v30 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 29350, 48);
  uint64_t v4 = v3;
  if ((int)v3 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v32 = 0;
    uint64_t v6 = a1[2];
    int Size = vector_GetSize(a1[3]);
    if (Size)
    {
      int v8 = Size;
      unsigned int v9 = 0;
      while (vector_GetElemAt(a1[3], v9, &v32))
      {
        if ((ssftmap_Find(a1[4], *(void *)(v32 + 8), &v31) & 0x80000000) != 0)
        {
          uint64_t v10 = v32;
          int v30 = *(_DWORD *)v32;
        }
        else
        {
          int v30 = *(_DWORD *)v32 + *v31;
          ssftmap_Remove(a1[4], *(void *)(v32 + 8));
          uint64_t v10 = v32;
        }
        uint64_t v4 = ssftmap_Insert(a1[4], *(void *)(v10 + 8), (uint64_t)&v30);
        if ((v4 & 0x80000000) != 0) {
          return v4;
        }
        if (v8 == ++v9) {
          goto LABEL_13;
        }
      }
      uint64_t v4 = 2709528576;
    }
    else
    {
LABEL_13:
      if ((ssftmap_IteratorOpen(v5[4], 0, 0, (uint64_t)&v29) & 0x80000000) == 0)
      {
        while ((ssftmap_IteratorNext(v29, &v28, &v31) & 0x80000000) == 0)
        {
          log_OutEvent(*(uint64_t ***)(v6 + 32), 31, (uint64_t)"%s%s%s%u", v16, v17, v18, v19, v20, "VOICE_VOP");
          log_OutText(*(void *)(v6 + 32), (uint64_t)"CHARCOUNT", 5, 0, (uint64_t)"Number of utf-8 characters processed for voice_model%s=%d", v21, v22, v23, v28);
        }
        ssftmap_IteratorClose((uint64_t)v29);
      }
      log_OutEvent(*(uint64_t ***)(v6 + 32), 30, (uint64_t)"%s%u", v11, v12, v13, v14, v15, "CHARS");
      log_OutText(*(void *)(v6 + 32), (uint64_t)"CHARCOUNT", 5, 0, (uint64_t)"Total number of utf-8 characters processed %d", v24, v25, v26, *((unsigned int *)v5 + 10));
    }
    vector_Clear(a1[3]);
    ssftmap_Clear(v5[4]);
    *((_DWORD *)v5 + 10) = 0;
  }
  return v4;
}

uint64_t charcount_CheckAndModifyLastCharcountEvent(uint64_t a1, int a2, unsigned char *a3, unsigned __int16 a4)
{
  __s2 = 0;
  __s = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 29350, 48);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (charcount_CountBlanks(a3, a4) != a4)
    {
      uint64_t v26 = 0;
      uint64_t Str = paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"voice", &__s);
      if ((Str & 0x80000000) != 0)
      {
        return Str;
      }
      else
      {
        uint64_t v10 = paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"voiceoperatingpoint", &__s2);
        if ((v10 & 0x80000000) == 0
          || (uint64_t v10 = paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"voicemodel", &__s2),
              uint64_t v7 = v10,
              (v10 & 0x80000000) == 0))
        {
          uint64_t v7 = 2709528586;
          int v11 = cstdlib_strlen(__s);
          int v12 = cstdlib_strlen(__s2);
          uint64_t v13 = (char *)heap_Calloc(*(void **)(v8 + 8), 1, (v11 + v12 + 2));
          if (v13)
          {
            uint64_t v14 = v13;
            cstdlib_strcpy(v13, __s);
            cstdlib_strcat(v14, "_");
            cstdlib_strcat(v14, __s2);
            int Size = vector_GetSize(*(void *)(a1 + 24));
            if (vector_GetElemAt(*(void *)(a1 + 24), Size - 1, &v26))
            {
              if (cstdlib_strcmp(*(const char **)(v26 + 8), v14))
              {
                uint64_t v16 = *(uint64_t **)(v8 + 8);
                uint64_t v17 = *(void *)(v26 + 8);
                size_t v18 = cstdlib_strlen(v14);
                uint64_t v19 = (char *)heap_Realloc(v16, v17, v18 + 1);
                if (!v19)
                {
                  log_OutPublic(*(void *)(v8 + 32), (uint64_t)"CHARCOUNT", 16000, 0, v20, v21, v22, v23, v25);
                  goto LABEL_15;
                }
                *(void *)(v26 + 8) = v19;
                cstdlib_strcpy(v19, v14);
              }
              uint64_t v7 = v10;
            }
            else
            {
              uint64_t v7 = 2709528576;
            }
LABEL_15:
            heap_Free(*(void **)(v8 + 8), (uint64_t)v14);
          }
        }
      }
    }
  }
  return v7;
}

uint64_t charcount_ElemCopyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a1 && a3)
  {
    size_t v7 = cstdlib_strlen(*(const char **)(a1 + 8));
    uint64_t result = heap_Alloc(a2, v7 + 1);
    *(void *)(a3 + 8) = result;
    if (result)
    {
      *(_DWORD *)a3 = *(_DWORD *)a1;
      cstdlib_strcpy((char *)result, *(const char **)(a1 + 8));
      return 1;
    }
  }
  return result;
}

void *charcount_ElemFreeParts(void *result, void *a2)
{
  if (result)
  {
    uint64_t v2 = result[1];
    if (v2) {
      return heap_Free(a2, v2);
    }
  }
  return result;
}

uint64_t charcount_IElemValueCopy(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)heap_Alloc(a2, 4);
  if (!v5) {
    return 2709528586;
  }
  uint64_t v6 = v5;
  cstdlib_memcpy(v5, a1, 4uLL);
  uint64_t result = 0;
  *a3 = v6;
  return result;
}

void *charcount_IElemValueFree(uint64_t a1, void *a2)
{
  return heap_Free(a2, a1);
}

uint64_t wordSeg_stricmp(char *a1, unsigned __int8 *a2)
{
  LOBYTE(v2) = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = a2;
  do
  {
    int v5 = *a1;
    int v6 = v5 - (char)v2;
    if (v5 == (char)v2)
    {
      ++a1;
      ++v3;
    }
    else if (v5 >= 1 && ssft_tolower(v2) == v5)
    {
      ++a1;
      ++v3;
      int v6 = 0;
    }
    int v2 = *v3;
    if (v6) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v2 == 0;
    }
  }
  while (!v7);
  uint64_t result = v6 != 0;
  if (v6 < 0) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t fe_word_seg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v5 = 2359304199;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (a5)
  {
    uint64_t v25 = 0;
    char v23 = 0;
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v29);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = objc_GetObject(v29[6], (uint64_t)"SYNTHSTREAM", &v28);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t Object = objc_GetObject(v29[6], (uint64_t)"FE_DEPES", &v27);
    uint64_t v9 = v29[6];
    if ((Object & 0x80000000) != 0)
    {
      uint64_t v20 = "SYNTHSTREAM";
    }
    else
    {
      uint64_t v10 = objc_GetObject(v9, (uint64_t)"FE_DCTLKP", &v26);
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v11 = heap_Alloc(v29[1], 1208);
        if (v11)
        {
          uint64_t v16 = v11;
          *(void *)uint64_t v11 = v29;
          *(void *)(v11 + 8) = *(void *)(v28 + 8);
          uint64_t v17 = v27;
          *(void *)(v11 + 32) = *(void *)(v27 + 8);
          *(_OWORD *)(v11 + 16) = *(_OWORD *)(v17 + 16);
          uint64_t v18 = v26;
          uint64_t v19 = *(void *)(v26 + 8);
          *(void *)(v11 + 56) = v19;
          *(_OWORD *)(v11 + 40) = *(_OWORD *)(v18 + 16);
          *(void *)(v11 + 1032) = 0;
          *(_DWORD *)(v11 + 1040) = 0;
          *(void *)(v11 + 1048) = 0;
          *(_WORD *)(v11 + 1056) = 0;
          *(void *)(v11 + 1188) = 0x100000000;
          *(_OWORD *)(v11 + 952) = 0u;
          *(_OWORD *)(v11 + 968) = 0u;
          *(_OWORD *)(v11 + 984) = 0u;
          *(_OWORD *)(v11 + 1000) = 0u;
          *(_OWORD *)(v11 + 1010) = 0u;
          __int16 v24 = -1;
          uint64_t v5 = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, __int16 *, char *))(v19 + 96))(*(void *)(v11 + 40), *(void *)(v11 + 48), "fecfg", "backtrans", &v25, &v24, &v23);
          if ((v5 & 0x80000000) != 0)
          {
            heap_Free((void *)v29[1], v16);
          }
          else
          {
            *(_DWORD *)(v16 + 1200) = v24 != 0;
            *(void *)a5 = v16;
            *(_DWORD *)(a5 + 8) = 86237;
          }
        }
        else
        {
          log_OutPublic(v29[4], (uint64_t)"FE_WORDSEG", 61000, 0, v12, v13, v14, v15, v22);
          objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
          objc_ReleaseObject(v29[6], (uint64_t)"FE_DEPES");
          objc_ReleaseObject(v29[6], (uint64_t)"FE_DCTLKP");
          return 2359304202;
        }
        return v5;
      }
      uint64_t Object = v10;
      objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
      uint64_t v9 = v29[6];
      uint64_t v20 = "FE_DEPES";
    }
    objc_ReleaseObject(v9, (uint64_t)v20);
    return Object;
  }
  return v5;
}

uint64_t fe_word_seg_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 86237, 1208);
  if ((result & 0x80000000) != 0) {
    return 2359304200;
  }
  if (a1)
  {
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"FE_DEPES");
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"FE_DCTLKP");
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_word_seg_ObjReopen(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 86237, 1208);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2359304200;
  }
}

uint64_t fe_word_seg_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 86237, 1208) & 0x80000000) != 0) {
    return 2359304200;
  }
  synstrmaux_InitStreamOpener(a1 + 64, *(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(void *)(a1 + 8), a3, a4);
  if ((v7 & 0x80000000) != 0
    || (uint64_t v7 = (*(uint64_t (**)(void, void, void, void *, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 16), *(void *)(a1 + 24), 0, &unk_2206E3025, 0), (v7 & 0x80000000) != 0))
  {
    uint64_t v11 = v7;
    *(unsigned char *)(a1 + 1196) = 54;
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(void *)(a1 + 8));
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 32) + 80))(*(void *)(a1 + 16), *(void *)(a1 + 24), "word_segmentation");
    if ((v11 & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 1192) = 0;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"depes grammar %s not present", v8, v9, v10, (uint64_t)"word_segmentation");
      uint64_t v11 = 0;
    }
    *(unsigned char *)(a1 + 1196) = 54;
  }
  return v11;
}

uint64_t fe_word_seg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v173 = 0;
  int v174 = 0;
  uint64_t v172 = 0;
  uint64_t v170 = 0;
  unsigned __int16 v169 = 0;
  int v168 = 0;
  if ((safeh_HandleCheck(a1, a2, 86237, 1208) & 0x80000000) != 0) {
    return 2359304200;
  }
  __src = 0;
  *a5 = 1;
  uint64_t v7 = (*(uint64_t (**)(void, void, const char **, char *))(*(void *)(a1 + 8) + 88))(*(void *)(a1 + 888), *(void *)(a1 + 896), &v174, (char *)&v173 + 4);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = HIDWORD(v173);
  uint64_t v9 = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 8) + 144))(*(void *)(a1 + 904), *(void *)(a1 + 912), (char *)&v172 + 4, &v172);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  if (HIDWORD(v173))
  {
    *(_DWORD *)(a1 + 1188) = log_GetLogLevel(*(void *)(*(void *)a1 + 32)) > 4;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Processing Sentence=\"%s\"", v10, v11, v12, (uint64_t)v174);
    uint64_t v7 = (*(uint64_t (**)(void, void, void **, uint64_t *))(*(void *)(a1 + 8) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &__src, &v173);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v13 = v173;
      *(_WORD *)(a1 + 1040) = v173 >> 5;
      *(_WORD *)(a1 + 1042) = v13 >> 5;
      uint64_t v14 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), v13);
      *(void *)(a1 + 1032) = v14;
      if (v14
        && (cstdlib_memcpy(v14, __src, v173),
            uint64_t v19 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (HIDWORD(v173) + 33)),
            (*(void *)(a1 + 1016) = v19) != 0))
      {
        *(_WORD *)(a1 + 1024) = WORD2(v173) + 32;
        cstdlib_strcpy(v19, v174);
        unsigned __int16 v20 = cstdlib_strlen(*(const char **)(a1 + 1016));
        unsigned int v164 = v20;
        unsigned __int16 v21 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), v20);
        unsigned int v22 = (void *)(a1 + 1000);
        NewCharuint64_t Str = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 1000), v21);
        if ((NewCharStr & 0x80000000) == 0)
        {
          cstdlib_memset(*(void **)(a1 + 1000), 110, v21);
          *(unsigned char *)(*(void *)(a1 + 1000) + v21) = 0;
          NewCharuint64_t Str = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 1008), v21);
          if ((NewCharStr & 0x80000000) == 0)
          {
            cstdlib_memset(*(void **)(a1 + 1008), 32, v21);
            LOWORD(v24) = 0;
            *(unsigned char *)(*(void *)(a1 + 1008) + v21) = 0;
            if (*(unsigned __int16 *)(a1 + 1040) < 2u) {
              goto LABEL_87;
            }
            uint64_t v162 = v13;
            unsigned int v163 = v8;
            uint64_t v24 = 0;
            unint64_t v25 = 1;
            uint64_t v26 = 88;
            uint64_t v27 = 3;
            unsigned __int16 v165 = v20;
            do
            {
              unsigned int v28 = (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 1032) + 32 * v25 + 12)
                                     - *(_WORD *)(*(void *)(a1 + 1032) + 12));
              int v29 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), v28);
              uint64_t v30 = *(void *)(a1 + 1032);
              int v31 = *(_DWORD *)(v30 + 32 * v25);
              if (v31 != 34)
              {
                if (v31 != 21)
                {
                  if (v31 == 1) {
                    uint64_t v24 = (v24 + 1);
                  }
                  else {
                    uint64_t v24 = v24;
                  }
                  goto LABEL_38;
                }
                if (!*(void *)(v30 + 32 * v25 + 24)) {
                  goto LABEL_38;
                }
              }
              unint64_t v32 = *(unsigned __int16 *)(a1 + 1040);
              LOWORD(v33) = v20;
              if (v25 + 1 >= v32) {
                goto LABEL_28;
              }
              uint64_t v34 = (void *)(v30 + v26);
              uint64_t v35 = v27;
              while (1)
              {
                int v36 = *((_DWORD *)v34 - 6);
                if (v36 == 21) {
                  break;
                }
                if (v36 == 34) {
                  goto LABEL_27;
                }
LABEL_24:
                v34 += 4;
                if (v32 == (unsigned __int16)v35++)
                {
                  LOWORD(v33) = v20;
                  goto LABEL_28;
                }
              }
              if (!*v34) {
                goto LABEL_24;
              }
LABEL_27:
              int v33 = *((_DWORD *)v34 - 3) - *(_DWORD *)(v30 + 12);
LABEL_28:
              uint64_t v38 = v22;
              uint64_t v39 = v24;
              if (v31 == 34)
              {
                char v40 = 112;
              }
              else if (wordSeg_stricmp(*(char **)(v30 + 32 * v25 + 24), "normal"))
              {
                if (wordSeg_stricmp(*(char **)(*(void *)(a1 + 1032) + 32 * v25 + 24), "spell")) {
                  char v40 = 110;
                }
                else {
                  char v40 = 115;
                }
              }
              else
              {
                char v40 = 110;
              }
              for (;
                    v28 < (unsigned __int16)v33;
                    unsigned int v28 = (unsigned __int16)(utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 1016)
                                                                                             + v28))
                                           + v28))
              {
                *(unsigned char *)(*(void *)(a1 + 1000) + (unsigned __int16)v29++) = v40;
              }
              uint64_t v24 = v39;
              unsigned int v22 = v38;
              unsigned __int16 v20 = v165;
LABEL_38:
              ++v25;
              unint64_t v41 = *(unsigned __int16 *)(a1 + 1040);
              v26 += 32;
              ++v27;
            }
            while (v25 < v41);
            if (v41 >= 2)
            {
              __int16 v161 = v24;
              __int16 v42 = 2;
              unint64_t v43 = 1;
              uint64_t v44 = 88;
              while (1)
              {
                uint64_t v45 = *(void *)(a1 + 1032);
                int v46 = *(_DWORD *)(v45 + 32 * v43 + 12);
                LODWORD(v45) = *(_DWORD *)(v45 + 12);
                int v47 = v46 - v45;
                int v48 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), (unsigned __int16)(v46 - v45));
                uint64_t v49 = *(void *)(a1 + 1032);
                int v50 = *(_DWORD *)(v49 + 32 * v43);
                if (v50 != 7)
                {
                  if (v50 == 36)
                  {
                    int v51 = *(char **)(v49 + 32 * v43 + 24);
                    if (v51)
                    {
                      unint64_t v52 = *(unsigned __int16 *)(a1 + 1040);
                      LOWORD(v53) = v20;
                      if (v43 + 1 < v52)
                      {
                        unsigned int v54 = (void *)(v49 + v44);
                        unsigned __int16 v55 = v42;
                        while (*((_DWORD *)v54 - 6) != 36 || !*v54)
                        {
                          ++v55;
                          v54 += 4;
                          if (v52 == v55)
                          {
                            LOWORD(v53) = v20;
                            goto LABEL_64;
                          }
                        }
                        LOWORD(v53) = v20;
                        if (*(_DWORD *)(v49 + 32 * v55) == 36)
                        {
                          uint64_t v61 = v49 + 32 * v55;
                          LOWORD(v53) = v20;
                          if (*(void *)(v61 + 24)) {
                            int v53 = *(_DWORD *)(v61 + 12) - *(_DWORD *)(v49 + 12);
                          }
                        }
                      }
LABEL_64:
                      if (!wordSeg_stricmp(v51, "latin")
                        && (unsigned __int16)v53 > (unsigned __int16)v47)
                      {
                        do
                        {
                          *(unsigned char *)(*(void *)(a1 + 1000) + (unsigned __int16)v48) = 108;
                          v47 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 1016)
                                                                                 + (unsigned __int16)v47));
                          ++v48;
                        }
                        while ((unsigned __int16)v47 < (unsigned __int16)v53);
                      }
                    }
                  }
                  goto LABEL_67;
                }
                uint64_t v56 = v49 + 32 * v43;
                uint64_t v57 = *(void *)(v56 + 24);
                if (v57)
                {
                  int v58 = *(_DWORD *)(v56 + 16) + v47;
                  if (v164 >= (unsigned __int16)v58) {
                    unsigned __int16 v59 = v58;
                  }
                  else {
                    unsigned __int16 v59 = v20;
                  }
                  if (v57 == 43)
                  {
                    char v60 = 112;
LABEL_58:
                    while ((unsigned __int16)v47 < v59)
                    {
                      *(unsigned char *)(*(void *)(a1 + 1000) + (unsigned __int16)v48) = v60;
                      v47 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 1016)
                                                                             + (unsigned __int16)v47));
                      ++v48;
                    }
                    goto LABEL_67;
                  }
                  if (v57 == 16)
                  {
                    char v60 = 116;
                    goto LABEL_58;
                  }
                }
LABEL_67:
                ++v43;
                ++v42;
                v44 += 32;
                if (v43 >= *(unsigned __int16 *)(a1 + 1040))
                {
                  uint64_t v8 = v163;
                  uint64_t v13 = v162;
                  LOWORD(v24) = v161;
                  goto LABEL_87;
                }
              }
            }
            uint64_t v8 = v163;
            uint64_t v13 = v162;
LABEL_87:
            if (!v164) {
              goto LABEL_106;
            }
            unsigned __int16 v64 = v24;
            uint64_t v65 = v13;
            uint64_t v66 = v8;
            int v67 = 0;
            unsigned __int16 v68 = 0;
            unsigned __int16 v69 = 0;
            do
            {
              uint64_t v70 = v69;
              if (*(unsigned char *)(*(void *)(a1 + 1016) + v69) == 32)
              {
                uint64_t v71 = v68;
                *(unsigned char *)(*v22 + v68) = 32;
                *(unsigned char *)(*(void *)(a1 + 1008) + v68) = 32;
              }
              else
              {
                uint64_t v71 = v68;
              }
              int v72 = *(unsigned __int8 *)(*v22 + v71);
              if (v72 == 115 || v72 == 110) {
                int v67 = 1;
              }
              unsigned __int16 v69 = v70 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 1016) + v70));
              ++v68;
            }
            while (v69 < v20);
            uint64_t v13 = v65;
            if (v67 != 1)
            {
              unsigned __int8 v108 = 0;
              uint64_t v110 = 0;
              uint64_t v8 = v66;
              goto LABEL_108;
            }
            LODWORD(v167) = 0;
            wordSeg_logMarkers((_DWORD *)a1, (uint64_t)"Start of Chinese Word Segmentation", v73, v74, v75, v76, v77, v78);
            uint64_t v8 = v66;
            if (*(_DWORD *)(a1 + 1188) == 1)
            {
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Orth   =\"%s\"", v79, v80, v81, *(void *)(a1 + 1016));
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Region =\"%s\"", v82, v83, v84, *(void *)(a1 + 1000));
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Hex    =\"%s\"", v85, v86, v87, *(void *)(a1 + 1008));
            }
            uint64_t WordDefs = wordSeg_GetWordDefs(a1, &v170, &v169, v64);
            if ((WordDefs & 0x80000000) != 0)
            {
              uint64_t v9 = WordDefs;
              uint64_t v110 = 0;
              goto LABEL_129;
            }
            uint64_t v89 = v170;
            unsigned int v90 = v169;
            wordSeg_ParseOutPOSAndAttributes(a1, v170, v169);
            if (*(_DWORD *)(a1 + 1188) == 1)
            {
              wordSeg_logMarkers((_DWORD *)a1, (uint64_t)"After POS and ATTRIBUTE processing", v91, v92, v93, v94, v95, v96);
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER POS   =\"%s\"", v97, v98, v99, *(void *)(a1 + 1016));
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER POS   =\"%s\"", v100, v101, v102, *(void *)(a1 + 1000));
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER POS   =\"%s\"", v103, v104, v105, *(void *)(a1 + 1008));
            }
            if (*(_DWORD *)(a1 + 1192) != 1)
            {
LABEL_106:
              unsigned __int8 v108 = 0;
              uint64_t v110 = 0;
              goto LABEL_108;
            }
            int v106 = cstdlib_strlen(*(const char **)(a1 + 1016));
            HIDWORD(v173) = v106 + 1;
            int v107 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v106 + 2));
            unsigned __int8 v108 = v107;
            if (v107)
            {
              cstdlib_strcpy(v107, *(const char **)(a1 + 1016));
              v109 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), v173);
              uint64_t v110 = v109;
              if (v109)
              {
                cstdlib_memcpy(v109, *(const void **)(a1 + 1032), v173);
                int v111 = 1;
                goto LABEL_117;
              }
            }
            else
            {
              uint64_t v110 = 0;
            }
            int v111 = 0;
LABEL_117:
            uint64_t v116 = wordSeg_setDepesLayers(a1, v89, v90);
            if ((v116 & 0x80000000) != 0) {
              goto LABEL_127;
            }
            uint64_t v116 = wordSeg_execDepesLayers(a1, &v167, v117, v118, v119, v120, v121, v122);
            if ((v116 & 0x80000000) != 0) {
              goto LABEL_127;
            }
            if (!v167)
            {
              int v166 = 0;
              uint64_t v116 = wordSeg_processDepesOutput(a1, v89, v90, &v166);
              if ((v116 & 0x80000000) != 0) {
                goto LABEL_127;
              }
              if (v166 == 1)
              {
                uint64_t v132 = *(void *)(*(void *)a1 + 32);
                if (!v111)
                {
                  log_OutPublic(v132, (uint64_t)"FE_WORDSEG", 61005, (uint64_t)"%s%s", v128, v129, v130, v131, "ABORT");
                  uint64_t v9 = 2359304192;
                  if (!v108)
                  {
LABEL_129:
                    if (v110) {
                      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v110);
                    }
                    goto LABEL_131;
                  }
LABEL_128:
                  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v108);
                  goto LABEL_129;
                }
                log_OutPublic(v132, (uint64_t)"FE_WORDSEG", 61005, 0, v128, v129, v130, v131, v159);
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"!! Restoring backup as post-processing fails !!", v133, v134, v135, v160);
                cstdlib_strcpy(*(char **)(a1 + 1016), v108);
                cstdlib_memcpy(*(void **)(a1 + 1032), v110, v173);
                heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v108);
                heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v110);
                unsigned __int8 v108 = 0;
                uint64_t v110 = 0;
                uint64_t v13 = v65;
              }
              wordSeg_logMarkers((_DWORD *)a1, (uint64_t)"After DEPES result processing", v126, v127, v128, v129, v130, v131);
            }
            uint64_t v8 = v66;
            if (*(_DWORD *)(a1 + 1188) == 1)
            {
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER DEPES =\"%s\"", v123, v124, v125, *(void *)(a1 + 1016));
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER DEPES =\"%s\"", v136, v137, v138, *(void *)(a1 + 1000));
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER DEPES =\"%s\"", v139, v140, v141, *(void *)(a1 + 1008));
            }
LABEL_108:
            int v112 = cstdlib_strlen(*(const char **)(a1 + 1016));
            LODWORD(v173) = 32 * *(unsigned __int16 *)(a1 + 1040);
            HIDWORD(v173) = v112 + 1;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"Final Sentence \"%s\"", v113, v114, v115, *(void *)(a1 + 1016));
            uint64_t v116 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 8) + 104))(*(void *)(a1 + 920), *(void *)(a1 + 928), *(void *)(a1 + 1016), HIDWORD(v173));
            if ((v116 & 0x80000000) == 0)
            {
              uint64_t v116 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 8) + 104))(*(void *)(a1 + 936), *(void *)(a1 + 944), *(void *)(a1 + 1032), v173);
              if ((v116 & 0x80000000) == 0)
              {
                uint64_t v116 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 8) + 96))(*(void *)(a1 + 888), *(void *)(a1 + 896), v8);
                if ((v116 & 0x80000000) == 0)
                {
                  uint64_t v116 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 8) + 96))(*(void *)(a1 + 904), *(void *)(a1 + 912), v13);
                  if ((v116 & 0x80000000) == 0)
                  {
                    uint64_t v116 = (*(uint64_t (**)(void, void, int *, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 16), *(void *)(a1 + 24), &v168, 0);
                    if ((v116 & 0x80000000) == 0)
                    {
                      v168 += HIDWORD(v173) - v8;
                      uint64_t v116 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 16), *(void *)(a1 + 24));
                    }
                  }
                }
              }
            }
LABEL_127:
            uint64_t v9 = v116;
            if (!v108) {
              goto LABEL_129;
            }
            goto LABEL_128;
          }
        }
        uint64_t v9 = NewCharStr;
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v15, v16, v17, v18, v159);
        uint64_t v9 = 2359304202;
      }
LABEL_131:
      if (*(_WORD *)(a1 + 1056))
      {
        unint64_t v142 = 0;
        do
        {
          heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*(void *)(a1 + 1048) + 8 * v142));
          *(void *)(*(void *)(a1 + 1048) + 8 * v142++) = 0;
        }
        while (v142 < *(unsigned __int16 *)(a1 + 1056));
      }
      *(_WORD *)(a1 + 1056) = 0;
      uint64_t v143 = *(void *)(a1 + 1048);
      if (v143)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v143);
        *(void *)(a1 + 1048) = 0;
      }
      *(_WORD *)(a1 + 1058) = 0;
      uint64_t v144 = *(void *)(a1 + 1032);
      if (v144)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v144);
        *(void *)(a1 + 1032) = 0;
        *(_DWORD *)(a1 + 1040) = 0;
      }
      uint64_t v145 = *(void *)(a1 + 952);
      if (v145)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v145);
        *(void *)(a1 + 952) = 0;
      }
      uint64_t v146 = *(void *)(a1 + 960);
      if (v146)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v146);
        *(void *)(a1 + 960) = 0;
      }
      uint64_t v147 = *(void *)(a1 + 968);
      if (v147)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v147);
        *(void *)(a1 + 968) = 0;
      }
      uint64_t v148 = *(void *)(a1 + 976);
      if (v148)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v148);
        *(void *)(a1 + 976) = 0;
      }
      uint64_t v149 = *(void *)(a1 + 1000);
      if (v149)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v149);
        *(void *)(a1 + 1000) = 0;
      }
      uint64_t v150 = *(void *)(a1 + 1008);
      if (v150)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v150);
        *(void *)(a1 + 1008) = 0;
      }
      uint64_t v151 = *(void *)(a1 + 1016);
      if (v151)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v151);
        *(void *)(a1 + 1016) = 0;
        *(_WORD *)(a1 + 1024) = 0;
      }
      uint64_t v152 = v170;
      if (v170)
      {
        uint64_t v153 = v169;
        if (v169)
        {
          uint64_t v154 = (uint64_t *)(v170 + 32);
          do
          {
            uint64_t v155 = *(v154 - 3);
            if (v155)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v155);
              *(v154 - 3) = 0;
            }
            uint64_t v156 = *(v154 - 2);
            if (v156)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v156);
              *(v154 - 2) = 0;
            }
            uint64_t v157 = *(v154 - 1);
            if (v157)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v157);
              *(v154 - 1) = 0;
            }
            if (*v154)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), *v154);
              *uint64_t v154 = 0;
            }
            uint64_t v158 = v154[3];
            if (v158)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v158);
              v154[3] = 0;
            }
            v154 += 9;
            --v153;
          }
          while (v153);
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v152);
      }
      return v9;
    }
    return v7;
  }
  int v62 = v172;
  if (v172)
  {
    if (HIDWORD(v172))
    {
      uint64_t v7 = (*(uint64_t (**)(void, void, void **, uint64_t *))(*(void *)(a1 + 8) + 88))(*(void *)(a1 + 904), *(void *)(a1 + 912), &__src, &v173);
      if ((v7 & 0x80000000) != 0) {
        return v7;
      }
      uint64_t v7 = (*(uint64_t (**)(void, void, void *, void))(*(void *)(a1 + 8) + 104))(*(void *)(a1 + 936), *(void *)(a1 + 944), __src, v173);
      if ((v7 & 0x80000000) != 0) {
        return v7;
      }
      uint64_t v9 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 8) + 96))(*(void *)(a1 + 904), *(void *)(a1 + 912), v173);
      if ((v9 & 0x80000000) != 0) {
        return v9;
      }
      int v62 = v172;
    }
    if (!v62) {
      return v9;
    }
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 64), *(void *)(a1 + 8));
  }
  uint64_t v167 = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"clcpppipelinemode", &v167) & 0x80000000) != 0
    || !v167
    || !*v167)
  {
    *a5 = 0;
  }
  return v9;
}

_DWORD *wordSeg_logMarkers(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (result[297])
  {
    uint64_t v8 = result;
    uint64_t result = (_DWORD *)log_OutText(*(void *)(*(void *)result + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"%s", a6, a7, a8, a2);
    if (*((_WORD *)v8 + 520))
    {
      unint64_t v9 = 0;
      do
      {
        marker_getString(*(_DWORD *)(*((void *)v8 + 129) + 32 * v9));
        char v24 = 0;
        int hasCharPtrArg = marker_hasCharPtrArg(*(_DWORD *)(*((void *)v8 + 129) + 32 * v9));
        uint64_t v14 = *((void *)v8 + 129);
        if (hasCharPtrArg == 1 && (uint64_t v15 = *(const char **)(v14 + 32 * v9 + 24)) != 0)
        {
          unsigned __int16 v16 = cstdlib_strlen(v15);
          uint64_t v14 = *((void *)v8 + 129);
          if (v16 <= 0x40uLL) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 63;
          }
          if (v17)
          {
            uint64_t v18 = *(unsigned __int8 **)(v14 + 32 * v9 + 24);
            uint64_t v19 = 1 - v17;
            unsigned __int16 v20 = &v25;
            while (1)
            {
              int v21 = *v18;
              *(v20 - 1) = v21;
              if (!v21) {
                break;
              }
              ++v18;
              ++v19;
              ++v20;
              if (v19 == 1) {
                goto LABEL_17;
              }
            }
            if (v19) {
              bzero(v20, -v19);
            }
          }
LABEL_17:
          *(&v24 + v17) = 0;
        }
        else
        {
          char v24 = 0;
        }
        unsigned int v22 = (_DWORD *)(v14 + 32 * v9);
        if (*v22 == 32)
        {
          char v24 = 48;
          if (v22[6] == 1) {
            char v23 = 49;
          }
          else {
            char v23 = 48;
          }
          char v24 = v23;
          char v25 = 0;
        }
        uint64_t result = (_DWORD *)log_OutText(*(void *)(*(void *)v8 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"marker[%d] %d(%s) %u,%u %u,%u %s%s", v11, v12, v13, v9++);
      }
      while (v9 < *((unsigned __int16 *)v8 + 520));
    }
  }
  return result;
}

uint64_t wordSeg_GetWordDefs(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, unsigned int a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 72 * a4 + 72);
  if (!v7)
  {
    uint64_t v22 = 2359304202;
    log_OutPublic(*(void *)(*(void *)v6 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v8, v9, v10, v11, v99);
    return v22;
  }
  uint64_t v12 = v7;
  uint64_t v101 = a2;
  if (*(unsigned __int16 *)(v6 + 1040) < 2u)
  {
    unsigned __int16 v14 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    unsigned __int16 v14 = 0;
    unint64_t v15 = 1;
    do
    {
      uint64_t v16 = *(void *)(v6 + 1032);
      if (*(_DWORD *)(v16 + v13 + 32) == 1)
      {
        uint64_t v17 = *(void *)(v6 + 1000);
        if (*(unsigned char *)(v17
                      + (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(v6 + 1016), *(_DWORD *)(v16 + v13 + 44) - *(_DWORD *)(v16 + 12))) == 110)
        {
          uint64_t v18 = v12 + 72 * v14;
          *(_WORD *)uint64_t v18 = v15;
          *(_OWORD *)(v18 + 8) = 0u;
          uint64_t v19 = (char **)(v18 + 8);
          *(_DWORD *)(v18 + 44) = 0;
          *(_DWORD *)(v18 + 48) = 0;
          *(_OWORD *)(v18 + 24) = 0u;
          *(_WORD *)(v18 + 40) = 1;
          *(void *)(v18 + 56) = 0;
          uint64_t v20 = *(void *)(v6 + 1032) + v13;
          *(void *)(v18 + 64) = *(void *)(v20 + 36);
          NewCharuint64_t Str = wordSeg_GetNewCharStr(v6, (uint64_t *)(v18 + 8), *(unsigned __int16 *)(v20 + 48));
          if ((NewCharStr & 0x80000000) != 0)
          {
            uint64_t v22 = NewCharStr;
            goto LABEL_119;
          }
          cstdlib_strncpy(*v19, (const char *)(*(void *)(v6 + 1016)+ (unsigned __int16)(*(_DWORD *)(*(void *)(v6 + 1032) + v13 + 44)- *(_DWORD *)(*(void *)(v6 + 1032) + 12))), *(unsigned __int16 *)(*(void *)(v6 + 1032) + v13 + 48));
          ++v14;
        }
      }
      ++v15;
      v13 += 32;
    }
    while (v15 < *(unsigned __int16 *)(v6 + 1040));
  }
  *a3 = v14;
  uint64_t v105 = v6;
  uint64_t v103 = a3;
  if (*(unsigned __int16 *)(v6 + 1040) < 2u) {
    goto LABEL_82;
  }
  uint64_t v23 = 1;
  while (1)
  {
    uint64_t v24 = *(void *)(v6 + 1032);
    if (*(_DWORD *)(v24 + 32 * v23) == 37)
    {
      uint64_t v25 = *(void *)(v6 + 1000);
      if (*(unsigned char *)(v25
                    + (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(v6 + 1016), *(_DWORD *)(v24 + 32 * v23 + 12) - *(_DWORD *)(v24 + 12))) == 110)break;
    }
LABEL_56:
    if (++v23 >= (unint64_t)*(unsigned __int16 *)(v6 + 1040))
    {
      a3 = v103;
      unsigned __int16 v14 = *v103;
LABEL_82:
      if (!v14)
      {
LABEL_117:
        uint64_t v22 = 0;
        goto LABEL_119;
      }
      uint64_t v76 = 0;
      uint64_t v77 = (unsigned __int16 *)(v6 + 1060);
      uint64_t v102 = v12;
      while (1)
      {
        uint64_t v78 = *(const char **)(v12 + 72 * v76 + 16);
        if (!v78) {
          goto LABEL_116;
        }
        uint64_t v79 = v12 + 72 * v76;
        uint64_t v80 = *(const char **)(v79 + 8);
        unsigned __int16 v81 = cstdlib_strlen(v80);
        unsigned __int16 v82 = cstdlib_strlen(v78);
        *(_DWORD *)(v79 + 44) = 0;
        uint64_t v83 = (_DWORD *)(v79 + 44);
        int v106 = 0;
        cstdlib_memset(v77, 0, 0x80uLL);
        char v104 = v82;
        unsigned int v84 = v82;
        if (v82 >= 3u) {
          break;
        }
LABEL_86:
        if (v81)
        {
          uint64_t v85 = 0;
          uint64_t v86 = v105;
          while (!v85 || v80[v85] != 92 || v80[(v85 - 1)] == 32)
          {
            if (v81 == ++v85)
            {
              LOWORD(v85) = v81;
              goto LABEL_103;
            }
          }
          unsigned __int16 v81 = v85;
        }
        else
        {
          LOWORD(v85) = 0;
          uint64_t v86 = v105;
        }
LABEL_103:
        ++v83;
        unsigned __int16 v109 = v85;
        unsigned int OrthPinyinWords = wordSeg_GetOrthPinyinWords(v86, v81, (uint64_t)v80, &v109);
        uint64_t v12 = v102;
        if (!OrthPinyinWords)
        {
          a3 = v103;
          if (v81 != 1) {
            goto LABEL_111;
          }
          goto LABEL_109;
        }
        a3 = v103;
        if (!v84 || (v104 & 3) != 0 || v84 >> 2 != OrthPinyinWords)
        {
LABEL_111:
          uint64_t v90 = v102 + 72 * v76;
          unsigned int OrthPinyinWords = *v83 != 1;
          goto LABEL_112;
        }
LABEL_110:
        uint64_t v90 = v12 + 72 * v76;
LABEL_112:
        *(_WORD *)(v90 + 40) = OrthPinyinWords;
        uint64_t v91 = (unsigned __int16 *)(v90 + 40);
        uint64_t v92 = heap_Calloc(*(void **)(*(void *)v86 + 8), 1, 2 * OrthPinyinWords + 2);
        *(void *)(v12 + 72 * v76 + 56) = v92;
        if (!v92)
        {
          uint64_t v22 = 2359304202;
          log_OutPublic(*(void *)(*(void *)v86 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v93, v94, v95, v96, v99);
          goto LABEL_119;
        }
        if (*v91 >= 2u)
        {
          unint64_t v97 = 0;
          do
          {
            *(_WORD *)(v92 + 2 * v97) = v77[v97];
            ++v97;
          }
          while (v97 < *v91);
        }
LABEL_116:
        if (++v76 >= (unint64_t)*a3) {
          goto LABEL_117;
        }
      }
      unsigned __int16 v87 = 0;
      while (1)
      {
        v108[0] = v78[v87];
        v108[1] = v78[v87 | 1];
        v108[2] = 0;
        int v88 = cstdlib_strtol(v108, &v106, 0x10u);
        v107[0] = v78[v87 | 2];
        v107[1] = v78[v87 | 3];
        v107[2] = 0;
        if (cstdlib_strtol(v107, &v106, 0x10u) == 49 && v88 >= 5 && v88 <= 45) {
          break;
        }
        v87 += 4;
        if (v82 <= v87 || (v87 | 3u) > v82) {
          goto LABEL_86;
        }
      }
      *uint64_t v77 = v81;
      uint64_t v12 = v102;
      a3 = v103;
      uint64_t v86 = v105;
LABEL_109:
      unsigned int OrthPinyinWords = 1;
      *uint64_t v83 = 1;
      goto LABEL_110;
    }
  }
  unint64_t v30 = *(unsigned __int16 *)(v6 + 1040);
  int v31 = v101;
  if (v30 < 2) {
    goto LABEL_80;
  }
  uint64_t v32 = *v103;
  uint64_t v33 = *(void *)(v6 + 1032);
  uint64_t v34 = (_DWORD *)(v33 + 44);
  uint64_t v35 = 1;
  while (*(v34 - 3) != 1 || *v34 != *(_DWORD *)(v33 + 32 * v23 + 12))
  {
    ++v35;
    v34 += 8;
    if (v30 == v35) {
      goto LABEL_80;
    }
  }
  if (!*v103)
  {
LABEL_80:
    log_OutPublic(*(void *)(*(void *)v6 + 32), (uint64_t)"FE_WORDSEG", 61005, 0, v26, v27, v28, v29, v99);
    uint64_t v22 = 0;
    goto LABEL_120;
  }
  int v36 = (uint64_t *)(v12 + 16);
  while (*((unsigned __int16 *)v36 - 8) != (unsigned __int16)v35)
  {
    v36 += 9;
    if (!--v32) {
      goto LABEL_80;
    }
  }
  unsigned __int16 v37 = cstdlib_strlen(*(const char **)(v33 + 32 * v23 + 24));
  uint64_t v38 = wordSeg_GetNewCharStr(v6, v36, v37);
  if ((v38 & 0x80000000) != 0)
  {
    uint64_t v22 = v38;
    goto LABEL_120;
  }
  uint64_t v6 = v105;
  if (v37)
  {
    uint64_t v39 = *(unsigned __int8 **)(*(void *)(v105 + 1032) + 32 * v23 + 24);
    uint64_t v40 = 1 - v37;
    unint64_t v41 = (char *)(*v36 + 1);
    while (1)
    {
      int v42 = *v39;
      *(v41 - 1) = v42;
      if (!v42) {
        break;
      }
      ++v39;
      ++v40;
      ++v41;
      if (v40 == 1) {
        goto LABEL_35;
      }
    }
    if (v40) {
      bzero(v41, -v40);
    }
  }
LABEL_35:
  uint64_t v43 = *(void *)(v105 + 1032);
  uint64_t v44 = v43 + 32 * *((unsigned __int16 *)v36 - 8);
  LODWORD(v43) = *(_DWORD *)(v43 + 12);
  int v45 = *(_DWORD *)(v44 + 12);
  int v46 = v45 - v43;
  int v47 = v45 - v43 + *(_DWORD *)(v44 + 16);
  unsigned int v48 = (unsigned __int16)(v45 - v43);
  unsigned __int16 v49 = Utf8_LengthInUtf8chars(*(void *)(v105 + 1016), v48);
  if (v48 < (unsigned __int16)v47)
  {
    unsigned __int16 v54 = v49;
    LODWORD(v55) = v46;
    do
    {
      uint64_t v56 = *(void *)(v105 + 1016);
      unsigned int v57 = *(unsigned __int8 *)(v56 + (unsigned __int16)v55);
      if ((_WORD)v55 && v57 == 92 && *(unsigned char *)(v56 + (unsigned __int16)v55 - 1) != 32) {
        break;
      }
      LODWORD(v55) = v55 + utf8_determineUTF8CharLength(v57);
    }
    while ((unsigned __int16)v55 < (unsigned __int16)v47);
    uint64_t v6 = v105;
    if ((unsigned __int16)v55 != (unsigned __int16)v46)
    {
      log_OutText(*(void *)(*(void *)v105 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"word _%s_", v51, v52, v53, *(v36 - 1));
      if ((unsigned __int16)v55 > (unsigned __int16)v46)
      {
        unsigned __int16 v58 = v54;
        do
        {
          unsigned int v59 = *(unsigned __int8 *)(*(void *)(v105 + 1016) + (unsigned __int16)v46);
          if (*(char *)(*(void *)(v105 + 1016) + (unsigned __int16)v46) >= 48
            && v59 <= *(unsigned __int8 *)(v105 + 1196))
          {
            *(unsigned char *)(*(void *)(v105 + 1008) + v58) = 120;
            unsigned int v59 = *(unsigned __int8 *)(*(void *)(v105 + 1016) + (unsigned __int16)v46);
          }
          LOWORD(v46) = v46 + utf8_determineUTF8CharLength(v59);
          ++v58;
        }
        while ((unsigned __int16)v46 < (unsigned __int16)v55);
      }
      if (v48 + 1 == (unsigned __int16)v47 && *v36) {
        *(unsigned char *)(*(void *)(v105 + 1008) + v54) = 120;
      }
      if ((_WORD)v55)
      {
        uint64_t v60 = *(void *)(v105 + 1016);
        if (*(unsigned char *)(v60 + (unsigned __int16)v55) == 92
          && *(unsigned char *)(v60 + (unsigned __int16)v55 - 1) != 32)
        {
          unsigned __int16 v61 = v55 + 1;
          if ((unsigned __int16)(v55 + 1) >= (unsigned __int16)v47)
          {
LABEL_55:
            uint64_t v6 = v105;
            if (v61 != (unsigned __int16)v47) {
              goto LABEL_122;
            }
            goto LABEL_56;
          }
          uint64_t v62 = (unsigned __int16)(v55 + 1);
          BOOL v63 = 1;
          uint64_t v55 = v62;
          while (!v55 || *(unsigned char *)(v60 + v55) != 92 || *(unsigned char *)(v60 + (v55 - 1)) == 32)
          {
            BOOL v63 = ++v55 < (unint64_t)(unsigned __int16)v47;
            if ((unsigned __int16)v55 == (unsigned __int16)v47)
            {
              LOWORD(v55) = v47;
              break;
            }
          }
          if ((unsigned __int16)v55 == v61)
          {
            if (v63) {
              goto LABEL_70;
            }
            goto LABEL_55;
          }
          unsigned __int16 v64 = (char **)(v36 + 1);
          int v100 = (unsigned __int16)v55 - v61;
          uint64_t v6 = v105;
          if ((wordSeg_GetNewCharStr(v105, v36 + 1, (unsigned __int16)(v55 - v61)) & 0x80000000) != 0) {
            goto LABEL_122;
          }
          cstdlib_strncpy(*v64, (const char *)(*(void *)(v105 + 1016) + v62), v100);
          log_OutText(*(void *)(*(void *)v105 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"pos _%s_", v65, v66, v67, (uint64_t)*v64);
          if (v63)
          {
LABEL_70:
            unsigned __int16 v68 = v55 + 1;
            LOWORD(v69) = v68;
            if (v68 < (unsigned __int16)v47)
            {
              uint64_t v70 = *(void *)(v105 + 1016);
              uint64_t v69 = v68;
              while (*(unsigned char *)(v70 + v69) != 92 || *(unsigned char *)(v70 + (v69 - 1)) == 32)
              {
                ++v69;
                uint64_t v6 = v105;
                if ((unsigned __int16)v69 == (unsigned __int16)v47) {
                  goto LABEL_77;
                }
              }
            }
            uint64_t v6 = v105;
            if ((unsigned __int16)v69 != (unsigned __int16)v47) {
              goto LABEL_122;
            }
LABEL_77:
            if (v68 != (unsigned __int16)v47)
            {
              int v71 = (unsigned __int16)v47 - v68;
              int v72 = (char **)(v36 + 2);
              if ((wordSeg_GetNewCharStr(v6, v36 + 2, (unsigned __int16)v71) & 0x80000000) != 0) {
                goto LABEL_122;
              }
              cstdlib_strncpy(*v72, (const char *)(*(void *)(v6 + 1016) + v68), v71);
              log_OutText(*(void *)(*(void *)v6 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"attr _%s_", v73, v74, v75, (uint64_t)*v72);
            }
            goto LABEL_56;
          }
        }
      }
      unsigned __int16 v61 = v55;
      goto LABEL_55;
    }
  }
LABEL_122:
  log_OutPublic(*(void *)(*(void *)v6 + 32), (uint64_t)"FE_WORDSEG", 61013, (uint64_t)"%s%d", v50, v51, v52, v53, "at input position");
  uint64_t v22 = 2359304192;
LABEL_119:
  int v31 = v101;
LABEL_120:
  *int v31 = v12;
  return v22;
}

size_t wordSeg_ParseOutPOSAndAttributes(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5 = (unsigned __int16)cstdlib_strlen(*(const char **)(a1 + 1016));
  unsigned __int16 v6 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), v5);
  size_t result = cstdlib_strlen(*(const char **)(a1 + 1016));
  if (!v5) {
    goto LABEL_66;
  }
  unsigned __int16 v48 = v6;
  unsigned int v8 = 0;
  uint64_t v50 = 0;
  unsigned int v9 = 0;
  int v10 = 0;
  unsigned __int16 v11 = 0;
  unint64_t v12 = a3;
  do
  {
    unsigned int v13 = v8;
    while (1)
    {
      unsigned __int16 v14 = *(unsigned __int8 **)(a1 + 1000);
      if ((_WORD)v10)
      {
        int v15 = v14[(unsigned __int16)v10];
        if (v15 != 110 && v15 != 115 || v14[(unsigned __int16)v10 - 1] != 32) {
          goto LABEL_22;
        }
      }
      else
      {
        int v16 = *v14;
        if (v16 != 110 && v16 != 115) {
          goto LABEL_22;
        }
      }
      if (v9 >= a3)
      {
LABEL_19:
        HIDWORD(v50) = 0;
      }
      else
      {
        unint64_t v17 = v9;
        uint64_t v18 = (unsigned __int16 *)(a2 + 72 * v9);
        while (1)
        {
          unsigned int v19 = *v18;
          v18 += 36;
          unsigned int v20 = *(_DWORD *)(*(void *)(a1 + 1032) + 32 * v19 + 12) - *(_DWORD *)(*(void *)(a1 + 1032) + 12);
          if (v20 == v13) {
            break;
          }
          ++v17;
          if (v20 > v13 || v17 >= v12) {
            goto LABEL_19;
          }
        }
        unsigned int v9 = (unsigned __int16)v17;
        HIDWORD(v50) = 1;
      }
      LOWORD(v50) = v11;
LABEL_22:
      uint64_t v22 = *(void *)(a1 + 1016);
      size_t result = *(unsigned __int8 *)(v22 + v11);
      if (!v11 || result != 92 || *(unsigned char *)(v22 + v11 - 1) == 32) {
        goto LABEL_30;
      }
      if (HIDWORD(v50)) {
        break;
      }
      if (v14[(unsigned __int16)v10] == 115) {
        goto LABEL_32;
      }
LABEL_30:
      size_t result = utf8_determineUTF8CharLength(result);
      v11 += result;
      ++v10;
      unsigned int v13 = v11;
      if (v5 <= v11) {
        goto LABEL_66;
      }
    }
    if (!*(void *)(a2 + 72 * v9 + 16) || v14[(unsigned __int16)v10] != 110) {
      goto LABEL_30;
    }
LABEL_32:
    unsigned __int16 v23 = v11;
    LOWORD(v24) = v10;
    unsigned int v45 = a3;
    int v25 = v11;
    if (v5 > v11)
    {
      int v26 = *(unsigned __int8 *)(*(void *)(a1 + 1016) + v11);
      unsigned __int16 v27 = v11;
      int v24 = v10;
      unsigned __int16 v23 = v11;
      int v25 = v11;
      while (v26 != 32)
      {
        int v46 = v24;
        size_t result = utf8_determineUTF8CharLength(v26);
        v27 += result;
        int v24 = v46 + 1;
        int v25 = v27;
        if (v5 <= v27)
        {
          unsigned __int16 v23 = v27;
          break;
        }
        int v26 = *(unsigned __int8 *)(*(void *)(a1 + 1016) + v27);
        unsigned __int16 v23 = v27;
      }
    }
    unsigned int v8 = v11;
    if (v11 == v23)
    {
      unsigned __int16 v48 = v10 + v48 - v24;
    }
    else
    {
      unsigned __int16 v28 = v24;
      int v47 = v25;
      cstdlib_memmove((void *)(*(void *)(a1 + 1016) + v11), (const void *)(*(void *)(a1 + 1016) + v23), (int)(v5 - v25));
      *(unsigned char *)(*(void *)(a1 + 1016) + (int)(v13 + v5 - v47)) = 0;
      size_t __len = v48 - v28;
      cstdlib_memmove((void *)(*(void *)(a1 + 1000) + (unsigned __int16)v10), (const void *)(*(void *)(a1 + 1000) + v28), __len);
      int v29 = (unsigned __int16)v10 + v48 - v28;
      *(unsigned char *)(*(void *)(a1 + 1000) + v29) = 0;
      size_t result = (size_t)cstdlib_memmove((void *)(*(void *)(a1 + 1008) + (unsigned __int16)v10), (const void *)(*(void *)(a1 + 1008) + v28), __len);
      unsigned int v8 = v11;
      int v25 = v47;
      unsigned __int16 v48 = v10 + v48 - v28;
      *(unsigned char *)(*(void *)(a1 + 1008) + v29) = 0;
    }
    a3 = v45;
    int v30 = v25 - v13;
    unint64_t v31 = *(unsigned __int16 *)(a1 + 1040);
    if (v31 >= 2)
    {
      uint64_t v32 = *(void *)(a1 + 1032);
      int v33 = *(_DWORD *)(v32 + 12);
      uint64_t v34 = (_DWORD *)(v32 + 48);
      unint64_t v35 = v31 - 1;
      do
      {
        unsigned int v36 = *(v34 - 1);
        if (v36 >= v33 + v13)
        {
          v36 -= v30;
          *(v34 - 1) = v36;
        }
        int v37 = v36 - v33;
        if (*(v34 - 4) == 1 && v37 == (unsigned __int16)v50) {
          *v34 -= v30;
        }
        v34 += 8;
        --v35;
      }
      while (v35);
    }
    if (*(unsigned char *)(*(void *)(a1 + 1000) + (unsigned __int16)v10 - 1) == 110)
    {
      uint64_t v39 = a2 + 72 * v9;
      size_t v41 = *(void *)(v39 + 8);
      uint64_t v40 = (uint64_t *)(v39 + 8);
      size_t result = v41;
      if (v41)
      {
        size_t result = cstdlib_strlen((const char *)result);
        unsigned int v8 = v11;
        if ((_WORD)result)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *v40;
          while (!v42 || *(unsigned char *)(v43 + v42) != 92 || *(unsigned char *)(v43 + (v42 - 1)) == 32)
          {
            if ((unsigned __int16)result == ++v42)
            {
              LOWORD(v42) = result;
              break;
            }
          }
          if ((_WORD)v42
            && *(unsigned char *)(v43 + (unsigned __int16)v42) == 92
            && *(unsigned char *)(v43 + (unsigned __int16)v42 - 1) != 32)
          {
            *(unsigned char *)(v43 + (unsigned __int16)v42) = 0;
          }
        }
      }
    }
    unsigned int v5 = (unsigned __int16)(v5 - v30);
  }
  while (v5 > v8);
LABEL_66:
  *(_DWORD *)(*(void *)(a1 + 1032) + 16) = v5;
  return result;
}

uint64_t wordSeg_setDepesLayers(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  __int16 v6 = cstdlib_strlen(*(const char **)(a1 + 1016));
  unsigned __int16 v46 = cstdlib_strlen(*(const char **)(a1 + 1000));
  NewCharuint64_t Str = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 952), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0) {
    return NewCharStr;
  }
  cstdlib_strcpy(*(char **)(a1 + 952), (const char *)&unk_2206E3025);
  NewCharuint64_t Str = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 960), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0) {
    return NewCharStr;
  }
  cstdlib_strcpy(*(char **)(a1 + 960), (const char *)&unk_2206E3025);
  NewCharuint64_t Str = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 968), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0) {
    return NewCharStr;
  }
  cstdlib_strcpy(*(char **)(a1 + 968), (const char *)&unk_2206E3025);
  NewCharuint64_t Str = wordSeg_GetNewCharStr(a1, (uint64_t *)(a1 + 976), (unsigned __int16)(v6 + 32));
  if ((NewCharStr & 0x80000000) != 0) {
    return NewCharStr;
  }
  cstdlib_strcpy(*(char **)(a1 + 976), (const char *)&unk_2206E3025);
  unsigned __int16 v57 = v6 + 32;
  if (a3)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    uint64_t v39 = a3;
    __int16 v40 = v6;
    uint64_t v48 = a2;
    while (1)
    {
      uint64_t v42 = v8;
      int v12 = *(_DWORD *)(*(void *)(a1 + 1032) + 32 * *(unsigned __int16 *)(a2 + 72 * v8) + 12)
          - *(_DWORD *)(*(void *)(a1 + 1032) + 12);
      int v13 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), v12);
      if ((unsigned __int16)v13 > (unsigned __int16)v9)
      {
        int v14 = v13;
        uint64_t v11 = wordSeg_GrowDepesLayers(a1, &v57, (unsigned __int16)v10, (unsigned __int16)v9, (const char *)&unk_2206E3025, (const char *)&unk_2206E3025, (const char *)&unk_2206E3025, (const char *)&unk_2206E3025, (unsigned __int16)v12 - (unsigned __int16)v10, (unsigned __int16)v13 - (unsigned __int16)v9, 1);
        if ((v11 & 0x80000000) != 0) {
          return v11;
        }
        int v10 = v12;
        int v9 = v14;
      }
      uint64_t v15 = a2 + 72 * v42;
      LODWORD(v16) = *(unsigned __int16 *)(v15 + 40);
      uint64_t v52 = (unsigned __int16 *)(v15 + 40);
      if (*(_WORD *)(v15 + 40)) {
        break;
      }
LABEL_47:
      uint64_t v8 = v42 + 1;
      __int16 v6 = v40;
      if (v42 + 1 == v39) {
        goto LABEL_50;
      }
    }
    unint64_t v17 = 0;
    int v41 = 0;
    uint64_t v18 = a2 + 72 * v42;
    int v47 = (void *)(v18 + 56);
    unsigned int v19 = (unint64_t *)(v18 + 8);
    unsigned int v45 = (_DWORD *)(v18 + 48);
    uint64_t v50 = (char **)(v18 + 16);
    uint64_t v51 = (_DWORD *)(v18 + 44);
    uint64_t v43 = (const char **)(v18 + 32);
    uint64_t v44 = (const char **)(v18 + 24);
    unsigned __int16 v49 = (unint64_t *)(v18 + 8);
    while (1)
    {
      int v55 = v10;
      if (v17)
      {
        unsigned int v20 = *(unsigned __int16 *)(*v47 + 2 * (v17 - 1));
        unsigned __int16 v56 = Utf8_LengthInUtf8chars(*v19, v20);
        int v21 = *(unsigned __int16 *)(*v47 + 2 * v17) - *(unsigned __int16 *)(*v47 + 2 * (v17 - 1));
        int v26 = Utf8_LengthInUtf8chars(*v19, v21);
      }
      else
      {
        if (v16 == 1)
        {
          int v21 = cstdlib_strlen((const char *)*v19);
          int v26 = Utf8_LengthInUtf8chars(*v19, (unsigned __int16)v21);
        }
        else
        {
          int v21 = *(unsigned __int16 *)*v47;
          int v26 = Utf8_LengthInUtf8chars(*v19, v21);
        }
        unsigned int v20 = 0;
        unsigned __int16 v56 = 0;
      }
      if ((unsigned __int16)v21 >= 0x40u) {
        break;
      }
      cstdlib_strncpy(__dst, (const char *)(*v19 + v20), (unsigned __int16)v21);
      __dst[(unsigned __int16)v21] = 0;
      int v53 = v26;
      int v54 = v9;
      if (*v51 == 1 || *v45 == 1)
      {
        unsigned __int16 v27 = *v50;
      }
      else if (*v50)
      {
        unsigned __int16 v27 = v58;
        cstdlib_strncpy(v58, &(*v50)[(unsigned __int16)v41], 4uLL);
        v58[4] = 0;
        v41 += 4;
      }
      else
      {
        unsigned __int16 v27 = (char *)&unk_2206E3025;
      }
      unsigned __int16 v28 = cstdlib_strlen(v27);
      int v29 = cstdlib_strlen(__dst);
      unsigned __int16 v30 = Utf8_LengthInUtf8chars((unint64_t)__dst, v29);
      if (v17)
      {
        unsigned __int16 v31 = 0;
        unsigned __int16 v32 = 0;
        int v33 = (const char *)&unk_2206E3025;
        uint64_t v34 = (const char *)&unk_2206E3025;
      }
      else
      {
        uint64_t v34 = *v44;
        if (*v44)
        {
          int v35 = cstdlib_strlen(*v44);
          unsigned __int16 v31 = Utf8_LengthInUtf8chars((unint64_t)v34, v35);
        }
        else
        {
          unsigned __int16 v31 = 0;
          uint64_t v34 = (const char *)&unk_2206E3025;
        }
        int v33 = *v43;
        if (*v43)
        {
          int v36 = cstdlib_strlen(*v43);
          unsigned __int16 v32 = Utf8_LengthInUtf8chars((unint64_t)v33, v36);
        }
        else
        {
          unsigned __int16 v32 = 0;
          int v33 = (const char *)&unk_2206E3025;
        }
      }
      LOWORD(v37) = v30;
      if (v30 <= v28) {
        LOWORD(v37) = v28;
      }
      if (*(_DWORD *)(a1 + 1200)) {
        LOWORD(v37) = v30;
      }
      unsigned int v37 = (unsigned __int16)v37;
      if ((unsigned __int16)v37 <= v31) {
        unsigned int v37 = v31;
      }
      if (v37 <= v32) {
        LOWORD(v37) = v32;
      }
      uint64_t v11 = wordSeg_GrowDepesLayers(a1, &v57, v20, v56, v27, __dst, v34, v33, v37, v37, 0);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      ++v17;
      unint64_t v16 = *v52;
      a2 = v48;
      unsigned int v19 = v49;
      if (v17 < v16)
      {
        NewCharuint64_t Str = wordSeg_GrowDepesLayers(a1, &v57, v20, v56, "*", "*", "~", "~", 1u, 1u, 0);
        if ((NewCharStr & 0x80000000) != 0) {
          return NewCharStr;
        }
        uint64_t v11 = 0;
        LODWORD(v16) = *v52;
      }
      int v10 = v21 + v55;
      int v9 = v54 + v53;
      if (v17 >= v16) {
        goto LABEL_47;
      }
    }
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61011, (uint64_t)"%s%d%s%d", v22, v23, v24, v25, "trying to handle pinyin word length");
    return 2359304192;
  }
  uint64_t v11 = 0;
  LOWORD(v10) = 0;
  LOWORD(v9) = 0;
LABEL_50:
  if (v46 > (unsigned __int16)v9) {
    return wordSeg_GrowDepesLayers(a1, &v57, (unsigned __int16)v10, (unsigned __int16)v9, (const char *)&unk_2206E3025, (const char *)&unk_2206E3025, (const char *)&unk_2206E3025, (const char *)&unk_2206E3025, v6 - (unsigned __int16)v10, v46 - (unsigned __int16)v9, 1);
  }
  return v11;
}

uint64_t wordSeg_execDepesLayers(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v58 = 0;
  *a2 = 0;
  if (*(_DWORD *)(a1 + 1188) == 1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L1: %s", a6, a7, a8, *(void *)(a1 + 952));
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L2: %s", v10, v11, v12, *(void *)(a1 + 960));
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L3: %s", v13, v14, v15, *(void *)(a1 + 968));
    if (!*(_DWORD *)(a1 + 1200)) {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"IN  L4: %s", v16, v17, v18, *(void *)(a1 + 976));
    }
  }
  unsigned int v19 = *(uint64_t (**)(void, void, void, const char *, void))(*(void *)(a1 + 32) + 120);
  unsigned int v20 = *(const char **)(a1 + 952);
  unsigned __int16 v21 = cstdlib_strlen(v20);
  uint64_t v22 = v19(*(void *)(a1 + 16), *(void *)(a1 + 24), 0, v20, v21);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  uint64_t v23 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 32) + 120);
  uint64_t v24 = *(const char **)(a1 + 960);
  unsigned __int16 v25 = cstdlib_strlen(v24);
  uint64_t v22 = v23(*(void *)(a1 + 16), *(void *)(a1 + 24), 1, v24, v25);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  int v26 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 32) + 120);
  unsigned __int16 v27 = *(const char **)(a1 + 968);
  unsigned __int16 v28 = cstdlib_strlen(v27);
  uint64_t v22 = v26(*(void *)(a1 + 16), *(void *)(a1 + 24), 2, v27, v28);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  if (!*(_DWORD *)(a1 + 1200))
  {
    int v29 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 32) + 120);
    unsigned __int16 v30 = *(const char **)(a1 + 976);
    unsigned __int16 v31 = cstdlib_strlen(v30);
    uint64_t v22 = v29(*(void *)(a1 + 16), *(void *)(a1 + 24), 3, v30, v31);
    if ((v22 & 0x80000000) != 0) {
      return v22;
    }
  }
  uint64_t v32 = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 32) + 80))(*(void *)(a1 + 16), *(void *)(a1 + 24), "word_segmentation");
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v37 = v32;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61006, (uint64_t)"%s%s", v33, v34, v35, v36, "functionName");
    return v37;
  }
  uint64_t v37 = (*(uint64_t (**)(void, void, void, uint64_t, char *))(*(void *)(a1 + 32) + 128))(*(void *)(a1 + 16), *(void *)(a1 + 24), 0, a1 + 984, (char *)&v58 + 2);
  if ((v37 & 0x80000000) == 0)
  {
    *(unsigned char *)(*(void *)(a1 + 984) + HIWORD(v58)) = 0;
    if (!*(_DWORD *)(a1 + 1200))
    {
      uint64_t v38 = (unint64_t *)(a1 + 992);
      uint64_t v37 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, int *))(*(void *)(a1 + 32) + 128))(*(void *)(a1 + 16), *(void *)(a1 + 24), 1, a1 + 992, &v58);
      if ((v37 & 0x80000000) == 0)
      {
        *(unsigned char *)(*(void *)(a1 + 992) + (unsigned __int16)v58) = 0;
        if (*(_DWORD *)(a1 + 1188) == 1)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"OUT L1: %s", v39, v40, v41, *(void *)(a1 + 984));
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"OUT L2: %s", v42, v43, v44, *(void *)(a1 + 992));
        }
        int v45 = HIWORD(v58);
        if (v45 != (unsigned __int16)Utf8_LengthInUtf8chars(*v38, (unsigned __int16)v58))
        {
          uint64_t v55 = *(void *)(*(void *)a1 + 32);
          uint64_t v56 = 61008;
          goto LABEL_32;
        }
        if (HIWORD(v58))
        {
          unint64_t v50 = 0;
          int v51 = 0;
          do
          {
            int v52 = *(unsigned __int8 *)(*(void *)(a1 + 984) + v50);
            if (v52 == 32)
            {
              if (*(unsigned char *)(*v38 + (unsigned __int16)v51) != 32)
              {
LABEL_31:
                uint64_t v55 = *(void *)(*(void *)a1 + 32);
                uint64_t v56 = 61009;
LABEL_32:
                log_OutPublic(v55, (uint64_t)"FE_WORDSEG", v56, 0, v46, v47, v48, v49, v57);
                *a2 = 1;
                return v37;
              }
              unsigned int v53 = 32;
            }
            else if (v52 == 42)
            {
              if (*(unsigned char *)(*v38 + (unsigned __int16)v51) != 42) {
                goto LABEL_31;
              }
              unsigned int v53 = 42;
            }
            else
            {
              unsigned int v53 = *(unsigned __int8 *)(*v38 + (unsigned __int16)v51);
            }
            ++v50;
            v51 += utf8_determineUTF8CharLength(v53);
          }
          while (v50 < HIWORD(v58));
        }
      }
    }
  }
  return v37;
}

uint64_t wordSeg_processDepesOutput(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v333 = *MEMORY[0x263EF8340];
  char v329 = 0;
  *(_DWORD *)__s2 = 0;
  char v327 = 0;
  *(_DWORD *)char __dst = 0;
  unsigned __int16 v8 = cstdlib_strlen(*(const char **)(a1 + 952));
  unsigned __int16 v9 = cstdlib_strlen(*(const char **)(a1 + 984));
  v288 = a4;
  *a4 = 0;
  unsigned int v300 = a3;
  uint64_t v320 = a2;
  if (a3)
  {
    uint64_t v10 = 0;
    int v311 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    int v318 = 0;
    unsigned int v314 = v8;
    unsigned int v325 = v9;
    v308 = (uint64_t *)(a1 + 1016);
    v301 = (uint64_t *)(a1 + 1000);
    while (1)
    {
      uint64_t v14 = a2 + 72 * v10;
      uint64_t v17 = *(const char **)(v14 + 16);
      j = (uint64_t *)(v14 + 16);
      uint64_t v15 = v17;
      if (v17)
      {
        if (!*(_DWORD *)(a2 + 72 * v10 + 44))
        {
          unsigned int v19 = cstdlib_strlen(v15);
          int v321 = *(_DWORD *)(*(void *)(a1 + 1032) + 32 * *(unsigned __int16 *)(a2 + 72 * v10) + 12)
               - *(_DWORD *)(*(void *)(a1 + 1032) + 12);
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"DOING hexStr=%s posInSentStr=%d", v20, v21, v22, *j);
          uint64_t v297 = (unsigned __int16)(v19 >> 2);
          if ((unsigned __int16)(v19 >> 2)) {
            break;
          }
        }
      }
      uint64_t v18 = v11;
LABEL_6:
      ++v10;
      uint64_t v11 = v18;
      a2 = v320;
      if (v10 == v300) {
        goto LABEL_165;
      }
    }
    uint64_t v23 = 0;
    unsigned __int16 v312 = 0;
    v293 = (void *)(a2 + 72 * v10 + 8);
    uint64_t v295 = v10;
    v298 = j;
    while (1)
    {
      uint64_t v310 = v23;
      if (*(_DWORD *)(a1 + 1200))
      {
        uint64_t v316 = v13;
        int v24 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*v293 + v312));
        cstdlib_strncpy(__dst, (const char *)(*v293 + v312), (unsigned __int16)v24);
        __s2[(unsigned __int16)v24] = 0;
        cstdlib_strncpy(__s2, (const char *)(*j + 4 * v23), 4uLL);
        char v329 = 0;
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"\tthisOrthStr=%s", v25, v26, v27, (uint64_t)__dst);
        int v28 = v318;
        unsigned int v29 = (unsigned __int16)v318 + 1;
        unsigned int v30 = v314;
        while (v29 < v314
             && cstdlib_strncmp((const char *)(*(void *)(a1 + 952) + (unsigned __int16)v28), __dst, (unsigned __int16)v24))
        {
          v28 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 952) + (unsigned __int16)v28));
          unsigned int v29 = (unsigned __int16)v28 + 1;
        }
        if (cstdlib_strncmp((const char *)(*(void *)(a1 + 952) + (unsigned __int16)v28), __dst, (unsigned __int16)v24))
        {
          uint64_t v278 = *(void *)(*(void *)a1 + 32);
          v280 = "orth1";
          goto LABEL_319;
        }
        int v311 = v24;
        v312 += v24;
      }
      else
      {
        cstdlib_strncpy(__s2, (const char *)(*j + 4 * v23), 4uLL);
        char v329 = 0;
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"\tthisHexStr=%s", v35, v36, v37, (uint64_t)__s2);
        int v38 = v318;
        unsigned int v30 = v314;
        if ((unsigned __int16)v318 + 4 < v314)
        {
          while (cstdlib_strncmp((const char *)(*(void *)(a1 + 952) + (unsigned __int16)v38), __s2, 4uLL))
          {
            int v39 = v38 + 1;
            uint64_t v13 = v13
                + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 960)
                                                                                + (unsigned __int16)v13));
            unsigned int v40 = (unsigned __int16)v38++ + 5;
            if (v40 >= v314) {
              goto LABEL_22;
            }
          }
        }
        int v39 = v38;
LABEL_22:
        uint64_t v316 = v13;
        int v28 = v39;
        if (cstdlib_strncmp((const char *)(*(void *)(a1 + 952) + (unsigned __int16)v39), __s2, 4uLL))
        {
          uint64_t v278 = *(void *)(*(void *)a1 + 32);
LABEL_318:
          v280 = "hex1(first 4 chars)";
LABEL_319:
          log_OutPublic(v278, (uint64_t)"FE_WORDSEG", 61012, (uint64_t)"%s%s%s%s%s%s", v31, v32, v33, v34, v280);
LABEL_324:
          uint64_t v277 = 0;
          _DWORD *v288 = 1;
          return v277;
        }
      }
      if ((unsigned __int16)(v28 + 1) <= v30) {
        unsigned __int16 v41 = v30;
      }
      else {
        unsigned __int16 v41 = v28 + 1;
      }
      unsigned __int16 v42 = v28;
      while (v30 > ++v42)
      {
        int v43 = *(unsigned __int8 *)(*(void *)(a1 + 952) + v42);
        unsigned __int16 v44 = v42;
        if (v43 == 42 || v43 == 32) {
          goto LABEL_32;
        }
      }
      unsigned __int16 v44 = v41;
LABEL_32:
      unsigned int v45 = v42;
      int v46 = v42 - (unsigned __int16)v28;
      if (v46 > 63)
      {
        uint64_t v142 = *(void *)(*(void *)a1 + 32);
        v287 = "(L1InIdx)start position";
        goto LABEL_322;
      }
      int v47 = *(_DWORD *)(a1 + 1200);
      if (v46 < 1)
      {
        unsigned __int16 v48 = 0;
        unsigned int v52 = v325;
      }
      else
      {
        unsigned __int16 v48 = 0;
        int v49 = 0;
        uint64_t v50 = (unsigned __int16)v316;
        uint64_t v51 = (unsigned __int16)v28;
        unsigned int v52 = v325;
        do
        {
          if (v47) {
            int v53 = *(unsigned __int8 *)(*(void *)(a1 + 952) + v51);
          }
          else {
            int v53 = *(unsigned __int8 *)(*(void *)(a1 + 960) + v50);
          }
          if (v53 != 126)
          {
            uint64_t v54 = v48++;
            __s1[v54] = v53;
          }
          ++v49;
          ++v50;
          ++v51;
        }
        while (v46 > (unsigned __int16)v49);
      }
      __s1[v48] = 0;
      unsigned int v304 = v45;
      if (v47)
      {
        for (unsigned int i = (unsigned __int16)v12 + 1;
              i < v52
           && cstdlib_strncmp((const char *)(*(void *)(a1 + 984) + (unsigned __int16)v12), __dst, (unsigned __int16)v311);
              unsigned int i = (unsigned __int16)v12 + 1)
        {
          v12 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 984) + (unsigned __int16)v12));
        }
        uint64_t v56 = (const char *)(*(void *)(a1 + 984) + (unsigned __int16)v12);
        unsigned int v57 = __dst;
        size_t v58 = (unsigned __int16)v311;
      }
      else
      {
        if ((unsigned __int16)v12 + 4 < v52)
        {
          int v59 = v12;
          while (cstdlib_strncmp((const char *)(*(void *)(a1 + 984) + (unsigned __int16)v59), __s2, 4uLL))
          {
            int v12 = v59 + 1;
            uint64_t v11 = v11
                + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 992)
                                                                                + (unsigned __int16)v11));
            unsigned int v60 = (unsigned __int16)v59++ + 5;
            if (v60 >= v52) {
              goto LABEL_55;
            }
          }
          int v12 = v59;
        }
LABEL_55:
        uint64_t v56 = (const char *)(*(void *)(a1 + 984) + (unsigned __int16)v12);
        unsigned int v57 = __s2;
        size_t v58 = 4;
      }
      if (cstdlib_strncmp(v56, v57, v58))
      {
        uint64_t v278 = *(void *)(*(void *)a1 + 32);
        goto LABEL_318;
      }
      if (cstdlib_strncmp("d700", __s2, 4uLL) && cstdlib_strncmp("0aff", __s2, 4uLL))
      {
        LODWORD(v61) = (unsigned __int16)v12;
        if (v52 <= (unsigned __int16)v12)
        {
          unsigned __int16 v62 = v12;
        }
        else
        {
          unsigned __int16 v62 = v12;
          do
          {
            int v63 = *(unsigned __int8 *)(*(void *)(a1 + 984) + v62);
            if (v63 == 32) {
              break;
            }
            if (v63 == 42) {
              break;
            }
            ++v62;
          }
          while (v52 > v62);
        }
      }
      else
      {
        unsigned __int16 v62 = v12 + 4;
        LODWORD(v61) = (unsigned __int16)v12;
      }
      int v64 = v62 - v61;
      if (v64 > 63)
      {
        uint64_t v142 = *(void *)(*(void *)a1 + 32);
        v279 = "start position";
        goto LABEL_321;
      }
      if (v64 < 1)
      {
        unsigned __int16 v65 = 0;
      }
      else
      {
        unsigned __int16 v65 = 0;
        int v66 = 0;
        int v67 = *(_DWORD *)(a1 + 1200);
        uint64_t v68 = (unsigned __int16)v11;
        uint64_t v61 = v61;
        do
        {
          if (v67) {
            int v69 = *(unsigned __int8 *)(*(void *)(a1 + 984) + v61);
          }
          else {
            int v69 = *(unsigned __int8 *)(*(void *)(a1 + 992) + v68);
          }
          if (v69 != 32 && v69 != 126) {
            __s[v65++] = v69;
          }
          ++v66;
          ++v68;
          ++v61;
        }
        while (v64 > (unsigned __int16)v66);
      }
      int v318 = v28 + 1;
      __s[v65] = 0;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"processing words IN=_%s_ OUT=_%s_", v32, v33, v34, (uint64_t)__s1);
      if (cstdlib_strcmp(__s1, __s))
      {
        if (*(_DWORD *)(a1 + 1200))
        {
          uint64_t v281 = *(void *)(*(void *)a1 + 32);
          v282 = "original word";
LABEL_316:
          log_OutPublic(v281, (uint64_t)"FE_WORDSEG", 61002, (uint64_t)"%s%s%s%s", v70, v71, v72, v73, v282);
          goto LABEL_324;
        }
        __int16 v74 = cstdlib_strlen(__s);
        __int16 v75 = cstdlib_strlen(__s1);
        unsigned __int16 v330 = 0;
        if (!wordSeg_GetOrthPinyinWords(a1, v65, (uint64_t)__s, &v330))
        {
          uint64_t v281 = *(void *)(*(void *)a1 + 32);
          v282 = "original pinyin";
          goto LABEL_316;
        }
        __int16 v76 = v74 - v75;
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"updating pinyin from \"%s\" to \"%s\"", v71, v72, v73, (uint64_t)__s1);
        unsigned __int16 v77 = cstdlib_strlen(*(const char **)(a1 + 1016));
        unsigned __int16 v78 = cstdlib_strlen(__s1);
        unsigned __int16 v79 = cstdlib_strlen(__s);
        int v80 = v76;
        unsigned __int16 v292 = v78;
        unsigned __int16 v294 = cstdlib_strlen(*(const char **)(a1 + 1000));
        unsigned __int16 v296 = v79;
        if (v76 < 1)
        {
          if (v76 < 0)
          {
            unsigned int v97 = (unsigned __int16)v321;
            if ((unsigned __int16)v321 - v76 > v77)
            {
              log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61005, (uint64_t)"%s%d%s%d%s%d", v81, v82, v83, v84, "incorrect position detected : pos");
LABEL_313:
              uint64_t v277 = 2359304192;
LABEL_314:
              log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61010, 0, v93, v94, v95, v96, v286);
              return v277;
            }
            cstdlib_memmove((void *)(*v308 + (unsigned __int16)v321), (const void *)(*v308 + (unsigned __int16)v321 - v76), (unsigned __int16)(v77 - (v321 - v76)));
            int v289 = v77 + v76;
            *(unsigned char *)(*v308 + v289) = 0;
            cstdlib_memmove((void *)(*v301 + (unsigned __int16)v321), (const void *)(*v301 + (unsigned __int16)v321 - v76), (unsigned __int16)(v77 - (v321 - v76)));
            uint64_t v99 = (unsigned __int16)v321;
            *(unsigned char *)(*v301 + v289) = 0;
          }
          else
          {
            uint64_t v99 = (unsigned __int16)v321;
            unsigned int v97 = (unsigned __int16)v321;
          }
        }
        else
        {
          int v85 = v77;
          unint64_t v86 = v77 + (unint64_t)v76;
          int v87 = *(unsigned __int16 *)(a1 + 1024);
          if ((int)v86 > v87)
          {
            int v291 = v77;
            unint64_t v88 = v77 + (unint64_t)v76;
            __int16 v89 = v80;
            if ((unsigned __int16)v80 <= 0x20u) {
              __int16 v89 = 32;
            }
            __int16 v90 = v87 + v89;
            unsigned int v91 = (unsigned __int16)(v87 + v89);
            uint64_t MrkMemory = wordSeg_ReallocCharStr(a1, v308, v91);
            if ((MrkMemory & 0x80000000) != 0
              || (uint64_t MrkMemory = wordSeg_ReallocCharStr(a1, v301, v91), (MrkMemory & 0x80000000) != 0))
            {
LABEL_305:
              uint64_t v277 = MrkMemory;
              goto LABEL_314;
            }
            *(_WORD *)(a1 + 1024) = v90;
            unint64_t v86 = v88;
            int v85 = v291;
          }
          unsigned int v97 = (unsigned __int16)v321;
          size_t __len = v80 + (unsigned __int16)v321;
          size_t v98 = v85 - (unsigned __int16)v321;
          cstdlib_memmove((void *)(*v308 + __len), (const void *)(*v308 + (unsigned __int16)v321), v98);
          *(unsigned char *)(*v308 + v86) = 0;
          cstdlib_memmove((void *)(*v301 + __len), (const void *)(*v301 + (unsigned __int16)v321), v98);
          uint64_t v99 = (unsigned __int16)v321;
          *(unsigned char *)(*v301 + v86) = 0;
        }
        uint64_t v100 = v296;
        cstdlib_memmove((void *)(*v308 + v99), __s, v296);
        if (v296)
        {
          uint64_t v104 = v97;
          LODWORD(v105) = v294 - v97;
          if (v294 >= v97) {
            uint64_t v105 = v105;
          }
          else {
            uint64_t v105 = 0;
          }
          do
          {
            if (!v105) {
              break;
            }
            *(unsigned char *)(*v301 + v104) = 88;
            --v105;
            ++v104;
            --v100;
          }
          while (v100);
        }
        unint64_t v106 = *(unsigned __int16 *)(a1 + 1040);
        if (v106 >= 2)
        {
          uint64_t v107 = *(void *)(a1 + 1032);
          int v108 = *(_DWORD *)(v107 + 12);
          unsigned __int16 v109 = (_DWORD *)(v107 + 48);
          unint64_t v110 = v106 - 1;
          do
          {
            int v111 = *(v109 - 1);
            unsigned int v112 = v111 - v108;
            BOOL v113 = *(v109 - 4) == 1 && v112 == v97;
            if (v113) {
              _DWORD *v109 = v80 + v292;
            }
            if (v112 >= v97 + v292) {
              *(v109 - 1) = v111 + v80;
            }
            v109 += 8;
            --v110;
          }
          while (v110);
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"AFTER pinyin rule      =\"%s\"", v101, v102, v103, *(void *)(a1 + 1016));
        uint64_t v10 = v295;
      }
      if (*(_DWORD *)(a1 + 1200))
      {
        int v114 = v12 + v311;
        for (j = v298; v325 > (unsigned __int16)v114; v114 += utf8_determineUTF8CharLength(0x7Eu))
        {
          if (*(unsigned char *)(*(void *)(a1 + 984) + (unsigned __int16)v114) != 126) {
            break;
          }
        }
        uint64_t v18 = v11;
        int k = v321;
      }
      else
      {
        int v114 = v12 + 4;
        uint64_t v18 = (v11 + 4);
        j = v298;
        for (int k = v321;
              v325 > (unsigned __int16)v114;
              uint64_t v18 = v18
                  + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 992)
                                                                                  + (unsigned __int16)v18)))
        {
          if (*(unsigned char *)(*(void *)(a1 + 984) + (unsigned __int16)v114) != 126) {
            break;
          }
          ++v114;
        }
      }
      int v116 = cstdlib_strlen(__s);
      int v117 = k + v116;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"posInSentStr=%d", v118, v119, v120, (unsigned __int16)(k + v116));
      if (v314 > v304)
      {
        int v121 = *(unsigned __int8 *)(*(void *)(a1 + 952) + v44);
        int v122 = *(unsigned __int8 *)(*(void *)(a1 + 984) + (unsigned __int16)v114);
        if (v121 != v122) {
          break;
        }
      }
LABEL_160:
      uint64_t v13 = v316;
      int v321 = v117;
      if (*(_DWORD *)(a1 + 1200))
      {
        int v161 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 952) + (unsigned __int16)v28));
        int v162 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 984) + (unsigned __int16)v114));
        int v318 = v28 + v161;
      }
      else
      {
        uint64_t v13 = v316
            + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 960)
                                                                            + (unsigned __int16)v316));
        uint64_t v18 = v18
            + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 992)
                                                                            + (unsigned __int16)v18));
        int v162 = 1;
      }
      int v12 = v162 + v114;
      uint64_t v23 = v310 + 1;
      uint64_t v11 = v18;
      if (v310 + 1 == v297) {
        goto LABEL_6;
      }
    }
    unsigned int v123 = (unsigned __int16)(k + v116);
    if (v121 == 42 && v122 == 32)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"insert boundary at position %d", v32, v33, v34, (unsigned __int16)(k + v116));
      unsigned __int16 v124 = cstdlib_strlen(*(const char **)(a1 + 1016));
      unsigned __int16 v125 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), (unsigned __int16)v117);
      unsigned __int16 v126 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), v124);
      unsigned int v127 = *(unsigned __int16 *)(a1 + 1024);
      if (v124 >= v127)
      {
        uint64_t MrkMemory = wordSeg_ReallocCharStr(a1, v308, (unsigned __int16)(v127 + 32));
        if ((MrkMemory & 0x80000000) != 0) {
          goto LABEL_305;
        }
        uint64_t MrkMemory = wordSeg_ReallocCharStr(a1, v301, (unsigned __int16)(*(_WORD *)(a1 + 1024) + 32));
        if ((MrkMemory & 0x80000000) != 0) {
          goto LABEL_305;
        }
        *(_WORD *)(a1 + 1024) += 32;
      }
      unsigned __int16 v322 = v126;
      cstdlib_memmove((void *)(*(void *)(a1 + 1016) + v123 + 1), (const void *)(*(void *)(a1 + 1016) + (unsigned __int16)v117), (int)(v124 - v123));
      *(unsigned char *)(*(void *)(a1 + 1016) + (unsigned __int16)v117) = 32;
      *(unsigned char *)(*(void *)(a1 + 1016) + v124 + 1) = 0;
      uint64_t v128 = v125;
      uint64_t v129 = v125 + 1;
      unsigned __int16 v305 = v125;
      size_t v130 = v322 - v125;
      cstdlib_memmove((void *)(*(void *)(a1 + 1000) + v129), (const void *)(*(void *)(a1 + 1000) + v125), v130);
      *(unsigned char *)(*(void *)(a1 + 1000) + v125) = 88;
      uint64_t v131 = v322 + 1;
      *(unsigned char *)(*(void *)(a1 + 1000) + v131) = 0;
      cstdlib_memmove((void *)(*(void *)(a1 + 1008) + v129), (const void *)(*(void *)(a1 + 1008) + v305), v130);
      *(unsigned char *)(*(void *)(a1 + 1008) + v128) = 32;
      *(unsigned char *)(*(void *)(a1 + 1008) + v131) = 0;
      unint64_t v135 = *(unsigned __int16 *)(a1 + 1040);
      if (v135 >= 2)
      {
        uint64_t v136 = *(void *)(a1 + 1032);
        int v137 = *(_DWORD *)(v136 + 12);
        unint64_t v138 = v135 - 1;
        uint64_t v139 = (_DWORD *)(v136 + 44);
        uint64_t v10 = v295;
        j = v298;
        do
        {
          if (*v139 - v137 >= v123) {
            ++*v139;
          }
          v139 += 8;
          --v138;
        }
        while (v138);
        int v140 = 1;
        uint64_t v141 = "AFTER insert rule      =\"%s\" posInSentStr=%d";
        goto LABEL_159;
      }
      int v140 = 1;
      uint64_t v141 = "AFTER insert rule      =\"%s\" posInSentStr=%d";
    }
    else
    {
      uint64_t v142 = *(void *)(*(void *)a1 + 32);
      if (v121 != 32 || v122 != 42)
      {
        uint64_t v284 = 61010;
        v283 = 0;
        goto LABEL_323;
      }
      log_OutText(v142, (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"delete boundary at position %d", v32, v33, v34, (unsigned __int16)(k + v116));
      unsigned __int16 v143 = cstdlib_strlen((const char *)*v308);
      if (!((_WORD)k + (_WORD)v116) || (unsigned __int16)(k + v116) == v143) {
        goto LABEL_320;
      }
      int v144 = (unsigned __int16)(v321 + v116 - 1);
      unsigned __int16 v145 = k + v116 - 1;
      do
      {
        int v146 = v144;
        if (!v145) {
          break;
        }
        int v147 = *(unsigned __int8 *)(*v308 + v145);
        --v144;
        --v145;
      }
      while (v147 != 32);
      unsigned __int16 v148 = v143;
      if ((unsigned __int16)(v321 + v116 + 1) > v143) {
        unsigned __int16 v148 = v321 + v116 + 1;
      }
      unsigned __int16 v149 = k + v116;
      while (++v149 < v143)
      {
        if (*(unsigned char *)(*v308 + v149) == 32) {
          goto LABEL_150;
        }
      }
      unsigned __int16 v149 = v148;
LABEL_150:
      if (v149 - v146 >= 65)
      {
LABEL_320:
        uint64_t v142 = *(void *)(*(void *)a1 + 32);
        v279 = "deleting boundary at position";
LABEL_321:
        LODWORD(v287) = v279;
LABEL_322:
        v283 = "%s%d%s%d";
        uint64_t v284 = 61011;
LABEL_323:
        log_OutPublic(v142, (uint64_t)"FE_WORDSEG", v284, (uint64_t)v283, v31, v32, v33, v34, v287);
        goto LABEL_324;
      }
      unsigned __int16 v150 = cstdlib_strlen(*(const char **)(a1 + 1016));
      unsigned __int16 v151 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), (unsigned __int16)v117);
      unsigned __int16 v323 = Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), v150);
      cstdlib_memmove((void *)(*(void *)(a1 + 1016) + (unsigned __int16)v117), (const void *)(*(void *)(a1 + 1016) + v123 + 1), (int)(v150 - (v123 + 1)));
      *(unsigned char *)(v150 + *(void *)(a1 + 1016) - 1) = 0;
      unsigned __int16 v306 = v151;
      uint64_t v152 = v151;
      uint64_t v153 = v151 + 1;
      size_t v154 = v323 - (int)v153;
      cstdlib_memmove((void *)(*(void *)(a1 + 1000) + v151), (const void *)(*(void *)(a1 + 1000) + v153), v154);
      *(unsigned char *)(*(void *)(a1 + 1000) + v151) = 88;
      uint64_t v155 = v323 - 1;
      *(unsigned char *)(*(void *)(a1 + 1000) + v155) = 0;
      cstdlib_memmove((void *)(*(void *)(a1 + 1008) + v306), (const void *)(*(void *)(a1 + 1008) + v153), v154);
      *(unsigned char *)(*(void *)(a1 + 1008) + v152) = 32;
      *(unsigned char *)(*(void *)(a1 + 1008) + v155) = 0;
      unint64_t v156 = *(unsigned __int16 *)(a1 + 1040);
      if (v156 >= 2)
      {
        uint64_t v157 = *(void *)(a1 + 1032);
        int v158 = *(_DWORD *)(v157 + 12);
        unint64_t v159 = v156 - 1;
        uint64_t v160 = (_DWORD *)(v157 + 44);
        uint64_t v10 = v295;
        j = v298;
        do
        {
          if (*v160 - v158 >= v123) {
            --*v160;
          }
          v160 += 8;
          --v159;
        }
        while (v159);
        int v140 = 0xFFFF;
        uint64_t v141 = "AFTER delete rule      =\"%s\" posInSentStr=%d";
        goto LABEL_159;
      }
      int v140 = 0xFFFF;
      uint64_t v141 = "AFTER delete rule      =\"%s\" posInSentStr=%d";
    }
    uint64_t v10 = v295;
    j = v298;
LABEL_159:
    v117 += v140;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)v141, v132, v133, v134, *(void *)(a1 + 1016));
    goto LABEL_160;
  }
LABEL_165:
  unsigned __int16 v163 = cstdlib_strlen(*(const char **)(a1 + 1016));
  unsigned __int16 v164 = cstdlib_strlen(*(const char **)(a1 + 1000));
  int v165 = v163;
  unsigned int v166 = v164;
  if (!v164) {
    goto LABEL_304;
  }
  unsigned int v167 = 0;
  unsigned __int16 v168 = 0;
  unsigned __int16 v309 = 0;
  int v169 = 0;
  LOWORD(v170) = 0;
  LODWORD(v171) = 0;
  if (v163 >= v164) {
    unsigned int v172 = v164;
  }
  else {
    unsigned int v172 = v163;
  }
  int v303 = v163;
  unsigned int v302 = v164;
  unsigned int v299 = v172;
  do
  {
    uint64_t v173 = *(void *)(a1 + 1000);
    int v174 = *(unsigned __int8 *)(v173 + (unsigned __int16)v169);
    if (v174 != 110 && v174 != 88 || v172 <= (unsigned __int16)v169) {
      goto LABEL_195;
    }
    int v175 = 0;
    uint64_t v176 = (unsigned __int16)v169;
    do
    {
      int v177 = *(unsigned __int8 *)(v173 + v176);
      if (v177 == 88)
      {
        int v175 = 1;
      }
      else if (v177 == 32)
      {
        break;
      }
      ++v176;
    }
    while (v172 > v176);
    if (v175 != 1)
    {
LABEL_195:
      LODWORD(v176) = v169;
      goto LABEL_196;
    }
    int v178 = Utf8_LengthInBytes(*(unsigned __int8 **)(a1 + 1016), v167);
    int v307 = Utf8_LengthInBytes(*(unsigned __int8 **)(a1 + 1016), v176);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"processing modified region from %d to %d (last region processed %d,%d)", v179, v180, v181, (unsigned __int16)v178);
    uint64_t v182 = (unsigned __int16)v178;
    if ((unsigned __int16)v178 > v168)
    {
      if (v168 >= (unsigned __int16)v169)
      {
        unsigned __int16 v183 = 0;
      }
      else
      {
        unsigned __int16 v183 = 0;
        uint64_t v184 = *(void *)(a1 + 1000);
        do
        {
          uint64_t v185 = v168;
          int v186 = *(unsigned __int8 *)(v184 + v168);
          if ((v186 == 110 || v186 == 88) && v168 < (unsigned __int16)v169)
          {
            while (1)
            {
              int v187 = *(unsigned __int8 *)(v184 + v185);
              if (v187 != 110 && v187 != 88) {
                break;
              }
              if (*(unsigned char *)(*(void *)(a1 + 1008) + v185) == 120) {
                ++v183;
              }
              if ((unsigned __int16)v169 == ++v185)
              {
                unsigned __int16 v168 = v169;
                goto LABEL_193;
              }
            }
            unsigned __int16 v168 = v185;
          }
LABEL_193:
          ++v168;
        }
        while (v168 < (unsigned __int16)v169);
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"skipping %d pinyin words in region (%d,%d)", v94, v95, v96, v183);
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"START curWordDef=%d curHexCount=%d", v188, v189, v190, (unsigned __int16)v171);
      int v194 = 0;
      if (v300 > (unsigned __int16)v171 && v183)
      {
        int v194 = 0;
        unint64_t v195 = (unsigned __int16)v171 + 1;
        __int16 v196 = (const char **)(v320 + 16 + 72 * (unsigned __int16)v171);
        while (1)
        {
          if (*v196)
          {
            unsigned int v197 = cstdlib_strlen(*v196) >> 2;
            if ((_WORD)v170)
            {
              int v198 = v183 - (unsigned __int16)v197 + (unsigned __int16)v170;
              if (v198 < 0)
              {
                LOWORD(v170) = v170 + v183;
                break;
              }
            }
            else
            {
              int v198 = v183 - (unsigned __int16)v197;
              if (v198 < 0)
              {
                LOWORD(v170) = v183;
                break;
              }
            }
            LOWORD(v170) = 0;
            LODWORD(v171) = v171 + 1;
            unsigned __int16 v183 = v198;
          }
          else
          {
            ++v194;
          }
          if (v195 < v300)
          {
            ++v195;
            v196 += 9;
            if (v183) {
              continue;
            }
          }
          break;
        }
      }
      LODWORD(v171) = v194 + v171;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"END curWordDef=%d curHexCount=%d", v191, v192, v193, (unsigned __int16)v171);
      uint64_t v182 = (unsigned __int16)v178;
    }
    unsigned int v199 = *(unsigned __int16 *)(a1 + 1040);
    uint64_t v200 = (unsigned __int16)v307;
    if (v199 < 2) {
      goto LABEL_245;
    }
    unsigned __int16 v201 = 1;
    do
    {
      uint64_t v202 = *(void *)(a1 + 1032);
      unint64_t v203 = v201;
      v204 = (_DWORD *)(v202 + 32 * v201);
      while (1)
      {
        int v205 = v204[3];
        unsigned int v206 = (unsigned __int16)(v205 - *(_DWORD *)(v202 + 12));
        if (v206 <= v200) {
          break;
        }
        if (*v204 == 1 || *v204 == 37) {
          goto LABEL_245;
        }
LABEL_223:
        ++v203;
        v204 += 8;
        if (v203 >= (unsigned __int16)v199) {
          goto LABEL_245;
        }
      }
      if (v206 < v182 || *v204 != 37) {
        goto LABEL_223;
      }
      if ((unsigned __int16)v199 < 2u)
      {
        uint64_t v209 = v182;
        LOWORD(v199) = 1;
      }
      else
      {
        v207 = (_DWORD *)(v202 + 44);
        uint64_t v208 = 1;
        while (*(v207 - 3) != 1 || *v207 != v205)
        {
          ++v208;
          v207 += 8;
          if ((unsigned __int16)v199 == v208)
          {
            uint64_t v209 = v182;
            goto LABEL_233;
          }
        }
        uint64_t v209 = v182;
        LOWORD(v199) = v208;
      }
LABEL_233:
      unsigned int v210 = (unsigned __int16)v199;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"invalidate (WORD and HEX) markers %d and %d", v94, v95, v96, (unsigned __int16)v203);
      if (v210 <= (unsigned __int16)v203) {
        uint64_t v211 = (unsigned __int16)v203;
      }
      else {
        uint64_t v211 = v210;
      }
      if (v210 >= (unsigned __int16)v203) {
        unint64_t v203 = (unsigned __int16)v203;
      }
      else {
        unint64_t v203 = v210;
      }
      uint64_t v212 = (v211 + 1);
      unsigned int v213 = *(unsigned __int16 *)(a1 + 1040);
      if (v213 > v212)
      {
        cstdlib_memmove((void *)(*(void *)(a1 + 1032) + 32 * v211), (const void *)(*(void *)(a1 + 1032) + 32 * v212), 32 * (int)(v213 - v212));
        LOWORD(v213) = *(_WORD *)(a1 + 1040);
      }
      __int16 v214 = v213 - 1;
      *(_WORD *)(a1 + 1040) = v213 - 1;
      uint64_t v215 = (v203 + 1);
      unsigned int v216 = (unsigned __int16)(v213 - 1);
      BOOL v217 = v216 >= v215;
      int v218 = v216 - v215;
      if (v218 != 0 && v217)
      {
        cstdlib_memmove((void *)(*(void *)(a1 + 1032) + 32 * v203), (const void *)(*(void *)(a1 + 1032) + 32 * v215), 32 * v218);
        __int16 v214 = *(_WORD *)(a1 + 1040);
      }
      LOWORD(v199) = v214 - 1;
      *(_WORD *)(a1 + 1040) = v199;
      unsigned __int16 v201 = v203 - 1;
      uint64_t v200 = (unsigned __int16)v307;
      uint64_t v182 = v209;
    }
    while ((unsigned __int16)(v203 - 1) < (unsigned __int16)v199);
LABEL_245:
    if (v200 <= v182) {
      goto LABEL_303;
    }
    do
    {
      uint64_t v219 = (unsigned __int16)v178;
      if (v200 <= (unsigned __int16)v178)
      {
        int v222 = v178;
        uint64_t v223 = v320;
      }
      else
      {
        uint64_t v220 = *(void *)(a1 + 1016);
        uint64_t v221 = (unsigned __int16)v178;
        int v222 = v178;
        uint64_t v223 = v320;
        if (*(unsigned char *)(v220 + (unsigned __int16)v178) == 32)
        {
          uint64_t v224 = v220 + 1;
          while (v200 > (int)v221 + 1)
          {
            int v225 = *(unsigned __int8 *)(v224 + v221++);
            if (v225 != 32)
            {
              int v222 = v221;
              uint64_t v219 = v221;
              goto LABEL_254;
            }
          }
          int v222 = v307;
          uint64_t v219 = v200;
        }
      }
LABEL_254:
      int v178 = v222;
      do
        ++v178;
      while (v200 > (unsigned __int16)v178
           && *(unsigned char *)(*(void *)(a1 + 1016) + (unsigned __int16)v178) != 32);
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"processing word from %d to %d", v94, v95, v96, v219);
      unsigned __int16 v330 = 0;
      unsigned __int16 v313 = v178 - v222;
      unsigned int OrthPinyinWords = wordSeg_GetOrthPinyinWords(a1, (unsigned __int16)(v178 - v222), *(void *)(a1 + 1016) + (unsigned __int16)v222, &v330);
      if (!OrthPinyinWords)
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61002, (uint64_t)"%s%s", v227, v228, v229, v230, "parsing region");
        goto LABEL_313;
      }
      unsigned int v231 = OrthPinyinWords;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"got %d words", v228, v229, v230, OrthPinyinWords);
      uint64_t v232 = *(void *)(a1 + 1048);
      if (!v232)
      {
        uint64_t v240 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 136);
        *(void *)(a1 + 1048) = v240;
        if (!v240) {
          goto LABEL_309;
        }
        __int16 v239 = 16;
        goto LABEL_264;
      }
      uint64_t v233 = *(unsigned __int16 *)(a1 + 1058);
      if (*(unsigned __int16 *)(a1 + 1056) + 1 >= v233)
      {
        uint64_t v234 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v232, 8 * v233 + 136);
        if (!v234) {
          goto LABEL_309;
        }
        *(void *)(a1 + 1048) = v234;
        __int16 v239 = *(_WORD *)(a1 + 1058) + 16;
LABEL_264:
        *(_WORD *)(a1 + 1058) = v239;
      }
      uint64_t v241 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (4 * v231) | 1);
      if (!v241)
      {
LABEL_309:
        uint64_t v277 = 2359304202;
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v235, v236, v237, v238, v286);
        goto LABEL_314;
      }
      uint64_t v242 = *(unsigned __int16 *)(a1 + 1056);
      *(void *)(*(void *)(a1 + 1048) + 8 * v242) = v241;
      *(_WORD *)(a1 + 1056) = v242 + 1;
      int v315 = v219;
      unsigned __int16 v309 = v222;
      if (v300 <= (unsigned __int16)v171)
      {
        int v324 = 0;
        goto LABEL_286;
      }
      uint64_t v319 = v241;
      int v324 = 0;
      int v317 = 0;
      int v243 = 0;
      unsigned __int16 v244 = 0;
      uint64_t v171 = (unsigned __int16)v171;
      while (1)
      {
        uint64_t v245 = v223 + 72 * v171;
        v248 = *(const char **)(v245 + 16);
        v247 = (void *)(v245 + 16);
        v246 = v248;
        if (v248) {
          break;
        }
LABEL_282:
        if (++v171 < (unint64_t)v300)
        {
          LOWORD(v170) = 0;
          int v243 = v244;
          if (v231 > v244) {
            continue;
          }
        }
        LOWORD(v170) = 0;
        LODWORD(v219) = v315;
        goto LABEL_286;
      }
      unsigned __int16 v249 = cstdlib_strlen(v246);
      if (!v324)
      {
        if (v317)
        {
          int v324 = 0;
        }
        else
        {
          uint64_t v250 = v223 + 72 * v171;
          int v317 = *(_DWORD *)(v250 + 68);
          int v324 = *(_DWORD *)(v250 + 64) + 2 * (unsigned __int16)v170;
        }
      }
      int v251 = (unsigned __int16)v170;
      int v252 = (v249 >> 2) - (unsigned __int16)v170;
      int v170 = v231 - v243;
      if (v252 < (int)(v231 - v243))
      {
        unsigned int v253 = 4 * (unsigned __int16)v252;
        if (v253)
        {
          v254 = (unsigned __int8 *)(*v247 + (4 * v251));
          v255 = (unsigned char *)(v319 + (4 * v243));
          uint64_t v256 = 1 - v253;
          while (1)
          {
            int v257 = *v254;
            unsigned char *v255 = v257;
            if (!v257) {
              break;
            }
            ++v255;
            ++v254;
            if (++v256 == 1) {
              goto LABEL_281;
            }
          }
          if (v256) {
            bzero(v255, -v256);
          }
        }
LABEL_281:
        v244 += v252;
        uint64_t v223 = v320;
        goto LABEL_282;
      }
      BOOL v113 = v231 == v244;
      LODWORD(v219) = v315;
      if (!v113)
      {
        v273 = (unsigned __int8 *)(*(void *)(v320 + 72 * (unsigned __int16)v171 + 16) + (4 * v251));
        v274 = (unsigned char *)(v319 + (4 * v243));
        uint64_t v275 = 1 - 4 * v170;
        while (1)
        {
          int v276 = *v273;
          unsigned char *v274 = v276;
          if (!v276) {
            break;
          }
          ++v274;
          ++v273;
          if (++v275 == 1) {
            goto LABEL_301;
          }
        }
        if (v275) {
          bzero(v274, -v275);
        }
      }
LABEL_301:
      if (v252 == v170)
      {
        LOWORD(v170) = 0;
        LODWORD(v171) = v171 + 1;
      }
LABEL_286:
      unsigned int MrkInsertPos = wordSeg_GetMrkInsertPos(a1, *(_DWORD *)(*(void *)(a1 + 1032) + 12) + (int)v219, *(_DWORD *)(*(void *)(a1 + 1032) + 12) + v219 + v313);
      if (*(_DWORD *)(a1 + 1188) == 1) {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"add WORD marker at index %d (spos=%d, epos=%d)", v258, v259, v260, MrkInsertPos);
      }
      uint64_t MrkMemory = wordSeg_GetMrkMemory(a1, MrkInsertPos);
      if ((MrkMemory & 0x80000000) != 0) {
        goto LABEL_305;
      }
      uint64_t v262 = *(void *)(a1 + 1032);
      v263 = (_DWORD *)(v262 + 32 * MrkInsertPos);
      v263[3] = *(_DWORD *)(v262 + 12) + v315;
      v263[4] = v313;
      _DWORD *v263 = 1;
      int v264 = (unsigned __int16)(4 * v231) >> 1;
      v263[1] = v324;
      v263[2] = v264;
      unsigned int v268 = wordSeg_GetMrkInsertPos(a1, *(_DWORD *)(v262 + 12) + v315, *(_DWORD *)(v262 + 12) + v315 + (unsigned __int16)(4 * v231));
      if (*(_DWORD *)(a1 + 1188) == 1) {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 5, 0, (uint64_t)"add HEX marker at index %d (spos=%d, epos=%d)", v265, v266, v267, v268);
      }
      uint64_t MrkMemory = wordSeg_GetMrkMemory(a1, v268);
      if ((MrkMemory & 0x80000000) != 0) {
        goto LABEL_305;
      }
      uint64_t v269 = *(void *)(a1 + 1032) + 32 * v268;
      *(_DWORD *)uint64_t v269 = 37;
      *(void *)(v269 + 24) = *(void *)(*(void *)(a1 + 1048) + 8 * *(unsigned __int16 *)(a1 + 1056) - 8);
      uint64_t v270 = *(void *)(a1 + 1032);
      int v271 = *(_DWORD *)(v270 + 12) + v315;
      v272 = (_DWORD *)(v270 + 32 * v268);
      v272[3] = v271;
      v272[4] = 2 * (unsigned __int16)(4 * v231);
      v272[1] = v324;
      v272[2] = v264;
      uint64_t v200 = (unsigned __int16)v307;
    }
    while ((unsigned __int16)v307 > (unsigned __int16)v178);
LABEL_303:
    Utf8_LengthInUtf8chars(*(void *)(a1 + 1016), v309);
    unsigned __int16 v168 = v176;
    int v165 = v303;
    unsigned int v166 = v302;
    unsigned int v172 = v299;
LABEL_196:
    int v169 = v176 + 1;
    unsigned int v167 = (unsigned __int16)(v176 + 1);
  }
  while (v166 > v167);
LABEL_304:
  uint64_t v277 = 0;
  *(_DWORD *)(*(void *)(a1 + 1032) + 16) = v165;
  return v277;
}

uint64_t fe_word_seg_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 86237, 1208) & 0x80000000) != 0) {
    return 2359304200;
  }
  uint64_t v3 = *(void *)(a1 + 8);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 64), v3);
}

uint64_t fe_word_seg_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2359304193;
  }
  uint64_t result = 0;
  *a2 = &IWordSeg;
  return result;
}

uint64_t wordSeg_GetNewCharStr(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = *a2;
  if (v6)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v6);
    *a2 = 0;
  }
  uint64_t v7 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, a3 + 1);
  *a2 = v7;
  if (v7) {
    return 0;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v8, v9, v10, v11, v13);
  return 2359304202;
}

uint64_t wordSeg_GetOrthPinyinWords(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int16 *a4)
{
  int v8 = *(_DWORD *)(a1 + 1200);
  *a4 = 0;
  if (v8)
  {
    if (a2)
    {
      LOWORD(v9) = 0;
      unsigned __int16 v10 = 0;
      do
      {
        unsigned __int16 v11 = *a4 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(a3 + (unsigned __int16)v9));
        *a4 = v11;
        *(_WORD *)(a1 + 2 * v10++ + 1060) = v11;
        unsigned int v9 = *a4;
      }
      while (v9 < a2);
      return v10;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  unsigned __int16 v10 = 0;
  for (unsigned __int16 i = 0; i < a2; *a4 = i)
  {
    while (1)
    {
      unsigned int v13 = *(unsigned __int8 *)(a3 + i);
      if (v13 - 97 > 0x19) {
        break;
      }
      *a4 = ++i;
      if (a2 <= i)
      {
        if (a2 == i) {
          return 0;
        }
        goto LABEL_17;
      }
    }
    if ((v13 < 0x31 || v13 > *(unsigned __int8 *)(a1 + 1196))
      && (!i || v13 != 39 || *(unsigned char *)(a3 + i - 1) != 114))
    {
      goto LABEL_28;
    }
LABEL_17:
    *(_WORD *)(a1 + 2 * v10++ + 1060) = i + 1;
    unsigned __int16 i = *a4 + 1;
  }
  if (a2 == i)
  {
    if (i)
    {
      unsigned int v14 = *(unsigned __int8 *)(a3 + i - 1);
      if ((v14 < 0x31 || v14 > *(unsigned __int8 *)(a1 + 1196))
        && (a2 < 3 || *(unsigned char *)(a3 + a2 - 2) != 114 || *(unsigned char *)(a3 + a2 - 1) != 39))
      {
        LOBYTE(v13) = *(unsigned char *)(a3 + i);
LABEL_28:
        if (!cstdlib_strchr("|-=*()&%^@#$", (char)v13)) {
          return 0;
        }
      }
    }
  }
  return v10;
}

uint64_t wordSeg_GrowDepesLayers(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned int a4, const char *a5, const char *a6, const char *a7, const char *a8, unsigned __int16 a9, unsigned __int16 a10, int a11)
{
  unsigned __int16 v11 = a7;
  if (!*(_DWORD *)(a1 + 1200))
  {
    uint64_t v37 = (char **)(a1 + 960);
    unsigned __int16 v38 = cstdlib_strlen(*(const char **)(a1 + 960));
    int v39 = (char **)(a1 + 952);
    unsigned __int16 v76 = cstdlib_strlen(*(const char **)(a1 + 952));
    uint64_t v73 = a2;
    unsigned int v40 = *a2;
    unint64_t v41 = v38 + (unint64_t)a9;
    if (v41 > v40)
    {
      if (a9 <= 0x20u) {
        __int16 v42 = 32;
      }
      else {
        __int16 v42 = a9;
      }
      unsigned __int16 __n = v40 + v42;
      unsigned int v43 = (unsigned __int16)(v40 + v42);
      uint64_t result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 952), v43);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      size_t v44 = (int)(v43 - v38);
      cstdlib_memset((void *)(*(void *)(a1 + 952) + v76), 0, v44);
      uint64_t result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 960), v43);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      cstdlib_memset((void *)(*(void *)(a1 + 960) + v38), 0, v44);
      uint64_t result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 968), __n);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      cstdlib_memset((void *)(*(void *)(a1 + 968) + v76), 0, v44);
      uint64_t result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 976), __n);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      cstdlib_memset((void *)(*(void *)(a1 + 976) + v76), 0, v44);
      *uint64_t v73 = __n;
      unsigned __int16 v11 = a7;
    }
    if (a11 == 1)
    {
      cstdlib_strncat(*(char **)(a1 + 952), (const char *)(*(void *)(a1 + 1000) + a4), a10);
      *(unsigned char *)(*(void *)(a1 + 952) + v76 + (unint64_t)a10) = 0;
      cstdlib_strncat(*(char **)(a1 + 960), (const char *)(*(void *)(a1 + 1016) + a3), a9);
      *(unsigned char *)(*(void *)(a1 + 960) + v41) = 0;
      if (a10)
      {
        for (unsigned int i = 0; i < a10; ++i)
          cstdlib_strcat(*(char **)(a1 + 968), " ");
        for (unsigned int j = 0; j < a10; ++j)
          cstdlib_strcat(*(char **)(a1 + 976), " ");
      }
    }
    else
    {
      int v47 = v11;
      unsigned __int16 v48 = cstdlib_strlen(a5);
      unsigned __int16 v49 = cstdlib_strlen(a6);
      unsigned __int16 v50 = cstdlib_strlen(v47);
      unsigned __int16 v81 = cstdlib_strlen(a8);
      cstdlib_strcat(*v39, a5);
      int v51 = a10 - v48;
      if (v51 >= 1)
      {
        int v52 = 0;
        do
        {
          cstdlib_strcat(*v39, "~");
          ++v52;
        }
        while (v51 > (unsigned __int16)v52);
      }
      cstdlib_strcat(*v37, a6);
      int v53 = a10 - v49;
      if (v53 >= 1)
      {
        int v54 = 0;
        do
        {
          cstdlib_strcat(*v37, "~");
          ++v54;
        }
        while (v53 > (unsigned __int16)v54);
      }
      cstdlib_strcat(*(char **)(a1 + 968), a7);
      int v55 = a10 - v50;
      if (v55 >= 1)
      {
        int v56 = 0;
        do
        {
          cstdlib_strcat(*(char **)(a1 + 968), "~");
          ++v56;
        }
        while (v55 > (unsigned __int16)v56);
      }
      cstdlib_strcat(*(char **)(a1 + 976), a8);
      int v57 = a10 - v81;
      if (v57 >= 1)
      {
        int v58 = 0;
        do
        {
          cstdlib_strcat(*(char **)(a1 + 976), "~");
          ++v58;
        }
        while (v57 > (unsigned __int16)v58);
      }
    }
    return 0;
  }
  uint64_t v16 = (char **)(a1 + 952);
  unsigned __int16 v17 = cstdlib_strlen(*(const char **)(a1 + 952));
  __int16 v75 = (char **)(a1 + 960);
  unsigned __int16 v18 = cstdlib_strlen(*(const char **)(a1 + 960));
  uint64_t v72 = (char **)(a1 + 968);
  unsigned __int16 v19 = cstdlib_strlen(*(const char **)(a1 + 968));
  unsigned __int16 v20 = cstdlib_strlen(a6);
  uint64_t v21 = v11;
  unsigned __int16 v22 = v20;
  unsigned __int16 v23 = cstdlib_strlen(v21);
  unsigned __int16 v24 = cstdlib_strlen(a8);
  unsigned int v25 = *a2;
  if (a9 + v17 + v22 < v25 && a9 + v18 + v23 < v25 && a9 + v19 + v24 < v25)
  {
LABEL_21:
    if (a11 == 1)
    {
      cstdlib_strncat(*(char **)(a1 + 952), (const char *)(*(void *)(a1 + 1000) + a4), a10);
      *(unsigned char *)(*(void *)(a1 + 952) + v17 + (unint64_t)a10) = 0;
      if (a10)
      {
        for (unsigned int k = 0; k < a10; ++k)
          cstdlib_strcat(*v75, " ");
        for (unsigned int m = 0; m < a10; ++m)
          cstdlib_strcat(*v72, " ");
      }
    }
    else
    {
      int v59 = cstdlib_strlen(a6);
      unsigned __int16 v60 = Utf8_LengthInUtf8chars((unint64_t)a6, v59);
      int v61 = cstdlib_strlen(a7);
      unsigned __int16 v62 = Utf8_LengthInUtf8chars((unint64_t)a7, v61);
      int v63 = cstdlib_strlen(a8);
      unsigned __int16 v64 = Utf8_LengthInUtf8chars((unint64_t)a8, v63);
      cstdlib_strcat(*v16, a6);
      int v65 = a10 - v60;
      if (v65 >= 1)
      {
        int v66 = 0;
        do
        {
          cstdlib_strcat(*v16, "~");
          ++v66;
        }
        while (v65 > (unsigned __int16)v66);
      }
      cstdlib_strcat(*v75, a7);
      int v67 = a10 - v62;
      if (v67 >= 1)
      {
        int v68 = 0;
        do
        {
          cstdlib_strcat(*v75, "~");
          ++v68;
        }
        while (v67 > (unsigned __int16)v68);
      }
      cstdlib_strcat(*v72, a8);
      int v69 = a10 - v64;
      if (v69 >= 1)
      {
        int v70 = 0;
        do
        {
          cstdlib_strcat(*v72, "~");
          ++v70;
        }
        while (v69 > (unsigned __int16)v70);
      }
    }
    return 0;
  }
  unsigned int v28 = v23;
  if (v22 > v23) {
    unsigned int v28 = v22;
  }
  if (v28 <= v24) {
    unsigned int v28 = v24;
  }
  unsigned int v29 = v28 + a9;
  unsigned __int16 v30 = v25 + a9 + v28;
  unsigned __int16 v31 = v25 + 32;
  if (v29 <= 0x20) {
    unsigned __int16 v32 = v31;
  }
  else {
    unsigned __int16 v32 = v30;
  }
  uint64_t result = wordSeg_ReallocCharStr(a1, (uint64_t *)(a1 + 952), v32);
  if ((result & 0x80000000) == 0)
  {
    cstdlib_memset((void *)(*(void *)(a1 + 952) + v17), 0, v32 - v17);
    uint64_t result = wordSeg_ReallocCharStr(a1, (uint64_t *)v75, v32);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_memset((void *)(*(void *)(a1 + 960) + v18), 0, v32 - v18);
      uint64_t result = wordSeg_ReallocCharStr(a1, (uint64_t *)v72, v32);
      if ((result & 0x80000000) == 0)
      {
        cstdlib_memset(&(*v72)[v19], 0, v32 - v19);
        *a2 = v32;
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t wordSeg_ReallocCharStr(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *a2, a3 + 1);
  if (v5)
  {
    uint64_t v10 = v5;
    uint64_t result = 0;
    *a2 = v10;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v6, v7, v8, v9, v12);
    return 2359304202;
  }
  return result;
}

uint64_t wordSeg_GetMrkInsertPos(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 1040);
  if (v3 < 2) {
    return 1;
  }
  uint64_t v4 = (_DWORD *)(*(void *)(a1 + 1032) + 48);
  uint64_t v5 = 1;
  while (*(v4 - 1) <= a2)
  {
    ++v5;
    v4 += 8;
    if (v3 == v5) {
      return v3;
    }
  }
  uint64_t result = (unsigned __int16)v5;
  if (*(v4 - 1) == a2 && v3 > (unsigned __int16)v5)
  {
    while (*(v4 - 1) == a2 && *v4 + a2 <= a3)
    {
      v4 += 8;
      if (v3 == ++v5) {
        return v3;
      }
    }
    return (unsigned __int16)v5;
  }
  return result;
}

uint64_t wordSeg_GetMrkMemory(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 1040);
  if (v4 < *(unsigned __int16 *)(a1 + 1042))
  {
    uint64_t v5 = *(void *)(a1 + 1032);
LABEL_5:
    cstdlib_memmove((void *)(v5 + 32 * (a2 + 1)), (const void *)(v5 + 32 * a2), 32 * (int)(v4 - a2));
    uint64_t result = 0;
    ++*(_WORD *)(a1 + 1040);
    return result;
  }
  *(_WORD *)(a1 + 1042) = v4 + 1;
  uint64_t v5 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 1032), 32 * (unsigned __int16)(v4 + 1));
  if (v5)
  {
    *(void *)(a1 + 1032) = v5;
    unsigned int v4 = *(unsigned __int16 *)(a1 + 1040);
    goto LABEL_5;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WORDSEG", 61000, 0, v6, v7, v8, v9, v11);
  return 2359304202;
}

uint64_t tryLoadingCrfModel(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  int v8 = a8;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"looking for CRF PW model at %s", (uint64_t)a6, a7, a8, a7);
  uint64_t Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, a6, 2, a7, "CRPH", v8, (v8 & 0xFFFFFFu) >> 16, 0);
  if ((Only_ReferenceCnt & 0x80000000) != 0) {
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"no CRF PW model found", v16, v17, v18, a7);
  }
  return Only_ReferenceCnt;
}

uint64_t pw_crf_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t *a8, unsigned __int16 *a9, _DWORD *a10)
{
  uint64_t v13 = a1;
  uint64_t v222 = *MEMORY[0x263EF8340];
  uint64_t v209 = 0;
  unsigned int v208 = 0;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  int v14 = 0;
  if (a7)
  {
    uint64_t v15 = a7;
    uint64_t v16 = (const char **)(a6 + 8);
    do
    {
      uint64_t v17 = *(v16 - 1);
      if (cstdlib_strcmp(*v16, "non")) {
        *a10 = 0;
      }
      v14 += cstdlib_strlen(v17);
      v16 += 5;
      --v15;
    }
    while (v15);
  }
  if (*a10) {
    return 0;
  }
  uint64_t v18 = 2586845194;
  uint64_t v19 = heap_Calloc(*(void **)(v13 + 8), (unsigned __int16)v14, 8);
  if (!v19) {
    return v18;
  }
  uint64_t v20 = v19;
  uint64_t v21 = heap_Calloc(*(void **)(v13 + 8), (unsigned __int16)v14, 8);
  unsigned __int16 v22 = *(void **)(v13 + 8);
  uint64_t v196 = v21;
  if (!v21)
  {
    uint64_t v119 = v20;
    goto LABEL_191;
  }
  uint64_t v191 = a8;
  uint64_t v23 = heap_Calloc(v22, (unsigned __int16)v14, 8);
  if (!v23)
  {
    heap_Free(*(void **)(v13 + 8), v20);
    unsigned __int16 v22 = *(void **)(v13 + 8);
    uint64_t v119 = v196;
    goto LABEL_191;
  }
  uint64_t v24 = v23;
  if (!a7) {
    goto LABEL_176;
  }
  unsigned int v199 = (void *)v20;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v190 = a6;
  unint64_t v192 = a7;
  uint64_t v194 = v13;
  uint64_t v195 = v23;
  do
  {
    uint64_t v193 = v25;
    uint64_t v27 = (const char **)(a6 + 40 * v25);
    int v198 = *v27;
    if (cstdlib_strlen(*v27))
    {
      uint64_t v28 = 0;
      int v200 = 0;
      unsigned int v29 = 0;
      do
      {
        uint64_t v30 = v26;
        char v31 = 83;
        char __s2 = 83;
        long long v220 = 0u;
        memset(v221, 0, sizeof(v221));
        *(_OWORD *)__s = 0u;
        long long v219 = 0u;
        long long v216 = 0u;
        memset(v217, 0, sizeof(v217));
        *(_OWORD *)__s1 = 0u;
        long long v215 = 0u;
        unsigned __int16 v32 = &v198[v28];
        unsigned int v33 = utf8_determineUTF8CharLength(v198[v28]);
        size_t v34 = v33;
        if (cstdlib_strlen(*v27) != v33)
        {
          if (cstdlib_strlen(*v27) - v33 == v28)
          {
            char v31 = 69;
          }
          else if (v29)
          {
            char v31 = 77;
          }
          else
          {
            char v31 = 66;
          }
        }
        char __s2 = v31;
        unsigned __int8 __c = 0;
        uint64_t v210 = 0;
        cstdlib_strncpy(__c_1, v32, v33 + 1);
        __c_1[v33] = 0;
        unsigned __int16 v211 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "wpcrf", __c_1, &v210, &v211, &__c) & 0x80000000) == 0)
        {
          if (v211)
          {
            uint64_t v38 = 0;
            while (1)
            {
              int v39 = cstdlib_strchr(*(char **)(v210 + 8 * v38), __c);
              if (v39) {
                break;
              }
              if (++v38 >= (unint64_t)v211) {
                goto LABEL_61;
              }
            }
            __int16 v42 = v39;
            unsigned int v43 = *(const char **)(v210 + 8 * v38);
            uint64_t v44 = v39 - v43;
            if (v39 == v43)
            {
              unsigned int v45 = __c_1;
            }
            else
            {
              if (v44 < 0) {
                LODWORD(v44) = v43 - v39;
              }
              unsigned int v45 = __s1;
              cstdlib_strncat(__s1, v43, v44);
            }
            cstdlib_strcat(__s, v45);
            int v46 = v42 + 1;
            int v47 = cstdlib_strchr(v42 + 1, __c);
            if (v47)
            {
              unsigned __int16 v48 = v47;
              int v49 = 0;
              do
              {
                cstdlib_strcat(__s, " ");
                unsigned int v50 = v48 - v46;
                if (v48 - v46 < 0) {
                  unsigned int v50 = v46 - v48;
                }
                uint64_t v51 = v50;
                cstdlib_strncat(__s, v46, v50);
                if (!v49)
                {
                  BOOL v52 = v51 == 1 && *v46 == 49;
                  *(_DWORD *)(v196 + 8 * v30) = v52;
                }
                int v46 = v48 + 1;
                unsigned __int16 v48 = cstdlib_strchr(v48 + 1, __c);
                --v49;
              }
              while (v48);
            }
LABEL_60:
            cstdlib_strcat(__s, " ");
            cstdlib_strncat(__s, &__s2, 1uLL);
            uint64_t v13 = v194;
            uint64_t v24 = v195;
            goto LABEL_61;
          }
          if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "wpcrf", "NULL", &v210, &v211, &__c) & 0x80000000) == 0&& v211)
          {
            uint64_t v40 = 0;
            while (1)
            {
              unint64_t v41 = cstdlib_strchr(*(char **)(v210 + 8 * v40), __c);
              if (v41) {
                break;
              }
              if (++v40 >= (unint64_t)v211) {
                goto LABEL_61;
              }
            }
            int v53 = v41;
            int v54 = *(const char **)(v210 + 8 * v40);
            uint64_t v55 = v41 - v54;
            if (v41 == v54)
            {
              int v56 = __c_1;
            }
            else
            {
              if (v55 < 0) {
                LODWORD(v55) = v54 - v41;
              }
              int v56 = __s1;
              cstdlib_strncat(__s1, v54, v55);
            }
            cstdlib_strcat(__s, v56);
            int v57 = v53 + 1;
            int v58 = cstdlib_strchr(v57, __c);
            if (v58)
            {
              int v59 = v58;
              do
              {
                cstdlib_strcat(__s, " ");
                unsigned int v60 = v59 - v57;
                if (v59 - v57 < 0) {
                  unsigned int v60 = v57 - v59;
                }
                cstdlib_strncat(__s, v57, v60);
                int v57 = v59 + 1;
                int v59 = cstdlib_strchr(v59 + 1, __c);
              }
              while (v59);
            }
            goto LABEL_60;
          }
        }
LABEL_61:
        if (LogLevel >= 5) {
          log_OutText(*(void *)(v13 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[PWCRF] Feat: %s", v35, v36, v37, (uint64_t)__s);
        }
        uint64_t v26 = v30;
        uint64_t v61 = heap_Calloc(*(void **)(v13 + 8), 1, 69);
        *(void *)(v24 + 8 * v30) = v61;
        uint64_t v20 = (uint64_t)v199;
        if (!v61)
        {
LABEL_169:
          uint64_t v18 = 2584748042;
          goto LABEL_170;
        }
        if (!cstdlib_strlen(__s1))
        {
          cstdlib_strncpy(*(char **)(v24 + 8 * v30), v32, v34);
          goto LABEL_68;
        }
        if (cstdlib_strcmp(__s1, "NULL"))
        {
          cstdlib_strcpy(*(char **)(v24 + 8 * v30), __s1);
LABEL_68:
          unsigned __int16 v62 = *(void **)(v13 + 8);
          size_t v63 = cstdlib_strlen(__s);
          unsigned __int16 v64 = (char *)heap_Calloc(v62, 1, v63 + 1);
          v199[v30] = v64;
          if (!v64) {
            goto LABEL_169;
          }
          cstdlib_strcpy(v64, __s);
          if (v200)
          {
            if (__s2 == 69) {
              char v65 = 83;
            }
            else {
              char v65 = 66;
            }
            int v66 = (const char *)v199[v30];
            v66[cstdlib_strlen(v66) - 1] = v65;
            LODWORD(v26) = v30;
          }
          int v200 = 0;
          uint64_t v26 = (v26 + 1);
          goto LABEL_85;
        }
        if (__s2 == 69 && v30)
        {
          int v67 = (const char *)v199[(v30 - 1)];
          if (v67[cstdlib_strlen(v67) - 1] == 66) {
            char v68 = 83;
          }
          else {
            char v68 = 69;
          }
          int v69 = (const char *)v199[(v30 - 1)];
          uint64_t v26 = v30;
          v69[cstdlib_strlen(v69) - 1] = v68;
        }
        else
        {
          int v70 = v200;
          if (__s2 == 66) {
            int v70 = 1;
          }
          int v200 = v70;
        }
        heap_Free(*(void **)(v13 + 8), *(void *)(v24 + 8 * v30));
        *(void *)(v24 + 8 * v30) = 0;
LABEL_85:
        v29 += v34;
        uint64_t v28 = v29;
      }
      while (cstdlib_strlen(*v27) > v29);
    }
    uint64_t v25 = v193 + 1;
    a6 = v190;
  }
  while (v193 + 1 != v192);
  uint64_t v20 = (uint64_t)v199;
  if (!v26)
  {
LABEL_176:
    unsigned int v120 = 0;
    uint64_t v76 = v209;
    LODWORD(v75) = v208;
    uint64_t v18 = 2584748040;
LABEL_178:
    LOBYTE(v26) = 1;
    goto LABEL_179;
  }
  uint64_t v71 = crf_Process(a2, v199, v26, &v209, &v208);
  unint64_t v75 = v208;
  uint64_t v76 = v209;
  if (!v208)
  {
    uint64_t v18 = v71;
    goto LABEL_171;
  }
  uint64_t v77 = 0;
  uint64_t v78 = 8 * v208;
  unint64_t v79 = 1;
  while (2)
  {
    if (*(_DWORD *)(v196 + v77))
    {
      if (v77)
      {
        **(unsigned char **)(v76 + v77) = 69;
        int v80 = *(char **)(v76 + v77 - 8);
        int v81 = *v80;
        if (v81 == 83)
        {
          char v82 = 66;
LABEL_100:
          *int v80 = v82;
        }
        else if (v81 == 69)
        {
          char v82 = 77;
          goto LABEL_100;
        }
        if (v79 < v75)
        {
          int v85 = *(unsigned char **)(v76 + v77 + 8);
          int v86 = *v85;
          if (v86 == 69)
          {
            *int v85 = 83;
          }
          else if (v86 == 77)
          {
            *int v85 = 66;
          }
        }
      }
      else if (v75 != 1)
      {
        **(unsigned char **)uint64_t v76 = 66;
        uint64_t v83 = *(unsigned char **)(v76 + 8);
        int v84 = *v83;
        if (v84 == 83)
        {
          *uint64_t v83 = 69;
        }
        else if (v84 == 66)
        {
          *uint64_t v83 = 77;
        }
      }
    }
    v77 += 8;
    ++v79;
    if (v78 != v77) {
      continue;
    }
    break;
  }
  int v87 = (unsigned __int8 **)(v76 + 8);
  unint64_t v88 = v75;
  while (2)
  {
    __int16 v89 = *(v87 - 1);
    int v90 = *v89;
    if (v88 == 1)
    {
      if (v90 == 77)
      {
        LOBYTE(v91) = 69;
      }
      else
      {
        if (v90 != 66) {
          break;
        }
        LOBYTE(v91) = 83;
      }
LABEL_127:
      *__int16 v89 = v91;
    }
    else
    {
      if (*v89 > 0x4Cu)
      {
        if (v90 != 77)
        {
          if (v90 == 83 && (**v87 | 8) == 0x4D)
          {
            LOBYTE(v91) = 66;
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        int v92 = **v87;
        LOBYTE(v91) = 69;
      }
      else
      {
        if (v90 != 66)
        {
          if (v90 == 69)
          {
            int v91 = **v87 | 8;
            if (v91 == 77) {
              goto LABEL_127;
            }
          }
          goto LABEL_128;
        }
        int v92 = **v87;
        LOBYTE(v91) = 83;
      }
      if (v92 == 66 || v92 == 83) {
        goto LABEL_127;
      }
    }
LABEL_128:
    ++v87;
    if (--v88) {
      continue;
    }
    break;
  }
  if (LogLevel >= 5)
  {
    do
    {
      uint64_t v93 = *(unsigned char **)v76;
      v76 += 8;
      log_OutText(*(void *)(v13 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[PWCRF] Predicted Tag: %s", v72, v73, v74, (uint64_t)v93);
      --v75;
    }
    while (v75);
  }
  unsigned int v94 = v208;
  uint64_t v95 = v209;
  int v204 = v26;
  if (!v208)
  {
    unsigned int v127 = 0;
    goto LABEL_246;
  }
  uint64_t v96 = v209;
  unsigned int v97 = 0;
  uint64_t v98 = v208 - 1;
  unsigned int v99 = v208 - 1;
  do
  {
    unsigned int v100 = cstdlib_strlen((const char *)v199[v97]) - 1;
    uint64_t v101 = *(unsigned char **)(v96 + 8 * v97);
    int v102 = *v101;
    if (v102 == 83)
    {
      if (*(unsigned char *)(v199[v97] + v100) == 83 || (*uint64_t v101 = 66, v110 = v97 + 1, v110 >= v94))
      {
LABEL_149:
        ++v97;
        uint64_t v24 = v195;
        continue;
      }
      int v111 = *(unsigned __int8 *)(v199[v110]
                                + cstdlib_strlen((const char *)v199[v110])
                                - 1);
      unsigned int v112 = v97;
      while (v111 != 69)
      {
        **(unsigned char **)(v96 + 8 * v110) = 77;
        if (v98 == v110) {
          goto LABEL_149;
        }
        int v111 = *(unsigned __int8 *)(v199[v110 + 1] + cstdlib_strlen((const char *)v199[v110 + 1]) - 1);
        ++v112;
        ++v110;
      }
      **(unsigned char **)(v96 + 8 * v110) = 69;
      unsigned int v113 = v112 + 2;
      if (v112 + 2 >= v94)
      {
LABEL_160:
        uint64_t v24 = v195;
        goto LABEL_163;
      }
      int v114 = *(char **)(v96 + 8 * v113);
      int v115 = *v114;
      uint64_t v24 = v195;
      if (v115 == 77) {
        goto LABEL_159;
      }
      if (v115 == 69)
      {
        char v116 = 83;
LABEL_162:
        *int v114 = v116;
      }
    }
    else
    {
      if (v102 != 69) {
        goto LABEL_149;
      }
      int v103 = *(unsigned __int8 *)(v199[v97] + v100);
      if (v103 == 69) {
        goto LABEL_149;
      }
      if (v103 == 83) {
        goto LABEL_149;
      }
      *uint64_t v101 = 77;
      unsigned int v104 = v97 + 1;
      if (v97 + 1 >= v94) {
        goto LABEL_149;
      }
      uint64_t v105 = (unsigned char **)(v96 + 8 * v104);
      unsigned int v106 = v97;
      uint64_t v107 = (const char **)&v199[v104];
      while (1)
      {
        int v108 = (*v107)[cstdlib_strlen(*v107) - 1];
        if (v108 == 83 || v108 == 69) {
          break;
        }
        unsigned __int16 v109 = *v105++;
        unsigned char *v109 = 77;
        ++v106;
        ++v107;
        if (v99 == v106) {
          goto LABEL_149;
        }
      }
      **uint64_t v105 = 69;
      unsigned int v113 = v106 + 2;
      if (v106 + 2 >= v94) {
        goto LABEL_160;
      }
      int v114 = *(char **)(v96 + 8 * v113);
      int v117 = *v114;
      if (v117 == 69)
      {
        char v116 = 83;
        uint64_t v24 = v195;
        goto LABEL_162;
      }
      uint64_t v24 = v195;
      if (v117 == 77)
      {
LABEL_159:
        char v116 = 66;
        goto LABEL_162;
      }
    }
LABEL_163:
    if (v113 <= 1) {
      unsigned int v118 = v97;
    }
    else {
      unsigned int v118 = 0;
    }
    unsigned int v97 = v118 + v113;
  }
  while (v97 < v94);
  unsigned int v127 = v208;
  uint64_t v95 = v209;
  if (!v208) {
    goto LABEL_238;
  }
  uint64_t v128 = 0;
  LODWORD(v129) = 0;
  while (2)
  {
    uint64_t v130 = v95;
    if (!cstdlib_strcmp(*(const char **)(v190 + 40 * v128 + 16), "latin"))
    {
      int v136 = Utf8_Utf8NbrOfSymbols(*(const char **)(v190 + 40 * v128));
      if (!v128) {
        goto LABEL_218;
      }
      if (!v129) {
        goto LABEL_218;
      }
      if (!cstdlib_strlen((const char *)v199[v129])) {
        goto LABEL_218;
      }
      uint64_t v137 = (v129 - 1);
      if (!cstdlib_strlen((const char *)v199[v137])) {
        goto LABEL_218;
      }
      if (!cstdlib_strcmp(*(const char **)(v190 + 40 * (v128 - 1) + 16), "latin")) {
        goto LABEL_218;
      }
      unint64_t v138 = (const char *)v199[v129];
      if (v138[cstdlib_strlen(v138) - 1] == 77) {
        goto LABEL_218;
      }
      uint64_t v139 = (const char *)v199[v137];
      if (v139[cstdlib_strlen(v139) - 1] == 77) {
        goto LABEL_218;
      }
      int v140 = *(char **)(v130 + 8 * v137);
      int v141 = *v140;
      if (v141 == 77)
      {
        char v142 = 69;
      }
      else
      {
        if (v141 != 66)
        {
LABEL_213:
          unsigned __int16 v143 = *(char **)(v130 + 8 * v129);
          int v144 = *v143;
          if (v144 == 69)
          {
            char v145 = 83;
            goto LABEL_217;
          }
          if (v144 == 77)
          {
            char v145 = 66;
LABEL_217:
            *unsigned __int16 v143 = v145;
          }
LABEL_218:
          uint64_t v129 = (v129 + v136 - 1);
          if (v129 >= v127) {
            goto LABEL_222;
          }
          if (!cstdlib_strcmp(*(const char **)(v190 + 40 * v128 + 56), "latin")) {
            goto LABEL_222;
          }
          uint64_t v146 = (v129 - 1);
          int v147 = (const char *)v199[v146];
          if (v147[cstdlib_strlen(v147) - 1] == 77) {
            goto LABEL_222;
          }
          unsigned __int16 v148 = (const char *)v199[v129];
          if (v148[cstdlib_strlen(v148) - 1] == 77) {
            goto LABEL_222;
          }
          uint64_t v95 = v130;
          unsigned __int16 v149 = *(char **)(v130 + 8 * v146);
          int v150 = *v149;
          if (v150 == 77)
          {
            char v151 = 69;
          }
          else
          {
            if (v150 != 66) {
              goto LABEL_231;
            }
            char v151 = 83;
          }
          *unsigned __int16 v149 = v151;
LABEL_231:
          uint64_t v152 = *(char **)(v130 + 8 * v129);
          int v153 = *v152;
          if (v153 == 69)
          {
            char v154 = 83;
          }
          else
          {
            if (v153 != 77) {
              goto LABEL_223;
            }
            char v154 = 66;
          }
          *uint64_t v152 = v154;
          goto LABEL_223;
        }
        char v142 = 83;
      }
      *int v140 = v142;
      goto LABEL_213;
    }
    uint64_t v131 = v129;
    do
    {
      uint64_t v132 = v131;
      if ((int)v131 + 1 >= v127) {
        break;
      }
      uint64_t v133 = (const char *)v199[v131];
      if (v133[cstdlib_strlen(v133) - 1] == 69) {
        break;
      }
      uint64_t v134 = (const char *)v199[v132];
      size_t v135 = cstdlib_strlen(v134);
      uint64_t v131 = v132 + 1;
    }
    while (v134[v135 - 1] != 83);
    LODWORD(v129) = v132 + 1;
LABEL_222:
    uint64_t v95 = v130;
LABEL_223:
    if (++v128 < v192 && v129 < v127) {
      continue;
    }
    break;
  }
  unsigned int v127 = v208;
  uint64_t v95 = v209;
  uint64_t v24 = v195;
LABEL_238:
  uint64_t v13 = v194;
  uint64_t v20 = (uint64_t)v199;
  if (!v127)
  {
LABEL_246:
    unsigned __int16 v156 = 0;
    char v158 = 1;
    goto LABEL_247;
  }
  uint64_t v155 = 0;
  unsigned __int16 v156 = 0;
  do
  {
    int v157 = **(unsigned __int8 **)(v95 + v155);
    if (v157 == 83 || v157 == 69) {
      ++v156;
    }
    v155 += 8;
  }
  while (8 * v127 != v155);
  char v158 = 0;
LABEL_247:
  *a9 = v156;
  uint64_t v159 = heap_Calloc(*(void **)(v13 + 8), v156 + 1, 16);
  *uint64_t v191 = v159;
  if (v159)
  {
    if (v158)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v164 = v159;
      LODWORD(v165) = 0;
      int v166 = 0;
      LODWORD(v26) = v204;
      uint64_t v206 = v95;
      while (1)
      {
        int v167 = 0;
        uint64_t v168 = v165;
        unint64_t v165 = v165;
        do
        {
          int v169 = v167;
          int v170 = **(unsigned __int8 **)(v95 + 8 * v165);
          if (v170 == 69) {
            break;
          }
          BOOL v171 = v170 == 83;
          int v167 = v169 + 1;
          ++v165;
        }
        while (!v171 && v165 < v127);
        if (v168 < v127) {
          break;
        }
        unsigned __int16 v181 = 0;
        int v182 = 0;
LABEL_273:
        v166 += v182;
        LODWORD(v165) = v168 + v181;
        v164 += 16;
        uint64_t v95 = v206;
        if (v165 >= v127)
        {
          uint64_t v18 = 0;
          uint64_t v13 = v194;
          goto LABEL_170;
        }
      }
      unsigned __int16 v173 = 0;
      unsigned __int16 v174 = 0;
      uint64_t v175 = v168;
      while (1)
      {
        uint64_t v176 = (const char *)v199[v175];
        if (v176[cstdlib_strlen(v176) - 1] == 69
          || (uint64_t v180 = (const char *)v199[v175], v180[cstdlib_strlen(v180) - 1] == 83))
        {
          ++v173;
        }
        unsigned __int16 v181 = v174 + 1;
        if (v174 == (unsigned __int16)v169) {
          break;
        }
        ++v175;
        ++v174;
        if (v127 == v175)
        {
          int v182 = v173;
          uint64_t v24 = v195;
LABEL_272:
          uint64_t v20 = (uint64_t)v199;
          LODWORD(v26) = v204;
          goto LABEL_273;
        }
      }
      if (v173)
      {
        *(_WORD *)(v164 + 8) = v173;
        uint64_t v183 = heap_Alloc(*(void *)(v194 + 8), 2 * v173);
        *(void *)uint64_t v164 = v183;
        if (v183)
        {
          uint64_t v188 = 0;
          int v182 = v173;
          uint64_t v24 = v195;
          do
          {
            *(_WORD *)(v183 + 2 * v188) = *(_WORD *)(v190 + 40 * (v166 + v188) + 24);
            ++v188;
          }
          while (v173 != v188);
          goto LABEL_272;
        }
        uint64_t v18 = 2584748042;
        uint64_t v13 = v194;
        log_OutPublic(*(void *)(v194 + 32), (uint64_t)"FE_PW", 37000, 0, v184, v185, v186, v187, v189);
      }
      else
      {
        uint64_t v13 = v194;
        log_OutText(*(void *)(v194 + 32), (uint64_t)"FE_PW", 0, 0, (uint64_t)"No Lex Word Found in Current PW. Pos: %d", v177, v178, v179, v175);
        uint64_t v18 = 2584748047;
      }
      uint64_t v24 = v195;
      uint64_t v20 = (uint64_t)v199;
    }
  }
  else
  {
    uint64_t v18 = 2584748042;
    log_OutPublic(*(void *)(v13 + 32), (uint64_t)"FE_PW", 37000, 0, v160, v161, v162, v163, v189);
  }
  LODWORD(v26) = v204;
LABEL_170:
  uint64_t v76 = v209;
  LODWORD(v75) = v208;
  if (!v26)
  {
    unsigned int v120 = 0;
    goto LABEL_178;
  }
LABEL_171:
  unsigned int v120 = v26;
  uint64_t v26 = v26;
  int v121 = (uint64_t *)v20;
  do
  {
    if (*v121) {
      heap_Free(*(void **)(v13 + 8), *v121);
    }
    ++v121;
    --v26;
  }
  while (v26);
LABEL_179:
  heap_Free(*(void **)(v13 + 8), v20);
  heap_Free(*(void **)(v13 + 8), v196);
  if ((v26 & 1) == 0)
  {
    uint64_t v122 = v120;
    unsigned int v123 = (uint64_t *)v24;
    do
    {
      if (*v123) {
        heap_Free(*(void **)(v13 + 8), *v123);
      }
      ++v123;
      --v122;
    }
    while (v122);
  }
  heap_Free(*(void **)(v13 + 8), v24);
  if (v76)
  {
    if (v75)
    {
      uint64_t v124 = v75;
      unsigned __int16 v125 = (uint64_t *)v76;
      do
      {
        if (*v125) {
          heap_Free(*(void **)(v13 + 8), *v125);
        }
        ++v125;
        --v124;
      }
      while (v124);
    }
    unsigned __int16 v22 = *(void **)(v13 + 8);
    uint64_t v119 = v76;
LABEL_191:
    heap_Free(v22, v119);
  }
  return v18;
}

uint64_t fe_pw_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v38 = 0;
  *(void *)int v39 = 0;
  __s1 = 0;
  uint64_t v37 = 0;
  uint64_t igtree = 2584748039;
  uint64_t v35 = 0;
  __int16 v34 = -1;
  char v33 = 0;
  memset(v40, 0, sizeof(v40));
  if (!a5) {
    return igtree;
  }
  int v32 = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, v39);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_37;
  }
  uint64_t v12 = heap_Calloc(*(void **)(*(void *)v39 + 8), 1, 1192);
  if (!v12)
  {
    log_OutPublic(*(void *)(*(void *)v39 + 32), (uint64_t)"FE_PW", 37000, 0, v13, v14, v15, v16, v27);
    uint64_t igtree = 2584748042;
LABEL_38:
    fe_pw_ObjClose(*(void *)a5, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return igtree;
  }
  uint64_t v17 = v12;
  uint64_t inited = objc_GetObject(*(void *)(*(void *)v39 + 48), (uint64_t)"LINGDB", &v38);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_37;
  }
  *(void *)(v17 + 48) = *(void *)(v38 + 8);
  uint64_t inited = objc_GetObject(*(void *)(*(void *)v39 + 48), (uint64_t)"FE_DCTLKP", &v37);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_37;
  }
  uint64_t v18 = v37;
  uint64_t v19 = *(void *)(v37 + 8);
  *(void *)(v17 + 128) = v19;
  *(_OWORD *)(v17 + 136) = *(_OWORD *)(v18 + 16);
  uint64_t v20 = *(void *)v39;
  *(void *)(v17 + 32) = a3;
  *(void *)(v17 + 40) = a4;
  *(void *)uint64_t v17 = a1;
  *(void *)(v17 + 8) = a1;
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = v20;
  *(_DWORD *)(v17 + 1180) = 0;
  *(void *)(v17 + 64) = 0;
  uint64_t v21 = (uint64_t *)(v17 + 64);
  *(void *)(v17 + 1184) = 0;
  uint64_t igtree = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, char *))(v19 + 96))(*(void *)(v17 + 136), *(void *)(v17 + 144), "fecfg", "statbnd_enable_nnets", &v35, &v34, &v33);
  if (v34 && v35 && (unsigned __int16 v22 = *v35, v22[cstdlib_strlen(*v35) - 1] = 0, !cstdlib_strcmp(*v35, "yes")))
  {
    *(_DWORD *)(v17 + 1180) = 1;
    *(void *)a5 = v17;
    *(_DWORD *)(a5 + 8) = 62341;
  }
  else if (!*(_DWORD *)(v17 + 1180))
  {
    if (!com_enable_cscgroup(*(void *)(v17 + 128), *(void *)(v17 + 136), *(void *)(v17 + 144), (_DWORD *)(v17 + 152)))*(_DWORD *)(v17 + 152) = 1; {
    if (!com_cscgroup_stopwords(*(void *)(v17 + 128), *(void *)(v17 + 136), *(void *)(v17 + 144), (char *)(v17 + 156)))cstdlib_strcpy((char *)(v17 + 156), "");
    }
    uint64_t v23 = (void *)(v17 + 112);
    if (!com_auxiliarywords(*(void *)(v17 + 24), *(void *)(v17 + 128), *(void *)(v17 + 136), *(void *)(v17 + 144), (uint64_t *)(v17 + 112), (unsigned __int8 *)(v17 + 120)))*uint64_t v23 = 0; {
    uint64_t inited = fw_pw_CreateVoiceBrokerString(*(void *)(v17 + 24), v40);
    }
    if ((inited & 0x80000000) == 0)
    {
      if (((*(uint64_t (**)(void, void, const char *, const char *, char **))(*(void *)(v17 + 128)
                                                                                           + 256))(*(void *)(v17 + 136), *(void *)(v17 + 144), "fepw_enable_crf", "no", &__s1) & 0x80000000) != 0|| cstdlib_strcmp(__s1, "yes"))
      {
        if ((ssftriff_reader_ObjOpen(a3, a4, 2, (const char *)v40, "PWDT", 1031, (uint64_t *)(v17 + 64)) & 0x80000000) == 0)
        {
          char v31 = 0;
          int v29 = 0;
          *(_DWORD *)uint64_t v30 = 0;
          uint64_t v28 = 0;
          for (uint64_t i = ssftriff_reader_OpenChunk(*v21, (__int32 *)v30, (unsigned int *)&v29, &v28);
                (i & 0x80000000) == 0;
                uint64_t i = ssftriff_reader_OpenChunk(*v21, (__int32 *)v30, (unsigned int *)&v29, &v28))
          {
            if (!cstdlib_strcmp(v30, "DSTR"))
            {
              uint64_t inited = ssftriff_reader_GetChunkData(*v21, v29, (void *)(v17 + 56));
              if ((inited & 0x80000000) != 0) {
                goto LABEL_37;
              }
              *uint64_t v23 = 0;
              uint64_t inited = GetRulesFromRiffData(*(uint64_t *)v39, *v21, *(void *)(v17 + 56), v29, (uint64_t *)(v17 + 72), (unsigned int *)(v17 + 80), (unsigned __int16 *)(v17 + 96), (_DWORD *)(v17 + 100), (unsigned int *)(v17 + 104), (uint64_t *)(v17 + 112), (unsigned __int8 *)(v17 + 120));
              if ((inited & 0x80000000) != 0) {
                goto LABEL_37;
              }
            }
            ssftriff_reader_CloseChunk(*v21);
          }
          uint64_t igtree = i;
          if ((i & 0x1FFF) == 0xA)
          {
            *(void *)(v17 + 56) = 0;
            return igtree;
          }
        }
        goto LABEL_32;
      }
      uint64_t inited = tryLoadingCrfModel(*(_WORD **)(v17 + 32), *(void *)(v17 + 40), *(_WORD **)(v17 + 8), *(void *)(v17 + 16), *(void *)(v17 + 24), (void *)(v17 + 88), (uint64_t)v40, 1031);
      if ((inited & 0x80000000) == 0)
      {
LABEL_32:
        uint64_t igtree = load_igtree_cfg(*(void *)(v17 + 136), *(void *)(v17 + 144), *(void *)(v17 + 128), &v32);
        if ((igtree & 0x80000000) == 0)
        {
          if (v32)
          {
            uint64_t v25 = (uint64_t *)(v17 + 1184);
            uint64_t igtree = load_igtree(*(_WORD **)(v17 + 32), *(void *)(v17 + 40), *(void *)(v17 + 24), (char **)(v17 + 1184));
            if ((igtree & 0x80000000) != 0)
            {
              if (*v25)
              {
                igtree_Deinit(*(void *)(v17 + 24), *v25);
                uint64_t igtree = 0;
                *(void *)(v17 + 1184) = 0;
              }
              else
              {
                uint64_t igtree = 0;
              }
            }
          }
          *(void *)a5 = v17;
          *(_DWORD *)(a5 + 8) = 62341;
        }
        return igtree;
      }
    }
LABEL_37:
    uint64_t igtree = inited;
    goto LABEL_38;
  }
  if ((igtree & 0x80000000) != 0) {
    goto LABEL_38;
  }
  return igtree;
}

uint64_t fw_pw_CreateVoiceBrokerString(uint64_t a1, unsigned char *a2)
{
  uint64_t v5 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v5);
  if ((result & 0x80000000) == 0) {
    return brokeraux_ComposeBrokerString(a1, "prosodyword", 1, 1, v5, 0, 0, a2, 0x100uLL);
  }
  return result;
}

uint64_t fe_pw_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((v3 & 0x80000000) != 0) {
    return 2584748040;
  }
  uint64_t Only_DereferenceCnt = v3;
  if (a1)
  {
    if (*(void *)(a1 + 48)) {
      objc_ReleaseObject(*(void *)(*(void *)(a1 + 24) + 48), (uint64_t)"LINGDB");
    }
    if (*(void *)(a1 + 128)) {
      objc_ReleaseObject(*(void *)(*(void *)(a1 + 24) + 48), (uint64_t)"FE_DCTLKP");
    }
    uint64_t v12 = *(void **)(a1 + 64);
    if (v12) {
      ssftriff_reader_ObjClose(v12, v4, v5, v6, v7, v8, v9, v10);
    }
    uint64_t v13 = *(void *)(a1 + 112);
    if (v13)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + 120);
      if (*(unsigned char *)(a1 + 120))
      {
        unint64_t v15 = 0;
        do
        {
          uint64_t v16 = *(void *)(*(void *)(a1 + 112) + 8 * v15);
          if (v16)
          {
            heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v16);
            unsigned int v14 = *(unsigned __int8 *)(a1 + 120);
          }
          ++v15;
        }
        while (v15 < v14);
        uint64_t v13 = *(void *)(a1 + 112);
      }
      heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v13);
    }
    if (*(_DWORD *)(a1 + 1180)) {
      goto LABEL_31;
    }
    uint64_t v17 = *(void *)(a1 + 88);
    if (!v17)
    {
LABEL_21:
      uint64_t v18 = *(void *)(a1 + 72);
      if (v18)
      {
        unint64_t v19 = *(unsigned int *)(a1 + 80);
        if (v19)
        {
          unint64_t v20 = 0;
          uint64_t v21 = 16;
          do
          {
            uint64_t v22 = *(void *)(*(void *)(a1 + 72) + v21);
            if (v22)
            {
              heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v22);
              unint64_t v19 = *(unsigned int *)(a1 + 80);
            }
            ++v20;
            v21 += 32;
          }
          while (v20 < v19);
          uint64_t v18 = *(void *)(a1 + 72);
        }
        heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v18);
      }
      uint64_t v23 = *(void *)(a1 + 1184);
      if (v23)
      {
        igtree_Deinit(*(void *)(a1 + 24), v23);
        heap_Free(*(void **)(*(void *)(a1 + 24) + 8), *(void *)(a1 + 1184));
        *(void *)(a1 + 1184) = 0;
      }
LABEL_31:
      heap_Free(*(void **)(*(void *)(a1 + 24) + 8), a1);
      return Only_DereferenceCnt;
    }
    uint64_t Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(*(void *)(a1 + 24), *(void *)a1, v17);
    if ((Only_DereferenceCnt & 0x80000000) == 0)
    {
      *(void *)(a1 + 88) = 0;
      goto LABEL_21;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t fe_pw_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  memset(v31, 0, sizeof(v31));
  uint64_t result = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((result & 0x80000000) != 0) {
    return 2584748040;
  }
  if (!a1) {
    return 2584748038;
  }
  if (!*(_DWORD *)(a1 + 1180))
  {
    int v30 = 0;
    uint64_t result = fw_pw_CreateVoiceBrokerString(*(void *)(a1 + 24), v31);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v12 = (uint64_t *)(a1 + 64);
      unsigned int v11 = *(void **)(a1 + 64);
      if (v11)
      {
        ssftriff_reader_ObjClose(v11, v4, v5, v6, v7, v8, v9, v10);
        *uint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)(a1 + 88);
      if (v13)
      {
        uint64_t result = crf_Deinit_ReadOnly_DereferenceCnt(*(void *)(a1 + 24), *(void *)a1, v13);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        *(void *)(a1 + 88) = 0;
      }
      if ((tryLoadingCrfModel(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), *(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), (void *)(a1 + 88), (uint64_t)v31, 1031) & 0x80000000) == 0)goto LABEL_11; {
      if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), 2, (const char *)v31, "PWDT", 1031, (uint64_t *)(a1 + 64)) & 0x80000000) != 0)
      }
      {
        *(void *)(a1 + 56) = 0;
LABEL_11:
        uint64_t v14 = *(void *)(a1 + 1184);
        if (v14)
        {
          igtree_Deinit(*(void *)(a1 + 24), v14);
          heap_Free(*(void **)(*(void *)(a1 + 24) + 8), *(void *)(a1 + 1184));
          *(void *)(a1 + 1184) = 0;
        }
        uint64_t result = load_igtree_cfg(*(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 128), &v30);
        if ((result & 0x80000000) == 0)
        {
          if (v30)
          {
            unint64_t v15 = (uint64_t *)(a1 + 1184);
            uint64_t result = load_igtree(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 24), (char **)(a1 + 1184));
            if ((result & 0x80000000) != 0)
            {
              if (*v15)
              {
                igtree_Deinit(*(void *)(a1 + 24), *v15);
                uint64_t result = 0;
                *(void *)(a1 + 1184) = 0;
              }
              else
              {
                return 0;
              }
            }
          }
        }
        return result;
      }
      char v29 = 0;
      uint64_t v27 = 0;
      *(void *)__s1 = 0;
      uint64_t v17 = (uint64_t *)(a1 + 112);
      uint64_t v16 = *(void *)(a1 + 112);
      if (v16)
      {
        unsigned int v18 = *(unsigned __int8 *)(a1 + 120);
        if (*(unsigned char *)(a1 + 120))
        {
          unint64_t v19 = 0;
          do
          {
            uint64_t v20 = *(void *)(*v17 + 8 * v19);
            if (v20)
            {
              heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v20);
              unsigned int v18 = *(unsigned __int8 *)(a1 + 120);
            }
            ++v19;
          }
          while (v19 < v18);
          uint64_t v16 = *v17;
        }
        heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v16);
      }
      uint64_t v22 = (uint64_t *)(a1 + 72);
      uint64_t v21 = *(void *)(a1 + 72);
      if (v21)
      {
        unint64_t v23 = *(unsigned int *)(a1 + 80);
        if (v23)
        {
          unint64_t v24 = 0;
          uint64_t v25 = 16;
          do
          {
            uint64_t v26 = *(void *)(*v22 + v25);
            if (v26)
            {
              heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v26);
              unint64_t v23 = *(unsigned int *)(a1 + 80);
            }
            ++v24;
            v25 += 32;
          }
          while (v24 < v23);
          uint64_t v21 = *v22;
        }
        heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v21);
      }
      uint64_t result = ssftriff_reader_OpenChunk(*v12, (__int32 *)&__s1[4], (unsigned int *)__s1, &v27);
      if ((result & 0x80000000) != 0)
      {
LABEL_43:
        if ((result & 0x1FFF) == 0xA) {
          return result;
        }
        goto LABEL_11;
      }
      while (1)
      {
        if (!cstdlib_strcmp(&__s1[4], "DSTR"))
        {
          uint64_t result = ssftriff_reader_GetChunkData(*v12, *(unsigned int *)__s1, (void *)(a1 + 56));
          if ((result & 0x80000000) != 0) {
            break;
          }
          *(void *)(a1 + 112) = 0;
          uint64_t result = GetRulesFromRiffData(*(void *)(a1 + 24), *(void *)(a1 + 64), *(void *)(a1 + 56), *(unsigned int *)__s1, (uint64_t *)(a1 + 72), (unsigned int *)(a1 + 80), (unsigned __int16 *)(a1 + 96), (_DWORD *)(a1 + 100), (unsigned int *)(a1 + 100), (uint64_t *)(a1 + 112), (unsigned __int8 *)(a1 + 120));
          if ((result & 0x80000000) != 0) {
            break;
          }
        }
        ssftriff_reader_CloseChunk(*v12);
        uint64_t result = ssftriff_reader_OpenChunk(*v12, (__int32 *)&__s1[4], (unsigned int *)__s1, &v27);
        if ((result & 0x80000000) != 0) {
          goto LABEL_43;
        }
      }
    }
  }
  return result;
}

uint64_t fe_pw_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2584748040;
  }
}

uint64_t fe_pw_PYT_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int *a7, unsigned int a8, uint64_t *a9, unsigned __int16 *a10)
{
  uint64_t v116 = *a9;
  __s1 = 0;
  int v11 = *a10;
  uint64_t v119 = 0;
  uint64_t v12 = a6;
  __int16 v118 = 0;
  if (v11)
  {
    uint64_t v13 = 0;
    __int16 v14 = 0;
    unsigned __int16 v15 = 0;
    uint64_t v111 = a8;
    uint64_t v16 = (unsigned __int16 *)(a5 + 24);
    int v17 = 1;
    while (1)
    {
      unsigned int v18 = (unsigned __int16 **)(v116 + 16 * v14);
      if (*((unsigned __int16 *)v18 + 4) > 1u) {
        goto LABEL_9;
      }
      uint64_t v19 = **v18;
      __int16 v118 = 0;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 48) + 184))(a2, a3, v19, 9, &v118);
      if ((v13 & 0x80000000) == 0 && v118 == 1)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(*(void *)(a1 + 48) + 176))(a2, a3, v19, 9, &v119, &v118);
        if ((v13 & 0x80000000) != 0)
        {
LABEL_67:
          heap_Free(*(void **)(a4 + 8), v116);
          return v13;
        }
      }
      if (v119 && cstdlib_strcmp(v119, "mnc!"))
      {
LABEL_9:
        __int16 v20 = 1;
        int v17 = 1;
      }
      else
      {
        uint64_t v21 = 0;
        if (v12)
        {
          uint64_t v22 = v16;
          while (1)
          {
            int v23 = *v22;
            v22 += 20;
            if (v23 == **v18) {
              break;
            }
            if (v12 == ++v21)
            {
              LODWORD(v21) = v12;
              goto LABEL_16;
            }
          }
          LODWORD(v21) = (unsigned __int16)v21;
        }
LABEL_16:
        if (a8)
        {
          int v24 = *(unsigned __int16 *)(a5 + 40 * v21 + 28);
          uint64_t v25 = a7;
          uint64_t v26 = v111;
          while (1)
          {
            int v27 = *v25++;
            if (v27 == v24) {
              break;
            }
            if (!--v26) {
              goto LABEL_20;
            }
          }
        }
        else
        {
LABEL_20:
          if (v17 != 1)
          {
            __int16 v118 = 0;
            __s1 = 0;
            uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 48) + 184))(a2, a3, v19, 19, &v118);
            int v17 = 0;
            __int16 v20 = 1;
            if ((v13 & 0x80000000) == 0 && v118 == 1)
            {
              uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(void *)(a1 + 48) + 176))(a2, a3, v19, 19, &__s1, &v118);
              if ((v13 & 0x80000000) != 0) {
                return v13;
              }
              int v17 = 0;
              __int16 v20 = cstdlib_strcmp(__s1, "left") == 0;
            }
            goto LABEL_26;
          }
        }
        int v17 = 0;
        __int16 v20 = 1;
      }
LABEL_26:
      v15 += v20;
      if (v11 <= ++v14) {
        goto LABEL_29;
      }
    }
  }
  unsigned __int16 v15 = 0;
  uint64_t v13 = 0;
LABEL_29:
  uint64_t v28 = heap_Calloc(*(void **)(a4 + 8), v15, 16);
  if (!v28)
  {
LABEL_68:
    uint64_t v13 = 2584748042;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PW", 37000, 0, v29, v30, v31, v32, v103);
    return v13;
  }
  *a10 = v15;
  uint64_t v112 = v28;
  *a9 = v28;
  if (v11)
  {
    uint64_t v33 = 0;
    __int16 v34 = 0;
    int v35 = 0;
    int v36 = 1;
    while (1)
    {
      uint64_t v37 = (unsigned __int16 **)(v116 + 16 * v34);
      if (*((unsigned __int16 *)v37 + 4) < 2u)
      {
        uint64_t v38 = **v37;
        __int16 v118 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 48) + 184))(a2, a3, v38, 9, &v118) & 0x80000000) == 0&& v118 == 1)
        {
          uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(*(void *)(a1 + 48) + 176))(a2, a3, v38, 9, &v119, &v118);
          if ((v39 & 0x80000000) != 0)
          {
            uint64_t v13 = v39;
            goto LABEL_67;
          }
        }
        if (!v119 || !cstdlib_strcmp(v119, "mnc!")) {
          break;
        }
      }
      log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> Not a PYT PW. Skip by copying pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
      fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * (unsigned __int16)v35, v40, v41, v42, v43, v44, v104);
      log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v45, v46, v47, v33);
      uint64_t v13 = 0;
      ++v35;
      int v36 = 1;
LABEL_63:
      uint64_t v33 = ++v34;
      if ((int)v33 >= v11) {
        goto LABEL_66;
      }
    }
    uint64_t v48 = 0;
    if (v12)
    {
      int v49 = (unsigned __int16 *)(a5 + 24);
      while (1)
      {
        int v50 = *v49;
        v49 += 20;
        if (v50 == **v37) {
          break;
        }
        if (v12 == ++v48)
        {
          LODWORD(v48) = v12;
          goto LABEL_45;
        }
      }
      LODWORD(v48) = (unsigned __int16)v48;
    }
LABEL_45:
    if (a8)
    {
      int v51 = *(unsigned __int16 *)(a5 + 40 * v48 + 28);
      uint64_t v53 = a8;
      BOOL v52 = a7;
      while (1)
      {
        int v54 = *v52++;
        if (v54 == v51) {
          break;
        }
        if (!--v53) {
          goto LABEL_49;
        }
      }
      if (v36 != 1)
      {
        unsigned __int16 v79 = v35;
        log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> I am a PYT PW start with Marker! Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
LABEL_60:
        fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * v79, v80, v81, v82, v83, v84, v105);
        uint64_t v93 = *(void *)(a4 + 32);
        goto LABEL_61;
      }
    }
    else
    {
LABEL_49:
      if (v36 != 1)
      {
        __int16 v118 = 0;
        __s1 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 48) + 184))(a2, a3, v38, 19, &v118) & 0x80000000) == 0&& v118 == 1)
        {
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(void *)(a1 + 48)
                                                                                                  + 176))(a2, a3, v38, 19, &__s1, &v118);
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
          int v61 = cstdlib_strcmp(__s1, "left");
          uint64_t v62 = *(void *)(a4 + 32);
          if (v61)
          {
            log_OutText(v62, (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> No space before this PYT unit. Merge pPWIn[%d] to pPWOut[%d] ...", v58, v59, v60, v33);
            log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pPWIn[%d] is: ", v63, v64, v65, v33);
            pw_show_pw_0(a4, (uint64_t)v37);
            log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Before merge, pPWOut[%d] is: ", v66, v67, v68, (unsigned __int16)v35 - 1);
            uint64_t v69 = v112 + 16 * ((unsigned __int16)v35 - 1);
            pw_show_pw_0(a4, v69);
            unsigned __int16 v70 = *(_WORD *)(v69 + 8) + 1;
            *(_WORD *)(v69 + 8) = v70;
            uint64_t v71 = heap_Realloc(*(uint64_t **)(a4 + 8), *(void *)v69, 2 * v70);
            *(void *)uint64_t v69 = v71;
            if (!v71) {
              goto LABEL_68;
            }
            uint64_t v72 = *v37;
            *(_WORD *)(v71 + 2 * *(unsigned __int16 *)(v69 + 8) - 2) = **v37;
            heap_Free(*(void **)(a4 + 8), (uint64_t)v72);
            log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"After merge, pPWOut[%d] is: ", v73, v74, v75, (unsigned __int16)v35 - 1);
            pw_show_pw_0(a4, v69);
            log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Merge pPWIn[%d] to pPWOut[%d] done!", v76, v77, v78, v33);
            int v36 = 0;
            goto LABEL_63;
          }
          log_OutText(v62, (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> There is a space before this PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v58, v59, v60, v33);
          fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * (unsigned __int16)v35, v94, v95, v96, v97, v98, v107);
          log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v99, v100, v101, v33);
          goto LABEL_62;
        }
        unsigned __int16 v79 = v35;
        log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> The WORD_DCT record doesn't has field LD_W_INPUTSPACETAG. Copy pPWIn[%d] to pPWOut[%d].", v55, v56, v57, v33);
        goto LABEL_60;
      }
    }
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)">>> I am First PYT PW. Copy pPWIn[%d] to pPWOut[%d].", v30, v31, v32, v33);
    fe_pw_copy_pw(a4, (uint64_t)v37, v112 + 16 * (unsigned __int16)v35, v85, v86, v87, v88, v89, v106);
    uint64_t v93 = *(void *)(a4 + 32);
LABEL_61:
    log_OutText(v93, (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy pPWIn[%d] to pPWOut[%d] done!", v90, v91, v92, v33);
LABEL_62:
    int v36 = 0;
    uint64_t v13 = 0;
    ++v35;
    goto LABEL_63;
  }
LABEL_66:
  if (v116) {
    goto LABEL_67;
  }
  return v13;
}

uint64_t fe_pw_copy_pw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copying PW ... ", a6, a7, a8, v20);
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pPWIn and pPWOut is: ", v12, v13, v14, v21);
  pw_show_pw_0(a1, a2);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 8);
  *(void *)a3 = *(void *)a2;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v18 = *(void *)(a1 + 32);

  return log_OutText(v18, (uint64_t)"FE_PW", 5, 0, (uint64_t)"Copy PW done!", v15, v16, v17, a9);
}

const char *pw_show_pw_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = (const char *)heap_Calloc(*(void **)(a1 + 8), 1, 1000);
  if (result)
  {
    uint64_t v8 = result;
    if (*(_WORD *)(a2 + 8))
    {
      unint64_t v9 = 0;
      int v10 = 0;
      do
      {
        sprintf((char *)&v8[v10], "%d-", *(unsigned __int16 *)(*(void *)a2 + 2 * v9));
        int v10 = cstdlib_strlen(v8);
        ++v9;
      }
      while (v9 < *(unsigned __int16 *)(a2 + 8));
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"\tPW [tids:%s, ntok:%d]", v5, v6, v7, (uint64_t)v8);
    int v11 = *(void **)(a1 + 8);
    return (const char *)heap_Free(v11, (uint64_t)v8);
  }
  return result;
}

uint64_t fe_pw_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62341, 1192);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2584748040;
  }
}

uint64_t fe_pw_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2584748033;
  }
  uint64_t result = 0;
  *a2 = &IFePw;
  return result;
}

uint64_t com_enable_cscgroup(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "fepw_enable_cscgroup", &__c[3], &__c[1], __c);
  uint64_t result = 0;
  if ((v5 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    uint64_t v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7) {
      *uint64_t v7 = 0;
    }
    *a4 = cstdlib_strcmp(**(const char ***)&__c[3], "no") != 0;
    return 1;
  }
  return result;
}

uint64_t com_cscgroup_stopwords(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "fepw_cscgroup_stopwords", &__c[3], &__c[1], __c);
  uint64_t result = 0;
  if ((v5 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    uint64_t v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7) {
      *uint64_t v7 = 0;
    }
    cstdlib_strcpy(a4, **(const char ***)&__c[3]);
    return 1;
  }
  return result;
}

uint64_t com_auxiliarywords(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int8 *a6)
{
  uint64_t v20 = 0;
  __int16 v19 = -1;
  char v18 = 0;
  uint64_t v9 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", "fepw_auxiliarywords", &v20, &v19, &v18) & 0x80000000) == 0&& v19)
  {
    int v10 = *v20;
    unsigned __int16 v11 = cstdlib_strlen(*v20);
    ChineseUTFCharNuunsigned int m = utf8_GetChineseUTFCharNum((uint64_t)v10, v11);
    *a6 = ChineseUTFCharNum;
    uint64_t v13 = heap_Alloc(*(void *)(a1 + 8), 8 * ChineseUTFCharNum);
    *a5 = v13;
    if (v13 && *a6)
    {
      uint64_t v14 = 0;
      uint64_t v15 = *v20;
      while (1)
      {
        size_t v16 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v15);
        uint64_t v9 = 1;
        *(void *)(*a5 + 8 * v14) = heap_Calloc(*(void **)(a1 + 8), 1, v16 + 1);
        if (!*a5) {
          break;
        }
        cstdlib_memcpy(*(void **)(*a5 + 8 * v14), v15, v16);
        *(unsigned char *)(*(void *)(*a5 + 8 * v14) + v16) = 0;
        v15 += v16;
        if (++v14 >= (unint64_t)*a6) {
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return v9;
}

uint64_t fe_pw_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2584748039;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_pw_ClassClose()
{
  return 0;
}

uint64_t fe_pw_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __dst[1] = *MEMORY[0x263EF8340];
  int v214 = 0;
  int v215 = 0;
  int v213 = 0;
  unsigned __int16 v212 = 0;
  unsigned int v211 = 0;
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  int v208 = 0;
  uint64_t v206 = 0;
  uint64_t v207 = 0;
  int v204 = 0;
  unint64_t v205 = 1024;
  uint64_t v202 = 0;
  unint64_t v203 = 64;
  int v200 = 0;
  unint64_t v201 = 64;
  int v198 = 0;
  unsigned int v199 = "";
  int v197 = 0;
  uint64_t v196 = 0;
  v195[6] = 0;
  strcpy(v195, "latin");
  uint64_t v194 = 0;
  unsigned int v193 = 0;
  unint64_t v192 = 0;
  int v191 = 0;
  uint64_t v190 = 0;
  memset(__b, 0, 512);
  uint64_t v187 = 0;
  cstdlib_memset(__b, 0, 0x404uLL);
  *a5 = 1;
  if (*(_DWORD *)(a1 + 1180))
  {
    uint64_t v12 = 0;
    unsigned __int16 v13 = 0;
    LODWORD(v14) = 0;
    goto LABEL_3;
  }
  if (!*(void *)(a1 + 56) && !*(void *)(a1 + 88))
  {
    log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[FE_PROSODY_WORD]: NO DATA,LEAVING", v9, v10, v11, v161);
    return 0;
  }
  unint64_t v30 = *(void *)(a1 + 72);
  log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[FE_PROSODY_WORD]: Entering", v9, v10, v11, v161);
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 48) + 104))(a3, a4, 1, 0, (char *)&v215 + 2);
  if ((v31 & 0x80000000) != 0) {
    return v31;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(*(void *)(a1 + 48) + 184))(a3, a4, HIWORD(v215), 0, &v197);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  if ((unsigned __int16)v197 != 1) {
    return v14;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(*(void *)(a1 + 48) + 176))(a3, a4, HIWORD(v215), 0, &v207, &v214);
  if ((v14 & 0x80000000) != 0 || (unsigned __int16)v214 < 2u) {
    return v14;
  }
  LOWORD(__dst[0]) = 0;
  LODWORD(v186) = 0;
  *(_WORD *)__s1 = 0;
  LOWORD(v183) = 0;
  LOWORD(v182) = 0;
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void *))(*(void *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v215), __dst);
  LODWORD(v14) = v32;
  if ((v32 & 0x80000000) == 0)
  {
    unsigned __int16 v33 = __dst[0];
    if (LOWORD(__dst[0]))
    {
      unint64_t v171 = v30;
      unsigned __int16 v34 = 0;
      while (1)
      {
        int v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char **, char *))(*(void *)(a1 + 48) + 168))(a3, a4, v33, 0, 1, &v186, __s1);
        if (v35 < 0) {
          break;
        }
        if (v186 > 0xA || ((1 << (char)v186) & 0x610) == 0)
        {
          uint64_t v40 = 0;
          uint64_t v39 = LOWORD(__dst[0]);
        }
        else
        {
          int v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 48) + 168))(a3, a4, LOWORD(__dst[0]), 1, 1, &v183, __s1);
          if (v35 < 0) {
            break;
          }
          int v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 48) + 168))(a3, a4, LOWORD(__dst[0]), 2, 1, &v182, __s1);
          if (v35 < 0) {
            break;
          }
          BOOL v38 = (unsigned __int16)v183 > v34 || (unsigned __int16)v182 > v34;
          uint64_t v39 = LOWORD(__dst[0]);
          if (v38)
          {
            unsigned __int16 v34 = v182;
            uint64_t v40 = 0;
          }
          else
          {
            uint64_t v40 = LOWORD(__dst[0]);
          }
        }
        int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)(a1 + 48) + 120))(a3, a4, v39, __dst);
        if (v35 < 0) {
          break;
        }
        if (v40)
        {
          log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"%s", v41, v42, v43, (uint64_t)"Dropping nested word record");
          int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 192))(a3, a4, v40);
          if (v35 < 0) {
            break;
          }
        }
        unsigned __int16 v33 = __dst[0];
        if (!LOWORD(__dst[0]))
        {
          unint64_t v30 = v171;
          goto LABEL_80;
        }
      }
      LODWORD(v14) = v35;
LABEL_165:
      uint64_t v12 = 0;
      unsigned __int16 v13 = 0;
      goto LABEL_3;
    }
  }
  if (v32 < 0) {
    goto LABEL_165;
  }
LABEL_80:
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v215), &v215);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_165;
  }
  unsigned __int16 v47 = v215;
  if (!(_WORD)v215) {
    goto LABEL_166;
  }
  unsigned __int16 v172 = 0;
  unsigned __int16 v13 = 0;
  int v177 = 0;
  do
  {
    int v48 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 48) + 120))(a3, a4, v47, (char *)&v214 + 2);
    if (v48 < 0)
    {
      LODWORD(v14) = v48;
LABEL_168:
      uint64_t v12 = 0;
      goto LABEL_3;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 0, 1, &v211, &v214);
    if ((v14 & 0x80000000) != 0) {
      goto LABEL_168;
    }
    unsigned int v49 = v211;
    if (v211 <= 0xA && ((1 << v211) & 0x610) != 0)
    {
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 48)
                                                                                                + 168))(a3, a4, (unsigned __int16)v215, 1, 1, &v213, &v214);
      if ((v31 & 0x80000000) != 0) {
        return v31;
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 2, 1, &v212, &v214);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
      if (!(_WORD)v213 || v177 + 1 == (unsigned __int16)v213 && v212 > (unsigned __int16)v213)
      {
        ++v13;
        int v177 = v212;
      }
      unsigned int v49 = v211;
    }
    if (v49 == 5)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(*(void *)(a1 + 48)
                                                                                               + 176))(a3, a4, (unsigned __int16)v215, 4, &v190, &v214);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
      if ((_WORD)v214)
      {
        if (!cstdlib_strncmp(v190, "prompt", (unsigned __int16)v214))
        {
          ++v172;
          if (v189 <= 0x7F)
          {
            uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 1, 1, &v213, &v214);
            if ((v31 & 0x80000000) != 0) {
              return v31;
            }
            uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 2, 1, &v212, &v214);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
            *((_DWORD *)__b + v189) = (unsigned __int16)v213;
            *((_DWORD *)&__b[32] + v189++) = v212;
          }
        }
      }
    }
    unsigned __int16 v47 = HIWORD(v214);
    LOWORD(v215) = HIWORD(v214);
  }
  while (HIWORD(v214));
  if (v172 >= 0x81u) {
    log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Warning: the prompt number %d is large than the threshold %d, so the last %d promp not used to guide grouping", v44, v45, v46, v172);
  }
  if (!v13)
  {
LABEL_166:
    log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Warning: no lexicon word", v44, v45, v46, v162);
    return v14;
  }
  uint64_t v51 = heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), v13, 40);
  if (!v51)
  {
    uint64_t v14 = 2584748042;
    log_OutPublic(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 37000, 0, v52, v53, v54, v55, v162);
    return v14;
  }
  uint64_t v12 = v51;
  uint64_t v56 = 0;
  do
  {
    uint64_t v57 = heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), 128, 1);
    *(void *)(v12 + v56) = v57;
    uint64_t v62 = *(void *)(a1 + 24);
    if (!v57)
    {
      LODWORD(v14) = -1710219254;
      goto LABEL_328;
    }
    uint64_t v63 = heap_Calloc(*(void **)(v62 + 8), 64, 1);
    *(void *)(v12 + v56 + 8) = v63;
    if (!v63)
    {
LABEL_326:
      LODWORD(v14) = -1710219254;
LABEL_327:
      uint64_t v62 = *(void *)(a1 + 24);
LABEL_328:
      log_OutPublic(*(void *)(v62 + 32), (uint64_t)"FE_PW", 37000, 0, v58, v59, v60, v61, v162);
      goto LABEL_3;
    }
    v56 += 40;
  }
  while (40 * v13 != v56);
  int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 48)
                                                                                                  + 104))(a3, a4, 2, HIWORD(v215), &v215);
  if (word_separating_markers_0 < 0) {
    goto LABEL_329;
  }
  unint64_t v173 = v30;
  LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(*(void *)(a1 + 48)
                                                                                               + 176))(a3, a4, HIWORD(v215), 0, &v207, &v214);
  if ((v14 & 0x80000000) != 0 || (unsigned __int16)v214 < 2u) {
    goto LABEL_3;
  }
  unsigned __int16 v65 = v215;
  if ((_WORD)v215)
  {
    unsigned __int16 __s = 0;
    LODWORD(v14) = -1710219254;
    while (1)
    {
      int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 48)
                                                                                              + 120))(a3, a4, v65, (char *)&v214 + 2);
      if (word_separating_markers_0 < 0) {
        break;
      }
      int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 0, 1, &v211, &v214);
      if (word_separating_markers_0 < 0) {
        break;
      }
      if (v211 <= 0xA && ((1 << v211) & 0x610) != 0)
      {
        int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 1, 1, &v213, &v214);
        if (word_separating_markers_0 < 0) {
          break;
        }
        int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 2, 1, &v212, &v214);
        if (word_separating_markers_0 < 0) {
          break;
        }
        if (!(_WORD)v213 || v177 + 1 == (unsigned __int16)v213 && v212 > (unsigned __int16)v213)
        {
          int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v215, 3, &v200, &v214);
          if (word_separating_markers_0 < 0) {
            break;
          }
          uint64_t v67 = (_WORD *)(v12 + 40 * __s + 26);
          if (cstdlib_strstr(v200, "comma"))
          {
            *uint64_t v67 = 11;
          }
          else
          {
            *uint64_t v67 = 1;
            uint64_t v73 = v200;
            uint64_t v196 = v200;
            while (1)
            {
              uint64_t v74 = cstdlib_strstr(v73, ".");
              uint64_t v196 = v74;
              if (!v74) {
                break;
              }
              uint64_t v73 = v74 + 1;
              uint64_t v196 = v73;
              ++*v67;
            }
          }
          unsigned int v68 = (unsigned __int16)v213;
          if ((unsigned __int16)v213 >= v212)
          {
            int v69 = 0;
          }
          else
          {
            int v69 = 0;
            do
            {
              if (!utf8_IsChineseLetter((const char *)(v207 + v68))) {
                int v69 = 1;
              }
              v68 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(v207 + v68));
            }
            while (v68 < v212);
          }
          uint64_t v70 = v12 + 40 * __s;
          *(_WORD *)(v70 + 24) = v215;
          int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v215, 14, &v199, &v214);
          if (word_separating_markers_0 < 0) {
            break;
          }
          if (!hlp_NLUStrFind(v199, "POS", &v198, (unsigned __int16 *)&v197 + 1))
          {
            LODWORD(v14) = -1710219264;
            goto LABEL_3;
          }
          uint64_t v71 = v12 + 40 * __s;
          **(unsigned char **)(v71 + 8) = 0;
          uint64_t v72 = *(char **)(v71 + 8);
          if (v69) {
            cstdlib_strcat(v72, "non");
          }
          else {
            cstdlib_strncat(v72, v198, HIWORD(v197));
          }
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 48) + 184))(a3, a4, (unsigned __int16)v215, 9, &v214) & 0x80000000) == 0&& (unsigned __int16)v214 == 1)
          {
            int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *))(*(void *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v215, 9, v12 + 40 * __s + 16, &v214);
            if (word_separating_markers_0 < 0) {
              break;
            }
          }
          uint64_t v75 = v212;
          uint64_t v76 = (unsigned __int16)v213;
          int v77 = v212 - (unsigned __int16)v213;
          uint64_t v78 = *(void **)v70;
          if (v77 >= 128)
          {
            uint64_t v79 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 24) + 8), *(void *)v70, (v77 + 1));
            *(void *)uint64_t v70 = v79;
            if (!v79) {
              goto LABEL_327;
            }
            uint64_t v78 = (void *)v79;
            uint64_t v76 = (unsigned __int16)v213;
            uint64_t v75 = v212;
          }
          cstdlib_memcpy(v78, (const void *)(v207 + v76), v75 - v76);
          *(unsigned char *)(*(void *)v70 - (unsigned __int16)v213 + v212) = 0;
          uint64_t v80 = v12 + 40 * __s;
          int v81 = v212;
          *(_DWORD *)(v80 + 28) = (unsigned __int16)v213;
          *(_DWORD *)(v80 + 32) = v81;
          int v177 = v81;
          ++__s;
        }
      }
      unsigned __int16 v65 = HIWORD(v214);
      LOWORD(v215) = HIWORD(v214);
      if (!HIWORD(v214)) {
        goto LABEL_155;
      }
    }
LABEL_329:
    LODWORD(v14) = word_separating_markers_0;
    goto LABEL_3;
  }
LABEL_155:
  int word_separating_markers_0 = pw_get_word_separating_markers_0(a1, a3, a4, HIWORD(v215), (uint64_t *)&v194, &v193);
  if (word_separating_markers_0 < 0) {
    goto LABEL_329;
  }
  unsigned int v85 = v193;
  log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers Count:%d", v82, v83, v84, v193);
  if (v85)
  {
    int v89 = 0;
    uint64_t v90 = v194;
    do
      log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Info: Valid Word Seperator Markers POS:%d", v86, v87, v88, v90[(unsigned __int16)v89++]);
    while (v85 > (unsigned __int16)v89);
  }
  unsigned int v91 = v85;
  uint64_t v92 = *(void *)(a1 + 88);
  if (!v92)
  {
    uint64_t v15 = (int *)v194;
    int v93 = pw_dag_process(*(void *)(a1 + 24), v173, *(_DWORD *)(a1 + 80), *(unsigned __int16 *)(a1 + 96), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), (uint64_t)__b, v12, v13, v194, v91, &v209, &v208);
    if ((v93 & 0x80000000) == 0) {
      goto LABEL_172;
    }
    goto LABEL_330;
  }
  LODWORD(v186) = 1;
  LODWORD(v14) = pw_crf_process(*(void *)(a1 + 24), v92, *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), v12, v13, &v209, (unsigned __int16 *)&v208, &v186);
  if ((v14 & 0x80000000) != 0 || v186) {
    goto LABEL_3;
  }
LABEL_172:
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 24) + 40), (uint64_t)"spaceInPYT", &v192) & 0x80000000) == 0
    && !LH_stricmp(v192, "yes"))
  {
    uint64_t v15 = (int *)v194;
    int v93 = fe_pw_PYT_process(a1, a3, a4, *(void *)(a1 + 24), v12, v13, (int *)v194, v91, &v209, (unsigned __int16 *)&v208);
    if (v93 < 0)
    {
LABEL_330:
      LODWORD(v14) = v93;
      if (v15) {
        goto LABEL_4;
      }
      goto LABEL_5;
    }
  }
  if (*(_DWORD *)(a1 + 152) == 1)
  {
    int word_separating_markers_0 = pw_group_csc_0(*(void *)(a1 + 24), (uint64_t)__b, v12, v13, (char *)(a1 + 156), v209, (unsigned __int16)v208, (uint64_t *)&v210, (_WORD *)&v208 + 1);
    if (word_separating_markers_0 < 0) {
      goto LABEL_329;
    }
  }
  else
  {
    HIWORD(v208) = v208;
    uint64_t v94 = v209;
    uint64_t v209 = 0;
    uint64_t v210 = (uint64_t *)v94;
    LOWORD(v208) = 0;
  }
  uint64_t v95 = *(void *)(a1 + 1184);
  if (v95)
  {
    int word_separating_markers_0 = pw_igtree_process_0(*(void *)(a1 + 24), v12, (uint64_t *)&v210, (unsigned __int16 *)&v208 + 1, v13, v95);
    if (word_separating_markers_0 < 0) {
      goto LABEL_329;
    }
  }
  LODWORD(v14) = pw_respect_word_separating_markers_0(a1, a3, a4, HIWORD(v215), (uint64_t *)&v210, (unsigned __int16 *)&v208 + 1);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_3;
  }
  uint64_t v96 = (const char *)heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), v205, 1);
  uint64_t v206 = (char *)v96;
  if (!v96) {
    goto LABEL_3;
  }
  uint64_t v97 = (char *)v96;
  int v204 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), v203, 1);
  if (!v204) {
    goto LABEL_3;
  }
  uint64_t v202 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), v201, 1);
  if (!v202) {
    goto LABEL_3;
  }
  unsigned int v101 = HIWORD(v208);
  if (!HIWORD(v208))
  {
LABEL_238:
    LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 48) + 104))(a3, a4, 2, HIWORD(v215), &v215);
    if ((v14 & 0x80000000) != 0) {
      goto LABEL_3;
    }
    cstdlib_memset(v97, 0, v205);
    cstdlib_memset(v204, 0, v203);
    cstdlib_memset(v202, 0, v201);
    HIWORD(v214) = 0;
    unsigned __int16 v123 = v215;
    if (!(_WORD)v215) {
      goto LABEL_3;
    }
    int v124 = 0;
    LOWORD(v180) = 0;
    while (1)
    {
      int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 48)
                                                                                              + 120))(a3, a4, v123, (char *)&v214 + 2);
      if (word_separating_markers_0 < 0) {
        goto LABEL_329;
      }
      LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 0, 1, &v211, &v214);
      if ((v14 & 0x80000000) != 0) {
        goto LABEL_3;
      }
      if (v211 <= 0xA && ((1 << v211) & 0x610) != 0)
      {
        int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 1, 1, &v213, &v214);
        if (word_separating_markers_0 < 0) {
          goto LABEL_329;
        }
        LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, (unsigned __int16)v215, 2, 1, &v212, &v214);
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_3;
        }
        if (!(_WORD)v213 || v124 + 1 == (unsigned __int16)v213 && v212 > (unsigned __int16)v213) {
          break;
        }
      }
LABEL_315:
      unsigned __int16 v123 = HIWORD(v214);
      LOWORD(v215) = HIWORD(v214);
      if (!HIWORD(v214)) {
        goto LABEL_3;
      }
    }
    uint64_t v186 = 0;
    int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48) + 176))(a3, a4, (unsigned __int16)v215, 3, &v200, &v214);
    if (word_separating_markers_0 < 0) {
      goto LABEL_329;
    }
    LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48)
                                                                                                + 176))(a3, a4, (unsigned __int16)v215, 14, &v199, &v214);
    if ((v14 & 0x80000000) != 0) {
      goto LABEL_3;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 48) + 184))(a3, a4, (unsigned __int16)v215, 10, &v197) & 0x80000000) == 0&& (unsigned __int16)v197 == 1)
    {
      LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48)
                                                                                                  + 176))(a3, a4, (unsigned __int16)v215, 10, &v186, &v214);
      if ((v14 & 0x80000000) != 0) {
        goto LABEL_3;
      }
    }
    uint64_t v126 = v212;
    if (v212 - (unsigned __int16)v213 > 5)
    {
      BOOL v127 = 0;
      goto LABEL_277;
    }
    __dst[0] = 0;
    char v185 = 0;
    *(_DWORD *)__s1 = 0;
    cstdlib_memcpy(__dst, (const void *)(v207 + (unsigned __int16)v213), v212 - (unint64_t)(unsigned __int16)v213);
    *((unsigned char *)__dst + v212 - (unsigned __int16)v213) = 0;
    if (!utf8_IsChineseLetter((const char *)__dst)) {
      goto LABEL_274;
    }
    uint64_t v128 = v193;
    if (v193)
    {
      uint64_t v129 = v194;
      do
      {
        int v130 = *v129++;
        if (v130 == (unsigned __int16)v213) {
          goto LABEL_274;
        }
      }
      while (--v128);
    }
    if (!cstdlib_strstr(v200, "11") || !utf8_IsChineseLetter((const char *)&v191))
    {
      int v183 = 0;
      unsigned int v131 = cstdlib_strlen((const char *)__dst);
      int v181 = 0;
      int v182 = 0;
      utf8_Utf8ToUtf32_Tolerant((uint64_t)__dst, v131, (uint64_t)&v183, 1u, &v182);
      int v132 = v182;
      if (v131 <= 3) {
        int v132 = 0;
      }
      utf8_Utf32ToUtf8((uint64_t)&v183, 1, (uint64_t)__s1, v131 - v132, &v181);
      __s1[v181] = 0;
      if (!*(unsigned char *)(a1 + 120))
      {
LABEL_274:
        BOOL v127 = 0;
LABEL_275:
        uint64_t v126 = v212;
        if (v212 - (unsigned __int16)v213 <= 2)
        {
          cstdlib_memcpy(&v191, (const void *)(v207 + (unsigned __int16)v213), v212 - (unint64_t)(unsigned __int16)v213);
          uint64_t v134 = (char *)&v191 + v212 - (unsigned __int16)v213;
LABEL_278:
          *uint64_t v134 = 0;
          if (v127)
          {
            if ((_WORD)v180)
            {
              LODWORD(__dst[0]) = 0;
              LODWORD(v14) = pw_check_if_glue_forbidden_0(a1, a3, a4, HIWORD(v215), (unsigned __int16)v180, (unsigned __int16)v215, (int *)__dst);
              BOOL v127 = LODWORD(__dst[0]) == 0;
              if ((v14 & 0x80000000) != 0) {
                goto LABEL_3;
              }
            }
          }
          hlp_NLUStrFind(v199, "POS", &v198, (unsigned __int16 *)&v197 + 1);
          if (v186 && (size_t v135 = cstdlib_strlen(v202), v136 = cstdlib_strlen(v186), v135 + v136 + 1 >= v201)
            || v198 && (size_t v140 = cstdlib_strlen(v204), v141 = cstdlib_strlen(v198), v140 + v141 + 2 >= v203)
            || v200 && (size_t v142 = cstdlib_strlen(v206), v143 = cstdlib_strlen(v200), v142 + v143 + 2 >= v205))
          {
            log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"skip the merging due to the length limit of prosodic word", v137, v138, v139, v162);
          }
          else if (v127 && (_WORD)v180 && cstdlib_strcmp(v195, "latin"))
          {
            log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"merge special auxiliary word and neutral tone cases", v144, v145, v146, v162);
            *(unsigned char *)((unsigned __int16)v213 + v207 - 1) = 45;
            cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v206, ".", &v205, 0x400uLL);
            if (v200) {
              cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v206, v200, &v205, 0x400uLL);
            }
            if (HIWORD(v197))
            {
              cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v204, "-", &v203, 0x40uLL);
              if (v198) {
                cstdlib_safe_strncat(*(void *)(a1 + 24), (const char **)&v204, v198, HIWORD(v197), &v203);
              }
            }
            int v147 = v202;
            if (v186 && cstdlib_strcmp(v202, "")) {
              cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v202, v186, &v201, 0x40uLL);
            }
            else {
              cstdlib_strcpy(v147, "");
            }
            int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 48)
                                                                                            + 192))(a3, a4, (unsigned __int16)v215);
            if (word_separating_markers_0 < 0) {
              goto LABEL_329;
            }
            int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(*(void *)(a1 + 48) + 160))(a3, a4, (unsigned __int16)v180, 2, 1, &v212, (char *)&v213 + 2);
            if (word_separating_markers_0 < 0) {
              goto LABEL_329;
            }
            int v150 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(*(void *)(a1 + 48) + 160);
            char v151 = v206;
            __int16 v152 = cstdlib_strlen(v206);
            int word_separating_markers_0 = v150(a3, a4, (unsigned __int16)v180, 3, (unsigned __int16)(v152 + 1), v151, (char *)&v213 + 2);
            if (word_separating_markers_0 < 0) {
              goto LABEL_329;
            }
            int v153 = v204;
            int v154 = cstdlib_strlen(v204);
            int v155 = cstdlib_strlen(v199);
            unsigned __int16 v156 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), 1, (v154 + v155 + 6));
            if (!v156) {
              goto LABEL_326;
            }
            int v157 = v156;
            cstdlib_strcpy(v156, v199);
            unsigned int v199 = v157;
            hlp_NLUStrSet(v157, "POS", v153);
            uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 160);
            __int16 v158 = cstdlib_strlen(v199);
            LODWORD(v14) = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, void, char *, char *))v14)(a3, a4, (unsigned __int16)v180, 14, (unsigned __int16)(v158 + 1), v199, (char *)&v213 + 2);
            heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v199);
            unsigned int v199 = "";
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_3;
            }
            uint64_t v159 = v202;
            if (cstdlib_strcmp(v202, ""))
            {
              uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 160);
              __int16 v160 = cstdlib_strlen(v159);
              LODWORD(v14) = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))v14)(a3, a4, (unsigned __int16)v180, 10, (unsigned __int16)(v160 + 1), v159, (char *)&v213 + 2);
              if ((v14 & 0x80000000) != 0) {
                goto LABEL_3;
              }
            }
            goto LABEL_314;
          }
          if (v200)
          {
            cstdlib_safe_strcpy(*(void *)(a1 + 24), (const char **)&v206, v200, &v205, 0x400uLL);
            LODWORD(v14) = 0;
          }
          cstdlib_strcpy(v204, "");
          if (HIWORD(v197) && v198)
          {
            cstdlib_safe_strncat(*(void *)(a1 + 24), (const char **)&v204, v198, HIWORD(v197), &v203);
            LODWORD(v14) = 0;
          }
          if (v186)
          {
            cstdlib_safe_strcpy(*(void *)(a1 + 24), (const char **)&v202, v186, &v201, 0x40uLL);
            LODWORD(v14) = 0;
          }
          else
          {
            cstdlib_strcpy(v202, "");
          }
          unsigned int v180 = (unsigned __int16)v215;
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 48) + 184))(a3, a4) & 0x80000000) != 0
            || (unsigned __int16)v214 != 1)
          {
            unsigned __int16 v149 = "latin";
          }
          else
          {
            LODWORD(v14) = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48) + 176))(a3, a4, v180, 9, &v196, &v214);
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_3;
            }
            size_t v148 = cstdlib_strlen(v196);
            if (v148 > cstdlib_strlen("normal")) {
              goto LABEL_3;
            }
            unsigned __int16 v149 = v196;
          }
          cstdlib_strcpy(v195, v149);
LABEL_314:
          int v124 = v212;
          goto LABEL_315;
        }
LABEL_277:
        cstdlib_memcpy(&v191, (const void *)(v207 + v126 - 3), 3uLL);
        uint64_t v134 = (char *)&v191 + 3;
        goto LABEL_278;
      }
      uint64_t v133 = 0;
      while (cstdlib_strcmp(__s1, *(const char **)(*(void *)(a1 + 112) + 8 * v133))
           || !utf8_IsChineseLetter((const char *)&v191))
      {
        if (++v133 >= (unint64_t)*(unsigned __int8 *)(a1 + 120)) {
          goto LABEL_274;
        }
      }
    }
    BOOL v127 = 1;
    goto LABEL_275;
  }
  unsigned int v102 = 0;
  while (1)
  {
    uint64_t v163 = (uint64_t)v210;
    uint64_t v164 = v102;
    unsigned int v103 = &v210[2 * v102];
    unint64_t v165 = v103 + 1;
    if (*((_WORD *)v103 + 4) == 1) {
      goto LABEL_237;
    }
    if (!*((_WORD *)v103 + 4))
    {
      LODWORD(v14) = -1710219254;
      log_OutText(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Error: the prosody word should has at least one lexical word", v98, v99, v100, v162);
      goto LABEL_3;
    }
    uint64_t v186 = 0;
    cstdlib_memset(v97, 0, v205);
    cstdlib_memset(v204, 0, v203);
    cstdlib_memset(v202, 0, v201);
    __sa = v187;
    if (*v165) {
      break;
    }
    int v168 = 1;
LABEL_226:
    uint64_t v187 = __sa;
    int word_separating_markers_0 = pw_merge_NLU_0(*(void *)(a1 + 24), &v187);
    if (word_separating_markers_0 < 0) {
      goto LABEL_329;
    }
    if (*(_DWORD *)(a1 + 152) == 1) {
      pw_split_csc_pw_0(*(char **)(a1 + 24), v163 + 16 * v164, (const char **)&v206, (uint64_t *)&v205);
    }
    uint64_t v179 = (unsigned __int16 **)(v163 + 16 * v164);
    int word_separating_markers_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(*(void *)(a1 + 48) + 160))(a3, a4, **v179, 2, 1, &v212, (char *)&v213 + 2);
    if (word_separating_markers_0 < 0) {
      goto LABEL_329;
    }
    int v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(*(void *)(a1 + 48)
                                                                                                + 160);
    uint64_t v116 = **v179;
    uint64_t v97 = v206;
    __int16 v117 = cstdlib_strlen(v206);
    int word_separating_markers_0 = v115(a3, a4, v116, 3, (unsigned __int16)(v117 + 1), v97, (char *)&v213 + 2);
    if (word_separating_markers_0 < 0) {
      goto LABEL_329;
    }
    hlp_NLUStrRemoveKeyVal(__sa, "POS");
    hlp_NLUStrSet(__sa, "POS", v204);
    uint64_t v175 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(*(void *)(a1 + 48)
                                                                                                + 160);
    uint64_t v118 = **v179;
    __int16 v119 = cstdlib_strlen(__sa);
    int word_separating_markers_0 = v175(a3, a4, v118, 14, (unsigned __int16)(v119 + 1), __sa, (char *)&v213 + 2);
    unsigned int v199 = "";
    if (word_separating_markers_0 < 0) {
      goto LABEL_329;
    }
    if (__sa)
    {
      heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)__sa);
      uint64_t v187 = 0;
    }
    if (v168)
    {
      uint64_t v176 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(*(void *)(a1 + 48)
                                                                                                  + 160);
      uint64_t v120 = **v179;
      int v121 = v202;
      __int16 v122 = cstdlib_strlen(v202);
      int word_separating_markers_0 = v176(a3, a4, v120, 10, (unsigned __int16)(v122 + 1), v121, (char *)&v213 + 2);
      if (word_separating_markers_0 < 0) {
        goto LABEL_329;
      }
    }
    unsigned int v101 = HIWORD(v208);
LABEL_237:
    unsigned int v102 = v164 + 1;
    if ((int)v164 + 1 >= v101) {
      goto LABEL_238;
    }
  }
  int v104 = 0;
  LODWORD(v14) = -1710219254;
  int v168 = 1;
  unsigned __int16 v174 = (void *)(v163 + 16 * v164);
  uint64_t v178 = 0;
  while (1)
  {
    int v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 48)
                                                                                               + 168))(a3, a4, *(unsigned __int16 *)(*v174 + 2 * v178), 1, 1, &v213, &v214);
    if (v105 < 0
      || (int v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 48) + 168))(a3, a4, *(unsigned __int16 *)(*v174 + 2 * v178), 2, 1, &v212, &v214), v105 < 0)|| (int v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48)+ 176))(a3, a4, *(unsigned __int16 *)(*v174 + 2 * v178), 3, &v200, &v214), v105 < 0)|| (int v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48)+ 176))(
                   a3,
                   a4,
                   *(unsigned __int16 *)(*v174 + 2 * v178),
                   14,
                   &v199,
                   &v214),
          v105 < 0))
    {
LABEL_333:
      LODWORD(v14) = v105;
      goto LABEL_334;
    }
    int v166 = *(uint64_t **)(*(void *)(a1 + 24) + 8);
    size_t v106 = cstdlib_strlen(v199);
    size_t v107 = v106;
    if (!__sa) {
      break;
    }
    size_t v108 = cstdlib_strlen(__sa);
    unsigned __int16 v109 = (char *)heap_Realloc(v166, (uint64_t)__sa, v107 + v108 + 2);
    if (!v109) {
      goto LABEL_334;
    }
    uint64_t v110 = v109;
    cstdlib_strcat(v109, ";");
    cstdlib_strcat(v110, v199);
    __sa = v110;
LABEL_200:
    if (v168)
    {
      int v168 = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 48) + 184))(a3, a4, *(unsigned __int16 *)(*v174 + 2 * v178), 10, &v197) & 0x80000000) == 0&& (unsigned __int16)v197 == 1)
      {
        int v105 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 48)
                                                                                            + 176))(a3, a4, *(unsigned __int16 *)(*v174 + 2 * v178), 10, &v186, &v214);
        if (v105 < 0) {
          goto LABEL_333;
        }
        int v168 = 1;
      }
    }
    else
    {
      int v168 = 0;
    }
    if (v178)
    {
      *(unsigned char *)((unsigned __int16)v213 + v207 - 1) = 45;
      cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v206, ".", &v205, 0x400uLL);
      cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v204, "-", &v203, 0x40uLL);
      unsigned int v167 = *(unsigned __int16 *)(*v174 + 2 * v178);
      uint64_t v196 = v200;
      uint64_t v111 = cstdlib_strstr(v200, "{SEP");
      uint64_t v196 = v111;
      if (v111)
      {
        uint64_t v196 = v111 + 4;
        v111[4] += v104;
      }
    }
    else
    {
      unsigned int v167 = 0;
    }
    cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v206, v200, &v205, 0x400uLL);
    if (hlp_NLUStrFind(v199, "POS", &v198, (unsigned __int16 *)&v197 + 1)) {
      cstdlib_safe_strncat(*(void *)(a1 + 24), (const char **)&v204, v198, HIWORD(v197), &v203);
    }
    int v112 = v168;
    if (!v186) {
      int v112 = 0;
    }
    if (v112 == 1) {
      cstdlib_safe_strcat(*(void *)(a1 + 24), (const char **)&v202, v186, &v201, 0x40uLL);
    }
    for (uint64_t i = v200; ; uint64_t i = v114 + 1)
    {
      int v114 = cstdlib_strstr(i, ".");
      uint64_t v196 = v114;
      if (!v114)
      {
        if (!i) {
          break;
        }
        int v114 = cstdlib_strstr(i, "{SEP");
        uint64_t v196 = v114;
        if (!v114) {
          break;
        }
      }
      ++v104;
    }
    if (v167)
    {
      int v105 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 48) + 192))(a3, a4, v167);
      if (v105 < 0) {
        goto LABEL_333;
      }
    }
    ++v104;
    if (++v178 >= (unint64_t)(unsigned __int16)*v165) {
      goto LABEL_226;
    }
  }
  __sa = (char *)heap_Alloc((uint64_t)v166, v106 + 1);
  if (__sa)
  {
    cstdlib_strcpy(__sa, v199);
    goto LABEL_200;
  }
  __sa = 0;
LABEL_334:
  uint64_t v187 = __sa;
LABEL_3:
  uint64_t v15 = (int *)v194;
  if (v194) {
LABEL_4:
  }
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v15);
LABEL_5:
  if (v12)
  {
    if (v13)
    {
      uint64_t v16 = v13;
      uint64_t v17 = v13;
      char v18 = (uint64_t *)v12;
      do
      {
        if (*v18) {
          heap_Free(*(void **)(*(void *)(a1 + 24) + 8), *v18);
        }
        v18 += 5;
        --v17;
      }
      while (v17);
      __int16 v19 = (uint64_t *)(v12 + 8);
      do
      {
        if (*v19) {
          heap_Free(*(void **)(*(void *)(a1 + 24) + 8), *v19);
        }
        v19 += 5;
        --v16;
      }
      while (v16);
    }
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v12);
  }
  uint64_t v20 = (uint64_t)v210;
  if (v210)
  {
    uint64_t v21 = HIWORD(v208);
    if (HIWORD(v208))
    {
      uint64_t v22 = v210;
      do
      {
        if (*v22)
        {
          heap_Free(*(void **)(*(void *)(a1 + 24) + 8), *v22);
          *uint64_t v22 = 0;
        }
        v22 += 2;
        --v21;
      }
      while (v21);
    }
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v20);
  }
  uint64_t v23 = v209;
  if (v209)
  {
    unsigned int v24 = (unsigned __int16)v208;
    if ((_WORD)v208)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      do
      {
        uint64_t v27 = *(void *)(v209 + v25);
        if (v27)
        {
          heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v27);
          *(void *)(v209 + v25) = 0;
          unsigned int v24 = (unsigned __int16)v208;
        }
        ++v26;
        v25 += 16;
      }
      while (v26 < v24);
      uint64_t v23 = v209;
    }
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), v23);
    uint64_t v209 = 0;
  }
  if (v187) {
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v187);
  }
  if (v206) {
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v206);
  }
  if (v204) {
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v204);
  }
  if (v202) {
    heap_Free(*(void **)(*(void *)(a1 + 24) + 8), (uint64_t)v202);
  }
  if ((_WORD)v208) {
    BOOL v28 = 0;
  }
  else {
    BOOL v28 = v14 == -1710219256;
  }
  if (v28) {
    return 0;
  }
  else {
    return v14;
  }
}

uint64_t pw_get_word_separating_markers_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int *a6)
{
  unsigned __int16 v26 = 0;
  uint64_t v25 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int **, unsigned __int16 *))(*(void *)(a1 + 48) + 176))(a2, a3, a4, 1, &v25, &v26);
  if ((v9 & 0x80000000) != 0)
  {
LABEL_15:
    if (*a5)
    {
      heap_Free(*(void **)(*(void *)(a1 + 24) + 8), *a5);
      *a5 = 0;
    }
    return v9;
  }
  uint64_t v10 = heap_Alloc(*(void *)(*(void *)(a1 + 24) + 8), 4 * v26);
  *a5 = v10;
  if (!v10) {
    goto LABEL_14;
  }
  *a6 = 0;
  uint64_t v15 = v26;
  if (v26)
  {
    unsigned int v16 = 0;
    uint64_t v17 = v25;
    char v18 = v25;
    __int16 v19 = v25;
    do
    {
      unsigned int v20 = *v19;
      v19 += 8;
      uint64_t v21 = (1 << v20) & 0x3C0010124001140;
      if (v20 <= 0x39 && v21 != 0)
      {
        *(_DWORD *)(v10 + 4 * v16) = v18[3] - v17[3];
        unsigned int v16 = *a6 + 1;
        *a6 = v16;
      }
      char v18 = v19;
      --v15;
    }
    while (v15);
  }
  else
  {
    unsigned int v16 = 0;
  }
  uint64_t v23 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 24) + 8), v10, 4 * (v16 + 1));
  *a5 = v23;
  if (!v23)
  {
LABEL_14:
    log_OutPublic(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 37000, 0, v11, v12, v13, v14, v25);
    uint64_t v9 = 2584748042;
    goto LABEL_15;
  }
  return v9;
}

uint64_t pw_group_csc_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t *a8, _WORD *a9)
{
  unsigned int v10 = a7;
  uint64_t v91 = *MEMORY[0x263EF8340];
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pw_group_csc Begin", a6, a7, (uint64_t)a8, v72);
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), v10, 16);
  *a8 = v13;
  if (!v13)
  {
    uint64_t v69 = 2584748042;
    uint64_t v70 = *(void *)(a1 + 32);
LABEL_74:
    log_OutPublic(v70, (uint64_t)"FE_PW", 37000, 0, v14, v15, v16, v17, v73);
    return v69;
  }
  uint64_t v74 = a8;
  uint64_t v76 = a1;
  *a9 = 0;
  __int16 v90 = 0;
  uint64_t v89 = 0;
  if (v10)
  {
    LOWORD(v18) = 0;
    uint64_t v78 = 0;
    int v19 = 0;
    uint64_t v20 = a4;
    uint64_t v21 = (unsigned __int16 *)(v13 + 8);
    unsigned int v80 = v10;
    while (1)
    {
      uint64_t v82 = v21;
      int v77 = v19;
      *uint64_t v21 = 0;
      unsigned __int16 v22 = v10 <= (unsigned __int16)(v18 + 1) ? v18 + 1 : v10;
      unsigned __int16 v75 = v22;
      unsigned __int16 v23 = v18;
      while (1)
      {
        unsigned int v24 = (unsigned __int16 **)(a6 + 16 * v23);
        if (v20)
        {
          uint64_t v25 = 0;
          int v26 = **v24;
          uint64_t v27 = (unsigned __int16 *)(a3 + 24);
          while (1)
          {
            int v28 = *v27;
            v27 += 20;
            if (v28 == v26) {
              break;
            }
            if (v20 == ++v25)
            {
              unsigned int v83 = v20;
              goto LABEL_15;
            }
          }
          unsigned int v83 = (unsigned __int16)v25;
LABEL_15:
          uint64_t v30 = 0;
          int v88 = 0;
          uint64_t v31 = (unsigned __int16 *)(a3 + 24);
          while (1)
          {
            int v32 = *v31;
            v31 += 20;
            if (v32 == v26) {
              break;
            }
            if (v20 == ++v30)
            {
              unsigned int v29 = v20;
              goto LABEL_20;
            }
          }
          unsigned int v29 = (unsigned __int16)v30;
        }
        else
        {
          unsigned int v83 = 0;
          unsigned int v29 = 0;
          int v88 = 0;
        }
LABEL_20:
        unsigned __int16 v33 = *(const char **)(a3 + 40 * v29);
        int v34 = (unsigned __int16)(Utf8_Utf8NbrOfSymbols(v33) - 1);
        BOOL v36 = 0;
        if (v34 == 2)
        {
          if (v33)
          {
            if (cstdlib_strlen(v33))
            {
              size_t v35 = cstdlib_strlen(v33);
              if (cstdlib_strstr(",.:?!;()", &v33[v35 - 1])) {
                BOOL v36 = 1;
              }
            }
          }
        }
        uint64_t v37 = 0;
        if (v20)
        {
          BOOL v38 = (unsigned __int16 *)(a3 + 24);
          while (1)
          {
            int v39 = *v38;
            v38 += 20;
            if (v39 == **v24) {
              break;
            }
            if (v20 == ++v37)
            {
              LODWORD(v37) = v20;
              goto LABEL_32;
            }
          }
          LODWORD(v37) = (unsigned __int16)v37;
        }
LABEL_32:
        uint64_t v40 = *(const char **)(a3 + 40 * v37 + 16);
        utf8_getUTF8Char((uint64_t)v33, 0, &v89);
        BOOL IsChineseLetter = utf8_IsChineseLetter((const char *)&v89);
        pw_weather_word_in_prompt(a2, a3 + 40 * v83, &v88);
        uint64_t v42 = a6 + 16 * v23;
        int v44 = *(unsigned __int16 *)(v42 + 8);
        uint64_t v43 = (unsigned __int16 *)(v42 + 8);
        if (v44 != 1) {
          break;
        }
        BOOL v45 = v34 == 2 && v36;
        if (v34 != 1 && !v45) {
          break;
        }
        BOOL v46 = cstdlib_strcmp(v40, "latin") && IsChineseLetter;
        if (!v46 || v88 != 0) {
          break;
        }
        if (cstdlib_strstr(a5, v33)) {
          char v48 = 1;
        }
        else {
          char v48 = v36;
        }
        if (v48)
        {
          unsigned __int16 v87 = v23 + 1;
          int v50 = v82;
          unsigned __int16 v23 = *v82;
          unsigned int v10 = v80;
          goto LABEL_58;
        }
        unsigned int v49 = ++*v82;
        unsigned int v10 = v80;
        if (v49 > 2)
        {
          unsigned __int16 v87 = v23;
          goto LABEL_57;
        }
        if (v80 <= ++v23)
        {
          unsigned __int16 v87 = v75;
          goto LABEL_59;
        }
      }
      unsigned __int16 v87 = v23;
      unsigned int v10 = v80;
      if (*v82) {
        goto LABEL_59;
      }
      unsigned __int16 *v82 = *v43;
LABEL_57:
      int v50 = &v87;
LABEL_58:
      *int v50 = v23 + 1;
LABEL_59:
      ++*a9;
      *(void *)(*v74 + 16 * v78) = heap_Calloc(*(void **)(v76 + 8), *(unsigned __int16 *)(*v74 + 16 * v78 + 8), 2);
      uint64_t v51 = *v74;
      uint64_t v52 = *(void *)(*v74 + 16 * v78);
      if (!v52) {
        break;
      }
      uint64_t v53 = v51 + 16 * v78;
      unsigned int v56 = *(unsigned __int16 *)(v53 + 8);
      uint64_t v54 = (unsigned __int16 *)(v53 + 8);
      unsigned int v55 = v56;
      uint64_t v18 = v87;
      if (v56 <= *(unsigned __int16 *)(a6 + 16 * (v87 - 1) + 8))
      {
        if (v55)
        {
          unint64_t v67 = 0;
          uint64_t v68 = *(void *)(a6 + 16 * (v87 - 1));
          do
          {
            *(_WORD *)(v52 + 2 * v67) = *(_WORD *)(v68 + 2 * v67);
            ++v67;
          }
          while (v67 < *v54);
        }
      }
      else
      {
        uint64_t v57 = heap_Calloc(*(void **)(v76 + 8), 1, 1024);
        if (!v57) {
          break;
        }
        uint64_t v58 = (const char *)v57;
        uint64_t v59 = *v74 + 16 * v78;
        *(_DWORD *)(v59 + 12) = 1;
        unsigned int v60 = *(unsigned __int16 *)(v59 + 8);
        if (v60)
        {
          unsigned __int16 v61 = 0;
          uint64_t v62 = -(uint64_t)v60;
          int v84 = v18;
          uint64_t v63 = (unsigned __int16 **)(a6 - 16 * v60 + 16 * v18);
          unsigned int v64 = v60 - 1;
          do
          {
            unsigned __int16 v65 = *v63;
            v63 += 2;
            *(_WORD *)(*(void *)(*v74 + 16 * v78) + 2 * (v62 + *(unsigned __int16 *)(*v74 + 16 * v78 + 8))) = *v65;
            sprintf((char *)&v58[v61], "%d-", *v65);
            unsigned __int16 v61 = cstdlib_strlen(v58);
            ++v62;
          }
          while ((unsigned __int16)v64--);
          LODWORD(v18) = v84;
        }
        log_OutText(*(void *)(v76 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"\t group [tids:%s, ntok: %d]", v15, v16, v17, (uint64_t)v58);
        heap_Free(*(void **)(v76 + 8), (uint64_t)v58);
        uint64_t v51 = *v74;
      }
      int v19 = v77 + 1;
      uint64_t v78 = (unsigned __int16)(v77 + 1);
      uint64_t v21 = (unsigned __int16 *)(v51 + 16 * v78 + 8);
      __int16 v90 = 0;
      uint64_t v89 = 0;
      if (v18 >= v10) {
        goto LABEL_71;
      }
    }
    uint64_t v69 = 2584748042;
    uint64_t v70 = *(void *)(v76 + 32);
    goto LABEL_74;
  }
LABEL_71:
  log_OutText(*(void *)(v76 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"pw_group_csc End", v15, v16, v17, v73);
  return 0;
}

uint64_t pw_igtree_process_0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v9 = a1;
  uint64_t inited = 2584748042;
  uint64_t v11 = *a4;
  uint64_t v63 = 0;
  uint64_t v12 = *a3;
  uint64_t v13 = (char **)heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(a6 + 1296) - 8);
  if (!v13) {
    return inited;
  }
  uint64_t v14 = (uint64_t *)v13;
  uint64_t inited = igtree_initFeatureVector(v9, v13, (unsigned __int16)(*(unsigned __int8 *)(a6 + 1296) - 1));
  if ((inited & 0x80000000) != 0)
  {
    uint64_t v51 = 0;
    goto LABEL_45;
  }
  uint64_t v15 = heap_Calloc(*(void **)(v9 + 8), a5, 4);
  if (!v15)
  {
    uint64_t v51 = 0;
    uint64_t inited = 2584748042;
    goto LABEL_45;
  }
  uint64_t v53 = a4;
  uint64_t v54 = a3;
  uint64_t v62 = v15;
  uint64_t v60 = v9;
  if (!v11)
  {
LABEL_41:
    *uint64_t v53 = v11;
    *uint64_t v54 = v12;
    goto LABEL_44;
  }
  unint64_t v16 = 0;
  unsigned __int16 v17 = 0;
  unsigned int v58 = a5 - 1;
  while (1)
  {
    unint64_t v18 = v12 + 16 * v16;
    int v21 = *(unsigned __int16 *)(v18 + 8);
    uint64_t v20 = (_WORD *)(v18 + 8);
    unsigned __int16 v19 = v21;
    uint64_t v57 = v11;
    if (v21)
    {
      if (v58 != v17) {
        break;
      }
    }
LABEL_8:
    ++v16;
    uint64_t v11 = v57;
    if (v16 >= (unsigned __int16)v57) {
      goto LABEL_41;
    }
  }
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v55 = (v16 + 2);
  uint64_t v56 = (v16 + 1);
  uint64_t v24 = 2;
  while (1)
  {
    uint64_t v25 = v17;
    *(_DWORD *)(v62 + 4 * v17) = v19 - 1 == v22;
    uint64_t v26 = igtree_setFeatureVector(v60, (uint64_t)v14, *(void *)(a6 + 1312), *(unsigned __int8 *)(a6 + 1296), a2, a5, v17);
    if ((v26 & 0x80000000) != 0)
    {
      uint64_t inited = v26;
      goto LABEL_44;
    }
    uint64_t inited = igtree_Process(a6, (uint64_t)v14, &v63);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_44;
    }
    if (!cstdlib_strcmp(v63, "NOMATCH")) {
      goto LABEL_36;
    }
    int v27 = *(_DWORD *)(v62 + 4 * v25);
    if (v27 == (cstdlib_strcmp(v63, "1") == 0)) {
      goto LABEL_17;
    }
    if (!v27) {
      break;
    }
    int v28 = (char *)(v12 + 16 * v56);
    unsigned int v29 = v28 + 8;
    unsigned int v30 = *((unsigned __int16 *)v28 + 4) + (unsigned __int16)*v20;
    if (v30 > 4)
    {
LABEL_17:
      uint64_t inited = 0;
      goto LABEL_36;
    }
    *uint64_t v20 = v30;
    uint64_t v45 = heap_Realloc(*(uint64_t **)(v60 + 8), *(void *)(v12 + 16 * v16), 2 * (unsigned __int16)v30);
    *(void *)(v12 + 16 * v16) = v45;
    if (!v45) {
      goto LABEL_43;
    }
    LOWORD(v46) = *v29;
    uint64_t v47 = *(void *)v28;
    if (*v29)
    {
      unint64_t v48 = 0;
      do
      {
        *(_WORD *)(v45 + 2 * (v48 - (unsigned __int16)v46 + (unsigned __int16)*v20)) = *(_WORD *)(v47 + 2 * v48);
        ++v48;
        unint64_t v46 = (unsigned __int16)*v29;
      }
      while (v48 < v46);
    }
    *(_DWORD *)(v12 + 16 * v16 + 12) |= *(_DWORD *)(v12 + 16 * v56 + 12);
    heap_Free(*(void **)(v60 + 8), v47);
    if (v55 < (unsigned __int16)v57) {
      cstdlib_memmove(v28, (const void *)(v12 + 16 * v55), 16 * ((unsigned __int16)v57 - (int)v16 - 2));
    }
    uint64_t inited = 0;
    uint64_t v57 = (v57 - 1);
LABEL_36:
    unsigned __int16 v17 = v25 + 1;
    int v22 = v23 + 1;
    unint64_t v49 = v12 + 16 * v16;
    unsigned int v50 = *(unsigned __int16 *)(v49 + 8);
    uint64_t v20 = (_WORD *)(v49 + 8);
    unsigned __int16 v19 = v50;
    if (v23 + 1 < (unint64_t)v50)
    {
      v24 += 2;
      ++v23;
      if (v58 != (unsigned __int16)(v25 + 1)) {
        continue;
      }
    }
    goto LABEL_8;
  }
  uint64_t v31 = heap_Realloc(*(uint64_t **)(v60 + 8), v12, 16 * (unsigned __int16)v57 + 16);
  if (v31)
  {
    uint64_t v12 = v31;
    if (v56 < (unsigned __int16)v57) {
      cstdlib_memmove((void *)(v31 + 16 * v55), (const void *)(v31 + 16 * v56), 16 * ((unsigned __int16)v57 + ~v16));
    }
    unint64_t v32 = v12 + 16 * v16;
    __int16 v34 = *(_WORD *)(v32 + 8);
    unsigned __int16 v33 = (_WORD *)(v32 + 8);
    unsigned __int16 v35 = v34 + ~(_WORD)v22;
    uint64_t v36 = v12 + 16 * v56;
    *(_WORD *)(v36 + 8) = v35;
    uint64_t v37 = (_WORD *)(v36 + 8);
    uint64_t v38 = heap_Alloc(*(void *)(v60 + 8), 2 * v35);
    *(void *)(v12 + 16 * v56) = v38;
    if (v38)
    {
      if (*v37)
      {
        unint64_t v39 = 0;
        uint64_t v40 = *(void *)(v12 + 16 * v16) + v24;
        do
        {
          *(_WORD *)(v38 + 2 * v39) = *(_WORD *)(v40 + 2 * v39);
          ++v39;
        }
        while (v39 < (unsigned __int16)*v37);
      }
      unint64_t v41 = v12 + 16 * v16;
      int v43 = *(_DWORD *)(v41 + 12);
      uint64_t v42 = (_DWORD *)(v41 + 12);
      if (v43 == 1)
      {
        *uint64_t v42 = 0;
        int v44 = 1;
      }
      else
      {
        int v44 = 0;
      }
      uint64_t inited = 0;
      *(_DWORD *)(v12 + 16 * v56 + 12) = v44;
      *unsigned __int16 v33 = v23 + 1;
      uint64_t v57 = (v57 + 1);
      goto LABEL_36;
    }
  }
LABEL_43:
  uint64_t inited = 2584748042;
LABEL_44:
  uint64_t v9 = v60;
  uint64_t v51 = v62;
LABEL_45:
  igtree_freeFeatureVector(v9, v14, (unsigned __int16)(*(unsigned __int8 *)(a6 + 1296) - 1));
  heap_Free(*(void **)(v9 + 8), (uint64_t)v14);
  if (v51) {
    heap_Free(*(void **)(v9 + 8), v51);
  }
  return inited;
}

uint64_t pw_respect_word_separating_markers_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned __int16 *a6)
{
  if (!*a6) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v34 = 0;
  uint64_t v14 = *a5;
  while (1)
  {
    if (*(unsigned __int16 *)(v14 + 16 * v12 + 8) >= 2u)
    {
      int v34 = 0;
      uint64_t v14 = *a5;
      if (*(unsigned __int16 *)(*a5 + 16 * v12 + 8) >= 2u) {
        break;
      }
    }
LABEL_17:
    if (++v12 >= (unint64_t)*a6) {
      return v13;
    }
  }
  unsigned __int16 v15 = 1;
  while (1)
  {
    unint64_t v16 = (unsigned __int16 *)(*(void *)(v14 + 16 * v12) + 2 * v15);
    uint64_t v13 = pw_check_if_glue_forbidden_0(a1, a2, a3, a4, *(v16 - 1), *v16, &v34);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    if (v34)
    {
      uint64_t v17 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 24) + 8), *a5, 16 * *a6 + 16);
      if (!v17) {
        goto LABEL_21;
      }
      *a5 = v17;
      unsigned __int16 v22 = *a6 + 1;
      *a6 = v22;
      uint64_t v33 = v12 + 1;
      if (v12 + 2 < (unint64_t)v22)
      {
        cstdlib_memmove((void *)(v17 + 16 * (v12 + 2)), (const void *)(v17 + 16 * (v12 + 1)), (uint64_t)(((unint64_t)(v22 - v12) << 32) - 0x200000000) >> 28);
        uint64_t v17 = *a5;
      }
      uint64_t v23 = v17 + 16 * v12;
      unsigned __int16 v24 = *(_WORD *)(v23 + 8) - v15;
      *(_WORD *)(v17 + 16 * v33 + 8) = v24;
      *(_WORD *)(v23 + 8) = v15;
      *(void *)(*a5 + 16 * v33) = heap_Calloc(*(void **)(*(void *)(a1 + 24) + 8), 2, v24);
      uint64_t v14 = *a5;
      uint64_t v25 = *(void *)(*a5 + 16 * v33);
      if (!v25)
      {
LABEL_21:
        log_OutPublic(*(void *)(*(void *)(a1 + 24) + 32), (uint64_t)"FE_PW", 37000, 0, v18, v19, v20, v21, v32);
        return 2584748042;
      }
      uint64_t v26 = v14 + 16 * v33;
      int v28 = *(unsigned __int16 *)(v26 + 8);
      int v27 = (unsigned __int16 *)(v26 + 8);
      if (v28)
      {
        unint64_t v29 = 0;
        uint64_t v30 = *(void *)(v14 + 16 * v12) + 2 * v15;
        do
        {
          *(_WORD *)(v25 + 2 * v29) = *(_WORD *)(v30 + 2 * v29);
          ++v29;
        }
        while (v29 < *v27);
      }
      goto LABEL_17;
    }
    ++v15;
    uint64_t v14 = *a5;
    if (*(unsigned __int16 *)(*a5 + 16 * v12 + 8) <= v15) {
      goto LABEL_17;
    }
  }
}

char *cstdlib_safe_strcat(uint64_t a1, const char **a2, char *__s, void *a4, unint64_t a5)
{
  size_t v10 = cstdlib_strlen(__s);
  checksize_and_realloc(a1, a2, v10, a4, a5);
  uint64_t v11 = (char *)*a2;

  return cstdlib_strcat(v11, __s);
}

char *cstdlib_safe_strncat(uint64_t a1, const char **a2, const char *a3, size_t a4, void *a5)
{
  checksize_and_realloc(a1, a2, a4, a5, 0x40uLL);
  uint64_t v8 = (char *)*a2;

  return cstdlib_strncat(v8, a3, a4);
}

uint64_t pw_merge_NLU_0(uint64_t a1, char **a2)
{
  int v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unsigned __int16 v5 = 0;
  do
  {
    if (hlp_NLUStrKeyLen(v2) >= 3)
    {
      unsigned int v6 = *v2 - 69;
      BOOL v7 = v6 > 0xE;
      int v8 = (1 << v6) & 0x4011;
      BOOL v9 = v7 || v8 == 0;
      if (!v9 && v2[1] == 95) {
        ++v5;
      }
    }
    int v2 = hlp_NLUStrNext(v2);
  }
  while (v2);
  if (!v5) {
    return 0;
  }
  uint64_t v10 = 2584748042;
  uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), 8, v5);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *a2;
    if (!*a2) {
      goto LABEL_160;
    }
    int v105 = a2;
    unsigned int v104 = -1710219254;
    unsigned __int16 v14 = 0;
    do
    {
      unsigned int v15 = hlp_NLUStrKeyLen(v13);
      if (v15 >= 3)
      {
        unsigned int v16 = *v13 - 69;
        BOOL v7 = v16 > 0xE;
        int v17 = (1 << v16) & 0x4011;
        BOOL v18 = v7 || v17 == 0;
        if (!v18 && v13[1] == 95)
        {
          unsigned int v19 = v15;
          uint64_t v20 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v15 - 1);
          if (!v20)
          {
            uint64_t v26 = v12;
            uint64_t v10 = 2584748042;
            goto LABEL_185;
          }
          uint64_t v21 = v20;
          cstdlib_strncpy(v20, v13 + 2, v19 - 2);
          if (v14)
          {
            uint64_t v22 = v14;
            uint64_t v23 = (const char **)v12;
            uint64_t v24 = v14;
            while (1)
            {
              if (!*v23) {
                goto LABEL_29;
              }
              if (!cstdlib_strcmp(*v23, v21)) {
                break;
              }
              ++v23;
              if (!--v24) {
                goto LABEL_29;
              }
            }
            heap_Free(*(void **)(a1 + 8), (uint64_t)v21);
          }
          else
          {
            uint64_t v22 = 0;
LABEL_29:
            *(void *)(v12 + 8 * v22) = v21;
            ++v14;
          }
        }
      }
      uint64_t v13 = hlp_NLUStrNext(v13);
    }
    while (v13);
    if (!v14)
    {
LABEL_160:
      uint64_t v10 = 0;
      goto LABEL_191;
    }
    uint64_t v25 = heap_Realloc(*(uint64_t **)(a1 + 8), v12, 8 * v14);
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 2, v14);
      if (v27)
      {
        uint64_t v28 = v27;
        for (uint64_t i = *v105; i; uint64_t i = hlp_NLUStrNext(i))
        {
          unsigned int v30 = hlp_NLUStrKeyLen(i);
          if (v30 >= 3)
          {
            unsigned int v31 = *i - 69;
            BOOL v7 = v31 > 0xE;
            int v32 = (1 << v31) & 0x4011;
            BOOL v33 = v7 || v32 == 0;
            if (!v33 && i[1] == 95)
            {
              uint64_t v34 = 0;
              size_t v35 = (unsigned __int16)(v30 - 2);
              while (1)
              {
                uint64_t v36 = *(const char **)(v26 + 8 * v34);
                if (!v36) {
                  goto LABEL_49;
                }
                if (!cstdlib_strncmp(v36, i + 2, v35)) {
                  break;
                }
                if (v14 == ++v34) {
                  goto LABEL_49;
                }
              }
              if ((v34 & 0x8000) == 0) {
                ++*(_WORD *)(v28 + 2 * v34);
              }
            }
          }
LABEL_49:
          ;
        }
        uint64_t v37 = heap_Calloc(*(void **)(a1 + 8), 8, v14);
        if (!v37)
        {
          uint64_t v10 = 2584748042;
          goto LABEL_184;
        }
        uint64_t v38 = v37;
        uint64_t v39 = 0;
        if ((v14 & 0xFFFE) != 0) {
          uint64_t v40 = v14;
        }
        else {
          uint64_t v40 = 1;
        }
        do
        {
          uint64_t v41 = heap_Calloc(*(void **)(a1 + 8), 8, *(unsigned __int16 *)(v28 + 2 * v39));
          *(void *)(v38 + 8 * v39) = v41;
          if (!v41)
          {
            uint64_t v87 = v28;
            uint64_t v42 = 0;
            goto LABEL_170;
          }
          ++v39;
        }
        while (v40 != v39);
        uint64_t v42 = heap_Calloc(*(void **)(a1 + 8), 2, v14);
        if (!v42)
        {
LABEL_166:
          uint64_t v87 = v28;
          goto LABEL_170;
        }
        uint64_t v96 = v40;
        for (unsigned int j = *v105; j; unsigned int j = hlp_NLUStrNext(j))
        {
          unsigned int v44 = hlp_NLUStrKeyLen(j);
          if (v44 >= 3)
          {
            unsigned int v45 = *j - 69;
            BOOL v7 = v45 > 0xE;
            int v46 = (1 << v45) & 0x4011;
            if (!v7 && v46 != 0 && j[1] == 95)
            {
              int KeyIdx = hlp_getKeyIdx(v26, v14, j + 2, (unsigned __int16)(v44 - 2));
              if ((KeyIdx & 0x80000000) == 0)
              {
                uint64_t v49 = (unsigned __int16)KeyIdx;
                unsigned int v102 = *(char **)(v38 + 8 * (unsigned __int16)KeyIdx);
                unsigned int v50 = hlp_NLUStrKeyValue(j);
                uint64_t v51 = (const char *)v50;
                unsigned int v52 = v50 ? hlp_NLUStrLength((char *)v50) : 0;
                if (!hlp_checkValExist(v102, *(unsigned __int16 *)(v42 + 2 * v49), v51, v52))
                {
                  uint64_t v53 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v52 + 2);
                  if (!v53)
                  {
LABEL_167:
                    uint64_t v87 = v28;
                    goto LABEL_169;
                  }
                  if (v51)
                  {
                    size_t v54 = v52;
                    uint64_t v55 = v53;
                    cstdlib_strncpy(v53, v51, v54);
                  }
                  else
                  {
                    uint64_t v55 = v53;
                    cstdlib_strcpy(v53, " ");
                  }
                  uint64_t v56 = *(unsigned __int16 *)(v42 + 2 * v49);
                  *(void *)&v102[8 * v56] = v55;
                  *(_WORD *)(v42 + 2 * v49) = v56 + 1;
                }
              }
            }
          }
        }
        uint64_t v57 = 0;
        uint64_t v40 = v96;
        do
        {
          uint64_t v58 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(v38 + 8 * v57), 8 * *(unsigned __int16 *)(v42 + 2 * v57));
          if (!v58) {
            goto LABEL_166;
          }
          *(void *)(v38 + 8 * v57++) = v58;
        }
        while (v96 != v57);
        uint64_t v59 = 0;
        while (!*(_WORD *)(v42 + 2 * v59))
        {
LABEL_157:
          ++v59;
          uint64_t v40 = v96;
          if (v59 == v96)
          {
            uint64_t v87 = v28;
            unsigned int v104 = 0;
            goto LABEL_170;
          }
        }
        size_t v60 = 0;
        while (1)
        {
          unsigned __int16 v61 = *(const char **)(v26 + 8 * v59);
          uint64_t v62 = *(const char **)(*(void *)(v38 + 8 * v59) + 8 * v60);
          uint64_t v63 = *v105;
          unsigned __int16 v107 = 0;
          char __s2 = 0;
          unsigned int v103 = v63;
          if (!v63) {
            goto LABEL_131;
          }
          size_t __n_4 = v60;
          if (v62) {
            unsigned int __n = (unsigned __int16)cstdlib_strlen(v62);
          }
          else {
            unsigned int __n = 0;
          }
          unsigned int v64 = *(void **)(a1 + 8);
          size_t v65 = cstdlib_strlen(v61);
          uint64_t v66 = (char *)heap_Calloc(v64, 1, v65 + 3);
          if (!v66) {
            goto LABEL_167;
          }
          unint64_t v67 = v66;
          __s1 = (char *)v62;
          cstdlib_strcpy(v66, "S_");
          cstdlib_strcat(v67, v61);
          uint64_t v68 = *(void **)(a1 + 8);
          size_t v69 = cstdlib_strlen(v61);
          uint64_t v70 = (char *)heap_Calloc(v68, 1, v69 + 3);
          if (!v70)
          {
            unsigned __int16 __s = 0;
            unsigned int v101 = 0;
LABEL_124:
            int v81 = -1710219254;
            goto LABEL_125;
          }
          uint64_t v71 = v70;
          cstdlib_strcpy(v70, "I_");
          unsigned __int16 __s = v71;
          cstdlib_strcat(v71, v61);
          uint64_t v72 = *(void **)(a1 + 8);
          size_t v73 = cstdlib_strlen(v61);
          uint64_t v74 = (char *)heap_Calloc(v72, 1, v73 + 3);
          if (!v74)
          {
            unsigned int v101 = 0;
            goto LABEL_124;
          }
          unsigned __int16 v75 = v74;
          cstdlib_strcpy(v74, "E_");
          unsigned int v101 = v75;
          cstdlib_strcat(v75, v61);
          uint64_t v76 = __s1;
          if (!hlp_NLUStrFind(v103, v67, &__s2, &v107)) {
            goto LABEL_96;
          }
          int v77 = v107;
          if (!__s1 || v107) {
            goto LABEL_93;
          }
          if (cstdlib_strcmp(__s1, " ")) {
            break;
          }
LABEL_97:
          if (!hlp_NLUStrFind(v103, __s, &__s2, &v107)) {
            goto LABEL_105;
          }
          int v78 = v107;
          if (__s1 && !v107)
          {
            if (!cstdlib_strcmp(__s1, " ")) {
              goto LABEL_106;
            }
            int v78 = v107;
          }
          if (!__s1 || v78 != __n || cstdlib_strncmp(__s1, __s2, __n))
          {
LABEL_105:
            heap_Free(*(void **)(a1 + 8), (uint64_t)__s);
            unsigned __int16 __s = 0;
          }
LABEL_106:
          if (!hlp_NLUStrFind(v103, v101, &__s2, &v107)) {
            goto LABEL_116;
          }
          int v79 = v107;
          if (__s1 && !v107)
          {
            if (!cstdlib_strcmp(__s1, " ")) {
              goto LABEL_117;
            }
            int v79 = v107;
          }
          if (!__s1 || v79 != __n)
          {
LABEL_116:
            heap_Free(*(void **)(a1 + 8), (uint64_t)v101);
            unsigned int v101 = 0;
            if (!__s1) {
              goto LABEL_119;
            }
            goto LABEL_117;
          }
          if (cstdlib_strncmp(__s1, __s2, __n))
          {
            heap_Free(*(void **)(a1 + 8), (uint64_t)v101);
            unsigned int v101 = 0;
          }
LABEL_117:
          if (!cstdlib_strcmp(__s1, " ")) {
            uint64_t v76 = 0;
          }
LABEL_119:
          hlp_NLUStrRemoveRangeKey((unsigned __int8 *)v103, v61, v76);
          if (v67)
          {
            if (!__s)
            {
              unsigned int v80 = v67;
              if (!v101) {
                goto LABEL_122;
              }
            }
          }
          if (v67) {
            BOOL v84 = 1;
          }
          else {
            BOOL v84 = __s == 0;
          }
          char v85 = !v84;
          if (!v84)
          {
            uint64_t v86 = __s;
            if (!v101) {
              goto LABEL_141;
            }
          }
          if (v67 || __s || !v101)
          {
            if (v67 && v101)
            {
              hlp_NLUStrAppendKeyVal(v103, v67, v76);
              unsigned int v80 = v101;
              goto LABEL_122;
            }
            if (v67 && __s && (unsigned int v80 = v67, !v101))
            {
LABEL_122:
              hlp_NLUStrAppendKeyVal(v103, v80, v76);
              int v81 = 0;
            }
            else
            {
              if (!v101) {
                char v85 = 0;
              }
              uint64_t v86 = v101;
              if (v85)
              {
LABEL_141:
                hlp_NLUStrAppendKeyVal(v103, v86, v76);
                uint64_t v82 = (uint64_t)__s;
                int v81 = 0;
LABEL_127:
                heap_Free(*(void **)(a1 + 8), v82);
LABEL_128:
                uint64_t v83 = (uint64_t)v101;
                if (!v101) {
                  goto LABEL_130;
                }
                goto LABEL_129;
              }
              int v81 = 0;
              if (!v67)
              {
LABEL_126:
                uint64_t v82 = (uint64_t)__s;
                if (__s) {
                  goto LABEL_127;
                }
                goto LABEL_128;
              }
            }
LABEL_125:
            heap_Free(*(void **)(a1 + 8), (uint64_t)v67);
            goto LABEL_126;
          }
          hlp_NLUStrAppendKeyVal(v103, v101, v76);
          uint64_t v83 = (uint64_t)v101;
          int v81 = 0;
LABEL_129:
          heap_Free(*(void **)(a1 + 8), v83);
LABEL_130:
          size_t v60 = __n_4;
          if (v81 < 0)
          {
            uint64_t v87 = v28;
            unsigned int v104 = v81;
LABEL_169:
            uint64_t v40 = v96;
LABEL_170:
            uint64_t v88 = 0;
            do
            {
              uint64_t v89 = *(void *)(v38 + 8 * v88);
              if (v89)
              {
                if (v42)
                {
                  unsigned __int16 v90 = *(_WORD *)(v42 + 2 * v88);
                  if (v90)
                  {
                    for (unint64_t k = 0; k < v90; ++k)
                    {
                      uint64_t v92 = *(void *)(*(void *)(v38 + 8 * v88) + 8 * k);
                      if (v92)
                      {
                        heap_Free(*(void **)(a1 + 8), v92);
                        unsigned __int16 v90 = *(_WORD *)(v42 + 2 * v88);
                      }
                    }
                    uint64_t v89 = *(void *)(v38 + 8 * v88);
                  }
                }
                heap_Free(*(void **)(a1 + 8), v89);
              }
              ++v88;
            }
            while (v88 != v40);
            heap_Free(*(void **)(a1 + 8), v38);
            uint64_t v28 = v87;
            if (v42) {
              heap_Free(*(void **)(a1 + 8), v42);
            }
            uint64_t v10 = v104;
LABEL_184:
            heap_Free(*(void **)(a1 + 8), v28);
            uint64_t v12 = v26;
LABEL_185:
            if (v14)
            {
LABEL_186:
              uint64_t v93 = 0;
              do
              {
                uint64_t v94 = *(void *)(v26 + 8 * v93);
                if (v94) {
                  heap_Free(*(void **)(a1 + 8), v94);
                }
                ++v93;
              }
              while (v14 != v93);
              uint64_t v12 = v26;
            }
LABEL_191:
            heap_Free(*(void **)(a1 + 8), v12);
            return v10;
          }
LABEL_131:
          if (++v60 >= *(unsigned __int16 *)(v42 + 2 * v59)) {
            goto LABEL_157;
          }
        }
        int v77 = v107;
LABEL_93:
        if (__s1 && v77 == __n && !cstdlib_strncmp(__s1, __s2, __n)) {
          goto LABEL_97;
        }
LABEL_96:
        heap_Free(*(void **)(a1 + 8), (uint64_t)v67);
        unint64_t v67 = 0;
        goto LABEL_97;
      }
    }
    else
    {
      uint64_t v26 = v12;
    }
    uint64_t v10 = 2584748042;
    goto LABEL_186;
  }
  return v10;
}

char *pw_split_csc_pw_0(char *result, uint64_t a2, const char **a3, uint64_t *a4)
{
  if (*(_DWORD *)(a2 + 12) == 1 && (*(_WORD *)(a2 + 8) & 0xFFFE) == 4)
  {
    unsigned __int16 v5 = (char *)*a3;
    if (*a3)
    {
      BOOL v7 = result;
      char v8 = 1;
      do
      {
        char v9 = v8;
        uint64_t result = cstdlib_strstr(v5, ".");
        if (result) {
          unsigned __int16 v5 = result + 1;
        }
        else {
          unsigned __int16 v5 = 0;
        }
        if (!result) {
          break;
        }
        char v8 = 0;
      }
      while ((v9 & 1) != 0);
      if (result)
      {
        size_t v10 = cstdlib_strlen(*a3);
        unint64_t v11 = v10 + cstdlib_strlen("{SEP2}") + 1;
        uint64_t v12 = *a4;
        if (v11 > *a4)
        {
          uint64_t result = (char *)heap_Realloc(*((uint64_t **)v7 + 1), (uint64_t)*a3, v11);
          if (!result) {
            return result;
          }
          *a3 = result;
          *a4 = v11;
          uint64_t v12 = v11;
        }
        uint64_t result = (char *)heap_Calloc(*((void **)v7 + 1), 1, v12);
        if (result)
        {
          uint64_t v13 = result;
          cstdlib_strncpy(result, *a3, (~*(_DWORD *)a3 + v5));
          cstdlib_strcat(v13, "{SEP2}");
          cstdlib_strcat(v13, v5);
          unsigned __int16 v14 = (char *)*a3;
          return cstdlib_strcpy(v14, v13);
        }
      }
    }
  }
  return result;
}

uint64_t pw_check_if_glue_forbidden_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  *a7 = 0;
  pw_check_if_word_in_prompt_0(a1, a2, a3, a5, a7);
  uint64_t result = 0;
  if (!*a7)
  {
    pw_check_if_word_in_prompt_0(a1, a2, a3, a6, a7);
    if (*a7)
    {
      return 0;
    }
    else
    {
      int v24 = 0;
      int v25 = 0;
      uint64_t v23 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, int *))(*(void *)(a1 + 48)
                                                                                               + 176))(a2, a3, a4, 1, &v23, &v24);
      if ((result & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 48)
                                                                                            + 168))(a2, a3, a5, 1, 1, (char *)&v25 + 2, (char *)&v24 + 2);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 48) + 168))(a2, a3, a6, 2, 1, &v25, (char *)&v24 + 2);
        if ((result & 0x80000000) == 0)
        {
          if ((_WORD)v24)
          {
            uint64_t v15 = 0;
            unsigned int v16 = (int *)(v23 + 12);
            while (1)
            {
              int v17 = *v16;
              v16 += 8;
              if (v17 - *(_DWORD *)(v23 + 12) > HIWORD(v25)) {
                break;
              }
              if ((unsigned __int16)v24 == ++v15) {
                goto LABEL_23;
              }
            }
            unsigned int v18 = (unsigned __int16)v15;
          }
          else
          {
            unsigned int v18 = 0;
          }
          if (v18 < (unsigned __int16)v24)
          {
            unint64_t v19 = (unsigned __int16)v24 - (unint64_t)v18;
            uint64_t v20 = (_DWORD *)(v23 + 32 * v18);
            while (v20[3] - *(_DWORD *)(v23 + 12) < (unsigned __int16)v25)
            {
              if (*v20 <= 0x39u && ((1 << *v20) & 0x3C0010124001140) != 0)
              {
                int v22 = 1;
                goto LABEL_24;
              }
              v20 += 8;
              if (!--v19) {
                break;
              }
            }
          }
LABEL_23:
          int v22 = 0;
LABEL_24:
          *a7 = v22;
        }
      }
    }
  }
  return result;
}

char *cstdlib_safe_strcpy(uint64_t a1, const char **a2, char *__s, void *a4, unint64_t a5)
{
  size_t v10 = cstdlib_strlen(__s);
  checksize_and_realloc(a1, a2, v10, a4, a5);
  unint64_t v11 = (char *)*a2;

  return cstdlib_strcpy(v11, __s);
}

const char *checksize_and_realloc(uint64_t a1, const char **a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t result = (const char *)cstdlib_strlen(*a2);
  if ((unint64_t)&result[a3 + 1] > *a4)
  {
    unint64_t v11 = result;
    if (a3 + 1 > a5) {
      a5 = a3 + 1;
    }
    uint64_t result = (const char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*a2, *a4 + a5);
    if (result)
    {
      *a2 = result;
      unint64_t v12 = *a4 + a5;
      *a4 = v12;
      uint64_t v13 = (char *)&v11[(void)result];
      return (const char *)cstdlib_memset(v13, 0, v12 - (void)v11);
    }
  }
  return result;
}

uint64_t pw_check_if_word_in_prompt_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v10 = 0;
  *a5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 48)
                                                                                                 + 168))(a2, a3, a4, 1, 1, &v10, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *))(*(void *)(a1 + 48) + 312))(a2, a3, (unsigned __int16)v10, a5);
  }
  return result;
}

uint64_t load_igtree_cfg(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v10 = 0;
  __int16 v9 = -1;
  char v8 = 0;
  *a4 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a3 + 96))(a1, a2, "fecfg", "statbnd_igtree", &v10, &v9, &v8);
  if ((v5 & 0x80000000) == 0 && v9 == 1)
  {
    unsigned int v6 = *v10;
    v6[cstdlib_strlen(*v10) - 1] = 0;
    if (!cstdlib_strcmp(*v10, "yes")) {
      *a4 = 1;
    }
  }
  return v5;
}

uint64_t igtree_freeFeatureVector(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      if (*a2)
      {
        heap_Free(*(void **)(a1 + 8), *a2);
        *a2 = 0;
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t load_igtree(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  memset(v30, 0, 240);
  *(void *)uint64_t v27 = 0;
  uint64_t v28 = 0;
  *a4 = 0;
  char __s2 = 0;
  memset(__s1, 0, sizeof(__s1));
  v30[15] = 0u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_7;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v28);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_7;
  }
  cstdlib_strcat((char *)__s1, "pwigtree_");
  cstdlib_strcat((char *)__s1, __s2);
  cstdlib_strcat((char *)__s1, "_");
  cstdlib_strcat((char *)__s1, v28);
  int v16 = brokeraux_ComposeBrokerString(a3, (const char *)__s1, 1, 1, __s2, 0, 0, v30, 0x100uLL);
  uint64_t v17 = v16 & (v16 >> 31);
  if ((v16 & (v16 >> 31)) < 0) {
    goto LABEL_8;
  }
  uint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v30, "IGTR", 1031, (uint64_t *)v27);
  if ((Str & 0x80000000) != 0)
  {
LABEL_7:
    uint64_t v17 = Str;
  }
  else
  {
    unsigned int v18 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *a4 = v18;
    if (v18)
    {
      uint64_t v17 = igtree_Init(a1, a2, *(uint64_t *)v27, v18);
      ssftriff_reader_CloseChunk(*(uint64_t *)v27);
    }
    else
    {
      log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PW", 37000, 0, v19, v20, v21, v22, v26);
      uint64_t v17 = 2584748042;
    }
  }
LABEL_8:
  if (*(void *)v27)
  {
    int v23 = ssftriff_reader_ObjClose(*(void **)v27, v9, v10, v11, v12, v13, v14, v15);
    if (v23 >= 0 || (int)v17 <= -1) {
      return v17;
    }
    else {
      return v23;
    }
  }
  return v17;
}

uint64_t igtree_initFeatureVector(uint64_t a1, char **a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    unsigned int v6 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6) {
      break;
    }
    cstdlib_strcpy(v6, "=");
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v7, v8, v9, v10, v12);
  return 2584748042;
}

uint64_t igtree_setFeatureVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unsigned __int16 v77 = 0;
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), 1, 2048);
  if (v14)
  {
    uint64_t v19 = (char *)v14;
    uint64_t v75 = a2;
    unsigned int v76 = a7;
    if (a4 < 2)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = a4 - 1;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v20), "word"))
      {
        if (v21 == ++v20) {
          goto LABEL_27;
        }
      }
      unsigned __int16 v77 = v20;
LABEL_27:
      uint64_t v31 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v31), "word"))
      {
        if (v21 == ++v31)
        {
          uint64_t v22 = 0;
          goto LABEL_35;
        }
      }
      unsigned __int16 v77 = v31;
      if (v76 >= a6) {
        uint64_t v32 = "=";
      }
      else {
        uint64_t v32 = *(const char **)(a5 + 40 * v76);
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 0, v75, v32);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_35:
      uint64_t v33 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v33), "lword"))
      {
        if (v21 == ++v33) {
          goto LABEL_43;
        }
      }
      unsigned __int16 v77 = v33;
      if (v76 - 1 >= a6) {
        uint64_t v34 = "=";
      }
      else {
        uint64_t v34 = *(const char **)(a5 + 40 * (v76 - 1));
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 1, v75, v34);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_43:
      uint64_t v35 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v35), "llword"))
      {
        if (v21 == ++v35) {
          goto LABEL_51;
        }
      }
      unsigned __int16 v77 = v35;
      if (v76 - 2 >= a6) {
        uint64_t v36 = "=";
      }
      else {
        uint64_t v36 = *(const char **)(a5 + 40 * (v76 - 2));
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 2, v75, v36);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_51:
      uint64_t v37 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v37), "rword"))
      {
        if (v21 == ++v37) {
          goto LABEL_59;
        }
      }
      unsigned __int16 v77 = v37;
      if (v76 + 1 >= a6) {
        uint64_t v38 = "=";
      }
      else {
        uint64_t v38 = *(const char **)(a5 + 40 * (v76 + 1));
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 3, v75, v38);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_59:
      uint64_t v39 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v39), "rrword"))
      {
        if (v21 == ++v39) {
          goto LABEL_67;
        }
      }
      unsigned __int16 v77 = v39;
      if (v76 + 2 >= a6) {
        uint64_t v40 = "=";
      }
      else {
        uint64_t v40 = *(const char **)(a5 + 40 * (v76 + 2));
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 4, v75, v40);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_67:
      uint64_t v41 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v41), "wordlen"))
      {
        if (v21 == ++v41) {
          goto LABEL_72;
        }
      }
      unsigned __int16 v77 = v41;
      feat_wordlength_0(a5, a6, v76, 0, v19);
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 5, v75, v19);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_72:
      uint64_t v42 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v42), "lwordlen"))
      {
        if (v21 == ++v42) {
          goto LABEL_77;
        }
      }
      unsigned __int16 v77 = v42;
      feat_wordlength_0(a5, a6, v76, -1, v19);
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 6, v75, v19);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_77:
      uint64_t v43 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v43), "rwordlen"))
      {
        if (v21 == ++v43) {
          goto LABEL_82;
        }
      }
      unsigned __int16 v77 = v43;
      feat_wordlength_0(a5, a6, v76, 1, v19);
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 7, v75, v19);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_82:
      uint64_t v44 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v44), "pos"))
      {
        if (v21 == ++v44) {
          goto LABEL_105;
        }
      }
      unsigned __int16 v77 = v44;
      if (v76 >= a6) {
        unsigned int v45 = "=";
      }
      else {
        unsigned int v45 = *(const char **)(a5 + 40 * v76 + 8);
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 8, v75, v45);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_105:
      uint64_t v50 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v50), "lpos"))
      {
        if (v21 == ++v50) {
          goto LABEL_121;
        }
      }
      unsigned __int16 v77 = v50;
      if (v76 - 1 >= a6) {
        uint64_t v51 = "=";
      }
      else {
        uint64_t v51 = *(const char **)(a5 + 40 * (v76 - 1) + 8);
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 9, v75, v51);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_121:
      uint64_t v54 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v54), "llpos"))
      {
        if (v21 == ++v54) {
          goto LABEL_137;
        }
      }
      unsigned __int16 v77 = v54;
      if (v76 - 2 >= a6) {
        uint64_t v55 = "=";
      }
      else {
        uint64_t v55 = *(const char **)(a5 + 40 * (v76 - 2) + 8);
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 10, v75, v55);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_137:
      uint64_t v58 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v58), "rpos"))
      {
        if (v21 == ++v58) {
          goto LABEL_145;
        }
      }
      unsigned __int16 v77 = v58;
      if (v76 + 1 >= a6) {
        uint64_t v59 = "=";
      }
      else {
        uint64_t v59 = *(const char **)(a5 + 40 * (v76 + 1) + 8);
      }
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 11, v75, v59);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
LABEL_145:
      uint64_t v60 = 0;
      while (cstdlib_strcmp(*(const char **)(a3 + 8 * v60), "rrpos"))
      {
        if (v21 == ++v60)
        {
          a2 = v75;
          a7 = v76;
          goto LABEL_9;
        }
      }
      unsigned __int16 v77 = v60;
      a7 = v76;
      if (v76 + 2 >= a6) {
        unsigned __int16 v61 = "=";
      }
      else {
        unsigned __int16 v61 = *(const char **)(a5 + 40 * (v76 + 2) + 8);
      }
      a2 = v75;
      uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 12, v75, v61);
      if ((v22 & 0x80000000) != 0) {
        goto LABEL_182;
      }
    }
LABEL_9:
    if (!hlp_igtree_isFeatureRequired_0(a3, a4, 13, &v77)
      || (int v23 = feat_char(a5, a7, 0, v19),
          uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 13, a2, v23),
          (v22 & 0x80000000) == 0))
    {
      if (!hlp_igtree_isFeatureRequired_0(a3, a4, 15, &v77)
        || (int v24 = feat_char(a5, a7, 1, v19),
            uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 15, a2, v24),
            (v22 & 0x80000000) == 0))
      {
        if (!hlp_igtree_isFeatureRequired_0(a3, a4, 14, &v77)
          || (int v25 = feat_char(a5, a7, -1, v19),
              uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 14, a2, v25),
              (v22 & 0x80000000) == 0))
        {
          if (!hlp_igtree_isFeatureRequired_0(a3, a4, 16, &v77)
            || (unsigned int v26 = feat_char(a5, a7, -2, v19),
                uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 16, a2, v26),
                (v22 & 0x80000000) == 0))
          {
            if (!hlp_igtree_isFeatureRequired_0(a3, a4, 17, &v77)
              || (uint64_t v27 = feat_matchprevpos_0(a5, a7, "n"),
                  uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 17, a2, v27),
                  (v22 & 0x80000000) == 0))
            {
              if (!hlp_igtree_isFeatureRequired_0(a3, a4, 18, &v77)
                || (uint64_t v28 = feat_matchprevpos_0(a5, a7, "v"),
                    uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 18, a2, v28),
                    (v22 & 0x80000000) == 0))
              {
                if (!hlp_igtree_isFeatureRequired_0(a3, a4, 19, &v77)) {
                  goto LABEL_186;
                }
                unsigned __int16 v29 = a7;
                while (a6 > ++v29)
                {
                  if (!cstdlib_strncmp(*(const char **)(a5 + 40 * v29 + 8), "n", 1uLL))
                  {
                    unsigned int v30 = *(const char **)(a5 + 40 * v29);
                    goto LABEL_89;
                  }
                }
                unsigned int v30 = "=";
LABEL_89:
                a2 = v75;
                uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 19, v75, v30);
                a7 = v76;
                if ((v22 & 0x80000000) == 0)
                {
LABEL_186:
                  if (!hlp_igtree_isFeatureRequired_0(a3, a4, 19, &v77)) {
                    goto LABEL_187;
                  }
                  unsigned __int16 v46 = a7;
                  while (a6 > ++v46)
                  {
                    if (!cstdlib_strncmp(*(const char **)(a5 + 40 * v46 + 8), "v", 1uLL))
                    {
                      uint64_t v47 = *(const char **)(a5 + 40 * v46);
                      goto LABEL_96;
                    }
                  }
                  uint64_t v47 = "=";
LABEL_96:
                  a2 = v75;
                  uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 20, v75, v47);
                  a7 = v76;
                  if ((v22 & 0x80000000) == 0)
                  {
LABEL_187:
                    if (!hlp_igtree_isFeatureRequired_0(a3, a4, 21, &v77)
                      || (a7 >= a6
                        ? (uint64_t v49 = "=")
                        : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * a7 + 26) > 5u) ? (char v48 = 48) : (char v48 = 49),
                           *uint64_t v19 = v48,
                           uint64_t v49 = v19),
                          uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 21, a2, v49),
                          (v22 & 0x80000000) == 0))
                    {
                      if (!hlp_igtree_isFeatureRequired_0(a3, a4, 22, &v77)
                        || (a7 >= a6
                          ? (uint64_t v53 = "=")
                          : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * a7 + 26) < 2u) ? (char v52 = 48) : (char v52 = 49),
                             *uint64_t v19 = v52,
                             uint64_t v53 = v19),
                            uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 22, a2, v53),
                            (v22 & 0x80000000) == 0))
                      {
                        if (!hlp_igtree_isFeatureRequired_0(a3, a4, 23, &v77)
                          || (a7 - 1 >= a6
                            ? (uint64_t v57 = "=")
                            : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 - 1) + 26) > 5u)
                             ? (char v56 = 48)
                             : (char v56 = 49),
                               *uint64_t v19 = v56,
                               uint64_t v57 = v19),
                              uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 23, a2, v57),
                              (v22 & 0x80000000) == 0))
                        {
                          if (!hlp_igtree_isFeatureRequired_0(a3, a4, 24, &v77)
                            || (a7 - 1 >= a6
                              ? (uint64_t v63 = "=")
                              : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 - 1) + 26) < 2u)
                               ? (char v62 = 48)
                               : (char v62 = 49),
                                 *uint64_t v19 = v62,
                                 uint64_t v63 = v19),
                                uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 24, a2, v63),
                                (v22 & 0x80000000) == 0))
                          {
                            if (!hlp_igtree_isFeatureRequired_0(a3, a4, 25, &v77)
                              || (a7 + 1 >= a6
                                ? (size_t v65 = "=")
                                : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 + 1) + 26) > 5u)
                                 ? (char v64 = 48)
                                 : (char v64 = 49),
                                   *uint64_t v19 = v64,
                                   size_t v65 = v19),
                                  uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 25, a2, v65),
                                  (v22 & 0x80000000) == 0))
                            {
                              if (!hlp_igtree_isFeatureRequired_0(a3, a4, 26, &v77)
                                || (a7 + 1 >= a6
                                  ? (uint64_t v70 = "=")
                                  : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (a7 + 1) + 26) < 2u)
                                   ? (char v69 = 48)
                                   : (char v69 = 49),
                                     *uint64_t v19 = v69,
                                     uint64_t v70 = v19),
                                    uint64_t v22 = hlp_igtree_setFeature_0(a1, a3, a4, 26, a2, v70),
                                    (v22 & 0x80000000) == 0))
                              {
                                int v71 = 0;
                                unsigned int v72 = v77;
                                do
                                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"igtree feature %s", v66, v67, v68, *(void *)(a2 + 8 * (unsigned __int16)v71++));
                                while (v72 >= (unsigned __int16)v71);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_182:
    heap_Free(*(void **)(a1 + 8), (uint64_t)v19);
    return v22;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v15, v16, v17, v18, v74);
  return 2584748042;
}

uint64_t hlp_igtree_isFeatureRequired_0(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  uint64_t v8 = g_featureNames_4[a3];
  while (cstdlib_strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

uint64_t hlp_igtree_setFeature_0(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  unsigned __int16 v20 = -1;
  uint64_t result = hlp_igtree_isFeatureRequired_0(a2, a3, a4, &v20);
  if (result)
  {
    if (cstdlib_strcmp(a6, ""))
    {
      size_t v10 = cstdlib_strlen(a6);
      uint64_t v11 = v20;
      if (v10 <= 0x40)
      {
        uint64_t v13 = *(char **)(a5 + 8 * v20);
      }
      else
      {
        int v12 = cstdlib_strlen(a6);
        uint64_t v13 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a5 + 8 * v11), (v12 + 1));
        if (!v13)
        {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v14, v15, v16, v17, v19);
          return 2584748042;
        }
        *(void *)(a5 + 8 * v11) = v13;
      }
      uint64_t v18 = a6;
    }
    else
    {
      uint64_t v13 = *(char **)(a5 + 8 * v20);
      uint64_t v18 = "=";
    }
    cstdlib_strcpy(v13, v18);
    return 0;
  }
  return result;
}

char *feat_wordlength_0(uint64_t a1, unsigned int a2, int a3, int a4, char *a5)
{
  *a5 = 0;
  if (a4 + a3 < a2) {
    return (char *)sprintf(a5, "%d", *(unsigned __int16 *)(a1 + 40 * (a4 + a3) + 26));
  }

  return cstdlib_strcpy(a5, "=");
}

uint64_t pw_dag_process(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, unsigned int *a10, unsigned int a11, uint64_t *a12, _WORD *a13)
{
  uint64_t v17 = a1;
  uint64_t v18 = heap_Alloc(*(void *)(a1 + 8), 24);
  if (!v18) {
    goto LABEL_74;
  }
  uint64_t v23 = v18;
  *(_WORD *)(v18 + 8) = a9 + 1;
  int v24 = a6 - 1;
  if (a6 - 1 <= 1) {
    int v24 = 1;
  }
  *(_DWORD *)(v18 + 12) = a5;
  *(_DWORD *)(v18 + 16) = v24;
  uint64_t v25 = heap_Alloc(*(void *)(v17 + 8), 16 * (unsigned __int16)(a9 + 1));
  *(void *)uint64_t v23 = v25;
  unsigned int v30 = (__int16 *)v23;
  if (!v25)
  {
    uint64_t v96 = 2584748042;
    log_OutPublic(*(void *)(v17 + 32), (uint64_t)"FE_PW", 37000, 0, v26, v27, v28, v29, v159);
    uint64_t v97 = *(void **)(v17 + 8);
    uint64_t v98 = v23;
    goto LABEL_76;
  }
  uint64_t v31 = *(unsigned __int16 *)(v23 + 8);
  if (*(_WORD *)(v23 + 8))
  {
    uint64_t v32 = (_WORD *)(v25 + 12);
    do
    {
      *(void *)(v32 - 6) = 0;
      *((_DWORD *)v32 - 1) = -2147483647;
      *uint64_t v32 = -1;
      v32 += 8;
      --v31;
    }
    while (v31);
  }
  unsigned __int16 v174 = (char *)heap_Alloc(*(void *)(v17 + 8), a4 + 11);
  if (!v174)
  {
LABEL_74:
    uint64_t v96 = 2584748042;
    log_OutPublic(*(void *)(v17 + 32), (uint64_t)"FE_PW", 37000, 0, v19, v20, v21, v22, v159);
    return v96;
  }
  if (!a9)
  {
    heap_Free(*(void **)(v17 + 8), (uint64_t)v174);
LABEL_78:
    if (!*(void *)v30) {
      return 2584748039;
    }
    int v99 = v30[4];
    uint64_t v100 = (unsigned __int16)v30[4];
    *(_DWORD *)(*(void *)v30 + 8) = 0;
    log_OutText(*(void *)(v17 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"[DAG]: All possible path, <vertex_from: vertex_to>: weight, accumulated weight", v93, v94, v95, v159);
    if (v99 >= 1)
    {
      uint64_t v104 = 0;
      uint64_t v105 = *(void *)v30;
      do
      {
        for (uint64_t i = *(uint64_t **)(v105 + 16 * v104); i; uint64_t i = (uint64_t *)*i)
        {
          uint64_t v107 = *((unsigned int *)i + 3);
          int v108 = *((_DWORD *)i + 4) + *(_DWORD *)(v105 + 16 * v104 + 8);
          log_OutText(*(void *)(v17 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"<%d: %d>: %d, %d", v101, v102, v103, v104);
          uint64_t v105 = *(void *)v30;
          uint64_t v109 = *(void *)v30 + 16 * v107;
          if (v108 > *(_DWORD *)(v109 + 8))
          {
            *(_DWORD *)(v109 + 8) = v108;
            *(_WORD *)(v109 + 12) = v104;
          }
        }
        ++v104;
      }
      while (v104 != v100);
    }
    uint64_t v110 = heap_Alloc(*(void *)(v17 + 8), 16);
    if (!v110) {
      goto LABEL_118;
    }
    uint64_t v115 = v110;
    uint64_t v116 = (_WORD *)heap_Alloc(*(void *)(v17 + 8), 2 * v100);
    *(void *)uint64_t v115 = v116;
    if (!v116)
    {
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"FE_PW", 37000, 0, v117, v118, v119, v120, v160);
      if (*(void *)v115)
      {
        heap_Free(*(void **)(v17 + 8), *(void *)v115);
        *(void *)uint64_t v115 = 0;
      }
      heap_Free(*(void **)(v17 + 8), v115);
      return 2584748042;
    }
    *(_WORD *)(v115 + 8) = 0;
    int v121 = (__int16)(v100 - 1);
    *uint64_t v116 = v100 - 1;
    unsigned int v122 = *(unsigned __int16 *)(v115 + 8);
    unsigned __int16 v123 = v122 + 1;
    *(_WORD *)(v115 + 8) = v122 + 1;
    if (v121 >= 1)
    {
      uint64_t v124 = *(void *)v30;
      do
      {
        int v121 = *(__int16 *)(v124 + 16 * (unsigned __int16)v121 + 12);
        v116[v123] = v121;
        unsigned int v122 = *(unsigned __int16 *)(v115 + 8);
        unsigned __int16 v123 = v122 + 1;
        *(_WORD *)(v115 + 8) = v122 + 1;
      }
      while (v121 > 0);
    }
    *a13 = v122;
    uint64_t v125 = heap_Calloc(*(void **)(v17 + 8), v122, 16);
    *a12 = v125;
    if (!v125)
    {
LABEL_118:
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"FE_PW", 37000, 0, v111, v112, v113, v114, v160);
      return 2584748042;
    }
    uint64_t v162 = (uint64_t)v30;
    unsigned int v126 = (unsigned __int16)*a13;
    if (!*a13)
    {
LABEL_108:
      heap_Free(*(void **)(v17 + 8), *(void *)v115);
      heap_Free(*(void **)(v17 + 8), v115);
      uint64_t v153 = *(void *)v162;
      if (*(void *)v162)
      {
        uint64_t v154 = *(unsigned __int16 *)(v162 + 8);
        if (*(_WORD *)(v162 + 8))
        {
          uint64_t v155 = 0;
          do
          {
            unsigned __int16 v156 = *(void **)(*(void *)v162 + 16 * v155);
            if (v156)
            {
              do
              {
                int v157 = (void *)*v156;
                heap_Free(*(void **)(v17 + 8), (uint64_t)v156);
                unsigned __int16 v156 = v157;
              }
              while (v157);
            }
            ++v155;
          }
          while (v155 != v154);
          uint64_t v153 = *(void *)v162;
        }
      }
      heap_Free(*(void **)(v17 + 8), v153);
      heap_Free(*(void **)(v17 + 8), v162);
      return 0;
    }
    uint64_t v127 = v125;
    unsigned int v128 = 0;
    while (1)
    {
      uint64_t v129 = (unsigned __int16 *)(*(void *)v115 + 2 * (int)(v126 - v128));
      int v130 = *(v129 - 1);
      int v131 = *v129;
      LOWORD(v132) = v130 - v131;
      uint64_t v133 = heap_Alloc(*(void *)(v17 + 8), 2 * (unsigned __int16)(v130 - v131));
      if (!v133)
      {
        log_OutPublic(*(void *)(v17 + 32), (uint64_t)"FE_PW", 37000, 0, v134, v135, v136, v137, v160);
        if (*a12)
        {
          heap_Free(*(void **)(v17 + 8), *a12);
          *a12 = 0;
        }
        return 2584748042;
      }
      uint64_t v138 = v133;
      *(_WORD *)(v127 + 8) = v132;
      *(void *)uint64_t v127 = v133;
      log_OutText(*(void *)(v17 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Orthography is: ", v135, v136, v137, v160);
      if (v130 == v131)
      {
        uint64_t v145 = (const char *)heap_Calloc(*(void **)(v17 + 8), 1, 1000);
        if (!v145) {
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t v146 = 0;
        int v173 = (unsigned __int16)v132;
        if ((unsigned __int16)v132 <= 1u) {
          uint64_t v132 = 1;
        }
        else {
          uint64_t v132 = (unsigned __int16)v132;
        }
        uint64_t v147 = v17;
        do
        {
          uint64_t v148 = a8 + 40 * (v146 + *(unsigned __int16 *)(*(void *)v115 + 2 * (int)((unsigned __int16)*a13 - v128)));
          __int16 v149 = *(_WORD *)(v148 + 24);
          log_OutText(*(void *)(v147 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"    %s [tid: %d, pos: %s]    ", v139, v140, v141, *(void *)v148);
          *(_WORD *)(v138 + 2 * v146++) = v149;
        }
        while (v132 != v146);
        uint64_t v150 = heap_Calloc(*(void **)(v147 + 8), 1, 1000);
        uint64_t v17 = v147;
        if (!v150) {
          goto LABEL_107;
        }
        uint64_t v145 = (const char *)v150;
        __int16 v151 = 0;
        int v152 = 0;
        do
        {
          sprintf((char *)&v145[v151], "%d-", *(unsigned __int16 *)(*(void *)v127 + 2 * (__int16)v152));
          __int16 v151 = cstdlib_strlen(v145);
          ++v152;
        }
        while (v173 > (__int16)v152);
      }
      log_OutText(*(void *)(v17 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"PW [tids:%s, ntok:%d]", v142, v143, v144, (uint64_t)v145);
      heap_Free(*(void **)(v17 + 8), (uint64_t)v145);
LABEL_107:
      v127 += 16;
      ++v128;
      unsigned int v126 = (unsigned __int16)*a13;
      if (v128 >= v126) {
        goto LABEL_108;
      }
    }
  }
  uint64_t v161 = v23;
  uint64_t v163 = v17;
  int v33 = 0;
  __int16 v34 = 0;
  while (1)
  {
    int v171 = v34;
    int v169 = (const char **)(a8 + 40 * v34);
    if (cstdlib_strlen(*v169) > 5 || !cstdlib_strcmp(*(const char **)(a8 + 40 * v171 + 16), "latin")) {
      goto LABEL_69;
    }
    unsigned int v35 = *(_DWORD *)(a7 + 1024);
    if (v35)
    {
      unsigned __int16 v36 = 0;
      uint64_t v37 = a8 + 40 * v171;
      unsigned int v38 = *(_DWORD *)(v37 + 28);
      uint64_t v39 = (_DWORD *)(v37 + 32);
      while (*(_DWORD *)(a7 + 4 * v36) > v38 || *v39 > *(_DWORD *)(a7 + 4 * v36 + 512))
      {
        if (v35 <= ++v36) {
          goto LABEL_18;
        }
      }
      goto LABEL_69;
    }
LABEL_18:
    unint64_t rules = pw_get_rules(a2, a3, (uint64_t)*v169);
    if (!rules)
    {
      log_OutText(*(void *)(v163 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"Warning: Can't find rules for the character %s", v41, v42, v43, (uint64_t)*v169);
      goto LABEL_69;
    }
    int v172 = *(unsigned __int16 *)(rules + 8);
    if (*(_WORD *)(rules + 8)) {
      break;
    }
LABEL_69:
    __int16 v34 = v171 + 1;
    int v33 = (__int16)(v171 + 1);
    if (v33 >= a9)
    {
      uint64_t v17 = v163;
      heap_Free(*(void **)(v163 + 8), (uint64_t)v174);
      unsigned __int16 v91 = 0;
      unsigned int v30 = (__int16 *)v161;
      while (1)
      {
        uint64_t inserted = dag_insert_edge(v163, (uint64_t *)v161, v91, v91 + 1, *(unsigned int *)(v161 + 16));
        if ((inserted & 0x80000000) != 0) {
          return inserted;
        }
        if (a9 <= (__int16)++v91) {
          goto LABEL_78;
        }
      }
    }
  }
  __int16 v44 = 0;
  uint64_t v45 = *(void *)(rules + 16);
  int v165 = v33 + 1;
  uint64_t v170 = v45;
  while (1)
  {
    int v46 = v44;
    uint64_t v47 = v45 + 40 * v44;
    *unsigned __int16 v174 = 0;
    uint64_t v49 = (unsigned __int16 *)(v47 + 36);
    int v48 = *(unsigned __int16 *)(v47 + 36);
    if (v33 >= v48)
    {
      uint64_t v50 = v45 + 40 * v46;
      int v52 = *(unsigned __int16 *)(v50 + 38);
      uint64_t v51 = (unsigned __int16 *)(v50 + 38);
      if (a9 - v33 > v52)
      {
        if (*(_WORD *)(v47 + 36))
        {
          int v53 = 0;
          int v54 = 0;
          uint64_t v55 = a8;
          while (1)
          {
            int v56 = v53 + v33;
            uint64_t v45 = v170;
            if (!cstdlib_strcmp(*(const char **)(v55 + 40 * (v53 + v33 - v48) + 16), "latin")) {
              goto LABEL_35;
            }
            int v57 = v56 - *v49;
            unsigned int v58 = *(_DWORD *)(a7 + 1024);
            if (v58)
            {
              unsigned __int16 v59 = 0;
              uint64_t v60 = a8 + 40 * v57;
              unsigned int v61 = *(_DWORD *)(v60 + 28);
              char v62 = (_DWORD *)(v60 + 32);
              while (*(_DWORD *)(a7 + 4 * v59) > v61 || *v62 > *(_DWORD *)(a7 + 4 * v59 + 512))
              {
                if (v58 <= ++v59) {
                  goto LABEL_31;
                }
              }
              goto LABEL_35;
            }
LABEL_31:
            uint64_t v55 = a8;
            cstdlib_strcat(v174, *(const char **)(a8 + 40 * v57 + 8));
            cstdlib_strcat(v174, "-");
            int v53 = (__int16)++v54;
            int v48 = *v49;
            if ((__int16)v54 >= v48)
            {
              uint64_t v45 = v170;
              goto LABEL_34;
            }
          }
        }
        uint64_t v55 = a8;
LABEL_34:
        unsigned int v168 = *(unsigned __int16 *)(v55 + 40 * (v33 - v48) + 28);
        size_t v63 = cstdlib_strlen(v174);
        if (!cstdlib_strncmp(v174, (const char *)v47, v63))
        {
          cstdlib_strcat(v174, *v169);
          if (*v51)
          {
            int v64 = 0;
            int v65 = 0;
            uint64_t v66 = a8;
            uint64_t v164 = v51;
            while (1)
            {
              int v67 = v165 + v64;
              uint64_t v45 = v170;
              if (!cstdlib_strcmp(*(const char **)(v66 + 40 * (v165 + v64) + 16), "latin")) {
                goto LABEL_35;
              }
              unsigned int v68 = *(_DWORD *)(a7 + 1024);
              if (v68)
              {
                unsigned __int16 v69 = 0;
                uint64_t v70 = a8 + 40 * v67;
                unsigned int v71 = *(_DWORD *)(v70 + 28);
                unsigned int v72 = (_DWORD *)(v70 + 32);
                while (*(_DWORD *)(a7 + 4 * v69) > v71 || *v72 > *(_DWORD *)(a7 + 4 * v69 + 512))
                {
                  if (v68 <= ++v69) {
                    goto LABEL_45;
                  }
                }
                goto LABEL_35;
              }
LABEL_45:
              cstdlib_strcat(v174, "-");
              uint64_t v66 = a8;
              uint64_t v51 = v164;
              cstdlib_strcat(v174, *(const char **)(a8 + 40 * v67 + 8));
              int v64 = (__int16)++v65;
              int v73 = *v164;
              if ((__int16)v65 >= v73)
              {
                uint64_t v45 = v170;
                goto LABEL_48;
              }
            }
          }
          int v73 = 0;
          uint64_t v66 = a8;
LABEL_48:
          unsigned int v74 = *(unsigned __int16 *)(v66 + 40 * (v33 + v73) + 32);
          if (!cstdlib_strcmp(v174, (const char *)v47))
          {
            uint64_t v75 = a10;
            uint64_t v76 = a11;
            if (a11)
            {
              do
              {
                unsigned int v78 = *v75++;
                unsigned int v77 = v78;
                if (v78 > v168 && v77 < v74) {
                  goto LABEL_35;
                }
              }
              while (--v76);
            }
            int v80 = *v49;
            __int16 v81 = v171 - v80;
            int v82 = (__int16)*v51;
            if (v33 + v82 >= (__int16)(v171 - v80))
            {
              unsigned __int16 v84 = 0;
              unsigned __int16 v83 = 0;
              do
              {
                unsigned int v85 = *(unsigned __int16 *)(a8 + 40 * v81 + 26);
                v83 += v85;
                if (v85 > 1) {
                  ++v84;
                }
                ++v81;
              }
              while (v33 + v82 >= v81);
            }
            else
            {
              unsigned __int16 v83 = 0;
              unsigned __int16 v84 = 0;
            }
            if (v84 <= 1u && v83 <= 5u) {
              break;
            }
          }
        }
      }
    }
LABEL_35:
    __int16 v44 = v46 + 1;
    if (v172 <= (__int16)(v46 + 1)) {
      goto LABEL_69;
    }
  }
  uint64_t v87 = dag_insert_edge(v163, (uint64_t *)v161, (unsigned __int16)v171 - v80, (unsigned __int16)v171 + 1 + *v51, *(unsigned int *)(v45 + 40 * v46 + 32));
  if ((v87 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v163 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"%s Matches rule %s with weight %d, and insert edges between point %d and %d", v88, v89, v90, (uint64_t)*v169);
    goto LABEL_35;
  }
  uint64_t v96 = v87;
  uint64_t v97 = *(void **)(v163 + 8);
  uint64_t v98 = (uint64_t)v174;
LABEL_76:
  heap_Free(v97, v98);
  return v96;
}

uint64_t pw_weather_word_in_prompt(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  unsigned int v3 = *(_DWORD *)(a1 + 1024);
  if (v3)
  {
    unsigned __int16 v4 = 0;
    while (*(_DWORD *)(a1 + 4 * v4) > *(_DWORD *)(a2 + 28) || *(_DWORD *)(a2 + 32) > *(_DWORD *)(a1 + 4 * v4 + 512))
    {
      if (v3 <= ++v4) {
        return 0;
      }
    }
    *a3 = 1;
  }
  return 0;
}

uint64_t dag_insert_edge(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v10 = heap_Alloc(*(void *)(a1 + 8), 24);
  if (v10)
  {
    uint64_t v15 = v10;
    *(_DWORD *)(v10 + 8) = a3;
    *(_DWORD *)(v10 + 12) = a4;
    int v16 = uint32_log2(a5);
    int v17 = uint32_log2(*((unsigned int *)a2 + 3));
    uint64_t result = 0;
    *(_DWORD *)(v15 + 16) = v16 - v17;
    uint64_t v19 = *a2;
    uint64_t v20 = 16 * a3;
    *(void *)uint64_t v15 = *(void *)(*a2 + v20);
    *(void *)(v19 + v20) = v15;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v11, v12, v13, v14, v21);
    return 2584748042;
  }
  return result;
}

uint64_t BSCompareUtf8ChineseChar(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4 = utf8_determineUTF8CharLength(*a1);
  unsigned __int8 v5 = utf8_determineUTF8CharLength(*a2);
  if (v4 != v5) {
    return v4 - v5;
  }
  if (!v4) {
    return 0;
  }
  int v6 = 0;
  while (1)
  {
    int v7 = a1[v6];
    int v8 = a2[v6];
    uint64_t result = (v7 - v8);
    if (v7 != v8) {
      break;
    }
    if (++v6 >= v4) {
      return 0;
    }
  }
  return result;
}

unint64_t pw_get_rules(unint64_t a1, unsigned int a2, uint64_t a3)
{
  return ssft_bsearch(a3, a1, a2, 32, (uint64_t (*)(uint64_t, unint64_t))BSCompareUtf8ChineseChar);
}

uint64_t GetRulesFromRiffData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, unsigned int *a6, unsigned __int16 *a7, _DWORD *a8, unsigned int *a9, uint64_t *a10, unsigned __int8 *a11)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  memset(v125, 0, 32);
  memset(v124, 0, sizeof(v124));
  unsigned int v106 = 0;
  memset(v123, 0, sizeof(v123));
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v108 = 0u;
  *a7 = 0;
  *a8 = 0;
  *a9 = 10000;
  *a11 = 0;
  ssftriff_reader_ReadStringZ(a2, a3, a4, 0, 0, &v106);
  uint64_t v105 = a2;
  ssftriff_reader_ReadStringZ(a2, a3, a4, 0, __s1, &v106);
  unsigned int v19 = v106;
  uint64_t v20 = cstdlib_strstr(__s1, "\t");
  if (!v20) {
    return 0;
  }
  uint64_t v104 = a3;
  unsigned int v21 = (unsigned __int8 *)(v20 + 1);
  uint64_t v22 = cstdlib_strstr(v20 + 1, "\t");
  if (!v22) {
    return 0;
  }
  uint64_t v23 = v22;
  unsigned int v103 = a4;
  *uint64_t v22 = 0;
  unsigned __int8 v24 = cstdlib_atoi(v21);
  *a11 = v24;
  uint64_t v25 = heap_Calloc(*(void **)(a1 + 8), v24, 8);
  *a10 = v25;
  if (!v25)
  {
    uint64_t v84 = 2584748042;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v26, v27, v28, v29, v92);
    return v84;
  }
  uint64_t v30 = v25;
  uint64_t v96 = a5;
  uint64_t v97 = a7;
  uint64_t v95 = a8;
  uint64_t v102 = a6;
  if (!*a11)
  {
LABEL_8:
    ssftriff_reader_ReadStringZ(v105, v104, v103, v19, 0, &v106);
    ssftriff_reader_ReadStringZ(v105, v104, v103, v19, v125, &v106);
    unsigned int v42 = v106 + v19;
    unsigned int v106 = 0;
    ssftriff_reader_ReadStringZ(v105, v104, v103, v42, 0, &v106);
    ssftriff_reader_ReadStringZ(v105, v104, v103, v42, v124, &v106);
    unsigned int v43 = v106;
    unsigned int v44 = cstdlib_atoi(v124);
    uint64_t v45 = a6;
    *a6 = v44;
    uint64_t v46 = heap_Calloc(*(void **)(a1 + 8), v44, 32);
    if (!v46) {
      goto LABEL_45;
    }
    uint64_t v99 = v46;
    if (!*a6) {
      goto LABEL_42;
    }
    unint64_t v47 = 0;
    unsigned int v48 = v43 + v42;
LABEL_11:
    unint64_t v98 = v47;
    unsigned int v106 = 0;
    ssftriff_reader_ReadStringZ(v105, v104, v103, v48, 0, &v106);
    ssftriff_reader_ReadStringZ(v105, v104, v103, v48, v123, &v106);
    unsigned int v49 = v106;
    unsigned __int16 v50 = cstdlib_atoi(v123);
    unint64_t v51 = v99 + 32 * v47;
    *(_WORD *)(v51 + 8) = v50;
    int v52 = (_WORD *)(v51 + 8);
    uint64_t v53 = heap_Calloc(*(void **)(a1 + 8), v50, 40);
    *(void *)(v51 + 16) = v53;
    uint64_t v101 = (uint64_t *)(v51 + 16);
    if (!v53)
    {
      uint64_t v84 = 2584748042;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v54, v55, v56, v57, v92);
LABEL_47:
      unint64_t v85 = *v45;
      if (v85)
      {
        unint64_t v86 = 0;
        uint64_t v87 = (uint64_t *)(v99 + 16);
        do
        {
          if (*v87)
          {
            heap_Free(*(void **)(a1 + 8), *v87);
            *uint64_t v87 = 0;
            unint64_t v85 = *v45;
          }
          ++v86;
          v87 += 4;
        }
        while (v86 < v85);
      }
      heap_Free(*(void **)(a1 + 8), v99);
      goto LABEL_53;
    }
    unsigned int v58 = (_DWORD *)(v99 + 32 * v47);
    unsigned int v59 = v49 + v48;
    v58[6] = 0;
    uint64_t v60 = v58 + 6;
    char __dst = (unsigned __int8 *)v58;
    cstdlib_memset(v58, 0, 5uLL);
    if (!*v52) {
      goto LABEL_41;
    }
    unsigned int v61 = v60;
    uint64_t v62 = 0;
    uint64_t v94 = v61;
    uint64_t v93 = v61 + 1;
LABEL_14:
    unsigned int v106 = 0;
    ssftriff_reader_ReadStringZ(v105, v104, v103, v59, 0, &v106);
    ssftriff_reader_ReadStringZ(v105, v104, v103, v59, (unsigned char *)(*v101 + 40 * v62), &v106);
    unsigned __int16 v63 = 0;
    unsigned __int16 v64 = 0;
    v59 += v106;
    uint64_t v65 = *v101;
    *(void *)(*v101 + 40 * v62 + 32) = 0;
    while (1)
    {
      uint64_t v66 = (unsigned __int8 *)(v65 + 40 * v62 + v64);
      int v67 = *v66;
      if (v67 == 45) {
        break;
      }
      if (!*v66)
      {
        unsigned __int16 v64 = 0;
        goto LABEL_32;
      }
      if (v67 == 9)
      {
        int v76 = cstdlib_atoi(v66 + 1);
        uint64_t v77 = *v101 + 40 * v62;
        *(_DWORD *)(v77 + 32) = v76;
        *(unsigned char *)(v77 + v64) = 0;
        uint64_t v65 = *v101;
LABEL_32:
        uint64_t v78 = v65 + 40 * v62;
        *(_WORD *)(v78 + 38) = v63;
        unsigned int v79 = *(unsigned __int16 *)(v78 + 36);
        if ((unsigned __int16)*v94 < v79) {
          *uint64_t v94 = v79;
        }
        if (*v93 < v63) {
          *uint64_t v93 = v63;
        }
        if (*v97 < v64) {
          *uint64_t v97 = v64;
        }
        uint64_t v80 = v65 + 40 * v62;
        unsigned int v83 = *(_DWORD *)(v80 + 32);
        int v82 = (int *)(v80 + 32);
        unsigned int v81 = v83;
        uint64_t v45 = v102;
        if (*a9 > v83)
        {
          *a9 = v81;
          unsigned int v81 = *v82;
        }
        unint64_t v47 = v98;
        *v95 += v81;
        if (++v62 < (unint64_t)(unsigned __int16)*v52) {
          goto LABEL_14;
        }
LABEL_41:
        ++v47;
        unsigned int v48 = v59;
        if (v47 >= *v45)
        {
LABEL_42:
          uint64_t v84 = 0;
          *uint64_t v96 = v99;
          return v84;
        }
        goto LABEL_11;
      }
      if ((v67 & 0xFFFFFFDF) - 65 < 0x1A) {
        goto LABEL_26;
      }
      *(_WORD *)(v65 + 40 * v62 + 36) = v63;
      unsigned __int16 v68 = utf8_determineUTF8CharLength(*v66);
      __int16 v72 = v68;
      if (v62)
      {
        uint64_t v65 = *v101;
        if (v68)
        {
          unsigned int v73 = 0;
          unsigned __int8 v74 = 0;
          uint64_t v45 = v102;
          while (1)
          {
            uint64_t v75 = __dst[v74];
            if (v75 != *(unsigned __int8 *)(v65 + 40 * v62 + v73 + (unint64_t)v64)) {
              break;
            }
            unsigned int v73 = ++v74;
            if (v68 <= v74) {
              goto LABEL_28;
            }
          }
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PW", 5, 0, (uint64_t)"the Chinese Character %s in %d rule: %d is not same", v69, v70, v71, v75);
          uint64_t v84 = 2584748060;
          goto LABEL_47;
        }
      }
      else
      {
        cstdlib_memcpy(__dst, (const void *)(*v101 + v64), v68);
        uint64_t v65 = *v101;
      }
LABEL_28:
      unsigned __int16 v63 = 0;
LABEL_29:
      v64 += v72;
    }
    ++v63;
LABEL_26:
    __int16 v72 = 1;
    goto LABEL_29;
  }
  uint64_t v31 = 0;
  unsigned __int16 v32 = 0;
  int v33 = v23 + 1;
  while (1)
  {
    uint64_t v34 = heap_Calloc(*(void **)(a1 + 8), 8, 1);
    *(void *)(v30 + 8 * v31) = v34;
    if (!v34) {
      break;
    }
    unsigned __int16 v39 = v32;
    uint64_t v40 = &v33[v32];
    unsigned __int16 v41 = utf8_determineUTF8CharLength(*v40);
    cstdlib_memcpy(*(void **)(v30 + 8 * v31), v40, v41);
    *(unsigned char *)(v41 + *(void *)(v30 + 8 * v31) + 1) = 0;
    unsigned __int16 v32 = v39 + v41;
    if (++v31 >= (unint64_t)*a11) {
      goto LABEL_8;
    }
  }
LABEL_45:
  uint64_t v84 = 2584748042;
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PW", 37000, 0, v35, v36, v37, v38, v92);
LABEL_53:
  unsigned int v88 = *a11;
  if (*a11)
  {
    unint64_t v89 = 0;
    do
    {
      uint64_t v90 = *(void *)(v30 + 8 * v89);
      if (v90)
      {
        heap_Free(*(void **)(a1 + 8), v90);
        unsigned int v88 = *a11;
      }
      ++v89;
    }
    while (v89 < v88);
  }
  heap_Free(*(void **)(a1 + 8), v30);
  *a10 = 0;
  return v84;
}

uint64_t fe_wmp_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2587893761;
  }
  uint64_t result = 0;
  *a2 = &IFeWmp;
  return result;
}

uint64_t fe_wmp_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v5 = 2587893767;
  uint64_t v22 = 0;
  memset(v25, 0, sizeof(v25));
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v24);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v10 = heap_Calloc(*(void **)(v24 + 8), 1, 168);
      if (v10)
      {
        uint64_t v15 = v10;
        uint64_t Object = objc_GetObject(*(void *)(v24 + 48), (uint64_t)"LINGDB", &v23);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_10;
        }
        *(void *)(v15 + 24) = *(void *)(v23 + 8);
        uint64_t Object = objc_GetObject(*(void *)(v24 + 48), (uint64_t)"FE_DCTLKP", &v22);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_10;
        }
        uint64_t v17 = v22;
        *(void *)(v15 + 56) = *(void *)(v22 + 8);
        *(_OWORD *)(v15 + 64) = *(_OWORD *)(v17 + 16);
        uint64_t v18 = v24;
        *(void *)uint64_t v15 = v24;
        *(void *)(v15 + 8) = a3;
        *(void *)(v15 + 16) = a4;
        uint64_t Object = fe_wmp_CreateVoiceBrokerString(v18, v25);
        if ((Object & 0x80000000) != 0)
        {
LABEL_10:
          uint64_t v5 = Object;
        }
        else
        {
          uint64_t v5 = fe_wmp_tryLoadingWmpModel(*(_WORD **)(v15 + 8), *(void *)(v15 + 16), *(void *)v15, (char **)(v15 + 32));
          if ((v5 & 0x80000000) == 0)
          {
            int v19 = 62342;
LABEL_13:
            *(void *)a5 = v15;
            *(_DWORD *)(a5 + 8) = v19;
            return v5;
          }
        }
      }
      else
      {
        log_OutPublic(*(void *)(v24 + 32), (uint64_t)"FE_WMP", 37000, 0, v11, v12, v13, v14, v21);
        uint64_t v5 = 2587893770;
      }
      fe_wmp_ObjClose(*(uint64_t **)a5, *(void *)(a5 + 8));
      uint64_t v15 = 0;
      int v19 = 0;
      goto LABEL_13;
    }
    return inited;
  }
  return v5;
}

uint64_t fe_wmp_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 62342, 168);
  if ((v3 & 0x80000000) != 0) {
    return 2587893768;
  }
  uint64_t v4 = v3;
  if (a1)
  {
    if (a1[3]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
    }
    if (a1[7]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    }
    uint64_t v5 = a1[4];
    if (v5)
    {
      igtree_Deinit(*a1, v5);
      heap_Free(*(void **)(*a1 + 8), a1[4]);
      a1[4] = 0;
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  }
  return v4;
}

uint64_t fe_wmp_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2587893766;
  memset(v7, 0, sizeof(v7));
  if ((safeh_HandleCheck(a1, a2, 62342, 168) & 0x80000000) != 0) {
    return 2587893768;
  }
  if (a1)
  {
    uint64_t VoiceBrokerString = fe_wmp_CreateVoiceBrokerString(*(void *)a1, v7);
    if ((VoiceBrokerString & 0x80000000) == 0)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        igtree_Deinit(*(void *)a1, v5);
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(a1 + 32));
        *(void *)(a1 + 32) = 0;
      }
      return fe_wmp_tryLoadingWmpModel(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, (char **)(a1 + 32));
    }
    return VoiceBrokerString;
  }
  return v3;
}

uint64_t fe_wmp_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62342, 168);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2587893768;
  }
}

uint64_t fe_wmp_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v51 = 0;
  int v49 = 0;
  int v50 = 0;
  *(void *)unsigned int v48 = 0;
  int v47 = 0;
  uint64_t v46 = 0;
  int v45 = 0;
  uint64_t v43 = 0;
  __s1 = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *a5 = 1;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WMP", 5, 0, (uint64_t)"[FE_WORD_MAP]: Entering", a6, a7, a8, v41);
  if (((*(uint64_t (**)(void, void, const char *, const char *, char **))(*(void *)(a1 + 56) + 256))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fewmp_act_wmp", "no", &__s1) & 0x80000000) != 0)goto LABEL_3; {
  int v11 = cstdlib_strcmp(__s1, "yes");
  }
  *(_DWORD *)(a1 + 160) = v11 == 0;
  if (v11
    || ((*(uint64_t (**)(void, void, const char *, const char *, char **))(*(void *)(a1 + 56) + 256))(*(void *)(a1 + 64), *(void *)(a1 + 72), "fewmp_late_wmp", "no", &__s1) & 0x80000000) != 0)
  {
    goto LABEL_3;
  }
  *(_DWORD *)(a1 + 164) = cstdlib_strcmp(__s1, "yes") == 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", &v43);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 24) + 104))(a3, a4, 1, 0, (char *)&v50 + 2);
  if ((v29 & 0x80000000) != 0) {
    goto LABEL_3;
  }
  uint64_t v26 = v29;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(*(void *)(a1 + 24) + 184))(a3, a4, HIWORD(v50), 0, &v47) & 0x80000000) != 0)return v26; {
  if ((unsigned __int16)v47 != 1)
  }
    return v26;
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char **, char *))(*(void *)(a1 + 24) + 176))(a3, a4, HIWORD(v50), 0, &v51, (char *)&v49 + 2);
  if ((v26 & 0x80000000) != 0 || HIWORD(v49) < 2u || !cstdlib_strlen(v51)) {
    return v26;
  }
  uint64_t v30 = *(void *)(*(void *)a1 + 8);
  size_t v31 = cstdlib_strlen(v51);
  unsigned __int16 v32 = (char *)heap_Alloc(v30, v31 + 1);
  *(void *)(a1 + 40) = v32;
  if (!v32)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_WMP", 37000, 0, v33, v34, v35, v36, v42);
    return 2587893770;
  }
  cstdlib_strcpy(v32, v51);
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *, char *))(*(void *)(a1 + 24) + 176))(a3, a4, HIWORD(v50), 1, v48, (char *)&v47 + 2) & 0x80000000) != 0)goto LABEL_3; {
  uint64_t v37 = *(void *)a1;
  }
  *(void *)(a1 + 80) = *(void *)a1;
  if ((fe_wmp_getSent(a1, v37, a3, a4, HIWORD(v50), *(char **)(a1 + 40), *(uint64_t *)v48, HIWORD(v47), a1 + 88, (const char *)v43, (uint64_t *)&v46) & 0x80000000) != 0|| (fe_wmp_mapEachWord(a1, &v45) & 0x80000000) != 0|| !v45)
  {
    goto LABEL_3;
  }
  if (*(_DWORD *)(a1 + 164) != 1)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v50), &v50) & 0x80000000) != 0|| (fe_wmp_userTNBoundaryAdjust(a1, a3, a4, v46, (unsigned __int16)v50, SHIWORD(v49), v49) & 0x80000000) != 0)
    {
      goto LABEL_3;
    }
    fe_wmp_AdjustMarkers(a1, *(uint64_t *)v48, HIWORD(v47), (const char *)v43);
    goto LABEL_58;
  }
  uint64_t v12 = v46;
  if ((fe_wmp_userTNBoundaryAdjustLateWMP(a1, a3, a4, v46, HIWORD(v50)) & 0x80000000) != 0) {
    goto LABEL_4;
  }
  if ((fe_wmp_adjustWordRecords((void *)a1, a3, a4) & 0x80000000) == 0)
  {
    fe_wmp_AdjustMarkersLateWMP(a1, *(uint64_t *)v48, HIWORD(v47), (const char *)v43);
LABEL_58:
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, void, int *))(*(void *)(a1 + 24) + 160);
    uint64_t v39 = HIWORD(v50);
    __int16 v40 = cstdlib_strlen(*(const char **)(a1 + 40));
    v38(a3, a4, v39, 0, (unsigned __int16)(v40 + 1), *(void *)(a1 + 40), &v49);
  }
LABEL_3:
  uint64_t v12 = v46;
LABEL_4:
  if (v12) {
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v12);
  }
  uint64_t v13 = *(void *)(a1 + 96);
  if (v13)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v13);
    *(void *)(a1 + 96) = 0;
  }
  uint64_t v14 = *(void *)(a1 + 88);
  if (v14)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v14);
    *(void *)(a1 + 88) = 0;
  }
  uint64_t v15 = *(void *)(a1 + 104);
  if (v15)
  {
    unsigned int v16 = *(unsigned __int16 *)(a1 + 136);
    if (*(_WORD *)(a1 + 136))
    {
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(void *)(*(void *)(a1 + 104) + 8 * v17);
        if (v18)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v18);
          *(void *)(*(void *)(a1 + 104) + 8 * v17) = 0;
          unsigned int v16 = *(unsigned __int16 *)(a1 + 136);
        }
        ++v17;
      }
      while (v17 < v16);
      uint64_t v15 = *(void *)(a1 + 104);
    }
    heap_Free(*(void **)(*(void *)a1 + 8), v15);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v19 = *(void *)(a1 + 112);
  if (v19)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v19);
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v20 = *(void *)(a1 + 120);
  if (v20)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v20);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v21 = *(void *)(a1 + 128);
  if (v21)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v21);
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v22 = *(void *)(a1 + 144);
  if (v22)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v22);
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v23 = *(void *)(a1 + 40);
  if (v23)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v23);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v24 = *(void *)(a1 + 152);
  if (!v24) {
    return 0;
  }
  if (*(_WORD *)(a1 + 136))
  {
    unint64_t v25 = 0;
    do
    {
      heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*(void *)(a1 + 152) + 8 * v25));
      *(void *)(*(void *)(a1 + 152) + 8 * v25++) = 0;
    }
    while (v25 < *(unsigned __int16 *)(a1 + 136));
    uint64_t v24 = *(void *)(a1 + 152);
  }
  heap_Free(*(void **)(*(void *)a1 + 8), v24);
  uint64_t v26 = 0;
  *(void *)(a1 + 152) = 0;
  return v26;
}

uint64_t fe_wmp_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62342, 168);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2587893768;
  }
}

uint64_t fe_wmp_CreateVoiceBrokerString(uint64_t a1, unsigned char *a2)
{
  uint64_t v5 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v5);
  if ((result & 0x80000000) == 0) {
    return brokeraux_ComposeBrokerString(a1, "wordmap", 1, 1, v5, 0, 0, a2, 0x100uLL);
  }
  return result;
}

uint64_t fe_wmp_tryLoadingWmpModel(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(v29, 0, 240);
  *(void *)uint64_t v26 = 0;
  uint64_t v27 = 0;
  *a4 = 0;
  uint64_t v28 = 0;
  memset(__s1, 0, sizeof(__s1));
  v29[15] = 0u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", &v28);
  if ((Str & 0x80000000) != 0
    || (uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v27), (Str & 0x80000000) != 0)
    || (cstdlib_strcat((char *)__s1, "wordmap"),
        uint64_t Str = brokeraux_ComposeBrokerString(a3, (const char *)__s1, 1, 1, v28, 0, 0, v29, 0x100uLL),
        (Str & 0x80000000) != 0)
    || (uint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v29, "IGTR", 1031, (uint64_t *)v26),
        (Str & 0x80000000) != 0))
  {
    uint64_t v21 = Str;
  }
  else
  {
    unsigned int v16 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *a4 = v16;
    if (v16)
    {
      uint64_t v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        uint64_t v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_WMP", 37000, 0, v17, v18, v19, v20, v25);
      uint64_t v21 = 2587893770;
    }
  }
  if (*(void *)v26)
  {
    int v22 = ssftriff_reader_ObjClose(*(void **)v26, v9, v10, v11, v12, v13, v14, v15);
    if (v22 >= 0 || (int)v21 <= -1) {
      return v21;
    }
    else {
      return v22;
    }
  }
  return v21;
}

uint64_t fe_wmp_getSent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *__s, uint64_t a7, unsigned int a8, uint64_t a9, const char *a10, uint64_t *a11)
{
  int v64 = 0;
  int v65 = 0;
  *(void *)a9 = 0;
  uint64_t v18 = *(void *)(a2 + 8);
  size_t v19 = cstdlib_strlen(__s);
  uint64_t v20 = (char *)heap_Alloc(v18, v19 + 1);
  *(void *)(a9 + 8) = v20;
  if (!v20) {
    return 2587893770;
  }
  unsigned int v67 = 0;
  __int16 v66 = 0;
  unsigned __int16 v63 = 0;
  cstdlib_strcpy(v20, __s);
  if (*(_DWORD *)(a1 + 164) == 1)
  {
    unsigned int v71 = 0;
    __int16 v70 = 0;
    uint64_t v69 = 0;
    unsigned __int16 v68 = 0;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 24)
                                                                                            + 104))(a3, a4, 2, a5, &v68);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    __sa = __s;
    uint64_t v60 = a2;
    uint64_t v61 = a7;
    unsigned __int16 v22 = v68;
    if (v68)
    {
      int v23 = 0;
      LOWORD(v24) = 0;
      int v25 = 1;
      while (1)
      {
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v22, 0, 1, &v71, &v70);
        if ((v21 & 0x80000000) != 0) {
          return v21;
        }
        if (v71 <= 0x11 && ((1 << v71) & 0x20210) != 0)
        {
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v68, 1, 1, (char *)&v69 + 4, &v70);
          if ((v21 & 0x80000000) != 0) {
            return v21;
          }
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v68, 2, 1, &v69, &v70);
          if ((v21 & 0x80000000) != 0) {
            return v21;
          }
          if (v25 == 1 || v23 != HIDWORD(v69)) {
            LOWORD(v24) = v24 + 1;
          }
          int v23 = HIDWORD(v69);
          int v25 = 0;
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(a3, a4, v68, &v68);
        if ((v21 & 0x80000000) != 0) {
          return v21;
        }
        unsigned __int16 v22 = v68;
        if (!v68) {
          goto LABEL_39;
        }
      }
    }
    LOWORD(v24) = 0;
LABEL_39:
    unsigned int v58 = a5;
  }
  else
  {
    if (!a8) {
      return 2587893767;
    }
    __sa = __s;
    uint64_t v60 = a2;
    unsigned int v58 = a5;
    int v24 = 0;
    uint64_t v28 = a8;
    uint64_t v61 = a7;
    uint64_t v29 = (const char **)(a7 + 24);
    BOOL v30 = 1;
    do
    {
      int v31 = *((_DWORD *)v29 - 6);
      if (v31 == 36)
      {
        BOOL v30 = !cstdlib_strcmp(*v29, "normal") || !cstdlib_strcmp(*v29, a10);
      }
      else
      {
        if (v31 == 1) {
          int v32 = v24 + 1;
        }
        else {
          int v32 = v24;
        }
        if (v30) {
          int v24 = v32;
        }
        BOOL v30 = v30;
      }
      v29 += 4;
      --v28;
    }
    while (v28);
  }
  uint64_t v33 = 2587893767;
  if (!(_WORD)v24) {
    return v33;
  }
  *(_WORD *)(a9 + 48) = v24;
  uint64_t v34 = heap_Calloc(*(void **)(v60 + 8), (unsigned __int16)v24, 4);
  *a11 = v34;
  if (!v34) {
    return v33;
  }
  if (!*(_DWORD *)(a1 + 164))
  {
    uint64_t v56 = (unsigned __int16)v24;
    uint64_t v57 = a11;
    if (!a8) {
      goto LABEL_71;
    }
    int v39 = 0;
    uint64_t v40 = a8;
    uint64_t v41 = (const char **)(v61 + 24);
    int v42 = 1;
    while (1)
    {
      int v43 = *((_DWORD *)v41 - 6);
      if (v43 == 36)
      {
        if (cstdlib_strcmp(*v41, "normal") && cstdlib_strcmp(*v41, a10))
        {
LABEL_69:
          int v42 = 0;
          goto LABEL_70;
        }
      }
      else
      {
        if (v42 != 1) {
          goto LABEL_69;
        }
        if (v43 == 1) {
          *(_DWORD *)(*a11 + 4 * (unsigned __int16)v39++) = *((_DWORD *)v41 - 3);
        }
      }
      int v42 = 1;
LABEL_70:
      v41 += 4;
      if (!--v40) {
        goto LABEL_71;
      }
    }
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 104))(a3, a4, 2, v58, &v63);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  uint64_t v56 = (unsigned __int16)v24;
  uint64_t v57 = a11;
  int v35 = 0;
  int v36 = 0;
  int v37 = 1;
  while (v63)
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(a3, a4);
    if ((v21 & 0x80000000) != 0) {
      return v21;
    }
    if (v67 <= 0x11 && ((1 << v67) & 0x20210) != 0)
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v63, 1, 1, &v65, &v66);
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v63, 2, 1, &v64, &v66);
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
      if (v37 == 1 || v36 != v65)
      {
        int v37 = 0;
        *(_DWORD *)(*a11 + 4 * (unsigned __int16)v35++) = *(_DWORD *)(v61 + 12) + v65;
        int v36 = v65;
      }
      else
      {
        int v37 = 0;
      }
    }
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(a3, a4, v63, &v63);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
  }
LABEL_71:
  uint64_t v44 = heap_Calloc(*(void **)(v60 + 8), v56, 8);
  *(void *)a9 = v44;
  if (!v44) {
    return 2587893770;
  }
  uint64_t v45 = heap_Calloc(*(void **)(v60 + 8), v56, 8);
  *(void *)(a9 + 64) = v45;
  if (!v45) {
    return 2587893770;
  }
  uint64_t v46 = heap_Calloc(*(void **)(v60 + 8), v56, 8);
  *(void *)(a9 + 16) = v46;
  if (!v46) {
    return 2587893770;
  }
  uint64_t v47 = 0;
  uint64_t v48 = (v24 & 0xFFFE) != 0 ? (unsigned __int16)v24 : 1;
  do
  {
    *(void *)(*(void *)(a9 + 16) + v47) = 0;
    v47 += 8;
  }
  while (8 * v48 != v47);
  uint64_t v49 = heap_Calloc(*(void **)(v60 + 8), v56, 2);
  *(void *)(a9 + 32) = v49;
  if (!v49) {
    return 2587893770;
  }
  uint64_t v50 = heap_Calloc(*(void **)(v60 + 8), v56, 2);
  *(void *)(a9 + 40) = v50;
  uint64_t v33 = 2587893770;
  if (v50)
  {
    for (uint64_t i = 0; i != v48; ++i)
    {
      unsigned __int16 v52 = *(_DWORD *)(*v57 + 4 * i) - *(_DWORD *)(v61 + 12);
      *(_WORD *)(*(void *)(a9 + 32) + 2 * i) = v52;
      *(void *)(*(void *)a9 + 8 * i) = *(void *)(a9 + 8) + v52;
      if ((int)i + 1 >= (unsigned __int16)v24)
      {
        *(_WORD *)(*(void *)(a9 + 40) + 2 * i) = cstdlib_strlen(__sa);
      }
      else
      {
        uint64_t v53 = *(unsigned int *)(*v57 + 4 * i);
        uint64_t v54 = *(unsigned int *)(*v57 + 4 * i + 4);
        *(_WORD *)(*(void *)(a9 + 40) + 2 * i) = *(_WORD *)(*(void *)(a9 + 32) + 2 * i) + v54 + ~(_WORD)v53;
        *(unsigned char *)(~v53 + *(void *)(*(void *)a9 + 8 * i) + v54) = 0;
      }
    }
    return fe_wmp_getPos(a1, a3, a4, a9, v58, v60);
  }
  return v33;
}

uint64_t fe_wmp_mapEachWord(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 136);
  __s1 = 0;
  if (2 * cstdlib_strlen(*(const char **)(a1 + 40)) <= 8 * (int)v5) {
    int v6 = 9 * v5;
  }
  else {
    int v6 = 2 * cstdlib_strlen(*(const char **)(a1 + 40));
  }
  int v7 = (char *)heap_Calloc(*(void **)(v4 + 8), 1, (v6 + 1));
  if (v7)
  {
    uint64_t v12 = v7;
    cstdlib_strcpy(v7, "");
    uint64_t v16 = *(void *)(a1 + 32);
    if (v16)
    {
      uint64_t v17 = 2587893770;
      uint64_t v65 = heap_Alloc(*(void *)(v4 + 8), 8 * *(unsigned __int8 *)(v16 + 1296) - 8);
      if (v65)
      {
        unsigned __int16 v63 = a2;
        if (*(unsigned char *)(v16 + 1296) != 1)
        {
          uint64_t v18 = (unsigned __int16)(*(unsigned __int8 *)(v16 + 1296) - 1);
          size_t v19 = (void *)v65;
          do
          {
            uint64_t v20 = (char *)heap_Calloc(*(void **)(v4 + 8), 1, 65);
            *size_t v19 = v20;
            if (!v20) {
              goto LABEL_96;
            }
            cstdlib_strcpy(v20, "=");
            ++v19;
          }
          while (--v18);
        }
        uint64_t v25 = heap_Calloc(*(void **)(v4 + 8), v5, 2);
        *(void *)(a1 + 112) = v25;
        if (v25)
        {
          *(void *)(a1 + 144) = heap_Calloc(*(void **)(v4 + 8), v5, 2);
          unsigned __int16 __s = v12;
          if (*(_WORD *)(a1 + 136))
          {
            unint64_t v26 = 0;
            LODWORD(v27) = 0;
            while (1)
            {
              unsigned int v64 = v27;
              uint64_t v28 = *(void *)(v16 + 1312);
              unsigned int v29 = *(unsigned __int8 *)(v16 + 1296);
              uint64_t v30 = heap_Calloc(*(void **)(v4 + 8), 1, 2048);
              if (!v30) {
                goto LABEL_96;
              }
              uint64_t v31 = v30;
              if (v29 <= 1)
              {
                heap_Free(*(void **)(v4 + 8), v30);
                uint64_t v17 = 0;
              }
              else
              {
                uint64_t v32 = 0;
                uint64_t v33 = v29 - 1;
                while (cstdlib_strcmp(*(const char **)(v28 + v32), "word"))
                {
                  v32 += 8;
                  if (8 * (v29 - 1) == v32)
                  {
                    uint64_t v17 = 0;
                    goto LABEL_24;
                  }
                }
                uint64_t v34 = "=";
                if (v26 < *(unsigned __int16 *)(a1 + 136)) {
                  uint64_t v34 = *(const char **)(*(void *)(a1 + 88) + 8 * v26);
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 2, v65, v34);
                if ((v17 & 0x80000000) != 0)
                {
LABEL_97:
                  heap_Free(*(void **)(v4 + 8), v31);
                  uint64_t v12 = __s;
                  goto LABEL_98;
                }
LABEL_24:
                uint64_t v35 = 0;
                while (cstdlib_strcmp(*(const char **)(v28 + 8 * v35), "pos"))
                {
                  if (v33 == ++v35) {
                    goto LABEL_31;
                  }
                }
                int v36 = "=";
                if (v26 < *(unsigned __int16 *)(a1 + 136)) {
                  int v36 = *(const char **)(*(void *)(a1 + 152) + 8 * v26);
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 5, v65, v36);
                if ((v17 & 0x80000000) != 0) {
                  goto LABEL_97;
                }
LABEL_31:
                uint64_t v37 = 0;
                while (cstdlib_strcmp(*(const char **)(v28 + 8 * v37), "lpos"))
                {
                  if (v33 == ++v37) {
                    goto LABEL_40;
                  }
                }
                if (v26)
                {
                  uint64_t v38 = "=";
                  if ((int)v26 - 1 < *(unsigned __int16 *)(a1 + 136)) {
                    uint64_t v38 = *(const char **)(*(void *)(a1 + 152) + 8 * (v26 - 1));
                  }
                }
                else
                {
                  uint64_t v38 = "=";
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 6, v65, v38);
                if ((v17 & 0x80000000) != 0) {
                  goto LABEL_97;
                }
LABEL_40:
                uint64_t v39 = 0;
                while (cstdlib_strcmp(*(const char **)(v28 + 8 * v39), "rpos"))
                {
                  if (v33 == ++v39) {
                    goto LABEL_47;
                  }
                }
                uint64_t v40 = "=";
                if ((int)v26 + 1 < *(unsigned __int16 *)(a1 + 136)) {
                  uint64_t v40 = *(const char **)(*(void *)(a1 + 152) + 8 * (v26 + 1));
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 7, v65, v40);
                if ((v17 & 0x80000000) != 0) {
                  goto LABEL_97;
                }
LABEL_47:
                uint64_t v41 = 0;
                while (cstdlib_strcmp(*(const char **)(v28 + 8 * v41), "lword"))
                {
                  if (v33 == ++v41) {
                    goto LABEL_56;
                  }
                }
                if (v26)
                {
                  int v42 = "=";
                  if ((int)v26 - 1 < *(unsigned __int16 *)(a1 + 136)) {
                    int v42 = *(const char **)(*(void *)(a1 + 88) + 8 * (v26 - 1));
                  }
                }
                else
                {
                  int v42 = "=";
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 1, v65, v42);
                if ((v17 & 0x80000000) != 0) {
                  goto LABEL_97;
                }
LABEL_56:
                uint64_t v43 = 0;
                while (cstdlib_strcmp(*(const char **)(v28 + 8 * v43), "llword"))
                {
                  if (v33 == ++v43) {
                    goto LABEL_64;
                  }
                }
                uint64_t v44 = "=";
                if (v26 >= 2 && (int)v26 - 2 < *(unsigned __int16 *)(a1 + 136)) {
                  uint64_t v44 = *(const char **)(*(void *)(a1 + 88) + 8 * (v26 - 2));
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 0, v65, v44);
                if ((v17 & 0x80000000) != 0) {
                  goto LABEL_97;
                }
LABEL_64:
                uint64_t v45 = 0;
                while (cstdlib_strcmp(*(const char **)(v28 + 8 * v45), "rword"))
                {
                  if (v33 == ++v45) {
                    goto LABEL_71;
                  }
                }
                uint64_t v46 = "=";
                if ((int)v26 + 1 < *(unsigned __int16 *)(a1 + 136)) {
                  uint64_t v46 = *(const char **)(*(void *)(a1 + 88) + 8 * (v26 + 1));
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 3, v65, v46);
                if ((v17 & 0x80000000) != 0) {
                  goto LABEL_97;
                }
LABEL_71:
                uint64_t v47 = 0;
                while (cstdlib_strcmp(*(const char **)(v28 + 8 * v47), "rrword"))
                {
                  if (v33 == ++v47)
                  {
                    uint64_t v12 = __s;
                    a2 = v63;
                    goto LABEL_78;
                  }
                }
                uint64_t v48 = "=";
                a2 = v63;
                if ((int)v26 + 2 < *(unsigned __int16 *)(a1 + 136)) {
                  uint64_t v48 = *(const char **)(*(void *)(a1 + 88) + 8 * (v26 + 2));
                }
                uint64_t v17 = fe_wmp_setFeature(v4, v28, v29, 4, v65, v48);
                uint64_t v12 = __s;
LABEL_78:
                heap_Free(*(void **)(v4 + 8), v31);
                if ((v17 & 0x80000000) != 0) {
                  goto LABEL_98;
                }
              }
              igtree_Process(v16, v65, &__s1);
              uint64_t v49 = *(unsigned __int16 *)(*(void *)(a1 + 120) + 2 * v26);
              if (v64 < v49) {
                cstdlib_strncat(v12, (const char *)(*(void *)(a1 + 40) + v64), v49 - v64);
              }
              if (cstdlib_strcmp(__s1, "NOMATCH"))
              {
                cstdlib_strcat(v12, __s1);
                __int16 v50 = cstdlib_strlen(__s1);
                *(_WORD *)(*(void *)(a1 + 112) + 2 * v26) = v50
                                                            - cstdlib_strlen(*(const char **)(*(void *)(a1 + 88)
                                                                                            + 8 * v26));
                *(_WORD *)(*(void *)(a1 + 144) + 2 * v26) = 1;
                unint64_t v51 = *(void **)(v4 + 8);
                size_t v52 = cstdlib_strlen(__s1);
                *(void *)(*(void *)(a1 + 104) + 8 * v26) = heap_Calloc(v51, 1, v52 + 1);
                cstdlib_strcpy(*(char **)(*(void *)(a1 + 104) + 8 * v26), __s1);
                *a2 = 1;
              }
              else
              {
                cstdlib_strcat(v12, *(const char **)(*(void *)(a1 + 88) + 8 * v26));
              }
              size_t v27 = *(unsigned __int16 *)(*(void *)(a1 + 128) + 2 * v26++);
              if (v26 >= *(unsigned __int16 *)(a1 + 136)) {
                goto LABEL_89;
              }
            }
          }
          uint64_t v17 = 0;
          size_t v27 = 0;
LABEL_89:
          if (cstdlib_strlen(*(const char **)(a1 + 40)) > v27) {
            cstdlib_strcat(v12, (const char *)(*(void *)(a1 + 40) + v27));
          }
          if (*(unsigned char *)(v16 + 1296) != 1)
          {
            uint64_t v53 = (unsigned __int16)(*(unsigned __int8 *)(v16 + 1296) - 1);
            uint64_t v54 = (uint64_t *)v65;
            do
            {
              uint64_t v55 = *v54++;
              heap_Free(*(void **)(v4 + 8), v55);
              --v53;
            }
            while (v53);
          }
          uint64_t v56 = *(uint64_t **)(v4 + 8);
          uint64_t v57 = *(void *)(a1 + 40);
          uint64_t v12 = __s;
          size_t v58 = cstdlib_strlen(__s);
          unsigned int v59 = (char *)heap_Realloc(v56, v57, v58 + 1);
          *(void *)(a1 + 40) = v59;
          if (!v59)
          {
LABEL_96:
            log_OutPublic(*(void *)(v4 + 32), (uint64_t)"FE_WMP", 37000, 0, v21, v22, v23, v24, v61);
            uint64_t v17 = 2587893770;
            goto LABEL_98;
          }
          cstdlib_strcpy(v59, __s);
        }
LABEL_98:
        heap_Free(*(void **)(v4 + 8), v65);
      }
    }
    else
    {
      log_OutText(*(void *)(v4 + 32), (uint64_t)"FE_WMP", 0, 0, (uint64_t)"IGTree model for wordmap does not exist", v13, v14, v15, v61);
      uint64_t v17 = 0;
    }
    heap_Free(*(void **)(v4 + 8), (uint64_t)v12);
    return v17;
  }
  uint64_t v17 = 2587893770;
  log_OutPublic(*(void *)(v4 + 32), (uint64_t)"FE_WMP", 37000, 0, v8, v9, v10, v11, v61);
  return v17;
}

uint64_t fe_wmp_userTNBoundaryAdjustLateWMP(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v20 = 0;
  int v18 = 0;
  int v19 = 0;
  unsigned __int16 v17 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 24)
                                                                                             + 104))(a2, a3, 2, a5, &v17);
  if ((result & 0x80000000) == 0)
  {
    while (v17)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))(*(void *)(a1 + 24) + 168))(a2, a3, v17, 0, 1, (char *)&v20 + 4, (char *)&v18 + 2);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t v10 = v17;
      if ((HIDWORD(v20) - 5) > 1) {
        goto LABEL_24;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, char *))(*(void *)(a1 + 24) + 168))(a2, a3, v17, 1, 1, &v20, (char *)&v18 + 2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 24) + 168))(a2, a3, v17, 2, 1, &v19, (char *)&v18 + 2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (v19)
      {
        if (*(_WORD *)(a1 + 136))
        {
          uint64_t v11 = 0;
          int v12 = 0;
          int v13 = 0;
          do
          {
            unsigned int v14 = a4[v11];
            if (v14 >= *a4 + v19) {
              break;
            }
            v13 += *(__int16 *)(*(void *)(a1 + 112) + 2 * v11);
            int v15 = v14 >= (int)v20 + *a4 ? 0 : *(__int16 *)(*(void *)(a1 + 112) + 2 * v11);
            v12 += v15;
            ++v11;
          }
          while (*(unsigned __int16 *)(a1 + 136) != v11);
        }
        else
        {
          int v13 = 0;
          int v12 = 0;
        }
        v19 += v13;
        LODWORD(v20) = v12 + v20;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, int *))(*(void *)(a1 + 24) + 160))(a2, a3, v17, 1, 1, &v20, &v18);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 24) + 160))(a2, a3, v17, 2, 1, &v19, &v18);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v10 = v17;
      if (HIDWORD(v20) == 5)
      {
        if (v20 == v19) {
          uint64_t v16 = v17;
        }
        else {
          uint64_t v16 = 0;
        }
      }
      else
      {
LABEL_24:
        uint64_t v16 = 0;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(a2, a3, v10, &v17);
      if ((result & 0x80000000) == 0)
      {
        if (!v16) {
          continue;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 24) + 192))(a2, a3, v16);
        if ((result & 0x80000000) == 0) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t fe_wmp_adjustWordRecords(void *a1, uint64_t a2, uint64_t a3)
{
  int v37 = 0;
  unsigned __int16 v36 = 0;
  __int16 v35 = 0;
  int v33 = 0;
  int v34 = 0;
  memset(__c, 0, sizeof(__c));
  unsigned __int16 v31 = 0;
  uint64_t v29 = 0;
  unsigned __int16 __s = 0;
  __int16 v28 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  int v24 = 0;
  __int16 v23 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a1[3] + 104))(a2, a3, 1, 0, &v31);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[3] + 104))(a2, a3, 2, v31, (char *)&v37 + 2);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v7 = HIWORD(v37);
      if (HIWORD(v37))
      {
        __int16 v8 = 0;
        unsigned __int16 v9 = 0;
        unsigned int v10 = 0;
        int v11 = 1;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(a1[3] + 168))(a2, a3, v7, 0, 1, &v34, &v37);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (v34 == 9 || v34 == 4)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 1, 1, &v36, &v37);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 2, 1, &v35, &v37);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (v36) {
              int v13 = 0;
            }
            else {
              int v13 = v11;
            }
            if (v36 > v10) {
              int v11 = 1;
            }
            else {
              int v11 = v13;
            }
            if (v36 > v10) {
              ++v9;
            }
            if (*(_WORD *)(a1[18] + 2 * v9) == 1 && v11 == 1)
            {
              unsigned __int16 __s = 0;
              *(void *)&__c[1] = 0;
              LOWORD(v33) = 0;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[3] + 176))(a2, a3, HIWORD(v37), 3, &__s, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(void, void, const char *, void, unsigned char *, int *, unsigned char *, void))(a1[7] + 232))(a1[8], a1[9], "wmp_dct", *(void *)(a1[13] + 8 * v9), &__c[1], &v33, __c, 0);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if ((_WORD)v33)
              {
                unsigned __int16 __s = **(char ***)&__c[1];
                int v15 = cstdlib_strchr(__s, __c[0]);
                if (v15) {
                  *int v15 = 0;
                }
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v37), 5, &v29, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 7, 1, &v28, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v37), 6, &v27, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v37), 9, &v26, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v37), 14, &v25, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v16 = a1[14];
              LOWORD(v24) = *(_WORD *)(a1[15] + 2 * v9) + v8;
              __int16 v23 = *(_WORD *)(a1[16] + 2 * v9) + v8 + *(_WORD *)(v16 + 2 * v9);
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[3] + 160))(a2, a3, HIWORD(v37), 1, 1, &v24, (char *)&v24 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(a1[3] + 160))(a2, a3, HIWORD(v37), 2, 1, &v23, (char *)&v24 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              unsigned __int16 v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(a1[3] + 160);
              uint64_t v18 = HIWORD(v37);
              __int16 v19 = cstdlib_strlen(__s);
              uint64_t result = v17(a2, a3, v18, 3, (unsigned __int16)(v19 + 1), __s, (char *)&v24 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              __int16 v20 = *(_WORD *)(a1[14] + 2 * v9);
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[3] + 120))(a2, a3, HIWORD(v37), (char *)&v37 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              v8 += v20;
              if (HIWORD(v37))
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 168))(a2, a3);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 1, 1, (char *)&v33 + 2, &v37);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                while (HIWORD(v33) == v36)
                {
                  unsigned __int16 v21 = HIWORD(v37);
                  if (!HIWORD(v37)) {
                    break;
                  }
                  if (v34 != 9 && v34 != 4) {
                    break;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[3] + 120))(a2, a3, HIWORD(v37), (char *)&v37 + 2);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 0, 1, &v34, &v37);
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 1, 1, (char *)&v33 + 2, &v37);
                      if ((result & 0x80000000) == 0)
                      {
                        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1[3] + 192))(a2, a3, v21);
                        if ((result & 0x80000000) == 0) {
                          continue;
                        }
                      }
                    }
                  }
                  return result;
                }
              }
            }
            else
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 1, 1, &v36, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1[3] + 168))(a2, a3, HIWORD(v37), 2, 1, &v35, &v37);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              LOWORD(v24) = v36 + v8;
              __int16 v23 = v35 + v8;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[3] + 160))(a2, a3, HIWORD(v37), 1, 1, &v24, (char *)&v24 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(a1[3] + 160))(a2, a3, HIWORD(v37), 2, 1, &v23, (char *)&v24 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[3] + 120))(a2, a3, HIWORD(v37), (char *)&v37 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
            unsigned int v10 = v36;
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[3] + 120))(a2, a3, HIWORD(v37), (char *)&v37 + 2);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          unsigned __int16 v7 = HIWORD(v37);
        }
        while (HIWORD(v37));
      }
    }
  }
  return result;
}

uint64_t fe_wmp_AdjustMarkersLateWMP(uint64_t result, uint64_t a2, unsigned int a3, const char *a4)
{
  uint64_t v27 = result;
  unsigned int v5 = *(unsigned __int16 *)(result + 136);
  if (*(_WORD *)(result + 136))
  {
    unint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    BOOL v9 = 1;
    do
    {
      if ((int)v6 + 1 < v5) {
        unsigned int v10 = v6 + 1;
      }
      else {
        unsigned int v10 = v5 - 1;
      }
      if ((int)v6 + 1 >= v5) {
        uint64_t v11 = 128;
      }
      else {
        uint64_t v11 = 120;
      }
      unsigned int v12 = *(unsigned __int16 *)(*(void *)(v27 + v11) + 2 * v10);
      uint64_t v13 = (unsigned __int16)v7;
      uint64_t v14 = a2 + 32 * (unsigned __int16)v7;
      unsigned int v17 = *(_DWORD *)(v14 + 12);
      uint64_t v16 = (_DWORD *)(v14 + 12);
      unsigned int v15 = v17;
      if (v17 < v12)
      {
        do
        {
          uint64_t v18 = (const char **)(a2 + 32 * v13);
          int v19 = *(_DWORD *)v18;
          *((_DWORD *)v18 + 1) += v8;
          *uint64_t v16 = v15 + v8;
          if (v19 == 36)
          {
            uint64_t result = cstdlib_strcmp(v18[3], "normal");
            BOOL v9 = 1;
            if (result)
            {
              uint64_t result = cstdlib_strcmp(v18[3], a4);
              if (result) {
                BOOL v9 = 0;
              }
            }
          }
          if (*v16 != v12 - 1 && *(_DWORD *)v18 == 1)
          {
            if (v9) {
              int v20 = *(__int16 *)(*(void *)(v27 + 112) + 2 * v6);
            }
            else {
              int v20 = 0;
            }
            *(_DWORD *)(a2 + 32 * v13 + 8) += v20;
            uint64_t v21 = (unsigned __int16)v7 + 1;
            if (v21 < a3 && *(_DWORD *)(a2 + 32 * ((unsigned __int16)v7 + 1)) == 37)
            {
              uint64_t v22 = (_DWORD *)(a2 + 32 * v21);
              int v23 = v22[3];
              int v24 = v22[4] + v20;
              v22[1] += v8;
              v22[3] = v23 + v8;
              v22[4] = v24;
              ++v7;
            }
            v8 += v20;
          }
          uint64_t v13 = (unsigned __int16)++v7;
          uint64_t v25 = a2 + 32 * (unsigned __int16)v7;
          unsigned int v26 = *(_DWORD *)(v25 + 12);
          uint64_t v16 = (_DWORD *)(v25 + 12);
          unsigned int v15 = v26;
        }
        while (v26 < v12);
        unsigned int v5 = *(unsigned __int16 *)(v27 + 136);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  else
  {
    int v8 = 0;
  }
  *(_DWORD *)(a2 + 8) += v8;
  *(_DWORD *)(a2 + 16) += v8;
  return result;
}

uint64_t fe_wmp_userTNBoundaryAdjust(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int a5, __int16 a6, __int16 a7)
{
  unsigned __int16 v24 = a5;
  __int16 v23 = a6;
  __int16 v22 = a7;
  int v19 = 0;
  int v20 = 0;
  if (!a5) {
    return 0;
  }
  int v21 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 168))(a2, a3, (unsigned __int16)a5, 0, 1, &v21, &v23);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v12 = v24;
    if ((v21 - 4) > 2) {
      goto LABEL_24;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 168))(a2, a3, v24, 1, 1, &v20, &v23);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 168))(a2, a3, v24, 2, 1, &v19, &v23);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v19)
    {
      if (*(_WORD *)(a1 + 136))
      {
        uint64_t v13 = 0;
        int v14 = 0;
        int v15 = 0;
        do
        {
          unsigned int v16 = a4[v13];
          if (v16 >= *a4 + v19) {
            break;
          }
          v15 += *(__int16 *)(*(void *)(a1 + 112) + 2 * v13);
          int v17 = v16 >= v20 + *a4 ? 0 : *(__int16 *)(*(void *)(a1 + 112) + 2 * v13);
          v14 += v17;
          ++v13;
        }
        while (*(unsigned __int16 *)(a1 + 136) != v13);
      }
      else
      {
        int v15 = 0;
        int v14 = 0;
      }
      v19 += v15;
      v20 += v14;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 160))(a2, a3, v24, 1, 1, &v20, &v22);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 160))(a2, a3, v24, 2, 1, &v19, &v22);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v12 = v24;
    if (v21 == 5)
    {
      if (v20 == v19) {
        uint64_t v18 = v24;
      }
      else {
        uint64_t v18 = 0;
      }
    }
    else
    {
LABEL_24:
      uint64_t v18 = 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(a2, a3, v12, &v24);
    if ((result & 0x80000000) == 0)
    {
      if (!v18
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 24) + 192))(a2, a3, v18),
            (result & 0x80000000) == 0))
      {
        LOWORD(a5) = v24;
        if (v24) {
          continue;
        }
      }
    }
    return result;
  }
}

uint64_t fe_wmp_AdjustMarkers(uint64_t result, uint64_t a2, unsigned int a3, const char *a4)
{
  if (a3)
  {
    uint64_t v6 = result;
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = a3;
    uint64_t v10 = a2 + 12;
    BOOL v11 = 1;
    do
    {
      int v12 = *(_DWORD *)(v10 - 12);
      *(_DWORD *)(v10 - 8) += v7;
      *(_DWORD *)v10 += v7;
      if (v12 == 36)
      {
        uint64_t result = cstdlib_strcmp(*(const char **)(v10 + 12), "normal");
        BOOL v11 = 1;
        if (result)
        {
          uint64_t result = cstdlib_strcmp(*(const char **)(v10 + 12), a4);
          if (result) {
            BOOL v11 = 0;
          }
        }
        int v12 = *(_DWORD *)(v10 - 12);
      }
      if (v12 == 1)
      {
        if (v11) {
          int v13 = *(__int16 *)(*(void *)(v6 + 112) + 2 * (unsigned __int16)v8++);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v10 - 4) += v13;
        v7 += v13;
      }
      v10 += 32;
      --v9;
    }
    while (v9);
  }
  else
  {
    int v7 = 0;
  }
  *(_DWORD *)(a2 + 8) += v7;
  *(_DWORD *)(a2 + 16) += v7;
  return result;
}

uint64_t fe_wmp_getPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v22 = 0;
  unsigned __int16 __s = 0;
  __int16 v20 = 0;
  int v18 = 0;
  unsigned int v19 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 24)
                                                                                             + 104))(a2, a3, 2, a5, &v22);
  if ((result & 0x80000000) == 0)
  {
    unsigned __int16 v12 = v22;
    if (v22)
    {
      unsigned int v13 = 0;
      while (1)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(*(void *)(a1 + 24) + 168))(a2, a3, v12, 0, 1, &v19, &v20);
        if ((result & 0x80000000) != 0) {
          break;
        }
        if (v19 <= 0x11 && ((1 << v19) & 0x20210) != 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*(void *)(a1 + 24) + 168))(a2, a3, v22, 1, 1, (char *)&v18 + 2, &v20);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(*(void *)(a1 + 24) + 168))(a2, a3, v22, 2, 1, &v18, &v20);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (v13 < *(unsigned __int16 *)(a4 + 48)
            && HIWORD(v18) == *(unsigned __int16 *)(*(void *)(a4 + 32) + 2 * v13))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(*(void *)(a1 + 24) + 176))(a2, a3, v22, 5, &__s, &v20);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            int v15 = *(void **)(a6 + 8);
            size_t v16 = cstdlib_strlen(__s);
            *(void *)(*(void *)(a4 + 64) + 8 * v13) = heap_Calloc(v15, 1, v16 + 1);
            int v17 = *(char **)(*(void *)(a4 + 64) + 8 * v13);
            if (!v17) {
              return 2587893770;
            }
            cstdlib_strcpy(v17, __s);
            ++v13;
          }
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(a2, a3, v22, &v22);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v12 = v22;
          if (v22) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t fe_wmp_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  int v8 = g_featureNames_5[a3];
  while (cstdlib_strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

uint64_t fe_wmp_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  unsigned __int16 v20 = -1;
  uint64_t result = fe_wmp_isFeatureRequired(a2, a3, a4, &v20);
  if (result)
  {
    if (cstdlib_strcmp(a6, ""))
    {
      size_t v10 = cstdlib_strlen(a6);
      uint64_t v11 = v20;
      if (v10 <= 0x40)
      {
        unsigned int v13 = *(char **)(a5 + 8 * v20);
      }
      else
      {
        unsigned __int16 v12 = cstdlib_strlen(a6);
        unsigned int v13 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a5 + 8 * v11), v12 + 1);
        if (!v13)
        {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_WMP", 37000, 0, v14, v15, v16, v17, v19);
          return 2587893770;
        }
        *(void *)(a5 + 8 * v11) = v13;
      }
      int v18 = a6;
    }
    else
    {
      unsigned int v13 = *(char **)(a5 + 8 * v20);
      int v18 = "=";
    }
    cstdlib_strcpy(v13, v18);
    return 0;
  }
  return result;
}

uint64_t fe_text_analyzer_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2592088065;
  }
  uint64_t result = 0;
  *a2 = &IFeTextAnalyzer;
  return result;
}

uint64_t fe_text_analyzer_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v5 = 2592088071;
  uint64_t v134 = 0;
  memset(v144, 0, sizeof(v144));
  if (!a5) {
    return v5;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v136);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v10 = heap_Calloc(*(void **)(v136 + 8), 1, 80);
  if (!v10)
  {
    log_OutPublic(*(void *)(v136 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v11, v12, v13, v14, v124);
    uint64_t v5 = 2592088074;
    goto LABEL_13;
  }
  uint64_t v15 = v10;
  *(void *)a5 = v10;
  *(_DWORD *)(a5 + 8) = 62347;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 72) = 0;
  uint64_t Object = objc_GetObject(*(void *)(v136 + 48), (uint64_t)"LINGDB", &v135);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_11;
  }
  *(void *)(v15 + 24) = *(void *)(v135 + 8);
  uint64_t Object = objc_GetObject(*(void *)(v136 + 48), (uint64_t)"FE_DCTLKP", &v134);
  if ((Object & 0x80000000) != 0) {
    goto LABEL_11;
  }
  uint64_t v17 = v134;
  *(void *)(v15 + 40) = *(void *)(v134 + 8);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(v17 + 16);
  uint64_t v18 = v136;
  *(void *)uint64_t v15 = v136;
  *(void *)(v15 + 8) = a3;
  *(void *)(v15 + 16) = a4;
  uint64_t Object = fe_text_analyzer_CreateBrokerString(v18, v144);
  if ((Object & 0x80000000) != 0)
  {
LABEL_11:
    uint64_t v5 = Object;
LABEL_13:
    fe_text_analyzer_ObjClose(*(void ***)a5, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  uint64_t v20 = *(void *)v15;
  unsigned int v19 = *(_WORD **)(v15 + 8);
  uint64_t v21 = *(void *)(v15 + 16);
  *(void *)uint64_t v143 = 0;
  int v142 = 0;
  *(void *)uint64_t v141 = 0;
  char v140 = 0;
  *(_DWORD *)__s1 = 0;
  uint64_t v138 = 0;
  unsigned int v137 = 0;
  int v22 = ssftriff_reader_ObjOpen(v19, v21, 2, (const char *)v144, "STLE", 5, (uint64_t *)v143);
  if (v22 < 0 && (v22 & 0x1FFF) != 0x14)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    LODWORD(v31) = 0;
    goto LABEL_103;
  }
  int v33 = ssftriff_reader_OpenChunk(*(uint64_t *)v143, (__int32 *)__s1, (unsigned int *)&v142, v141);
  if ((v33 & 0x80000000) == 0)
  {
    int v34 = 0;
    unsigned int v35 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    while (1)
    {
      if (cstdlib_strcmp(__s1, "LINE"))
      {
        if (!cstdlib_strcmp(__s1, "TOKN"))
        {
          ssftriff_reader_GetChunkData(*(uint64_t *)v143, v142, &v138);
          uint64_t v46 = heap_Calloc(*(void **)(v20 + 8), 1, 4 * v31);
          uint64_t v29 = v46;
          if (!v46) {
            goto LABEL_91;
          }
          if (v35 >= v31) {
            goto LABEL_52;
          }
          uint64_t v47 = v138;
          uint64_t v48 = v35;
          do
          {
            *(_DWORD *)(v46 + 4 * v48) = v47[v48];
            ++v48;
          }
          while (v31 != v48);
LABEL_50:
          unsigned int v35 = v31;
          goto LABEL_52;
        }
        if (!cstdlib_strcmp(__s1, "TLEN"))
        {
          ssftriff_reader_GetChunkData(*(uint64_t *)v143, v142, &v138);
          uint64_t v28 = heap_Calloc(*(void **)(v20 + 8), 1, 8 * *v138);
          if (!v28)
          {
LABEL_91:
            log_OutPublic(*(void *)(*(void *)v15 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v36, v37, v38, v39, v124);
            goto LABEL_103;
          }
          ++v34;
          if (v29 && v31)
          {
            uint64_t v131 = v30;
            uint64_t v49 = v31;
            uint64_t v50 = 0;
            uint64_t v51 = v49;
            uint64_t v52 = v49;
            do
            {
              uint64_t v53 = heap_Calloc(*(void **)(v20 + 8), 1, 4 * *(unsigned int *)(v29 + 4 * v50));
              *(void *)(v28 + 8 * v50) = v53;
              if (!v53)
              {
                log_OutPublic(*(void *)(*(void *)v15 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v54, v55, v56, v57, v124);
                LODWORD(v31) = v51;
                uint64_t v30 = v131;
                goto LABEL_103;
              }
              if (*(_DWORD *)(v29 + 4 * v50))
              {
                unint64_t v58 = 0;
                unsigned int v59 = v138;
                do
                {
                  *(_DWORD *)(v53 + 4 * v58) = v59[(v34 + v58)];
                  ++v58;
                }
                while (v58 < *(unsigned int *)(v29 + 4 * v50));
                v34 += v58;
              }
              ++v50;
            }
            while (v50 != v52);
            uint64_t v31 = v51;
            unsigned int v35 = v51;
            uint64_t v30 = v131;
            goto LABEL_52;
          }
          goto LABEL_51;
        }
        if (!cstdlib_strcmp(__s1, "LLEN"))
        {
          uint64_t v27 = heap_Calloc(*(void **)(v20 + 8), 1, 4 * v31);
          if (!v27)
          {
            uint64_t v116 = *(void *)(*(void *)v15 + 32);
            goto LABEL_104;
          }
          ssftriff_reader_GetChunkData(*(uint64_t *)v143, v142, &v138);
          if (!v31) {
            goto LABEL_51;
          }
          uint64_t v60 = 0;
          uint64_t v61 = v138;
          do
          {
            *(_DWORD *)(v27 + 4 * v60) = v61[v60];
            ++v60;
          }
          while (v31 != v60);
          goto LABEL_50;
        }
        if (!cstdlib_strcmp(__s1, "RULE"))
        {
          uint64_t v30 = heap_Alloc(*(void *)(v20 + 8), 8 * v31);
          if (!v30) {
            goto LABEL_91;
          }
          unsigned int v137 = 0;
          if (v27 && v142)
          {
            uint64_t v127 = v31;
            uint64_t v31 = v27;
            unsigned int v40 = 0;
            unsigned int v35 = 0;
            do
            {
              unsigned int v137 = 0;
              uint64_t v41 = heap_Alloc(*(void *)(v20 + 8), (*(_DWORD *)(v31 + 4 * v35) + 1));
              *(void *)(v30 + 8 * v35) = v41;
              if (!v41)
              {
                log_OutPublic(*(void *)(*(void *)v15 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v42, v43, v44, v45, v124);
                uint64_t v27 = v31;
                LODWORD(v31) = v127;
                goto LABEL_103;
              }
              ssftriff_reader_ReadStringZ(*(uint64_t *)v143, *(uint64_t *)v141, v142, v40, 0, &v137);
              ssftriff_reader_ReadStringZ(*(uint64_t *)v143, *(uint64_t *)v141, v142, v40, *(unsigned char **)(v30 + 8 * v35++), &v137);
              v40 += v137;
            }
            while (v40 < v142);
            uint64_t v27 = v31;
            uint64_t v31 = v127;
            goto LABEL_52;
          }
LABEL_51:
          unsigned int v35 = 0;
        }
      }
      else
      {
        ssftriff_reader_GetChunkData(*(uint64_t *)v143, v142, &v138);
        uint64_t v31 = *v138;
      }
LABEL_52:
      ssftriff_reader_CloseChunk(*(uint64_t *)v143);
      int v33 = ssftriff_reader_OpenChunk(*(uint64_t *)v143, (__int32 *)__s1, (unsigned int *)&v142, v141);
      if (v33 < 0) {
        goto LABEL_55;
      }
    }
  }
  LODWORD(v31) = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
LABEL_55:
  if ((v33 & 0x1FFF) != 0x14) {
    goto LABEL_103;
  }
  uint64_t v62 = heap_Calloc(*(void **)(v20 + 8), 1, 32);
  if (!v62)
  {
    log_OutPublic(*(void *)(v20 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v63, v64, v65, v66, v124);
    goto LABEL_102;
  }
  unsigned int v67 = (uint64_t *)v62;
  *(unsigned char *)(v62 + 9) = 0;
  *(void *)(v62 + 16) = 0;
  unsigned __int16 v68 = (void *)heap_Calloc(*(void **)(v20 + 8), 1, 128);
  *unsigned int v67 = (uint64_t)v68;
  if (!v68)
  {
    log_OutPublic(*(void *)(v20 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v69, v70, v71, v72, v124);
    goto LABEL_99;
  }
  uint64_t v132 = v30;
  cstdlib_memcpy(v68, "START", 6uLL);
  uint64_t v73 = heap_Calloc(*(void **)(v20 + 8), 1, 128);
  if (!v73)
  {
    log_OutPublic(*(void *)(*(void *)v15 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v74, v75, v76, v77, v124);
    goto LABEL_98;
  }
  uint64_t v78 = (void *)v73;
  uint64_t v125 = v27;
  int v128 = v31;
  if (!v31)
  {
LABEL_88:
    heap_Free(*(void **)(v20 + 8), (uint64_t)v78);
    *(void *)(v15 + 32) = v67;
    uint64_t v27 = v125;
    LODWORD(v31) = v128;
    uint64_t v30 = v132;
    goto LABEL_105;
  }
  uint64_t v79 = 0;
  uint64_t v80 = v67;
  uint64_t v133 = v28;
  uint64_t v126 = v67;
  while (2)
  {
    cstdlib_memset(v78, 0, 0x80uLL);
    cstdlib_memcpy(v78, *(const void **)(v132 + 8 * v79), **(unsigned int **)(v28 + 8 * v79));
    unsigned int v81 = 0;
    unsigned int v82 = 0;
    uint64_t v129 = v79;
LABEL_62:
    unsigned int v130 = v82;
    uint64_t v84 = (char *)v80 + 9;
    unsigned int v83 = *((unsigned __int8 *)v80 + 9);
    if (!*((unsigned char *)v80 + 9)) {
      goto LABEL_74;
    }
    unint64_t v85 = v81;
    while (2)
    {
      uint64_t v86 = 0;
      unint64_t v87 = 0;
      while (1)
      {
        unsigned int v88 = *(const char **)(v80[2] + v86);
        if (v88) {
          break;
        }
LABEL_68:
        ++v87;
        v86 += 32;
        if (v87 >= v83)
        {
          unsigned int v81 = v85;
          uint64_t v28 = v133;
LABEL_73:
          uint64_t v79 = v129;
          goto LABEL_74;
        }
      }
      if (cstdlib_strcmp(v88, (const char *)v78))
      {
        unsigned int v83 = *v84;
        goto LABEL_68;
      }
      if (v85 < (*(_DWORD *)(v29 + 4 * v129) - 1))
      {
        uint64_t v80 = (uint64_t *)(v80[2] + v86);
        uint64_t v89 = v130 + *(_DWORD *)(*(void *)(v133 + 8 * v129) + 4 * v85++) + 1;
        ++v81;
        cstdlib_memset(v78, 0, 0x80uLL);
        unsigned int v130 = v89;
        uint64_t v28 = v133;
        cstdlib_memcpy(v78, (const void *)(*(void *)(v132 + 8 * v129) + v89), *(unsigned int *)(*(void *)(v133 + 8 * v129) + 4 * v85));
        uint64_t v84 = (char *)v80 + 9;
        unsigned int v83 = *((unsigned __int8 *)v80 + 9);
        if (*((unsigned char *)v80 + 9)) {
          continue;
        }
        uint64_t v84 = (char *)v80 + 9;
        goto LABEL_73;
      }
      break;
    }
    unsigned int v81 = v85;
    uint64_t v79 = v129;
    uint64_t v28 = v133;
LABEL_74:
    if (v81 == *(_DWORD *)(v29 + 4 * v79) - 1)
    {
      uint64_t v107 = (void *)heap_Alloc(*(void *)(v20 + 8), 128);
      v80[3] = (uint64_t)v107;
      if (!v107)
      {
        uint64_t v115 = *(void *)(*(void *)v15 + 32);
        goto LABEL_96;
      }
      cstdlib_memcpy(v107, (const void *)(*(void *)(v132 + 8 * v79) + v130), *(unsigned int *)(*(void *)(v28 + 8 * v79) + 4 * v81));
      *(unsigned char *)(v80[3] + *(unsigned int *)(*(void *)(v28 + 8 * v79) + 4 * v81)) = 0;
      uint64_t v80 = v126;
LABEL_87:
      ++v79;
      unsigned int v67 = v126;
      if (v79 == v128) {
        goto LABEL_88;
      }
      continue;
    }
    break;
  }
  size_t v90 = (*(_DWORD *)(*(void *)(v28 + 8 * v79) + 4 * v81) + 1);
  if (!*v84)
  {
    uint64_t v99 = heap_Alloc(*(void *)(v20 + 8), 32);
    if (!v99) {
      goto LABEL_95;
    }
    unint64_t v98 = (void *)v99;
    *(unsigned char *)(v99 + 9) = 0;
    *(void *)uint64_t v99 = 0;
    *(void *)(v99 + 16) = 0;
    *(void *)(v99 + 24) = 0;
    uint64_t v100 = (void *)heap_Alloc(*(void *)(v20 + 8), v90);
    *unint64_t v98 = v100;
    if (!v100)
    {
      log_OutPublic(*(void *)(v20 + 32), (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v101, v102, v103, v104, v124);
      heap_Free(*(void **)(v20 + 8), (uint64_t)v98);
      goto LABEL_97;
    }
    cstdlib_memcpy(v100, v78, v90);
    v80[2] = (uint64_t)v98;
LABEL_82:
    uint64_t v105 = *v84;
    unsigned char *v84 = v105 + 1;
    uint64_t v79 = v129;
    uint64_t v80 = &v98[4 * v105];
    uint64_t v106 = v130 + *(_DWORD *)(*(void *)(v28 + 8 * v129) + 4 * v81++) + 1;
    cstdlib_memset(v78, 0, 0x80uLL);
    cstdlib_memcpy(v78, (const void *)(*(void *)(v132 + 8 * v79) + v106), *(unsigned int *)(*(void *)(v133 + 8 * v79) + 4 * v81));
    unsigned int v82 = v106;
    uint64_t v28 = v133;
    if (v81 >= *(_DWORD *)(v29 + 4 * v129)) {
      goto LABEL_87;
    }
    goto LABEL_62;
  }
  uint64_t v91 = heap_Realloc(*(uint64_t **)(v20 + 8), v80[2], 32 * *v84 + 32);
  if (v91)
  {
    v80[2] = v91;
    *(unsigned char *)(v91 + 32 * *v84 + 9) = 0;
    uint64_t v96 = (void *)(v91 + 32 * *v84);
    *uint64_t v96 = 0;
    v96[2] = 0;
    v96[3] = 0;
    uint64_t v97 = (void *)heap_Alloc(*(void *)(v20 + 8), v90);
    *(void *)(v80[2] + 32 * *v84) = v97;
    if (v97)
    {
      cstdlib_memcpy(v97, v78, v90);
      unint64_t v98 = (void *)v80[2];
      goto LABEL_82;
    }
  }
LABEL_95:
  uint64_t v115 = *(void *)(v20 + 32);
LABEL_96:
  log_OutPublic(v115, (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v92, v93, v94, v95, v124);
LABEL_97:
  heap_Free(*(void **)(v20 + 8), (uint64_t)v78);
  uint64_t v27 = v125;
  unsigned int v67 = v126;
  LODWORD(v31) = v128;
LABEL_98:
  uint64_t v30 = v132;
LABEL_99:
  if (*v67) {
    heap_Free(*(void **)(v20 + 8), *v67);
  }
  heap_Free(*(void **)(v20 + 8), (uint64_t)v67);
LABEL_102:
  *(void *)(v15 + 32) = 0;
LABEL_103:
  uint64_t v116 = *(void *)(v20 + 32);
LABEL_104:
  log_OutPublic(v116, (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v23, v24, v25, v26, v124);
LABEL_105:
  if (*(void *)v143) {
    ssftriff_reader_ObjClose(*(void **)v143, v108, v109, v110, v111, v112, v113, v114);
  }
  if (v30)
  {
    uint64_t v117 = v28;
    int v118 = v31;
    if (v31)
    {
      uint64_t v119 = v31;
      long long v120 = (uint64_t *)v30;
      do
      {
        if (*v120)
        {
          heap_Free(*(void **)(v20 + 8), *v120);
          *long long v120 = 0;
        }
        ++v120;
        --v119;
      }
      while (v119);
    }
    heap_Free(*(void **)(v20 + 8), v30);
    uint64_t v28 = v117;
    LODWORD(v31) = v118;
  }
  if (v28)
  {
    uint64_t v121 = v28;
    if (v31)
    {
      uint64_t v122 = v31;
      unsigned __int16 v123 = (uint64_t *)v121;
      do
      {
        if (*v123)
        {
          heap_Free(*(void **)(v20 + 8), *v123);
          *unsigned __int16 v123 = 0;
        }
        ++v123;
        --v122;
      }
      while (v122);
    }
    heap_Free(*(void **)(v20 + 8), v121);
  }
  if (v27) {
    heap_Free(*(void **)(v20 + 8), v27);
  }
  if (v29) {
    heap_Free(*(void **)(v20 + 8), v29);
  }
  return 0;
}

uint64_t fe_text_analyzer_ObjClose(void **a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 62347, 80);
  if ((v3 & 0x80000000) != 0) {
    return 2592088072;
  }
  uint64_t v4 = v3;
  if (a1)
  {
    if (a1[3]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"LINGDB");
    }
    if (a1[5]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"FE_DCTLKP");
    }
    uint64_t v5 = (uint64_t)a1[4];
    if (v5)
    {
      loc_text_analyzer_free_node(*a1, v5);
      uint64_t v6 = (uint64_t)a1[4];
      if (v6) {
        heap_Free((void *)(*a1)[1], v6);
      }
      a1[4] = 0;
    }
    heap_Free((void *)(*a1)[1], (uint64_t)a1);
  }
  return v4;
}

uint64_t fe_text_analyzer_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2592088070;
  memset(v5, 0, sizeof(v5));
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62347, 80) & 0x80000000) != 0) {
    return 2592088072;
  }
  if (a1) {
    return fe_text_analyzer_CreateBrokerString(*a1, v5);
  }
  return v3;
}

uint64_t fe_text_analyzer_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62347, 80);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2592088072;
  }
}

uint64_t fe_text_analyzer_Process(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  unsigned __int16 __s = 0;
  int v76 = 0;
  int v77 = 0;
  uint64_t v75 = 0;
  int v74 = 0;
  __c_3 = 0;
  __int16 __c_1 = 0;
  unsigned __int8 __c = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  int v68 = 0;
  uint64_t v66 = 0;
  unsigned int v67 = 0;
  memset(__dst, 0, sizeof(__dst));
  *((_DWORD *)a1 + 16) = 0;
  *a5 = 1;
  log_OutText((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 5, 0, (uint64_t)"[FE_TEXT_ANALYZER]: Entering", a6, a7, a8, v61);
  *((_DWORD *)a1 + 16) = 0;
  if ((((uint64_t (*)(void *, void *, const char *, const char *, char ***, __int16 *, unsigned __int8 *))a1[5][12])(a1[6], a1[7], "fecfg", "fetext_act_text_analyzer", &__c_3, &__c_1, &__c) & 0x80000000) == 0&& __c_1)
  {
    uint64_t v11 = cstdlib_strchr(*__c_3, __c);
    if (v11) {
      *uint64_t v11 = 0;
    }
    if (!cstdlib_strcmp(*__c_3, "yes")) {
      *((_DWORD *)a1 + 16) = 1;
    }
  }
  __int16 __c_1 = 0;
  uint64_t v12 = ((uint64_t (*)(void *, void *, const char *, const char *, char ***, __int16 *, unsigned __int8 *))a1[5][12])(a1[6], a1[7], "fecfg", "fetext_trigger", &__c_3, &__c_1, &__c);
  uint64_t v13 = 0;
  if ((v12 & 0x80000000) == 0 && __c_1)
  {
    uint64_t v14 = v12;
    uint64_t v15 = cstdlib_strchr(*__c_3, __c);
    if (v15) {
      *uint64_t v15 = 0;
    }
    uint64_t v16 = *__c_3;
    size_t v17 = cstdlib_strlen(*__c_3);
    cstdlib_memcpy(__dst, v16, v17);
    uint64_t v13 = v14;
  }
  if (!*((_DWORD *)a1 + 16)) {
    return v13;
  }
  uint64_t v18 = (uint64_t)a1[4];
  if (!v18) {
    return v13;
  }
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, char *))a1[3][13])(a3, a4, 1, 0, (char *)&v77 + 2);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t, void, void, int *))a1[3][23])(a3, a4, HIWORD(v77), 0, &v74) & 0x80000000) != 0) {
    return v13;
  }
  if ((unsigned __int16)v74 != 1) {
    return v13;
  }
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, void, void, char **, char *))a1[3][22])(a3, a4, HIWORD(v77), 0, &__s, (char *)&v76 + 2);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (HIWORD(v76) < 2u) {
    return v13;
  }
  if (!cstdlib_strlen(__s)) {
    return v13;
  }
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))a1[3][22])(a3, a4, HIWORD(v77), 1, &v75, (char *)&v74 + 2);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  unsigned int v19 = HIWORD(v74);
  if (!HIWORD(v74)) {
    return v13;
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  while (*(_DWORD *)(v75 + v20) != 60)
  {
LABEL_26:
    ++v21;
    v20 += 32;
    if (v21 >= v19) {
      return v13;
    }
  }
  if (cstdlib_strcmp(*(const char **)(v75 + v20 + 24), (const char *)__dst))
  {
    unsigned int v19 = HIWORD(v74);
    goto LABEL_26;
  }
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, int *))a1[3][13])(a3, a4, 2, HIWORD(v77), &v77);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v65 = (uint64_t *)heap_Calloc((void *)(*a1)[1], 1, 32);
    if (v65)
    {
      unsigned __int16 v27 = v77;
      if ((_WORD)v77)
      {
        unsigned int v28 = 0;
        int v63 = 0;
        int v29 = -1;
        uint64_t v30 = (uint64_t)v65;
        while (1)
        {
          uint64_t v31 = ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, char *, char *))a1[3][21])(a3, a4, v27, 0, 1, (char *)&v69 + 4, (char *)&v76 + 2);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          uint64_t v31 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, char *))a1[3][21])(a3, a4, (unsigned __int16)v77, 1, 1, &v69, (char *)&v76 + 2);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          uint64_t v31 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))a1[3][21])(a3, a4, (unsigned __int16)v77, 2, 1, &v68, (char *)&v76 + 2);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          if ((HIDWORD(v69) == 9 || HIDWORD(v69) == 4) && (v69 > v28 || v29 == -1))
          {
            uint64_t v31 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, char **, char *))a1[3][22])(a3, a4, (unsigned __int16)v77, 5, &v67, (char *)&v76 + 2);
            if ((v31 & 0x80000000) != 0) {
              break;
            }
            if (v29 == -1) {
              int v29 = (unsigned __int16)v77;
            }
            uint64_t v32 = (void *)heap_Calloc((void *)(*a1)[1], 1, (v68 - v69 + 1));
            *(void *)uint64_t v30 = v32;
            if (!v32) {
              goto LABEL_66;
            }
            cstdlib_memcpy(v32, &__s[v69], (v68 - v69));
            *(unsigned char *)(*(void *)v30 + (v68 - v69)) = 0;
            uint64_t v37 = (void *)(*a1)[1];
            size_t v38 = cstdlib_strlen(v67);
            uint64_t v39 = heap_Calloc(v37, 1, v38 + 1);
            *(void *)(v30 + 8) = v39;
            if (!v39) {
              goto LABEL_66;
            }
            unsigned int v40 = (void *)v39;
            uint64_t v41 = v67;
            size_t v42 = cstdlib_strlen(v67);
            cstdlib_memcpy(v40, v41, v42);
            uint64_t v43 = *(void *)(v30 + 8);
            *(unsigned char *)(v43 + cstdlib_strlen(v67)) = 0;
            uint64_t v44 = heap_Calloc((void *)(*a1)[1], 1, 32);
            *(void *)(v30 + 24) = v44;
            if (!v44) {
              goto LABEL_66;
            }
            *(_DWORD *)(v30 + 16) = v63;
            unsigned int v28 = v69;
            ++v63;
            uint64_t v30 = v44;
          }
          uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, void, int *))a1[3][15])(a3, a4, (unsigned __int16)v77, &v77);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_67;
          }
          unsigned __int16 v27 = v77;
          if (!(_WORD)v77) {
            goto LABEL_48;
          }
        }
        uint64_t v13 = v31;
LABEL_67:
        uint64_t v50 = 0;
      }
      else
      {
LABEL_48:
        uint64_t v45 = (char *)heap_Calloc((void *)(*a1)[1], 1, 128);
        uint64_t v66 = v45;
        if (!v45)
        {
LABEL_66:
          uint64_t v13 = 2592088074;
          log_OutPublic((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v33, v34, v35, v36, v62);
          goto LABEL_67;
        }
        uint64_t v64 = v45;
        unsigned int v46 = 0;
        int v47 = 0;
        int v48 = 1;
        uint64_t v49 = (uint64_t)v65;
        do
        {
          if (loc_match_against_rules(v49, &v70, v18, &v66, v48)
            && *(_DWORD *)(v70 + 16) - *(_DWORD *)(v49 + 16) > v46)
          {
            unsigned int v46 = *(_DWORD *)(v70 + 16) - *(_DWORD *)(v49 + 16);
            int v47 = 1;
          }
          int v48 = 0;
          uint64_t v49 = *(void *)(v49 + 24);
        }
        while (v49);
        uint64_t v50 = 0;
        if (v20 && v47 == 1)
        {
          uint64_t v51 = heap_Calloc((void *)(*a1)[1], 1, 32 * HIWORD(v74));
          uint64_t v50 = v51;
          if (v51)
          {
            if (HIWORD(v74))
            {
              uint64_t v56 = 0;
              uint64_t v57 = v51 + v20;
              uint64_t v58 = 32 * HIWORD(v74);
              do
              {
                if (v21)
                {
                  unsigned int v59 = (_OWORD *)(v51 + v56);
                  long long v60 = *(_OWORD *)(v75 + v56 + 16);
                  *unsigned int v59 = *(_OWORD *)(v75 + v56);
                  v59[1] = v60;
                }
                else
                {
                  *(_DWORD *)(v51 + v20) = 60;
                  *(_OWORD *)(v57 + 4) = *(_OWORD *)(v75 + v20 + 4);
                  *(void *)(v57 + 24) = v64;
                }
                v56 += 32;
                --v21;
              }
              while (v58 != v56);
            }
            uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t))a1[3][20])(a3, a4, HIWORD(v77), 1);
          }
          else
          {
            uint64_t v13 = 2592088074;
            log_OutPublic((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v52, v53, v54, v55, v62);
          }
        }
      }
      loc_text_analyzer_free_orth(*a1, v65);
      heap_Free((void *)(*a1)[1], (uint64_t)v65);
      if (v66) {
        heap_Free((void *)(*a1)[1], (uint64_t)v66);
      }
      if (v50) {
        heap_Free((void *)(*a1)[1], v50);
      }
    }
    else
    {
      uint64_t v13 = 2592088074;
      log_OutPublic((*a1)[4], (uint64_t)"FE_TEXT_ANALYZER", 37000, 0, v23, v24, v25, v26, v62);
    }
  }
  return v13;
}

uint64_t fe_text_analyzer_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62347, 80);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2592088072;
  }
}

uint64_t fe_text_analyzer_CreateBrokerString(uint64_t a1, unsigned char *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  char __s2 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v8 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v5);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "text_analyzer_rules_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v5);
      return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, 0x100uLL);
    }
  }
  return result;
}

void *loc_text_analyzer_free_node(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      uint64_t result = heap_Free((void *)result[1], v4);
      *(void *)a2 = 0;
    }
    uint64_t v5 = *(void *)(a2 + 24);
    if (v5)
    {
      uint64_t result = heap_Free((void *)v3[1], v5);
      *(void *)(a2 + 24) = 0;
    }
    if (*(unsigned char *)(a2 + 9))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        uint64_t result = (void *)loc_text_analyzer_free_node(v3, *(void *)(a2 + 16) + v6);
        ++v7;
        v6 += 32;
      }
      while (v7 < *(unsigned __int8 *)(a2 + 9));
    }
    uint64_t v8 = *(void *)(a2 + 16);
    if (v8) {
      uint64_t result = heap_Free((void *)v3[1], v8);
    }
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t loc_match_against_rules(uint64_t a1, void *a2, uint64_t a3, char **a4, int a5)
{
  uint64_t v21 = 0;
  while (*(unsigned char *)(a3 + 9))
  {
    unint64_t v8 = 0;
    long long v9 = 0;
    long long v10 = 0;
    char v11 = 1;
LABEL_4:
    char v22 = v11;
    uint64_t v12 = 32 * v8;
    do
    {
      uint64_t v13 = *(void *)(a3 + 16);
      long long v14 = cstdlib_strstr(*(char **)(v13 + v12), ":");
      if (v14)
      {
        long long v9 = v14 + 1;
        long long v10 = *(char **)(v13 + v12);
      }
      if (!v10)
      {
        uint64_t v15 = *(const char **)a1;
        if (!*(void *)a1) {
          goto LABEL_23;
        }
        uint64_t v16 = *(const char **)(*(void *)(a3 + 16) + v12);
        if (!v16) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
      if (cstdlib_strstr(v10, "POS:") && (uint64_t v15 = *(const char **)(a1 + 8)) != 0
        || a5 == 1 && cstdlib_strstr(v10, "BEG:") && (uint64_t v15 = *(const char **)a1) != 0)
      {
        uint64_t v16 = v9;
LABEL_16:
        if (!cstdlib_strcmp(v16, v15)) {
          goto LABEL_29;
        }
        goto LABEL_23;
      }
      if (cstdlib_strstr(v10, "NOT:") && *(void *)a1)
      {
        if (cstdlib_strcmp(v9, *(const char **)a1))
        {
LABEL_29:
          uint64_t v21 = *(void *)(a3 + 16) + v12;
          goto LABEL_30;
        }
      }
      else if (cstdlib_strstr(v10, "ELIP:"))
      {
        char v11 = 0;
        uint64_t v21 = *(void *)(a3 + 16) + v12;
        if (++v8 < *(unsigned __int8 *)(a3 + 9)) {
          goto LABEL_4;
        }
        goto LABEL_30;
      }
LABEL_23:
      ++v8;
      v12 += 32;
    }
    while (v8 < *(unsigned __int8 *)(a3 + 9));
    if (v22) {
      return 0;
    }
LABEL_30:
    a1 = *(void *)(a1 + 24);
    if (!a1) {
      return 0;
    }
    a5 = 0;
    a3 = v21;
    size_t v17 = *(const char **)(v21 + 24);
    if (v17)
    {
      cstdlib_strcpy(*a4, v17);
      *a2 = a1;
      return 1;
    }
  }
  return 0;
}

void *loc_text_analyzer_free_orth(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    if (v4) {
      heap_Free((void *)result[1], v4);
    }
    uint64_t v5 = a2[1];
    if (v5) {
      heap_Free((void *)v3[1], v5);
    }
    uint64_t result = (void *)loc_text_analyzer_free_orth(v3, a2[3]);
    uint64_t v6 = a2[3];
    if (v6) {
      uint64_t result = heap_Free((void *)v3[1], v6);
    }
    a2[3] = 0;
  }
  return result;
}

uint64_t lidword_Identify(uint64_t a1, const void *a2, unsigned int a3, uint64_t *a4, unsigned int *a5, unsigned int *a6, uint64_t *a7, unsigned int *a8, unsigned int *a9)
{
  v311[64] = *(const void **)MEMORY[0x263EF8340];
  uint64_t inserted = 2345672714;
  v298 = 0;
  unsigned __int16 v296 = 0;
  if (!a1) {
    return 2345672711;
  }
  if (!*(_DWORD *)(a1 + 1924)) {
    return 0;
  }
  int v18 = *(unsigned __int16 *)(a1 + 2044);
  unsigned int v19 = *(void **)(*(void *)(a1 + 16) + 8);
  if (v18 == 1) {
    uint64_t v20 = (2 * a3) | 1;
  }
  else {
    uint64_t v20 = a3 + 1;
  }
  uint64_t v21 = (char *)heap_Calloc(v19, 1, v20);
  if (!v21)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v22, v23, v24, v25, v258);
    return inserted;
  }
  uint64_t v26 = v21;
  cstdlib_memcpy(v21, a2, a3);
  v26[a3] = 0;
  if (*(_DWORD *)(*a4 + 16) < cstdlib_strlen(v26)) {
    goto LABEL_8;
  }
  if (*a6 < 2)
  {
LABEL_23:
    v283 = a8;
    uint64_t v284 = a5;
    uint64_t v281 = (uint64_t)a2;
    v282 = a7;
    if (*(_WORD *)(a1 + 2044) != 1 || cstdlib_strlen(v26) == 1)
    {
LABEL_25:
      memset(v295, 0, 30);
      unsigned int v32 = cstdlib_strlen(v26);
      unsigned __int16 v27 = (unsigned __int8 *)lidword_normalizedDup(a1, v26, v32, v295, 1);
      if (!v27)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v33, v34, v35, v36, v258);
        goto LABEL_9;
      }
      unsigned int v37 = cstdlib_strlen(v26);
      unsigned int v28 = (unsigned __int8 *)lidword_normalizedDup(a1, v26, v37, v295, 0);
      if (!v28)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v38, v39, v40, v41, v258);
        goto LABEL_10;
      }
      v287 = (uint64_t ****)(a1 + 135952);
      lidword_InitStruct(a1);
      v279 = (unsigned __int8 *)v26;
      v273 = a4;
      lidword_CheckLangTags(a1, (unsigned __int8 *)v26, a4, a6);
      v274 = v27;
      unsigned int v299 = v27;
      lidword_AdvanceSkippingSpacesInNormSW(&v299, &v298);
      v280 = v28;
      uint64_t v297 = v28;
      lidword_AdvanceSkippingSpacesInNormSW(&v297, &v296);
      size_t v42 = v298;
      uint64_t v43 = (char *)v299;
      uint64_t v278 = a6;
      int v44 = 0;
      if (v298 == v299)
      {
LABEL_273:
        unsigned int v189 = (unsigned __int16)v44;
        uint64_t v26 = (char *)v279;
        lidword_ExtractFeats(a1, v279, (unsigned __int16)v44);
        uint64_t v297 = v280;
        lidword_AdvanceSkippingSpacesInNormSW(&v297, &v296);
        int v197 = v296;
        uint64_t v196 = v297;
        int v198 = v273;
        unsigned int v199 = v284;
        if (v296 != v297)
        {
          unint64_t v200 = 0;
          uint64_t v290 = a1 + 3084;
          unsigned int v277 = v189;
          do
          {
            if (!*v196 || v200 > 0xFF) {
              break;
            }
            if (*(_DWORD *)(a1 + 4 * v200 + 134156) == -1)
            {
              unsigned __int16 v201 = *(_WORD *)(a1 + 2026) + *(_WORD *)(a1 + 2030) * *(_WORD *)(a1 + 1928) + 3;
              unsigned __int8 v202 = *v197;
              *int v197 = 0;
              __sb = (char *)v196;
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID NN fallback: %s", v193, v194, v195, (uint64_t)v196);
              *int v197 = v202;
              unsigned __int16 v203 = *(_WORD *)(a1 + 2024) * v201;
              int v204 = (void *)heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), 4 * v203);
              v311[0] = v204;
              if (!v204)
              {
                uint64_t v218 = *(void *)(a1 + 16);
                goto LABEL_362;
              }
              uint64_t v209 = (float *)v204;
              unsigned __int16 v272 = v201;
              if (v203) {
                memset_pattern16(v204, &unk_2206E2470, 4 * v203);
              }
              v308[0] = 0;
              unint64_t v286 = *(unsigned __int16 *)(a1 + 2024);
              if (*(void *)(a1 + 2016))
              {
LABEL_282:
                unsigned int v210 = 0;
                unsigned int v211 = __sb;
                if ((_WORD)v197 != (_WORD)__sb && v286)
                {
                  unint64_t v212 = 0;
                  int v213 = 0;
                  do
                  {
                    int v214 = (unsigned __int8 *)&v211[(unsigned __int16)v213];
                    int v215 = Utf8_LengthInBytes(v214, 1);
                    cstdlib_strncpy(*(char **)(*(void *)(a1 + 2016) + 8 * v212), (const char *)v214, (unsigned __int16)v215);
                    unsigned int v211 = __sb;
                    uint64_t v216 = *(void *)(*(void *)(a1 + 2016) + 8 * v212++);
                    *(unsigned char *)(v216 + (unsigned __int16)v215) = 0;
                    v213 += v215;
                  }
                  while ((unsigned __int16)((_WORD)v197 - (_WORD)__sb) > (unsigned __int16)v213
                       && v212 < v286);
                  unsigned int v210 = (unsigned __int16)v212;
                }
              }
              else
              {
                uint64_t v218 = *(void *)(a1 + 16);
                uint64_t v219 = heap_Calloc(*(void **)(v218 + 8), 1, (8 * v286) | 1);
                *(void *)(a1 + 2016) = v219;
                if (!v219) {
                  goto LABEL_362;
                }
                if (v286)
                {
                  uint64_t v220 = 0;
                  while (1)
                  {
                    *(void *)(*(void *)(a1 + 2016) + v220) = heap_Calloc(*(void **)(v218 + 8), 1, 5);
                    if (!*(void *)(*(void *)(a1 + 2016) + v220)) {
                      break;
                    }
                    v220 += 8;
                    if (8 * v286 == v220) {
                      goto LABEL_282;
                    }
                  }
LABEL_362:
                  log_OutPublic(*(void *)(v218 + 32), (uint64_t)"FE_LID", 48000, 0, v205, v206, v207, v208, v265);
                  uint64_t v224 = 2345672714;
LABEL_363:
                  uint64_t inserted = v224;
                  goto LABEL_364;
                }
                unsigned int v210 = 0;
              }
              unsigned int v189 = v277;
              if (!*(void *)(a1 + 1960) || (uint64_t v221 = *v287) == 0)
              {
                uint64_t v224 = 2345672704;
                goto LABEL_363;
              }
              if (v210)
              {
                uint64_t v222 = 0;
                uint64_t v223 = v210;
                do
                {
                  uint64_t v224 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 1960) + 56))(*(void *)(a1 + 1984), *(void *)(a1 + 1992), *(void *)(*(void *)(a1 + 2016) + 8 * v222), *(void *)(a1 + 2008));
                  if ((v224 & 0x1FFF) == 0x14)
                  {
                    if (((*(uint64_t (**)(void, void, const char *, void))(*(void *)(a1 + 1960) + 56))(*(void *)(a1 + 1984), *(void *)(a1 + 1992), "$MEANC2V$", *(void *)(a1 + 2008)) & 0x1FFF) == 0x14)
                    {
                      uint64_t v224 = 2345672704;
                      goto LABEL_363;
                    }
                  }
                  else if ((v224 & 0x80000000) != 0)
                  {
                    goto LABEL_363;
                  }
                  cstdlib_memcpy(&v209[v222 * v272], *(const void **)(a1 + 2008), 4 * *(unsigned __int16 *)(a1 + 2026));
                  int v226 = v222 * v272 + *(unsigned __int16 *)(a1 + 2026);
                  int v227 = *(unsigned __int16 *)(a1 + 2030);
                  if (*(_WORD *)(a1 + 2030))
                  {
                    int v228 = 0;
                    uint64_t v229 = *(unsigned __int16 *)(a1 + 1928);
                    uint64_t v230 = v290;
                    do
                    {
                      if (v229)
                      {
                        uint64_t v231 = *(unsigned __int16 *)(a1 + 2028);
                        BOOL v233 = v228 + (int)v200 < v231 || v228 + (int)v200 >= v231 + v277;
                        uint64_t v234 = (int *)(v230 - (v231 << 9));
                        int v235 = v226;
                        uint64_t v236 = v229;
                        do
                        {
                          float v225 = -1.0;
                          if (!v233) {
                            float v225 = (float)*v234;
                          }
                          v209[v235++] = v225;
                          ++v234;
                          --v236;
                        }
                        while (v236);
                      }
                      v226 += v229;
                      ++v228;
                      v230 += 512;
                    }
                    while (v228 != v227);
                  }
                  LOBYTE(v225) = *(unsigned char *)(a1 + v200 + 135436);
                  float v237 = (float)LODWORD(v225);
                  v209[v226] = v237;
                  LOBYTE(v237) = *(unsigned char *)(a1 + v200 + 135692);
                  float v238 = (float)LODWORD(v237);
                  v209[v226 + 1] = v238;
                  LOBYTE(v238) = *(unsigned char *)(a1 + v200 + 135180);
                  v209[v226 + 2] = (float)LODWORD(v238);
                  ++v222;
                }
                while (v222 != v223);
                uint64_t v221 = *v287;
              }
              uint64_t v224 = fi_predict(v221, v311, *(unsigned __int16 *)(a1 + 2024), v308, v205, v206, v207, v208);
              a6 = v278;
              unsigned int v199 = v284;
              if ((v224 & 0x80000000) != 0) {
                goto LABEL_363;
              }
              uint64_t v242 = *(unsigned __int16 *)(a1 + 1928);
              if (*(_WORD *)(a1 + 1928))
              {
                uint64_t v243 = 0;
                do
                {
                  int v244 = *(_DWORD *)(v290 + v243);
                  if (v244) {
                    BOOL v245 = 1;
                  }
                  else {
                    BOOL v245 = 4 * v242 - 4 == v243;
                  }
                  v243 += 4;
                }
                while (!v245);
                unint64_t v246 = 0;
                unint64_t v247 = 0;
                float v248 = 0.0;
                uint64_t v26 = (char *)v279;
                do
                {
                  float v249 = v248;
                  unint64_t v250 = v247;
                  float v248 = *(float *)(v308[0] + 4 * v246);
                  if (v249 < v248) {
                    float v251 = *(float *)(v308[0] + 4 * v246);
                  }
                  else {
                    float v251 = v249;
                  }
                  if (v249 < v248) {
                    unint64_t v247 = v246;
                  }
                  else {
                    unint64_t v247 = v247;
                  }
                  if (v244 && v249 < v248)
                  {
                    unint64_t v247 = v246;
                    if (!*(_DWORD *)(v290 + 4 * v246))
                    {
                      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID prune out NN predictions if languages not in the LID1.0 destination field", v239, v240, v241, v265);
                      LODWORD(v242) = *(unsigned __int16 *)(a1 + 1928);
                      float v248 = v249;
                      unint64_t v247 = v250;
                    }
                  }
                  else
                  {
                    float v248 = v251;
                  }
                  ++v246;
                }
                while (v246 < v242);
                int v252 = (unsigned __int16)v247;
                if (v242)
                {
                  int __sc = (unsigned __int16)v247;
                  uint64_t v253 = 0;
                  unint64_t v254 = 0;
                  do
                  {
                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID [%3d] %1.5lf : %s %s", v239, v240, v241, v254++);
                    v253 += 8;
                  }
                  while (v254 < *(unsigned __int16 *)(a1 + 1928));
                  unsigned int v199 = v284;
                  a6 = v278;
                  int v252 = __sc;
                }
                else
                {
                  unsigned int v199 = v284;
                }
              }
              else
              {
                int v252 = 0;
                float v248 = 0.0;
                uint64_t v26 = (char *)v279;
              }
              float v255 = *(float *)(a1 + 2036);
              int v198 = v273;
              if (v248 <= v255 && v252 != *(unsigned __int16 *)(a1 + 1930))
              {
                float v256 = *(float *)(a1 + 2032);
                uint64_t v257 = *(void *)(*(void *)(a1 + 16) + 32);
                if (v248 <= v256)
                {
                  log_OutText(v257, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID NN thresholding set to %f triggered: falling back on main language", v239, v240, v241, COERCE__INT64(v256));
                  int v252 = *(unsigned __int16 *)(a1 + 1930);
                }
                else
                {
                  log_OutText(v257, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID NN thresholding set to %f triggered: falling back on language smoothing", v239, v240, v241, COERCE__INT64(v255));
                  int v252 = -3;
                }
              }
              *(_DWORD *)(a1 + 4 * v200 + 134156) = v252;
            }
            lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v297, &v296);
            ++v200;
            int v197 = v296;
            uint64_t v196 = v297;
            v290 += 512;
          }
          while (v296 != v297);
        }
        lidword_Smoothing(a1, v189, v190, v191, v192, v193, v194, v195);
        uint64_t inserted = lidword_InsertLangTags(a1, (unsigned __int8 *)v26, v198, v199, a6, v189, v282, v283, a9);
        if (*(_WORD *)(a1 + 2044) == 1) {
          lidword_AdjustMarkersAtSpacesAroundAscii(v26, v281, v198, a6);
        }
LABEL_365:
        unsigned __int16 v27 = v274;
        unsigned int v28 = v280;
        goto LABEL_10;
      }
      uint64_t v269 = a1 + 134156;
      uint64_t v270 = a1 + 3084;
      unsigned int v288 = 1;
      while (1)
      {
        if (!*v43 || (unsigned __int16)v44 > 0xFFu) {
          goto LABEL_273;
        }
        if (*(_DWORD *)(a1 + 4 * (unsigned __int16)v44 + 134156) != -4)
        {
          int v271 = (unsigned int *)(a1 + 4 * (unsigned __int16)v44 + 134156);
          int v285 = v44;
          unsigned int v46 = v296;
          uint64_t v45 = v297;
          v304[0] = 0;
          v304[1] = 0;
          *(void *)((char *)v305 + 6) = 0;
          v305[0] = 0;
          uint64_t v275 = *(void *)(a1 + 1088);
          uint64_t v303 = 0;
          int v302 = 0;
          char v301 = 0;
          unsigned int v300 = 0;
          v308[0] = 0;
          *(_WORD *)&__c[1] = 0;
          __c[0] = 0;
          unsigned __int8 v47 = *v296;
          *unsigned __int16 v296 = 0;
          LOWORD(v306) = 1;
          unsigned __int16 __s = (char *)v45;
          uint64_t Langs = (*(uint64_t (**)(void, void, const char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "ml2mw");
          if ((Langs & 0x80000000) != 0) {
            goto LABEL_360;
          }
          if ((_WORD)v306)
          {
            unint64_t v49 = 0;
            do
            {
              *((unsigned char *)v311 + v49) = LH_atou(*(const char **)(v308[0] + 8 * v49));
              ++v49;
            }
            while (v49 < (unsigned __int16)v306);
            ssft_qsort((uint64_t)v311, (unsigned __int16)v306, 1, (uint64_t (*)(unint64_t, unint64_t))compare_2);
            if ((_WORD)v306)
            {
              uint64_t v53 = 0;
              while (1)
              {
                *unsigned __int16 v296 = v47;
                uint64_t v54 = __s;
                if (*__s)
                {
                  uint64_t v54 = __s;
                  do
                  {
                    unsigned int v55 = cstdlib_strlen(v54);
                    if (utf8_BelongsToSet(0, v54, 0, v55)) {
                      break;
                    }
                    v54 += (int)Utf8_LengthInBytes((unsigned __int8 *)v54, 1);
                  }
                  while (*v54);
                }
                *(void *)&__c[3] = v54;
                char v56 = *v54;
                unsigned int v57 = *((unsigned __int8 *)v311 + v53);
                if (*v54 && v57 >= 2)
                {
                  unsigned __int16 v58 = 1;
                  do
                  {
                    lidword_AdvanceToEndMultiword((char **)&__c[3]);
                    ++v58;
                    uint64_t v54 = *(char **)&__c[3];
                    char v56 = **(unsigned char **)&__c[3];
                    unsigned int v57 = *((unsigned __int8 *)v311 + v53);
                  }
                  while (**(unsigned char **)&__c[3] && v57 > v58);
                }
                else
                {
                  unsigned __int16 v58 = 1;
                }
                if (v57 == v58)
                {
                  *uint64_t v54 = 0;
                  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID multi word case-sensitive lookup : %s", v50, v51, v52, (uint64_t)__s);
                  *(_WORD *)&__c[1] = 1;
                  uint64_t Langs = (*(uint64_t (**)(void, void, const char *, char *, void *, unsigned char *, unsigned char *, void))(*(void *)(a1 + 64) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), "ml2", __s, v308, &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
                  if ((Langs & 0x80000000) != 0) {
                    goto LABEL_360;
                  }
                  *uint64_t v54 = v56;
                  if (*(unsigned __int16 *)&__c[1] == 1) {
                    break;
                  }
                }
                if (++v53 >= (unint64_t)(unsigned __int16)v306)
                {
                  unsigned int v46 = v296;
                  goto LABEL_55;
                }
              }
              if (cstdlib_strcmp(*(const char **)v308[0], "all"))
              {
                if (*(_WORD *)(a1 + 1928))
                {
                  __int16 v104 = 0;
                  do
                  {
                    if (!cstdlib_strcmp((const char *)(*(void *)(a1 + 1936) + 8 * v104), *(const char **)v308[0])) {
                      break;
                    }
                    ++v104;
                  }
                  while (*(unsigned __int16 *)(a1 + 1928) > v104);
                }
                else
                {
                  __int16 v104 = 0;
                }
              }
              else
              {
                __int16 v104 = -3;
              }
              unsigned int v288 = *((unsigned __int8 *)v311 + v53);
              if (*((unsigned char *)v311 + v53))
              {
                long long v120 = (_DWORD *)(v270 + ((unint64_t)(unsigned __int16)v285 << 9) + 4 * (unsigned __int16)v104);
                uint64_t v121 = (_DWORD *)(v269 + 4 * (unsigned __int16)v285);
                uint64_t v122 = *((unsigned __int8 *)v311 + v53);
                do
                {
                  if ((v104 & 0x8000) == 0) {
                    *long long v120 = 1;
                  }
                  *v121++ = v104;
                  v120 += 128;
                  --v122;
                }
                while (v122);
              }
              uint64_t v123 = *(void *)(*(void *)(a1 + 16) + 32);
              if (v104 < 0) {
                log_OutText(v123, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML2 lexicon", v101, v102, v103, v259);
              }
              else {
                log_OutText(v123, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML2 lexicon: %s", v101, v102, v103, *(void *)(a1 + 1944) + 8 * (unsigned __int16)v104);
              }
              size_t v42 = v298;
              if (*v298 && *((unsigned __int8 *)v311 + v53) >= 2u)
              {
                unsigned int v124 = 1;
                do
                {
                  lidword_AdvanceToEndMultiword((char **)&v298);
                  size_t v42 = v298;
                  if (!*v298) {
                    break;
                  }
                  ++v124;
                }
                while (v124 < *((unsigned __int8 *)v311 + v53));
              }
              unsigned __int16 v296 = (unsigned __int8 *)v54;
              if (v288 > 1)
              {
LABEL_183:
                a6 = v278;
                int v44 = v285;
                goto LABEL_121;
              }
            }
            else
            {
LABEL_55:
              unsigned __int8 *v46 = v47;
              if ((Langs & 0x80000000) != 0) {
                goto LABEL_360;
              }
              size_t v42 = v298;
            }
          }
          else
          {
            unsigned __int8 *v46 = v47;
          }
          v308[0] = 0;
          *(_WORD *)&__c[1] = 0;
          __c[0] = 0;
          unsigned __int8 v59 = *v42;
          *size_t v42 = 0;
          LOWORD(v306) = 1;
          uint64_t Langs = (*(uint64_t (**)(void, void, const char *, char *, void *, int *, unsigned char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "ml2mw", v43, v308, &v306, __c);
          if ((Langs & 0x80000000) != 0) {
            goto LABEL_360;
          }
          if ((_WORD)v306)
          {
            unint64_t v60 = 0;
            do
            {
              *((unsigned char *)v311 + v60) = LH_atou(*(const char **)(v308[0] + 8 * v60));
              ++v60;
            }
            while (v60 < (unsigned __int16)v306);
            ssft_qsort((uint64_t)v311, (unsigned __int16)v306, 1, (uint64_t (*)(unint64_t, unint64_t))compare_2);
            if ((_WORD)v306)
            {
              uint64_t v64 = 0;
              while (1)
              {
                unsigned __int8 *v298 = v59;
                uint64_t v65 = v43;
                if (*v43)
                {
                  uint64_t v65 = v43;
                  do
                  {
                    unsigned int v66 = cstdlib_strlen(v65);
                    if (utf8_BelongsToSet(0, v65, 0, v66)) {
                      break;
                    }
                    v65 += (int)Utf8_LengthInBytes((unsigned __int8 *)v65, 1);
                  }
                  while (*v65);
                }
                *(void *)&__c[3] = v65;
                char v67 = *v65;
                unsigned int v68 = *((unsigned __int8 *)v311 + v64);
                if (*v65 && v68 >= 2)
                {
                  unsigned __int16 v69 = 1;
                  do
                  {
                    lidword_AdvanceToEndMultiword((char **)&__c[3]);
                    ++v69;
                    uint64_t v65 = *(char **)&__c[3];
                    char v67 = **(unsigned char **)&__c[3];
                    unsigned int v68 = *((unsigned __int8 *)v311 + v64);
                  }
                  while (**(unsigned char **)&__c[3] && v68 > v69);
                }
                else
                {
                  unsigned __int16 v69 = 1;
                }
                if (v68 == v69)
                {
                  *uint64_t v65 = 0;
                  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID multi word lookup : %s", v61, v62, v63, (uint64_t)v43);
                  *(_WORD *)&__c[1] = 1;
                  uint64_t Langs = (*(uint64_t (**)(void, void, const char *, char *, void *, unsigned char *, unsigned char *, void))(*(void *)(a1 + 64) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), "ml2", v43, v308, &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
                  if ((Langs & 0x80000000) != 0) {
                    goto LABEL_360;
                  }
                  *uint64_t v65 = v67;
                  if (*(unsigned __int16 *)&__c[1] == 1) {
                    break;
                  }
                }
                if (++v64 >= (unint64_t)(unsigned __int16)v306) {
                  goto LABEL_80;
                }
              }
              if (cstdlib_strcmp(*(const char **)v308[0], "all"))
              {
                if (*(_WORD *)(a1 + 1928))
                {
                  __int16 v108 = 0;
                  do
                  {
                    if (!cstdlib_strcmp((const char *)(*(void *)(a1 + 1936) + 8 * v108), *(const char **)v308[0])) {
                      break;
                    }
                    ++v108;
                  }
                  while (*(unsigned __int16 *)(a1 + 1928) > v108);
                }
                else
                {
                  __int16 v108 = 0;
                }
              }
              else
              {
                __int16 v108 = -3;
              }
              unsigned int v125 = *((unsigned __int8 *)v311 + v64);
              if (*((unsigned char *)v311 + v64))
              {
                uint64_t v126 = (_DWORD *)(v270 + ((unint64_t)(unsigned __int16)v285 << 9) + 4 * (unsigned __int16)v108);
                uint64_t v127 = (_DWORD *)(v269 + 4 * (unsigned __int16)v285);
                uint64_t v128 = *((unsigned __int8 *)v311 + v64);
                do
                {
                  if ((v108 & 0x8000) == 0) {
                    *uint64_t v126 = 1;
                  }
                  *v127++ = v108;
                  v126 += 128;
                  --v128;
                }
                while (v128);
              }
              uint64_t v129 = *(void *)(*(void *)(a1 + 16) + 32);
              if (v108 < 0) {
                log_OutText(v129, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML2 lexicon", v105, v106, v107, v260);
              }
              else {
                log_OutText(v129, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML2 lexicon: %s", v105, v106, v107, *(void *)(a1 + 1944) + 8 * (unsigned __int16)v108);
              }
              if (*v296)
              {
                unsigned int v130 = 1;
                do
                {
                  if (v130 >= *((unsigned __int8 *)v311 + v64)) {
                    break;
                  }
                  lidword_AdvanceToEndMultiword((char **)&v296);
                  ++v130;
                }
                while (*v296);
              }
              v298 = (unsigned __int8 *)v65;
              unsigned int v288 = v125;
              if (v125 > 1) {
                goto LABEL_183;
              }
            }
            else
            {
LABEL_80:
              uint64_t v65 = (char *)v298;
              unsigned __int8 *v298 = v59;
              if ((Langs & 0x80000000) != 0) {
                goto LABEL_360;
              }
            }
          }
          else
          {
            uint64_t v65 = (char *)v298;
            unsigned __int8 *v298 = v59;
          }
          unsigned __int8 v70 = *v65;
          *uint64_t v65 = 0;
          HIWORD(v302) = 0;
          uint64_t v71 = (*(uint64_t (**)(void, void, char *, uint64_t, const char *, const char *, uint64_t *, char *))(*(void *)(a1 + 64) + 120))(*(void *)(a1 + 48), *(void *)(a1 + 56), v43, 20, "femwtn", "", &v303, (char *)&v302 + 2);
          if ((v71 & 0x80000000) != 0)
          {
            uint64_t Langs = v71;
LABEL_360:
            uint64_t inserted = Langs;
LABEL_364:
            uint64_t v26 = (char *)v279;
            goto LABEL_365;
          }
          if (!HIWORD(v302)) {
            goto LABEL_102;
          }
          unint64_t v75 = 0;
          do
          {
            v310[v75] = LH_atou(*(const char **)(v303 + 8 * v75));
            ++v75;
          }
          while (v75 < HIWORD(v302));
          ssft_qsort((uint64_t)v310, HIWORD(v302), 1, (uint64_t (*)(unint64_t, unint64_t))compare_2);
          if (!HIWORD(v302))
          {
LABEL_102:
            unsigned int v82 = v298;
            unsigned __int8 *v298 = v70;
            unsigned int v83 = v296;
            v308[0] = 0;
            v308[1] = 0;
            *(void *)((char *)v309 + 6) = 0;
            v309[0] = 0;
            uint64_t v84 = *(void *)(a1 + 1088);
            *(void *)&__c[3] = 0;
            __c[0] = 0;
            unsigned __int8 v289 = *v82;
            unsigned __int8 v85 = *v296;
            int v306 = 0;
            unsigned __int8 *v82 = 0;
            *unsigned int v83 = 0;
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID word lookup : %s", v72, v73, v74, (uint64_t)v43);
            *(_WORD *)&__c[1] = 1;
            uint64_t Langs = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *, void))(*(void *)(a1 + 64) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), "ml2", __s, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
            if ((Langs & 0x80000000) != 0)
            {
              a6 = v278;
              int v44 = v285;
              goto LABEL_120;
            }
            unsigned __int8 v268 = v85;
            int v276 = v82;
            a6 = v278;
            int v44 = v285;
            if (*(_WORD *)&__c[1]) {
              goto LABEL_107;
            }
            if (cstdlib_strcmp(v43, __s))
            {
              *(_WORD *)&__c[1] = 1;
              uint64_t Langs = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *, void))(*(void *)(a1 + 64) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), "ml2", v43, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 2040));
              if ((Langs & 0x80000000) != 0)
              {
LABEL_120:
                unsigned int v288 = 1;
                if ((Langs & 0x80000000) != 0) {
                  goto LABEL_360;
                }
                goto LABEL_121;
              }
            }
            if (*(_WORD *)&__c[1])
            {
LABEL_107:
              uint64_t v86 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
              if (v86) {
                *uint64_t v86 = 0;
              }
              if (cstdlib_strcmp(**(const char ***)&__c[3], "all"))
              {
                unsigned int v90 = *(unsigned __int16 *)(a1 + 1928);
                if (*(_WORD *)(a1 + 1928))
                {
                  uint64_t v91 = 0;
                  unint64_t v92 = 0;
                  do
                  {
                    if (!cstdlib_strcmp((const char *)(*(void *)(a1 + 1936) + v91), **(const char ***)&__c[3])) {
                      break;
                    }
                    ++v92;
                    v91 += 8;
                  }
                  while (v92 < *(unsigned __int16 *)(a1 + 1928));
                  unsigned int v90 = (unsigned __int16)v92;
                }
                *(_DWORD *)(a1 + ((unint64_t)(unsigned __int16)v285 << 9) + 4 * v90 + 3084) = 1;
                *int v271 = v90;
                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML2 lexicon: %s", v87, v88, v89, *(void *)(a1 + 1944) + 8 * v90);
                *int v276 = v289;
                *unsigned int v83 = v268;
                goto LABEL_120;
              }
              *int v271 = -3;
              uint64_t Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v84 + 8), (void *)(a1 + ((unint64_t)(unsigned __int16)v285 << 9) + 3084), (uint64_t)v308);
              if ((Langs & 0x80000000) != 0) {
                goto LABEL_120;
              }
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML2 lexicon", v93, v94, v95, v261);
LABEL_119:
              *int v276 = v289;
              *unsigned int v83 = v268;
              calcWPenalties((void *)a1, (unsigned __int16)v285, 0, v96, v97, v98, v99, v100, v262);
              goto LABEL_120;
            }
            *(_WORD *)&__c[1] = 0;
            uint64_t v264 = 0;
            uint64_t Langs = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *, void))(*(void *)(a1 + 64) + 240))(*(void *)(a1 + 48), *(void *)(a1 + 56), "tn", v43, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 135960));
            if ((Langs & 0x80000000) != 0) {
              goto LABEL_120;
            }
            if (*(_WORD *)&__c[1])
            {
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID TN word : %s", v116, v117, v118, (uint64_t)v43);
              *int v271 = -3;
              uint64_t Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v84 + 8), (void *)(a1 + ((unint64_t)(unsigned __int16)v285 << 9) + 3084), (uint64_t)v308);
              if ((Langs & 0x80000000) != 0) {
                goto LABEL_120;
              }
              goto LABEL_119;
            }
            if (*v43)
            {
              BOOL v131 = 1;
              uint64_t v132 = v43;
              do
              {
                if (!v131) {
                  goto LABEL_189;
                }
                unsigned int v133 = cstdlib_strlen(v132);
                int v134 = utf8_BelongsToSet(6u, v132, 0, v133);
                BOOL v131 = v134 == 0;
                v132 += (int)Utf8_LengthInBytes((unsigned __int8 *)v132, 1);
              }
              while (*v132);
              if (v134)
              {
LABEL_189:
                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID digit word : %s", v116, v117, v118, (uint64_t)v43);
                int v267 = 1;
                goto LABEL_190;
              }
              int v267 = 0;
LABEL_190:
              if (*v43)
              {
                int v135 = 1;
                uint64_t v136 = v43;
                do
                {
                  if (!v135)
                  {
                    LODWORD(v137) = 0;
                    goto LABEL_201;
                  }
                  unsigned int v137 = utf8_strchr(*(char **)(a1 + 135968), v136);
                  if (!v137) {
                    int v135 = 0;
                  }
                  v136 += (int)Utf8_LengthInBytes((unsigned __int8 *)v136, 1);
                }
                while (*v136);
                if (v137) {
                  goto LABEL_199;
                }
LABEL_201:
                uint64_t v266 = v83;
                if (*__s)
                {
                  uint64_t v138 = (unsigned __int8 *)__s;
                  while (lidword_IsUppercase((char *)v138) || utf8_strchr(*(char **)(a1 + 135984), (const char *)v138))
                  {
                    v138 += (int)Utf8_LengthInBytes(v138, 1);
                    if (!*v138) {
                      goto LABEL_206;
                    }
                  }
                  int v139 = 0;
                }
                else
                {
LABEL_206:
                  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID acronym word : %s", v116, v117, v118, (uint64_t)__s);
                  int v139 = 1;
                }
                if (*v43)
                {
                  unsigned __int16 v140 = 0;
                  uint64_t v141 = (unsigned __int8 *)v43;
                  while (utf8_strchr(*(char **)(a1 + 135992), (const char *)v141)
                       || utf8_strchr(*(char **)(a1 + 135984), (const char *)v141))
                  {
                    v141 += (int)Utf8_LengthInBytes(v141, 1);
                    ++v140;
                    if (!*v141)
                    {
                      if (v140 < 4u) {
                        break;
                      }
                      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID consonant word : %s", v142, v143, v144, (uint64_t)v43);
                      int v145 = 1;
                      goto LABEL_215;
                    }
                  }
                }
                int v145 = 0;
LABEL_215:
                uint64_t v146 = cstdlib_strchr(v43, 64);
                if (!v146 || !cstdlib_strchr(v146, 46))
                {
                  uint64_t v151 = 1u;
                  int v152 = "http";
                  while (!cstdlib_strstr(v43, v152))
                  {
                    int v152 = szURL[v151++];
                    if (v151 == 15)
                    {
                      int v150 = 0;
                      goto LABEL_222;
                    }
                  }
                }
                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID URL or EMail : %s", v147, v148, v149, (uint64_t)v43);
                int v150 = 1;
LABEL_222:
                if (v267) {
                  int v153 = 1;
                }
                else {
                  int v153 = (int)v137;
                }
                if (((v153 | v139) & 1) != 0 || v150 | v145)
                {
                  *int v271 = *(unsigned __int16 *)(a1 + 1930);
                  *int v276 = v289;
                  *uint64_t v266 = v268;
                  int v44 = v285;
                  if ((_WORD)v285)
                  {
                    uint64_t v163 = (unsigned __int16)v285 - 1;
                    if (*(_DWORD *)(a1 + 4 * v163 + 134156) == *(unsigned __int16 *)(a1 + 1930)) {
                      cstdlib_memcpy((void *)(a1 + 3084 + ((unint64_t)(unsigned __int16)v285 << 9)), (const void *)(a1 + 3084 + (v163 << 9)), 0x200uLL);
                    }
                  }
                }
                else
                {
                  uint64_t v154 = (_DWORD *)(a1 + ((unint64_t)(unsigned __int16)v285 << 9) + 3084);
                  uint64_t Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v84 + 8), v154, (uint64_t)v308);
                  int v44 = v285;
                  if ((Langs & 0x80000000) == 0)
                  {
                    if (lidword_OutOfLID2(a1, (unsigned __int16)v285))
                    {
                      *int v271 = *(unsigned __int16 *)(a1 + 1930);
                      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID fallback to the main language (language code is not in LID2 subset): %s", v157, v158, v159, (uint64_t)v43);
                      *int v276 = v289;
                      *uint64_t v266 = v268;
                      uint64_t v160 = (void *)a1;
                      unsigned int v161 = (unsigned __int16)v285;
                      goto LABEL_230;
                    }
                    if (*(void *)(a1 + 136016))
                    {
                      uint64_t v164 = *(unsigned __int16 *)(v84 + 8);
                      if (*(_WORD *)(v84 + 8))
                      {
                        do
                        {
                          if (*v154++) {
                            goto LABEL_249;
                          }
                        }
                        while (--v164);
                      }
                      uint64_t Langs = lidmde_FindLangs(a1, (uint64_t)v43, (__int16)v276, __s, (__int16)v266, v311, &v306, v159);
                      if ((Langs & 0x80000000) != 0)
                      {
                        a6 = v278;
                        int v44 = v285;
                        goto LABEL_120;
                      }
                      if (v306)
                      {
                        *int v271 = *(unsigned __int16 *)(a1 + 1930);
                        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) fallback to the main language (language code is not in LID2 subset): %s", v166, v167, v168, (uint64_t)v43);
                      }
                      else
                      {
                        int v169 = lidmde_SingleLang((uint64_t)v311, *(unsigned __int16 *)(a1 + 1928));
                        if (v169 < 0)
                        {
                          if (!lidmde_MainLangPlusSomeOtherLangs(v311, *(unsigned __int16 *)(a1 + 1930), *(unsigned __int16 *)(a1 + 1928)))goto LABEL_249; {
                          *int v271 = -3;
                          }
                          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) found ambiguously", v157, v158, v159, v264);
                        }
                        else
                        {
                          *int v271 = (unsigned __int16)v169;
                          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) found unambiguously: %s", v170, v171, v172, *(void *)(a1 + 1944) + 8 * (unsigned __int16)v169);
                        }
                      }
                      *int v276 = v289;
                      *uint64_t v266 = v268;
                      int v44 = v285;
                      unsigned int v161 = (unsigned __int16)v285;
                      uint64_t v160 = (void *)a1;
LABEL_230:
                      int v162 = 0;
                    }
                    else
                    {
LABEL_249:
                      *int v276 = v289;
                      *uint64_t v266 = v268;
                      int v44 = v285;
                      unsigned int v161 = (unsigned __int16)v285;
                      uint64_t v160 = (void *)a1;
                      int v162 = 1;
                    }
                    calcWPenalties(v160, v161, v162, v155, v156, v157, v158, v159, v264);
                  }
                }
                a6 = v278;
                goto LABEL_120;
              }
            }
            else
            {
              int v267 = 0;
            }
LABEL_199:
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID punctuation word : %s", v116, v117, v118, (uint64_t)v43);
            LODWORD(v137) = 1;
            goto LABEL_201;
          }
          uint64_t v76 = 0;
          while (1)
          {
            unsigned __int8 *v298 = v70;
            int v77 = v43;
            if (*v43)
            {
              int v77 = v43;
              do
              {
                unsigned int v78 = cstdlib_strlen(v77);
                if (utf8_BelongsToSet(0, v77, 0, v78)) {
                  break;
                }
                v77 += (int)Utf8_LengthInBytes((unsigned __int8 *)v77, 1);
              }
              while (*v77);
            }
            unsigned int v300 = v77;
            char v79 = *v77;
            unsigned int v80 = v310[v76];
            if (*v77 && v80 >= 2)
            {
              unsigned __int16 v81 = 1;
              do
              {
                lidword_AdvanceToEndMultiword(&v300);
                ++v81;
                int v77 = v300;
                char v79 = *v300;
                unsigned int v80 = v310[v76];
              }
              while (*v300 && v80 > v81);
            }
            else
            {
              unsigned __int16 v81 = 1;
            }
            if (v80 == v81)
            {
              *int v77 = 0;
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID TN multi word lookup : %s", v72, v73, v74, (uint64_t)v43);
              LOWORD(v302) = 0;
              uint64_t Langs = (*(uint64_t (**)(void, void, const char *, char *, uint64_t *, int *, char *, void, void))(*(void *)(a1 + 64) + 240))(*(void *)(a1 + 48), *(void *)(a1 + 56), "tn", v43, &v303, &v302, &v301, *(unsigned __int8 *)(a1 + 135960), 0);
              if ((Langs & 0x80000000) != 0) {
                goto LABEL_360;
              }
              *int v77 = v79;
              if ((unsigned __int16)v302 == 1) {
                break;
              }
            }
            if (++v76 >= (unint64_t)HIWORD(v302)) {
              goto LABEL_102;
            }
          }
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID TN multi word : %s", v72, v73, v74, (uint64_t)v43);
          if (v310[v76])
          {
            unint64_t v109 = 0;
            __sa = (char *)v298;
            uint64_t v110 = (char *)(v270 + ((unint64_t)(unsigned __int16)v285 << 9));
            while (1)
            {
              *(_DWORD *)(v269 + 4 * (unsigned __int16)v285 + 4 * v109) = -3;
              uint64_t Langs = calcWScore(a1, (uint64_t)v43, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v275 + 8), v110, (uint64_t)v304);
              if ((Langs & 0x80000000) != 0) {
                goto LABEL_360;
              }
              char *__sa = v70;
              calcWPenalties((void *)a1, (unsigned __int16)(v285 + v109++), 0, v111, v112, v113, v114, v115, v263);
              v110 += 512;
              if (v109 >= v310[v76])
              {
                unsigned int v288 = v310[v76];
                goto LABEL_147;
              }
            }
          }
          unsigned int v288 = 0;
LABEL_147:
          if (*v296)
          {
            unsigned int v119 = 1;
            do
            {
              if (v119 >= v310[v76]) {
                break;
              }
              lidword_AdvanceToEndMultiword((char **)&v296);
              ++v119;
            }
            while (*v296);
          }
          v298 = (unsigned __int8 *)v77;
          a6 = v278;
          int v44 = v285;
          if ((Langs & 0x80000000) != 0) {
            goto LABEL_360;
          }
        }
LABEL_121:
        lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v299, &v298);
        lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v297, &v296);
        v44 += v288;
        size_t v42 = v298;
        uint64_t v43 = (char *)v299;
        if (v298 == v299) {
          goto LABEL_273;
        }
      }
    }
    uint64_t v173 = 0;
    unsigned __int16 v174 = 0;
    while (1)
    {
      uint64_t v175 = &v26[v173];
      if (v26[v173] < 0)
      {
        unsigned int v178 = v26[v173];
      }
      else
      {
        unsigned int v176 = cstdlib_strlen(&v26[v173]);
        if (!utf8_BelongsToSet(0, &v26[v173], 0, v176) && v26[v173 + 1] >= 0x81u)
        {
          unsigned int v177 = cstdlib_strlen(&v26[v173 + 1]);
          if (!utf8_BelongsToSet(0, &v26[v173 + 1], 0, v177))
          {
LABEL_266:
            int v181 = v175 + 2;
            int v182 = v175 + 1;
            size_t v183 = cstdlib_strlen(v182);
            cstdlib_memmove(v181, v182, v183 + 1);
            uint64_t v184 = v174 + 1;
            v26[v184] = 32;
            unsigned int v185 = *a6;
            if (*a6)
            {
              unsigned __int16 v186 = 0;
              uint64_t v187 = *a4;
              do
              {
                uint64_t v188 = (_DWORD *)(v187 + 12 + 32 * v186);
                if (*v188 - *(_DWORD *)(v187 + 12) > v184)
                {
                  ++*v188;
                  unsigned int v185 = *a6;
                }
                ++v186;
              }
              while (v185 > v186);
            }
            goto LABEL_262;
          }
        }
        unsigned int v178 = *v175;
      }
      if (v178 >= 0x81)
      {
        unsigned int v179 = cstdlib_strlen(&v26[v173]);
        if (!utf8_BelongsToSet(0, &v26[v173], 0, v179) && (v26[v173 + 1] & 0x80000000) == 0)
        {
          unsigned int v180 = cstdlib_strlen(&v26[v173 + 1]);
          if (!utf8_BelongsToSet(0, &v26[v173 + 1], 0, v180)) {
            goto LABEL_266;
          }
        }
      }
LABEL_262:
      uint64_t v173 = ++v174;
      if (cstdlib_strlen(v26) - 1 <= v174) {
        goto LABEL_25;
      }
    }
  }
  unsigned __int16 v30 = 1;
  while (1)
  {
    int v31 = *(_DWORD *)(*a4 + 32 * v30);
    if (v31 == 7 || v31 == 40) {
      break;
    }
    if (*a6 <= ++v30) {
      goto LABEL_23;
    }
  }
LABEL_8:
  uint64_t inserted = 0;
  unsigned __int16 v27 = 0;
LABEL_9:
  unsigned int v28 = 0;
LABEL_10:
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v26);
  if (v27) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v27);
  }
  if (v28) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v28);
  }
  return inserted;
}

uint64_t lidword_normalizedDup(uint64_t a1, char *a2, unsigned int a3, _WORD *a4, int a5)
{
  uint64_t v5 = a4;
  uint64_t v45 = *MEMORY[0x263EF8340];
  a4[4] = 0;
  __s2[0] = 0;
  uint64_t result = heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), (4 * a3) | 1);
  if (result)
  {
    if (a3)
    {
      int v10 = 0;
      unsigned __int16 v11 = 0;
      unsigned __int16 v12 = 0;
      uint64_t v37 = result;
      uint64_t v38 = 0;
      int v41 = 0;
      int v42 = 0;
      unsigned int v13 = 0;
      uint64_t v36 = a1;
      uint64_t v14 = a1 + 135168;
      uint64_t v15 = (char *)result;
      uint64_t v16 = (char **)(v14 + 800);
      size_t v17 = __s2;
      if (!a5) {
        size_t v17 = __dst;
      }
      __src = v17;
      unsigned int v39 = a3;
      BOOL v40 = 1;
      while (1)
      {
        int v18 = &a2[v13];
        if (utf8_strchr(*v16, v18)) {
          break;
        }
        unsigned int v20 = cstdlib_strlen(&a2[v13]);
        if (!utf8_BelongsToSet(0, &a2[v13], 0, v20))
        {
          if (v12)
          {
            uint64_t v23 = (unsigned __int16)v5[4];
            if (v23 > 9) {
              goto LABEL_56;
            }
            if (v40)
            {
              if ((unint64_t)&v15[-v37 - v38 - v12 - v11 - 2] < 3)
              {
LABEL_55:
                v5[4] = v23 + 1;
                v5[v23 + 5] = v38;
                goto LABEL_56;
              }
            }
            else if (v41)
            {
              goto LABEL_56;
            }
            if (v42 | v10) {
              goto LABEL_55;
            }
LABEL_56:
            unsigned __int16 v11 = 0;
            uint64_t v38 = (unsigned __int16)((_WORD)v15 - v37);
            ++*v5;
            if (!v41 || v42)
            {
              BOOL v40 = 1;
              int v25 = 0;
              int v24 = 0;
            }
            else
            {
              int v25 = 0;
              int v24 = 0;
              unsigned __int16 v11 = 0;
              ++v5[1];
              BOOL v40 = 1;
            }
          }
          else
          {
            int v25 = v41;
            int v24 = v42;
          }
          unsigned int v26 = cstdlib_strlen(&a2[v13]);
          int v27 = utf8_BelongsToSet(6u, &a2[v13], 0, v26);
          if (!v27) {
            int v25 = 1;
          }
          int v41 = v25;
          if (v27) {
            int v24 = 1;
          }
          unsigned int v28 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v18);
          int v42 = v24;
          if (v28 < 2)
          {
            int v29 = *(unsigned __int8 *)v18;
            if (a5) {
              LOBYTE(v29) = ssft_tolower(v29);
            }
            *uint64_t v15 = v29;
            BOOL v40 = v40
               && ((unsigned int v30 = cstdlib_strlen(&a2[v13]), utf8_BelongsToSet(6u, &a2[v13], 0, v30))
                || *v15 != *v18);
            unsigned __int16 v12 = 0;
            int v10 = 0;
            ++v15;
            unsigned int v21 = 1;
          }
          else
          {
            unsigned int v21 = v28;
            __s2[0] = 0;
            cstdlib_strncpy(__dst, &a2[v13], v28);
            __dst[v21] = 0;
            utf8_ToLower(__dst, 0, (uint64_t)__s2);
            BOOL v40 = v40 && cstdlib_strcmp(__dst, __s2);
            cstdlib_strcpy(v15, __src);
            unsigned __int16 v12 = 0;
            int v10 = 0;
            v15 += cstdlib_strlen(__src);
          }
          goto LABEL_29;
        }
        *v15++ = 32;
        unsigned int v21 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v18);
        ++v12;
LABEL_29:
        v13 += v21;
        if (v13 >= v39)
        {
          unsigned int v31 = (unsigned __int16)v5[4];
          if (v31 >= 0xA)
          {
            uint64_t result = v37;
          }
          else
          {
            uint64_t result = v37;
            if (v40)
            {
              uint64_t v32 = v38;
              goto LABEL_99;
            }
            LOWORD(v32) = v38;
            if (!v41)
            {
              int v41 = 0;
              goto LABEL_100;
            }
          }
LABEL_103:
          int v33 = v42;
LABEL_104:
          ++*v5;
          if (v41 && !v33)
          {
            ++v5;
            goto LABEL_108;
          }
          goto LABEL_109;
        }
      }
      if (!v12)
      {
        uint64_t v22 = v36;
        goto LABEL_27;
      }
      uint64_t v19 = (unsigned __int16)v5[4];
      if (v19 <= 9)
      {
        if (v40)
        {
          if ((unint64_t)&v15[-v37 - v38 - v12 - v11 - 2] < 3) {
            goto LABEL_22;
          }
        }
        else if (v41)
        {
          goto LABEL_23;
        }
        if (v42 | v10)
        {
LABEL_22:
          v5[4] = v19 + 1;
          v5[v19 + 5] = v38;
        }
      }
LABEL_23:
      unsigned __int16 v11 = 0;
      uint64_t v22 = v36;
      uint64_t v38 = (unsigned __int16)((_WORD)v15 - v37);
      ++*v5;
      if (!v41 || v42)
      {
        BOOL v40 = 1;
        int v41 = 0;
        int v42 = 0;
        int v10 = 0;
      }
      else
      {
        int v41 = 0;
        int v42 = 0;
        unsigned __int16 v11 = 0;
        int v10 = 0;
        ++v5[1];
        BOOL v40 = 1;
      }
LABEL_27:
      if (utf8_strchr(v16[1], &a2[v13]))
      {
LABEL_28:
        unsigned int v21 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v18);
        cstdlib_strncpy(v15, &a2[v13], v21);
        unsigned __int16 v12 = 0;
        ++v11;
        int v10 = 1;
        v15 += v21;
        goto LABEL_29;
      }
      if (!v13
        || lidword_CharAtOffsetSatisfies(v22, a2, v13, -1, (uint64_t (*)(uint64_t, char *))lidword_IsSpace)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, -1, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v22, a2, v13, -2, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22,
                            a2,
                            v13,
                            -2,
                            (uint64_t (*)(uint64_t, char *))lidword_IsSpace)))
      {
        if (!lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_IsSpace)|| !lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& lidword_CharAtOffsetSatisfies(v22,
                             a2,
                             v13,
                             2,
                             (uint64_t (*)(uint64_t, char *))lidword_IsPunc)
          || lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v22, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_IsSpace))|| lidword_CharAtOffsetSatisfies(v22,
                             a2,
                             v13,
                             1,
                             (uint64_t (*)(uint64_t, char *))lidword_IsPunc)
          && lidword_CharAtOffsetSatisfies(v22, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v22, a2, v13, 3, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, 3, (uint64_t (*)(uint64_t, char *))lidword_IsSpace)))
        {
          goto LABEL_28;
        }
        if (!v13) {
          goto LABEL_49;
        }
      }
      if (lidword_CharAtOffsetSatisfies(v22, a2, v13, -1, (uint64_t (*)(uint64_t, char *))lidword_IsSpace)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, -1, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v22, a2, v13, -2, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22,
                            a2,
                            v13,
                            -2,
                            (uint64_t (*)(uint64_t, char *))lidword_IsSpace))
        || !lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_IsSpace)|| !lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& lidword_CharAtOffsetSatisfies(v22,
                           a2,
                           v13,
                           2,
                           (uint64_t (*)(uint64_t, char *))lidword_IsPunc)
        || lidword_CharAtOffsetSatisfies(v22, a2, v13, 1, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v22, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_IsSpace))|| lidword_CharAtOffsetSatisfies(v22,
                           a2,
                           v13,
                           1,
                           (uint64_t (*)(uint64_t, char *))lidword_IsPunc)
        && lidword_CharAtOffsetSatisfies(v22, a2, v13, 2, (uint64_t (*)(uint64_t, char *))lidword_IsPunc)&& (!lidword_CharAtOffsetSatisfies(v22, a2, v13, 3, (uint64_t (*)(uint64_t, char *))lidword_True)|| lidword_CharAtOffsetSatisfies(v22, a2, v13, 3, (uint64_t (*)(uint64_t, char *))lidword_IsSpace)))
      {
LABEL_49:
        unsigned int v21 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v18);
        unsigned __int16 v12 = 0;
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    unsigned int v31 = (unsigned __int16)v5[4];
    if (v31 < 0xA)
    {
      int v41 = 0;
      int v42 = 0;
      uint64_t v32 = 0;
      unsigned __int16 v12 = 0;
      unsigned __int16 v11 = 0;
      int v10 = 0;
      uint64_t v15 = (char *)result;
LABEL_99:
      if ((unint64_t)&v15[-result - v32 - v12 - v11 - 2] >= 3)
      {
LABEL_100:
        int v33 = v42 | v10;
        if (!(v42 | v10)) {
          goto LABEL_104;
        }
      }
      v5[4] = v31 + 1;
      v5[v31 + 5] = v32;
      goto LABEL_103;
    }
    uint64_t v15 = (char *)result;
LABEL_108:
    ++*v5;
LABEL_109:
    *uint64_t v15 = 0;
  }
  return result;
}

void *lidword_InitStruct(uint64_t a1)
{
  cstdlib_memset((void *)(a1 + 3084), 0, 0x20000uLL);
  memset((void *)(a1 + 134156), 255, 0x400uLL);
  cstdlib_memset((void *)(a1 + 135180), 0, 0x100uLL);
  cstdlib_memset((void *)(a1 + 135436), 0, 0x100uLL);

  return cstdlib_memset((void *)(a1 + 135692), 0, 0x100uLL);
}

uint64_t lidword_CheckLangTags(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int *a4)
{
  int v5 = (int)a2;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  int v33 = a2;
  uint64_t result = (uint64_t)lidword_AdvanceSkippingSpacesInNormSW(&v33, &v32);
  unsigned __int16 v11 = v32;
  unsigned __int16 v12 = v33;
  if (v32 != v33)
  {
    unint64_t v13 = 0;
    while (1)
    {
      if (!*v12 || v13 > 0xFF) {
        return result;
      }
      uint64_t v14 = *a3;
      unsigned int v15 = *a4;
      int v16 = v12 - v5;
      if (*(_WORD *)(a1 + 2042) == 1)
      {
        if (!v16)
        {
          *(unsigned char *)(a1 + 3080) = 0;
          *(_DWORD *)(a1 + 3076) = 1;
          *(void *)(a1 + 2048) = 0;
          unsigned int v17 = *v12;
          if (*v12)
          {
            unsigned int v18 = 0;
            uint64_t v19 = v12 + 1;
            int v20 = 1;
            while ((v17 & 0x80) == 0)
            {
              if (v17 >= 0x21)
              {
                if (!v20)
                {
                  if (v18 != 255) {
                    *(unsigned char *)(a1 + 3080) = ++v18;
                  }
                  *(_DWORD *)(a1 + 4 * v18 + 2052) = 0;
                  unsigned int v17 = *(v19 - 1);
                }
                int v20 = 1;
                if (v17 - 48 <= 9) {
                  *(_DWORD *)(a1 + 4 * v18 + 2052) = 1;
                }
                goto LABEL_18;
              }
LABEL_19:
              unsigned int v21 = *v19++;
              unsigned int v17 = v21;
              if (!v21) {
                goto LABEL_20;
              }
            }
            int v20 = 0;
            *(_DWORD *)(a1 + 2048) = 1;
LABEL_18:
            *(_DWORD *)(a1 + 3076) = v20;
            goto LABEL_19;
          }
LABEL_20:
          *(unsigned char *)(a1 + 3080) = 0;
          *(_DWORD *)(a1 + 3076) = 1;
        }
        if (v12 < v11) {
          break;
        }
      }
LABEL_37:
      __dst[0] = 0;
      if (v15 >= 2)
      {
        unsigned __int16 v25 = 1;
        do
        {
          unsigned __int16 v26 = v25;
          if ((*(_DWORD *)(v14 + 12) + v16) < *(_DWORD *)(v14 + 32 * v25 + 12)) {
            break;
          }
          if (*(_DWORD *)(v14 + 32 * v25) == 36) {
            cstdlib_strncpy(__dst, *(const char **)(v14 + 32 * v25 + 24), 0x13uLL);
          }
          unsigned __int16 v25 = v26 + 1;
        }
        while (v15 > (unsigned __int16)(v26 + 1));
        if (__dst[0]
          && (!cstdlib_strstr(__dst, *(const char **)(a1 + 1912)) && !cstdlib_strstr(__dst, "normal")
           || cstdlib_strstr(__dst, "noautolid")))
        {
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID no auto lid from language tag", v27, v28, v29, v30);
          goto LABEL_48;
        }
      }
LABEL_49:
      uint64_t result = lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v33, &v32);
      ++v13;
      unsigned __int16 v11 = v32;
      unsigned __int16 v12 = v33;
      if (v32 == v33) {
        return result;
      }
    }
    char v22 = 0;
    while (1)
    {
      while ((char)*v12 < 0)
      {
        *(_DWORD *)(a1 + 3076) = 0;
        int v24 = "ML2 LID no auto lid for non latin ascii words";
LABEL_34:
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)v24, v8, v9, v10, v30);
        ++v12;
        char v22 = 1;
        if (v12 == v11) {
          goto LABEL_48;
        }
      }
      if (*v12 >= 0x21u)
      {
        if (!*(_DWORD *)(a1 + 3076))
        {
          int v23 = *(unsigned __int8 *)(a1 + 3080);
          if (v23 != 255) {
            *(unsigned char *)(a1 + 3080) = v23 + 1;
          }
        }
        *(_DWORD *)(a1 + 3076) = 1;
        if (*(_DWORD *)(a1 + 2048))
        {
          if (*(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 3080) + 2052))
          {
            int v24 = "ML2 LID no auto lid for latin ascii words in non latin sentence and with some digit context";
            goto LABEL_34;
          }
        }
      }
      if (++v12 == v11)
      {
        if ((v22 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_48:
        *(_DWORD *)(a1 + 4 * v13 + 134156) = -4;
        goto LABEL_49;
      }
    }
  }
  return result;
}

unsigned __int8 **lidword_AdvanceSkippingSpacesInNormSW(unsigned __int8 **result, unsigned __int8 **a2)
{
  uint64_t v3 = *result;
  if (**result)
  {
    uint64_t v4 = result;
    do
    {
      unsigned int v5 = cstdlib_strlen((const char *)v3);
      uint64_t result = (unsigned __int8 **)utf8_BelongsToSet(0, v3, 0, v5);
      uint64_t v3 = *v4;
      if (!result) {
        break;
      }
      uint64_t result = (unsigned __int8 **)Utf8_LengthInBytes(*v4, 1);
      uint64_t v3 = &(*v4)[(int)result];
      *uint64_t v4 = v3;
    }
    while (*v3);
  }
  while (1)
  {
    *a2 = v3;
    if (!*v3) {
      break;
    }
    unsigned int v6 = cstdlib_strlen((const char *)v3);
    uint64_t result = (unsigned __int8 **)utf8_BelongsToSet(0, v3, 0, v6);
    if (result) {
      break;
    }
    uint64_t result = (unsigned __int8 **)Utf8_LengthInBytes(*a2, 1);
    uint64_t v3 = &(*a2)[(int)result];
  }
  return result;
}

uint64_t lidword_AdvanceSkippingSpacesInNormEW(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v3 = (void *)result;
  for (uint64_t i = *a2; *i; *a2 = i)
  {
    unsigned int v5 = cstdlib_strlen((const char *)i);
    uint64_t result = utf8_BelongsToSet(0, i, 0, v5);
    uint64_t i = *a2;
    if (!result) {
      break;
    }
    uint64_t result = Utf8_LengthInBytes(*a2, 1);
    uint64_t i = &(*a2)[(int)result];
  }
  *uint64_t v3 = i;
  for (unsigned int j = *a2; *j; *a2 = j)
  {
    unsigned int v7 = cstdlib_strlen((const char *)j);
    uint64_t result = utf8_BelongsToSet(0, j, 0, v7);
    if (result) {
      break;
    }
    uint64_t result = Utf8_LengthInBytes(*a2, 1);
    unsigned int j = &(*a2)[(int)result];
  }
  return result;
}

uint64_t lidword_ExtractFeats(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v14 = 0;
  unsigned int v15 = a2;
  uint64_t result = (uint64_t)lidword_AdvanceSkippingSpacesInNormSW(&v15, &v14);
  int v6 = (int)v14;
  unsigned int v7 = (char *)v15;
  if (v14 != v15)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (char **)(a1 + 135968);
    int v10 = a3 - 1;
    do
    {
      if (!*v7 || v8 > 0xFF) {
        break;
      }
      int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v7, v6 - (int)v7);
      if (*v7)
      {
        if (lidword_IsUppercase(v7)) {
          *(unsigned char *)(a1 + v8 + 135180) = 1;
        }
        if (*v7 && utf8_strchr(*v9, v7))
        {
          *(unsigned char *)(a1 + v8 + 135436) = 1;
          if (v8) {
            *(unsigned char *)(a1 + (v8 - 1) + 135692) = 1;
          }
          unsigned __int16 v12 = (unsigned __int8 *)v7;
          if (*v7)
          {
            unsigned __int16 v12 = (unsigned __int8 *)v7;
            while (utf8_strchr(*v9, (const char *)v12))
            {
              v12 += (int)Utf8_LengthInBytes(v12, 1);
              if (!*v12) {
                goto LABEL_16;
              }
            }
            unsigned int v15 = v12;
            if (*v12 && lidword_IsUppercase((char *)v12)) {
              *(unsigned char *)(a1 + v8 + 135180) = 1;
            }
          }
          else
          {
LABEL_16:
            unsigned int v15 = v12;
          }
        }
      }
      unint64_t v13 = &v7[PreviousUtf8Offset];
      if (*v13 && utf8_strchr(*v9, v13))
      {
        *(unsigned char *)(a1 + v8 + 135692) = 1;
        if (v10 > (int)v8) {
          *(unsigned char *)(a1 + (v8 + 1) + 135436) = 1;
        }
      }
      uint64_t result = lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v15, &v14);
      ++v8;
      int v6 = (int)v14;
      unsigned int v7 = (char *)v15;
    }
    while (v14 != v15);
  }
  return result;
}

uint64_t lidword_Smoothing(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    unsigned __int16 v11 = (unsigned int *)(result + 134156);
    unsigned __int16 v12 = (unsigned int *)(result + 134160);
    uint64_t v13 = a2;
    uint64_t v14 = a2 - 1;
    do
    {
      unsigned int v15 = *v11;
      if (*v11 + 3 <= 1)
      {
        if (a2 == 1 || v10)
        {
          if (!v10
            || v14 != v10
            || ((unsigned int v18 = (unsigned int *)(v9 + 4 * (v10 - 1) + 134156),
                 *v18 != *(unsigned __int16 *)(v9 + 1930))
              ? (BOOL v19 = v15 == -2)
              : (BOOL v19 = 0),
                v19 ? (BOOL v20 = *v18 == -4) : (BOOL v20 = 1),
                v20))
          {
            if (!v10
              || v14 == v10
              || (unsigned int v18 = (unsigned int *)(v9 + 4 * (v10 - 1) + 134156),
                  unsigned int v21 = *v18,
                  *v18 == *(unsigned __int16 *)(v9 + 1930))
              || (v21 != -4 ? (BOOL v22 = v21 == v11[1]) : (BOOL v22 = 0), !v22))
            {
LABEL_30:
              log_OutText(*(void *)(*(void *)(v9 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID fallback on main language", a6, a7, a8, v23);
              unsigned int v15 = *(unsigned __int16 *)(v9 + 1930);
              *unsigned __int16 v11 = v15;
LABEL_34:
              uint64_t result = log_OutText(*(void *)(*(void *)(v9 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID final prediction : %s", a6, a7, a8, *(void *)(v9 + 1944) + 8 * v15);
              goto LABEL_35;
            }
          }
          unsigned int v17 = "ML2 LID smoothing with previous word";
        }
        else
        {
          if (*v12 == *(unsigned __int16 *)(v9 + 1930) || v15 != -2) {
            goto LABEL_30;
          }
          unsigned int v17 = "ML2 LID smoothing with next word";
          unsigned int v18 = v12;
          if ((*v12 & 0x80000000) != 0) {
            goto LABEL_30;
          }
        }
        uint64_t result = log_OutText(*(void *)(*(void *)(v9 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)v17, a6, a7, a8, v23);
        unsigned int v15 = *v18;
        *unsigned __int16 v11 = *v18;
      }
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_34;
      }
LABEL_35:
      ++v10;
      ++v11;
    }
    while (v13 != v10);
  }
  return result;
}

uint64_t lidword_InsertLangTags(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned int *a4, unsigned int *a5, int a6, uint64_t *a7, unsigned int *a8, unsigned int *a9)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v29 = (int)a2;
  uint64_t v30 = 0;
  unsigned int v31 = a2;
  lidword_AdvanceSkippingSpacesInNormSW(&v31, &v30);
  uint64_t v13 = v31;
  if (v30 != v31)
  {
    unint64_t v14 = 0;
    uint64_t inserted = 0;
    int v16 = 0;
    unsigned int v17 = 0;
    int v25 = a6 - 1;
    while (1)
    {
      if (!*v13 || v14 > 0xFF) {
        return inserted;
      }
      unsigned int v18 = (_DWORD *)(a1 + 4 * v14 + 134156);
      uint64_t v19 = *v18;
      if ((v19 & 0x80000000) == 0
        && v19 < *(unsigned __int16 *)(a1 + 1928)
        && !cstdlib_strstr((char *)(*(void *)(a1 + 1944) + 8 * v19), *(const char **)(a1 + 1912)))
      {
        cstdlib_strcpy(__dst, (const char *)(*(void *)(a1 + 1944) + 8 * (int)*v18));
        cstdlib_strcat(__dst, "_lid");
        if (*a5 >= 2)
        {
          uint64_t v20 = *a3;
          unsigned __int16 v21 = 1;
          do
          {
            if ((*(_DWORD *)(*a3 + 12) + v13 - v29) < *(_DWORD *)(v20 + 32 * v21 + 12)) {
              break;
            }
            if (*(_DWORD *)(v20 + 32 * v21) == 36) {
              unsigned int v17 = *(const char **)(v20 + 32 * v21 + 24);
            }
            ++v21;
          }
          while (*a5 > v21);
        }
        if (!v17) {
          unsigned int v17 = "normal";
        }
        if (cstdlib_strcmp(v17, __dst))
        {
          uint64_t appended = hlp_AppendItemRaw32(a1, a3, a4, a5, 0x20u, 10);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t inserted = lidword_InsertLangMarker(a1, *a3, *a5, (int)v31 - v29, __dst, 1, a7, a8, a9);
          int v16 = v17;
          if ((inserted & 0x80000000) != 0) {
            return inserted;
          }
        }
        else
        {
          uint64_t inserted = 0;
        }
        if (v25 == v14)
        {
          if (!v16) {
            goto LABEL_8;
          }
        }
        else
        {
          if (v25 <= (int)v14) {
            goto LABEL_8;
          }
          if (*v18 == *(_DWORD *)(a1 + 4 * (v14 + 1) + 134156) || v16 == 0) {
            goto LABEL_8;
          }
        }
        uint64_t appended = hlp_AppendItemRaw32(a1, a3, a4, a5, 0x20u, 10);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
        uint64_t inserted = lidword_InsertLangMarker(a1, *a3, *a5, (int)v30 - v29, v16, 0, a7, a8, a9);
        if ((inserted & 0x80000000) != 0) {
          return inserted;
        }
      }
LABEL_8:
      lidword_AdvanceSkippingSpacesInNormEW((uint64_t)&v31, &v30);
      ++v14;
      uint64_t v13 = v31;
      if (v30 == v31) {
        return inserted;
      }
    }
  }
  return 0;
}

size_t lidword_AdjustMarkersAtSpacesAroundAscii(const char *a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  size_t result = cstdlib_strlen(a1);
  if (result)
  {
    uint64_t v9 = 0;
    unsigned __int16 v10 = 0;
    int v11 = 0;
    do
    {
      if (a1[v9] == 32 && *(unsigned char *)(a2 + v10) != 32)
      {
        unsigned int v12 = *a4;
        if (*a4)
        {
          unsigned __int16 v13 = 0;
          uint64_t v14 = *a3;
          do
          {
            unsigned int v15 = (_DWORD *)(v14 + 12 + 32 * v13);
            if (*v15 - *(_DWORD *)(v14 + 12) > v10)
            {
              --*v15;
              unsigned int v12 = *a4;
            }
            ++v13;
          }
          while (v12 > v13);
        }
        ++v11;
      }
      ++v11;
      ++v10;
      uint64_t v9 = (unsigned __int16)v11;
      size_t result = cstdlib_strlen(a1);
    }
    while (result > (unsigned __int16)v11);
  }
  return result;
}

uint64_t lidword_Init(void *a1)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v1 = 2345672714;
  memset(v83, 0, 256);
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v74 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  *(_OWORD *)char __dst = 0u;
  memset(__c, 0, sizeof(__c));
  if (!a1) {
    return 2345672711;
  }
  uint64_t v3 = a1 + 16994;
  uint64_t v65 = 0;
  __s1 = 0;
  uint64_t v4 = a1[136];
  *((_OWORD *)a1 + 8498) = 0uLL;
  unsigned int v5 = (char **)(a1 + 16996);
  *(_OWORD *)(a1 + 17001) = 0uLL;
  int v6 = (char **)(a1 + 17001);
  *((_OWORD *)a1 + 8499) = 0uLL;
  *((_WORD *)a1 + 68000) = 0;
  *(_OWORD *)(a1 + 17003) = 0uLL;
  *((_DWORD *)a1 + 481) = 0;
  if ((paramc_ParamGetStr(*(void *)(a1[2] + 40), (uint64_t)"ml2lid", &__s1) & 0x80000000) == 0
    && __s1
    && !cstdlib_strcmp(__s1, "no")
    || (unsigned int v7 = (unsigned __int16 *)(a1 + 241),
        (lidword_GetU16Param(a1, (uint64_t)"nrlanguages", (_WORD *)a1 + 964) & 0x80000000) != 0))
  {
    U16Paraunsigned int m = -1949294572;
    goto LABEL_83;
  }
  *((_DWORD *)a1 + 481) = 1;
  *((_WORD *)a1 + 1012) = 21;
  U16Paraunsigned int m = lidword_GetU16Param(a1, (uint64_t)"maxwordlen", (_WORD *)a1 + 1012);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  *((_WORD *)a1 + 1013) = 100;
  U16Paraunsigned int m = lidword_GetU16Param(a1, (uint64_t)"embdim", (_WORD *)a1 + 1013);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  *((_WORD *)a1 + 1014) = 1;
  U16Paraunsigned int m = lidword_GetU16Param(a1, (uint64_t)"contextlength", (_WORD *)a1 + 1014);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  *((_WORD *)a1 + 1020) = 1;
  U16Paraunsigned int m = lidword_GetU16Param(a1, (uint64_t)"nrpart", (_WORD *)a1 + 1020);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  *((_WORD *)a1 + 1021) = 0;
  U16Paraunsigned int m = lidword_GetU16Param(a1, (uint64_t)"onlylatinascii", (_WORD *)a1 + 1021);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  *((_WORD *)a1 + 1022) = 0;
  U16Paraunsigned int m = lidword_GetU16Param(a1, (uint64_t)"spacesaroundascii", (_WORD *)a1 + 1022);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  *((_DWORD *)a1 + 508) = 1061997773;
  U16Paraunsigned int m = lidword_GetF32Param(a1, (uint64_t)"nnthreshold", (_DWORD *)a1 + 508);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  *((_DWORD *)a1 + 509) = 1064514355;
  U16Paraunsigned int m = lidword_GetF32Param(a1, (uint64_t)"ctxtnnthreshold", (_DWORD *)a1 + 509);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  __s1 = 0;
  U16Paraunsigned int m = lidword_GetTextParam(a1, (uint64_t)"punclist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  uint64_t v9 = __s1;
  if (!__s1)
  {
  }
  uint64_t v10 = *(void *)(a1[2] + 8);
  size_t v11 = cstdlib_strlen(v9);
  unsigned int v12 = (char *)heap_Alloc(v10, v11 + 1);
  *unsigned int v5 = v12;
  if (!v12) {
    goto LABEL_87;
  }
  cstdlib_strcpy(v12, __s1);
  __s1 = 0;
  U16Paraunsigned int m = lidword_GetTextParam(a1, (uint64_t)"punccurrencylist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  unsigned int v17 = __s1;
  if (!__s1)
  {
    unsigned int v17 = "€£$";
    __s1 = "€£$";
  }
  uint64_t v18 = *(void *)(a1[2] + 8);
  size_t v19 = cstdlib_strlen(v17);
  uint64_t v20 = (char *)heap_Alloc(v18, v19 + 1);
  v3[3] = v20;
  if (!v20) {
    goto LABEL_87;
  }
  cstdlib_strcpy(v20, __s1);
  __s1 = 0;
  U16Paraunsigned int m = lidword_GetTextParam(a1, (uint64_t)"puncincludedlist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  unsigned __int16 v21 = __s1;
  if (!__s1)
  {
    unsigned __int16 v21 = ".&-/";
    __s1 = ".&-/";
  }
  uint64_t v22 = *(void *)(a1[2] + 8);
  size_t v23 = cstdlib_strlen(v21);
  int v24 = (char *)heap_Alloc(v22, v23 + 1);
  v3[4] = v24;
  if (!v24) {
    goto LABEL_87;
  }
  cstdlib_strcpy(v24, __s1);
  __s1 = 0;
  U16Paraunsigned int m = lidword_GetTextParam(a1, (uint64_t)"consonantlist", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  int v25 = __s1;
  if (!__s1)
  {
    int v25 = "bcdfghjklmnpqrstvwxzß";
    __s1 = "bcdfghjklmnpqrstvwxzß";
  }
  uint64_t v26 = *(void *)(a1[2] + 8);
  size_t v27 = cstdlib_strlen(v25);
  uint64_t v28 = (char *)heap_Alloc(v26, v27 + 1);
  v3[5] = v28;
  if (!v28) {
    goto LABEL_87;
  }
  cstdlib_strcpy(v28, __s1);
  *((_WORD *)v3 + 25) = 4;
  U16Paraunsigned int m = lidword_GetU16Param(a1, (uint64_t)"mdeminstemlen", (_WORD *)v3 + 25);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  __s1 = 0;
  U16Paraunsigned int m = lidword_GetTextParam(a1, (uint64_t)"mdestemvowels", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  int v29 = __s1;
  if (!__s1)
  {
    int v29 = "aeiouy";
    __s1 = "aeiouy";
  }
  uint64_t v30 = *(void *)(a1[2] + 8);
  size_t v31 = cstdlib_strlen(v29);
  uint64_t v32 = (char *)heap_Alloc(v30, v31 + 1);
  *int v6 = v32;
  if (!v32) {
    goto LABEL_87;
  }
  cstdlib_strcpy(v32, __s1);
  __s1 = 0;
  U16Paraunsigned int m = lidword_GetTextParam(a1, (uint64_t)"mdestemmingrules", &__s1);
  if ((U16Param & 0x80000000) != 0 && (U16Param & 0x1FFF) != 0x14) {
    goto LABEL_83;
  }
  if (__s1)
  {
    uint64_t v33 = *(void *)(a1[2] + 8);
    size_t v34 = cstdlib_strlen(__s1);
    uint64_t v35 = (char *)heap_Alloc(v33, v34 + 1);
    v3[8] = v35;
    if (!v35) {
      goto LABEL_87;
    }
    cstdlib_strcpy(v35, __s1);
    U16Paraunsigned int m = lidmde_ParseStemmingRules((uint64_t)a1);
    if ((U16Param & 0x80000000) != 0) {
      goto LABEL_83;
    }
  }
  uint64_t v36 = heap_Calloc(*(void **)(a1[2] + 8), *((unsigned __int16 *)a1 + 964), 8);
  a1[242] = v36;
  uint64_t v37 = a1[2];
  if (!v36) {
    goto LABEL_88;
  }
  uint64_t v38 = heap_Calloc(*(void **)(v37 + 8), *((unsigned __int16 *)a1 + 964), 8);
  a1[243] = v38;
  uint64_t v37 = a1[2];
  if (!v38) {
    goto LABEL_88;
  }
  uint64_t v39 = heap_Calloc(*(void **)(v37 + 8), *((unsigned __int16 *)a1 + 964), 2);
  a1[244] = v39;
  if (!v39)
  {
LABEL_87:
    uint64_t v37 = a1[2];
LABEL_88:
    log_OutPublic(*(void *)(v37 + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v62);
    U16Paraunsigned int m = -1949294582;
    goto LABEL_83;
  }
  int inited = lidword_InitLangParams((uint64_t)a1);
  if (inited < 0)
  {
    U16Paraunsigned int m = inited & (inited >> 31);
LABEL_83:
    if ((U16Param & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return U16Param;
    }
  }
  unsigned int v41 = *(unsigned __int16 *)(v4 + 8);
  if (*(_WORD *)(v4 + 8))
  {
    unint64_t v42 = 0;
    LODWORD(v43) = *v7;
    do
    {
      if (v43)
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          if (!cstdlib_strcmp((const char *)(*(void *)(v4 + 16) + 8 * v42), (const char *)(a1[242] + v44))) {
            *(_WORD *)(a1[244] + 2 * v45) = v42;
          }
          ++v45;
          unint64_t v43 = *v7;
          v44 += 8;
        }
        while (v45 < v43);
        unsigned int v41 = *(unsigned __int16 *)(v4 + 8);
      }
      ++v42;
    }
    while (v42 < v41);
  }
  uint64_t Interface = nn_word_lkp_GetInterface(1u, a1 + 245);
  if ((Interface & 0x80000000) != 0) {
    return Interface;
  }
  a1[246] = safeh_GetNullHandle();
  a1[247] = v47;
  a1[248] = safeh_GetNullHandle();
  a1[249] = v48;
  uint64_t Interface = (*(uint64_t (**)(void, void, const char *, void, void, void *))(a1[245] + 16))(a1[246], a1[247], "lid", *a1, a1[1], a1 + 248);
  if ((Interface & 0x80000000) != 0) {
    return Interface;
  }
  uint64_t Interface = (*(uint64_t (**)(void, void, void *))(a1[245] + 40))(a1[248], a1[249], a1 + 250);
  if ((Interface & 0x80000000) != 0) {
    return Interface;
  }
  log_OutText(*(void *)(a1[2] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"word2vec length %d", v49, v50, v51, *((unsigned int *)a1 + 500));
  uint64_t v52 = heap_Alloc(*(void *)(a1[2] + 8), 4 * *((unsigned int *)a1 + 500));
  a1[251] = v52;
  if (v52)
  {
    *((_WORD *)a1 + 1015) = (2 * *((_WORD *)a1 + 1014)) | 1;
    *(_WORD *)&__c[1] = -1;
    uint64_t Interface = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1[8] + 96))(a1[6], a1[7], "fecfg", "nrpart_tn", &__c[3], &__c[1], __c);
    if ((Interface & 0x80000000) != 0) {
      return Interface;
    }
    *((unsigned char *)v3 + 8) = 1;
    if (*(_WORD *)&__c[1])
    {
      unsigned int v57 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v57) {
        *unsigned int v57 = 0;
      }
      *((unsigned char *)v3 + 8) = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    }
    cstdlib_strcpy(__dst, "ml2rnn");
    cstdlib_strcat(__dst, (const char *)a1[239]);
    uint64_t Interface = brokeraux_ComposeBrokerString(a1[2], __dst, 1, 0, (char *)a1[239], 0, 0, v83, 0x100uLL);
    if ((Interface & 0x80000000) != 0) {
      return Interface;
    }
    uint64_t Interface = fi_init((_WORD *)*a1, a1[1], (_WORD *)a1[3], a1[4], &v65, 2, (uint64_t)v83, "FINN", 1, 0);
    if ((Interface & 0x80000000) == 0) {
      goto LABEL_79;
    }
    uint64_t Interface = brokeraux_ComposeBrokerString(a1[2], "ml2rnn", 1, 0, (char *)a1[239], 0, 0, v83, 0x100uLL);
    if ((Interface & 0x80000000) != 0) {
      return Interface;
    }
    uint64_t Interface = fi_init((_WORD *)*a1, a1[1], (_WORD *)a1[3], a1[4], &v65, 0, (uint64_t)v83, "FINN", 1, 0);
    if ((Interface & 0x80000000) != 0)
    {
      return 2345672704;
    }
    else
    {
LABEL_79:
      if (*(void *)(*(void *)v65 + 52) == __PAIR64__(*((unsigned __int16 *)a1 + 1012), 2)
        && *(_DWORD *)(*(void *)v65 + 60) == *((unsigned __int16 *)a1 + 1013)
                                               + *((unsigned __int16 *)a1 + 1015) * *((unsigned __int16 *)a1 + 964)
                                               + 3)
      {
        *uint64_t v3 = v65;
        return Interface;
      }
      log_OutText(*(void *)(a1[2] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"expected (%d, %d) got (%d, %d)", v58, v59, v60, *(unsigned int *)(*(void *)v65 + 56));
      return 2345672729;
    }
  }
  else
  {
    log_OutPublic(*(void *)(a1[2] + 32), (uint64_t)"FE_LID", 48000, 0, v53, v54, v55, v56, v63);
  }
  return v1;
}

uint64_t lidword_Deinit(uint64_t a1)
{
  if (!a1) {
    return 2345672711;
  }
  if (!*(_DWORD *)(a1 + 1924)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 1936);
  if (v2) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v2);
  }
  uint64_t v3 = *(void *)(a1 + 1944);
  if (v3) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v3);
  }
  uint64_t v4 = *(void *)(a1 + 1952);
  if (v4) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v4);
  }
  uint64_t v5 = *(void *)(a1 + 2008);
  if (v5) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v5);
  }
  uint64_t v6 = *(void *)(a1 + 1960);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(void, void))(v6 + 24))(*(void *)(a1 + 1984), *(void *)(a1 + 1992));
    if ((v7 & 0x80000000) != 0) {
      return v7;
    }
    *(void *)(a1 + 1960) = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = (uint64_t **)(a1 + 135952);
  uint64_t v9 = *(void *)(a1 + 2016);
  if (v9)
  {
    unsigned int v10 = *(unsigned __int16 *)(a1 + 2024);
    if (*(_WORD *)(a1 + 2024))
    {
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 2016) + 8 * v11);
        if (v12)
        {
          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v12);
          *(void *)(*(void *)(a1 + 2016) + 8 * v11) = 0;
          unsigned int v10 = *(unsigned __int16 *)(a1 + 2024);
        }
        ++v11;
      }
      while (v11 < v10);
      uint64_t v9 = *(void *)(a1 + 2016);
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v9);
    *(void *)(a1 + 2016) = 0;
  }
  if (*v8)
  {
    uint64_t v7 = fi_deinit(*(void *)(a1 + 16), *(void *)(a1 + 40), *v8);
    *unint64_t v8 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 135968);
  if (v13) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v13);
  }
  uint64_t v14 = *(void *)(a1 + 135976);
  if (v14) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v14);
  }
  uint64_t v15 = *(void *)(a1 + 135984);
  if (v15) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v15);
  }
  uint64_t v16 = *(void *)(a1 + 135992);
  if (v16) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v16);
  }
  uint64_t v17 = *(void *)(a1 + 136008);
  if (v17) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v17);
  }
  uint64_t v18 = *(void *)(a1 + 136016);
  if (v18) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v18);
  }
  uint64_t v19 = *(void *)(a1 + 136024);
  if (v19) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v19);
  }
  uint64_t v20 = *(void *)(a1 + 136032);
  if (v20) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v20);
  }
  *(_WORD *)(a1 + 1928) = 0;
  return v7;
}

uint64_t lidword_IsSpace(int a1, char *__s)
{
  unsigned int v3 = cstdlib_strlen(__s);

  return utf8_BelongsToSet(0, __s, 0, v3);
}

BOOL lidword_IsPunc(uint64_t a1, const char *a2)
{
  return utf8_strchr(*(char **)(a1 + 135968), a2) != 0;
}

uint64_t lidword_CharAtOffsetSatisfies(uint64_t a1, char *__s, unsigned int PreviousUtf8Offset, int a4, uint64_t (*a5)(uint64_t, char *))
{
  int v5 = a4;
  if (a4 < 0)
  {
    while (PreviousUtf8Offset)
    {
      int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, PreviousUtf8Offset);
      if (__CFADD__(v5++, 1))
      {
        unsigned int v9 = cstdlib_strlen(__s);
        goto LABEL_11;
      }
    }
    return 0;
  }
  unsigned int v9 = cstdlib_strlen(__s);
  if (v5)
  {
    int v10 = v5 + 1;
    while (PreviousUtf8Offset < v9)
    {
      int PreviousUtf8Offset = utf8_GetNextUtf8Offset(__s, PreviousUtf8Offset);
      if (--v10 <= 1) {
        goto LABEL_11;
      }
    }
    return 0;
  }
LABEL_11:
  if (PreviousUtf8Offset >= v9) {
    return 0;
  }

  return a5(a1, &__s[PreviousUtf8Offset]);
}

uint64_t lidword_True()
{
  return 1;
}

BOOL compare_2(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

char **lidword_AdvanceToEndMultiword(char **result)
{
  uint64_t v1 = *result;
  if (**result)
  {
    uint64_t v2 = (unsigned __int8 **)result;
    while (1)
    {
      unsigned int v3 = cstdlib_strlen(v1);
      size_t result = (char **)utf8_BelongsToSet(0, v1, 0, v3);
      uint64_t v4 = *v2;
      if (!result) {
        break;
      }
      size_t result = (char **)Utf8_LengthInBytes(*v2, 1);
      uint64_t v1 = (char *)&(*v2)[(int)result];
      *uint64_t v2 = (unsigned __int8 *)v1;
      if (!*v1) {
        return result;
      }
    }
    while (*v4)
    {
      unsigned int v5 = cstdlib_strlen((const char *)v4);
      size_t result = (char **)utf8_BelongsToSet(0, v4, 0, v5);
      if (result) {
        break;
      }
      size_t result = (char **)Utf8_LengthInBytes(*v2, 1);
      uint64_t v4 = &(*v2)[(int)result];
      *uint64_t v2 = v4;
    }
  }
  return result;
}

void *calcWPenalties(void *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v9 = *((unsigned __int16 *)result + 964);
  if (*((_WORD *)result + 964))
  {
    unint64_t v11 = result;
    uint64_t v12 = 0;
    __int16 v13 = 0;
    unsigned __int16 v14 = 0;
    uint64_t v15 = result[244];
    uint64_t v16 = a2;
    do
    {
      uint64_t v17 = (char *)&result[64 * (unint64_t)a2];
      int v18 = *(_DWORD *)&v17[4 * *(unsigned __int16 *)(v15 + 2 * v12) + 3084];
      BOOL v19 = v18 == 0;
      BOOL v20 = v18 != 0;
      if (!v19)
      {
        unsigned __int16 v14 = v12;
        ++v13;
      }
      __src[v12++] = v20;
    }
    while (v9 != v12);
    size_t result = memcpy(v17 + 3084, __src, 4 * v9);
    if (v13)
    {
      if (v13 == 1)
      {
        if (a3) {
          *((_DWORD *)v11 + v16 + 33539) = v14;
        }
        return (void *)log_OutText(*(void *)(v11[2] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found unambiguously in ML1 lexicon: %s", v21, v22, v23, v11[243] + 8 * v14);
      }
      else
      {
        uint64_t v24 = *(void *)(v11[2] + 32);
        return (void *)log_OutText(v24, (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID found ambiguously in ML1 lexicon", v21, v22, v23, a9);
      }
    }
  }
  return result;
}

uint64_t lidword_OutOfLID2(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 1088);
  uint64_t v3 = *(unsigned __int16 *)(v2 + 8);
  if (*(_WORD *)(v2 + 8))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    while (1)
    {
      if (*(_DWORD *)(a1 + ((unint64_t)a2 << 9) + 4 * v4 + 3084))
      {
        uint64_t v6 = *(unsigned __int16 *)(a1 + 1928);
        if (*(_WORD *)(a1 + 1928))
        {
          uint64_t v7 = *(unsigned __int16 **)(a1 + 1952);
          do
          {
            int v8 = *v7++;
            if (v4 == v8) {
              return 0;
            }
          }
          while (--v6);
        }
        uint64_t v5 = 1;
      }
      if (++v4 == v3) {
        return v5;
      }
    }
  }
  return 0;
}

BOOL lidword_IsUppercase(char *a1)
{
  unsigned int v2 = cstdlib_strlen(a1);
  return utf8_BelongsToSet(0x12u, a1, 0, v2)
      || utf8_BelongsToSet(0x15u, a1, 0, v2)
      || utf8_BelongsToSet(0x18u, a1, 0, v2)
      || utf8_BelongsToSet(0x1Bu, a1, 0, v2)
      || utf8_BelongsToSet(0x1Eu, a1, 0, v2) != 0;
}

uint64_t lidword_InsertLangMarker(uint64_t a1, uint64_t a2, int a3, int a4, const char *a5, int a6, uint64_t *a7, unsigned int *a8, unsigned int *a9)
{
  unsigned int v11 = a3 - 1;
  if (a6)
  {
    unsigned int v12 = *(_DWORD *)(a2 + 12) + a4;
    unsigned __int16 v13 = 1;
    if (v11 >= 2)
    {
      do
      {
        if (v12 < *(_DWORD *)(a2 + 32 * v13 + 12)) {
          break;
        }
        ++v13;
      }
      while (v11 > v13);
    }
    unsigned __int16 v14 = a5;
    uint64_t v15 = a1;
    unsigned __int16 i = v13 - (v12 == *(_DWORD *)(a2 + 32 * v13 + 12));
  }
  else
  {
    unsigned __int16 v14 = a5;
    uint64_t v15 = a1;
    if (v11 < 2)
    {
      unsigned __int16 i = 1;
    }
    else
    {
      for (unsigned __int16 i = 1; i < v11; ++i)
      {
        if ((*(_DWORD *)(a2 + 12) + a4) <= *(_DWORD *)(a2 + 32 * i + 12)) {
          break;
        }
      }
    }
  }
  uint64_t v17 = i;
  uint64_t v37 = i + 1;
  uint64_t v18 = i;
  BOOL v19 = (void *)(a2 + 32 * i);
  cstdlib_memmove((void *)(a2 + 32 * v37), v19, 32 * (v11 - i));
  unint64_t v20 = *a9;
  if (v20)
  {
    unint64_t v21 = 0;
    uint64_t v22 = *a7;
    do
    {
      unsigned int v23 = *(_DWORD *)(v22 + 4 * v21);
      if (v23 >= v17)
      {
        *(_DWORD *)(v22 + 4 * v21) = v23 + 1;
        unint64_t v20 = *a9;
      }
      ++v21;
    }
    while (v21 < v20);
  }
  uint64_t v24 = a7;
  *(_DWORD *)BOOL v19 = 36;
  uint64_t v25 = *(void *)(*(void *)(v15 + 16) + 8);
  int v26 = cstdlib_strlen(v14);
  size_t v27 = (char *)heap_Alloc(v25, (v26 + 1));
  v19[3] = v27;
  if (!v27)
  {
    log_OutPublic(*(void *)(*(void *)(v15 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v28, v29, v30, v31, v36);
    return 2345672714;
  }
  cstdlib_strcpy(v27, v14);
  *(void *)(a2 + 32 * v18 + 12) = (*(_DWORD *)(a2 + 12) + a4);
  if (v11 <= v17)
  {
    uint64_t v33 = (int)v17 - 1;
    goto LABEL_23;
  }
  unsigned int v32 = *(_DWORD *)(a2 + 32 * v37 + 4);
  uint64_t v33 = v17 - 1;
  if (v32 <= *(_DWORD *)(a2 + 32 * (v17 - 1) + 4)) {
LABEL_23:
  }
    unsigned int v32 = *(_DWORD *)(a2 + 32 * v33 + 4);
  uint64_t v35 = a2 + 32 * v18;
  *(_DWORD *)(v35 + 4) = v32;
  *(_DWORD *)(v35 + 8) = 0;
  uint64_t result = hlp_AppendItemRaw32(v15, v24, a8, a9, 4u, 10);
  if ((result & 0x80000000) == 0) {
    *(_DWORD *)(*v24 + 4 * (*a9 - 1)) = v17;
  }
  return result;
}

uint64_t lidword_GetU16Param(void *a1, uint64_t a2, _WORD *a3)
{
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(void, void, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      uint64_t v5 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v5) {
        *uint64_t v5 = 0;
      }
      *a3 = LH_atou(**(const char ***)&__c[3]);
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

uint64_t lidword_GetF32Param(void *a1, uint64_t a2, _DWORD *a3)
{
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(void, void, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      uint64_t v5 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v5) {
        *uint64_t v5 = 0;
      }
      cstdlib_atof(**(unsigned __int8 ***)&__c[3]);
      *(float *)&double v6 = v6;
      *a3 = LODWORD(v6);
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

uint64_t lidword_GetTextParam(void *a1, uint64_t a2, void *a3)
{
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(void, void, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      uint64_t v5 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v5) {
        *uint64_t v5 = 0;
      }
      *a3 = **(void **)&__c[3];
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

uint64_t lidword_InitLangParams(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __s1 = 0;
  cstdlib_strcpy(*(char **)(a1 + 1936), "ged");
  cstdlib_strcpy((char *)(*(void *)(a1 + 1936) + 8), "enx");
  if (*(_WORD *)(a1 + 1928) == 3) {
    cstdlib_strcpy((char *)(*(void *)(a1 + 1936) + 16), "frx");
  }
  LangParaunsigned int m = lidword_GetLangParam((void *)a1, "languages");
  if ((LangParam & 0x80000000) == 0 || (uint64_t v3 = LangParam, (LangParam & 0x1FFF) == 0x14))
  {
    *(_WORD *)(a1 + 1930) = 0;
    cstdlib_strcpy(*(char **)(a1 + 1944), "ged");
    cstdlib_strcpy((char *)(*(void *)(a1 + 1944) + 8), "eng");
    if (*(_WORD *)(a1 + 1928) == 3) {
      cstdlib_strcpy((char *)(*(void *)(a1 + 1944) + 16), "frf");
    }
    cstdlib_strcpy(__dst, "languages.");
    cstdlib_strcat(__dst, *(const char **)(a1 + 1912));
    uint64_t v4 = lidword_GetLangParam((void *)a1, __dst);
    uint64_t v3 = v4;
    if ((v4 & 0x80000000) == 0 || (v4 & 0x1FFF) == 0x14)
    {
      paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"extraesclang", &__s1);
      if (__s1) {
        AdjustLanguageGroupMappingLID2((char *)(a1 + 1928), __s1);
      }
    }
  }
  return v3;
}

uint64_t lidword_GetLangParam(void *a1, const char *a2)
{
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1[8] + 96))(a1[6], a1[7], "ml2cfg", a2, &__c[3], &__c[1], __c);
  if ((v4 & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      uint64_t v5 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v5) {
        *uint64_t v5 = 0;
      }
      double v6 = **(const char ***)&__c[3];
      uint64_t v7 = cstdlib_strchr(**(char ***)&__c[3], 44);
      if (v7)
      {
        unsigned __int16 v8 = 0;
        do
        {
          if (cstdlib_strcmp(a2, "languages")) {
            uint64_t v9 = 243;
          }
          else {
            uint64_t v9 = 242;
          }
          cstdlib_strncpy((char *)(a1[v9] + 8 * v8++), v6, (unsigned __int16)((_WORD)v7 - (_WORD)v6));
          double v6 = v7 + 1;
          uint64_t v7 = cstdlib_strchr(v7 + 1, 44);
        }
        while (v7);
        uint64_t v7 = (char *)v8;
      }
      int v10 = cstdlib_strcmp(a2, "languages");
      uint64_t v11 = 243;
      if (!v10) {
        uint64_t v11 = 242;
      }
      cstdlib_strcpy((char *)(a1[v11] + 8 * (void)v7), v6);
    }
    else
    {
      return 2345672724;
    }
  }
  return v4;
}

char *lid_make_language_group(char *a1, const char *a2)
{
  cstdlib_strcpy(a1, a2);
  uint64_t v4 = 0;
  a1[2] = 120;
  do
  {
    uint64_t result = (char *)cstdlib_strcmp(&FE_LID_LANG_2_LANG_GROUP[v4], a2);
    if (!result) {
      uint64_t result = cstdlib_strcpy(a1, &FE_LID_LANG_2_LANG_GROUP[v4 + 4]);
    }
    v4 += 8;
  }
  while (v4 != 32);
  return result;
}

uint64_t fe_lid_HlpClose(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v16 = a1;
  long long v15 = xmmword_26D2114A0;
  long long v17 = xmmword_26D2114A0;
  paramc_ListenerRemove(v2, "extraesclang", (long long *)&v16);
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v16 = a1;
  long long v17 = v15;
  paramc_ListenerRemove(v3, "lidlanguages", (long long *)&v16);
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v16 = a1;
  long long v17 = v15;
  paramc_ListenerRemove(v4, "lidscope", (long long *)&v16);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v16 = a1;
  long long v17 = v15;
  paramc_ListenerRemove(v5, "lidmode", (long long *)&v16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v16 = a1;
  long long v17 = v15;
  paramc_ListenerRemove(v6, "lidvoiceswitch", (long long *)&v16);
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v16 = a1;
  long long v17 = v15;
  paramc_ListenerRemove(v7, "membiasedrejectparam1", (long long *)&v16);
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 40);
  uint64_t v16 = a1;
  long long v17 = v15;
  paramc_ListenerRemove(v8, "membiasedrejectparam2", (long long *)&v16);
  uint64_t v9 = *(void *)(a1 + 1880);
  if (v9)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v9);
    *(void *)(a1 + 1880) = 0;
  }
  uint64_t v10 = *(void *)(a1 + 1024);
  if (v10)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v10);
    *(void *)(a1 + 1024) = 0;
  }
  uint64_t v11 = *(void *)(a1 + 1072);
  if (v11)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v11);
    *(void *)(a1 + 1072) = 0;
  }
  uint64_t v12 = *(void *)(a1 + 1904);
  if (v12)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v12);
    *(void *)(a1 + 1904) = 0;
  }
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v13);
    *(void *)(a1 + 1120) = 0;
    *(_WORD *)(a1 + 1112) = 0;
  }
  lid_Deinit(a1);
  return lidword_Deinit(a1);
}

uint64_t fe_lid_ParamCheckChange(int a1, char *__s1, char *a3, _DWORD *a4)
{
  if (!cstdlib_strcmp(__s1, "lidscope"))
  {
    if (LH_stricmp(a3, "none"))
    {
      uint64_t v7 = "user-defined";
      goto LABEL_25;
    }
    goto LABEL_28;
  }
  if (!cstdlib_strcmp(__s1, "lidmode"))
  {
    if (LH_stricmp(a3, "rejection")
      && LH_stricmp(a3, "memory-bias")
      && LH_stricmp(a3, "bias-mlset"))
    {
      uint64_t v7 = "forced-choice";
      goto LABEL_25;
    }
LABEL_28:
    uint64_t v8 = 0;
    goto LABEL_29;
  }
  if (!cstdlib_strcmp(__s1, "lidlanguages"))
  {
    if (a3 && *a3)
    {
      uint64_t v8 = 2345672719;
      cstdlib_strlen(a3);
      uint64_t v9 = 0;
      unsigned int v10 = 1;
      while (1)
      {
        int v11 = a3[v9];
        if ((v10 & 3) != 0)
        {
          if ((v11 & 0xFFFFFFDF) - 91 < 0xFFFFFFE6) {
            goto LABEL_29;
          }
        }
        else if (a3[v9] && v11 != 44)
        {
          goto LABEL_29;
        }
        uint64_t v9 = v10;
        if (cstdlib_strlen(a3) < v10++) {
          goto LABEL_28;
        }
      }
    }
    goto LABEL_28;
  }
  if (cstdlib_strcmp(__s1, "lidvoiceswitch"))
  {
    if (cstdlib_strcmp(__s1, "membiasedrejectparam1")) {
      cstdlib_strcmp(__s1, "membiasedrejectparam2");
    }
    goto LABEL_28;
  }
  if (!LH_stricmp(a3, "yes")) {
    goto LABEL_28;
  }
  uint64_t v7 = "no";
LABEL_25:
  if (LH_stricmp(a3, v7)) {
    uint64_t v8 = 2345672719;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_29:
  *a4 = (int)v8 >= 0;
  return v8;
}

uint64_t fe_lid_ParamLearnChange(uint64_t a1, char *__s1, char *a3)
{
  if (!cstdlib_strcmp(__s1, "lidscope"))
  {
    uint64_t result = LH_stricmp(a3, "none");
    if (!result)
    {
      *(_DWORD *)(a1 + 1004) = 0;
      return result;
    }
    uint64_t result = LH_stricmp(a3, "user-defined");
    if (result)
    {
      uint64_t result = LH_stricmp(a3, "message");
      if (result) {
        return 2345672719;
      }
      int v11 = 2;
    }
    else
    {
      int v11 = 1;
    }
    *(_DWORD *)(a1 + 1004) = v11;
    return result;
  }
  if (!cstdlib_strcmp(__s1, "lidmode"))
  {
    uint64_t result = LH_stricmp(a3, "rejection");
    if (result)
    {
      uint64_t result = LH_stricmp(a3, "forced-choice");
      if (!result)
      {
        *(void *)(a1 + 1140) = 0;
        *(_DWORD *)(a1 + 1188) = 0;
        *(_DWORD *)(a1 + 1200) = 0;
        *(void *)(a1 + 1128) = 0;
        return result;
      }
      uint64_t result = LH_stricmp(a3, "memory-bias");
      if (result)
      {
        uint64_t result = LH_stricmp(a3, "bias-mlset");
        if (result) {
          return 2345672719;
        }
        uint64_t v12 = (_OWORD *)(a1 + 1128);
        *(_DWORD *)(a1 + 1188) = 1;
        *(_DWORD *)(a1 + 1200) = 1;
      }
      else
      {
        uint64_t v12 = (_OWORD *)(a1 + 1128);
        *(_DWORD *)(a1 + 1188) = 1;
        *(_DWORD *)(a1 + 1200) = 0;
      }
      *uint64_t v12 = xmmword_2206E3110;
      uint64_t v13 = 279172874250000;
    }
    else
    {
      *(_DWORD *)(a1 + 1188) = 0;
      *(_DWORD *)(a1 + 1200) = 0;
      *(_OWORD *)(a1 + 1128) = xmmword_2206E3120;
      uint64_t v13 = 1000;
    }
    *(void *)(a1 + 1144) = v13;
    return result;
  }
  if (cstdlib_strcmp(__s1, "lidlanguages"))
  {
    if (cstdlib_strcmp(__s1, "lidvoiceswitch"))
    {
      if (cstdlib_strcmp(__s1, "membiasedrejectparam1"))
      {
        if (cstdlib_strcmp(__s1, "membiasedrejectparam2"))
        {
          if (!cstdlib_strcmp(__s1, "extraesclang"))
          {
            if (*(_WORD *)(a1 + 1066))
            {
              unint64_t v6 = 0;
              uint64_t v7 = 20;
              do
              {
                uint64_t v8 = *(void *)(a1 + 1072);
                if (*(_DWORD *)(v8 + v7) == 1)
                {
                  cstdlib_strcpy(__dst, (const char *)(v8 + v7 - 12));
                  __dst[2] = 0;
                  uint64_t v9 = cstdlib_strstr(a3, __dst);
                  if (v9)
                  {
                    if (v9 == a3 || *(v9 - 1) == 44) {
                      cstdlib_strncpy((char *)(*(void *)(a1 + 1072) + v7 - 12), v9, 3uLL);
                    }
                  }
                }
                ++v6;
                v7 += 24;
              }
              while (v6 < *(unsigned __int16 *)(a1 + 1066));
            }
            AdjustLanguageGroupMappingLID2((char *)(a1 + 1928), a3);
          }
          return 0;
        }
        else
        {
          unsigned int v15 = LH_atou(a3);
          uint64_t result = 0;
          *(_DWORD *)(a1 + 1136) = v15;
          *(_DWORD *)(a1 + 1148) = v15;
        }
      }
      else
      {
        unsigned int v14 = LH_atou(a3);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 1132) = v14;
        *(_DWORD *)(a1 + 1144) = v14;
      }
      return result;
    }
    uint64_t result = LH_stricmp(a3, "yes");
    if (!result)
    {
      *(_DWORD *)(a1 + 1008) = 0;
      return result;
    }
    uint64_t result = LH_stricmp(a3, "no");
    if (!result)
    {
      *(_DWORD *)(a1 + 1008) = 1;
      return result;
    }
    return 2345672719;
  }

  return hlp_SetActiveLngs(a1, a3);
}

uint64_t fe_lid_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v5 = 2345672711;
  uint64_t v26 = 0;
  if (!a5) {
    return v5;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v28);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(a1, a2, &v27);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v12 = (void *)heap_Calloc(*(void **)(v28 + 8), 1, 136040);
  if (!v12)
  {
    log_OutPublic(*(void *)(v28 + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v25);
    return 2345672714;
  }
  uint64_t v17 = (uint64_t)v12;
  *uint64_t v12 = a3;
  v12[1] = a4;
  uint64_t v19 = v27;
  uint64_t v18 = v28;
  v12[2] = v28;
  v12[3] = a1;
  v12[4] = a2;
  v12[5] = v19;
  uint64_t Object = objc_GetObject(*(void *)(v18 + 48), (uint64_t)"SYNTHSTREAM", &v26);
  if ((Object & 0x80000000) != 0
    || (*(void *)(v17 + 72) = *(void *)(v26 + 8),
        uint64_t Object = objc_GetObject(*(void *)(v28 + 48), (uint64_t)"FE_DCTLKP", &v26),
        (Object & 0x80000000) != 0))
  {
    uint64_t v5 = Object;
    *(void *)a5 = v17;
    *(_DWORD *)(a5 + 8) = 62400;
LABEL_11:
    fe_lid_ObjClose((void *)v17, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  uint64_t v21 = v26;
  *(void *)(v17 + 64) = *(void *)(v26 + 8);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v21 + 16);
  if ((objc_GetObject(*(void *)(v28 + 48), (uint64_t)"COMPQUERY", &v26) & 0x80000000) != 0)
  {
    *(void *)(v17 + 96) = 0;
    *(void *)(v17 + 80) = safeh_GetNullHandle();
    *(void *)(v17 + 88) = v23;
  }
  else
  {
    uint64_t v22 = v26;
    *(void *)(v17 + 96) = *(void *)(v26 + 8);
    *(_OWORD *)(v17 + 80) = *(_OWORD *)(v22 + 16);
  }
  uint64_t v5 = fe_lid_HlpOpen(v17);
  *(void *)a5 = v17;
  *(_DWORD *)(a5 + 8) = 62400;
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  return v5;
}

uint64_t fe_lid_HlpOpen(uint64_t a1)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  uint64_t v138 = 0;
  __int16 v137 = 0;
  char v136 = 0;
  unsigned int v135 = 0;
  unsigned int v133 = 0;
  uint64_t v134 = 0;
  __s1 = 0;
  unsigned __int16 __s = 0;
  uint64_t v129 = 0;
  __src = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"mlset", &__s) & 0x80000000) != 0 || !cstdlib_strlen(__s))
  {
    uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"langcode", &__s);
    if ((Str & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  uint64_t v8 = __s;
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  size_t v10 = cstdlib_strlen(__s);
  int v11 = (char *)heap_Alloc(v9, v10 + 1);
  if (!v11)
  {
    uint64_t v17 = 2345672714;
    *(void *)(a1 + 1904) = 0;
    return v17;
  }
  uint64_t v12 = 2345672714;
  uint64_t v13 = cstdlib_strcpy(v11, v8);
  *(void *)(a1 + 1904) = v13;
  if (!v13) {
    return 2345672714;
  }
  if ((int)cstdlib_strlen(v13) >= 1)
  {
    int v14 = 0;
    do
    {
      *(unsigned char *)(*(void *)(a1 + 1904) + (unsigned __int16)v14) = cstdlib_tolower(*(unsigned __int8 *)(*(void *)(a1 + 1904) + (unsigned __int16)v14));
      ++v14;
    }
    while ((int)cstdlib_strlen(*(const char **)(a1 + 1904)) > (unsigned __int16)v14);
  }
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"extraesclang", &__s1) & 0x80000000) == 0)
  {
    uint64_t v15 = *(void *)(v2 + 40);
    *(void *)char __s2 = a1;
    long long v140 = xmmword_26D2114A0;
    uint64_t Str = paramc_ListenerAdd(v15, "extraesclang", __s2);
    if ((Str & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &__src);
  *(_DWORD *)(a1 + 1008) = 0;
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"lidvoiceswitch", &v133) & 0x80000000) != 0)
  {
    uint64_t Str = paramc_ParamSetStr(*(void *)(v2 + 40), (uint64_t)"lidvoiceswitch", "no");
    if ((Str & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    if (!LH_stricmp(v133, "yes"))
    {
      int v16 = 0;
      goto LABEL_21;
    }
    if (!LH_stricmp(v133, "no"))
    {
      int v16 = 1;
LABEL_21:
      *(_DWORD *)(a1 + 1008) = v16;
    }
  }
  uint64_t v19 = *(const char **)(a1 + 1904);
  if (v19)
  {
    if (cstdlib_strlen(v19) >= 4)
    {
      paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"lidlanguages", &v129);
      if (__s1)
      {
        if (cstdlib_strcmp(__s1, (const char *)&unk_2206E31BA))
        {
          cstdlib_strlen(__s1);
          uint64_t v24 = 0;
          unsigned __int16 v25 = 0;
          unsigned __int16 v26 = 0;
          do
          {
            if ((++v26 & 3) != 0)
            {
              int v27 = __s1[v24];
              if ((v27 & 0xFFFFFFDF) - 91 > 0xFFFFFFE5) {
                __s2[v25++] = ssft_tolower(v27);
              }
              else {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 60003, (uint64_t)"%s%s", v20, v21, v22, v23, "extraesclang");
              }
            }
            else
            {
              __s2[v25] = 0;
              if (__s1[v24] && __s1[v24] != 44)
              {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 60003, (uint64_t)"%s%s", v20, v21, v22, v23, "extraesclang");
              }
              else if (!cstdlib_strstr(*(char **)(a1 + 1904), __s2) || !LH_stricmp(__src, __s2))
              {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 60004, (uint64_t)"%s%s", v28, v29, v30, v31, "language");
              }
              unsigned __int16 v25 = 0;
            }
            uint64_t v24 = v26;
          }
          while (cstdlib_strlen(__s1) >= v26);
          uint64_t v32 = *(void *)(*(void *)(a1 + 16) + 8);
          int v33 = cstdlib_strlen(__s1);
          size_t v34 = (char *)heap_Alloc(v32, (v33 + 5));
          if (!v34)
          {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 60000, 0, v35, v36, v37, v38, v127);
            return v12;
          }
          uint64_t v39 = v34;
          cstdlib_strcpy(v34, __src);
          cstdlib_strcat(v39, ",");
          cstdlib_strcat(v39, __s1);
          paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"lidlanguages", &v129);
          BOOL v40 = v129;
          if (*v39)
          {
            if (v129 && *v129)
            {
              __s2[0] = 0;
              cstdlib_strncpy(__dst, v39, 0x7FuLL);
              __dst[127] = 0;
              LOBYTE(v41) = __dst[0];
              if (__dst[0])
              {
                uint64_t v42 = 0;
                unint64_t v43 = __dst;
                do
                {
                  uint64_t v44 = 0;
                  unint64_t v45 = (unsigned __int8 *)(v43 + 1);
                  while (!cstdlib_strchr(",", (char)v41))
                  {
                    int v41 = v43[++v44];
                    ++v45;
                    if (!v41)
                    {
                      v42 += v44;
                      goto LABEL_52;
                    }
                  }
                  char v46 = v43[v44];
                  v42 += v44;
                  if (v46)
                  {
                    do
                    {
                      if (!cstdlib_strchr(",", v46)) {
                        break;
                      }
                      *(v45 - 1) = 0;
                      ++v42;
                      int v47 = *v45++;
                      char v46 = v47;
                    }
                    while (v47);
                  }
LABEL_52:
                  if (cstdlib_strstr(v40, v43))
                  {
                    if (__s2[0]) {
                      cstdlib_strcat(__s2, ",");
                    }
                    cstdlib_strcat(__s2, v43);
                  }
                  unint64_t v43 = &__dst[v42];
                  LOBYTE(v41) = __dst[v42];
                }
                while ((_BYTE)v41);
              }
              goto LABEL_63;
            }
            uint64_t v48 = v39;
          }
          else
          {
            if (!v129)
            {
              __s2[0] = 0;
              goto LABEL_63;
            }
            uint64_t v48 = v129;
          }
          cstdlib_strcpy(__s2, v48);
LABEL_63:
          uint64_t v49 = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidlanguages", __s2);
          if ((v49 & 0x80000000) == 0)
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v39);
            goto LABEL_65;
          }
          return v49;
        }
      }
    }
  }
LABEL_65:
  uint64_t v50 = *(void *)(v2 + 40);
  *(void *)char __s2 = a1;
  long long v128 = xmmword_26D2114A0;
  long long v140 = xmmword_26D2114A0;
  uint64_t v17 = paramc_ListenerAdd(v50, "lidvoiceswitch", __s2);
  uint64_t v51 = *(void *)(a1 + 16);
  if ((v17 & 0x80000000) != 0)
  {
    uint64_t v18 = *(void *)(v51 + 32);
    goto LABEL_19;
  }
  uint64_t v17 = hlp_FillDicLMLanguages(v51, a1 + 1016, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(char **)(a1 + 1904), __s1, 0xFFFF);
  if ((v17 & 0x80001FFF) == 0x8000000A) {
    return v17;
  }
  uint64_t v17 = hlp_FillDicLMLanguages(*(void *)(a1 + 16), a1 + 1064, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(char **)(a1 + 1904), __s1, 1);
  if ((v17 & 0x80001FFF) == 0x8000000A) {
    return v17;
  }
  if (!*(_WORD *)(a1 + 1018) && !*(_WORD *)(a1 + 1066)) {
    return 0;
  }
  *(_DWORD *)(a1 + 1004) = 0;
  uint64_t active = paramc_ParamGet(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", (void *)(a1 + 1912), 0);
  if ((active & 0x80000000) != 0) {
    return active;
  }
  unsigned int v53 = *(unsigned __int16 *)(a1 + 1018);
  unsigned int v54 = *(unsigned __int16 *)(a1 + 1066);
  if (!(v53 | v54)) {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 1152) = 69077;
  if (v53 <= v54) {
    unsigned int v53 = v54;
  }
  uint64_t v55 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 32 * v53);
  *(void *)(a1 + 1880) = v55;
  if (!v55)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v56, v57, v58, v59, v127);
    return 2345672714;
  }
  if (*(unsigned __int16 *)(a1 + 1018) <= *(unsigned __int16 *)(a1 + 1066)) {
    uint64_t v60 = *(unsigned __int16 *)(a1 + 1066);
  }
  else {
    uint64_t v60 = *(unsigned __int16 *)(a1 + 1018);
  }
  if (v60)
  {
    int8x16_t v61 = vextq_s8(*(int8x16_t *)(a1 + 1904), *(int8x16_t *)(a1 + 1904), 8uLL);
    unsigned int v62 = (int8x16_t *)(v55 + 16);
    do
    {
      *unsigned int v62 = v61;
      v62 += 2;
      --v60;
    }
    while (v60);
  }
  uint64_t Str = lid_Init(a1);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (*(_WORD *)(a1 + 1066))
  {
    uint64_t Str = lidword_Init((void *)a1);
    if ((Str & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  uint64_t v63 = *(void *)(a1 + 96);
  if (v63)
  {
    uint64_t v17 = (*(uint64_t (**)(void, void, void *, void, unsigned int *))(v63 + 64))(*(void *)(a1 + 80), *(void *)(a1 + 88), &unk_2206E31BA, 0, &v135);
    if ((v17 & 0x80001FFF) == 0x8000000A) {
      return v17;
    }
    if (v135)
    {
      uint64_t v64 = heap_Calloc(*(void **)(v2 + 8), v135, 86);
      if (!v64)
      {
        uint64_t v18 = *(void *)(v2 + 32);
        goto LABEL_19;
      }
      uint64_t v65 = v64;
      uint64_t active = (*(uint64_t (**)(void, void, void *, uint64_t, unsigned int *))(*(void *)(a1 + 96) + 64))(*(void *)(a1 + 80), *(void *)(a1 + 88), &unk_2206E31BA, v64, &v135);
      if ((active & 0x80000000) == 0)
      {
        if (v135)
        {
          unsigned __int16 v66 = 0;
          do
          {
            unsigned int v67 = v66;
            uint64_t v68 = v65 + 86 * v66;
            int v71 = *(unsigned __int8 *)(v68 + 64);
            long long v70 = (char *)(v68 + 64);
            unsigned __int8 v69 = v71;
            if (v71)
            {
              int v72 = 0;
              long long v73 = v70;
              do
              {
                *long long v73 = ssft_tolower(v69);
                uint64_t v74 = v65 + 86 * v67 + (unsigned __int16)++v72;
                int v75 = *(unsigned __int8 *)(v74 + 64);
                long long v73 = (char *)(v74 + 64);
                unsigned __int8 v69 = v75;
              }
              while (v75);
            }
            unint64_t ModelLng = hlp_FindModelLng(a1, v70, 1);
            if (ModelLng || (lid_make_language_group(__dst, v70), (unint64_t ModelLng = hlp_FindModelLng(a1, __dst, 1)) != 0)) {
              *(_DWORD *)(ModelLng + 16) = 1;
            }
            unint64_t v77 = hlp_FindModelLng(a1, v70, 0);
            if (v77 || (lid_make_language_group(__dst, v70), (unint64_t v77 = hlp_FindModelLng(a1, __dst, 1)) != 0)) {
              *(_DWORD *)(v77 + 16) = 1;
            }
            unsigned __int16 v66 = v67 + 1;
          }
          while (v135 > (unsigned __int16)(v67 + 1));
        }
        heap_Free(*(void **)(v2 + 8), v65);
        goto LABEL_106;
      }
      return active;
    }
  }
LABEL_106:
  __int16 v137 = -1;
  uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "lidscope", &v138, &v137, &v136);
  if ((active & 0x80000000) != 0) {
    return active;
  }
  if (v137) {
    goto LABEL_250;
  }
  __int16 v137 = 1;
  uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "lidscope", &v138, &v137, &v136);
  if ((active & 0x80000000) != 0) {
    return active;
  }
  if (v137)
  {
LABEL_250:
    if (cstdlib_strstr(*v138, "user-defined")) {
      int v78 = 1;
    }
    else {
      int v78 = 2;
    }
    *(_DWORD *)(a1 + 1004) = v78;
  }
LABEL_72:
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"lidlanguages", &v133) & 0x80000000) != 0)
  {
    uint64_t Str = paramc_ParamSetStr(*(void *)(v2 + 40), (uint64_t)"lidlanguages", (char *)&unk_2206E31BA);
    if ((Str & 0x80000000) == 0) {
      goto LABEL_115;
    }
LABEL_17:
    uint64_t v17 = Str;
LABEL_18:
    uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_19:
    log_OutPublic(v18, (uint64_t)"FE_LID", 48000, 0, v4, v5, v6, v7, v127);
    return v17;
  }
  uint64_t active = hlp_SetActiveLngs(a1, v133);
  if ((active & 0x80000000) != 0) {
    return active;
  }
LABEL_115:
  uint64_t v79 = *(void *)(v2 + 40);
  *(void *)char __s2 = a1;
  long long v140 = v128;
  uint64_t Str = paramc_ListenerAdd(v79, "lidlanguages", __s2);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"lidscope", &v133) & 0x80000000) == 0)
  {
    if (LH_stricmp(v133, "none"))
    {
      if (LH_stricmp(v133, "user-defined"))
      {
        int v80 = LH_stricmp(v133, "message");
        long long v81 = v128;
        if (v80) {
          goto LABEL_136;
        }
        int v82 = 2;
        goto LABEL_135;
      }
      int v82 = 1;
    }
    else
    {
      int v82 = 0;
    }
    long long v81 = v128;
LABEL_135:
    *(_DWORD *)(a1 + 1004) = v82;
    goto LABEL_136;
  }
  int v84 = *(_DWORD *)(a1 + 1004);
  unsigned __int8 v85 = "message";
  if (v84 == 1) {
    unsigned __int8 v85 = "user-defined";
  }
  if (v84) {
    uint64_t v86 = (char *)v85;
  }
  else {
    uint64_t v86 = "none";
  }
  uint64_t Str = paramc_ParamSetStr(*(void *)(v2 + 40), (uint64_t)"lidscope", v86);
  long long v81 = v128;
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
LABEL_136:
  uint64_t v87 = *(void *)(v2 + 40);
  *(void *)char __s2 = a1;
  long long v140 = v81;
  uint64_t Str = paramc_ListenerAdd(v87, "lidscope", __s2);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if ((paramc_ParamGetUInt(*(void *)(v2 + 40), (uint64_t)"membiasedrejectparam1", (unsigned int *)&v134 + 1) & 0x80000000) != 0)
  {
    BOOL v88 = 0;
    HIDWORD(v134) = 0;
  }
  else
  {
    if ((paramc_ParamGetUInt(*(void *)(v2 + 40), (uint64_t)"membiasedrejectparam2", (unsigned int *)&v134) & 0x80000000) == 0)
    {
      BOOL v88 = v134 != 0;
      BOOL v89 = v134 == 0;
      goto LABEL_143;
    }
    BOOL v88 = 0;
    uint64_t v134 = 0;
  }
  BOOL v89 = 1;
LABEL_143:
  *(_DWORD *)(a1 + 1140) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 1188) = 0;
  *(_DWORD *)(a1 + 1200) = 0;
  __int16 v137 = -1;
  uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "lidmode", &v138, &v137, &v136);
  if ((active & 0x80000000) != 0) {
    return active;
  }
  if (v137 && cstdlib_strstr(*v138, "rejection")) {
    *(_DWORD *)(a1 + 1128) = 1;
  }
  __int16 v137 = 1;
  int v90 = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "lidmode", &v138, &v137, &v136);
  if ((v90 & 0x80000000) == 0 && v137 && cstdlib_strstr(*v138, "rejection")) {
    *(_DWORD *)(a1 + 1140) = 1;
  }
  int v91 = 0;
  if ((v90 & 0x80000000) == 0 && v137)
  {
    if (cstdlib_strstr(*v138, "memory-bias"))
    {
      int v91 = 1;
      *(_DWORD *)(a1 + 1188) = 1;
      *(_DWORD *)(a1 + 1200) = 0;
    }
    else
    {
      int v91 = 0;
    }
  }
  if ((v90 & 0x80000000) == 0 && v137 && cstdlib_strstr(*v138, "bias-mlset"))
  {
    int v91 = 1;
    *(_DWORD *)(a1 + 1188) = 1;
    *(_DWORD *)(a1 + 1200) = 1;
  }
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"lidmode", &v133) & 0x80000000) == 0)
  {
    if (LH_stricmp(v133, "rejection"))
    {
      if (LH_stricmp(v133, "forced-choice"))
      {
        if (LH_stricmp(v133, "memory-bias"))
        {
          int v92 = LH_stricmp(v133, "bias-mlset");
          long long v93 = v128;
          if (v92) {
            goto LABEL_180;
          }
          int v94 = 0;
          int v95 = 1;
          int v96 = 1;
          goto LABEL_179;
        }
        int v94 = 0;
        int v96 = 0;
        int v95 = 1;
      }
      else
      {
        int v94 = 0;
        int v95 = 0;
        int v96 = 0;
      }
    }
    else
    {
      int v95 = 0;
      int v96 = 0;
      int v94 = 1;
    }
    long long v93 = v128;
LABEL_179:
    *(_DWORD *)(a1 + 1128) = v94;
    *(_DWORD *)(a1 + 1140) = v94;
    *(_DWORD *)(a1 + 1188) = v95;
    *(_DWORD *)(a1 + 1200) = v96;
    goto LABEL_180;
  }
  if (*(_DWORD *)(a1 + 1128) || *(_DWORD *)(a1 + 1140))
  {
    uint64_t v97 = *(void *)(v2 + 40);
    uint64_t v98 = "rejection";
  }
  else if (*(_DWORD *)(a1 + 1188))
  {
    uint64_t v97 = *(void *)(v2 + 40);
    uint64_t v98 = "memory-bias";
  }
  else
  {
    uint64_t v97 = *(void *)(v2 + 40);
    if (*(_DWORD *)(a1 + 1200)) {
      uint64_t v98 = "bias-mlset";
    }
    else {
      uint64_t v98 = "forced-choice";
    }
  }
  uint64_t v17 = paramc_ParamSetStr(v97, (uint64_t)"lidmode", v98);
  long long v93 = v128;
  if ((v17 & 0x80000000) != 0) {
    goto LABEL_18;
  }
LABEL_180:
  uint64_t v99 = *(void *)(v2 + 40);
  *(void *)char __s2 = a1;
  long long v140 = v93;
  uint64_t Str = paramc_ListenerAdd(v99, "lidmode", __s2);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  uint64_t v100 = (void *)(a1 + 1132);
  *(void *)(a1 + 1132) = 0x3200000000;
  *(void *)(a1 + 1144) = 0x3200000000;
  int v101 = *(_DWORD *)(a1 + 1128);
  if (v101)
  {
    if (*(_DWORD *)(a1 + 1188) != 1)
    {
      if (v101 == 1)
      {
LABEL_188:
        int v104 = 0;
        *uint64_t v100 = 1000;
        *(_DWORD *)(a1 + 1144) = 1000;
LABEL_214:
        *(_DWORD *)(a1 + 1148) = v104;
        goto LABEL_215;
      }
      int v102 = *(_DWORD *)(a1 + 1140);
      goto LABEL_187;
    }
LABEL_192:
    if (v88)
    {
      int v106 = v134;
      int v105 = HIDWORD(v134);
      *(_DWORD *)(a1 + 1132) = HIDWORD(v134);
      *(_DWORD *)(a1 + 1136) = v106;
      *(_DWORD *)(a1 + 1144) = v105;
      *(_DWORD *)(a1 + 1148) = v106;
    }
    char v107 = !v89;
    if (v91) {
      char v108 = !v89;
    }
    else {
      char v108 = 1;
    }
    if (v108)
    {
      if (v91) {
        char v107 = 1;
      }
      if ((v107 & 1) == 0)
      {
        *uint64_t v100 = 279172874250000;
        *(_DWORD *)(a1 + 1144) = 10000;
        int v104 = 65000;
        goto LABEL_214;
      }
    }
    else
    {
      __int16 v137 = -1;
      uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "rejectparam1", &v138, &v137, &v136);
      if ((active & 0x80000000) != 0) {
        return active;
      }
      if (v137) {
        *(_DWORD *)uint64_t v100 = (unsigned __int16)LH_atou(*v138);
      }
      __int16 v137 = -1;
      uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "rejectparam2", &v138, &v137, &v136);
      if ((active & 0x80000000) != 0) {
        return active;
      }
      if (v137) {
        *(_DWORD *)(a1 + 1136) = (unsigned __int16)LH_atou(*v138);
      }
      __int16 v137 = 1;
      if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "rejectparam1", &v138, &v137, &v136) & 0x80000000) == 0&& v137)
      {
        *(_DWORD *)(a1 + 1144) = (unsigned __int16)LH_atou(*v138);
      }
      __int16 v137 = 1;
      if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "rejectparam2", &v138, &v137, &v136) & 0x80000000) == 0&& v137)
      {
        int v104 = (unsigned __int16)LH_atou(*v138);
        goto LABEL_214;
      }
    }
    goto LABEL_215;
  }
  int v102 = *(_DWORD *)(a1 + 1140);
  int v103 = *(_DWORD *)(a1 + 1188);
  if (!v102)
  {
    if (v103 != 1)
    {
      if (!v103)
      {
        int v104 = 0;
        *(_DWORD *)(a1 + 1136) = 0;
        goto LABEL_214;
      }
      goto LABEL_215;
    }
    goto LABEL_192;
  }
  if (v103 == 1) {
    goto LABEL_192;
  }
LABEL_187:
  if (v102 == 1) {
    goto LABEL_188;
  }
LABEL_215:
  uint64_t Str = paramc_ParamSetUInt(*(void *)(v2 + 40), (uint64_t)"membiasedrejectparam1", *(_DWORD *)(a1 + 1144));
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  uint64_t Str = paramc_ParamSetUInt(*(void *)(v2 + 40), (uint64_t)"membiasedrejectparam2", *(_DWORD *)(a1 + 1148));
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  uint64_t v109 = *(void *)(v2 + 40);
  *(void *)char __s2 = a1;
  long long v140 = v128;
  uint64_t Str = paramc_ListenerAdd(v109, "membiasedrejectparam1", __s2);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  uint64_t v110 = *(void *)(v2 + 40);
  *(void *)char __s2 = a1;
  long long v140 = v128;
  uint64_t Str = paramc_ListenerAdd(v110, "membiasedrejectparam2", __s2);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_17;
  }
  *(void *)(a1 + 1180) = 0;
  __int16 v137 = -1;
  uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "numfallback", &v138, &v137, &v136);
  if ((active & 0x80000000) != 0) {
    return active;
  }
  if (v137) {
    *(_DWORD *)(a1 + 1180) = 1;
  }
  __int16 v137 = 1;
  if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "numfallback", &v138, &v137, &v136) & 0x80000000) == 0&& v137)
  {
    *(_DWORD *)(a1 + 1184) = 1;
  }
  *(void *)(a1 + 1156) = 0x3E800000000;
  cstdlib_memcpy((void *)(a1 + 1164), "enx", 4uLL);
  *(void *)(a1 + 1168) = 0x3E800000000;
  cstdlib_memcpy((void *)(a1 + 1176), "enx", 4uLL);
  __int16 v137 = -1;
  uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "fuzzythreshold", &v138, &v137, &v136);
  if ((active & 0x80000000) != 0) {
    return active;
  }
  if (v137)
  {
    *(_DWORD *)(a1 + 1156) = 1;
    uint64_t v111 = LH_atou(*v138);
    *(_DWORD *)(a1 + 1160) = v111;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting fuzzy matching threshold to %7lu", v112, v113, v114, (uint64_t)v111);
  }
  __int16 v137 = 1;
  if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "fuzzythreshold", &v138, &v137, &v136) & 0x80000000) == 0&& v137)
  {
    *(_DWORD *)(a1 + 1168) = 1;
    uint64_t v115 = LH_atou(*v138);
    *(_DWORD *)(a1 + 1172) = v115;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting common fuzzy matching threshold to %7lu", v116, v117, v118, (uint64_t)v115);
  }
  __int16 v137 = -1;
  uint64_t active = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "fuzzyfallbacklang", &v138, &v137, &v136);
  if ((active & 0x80000000) != 0) {
    return active;
  }
  if (v137)
  {
    size_t v119 = cstdlib_strlen(*v138);
    *(_DWORD *)(a1 + 1156) = 1;
    cstdlib_memcpy((void *)(a1 + 1164), *v138, 4uLL);
    if (v119 >= 4) {
      *(unsigned char *)(a1 + 1167) = 0;
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting fuzzy matching fallback language to %s", v120, v121, v122, a1 + 1164);
  }
  __int16 v137 = 1;
  uint64_t v17 = 0;
  if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "fuzzyfallbacklang", &v138, &v137, &v136) & 0x80000000) == 0&& v137)
  {
    size_t v123 = cstdlib_strlen(*v138);
    *(_DWORD *)(a1 + 1156) = 1;
    cstdlib_memcpy((void *)(a1 + 1164), *v138, 4uLL);
    if (v123 >= 4) {
      *(unsigned char *)(a1 + 1167) = 0;
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"setting fuzzy matching fallback language to %s", v124, v125, v126, a1 + 1164);
    return 0;
  }
  return v17;
}

uint64_t fe_lid_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62400, 136040);
  if ((result & 0x80000000) != 0) {
    return 2345672712;
  }
  if (a1)
  {
    if (a1[9]) {
      objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
    }
    if (a1[8]) {
      objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"FE_DCTLKP");
    }
    if (a1[12]) {
      objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"COMPQUERY");
    }
    fe_lid_HlpClose((uint64_t)a1);
    heap_Free(*(void **)(a1[2] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_lid_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  __s1 = 0;
  unsigned int v17 = 0;
  __src = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 62400, 136040);
  if ((v7 & 0x80000000) != 0) {
    return 2345672712;
  }
  uint64_t v8 = v7;
  synstrmaux_InitStreamOpener(a1 + 104, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID");
  *(_DWORD *)(a1 + 1000) = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"textanalysison", &__s1) & 0x80000000) == 0
    && __s1
    && *__s1
    && !cstdlib_strcmp(__s1, "yes"))
  {
    *(_DWORD *)(a1 + 996) = 1;
  }
  if (*(_DWORD *)(a1 + 1188))
  {
    *(_DWORD *)(a1 + 1192) = *(_DWORD *)(a1 + 1144);
    if (*(_DWORD *)(a1 + 996))
    {
      *(_DWORD *)(a1 + 1000) = 0;
      paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"initcommonbiasvalue", 0);
      paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"initcommonbiaslanguage", (char *)&unk_2206E31BA);
    }
    else
    {
      if ((paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"initcommonbiasvalue", &v17) & 0x80000000) != 0
        || !v17
        || (paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"initcommonbiaslanguage", &__src) & 0x80000000) != 0
        || (uint64_t v13 = __src) == 0)
      {
        *(_DWORD *)(a1 + 1000) = 0;
LABEL_19:
        cstdlib_memcpy((void *)(a1 + 1196), *(const void **)(a1 + 1912), 4uLL);
        goto LABEL_20;
      }
      *(_DWORD *)(a1 + 1192) = v17;
      *(_DWORD *)(a1 + 1000) = 1;
      cstdlib_memcpy((void *)(a1 + 1196), v13, 4uLL);
    }
    if (*(_DWORD *)(a1 + 1000)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_20:
  if (*(_DWORD *)(a1 + 1004))
  {
    if (*(_WORD *)(a1 + 1018) || *(_WORD *)(a1 + 1066))
    {
      synstrmaux_RegisterInStream((_WORD *)(a1 + 104), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 928);
      synstrmaux_RegisterInStream((_WORD *)(a1 + 104), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
        0,
        a1 + 944);
      synstrmaux_RegisterOutStream((_WORD *)(a1 + 104), (uint64_t)"text/plain;charset=utf-8", a1 + 960);
      synstrmaux_RegisterOutStream((_WORD *)(a1 + 104), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
        a1 + 976);
      uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 104), *(void *)(a1 + 72), a3, a4);
      if ((v8 & 0x80000000) != 0) {
        synstrmaux_CloseStreams((_WORD *)(a1 + 104), *(void *)(a1 + 72));
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48002, 0, v9, v10, v11, v12, v15);
      return 2345672707;
    }
  }
  return v8;
}

uint64_t hlp_AppendItemRaw32(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int a5, int a6)
{
  uint64_t v6 = 2345672714;
  if (!a2) {
    return 2345672711;
  }
  uint64_t v10 = *a2;
  if (v10)
  {
    unsigned int v11 = *a4 + 1;
    unsigned int v12 = *a3;
    if (v11 <= *a3)
    {
LABEL_9:
      uint64_t v6 = 0;
      *a4 = v11;
      return v6;
    }
    unsigned int v13 = v12 + a6;
    uint64_t v14 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), v10, (v12 + a6) * a5);
    if (!v14) {
      return v6;
    }
LABEL_8:
    *a2 = v14;
    *a3 = v13;
    unsigned int v11 = *a4 + 1;
    goto LABEL_9;
  }
  *a3 = 0;
  *a4 = 0;
  unsigned int v13 = *a3 + a6;
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), a5, v13);
  if (v14) {
    goto LABEL_8;
  }
  return v6;
}

uint64_t fe_lid_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v191 = *MEMORY[0x263EF8340];
  int v176 = 0;
  unsigned __int16 v174 = 0;
  uint64_t v175 = 0;
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v171 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 62400, 136040);
  if ((v7 & 0x80000000) != 0) {
    return 2345672712;
  }
  uint64_t Str = v7;
  *a5 = 1;
  uint64_t v9 = *(void *)(a1 + 928);
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void, int *, uint64_t *))(*(void *)(a1 + 72) + 144))(v9, *(void *)(a1 + 936), &v176, &v175);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t Str = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 72) + 144))(*(void *)(a1 + 944), *(void *)(a1 + 952), (char *)&v175 + 4, &v175);
    if ((Str & 0x80000000) == 0)
    {
      if (v176)
      {
        uint64_t v188 = 0;
        unsigned int v189 = 0;
        uint64_t v187 = 0;
        unsigned int v186 = 0;
        unsigned int v185 = 0;
        uint64_t v183 = 0;
        uint64_t v184 = 0;
        uint64_t v181 = 0;
        int v182 = 0;
        int v180 = 0;
        *(_DWORD *)(a1 + 992) = 1;
        int v11 = (*(uint64_t (**)(void, void, const char *, void, int *))(*(void *)(a1 + 64) + 80))(*(void *)(a1 + 48), *(void *)(a1 + 56), "mertfrq", 0, &v180);
        if (v11 < 0 || (int v12 = v180) == 0)
        {
          int v11 = (*(uint64_t (**)(void, void, const char *, void, int *))(*(void *)(a1 + 64) + 80))(*(void *)(a1 + 48), *(void *)(a1 + 56), "mertfrq_latn", 0, &v180);
          int v12 = v180;
        }
        BOOL v13 = v11 < 0 || v12 == 0;
        int v14 = v13;
        uint64_t v15 = 1180;
        if (v13) {
          uint64_t v15 = 1184;
        }
        *(_DWORD *)(a1 + 992) = v14;
        int v16 = *(_DWORD *)(a1 + v15);
        uint64_t appended = (*(uint64_t (**)(void, void, unsigned char **, char *))(*(void *)(a1 + 72) + 88))(*(void *)(a1 + 928), *(void *)(a1 + 936), &v189, (char *)&v188 + 4);
        if ((appended & 0x80000000) != 0
          || (int v18 = HIDWORD(v188),
              uint64_t appended = (*(uint64_t (**)(void, void, _DWORD **, unsigned int *))(*(void *)(a1 + 72)
                                                                                              + 88))(*(void *)(a1 + 944), *(void *)(a1 + 952), &v187, &v186), (appended & 0x80000000) != 0)|| (v186 >>= 5, uint64_t v184 = 0, appended = hlp_AppendItemRaw32(a1, &v184, (unsigned int *)&v183, (unsigned int *)&v183 + 1, 0x20u, v186 + 10), (appended & 0x80000000) != 0))
        {
          uint64_t Str = appended;
          uint64_t v19 = 0;
          goto LABEL_25;
        }
        HIDWORD(v183) = 0;
        if (*v187 == 0x4000) {
          LODWORD(v188) = v187[3];
        }
        else {
          (*(void (**)(void, void, uint64_t *))(*(void *)(a1 + 72) + 136))(*(void *)(a1 + 928), *(void *)(a1 + 936), &v188);
        }
        int v157 = v18;
        cstdlib_strcpy(__dst, (const char *)&unk_2206E31BA);
        if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidon", &v185) & 0x80000000) != 0)
        {
          int v35 = 0;
        }
        else
        {
          cstdlib_strcpy(__dst, v185);
          int v34 = cstdlib_strcmp(v185, "unknown") == 0;
          if (cstdlib_strlen(v185) == 3) {
            int v34 = 2;
          }
          if (!cstdlib_strncmp(v185, "vceunkn", 7uLL)) {
            int v34 = 3;
          }
          if (cstdlib_strcmp(v185, "unknown:noautolid")) {
            int v35 = v34;
          }
          else {
            int v35 = 4;
          }
        }
        int v158 = v16;
        if (v186)
        {
          int v162 = v35;
          unsigned int v36 = 0;
          unsigned __int16 v37 = 0;
          do
          {
            uint64_t v38 = v187;
            uint64_t v39 = v37;
            uint64_t v40 = (uint64_t)&v187[8 * v37];
            BOOL v41 = *(_DWORD *)v40 == 36
               && cstdlib_strcmp(*(const char **)(v40 + 24), "unknownint")
               && cstdlib_strcmp(*(const char **)(v40 + 24), "normal") != 0;
            if (*(_DWORD *)(a1 + 996))
            {
              if (*(_DWORD *)v40 == 36)
              {
                hlp_SetParamcTAHasUserUnknown(a1, v40, v186 - v36);
                uint64_t v42 = &v38[8 * v39];
                uint64_t v44 = (const char *)*((void *)v42 + 3);
                unint64_t v43 = (char **)(v42 + 6);
                if (!cstdlib_strcmp(v44, "ins_unknown")) {
                  cstdlib_strcpy(*v43, "unknown");
                }
              }
            }
            unsigned __int16 v37 = v39 + 1;
            unsigned int v36 = (unsigned __int16)(v39 + 1);
          }
          while (v186 > v36 && !v41);
          if (v186)
          {
            unsigned int v164 = 0;
            unsigned __int16 v46 = 0;
            uint64_t v159 = 0;
            int v47 = v162;
            int v160 = v162;
            while (1)
            {
              int v169 = v47;
              uint64_t v48 = (char *)v187;
              uint64_t v49 = &v187[8 * v46];
              if (*(_DWORD *)(a1 + 1004) == 2)
              {
                int v50 = v49[3];
                BOOL v51 = v50 != v188;
                if (v50 == v188) {
                  unsigned int v52 = 0;
                }
                else {
                  unsigned int v52 = HIDWORD(v188);
                }
              }
              else
              {
                BOOL v51 = 0;
                unsigned int v52 = 0;
              }
              int v53 = *v49;
              if (v162 && v53 == 36)
              {
                unsigned int v54 = (const char **)&v187[8 * v46];
                if (cstdlib_strcmp(v54[3], "unknown")) {
                  int v55 = v169;
                }
                else {
                  int v55 = 1;
                }
                if (cstdlib_strlen(v54[3]) == 3) {
                  int v55 = 2;
                }
                if (!cstdlib_strncmp(v54[3], "vceunkn", 7uLL)) {
                  int v55 = 3;
                }
                if (!cstdlib_strcmp(v54[3], "unknown:noautolid")) {
                  int v55 = 4;
                }
                cstdlib_strcpy(__dst, v54[3]);
                int v53 = *v49;
                int v169 = v55;
                int v160 = v55;
              }
              if (v53 == 36)
              {
                if (*(_DWORD *)(a1 + 1188))
                {
                  uint64_t v56 = &v48[32 * v46];
                  uint64_t v58 = (const char *)*((void *)v56 + 3);
                  uint64_t v57 = (const char **)(v56 + 24);
                  if (!cstdlib_strcmp(v58, "normal") || !cstdlib_strcmp(*v57, "normal:noautolid"))
                  {
                    *(_DWORD *)(a1 + 1192) = *(_DWORD *)(a1 + 1144);
                    cstdlib_memcpy((void *)(a1 + 1196), *(const void **)(a1 + 1912), 4uLL);
                  }
                }
              }
              __s1 = v48;
              if (*v49 != 36
                || (uint64_t v59 = &v48[32 * v46],
                    int8x16_t v61 = (const char *)*((void *)v59 + 3),
                    uint64_t v60 = (const char **)(v59 + 24),
                    cstdlib_strcmp(v61, "unknownint") | v41)
                && cstdlib_strcmp(*v60, "unknown")
                && cstdlib_strcmp(*v60, "unknown:noautolid")
                && cstdlib_strncmp(*v60, "vceunkn", 7uLL)
                && cstdlib_strcmp(*v60, "unknownmem"))
              {
                char v62 = 0;
                unsigned int v63 = 0;
                if (!v51) {
                  goto LABEL_148;
                }
              }
              else
              {
                *(_DWORD *)(a1 + 1920) = 0;
                if (!cstdlib_strcmp(*v60, "unknownmem")) {
                  *(_DWORD *)(a1 + 1920) = 1;
                }
                if (!cstdlib_strncmp(*v60, "vceunkn", 7uLL)) {
                  *(_DWORD *)(a1 + 1008) = 0;
                }
                int v64 = *(_DWORD *)&v48[32 * v46 + 12];
                unsigned int v63 = v64 - v188;
                unsigned int v52 = HIDWORD(v188) - (v64 - v188);
                unsigned __int16 v65 = v46;
                while (v186 > ++v65)
                {
                  int v66 = v187[8 * v65];
                  if (v66 == 36 || v66 == 7)
                  {
                    int v169 = 0;
                    unsigned int v52 = v187[8 * v65 + 3] - v64;
                    goto LABEL_130;
                  }
                }
                int v169 = 0;
LABEL_130:
                char v62 = 1;
              }
              if (v52)
              {
                uint64_t v68 = &__s1[32 * v46];
                long long v70 = (const char *)*((void *)v68 + 3);
                unsigned __int8 v69 = (const char **)(v68 + 24);
                unsigned int v161 = v52;
                if (cstdlib_strncmp(v70, "vceunkn", 7uLL))
                {
                  int v71 = 0;
                  int v72 = 0;
                }
                else
                {
                  unsigned __int16 __s = 0;
                  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidlanguages", &__s);
                  if (__s && *__s)
                  {
                    uint64_t v73 = *(void *)(*(void *)(a1 + 16) + 8);
                    int v74 = cstdlib_strlen(__s);
                    int v75 = (char *)heap_Alloc(v73, (v74 + 1));
                    if (!v75) {
                      goto LABEL_330;
                    }
                    int v72 = v75;
                    cstdlib_strcpy(v75, __s);
                  }
                  else
                  {
                    int v72 = 0;
                  }
                  if ((Str & 0x80000000) == 0)
                  {
                    uint64_t v76 = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidlanguages", 0);
                    if ((v76 & 0x80000000) != 0)
                    {
                      uint64_t Str = v76;
                      if (v72) {
                        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v72);
                      }
LABEL_330:
                      uint64_t v19 = v159;
LABEL_25:
                      uint64_t v20 = 0;
LABEL_26:
                      unint64_t v21 = HIDWORD(v181);
                      if (HIDWORD(v181))
                      {
                        unint64_t v22 = 0;
                        do
                        {
                          uint64_t v23 = *(void *)(v184 + 32 * v182[v22] + 24);
                          if (v23)
                          {
                            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v23);
                            unint64_t v21 = HIDWORD(v181);
                          }
                          ++v22;
                        }
                        while (v22 < v21);
                      }
                      if (v19)
                      {
                        uint64_t v24 = *(void *)(v19 + 24);
                        if (v24) {
                          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v24);
                        }
                      }
                      if (v184) {
                        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v184);
                      }
                      if (v182) {
                        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v182);
                      }
                      if (v20)
                      {
                        unsigned __int16 v25 = *(void **)(*(void *)(a1 + 16) + 8);
                        uint64_t v26 = v20;
                        goto LABEL_59;
                      }
                      return Str;
                    }
                  }
                  unint64_t v77 = *v69;
                  int v71 = &v77[cstdlib_strlen("vceunkn")];
                }
                if (!cstdlib_strcmp(*v69, "unknown:noautolid"))
                {
                  int v78 = *v69;
                  int v71 = &v78[cstdlib_strlen("unknown")];
                }
                uint64_t v79 = lid_Identify((int8x16_t *)a1, &v189[v63], v161);
                if ((v79 & 0x80000000) != 0)
                {
                  uint64_t Str = v79;
                  if (v72) {
                    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v72);
                  }
                  goto LABEL_320;
                }
                uint64_t v80 = hlp_AppendLidResultAsMarkers(a1, &v184, (unsigned int *)&v183, (unsigned int *)&v183 + 1, (uint64_t *)&v182, (unsigned int *)&v181, (unsigned int *)&v181 + 1, v188 + v63, v71);
                if ((v80 & 0x80000000) != 0)
                {
                  uint64_t Str = v80;
                  uint64_t v19 = v159;
                  if (v72) {
                    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v72);
                  }
                  goto LABEL_25;
                }
                if (v72)
                {
                  uint64_t Str = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidlanguages", v72);
                  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v72);
                  if ((Str & 0x80000000) != 0) {
                    goto LABEL_320;
                  }
                }
              }
LABEL_148:
              if (v62) {
                goto LABEL_168;
              }
              uint64_t v81 = hlp_AppendItemRaw32(a1, &v184, (unsigned int *)&v183, (unsigned int *)&v183 + 1, 0x20u, 10);
              if ((v81 & 0x80000000) != 0) {
                goto LABEL_317;
              }
              int v82 = HIDWORD(v183) - 1;
              if (SHIDWORD(v183) > 1)
              {
                __int16 v83 = 0;
                int v84 = HIDWORD(v183) - 2;
                while (*(_DWORD *)(v184 + 32 * v84 + 12) > *(_DWORD *)&__s1[32 * v46 + 12])
                {
                  ++v83;
                  BOOL v85 = v84-- <= 0;
                  if (v85)
                  {
                    int v84 = -1;
                    goto LABEL_158;
                  }
                }
                LOWORD(v82) = v83;
LABEL_158:
                uint64_t v86 = (v84 + 1);
                if ((_WORD)v82)
                {
                  cstdlib_memmove((void *)(v184 + 32 * v86 + 32), (const void *)(v184 + 32 * v86), 32 * (unsigned __int16)v82);
                  uint64_t v87 = HIDWORD(v181);
                  if (HIDWORD(v181))
                  {
                    BOOL v88 = v182;
                    do
                    {
                      if (*v88 >= v86) {
                        ++*v88;
                      }
                      ++v88;
                      --v87;
                    }
                    while (v87);
                  }
                  goto LABEL_167;
                }
                int v82 = v84 + 1;
              }
              uint64_t v86 = v82;
LABEL_167:
              cstdlib_memcpy((void *)(v184 + 32 * v86), v49, 0x20uLL);
LABEL_168:
              int v47 = v169;
              BOOL v89 = *v49 == 0x4000 && (v169 & 0xFFFFFFFD) == 1;
              if (v89 && v186 - 1 > v164 && v49[8] != 36)
              {
                int v90 = *(_DWORD *)&__s1[32 * v46 + 12];
                unsigned int v91 = v90 - v188;
                unsigned int v92 = HIDWORD(v188) - (v90 - v188);
                unsigned __int16 v93 = v46;
                while (v186 > ++v93)
                {
                  int v94 = v187[8 * v93];
                  if (v94 == 36 || v94 == 7)
                  {
                    unsigned int v92 = v187[8 * v93 + 3] - v90;
                    break;
                  }
                }
                if (v92)
                {
                  uint64_t v81 = lid_Identify((int8x16_t *)a1, &v189[v91], v92);
                  if ((v81 & 0x80000000) != 0
                    || (uint64_t v81 = hlp_AppendLidResultAsMarkers(a1, &v184, (unsigned int *)&v183, (unsigned int *)&v183 + 1, (uint64_t *)&v182, (unsigned int *)&v181, (unsigned int *)&v181 + 1, v188 + v91, 0), (v81 & 0x80000000) != 0))
                  {
LABEL_317:
                    uint64_t Str = v81;
LABEL_320:
                    uint64_t v20 = 0;
                    goto LABEL_321;
                  }
                }
                goto LABEL_212;
              }
              if (*v49 != 0x4000 || v169 != 2) {
                goto LABEL_213;
              }
              if (v186 - 1 > v164 && v49[8] != 36)
              {
                uint64_t Str = hlp_AppendItemRaw32(a1, &v184, (unsigned int *)&v183, (unsigned int *)&v183 + 1, 0x20u, 10);
                if ((Str & 0x80000000) != 0) {
                  goto LABEL_320;
                }
                int v96 = HIDWORD(v183) - 1;
                if (SHIDWORD(v183) > 1)
                {
                  __int16 v97 = 0;
                  int v98 = HIDWORD(v183) - 2;
                  while (*(_DWORD *)(v184 + 32 * v98 + 12) > *(_DWORD *)&__s1[32 * v46 + 12])
                  {
                    ++v97;
                    BOOL v85 = v98-- <= 0;
                    if (v85)
                    {
                      int v98 = -1;
                      goto LABEL_201;
                    }
                  }
                  LOWORD(v96) = v97;
LABEL_201:
                  uint64_t v99 = (v98 + 1);
                  if ((_WORD)v96)
                  {
                    cstdlib_memmove((void *)(v184 + 32 * v99 + 32), (const void *)(v184 + 32 * v99), 32 * (unsigned __int16)v96);
                    uint64_t v100 = HIDWORD(v181);
                    if (HIDWORD(v181))
                    {
                      int v101 = v182;
                      do
                      {
                        if (*v101 >= v99) {
                          ++*v101;
                        }
                        ++v101;
                        --v100;
                      }
                      while (v100);
                    }
LABEL_210:
                    uint64_t v102 = v184 + 32 * v99;
                    long long v103 = *(_OWORD *)(v102 - 16);
                    *(_OWORD *)uint64_t v102 = *(_OWORD *)(v102 - 32);
                    *(_OWORD *)(v102 + 16) = v103;
                    *(_DWORD *)uint64_t v102 = 36;
                    uint64_t v104 = *(void *)(*(void *)(a1 + 16) + 8);
                    int v105 = cstdlib_strlen("unknown");
                    int v106 = (char *)heap_Alloc(v104, (v105 + 1));
                    uint64_t v159 = v102;
                    *(void *)(v102 + 24) = v106;
                    if (!v106) {
                      goto LABEL_320;
                    }
                    cstdlib_strcpy(v106, __dst);
LABEL_212:
                    int v47 = 0;
                    goto LABEL_213;
                  }
                  int v96 = v98 + 1;
                }
                uint64_t v99 = v96;
                goto LABEL_210;
              }
              int v47 = 2;
LABEL_213:
              unsigned int v164 = ++v46;
              if (v186 <= v46) {
                goto LABEL_220;
              }
            }
          }
          uint64_t v159 = 0;
          int v160 = v162;
        }
        else
        {
          uint64_t v159 = 0;
          int v160 = v35;
        }
LABEL_220:
        char v107 = "unknown";
        int v108 = v158;
        switch(v160)
        {
          case 1:
            break;
          case 2:
            char v107 = __dst;
            break;
          case 3:
            char v107 = "vceunkn";
            break;
          case 4:
            char v107 = "unknown:noautolid";
            break;
          default:
            char v107 = (char *)&unk_2206E31BA;
            int v108 = v158;
            break;
        }
        paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidon", v107);
        unsigned int v112 = HIDWORD(v183);
        if (HIDWORD(v183))
        {
          unsigned int v113 = 0;
          uint64_t v20 = 0;
          int v170 = 0;
          int v114 = 0;
          int v115 = 0;
          __s1a = "normal";
          while (1)
          {
            int v116 = *(_DWORD *)(v184 + 32 * (unsigned __int16)v115);
            switch(v116)
            {
              case 21:
                goto LABEL_296;
              case 34:
                int v170 = 1;
                goto LABEL_297;
              case 36:
                if (cstdlib_strcmp(*(const char **)(v184 + 32 * (unsigned __int16)v115 + 24), "unknown")
                  && cstdlib_strcmp(*(const char **)(v184 + 32 * (unsigned __int16)v115 + 24), "unknown:noautolid")
                  && cstdlib_strcmp(*(const char **)(v184 + 32 * (unsigned __int16)v115 + 24), "unknownint")
                  && cstdlib_strncmp(*(const char **)(v184 + 32 * (unsigned __int16)v115 + 24), "vceunkn", 7uLL)
                  && cstdlib_strcmp(*(const char **)(v184 + 32 * (unsigned __int16)v115 + 24), "unknownmem"))
                {
                  int v114 = 0;
                  __s1a = *(char **)(v184 + 32 * (unsigned __int16)v115++ + 24);
                }
                else
                {
                  HIDWORD(v183) = --v112;
                  if (v112 > v113)
                  {
                    cstdlib_memmove((void *)(v184 + 32 * (unsigned __int16)v115), (const void *)(v184 + 32 * (unsigned __int16)v115 + 32), 32 * (v112 - v113));
                    uint64_t v120 = HIDWORD(v181);
                    if (HIDWORD(v181))
                    {
                      uint64_t v121 = v182;
                      do
                      {
                        if (*v121 > v113) {
                          --*v121;
                        }
                        ++v121;
                        --v120;
                      }
                      while (v120);
                    }
                  }
                }
                goto LABEL_298;
            }
            if (v116 == 1 && v108 != 0) {
              break;
            }
LABEL_297:
            ++v115;
            unsigned int v112 = HIDWORD(v183);
LABEL_298:
            unsigned int v113 = (unsigned __int16)v115;
            if (v112 <= (unsigned __int16)v115) {
              goto LABEL_301;
            }
          }
          if (v170)
          {
            BOOL v118 = 0;
            BOOL v119 = 1;
          }
          else
          {
            int v165 = v114;
            uint64_t v166 = v20;
            uint64_t v122 = v184 + 32 * (unsigned __int16)v115;
            int v123 = v188;
            uint64_t v124 = *(void **)(*(void *)(a1 + 16) + 8);
            uint64_t v125 = v189;
            int v127 = *(_DWORD *)(v122 + 12);
            size_t v126 = *(unsigned int *)(v122 + 16);
            long long v128 = (char *)heap_Alloc((uint64_t)v124, (v126 + 1));
            if (v128)
            {
              uint64_t v129 = v128;
              int v163 = v127 - v123;
              cstdlib_strncpy(v128, &v125[v127 - v123], v126);
              v129[v126] = 0;
              unsigned int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v129, 0);
              unsigned int v131 = CurrentUtf8Offset + v126;
              if (CurrentUtf8Offset < CurrentUtf8Offset + v126)
              {
                unsigned int NextUtf8Offset = CurrentUtf8Offset;
                while (!utf8_BelongsToSet(6u, v129, NextUtf8Offset, v126))
                {
                  unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(v129, NextUtf8Offset);
                  if (NextUtf8Offset >= v131) {
                    goto LABEL_265;
                  }
                }
                heap_Free(v124, (uint64_t)v129);
                long long v140 = (char *)heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), v166, (*(_DWORD *)(v184 + 32 * (unsigned __int16)v115 + 16) + 7));
                if (!v140)
                {
                  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v141, v142, v143, v144, v156);
                  return 2345672714;
                }
                uint64_t v20 = (uint64_t)v140;
                cstdlib_strcpy(v140, "mlnum_");
                unsigned int v145 = *(_DWORD *)(v184 + 32 * (unsigned __int16)v115 + 16);
                int v108 = v158;
                if (v145)
                {
                  unsigned int v145 = 0;
                  int v146 = 0;
                  while (1)
                  {
                    int v147 = v189[v145 + v163];
                    if (v147 == 255) {
                      break;
                    }
                    *(unsigned char *)(v20 + v145 + 6) = v147;
                    unsigned int v145 = (unsigned __int16)++v146;
                    if (*(_DWORD *)(v184 + 32 * (unsigned __int16)v115 + 16) <= (unsigned __int16)v146) {
                      goto LABEL_286;
                    }
                  }
                  BOOL v118 = 1;
                }
                else
                {
LABEL_286:
                  unsigned __int16 __s = 0;
                  char v177 = 0;
                  if (*(_DWORD *)(a1 + 992)) {
                    __int16 v148 = 1;
                  }
                  else {
                    __int16 v148 = -1;
                  }
                  __int16 v178 = v148;
                  *(unsigned char *)(v20 + v145 + 6) = 0;
                  uint64_t v133 = (*(uint64_t (**)(void, void, const char *, uint64_t, char **, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", v20, &__s, &v178, &v177);
                  BOOL v118 = v178 == 0;
                  if ((v133 & 0x80000000) != 0) {
                    goto LABEL_316;
                  }
                }
                int v114 = v165;
                BOOL v119 = !v118;
                if (v118 && !v165)
                {
                  int v114 = 1;
                  if (cstdlib_strcmp(__s1a, "normal"))
                  {
                    BOOL v119 = 0;
LABEL_271:
                    uint64_t v133 = hlp_AppendItemRaw32(a1, &v184, (unsigned int *)&v183, (unsigned int *)&v183 + 1, 0x20u, 10);
                    if ((v133 & 0x80000000) != 0) {
                      goto LABEL_316;
                    }
                    cstdlib_memmove((void *)(v184 + 32 * (unsigned __int16)v115 + 32), (const void *)(v184 + 32 * (unsigned __int16)v115), 32 * (HIDWORD(v183) + ~v113));
                    uint64_t v134 = HIDWORD(v181);
                    if (HIDWORD(v181))
                    {
                      unsigned int v135 = v182;
                      do
                      {
                        if (*v135 >= v113) {
                          ++*v135;
                        }
                        ++v135;
                        --v134;
                      }
                      while (v134);
                    }
                    uint64_t v136 = v184 + 32 * (unsigned __int16)v115;
                    *(_DWORD *)uint64_t v136 = 36;
                    __int16 v137 = __s1a;
                    if (!v119) {
                      __int16 v137 = "normal";
                    }
                    *(void *)(v136 + 24) = v137;
                    uint64_t v138 = v184;
                    uint64_t v139 = v184 + 32 * (unsigned __int16)v115;
                    *(_DWORD *)(v139 + 4) = 0;
                    *(_DWORD *)(v139 + 8) = 0;
                    *(void *)(v139 + 12) = *(unsigned int *)(v138 + 32 * (v113 + 1) + 12);
                    ++v115;
                    goto LABEL_297;
                  }
LABEL_296:
                  int v170 = 0;
                  goto LABEL_297;
                }
                goto LABEL_268;
              }
LABEL_265:
              heap_Free(v124, (uint64_t)v129);
              BOOL v118 = 0;
              BOOL v119 = 1;
              int v108 = v158;
              uint64_t v20 = v166;
            }
            else
            {
              BOOL v118 = 0;
              BOOL v119 = 1;
              int v108 = v158;
            }
            int v114 = v165;
          }
LABEL_268:
          if (!v114 || v118)
          {
            int v114 = v118;
          }
          else
          {
            int v114 = 0;
            if (cstdlib_strcmp(__s1a, "normal")) {
              goto LABEL_271;
            }
          }
          goto LABEL_297;
        }
        uint64_t v20 = 0;
LABEL_301:
        uint64_t v133 = lidword_Identify(a1, v189, HIDWORD(v188), &v184, (unsigned int *)&v183, (unsigned int *)&v183 + 1, (uint64_t *)&v182, (unsigned int *)&v181, (unsigned int *)&v181 + 1);
        if ((v133 & 0x80000000) != 0)
        {
LABEL_316:
          uint64_t Str = v133;
LABEL_321:
          uint64_t v19 = v159;
          goto LABEL_26;
        }
        int v149 = HIDWORD(v183);
        if (HIDWORD(v183))
        {
          unsigned __int16 v150 = 0;
          do
          {
            unsigned __int16 v151 = v150;
            if (*(_DWORD *)(v184 + 32 * v150) == 36)
            {
              int v152 = cstdlib_strstr(*(char **)(v184 + 32 * v150 + 24), ":noautolid");
              if (v152) {
                *int v152 = 0;
              }
            }
            unsigned __int16 v150 = v151 + 1;
            int v149 = HIDWORD(v183);
          }
          while (HIDWORD(v183) > (unsigned __int16)(v151 + 1));
        }
        uint64_t v19 = v159;
        if (v157)
        {
          uint64_t v153 = (*(uint64_t (**)(void, void, unsigned char *))(*(void *)(a1 + 72) + 104))(*(void *)(a1 + 960), *(void *)(a1 + 968), v189);
          if ((v153 & 0x80000000) != 0)
          {
LABEL_315:
            uint64_t Str = v153;
            goto LABEL_26;
          }
          int v149 = HIDWORD(v183);
        }
        uint64_t v153 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 72) + 104))(*(void *)(a1 + 976), *(void *)(a1 + 984), v184, (32 * v149));
        if ((v153 & 0x80000000) == 0)
        {
          if (!HIDWORD(v188)
            || (uint64_t v153 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 72) + 96))(*(void *)(a1 + 928), *(void *)(a1 + 936)), (v153 & 0x80000000) == 0))
          {
            uint64_t v153 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 72) + 96))(*(void *)(a1 + 944), *(void *)(a1 + 952), 32 * v186);
          }
        }
        goto LABEL_315;
      }
      int v27 = v175;
      if (!v175)
      {
        *a5 = 0;
        goto LABEL_57;
      }
      if (!HIDWORD(v175)) {
        goto LABEL_54;
      }
      uint64_t InputOutputMarkers = hlp_GetInputOutputMarkers(a1, &v174, (void **)&v173, (int *)&v172 + 1, &v172, &v171);
      if ((InputOutputMarkers & 0x80000000) != 0)
      {
        uint64_t Str = InputOutputMarkers;
      }
      else
      {
        if (!v175 && *(_DWORD *)(a1 + 1004) == 1)
        {
          int v109 = (unsigned __int16)v172;
          if ((_WORD)v172)
          {
            uint64_t v110 = "unknown";
            while (1)
            {
              uint64_t v111 = (v109 - 1);
              if (LODWORD(v173[4 * v111]) == 36)
              {
                if (!cstdlib_strcmp(v173[4 * v111 + 3], "unknown")) {
                  goto LABEL_327;
                }
                if (!cstdlib_strcmp(v173[4 * v111 + 3], "unknown:noautolid"))
                {
                  uint64_t v110 = "unknown:noautolid";
                  goto LABEL_327;
                }
                if (!cstdlib_strncmp(v173[4 * v111 + 3], "vceunkn", 7uLL))
                {
                  uint64_t v110 = "vceunkn";
                  goto LABEL_327;
                }
                if (!cstdlib_strcmp(v173[4 * v111 + 3], "normal")) {
                  break;
                }
              }
              if (!(_WORD)--v109) {
                goto LABEL_44;
              }
            }
            uint64_t v110 = "normal";
LABEL_327:
            uint64_t v154 = &v173[4 * v111];
            uint64_t v155 = v154[2];
            *(_OWORD *)(a1 + 1816) = *(_OWORD *)v154;
            *(void *)(a1 + 1832) = v155;
            *(void *)(a1 + 1840) = v110;
          }
        }
LABEL_44:
        int v29 = HIDWORD(v172);
        if (*(_DWORD *)(a1 + 996)) {
          BOOL v30 = HIDWORD(v172) == 0;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30)
        {
          int v31 = 0;
          int v32 = 0;
          do
          {
            hlp_SetParamcTAHasUserUnknown(a1, (uint64_t)v174 + 32 * (unsigned __int16)v32++, v29 - v31);
            int v31 = (unsigned __int16)v32;
            int v29 = HIDWORD(v172);
          }
          while (HIDWORD(v172) > (unsigned __int16)v32);
        }
        uint64_t Str = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 72) + 120))(*(void *)(a1 + 976), *(void *)(a1 + 984), (32 * v172));
        uint64_t v173 = 0;
        if ((Str & 0x80000000) != 0) {
          goto LABEL_57;
        }
        if (!HIDWORD(v172)
          || (uint64_t Str = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 72) + 96))(*(void *)(a1 + 944), *(void *)(a1 + 952), (32 * HIDWORD(v172))), (Str & 0x80000000) == 0))
        {
          int v27 = v175;
LABEL_54:
          if (v27) {
            uint64_t Str = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 104), *(void *)(a1 + 72));
          }
          goto LABEL_57;
        }
      }
      if (v173) {
        (*(void (**)(void, void, void))(*(void *)(a1 + 72) + 120))(*(void *)(a1 + 976), *(void *)(a1 + 984), 0);
      }
LABEL_57:
      uint64_t v26 = v171;
      if (v171)
      {
        unsigned __int16 v25 = *(void **)(*(void *)(a1 + 16) + 8);
LABEL_59:
        heap_Free(v25, v26);
      }
    }
  }
  return Str;
}

uint64_t hlp_GetInputOutputMarkers(uint64_t a1, const void **a2, void **a3, int *a4, _DWORD *a5, void *a6)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  __src = 0;
  *a5 = 0;
  *a4 = 0;
  uint64_t v12 = (*(uint64_t (**)(void, void, const void **))(*(void *)(a1 + 72) + 88))(*(void *)(a1 + 944), *(void *)(a1 + 952), a2);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  *a4 = *a4 >> 5;
  cstdlib_strcpy(__dst, (const char *)&unk_2206E31BA);
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidon", &__src) & 0x80000000) != 0) {
    goto LABEL_30;
  }
  cstdlib_strcpy(__dst, __src);
  int v13 = cstdlib_strcmp(__src, "unknown");
  size_t v14 = cstdlib_strlen(__src);
  int v15 = cstdlib_strncmp(__src, "vceunkn", 7uLL);
  if (!cstdlib_strcmp(__src, "unknown:noautolid"))
  {
    int v17 = 4;
    goto LABEL_13;
  }
  int v16 = v13 == 0;
  if (v14 == 3) {
    int v16 = 2;
  }
  if (v15) {
    int v17 = v16;
  }
  else {
    int v17 = 3;
  }
  if (v17)
  {
LABEL_13:
    if (*a4 < 2) {
      goto LABEL_31;
    }
    uint64_t v19 = (const char **)*a2;
    if (*(_DWORD *)*a2 != 0x4000 || *((_DWORD *)v19 + 8) != 36) {
      goto LABEL_31;
    }
    if (cstdlib_strcmp(v19[7], "unknown"))
    {
      if (!cstdlib_strcmp(*((const char **)*a2 + 7), "vceunkn")) {
        goto LABEL_28;
      }
      int v20 = cstdlib_strcmp(*((const char **)*a2 + 7), "unknown:noautolid");
      uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 40);
      if (!v20)
      {
LABEL_26:
        unint64_t v22 = "unknown:noautolid";
LABEL_29:
        paramc_ParamSetStr(v21, (uint64_t)"lidon", v22);
        goto LABEL_30;
      }
      paramc_ParamSetStr(v21, (uint64_t)"lidon", __src);
      if (*((_DWORD *)*a2 + 16) != 36)
      {
LABEL_30:
        int v17 = 0;
        goto LABEL_31;
      }
      if (cstdlib_strcmp(*((const char **)*a2 + 11), "unknown"))
      {
        if (*((_DWORD *)*a2 + 16) == 36)
        {
          if (cstdlib_strncmp(*((const char **)*a2 + 11), "vceunkn", 7uLL))
          {
            if (*((_DWORD *)*a2 + 16) != 36 || cstdlib_strcmp(*((const char **)*a2 + 11), "unknown:noautolid")) {
              goto LABEL_30;
            }
            uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 40);
            goto LABEL_26;
          }
LABEL_28:
          uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 40);
          unint64_t v22 = "vceunkn";
          goto LABEL_29;
        }
        goto LABEL_30;
      }
    }
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 40);
    unint64_t v22 = "unknown";
    goto LABEL_29;
  }
LABEL_31:
  uint64_t v18 = (*(uint64_t (**)(void, void, void **, void))(*(void *)(a1 + 72) + 112))(*(void *)(a1 + 976), *(void *)(a1 + 984), a3, (32 * *a4 + 160));
  if ((v18 & 0x80000000) == 0)
  {
    uint64_t v23 = *a4;
    if (v23)
    {
      if (*(_DWORD *)(a1 + 1816) == 36 && (uint64_t v24 = *a2, *(_DWORD *)*a2 == 0x4000))
      {
        unsigned __int16 v25 = *a3;
        long long v26 = v24[1];
        *unsigned __int16 v25 = *v24;
        v25[1] = v26;
        int v27 = *a3;
        v27[8] = *(_DWORD *)(a1 + 1816);
        *((void *)v27 + 7) = *(void *)(a1 + 1840);
        *((_DWORD *)*a3 + 11) = *((_DWORD *)*a2 + 3);
        cstdlib_memset((void *)(a1 + 1816), 0, 0x20uLL);
        int v28 = *a4;
        if (*a4 >= 2)
        {
          int v29 = (char *)*a3 + 64;
          BOOL v30 = (char *)*a2;
LABEL_44:
          cstdlib_memcpy(v29, v30 + 32, 32 * (v28 - 1));
          int v28 = *a4;
        }
      }
      else
      {
        if (v17 == 2)
        {
          int v34 = *a3;
          long long v35 = *((_OWORD *)*a2 + 1);
          *int v34 = *(_OWORD *)*a2;
          v34[1] = v35;
          *((_DWORD *)*a3 + 8) = 36;
          uint64_t v36 = *(void *)(*(void *)(a1 + 16) + 8);
          int v37 = cstdlib_strlen("unknown");
          *((void *)*a3 + 7) = heap_Alloc(v36, (v37 + 1));
          uint64_t v38 = (char *)*((void *)*a3 + 7);
          if (!v38) {
            return 2345672714;
          }
          cstdlib_strcpy(v38, __src);
          *a6 = *((void *)*a3 + 7);
        }
        else
        {
          if (v17 != 1)
          {
            cstdlib_memcpy(*a3, *a2, 32 * v23);
            int v40 = *a4;
            goto LABEL_47;
          }
          int v31 = *a3;
          long long v32 = *((_OWORD *)*a2 + 1);
          *int v31 = *(_OWORD *)*a2;
          v31[1] = v32;
          int v33 = *a3;
          v33[8] = 36;
          *((void *)v33 + 7) = "unknown";
        }
        BOOL v30 = (char *)*a2;
        uint64_t v39 = (char *)*a3;
        *((_DWORD *)*a3 + 11) = *((_DWORD *)*a2 + 3);
        int v28 = *a4;
        if (*a4 >= 2)
        {
          int v29 = v39 + 64;
          goto LABEL_44;
        }
      }
      int v40 = v28 + 1;
LABEL_47:
      *a5 = v40;
    }
  }
  return v18;
}

uint64_t hlp_SetParamcTAHasUserUnknown(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(result + 996))
  {
    if (*(_DWORD *)a2 == 36 && a3 != 0)
    {
      uint64_t v6 = result;
      unsigned __int16 v7 = 0;
      while (1)
      {
        unsigned __int16 v8 = v7;
        if (*(_DWORD *)(a2 + 12) == *(_DWORD *)(a2 + 32 * v7 + 12) && *(_DWORD *)(a2 + 32 * v7) == 36)
        {
          uint64_t v9 = a2 + 32 * v7;
          int v11 = *(const char **)(v9 + 24);
          uint64_t v10 = (const char **)(v9 + 24);
          if (!cstdlib_strcmp(v11, "unknown")) {
            break;
          }
          uint64_t result = cstdlib_strcmp(*v10, "unknown:noautolid");
          if (!result) {
            break;
          }
        }
        unsigned __int16 v7 = v8 + 1;
        if (a3 <= (unsigned __int16)(v8 + 1)) {
          return result;
        }
      }
      if (!cstdlib_strcmp(*(const char **)(a2 + 24), "ins_unknown")) {
        cstdlib_strcpy(*(char **)(a2 + 24), *v10);
      }
      uint64_t v12 = *(void *)(*(void *)(v6 + 16) + 40);
      return paramc_ParamSetStr(v12, (uint64_t)"hasuserunknowninserted", "yes");
    }
  }
  return result;
}

uint64_t fe_lid_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62400, 136040) & 0x80000000) != 0) {
    return 2345672712;
  }
  if (*(_DWORD *)(a1 + 996) == 1) {
    *(_DWORD *)(a1 + 996) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 72);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 104), v3);
}

char *AdjustLanguageGroupMappingLID2(char *result, char *__s1)
{
  if (*(_WORD *)result)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = cstdlib_strstr(__s1, (const char *)(*((void *)v3 + 2) + v4));
      if (!result)
      {
        cstdlib_strcpy(__dst, (const char *)(*((void *)v3 + 2) + v4));
        __dst[2] = 0;
        uint64_t result = cstdlib_strstr(__s1, __dst);
        if (result)
        {
          if (result == __s1 || *(result - 1) == 44) {
            uint64_t result = cstdlib_strncpy((char *)(*((void *)v3 + 2) + v4), result, 3uLL);
          }
        }
      }
      ++v5;
      v4 += 8;
    }
    while (v5 < *(unsigned __int16 *)v3);
  }
  return result;
}

uint64_t fe_lid_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2345672705;
  }
  uint64_t result = 0;
  *a2 = &IFeLid;
  return result;
}

uint64_t hlp_FillDicLMLanguages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, char *a7, __int16 a8)
{
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = a8;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a5 + 96))(a3, a4, "lidcfg", "languages", &__c[3], &__c[1], __c);
  if ((v12 & 0x80000000) == 0)
  {
    if (!*(_WORD *)&__c[1])
    {
      *(_WORD *)(a2 + 2) = 0;
      *(void *)(a2 + 8) = 0;
      return v12;
    }
    int v13 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v13) {
      *int v13 = 0;
    }
    *(_WORD *)(a2 + 2) = 1;
    for (unsigned __int16 i = **(char ***)&__c[3]; ; unsigned __int16 i = v15 + 1)
    {
      int v15 = cstdlib_strchr(i, 44);
      if (!v15) {
        break;
      }
      ++*(_WORD *)(a2 + 2);
    }
    uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), *(unsigned __int16 *)(a2 + 2), 24);
    *(void *)(a2 + 8) = v16;
    if (!v16)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_LID", 48000, 0, v17, v18, v19, v20, v32);
      return 2345672714;
    }
    uint64_t v21 = **(const char ***)&__c[3];
    unint64_t v22 = cstdlib_strchr(**(char ***)&__c[3], 44);
    uint64_t v23 = v22;
    if (v22) {
      *unint64_t v22 = 0;
    }
    if (*(_WORD *)(a2 + 2))
    {
      unsigned int v33 = v12;
      uint64_t v24 = 0;
      while (1)
      {
        cstdlib_strcpy((char *)(*(void *)(a2 + 8) + 24 * v24), v21);
        cstdlib_strcpy((char *)(*(void *)(a2 + 8) + 24 * v24 + 8), v21);
        *(_DWORD *)(*(void *)(a2 + 8) + 24 * v24 + 16) = 0;
        cstdlib_strcpy(__dst, v21);
        __dst[2] = 0;
        if (!a7) {
          goto LABEL_17;
        }
        unsigned __int16 v25 = cstdlib_strstr(a7, __dst);
        long long v26 = v25;
        if (v25)
        {
          if (v25 != a7) {
            break;
          }
        }
LABEL_18:
        if (!a6 || v26 || (v27 = cstdlib_strstr(a6, __dst), (long long v26 = v27) == 0) || v27 == a6)
        {
          if (!v26)
          {
LABEL_25:
            uint64_t v28 = 0;
            while (cstdlib_strcmp(&FE_LID_LANG_2_LANG_GROUP[v28 + 4], v21))
            {
              v28 += 8;
              if (v28 == 32) {
                goto LABEL_32;
              }
            }
            long long v26 = cstdlib_strstr(a6, &FE_LID_LANG_2_LANG_GROUP[v28]);
            if (v26) {
              goto LABEL_30;
            }
LABEL_32:
            *(_DWORD *)(*(void *)(a2 + 8) + 24 * v24 + 20) = 0;
            if (!v23) {
              goto LABEL_35;
            }
LABEL_33:
            uint64_t v21 = v23 + 1;
            BOOL v30 = cstdlib_strchr(v23 + 1, 44);
            uint64_t v23 = v30;
            if (v30) {
              *BOOL v30 = 0;
            }
            goto LABEL_35;
          }
        }
        else if (*(v27 - 1) != 44)
        {
          goto LABEL_25;
        }
LABEL_30:
        uint64_t v29 = *(void *)(a2 + 8) + 24 * v24;
        *(_DWORD *)(v29 + 20) = 1;
        cstdlib_strncpy((char *)(v29 + 8), v26, 3uLL);
        if (v23) {
          goto LABEL_33;
        }
LABEL_35:
        if (++v24 >= (unint64_t)*(unsigned __int16 *)(a2 + 2)) {
          return v33;
        }
      }
      if (*(v25 - 1) == 44) {
        goto LABEL_30;
      }
LABEL_17:
      long long v26 = 0;
      goto LABEL_18;
    }
  }
  return v12;
}

unint64_t hlp_FindModelLng(uint64_t a1, char *__s1, int a3)
{
  if (!a3)
  {
    if (*(_WORD *)(a1 + 1018))
    {
      uint64_t v8 = 0;
      unint64_t v6 = 0;
      unsigned __int16 v7 = (void *)(a1 + 1024);
      while (cstdlib_strcmp(__s1, (const char *)(*v7 + v8)))
      {
        ++v6;
        v8 += 24;
        if (v6 >= *(unsigned __int16 *)(a1 + 1018)) {
          return 0;
        }
      }
      return *v7 + 24 * v6;
    }
    return 0;
  }
  if (!*(_WORD *)(a1 + 1066)) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unsigned __int16 v7 = (void *)(a1 + 1072);
  while (cstdlib_strcmp(__s1, (const char *)(*v7 + v5)))
  {
    ++v6;
    v5 += 24;
    if (v6 >= *(unsigned __int16 *)(a1 + 1066)) {
      return 0;
    }
  }
  return *v7 + 24 * v6;
}

uint64_t hlp_SetActiveLngs(uint64_t a1, char *__s)
{
  *(void *)__src = 0;
  uint64_t v4 = *(void *)(a1 + 1120);
  if (v4)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v4);
    *(void *)(a1 + 1120) = 0;
    *(_WORD *)(a1 + 1112) = 0;
  }
  if (!__s || !*__s) {
    return 0;
  }
  if (cstdlib_strlen(__s))
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    LODWORD(v7) = 1;
    do
    {
      if (__s[v5] == 44) {
        uint64_t v7 = (v7 + 1);
      }
      else {
        uint64_t v7 = v7;
      }
      uint64_t v5 = v6;
    }
    while (cstdlib_strlen(__s) > v6++);
  }
  else
  {
    uint64_t v7 = 1;
  }
  uint64_t v9 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v7, 16);
  *(void *)(a1 + 1120) = v9;
  if (v9)
  {
    cstdlib_strlen(__s);
    uint64_t v14 = 0;
    LODWORD(ModelLng) = 0;
    int v16 = 0;
    for (unsigned int i = 1; ; ++i)
    {
      int v18 = __s[v14];
      if (v18 != 44 && v18 != 0)
      {
        if (ModelLng > 2) {
          int v16 = 1;
        }
        else {
          __src[ModelLng + 4] = ssft_tolower(v18);
        }
        LODWORD(ModelLng) = ModelLng + 1;
        goto LABEL_35;
      }
      if (ModelLng == 3)
      {
        lid_make_language_group(__src, &__src[4]);
        unint64_t ModelLng = hlp_FindModelLng(a1, &__src[4], 1);
        if (!ModelLng && (unint64_t ModelLng = hlp_FindModelLng(a1, __src, 1)) == 0
          || !*(_DWORD *)(ModelLng + 16) && !*(_DWORD *)(ModelLng + 20))
        {
          unint64_t v20 = hlp_FindModelLng(a1, &__src[4], 0);
          if (!v20)
          {
            unint64_t v20 = hlp_FindModelLng(a1, __src, 0);
            if (!v20)
            {
              if (!ModelLng)
              {
                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Language \"%s\" cannot be added to the language identifier active languages: not supported by the Vocalizer models", v21, v22, v23, (uint64_t)&__src[4]);
                goto LABEL_35;
              }
LABEL_38:
              LODWORD(ModelLng) = 0;
              goto LABEL_35;
            }
          }
          if (!*(_DWORD *)(v20 + 16) && !*(_DWORD *)(v20 + 20)) {
            goto LABEL_38;
          }
        }
        cstdlib_strcpy((char *)(*(void *)(a1 + 1120) + 16 * *(unsigned __int16 *)(a1 + 1112)), &__src[4]);
        cstdlib_strcpy((char *)(*(void *)(a1 + 1120) + 16 * *(unsigned __int16 *)(a1 + 1112) + 8), __src);
        LODWORD(ModelLng) = 0;
        ++*(_WORD *)(a1 + 1112);
      }
      else
      {
        LODWORD(ModelLng) = 0;
        int v16 = 1;
      }
LABEL_35:
      uint64_t v14 = i;
      if (cstdlib_strlen(__s) < i)
      {
        if (v16) {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48005, (uint64_t)"%s%s", v25, v26, v27, v28, "languageCodeList");
        }
        return 0;
      }
    }
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v10, v11, v12, v13, v30);
  return 2345672714;
}

uint64_t hlp_AppendLidResultAsMarkers(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, uint64_t *a5, unsigned int *a6, unsigned int *a7, int a8, const char *a9)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v82 = *(unsigned __int16 *)(a1 + 1890);
  if (!*(_WORD *)(a1 + 1890)) {
    return 0;
  }
  uint64_t v10 = 0;
  char __s2 = (char *)(a1 + 1196);
  uint64_t v79 = (_DWORD *)(a1 + 1128);
  uint64_t v80 = (_DWORD *)(a1 + 1140);
  while (2)
  {
    int v11 = *(_DWORD *)(a1 + 1008);
    uint64_t v86 = *(void *)(a1 + 1896);
    uint64_t v87 = v10;
    uint64_t v12 = v86 + 56 * v10;
    unsigned int v15 = *(unsigned __int16 *)(v12 + 10);
    uint64_t v13 = (unsigned __int16 *)(v12 + 10);
    uint64_t v14 = v15;
    BOOL v85 = (int *)(v86 + 56 * v10);
    int v16 = (uint64_t *)(v85 + 4);
    uint64_t v17 = *((void *)v85 + 2);
    int v93 = 0;
    long long v92 = 0u;
    memset(v91, 0, sizeof(v91));
    memset(__b, 0, sizeof(__b));
    __src = 0;
    uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"lidoriginalvoice", &__src);
    if ((Str & 0x80000000) != 0)
    {
      uint64_t Str = 0;
      __src = 0;
      if (!v14) {
        goto LABEL_50;
      }
    }
    else if (!v14)
    {
      goto LABEL_50;
    }
    int v84 = v13;
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = *(void *)(v17 + 32 * v19);
      if (v19 && *(_DWORD *)(a1 + 1200))
      {
        if (LH_stricmp(*(char **)(v17 + 32 * v19), *(char **)(a1 + 1912))) {
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t ModelLng = hlp_FindModelLng(a1, *(char **)(v17 + 32 * v19), 1);
        if (!ModelLng || (v11 || !*(_DWORD *)(ModelLng + 16)) && (!v11 || !*(_DWORD *)(ModelLng + 20)))
        {
          unint64_t v22 = hlp_FindModelLng(a1, (char *)v20, 0);
          if (!v22 || (v11 || !*(_DWORD *)(v22 + 16)) && (!v11 || !*(_DWORD *)(v22 + 20))) {
            goto LABEL_46;
          }
        }
      }
      cstdlib_memset(__b, 0, 0x154uLL);
      int v23 = *(unsigned __int8 *)(v20 + 2);
      if (*(void *)(a1 + 1120)) {
        break;
      }
      if (v11 || !*(void *)(a1 + 96)) {
        goto LABEL_48;
      }
      if (v23 == 120) {
        uint64_t v28 = (char *)&v92;
      }
      else {
        uint64_t v28 = (char *)v91;
      }
      cstdlib_strcpy(v28, (const char *)v20);
      if (__src) {
        cstdlib_strcpy((char *)&v91[4] + 8, __src);
      }
      if (((*(uint64_t (**)(void, void, void, void, _OWORD *))(*(void *)(a1 + 96) + 112))(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(*(void *)(a1 + 16) + 24), *(void *)(*(void *)(a1 + 16) + 40), __b) & 0x80000000) == 0)goto LABEL_48; {
      cstdlib_strcpy((char *)&v91[4] + 8, (const char *)&unk_2206E31BA);
      }
      if (((*(uint64_t (**)(void, void, void, void, _OWORD *))(*(void *)(a1 + 96) + 96))(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(*(void *)(a1 + 16) + 24), *(void *)(*(void *)(a1 + 16) + 40), __b) & 0x80000000) == 0)goto LABEL_48; {
LABEL_46:
      }
      if (++v19 == v14) {
        goto LABEL_49;
      }
    }
    if (!*(_WORD *)(a1 + 1112)) {
      goto LABEL_46;
    }
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *(void *)(a1 + 1120);
      uint64_t v27 = (const char *)(v23 == 120 ? v26 + v24 + 8 : v26 + v24);
      if (!cstdlib_strcmp((const char *)v20, v27))
      {
        if (v11 || !*(void *)(a1 + 96)) {
          break;
        }
        cstdlib_strcpy((char *)v91, (const char *)(*(void *)(a1 + 1120) + v24));
        if (__src) {
          cstdlib_strcpy((char *)&v91[4] + 8, __src);
        }
        if (((*(uint64_t (**)(void, void, void, void, _OWORD *))(*(void *)(a1 + 96) + 112))(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(*(void *)(a1 + 16) + 24), *(void *)(*(void *)(a1 + 16) + 40), __b) & 0x80000000) == 0)break; {
        cstdlib_strcpy((char *)&v91[4] + 8, (const char *)&unk_2206E31BA);
        }
        if (((*(uint64_t (**)(void, void, void, void, _OWORD *))(*(void *)(a1 + 96) + 96))(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(*(void *)(a1 + 16) + 24), *(void *)(*(void *)(a1 + 16) + 40), __b) & 0x80000000) == 0)break; {
      }
        }
      ++v25;
      v24 += 16;
      if (v25 >= *(unsigned __int16 *)(a1 + 1112)) {
        goto LABEL_46;
      }
    }
LABEL_48:
    uint64_t Str = 0;
    uint64_t v14 = (unsigned __int16)v19;
LABEL_49:
    uint64_t v13 = v84;
    int v16 = (uint64_t *)(v85 + 4);
LABEL_50:
    uint64_t v29 = v87;
    if (v14 >= *v13) {
      goto LABEL_84;
    }
    unint64_t v33 = hlp_FindModelLng(a1, *(char **)(*v16 + 32 * v14), *(_DWORD *)(a1 + 992));
    int v34 = v79;
    if (*(_DWORD *)(a1 + 992))
    {
      uint64_t v35 = *v16;
      unsigned int v36 = *(_DWORD *)(*v16 + 32 * v14 + 8);
      int v34 = v80;
      if (v36)
      {
        unsigned int v37 = v36 / *(unsigned __int16 *)(v86 + 56 * v87 + 24);
        unsigned int v38 = *(_DWORD *)(a1 + 1148);
        BOOL v39 = v38 >= v37;
        unsigned int v40 = v38 - v37;
        if (!v39) {
          unsigned int v40 = 0;
        }
        *(_DWORD *)(a1 + 1192) = *(_DWORD *)(a1 + 1144) + v40;
        cstdlib_memcpy(__s2, *(const void **)(v35 + 32 * v14), 4uLL);
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Setting bias %u: %s", v41, v42, v43, *(unsigned int *)(a1 + 1192));
        int v34 = v80;
      }
    }
    if (*v34
      && (!*(_WORD *)(v86 + 56 * v87 + 26)
       || v34[1] <= *(unsigned __int16 *)(v86 + 56 * v87 + 26)
       && v34[2] >= *(unsigned __int16 *)(v86 + 56 * v87 + 30)))
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Rejection for message: %u %u, %u %u, %u %u", v30, v31, v32, v14);
      goto LABEL_84;
    }
    uint64_t appended = hlp_AppendItemRaw32(a1, a2, a3, a4, 0x20u, 10);
    if ((appended & 0x80000000) != 0) {
      return appended;
    }
    uint64_t v48 = *a2 + 32 * (*a4 - 1);
    if (!*(_DWORD *)(a1 + 996) || !*(_DWORD *)(a1 + 1188))
    {
LABEL_66:
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Identified language for segment %u: %s", v45, v46, v47, v29);
      if (v33)
      {
        uint64_t v60 = (const char *)(v33 + 8);
        int v61 = cstdlib_strlen(v60);
        if (a9) {
          unsigned int v62 = v61 + cstdlib_strlen(a9) + 6;
        }
        else {
          unsigned int v62 = v61 + 5;
        }
        unsigned int v63 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), v62);
        if (v63)
        {
          int v64 = v63;
          cstdlib_strcpy(v63, v60);
          if (*(_DWORD *)(a1 + 1008)) {
            unsigned __int16 v65 = "_lid";
          }
          else {
            unsigned __int16 v65 = "_vli";
          }
          cstdlib_strcat(v64, v65);
          if (a9) {
            cstdlib_strcat(v64, a9);
          }
          *(void *)(v48 + 24) = v64;
          *(void *)uint64_t v48 = 36;
          *(_DWORD *)(v48 + 8) = 0;
          int v66 = *v85;
          *(_DWORD *)(v48 + 12) = *v85 + a8;
          *(_DWORD *)(v48 + 16) = *(_DWORD *)(v86 + 56 * v29 + 4) - v66;
          if (*(_DWORD *)(a1 + 996) && *(_DWORD *)(a1 + 1188))
          {
            uint64_t appended = hlp_AppendItemRaw32(a1, a5, a6, a7, 4u, 10);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
            *(_DWORD *)(*a5 + 4 * (*a7 - 1)) = *a4 - 2;
            uint64_t v67 = a1;
            uint64_t v68 = a5;
            unsigned __int8 v69 = a6;
          }
          else
          {
            uint64_t v67 = a1;
            uint64_t v68 = a5;
            unsigned __int8 v69 = a6;
          }
          uint64_t appended = hlp_AppendItemRaw32(v67, v68, v69, a7, 4u, 10);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t Str = 0;
          *(_DWORD *)(*a5 + 4 * (*a7 - 1)) = *a4 - 1;
LABEL_84:
          uint64_t v10 = v29 + 1;
          if (v10 == v82) {
            return Str;
          }
          continue;
        }
        uint64_t v70 = 48000;
        uint64_t Str = 2345672714;
      }
      else
      {
        uint64_t Str = 2345672711;
        uint64_t v70 = 48001;
      }
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", v70, 0, v56, v57, v58, v59, v72);
      return Str;
    }
    break;
  }
  uint64_t appended = hlp_AppendItemRaw32(a1, a2, a3, a4, 0x20u, 10);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t v49 = *a2;
  unsigned int v50 = *a4;
  uint64_t v51 = *a2 + 32 * (*a4 - 1);
  *(void *)uint64_t v51 = 42;
  *(_DWORD *)(v51 + 8) = 0;
  int v52 = *v85;
  *(_DWORD *)(v51 + 12) = *v85 + a8;
  *(_DWORD *)(v51 + 16) = *(_DWORD *)(v86 + 56 * v87 + 4) - v52;
  LH_utoa(*(_DWORD *)(a1 + 1192), __s1, 0xAu);
  cstdlib_strcat(__s1, ",");
  cstdlib_strcat(__s1, __s2);
  uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 8);
  int v54 = cstdlib_strlen(__s1);
  int v55 = (char *)heap_Alloc(v53, (v54 + 1));
  *(void *)(v51 + 24) = v55;
  if (v55)
  {
    uint64_t v48 = v49 + 32 * (v50 - 2);
    cstdlib_strcpy(v55, __s1);
    uint64_t v29 = v87;
    goto LABEL_66;
  }
  return 2345672714;
}

uint64_t fe_lid_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2345672711;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_lid_ClassClose()
{
  return 0;
}

uint64_t fe_lid_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62400, 136040) & 0x80000000) != 0) {
    return 2345672712;
  }
  fe_lid_HlpClose(a1);

  return fe_lid_HlpOpen(a1);
}

uint64_t lidmde_ParseStemmingRules(uint64_t a1)
{
  uint64_t v2 = a1 + 136000;
  uint64_t v3 = *(char **)(a1 + 136016);
  uint64_t v4 = cstdlib_strchr(v3, 59);
  uint64_t v5 = 2;
  if (v4)
  {
    do
    {
      uint64_t v4 = cstdlib_strchr(v4 + 1, 59);
      LOWORD(v5) = v5 + 1;
    }
    while (v4);
    uint64_t v5 = (unsigned __int16)v5;
  }
  uint64_t v6 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v5, 8);
  *(void *)(v2 + 24) = v6;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v12 = heap_Calloc(*(void **)(v11 + 8), v5, 8);
  *(void *)(v2 + 32) = v12;
  if (!v12)
  {
    uint64_t v11 = *(void *)(a1 + 16);
LABEL_15:
    log_OutPublic(*(void *)(v11 + 32), (uint64_t)"FE_LID", 48000, 0, v7, v8, v9, v10, v23);
    return 2345672714;
  }
  uint64_t v13 = cstdlib_strchr(v3, 59);
  if (v13)
  {
    uint64_t v14 = v13;
    LOWORD(v15) = 0;
    unsigned __int16 v16 = 0;
    while (1)
    {
      *uint64_t v14 = 0;
      uint64_t v17 = cstdlib_strchr(v3, 44);
      if (!v17) {
        return 2345672711;
      }
      *uint64_t v17 = 0;
      int v18 = v17 + 1;
      *(void *)(*(void *)(v2 + 24) + 8 * v16) = v3;
      *(void *)(*(void *)(v2 + 32) + 8 * v16) = v18;
      uint64_t v3 = v14 + 1;
      if ((unsigned __int16)((_WORD)v14 - (_WORD)v18) <= (unsigned __int16)v15) {
        unsigned int v15 = (unsigned __int16)v15;
      }
      else {
        unsigned int v15 = (unsigned __int16)((_WORD)v14 - (_WORD)v18);
      }
      uint64_t v14 = cstdlib_strchr(v14 + 1, 59);
      ++v16;
      if (!v14) {
        goto LABEL_17;
      }
    }
  }
  unsigned __int16 v16 = 0;
  unsigned int v15 = 0;
LABEL_17:
  uint64_t v20 = cstdlib_strchr(v3, 44);
  if (!v20) {
    return 2345672711;
  }
  *uint64_t v20 = 0;
  uint64_t v21 = v20 + 1;
  *(void *)(*(void *)(v2 + 24) + 8 * v16) = v3;
  *(void *)(*(void *)(v2 + 32) + 8 * v16) = v20 + 1;
  if (v15 <= (unsigned __int16)cstdlib_strlen(v20 + 1)) {
    LOWORD(v15) = cstdlib_strlen(v21);
  }
  uint64_t result = 0;
  *(_WORD *)uint64_t v2 = v15;
  uint64_t v22 = (unsigned __int16)(v16 + 1);
  *(void *)(*(void *)(v2 + 24) + 8 * v22) = 0;
  *(void *)(*(void *)(v2 + 32) + 8 * v22) = 0;
  return result;
}

uint64_t lidmde_MainLangPlusSomeOtherLangs(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  if (a1[a2]) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  while (!v4 || !*a1)
  {
    ++a1;
    --v4;
    if (!--v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t lidmde_SingleLang(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    int v3 = 0xFFFF;
    do
    {
      if (*(_DWORD *)(a1 + 4 * v2))
      {
        if (v3 != 0xFFFF) {
          goto LABEL_8;
        }
        int v3 = (unsigned __int16)v2;
      }
      ++v2;
    }
    while (a2 != v2);
  }
  else
  {
LABEL_8:
    LOWORD(v3) = -1;
  }
  return (__int16)v3;
}

uint64_t lidmde_FindLangs(uint64_t a1, uint64_t a2, __int16 a3, const char *a4, __int16 a5, _DWORD *a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  unsigned int v15 = (unsigned __int16 *)(a1 + 136000);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Start ML2 LID MDE : %s", (uint64_t)a6, (uint64_t)a7, a8, a2);
  __s1 = (char *)a2;
  __int16 v48 = a5;
  unsigned int v16 = (unsigned __int16)(a3 - a2);
  if (v16 <= (unsigned __int16)(a5 - (_WORD)a4)) {
    unsigned int v16 = (unsigned __int16)(a5 - (_WORD)a4);
  }
  uint64_t v17 = heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), v16 + *v15 + 1);
  if (v17)
  {
    uint64_t v22 = (char *)v17;
    if (*(_WORD *)(a1 + 1928)) {
      bzero(a6, 4 * *(unsigned __int16 *)(a1 + 1928));
    }
    if (**((void **)v15 + 3))
    {
      __int16 v44 = a3;
      uint64_t v23 = 0;
      int v24 = 0;
      while (1)
      {
        cstdlib_strcpy(v22, "");
        int v49 = 0;
        uint64_t v25 = lidmde_StemLookup2(a1, a4, v48, *(const char **)(*((void *)v15 + 3) + 8 * v23), *(char **)(*((void *)v15 + 4) + 8 * v23), v22, a6, &v49);
        if ((v25 & 0x80000000) != 0) {
          goto LABEL_43;
        }
        if (!v49)
        {
          if (!cstdlib_strcmp(__s1, a4)) {
            goto LABEL_20;
          }
          uint64_t v25 = lidmde_StemLookup2(a1, __s1, v44, *(const char **)(*((void *)v15 + 3) + 8 * v23), *(char **)(*((void *)v15 + 4) + 8 * v23), v22, a6, &v49);
          if ((v25 & 0x80000000) != 0) {
            goto LABEL_43;
          }
          if (!v49)
          {
LABEL_20:
            uint64_t v30 = *(void *)(a1 + 1088);
            *a7 = 0;
            if (!lidmde_HasVowelWord(*((char **)v15 + 1), (unsigned __int8 *)v22)
              || (int)Utf8_Utf8NbrOfSymbols(v22) < v15[1])
            {
              uint64_t v25 = 0;
LABEL_23:
              BOOL v27 = *a7 == 0;
              goto LABEL_24;
            }
            memset(v50, 0, 30);
            uint64_t v25 = calcWScore(a1, (uint64_t)v22, (uint64_t)"merwfrq_latn", 1, *(unsigned __int16 *)(v30 + 8), v51, (uint64_t)v50);
            if ((v25 & 0x80000000) != 0) {
              goto LABEL_43;
            }
            if (!*(_WORD *)(v30 + 8)) {
              goto LABEL_23;
            }
            int v34 = 0;
            unint64_t v35 = 0;
            uint64_t v45 = v30;
            int v46 = v24;
            do
            {
              if (v51[v35])
              {
                unsigned int v36 = v22;
                unsigned int v37 = v15;
                unsigned int v38 = a4;
                unsigned __int16 v39 = *(_WORD *)(a1 + 1928);
                if (v39)
                {
                  uint64_t v40 = 0;
                  for (unint64_t i = 0; i < v39; ++i)
                  {
                    if (v35 == *(unsigned __int16 *)(*(void *)(a1 + 1952) + 2 * i))
                    {
                      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) stem found as %s", v31, v32, v33, *(void *)(a1 + 1936) + v40);
                      int v34 = 1;
                      a6[i] = 1;
                      *a7 = 0;
                      unsigned __int16 v39 = *(_WORD *)(a1 + 1928);
                    }
                    v40 += 8;
                  }
                }
                a4 = v38;
                unsigned int v15 = v37;
                uint64_t v22 = v36;
                uint64_t v30 = v45;
                int v24 = v46;
                if (!v34) {
                  *a7 = 1;
                }
              }
              ++v35;
            }
            while (v35 < *(unsigned __int16 *)(v30 + 8));
            int v49 = v34;
            BOOL v27 = *a7 == 0;
            if (!v34) {
              goto LABEL_24;
            }
          }
        }
        uint64_t v26 = *(unsigned __int16 *)(a1 + 1928);
        BOOL v27 = 1;
        if (*(_WORD *)(a1 + 1928))
        {
          uint64_t v28 = *(unsigned __int16 *)(a1 + 1930);
          if (a6[v28])
          {
            uint64_t v29 = a6;
            while (!v28 || !*v29)
            {
              ++v29;
              --v28;
              if (!--v26)
              {
                BOOL v27 = 1;
                goto LABEL_24;
              }
            }
            goto LABEL_43;
          }
        }
LABEL_24:
        uint64_t v23 = (unsigned __int16)++v24;
        if (!*(void *)(*((void *)v15 + 3) + 8 * (unsigned __int16)v24) || !v27) {
          goto LABEL_43;
        }
      }
    }
    uint64_t v25 = 0;
LABEL_43:
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v22);
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v18, v19, v20, v21, v43);
    return 2345672714;
  }
  return v25;
}

uint64_t lidmde_StemLookup2(uint64_t a1, const char *a2, __int16 a3, const char *a4, char *__s, char *a6, _DWORD *a7, _DWORD *a8)
{
  cstdlib_strlen(__s);
  uint64_t v16 = 0;
  unsigned __int16 v17 = a3 - (_WORD)a2 - cstdlib_strlen(a4);
  unsigned __int8 __c = 0;
  BOOL v27 = 0;
  if ((v17 & 0x8000) == 0)
  {
    if (cstdlib_strcmp(&a2[(__int16)v17], a4)) {
      return 0;
    }
    cstdlib_strncpy(a6, a2, v17);
    cstdlib_strcpy(&a6[(__int16)v17], __s);
    if (!lidmde_HasVowelWord(*(char **)(a1 + 136008), (unsigned __int8 *)a6)
      || (int)Utf8_Utf8NbrOfSymbols(a6) < *(unsigned __int16 *)(a1 + 136002))
    {
      return 0;
    }
    else
    {
      __int16 __c_1 = 1;
      uint64_t v16 = (*(uint64_t (**)(void, void, const char *, char *, char ***, __int16 *, unsigned __int8 *, void))(*(void *)(a1 + 64) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), "ml2", a6, &v27, &__c_1, &__c, *(unsigned __int8 *)(a1 + 2040));
      if ((v16 & 0x80000000) == 0 && __c_1)
      {
        uint64_t v19 = cstdlib_strchr(*v27, __c);
        if (v19) {
          *uint64_t v19 = 0;
        }
        if (cstdlib_strcmp(*v27, "all"))
        {
          if (*(_WORD *)(a1 + 1928))
          {
            uint64_t v23 = 0;
            while (cstdlib_strcmp(*v27, (const char *)(*(void *)(a1 + 1936) + 8 * v23)))
            {
              if (++v23 >= (unint64_t)*(unsigned __int16 *)(a1 + 1928)) {
                goto LABEL_20;
              }
            }
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) stem found: %s as %s", v24, v25, v26, (uint64_t)a6);
            a7[v23] = 1;
          }
        }
        else
        {
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"ML2 LID (MDE) stem found: %s as all", v20, v21, v22, (uint64_t)a6);
          if (*(_WORD *)(a1 + 1928)) {
            memset_pattern16(a7, &unk_2206E3270, 4 * *(unsigned __int16 *)(a1 + 1928));
          }
        }
LABEL_20:
        *a8 = 1;
      }
    }
  }
  return v16;
}

uint64_t lidmde_HasVowelWord(char *a1, unsigned __int8 *a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v2 = a2;
  while (!utf8_strchr(a1, (const char *)v2))
  {
    v2 += (int)Utf8_LengthInBytes(v2, 1);
    if (!*v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t calcWScore(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, unsigned int a5, void *a6, uint64_t a7)
{
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  *(_WORD *)&__c[1] = a4;
  uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned char *, unsigned char *, unsigned char *, void))(*(void *)(a1 + 64) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), a3, a2, &__c[3], &__c[1], __c, *(unsigned __int8 *)(a1 + 1848));
  if ((v15 & 0x80000000) == 0)
  {
    if (a5) {
      bzero(a6, 4 * a5);
    }
    if (*(_WORD *)&__c[1])
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"LID found: %s", v12, v13, v14, a2);
      ++*(_WORD *)(a7 + 4);
      uint64_t v16 = **(const char ***)&__c[3];
      unsigned __int16 v17 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      BOOL v18 = a5 != 0;
      if (v17) {
        BOOL v19 = a5 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        unint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = v17;
        unint64_t v21 = 0;
        do
        {
          if (v20 != v16)
          {
            *uint64_t v20 = 0;
            *((_DWORD *)a6 + v21) = LH_atou(v16);
          }
          ++v21;
          uint64_t v16 = v20 + 1;
          uint64_t v20 = cstdlib_strchr(v20 + 1, __c[0]);
          BOOL v18 = v21 < a5;
          if (v20) {
            BOOL v22 = v21 >= a5;
          }
          else {
            BOOL v22 = 1;
          }
        }
        while (!v22);
      }
      if (*v16) {
        BOOL v23 = !v18;
      }
      else {
        BOOL v23 = 1;
      }
      if (!v23) {
        *((_DWORD *)a6 + v21) = LH_atou(v16);
      }
    }
  }
  return v15;
}

uint64_t lid_Init(uint64_t a1)
{
  *(void *)(a1 + 1896) = 0;
  *(_WORD *)(a1 + 1888) = 0;
  cstdlib_strcpy((char *)(a1 + 1204), "mertfrq");
  cstdlib_strcpy((char *)(a1 + 1460), "merwfrq");
  uint64_t result = initLanguagesModel(a1, a1 + 1016, 0xFFFF);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = initLanguagesModel(a1, a1 + 1064, 1);
    if ((result & 0x80000000) == 0 || *(_WORD *)(a1 + 1018)) {
      return 0;
    }
  }
  return result;
}

uint64_t initLanguagesModel(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  __c_3 = 0;
  unsigned __int8 __c = 0;
  *(_WORD *)a2 = a3;
  *(void *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 16) = 0;
  __int16 __c_1 = a3;
  int v6 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "nrpartwgram_lid", &__c_3, &__c_1, &__c);
  unsigned __int8 v7 = 1;
  if ((v6 & 0x80000000) == 0 && __c_1) {
    unsigned __int8 v7 = LH_atou(*__c_3);
  }
  *(unsigned char *)(a1 + 1848) = v7;
  __int16 __c_1 = a3;
  uint64_t v8 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", "scripts", &__c_3, &__c_1, &__c);
  if ((v8 & 0x80000000) == 0)
  {
    if (!__c_1) {
      return 0;
    }
    uint64_t v9 = (char *)*__c_3;
    uint64_t v10 = cstdlib_strchr((char *)*__c_3, __c);
    if (v10) {
      *uint64_t v10 = 0;
    }
    *(_WORD *)(a2 + 16) = 1;
    for (unint64_t i = v9; ; unint64_t i = v12 + 1)
    {
      uint64_t v12 = cstdlib_strchr(i, 44);
      if (!v12) {
        break;
      }
      ++*(_WORD *)(a2 + 16);
    }
    uint64_t v13 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), *(unsigned __int16 *)(a2 + 16), 536);
    *(void *)(a2 + 24) = v13;
    if (!v13)
    {
LABEL_71:
      uint64_t appended = 2345672714;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v14, v15, v16, v17, v51);
      return appended;
    }
    BOOL v18 = cstdlib_strchr(v9, 44);
    BOOL v19 = v18;
    if (v18) {
      char *v18 = 0;
    }
    if (!*(_WORD *)(a2 + 16)) {
      goto LABEL_72;
    }
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      cstdlib_strcpy((char *)(*(void *)(a2 + 24) + v20), v9);
      if (v19)
      {
        uint64_t v9 = v19 + 1;
        BOOL v22 = cstdlib_strchr(v19 + 1, 44);
        BOOL v19 = v22;
        if (v22) {
          *BOOL v22 = 0;
        }
      }
      ++v21;
      v20 += 536;
    }
    while (v21 < *(unsigned __int16 *)(a2 + 16));
    if (!*(_WORD *)(a2 + 16))
    {
LABEL_72:
      uint64_t appended = 0;
      *(void *)(a2 + 40) = 0;
      return appended;
    }
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = v24 + 536 * v23;
      *(void *)&v55[3] = 0;
      v55[0] = 0;
      cstdlib_strcpy(__dst, "mertfrq_");
      cstdlib_strcat(__dst, (const char *)v25);
      cstdlib_strcpy((char *)(v25 + 24), __dst);
      cstdlib_strcpy(__dst, "merwfrq_");
      cstdlib_strcat(__dst, (const char *)v25);
      cstdlib_strcpy((char *)(v25 + 280), __dst);
      cstdlib_strcpy(__dst, "languages.");
      cstdlib_strcat(__dst, (const char *)v25);
      *(_WORD *)&v55[1] = a3;
      uint64_t v8 = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), "lidcfg", __dst, &v55[3], &v55[1], v55);
      if ((v8 & 0x80000000) != 0) {
        break;
      }
      uint64_t v26 = **(char ***)&v55[3];
      BOOL v27 = cstdlib_strchr(**(char ***)&v55[3], v55[0]);
      if (v27) {
        *BOOL v27 = 0;
      }
      uint64_t v28 = v24 + 536 * v23;
      *(_WORD *)(v28 + 8) = 1;
      uint64_t v29 = (_WORD *)(v28 + 8);
      for (unsigned int j = v26; ; unsigned int j = v31 + 1)
      {
        uint64_t v31 = cstdlib_strchr(j, 44);
        if (!v31) {
          break;
        }
        ++*v29;
      }
      uint64_t v32 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), (unsigned __int16)*v29, 8);
      uint64_t v33 = v24 + 536 * v23;
      *(void *)(v33 + 16) = v32;
      int v34 = (void *)(v33 + 16);
      if (!v32) {
        goto LABEL_71;
      }
      unint64_t v35 = cstdlib_strchr(v26, 44);
      unsigned int v36 = v35;
      if (v35) {
        *unint64_t v35 = 0;
      }
      if (*v29)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        do
        {
          cstdlib_strcpy((char *)(*v34 + v37), v26);
          if (v36)
          {
            uint64_t v26 = v36 + 1;
            unsigned __int16 v39 = cstdlib_strchr(v36 + 1, 44);
            unsigned int v36 = v39;
            if (v39) {
              *unsigned __int16 v39 = 0;
            }
          }
          ++v38;
          v37 += 8;
        }
        while (v38 < (unsigned __int16)*v29);
      }
      ++v23;
      unint64_t v40 = *(unsigned __int16 *)(a2 + 16);
      if (v23 >= v40)
      {
        *(void *)(a2 + 40) = 0;
        if (v40)
        {
          uint64_t v41 = 0;
          unint64_t v42 = 0;
          while (1)
          {
            unsigned int v43 = (const char *)(*(void *)(a2 + 24) + v41);
            if (cstdlib_strcmp(v43, "latn"))
            {
              if (cstdlib_strcmp(v43, "cyrl"))
              {
                if (cstdlib_strcmp(v43, "deva"))
                {
                  if (cstdlib_strcmp(v43, "tami"))
                  {
                    if (cstdlib_strcmp(v43, "telu"))
                    {
                      if (cstdlib_strcmp(v43, "beng"))
                      {
                        if (cstdlib_strcmp(v43, "kann"))
                        {
                          if (cstdlib_strcmp(v43, "hanx"))
                          {
                            if (cstdlib_strcmp(v43, "hrkt"))
                            {
                              if (cstdlib_strcmp(v43, "hang"))
                              {
                                if (cstdlib_strcmp(v43, "arab"))
                                {
                                  if (cstdlib_strcmp(v43, "grek"))
                                  {
                                    if (cstdlib_strcmp(v43, "hebr")) {
                                      return 2345672711;
                                    }
                                    appendUnicodeRange(a1, a2 + 32, v42, 1424, 1535);
                                    uint64_t v44 = a1;
                                    uint64_t v45 = a2 + 32;
                                    __int16 v46 = v42;
                                    int v47 = 64285;
                                    int v48 = 64320;
                                  }
                                  else
                                  {
                                    appendUnicodeRange(a1, a2 + 32, v42, 880, 1023);
                                    uint64_t v44 = a1;
                                    uint64_t v45 = a2 + 32;
                                    __int16 v46 = v42;
                                    int v47 = 7936;
                                    int v48 = 0x1FFF;
                                  }
                                }
                                else
                                {
                                  appendUnicodeRange(a1, a2 + 32, v42, 1536, 1791);
                                  appendUnicodeRange(a1, a2 + 32, v42, 1872, 1919);
                                  appendUnicodeRange(a1, a2 + 32, v42, 64336, 65023);
                                  uint64_t v44 = a1;
                                  uint64_t v45 = a2 + 32;
                                  __int16 v46 = v42;
                                  int v47 = 65136;
                                  int v48 = 65279;
                                }
                              }
                              else
                              {
                                appendUnicodeRange(a1, a2 + 32, v42, 4352, 4607);
                                appendUnicodeRange(a1, a2 + 32, v42, 44032, 55215);
                                uint64_t v44 = a1;
                                uint64_t v45 = a2 + 32;
                                __int16 v46 = v42;
                                int v47 = 65440;
                                int v48 = 65500;
                              }
                            }
                            else
                            {
                              appendUnicodeRange(a1, a2 + 32, v42, 12352, 12543);
                              uint64_t v44 = a1;
                              uint64_t v45 = a2 + 32;
                              __int16 v46 = v42;
                              int v47 = 65381;
                              int v48 = 65439;
                            }
                          }
                          else
                          {
                            appendUnicodeRange(a1, a2 + 32, v42, 13312, 19903);
                            appendUnicodeRange(a1, a2 + 32, v42, 19968, 40879);
                            appendUnicodeRange(a1, a2 + 32, v42, 0x20000, 173782);
                            appendUnicodeRange(a1, a2 + 32, v42, 173824, 183983);
                            uint64_t v44 = a1;
                            uint64_t v45 = a2 + 32;
                            __int16 v46 = v42;
                            int v47 = 194560;
                            int v48 = 195101;
                          }
                        }
                        else
                        {
                          __int16 v46 = v42;
                          uint64_t v44 = a1;
                          uint64_t v45 = a2 + 32;
                          int v47 = 3200;
                          int v48 = 3327;
                        }
                      }
                      else
                      {
                        __int16 v46 = v42;
                        uint64_t v44 = a1;
                        uint64_t v45 = a2 + 32;
                        int v47 = 2432;
                        int v48 = 2559;
                      }
                    }
                    else
                    {
                      __int16 v46 = v42;
                      uint64_t v44 = a1;
                      uint64_t v45 = a2 + 32;
                      int v47 = 3072;
                      int v48 = 3199;
                    }
                  }
                  else
                  {
                    __int16 v46 = v42;
                    uint64_t v44 = a1;
                    uint64_t v45 = a2 + 32;
                    int v47 = 2944;
                    int v48 = 3071;
                  }
                }
                else
                {
                  __int16 v46 = v42;
                  uint64_t v44 = a1;
                  uint64_t v45 = a2 + 32;
                  int v47 = 2304;
                  int v48 = 2431;
                }
              }
              else
              {
                appendUnicodeRange(a1, a2 + 32, v42, 1024, 1327);
                appendUnicodeRange(a1, a2 + 32, v42, 11744, 11775);
                uint64_t v44 = a1;
                uint64_t v45 = a2 + 32;
                __int16 v46 = v42;
                int v47 = 42560;
                int v48 = 42655;
              }
            }
            else
            {
              __int16 v46 = v42;
              uint64_t v44 = a1;
              uint64_t v45 = a2 + 32;
              int v47 = 0;
              int v48 = 591;
            }
            uint64_t appended = appendUnicodeRange(v44, v45, v46, v47, v48);
            if ((appended & 0x80000000) == 0)
            {
              ++v42;
              v41 += 536;
              if (v42 < *(unsigned __int16 *)(a2 + 16)) {
                continue;
              }
            }
            return appended;
          }
        }
        return 0;
      }
    }
  }
  return v8;
}

uint64_t lid_Deinit(uint64_t a1)
{
  if (*(_WORD *)(a1 + 1888))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 56 * *(unsigned __int16 *)(a1 + 1888);
    do
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(*(void *)(a1 + 1896) + v2 + 16));
      v2 += 56;
    }
    while (v3 != v2);
  }
  uint64_t v4 = *(void *)(a1 + 1896);
  if (v4) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v4);
  }
  *(void *)(a1 + 1896) = 0;
  *(_DWORD *)(a1 + 1888) = 0;
  deinitLanguagesModel((void *)a1, a1 + 1016);
  deinitLanguagesModel((void *)a1, a1 + 1064);
  return 0;
}

void *deinitLanguagesModel(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *(unsigned __int16 *)(a2 + 16);
  if (*(_WORD *)(a2 + 16))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 16;
    do
    {
      uint64_t v7 = *(void *)(a2 + 24);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + v6);
        if (v8)
        {
          uint64_t result = heap_Free(*(void **)(v3[2] + 8), v8);
          unsigned int v4 = *(unsigned __int16 *)(a2 + 16);
        }
      }
      ++v5;
      v6 += 536;
    }
    while (v5 < v4);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  if (v9)
  {
    uint64_t result = heap_Free(*(void **)(v3[2] + 8), v9);
    *(void *)(a2 + 24) = 0;
  }
  uint64_t v10 = *(void *)(a2 + 40);
  if (v10)
  {
    uint64_t result = heap_Free(*(void **)(v3[2] + 8), v10);
    *(void *)(a2 + 40) = 0;
  }
  return result;
}

uint64_t lid_IdentifyMonolingual(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v48 = (unsigned __int16 *)(a1 + 1850);
  uint64_t v53 = 0;
  int v4 = *(_DWORD *)(a1 + 992);
  uint64_t v5 = 1066;
  if (v4)
  {
    __int16 v6 = 1;
  }
  else
  {
    uint64_t v5 = 1018;
    __int16 v6 = -1;
  }
  __int16 v49 = v6;
  unint64_t v7 = *(unsigned __int16 *)(a1 + v5);
  if (*(_WORD *)(a1 + v5))
  {
    uint64_t v8 = 0;
    BOOL v9 = v4 == 0;
    uint64_t v10 = 1072;
    if (v9) {
      uint64_t v10 = 1024;
    }
    uint64_t v11 = (_DWORD *)(*(void *)(a1 + 1880) + 8);
    do
    {
      *uint64_t v11 = 0;
      *((void *)v11 - 1) = *(void *)(a1 + v10) + v8;
      v8 += 24;
      v11 += 8;
    }
    while (24 * v7 != v8);
  }
  *(void *)int v48 = 0;
  uint64_t v12 = normalizedDup(a1, a2, a3, v48);
  if (!v12)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v47);
    return 2345672714;
  }
  unint64_t v17 = v12;
  __int16 v52 = 0;
  char v51 = 0;
  unint64_t v54 = v12;
  Word = nextWord((uint64_t *)&v54);
  if (Word)
  {
    BOOL v19 = Word;
    __int16 v52 = v49;
    uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, char *, uint64_t *, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), a1 + 1460, Word, &v53, &v52, &v51);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
    while (1)
    {
      unint64_t v21 = v19;
      BOOL v19 = nextWord((uint64_t *)&v54);
      if (!v52)
      {
        char v22 = *v21;
        if (*v21)
        {
          unint64_t v23 = (unsigned __int8 *)(v21 + 1);
          do
          {
              *(v23 - 1) = 32;
            int v24 = *v23++;
            char v22 = v24;
          }
          while (v24);
        }
      }
      if (!v19) {
        break;
      }
      for (unint64_t i = v19 - 1; (unint64_t)i > v17 && (!*i || cstdlib_strchr(" \t\n", *i)); --i)
        *unint64_t i = 32;
      __int16 v52 = v49;
      uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, char *, uint64_t *, __int16 *, char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), a1 + 1460, v19, &v53, &v52, &v51);
      if ((v20 & 0x80000000) != 0) {
        return v20;
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  unint64_t v54 = v17;
  uint64_t v26 = nextWord((uint64_t *)&v54);
  if (!v26)
  {
LABEL_38:
    if (*v48) {
      *(_WORD *)(a1 + 1856) = 100 * *(unsigned __int16 *)(a1 + 1854) / *v48;
    }
    if (*(_DWORD *)(a1 + 1156))
    {
      unint64_t v40 = (uint64_t (*)(unint64_t, unint64_t))compareScoreOld;
    }
    else if (*(_DWORD *)(a1 + 1168))
    {
      unint64_t v40 = (uint64_t (*)(unint64_t, unint64_t))compareScoreOld;
    }
    else
    {
      unint64_t v40 = (uint64_t (*)(unint64_t, unint64_t))compareScore;
    }
    ssft_qsort(*(void *)(a1 + 1880), v7, 32, v40);
    if (*(_DWORD *)(a1 + 992))
    {
      if (v7 >= 2
        && *(_DWORD *)(a1 + 1168)
        && *(_DWORD *)(a1 + 1172) > cstdlib_labs(*(int *)(*(void *)(a1 + 1880) + 8)- (uint64_t)*(int *)(*(void *)(a1 + 1880) + 40)))
      {
        unsigned int v43 = *(const char **)(*(void *)(a1 + 1880) + 32);
        uint64_t v44 = (const char *)(a1 + 1176);
        goto LABEL_54;
      }
    }
    else if (v7 >= 2 {
           && *(_DWORD *)(a1 + 1156)
    }
           && *(_DWORD *)(a1 + 1160) > cstdlib_labs(*(int *)(*(void *)(a1 + 1880) + 8)- (uint64_t)*(int *)(*(void *)(a1 + 1880) + 40)))
    {
      unsigned int v43 = *(const char **)(*(void *)(a1 + 1880) + 32);
      uint64_t v44 = (const char *)(a1 + 1164);
LABEL_54:
      if (!cstdlib_strcmp(v43, v44))
      {
        memset(__dst, 0, sizeof(__dst));
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"fuzzy fallback from %s to %s: %7lu -> %7lu", v45, v41, v42, **(void **)(a1 + 1880));
        cstdlib_memcpy(__dst, (const void *)(*(void *)(a1 + 1880) + 32), 0x20uLL);
        cstdlib_memcpy((void *)(*(void *)(a1 + 1880) + 32), *(const void **)(a1 + 1880), 0x20uLL);
        cstdlib_memcpy(*(void **)(a1 + 1880), __dst, 0x20uLL);
      }
    }
    traceScore(a1, (uint64_t)"lid_IdentifyOldMonolingual COMBINED", (uint64_t)"Result", v7, *(uint64_t **)(a1 + 1880), 0, v41, v42);
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v17);
    return v20;
  }
  BOOL v27 = v26;
  while (1)
  {
    uint64_t v28 = calcTScore(a1, v27, a1 + 1204, v49, v7, v56, *(uint64_t **)(a1 + 1880));
    if ((v28 & 0x80000000) != 0) {
      return v28;
    }
    traceScore(a1, (uint64_t)"lid_IdentifyOldMonolingual TSCORE", (uint64_t)v27, v7, *(uint64_t **)(a1 + 1880), (uint64_t)v56, v29, v30);
    uint64_t v20 = calcWScore(a1, (uint64_t)v27, a1 + 1460, v49, v7, v55, (uint64_t)v48);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
    uint64_t v33 = *(uint64_t **)(a1 + 1880);
    if (v7)
    {
      int v34 = v33 + 1;
      unint64_t v35 = (int *)v56;
      unsigned int v36 = (int *)v55;
      unint64_t v37 = v7;
      do
      {
        int v39 = *v36++;
        int v38 = v39;
        if (!v39) {
          int v38 = *v35;
        }
        *v34 += v38;
        v34 += 8;
        ++v35;
        --v37;
      }
      while (v37);
    }
    traceScore(a1, (uint64_t)"lid_IdentifyOldMonolingual WSCORE", (uint64_t)v27, v7, v33, 0, v31, v32);
    BOOL v27 = nextWord((uint64_t *)&v54);
    if (!v27) {
      goto LABEL_38;
    }
  }
}

uint64_t lid_Identify(int8x16_t *a1, unsigned char *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v5 = (uint64_t)a1;
  char __s1[64] = *(char **)MEMORY[0x263EF8340];
  if (a1[62].i32[0]) {
    uint64_t v6 = 1064;
  }
  else {
    uint64_t v6 = 1016;
  }
  if (a1[62].i32[0]) {
    unint64_t v7 = &a1[66].i8[8];
  }
  else {
    unint64_t v7 = &a1[63].i8[8];
  }
  uint64_t v136 = v7;
  a1[118].i16[1] = 0;
  if (*((_WORD *)v7 + 8))
  {
    __b[0] = 0;
    a1[118].i16[1] = 0;
    if (!a3) {
      return 0;
    }
    uint64_t v125 = v6;
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t appended = 0;
    __int16 v11 = -1;
    int v12 = -1;
    int v132 = -1;
    do
    {
      uint64_t v13 = a2;
      unsigned int U32FromUtf8 = utf8_GetU32FromUtf8(a2, v9, v3);
      unsigned __int8 v15 = U32FromUtf8;
      uint64_t v16 = *((unsigned __int16 *)v136 + 17);
      if (*((_WORD *)v136 + 17))
      {
        unint64_t v17 = (_WORD *)(*((void *)v136 + 5) + 8);
        while (*((_DWORD *)v17 - 2) > U32FromUtf8 || *((_DWORD *)v17 - 1) <= U32FromUtf8)
        {
          v17 += 6;
          if (!--v16) {
            goto LABEL_15;
          }
        }
        __int16 v18 = *v17;
      }
      else
      {
LABEL_15:
        __int16 v18 = -1;
      }
      if (U32FromUtf8 > 0xFE)
      {
        BOOL v19 = 0;
      }
      else
      {
        BOOL v19 = (U32FromUtf8 & 0xFFFFFFDF) - 91 < 0xFFFFFFE6;
        if (U32FromUtf8 == 9 || U32FromUtf8 == 32) {
          int v12 = v9;
        }
        __s1[0] = 0;
        if ((paramc_ParamGetStr(*(void *)(a1[1].i64[0] + 40), (uint64_t)"liddigitmain", __s1) & 0x80000000) == 0)
        {
          if (__s1[0])
          {
            int v21 = cstdlib_strcmp(__s1[0], "yes");
            if (v15 - 48 <= 9 && !v21)
            {
              BOOL v19 = 0;
              __int16 v18 = 200;
            }
          }
        }
      }
      a2 = v13;
      if (v12 != v9 - 1 && v11 == 200) {
        __int16 v23 = 200;
      }
      else {
        __int16 v23 = v18;
      }
      if ((v23 & 0x8000) == 0 && !v19)
      {
        __int16 v24 = v23;
        if (v23 != v11)
        {
          if (v8) {
            *(_DWORD *)(v8 + 4) = v132 + 1;
          }
          uint64_t appended = appendCoLangSegment(a1, __b);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t v8 = __b[0];
          *(_WORD *)(__b[0] + 8) = v24;
          if (v12 >= v132) {
            unsigned int v25 = v12 + 1;
          }
          else {
            unsigned int v25 = v9;
          }
          *(_DWORD *)uint64_t v8 = v25;
          *(_WORD *)(v8 + 10) = 0;
          __int16 v11 = v24;
        }
        int v132 = v9;
      }
      v9 += utf8_determineUTF8CharLength(v13[v9]);
      unsigned int v3 = a3;
    }
    while (v9 < a3);
    if (v8) {
      *(_DWORD *)(v8 + 4) = v132 + 1;
    }
    uint64_t v5 = (uint64_t)a1;
    uint64_t v6 = v125;
    if ((appended & 0x80000000) != 0) {
      return appended;
    }
  }
  else
  {
    __s1[0] = 0;
    uint64_t appended = appendCoLangSegment(a1, __s1);
    if ((appended & 0x80000000) != 0) {
      return appended;
    }
    uint64_t v26 = __s1[0];
    *(_DWORD *)__s1[0] = 0;
    *((_DWORD *)v26 + 1) = v3;
    *((_DWORD *)v26 + 2) = 0xFFFF;
  }
  uint64_t v27 = *(unsigned __int16 *)(v5 + 1890);
  if (!*(_WORD *)(v5 + 1890)) {
    return appended;
  }
  uint64_t v28 = 0;
  int v29 = v27 - 1;
  uint64_t v30 = v5 + 1204;
  uint64_t v31 = v5 + 1460;
  char __s2 = (char *)(v5 + 1196);
  int v116 = (char *)(v5 + 1164);
  uint64_t v117 = (const char *)(v5 + 1176);
  uint64_t v121 = *(unsigned __int16 *)(v5 + 1890);
  uint64_t v122 = a2;
  uint64_t v126 = v6;
  int v120 = v27 - 1;
  uint64_t v118 = v5 + 1460;
  uint64_t v119 = v5 + 1204;
  while (1)
  {
    uint64_t v32 = *(void *)(v5 + 1896);
    uint64_t v33 = (_DWORD *)(v32 + 56 * v28);
    if (!v28) {
      *uint64_t v33 = 0;
    }
    if (v29 == v28) {
      *(_DWORD *)(v32 + 56 * v28 + 4) = v3;
    }
    uint64_t v34 = v32 + 56 * v28;
    uint64_t v35 = *(unsigned __int16 *)(v34 + 8);
    uint64_t v36 = *(void *)(v34 + 16);
    unint64_t v37 = (unsigned __int16 *)(v34 + 24);
    if (v35 != 200) {
      break;
    }
    *(void *)uint64_t v36 = *(void *)(v5 + 1912);
    *(_WORD *)(v32 + 56 * v28 + 10) = 1;
LABEL_61:
    uint64_t appended = 0;
    *(_DWORD *)(v36 + 8) = 0;
    *(void *)unint64_t v37 = 0;
LABEL_154:
    if (++v28 == v27) {
      return appended;
    }
  }
  if ((v35 & 0x8000) != 0)
  {
    unsigned int v44 = *((unsigned __int16 *)v136 + 1);
    if (!*((_WORD *)v136 + 1))
    {
LABEL_90:
      uint64_t appended = 0;
      *(_WORD *)(v32 + 56 * v28 + 10) = 0;
      goto LABEL_154;
    }
    uint64_t v45 = *((void *)v136 + 1);
    __int16 v46 = (_DWORD *)(v36 + 8);
    uint64_t v47 = *((unsigned __int16 *)v136 + 1);
    do
    {
      _DWORD *v46 = 0;
      *((void *)v46 - 1) = v45;
      v45 += 24;
      v46 += 8;
      --v47;
    }
    while (v47);
    uint64_t v127 = v30;
    uint64_t v131 = v31;
  }
  else
  {
    uint64_t v38 = *((void *)v136 + 3);
    uint64_t v39 = v38 + 536 * *(unsigned __int16 *)(v34 + 8);
    unsigned int v40 = *(unsigned __int16 *)(v39 + 8);
    if (!*(_WORD *)(v39 + 8)) {
      goto LABEL_90;
    }
    uint64_t v127 = v39 + 24;
    uint64_t v131 = v39 + 280;
    uint64_t v41 = *(void *)(v38 + 536 * v35 + 16);
    uint64_t v42 = (_DWORD *)(v36 + 8);
    uint64_t v43 = *(unsigned __int16 *)(v39 + 8);
    do
    {
      *uint64_t v42 = 0;
      *((void *)v42 - 1) = v41;
      v41 += 8;
      v42 += 8;
      --v43;
    }
    while (v43);
    unsigned int v44 = v40;
  }
  *(_WORD *)(v32 + 56 * v28 + 10) = v44;
  if (v44 < 2)
  {
    if (v44 != 1)
    {
      uint64_t appended = 0;
      goto LABEL_154;
    }
    goto LABEL_61;
  }
  unsigned int v130 = v44;
  uint64_t v48 = *v33;
  uint64_t v49 = (uint64_t)&a2[v48];
  uint64_t v123 = v32 + 56 * v28;
  uint64_t v124 = v28;
  unsigned int v50 = *(_DWORD *)(v123 + 4) - v48;
  __int16 v133 = *(_WORD *)(v5 + v6);
  uint64_t v140 = 0;
  unint64_t v141 = 0;
  __int16 v139 = 0;
  char v138 = 0;
  cstdlib_memset(__s1, 0, 0x80uLL);
  cstdlib_memset(__b, 0, 0x80uLL);
  *(void *)unint64_t v37 = 0;
  uint64_t v51 = normalizedDup(v5, v49, v50, v37);
  if (!v51)
  {
    log_OutPublic(*(void *)(*(void *)(v5 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v52, v53, v54, v55, v115);
    return 2345672714;
  }
  unint64_t v56 = v51;
  unint64_t v141 = v51;
  Word = nextWord((uint64_t *)&v141);
  if (!Word)
  {
    uint64_t appended = 0;
LABEL_94:
    unint64_t v141 = v56;
    unsigned int v62 = nextWord((uint64_t *)&v141);
    uint64_t v65 = (uint64_t)__s2;
    unsigned int v66 = v130;
    if (v62)
    {
      uint64_t v67 = v62;
      do
      {
        uint64_t v68 = (uint64_t)v37;
        uint64_t v69 = (uint64_t)v37;
        int v70 = v66;
        unsigned int v129 = calcWScore(v5, (uint64_t)v67, v131, v133, v66, __b, v69);
        if ((v129 & 0x80000000) != 0) {
          return v129;
        }
        uint64_t v73 = __b;
        traceScore(v5, (uint64_t)"doLidString WSCORE THIS WORD", (uint64_t)v67, v70, (uint64_t *)v36, (uint64_t)__b, v71, v72);
        bzero(__s1, 4 * v130);
        int v76 = 0;
        int v77 = 0;
        uint64_t v78 = v130;
        do
        {
          if (*v73++) {
            int v76 = 1;
          }
          else {
            int v77 = 1;
          }
          --v78;
        }
        while (v78);
        unint64_t v37 = (unsigned __int16 *)v68;
        if (v77)
        {
          if (v76 || !IsFlatDistribution(v5, v68, v67, (unsigned __int16)((_WORD)v67 - v56)))
          {
            int v80 = v130;
            uint64_t appended = calcTScore(v5, v67, v127, v133, v130, __s1, (uint64_t *)v36);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          else
          {
            if (*(_DWORD *)(v5 + 1188))
            {
              __int16 v83 = __s1;
              int v84 = (uint64_t *)v36;
              uint64_t v85 = v130;
              do
              {
                uint64_t v86 = *v84;
                v84 += 4;
                if (LH_strnicmp(v86, v65, 2uLL)) {
                  int v87 = 100;
                }
                else {
                  int v87 = 10;
                }
                *(_DWORD *)__int16 v83 = v87;
                __int16 v83 = (char **)((char *)v83 + 4);
                --v85;
              }
              while (v85);
              uint64_t v5 = (uint64_t)a1;
            }
            else
            {
              BOOL v88 = __s1;
              BOOL v89 = (uint64_t *)v36;
              uint64_t v90 = v130;
              do
              {
                uint64_t v91 = *v89;
                v89 += 4;
                if (LH_strnicmp(v91, a1[119].i64[1], 2uLL)) {
                  int v92 = 100;
                }
                else {
                  int v92 = 10;
                }
                *(_DWORD *)BOOL v88 = v92;
                BOOL v88 = (char **)((char *)v88 + 4);
                --v90;
              }
              while (v90);
              uint64_t v5 = (uint64_t)a1;
              uint64_t v65 = (uint64_t)__s2;
            }
            int v80 = v130;
            unint64_t v37 = (unsigned __int16 *)v68;
            uint64_t appended = v129;
          }
          traceScore(v5, (uint64_t)"doLidString TSCORE THIS WORD", (uint64_t)v67, v80, (uint64_t *)v36, (uint64_t)__s1, v81, v82);
        }
        else
        {
          uint64_t appended = v129;
        }
        int v93 = __s1;
        uint64_t v94 = (int *)__b;
        uint64_t v95 = 8;
        uint64_t v96 = v130;
        do
        {
          int v98 = *v94++;
          int v97 = v98;
          if (!v98) {
            int v97 = *(_DWORD *)v93;
          }
          *(_DWORD *)(v36 + v95) += v97;
          int v93 = (char **)((char *)v93 + 4);
          v95 += 32;
          --v96;
        }
        while (v96);
        traceScore(v5, (uint64_t)"doLidString COMBINED ALL WORDS UNTIL THIS WORD NOT BIASED", (uint64_t)v67, v130, (uint64_t *)v36, 0, v74, v75);
        uint64_t v99 = nextWord((uint64_t *)&v141);
        unsigned int v66 = v130;
        uint64_t v67 = v99;
      }
      while (v99);
    }
    uint64_t v100 = (_WORD *)(v123 + 28);
    traceScore(v5, (uint64_t)"doLidString ALL WORDS COMBINED NOT BIASED, NOT SORTED", (uint64_t)"Result", v66, (uint64_t *)v36, 0, v63, v64);
    if (*v37) {
      *(_WORD *)(v123 + 30) = 100 * (unsigned __int16)*v100 / *v37;
    }
    a2 = v122;
    if (*(_DWORD *)(v5 + 1188))
    {
      int v101 = (_WORD *)(v123 + 26);
      uint64_t v102 = v130;
      long long v103 = (int *)(v36 + 8);
      while (cstdlib_strncmp(*((const char **)v103 - 1), __s2, 2uLL))
      {
        v103 += 8;
        if (!--v102) {
          goto LABEL_139;
        }
      }
      if (*v101 && *v100 && !a1[120].i32[0])
      {
        unsigned int v111 = a1[74].i32[2] * (unsigned __int16)*v101;
        BOOL v112 = *v103 >= v111;
        int v113 = *v103 - v111;
        if (v113 == 0 || !v112) {
          int v113 = 1;
        }
        *long long v103 = v113;
      }
      else
      {
        *long long v103 = 0;
      }
    }
LABEL_139:
    uint64_t v5 = (uint64_t)a1;
    if (a1[72].i32[1])
    {
      uint64_t v104 = (uint64_t (*)(unint64_t, unint64_t))compareScoreOld;
    }
    else if (a1[73].i32[0])
    {
      uint64_t v104 = (uint64_t (*)(unint64_t, unint64_t))compareScoreOld;
    }
    else
    {
      uint64_t v104 = (uint64_t (*)(unint64_t, unint64_t))compareScore;
    }
    unsigned int v3 = a3;
    ssft_qsort(v36, v130, 32, v104);
    if (a1[62].i32[0])
    {
      if (!a1[73].i32[0]
        || a1[73].i32[1] <= cstdlib_labs(*(int *)(v36 + 8) - (uint64_t)*(int *)(v36 + 40)))
      {
        goto LABEL_153;
      }
      char v107 = (void *)(v36 + 32);
      int v108 = *(const char **)(v36 + 32);
      int v109 = v117;
    }
    else
    {
      if (!a1[72].i32[1]
        || a1[72].i32[2] <= cstdlib_labs(*(int *)(v36 + 8) - (uint64_t)*(int *)(v36 + 40)))
      {
        goto LABEL_153;
      }
      char v107 = (void *)(v36 + 32);
      int v108 = *(const char **)(v36 + 32);
      int v109 = v116;
    }
    if (!cstdlib_strcmp(v108, v109))
    {
      memset(__dst, 0, sizeof(__dst));
      log_OutText(*(void *)(a1[1].i64[0] + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"fuzzy fallback from %s to %s: %7lu -> %7lu", v110, v105, v106, *(void *)v36);
      cstdlib_memcpy(__dst, v107, 0x20uLL);
      cstdlib_memcpy(v107, (const void *)v36, 0x20uLL);
      cstdlib_memcpy((void *)v36, __dst, 0x20uLL);
    }
LABEL_153:
    traceScore((uint64_t)a1, (uint64_t)"doLidString ALL WORDS COMBINED BIASED AND/OR FUZZY CORRECTED, SORTED", (uint64_t)"Result", v130, (uint64_t *)v36, 0, v105, v106);
    heap_Free(*(void **)(a1[1].i64[0] + 8), v56);
    uint64_t v28 = v124;
    uint64_t v6 = v126;
    uint64_t v27 = v121;
    int v29 = v120;
    uint64_t v31 = v118;
    uint64_t v30 = v119;
    if ((appended & 0x80000000) != 0) {
      return appended;
    }
    goto LABEL_154;
  }
  uint64_t v58 = Word;
  while (1)
  {
    __int16 v139 = v133;
    uint64_t appended = (*(uint64_t (**)(void, void, uint64_t, char *, uint64_t *, __int16 *, char *, void))(*(void *)(v5 + 64) + 152))(*(void *)(v5 + 48), *(void *)(v5 + 56), v131, v58, &v140, &v139, &v138, *(unsigned __int8 *)(v5 + 1848));
    if ((appended & 0x80000000) != 0) {
      return appended;
    }
    uint64_t v59 = nextWord((uint64_t *)&v141);
    if (!v139 && !IsFlatDistribution(v5, (uint64_t)v37, v58, (unsigned __int16)((_WORD)v58 - v56)))
    {
      while (*v58)
      {
        {
          unsigned int v60 = 32;
          *uint64_t v58 = 32;
        }
        else
        {
          unsigned int v60 = *v58;
        }
        v58 += utf8_determineUTF8CharLength(v60);
      }
    }
    if (!v59) {
      goto LABEL_94;
    }
    int v61 = v59 - 1;
    uint64_t v58 = v59;
    if ((unint64_t)(v59 - 1) > v56)
    {
      do
      {
        if (*v61 && !cstdlib_strchr(" \t\n", *v61)) {
          break;
        }
        *v61-- = 32;
      }
      while ((unint64_t)v61 > v56);
      uint64_t v58 = v59;
    }
  }
}

uint64_t appendCoLangSegment(int8x16_t *a1, void *a2)
{
  int v4 = a1 + 118;
  unsigned int v5 = a1[118].u16[0];
  uint64_t v6 = &a1[118].i64[1];
  unint64_t v7 = &a1[118].u16[1];
  uint64_t result = appendItemRaw16((uint64_t)a1, &a1[118].i64[1], (unsigned __int16 *)&a1[118], &a1[118].i16[1], 0x38u);
  if ((result & 0x80000000) == 0)
  {
    if (v5 >= v4->u16[0])
    {
LABEL_14:
      uint64_t result = 0;
      *a2 = *v6 + 56 * *v7 - 56;
    }
    else
    {
      LOWORD(v9) = a1[63].i16[5];
      LOWORD(v10) = a1[66].i16[5];
      while (1)
      {
        uint64_t v11 = a1[118].i64[1];
        unsigned int v9 = (unsigned __int16)v9;
        if ((unsigned __int16)v9 <= (unsigned __int16)v10) {
          unsigned int v9 = (unsigned __int16)v10;
        }
        uint64_t v12 = heap_Calloc(*(void **)(a1[1].i64[0] + 8), 1, 32 * v9);
        *(void *)(v11 + 56 * v5 + 16) = v12;
        if (!v12) {
          break;
        }
        unsigned int v9 = a1[63].u16[5];
        unsigned int v10 = a1[66].u16[5];
        if (v9 <= v10) {
          uint64_t v17 = a1[66].u16[5];
        }
        else {
          uint64_t v17 = a1[63].u16[5];
        }
        if (v17)
        {
          int8x16_t v18 = vextq_s8(a1[119], a1[119], 8uLL);
          BOOL v19 = (int8x16_t *)(v12 + 16);
          do
          {
            *BOOL v19 = v18;
            v19 += 2;
            --v17;
          }
          while (v17);
        }
        if (++v5 >= v4->u16[0]) {
          goto LABEL_14;
        }
      }
      log_OutPublic(*(void *)(a1[1].i64[0] + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v20);
      return 2345672714;
    }
  }
  return result;
}

uint64_t appendUnicodeRange(uint64_t a1, uint64_t a2, __int16 a3, int a4, int a5)
{
  uint64_t v8 = (void *)(a2 + 8);
  unsigned int v9 = (unsigned __int16 *)(a2 + 2);
  uint64_t result = appendItemRaw16(a1, (uint64_t *)(a2 + 8), (unsigned __int16 *)a2, (_WORD *)(a2 + 2), 0xCu);
  if ((result & 0x80000000) == 0)
  {
    if (*v8)
    {
      uint64_t v11 = *v8 + 12 * *v9;
      *(_WORD *)(v11 - 4) = a3;
      *(_DWORD *)(v11 - 12) = a4;
      *(_DWORD *)(v11 - 8) = a5 + 1;
    }
  }
  return result;
}

uint64_t appendItemRaw16(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, _WORD *a4, unsigned int a5)
{
  uint64_t v5 = 2345672714;
  if (!a2) {
    return 2345672711;
  }
  uint64_t v9 = *a2;
  if (v9)
  {
    unsigned int v10 = (unsigned __int16)*a4;
    unsigned int v11 = *a3;
    if (v10 < v11)
    {
LABEL_9:
      uint64_t v5 = 0;
      *a4 = v10 + 1;
      return v5;
    }
    unsigned __int16 v12 = v11 + 10;
    uint64_t v13 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), v9, (unsigned __int16)(v11 + 10) * (unint64_t)a5);
    if (v13)
    {
LABEL_8:
      *a2 = v13;
      *a3 = v12;
      LOWORD(v10) = *a4;
      goto LABEL_9;
    }
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
    unsigned __int16 v12 = *a3 + 10;
    uint64_t v13 = heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), v12 * (unint64_t)a5);
    if (v13) {
      goto LABEL_8;
    }
  }
  return v5;
}

uint64_t normalizedDup(uint64_t a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  int v4 = a4;
  uint64_t v43 = *MEMORY[0x263EF8340];
  a4[4] = 0;
  __s2[0] = 0;
  uint64_t result = heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), (4 * a3) | 1);
  if (result)
  {
    if (a3)
    {
      int v8 = 0;
      int v9 = 0;
      unsigned __int16 v10 = 0;
      uint64_t v38 = 0;
      int v39 = 0;
      int v40 = 0;
      unsigned int v11 = (char *)result;
      unsigned int v12 = 0;
      uint64_t v13 = a3 - 1;
      unsigned int v35 = a3 - 2;
      BOOL v14 = 1;
      uint64_t v36 = result;
      unsigned int v15 = a3;
      unsigned int v37 = a3;
      while (1)
      {
        uint64_t v16 = (char *)(a2 + v12);
        unsigned int v17 = *v16;
        if (v17 <= 0x7A)
        {
          switch(*v16)
          {
            case 27:
            case 32:
            case 95:
              break;
            case 28:
            case 29:
            case 30:
            case 31:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              goto LABEL_58;
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 91:
            case 92:
            case 93:
            case 94:
            case 96:
              goto LABEL_6;
            default:
              if (v17 != 10 && v17 != 13) {
                goto LABEL_58;
              }
              break;
          }
          *v11++ = 32;
          ++v10;
          int v22 = 1;
          goto LABEL_47;
        }
        BOOL v19 = v17 - 171 > 0x10 || ((1 << (v17 + 85)) & 0x10019) == 0;
        if (v19 && v17 - 123 >= 3)
        {
LABEL_58:
          if (v10)
          {
            uint64_t v24 = (unsigned __int16)v4[4];
            if (v24 > 9) {
              goto LABEL_67;
            }
            if (v14)
            {
              if ((unint64_t)&v11[-v36 - v38 - v10 - (unsigned __int16)v9 - 2] < 3)
              {
LABEL_66:
                v4[4] = v24 + 1;
                v4[v24 + 5] = v38;
                goto LABEL_67;
              }
            }
            else if (v40)
            {
              goto LABEL_67;
            }
            if (v39 | v8) {
              goto LABEL_66;
            }
LABEL_67:
            int v9 = 0;
            uint64_t v38 = (unsigned __int16)((_WORD)v11 - v36);
            ++*v4;
            BOOL v14 = 1;
            if (!v40 || v39)
            {
              int v25 = 0;
              int v26 = 0;
            }
            else
            {
              int v25 = 0;
              int v26 = 0;
              int v9 = 0;
              ++v4[1];
            }
          }
          else
          {
            int v26 = v39;
            int v25 = v40;
          }
          unsigned int v27 = *v16;
          if (v27 - 48 >= 0xA) {
            int v25 = 1;
          }
          int v40 = v25;
          if (v27 - 48 < 0xA) {
            int v26 = 1;
          }
          unsigned int v28 = utf8_determineUTF8CharLength(v27);
          int v39 = v26;
          if (v28 >= 2)
          {
            int v22 = v28;
            __s2[0] = 0;
            cstdlib_strncpy(__dst, (const char *)(a2 + v12), v28);
            __dst[v22] = 0;
            utf8_ToLower(__dst, 0, (uint64_t)__s2);
            BOOL v14 = v14 && cstdlib_strcmp(__dst, __s2);
            cstdlib_strcpy(v11, __s2);
            size_t v31 = cstdlib_strlen(__s2);
            unsigned __int16 v10 = 0;
            int v8 = 0;
            v11 += v31;
            goto LABEL_46;
          }
          int v29 = ssft_tolower(*v16);
          *unsigned int v11 = v29;
          if (!v14 || (v30 = *v16, BOOL v14 = 1, (v30 - 58) <= 0xFFFFFFF5) && v29 == v30) {
            BOOL v14 = 0;
          }
          unsigned __int16 v10 = 0;
          int v8 = 0;
          ++v11;
          goto LABEL_50;
        }
LABEL_6:
        if (!v10) {
          goto LABEL_24;
        }
        uint64_t v18 = (unsigned __int16)v4[4];
        if (v18 <= 9)
        {
          if (v14)
          {
            if ((unint64_t)&v11[-v36 - v38 - v10 - (unsigned __int16)v9 - 2] < 3) {
              goto LABEL_20;
            }
          }
          else if (v40)
          {
            goto LABEL_21;
          }
          if (v39 | v8)
          {
LABEL_20:
            v4[4] = v18 + 1;
            v4[v18 + 5] = v38;
          }
        }
LABEL_21:
        int v9 = 0;
        uint64_t v38 = (unsigned __int16)((_WORD)v11 - v36);
        ++*v4;
        BOOL v14 = 1;
        if (v40 && !v39)
        {
          int v39 = 0;
          int v40 = 0;
          int v9 = 0;
          int v8 = 0;
          ++v4[1];
LABEL_24:
          if (!v12) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        int v39 = 0;
        int v40 = 0;
        int v8 = 0;
        if (!v12) {
          goto LABEL_28;
        }
LABEL_27:
        uint64_t v20 = v12 - 1;
        if (!cstdlib_strchr("_ \r\n\x1B", *(unsigned __int8 *)(a2 + v20))) {
          goto LABEL_36;
        }
LABEL_28:
        if (v12 != v13
          && (v12 >= v13 || !cstdlib_strchr("_ \r\n\x1B", v16[1]))
          && (v12 != v35
        {
          if (!v12)
          {
            unsigned __int16 v10 = 0;
LABEL_50:
            int v22 = 1;
            goto LABEL_46;
          }
          uint64_t v20 = v12 - 1;
LABEL_36:
          int v21 = cstdlib_strchr("_ \r\n\x1B", *(unsigned __int8 *)(a2 + v20));
          unsigned __int16 v10 = 0;
          int v22 = 1;
          if (v21 || v12 == v13) {
            goto LABEL_46;
          }
          if (v12 < v13 && cstdlib_strchr("_ \r\n\x1B", v16[1])
            || v12 == v35
          {
            unsigned __int16 v10 = 0;
            goto LABEL_46;
          }
          unsigned __int16 v10 = 0;
          *v11++ = *v16;
          ++v9;
          goto LABEL_45;
        }
        unsigned __int16 v10 = 0;
        *v11++ = *v16;
        ++v9;
        int v22 = 1;
LABEL_45:
        int v8 = 1;
LABEL_46:
        unsigned int v15 = v37;
LABEL_47:
        v12 += v22;
        if (v12 >= v15)
        {
          unsigned int v32 = (unsigned __int16)v4[4];
          if (v32 >= 0xA)
          {
            uint64_t result = v36;
          }
          else
          {
            uint64_t result = v36;
            if (v14)
            {
              uint64_t v33 = v38;
              goto LABEL_91;
            }
            if (!v40)
            {
              int v40 = 0;
              LOWORD(v33) = v38;
              goto LABEL_92;
            }
          }
LABEL_95:
          int v34 = v39;
LABEL_96:
          ++*v4;
          if (v40 && !v34)
          {
            ++v4;
            goto LABEL_100;
          }
          goto LABEL_101;
        }
      }
    }
    unsigned int v32 = (unsigned __int16)v4[4];
    if (v32 < 0xA)
    {
      int v39 = 0;
      int v40 = 0;
      uint64_t v33 = 0;
      unsigned __int16 v10 = 0;
      LOWORD(v9) = 0;
      int v8 = 0;
      unsigned int v11 = (char *)result;
LABEL_91:
      if ((unint64_t)&v11[-result - v33 - v10 - (unsigned __int16)v9 - 2] >= 3)
      {
LABEL_92:
        if (!(v39 | v8))
        {
          int v34 = 0;
          goto LABEL_96;
        }
      }
      v4[4] = v32 + 1;
      v4[v32 + 5] = v33;
      goto LABEL_95;
    }
    unsigned int v11 = (char *)result;
LABEL_100:
    ++*v4;
LABEL_101:
    *unsigned int v11 = 0;
  }
  return result;
}

char *nextWord(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (char *)*a1;
  if (!*a1) {
    return v2;
  }
  char v3 = *v2;
  if (!*v2) {
    return 0;
  }
  while (cstdlib_strchr(" \t\n", v3))
  {
    int v4 = *++v2;
    char v3 = v4;
    if (!v4) {
      return 0;
    }
  }
  if (!*v2) {
    return 0;
  }
  *a1 = (uint64_t)v2;
  LOBYTE(v5) = *v2;
  if (!*v2) {
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v6 = cstdlib_strchr(" \t\n", (char)v5);
    unint64_t v7 = (unsigned char *)*a1;
    if (v6) {
      break;
    }
    *a1 = (uint64_t)(v7 + 1);
    int v5 = v7[1];
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (*v7)
  {
    *unint64_t v7 = 0;
    uint64_t v9 = *a1 + 1;
  }
  else
  {
LABEL_16:
    uint64_t v9 = 0;
  }
  *a1 = v9;
  return v2;
}

uint64_t calcTScore(uint64_t a1, char *__s, uint64_t a3, __int16 a4, unsigned int a5, void *a6, uint64_t *a7)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a5) {
    bzero(a6, 4 * a5);
  }
  unsigned int v51 = a5;
  unsigned int v11 = (unsigned __int16)(cstdlib_strlen(__s) + 4);
  unsigned int v12 = (char *)heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), v11 + 1);
  if (v12)
  {
    uint64_t v17 = (uint64_t)v12;
    memset(__c, 0, sizeof(__c));
    cstdlib_strcpy(v12, "__");
    cstdlib_strcpy((char *)(v17 + 2), __s);
    cstdlib_strcpy((char *)(v17 + v11 - 2), "__");
    uint64_t v18 = 0;
    __dst[3] = 0;
    if (v11 < 3)
    {
LABEL_43:
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v17);
    }
    else
    {
      int v19 = 0;
      unsigned __int16 v20 = 0;
      unsigned int v46 = v11 - 2;
      uint64_t v47 = a6;
      while (1)
      {
        cstdlib_strcpy(__dst, "");
        int v21 = (unsigned __int8 *)(v17 + v20);
        unsigned int v22 = utf8_determineUTF8CharLength(*v21);
        int v23 = 0;
        unsigned int v24 = 0;
        do
        {
          unsigned int v25 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(v17 + (v23 + v19)));
          cstdlib_strncat(__dst, (const char *)&v21[v23], v25);
          v23 += v25;
          BOOL v37 = v24++ >= 2;
        }
        while (!v37);
        __int16 v26 = v22 <= 1 ? 0 : v22;
        __int16 v27 = v26 ? v26 - 1 : 0;
        *(_WORD *)&__c[1] = a4;
        uint64_t v18 = (*(uint64_t (**)(void, void, uint64_t, char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), a3, __dst, &__c[3], &__c[1], __c);
        if ((v18 & 0x80000000) != 0) {
          break;
        }
        int v30 = v51;
        if (v51) {
          bzero(v53, 4 * v51);
        }
        if (*(_WORD *)&__c[1])
        {
          size_t v31 = **(const char ***)&__c[3];
          unsigned int v32 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
          if (v32) {
            BOOL v33 = v51 == 0;
          }
          else {
            BOOL v33 = 1;
          }
          if (v33)
          {
            LOWORD(v36) = 0;
            BOOL v34 = v51 != 0;
          }
          else
          {
            unsigned int v35 = v32;
            unint64_t v36 = 0;
            do
            {
              if (v35 != v31)
              {
                *unsigned int v35 = 0;
                v53[v36] = LH_atou(v31);
              }
              ++v36;
              size_t v31 = v35 + 1;
              unsigned int v35 = cstdlib_strchr(v35 + 1, __c[0]);
              BOOL v34 = v36 < v51;
              if (v35) {
                BOOL v37 = v36 >= v51;
              }
              else {
                BOOL v37 = 1;
              }
            }
            while (!v37);
          }
          if (*v31) {
            BOOL v38 = !v34;
          }
          else {
            BOOL v38 = 1;
          }
          int v30 = v51;
          if (!v38) {
            v53[(unsigned __int16)v36] = LH_atou(v31);
          }
        }
        if (v30)
        {
          int v39 = v53;
          uint64_t v40 = v51;
          uint64_t v41 = v47;
          do
          {
            int v43 = *v39++;
            int v42 = v43;
            if (!v43) {
              int v42 = *(_DWORD *)(a1 + 1152);
            }
            *v41++ += v42;
            --v40;
          }
          while (v40);
        }
        traceScore(a1, (uint64_t)"calcTScore TSCORES ACCUMULATED", (uint64_t)__dst, v30, a7, (uint64_t)v47, v28, v29);
        v20 += v27 + 1;
        int v19 = v20;
        if (v46 <= v20) {
          goto LABEL_43;
        }
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 48000, 0, v13, v14, v15, v16, v45);
    return 2345672714;
  }
  return v18;
}

uint64_t traceScore(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  LODWORD(v10) = a4;
  uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 32);
  if (a2) {
    uint64_t result = log_OutText(v12, (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s %s", a6, a7, a8, a2);
  }
  else {
    uint64_t result = log_OutText(v12, (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s", a6, a7, a8, a3);
  }
  if (v8)
  {
    if (v10)
    {
      uint64_t v17 = v10;
      do
      {
        uint64_t v18 = *a5;
        a5 += 4;
        v8 += 4;
        uint64_t result = log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s: %7lu", v14, v15, v16, v18);
        --v17;
      }
      while (v17);
    }
  }
  else if (v10)
  {
    uint64_t v10 = v10;
    int v19 = a5 + 1;
    do
    {
      uint64_t v20 = *(v19 - 1);
      v19 += 4;
      uint64_t result = log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"%s: %7lu", v14, v15, v16, v20);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t compareScoreOld(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a2 + 8));
}

uint64_t compareScore(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  int v3 = *((_DWORD *)a2 + 2);
  if (v2 == v3)
  {
    if (cstdlib_strcmp((const char *)*a1, (const char *)*a2))
    {
      if (!cstdlib_strncmp((const char *)*a1, (const char *)a1[2], 2uLL)) {
        return 0xFFFFFFFFLL;
      }
      if (!cstdlib_strncmp((const char *)*a2, (const char *)a2[2], 2uLL)) {
        return 1;
      }
      cstdlib_strncpy(__dst, (const char *)*a1, 2uLL);
      _OWORD __dst[2] = 0;
      cstdlib_strncpy(__s2, (const char *)*a2, 2uLL);
      __s2[2] = 0;
      if (cstdlib_strstr((char *)a1[3], __dst))
      {
        if (!cstdlib_strstr((char *)a1[3], __s2)) {
          return 0xFFFFFFFFLL;
        }
      }
      if (!cstdlib_strstr((char *)a1[3], __dst) && cstdlib_strstr((char *)a1[3], __s2)) {
        return 1;
      }
      int v7 = **a1;
      int v8 = **a2;
      if (v7 == v8)
      {
        int v2 = (char)(*a1)[1];
        int v3 = (char)(*a2)[1];
      }
      else
      {
        int v2 = (char)v7;
        int v3 = (char)v8;
      }
    }
    else
    {
      int v2 = *((_DWORD *)a1 + 2);
      int v3 = *((_DWORD *)a2 + 2);
    }
  }
  return (v2 - v3);
}

uint64_t IsFlatDistribution(uint64_t a1, uint64_t a2, char *__s, int a4)
{
  int v8 = cstdlib_strchr(__s, 64);
  if ((!v8 || !cstdlib_strchr(v8, 46))
    && !cstdlib_strstr(__s, "http")
    && !cstdlib_strstr(__s, "ftp")
    && !cstdlib_strstr(__s, "www."))
  {
    uint64_t v12 = cstdlib_strstr(__s, ".com");
    BOOL v13 = v12 == 0;
    if (*(_WORD *)(a2 + 8) && !v12)
    {
      uint64_t v14 = 5;
      do
      {
        int v15 = *(unsigned __int16 *)(a2 + 2 * v14);
        BOOL v13 = v15 != a4;
        if (v14 - 4 >= (unint64_t)*(unsigned __int16 *)(a2 + 8)) {
          break;
        }
        ++v14;
      }
      while (v15 != a4);
    }
    if (v13) {
      return 0;
    }
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LID", 5, 0, (uint64_t)"Acronym or digit or punctuation or url or e-mail address: %s => flat distribution with very small bias toward main language or memory", v9, v10, v11, (uint64_t)__s);
  return 1;
}

uint64_t dcteg_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 2) {
    return 2231377921;
  }
  uint64_t result = 0;
  *a2 = &IDcteg;
  return result;
}

uint64_t dcteg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 2231377927;
  __s1 = 0;
  uint64_t v21 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  BOOL v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
      {
        uint64_t v12 = (void *)heap_Calloc(*(void **)(v21 + 8), 1, 80);
        if (v12)
        {
          uint64_t v17 = v12;
          *uint64_t v12 = a3;
          v12[1] = a4;
          uint64_t v18 = v21;
          v12[2] = v21;
          v12[9] = 1;
          if ((paramc_ParamGetStr(*(void *)(v18 + 40), (uint64_t)"udcturlhashtag", &__s1) & 0x80000000) == 0
            && __s1
            && !cstdlib_strcmp(__s1, "yes"))
          {
            *((_DWORD *)v17 + 19) = 1;
          }
          dctlist_ObjOpen(v17 + 3, *(void *)(v21 + 8));
          uint64_t v8 = 0;
          *(void *)a5 = v17;
          *(_DWORD *)(a5 + 8) = 752;
        }
        else
        {
          log_OutPublic(*(void *)(v21 + 32), (uint64_t)"DCTEG", 4400, 0, v13, v14, v15, v16, __s1);
          return 2231377930;
        }
      }
    }
  }
  return v8;
}

uint64_t dcteg_ObjClose(uint64_t a1, int a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v3 = safeh_HandleCheck(a1, a2, 752, 80);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v9);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t Next = dctlist_GetNext(a1 + 24, &v10);
    if (Next)
    {
      uint64_t v6 = Next;
      do
      {
        p_unloadDct(a1, v6);
        uint64_t v6 = dctlist_GetNext(a1 + 24, &v10);
      }
      while (v6);
    }
    dctlist_ObjClose(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      uint64_t inited = CloseEDCTObj(v7);
    }
    heap_Free(*(void **)(v9 + 8), a1);
  }
  return inited;
}

uint64_t dcteg_LoadDictionary(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 2231377930;
  uint64_t v82 = 0;
  uint64_t v5 = 2231377927;
  if (!a3 || !a4) {
    return v5;
  }
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  uint64_t inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v82);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (*(void *)a3 && p_checkIfPresent(a1, *(const char **)a3))
  {
    uint64_t v14 = *(const char **)a3;
    if (!*(void *)a3) {
      uint64_t v14 = "Unknown";
    }
    log_OutText(v82[4], (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_LoadDictionary failed, already loaded: %s", v11, v12, v13, (uint64_t)v14);
    return 2231378968;
  }
  uint64_t v16 = *(const char **)(a3 + 8);
  if (v16 && cstdlib_strlen(v16) && p_checkIfPresent(a1, *(const char **)(a3 + 8)))
  {
    uint64_t v17 = *(const char **)(a3 + 8);
    if (!v17) {
      uint64_t v17 = "Unknown";
    }
    log_OutText(v82[4], (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_LoadDictionary failed, already loaded: %s", v11, v12, v13, (uint64_t)v17);
    return 2231377939;
  }
  if (!*(void *)a3)
  {
    if (!*(void *)(a3 + 16))
    {
      log_OutPublic(v82[4], (uint64_t)"DCTEG", 4408, 0, v10, v11, v12, v13, v81);
      return v5;
    }
    BOOL v37 = (void *)heap_Calloc((void *)v82[1], 1, 120);
    uint64_t v23 = (uint64_t)v82;
    if (!v37) {
      goto LABEL_40;
    }
    uint64_t v24 = (uint64_t)v37;
    *BOOL v37 = v82[1];
    BOOL v38 = *(char **)(a3 + 32);
    if (v38)
    {
      int v39 = "application/edct-bin-dictionary";
      if (cstdlib_strstr(v38, "application/edct-bin-dictionary")) {
        goto LABEL_35;
      }
      int v43 = *(char **)(a3 + 32);
      if (v43)
      {
        if (cstdlib_strstr(v43, "application/octet-stream")) {
          goto LABEL_35;
        }
        unsigned int v44 = *(char **)(a3 + 32);
        if (v44)
        {
          int v39 = "application/cdct-bin-dictionary";
          if (cstdlib_strstr(v44, "application/cdct-bin-dictionary")) {
            goto LABEL_35;
          }
          unsigned int v45 = *(char **)(a3 + 32);
          if (v45)
          {
            int v39 = "application/x-vocalizer-userdct-pointer";
            if (cstdlib_strstr(v45, "application/x-vocalizer-userdct-pointer")) {
              goto LABEL_35;
            }
            unsigned int v46 = *(char **)(a3 + 32);
            if (v46 && cstdlib_strstr(v46, "application/vmp-bin-dictionary"))
            {
              int v39 = "application/edct-bin-dictionary";
LABEL_35:
              *(void *)(v24 + 16) = v39;
              uint64_t v40 = *(char **)(a3 + 32);
              if (!v40 || (uint64_t v41 = "mode=langoverwriting", !cstdlib_strstr(v40, "mode=langoverwriting"))) {
                uint64_t v41 = "mode=standard";
              }
              *(void *)(v24 + 32) = v41;
              if (cstdlib_strstr(*(char **)(a3 + 32), "application/x-vocalizer-userdct-pointer")) {
                int v42 = 4;
              }
              else {
                int v42 = *(_DWORD *)(a3 + 24);
              }
              *(_DWORD *)(v24 + 64) = v42;
              *(_DWORD *)(v24 + 44) = 0;
              *(void *)(v24 + 48) = *(void *)(a3 + 16);
              goto LABEL_56;
            }
          }
        }
      }
    }
    log_OutPublic(v82[4], (uint64_t)"DCTEG", 4403, (uint64_t)"%s%s%s%s", v19, v20, v21, v22, "name");
    uint64_t v4 = 2231378966;
    goto LABEL_97;
  }
  uint64_t v18 = heap_Calloc((void *)v82[1], 1, 120);
  uint64_t v23 = (uint64_t)v82;
  if (!v18)
  {
LABEL_40:
    log_OutPublic(*(void *)(v23 + 32), (uint64_t)"DCTEG", 4400, 0, v19, v20, v21, v22, v81);
    return 2231377930;
  }
  uint64_t v24 = v18;
  *(void *)uint64_t v18 = v82[1];
  uint64_t v25 = *(void *)(a1 + 16);
  *(void *)(v18 + 104) = 0;
  __int16 v26 = (uint64_t *)(v18 + 104);
  *(void *)(v18 + 48) = 0;
  uint64_t v27 = v18 + 48;
  *(_DWORD *)(v18 + 44) = 0;
  *(_DWORD *)(v18 + 64) = 0;
  uint64_t v28 = v18 + 64;
  uint64_t UDct = brk_DataOpenEx(*(void *)(v25 + 24), *(void *)a3, 0, v18 + 104);
  if ((UDct & 0x80000000) != 0) {
    goto LABEL_94;
  }
  uint64_t UDct = brk_DataMapEx(*(void *)(v25 + 24), *v26, 0, v28, v27);
  if ((UDct & 0x80000000) != 0) {
    goto LABEL_94;
  }
  unsigned int v35 = *(char **)(a3 + 32);
  if (!v35 || !*v35)
  {
    log_OutPublic(*(void *)(v25 + 32), (uint64_t)"DCTEG", 4415, (uint64_t)"%s%s", v31, v32, v33, v34, "uri");
    uint64_t v4 = 2231377922;
    goto LABEL_97;
  }
  unint64_t v36 = "application/edct-bin-dictionary";
  if (cstdlib_strstr(*(char **)(a3 + 32), "application/edct-bin-dictionary")
    || cstdlib_strstr(v35, "application/octet-stream")
    || (unint64_t v36 = "application/cdct-bin-dictionary", cstdlib_strstr(v35, "application/cdct-bin-dictionary"))
    || (unint64_t v36 = "application/x-vocalizer-userdct-pointer", cstdlib_strstr(v35, "application/x-vocalizer-userdct-pointer")))
  {
    *(void *)(v24 + 16) = v36;
  }
  else
  {
    *(void *)(v24 + 16) = "application/octet-stream";
  }
  if (cstdlib_strstr(v35, "mode=langoverwriting")) {
    *(void *)(v24 + 32) = "mode=langoverwriting";
  }
  else {
    *(void *)(v24 + 32) = "mode=standard";
  }
LABEL_56:
  uint64_t v47 = *(char **)(a3 + 32);
  if (v47)
  {
    uint64_t v48 = (uint64_t)v82;
    uint64_t v49 = cstdlib_strstr(v47, "type=");
    if (v49)
    {
      unsigned int v50 = v49 + 5;
      unsigned int v51 = cstdlib_strchr(v49 + 5, 59);
      if (!v51) {
        unsigned int v51 = (char *)&v50[cstdlib_strlen(v50)];
      }
      unsigned int v52 = v51 - v50;
      uint64_t v53 = heap_Alloc(*(void *)(v48 + 8), (v51 - v50 + 1));
      *(void *)(v24 + 24) = v53;
      if (!v53)
      {
        uint64_t v77 = *(void *)(v48 + 32);
        goto LABEL_96;
      }
      uint64_t v58 = v52;
      if (v52)
      {
        uint64_t v59 = 0;
        do
        {
          *(unsigned char *)(*(void *)(v24 + 24) + v59) = cstdlib_tolower(v50[v59]);
          ++v59;
        }
        while (v58 != v59);
        uint64_t v53 = *(void *)(v24 + 24);
      }
      *(unsigned char *)(v53 + v58) = 0;
    }
    else
    {
      *(void *)(v24 + 24) = 0;
    }
  }
  if (*(void *)(a3 + 8)) {
    unsigned int v60 = *(const char **)(a3 + 8);
  }
  else {
    unsigned int v60 = "Unknown";
  }
  uint64_t v61 = v82[1];
  int v62 = cstdlib_strlen(v60);
  uint64_t v63 = (char *)heap_Alloc(v61, (v62 + 1));
  *(void *)(v24 + 8) = v63;
  if (!v63
    || ((cstdlib_strcpy(v63, v60), *(void *)a3) ? (uint64_t v64 = *(const char **)a3) : (uint64_t v64 = "Unknown"),
        uint64_t v65 = v82[1],
        int v66 = cstdlib_strlen(v64),
        uint64_t v67 = (char *)heap_Alloc(v65, (v66 + 1)),
        (*(void *)(v24 + 56) = v67) == 0))
  {
    uint64_t v77 = v82[4];
LABEL_96:
    log_OutPublic(v77, (uint64_t)"DCTEG", 4400, 0, v54, v55, v56, v57, v81);
    goto LABEL_97;
  }
  cstdlib_strcpy(v67, v64);
  if (*(void *)(v24 + 56) && *(void *)(a3 + 32)) {
    log_OutEvent((uint64_t **)v82[4], 12, (uint64_t)"%s%s%s%s", v68, v69, v70, v71, v72, "URI");
  }
  if (cstdlib_strcmp(*(const char **)(v24 + 16), "application/edct-bin-dictionary")
    && cstdlib_strcmp(*(const char **)(v24 + 16), "application/cdct-bin-dictionary")
    && cstdlib_strcmp(*(const char **)(v24 + 16), "application/x-vocalizer-userdct-pointer"))
  {
    log_OutPublic(v82[4], (uint64_t)"DCTEG", 4403, (uint64_t)"%s%s%s%s", v73, v74, v75, v76, "name");
LABEL_93:
    uint64_t v4 = v5;
    goto LABEL_97;
  }
  uint64_t v78 = *(void *)(a1 + 48);
  if (!v78)
  {
    uint64_t UDct = OpenEDCTObj(*(_WORD **)a1, *(void *)(a1 + 8), a1 + 48);
    if ((UDct & 0x80000000) == 0)
    {
      uint64_t v78 = *(void *)(a1 + 48);
      goto LABEL_86;
    }
LABEL_94:
    uint64_t v4 = UDct;
    goto LABEL_97;
  }
LABEL_86:
  uint64_t UDct = LoadUDct(v78, v24);
  if ((UDct & 0x80000000) != 0) {
    goto LABEL_94;
  }
  if (*(_DWORD *)(a1 + 72))
  {
    uint64_t UDct = dcteg_hlp_InitializeMWDct((uint64_t)v82, a1, v24);
    if ((UDct & 0x80000000) != 0) {
      goto LABEL_94;
    }
  }
  *(void *)(v24 + 96) = 0;
  if (*(_DWORD *)(a1 + 76))
  {
    uint64_t UDct = dcteg_hlp_FetchURLHashtag((uint64_t)v82, v24);
    if ((UDct & 0x80000000) != 0) {
      goto LABEL_94;
    }
  }
  *(_DWORD *)(v24 + 40) = 1;
  uint64_t v5 = dctlist_Add(a1 + 24, v24);
  if ((v5 & 0x80000000) == 0)
  {
    *(void *)a4 = v24;
    *(_DWORD *)(a4 + 8) = 753;
    goto LABEL_93;
  }
  log_OutPublic(v82[4], (uint64_t)"DCTEG", 4418, (uint64_t)"%s%s", v31, v32, v33, v34, "name");
  uint64_t v4 = v5 | 0x85002000;
LABEL_97:
  if (*(void *)(v24 + 56) && *(void *)(a3 + 32)) {
    log_OutEvent((uint64_t **)v82[4], 13, (uint64_t)"%s%s%s%s", v30, v31, v32, v33, v34, "URI");
  }
  uint64_t v79 = *(void *)(v24 + 48);
  if (v79) {
    brk_DataUnmap(v82[3], *(void *)(v24 + 104), v79);
  }
  uint64_t v80 = *(void *)(v24 + 104);
  if (v80) {
    brk_DataClose(v82[3], v80);
  }
  if ((v4 & 0x80000000) != 0) {
    p_unloadDct(a1, v24);
  }
  return v4;
}

uint64_t dcteg_UnloadDictionary(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v15 = 0;
  uint64_t inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t inited = safeh_HandleCheck(a3, a4, 753, 120);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v15);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v8 = dctlist_Remove(a1 + 24, a3);
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v13 = v8;
          log_OutPublic(*(void *)(v15 + 32), (uint64_t)"DCTEG", 4410, (uint64_t)"%s%s", v9, v10, v11, v12, "name");
          return v13;
        }
        return p_unloadDct(a1, a3);
      }
    }
  }
  return inited;
}

uint64_t dcteg_SetExternalCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 752, 80);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v8);
    if ((result & 0x80000000) == 0)
    {
      *(void *)(a1 + 56) = a3;
      *(void *)(a1 + 64) = a4;
    }
  }
  return result;
}

uint64_t dcteg_IsDictActive(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  if ((safeh_HandleCheck(a1, a2, 752, 80) & 0x80000000) != 0) {
    return 0;
  }
  uint64_t Next = dctlist_GetNext(a1 + 24, &v6);
  if (!Next) {
    return *(void *)(a1 + 56) != 0;
  }
  uint64_t v4 = Next;
  while (cstdlib_strcmp(*(const char **)(v4 + 16), "application/edct-bin-dictionary")
       && cstdlib_strcmp(*(const char **)(v4 + 16), "application/cdct-bin-dictionary")
       && cstdlib_strcmp(*(const char **)(v4 + 16), "application/x-vocalizer-userdct-pointer")
       || *(_DWORD *)(v4 + 40) != 1)
  {
    uint64_t v4 = dctlist_GetNext(a1 + 24, &v6);
    if (!v4) {
      return *(void *)(a1 + 56) != 0;
    }
  }
  return 1;
}

uint64_t dcteg_EnableDictionary(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t v20 = 0;
  uint64_t inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = safeh_HandleCheck(a3, a4, 753, 120);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v20);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (*(_DWORD *)(a3 + 40) == 1)
  {
    uint64_t v13 = *(const char **)(a3 + 8);
    if (!v13) {
      uint64_t v13 = "Unknown";
    }
    log_OutText(*(void *)(v20 + 32), (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_EnableDictionary failed, already enabled: %s", v10, v11, v12, (uint64_t)v13);
    return 2231378970;
  }
  else
  {
    uint64_t v14 = dctlist_Move(a1 + 24, a3, a5);
    if ((v14 & 0x80000000) != 0) {
      log_OutPublic(*(void *)(v20 + 32), (uint64_t)"DCTEG", 4411, (uint64_t)"%s%s", v16, v17, v18, v19, "name");
    }
    else {
      *(_DWORD *)(a3 + 40) = 1;
    }
  }
  return v14;
}

uint64_t dcteg_DisableDictionary(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t inited = safeh_HandleCheck(a3, a4, 753, 120);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v18 = 0;
  uint64_t inited = safeh_HandleCheck(a1, a2, 752, 80);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v18);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (*(_DWORD *)(a3 + 40))
  {
    uint64_t v15 = dctlist_Move(a1 + 24, a3, 0xFFFFFFFF);
    if ((v15 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(v18 + 32), (uint64_t)"DCTEG", 4412, (uint64_t)"%s%s", v11, v12, v13, v14, "name");
      return v15 | 0x85002000;
    }
    else
    {
      *(_DWORD *)(a3 + 40) = 0;
    }
  }
  else
  {
    uint64_t v17 = *(const char **)(a3 + 8);
    if (!v17) {
      uint64_t v17 = "Unknown";
    }
    log_OutText(*(void *)(v18 + 32), (uint64_t)"DCTEG", 3, 0, (uint64_t)"dcteg_DisableDictionary failed, already disabled: %s", v8, v9, v10, (uint64_t)v17);
    return 2231378957;
  }
  return v15;
}

uint64_t dcteg_DisableAllDictionaries(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  uint64_t v3 = safeh_HandleCheck(a1, a2, 752, 80);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v4 = a1 + 24;
    for (uint64_t i = dctlist_GetNext(v4, (uint64_t *)&v7); i; uint64_t i = dctlist_GetNext(v4, (uint64_t *)&v7))
    {
      *uint64_t v7 = -1;
      *(_DWORD *)(i + 40) = 0;
    }
  }
  return v3;
}

uint64_t dcteg_Lookup_Utf8(void *a1, uint64_t a2, unsigned char *a3, const char *a4, char *a5, __int16 *a6, char *a7, _DWORD *a8, char *a9, unsigned char *a10, void *a11, int a12)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v18 = 2231377920;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  if (a12 == 2) {
    int v21 = 111;
  }
  else {
    int v21 = 0;
  }
  if (a12 == 1) {
    int v22 = 108;
  }
  else {
    int v22 = v21;
  }
  if (!a1) {
    return 2231377928;
  }
  uint64_t v64 = v20;
  uint64_t v65 = NullHandle;
  uint64_t v23 = *(void *)(a1[2] + 40);
  *(void *)unsigned __int16 __s = 0;
  __dst[0] = 0;
  uint64_t Str = paramc_ParamGetStr(v23, (uint64_t)"langcode", __s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  if (!*(void *)__s || cstdlib_strlen(*(const char **)__s) != 3) {
    return 2231377920;
  }
  unsigned int v59 = v22;
  cstdlib_strcpy(__dst, *(const char **)__s);
  if (cstdlib_strlen(__dst))
  {
    int v62 = a7;
    uint64_t v25 = a3;
    size_t v26 = 0;
    do
    {
      __dst[v26] = cstdlib_tolower(__dst[v26]);
      ++v26;
    }
    while (v26 < cstdlib_strlen(__dst));
    a3 = v25;
    a7 = v62;
  }
  if ((objc_GetObject(*(void *)(a1[2] + 48), (uint64_t)"CLMOBJECT", &v69) & 0x80000000) != 0)
  {
    uint64_t v63 = 0;
  }
  else
  {
    uint64_t v65 = v69[2];
    uint64_t v63 = v69[1];
    uint64_t v64 = v69[3];
  }
  __s[0] = 0;
  if (a4 && cstdlib_strlen(a4))
  {
    if (cstdlib_strlen(a4) + 1 > 0xC) {
      goto LABEL_82;
    }
    cstdlib_strcpy(__s, a4);
    if ((int)cstdlib_strlen(__s) >= 1)
    {
      int v28 = 0;
      do
      {
        __s[v28] = cstdlib_tolower(__s[v28]);
        ++v28;
      }
      while ((int)cstdlib_strlen(__s) > v28);
    }
    uint64_t v29 = cstdlib_strstr(__s, "normal");
    if (!v29)
    {
      uint64_t v29 = cstdlib_strstr(__s, "lid");
      if (!v29) {
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t v29 = __s;
  }
  cstdlib_strcpy(v29, __dst);
LABEL_33:
  if (a5)
  {
    uint64_t v30 = *(void *)(a1[2] + 8);
    int v31 = cstdlib_strlen(a5);
    uint64_t v32 = heap_Alloc(v30, (v31 + 1));
    if (!v32)
    {
      log_OutPublic(*(void *)(a1[2] + 32), (uint64_t)"DCTEG", 4400, 0, v33, v34, v35, v36, v57);
      uint64_t v18 = 2231377930;
      goto LABEL_82;
    }
    BOOL v37 = (char *)v32;
    if ((int)cstdlib_strlen(a5) < 1)
    {
      uint64_t v40 = 0;
    }
    else
    {
      uint64_t v61 = a3;
      unsigned int v38 = 0;
      unsigned __int8 v39 = 0;
      do
      {
        utf8_ToLower(a5, v38, (uint64_t)&v37[v39++]);
        unsigned int v38 = v39;
      }
      while (v39 < (int)cstdlib_strlen(a5));
      uint64_t v40 = v39;
      a3 = v61;
    }
    v37[v40] = 0;
  }
  else
  {
    BOOL v37 = 0;
  }
  uint64_t Next = dctlist_GetNext((uint64_t)(a1 + 3), &v70);
  if (!Next)
  {
LABEL_68:
    uint64_t v56 = (uint64_t (*)(void, unsigned char *, __int16 *, char *))a1[7];
    if (v56)
    {
      uint64_t Str = v56(a1[8], a3, a6, a7);
    }
    else if ((int)Str < 0)
    {
      uint64_t Str = Str;
    }
    else
    {
      uint64_t Str = 2231377940;
    }
    goto LABEL_79;
  }
  uint64_t v42 = Next;
  __int16 v60 = 0;
  while (1)
  {
    if (cstdlib_strcmp(*(const char **)(v42 + 16), "application/edct-bin-dictionary")
      && cstdlib_strcmp(*(const char **)(v42 + 16), "application/cdct-bin-dictionary")
      && cstdlib_strcmp(*(const char **)(v42 + 16), "application/x-vocalizer-userdct-pointer"))
    {
      log_OutPublic(*(void *)(a1[2] + 32), (uint64_t)"DCTEG", 4413, (uint64_t)"%s%s%s%s", v43, v44, v45, v46, "name");
      uint64_t Str = 2231377927;
      goto LABEL_79;
    }
    if (*(_DWORD *)(v42 + 40) == 1) {
      break;
    }
LABEL_64:
    uint64_t v42 = dctlist_GetNext((uint64_t)(a1 + 3), &v70);
    if (!v42) {
      goto LABEL_68;
    }
  }
  if (cstdlib_strcmp(*(const char **)(v42 + 32), "mode=langoverwriting")) {
    uint64_t v47 = __s;
  }
  else {
    uint64_t v47 = 0;
  }
  if (a6) {
    __int16 v60 = *a6;
  }
  uint64_t Str = RetrieveUDctEntry((uint64_t)a1, v42, v47, v37, a3, a7, a6, a9, a10, a8);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_62;
  }
  int v67 = 1;
  if (!v63) {
    goto LABEL_75;
  }
  uint64_t v53 = safeh_GetNullHandle();
  if (safeh_HandlesEqual(v65, v64, v53, v54) || *a8 != 1) {
    goto LABEL_75;
  }
  log_OutText(*(void *)(a1[2] + 32), (uint64_t)"DCTEG", 4, 0, (uint64_t)"Validating transcription [%s] [LNG=%s LOO=%s] [%s]", v50, v51, v52, (uint64_t)a7);
  uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned char *, char *, int *))(v63 + 88))(v65, v64, a9, a10, a7, &v67);
  if ((Str & 0x80000000) != 0)
  {
    if (a6) {
LABEL_61:
    }
      *a6 = v60;
LABEL_62:
    if (a12) {
      log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), v59, (uint64_t)"%s%s %s%s %s%u", v48, v49, v50, v51, v52, "NAME");
    }
    goto LABEL_64;
  }
  uint64_t v55 = *(void *)(a1[2] + 32);
  if (!v67)
  {
    log_OutText(v55, (uint64_t)"DCTEG", 4, 0, (uint64_t)"Skipping invalid transcription [%s]", v50, v51, v52, (uint64_t)a7);
    LODWORD(Str) = -2063589356;
    if (!a6) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  log_OutText(v55, (uint64_t)"DCTEG", 4, 0, (uint64_t)"Valid transcription", v50, v51, v52, v58);
LABEL_75:
  if (a11) {
    *a11 = *(void *)(v42 + 56);
  }
  if (a12) {
    log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), v59, (uint64_t)"%s%s %s%s %s%s %s%u", v48, v49, v50, v51, v52, "NAME");
  }
LABEL_79:
  if (v37) {
    heap_Free(*(void **)(a1[2] + 8), (uint64_t)v37);
  }
  uint64_t v18 = Str;
LABEL_82:
  if (v63) {
    objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"CLMOBJECT");
  }
  return v18;
}

uint64_t dcteg_LookupMultiWordLengths(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, char *a5, unsigned __int16 *a6)
{
  v29[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = 2231377940;
  unsigned __int16 __s = 0;
  v29[0] = 0;
  size_t v7 = *a4;
  __s1 = 0;
  if (!a1) {
    return 2231377928;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13
    || (uint64_t v14 = *(void *)(v13 + 40)) == 0
    || (paramc_ParamGetStr(v14, (uint64_t)"disablemultiworddictionarywithoutescseqlookup", &__s1) & 0x80000000) != 0
    || !__s1
    || cstdlib_strcmp(__s1, "yes"))
  {
    *a5 = 0;
    uint64_t v15 = a1 + 24;
    uint64_t Next = dctlist_GetNext(v15, v29);
    if (Next)
    {
      unsigned __int16 v17 = 0;
      char v18 = 0;
      do
      {
        while ((ssftmap_Find(*(void *)(Next + 88), a3, &__s) & 0x80000000) == 0 && cstdlib_strlen(__s) + v17 < v7)
        {
          cstdlib_strcat(a5, __s);
          v17 += cstdlib_strlen(__s);
          *a4 = v17;
          uint64_t Next = dctlist_GetNext(v15, v29);
          uint64_t v6 = 0;
          char v18 = 1;
          if (!Next) {
            goto LABEL_17;
          }
        }
        uint64_t Next = dctlist_GetNext(v15, v29);
      }
      while (Next);
      if ((v18 & 1) == 0) {
        return v6;
      }
LABEL_17:
      if (*a4)
      {
        unsigned __int16 v19 = cstdlib_strlen(a5);
        unsigned int v20 = v19;
        if (v19)
        {
          unsigned int v21 = 0;
          unsigned int v22 = v19;
          do
          {
            while (v20 > v21 && a5[v21] == 32)
              ++v21;
            if (v20 <= v21)
            {
              unsigned __int16 v23 = 0;
            }
            else
            {
              unsigned __int16 v23 = 0;
              do
              {
                int v24 = a5[v21];
                if (v24 == 32) {
                  break;
                }
                *((unsigned char *)v29 + v23) = v24;
                ++v21;
                ++v23;
              }
              while (v20 > v21);
            }
            *((unsigned char *)v29 + v23) = 0;
            unsigned __int16 v25 = (unsigned __int16)LH_atoi((const char *)v29);
            if (*a6 < v25) {
              *a6 = v25;
            }
          }
          while (v21 < v22);
        }
      }
      return 0;
    }
  }
  return v6;
}

uint64_t dcteg_CheckProtectURLHashtag(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!a1) {
    return 2231377928;
  }
  int v5 = *(_DWORD *)(a1 + 76);
  if (v5)
  {
    uint64_t v7 = a1 + 24;
    while (1)
    {
      uint64_t result = dctlist_GetNext(v7, &v10);
      if (!result)
      {
        int v5 = 0;
        goto LABEL_12;
      }
      uint64_t result = ssftmap_FindReadOnly(*(void *)(result + 96), a3, &v9);
      if ((result & 0x80000000) == 0) {
        break;
      }
      if ((result & 0x1FFF) != 0x14) {
        return result;
      }
    }
    int v5 = 1;
  }
  else
  {
    uint64_t result = 0;
  }
LABEL_12:
  *a4 = v5;
  return result;
}

uint64_t p_unloadDct(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v28);
  if ((inited & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 103, (uint64_t)"%s%s %s%s", v4, v5, v6, v7, v8, "BEG");
    uint64_t v14 = *(void *)(a2 + 88);
    if (!v14 || (uint64_t inited = ssftmap_ObjClose(v14), (inited & 0x80000000) == 0))
    {
      uint64_t v16 = *(void *)(a2 + 96);
      if (!v16 || (uint64_t inited = ssftmap_ObjClose(v16), (inited & 0x80000000) == 0))
      {
        unsigned __int16 v17 = *(const char **)(a2 + 16);
        if (!v17)
        {
          uint64_t inited = 2231377927;
          log_OutPublic(*(void *)(v28 + 32), (uint64_t)"DCTEG", 4405, (uint64_t)"%s%s", v10, v11, v12, v13, "name");
          goto LABEL_15;
        }
        if (cstdlib_strcmp(v17, "application/edct-bin-dictionary")
          && cstdlib_strcmp(*(const char **)(a2 + 16), "application/cdct-bin-dictionary")
          && cstdlib_strcmp(*(const char **)(a2 + 16), "application/x-vocalizer-userdct-pointer"))
        {
          uint64_t inited = 2231377927;
          log_OutPublic(*(void *)(v28 + 32), (uint64_t)"DCTEG", 4404, (uint64_t)"%s%s%s%s", v18, v19, v20, v21, "name");
LABEL_15:
          uint64_t v23 = *(void *)(a2 + 8);
          if (v23) {
            heap_Free(*(void **)(v28 + 8), v23);
          }
          uint64_t v24 = *(void *)(a2 + 24);
          if (v24) {
            heap_Free(*(void **)(v28 + 8), v24);
          }
          uint64_t v25 = *(void *)(a2 + 56);
          if (v25) {
            heap_Free(*(void **)(v28 + 8), v25);
          }
          uint64_t v26 = *(void *)(a2 + 48);
          if (v26 && *(_DWORD *)(a2 + 44)) {
            heap_Free(*(void **)(v28 + 8), v26);
          }
          heap_Free(*(void **)(v28 + 8), a2);
          goto LABEL_25;
        }
        uint64_t v22 = *(void *)(a1 + 48);
        if (!v22) {
          goto LABEL_15;
        }
        uint64_t inited = UnloadUDct(v22, (void *)a2);
        if ((inited & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
    }
LABEL_25:
    log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 103, (uint64_t)"%s%s %s%u", v15, v10, v11, v12, v13, "END");
  }
  return inited;
}

uint64_t p_checkIfPresent(uint64_t a1, const char *a2)
{
  uint64_t v7 = 0;
  uint64_t v3 = a1 + 24;
  do
  {
    uint64_t Next = dctlist_GetNext(v3, &v7);
    uint64_t v5 = Next;
  }
  while (Next && cstdlib_strcmp(a2, *(const char **)(Next + 8)));
  return v5;
}

uint64_t dcteg_hlp_InitializeMWDct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v65 = 0;
  int v66 = 0;
  uint64_t v4 = *(void **)(*(void *)(a2 + 16) + 8);
  *(_OWORD *)unsigned __int16 __s = xmmword_26D211538;
  long long v63 = *(_OWORD *)off_26D211548;
  uint64_t v64 = off_26D211558;
  unsigned int v59 = (uint64_t *)(a3 + 88);
  uint64_t v5 = ssftmap_ObjOpen(v4, 0, (long long *)__s, (uint64_t *)(a3 + 88));
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_61;
  }
  uint64_t v6 = *(void *)(a3 + 72);
  if (v6)
  {
    Dictionary_FetchKeys(v6, &v66, &v65);
  }
  else
  {
    if (cstdlib_strstr(*(char **)(a3 + 16), "application/x-vocalizer-userdct-pointer"))
    {
      uint64_t v44 = *(void *)(a3 + 48);
      if (v44)
      {
        __s[0] = 0;
        uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44 - *(void *)(*(void *)v44 + 48));
        if (v45)
        {
          int v46 = (**(uint64_t (***)(uint64_t, uint64_t, char **))v45)(v45 - *(void *)(*(void *)v45 + 64), 414531107, __s);
          uint64_t v5 = LH_ERROR_to_VERROR(v46);
          if ((v5 & 0x80000000) == 0 && __s[0])
          {
            int v47 = (*(uint64_t (**)(char *, char ***, unint64_t *))(*(void *)__s[0] + 16))(&__s[0][-*(void *)(*(void *)__s[0] + 32)], &v66, &v65);
            uint64_t v5 = LH_ERROR_to_VERROR(v47);
          }
          if ((v5 & 0x80000000) != 0) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v5 = 0;
        }
        goto LABEL_5;
      }
    }
    uint64_t v58 = *(void *)(a3 + 80);
    if (!v58) {
      goto LABEL_5;
    }
    int Keys = CDSObject_FetchKeys(v58, (uint64_t *)&v66, &v65);
  }
  uint64_t v5 = LH_ERROR_to_VERROR(Keys);
  if ((v5 & 0x80000000) != 0)
  {
LABEL_61:
    uint64_t v24 = 0;
    goto LABEL_62;
  }
LABEL_5:
  if (!v65) {
    goto LABEL_61;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v60 = 0;
  while (1)
  {
    uint64_t v10 = v66[v8];
    unsigned __int16 v11 = cstdlib_strlen(v10);
    unsigned int v12 = v11;
    if (v11)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      unsigned int v15 = v11;
      do
      {
        if (v12 > v13)
        {
          uint64_t v16 = v13;
          if (utf8_BelongsToSet(0, v10, v13, v12))
          {
            while (1)
            {
              unsigned __int16 NextUtf8Offset = utf8_GetNextUtf8Offset(v10, v13);
              uint64_t v13 = NextUtf8Offset;
              if (v12 <= NextUtf8Offset) {
                break;
              }
              LOWORD(v16) = NextUtf8Offset;
              if (!utf8_BelongsToSet(0, v10, NextUtf8Offset, v12))
              {
                uint64_t v16 = (unsigned __int16)v16;
                goto LABEL_14;
              }
            }
          }
          else
          {
LABEL_14:
            if (v12 > v13 && !utf8_BelongsToSet(0, v10, v13, v12))
            {
              do
                uint64_t v13 = (unsigned __int16)utf8_GetNextUtf8Offset(v10, v13);
              while (v12 > v13 && !utf8_BelongsToSet(0, v10, v13, v12));
              uint64_t v16 = v13;
            }
            ++v14;
            uint64_t v13 = v16;
          }
        }
      }
      while (v13 < v15);
      if (v14 >= 2) {
        break;
      }
    }
    uint64_t v24 = v9;
LABEL_52:
    ++v8;
    uint64_t v9 = v24;
    if (v8 >= v65) {
      goto LABEL_62;
    }
  }
  uint64_t v18 = v66[v8];
  size_t v19 = cstdlib_strlen(v18);
  unsigned int v20 = (unsigned __int16)cstdlib_strlen(v18);
  if (v20)
  {
    int v21 = 0;
    if (utf8_BelongsToSet(0, v18, 0, v20))
    {
      while (1)
      {
        unsigned __int16 v22 = utf8_GetNextUtf8Offset(v18, v21);
        int v21 = v22;
        if (v20 <= v22) {
          break;
        }
        if (!utf8_BelongsToSet(0, v18, v22, v20)) {
          goto LABEL_26;
        }
      }
      LOWORD(v23) = v22;
    }
    else
    {
LABEL_26:
      unsigned int v23 = v21;
      do
      {
        if (utf8_BelongsToSet(0, v18, v23, v20)) {
          break;
        }
        unsigned int v23 = (unsigned __int16)utf8_GetNextUtf8Offset(v18, v23);
      }
      while (v20 > v23);
    }
  }
  else
  {
    LOWORD(v21) = 0;
    LOWORD(v23) = 0;
  }
  unint64_t v25 = (unsigned __int16)(v23 - v21);
  if (v60 >= v25)
  {
    uint64_t v24 = v9;
  }
  else
  {
    uint64_t v24 = heap_Realloc(*(uint64_t **)(a1 + 8), v9, v25 + 1);
    unint64_t v60 = v25;
    if (!v24)
    {
      uint64_t v5 = 2231377930;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"DCTEG", 4400, 0, v26, v27, v28, v29, v68);
      uint64_t v24 = v9;
      goto LABEL_62;
    }
  }
  for (int i = 0; v19 > (unsigned __int16)i; int i = utf8_GetNextUtf8Offset(v18, (unsigned __int16)i))
  {
    if (!utf8_BelongsToSet(0, v18, (unsigned __int16)i, v19)) {
      break;
    }
  }
  uint64_t v31 = 0;
  if (v25)
  {
    int v32 = 0;
    do
    {
      uint64_t v33 = (unsigned __int8 *)(v24 + v31);
      utf8_ToLower(v18, (unsigned __int16)i, v24 + v31);
      i += utf8_determineUTF8CharLength(v18[(unsigned __int16)i]);
      v32 += utf8_determineUTF8CharLength(*v33);
      uint64_t v31 = (unsigned __int16)v32;
    }
    while (v25 > (unsigned __int16)v32);
  }
  *(unsigned char *)(v24 + v31) = 0;
  uint64_t v34 = *v59;
  __s[0] = 0;
  char __s1 = 32;
  LH_itoa(v14, v68, 0xAu);
  cstdlib_strcat(&__s1, " ");
  if ((ssftmap_Find(v34, v24, __s) & 0x80000000) != 0)
  {
    uint64_t v5 = ssftmap_Insert(v34, v24, (uint64_t)&__s1);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_62;
    }
    goto LABEL_52;
  }
  if (cstdlib_strstr(__s[0], &__s1))
  {
    uint64_t v5 = 0;
    goto LABEL_52;
  }
  size_t v35 = cstdlib_strlen(__s[0]);
  size_t v36 = cstdlib_strlen(&__s1);
  BOOL v37 = (char *)heap_Calloc(*(void **)(a1 + 8), v36 + v35, 1);
  if (!v37)
  {
    uint64_t v5 = 2231377930;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"DCTEG", 4400, 0, v38, v39, v40, v41, v68);
    goto LABEL_62;
  }
  uint64_t v42 = v37;
  cstdlib_strcpy(v37, __s[0]);
  cstdlib_strcat(v42, v68);
  uint64_t v43 = ssftmap_Remove(v34, v24);
  if ((v43 & 0x80000000) == 0) {
    uint64_t v43 = ssftmap_Insert(v34, v24, (uint64_t)v42);
  }
  uint64_t v5 = v43;
  heap_Free(*(void **)(a1 + 8), (uint64_t)v42);
  if ((v5 & 0x80000000) == 0) {
    goto LABEL_52;
  }
  while (1)
  {
LABEL_62:
    if (v24) {
      heap_Free(*(void **)(a1 + 8), v24);
    }
    uint64_t v48 = *(void *)(a3 + 72);
    if (v48)
    {
      Dictionary_ReturnKeys(v48, (uint64_t)v66);
      return v5;
    }
    if (!cstdlib_strstr(*(char **)(a3 + 16), "application/x-vocalizer-userdct-pointer")
      || (uint64_t v49 = *(void *)(a3 + 48)) == 0
      || v5)
    {
      uint64_t v56 = *(void *)(a3 + 80);
      if (v56) {
        CDSObject_ReturnKeys(v56, (uint64_t)v66);
      }
      return v5;
    }
    uint64_t v50 = v66;
    __s[0] = 0;
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 24))(v49 - *(void *)(*(void *)v49 + 48));
    if (!v51) {
      break;
    }
    int v52 = (**(uint64_t (***)(uint64_t, uint64_t, char **))v51)(v51 - *(void *)(*(void *)v51 + 64), 414531107, __s);
    int v53 = LH_ERROR_to_VERROR(v52);
    if ((v53 & 0x80000000) == 0 && __s[0])
    {
      int v54 = (*(uint64_t (**)(char *, char **))(*(void *)__s[0] + 24))(&__s[0][-*(void *)(*(void *)__s[0] + 32)], v50);
      int v53 = LH_ERROR_to_VERROR(v54);
    }
    uint64_t v5 = 0;
    uint64_t v55 = 0;
    if ((v53 & 0x80000000) == 0) {
      return v55;
    }
  }
  return 0;
}

uint64_t dcteg_hlp_FetchURLHashtag(uint64_t a1, uint64_t a2)
{
  unint64_t v19 = 0;
  unsigned int v20 = 0;
  uint64_t v18 = 0;
  long long __b = 0u;
  long long v17 = 0u;
  cstdlib_memset(&__b, 0, 0x28uLL);
  *(void *)&long long __b = ssftmap_ElemCopyString;
  *((void *)&v17 + 1) = ssftmap_ElemCopyString;
  *((void *)&__b + 1) = ssftmap_ElemFreeString;
  uint64_t v18 = ssftmap_ElemFreeString;
  *(void *)&long long v17 = ssftmap_ElemCompareKeysString;
  uint64_t v4 = *(void **)(a1 + 8);
  v14[0] = __b;
  v14[1] = v17;
  unsigned int v15 = ssftmap_ElemFreeString;
  uint64_t v5 = ssftmap_ObjOpen(v4, 0, v14, (uint64_t *)(a2 + 96));
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v7 = v5;
  }
  else
  {
    Dictionary_FetchKeys(*(void *)(a2 + 72), &v20, &v19);
    uint64_t v7 = LH_ERROR_to_VERROR(v6);
    if ((v7 & 0x80000000) == 0 && v19)
    {
      uint64_t v8 = 0;
      int v9 = 0;
      do
      {
        uint64_t v10 = v20[v8];
        if (*v10 == 35 || cstdlib_strchr(v10, 46) && !cstdlib_strchr(v10, 32))
        {
          uint64_t v11 = ssftmap_Insert(*(void *)(a2 + 96), (uint64_t)v10, (uint64_t)"");
          uint64_t v7 = v11;
          if ((v11 & 0x80000000) != 0)
          {
            if ((v11 & 0x1FFF) != 2) {
              break;
            }
            uint64_t v7 = 0;
          }
        }
        uint64_t v8 = (unsigned __int16)++v9;
      }
      while (v19 > (unsigned __int16)v9);
    }
  }
  uint64_t v12 = *(void *)(a2 + 72);
  if (v12) {
    Dictionary_ReturnKeys(v12, (uint64_t)v20);
  }
  return v7;
}

uint64_t dctlist_ObjOpen(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  return 0;
}

uint64_t dctlist_ObjClose(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(a1 + 8))
    dctlist_Remove(a1, *(void *)(i + 8));
  return 0;
}

uint64_t dctlist_Remove(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2231377940;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    if (*(void *)(v5 + 8) == a2)
    {
      uint64_t v8 = *(void *)(v5 + 16);
      *(void *)(a1 + 8) = v8;
      if (!v8) {
        *(void *)(a1 + 16) = 0;
      }
      heap_Free(*(void **)a1, v5);
      return 0;
    }
    else
    {
      while (1)
      {
        uint64_t v6 = v5;
        uint64_t v5 = *(void *)(v5 + 16);
        if (!v5) {
          break;
        }
        if (*(void *)(v5 + 8) == a2)
        {
          uint64_t v7 = *(void *)(v5 + 16);
          heap_Free(*(void **)a1, v5);
          *(void *)(v6 + 16) = v7;
          if (v7) {
            return 0;
          }
          uint64_t result = 0;
          *(void *)(a1 + 16) = v6;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t dctlist_Add(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = heap_Calloc(*(void **)a1, 1, 24);
  if (v4)
  {
    *(_DWORD *)uint64_t v4 = -1;
    *(void *)(v4 + 8) = a2;
    *(void *)(v4 + 16) = 0;
    uint64_t v6 = (uint64_t *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      if (*(_DWORD *)v5 == -1)
      {
        *(void *)(v4 + 16) = v5;
        goto LABEL_10;
      }
      do
      {
        uint64_t v7 = v5;
        uint64_t v5 = *(void *)(v5 + 16);
      }
      while (v5);
      *(void *)(v7 + 16) = v4;
    }
    else
    {
      *(void *)(a1 + 8) = v4;
    }
    uint64_t v6 = (uint64_t *)(a1 + 16);
LABEL_10:
    uint64_t v8 = 0;
    *uint64_t v6 = v4;
    return v8;
  }
  return 2231377930;
}

uint64_t dctlist_Move(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 2231377940;
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v9 = *(int **)(a1 + 8);
    do
    {
      uint64_t v10 = *((void *)v9 + 1);
      unsigned int v11 = *v9;
      if (v10 == a2)
      {
        uint64_t v6 = v8;
        if (v11 == a3) {
          return 0;
        }
      }
      if (a3 != -1 && v11 == a3) {
        return 2231378969;
      }
      if (v11 <= a3 && v10 != a2) {
        uint64_t v7 = v9;
      }
      if (v6 && v7) {
        break;
      }
      uint64_t v8 = v9;
      int v9 = (int *)*((void *)v9 + 2);
    }
    while (v9);
    if (a3 == -1 && v7 && *((void *)v7 + 2) != *(void *)(a1 + 16)) {
      uint64_t v7 = *(int **)(a1 + 16);
    }
    if (v6 == v7)
    {
      if (v6) {
        uint64_t v4 = *((void *)v6 + 2);
      }
      goto LABEL_34;
    }
    if (v6)
    {
      uint64_t v13 = *((void *)v6 + 2);
      uint64_t v14 = *(void *)(v13 + 16);
      *((void *)v6 + 2) = v14;
      uint64_t v15 = v4;
      uint64_t v4 = v13;
      if (v14) {
        goto LABEL_28;
      }
    }
    else
    {
      if (*(void *)(v4 + 8) != a2) {
        return v3;
      }
      uint64_t v15 = *(void *)(v4 + 16);
      *uint64_t v5 = v15;
      if (v15)
      {
LABEL_28:
        if (v7)
        {
          *(void *)(v4 + 16) = *((void *)v7 + 2);
          *((void *)v7 + 2) = v4;
          if (*(void *)(v4 + 16))
          {
LABEL_34:
            uint64_t v3 = 0;
            *(_DWORD *)uint64_t v4 = a3;
            return v3;
          }
          uint64_t v5 = (void *)(a1 + 16);
        }
        else
        {
          *(void *)(v4 + 16) = v15;
        }
        *uint64_t v5 = v4;
        goto LABEL_34;
      }
      uint64_t v6 = 0;
      uint64_t v13 = v4;
    }
    *(void *)(a1 + 16) = v6;
    uint64_t v4 = v13;
    goto LABEL_28;
  }
  return v3;
}

uint64_t dctlist_GetNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    *a2 = *(void *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3) {
      return *(void *)(v3 + 8);
    }
  }
  else
  {
    *a2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3) {
      return *(void *)(v3 + 8);
    }
  }
  return 0;
}

uint64_t OpenEDCTObj(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v17);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v7 = (void *)heap_Calloc(*(void **)(v17 + 8), 1, 128);
  *(void *)a3 = v7;
  if (!v7)
  {
    uint64_t v13 = 2231377930;
    uint64_t v14 = 4400;
    goto LABEL_7;
  }
  *uint64_t v7 = a1;
  v7[1] = a2;
  *(void *)(*(void *)a3 + 16) = heap_Alloc;
  *(void *)(*(void *)a3 + 24) = heap_Calloc;
  *(void *)(*(void *)a3 + 32) = heap_Realloc;
  *(void *)(*(void *)a3 + 40) = heap_Free;
  *(void *)(*(void *)a3 + 88) = dcteg_fread;
  *(void *)(*(void *)a3 + 96) = dcteg_fseek;
  *(void *)(*(void *)a3 + 112) = dcteg_ffinished;
  *(void *)(*(void *)a3 + 104) = dcteg_ferror;
  cstdlib_memset((void *)(*(void *)a3 + 120), 0, 4uLL);
  int v12 = OOCAllocator_Con(*(void *)a3 + 48, (_OWORD *)(*(void *)a3 + 16), *(void *)(v17 + 8));
  uint64_t v13 = LH_ERROR_to_VERROR(v12);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v14 = 4477;
LABEL_7:
    log_OutPublic(*(void *)(v17 + 32), (uint64_t)"DCTEG", v14, 0, v8, v9, v10, v11, v16);
  }
  return v13;
}

size_t dcteg_fread(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(a4 + 68);
  if (a3 * a2 >= (*(_DWORD *)(a4 + 64) - v5)) {
    size_t v6 = (*(_DWORD *)(a4 + 64) - v5);
  }
  else {
    size_t v6 = a3 * a2;
  }
  if (v6)
  {
    cstdlib_memcpy(a1, (const void *)(*(void *)(a4 + 48) + v5), v6);
    *(_DWORD *)(a4 + 68) += v6;
  }
  return v6 / a2;
}

uint64_t dcteg_fseek(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      return 1;
    }
    unsigned int v3 = *(_DWORD *)(a1 + 64);
LABEL_9:
    if (v3 >= -(int)a2) {
      goto LABEL_10;
    }
    return 1;
  }
  if (a3 == 1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 68);
    if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_10:
      LODWORD(a2) = v3 + a2;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (a3 || a2 < 0) {
    return 1;
  }
LABEL_11:
  if (a2 >= *(_DWORD *)(a1 + 64)) {
    return 1;
  }
  uint64_t v4 = 0;
  *(_DWORD *)(a1 + 68) = a2;
  return v4;
}

uint64_t dcteg_ffinished(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      if (*(_DWORD *)(a1 + 44)) {
        heap_Free(*(void **)a1, v2);
      }
      *(void *)(a1 + 48) = 0;
    }
  }
  return 0;
}

uint64_t dcteg_ferror()
{
  return 0;
}

uint64_t CloseEDCTObj(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4);
  if ((inited & 0x80000000) == 0) {
    heap_Free(*(void **)(v4 + 8), a1);
  }
  return inited;
}

uint64_t hlp_TraceTuningData_UDctEntries(uint64_t a1, uint64_t a2)
{
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v24 = 0;
  uint64_t v23 = 0;
  uint64_t v2 = *(void *)(*(void *)(a2 + 72) + 128);
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v23);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  int Info = edct_DctGetInfo(v2, (uint64_t)&v29);
  uint64_t v5 = LH_ERROR_to_VERROR(Info);
  if ((v5 & 0x80000000) == 0 && !v30)
  {
    edct_DctItOpen(*(void *)(v2 + 48), (_DWORD *)v2, (uint64_t *)&v28);
    uint64_t v7 = LH_ERROR_to_VERROR(v6);
    if ((v7 & 0x80000000) == 0)
    {
      while (1)
      {
        int v8 = edct_DctItCurrent((uint64_t)v28, &v27, &v26, (_DWORD *)&v25 + 1, &v25);
        uint64_t v5 = LH_ERROR_to_VERROR(v8);
        if ((v5 & 0x80000000) != 0) {
          goto LABEL_27;
        }
        if (!v27 || v26 == 0) {
          goto LABEL_27;
        }
        if (HIDWORD(v25)) {
          break;
        }
LABEL_21:
        int v20 = edct_DctItIncrement((uint64_t)v28);
        uint64_t v7 = LH_ERROR_to_VERROR(v20);
        if ((v7 & 0x80000000) != 0) {
          goto LABEL_26;
        }
        int HasEnded = edct_DctItHasEnded((uint64_t)v28, &v24);
        uint64_t v5 = LH_ERROR_to_VERROR(HasEnded);
        if ((v5 & 0x80000000) != 0 || v24) {
          goto LABEL_27;
        }
      }
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = v26;
        if (!*(_DWORD *)(v26 + v15 + 56))
        {
          cstdlib_strlen(*(const char **)(v26 + v15 + 48));
          uint64_t v17 = v26;
        }
        int v18 = *(_DWORD *)(v17 + v15);
        if (v18 == 2)
        {
          unint64_t v19 = *(uint64_t ***)(v23 + 32);
        }
        else
        {
          if (v18)
          {
            log_OutTraceTuningData(*(uint64_t ***)(v23 + 32), 102, (uint64_t)"%s%s %s%s %s%s", v9, v10, v11, v12, v13, "USERDCTKEY");
            goto LABEL_20;
          }
          unint64_t v19 = *(uint64_t ***)(v23 + 32);
        }
        log_OutTraceTuningData(v19, 102, (uint64_t)"%s%s %s%.*s %s%s", v9, v10, v11, v12, v13, "USERDCTKEY");
LABEL_20:
        ++v16;
        v15 += 64;
        if (v16 >= HIDWORD(v25)) {
          goto LABEL_21;
        }
      }
    }
LABEL_26:
    uint64_t v5 = v7;
  }
LABEL_27:
  if (v28) {
    edct_DctItClose(v28);
  }
  return v5;
}

uint64_t LoadUDct(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = 0;
  uint64_t v4 = *(const char **)(a2 + 16);
  uint64_t v35 = 0;
  memset(v34, 0, sizeof(v34));
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v36);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_DWORD *)(a2 + 68) = 0;
  if (cstdlib_strcmp(v4, "application/edct-bin-dictionary"))
  {
    if (cstdlib_strcmp(v4, "application/cdct-bin-dictionary"))
    {
      if (!cstdlib_strcmp(v4, "application/x-vocalizer-userdct-pointer"))
      {
        *(void *)(a2 + 112) = *(void *)(a2 + 48);
        return inited;
      }
      log_OutPublic(*(void *)(v36 + 32), (uint64_t)"DCTEG", 4403, (uint64_t)"%s%s", v6, v7, v8, v9, "contentType");
      uint64_t inited = 2231378966;
      goto LABEL_20;
    }
    int v22 = PNEW_CDSObject_Con(a1 + 48, a1 + 48, (const void *)(a1 + 88), a2, 0, (void *)(a2 + 80));
    uint64_t v23 = LH_ERROR_to_VERROR(v22);
    if ((v23 & 0x80000000) != 0)
    {
      uint64_t inited = v23;
      log_OutPublic(*(void *)(v36 + 32), (uint64_t)"DCTEG", 4481, (uint64_t)"%s%s%s%x", v24, v25, v26, v27, "name");
      *(void *)(a2 + 112) = 0;
LABEL_20:
      if (*(void *)(a2 + 72) || *(void *)(a2 + 80)) {
        UnloadUDct(a1, (void *)a2);
      }
      return inited;
    }
    int Interface = CDSObject_QueryInterface(*(void *)(a2 + 80), 414531721, (uint64_t *)(a2 + 112));
    uint64_t inited = LH_ERROR_to_VERROR(Interface);
    if ((inited & 0x80000000) == 0) {
      return inited;
    }
    log_OutPublic(*(void *)(v36 + 32), (uint64_t)"DCTEG", 4482, (uint64_t)"%s%s%s%x", v29, v30, v31, v32, "name");
LABEL_19:
    *(void *)(a2 + 112) = 0;
    goto LABEL_20;
  }
  int v10 = PNEW_Dictionary_Con(a1 + 48, a1 + 48, (char **)v34, (const void *)(a1 + 88), a2, (_DWORD *)(a1 + 120), 1, (uint64_t *)(a2 + 72));
  uint64_t v11 = LH_ERROR_to_VERROR(v10);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t inited = v11;
    log_OutPublic(*(void *)(v36 + 32), (uint64_t)"DCTEG", 4478, (uint64_t)"%s%s%s%x", v12, v13, v14, v15, "name");
    goto LABEL_19;
  }
  if (*(void *)(a2 + 48) && !*(_DWORD *)(a2 + 44))
  {
    uint64_t inited = 2231377945;
    log_OutPublic(*(void *)(v36 + 32), (uint64_t)"DCTEG", 4479, (uint64_t)"%s%s", v12, v13, v14, v15, "name");
    goto LABEL_20;
  }
  int v16 = Dictionary_QueryInterface(*(void *)(a2 + 72), 414531721, (uint64_t *)(a2 + 112));
  uint64_t inited = LH_ERROR_to_VERROR(v16);
  uint64_t v21 = *(void *)(v36 + 32);
  if ((inited & 0x80000000) != 0)
  {
    log_OutPublic(v21, (uint64_t)"DCTEG", 4480, (uint64_t)"%s%s%s%x", v17, v18, v19, v20, "name");
    goto LABEL_19;
  }
  if (log_HasTraceTuningDataSubscriber(v21)) {
    hlp_TraceTuningData_UDctEntries(a1, a2);
  }
  return inited;
}

uint64_t UnloadUDct(uint64_t a1, void *a2)
{
  uint64_t v12 = 0;
  unsigned int v3 = (const char *)a2[2];
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12);
  if ((inited & 0x80000000) == 0)
  {
    if (cstdlib_strcmp(v3, "application/edct-bin-dictionary"))
    {
      if (cstdlib_strcmp(v3, "application/cdct-bin-dictionary"))
      {
        if (cstdlib_strcmp(v3, "application/x-vocalizer-userdct-pointer"))
        {
          log_OutPublic(*(void *)(v12 + 32), (uint64_t)"DCTEG", 4404, (uint64_t)"%s%s", v5, v6, v7, v8, "contentType");
          return 2231378966;
        }
      }
      else
      {
        int v10 = (void *)a2[10];
        if (v10)
        {
          CDSObject_Des(v10);
          heap_Free(*(void **)(v12 + 8), a2[10]);
          a2[10] = 0;
        }
      }
    }
    else
    {
      uint64_t v9 = (uint64_t *)a2[9];
      if (v9)
      {
        Dictionary_Des(v9);
        heap_Free(*(void **)(v12 + 8), a2[9]);
        a2[9] = 0;
      }
    }
  }
  return inited;
}

uint64_t RetrieveUDctEntry(uint64_t a1, uint64_t a2, char *a3, char *__s, unsigned char *a5, char *a6, _WORD *a7, char *a8, unsigned char *a9, _DWORD *a10)
{
  uint64_t v50 = a7;
  uint64_t v51 = a6;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v49 = 0;
  unsigned int v48 = 0;
  uint64_t v11 = *(void *)(a2 + 16);
  int v47 = 0;
  if (!__s) {
    return 2231377940;
  }
  uint64_t v18 = *(char **)(a2 + 24);
  if (v18)
  {
    if (!strhelper_csv_HasElem(v18, __s)) {
      return 2231377940;
    }
  }
  *a8 = 0;
  if (a9) {
    *a9 = 0;
  }
  int v46 = 0;
  int UInt = paramc_ParamGetUInt(*(void *)(v10 + 40), (uint64_t)"numberoutputtranscriptions", &v48);
  int v20 = (unsigned __int16)v48;
  if (UInt < 0) {
    int v20 = 1;
  }
  unsigned int v44 = v20;
  if ((int)paramc_ParamGetUInt(*(void *)(v10 + 40), (uint64_t)"numberoutputorthsubstitutes", &v48) < 0) {
    int v21 = 1;
  }
  else {
    int v21 = (unsigned __int16)v48;
  }
  uint64_t v22 = 2231377927;
  if (a5 && *(void *)(a1 + 48) && v11 && a7 && *a5)
  {
    unsigned int v23 = v21;
    int v24 = (*(uint64_t (**)(void, void **))(**(void **)(a2 + 112) + 16))(*(void *)(a2 + 112) - *(void *)(**(void **)(a2 + 112) + 48), &v46);
    if ((LH_ERROR_to_VERROR(v24) & 0x80000000) == 0)
    {
      if (*v46)
      {
        for (uint64_t i = 0; i != 3; ++i)
          __s2[i] = cstdlib_tolower(*(char *)(*v46 + i));
        char __s2[3] = 0;
        if (!a3 || cstdlib_strstr(a3, __s2))
        {
          int v26 = (***(uint64_t (****)(void, unsigned char *, _DWORD **, uint64_t *))(a2 + 112))(*(void *)(a2 + 112) - *(void *)(**(void **)(a2 + 112) + 48), a5, &v47, &v49);
          int v27 = LH_ERROR_to_VERROR(v26);
          uint64_t v28 = v47;
          if (v27 < 0 || (unsigned int v29 = v49) == 0 || !v47)
          {
            if (v27 < 0) {
              uint64_t v22 = v27;
            }
            else {
              uint64_t v22 = 2231377940;
            }
LABEL_47:
            if (v28)
            {
              int v38 = (*(uint64_t (**)(void))(**(void **)(a2 + 112) + 8))(*(void *)(a2 + 112) - *(void *)(**(void **)(a2 + 112) + 48));
              uint64_t v39 = LH_ERROR_to_VERROR(v38);
              if ((v39 & 0x80000000) != 0)
              {
                uint64_t v43 = v39;
                log_OutText(*(void *)(v10 + 32), (uint64_t)"DCTEG", 3, 0, (uint64_t)"MSG_ITransLookUp_ReturnTranscriptions failed: %x", v40, v41, v42, v39);
                return v43;
              }
            }
            return v22;
          }
          *a10 = *v47;
          cstdlib_strcpy(a8, __s2);
          uint64_t v22 = 2231377940;
          if (a9)
          {
            uint64_t v34 = (const char *)v46[1];
            if (v34)
            {
              if (cstdlib_strlen(v34) == 3)
              {
                for (uint64_t j = 0; j != 3; ++j)
                  a9[j] = cstdlib_tolower(*(char *)(v46[1] + j));
                a9[3] = 0;
              }
            }
          }
          if (*v47 == 4)
          {
            if (v23 >= v29) {
              unsigned int v36 = v29;
            }
            else {
              unsigned int v36 = v23;
            }
          }
          else
          {
            if (*v47 != 1)
            {
              log_OutPublic(*(void *)(v10 + 32), (uint64_t)"DCTEG", 4476, (uint64_t)"%s%d", v30, v31, v32, v33, "contentType");
              goto LABEL_46;
            }
            if (v44 >= v29) {
              unsigned int v36 = v29;
            }
            else {
              unsigned int v36 = v44;
            }
          }
          uint64_t v22 = GetnTranscriptions(&v47, &v51, &v50, v36);
LABEL_46:
          uint64_t v28 = v47;
          goto LABEL_47;
        }
      }
    }
    return 2231377940;
  }
  return v22;
}

uint64_t GetnTranscriptions(void *a1, char **a2, _WORD **a3, unsigned int a4)
{
  **a2 = 0;
  if (a4)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = a4;
    while (1)
    {
      uint64_t v10 = *a1 + 24 * v7;
      uint64_t v12 = *(const char **)(v10 + 8);
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        uint64_t v13 = 0;
        while (v12[v13])
        {
          if (v11 == ++v13) {
            goto LABEL_9;
          }
        }
        LODWORD(v11) = v13;
      }
LABEL_9:
      unsigned int v14 = v8 + v11 + 1;
      if (v14 > (unsigned __int16)**a3) {
        return 2231377929;
      }
      if (v7)
      {
        cstdlib_strcat(*a2, "\x12");
        unsigned int v8 = v14;
      }
      else
      {
        v8 += v11;
      }
      cstdlib_strcat(*a2, v12);
      if (++v7 == v9) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    unsigned int v8 = 0;
LABEL_16:
    uint64_t result = 0;
    (*a2)[v8] = 0;
    **a3 = v8;
  }
  return result;
}

uint64_t dctegdict_FetchInfo(uint64_t a1, char ***a2)
{
  if (cstdlib_strstr(*(char **)(a1 + 16), "application/edct-bin-dictionary"))
  {
    int Info = Dictionary_FetchInfo(*(void *)(a1 + 72), a2);
    return LH_ERROR_to_VERROR(Info);
  }
  else
  {
    uint64_t v6 = 2231377920;
    if (cstdlib_strstr(*(char **)(a1 + 16), "application/x-vocalizer-userdct-pointer"))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v12 = 0;
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7 - *(void *)(*(void *)v7 + 48));
      if (v8)
      {
        int v9 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t *))v8)(v8 - *(void *)(*(void *)v8 + 64), 414531107, &v12);
        if (v9) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v12 == 0;
        }
        if (!v10) {
          int v9 = (**(uint64_t (***)(uint64_t, char ***))v12)(v12 - *(void *)(*(void *)v12 + 32), a2);
        }
        unsigned int v11 = -2063589366;
        if (v9 != 1) {
          unsigned int v11 = -2063589376;
        }
        if (v9) {
          return v11;
        }
        else {
          return 0;
        }
      }
    }
    return v6;
  }
}

char *dctegdict_ReturnInfo(uint64_t a1, uint64_t a2)
{
  if (cstdlib_strstr(*(char **)(a1 + 16), "application/edct-bin-dictionary")) {
    Dictionary_ReturnInfo(*(void *)(a1 + 72), a2);
  }
  uint64_t result = cstdlib_strstr(*(char **)(a1 + 16), "application/x-vocalizer-userdct-pointer");
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v7 = 0;
    uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5 - *(void *)(*(void *)v5 + 48));
    if (result)
    {
      uint64_t result = (char *)(**(uint64_t (***)(char *, uint64_t, uint64_t *))result)(&result[-*(void *)(*(void *)result + 64)], 414531107, &v7);
      if (result) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v7 == 0;
      }
      if (!v6) {
        return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 8))(v7 - *(void *)(*(void *)v7 + 32), a2);
      }
    }
  }
  return result;
}

uint64_t dctegdict_FetchKeys(uint64_t a1, char ***a2, void *a3)
{
  if (cstdlib_strstr(*(char **)(a1 + 16), "application/edct-bin-dictionary"))
  {
    Dictionary_FetchKeys(*(void *)(a1 + 72), a2, a3);
    return LH_ERROR_to_VERROR(v6);
  }
  else
  {
    uint64_t v8 = 2231377920;
    if (cstdlib_strstr(*(char **)(a1 + 16), "application/x-vocalizer-userdct-pointer"))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v14 = 0;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9 - *(void *)(*(void *)v9 + 48));
      if (v10)
      {
        int v11 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t *))v10)(v10 - *(void *)(*(void *)v10 + 64), 414531107, &v14);
        if (v11) {
          BOOL v12 = 1;
        }
        else {
          BOOL v12 = v14 == 0;
        }
        if (!v12) {
          int v11 = (*(uint64_t (**)(uint64_t, char ***, void *))(*(void *)v14 + 16))(v14 - *(void *)(*(void *)v14 + 32), a2, a3);
        }
        unsigned int v13 = -2063589366;
        if (v11 != 1) {
          unsigned int v13 = -2063589376;
        }
        if (v11) {
          return v13;
        }
        else {
          return 0;
        }
      }
    }
    return v8;
  }
}

char *dctegdict_ReturnKeys(uint64_t a1, uint64_t a2)
{
  if (cstdlib_strstr(*(char **)(a1 + 16), "application/edct-bin-dictionary")) {
    Dictionary_ReturnKeys(*(void *)(a1 + 72), a2);
  }
  uint64_t result = cstdlib_strstr(*(char **)(a1 + 16), "application/x-vocalizer-userdct-pointer");
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v7 = 0;
    uint64_t result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5 - *(void *)(*(void *)v5 + 48));
    if (result)
    {
      uint64_t result = (char *)(**(uint64_t (***)(char *, uint64_t, uint64_t *))result)(&result[-*(void *)(*(void *)result + 64)], 414531107, &v7);
      if (result) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v7 == 0;
      }
      if (!v6) {
        return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7 - *(void *)(*(void *)v7 + 32), a2);
      }
    }
  }
  return result;
}

uint64_t LD_createChild(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  uint64_t v35 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (*(_DWORD *)(a1 + 48) > a4 && (uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8 * a4)) != 0)
  {
    if (a3 > 1)
    {
      if (*(unsigned __int8 *)(v14 + 2) == LD_ChildParentD[a3])
      {
        uint64_t v15 = LD_createRec((uint64_t *)a1, a3, &v35, v9, v10, v11, v12, v13);
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v21 = 0;
          uint64_t v22 = v35;
          *(void *)(v35 + 8) = v14;
          *(void *)(v22 + 24) = 0;
          *(void *)(v22 + 32) = 0;
          char v23 = 1;
          do
          {
            char v24 = v23;
            uint64_t v25 = v14 + 8 * v21;
            uint64_t v28 = *(void *)(v25 + 32);
            uint64_t v26 = v25 + 32;
            uint64_t v27 = v28;
            if (v28 && *(unsigned __int8 *)(v27 + 2) == a3)
            {
              *(void *)(v22 + 16) = v27;
              *(void *)(*(void *)v26 + 24) = v22;
              *(void *)uint64_t v26 = v22;
              goto LABEL_22;
            }
            char v23 = 0;
            uint64_t v21 = 1;
          }
          while ((v24 & 1) != 0);
          uint64_t v29 = 0;
          for (char i = 1; ; char i = 0)
          {
            char v31 = i;
            uint64_t v32 = v14 + 8 * v29;
            uint64_t v34 = *(void *)(v32 + 32);
            uint64_t v33 = (uint64_t *)(v32 + 32);
            if (!v34) {
              break;
            }
            uint64_t v29 = 1;
            if ((v31 & 1) == 0)
            {
              log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20030, (uint64_t)"%s%u%s%u", v17, v18, v19, v20, "childType");
              return 2300591643;
            }
          }
          *uint64_t v33 = v22;
          *(void *)(v22 + 16) = 0;
LABEL_22:
          *a5 = *(_WORD *)v22;
          *(_DWORD *)(a1 + 72) = 1;
        }
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20006, (uint64_t)"%s%u%s%u", v10, v11, v12, v13, "childType");
        return 2300591619;
      }
    }
    else
    {
      uint64_t v15 = 2300591618;
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20005, (uint64_t)"%s%u", v10, v11, v12, v13, "childType");
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v10, v11, v12, v13, "record");
    return 2300591633;
  }
  return v15;
}

uint64_t LD_createRec(uint64_t *a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 - 7 <= 0xFFFFFFF9)
  {
    uint64_t v10 = 2300591625;
    uint64_t v11 = *(void *)(*a1 + 32);
    char v31 = "method";
    uint64_t v12 = "%s%s%s%u";
    uint64_t v13 = 20012;
LABEL_3:
    log_OutPublic(v11, (uint64_t)"LINGDB", v13, (uint64_t)v12, a5, a6, a7, a8, v31);
    return v10;
  }
  unsigned int v14 = *((_DWORD *)a1 + 12);
  if (v14 - 1 >= *((_DWORD *)a1 + 15))
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 20019, 0, a5, a6, a7, a8, v31);
    return 2300591632;
  }
  unsigned int v16 = *((_DWORD *)a1 + 13);
  if (v14 >= v16)
  {
    unsigned int v17 = *((_DWORD *)a1 + 14) + v16;
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"LINGDB LD_reallocSentRecList : Begin (from %u to %u)", a6, a7, a8, *((unsigned int *)a1 + 13));
    uint64_t v18 = heap_Realloc(*(uint64_t **)(*a1 + 8), a1[8], 8 * v17);
    if (!v18)
    {
      uint64_t v10 = 2300583946;
      uint64_t v11 = *(void *)(*a1 + 32);
      uint64_t v13 = 20004;
      goto LABEL_22;
    }
    a1[8] = v18;
    *((_DWORD *)a1 + 13) = v17;
    cstdlib_memset((void *)(v18 + 8 * *((unsigned int *)a1 + 12)), 0, 8 * (v17 - *((_DWORD *)a1 + 12)));
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"LINGDB LD_reallocSentRecList : End (%x)", v19, v20, v21, 0);
  }
  uint64_t v22 = LD_HeapAlloc((uint64_t)(a1 + 1), LD_createRec_recordSizeLookup[a2]);
  *a3 = v22;
  if (!v22)
  {
    uint64_t v10 = 2300583946;
    uint64_t v11 = *(void *)(*a1 + 32);
    uint64_t v13 = 20000;
LABEL_22:
    uint64_t v12 = 0;
    goto LABEL_3;
  }
  uint64_t v23 = *((unsigned int *)a1 + 12);
  *(void *)(a1[8] + 8 * v23) = v22;
  uint64_t v24 = *a3;
  *(_WORD *)uint64_t v24 = v23;
  *(unsigned char *)(v24 + 2) = a2;
  *((_DWORD *)a1 + 12) = v23 + 1;
  if ((int)v23 + 1 > (unsigned __int16)v23
    && (uint64_t v25 = *(void *)(a1[8] + 8 * (unsigned __int16)v23)) != 0)
  {
    int v26 = *(unsigned __int8 *)(v25 + 2);
    uint64_t v27 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v25 + 2)];
    unsigned int v28 = v27[4];
    if (v27[4])
    {
      unsigned __int8 v29 = 0;
      do
      {
        if (!LD_FIELDOFFSETSD[452 * v26 + 20 + 20 * v29]) {
          *(void *)(v25 + *(void *)&LD_FIELDOFFSETSD[452 * v26 + 12 + 20 * v29] - *(void *)v27) = 0;
        }
        ++v29;
      }
      while (v28 > v29);
    }
    uint64_t v10 = 0;
    *((_DWORD *)a1 + 18) = 1;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", a5, a6, a7, a8, "record");
    return 2300591633;
  }
  return v10;
}

uint64_t LD_createNext(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  uint64_t v20 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (*(_DWORD *)(a1 + 48) > a3 && (uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) != 0)
  {
    unsigned int v13 = *(unsigned __int8 *)(v12 + 2);
    if (v13 == 1)
    {
      uint64_t v14 = 2300591620;
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20007, 0, v8, v9, v10, v11, v19);
    }
    else
    {
      uint64_t v16 = LD_createRec((uint64_t *)a1, v13, &v20, v7, v8, v9, v10, v11);
      if ((v16 & 0x80000000) != 0)
      {
        return v16;
      }
      else
      {
        uint64_t v17 = v20;
        *(void *)(v20 + 24) = v12;
        *(_OWORD *)(v17 + 8) = *(_OWORD *)(v12 + 8);
        *(void *)(v12 + 16) = v17;
        *(void *)(v17 + 32) = 0;
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18) {
          *(void *)(v18 + 24) = v17;
        }
        uint64_t v14 = 0;
        *a4 = *(_WORD *)v17;
        *(_DWORD *)(a1 + 72) = 1;
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v8, v9, v10, v11, "record");
    return 2300591633;
  }
  return v14;
}

uint64_t LD_findChild(uint64_t a1, int a2, int a3, unsigned int a4, _WORD *a5)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (a3 == 1)
  {
    __int16 v13 = *(void *)(a1 + 64) != 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 48) <= a4 || (uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8 * a4)) == 0)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v9, v10, v11, v12, "record");
      return 2300591633;
    }
    if (*(unsigned __int8 *)(v15 + 2) != LD_ChildParentD[a3])
    {
      uint64_t v14 = 2300591623;
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20010, (uint64_t)"%s%s%s%u%s%u%s%u", v9, v10, v11, v12, "method");
      return v14;
    }
    uint64_t v16 = 0;
    __int16 v13 = 0;
    char v17 = 1;
    do
    {
      char v18 = v17;
      uint64_t v19 = *(void *)(v15 + 8 * v16 + 32);
      if (v19) {
        BOOL v20 = v13 == 0;
      }
      else {
        BOOL v20 = 0;
      }
      if (!v20) {
        break;
      }
      __int16 v13 = *(unsigned __int8 *)(v19 + 2) == a3 ? *(_WORD *)v19 : 0;
      char v17 = 0;
      uint64_t v16 = 1;
    }
    while ((v18 & 1) != 0);
    if (!v13)
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20011, (uint64_t)"%s%u%s%u%s%u", v9, v10, v11, v12, "childKey");
      return 2300591624;
    }
  }
  uint64_t v14 = 0;
  *a5 = v13;
  return v14;
}

uint64_t LD_findNextCommonParent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
  {
    unsigned __int16 v14 = 8200;
    return v14 | 0x89200000;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v7, v8, v9, v10, "record");
    unsigned __int16 v14 = 15889;
    return v14 | 0x89200000;
  }
  uint64_t v12 = *(_WORD **)(v11 + 16);
  if (v12) {
    LOWORD(v12) = *v12;
  }
  uint64_t result = 0;
  *a4 = (_WORD)v12;
  return result;
}

uint64_t LD_nextInSent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  __int16 v16 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  uint64_t NextCommonParent = LD_findNextCommonParent(a1, a2, a3, &v16);
  if ((NextCommonParent & 0x80000000) != 0) {
    return NextCommonParent;
  }
  if (v16) {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v9, v10, v11, v12, "record");
    return 2300591633;
  }
  if ((*(unsigned char *)(v14 + 2) & 0xFE) == 2)
  {
LABEL_4:
    uint64_t v13 = 0;
    *a4 = v16;
  }
  else
  {
    uint64_t v13 = 2300591625;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20012, (uint64_t)"%s%s%s%u%s%u", v9, v10, v11, v12, "method");
  }
  return v13;
}

uint64_t LD_findDirect(void *a1, int a2, int a3, int a4, _WORD *a5)
{
  uint64_t v10 = 2300583944;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) == 0
    && (safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) == 0)
  {
    unsigned int v15 = a1[8] != 0;
    __int16 v25 = a1[8] != 0;
    if (a3 != 1)
    {
      if (a3 != 2)
      {
        uint64_t v10 = 2300591625;
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 20013, (uint64_t)"%s%u", v11, v12, v13, v14, "recordType");
        return v10;
      }
      uint64_t Child = LD_findChild((uint64_t)a1, a2, 2, v15, &v25);
      if ((Child & 0x80000000) != 0) {
        return Child;
      }
      LOWORD(v15) = v25;
      if (!v25)
      {
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 20013, (uint64_t)"%s%u", v17, v18, v19, v20, "recordType");
        return 2300591626;
      }
      __int16 v24 = v25;
      unsigned int v21 = a4 - 1;
      if (v21)
      {
        unsigned int v22 = 1;
        while (1)
        {
          uint64_t Child = LD_findNextCommonParent((uint64_t)a1, a2, (unsigned __int16)v15, &v24);
          if ((Child & 0x80000000) != 0) {
            return Child;
          }
          LOWORD(v15) = v24;
          if (v22 < v21)
          {
            ++v22;
            if (v24) {
              continue;
            }
          }
          break;
        }
      }
    }
    uint64_t v10 = 0;
    *a5 = v15;
  }
  return v10;
}

uint64_t LD_writeField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, char *a6, _WORD *a7)
{
  uint64_t v13 = 2300583946;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v14, v15, v16, v17, "record");
    return 2300591633;
  }
  if (!*(unsigned char *)(v18 + 2) || LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v18 + 2) + 4] <= a4)
  {
    uint64_t v13 = 2300591629;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20016, (uint64_t)"%s%s%s%u%s%u%s%u", v14, v15, v16, v17, "method");
    return v13;
  }
  uint64_t v19 = (uint64_t *)&LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v18 + 2)];
  uint64_t v20 = &v19[5 * a4];
  unsigned int v22 = (char *)v20[3];
  uint64_t v21 = v20[4];
  uint64_t v23 = &v22[v18 - *v19];
  uint64_t v37 = *v19;
  *(unsigned char *)(v18 + v19[2] - *v19 + a4) = 1;
  int v24 = *((unsigned __int16 *)v20 + 21);
  if (*((_WORD *)v20 + 20))
  {
    if (*((unsigned __int16 *)v20 + 20) < a5) {
      a5 = *((unsigned __int16 *)v20 + 20);
    }
    uint64_t v25 = v21;
    cstdlib_memcpy(v23, a6, *((unsigned __int16 *)v20 + 21) * (unint64_t)a5);
    uint64_t v26 = v25;
    if (!v25) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v36 = v21;
    size_t v28 = v24 * a5;
    unsigned __int8 v29 = (void *)LD_HeapAlloc(a1 + 8, v24 * a5);
    *(void *)uint64_t v23 = v29;
    if (!v29) {
      return v13;
    }
    cstdlib_memcpy(v29, a6, v28);
    if (v22 == (char *)&unk_2206E3448 && a5 != 0)
    {
      uint64_t v31 = 0;
      int v38 = v23;
      do
      {
        if (marker_hasNonConstCharPtrArg(*(_DWORD *)&a6[v31]))
        {
          uint64_t v32 = *(const char **)&a6[v31 + 24];
          if (v32) {
            int v33 = cstdlib_strlen(v32);
          }
          else {
            int v33 = 0;
          }
          uint64_t v34 = (char *)LD_HeapAlloc(a1 + 8, v33 + 1);
          if (!v34) {
            return v13;
          }
          uint64_t v35 = v34;
          if (v33) {
            cstdlib_strcpy(v34, *(const char **)&a6[v31 + 24]);
          }
          else {
            *uint64_t v34 = 0;
          }
          *(void *)(*(void *)v38 + v31 + 24) = v35;
        }
        v31 += 32;
      }
      while (32 * a5 != v31);
    }
    uint64_t v26 = v36;
    if (!v36) {
      goto LABEL_11;
    }
  }
  *(_WORD *)(v18 + v26 - v37) = a5;
LABEL_11:
  uint64_t v13 = 0;
  *a7 = a5;
  *(_DWORD *)(a1 + 72) = 1;
  return v13;
}

uint64_t LD_readField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6, _WORD *a7)
{
  *a7 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (*(_DWORD *)(a1 + 48) > a3 && (uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) != 0)
  {
    int v18 = *(unsigned __int8 *)(v17 + 2);
    if (*(unsigned char *)(v17 + 2) && LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v17 + 2) + 4] > a4)
    {
      uint64_t v19 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v17 + 2)];
      uint64_t v20 = *(void *)v19;
      if (*(unsigned char *)(v17 + *((void *)v19 + 2) - *(void *)v19 + a4) == 1)
      {
        uint64_t v21 = (void *)(v17 + *(void *)&v19[20 * a4 + 12] - v20);
        unsigned int v22 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v17 + 2) + 20 * a4];
        int v25 = v22[20];
        uint64_t v23 = v22 + 20;
        int v24 = v25;
        uint64_t v26 = *((void *)v23 - 1);
        uint64_t v27 = (unsigned __int16 *)(v17 + v26 - v20);
        if (!v26) {
          uint64_t v27 = v23;
        }
        unsigned int v28 = *v27;
        if (v28 < a5) {
          a5 = v28;
        }
        if (v24 || (uint64_t v21 = (void *)*v21) != 0)
        {
          cstdlib_memcpy(a6, v21, LD_FIELDOFFSETSD[452 * v18 + 21 + 20 * a4] * (unint64_t)a5);
          uint64_t v29 = 0;
          *a7 = a5;
        }
        else
        {
          uint64_t v29 = 2300591633;
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%s%s%u%s%u%s%u", v13, v14, v15, v16, "method");
        }
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20017, (uint64_t)"%s%u%s%u%s%u", v13, v14, v15, v16, "recordType");
        return 2300591630;
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20016, (uint64_t)"%s%s%s%u%s%u%s%u", v13, v14, v15, v16, "method");
      return 2300591629;
    }
  }
  else
  {
    uint64_t v29 = 2300591633;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v13, v14, v15, v16, "record");
  }
  return v29;
}

uint64_t LD_readDirectField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, void *a5, unsigned __int16 *a6)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (*(_DWORD *)(a1 + 48) > a3 && (uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) != 0)
  {
    if (*(unsigned char *)(v15 + 2) && LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v15 + 2) + 4] > a4)
    {
      uint64_t v16 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v15 + 2)];
      uint64_t v17 = *(void *)v16;
      if (*(unsigned char *)(v15 + *((void *)v16 + 2) - *(void *)v16 + a4) == 1)
      {
        int v18 = (void *)(v15 + *(void *)&v16[20 * a4 + 12] - v17);
        uint64_t v19 = &LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v15 + 2) + 20 * a4];
        int v22 = v19[20];
        uint64_t v20 = v19 + 20;
        int v21 = v22;
        uint64_t v23 = *((void *)v20 - 1);
        int v24 = (unsigned __int16 *)(v15 + v23 - v17);
        if (!v23) {
          int v24 = v20;
        }
        unsigned __int16 v25 = *v24;
        if (v21 || (int v18 = (void *)*v18) != 0)
        {
          uint64_t v26 = 0;
          *a5 = v18;
          *a6 = v25;
        }
        else
        {
          uint64_t v26 = 2300591633;
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u%s%u%s%u", v11, v12, v13, v14, "recordType");
        }
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20017, (uint64_t)"%s%u%s%u%s%u", v11, v12, v13, v14, "recordType");
        return 2300591630;
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20016, (uint64_t)"%s%s%s%u%s%u%s%u", v11, v12, v13, v14, "method");
      return 2300591629;
    }
  }
  else
  {
    uint64_t v26 = 2300591633;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v11, v12, v13, v14, "record");
  }
  return v26;
}

uint64_t LD_enquireField(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  uint64_t v13 = 2300591633;
  if (*(_DWORD *)(a1 + 48) > a3)
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8 * a3);
    if (v14)
    {
      if (*(unsigned char *)(v14 + 2) && LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v14 + 2) + 4] > a4)
      {
        uint64_t v13 = 0;
        *a5 = *(unsigned __int8 *)(v14
                                 + *(void *)&LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v14 + 2) + 8]
                                 - *(void *)&LD_FIELDOFFSETSD[452 * *(unsigned __int8 *)(v14 + 2)]
                                 + a4);
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20016, (uint64_t)"%s%s%s%u%s%u%s%u", v9, v10, v11, v12, "method");
        return 2300591629;
      }
    }
  }
  return v13;
}

uint64_t LD_enquireChild(uint64_t a1, int a2, int a3, unsigned int a4, _WORD *a5)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (a3 == 1)
  {
    LOWORD(v13) = 1;
LABEL_4:
    uint64_t v14 = 0;
    *a5 = v13;
    return v14;
  }
  uint64_t v14 = 2300591633;
  if (*(_DWORD *)(a1 + 48) > a4)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8 * a4);
    if (v15)
    {
      if (*(unsigned __int8 *)(v15 + 2) != LD_ChildParentD[a3])
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20010, (uint64_t)"%s%s%s%u%s%u%s%u", v9, v10, v11, v12, "method");
        return 2300591623;
      }
      uint64_t v16 = 0;
      int v13 = 0;
      char v17 = 1;
      do
      {
        int v18 = *(unsigned __int16 **)(v15 + 8 * v16 + 32);
        if (v18) {
          BOOL v19 = v13 == 0;
        }
        else {
          BOOL v19 = 0;
        }
        if (!v19) {
          break;
        }
        char v20 = v17;
        int v13 = *((unsigned __int8 *)v18 + 2) == a3 ? *v18 : 0;
        char v17 = 0;
        uint64_t v16 = 1;
      }
      while ((v20 & 1) != 0);
      goto LABEL_4;
    }
  }
  return v14;
}

uint64_t LD_getDBChangedStatus(uint64_t a1, int a2, _DWORD *a3)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) == 0) {
    *a3 = *(_DWORD *)(a1 + 72);
  }
  return 0;
}

uint64_t LD_resetDBChangedStatus(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 72) = 0;
  }
  return 0;
}

uint64_t LD_getPronMethod()
{
  return 0;
}

uint64_t LD_getWordClass()
{
  return 2300583937;
}

uint64_t LD_getRecordType(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  *a4 = LD_RECORDTYPE_LOOKUP[2 * a3 + 1];
  return 0;
}

uint64_t LD_getTokenType(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  *a4 = LD_TOKENTYPE_LOOKUP[2 * a3 + 1];
  return 0;
}

uint64_t lingdb_RemoveAllSubstrOcc(char *a1, unsigned char *a2)
{
  char v2 = *a1;
  if (*a1)
  {
    int v3 = 0;
    int v4 = 0;
    do
    {
      int v5 = *a2;
      if (*a2)
      {
        unsigned int v6 = 0;
        while (a1[v4 + v6] == v5)
        {
          int v5 = a2[++v6];
          if (!a2[v6]) {
            goto LABEL_10;
          }
        }
        a1[v3++] = v2;
        unsigned int v6 = 1;
      }
      else
      {
        unsigned int v6 = 0;
      }
LABEL_10:
      v4 += v6;
      char v2 = a1[v4];
    }
    while (v2);
  }
  else
  {
    int v3 = 0;
  }
  a1[v3] = 0;
  return 0;
}

uint64_t LD_checkBEConsistency(void *a1, int a2, char a3, char a4, char *a5, char *__dst)
{
  unsigned __int16 v58 = 0;
  uint64_t v56 = 0;
  unsigned __int16 __s = 0;
  char v55 = 0;
  unsigned __int16 v53 = 0;
  if (a5 && __dst)
  {
    *(_WORD *)a5 = 0;
    cstdlib_strcpy(__dst, "");
  }
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  unsigned __int16 v59 = 0;
  int v51 = 0;
  unsigned int v12 = a1[8] != 0;
  uint64_t v13 = LD_enquireChild((uint64_t)a1, a2, 2, v12, &v59);
  if ((v13 & 0x80000000) == 0)
  {
    unsigned int v48 = v12;
    char v50 = a4;
    unsigned __int16 v14 = v59;
    if (v59)
    {
      unsigned __int16 v47 = 0;
      __int16 v52 = 0;
      int v49 = 0;
      while (1)
      {
        uint64_t Field = LD_readField((uint64_t)a1, a2, v14, 0, 1u, &v51, &v54);
        if ((Field & 0x80000000) != 0) {
          return Field;
        }
        if ((v51 - 9) >= 6)
        {
          if (v51 == 15)
          {
            unsigned __int16 v39 = v58;
            if ((a3 & 0x10) != 0)
            {
              uint64_t Field = LD_checkPHR_TNTAG((uint64_t)a1, a2, v50, v58, v14, a5, __dst);
              if ((Field & 0x80000000) != 0) {
                return Field;
              }
            }
            unsigned __int16 v47 = v39;
            int v49 = 0;
            unsigned __int16 v58 = v14;
            goto LABEL_93;
          }
          if (v51 != 4) {
            goto LABEL_93;
          }
        }
        unsigned __int16 v54 = 0;
        uint64_t Field = LD_enquireField((uint64_t)a1, a2, v14, 3u, &v52);
        if ((Field & 0x80000000) != 0) {
          return Field;
        }
        if (!v52) {
          goto LABEL_14;
        }
        uint64_t Field = LD_readDirectField((uint64_t)a1, a2, v14, 3u, &__s, &v54);
        if ((Field & 0x80000000) != 0) {
          return Field;
        }
        if (!v54) {
LABEL_14:
        }
          unsigned __int16 __s = &v55;
        uint64_t Field = LD_enquireField((uint64_t)a1, a2, v14, 0xDu, &v53);
        if ((Field & 0x80000000) != 0) {
          return Field;
        }
        int v16 = v53;
        if (v53)
        {
          uint64_t Field = LD_readDirectField((uint64_t)a1, a2, v14, 0xDu, &v56, &v54);
          if ((Field & 0x80000000) != 0) {
            return Field;
          }
          if (!v54)
          {
            int v16 = 0;
            unsigned __int16 v53 = 0;
          }
        }
        if ((a3 & 7) != 0)
        {
          char v17 = __s;
          strcpy(__dsta, "1");
          char __s2 = 0;
          if (v16)
          {
            int v18 = 0;
          }
          else
          {
            LD_setErrorDescription(a5, __dst, 0, v14, "missing PRM");
            int v18 = 1;
          }
          BOOL v20 = (a3 & 2) == 0 || v16 != 0;
          if ((a3 & 4) != 0 || !v20)
          {
            if (cstdlib_strlen(v17))
            {
              if (!cstdlib_strstr(v17, "'") && !cstdlib_strstr(v17, "\"") && !cstdlib_strstr(v17, "'2"))
              {
                cstdlib_strcpy(__dsta, "0");
                if ((a3 & 4) != 0)
                {
                  if (v16)
                  {
                    uint64_t Field = LD_readDirectField((uint64_t)a1, a2, v14, 0xDu, &__s2, (unsigned __int16 *)__src);
                    if ((Field & 0x80000000) != 0) {
                      return Field;
                    }
                    if (cstdlib_strcmp(__dsta, __s2))
                    {
                      LD_setErrorDescription(a5, __dst, 0, v14, "PRM != 0 without stress marker");
                      int v18 = 1;
                    }
                  }
                }
              }
            }
          }
          if ((v50 & 1) != 0 && v18)
          {
            __int16 v21 = cstdlib_strlen(__dsta);
            uint64_t Field = LD_writeField((uint64_t)a1, a2, v14, 0xDu, (unsigned __int16)(v21 + 1), __dsta, &__dsta[2]);
            if ((Field & 0x80000000) != 0) {
              return Field;
            }
            int v16 = 1;
            unsigned __int16 v53 = 1;
          }
        }
        if ((a3 & 8) != 0)
        {
          __int16 v65 = 0;
          if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0) {
            return 2300583944;
          }
          char __s2 = 0;
          uint64_t Field = LD_readDirectField((uint64_t)a1, a2, v14, 5u, &__s2, (unsigned __int16 *)&__dsta[2]);
          if ((Field & 0x80000000) != 0) {
            return Field;
          }
          if ((LD_enquireField((uint64_t)a1, a2, v14, 0xEu, &v65) & 0x80000000) == 0 && !v65)
          {
            LD_setErrorDescription(a5, __dst, 0, v14, "missing NLU field");
            if (v50)
            {
              strcpy(__src, "POS:");
              uint64_t v32 = __s2;
              int v33 = cstdlib_strlen(__s2);
              uint64_t v34 = (char *)heap_Alloc(*(void *)(*a1 + 8), (v33 + 5));
              if (!v34) {
                goto LABEL_136;
              }
              uint64_t v35 = v34;
              cstdlib_strcpy(v34, __src);
              cstdlib_strcat(v35, v32);
              __int16 v36 = cstdlib_strlen(v35);
              int v37 = LD_writeField((uint64_t)a1, a2, v14, 0xEu, (unsigned __int16)(v36 + 1), v35, __dsta);
              uint64_t v13 = v37 & (v37 >> 31);
              heap_Free(*(void **)(*a1 + 8), (uint64_t)v35);
              if ((v13 & 0x80000000) != 0) {
                return v13;
              }
            }
          }
        }
        if ((a3 & 0x60) != 0)
        {
          int v22 = __s;
          if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0) {
            return 2300583944;
          }
          if (v16)
          {
            char __s2 = 0;
            uint64_t Field = LD_readDirectField((uint64_t)a1, a2, v14, 0xDu, &__s2, (unsigned __int16 *)__src);
            if ((Field & 0x80000000) != 0) {
              return Field;
            }
            int v23 = (unsigned __int16)cstdlib_atoi((unsigned __int8 *)__s2);
            if ((a3 & 0x20) == 0 || v23)
            {
              if ((a3 & 0x40) == 0
                || !v23
                || !cstdlib_strlen(v22)
                || cstdlib_strstr(v22, "'")
                || cstdlib_strstr(v22, "\"")
                || cstdlib_strstr(v22, "*")
                || cstdlib_strstr(v22, "["))
              {
                goto LABEL_73;
              }
              if (cstdlib_strstr(v22, "-"))
              {
                LD_setErrorDescription(a5, __dst, 1, v14, "missing marker of primary stress (unsafe)");
                if ((v50 & 2) == 0) {
                  goto LABEL_73;
                }
              }
              else
              {
                LD_setErrorDescription(a5, __dst, 0, v14, "missing marker of primary stress (safe)");
                if ((v50 & 1) == 0) {
                  goto LABEL_73;
                }
              }
              if (cstdlib_strstr(v22, "'2") == v22) {
                v22 += cstdlib_strlen("'2");
              }
              int v42 = cstdlib_strlen("'");
              int v43 = cstdlib_strlen(v22);
              unsigned int v44 = (char *)heap_Alloc(*(void *)(*a1 + 8), (v42 + v43 + 1));
              if (!v44)
              {
LABEL_136:
                log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 20000, 0, v26, v27, v28, v29, v46);
                return 2300583946;
              }
              uint64_t v30 = v44;
              cstdlib_strcpy(v44, "'");
              cstdlib_strcat(v30, v22);
            }
            else
            {
              if (!cstdlib_strstr(v22, "'") && !cstdlib_strstr(v22, "\"") && !cstdlib_strstr(v22, "'2")) {
                goto LABEL_73;
              }
              LD_setErrorDescription(a5, __dst, 0, v14, "spurious stress marker in unaccented word");
              if ((v50 & 1) == 0) {
                goto LABEL_73;
              }
              int v24 = cstdlib_strlen(v22);
              unsigned __int16 v25 = (char *)heap_Alloc(*(void *)(*a1 + 8), (v24 + 1));
              if (!v25) {
                goto LABEL_136;
              }
              uint64_t v30 = v25;
              cstdlib_strcpy(v25, v22);
              lingdb_RemoveAllSubstrOcc(v30, "'2");
              lingdb_RemoveAllSubstrOcc(v30, "'");
              lingdb_RemoveAllSubstrOcc(v30, "\"");
            }
            __int16 v31 = cstdlib_strlen(v30);
            uint64_t v13 = LD_writeField((uint64_t)a1, a2, v14, 3u, (unsigned __int16)(v31 + 1), v30, &__dsta[2]);
            heap_Free(*(void **)(*a1 + 8), (uint64_t)v30);
            if ((v13 & 0x80000000) != 0) {
              return v13;
            }
            unsigned __int16 v14 = v59;
          }
        }
LABEL_73:
        if ((a3 & 0x10) != 0)
        {
          __int16 v65 = 0;
          unsigned int v38 = v58;
          if (!v58)
          {
            LD_setErrorDescription(a5, __dst, 0, v14, "missing initial phrase record");
            if (v50)
            {
              LODWORD(__s2) = 15;
              __int16 v64 = 0;
              __int16 v63 = 200;
              char v62 = 0;
              uint64_t Field = LD_createPrev((uint64_t)a1, a2, v14, &v58);
              if ((Field & 0x80000000) != 0) {
                return Field;
              }
              *(_WORD *)__dsta = 0;
              uint64_t Field = LD_enquireField((uint64_t)a1, a2, v14, 1u, &v65);
              if ((Field & 0x80000000) != 0) {
                return Field;
              }
              if (v65)
              {
                uint64_t Field = LD_readField((uint64_t)a1, a2, v14, 1u, 1u, __dsta, __src);
                if ((Field & 0x80000000) != 0) {
                  return Field;
                }
                unsigned int v38 = v58;
                uint64_t Field = LD_writeField((uint64_t)a1, a2, v58, 1u, 1u, __dsta, &__dsta[2]);
                if ((Field & 0x80000000) != 0) {
                  return Field;
                }
                uint64_t Field = LD_writeField((uint64_t)a1, a2, v38, 2u, 1u, __dsta, &__dsta[2]);
                if ((Field & 0x80000000) != 0) {
                  return Field;
                }
              }
              else
              {
                unsigned int v38 = v58;
              }
              uint64_t Field = LD_writeField((uint64_t)a1, a2, v38, 0, 1u, (char *)&__s2, &__dsta[2]);
              if ((Field & 0x80000000) != 0) {
                return Field;
              }
              __int16 v40 = cstdlib_strlen(&v62);
              uint64_t Field = LD_writeField((uint64_t)a1, a2, v38, 4u, (unsigned __int16)(v40 + 1), &v62, &__dsta[2]);
              if ((Field & 0x80000000) != 0) {
                return Field;
              }
              uint64_t Field = LD_writeField((uint64_t)a1, a2, v38, 7u, 1u, (char *)&v64, &__dsta[2]);
              if ((Field & 0x80000000) != 0) {
                return Field;
              }
              int v41 = LD_writeField((uint64_t)a1, a2, v38, 8u, 1u, (char *)&v63, &__dsta[2]);
              uint64_t v13 = v41 & (v41 >> 31);
              if ((v41 & (v41 >> 31)) < 0) {
                return v13;
              }
            }
          }
          if (!v49)
          {
            __int16 v65 = 0;
            if (v38)
            {
              if (v14)
              {
                *(_DWORD *)__dsta = 0;
                uint64_t v13 = LD_enquireField((uint64_t)a1, a2, v38, 1u, &v65);
                if ((v13 & 0x80000000) != 0) {
                  goto LABEL_107;
                }
                if (!v65) {
                  goto LABEL_107;
                }
                uint64_t v13 = LD_enquireField((uint64_t)a1, a2, v14, 1u, &v65);
                if ((v13 & 0x80000000) != 0 || !v65) {
                  goto LABEL_107;
                }
                uint64_t Field = LD_readField((uint64_t)a1, a2, v38, 1u, 1u, __dsta, &__s2);
                if ((Field & 0x80000000) != 0) {
                  return Field;
                }
                uint64_t Field = LD_readField((uint64_t)a1, a2, v14, 1u, 1u, &__dsta[2], &__s2);
                if ((Field & 0x80000000) != 0) {
                  return Field;
                }
                if (*(unsigned __int16 *)&__dsta[2] != *(unsigned __int16 *)__dsta)
                {
                  LD_setErrorDescription(a5, __dst, 0, v38, "inconsistent phrase FROMPOS");
                  if (v50)
                  {
                    uint64_t v13 = LD_writeField((uint64_t)a1, a2, v38, 1u, 1u, &__dsta[2], __src);
LABEL_107:
                    if ((v13 & 0x80000000) != 0) {
                      return v13;
                    }
                  }
                }
              }
            }
          }
          int v49 = 1;
        }
LABEL_93:
        uint64_t Field = LD_nextInSent((uint64_t)a1, a2, v14, &v59);
        if ((Field & 0x80000000) != 0) {
          return Field;
        }
        unsigned __int16 v14 = v59;
        if (!v59)
        {
          if ((a3 & 0x10) == 0)
          {
            uint64_t v13 = 0;
            goto LABEL_132;
          }
          if (v49) {
            uint64_t Field = LD_checkPHR_TNTAG((uint64_t)a1, a2, v50, v58, 0, a5, __dst);
          }
          else {
            uint64_t Field = LD_checkPHR_final((uint64_t)a1, a2, v50, v47, (__int16 *)&v58, a5, __dst);
          }
          if ((Field & 0x80000000) == 0)
          {
            uint64_t v13 = LD_checkPHR_TOPOS((uint64_t)a1, a2, v50, v48, a5, __dst);
            if ((v13 & 0x80000000) != 0) {
              return v13;
            }
LABEL_132:
            if ((a3 & 0x80) == 0) {
              return v13;
            }
            return LD_checkRECPROMPT((uint64_t)a1, a2, v50, v48, a5, __dst);
          }
          return Field;
        }
      }
    }
  }
  return v13;
}

uint64_t LD_checkPHR_TNTAG(uint64_t a1, int a2, char a3, unsigned int a4, unsigned int a5, char *a6, char *a7)
{
  unsigned __int16 v25 = 0;
  char __s1 = 0;
  if (!a4) {
    return 0;
  }
  __int16 v30 = 0;
  uint64_t result = LD_enquireField(a1, a2, a4, 4u, &v30);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (!v30) {
    goto LABEL_12;
  }
  unsigned __int16 v29 = 0;
  uint64_t result = LD_readDirectField(a1, a2, a4, 4u, &__s1, &v29);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (!v29 || (uint64_t v15 = __s1) == 0 || !cstdlib_strcmp(__s1, ""))
  {
LABEL_12:
    LD_setErrorDescription(a6, a7, 0, a4, "undefined phrase type");
    uint64_t result = 0;
    if ((a3 & 1) == 0) {
      return result;
    }
    if (a5) {
      char v17 = "P";
    }
    else {
      char v17 = "T";
    }
    cstdlib_strcpy(__dst, v17);
    unsigned int v18 = (unsigned __int16)(cstdlib_strlen(__dst) + 1);
    BOOL v19 = __dst;
    uint64_t v20 = a1;
    int v21 = a2;
    unsigned int v22 = a4;
    return LD_writeField(v20, v21, v22, 4u, v18, v19, &v28);
  }
  if (!cstdlib_strcmp(v15, "T"))
  {
    if (a5)
    {
LABEL_19:
      LD_setErrorDescription(a6, a7, 0, a4, "non-final phrase of final type");
      uint64_t result = 0;
      if ((a3 & 1) == 0) {
        return result;
      }
      cstdlib_strcpy(__dst, "P");
      __int16 v23 = cstdlib_strlen(__dst);
      uint64_t result = LD_writeField(a1, a2, a4, 4u, (unsigned __int16)(v23 + 1), __dst, &v28);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = LD_enquireField(a1, a2, a5, 4u, &v30);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (v30)
      {
        uint64_t result = LD_readDirectField(a1, a2, a5, 4u, &v25, &v29);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (v29)
        {
          int v24 = v25;
          if (v25)
          {
            uint64_t result = cstdlib_strcmp(v25, "T");
            if (!result) {
              return result;
            }
            uint64_t result = cstdlib_strcmp(v24, "Y");
            if (!result) {
              return result;
            }
          }
        }
      }
      unsigned int v18 = (unsigned __int16)(cstdlib_strlen(v15) + 1);
      uint64_t v20 = a1;
      int v21 = a2;
      unsigned int v22 = a5;
      BOOL v19 = v15;
      return LD_writeField(v20, v21, v22, 4u, v18, v19, &v28);
    }
    return 0;
  }
  int v16 = cstdlib_strcmp(v15, "Y");
  uint64_t result = 0;
  if (a5 && !v16) {
    goto LABEL_19;
  }
  return result;
}

uint64_t LD_checkPHR_final(uint64_t a1, int a2, char a3, unsigned int a4, __int16 *a5, char *a6, char *__s1)
{
  if (!*a5) {
    return 0;
  }
  LD_setErrorDescription(a6, __s1, 0, *a5, "dangling final phrase record");
  uint64_t result = 0;
  if (a3)
  {
    if (!a4
      || (unsigned __int16 __s = 0,
          uint64_t result = LD_readDirectField(a1, a2, (unsigned __int16)*a5, 4u, &__s, &v17),
          (result & 0x80000000) == 0)
      && (uint64_t v13 = __s,
          __int16 v14 = cstdlib_strlen(__s),
          uint64_t result = LD_writeField(a1, a2, a4, 4u, (unsigned __int16)(v14 + 1), v13, &v16),
          (result & 0x80000000) == 0))
    {
      uint64_t result = LD_deleteRec(a1, a2, (unsigned __int16)*a5);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = 0;
        *a5 = a4;
      }
    }
  }
  return result;
}

uint64_t LD_checkPHR_TOPOS(uint64_t a1, int a2, char a3, unsigned int a4, char *a5, char *a6)
{
  unsigned __int16 v21 = 0;
  int v20 = 0;
  int v16 = 0;
  int v17 = 0;
  uint64_t result = LD_enquireChild(a1, a2, 2, a4, &v21);
  if ((result & 0x80000000) == 0)
  {
    unsigned __int16 v12 = 0;
    unsigned __int16 v13 = 0;
    while (1)
    {
      unsigned int v14 = v21;
      if (!v21) {
        break;
      }
      uint64_t result = LD_readField(a1, a2, v21, 0, 1u, &v20, &v19);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if ((v20 - 9) < 6 || v20 == 4)
      {
        unsigned __int16 v12 = v14;
      }
      else if (v20 == 15)
      {
        if (!v13) {
          goto LABEL_23;
        }
        uint64_t result = LD_enquireField(a1, a2, v13, 2u, &v16);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (!(_WORD)v16) {
          goto LABEL_23;
        }
        uint64_t result = LD_readField(a1, a2, v13, 2u, 1u, &v17, &v19);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = LD_enquireField(a1, a2, v14, 1u, &v16);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (!(_WORD)v16) {
          goto LABEL_23;
        }
        uint64_t result = LD_readField(a1, a2, v14, 1u, 1u, (char *)&v17 + 2, &v19);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if ((unsigned __int16)v17 != HIWORD(v17)
          && (LD_setErrorDescription(a5, a6, 0, v13, "inconsistent phrase TOPOS"), (a3 & 1) != 0))
        {
          uint64_t result = LD_writeField(a1, a2, v13, 2u, 1u, (char *)&v17 + 2, &v18);
          unsigned __int16 v13 = v14;
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        else
        {
LABEL_23:
          unsigned __int16 v13 = v14;
        }
      }
      uint64_t result = LD_nextInSent(a1, a2, v14, &v21);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    uint64_t result = 0;
    if (v13)
    {
      if (v12)
      {
        uint64_t result = LD_enquireField(a1, a2, v12, 2u, &v16);
        if ((result & 0x80000000) == 0)
        {
          if ((_WORD)v16)
          {
            uint64_t result = LD_readField(a1, a2, v12, 2u, 1u, &v17, &v19);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = LD_enquireField(a1, a2, v13, 2u, &v16);
              if ((result & 0x80000000) == 0)
              {
                if ((_WORD)v16)
                {
                  uint64_t result = LD_readField(a1, a2, v13, 2u, 1u, (char *)&v16 + 2, &v19);
                  if ((result & 0x80000000) == 0)
                  {
                    if ((unsigned __int16)v17 == HIWORD(v16))
                    {
                      return 0;
                    }
                    else
                    {
                      LD_setErrorDescription(a5, a6, 0, v13, "inconsistent TOPOS of final phrase record");
                      uint64_t result = 0;
                      if (a3) {
                        return LD_writeField(a1, a2, v13, 2u, 1u, (char *)&v17, &v18);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LD_checkRECPROMPT(uint64_t a1, int a2, char a3, unsigned int a4, char *a5, char *a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned __int16 v25 = 0;
  int v24 = 11;
  __int16 v23 = 0;
  uint64_t result = LD_findChild(a1, a2, 2, a4, &v25);
  if ((result & 0x80000000) == 0)
  {
    unsigned __int16 v12 = 0;
    int v13 = 4;
    while (1)
    {
      unsigned int v14 = v25;
      if (!v25) {
        return 0;
      }
      uint64_t result = LD_readField(a1, a2, v25, 0, 1u, &v24, &v27);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if ((v24 - 9) < 6 || v24 == 4) {
        break;
      }
LABEL_33:
      uint64_t result = LD_nextInSent(a1, a2, v14, &v25);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    if (v12)
    {
      if ((v13 & 0xFFFFFFFD) == 0xC)
      {
        if ((v24 | 2) != 0xE)
        {
LABEL_15:
          uint64_t result = LD_readField(a1, a2, v12, 8u, 1u, &v23, &v27);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (!v23)
          {
            LD_setErrorDescription(a5, a6, 0, v12, "End of recorded prompt should coincide with phrase boundary: inserted short break");
            __int16 v23 = 1;
            if (a3)
            {
              strcpy(v28, "external");
              int v22 = 15;
              __int16 v21 = 0;
              char __s = 0;
              int v19 = 0;
              __int16 v18 = 0;
              uint64_t result = LD_writeField(a1, a2, v12, 8u, 1u, (char *)&v23, &v26);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = LD_writeField(a1, a2, v12, 0x12u, 9u, v28, &v26);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = LD_createPrev(a1, a2, v14, (_WORD *)&v19 + 1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = LD_enquireField(a1, a2, v14, 1u, &v19);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if ((_WORD)v19)
              {
                uint64_t result = LD_readField(a1, a2, v14, 1u, 1u, &v18, &v27);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                unsigned int v16 = HIWORD(v19);
                uint64_t result = LD_writeField(a1, a2, HIWORD(v19), 1u, 1u, (char *)&v18, &v26);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = LD_writeField(a1, a2, v16, 2u, 1u, (char *)&v18, &v26);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              else
              {
                unsigned int v16 = HIWORD(v19);
              }
              uint64_t result = LD_writeField(a1, a2, v16, 0, 1u, (char *)&v22, &v26);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              __int16 v17 = cstdlib_strlen(&__s);
              uint64_t result = LD_writeField(a1, a2, v16, 4u, (unsigned __int16)(v17 + 1), &__s, &v26);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = LD_writeField(a1, a2, v16, 7u, 1u, (char *)&v21, &v26);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = LD_writeField(a1, a2, v16, 8u, 1u, (char *)&v23, &v26);
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
          }
        }
      }
      else if (v24 == 14)
      {
        goto LABEL_15;
      }
    }
    int v13 = v24;
    unsigned __int16 v12 = v14;
    goto LABEL_33;
  }
  return result;
}

uint64_t LD_getWordType(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  *a4 = LD_WORDTYPE_LOOKUP[2 * a3 + 1];
  return 0;
}

uint64_t LD_traverseWordRecsFromTokenRec(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t (*a4)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t a5)
{
  while (1)
  {
    if (!*a3) {
      return 0;
    }
    uint64_t result = a4(a1, a2, a3, a5);
    if ((result & 0x1FFF) == 0x1E1C) {
      break;
    }
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = LD_nextInSent(a1, a2, *a3, a3);
      if ((result & 0x80000000) == 0) {
        continue;
      }
    }
    return result;
  }
  unsigned int v11 = *a3;

  return LD_nextInSent(a1, a2, v11, a3);
}

uint64_t LD_traverseWordRecs(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t (*a4)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t (*a5)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t (*a6)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t (*a7)(uint64_t, uint64_t, unsigned __int16 *, uint64_t), uint64_t a8)
{
  unsigned __int16 v16 = 0;
  uint64_t result = LD_findChild(a1, a2, 2, a3, &v16);
  if ((result & 0x80000000) == 0)
  {
    if (!a4) {
      goto LABEL_5;
    }
    uint64_t result = a4(a1, a2, &v16, a8);
    if ((result & 0x80000000) == 0)
    {
      while (v16)
      {
        uint64_t result = a5(a1, a2, &v16, a8);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = LD_nextInSent(a1, a2, v16, &v16);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (a6)
        {
          uint64_t result = a6(a1, a2, &v16, a8);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        else
        {
LABEL_5:
          uint64_t result = 0;
        }
      }
      if (a7) {
        return a7(a1, a2, &v16, a8);
      }
    }
  }
  return result;
}

uint64_t lingdb_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2300583937;
  }
  uint64_t result = 0;
  *a2 = &iLingDB;
  return result;
}

char *LD_setErrorDescription(char *result, char *__s1, int a3, __int16 a4, const char *a5)
{
  if (result && (a3 || !*(_WORD *)result))
  {
    *(_WORD *)uint64_t result = a4;
    if (!__s1) {
      return result;
    }
  }
  else if (!__s1)
  {
    return result;
  }
  uint64_t result = (char *)cstdlib_strcmp(__s1, "");
  if (a3 || !result)
  {
    return cstdlib_strncpy(__s1, a5, 0x64uLL);
  }
  return result;
}

uint64_t LD_createPrev(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  __int16 v20 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v8, v9, v10, v11, "record");
    return 2300591633;
  }
  unsigned int v13 = *(unsigned __int8 *)(v12 + 2);
  if (v13 == 1)
  {
    uint64_t v14 = 2300591621;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20008, 0, v8, v9, v10, v11, v19);
    return v14;
  }
  unsigned __int16 v16 = *(unsigned __int16 **)(v12 + 24);
  if (v16)
  {
    uint64_t v17 = LD_createNext(a1, a2, *v16, &v20);
    if ((v17 & 0x80000000) != 0) {
      return v17;
    }
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  __int16 v18 = *(unsigned __int16 **)(v12 + 8);
  if (!v18)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20009, (uint64_t)"%s%s%s%u%s%u", v8, v9, v10, v11, "method");
    return 2300591622;
  }
  uint64_t v14 = LD_createChild(a1, a2, v13, *v18, &v20);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_14:
    *a4 = v20;
    *(_DWORD *)(a1 + 72) = 1;
  }
  return v14;
}

uint64_t LD_deleteRec(uint64_t a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  *(_DWORD *)(a1 + 72) = 1;

  return LD_deleteRecordRecursive(a1, a3, a3, v5, v6, v7, v8, v9);
}

uint64_t LD_deleteRecordRecursive(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 48) > a2 && (uint64_t v10 = *(void **)(*(void *)(a1 + 64) + 8 * a2)) != 0)
  {
    uint64_t v12 = 0;
    char v13 = 1;
    do
    {
      uint64_t v14 = (unsigned __int16 *)v10[v12 + 4];
      if (!v14) {
        break;
      }
      char v15 = v13;
      uint64_t v16 = LD_deleteRecordRecursive(a1, *v14, a3);
      if (v16) {
        return v16;
      }
      char v13 = 0;
      uint64_t v12 = 1;
    }
    while ((v15 & 1) != 0);
    if (a2 == a3)
    {
      uint64_t v17 = v10[3];
      if (v17)
      {
        uint64_t v18 = v10[2];
        if (v18)
        {
          *(void *)(v18 + 24) = v17;
          *(void *)(v10[3] + 16) = v18;
        }
        else
        {
          *(void *)(v17 + 16) = 0;
        }
      }
      else
      {
        uint64_t v22 = 0;
        char v23 = 1;
        do
        {
          uint64_t v24 = v10[1] + 8 * v22;
          __int16 v27 = *(void **)(v24 + 32);
          unsigned __int16 v25 = (void *)(v24 + 32);
          __int16 v26 = v27;
          if (!v27) {
            goto LABEL_21;
          }
          char v28 = v23;
          char v23 = 0;
          uint64_t v22 = 1;
        }
        while ((v28 & (v26 != v10)) != 0);
        if (v26 != v10)
        {
LABEL_21:
          uint64_t v19 = 2300591631;
          log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20018, (uint64_t)"%s%u%s%u", a5, a6, a7, a8, "recordType");
          return v19;
        }
        uint64_t v29 = v10[2];
        if (v29)
        {
          *unsigned __int16 v25 = v29;
          *(void *)(v10[2] + 24) = 0;
        }
        else
        {
          *unsigned __int16 v25 = 0;
          if (v28)
          {
            uint64_t v30 = v10[1];
            uint64_t v31 = *(void *)(v30 + 40);
            if (v31)
            {
              *(void *)(v30 + 32) = v31;
              *(void *)(v10[1] + 40) = 0;
            }
          }
        }
      }
      goto LABEL_23;
    }
    __int16 v21 = (unsigned __int16 *)v10[2];
    if (!v21 || (uint64_t v19 = LD_deleteRecordRecursive(a1, *v21, a3), !v19))
    {
LABEL_23:
      uint64_t v19 = 0;
      *(void *)(*(void *)(a1 + 64) + 8 * a2) = 0;
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", a5, a6, a7, a8, "record");
    return 2300591633;
  }
  return v19;
}

uint64_t LD_objOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v26);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  log_OutText(*(void *)(v26 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjOpen: Begin", v7, v8, v9, v24);
  uint64_t v10 = heap_Calloc(*(void **)(v26 + 8), 1, 80);
  if (v10)
  {
    char v15 = (uint64_t *)v10;
    *(void *)uint64_t v10 = v26;
    *(_DWORD *)(v10 + 48) = 1;
    if ((paramc_ParamGetUInt(*(void *)(v26 + 40), (uint64_t)"lingdbrecordinitialsize", (unsigned int *)(v10 + 52)) & 0x80000000) != 0) {
      *((_DWORD *)v15 + 13) = 128;
    }
    if ((paramc_ParamGetUInt(*(void *)(v26 + 40), (uint64_t)"lingdbrecordgrowbysize", (unsigned int *)v15 + 14) & 0x80000000) != 0) {
      *((_DWORD *)v15 + 14) = 128;
    }
    if ((paramc_ParamGetUInt(*(void *)(v26 + 40), (uint64_t)"lingdbmaxrecords", (unsigned int *)v15 + 15) & 0x80000000) != 0) {
      *((_DWORD *)v15 + 15) = -1;
    }
    if ((paramc_ParamGetUInt(*(void *)(v26 + 40), (uint64_t)"lingdbrecpoolinitialsize", (unsigned int *)&v27 + 1) & 0x80000000) != 0) {
      HIDWORD(v27) = 10240;
    }
    if ((paramc_ParamGetUInt(*(void *)(v26 + 40), (uint64_t)"lingdbrecpoolgrowsize", (unsigned int *)&v27) & 0x80000000) != 0) {
      LODWORD(v27) = 4096;
    }
    log_OutText(*(void *)(*v15 + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"endMallocdID=%u, growBySize=%u, maxRecords=%u, recPoolInitial=%u, recPoolGrow=%u, currentSentID=%u", v16, v17, v18, *((unsigned int *)v15 + 13));
    LD_HeapInit(v15 + 1, v26, (uint64_t)"records/fields", SHIDWORD(v27), v27);
    *(void *)a5 = v15;
    *(_DWORD *)(a5 + 8) = 45762;
    uint64_t v19 = LD_reset(v15, *(void *)(a5 + 8));
    if ((v19 & 0x80000000) != 0)
    {
      LD_objClose(*(uint64_t **)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    log_OutText(*(void *)(v26 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjOpen: End (%x)", v20, v21, v22, v19);
  }
  else
  {
    log_OutPublic(*(void *)(v26 + 32), (uint64_t)"LINGDB", 20000, 0, v11, v12, v13, v14, v25);
    return 2300583946;
  }
  return v19;
}

uint64_t LD_objClose(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  uint64_t v7 = *a1;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjClose : Begin", v4, v5, v6, v20);
  LD_HeapFreePool(a1 + 1, v8, v9, v10, v11, v12, v13, v14);
  LD_clear((uint64_t)a1, a2);
  uint64_t v15 = a1[8];
  if (v15) {
    heap_Free(*(void **)(*a1 + 8), v15);
  }
  heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v7 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjClose : End (%x)", v16, v17, v18, 0);
  return 0;
}

uint64_t LD_objReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  uint64_t v6 = *(void *)a1;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjReopen : Begin", v3, v4, v5, v11);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB ObjReopen : End (%x)", v7, v8, v9, 0);
  return 0;
}

uint64_t LD_reset(uint64_t *a1, int a2)
{
  uint64_t v3 = 2300583944;
  uint64_t v25 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) == 0)
  {
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_reset : Begin", v4, v5, v6, v23);
    int v14 = *((_DWORD *)a1 + 12);
    if (v14 == 1)
    {
      if (!a1[8])
      {
        uint64_t v15 = heap_Calloc(*(void **)(*a1 + 8), *((unsigned int *)a1 + 13), 8);
        a1[8] = v15;
        if (!v15)
        {
          log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 20000, 0, v10, v11, v12, v13, v24);
          return 2300583946;
        }
      }
      LD_HeapResetPool(a1 + 1, v7, v8, v9, v10, v11, v12, v13);
      uint64_t v21 = LD_createRec(a1, 1u, &v25, v16, v17, v18, v19, v20);
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
    }
    else if (v14 != 2)
    {
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 20003, 0, v10, v11, v12, v13, v24);
      return 2300591616;
    }
    a1[9] = 0;
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_reset : End (%x)", v11, v12, v13, 0);
    return 0;
  }
  return v3;
}

uint64_t LD_clear(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_clear : Begin", v3, v4, v5, v14);
  *(_DWORD *)(a1 + 72) = 0;
  if (*(void *)(a1 + 64))
  {
    LD_HeapResetPool((uint64_t *)(a1 + 8), v6, v7, v8, v9, v10, v11, v12);
    *(_DWORD *)(a1 + 48) = 1;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 4, 0, (uint64_t)"LINGDB LD_clear : End (%x)", v10, v11, v12, 0);
  return 0;
}

uint64_t LD_findParent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
  {
    unsigned __int16 v14 = 8200;
    return v14 | 0x89200000;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v7, v8, v9, v10, "record");
    unsigned __int16 v14 = 15889;
    return v14 | 0x89200000;
  }
  uint64_t v12 = *(_WORD **)(v11 + 8);
  if (v12) {
    LOWORD(v12) = *v12;
  }
  uint64_t result = 0;
  *a4 = (_WORD)v12;
  return result;
}

uint64_t LD_findPrevCommonParent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0)
  {
    unsigned __int16 v14 = 8200;
    return v14 | 0x89200000;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v7, v8, v9, v10, "record");
    unsigned __int16 v14 = 15889;
    return v14 | 0x89200000;
  }
  uint64_t v12 = *(_WORD **)(v11 + 24);
  if (v12) {
    LOWORD(v12) = *v12;
  }
  uint64_t result = 0;
  *a4 = (_WORD)v12;
  return result;
}

uint64_t LD_prevInSent(uint64_t a1, int a2, unsigned int a3, _WORD *a4)
{
  __int16 v16 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  uint64_t PrevCommonParent = LD_findPrevCommonParent(a1, a2, a3, &v16);
  if ((PrevCommonParent & 0x80000000) != 0) {
    return PrevCommonParent;
  }
  if (v16) {
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 48) <= a3 || (uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8 * a3)) == 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20020, (uint64_t)"%s%u", v9, v10, v11, v12, "record");
    return 2300591633;
  }
  if ((*(unsigned char *)(v14 + 2) & 0xFE) == 2)
  {
LABEL_4:
    uint64_t v13 = 0;
    *a4 = v16;
  }
  else
  {
    uint64_t v13 = 2300591625;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"LINGDB", 20012, (uint64_t)"%s%s%s%u%s%u", v9, v10, v11, v12, "method");
  }
  return v13;
}

uint64_t LD_checkIfIsInPrompt(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  int v16 = 0;
  LODWORD(__n) = 0;
  __int16 v15 = 0;
  int v14 = 11;
  char __s1 = 0;
  *a4 = 0;
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  unsigned int v8 = *(void *)(a1 + 64) != 0;
  int v9 = LD_enquireChild(a1, a2, 2, v8, &v15);
  uint64_t result = 0;
  if ((v9 & 0x80000000) == 0)
  {
    if (v15)
    {
      uint64_t result = LD_findChild(a1, a2, 2, v8, (_WORD *)&__n + 1);
      if ((result & 0x80000000) == 0)
      {
        while (1)
        {
          unsigned int v11 = WORD1(__n);
          BOOL v12 = !WORD1(__n) || HIWORD(v16) > a3;
          if (v12 || *a4) {
            break;
          }
          uint64_t result = LD_readField(a1, a2, WORD1(__n), 1u, 1u, (char *)&v16 + 2, &__n);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (HIWORD(v16) <= a3)
          {
            uint64_t result = LD_readField(a1, a2, v11, 0, 1u, &v14, &__n);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (v14 == 5)
            {
              uint64_t result = LD_readDirectField(a1, a2, v11, 4u, &__s1, (unsigned __int16 *)&__n);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if ((_WORD)__n && !cstdlib_strncmp(__s1, "prompt", (unsigned __int16)__n))
              {
                uint64_t result = LD_readField(a1, a2, v11, 2u, 1u, &v16, &__n);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                if ((unsigned __int16)v16 > a3) {
                  *a4 = 1;
                }
              }
            }
          }
          uint64_t result = LD_nextInSent(a1, a2, v11, (_WORD *)&__n + 1);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t LD_setPhonInDepes(uint64_t a1, int a2, int a3)
{
  if ((safeh_HandleCheck(a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 76) = a3;
  return result;
}

uint64_t LD_dumpDB(uint64_t *a1, uint64_t a2, int a3, const char *a4, int a5)
{
  return LD_dumpDBViaLogging(a1, a2, a3, a4, a5, 0x64u, 0);
}

uint64_t LD_dumpDBViaLogging(uint64_t *a1, uint64_t a2, int a3, const char *a4, int a5, unsigned int a6, int a7)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((safeh_HandleCheck((uint64_t)a1, a2, 45762, 80) & 0x80000000) != 0) {
    return 2300583944;
  }
  long long v17 = 0u;
  memset(v18, 0, 432);
  memset(v16, 0, sizeof(v16));
  if (log_GetLogLevel(*(void *)(*a1 + 32)) >= a6)
  {
    cstdlib_memset(v18, 0, 0x800uLL);
    cstdlib_memcpy((char *)v16 + 8, "LINGDB", 0x42uLL);
    HIDWORD(v17) = a6;
    *(void *)&v16[0] = *(void *)(*a1 + 32);
    if (a3) {
      WORD4(v17) = a3;
    }
    if (a4)
    {
      LD_logOutputCB((uint64_t)v16, a4);
      LD_logOutputCB((uint64_t)v16, "\n");
    }
    if (a5 == 1)
    {
      int v15 = 0;
      if (LD_getDBChangedStatus((uint64_t)a1, a2, &v15) || v15 != 1)
      {
        LD_logOutputCB((uint64_t)v16, "LingDB unchanged since last call\n");
        return 0;
      }
      LD_resetDBChangedStatus((uint64_t)a1, a2);
    }
    dumpSentenceRecord(a1, a2, (void (*)(uint64_t, const char *))LD_logOutputCB, (uint64_t)v16, a7);
  }
  return 0;
}

uint64_t LD_dumpDBNew(uint64_t *a1, uint64_t a2, int a3, const char *a4, int a5)
{
  return LD_dumpDBViaLogging(a1, a2, a3, a4, a5, 0, 1);
}

uint64_t LD_serialize(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4)
{
  return 0;
}

uint64_t dumpSentenceRecord(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4, int a5)
{
  int v9 = a1;
  unsigned __int16 v52 = 0;
  unsigned __int16 v51 = 0;
  uint64_t v50 = 0;
  uint64_t result = LD_findDirect(a1, a2, 1, 0, &v52);
  if (!result)
  {
    unsigned int v11 = v52;
    if (v52)
    {
      unsigned int v12 = (unsigned __int16)word_26D2118F0;
      int v55 = 0;
      if ((LD_enquireField((uint64_t)v9, a2, v52, 0, (_WORD *)&v55 + 1) & 0x80000000) == 0
        && HIWORD(v55) == 1
        && (LD_readDirectField((uint64_t)v9, a2, v11, 0, &v50, (unsigned __int16 *)&v55) & 0x80000000) == 0
        && (unsigned __int16)v55 <= 1u)
      {
        uint64_t v50 = 0;
      }
      a3(a4, "<SentenceRecord>\n");
      if (v12)
      {
        int v13 = 0;
        do
        {
          HIDWORD(v41) = a5;
          LOWORD(v41) = v52;
          (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, void, void, void, uint64_t))&LD_FIELDOFFSETSD[20 * v13 + 480])(v9, a2, a3, a4, "  ", v13, *(void *)&LD_FIELDOFFSETSD[20 * v13 + 476], LD_FIELDOFFSETSD[20 * v13 + 472], v41);
          ++v13;
        }
        while (v12 > v13);
      }
      int v14 = LD_enquireChild((uint64_t)v9, a2, 3, v52, &v51);
      unsigned __int16 v15 = v51;
      if (v14) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v51 == 0;
      }
      if (!v16)
      {
        unsigned int v17 = (unsigned __int16)word_26D212000;
        do
        {
          a3(a4, " <TokenRecord>\n");
          if (v17)
          {
            int v18 = 0;
            do
            {
              HIDWORD(v41) = a5;
              LOWORD(v41) = v15;
              (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, void, void, void, uint64_t))&LD_FIELDOFFSETSD[20 * v18 + 1384])(v9, a2, a3, a4, "    ", v18, *(void *)&LD_FIELDOFFSETSD[20 * v18 + 1380], LD_FIELDOFFSETSD[20 * v18 + 1376], v41);
              ++v18;
            }
            while (v17 > v18);
          }
          a3(a4, " </TokenRecord>\n");
          LD_nextInSent((uint64_t)v9, a2, v51, &v51);
          unsigned __int16 v15 = v51;
        }
        while (v51);
      }
      int v19 = LD_enquireChild((uint64_t)v9, a2, 2, v52, &v51);
      unsigned __int16 v20 = v51;
      if (v19) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v51 == 0;
      }
      if (!v21)
      {
        unsigned int v45 = (unsigned __int16)word_26D212388;
        unsigned int v46 = (unsigned __int16)word_26D211C78;
        int v49 = a5;
        uint64_t v48 = (uint64_t)v9;
        unsigned int v47 = (unsigned __int16)word_26D212710;
        do
        {
          uint64_t v22 = v50;
          unsigned __int16 v44 = v20;
          unsigned __int16 v53 = v20;
          a3(a4, " <WordRecord>\n");
          if (v22)
          {
            int v54 = 0;
            int v55 = 0;
            if ((safeh_HandleCheck((uint64_t)v9, a2, 45762, 80) & 0x80000000) == 0)
            {
              uint64_t v23 = *v9;
              if ((LD_enquireField((uint64_t)v9, a2, v44, 2u, &v54) & 0x80000000) == 0
                && (unsigned __int16)v54 == 1
                && (LD_enquireField((uint64_t)v9, a2, v44, 1u, &v54) & 0x80000000) == 0
                && (unsigned __int16)v54 == 1
                && (LD_readField((uint64_t)v9, a2, v44, 1u, 1u, &v55, (_WORD *)&v55 + 1) & 0x80000000) == 0
                && (LD_readField((uint64_t)v9, a2, v44, 2u, 1u, (char *)&v54 + 2, (_WORD *)&v55 + 1) & 0x80000000) == 0)
              {
                uint64_t v43 = v23;
                size_t v24 = HIWORD(v54) - (unsigned __int16)v55;
                uint64_t v25 = a5
                    ? xmlaux_calculateExtraEscapeBytes(v22 + (unsigned __int16)v55, HIWORD(v54) - (unsigned __int16)v55): 0;
                size_t __n = v24;
                size_t v26 = v25 + v24;
                uint64_t v27 = (char *)heap_Alloc(*(void *)(v43 + 8), (v26 + 1));
                if (v27)
                {
                  char v28 = (const char *)(v22 + (unsigned __int16)v55);
                  uint64_t v29 = (uint64_t)v27;
                  if (a5) {
                    xmlaux_escape(v27, (uint64_t)v28, __n);
                  }
                  else {
                    cstdlib_strncpy(v27, v28, __n);
                  }
                  *(unsigned char *)(v29 + v26) = 0;
                  a3(a4, "    ");
                  a3(a4, "<");
                  a3(a4, "LD_W_ORTH");
                  a3(a4, "> ");
                  a3(a4, (const char *)v29);
                  a3(a4, " </");
                  a3(a4, "LD_W_ORTH");
                  a3(a4, ">\n");
                  heap_Free(*(void **)(v43 + 8), v29);
                }
              }
            }
          }
          if (v46)
          {
            int v30 = 0;
            do
            {
              HIDWORD(v41) = a5;
              LOWORD(v41) = v44;
              (*(void (**)(uint64_t *, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, void, void, void, uint64_t))&LD_FIELDOFFSETSD[20 * v30 + 932])(v9, a2, a3, a4, "    ", v30, *(void *)&LD_FIELDOFFSETSD[20 * v30 + 928], LD_FIELDOFFSETSD[20 * v30 + 924], v41);
              ++v30;
            }
            while (v46 > v30);
          }
          if (!LD_enquireChild((uint64_t)v9, a2, 4, v44, &v53))
          {
            for (unsigned __int16 i = v53; v53; a5 = v49)
            {
              HIWORD(v55) = i;
              a3(a4, "    <SI_LAYER>\n");
              uint64_t v32 = LD_FIELDOFFSETSD;
              uint64_t v33 = (uint64_t)v9;
              if (v45)
              {
                int v34 = a5;
                int v35 = 0;
                do
                {
                  __int16 v36 = v32;
                  HIDWORD(v41) = v34;
                  LOWORD(v41) = i;
                  (*(void (**)(uint64_t, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, void, void, void, uint64_t))&v32[20 * v35 + 1836])(v33, a2, a3, a4, "      ", v35, *(void *)&v32[20 * v35 + 1832], v32[20 * v35 + 1828], v41);
                  uint64_t v32 = v36;
                  ++v35;
                }
                while (v45 > v35);
              }
              if (!LD_enquireChild(v33, a2, 5, i, (_WORD *)&v55 + 1))
              {
                for (__int16 j = HIWORD(v55); HIWORD(v55); __int16 j = HIWORD(v55))
                {
                  a3(a4, "      <SI_W_TOKEN>\n");
                  unsigned int v38 = LD_FIELDOFFSETSD;
                  if (v47)
                  {
                    int v39 = 0;
                    do
                    {
                      __int16 v40 = v38;
                      HIDWORD(v41) = v49;
                      LOWORD(v41) = j;
                      (*(void (**)(uint64_t, uint64_t, void (*)(uint64_t, const char *), uint64_t, const char *, void, void, void, uint64_t))&v38[20 * v39 + 2288])(v48, a2, a3, a4, "        ", v39, *(void *)&v38[20 * v39 + 2284], v38[20 * v39 + 2280], v41);
                      unsigned int v38 = v40;
                      ++v39;
                    }
                    while (v47 > v39);
                  }
                  a3(a4, "      </SI_W_TOKEN>\n");
                  LD_findNextCommonParent(v48, a2, HIWORD(v55), (_WORD *)&v55 + 1);
                }
              }
              a3(a4, "    </SI_LAYER>\n");
              int v9 = (uint64_t *)v48;
              LD_findNextCommonParent(v48, a2, v53, &v53);
              unsigned __int16 i = v53;
            }
          }
          a3(a4, " </WordRecord>\n");
          LD_nextInSent((uint64_t)v9, a2, v51, &v51);
          unsigned __int16 v20 = v51;
        }
        while (v51);
      }
      return ((uint64_t (*)(uint64_t, const char *))a3)(a4, "</SentenceRecord>\n");
    }
  }
  return result;
}

uint64_t LD_printLH_U8String(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9, int a10)
{
  return loc_printLH_U8String(a1, a2, a3, a4, a5, a6, a7, a9, a10, 0);
}

uint64_t loc_printLH_U8String(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, int a9, int a10)
{
  uint64_t v27 = 0;
  unsigned int v25 = 0;
  int v26 = 0;
  uint64_t result = LD_enquireField(a1, a2, a8, a6, (_WORD *)&v26 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v26) == 1)
  {
    LD_readDirectField(a1, a2, a8, a6, &v27, (unsigned __int16 *)&v26);
    unsigned __int16 v19 = v26;
    if ((_WORD)v26)
    {
      while (!v27[v19 - 1])
      {
        LOWORD(v26) = --v19;
        if (!v19)
        {
          unsigned __int16 v19 = 0;
          break;
        }
      }
    }
    if (a10)
    {
      unsigned int v20 = (unsigned __int16)Utf8_DepesLengthInBytesUtf8(v27, v19);
      uint64_t result = heap_Alloc(*(void *)(*(void *)a1 + 8), v20 + 1);
      if (!result) {
        return result;
      }
      BOOL v21 = (unsigned __int8 *)result;
      utf8_DepesToUtf8((uint64_t)v27, (unsigned __int16)v26, 0, result, v20, &v25, 0);
      unsigned __int16 v19 = v25;
      v21[v25] = 0;
      LOWORD(v26) = v19;
      uint64_t v27 = v21;
    }
    else
    {
      BOOL v21 = 0;
    }
    if (a9 && (uint64_t v22 = xmlaux_calculateExtraEscapeBytes((uint64_t)v27, v19)) != 0)
    {
      uint64_t v23 = v22;
      uint64_t result = heap_Alloc(*(void *)(*(void *)a1 + 8), v22 + (unsigned __int16)v26 + 1);
      if (!result)
      {
LABEL_18:
        if (v21) {
          return (uint64_t)heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v21);
        }
        return result;
      }
      size_t v24 = (unsigned __int8 *)result;
      xmlaux_escape((char *)result, (uint64_t)v27, (unsigned __int16)v26);
      v24[v23 + (unsigned __int16)v26] = 0;
      uint64_t v27 = v24;
    }
    else
    {
      size_t v24 = 0;
    }
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, (const char *)v27);
    a3(a4, " </");
    a3(a4, a7);
    uint64_t result = ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
    if (v24) {
      uint64_t result = (uint64_t)heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v24);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t LD_printDummy(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, uint64_t a6, const char *a7)
{
  a3(a4, a5);
  a3(a4, "<");
  a3(a4, a7);
  a3(a4, "> ");
  a3(a4, "UNDEFINED");
  a3(a4, " </");
  a3(a4, a7);

  return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
}

uint64_t LD_printTokenType(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  int v19 = 0;
  int v20 = 0;
  int v18 = 0;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v19 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v19) == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, &v20, &v19);
    LD_getTokenType(a1, a2, (unsigned __int16)v20, &v18);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printWordType(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  int v19 = 0;
  int v20 = 0;
  int v18 = 0;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v19 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v19) == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, &v20, &v19);
    LD_getWordType(a1, a2, (unsigned __int16)v20, &v18);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printLH_BOOL(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  int v19 = 0;
  int v20 = 0;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v19 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v19) == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, &v20, &v19);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    if (v20) {
      int v18 = "true";
    }
    else {
      int v18 = "false";
    }
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printLH_U16(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, unsigned int a8, unsigned __int16 a9)
{
  int v20 = 0;
  __int16 v19 = 0;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, &v20);
  if ((result & 0x80000000) == 0 && (unsigned __int16)v20 == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, (char *)&v20 + 2, &v19);
    LH_utoa(HIWORD(v20), v18, 0xAu);
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, v18);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printLH_U8(uint64_t a1, int a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, unsigned __int16 a9)
{
  unsigned __int8 v21 = 0;
  __int16 v20 = 0;
  __int16 v19 = 0;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, &v20);
  if ((result & 0x80000000) == 0 && v20 == 1)
  {
    LD_readField(a1, a2, a9, a6, a8, &v21, &v19);
    LH_utoa(v21, v18, 0xAu);
    a3(a4, a5);
    a3(a4, (uint64_t)"<");
    a3(a4, a7);
    a3(a4, (uint64_t)"> ");
    a3(a4, (uint64_t)v18);
    a3(a4, (uint64_t)" </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printLH_U32Array(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v18 = 0;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v18 + 1);
  if ((result & 0x80000000) == 0 && HIWORD(v18) == 1)
  {
    LD_readField(a1, a2, a9, a6, 0x400u, v21, &v18);
    __s1[0] = 0;
    if ((_WORD)v18)
    {
      unint64_t v17 = 0;
      do
      {
        LH_utoa(v21[v17], __s2, 0xAu);
        cstdlib_strcat(__s1, __s2);
        cstdlib_strcat(__s1, " ");
        ++v17;
      }
      while (v17 < (unsigned __int16)v18);
    }
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, __s1);
    a3(a4, "</");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t LD_printPHON(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9, int a10)
{
  return loc_printLH_U8String(a1, a2, a3, a4, a5, a6, a7, a9, a10, *(_DWORD *)(a1 + 76));
}

uint64_t LD_printLH_U8StringToUtf8(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9, int a10)
{
  return loc_printLH_U8String(a1, a2, a3, a4, a5, a6, a7, a9, a10, 1);
}

uint64_t LD_printLH_U16String(uint64_t a1, int a2, void (*a3)(uint64_t, const char *), uint64_t a4, const char *a5, unsigned int a6, const char *a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  __int16 v20 = 0;
  unsigned __int16 v19 = 0;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, &v20);
  if ((result & 0x80000000) == 0 && v20 == 1)
  {
    LD_readField(a1, a2, a9, a6, 0x20u, v21, &v19);
    __s1[0] = 0;
    if (v19)
    {
      for (unint64_t i = 0; i < v19; ++i)
      {
        LH_itoa((unsigned __int16)v21[i], __s2, 0xAu);
        cstdlib_strcat(__s1, __s2);
        cstdlib_strcat(__s1, " ");
      }
    }
    a3(a4, a5);
    a3(a4, "<");
    a3(a4, a7);
    a3(a4, "> ");
    a3(a4, __s1);
    a3(a4, " </");
    a3(a4, a7);
    return ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
  }
  return result;
}

uint64_t CB_appendString(void *a1, char *__s)
{
  size_t v4 = cstdlib_strlen(__s);
  uint64_t v5 = (const char *)a1[1];
  if (v5)
  {
    size_t v6 = a1[2];
    size_t v7 = cstdlib_strlen(v5);
    unsigned int v8 = (char *)a1[1];
    if (v6 > v7 + v4)
    {
LABEL_9:
      cstdlib_strcat(v8, __s);
      return 0;
    }
    uint64_t v9 = v4 + a1[2] + 50;
    a1[2] = v9;
    if (v8)
    {
      uint64_t v10 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v8, v9);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v9 = v4 + a1[2] + 50;
    a1[2] = v9;
  }
  uint64_t v10 = heap_Calloc(*(void **)(*a1 + 8), 1, v9);
LABEL_7:
  unsigned int v8 = (char *)v10;
  if (v10)
  {
    a1[1] = v10;
    goto LABEL_9;
  }
  return 10;
}

uint64_t LD_printMarkerT(uint64_t a1, int a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, unsigned int a10)
{
  int v39 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t __b = 0;
  char __s = 0;
  cstdlib_memset(&__b, 0, 0x18uLL);
  uint64_t __b = *(void *)a1;
  uint64_t result = LD_enquireField(a1, a2, a9, a6, (_WORD *)&v39 + 1);
  unint64_t v17 = 0;
  if ((result & 0x80000000) == 0 && HIWORD(v39) == 1)
  {
    uint64_t v31 = a1;
    LD_readDirectField(a1, a2, a9, a6, &v38, (unsigned __int16 *)&v39);
    uint64_t v18 = a5;
    a3(a4, a5);
    a3(a4, (uint64_t)"<");
    uint64_t v30 = a7;
    a3(a4, a7);
    a3(a4, (uint64_t)">\n");
    if ((_WORD)v39)
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v21 = a10;
      uint64_t v22 = "  <MARKER> ";
      while (1)
      {
        a3(a4, v18);
        a3(a4, (uint64_t)v22);
        if (__s) {
          char *__s = 0;
        }
        marker_serialize_tostring((void (*)(uint64_t, char *))CB_appendString, (uint64_t)&__b, v38 + v19, 0);
        uint64_t v23 = __s;
        if (v21)
        {
          size_t v24 = cstdlib_strlen(__s);
          uint64_t v25 = xmlaux_calculateExtraEscapeBytes((uint64_t)v23, v24);
          if (v25)
          {
            int v26 = v22;
            uint64_t v27 = v21;
            size_t v28 = v25 + v24;
            if (v33 <= v25 + v24)
            {
              if (v34) {
                heap_Free(*(void **)(*(void *)v31 + 8), v34);
              }
              unint64_t v33 = 2 * v28;
              uint64_t result = heap_Alloc(*(void *)(*(void *)v31 + 8), (2 * v28) & 0xFFFFFFFE);
              unint64_t v17 = (char *)result;
              if (!result)
              {
                a1 = v31;
                goto LABEL_23;
              }
              uint64_t v18 = a5;
            }
            else
            {
              unint64_t v17 = (char *)v34;
            }
            xmlaux_escape(v17, (uint64_t)v23, v24 + 1);
            uint64_t v34 = (uint64_t)v17;
            uint64_t v23 = v17;
            uint64_t v21 = v27;
            uint64_t v22 = v26;
          }
        }
        if (v23) {
          uint64_t v29 = v23;
        }
        else {
          uint64_t v29 = "";
        }
        a3(a4, (uint64_t)v29);
        a3(a4, (uint64_t)" </MARKER>\n");
        ++v20;
        v19 += 32;
        if (v20 >= (unsigned __int16)v39) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v34 = 0;
LABEL_22:
    a3(a4, v18);
    a3(a4, (uint64_t)"</");
    a3(a4, v30);
    uint64_t result = ((uint64_t (*)(uint64_t, const char *))a3)(a4, ">\n");
    a1 = v31;
    unint64_t v17 = (char *)v34;
  }
LABEL_23:
  if (__s) {
    uint64_t result = (uint64_t)heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)__s);
  }
  if (v17) {
    return (uint64_t)heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v17);
  }
  return result;
}

uint64_t LD_logOutputCB(uint64_t a1, const char *a2)
{
  size_t v4 = (char *)(a1 + 80);
  size_t v5 = cstdlib_strlen((const char *)(a1 + 80));
  if (cstdlib_strlen(a2) + v5 >= 0x800)
  {
    uint64_t result = log_OutText(*(void *)a1, a1 + 8, *(unsigned int *)(a1 + 76), 0, (uint64_t)"%s", v6, v7, v8, (uint64_t)v4);
    if (!result) {
      uint64_t result = log_OutText(*(void *)a1, a1 + 8, *(unsigned int *)(a1 + 76), 0, (uint64_t)"%s", v10, v11, v12, (uint64_t)a2);
    }
    goto LABEL_6;
  }
  cstdlib_strcat(v4, a2);
  if (*(unsigned char *)(cstdlib_strlen(v4) + a1 + 79) == 10)
  {
    *(unsigned char *)(cstdlib_strlen(v4) + a1 + 79) = 0;
    uint64_t result = log_OutText(*(void *)a1, a1 + 8, *(unsigned int *)(a1 + 76), 0, (uint64_t)"%s", v13, v14, v15, (uint64_t)v4);
LABEL_6:
    *size_t v4 = 0;
    return result;
  }
  return 0;
}

void *LD_HeapInit(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t result = cstdlib_memset(a1, 0, 0x28uLL);
  *a1 = a2;
  a1[1] = a3;
  *((_DWORD *)a1 + 6) = a4;
  *((_DWORD *)a1 + 7) = a5;
  return result;
}

uint64_t LD_HeapAlloc(uint64_t a1, int a2)
{
  size_t v4 = (void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v5 = (a2 + 7) & 0xFFFFFFF8;
  if (v3)
  {
    while (1)
    {
      uint64_t v6 = v3;
      uint64_t result = v3[2];
      if ((unint64_t)(result + v5) <= v3[3]) {
        goto LABEL_16;
      }
      uint64_t v3 = (void *)*v3;
      if (!*v6) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  if (*(_DWORD *)(a1 + 32) || (unsigned int v8 = *(_DWORD *)(a1 + 24), v8 <= v5))
  {
    if (*(_DWORD *)(a1 + 28) <= v5) {
      unsigned int v8 = (a2 + 7) & 0xFFFFFFF8;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 28);
    }
  }
  uint64_t result = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v8 + 32);
  if (result)
  {
    uint64_t v9 = (void *)result;
    result += 32;
    v9[2] = result;
    v9[3] = result + v8;
    *uint64_t v9 = 0;
    v9[1] = result;
    *(_DWORD *)(a1 + 32) += v8;
    if (v6) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v4;
    }
    *uint64_t v10 = v9;
    uint64_t v6 = v9;
LABEL_16:
    *(_DWORD *)(a1 + 36) += v5;
    v6[2] = result + v5;
  }
  return result;
}

uint64_t *LD_HeapResetPool(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    unsigned int v8 = result;
    if (*result)
    {
      uint64_t result = LD_HeapLogStats(result, (uint64_t)"before ResetPool", a3, a4, a5, a6, a7, a8);
      for (uint64_t i = v8[2]; i; uint64_t i = *(void *)i)
      {
        uint64_t v10 = *(void **)(i + 8);
        *(void *)(i + 16) = v10;
        uint64_t result = (uint64_t *)cstdlib_memset(v10, 0, (*(_DWORD *)(i + 24) - v10));
      }
      *((_DWORD *)v8 + 9) = 0;
    }
  }
  return result;
}

uint64_t *LD_HeapLogStats(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result && *result)
  {
    unsigned int v8 = result + 2;
    int v9 = -1;
    do
    {
      unsigned int v8 = (void *)*v8;
      ++v9;
    }
    while (v8);
    return (uint64_t *)log_OutText(*(void *)(*result + 32), (uint64_t)"LINGDB", 5, 0, (uint64_t)"LD_Heap %s %s: alloc=%lu pool=%lu initial=%lu grow=%lu blocks=%lu", a6, a7, a8, result[1]);
  }
  return result;
}

uint64_t *LD_HeapFreePool(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    unsigned int v8 = result;
    if (*result)
    {
      uint64_t result = LD_HeapLogStats(result, (uint64_t)"before FreePool", a3, a4, a5, a6, a7, a8);
      int v9 = (void *)v8[2];
      if (v9)
      {
        do
        {
          uint64_t v10 = (void *)*v9;
          uint64_t result = heap_Free(*(void **)(*v8 + 8), (uint64_t)v9);
          int v9 = v10;
        }
        while (v10);
      }
      v8[2] = 0;
      v8[4] = 0;
    }
  }
  return result;
}

uint64_t LD_loadXML()
{
  return 2300583937;
}

unint64_t fix16_exp(uint64_t a1)
{
  if (!a1) {
    return 0x10000;
  }
  if (a1 == 0x10000) {
    return 178145;
  }
  if ((int)a1 > 681391) {
    return 0x7FFFFFFFLL;
  }
  if ((int)a1 < -726817) {
    return 0;
  }
  unint64_t v3 = int64_from_int32(0x10000);
  unint64_t v4 = int64_from_int32(a1);
  unint64_t v5 = int64_add(v3, v4);
  unint64_t v6 = int64_from_int32(a1);
  int v7 = 2;
  for (int i = 3; i != 13; ++i)
  {
    uint64_t v9 = int64_mul_i64_i32(v6, a1);
    unint64_t v6 = int64_shift(v9, -16);
    unint64_t v10 = int64_div_i64_i32(v6, v7);
    unint64_t v11 = int64_add(v5, v10);
    unint64_t v5 = v11;
    v7 *= i;
  }

  return int64_lo(v11);
}

unint64_t fix16_exp_cache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0x10000;
  }
  if (a1 == 0x10000) {
    return 178145;
  }
  if ((int)a1 > 681391) {
    return 0x7FFFFFFFLL;
  }
  if ((int)a1 < -726817) {
    return 0;
  }
  uint64_t v7 = ((unsigned __int16)a1 ^ (unsigned __int16)(a1 >> 4)) & 0xFFF;
  if (*(_DWORD *)(a2 + 4 * v7) == a1) {
    return *(unsigned int *)(a3 + 4 * v7);
  }
  unint64_t v8 = int64_from_int32(0x10000);
  unint64_t v9 = int64_from_int32(a1);
  unint64_t v10 = int64_add(v8, v9);
  unint64_t v11 = int64_from_int32(a1);
  int v12 = 2;
  for (int i = 3; i != 13; ++i)
  {
    uint64_t v14 = int64_mul_i64_i32(v11, a1);
    unint64_t v11 = int64_shift(v14, -16);
    unint64_t v15 = int64_div_i64_i32(v11, v12);
    unint64_t v16 = int64_add(v10, v15);
    unint64_t v10 = v16;
    v12 *= i;
  }
  *(_DWORD *)(a2 + 4 * v7) = a1;
  *(_DWORD *)(a3 + 4 * v7) = int64_lo(v16);

  return int64_lo(v10);
}

unint64_t int64_const(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

unint64_t int64_from_int32(uint64_t a1)
{
  return ((int)a1 >> 31) | (unint64_t)(a1 << 32);
}

unint64_t int64_lo(unint64_t a1)
{
  return HIDWORD(a1);
}

BOOL int64_cmp_eq(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL int64_cmp_ne(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

uint64_t int64_cmp_gt(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == a2 && HIDWORD(a1) > HIDWORD(a2);
  return (int)a1 > (int)a2 || v3;
}

uint64_t int64_cmp_ge(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == a2 && HIDWORD(a1) >= HIDWORD(a2);
  return (int)a1 > (int)a2 || v3;
}

uint64_t int64_cmp_lt(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == a2 && HIDWORD(a1) < HIDWORD(a2);
  return (int)a1 < (int)a2 || v3;
}

uint64_t int64_cmp_le(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == a2 && HIDWORD(a1) <= HIDWORD(a2);
  return (int)a1 < (int)a2 || v3;
}

unint64_t int64_add(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __CFADD__(HIDWORD(a2), HIDWORD(a1)) || (int)a1 < 0;
  return (a2 + a1 + v2) | ((unint64_t)(HIDWORD(a2) + HIDWORD(a1)) << 32);
}

unint64_t int64_neg(unint64_t a1)
{
  unsigned int v1 = ~a1;
  if (!HIDWORD(a1)) {
    unsigned int v1 = -(int)a1;
  }
  return v1 - (a1 & 0xFFFFFFFF00000000);
}

unint64_t int64_sub(uint64_t a1, unint64_t a2)
{
  int v2 = -(int)a2;
  unint64_t v3 = (unint64_t)-(uint64_t)(a2 & 0xFFFFFFFF00000000) >> 32;
  if (HIDWORD(a2)) {
    int v2 = ~a2;
  }
  int v4 = v2 + a1;
  BOOL v5 = __CFADD__(v3, HIDWORD(a1));
  uint64_t v6 = (v3 + HIDWORD(a1));
  BOOL v7 = v5 || (int)a1 < 0;
  return (v4 + v7) | (unint64_t)(v6 << 32);
}

uint64_t int64_shift(uint64_t a1, int a2)
{
  int v2 = (char)-(char)a2;
  BOOL v3 = v2 <= 31;
  unsigned int v4 = (a1 << a2) | (HIDWORD(a1) >> v2);
  LODWORD(v5) = (int)a1 >> v2;
  if (!v3)
  {
    unsigned int v4 = 0;
    LODWORD(v5) = 0;
  }
  unsigned int v6 = (HIDWORD(a1) >> -(char)a2) | (a1 << a2);
  LODWORD(v7) = HIDWORD(a1) << a2;
  if (a2 > 0x1F)
  {
    LODWORD(v7) = 0;
    unsigned int v6 = 0;
  }
  if (a2 >= 1) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = v4;
  }
  if (a2 >= 1) {
    uint64_t v5 = v6;
  }
  else {
    uint64_t v5 = v5;
  }
  return v5 | (v7 << 32);
}

unint64_t int64_mul_i32_i32(int a1, int a2)
{
  int v2 = (a2 >> 16) * (unsigned __int16)a1 + (unsigned __int16)a2 * (a1 >> 16);
  return ((a2 >> 16) * (a1 >> 16) + (v2 >> 16)) | ((unint64_t)((unsigned __int16)a2
                                                                                  * (unsigned __int16)a1
                                                                                  + (v2 << 16)) << 32);
}

uint64_t int64_mul_i64_i32(unint64_t a1, int a2)
{
  int v2 = a1 ^ a2;
  int v3 = -(int)a1;
  if (HIDWORD(a1)) {
    int v3 = ~a1;
  }
  if ((a1 & 0x80000000) != 0)
  {
    unint64_t v4 = -(uint64_t)(a1 & 0xFFFFFFFF00000000);
  }
  else
  {
    int v3 = a1;
    unint64_t v4 = a1;
  }
  if (a2 >= 0) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = -a2;
  }
  int v6 = (v3 >> 16) * HIWORD(v5);
  unsigned int v7 = (v3 >> 16) * (unsigned __int16)v5 + (unsigned __int16)v3 * HIWORD(v5);
  int v8 = (unsigned __int16)v3 * (unsigned __int16)v5 + HIWORD(v5) * HIWORD(v4);
  unsigned int v9 = v6 + (v7 << 16);
  unsigned int v10 = 65537 * v8 + HIWORD(v7);
  unsigned int v11 = -v10;
  if (v9) {
    unsigned int v11 = ~v10;
  }
  BOOL v12 = v2 >= 0;
  if (v2 < 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v10;
  }
  if (v12) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = -v9;
  }
  return v13 | (v14 << 32);
}

unint64_t int64_div_i64_i32(unint64_t a1, int a2)
{
  int v2 = a1 ^ a2;
  int v3 = -(int)a1;
  if (HIDWORD(a1)) {
    int v3 = ~a1;
  }
  if ((a1 & 0x80000000) != 0)
  {
    unint64_t v4 = -(uint64_t)(a1 & 0xFFFFFFFF00000000);
  }
  else
  {
    int v3 = a1;
    unint64_t v4 = a1;
  }
  unint64_t v5 = HIDWORD(v4);
  if (a2 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = -a2;
  }
  int v7 = v3 / (int)v6;
  int v8 = v3 % (int)v6;
  unsigned int v9 = v5 / v6;
  unsigned int v10 = v5 % v6;
  unint64_t v11 = v6 << 32;
  unint64_t v12 = 0x100000000;
  while (v8 > (int)v11 || v8 == v11 && v10 > HIDWORD(v11))
  {
    unint64_t v11 = (__PAIR64__(v11, HIDWORD(v11)) >> 31) | (HIDWORD(v11) << 33);
    unint64_t v12 = (__PAIR64__(v12, HIDWORD(v12)) >> 31) | (HIDWORD(v12) << 33);
  }
  for (; v8; unint64_t v12 = v16 | (v17 << 32))
  {
    unsigned int v13 = (v11 >> 33) | (v11 << 31);
    int v14 = (int)v11 >> 1;
    BOOL v15 = v8 <= (int)v11 >> 1;
    unint64_t v11 = ((int)v11 >> 1) | ((unint64_t)v13 << 32);
    uint64_t v16 = ((int)v12 >> 1);
    uint64_t v17 = (v12 >> 33) | (v12 << 31);
    if (!v15 || v8 == v14 && v10 >= v13)
    {
      int v18 = -(int)v11;
      int v19 = -v13;
      if (HIDWORD(v11)) {
        int v18 = ~v11;
      }
      int v20 = v18 + v8;
      BOOL v21 = v8 < 0;
      BOOL v22 = __CFADD__(v10, v19);
      v10 += v19;
      if (v22) {
        BOOL v21 = 1;
      }
      int v8 = v20 + v21;
      int v23 = v7 + v16;
      BOOL v24 = v7 < 0;
      BOOL v22 = __CFADD__(v17, v9);
      v9 += v17;
      if (v22) {
        BOOL v24 = 1;
      }
      int v7 = v23 + v24;
    }
  }
  int v25 = (int)v10 / (int)v6;
  int v26 = (v25 >> 31) + v7;
  BOOL v27 = v7 < 0;
  BOOL v22 = __CFADD__(v25, v9);
  uint64_t v28 = v25 + v9;
  int v29 = v22 || v27;
  unsigned int v30 = v26 + v29;
  uint64_t v31 = v28 << 32;
  unint64_t v32 = v31 & 0xFFFFFFFF00000000 | v30;
  int v33 = ~v30;
  unsigned int v34 = -v30;
  if (HIDWORD(v32)) {
    unsigned int v34 = v33;
  }
  uint64_t v35 = v34 - v31;
  if (v2 < 0) {
    return v35;
  }
  else {
    return v32;
  }
}

uint64_t uint32_log2(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = WORD1(result);
    if (!WORD1(result)) {
      unsigned int v1 = result;
    }
    if (v1 <= 0xFF)
    {
      unsigned int v2 = 16 * (WORD1(result) != 0);
    }
    else
    {
      v1 >>= 8;
      unsigned int v2 = (16 * (WORD1(result) != 0)) | 8;
    }
    if (v1 > 0xF)
    {
      v1 >>= 4;
      v2 |= 4u;
    }
    if (v1 > 3)
    {
      v1 >>= 2;
      v2 |= 2u;
    }
    if (v1 <= 1) {
      return v2;
    }
    else {
      return v2 + 1;
    }
  }
  return result;
}

uint64_t fix16_add(int a1, int a2)
{
  if (((a2 + a1) ^ a1) > -1 || (a2 ^ a1) < 0) {
    return (a2 + a1);
  }
  else {
    return 0x80000000;
  }
}

uint64_t fix16_sub(int a1, int a2)
{
  if ((((a1 - a2) ^ a1) & (a2 ^ a1)) < 0 != v2) {
    return 0x80000000;
  }
  else {
    return (a1 - a2);
  }
}

uint64_t fix16_sadd(int a1, int a2)
{
  unsigned int v2 = a2 + a1;
  if (((a2 + a1) ^ a1) <= -1 && (a2 ^ a1) >= 0) {
    unsigned int v2 = 0x80000000;
  }
  if (a1 > 0) {
    unsigned int v4 = 0x7FFFFFFF;
  }
  else {
    unsigned int v4 = 0x80000000;
  }
  if (v2 == 0x80000000) {
    return v4;
  }
  else {
    return v2;
  }
}

uint64_t fix16_ssub(int a1, int a2)
{
  unsigned int v3 = a1 - a2;
  if ((((a1 - a2) ^ a1) & (a2 ^ a1)) < 0 != v2) {
    unsigned int v3 = 0x80000000;
  }
  if (a1 > 0) {
    unsigned int v4 = 0x7FFFFFFF;
  }
  else {
    unsigned int v4 = 0x80000000;
  }
  if (v3 == 0x80000000) {
    return v4;
  }
  else {
    return v3;
  }
}

uint64_t fix16_mul(int a1, int a2)
{
  int v2 = (a2 >> 16) * (unsigned __int16)a1 + (unsigned __int16)a2 * (a1 >> 16);
  unint64_t v3 = __PAIR64__((a2 >> 16) * (a1 >> 16), (unsigned __int16)a2 * (unsigned __int16)a1)
     + __PAIR64__(v2 >> 16, v2 << 16);
  unsigned int v4 = (__PAIR64__((a2 >> 16) * (a1 >> 16), (unsigned __int16)a2 * (unsigned __int16)a1)
      + __PAIR64__(v2 >> 16, v2 << 16)) >> 16;
  if (SHIDWORD(v3) >> 31 == SHIDWORD(v3) >> 15) {
    return v4;
  }
  else {
    return 0x80000000;
  }
}

uint64_t fix16_smul(int a1, int a2)
{
  int v2 = (a2 >> 16) * (unsigned __int16)a1 + (unsigned __int16)a2 * (a1 >> 16);
  int v3 = (__PAIR64__((a2 >> 16) * (a1 >> 16), (unsigned __int16)a2 * (unsigned __int16)a1)
      + __PAIR64__(v2 >> 16, v2 << 16)) >> 32;
  unsigned int v4 = (__PAIR64__((a2 >> 16) * (a1 >> 16), (unsigned __int16)a2 * (unsigned __int16)a1)
      + __PAIR64__(v2 >> 16, v2 << 16)) >> 16;
  if (v3 >> 31 != v3 >> 15) {
    unsigned int v4 = 0x80000000;
  }
  if (v4 == 0x80000000) {
    return ((a2 ^ a1) >> 31) ^ 0x7FFFFFFFu;
  }
  else {
    return v4;
  }
}

uint64_t fix16_div(int a1, int a2)
{
  if (!a2) {
    return 0x80000000;
  }
  if (a1 >= 0) {
    unsigned int v2 = a1;
  }
  else {
    unsigned int v2 = -a1;
  }
  if (a2 >= 0) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = -a2;
  }
  if (v3 >= 0x100000)
  {
    unsigned int v4 = v2 / ((v3 >> 17) + 1);
    v2 -= (v4 * v3) >> 17;
  }
  else
  {
    unsigned int v4 = 0;
  }
  if ((v3 & 0xF) != 0)
  {
    int v5 = 17;
  }
  else
  {
    unsigned int v6 = 17;
    do
    {
      char v7 = v3;
      v3 >>= 4;
      int v5 = v6 - 4;
      if ((v7 & 0xF0) != 0) {
        break;
      }
      BOOL v8 = v6 > 7;
      v6 -= 4;
    }
    while (v8);
  }
  while (v2 && (v5 & 0x80000000) == 0)
  {
    unsigned int v9 = v2 >> 28;
    if (v2 >> 28)
    {
      LOBYTE(v9) = 0;
      int v11 = v2;
      if ((v2 & 0x80000000) != 0) {
        goto LABEL_23;
      }
      do
      {
LABEL_22:
        LOBYTE(v9) = v9 + 1;
        v11 *= 2;
      }
      while ((v11 & 0x80000000) == 0);
      goto LABEL_23;
    }
    unsigned int v10 = v2;
    do
    {
      LOBYTE(v9) = v9 + 4;
      int v11 = 16 * v10;
      unsigned int v12 = HIBYTE(v10);
      v10 *= 16;
    }
    while (!v12);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_23:
    if (v5 >= v9) {
      unsigned int v9 = v9;
    }
    else {
      unsigned int v9 = v5;
    }
    unsigned int v13 = v2 << v9;
    unsigned int v14 = v5 - v9;
    v4 += (v13 / v3) << v14;
    unsigned int v15 = (v13 / v3) & ~(0xFFFFFFFF >> v14);
    unsigned int v2 = 2 * (v13 % v3);
    int v5 = v14 - 1;
    if (v15) {
      return 0x80000000;
    }
  }
  unsigned int v17 = v4 >> 1;
  if ((a2 ^ a1) >= 0) {
    return v17;
  }
  else {
    return -v17;
  }
}

uint64_t fix16_sdiv(int a1, int a2)
{
  LODWORD(result) = fix16_div(a1, a2);
  if (result == 0x80000000) {
    return ((a2 ^ a1) >> 31) ^ 0x7FFFFFFFu;
  }
  else {
    return result;
  }
}

uint64_t igtree_Init(_WORD *a1, int a2, uint64_t a3, char *__b)
{
  int v48 = 0;
  *(void *)unsigned int v47 = 0;
  int v46 = 0;
  char v45 = 0;
  *(_DWORD *)char __s1 = 0;
  uint64_t v43 = 0;
  cstdlib_memset(__b, 0, 0x640uLL);
  uint64_t inited = InitRsrcFunction(a1, a2, &v43);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  unsigned int v9 = ssftriff_reader_OpenChunk(a3, (__int32 *)__s1, (unsigned int *)&v48, v47);
  if ((v9 & 0x80000000) != 0)
  {
LABEL_56:
    if ((v9 & 0x1FFF) == 0xA) {
      return v9;
    }
    else {
      return 0;
    }
  }
  uint64_t v10 = 2380275722;
  while (cstdlib_strcmp(__s1, "DSTR"))
  {
    if (cstdlib_strcmp(__s1, "FEAT"))
    {
      if (cstdlib_strcmp(__s1, "TABL"))
      {
        if (cstdlib_strcmp(__s1, "APOS"))
        {
          if (cstdlib_strcmp(__s1, "FNAM"))
          {
            if (!cstdlib_strcmp(__s1, "PARA"))
            {
              uint64_t v11 = heap_Calloc(*(void **)(v43 + 8), (unint64_t)v48 >> 2, 16);
              *((void *)__b + 166) = v11;
              if (!v11) {
                return v10;
              }
              unsigned int v12 = v48;
              if (v48)
              {
                unsigned int v13 = 0;
                unsigned int v14 = 0;
                while (1)
                {
                  int v46 = 0;
                  ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v12, v14, 0, (unsigned int *)&v46);
                  unsigned int v15 = (unsigned char *)heap_Alloc(*(void *)(v43 + 8), v46);
                  *(void *)(*((void *)__b + 166) + 16 * v13) = v15;
                  if (!v15) {
                    return v10;
                  }
                  uint64_t inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v48, v14, v15, (unsigned int *)&v46);
                  if ((inited & 0x80000000) != 0) {
                    return inited;
                  }
                  unsigned int v16 = v46 + v14;
                  int v46 = 0;
                  ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v48, v16, 0, (unsigned int *)&v46);
                  unsigned int v17 = (unsigned char *)heap_Alloc(*(void *)(v43 + 8), v46);
                  *(void *)(*((void *)__b + 166) + 16 * v13 + 8) = v17;
                  if (!v17) {
                    return v10;
                  }
                  uint64_t inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v48, v16, v17, (unsigned int *)&v46);
                  if ((inited & 0x80000000) != 0) {
                    return inited;
                  }
                  ++v13;
                  unsigned int v14 = v46 + v16;
                  unsigned int v12 = v48;
                  if (v14 >= v48) {
                    goto LABEL_54;
                  }
                }
              }
              unsigned int v13 = 0;
LABEL_54:
              *((_DWORD *)__b + 334) = v13;
            }
          }
          else
          {
            uint64_t v37 = heap_Calloc(*(void **)(v43 + 8), (unint64_t)v48 >> 1, 8);
            *((void *)__b + 164) = v37;
            if (!v37) {
              return v10;
            }
            unsigned int v38 = v48;
            if (v48)
            {
              unsigned int v39 = 0;
              unsigned int v40 = 0;
              do
              {
                int v46 = 0;
                ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v38, v40, 0, (unsigned int *)&v46);
                *(void *)(*((void *)__b + 164) + 8 * v39) = heap_Alloc(*(void *)(v43 + 8), v46);
                uint64_t v41 = *(unsigned char **)(*((void *)__b + 164) + 8 * v39);
                if (!v41) {
                  return v10;
                }
                uint64_t inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v48, v40, v41, (unsigned int *)&v46);
                if ((inited & 0x80000000) != 0) {
                  return inited;
                }
                ++v39;
                v40 += v46;
                unsigned int v38 = v48;
              }
              while (v40 < v48);
            }
          }
        }
        else
        {
          int v46 = v48;
          __int16 v36 = (unsigned char *)heap_Alloc(*(void *)(v43 + 8), v48);
          *((void *)__b + 163) = v36;
          if (!v36) {
            return v10;
          }
          uint64_t inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v48, 0, v36, (unsigned int *)&v46);
          if ((inited & 0x80000000) != 0) {
            return inited;
          }
        }
      }
      else
      {
        uint64_t inited = ssftriff_reader_DetachChunkData(a3, (void **)__b, v47);
        if ((inited & 0x80001FFF) == 0x8000000A) {
          return inited;
        }
        __b[1296] = 0;
        if (v48 >= 2)
        {
          int v26 = 0;
          LODWORD(v27) = 0;
          unsigned int v28 = v48 >> 1;
          uint64_t v29 = *(void *)v47;
          uint64_t v30 = *(void *)v47 + 2;
          do
          {
            int v31 = *(unsigned __int16 *)(v29 + 2 * v27);
            if (v31 == 0xFFFF)
            {
              int v32 = 0;
              do
              {
                v32 += 0xFFFF;
                uint64_t v27 = (v27 + 1);
                int v31 = *(unsigned __int16 *)(v29 + 2 * v27);
              }
              while (v31 == 0xFFFF);
              uint64_t v33 = v27;
            }
            else
            {
              int v32 = 0;
              uint64_t v33 = v27;
            }
            uint64_t v34 = v30 + 2 * v33;
            char v35 = v26 + 1;
            *(void *)&__b[8 * v26 + 272] = v34;
            LODWORD(v27) = v27 + v32 + v31 + 1;
            ++v26;
          }
          while (v27 < v28);
          __b[1296] = v35;
        }
      }
    }
    else
    {
      unint64_t v23 = v48;
      if (v48)
      {
        unint64_t v24 = 0;
        uint64_t v25 = *(void *)v47;
        do
        {
          *(_WORD *)&__b[v24 + 16] = *(_WORD *)(v25 + v24);
          v24 += 2;
        }
        while (v24 < v23);
      }
    }
LABEL_44:
    ssftriff_reader_CloseChunk(a3);
    unsigned int v9 = ssftriff_reader_OpenChunk(a3, (__int32 *)__s1, (unsigned int *)&v48, v47);
    if ((v9 & 0x80000000) != 0) {
      goto LABEL_56;
    }
  }
  uint64_t v18 = heap_Calloc(*(void **)(v43 + 8), (unint64_t)v48 >> 1, 8);
  *((void *)__b + 1) = v18;
  if (!v18) {
    return v10;
  }
  unsigned int v19 = v48;
  if (!v48)
  {
    unsigned int v20 = 0;
LABEL_41:
    *((_DWORD *)__b + 330) = v20;
    goto LABEL_44;
  }
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  while (1)
  {
    int v46 = 0;
    ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v19, v21, 0, (unsigned int *)&v46);
    *(void *)(*((void *)__b + 1) + 8 * v20) = heap_Alloc(*(void *)(v43 + 8), v46);
    BOOL v22 = *(unsigned char **)(*((void *)__b + 1) + 8 * v20);
    if (!v22) {
      return v10;
    }
    uint64_t inited = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v47, v48, v21, v22, (unsigned int *)&v46);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    ++v20;
    v21 += v46;
    unsigned int v19 = v48;
    if (v21 >= v48) {
      goto LABEL_41;
    }
  }
}

uint64_t igtree_Process(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(__int16 **)(a1 + 272);
  __src = (unsigned __int16 *)v4;
  unint64_t v5 = *(unsigned __int8 *)(a1 + 1296);
  if (v5 < 2) {
    goto LABEL_42;
  }
  uint64_t v37 = a3;
  uint64_t v7 = 0;
  unsigned int v4 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  uint64_t v71 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  uint64_t v8 = (v5 - 1);
  unsigned int v9 = (void *)(a1 + 8);
  int v10 = 1;
  memset(__dst, 0, 512);
  do
  {
    if (v10 >= 1)
    {
      uint64_t v12 = v10;
      memcpy(__dst, &__src, 8 * v10);
      uint64_t v13 = 0;
      int v11 = 0;
      int v10 = 0;
      unsigned int v14 = (uint64_t *)(a1 + 8 * v7 + 280);
      while (1)
      {
        unsigned int v15 = (unsigned __int16 *)*((void *)__dst + v13);
        unsigned int v18 = *v15;
        unsigned int v16 = (__int16 *)(v15 + 1);
        uint64_t v17 = v18;
        if (v18) {
          break;
        }
LABEL_28:
        if (v4) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v11 == 0;
        }
        if (v34 && v13 == 0) {
          unsigned int v4 = v16;
        }
        if (++v13 == v12) {
          goto LABEL_37;
        }
      }
      unint64_t v19 = *((void *)__dst + v13) + 4 * v17;
      while (1)
      {
        uint64_t v20 = (unsigned __int16)*v16;
        if (v20 == 0xFFFF)
        {
          uint64_t v30 = *v14;
          int v31 = &(&__src)[v10];
          unsigned int v32 = (unsigned __int16)v16[1];
          while (v32 == 0xFFFF)
          {
            v30 += 131070;
            v19 += 2;
            unsigned int v32 = (unsigned __int16)v16[2];
            ++v16;
          }
        }
        else
        {
          unsigned int v21 = *(unsigned __int8 **)(a2 + 8 * *(unsigned __int16 *)(a1 + 2 * v7 + 16));
          BOOL v22 = *(unsigned __int8 **)(*v9 + 8 * v20);
          if (*v21 != *v22) {
            goto LABEL_25;
          }
          unint64_t v23 = v21 + 1;
          unint64_t v24 = v22 + 1;
          do
          {
            int v26 = *v23++;
            int v25 = v26;
            int v28 = *v24++;
            int v27 = v28;
          }
          while (v25 == v28 && v27 != 0);
          if (v25 != v27) {
            goto LABEL_25;
          }
          uint64_t v30 = *v14;
          int v31 = &(&__src)[v10];
          unsigned int v32 = (unsigned __int16)v16[1];
          while (v32 == 0xFFFF)
          {
            v30 += 131070;
            v19 += 2;
            unsigned int v32 = (unsigned __int16)v16[2];
            ++v16;
          }
          int v11 = 1;
        }
        *int v31 = (unsigned __int16 *)(v30 + 2 * v32);
        ++v10;
LABEL_25:
        ++v16;
        v19 -= 2;
        do
        {
          int v33 = *v16++;
          v19 += 2;
        }
        while (v33 == -1);
        if ((unint64_t)v16 >= v19) {
          goto LABEL_28;
        }
      }
    }
    int v10 = 0;
    int v11 = 0;
LABEL_37:
    if (!v11 && !v10 && v4)
    {
      a3 = v37;
      goto LABEL_44;
    }
    ++v7;
  }
  while (v7 != v8);
  unsigned int v4 = (__int16 *)__src;
  a3 = v37;
LABEL_42:
  unsigned int v9 = (void *)(a1 + 8);
LABEL_44:
  *a3 = *(void *)(*v9 + 8 * (unsigned __int16)*v4);
  return 0;
}

uint64_t igtree_Deinit(uint64_t a1, uint64_t a2)
{
  ssftriff_reader_ReleaseChunkData(*(void **)a2);
  if (*(_DWORD *)(a2 + 1320))
  {
    int v4 = 0;
    do
      heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(a2 + 8) + 8 * (unsigned __int16)v4++));
    while (*(_DWORD *)(a2 + 1320) > (unsigned __int16)v4);
  }
  heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 8));
  heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 1304));
  uint64_t v5 = *(void *)(a2 + 1312);
  if (v5)
  {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 1296);
    if (*(unsigned char *)(a2 + 1296))
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)(a2 + 1312) + 8 * v7);
        if (v8)
        {
          heap_Free(*(void **)(a1 + 8), v8);
          unsigned int v6 = *(unsigned __int8 *)(a2 + 1296);
        }
        ++v7;
      }
      while (v7 < v6);
      uint64_t v5 = *(void *)(a2 + 1312);
    }
    heap_Free(*(void **)(a1 + 8), v5);
  }
  uint64_t v9 = *(void *)(a2 + 1328);
  if (v9)
  {
    if (*(_DWORD *)(a2 + 1336))
    {
      int v10 = 0;
      do
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(a2 + 1328) + 16 * (unsigned __int16)v10));
        heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(a2 + 1328) + 16 * (unsigned __int16)v10++ + 8));
      }
      while (*(_DWORD *)(a2 + 1336) > (unsigned __int16)v10);
      uint64_t v9 = *(void *)(a2 + 1328);
    }
    heap_Free(*(void **)(a1 + 8), v9);
  }
  return 0;
}

uint64_t igtree_Init_ReadOnly_ReferenceCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, void *a5, int a6, uint64_t a7, const char *a8, __int16 a9, char a10)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  cstdlib_memset(&v21, 0, 0x30uLL);
  uint64_t result = InitRsrcFunction(a1, a2, &v26);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v25);
    if ((result & 0x80000000) == 0)
    {
      *(void *)&long long v21 = a1;
      *((void *)&v21 + 1) = a2;
      *(void *)&long long v22 = a3;
      *((void *)&v22 + 1) = a4;
      cstdlib_strcpy((char *)&v23, a8);
      DWORD2(v23) = a6;
      BYTE14(v23) = a10;
      WORD6(v23) = a9;
      ObjcForThisApint i = getObjcForThisApi(v26, v25);
      uint64_t result = objc_GetAddRefCountedObject(ObjcForThisApi, a7, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))igtree_ObjcLoad, (void (*)(void, void, _OWORD *))igtree_ObjcClose, (uint64_t)&v21, &v24);
      if ((result & 0x80000000) != 0) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *(void *)(v24 + 32);
      }
      *a5 = v20;
    }
  }
  return result;
}

uint64_t igtree_ObjcLoad(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  long long v66 = 0;
  uint64_t v67 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  memset(__dst, 0, sizeof(__dst));
  uint64_t inited = InitRsrcFunction(a1, a2, &v66);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)(a5 + 16), *(void *)(a5 + 24), &v67);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  cstdlib_memcpy(__dst, v66, 0x1A0uLL);
  long long v42 = *(_OWORD *)(v67 + 32);
  uint64_t v11 = *(unsigned int *)(a5 + 40);
  int v12 = *(unsigned __int16 *)(a5 + 44) | (*(unsigned __int8 *)(a5 + 46) << 16);
  long long v68 = 0;
  uint64_t v13 = ssftriff_reader_ObjOpen(a1, a2, v11, a3, (char *)(a5 + 32), v12, (uint64_t *)&v68);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v32 = v13;
    log_OutText(v42, (uint64_t)"IGTREE", 3, 0, (uint64_t)"failed to read IGtree %s data - going on without", v14, v15, v16, (uint64_t)a3);
  }
  else
  {
    uint64_t v17 = (char *)heap_Calloc(*((void **)&__dst[0] + 1), 1, 1600);
    *(void *)(a4 + 32) = v17;
    if (v17)
    {
      uint64_t v21 = igtree_Init(a1, a2, (uint64_t)v68, v17);
      if ((v21 & 0x80000000) != 0)
      {
        uint64_t v32 = v21;
        uint64_t v33 = v42;
        BOOL v34 = "error initializing IGtree  %s - going on without";
        goto LABEL_12;
      }
      cstdlib_strcpy((char *)(*(void *)(a4 + 32) + 1340), a3);
      uint64_t v32 = ssftriff_reader_ObjClose(v68, v25, v26, v27, v28, v29, v30, v31);
      if ((v32 & 0x80000000) != 0)
      {
        uint64_t v33 = v42;
        BOOL v34 = "cannot complete reading IGtree  %s - going on without";
LABEL_12:
        log_OutText(v33, (uint64_t)"IGTREE", 0, 0, (uint64_t)v34, v22, v23, v24, (uint64_t)a3);
      }
    }
    else
    {
      log_OutText(v42, (uint64_t)"IGTREE", 0, 0, (uint64_t)"no memory for IGtree  %s", v18, v19, v20, (uint64_t)a3);
      log_OutPublic(v42, (uint64_t)"IGTREE", 37000, 0, v35, v36, v37, v38, v40);
      return 2380275722;
    }
  }
  return v32;
}

uint64_t igtree_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a3 + 32);
    if (v5)
    {
      uint64_t v6 = v7;
      igtree_Deinit(v7, v5);
      heap_Free(*(void **)(v6 + 8), v5);
    }
    return 0;
  }
  return result;
}

uint64_t igtree_Deinit_ReadOnly_DereferenceCnt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjcForThisApint i = getObjcForThisApi(a1, a2);

  return objc_ReleaseObject(ObjcForThisApi, a3 + 1340);
}

uint64_t posparser_ExtractPunctuation(void *a1, char *__s, char **a3, size_t *a4, unsigned char **a5, size_t *a6)
{
  size_t v12 = cstdlib_strlen(__s);
  size_t v13 = v12;
  unsigned int v31 = 0;
  if (*a3)
  {
    **a3 = 0;
    uint64_t v14 = *a3;
  }
  else
  {
    uint64_t v14 = 0;
  }
  *a4 = 0;
  if (*a5)
  {
    **a5 = 0;
    uint64_t v15 = *a5;
  }
  else
  {
    uint64_t v15 = 0;
  }
  *a6 = 0;
  if (!v12) {
    goto LABEL_21;
  }
  uint64_t v30 = (uint64_t)v15;
  uint64_t v16 = a6;
  size_t v17 = 0;
  do
  {
    if (!(*(unsigned int (**)(void, void, char *))(a1[3] + 128))(a1[1], a1[2], &__s[v17])) {
      break;
    }
    v17 += utf8_determineUTF8CharLength(__s[v17]);
  }
  while (v17 < v13);
  if (v17)
  {
    *a4 = v17;
    uint64_t v18 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v14, v17 + 1);
    if (!v18) {
      goto LABEL_30;
    }
    uint64_t v14 = v18;
    cstdlib_strncpy(v18, __s, *a4);
    v14[*a4] = 0;
  }
  uint64_t v23 = v16;
  uint64_t v15 = (unsigned char *)v30;
  unsigned int v31 = v13 - 1;
  utf8_GetPreviousValidUtf8Offset((uint64_t)__s, &v31);
  if (v31 == -1) {
    goto LABEL_21;
  }
  size_t v24 = v13;
  if ((*(unsigned int (**)(void, void, char *))(a1[3] + 128))(a1[1], a1[2], &__s[v31]))
  {
    do
    {
      size_t v24 = v31;
      unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v31);
      unsigned int v31 = PreviousUtf8Offset;
    }
    while (PreviousUtf8Offset != -1
         && (*(unsigned int (**)(void, void, char *))(a1[3] + 128))(a1[1], a1[2], &__s[PreviousUtf8Offset]));
  }
  size_t v26 = v13 - v24;
  if (v13 <= v24) {
    goto LABEL_21;
  }
  *uint64_t v23 = v26;
  uint64_t v27 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), v30, v26 + 1);
  if (!v27)
  {
LABEL_30:
    uint64_t v28 = 2687508490;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v19, v20, v21, v22, v30);
    return v28;
  }
  uint64_t v15 = v27;
  cstdlib_strncpy(v27, &__s[v24], *v23);
  v15[*v23] = 0;
LABEL_21:
  if (*a3)
  {
    *a3 = v14;
  }
  else if (v14)
  {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v14);
  }
  if (*a5)
  {
    uint64_t v28 = 0;
    *a5 = v15;
  }
  else
  {
    if (v15) {
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v15);
    }
    return 0;
  }
  return v28;
}

uint64_t posparser_isFeatureRequired(uint64_t a1, int a2, _WORD *a3, unsigned int a4, int a5)
{
  LOWORD(v6) = a2;
  if (a5 == 1)
  {
LABEL_2:
    *a3 = v6;
    return 1;
  }
  if (a4)
  {
    uint64_t v9 = g_posparser_FeatureNames[a2];
    uint64_t v10 = a4;
    uint64_t v6 = 0;
    while (cstdlib_strcmp(*(const char **)(*(void *)(a1 + 1312) + 8 * v6), v9))
    {
      if (v10 == ++v6) {
        return 0;
      }
    }
    goto LABEL_2;
  }
  return 0;
}

uint64_t posparser_DumpFeatureVectorAndResult(uint64_t a1, char *a2, char **a3, char *a4, const char **a5, unsigned int *a6, unsigned int a7, int a8, unsigned __int16 a9, char *a10)
{
  __sprintf_chk(__s, 0, 6uLL, "%d", a9);
  uint64_t result = posparser_add2Str(a1, a5, a6, __s);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = posparser_add2Str(a1, a5, a6, " FEATUREVECTOR:");
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = posparser_add2Str(a1, a5, a6, a2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = posparser_add2Str(a1, a5, a6, ":");
        if ((result & 0x80000000) == 0)
        {
          uint64_t v19 = a7;
          __sprintf_chk(__s, 0, 6uLL, "%d", a7);
          uint64_t result = posparser_add2Str(a1, a5, a6, __s);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = posparser_add2Str(a1, a5, a6, ":");
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = posparser_add2Str(a1, a5, a6, a10);
              if ((result & 0x80000000) == 0)
              {
                if (a7)
                {
                  uint64_t v20 = g_posparser_FeatureNames;
                  while (1)
                  {
                    if (a8 == 1)
                    {
                      uint64_t result = posparser_add2Str(a1, a5, a6, *v20);
                      if ((result & 0x80000000) != 0) {
                        break;
                      }
                      uint64_t result = posparser_add2Str(a1, a5, a6, " ");
                      if ((result & 0x80000000) != 0) {
                        break;
                      }
                    }
                    uint64_t result = posparser_add2Str(a1, a5, a6, *a3);
                    if ((result & 0x80000000) != 0) {
                      break;
                    }
                    uint64_t result = posparser_add2Str(a1, a5, a6, " ");
                    if ((result & 0x80000000) != 0) {
                      break;
                    }
                    ++v20;
                    ++a3;
                    if (!--v19) {
                      goto LABEL_16;
                    }
                  }
                }
                else
                {
LABEL_16:
                  uint64_t result = posparser_add2Str(a1, a5, a6, " PREDICTED:");
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = posparser_add2Str(a1, a5, a6, a4);
                    if ((result & 0x80000000) == 0)
                    {
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a5);
                      cstdlib_strcpy((char *)*a5, "");
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t posparser_add2Str(uint64_t a1, const char **a2, unsigned int *a3, char *__s)
{
  size_t v8 = cstdlib_strlen(__s);
  uint64_t v9 = *a3;
  if (v8 >= v9 - cstdlib_strlen(*a2))
  {
    int v11 = cstdlib_strlen(__s);
    int v12 = *a3;
    unsigned int v13 = v11 - v12 + cstdlib_strlen(*a2);
    if (v13 <= 0x80) {
      int v14 = 128;
    }
    else {
      int v14 = v13;
    }
    uint64_t v10 = (const char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*a2, *a3 + v14 + 1);
    if (!v10)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v15, v16, v17, v18, v22);
      return 2687508490;
    }
    *a2 = v10;
    *a3 += v14;
  }
  else
  {
    uint64_t v10 = *a2;
  }
  size_t v19 = cstdlib_strlen(v10);
  uint64_t v20 = (char *)*a2;
  if (v19) {
    cstdlib_strcat(v20, __s);
  }
  else {
    cstdlib_strcpy(v20, __s);
  }
  return 0;
}

uint64_t posparser_setFeature(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, unsigned int a6, int a7)
{
  unsigned __int16 v37 = 0;
  if (posparser_isFeatureRequired(a1, a3, &v37, a6, a7))
  {
    if (cstdlib_strcmp(a5, ""))
    {
      size_t v13 = cstdlib_strlen(a5);
      uint64_t v14 = v37;
      if (v13 <= 0x40)
      {
        uint64_t v16 = *(char **)(a4 + 8 * v37);
      }
      else
      {
        int v15 = cstdlib_strlen(a5);
        uint64_t v16 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *(void *)(a4 + 8 * v14), (v15 + 1));
        if (!v16)
        {
          log_OutPublic(*(void *)(a2 + 32), (uint64_t)"POSPARSER", 68000, 0, v17, v18, v19, v20, v36);
          return 2687508490;
        }
        *(void *)(a4 + 8 * v14) = v16;
      }
      cstdlib_strcpy(v16, a5);
      if (a7) {
        return 0;
      }
      size_t v24 = *(const char **)(a4 + 8 * v14);
      unsigned __int16 v25 = cstdlib_strlen(g_posparser_FeatureNames[a3]);
      uint64_t v22 = *(unsigned int *)(a1 + 1336);
      if (!v22) {
        return v22;
      }
      unsigned __int16 v26 = 0;
      size_t v27 = v25;
      while (1)
      {
        uint64_t v28 = v26;
        if (!cstdlib_strncmp(*(const char **)(*(void *)(a1 + 1328) + 16 * v26), *(const char **)(*(void *)(a1 + 1312) + 8 * v14), v27))break; {
        unsigned __int16 v26 = v28 + 1;
        }
        if (*(_DWORD *)(a1 + 1336) <= (unsigned __int16)(v28 + 1)) {
          return 0;
        }
      }
      unsigned __int16 v29 = cstdlib_strlen(*(const char **)(*(void *)(a1 + 1328) + 16 * v28 + 8));
      unsigned __int16 v30 = cstdlib_strlen(v24);
      unsigned int v31 = *(char **)(*(void *)(a1 + 1328) + 16 * v28 + 8);
      uint64_t v32 = cstdlib_strstr(v31, v24);
      if (v32)
      {
        unsigned int v33 = v29;
        unint64_t v34 = (unint64_t)&v31[v29];
        while (v32 != v31 || v33 != v30 && (v33 <= v30 + 1 || v31[v30] != 32))
        {
          if (v32 > v31)
          {
            uint64_t v35 = &v32[v30];
            if (v34 > (unint64_t)(v35 + 1) && *v35 == 32)
            {
              uint64_t v22 = 0;
              if ((char *)v34 == v35 || *(v32 - 1) == 32) {
                return v22;
              }
            }
            else if ((char *)v34 == v35)
            {
              return 0;
            }
          }
          uint64_t v32 = cstdlib_strstr(&v32[v30], v24);
          if (!v32) {
            goto LABEL_32;
          }
        }
        return 0;
      }
LABEL_32:
      uint64_t v21 = (char *)v24;
    }
    else
    {
      uint64_t v21 = *(char **)(a4 + 8 * v37);
    }
    cstdlib_strcpy(v21, "=");
  }
  return 0;
}

uint64_t posparser_initFeatureVector(uint64_t a1, char **a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v6 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6) {
      break;
    }
    cstdlib_strcpy(v6, "=");
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v7, v8, v9, v10, v12);
  return 2687508490;
}

void *posparser_freeFeatureVector(void *result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    int v4 = result;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *a2++;
      uint64_t result = heap_Free((void *)v4[1], v6);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t posparser_getIgtreeBrkStrs(uint64_t a1, unsigned char *a2, unsigned char *a3, size_t a4)
{
  uint64_t v9 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v9);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = brokeraux_ComposeBrokerString(a1, "diacritizerOOVPOS_igtree", 1, 1, v9, 0, 0, a2, a4);
    if ((result & 0x80000000) == 0) {
      return brokeraux_ComposeBrokerString(a1, "diacritizerKNOWNPOS_igtree", 1, 1, v9, 0, 0, a3, a4);
    }
  }
  return result;
}

uint64_t getPosparserIGTreesAndDict(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t *a8, uint64_t *a9, _DWORD *a10, const char *a11, _DWORD *a12)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v58 = 0;
  *(void *)long long v59 = 0;
  int v57 = 0;
  uint64_t v56 = 0;
  char v54 = 0;
  *a7 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a12 = 0;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"araparsergetfv", &v57) & 0x80000000) == 0 && v57 == 1) {
    *a10 = 1;
  }
  unsigned __int16 v55 = -1;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t *, unsigned __int16 *, char *))(a6 + 96))(a4, a5, "fecfg", "araparsermwspan", &v56, &v55, &v54);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_28;
  }
  int v51 = v55;
  if (v55) {
    *a12 = 1;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *))(a6 + 72))(a4, a5, a11, (char *)&v58 + 4);
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_33;
  }
  if (!HIDWORD(v58))
  {
    cstdlib_strcpy(__dst, a11);
    cstdlib_strcat(__dst, "0");
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t *))(a6 + 72))(a4, a5, __dst, &v58);
    uint64_t v19 = v20;
    if ((v20 & 0x80000000) != 0 || !v58)
    {
      if ((v20 & 0x80000000) == 0) {
        return v19;
      }
      goto LABEL_33;
    }
  }
  *a7 = 1;
  if (*a10 == 1)
  {
    *a9 = 0;
    *a8 = 0;
    *a7 = 1;
LABEL_13:
    *a12 = 1;
    return v19;
  }
  uint64_t IgtreeBrkStrs = posparser_getIgtreeBrkStrs(a1, __dst, v60, 0x100uLL);
  if ((IgtreeBrkStrs & 0x80000000) != 0)
  {
    uint64_t v19 = IgtreeBrkStrs;
    goto LABEL_33;
  }
  if ((ssftriff_reader_ObjOpen(a2, a3, 2, v60, "IGTR", 1031, (uint64_t *)v59) & 0x80000000) != 0)
  {
    uint64_t v19 = 2687508480;
    *a9 = 0;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"POSPARSER", 68005, (uint64_t)"%s%s", v22, v23, v24, v25, "treename:");
    goto LABEL_33;
  }
  unsigned __int16 v26 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 1600);
  *a9 = (uint64_t)v26;
  if (!v26) {
    goto LABEL_38;
  }
  uint64_t v18 = igtree_Init(a2, a3, *(uint64_t *)v59, v26);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_28;
  }
  uint64_t v18 = ssftriff_reader_ObjClose(*(void **)v59, v31, v32, v33, v34, v35, v36, v37);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_28;
  }
  if ((ssftriff_reader_ObjOpen(a2, a3, 2, __dst, "IGTR", 1031, (uint64_t *)v59) & 0x80000000) != 0)
  {
    uint64_t v19 = 2687508480;
    *a8 = 0;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"POSPARSER", 68005, (uint64_t)"%s%s", v38, v39, v40, v41, "treename:");
    goto LABEL_33;
  }
  unsigned __int16 v26 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 1600);
  *a8 = (uint64_t)v26;
  if (!v26)
  {
LABEL_38:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"POSPARSER", 68000, (uint64_t)v26, v27, v28, v29, v30, v50);
    uint64_t v19 = 2687508490;
    goto LABEL_33;
  }
  uint64_t v18 = igtree_Init(a2, a3, *(uint64_t *)v59, v26);
  if ((v18 & 0x80000000) != 0)
  {
LABEL_28:
    uint64_t v19 = v18;
    goto LABEL_33;
  }
  uint64_t v19 = ssftriff_reader_ObjClose(*(void **)v59, v42, v43, v44, v45, v46, v47, v48);
  if ((v19 & 0x80000000) != 0)
  {
LABEL_33:
    if (*a8)
    {
      heap_Free(*(void **)(a1 + 8), *a8);
      *a8 = 0;
    }
    if (*a9)
    {
      heap_Free(*(void **)(a1 + 8), *a9);
      *a9 = 0;
    }
    return v19;
  }
  if (v51 || HIDWORD(v58) == 1 || v58 == 1) {
    goto LABEL_13;
  }
  return v19;
}

uint64_t freePosparserIGTrees(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  if (v6)
  {
    uint64_t v7 = igtree_Deinit(a1, v6);
    if ((v7 & 0x80000000) != 0) {
      return v7;
    }
    heap_Free(*(void **)(a1 + 8), *a2);
    *a2 = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (*a3)
  {
    uint64_t v7 = igtree_Deinit(a1, *a3);
    if ((v7 & 0x80000000) == 0)
    {
      heap_Free(*(void **)(a1 + 8), *a3);
      *a3 = 0;
    }
  }
  return v7;
}

uint64_t posparser_doPatternMatching(uint64_t a1, char *__dst, uint64_t *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  size_t v215 = 0;
  uint64_t v216 = 0;
  uint64_t v214 = 0;
  size_t v213 = 0;
  if (!a5) {
    return 0;
  }
  unsigned int v8 = a5;
  unint64_t v197 = 0;
  uint64_t v12 = 0;
  uint64_t v203 = 0;
  unsigned __int16 v13 = 0;
  uint64_t v218 = 0;
  unsigned __int16 v217 = 0;
  do
  {
    unsigned int v14 = v13;
    uint64_t v15 = a4 + 104 * v13;
    int v17 = *(unsigned __int16 *)(v15 + 32);
    uint64_t v16 = (unsigned __int16 *)(v15 + 32);
    if (v17)
    {
      log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word %d not sent to pattern matching since found in dict", a6, a7, a8, v12);
      unsigned int v14 = *(unsigned __int16 *)(a4 + 104 * v13 + 72);
      unsigned __int16 v13 = *(_WORD *)(a4 + 104 * v13 + 72);
      goto LABEL_11;
    }
    if (*(_DWORD *)(a4 + 104 * v13 + 88)
      || *(_DWORD *)(a4 + 104 * v13 + 80)
      || *(_DWORD *)(a4 + 104 * v13 + 84)
      || *(_DWORD *)(a4 + 104 * v13 + 92)
      || *(_DWORD *)(a4 + 104 * v13 + 12)
      || *(_WORD *)(a4 + 104 * v13 + 74))
    {
      goto LABEL_11;
    }
    unsigned int v187 = v8;
    uint64_t v205 = v16;
    if (*((_DWORD *)a3 + 62))
    {
      uint64_t v18 = a4 + 104 * v13;
      uint64_t v20 = *(void *)(v18 + 96);
      uint64_t v19 = (const char **)(v18 + 96);
      cstdlib_strncpy(__dst, (const char *)(a1 + *((unsigned __int16 *)v19 - 44)), *((unsigned __int16 *)v19 - 43) - (unint64_t)*((unsigned __int16 *)v19 - 44));
      __dst[*((unsigned __int16 *)v19 - 43) - *((unsigned __int16 *)v19 - 44)] = 0;
      if (v20)
      {
        int v21 = posparser_ExtractPunctuation(a3, __dst, (char **)&v216, &v215, (unsigned char **)&v214, &v213);
        if (v21 < 0)
        {
          HIDWORD(v203) = v21;
          break;
        }
        cstdlib_strcpy(__dst, *v19);
      }
    }
    else
    {
      uint64_t v22 = a4 + 104 * v13;
      unsigned int v25 = *(unsigned __int16 *)(v22 + 8);
      uint64_t v23 = (unsigned __int16 *)(v22 + 8);
      unint64_t v24 = v25;
      unsigned __int16 v26 = (char *)(v23 + 1);
      unint64_t v200 = (char *)(v23 + 1);
      unint64_t v27 = 0;
      if (v25 >= v23[1])
      {
        unsigned int v28 = v203;
      }
      else
      {
        unsigned int v28 = v203;
        int v198 = v23;
        do
        {
          unsigned int v29 = *((unsigned __int16 *)a3 + 104);
          if (v28 >= v29)
          {
            unsigned __int8 v30 = 0;
          }
          else
          {
            unsigned __int8 v30 = 0;
            uint64_t v31 = a3[25];
            unsigned int v32 = v28;
            unint64_t v206 = v24;
            do
            {
              uint64_t v33 = *(unsigned __int16 *)(v31 + 6 * v32);
              if (v33 > *(unsigned __int16 *)v26) {
                break;
              }
              unsigned int v34 = v32;
              if (v24 == v33)
              {
                if (*((unsigned __int16 *)a3 + 49) > (unsigned __int16)v27)
                {
                  unsigned int v204 = v28;
                  uint64_t v35 = __dst;
                  unsigned __int16 v36 = 0;
                  while (cstdlib_strlen((const char *)(a3[25] + 6 * v34 + 2)) > v36)
                  {
                    unint64_t v37 = (v27 + 1);
                    v35[(unsigned __int16)v27] = *(unsigned char *)(a3[25] + 6 * v34 + v36++ + 2);
                    unsigned int v38 = v36 + (unsigned __int16)(v27 + 1);
                    unint64_t v27 = v37;
                    if (v38 >= *((unsigned __int16 *)a3 + 49)) {
                      goto LABEL_34;
                    }
                  }
                  unint64_t v37 = v27;
LABEL_34:
                  uint64_t v31 = a3[25];
                  unsigned int v29 = *((unsigned __int16 *)a3 + 104);
                  unint64_t v27 = v37;
                  char __dst = v35;
                  unsigned int v28 = v204;
                  unint64_t v24 = v206;
                  uint64_t v23 = v198;
                  unsigned __int16 v26 = v200;
                }
                unsigned __int8 v30 = *(unsigned char *)(v31 + 6 * v34 + 2);
              }
              else if (*v23 >= v33)
              {
                unsigned int v28 = v32;
              }
              unsigned int v32 = v34 + 1;
            }
            while (v34 + 1 < v29);
          }
          int v39 = *(unsigned __int8 *)(a1 + v24);
          if ((v39 != 65
             || v30 - 66 > 0x16
             || ((1 << (v30 - 66)) & 0x400081) == 0
             || !*((_DWORD *)a3 + 38))
            && *((unsigned __int16 *)a3 + 49) > (unsigned __int16)v27)
          {
            __dst[(unsigned __int16)v27] = v39;
            unint64_t v27 = (v27 + 1);
          }
          ++v24;
        }
        while (v24 < *(unsigned __int16 *)v26);
        LODWORD(v24) = (unsigned __int16)v24;
      }
      LODWORD(v203) = v28;
      unsigned int v40 = *((unsigned __int16 *)a3 + 104);
      unsigned int v41 = v28;
      unint64_t v42 = v27;
      unint64_t v43 = v27;
      int v207 = v24;
      if (v28 < v40)
      {
        while (1)
        {
          unsigned int v44 = *(unsigned __int16 *)(a3[25] + 6 * v41);
          if (v44 > *(unsigned __int16 *)v26) {
            break;
          }
          unsigned int v45 = v41;
          if (v44 == v24 && *((unsigned __int16 *)a3 + 49) > (unsigned __int16)v42)
          {
            uint64_t v46 = __dst;
            unsigned __int16 v47 = 0;
            while (cstdlib_strlen((const char *)(a3[25] + 6 * v45 + 2)) > v47)
            {
              unint64_t v48 = (v42 + 1);
              v46[(unsigned __int16)v42] = *(unsigned char *)(a3[25] + 6 * v45 + v47++ + 2);
              unsigned int v49 = v47 + (unsigned __int16)(v42 + 1);
              unint64_t v42 = v48;
              if (v49 >= *((unsigned __int16 *)a3 + 49)) {
                goto LABEL_57;
              }
            }
            unint64_t v48 = v42;
LABEL_57:
            unsigned int v40 = *((unsigned __int16 *)a3 + 104);
            unint64_t v42 = v48;
            char __dst = v46;
            LODWORD(v24) = v207;
            unsigned __int16 v26 = v200;
          }
          unsigned int v41 = v45 + 1;
          unint64_t v43 = v42;
          if (v45 + 1 >= v40) {
            goto LABEL_61;
          }
        }
        unint64_t v43 = v42;
      }
LABEL_61:
      unint64_t v197 = v43;
      if (*((unsigned __int16 *)a3 + 49) == (unsigned __int16)v43)
      {
        unsigned int v8 = v187;
        goto LABEL_13;
      }
      __dst[(unsigned __int16)v43] = 0;
      unsigned int v8 = v187;
    }
    log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word %d (%s) sent to pattern matching", a6, a7, a8, v12);
    uint64_t v208 = (uint64_t *)(a4 + 104 * v13 + 24);
    int v50 = 1;
    do
    {
      unsigned int v51 = v50;
      cstdlib_strcpy(__dsta, "diac_decomp_");
      unsigned int v189 = v51;
      LH_itoa(v51, __s2, 0xAu);
      cstdlib_strcat(__dsta, __s2);
      log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%s L1: %s", v52, v53, v54, (uint64_t)__dsta);
      unsigned __int16 v55 = *(uint64_t (**)(uint64_t, uint64_t, void, char *, void))(a3[7] + 120);
      unsigned __int16 v56 = cstdlib_strlen(__dst);
      uint64_t v57 = v55(a3[5], a3[6], 0, __dst, v56);
      if ((v57 & 0x80000000) != 0) {
        return v57;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, char *))(a3[7] + 80))(a3[5], a3[6], __dsta) & 0x80000000) != 0)
      {
        if (v189 != 1)
        {
          HIDWORD(v203) = 0;
          break;
        }
        return 0;
      }
      HIDWORD(v203) = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(a3[7] + 128))(a3[5], a3[6], 0, &v218, &v217);
      if (v203 < 0) {
        return HIDWORD(v203);
      }
      v218[v217] = 0;
      log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%s O1: %s", v58, v59, v60, (uint64_t)__dsta);
      if (!*v218
        || !cstdlib_strchr("[/", *v218)
        || !cstdlib_strchr("]/", v218[v217 - 1]))
      {
        goto LABEL_181;
      }
      unsigned int v211 = 0;
      if (v217)
      {
        int v61 = 1;
        uint64_t v62 = v218;
        uint64_t v63 = 1;
        do
        {
          int v64 = *v62;
          if ((v64 - 44) <= 0x31 && ((1 << (v64 - 44)) & 0x2800000000009) != 0)
          {
            long long v66 = __dst;
            BOOL v67 = v64 == 44;
            if (v64 == 44) {
              int v68 = 1;
            }
            else {
              int v68 = (unsigned __int16)v61;
            }
            uint64_t v63 = (v68 * v63);
            if (v67) {
              int v69 = v61 + 1;
            }
            else {
              int v69 = 1;
            }
            long long v70 = cstdlib_strchr(v62, 58);
            if (v70)
            {
              uint64_t v62 = v70 - 1;
              do
              {
                unsigned int v71 = v62[2];
                ++v62;
                v71 -= 44;
                BOOL v72 = v71 > 0x31;
                uint64_t v73 = (1 << v71) & 0x2800000000009;
              }
              while (v72 || v73 == 0);
            }
            int v61 = v69;
            char __dst = v66;
          }
          ++v62;
        }
        while (v62 < &v218[v217]);
      }
      else
      {
        uint64_t v63 = 1;
        int v61 = 1;
      }
      int v190 = v61;
      log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d decomposition(s) found", a6, a7, a8, v63);
      uint64_t v78 = *a3;
      if (v63 > 0x2710)
      {
        log_OutText(*(void *)(v78 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"More than 10000 decompositions found, invalidated the results of current depes grammar", v75, v76, v77, v185);
        goto LABEL_181;
      }
      uint64_t v79 = heap_Realloc(*(uint64_t **)(v78 + 8), *v208, 16 * (v63 + *v205));
      if (!v79)
      {
LABEL_203:
        log_OutPublic(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 68000, 0, v80, v81, v82, v83, v185);
        return 2687508490;
      }
      *uint64_t v208 = v79;
      uint64_t v84 = *v205;
      if (v63)
      {
        while (1)
        {
          uint64_t v85 = (char *)heap_Alloc(*(void *)(*a3 + 8), (unsigned __int16)(v215 + v217 + v213));
          *(void *)(*v208 + 16 * (unsigned __int16)v84 + 8) = v85;
          if (!v85) {
            goto LABEL_203;
          }
          cstdlib_strcpy(v85, "");
          uint64_t v86 = (char *)heap_Alloc(*(void *)(*a3 + 8), v217);
          *(void *)(*v208 + 16 * (unsigned __int16)v84) = v86;
          if (!v86) {
            break;
          }
          cstdlib_strcpy(v86, "");
          LOWORD(v84) = v84 + 1;
          uint64_t v91 = v205;
          if (v63 + *v205 <= (unsigned __int16)v84)
          {
            uint64_t v84 = *v205;
            goto LABEL_102;
          }
        }
        log_OutPublic(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 68000, 0, v87, v88, v89, v90, v185);
        heap_Free(*(void **)(*a3 + 8), *(void *)(*v208 + 16 * (unsigned __int16)v84 + 8));
        return 2687508490;
      }
      uint64_t v91 = v205;
LABEL_102:
      unint64_t v92 = v197;
      unsigned int v186 = __dst;
      if (!v217)
      {
        int v114 = 1;
        int v93 = 1;
LABEL_142:
        uint64_t v115 = v84;
        unint64_t v116 = v84;
        do
        {
          if ((_WORD)v116)
          {
            int v194 = v93;
            uint64_t v117 = 0;
            unint64_t v118 = 0;
            while (cstdlib_strcmp(*(const char **)(*v208 + 16 * (unsigned __int16)v116), *(const char **)(*v208 + v117)))
            {
              ++v118;
              v117 += 16;
              if (v118 >= (unsigned __int16)v116)
              {
                uint64_t v91 = v205;
                int v93 = v194;
                goto LABEL_156;
              }
            }
            if (cstdlib_strcmp(*(const char **)(*v208 + 16 * (unsigned __int16)v116 + 8), *(const char **)(*v208 + v117 + 8)))
            {
              log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FEATUREVECTOR:DUPLICATE:%s POS %s, different DIA %s vs %s", v119, v120, v121, (uint64_t)v186);
            }
            log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"removing duplicate %d %s,%s", v119, v120, v121, v115);
            int v122 = v114 - 1;
            int v123 = v114 - 1 + *v205;
            int v124 = v116;
            unint64_t v125 = v116;
            if (v123 > (unsigned __int16)v116)
            {
              int v126 = (unsigned __int16)v116;
              LODWORD(v125) = v116;
              do
              {
                uint64_t v127 = 16 * (v126 + 1);
                cstdlib_strcpy(*(char **)(*v208 + 16 * (unsigned __int16)v125 + 8), *(const char **)(*v208 + v127 + 8));
                cstdlib_strcpy(*(char **)(*v208 + 16 * (unsigned __int16)v125), *(const char **)(*v208 + v127));
                unint64_t v125 = (v125 + 1);
                int v126 = (unsigned __int16)v125;
                int v123 = v122 + *v205;
              }
              while (v123 > (unsigned __int16)v125);
              int v124 = v116;
            }
            unint64_t v118 = v125;
            heap_Free(*(void **)(*a3 + 8), *(void *)(*v208 + 16 * v123 + 8));
            heap_Free(*(void **)(*a3 + 8), *(void *)(*v208 + 16 * (v122 + *v205)));
            uint64_t v91 = v205;
            int v93 = v194 - 1;
            LODWORD(v116) = v124 - 1;
          }
          else
          {
            LODWORD(v116) = 0;
            unint64_t v118 = 0;
          }
LABEL_156:
          unint64_t v116 = (v116 + 1);
          uint64_t v115 = (unsigned __int16)v116;
          uint64_t v84 = *v91;
          int v114 = (unsigned __int16)v93;
          unsigned int v128 = v84 + (unsigned __int16)v93;
        }
        while (v128 > (unsigned __int16)v116);
        uint64_t v192 = (unsigned __int16)v93;
        unint64_t v92 = v118;
        goto LABEL_159;
      }
      int v93 = 1;
      uint64_t v94 = v218;
      do
      {
        int v95 = *v94;
        if ((v95 - 44) <= 0x31 && ((1 << (v95 - 44)) & 0x2800000000009) != 0)
        {
          BOOL v97 = v95 == 44;
          if (v95 == 44) {
            unint64_t v92 = v92;
          }
          else {
            unint64_t v92 = 0;
          }
          if (v95 == 44) {
            int v98 = 1;
          }
          else {
            int v98 = v190;
          }
          int v193 = v98 * v93;
          if (v97) {
            int v99 = v190 + 1;
          }
          else {
            int v99 = 1;
          }
          int v190 = v99;
          uint64_t v100 = cstdlib_strchr(v94, 58);
          if (v100)
          {
            *uint64_t v100 = 0;
            unsigned __int16 v201 = v100 + 1;
            uint64_t v91 = v205;
            while (1)
            {
              int v101 = v100[1];
              if ((v101 - 44) <= 0x31 && ((1 << (v101 - 44)) & 0x2800000000009) != 0) {
                break;
              }
              ++v100;
            }
            v100[1] = 0;
            int v103 = *v205;
            int v199 = v92;
            uint64_t v188 = v100;
            if (v101 == 44)
            {
              int v104 = v103 + v92;
              int v105 = (unsigned __int16)v92 + (unsigned __int16)v193;
              unsigned int v106 = v105 + v103;
              if (v105 + v103 > (unsigned __int16)v104)
              {
                int v107 = (unsigned __int16)v104;
                do
                {
                  uint64_t v108 = 16 * (v107 + (unsigned __int16)v193);
                  cstdlib_strcpy(*(char **)(*v208 + v108 + 8), *(const char **)(*v208 + 16 * (unsigned __int16)v104 + 8));
                  cstdlib_strcpy(*(char **)(*v208 + v108), *(const char **)(*v208 + 16 * (unsigned __int16)v104));
                  uint64_t v91 = v205;
                  int v107 = (unsigned __int16)++v104;
                  int v103 = *v205;
                  unsigned int v106 = v105 + v103;
                }
                while (v105 + v103 > (unsigned __int16)v104);
              }
            }
            else
            {
              int v105 = (unsigned __int16)v92 + (unsigned __int16)v193;
              unsigned int v106 = v105 + v103;
            }
            unsigned __int16 v109 = v103 + v199;
            if (v106 > v109)
            {
              uint64_t v110 = v94 + 1;
              do
              {
                unsigned __int16 v111 = v109;
                uint64_t v112 = 16 * v109;
                cstdlib_strcat(*(char **)(*v208 + v112 + 8), v110);
                int v113 = *(char **)(*v208 + v112);
                if (*v113)
                {
                  cstdlib_strcat(v113, "+");
                  int v113 = *(char **)(*v208 + v112);
                }
                cstdlib_strcat(v113, v201);
                unsigned __int16 v109 = v111 + 1;
                uint64_t v91 = v205;
              }
              while (v105 + *v205 > (unsigned __int16)(v111 + 1));
            }
            int v93 = v193;
            unint64_t v92 = (v193 + v199);
            uint64_t v94 = v188;
            v188[1] = v101;
          }
          else
          {
            uint64_t v91 = v205;
            int v93 = v193;
          }
        }
        ++v94;
      }
      while (v94 < &v218[v217]);
      uint64_t v84 = *v91;
      if ((_WORD)v93)
      {
        int v114 = (unsigned __int16)v93;
        goto LABEL_142;
      }
      uint64_t v192 = 0;
      unsigned int v128 = v84 + (unsigned __int16)v93;
      int v93 = 0;
LABEL_159:
      unint64_t v197 = v92;
      uint64_t v191 = (char *)v92;
      uint64_t v129 = v84;
      unsigned int v8 = v187;
      if (v128 <= v84) {
        goto LABEL_180;
      }
      do
      {
        int v195 = v93;
        uint64_t v209 = 0;
        char __s = 0;
        uint64_t v130 = 16 * (unsigned __int16)v129;
        unsigned __int8 v202 = (char *)v129;
        log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"DIA %s", v81, v82, v83, *(void *)(*v208 + v130 + 8));
        log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"POS %s", v131, v132, v133, *(void *)(*v208 + v130));
        if ((ssftmap_IteratorOpen(a3[32], 0, 0, (uint64_t)&v211) & 0x80000000) != 0) {
          goto LABEL_178;
        }
        if ((ssftmap_IteratorNext(v211, &v209, &__s) & 0x80000000) != 0) {
          goto LABEL_177;
        }
        uint64_t v134 = (void *)(a4 + 104 * v13 + 24);
        while (1)
        {
          unsigned int v135 = cstdlib_strstr(*(char **)(*v134 + v130), (const char *)(v209 + 1));
          if (v135) {
            break;
          }
LABEL_168:
          if ((ssftmap_IteratorNext(v211, &v209, &__s) & 0x80000000) != 0) {
            goto LABEL_176;
          }
        }
        if (*(unsigned char *)v209 != 70)
        {
          uint64_t v136 = v135;
          __int16 v137 = &v135[cstdlib_strlen(__s)];
          char v138 = &v136[cstdlib_strlen((const char *)(v209 + 1))];
          size_t v139 = cstdlib_strlen(v136);
          size_t v140 = v139 - cstdlib_strlen((const char *)(v209 + 1));
          unint64_t v141 = v138;
          uint64_t v134 = (void *)(a4 + 104 * v13 + 24);
          cstdlib_memmove(v137, v141, v140 + 1);
          uint64_t v142 = __s;
          size_t v143 = cstdlib_strlen(__s);
          cstdlib_strncpy(v136, v142, v143);
          log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PARTIAL MAPPING POS %s", v144, v145, v146, *(void *)(*v208 + v130));
          int v147 = cstdlib_strstr(v136 + 1, (const char *)(v209 + 1));
          if (v147)
          {
            __int16 v148 = v147;
            do
            {
              int v149 = &v148[cstdlib_strlen(__s)];
              unsigned __int16 v150 = &v148[cstdlib_strlen((const char *)(v209 + 1))];
              size_t v151 = cstdlib_strlen(v148);
              size_t v152 = v151 - cstdlib_strlen((const char *)(v209 + 1));
              uint64_t v134 = (void *)(a4 + 104 * v13 + 24);
              cstdlib_memmove(v149, v150, v152 + 1);
              uint64_t v153 = __s;
              size_t v154 = cstdlib_strlen(__s);
              cstdlib_strncpy(v148, v153, v154);
              log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PARTIAL MAPPING POS %s", v155, v156, v157, *(void *)(*v208 + v130));
              __int16 v148 = cstdlib_strstr(v148 + 1, (const char *)(v209 + 1));
            }
            while (v148);
          }
          goto LABEL_168;
        }
        cstdlib_strcpy(*(char **)(*v134 + v130), __s);
        log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FULL MAPPING POS %s", v158, v159, v160, *(void *)(*v134 + v130));
        if (!cstdlib_strcmp(__s, "INVALID"))
        {
          uint64_t v161 = (v192 - 1);
          int v162 = v161 + *v205;
          int v163 = (int)v202;
          unsigned int v164 = v202;
          if (v162 > (unsigned __int16)v202)
          {
            int v165 = (unsigned __int16)v202;
            LODWORD(v164) = v202;
            do
            {
              uint64_t v166 = v161;
              int v167 = (int)v164;
              uint64_t v168 = 16 * (unsigned __int16)v164;
              uint64_t v169 = 16 * (v165 + 1);
              cstdlib_strcpy(*(char **)(*v208 + v168 + 8), *(const char **)(*v208 + v169 + 8));
              cstdlib_strcpy(*(char **)(*v208 + v168), *(const char **)(*v208 + v169));
              int v170 = v167;
              uint64_t v161 = v166;
              unsigned int v164 = (char *)(v170 + 1);
              int v165 = (unsigned __int16)v164;
              int v162 = v166 + *v205;
            }
            while (v162 > (unsigned __int16)v164);
            int v163 = (int)v202;
          }
          uint64_t v191 = v164;
          heap_Free(*(void **)(*a3 + 8), *(void *)(*v208 + 16 * v162 + 8));
          heap_Free(*(void **)(*a3 + 8), *(void *)(*v208 + 16 * (int)(v161 + *v205)));
          --v195;
          LODWORD(v202) = v163 - 1;
        }
LABEL_176:
        unsigned int v8 = v187;
LABEL_177:
        ssftmap_IteratorClose((uint64_t)v211);
LABEL_178:
        uint64_t v129 = (v202 + 1);
        uint64_t v91 = v205;
        int v93 = v195;
        uint64_t v192 = (unsigned __int16)v195;
        unsigned int v128 = *v205 + (unsigned __int16)v195;
      }
      while (v128 > (unsigned __int16)((_WORD)v202 + 1));
      unint64_t v197 = (unint64_t)v191;
LABEL_180:
      *uint64_t v91 = v128;
      uint64_t v171 = v91;
      log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d decomposition(s) left after invalidation step", v81, v82, v83, v192);
      uint64_t v172 = *v171;
      char __dst = v186;
      log_OutText(*(void *)(*a3 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d decomposition(s) in total", v173, v174, v175, v172);
LABEL_181:
      int v50 = v189 + 1;
    }
    while (v189 != 254);
    int v176 = v205;
    if (!*v205 && *v208)
    {
      heap_Free(*(void **)(*a3 + 8), *v208);
      int v176 = v205;
      *uint64_t v208 = 0;
    }
    if (*((_DWORD *)a3 + 62) == 1 && *(void *)(a4 + 104 * v13 + 96) && v216 | v214)
    {
      if (*v176)
      {
        unint64_t v177 = 0;
        uint64_t v178 = 8;
        do
        {
          if (v216)
          {
            unsigned int v179 = *(const char **)(*v208 + v178);
            int v180 = &v179[v215];
            size_t v181 = cstdlib_strlen(v179) + 1;
            int v182 = (char *)v180;
            unsigned int v8 = v187;
            cstdlib_memmove(v182, v179, v181);
            cstdlib_memcpy(*(void **)(*v208 + v178), (const void *)v216, v215);
            int v176 = v205;
          }
          if (v214)
          {
            cstdlib_strcat(*(char **)(*v208 + v178), (const char *)v214);
            int v176 = v205;
          }
          ++v177;
          v178 += 16;
        }
        while (v177 < *v176);
        unint64_t v197 = v177;
      }
      else
      {
        unint64_t v197 = 0;
      }
    }
LABEL_11:
    if (*(_WORD *)(a4 + 104 * v14 + 32)) {
      *(_WORD *)(a4 + 104 * v14 + 72) = v13;
    }
LABEL_13:
    uint64_t v12 = ++v13;
  }
  while (v13 < v8);
  if (v216) {
    heap_Free(*(void **)(*a3 + 8), v216);
  }
  uint64_t v183 = HIDWORD(v203);
  if (v214) {
    heap_Free(*(void **)(*a3 + 8), v214);
  }
  return v183;
}

uint64_t posparser_getPosMap(void *a1)
{
  char v11 = 0;
  uint64_t v10 = 0;
  unsigned __int16 v9 = 0;
  uint64_t v2 = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, unsigned __int16 *, char *))(a1[3] + 96))(a1[1], a1[2], "fecfg", "araposmap", &v10, &v9, &v11);
  if ((v2 & 0x80000000) == 0 && v9)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      int v4 = *(char **)(v10 + 8 * i);
      uint64_t v5 = cstdlib_strchr(v4, 124);
      if (v5)
      {
        *uint64_t v5 = 0;
        uint64_t v6 = (uint64_t)(v5 + 1);
        uint64_t v7 = cstdlib_strchr(v5 + 1, 124);
        if (v7)
        {
          *uint64_t v7 = 0;
          uint64_t v2 = ssftmap_Insert(a1[32], (uint64_t)v4, v6);
          if ((v2 & 0x80000000) != 0) {
            break;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t posparser_loc_getDictCharString(void *a1, uint64_t a2, char **a3)
{
  LOBYTE(__c) = 0;
  uint64_t v18 = 0;
  __int16 v17 = -1;
  uint64_t v5 = (*(uint64_t (**)(void, void, const char *, uint64_t, char ***, __int16 *, int *))(a1[3] + 96))(a1[1], a1[2], "fecfg", a2, &v18, &v17, &__c);
  if ((v5 & 0x80000000) == 0 && v17)
  {
    uint64_t v6 = cstdlib_strchr(*v18, __c);
    if (v6) {
      *uint64_t v6 = 0;
    }
    uint64_t v7 = *(void **)(*a1 + 8);
    int v8 = cstdlib_strlen(*v18);
    unsigned __int16 v9 = (char *)heap_Calloc(v7, 1, (v8 + 1));
    if (v9)
    {
      unsigned int v14 = v9;
      cstdlib_strcpy(v9, *v18);
      *a3 = v14;
    }
    else
    {
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v10, v11, v12, v13, v16);
      return 2687508490;
    }
  }
  return v5;
}

uint64_t posparser_loc_getPostCorrRule(void *a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(__c) = 0;
  uint64_t v23 = 0;
  __int16 v22 = -1;
  *(_DWORD *)a3 = 0;
  uint64_t v5 = (*(uint64_t (**)(void, void, const char *, uint64_t, char ***, __int16 *, int *))(a1[3] + 96))(a1[1], a1[2], "fecfg", a2, &v23, &v22, &__c);
  if ((v5 & 0x80000000) == 0 && v22)
  {
    uint64_t v6 = *v23;
    uint64_t v7 = cstdlib_strchr(*v23, __c);
    if (v7) {
      *uint64_t v7 = 0;
    }
    if (v6)
    {
      for (char i = 0; ; ++i)
      {
        unsigned __int16 v9 = cstdlib_strchr(v6, 95);
        uint64_t v10 = v9;
        if (v9) {
          *unsigned __int16 v9 = 0;
        }
        uint64_t v11 = *(void **)(*a1 + 8);
        int v12 = cstdlib_strlen(v6);
        uint64_t v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
        if (!v13) {
          break;
        }
        uint64_t v18 = v13;
        cstdlib_strcpy(v13, v6);
        switch(i)
        {
          case 0:
            *(void *)(a3 + 8) = v18;
            *(_WORD *)(a3 + 16) = cstdlib_strlen(v18);
            break;
          case 1:
            *(void *)(a3 + 24) = v18;
            *(_WORD *)(a3 + 32) = cstdlib_strlen(v18);
            break;
          case 2:
            if (cstdlib_strcmp(v18, "ENDWORD"))
            {
              if (cstdlib_strcmp(v18, "IFNOTFOLLOWEDBY")) {
                goto LABEL_19;
              }
              int v19 = 2;
            }
            else
            {
              int v19 = 1;
            }
            *(_DWORD *)a3 = v19;
            goto LABEL_19;
          case 3:
            *(void *)(a3 + 40) = v18;
            *(_WORD *)(a3 + 48) = cstdlib_strlen(v18);
            break;
          default:
LABEL_19:
            heap_Free(*(void **)(*a1 + 8), (uint64_t)v18);
            break;
        }
        uint64_t v6 = v10 + 1;
        if (!v10) {
          return v5;
        }
      }
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v14, v15, v16, v17, v21);
      return 2687508490;
    }
  }
  return v5;
}

uint64_t posparser_loc_getEmbeddedCharRule(void *a1, uint64_t a2, char *a3)
{
  LOBYTE(__c) = 0;
  int v12 = 0;
  __int16 v11 = -1;
  uint64_t v4 = (*(uint64_t (**)(void, void, const char *, uint64_t, char ***, __int16 *, int *))(a1[3] + 96))(a1[1], a1[2], "fecfg", a2, &v12, &v11, &__c);
  if ((v4 & 0x80000000) == 0 && v11)
  {
    uint64_t v5 = *v12;
    uint64_t v6 = cstdlib_strchr(*v12, __c);
    if (v6) {
      *uint64_t v6 = 0;
    }
    if (v5)
    {
      for (char i = 0; ; ++i)
      {
        int v8 = cstdlib_strchr(v5, 95);
        if (v8) {
          *int v8 = 0;
        }
        unsigned __int16 v9 = a3;
        if (!i) {
          goto LABEL_12;
        }
        if (i == 1) {
          break;
        }
LABEL_13:
        uint64_t v5 = v8 + 1;
        if (!v8) {
          return v4;
        }
      }
      unsigned __int16 v9 = a3 + 1;
LABEL_12:
      *unsigned __int16 v9 = *v5;
      goto LABEL_13;
    }
  }
  return v4;
}

size_t posparser_GetHighestPriority(size_t result, _WORD *a2, int a3)
{
  if ((unsigned __int16)*a2 >= 2u)
  {
    size_t v6 = result;
    unint64_t v7 = 0;
    __int16 v4 = 0;
    unsigned int v8 = 0;
    do
    {
      uint64_t result = cstdlib_strlen(*(const char **)(v6 + 8 * v7));
      if ((_WORD)result)
      {
        unsigned __int8 v9 = 0;
        uint64_t v10 = 0;
        do
        {
          if (*(char *)(*(void *)(v6 + 8 * v7) + v10) == a3) {
            ++v9;
          }
          ++v10;
        }
        while (v9 <= 4u && (unsigned __int16)result > (unsigned __int16)v10);
        if (v9 == 5 && (unsigned __int16)result > (unsigned __int16)v10)
        {
          uint64_t v13 = cstdlib_strchr((char *)(*(void *)(v6 + 8 * v7) + v10), a3);
          if (v13) {
            *uint64_t v13 = 0;
          }
          uint64_t result = cstdlib_atoi((unsigned __int8 *)(*(void *)(v6 + 8 * v7) + v10));
          if (v8 < (unsigned __int16)result)
          {
            uint64_t result = cstdlib_atoi((unsigned __int8 *)(*(void *)(v6 + 8 * v7) + v10));
            unsigned int v8 = (unsigned __int16)result;
            __int16 v4 = v7;
          }
        }
      }
      ++v7;
    }
    while (v7 < (unsigned __int16)*a2);
  }
  else
  {
    __int16 v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t posparserGrowStr(uint64_t a1, uint64_t *a2, unsigned int a3, _WORD *a4, __int16 a5)
{
  if ((unsigned __int16)*a4 >= a3) {
    return 0;
  }
  *a4 = a5 + a3;
  uint64_t v7 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *a2, (unsigned __int16)(a5 + a3) + 2);
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t result = 0;
    *a2 = v12;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v8, v9, v10, v11, v14);
    return 2687508490;
  }
  return result;
}

void *posPInsertTOKMarker(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  unint64_t v5 = *a2;
  if (v5 < 2)
  {
    unsigned __int16 v9 = 1;
  }
  else
  {
    size_t v6 = (unsigned int *)(a1 + 44);
    uint64_t v7 = 1;
    while (1)
    {
      unsigned int v8 = *v6;
      v6 += 8;
      if (a3[3] < v8) {
        break;
      }
      if (v5 == ++v7)
      {
        unsigned __int16 v9 = *a2;
        goto LABEL_8;
      }
    }
    unsigned __int16 v9 = v7;
  }
LABEL_8:
  uint64_t v10 = (void *)(a1 + 32 * v9);
  cstdlib_memmove((void *)(a1 + 32 * (v9 + 1)), v10, 32 * (int)(v5 - v9));
  uint64_t result = cstdlib_memcpy(v10, a3, 0x20uLL);
  ++*a2;
  return result;
}

uint64_t isMAPPINGXBI2A(uint64_t a1, unsigned __int8 *a2)
{
  if (*(_DWORD *)(a1 + 152) == 1) {
    return isCharInStr(a2, "XBI");
  }
  else {
    return 0;
  }
}

uint64_t isCharInStr(unsigned __int8 *a1, const char *a2)
{
  unsigned __int16 v4 = Utf8_LengthInBytes(a1, 1);
  unsigned __int16 v5 = cstdlib_strlen(a2);
  if (!v5) {
    return 0;
  }
  unsigned __int16 v6 = v5;
  unsigned __int16 v7 = 0;
  while (1)
  {
    unsigned __int16 v8 = Utf8_LengthInBytes((unsigned __int8 *)&a2[v7], 1);
    unsigned __int16 v9 = v8;
    if (v8 == v4 && !cstdlib_strncmp((const char *)a1, &a2[v7], v8)) {
      break;
    }
    v7 += v9;
    if (v7 >= v6) {
      return 0;
    }
  }
  return 1;
}

uint64_t isDiacritic(uint64_t a1, unsigned __int8 *a2)
{
  if (*(void *)(a1 + 120)) {
    unsigned int v3 = *(const char **)(a1 + 120);
  }
  else {
    unsigned int v3 = "^FNKauioR";
  }
  return isCharInStr(a2, v3);
}

uint64_t isSMSPunc(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(const char **)(a1 + 104);
  if (v2) {
    return isCharInStr(a2, v2);
  }
  else {
    return 0;
  }
}

uint64_t isPunc_0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(const char **)(a1 + 112);
  if (v2) {
    return isCharInStr(a2, v2);
  }
  else {
    return 0;
  }
}

BOOL isDigit(unsigned __int8 a1)
{
  return a1 - 48 < 0xA;
}

uint64_t inSMSMode(unsigned int a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v5 = 0;
  unint64_t v6 = a3;
  uint64_t v7 = a2 + 32;
  do
  {
    unsigned __int16 v8 = (_WORD *)(a2 + 12 + 32 * v5);
    if (a1 < (unsigned __int16)(*v8 - *(_DWORD *)(a2 + 12))) {
      break;
    }
    if (*(_DWORD *)(a2 + 32 * v5) == 21
      && (unsigned __int16 v9 = *(char **)(a2 + 32 * v5 + 24)) != 0
      && !LH_stricmp(v9, "sms"))
    {
      int v10 = *(_DWORD *)(a2 + 12);
      int v11 = *(_DWORD *)v8 - v10;
      unint64_t v12 = v5 + 1;
      uint64_t v13 = (int *)(v7 + 32 * v5);
      while (1)
      {
        unsigned __int16 v14 = v12;
        if (v12 >= v6) {
          break;
        }
        int v15 = *v13;
        v13 += 8;
        ++v12;
        if (v15 == 21)
        {
          int v16 = *(v13 - 5) - v10;
          goto LABEL_15;
        }
      }
      LOWORD(v16) = *(_WORD *)(a2 + 16);
LABEL_15:
      unint64_t v5 = v14;
      if (a1 >= (unsigned __int16)v11 && (unsigned __int16)v16 > a1) {
        return 1;
      }
    }
    else
    {
      ++v5;
    }
  }
  while (v5 < v6);
  return 0;
}

uint64_t posparserInsertWordMarker(uint64_t a1, uint64_t *a2, _WORD *a3, uint64_t a4, int a5, char *__s, _WORD *a7)
{
  uint64_t v14 = *a2;
  unsigned __int16 v15 = cstdlib_strlen(__s);
  long long __src = xmmword_2206E3758;
  long long v43 = unk_2206E3768;
  unint64_t v19 = (unsigned __int16)*a3;
  if (v19 <= 1)
  {
    LOWORD(v21) = 1;
  }
  else
  {
    uint64_t v20 = (int *)(v14 + 44);
    uint64_t v21 = 1;
    while (1)
    {
      int v22 = *v20;
      v20 += 8;
      if (v22 - *(_DWORD *)(v14 + 12) > a4) {
        break;
      }
      if (v19 == ++v21)
      {
        LOWORD(v21) = *a3;
        break;
      }
    }
  }
  uint64_t v23 = a4;
  if (a4)
  {
    uint64_t v23 = a4;
    int v24 = a4;
    do
    {
      if (__s[(v23 - 1)] == 32) {
        break;
      }
      uint64_t v23 = (unsigned __int16)--v24;
    }
    while ((_WORD)v24);
  }
  unsigned int v41 = a2;
  int v25 = a5;
  if (v15 <= a4)
  {
    unsigned __int16 v27 = a4;
    int v26 = a4;
  }
  else
  {
    int v26 = a4;
    unsigned __int16 v27 = a4;
    do
    {
      if (__s[v26 + 1] == 32) {
        break;
      }
      int v26 = ++v27;
    }
    while (v15 > v27);
  }
  uint64_t v28 = (unsigned __int16)v21;
  if (v19 < 2)
  {
LABEL_22:
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Could not resolve references pos (previously logged as Public 68004). Word start pos=%d. Word end pos=%d. This pos=%d", v16, v17, v18, v23);
    unsigned __int16 v29 = v28 - 1;
  }
  else
  {
    unsigned __int16 v29 = 1;
    while (*(_DWORD *)(v14 + 32 * v29) != 1
         || *(_DWORD *)(v14 + 32 * v29 + 12) - *(_DWORD *)(v14 + 12) != v23)
    {
      if (v19 <= ++v29) {
        goto LABEL_22;
      }
    }
  }
  *a7 = v29 + 1;
  unsigned __int8 v30 = (_DWORD *)(v14 + 32 * v29);
  if (a4 == v27) {
    int v31 = 1;
  }
  else {
    int v31 = v26 - a4;
  }
  DWORD1(__src) = v30[1] - (v26 - a4) + v30[2];
  DWORD2(__src) = v31;
  v30[2] = a4 - v23;
  char v30[4] = a4 - v23;
  HIDWORD(__src) = a4 + v25 + *(_DWORD *)(v14 + 12);
  LODWORD(v43) = v26 - a4;
  uint64_t v32 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v14, 32 * (unsigned __int16)*a3 + 32);
  if (v32)
  {
    uint64_t v37 = v32;
    int v38 = (unsigned __int16)*a3;
    if (v28 != v38) {
      cstdlib_memmove((void *)(v32 + 32 * (v28 + 1)), (const void *)(v32 + 32 * v28), 32 * (v38 - (int)v28));
    }
    cstdlib_memcpy((void *)(v37 + 32 * v28), &__src, 0x20uLL);
    uint64_t result = 0;
    ++*a3;
    *unsigned int v41 = v37;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v33, v34, v35, v36, v40);
    return 2687508490;
  }
  return result;
}

uint64_t posparser_applyEmbeddedRules(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (!*(_DWORD *)(a2 + 104 * i + 88)
        && !*(_DWORD *)(a2 + 104 * i + 80)
        && !*(_DWORD *)(a2 + 104 * i + 84)
        && !*(_DWORD *)(a2 + 104 * i + 92)
        && !*(_DWORD *)(a2 + 104 * i + 12))
      {
        uint64_t v6 = a2 + 104 * i;
        int v9 = *(unsigned __int16 *)(v6 + 10);
        uint64_t v7 = (unsigned __int16 *)(v6 + 10);
        int v8 = v9;
        uint64_t v10 = *(v7 - 1);
        unsigned int v11 = (unsigned __int16)(v10 + 1);
        int v12 = v9 - 1;
        BOOL v13 = v11 >= a5 || v11 == 0;
        if (!v13 && v12 > (int)v11)
        {
          uint64_t v15 = v10 + 1;
          unsigned int v16 = *(unsigned __int16 *)(a1 + 184);
          unsigned int v17 = v16;
          do
          {
            if (v17)
            {
              uint64_t v18 = 0;
              unint64_t v19 = 0;
              int v20 = *(unsigned __int8 *)(a4 + v15);
              do
              {
                uint64_t v21 = *(void *)(a1 + 176);
                if (v20 == *(unsigned __int8 *)(v21 + v18))
                {
                  int v20 = *(unsigned __int8 *)(v21 + v18 + 1);
                  *(unsigned char *)(a4 + v15) = v20;
                  unsigned int v16 = *(unsigned __int16 *)(a1 + 184);
                }
                ++v19;
                v18 += 2;
              }
              while (v19 < v16);
              int v8 = *v7;
              unsigned int v17 = v16;
            }
            ++v15;
          }
          while (v15 < a5 && v8 - 1 > (int)v15);
        }
      }
    }
  }
  return 0;
}

BOOL isSpecialWord(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 104 * a2 + 12) == 1 || *(_WORD *)(a1 + 104 * a2 + 74) != 0;
}

uint64_t setPosparserFeatureVector(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  __int16 v85 = 0;
  uint64_t v15 = 0;
  if (posparser_isFeatureRequired(a3, 0, &v85, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 0, a5, a2, a8, *(_DWORD *)(a1 + 236));
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
  }
  if (posparser_isFeatureRequired(a3, 1, &v85, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    if (!a4)
    {
      uint64_t v21 = *(void *)a1;
      int v22 = *(_DWORD *)(a1 + 236);
      int v20 = "SB";
      goto LABEL_17;
    }
    uint64_t v16 = a6 + 104 * (a4 - 1);
    unint64_t v19 = *(const char **)(v16 + 40);
    uint64_t v18 = (const char **)(v16 + 40);
    unsigned int v17 = v19;
    if (v19)
    {
      if (!cstdlib_strcmp(v17, "MULTIWORD"))
      {
        LOWORD(v23) = a4;
        do
        {
          __int16 v24 = v23 - 1;
          int v23 = (__int16)(v23 - 1);
          if (v24 < 0) {
            break;
          }
          int v25 = *(const char **)(a6 + 104 * (unsigned __int16)v23 + 40);
          if (!v25) {
            break;
          }
        }
        while (!cstdlib_strcmp(v25, "MULTIWORD"));
        uint64_t v21 = *(void *)a1;
        int v20 = *(const char **)(a6 + 104 * v23 + 40);
        goto LABEL_16;
      }
      int v20 = *v18;
    }
    else
    {
      int v20 = 0;
    }
    uint64_t v21 = *(void *)a1;
LABEL_16:
    int v22 = *(_DWORD *)(a1 + 236);
LABEL_17:
    uint64_t v15 = posparser_setFeature(a3, v21, 1, a5, v20, a8, v22);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
  }
  if (posparser_isFeatureRequired(a3, 2, &v85, a8, *(_DWORD *)(a1 + 236)) != 1) {
    goto LABEL_35;
  }
  unsigned int v26 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v27 = a6 + 104 * v26;
    unsigned __int8 v30 = *(const char **)(v27 + 40);
    unsigned __int16 v29 = (const char **)(v27 + 40);
    uint64_t v28 = v30;
    if (v30)
    {
      if (!cstdlib_strcmp(v28, "MULTIWORD"))
      {
        __int16 v34 = a4 - 2;
        if ((v26 & 0x8000) == 0)
        {
          while (1)
          {
            uint64_t v35 = *(const char **)(a6 + 104 * (unsigned __int16)v34 + 40);
            if (!v35 || cstdlib_strcmp(v35, "MULTIWORD")) {
              break;
            }
            int v36 = v34--;
            if (v36 <= 0)
            {
              __int16 v34 = -1;
              break;
            }
          }
        }
        uint64_t v32 = *(void *)a1;
        int v31 = *(const char **)(a6 + 104 * v34 + 40);
        goto LABEL_33;
      }
      int v31 = *v29;
    }
    else
    {
      int v31 = 0;
    }
    uint64_t v32 = *(void *)a1;
LABEL_33:
    int v33 = *(_DWORD *)(a1 + 236);
    goto LABEL_34;
  }
  if (a4 != 1) {
    goto LABEL_35;
  }
  uint64_t v32 = *(void *)a1;
  int v33 = *(_DWORD *)(a1 + 236);
  int v31 = "SB";
LABEL_34:
  uint64_t v15 = posparser_setFeature(a3, v32, 2, a5, v31, a8, v33);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
LABEL_35:
  if (posparser_isFeatureRequired(a3, 3, &v85, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    uint64_t v37 = *(const char **)(a6 + 104 * a4 + 48);
    if (!v37) {
      uint64_t v37 = *(const char **)(a6 + 104 * a4 + 40);
    }
    uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 3, a5, v37, a8, *(_DWORD *)(a1 + 236));
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
  }
  unsigned int v83 = a4 + 1;
  if (a4 + 1 < a7 && posparser_isFeatureRequired(a3, 4, &v85, a8, *(_DWORD *)(a1 + 236)) == 1)
  {
    int v38 = *(const char **)(a6 + 104 * v83 + 48);
    if (!v38) {
      int v38 = *(const char **)(a6 + 104 * v83 + 40);
    }
    uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 4, a5, v38, a8, *(_DWORD *)(a1 + 236));
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
  }
  if (posparser_isFeatureRequired(a3, 9, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 10, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 11, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 12, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 13, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 14, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 15, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
    && posparser_isFeatureRequired(a3, 16, &v85, a8, *(_DWORD *)(a1 + 236)) != 1)
  {
    goto LABEL_102;
  }
  int v39 = cstdlib_strlen(a2);
  unsigned __int16 v40 = Utf8_LengthInUtf8chars((unint64_t)a2, v39);
  uint64_t v41 = posparser_setFeature(a3, *(void *)a1, 9, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v41 & 0x80000000) != 0) {
    return v41;
  }
  uint64_t v41 = posparser_setFeature(a3, *(void *)a1, 10, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v41 & 0x80000000) != 0) {
    return v41;
  }
  uint64_t v41 = posparser_setFeature(a3, *(void *)a1, 11, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v41 & 0x80000000) != 0) {
    return v41;
  }
  uint64_t v41 = posparser_setFeature(a3, *(void *)a1, 12, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v41 & 0x80000000) != 0) {
    return v41;
  }
  uint64_t v41 = posparser_setFeature(a3, *(void *)a1, 13, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v41 & 0x80000000) != 0) {
    return v41;
  }
  uint64_t v41 = posparser_setFeature(a3, *(void *)a1, 14, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v41 & 0x80000000) != 0) {
    return v41;
  }
  uint64_t v41 = posparser_setFeature(a3, *(void *)a1, 15, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v41 & 0x80000000) != 0) {
    return v41;
  }
  uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 16, a5, "=", a8, *(_DWORD *)(a1 + 236));
  if ((v15 & 0x80000000) == 0)
  {
    int v42 = v40;
    if (v40)
    {
      int v43 = 0;
      unsigned int v44 = 0;
      BOOL v76 = v42 != 2;
      BOOL v77 = v42 != 3;
      BOOL v79 = v42 != 4;
      int v80 = v42;
      do
      {
        unsigned int v81 = v44;
        int v82 = v43;
        if (v42 == 1 || v43)
        {
          if (v42 == 2 || v43 != -1)
          {
            if (v42 != 3 && v43 == -2)
            {
              cstdlib_memset(__b, 0, 0x10uLL);
              int v49 = utf8_determineUTF8CharLength(a2[v44]);
              cstdlib_strncpy(__b, a2, v49 + v44);
              uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 11, a5, __b, a8, *(_DWORD *)(a1 + 236));
              if ((v15 & 0x80000000) != 0) {
                return v15;
              }
              char v47 = 1;
              char v45 = v79;
LABEL_78:
              char v46 = 1;
              goto LABEL_79;
            }
            if (v42 == 4)
            {
              char v45 = v79;
              char v47 = v76;
              char v46 = v77;
              goto LABEL_79;
            }
            char v45 = v79;
            char v47 = v76;
            char v46 = v77;
            if (v82 == -3)
            {
              cstdlib_memset(__b, 0, 0x10uLL);
              int v50 = utf8_determineUTF8CharLength(a2[v44]);
              cstdlib_strncpy(__b, a2, v50 + v44);
              uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 12, a5, __b, a8, *(_DWORD *)(a1 + 236));
              if ((v15 & 0x80000000) != 0) {
                return v15;
              }
              char v45 = 1;
              char v47 = 1;
              goto LABEL_78;
            }
          }
          else
          {
            cstdlib_memset(__b, 0, 0x10uLL);
            int v48 = utf8_determineUTF8CharLength(a2[v44]);
            cstdlib_strncpy(__b, a2, v48 + v44);
            uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 10, a5, __b, a8, *(_DWORD *)(a1 + 236));
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            char v47 = 1;
            char v45 = v79;
            char v46 = v77;
          }
        }
        else
        {
          cstdlib_memset(__b, 0, 0x10uLL);
          utf8_getUTF8Char((uint64_t)a2, 0, __b);
          uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 9, a5, __b, a8, *(_DWORD *)(a1 + 236));
          char v45 = v79;
          char v47 = v76;
          char v46 = v77;
          if ((v15 & 0x80000000) != 0) {
            return v15;
          }
        }
LABEL_79:
        int v51 = v80 + v82;
        if (v80 != 1 && v51 == 1)
        {
          char v78 = v45;
          char v52 = v46;
          cstdlib_memset(__b, 0, 0x10uLL);
          utf8_getUTF8Char((uint64_t)a2, v81, __b);
          uint64_t v53 = posparser_setFeature(a3, *(void *)a1, 13, a5, __b, a8, *(_DWORD *)(a1 + 236));
          char v46 = v52;
          char v45 = v78;
          uint64_t v15 = v53;
          if ((v53 & 0x80000000) != 0) {
            return v15;
          }
        }
        char v54 = v47 ^ 1;
        if (v51 != 2) {
          char v54 = 1;
        }
        if (v54)
        {
          int v56 = v82;
          char v57 = v46 ^ 1;
          if (v80 + v82 != 3) {
            char v57 = 1;
          }
          if ((v57 & 1) == 0)
          {
            cstdlib_memset(__b, 0, 0x10uLL);
            unsigned int v55 = v81;
            cstdlib_strcpy(__b, &a2[v81]);
            uint64_t v58 = *(void *)a1;
            int v59 = *(_DWORD *)(a1 + 236);
            uint64_t v60 = a3;
            int v61 = 15;
            goto LABEL_96;
          }
          if (v80 + v82 == 4) {
            char v62 = v45;
          }
          else {
            char v62 = 0;
          }
          if (v62)
          {
            cstdlib_memset(__b, 0, 0x10uLL);
            unsigned int v55 = v81;
            cstdlib_strcpy(__b, &a2[v81]);
            uint64_t v58 = *(void *)a1;
            int v59 = *(_DWORD *)(a1 + 236);
            uint64_t v60 = a3;
            int v61 = 16;
LABEL_96:
            uint64_t v15 = posparser_setFeature(v60, v58, v61, a5, __b, a8, v59);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            goto LABEL_99;
          }
          unsigned int v55 = v81;
        }
        else
        {
          cstdlib_memset(__b, 0, 0x10uLL);
          unsigned int v55 = v81;
          cstdlib_strcpy(__b, &a2[v81]);
          uint64_t v15 = posparser_setFeature(a3, *(void *)a1, 14, a5, __b, a8, *(_DWORD *)(a1 + 236));
          int v56 = v82;
          if ((v15 & 0x80000000) != 0) {
            return v15;
          }
        }
LABEL_99:
        unsigned int v44 = utf8_determineUTF8CharLength(a2[v55]) + v55;
        int v43 = v56 - 1;
        int v42 = v80;
      }
      while (v80 + v43);
    }
LABEL_102:
    if (posparser_isFeatureRequired(a3, 5, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
      || (a4
       && *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 - 1) + 12) != 1
       && !*(_WORD *)(a6 + 104 * (unsigned __int16)(a4 - 1) + 74)
        ? (const char *)(uint64_t v63 = *(void *)a1,
                         long long v65 = *(const char **)(a6 + 104 * (a4 - 1) + 56),
                         int v64 = *(_DWORD *)(a1 + 236))
        : (uint64_t v63 = *(void *)a1, v64 = *(_DWORD *)(a1 + 236), v65 = "="),
          uint64_t v15 = posparser_setFeature(a3, v63, 5, a5, v65, a8, v64),
          (v15 & 0x80000000) == 0))
    {
      if (posparser_isFeatureRequired(a3, 6, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
        || (a4 >= 2
         && *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 - 2) + 12) != 1
         && !*(_WORD *)(a6 + 104 * (unsigned __int16)(a4 - 2) + 74)
          ? (const char *)(uint64_t v66 = *(void *)a1,
                           int v68 = *(const char **)(a6 + 104 * (a4 - 2) + 56),
                           int v67 = *(_DWORD *)(a1 + 236))
          : (uint64_t v66 = *(void *)a1, v67 = *(_DWORD *)(a1 + 236), v68 = "="),
            uint64_t v15 = posparser_setFeature(a3, v66, 6, a5, v68, a8, v67),
            (v15 & 0x80000000) == 0))
      {
        if (posparser_isFeatureRequired(a3, 7, &v85, a8, *(_DWORD *)(a1 + 236)) != 1
          || (v83 < a7
           && *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 + 1) + 12) != 1
           && !*(_WORD *)(a6 + 104 * (unsigned __int16)(a4 + 1) + 74)
            ? (const char *)(uint64_t v69 = *(void *)a1,
                             unsigned int v71 = *(const char **)(a6 + 104 * v83 + 56),
                             int v70 = *(_DWORD *)(a1 + 236))
            : (uint64_t v69 = *(void *)a1, v70 = *(_DWORD *)(a1 + 236), v71 = "="),
              uint64_t v15 = posparser_setFeature(a3, v69, 7, a5, v71, a8, v70),
              (v15 & 0x80000000) == 0))
        {
          if (posparser_isFeatureRequired(a3, 8, &v85, a8, *(_DWORD *)(a1 + 236)) == 1)
          {
            if (a4 + 2 >= a7
              || *(_DWORD *)(a6 + 104 * (unsigned __int16)(a4 + 2) + 12) == 1
              || *(_WORD *)(a6 + 104 * (unsigned __int16)(a4 + 2) + 74))
            {
              uint64_t v72 = *(void *)a1;
              int v73 = *(_DWORD *)(a1 + 236);
              uint64_t v74 = "=";
            }
            else
            {
              uint64_t v72 = *(void *)a1;
              uint64_t v74 = *(const char **)(a6 + 104 * (a4 + 2) + 56);
              int v73 = *(_DWORD *)(a1 + 236);
            }
            return posparser_setFeature(a3, v72, 8, a5, v74, a8, v73);
          }
        }
      }
    }
  }
  return v15;
}

uint64_t posparser_GetPOSAndDiacritics(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char *a5, unsigned int a6, int a7, uint64_t a8, unsigned __int16 a9, unsigned __int8 a10, _DWORD *a11)
{
  v88[0] = 0;
  int v87 = 0;
  size_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = 0;
  size_t v83 = 0;
  *a11 = 0;
  __int16 v75 = a6;
  uint64_t v16 = a4 + 104 * a6;
  *(_WORD *)(v16 + 32) = 0;
  unsigned int v17 = (_WORD *)(v16 + 32);
  if (a9)
  {
    for (uint64_t i = 0; i != a9; ++i)
    {
      unint64_t v19 = *(char **)(a8 + 8 * i);
      while (1)
      {
        int v20 = cstdlib_strchr(v19, 32);
        if (!v20) {
          break;
        }
        unint64_t v19 = v20 + 1;
        ++*v17;
      }
    }
    uint64_t v21 = 16 * (unsigned __int16)*v17;
    int v22 = a5;
  }
  else
  {
    int v22 = a5;
    uint64_t v21 = 0;
  }
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v21);
  uint64_t v28 = a4 + 104 * a6;
  *(void *)(v28 + 24) = v23;
  unsigned __int16 v29 = (uint64_t *)(v28 + 24);
  if (!v23)
  {
LABEL_58:
    uint64_t v69 = 2687508490;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v24, v25, v26, v27, v71);
    return v69;
  }
  *unsigned int v17 = 0;
  if (!a9)
  {
    uint64_t v69 = 0;
LABEL_60:
    heap_Free(*(void **)(*(void *)a1 + 8), *v29);
    *unsigned __int16 v29 = 0;
    goto LABEL_61;
  }
  unsigned int isReconcilable = 0;
  int v30 = 0;
  __int16 v74 = a7;
  uint64_t v72 = a4;
  unsigned int v73 = a6;
  unsigned int v31 = a6 + a7;
  uint64_t v32 = 0;
  BOOL v76 = (unsigned __int16 *)(a4 + 104 * v31 + 10);
  BOOL v77 = (unsigned __int16 *)(a4 + 104 * a6 + 8);
  do
  {
    int v33 = cstdlib_strchr(*(char **)(a8 + 8 * v32), a10);
    if (v33) {
      *int v33 = 0;
    }
    uint64_t v79 = v32;
    __int16 v34 = *(char **)(a8 + 8 * v32);
    uint64_t v35 = cstdlib_strchr(v34, 32);
    if (v34)
    {
      int v39 = v35;
      do
      {
        if (v39) {
          *int v39 = 0;
        }
        if (v30)
        {
          if (*(_DWORD *)(a1 + 248))
          {
            if (!v86 && (uint64_t v86 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 1)) == 0
              || !v84 && (uint64_t v84 = (const char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 1)) == 0)
            {
              uint64_t v69 = 2687508490;
              log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v43, v44, v45, v46, v71);
              goto LABEL_61;
            }
            unsigned int isReconcilable = posparser_ExtractPunctuation((void *)a1, v22, &v86, &v85, (unsigned char **)&v84, &v83);
            if ((isReconcilable & 0x80000000) != 0) {
              goto LABEL_57;
            }
            char v47 = *(void **)(*(void *)a1 + 8);
            int v48 = v85;
            int v49 = cstdlib_strlen(v34);
            int v50 = (char *)heap_Calloc(v47, 1, (v48 + v49 + v83 + 1));
            *(void *)(*v29 + 16 * (unsigned __int16)*v17 + 8) = v50;
            if (!v50) {
              goto LABEL_58;
            }
            if (v86)
            {
              cstdlib_strcpy(v50, v86);
              int v50 = *(char **)(*v29 + 16 * (unsigned __int16)*v17 + 8);
            }
            int v22 = a5;
            cstdlib_strcat(v50, v34);
            if (v84) {
              cstdlib_strcat(*(char **)(*v29 + 16 * (unsigned __int16)*v17 + 8), v84);
            }
            goto LABEL_42;
          }
          int v87 = 0;
          if (a2 != 1) {
            goto LABEL_40;
          }
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND \"%s\" in dict as \"%s\" - try reconcile", v36, v37, v38, (uint64_t)v22);
          unsigned int isReconcilable = posparser_isReconcilable(a1, a3, v34, *v77, *v76, &v87, (uint64_t *)v88);
          if ((isReconcilable & 0x80000000) != 0) {
            goto LABEL_57;
          }
          if (v87)
          {
            if (v87 == 1 && v88[0])
            {
              posparser_PostProcess(a1, v88);
              char v57 = *(void **)(*(void *)a1 + 8);
              uint64_t v58 = v88[0];
              int v59 = cstdlib_strlen(v88[0]);
              uint64_t v60 = (char *)heap_Calloc(v57, 1, (v59 + 1));
              *(void *)(*v29 + 16 * (unsigned __int16)*v17 + 8) = v60;
              if (!v60) {
                goto LABEL_58;
              }
              cstdlib_strcpy(v60, v58);
              heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v58);
              v88[0] = 0;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word=\"%s\" FOUND in TAG[%d] POS=\"%s\" DIA=\"%s\"(RECONCILED)", v61, v62, v63, (uint64_t)v22);
LABEL_43:
              ++*v17;
              if (!v39) {
                goto LABEL_53;
              }
              goto LABEL_44;
            }
LABEL_40:
            int v64 = *(void **)(*(void *)a1 + 8);
            int v65 = cstdlib_strlen(v34);
            uint64_t v66 = (char *)heap_Calloc(v64, 1, (v65 + 1));
            *(void *)(*v29 + 16 * (unsigned __int16)*v17 + 8) = v66;
            if (!v66) {
              goto LABEL_58;
            }
            cstdlib_strcpy(v66, v34);
LABEL_42:
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"word=\"%s\" FOUND in TAG[%d] POS=\"%s\" DIA=\"%s\"", v51, v52, v53, (uint64_t)v22);
            goto LABEL_43;
          }
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND in \"%s\" in dict, but couldnt reconcile with partial diacritics - FAIL ; skip diacritic",
            v54,
            v55,
            v56,
            (uint64_t)v34);
          heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*v29 + 16 * (unsigned __int16)*v17));
          *(void *)(*v29 + 16 * (unsigned __int16)*v17) = 0;
          if (!v39) {
            goto LABEL_53;
          }
        }
        else
        {
          unsigned __int16 v40 = *(void **)(*(void *)a1 + 8);
          int v41 = cstdlib_strlen(v34);
          int v42 = (char *)heap_Calloc(v40, 1, (v41 + 1));
          *(void *)(*v29 + 16 * (unsigned __int16)*v17) = v42;
          if (!v42) {
            goto LABEL_58;
          }
          cstdlib_strcpy(v42, v34);
          if (!v39)
          {
LABEL_53:
            ++v30;
            break;
          }
        }
LABEL_44:
        int v67 = cstdlib_strchr(v39 + 1, 32);
        if (v30) {
          int v68 = 0;
        }
        else {
          int v68 = v39 + 1;
        }
        if (v67) {
          __int16 v34 = v39 + 1;
        }
        else {
          __int16 v34 = v68;
        }
        ++v30;
        int v39 = v67;
      }
      while (v34);
    }
    uint64_t v32 = v79 + 1;
  }
  while (v79 + 1 != a9);
  if (!*v17)
  {
    uint64_t v69 = isReconcilable;
    goto LABEL_60;
  }
  *(_WORD *)(v72 + 104 * v73 + 72) = v74 + v75;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND WORD \"%s\"%d,%d in  POS dict with %d POS tags", v36, v37, v38, (uint64_t)v22);
  *a11 = 1;
LABEL_57:
  uint64_t v69 = isReconcilable;
LABEL_61:
  if (v86) {
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v86);
  }
  if (v84) {
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v84);
  }
  return v69;
}

uint64_t posparser_isReconcilable(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5, _DWORD *a6, uint64_t *a7)
{
  LODWORD(v9) = a5;
  unsigned __int16 v13 = cstdlib_strlen(__s);
  __int16 v98 = 3 * v13;
  *a6 = 1;
  uint64_t v14 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (unsigned __int16)(3 * v13) + 1);
  int v99 = v14;
  if (!v14)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v15, v16, v17, v18, v82);
    return 2687508490;
  }
  uint64_t v19 = (uint64_t)v14;
  cstdlib_strcpy(v14, __s);
  unsigned __int16 v97 = v13;
  if (a4 >= v9 || !v13) {
    goto LABEL_133;
  }
  uint64_t v91 = a7;
  unint64_t v92 = a6;
  unsigned int v20 = 0;
  unint64_t v21 = 0;
  unint64_t v22 = a4;
  unint64_t v9 = v9;
  uint64_t v23 = "^FNKauioR";
  unint64_t v93 = v9;
  do
  {
    if ((unsigned __int16)v20 >= v13) {
      goto LABEL_22;
    }
    uint64_t v24 = (uint64_t)v99;
    unint64_t v95 = v22;
    uint64_t v25 = (unsigned __int8 *)(a2 + v22);
    while (1)
    {
      if (*(void *)(a1 + 120)) {
        uint64_t v26 = *(const char **)(a1 + 120);
      }
      else {
        uint64_t v26 = v23;
      }
      if (isCharInStr((unsigned __int8 *)(v24 + (unsigned __int16)v20), v26))
      {
        int v27 = Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v20), 1);
        goto LABEL_17;
      }
      uint64_t v28 = v23;
      unsigned __int16 v29 = Utf8_LengthInBytes(v25, 1);
      if ((unsigned __int16)Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v20), 1) == v29
        && !cstdlib_strncmp((const char *)v25, (const char *)(v24 + (unsigned __int16)v20), v29))
      {
        unint64_t v30 = v21;
        unint64_t v9 = v93;
        goto LABEL_32;
      }
      if (*(_DWORD *)(a1 + 152) == 1 && *v25 == 65) {
        break;
      }
      int v27 = Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v20), 1);
      uint64_t v23 = v28;
      if ((v27 & 0xFFFE) == 0)
      {
        *a6 = 0;
LABEL_20:
        unint64_t v9 = v93;
LABEL_21:
        unint64_t v22 = v95;
        goto LABEL_22;
      }
LABEL_17:
      v20 += v27;
      if ((unsigned __int16)v20 >= v13) {
        goto LABEL_20;
      }
    }
    unint64_t v30 = *(unsigned __int16 *)(a1 + 208);
    uint64_t v23 = v28;
    if (v30 <= (unsigned __int16)v21)
    {
      unint64_t v30 = v21;
      unint64_t v9 = v93;
      goto LABEL_34;
    }
    unint64_t v31 = (unsigned __int16)v21;
    uint64_t v32 = (unsigned __int16 *)(*(void *)(a1 + 200) + 6 * (unsigned __int16)v21);
    unint64_t v22 = v95;
    while (1)
    {
      unsigned int v33 = *v32;
      v32 += 3;
      BOOL v34 = v95 == v33;
      if (v95 < v33)
      {
        unint64_t v30 = v31;
LABEL_44:
        unint64_t v9 = v93;
        goto LABEL_35;
      }
      if (v34) {
        break;
      }
      ++v31;
      LOWORD(v21) = v21 + 1;
      if (v30 == v31) {
        goto LABEL_44;
      }
    }
    unsigned int v96 = (unsigned __int16)v20;
    if (v30 <= (unsigned __int16)v31)
    {
      int v42 = 0;
      unint64_t v30 = v31;
    }
    else
    {
      int v42 = 0;
      unint64_t v30 = (unsigned __int16)v31;
      uint64_t v43 = 6 * (unsigned __int16)v21;
      do
      {
        uint64_t v44 = *(void *)(a1 + 200);
        if (v22 != *(unsigned __int16 *)(v44 + v43)) {
          break;
        }
        int v45 = cstdlib_strlen((const char *)(v44 + v43 + 2));
        unint64_t v22 = v95;
        v42 += v45;
        ++v30;
        v43 += 6;
      }
      while (v30 < *(unsigned __int16 *)(a1 + 208));
    }
    int v89 = v42;
    utf8_GetPreviousValidUtf8Offset(v24 + (unsigned __int16)v20, &v96);
    if (v96 >= (unsigned __int16)v20) {
      unsigned int v52 = v20;
    }
    else {
      unsigned int v52 = v96;
    }
    if ((_WORD)v52)
    {
      int v53 = 1;
      while (1)
      {
        uint64_t v54 = *(void *)(a1 + 120) ? *(const char **)(a1 + 120) : v28;
        if (!isCharInStr((unsigned __int8 *)(v24 + (unsigned __int16)v52), v54)) {
          break;
        }
        v53 += Utf8_LengthInBytes((unsigned __int8 *)(v24 + (unsigned __int16)v52), 1);
        unsigned int v96 = (unsigned __int16)v52;
        a6 = v92;
        utf8_GetPreviousValidUtf8Offset(v24 + (unsigned __int16)v52, &v96);
        if (v96 < (unsigned __int16)v52) {
          unsigned int v52 = v96;
        }
        if (!(_WORD)v52)
        {
          unsigned int v52 = 0;
          break;
        }
      }
    }
    else
    {
      unsigned int v52 = 0;
      int v53 = 1;
    }
    unint64_t v9 = v93;
    if ((unsigned __int16)v89 <= (unsigned __int16)v53)
    {
      unint64_t v22 = v95;
      if ((unsigned __int16)v89 == (unsigned __int16)v53)
      {
        if ((_WORD)v89)
        {
          uint64_t v56 = 0;
          char __s1 = (char *)(unsigned __int16)v31;
          do
          {
            if (cstdlib_strlen((const char *)(*(void *)(a1 + 200) + 6 * v56 + 2)))
            {
              uint64_t v57 = 0;
              int v58 = 0;
              do
              {
                *(unsigned char *)(v24 + (unsigned __int16)v52++) = *(unsigned char *)(*(void *)(a1 + 200)
                                                                     + 6 * (void)&__s1[v56]
                                                                     + v57
                                                                     + 2);
                uint64_t v57 = (unsigned __int16)++v58;
              }
              while (cstdlib_strlen((const char *)(*(void *)(a1 + 200) + 6 * v56 + 2)) > (unsigned __int16)v58);
            }
            ++v56;
          }
          while (v56 != (unsigned __int16)v89);
          a6 = v92;
          unint64_t v9 = v93;
          uint64_t v23 = v28;
          unint64_t v22 = v95;
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v30 = v31;
      }
      uint64_t v23 = v28;
      goto LABEL_35;
    }
    uint64_t result = posparser_GrowAndInsert((void *)a1, (uint64_t *)&v99, v89, v53, (unsigned __int16)v20, (unsigned __int16)v31, (unsigned __int16)v30, &v97, &v98);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    unsigned int v20 = v89 + v20 - v53;
LABEL_32:
    uint64_t v23 = v28;
LABEL_34:
    unint64_t v22 = v95;
LABEL_35:
    if (*a6 != 1 || (uint64_t v35 = *(unsigned __int16 *)(a1 + 208), v35 <= (unsigned __int16)v30))
    {
      unint64_t v21 = v30;
      goto LABEL_22;
    }
    int v36 = v22 + 1;
    unsigned int v37 = (unsigned __int16)(v22 + 1);
    uint64_t v38 = *(void *)(a1 + 200);
    unint64_t v21 = (unsigned __int16)v30;
    int v39 = (unsigned __int16 *)(v38 + 6 * (unsigned __int16)v30);
    while (1)
    {
      unsigned int v40 = *v39;
      v39 += 3;
      BOOL v41 = v40 == v37;
      if (v40 > v37) {
        goto LABEL_22;
      }
      if (v41) {
        break;
      }
      ++v21;
      LOWORD(v30) = v30 + 1;
      if (v35 == v21)
      {
        unint64_t v21 = *(unsigned __int16 *)(a1 + 208);
        goto LABEL_22;
      }
    }
    if (*(void *)(a1 + 120)) {
      uint64_t v46 = *(const char **)(a1 + 120);
    }
    else {
      uint64_t v46 = v23;
    }
    if (!isCharInStr((unsigned __int8 *)(v38 + 6 * (unsigned __int16)v21 + 2), v46)) {
      goto LABEL_21;
    }
    if (*(unsigned __int16 *)(a1 + 208) <= (unsigned __int16)v21)
    {
      int v47 = 0;
      unint64_t v48 = v21;
    }
    else
    {
      int v47 = 0;
      unint64_t v48 = (unsigned __int16)v21;
      uint64_t v49 = 6 * (unsigned __int16)v30;
      do
      {
        uint64_t v50 = *(void *)(a1 + 200);
        if (v36 != *(unsigned __int16 *)(v50 + v49)) {
          break;
        }
        uint64_t v51 = *(void *)(a1 + 120) ? *(const char **)(a1 + 120) : v28;
        if (!isCharInStr((unsigned __int8 *)(v50 + v49 + 2), v51)) {
          break;
        }
        v47 += cstdlib_strlen((const char *)(*(void *)(a1 + 200) + v49 + 2));
        ++v48;
        v49 += 6;
      }
      while (v48 < *(unsigned __int16 *)(a1 + 208));
    }
    unint64_t v85 = v48;
    int v59 = (unsigned __int16)v20 + 1;
    int v90 = v97;
    if (v97 <= (unsigned __int16)(v20 + 1))
    {
      int v60 = 0;
    }
    else
    {
      int v60 = 0;
      __s1a = v99;
      uint64_t v61 = (unsigned __int16)(v20 + 1);
      do
      {
        if (*(void *)(a1 + 120)) {
          uint64_t v62 = *(const char **)(a1 + 120);
        }
        else {
          uint64_t v62 = v28;
        }
        if (!isCharInStr((unsigned __int8 *)&__s1a[v61], v62)) {
          break;
        }
        v60 += Utf8_LengthInBytes((unsigned __int8 *)&__s1a[v61++], 1);
      }
      while (v90 != (unsigned __int16)v61);
    }
    if ((unsigned __int16)v60 < (unsigned __int16)v47)
    {
      int v63 = (unsigned __int16)v21;
      unint64_t v21 = v85;
      uint64_t result = posparser_GrowAndInsert((void *)a1, (uint64_t *)&v99, v47, v60, (unsigned __int16)(v20 + 1), v63, (unsigned __int16)v85, &v97, &v98);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int v20 = v47 + v20 - v60;
      goto LABEL_130;
    }
    if ((unsigned __int16)v60 != (unsigned __int16)v47)
    {
      if ((unsigned __int16)v60 > (unsigned __int16)v47)
      {
        int v68 = 0;
        int v69 = 0;
        unsigned __int16 v70 = v60 - v47;
        uint64_t v83 = (uint64_t)v99;
        unint64_t v22 = v95;
        do
        {
          unsigned int v71 = v68 + (unsigned __int16)v21;
          if (v71 >= *(unsigned __int16 *)(a1 + 208)) {
            break;
          }
          uint64_t v72 = (const char *)(*(void *)(a1 + 200) + 6 * v71 + 2);
          size_t v73 = cstdlib_strlen(v72);
          if (cstdlib_strncmp((const char *)(v83 + (v68 + v59)), v72, v73))
          {
            unint64_t v22 = v95;
            break;
          }
          v69 += cstdlib_strlen((const char *)(*(void *)(a1 + 200) + 6 * v71 + 2));
          int v68 = (unsigned __int16)v69;
          unint64_t v22 = v95;
        }
        while ((unsigned __int16)v69 < v70);
        if (v70 == (unsigned __int16)v69)
        {
          a6 = v92;
          unint64_t v9 = v93;
          uint64_t v23 = v28;
          goto LABEL_22;
        }
        unsigned __int16 v74 = v70 - v69;
        unsigned int v75 = (unsigned __int16)(v70 - v69);
        uint64_t v76 = (uint64_t)v99;
        unsigned __int16 v84 = v74;
        cstdlib_memmove(&v99[v68 + v59], &v99[v68 + v59 + v74], v90 - v74);
        if (v75 > (unsigned __int16)v69)
        {
          do
          {
            uint64_t v77 = (unsigned __int16)v21 + (unsigned __int16)v69;
            if (v77 >= *(unsigned __int16 *)(a1 + 208)) {
              break;
            }
            int __s1b = (unsigned __int16)v69;
            if (cstdlib_strlen((const char *)(*(void *)(a1 + 200) + 6 * v77 + 2)))
            {
              uint64_t v78 = 0;
              int v79 = 0;
              do
              {
                *(unsigned char *)(v76 + (v59 + __s1b) + (unint64_t)(unsigned __int16)v79) = *(unsigned char *)(*(void *)(a1 + 200) + 6 * v77 + v78 + 2);
                int v80 = v79 + 1;
                uint64_t v78 = (unsigned __int16)(v79 + 1);
                size_t v81 = cstdlib_strlen((const char *)(*(void *)(a1 + 200) + 6 * v77 + 2));
                int v79 = v80;
              }
              while (v81 > (unsigned __int16)v80);
            }
            LOWORD(v69) = __s1b + 1;
          }
          while ((unsigned __int16)(__s1b + 1) < v84);
        }
        unsigned __int16 v97 = v90 - v84;
        *(unsigned char *)(v76 + (unsigned __int16)(v90 - v84)) = 0;
        a6 = v92;
      }
      goto LABEL_130;
    }
    unint64_t v64 = v85;
    if ((unsigned __int16)v85 <= (unsigned __int16)v21)
    {
      unint64_t v21 = v85;
LABEL_130:
      unint64_t v9 = v93;
      uint64_t v23 = v28;
      goto LABEL_21;
    }
    uint64_t v65 = (uint64_t)v99;
    unint64_t v21 = (unsigned __int16)v21;
    uint64_t v23 = v28;
    unint64_t v22 = v95;
    do
    {
      if (*(unsigned __int16 *)(a1 + 208) < (unsigned __int16)v64) {
        break;
      }
      if (cstdlib_strlen((const char *)(*(void *)(a1 + 200) + 6 * v21 + 2)))
      {
        uint64_t v66 = 0;
        int v67 = 0;
        do
        {
          *(unsigned char *)(v65 + (unsigned __int16)v59++) = *(unsigned char *)(*(void *)(a1 + 200) + 6 * v21 + v66 + 2);
          uint64_t v66 = (unsigned __int16)++v67;
        }
        while (cstdlib_strlen((const char *)(*(void *)(a1 + 200) + 6 * v21 + 2)) > (unsigned __int16)v67);
      }
      ++v21;
      a6 = v92;
      unint64_t v22 = v95;
      unint64_t v64 = v85;
    }
    while (v21 < (unsigned __int16)v85);
    unint64_t v21 = v64;
    unint64_t v9 = v93;
LABEL_22:
    if (++v22 >= v9) {
      break;
    }
    ++v20;
    unsigned __int16 v13 = v97;
  }
  while (v97 > (unsigned __int16)v20);
  uint64_t v19 = (uint64_t)v99;
  a7 = v91;
LABEL_133:
  if (!*a6)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v19);
    uint64_t v19 = 0;
  }
  uint64_t result = 0;
  *a7 = v19;
  return result;
}

uint64_t posparser_PostProcess(uint64_t a1, const char **a2)
{
  if (!*(_WORD *)(a1 + 168))
  {
    if (LH_stricmp("arx", (char *)(a1 + 186))) {
      return 0;
    }
    uint64_t v26 = *a2;
    int v27 = cstdlib_strlen(*a2);
    if (!(_WORD)v27)
    {
LABEL_77:
      uint64_t result = 0;
      *a2 = v26;
      return result;
    }
    unsigned int v28 = (unsigned __int16)v27;
    uint64_t v29 = -2;
    uint64_t v30 = 3;
    int v31 = v27;
    while (1)
    {
      unint64_t v32 = v30 - 2;
      unint64_t v33 = v28;
      if (v30 - 2 < (unint64_t)v28)
      {
        BOOL v34 = (char *)&v26[v30 - 3];
        unsigned int v35 = *v34;
        if (v35 > 0x68)
        {
          if (v35 == 111)
          {
            if (v26[v30 - 2] == 111) {
              goto LABEL_67;
            }
          }
          else if (v35 == 105 && v26[v30 - 2] == 105)
          {
LABEL_67:
            unsigned int v37 = (char *)&v26[v30 - 2];
LABEL_68:
            cstdlib_memmove(v34, v37, v29 + v33 + 1);
            goto LABEL_69;
          }
        }
        else if (v35 == 94)
        {
          if (v26[v30 - 2] == 94) {
            goto LABEL_67;
          }
        }
        else if (v35 == 97 && v26[v30 - 2] == 97)
        {
          goto LABEL_67;
        }
      }
      if (v30 == v33)
      {
        int v36 = &v26[v30];
        BOOL v34 = (char *)&v26[v30 - 3];
        if (*v34 == 70)
        {
          int v38 = *((unsigned __int8 *)v36 - 2);
          unsigned int v37 = (char *)(v36 - 2);
          if (v38 == 65 && v26[v30 - 1] == 70) {
            goto LABEL_68;
          }
        }
      }
      if (v32 < v33)
      {
        int v39 = &v26[v30];
        if (v26[v30 - 3] == 73)
        {
          int v41 = *((unsigned __int8 *)v39 - 2);
          unsigned int v40 = v39 - 2;
          if (v41 == 97)
          {
            if (v30 - 1 < v33 && v26[v30 - 1] == 112) {
              goto LABEL_71;
            }
            cstdlib_memmove((void *)&v26[v30 - 3], v40, v29 + v33 + 1);
            v26[v30 - 3] = 73;
LABEL_69:
            --v31;
LABEL_70:
            v26[(unsigned __int16)v31] = 0;
            goto LABEL_71;
          }
        }
      }
      if (v30 - 1 < v33)
      {
        BOOL v34 = (char *)&v26[v30 - 3];
        int v42 = *v34;
        if (v42 == 82)
        {
          if (v26[v30 - 2] != 82 || v26[v30 - 1] != 82) {
            goto LABEL_71;
          }
          cstdlib_memmove(v34, &v26[v30 - 1], v29 + v33);
          v31 -= 2;
          goto LABEL_70;
        }
        if (v42 == 97)
        {
          unsigned int v37 = (char *)&v26[v30 - 2];
          int v43 = *v37;
          if (v43 == 65)
          {
            int v44 = v26[v30 - 1];
            if (v44 == 97)
            {
              *unsigned int v37 = 66;
              goto LABEL_71;
            }
            if (v44 != 70) {
              goto LABEL_71;
            }
          }
          else if (v43 != 97 || v26[v30 - 1] != 73)
          {
            goto LABEL_71;
          }
          goto LABEL_68;
        }
      }
LABEL_71:
      unsigned int v28 = (unsigned __int16)v31;
      ++v30;
      --v29;
      if (v32 >= (unsigned __int16)v31) {
        goto LABEL_77;
      }
    }
  }
  unsigned __int16 v4 = *a2;
  int v5 = cstdlib_strlen(*a2);
  uint64_t v46 = a2;
  if (!(_WORD)v5)
  {
LABEL_30:
    uint64_t result = 0;
    const char *v46 = v4;
    return result;
  }
  int v6 = 0;
  uint64_t v45 = (unsigned __int16)v5 + 1;
  int v7 = v5;
  while (!*(_WORD *)(a1 + 168))
  {
LABEL_29:
    if ((unsigned __int16)++v6 >= (unsigned __int16)v7) {
      goto LABEL_30;
    }
  }
  unint64_t v8 = 0;
  uint64_t v9 = 24;
  while (1)
  {
    uint64_t v10 = *(void *)(a1 + 160) + v9;
    size_t v11 = *(unsigned __int16 *)(v10 - 8);
    if (v11 + (unsigned __int16)v6 > (unsigned __int16)v7
      || cstdlib_strncmp(&v4[(unsigned __int16)v6], *(const char **)(v10 - 16), v11))
    {
      goto LABEL_8;
    }
    uint64_t v12 = *(void *)(a1 + 160);
    int v13 = *(_DWORD *)(v12 + v9 - 24);
    if (v13 != 1) {
      break;
    }
    if (*(unsigned __int16 *)(v12 + v9 - 8) + (unsigned __int16)v6 == (unsigned __int16)v7) {
      goto LABEL_20;
    }
LABEL_8:
    ++v8;
    v9 += 56;
    if (v8 >= *(unsigned __int16 *)(a1 + 168)) {
      goto LABEL_29;
    }
  }
  if (v13 != 2)
  {
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_8;
  }
  unsigned int v14 = *(unsigned __int16 *)(v12 + v9 - 8) + (unsigned __int16)v6;
  if (v14 > (unsigned __int16)v7) {
    goto LABEL_8;
  }
  size_t v15 = *(unsigned __int16 *)(v12 + v9 + 24);
  if (v14 + v15 > (unsigned __int16)v7
    || !cstdlib_strncmp(&v4[v14], *(const char **)(v12 + v9 + 16), v15))
  {
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(a1 + 160);
LABEL_20:
  uint64_t v16 = *(unsigned __int16 *)(v12 + v9 - 8);
  uint64_t v17 = *(unsigned __int16 *)(v12 + v9 + 8);
  if (v16 >= v17)
  {
LABEL_23:
    int v23 = v16 - v17;
    if (v16 >= v17)
    {
      if (v16 > v17)
      {
        cstdlib_memmove((void *)&v4[(unsigned __int16)v6], &v4[(unsigned __int16)v6 + (unsigned __int16)v23], (unsigned __int16)v7 - ((unsigned __int16)v6 + (unsigned __int16)v23));
        cstdlib_memcpy((void *)&v4[(unsigned __int16)v6], *(const void **)(*(void *)(a1 + 160) + v9), *(unsigned __int16 *)(*(void *)(a1 + 160) + v9 + 8));
        v7 -= v23;
      }
      else
      {
        cstdlib_memcpy((void *)&v4[(unsigned __int16)v6], *(const void **)(v12 + v9), v17);
      }
    }
    else
    {
      int v24 = v17 - v16;
      cstdlib_memmove((void *)&v4[(unsigned __int16)v6 + (unsigned __int16)(v17 - v16)], &v4[(unsigned __int16)v6], (unsigned __int16)v7 - (unsigned __int16)v6);
      cstdlib_memcpy((void *)&v4[(unsigned __int16)v6], *(const void **)(*(void *)(a1 + 160) + v9), *(unsigned __int16 *)(*(void *)(a1 + 160) + v9 + 8));
      v7 += v24;
      v6 += *(unsigned __int16 *)(*(void *)(a1 + 160) + v9 + 8);
    }
    v4[(unsigned __int16)v7] = 0;
    goto LABEL_29;
  }
  uint64_t v18 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v4, v45 - v16 + v17);
  if (v18)
  {
    unsigned __int16 v4 = (const char *)v18;
    uint64_t v12 = *(void *)(a1 + 160);
    LODWORD(v16) = *(unsigned __int16 *)(v12 + v9 - 8);
    LODWORD(v17) = *(unsigned __int16 *)(v12 + v9 + 8);
    goto LABEL_23;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v19, v20, v21, v22, v45);
  return 2687508490;
}

uint64_t posparser_Open(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 2687508487;
  if (a2)
  {
    int v5 = (void *)heap_Calloc(*(void **)(a1 + 8), 264, 1);
    *a2 = (uint64_t)v5;
    if (v5)
    {
      *int v5 = a1;
      *(void *)(*a2 + 80) = 0;
      uint64_t v10 = *a2;
      *(unsigned char *)(v10 + 97) = 1;
      *(_WORD *)(v10 + 98) = 250;
      *(void *)(v10 + 88) = 0;
      uint64_t v11 = *a2;
      *(_DWORD *)(v11 + 64) = 0;
      *(unsigned char *)(v11 + 68) = 1;
      *(unsigned char *)(v11 + 72) = 1;
      *(void *)(v11 + 112) = 0;
      *(void *)(*a2 + 104) = 0;
      *(void *)(*a2 + 120) = 0;
      *(void *)(*a2 + 128) = 0;
      *(void *)(*a2 + 136) = 0;
      *(void *)(*a2 + 144) = 0;
      cstdlib_strncpy((char *)(*a2 + 186), "arx", 3uLL);
      uint64_t v2 = 0;
      *(unsigned char *)(*a2 + 189) = 0;
      uint64_t v12 = *a2;
      *(void *)(v12 + 152) = 0x100000001;
      *(void *)(v12 + 160) = 0;
      uint64_t v13 = *a2;
      *(_DWORD *)(v13 + 192) = 1;
      *(_WORD *)(v13 + 168) = 0;
      *(void *)(v13 + 200) = 0;
      uint64_t v14 = *a2;
      *(_DWORD *)(v14 + 208) = 0;
      *(void *)(v14 + 176) = 0;
      uint64_t v15 = *a2;
      *(_WORD *)(v15 + 184) = 0;
      *(void *)(v15 + 232) = 0;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v6, v7, v8, v9, v17);
      return 2687508490;
    }
  }
  return v2;
}

void *posparser_Close(void *result)
{
  if (result) {
    return heap_Free(*(void **)(*result + 8), (uint64_t)result);
  }
  return result;
}

uint64_t posparser_ExtractWords(_DWORD *a1, uint64_t a2, unsigned int a3, const char *a4, unsigned int a5, uint64_t *a6, unsigned __int16 *a7)
{
  uint64_t v7 = a7;
  *a7 = 0;
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 104 * a3 + 104);
  if (v14)
  {
    uint64_t v19 = v14;
    unint64_t v93 = a6;
    unint64_t v20 = a3;
    unint64_t v104 = a3;
    unsigned int v99 = a3;
    if (a5)
    {
      unsigned int v21 = a3;
      unsigned int v22 = a5;
      unsigned int v23 = 0;
      if (v21 <= 2) {
        uint64_t v24 = 2;
      }
      else {
        uint64_t v24 = v21;
      }
      unint64_t v95 = v20 - 1;
      uint64_t v94 = v24 - 1;
      unsigned int v105 = a5;
      uint64_t v102 = v7;
      do
      {
        if (a4[(unsigned __int16)v23] == 32) {
          ++v23;
        }
        if ((unsigned __int16)v23 >= v22)
        {
          uint64_t v7 = v102;
        }
        else
        {
          if (v21 < 2)
          {
            int v100 = 0;
            BOOL v28 = 0;
            LOWORD(v26) = 9999;
            unsigned __int16 v29 = 9999;
          }
          else
          {
            uint64_t v25 = (unsigned int *)(a2 + 44);
            uint64_t v26 = 1;
            uint64_t v97 = v19;
            while (1)
            {
              if (*(v25 - 3) == 34)
              {
                unsigned int v27 = *v25;
                if (*v25 - *(_DWORD *)(a2 + 12) == (unsigned __int16)v23) {
                  break;
                }
              }
              ++v26;
              v25 += 8;
              if (v20 == v26)
              {
                int v100 = 0;
                LOWORD(v26) = 9999;
                int v96 = 1;
LABEL_25:
                unsigned __int16 v29 = v26;
                goto LABEL_26;
              }
            }
            unsigned __int16 v29 = v26;
            while (*(v25 - 3) != 21 || v27 >= *v25)
            {
              ++v29;
              v25 += 8;
              if (v21 == v29) {
                goto LABEL_24;
              }
            }
            if (v29 == 9999)
            {
LABEL_24:
              int v96 = 0;
              int v100 = 1;
              goto LABEL_25;
            }
            int v96 = 0;
            int v100 = 1;
LABEL_26:
            BOOL v28 = 0;
            unint64_t v31 = v95;
            uint64_t v30 = (char **)(a2 + 56);
            do
            {
              if (*((_DWORD *)v30 - 6) == 36
                && *((_DWORD *)v30 - 3) - *(_DWORD *)(a2 + 12) <= (unsigned __int16)v23)
              {
                BOOL v28 = !cstdlib_strstr(*v30, "arw")
                   && !cstdlib_strstr(*v30, "arg")
                   && !cstdlib_strstr(*v30, "fai")
                   && !cstdlib_strstr(*v30, "hei")
                   && cstdlib_strcmp(*v30, "normal") != 0;
                unsigned int v22 = v105;
              }
              v30 += 4;
              --v31;
            }
            while (v31);
            uint64_t v32 = v94;
            unint64_t v33 = (_DWORD *)(a2 + 44);
            uint64_t v19 = v97;
            do
            {
              if (*(v33 - 3) == 1 && *v33 - *(_DWORD *)(a2 + 12) == (unsigned __int16)v23)
              {
                uint64_t v7 = v102;
                unint64_t v20 = v104;
                unsigned int v35 = *v102;
                int v42 = *(v33 - 2);
                int v34 = *(v33 - 1);
                *(_DWORD *)(v97 + 104 * *v102) = v42;
                goto LABEL_44;
              }
              v33 += 8;
              --v32;
            }
            while (v32);
            unint64_t v20 = v104;
            if (!v96) {
              goto LABEL_43;
            }
          }
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Could not resolve references pos (previously logged as Public 68004), thispos=%d", v16, v17, v18, (unsigned __int16)v23);
          unsigned int v22 = v105;
LABEL_43:
          int v34 = 0;
          uint64_t v7 = v102;
          unsigned int v35 = *v102;
          *(_DWORD *)(v19 + 104 * *v102) = 0;
LABEL_44:
          uint64_t v36 = v19 + 104 * v35;
          *(_DWORD *)(v36 + 4) = v34;
          *(_WORD *)(v36 + 8) = v23;
          *(_WORD *)(v19 + 104 * *v7 + 74) = 0;
          *(_WORD *)(v19 + 104 * *v7 + 76) = 0;
          *(_WORD *)(v19 + 104 * *v7 + 72) = 9999;
          unsigned int v37 = *v7;
          *(_DWORD *)(v19 + 104 * *v7 + 88) = v28;
          unsigned int v21 = v99;
          if (v100)
          {
            *(_WORD *)(v19 + 104 * v37 + 74) = v26;
            *(_WORD *)(v19 + 104 * *v7 + 76) = v29;
            if (*(unsigned __int16 *)(v19 + 104 * *v7 + 74) == *(unsigned __int16 *)(v19 + 104 * *v7 + 76))
            {
              *(_WORD *)(v19 + 104 * *v7 + 10) = *(_DWORD *)(a2 + 16);
              unsigned int v23 = v22;
            }
            else
            {
              int v40 = *(_DWORD *)(a2 + 32 * v29 + 12);
              int v41 = *(_DWORD *)(a2 + 12);
              unsigned int v23 = v40 - v41;
              if ((_WORD)v40 == (_WORD)v41)
              {
                unsigned int v23 = 0;
              }
              else
              {
                while (a4[(unsigned __int16)v23 - 1] == 32)
                {
                  if (!(_WORD)--v23)
                  {
                    unsigned int v23 = 0;
                    break;
                  }
                }
              }
              *(_WORD *)(v19 + 104 * *v7 + 10) = v23;
            }
          }
          else
          {
            while (1)
            {
              int v38 = a4[(unsigned __int16)v23];
              if ((v38 | 0x20) == 0x20) {
                break;
              }
              if (v22 < (unsigned __int16)++v23)
              {
                int v38 = a4[(unsigned __int16)v23];
                break;
              }
            }
            if (v38) {
              unsigned int v39 = v23;
            }
            else {
              unsigned int v39 = v23 + 1;
            }
            *(_WORD *)(v19 + 104 * v37 + 10) = v39;
            unsigned int v23 = v39 + 1;
          }
          if (*(unsigned __int16 *)(v19 + 104 * *v7 + 8) != *(unsigned __int16 *)(v19 + 104 * *v7 + 10))
          {
            unsigned __int16 v43 = *v7 + 1;
            *uint64_t v7 = v43;
            if (v99 < v43)
            {
              uint64_t v44 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v19, 104 * v43 + 104);
              if (!v44)
              {
                heap_Free(*(void **)(*(void *)a1 + 8), v19);
                goto LABEL_150;
              }
              uint64_t v45 = v44;
              cstdlib_memset((void *)(v44 + 104 * *v7), 0, 0x68uLL);
              uint64_t v19 = v45;
              unsigned int v22 = v105;
            }
          }
        }
      }
      while (v22 > (unsigned __int16)v23);
    }
    *unint64_t v93 = v19;
    uint64_t v46 = *v7;
    unsigned __int16 v47 = cstdlib_strlen(a4);
    uint64_t v106 = v46;
    if (v46)
    {
      uint64_t v48 = 0;
      unsigned int v98 = 0;
      unsigned int v103 = v47;
      unsigned __int16 v101 = v47;
      while (1)
      {
        uint64_t v49 = v19 + 104 * v48;
        *(_DWORD *)(v49 + 80) = 1;
        uint64_t v50 = (_DWORD *)(v49 + 80);
        if (v103 >= *((unsigned __int16 *)v50 - 35)) {
          unsigned __int16 v51 = *((_WORD *)v50 - 35);
        }
        else {
          unsigned __int16 v51 = v47;
        }
        int v53 = (unsigned __int16 *)(v50 - 18);
        uint64_t v52 = *((unsigned __int16 *)v50 - 36);
        if (v52 < v51)
        {
          do
          {
            if (*v50 != 1) {
              break;
            }
            if (!cstdlib_isdigit(a4[v52]) && ((a4[v52] | 2) != 0x2E || v52 == *v53)) {
              *uint64_t v50 = 0;
            }
            ++v52;
          }
          while (v51 != v52);
          LODWORD(v52) = *v53;
        }
        uint64_t v54 = v19 + 104 * v48;
        *(_DWORD *)(v54 + 84) = 0;
        uint64_t v55 = (int *)(v54 + 84);
        if (v52 >= v51) {
          goto LABEL_98;
        }
        int v56 = 0;
        uint64_t v52 = v52;
        do
        {
          if (v56) {
            break;
          }
          if (isPuncClass(a1, (unsigned __int8 *)&a4[v52]))
          {
            int v57 = a1[39];
            if (v57 == 1 || !v57 && v52 == *v53) {
              *uint64_t v55 = 1;
            }
          }
          ++v52;
          int v56 = *v55;
        }
        while (v51 != v52);
        if (v56 != 1 || a1[62] != 1)
        {
          unint64_t v20 = v104;
          goto LABEL_100;
        }
        if (v51 - *v53 >= 2 && isPuncClass(a1, (unsigned __int8 *)&a4[v51 - 1]))
        {
          *uint64_t v55 = 0;
          unint64_t v20 = v104;
          if (v51 - *v53 <= 127)
          {
            int v58 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 128);
            uint64_t v59 = v19 + 104 * v48;
            *(void *)(v59 + 96) = v58;
            int v60 = (void *)(v59 + 96);
            if (!v58) {
              goto LABEL_150;
            }
            cstdlib_strncpy(v58, &a4[*v53], v51 - (unint64_t)*v53);
            *(unsigned char *)(*v60 + v51 - (unint64_t)*v53) = 0;
            unsigned int v98 = (*(uint64_t (**)(void, void, const char *, void, uint64_t))(*((void *)a1 + 3) + 144))(*((void *)a1 + 1), *((void *)a1 + 2), "normal", *v60, 128);
            if ((v98 & 0x80000000) != 0) {
              return v98;
            }
          }
        }
        else
        {
LABEL_98:
          unint64_t v20 = v104;
        }
LABEL_100:
        ++v48;
        unsigned __int16 v47 = v101;
        if (v48 == v106) {
          goto LABEL_103;
        }
      }
    }
    unsigned int v98 = 0;
LABEL_103:
    if (v99)
    {
      uint64_t v61 = 0;
      uint64_t v62 = (int *)(a2 + 32);
      do
      {
        int v63 = (int *)(a2 + 32 * v61);
        int v64 = *v63;
        if (*v63 == 21)
        {
          size_t v73 = (char *)*((void *)v63 + 3);
          if (v73)
          {
            if (!LH_stricmp(v73, "spell"))
            {
              LOWORD(v83) = cstdlib_strlen(a4);
              unsigned __int16 v84 = v62;
              uint64_t v85 = v61;
              while (++v85 < v20)
              {
                uint64_t v86 = v84 + 8;
                int v87 = *v84;
                v84 += 8;
                if (v87 == 21)
                {
                  int v83 = *(v86 - 5) - *(_DWORD *)(a2 + 12);
                  break;
                }
              }
              if (v106)
              {
                unsigned int v88 = *(_DWORD *)(a2 + 32 * v61 + 12) - *(_DWORD *)(a2 + 12);
                int v89 = (_DWORD *)(v19 + 92);
                uint64_t v90 = v106;
                do
                {
                  if (v88 <= *((unsigned __int16 *)v89 - 42)
                    && *((unsigned __int16 *)v89 - 41) <= (unsigned __int16)v83)
                  {
                    *int v89 = 1;
                  }
                  v89 += 26;
                  --v90;
                }
                while (v90);
              }
              goto LABEL_147;
            }
            int v64 = *v63;
LABEL_123:
            if (v64 == 36)
            {
              unsigned __int16 v74 = *(char **)(a2 + 32 * v61 + 24);
              if (v74)
              {
                if (!LH_stricmp(v74, "latin"))
                {
                  LOWORD(v75) = cstdlib_strlen(a4);
                  uint64_t v76 = v62;
                  uint64_t v77 = v61;
                  while (++v77 < v20)
                  {
                    uint64_t v78 = v76 + 8;
                    int v79 = *v76;
                    v76 += 8;
                    if (v79 == 36)
                    {
                      int v75 = *(v78 - 5) - *(_DWORD *)(a2 + 12);
                      break;
                    }
                  }
                  if (v106)
                  {
                    unsigned int v80 = *(_DWORD *)(a2 + 32 * v61 + 12) - *(_DWORD *)(a2 + 12);
                    size_t v81 = (_DWORD *)(v19 + 88);
                    uint64_t v82 = v106;
                    do
                    {
                      if (v80 <= *((unsigned __int16 *)v81 - 40)
                        && *((unsigned __int16 *)v81 - 39) <= (unsigned __int16)v75)
                      {
                        _DWORD *v81 = 1;
                      }
                      v81 += 26;
                      --v82;
                    }
                    while (v82);
                  }
                }
              }
            }
          }
        }
        else
        {
          if (v64 != 7) {
            goto LABEL_123;
          }
          if (*(void *)(a2 + 32 * v61 + 24) && *(void *)(a2 + 32 * v61 + 24) == 60)
          {
            LOWORD(v65) = cstdlib_strlen(a4);
            uint64_t v66 = v62;
            uint64_t v67 = v61;
            while (++v67 < v20)
            {
              int v68 = v66 + 8;
              int v69 = *v66;
              v66 += 8;
              if (v69 == 7)
              {
                int v65 = *(v68 - 5) - *(_DWORD *)(a2 + 12);
                break;
              }
            }
            if (v106)
            {
              unsigned int v70 = *(_DWORD *)(a2 + 32 * v61 + 12) - *(_DWORD *)(a2 + 12);
              unsigned int v71 = (_DWORD *)(v19 + 12);
              uint64_t v72 = v106;
              do
              {
                if (v70 <= *((unsigned __int16 *)v71 - 2)
                  && *((unsigned __int16 *)v71 - 1) <= (unsigned __int16)v65)
                {
                  *unsigned int v71 = 1;
                }
                v71 += 26;
                --v72;
              }
              while (v72);
            }
          }
        }
LABEL_147:
        ++v61;
        v62 += 8;
      }
      while (v61 != v20);
    }
  }
  else
  {
LABEL_150:
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v15, v16, v17, v18, v92);
    return -1607458806;
  }
  return v98;
}

void *posparser_FreeWords(void *result, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v4 = result;
  if (a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a2 + 104 * v5;
      int v10 = *(unsigned __int16 *)(v7 + 32);
      uint64_t v9 = (unsigned __int16 *)(v7 + 32);
      unsigned __int16 v8 = v10;
      if (v10)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = a2 + 104 * v5;
        uint64_t v16 = *(void *)(v13 + 24);
        uint64_t v15 = (uint64_t *)(v13 + 24);
        uint64_t v14 = v16;
        do
        {
          if (v14)
          {
            heap_Free(*(void **)(*v4 + 8), *(void *)(v14 + v11));
            uint64_t v17 = (void *)(*v15 + v11);
            *uint64_t v17 = 0;
            heap_Free(*(void **)(*v4 + 8), v17[1]);
            uint64_t v14 = *v15;
            *(void *)(*v15 + v11 + 8) = 0;
            unsigned __int16 v8 = *v9;
          }
          ++v12;
          v11 += 16;
        }
        while (v12 < v8);
        *uint64_t v9 = 0;
      }
      uint64_t v18 = a2 + 104 * v5;
      uint64_t v21 = *(void *)(v18 + 24);
      unint64_t v20 = (void *)(v18 + 24);
      uint64_t v19 = v21;
      if (v21)
      {
        heap_Free(*(void **)(*v4 + 8), v19);
        *unint64_t v20 = 0;
      }
      uint64_t v24 = *((void *)v9 - 2);
      unsigned int v23 = v9 - 8;
      uint64_t v22 = v24;
      if (v24)
      {
        heap_Free(*(void **)(*v4 + 8), v22);
        *(void *)unsigned int v23 = 0;
      }
      uint64_t v25 = a2 + 104 * v5;
      uint64_t v28 = *(void *)(v25 + 64);
      unsigned int v27 = (void *)(v25 + 64);
      uint64_t v26 = v28;
      if (v28)
      {
        heap_Free(*(void **)(*v4 + 8), v26);
        *unsigned int v27 = 0;
      }
      uint64_t v29 = a2 + 104 * v5;
      uint64_t v32 = *(void *)(v29 + 96);
      unint64_t v31 = (void *)(v29 + 96);
      uint64_t v30 = v32;
      if (v32)
      {
        heap_Free(*(void **)(*v4 + 8), v30);
        *unint64_t v31 = 0;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  else if (!a2)
  {
    return result;
  }
  unint64_t v33 = *(void **)(*v4 + 8);

  return heap_Free(v33, a2);
}

uint64_t posparser_ProcessStart(char *a1)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  long long __src = 0;
  uint64_t DictCharString = paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", &__src, 0);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  cstdlib_strncpy(a1 + 186, __src, 3uLL);
  a1[186] = ssft_tolower(a1[186]);
  a1[187] = ssft_tolower(a1[187]);
  *((_WORD *)a1 + 94) = 120;
  a1[97] = 1;
  *(_WORD *)&__c[1] = -1;
  uint64_t DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparsermwspan", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  if (*(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3])
  {
    unsigned int v3 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v3) {
      *unsigned int v3 = 0;
    }
    char v4 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    unsigned __int8 v5 = v4 ? v4 : 1;
    a1[97] = v5;
  }
  else
  {
    unsigned __int8 v5 = a1[97];
  }
  *((_WORD *)a1 + 49) = 250 * v5;
  a1[96] = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparsernumdicts", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  if (*(_WORD *)&__c[1] && *(void *)&__c[3])
  {
    uint64_t v9 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v9) {
      *uint64_t v9 = 0;
    }
    unsigned __int8 v10 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    a1[96] = v10;
    uint64_t v11 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (8 * v10) | 1u);
    *((void *)a1 + 11) = v11;
    uint64_t v16 = *(void *)a1;
    if (!v11)
    {
      uint64_t EmbeddedCharRule = 2687508490;
LABEL_129:
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"POSPARSER", 68000, 0, v12, v13, v14, v15, v76);
      return EmbeddedCharRule;
    }
    uint64_t v17 = heap_Calloc(*(void **)(v16 + 8), 1, a1[96] + 1);
    *((void *)a1 + 10) = v17;
    if (!v17) {
      goto LABEL_128;
    }
    if (a1[96])
    {
      unint64_t v18 = 0;
      do
      {
        *(unsigned char *)(*((void *)a1 + 10) + v18) = 0;
        *(void *)(*((void *)a1 + 11) + 8 * v18++) = 0;
      }
      while (v18 < a1[96]);
    }
    *(_WORD *)&__c[1] = -1;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparserdicname", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
    {
      goto LABEL_54;
    }
    if (*(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3])
    {
      unsigned int v23 = **(char ***)&__c[3];
      uint64_t v24 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v24) {
        *uint64_t v24 = 0;
      }
      unsigned __int16 v29 = 0;
      if (v23)
      {
        do
        {
          uint64_t v30 = cstdlib_strchr(v23, 43);
          unint64_t v31 = v30;
          if (v30) {
            *uint64_t v30 = 0;
          }
          uint64_t v32 = *(void **)(*(void *)a1 + 8);
          int v33 = cstdlib_strlen(v23);
          *(void *)(*((void *)a1 + 11) + 8 * v29) = heap_Calloc(v32, 1, (v33 + 1));
          int v34 = *(char **)(*((void *)a1 + 11) + 8 * v29);
          if (!v34) {
            goto LABEL_128;
          }
          cstdlib_strcpy(v34, v23);
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"using dict[%d] %s", v35, v36, v37, v29++);
          unsigned int v23 = v31 + 1;
        }
        while (v31);
      }
      if (v29 != a1[96])
      {
        uint64_t v46 = *(void *)(*(void *)a1 + 32);
        unsigned __int16 v47 = "numDicts read in=";
        goto LABEL_97;
      }
    }
    *(_WORD *)&__c[1] = -1;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparserngramlevel", &__c[3], &__c[1], __c) & 0x80000000) != 0|| !*(_WORD *)&__c[1])
    {
LABEL_54:
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68002, (uint64_t)"%s%s", v19, v20, v21, v22, "missing keyword:");
      return 2687508480;
    }
    if (*(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3])
    {
      int v38 = **(char ***)&__c[3];
      unsigned int v39 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v39) {
        *unsigned int v39 = 0;
      }
      unsigned __int16 v40 = 0;
      if (v38)
      {
        do
        {
          int v41 = cstdlib_strchr(v38, 43);
          int v42 = v41;
          if (v41) {
            *int v41 = 0;
          }
          *(unsigned char *)(*((void *)a1 + 10) + v40) = cstdlib_atoi((unsigned __int8 *)v38);
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"using ngram levels[%d] %d", v43, v44, v45, v40++);
          int v38 = v42 + 1;
        }
        while (v42);
      }
      if (v40 != a1[96])
      {
        uint64_t v46 = *(void *)(*(void *)a1 + 32);
        unsigned __int16 v47 = "ngramLevels read=";
LABEL_97:
        log_OutPublic(v46, (uint64_t)"POSPARSER", 68003, (uint64_t)"%s%d%s%d", v25, v26, v27, v28, v47);
        return 2687508480;
      }
    }
  }
  else
  {
    *((void *)a1 + 10) = 0;
    *((void *)a1 + 11) = 0;
    a1[96] = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"WARNING - No ngram dicts, continuing anyway", v6, v7, v8, v76);
  }
  int Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"araparsermode", &__src);
  if ((Str & 0x80000000) == 0 && (Str & 0x1FFF) != 0x14)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Araparser mode : \"%s\"", v49, v50, v51, (uint64_t)__src);
    *((_DWORD *)a1 + 16) = 0;
    if (!LH_stricmp("dict_plus_ngrams", __src))
    {
      int v52 = 0;
      goto LABEL_58;
    }
    if (!LH_stricmp("dict_only", __src))
    {
      int v52 = 1;
      goto LABEL_58;
    }
    if (!LH_stricmp("ngrams_only", __src))
    {
      int v52 = 2;
LABEL_58:
      *((_DWORD *)a1 + 16) = v52;
    }
  }
  paramc_ParamRelease(*(void *)(*(void *)a1 + 40));
  long long __src = 0;
  uint64_t DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserspacedout", (char **)a1 + 14);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  uint64_t DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparsersmspunc", (char **)a1 + 13);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  uint64_t DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserpuncclass1", (char **)a1 + 16);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  uint64_t DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserpuncclass2", (char **)a1 + 17);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  uint64_t DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserpuncclass3", (char **)a1 + 18);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  *((_DWORD *)a1 + 62) = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "arwpospredictiononly", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v54 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v54) {
      *uint64_t v54 = 0;
    }
    if (!cstdlib_strcmp(**(const char ***)&__c[3], "1"))
    {
      *((_DWORD *)a1 + 62) = 1;
      *((_WORD *)a1 + 35) = 1;
      goto LABEL_99;
    }
  }
  int v55 = *((_DWORD *)a1 + 62);
  *((_WORD *)a1 + 35) = 1;
  if (v55 == 1)
  {
LABEL_99:
    *(_WORD *)&__c[1] = -1;
    uint64_t EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparsernumposdicparts", &__c[3], &__c[1], __c);
    if ((EmbeddedCharRule & 0x80000000) == 0 && *(_WORD *)&__c[1])
    {
      int v63 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v63) {
        char *v63 = 0;
      }
      *((_WORD *)a1 + 35) = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
      if (a1[97]) {
        a1[97] = 0;
      }
      *((_WORD *)a1 + 49) = 2048;
    }
    return EmbeddedCharRule;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparsernumparts", &__c[3], &__c[1], __c);
  if ((EmbeddedCharRule & 0x80000000) != 0 || !*(_WORD *)&__c[1]) {
    return EmbeddedCharRule;
  }
  int v56 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
  if (v56) {
    *int v56 = 0;
  }
  a1[68] = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  *(_WORD *)&__c[1] = -1;
  uint64_t EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "nrpart_tn", &__c[3], &__c[1], __c);
  if ((EmbeddedCharRule & 0x80000000) != 0 || !*(_WORD *)&__c[1]) {
    return EmbeddedCharRule;
  }
  int v57 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
  if (v57) {
    *int v57 = 0;
  }
  a1[72] = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  uint64_t DictCharString = posparser_loc_getDictCharString(a1, (uint64_t)"araparserdiacriticlist", (char **)a1 + 15);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparsermapXBI2A", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  if (*(_WORD *)&__c[1])
  {
    int v58 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v58) {
      *int v58 = 0;
    }
    if (!cstdlib_atoi(**(unsigned __int8 ***)&__c[3])) {
      *((_DWORD *)a1 + 38) = 0;
    }
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparseroldPuncClass", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v59 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v59) {
      *uint64_t v59 = 0;
    }
    if (!cstdlib_atoi(**(unsigned __int8 ***)&__c[3])) {
      *((_DWORD *)a1 + 39) = 0;
    }
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t DictCharString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparsernumpostcorrrules", &__c[3], &__c[1], __c);
  if ((DictCharString & 0x80000000) != 0) {
    return DictCharString;
  }
  if (*(_WORD *)&__c[1])
  {
    int v60 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v60) {
      *int v60 = 0;
    }
    unsigned __int16 v61 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    unsigned int v62 = v61;
    *((_WORD *)a1 + 84) = v61;
  }
  else
  {
    unsigned int v62 = *((unsigned __int16 *)a1 + 84);
  }
  if (v62)
  {
    uint64_t v64 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (56 * v62) | 1);
    *((void *)a1 + 20) = v64;
    if (!v64) {
      goto LABEL_128;
    }
    if (*((_WORD *)a1 + 84))
    {
      uint64_t v65 = 0;
      unint64_t v66 = 0;
      do
      {
        cstdlib_memset(__b, 0, 0x20uLL);
        cstdlib_strcpy(__b, "araparserpostcorr");
        uint64_t v67 = LH_itoa(v66, v77, 0xAu);
        cstdlib_strcat(v81, v67);
        uint64_t DictCharString = posparser_loc_getPostCorrRule(a1, (uint64_t)__b, *((void *)a1 + 20) + v65);
        if ((DictCharString & 0x80000000) != 0) {
          return DictCharString;
        }
        ++v66;
        v65 += 56;
      }
      while (v66 < *((unsigned __int16 *)a1 + 84));
    }
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t EmbeddedCharRule = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*((void *)a1 + 3) + 96))(*((void *)a1 + 1), *((void *)a1 + 2), "fecfg", "araparsernumecharrewrite", &__c[3], &__c[1], __c);
  if ((EmbeddedCharRule & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      int v68 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v68) {
        *int v68 = 0;
      }
      unsigned __int16 v69 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
      unsigned int v70 = v69;
      *((_WORD *)a1 + 92) = v69;
    }
    else
    {
      unsigned int v70 = *((unsigned __int16 *)a1 + 92);
    }
    if (v70)
    {
      uint64_t v72 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (2 * v70) | 1);
      *((void *)a1 + 22) = v72;
      if (v72)
      {
        if (*((_WORD *)a1 + 92))
        {
          uint64_t v73 = 0;
          unint64_t v74 = 0;
          do
          {
            cstdlib_memset(__b, 0, 0x20uLL);
            cstdlib_strcpy(__b, "araparserecharrewrite");
            int v75 = LH_itoa(v74, v77, 0xAu);
            cstdlib_strcat(v82, v75);
            uint64_t EmbeddedCharRule = posparser_loc_getEmbeddedCharRule(a1, (uint64_t)__b, (char *)(*((void *)a1 + 22) + v73));
            if ((EmbeddedCharRule & 0x80000000) != 0) {
              break;
            }
            ++v74;
            v73 += 2;
          }
          while (v74 < *((unsigned __int16 *)a1 + 92));
        }
        return EmbeddedCharRule;
      }
LABEL_128:
      uint64_t EmbeddedCharRule = 2687508490;
      uint64_t v16 = *(void *)a1;
      goto LABEL_129;
    }
  }
  return EmbeddedCharRule;
}

uint64_t posparser_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, char **a8, uint64_t *a9, _WORD *a10)
{
  __b[8] = *(const char **)MEMORY[0x263EF8340];
  uint64_t v14 = *a9;
  uint64_t v15 = (unsigned __int16)*a10;
  uint64_t v16 = *a8;
  v742 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, *(unsigned __int16 *)(a1 + 98) + 1);
  if (!v742)
  {
    unsigned int v732 = -1607458806;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v17, v18, v19, v20, v691);
    *a10 = v15;
    *a8 = v16;
    *a9 = v14;
    return v732;
  }
  char __s = v16;
  v721 = (const char **)a8;
  uint64_t v722 = v14;
  __int16 v758 = *(_WORD *)(a1 + 98);
  v757 = (void **)a1;
  uint64_t v740 = v15;
  if (a6 == 1)
  {
    __b[0] = 0;
    LOWORD(v760) = -1;
    LOBYTE(__c[0]) = 0;
    *(_DWORD *)char __s2 = 0;
    *(void *)long long __src = 0;
    uint64_t v21 = v16;
    uint64_t v22 = v742;
  }
  else
  {
    unsigned int v23 = (uint64_t *)a1;
    uint64_t v21 = v16;
    uint64_t v22 = v742;
    if (*(_DWORD *)(a1 + 64) > 1u) {
      goto LABEL_217;
    }
    __b[0] = 0;
    LOWORD(v760) = -1;
    LOBYTE(__c[0]) = 0;
    if (!a6)
    {
      cstdlib_strcpy(__dst, "tn");
      unsigned int v23 = (uint64_t *)a1;
      unsigned int v736 = *(unsigned __int8 *)(a1 + 72);
      goto LABEL_8;
    }
  }
  cstdlib_strcpy(__dst, "isolatedword");
  unsigned int v736 = 1;
  unsigned int v23 = (uint64_t *)a1;
LABEL_8:
  unsigned int v27 = a5;
  if (!a5) {
    goto LABEL_76;
  }
  uint64_t v28 = 0;
  BOOL v29 = 0;
  int v30 = 0;
  unsigned int POSAndDiacritics = 0;
  *(void *)v727 = v23 + 30;
  v32.i64[0] = 0x100000001;
  v32.i64[1] = 0x100000001;
  do
  {
    *(_DWORD *)char __s1 = 0;
    unsigned int v33 = (unsigned __int16)v30;
    uint64_t v34 = a4 + 104 * (unsigned __int16)v30;
    int v35 = *((unsigned __int8 *)v23 + 97);
    uint64_t v36 = (unsigned __int16 *)(v34 + 8);
    v723 = (char *)(v34 + 72);
    v725 = (char **)(v34 + 16);
    int v752 = v30;
    unsigned int v744 = (unsigned __int16)v30;
    while (1)
    {
      unsigned int v37 = v28 + (unsigned __int16)v35;
      if (v37 >= v27)
      {
        int v40 = 0;
        __int16 v41 = -1;
        goto LABEL_15;
      }
      if (v37 >= v33)
      {
        int v38 = 0;
        int32x4_t v39 = 0uLL;
        unsigned __int16 v44 = v30;
        do
        {
          uint64_t v45 = (int32x4_t *)(a4 + 104 * v44);
          if (v45[4].i16[5]) {
            int v38 = 1;
          }
          int32x4_t v46 = vceqq_s32(v45[5], v32);
          int32x4_t v39 = vsubq_s32((int32x4_t)vbicq_s8((int8x16_t)v39, (int8x16_t)v46), v46);
          ++v44;
        }
        while (v37 >= v44);
      }
      else
      {
        int v38 = 0;
        int32x4_t v39 = 0uLL;
      }
      if (!*((_DWORD *)v23 + 62))
      {
        if (*((_WORD *)v23 + 104))
        {
          BOOL v29 = 0;
          unsigned __int16 v54 = 0;
          do
          {
            if (v29) {
              break;
            }
            unsigned int v55 = *(unsigned __int16 *)(v23[25] + 6 * v54);
            if (v55 > *(unsigned __int16 *)(a4 + 104 * v37 + 10)) {
              break;
            }
            unsigned int v56 = *v36;
            BOOL v29 = v55 >= v56;
            if (v55 < v56) {
              ++v54;
            }
          }
          while (*((unsigned __int16 *)v23 + 104) > v54);
        }
        else
        {
          BOOL v29 = 0;
        }
      }
      int v40 = 0;
      __int16 v41 = -1;
      if (v38) {
        goto LABEL_15;
      }
      int16x4_t v47 = vmovn_s32(vceqzq_s32(v39));
      if ((v47.i8[0] & 1) == 0 || (v47.i8[2] & 1) == 0 || (v47.i8[4] & 1) == 0 || (v47.i8[6] & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v48 = a4 + 104 * v37;
      unsigned int v50 = *(unsigned __int16 *)(v48 + 10);
      uint64_t v49 = (unsigned __int16 *)(v48 + 10);
      uint64_t v51 = *v36;
      size_t v52 = v50 - v51;
      if ((int)v52 >= *((unsigned __int16 *)v23 + 49))
      {
        int v40 = 0;
        goto LABEL_15;
      }
      cstdlib_strncpy(v22, &v21[v51], v52);
      uint64_t v53 = a1;
      v22[*v49 - *v36] = 0;
      if (*(_WORD *)(a1 + 184))
      {
        posparser_undoEmbeddedRules(a1, v22);
        uint64_t v53 = a1;
      }
      if (*(_DWORD *)(v53 + 232) == 1)
      {
        if (*(_WORD *)(v53 + 70) == 1)
        {
          LOWORD(v760) = -1;
          unsigned int POSAndDiacritics = (*(uint64_t (**)(void, void, int *))(*(void *)(v53 + 24) + 96))(*(void *)(v53 + 8), *(void *)(v53 + 16), *(int **)v727);
        }
        else
        {
          LOWORD(v760) = 0;
          unsigned int POSAndDiacritics = (*(uint64_t (**)(void, void, int *))(*(void *)(v53 + 24) + 152))(*(void *)(v53 + 8), *(void *)(v53 + 16), *(int **)v727);
        }
        v32.i64[0] = 0x100000001;
        v32.i64[1] = 0x100000001;
        if ((POSAndDiacritics & 0x80000000) == 0)
        {
          int v40 = (unsigned __int16)v760;
          if (!(_WORD)v760)
          {
            __int16 v41 = -1;
            unsigned int v23 = (uint64_t *)a1;
            unsigned int v27 = a5;
            int v30 = v752;
            goto LABEL_62;
          }
          unsigned int POSAndDiacritics = posparser_GetPOSAndDiacritics(a1, v29, (uint64_t)v21, a4, v22, (unsigned __int16)v752, (unsigned __int16)v35, (uint64_t)__b[0], (unsigned __int16)v760, __c[0], __s1);
          if ((POSAndDiacritics & 0x80000000) != 0) {
            goto LABEL_92;
          }
          int v40 = *(_DWORD *)__s1;
          if (*(_DWORD *)__s1) {
            __int16 v41 = 0;
          }
          else {
            __int16 v41 = -1;
          }
          goto LABEL_60;
        }
LABEL_92:
        unsigned int v732 = POSAndDiacritics;
LABEL_93:
        *a10 = v740;
        *v721 = v21;
        *a9 = v722;
        goto LABEL_805;
      }
      LOWORD(v760) = 0;
      unsigned int POSAndDiacritics = (*(uint64_t (**)(void, void, char *, char *, const char **, char ***, int *, void))(*(void *)(v53 + 24) + 152))(*(void *)(v53 + 8), *(void *)(v53 + 16), __dst, v22, __b, &v760, __c, v736);
      if ((POSAndDiacritics & 0x80000000) != 0) {
        goto LABEL_92;
      }
      int v40 = (unsigned __int16)v760;
      if (!(_WORD)v760)
      {
        __int16 v41 = -1;
LABEL_60:
        unsigned int v23 = (uint64_t *)a1;
        unsigned int v27 = a5;
        goto LABEL_61;
      }
      unsigned int v733 = POSAndDiacritics;
      posparser_GetHighestPriority((size_t)__b[0], &v760, LOBYTE(__c[0]));
      int v57 = cstdlib_strchr(*(char **)&__b[0][8 * (unsigned __int16)v760], LOBYTE(__c[0]));
      if (v57) {
        *int v57 = 0;
      }
      *(_DWORD *)char __s2 = 0;
      *(void *)long long __src = 0;
      uint64_t v61 = a1;
      if (!v29) {
        goto LABEL_68;
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND \"%s\" in dict as \"%s\" - try reconcile", v58, v59, v60, (uint64_t)v742);
      uint64_t v21 = __s;
      unsigned int isReconcilable = posparser_isReconcilable(a1, (uint64_t)__s, *(char **)&__b[0][8 * (unsigned __int16)v760], *v36, *v49, __s2, (uint64_t *)__src);
      if ((isReconcilable & 0x80000000) != 0)
      {
        unsigned int v732 = isReconcilable;
        goto LABEL_97;
      }
      if (*(_DWORD *)__s2) {
        break;
      }
      unsigned int v66 = isReconcilable;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND in \"%s\" in dict, but couldnt reconcile with partial diacritics - FAIL", v63, v64, v65, *(void *)&__b[0][8 * (unsigned __int16)v760]);
      unsigned int POSAndDiacritics = v66;
      unsigned int v23 = (uint64_t *)a1;
      int v40 = 0;
      BOOL v29 = 1;
      __int16 v41 = -1;
      unsigned int v27 = a5;
      uint64_t v22 = v742;
LABEL_61:
      int v30 = v752;
      v32.i64[0] = 0x100000001;
      v32.i64[1] = 0x100000001;
LABEL_62:
      unsigned int v33 = v744;
LABEL_15:
      __int16 v42 = v41 + v35;
      int v35 = v42;
      BOOL v43 = v42 >= 0;
      if (v42 < 0 || v40) {
        goto LABEL_71;
      }
    }
    uint64_t v61 = a1;
    unsigned int v733 = isReconcilable;
    if (*(_DWORD *)__s2 != 1 || !*(void *)__src)
    {
LABEL_68:
      uint64_t v78 = *(void **)(*(void *)v61 + 8);
      int v79 = cstdlib_strlen(*(const char **)&__b[0][8 * (unsigned __int16)v760]);
      unsigned int v80 = (char *)heap_Calloc(v78, 1, (v79 + 1));
      *v725 = v80;
      if (v80)
      {
        cstdlib_strcpy(v80, *(const char **)&__b[0][8 * (unsigned __int16)v760]);
        goto LABEL_70;
      }
LABEL_810:
      unsigned int v732 = -1607458806;
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v71, v72, v73, v74, v691);
      uint64_t v21 = __s;
LABEL_97:
      uint64_t v22 = v742;
      goto LABEL_93;
    }
    posparser_PostProcess(a1, (const char **)__src);
    uint64_t v67 = *(void **)(*(void *)a1 + 8);
    int v68 = *(const char **)__src;
    int v69 = cstdlib_strlen(*(const char **)__src);
    unsigned int v70 = (char *)heap_Calloc(v67, 1, (v69 + 1));
    *v725 = v70;
    if (!v70) {
      goto LABEL_810;
    }
    cstdlib_strcpy(v70, v68);
    heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v68);
    *(void *)long long __src = 0;
    BOOL v29 = 1;
LABEL_70:
    uint64_t v21 = __s;
    uint64_t v22 = v742;
    *(_WORD *)v723 = v37;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FOUND in dict pWordDefs[%d]=\"%s\"", v75, v76, v77, v28);
    unsigned int v23 = (uint64_t *)a1;
    int v40 = 1;
    *(_DWORD *)char __s1 = 1;
    BOOL v43 = (v35 & 0x8000u) == 0;
    unsigned int v27 = a5;
    unsigned int POSAndDiacritics = v733;
    int v30 = v752;
    v32.i64[0] = 0x100000001;
    v32.i64[1] = 0x100000001;
LABEL_71:
    if (v43 && v40 == 1) {
      int v81 = v35;
    }
    else {
      int v81 = 0;
    }
    int v82 = v30 + v81;
    int v30 = v82 + 1;
    uint64_t v28 = (unsigned __int16)(v82 + 1);
  }
  while (v28 < v27);
  uint64_t v15 = v740;
  uint64_t v14 = v722;
  if ((POSAndDiacritics & 0x80000000) != 0)
  {
LABEL_95:
    unsigned int v732 = POSAndDiacritics;
    goto LABEL_797;
  }
LABEL_76:
  if (*((_DWORD *)v23 + 58) != 1)
  {
LABEL_217:
    if ((*((_DWORD *)v23 + 16) | 2) != 2) {
      goto LABEL_624;
    }
    LOBYTE(v761[0]) = 0;
    *(_DWORD *)&v761[1] = -65536;
    *(void *)int __c = v22;
    unsigned __int16 v181 = cstdlib_strlen(v21);
    unsigned int v23 = (uint64_t *)v757;
    int v182 = v757[10];
    if (!v182) {
      goto LABEL_624;
    }
    v760 = 0;
    if (!*v182) {
      goto LABEL_624;
    }
    unsigned __int16 v183 = v181;
    cstdlib_memset(__dst, 0, 0x5A0uLL);
    cstdlib_memset(__b, 0, 0x39uLL);
    v724 = (char *)heap_Calloc((void *)(*v757)[1], 1, 252);
    if (!v724)
    {
      unsigned int v732 = -1607458806;
      log_OutPublic((*v757)[4], (uint64_t)"POSPARSER", 68000, 0, v184, v185, v186, v187, v691);
      v724 = 0;
      goto LABEL_613;
    }
    v761[1] = 0;
    cstdlib_strcpy(v22, "");
    signed int v726 = v183;
    if (!v183)
    {
      v698 = 0;
      unsigned int v732 = 0;
      goto LABEL_615;
    }
    uint64_t v188 = 0;
    unsigned int v732 = 0;
    int v189 = 0;
    unint64_t v190 = 0;
    *(void *)v729 = 0;
    uint64_t v707 = 0;
    v698 = 0;
    unsigned __int16 v699 = 20;
    while (1)
    {
      int v743 = v189;
      unint64_t v730 = v190;
      cstdlib_memset(__s1, 0, 0xAuLL);
      cstdlib_strcpy(__s1, "");
      int v194 = v757;
      if (*((_DWORD *)v757 + 48) != 1) {
        goto LABEL_228;
      }
      if (!*((_WORD *)v757 + 104))
      {
        unint64_t v730 = 0;
LABEL_228:
        LOWORD(v199) = 0;
        int v200 = 0;
LABEL_229:
        log_OutText((*v194)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\"", v191, v192, v193, v188);
        int v205 = 0;
        int v206 = 0;
        goto LABEL_230;
      }
      uint64_t v708 = v188;
      unsigned int v195 = v188 + 1;
      uint64_t v196 = (unsigned __int16 *)v757[25];
      unsigned int v197 = *v196;
      unsigned __int16 v198 = v743;
      if (v197 > (unsigned __int16)v743) {
        break;
      }
      unint64_t v211 = 0;
      int v200 = 0;
      int v199 = 0;
      while (1)
      {
        if (v198 == (unsigned __int16)v197
          && *((_DWORD *)v194 + 38) == 1
          && (unint64_t v212 = v211,
              int v213 = isCharInStr((unsigned __int8 *)&v196[3 * v211 + 1], "XBI"),
              unint64_t v211 = v212,
              int v194 = v757,
              v213))
        {
          int v214 = 0;
          unint64_t v215 = v212 + 1;
          if (v212 + 1 < *((unsigned __int16 *)v757 + 104) && v195 < v726)
          {
            uint64_t v216 = (unsigned __int8 *)v757[25];
            if (v195 == *(unsigned __int16 *)&v216[6 * v215])
            {
              if (v757[15]) {
                unsigned __int16 v217 = (const char *)v757[15];
              }
              else {
                unsigned __int16 v217 = "^FNKauioR";
              }
              if (isCharInStr(&v216[6 * v215 + 2], v217))
              {
                uint64_t v218 = 6 * v215 + 6;
                while (1)
                {
                  cstdlib_strcat(__s1, (const char *)v757[25] + v218 - 4);
                  v199 += cstdlib_strlen((const char *)v757[25] + v218 - 4);
                  ++v215;
                  int v194 = v757;
                  if (v215 >= *((unsigned __int16 *)v757 + 104)) {
                    break;
                  }
                  uint64_t v219 = v757[25];
                  if (v195 != *(unsigned __int16 *)((char *)v219 + v218)) {
                    break;
                  }
                  uint64_t v220 = (unsigned __int8 *)v219 + v218 + 2;
                  if (v757[15]) {
                    uint64_t v221 = (const char *)v757[15];
                  }
                  else {
                    uint64_t v221 = "^FNKauioR";
                  }
                  int v200 = 1;
                  v218 += 6;
                  if (!isCharInStr(v220, v221))
                  {
                    int v214 = 0;
                    int v194 = v757;
                    goto LABEL_267;
                  }
                }
                int v214 = 0;
                int v200 = 1;
LABEL_267:
                uint64_t v21 = __s;
                uint64_t v14 = v722;
              }
              else
              {
                int v214 = 0;
                int v194 = v757;
              }
              unint64_t v211 = v212;
            }
            else
            {
              int v214 = 0;
            }
          }
        }
        else
        {
          ++v211;
          int v214 = 1;
        }
        unint64_t v201 = *((unsigned __int16 *)v194 + 104);
        unsigned __int16 v198 = v743;
        if (v211 >= v201) {
          break;
        }
        uint64_t v196 = (unsigned __int16 *)v194[25];
        unsigned int v197 = v196[3 * v211];
        char v222 = v214 ^ 1;
        if (v197 > (unsigned __int16)v743) {
          char v222 = 1;
        }
        if (v222)
        {
          unint64_t v201 = 1;
          break;
        }
      }
      if (v214) {
        goto LABEL_281;
      }
      if (v200 == 1)
      {
        int v205 = 0;
        int v239 = 1;
        uint64_t v188 = v708;
        goto LABEL_318;
      }
      unint64_t v730 = v211;
      uint64_t v188 = v708;
      log_OutText((*v194)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\" rewrite diacritic=\"%s\"", v191, v192, v193, v708);
      int v205 = 0;
      int v206 = 1;
LABEL_230:
      uint64_t v207 = *(void *)v729;
      uint64_t v208 = v757;
      if ((int)a5 <= SLOWORD(v729[0]))
      {
        char v209 = 0;
      }
      else
      {
        while (*(unsigned __int16 *)(a4 + 104 * (__int16)v207 + 8) > (unsigned __int16)v743
             || *(unsigned __int16 *)(a4 + 104 * (__int16)v207 + 10) <= (unsigned __int16)v743)
        {
          uint64_t v207 = (v207 + 1);
          if ((int)a5 <= (__int16)v207)
          {
            char v209 = 0;
            uint64_t v207 = *(void *)v729;
            goto LABEL_271;
          }
        }
        unsigned int v210 = (unsigned __int16)v207;
        if (*(_WORD *)(a4 + 104 * (unsigned __int16)v207 + 72) != 9999
          && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v207 + 8) == (unsigned __int16)v743)
        {
          v729[0] = v207;
LABEL_274:
          uint64_t v223 = a4 + 104 * v210;
          unsigned int v224 = *(unsigned __int16 *)(v223 + 72);
          if (v224 == 9999) {
            unsigned int v224 = v210;
          }
          int v225 = *(unsigned __int16 *)(a4 + 104 * v224 + 10);
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as dict word exists, is vowelled, is phonetic or pre-diacritized", v202, v203, v204, *(unsigned __int16 *)(v223 + 8));
          *(void *)v729 = (v729[0] + 1);
          cstdlib_strcpy(*(char **)__c, "");
          goto LABEL_277;
        }
        char v209 = 1;
      }
LABEL_271:
      *(void *)v729 = v207;
      unsigned int v210 = (unsigned __int16)v207;
      if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v207 + 12) == 1
        || *(_WORD *)(a4 + 104 * (unsigned __int16)v207 + 74)
        || *(void *)(a4 + 104 * (unsigned __int16)v207 + 16))
      {
        goto LABEL_274;
      }
      if ((v209 & 1) == 0)
      {
        uint64_t v709 = v188;
        uint64_t v242 = (unsigned __int16)v743;
        goto LABEL_328;
      }
      if ((*(_DWORD *)(a4 + 104 * (unsigned __int16)v207 + 80) == 1
         || *(_DWORD *)(a4 + 104 * (unsigned __int16)v207 + 84) == 1)
        && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v207 + 8) == (unsigned __int16)v743)
      {
        uint64_t v240 = v188;
        uint64_t v241 = a4 + 104 * (unsigned __int16)v207;
        log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as digit/punctuation class", v202, v203, v204, v240);
LABEL_344:
        int v225 = *(unsigned __int16 *)(v241 + 10);
        goto LABEL_277;
      }
      if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v207 + 88) == 1
        && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v207 + 8) == (unsigned __int16)v743)
      {
        uint64_t v256 = v188;
        uint64_t v241 = a4 + 104 * (unsigned __int16)v207;
        log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as latin", v202, v203, v204, v256);
        goto LABEL_344;
      }
      uint64_t v709 = v188;
      if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v207 + 92) == 1
        && *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v207 + 8) == (unsigned __int16)v743)
      {
        uint64_t v241 = a4 + 104 * (unsigned __int16)v207;
        log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as in spell mode", v202, v203, v204, v709);
        goto LABEL_344;
      }
      int v702 = v206;
      uint64_t v257 = v21;
      uint64_t v242 = (unsigned __int16)v743;
      unsigned int v258 = &v257[(unsigned __int16)v743];
      size_t v259 = cstdlib_strlen("§");
      if (cstdlib_strncmp(v258, "§", v259))
      {
        uint64_t v208 = v757;
        int v206 = v702;
LABEL_328:
        uint64_t v243 = (unsigned __int8 *)&__s[v242];
        uint64_t v21 = __s;
        if (*v243 == 32)
        {
          log_OutText((*v208)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING space", v202, v203, v204, v693);
LABEL_610:
          int v189 = v743 + Utf8_LengthInBytes(v243, 1);
          goto LABEL_278;
        }
        v713 = v243;
        unsigned int v697 = v210;
        int v244 = v208;
        int v245 = v206;
        log_OutText((*v208)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM PROCESSING [%d] \"%c\"", v202, v203, v204, v709);
        cstdlib_memset(v724, 0, 12 * v699 + 12);
        v761[1] = 0;
        char v701 = v245;
        if (v200 == 1) {
          int v246 = v245;
        }
        else {
          int v246 = 0;
        }
        if (v246 != 1)
        {
          unsigned __int16 v260 = Utf8_LengthInBytes(v713, 1);
          unsigned __int16 v261 = v260;
          if (v205)
          {
            if ((v260 & 0xFFFE) != 0) {
              size_t v262 = v260;
            }
            else {
              size_t v262 = 1;
            }
            cstdlib_strncpy(v724, (const char *)v713, v262);
            if ((_WORD)v199)
            {
              uint64_t v266 = (unsigned __int16)v199;
              uint64_t v267 = v261;
              if ((v261 & 0xFFFE) == 0) {
                uint64_t v267 = 1;
              }
              unsigned __int8 v268 = &v724[v267];
              uint64_t v269 = __s1;
              do
              {
                char v270 = *v269++;
                v268[12 * v761[1]] = v270;
                ++v268;
                --v266;
              }
              while (v266);
            }
            v724[12 * v761[1] + v262 + (unsigned __int16)v199] = 0;
            *(_WORD *)&v724[12 * v761[1] + 10] = 20000;
            uint64_t v271 = (*v757)[4];
            uint64_t v272 = (uint64_t)&v724[12 * v761[1]];
LABEL_362:
            log_OutText(v271, (uint64_t)"POSPARSER", 5, 0, (uint64_t)"(partial dia) ADD SOLUTION \"%s\"(%u)", v263, v264, v265, v272);
          }
          else
          {
            if (v260) {
              LOWORD(v262) = v260;
            }
            else {
              LOWORD(v262) = 1;
            }
            cstdlib_strncpy(v724, (const char *)v713, (unsigned __int16)v262);
            v724[12 * v761[1] + (unsigned __int16)v262] = 0;
            v273 = &v724[12 * v761[1] + 10];
            if (v245)
            {
              *(_WORD *)v273 = 20000;
              uint64_t v271 = (*v757)[4];
              uint64_t v272 = (uint64_t)&v724[12 * v761[1]];
              goto LABEL_362;
            }
            *(_WORD *)v273 = 0;
            log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"(dia) ADD SOLUTION \"%s\"(%u)", v263, v264, v265, (uint64_t)&v724[12 * v761[1]]);
          }
          unint64_t v310 = 0;
          unsigned __int16 v700 = v262 - 1;
          ++v761[1];
          char v278 = v245;
          while (1)
          {
            if (v310 >= *((unsigned __int8 *)v757 + 96))
            {
LABEL_563:
              __int16 v277 = v761[1];
              goto LABEL_367;
            }
            uint64_t v311 = (*v757)[4];
            if (v310) {
              log_OutText(v311, (uint64_t)"POSPARSER", 5, 0, (uint64_t)"!!BACKING OFF TO DICT %d=\"%s\"", v274, v275, v276, v310);
            }
            else {
              log_OutText(v311, (uint64_t)"POSPARSER", 5, 0, (uint64_t)"!!USING DICT %d=\"%s\"", v274, v275, v276, 0);
            }
            uint64_t v734 = *((unsigned __int8 *)v757[10] + v310);
            if (*((unsigned char *)v757[10] + v310)) {
              break;
            }
            int v705 = 0;
LABEL_562:
            ++v310;
            char v278 = v701;
            if (v705) {
              goto LABEL_563;
            }
          }
          int v705 = 0;
          unint64_t v711 = v310;
          while (1)
          {
            cstdlib_memset(__b, 0, 0x39uLL);
            cstdlib_memset(__b, 64, *((unsigned __int8 *)v757[10] + v310));
            LOWORD(v315) = v743;
            if ((v743 & 0x8000) != 0)
            {
              LOWORD(v748) = 0;
              unsigned __int16 v316 = 0;
              uint64_t v319 = v757;
            }
            else
            {
              unsigned __int16 v316 = 0;
              int v748 = 0;
              unsigned __int16 v317 = v729[0];
              unsigned __int16 v318 = v734;
              uint64_t v319 = v757;
              do
              {
                int v320 = v318--;
                uint64_t v321 = (v320 - 1);
                while ((v317 & 0x8000) == 0)
                {
                  uint64_t v322 = v317;
                  unsigned __int16 v323 = (unsigned __int16 *)(a4 + 10 + 104 * v317);
                  while (*(v323 - 1) > (unsigned __int16)v315
                       || *v323 <= (unsigned __int16)v315)
                  {
                    v323 -= 52;
                    BOOL v289 = v322-- <= 0;
                    if (v289) {
                      goto LABEL_434;
                    }
                  }
                  unsigned __int16 v317 = v322;
                  if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v322 + 80) == 1)
                  {
                    if (*(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v322 + 8) == (unsigned __int16)v315)
                    {
                      PunctClassChar = "α";
                      goto LABEL_442;
                    }
                  }
                  else
                  {
                    if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v322 + 84) != 1) {
                      break;
                    }
                    if (*(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v322 + 8) == (unsigned __int16)v315)
                    {
                      PunctClassChar = getPunctClassChar(v319, __s[(__int16)v315]);
LABEL_442:
                      cstdlib_strcpy(__src, (const char *)__b);
                      insertString(__src, (char *)__b, PunctClassChar, v318);
                      ++v748;
LABEL_436:
                      uint64_t v319 = v757;
                      goto LABEL_438;
                    }
                  }
                  LOWORD(v315) = v315 - 1;
                  if ((v315 & 0x8000) != 0) {
                    goto LABEL_444;
                  }
                }
LABEL_434:
                LOWORD(v315) = utf8_GetCurrentUtf8Offset((unint64_t)__s, (unsigned __int16)v315);
                int v324 = (unsigned __int8 *)&__s[(__int16)v315];
                int v325 = Utf8_LengthInBytes(v324, 1);
                if ((v325 & 0xFFFE) != 0)
                {
                  int v326 = v325;
                  cstdlib_strcpy(__src, (const char *)__b);
                  cstdlib_strcpy((char *)__b, __src);
                  cstdlib_strncpy((char *)__b + v318, (const char *)v324, (unsigned __int16)v326);
                  cstdlib_strcpy((char *)__b + v318 + (unsigned __int16)v326, &__src[v318 + 1]);
                  int v748 = v748 + v326 - 1;
                  goto LABEL_436;
                }
                *((unsigned char *)__b + v321) = *v324;
                uint64_t v319 = v757;
LABEL_438:
                ++v316;
                if (!v318) {
                  break;
                }
                int v315 = (__int16)(v315 - 1);
              }
              while ((v315 & 0x80000000) == 0);
            }
LABEL_444:
            uint64_t v328 = 0;
            uint64_t v15 = v740;
            unint64_t v310 = v711;
            do
            {
              if (*((unsigned char *)__b + v328) != 64) {
                break;
              }
              ++v328;
            }
            while (v328 != 14);
            int v329 = (unsigned __int16)v328 + v316;
            unsigned int v330 = *(unsigned __int8 *)(v319[10] + v711);
            unsigned int v331 = (unsigned __int16)v328 + 1;
            BOOL v332 = v329 != v734 || v329 == v330;
            if (!v332 && v331 < v330) {
              break;
            }
            log_OutText(*(void *)(*v319 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM IGNORING szUnVoweledNgramint Str = \"%s\"", v312, v313, v314, (uint64_t)__b);
            uint64_t v14 = v722;
LABEL_559:
            uint64_t v734 = (v734 - 1);
            if (!(_WORD)v734) {
              goto LABEL_562;
            }
          }
          int v334 = Utf8_LengthInBytes(v713, 1);
          int v335 = v743 + v334;
          BOOL v336 = v330 == v734 || v726 <= (__int16)(v743 + v334);
          signed int v337 = a5;
          if (v336) {
            goto LABEL_461;
          }
          int v351 = 0;
          int v352 = 0;
          unsigned int v715 = (unsigned __int16)(v330 - v734);
          __int16 v717 = v748 + v734;
          uint64_t v353 = *(void *)v729;
          int v749 = v734 + (unsigned __int16)v748;
          while (v726 > (__int16)v335)
          {
            int v354 = (__int16)v335;
            __int16 v355 = v717 + v351;
            while (2)
            {
              if (v337 <= (__int16)v353) {
                goto LABEL_489;
              }
              uint64_t v356 = v353;
              while (*(unsigned __int16 *)(a4 + 104 * (__int16)v356 + 8) > (unsigned __int16)v335
                   || *(unsigned __int16 *)(a4 + 104 * (__int16)v356 + 10) <= (unsigned __int16)v335)
              {
                uint64_t v356 = (v356 + 1);
                if (v337 <= (__int16)v356) {
                  goto LABEL_489;
                }
              }
              if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v356 + 80) == 1)
              {
                if (v354 == *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v356 + 8))
                {
                  cstdlib_strcpy(__src, (const char *)__b);
                  int v357 = (unsigned __int16)(v352 + v355);
                  v358 = "α";
LABEL_497:
                  insertString(__src, (char *)__b, v358, v357);
                  signed int v337 = a5;
                  ++v352;
                  uint64_t v353 = v356;
                  goto LABEL_493;
                }
LABEL_486:
                int v354 = (__int16)++v335;
                uint64_t v353 = v356;
                if (v726 <= (__int16)v335) {
                  goto LABEL_461;
                }
                continue;
              }
              break;
            }
            if (*(_DWORD *)(a4 + 104 * (unsigned __int16)v356 + 84) == 1)
            {
              if (v354 == *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v356 + 8))
              {
                v362 = getPunctClassChar(v757, __s[(__int16)v335]);
                cstdlib_strcpy(__src, (const char *)__b);
                int v357 = (unsigned __int16)(v352 + v355);
                v358 = v362;
                goto LABEL_497;
              }
              goto LABEL_486;
            }
            uint64_t v353 = v356;
LABEL_489:
            v359 = (unsigned __int8 *)&__s[(__int16)v335];
            int v360 = Utf8_LengthInBytes(v359, 1);
            if ((v360 & 0xFFFE) != 0)
            {
              int v361 = v360;
              cstdlib_strcpy(__src, (const char *)__b);
              cstdlib_strcpy((char *)__b, __src);
              cstdlib_strncpy((char *)__b + (unsigned __int16)(v352 + v355), (const char *)v359, (unsigned __int16)v361);
              cstdlib_strcpy((char *)__b + (unsigned __int16)(v352 + v355) + (unsigned __int16)v361, &__src[(unsigned __int16)(v352 + v355) + 1]);
              v352 += v361 - 1;
              v335 += v361 - 1;
            }
            else
            {
              *((unsigned char *)__b + (v749 + v351) + (unint64_t)(unsigned __int16)v352) = *v359;
            }
            signed int v337 = a5;
LABEL_493:
            if (++v351 < v715 && v726 > (__int16)++v335) {
              continue;
            }
            break;
          }
LABEL_461:
          if (LOBYTE(__b[0]) == 32)
          {
            cstdlib_strcpy(__src, (const char *)__b);
            insertString(__src, (char *)__b, "Φ", 0);
          }
          uint64_t v21 = __s;
          uint64_t v15 = v740;
          uint64_t v14 = v722;
          if (*((unsigned char *)__b + cstdlib_strlen((const char *)__b) - 1) == 32)
          {
            cstdlib_strcpy(__src, (const char *)__b);
            __int16 v341 = cstdlib_strlen((const char *)__b);
            insertString(__src, (char *)__b, "Φ", (unsigned __int16)(v341 - 1));
          }
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM useLetterNum = %d szUnVoweledNgramint Str = \"%s\"", v338, v339, v340, v734);
          if (!(_WORD)v707)
          {
LABEL_469:
            v761[2] = -1;
            unsigned int v346 = ((uint64_t (*)(void *, void *, void, const char **, char ***, _WORD *, _WORD *, void))v757[3][19])(v757[1], v757[2], v757[11][v711], __b, &v760, &v761[2], v761, *((unsigned __int8 *)v757 + 68));
            if ((v346 & 0x80000000) != 0)
            {
              unsigned int v732 = v346;
              goto LABEL_615;
            }
            if (!v761[2])
            {
              v761[2] = 1;
              log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DICT LOOKUP \"%s\" FAILS", v347, v348, v349, (uint64_t)__b);
              v350 = "FAIL_DICT_LOOKUP";
              goto LABEL_510;
            }
            v350 = *v760;
            log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DICT LOOKUP \"%s\" SUCCEEDS \"%s\"", v347, v348, v349, (uint64_t)__b);
            unint64_t v310 = v711;
            if (v350) {
              goto LABEL_510;
            }
            goto LABEL_559;
          }
          int v342 = (unsigned __int16)v707;
          while (cstdlib_strcmp(&__dst[72 * (v342 - 1)], (const char *)__b))
          {
            if (!(_WORD)--v342) {
              goto LABEL_469;
            }
          }
          v363 = (const char **)&v766[9 * (v342 - 1)];
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM FOUND \"%s\" in cache, cachedDictint Str = \"%s\"", v343, v344, v345, (uint64_t)__b);
          if (!cstdlib_strcmp(*v363, "FAIL_DICT_LOOKUP"))
          {
            v761[2] = 0;
            log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DICT LOOKUP \"%s\" FAILS (CACHED)", v364, v365, v366, (uint64_t)__b);
            goto LABEL_558;
          }
          if (v698)
          {
            size_t v367 = cstdlib_strlen(*v363);
            if (v367 <= cstdlib_strlen(v698))
            {
              v350 = (char *)v698;
            }
            else
            {
              v368 = (uint64_t *)(*v757)[1];
              int v369 = cstdlib_strlen(*v363);
              v350 = (char *)heap_Realloc(v368, (uint64_t)v698, (v369 + 1));
              if (!v350)
              {
                unsigned int v732 = -1607458806;
                uint64_t v690 = (uint64_t)*v757;
                goto LABEL_874;
              }
            }
            v381 = *v363;
            v376 = v350;
LABEL_509:
            cstdlib_strcpy(v376, v381);
            v698 = v350;
LABEL_510:
            int v382 = cstdlib_strcmp(v350, "FAIL_DICT_LOOKUP");
            int v383 = v705;
            if (v382) {
              int v383 = 1;
            }
            int v705 = v383;
            if (v761[2])
            {
              unsigned int v384 = v761[1];
              if ((unsigned __int16)v707 < 0x14u || v761[1] > 4u)
              {
                uint64_t v385 = v707;
              }
              else
              {
                heap_Free((void *)(*v757)[1], v766[0]);
                v766[0] = 0;
                cstdlib_memmove(__dst, v767, 72 * ((unsigned __int16)v707 - 1));
                uint64_t v385 = (v707 - 1);
              }
              uint64_t v707 = v385;
              if ((unsigned __int16)v385 <= 0x13u && v384 <= 4)
              {
                cstdlib_strcpy(&__dst[72 * (unsigned __int16)v385], (const char *)__b);
                v386 = (void *)(*v757)[1];
                int v387 = cstdlib_strlen(v350);
                v388 = (char *)heap_Calloc(v386, 1, (v387 + 1));
                v766[9 * (unsigned __int16)v707] = (uint64_t)v388;
                if (v388)
                {
                  cstdlib_strcpy(v388, v350);
                  uint64_t v707 = (v707 + 1);
                  goto LABEL_521;
                }
                v415 = v724;
LABEL_863:
                v724 = v415;
                unsigned int v732 = -1607458806;
                log_OutPublic((*v757)[4], (uint64_t)"POSPARSER", 68000, 0, v389, v390, v391, v392, v691);
LABEL_864:
                uint64_t v21 = __s;
LABEL_615:
                for (uint64_t i = 64; i != 1504; i += 72)
                {
                  uint64_t v463 = *(void *)&__dst[i];
                  if (v463)
                  {
                    heap_Free((void *)(*v757)[1], v463);
                    *(void *)&__dst[i] = 0;
                  }
                }
                if (v698) {
                  heap_Free((void *)(*v757)[1], (uint64_t)v698);
                }
                unsigned int v23 = (uint64_t *)v757;
                if (v724)
                {
                  heap_Free((void *)(*v757)[1], (uint64_t)v724);
                  unsigned int v23 = (uint64_t *)v757;
                }
                uint64_t v22 = *(char **)__c;
                if ((v732 & 0x80000000) != 0)
                {
                  v742 = *(char **)__c;
                }
                else
                {
LABEL_624:
                  if (a5)
                  {
                    uint64_t v464 = 0;
                    do
                    {
                      uint64_t v465 = a4 + 104 * v464;
                      unsigned int v468 = *(unsigned __int16 *)(v465 + 74);
                      v466 = (_WORD *)(v465 + 74);
                      uint64_t v467 = v468;
                      if (v468)
                      {
                        __int16 v469 = 0;
                        v470 = (int *)v14;
                        uint64_t v471 = v467;
                        do
                        {
                          int v472 = *v470;
                          v470 += 8;
                          if (v472 == 1) {
                            ++v469;
                          }
                          --v471;
                        }
                        while (v471);
                        _WORD *v466 = v467 - v469;
                      }
                      uint64_t v473 = a4 + 104 * v464;
                      unsigned int v476 = *(unsigned __int16 *)(v473 + 76);
                      v474 = (_WORD *)(v473 + 76);
                      uint64_t v475 = v476;
                      if (v476)
                      {
                        __int16 v477 = 0;
                        v478 = (int *)v14;
                        uint64_t v479 = v475;
                        do
                        {
                          int v480 = *v478;
                          v478 += 8;
                          if (v480 == 1) {
                            ++v477;
                          }
                          --v479;
                        }
                        while (v479);
                        _WORD *v474 = v475 - v477;
                      }
                      ++v464;
                    }
                    while (v464 != a5);
                  }
                  if (v15)
                  {
                    int v481 = 0;
                    unsigned __int16 v482 = 0;
                    do
                    {
                      v483 = (_DWORD *)(v14 + 32 * v482);
                      if (*v483 == 1)
                      {
                        uint64_t v484 = (v481 + 1);
                        if ((unsigned __int16)v15 > v484)
                        {
                          cstdlib_memmove(v483, (const void *)(v14 + 32 * v484), 32 * ((unsigned __int16)v15 - (int)v484));
                          unsigned int v23 = (uint64_t *)v757;
                        }
                        uint64_t v15 = (v15 - 1);
                      }
                      else
                      {
                        ++v482;
                      }
                      int v481 = v482;
                    }
                    while (v482 < (unsigned __int16)v15);
                  }
                  if (*((_DWORD *)v23 + 62) == 1) {
                    uint64_t v485 = 32 * (unsigned __int16)v15 + ((unint64_t)a5 << 6) + 32;
                  }
                  else {
                    uint64_t v485 = 32 * ((unsigned __int16)v15 + (unint64_t)a5) + 32;
                  }
                  v486 = v23;
                  uint64_t v487 = heap_Realloc(*(uint64_t **)(*v23 + 8), v14, v485);
                  v742 = v22;
                  if (v487)
                  {
                    uint64_t v754 = v487;
                    __b[0] = v21;
                    *(void *)long long __src = v22;
                    *(_OWORD *)char __dst = 0u;
                    long long v765 = 0u;
                    cstdlib_memset(__dst, 0, 0x20uLL);
                    *(_DWORD *)char __dst = 1;
                    *(_WORD *)char __s2 = cstdlib_strlen(v21);
                    if (!a5)
                    {
                      v739 = v22;
                      v604 = v21;
LABEL_741:
                      int v605 = cstdlib_strlen(v604);
                      LODWORD(v606) = 0;
                      uint64_t v607 = v754;
                      *(_DWORD *)(v754 + 16) = v605;
                      v609 = a9;
                      v608 = (char **)v721;
                      v610 = a10;
                      if (*((_DWORD *)v757 + 62) != 1 || (unsigned __int16)v15 < 2u) {
                        goto LABEL_802;
                      }
                      int v611 = 0;
                      v612 = (_DWORD *)(v754 + 88);
                      __int16 v613 = 2;
                      uint64_t v614 = 1;
                      do
                      {
                        if (*(_DWORD *)(v754 + 32 * v614) == 59 && *(_DWORD *)(v754 + 32 * v614 + 24) == 5)
                        {
                          if (v614 + 1 >= (unint64_t)(unsigned __int16)v15) {
                            goto LABEL_756;
                          }
                          v615 = v612;
                          unsigned __int16 v616 = v613;
                          while (*(v615 - 6) != 59 || *v615 != 5)
                          {
                            ++v616;
                            v615 += 8;
                            if ((unsigned __int16)v15 == v616) {
                              goto LABEL_756;
                            }
                          }
                          if (*(_DWORD *)(v754 + 32 * v616) == 59
                            && (uint64_t v617 = v754 + 32 * v616, *(_DWORD *)(v617 + 24) == 5))
                          {
                            uint64_t v618 = v754 + 32 * v614;
                            int v620 = *(_DWORD *)(v618 + 16);
                            v619 = (_DWORD *)(v618 + 16);
                            int v621 = *(v619 - 1);
                            unsigned int v622 = *(_DWORD *)(v617 + 12);
                            if (v620 + v621 < v622) {
                              _DWORD *v619 = v622 - v621;
                            }
                          }
                          else
                          {
LABEL_756:
                            *(_DWORD *)(v754 + 32 * v614 + 16) = *(_DWORD *)(v754 + 12)
                                                               + v605
                                                               - *(_DWORD *)(v754 + 32 * v614 + 12);
                          }
                          int v611 = 1;
                        }
                        ++v614;
                        ++v613;
                        v612 += 8;
                      }
                      while (v614 != (unsigned __int16)v15);
                      v623 = (_DWORD *)(v754 + 44);
                      uint64_t v624 = (unsigned __int16)v15 - 1;
                      do
                      {
                        if (*(v623 - 3) == 59) {
                          *v623 -= *(_DWORD *)(v754 + 12);
                        }
                        v623 += 8;
                        --v624;
                      }
                      while (v624);
                      if (v611 != 1)
                      {
                        LODWORD(v606) = 0;
                        goto LABEL_802;
                      }
                      LOWORD(v760) = 0;
                      LOWORD(__c[0]) = 0;
                      memset(v761, 0, sizeof(v761));
                      *(_DWORD *)char __s1 = 0;
                      uint64_t v606 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, char ***))v757[4][13])(a2, a3, 3, a7, &v760);
                      if ((v606 & 0x80000000) != 0)
                      {
LABEL_808:
                        uint64_t v607 = v754;
                      }
                      else
                      {
                        unsigned __int16 v625 = (unsigned __int16)v760;
                        if (!(_WORD)v760)
                        {
LABEL_786:
                          int v641 = 1;
                          unsigned __int16 v642 = 1;
                          uint64_t v607 = v754;
                          do
                          {
                            v643 = (_DWORD *)(v607 + 32 * v642);
                            if (*v643 == 59)
                            {
                              uint64_t v644 = (v641 + 1);
                              if ((unsigned __int16)v15 > v644)
                              {
                                uint64_t v645 = v606;
                                cstdlib_memmove(v643, (const void *)(v607 + 32 * v644), 32 * ((unsigned __int16)v15 - (int)v644));
                                uint64_t v607 = v754;
                                uint64_t v606 = v645;
                              }
                              LOWORD(v15) = v15 - 1;
                            }
                            else
                            {
                              ++v642;
                            }
                            int v641 = v642;
                          }
                          while (v642 < (unsigned __int16)v15);
                          goto LABEL_802;
                        }
                        LOWORD(v626) = 1;
                        while (1)
                        {
                          int v627 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, _WORD *))v757[4][21])(a2, a3, v625, 1, 1, __c, &v761[1]);
                          if (v627 < 0
                            || (int v627 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, _WORD *, _WORD *))v757[4][21])(a2, a3, (unsigned __int16)v760, 2, 1, &v761[2], &v761[1]), v627 < 0)|| (int v627 = ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, char *, _WORD *))v757[4][21])(a2, a3, (unsigned __int16)v760, 0, 1, __s1, &v761[1]), v627 < 0))
                          {
LABEL_807:
                            LODWORD(v606) = v627;
                            goto LABEL_808;
                          }
                          if ((unsigned __int16)v626 >= (unsigned __int16)v15)
                          {
                            v629 = v757;
                            uint64_t v630 = a2;
                          }
                          else
                          {
                            uint64_t v626 = (unsigned __int16)v626;
                            v628 = (int *)(v754 + 32 * (unsigned __int16)v626);
                            v629 = v757;
                            uint64_t v630 = a2;
                            while (1)
                            {
                              int v631 = *v628;
                              v628 += 8;
                              if (v631 == 59) {
                                break;
                              }
                              if ((unsigned __int16)v15 == ++v626)
                              {
                                LOWORD(v626) = v15;
                                break;
                              }
                            }
                          }
                          if (*(_DWORD *)(v754 + 32 * (unsigned __int16)v626) == 59)
                          {
                            int v632 = LOWORD(__c[0]);
                            uint64_t v633 = v754 + 32 * (unsigned __int16)v626;
                            if (*(_DWORD *)(v633 + 4) == LOWORD(__c[0]))
                            {
                              int v634 = v761[2];
                              if (*(_DWORD *)(v633 + 8) == v761[2])
                              {
                                uint64_t v635 = v754 + 32 * (unsigned __int16)v626;
                                int v638 = *(_DWORD *)(v635 + 12);
                                v637 = (int *)(v635 + 12);
                                __int16 v636 = v638;
                                if (v638 != LOWORD(__c[0]))
                                {
                                  LOWORD(__c[0]) = v636;
                                  int v627 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, _WORD *))v629[4][20])(v630, a3, (unsigned __int16)v760, 1, 1, __c, v761);
                                  if (v627 < 0) {
                                    goto LABEL_807;
                                  }
                                  int v634 = v761[2];
                                  int v632 = *v637;
                                  v629 = v757;
                                  uint64_t v630 = a2;
                                }
                                int v639 = *(_DWORD *)(v754 + 32 * (unsigned __int16)v626 + 16) + v632;
                                if (v639 != v634)
                                {
                                  v761[2] = v639;
                                  int v640 = ((uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, _WORD *, _WORD *))v629[4][20])(v630, a3, (unsigned __int16)v760, 2, 1, &v761[2], v761);
                                  uint64_t v607 = v754;
                                  uint64_t v630 = a2;
                                  v629 = v757;
                                  if (v640 < 0) {
                                    break;
                                  }
                                }
                              }
                            }
                          }
                          uint64_t v606 = ((uint64_t (*)(uint64_t, uint64_t, void, char ***))v629[4][15])(v630, a3, (unsigned __int16)v760, &v760);
                          if ((v606 & 0x80000000) != 0) {
                            goto LABEL_808;
                          }
                          LOWORD(v626) = v626 + 1;
                          unsigned __int16 v625 = (unsigned __int16)v760;
                          if (!(_WORD)v760) {
                            goto LABEL_786;
                          }
                        }
                        LODWORD(v606) = v640;
                      }
                      unsigned int v732 = v606;
LABEL_803:
                      uint64_t v646 = v607;
                      goto LABEL_804;
                    }
                    uint64_t v492 = 0;
                    unsigned __int16 v731 = 0;
                    unsigned __int16 v735 = 0;
                    int v493 = 0;
                    uint64_t v494 = v754;
                    v495 = v757;
                    while (2)
                    {
                      *(_DWORD *)char __dst = 1;
                      unsigned int v496 = (unsigned __int16)v493;
                      uint64_t v497 = a4 + 104 * (unsigned __int16)v493;
                      *(void *)&char __dst[4] = *(void *)v497;
                      int v498 = *(_DWORD *)(v497 + 12);
                      int v501 = *(unsigned __int16 *)(v497 + 8);
                      v500 = (unsigned __int16 *)(v497 + 8);
                      __int16 v499 = v501;
                      *(_DWORD *)&__dst[12] = *(_DWORD *)(v494 + 12) + v501;
                      uint64_t v741 = v15;
                      int v751 = v493;
                      if (v498 == 1)
                      {
                        uint64_t v502 = a4 + 104 * (unsigned __int16)v493;
                        __int16 v504 = *(_WORD *)(v502 + 10);
                        v503 = (unsigned __int16 *)(v502 + 10);
                        uint64_t v505 = (uint64_t)v495;
                        int v506 = posparserGrowStr((uint64_t)v495, (uint64_t *)__src, (unsigned __int16)(v504 - v499), &v758, 0);
                        v507 = *(char **)__src;
                        if (v506 < 0) {
                          goto LABEL_794;
                        }
                        v508 = __b[0];
                        cstdlib_strncpy(*(char **)__src, &__b[0][*v500], *v503 - (unint64_t)*v500);
                        v507[*v503 - *v500] = 0;
                        log_OutText(*(void *)(*(void *)v505 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING VOWELLED word [%d] %d,%d \"%s\"", v509, v510, v511, v492);
                        goto LABEL_656;
                      }
                      uint64_t v514 = a4 + 104 * (unsigned __int16)v493;
                      int v516 = *(unsigned __int16 *)(v514 + 72);
                      v515 = (unsigned __int16 *)(v514 + 72);
                      if (v516 == 9999)
                      {
                        uint64_t v517 = a4 + 104 * (unsigned __int16)v493;
                        v520 = *(const char **)(v517 + 64);
                        v519 = (const char **)(v517 + 64);
                        v518 = v520;
                        if (v520)
                        {
                          unsigned __int16 v521 = cstdlib_strlen(v518);
                          uint64_t v505 = (uint64_t)v757;
                          int v506 = posparserGrowStr((uint64_t)v757, (uint64_t *)__src, v521, &v758, 0);
                          v507 = *(char **)__src;
                          if (v506 < 0) {
                            goto LABEL_794;
                          }
                          cstdlib_strcpy(*(char **)__src, *v519);
                          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING ngram word [%d] %d,%d \"%s\"", v522, v523, v524, v492);
                          int v512 = cstdlib_strlen(v507) - *(unsigned __int16 *)(a4 + 104 * v496 + 10) + *v500;
                          posparser_undoEmbeddedRules((uint64_t)v757, v507);
                          int v513 = 1;
                          v508 = __b[0];
                          unsigned __int16 v731 = v751;
                          unsigned __int16 v735 = v751;
                        }
                        else
                        {
                          uint64_t v593 = a4 + 104 * (unsigned __int16)v493;
                          __int16 v595 = *(_WORD *)(v593 + 10);
                          v594 = (unsigned __int16 *)(v593 + 10);
                          uint64_t v505 = (uint64_t)v757;
                          int v506 = posparserGrowStr((uint64_t)v757, (uint64_t *)__src, (unsigned __int16)(v595 - v499), &v758, 0);
                          v507 = *(char **)__src;
                          if (v506 < 0)
                          {
LABEL_794:
                            LODWORD(v606) = v506;
                            v739 = v507;
                            goto LABEL_800;
                          }
                          v508 = __b[0];
                          cstdlib_strncpy(*(char **)__src, &__b[0][*v500], *v594 - (unint64_t)*v500);
                          v507[*v594 - *v500] = 0;
                          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING word [%d] %d,%d \"%s\"", v596, v597, v598, v492);
LABEL_656:
                          int v512 = 0;
                          int v513 = 0;
                        }
                      }
                      else
                      {
                        uint64_t v525 = a4 + 104 * (unsigned __int16)v493;
                        v527 = *(const char **)(v525 + 16);
                        v526 = (const char **)(v525 + 16);
                        uint64_t v528 = (uint64_t)v495;
                        unsigned __int16 v529 = cstdlib_strlen(v527);
                        int v506 = posparserGrowStr(v528, (uint64_t *)__src, v529, &v758, 0);
                        v507 = *(char **)__src;
                        if (v506 < 0) {
                          goto LABEL_794;
                        }
                        cstdlib_strcpy(*(char **)__src, *v526);
                        size_t v530 = *(unsigned __int16 *)(a4 + 104 * *v515 + 10);
                        v508 = __b[0];
                        if (cstdlib_strlen(__b[0]) < v530) {
                          LODWORD(v530) = (unsigned __int16)cstdlib_strlen(v508);
                        }
                        uint64_t v505 = (uint64_t)v757;
                        log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PROCESSING dict word [%d-%d] %d,%d \"%s\"", v531, v532, v533, v492);
                        int v512 = cstdlib_strlen(v507) - v530 + *v500;
                        int v513 = 1;
                        unsigned __int16 v731 = v751;
                        unsigned __int16 v735 = *v515;
                        int v751 = *v515;
                      }
                      v739 = v507;
                      unsigned __int16 v534 = v512 + cstdlib_strlen(v508);
                      int v535 = posparserGrowStr(v505, (uint64_t *)__b, v534, __s2, 64);
                      if (v535 < 0)
                      {
                        LODWORD(v606) = v535;
                        v609 = a9;
                        v608 = (char **)v721;
                        v610 = a10;
                        LOWORD(v15) = v741;
                        goto LABEL_801;
                      }
                      if (v512 << 16)
                      {
                        uint64_t v536 = a4 + 104 * v735;
                        unsigned int v539 = *(unsigned __int16 *)(v536 + 10);
                        v537 = (_WORD *)(v536 + 10);
                        unsigned int v538 = v539;
                        v540 = __b[0];
                        unsigned __int16 v541 = cstdlib_strlen(__b[0]);
                        uint64_t v542 = (unsigned __int16)*v537;
                        if (v541 > v542) {
                          cstdlib_memmove((void *)&v540[(unsigned __int16)*v537 + (__int16)v512], &v540[(unsigned __int16)*v537], v541 - v542);
                        }
                        uint64_t v543 = a4 + 104 * v731;
                        int v545 = *(unsigned __int16 *)(v543 + 8);
                        v544 = (unsigned __int16 *)(v543 + 8);
                        size_t v546 = cstdlib_strlen(v739);
                        cstdlib_memcpy((void *)&v540[v545], v739, v546);
                        v540[v534] = 0;
                        *v537 += v512;
                        unsigned int v547 = a5;
                        if (a5 > (unsigned __int16)(v735 + 1))
                        {
                          uint64_t v548 = (unsigned __int16)(v735 + 1) + 1;
                          v549 = (_WORD *)(a4 + 10 + 104 * (unsigned __int16)(v735 + 1));
                          do
                          {
                            *(v549 - 1) += v512;
                            *v549 += v512;
                            v549 += 52;
                            BOOL v332 = a5 == (unsigned __int16)v548++;
                          }
                          while (!v332);
                        }
                        uint64_t v550 = v741;
                        v495 = v757;
                        uint64_t v494 = v754;
                        if ((unsigned __int16)v741 >= 2u)
                        {
                          int v551 = *(_DWORD *)(v754 + 12);
                          unsigned int v552 = *v544;
                          uint64_t v553 = (unsigned __int16)v741 - 1;
                          v554 = (int *)(v754 + 44);
                          do
                          {
                            unsigned int v555 = (unsigned __int16)(*v554 - v551);
                            if (v555 >= v552)
                            {
                              int v556 = *v554 + (__int16)v512;
                              if (v555 < v538) {
                                int v556 = v551 + v552;
                              }
                              int *v554 = v556;
                            }
                            v554 += 8;
                            --v553;
                          }
                          while (v553);
                        }
                      }
                      else
                      {
                        v495 = v757;
                        uint64_t v550 = v741;
                        unsigned int v547 = a5;
                        uint64_t v494 = v754;
                        if (v513)
                        {
                          v557 = (char *)&__b[0][*(unsigned __int16 *)(a4 + 104 * v731 + 8)];
                          size_t v558 = cstdlib_strlen(v507);
                          cstdlib_memcpy(v557, v507, v558);
                          uint64_t v494 = v754;
                          unsigned int v547 = a5;
                          v495 = v757;
                        }
                      }
                      LODWORD(v765) = 0;
                      uint64_t v559 = a4 + 104 * (unsigned __int16)v751;
                      uint64_t v560 = *(unsigned __int16 *)(v559 + 74);
                      if (*(_WORD *)(v559 + 74))
                      {
                        uint64_t v561 = v494 + 32 * v560;
                        LODWORD(v560) = *(_DWORD *)(v561 + 12) - *(_DWORD *)&__dst[12];
                        *(_DWORD *)(v561 + 12) = *(_DWORD *)&__dst[12];
                      }
                      if (*(_WORD *)(a4 + 104 * (unsigned __int16)v751 + 76))
                      {
                        uint64_t v562 = v494 + 32 * *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v751 + 76);
                        *(_DWORD *)(v562 + 12) += v560;
                      }
                      if (*(_DWORD *)__dst != 1 || *(_DWORD *)&__dst[8])
                      {
                        if ((unsigned __int16)v550 < 2u)
                        {
                          v564 = 0;
                          LOWORD(v566) = 1;
                        }
                        else
                        {
                          v564 = 0;
                          v565 = (const char **)(v754 + 56);
                          uint64_t v566 = 1;
                          while (*(_DWORD *)&__dst[12] >= *((_DWORD *)v565 - 3))
                          {
                            if (*((_DWORD *)v565 - 6) == 21) {
                              v564 = *v565;
                            }
                            ++v566;
                            v565 += 4;
                            if ((unsigned __int16)v550 == v566)
                            {
                              LOWORD(v566) = v741;
                              break;
                            }
                          }
                        }
                        v567 = (_WORD *)(a4 + 76);
                        uint64_t v568 = a5;
                        do
                        {
                          unsigned int v569 = (unsigned __int16)*(v567 - 1);
                          if (v569 >= (unsigned __int16)v566) {
                            *(v567 - 1) = v569 + 1;
                          }
                          unsigned int v570 = (unsigned __int16)*v567;
                          if (v570 >= (unsigned __int16)v566) {
                            _WORD *v567 = v570 + 1;
                          }
                          v567 += 52;
                          --v568;
                        }
                        while (v568);
                        v571 = (void *)(v494 + 32 * (unsigned __int16)v566);
                        cstdlib_memmove((void *)(v494 + 32 * ((unsigned __int16)v566 + 1)), v571, 32 * ((unsigned __int16)v741 - (unsigned __int16)v566));
                        cstdlib_memcpy(v571, __dst, 0x20uLL);
                        uint64_t v494 = v754;
                        uint64_t v563 = (v741 + 1);
                        v495 = v757;
                        unsigned int v547 = a5;
                        if (*(_DWORD *)__dst == 34)
                        {
                          unsigned __int16 v572 = v566 + 1;
                          cstdlib_memmove((void *)(v754 + 32 * (v572 + 1)), (const void *)(v754 + 32 * v572), 32 * ((unsigned __int16)(v741 + 1) - v572));
                          *(_DWORD *)char __dst = 21;
                          *(_DWORD *)&__dst[4] += 2;
                          *(_DWORD *)&__dst[8] = 0;
                          ++*(_DWORD *)&__dst[12];
                          LODWORD(v765) = 0;
                          v573 = "normal";
                          if (v564) {
                            v573 = v564;
                          }
                          *((void *)&v765 + 1) = v573;
                          cstdlib_memcpy((void *)(v754 + 32 * v572), __dst, 0x20uLL);
                          v574 = (_WORD *)(a4 + 76);
                          uint64_t v575 = a5;
                          do
                          {
                            unsigned int v576 = (unsigned __int16)*(v574 - 1);
                            if (*(v574 - 1) && v576 >= v572) {
                              *(v574 - 1) = v576 + 1;
                            }
                            unsigned int v577 = (unsigned __int16)*v574;
                            if (*v574 && v577 >= v572) {
                              _WORD *v574 = v577 + 1;
                            }
                            v574 += 52;
                            --v575;
                          }
                          while (v575);
                          uint64_t v563 = (v741 + 2);
                          v495 = v757;
                          unsigned int v547 = a5;
                          uint64_t v494 = v754;
                        }
                      }
                      else
                      {
                        uint64_t v563 = v550;
                      }
                      if (v495[62] == 1)
                      {
                        uint64_t v578 = a4 + 104 * (unsigned __int16)v751;
                        v581 = *(const char **)(v578 + 40);
                        v580 = (const char **)(v578 + 40);
                        v579 = v581;
                        if (v581)
                        {
                          *(_DWORD *)char __dst = 58;
                          *(void *)&char __dst[4] = *(void *)v559;
                          *(_DWORD *)&__dst[12] = *(_DWORD *)(v494 + 12)
                                                + *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v751 + 8);
                          v582 = *(void **)(*(void *)v495 + 8);
                          int v583 = cstdlib_strlen(v579);
                          v584 = (char *)heap_Calloc(v582, 1, (v583 + 1));
                          *((void *)&v765 + 1) = v584;
                          if (!v584)
                          {
                            log_OutPublic((*v757)[4], (uint64_t)"POSPARSER", 68000, 0, v585, v586, v587, v588, v695);
                            LODWORD(v606) = -1607458806;
                            LOWORD(v15) = v563;
LABEL_800:
                            v609 = a9;
                            v608 = (char **)v721;
                            v610 = a10;
LABEL_801:
                            uint64_t v607 = v754;
LABEL_802:
                            unsigned int v732 = v606;
                            char __s = (char *)__b[0];
                            v742 = v739;
                            goto LABEL_803;
                          }
                          cstdlib_strcpy(v584, *v580);
                          if ((unsigned __int16)v563 < 2u)
                          {
                            LOWORD(v590) = 1;
                            uint64_t v591 = v754;
                          }
                          else
                          {
                            v589 = (unsigned int *)(v754 + 44);
                            uint64_t v590 = 1;
                            uint64_t v591 = v754;
                            while (1)
                            {
                              unsigned int v592 = *v589;
                              v589 += 8;
                              if (*(_DWORD *)&__dst[12] < v592) {
                                break;
                              }
                              if ((unsigned __int16)v563 == ++v590)
                              {
                                LOWORD(v590) = v563;
                                break;
                              }
                            }
                          }
                          v599 = (void *)(v591 + 32 * (unsigned __int16)v590);
                          cstdlib_memmove((void *)(v591 + 32 * ((unsigned __int16)v590 + 1)), v599, 32 * ((unsigned __int16)v563 - (unsigned __int16)v590));
                          cstdlib_memcpy(v599, __dst, 0x20uLL);
                          v600 = (_WORD *)(a4 + 76);
                          uint64_t v601 = a5;
                          v495 = v757;
                          unsigned int v547 = a5;
                          do
                          {
                            unsigned int v602 = (unsigned __int16)*(v600 - 1);
                            if (v602 >= (unsigned __int16)v590) {
                              *(v600 - 1) = v602 + 1;
                            }
                            unsigned int v603 = (unsigned __int16)*v600;
                            if (v603 >= (unsigned __int16)v590) {
                              _WORD *v600 = v603 + 1;
                            }
                            v600 += 52;
                            --v601;
                          }
                          while (v601);
                          uint64_t v15 = (v563 + 1);
                          uint64_t v494 = v754;
                        }
                        else
                        {
                          uint64_t v15 = v563;
                          unsigned int v547 = a5;
                        }
                      }
                      else
                      {
                        uint64_t v15 = v563;
                      }
                      int v493 = v751 + 1;
                      uint64_t v492 = (unsigned __int16)(v751 + 1);
                      if (v492 >= v547)
                      {
                        v604 = __b[0];
                        goto LABEL_741;
                      }
                      continue;
                    }
                  }
                  unsigned int v732 = -1607458806;
                  log_OutPublic(*(void *)(*v486 + 32), (uint64_t)"POSPARSER", 68000, 0, v488, v489, v490, v491, v691);
                }
LABEL_797:
                v609 = a9;
                v608 = (char **)v721;
                uint64_t v646 = v14;
                v610 = a10;
                goto LABEL_804;
              }
            }
LABEL_521:
            if (v350 != "FAIL_DICT_LOOKUP")
            {
              v393 = cstdlib_strchr(v350, LOBYTE(v761[0]));
              if (v393)
              {
                v394 = v393;
                char *v393 = 0;
                __int16 v395 = cstdlib_atoi((unsigned __int8 *)v350);
                while (1)
                {
                  if (v394[1] == LOBYTE(v761[0]))
                  {
                    uint64_t v15 = v740;
                    goto LABEL_558;
                  }
                  v396 = cstdlib_strchr(v394 + 1, LOBYTE(v761[0]));
                  v397 = v396;
                  if (v396) {
                    char *v396 = 0;
                  }
                  unsigned __int16 v398 = cstdlib_strlen(v394 + 1);
                  unsigned __int16 v399 = 0;
                  if ((_WORD)v734 != 1 && v398)
                  {
                    unint64_t v400 = 1;
                    int v401 = v734 - 1;
                    do
                    {
                      v401 -= v394[v400] == 59;
                      __int16 v402 = v400 + 1;
                      if ((_WORD)v401) {
                        BOOL v403 = v400 >= v398;
                      }
                      else {
                        BOOL v403 = 1;
                      }
                      ++v400;
                    }
                    while (!v403);
                    unsigned __int16 v399 = v402 - 1;
                  }
                  v404 = &v394[v399 + 1];
                  v405 = cstdlib_strchr(v404, 59);
                  if (v405) {
                    char *v405 = 0;
                  }
                  cstdlib_memset(__s2, 0, 0xAuLL);
                  LOWORD(v406) = Utf8_LengthInBytes(v713, 1);
                  size_t v407 = cstdlib_strlen("√");
                  uint64_t v15 = v740;
                  if (cstdlib_strncmp(v404, "√", v407))
                  {
                    size_t v406 = (v406 & 0xFFFE) != 0 ? (unsigned __int16)v406 : 1;
                    cstdlib_strncpy(__s2, (const char *)v713, v406);
                    unsigned __int16 v700 = v406 - 1;
                    cstdlib_strcat(__s2, v404);
                  }
                  else
                  {
                    size_t v411 = cstdlib_strlen("√");
                    cstdlib_strcpy(__s2, &v404[v411]);
                  }
                  log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"ADD SOLUTION \"%s\"(%u)", v408, v409, v410, (uint64_t)__s2);
                  if (v761[1]) {
                    break;
                  }
                  int v414 = 0;
LABEL_552:
                  cstdlib_strcpy(&v724[12 * v414], __s2);
                  *(_WORD *)&v724[12 * v761[1] + 10] = v395;
                  __int16 v417 = 1;
                  v418 = &v761[1];
LABEL_554:
                  *v418 += v417;
                  v394 = v397;
                  if (!v397) {
                    goto LABEL_558;
                  }
                }
                unint64_t v412 = 0;
                v413 = v724;
                do
                {
                  if (!cstdlib_strcmp(v413, __s2))
                  {
                    v418 = v413 + 10;
                    __int16 v417 = v395;
                    goto LABEL_554;
                  }
                  ++v412;
                  int v414 = v761[1];
                  v413 += 12;
                }
                while (v412 < v761[1]);
                if (v761[1] <= v699) {
                  goto LABEL_552;
                }
                v415 = v724;
                uint64_t v416 = heap_Realloc((uint64_t *)(*v757)[1], (uint64_t)v724, 12 * (unsigned __int16)(v699 + 10) + 12);
                if (v416)
                {
                  v699 += 10;
                  int v414 = v761[1];
                  v724 = (char *)v416;
                  goto LABEL_552;
                }
                goto LABEL_863;
              }
              cstdlib_atoi((unsigned __int8 *)v350);
            }
LABEL_558:
            unint64_t v310 = v711;
            goto LABEL_559;
          }
          v374 = (void *)(*v757)[1];
          int v375 = cstdlib_strlen(*v363);
          v376 = (char *)heap_Calloc(v374, 1, (v375 + 1));
          if (v376)
          {
            v350 = v376;
            v381 = *v363;
            goto LABEL_509;
          }
          unsigned int v732 = -1607458806;
          log_OutPublic((*v757)[4], (uint64_t)"POSPARSER", 68000, 0, v377, v378, v379, v380, v691);
LABEL_613:
          v698 = 0;
          goto LABEL_615;
        }
        cstdlib_strcpy(v724, (const char *)v244[25] + 6 * v730 + 2);
        if ((_WORD)v199)
        {
          uint64_t v250 = (unsigned __int16)v199;
          float v251 = v724 + 1;
          int v252 = __s1;
          uint64_t v253 = (unsigned __int16)v199;
          do
          {
            char v254 = *v252++;
            v251[12 * v761[1]] = v254;
            ++v251;
            --v253;
          }
          while (v253);
          float v255 = v757;
        }
        else
        {
          uint64_t v250 = 0;
          float v255 = v757;
        }
        v724[12 * v761[1] + 1 + v250] = 0;
        *(_WORD *)&v724[12 * v761[1] + 10] = 20000;
        log_OutText((*v255)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"(partial dia) ADD SOLUTION \"%s\"(%u)", v247, v248, v249, (uint64_t)&v724[12 * v761[1]]);
        unsigned __int16 v700 = 0;
        __int16 v277 = ++v761[1];
        char v278 = v245;
LABEL_367:
        if (v278)
        {
          if (v277)
          {
            uint64_t v279 = 0;
            int v703 = 0;
            unsigned __int16 v714 = 0;
            int v716 = 0;
            v280 = v724;
            do
            {
              v747 = &v280[12 * v279];
              unsigned __int16 v281 = cstdlib_strlen(v747);
              unsigned __int16 v282 = cstdlib_strlen((const char *)v757[25] + 6 * v730 + 2);
              uint64_t v710 = v279;
              if (v281)
              {
                v283 = v280;
                unsigned __int16 v284 = 0;
                unsigned __int16 v285 = 0;
                unsigned int v286 = v282;
                v704 = &v283[12 * v279 + 10];
                do
                {
                  unsigned __int16 v287 = Utf8_LengthInBytes((unsigned __int8 *)&v747[v285], 1);
                  unsigned __int16 v288 = Utf8_LengthInBytes((unsigned __int8 *)v757[25] + 6 * v730 + v284 + 2, 1);
                  BOOL v289 = v288 == v287 && v286 > v284;
                  if (v289)
                  {
                    unsigned __int16 v290 = v288;
                    if (!cstdlib_strncmp(&v747[v285], (const char *)v757[25] + 6 * v730 + v284 + 2, v287))
                    {
                      unsigned int v291 = *(unsigned __int16 *)v704;
                      if (v291 >= v714) {
                        int v292 = v279;
                      }
                      else {
                        int v292 = v716;
                      }
                      int v716 = v292;
                      if (v291 <= v714) {
                        LOWORD(v291) = v714;
                      }
                      unsigned __int16 v714 = v291;
                      v284 += v290;
                      int v703 = 1;
                    }
                  }
                  v285 += v287;
                }
                while (v285 < v281);
              }
              ++v279;
              int v293 = v761[1];
              v280 = v724;
            }
            while (v710 + 1 < (unint64_t)v761[1]);
            if (v703)
            {
              unsigned __int16 v294 = v716;
              goto LABEL_595;
            }
            v419 = v757;
            unint64_t v420 = v730;
            unsigned __int16 v294 = v716;
          }
          else
          {
            unsigned __int16 v714 = 0;
            unsigned __int16 v294 = 0;
            int v293 = 0;
            v419 = v757;
            v280 = v724;
            unint64_t v420 = v730;
          }
          log_OutText(*(void *)(*v419 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NO SOLUTION CONTAINING DIACRITIC \"%s\" - see if solution with vowel", v274, v275, v276, v419[25] + 6 * v420 + 2);
          if (v293)
          {
            unint64_t v421 = 0;
            char v422 = 1;
            while (2)
            {
              char v706 = v422;
              while (1)
              {
                v423 = &v280[12 * v421];
                unsigned __int16 v424 = cstdlib_strlen(v423);
                v425 = v757[15] ? (const char *)v757[15] : "^FNKauioR";
                v750 = (char *)v425;
                unsigned __int16 v712 = cstdlib_strlen(v425);
                if (v712) {
                  break;
                }
LABEL_581:
                ++v421;
                int v431 = v761[1];
                v280 = v724;
                if (v421 >= v761[1])
                {
                  if ((v706 & 1) == 0) {
                    goto LABEL_595;
                  }
                  goto LABEL_591;
                }
              }
              unsigned __int16 v426 = 0;
              while (1)
              {
                unsigned __int16 v427 = Utf8_LengthInBytes((unsigned __int8 *)&v750[v426], 1);
                if (v424) {
                  break;
                }
LABEL_580:
                v426 += v427;
                if (v426 >= v712) {
                  goto LABEL_581;
                }
              }
              unsigned __int16 v428 = 0;
              while (1)
              {
                unsigned __int16 v429 = Utf8_LengthInBytes((unsigned __int8 *)&v423[v428], 1);
                unsigned __int16 v430 = v429;
                if (v429 == v427 && !cstdlib_strncmp(&v750[v426], &v423[v428], v429)) {
                  break;
                }
                v428 += v430;
                if (v428 >= v424) {
                  goto LABEL_580;
                }
              }
              char v422 = 0;
              v280 = v724;
              unsigned int v432 = *(unsigned __int16 *)&v724[12 * v421 + 10];
              if (v432 >= v714) {
                unsigned __int16 v294 = v421;
              }
              if (v432 <= v714) {
                LOWORD(v432) = v714;
              }
              unsigned __int16 v714 = v432;
              if (++v421 < v761[1]) {
                continue;
              }
              break;
            }
LABEL_595:
            log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FORCE NGRAM SOLUTION[%d] \"%s\" %d", v274, v275, v276, v294);
            uint64_t v295 = v757;
            LOWORD(v299) = v294;
            uint64_t v15 = v740;
            uint64_t v14 = v722;
          }
          else
          {
            int v431 = 0;
LABEL_591:
            v433 = v757;
            if (*((_DWORD *)v757 + 38) != 1
              || (int v434 = cstdlib_strcmp((const char *)v757[25] + 6 * v730 + 2, "B"), v433 = v757, v434)
              && (int v438 = cstdlib_strcmp((const char *)v757[25] + 6 * v730 + 2, "X"), v433 = v757, v438))
            {
              cstdlib_strcpy(&v280[12 * v431], (const char *)(v433[25] + 6 * v730 + 2));
              v433 = v757;
            }
            else
            {
              v280[12 * v431] = 65;
              v280[12 * v761[1] + 1] = 0;
            }
            uint64_t v15 = v740;
            uint64_t v14 = v722;
            *(_WORD *)&v280[12 * v761[1] + 10] = 0;
            uint64_t v299 = v761[1]++;
            log_OutText(*(void *)(*v433 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"BACKUP NGRAM SOLUTION[%d] \"%s\" %d", v435, v436, v437, v299);
            uint64_t v295 = v757;
          }
        }
        else
        {
          uint64_t v295 = v757;
          if (v277)
          {
            unint64_t v296 = 0;
            LOWORD(v297) = 0;
            unsigned __int16 v298 = 0;
            LOWORD(v299) = 0;
            char v300 = 1;
LABEL_390:
            __int16 v301 = v297;
            int v302 = &v724[12 * v296];
            unint64_t v297 = v296;
            do
            {
              log_OutText((*v295)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SOLUTION[%d] \"%s\" %d", v274, v275, v276, v297);
              unsigned int v303 = *((unsigned __int16 *)v302 + 5);
              if (v303 == 20000)
              {
                char v300 = 0;
                unint64_t v296 = v297 + 1;
                uint64_t v295 = v757;
                if (v297 + 1 < v761[1]) {
                  goto LABEL_390;
                }
                goto LABEL_401;
              }
              v302 += 12;
              if (v303 >= v298) {
                LOWORD(v299) = v297;
              }
              if (v303 > v298) {
                unsigned __int16 v298 = v303;
              }
              ++v297;
              uint64_t v295 = v757;
            }
            while (v297 < v761[1]);
            LOWORD(v297) = v301;
            if (v300) {
              goto LABEL_598;
            }
LABEL_401:
            unsigned __int16 v304 = cstdlib_strlen(&v724[12 * (unsigned __int16)v297]);
            uint64_t v295 = v757;
            if (!v761[1]) {
              goto LABEL_408;
            }
            unint64_t v305 = 0;
            int v306 = 0;
            size_t v307 = v304;
            unsigned int v308 = v304;
            unsigned __int16 v309 = v724;
            do
            {
              if (!cstdlib_memcmp(v309, &v724[12 * (unsigned __int16)v297], v307)
                && (unsigned __int16)cstdlib_strlen(v309) > v308)
              {
                LOWORD(v299) = v305;
                int v306 = 1;
              }
              ++v305;
              v309 += 12;
            }
            while (v305 < v761[1]);
            uint64_t v295 = v757;
            uint64_t v14 = v722;
            if (!v306) {
LABEL_408:
            }
              LOWORD(v299) = v297;
          }
          else
          {
            LOWORD(v299) = 0;
          }
        }
LABEL_598:
        v439 = &v724[12 * (unsigned __int16)v299];
        uint64_t v694 = (unsigned __int16)v299;
        uint64_t v440 = (uint64_t)v295;
        log_OutText((*v295)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SELECTED SOLUTION[%d] \"%s\" %d", v274, v275, v276, v694);
        __int16 v441 = cstdlib_strlen(*(const char **)__c);
        __int16 v442 = cstdlib_strlen(v439);
        unsigned int v443 = posparserGrowStr(v440, (uint64_t *)__c, (unsigned __int16)(v442 + v441 + 1), &v758, 0);
        if ((v443 & 0x80000000) != 0)
        {
          unsigned int v732 = v443;
          goto LABEL_864;
        }
        cstdlib_strcat(*(char **)__c, v439);
        uint64_t v444 = a4 + 104 * v697;
        int v446 = *(unsigned __int16 *)(v444 + 10);
        v445 = (unsigned __int16 *)(v444 + 10);
        uint64_t v21 = __s;
        if (v709 + v700 + 1 == v446)
        {
          v447 = *(char **)__c;
          unsigned __int16 v448 = cstdlib_strlen(*(const char **)__c);
          uint64_t v449 = *(unsigned __int16 *)(a4 + 104 * v697 + 8);
          if (*v445 - v449 == v448 && !cstdlib_memcmp(v447, &__s[v449], v448))
          {
            log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"--> NGRAM WORD SOLUTION \"%s\" (unchanged)", v450, v451, v452, (uint64_t)v447);
            unsigned int v732 = 0;
          }
          else
          {
            v453 = (void *)(*v757)[1];
            int v454 = cstdlib_strlen(v447);
            uint64_t v455 = heap_Calloc(v453, 1, (v454 + 1));
            uint64_t v456 = a4 + 104 * v697;
            *(void *)(v456 + 64) = v455;
            v457 = (char **)(v456 + 64);
            if (!v455)
            {
              unsigned int v732 = -1607458806;
              uint64_t v690 = (uint64_t)*v757;
LABEL_874:
              log_OutPublic(*(void *)(v690 + 32), (uint64_t)"POSPARSER", 68000, 0, v370, v371, v372, v373, v691);
              goto LABEL_615;
            }
            unsigned int v732 = posparser_PostProcess((uint64_t)v757, (const char **)__c);
            if ((v732 & 0x80000000) != 0) {
              goto LABEL_615;
            }
            v447 = *(char **)__c;
            cstdlib_strcpy(*v457, *(const char **)__c);
            log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"--> NGRAM WORD SOLUTION \"%s\"", v458, v459, v460, (uint64_t)*v457);
          }
          *(void *)v729 = (v729[0] + 1);
          cstdlib_strcpy(v447, "");
          unsigned int v461 = v732;
        }
        else
        {
          unsigned int v461 = 0;
        }
        uint64_t v243 = v713;
        unsigned int v732 = v461;
        if (*v713 == 32
          && *(unsigned __int16 *)(a4 + 104 * LOWORD(v729[0]) + 8) > (unsigned __int16)v743)
        {
          cstdlib_strcpy(*(char **)__c, "");
        }
        goto LABEL_610;
      }
      uint64_t v208 = v757;
      int v206 = v702;
      if (*(unsigned __int16 *)(a4 + 104 * v210 + 8) != (unsigned __int16)v743) {
        goto LABEL_328;
      }
      log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM SKIPPING %d-%d as phonetic", v202, v203, v204, v709);
      int v225 = *(unsigned __int16 *)(a4 + 104 * v210 + 10);
      uint64_t v21 = __s;
LABEL_277:
      int v189 = v225 + 1;
LABEL_278:
      unint64_t v190 = v730;
      uint64_t v188 = (unsigned __int16)v189;
      if (v726 <= (unsigned __int16)v189) {
        goto LABEL_615;
      }
    }
    int v199 = 0;
    int v200 = 0;
    unint64_t v201 = 1;
LABEL_281:
    if (!v201 || v195 >= v726)
    {
      unint64_t v730 = 0;
      uint64_t v188 = v708;
      goto LABEL_229;
    }
    unint64_t v211 = 0;
    int v226 = 0;
    do
    {
      if (v226) {
        break;
      }
      int v227 = (unsigned __int8 *)v194[25];
      unsigned int v228 = *(unsigned __int16 *)&v227[6 * v211];
      if (v195 < v228) {
        break;
      }
      if (v195 == v228
        && (v194[15] ? (uint64_t v229 = (const char *)v194[15]) : (uint64_t v229 = "^FNKauioR"),
            unint64_t v230 = v211,
            int v231 = isCharInStr(&v227[6 * v211 + 2], v229),
            unint64_t v211 = v230,
            int v194 = v757,
            v231))
      {
        if (v230 < *((unsigned __int16 *)v757 + 104)
          && (uint64_t v232 = (unsigned __int8 *)v757[25], v195 == *(unsigned __int16 *)&v232[6 * v230]))
        {
          BOOL v233 = v757[15] ? (const char *)v757[15] : "^FNKauioR";
          if (isCharInStr(&v232[6 * v230 + 2], v233))
          {
            uint64_t v234 = 6 * v230 + 6;
            unint64_t v235 = v230;
            while (1)
            {
              cstdlib_strcat(__s1, (const char *)v757[25] + v234 - 4);
              v199 += cstdlib_strlen((const char *)v757[25] + v234 - 4);
              ++v235;
              int v194 = v757;
              if (v235 >= *((unsigned __int16 *)v757 + 104)) {
                break;
              }
              uint64_t v236 = (unsigned __int8 *)v757[25];
              if (v195 != *(unsigned __int16 *)&v236[v234]) {
                break;
              }
              if (v757[15]) {
                float v237 = (const char *)v757[15];
              }
              else {
                float v237 = "^FNKauioR";
              }
              int v238 = isCharInStr(&v236[v234 + 2], v237);
              int v226 = 1;
              v234 += 6;
              if (!v238)
              {
                int v194 = v757;
                goto LABEL_310;
              }
            }
            int v226 = 1;
LABEL_310:
            uint64_t v21 = __s;
            uint64_t v14 = v722;
            unint64_t v211 = v230;
          }
          else
          {
            int v226 = 0;
            int v194 = v757;
            unint64_t v211 = v230;
          }
        }
        else
        {
          int v226 = 0;
        }
      }
      else
      {
        int v226 = 0;
        ++v211;
      }
    }
    while (v211 < *((unsigned __int16 *)v194 + 104));
    uint64_t v188 = v708;
    if (!v226)
    {
      unint64_t v730 = v211;
      goto LABEL_229;
    }
    if (v200 == 1)
    {
      int v239 = 0;
      int v205 = 1;
LABEL_318:
      unint64_t v730 = v211;
      log_OutText((*v194)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\" rewrite+vowel diacritic=\"%s%s\"", v191, v192, v193, v188);
      int v200 = 1;
      int v206 = v239;
      goto LABEL_230;
    }
    unint64_t v730 = v211;
    log_OutText((*v194)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"NGRAM DOING [%d] \"%c\" vowel diacritic=\"%s\"", v191, v192, v193, v708);
    int v206 = 0;
    int v205 = 1;
    goto LABEL_230;
  }
  uint64_t v83 = v23;
  unsigned int POSAndDiacritics = posparser_doPatternMatching((uint64_t)v21, v22, v23, a4, a5, v24, v25, v26);
  if ((POSAndDiacritics & 0x80000000) != 0) {
    goto LABEL_95;
  }
  *(void *)char __dst = 0;
  __b[0] = 0;
  *(_DWORD *)long long __src = 0;
  log_OutText(*(void *)(*v83 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"posparser_doPOSDisambiguation()", v84, v85, v86, 0);
  if (!a5) {
    goto LABEL_122;
  }
  uint64_t v90 = 0;
  unsigned __int16 v91 = 0;
  LOWORD(v92) = 0;
  do
  {
    uint64_t v93 = a4 + 104 * v90;
    unsigned int v96 = *(unsigned __int16 *)(v93 + 32);
    unint64_t v95 = (unsigned __int16 *)(v93 + 32);
    unsigned int v94 = v96;
    if (v96 <= (unsigned __int16)v92) {
      unsigned int v92 = (unsigned __int16)v92;
    }
    else {
      unsigned int v92 = v94;
    }
    if (v94)
    {
      uint64_t v97 = 0;
      unint64_t v98 = 0;
      do
      {
        unsigned int v99 = cstdlib_strlen(*(const char **)(*(void *)(a4 + 104 * v90 + 24) + v97));
        if (v99 > v91) {
          unsigned __int16 v91 = v99;
        }
        ++v98;
        v97 += 16;
      }
      while (v98 < *v95);
    }
    ++v90;
  }
  while (v90 != a5);
  if (!v92)
  {
    uint64_t v101 = 0;
    uint64_t v100 = (unsigned __int16)(v91 + 1);
    uint64_t v106 = v757;
    uint64_t v21 = __s;
    goto LABEL_99;
  }
  uint64_t v100 = (unsigned __int16)(v91 + 1);
  uint64_t v101 = heap_Calloc((void *)(*v757)[1], 1, v100 * v92);
  uint64_t v21 = __s;
  if (!v101)
  {
    int v167 = 0;
    uint64_t v134 = 0;
    unsigned __int16 v132 = 17;
    unsigned __int16 v133 = 17;
    uint64_t v15 = v740;
    uint64_t v22 = v742;
    uint64_t v14 = v722;
LABEL_171:
    unsigned __int16 v746 = v133;
    uint64_t v135 = (uint64_t)*v757;
    goto LABEL_172;
  }
  uint64_t v106 = v757;
LABEL_99:
  uint64_t v107 = 0;
  v745 = (char *)v101;
  v737 = (char *)(v101 + v100);
  while (1)
  {
    uint64_t v108 = a4 + 104 * v107;
    unsigned __int16 v109 = (unsigned __int16 *)(v108 + 10);
    uint64_t v110 = (unsigned __int16 *)(v108 + 8);
    unsigned __int16 v111 = (char *)heap_Calloc((void *)(*v106)[1], 1, *(unsigned __int16 *)(v108 + 10) - (unint64_t)*(unsigned __int16 *)(v108 + 8) + 1);
    *(void *)(v108 + 56) = v111;
    int v113 = (void *)(v108 + 56);
    if (!v111) {
      break;
    }
    cstdlib_strncpy(v111, &v21[*v110], *v109 - (unint64_t)*v110);
    *(unsigned char *)(*v113 - *v110 + *v109) = 0;
    uint64_t v114 = a4 + 104 * v107;
    int v116 = *(unsigned __int16 *)(v114 + 32);
    uint64_t v115 = (_WORD *)(v114 + 32);
    if (v116)
    {
      uint64_t v117 = 0;
      unint64_t v118 = 0;
      int v119 = 0;
      uint64_t v120 = (void *)(a4 + 104 * v107 + 24);
      do
      {
        v119 += (unsigned __int16)cstdlib_strlen(*(const char **)(*v120 + v117)) + 2;
        ++v118;
        unint64_t v121 = (unsigned __int16)*v115;
        v117 += 16;
      }
      while (v118 < v121);
      uint64_t v122 = a4 + 104 * v107;
      *(void *)(v122 + 48) = 0;
      int v123 = (char **)(v122 + 48);
      if (v119)
      {
        uint64_t v124 = heap_Calloc((void *)(*v757)[1], 1, (v121 + v119 + 1));
        *int v123 = (char *)v124;
        if (!v124) {
          break;
        }
        if (v745)
        {
          if (*v115)
          {
            uint64_t v125 = 0;
            unint64_t v126 = 0;
            uint64_t v127 = v745;
            do
            {
              cstdlib_strcpy(v127, *(const char **)(*v120 + v125));
              ++v126;
              unint64_t v128 = (unsigned __int16)*v115;
              v125 += 16;
              v127 += v100;
            }
            while (v126 < v128);
          }
          else
          {
            unint64_t v128 = 0;
          }
          ssft_qsort((uint64_t)v745, v128, v100, (uint64_t (*)(unint64_t, unint64_t))string_cmp_1);
          cstdlib_strcpy(*v123, v745);
          uint64_t v21 = __s;
          if ((unsigned __int16)*v115 >= 2u)
          {
            uint64_t v129 = v737;
            unint64_t v130 = 1;
            do
            {
              cstdlib_strcat(*v123, "/");
              cstdlib_strcat(*v123, v129);
              ++v130;
              v129 += v100;
            }
            while (v130 < (unsigned __int16)*v115);
          }
        }
      }
    }
    else
    {
      *(void *)(a4 + 104 * v107 + 48) = 0;
    }
    ++v107;
    uint64_t v106 = v757;
    if (v107 == a5)
    {
      unsigned int v732 = 0;
      int v131 = 1;
      goto LABEL_119;
    }
  }
  unsigned int v732 = -1607458806;
  log_OutPublic((*v757)[4], (uint64_t)"POSPARSER", 68000, 0, v112, v87, v88, v89, v692);
  int v131 = 0;
LABEL_119:
  uint64_t v15 = v740;
  uint64_t v22 = v742;
  uint64_t v14 = v722;
  if (v745) {
    heap_Free((void *)(*v757)[1], (uint64_t)v745);
  }
  if (!v131)
  {
    uint64_t v134 = 0;
    unsigned __int16 v132 = 17;
    unsigned __int16 v746 = 17;
    v753 = 0;
    goto LABEL_174;
  }
LABEL_122:
  if (*((_DWORD *)v757 + 59))
  {
    unsigned __int16 v132 = 17;
    unsigned __int16 v133 = 17;
  }
  else
  {
    unsigned __int16 v132 = *((unsigned __int8 *)v757[28] + 1296) - 1;
    unsigned __int16 v133 = *((unsigned __int8 *)v757[27] + 1296) - 1;
  }
  log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"FEATUREVECTOR:NEWSENT", v87, v88, v89, v692);
  uint64_t v134 = (char **)heap_Calloc((void *)(*v757)[1], 1, 8 * v132);
  uint64_t v135 = (uint64_t)*v757;
  unsigned __int16 v746 = v133;
  if (!v134) {
    goto LABEL_169;
  }
  unsigned int inited = posparser_initFeatureVector(v135, v134, v132);
  if ((inited & 0x80000000) != 0)
  {
    unsigned int v732 = inited;
    v753 = 0;
    goto LABEL_174;
  }
  __int16 v137 = (char **)heap_Calloc((void *)(*v757)[1], 1, 8 * v133);
  uint64_t v135 = (uint64_t)*v757;
  if (!v137)
  {
LABEL_169:
    int v167 = 0;
LABEL_172:
    v753 = v167;
    unsigned int v732 = -1607458806;
    log_OutPublic(*(void *)(v135 + 32), (uint64_t)"POSPARSER", 68000, 0, v102, v103, v104, v105, v692);
    goto LABEL_174;
  }
  unsigned int v732 = posparser_initFeatureVector(v135, v137, v133);
  v753 = v137;
  if ((v732 & 0x80000000) != 0)
  {
LABEL_174:
    unint64_t v141 = (uint64_t *)v757;
    goto LABEL_175;
  }
  *(_DWORD *)long long __src = 128;
  char v138 = (char *)heap_Calloc((void *)(*v757)[1], 1, 129);
  __b[0] = v138;
  if (!v138)
  {
    int v167 = v137;
    goto LABEL_171;
  }
  size_t v139 = v138;
  cstdlib_strcpy(v138, "");
  if (!a5)
  {
    unint64_t v141 = (uint64_t *)v757;
    goto LABEL_176;
  }
  unsigned int v140 = 0;
  unint64_t v141 = (uint64_t *)v757;
  do
  {
    unsigned int v142 = *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v140 + 72);
    if (v142 != 9999 && v142 != (unsigned __int16)v140)
    {
      if (v142 > (unsigned __int16)v140)
      {
        unsigned int v143 = v140 + 1;
        do
          *(void *)(a4 + 104 * (unsigned __int16)v143++ + 40) = "MULTIWORD";
        while (v142 >= (unsigned __int16)v143);
      }
      unsigned int v140 = v142;
    }
    ++v140;
  }
  while (a5 > (unsigned __int16)v140);
  unsigned __int16 v738 = v132;
  uint64_t v144 = 0;
  v728 = v134;
  while (2)
  {
    uint64_t v145 = (unsigned __int16 *)(a4 + 104 * v144);
    uint64_t v146 = v145[4];
    int v147 = v145[5] - v146;
    if (v147 > *((unsigned __int16 *)v141 + 49)) {
      LOWORD(v147) = *((_WORD *)v141 + 49);
    }
    uint64_t v148 = (unsigned __int16)v147;
    cstdlib_strncpy(v742, &__s[v146], (unsigned __int16)v147);
    v742[v148] = 0;
    int v154 = v145[16];
    uint64_t v153 = v145 + 16;
    int v152 = v154;
    if (!v154)
    {
      if (*(_DWORD *)(a4 + 104 * v144 + 80) == 1)
      {
        uint64_t v155 = (uint64_t *)v757;
        log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"DIGITCLASS  :             : word[%2d] %10s", v149, v150, v151, v144);
        uint64_t v156 = a4 + 104 * v144;
        uint64_t v157 = (const char *)&szPOSDIGITCLASS;
      }
      else
      {
        uint64_t v155 = (uint64_t *)v757;
        if (*(_DWORD *)(a4 + 104 * v144 + 84) == 1)
        {
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PUNCTCLASS  :             : word[%2d] %10s", v149, v150, v151, v144);
          uint64_t v156 = a4 + 104 * v144;
          uint64_t v157 = "PUNCT";
        }
        else if (*(_DWORD *)(a4 + 104 * v144 + 12) == 1)
        {
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"DIACRITIZED :             : word[%2d] %10s", v149, v150, v151, v144);
          uint64_t v156 = a4 + 104 * v144;
          uint64_t v157 = "DIACRITIZED";
        }
        else if (*(_DWORD *)(a4 + 104 * v144 + 88) == 1)
        {
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"LATIN       :             : word[%2d] %10s", v149, v150, v151, v144);
          uint64_t v156 = a4 + 104 * v144;
          uint64_t v157 = "LATIN";
        }
        else if (*(_DWORD *)(a4 + 104 * v144 + 92) == 1)
        {
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"SPELLMODE   :             : word[%2d] %10s", v149, v150, v151, v144);
          uint64_t v156 = a4 + 104 * v144;
          uint64_t v157 = "SPELLMODE";
        }
        else
        {
          if (!*(_WORD *)(a4 + 104 * v144 + 74))
          {
            uint64_t v163 = a4 + 104 * v144;
            uint64_t v166 = *(const char **)(v163 + 40);
            int v165 = (void *)(v163 + 40);
            unsigned int v164 = v166;
            if (v166 && (uint64_t v155 = (uint64_t *)v757, !cstdlib_strcmp(v164, "MULTIWORD")))
            {
              log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"MULTIWORD   :             : word[%2d] %10s", v149, v150, v151, v144);
            }
            else
            {
              log_OutText(*(void *)(*v155 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"OOV         :             : word[%2d] %10s", v149, v150, v151, v144);
              *int v165 = "OOV";
            }
            goto LABEL_163;
          }
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"PHONETIC    :             : word[%2d] %10s", v149, v150, v151, v144);
          uint64_t v156 = a4 + 104 * v144;
          uint64_t v157 = "PHONETIC";
        }
      }
      *(void *)(v156 + 40) = v157;
      goto LABEL_163;
    }
    if (v152 == 1)
    {
      uint64_t v155 = (uint64_t *)v757;
      log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"KNOWN       : UNAMBIGUOUS : word[%2d] %10s : POS=%s DIA=%s", v149, v150, v151, v144);
    }
    else
    {
      uint64_t v155 = (uint64_t *)v757;
      log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"KNOWN       : AMBIGUOUS   : word[%2d] %10s : ", v149, v150, v151, v144);
      if (*v153)
      {
        uint64_t v161 = 0;
        unint64_t v162 = 0;
        do
        {
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"                                                  POS=%s DIA=%s", v158, v159, v160, *(void *)(*(void *)(a4 + 104 * v144 + 24) + v161));
          ++v162;
          v161 += 16;
        }
        while (v162 < (unsigned __int16)*v153);
      }
    }
LABEL_163:
    ++v144;
    unint64_t v141 = v155;
    if (v144 != a5) {
      continue;
    }
    break;
  }
  uint64_t v648 = 0;
  int v649 = 0;
  while (2)
  {
    unsigned int v650 = (unsigned __int16)v649;
    v651 = (unsigned __int16 *)(a4 + 104 * (unsigned __int16)v649);
    int v652 = v651[36];
    if ((unsigned __int16)v649 == v652 || v652 == 9999) {
      int v654 = v649;
    }
    else {
      int v654 = v651[36];
    }
    uint64_t v655 = v651[4];
    int v656 = *(unsigned __int16 *)(a4 + 104 * (unsigned __int16)v654 + 10) - v655;
    if (v656 > *((unsigned __int16 *)v141 + 49)) {
      LOWORD(v656) = *((_WORD *)v141 + 49);
    }
    v657 = v141;
    uint64_t v658 = (unsigned __int16)v656;
    cstdlib_strncpy(v742, &__s[v655], (unsigned __int16)v656);
    v742[v658] = 0;
    uint64_t v659 = *v657;
    uint64_t v22 = v742;
    log_OutText(*(void *)(v659 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Doing word[%2d] %10s", v660, v661, v662, v648);
    int v665 = v651[16];
    v664 = v651 + 16;
    int v663 = v665;
    if (v665)
    {
      unsigned __int16 v132 = v738;
      if (v663 == 1)
      {
        v666 = v757;
        if (*((_DWORD *)v757 + 59) == 1)
        {
          log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d FEATUREVECTOR:UNAMBIGUOUS:0:%s %s", v87, v88, v89, v648);
          v666 = v757;
        }
        unsigned __int16 v667 = 0;
        goto LABEL_847;
      }
      unint64_t v141 = (uint64_t *)v757;
      unsigned int v668 = setPosparserFeatureVector((uint64_t)v757, v742, (uint64_t)v757[28], v650, (uint64_t)v728, a4, a5, v738);
      if ((v668 & 0x80000000) != 0)
      {
        unsigned int v732 = v668;
        uint64_t v21 = __s;
        uint64_t v15 = v740;
      }
      else
      {
        int v669 = *((_DWORD *)v757 + 59);
        uint64_t v15 = v740;
        if (v669)
        {
          v670 = "DUMMY";
          *(void *)char __dst = "DUMMY";
          goto LABEL_838;
        }
        unsigned int v671 = igtree_Process((uint64_t)v757[28], (uint64_t)v728, __dst);
        if ((v671 & 0x80000000) != 0)
        {
          unsigned int v732 = v671;
        }
        else
        {
          v670 = *(char **)__dst;
          int v669 = *((_DWORD *)v757 + 59);
LABEL_838:
          unsigned int v732 = posparser_DumpFeatureVectorAndResult((uint64_t)*v757, "KNOWN", v728, v670, __b, (unsigned int *)__src, v738, v669, v650, v742);
          if ((v732 & 0x80000000) == 0)
          {
            if (*v664)
            {
              uint64_t v672 = 0;
              unint64_t v673 = 0;
              unsigned __int16 v667 = 0;
              do
              {
                if (!cstdlib_strcmp(*(const char **)__dst, *(const char **)(*(void *)(a4 + 104 * v650 + 24) + v672)))unsigned __int16 v667 = v673; {
                ++v673;
                }
                v672 += 16;
              }
              while (v673 < (unsigned __int16)*v664);
            }
            else
            {
              unsigned __int16 v667 = 0;
            }
            v666 = v757;
LABEL_847:
            v674 = (char **)(v664 - 8);
            v675 = (void *)(*v666)[1];
            uint64_t v676 = a4 + 104 * v650;
            uint64_t v678 = *(void *)(v676 + 24);
            v677 = (void *)(v676 + 24);
            int v679 = cstdlib_strlen(*(const char **)(v678 + 16 * v667 + 8));
            v680 = (char *)heap_Calloc(v675, 1, (v679 + 1));
            *v674 = v680;
            if (!v680) {
              goto LABEL_865;
            }
            cstdlib_strcpy(v680, *(const char **)(*v677 + 16 * v667 + 8));
            *(void *)(a4 + 104 * v650 + 40) = *(void *)(*v677 + 16 * v667);
LABEL_849:
            unint64_t v141 = (uint64_t *)v757;
LABEL_850:
            int v649 = v654 + 1;
            uint64_t v648 = (unsigned __int16)(v654 + 1);
            if (v648 >= a5) {
              goto LABEL_877;
            }
            continue;
          }
          unint64_t v141 = (uint64_t *)v757;
        }
        uint64_t v21 = __s;
      }
      uint64_t v14 = v722;
      goto LABEL_878;
    }
    break;
  }
  if (*(_DWORD *)(a4 + 104 * v650 + 80)
    || *(_DWORD *)(a4 + 104 * v650 + 84)
    || *(_DWORD *)(a4 + 104 * v650 + 12)
    || *(_DWORD *)(a4 + 104 * v650 + 88)
    || *(_DWORD *)(a4 + 104 * v650 + 92)
    || *(_WORD *)(a4 + 104 * v650 + 74))
  {
    unint64_t v141 = (uint64_t *)v757;
    if (*((_DWORD *)v757 + 59) == 1)
    {
      log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"%d FEATUREVECTOR:DUMMY:0:%s %s", v87, v88, v89, v648);
      goto LABEL_849;
    }
    goto LABEL_850;
  }
  unsigned int v732 = setPosparserFeatureVector((uint64_t)v757, v742, (uint64_t)v757[27], v650, (uint64_t)v753, a4, a5, v746);
  if ((v732 & 0x80000000) != 0) {
    goto LABEL_876;
  }
  int v685 = *((_DWORD *)v757 + 59);
  if (v685)
  {
    v686 = "DUMMY";
    *(void *)char __dst = "DUMMY";
  }
  else
  {
    unsigned int v732 = igtree_Process((uint64_t)v757[27], (uint64_t)v753, __dst);
    if ((v732 & 0x80000000) != 0) {
      goto LABEL_876;
    }
    v686 = *(char **)__dst;
    int v685 = *((_DWORD *)v757 + 59);
  }
  unsigned int v732 = posparser_DumpFeatureVectorAndResult((uint64_t)*v757, "OOV", v753, v686, __b, (unsigned int *)__src, v746, v685, v650, v742);
  if ((v732 & 0x80000000) != 0)
  {
LABEL_876:
    unint64_t v141 = (uint64_t *)v757;
LABEL_877:
    uint64_t v21 = __s;
    uint64_t v15 = v740;
    uint64_t v22 = v742;
    uint64_t v14 = v722;
    unsigned __int16 v132 = v738;
LABEL_878:
    uint64_t v134 = v728;
LABEL_175:
    size_t v139 = __b[0];
    if (__b[0])
    {
LABEL_176:
      heap_Free(*(void **)(*v141 + 8), (uint64_t)v139);
      unint64_t v141 = (uint64_t *)v757;
      __b[0] = 0;
      *(_DWORD *)long long __src = 0;
    }
    log_OutText(*(void *)(*v141 + 32), (uint64_t)"POSPARSER", 5, 0, (uint64_t)"POS Disambiguation results:", v87, v88, v89, 0);
    if (a5)
    {
      uint64_t v171 = 0;
      uint64_t v172 = a5;
      uint64_t v173 = a4 + 56;
      uint64_t v174 = v757;
      do
      {
        if (*(_WORD *)(v173 - 24))
        {
          log_OutText((*v174)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : %s", v168, v169, v170, v171);
        }
        else
        {
          uint64_t v175 = *(const char **)(v173 - 16);
          if (v175 && (v176 = cstdlib_strcmp(v175, "MULTIWORD"), uint64_t v174 = v757, !v176))
          {
            log_OutText((*v757)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : ", v168, v169, v170, v171);
          }
          else if (*(_DWORD *)(v173 + 24) {
                 || *(_DWORD *)(v173 + 28)
          }
                 || *(_DWORD *)(v173 - 44)
                 || *(_DWORD *)(v173 + 32)
                 || *(_DWORD *)(v173 + 36)
                 || *(_WORD *)(v173 + 18)
                 || *(_WORD *)(v173 - 24))
          {
            log_OutText((*v174)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : NON DICT WORD", v168, v169, v170, v171);
          }
          else
          {
            log_OutText((*v174)[4], (uint64_t)"POSPARSER", 5, 0, (uint64_t)"Word[%2d] : %15s : %25s : OOV NON DICT WORD", v168, v169, v170, v171);
          }
        }
        ++v171;
        v173 += 104;
        uint64_t v174 = v757;
      }
      while (a5 != v171);
      uint64_t v177 = a4 + 48;
      uint64_t v21 = __s;
      uint64_t v22 = v742;
      while (1)
      {
        if (*(_DWORD *)(v177 + 32)
          || *(_DWORD *)(v177 + 36)
          || *(_DWORD *)(v177 - 36)
          || *(_DWORD *)(v177 + 40)
          || *(_DWORD *)(v177 + 44)
          || *(_WORD *)(v177 + 26)
          || *(_WORD *)(v177 - 16))
        {
          goto LABEL_207;
        }
        uint64_t v178 = *(const char **)(v177 - 8);
        if (!v178) {
          break;
        }
        if (cstdlib_strcmp(v178, "MULTIWORD"))
        {
          uint64_t v179 = *(void *)(v177 - 8);
LABEL_206:
          heap_Free((void *)(*v757)[1], v179);
          *(void *)(v177 - 8) = 0;
        }
LABEL_207:
        uint64_t v180 = *(void *)(v177 + 8);
        if (v180)
        {
          heap_Free((void *)(*v757)[1], v180);
          *(void *)(v177 + 8) = 0;
        }
        if (*(void *)v177)
        {
          heap_Free((void *)(*v757)[1], *(void *)v177);
          *(void *)uint64_t v177 = 0;
        }
        v177 += 104;
        if (!--v172) {
          goto LABEL_212;
        }
      }
      uint64_t v179 = 0;
      goto LABEL_206;
    }
LABEL_212:
    if (v753)
    {
      posparser_freeFeatureVector(*v757, (uint64_t *)v753, v746);
      heap_Free((void *)(*v757)[1], (uint64_t)v753);
    }
    unsigned int v23 = (uint64_t *)v757;
    if (v134)
    {
      posparser_freeFeatureVector(*v757, (uint64_t *)v134, v132);
      heap_Free((void *)(*v757)[1], (uint64_t)v134);
      unsigned int v23 = (uint64_t *)v757;
    }
    if ((v732 & 0x80000000) != 0) {
      goto LABEL_797;
    }
    goto LABEL_217;
  }
  v687 = (void *)(*v757)[1];
  int v688 = cstdlib_strlen(*(const char **)__dst);
  v689 = (char *)heap_Calloc(v687, 1, (v688 + 1));
  *(void *)(a4 + 104 * v650 + 40) = v689;
  if (v689)
  {
    cstdlib_strcpy(v689, *(const char **)__dst);
    goto LABEL_849;
  }
LABEL_865:
  unsigned int v732 = -1607458806;
  log_OutPublic((*v757)[4], (uint64_t)"POSPARSER", 68000, 0, v681, v682, v683, v684, v696);
  v609 = a9;
  v608 = (char **)v721;
  v610 = a10;
  LOWORD(v15) = v740;
  uint64_t v646 = v722;
LABEL_804:
  _WORD *v610 = v15;
  *v608 = __s;
  uint64_t *v609 = v646;
  uint64_t v22 = v742;
  if (v742) {
LABEL_805:
  }
    heap_Free((void *)(*v757)[1], (uint64_t)v22);
  return v732;
}

void *posparser_ProcessEnd(void *result)
{
  unsigned int v1 = result;
  unsigned int v2 = *((unsigned __int8 *)result + 96);
  if (*((unsigned char *)result + 96))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v1[11] + 8 * v3);
      if (v4)
      {
        uint64_t result = heap_Free(*(void **)(*v1 + 8), v4);
        *(void *)(v1[11] + 8 * v3) = 0;
        unsigned int v2 = *((unsigned __int8 *)v1 + 96);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  uint64_t v5 = v1[11];
  if (v5)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v5);
    v1[11] = 0;
  }
  uint64_t v6 = v1[10];
  if (v6)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v6);
    v1[10] = 0;
  }
  uint64_t v7 = v1[14];
  if (v7)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v7);
    v1[14] = 0;
  }
  uint64_t v8 = v1[13];
  if (v8)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v8);
    v1[13] = 0;
  }
  uint64_t v9 = v1[15];
  if (v9)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v9);
    v1[15] = 0;
  }
  uint64_t v10 = v1[16];
  if (v10)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v10);
    v1[16] = 0;
  }
  uint64_t v11 = v1[17];
  if (v11)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v11);
    v1[17] = 0;
  }
  uint64_t v12 = v1[18];
  if (v12)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v12);
    v1[18] = 0;
  }
  uint64_t v13 = v1[20];
  if (*((_WORD *)v1 + 84))
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      heap_Free(*(void **)(*v1 + 8), *(void *)(v13 + v14 + 8));
      uint64_t v16 = v1[20] + v14;
      *(void *)(v16 + 8) = 0;
      heap_Free(*(void **)(*v1 + 8), *(void *)(v16 + 24));
      uint64_t v13 = v1[20];
      *(void *)(v13 + v14 + 24) = 0;
      if (*(void *)(v13 + v14 + 40))
      {
        heap_Free(*(void **)(*v1 + 8), *(void *)(v13 + v14 + 40));
        uint64_t v13 = v1[20];
        *(void *)(v13 + v14 + 40) = 0;
      }
      ++v15;
      v14 += 56;
    }
    while (v15 < *((unsigned __int16 *)v1 + 84));
    *((_WORD *)v1 + 84) = 0;
  }
  else
  {
    *((_WORD *)v1 + 84) = 0;
    if (!v13) {
      goto LABEL_30;
    }
  }
  uint64_t result = heap_Free(*(void **)(*v1 + 8), v13);
  v1[20] = 0;
LABEL_30:
  uint64_t v17 = v1[22];
  if (v17)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v17);
    v1[22] = 0;
  }
  *((_WORD *)v1 + 92) = 0;
  return result;
}

uint64_t posparser_GrowAndInsert(void *a1, uint64_t *a2, __int16 a3, __int16 a4, unsigned int a5, int a6, unsigned int a7, _WORD *a8, _WORD *a9)
{
  LODWORD(v11) = a6;
  uint64_t v15 = *a2;
  unsigned __int16 v16 = a3 - a4;
  int v17 = (unsigned __int16)*a8;
  unsigned int v18 = (unsigned __int16)*a9;
  if (v17 + (unsigned __int16)(a3 - a4) <= v18)
  {
    BOOL v29 = a2;
  }
  else
  {
    *a9 = v18 + 10;
    uint64_t v19 = heap_Realloc(*(uint64_t **)(*a1 + 8), v15, (unsigned __int16)(v18 + 10) + 1);
    if (!v19)
    {
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"POSPARSER", 68000, 0, v20, v21, v22, v23, v28);
      return 2687508490;
    }
    uint64_t v15 = v19;
    BOOL v29 = a2;
    int v17 = (unsigned __int16)*a8;
  }
  cstdlib_memmove((void *)(v15 + a5 + v16), (const void *)(v15 + a5), (int)(v17 - a5));
  if (v11 < a7)
  {
    uint64_t v11 = v11;
    do
    {
      if (cstdlib_strlen((const char *)(a1[25] + 6 * v11 + 2)))
      {
        uint64_t v24 = 0;
        int v25 = 0;
        do
        {
          *(unsigned char *)(v15 + (unsigned __int16)a5++) = *(unsigned char *)(a1[25] + 6 * v11 + v24 + 2);
          uint64_t v24 = (unsigned __int16)++v25;
        }
        while (cstdlib_strlen((const char *)(a1[25] + 6 * v11 + 2)) > (unsigned __int16)v25);
      }
      ++v11;
    }
    while (v11 != a7);
  }
  uint64_t result = 0;
  unsigned __int16 v27 = *a8 + v16;
  *a8 = v27;
  *(unsigned char *)(v15 + v27) = 0;
  *BOOL v29 = v15;
  return result;
}

BOOL isPuncClass(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = (const char *)a1[16];
  if (!v4) {
    uint64_t v4 = ".!?";
  }
  if (isCharInStr(a2, v4)) {
    return 1;
  }
  uint64_t v5 = (const char *)a1[17];
  if (!v5) {
    uint64_t v5 = ",:;";
  }
  if (isCharInStr(a2, v5)) {
    return 1;
  }
  uint64_t v6 = (const char *)a1[18];
  if (!v6) {
    uint64_t v6 = (const char *)&puncClass3;
  }
  return isCharInStr(a2, v6) != 0;
}

size_t posparser_undoEmbeddedRules(uint64_t a1, char *__s)
{
  size_t result = cstdlib_strlen(__s);
  if ((unsigned __int16)result >= 3u)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 184);
    uint64_t v6 = 1;
    unsigned int v7 = v5;
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        int v10 = __s[v6];
        do
        {
          uint64_t v11 = *(void *)(a1 + 176);
          if (v10 == *(unsigned __int8 *)(v11 + v8 + 1))
          {
            int v10 = *(unsigned __int8 *)(v11 + v8);
            __s[v6] = v10;
            unsigned int v5 = *(unsigned __int16 *)(a1 + 184);
          }
          ++v9;
          v8 += 2;
          unsigned int v7 = v5;
        }
        while (v9 < v5);
      }
      ++v6;
    }
    while (v6 != (unsigned __int16)result - 1);
  }
  return result;
}

char *insertString(char *__src, char *__dst, const char *a3, int a4)
{
  cstdlib_strcpy(__dst, __src);
  uint64_t v8 = &__dst[a4];
  size_t v9 = cstdlib_strlen(a3);
  cstdlib_strncpy(v8, a3, v9);
  int v10 = &v8[cstdlib_strlen(a3)];

  return cstdlib_strcpy(v10, &__src[a4 + 1]);
}

const char *getPunctClassChar(void *a1, int __c)
{
  uint64_t v4 = (char *)a1[16];
  if (!v4) {
    uint64_t v4 = ".!?";
  }
  if (cstdlib_strchr(v4, __c)) {
    return "Γ";
  }
  uint64_t v6 = (char *)a1[17];
  if (!v6) {
    uint64_t v6 = ",:;";
  }
  if (cstdlib_strchr(v6, __c)) {
    return "Θ";
  }
  if (a1[18]) {
    unsigned int v7 = (char *)a1[18];
  }
  else {
    unsigned int v7 = (char *)&puncClass3;
  }
  cstdlib_strchr(v7, __c);
  return "Ω";
}

void *sparray_free(uint64_t a1, uint64_t *a2)
{
  return kh_destroy_32(a2);
}

uint64_t sparray_get(uint64_t a1, int a2)
{
  unsigned int _32 = kh_get_32(a1, a2);
  if (_32 == *(_DWORD *)(a1 + 8)) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 40) + 4 * _32);
  }
}

uint64_t sparray_set(uint64_t result, int a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    int v5 = 0;
    size_t result = kh_put_32(result, a2, &v5);
    if (v5 == 1) {
      *(_DWORD *)(*(void *)(v4 + 40) + 4 * result) = a3;
    }
  }
  return result;
}

uint64_t qrk_new(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = heap_Alloc(*(void *)(a1 + 8), 32);
  if (v4)
  {
    uint64_t v5 = v4;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 128;
    uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 8, 128);
    uint64_t result = 0;
    *(void *)(v5 + 8) = v6;
    *a2 = v5;
    if (v6) {
      return result;
    }
    uint64_t v8 = *(void *)(v5 + 8);
    if (v8) {
      heap_Free(*(void **)(a1 + 8), v8);
    }
    heap_Free(*(void **)(a1 + 8), v5);
  }
  *a2 = 0;
  return 2585796618;
}

void *qrk_free(void *result, uint64_t a2, int a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2 && *(_DWORD *)(a2 + 20))
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      uint64_t v46 = 0;
      long long v30 = 0u;
      long long v29 = 0u;
      long long v28 = 0u;
      long long v27 = 0u;
      long long v26 = 0u;
      long long v25 = 0u;
      long long v24 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      unsigned int v7 = 1;
      uint64_t v14 = v6;
      do
      {
        uint64_t v8 = v7 - 1;
        uint64_t v9 = *(&v14 + v8);
        if (v9)
        {
          if (!a3)
          {
            unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
            heap_Free((void *)v5[1], *(void *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8));
            uint64_t v11 = (void *)v5[1];
            uint64_t v9 = v12;
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(v9 + 8);
          *(&v14 + v8) = *(void *)v9;
          LODWORD(v8) = v7 + 1;
          *(&v14 + v7) = v10;
          if (!a3)
          {
            uint64_t v11 = (void *)v5[1];
LABEL_10:
            heap_Free(v11, v9);
          }
        }
        unsigned int v7 = v8;
      }
      while (v8);
    }
    if (a3)
    {
      heap_Free((void *)v5[1], *(void *)a2);
      heap_Free((void *)v5[1], **(void **)(a2 + 8));
    }
    heap_Free((void *)v5[1], *(void *)(a2 + 8));
    uint64_t v13 = (void *)v5[1];
    return heap_Free(v13, a2);
  }
  return result;
}

uint64_t qrk_str2id(uint64_t a1, uint64_t *a2, char *__s, unsigned int *a4, unsigned int a5)
{
  if (!a5) {
    a5 = cstdlib_strlen(__s);
  }
  uint64_t v9 = a5;
  if (*((_DWORD *)a2 + 5))
  {
    for (uint64_t i = *a2; (i & 1) == 0; uint64_t i = *(void *)(i + ((((*(unsigned __int8 *)(i + 20) | v12) + 1) >> 5) & 8)))
    {
      uint64_t v11 = *(unsigned int *)(i + 16);
      if (v11 >= a5) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = __s[v11];
      }
    }
    uint64_t v13 = (unsigned int *)(i & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v14 = *(void *)((i & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (a5)
    {
      uint64_t v15 = 0;
      while (__s[v15] == *(unsigned char *)(v14 + v15))
      {
        if (a5 == ++v15)
        {
          LODWORD(v15) = a5;
          goto LABEL_20;
        }
      }
    }
    else
    {
      LODWORD(v15) = 0;
    }
    if (v15 == a5)
    {
LABEL_20:
      int v21 = *(unsigned __int8 *)(v14 + a5);
      if (!*(unsigned char *)(v14 + a5))
      {
        unsigned int v20 = *v13;
        goto LABEL_25;
      }
    }
    else
    {
      int v21 = *(unsigned __int8 *)(v14 + v15) ^ __s[v15];
    }
    if (*((_DWORD *)a2 + 4) == 1)
    {
LABEL_24:
      unsigned int v20 = -1;
      goto LABEL_25;
    }
    do
    {
      char v23 = v21;
      v21 &= v21 - 1;
    }
    while ((_BYTE)v21);
    uint64_t v16 = 2585796618;
    char v24 = *(unsigned char *)(v14 + v15);
    uint64_t v25 = heap_Alloc(*(void *)(a1 + 8), 24);
    if (v25)
    {
      uint64_t v39 = v25;
      uint64_t v26 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (v26)
      {
        uint64_t v27 = v26;
        long long v28 = (void *)heap_Alloc(*(void *)(a1 + 8), (v9 + 1));
        *(void *)(v27 + 8) = v28;
        if (v28)
        {
          unsigned __int8 v29 = v24 | ~v23;
          unsigned __int8 v30 = ~v23;
          unsigned int v31 = (v29 + 1) >> 8;
          cstdlib_memcpy(v28, __s, (v9 + 1));
          *(unsigned char *)(*(void *)(v27 + 8) + v9) = 0;
          unsigned int v20 = *((_DWORD *)a2 + 5);
          int v32 = *((_DWORD *)a2 + 6);
          *((_DWORD *)a2 + 5) = v20 + 1;
          *(_DWORD *)uint64_t v27 = v20;
          uint64_t v33 = v39;
          *(_DWORD *)(v39 + 16) = v15;
          *(unsigned char *)(v39 + 20) = v30;
          *(void *)(v39 + 8 * (v31 ^ 1)) = v27 | 1;
          if (v20 == v32)
          {
            unsigned int v34 = v20 + (v20 >> 1);
            *((_DWORD *)a2 + 6) = v34;
            uint64_t v35 = heap_Realloc(*(uint64_t **)(a1 + 8), a2[1], 8 * v34);
            if (!v35) {
              return v16;
            }
            a2[1] = v35;
            unsigned int v20 = *(_DWORD *)v27;
            uint64_t v33 = v39;
          }
          else
          {
            uint64_t v35 = a2[1];
          }
          *(void *)(v35 + 8 * v20) = v27;
          while (1)
          {
            uint64_t v36 = *a2;
            if (*a2) {
              break;
            }
            unsigned int v37 = *(_DWORD *)(v36 + 16);
            if (v37 > v15 || v37 == v15 && *(unsigned __int8 *)(v36 + 20) > v30) {
              break;
            }
            if (v37 >= v9) {
              unsigned int v38 = 0;
            }
            else {
              unsigned int v38 = __s[v37];
            }
            a2 = (uint64_t *)(v36 + ((((*(unsigned __int8 *)(v36 + 20) | v38) + 1) >> 5) & 8));
          }
          *(void *)(v33 + 8 * v31) = v36;
          *a2 = v33;
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
    if (*((_DWORD *)a2 + 4) == 1) {
      goto LABEL_24;
    }
    uint64_t v16 = 2585796618;
    uint64_t v17 = heap_Alloc(*(void *)(a1 + 8), 16);
    if (v17)
    {
      uint64_t v18 = v17;
      long long v19 = (void *)heap_Alloc(*(void *)(a1 + 8), (v9 + 1));
      *(void *)(v18 + 8) = v19;
      if (v19)
      {
        cstdlib_memcpy(v19, __s, (v9 + 1));
        unsigned int v20 = 0;
        *(unsigned char *)(*(void *)(v18 + 8) + v9) = 0;
        *(_DWORD *)uint64_t v18 = 0;
        *a2 = v18 | 1;
        *(void *)a2[1] = v18;
        *((_DWORD *)a2 + 5) = 1;
LABEL_25:
        uint64_t v16 = 0;
        *a4 = v20;
      }
    }
  }
  return v16;
}

uint64_t qrk_id2str(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 20) <= a3) {
    wapiti_fatal(*(void *)(a1 + 32), (uint64_t)"invalid identifier");
  }
  return *(void *)(*(void *)(*(void *)(a2 + 8) + 8 * a3) + 8);
}

uint64_t qrk_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t qrk_lock(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = a2;
  return v2;
}

uint64_t popcount(unsigned int a1)
{
  unsigned int v1 = (((((a1 >> 1) & 0x5555) + (a1 & 0x5555)) >> 2) & 0x33333333)
     + ((((a1 >> 1) & 0x5555) + (a1 & 0x5555)) & 0x33333333);
  return ((((v1 >> 4) & 0xFFFFFF0F) + (v1 & 0xF0F0F0F)) & 0xF) + ((((v1 >> 4) & 0xFFFFFF0F) + (v1 & 0xF0F0F0F)) >> 8);
}

uint64_t qp_new(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = heap_Alloc(*(void *)(a1 + 8), 32);
  if (v4)
  {
    uint64_t v5 = v4;
    *(void *)uint64_t v4 = 0;
    *(_OWORD *)(v4 + 16) = xmmword_2206E3810;
    uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 8, 128);
    *(void *)(v5 + 8) = v6;
    *a2 = v5;
    if (v6) {
      return 0;
    }
    uint64_t v8 = *(void *)(v5 + 8);
    if (v8) {
      heap_Free(*(void **)(a1 + 8), v8);
    }
    heap_Free(*(void **)(a1 + 8), v5);
  }
  *a2 = 0;
  return 2585796618;
}

uint64_t qp_id2str(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 20) <= a3) {
    wapiti_fatal(*(void *)(a1 + 32), (uint64_t)"invalid identifier");
  }
  return *(void *)(*(void *)(*(void *)(a2 + 8) + 8 * a3) + 8);
}

uint64_t qp_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t qp_lock(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = a2;
  return v2;
}

_DWORD *twigoffmax(_DWORD *result, _DWORD *a2, uint64_t a3, int a4)
{
  unsigned int v4 = (((*(_DWORD *)(a3 + 8) & (a4 - 1)) >> 1) & 0x5555) + (*(_DWORD *)(a3 + 8) & (a4 - 1) & 0x5555);
  unsigned int v5 = (((((v4 >> 2) & 0x33333333) + (v4 & 0x33333333)) >> 4) & 0xFFFFFF0F)
     + ((((v4 >> 2) & 0x33333333) + (v4 & 0x33333333)) & 0xF0F0F0F);
  *uint64_t result = (v5 & 0xF) + (v5 >> 8);
  unsigned int v6 = (((((*(_DWORD *)(a3 + 8) >> 1) & 0x5555) + (*(_DWORD *)(a3 + 8) & 0x5555u)) >> 2) & 0x33333333)
     + ((((*(_DWORD *)(a3 + 8) >> 1) & 0x5555) + (*(_DWORD *)(a3 + 8) & 0x5555)) & 0x33333333);
  *a2 = ((((v6 >> 4) & 0xFFFFFF0F) + (v6 & 0xF0F0F0F)) & 0xF) + ((((v6 >> 4) & 0xFFFFFF0F) + (v6 & 0xF0F0F0F)) >> 8);
  return result;
}

void *qp_free(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = result;
    unsigned int v4 = *(uint64_t **)a2;
    if (v4)
    {
      if (!*v4 || (heap_Free((void *)result[1], *v4), (unsigned int v4 = *(uint64_t **)a2) != 0)) {
        heap_Free((void *)v3[1], (uint64_t)v4);
      }
    }
    unsigned int v5 = *(uint64_t **)(a2 + 8);
    if (v5)
    {
      heap_Free((void *)v3[1], *v5);
      heap_Free((void *)v3[1], *(void *)(a2 + 8));
    }
    unsigned int v6 = (void *)v3[1];
    return heap_Free(v6, a2);
  }
  return result;
}

uint64_t qp_str2id(uint64_t a1, uint64_t a2, char *__s, int *a4, unsigned int a5)
{
  unsigned int v5 = a5;
  if (!a5) {
    unsigned int v5 = cstdlib_strlen(__s);
  }
  uint64_t v10 = *(void *)a2;
  if (!*(void *)a2)
  {
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      uint64_t v26 = 2585796618;
      uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), *(unsigned int *)(a2 + 24), 8);
      *(void *)(a2 + 8) = v27;
      if (v27)
      {
        uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 16);
        if (v28)
        {
          uint64_t v29 = v28;
          unsigned __int8 v30 = (void *)heap_Alloc(*(void *)(a1 + 8), v5 + 1);
          *(void *)(v29 + 8) = v30;
          if (v30)
          {
            cstdlib_memcpy(v30, __s, v5 + 1);
            uint64_t v26 = 0;
            *(unsigned char *)(*(void *)(v29 + 8) + v5) = 0;
            *(_DWORD *)uint64_t v29 = 0;
            *(void *)a2 = v29 | 1;
            **(void **)(a2 + 8) = v29;
            *(_DWORD *)(a2 + 20) = 1;
            *a4 = 0;
          }
        }
      }
      return v26;
    }
    goto LABEL_31;
  }
  for (; (v10 & 1) == 0; uint64_t v10 = *(void *)(*(void *)v10 + 8 * v18))
  {
    uint64_t v11 = *(unsigned int *)(v10 + 12);
    if (v11 >= v5)
    {
      int v13 = *(_DWORD *)(v10 + 8);
      int v15 = 1;
    }
    else
    {
      unsigned int v12 = __s[v11];
      int v13 = *(_DWORD *)(v10 + 8);
      if ((v13 & 0x10000) != 0) {
        int v14 = 2;
      }
      else {
        int v14 = 1;
      }
      int v15 = 1 << ((((v14 + 254) ^ 0xF) & v12) >> (8 - 4 * v14));
    }
    if (((unsigned __int16)v15 & (unsigned __int16)v13) != 0)
    {
      unsigned int v16 = (((v13 & (v15 - 1)) >> 1) & 0x5555) + (v13 & (v15 - 1) & 0x5555);
      unsigned int v17 = (((((v16 >> 2) & 0x33333333) + (v16 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v16 >> 2) & 0x33333333) + (v16 & 0x33333333)) & 0xF0F0F0F);
      unsigned int v18 = (v17 & 0xF) + (v17 >> 8);
    }
    else
    {
      unsigned int v18 = 0;
    }
  }
  unint64_t v19 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (!v5)
  {
LABEL_26:
    if (!*(unsigned char *)(*(void *)(v19 + 8) + v5))
    {
      uint64_t v26 = 0;
      int v31 = *(_DWORD *)v19;
      goto LABEL_39;
    }
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      BOOL v25 = 0;
      LODWORD(v21) = v5;
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v26 = 0;
    int v31 = -1;
LABEL_39:
    *a4 = v31;
    return v26;
  }
  unsigned int v20 = *(unsigned char **)(v19 + 8);
  if (*__s == *v20)
  {
    unint64_t v21 = 0;
    long long v22 = v20 + 1;
    do
    {
      if (v5 - 1 == v21) {
        goto LABEL_26;
      }
      int v23 = __s[v21 + 1];
      int v24 = v22[v21++];
    }
    while (v23 == v24);
    BOOL v25 = v21 < v5;
  }
  else
  {
    LODWORD(v21) = 0;
    BOOL v25 = 1;
  }
  if (*(_DWORD *)(a2 + 16) == 1) {
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v26 = 2585796618;
  uint64_t v32 = heap_Alloc(*(void *)(a1 + 8), 16);
  if (!v32) {
    return v26;
  }
  uint64_t v33 = v32;
  uint64_t v84 = (void *)heap_Calloc(*(void **)(a1 + 8), 3, 8);
  if (!v84) {
    return v26;
  }
  unsigned int v34 = (void *)heap_Alloc(*(void *)(a1 + 8), v5 + 1);
  *(void *)(v33 + 8) = v34;
  if (!v34) {
    goto LABEL_41;
  }
  cstdlib_memcpy(v34, __s, v5 + 1);
  *(unsigned char *)(*(void *)(v33 + 8) + v5) = 0;
  int v35 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = v35 + 1;
  *(_DWORD *)uint64_t v33 = v35;
  *a4 = v35;
  unsigned int v36 = *(_DWORD *)v33;
  if (*(_DWORD *)v33 == *(_DWORD *)(a2 + 24))
  {
    unsigned int v37 = v36 + (v36 >> 1);
    *(_DWORD *)(a2 + 24) = v37;
    uint64_t v38 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 8), 8 * v37);
    if (v38)
    {
      *(void *)(a2 + 8) = v38;
      unsigned int v36 = *(_DWORD *)v33;
      goto LABEL_44;
    }
LABEL_41:
    uint64_t v26 = 0;
    goto LABEL_42;
  }
  uint64_t v38 = *(void *)(a2 + 8);
LABEL_44:
  *(void *)(v38 + 8 * v36) = v33;
  if (v25)
  {
    size_t v41 = cstdlib_strlen(*(const char **)(v19 + 8));
    unsigned int v42 = __s[v21];
    if (v41 <= v21)
    {
      unsigned int v44 = 1;
      int v83 = 1 << (__s[v21] >> 4);
      int v43 = *(unsigned __int8 *)(*(void *)(v19 + 8) + v21);
    }
    else
    {
      int v43 = *(unsigned __int8 *)(*(void *)(v19 + 8) + v21);
      if ((v43 ^ v42) >= 0x10) {
        unsigned int v44 = 1;
      }
      else {
        unsigned int v44 = 2;
      }
      int v83 = 1 << ((((v44 + 254) ^ 0xF) & v42) >> (8 - 4 * v44));
    }
  }
  else
  {
    int v43 = *(unsigned __int8 *)(*(void *)(v19 + 8) + v21);
    int v83 = 1;
    unsigned int v44 = 1;
  }
  uint64_t v45 = v33 | 1;
  uint64_t v40 = (uint64_t)v84;
  void *v84 = v33 | 1;
  uint64_t v46 = *(void *)a2;
  v84[2] = 0;
  unsigned int v47 = 0;
  if (v46)
  {
LABEL_72:
    int v55 = v43;
    uint64_t v56 = 0;
    v84[1] = v46;
    BOOL v57 = 1;
    do
    {
      uint64_t v58 = *(void **)(a1 + 8);
      if (v57)
      {
        uint64_t v56 = heap_Calloc(v58, 1, 16);
        if (!v56) {
          return v26;
        }
      }
      else
      {
        heap_Free(v58, v56);
        uint64_t v56 = 0;
      }
      BOOL v57 = v56 == 0;
    }
    while (!v56 || (v56 & 1) != 0);
    uint64_t v82 = v84[2];
    int v59 = 1 << ((((v44 + 254) ^ 0xF) & v55) >> (8 - 4 * v44));
    if (!v55) {
      int v59 = 1;
    }
    int v60 = ((v44 << 16) - 0x10000) | v83;
    *(_DWORD *)(v56 + 8) = v59 | v60;
    *(_DWORD *)(v56 + 12) = v21;
    int v61 = v83 - 1;
    unsigned int v62 = ((((v59 | v60) & v61) >> 1) & 0x5555) + ((v59 | v60) & v61 & 0x5555);
    unsigned int v63 = (((((v62 >> 2) & 0x33333333) + (v62 & 0x33333333)) >> 4) & 0xFFFFFF0F)
        + ((((v62 >> 2) & 0x33333333) + (v62 & 0x33333333)) & 0xF0F0F0F);
    unsigned int v64 = (v63 & 0xF) + (v63 >> 8) + 1;
    int v65 = v59 - 1;
    unsigned int v66 = (((v65 & v60) >> 1) & 0x5555) + (v65 & v60 & 0x5555);
    unsigned int v67 = (((((v66 >> 2) & 0x33333333) + (v66 & 0x33333333)) >> 4) & 0xFFFFFF0F)
        + ((((v66 >> 2) & 0x33333333) + (v66 & 0x33333333)) & 0xF0F0F0F);
    int v68 = (v67 & 0xF) + (v67 >> 8);
    if (v64 <= v68 + 1) {
      unsigned int v69 = v68 + 1;
    }
    else {
      unsigned int v69 = v64;
    }
    if (v69 <= 2) {
      uint64_t v70 = 2;
    }
    else {
      uint64_t v70 = v69;
    }
    uint64_t v71 = heap_Calloc(*(void **)(a1 + 8), v70, 8);
    *(void *)uint64_t v56 = v71;
    if (v71)
    {
      uint64_t v26 = 0;
      int v72 = *(_DWORD *)(v56 + 8);
      unsigned int v73 = (((v72 & v61) >> 1) & 0x5555) + (v72 & v61 & 0x5555);
      unsigned int v74 = (((((v73 >> 2) & 0x33333333) + (v73 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v73 >> 2) & 0x33333333) + (v73 & 0x33333333)) & 0xF0F0F0F);
      *(void *)(v71 + 8 * ((v74 & 0xF) + (v74 >> 8))) = *v84;
      unsigned int v75 = (((v72 & v65) >> 1) & 0x5555) + (v72 & v65 & 0x5555);
      unsigned int v76 = (((((v75 >> 2) & 0x33333333) + (v75 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v75 >> 2) & 0x33333333) + (v75 & 0x33333333)) & 0xF0F0F0F);
      *(void *)(*(void *)v56 + 8 * ((v76 & 0xF) + (v76 >> 8))) = v84[1];
      uint64_t v77 = (uint64_t *)(v82 + 8 * v47);
      if (!v82) {
        uint64_t v77 = (uint64_t *)a2;
      }
      *uint64_t v77 = v56;
    }
    goto LABEL_91;
  }
  while (1)
  {
    uint64_t v48 = *(unsigned int *)(v46 + 12);
    if (v48 >= v5)
    {
      int v50 = 1;
    }
    else
    {
      if (*(unsigned char *)(v46 + 10)) {
        int v49 = 2;
      }
      else {
        int v49 = 1;
      }
      int v50 = 1 << ((((v49 + 254) ^ 0xF) & __s[v48]) >> (8 - 4 * v49));
    }
    if (v48 != v21)
    {
      if (v48 > v21) {
        goto LABEL_72;
      }
      int v51 = *(_DWORD *)(v46 + 8);
      goto LABEL_68;
    }
    int v51 = *(_DWORD *)(v46 + 8);
    unsigned int v52 = (v51 & 0x10000) != 0 ? 2 : 1;
    if (v44 == v52) {
      break;
    }
    if (v44 < v52) {
      goto LABEL_72;
    }
LABEL_68:
    v84[2] = *(void *)v46;
    if (((unsigned __int16)v50 & (unsigned __int16)v51) != 0)
    {
      unsigned int v53 = (((v51 & (v50 - 1)) >> 1) & 0x5555) + (v51 & (v50 - 1) & 0x5555);
      unsigned int v54 = (((((v53 >> 2) & 0x33333333) + (v53 & 0x33333333)) >> 4) & 0xFFFFFF0F)
          + ((((v53 >> 2) & 0x33333333) + (v53 & 0x33333333)) & 0xF0F0F0F);
      unsigned int v47 = (v54 & 0xF) + (v54 >> 8);
    }
    else
    {
      unsigned int v47 = 0;
    }
    uint64_t v46 = *(void *)(*(void *)v46 + 8 * v47);
    if (v46) {
      goto LABEL_72;
    }
  }
  uint64_t v85 = 0;
  uint64_t __src = v45;
  twigoffmax((_DWORD *)&v85 + 1, &v85, v46, v83);
  int v78 = v85;
  uint64_t v79 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)v46, 8 * (v85 + 1));
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = v79 + 8 * HIDWORD(v85);
    cstdlib_memmove((void *)(v81 + 8), (const void *)v81, 8 * (v78 - HIDWORD(v85)));
    cstdlib_memmove((void *)v81, &__src, 8uLL);
    uint64_t v26 = 0;
    *(void *)uint64_t v46 = v80;
    *(_DWORD *)(v46 + 8) |= v83;
  }
LABEL_42:
  uint64_t v40 = (uint64_t)v84;
LABEL_91:
  heap_Free(*(void **)(a1 + 8), v40);
  return v26;
}

uint64_t rdr_new(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 64);
  if (v6)
  {
    uint64_t v7 = v6;
    *(void *)uint64_t v6 = a1;
    *(_DWORD *)(v6 + 8) = a2;
    *(void *)(v6 + 32) = 0;
    uint64_t v8 = (uint64_t *)(v6 + 40);
    *(void *)(v6 + 20) = 0;
    *(void *)(v6 + 12) = 0;
    uint64_t v9 = qrk_new(a1, (uint64_t *)(v6 + 40));
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = qrk_new(a1, (uint64_t *)(v7 + 48));
      if ((v10 & 0x80000000) == 0)
      {
        *(void *)(v7 + 56) = 0;
LABEL_16:
        *a3 = v7;
        return v10;
      }
    }
    uint64_t v11 = *v8;
    if (*v8)
    {
      if (*(void *)(v11 + 8))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v11 + 8));
        uint64_t v11 = *v8;
      }
      heap_Free(*(void **)(a1 + 8), v11);
    }
    uint64_t v12 = *(void *)(v7 + 48);
    if (v12)
    {
      if (*(void *)(v12 + 8))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v12 + 8));
        uint64_t v12 = *(void *)(v7 + 48);
      }
      heap_Free(*(void **)(a1 + 8), v12);
    }
    heap_Free(*(void **)(a1 + 8), v7);
    uint64_t v7 = 0;
    goto LABEL_16;
  }
  return 2585796618;
}

uint64_t rdr_new_qp(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 64);
  if (v6)
  {
    uint64_t v7 = v6;
    *(void *)uint64_t v6 = a1;
    *(_DWORD *)(v6 + 8) = a2;
    *(void *)(v6 + 32) = 0;
    uint64_t v8 = (uint64_t *)(v6 + 40);
    *(void *)(v6 + 20) = 0;
    *(void *)(v6 + 12) = 0;
    uint64_t v9 = qp_new(a1, (uint64_t *)(v6 + 40));
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v10 = qp_new(a1, (uint64_t *)(v7 + 48));
      if ((v10 & 0x80000000) == 0)
      {
        *(void *)(v7 + 56) = 0;
LABEL_16:
        *a3 = v7;
        return v10;
      }
    }
    uint64_t v11 = *v8;
    if (*v8)
    {
      if (*(void *)(v11 + 8))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v11 + 8));
        uint64_t v11 = *v8;
      }
      heap_Free(*(void **)(a1 + 8), v11);
    }
    uint64_t v12 = *(void *)(v7 + 48);
    if (v12)
    {
      if (*(void *)(v12 + 8))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v12 + 8));
        uint64_t v12 = *(void *)(v7 + 48);
      }
      heap_Free(*(void **)(a1 + 8), v12);
    }
    heap_Free(*(void **)(a1 + 8), v7);
    uint64_t v7 = 0;
    goto LABEL_16;
  }
  return 2585796618;
}

void *rdr_free(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 24))
    {
      unint64_t v6 = 0;
      do
        pat_free((void *)v4, *(void *)(*(void *)(a1 + 32) + 8 * v6++));
      while (v6 < *(unsigned int *)(a1 + 24));
      uint64_t v5 = *(void *)(a1 + 32);
    }
    heap_Free(*(void **)(v4 + 8), v5);
  }
  qrk_free((void *)v4, *(void *)(a1 + 40), a2);
  qrk_free((void *)v4, *(void *)(a1 + 48), a2);
  wapiti_rules_unload(v4, *(void *)(a1 + 56));
  uint64_t v7 = *(void **)(v4 + 8);

  return heap_Free(v7, a1);
}

void *rdr_free_qp(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 24))
    {
      unint64_t v4 = 0;
      do
        pat_free((void *)v2, *(void *)(*(void *)(a1 + 32) + 8 * v4++));
      while (v4 < *(unsigned int *)(a1 + 24));
      uint64_t v3 = *(void *)(a1 + 32);
    }
    heap_Free(*(void **)(v2 + 8), v3);
  }
  qp_free((void *)v2, *(void *)(a1 + 40));
  qp_free((void *)v2, *(void *)(a1 + 48));
  wapiti_rules_unload(v2, *(void *)(a1 + 56));
  uint64_t v5 = *(void **)(v2 + 8);

  return heap_Free(v5, a1);
}

void *rdr_freeraw(uint64_t a1, unsigned int *a2)
{
  if (*a2)
  {
    unint64_t v4 = 0;
    do
      heap_Free(*(void **)(a1 + 8), *(void *)(*((void *)a2 + 1) + 8 * v4++));
    while (v4 < *a2);
  }
  heap_Free(*(void **)(a1 + 8), *((void *)a2 + 1));
  uint64_t v5 = *(void **)(a1 + 8);

  return heap_Free(v5, (uint64_t)a2);
}

void *rdr_freeseq(uint64_t a1, uint64_t a2)
{
  heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 8));
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    heap_Free(*(void **)(a1 + 8), v4);
  }
  uint64_t v5 = *(void **)(a1 + 8);

  return heap_Free(v5, a2);
}

void *rdr_freedat(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v4 = 0;
    do
      rdr_freeseq(a1, *(void *)(*(void *)(a2 + 16) + 8 * v4++));
    while (v4 < *(unsigned int *)(a2 + 8));
  }
  heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 16));
  uint64_t v5 = *(void **)(a1 + 8);

  return heap_Free(v5, a2);
}

uint64_t rdr_readraw(uint64_t *a1, void *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = 2585796618;
  if (!a4) {
    return 2585796615;
  }
  uint64_t v7 = *a1;
  *a4 = 0;
  if (*a2 && *(unsigned char *)*a2)
  {
    uint64_t v9 = heap_Alloc(*(void *)(v7 + 8), 16);
    if (v9)
    {
      uint64_t v10 = heap_Calloc(*(void **)(v7 + 8), a3, 8);
      *(void *)(v9 + 8) = v10;
      if (!v10) {
        goto LABEL_31;
      }
      if (!a3)
      {
        uint64_t v17 = v10;
        uint64_t v4 = 0;
LABEL_30:
        heap_Free(*(void **)(v7 + 8), v17);
        goto LABEL_31;
      }
      uint64_t v11 = 0;
      while (2)
      {
        uint64_t v12 = (const char *)a2[v11];
        if (v12)
        {
          uint64_t v13 = (int)cstdlib_strlen((const char *)a2[v11]) - 1;
          do
          {
            if (v13 == -1) {
              goto LABEL_14;
            }
          }
          while (cstdlib_isspace(v12[v13--]));
          *(void *)(*(void *)(v9 + 8) + 8 * v11) = heap_Calloc(*(void **)(v7 + 8), 1, (v13 + 3));
          int v15 = *(char **)(*(void *)(v9 + 8) + 8 * v11);
          if (v15)
          {
            cstdlib_strncpy(v15, v12, (v13 + 2));
LABEL_14:
            if (++v11 != a3) {
              continue;
            }
            uint64_t v11 = a3;
            break;
          }
          if (v11) {
            goto LABEL_32;
          }
LABEL_24:
          if (*(void *)(v9 + 8))
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = *(void *)(*(void *)(v9 + 8) + 8 * v18);
              if (v19) {
                heap_Free(*(void **)(v7 + 8), v19);
              }
              ++v18;
            }
            while (a3 != v18);
            uint64_t v17 = *(void *)(v9 + 8);
            goto LABEL_30;
          }
LABEL_31:
          heap_Free(*(void **)(v7 + 8), v9);
          uint64_t v9 = 0;
          goto LABEL_32;
        }
        break;
      }
      if (!v11)
      {
        uint64_t v4 = 0;
        goto LABEL_24;
      }
      uint64_t v16 = heap_Realloc(*(uint64_t **)(v7 + 8), *(void *)(v9 + 8), 8 * v11);
      *(void *)(v9 + 8) = v16;
      if (!v16) {
        goto LABEL_31;
      }
      uint64_t v4 = 0;
      *(_DWORD *)uint64_t v9 = v11;
    }
LABEL_32:
    *a4 = v9;
    return v4;
  }
  return 0;
}

uint64_t rdr_raw2seq(uint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  uint64_t v4 = 2585796618;
  if (a4)
  {
    uint64_t v5 = a4;
    uint64_t v9 = *a2;
    uint64_t v10 = *(void *)a1;
    *a4 = 0;
    uint64_t v11 = heap_Alloc(*(void *)(v10 + 8), 8 * v9 + 32);
    if (!v11)
    {
      uint64_t v37 = 0;
LABEL_126:
      *uint64_t v5 = v37;
      return v4;
    }
    uint64_t v12 = (unsigned int *)v11;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0;
    uint64_t v13 = (uint64_t *)(v11 + 8);
    uint64_t v14 = heap_Calloc(*(void **)(v10 + 8), v9, 4);
    v13[1] = v14;
    if (!v14)
    {
      uint64_t v37 = 0;
LABEL_123:
      if (*v13) {
        heap_Free(*(void **)(v10 + 8), *v13);
      }
      heap_Free(*(void **)(v10 + 8), (uint64_t)v12);
      goto LABEL_126;
    }
    *uint64_t v13 = 0;
    uint64_t v93 = v13;
    if (a3 == 1)
    {
      uint64_t v15 = heap_Calloc(*(void **)(v10 + 8), v9, 8);
      *uint64_t v13 = v15;
      if (!v15)
      {
        uint64_t v37 = 0;
        goto LABEL_114;
      }
    }
    uint64_t v90 = v5;
    if (v9)
    {
      uint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = *(void *)(*((void *)a2 + 1) + 8 * v16);
        if (!v17) {
          break;
        }
        uint64_t v18 = (const char *)(v17 - 1);
        do
          unsigned __int8 v19 = *++v18;
        while (cstdlib_isspace(v19));
        size_t v20 = cstdlib_strlen(v18) + 1;
        unint64_t v21 = (char *)heap_Alloc(*(void *)(v10 + 8), v20);
        if (!v21) {
          break;
        }
        long long v22 = v21;
        cstdlib_memcpy(v21, v18, v20);
        uint64_t v23 = *(void *)(v10 + 8);
        unsigned int v24 = cstdlib_strlen(v22);
        uint64_t v25 = heap_Alloc(v23, 8 * ((v24 >> 1) + 1));
        if (!v25) {
          break;
        }
        uint64_t v26 = (void *)v25;
        if (*v22)
        {
          unsigned int v27 = 0;
LABEL_15:
          v26[v27++] = v22;
          unsigned __int8 v28 = *v22;
          if (*v22)
          {
            while (!cstdlib_isspace(v28))
            {
              int v29 = *(unsigned __int8 *)++v22;
              unsigned __int8 v28 = v29;
              if (!v29) {
                goto LABEL_26;
              }
            }
            if (*v22)
            {
              *long long v22 = 0;
              while (1)
              {
                int v31 = *(unsigned __int8 *)++v22;
                unsigned __int8 v30 = v31;
                if (!v31) {
                  break;
                }
                if (!cstdlib_isspace(v30))
                {
                  if (*v22) {
                    goto LABEL_15;
                  }
                  break;
                }
              }
            }
          }
        }
        else
        {
          unsigned int v27 = 0;
        }
LABEL_26:
        uint64_t v32 = (void *)heap_Alloc(*(void *)(v10 + 8), 8 * v27);
        *(void *)&v12[2 * v16 + 6] = v32;
        if (!v32) {
          break;
        }
        *(_DWORD *)(*((void *)v12 + 2) + 4 * v16) = v27;
        cstdlib_memcpy(v32, v26, 8 * v27);
        heap_Free(*(void **)(v10 + 8), (uint64_t)v26);
        if (++v16 == v9) {
          goto LABEL_28;
        }
      }
LABEL_111:
      uint64_t v37 = 0;
      goto LABEL_112;
    }
LABEL_28:
    *uint64_t v12 = v9;
    uint64_t v33 = *(void *)(a1 + 56);
    if (v33 && (uint64_t v34 = wapiti_rules_apply(v10, v33, v12), (v34 & 0x80000000) != 0))
    {
      uint64_t v37 = 0;
LABEL_66:
      uint64_t v4 = v34;
    }
    else
    {
      uint64_t v35 = *(void *)a1;
      uint64_t v36 = *v12;
      if (*(_DWORD *)(a1 + 24))
      {
        uint64_t v37 = heap_Alloc(*(void *)(v35 + 8), 32 * v36 + 56);
        if (!v37) {
          goto LABEL_112;
        }
        uint64_t v38 = heap_Alloc(*(void *)(v35 + 8), 4 * v36 * (unint64_t)(*(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 12)));
        *(void *)(v37 + 8) = v38;
        if (!v38)
        {
          heap_Free(*(void **)(v35 + 8), v37);
          goto LABEL_111;
        }
        *(_DWORD *)uint64_t v37 = v36;
        *(void *)(v37 + 16) = 0;
        if (!v36)
        {
          uint64_t v4 = 0;
          goto LABEL_112;
        }
        uint64_t v39 = 0;
        uint64_t v40 = 4 * *(unsigned int *)(a1 + 12);
        uint64_t v41 = v40 + 4 * *(unsigned int *)(a1 + 16);
        do
        {
          uint64_t v42 = v37 + v39;
          *(_DWORD *)(v42 + 24) = -1;
          *(void *)(v42 + 40) = v38;
          *(void *)(v42 + 48) = v38 + v40;
          v39 += 32;
          v38 += v41;
        }
        while (32 * v36 != v39);
        uint64_t v43 = 0;
        uint64_t v4 = 0;
        LODWORD(v44) = *(_DWORD *)(a1 + 24);
        uint64_t v87 = v36;
        while (1)
        {
          uint64_t v45 = v37 + 32 * v43;
          *(_DWORD *)(v45 + 32) = 0;
          uint64_t v46 = (_DWORD *)(v45 + 32);
          *(_DWORD *)(v45 + 28) = 0;
          unsigned __int16 v91 = (_DWORD *)(v45 + 28);
          if (v44) {
            break;
          }
LABEL_53:
          if (++v43 == v36)
          {
            if (*v93)
            {
              uint64_t v56 = 0;
              do
              {
                BOOL v57 = *(char **)(*v93 + v56);
                LODWORD(__s) = 0;
                uint64_t v4 = qrk_str2id(v35, *(uint64_t **)(a1 + 40), v57, (unsigned int *)&__s, 0);
                if ((v4 & 0x80000000) != 0) {
                  break;
                }
                *(_DWORD *)(v37 + 4 * v56 + 24) = __s;
                v56 += 8;
              }
              while (8 * v36 != v56);
            }
            goto LABEL_112;
          }
        }
        unint64_t v47 = 0;
        uint64_t v85 = (uint64_t *)(v45 + 40);
        uint64_t v86 = (uint64_t *)(v45 + 48);
        while (1)
        {
          char __s = 0;
          unsigned int v94 = 0;
          uint64_t v34 = pat_exec(v35, *(void *)(*(void *)(a1 + 32) + 8 * v47), (uint64_t)v12, v43, (uint64_t *)&__s);
          if ((v34 & 0x80000000) != 0) {
            goto LABEL_66;
          }
          uint64_t v4 = rdr_mapobs(a1, __s, &v94);
          if ((v4 & 0x80000000) != 0) {
            goto LABEL_112;
          }
          unsigned int v48 = v94;
          if (v94 != -1) {
            break;
          }
          unsigned int v53 = *(void **)(v35 + 8);
          int v49 = __s;
LABEL_51:
          heap_Free(v53, (uint64_t)v49);
          ++v47;
          unint64_t v44 = *(unsigned int *)(a1 + 24);
          if (v47 >= v44)
          {
            uint64_t v36 = v87;
            goto LABEL_53;
          }
        }
        int v49 = __s;
        int v50 = *__s;
        switch(v50)
        {
          case '*':
            uint64_t v54 = *v85;
            uint64_t v55 = *v91;
            *unsigned __int16 v91 = v55 + 1;
            *(_DWORD *)(v54 + 4 * v55) = v48;
            unsigned int v48 = v94;
            break;
          case 'b':
            break;
          case 'u':
            uint64_t v51 = *v85;
            unsigned int v52 = (*v91)++;
LABEL_49:
            *(_DWORD *)(v51 + 4 * v52) = v48;
            goto LABEL_50;
          default:
LABEL_50:
            unsigned int v53 = *(void **)(v35 + 8);
            goto LABEL_51;
        }
        uint64_t v51 = *v86;
        unsigned int v52 = (*v46)++;
        goto LABEL_49;
      }
      uint64_t v92 = a1;
      if (*(_DWORD *)(a1 + 8))
      {
        uint64_t v58 = *(void *)a1;
        unsigned int v59 = **((_DWORD **)v12 + 2);
      }
      else
      {
        uint64_t v58 = *(void *)a1;
        if (v36)
        {
          uint64_t v60 = 0;
          unsigned int v59 = 0;
          uint64_t v61 = *((void *)v12 + 2);
          uint64_t v88 = *v12;
          do
          {
            if (*(_DWORD *)(v61 + 4 * v60))
            {
              unint64_t v62 = 0;
              do
              {
                int v63 = **(char **)(*(void *)&v12[2 * v60 + 6] + 8 * v62);
                if (v63 == 42)
                {
                  v59 += 2;
                }
                else if (v63 == 98 || v63 == 117)
                {
                  ++v59;
                }
                else
                {
                  wapiti_fatal(*(void *)(v35 + 32), (uint64_t)"invalid feature: %s");
                  uint64_t v61 = *((void *)v12 + 2);
                }
                ++v62;
              }
              while (v62 < *(unsigned int *)(v61 + 4 * v60));
            }
            ++v60;
            uint64_t v36 = v88;
          }
          while (v60 != v88);
        }
        else
        {
          unsigned int v59 = 0;
        }
      }
      uint64_t v64 = v58;
      uint64_t v37 = heap_Alloc(*(void *)(v58 + 8), 32 * v36 + 56);
      if (v37)
      {
        uint64_t v65 = heap_Alloc(*(void *)(v58 + 8), 4 * v59);
        *(void *)(v37 + 8) = v65;
        if (!v65) {
          goto LABEL_111;
        }
        *(_DWORD *)uint64_t v37 = v36;
        *(void *)(v37 + 16) = 0;
        uint64_t v5 = v90;
        if (v36)
        {
          unsigned int v66 = (_DWORD *)v65;
          uint64_t v89 = v36;
          uint64_t v67 = 0;
          uint64_t v4 = 0;
          uint64_t v68 = *((void *)v12 + 2);
          uint64_t v84 = v64;
          do
          {
            uint64_t v69 = v37 + 32 * v67;
            *(void *)(v69 + 24) = 0xFFFFFFFFLL;
            *(void *)(v69 + 40) = v66;
            if (*(_DWORD *)(v68 + 4 * v67))
            {
              uint64_t v70 = v66;
              unint64_t v71 = 0;
              do
              {
                LODWORD(__s) = 0;
                int v72 = *(char **)(*(void *)&v12[2 * v67 + 6] + 8 * v71);
                if (*(_DWORD *)(v92 + 8) || *v72 != 98)
                {
                  uint64_t v4 = rdr_mapobs(v92, v72, (unsigned int *)&__s);
                  if ((v4 & 0x80000000) != 0) {
                    goto LABEL_111;
                  }
                  if (__s != -1)
                  {
                    *v70++ = __s;
                    ++*(_DWORD *)(v37 + 32 * v67 + 28);
                  }
                }
                ++v71;
                uint64_t v68 = *((void *)v12 + 2);
              }
              while (v71 < *(unsigned int *)(v68 + 4 * v67));
              uint64_t v5 = v90;
              uint64_t v64 = v84;
              unsigned int v66 = v70;
              uint64_t v69 = v37 + 32 * v67;
            }
            *(_DWORD *)(v69 + 32) = 0;
            unsigned int v73 = (_DWORD *)(v69 + 32);
            if (!*(_DWORD *)(v92 + 8))
            {
              *(void *)(v37 + 32 * v67 + 48) = v66;
              if (*(_DWORD *)(v68 + 4 * v67))
              {
                unint64_t v74 = 0;
                do
                {
                  LODWORD(__s) = 0;
                  unsigned int v75 = *(char **)(*(void *)&v12[2 * v67 + 6] + 8 * v74);
                  if (*v75 != 117)
                  {
                    uint64_t v4 = rdr_mapobs(v92, v75, (unsigned int *)&__s);
                    if ((v4 & 0x80000000) != 0) {
                      goto LABEL_111;
                    }
                    if (__s != -1)
                    {
                      *v66++ = __s;
                      ++*v73;
                    }
                  }
                  ++v74;
                  uint64_t v68 = *((void *)v12 + 2);
                }
                while (v74 < *(unsigned int *)(v68 + 4 * v67));
                uint64_t v5 = v90;
                uint64_t v64 = v84;
              }
            }
            ++v67;
          }
          while (v67 != v89);
          if (*v93)
          {
            uint64_t v76 = 0;
            while (1)
            {
              uint64_t v77 = *(char **)(*v93 + v76);
              LODWORD(__s) = 0;
              uint64_t v4 = qrk_str2id(v64, *(uint64_t **)(v92 + 40), v77, (unsigned int *)&__s, 0);
              if ((v4 & 0x80000000) != 0) {
                goto LABEL_111;
              }
              *(_DWORD *)(v37 + 4 * v76 + 24) = __s;
              v76 += 8;
              if (8 * v89 == v76) {
                goto LABEL_112;
              }
            }
          }
        }
        else
        {
          uint64_t v4 = 0;
        }
        goto LABEL_113;
      }
    }
LABEL_112:
    uint64_t v5 = v90;
LABEL_113:
    uint64_t v13 = v93;
LABEL_114:
    uint64_t v78 = *((void *)v12 + 2);
    if (v78)
    {
      if (v9)
      {
        uint64_t v79 = v5;
        uint64_t v80 = 0;
        uint64_t v81 = v12 + 6;
        do
        {
          if (*(_DWORD *)(*((void *)v12 + 2) + 4 * v80))
          {
            uint64_t v82 = *(uint64_t **)&v81[2 * v80];
            if (v82)
            {
              heap_Free(*(void **)(v10 + 8), *v82);
              heap_Free(*(void **)(v10 + 8), *(void *)&v81[2 * v80]);
            }
          }
          ++v80;
        }
        while (v9 != v80);
        uint64_t v78 = *((void *)v12 + 2);
        uint64_t v5 = v79;
      }
      heap_Free(*(void **)(v10 + 8), v78);
      uint64_t v13 = v93;
    }
    goto LABEL_123;
  }
  return 2585796615;
}

uint64_t rdr_readraw_qp(uint64_t *a1, void *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = 2585796618;
  if (!a4) {
    return 2585796615;
  }
  uint64_t v7 = *a1;
  *a4 = 0;
  if (*a2 && *(unsigned char *)*a2)
  {
    uint64_t v9 = heap_Alloc(*(void *)(v7 + 8), 16);
    if (v9)
    {
      uint64_t v10 = heap_Calloc(*(void **)(v7 + 8), a3, 8);
      *(void *)(v9 + 8) = v10;
      if (!v10) {
        goto LABEL_31;
      }
      if (!a3)
      {
        uint64_t v17 = v10;
        uint64_t v4 = 0;
LABEL_30:
        heap_Free(*(void **)(v7 + 8), v17);
        goto LABEL_31;
      }
      uint64_t v11 = 0;
      while (2)
      {
        uint64_t v12 = (const char *)a2[v11];
        if (v12)
        {
          uint64_t v13 = (int)cstdlib_strlen((const char *)a2[v11]) - 1;
          do
          {
            if (v13 == -1) {
              goto LABEL_14;
            }
          }
          while (cstdlib_isspace(v12[v13--]));
          *(void *)(*(void *)(v9 + 8) + 8 * v11) = heap_Calloc(*(void **)(v7 + 8), 1, (v13 + 3));
          uint64_t v15 = *(char **)(*(void *)(v9 + 8) + 8 * v11);
          if (v15)
          {
            cstdlib_strncpy(v15, v12, (v13 + 2));
LABEL_14:
            if (++v11 != a3) {
              continue;
            }
            uint64_t v11 = a3;
            break;
          }
          if (v11) {
            goto LABEL_32;
          }
LABEL_24:
          if (*(void *)(v9 + 8))
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = *(void *)(*(void *)(v9 + 8) + 8 * v18);
              if (v19) {
                heap_Free(*(void **)(v7 + 8), v19);
              }
              ++v18;
            }
            while (a3 != v18);
            uint64_t v17 = *(void *)(v9 + 8);
            goto LABEL_30;
          }
LABEL_31:
          heap_Free(*(void **)(v7 + 8), v9);
          uint64_t v9 = 0;
          goto LABEL_32;
        }
        break;
      }
      if (!v11)
      {
        uint64_t v4 = 0;
        goto LABEL_24;
      }
      uint64_t v16 = heap_Realloc(*(uint64_t **)(v7 + 8), *(void *)(v9 + 8), 8 * v11);
      *(void *)(v9 + 8) = v16;
      if (!v16) {
        goto LABEL_31;
      }
      uint64_t v4 = 0;
      *(_DWORD *)uint64_t v9 = v11;
    }
LABEL_32:
    *a4 = v9;
    return v4;
  }
  return 0;
}

uint64_t rdr_raw2seq_qp(uint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  uint64_t v4 = 2585796618;
  if (!a4) {
    return 2585796615;
  }
  uint64_t v5 = a4;
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)a1;
  *a4 = 0;
  uint64_t v11 = heap_Alloc(*(void *)(v10 + 8), 8 * v9 + 32);
  if (!v11)
  {
    uint64_t v39 = 0;
LABEL_94:
    *uint64_t v5 = v39;
    return v4;
  }
  uint64_t v12 = (unsigned int *)v11;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  uint64_t v13 = (uint64_t *)(v11 + 8);
  uint64_t v14 = heap_Calloc(*(void **)(v10 + 8), v9, 4);
  v13[1] = v14;
  if (!v14)
  {
    uint64_t v39 = 0;
LABEL_91:
    if (*v13) {
      heap_Free(*(void **)(v10 + 8), *v13);
    }
    heap_Free(*(void **)(v10 + 8), (uint64_t)v12);
    goto LABEL_94;
  }
  *uint64_t v13 = 0;
  if (a3 == 1)
  {
    uint64_t v15 = heap_Calloc(*(void **)(v10 + 8), v9, 8);
    *uint64_t v13 = v15;
    if (!v15)
    {
      uint64_t v39 = 0;
      goto LABEL_82;
    }
  }
  unint64_t v95 = v13;
  uint64_t v97 = v9;
  if (v9)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(void *)(*((void *)a2 + 1) + 8 * v16);
      if (!v17) {
        break;
      }
      uint64_t v18 = (const char *)(v17 - 1);
      do
        unsigned __int8 v19 = *++v18;
      while (cstdlib_isspace(v19));
      size_t v20 = cstdlib_strlen(v18) + 1;
      unint64_t v21 = (char *)heap_Alloc(*(void *)(v10 + 8), v20);
      if (!v21) {
        break;
      }
      long long v22 = v21;
      cstdlib_memcpy(v21, v18, v20);
      uint64_t v23 = *(void *)(v10 + 8);
      unsigned int v24 = cstdlib_strlen(v22);
      uint64_t v25 = heap_Alloc(v23, 8 * ((v24 >> 1) + 1));
      if (!v25) {
        break;
      }
      uint64_t v26 = (void *)v25;
      if (*v22)
      {
        unsigned int v27 = 0;
LABEL_15:
        v26[v27++] = v22;
        unsigned __int8 v28 = *v22;
        if (*v22)
        {
          while (!cstdlib_isspace(v28))
          {
            int v29 = *(unsigned __int8 *)++v22;
            unsigned __int8 v28 = v29;
            if (!v29) {
              goto LABEL_26;
            }
          }
          if (*v22)
          {
            *long long v22 = 0;
            while (1)
            {
              int v31 = *(unsigned __int8 *)++v22;
              unsigned __int8 v30 = v31;
              if (!v31) {
                break;
              }
              if (!cstdlib_isspace(v30))
              {
                if (*v22) {
                  goto LABEL_15;
                }
                break;
              }
            }
          }
        }
      }
      else
      {
        unsigned int v27 = 0;
      }
LABEL_26:
      uint64_t v32 = (void *)heap_Alloc(*(void *)(v10 + 8), 8 * v27);
      *(void *)&v12[2 * v16 + 6] = v32;
      if (!v32) {
        break;
      }
      *(_DWORD *)(*((void *)v12 + 2) + 4 * v16) = v27;
      cstdlib_memcpy(v32, v26, 8 * v27);
      heap_Free(*(void **)(v10 + 8), (uint64_t)v26);
      ++v16;
    }
    while (v16 != v97);
  }
  uint64_t v9 = v97;
  *uint64_t v12 = v97;
  uint64_t v33 = *(void *)(a1 + 56);
  if (v33)
  {
    uint64_t v34 = wapiti_rules_apply(v10, v33, v12);
    if ((v34 & 0x80000000) != 0)
    {
      uint64_t v39 = 0;
      uint64_t v4 = v34;
LABEL_81:
      uint64_t v13 = v95;
LABEL_82:
      uint64_t v67 = *((void *)v12 + 2);
      if (v67)
      {
        if (v9)
        {
          uint64_t v68 = v5;
          uint64_t v69 = 0;
          uint64_t v70 = v12 + 6;
          do
          {
            if (*(_DWORD *)(*((void *)v12 + 2) + 4 * v69))
            {
              unint64_t v71 = *(uint64_t **)&v70[2 * v69];
              if (v71)
              {
                heap_Free(*(void **)(v10 + 8), *v71);
                heap_Free(*(void **)(v10 + 8), *(void *)&v70[2 * v69]);
              }
            }
            ++v69;
          }
          while (v9 != v69);
          uint64_t v67 = *((void *)v12 + 2);
          uint64_t v5 = v68;
        }
        heap_Free(*(void **)(v10 + 8), v67);
      }
      goto LABEL_91;
    }
  }
  uint64_t v35 = *(void *)a1;
  uint64_t v36 = *v12;
  uint64_t v96 = v36;
  if (!*(_DWORD *)(a1 + 24))
  {
    uint64_t v89 = v5;
    if (*(_DWORD *)(a1 + 8))
    {
      unsigned int v62 = **((_DWORD **)v12 + 2);
    }
    else if (v36)
    {
      uint64_t v63 = 0;
      unsigned int v62 = 0;
      uint64_t v64 = *((void *)v12 + 2);
      do
      {
        if (*(_DWORD *)(v64 + 4 * v63))
        {
          unint64_t v65 = 0;
          do
          {
            int v66 = **(char **)(*(void *)&v12[2 * v63 + 6] + 8 * v65);
            if (v66 == 42)
            {
              v62 += 2;
            }
            else if (v66 == 98 || v66 == 117)
            {
              ++v62;
            }
            else
            {
              wapiti_fatal(*(void *)(v35 + 32), (uint64_t)"invalid feature: %s");
              uint64_t v64 = *((void *)v12 + 2);
            }
            ++v65;
          }
          while (v65 < *(unsigned int *)(v64 + 4 * v63));
        }
        ++v63;
        uint64_t v36 = v96;
      }
      while (v63 != v96);
    }
    else
    {
      unsigned int v62 = 0;
    }
    uint64_t v73 = heap_Alloc(*(void *)(v35 + 8), 32 * v36 + 56);
    if (!v73) {
      return v4;
    }
    uint64_t v39 = v73;
    uint64_t v74 = heap_Alloc(*(void *)(v35 + 8), 4 * v62);
    *(void *)(v39 + 8) = v74;
    uint64_t v13 = v95;
    uint64_t v9 = v97;
    if (!v74) {
      return v4;
    }
    *(_DWORD *)uint64_t v39 = v96;
    *(void *)(v39 + 16) = 0;
    if (!v96) {
      goto LABEL_127;
    }
    uint64_t v75 = 0;
    uint64_t v76 = *((void *)v12 + 2);
    uint64_t v92 = v39;
    do
    {
      uint64_t v77 = v39 + 32 * v75;
      *(void *)(v77 + 24) = 0xFFFFFFFFLL;
      *(void *)(v77 + 40) = v74;
      if (*(_DWORD *)(v76 + 4 * v75))
      {
        uint64_t v78 = (_DWORD *)v74;
        unint64_t v79 = 0;
        uint64_t v94 = v77;
        uint64_t v80 = (_DWORD *)(v77 + 28);
        do
        {
          LODWORD(__s) = 0;
          uint64_t v81 = *(char **)(*(void *)&v12[2 * v75 + 6] + 8 * v79);
          if (*(_DWORD *)(a1 + 8) || *v81 != 98)
          {
            uint64_t v50 = rdr_mapobs_qp(a1, v81, (int *)&__s);
            if ((v50 & 0x80000000) != 0) {
              return v50;
            }
            if (__s != -1)
            {
              *v78++ = __s;
              ++*v80;
            }
          }
          ++v79;
          uint64_t v76 = *((void *)v12 + 2);
        }
        while (v79 < *(unsigned int *)(v76 + 4 * v75));
        uint64_t v5 = v89;
        uint64_t v9 = v97;
        uint64_t v74 = (uint64_t)v78;
        uint64_t v39 = v92;
        uint64_t v77 = v94;
      }
      *(_DWORD *)(v77 + 32) = 0;
      uint64_t v82 = (_DWORD *)(v77 + 32);
      if (!*(_DWORD *)(a1 + 8))
      {
        *(void *)(v39 + 32 * v75 + 48) = v74;
        if (*(_DWORD *)(v76 + 4 * v75))
        {
          int v83 = v82;
          uint64_t v84 = (_DWORD *)v74;
          unint64_t v85 = 0;
          do
          {
            LODWORD(__s) = 0;
            uint64_t v86 = *(char **)(*(void *)&v12[2 * v75 + 6] + 8 * v85);
            if (*v86 != 117)
            {
              uint64_t v50 = rdr_mapobs_qp(a1, v86, (int *)&__s);
              if ((v50 & 0x80000000) != 0) {
                return v50;
              }
              if (__s != -1)
              {
                *v84++ = __s;
                ++*v83;
              }
            }
            ++v85;
            uint64_t v76 = *((void *)v12 + 2);
          }
          while (v85 < *(unsigned int *)(v76 + 4 * v75));
          uint64_t v5 = v89;
          uint64_t v9 = v97;
          uint64_t v74 = (uint64_t)v84;
          uint64_t v39 = v92;
        }
      }
      ++v75;
    }
    while (v75 != v96);
    uint64_t v13 = v95;
    if (*v95)
    {
      unsigned int v59 = v5;
      uint64_t v87 = 0;
      do
      {
        uint64_t v88 = *(char **)(*v95 + v87);
        LODWORD(__s) = 0;
        uint64_t v4 = qp_str2id(v35, *(void *)(a1 + 40), v88, (int *)&__s, 0);
        if ((v4 & 0x80000000) != 0) {
          return v4;
        }
        *(_DWORD *)(v39 + 4 * v87 + 24) = __s;
        v87 += 8;
      }
      while (8 * v96 != v87);
LABEL_126:
      uint64_t v5 = v59;
      uint64_t v9 = v97;
    }
    else
    {
LABEL_127:
      uint64_t v4 = 0;
    }
    goto LABEL_82;
  }
  uint64_t v37 = 32 * v36;
  uint64_t v38 = heap_Alloc(*(void *)(v35 + 8), 32 * v36 + 56);
  if (!v38) {
    return v4;
  }
  uint64_t v39 = v38;
  uint64_t v40 = heap_Alloc(*(void *)(v35 + 8), 4 * v36 * (unint64_t)(*(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 12)));
  *(void *)(v39 + 8) = v40;
  if (!v40)
  {
    heap_Free(*(void **)(v35 + 8), v39);
    return v4;
  }
  *(_DWORD *)uint64_t v39 = v36;
  *(void *)(v39 + 16) = 0;
  if (!v36)
  {
    uint64_t v4 = 0;
    goto LABEL_81;
  }
  uint64_t v41 = 0;
  uint64_t v42 = 4 * *(unsigned int *)(a1 + 12);
  uint64_t v43 = v42 + 4 * *(unsigned int *)(a1 + 16);
  uint64_t v13 = v95;
  do
  {
    uint64_t v44 = v39 + v41;
    *(_DWORD *)(v44 + 24) = -1;
    *(void *)(v44 + 40) = v40;
    *(void *)(v44 + 48) = v40 + v42;
    v41 += 32;
    v40 += v43;
  }
  while (v37 != v41);
  uint64_t v45 = 0;
  uint64_t v4 = 0;
  LODWORD(v46) = *(_DWORD *)(a1 + 24);
  do
  {
    uint64_t v47 = v39 + 32 * v45;
    *(_DWORD *)(v47 + 32) = 0;
    unsigned int v48 = (_DWORD *)(v47 + 32);
    *(_DWORD *)(v47 + 28) = 0;
    uint64_t v93 = (_DWORD *)(v47 + 28);
    if (v46)
    {
      unint64_t v49 = 0;
      uint64_t v90 = (uint64_t *)(v47 + 40);
      unsigned __int16 v91 = (uint64_t *)(v47 + 48);
      while (1)
      {
        char __s = 0;
        int v98 = 0;
        uint64_t v50 = pat_exec(v35, *(void *)(*(void *)(a1 + 32) + 8 * v49), (uint64_t)v12, v45, (uint64_t *)&__s);
        if ((v50 & 0x80000000) != 0) {
          return v50;
        }
        uint64_t v4 = rdr_mapobs_qp(a1, __s, &v98);
        if ((v4 & 0x80000000) != 0) {
          return v4;
        }
        int v51 = v98;
        if (v98 != -1) {
          break;
        }
        uint64_t v56 = *(void **)(v35 + 8);
        unsigned int v52 = __s;
LABEL_51:
        heap_Free(v56, (uint64_t)v52);
        ++v49;
        unint64_t v46 = *(unsigned int *)(a1 + 24);
        if (v49 >= v46)
        {
          uint64_t v13 = v95;
          goto LABEL_53;
        }
      }
      unsigned int v52 = __s;
      int v53 = *__s;
      switch(v53)
      {
        case '*':
          uint64_t v57 = *v90;
          uint64_t v58 = *v93;
          *uint64_t v93 = v58 + 1;
          *(_DWORD *)(v57 + 4 * v58) = v51;
          int v51 = v98;
          break;
        case 'b':
          break;
        case 'u':
          uint64_t v54 = *v90;
          unsigned int v55 = (*v93)++;
LABEL_49:
          *(_DWORD *)(v54 + 4 * v55) = v51;
          goto LABEL_50;
        default:
LABEL_50:
          uint64_t v56 = *(void **)(v35 + 8);
          goto LABEL_51;
      }
      uint64_t v54 = *v91;
      unsigned int v55 = (*v48)++;
      goto LABEL_49;
    }
LABEL_53:
    ++v45;
  }
  while (v45 != v96);
  if (!*v13)
  {
    uint64_t v9 = v97;
    if ((v4 & 0x80000000) != 0) {
      return v4;
    }
    goto LABEL_82;
  }
  unsigned int v59 = v5;
  uint64_t v60 = 0;
  while (1)
  {
    uint64_t v61 = *(char **)(*v13 + v60);
    LODWORD(__s) = 0;
    uint64_t v4 = qp_str2id(v35, *(void *)(a1 + 40), v61, (int *)&__s, 0);
    if ((v4 & 0x80000000) != 0) {
      return v4;
    }
    *(_DWORD *)(v39 + 4 * v60 + 24) = __s;
    v60 += 8;
    if (8 * v96 == v60) {
      goto LABEL_126;
    }
  }
}

uint64_t rdr_mapobs(uint64_t a1, char *__s, unsigned int *a3)
{
  uint64_t v6 = *(void *)a1;
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v7 = *(void *)(v6 + 8);
    int v8 = cstdlib_strlen(__s);
    uint64_t v9 = (char *)heap_Alloc(v7, (v8 + 2));
    if (!v9) {
      return 2585796618;
    }
    uint64_t v10 = v9;
    unsigned int v15 = 0;
    *uint64_t v9 = 117;
    cstdlib_strcpy(v9 + 1, __s);
    uint64_t v11 = qrk_str2id(v6, *(uint64_t **)(a1 + 48), v10, &v15, 0);
    if ((v11 & 0x80000000) == 0)
    {
      heap_Free(*(void **)(v6 + 8), (uint64_t)v10);
      *a3 = v15;
    }
    return v11;
  }
  else
  {
    uint64_t v12 = *(uint64_t **)(a1 + 48);
    uint64_t v13 = *(void *)a1;
    return qrk_str2id(v13, v12, __s, a3, 0);
  }
}

uint64_t rdr_mapobs_qp(uint64_t a1, char *__s, int *a3)
{
  uint64_t v6 = *(void *)a1;
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v7 = *(void *)(v6 + 8);
    int v8 = cstdlib_strlen(__s);
    uint64_t v9 = (char *)heap_Alloc(v7, (v8 + 2));
    if (!v9) {
      return 2585796618;
    }
    uint64_t v10 = v9;
    int v15 = 0;
    *uint64_t v9 = 117;
    cstdlib_strcpy(v9 + 1, __s);
    uint64_t v11 = qp_str2id(v6, *(void *)(a1 + 48), v10, &v15, 0);
    if ((v11 & 0x80000000) == 0)
    {
      heap_Free(*(void **)(v6 + 8), (uint64_t)v10);
      *a3 = v15;
    }
    return v11;
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)a1;
    return qp_str2id(v13, v12, __s, a3, 0);
  }
}

uint64_t mdl_new(uint64_t a1, void *a2)
{
  uint64_t v4 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 32904);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t result = 0;
    *uint64_t v5 = *(void *)a1;
    v5[14] = a1;
  }
  else
  {
    uint64_t result = 2585796618;
    if (!a2) {
      return result;
    }
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

void *mdl_free(uint64_t *a1, int a2, int a3)
{
  uint64_t v6 = *a1;
  heap_Free(*(void **)(*a1 + 8), a1[7]);
  heap_Free(*(void **)(v6 + 8), a1[8]);
  heap_Free(*(void **)(v6 + 8), a1[9]);
  uint64_t v7 = a1[10];
  if (v7) {
    xvm_free(v6, v7);
  }
  uint64_t v8 = a1[11];
  if (a3 == 1)
  {
    if (v8) {
      heap_Free(*(void **)(v6 + 8), v8);
    }
  }
  else if (v8)
  {
    xvm_free_sparse(v6);
  }
  uint64_t v9 = a1[12];
  if (v9) {
    rdr_freedat(v6, v9);
  }
  uint64_t v10 = a1[13];
  if (v10) {
    rdr_freedat(v6, v10);
  }
  uint64_t v11 = a1[14];
  if (v11) {
    rdr_free(v11, a2);
  }
  uint64_t v12 = a1[15];
  if (v12) {
    heap_Free(*(void **)(v6 + 8), v12);
  }
  uint64_t v13 = *(void **)(v6 + 8);

  return heap_Free(v13, (uint64_t)a1);
}

uint64_t mdl_new_qp(uint64_t a1, void *a2)
{
  uint64_t v4 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 32904);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t result = 0;
    *uint64_t v5 = *(void *)a1;
    v5[14] = a1;
  }
  else
  {
    uint64_t result = 2585796618;
    if (!a2) {
      return result;
    }
    uint64_t v5 = 0;
  }
  *a2 = v5;
  return result;
}

void *mdl_free_qp(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  heap_Free(*(void **)(*a1 + 8), a1[7]);
  heap_Free(*(void **)(v4 + 8), a1[8]);
  heap_Free(*(void **)(v4 + 8), a1[9]);
  uint64_t v5 = a1[10];
  if (v5) {
    xvm_free(v4, v5);
  }
  uint64_t v6 = a1[11];
  if (a2 == 1)
  {
    if (v6) {
      heap_Free(*(void **)(v4 + 8), v6);
    }
  }
  else if (v6)
  {
    xvm_free_sparse(v4);
  }
  uint64_t v7 = a1[12];
  if (v7) {
    rdr_freedat(v4, v7);
  }
  uint64_t v8 = a1[13];
  if (v8) {
    rdr_freedat(v4, v8);
  }
  uint64_t v9 = a1[14];
  if (v9) {
    rdr_free_qp(v9);
  }
  uint64_t v10 = a1[15];
  if (v10) {
    heap_Free(*(void **)(v4 + 8), v10);
  }
  uint64_t v11 = *(void **)(v4 + 8);

  return heap_Free(v11, (uint64_t)a1);
}

uint64_t mdl_sync(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 112);
  if (*(_DWORD *)(a1 + 36))
  {
    int v4 = qp_count(*(void *)(v3 + 40));
    unsigned int v5 = qp_count(*(void *)(*(void *)(a1 + 112) + 48));
  }
  else
  {
    int v4 = qrk_count(*(void *)(v3 + 40));
    unsigned int v5 = qrk_count(*(void *)(*(void *)(a1 + 112) + 48));
  }
  unsigned int v6 = v5;
  int v7 = *(_DWORD *)(a1 + 44);
  if (v7 == v4 && *(_DWORD *)(a1 + 48) == v5) {
    return 0;
  }
  if (v4) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    wapiti_fatal(*(void *)(v2 + 32), (uint64_t)"cannot synchronize an empty model");
    int v7 = *(_DWORD *)(a1 + 44);
  }
  if (v7 == v4 || v7 == 0)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 48);
    unsigned int v10 = *(_DWORD *)(a1 + 52);
  }
  else
  {
    wapiti_warning(*(void *)(v2 + 32), (uint64_t)"labels count changed, discarding the model");
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 56));
    *(void *)(a1 + 56) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 64));
    *(void *)(a1 + 64) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
    uint64_t v12 = *(void *)(a1 + 80);
    if (v12)
    {
      xvm_free(v2, v12);
      unsigned int v10 = 0;
      unsigned int v11 = 0;
      *(void *)(a1 + 80) = 0;
    }
    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = 0;
    }
  }
  *(_DWORD *)(a1 + 44) = v4;
  *(_DWORD *)(a1 + 48) = v6;
  uint64_t v13 = heap_Realloc(*(uint64_t **)(v2 + 8), *(void *)(a1 + 56), v6);
  *(void *)(a1 + 56) = v13;
  uint64_t v14 = heap_Realloc(*(uint64_t **)(v2 + 8), *(void *)(a1 + 64), 4 * v6);
  *(void *)(a1 + 64) = v14;
  uint64_t v15 = heap_Realloc(*(uint64_t **)(v2 + 8), *(void *)(a1 + 72), 4 * v6);
  uint64_t v16 = v15;
  *(void *)(a1 + 72) = v15;
  if (v13) {
    BOOL v17 = v14 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17 && v15 != 0)
  {
    unsigned int v34 = v10;
    unsigned int v21 = v6 - v11;
    if (v6 > v11)
    {
      uint64_t v22 = v11;
      while (1)
      {
        uint64_t v23 = *(void *)(a1 + 112);
        unsigned int v24 = (char *)(*(_DWORD *)(a1 + 36)
                     ? qp_id2str(v2, *(void *)(v23 + 48), v22)
                     : qrk_id2str(v2, *(void *)(v23 + 48), v22));
        int v25 = *v24;
        if (v25 == 42) {
          break;
        }
        if (v25 == 117)
        {
          char v26 = 1;
          goto LABEL_47;
        }
        if (v25 == 98)
        {
          *(unsigned char *)(v13 + v22) = 2;
LABEL_51:
          *(_DWORD *)(v16 + 4 * v22) = v10;
          v10 += v4 * v4;
          goto LABEL_52;
        }
        char v27 = *(unsigned char *)(v13 + v22);
        if (v27) {
          goto LABEL_49;
        }
LABEL_50:
        if ((v27 & 2) != 0) {
          goto LABEL_51;
        }
LABEL_52:
        ++v22;
        if (!--v21) {
          goto LABEL_53;
        }
      }
      char v26 = 3;
LABEL_47:
      *(unsigned char *)(v13 + v22) = v26;
LABEL_49:
      *(_DWORD *)(v14 + 4 * v22) = v10;
      v10 += v4;
      char v27 = *(unsigned char *)(v13 + v22);
      goto LABEL_50;
    }
LABEL_53:
    *(_DWORD *)(a1 + 52) = v10;
    uint64_t v28 = xvm_new(v2, v10);
    uint64_t v29 = v28;
    if (v34)
    {
      if (v28)
      {
        uint64_t v30 = 0;
        uint64_t v31 = *(void *)(a1 + 80);
        do
        {
          *(_DWORD *)(v28 + v30) = *(_DWORD *)(v31 + v30);
          v30 += 4;
        }
        while (4 * v34 != v30);
        xvm_free(v2, v31);
        *(void *)(a1 + 80) = v29;
        goto LABEL_59;
      }
    }
    else
    {
      *(void *)(a1 + 80) = v28;
      if (v28)
      {
LABEL_59:
        if (v34 < v10) {
          bzero((void *)(v29 + 4 * v34), 4 * (v10 + ~v34) + 4);
        }
        uint64_t v32 = *(void *)(a1 + 112);
        if (*(_DWORD *)(a1 + 36))
        {
          qp_lock(*(void *)(v32 + 40), 1);
          qp_lock(*(void *)(*(void *)(a1 + 112) + 48), 1);
        }
        else
        {
          qrk_lock(*(void *)(v32 + 40), 1);
          qrk_lock(*(void *)(*(void *)(a1 + 112) + 48), 1);
        }
        return 0;
      }
    }
LABEL_63:
    heap_Free(*(void **)(v2 + 8), v13);
    *(void *)(a1 + 56) = 0;
    if (!v14) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v13) {
    goto LABEL_63;
  }
  if (v14)
  {
LABEL_31:
    heap_Free(*(void **)(v2 + 8), v14);
    *(void *)(a1 + 64) = 0;
  }
LABEL_32:
  if (v16)
  {
    heap_Free(*(void **)(v2 + 8), v16);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v19 = 2585796618;
  uint64_t v20 = *(void *)(a1 + 80);
  if (v20)
  {
    xvm_free(v2, v20);
    *(void *)(a1 + 80) = 0;
  }
  return v19;
}

uint64_t mdl_sync_sparse(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 112);
  if (*(_DWORD *)(a1 + 36))
  {
    int v4 = qp_count(*(void *)(v3 + 40));
    unsigned int v5 = qp_count(*(void *)(*(void *)(a1 + 112) + 48));
  }
  else
  {
    int v4 = qrk_count(*(void *)(v3 + 40));
    unsigned int v5 = qrk_count(*(void *)(*(void *)(a1 + 112) + 48));
  }
  unsigned int v6 = v5;
  int v7 = *(_DWORD *)(a1 + 44);
  if (v7 == v4 && *(_DWORD *)(a1 + 48) == v5) {
    return 0;
  }
  if (v4) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    wapiti_fatal(*(void *)(v2 + 32), (uint64_t)"cannot synchronize an empty model");
    int v7 = *(_DWORD *)(a1 + 44);
  }
  if (v7 == v4 || v7 == 0)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 48);
    uint64_t v10 = *(unsigned int *)(a1 + 52);
  }
  else
  {
    wapiti_warning(*(void *)(v2 + 32), (uint64_t)"labels count changed, discarding the model");
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 56));
    *(void *)(a1 + 56) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 64));
    *(void *)(a1 + 64) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
    if (*(void *)(a1 + 88))
    {
      xvm_free_sparse(v2);
      uint64_t v10 = 0;
      unsigned int v11 = 0;
      *(void *)(a1 + 88) = 0;
    }
    else
    {
      uint64_t v10 = 0;
      unsigned int v11 = 0;
    }
  }
  *(_DWORD *)(a1 + 44) = v4;
  *(_DWORD *)(a1 + 48) = v6;
  uint64_t v12 = heap_Realloc(*(uint64_t **)(v2 + 8), *(void *)(a1 + 56), v6);
  *(void *)(a1 + 56) = v12;
  uint64_t v13 = heap_Realloc(*(uint64_t **)(v2 + 8), *(void *)(a1 + 64), 4 * v6);
  *(void *)(a1 + 64) = v13;
  uint64_t v14 = heap_Realloc(*(uint64_t **)(v2 + 8), *(void *)(a1 + 72), 4 * v6);
  uint64_t v15 = v14;
  *(void *)(a1 + 72) = v14;
  if (v12) {
    BOOL v16 = v13 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16 && v14 != 0)
  {
    int v33 = v10;
    unsigned int v20 = v6 - v11;
    if (v6 > v11)
    {
      uint64_t v10 = v10;
      uint64_t v21 = v11;
      while (1)
      {
        uint64_t v22 = *(void *)(a1 + 112);
        uint64_t v23 = (char *)(*(_DWORD *)(a1 + 36)
                     ? qp_id2str(v2, *(void *)(v22 + 48), v21)
                     : qrk_id2str(v2, *(void *)(v22 + 48), v21));
        int v24 = *v23;
        if (v24 == 42) {
          break;
        }
        if (v24 == 117)
        {
          char v25 = 1;
          goto LABEL_47;
        }
        if (v24 == 98)
        {
          *(unsigned char *)(v12 + v21) = 2;
LABEL_51:
          *(_DWORD *)(v15 + 4 * v21) = v10;
          uint64_t v10 = (v10 + v4 * v4);
          goto LABEL_52;
        }
        char v26 = *(unsigned char *)(v12 + v21);
        if (v26) {
          goto LABEL_49;
        }
LABEL_50:
        if ((v26 & 2) != 0) {
          goto LABEL_51;
        }
LABEL_52:
        ++v21;
        if (!--v20) {
          goto LABEL_53;
        }
      }
      char v25 = 3;
LABEL_47:
      *(unsigned char *)(v12 + v21) = v25;
LABEL_49:
      *(_DWORD *)(v13 + 4 * v21) = v10;
      uint64_t v10 = (v10 + v4);
      char v26 = *(unsigned char *)(v12 + v21);
      goto LABEL_50;
    }
LABEL_53:
    *(_DWORD *)(a1 + 52) = v10;
    uint64_t v27 = sparray_init(v2, v10);
    uint64_t v28 = v27;
    if (v33)
    {
      if (v27)
      {
        for (int i = 0; i != v33; ++i)
        {
          int v30 = sparray_get(*(void *)(a1 + 88), i);
          sparray_set(v28, i, v30);
        }
        sparray_free(v2, *(uint64_t **)(a1 + 88));
        *(void *)(a1 + 88) = v28;
        goto LABEL_59;
      }
    }
    else
    {
      *(void *)(a1 + 88) = v27;
      if (v27)
      {
LABEL_59:
        uint64_t v31 = *(void *)(a1 + 112);
        if (*(_DWORD *)(a1 + 36))
        {
          qp_lock(*(void *)(v31 + 40), 1);
          qp_lock(*(void *)(*(void *)(a1 + 112) + 48), 1);
        }
        else
        {
          qrk_lock(*(void *)(v31 + 40), 1);
          qrk_lock(*(void *)(*(void *)(a1 + 112) + 48), 1);
        }
        return 0;
      }
    }
LABEL_61:
    heap_Free(*(void **)(v2 + 8), v12);
    *(void *)(a1 + 56) = 0;
    if (!v13) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v12) {
    goto LABEL_61;
  }
  if (v13)
  {
LABEL_31:
    heap_Free(*(void **)(v2 + 8), v13);
    *(void *)(a1 + 64) = 0;
  }
LABEL_32:
  if (v15)
  {
    heap_Free(*(void **)(v2 + 8), v15);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v18 = 2585796618;
  uint64_t v19 = *(uint64_t **)(a1 + 88);
  if (v19)
  {
    sparray_free(v2, v19);
    *(void *)(a1 + 88) = 0;
  }
  return v18;
}

uint64_t pat_comp(uint64_t a1, unsigned char *a2, void *a3)
{
  uint64_t v5 = a1;
  int v6 = 0;
  for (int i = 0; a2[i] == 37; ++i)
  {
    ++v6;
LABEL_6:
    ;
  }
  if (a2[i]) {
    goto LABEL_6;
  }
  uint64_t v8 = 2585796618;
  uint64_t v9 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 32 * ((2 * v6) | 1u) + 48);
  uint64_t v10 = v9;
  if (!v9) {
    goto LABEL_54;
  }
  uint64_t v41 = a3;
  *uint64_t v9 = a2;
  if (!*a2)
  {
    unsigned int v12 = 0;
    unsigned int v43 = 0;
LABEL_52:
    uint64_t v8 = 0;
    *((_DWORD *)v10 + 2) = v43;
    *((_DWORD *)v10 + 3) = v12;
    a3 = v41;
    goto LABEL_54;
  }
  int v11 = 0;
  unsigned int v43 = 0;
  unsigned int v12 = 0;
  uint64_t v13 = a2;
  uint64_t v42 = v5;
  while (2)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v10;
    BOOL v16 = &v10[4 * v12];
    v16[3] = 0;
    BOOL v17 = v16 + 3;
    uint64_t v18 = v17 - 1;
    int v19 = *v13;
    if (v19 != 37)
    {
      unsigned int v31 = 0;
      if (v19)
      {
        do
        {
          if (v19 == 37) {
            break;
          }
          int v19 = a2[++v31 + v11];
        }
        while (a2[v31 + v11]);
      }
      unsigned char *v18 = 115;
      uint64_t v10 = v15;
      HIDWORD(v15[4 * v12 + 2]) = 0;
      uint64_t v32 = (void *)heap_Alloc(*(void *)(v5 + 8), v31 + 1);
      *BOOL v17 = v32;
      if (!v32) {
        goto LABEL_53;
      }
      cstdlib_memcpy(v32, &a2[v11], v31);
      *(unsigned char *)(*v17 + (int)v31) = 0;
      v11 += v31;
LABEL_49:
      ++v12;
      uint64_t v13 = &a2[v11];
      if (!*v13) {
        goto LABEL_52;
      }
      continue;
    }
    break;
  }
  unsigned int v44 = v12;
  size_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v20 = (v11 + 1);
  int v21 = cstdlib_tolower((char)a2[v20]);
  char v22 = v21;
  int v23 = v21 << 24;
  int v24 = (char)v21;
  if (v21 << 24 != 1828716544 && v23 != 1946157056 && v23 != 2013265920) {
    wapiti_fatal(*(void *)(v42 + 32), (uint64_t)"unknown command type: '%c'");
  }
  unsigned char *v18 = v22;
  BOOL v27 = v24 != (char)a2[v20];
  uint64_t v10 = v15;
  uint64_t v28 = &v15[4 * v14];
  *((_DWORD *)v28 + 8) = 0;
  uint64_t v29 = v28 + 4;
  *(v29 - 3) = v27;
  uint64_t v30 = (v11 + 2);
  if (wapiti_scanf_pat_len(&a2[v30], "[@", &v46, (_DWORD *)&v46 + 1, &v45) == 2)
  {
    *uint64_t v29 = 1;
    uint64_t v5 = v42;
    unsigned int v12 = v44;
  }
  else
  {
    uint64_t v5 = v42;
    unsigned int v12 = v44;
    if (wapiti_scanf_pat_len(&a2[v30], "[", &v46, (_DWORD *)&v46 + 1, &v45) != 2) {
      wapiti_fatal(*(void *)(v42 + 32), (uint64_t)"invalid pattern: %s");
    }
  }
  *(void *)((char *)&v15[4 * v14 + 4] + 4) = v46;
  unsigned int v33 = v43;
  if (v43 <= HIDWORD(v46)) {
    unsigned int v33 = HIDWORD(v46);
  }
  unsigned int v43 = v33;
  int v34 = v30 + v45;
  if (v23 != 1946157056 && v23 != 1828716544)
  {
LABEL_46:
    if (a2[v34] != 93) {
      wapiti_fatal(*(void *)(v5 + 32), (uint64_t)"missing end of pattern: %s");
    }
    int v11 = v34 + 1;
    goto LABEL_49;
  }
  if (a2[v34] != 44 && a2[v34 + 1] != 34) {
    wapiti_fatal(*(void *)(v5 + 32), (uint64_t)"missing arg in pattern: %s");
  }
  int v35 = v34 + 2;
  int v36 = v35;
  while (2)
  {
    int v37 = a2[v36];
    if (v37 == 92)
    {
      if (a2[v36 + 1]) {
        ++v36;
      }
LABEL_42:
      ++v36;
      continue;
    }
    break;
  }
  if (a2[v36])
  {
    if (v37 == 34) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  wapiti_fatal(*(void *)(v5 + 32), (uint64_t)"unended argument: %s");
LABEL_44:
  uint64_t v38 = v36 - (uint64_t)v35;
  uint64_t v39 = (void *)heap_Alloc(*(void *)(v5 + 8), (v38 + 1));
  *BOOL v17 = v39;
  if (v39)
  {
    cstdlib_memcpy(v39, &a2[v35], v38);
    *(unsigned char *)(*v17 + v38) = 0;
    int v34 = v36 + 1;
    unsigned int v12 = v44;
    goto LABEL_46;
  }
LABEL_53:
  a3 = v41;
  uint64_t v8 = 2585796618;
LABEL_54:
  *a3 = v10;
  return v8;
}

uint64_t pat_exec(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v5 = 2585796615;
  if (a5)
  {
    int v11 = *(_DWORD *)a3;
    *a5 = 0;
    uint64_t v12 = heap_Alloc(*(void *)(a1 + 8), 16);
    if (v12)
    {
      uint64_t v13 = v12;
      int v36 = a5;
      LODWORD(v14) = *(_DWORD *)(a2 + 12);
      if (v14)
      {
        unint64_t v15 = 0;
        unsigned int v16 = 0;
        LODWORD(v17) = 16;
        do
        {
          uint64_t v18 = a2 + 32 * v15;
          unsigned int v37 = 0;
          int v19 = *(unsigned __int8 *)(v18 + 16);
          if (v19 == 115)
          {
            uint64_t v20 = *(const char **)(v18 + 24);
            unsigned int v21 = cstdlib_strlen(v20);
            unsigned int v37 = v21;
          }
          else
          {
            int v22 = *(_DWORD *)(v18 + 36);
            if (v22 >= 0) {
              int v23 = -1;
            }
            else {
              int v23 = v11;
            }
            if (*(_DWORD *)(v18 + 32)) {
              int v24 = v23;
            }
            else {
              int v24 = a4;
            }
            uint64_t v25 = (v24 + v22);
            if ((int)v25 < 0)
            {
              if ((int)v25 <= -5) {
                int v28 = -5;
              }
              else {
                int v28 = v25;
              }
              BOOL v27 = &bval[~v28];
            }
            else if ((int)v25 >= v11)
            {
              if ((int)v25 - v11 >= 4) {
                int v29 = 4;
              }
              else {
                int v29 = v25 - v11;
              }
              BOOL v27 = &eval[v29];
            }
            else
            {
              uint64_t v26 = *(unsigned int *)(v18 + 40);
              if (v26 >= *(_DWORD *)(*(void *)(a3 + 16) + 4 * v25))
              {
                wapiti_fatal(*(void *)(a1 + 32), (uint64_t)"missing tokens, cannot apply pattern");
                heap_Free(*(void **)(a1 + 8), v13);
                return 2585796615;
              }
              BOOL v27 = (char **)(*(void *)(a3 + 8 * v25 + 24) + 8 * v26);
            }
            uint64_t v20 = *v27;
            switch(v19)
            {
              case 'm':
                int v30 = rex_match(a1, *(unsigned __int8 **)(a2 + 32 * v15 + 24), (unsigned __int8 *)*v27, (int *)&v37);
                if (v30 == -1)
                {
                  unsigned int v21 = 0;
                  unsigned int v37 = 0;
                }
                else
                {
                  unsigned int v21 = v37;
                }
                v20 += v30;
                goto LABEL_37;
              case 't':
                if (rex_match(a1, *(unsigned __int8 **)(a2 + 32 * v15 + 24), (unsigned __int8 *)*v27, (int *)&v37) == -1)uint64_t v20 = "false"; {
                else
                }
                  uint64_t v20 = "true";
LABEL_34:
                unsigned int v21 = cstdlib_strlen(v20);
                unsigned int v37 = v21;
                goto LABEL_37;
              case 'x':
                goto LABEL_34;
            }
            unsigned int v21 = 0;
          }
LABEL_37:
          if (v21 + v16 >= (int)v17 - 1)
          {
            do
              uint64_t v17 = v17 + (v17 >> 1);
            while (v21 + v16 >= (int)v17 - 1);
            uint64_t v31 = heap_Realloc(*(uint64_t **)(a1 + 8), v13, v17);
            if (!v31) {
              goto LABEL_49;
            }
            uint64_t v32 = v31;
            unsigned int v21 = v37;
            uint64_t v13 = v32;
          }
          cstdlib_memcpy((void *)(v13 + v16), v20, v21);
          LODWORD(v14) = v37 + v16;
          if (*(_DWORD *)(a2 + 32 * v15 + 20) && v16 < v14)
          {
            unint64_t v33 = v16;
            do
            {
              *(unsigned char *)(v13 + v33) = cstdlib_tolower(*(char *)(v13 + v33));
              ++v33;
              unint64_t v14 = v37 + v16;
            }
            while (v33 < v14);
          }
          ++v15;
          unsigned int v16 = v14;
        }
        while (v15 < *(unsigned int *)(a2 + 12));
      }
      *(unsigned char *)(v13 + v14) = 0;
      uint64_t v34 = heap_Realloc(*(uint64_t **)(a1 + 8), v13, (v14 + 1));
      if (v34)
      {
        uint64_t v5 = 0;
      }
      else
      {
LABEL_49:
        heap_Free(*(void **)(a1 + 8), v13);
        uint64_t v34 = 0;
        uint64_t v5 = 2585796618;
      }
      uint64_t *v36 = v34;
    }
    else
    {
      return 2585796618;
    }
  }
  return v5;
}

uint64_t rex_match(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (*a2 == 94)
  {
    *a4 = 0;
    if (rex_matchme(a1, a2 + 1, a3, a4)) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    for (uint64_t i = 0; ; ++i)
    {
      *a4 = 0;
      uint64_t v9 = &a3[i];
      if (rex_matchme(a1, a2, &a3[i], a4)) {
        break;
      }
      if (!*v9) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return i;
}

void *pat_free(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(a2 + 12))
    {
      unint64_t v4 = 0;
      uint64_t v5 = (uint64_t *)(a2 + 24);
      do
      {
        uint64_t v6 = *v5;
        v5 += 4;
        heap_Free((void *)v3[1], v6);
        ++v4;
      }
      while (v4 < *(unsigned int *)(a2 + 12));
    }
    heap_Free((void *)v3[1], *(void *)a2);
    int v7 = (void *)v3[1];
    return heap_Free(v7, a2);
  }
  return result;
}

uint64_t rex_matchme(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
LABEL_1:
  while (2)
  {
    uint64_t v8 = a2;
    while (1)
    {
      int v9 = *v8;
      if (v9 == 36)
      {
        a2 = v8 + 1;
        int v11 = v8[1];
        if (!v8[1]) {
          return *a3 == 0;
        }
        uint64_t v10 = (uint64_t)v8;
      }
      else
      {
        if (!*v8) {
          return 1;
        }
        uint64_t v10 = (uint64_t)(v9 == 92 ? v8 + 1 : v8);
        if (v9 == 63 || v9 == 42) {
          wapiti_fatal(*(void *)(a1 + 32), (uint64_t)"unescaped * or ? in regexp: %s");
        }
        a2 = (unsigned __int8 *)(v10 + 1);
        int v11 = *(unsigned __int8 *)(v10 + 1);
      }
      if (v11 != 63) {
        break;
      }
      a2 = (unsigned __int8 *)(v10 + 2);
      int v12 = rex_matchit(v8, a3);
      uint64_t v8 = (unsigned __int8 *)(v10 + 2);
      if (v12)
      {
        ++*a4;
        if (!rex_matchme(a1, v10 + 2, a3 + 1, a4))
        {
          --*a4;
          goto LABEL_1;
        }
        return 1;
      }
    }
    if (v11 == 42)
    {
      while (1)
      {
        int v14 = *a4;
        if (rex_matchme(a1, v10 + 2, a3, a4)) {
          break;
        }
        *a4 = v14 + 1;
        uint64_t result = rex_matchit(v8, a3++);
        if (!result) {
          return result;
        }
      }
      return 1;
    }
    ++*a4;
    uint64_t result = rex_matchit(v8, a3++);
    if (result) {
      continue;
    }
    return result;
  }
}

  uint64_t v10 = (uint64_t *)(a2 - 40);
  int v11 = a1;
LABEL_2:
  int v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    int v14 = a2 - (char *)v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>>,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>>>(a3, v10, v11))
          {
            uint64_t v25 = *v11;
            *int v11 = *((void *)a2 - 5);
            *((void *)a2 - 5) = v25;
            int v29 = *(_OWORD *)(v11 + 1);
            uint64_t v31 = v11[3];
            uint64_t v26 = *((_OWORD *)a2 - 2);
            v11[3] = *((void *)a2 - 2);
            *(_OWORD *)(v11 + 1) = v26;
            *((_OWORD *)a2 - 2) = v29;
            *((void *)a2 - 2) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>(v11, v11 + 5, v10, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>((uint64_t)v11, (uint64_t)(v11 + 5), (uint64_t)(v11 + 10), (uint64_t)v10, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>((uint64_t)v11, (uint64_t)(v11 + 5), (uint64_t)(v11 + 10), (uint64_t)(v11 + 15), (uint64_t)v10, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 959) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>((char *)v11, a2, (uint64_t)a2, a3);
      }
      return;
    }
    unsigned int v16 = v15 >> 1;
    uint64_t v17 = &v11[5 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>(v11, &v11[5 * (v15 >> 1)], v10, a3);
      uint64_t v18 = v10;
      int v19 = &v11[5 * v16];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>(v11 + 5, v19 - 5, (uint64_t *)a2 - 10, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>(v11 + 10, &v11[5 * v16 + 5], (uint64_t *)a2 - 15, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>(v19 - 5, v17, &v11[5 * v16 + 5], a3);
      uint64_t v20 = *v11;
      *int v11 = *v17;
      *uint64_t v17 = v20;
      int v30 = v11[3];
      int v28 = *(_OWORD *)(v11 + 1);
      unsigned int v21 = *(_OWORD *)(v19 + 1);
      v11[3] = v19[3];
      *(_OWORD *)(v11 + 1) = v21;
      v19[3] = v30;
      *(_OWORD *)(v19 + 1) = v28;
      uint64_t v10 = v18;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>(&v11[5 * (v15 >> 1)], v11, v10, a3);
    }
    if ((a5 & 1) == 0
      && (std::__less<void,void>::operator()[abi:ne180100]<std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>>,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>>>(a3, v11 - 5, v11) & 1) == 0)
    {
      int v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *,std::__less<void,void> &>(v11, (unint64_t)a2, a3);
      goto LABEL_17;
    }
    int v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *,std::__less<void,void> &>(v11, a2, a3);
    if ((v23 & 1) == 0) {
      goto LABEL_15;
    }
    int v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>((uint64_t)v11, v22, a3);
    int v11 = (uint64_t *)(v22 + 40);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>(v22 + 40, (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = (char *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    int v12 = v13 + 1;
    if (!v24)
    {
LABEL_15:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *,false>(a1, v22, a3, -v13, a5 & 1);
      int v11 = (uint64_t *)(v22 + 40);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>((uint64_t)v11, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::basic_string<char,std::char_traits<char>,ENTTS::Allocator<char>>> *>((uint64_t)v11, a2, a3);
  }
}

uint64_t rex_matchit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result = (char)*a2;
  if (*a2)
  {
    int v4 = *a1;
    if (v4 == 46) {
      return 1;
    }
    if (v4 != 92) {
      return v4 == *a2;
    }
    int v5 = (char)a1[1];
    if (v5 <= 96)
    {
      switch(v5)
      {
        case 'L':
          int v6 = cstdlib_islower(*a2);
          goto LABEL_39;
        case 'M':
        case 'N':
        case 'O':
        case 'Q':
        case 'R':
        case 'T':
        case 'V':
          return v5 == *a2;
        case 'P':
          int v6 = cstdlib_ispunct(*a2);
          goto LABEL_39;
        case 'S':
          int v6 = cstdlib_isspace(*a2);
          goto LABEL_39;
        case 'U':
          int v6 = cstdlib_isupper(*a2);
          goto LABEL_39;
        case 'W':
          int v6 = cstdlib_isalnum(*a2);
          goto LABEL_39;
        default:
          if (v5 == 65)
          {
            int v6 = cstdlib_isalpha(*a2);
          }
          else
          {
            if (v5 != 68) {
              return v5 == *a2;
            }
            int v6 = cstdlib_isdigit(*a2);
          }
LABEL_39:
          BOOL v7 = v6 == 0;
          break;
      }
      return v7;
    }
    switch(v5)
    {
      case 'l':
        return cstdlib_islower(result);
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 't':
      case 'v':
        return v5 == *a2;
      case 'p':
        return cstdlib_ispunct(result);
      case 's':
        return cstdlib_isspace(result);
      case 'u':
        return cstdlib_isupper(result);
      case 'w':
        return cstdlib_isalnum(result);
      default:
        if (v5 == 100)
        {
          uint64_t result = cstdlib_isdigit(result);
        }
        else
        {
          if (v5 != 97) {
            return v5 == *a2;
          }
          uint64_t result = cstdlib_isalpha(result);
        }
        break;
    }
  }
  return result;
}

uint64_t wapiti_fatal(uint64_t a1, uint64_t a2)
{
  return log_VOutText(a1, (uint64_t)&modInfoCRF, 0, 0, a2);
}

uint64_t wapiti_warning(uint64_t a1, uint64_t a2)
{
  return log_VOutText(a1, (uint64_t)&modInfoCRF, 1, 0, a2);
}

uint64_t wapiti_info(uint64_t a1, uint64_t a2)
{
  return log_VOutText(a1, (uint64_t)&modInfoCRF, 5, 0, a2);
}

uint64_t wapiti_ns_readline(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v7 = 0;
  int v6 = 0;
  if (!wapiti_scanf_fmt_prefix_len(a2, ":", &v6, &v7)) {
    wapiti_fatal(*(void *)(a1 + 32), (uint64_t)"cannot read from chars");
  }
  uint64_t result = v7;
  *a3 = v6;
  return result;
}

uint64_t wapiti_scanf_fmt_prefix_len(const char *a1, char *__s, _DWORD *a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  size_t v8 = cstdlib_strlen(__s);
  size_t v9 = cstdlib_strlen(a1);
  if (v9 <= v8) {
    return 0;
  }
  size_t v10 = v9;
  cstdlib_memset(__b, 0, 0x64uLL);
  size_t v11 = 0;
  BOOL v12 = 1;
  do
  {
    int v13 = a1[v11];
    if ((v13 - 48) >= 0xA && v13 != 45)
    {
      if (!v11) {
        return 0;
      }
      goto LABEL_10;
    }
    __b[v11++] = v13;
    BOOL v12 = v11 < v10;
  }
  while (v10 != v11);
  size_t v11 = v10;
  if (!v10) {
    return 0;
  }
LABEL_10:
  *a3 = cstdlib_atoi(__b);
  if (v12 && v8 != 0)
  {
    uint64_t v14 = 0;
    while (a1[v11 + v14] == __s[v14])
    {
      if (++v14 >= v8) {
        goto LABEL_17;
      }
    }
    return 0;
  }
  uint64_t v14 = 0;
LABEL_17:
  *a4 = v14 + v11;
  return 1;
}

uint64_t wapiti_isNum(int a1)
{
  uint64_t v1 = a1 - 45;
  if (v1 > 0xC) {
    return 0;
  }
  else {
    return dword_2206E3864[v1];
  }
}

uint64_t wapiti_scanf_fmt_1(const char *a1, char *__s, _DWORD *a3)
{
  int v4 = __s;
  uint64_t v18 = *MEMORY[0x263EF8340];
  size_t v6 = cstdlib_strlen(__s);
  size_t v7 = cstdlib_strlen(a1);
  size_t v8 = v7 - v6;
  if (v7 <= v6) {
    return 0;
  }
  if (!v6)
  {
LABEL_6:
    cstdlib_memset(__b, 0, 0x64uLL);
    uint64_t v14 = 0;
    while (1)
    {
      int v15 = a1[v6 + v14];
      if ((v15 - 48) >= 0xA && v15 != 45) {
        break;
      }
      __b[v14++] = v15;
      if (v8 == v14)
      {
        if (!v8) {
          return 0;
        }
LABEL_12:
        *a3 = cstdlib_atoi(__b);
        return 1;
      }
    }
    if (!v14) {
      return 0;
    }
    goto LABEL_12;
  }
  size_t v9 = a1;
  size_t v10 = v6;
  while (1)
  {
    int v12 = *(unsigned __int8 *)v9++;
    int v11 = v12;
    int v13 = *v4++;
    if (v11 != v13) {
      return 0;
    }
    if (!--v10) {
      goto LABEL_6;
    }
  }
}

uint64_t wapiti_scanf_fmt_2(const char *a1, char *__s, _DWORD *a3, _DWORD *a4)
{
  size_t v6 = __s;
  uint64_t v24 = *MEMORY[0x263EF8340];
  size_t v8 = cstdlib_strlen(__s);
  size_t v9 = cstdlib_strlen(a1);
  size_t v10 = v9 - v8;
  if (v9 <= v8) {
    return 0;
  }
  size_t v11 = v9;
  if (v8)
  {
    int v12 = a1;
    size_t v13 = v8;
    do
    {
      int v15 = *(unsigned __int8 *)v12++;
      int v14 = v15;
      int v16 = *v6++;
      if (v14 != v16) {
        return 0;
      }
    }
    while (--v13);
  }
  cstdlib_memset(__b, 0, 0x64uLL);
  uint64_t v17 = 0;
  do
  {
    int v18 = a1[v8 + v17];
    if ((v18 - 48) >= 0xA && v18 != 45)
    {
      unint64_t v19 = v8 + v17 + 1;
      if (!v17) {
        return 0;
      }
      goto LABEL_14;
    }
    __b[v17++] = v18;
  }
  while (v10 != v17);
  unint64_t v19 = v11;
  if (!v10) {
    return 0;
  }
LABEL_14:
  *a3 = cstdlib_atoi(__b);
  cstdlib_memset(__b, 0, 0x64uLL);
  if (v11 <= v19) {
    return 1;
  }
  size_t v21 = 0;
  while (1)
  {
    int v22 = a1[v19 + v21];
    if ((v22 - 48) >= 0xA && v22 != 45) {
      break;
    }
    __b[v21++] = v22;
    if (v11 - v19 == v21)
    {
      size_t v21 = v11 - v19;
      break;
    }
  }
  if (!v21) {
    return 1;
  }
  *a4 = cstdlib_atoi(__b);
  return 2;
}

uint64_t wapiti_scanf_fmt_3(const char *a1, char *__s, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  size_t v8 = __s;
  uint64_t v29 = *MEMORY[0x263EF8340];
  size_t v10 = cstdlib_strlen(__s);
  size_t v11 = cstdlib_strlen(a1);
  size_t v12 = v11 - v10;
  if (v11 <= v10) {
    return 0;
  }
  size_t v13 = v11;
  if (v10)
  {
    int v14 = a1;
    size_t v15 = v10;
    do
    {
      int v17 = *(unsigned __int8 *)v14++;
      int v16 = v17;
      int v18 = *v8++;
      if (v16 != v18) {
        return 0;
      }
    }
    while (--v15);
  }
  cstdlib_memset(__b, 0, 0x64uLL);
  uint64_t v19 = 0;
  do
  {
    int v20 = a1[v10 + v19];
    if ((v20 - 48) >= 0xA && v20 != 45)
    {
      unint64_t v21 = v10 + v19 + 1;
      if (!v19) {
        return 0;
      }
      goto LABEL_14;
    }
    __b[v19++] = v20;
  }
  while (v12 != v19);
  unint64_t v21 = v13;
  if (!v12) {
    return 0;
  }
LABEL_14:
  *a3 = cstdlib_atoi(__b);
  cstdlib_memset(__b, 0, 0x64uLL);
  if (v13 <= v21) {
    return 1;
  }
  size_t v23 = 0;
  while (1)
  {
    int v24 = a1[v21 + v23];
    if ((v24 - 48) >= 0xA && v24 != 45) {
      break;
    }
    __b[v23++] = v24;
    if (v13 - v21 == v23)
    {
      size_t v23 = v13 - v21;
      unint64_t v25 = v13;
      goto LABEL_21;
    }
  }
  unint64_t v25 = v21 + v23 + 1;
LABEL_21:
  if (!v23) {
    return 1;
  }
  *a4 = cstdlib_atoi(__b);
  cstdlib_memset(__b, 0, 0x64uLL);
  if (v13 <= v25) {
    return 2;
  }
  size_t v26 = 0;
  while (1)
  {
    int v27 = a1[v25 + v26];
    if ((v27 - 48) >= 0xA && v27 != 45) {
      break;
    }
    __b[v26++] = v27;
    if (v13 - v25 == v26)
    {
      size_t v26 = v13 - v25;
      break;
    }
  }
  if (!v26) {
    return 2;
  }
  *a5 = cstdlib_atoi(__b);
  return 3;
}

uint64_t wapiti_scanf_fmt_pair(const char *a1, char *__s, _DWORD *a3, _DWORD *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  size_t v8 = cstdlib_strlen(__s);
  size_t v9 = cstdlib_strlen(a1);
  if (v9 <= v8) {
    return 0;
  }
  size_t v10 = v9;
  cstdlib_memset(__b, 0, 0x64uLL);
  size_t v11 = 0;
  BOOL v12 = 1;
  do
  {
    int v13 = a1[v11];
    if ((v13 - 48) >= 0xA && v13 != 45)
    {
      if (!v11) {
        return 0;
      }
      goto LABEL_10;
    }
    __b[v11++] = v13;
    BOOL v12 = v11 < v10;
  }
  while (v10 != v11);
  size_t v11 = v10;
  if (!v10) {
    return 0;
  }
LABEL_10:
  *a3 = cstdlib_atoi(__b);
  if (v12 && v8 != 0)
  {
    uint64_t v14 = 0;
    while (a1[v11 + v14] == __s[v14])
    {
      if (++v14 >= v8) {
        goto LABEL_17;
      }
    }
    return 0;
  }
  uint64_t v14 = 0;
LABEL_17:
  size_t v16 = v14 + v11;
  cstdlib_memset(__b, 0, 0x64uLL);
  if (v16 >= v10) {
    return 1;
  }
  uint64_t v17 = 0;
  do
  {
    int v18 = a1[v16 + v17];
    if ((v18 - 48) >= 0xA && v18 != 45) {
      break;
    }
    __b[v17++] = v18;
  }
  while (v16 + v17 < v10);
  if (!v17) {
    return 1;
  }
  *a4 = cstdlib_atoi(__b);
  return 2;
}

uint64_t wapiti_scanf_pat_len(const char *a1, char *__s, _DWORD *a3, _DWORD *a4, size_t *a5)
{
  size_t v8 = __s;
  uint64_t v26 = *MEMORY[0x263EF8340];
  size_t v10 = cstdlib_strlen(__s);
  size_t v11 = cstdlib_strlen(a1);
  size_t v12 = v11 - v10;
  if (v11 <= v10) {
    return 0;
  }
  size_t v13 = v11;
  if (v10)
  {
    uint64_t v14 = a1;
    size_t v15 = v10;
    do
    {
      int v17 = *(unsigned __int8 *)v14++;
      int v16 = v17;
      int v18 = *v8++;
      if (v16 != v18) {
        return 0;
      }
    }
    while (--v15);
  }
  cstdlib_memset(__b, 0, 0x64uLL);
  uint64_t v19 = 0;
  do
  {
    int v20 = a1[v10 + v19];
    if ((v20 - 48) >= 0xA && v20 != 45)
    {
      unint64_t v21 = v10 + v19 + 1;
      if (!v19) {
        return 0;
      }
      goto LABEL_14;
    }
    __b[v19++] = v20;
  }
  while (v12 != v19);
  unint64_t v21 = v13;
  if (!v12) {
    return 0;
  }
LABEL_14:
  *a3 = cstdlib_atoi(__b);
  cstdlib_memset(__b, 0, 0x64uLL);
  if (v13 <= v21) {
    return 1;
  }
  size_t v23 = 0;
  while (1)
  {
    int v24 = a1[v21 + v23];
    if ((v24 - 48) >= 0xA && v24 != 45) {
      break;
    }
    __b[v23++] = v24;
    if (v13 - v21 == v23)
    {
      size_t v23 = v13 - v21;
      goto LABEL_21;
    }
  }
  size_t v13 = v21 + v23;
LABEL_21:
  if (!v23) {
    return 1;
  }
  *a4 = cstdlib_atoi(__b);
  *a5 = v13;
  return 2;
}

uint64_t tag_label(uint64_t a1, void *a2, unsigned int a3, uint64_t *a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unint64_t v190 = 0;
  v191[0] = 0;
  uint64_t v10 = 2585796618;
  int v189 = 0;
  if (!a4)
  {
    uint64_t v10 = 2585796615;
    if (a5) {
      *a5 = 0;
    }
    return v10;
  }
  size_t v11 = a4;
  uint64_t v186 = v9;
  *a4 = 0;
  if (!a5) {
    return 2585796615;
  }
  uint64_t v15 = a1;
  *a5 = 0;
  int v16 = *(uint64_t **)(a1 + 112);
  if (*(_DWORD *)(a1 + 36))
  {
    uint64_t v17 = rdr_readraw_qp(v16, a2, a3, (uint64_t *)v191);
    if ((v17 & 0x80000000) == 0)
    {
      if (v191[0])
      {
        uint64_t v18 = rdr_raw2seq_qp((uint64_t)v16, v191[0], *(_DWORD *)(v15 + 12) | (*(void *)(*(void *)(v15 + 112) + 56) != 0), (uint64_t *)&v190);
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_7;
        }
LABEL_21:
        LODWORD(v26) = 0;
        uint64_t v10 = v18;
        goto LABEL_244;
      }
      return 2585796615;
    }
    return v17;
  }
  uint64_t v17 = rdr_readraw(v16, a2, a3, (uint64_t *)v191);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  if (!v191[0]) {
    return 2585796615;
  }
  uint64_t v18 = rdr_raw2seq((uint64_t)v16, v191[0], *(_DWORD *)(v15 + 12) | (*(void *)(*(void *)(v15 + 112) + 56) != 0), (uint64_t *)&v190);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_7:
  uint64_t v170 = v11;
  uint64_t v173 = *v190;
  uint64_t v19 = v186;
  uint64_t v20 = heap_Alloc(*(void *)(v8 + 8), 4 * v186 * (unint64_t)v173);
  uint64_t v21 = heap_Alloc(*(void *)(v8 + 8), 4 * v186 * (unint64_t)v173);
  uint64_t v22 = heap_Alloc(*(void *)(v8 + 8), 4 * v186);
  uint64_t v23 = v22;
  uint64_t v180 = v20;
  uint64_t v174 = v21;
  if (v20) {
    BOOL v24 = v21 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (v24 || v22 == 0)
  {
    size_t v11 = v170;
    LODWORD(v26) = v173;
    goto LABEL_238;
  }
  unint64_t v162 = a5;
  uint64_t v163 = (_DWORD *)v22;
  uint64_t v187 = v8;
  uint64_t v188 = v15;
  if (a6 && a7)
  {
    uint64_t v27 = *(unsigned int *)(v15 + 44);
    uint64_t v28 = heap_Calloc(*(void **)(v8 + 8), 1, 4 * v27 * a3);
    *((void *)v190 + 2) = v28;
    if (!v28)
    {
      size_t v11 = v170;
      LODWORD(v26) = v173;
      uint64_t v23 = (uint64_t)v163;
      goto LABEL_239;
    }
    if (*(_DWORD *)(v15 + 36))
    {
      if (a3)
      {
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          if (*(_DWORD *)(a7 + 4 * v30))
          {
            unint64_t v31 = 0;
            int v32 = 0;
            do
            {
              qp_str2id(v187, *(void *)(*(void *)(v188 + 112) + 40), *(char **)(*(void *)(a6 + 8 * v30) + 8 * v31), &v189, 0);
              if (v189 != -1)
              {
                *(_DWORD *)(*((void *)v190 + 2) + 4 * (v189 + v27 * v30)) = 1;
                ++v32;
              }
              ++v31;
            }
            while (v31 < *(unsigned int *)(a7 + 4 * v30));
          }
          else
          {
            int v32 = 0;
          }
          uint64_t v19 = v186;
          if (!v32 && v27)
          {
            uint64_t v33 = *((void *)v190 + 2);
            uint64_t v34 = v27;
            unsigned int v35 = v29;
            do
            {
              *(_DWORD *)(v33 + 4 * v35++) = 1;
              --v34;
            }
            while (v34);
          }
          ++v30;
          v29 += v27;
          uint64_t v15 = v188;
        }
        while (v30 != a3);
      }
    }
    else if (a3)
    {
      unsigned int v36 = 0;
      uint64_t v37 = 0;
      do
      {
        if (*(_DWORD *)(a7 + 4 * v37))
        {
          unint64_t v38 = 0;
          int v39 = 0;
          do
          {
            qrk_str2id(v187, *(uint64_t **)(*(void *)(v188 + 112) + 40), *(char **)(*(void *)(a6 + 8 * v37) + 8 * v38), (unsigned int *)&v189, 0);
            if (v189 != -1)
            {
              *(_DWORD *)(*((void *)v190 + 2) + 4 * (v189 + v27 * v37)) = 1;
              ++v39;
            }
            ++v38;
          }
          while (v38 < *(unsigned int *)(a7 + 4 * v37));
        }
        else
        {
          int v39 = 0;
        }
        uint64_t v19 = v186;
        if (!v39 && v27)
        {
          uint64_t v40 = *((void *)v190 + 2);
          uint64_t v41 = v27;
          unsigned int v42 = v36;
          do
          {
            *(_DWORD *)(v40 + 4 * v42++) = 1;
            --v41;
          }
          while (v41);
        }
        ++v37;
        v36 += v27;
        uint64_t v15 = v188;
      }
      while (v37 != a3);
    }
  }
  unsigned int v43 = v190;
  uint64_t v44 = *(void *)v15;
  uint64_t v45 = *(unsigned int *)(v15 + 44);
  uint64_t v46 = *v190;
  uint64_t v47 = (unsigned int *)xvm_new(*(void *)v15, (int)v45 * (int)v45 * (int)v46);
  uint64_t v48 = *(void *)(v44 + 8);
  if (v19 != 1)
  {
    uint64_t v61 = heap_Alloc(v48, 4 * v186 * v45 * v46);
    uint64_t v62 = heap_Alloc(*(void *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    uint64_t v63 = heap_Alloc(*(void *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    uint64_t v64 = v63;
    if (v47) {
      BOOL v65 = v61 == 0;
    }
    else {
      BOOL v65 = 1;
    }
    if (v65 || v62 == 0 || v63 == 0)
    {
      int v68 = 0;
      uint64_t v10 = 2585796618;
      size_t v11 = v170;
      goto LABEL_198;
    }
    uint64_t v185 = (_DWORD *)v63;
    unsigned int v172 = v46;
    int v184 = *(_DWORD *)(v15 + 40);
    if (v184 == 1)
    {
      tag_memmsc(v15, v43, v47);
      int v69 = 1;
    }
    else
    {
      tag_expsc(v15, v43, (uint64_t)v47);
      int v69 = 0;
    }
    uint64_t v93 = v180;
    uint64_t v94 = v174;
    if (*(void *)(*(void *)(v15 + 112) + 56)) {
      tag_forced(v15, v43, (uint64_t)v47, v69);
    }
    unint64_t v95 = v163;
    unsigned int v96 = v172;
    if (v45)
    {
      unsigned int v97 = 0;
      uint64_t v98 = 0;
      if (v19 <= 1) {
        int v99 = 1;
      }
      else {
        int v99 = v19;
      }
      do
      {
        *(_DWORD *)(v62 + 4 * v97) = v47[v98];
        if (v19 >= 2)
        {
          int v100 = 1;
          do
            *(_DWORD *)(v62 + 4 * (v97 + v100++)) = 0x80000000;
          while (v19 != v100);
        }
        ++v98;
        v97 += v99;
      }
      while (v98 != v45);
    }
    if (v172 >= 2)
    {
      uint64_t v101 = (v45 * v19);
      uint64_t v164 = v101;
      uint64_t v165 = 4 * v101;
      int v161 = 1;
      unsigned int v160 = v45 * v19;
      uint64_t v169 = v44;
      while (1)
      {
        uint64_t v102 = (int *)v62;
        uint64_t v103 = v185;
        uint64_t v104 = v101;
        if (v101)
        {
          do
          {
            int v105 = *v102++;
            *v103++ = v105;
            --v104;
          }
          while (v104);
        }
        if (v45) {
          break;
        }
LABEL_160:
        v160 += v101;
        unsigned int v96 = v172;
        ++v161;
        uint64_t v15 = v188;
        uint64_t v93 = v180;
        uint64_t v94 = v174;
        unint64_t v95 = v163;
        if (v161 == v172) {
          goto LABEL_161;
        }
      }
      uint64_t v182 = 0;
      int v167 = v161 * v45;
      unsigned int v179 = v160;
      while (1)
      {
        uint64_t v106 = heap_Alloc(*(void *)(v44 + 8), v165);
        if (!v106) {
          break;
        }
        uint64_t v107 = v106;
        uint64_t v108 = 0;
        int v109 = 0;
        uint64_t v110 = v45;
        do
        {
          uint64_t v111 = v110;
          while (!v19)
          {
            if (!--v111)
            {
              unsigned int v120 = 0;
              unint64_t v121 = (unsigned int *)v61;
              goto LABEL_146;
            }
          }
          int v112 = v19;
          int v113 = 0;
          uint64_t v177 = v108;
          uint64_t v114 = (v182 + (v167 + v108) * v45);
          int v175 = v109 + v112;
          do
          {
            uint64_t v115 = (v109 + v113);
            int v116 = v185[v115];
            *(_DWORD *)(v107 + 4 * v115) = v116;
            int v117 = v47[v114];
            if (v184 == 1) {
              int v118 = fix16_mul(v116, v117);
            }
            else {
              int v118 = fix16_add(v116, v117);
            }
            *(_DWORD *)(v107 + 4 * v115) = v118;
            ++v113;
          }
          while (v186 != v113);
          uint64_t v108 = v177 + 1;
          --v110;
          int v109 = v175;
          uint64_t v19 = v186;
          uint64_t v44 = v169;
          uint64_t v101 = v164;
        }
        while (v177 + 1 != v45);
        uint64_t v119 = 0;
        unint64_t v121 = (unsigned int *)(v61 + 4 * ((v167 + v182) * v186));
        do
        {
          *(_DWORD *)(v61 + 4 * v179 + 4 * v119) = v119;
          ++v119;
        }
        while (v186 != v119);
        unsigned int v120 = v186 * v182;
LABEL_146:
        uint64_t v122 = v19;
        if (v101 > v19)
        {
          do
          {
            if (v19 < 2)
            {
              uint64_t v123 = 0;
            }
            else
            {
              uint64_t v123 = 0;
              for (uint64_t i = 1; i != v19; ++i)
              {
                if (*(_DWORD *)(v107 + 4 * v121[i]) < *(_DWORD *)(v107 + 4 * v121[v123])) {
                  uint64_t v123 = i;
                }
              }
            }
            if (*(_DWORD *)(v107 + 4 * v122) > *(_DWORD *)(v107 + 4 * v121[v123])) {
              v121[v123] = v122;
            }
            ++v122;
          }
          while (v122 != v101);
        }
        uint64_t v125 = v19;
        if (v19)
        {
          do
          {
            unsigned int v126 = *v121++;
            *(_DWORD *)(v62 + 4 * v120++) = *(_DWORD *)(v107 + 4 * v126);
            --v125;
          }
          while (v125);
        }
        heap_Free(*(void **)(v44 + 8), v107);
        v179 += v19;
        if (++v182 == v45) {
          goto LABEL_160;
        }
      }
      int v68 = 0;
      uint64_t v10 = 2585796618;
      size_t v11 = v170;
      uint64_t v15 = v188;
LABEL_197:
      uint64_t v64 = (uint64_t)v185;
LABEL_198:
      if (v64) {
        heap_Free(*(void **)(v44 + 8), v64);
      }
      uint64_t v8 = v187;
      if (v62) {
        heap_Free(*(void **)(v44 + 8), v62);
      }
      if (v61) {
        heap_Free(*(void **)(v44 + 8), v61);
      }
      if (v47) {
        xvm_free(v44, (uint64_t)v47);
      }
      uint64_t v26 = v173;
      uint64_t v23 = (uint64_t)v163;
      if (!v68) {
        goto LABEL_238;
      }
      goto LABEL_207;
    }
LABEL_161:
    if (!v19) {
      goto LABEL_177;
    }
    uint64_t v127 = 0;
    uint64_t v128 = (v45 * v19);
LABEL_163:
    if (v128 < 2)
    {
      unsigned int v129 = 0;
    }
    else
    {
      unsigned int v129 = 0;
      for (uint64_t j = 1; j != v128; ++j)
      {
        if (*(_DWORD *)(v62 + 4 * j) > *(_DWORD *)(v62 + 4 * v129)) {
          unsigned int v129 = j;
        }
      }
    }
    v95[v127] = *(_DWORD *)(v62 + 4 * v129);
    *(_DWORD *)(v62 + 4 * v129) = 0x80000000;
    for (k = v96; ; unsigned int v129 = *(_DWORD *)(v61 + 4 * (v129 + k * v45 * v19)))
    {
      if (k == 1)
      {
        unsigned int k = 0;
        unsigned int v132 = 0;
      }
      else
      {
        if (!k)
        {
          if (++v127 == v19)
          {
LABEL_177:
            uint64_t v10 = 0;
            int v68 = 1;
            size_t v11 = v170;
            goto LABEL_197;
          }
          goto LABEL_163;
        }
        unsigned int v132 = *(_DWORD *)(v61 + 4 * (v129 + --k * v128)) / v19;
      }
      unsigned int v133 = v127 + k * v19;
      *(_DWORD *)(v93 + 4 * v133) = v129 / v19;
      *(_DWORD *)(v94 + 4 * v133) = v47[v129 / v19 + (v132 + k * v45) * v45];
    }
  }
  unint64_t v49 = v43;
  uint64_t v50 = heap_Alloc(v48, 4 * v45 * v46);
  uint64_t v51 = heap_Alloc(*(void *)(v44 + 8), 4 * v45);
  uint64_t v52 = heap_Alloc(*(void *)(v44 + 8), 4 * v45);
  uint64_t v53 = v51;
  uint64_t v54 = v52;
  if (v47) {
    BOOL v55 = v50 == 0;
  }
  else {
    BOOL v55 = 1;
  }
  BOOL v57 = v55 || v51 == 0 || v52 == 0;
  char v58 = v57;
  uint64_t v10 = 2585796618;
  unsigned __int16 v183 = (_DWORD *)v53;
  if (v57) {
    goto LABEL_186;
  }
  uint64_t v171 = v46;
  int v59 = *(_DWORD *)(v188 + 40);
  if (v59 == 1)
  {
    tag_memmsc(v188, v49, v47);
    int v60 = 1;
  }
  else
  {
    tag_expsc(v188, v49, (uint64_t)v47);
    int v60 = 0;
  }
  if (*(void *)(*(void *)(v188 + 112) + 56)) {
    tag_forced(v188, v49, (uint64_t)v47, v60);
  }
  char v166 = v58;
  uint64_t v168 = v44;
  uint64_t v53 = (uint64_t)v183;
  if (v45)
  {
    uint64_t v70 = v47;
    unint64_t v71 = v183;
    uint64_t v72 = v45;
    do
    {
      int v73 = *v70++;
      *v71++ = v73;
      --v72;
    }
    while (v72);
  }
  uint64_t v74 = v171;
  if (v171 >= 2)
  {
    int v178 = 1;
    int v176 = v45 * v45;
    uint64_t v181 = v50;
    do
    {
      uint64_t v75 = (int *)v53;
      uint64_t v76 = (_DWORD *)v54;
      uint64_t v77 = v45;
      if (v45)
      {
        do
        {
          int v78 = *v75++;
          *v76++ = v78;
          --v77;
        }
        while (v77);
        uint64_t v79 = 0;
        int v80 = v176;
        do
        {
          uint64_t v81 = 0;
          int v82 = 0;
          signed int v83 = 0x80000000;
          int v84 = v80;
          do
          {
            int v85 = *(_DWORD *)(v54 + 4 * v81);
            int v86 = v47[v84];
            if (v59 == 1) {
              signed int v87 = fix16_mul(v85, v86);
            }
            else {
              signed int v87 = fix16_add(v85, v86);
            }
            if (v87 > v83)
            {
              signed int v83 = v87;
              int v82 = v81;
            }
            ++v81;
            v84 += v45;
          }
          while (v45 != v81);
          uint64_t v53 = (uint64_t)v183;
          *(_DWORD *)(v181 + 4 * (v178 * v45 + v79)) = v82;
          uint64_t v50 = v181;
          v183[v79++] = v83;
          ++v80;
        }
        while (v79 != v45);
      }
      v176 += v45 * v45;
      uint64_t v74 = v171;
      ++v178;
    }
    while (v178 != v171);
  }
  if (v45 < 2)
  {
    unsigned int v88 = 0;
    uint64_t v19 = v186;
    uint64_t v90 = v180;
    uint64_t v91 = v174;
    uint64_t v92 = v163;
    uint64_t v44 = v168;
    char v58 = v166;
  }
  else
  {
    unsigned int v88 = 0;
    uint64_t v89 = 1;
    uint64_t v19 = v186;
    uint64_t v90 = v180;
    uint64_t v91 = v174;
    uint64_t v92 = v163;
    uint64_t v44 = v168;
    char v58 = v166;
    do
    {
      if (*(_DWORD *)(v53 + 4 * v89) > *(_DWORD *)(v53 + 4 * v88)) {
        unsigned int v88 = v89;
      }
      ++v89;
    }
    while (v45 != v89);
  }
  _DWORD *v92 = *(_DWORD *)(v53 + 4 * v88);
  while (1)
  {
    int v134 = v74 - 1;
    if (v74 != 1) {
      break;
    }
    int v135 = 0;
    uint64_t v74 = 0;
    unsigned int v136 = 0;
LABEL_184:
    *(_DWORD *)(v90 + 4 * v74) = v88;
    *(_DWORD *)(v91 + 4 * v74) = v47[v88 + (v136 + v135) * v45];
    unsigned int v88 = v136;
  }
  if (v74)
  {
    int v135 = v134 * v45;
    unsigned int v136 = *(_DWORD *)(v50 + 4 * (v134 * v45 + v88));
    uint64_t v74 = (v74 - 1);
    goto LABEL_184;
  }
  uint64_t v10 = v74;
LABEL_186:
  if (v54)
  {
    heap_Free(*(void **)(v44 + 8), v54);
    uint64_t v53 = (uint64_t)v183;
  }
  char v137 = v58;
  size_t v11 = v170;
  if (v53) {
    heap_Free(*(void **)(v44 + 8), v53);
  }
  uint64_t v8 = v187;
  uint64_t v15 = v188;
  if (v50) {
    heap_Free(*(void **)(v44 + 8), v50);
  }
  if (v47) {
    xvm_free(v44, (uint64_t)v47);
  }
  uint64_t v26 = v173;
  uint64_t v23 = (uint64_t)v163;
  if (v137) {
    goto LABEL_238;
  }
LABEL_207:
  uint64_t v138 = heap_Calloc(*(void **)(v8 + 8), 8, v26);
  *size_t v11 = v138;
  if (!v138)
  {
LABEL_235:
    uint64_t v10 = 2585796618;
    goto LABEL_237;
  }
  uint64_t v139 = v180;
  if (!v26)
  {
LABEL_234:
    uint64_t v10 = 0;
    *unint64_t v162 = v26;
    goto LABEL_237;
  }
  uint64_t v140 = 0;
  uint64_t v141 = (3 * v19 + 1);
  while (2)
  {
    unsigned int v142 = (char *)heap_Alloc(*(void *)(v8 + 8), v141);
    if (!v142) {
      goto LABEL_235;
    }
    unsigned int v143 = v142;
    *unsigned int v142 = 0;
    if (*(_DWORD *)(v15 + 36))
    {
      if (v19)
      {
        for (uint64_t m = 0; m != v19; ++m)
        {
          uint64_t v145 = (const char *)qp_id2str(v187, *(void *)(*(void *)(v188 + 112) + 40), *(_DWORD *)(v139 + 4 * (v19 * v140 + m)));
          int v146 = cstdlib_strlen(v143);
          unsigned int v147 = cstdlib_strlen(v145);
          unsigned int v148 = 3 * v19 + 1;
          do
          {
            unsigned int v149 = v148;
            v148 *= 2;
          }
          while (v149 < v146 + v147 + 2);
          if (v149 <= v141)
          {
            uint64_t v150 = (char *)v143;
          }
          else
          {
            uint64_t v150 = (char *)heap_Realloc(*(uint64_t **)(v187 + 8), (uint64_t)v143, v149);
            if (!v150) {
              goto LABEL_236;
            }
          }
          cstdlib_strncat(v150, v145, v147);
          cstdlib_strcat(v150, " ");
          unsigned int v143 = v150;
          uint64_t v139 = v180;
        }
LABEL_233:
        *(void *)(*v11 + 8 * v140++) = v150;
        LODWORD(v26) = v173;
        uint64_t v8 = v187;
        uint64_t v15 = v188;
        if (v140 == v173) {
          goto LABEL_234;
        }
        continue;
      }
LABEL_232:
      uint64_t v150 = v142;
      goto LABEL_233;
    }
    break;
  }
  if (!v19) {
    goto LABEL_232;
  }
  uint64_t v151 = 0;
  while (2)
  {
    int v152 = (const char *)qrk_id2str(v187, *(void *)(*(void *)(v188 + 112) + 40), *(_DWORD *)(v139 + 4 * (v19 * v140 + v151)));
    int v153 = cstdlib_strlen(v143);
    unsigned int v154 = cstdlib_strlen(v152);
    unsigned int v155 = 3 * v19 + 1;
    do
    {
      unsigned int v156 = v155;
      v155 *= 2;
    }
    while (v156 < v153 + v154 + 2);
    if (v156 <= v141)
    {
      uint64_t v150 = (char *)v143;
LABEL_230:
      cstdlib_strncat(v150, v152, v154);
      cstdlib_strcat(v150, " ");
      ++v151;
      unsigned int v143 = v150;
      uint64_t v139 = v180;
      if (v151 == v19) {
        goto LABEL_233;
      }
      continue;
    }
    break;
  }
  uint64_t v150 = (char *)heap_Realloc(*(uint64_t **)(v187 + 8), (uint64_t)v143, v156);
  if (v150) {
    goto LABEL_230;
  }
LABEL_236:
  uint64_t v8 = v187;
  heap_Free(*(void **)(v187 + 8), (uint64_t)v143);
  uint64_t v10 = 2585796618;
  LODWORD(v26) = v173;
LABEL_237:
  uint64_t v23 = (uint64_t)v163;
LABEL_238:
  if (v23) {
LABEL_239:
  }
    heap_Free(*(void **)(v8 + 8), v23);
  if (v174) {
    heap_Free(*(void **)(v8 + 8), v174);
  }
  if (v180) {
    heap_Free(*(void **)(v8 + 8), v180);
  }
LABEL_244:
  if (v190) {
    rdr_freeseq(v8, (uint64_t)v190);
  }
  if (v191[0]) {
    rdr_freeraw(v8, v191[0]);
  }
  if ((v10 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v157 = *v11;
  if (*v11)
  {
    if (v26)
    {
      uint64_t v158 = 0;
      do
      {
        heap_Free(*(void **)(v8 + 8), *(void *)(*v11 + v158));
        v158 += 8;
      }
      while (8 * v26 != v158);
      uint64_t v157 = *v11;
    }
    heap_Free(*(void **)(v8 + 8), v157);
    *size_t v11 = 0;
  }
  return v10;
}

uint64_t tag_label_sparse(uint64_t a1, void *a2, unsigned int a3, uint64_t *a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unint64_t v190 = 0;
  v191[0] = 0;
  uint64_t v10 = 2585796618;
  int v189 = 0;
  if (!a4)
  {
    uint64_t v10 = 2585796615;
    if (a5) {
      *a5 = 0;
    }
    return v10;
  }
  size_t v11 = a4;
  uint64_t v186 = v9;
  *a4 = 0;
  if (!a5) {
    return 2585796615;
  }
  uint64_t v15 = a1;
  *a5 = 0;
  int v16 = *(uint64_t **)(a1 + 112);
  if (*(_DWORD *)(a1 + 36))
  {
    uint64_t v17 = rdr_readraw_qp(v16, a2, a3, (uint64_t *)v191);
    if ((v17 & 0x80000000) == 0)
    {
      if (v191[0])
      {
        uint64_t v18 = rdr_raw2seq_qp((uint64_t)v16, v191[0], *(_DWORD *)(v15 + 12) | (*(void *)(*(void *)(v15 + 112) + 56) != 0), (uint64_t *)&v190);
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_7;
        }
LABEL_21:
        LODWORD(v26) = 0;
        uint64_t v10 = v18;
        goto LABEL_244;
      }
      return 2585796615;
    }
    return v17;
  }
  uint64_t v17 = rdr_readraw(v16, a2, a3, (uint64_t *)v191);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  if (!v191[0]) {
    return 2585796615;
  }
  uint64_t v18 = rdr_raw2seq((uint64_t)v16, v191[0], *(_DWORD *)(v15 + 12) | (*(void *)(*(void *)(v15 + 112) + 56) != 0), (uint64_t *)&v190);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_7:
  uint64_t v170 = v11;
  uint64_t v173 = *v190;
  uint64_t v19 = v186;
  uint64_t v20 = heap_Alloc(*(void *)(v8 + 8), 4 * v186 * (unint64_t)v173);
  uint64_t v21 = heap_Alloc(*(void *)(v8 + 8), 4 * v186 * (unint64_t)v173);
  uint64_t v22 = heap_Alloc(*(void *)(v8 + 8), 4 * v186);
  uint64_t v23 = v22;
  uint64_t v180 = v20;
  uint64_t v174 = v21;
  if (v20) {
    BOOL v24 = v21 == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (v24 || v22 == 0)
  {
    size_t v11 = v170;
    LODWORD(v26) = v173;
    goto LABEL_238;
  }
  unint64_t v162 = a5;
  uint64_t v163 = (_DWORD *)v22;
  uint64_t v187 = v8;
  uint64_t v188 = v15;
  if (a6 && a7)
  {
    uint64_t v27 = *(unsigned int *)(v15 + 44);
    uint64_t v28 = heap_Calloc(*(void **)(v8 + 8), 1, 4 * v27 * a3);
    *((void *)v190 + 2) = v28;
    if (!v28)
    {
      size_t v11 = v170;
      LODWORD(v26) = v173;
      uint64_t v23 = (uint64_t)v163;
      goto LABEL_239;
    }
    if (*(_DWORD *)(v15 + 36))
    {
      if (a3)
      {
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          if (*(_DWORD *)(a7 + 4 * v30))
          {
            unint64_t v31 = 0;
            int v32 = 0;
            do
            {
              qp_str2id(v187, *(void *)(*(void *)(v188 + 112) + 40), *(char **)(*(void *)(a6 + 8 * v30) + 8 * v31), &v189, 0);
              if (v189 != -1)
              {
                *(_DWORD *)(*((void *)v190 + 2) + 4 * (v189 + v27 * v30)) = 1;
                ++v32;
              }
              ++v31;
            }
            while (v31 < *(unsigned int *)(a7 + 4 * v30));
          }
          else
          {
            int v32 = 0;
          }
          uint64_t v19 = v186;
          if (!v32 && v27)
          {
            uint64_t v33 = *((void *)v190 + 2);
            uint64_t v34 = v27;
            unsigned int v35 = v29;
            do
            {
              *(_DWORD *)(v33 + 4 * v35++) = 1;
              --v34;
            }
            while (v34);
          }
          ++v30;
          v29 += v27;
          uint64_t v15 = v188;
        }
        while (v30 != a3);
      }
    }
    else if (a3)
    {
      unsigned int v36 = 0;
      uint64_t v37 = 0;
      do
      {
        if (*(_DWORD *)(a7 + 4 * v37))
        {
          unint64_t v38 = 0;
          int v39 = 0;
          do
          {
            qrk_str2id(v187, *(uint64_t **)(*(void *)(v188 + 112) + 40), *(char **)(*(void *)(a6 + 8 * v37) + 8 * v38), (unsigned int *)&v189, 0);
            if (v189 != -1)
            {
              *(_DWORD *)(*((void *)v190 + 2) + 4 * (v189 + v27 * v37)) = 1;
              ++v39;
            }
            ++v38;
          }
          while (v38 < *(unsigned int *)(a7 + 4 * v37));
        }
        else
        {
          int v39 = 0;
        }
        uint64_t v19 = v186;
        if (!v39 && v27)
        {
          uint64_t v40 = *((void *)v190 + 2);
          uint64_t v41 = v27;
          unsigned int v42 = v36;
          do
          {
            *(_DWORD *)(v40 + 4 * v42++) = 1;
            --v41;
          }
          while (v41);
        }
        ++v37;
        v36 += v27;
        uint64_t v15 = v188;
      }
      while (v37 != a3);
    }
  }
  unsigned int v43 = v190;
  uint64_t v44 = *(void *)v15;
  uint64_t v45 = *(unsigned int *)(v15 + 44);
  uint64_t v46 = *v190;
  uint64_t v47 = (unsigned int *)xvm_new(*(void *)v15, (int)v45 * (int)v45 * (int)v46);
  uint64_t v48 = *(void *)(v44 + 8);
  if (v19 != 1)
  {
    uint64_t v61 = heap_Alloc(v48, 4 * v186 * v45 * v46);
    uint64_t v62 = heap_Alloc(*(void *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    uint64_t v63 = heap_Alloc(*(void *)(v44 + 8), 4 * v45 * (unint64_t)v19);
    uint64_t v64 = v63;
    if (v47) {
      BOOL v65 = v61 == 0;
    }
    else {
      BOOL v65 = 1;
    }
    if (v65 || v62 == 0 || v63 == 0)
    {
      int v68 = 0;
      uint64_t v10 = 2585796618;
      size_t v11 = v170;
      goto LABEL_198;
    }
    uint64_t v185 = (_DWORD *)v63;
    unsigned int v172 = v46;
    int v184 = *(_DWORD *)(v15 + 40);
    if (v184 == 1)
    {
      tag_memmsc_sparse(v15, v43, v47);
      int v69 = 1;
    }
    else
    {
      tag_expsc_sparse(v15, v43, (uint64_t)v47);
      int v69 = 0;
    }
    uint64_t v93 = v180;
    uint64_t v94 = v174;
    if (*(void *)(*(void *)(v15 + 112) + 56)) {
      tag_forced(v15, v43, (uint64_t)v47, v69);
    }
    unint64_t v95 = v163;
    unsigned int v96 = v172;
    if (v45)
    {
      unsigned int v97 = 0;
      uint64_t v98 = 0;
      if (v19 <= 1) {
        int v99 = 1;
      }
      else {
        int v99 = v19;
      }
      do
      {
        *(_DWORD *)(v62 + 4 * v97) = v47[v98];
        if (v19 >= 2)
        {
          int v100 = 1;
          do
            *(_DWORD *)(v62 + 4 * (v97 + v100++)) = 0x80000000;
          while (v19 != v100);
        }
        ++v98;
        v97 += v99;
      }
      while (v98 != v45);
    }
    if (v172 >= 2)
    {
      uint64_t v101 = (v45 * v19);
      uint64_t v164 = v101;
      uint64_t v165 = 4 * v101;
      int v161 = 1;
      unsigned int v160 = v45 * v19;
      uint64_t v169 = v44;
      while (1)
      {
        uint64_t v102 = (int *)v62;
        uint64_t v103 = v185;
        uint64_t v104 = v101;
        if (v101)
        {
          do
          {
            int v105 = *v102++;
            *v103++ = v105;
            --v104;
          }
          while (v104);
        }
        if (v45) {
          break;
        }
LABEL_160:
        v160 += v101;
        unsigned int v96 = v172;
        ++v161;
        uint64_t v15 = v188;
        uint64_t v93 = v180;
        uint64_t v94 = v174;
        unint64_t v95 = v163;
        if (v161 == v172) {
          goto LABEL_161;
        }
      }
      uint64_t v182 = 0;
      int v167 = v161 * v45;
      unsigned int v179 = v160;
      while (1)
      {
        uint64_t v106 = heap_Alloc(*(void *)(v44 + 8), v165);
        if (!v106) {
          break;
        }
        uint64_t v107 = v106;
        uint64_t v108 = 0;
        int v109 = 0;
        uint64_t v110 = v45;
        do
        {
          uint64_t v111 = v110;
          while (!v19)
          {
            if (!--v111)
            {
              unsigned int v120 = 0;
              unint64_t v121 = (unsigned int *)v61;
              goto LABEL_146;
            }
          }
          int v112 = v19;
          int v113 = 0;
          uint64_t v177 = v108;
          uint64_t v114 = (v182 + (v167 + v108) * v45);
          int v175 = v109 + v112;
          do
          {
            uint64_t v115 = (v109 + v113);
            int v116 = v185[v115];
            *(_DWORD *)(v107 + 4 * v115) = v116;
            int v117 = v47[v114];
            if (v184 == 1) {
              int v118 = fix16_mul(v116, v117);
            }
            else {
              int v118 = fix16_add(v116, v117);
            }
            *(_DWORD *)(v107 + 4 * v115) = v118;
            ++v113;
          }
          while (v186 != v113);
          uint64_t v108 = v177 + 1;
          --v110;
          int v109 = v175;
          uint64_t v19 = v186;
          uint64_t v44 = v169;
          uint64_t v101 = v164;
        }
        while (v177 + 1 != v45);
        uint64_t v119 = 0;
        unint64_t v121 = (unsigned int *)(v61 + 4 * ((v167 + v182) * v186));
        do
        {
          *(_DWORD *)(v61 + 4 * v179 + 4 * v119) = v119;
          ++v119;
        }
        while (v186 != v119);
        unsigned int v120 = v186 * v182;
LABEL_146:
        uint64_t v122 = v19;
        if (v101 > v19)
        {
          do
          {
            if (v19 < 2)
            {
              uint64_t v123 = 0;
            }
            else
            {
              uint64_t v123 = 0;
              for (uint64_t i = 1; i != v19; ++i)
              {
                if (*(_DWORD *)(v107 + 4 * v121[i]) < *(_DWORD *)(v107 + 4 * v121[v123])) {
                  uint64_t v123 = i;
                }
              }
            }
            if (*(_DWORD *)(v107 + 4 * v122) > *(_DWORD *)(v107 + 4 * v121[v123])) {
              v121[v123] = v122;
            }
            ++v122;
          }
          while (v122 != v101);
        }
        uint64_t v125 = v19;
        if (v19)
        {
          do
          {
            unsigned int v126 = *v121++;
            *(_DWORD *)(v62 + 4 * v120++) = *(_DWORD *)(v107 + 4 * v126);
            --v125;
          }
          while (v125);
        }
        heap_Free(*(void **)(v44 + 8), v107);
        v179 += v19;
        if (++v182 == v45) {
          goto LABEL_160;
        }
      }
      int v68 = 0;
      uint64_t v10 = 2585796618;
      size_t v11 = v170;
      uint64_t v15 = v188;
LABEL_197:
      uint64_t v64 = (uint64_t)v185;
LABEL_198:
      if (v64) {
        heap_Free(*(void **)(v44 + 8), v64);
      }
      uint64_t v8 = v187;
      if (v62) {
        heap_Free(*(void **)(v44 + 8), v62);
      }
      if (v61) {
        heap_Free(*(void **)(v44 + 8), v61);
      }
      if (v47) {
        xvm_free(v44, (uint64_t)v47);
      }
      uint64_t v26 = v173;
      uint64_t v23 = (uint64_t)v163;
      if (!v68) {
        goto LABEL_238;
      }
      goto LABEL_207;
    }
LABEL_161:
    if (!v19) {
      goto LABEL_177;
    }
    uint64_t v127 = 0;
    uint64_t v128 = (v45 * v19);
LABEL_163:
    if (v128 < 2)
    {
      unsigned int v129 = 0;
    }
    else
    {
      unsigned int v129 = 0;
      for (uint64_t j = 1; j != v128; ++j)
      {
        if (*(_DWORD *)(v62 + 4 * j) > *(_DWORD *)(v62 + 4 * v129)) {
          unsigned int v129 = j;
        }
      }
    }
    v95[v127] = *(_DWORD *)(v62 + 4 * v129);
    *(_DWORD *)(v62 + 4 * v129) = 0x80000000;
    for (k = v96; ; unsigned int v129 = *(_DWORD *)(v61 + 4 * (v129 + k * v45 * v19)))
    {
      if (k == 1)
      {
        unsigned int k = 0;
        unsigned int v132 = 0;
      }
      else
      {
        if (!k)
        {
          if (++v127 == v19)
          {
LABEL_177:
            uint64_t v10 = 0;
            int v68 = 1;
            size_t v11 = v170;
            goto LABEL_197;
          }
          goto LABEL_163;
        }
        unsigned int v132 = *(_DWORD *)(v61 + 4 * (v129 + --k * v128)) / v19;
      }
      unsigned int v133 = v127 + k * v19;
      *(_DWORD *)(v93 + 4 * v133) = v129 / v19;
      *(_DWORD *)(v94 + 4 * v133) = v47[v129 / v19 + (v132 + k * v45) * v45];
    }
  }
  unint64_t v49 = v43;
  uint64_t v50 = heap_Alloc(v48, 4 * v45 * v46);
  uint64_t v51 = heap_Alloc(*(void *)(v44 + 8), 4 * v45);
  uint64_t v52 = heap_Alloc(*(void *)(v44 + 8), 4 * v45);
  uint64_t v53 = v51;
  uint64_t v54 = v52;
  if (v47) {
    BOOL v55 = v50 == 0;
  }
  else {
    BOOL v55 = 1;
  }
  BOOL v57 = v55 || v51 == 0 || v52 == 0;
  char v58 = v57;
  uint64_t v10 = 2585796618;
  unsigned __int16 v183 = (_DWORD *)v53;
  if (v57) {
    goto LABEL_186;
  }
  uint64_t v171 = v46;
  int v59 = *(_DWORD *)(v188 + 40);
  if (v59 == 1)
  {
    tag_memmsc_sparse(v188, v49, v47);
    int v60 = 1;
  }
  else
  {
    tag_expsc_sparse(v188, v49, (uint64_t)v47);
    int v60 = 0;
  }
  if (*(void *)(*(void *)(v188 + 112) + 56)) {
    tag_forced(v188, v49, (uint64_t)v47, v60);
  }
  char v166 = v58;
  uint64_t v168 = v44;
  uint64_t v53 = (uint64_t)v183;
  if (v45)
  {
    uint64_t v70 = v47;
    unint64_t v71 = v183;
    uint64_t v72 = v45;
    do
    {
      int v73 = *v70++;
      *v71++ = v73;
      --v72;
    }
    while (v72);
  }
  uint64_t v74 = v171;
  if (v171 >= 2)
  {
    int v178 = 1;
    int v176 = v45 * v45;
    uint64_t v181 = v50;
    do
    {
      uint64_t v75 = (int *)v53;
      uint64_t v76 = (_DWORD *)v54;
      uint64_t v77 = v45;
      if (v45)
      {
        do
        {
          int v78 = *v75++;
          *v76++ = v78;
          --v77;
        }
        while (v77);
        uint64_t v79 = 0;
        int v80 = v176;
        do
        {
          uint64_t v81 = 0;
          int v82 = 0;
          signed int v83 = 0x80000000;
          int v84 = v80;
          do
          {
            int v85 = *(_DWORD *)(v54 + 4 * v81);
            int v86 = v47[v84];
            if (v59 == 1) {
              signed int v87 = fix16_mul(v85, v86);
            }
            else {
              signed int v87 = fix16_add(v85, v86);
            }
            if (v87 > v83)
            {
              signed int v83 = v87;
              int v82 = v81;
            }
            ++v81;
            v84 += v45;
          }
          while (v45 != v81);
          uint64_t v53 = (uint64_t)v183;
          *(_DWORD *)(v181 + 4 * (v178 * v45 + v79)) = v82;
          uint64_t v50 = v181;
          v183[v79++] = v83;
          ++v80;
        }
        while (v79 != v45);
      }
      v176 += v45 * v45;
      uint64_t v74 = v171;
      ++v178;
    }
    while (v178 != v171);
  }
  if (v45 < 2)
  {
    unsigned int v88 = 0;
    uint64_t v19 = v186;
    uint64_t v90 = v180;
    uint64_t v91 = v174;
    uint64_t v92 = v163;
    uint64_t v44 = v168;
    char v58 = v166;
  }
  else
  {
    unsigned int v88 = 0;
    uint64_t v89 = 1;
    uint64_t v19 = v186;
    uint64_t v90 = v180;
    uint64_t v91 = v174;
    uint64_t v92 = v163;
    uint64_t v44 = v168;
    char v58 = v166;
    do
    {
      if (*(_DWORD *)(v53 + 4 * v89) > *(_DWORD *)(v53 + 4 * v88)) {
        unsigned int v88 = v89;
      }
      ++v89;
    }
    while (v45 != v89);
  }
  _DWORD *v92 = *(_DWORD *)(v53 + 4 * v88);
  while (1)
  {
    int v134 = v74 - 1;
    if (v74 != 1) {
      break;
    }
    int v135 = 0;
    uint64_t v74 = 0;
    unsigned int v136 = 0;
LABEL_184:
    *(_DWORD *)(v90 + 4 * v74) = v88;
    *(_DWORD *)(v91 + 4 * v74) = v47[v88 + (v136 + v135) * v45];
    unsigned int v88 = v136;
  }
  if (v74)
  {
    int v135 = v134 * v45;
    unsigned int v136 = *(_DWORD *)(v50 + 4 * (v134 * v45 + v88));
    uint64_t v74 = (v74 - 1);
    goto LABEL_184;
  }
  uint64_t v10 = v74;
LABEL_186:
  if (v54)
  {
    heap_Free(*(void **)(v44 + 8), v54);
    uint64_t v53 = (uint64_t)v183;
  }
  char v137 = v58;
  size_t v11 = v170;
  if (v53) {
    heap_Free(*(void **)(v44 + 8), v53);
  }
  uint64_t v8 = v187;
  uint64_t v15 = v188;
  if (v50) {
    heap_Free(*(void **)(v44 + 8), v50);
  }
  if (v47) {
    xvm_free(v44, (uint64_t)v47);
  }
  uint64_t v26 = v173;
  uint64_t v23 = (uint64_t)v163;
  if (v137) {
    goto LABEL_238;
  }
LABEL_207:
  uint64_t v138 = heap_Calloc(*(void **)(v8 + 8), 8, v26);
  *size_t v11 = v138;
  if (!v138)
  {
LABEL_235:
    uint64_t v10 = 2585796618;
    goto LABEL_237;
  }
  uint64_t v139 = v180;
  if (!v26)
  {
LABEL_234:
    uint64_t v10 = 0;
    *unint64_t v162 = v26;
    goto LABEL_237;
  }
  uint64_t v140 = 0;
  uint64_t v141 = (3 * v19 + 1);
  while (2)
  {
    unsigned int v142 = (char *)heap_Alloc(*(void *)(v8 + 8), v141);
    if (!v142) {
      goto LABEL_235;
    }
    unsigned int v143 = v142;
    *unsigned int v142 = 0;
    if (*(_DWORD *)(v15 + 36))
    {
      if (v19)
      {
        for (uint64_t m = 0; m != v19; ++m)
        {
          uint64_t v145 = (const char *)qp_id2str(v187, *(void *)(*(void *)(v188 + 112) + 40), *(_DWORD *)(v139 + 4 * (v19 * v140 + m)));
          int v146 = cstdlib_strlen(v143);
          unsigned int v147 = cstdlib_strlen(v145);
          unsigned int v148 = 3 * v19 + 1;
          do
          {
            unsigned int v149 = v148;
            v148 *= 2;
          }
          while (v149 < v146 + v147 + 2);
          if (v149 <= v141)
          {
            uint64_t v150 = (char *)v143;
          }
          else
          {
            uint64_t v150 = (char *)heap_Realloc(*(uint64_t **)(v187 + 8), (uint64_t)v143, v149);
            if (!v150) {
              goto LABEL_236;
            }
          }
          cstdlib_strncat(v150, v145, v147);
          cstdlib_strcat(v150, " ");
          unsigned int v143 = v150;
          uint64_t v139 = v180;
        }
LABEL_233:
        *(void *)(*v11 + 8 * v140++) = v150;
        LODWORD(v26) = v173;
        uint64_t v8 = v187;
        uint64_t v15 = v188;
        if (v140 == v173) {
          goto LABEL_234;
        }
        continue;
      }
LABEL_232:
      uint64_t v150 = v142;
      goto LABEL_233;
    }
    break;
  }
  if (!v19) {
    goto LABEL_232;
  }
  uint64_t v151 = 0;
  while (2)
  {
    int v152 = (const char *)qrk_id2str(v187, *(void *)(*(void *)(v188 + 112) + 40), *(_DWORD *)(v139 + 4 * (v19 * v140 + v151)));
    int v153 = cstdlib_strlen(v143);
    unsigned int v154 = cstdlib_strlen(v152);
    unsigned int v155 = 3 * v19 + 1;
    do
    {
      unsigned int v156 = v155;
      v155 *= 2;
    }
    while (v156 < v153 + v154 + 2);
    if (v156 <= v141)
    {
      uint64_t v150 = (char *)v143;
LABEL_230:
      cstdlib_strncat(v150, v152, v154);
      cstdlib_strcat(v150, " ");
      ++v151;
      unsigned int v143 = v150;
      uint64_t v139 = v180;
      if (v151 == v19) {
        goto LABEL_233;
      }
      continue;
    }
    break;
  }
  uint64_t v150 = (char *)heap_Realloc(*(uint64_t **)(v187 + 8), (uint64_t)v143, v156);
  if (v150) {
    goto LABEL_230;
  }
LABEL_236:
  uint64_t v8 = v187;
  heap_Free(*(void **)(v187 + 8), (uint64_t)v143);
  uint64_t v10 = 2585796618;
  LODWORD(v26) = v173;
LABEL_237:
  uint64_t v23 = (uint64_t)v163;
LABEL_238:
  if (v23) {
LABEL_239:
  }
    heap_Free(*(void **)(v8 + 8), v23);
  if (v174) {
    heap_Free(*(void **)(v8 + 8), v174);
  }
  if (v180) {
    heap_Free(*(void **)(v8 + 8), v180);
  }
LABEL_244:
  if (v190) {
    rdr_freeseq(v8, (uint64_t)v190);
  }
  if (v191[0]) {
    rdr_freeraw(v8, v191[0]);
  }
  if ((v10 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v157 = *v11;
  if (*v11)
  {
    if (v26)
    {
      uint64_t v158 = 0;
      do
      {
        heap_Free(*(void **)(v8 + 8), *(void *)(*v11 + v158));
        v158 += 8;
      }
      while (8 * v26 != v158);
      uint64_t v157 = *v11;
    }
    heap_Free(*(void **)(v8 + 8), v157);
    *size_t v11 = 0;
  }
  return v10;
}

uint64_t tag_memmsc(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 44);
  unsigned int v5 = *a2;
  tag_expsc(a1, a2, (uint64_t)a3);
  uint64_t result = xvm_expma((uint64_t)a3, a3, 0, v4 * v4 * v5);
  unsigned int v14 = v5;
  if (v5)
  {
    int v7 = 0;
    int v8 = 0;
    do
    {
      if (v4)
      {
        int v9 = 0;
        int v10 = v7;
        do
        {
          uint64_t v11 = 0;
          int v12 = 0;
          do
            int v12 = fix16_add(v12, a3[(v10 + v11++)]);
          while (v4 != v11);
          for (uint64_t i = 0; i != v4; ++i)
          {
            uint64_t result = fix16_div(a3[(v10 + i)], v12);
            a3[(v10 + i)] = result;
          }
          ++v9;
          v10 += v4;
        }
        while (v9 != v4);
      }
      ++v8;
      v7 += v4 * v4;
    }
    while (v8 != v14);
  }
  return result;
}

uint64_t tag_expsc(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(result + 80);
  uint64_t v48 = result;
  uint64_t v5 = *(unsigned int *)(result + 44);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v41 = *a2;
  if (v6) {
    BOOL v7 = *a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    unsigned int v8 = 0;
    int v9 = 0;
    do
    {
      if (v5)
      {
        int v10 = 0;
        unsigned int v11 = v8;
        do
        {
          uint64_t v12 = v5;
          unsigned int v13 = v11;
          do
          {
            *(_DWORD *)(a3 + 4 * v13) = 0x80000000;
            v13 += v5;
            --v12;
          }
          while (v12);
          ++v10;
          ++v11;
        }
        while (v10 != v5);
      }
      ++v9;
      v8 += v5 * v5;
    }
    while (v9 != v41);
  }
  if (v41)
  {
    unsigned int v44 = 0;
    *(_DWORD *)&v42[8] = 0;
    *(void *)unsigned int v42 = (v5 * v5);
    do
    {
      if (v5)
      {
        uint64_t v14 = 0;
        uint64_t v15 = &a2[8 * *(void *)&v42[4]];
        uint64_t v46 = v15 + 6;
        int v16 = v15 + 7;
        unint64_t v49 = (unsigned int **)(v15 + 10);
        unsigned int v17 = v44;
        do
        {
          if (!v6
            || *(_DWORD *)(v6 + 4 * (v5 * *(_DWORD *)&v42[4] + v14))
            || ((uint64_t v18 = *v46, v18 != -1) ? (v19 = v14 == v18) : (v19 = 0), v19))
          {
            uint64_t v20 = *v16;
            if (v20)
            {
              LODWORD(result) = 0;
              uint64_t v21 = *v49;
              uint64_t v22 = *(void *)(v48 + 64);
              do
              {
                unsigned int v23 = *v21++;
                uint64_t result = fix16_add(result, *(_DWORD *)(v4 + 4 * (*(_DWORD *)(v22 + 4 * v23) + v14)));
                --v20;
              }
              while (v20);
            }
            else
            {
              uint64_t result = 0;
            }
            uint64_t v24 = v5;
            unsigned int v25 = v17;
            do
            {
              *(_DWORD *)(a3 + 4 * v25) = result;
              v25 += v5;
              --v24;
            }
            while (v24);
          }
          ++v14;
          ++v17;
        }
        while (v14 != v5);
      }
      v44 += *(_DWORD *)v42;
      ++*(void *)&v42[4];
    }
    while (*(void *)&v42[4] != v41);
    if (v41 >= 2)
    {
      for (uint64_t i = 1; i != v41; ++i)
      {
        if (v5)
        {
          uint64_t v26 = 0;
          int v27 = 0;
          uint64_t v45 = &a2[8 * i + 6];
          int v50 = v5 * i;
          uint64_t v28 = &a2[8 * i];
          uint64_t v51 = v28 + 8;
          uint64_t v47 = (unsigned int **)(v28 + 12);
          do
          {
            uint64_t v43 = v26;
            if (!v6 || *(_DWORD *)(v6 + 4 * (v5 * (i - 1) + v26)) || a2[8 * i - 2] != -1 && v26 == *v45)
            {
              uint64_t v29 = 0;
              int v30 = (v50 + v26) * v5;
              do
              {
                if (!v6
                  || *(_DWORD *)(v6 + 4 * (v50 + v29))
                  || ((uint64_t v31 = *v45, v31 != -1) ? (v32 = v29 == v31) : (v32 = 0), v32))
                {
                  uint64_t v33 = v6;
                  uint64_t v34 = *v51;
                  if (v34)
                  {
                    int v35 = 0;
                    unsigned int v36 = *v47;
                    uint64_t v37 = *(void *)(v48 + 72);
                    do
                    {
                      unsigned int v38 = *v36++;
                      int v35 = fix16_add(v35, *(_DWORD *)(v4 + 4 * (*(_DWORD *)(v37 + 4 * v38) + v27)));
                      --v34;
                    }
                    while (v34);
                  }
                  else
                  {
                    int v35 = 0;
                  }
                  uint64_t result = fix16_add(*(_DWORD *)(a3 + 4 * (v30 + v29)), v35);
                  *(_DWORD *)(a3 + 4 * (v30 + v29)) = result;
                  uint64_t v6 = v33;
                }
                ++v29;
                ++v27;
              }
              while (v29 != v5);
            }
            uint64_t v26 = v43 + 1;
          }
          while (v43 + 1 != v5);
        }
      }
    }
  }
  return result;
}

uint64_t tag_forced(uint64_t result, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(result + 44);
  uint64_t v5 = *a2;
  int v6 = (a4 == 0) << 31;
  if (v5)
  {
    int v7 = 0;
    uint64_t v8 = 0;
    int v9 = v4 * v4;
    int v10 = v4 * v4;
    do
    {
      unsigned int v11 = a2[8 * v8 + 6];
      if (v11 != -1)
      {
        if (v8 && v4)
        {
          int v12 = 0;
          LODWORD(result) = v7;
          do
          {
            if (v12 != v11)
            {
              uint64_t v13 = v4;
              unsigned int v14 = result;
              do
              {
                *(_DWORD *)(a3 + 4 * v14) = v6;
                v14 += v4;
                --v13;
              }
              while (v13);
            }
            ++v12;
            uint64_t result = (result + 1);
          }
          while (v12 != v4);
        }
        if (v8 != v5 - 1 && v4)
        {
          int v15 = 0;
          LODWORD(result) = v10;
          do
          {
            if (v15 != v11)
            {
              uint64_t v16 = v4;
              unsigned int v17 = result;
              do
              {
                *(_DWORD *)(a3 + 4 * v17++) = v6;
                --v16;
              }
              while (v16);
            }
            ++v15;
            uint64_t result = (result + v4);
          }
          while (v15 != v4);
        }
      }
      ++v8;
      v7 += v9;
      v10 += v9;
    }
    while (v8 != v5);
  }
  unsigned int v18 = a2[6];
  if (v18 != -1 && v4 != 0)
  {
    unsigned int v20 = 0;
    do
    {
      if (v18 != v20)
      {
        uint64_t v21 = v4;
        unsigned int v22 = v20;
        do
        {
          *(_DWORD *)(a3 + 4 * v22) = v6;
          v22 += v4;
          --v21;
        }
        while (v21);
      }
      ++v20;
    }
    while (v20 != v4);
  }
  return result;
}

uint64_t tag_memmsc_sparse(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 44);
  unsigned int v5 = *a2;
  tag_expsc_sparse(a1, a2, (uint64_t)a3);
  uint64_t result = xvm_expma((uint64_t)a3, a3, 0, v4 * v4 * v5);
  unsigned int v14 = v5;
  if (v5)
  {
    int v7 = 0;
    int v8 = 0;
    do
    {
      if (v4)
      {
        int v9 = 0;
        int v10 = v7;
        do
        {
          uint64_t v11 = 0;
          int v12 = 0;
          do
            int v12 = fix16_add(v12, a3[(v10 + v11++)]);
          while (v4 != v11);
          for (uint64_t i = 0; i != v4; ++i)
          {
            uint64_t result = fix16_div(a3[(v10 + i)], v12);
            a3[(v10 + i)] = result;
          }
          ++v9;
          v10 += v4;
        }
        while (v9 != v4);
      }
      ++v8;
      v7 += v4 * v4;
    }
    while (v8 != v14);
  }
  return result;
}

uint64_t tag_expsc_sparse(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 88);
  uint64_t v6 = *(unsigned int *)(result + 44);
  uint64_t v47 = *a2;
  if (*((void *)a2 + 2)) {
    BOOL v7 = *a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    unsigned int v8 = 0;
    int v9 = 0;
    do
    {
      if (v6)
      {
        int v10 = 0;
        unsigned int v11 = v8;
        do
        {
          uint64_t v12 = v6;
          unsigned int v13 = v11;
          do
          {
            *(_DWORD *)(a3 + 4 * v13) = 0x80000000;
            v13 += v6;
            --v12;
          }
          while (v12);
          ++v10;
          ++v11;
        }
        while (v10 != v6);
      }
      ++v9;
      v8 += v6 * v6;
    }
    while (v9 != v47);
  }
  if (v47)
  {
    int v48 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = -(int)v6;
    char v58 = a2;
    do
    {
      if (v6)
      {
        uint64_t v16 = 0;
        unsigned int v17 = &a2[8 * v14 + 6];
        unsigned int v18 = &a2[8 * v14];
        BOOL v19 = v18 + 7;
        unsigned int v20 = v18 + 10;
        int v21 = v48;
        int v50 = &a2[8 * (v14 - 1) + 6];
        uint64_t v52 = v17;
        uint64_t v54 = v15;
        do
        {
          uint64_t v22 = *((void *)a2 + 2);
          if (!v22
            || *(_DWORD *)(v22 + 4 * (v6 * v14 + v16))
            || ((uint64_t v23 = *v17, v23 != -1) ? (v24 = v16 == v23) : (v24 = 0), v24))
          {
            unsigned int v56 = v21;
            if (*v19)
            {
              unint64_t v25 = 0;
              int v26 = 0;
              do
              {
                int v27 = sparray_get(v5, *(_DWORD *)(*(void *)(v4 + 64) + 4 * *(unsigned int *)(*v20 + 4 * v25)) + (int)v16);
                uint64_t result = fix16_add(v26, v27);
                int v26 = result;
                ++v25;
              }
              while (v25 < *v19);
            }
            else
            {
              int v26 = 0;
            }
            uint64_t v28 = 0;
            int v21 = v56;
            unsigned int v29 = v56;
            a2 = v58;
            unsigned int v17 = v52;
            uint64_t v15 = v54;
            do
            {
              if (!v14
                || (uint64_t v30 = *((void *)v58 + 2)) == 0
                || *(_DWORD *)(v30 + 4 * (v54 + v28))
                || *v50 != -1 && v28 == *v52)
              {
                *(_DWORD *)(a3 + 4 * v29) = v26;
              }
              ++v28;
              v29 += v6;
            }
            while (v6 != v28);
          }
          ++v16;
          ++v21;
        }
        while (v16 != v6);
      }
      ++v14;
      v48 += v6 * v6;
      v15 += v6;
    }
    while (v14 != v47);
    if (v47 >= 2)
    {
      for (uint64_t i = 1; i != v47; ++i)
      {
        if (v6)
        {
          uint64_t v31 = 0;
          int v32 = 0;
          uint64_t v53 = &a2[8 * i + 6];
          int v55 = v6 * i;
          uint64_t v33 = &a2[8 * i];
          uint64_t v34 = v33 + 8;
          int v35 = v33 + 12;
          unint64_t v49 = &a2[8 * i - 2];
          do
          {
            uint64_t v36 = *((void *)a2 + 2);
            uint64_t v51 = v31;
            if (!v36
              || *(_DWORD *)(v36 + 4 * (v6 * (i - 1) + v31))
              || ((uint64_t v37 = *v49, v37 != -1) ? (v38 = v31 == v37) : (v38 = 0), v38))
            {
              uint64_t v39 = 0;
              int v57 = (v55 + v31) * v6;
              do
              {
                uint64_t v40 = *((void *)a2 + 2);
                if (!v40
                  || *(_DWORD *)(v40 + 4 * (v55 + v39))
                  || ((uint64_t v41 = *v53, v41 != -1) ? (v42 = v39 == v41) : (v42 = 0), v42))
                {
                  if (*v34)
                  {
                    unint64_t v43 = 0;
                    int v44 = 0;
                    do
                    {
                      int v45 = sparray_get(v5, *(_DWORD *)(*(void *)(v4 + 72) + 4 * *(unsigned int *)(*v35 + 4 * v43)) + v32);
                      int v44 = fix16_add(v44, v45);
                      ++v43;
                    }
                    while (v43 < *v34);
                  }
                  else
                  {
                    int v44 = 0;
                  }
                  uint64_t result = fix16_add(*(_DWORD *)(a3 + 4 * (v57 + v39)), v44);
                  *(_DWORD *)(a3 + 4 * (v57 + v39)) = result;
                  a2 = v58;
                }
                ++v39;
                ++v32;
              }
              while (v39 != v6);
            }
            else
            {
              v32 += v6;
            }
            uint64_t v31 = v51 + 1;
          }
          while (v51 + 1 != v6);
        }
      }
    }
  }
  return result;
}

void *kh_init_32(uint64_t a1)
{
  uint64_t result = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 48);
  if (result) {
    *uint64_t result = a1;
  }
  return result;
}

void *kh_destroy_32(uint64_t *a1)
{
  uint64_t v2 = *a1;
  heap_Free(*(void **)(*a1 + 8), a1[4]);
  heap_Free(*(void **)(v2 + 8), a1[3]);
  heap_Free(*(void **)(v2 + 8), a1[5]);
  uint64_t v3 = *(void **)(v2 + 8);

  return heap_Free(v3, (uint64_t)a1);
}

void *kh_clear_32(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[3];
    if (result)
    {
      unsigned int v2 = v1[2];
      if (v2 >= 0x10) {
        size_t v3 = (v2 >> 2) & 0x3FFFFFFC;
      }
      else {
        size_t v3 = 4;
      }
      uint64_t result = cstdlib_memset(result, 170, v3);
      v1[3] = 0;
      v1[4] = 0;
    }
  }
  return result;
}

uint64_t kh_get_32(uint64_t a1, int a2)
{
  uint64_t result = *(unsigned int *)(a1 + 8);
  if (result)
  {
    unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
    unsigned int v6 = (result - 1) & (v5 ^ HIWORD(v5));
    int v7 = 1;
    unsigned int v8 = v6;
    while (1)
    {
      int v9 = *(_DWORD *)(*(void *)(a1 + 24) + 4 * (v8 >> 4)) >> (2 * (v8 & 0xF));
      if ((v9 & 2) != 0 || (v9 & 1) == 0 && *(_DWORD *)(*(void *)(a1 + 32) + 4 * v8) == a2) {
        break;
      }
      unsigned int v8 = (v8 + v7++) & (result - 1);
      if (v8 == v6) {
        return result;
      }
    }
    if ((v9 & 3) != 0) {
      return result;
    }
    else {
      return v8;
    }
  }
  return result;
}

uint64_t kh_resize_32(uint64_t *a1, int a2)
{
  unsigned int v2 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
  unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  int v4 = v3 | HIWORD(v3);
  if ((v4 + 1) > 4) {
    unsigned int v5 = v4 + 1;
  }
  else {
    unsigned int v5 = 4;
  }
  unsigned int v6 = 3 * v5 + 2;
  if (*((_DWORD *)a1 + 3) >= v6) {
    return 0;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 8);
  if (v5 >= 0x10) {
    size_t v10 = (v5 >> 2) & 0x3FFFFFFC;
  }
  else {
    size_t v10 = 4;
  }
  unsigned int v11 = (void *)heap_Alloc(v9, v10);
  if (!v11) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = (uint64_t)v11;
  cstdlib_memset(v11, 170, v10);
  unsigned int v13 = *((_DWORD *)a1 + 2);
  if (v13 < v5)
  {
    uint64_t v14 = heap_Realloc(*(uint64_t **)(v8 + 8), a1[4], 4 * v5);
    if (v14)
    {
      a1[4] = v14;
      uint64_t v15 = heap_Realloc(*(uint64_t **)(v8 + 8), a1[5], 4 * v5);
      if (v15)
      {
        a1[5] = v15;
        unsigned int v13 = *((_DWORD *)a1 + 2);
        goto LABEL_13;
      }
    }
    heap_Free(*(void **)(v8 + 8), v12);
    return 0xFFFFFFFFLL;
  }
LABEL_13:
  if (v13)
  {
    unsigned int v16 = 0;
    uint64_t v17 = a1[3];
    unsigned int v18 = v5 - 1;
    do
    {
      uint64_t v19 = v16 >> 4;
      unsigned int v20 = *(_DWORD *)(v17 + 4 * v19);
      if (((v20 >> (2 * (v16 & 0xF))) & 3) == 0)
      {
        uint64_t v21 = a1[4];
        uint64_t v22 = a1[5];
        int v23 = *(_DWORD *)(v21 + 4 * v16);
        int v24 = *(_DWORD *)(v22 + 4 * v16);
        *(_DWORD *)(v17 + 4 * v19) = v20 | (1 << (2 * (v16 & 0xF)));
        while (1)
        {
          unsigned int v25 = 9 * ((v23 + ~(v23 << 15)) ^ ((v23 + ~(v23 << 15)) >> 10));
          unsigned int v26 = (v25 ^ (v25 >> 6)) + ~((v25 ^ (v25 >> 6)) << 11);
          unsigned int v27 = (v26 ^ HIWORD(v26)) & v18;
          uint64_t v28 = v27 >> 4;
          int v29 = *(_DWORD *)(v12 + 4 * v28);
          char v30 = 2 * (v27 & 0xF);
          int v31 = 2 << v30;
          if (((2 << v30) & v29) == 0)
          {
            int v32 = 1;
            do
            {
              unsigned int v27 = (v27 + v32) & v18;
              uint64_t v28 = v27 >> 4;
              int v29 = *(_DWORD *)(v12 + 4 * v28);
              char v30 = 2 * (v27 & 0xF);
              int v31 = 2 << v30;
              ++v32;
            }
            while (((2 << v30) & v29) == 0);
          }
          *(_DWORD *)(v12 + 4 * v28) = v29 & ~v31;
          if (v27 >= *((_DWORD *)a1 + 2) || ((*(_DWORD *)(v17 + 4 * v28) >> v30) & 3) != 0) {
            break;
          }
          int v33 = *(_DWORD *)(v21 + 4 * v27);
          *(_DWORD *)(v21 + 4 * v27) = v23;
          int v34 = *(_DWORD *)(v22 + 4 * v27);
          *(_DWORD *)(v22 + 4 * v27) = v24;
          *(_DWORD *)(v17 + 4 * v28) |= 1 << v30;
          int v23 = v33;
          int v24 = v34;
        }
        *(_DWORD *)(v21 + 4 * v27) = v23;
        *(_DWORD *)(v22 + 4 * v27) = v24;
        unsigned int v13 = *((_DWORD *)a1 + 2);
      }
      ++v16;
    }
    while (v16 != v13);
    if (v13 > v5)
    {
      a1[4] = heap_Realloc(*(uint64_t **)(v8 + 8), a1[4], 4 * v5);
      a1[5] = heap_Realloc(*(uint64_t **)(v8 + 8), a1[5], 4 * v5);
    }
  }
  heap_Free(*(void **)(v8 + 8), a1[3]);
  uint64_t result = 0;
  a1[3] = v12;
  *((_DWORD *)a1 + 2) = v5;
  *((_DWORD *)a1 + 4) = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 5) = v6;
  return result;
}

uint64_t kh_put_32(uint64_t a1, int a2, int *a3)
{
  if (*(_DWORD *)(a1 + 16) >= *(_DWORD *)(a1 + 20))
  {
    unsigned int v6 = *(_DWORD *)(a1 + 8);
    int v7 = v6 <= *(_DWORD *)(a1 + 12) >> 1 ? v6 + 1 : v6 - 1;
    if ((kh_resize_32((uint64_t *)a1, v7) & 0x80000000) != 0)
    {
      *a3 = -1;
      return *(unsigned int *)(a1 + 8);
    }
  }
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  uint64_t v11 = (v8 - 1) & (v10 ^ HIWORD(v10));
  uint64_t v12 = *(void *)(a1 + 24);
  if (((*(_DWORD *)(v12 + 4 * (v11 >> 4)) >> (2 * (v11 & 0xF))) & 2) != 0)
  {
    uint64_t result = v11;
  }
  else
  {
    int v14 = 1;
    unsigned int v15 = v11;
    LODWORD(result) = *(_DWORD *)(a1 + 8);
    do
    {
      int v16 = *(_DWORD *)(v12 + 4 * (v15 >> 4)) >> (2 * (v15 & 0xF));
      if ((v16 & 2) != 0 || (v16 & 1) == 0 && *(_DWORD *)(*(void *)(a1 + 32) + 4 * v15) == a2)
      {
        BOOL v17 = ((*(_DWORD *)(v12 + 4 * (v15 >> 4)) >> (2 * (v15 & 0xF))) & 2) == 0;
        goto LABEL_20;
      }
      if (v16) {
        uint64_t result = v15;
      }
      else {
        uint64_t result = result;
      }
      unsigned int v15 = (v15 + v14++) & (v8 - 1);
    }
    while (v15 != v11);
    if (result != v8) {
      goto LABEL_26;
    }
    BOOL v17 = 1;
    LODWORD(result) = *(_DWORD *)(a1 + 8);
    unsigned int v15 = v11;
LABEL_20:
    if (result == v8 || v17) {
      uint64_t result = v15;
    }
    else {
      uint64_t result = result;
    }
  }
LABEL_26:
  uint64_t v19 = result >> 4;
  char v20 = 2 * (result & 0xF);
  int v21 = *(_DWORD *)(v12 + 4 * v19) >> v20;
  if ((v21 & 2) != 0)
  {
    *(_DWORD *)(*(void *)(a1 + 32) + 4 * result) = a2;
    *(_DWORD *)(v12 + 4 * v19) &= ~(3 << v20);
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x400000004);
    int v22 = 1;
  }
  else
  {
    if ((v21 & 1) == 0)
    {
      *a3 = 0;
      return result;
    }
    *(_DWORD *)(*(void *)(a1 + 32) + 4 * result) = a2;
    *(_DWORD *)(v12 + 4 * v19) &= ~(3 << v20);
    *(_DWORD *)(a1 + 12) += 4;
    int v22 = 2;
  }
  *a3 = v22;
  return result;
}

uint64_t kh_del_32(uint64_t result, unsigned int a2)
{
  if (*(_DWORD *)(result + 8) != a2)
  {
    uint64_t v2 = *(void *)(result + 24);
    uint64_t v3 = a2 >> 4;
    unsigned int v4 = *(_DWORD *)(v2 + 4 * v3);
    if (((v4 >> (2 * (a2 & 0xF))) & 3) == 0)
    {
      *(_DWORD *)(v2 + 4 * v3) = v4 | (1 << (2 * (a2 & 0xF)));
      *(_DWORD *)(result + 12) -= 4;
    }
  }
  return result;
}

const char *xvm_mode()
{
  return "no-sse";
}

uint64_t xvm_new(uint64_t a1, unsigned int a2)
{
  return heap_Alloc(*(void *)(a1 + 8), 4 * a2);
}

void *xvm_free(uint64_t a1, uint64_t a2)
{
  return heap_Free(*(void **)(a1 + 8), a2);
}

uint64_t xvm_scale(uint64_t result, int *a2, int a3, unsigned int a4)
{
  if (a4)
  {
    unsigned int v6 = (_DWORD *)result;
    uint64_t v7 = a4;
    do
    {
      int v8 = *a2++;
      uint64_t result = fix16_mul(v8, a3);
      *v6++ = result;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t xvm_unit(_DWORD *a1, int *a2, unsigned int a3)
{
  if (a3)
  {
    unsigned int v4 = a2;
    int v6 = 0;
    uint64_t v7 = a3;
    uint64_t v8 = a3;
    unsigned int v9 = a2;
    do
    {
      int v10 = *v9++;
      int v6 = fix16_add(v6, v10);
      --v8;
    }
    while (v8);
    uint64_t v11 = fix16_div(0x10000, v6);
    do
    {
      int v12 = *v4++;
      *a1++ = fix16_mul(v12, v11);
      --v7;
    }
    while (v7);
    return v11;
  }
  else
  {
    return fix16_div(0x10000, 0);
  }
}

uint64_t xvm_expma(uint64_t result, unsigned int *a2, int a3, unsigned int a4)
{
  if (a4)
  {
    int v6 = (_DWORD *)result;
    uint64_t v7 = a4;
    do
    {
      unsigned int v8 = *a2++;
      int v9 = fix16_exp(v8);
      uint64_t result = fix16_sub(v9, a3);
      *v6++ = result;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t xvm_expma_cache(uint64_t result, unsigned int *a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    int v10 = (_DWORD *)result;
    uint64_t v11 = a4;
    do
    {
      unsigned int v12 = *a2++;
      int v13 = fix16_exp_cache(v12, a5, a6);
      uint64_t result = fix16_sub(v13, a3);
      *v10++ = result;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t _parse_one_rule(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  unsigned int v8 = (_DWORD *)(v6 + 16 * v7);
  while (1)
  {
    int v9 = *__s1;
    if (v9 != 32) {
      break;
    }
    ++__s1;
  }
  if (!*__s1 || v9 == 35) {
    return 0;
  }
  uint64_t v10 = 2585796618;
  uint64_t v11 = cstdlib_strstr(__s1, ")-->");
  if (v11 && (unsigned int v12 = v11, cstdlib_strlen(v11) >= 5))
  {
    int v13 = v12 + 4;
    int v14 = *(void **)(a1 + 8);
    int v15 = cstdlib_strlen(v13);
    int v16 = (char *)heap_Calloc(v14, 1, (v15 + 1));
    *(void *)(v6 + 16 * v7 + 8) = v16;
    if (!v16) {
      return v10;
    }
    cstdlib_strcpy(v16, v13);
  }
  else
  {
    wapiti_info(*(void *)(a1 + 32), (uint64_t)"invalid rule label: %s");
  }
  BOOL v17 = *(void **)(a1 + 8);
  int v18 = cstdlib_strlen(__s1);
  uint64_t v19 = heap_Calloc(v17, 1, (v18 + 2));
  if (v19)
  {
    char v20 = (char *)v19;
    unsigned int v37 = 0;
    *unsigned int v8 = 0;
    int v21 = __s1;
    do
    {
      if (!cstdlib_strstr(v21, ")^") && !cstdlib_strstr(v21, ")-->")) {
        break;
      }
      ++*v8;
      int v22 = cstdlib_strstr(v21, ")^");
      int v21 = v22 + 2;
    }
    while (v22);
    int v23 = *(_DWORD *)(a3 + 32);
    unsigned int v24 = *(_DWORD *)(a3 + 36);
    if (v23 + 4 * *v8 <= v24)
    {
LABEL_19:
      *(_DWORD *)(v6 + 16 * v7 + 4) = v23;
      while (1)
      {
        unsigned int v26 = cstdlib_strstr(__s1, ")^");
        if (!v26)
        {
          unsigned int v26 = cstdlib_strstr(__s1, ")-->");
          if (!v26) {
            break;
          }
        }
        *unsigned int v26 = 0;
        unsigned int v27 = cstdlib_strstr(__s1, "(");
        if (!v27)
        {
          wapiti_info(*(void *)(a1 + 32), (uint64_t)"invalid feature id: %s");
          break;
        }
        *unsigned int v27 = 0;
        int v28 = *__s1;
        BOOL v29 = v28 == 33;
        if (v28 == 33) {
          char v30 = __s1 + 1;
        }
        else {
          char v30 = __s1;
        }
        int v31 = cstdlib_strstr(v30, "_");
        if (v31)
        {
          *int v31 = 0;
          int v32 = cstdlib_atoi((unsigned __int8 *)v30);
          v30 += cstdlib_strlen(v30) + 1;
        }
        else
        {
          wapiti_info(*(void *)(a1 + 32), (uint64_t)"invalid offset: %s");
          int v32 = 0;
        }
        int v33 = cstdlib_atoi((unsigned __int8 *)v30);
        int v34 = &v30[cstdlib_strlen(v30) + 1];
        cstdlib_strcpy(v20, "|");
        cstdlib_strcat(v20, v34);
        cstdlib_strcat(v20, "|");
        if ((qrk_str2id(a1, *(uint64_t **)a3, v20, &v37, 0) & 0x80000000) != 0) {
          goto LABEL_33;
        }
        uint64_t v35 = *(void *)(a3 + 24);
        *(_DWORD *)(v35 + 4 * *(unsigned int *)(a3 + 32)) = v29;
        *(_DWORD *)(v35 + 4 * (*(_DWORD *)(a3 + 32) + 1)) = v32;
        *(_DWORD *)(v35 + 4 * (*(_DWORD *)(a3 + 32) + 2)) = v33;
        *(_DWORD *)(v35 + 4 * (*(_DWORD *)(a3 + 32) + 3)) = v37;
        *(_DWORD *)(a3 + 32) += 4;
        char __s1 = (char *)&v34[cstdlib_strlen(v34) + 2];
      }
      ++*(_DWORD *)(a3 + 8);
LABEL_33:
      heap_Free(*(void **)(a1 + 8), (uint64_t)v20);
      return 0;
    }
    uint64_t v25 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a3 + 24), 4 * (*v8 + v24 + 50));
    if (v25)
    {
      int v23 = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(a3 + 36) += *v8 + 50;
      *(void *)(a3 + 24) = v25;
      goto LABEL_19;
    }
  }
  return v10;
}

uint64_t wapiti_rules_load(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  wapiti_info(*(void *)(a1 + 32), (uint64_t)"Load wapiti forcing rules...");
  uint64_t result = heap_Calloc(*(void **)(a1 + 8), 1, 40);
  if (result)
  {
    uint64_t v9 = result;
    if (!a3 || cstdlib_strstr((char *)a2, "Rule_Number: ") != (char *)a2)
    {
      cstdlib_strlen((const char *)a2);
LABEL_5:
      uint64_t result = 0;
      *a4 = v9;
      return result;
    }
    unsigned int v10 = cstdlib_atoi((unsigned __int8 *)(a2 + 13));
    size_t v11 = cstdlib_strlen((const char *)a2);
    if (!v10) {
      goto LABEL_5;
    }
    size_t v12 = v11;
    if ((qrk_new(a1, (uint64_t *)v9) & 0x80000000) != 0) {
      return 0;
    }
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, 16 * v10);
    *(void *)(v9 + 16) = v13;
    if (!v13) {
      return 2585796618;
    }
    uint64_t result = heap_Calloc(*(void **)(a1 + 8), 300, 4);
    *(void *)(v9 + 24) = result;
    if (result)
    {
      *(_DWORD *)(v9 + 36) = 300;
      *(_DWORD *)(v9 + 8) = 0;
      if ((uint64_t)(v12 + 1) < a3)
      {
        int v14 = (char *)(a2 + v12 + 1);
        unint64_t v15 = a2 + a3;
        do
        {
          size_t v16 = cstdlib_strlen(v14);
          _parse_one_rule(a1, v14, v9);
          v14 += v16 + 1;
        }
        while ((unint64_t)v14 < v15);
      }
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t _apply_one_rule(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, char *a6)
{
  if (!*(_DWORD *)a3) {
    return *(void *)(a3 + 8);
  }
  int v10 = 0;
  for (int i = 3; ; i += 4)
  {
    uint64_t v12 = a2[3];
    unsigned int v13 = i + *(_DWORD *)(a3 + 4);
    int v14 = *(_DWORD *)(v12 + 4 * (v13 - 3));
    int v15 = *(_DWORD *)(v12 + 4 * (v13 - 2));
    uint64_t v16 = (v15 + a5);
    if (v15 + a5 < 0
      || (int)v16 >= *(_DWORD *)a4
      || (uint64_t v17 = *(unsigned int *)(v12 + 4 * (v13 - 1)),
          v17 >= *(_DWORD *)(*(void *)(a4 + 16) + 4 * v16)))
    {
      int v18 = 0;
    }
    else
    {
      char __s1 = (char *)qrk_id2str(a1, *a2, *(_DWORD *)(v12 + 4 * v13));
      cstdlib_strcpy(a6, "|");
      cstdlib_strcat(a6, *(const char **)(*(void *)(a4 + 8 * v16 + 24) + 8 * v17));
      cstdlib_strcat(a6, "|");
      int v18 = cstdlib_strstr(__s1, a6);
    }
    if (!v14 && v18 == 0) {
      break;
    }
    if (v14 == 1 && v18 != 0) {
      break;
    }
    if (++v10 >= *(_DWORD *)a3) {
      return *(void *)(a3 + 8);
    }
  }
  return 0;
}

uint64_t wapiti_rules_apply(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  wapiti_info(*(void *)(a1 + 32), (uint64_t)"Apply wapiti forcing rules...");
  unint64_t v6 = *a3;
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = *((void *)a3 + 2);
    do
    {
      if (*(_DWORD *)(v9 + 4 * v7))
      {
        unint64_t v10 = 0;
        do
        {
          unsigned int v11 = cstdlib_strlen(*(const char **)(*(void *)&a3[2 * v7 + 6] + 8 * v10));
          if (v8 <= v11) {
            unsigned int v8 = v11;
          }
          ++v10;
          uint64_t v9 = *((void *)a3 + 2);
        }
        while (v10 < *(unsigned int *)(v9 + 4 * v7));
        unint64_t v6 = *a3;
      }
      ++v7;
    }
    while (v7 < v6);
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v12 = 2585796618;
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, v8 + 10);
  if (v13)
  {
    int v14 = (char *)v13;
    if (*((void *)a3 + 1)
      || (uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * *a3), (*((void *)a3 + 1) = v15) != 0))
    {
      if (*a3)
      {
        uint64_t v16 = 0;
        LODWORD(v17) = *(_DWORD *)(a2 + 8);
        while (!v17)
        {
          uint64_t v20 = *((void *)a3 + 1);
          if (!*(void *)(v20 + 8 * v16)) {
            goto LABEL_27;
          }
LABEL_24:
          if (++v16 >= (unint64_t)*a3) {
            goto LABEL_28;
          }
        }
        uint64_t v18 = 0;
        unint64_t v19 = 1;
        do
        {
          *(void *)(*((void *)a3 + 1) + 8 * v16) = _apply_one_rule(a1, (uint64_t *)a2, *(void *)(a2 + 16) + v18, (uint64_t)a3, v16, v14);
          uint64_t v20 = *((void *)a3 + 1);
          uint64_t v21 = *(void *)(v20 + 8 * v16);
          unint64_t v17 = *(unsigned int *)(a2 + 8);
          v18 += 16;
        }
        while (v19++ < v17 && v21 == 0);
        if (v21) {
          goto LABEL_24;
        }
LABEL_27:
        *(void *)(v20 + 8 * v16) = "";
        goto LABEL_24;
      }
LABEL_28:
      heap_Free(*(void **)(a1 + 8), (uint64_t)v14);
      return 0;
    }
  }
  return v12;
}

uint64_t wapiti_rules_unload(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    wapiti_info(*(void *)(a1 + 32), (uint64_t)"Unload wapiti forcing rules...");
    if (*(_DWORD *)(a2 + 8) && *(void *)(a2 + 16))
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(a2 + 16) + v5));
        ++v4;
        v5 += 16;
      }
      while (v4 < *(unsigned int *)(a2 + 8));
      heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 16));
      heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 24));
    }
    if (*(void *)a2) {
      qrk_free((void *)a1, *(void *)a2, 0);
    }
    heap_Free(*(void **)(a1 + 8), a2);
  }
  return 0;
}

uint64_t crf_Init_ReadOnly_ReferenceCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, void *a5, int a6, uint64_t a7, const char *a8, __int16 a9, char a10, uint64_t a11)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  cstdlib_memset(&v22, 0, 0x38uLL);
  uint64_t result = InitRsrcFunction(a1, a2, &v28);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v27);
    if ((result & 0x80000000) == 0)
    {
      *(void *)&long long v22 = a1;
      *((void *)&v22 + 1) = a2;
      *(void *)&long long v23 = a3;
      *((void *)&v23 + 1) = a4;
      cstdlib_strcpy((char *)&v24, a8);
      DWORD2(v24) = a6;
      BYTE14(v24) = a10;
      WORD6(v24) = a9;
      uint64_t v25 = a11;
      ObjcForThisApint i = getObjcForThisApi(v28, v27);
      uint64_t result = objc_GetAddRefCountedObject(ObjcForThisApi, a7, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))crf_ObjcLoad, (void (*)(void, void, _OWORD *))crf_ObjcClose, (uint64_t)&v22, &v26);
      if ((result & 0x80000000) != 0) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = *(void *)(v26 + 32);
      }
      *a5 = v21;
    }
  }
  return result;
}

uint64_t crf_ObjcLoad(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  memset(v22, 0, sizeof(v22));
  uint64_t result = InitRsrcFunction(a1, a2, &v47);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)(a5 + 16), *(void *)(a5 + 24), &v48);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_memcpy(v22, v47, 0x1A0uLL);
      long long v23 = *(_OWORD *)(v48 + 32);
      uint64_t v11 = *(unsigned int *)(a5 + 40);
      uint64_t v12 = *(uint64_t (**)(_OWORD *, void, int *))(a5 + 48);
      int v13 = *(unsigned __int16 *)(a5 + 44) | (*(unsigned __int8 *)(a5 + 46) << 16);
      int v50 = 0;
      uint64_t result = ssftriff_reader_ObjOpen(a1, a2, v11, a3, (char *)(a5 + 32), v13, (uint64_t *)&v50);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v14 = heap_Calloc(*((void **)&v22[0] + 1), 1, 344);
        *(void *)(a4 + 32) = v14;
        if (v14)
        {
          uint64_t result = crf_Init(a1, a2, (uint64_t)v50, v14);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          cstdlib_strcpy((char *)(*(void *)(a4 + 32) + 84), a3);
          if (v12)
          {
            int v49 = 1;
            uint64_t result = v12(v22, *(void *)(a4 + 32), &v49);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            *(_DWORD *)(*(void *)(*(void *)(a4 + 32) + 24) + 24) = v49;
          }
          return ssftriff_reader_ObjClose(v50, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          return 2585796618;
        }
      }
    }
  }
  return result;
}

uint64_t crf_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a3 + 32);
    if (v5)
    {
      uint64_t v6 = v7;
      crf_Deinit(v5);
      heap_Free(*(void **)(v6 + 8), v5);
    }
    return 0;
  }
  return result;
}

uint64_t crf_Deinit_ReadOnly_DereferenceCnt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjcForThisApint i = getObjcForThisApi(a1, a2);

  return objc_ReleaseObject(ObjcForThisApi, a3 + 84);
}

uint64_t crf_Init(_WORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  char __dst[13] = *(const void **)MEMORY[0x263EF8340];
  unsigned int v200 = 0;
  uint64_t v199 = 0;
  *(_DWORD *)(a4 + 68) = 0;
  int Chunk = ssftriff_reader_FindChunk(a3, "FAST", 2 * (*(_DWORD *)(a4 + 72) != 0), &v200, &v199);
  if (Chunk < 0)
  {
    LODWORD(v10) = Chunk;
    if ((Chunk & 0x1FFF) == 0xA) {
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 68) = 1;
    uint64_t v9 = ssftriff_reader_CloseChunk(a3);
    if ((v9 & 0x80000000) != 0) {
      return v9;
    }
  }
  *(_DWORD *)(a4 + 80) = 0;
  int v11 = ssftriff_reader_FindChunk(a3, "QPTR", 2 * (*(_DWORD *)(a4 + 72) != 0), &v200, &v199);
  if (v11 < 0)
  {
    LODWORD(v10) = v11;
    if ((v11 & 0x1FFF) != 0xA) {
      goto LABEL_12;
    }
LABEL_9:
    int v12 = ssftriff_reader_CloseChunk(a3);
    if (v12 >= 0) {
      return v10;
    }
    else {
      return v12;
    }
  }
  *(_DWORD *)(a4 + 80) = 1;
  uint64_t v9 = ssftriff_reader_CloseChunk(a3);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
LABEL_12:
  if (!*(_DWORD *)(a4 + 68))
  {
    *(_DWORD *)char __s1 = 0;
    __dst[0] = 0;
    int v210 = 0;
    v201[4] = 0;
    *(_DWORD *)unint64_t v201 = 0;
    *(void *)uint64_t v208 = 0;
    char __s = 0;
    uint64_t v207 = 0;
    HIDWORD(__n) = 0;
    uint64_t inited = InitRsrcFunction(a1, a2, &__s);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_332;
    }
    wapiti_info(*((void *)__s + 4), (uint64_t)"CRF COMP Init...");
    uint64_t inited = rdr_new((uint64_t)__s, 0, (uint64_t *)v208);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_332;
    }
    uint64_t inited = mdl_new(*(uint64_t *)v208, &v207);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_332;
    }
    uint64_t v91 = v207;
    *(_OWORD *)(v207 + 8) = opt_defaults;
    *(_OWORD *)(v91 + 24) = unk_2206E38A8;
    unsigned int v92 = ssftriff_reader_OpenChunk(a3, (__int32 *)v201, (unsigned int *)__s1, __dst);
    uint64_t v93 = 0;
    if ((v92 & 0x80000000) != 0)
    {
LABEL_188:
      if ((v92 & 0x1FFF) == 0x14) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v92;
      }
      wapiti_info(*((void *)__s + 4), (uint64_t)"OBS Count from model:%I32u, OBSW count:%d");
      goto LABEL_339;
    }
    uint64_t v10 = 2585796618;
    while (1)
    {
      uint64_t v94 = heap_Alloc(*((void *)__s + 1), 100);
      if (!v94) {
        goto LABEL_339;
      }
      unint64_t v95 = (unsigned char *)v94;
      if (!cstdlib_strcmp(v201, "LIST")) {
        break;
      }
      if (!cstdlib_strcmp(v201, "PARA"))
      {
        uint64_t v96 = _crf_parse_params((uint64_t)__s, __dst[0], *(unsigned int *)__s1, a4);
        if ((v96 & 0x80000000) != 0) {
          goto LABEL_337;
        }
        goto LABEL_187;
      }
      if (!cstdlib_strcmp(v201, "RULE"))
      {
        uint64_t v96 = wapiti_rules_load((uint64_t)__s, (uint64_t)__dst[0], *(unsigned int *)__s1, (uint64_t *)(*(void *)(v207 + 112) + 56));
        if ((v96 & 0x80000000) != 0) {
          goto LABEL_337;
        }
        goto LABEL_187;
      }
      if (!cstdlib_strcmp(v201, "SPRS"))
      {
        *(_DWORD *)(v207 + 32) = 1;
        uint64_t v97 = *((void *)__s + 4);
        uint64_t v98 = "sparse theta ENABLED";
        goto LABEL_132;
      }
      LODWORD(__n) = 0;
      wapiti_info(*((void *)__s + 4), (uint64_t)"ChunkID:%s, cChunk:%d");
      if (!cstdlib_strcmp(v201, "OBSW"))
      {
        if (*(_DWORD *)(v207 + 32))
        {
          uint64_t v96 = mdl_sync_sparse(v207);
          if ((v96 & 0x80000000) != 0) {
            goto LABEL_337;
          }
        }
        else
        {
          uint64_t v96 = mdl_sync(v207);
          if ((v96 & 0x80000000) != 0)
          {
LABEL_337:
            uint64_t v10 = v96;
LABEL_339:
            uint64_t v193 = v207;
            goto LABEL_352;
          }
        }
      }
      cstdlib_memset(v95, 0, 0x64uLL);
      unsigned int v99 = *(_DWORD *)__s1;
      if (*(_DWORD *)__s1)
      {
        unsigned int v198 = 0;
        unsigned int v100 = 0;
        do
        {
          uint64_t v205 = 0;
          int v210 = 100;
          ssftriff_reader_ReadStringZ(a3, (uint64_t)__dst[0], v99, v100, v95, (unsigned int *)&v210);
          if (cstdlib_strcmp(v201, "MODE"))
          {
            if (cstdlib_strcmp(v201, "RDER"))
            {
              if (cstdlib_strcmp(v201, "QRKL"))
              {
                if (cstdlib_strcmp(v201, "QRKO"))
                {
                  if (!cstdlib_strcmp(v201, "OBSW"))
                  {
                    size_t v204 = 0;
                    if (wapiti_scanf_fmt_pair(v95, "=", (_DWORD *)&v204 + 1, &v204) != 2) {
                      wapiti_fatal(*((void *)__s + 4), (uint64_t)"Bad format of OBSW chunk");
                    }
                    if (*(_DWORD *)(v207 + 32)) {
                      sparray_set(*(void *)(v207 + 88), SHIDWORD(v204), v204);
                    }
                    else {
                      *(_DWORD *)(*(void *)(v207 + 80) + 4 * HIDWORD(v204)) = v204;
                    }
                    uint64_t v93 = (v93 + 1);
                  }
                  goto LABEL_186;
                }
                uint64_t v115 = *(void *)(v207 + 112);
                if (wapiti_scanf_fmt_1(v95, "#qrk#", (_DWORD *)&v205 + 1) != 1)
                {
                  HIDWORD(v204) = 0;
                  int v116 = wapiti_ns_readline((uint64_t)__s, v95, (_DWORD *)&v204 + 1);
                  int v117 = __s;
                  int v118 = *(uint64_t **)(v115 + 48);
LABEL_172:
                  uint64_t v96 = qrk_str2id((uint64_t)v117, v118, &v95[v116], (unsigned int *)&__n, HIDWORD(v204));
                  if ((v96 & 0x80000000) != 0) {
                    goto LABEL_337;
                  }
                  goto LABEL_186;
                }
                uint64_t v107 = *((void *)__s + 4);
                uint64_t v108 = "Quark O Size:%d";
              }
              else
              {
                uint64_t v106 = *(void *)(v207 + 112);
                if (wapiti_scanf_fmt_1(v95, "#qrk#", (_DWORD *)&v205 + 1) != 1)
                {
                  HIDWORD(v204) = 0;
                  int v116 = wapiti_ns_readline((uint64_t)__s, v95, (_DWORD *)&v204 + 1);
                  int v117 = __s;
                  int v118 = *(uint64_t **)(v106 + 40);
                  goto LABEL_172;
                }
                uint64_t v107 = *((void *)__s + 4);
                uint64_t v108 = "Quark L Size:%d";
              }
              wapiti_info(v107, (uint64_t)v108);
            }
            else
            {
              uint64_t v101 = *(void *)(v207 + 112);
              uint64_t v102 = (_DWORD *)(v101 + 24);
              if (wapiti_scanf_fmt_3(v95, "#rdr#", (_DWORD *)(v101 + 24), (_DWORD *)(v101 + 20), (_DWORD *)(v101 + 8)) == 3)
              {
                *(_DWORD *)(v101 + 12) = 0;
                *(_DWORD *)(v101 + 16) = 0;
                uint64_t v103 = *(unsigned int *)(v101 + 24);
                if (v103)
                {
                  uint64_t v104 = heap_Calloc(*((void **)__s + 1), 8, v103);
                  *(void *)(v101 + 32) = v104;
                  if (!v104) {
                    goto LABEL_339;
                  }
                }
                unsigned int v105 = 0;
              }
              else if (*v102)
              {
                uint64_t v109 = v93;
                HIDWORD(v204) = 0;
                int v110 = wapiti_ns_readline((uint64_t)__s, v95, (_DWORD *)&v204 + 1);
                uint64_t v111 = (char *)heap_Alloc(*((void *)__s + 1), (HIDWORD(v204) + 1));
                if (!v111) {
                  goto LABEL_339;
                }
                int v112 = v111;
                cstdlib_strncpy(v111, &v95[v110], HIDWORD(v204));
                v112[HIDWORD(v204)] = 0;
                uint64_t v96 = pat_comp((uint64_t)__s, v112, (void *)(*(void *)(v101 + 32) + 8 * v198));
                if ((v96 & 0x80000000) != 0) {
                  goto LABEL_337;
                }
                int v113 = cstdlib_tolower(*v112);
                if (v113 == 42)
                {
                  *(int32x2_t *)(v101 + 12) = vadd_s32(*(int32x2_t *)(v101 + 12), (int32x2_t)0x100000001);
                  uint64_t v93 = v109;
                  unsigned int v114 = v198;
                }
                else
                {
                  uint64_t v93 = v109;
                  unsigned int v114 = v198;
                  if (v113 == 98)
                  {
                    ++*(_DWORD *)(v101 + 16);
                  }
                  else if (v113 == 117)
                  {
                    ++*(_DWORD *)(v101 + 12);
                  }
                }
                unsigned int v105 = v114 + 1;
              }
              else
              {
                unsigned int v105 = v198;
              }
              if (v105 == *v102) {
                unsigned int v119 = 0;
              }
              else {
                unsigned int v119 = v105;
              }
              if (*v102) {
                unsigned int v105 = v119;
              }
              unsigned int v198 = v105;
            }
          }
          else if (wapiti_scanf_fmt_2(v95, "#mdl#", &v205, (_DWORD *)&__n + 1) == 2)
          {
            *(_DWORD *)(v207 + 40) = v205;
          }
          else
          {
            if (wapiti_scanf_fmt_1(v95, "#mdl#", (_DWORD *)&__n + 1) != 1)
            {
              wapiti_fatal(*((void *)__s + 4), (uint64_t)"crf riff data error, mode chunk format error");
              uint64_t v10 = 2585796626;
              goto LABEL_339;
            }
            *(_DWORD *)(v207 + 40) = 0;
          }
LABEL_186:
          v100 += v210;
          cstdlib_memset(v95, 0, 0x64uLL);
          unsigned int v99 = *(_DWORD *)__s1;
        }
        while (v100 < *(_DWORD *)__s1);
      }
LABEL_187:
      heap_Free(*((void **)__s + 1), (uint64_t)v95);
      ssftriff_reader_CloseChunk(a3);
      unsigned int v92 = ssftriff_reader_OpenChunk(a3, (__int32 *)v201, (unsigned int *)__s1, __dst);
      if ((v92 & 0x80000000) != 0) {
        goto LABEL_188;
      }
    }
    uint64_t v97 = *((void *)__s + 4);
    uint64_t v98 = "ChunkID:%s, cChunk:%d, pChunk:%s";
LABEL_132:
    wapiti_info(v97, (uint64_t)v98);
    goto LABEL_187;
  }
  if (!*(_DWORD *)(a4 + 80))
  {
    int v210 = 0;
    *(void *)uint64_t v208 = 0;
    char __s = 0;
    size_t __n = 0;
    uint64_t v207 = 0;
    char v203 = 0;
    *(_DWORD *)char __s1 = 0;
    *(void *)unint64_t v201 = 0;
    uint64_t inited = InitRsrcFunction(a1, a2, v208);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t inited = rdr_new(*(uint64_t *)v208, 0, &v207);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t inited = mdl_new(v207, v201);
        if ((inited & 0x80000000) == 0)
        {
          uint64_t v120 = *(void *)v201;
          *(_OWORD *)(*(void *)v201 + 8) = opt_defaults;
          *(_OWORD *)(v120 + 24) = unk_2206E38A8;
          while (1)
          {
            unsigned int v15 = ssftriff_reader_OpenChunk(a3, (__int32 *)__s1, (unsigned int *)&v210, &__s);
            if ((v15 & 0x80000000) != 0)
            {
LABEL_334:
              if ((v15 & 0x1FFF) == 0x14) {
                uint64_t v10 = 0;
              }
              else {
                uint64_t v10 = v15;
              }
              goto LABEL_351;
            }
            if (!cstdlib_strcmp(__s1, "PARA"))
            {
              uint64_t StringZ = _crf_parse_params(*(uint64_t *)v208, __s, v210, a4);
              if ((StringZ & 0x80000000) != 0) {
                goto LABEL_350;
              }
              goto LABEL_223;
            }
            if (!cstdlib_strcmp(__s1, "RULE"))
            {
              uint64_t StringZ = wapiti_rules_load(*(uint64_t *)v208, (uint64_t)__s, v210, (uint64_t *)(*(void *)(*(void *)v201 + 112) + 56));
              if ((StringZ & 0x80000000) != 0) {
                goto LABEL_350;
              }
              goto LABEL_223;
            }
            if (!cstdlib_strcmp(__s1, "SPRS")) {
              break;
            }
            if (!cstdlib_strcmp(__s1, "QPTR"))
            {
              *(_DWORD *)(*(void *)v201 + 36) = 1;
              uint64_t v125 = *(void *)(*(void *)v208 + 32);
              unsigned int v126 = "QP-Tree ENABLED";
              goto LABEL_222;
            }
            if (!cstdlib_strcmp(__s1, "MODE"))
            {
              if (v210) {
                *(_DWORD *)(*(void *)v201 + 40) = *(_DWORD *)__s;
              }
              goto LABEL_223;
            }
            if (cstdlib_strcmp(__s1, "RDER"))
            {
              if (cstdlib_strcmp(__s1, "QRKL"))
              {
                if (!cstdlib_strcmp(__s1, "KEYL") || !cstdlib_strcmp(__s1, "LEFL"))
                {
                  LODWORD(__n) = 0;
                  if (__s1[0] == 76)
                  {
                    unsigned int v138 = *(_DWORD *)__s;
                    LODWORD(__n) = *(_DWORD *)__s;
                  }
                  else
                  {
                    unsigned int v138 = 0;
                    if (__s1[0] == 75)
                    {
                      uint64_t v139 = v210;
                      if (v210)
                      {
                        unsigned int v138 = 0;
                        uint64_t v140 = __s;
                        do
                        {
                          if (!*v140++) {
                            LODWORD(__n) = ++v138;
                          }
                          --v139;
                        }
                        while (v139);
                      }
                      else
                      {
                        unsigned int v138 = 0;
                      }
                    }
                  }
                  uint64_t v10 = 2585796618;
                  uint64_t v168 = heap_Realloc(*(uint64_t **)(*(void *)v208 + 8), *(void *)(*(void *)(v207 + 40) + 8), 8 * v138);
                  if (!v168) {
                    goto LABEL_351;
                  }
                  uint64_t v169 = v168;
                  uint64_t v170 = __n;
                  *(_DWORD *)(*(void *)(v207 + 40) + 24) = __n;
                  uint64_t v171 = heap_Calloc(*(void **)(*(void *)v208 + 8), v170, 16);
                  if (!v171) {
                    goto LABEL_344;
                  }
                  uint64_t v172 = v171;
                  uint64_t v173 = ssftriff_reader_DetachChunkData(a3, (void **)a4, &__s);
                  if ((v173 & 0x80001FFF) == 0x8000000A)
                  {
                    uint64_t v10 = v173;
LABEL_344:
                    uint64_t v196 = *(void *)(v207 + 40);
LABEL_345:
                    *(void *)(v196 + 8) = v169;
                    goto LABEL_351;
                  }
                  if (__s1[0] == 75)
                  {
                    int v177 = __n;
                    if (__n)
                    {
                      unint64_t v178 = 0;
                      unsigned int v179 = __s;
                      do
                      {
                        *(_DWORD *)uint64_t v172 = v178;
                        *(void *)(v172 + 8) = v179;
                        *(void *)(v169 + 8 * v178) = v172;
                        v179 += cstdlib_strlen(v179) + 1;
                        ++v178;
                        int v177 = __n;
                        v172 += 16;
                      }
                      while (v178 < __n);
                    }
                  }
                  else if (__s1[0] == 76)
                  {
                    if (__n)
                    {
                      unint64_t v174 = 0;
                      int v175 = __s + 4;
                      int v176 = &__s[__n + 4];
                      do
                      {
                        *(_DWORD *)uint64_t v172 = v174;
                        *(void *)(v172 + 8) = v176;
                        *(void *)(v169 + 8 * v174) = v172;
                        v176 += v175[v174++] + 1;
                        v172 += 16;
                      }
                      while (v174 < __n);
                      int v177 = __n;
                    }
                    else
                    {
                      int v177 = 0;
                    }
                  }
                  else
                  {
                    int v177 = __n;
                  }
                  uint64_t v180 = *(void *)(v207 + 40);
                  goto LABEL_302;
                }
                if (cstdlib_strcmp(__s1, "QRKO"))
                {
                  if (!cstdlib_strcmp(__s1, "KEYO") || !cstdlib_strcmp(__s1, "LEFO"))
                  {
                    LODWORD(__n) = 0;
                    if (__s1[0] == 76)
                    {
                      unsigned int v153 = *(_DWORD *)__s;
                      LODWORD(__n) = *(_DWORD *)__s;
                    }
                    else
                    {
                      unsigned int v153 = 0;
                      if (__s1[0] == 75)
                      {
                        uint64_t v154 = v210;
                        if (v210)
                        {
                          unsigned int v153 = 0;
                          unsigned int v155 = __s;
                          do
                          {
                            if (!*v155++) {
                              LODWORD(__n) = ++v153;
                            }
                            --v154;
                          }
                          while (v154);
                        }
                        else
                        {
                          unsigned int v153 = 0;
                        }
                      }
                    }
                    uint64_t v10 = 2585796618;
                    uint64_t v181 = heap_Realloc(*(uint64_t **)(*(void *)v208 + 8), *(void *)(*(void *)(v207 + 48) + 8), 8 * v153);
                    if (!v181) {
                      goto LABEL_351;
                    }
                    uint64_t v169 = v181;
                    uint64_t v182 = __n;
                    *(_DWORD *)(*(void *)(v207 + 48) + 24) = __n;
                    uint64_t v183 = heap_Calloc(*(void **)(*(void *)v208 + 8), v182, 16);
                    if (!v183) {
                      goto LABEL_357;
                    }
                    uint64_t v184 = v183;
                    uint64_t v185 = ssftriff_reader_DetachChunkData(a3, (void **)(a4 + 8), &__s);
                    if ((v185 & 0x80001FFF) == 0x8000000A)
                    {
                      uint64_t v10 = v185;
LABEL_357:
                      uint64_t v196 = *(void *)(v207 + 48);
                      goto LABEL_345;
                    }
                    if (__s1[0] == 75)
                    {
                      int v177 = __n;
                      if (__n)
                      {
                        unint64_t v189 = 0;
                        unint64_t v190 = __s;
                        do
                        {
                          *(_DWORD *)uint64_t v184 = v189;
                          *(void *)(v184 + 8) = v190;
                          *(void *)(v169 + 8 * v189) = v184;
                          v190 += cstdlib_strlen(v190) + 1;
                          ++v189;
                          int v177 = __n;
                          v184 += 16;
                        }
                        while (v189 < __n);
                      }
                    }
                    else if (__s1[0] == 76)
                    {
                      if (__n)
                      {
                        unint64_t v186 = 0;
                        uint64_t v187 = __s + 4;
                        uint64_t v188 = &__s[__n + 4];
                        do
                        {
                          *(_DWORD *)uint64_t v184 = v186;
                          *(void *)(v184 + 8) = v188;
                          *(void *)(v169 + 8 * v186) = v184;
                          v188 += v187[v186++] + 1;
                          v184 += 16;
                        }
                        while (v186 < __n);
                        int v177 = __n;
                      }
                      else
                      {
                        int v177 = 0;
                      }
                    }
                    else
                    {
                      int v177 = __n;
                    }
                    uint64_t v180 = *(void *)(v207 + 48);
LABEL_302:
                    *(void *)(v180 + 8) = v169;
                    *(_DWORD *)(v180 + 20) = v177;
                    goto LABEL_223;
                  }
                  if (cstdlib_strcmp(__s1, "OBSW"))
                  {
                    if (!cstdlib_strcmp(__s1, "OBWF"))
                    {
                      *(_DWORD *)(a4 + 76) = 1;
                      uint64_t StringZ = mdl_sync_sparse(*(uint64_t *)v201);
                      if ((StringZ & 0x80000000) != 0) {
                        goto LABEL_350;
                      }
                      uint64_t StringZ = ssftriff_reader_DetachChunkData(a3, (void **)(a4 + 16), &__s);
                      if ((StringZ & 0x80001FFF) == 0x8000000A) {
                        goto LABEL_350;
                      }
                      unint64_t v121 = __s;
                      unsigned int v122 = *(_DWORD *)__s;
                      uint64_t v123 = *(void *)(*(void *)v201 + 88);
                      *(_DWORD *)(v123 + 8) = *(_DWORD *)__s;
                      *(_DWORD *)(v123 + 12) = *((_DWORD *)v121 + 1);
                      *(_DWORD *)(v123 + 16) = *((_DWORD *)v121 + 2);
                      *(_DWORD *)(v123 + 20) = *((_DWORD *)v121 + 3);
                      unsigned int v124 = (v122 >> 4) + 4;
                      if (v122 < 0x10) {
                        unsigned int v124 = 5;
                      }
                      *(void *)(v123 + 24) = v121 + 16;
                      *(void *)(v123 + 32) = &v121[4 * v124];
                      *(void *)(v123 + 40) = &v121[4 * v124 + 4 * v122];
                    }
                  }
                  else
                  {
                    if (*(_DWORD *)(*(void *)v201 + 32))
                    {
                      uint64_t StringZ = mdl_sync_sparse(*(uint64_t *)v201);
                      if ((StringZ & 0x80000000) != 0) {
                        goto LABEL_350;
                      }
                    }
                    else
                    {
                      uint64_t StringZ = mdl_sync(*(uint64_t *)v201);
                      if ((StringZ & 0x80000000) != 0) {
                        goto LABEL_350;
                      }
                    }
                    LODWORD(__n) = v210 >> 2;
                    if (v210 >= 4)
                    {
                      unsigned int v191 = 0;
                      uint64_t v192 = __s;
                      do
                      {
                        if (*(_DWORD *)(*(void *)v201 + 32)) {
                          sparray_set(*(void *)(*(void *)v201 + 88), *(_DWORD *)&v192[4 * v191], *(_DWORD *)&v192[4 * v191 + 4]);
                        }
                        else {
                          *(_DWORD *)(*(void *)(*(void *)v201 + 80) + 4 * *(unsigned int *)&v192[4 * v191]) = *(_DWORD *)&v192[4 * v191 + 4];
                        }
                        v191 += 2;
                      }
                      while (v191 < __n);
                    }
                  }
                }
                else
                {
                  LODWORD(__n) = v210 >> 4;
                  uint64_t v157 = heap_Alloc(*(void *)(*(void *)v208 + 8), 24 * ((unint64_t)v210 >> 4));
                  if (!v157)
                  {
LABEL_342:
                    uint64_t v10 = 2585796618;
                    goto LABEL_351;
                  }
                  **(void **)(v207 + 48) = v157;
                  uint64_t v158 = **(void **)(v207 + 48);
                  unsigned int v159 = __n;
                  LODWORD(__n) = v210 >> 2;
                  if (v210 >= 4)
                  {
                    unsigned int v160 = 0;
                    uint64_t v161 = v158 + 24 * v159;
                    unint64_t v162 = __s;
                    uint64_t v163 = v161 - 8;
                    do
                    {
                      unsigned int v164 = *(_DWORD *)&v162[4 * v160];
                      if ((v164 & 0x80000000) != 0) {
                        uint64_t v165 = v161 + 24 * (int)v164;
                      }
                      else {
                        uint64_t v165 = *(void *)(*(void *)(*(void *)(v207 + 48) + 8) + 8 * v164) | 1;
                      }
                      *(void *)(v163 - 16) = v165;
                      unsigned int v166 = *(_DWORD *)&v162[4 * v160 + 4];
                      if ((v166 & 0x80000000) != 0) {
                        uint64_t v167 = v161 + 24 * (int)v166;
                      }
                      else {
                        uint64_t v167 = *(void *)(*(void *)(*(void *)(v207 + 48) + 8) + 8 * v166) | 1;
                      }
                      *(void *)(v163 - 8) = v167;
                      *(_DWORD *)uint64_t v163 = *(_DWORD *)&v162[4 * v160 + 8];
                      *(unsigned char *)(v163 + 4) = *(_DWORD *)&v162[4 * v160 + 12];
                      v160 += 4;
                      v163 -= 24;
                    }
                    while (v160 < __n);
                  }
                }
              }
              else
              {
                LODWORD(__n) = v210 >> 4;
                uint64_t v142 = heap_Alloc(*(void *)(*(void *)v208 + 8), 24 * ((unint64_t)v210 >> 4));
                if (!v142) {
                  goto LABEL_342;
                }
                **(void **)(v207 + 40) = v142;
                uint64_t v143 = **(void **)(v207 + 40);
                unsigned int v144 = __n;
                LODWORD(__n) = v210 >> 2;
                if (v210 >= 4)
                {
                  unsigned int v145 = 0;
                  uint64_t v146 = v143 + 24 * v144;
                  unsigned int v147 = __s;
                  uint64_t v148 = v146 - 8;
                  do
                  {
                    unsigned int v149 = *(_DWORD *)&v147[4 * v145];
                    if ((v149 & 0x80000000) != 0) {
                      uint64_t v150 = v146 + 24 * (int)v149;
                    }
                    else {
                      uint64_t v150 = *(void *)(*(void *)(*(void *)(v207 + 40) + 8) + 8 * v149) | 1;
                    }
                    *(void *)(v148 - 16) = v150;
                    unsigned int v151 = *(_DWORD *)&v147[4 * v145 + 4];
                    if ((v151 & 0x80000000) != 0) {
                      uint64_t v152 = v146 + 24 * (int)v151;
                    }
                    else {
                      uint64_t v152 = *(void *)(*(void *)(*(void *)(v207 + 40) + 8) + 8 * v151) | 1;
                    }
                    *(void *)(v148 - 8) = v152;
                    *(_DWORD *)uint64_t v148 = *(_DWORD *)&v147[4 * v145 + 8];
                    *(unsigned char *)(v148 + 4) = *(_DWORD *)&v147[4 * v145 + 12];
                    v145 += 4;
                    v148 -= 24;
                  }
                  while (v145 < __n);
                }
              }
            }
            else
            {
              unsigned int v127 = v210;
              if (v210)
              {
                uint64_t v10 = 2585796618;
                uint64_t v128 = __s;
                uint64_t v129 = *(void *)(*(void *)v201 + 112);
                uint64_t v207 = v129;
                uint64_t v130 = *(unsigned int *)__s;
                *(_DWORD *)(v129 + 24) = v130;
                *(_DWORD *)(v129 + 20) = *((_DWORD *)v128 + 1);
                *(void *)(v129 + 8) = *((unsigned int *)v128 + 2);
                *(_DWORD *)(v129 + 16) = 0;
                if (v130)
                {
                  uint64_t v131 = heap_Calloc(*(void **)(*(void *)v208 + 8), v130, 8);
                  *(void *)(v207 + 32) = v131;
                  if (!v131) {
                    goto LABEL_351;
                  }
                  unsigned int v127 = v210;
                }
                if (v127 >= 0xD)
                {
                  unsigned int v132 = 0;
                  unsigned int v133 = 12;
                  do
                  {
                    HIDWORD(__n) = 100;
                    uint64_t StringZ = ssftriff_reader_ReadStringZ(a3, (uint64_t)__s, v127, v133, __dst, (unsigned int *)&__n + 1);
                    if ((StringZ & 0x80000000) != 0) {
                      goto LABEL_350;
                    }
                    if (*(_DWORD *)(v207 + 24))
                    {
                      unsigned int v134 = wapiti_ns_readline(*(uint64_t *)v208, (const char *)__dst, &__n);
                      int v135 = (char *)heap_Alloc(*(void *)(*(void *)v208 + 8), (__n + 1));
                      if (!v135) {
                        goto LABEL_351;
                      }
                      unsigned int v136 = v135;
                      cstdlib_strcpy(v135, "");
                      cstdlib_strncat(v136, (const char *)__dst + v134, __n);
                      uint64_t StringZ = pat_comp(*(uint64_t *)v208, v136, (void *)(*(void *)(v207 + 32) + 8 * v132));
                      if ((StringZ & 0x80000000) != 0) {
                        goto LABEL_350;
                      }
                      int v137 = cstdlib_tolower(*v136);
                      switch(v137)
                      {
                        case '*':
                          *(int32x2_t *)(v207 + 12) = vadd_s32(*(int32x2_t *)(v207 + 12), (int32x2_t)0x100000001);
                          break;
                        case 'b':
                          ++*(_DWORD *)(v207 + 16);
                          break;
                        case 'u':
                          ++*(_DWORD *)(v207 + 12);
                          break;
                      }
                      ++v132;
                    }
                    v133 += HIDWORD(__n);
                    unsigned int v127 = v210;
                  }
                  while (v133 < v210);
                }
              }
            }
LABEL_223:
            uint64_t StringZ = ssftriff_reader_CloseChunk(a3);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_350;
            }
          }
          *(_DWORD *)(*(void *)v201 + 32) = 1;
          uint64_t v125 = *(void *)(*(void *)v208 + 32);
          unsigned int v126 = "sparse theta ENABLED";
LABEL_222:
          wapiti_info(v125, (uint64_t)v126);
          goto LABEL_223;
        }
      }
    }
LABEL_332:
    uint64_t v10 = inited;
    if ((inited & 0x80000000) != 0) {
      goto LABEL_353;
    }
    return v10;
  }
  int v210 = 0;
  *(void *)uint64_t v208 = 0;
  char __s = 0;
  size_t __n = 0;
  uint64_t v207 = 0;
  char v203 = 0;
  *(_DWORD *)char __s1 = 0;
  *(void *)unint64_t v201 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, v208);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_332;
  }
  uint64_t inited = rdr_new_qp(*(uint64_t *)v208, 0, &v207);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_332;
  }
  uint64_t inited = mdl_new_qp(v207, v201);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_332;
  }
  uint64_t v14 = *(void *)v201;
  *(_OWORD *)(*(void *)v201 + 24) = unk_2206E38A8;
  uint64_t v10 = 2585796618;
  *(_OWORD *)(v14 + 8) = opt_defaults;
  *(_DWORD *)(v14 + 36) = 1;
  while (1)
  {
    unsigned int v15 = ssftriff_reader_OpenChunk(a3, (__int32 *)__s1, (unsigned int *)&v210, &__s);
    if ((v15 & 0x80000000) != 0) {
      goto LABEL_334;
    }
    if (!cstdlib_strcmp(__s1, "PARA"))
    {
      uint64_t StringZ = _crf_parse_params(*(uint64_t *)v208, __s, v210, a4);
      if ((StringZ & 0x80000000) != 0) {
        goto LABEL_350;
      }
      goto LABEL_107;
    }
    if (!cstdlib_strcmp(__s1, "RULE"))
    {
      uint64_t StringZ = wapiti_rules_load(*(uint64_t *)v208, (uint64_t)__s, v210, (uint64_t *)(*(void *)(*(void *)v201 + 112) + 56));
      if ((StringZ & 0x80000000) != 0) {
        goto LABEL_350;
      }
      goto LABEL_107;
    }
    if (!cstdlib_strcmp(__s1, "SPRS"))
    {
      *(_DWORD *)(*(void *)v201 + 32) = 1;
      wapiti_info(*(void *)(*(void *)v208 + 32), (uint64_t)"sparse theta ENABLED");
      goto LABEL_107;
    }
    if (!cstdlib_strcmp(__s1, "MODE"))
    {
      if (v210) {
        *(_DWORD *)(*(void *)v201 + 40) = *(_DWORD *)__s;
      }
      goto LABEL_107;
    }
    if (!cstdlib_strcmp(__s1, "RDER")) {
      break;
    }
    if (cstdlib_strcmp(__s1, "QRKL"))
    {
      if (!cstdlib_strcmp(__s1, "LEFL"))
      {
        int v49 = *((_DWORD *)__s + 1);
        LODWORD(__n) = *(_DWORD *)__s;
        uint64_t v50 = __n;
        uint64_t v51 = *(void *)(v207 + 40);
        *(_DWORD *)(v51 + 28) = v49;
        uint64_t v52 = heap_Realloc(*(uint64_t **)(*(void *)v208 + 8), *(void *)(v51 + 8), 8 * v50);
        if (!v52) {
          goto LABEL_351;
        }
        uint64_t v53 = v52;
        uint64_t v54 = __n;
        *(_DWORD *)(*(void *)(v207 + 40) + 24) = __n;
        uint64_t v55 = heap_Calloc(*(void **)(*(void *)v208 + 8), v54, 16);
        if (!v55)
        {
          uint64_t v194 = *(void *)(v207 + 40);
LABEL_347:
          *(void *)(v194 + 8) = v53;
          goto LABEL_351;
        }
        uint64_t v56 = v55;
        uint64_t StringZ = ssftriff_reader_DetachChunkData(a3, (void **)a4, &__s);
        if ((StringZ & 0x80001FFF) == 0x8000000A)
        {
          uint64_t v195 = *(void *)(v207 + 40);
LABEL_349:
          *(void *)(v195 + 8) = v53;
          goto LABEL_350;
        }
        if (__n)
        {
          unint64_t v57 = 0;
          char v58 = __s + 8;
          int v59 = &__s[__n + 8];
          do
          {
            *(_DWORD *)uint64_t v56 = v57;
            *(void *)(v56 + 8) = v59;
            *(void *)(v53 + 8 * v57) = v56;
            v59 += v58[v57++] + 1;
            int v60 = __n;
            v56 += 16;
          }
          while (v57 < __n);
        }
        else
        {
          int v60 = 0;
        }
        uint64_t v88 = *(void *)(v207 + 40);
        goto LABEL_106;
      }
      if (cstdlib_strcmp(__s1, "QRKO"))
      {
        if (!cstdlib_strcmp(__s1, "LEFO"))
        {
          int v78 = *((_DWORD *)__s + 1);
          LODWORD(__n) = *(_DWORD *)__s;
          uint64_t v79 = __n;
          uint64_t v80 = *(void *)(v207 + 48);
          *(_DWORD *)(v80 + 28) = v78;
          uint64_t v81 = heap_Realloc(*(uint64_t **)(*(void *)v208 + 8), *(void *)(v80 + 8), 8 * v79);
          if (!v81) {
            goto LABEL_351;
          }
          uint64_t v53 = v81;
          uint64_t v82 = __n;
          *(_DWORD *)(*(void *)(v207 + 48) + 24) = __n;
          uint64_t v83 = heap_Calloc(*(void **)(*(void *)v208 + 8), v82, 16);
          if (!v83)
          {
            uint64_t v194 = *(void *)(v207 + 48);
            goto LABEL_347;
          }
          uint64_t v84 = v83;
          uint64_t StringZ = ssftriff_reader_DetachChunkData(a3, (void **)(a4 + 8), &__s);
          if ((StringZ & 0x80001FFF) == 0x8000000A)
          {
            uint64_t v195 = *(void *)(v207 + 48);
            goto LABEL_349;
          }
          if (__n)
          {
            unint64_t v85 = 0;
            int v86 = __s + 8;
            signed int v87 = &__s[__n + 8];
            do
            {
              *(_DWORD *)uint64_t v84 = v85;
              *(void *)(v84 + 8) = v87;
              *(void *)(v53 + 8 * v85) = v84;
              v87 += v86[v85++] + 1;
              int v60 = __n;
              v84 += 16;
            }
            while (v85 < __n);
          }
          else
          {
            int v60 = 0;
          }
          uint64_t v88 = *(void *)(v207 + 48);
LABEL_106:
          *(void *)(v88 + 8) = v53;
          *(_DWORD *)(v88 + 20) = v60;
          goto LABEL_107;
        }
        if (cstdlib_strcmp(__s1, "OBSW"))
        {
          if (!cstdlib_strcmp(__s1, "OBWF"))
          {
            *(_DWORD *)(a4 + 76) = 1;
            uint64_t StringZ = mdl_sync_sparse(*(uint64_t *)v201);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_350;
            }
            uint64_t StringZ = ssftriff_reader_DetachChunkData(a3, (void **)(a4 + 16), &__s);
            if ((StringZ & 0x80001FFF) == 0x8000000A) {
              goto LABEL_350;
            }
            uint64_t v17 = __s;
            unsigned int v18 = *(_DWORD *)__s;
            uint64_t v19 = *(void *)(*(void *)v201 + 88);
            *(_DWORD *)(v19 + 8) = *(_DWORD *)__s;
            *(_DWORD *)(v19 + 12) = *((_DWORD *)v17 + 1);
            *(_DWORD *)(v19 + 16) = *((_DWORD *)v17 + 2);
            *(_DWORD *)(v19 + 20) = *((_DWORD *)v17 + 3);
            unsigned int v20 = (v18 >> 4) + 4;
            if (v18 < 0x10) {
              unsigned int v20 = 5;
            }
            *(void *)(v19 + 24) = v17 + 16;
            *(void *)(v19 + 32) = &v17[4 * v20];
            *(void *)(v19 + 40) = &v17[4 * v20 + 4 * v18];
          }
        }
        else
        {
          if (*(_DWORD *)(*(void *)v201 + 32))
          {
            uint64_t StringZ = mdl_sync_sparse(*(uint64_t *)v201);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_350;
            }
          }
          else
          {
            uint64_t StringZ = mdl_sync(*(uint64_t *)v201);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_350;
            }
          }
          LODWORD(__n) = v210 >> 2;
          if (v210 >= 4)
          {
            unsigned int v89 = 0;
            uint64_t v90 = __s;
            do
            {
              if (*(_DWORD *)(*(void *)v201 + 32)) {
                sparray_set(*(void *)(*(void *)v201 + 88), *(_DWORD *)&v90[4 * v89], *(_DWORD *)&v90[4 * v89 + 4]);
              }
              else {
                *(_DWORD *)(*(void *)(*(void *)v201 + 80) + 4 * *(unsigned int *)&v90[4 * v89]) = *(_DWORD *)&v90[4 * v89 + 4];
              }
              v89 += 2;
            }
            while (v89 < __n);
          }
        }
      }
      else
      {
        uint64_t v61 = *(unsigned int *)(*(void *)(v207 + 48) + 28);
        uint64_t v62 = heap_Calloc(*(void **)(*(void *)v208 + 8), v61, 16);
        if (!v62) {
          goto LABEL_351;
        }
        **(void **)(v207 + 48) = v62;
        uint64_t v63 = **(void **)(v207 + 48);
        uint64_t v64 = (v210 >> 2) - 2 * v61;
        uint64_t v65 = heap_Calloc(*(void **)(*(void *)v208 + 8), v64, 8);
        if (!v65) {
          goto LABEL_351;
        }
        ***(void ***)(v207 + 48) = v65;
        uint64_t v66 = ***(void ***)(v207 + 48);
        LODWORD(__n) = v210 >> 2;
        if (v210 >= 4)
        {
          int v67 = 0;
          int v68 = (void *)(v63 + 16 * v61);
          int v69 = __s;
          uint64_t v70 = v66 + 8 * v64;
          unint64_t v71 = v68;
          do
          {
            unsigned int v72 = *(_DWORD *)&v69[4 * v67];
            *((_DWORD *)v71 - 2) = v72;
            *((_DWORD *)v71 - 1) = *(_DWORD *)&v69[4 * (v67 + 1)];
            unsigned int v73 = popcount(v72);
            v70 -= 8 * v73;
            *(v71 - 2) = v70;
            v71 -= 2;
            int v74 = v67 + 2;
            if (v73)
            {
              for (uint64_t i = 0; i != v73; *(void *)(*v71 + 8 * i++) = v77)
              {
                uint64_t v76 = *(int *)&v69[4 * (v74 + i)];
                if ((v76 & 0x80000000) != 0) {
                  uint64_t v77 = (uint64_t)&v68[2 * v76];
                }
                else {
                  uint64_t v77 = *(void *)(*(void *)(*(void *)(v207 + 48) + 8) + 8 * v76) | 1;
                }
              }
            }
            int v67 = v73 + v74;
          }
          while (v73 + v74 < __n);
        }
      }
    }
    else
    {
      uint64_t v32 = *(unsigned int *)(*(void *)(v207 + 40) + 28);
      uint64_t v33 = heap_Calloc(*(void **)(*(void *)v208 + 8), v32, 16);
      if (!v33) {
        goto LABEL_351;
      }
      **(void **)(v207 + 40) = v33;
      uint64_t v34 = **(void **)(v207 + 40);
      uint64_t v35 = (v210 >> 2) - 2 * v32;
      uint64_t v36 = heap_Calloc(*(void **)(*(void *)v208 + 8), v35, 8);
      if (!v36) {
        goto LABEL_351;
      }
      ***(void ***)(v207 + 40) = v36;
      uint64_t v37 = ***(void ***)(v207 + 40);
      LODWORD(__n) = v210 >> 2;
      if (v210 >= 4)
      {
        int v38 = 0;
        long long v39 = (void *)(v34 + 16 * v32);
        long long v40 = __s;
        uint64_t v41 = v37 + 8 * v35;
        long long v42 = v39;
        do
        {
          unsigned int v43 = *(_DWORD *)&v40[4 * v38];
          *((_DWORD *)v42 - 2) = v43;
          *((_DWORD *)v42 - 1) = *(_DWORD *)&v40[4 * (v38 + 1)];
          unsigned int v44 = popcount(v43);
          v41 -= 8 * v44;
          *(v42 - 2) = v41;
          v42 -= 2;
          int v45 = v38 + 2;
          if (v44)
          {
            for (uint64_t j = 0; j != v44; *(void *)(*v42 + 8 * j++) = v48)
            {
              uint64_t v47 = *(int *)&v40[4 * (v45 + j)];
              if ((v47 & 0x80000000) != 0) {
                uint64_t v48 = (uint64_t)&v39[2 * v47];
              }
              else {
                uint64_t v48 = *(void *)(*(void *)(*(void *)(v207 + 40) + 8) + 8 * v47) | 1;
              }
            }
          }
          int v38 = v44 + v45;
        }
        while (v44 + v45 < __n);
      }
    }
LABEL_107:
    uint64_t StringZ = ssftriff_reader_CloseChunk(a3);
    if ((StringZ & 0x80000000) != 0) {
      goto LABEL_350;
    }
  }
  unsigned int v21 = v210;
  if (!v210) {
    goto LABEL_107;
  }
  long long v22 = __s;
  uint64_t v23 = *(void *)(*(void *)v201 + 112);
  uint64_t v207 = v23;
  uint64_t v24 = *(unsigned int *)__s;
  *(_DWORD *)(v23 + 24) = v24;
  *(_DWORD *)(v23 + 20) = *((_DWORD *)v22 + 1);
  *(void *)(v23 + 8) = *((unsigned int *)v22 + 2);
  *(_DWORD *)(v23 + 16) = 0;
  if (v24)
  {
    uint64_t v25 = heap_Calloc(*(void **)(*(void *)v208 + 8), v24, 8);
    *(void *)(v207 + 32) = v25;
    if (!v25) {
      goto LABEL_351;
    }
    unsigned int v21 = v210;
  }
  if (v21 < 0xD) {
    goto LABEL_107;
  }
  unsigned int v26 = 0;
  unsigned int v27 = 12;
  while (1)
  {
    HIDWORD(__n) = 100;
    uint64_t StringZ = ssftriff_reader_ReadStringZ(a3, (uint64_t)__s, v21, v27, __dst, (unsigned int *)&__n + 1);
    if ((StringZ & 0x80000000) != 0) {
      break;
    }
    if (*(_DWORD *)(v207 + 24))
    {
      unsigned int v28 = wapiti_ns_readline(*(uint64_t *)v208, (const char *)__dst, &__n);
      long long v29 = (char *)heap_Alloc(*(void *)(*(void *)v208 + 8), (__n + 1));
      if (!v29) {
        goto LABEL_351;
      }
      long long v30 = v29;
      cstdlib_strcpy(v29, "");
      cstdlib_strncat(v30, (const char *)__dst + v28, __n);
      uint64_t StringZ = pat_comp(*(uint64_t *)v208, v30, (void *)(*(void *)(v207 + 32) + 8 * v26));
      if ((StringZ & 0x80000000) != 0) {
        break;
      }
      int v31 = cstdlib_tolower(*v30);
      switch(v31)
      {
        case '*':
          *(int32x2_t *)(v207 + 12) = vadd_s32(*(int32x2_t *)(v207 + 12), (int32x2_t)0x100000001);
          break;
        case 'b':
          ++*(_DWORD *)(v207 + 16);
          break;
        case 'u':
          ++*(_DWORD *)(v207 + 12);
          break;
      }
      ++v26;
    }
    v27 += HIDWORD(__n);
    unsigned int v21 = v210;
    if (v27 >= v210) {
      goto LABEL_107;
    }
  }
LABEL_350:
  uint64_t v10 = StringZ;
LABEL_351:
  uint64_t v193 = *(void *)v201;
LABEL_352:
  *(void *)(a4 + 24) = v193;
  if ((v10 & 0x80000000) != 0)
  {
LABEL_353:
    crf_Deinit(a4);
    uint64_t v9 = ssftriff_reader_CloseChunk(a3);
    if ((v9 & 0x80000000) != 0) {
      return v9;
    }
  }
  return v10;
}

uint64_t crf_Deinit(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(uint64_t **)(a1 + 24);
    if (v2)
    {
      uint64_t v3 = *v2;
      if (*(_DWORD *)(a1 + 68))
      {
        ssftriff_reader_ReleaseChunkData(*(void **)a1);
        ssftriff_reader_ReleaseChunkData(*(void **)(a1 + 8));
      }
      if (*(_DWORD *)(a1 + 76)) {
        ssftriff_reader_ReleaseChunkData(*(void **)(a1 + 16));
      }
      if (*(_DWORD *)(a1 + 80)) {
        mdl_free_qp(v2, *(_DWORD *)(a1 + 76));
      }
      else {
        mdl_free(v2, *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 76));
      }
      *(void *)(a1 + 24) = 0;
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        heap_Free(*(void **)(v3 + 8), v4);
        *(void *)(a1 + 32) = 0;
      }
      uint64_t v5 = *(void *)(a1 + 48);
      if (v5)
      {
        heap_Free(*(void **)(v3 + 8), v5);
        *(void *)(a1 + 48) = 0;
      }
      uint64_t v6 = *(void *)(a1 + 56);
      if (v6)
      {
        heap_Free(*(void **)(v3 + 8), v6);
        *(void *)(a1 + 56) = 0;
      }
    }
  }
  return 0;
}

uint64_t crf_Process_Constrained(uint64_t a1, void *a2, unsigned int a3, uint64_t *a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v7 + 32)) {
    return tag_label_sparse(v7, a2, a3, a4, a5, a6, a7);
  }
  else {
    return tag_label(v7, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t crf_Process(uint64_t a1, void *a2, unsigned int a3, uint64_t *a4, _DWORD *a5)
{
  return crf_Process_Constrained(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t _crf_parse_params(uint64_t a1, const void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = 2585796618;
  uint64_t v9 = (void *)(a4 + 48);
  size_t v10 = a3;
  int v11 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a4 + 48), a3);
  if (v11)
  {
    int v12 = v11;
    cstdlib_memcpy(v11, a2, v10);
    v12[a3 - 1] = 0;
    *(void *)(a4 + 48) = v12;
    int v13 = &v12[v10];
    *(_DWORD *)(a4 + 40) = 0;
    int v14 = 0;
    if (a3)
    {
      unsigned int v15 = v12;
      do
      {
        if (!*v15) {
          *(_DWORD *)(a4 + 40) = ++v14;
        }
        ++v15;
      }
      while (v15 < v13);
    }
    unsigned int v16 = (v14 + 1) >> 1;
    *(_DWORD *)(a4 + 40) = v16;
    uint64_t v17 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a4 + 32), 16 * v16);
    if (!v17)
    {
      *(_DWORD *)(a4 + 40) = 0;
      heap_Free(*(void **)(a1 + 8), *(void *)(a4 + 48));
LABEL_20:
      *uint64_t v9 = 0;
      return v8;
    }
    uint64_t v8 = 0;
    *(void *)(a4 + 32) = v17;
    if (*(_DWORD *)(a4 + 40) && a3)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 1;
      while (1)
      {
        *(void *)(*(void *)(a4 + 32) + v18) = v12;
        size_t v20 = cstdlib_strlen(v12);
        unint64_t v21 = (unint64_t)&v12[v20 + 1];
        uint64_t v22 = *(void *)(a4 + 32);
        if (v21 >= (unint64_t)v13) {
          break;
        }
        *(void *)(v22 + v18 + 8) = v21;
        int v12 = (const char *)(cstdlib_strlen(&v12[v20 + 1]) + v21 + 1);
        v18 += 16;
        BOOL v23 = v19++ >= *(unsigned int *)(a4 + 40);
        BOOL v23 = v23 || v12 >= v13;
        if (v23) {
          return 0;
        }
      }
      uint64_t v8 = 0;
      uint64_t v9 = (void *)(v22 + v18 + 8);
      goto LABEL_20;
    }
  }
  return v8;
}

char *hlp_NLUStrAddI(char *a1, char *a2)
{
  if (cstdlib_strcmp(a1, "")) {
    cstdlib_strcat(a1, ";");
  }
  uint64_t v4 = &a1[cstdlib_strlen(a1)];
  unsigned int v5 = hlp_NLUStrLength(a2);
  uint64_t result = cstdlib_strncat(v4, a2, v5);
  *uint64_t v4 = 73;
  return result;
}

char *hlp_NLUStrLength(char *a1)
{
  uint64_t result = cstdlib_strstr(a1, ";");
  if (result) {
    LOWORD(result) = (_WORD)result - (_WORD)a1;
  }
  else {
    LOWORD(result) = cstdlib_strlen(a1);
  }
  return (char *)(unsigned __int16)result;
}

char *hlp_NLUStrSearchI(char *a1, char *a2)
{
  unsigned int v4 = hlp_NLUStrLength(a2);
  if (!a1) {
    return 0;
  }
  unsigned int v5 = v4;
  uint64_t v6 = a2 + 1;
  size_t v7 = v4 - 1;
  while (v5 != hlp_NLUStrLength(a1) || cstdlib_strncmp(v6, a1 + 1, v7))
  {
    uint64_t result = cstdlib_strstr(a1, ";");
    a1 = result + 1;
    if (!result) {
      return result;
    }
  }
  return (char *)1;
}

char *hlp_NLUStrNext(char *a1)
{
  uint64_t v1 = cstdlib_strstr(a1, ";");
  if (v1) {
    return v1 + 1;
  }
  else {
    return 0;
  }
}

char *hlp_NLUStrRemoveI(const char *a1, char *a2)
{
  uint64_t result = hlp_NLUStrLength(a2);
  if (a1)
  {
    int v5 = (int)result;
    uint64_t v6 = a2 + 1;
    size_t v7 = result - 1;
    uint64_t v8 = (char *)a1;
    while (v5 != hlp_NLUStrLength(v8) || cstdlib_strncmp(v6, v8 + 1, v7))
    {
      uint64_t result = cstdlib_strstr(v8, ";");
      uint64_t v8 = result + 1;
      if (!result) {
        return result;
      }
    }
    hlp_NLUStrStrip(v8);
    return hlp_NLUStrJoin(a1, "");
  }
  return result;
}

char *hlp_NLUStrStrip(char *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = cstdlib_strstr(a1, ";");
  if (v2)
  {
    uint64_t v3 = v2 + 1;
    size_t v4 = cstdlib_strlen(v2 + 1);
    cstdlib_memmove(v1, v3, v4 + 1);
  }
  else
  {
    cstdlib_strcpy(v1, "");
    return 0;
  }
  return v1;
}

char *hlp_NLUStrJoin(const char *a1, const char *a2)
{
  size_t v4 = (char *)&a1[cstdlib_strlen(a1)];
  if (cstdlib_strcmp(a1, ""))
  {
    int v5 = cstdlib_strcmp(a2, "");
    int v6 = cstdlib_strcmp(v4 - 1, ";");
    if (v5)
    {
      if (v6) {
        cstdlib_strcpy(v4++, ";");
      }
    }
    else if (!v6)
    {
      --v4;
    }
  }
  cstdlib_strcpy(v4, a2);
  return v4;
}

char *hlp_NLUStrKeyLen(char *a1)
{
  uint64_t v2 = cstdlib_strstr(a1, ";");
  uint64_t result = cstdlib_strstr(a1, ":");
  if (!result)
  {
    if (!v2)
    {
      LOWORD(result) = cstdlib_strlen(a1);
      return (char *)(unsigned __int16)result;
    }
    goto LABEL_6;
  }
  if (v2 && v2 < result)
  {
LABEL_6:
    LOWORD(result) = (_WORD)v2 - (_WORD)a1;
    return (char *)(unsigned __int16)result;
  }
  LOWORD(result) = (_WORD)result - (_WORD)a1;
  return (char *)(unsigned __int16)result;
}

unsigned __int8 *hlp_NLUStrKeyValue(char *a1)
{
  uint64_t v1 = &a1[hlp_NLUStrKeyLen(a1)];
  int v3 = *v1;
  uint64_t v2 = (unsigned __int8 *)(v1 + 1);
  if (v3 == 58) {
    return v2;
  }
  else {
    return 0;
  }
}

char *hlp_NLUStrValueLen(char *a1)
{
  if (a1) {
    return hlp_NLUStrKeyLen(a1);
  }
  return a1;
}

char *hlp_NLUStrFind(char *a1, char *__s, char **a3, unsigned __int16 *a4)
{
  unsigned __int16 v8 = cstdlib_strlen(__s);
  if (a1)
  {
    unsigned __int16 v9 = v8;
    size_t v10 = v8;
    while (hlp_NLUStrKeyLen(a1) != v9 || cstdlib_strncmp(__s, a1, v10))
    {
      int v11 = cstdlib_strstr(a1, ";");
      a1 = v11 + 1;
      if (!v11) {
        goto LABEL_6;
      }
    }
    int v12 = &a1[hlp_NLUStrKeyLen(a1)];
    int v14 = *v12;
    int v13 = v12 + 1;
    BOOL v15 = v14 == 58;
    if (v14 == 58) {
      unsigned int v16 = v13;
    }
    else {
      unsigned int v16 = 0;
    }
    *a3 = v16;
    if (v15) {
      unsigned __int16 v17 = (unsigned __int16)hlp_NLUStrKeyLen(v13);
    }
    else {
      unsigned __int16 v17 = 0;
    }
    *a4 = v17;
  }
  else
  {
LABEL_6:
    a1 = 0;
    *a4 = 0;
    *a3 = 0;
  }
  return a1;
}

uint64_t hlp_NLUStrExist(char *a1, char *__s)
{
  unsigned __int16 v4 = cstdlib_strlen(__s);
  if (!a1) {
    return 1;
  }
  unsigned __int16 v5 = v4;
  size_t v6 = v4;
  while (1)
  {
    if (hlp_NLUStrKeyLen(a1) == v5)
    {
      uint64_t result = cstdlib_strncmp(__s, a1, v6);
      if (!result) {
        break;
      }
    }
    unsigned __int16 v8 = cstdlib_strstr(a1, ";");
    a1 = v8 + 1;
    if (!v8) {
      return 1;
    }
  }
  return result;
}

uint64_t hlp_NLUStrRemoveKeyVal(char *a1, const char *a2)
{
  if (a1)
  {
    int v3 = a1;
    while (1)
    {
      unsigned int v4 = hlp_NLUStrKeyLen(v3);
      if (cstdlib_strlen(a2) != v4 || cstdlib_strncmp(a2, v3, v4)) {
        goto LABEL_8;
      }
      unsigned __int16 v5 = cstdlib_strstr(v3, ";");
      if (v5)
      {
        size_t v6 = v5 + 1;
        size_t v7 = cstdlib_strlen(v5 + 1);
        cstdlib_memmove(v3, v6, v7);
        v3[v7] = 0;
      }
      else
      {
        *int v3 = 0;
LABEL_8:
        unsigned __int16 v8 = cstdlib_strstr(v3, ";");
        int v3 = v8 + 1;
        if (!v8) {
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t hlp_NLUStrRemoveRangeKey(unsigned __int8 *a1, const char *a2, const char *a3)
{
  if (a1)
  {
    unsigned __int16 v5 = a1;
    while (1)
    {
      while (hlp_NLUStrKeyLen((char *)v5) < 2)
        ;
      unsigned int v6 = *v5 - 69;
      BOOL v7 = v6 > 0xE;
      int v8 = (1 << v6) & 0x4011;
      if (v7 || v8 == 0) {
        goto LABEL_20;
      }
      if (v5[1] != 95) {
        goto LABEL_20;
      }
      size_t v10 = cstdlib_strlen(a2);
      if (cstdlib_strncmp((const char *)v5 + 2, a2, v10)) {
        goto LABEL_20;
      }
      int v11 = &v5[hlp_NLUStrKeyLen((char *)v5)];
      int v13 = *v11;
      int v12 = (char *)(v11 + 1);
      if (v13 == 58)
      {
        unsigned int v14 = hlp_NLUStrLength(v12);
        if (!a3) {
          goto LABEL_20;
        }
        unsigned int v15 = v14;
        if (cstdlib_strlen(a3) != v14 || cstdlib_strncmp(a3, v12, v15)) {
          goto LABEL_20;
        }
      }
      else if (a3 && cstdlib_strcmp(a3, ""))
      {
        goto LABEL_20;
      }
      unsigned int v16 = cstdlib_strstr((char *)v5, ";");
      if (v16)
      {
        unsigned __int16 v17 = v16 + 1;
        size_t v18 = cstdlib_strlen(v16 + 1);
        cstdlib_memmove(v5, v17, v18);
        v5[v18] = 0;
      }
      else
      {
        *unsigned __int16 v5 = 0;
LABEL_20:
        unint64_t v19 = cstdlib_strstr((char *)v5, ";");
        unsigned __int16 v5 = (unsigned __int8 *)(v19 + 1);
        if (!v19) {
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t hlp_NLUStrAppendKeyVal(char *a1, const char *a2, const char *a3)
{
  int v6 = (unsigned __int16)cstdlib_strlen(a1);
  if (v6 && a1[v6 - 1] != 59) {
    cstdlib_strcat(a1, ";");
  }
  cstdlib_strcat(a1, a2);
  if (a3 && cstdlib_strlen(a3))
  {
    cstdlib_strcat(a1, ":");
    cstdlib_strcat(a1, a3);
  }
  return 0;
}

char *hlp_NLUStrSet(char *a1, char *a2, char *__s)
{
  size_t v20 = 0;
  unsigned __int16 v19 = 0;
  unsigned __int16 v6 = cstdlib_strlen(__s);
  BOOL v7 = hlp_NLUStrFind(a1, a2, &v20, &v19);
  if (v7)
  {
    int v8 = v7;
    size_t v9 = v19;
    if (v19 != v6)
    {
      int v13 = v20;
      if (v19 || v20)
      {
        unsigned int v16 = &v20[v19];
        size_t v17 = cstdlib_strlen(v16);
        cstdlib_memmove(&v13[v6], v16, v17 + 1);
        size_t v10 = v13;
        int v11 = __s;
        size_t v9 = v6;
      }
      else
      {
        unsigned int v14 = &v7[hlp_NLUStrKeyLen(v7)];
        size_t v15 = cstdlib_strlen(v14);
        cstdlib_memmove(&v14[v6 + 1], v14, v15 + 1);
        *unsigned int v14 = 58;
        size_t v10 = v14 + 1;
        int v11 = __s;
        size_t v9 = v6;
      }
      goto LABEL_12;
    }
    if (v19)
    {
      size_t v10 = v20;
      int v11 = __s;
LABEL_12:
      cstdlib_strncpy(v10, v11, v9);
    }
  }
  else
  {
    int v12 = hlp_NLUStrJoin(a1, a2);
    int v8 = v12;
    if (__s && v6)
    {
      cstdlib_strcat(v12, ":");
      cstdlib_strcat(v8, __s);
    }
  }
  return v8;
}

char *hlp_NLUStrAppend(char *a1, char *a2, char *a3, const char *a4)
{
  unsigned int v16 = 0;
  unsigned __int16 v15 = 0;
  int v8 = hlp_NLUStrFind(a1, a2, &v16, &v15);
  if (v8 && v15)
  {
    size_t v9 = v8;
    size_t v10 = &v16[v15];
    size_t v11 = (unsigned __int16)cstdlib_strlen(a4);
    size_t v12 = (unsigned __int16)cstdlib_strlen(a3);
    size_t v13 = cstdlib_strlen(v10);
    cstdlib_memmove(&v10[v11 + v12], v10, v13 + 1);
    cstdlib_strncpy(v10, a4, v11);
    cstdlib_strncpy(&v10[v11], a3, v12);
    return v9;
  }
  else
  {
    return hlp_NLUStrSet(a1, a2, a3);
  }
}

char *hlp_NLUStrOverride(char *a1, char *a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned __int16 v5 = a2;
    do
    {
      unsigned __int16 v6 = &v5[hlp_NLUStrKeyLen(v5)];
      int v7 = *v6;
      unsigned int v8 = hlp_NLUStrKeyLen(v5);
      unsigned int v9 = v8;
      if (v7 == 58)
      {
        size_t v10 = v6 + 1;
        size_t v11 = hlp_NLUStrKeyLen(v6 + 1);
        cstdlib_strncpy(__dst, v5, v9);
        __dst[v9] = 0;
        cstdlib_strncpy(v14, v10, v11);
      }
      else
      {
        cstdlib_strncpy(__dst, v5, v8);
        size_t v11 = 0;
        __dst[v9] = 0;
      }
      v14[v11] = 0;
      if (__dst[1] == 95)
      {
        hlp_NLUStrJoin(a1, __dst);
        if (v7 == 58)
        {
          cstdlib_strcat(a1, ":");
          cstdlib_strcat(a1, v14);
        }
      }
      else if (!a3 || !cstdlib_strcmp(__dst, "BND"))
      {
        hlp_NLUStrSet(a1, __dst, v14);
      }
      size_t v12 = cstdlib_strstr(v5, ";");
      unsigned __int16 v5 = v12 + 1;
    }
    while (v12);
  }
  return a1;
}

uint64_t hlp_dynstr_add(uint64_t a1, uint64_t a2, const char *a3, int a4)
{
  uint64_t v8 = 2601525248;
  unsigned __int16 v9 = cstdlib_strlen(*(const char **)a2);
  unsigned __int16 v10 = cstdlib_strlen(a3);
  unsigned int v11 = *(unsigned __int16 *)(a2 + 8);
  if (v9 + v10 + 2 >= v11)
  {
    uint64_t v12 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)a2, v10 + v11 + *(unsigned __int16 *)(a2 + 10));
    if (!v12)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v13, v14, v15, v16, v18);
      return 2601525258;
    }
    *(void *)a2 = v12;
    *(_WORD *)(a2 + 8) += v10 + *(_WORD *)(a2 + 10);
  }
  if (a4 == 1)
  {
    cstdlib_strcat(*(char **)a2, a3);
    return 0;
  }
  if (a4 == 2)
  {
    cstdlib_strcpy(*(char **)a2, a3);
    return 0;
  }
  return v8;
}

void *hlp_dynstr_free(void *result, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    uint64_t result = heap_Free((void *)result[1], v3);
    *(void *)a2 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t hlp_dynstr_init(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4)
{
  __int16 v5 = a3;
  uint64_t v8 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, a3);
  *(void *)a2 = v8;
  if (v8)
  {
    *(_WORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 10) = a4;
    cstdlib_strcpy(v8, "");
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v9, v10, v11, v12, v14);
    return 2601525258;
  }
}

uint64_t globalbeadapt_OutputMorphemesToLingDBAsWords(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s, unsigned __int8 *a6, const char *a7, _DWORD *a8)
{
  int v79 = 0;
  v80[0] = 0;
  unsigned __int16 v78 = 0;
  int v77 = 0;
  uint64_t v76 = 0;
  __sa = 0;
  uint64_t v75 = 0;
  unsigned __int16 v16 = cstdlib_strlen(__s);
  int v73 = 0;
  uint64_t __b = 0;
  uint64_t v72 = 0;
  int v69 = 0;
  uint64_t v70 = 0;
  v68[0] = 0;
  v68[1] = 0;
  *a8 = 0;
  cstdlib_memset(&__b, 0, 0x10uLL);
  cstdlib_memset(&v69, 0, 0x10uLL);
  cstdlib_memset(v68, 0, 0x10uLL);
  size_t v20 = a6 - 1;
  do
  {
    int v22 = *++v20;
    int v21 = v22;
  }
  while (v22 == 32);
  __int16 v23 = 0;
  while (v21 == 32)
  {
    --v20;
    do
    {
      int v24 = *++v20;
      int v21 = v24;
    }
    while (v24 == 32);
    ++v23;
    a6 = v20;
LABEL_10:
    if (v21) {
      ++v20;
    }
    int v21 = *v20;
  }
  if (v21) {
    goto LABEL_10;
  }
  __int16 v25 = v20 != a6;
  unsigned int v26 = a7;
  unsigned int v27 = (unsigned __int8 *)a7;
  while (1)
  {
    unsigned int v28 = *(unsigned __int8 *)v26;
    if (v28 <= 0x22) {
      break;
    }
    if (v28 != 35)
    {
      if (v28 != 47) {
        goto LABEL_27;
      }
      if (v26[1] == 84)
      {
        unsigned int v28 = 47;
        goto LABEL_27;
      }
    }
LABEL_19:
    LOWORD(v21) = v21 + 1;
    while (1)
    {
      if (v28 != 32 && v28 != 35)
      {
        if (v28 != 47) {
          goto LABEL_26;
        }
        if (v26[1] == 84) {
          break;
        }
      }
      unsigned int v29 = *(unsigned __int8 *)++v26;
      unsigned int v28 = v29;
    }
    unsigned int v28 = 47;
LABEL_26:
    unsigned int v27 = (unsigned __int8 *)v26;
LABEL_27:
    if (v28) {
      ++v26;
    }
  }
  if (v28 == 32) {
    goto LABEL_19;
  }
  if (*v26) {
    goto LABEL_27;
  }
  unsigned __int16 v30 = v23 + v25;
  if (v26 != (const char *)v27) {
    LOWORD(v21) = v21 + 1;
  }
  if (v30 == (unsigned __int16)v21)
  {
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[1] + 104))(a2, a3, 2, a4, (char *)v80 + 2);
    if ((v31 & 0x80000000) != 0) {
      goto LABEL_133;
    }
    uint64_t v31 = hlp_dynstr_init(*a1, (uint64_t)&__b, 0x20u, 16);
    if ((v31 & 0x80000000) != 0) {
      goto LABEL_133;
    }
    uint64_t v31 = hlp_dynstr_init(*a1, (uint64_t)&v69, 0x20u, 16);
    if ((v31 & 0x80000000) != 0) {
      goto LABEL_133;
    }
    uint64_t v31 = hlp_dynstr_init(*a1, (uint64_t)v68, 0x20u, 16);
    if ((v31 & 0x80000000) != 0) {
      goto LABEL_133;
    }
    int v73 = 0;
    unsigned __int16 v32 = HIWORD(v80[0]);
    if (HIWORD(v80[0]))
    {
      unsigned int v66 = v16;
      uint64_t v67 = a3;
      while (1)
      {
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, _DWORD *))(a1[1] + 168))(a2, a3, v32, 0, 1, &v77, v80);
        if ((v31 & 0x80000000) != 0) {
          break;
        }
        if ((v77 - 9) < 6 || v77 == 4)
        {
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, _DWORD *))(a1[1] + 168))(a2, a3, HIWORD(v80[0]), 1, 1, &v79, v80);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, _DWORD *))(a1[1] + 168))(a2, a3, HIWORD(v80[0]), 2, 1, &v78, v80);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          if (!(_WORD)v79
            || __s[(unsigned __int16)v79 - 1] == 32
            || (unsigned __int16)v79 >= 2u
            && __s[(unsigned __int16)v79 - 1] == 95
            && cstdlib_strchr(":;,", __s[(unsigned __int16)v79 - 2])
            || v77 == 11
            || (v77 - 12) <= 2)
          {
            HIWORD(v73) = v79;
            char v34 = 1;
          }
          else
          {
            char v34 = 0;
          }
          if ((char v65 = v34, v66 <= v78)
            || (int v35 = __s[v78], v35 == 32)
            || v35 == 95 && cstdlib_strchr(":;,", __s[v78 - 1])
            || v77 == 11
            || (v77 - 12) <= 2)
          {
            LOWORD(v73) = v78;
            int v36 = 1;
          }
          else
          {
            int v36 = 0;
          }
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, _DWORD *))(a1[1] + 176))(a2, v67, HIWORD(v80[0]), 3, &v76, v80);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, _DWORD *))(a1[1] + 176))(a2, v67, HIWORD(v80[0]), 5, &v75, v80);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)&__b, v75, 1);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, _DWORD *))(a1[1] + 176))(a2, v67, HIWORD(v80[0]), 14, &__sa, v80);
          if ((v31 & 0x80000000) != 0) {
            break;
          }
          if (LOWORD(v80[0]))
          {
            hlp_NLUStrRemoveKeyVal(__sa, "POS");
            if (!hlp_NLUStrExist(__sa, "PHR")) {
              hlp_NLUStrRemoveKeyVal(__sa, "PHR");
            }
            uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)&v69, __sa, 1);
            if ((v31 & 0x80000000) != 0) {
              break;
            }
            uint64_t v37 = __sa;
            if (*__sa)
            {
              if (v37[cstdlib_strlen(__sa) - 1] != 59)
              {
                uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)&v69, ";", 1);
                if ((v31 & 0x80000000) != 0) {
                  break;
                }
              }
            }
          }
          if (cstdlib_strcmp(v76, ""))
          {
            if (cstdlib_strstr(v76, "-*"))
            {
              int v38 = cstdlib_strchr(&__s[(unsigned __int16)v79], 45);
              if (v38)
              {
                if (v38 < &__s[v78])
                {
                  do
                  {
                    char *v38 = 95;
                    int v38 = cstdlib_strchr(v38 + 1, 45);
                    if (v38) {
                      BOOL v39 = v38 >= &__s[v78];
                    }
                    else {
                      BOOL v39 = 1;
                    }
                  }
                  while (!v39);
                }
              }
            }
            if (v36)
            {
              uint64_t i = a7;
              if ((v77 - 15) >= 0xFFFFFFFC)
              {
                while (1)
                {
                  unsigned int v41 = *(unsigned __int8 *)i;
                  BOOL v43 = v41 > 0x23 || ((1 << v41) & 0x900800001) == 0;
                  if (!v43 || v41 == 95) {
                    break;
                  }
                  ++i;
                }
              }
              else
              {
                for (uint64_t i = a7; ; ++i)
                {
                  unsigned int v41 = *(unsigned __int8 *)i;
                  if (v41 <= 0x23 && ((1 << v41) & 0x900000001) != 0) {
                    break;
                  }
                }
              }
              if (v41) {
                *i++ = 0;
              }
              if (*a7 == 45) {
                ++a7;
              }
              cstdlib_strlen(a7);
              uint64_t v64 = (char *)a7;
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"write joined word %d,%d POS=%s PHON=%s", v45, v46, v47, HIWORD(v73));
              if ((v65 & 1) == 0)
              {
                uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(a1[1] + 160))(a2, v67, HIWORD(v80[0]), 0, 1, &v77, (char *)&v79 + 2);
                if ((v31 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[1] + 160))(a2, v67, HIWORD(v80[0]), 1, 1, (char *)&v73 + 2, (char *)&v79 + 2);
                if ((v31 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[1] + 160))(a2, v67, HIWORD(v80[0]), 2, 1, &v73, (char *)&v79 + 2);
                if ((v31 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, char *))(a1[1] + 160);
                uint64_t v49 = HIWORD(v80[0]);
                __int16 v50 = cstdlib_strlen(__b);
                uint64_t v31 = v48(a2, v67, v49, 5, (unsigned __int16)(v50 + 1), __b, (char *)&v79 + 2);
                if ((v31 & 0x80000000) != 0) {
                  break;
                }
              }
              uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)v68, v69, 1);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)v68, "POS:", 1);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)v68, __b, 1);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(a1[1] + 160);
              uint64_t v52 = HIWORD(v80[0]);
              __int16 v53 = cstdlib_strlen(v68[0]);
              uint64_t v31 = v51(a2, v67, v52, 14, (unsigned __int16)(v53 + 1), v68[0], (char *)&v79 + 2);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(a1[1] + 160);
              uint64_t v55 = HIWORD(v80[0]);
              __int16 v56 = cstdlib_strlen(v64);
              uint64_t v31 = v54(a2, v67, v55, 3, (unsigned __int16)(v56 + 1), v64, (char *)&v79 + 2);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              while (1)
              {
                unsigned int v57 = *(unsigned __int8 *)i;
                BOOL v58 = v57 > 0x2F;
                uint64_t v59 = (1 << v57) & 0x800900000000;
                if (v58 || v59 == 0) {
                  break;
                }
                ++i;
              }
              uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)&__b, "", 2);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)&v69, "", 2);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              uint64_t v31 = hlp_dynstr_add(*a1, (uint64_t)v68, "", 2);
              if ((v31 & 0x80000000) != 0) {
                break;
              }
              char v44 = 1;
              a7 = i;
            }
            else
            {
              char v44 = 0;
            }
          }
          else
          {
            char v44 = 1;
          }
          a3 = v67;
        }
        else
        {
          char v44 = 1;
        }
        uint64_t v61 = HIWORD(v80[0]);
        uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[1] + 120))(a2, a3, HIWORD(v80[0]), (char *)v80 + 2);
        if ((v62 & 0x80000000) == 0)
        {
          if ((v44 & 1) != 0
            || (uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[1] + 192))(a2, a3, v61),
                (v62 & 0x80000000) == 0))
          {
            unsigned __int16 v32 = HIWORD(v80[0]);
            if (HIWORD(v80[0])) {
              continue;
            }
          }
        }
        goto LABEL_134;
      }
LABEL_133:
      uint64_t v62 = v31;
    }
    else
    {
      uint64_t v62 = 0;
    }
LABEL_134:
    if (__b)
    {
      heap_Free(*(void **)(*a1 + 8), (uint64_t)__b);
      uint64_t __b = 0;
    }
    LODWORD(v72) = 0;
    if (v69)
    {
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v69);
      int v69 = 0;
    }
    LODWORD(v70) = 0;
    if (v68[0]) {
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v68[0]);
    }
  }
  else
  {
    *a8 = 1;
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"Could not align morphemes into words, word count in L2=%d, not equal to word count in O1=%d", v17, v18, v19, v30);
    return 0;
  }
  return v62;
}

uint64_t globalbeadapt_SetFEBOOLKeyword(void *a1, uint64_t a2, _DWORD *a3, int a4)
{
  memset(__c, 0, sizeof(__c));
  *a3 = a4;
  if (((*(uint64_t (**)(void, void, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a1[7] + 96))(a1[5], a1[6], "fecfg", a2, &__c[3], &__c[1], __c) & 0x80000000) == 0&& *(unsigned __int16 *)&__c[1] == 1&& *(void *)&__c[3] != 0)
  {
    unsigned __int16 v6 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v6) {
      *unsigned __int16 v6 = 0;
    }
    if (!cstdlib_strcmp(**(const char ***)&__c[3], "1")) {
      *a3 = 1;
    }
    if (!cstdlib_strcmp(**(const char ***)&__c[3], "0")) {
      *a3 = 0;
    }
  }
  return 0;
}

uint64_t globalbeadapt_OutputToLingDB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v29 = 0;
  int v30 = 0;
  unsigned __int16 v28 = 0;
  int v27 = 0;
  char __s1 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 8) + 104))(a2, a3, 2, a4, (char *)&v30 + 2);
  if ((result & 0x80000000) == 0)
  {
    unsigned __int16 v12 = HIWORD(v30);
    if (HIWORD(v30))
    {
      while (1)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 8) + 168))(a2, a3, v12, 0, 1, &v27, &v30);
        if ((result & 0x80000000) != 0) {
          break;
        }
        if ((v27 - 9) >= 6 && v27 != 4) {
          goto LABEL_26;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 8)
                                                                                              + 176))(a2, a3, HIWORD(v30), 3, &__s1, &v30);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (cstdlib_strcmp(__s1, ""))
        {
          if (cstdlib_strstr(__s1, "-*"))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 8) + 168))(a2, a3, HIWORD(v30), 1, 1, &v29, &v30);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 8) + 168))(a2, a3, HIWORD(v30), 2, 1, &v28, &v30);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            unsigned int v14 = cstdlib_strchr((char *)(a5 + (unsigned __int16)v29), 45);
            if (v14 && (unint64_t)v14 < a5 + (unint64_t)v28)
            {
              do
              {
                *unsigned int v14 = 95;
                unsigned int v14 = cstdlib_strchr(v14 + 1, 45);
                if (v14) {
                  BOOL v15 = (unint64_t)v14 >= a5 + (unint64_t)v28;
                }
                else {
                  BOOL v15 = 1;
                }
              }
              while (!v15);
            }
          }
          for (uint64_t i = a6; ; ++i)
          {
            int v17 = *(unsigned __int8 *)i;
            if (!*i) {
              break;
            }
            if (v17 == 32 || v17 == 35)
            {
              *i++ = 0;
              break;
            }
          }
          if (*(_DWORD *)(a1 + 88)) {
            BOOL v18 = cstdlib_strcmp(a6, "_") == 0;
          }
          else {
            BOOL v18 = 0;
          }
          if (*a6 == 45) {
            ++a6;
          }
          unsigned __int16 v19 = cstdlib_strlen(a6);
          if (a6[(unsigned __int16)(v19 + 1) - 1] == 45) {
            unsigned __int16 v20 = v19;
          }
          else {
            unsigned __int16 v20 = v19 + 1;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, char *))(*(void *)(a1 + 8) + 160))(a2, a3, HIWORD(v30), 3, v20, a6, (char *)&v29 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          while (1)
          {
            unsigned int v21 = *(unsigned __int8 *)i;
            BOOL v22 = v21 > 0x2F;
            uint64_t v23 = (1 << v21) & 0x800900000000;
            if (v22 || v23 == 0) {
              break;
            }
            ++i;
          }
          a6 = i;
        }
        else
        {
LABEL_26:
          BOOL v18 = 0;
        }
        uint64_t v25 = HIWORD(v30);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 8) + 120))(a2, a3, HIWORD(v30), (char *)&v30 + 2);
        if ((result & 0x80000000) == 0)
        {
          if (!v18
            || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 192))(a2, a3, v25), (result & 0x80000000) == 0))
          {
            unsigned __int16 v12 = HIWORD(v30);
            if (HIWORD(v30)) {
              continue;
            }
          }
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t globalbeadapt_SetupDepesInput(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  char __s1 = 0;
  uint64_t v207 = 0;
  char v203 = 0;
  unint64_t v201 = 0;
  int v199 = 0;
  int v200 = 0;
  unsigned int v197 = 0;
  size_t v12 = *((unsigned __int16 *)a1 + 53);
  if (*((_WORD *)a1 + 53))
  {
    bzero(v229, v12);
    memset(__b, 32, v12);
    memset(v227, 126, v12);
    memset_pattern16(v226, &unk_2206E3270, 4 * v12);
  }
  v229[*((unsigned __int16 *)a1 + 112)] = 126;
  v229[*((unsigned __int16 *)a1 + 113)] = 126;
  if (*((_DWORD *)a1 + 64) == 1) {
    v229[*((unsigned __int16 *)a1 + 114)] = 126;
  }
  v229[*((unsigned __int16 *)a1 + 119)] = 126;
  if (*((_DWORD *)a1 + 62))
  {
    uint64_t v13 = *((unsigned __int16 *)a1 + 120);
    v229[v13] = 126;
    v226[v13] = 0;
  }
  uint64_t v218 = 0;
  int v216 = 0;
  int v217 = 0;
  int v215 = 0;
  int v213 = 0;
  int v214 = 0;
  unint64_t v212 = 0;
  uint64_t v208 = 0;
  char __dst = 0;
  int v206 = 0;
  uint64_t v202 = 0;
  unsigned __int16 v198 = 0;
  __int16 v196 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"langcode", &v203);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  BOOL v22 = a1 + 12;
  com_depes_StartWritingToLayers((uint64_t)(a1 + 12), v15, v16, v17, v18, v19, v20, v21);
  uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(a1[1] + 176))(a2, a3, a4, 0, &v218, &v217);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[1] + 104))(a2, a3, 2, a4, (char *)&v217 + 2);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  LOWORD(v186) = 0;
  int v187 = a6;
  uint64_t v188 = 0;
  uint64_t v189 = 0;
  uint64_t v23 = 0;
  unsigned int v191 = 0xFFFF;
  int v192 = 1;
  int v193 = 0;
  int v194 = 126;
  uint64_t v190 = a3;
  while (1)
  {
    if (!HIWORD(v217))
    {
      int v157 = *((unsigned __int16 *)a1 + *((unsigned __int16 *)a1 + 112) + 104);
      if (*((_DWORD *)a1 + 62)) {
        BOOL v158 = v192 == 0;
      }
      else {
        BOOL v158 = 0;
      }
      if (v158)
      {
        if (v207)
        {
          hlp_AddTnTag((uint64_t)a1, (unsigned __int16)v188, v207, (uint64_t)v227);
        }
        else if ((_WORD)v193)
        {
          int v180 = 0;
          do
          {
            uint64_t BacktransPOS = com_depes_AddToLayerGen(v22, *((unsigned __int16 *)a1 + 120), " ", 1, 0);
            if ((BacktransPOS & 0x80000000) != 0) {
              goto LABEL_283;
            }
          }
          while ((unsigned __int16)++v180 < (unsigned __int16)v193);
        }
      }
      if (HIDWORD(v188))
      {
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "◄");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "/+");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v159, v160, v161, v162, v163);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      if (v189)
      {
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "↕");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "►");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v164, v165, v166, v167, v168);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      if (!*((_DWORD *)a1 + 62)
        || v207
        || (int v169 = *((unsigned __int16 *)a1 + *((unsigned __int16 *)a1 + 112) + 104) - v157) == 0)
      {
LABEL_266:
        uint64_t v32 = hlp_ConvertOrthographyLayer((uint64_t)a1);
        if ((v32 & 0x80000000) == 0 && *((_WORD *)a1 + 53))
        {
          uint64_t v174 = 14;
          do
          {
            if (a1[v174])
            {
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"%s L%d: %s", v171, v172, v173, a5);
              uint64_t v175 = a1[4];
              uint64_t v176 = a1[v174];
              int v177 = v174 - 14 >= (unint64_t)*((unsigned __int16 *)a1 + 52)
                   ? *(uint64_t (**)(void, void, void, uint64_t, void))(v175 + 136)
                   : *(uint64_t (**)(void, void, void, uint64_t, void))(v175 + 120);
              unsigned __int16 v178 = cstdlib_strlen((const char *)a1[v174]);
              uint64_t v32 = v177(a1[2], a1[3], (unsigned __int16)(v174 - 14), v176, v178);
              if ((v32 & 0x80000000) != 0) {
                break;
              }
            }
            unint64_t v179 = v174 - 13;
            ++v174;
          }
          while (v179 < *((unsigned __int16 *)a1 + 53));
        }
        goto LABEL_284;
      }
      int v170 = 0;
      while (1)
      {
        uint64_t BacktransPOS = com_depes_AddToLayerGen(v22, *((unsigned __int16 *)a1 + 120), " ", 1, 0);
        if ((BacktransPOS & 0x80000000) != 0) {
          break;
        }
        if ((unsigned __int16)++v170 >= (unsigned __int16)v169) {
          goto LABEL_266;
        }
      }
LABEL_283:
      uint64_t v32 = BacktransPOS;
      goto LABEL_284;
    }
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 168))(a2, a3);
    if ((BacktransPOS & 0x80000000) != 0) {
      goto LABEL_283;
    }
    int v25 = v215;
    if (v215 == 15)
    {
      uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[1] + 168))(a2, a3, HIWORD(v217), 7, 1, &v198, &v217);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      unsigned int v191 = v198;
      int v25 = v215;
    }
    BOOL v26 = (v25 - 9) < 6 || v25 == 4;
    if (!v26) {
      goto LABEL_206;
    }
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 168))(a2, a3, HIWORD(v217), 1, 1, (char *)&v216 + 2, &v217);
    if ((BacktransPOS & 0x80000000) != 0) {
      goto LABEL_283;
    }
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 168))(a2, a3, HIWORD(v217), 2, 1, &v216, &v217);
    if ((BacktransPOS & 0x80000000) != 0) {
      goto LABEL_283;
    }
    HIDWORD(v189) = (unsigned __int16)v216;
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 5, &v214, &v217);
    if ((BacktransPOS & 0x80000000) != 0) {
      goto LABEL_283;
    }
    if (*((_DWORD *)a1 + 22))
    {
      uint64_t BacktransPOS = com_mosynt_GetBacktransPOS(a1[5], a1[6], a1[7], v214, __s);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      int v214 = __s;
      int v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a1[1] + 160);
      uint64_t v28 = HIWORD(v217);
      unsigned __int16 v29 = cstdlib_strlen(__s);
      uint64_t BacktransPOS = v27(a2, a3, v28, 5, v29, v214, &v196);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
    }
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 6, &v213, &v217);
    if ((BacktransPOS & 0x80000000) != 0) {
      goto LABEL_283;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[1] + 184))(a2, a3, HIWORD(v217), 10, &v199) & 0x80000000) != 0|| (unsigned __int16)v199 != 1)
    {
      uint64_t v208 = "";
    }
    else
    {
      uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 10, &v208, &v217);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
    }
    strcpy(v211, "~");
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[1] + 184))(a2, a3, HIWORD(v217), 9, &v199) & 0x80000000) == 0&& (unsigned __int16)v199 == 1)
    {
      uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 9, &v212, &v217);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      if ((!*v212
         || (v211[0] = *v212) == 0
         || !LH_stricmp(v212, v203)
         || !LH_stricmp(v212, "normal"))
        && ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[1] + 184))(a2, a3, HIWORD(v217), 12, &v199) & 0x80000000) == 0&& (unsigned __int16)v199 == 1)
      {
        uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 12, &v202, &v217);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t v30 = a1[37];
        if (v30)
        {
          uint64_t ReadOnly = ssftmap_FindReadOnly(v30, v202, &v201);
          if ((ReadOnly & 0x80000000) != 0)
          {
            uint64_t v32 = ReadOnly;
            if ((ReadOnly & 0x1FFF) != 0x14) {
              goto LABEL_284;
            }
          }
          else
          {
            v211[0] = *v201;
          }
        }
      }
    }
    __int16 v205 = 0;
    if (*((_DWORD *)a1 + 22) || *((_DWORD *)a1 + 66))
    {
      uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 13, &v206, &v217);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      char v33 = *v206;
      if (!*v206) {
        char v33 = 48;
      }
      LOBYTE(v205) = v33;
    }
    uint64_t v34 = HIWORD(v217);
    int v225 = 0;
    uint64_t v223 = 0;
    unsigned int v224 = 0;
    unsigned __int16 v222 = 0;
    strcpy(__src, "docclass_");
    uint64_t v221 = 0;
    char v219 = 0;
    strcpy(v204, "~");
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[1] + 184))(a2, a3, v34, 14, (char *)&v225 + 2) & 0x80000000) != 0|| HIWORD(v225) != 1)
    {
      goto LABEL_67;
    }
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, v34, 14, &v224, &v225);
    if ((BacktransPOS & 0x80000000) != 0) {
      goto LABEL_283;
    }
    if (!hlp_NLUStrFind(v224, "S_CLASS", &v223, &v222)
      && !hlp_NLUStrFind(v224, "I_CLASS", &v223, &v222)
      && !hlp_NLUStrFind(v224, "E_CLASS", &v223, &v222))
    {
      goto LABEL_67;
    }
    if (!*((_DWORD *)a1 + 63))
    {
      v204[0] = *v223;
      goto LABEL_67;
    }
    uint64_t v35 = *(void *)(*a1 + 8);
    int v36 = cstdlib_strlen(v223);
    uint64_t v37 = (char *)heap_Alloc(v35, (v36 + 10));
    if (!v37) {
      break;
    }
    long long v42 = v37;
    cstdlib_strcpy(v37, __src);
    cstdlib_strncat(v42, v223, v222);
    __int16 v220 = 0;
    uint64_t v43 = (*(uint64_t (**)(void, void, const char *, char *, char ***, __int16 *, char *))(a1[7] + 96))(a1[5], a1[6], "fecfg", v42, &v221, &v220, &v219);
    if ((v43 & 0x80000000) != 0)
    {
      uint64_t v32 = v43;
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v42);
      goto LABEL_284;
    }
    if (v220 == 1 && v221) {
      v204[0] = **v221;
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v42);
LABEL_67:
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 3, &__s1, &v217);
    if ((BacktransPOS & 0x80000000) != 0) {
      goto LABEL_283;
    }
    char v44 = __s1;
    if (!v187) {
      goto LABEL_122;
    }
    if (4 * cstdlib_strlen(__s1) - 125 > 0xFFFFFFFFFFFFFF7ELL) {
      unsigned int v45 = 128;
    }
    else {
      unsigned int v45 = 4 * cstdlib_strlen(__s1) + 4;
    }
    uint64_t v46 = heap_Realloc(*(uint64_t **)(*a1 + 8), v23, v45);
    if (!v46)
    {
      uint64_t v32 = 2601525258;
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v47, v48, v49, v50, v181);
      return v32;
    }
    char v44 = (char *)v46;
    if (cstdlib_strstr(__s1, "\\TQ\\"")) {
      *((_DWORD *)a1 + 67) = 1;
    }
    if (v215 == 11)
    {
      uint64_t v185 = v22;
      goto LABEL_79;
    }
    if (v215 == 13)
    {
      uint64_t v185 = v22;
      int v194 = 126;
LABEL_79:
      unsigned int v184 = v45;
      uint64_t v51 = __s1;
      uint64_t v52 = (unsigned __int16)cstdlib_strlen(__s1);
      if (v52)
      {
        uint64_t v53 = 0;
        BOOL v54 = 0;
        int v55 = 1;
        int v56 = v194;
        while (1)
        {
          int v57 = v51[v53];
          if (v54)
          {
            BOOL v54 = v57 != 92;
          }
          else
          {
            if (v57 == 92)
            {
              int v58 = v51[v53 + 1];
              if (v58 == 47)
              {
                int v56 = 126;
                int v61 = v194;
                if (v55 == 1) {
                  int v61 = 126;
                }
                int v194 = v61;
LABEL_105:
                BOOL v54 = 1;
                goto LABEL_106;
              }
              if (v58 == 84)
              {
                for (unsigned __int16 i = 1; ; ++i)
                {
                  uint64_t v60 = v53 + 1 + i;
                  if (!v51[v60]) {
                    break;
                  }
                  if (v51[v60] == 92)
                  {
                    v51[v60] = 0;
                    if (*((_WORD *)a1 + 142))
                    {
                      int v182 = v56;
                      uint64_t v183 = a5;
                      uint64_t v62 = 0;
                      while (1)
                      {
                        uint64_t v63 = *(const char **)(a1[36] + 8 * v62);
                        if (v63)
                        {
                          if (cstdlib_strlen(v63) >= 4
                            && cstdlib_strstr((char *)(*(void *)(a1[36] + 8 * v62) + 3), &v51[v53 + 1]))
                          {
                            break;
                          }
                        }
                        if (++v62 >= (unint64_t)*((unsigned __int16 *)a1 + 142))
                        {
                          a5 = v183;
                          int v56 = v182;
                          goto LABEL_104;
                        }
                      }
                      int v56 = **(unsigned __int8 **)(a1[36] + 8 * v62);
                      int v64 = v194;
                      if (v55 == 1) {
                        int v64 = **(unsigned __int8 **)(a1[36] + 8 * v62);
                      }
                      int v194 = v64;
                      a5 = v183;
                    }
LABEL_104:
                    v51[v60] = 92;
                    goto LABEL_105;
                  }
                }
                goto LABEL_105;
              }
            }
            BOOL v54 = 0;
            int v55 = 0;
          }
LABEL_106:
          if (++v53 == v52) {
            goto LABEL_109;
          }
        }
      }
      int v56 = v194;
LABEL_109:
      v211[0] = v194;
      int v194 = v56;
      BOOL v22 = v185;
      unsigned int v45 = v184;
    }
    char v65 = __s1;
    unsigned __int16 v66 = cstdlib_strlen(__s1);
    unsigned __int16 v67 = 0;
    uint64_t v68 = v66;
    if (v66)
    {
      BOOL v69 = 0;
      uint64_t v70 = (unsigned __int8 *)(v65 + 1);
      do
      {
        int v71 = *(v70 - 1);
        if (v69)
        {
          BOOL v69 = v71 != 92;
        }
        else if (v71 != 92 || (v72 = *v70, BOOL v69 = 1, v72 != 47) && v72 != 84)
        {
          BOOL v69 = 0;
          uint64_t v73 = v67++;
          v44[v73] = v71;
        }
        ++v70;
        --v68;
      }
      while (v68);
    }
    v44[v67] = 0;
    cstdlib_strcpy(__s1, v44);
    int v74 = __s1;
    int v75 = cstdlib_strlen(__s1);
    uint64_t v76 = utf8_DepesToUtf8((uint64_t)v74, v75 + 1, 0, (uint64_t)v44, v45, &v197, 0);
    if ((v76 & 0x80000000) != 0
      || (int v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160),
          uint64_t v78 = HIWORD(v217),
          __int16 v79 = cstdlib_strlen(v44),
          a3 = v190,
          uint64_t v76 = v77(a2, v190, v78, 3, (unsigned __int16)(v79 + 1), v44, &v217),
          (v76 & 0x80000000) != 0))
    {
      uint64_t v32 = v76;
      goto LABEL_285;
    }
    char __s1 = v44;
    uint64_t v23 = (uint64_t)v44;
LABEL_122:
    if (cstdlib_strcmp(v44, ""))
    {
      if (*((_DWORD *)a1 + 62) && !v192)
      {
        if (v207 && HIWORD(v216) != (unsigned __int16)v200)
        {
          if (HIWORD(v216) > HIWORD(v200))
          {
            hlp_AddTnTag((uint64_t)a1, (unsigned __int16)v188, v207, (uint64_t)v227);
            uint64_t v207 = 0;
          }
        }
        else if ((_WORD)v193)
        {
          int v80 = 0;
          do
          {
            uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 120), " ");
            if ((BacktransPOS & 0x80000000) != 0) {
              goto LABEL_283;
            }
          }
          while ((unsigned __int16)++v80 < (unsigned __int16)v193);
        }
      }
      uint64_t v81 = *((unsigned __int16 *)a1 + 112);
      int v82 = *((unsigned __int16 *)a1 + v81 + 104);
      int v83 = v215;
      if (v215 != 10 && HIDWORD(v188) != 0)
      {
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, v81, "◄");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "/+");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v85, v86, v87, v88, v89);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        HIDWORD(v188) = 0;
        int v83 = v215;
      }
      if (v83 != 11 && v189)
      {
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "↕");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "►");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v90, v91, v92, v93, v94);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        LODWORD(v189) = 0;
      }
      if (!v192 && ((__int16)v191 & 0x80000000) == 0)
      {
        unint64_t v95 = v191 > 1 ? " /" : " #";
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), v95);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v96, v97, v98, v99, v100);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      LOWORD(v199) = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[1] + 184))(a2, v190, HIWORD(v217), 8, &v199) & 0x80000000) == 0&& (unsigned __int16)v199 == 1)
      {
        uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 168))(a2, v190, HIWORD(v217), 8, 1, (char *)&v199 + 2, &v217);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      if (!v192)
      {
        __int16 v104 = HIWORD(v216);
        if (*(unsigned char *)(v218 + HIWORD(v216) - 1))
        {
          __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(v218, HIWORD(v216));
          uint64_t BacktransPOS = com_depes_AddToLayerN(v22, *((unsigned __int16 *)a1 + 113), (char *)(v218 + HIWORD(v216) - (unsigned __int16)(v104 - PreviousUtf8Offset)), (unsigned __int16)(v104 - PreviousUtf8Offset));
          if ((BacktransPOS & 0x80000000) != 0) {
            goto LABEL_283;
          }
        }
        else
        {
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 5, 0, (uint64_t)"unexpected empty orthography when filling depes layer (frompos: %d, topos: %d", v101, v102, v103, HIWORD(v216));
          uint64_t BacktransPOS = com_depes_AddToLayerGen(v22, *((unsigned __int16 *)a1 + 112), " ", 1, 0);
          if ((BacktransPOS & 0x80000000) != 0) {
            goto LABEL_283;
          }
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v106, v107, v108, v109, v110);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      int v111 = v215;
      if (v215 == 10 && !HIDWORD(v188))
      {
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "◄");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "/+");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v112, v113, v114, v115, v116);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        HIDWORD(v188) = 1;
        int v111 = v215;
      }
      if (v111 == 13)
      {
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "►");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "↕");
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v117, v118, v119, v120, v121);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        LODWORD(v189) = 1;
      }
      int v186 = *((unsigned __int16 *)a1 + *((unsigned __int16 *)a1 + 112) + 104);
      unsigned int v122 = cstdlib_strstr(__s1, "▲");
      char __dst = v122;
      if (v122) {
        *unsigned int v122 = 0;
      }
      uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), __s1);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_AddToLayerN(v22, *((unsigned __int16 *)a1 + 113), (char *)(v218 + HIWORD(v216)), (unsigned __int16)v216 - HIWORD(v216));
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      unsigned int v123 = *((unsigned __int16 *)a1 + 114);
      if (*((_DWORD *)a1 + 64) == 1)
      {
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, v123, v214);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      else
      {
        uint64_t BacktransPOS = com_depes_AddToLayerN(v22, v123, v214, 1);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      uint64_t BacktransPOS = com_depes_AddToLayerN(v22, *((unsigned __int16 *)a1 + 115), v213, 1);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_AddToLayerGen(v22, *((unsigned __int16 *)a1 + 116), v211, 1, v211[0] != 126);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_AddToLayerN(v22, *((unsigned __int16 *)a1 + 117), (char *)&v205, 1);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_AddToLayerGen(v22, *((unsigned __int16 *)a1 + 118), v204, 1, 0);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 119), v208);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)v229, v124, v125, v126, v127, v128);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      if (__dst)
      {
        cstdlib_strncpy(__dst, "▲", 3uLL);
        uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), __dst);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
        uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)v229, v129, v130, v131, v132, v133);
        if ((BacktransPOS & 0x80000000) != 0) {
          goto LABEL_283;
        }
      }
      int v193 = *((unsigned __int16 *)a1 + *((unsigned __int16 *)a1 + 112) + 104) - v186;
      if (!*((_DWORD *)a1 + 62))
      {
        int v192 = 0;
LABEL_205:
        unsigned int v191 = 0xFFFF;
        a3 = v190;
        goto LABEL_206;
      }
      int v134 = v186 - v82;
      int v135 = v207;
      if (v207 && HIWORD(v216) != (unsigned __int16)v200)
      {
        int v192 = 0;
        LODWORD(v188) = v134 + v188 + v193;
        goto LABEL_205;
      }
      BOOL v26 = v186 == v82;
      a3 = v190;
      if (!v26)
      {
        int v136 = 0;
        while (1)
        {
          uint64_t BacktransPOS = com_depes_AddToLayerGen(v22, *((unsigned __int16 *)a1 + 120), " ", 1, 0);
          if ((BacktransPOS & 0x80000000) != 0) {
            goto LABEL_283;
          }
          if ((unsigned __int16)++v136 >= (unsigned __int16)v134)
          {
            int v135 = v207;
            break;
          }
        }
      }
      BOOL v26 = v135 == 0;
      int v137 = v188;
      if (!v26) {
        int v137 = v193;
      }
      LODWORD(v188) = v137;
      unsigned int v191 = 0xFFFF;
      int v192 = 0;
    }
LABEL_206:
    int v138 = v215;
    if (v215 == 7 && !v189)
    {
      uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 168))(a2, a3, HIWORD(v217), 1, 1, (char *)&v216 + 2, &v217);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 4, &__dst, &v217);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      if (__s1)
      {
        uint64_t v139 = cstdlib_strchr(__s1, 42);
        if (HIDWORD(v189) - 1 > HIWORD(v216))
        {
          unint64_t v140 = (unint64_t)v139;
          if (v139)
          {
            if (!cstdlib_strchr(v139 + 1, 42))
            {
              unsigned __int16 v146 = (unsigned __int16)__s1;
              if (__s1) {
                unsigned __int16 v146 = *((_WORD *)a1 + *((unsigned __int16 *)a1 + 112) + 104) - v186 - (v140 - (_WORD)__s1);
              }
              int v147 = v146;
              unsigned __int16 v148 = Utf8_LengthInUtf8chars(v140, v146);
              uint64_t BacktransPOS = com_depes_InsertBeforeEnd(v22, *((unsigned __int16 *)a1 + 112), "▲", v147);
              if ((BacktransPOS & 0x80000000) == 0)
              {
                uint64_t BacktransPOS = com_depes_InsertBeforeEnd(v22, *((unsigned __int16 *)a1 + 112), __dst, v147);
                if ((BacktransPOS & 0x80000000) == 0)
                {
                  uint64_t BacktransPOS = com_depes_InsertBeforeEnd(v22, *((unsigned __int16 *)a1 + 112), "▼", v147);
                  if ((BacktransPOS & 0x80000000) == 0)
                  {
                    cstdlib_strlen(__dst);
                    int v149 = 0;
                    a3 = v190;
                    do
                    {
                      unsigned int v150 = *((unsigned __int16 *)a1 + 114);
                      if (v150 < *((unsigned __int16 *)a1 + 119))
                      {
                        do
                        {
                          uint64_t BacktransPOS = com_depes_InsertBeforeEnd(v22, (unsigned __int16)v150, " ", v148);
                          if ((BacktransPOS & 0x80000000) != 0) {
                            goto LABEL_283;
                          }
                          LOWORD(v150) = v150 + 1;
                        }
                        while (*((unsigned __int16 *)a1 + 119) > (unsigned __int16)v150);
                      }
                      ++v149;
                    }
                    while ((unsigned __int16)cstdlib_strlen(__dst) + 2 > (unsigned __int16)v149);
                    uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v151, v152, v153, v154, v155);
                    if ((BacktransPOS & 0x80000000) == 0) {
                      goto LABEL_218;
                    }
                  }
                }
              }
              goto LABEL_283;
            }
          }
        }
      }
      uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "▲");
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), __dst);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_AddToLayer(v22, *((unsigned __int16 *)a1 + 112), "▼");
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
      uint64_t BacktransPOS = com_depes_FillToMaxLayerSet((uint64_t)v22, (uint64_t)v226, (uint64_t)__b, v141, v142, v143, v144, v145);
      if ((BacktransPOS & 0x80000000) != 0) {
        goto LABEL_283;
      }
LABEL_218:
      if (v207) {
        LODWORD(v188) = v188 + cstdlib_strlen(__dst);
      }
      v193 += cstdlib_strlen(__dst);
      int v138 = v215;
    }
    if (v138 != 6) {
      goto LABEL_290;
    }
    uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 168))(a2, a3, HIWORD(v217), 1, 1, &v200, &v217);
    if ((BacktransPOS & 0x80000000) == 0)
    {
      if (*((_DWORD *)a1 + 62) && v207 && (unsigned __int16)v200 > HIWORD(v200))
      {
        hlp_AddTnTag((uint64_t)a1, (unsigned __int16)v188, v207, (uint64_t)v227);
        int v193 = 0;
        uint64_t v207 = 0;
      }
      uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[1] + 176))(a2, a3, HIWORD(v217), 4, &v207, &v217);
      if ((BacktransPOS & 0x80000000) == 0)
      {
        uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 168))(a2, a3, HIWORD(v217), 2, 1, (char *)&v200 + 2, &v217);
        LODWORD(v188) = v193;
        if ((BacktransPOS & 0x80000000) == 0)
        {
LABEL_290:
          uint64_t BacktransPOS = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[1] + 120))(a2, a3, HIWORD(v217), (char *)&v217 + 2);
          if ((BacktransPOS & 0x80000000) == 0) {
            continue;
          }
        }
      }
    }
    goto LABEL_283;
  }
  uint64_t v32 = 2601525258;
  log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v38, v39, v40, v41, v181);
LABEL_284:
  char v44 = (char *)v23;
  if (v23) {
LABEL_285:
  }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v44);
  return v32;
}

uint64_t hlp_AddTnTag(uint64_t a1, unsigned int a2, char *__s, uint64_t a4)
{
  size_t v8 = 2 * cstdlib_strlen(__s) - 2;
  uint64_t v9 = (uint64_t *)(a1 + 96);
  uint64_t result = com_depes_AddToLayer((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "X");
  if (v8 >= a2)
  {
    if ((result & 0x80000000) == 0)
    {
      unsigned int v16 = *(unsigned __int16 *)(a1 + 240);
      int v17 = cstdlib_strlen(__s);
      uint64_t result = com_depes_AddToLayerN((uint64_t *)(a1 + 96), v16, __s + 1, v17 - 2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = com_depes_AddToLayer((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "Y");
        if ((result & 0x80000000) == 0)
        {
          unsigned int v18 = *(unsigned __int16 *)(a1 + 240);
          int v19 = cstdlib_strlen(__s);
          uint64_t result = com_depes_AddToLayerN(v9, v18, __s + 1, v19 - 2);
          if ((result & 0x80000000) == 0)
          {
            return com_depes_FillToMaxAllLayers((uint64_t)v9, a4, v20, v21, v22, v23, v24, v25);
          }
        }
      }
    }
  }
  else if ((result & 0x80000000) == 0)
  {
    unsigned int v11 = *(unsigned __int16 *)(a1 + 240);
    int v12 = cstdlib_strlen(__s);
    uint64_t result = com_depes_AddToLayerN((uint64_t *)(a1 + 96), v11, __s + 1, v12 - 2);
    if ((result & 0x80000000) == 0)
    {
      int v13 = 2 * cstdlib_strlen(__s) - 2;
      if ((v13 & 0xFFFEu) >= a2)
      {
LABEL_7:
        uint64_t result = com_depes_AddToLayer((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "Y");
        if ((result & 0x80000000) == 0)
        {
          unsigned int v14 = *(unsigned __int16 *)(a1 + 240);
          int v15 = cstdlib_strlen(__s) - 2;
          return com_depes_AddToLayerN(v9, v14, __s + 1, v15);
        }
      }
      else
      {
        while (1)
        {
          uint64_t result = com_depes_AddToLayerGen((uint64_t *)(a1 + 96), *(unsigned __int16 *)(a1 + 240), "~", 1, 0);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (a2 <= (unsigned __int16)++v13) {
            goto LABEL_7;
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_ConvertOrthographyLayer(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 2 * *(unsigned __int16 *)(a1 + 226) + 176);
  if (v2 >= 0x3FFF) {
    unsigned __int16 v3 = -1;
  }
  else {
    unsigned __int16 v3 = 4 * v2;
  }
  unsigned int v4 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), v3);
  if (v4)
  {
    uint64_t v9 = v4;
    cstdlib_strcpy(v4, *(const char **)(a1 + 8 * *(unsigned __int16 *)(a1 + 226) + 112));
    uint64_t v10 = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t))(*(void *)(a1 + 56) + 104))(*(void *)(a1 + 40), *(void *)(a1 + 48), "normal", v9, v2);
    unsigned int v11 = *(void **)(*(void *)a1 + 8);
    if ((v10 & 0x80000000) != 0)
    {
      heap_Free(v11, (uint64_t)v9);
    }
    else
    {
      uint64_t v12 = a1 + 96;
      heap_Free(v11, *(void *)(a1 + 112 + 8 * *(unsigned __int16 *)(a1 + 226)));
      uint64_t v13 = *(unsigned __int16 *)(a1 + 226);
      *(void *)(a1 + 112 + 8 * v13) = v9;
      *(_WORD *)(v12 + 2 * v13 + 80) = v3;
      *(_WORD *)(v12 + 2 * *(unsigned __int16 *)(a1 + 226) + 96) = cstdlib_strlen(v9);
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v5, v6, v7, v8, v15);
    return 2601525258;
  }
  return v10;
}

uint64_t globalbeadapt_DoPostprocessing(uint64_t *a1, const char *a2, char **a3, int a4)
{
  uint64_t v7 = a1;
  char __s2 = 0;
  unsigned __int16 v119 = 0;
  unsigned int v118 = 0;
  char __s = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(a1[4] + 128))(a1[2], a1[3], 0, &__s2, &v119);
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_101;
  }
  __s2[v119] = 0;
  unsigned int v9 = v119;
  if (*a2 == 63 && !v119) {
    goto LABEL_101;
  }
  if (a4)
  {
    uint64_t v8 = utf8_Utf8ToDepes((uint64_t)__s2, v119, 0, (uint64_t)__s2, v119, &v118, 0);
    unsigned int v9 = v118;
    unsigned __int16 v119 = v118;
  }
  if ((_WORD)v9)
  {
    int v10 = 0;
    do
    {
      unint64_t v11 = (unsigned __int16)v10;
      int v12 = __s2[(unsigned __int16)v10];
      if (v12 == 126)
      {
        if ((unsigned __int16)v10 < (unsigned __int16)v9)
        {
          do
          {
            __s2[v11] = __s2[v11 + 1];
            unsigned int v9 = v119;
            ++v11;
          }
          while (v11 < v119);
        }
        unsigned __int16 v119 = --v9;
        --v10;
      }
      else if (v12 == 30)
      {
        if ((unsigned __int16)v10 >= (unsigned __int16)v9)
        {
          unsigned __int16 v14 = 1;
        }
        else
        {
          unsigned __int16 v13 = v9 - v10 + 1;
          unsigned __int16 v14 = 1;
          while (__s2[v11] != 31)
          {
            ++v11;
            ++v14;
            if ((unsigned __int16)v9 == v11)
            {
              int v10 = v9;
              unsigned __int16 v14 = v13;
              goto LABEL_20;
            }
          }
          int v10 = v11;
        }
LABEL_20:
        if ((unsigned __int16)(v10 - v14 + 1) < (unsigned __int16)v9)
        {
          unint64_t v15 = (unsigned __int16)(v10 - v14 + 1);
          do
          {
            __s2[v15] = __s2[v15 + v14];
            ++v15;
            unsigned int v9 = v119;
          }
          while (v15 < v119);
        }
        v9 -= v14;
        unsigned __int16 v119 = v9;
        v10 -= v14;
      }
      ++v10;
    }
    while ((unsigned __int16)v10 < (unsigned __int16)v9);
  }
  else
  {
    LOWORD(v9) = 0;
  }
  __s2[(unsigned __int16)v9] = 0;
  if (*((_DWORD *)v7 + 65))
  {
    unsigned int v16 = v119;
    if (v119)
    {
      unint64_t v17 = 0;
      do
      {
        if (__s2[v17] == 173)
        {
          __s2[v17] = 126;
          unsigned int v16 = v119;
        }
        ++v17;
      }
      while (v17 < v16);
    }
  }
  unsigned int v18 = 0;
  if (!a4 || *((_DWORD *)v7 + 70) != 1) {
    goto LABEL_102;
  }
  if ((int v19 = __s2, a2[cstdlib_strlen(a2) - 1] != 63)
    && !cstdlib_strstr((char *)v7[*((unsigned __int16 *)v7 + 112) + 14], "*?")
    && !*((_DWORD *)v7 + 67)
    || cstdlib_strstr(v19, "\\TQ\\""))
  {
LABEL_101:
    unsigned int v18 = 0;
    goto LABEL_102;
  }
  if (*((_DWORD *)v7 + 68) == 1)
  {
    if (*((_DWORD *)v7 + 69) == 1) {
      int v20 = 23;
    }
    else {
      int v20 = 0;
    }
    int v110 = v20;
  }
  else
  {
    int v110 = 0;
  }
  uint64_t v21 = __s2;
  unsigned int v22 = v119;
  uint64_t v23 = heap_Calloc(*(void **)(*v7 + 8), 10, 16);
  if (!v23)
  {
LABEL_100:
    uint64_t v8 = 2601525258;
    log_OutPublic(*(void *)(*v7 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v24, v25, v26, v27, v107);
    goto LABEL_101;
  }
  uint64_t v28 = v23;
  cstdlib_memset(&__b, 0, 5uLL);
  if (v22) {
    unsigned __int16 v29 = v22 - 1;
  }
  else {
    unsigned __int16 v29 = 0;
  }
  if (v22 >= 2)
  {
    while (v21[v29] == 32)
    {
      if (!--v29) {
        goto LABEL_88;
      }
    }
  }
  if (!v29) {
    goto LABEL_88;
  }
  int v111 = v7;
  uint64_t v112 = v21;
  unsigned __int16 v108 = v29;
  uint64_t v109 = a3;
  uint64_t v30 = 0;
  int v31 = 0;
  unsigned __int16 v115 = 0;
  unint64_t v32 = v29;
  uint64_t v33 = (uint64_t)&v21[v29 - 5];
  uint64_t v34 = 10;
  do
  {
    if (v32 >= 5 && !cstdlib_strncmp(&v21[(v32 - 1)], "A\\"", 2uLL))
    {
      uint64_t v47 = 0;
      while (1)
      {
        if (v32 + v47 == 5) {
          goto LABEL_54;
        }
        if (!cstdlib_strncmp((const char *)(v33 + v47), "\\/T", 3uLL)) {
          break;
        }
        if (--v47 == -4) {
          goto LABEL_54;
        }
      }
      cstdlib_memset(&__b, 0, 5uLL);
      uint64_t v48 = v34;
      unsigned __int16 v49 = 1 - v47;
      cstdlib_strncat((char *)&__b, &v21[(v32 + v47 - 2)], (unsigned __int16)(1 - v47));
      int v36 = 0;
      int v38 = 0;
      int v37 = 4;
      unsigned __int16 v115 = v49;
      uint64_t v34 = v48;
      goto LABEL_63;
    }
LABEL_54:
    if (v32 >= (unsigned __int16)(v115 + 3)
      && !cstdlib_strncmp(&v21[(int)(v32 - (unsigned __int16)(v115 + 3))], "\\T", 2uLL)
      && !cstdlib_strncmp(&v21[(int)(v32 - (unsigned __int16)(v115 + 1))], (const char *)&__b, v115)
      && !cstdlib_strncmp(&v21[(int)v32 - 1], "A\\"", 2uLL))
    {
      int v38 = 0;
      int v37 = 3;
      int v36 = 1;
      goto LABEL_63;
    }
    int v35 = v21[v32];
    if (v35 == 32)
    {
LABEL_62:
      int v36 = 0;
      int v38 = 0;
      uint64_t v30 = (v30 + 1);
      int v37 = 1;
      goto LABEL_63;
    }
    if (v35 == 45)
    {
      int v36 = 0;
      int v37 = 0;
      int v38 = 0;
      uint64_t v30 = (v30 + 1);
    }
    else
    {
      if (v110 == v35) {
        goto LABEL_62;
      }
      if (v35 != 35 && (v35 != 47 || v21[(v32 - 1)] == 92))
      {
        int v46 = 0;
        goto LABEL_70;
      }
      int v36 = 0;
      int v38 = 1;
      int v37 = 2;
    }
LABEL_63:
    uint64_t v114 = (char *)v33;
    if ((unsigned __int16)v31 >= (unsigned __int16)v34)
    {
      uint64_t v42 = heap_Realloc(*(uint64_t **)(*v111 + 8), v28, 32 * (v34 & 0x7FFF));
      if (!v42)
      {
        uint64_t v7 = v111;
        heap_Free(*(void **)(*v111 + 8), v28);
        a3 = v109;
        goto LABEL_100;
      }
      int v39 = v38;
      uint64_t v40 = v30;
      int v41 = v31;
      uint64_t v34 = (2 * v34);
      uint64_t v28 = v42;
    }
    else
    {
      int v39 = v38;
      uint64_t v40 = v30;
      int v41 = v31;
    }
    uint64_t v43 = v28;
    uint64_t v44 = v28 + 16 * (unsigned __int16)v41;
    *(_DWORD *)uint64_t v44 = v37;
    cstdlib_memset((void *)(v44 + 4), 0, 5uLL);
    cstdlib_strncat((char *)(v44 + 4), (const char *)&__b, v115);
    *(_WORD *)(v44 + 10) = v115;
    *(_WORD *)(v44 + 12) = v32;
    int v45 = v41 + 1;
    if (v36)
    {
      cstdlib_memset(&__b, 0, 5uLL);
      unsigned __int16 v115 = 0;
    }
    uint64_t v28 = v43;
    int v31 = v45;
    uint64_t v30 = v40;
    int v46 = v39;
    uint64_t v21 = v112;
    uint64_t v33 = (uint64_t)v114;
LABEL_70:
    if (!(_WORD)--v32) {
      break;
    }
    if ((unsigned __int16)v30 > 2u) {
      break;
    }
    --v33;
  }
  while (!v46);
  if (v108 <= (unsigned __int16)v32 || (_WORD)v31)
  {
    if ((_WORD)v31) {
      goto LABEL_93;
    }
    a3 = v109;
    uint64_t v7 = v111;
LABEL_88:
    uint64_t v8 = 0;
    unsigned int v18 = 0;
    goto LABEL_194;
  }
  LOWORD(v31) = 1;
  *(_DWORD *)uint64_t v28 = 1;
  cstdlib_memset((void *)(v28 + 4), 0, 5uLL);
  *(_WORD *)(v28 + 10) = 0;
  *(_WORD *)(v28 + 12) = v32;
LABEL_93:
  unsigned __int16 v50 = v31 - 1;
  uint64_t v116 = v28;
  if (!(_WORD)v32 && (unsigned __int16)v30 <= 2u && !v46)
  {
    int v53 = 0;
    if (*(_DWORD *)(v28 + 16 * (unsigned __int16)(v31 - 1)) != 3) {
      *(_WORD *)(v28 + 16 * (unsigned __int16)(v31 - 1) + 12) = 0;
    }
    a3 = v109;
    goto LABEL_138;
  }
  if ((_WORD)v31 == 1)
  {
    unsigned __int16 v50 = 0;
    BOOL v51 = 1;
    a3 = v109;
  }
  else
  {
    a3 = v109;
    while (1)
    {
      BOOL v51 = *(_DWORD *)(v28 + 16 * v50) == 2;
      if (*(_DWORD *)(v28 + 16 * v50) != 2) {
        break;
      }
      if (!--v50)
      {
        unsigned __int16 v50 = 0;
        break;
      }
    }
  }
  uint64_t v54 = v50;
  int v55 = *(_DWORD *)(v28 + 16 * v50);
  if (!v55)
  {
LABEL_116:
    uint64_t v56 = v28 + 16 * v54;
    int v57 = *(unsigned __int16 *)(v56 + 12);
    int v53 = v57 + 1;
    *(_WORD *)(v56 + 12) = v57 + 1;
    goto LABEL_138;
  }
  if (v55 != 1)
  {
    int v53 = *(unsigned __int16 *)(v28 + 16 * v50 + 12);
    goto LABEL_138;
  }
  if (v51)
  {
    unsigned __int16 v50 = 0;
    goto LABEL_116;
  }
  uint64_t v58 = v50 - 1;
  uint64_t v59 = (int *)(v28 + 16 * v58);
  int v60 = *v59;
  if (*v59 == 4)
  {
    uint64_t v63 = v116 + 16 * v58;
    unint64_t v64 = *(unsigned __int16 *)(v63 + 12) - (unint64_t)*(unsigned __int16 *)(v116 + 16 * v50 + 12);
    if (v64 == cstdlib_strlen((const char *)(v63 + 4)) + 5)
    {
      int v53 = *(unsigned __int16 *)(v116 + 16 * (unsigned __int16)(v50 - 1) + 12)
          - *(unsigned __int16 *)(v116 + 16 * (unsigned __int16)(v50 - 1) + 10)
          - 4;
      goto LABEL_127;
    }
    int v60 = *v59;
  }
  else if (v60 == 3)
  {
    uint64_t v61 = v116;
    int v62 = *(unsigned __int16 *)(v116 + 16 * v50 + 12);
    if (*(unsigned __int16 *)(v116 + 16 * v58 + 12) - v62 == *(unsigned __int16 *)(v116 + 16 * v58 + 10) + 4)
    {
      int v53 = *(unsigned __int16 *)(v116 + 16 * (unsigned __int16)(v50 - 1) + 12)
          - *(unsigned __int16 *)(v116 + 16 * (unsigned __int16)(v50 - 1) + 10)
          - 3;
LABEL_127:
      --v50;
      goto LABEL_138;
    }
LABEL_137:
    int v53 = v62 + 1;
    *(_WORD *)(v61 + 16 * v50 + 12) = v62 + 1;
    goto LABEL_138;
  }
  uint64_t v61 = v116;
  if (v60 != 1)
  {
    int v62 = *(unsigned __int16 *)(v116 + 16 * v50 + 12);
    goto LABEL_137;
  }
  if (v50)
  {
    while (*(_DWORD *)(v116 + 16 * (v50 - 1)) == 1
         && *(unsigned __int16 *)(v116 + 16 * (v50 - 1) + 12)
          - *(unsigned __int16 *)(v116 + 16 * v50 + 12) == 1)
    {
      if (!--v50) {
        goto LABEL_134;
      }
    }
  }
  else
  {
LABEL_134:
    unsigned __int16 v50 = 0;
  }
  uint64_t v65 = v116 + 16 * v50;
  int v66 = *(unsigned __int16 *)(v65 + 12);
  int v53 = v66 + 1;
  *(_WORD *)(v65 + 12) = v66 + 1;
LABEL_138:
  unsigned __int16 v67 = __s2;
  unsigned int v68 = v119;
  unsigned int v121 = v119;
  if (!v119) {
    goto LABEL_183;
  }
  char __s = (char *)heap_Calloc(*(void **)(*v111 + 8), v119, 1);
  if (__s)
  {
    unsigned int v69 = ~v50 | 0xFFFF0000;
    uint64_t v70 = v69 + (unsigned __int16)v31;
    if ((int)(v69 + (unsigned __int16)v31) >= 0 && (unsigned __int16)v31 > (unsigned __int16)(v69 + v31))
    {
      unsigned int v107 = v53;
      uint64_t v71 = 0;
      uint64_t v113 = 16 * (v69 + (unsigned __int16)v31);
      uint64_t v72 = v116 - 16 * v70 + 16 * (unsigned __int16)v31;
      while (1)
      {
        long long v122 = 0uLL;
        long long __b = *(_OWORD *)(v72 + v71 - 16);
        if (!v71) {
          break;
        }
        if (__b == 4)
        {
          uint64_t inserted = hlp_insert_question_Tag((uint64_t)v111, (const char **)&__s, &v121, 3, (char *)&__b + 4);
          if ((inserted & 0x80000000) != 0) {
            goto LABEL_196;
          }
          if (v70 + 1 >= (unint64_t)(unsigned __int16)v31)
          {
            if ((int)(v68 - 1) > WORD6(__b))
            {
              cstdlib_memset(v124, 0, 5uLL);
              uint64_t v76 = v124;
              uint64_t v74 = (uint64_t)v111;
              int v75 = 0;
              goto LABEL_166;
            }
          }
          else
          {
            long long v122 = *(_OWORD *)(v72 + v71 - 32);
            if (v122 <= 1 && !BYTE4(v122))
            {
              uint64_t v74 = (uint64_t)v111;
              int v75 = 0;
              uint64_t v76 = (char *)&v122 + 4;
              goto LABEL_166;
            }
          }
        }
        else if (__b == 3)
        {
          if (v113 != v71)
          {
            long long v122 = *(_OWORD *)(v72 + v71);
            if (v122 <= 1 && !BYTE4(v122))
            {
              uint64_t inserted = hlp_insert_question_Tag((uint64_t)v111, (const char **)&__s, &v121, 1, (char *)&v122 + 4);
              if ((inserted & 0x80000000) != 0)
              {
LABEL_196:
                uint64_t v8 = inserted;
                goto LABEL_190;
              }
            }
          }
LABEL_154:
          uint64_t v74 = (uint64_t)v111;
          int v75 = 2;
          goto LABEL_165;
        }
LABEL_167:
        int v77 = *(_DWORD *)(v72 + v71 - 16);
        uint64_t v78 = v72 + v71;
        unsigned __int16 v79 = *(_WORD *)(v72 + v71 - 4);
        if (v70 >= (unsigned __int16)v31 - 1)
        {
          if (v77 == 4) {
            ++v79;
          }
          unsigned int v87 = v79;
          uint64_t v89 = (uint64_t)v111;
          uint64_t v90 = (uint64_t)v67;
          unsigned int v88 = v68;
        }
        else
        {
          unsigned int v80 = *(_DWORD *)(v78 - 32);
          __int16 v81 = *(_WORD *)(v78 - 22);
          unsigned __int16 v82 = *(_WORD *)(v78 - 20);
          if ((v77 - 3) < 2) {
            ++v79;
          }
          __int16 v83 = v82 - v81;
          unsigned __int16 v84 = v82 - v81 - 5;
          unsigned __int16 v85 = v83 - 4;
          if (v80 != 3) {
            unsigned __int16 v85 = v82;
          }
          if (v80 == 4) {
            unsigned __int16 v85 = v84;
          }
          unsigned __int16 v86 = v82 - 1;
          if (v80 <= 1) {
            unsigned __int16 v85 = v86;
          }
          unsigned int v87 = v79;
          unsigned int v88 = v85;
          uint64_t v89 = (uint64_t)v111;
          uint64_t v90 = (uint64_t)v67;
        }
        uint64_t v91 = hlp_insert_phonemes(v89, (const char **)&__s, &v121, v90, v87, v88);
        uint64_t v8 = v91;
        if ((v91 & 0x80000000) == 0)
        {
          ++v70;
          v71 -= 16;
          if ((unsigned __int16)v31 != (unsigned __int16)v70) {
            continue;
          }
        }
        a3 = v109;
        LOWORD(v53) = v107;
        if ((v91 & 0x80000000) == 0) {
          goto LABEL_183;
        }
        unsigned int v18 = 0;
        goto LABEL_191;
      }
      if (BYTE4(__b))
      {
        if (__b == 4)
        {
          uint64_t v74 = (uint64_t)v111;
          int v75 = 5;
        }
        else
        {
          if (__b == 3) {
            goto LABEL_154;
          }
          uint64_t v74 = (uint64_t)v111;
          int v75 = 4;
        }
      }
      else
      {
        uint64_t v74 = (uint64_t)v111;
        int v75 = 0;
      }
LABEL_165:
      uint64_t v76 = (char *)&__b + 4;
LABEL_166:
      uint64_t v8 = hlp_insert_question_Tag(v74, (const char **)&__s, &v121, v75, v76);
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_190;
      }
      goto LABEL_167;
    }
LABEL_183:
    uint64_t v92 = __s;
    unsigned int v93 = cstdlib_strlen(__s);
    uint64_t v7 = v111;
    uint64_t v94 = (char *)heap_Calloc(*(void **)(*v111 + 8), v93 + (unsigned __int16)v53 + 1, 1);
    unsigned int v18 = v94;
    if (v94)
    {
      cstdlib_strncat(v94, __s2, (unsigned __int16)v53);
      cstdlib_strncat(v18, v92, v93);
      uint64_t v105 = com_depes_PrepareLayersForLen(v111 + 12, (unsigned __int16)(v53 + v93), v99, v100, v101, v102, v103, v104);
      if ((v105 & 0x80000000) == 0)
      {
        uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *, void))(v111[4] + 120))(v111[2], v111[3], 0, v18, (unsigned __int16)(v53 + v93 + 1));
        uint64_t v28 = v116;
        if ((v106 & 0x80000000) == 0) {
          uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(v111[4] + 128))(v111[2], v111[3], 0, &__s2, &v119);
        }
        uint64_t v8 = v106;
        goto LABEL_194;
      }
      uint64_t v8 = v105;
    }
    else
    {
      uint64_t v8 = 2601525258;
      log_OutPublic(*(void *)(*v111 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v95, v96, v97, v98, v107);
    }
    uint64_t v28 = v116;
    goto LABEL_194;
  }
  uint64_t v8 = 2601525258;
LABEL_190:
  unsigned int v18 = 0;
  a3 = v109;
LABEL_191:
  uint64_t v28 = v116;
  uint64_t v7 = v111;
LABEL_194:
  heap_Free(*(void **)(*v7 + 8), v28);
LABEL_102:
  if (__s) {
    heap_Free(*(void **)(*v7 + 8), (uint64_t)__s);
  }
  if (v18) {
    heap_Free(*(void **)(*v7 + 8), (uint64_t)v18);
  }
  *a3 = __s2;
  return v8;
}

uint64_t globalbeadapt_SplitWordRecordsWithSpecialChar(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, char *__src)
{
  unsigned __int16 v125 = 0;
  int v123 = 0;
  unsigned int v124 = 0;
  long long v122 = 0;
  uint64_t v120 = 0;
  char __s = 0;
  *(void *)unsigned int v118 = 0;
  unsigned __int16 v119 = 0;
  char __s1 = 0;
  uint64_t v117 = 0;
  int v114 = 0;
  int v115 = 0;
  int v112 = 0;
  int v113 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  long long __b = 0;
  uint64_t v109 = 0;
  cstdlib_strcpy(__dst, __src);
  cstdlib_strcat(__dst, "_");
  cstdlib_memset(&__b, 0, 0x10uLL);
  cstdlib_memset(&v110, 0, 0x10uLL);
  uint64_t v12 = hlp_dynstr_init(*a1, (uint64_t)&__b, 0x20u, 16);
  if ((v12 & 0x80000000) != 0
    || (uint64_t v12 = hlp_dynstr_init(*a1, (uint64_t)&v110, 0x20u, 16), (v12 & 0x80000000) != 0)
    || (uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[1] + 104))(a2, a3, 2, a4, &v125), (v12 & 0x80000000) != 0))
  {
    uint64_t v100 = v12;
    unsigned int v18 = 0;
    goto LABEL_125;
  }
  unsigned int v105 = a4;
  unsigned __int16 v106 = cstdlib_strlen(a5) + 1;
  uint64_t v13 = heap_Alloc(*(void *)(*a1 + 8), v106);
  if (!v13)
  {
    uint64_t v100 = 2601525258;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v14, v15, v16, v17, v104);
    return v100;
  }
  unsigned int v18 = (char *)v13;
  while (1)
  {
    uint64_t v19 = a1[1];
    if (!v125)
    {
      uint64_t v102 = *(uint64_t (**)(uint64_t, uint64_t, void, void, void, const char *, int *))(v19 + 160);
      __int16 v103 = cstdlib_strlen(a5);
      uint64_t v20 = v102(a2, a3, v105, 0, (unsigned __int16)(v103 + 1), a5, &v123);
LABEL_134:
      uint64_t v100 = v20;
      goto LABEL_125;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 168))(a2, a3);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    if (v124 <= 0xA && ((1 << v124) & 0x610) != 0) {
      break;
    }
LABEL_122:
    uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 120))(a2, a3, v125, &v125);
    if ((v100 & 0x80000000) != 0) {
      goto LABEL_125;
    }
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[1] + 168))(a2, a3, v125, 1, 1, (char *)&v115 + 2, (char *)&v123 + 2);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_134;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[1] + 168))(a2, a3, v125, 2, 1, &v115, (char *)&v123 + 2);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_134;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v125, 3, &v122, (char *)&v123 + 2);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_134;
  }
  unsigned int v22 = v122;
  if (v122)
  {
    unsigned __int16 v23 = 0;
    do
    {
      ++v23;
      uint64_t v24 = cstdlib_strstr(v22, "\x17");
      unsigned int v22 = v24 + 1;
    }
    while (v24);
  }
  else
  {
    unsigned __int16 v23 = 0;
  }
  uint64_t v120 = (char *)&a5[HIWORD(v115)];
  char __s = 0;
  size_t v25 = (unsigned __int16)(v115 - HIWORD(v115));
  cstdlib_strncpy(v18, v120, v25);
  unsigned __int16 v26 = 0;
  v18[v25] = 0;
  uint64_t v27 = v18;
  do
  {
    char __s = v27;
    ++v26;
    hlp_SearchMorph(__src, __dst, &__s);
    uint64_t v27 = __s + 1;
  }
  while (__s);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v125, 5, &v119, (char *)&v123 + 2);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_134;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[1] + 168))(a2, a3, v125, 7, 1, (char *)&v114 + 2, (char *)&v123 + 2);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_134;
  }
  HIWORD(v113) = 0;
  *(void *)unsigned int v118 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[1] + 184))(a2, a3, v125, 14, (char *)&v113 + 2) & 0x80000000) == 0&& HIWORD(v113) == 1)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *, char *))(a1[1] + 176))(a2, a3, v125, 14, v118, (char *)&v123 + 2);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
  }
  HIWORD(v113) = 0;
  uint64_t v117 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[1] + 184))(a2, a3, v125, 9, (char *)&v113 + 2) & 0x80000000) == 0&& HIWORD(v113) == 1)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v125, 9, &v117, (char *)&v123 + 2);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
  }
  LOWORD(v113) = 0;
  LOWORD(v114) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[1] + 184))(a2, a3, v125, 8, &v113) & 0x80000000) == 0
    && (unsigned __int16)v113 == 1)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[1] + 168))(a2, a3, v125, 8, 1, &v114, (char *)&v123 + 2);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
  }
  HIWORD(v112) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[1] + 184))(a2, a3, v125, 13, (char *)&v112 + 2) & 0x80000000) == 0&& HIWORD(v112) == 1)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v125, 13, &__s1, (char *)&v123 + 2);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
  }
  if (v23 < 2u || v26 < v23)
  {
    unsigned int v50 = (unsigned __int16)v115;
LABEL_114:
    if (HIWORD(v115) <= 1u) {
      unint64_t v99 = 1;
    }
    else {
      unint64_t v99 = HIWORD(v115);
    }
    if (v99 < v50)
    {
      do
      {
        if (a5[v99] == 95 && !cstdlib_strchr(";:,", a5[v99 - 1])) {
          a5[v99] = 45;
        }
        ++v99;
      }
      while (v99 < (unsigned __int16)v115);
    }
    goto LABEL_122;
  }
  if (*(void *)v118)
  {
    uint64_t v20 = hlp_dynstr_add(*a1, (uint64_t)&__b, *(const char **)v118, 2);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    uint64_t v20 = hlp_dynstr_add(*a1, (uint64_t)&v110, *(const char **)v118, 2);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    if (!hlp_NLUStrExist(*(char **)v118, "S_PUNC"))
    {
      hlp_NLUStrRemoveKeyVal(v110, "S_PUNC");
      hlp_NLUStrRemoveKeyVal(__b, "S_PUNC");
    }
    if (!hlp_NLUStrExist(*(char **)v118, "PUNC"))
    {
      hlp_NLUStrRemoveKeyVal(*(char **)v118, "PUNC");
      hlp_NLUStrRemoveKeyVal(v110, "PUNC");
    }
    if (!hlp_NLUStrExist(*(char **)v118, "BNDSHAPE"))
    {
      hlp_NLUStrRemoveKeyVal(*(char **)v118, "BNDSHAPE");
      hlp_NLUStrRemoveKeyVal(v110, "BNDSHAPE");
    }
    if (!hlp_NLUStrExist(*(char **)v118, "E_PUNC"))
    {
      hlp_NLUStrRemoveKeyVal(*(char **)v118, "E_PUNC");
      hlp_NLUStrRemoveKeyVal(v110, "E_PUNC");
    }
  }
  unsigned __int16 v28 = cstdlib_strlen(v122) + 1;
  if (v106 >= v28)
  {
LABEL_52:
    cstdlib_strcpy(v18, v122);
    uint64_t v34 = cstdlib_strstr(v18, "\x17");
    char __s = v34;
    if (v34)
    {
      *uint64_t v34 = 0;
      char __s = v34 + 1;
    }
    uint64_t v120 = (char *)&a5[HIWORD(v115)];
    unsigned int v35 = a5[(unsigned __int16)v115];
    a5[(unsigned __int16)v115] = 0;
    int v36 = hlp_SearchMorph(__src, __dst, &v120);
    unsigned __int16 v37 = (_WORD)v120 - (_WORD)a5;
    LOWORD(v115) = (_WORD)v120 - (_WORD)a5;
    if (v36)
    {
      for (unint64_t i = HIWORD(v115); i < v37; ++i)
      {
        if (a5[i] == 95) {
          a5[i] = 45;
        }
      }
    }
    HIWORD(v115) = v37 + 1;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v125, 2, 1, &v115, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    unsigned int v104 = v35;
    int v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
    uint64_t v40 = v125;
    __int16 v41 = cstdlib_strlen(v18);
    uint64_t v20 = v39(a2, a3, v40, 3, (unsigned __int16)(v41 + 1), v18, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    if ((unsigned __int16)v113 == 1)
    {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v125, 8, 1, &v112, &v123);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_134;
      }
    }
    if (HIWORD(v112) == 1)
    {
      int v42 = cstdlib_strcmp(__s1, "0");
      uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(a1[1] + 160);
      uint64_t v44 = v125;
      if (v42)
      {
        uint64_t v45 = (unsigned __int16)(cstdlib_strlen("1") + 1);
        uint64_t v46 = a2;
        uint64_t v47 = a3;
        uint64_t v48 = v44;
        unsigned __int16 v49 = "1";
      }
      else
      {
        __int16 v51 = cstdlib_strlen(__s1);
        unsigned __int16 v49 = __s1;
        uint64_t v45 = (unsigned __int16)(v51 + 1);
        uint64_t v46 = a2;
        uint64_t v47 = a3;
        uint64_t v48 = v44;
      }
      uint64_t v20 = v43(v46, v47, v48, 13, v45, v49, &v123);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_134;
      }
    }
    uint64_t v52 = cstdlib_strstr(__s, "\x17");
    if (v52)
    {
      int v53 = v52;
      do
      {
        *int v53 = 0;
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 80))(a2, a3, v125, &v125);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_134;
        }
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1[1] + 160))(a2, a3, v125, 0, 1, &v124, &v123);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_134;
        }
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v125, 1, 1, (char *)&v115 + 2, &v123);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_134;
        }
        uint64_t v120 = (char *)&a5[HIWORD(v115)];
        int v54 = hlp_SearchMorph(__src, __dst, &v120);
        unsigned __int16 v55 = (_WORD)v120 - (_WORD)a5;
        LOWORD(v115) = (_WORD)v120 - (_WORD)a5;
        if (v54)
        {
          for (unint64_t j = HIWORD(v115); j < v55; ++j)
          {
            if (a5[j] == 95) {
              a5[j] = 45;
            }
          }
        }
        HIWORD(v115) = v55 + 1;
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v125, 2, 1, &v115, &v123);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_134;
        }
        int v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
        uint64_t v58 = v125;
        uint64_t v59 = __s;
        __int16 v60 = cstdlib_strlen(__s);
        uint64_t v20 = v57(a2, a3, v58, 3, (unsigned __int16)(v60 + 1), v59, &v123);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_134;
        }
        uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
        uint64_t v62 = v125;
        __int16 v63 = cstdlib_strlen(v119);
        uint64_t v20 = v61(a2, a3, v62, 5, (unsigned __int16)(v63 + 1), v119, &v123);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_134;
        }
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v125, 7, 1, (char *)&v114 + 2, &v123);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_134;
        }
        if ((unsigned __int16)v113 == 1)
        {
          uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v125, 8, 1, &v112, &v123);
          if ((v20 & 0x80000000) != 0) {
            goto LABEL_134;
          }
        }
        if (HIWORD(v112) == 1)
        {
          int v64 = cstdlib_strcmp(__s1, "0");
          uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(a1[1] + 160);
          uint64_t v66 = v125;
          if (v64)
          {
            uint64_t v67 = (unsigned __int16)(cstdlib_strlen("1") + 1);
            uint64_t v68 = a2;
            uint64_t v69 = a3;
            uint64_t v70 = v66;
            uint64_t v71 = "1";
          }
          else
          {
            __int16 v72 = cstdlib_strlen(__s1);
            uint64_t v71 = __s1;
            uint64_t v67 = (unsigned __int16)(v72 + 1);
            uint64_t v68 = a2;
            uint64_t v69 = a3;
            uint64_t v70 = v66;
          }
          uint64_t v20 = v65(v68, v69, v70, 13, v67, v71, &v123);
          if ((v20 & 0x80000000) != 0) {
            goto LABEL_134;
          }
        }
        if (v110)
        {
          uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
          uint64_t v74 = v125;
          __int16 v75 = cstdlib_strlen(v110);
          uint64_t v20 = v73(a2, a3, v74, 14, (unsigned __int16)(v75 + 1), v110, &v123);
          if ((v20 & 0x80000000) != 0) {
            goto LABEL_134;
          }
        }
        if (v117)
        {
          uint64_t v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
          uint64_t v77 = v125;
          __int16 v78 = cstdlib_strlen(v117);
          uint64_t v20 = v76(a2, a3, v77, 9, (unsigned __int16)(v78 + 1), v117, &v123);
          if ((v20 & 0x80000000) != 0) {
            goto LABEL_134;
          }
        }
        char __s = v53 + 1;
        int v53 = cstdlib_strstr(v53 + 1, "\x17");
      }
      while (v53);
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 80))(a2, a3, v125, &v125);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1[1] + 160))(a2, a3, v125, 0, 1, &v124, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v125, 1, 1, (char *)&v115 + 2, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    unsigned __int16 v79 = (char *)&a5[HIWORD(v115)];
    uint64_t v120 = v79;
    unsigned int v80 = cstdlib_strstr(v79, " ");
    if (v80)
    {
      __int16 v81 = (_WORD)v80 - (_WORD)a5;
    }
    else
    {
      __int16 v82 = HIWORD(v115);
      __int16 v81 = v82 + cstdlib_strlen(v79);
    }
    LOWORD(v115) = v81;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v125, 2, 1, &v115, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    __int16 v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
    uint64_t v84 = v125;
    unsigned __int16 v85 = __s;
    __int16 v86 = cstdlib_strlen(__s);
    uint64_t v20 = v83(a2, a3, v84, 3, (unsigned __int16)(v86 + 1), v85, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    unsigned int v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
    uint64_t v88 = v125;
    __int16 v89 = cstdlib_strlen(v119);
    uint64_t v20 = v87(a2, a3, v88, 5, (unsigned __int16)(v89 + 1), v119, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[1] + 160))(a2, a3, v125, 7, 1, (char *)&v114 + 2, &v123);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    if ((unsigned __int16)v113 == 1)
    {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[1] + 160))(a2, a3, v125, 8, 1, &v114, &v123);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_134;
      }
    }
    if (HIWORD(v112) == 1)
    {
      uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
      uint64_t v91 = v125;
      __int16 v92 = cstdlib_strlen(__s1);
      uint64_t v20 = v90(a2, a3, v91, 13, (unsigned __int16)(v92 + 1), __s1, &v123);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_134;
      }
    }
    if (__b)
    {
      unsigned int v93 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
      uint64_t v94 = v125;
      __int16 v95 = cstdlib_strlen(__b);
      uint64_t v20 = v93(a2, a3, v94, 14, (unsigned __int16)(v95 + 1), __b, &v123);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_134;
      }
    }
    if (v117)
    {
      uint64_t v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
      uint64_t v97 = v125;
      __int16 v98 = cstdlib_strlen(v117);
      uint64_t v20 = v96(a2, a3, v97, 9, (unsigned __int16)(v98 + 1), v117, &v123);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_134;
      }
    }
    unsigned int v50 = (unsigned __int16)v115;
    a5[(unsigned __int16)v115] = v104;
    goto LABEL_114;
  }
  unsigned __int16 v29 = (char *)heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v18, v28);
  char __s = v29;
  if (v29)
  {
    unsigned int v18 = v29;
    unsigned __int16 v106 = v28;
    goto LABEL_52;
  }
  uint64_t v100 = 2601525258;
  log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v30, v31, v32, v33, v104);
LABEL_125:
  if (__b)
  {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)__b);
    long long __b = 0;
  }
  LODWORD(v109) = 0;
  if (v110)
  {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v110);
    int v110 = 0;
  }
  LODWORD(v111) = 0;
  if (v18) {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v18);
  }
  return v100;
}

uint64_t hlp_SearchMorph(const char *a1, const char *a2, char **a3)
{
  int v5 = *(unsigned __int8 *)a1;
  uint64_t v6 = *a3;
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v7 = cstdlib_strstr(v6, a2);
  if (!v7)
  {
    uint64_t v6 = *a3;
LABEL_5:
    uint64_t v8 = cstdlib_strstr(v6, "_");
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = &v7[cstdlib_strlen(a1)];
  uint64_t v9 = 1;
LABEL_6:
  *a3 = v8;
  return v9;
}

uint64_t globalbeadapt_RemoveSpecialChar(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v30 = 0;
  int v28 = 0;
  unsigned int v29 = 0;
  char __s = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[1] + 104))(a2, a3, 2, a4, &v30);
  if ((v7 & 0x80000000) == 0)
  {
    unsigned __int16 v8 = v30;
    if (v30)
    {
      unsigned __int16 v9 = 0;
      int v10 = 0;
      while (1)
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1[1] + 168))(a2, a3, v8, 0, 1, &v29, (char *)&v28 + 2);
        if ((v11 & 0x80000000) != 0) {
          break;
        }
        if (v29 <= 0xA && ((1 << v29) & 0x610) != 0)
        {
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[1] + 176))(a2, a3, v30, 3, &__s, (char *)&v28 + 2);
          if ((v11 & 0x80000000) != 0) {
            break;
          }
          unsigned __int16 v13 = cstdlib_strlen(__s) + 1;
          if (v9 < v13)
          {
            uint64_t v14 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v10, v13);
            if (!v14)
            {
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v15, v16, v17, v18, v26);
              uint64_t v7 = 2601525258;
              if (!v10) {
                return v7;
              }
LABEL_22:
              heap_Free(*(void **)(*a1 + 8), (uint64_t)v10);
              return v7;
            }
            int v10 = (char *)v14;
            unsigned __int16 v9 = v13;
          }
          cstdlib_strcpy(v10, __s);
          uint64_t v19 = cstdlib_strstr(v10, "\x17");
          if (v19)
          {
            uint64_t v20 = v19;
            do
            {
              unsigned __int16 v21 = cstdlib_strlen(v20);
              cstdlib_memmove(v20, v20 + 1, v21);
              uint64_t v20 = cstdlib_strstr(v20, "\x17");
            }
            while (v20);
          }
          unsigned int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[1] + 160);
          uint64_t v23 = v30;
          __int16 v24 = cstdlib_strlen(v10);
          uint64_t v11 = v22(a2, a3, v23, 3, (unsigned __int16)(v24 + 1), v10, &v28);
          if ((v11 & 0x80000000) != 0) {
            break;
          }
        }
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[1] + 120))(a2, a3, v30, &v30);
        if ((v7 & 0x80000000) == 0)
        {
          unsigned __int16 v8 = v30;
          if (v30) {
            continue;
          }
        }
        goto LABEL_21;
      }
      uint64_t v7 = v11;
LABEL_21:
      if (!v10) {
        return v7;
      }
      goto LABEL_22;
    }
  }
  return v7;
}

void *globalbeadapt_DeInit_SpecialSymbolsFromPhonmap(void *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *((unsigned __int16 *)result + 142);
  if (*((_WORD *)result + 142) && result[36])
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v1[36] + 8 * v3);
      if (v4)
      {
        heap_Free(*(void **)(*v1 + 8), v4);
        unsigned int v2 = *((unsigned __int16 *)v1 + 142);
      }
      ++v3;
    }
    while (v3 < v2);
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v1[36]);
  }
  *((_WORD *)v1 + 142) = 0;
  v1[36] = 0;
  return result;
}

uint64_t globalbeadapt_Init_SpecialSymbolsFromPhonmap(uint64_t a1)
{
  unsigned __int16 v26 = 0;
  size_t v25 = 0;
  globalbeadapt_DeInit_SpecialSymbolsFromPhonmap((void *)a1);
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", &v25);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_30;
  }
  if (!*(void *)(a1 + 80)) {
    return Str;
  }
  uint64_t NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual(*(void *)(a1 + 64), *(void *)(a1 + 72), NullHandle, v4)) {
    return Str;
  }
  unsigned __int16 v26 = 0;
  uint64_t v5 = (*(uint64_t (**)(void, void, uint64_t, unsigned __int16 *, void))(*(void *)(a1 + 80) + 144))(*(void *)(a1 + 64), *(void *)(a1 + 72), a1 + 284, &v26, 0);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t Str = v5;
LABEL_30:
    globalbeadapt_DeInit_SpecialSymbolsFromPhonmap((void *)a1);
    return Str;
  }
  uint64_t v6 = heap_Alloc(*(void *)(*(void *)a1 + 8), v26 + 1);
  if (!v6)
  {
    uint64_t Str = 2601525258;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 64000, 0, v7, v8, v9, v10, v25);
    goto LABEL_30;
  }
  uint64_t v11 = (const char *)v6;
  uint64_t Str = (*(uint64_t (**)(void, void, uint64_t, unsigned __int16 *, uint64_t))(*(void *)(a1 + 80) + 144))(*(void *)(a1 + 64), *(void *)(a1 + 72), a1 + 284, &v26, v6);
  if ((Str & 0x80000000) == 0)
  {
    uint64_t v12 = heap_Calloc(*(void **)(*(void *)a1 + 8), *(unsigned __int16 *)(a1 + 284), 8);
    *(void *)(a1 + 288) = v12;
    if (v12)
    {
      if (cstdlib_strlen(v11))
      {
        unint64_t v17 = 0;
        uint64_t v18 = (char *)v11;
        while (v17 < *(unsigned __int16 *)(a1 + 284))
        {
          uint64_t v19 = cstdlib_strchr(v18, 44);
          uint64_t v20 = v19;
          if (v19) {
            *uint64_t v19 = 0;
          }
          if (cstdlib_strlen(v18) != 3)
          {
            uint64_t Str = 2601525248;
            break;
          }
          unsigned __int16 v26 = 0;
          uint64_t v21 = (*(uint64_t (**)(void, void, uint64_t, const char *, unsigned __int16 *, void, char *))(*(void *)(a1 + 80) + 152))(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, "alphabet", &v26, 0, v18);
          if ((v21 & 0x80000000) != 0)
          {
            uint64_t v22 = 0;
            uint64_t Str = 0;
            unsigned __int16 v26 = 0;
          }
          else
          {
            uint64_t Str = v21;
            uint64_t v22 = v26;
          }
          *(void *)(*(void *)(a1 + 288) + 8 * v17) = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v22 + 4);
          if (!*(void *)(*(void *)(a1 + 288) + 8 * v17)) {
            goto LABEL_28;
          }
          if (LH_stricmp(v25, v18)) {
            char v23 = cstdlib_tolower(*v18);
          }
          else {
            char v23 = 126;
          }
          **(unsigned char **)(*(void *)(a1 + 288) + 8 * v17) = v23;
          cstdlib_strcpy((char *)(*(void *)(*(void *)(a1 + 288) + 8 * v17) + 1), ": ");
          if (!v26
            || (uint64_t Str = (*(uint64_t (**)(void, void, uint64_t, const char *, unsigned __int16 *, uint64_t, char *))(*(void *)(a1 + 80) + 152))(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, "alphabet", &v26, *(void *)(*(void *)(a1 + 288) + 8 * v17) + 3, v18), (Str & 0x80000000) == 0))
          {
            if (v20)
            {
              uint64_t v18 = v20 + 1;
              ++v17;
              if (cstdlib_strlen(v11)) {
                continue;
              }
            }
          }
          break;
        }
      }
    }
    else
    {
LABEL_28:
      uint64_t Str = 2601525258;
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 64000, 0, v13, v14, v15, v16, v25);
    }
  }
  heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v11);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_30;
  }
  return Str;
}

uint64_t globalbeadapt_Init_LOO(uint64_t *a1)
{
  uint64_t v19 = 0;
  __int16 v18 = -1;
  unsigned __int8 v17 = 0;
  uint64_t v16 = 0;
  long long __b = 0u;
  long long v15 = 0u;
  a1[37] = 0;
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a1[7] + 96))(a1[5], a1[6], "fecfg", "loo_global_loomapping", &v19, &v18, &v17);
  if ((v2 & 0x80000000) == 0 && v18 == 1)
  {
    unint64_t v3 = a1 + 37;
    cstdlib_memset(&__b, 0, 0x28uLL);
    *(void *)&long long __b = ssftmap_ElemCopyString;
    *((void *)&v15 + 1) = ssftmap_ElemCopyString;
    *((void *)&__b + 1) = ssftmap_ElemFreeString;
    uint64_t v16 = ssftmap_ElemFreeString;
    *(void *)&long long v15 = ssftmap_ElemCompareKeysString;
    int v4 = *(void **)(*a1 + 8);
    v12[0] = __b;
    v12[1] = v15;
    uint64_t v13 = ssftmap_ElemFreeString;
    uint64_t v2 = ssftmap_ObjOpen(v4, 0, v12, a1 + 37);
    if ((v2 & 0x80000000) == 0)
    {
      uint64_t v5 = *v19;
      uint64_t v6 = cstdlib_strchr(*v19, v17);
      if (v6) {
        *uint64_t v6 = 0;
      }
      if (v5)
      {
        while (1)
        {
          uint64_t v7 = cstdlib_strchr(v5, 59);
          uint64_t v8 = v7;
          if (v7) {
            *uint64_t v7 = 0;
          }
          uint64_t v9 = cstdlib_strchr(v5, 44);
          if (!v9) {
            break;
          }
          *uint64_t v9 = 0;
          uint64_t v10 = ssftmap_Insert(*v3, (uint64_t)v5, (uint64_t)(v9 + 1));
          uint64_t v2 = v10;
          if (v8) {
            uint64_t v5 = v8 + 1;
          }
          else {
            uint64_t v5 = 0;
          }
          if ((v10 & 0x80000000) != 0 || !v8) {
            return v2;
          }
        }
        return 2601525255;
      }
    }
  }
  return v2;
}

uint64_t globalbeadapt_DeInit_LOO(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 296);
  if (result)
  {
    uint64_t result = ssftmap_ObjClose(result);
    *(void *)(a1 + 296) = 0;
  }
  return result;
}

uint64_t hlp_insert_question_Tag(uint64_t a1, const char **a2, unsigned int *a3, int a4, char *__s)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned __int16 v10 = cstdlib_strlen(__s);
  __s1[0] = 0;
  switch(a4)
  {
    case 0:
      uint64_t v11 = "\\TQ\\"";
      size_t v12 = 4;
      break;
    case 1:
      uint64_t v11 = "\\/TQ\\"";
      size_t v12 = 5;
      break;
    case 2:
      uint64_t v13 = "\\T";
      size_t v14 = 2;
      goto LABEL_7;
    case 3:
      uint64_t v13 = "\\/T";
      size_t v14 = 3;
LABEL_7:
      cstdlib_strncat(__s1, v13, v14);
      size_t v15 = v10;
      uint64_t v16 = __s;
      goto LABEL_9;
    case 4:
      cstdlib_strncat(__s1, "\\/T", 3uLL);
      cstdlib_strncat(__s1, __s, v10);
      cstdlib_strncat(__s1, "A\\\\T", 4uLL);
      uint64_t v16 = __s;
      size_t v15 = v10;
LABEL_9:
      cstdlib_strncat(__s1, v16, v15);
      uint64_t v11 = "Q\\"";
      size_t v12 = 2;
      break;
    default:
      cstdlib_strncat(__s1, "\\/T", 3uLL);
      cstdlib_strncat(__s1, __s, v10);
      uint64_t v11 = "A\\\\TQ\\"";
      size_t v12 = 6;
      break;
  }
  cstdlib_strncat(__s1, v11, v12);
  unsigned __int16 v17 = cstdlib_strlen(*a2);
  unsigned __int16 v18 = cstdlib_strlen(__s1);
  unsigned int v19 = v18 + v17;
  uint64_t v20 = (char *)*a2;
  if (v19 < *a3
    || (uint64_t v21 = 2 * v19 * *a3,
        *a3 = v21,
        uint64_t v20 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v20, v21),
        (*a2 = v20) != 0))
  {
    cstdlib_strncat(v20, __s1, v18);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v22, v23, v24, v25, v27);
    return 2601525258;
  }
}

uint64_t hlp_insert_phonemes(uint64_t a1, const char **a2, unsigned int *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  __int16 v7 = a6 - a5;
  if (a6 < a5) {
    return 0;
  }
  unsigned int v22 = v6;
  unsigned __int16 v14 = v7 + 1;
  unsigned int v15 = (unsigned __int16)cstdlib_strlen(*a2) + (unsigned __int16)(v7 + 1);
  uint64_t v16 = (char *)*a2;
  if (v15 < *a3
    || (uint64_t v17 = 2 * v15 * *a3,
        *a3 = v17,
        uint64_t v16 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)v16, v17),
        (*a2 = v16) != 0))
  {
    cstdlib_strncat(v16, (const char *)(a4 + a5), v14);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"GLOBALBEADAPT", 66000, 0, v18, v19, v20, v21, v22);
    return 2601525258;
  }
}

uint64_t marker_loc_GetGeneralError(int a1, int a2)
{
  return a2 | (a1 << 20) | 0x80002000;
}

BOOL marker_IsReadoutControlDefaultArg(int a1, unsigned int a2, uint64_t a3, int a4)
{
  BOOL result = 0;
  if (a1 > 30)
  {
    if (a1 != 31)
    {
      if (a1 != 36) {
        return result;
      }
      goto LABEL_7;
    }
    return a2 == a4;
  }
  else
  {
    if (a1 != 7)
    {
      if (a1 != 21) {
        return result;
      }
LABEL_7:
      if (!a3) {
        return 0;
      }
      unsigned int v6 = (const char *)(a3 + a2);
      MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
      return cstdlib_strcmp(v6, MarkerArgStr) == 0;
    }
    return a2 == 15;
  }
}

unint64_t marker_GetArgOfLastOfType(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v5 = a1 + ((unint64_t)a2 << 6);
  int v6 = *(_DWORD *)(v5 + 20);
  unint64_t result = *(void *)(v5 + 40);
  if (v6 == 7)
  {
    BOOL v8 = result == 43;
    if (a3 > (unsigned __int16)(a2 + 1))
    {
      uint64_t v9 = (unsigned __int16)(a2 + 1);
      unsigned __int16 v10 = (_DWORD *)(a1 + (v9 << 6) + 20);
      uint64_t v11 = v9 + 1;
      do
      {
        if (*v10 == 7)
        {
          uint64_t v12 = v10[5];
          BOOL v13 = !v8;
          if (v8) {
            unint64_t v14 = result & 0xFFFFFFFF00000000 | 0xF;
          }
          else {
            unint64_t v14 = result;
          }
          int v15 = v13;
          if (v12 == 43) {
            unint64_t result = v14;
          }
          else {
            unint64_t result = result & 0xFFFFFFFF00000000 | v12;
          }
          if (v12 == 43) {
            BOOL v8 = v15;
          }
          else {
            BOOL v8 = 0;
          }
          if (a4 == 1) {
            *unsigned __int16 v10 = 999;
          }
        }
        v10 += 16;
        BOOL v13 = a3 == (unsigned __int16)v11++;
      }
      while (!v13);
    }
    if (v8) {
      return result & 0xFFFFFFFF00000000 | 0xF;
    }
  }
  else if (a3 > (unsigned __int16)(a2 + 1))
  {
    uint64_t v16 = (unsigned __int16)(a2 + 1);
    uint64_t v17 = a1 + (v16 << 6) + 20;
    uint64_t v18 = v16 + 1;
    do
    {
      if (*(_DWORD *)v17 == v6)
      {
        unint64_t result = *(void *)(v17 + 20);
        if (a4 == 1) {
          *(_DWORD *)uint64_t v17 = 999;
        }
      }
      v17 += 64;
      BOOL v13 = a3 == (unsigned __int16)v18++;
    }
    while (!v13);
  }
  return result;
}

uint64_t marker_CheckForEmptyMarkers(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  if (a4 >= 2)
  {
    unint64_t v12 = a7;
    unint64_t v13 = a6;
    unint64_t v14 = (_DWORD *)(a5 + 28);
    unsigned __int16 v15 = 1;
    while (1)
    {
      uint64_t v16 = v15;
      uint64_t v17 = (_DWORD *)(a3 + ((unint64_t)v15 << 6));
      unsigned int v18 = v17[5];
      if (v18 != 999 && v18 != 0x4000)
      {
        if (*v17 == 1)
        {
          if (!a6)
          {
            BOOL v19 = v18 > 0x24 || ((1 << v18) & 0x1080200080) == 0;
            if (!v19
              && !marker_IsReadoutControlDefaultArg(v18, *(void *)(a3 + ((unint64_t)v15 << 6) + 40), a1, a2)
              && *v17 != 1)
            {
              return 0;
            }
          }
        }
        else
        {
          if (!a6) {
            goto LABEL_21;
          }
          unint64_t v20 = 0;
          uint64_t v21 = a3 + (v16 << 6);
          unsigned int v22 = (_DWORD *)(v21 + 24);
          uint64_t v23 = (_DWORD *)(v21 + 28);
          uint64_t v24 = v14;
          while (v20 <= v12 || v18 != *(v24 - 2) || *v22 != *(v24 - 1) || *v23 != *v24)
          {
            ++v20;
            v24 += 16;
            if (v20 >= v13) {
              goto LABEL_21;
            }
          }
          if (!*(v24 - 7))
          {
LABEL_21:
            uint64_t v25 = 0;
            if (v18 > 0x24 || ((1 << v18) & 0x1080200080) == 0) {
              return v25;
            }
            if (!marker_IsReadoutControlDefaultArg(v18, *(void *)(a3 + (v16 << 6) + 40), a1, a2)) {
              return 0;
            }
          }
        }
      }
      unsigned __int16 v15 = v16 + 1;
      if (a4 <= (unsigned __int16)(v16 + 1)) {
        return 1;
      }
    }
  }
  return 1;
}

uint64_t marker_TraceTxt(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v24 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v14 = datac_RequestBlock(a5, a6, 1u, &v24);
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v15 = *(unsigned __int16 *)(v24 + 16);
    if (!*(_WORD *)(v24 + 16))
    {
      uint64_t v16 = *(void *)(a4 + 32);
      uint64_t v17 = "(Txt) (%s) (tag=%d) len=%d (EMPTY TXT)";
      goto LABEL_8;
    }
    if (v15 >= 0x400)
    {
      uint64_t v16 = *(void *)(a4 + 32);
      uint64_t v17 = "(Txt) (%s) (tag=%d) len=%d (TXT TOO LONG)";
LABEL_8:
      log_OutText(v16, a2, 5, 0, (uint64_t)v17, v11, v12, v13, a7);
      return v14;
    }
    unsigned int v18 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v15 + 2);
    if (v18)
    {
      uint64_t v19 = (uint64_t)v18;
      cstdlib_strncpy(v18, *(const char **)(v24 + 8), *(unsigned __int16 *)(v24 + 16));
      *(unsigned char *)(v19 + *(unsigned __int16 *)(v24 + 16)) = 0;
      log_OutText(*(void *)(a4 + 32), a2, 5, 0, (uint64_t)"(Txt) (%s) (tag=%d) len=%d (UTF8) \"%s\"", v20, v21, v22, a7);
      heap_Free(*(void **)(a4 + 8), v19);
    }
    else
    {
      return (a1 << 20) | 0x8000200A;
    }
  }
  return v14;
}

uint64_t marker_TraceMrk(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10)
{
  int v50 = a8;
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v53 = 0;
  if (!a3) {
    return 0;
  }
  int v10 = a6;
  uint64_t v15 = a9;
  log_OutText(*(void *)(a4 + 32), a2, 5, 0, (uint64_t)"(Mrk) (%s) (tag=%d)", a6, a7, a8, a7);
  if (a9)
  {
    uint64_t result = 0;
    uint64_t v51 = 0;
    unsigned int v17 = a10;
    if (!a10) {
      return result;
    }
  }
  else
  {
    uint64_t result = datac_RequestBlock(a5, v10, 1u, &v53);
    uint64_t v51 = *(void *)(v53 + 8);
    unsigned int v17 = *(unsigned __int16 *)(v53 + 16);
    if (!*(_WORD *)(v53 + 16)) {
      return result;
    }
  }
  int v47 = a1;
  unsigned int v48 = result;
  uint64_t v18 = 0;
  char __s = 0;
  uint64_t v52 = v17;
  do
  {
    if (v15)
    {
      char __dst = 0;
      uint64_t v19 = v15 + (v18 << 6);
      uint64_t v20 = *(const char **)(v19 + 40);
      unsigned int v21 = *(_DWORD *)(v19 + 20);
      if (v21 == 32)
      {
        if (v20 == 1) {
          char v22 = 49;
        }
        else {
          char v22 = 48;
        }
        char __dst = v22;
        char v55 = 0;
        unsigned int v21 = 32;
LABEL_29:
        marker_getString(v21);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v23 = v51 + (v18 << 6);
      unsigned int v25 = *(_DWORD *)(v23 + 20);
      uint64_t v24 = v23 + 20;
      unsigned int v21 = v25;
      uint64_t v20 = *(const char **)(v24 + 20);
      unsigned __int16 v26 = *(const char **)(v24 + 28);
      if (v26)
      {
        unsigned __int16 v27 = cstdlib_strlen(v26);
        if ((v27 & 0xFFE0) != 0)
        {
          cstdlib_strcpy(&__dst, "EXTSTR TOO LONG");
        }
        else
        {
          uint64_t v28 = v27;
          cstdlib_strncpy(&__dst, *(const char **)(v24 + 28), v27);
          *(&__dst + v28) = 0;
        }
      }
      else
      {
        char __dst = 0;
      }
      if (*(_DWORD *)v24 == 32)
      {
        if (*(_DWORD *)(v24 + 20) == 1) {
          char v29 = 49;
        }
        else {
          char v29 = 48;
        }
        char __dst = v29;
        char v55 = 0;
      }
      uint64_t v15 = a9;
    }
    if (v21 != 7) {
      goto LABEL_29;
    }
    if (v20 == 43)
    {
      unsigned int v21 = 7;
    }
    else
    {
      uint64_t v37 = 0;
      while (UTOIMARKER2STRING[v37] != v20)
      {
        v37 += 4;
        if (v37 == 76)
        {
          unsigned int v21 = 7;
          goto LABEL_30;
        }
      }
      unsigned int v21 = 7;
    }
LABEL_30:
    if (marker_hasNonConstCharPtrArg(v21)
      && v21 <= 0x27
      && ((1 << v21) & 0xB400200000) != 0
      && v50 == 1
      && v20)
    {
      unsigned __int16 v33 = cstdlib_strlen(v20);
      size_t v34 = v33;
      if (v33 >= 0x401uLL) {
        unsigned __int16 v35 = 1024;
      }
      else {
        unsigned __int16 v35 = v33;
      }
      if (__s)
      {
        if (cstdlib_strlen(__s) >= v35)
        {
          int v36 = __s;
        }
        else
        {
          int v36 = (char *)heap_Realloc(*(uint64_t **)(a4 + 8), (uint64_t)__s, v35 + 1);
          if (!v36) {
            return (v47 << 20) | 0x8000200A;
          }
        }
      }
      else
      {
        int v36 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v35 + 1);
        if (!v36) {
          return (v47 << 20) | 0x8000200A;
        }
      }
      char __s = v36;
      if (v34 > 0x400)
      {
        cstdlib_strcpy(v36, "ARGSTR TOO LONG");
      }
      else
      {
        int v38 = v20;
        int v39 = v36;
        cstdlib_strncpy(v36, v38, v34);
        v39[v34] = 0;
      }
      uint64_t v15 = a9;
    }
    uint64_t v40 = *(void *)(a4 + 32);
    if (v15)
    {
      log_OutText(v40, a2, 5, 0, (uint64_t)"[%d] Markers %s[type=%5d %s]  Ref (%u,%u) Cur(%u,%u) %s Ext=%d %s", v30, v31, v32, v18);
    }
    else
    {
      uint64_t v41 = v51 + (v18 << 6);
      log_OutText(v40, a2, 5, 0, (uint64_t)"[%d] Markers %s[type=%5d %s]  Ref (%u,%u) Cur(%u,%u) %s Ext=%d %s", v30, v31, v32, v18);
      if (*(_WORD *)(v41 + 16))
      {
        uint64_t v45 = 0;
        unint64_t v46 = 0;
        do
        {
          log_OutText(*(void *)(a4 + 32), a2, 5, 0, (uint64_t)"[UTOI] Offsets[%d] %u,%u", v42, v43, v44, v46++);
          v45 += 8;
        }
        while (v46 < *(unsigned __int16 *)(v41 + 16));
      }
    }
    ++v18;
    uint64_t v15 = a9;
  }
  while (v18 != v52);
  if (__s) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)__s);
  }
  return v48;
}

uint64_t marker_loc_FilterSyncMarkers(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 16);
  if (v1 < 2)
  {
    unsigned __int16 v5 = 1;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = (long long *)(v2 + 64);
    unint64_t v4 = 1;
    unsigned __int16 v5 = 1;
    do
    {
      if (*((_DWORD *)v3 + 5) != 0x4000)
      {
        int v6 = (_OWORD *)(v2 + ((unint64_t)v5 << 6));
        long long v7 = *v3;
        long long v8 = v3[1];
        long long v9 = v3[3];
        v6[2] = v3[2];
        v6[3] = v9;
        *int v6 = v7;
        v6[1] = v8;
        ++v5;
        unsigned int v1 = *(unsigned __int16 *)(a1 + 16);
      }
      ++v4;
      v3 += 4;
    }
    while (v4 < v1);
  }
  *(_WORD *)(a1 + 16) = v5;
  return 0;
}

uint64_t ppParam_ClearReadOutParameters(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = paramc_ParamRemove(*(void *)(a1 + 40), *(void *)((char *)&aTAG2PARAM + v2 + 8));
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14) {
      break;
    }
    v2 += 16;
    if (v2 == 64) {
      return 0;
    }
  }
  return result;
}

uint64_t ppParam_ClearSequencerParameters(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = paramc_ParamRemove(*(void *)(a1 + 40), (uint64_t)off_264561988[v2]);
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14) {
      break;
    }
    if (++v2 == 3) {
      return 0;
    }
  }
  return result;
}

uint64_t ppParam_ClearAllPPParameters(uint64_t a1)
{
  uint64_t result = ppParam_ClearReadOutParameters(a1);
  if ((result & 0x80000000) == 0)
  {
    return ppParam_ClearSequencerParameters(a1);
  }
  return result;
}

uint64_t datac_ObjOpen(_WORD *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v12 = 0;
  if (!a3 || (InitRsrcFunction(a1, a2, &v12) & 0x80000000) != 0)
  {
    int v11 = -2147475449;
  }
  else
  {
    *a3 = 0;
    long long v8 = (void *)heap_Alloc(*(void *)(v12 + 8), 40);
    if (v8)
    {
      long long v9 = v8;
      cstdlib_memset(v8, 0, 0x28uLL);
      uint64_t result = 0;
      *long long v9 = a1;
      v9[1] = a2;
      *((_DWORD *)v9 + 8) = a4;
      *a3 = v9;
      return result;
    }
    int v11 = -2147475446;
  }
  return v11 | (a4 << 20);
}

uint64_t datac_ObjClose(uint64_t a1)
{
  uint64_t v8 = 0;
  if (!a1) {
    return 2368741383;
  }
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v8) & 0x80000000) != 0) {
    return (*(_DWORD *)(a1 + 32) << 20) | 0x80002007;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  if (*(_WORD *)(a1 + 16))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 16;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 24) + v4);
      if (v5)
      {
        heap_Free(*(void **)(v8 + 8), v5);
        unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
      }
      ++v3;
      v4 += 32;
    }
    while (v3 < v2);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6) {
    heap_Free(*(void **)(v8 + 8), v6);
  }
  heap_Free(*(void **)(v8 + 8), a1);
  return 0;
}

uint64_t datac_RegisterBlock(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v18 = 0;
  if (!a1) {
    return 2368741383;
  }
  __int16 v4 = a3;
  if (!a3 || (__int16 v6 = a4, !a4) || (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v18) & 0x80000000) != 0)
  {
    int v12 = *(_DWORD *)(a1 + 32);
    int v13 = -2147475449;
    return v13 | (v12 << 20);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(_WORD *)(a1 + 16))
  {
    long long v9 = (unsigned __int16 *)(v8 + 8);
    uint64_t v10 = *(unsigned __int16 *)(a1 + 16);
    while (1)
    {
      int v11 = *v9;
      v9 += 16;
      if (v11 == a2) {
        break;
      }
      if (!--v10) {
        goto LABEL_14;
      }
    }
    int v12 = *(_DWORD *)(a1 + 32);
    int v13 = -2147475432;
    return v13 | (v12 << 20);
  }
  if (!v8)
  {
    uint64_t v15 = heap_Alloc(*(void *)(v18 + 8), 32);
    if (v15) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v15 = heap_Realloc(*(uint64_t **)(v18 + 8), v8, 32 * *(unsigned __int16 *)(a1 + 16) + 32);
  if (!v15)
  {
LABEL_18:
    int v12 = *(_DWORD *)(a1 + 32);
    int v13 = -2147475446;
    return v13 | (v12 << 20);
  }
LABEL_15:
  *(void *)(a1 + 24) = v15;
  unsigned __int16 v16 = *(_WORD *)(a1 + 16) + 1;
  *(_WORD *)(a1 + 16) = v16;
  cstdlib_memset((void *)(v15 + 32 * v16 - 32), 0, 0x20uLL);
  uint64_t result = 0;
  uint64_t v17 = *(void *)(a1 + 24) + 32 * *(unsigned __int16 *)(a1 + 16);
  *(_WORD *)(v17 - 24) = a2;
  *(_WORD *)(v17 - 22) = v4;
  *(_WORD *)(v17 - 32) = v6;
  return result;
}

uint64_t datac_RequestBlock(uint64_t a1, int a2, unsigned int a3, void *a4)
{
  uint64_t v18 = 0;
  if (!a1) {
    return 2368741383;
  }
  if (!a3 || !a4 || (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v18) & 0x80000000) != 0) {
    goto LABEL_13;
  }
  *a4 = 0;
  uint64_t v8 = *(unsigned __int16 *)(a1 + 16);
  if (!*(_WORD *)(a1 + 16))
  {
LABEL_9:
    int v10 = *(_DWORD *)(a1 + 32);
    int v11 = -2147475436;
    return v11 | (v10 << 20);
  }
  uint64_t v9 = *(void *)(a1 + 24) + 16;
  while (*(unsigned __int16 *)(v9 - 8) != a2)
  {
    v9 += 32;
    if (!--v8) {
      goto LABEL_9;
    }
  }
  if (*(unsigned __int16 *)(v9 + 10) < a3)
  {
    unsigned int v13 = *(unsigned __int16 *)(v9 - 16);
    if (((v13 + a3) & 0x10000) != 0)
    {
LABEL_13:
      int v10 = *(_DWORD *)(a1 + 32);
      int v11 = -2147475449;
      return v11 | (v10 << 20);
    }
    int v14 = v13 + v13 * (a3 / v13);
    uint64_t v15 = *(uint64_t **)(v18 + 8);
    unint64_t v16 = *(unsigned __int16 *)(v9 - 6) * (unint64_t)(unsigned __int16)v14;
    if (*(void *)v9) {
      uint64_t v17 = heap_Realloc(v15, *(void *)v9, v16 + 1);
    }
    else {
      uint64_t v17 = heap_Alloc((uint64_t)v15, v16 + 1);
    }
    if (!v17)
    {
      int v10 = *(_DWORD *)(a1 + 32);
      int v11 = -2147475446;
      return v11 | (v10 << 20);
    }
    if (*(void *)v9 != v17) {
      *(void *)uint64_t v9 = v17;
    }
    cstdlib_memset((void *)(v17 + *(unsigned __int16 *)(v9 - 6) * *(unsigned __int16 *)(v9 + 8)), 0, ((unsigned __int16)v14 - *(unsigned __int16 *)(v9 + 8)) * (unint64_t)*(unsigned __int16 *)(v9 - 6));
    *(_WORD *)(v9 + 10) = v14;
  }
  uint64_t result = 0;
  *a4 = v9 - 8;
  return result;
}

uint64_t datac_ReleaseBlock(uint64_t a1, int a2)
{
  uint64_t v13 = 0;
  if (!a1) {
    return 2368741383;
  }
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13) & 0x80000000) != 0)
  {
    int v8 = *(_DWORD *)(a1 + 32);
    int v9 = -2147475449;
    return v9 | (v8 << 20);
  }
  uint64_t v4 = *(unsigned __int16 *)(a1 + 16);
  if (!*(_WORD *)(a1 + 16))
  {
LABEL_7:
    int v8 = *(_DWORD *)(a1 + 32);
    int v9 = -2147475436;
    return v9 | (v8 << 20);
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  while (*(unsigned __int16 *)(v7 + v5 + 8) != a2)
  {
    ++v6;
    v5 += 32;
    if (32 * v4 == v5) {
      goto LABEL_7;
    }
  }
  uint64_t v11 = *(void *)(v7 + v5 + 16);
  if (v11)
  {
    heap_Free(*(void **)(v13 + 8), v11);
    LODWORD(v4) = *(unsigned __int16 *)(a1 + 16);
  }
  __int16 v12 = v4;
  if ((int)v4 - 1 > (int)v6)
  {
    cstdlib_memmove((void *)(v7 + v5), (const void *)(v7 + v5 + 32), 32 * (v4 - v6));
    __int16 v12 = *(_WORD *)(a1 + 16);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 16) = v12 - 1;
  return result;
}

uint64_t bed_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, int a6)
{
  uint64_t v18 = 0;
  if (!a3 || !a5 || (InitRsrcFunction(a1, a2, &v18) & 0x80000000) != 0)
  {
    int v16 = -2147475449;
    return v16 | (a6 << 20);
  }
  *a5 = 0;
  __int16 v12 = (void *)heap_Alloc(*(void *)(v18 + 8), 40);
  if (!v12)
  {
    int v16 = -2147475446;
    return v16 | (a6 << 20);
  }
  uint64_t v13 = (uint64_t)v12;
  cstdlib_memset(v12, 0, 0x28uLL);
  *(void *)uint64_t v13 = a1;
  *(void *)(v13 + 8) = a2;
  *(void *)(v13 + 16) = a3;
  *(_DWORD *)(v13 + 36) = a6;
  uint64_t v14 = datac_RequestBlock(a3, a4, 1u, (void *)(v13 + 24));
  if ((v14 & 0x80000000) != 0)
  {
    uint64_t v15 = v14;
    bed_ObjClose(v13);
  }
  else
  {
    uint64_t v15 = 0;
    *a5 = v13;
  }
  return v15;
}

uint64_t bed_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2368741383;
  uint64_t v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t bed_Goto(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 2368741383;
  }
  unsigned int v3 = *(unsigned __int16 *)(*(void *)(a1 + 24) + 16);
  if ((a2 & 0x80000000) != 0)
  {
    int v5 = v3 + a2;
    if (v5 >= 0)
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 32) = v5;
      return result;
    }
  }
  else if (v3 >= a2)
  {
    uint64_t result = 0;
    *(_WORD *)(a1 + 32) = a2;
    return result;
  }
  return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
}

uint64_t bed_GoForward(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t), uint64_t a3)
{
  uint64_t result = 2368741383;
  if (a1 && a2)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    unsigned int v7 = *(unsigned __int16 *)(a1 + 32);
    unsigned int v8 = *(unsigned __int16 *)(v6 + 16);
    if (v7 < v8)
    {
      unint64_t v10 = *(void *)(v6 + 8) + *(unsigned __int16 *)(v6 + 2) * (unint64_t)*(unsigned __int16 *)(a1 + 32);
      do
      {
        int v11 = a2(a3, v10);
        LOWORD(v7) = *(_WORD *)(a1 + 32);
        unsigned int v8 = *(unsigned __int16 *)(v6 + 16);
        if (v11) {
          break;
        }
        LOWORD(v7) = v7 + 1;
        *(_WORD *)(a1 + 32) = v7;
        v10 += *(unsigned __int16 *)(v6 + 2);
      }
      while (v8 > (unsigned __int16)v7);
    }
    if (v8 <= (unsigned __int16)v7) {
      return (*(_DWORD *)(a1 + 36) << 20) | 0x80002014;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t bed_GoBackward(uint64_t a1, unsigned int (*a2)(uint64_t, unint64_t), uint64_t a3)
{
  if (!a1) {
    return 2368741383;
  }
  int v5 = -2147475449;
  if (a2)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned int v8 = *(unsigned __int16 *)(a1 + 32);
    unsigned int v9 = *(unsigned __int16 *)(v7 + 16);
    if (v8 >= v9)
    {
      LOWORD(v8) = v9 - 1;
      *(_WORD *)(a1 + 32) = v9 - 1;
    }
    unint64_t v10 = *(void *)(v7 + 8) + *(unsigned __int16 *)(v7 + 2) * (unint64_t)(unsigned __int16)v8;
    if ((_WORD)v8)
    {
      while (!a2(a3, v10))
      {
        __int16 v11 = *(_WORD *)(a1 + 32) - 1;
        *(_WORD *)(a1 + 32) = v11;
        v10 -= *(unsigned __int16 *)(v7 + 2);
        if (!v11) {
          goto LABEL_11;
        }
      }
      if (*(_WORD *)(a1 + 32)) {
        return 0;
      }
    }
LABEL_11:
    if (a2(a3, v10)) {
      return 0;
    }
    int v5 = -2147475436;
  }
  return v5 | (*(_DWORD *)(a1 + 36) << 20);
}

uint64_t bed_FindForward(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t), uint64_t a3, _WORD *a4)
{
  if (!a1) {
    return 2368741383;
  }
  int v6 = -2147475449;
  if (a2 && a4)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(a1 + 32);
    *a4 = v9;
    unsigned int v10 = *(unsigned __int16 *)(v8 + 16);
    if (v9 < v10)
    {
      unint64_t v12 = *(void *)(v8 + 8) + *(unsigned __int16 *)(v8 + 2) * (unint64_t)v9;
      while (1)
      {
        int v13 = a2(a3, v12);
        LOWORD(v9) = *a4;
        if (v13) {
          break;
        }
        LOWORD(v9) = v9 + 1;
        *a4 = v9;
        v12 += *(unsigned __int16 *)(v8 + 2);
        unsigned int v10 = *(unsigned __int16 *)(v8 + 16);
        if (v10 <= (unsigned __int16)v9) {
          goto LABEL_11;
        }
      }
      unsigned int v10 = *(unsigned __int16 *)(v8 + 16);
    }
LABEL_11:
    if (v10 > (unsigned __int16)v9) {
      return 0;
    }
    int v6 = -2147475436;
  }
  return v6 | (*(_DWORD *)(a1 + 36) << 20);
}

uint64_t bed_FindBackward(uint64_t a1, unsigned int (*a2)(uint64_t, unint64_t), uint64_t a3, _WORD *a4)
{
  if (!a1) {
    return 2368741383;
  }
  int v6 = -2147475449;
  if (a2 && a4)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(unsigned __int16 *)(a1 + 32);
    *a4 = v10;
    unint64_t v11 = *(void *)(v9 + 8) + *(unsigned __int16 *)(v9 + 2) * (unint64_t)v10;
    if (v10)
    {
      while (!a2(a3, v11))
      {
        __int16 v12 = *a4 - 1;
        *a4 = v12;
        v11 -= *(unsigned __int16 *)(v9 + 2);
        if (!v12) {
          goto LABEL_10;
        }
      }
      if (*a4) {
        return 0;
      }
    }
LABEL_10:
    if (a2(a3, v11)) {
      return 0;
    }
    int v6 = -2147475436;
  }
  return v6 | (*(_DWORD *)(a1 + 36) << 20);
}

uint64_t bed_GetcElem(uint64_t a1, _WORD *a2)
{
  if (!a1) {
    return 2368741383;
  }
  if (!a2) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  }
  uint64_t result = 0;
  *a2 = *(_WORD *)(*(void *)(a1 + 24) + 16);
  return result;
}

uint64_t bed_GetiElem(uint64_t a1, _WORD *a2)
{
  if (!a1) {
    return 2368741383;
  }
  if (!a2) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 32);
  if (v2 >= *(unsigned __int16 *)(*(void *)(a1 + 24) + 16)) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
  }
  uint64_t result = 0;
  *a2 = v2;
  return result;
}

uint64_t bed_GetpElem(uint64_t a1, unsigned int a2, void *a3)
{
  if (!a1) {
    return 2368741383;
  }
  if (!a3) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  }
  if (a2 == 0xFFFF) {
    a2 = *(unsigned __int16 *)(a1 + 32);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (a2 >= *(unsigned __int16 *)(v3 + 16)) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
  }
  uint64_t result = 0;
  *a3 = *(void *)(v3 + 8) + *(unsigned __int16 *)(v3 + 2) * (unint64_t)a2;
  return result;
}

uint64_t bed_GetpBlock(uint64_t a1, void *a2)
{
  if (!a1) {
    return 2368741383;
  }
  if (!a2) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  }
  uint64_t result = 0;
  *a2 = *(void *)(a1 + 24);
  return result;
}

uint64_t bed_IsCursorAtEnd(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    return 2368741383;
  }
  if (!a2) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  }
  uint64_t result = 0;
  *a2 = *(unsigned __int16 *)(a1 + 32) >= *(unsigned __int16 *)(*(void *)(a1 + 24) + 16);
  return result;
}

uint64_t bed_Insert(uint64_t a1, void *__src, int a3)
{
  if (!a1) {
    return 2368741383;
  }
  if (!__src) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x80002007;
  }
  if (!a3) {
    return 0;
  }
  int v6 = (unsigned __int16 **)(a1 + 24);
  uint64_t v7 = *(unsigned __int16 **)(a1 + 24);
  unsigned int v8 = v7[8];
  if (v8 + a3 > v7[9])
  {
    uint64_t result = datac_RequestBlock(*(void *)(a1 + 16), *v7, (unsigned __int16)(v8 + a3), (void *)(a1 + 24));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v7 = *v6;
    unsigned int v8 = (*v6)[8];
  }
  unsigned int v10 = *(unsigned __int16 *)(a1 + 32);
  if (v10 < v8)
  {
    cstdlib_memmove((void *)(*((void *)v7 + 1) + (v10 + a3) * v7[1]), (const void *)(*((void *)v7 + 1) + v7[1] * v10), v7[1] * (uint64_t)(int)(v8 - v10));
    unsigned int v10 = *(unsigned __int16 *)(a1 + 32);
  }
  cstdlib_memmove((void *)(*((void *)v7 + 1) + v7[1] * v10), __src, v7[1] * a3);
  uint64_t result = 0;
  v7[8] += a3;
  *(_WORD *)(a1 + 32) += a3;
  return result;
}

uint64_t bed_Remove(uint64_t a1, unsigned int a2, int a3)
{
  if (!a1) {
    return 2368741383;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unsigned int v6 = *(unsigned __int16 *)(v5 + 16);
  unsigned __int16 v7 = v6 - a2;
  if (v6 <= a2) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200F;
  }
  if (!a3) {
    return 0;
  }
  BOOL v8 = v6 >= a3 + a2;
  int v9 = (unsigned __int16)(v6 - (a3 + a2));
  if (v8) {
    unsigned __int16 v10 = a3;
  }
  else {
    unsigned __int16 v10 = v7;
  }
  if (v8) {
    int v11 = v9;
  }
  else {
    int v11 = 0;
  }
  unsigned int v12 = a2 + v10;
  cstdlib_memmove((void *)(*(void *)(v5 + 8) + *(unsigned __int16 *)(v5 + 2) * a2), (const void *)(*(void *)(v5 + 8) + v12 * *(unsigned __int16 *)(v5 + 2)), v11 * *(unsigned __int16 *)(v5 + 2));
  uint64_t result = 0;
  *(_WORD *)(v5 + 16) -= v10;
  unsigned int v14 = *(unsigned __int16 *)(a1 + 32);
  if (v14 > a2)
  {
    uint64_t result = 0;
    if (v12 <= v14) {
      *(_WORD *)(a1 + 32) = v14 - v10;
    }
    else {
      *(_WORD *)(a1 + 32) = a2;
    }
  }
  return result;
}

uint64_t isEsc(uint64_t a1, char *a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  if (a3 <= a4) {
    return 0;
  }
  int v6 = a2[a4];
  if (v6 != 92 && v6 != 27) {
    return 0;
  }
  int v13 = 0;
  memset(v12, 0, sizeof(v12));
  int v9 = exePattern("esc", a1, a2, a3, a4, 0x2000, &v13, (uint64_t)v12, &v11, 0x3E7u);
  uint64_t result = 0;
  if ((v9 & 0x80000000) == 0 && v13 && LODWORD(v12[0]) == a4)
  {
    *a5 = WORD2(v12[0]) - a4;
    return 1;
  }
  return result;
}

uint64_t exePattern(const char *a1, uint64_t a2, char *a3, unsigned int a4, int a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, unsigned __int16 a10)
{
  unsigned int v12 = a6;
  uint64_t v45 = *MEMORY[0x263EF8340];
  log_OutText(*(void *)(*(void *)a2 + 32), (uint64_t)"PP", 4, 0, (uint64_t)"exePattern for pattern: %s", a6, (uint64_t)a7, a8, (uint64_t)a1);
  *a7 = 0;
  uint64_t v18 = *(void *)(*(void *)(a2 + 8) + 8);
  if (a10 == 999)
  {
    if (!*(_WORD *)(v18 + 48)) {
      return 0;
    }
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    while (cstdlib_strcmp(*(const char **)(*(void *)(v18 + 56) + v19 + 16), a1))
    {
      ++v20;
      uint64_t v18 = *(void *)(*(void *)(a2 + 8) + 8);
      v19 += 24;
      if (v20 >= *(unsigned __int16 *)(v18 + 48)) {
        return 0;
      }
    }
    unsigned int v21 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a2 + 8) + 8) + 56) + v19);
  }
  else
  {
    unsigned int v21 = (uint64_t *)(*(void *)(v18 + 40) + 24 * a10 + 8);
  }
  uint64_t v22 = *v21;
  if (!*v21) {
    return 0;
  }
  if (*(unsigned __int16 *)(a2 + 48) < a4) {
    a4 = *(unsigned __int16 *)(a2 + 48);
  }
  cstdlib_memset(&__b, -1, 0x190uLL);
  unsigned int v23 = nuance_pcre_exec(*(void **)(a2 + 24), *(void *)(a2 + 32), v22, 0, a3, a4, a5, v12, &__b, 100);
  if ((v23 & 0x80000000) != 0)
  {
    uint64_t v29 = nuance_pcre_ErrorToLhError(v23);
    uint64_t v28 = v29;
    if (v29 >> 20 != 2213) {
      return v28;
    }
    int v34 = v29 & 0x1FFF;
    switch(v34)
    {
      case 10:
        uint64_t v36 = *(void *)(*(void *)a2 + 32);
        uint64_t v37 = 11002;
        int v38 = 0;
        break;
      case 7778:
        return v28;
      case 20:
        return 0;
      default:
        uint64_t v36 = *(void *)(*(void *)a2 + 32);
        int v39 = "lhError";
        int v38 = "%s%x";
        uint64_t v37 = 11027;
        break;
    }
    log_OutPublic(v36, (uint64_t)"PP", v37, (uint64_t)v38, v30, v31, v32, v33, v39);
    return v28;
  }
  if (!v23) {
    return 0;
  }
  *(_OWORD *)a8 = __b;
  int v25 = v41;
  int v24 = v42;
  *(_DWORD *)(a8 + 16) = v41;
  *(_DWORD *)(a8 + 20) = v24;
  if (v25 == -1 && v24 == -1)
  {
    int v26 = v43;
    if (v43 != -1)
    {
      int v27 = v44;
      if (v44 != -1)
      {
        *a9 = 1;
        *(_DWORD *)(a8 + 16) = v26;
        *(_DWORD *)(a8 + 20) = v27;
      }
    }
  }
  uint64_t v28 = 0;
  *a7 = 1;
  return v28;
}

uint64_t isEscOrPartialEsc(uint64_t a1, char *a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  if (a3 <= a4) {
    return 0;
  }
  int v6 = a2[a4];
  if (v6 != 92 && v6 != 27) {
    return 0;
  }
  int v14 = 0;
  memset(v13, 0, sizeof(v13));
  int v9 = exePattern("esc", a1, a2, a3, a4, 40960, &v14, (uint64_t)v13, &v12, 0x3E7u);
  if ((v9 & 0x1FFF) == 0x1E62) {
    return 2;
  }
  int v11 = v9;
  uint64_t result = 0;
  if ((v11 & 0x80000000) == 0 && v14 && LODWORD(v13[0]) == a4)
  {
    *a5 = WORD2(v13[0]) - a4;
    return 1;
  }
  return result;
}

uint64_t escseqm_str2enumMapping(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *(void *)(v2 + 8);
  if (*(_WORD *)(v3 + 64))
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    do
    {
      uint64_t v8 = *(void *)(v3 + 72);
      if (*(_DWORD *)(v7 + 20) == *(_DWORD *)(v8 + 16 * v6))
      {
        if (*(_WORD *)(v8 + 16 * v6 + 4))
        {
          uint64_t v9 = 0;
          unint64_t v10 = 0;
          while (1)
          {
            int v11 = *(const char **)(*(void *)(a2 + 8) + 40);
            if (v11)
            {
              if (!cstdlib_strcmp(*(const char **)(*(void *)(v8 + 16 * v6 + 8) + v9), v11))
              {
                heap_Free(*(void **)(*a1 + 8), *(void *)(*(void *)(a2 + 8) + 40));
                *(void *)(*(void *)(a2 + 8) + 40) = 0;
                *(_DWORD *)(*(void *)(a2 + 8) + 40) = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1[1] + 8) + 72)
                                                                                          + 16 * v6
                                                                                          + 8)
                                                                              + v9
                                                                              + 8);
                return 0;
              }
              uint64_t v2 = a1[1];
            }
            ++v10;
            uint64_t v8 = *(void *)(*(void *)(v2 + 8) + 72);
            v9 += 16;
            if (v10 >= *(unsigned __int16 *)(v8 + 16 * v6 + 4))
            {
              uint64_t v7 = *(void *)(a2 + 8);
              break;
            }
          }
        }
        heap_Free(*(void **)(*a1 + 8), *(void *)(v7 + 40));
        *(void *)(*(void *)(a2 + 8) + 40) = 0;
        uint64_t v7 = *(void *)(a2 + 8);
        *(_DWORD *)(v7 + 20) = 0;
        uint64_t v2 = a1[1];
      }
      ++v6;
      uint64_t v3 = *(void *)(v2 + 8);
    }
    while (v6 < *(unsigned __int16 *)(v3 + 64));
  }
  return 0;
}

uint64_t escseqm_get_token(void *a1, char *a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  int v87 = 0;
  int v88 = 0;
  long long v85 = 0uLL;
  uint64_t v86 = 0;
  *a5 = 0;
  uint64_t v10 = exePattern("esc", (uint64_t)a1, a2, a3, 0, 0, &v88, (uint64_t)&v85, &v87, 0x3E7u);
  if ((v10 & 0x80000000) != 0 || !v88) {
    return v10;
  }
  int v12 = v85;
  int v11 = DWORD1(v85);
  uint64_t v13 = exePattern("enhancedescseq", (uint64_t)a1, a2, a3, SDWORD1(v85), 16, &v88, (uint64_t)&v85, &v87, 0x3E7u);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (v88 != 1)
  {
    uint64_t v10 = exePattern("esctoi", (uint64_t)a1, a2, a3, v11, 16, &v88, (uint64_t)&v85, &v87, 0x3E7u);
    if ((v10 & 0x80000000) != 0 || v88 != 1) {
      return v10;
    }
    uint64_t v31 = *(void *)(a4 + 8);
    int v32 = DWORD1(v85);
    *(_DWORD *)(v31 + 20) = 7;
    *(_DWORD *)(v31 + 24) = v12;
    *(_DWORD *)(v31 + 28) = v32 - v12;
    *(_DWORD *)(v31 + 32) = v12;
    *(_DWORD *)(v31 + 36) = v12;
    if (*(_WORD *)(*(void *)(a1[1] + 8) + 64))
    {
      *(void *)(v31 + 40) = 0;
      if (*((void *)&v85 + 1) != -1)
      {
        uint64_t v33 = *(void **)(*a1 + 8);
        unsigned int v34 = a2[SDWORD2(v85)];
        if (v34 <= 0x5D)
        {
          if (v34 == 43)
          {
            unsigned __int16 v35 = (const char *)&unk_2206E39E4;
            goto LABEL_79;
          }
          if (v34 == 62)
          {
            unsigned __int16 v35 = (const char *)&unk_2206E39E8;
            goto LABEL_79;
          }
        }
        else
        {
          switch(v34)
          {
            case '^':
              unsigned __int16 v35 = "diacritized";
              goto LABEL_79;
            case 'h':
              unsigned __int16 v35 = "hil";
              goto LABEL_79;
            case 'j':
              unsigned __int16 v35 = "jeita";
LABEL_79:
              int v55 = cstdlib_strlen(v35);
              *(void *)(*(void *)(a4 + 8) + 40) = heap_Calloc(v33, 1, (v55 + 1));
              uint64_t v56 = *(char **)(*(void *)(a4 + 8) + 40);
              if (!v56) {
                return 2147491850;
              }
              cstdlib_strcpy(v56, v35);
              goto LABEL_81;
          }
        }
        uint64_t v31 = *(void *)(a4 + 8);
LABEL_84:
        *(_DWORD *)(v31 + 20) = 0;
        return v10;
      }
    }
    else
    {
      unsigned int v45 = a2[SDWORD2(v85)];
      if (v45 <= 0x5D)
      {
        if (v45 != 43)
        {
          if (v45 != 62) {
            goto LABEL_84;
          }
          unsigned int v45 = 16;
        }
      }
      else
      {
        switch(v45)
        {
          case '^':
            unsigned int v45 = 60;
            break;
          case 'h':
            unsigned int v45 = 108;
            break;
          case 'j':
            break;
          default:
            goto LABEL_84;
        }
      }
      *(_DWORD *)(v31 + 40) = v45;
    }
LABEL_81:
    *a5 = 2;
    return v10;
  }
  int v83 = DWORD1(v85);
  *(void *)uint64_t v84 = v86;
  uint64_t v90 = 0;
  int v89 = 0;
  uint64_t v14 = DWORD2(v85);
  int v15 = HIDWORD(v85);
  *(_DWORD *)(*(void *)(a4 + 8) + 20) = 0;
  uint64_t v16 = *(void *)(a1[1] + 8);
  if (*(_WORD *)(v16 + 4))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = (v15 - v14);
    uint64_t v20 = (uint64_t)&a2[v14];
    while (1)
    {
      size_t v21 = cstdlib_strlen(*(const char **)(*(void *)(v16 + 8) + v17));
      uint64_t v22 = a1[1];
      if (v21 == v19)
      {
        uint64_t v23 = *(void *)(*(void *)(v22 + 8) + 8);
        if (*(_DWORD *)(v23 + v17 + 8) == 1)
        {
          int v24 = LH_strnicmp(*(void *)(v23 + v17), v20, v19);
          uint64_t v22 = a1[1];
          if (!v24) {
            break;
          }
        }
      }
      ++v18;
      uint64_t v16 = *(void *)(v22 + 8);
      v17 += 24;
      if (v18 >= *(unsigned __int16 *)(v16 + 4)) {
        goto LABEL_11;
      }
    }
    uint64_t v46 = *(void *)(*(void *)(v22 + 8) + 8) + v17;
    uint64_t v47 = *(void *)(a4 + 8);
    *(_DWORD *)(v47 + 20) = *(_DWORD *)(v46 + 12);
    *(_DWORD *)a4 = 0;
    int v48 = *(_DWORD *)(v46 + 16);
    if (v48 != 9999)
    {
      *(_DWORD *)(v47 + 40) = v48;
      *(_DWORD *)a4 = 1;
    }
  }
LABEL_11:
  int v25 = *(int **)(a4 + 8);
  v25[6] = v12;
  v25[7] = v83 - v12;
  v25[8] = v12;
  v25[9] = v12;
  int v26 = v25[5];
  if (v26 == 32)
  {
    if (getTrueEnd((uint64_t)a1, a2, a3, v84[0], &v84[1], 32, &v89))
    {
      int v27 = *(_DWORD **)(a4 + 8);
      unsigned int v28 = v84[1];
      int v29 = v84[1] - v12 + 1;
      v27[6] = v12;
      v27[7] = v29;
      v27[8] = v12;
      v27[9] = v12;
      *a5 = 2;
      uint64_t v10 = 0;
      if (v84[0] == v28)
      {
        BOOL v30 = *((_DWORD *)a1 + 14) == 0;
        *((_DWORD *)a1 + 14) = v30;
        *(_DWORD *)(*(void *)(a4 + 8) + 40) = v30;
      }
      else
      {
        *(_DWORD *)(*(void *)(a4 + 8) + 20) = 0;
      }
      goto LABEL_60;
    }
LABEL_55:
    uint64_t v10 = 0;
    goto LABEL_60;
  }
  if (v84[0] == v84[1])
  {
    if (v26 == 2)
    {
LABEL_26:
      v25[10] = 0;
      setDefaultArgIfAny((uint64_t)a1, a4);
LABEL_27:
      uint64_t v10 = 0;
      goto LABEL_59;
    }
    uint64_t v49 = *(void *)(a1[1] + 8);
    uint64_t v50 = *(unsigned __int16 *)(v49 + 16);
    if (*(_WORD *)(v49 + 16))
    {
      uint64_t v51 = *(int **)(v49 + 24);
      do
      {
        int v52 = *v51;
        v51 += 3;
        if (v52 == v26) {
          goto LABEL_26;
        }
      }
      while (--v50);
    }
    if (!marker_hasNonConstCharPtrArg(v25[5])) {
      goto LABEL_27;
    }
    uint64_t v13 = checkForDefaultArgs(a1, a4, (_DWORD *)&v90 + 1);
    *a5 = 2;
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    return v13;
  }
  int v91 = 0;
  if (!getTrueEnd((uint64_t)a1, a2, a3, v84[0], &v84[1], v26, &v91))
  {
    int v37 = 0;
    uint64_t v90 = 1;
    goto LABEL_57;
  }
  unsigned int v36 = v84[1];
  int v37 = v84[1] + 1;
  if (!v84[1]) {
    goto LABEL_36;
  }
  int v38 = 0;
  int v39 = a2 - 1;
  while (1)
  {
    unsigned int v40 = v39[v84[1]];
    BOOL v41 = v40 > 0x20;
    uint64_t v42 = (1 << v40) & 0x100002600;
    if (v41 || v42 == 0) {
      break;
    }
    --v39;
    if (v84[1] == ++v38) {
      goto LABEL_36;
    }
  }
  int v57 = v84[1] - v38;
  if (v84[1] - v38 <= v84[0])
  {
LABEL_36:
    if (marker_hasNonConstCharPtrArg(*(_DWORD *)(*(void *)(a4 + 8) + 20))
      || !*(_DWORD *)(*(void *)(a4 + 8) + 20))
    {
      uint64_t v44 = checkForDefaultArgs(a1, a4, (_DWORD *)&v90 + 1);
LABEL_38:
      uint64_t v10 = v44;
      goto LABEL_39;
    }
    HIDWORD(v90) = setDefaultArgIfAny((uint64_t)a1, a4);
    if (!HIDWORD(v90)) {
      HIDWORD(v90) = *(_DWORD *)(*(void *)(a4 + 8) + 20) == 13;
    }
    goto LABEL_57;
  }
  int v58 = *(_DWORD *)(*(void *)(a4 + 8) + 20);
  int v59 = v91;
  if (v58 == 26 && v91 != 0)
  {
    uint64_t v13 = parseStringArg((uint64_t)a1, a4, (uint64_t)a2, v84[0], v91, (_DWORD *)&v90 + 1, 0);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v44 = parseStringArg((uint64_t)a1, a4, (uint64_t)a2, v59 + 1, v57, (_DWORD *)&v90 + 1, 1);
    goto LABEL_38;
  }
  uint64_t v61 = *(void *)(a1[1] + 8);
  uint64_t v62 = *(unsigned __int16 *)(v61 + 32);
  if (!*(_WORD *)(v61 + 32))
  {
LABEL_95:
    if (marker_hasNonConstCharPtrArg(v58))
    {
LABEL_96:
      uint64_t v13 = parseStringArg((uint64_t)a1, a4, (uint64_t)a2, v84[0], v57, (_DWORD *)&v90 + 1, 0);
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
      uint64_t v66 = *(void *)(a4 + 8);
      if (!*(_DWORD *)(v66 + 20))
      {
        heap_Free(*(void **)(*a1 + 8), *(void *)(v66 + 40));
        *(void *)(*(void *)(a4 + 8) + 40) = 0;
      }
      goto LABEL_57;
    }
    int v67 = *(_DWORD *)(*(void *)(a4 + 8) + 20);
    if (v67 == 2) {
      goto LABEL_112;
    }
    if (!v67) {
      goto LABEL_96;
    }
    uint64_t v68 = *(void *)(a1[1] + 8);
    uint64_t v69 = *(unsigned __int16 *)(v68 + 16);
    if (*(_WORD *)(v68 + 16))
    {
      uint64_t v70 = *(int **)(v68 + 24);
      while (1)
      {
        int v71 = *v70;
        v70 += 3;
        if (v71 == v67) {
          break;
        }
        if (!--v69) {
          goto LABEL_111;
        }
      }
LABEL_112:
      parseNumericArg((size_t)a1, a4, (uint64_t)a2, v84[0], v57, (_DWORD *)&v90 + 1, &v90);
      goto LABEL_57;
    }
LABEL_111:
    HIDWORD(v90) = v67 == 13;
    LODWORD(v90) = 0;
LABEL_57:
    uint64_t v10 = 0;
    goto LABEL_58;
  }
  uint64_t v63 = 0;
  uint64_t v64 = *(void *)(v61 + 40);
  uint64_t v65 = 16;
  while (*(_DWORD *)(v64 + v65 - 16) != v58)
  {
    ++v63;
    v65 += 24;
    if (v62 == v63) {
      goto LABEL_95;
    }
  }
  v94[0] = 0;
  memset(v93, 0, sizeof(v93));
  unsigned __int16 v79 = &a2[v84[0]];
  unsigned int v80 = v84[1] - v38;
  uint64_t v10 = exePattern("dummy", (uint64_t)a1, v79, (unsigned __int16)(LOWORD(v84[1]) - LOWORD(v84[0]) - v38), 0, 16, v94, (uint64_t)v93, &v92, v63);
  if ((v10 & 0x80000000) == 0)
  {
    if (v94[0] != 1) {
      goto LABEL_120;
    }
    if (v36 + LODWORD(v93[0]) - v84[0] - HIDWORD(v93[0]) == v38)
    {
      HIDWORD(v90) = 1;
      int v78 = v80;
      unsigned int v81 = v84[0];
      goto LABEL_123;
    }
    if (*(_DWORD *)(*(void *)(a4 + 8) + 20) == 7
      && (int v78 = HIDWORD(v93[0]) - LODWORD(v93[0]) + v84[0], v78 + 1 < v80)
      && utf8_BelongsToSet(8u, v79, HIDWORD(v93[0]), HIDWORD(v93[0]) + 1))
    {
      unsigned int v72 = v78 + 1;
      while (1)
      {
        unsigned int v82 = v72;
        if (!utf8_BelongsToSet(0, a2, v72, v72 + 1)) {
          break;
        }
        unsigned int v72 = utf8_determineUTF8CharLength(a2[v82]) + v82;
        if (v72 >= v80) {
          goto LABEL_140;
        }
      }
      unsigned int v72 = v82;
LABEL_140:
      unsigned int v81 = v72;
      if (v36 - v72 != v38)
      {
        uint64_t v74 = (uint64_t *)((char *)&v90 + 4);
LABEL_122:
        *(_DWORD *)uint64_t v74 = 1;
        if (!HIDWORD(v90))
        {
          if (*(_DWORD *)a4 == 1) {
            uint64_t v90 = 0x100000000;
          }
LABEL_39:
          if ((v10 & 0x80000000) != 0) {
            return v10;
          }
LABEL_58:
          uint64_t v53 = *(_DWORD **)(a4 + 8);
          v53[6] = v12;
          v53[7] = v37 - v12;
          v53[8] = v12;
          v53[9] = v12;
          if (!HIDWORD(v90))
          {
            v53[5] = 0;
            if (v90)
            {
LABEL_60:
              uint64_t v54 = *(void *)(a4 + 8);
              if (*(_DWORD *)(v54 + 20) == 2) {
                *(_DWORD *)(v54 + 20) = 3;
              }
              return v10;
            }
          }
LABEL_59:
          *a5 = 2;
          goto LABEL_60;
        }
LABEL_123:
        int v75 = *(_DWORD *)(*(void *)(*(void *)(a1[1] + 8) + 40) + v65);
        if (v75 == 1)
        {
          uint64_t v13 = parseStringArg((uint64_t)a1, a4, (uint64_t)a2, v84[0], v78, (_DWORD *)&v90 + 1, 0);
          uint64_t v10 = 0;
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
        }
        else if (!v75)
        {
          *(_DWORD *)(*(void *)(a4 + 8) + 40) = *v79;
        }
        if (v84[0] != v81 && v36 - v78 != v38)
        {
          uint64_t v13 = parseStringArg((uint64_t)a1, a4, (uint64_t)a2, v81, v80, (_DWORD *)&v90 + 1, 1);
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
          uint64_t v10 = 0;
        }
        if (!HIDWORD(v90) && *(_DWORD *)(*(void *)(*(void *)(a1[1] + 8) + 40) + v65) == 1)
        {
          uint64_t v76 = *(void *)(*(void *)(a4 + 8) + 40);
          if (v76)
          {
            heap_Free(*(void **)(*a1 + 8), v76);
            *(void *)(*(void *)(a4 + 8) + 40) = 0;
          }
        }
        goto LABEL_39;
      }
      unsigned int v73 = v80;
    }
    else
    {
LABEL_120:
      int v78 = v80;
      unsigned int v73 = v84[0];
    }
    unsigned int v81 = v73;
    HIDWORD(v90) = 0;
    uint64_t v74 = &v90;
    goto LABEL_122;
  }
  return v10;
}

uint64_t escseqm_ClassOpen(_WORD *a1, int a2, uint64_t **a3)
{
  uint64_t v3 = 2147491850;
  uint64_t v50 = 0;
  int v49 = 0;
  if (!a3) {
    return 2147491847;
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v50);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v8 = heap_Calloc(*(void **)(v50 + 8), 1, 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)v8;
    int UInt = paramc_ParamGetUInt(*(void *)(v50 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v49);
    unsigned __int16 v11 = v49;
    int v12 = paramc_ParamGetUInt(*(void *)(v50 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v49);
    __int16 v13 = v49;
    uint64_t v14 = nuance_pcre_ObjOpen(a1, a2, (uint64_t)&v47);
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v3 = v14;
    }
    else
    {
      if (v12 < 0) {
        __int16 v15 = 50;
      }
      else {
        __int16 v15 = v13;
      }
      if (UInt < 0) {
        unsigned __int16 v16 = 30;
      }
      else {
        unsigned __int16 v16 = v11;
      }
      uint64_t v17 = nuance_pcre_Init(v47, v48, v16, v15);
      uint64_t v18 = v17;
      if ((v17 & 0x80000000) != 0)
      {
        uint64_t v3 = v17;
      }
      else
      {
        *uint64_t v9 = v50;
        uint64_t v19 = heap_Calloc(*(void **)(v50 + 8), 1, 96);
        v9[1] = v19;
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v44 = v9;
          uint64_t v21 = v50;
          uint64_t v22 = v47;
          int v46 = v48;
          uint64_t v53 = 0;
          int v52 = 0;
          char __s = 0;
          paramc_ParamGetStr(*(void *)(v50 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &__s);
          *(_WORD *)(v20 + 4) = 35;
          uint64_t v23 = (void *)heap_Calloc(*(void **)(v21 + 8), 1, 840);
          *(void *)(v20 + 8) = v23;
          if (v23)
          {
            cstdlib_memcpy(v23, &g_pEscMappings, 0x348uLL);
            *(_WORD *)(v20 + 16) = 9;
            int v24 = (void *)heap_Calloc(*(void **)(v21 + 8), 9, 12);
            *(void *)(v20 + 24) = v24;
            if (v24)
            {
              cstdlib_memcpy(v24, &g_pEscNumericArgs, 0x6CuLL);
              *(_WORD *)(v20 + 48) = 6;
              uint64_t v25 = heap_Calloc(*(void **)(v21 + 8), 6, 24);
              *(void *)(v20 + 56) = v25;
              if (v25)
              {
                uint64_t v26 = 0;
                int v27 = (const char **)off_264561CF0;
                int v28 = v46;
                do
                {
                  int v29 = *(v27 - 1);
                  *(void *)(*(void *)(v20 + 56) + v26 + 16) = v29;
                  if (__s && *__s && !cstdlib_strcmp(v29, "esc"))
                  {
                    unsigned int v45 = *(void **)(v21 + 8);
                    BOOL v30 = *v27;
                    uint64_t v31 = v22;
                    uint64_t v32 = v21;
                    size_t v33 = cstdlib_strlen(*v27);
                    size_t v34 = v33 + cstdlib_strlen(__s);
                    uint64_t v21 = v32;
                    uint64_t v22 = v31;
                    unsigned __int16 v35 = (char *)heap_Calloc(v45, 1, v34 + 2);
                    if (!v35) {
                      goto LABEL_30;
                    }
                    unsigned int v36 = v35;
                    cstdlib_strcpy(v35, v30);
                    v36[cstdlib_strlen(v30) - 1] = 0;
                    cstdlib_strcat(v36, "|");
                    cstdlib_strcat(v36, __s);
                    cstdlib_strcat(v36, ")");
                    int v28 = v46;
                    *(void *)(*(void *)(v20 + 56) + v26) = nuance_pcre_compile((uint64_t)v22, v46, v36, 2048, &v53, &v52, 0);
                    heap_Free(*(void **)(v21 + 8), (uint64_t)v36);
                  }
                  else
                  {
                    *(void *)(*(void *)(v20 + 56) + v26) = nuance_pcre_compile((uint64_t)v22, v28, (char *)*v27, 2048, &v53, &v52, 0);
                  }
                  v26 += 24;
                  v27 += 2;
                }
                while (v26 != 144);
                *(_WORD *)(v20 + 32) = 3;
                uint64_t v38 = heap_Calloc(*(void **)(v21 + 8), 3, 24);
                *(void *)(v20 + 40) = v38;
                if (v38)
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = *(void *)(v20 + 56);
                  uint64_t v41 = v38 + 8;
                  do
                  {
                    *(_DWORD *)(v41 + 8) = 1;
                    *(_DWORD *)(v41 - 8) = *(_DWORD *)&g_pEscValidations[v39];
                    *(void *)uint64_t v41 = *(void *)(v40 + 24 * g_pEscValidations[v39 + 4]);
                    v41 += 24;
                    v39 += 12;
                  }
                  while (v39 != 36);
                  *(_WORD *)(v20 + 64) = 2;
                  uint64_t v42 = (void *)heap_Calloc(*(void **)(v21 + 8), 1, 32);
                  *(void *)(v20 + 72) = v42;
                  if (v42)
                  {
                    cstdlib_memcpy(v42, &g_escStr2EnumMappings, 0x20uLL);
                    *(_WORD *)(v20 + 80) = 5;
                    int v43 = (void *)heap_Calloc(*(void **)(v21 + 8), 1, 120);
                    *(void *)(v20 + 88) = v43;
                    if (v43)
                    {
                      cstdlib_memcpy(v43, &g_escStr2StrMappings, 0x78uLL);
                      *(_DWORD *)uint64_t v20 = 1;
                      *a3 = v44;
                      goto LABEL_31;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_30:
    escseqm_ClassClose(*a3);
    uint64_t v18 = v3;
LABEL_31:
    nuance_pcre_DeInit(v47, v48);
    nuance_pcre_ObjClose((uint64_t)v47, v48);
    return v18;
  }
  return 10;
}

uint64_t escseqm_ClassClose(uint64_t *a1)
{
  if (!a1) {
    return 7;
  }
  uint64_t v3 = *a1;
  uint64_t v2 = (void *)a1[1];
  if (*(_DWORD *)v2 != 1) {
    goto LABEL_24;
  }
  uint64_t v4 = v2[1];
  if (v4)
  {
    heap_Free(*(void **)(v3 + 8), v4);
    v2[1] = 0;
    *((_WORD *)v2 + 2) = 0;
  }
  uint64_t v5 = v2[3];
  if (v5)
  {
    heap_Free(*(void **)(v3 + 8), v5);
    v2[3] = 0;
    *((_WORD *)v2 + 8) = 0;
  }
  uint64_t v6 = v2[7];
  if (v6)
  {
    unsigned int v7 = *((unsigned __int16 *)v2 + 24);
    if (*((_WORD *)v2 + 24))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        if (*(void *)(v6 + v8))
        {
          heap_Free(*(void **)(v3 + 8), *(void *)(v6 + v8));
          uint64_t v6 = v2[7];
          unsigned int v7 = *((unsigned __int16 *)v2 + 24);
        }
        uint64_t v10 = (void *)(v6 + v8);
        *uint64_t v10 = 0;
        int v10[2] = 0;
        ++v9;
        v8 += 24;
      }
      while (v9 < v7);
    }
    heap_Free(*(void **)(v3 + 8), v6);
    v2[7] = 0;
  }
  uint64_t v11 = v2[5];
  if (v11)
  {
    uint64_t v12 = *((unsigned __int16 *)v2 + 16);
    if (*((_WORD *)v2 + 16))
    {
      __int16 v13 = (void *)(v11 + 8);
      do
      {
        *__int16 v13 = 0;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    heap_Free(*(void **)(v3 + 8), v11);
    v2[5] = 0;
  }
  uint64_t v14 = v2[9];
  if (v14)
  {
    heap_Free(*(void **)(v3 + 8), v14);
    v2[9] = 0;
  }
  uint64_t v15 = v2[11];
  if (v15)
  {
    heap_Free(*(void **)(v3 + 8), v15);
    v2[11] = 0;
  }
  *(_DWORD *)uint64_t v2 = 0;
  cstdlib_memset(v2, 0, 0x60uLL);
  uint64_t v2 = (void *)a1[1];
  if (v2) {
LABEL_24:
  }
    heap_Free(*(void **)(v3 + 8), (uint64_t)v2);
  heap_Free(*(void **)(v3 + 8), (uint64_t)a1);
  return 0;
}

uint64_t escseqm_ObjOpen(uint64_t a1, _WORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v19 = 0;
  unsigned int v18 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = 2147491847;
  if (a1)
  {
    if (a6)
    {
      uint64_t inited = InitRsrcFunction(a2, a3, &v19);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v12 = inited;
        *a6 = 0;
        uint64_t v13 = heap_Calloc(*(void **)(v19 + 8), 1, 64);
        if (v13)
        {
          uint64_t v14 = v13;
          *(void *)uint64_t v13 = v19;
          *(_DWORD *)(v13 + 52) = 0;
          if (paramc_ParamGetStr(*(void *)(v19 + 40), (uint64_t)"processingtnplus", &v17)) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v17 == 0;
          }
          if (!v15 && !LH_stricmp(v17, "yes")) {
            *(_DWORD *)(v14 + 52) = 1;
          }
          *(_DWORD *)(v14 + 56) = 0;
          *(void *)(v14 + 24) = a4;
          *(void *)(v14 + 32) = a5;
          *(void *)(v14 + 8) = a1;
          *(void *)(v14 + 16) = 0;
          *(void *)(v14 + 40) = *(void *)(a1 + 8);
          *(_WORD *)(v14 + 48) = 1024;
          if ((paramc_ParamGetUInt(*(void *)(v19 + 40), (uint64_t)"ppescseqmaxlength", &v18) & 0x80000000) == 0) {
            *(_WORD *)(v14 + 48) = v18 + 32;
          }
          *a6 = v14;
          return v12;
        }
        else
        {
          return 2147491850;
        }
      }
    }
  }
  return v6;
}

uint64_t escseqm_ObjClose(uint64_t *a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t v1 = *a1;
  a1[5] = 0;
  heap_Free(*(void **)(v1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t escseqm_ProcessStart(uint64_t a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t escseqm_GetDefaults(void *a1, uint64_t *a2)
{
  uint64_t v2 = 2147491847;
  int v12 = 0;
  if (a1)
  {
    uint64_t v5 = heap_Calloc(*(void **)(*a1 + 8), 1, 2561);
    if (!v5) {
      return 2147491850;
    }
    uint64_t v6 = v5;
    v11[0] = 0;
    uint64_t v7 = v5 + 64;
    uint64_t v8 = 1;
    while (1)
    {
      *(_DWORD *)(v7 + 20) = v8;
      v11[1] = v7;
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = 0;
      if ((unsigned __int16)v8 <= 0xDu && ((1 << v8) & 0x2314) != 0) {
        goto LABEL_6;
      }
      int hasNonConstCharPtrArg = marker_hasNonConstCharPtrArg(v8);
      checkForDefaultArgs(a1, (uint64_t)v11, &v12);
      if (hasNonConstCharPtrArg) {
        break;
      }
      if (v12)
      {
        if (*(_WORD *)(*(void *)(a1[1] + 8) + 64)) {
          escseqm_str2enumMapping(a1, (uint64_t)v11);
        }
        goto LABEL_7;
      }
      *(_DWORD *)(v7 + 20) = v8;
      if (!setDefaultArgIfAny((uint64_t)a1, (uint64_t)v11)) {
        goto LABEL_6;
      }
LABEL_7:
      ++v8;
      v7 += 64;
      if (v8 == 40)
      {
        uint64_t v2 = 0;
        *a2 = v6;
        return v2;
      }
    }
    if (v12) {
      goto LABEL_7;
    }
LABEL_6:
    *(_DWORD *)(v7 + 20) = 0;
    goto LABEL_7;
  }
  return v2;
}

uint64_t checkForDefaultArgs(void *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v6 = *(void *)(a1[1] + 8);
  uint64_t v7 = *(unsigned __int16 *)(v6 + 80);
  if (*(_WORD *)(v6 + 80))
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(v6 + 88);
    while (1)
    {
      uint64_t v10 = *(unsigned __int16 *)(v9 + 24 * v8 + 8);
      if (*(_WORD *)(v9 + 24 * v8 + 8)) {
        break;
      }
LABEL_7:
      if (++v8 == v7)
      {
        uint64_t v13 = *(void *)(a2 + 8);
        goto LABEL_18;
      }
    }
    uint64_t v11 = *(unsigned __int16 **)(v9 + 24 * v8 + 16);
    while (1)
    {
      int v12 = *v11++;
      if (*(_DWORD *)(*(void *)(a2 + 8) + 20) == v12) {
        break;
      }
      if (!--v10) {
        goto LABEL_7;
      }
    }
    uint64_t v14 = *(void **)(*a1 + 8);
    int v15 = cstdlib_strlen(*(const char **)(v9 + 24 * v8));
    *(void *)(*(void *)(a2 + 8) + 40) = heap_Calloc(v14, 1, (v15 + 1));
    unsigned __int16 v16 = *(char **)(*(void *)(a2 + 8) + 40);
    if (v16)
    {
      cstdlib_strcpy(v16, *(const char **)(*(void *)(*(void *)(a1[1] + 8) + 88) + 24 * v8));
      uint64_t result = 0;
      *a3 = 1;
      return result;
    }
    return 2147491850;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  unsigned int v18 = *(_DWORD *)(v13 + 20);
  BOOL v19 = v18 > 0x24;
  uint64_t v20 = (1 << v18) & 0x1000201000;
  if (!v19 && v20 != 0)
  {
    uint64_t v22 = *(void **)(*a1 + 8);
    MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
    int v24 = cstdlib_strlen(MarkerArgStr);
    *(void *)(*(void *)(a2 + 8) + 40) = heap_Calloc(v22, 1, (v24 + 1));
    uint64_t v25 = *(char **)(*(void *)(a2 + 8) + 40);
    if (v25)
    {
      uint64_t v26 = marker_getMarkerArgStr(1u);
      cstdlib_strcpy(v25, v26);
      uint64_t result = 0;
      *a3 = 1;
      return result;
    }
    return 2147491850;
  }
LABEL_18:
  uint64_t v27 = *(void *)(v13 + 40);
  if (v27)
  {
    heap_Free(*(void **)(*a1 + 8), v27);
    *(void *)(*(void *)(a2 + 8) + 40) = 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a2 + 8) + 20) = 0;
  return result;
}

uint64_t setDefaultArgIfAny(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = *(unsigned __int16 *)(v2 + 4);
  if (!*(_WORD *)(v2 + 4))
  {
LABEL_6:
    uint64_t result = 0;
LABEL_7:
    *(_DWORD *)a2 = result;
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(_DWORD *)(v4 + 20);
  uint64_t v6 = (int *)(*(void *)(v2 + 8) + 16);
  while (v5 != *(v6 - 1) || *(v6 - 2) != 1)
  {
    v6 += 6;
    if (!--v3) {
      goto LABEL_6;
    }
  }
  if (*v6 != 9999)
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v8 = v5 == 8;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      int v9 = 29999;
    }
    else {
      int v9 = *v6;
    }
    *(_DWORD *)(v4 + 40) = v9;
    uint64_t result = 1;
    goto LABEL_7;
  }
  return 0;
}

uint64_t escseqm_Match(void *a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2 || !a3 || !a4) {
    return 2147491847;
  }
  if (!**(_DWORD **)(a1[1] + 8))
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"PP", 1805, 0, a5, a6, a7, a8, v10);
    return 2147491847;
  }
  int v12 = 0;
  v11[0] = 0;
  v11[1] = a4;
  uint64_t result = escseqm_get_token(a1, a2, a3, (uint64_t)v11, &v12);
  if ((result & 0x1FFF) != 0xA)
  {
    if (v12 == 2)
    {
      if (*(_WORD *)(*(void *)(a1[1] + 8) + 64)) {
        escseqm_str2enumMapping(a1, (uint64_t)v11);
      }
      return 0;
    }
    else
    {
      return 2147491840;
    }
  }
  return result;
}

uint64_t getTrueEnd(uint64_t a1, char *a2, unsigned int a3, int a4, unsigned int *a5, int a6, _DWORD *a7)
{
  uint64_t result = 0;
  *a7 = 0;
  if (a3 > (unsigned __int16)a4)
  {
    int v10 = a4;
    int v13 = 0;
    int v14 = 0;
    unsigned int v15 = (unsigned __int16)a4;
    BOOL v16 = a6 == 29;
    BOOL v17 = a6 != 26;
    if (a6 == 26) {
      BOOL v16 = 1;
    }
    if (a6 == 7) {
      BOOL v17 = 0;
    }
    char v29 = v17;
    int v30 = 0;
    char v18 = a6 == 7 || v16;
    while (1)
    {
      if (!a2[(unsigned __int16)v10]) {
        return 0;
      }
      int v19 = isEsc(a1, a2, (unsigned __int16)(a3 - v10), v15, &v31);
      int v20 = a2[(unsigned __int16)v10];
      if (v19)
      {
        if (v20 != 92) {
          return 0;
        }
      }
      else if (v20 != 92)
      {
        LODWORD(v21) = v15 + 1;
        goto LABEL_32;
      }
      uint64_t v21 = v15 + 1;
      if (v21 < a3 && ((int v22 = a2[v21], v22 == 92) || v22 == 34))
      {
        char v23 = v29;
        if (v14 != 1) {
          char v23 = 1;
        }
        if (a6 != 29 && (v23 & 1) != 0)
        {
LABEL_53:
          *a5 = v15;
          return 1;
        }
      }
      else
      {
        if (v14 == 1) {
          char v24 = v18;
        }
        else {
          char v24 = 0;
        }
        if ((v24 & 1) == 0) {
          goto LABEL_53;
        }
      }
      if (v21 < a3)
      {
        int v25 = a2[v21];
        if (v25 == 92 || v25 == 34)
        {
          ++v10;
          goto LABEL_51;
        }
      }
      int v20 = 92;
LABEL_32:
      if (a6 != 26 && a6 != 7 || v20 != 34) {
        goto LABEL_51;
      }
      if (v14 == 1)
      {
        if (v30 | v13)
        {
          int v14 = 0;
          if (v13) {
            BOOL v26 = 0;
          }
          else {
            BOOL v26 = v30 == 1;
          }
          if (v26) {
            int v13 = 1;
          }
          goto LABEL_51;
        }
        int v14 = 0;
        int v13 = 0;
        if (a2[v21] == 58) {
          *a7 = v21;
        }
      }
      else
      {
        if (v30 != 1)
        {
          int v14 = 1;
          goto LABEL_51;
        }
        uint64_t result = 0;
        if (a6 != 26 || v13 == 1) {
          return result;
        }
        int v14 = 1;
      }
      int v30 = 1;
LABEL_51:
      unsigned int v15 = (unsigned __int16)++v10;
      if ((unsigned __int16)v10 >= a3) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t parseStringArg(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6, int a7)
{
  size_t v13 = a5 - a4;
  int v14 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v13 + 1));
  if (!v14) {
    return 2147491850;
  }
  unsigned int v15 = v14;
  unsigned int v16 = (unsigned __int16)v13;
  cstdlib_memcpy(v14, (const void *)(a3 + a4), v13);
  if ((_WORD)v13)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    unsigned __int16 v19 = v13;
    do
    {
      if (v18)
      {
        int v20 = &v15[(v18 - 1)];
        if (*v20 == 92)
        {
          int v21 = v15[v18];
          if (v21 == 92 || v21 == 34)
          {
            cstdlib_memmove(v20, &v15[v18], v17 + v16);
            v15[v16 - 1] = 0;
            --v19;
          }
        }
      }
      ++v18;
      unsigned int v16 = v19;
      --v17;
    }
    while (v18 < v19);
  }
  if (a7 == 1 || (uint64_t v22 = *(void *)(a2 + 8), *(_DWORD *)(v22 + 20) == 26))
  {
    if (utf8_BelongsToSet(7u, v15, 0, v13))
    {
      int v23 = cstdlib_strlen(v15);
      if (utf8_BelongsToSet(7u, v15, v23 - 1, v13))
      {
        if (cstdlib_strlen(v15) != 1)
        {
          uint64_t v24 = (unsigned __int16)cstdlib_strlen(v15);
          cstdlib_memmove(v15, v15 + 1, (int)v24 - 1);
          v15[v24 - 2] = 0;
        }
      }
    }
    if (a7 == 1)
    {
      size_t v25 = cstdlib_strlen(v15);
      BOOL v26 = (char **)(*(void *)(a2 + 8) + 48);
      if (!v25)
      {
        *BOOL v26 = 0;
        *a6 = 0;
        heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v15);
        return 0;
      }
      goto LABEL_22;
    }
    uint64_t v22 = *(void *)(a2 + 8);
  }
  BOOL v26 = (char **)(v22 + 40);
LABEL_22:
  uint64_t result = 0;
  *BOOL v26 = v15;
  *a6 = 1;
  return result;
}

size_t parseNumericArg(size_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7 = a7;
  uint64_t v25 = *MEMORY[0x263EF8340];
  *a7 = 0;
  *a6 = 0;
  unint64_t v8 = a5 - a4;
  if (v8 <= 0xA && a3)
  {
    size_t v11 = result;
    uint64_t v12 = a3 + a4;
    cstdlib_memset(__b, 0, 0xBuLL);
    unint64_t v13 = 0;
    do
    {
      __b[v13] = *(unsigned char *)(v12 + v13);
      uint64_t result = cstdlib_strlen(__b);
      if (__b[v13])
      {
        unsigned int v14 = result;
        uint64_t result = utf8_BelongsToSet(6u, __b, v13, result);
        if (result)
        {
          uint64_t result = utf8_BelongsToSet(0, __b, v13, v14);
          if (!result) {
            goto LABEL_7;
          }
        }
      }
      goto LABEL_21;
LABEL_7:
      if (v13 + 1 >= v8) {
        break;
      }
      if (v13 > 8) {
        break;
      }
    }
    while (__b[v13++]);
    int v16 = *(_DWORD *)(*(void *)(a2 + 8) + 20);
    if (v16 == 2)
    {
      uint64_t v17 = v12;
      int v18 = v8;
      unsigned int v19 = 0;
      unsigned int v20 = 1;
LABEL_20:
      uint64_t result = escseqm_ReadU32InRange(v17, v18, v19, v20);
      *(_DWORD *)(*(void *)(a2 + 8) + 40) = result;
      uint64_t v7 = a6;
      goto LABEL_21;
    }
    uint64_t v21 = *(void *)(*(void *)(v11 + 8) + 8);
    uint64_t v22 = *(unsigned __int16 *)(v21 + 16);
    if (*(_WORD *)(v21 + 16))
    {
      int v23 = (unsigned int *)(*(void *)(v21 + 24) + 8);
      while (*(v23 - 2) != v16)
      {
        v23 += 3;
        if (!--v22) {
          goto LABEL_16;
        }
      }
      unsigned int v19 = *(v23 - 1);
      unsigned int v20 = *v23;
      uint64_t v17 = v12;
      int v18 = v8;
      goto LABEL_20;
    }
LABEL_16:
    if (*(_DWORD *)a2 == 1) {
      uint64_t v7 = a6;
    }
  }
LABEL_21:
  *uint64_t v7 = 1;
  return result;
}

uint64_t escseqm_ReadU32InRange(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v15 = 0;
  cstdlib_memset(__b, 0, 0xBuLL);
  int64_t v8 = 0;
  do
  {
    unint64_t v9 = v8;
    int v10 = *(unsigned __int8 *)(a1 + v8);
    __b[v8++] = v10;
    if (v9 > 8) {
      break;
    }
  }
  while (v10 && v8 < a2);
  __b[v8] = 0;
  unsigned int v12 = cstdlib_strtoul(__b, &v15, 0xAu);
  if (v12 >= a4) {
    unsigned int v13 = a4;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v12 >= a3) {
    return v13;
  }
  else {
    return a3;
  }
}

uint64_t escseqs_ClassOpen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = 2147491847;
  uint64_t v11 = 0;
  if ((InitRsrcFunction(a1, a2, &v11) & 0x80000000) == 0)
  {
    uint64_t v7 = heap_Calloc(*(void **)(v11 + 8), 1, 32);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = v11;
      *(void *)(v7 + 8) = a2;
      *(void *)(v7 + 16) = v9;
      *(void *)uint64_t v7 = a1;
      uint64_t v6 = escseqm_ClassOpen(a1, a2, (uint64_t **)(v7 + 24));
      if ((v6 & 0x80000000) != 0) {
        heap_Free(*(void **)(v11 + 8), v8);
      }
      else {
        *a3 = v8;
      }
    }
    else
    {
      return 2147491850;
    }
  }
  return v6;
}

uint64_t escseqs_ClassClose(uint64_t a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = escseqm_ClassClose(*(uint64_t **)(a1 + 24));
  if ((v3 & 0x80000000) == 0) {
    heap_Free(*(void **)(v2 + 8), a1);
  }
  return v3;
}

uint64_t escseqs_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v6 = 2147491847;
  if (a6 && (InitRsrcFunction(a2, a3, &v30) & 0x80000000) == 0)
  {
    *a6 = 0;
    unsigned int v13 = (void *)heap_Alloc(v30[1], 96);
    if (!v13) {
      return 2147491850;
    }
    uint64_t v14 = (uint64_t)v13;
    cstdlib_memset(v13, 0, 0x60uLL);
    *(void *)(v14 + 72) = a1;
    *(void *)uint64_t v14 = a2;
    *(void *)(v14 + 8) = a3;
    uint64_t v15 = escseqm_ObjOpen(*(void *)(a1 + 24), a2, a3, a4, a5, (uint64_t *)(v14 + 64));
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v20 = v15;
      heap_Free((void *)v30[1], v14);
      return v20;
    }
    if ((objc_GetObject(v30[6], (uint64_t)"AUDIOFETCHER", &v29) & 0x80000000) == 0)
    {
      uint64_t v16 = v29;
      if (*(unsigned char *)v29 != 1 || (uint64_t v17 = *(void *)(v29 + 8)) == 0)
      {
        uint64_t v21 = v30[6];
        uint64_t v22 = "AUDIOFETCHER";
LABEL_18:
        objc_ReleaseObject(v21, (uint64_t)v22);
        log_OutPublic(v30[4], (uint64_t)&modESCPP, 2574, 0, v23, v24, v25, v26, v29);
        int v27 = escseqs_ObjClose(v14);
        if (v27 < 0) {
          return v27;
        }
        else {
          return 2147491853;
        }
      }
      *(void *)(v14 + 32) = v17;
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(v16 + 16);
    }
    if ((objc_GetObject(v30[6], (uint64_t)"LANGCODECONVERTER", &v29) & 0x80000000) != 0)
    {
LABEL_13:
      uint64_t v6 = 0;
      *a6 = v14;
      return v6;
    }
    uint64_t v18 = v29;
    if (*(unsigned char *)v29 == 1)
    {
      uint64_t v19 = *(void *)(v29 + 8);
      if (v19)
      {
        *(void *)(v14 + 56) = v19;
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v18 + 16);
        goto LABEL_13;
      }
    }
    uint64_t v21 = v30[6];
    uint64_t v22 = "LANGCODECONVERTER";
    goto LABEL_18;
  }
  return v6;
}

uint64_t escseqs_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2147491847;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 64);
    if (v3) {
      escseqm_ObjClose(v3);
    }
    if (*(void *)(a1 + 56)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"LANGCODECONVERTER");
    }
    if (*(void *)(a1 + 32)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"AUDIOFETCHER");
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t escseqs_SetMarkerSyncPos(uint64_t a1, int a2)
{
  if (!a1) {
    return 2147491847;
  }
  *(_DWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 84) = a2;
  *(_DWORD *)(a1 + 92) = 1;
  return escseqm_ProcessStart(*(void *)(a1 + 64));
}

uint64_t escseqs_SetReset(uint64_t a1)
{
  if (!a1) {
    return 2147491847;
  }
  uint64_t result = 0;
  *(void *)(a1 + 88) = 0x100000000;
  return result;
}

uint64_t escseqs_GetPosOut(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 84);
  return 0;
}

uint64_t escseqs_GetPosInOut(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  *a2 = *(_DWORD *)(result + 80);
  *a3 = *(_DWORD *)(result + 84);
  return result;
}

uint64_t escseqs_SetPosInOut(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 80) = a2;
  *(_DWORD *)(result + 84) = a3;
  return result;
}

uint64_t escseqs_ProcessStart(uint64_t a1, _DWORD *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t Defaults = 2147491847;
  char __s1 = 0;
  unsigned int v10 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    if ((paramc_ParamGetStr(*(void *)(v12 + 40), (uint64_t)"component_stop_not_reset", &__s1) & 0x80000000) != 0
      || !__s1
      || cstdlib_strcmp(__s1, "yes"))
    {
      if ((paramc_ParamGetUInt(*(void *)(v12 + 40), (uint64_t)"pipelineswitchexecuting", &v10) & 0x80000000) != 0
        || !v10)
      {
        *(void *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 92) = 0;
      }
    }
    else
    {
      paramc_ParamSetStr(*(void *)(v12 + 40), (uint64_t)"component_stop_not_reset", "");
    }
    paramc_ParamSetUInt(*(void *)(v12 + 40), (uint64_t)"pipelineswitchexecuting", 0);
    uint64_t v5 = escseqm_ProcessStart(*(void *)(a1 + 64));
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t Defaults = v5;
    }
    else
    {
      uint64_t Defaults = escseqm_GetDefaults(*(void **)(a1 + 64), &v13);
      if ((Defaults & 0x80000000) == 0)
      {
        for (uint64_t i = 104; i != 2600; i += 64)
        {
          int v7 = *(_DWORD *)(v13 + i - 20);
          if (v7 == 31) {
            *a2 = *(_DWORD *)(v13 + i);
          }
          if (marker_hasNonConstCharPtrArg(v7))
          {
            uint64_t v8 = *(void *)(v13 + i);
            if (v8)
            {
              heap_Free(*(void **)(v12 + 8), v8);
              *(void *)(v13 + i) = 0;
            }
          }
        }
      }
    }
    if (v13) {
      heap_Free(*(void **)(v12 + 8), v13);
    }
  }
  return Defaults;
}

uint64_t escseqs_Process(uint64_t a1, uint64_t a2)
{
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v4 = 2147491847;
  long long v171 = 0u;
  memset(__b, 0, sizeof(__b));
  long long v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  char __s = 0;
  char __s1 = 0;
  uint64_t v159 = 0;
  cstdlib_memset(__b, 0, 0x40uLL);
  LODWORD(__b[0]) = 0;
  *((void *)&__b[0] + 1) = 0;
  LOWORD(__b[1]) = 0;
  *(void *)&long long v171 = 0;
  DWORD2(v171) = 0;
  memset((char *)&__b[1] + 4, 0, 20);
  cstdlib_memset(&v166, 0, 0x40uLL);
  LODWORD(v166) = 1;
  *((void *)&v166 + 1) = 0;
  LOWORD(v167) = 0;
  DWORD1(v167) = 2;
  *(void *)&long long v169 = 0;
  DWORD2(v169) = 0;
  *((void *)&v167 + 1) = 0;
  *(void *)&long long v168 = 0;
  cstdlib_memset(&v162, 0, 0x40uLL);
  LODWORD(v162) = 0;
  *((void *)&v162 + 1) = 0;
  LOWORD(v163) = 0;
  DWORD1(v163) = 36;
  *(void *)&long long v165 = 0;
  DWORD2(v165) = 0;
  *((void *)&v163 + 1) = 0;
  *(void *)&long long v164 = 0;
  if (!a1 || !a2 || (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v173) & 0x80000000) != 0) {
    return v4;
  }
  uint64_t appended = datac_RequestBlock(a2, 1000, 1u, &v172);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t v6 = *(char **)(v172 + 8);
  if (!v6) {
    return v4;
  }
  if (*(_WORD *)(v172 + 2) != 1) {
    return 2147491865;
  }
  unsigned __int16 v7 = cstdlib_strlen("ins_unknown");
  unsigned int v8 = *(_DWORD *)(a1 + 80);
  int v9 = *(_DWORD *)(a1 + 84);
  DWORD1(__b[1]) = 0x4000;
  *((void *)&__b[1] + 1) = v8;
  LODWORD(__b[0]) = 0;
  LOWORD(__b[1]) = 0;
  *((void *)&__b[0] + 1) = 0;
  LODWORD(__b[2]) = v9;
  *(void *)((char *)&__b[2] + 4) = 0;
  DWORD2(v171) = 0;
  *(void *)&long long v171 = 0;
  uint64_t appended = escseqs_AppendOutMarker(a2, __b);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  if ((paramc_ParamGetStr(*(void *)(v173 + 40), (uint64_t)"textanalysison", &__s1) & 0x80000000) == 0)
  {
    if (__s1)
    {
      if (*__s1)
      {
        int v10 = cstdlib_strcmp(__s1, "yes");
        if (!(DWORD2(__b[1]) | v10))
        {
          unsigned __int16 v35 = (char *)heap_Calloc(*(void **)(v173 + 8), 1, v7 + 1);
          if (!v35) {
            return 2147491850;
          }
          uint64_t v36 = (uint64_t)v35;
          cstdlib_strcpy(v35, "ins_unknown");
          *((void *)&v163 + 1) = 0;
          *(void *)&long long v164 = 0;
          *((void *)&v164 + 1) = v36;
          uint64_t appended = escseqs_AppendOutMarker(a2, &v162);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          heap_Free(*(void **)(v173 + 8), v36);
        }
      }
    }
  }
  *(void *)char __dst = 0;
  *(void *)uint64_t v174 = 0;
  uint64_t appended = datac_RequestBlock(a2, 1011, 1u, __dst);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t appended = datac_RequestBlock(a2, 1012, 1u, v174);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  unsigned int v150 = (unsigned __int8 *)v6;
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    uint64_t v11 = 0;
    *(_DWORD *)char __dst = 0;
    *(_DWORD *)(a1 + 92) = 0;
    while (1)
    {
      uint64_t v12 = aTAG2PARAM_0[v11];
      if ((int)v12 > 30)
      {
        if (v12 == 36)
        {
LABEL_26:
          uint64_t Str = paramc_ParamGetStr(*(void *)(v173 + 40), *(void *)&aTAG2PARAM_0[v11 + 2], &__s);
          if ((Str & 0x1FFF) != 0x14)
          {
            uint64_t v17 = Str;
            if ((Str & 0x80000000) != 0) {
              goto LABEL_279;
            }
            log_OutText(*(void *)(v173 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] GET PARAM marker:%d param=%s val=%s", v22, v23, v24, v12);
            size_t v25 = (unsigned __int16)cstdlib_strlen(__s);
            uint64_t v26 = (char *)heap_Calloc(*(void **)(v173 + 8), 1, v25 + 1);
            if (!v26) {
              return 2147491850;
            }
            uint64_t v27 = (uint64_t)v26;
            cstdlib_strncpy(v26, __s, v25);
            *(unsigned char *)(v27 + v25) = 0;
            LODWORD(__b[0]) = 1;
            unsigned int v28 = *(_DWORD *)(a1 + 80);
            unsigned int v29 = *(_DWORD *)(a1 + 84);
            DWORD1(__b[1]) = v12;
            *((void *)&__b[1] + 1) = v28;
            *(void *)&__b[2] = v29;
            *((void *)&__b[2] + 1) = v27;
            uint64_t v30 = escseqs_AppendOutMarker(a2, __b);
            if ((v30 & 0x80000000) != 0)
            {
              uint64_t v17 = v30;
              heap_Free(*(void **)(v173 + 8), v27);
              goto LABEL_279;
            }
            heap_Free(*(void **)(v173 + 8), v27);
          }
          paramc_ParamRelease(*(void *)(v173 + 40));
          char __s = 0;
          goto LABEL_32;
        }
        if (v12 == 31)
        {
LABEL_22:
          uint64_t UInt = paramc_ParamGetUInt(*(void *)(v173 + 40), *(void *)&aTAG2PARAM_0[v11 + 2], (unsigned int *)__dst);
          if ((UInt & 0x1FFF) != 0x14)
          {
            uint64_t v17 = UInt;
            if ((UInt & 0x80000000) != 0) {
              goto LABEL_279;
            }
            log_OutText(*(void *)(v173 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] GET PARAM marker:%d param=%s val=%d", v14, v15, v16, v12);
            LODWORD(__b[0]) = 1;
            unsigned int v18 = *(_DWORD *)(a1 + 80);
            unsigned int v19 = *(_DWORD *)(a1 + 84);
            DWORD1(__b[1]) = v12;
            *((void *)&__b[1] + 1) = v18;
            *(void *)&__b[2] = v19;
            DWORD2(__b[2]) = *(_DWORD *)__dst;
            DWORD2(v171) = 0;
            *(void *)&long long v171 = 0;
            uint64_t v20 = escseqs_AppendOutMarker(a2, __b);
            if ((v20 & 0x80000000) != 0) {
              goto LABEL_278;
            }
          }
        }
      }
      else
      {
        if (v12 == 7) {
          goto LABEL_22;
        }
        if (v12 == 21) {
          goto LABEL_26;
        }
      }
LABEL_32:
      v11 += 4;
      if (v11 == 16)
      {
        uint64_t v6 = (char *)v150;
        break;
      }
    }
  }
  unint64_t v31 = (unint64_t)&v6[*(unsigned __int16 *)(v172 + 16)];
  uint64_t v32 = v6;
  if (*(_DWORD *)(a1 + 88))
  {
    uint64_t v32 = v6;
    if (*(_WORD *)(v172 + 16))
    {
      BOOL v33 = 0;
      uint64_t v32 = v6;
      while (1)
      {
        unsigned int v34 = *v32;
        if (!v33 && v34 == 92) {
          break;
        }
        if (v34 == 34) {
          BOOL v33 = !v33;
        }
        v32 += utf8_determineUTF8CharLength(v34);
        if ((unint64_t)(v32 + 1) > v31) {
          goto LABEL_50;
        }
      }
      v32 += utf8_determineUTF8CharLength(0x5Cu);
      *(_DWORD *)(a1 + 88) = 0;
    }
  }
LABEL_50:
  DWORD1(__b[1]) = 0;
  int v38 = *(unsigned __int16 *)(v172 + 16);
  BOOL v154 = 1;
  if ((paramc_ParamGetStr(*(void *)(v173 + 40), (uint64_t)"clcpppipelinemode", &v159) & 0x80000000) == 0 && v159) {
    BOOL v154 = *v159 == 0;
  }
  unint64_t v149 = v31;
  if ((unint64_t)&v32[utf8_determineUTF8CharLength(*v32)] > v31)
  {
    LOWORD(v39) = 0;
LABEL_55:
    uint64_t v40 = v32;
    goto LABEL_248;
  }
  int v153 = v38;
  int v143 = 0;
  BOOL v144 = 0;
  int v39 = 0;
  while (1)
  {
    if (v153 != *(unsigned __int16 *)(v172 + 16)) {
      goto LABEL_55;
    }
    int v152 = v39;
    v174[0] = 0;
    unsigned int v41 = utf8_determineUTF8CharLength(*v32);
    if (v41)
    {
      uint64_t v40 = v32;
      while (1)
      {
        uint64_t v42 = &v40[v41];
        if ((unint64_t)v42 > v31
          || isEsc(*(void *)(a1 + 64), v40, (unsigned __int16)(v31 - (_WORD)v40), 0, v174))
        {
          uint64_t v42 = v40;
          goto LABEL_70;
        }
        *(_WORD *)char __dst = 0;
        if (v154
          && isEscOrPartialEsc(*(void *)(a1 + 64), v40, (unsigned __int16)(v31 - (_WORD)v40), 0, __dst) == 2)
        {
          goto LABEL_247;
        }
        if ((unint64_t)v42 >= v31) {
          break;
        }
        unsigned int v41 = utf8_determineUTF8CharLength(*v42);
        uint64_t v40 = v42;
        if (!v41) {
          goto LABEL_70;
        }
      }
      unsigned int v41 = 0;
    }
    else
    {
      uint64_t v42 = v32;
    }
LABEL_70:
    v174[0] = 0;
    uint64_t v151 = v31 - (void)v42;
    int v43 = isEsc(*(void *)(a1 + 64), v42, (unsigned __int16)(v31 - (_WORD)v42), 0, v174);
    BOOL v48 = !v174[0] || v43 == 0;
    uint64_t v49 = v48 ? 0 : v174[0] - 1;
    if (!v41 || (unint64_t)&v42[v41 + v49] > v31) {
      break;
    }
    uint64_t v50 = (unsigned __int8 *)(v42 + 1);
    uint64_t v51 = (unsigned __int8 *)&v42[v49 + 1];
    if ((unint64_t)v51 >= v31)
    {
      int v54 = (int)v150;
      if (*(_DWORD *)(v172 + 20))
      {
        int v55 = v153;
        goto LABEL_179;
      }
LABEL_101:
      int v55 = (unsigned __int16)((_WORD)v42 - v54);
      goto LABEL_179;
    }
    int v52 = *v51;
    uint64_t v53 = (unsigned __int8 *)&v42[v49 + 2];
    if (v52 == 47)
    {
      int v56 = v51[1];
      if ((v56 - 43) <= 0x3F && ((1 << (v56 - 43)) & 0xA008000000080001) != 0)
      {
        for (unsigned int i = v51[1]; (unint64_t)&v53[utf8_determineUTF8CharLength(i) + 2] <= v31; unsigned int i = *v53)
        {
          unsigned int v59 = *v53;
          if (v59 == 47)
          {
            unsigned int v60 = v53[1] - 43;
            BOOL v61 = v60 > 0x3F;
            unint64_t v62 = (1 << v60) & 0xA008000000080001;
            BOOL v63 = v61 || v62 == 0;
            if (!v63 && v42[2] == v56) {
              break;
            }
          }
          v53 += utf8_determineUTF8CharLength(v59);
        }
        BOOL v144 = v56 != 0;
        if ((unint64_t)(v53 + 1) <= v31)
        {
          int v54 = (int)v150;
          int v55 = v153;
          uint64_t v50 = (unsigned __int8 *)(v42 + 1);
        }
        else
        {
          int v54 = (int)v150;
          int v55 = v153;
          uint64_t v50 = (unsigned __int8 *)(v42 + 1);
          if (!*(_DWORD *)(v172 + 20)) {
            int v55 = (unsigned __int16)((_WORD)v42 - (_WORD)v150);
          }
        }
LABEL_178:
        if (!v55) {
          return 2147491849;
        }
        goto LABEL_179;
      }
    }
    else if (v52 == 92)
    {
      while ((unint64_t)(v53 + 1) <= v31
           && utf8_BelongsToSet(0, v53, 0, *(unsigned __int16 *)(v172 + 16)))
        v53 += utf8_determineUTF8CharLength(*v53);
      uint64_t v64 = v53;
      if ((unint64_t)&v53[utf8_determineUTF8CharLength(*v53) + 1] <= v31)
      {
        uint64_t v64 = v53;
        do
        {
          if (utf8_BelongsToSet(0, v64, 0, *(unsigned __int16 *)(v172 + 16))) {
            break;
          }
          unsigned int v69 = *v64;
          if (v69 == 61) {
            break;
          }
          if (v69 == 92) {
            break;
          }
          v64 += utf8_determineUTF8CharLength(v69);
        }
        while ((unint64_t)&v64[utf8_determineUTF8CharLength(*v64) + 1] <= v31);
      }
      cstdlib_memset(__dst, 0, 6uLL);
      unsigned __int16 v65 = (_WORD)v64 - (_WORD)v53;
      if ((unsigned __int16)((_WORD)v64 - (_WORD)v53) > 6uLL) {
        unsigned __int16 v65 = 6;
      }
      if (v65)
      {
        cstdlib_strncpy(__dst, (const char *)v53, v65);
        if (LH_stricmp(__dst, "audio"))
        {
          if (LH_stricmp(__dst, "mrk"))
          {
            int v66 = LH_stricmp(__dst, "toi");
            int v67 = 0;
            int v148 = 0;
            uint64_t v68 = v66 == 0;
            goto LABEL_121;
          }
          int v67 = 0;
          uint64_t v68 = 0;
          int v145 = 0;
          int v146 = 1;
          int v148 = 1;
LABEL_124:
          uint64_t v70 = (char *)(v64 + 1);
          if ((unint64_t)(v64 + 1) <= v31)
          {
            int v71 = 0;
            uint64_t v72 = 0;
            int v147 = v67;
            while (1)
            {
              unsigned int v73 = *v64;
              if (!v72 && v73 == 92)
              {
                int v74 = v145;
                if (v68) {
                  int v74 = 0;
                }
                if ((v146 & v74 & 1) != 0
                  || (v68 == 1 ? (int v75 = 1) : (int v75 = v67),
                      v71 == 1
                   && v148 | v75
                   && ((unint64_t)v70 >= v31 || (int v76 = *v70, v76 != 92) && v76 != 34)))
                {
                  int v54 = (int)v150;
                  int v55 = v153;
                  goto LABEL_174;
                }
              }
              char v77 = v73 == 34 ? v67 : 0;
              if (v77)
              {
                uint64_t v72 = v72 != 1;
                unsigned int v73 = 34;
                if (!v71) {
                  goto LABEL_166;
                }
              }
              else if (!v71)
              {
                if (v73 != 61)
                {
                  uint64_t v82 = v72;
                  uint64_t v83 = v68;
                  int v71 = 0;
                  goto LABEL_169;
                }
                unsigned int v141 = v72;
                unsigned int v142 = v68;
                int v78 = v70;
                if ((unint64_t)(v70 + 1) <= v31)
                {
                  int v78 = v70;
                  do
                  {
                    if (!utf8_BelongsToSet(0, v78, 0, *(unsigned __int16 *)(v172 + 16))) {
                      break;
                    }
                    v78 += utf8_determineUTF8CharLength(*v78);
                  }
                  while ((unint64_t)(v78 + 1) <= v31);
                }
                size_t v79 = cstdlib_strlen("orth");
                int v80 = cstdlib_strncmp(v78, "orth", v79);
                uint64_t v72 = v141;
                if (v80) {
                  uint64_t v68 = v142;
                }
                else {
                  uint64_t v68 = 0;
                }
                unsigned int v73 = *v64;
                int v67 = v147;
              }
              int v81 = v72 == 1 ? v67 : 0;
              if (((v148 | v81) & 1) == 0 && v68 != 1) {
                break;
              }
              int v71 = 1;
              if (v73 != 92 || (unint64_t)v70 >= v31)
              {
LABEL_166:
                uint64_t v82 = v72;
                uint64_t v83 = v68;
                goto LABEL_169;
              }
              int v84 = *v70;
              if (v84 != 34 && v84 != 92)
              {
                uint64_t v82 = v72;
                uint64_t v83 = v68;
                unsigned int v73 = 92;
                goto LABEL_169;
              }
              uint64_t v85 = 2;
LABEL_170:
              v64 += v85;
              uint64_t v70 = (char *)(v64 + 1);
              if ((unint64_t)(v64 + 1) > v31) {
                goto LABEL_171;
              }
            }
            uint64_t v82 = v72;
            uint64_t v83 = v68;
            int v71 = 1;
LABEL_169:
            uint64_t v85 = utf8_determineUTF8CharLength(v73);
            uint64_t v68 = v83;
            int v67 = v147;
            uint64_t v72 = v82;
            unint64_t v31 = v149;
            goto LABEL_170;
          }
LABEL_171:
          int v54 = (int)v150;
          int v55 = v153;
          if (!*(_DWORD *)(v172 + 20)) {
            int v55 = (unsigned __int16)((_WORD)v42 - (_WORD)v150);
          }
LABEL_174:
          char v86 = v146 ^ 1;
          if (v55) {
            char v86 = 1;
          }
          uint64_t v50 = (unsigned __int8 *)(v42 + 1);
          if ((v86 & 1) == 0)
          {
            int v55 = 0;
            *(_DWORD *)(a1 + 88) = 1;
            goto LABEL_179;
          }
          goto LABEL_178;
        }
        int v146 = 0;
        uint64_t v68 = 0;
        int v148 = 0;
        int v67 = 1;
      }
      else
      {
        int v67 = 0;
        uint64_t v68 = 0;
        int v148 = 0;
LABEL_121:
        int v146 = 1;
      }
      int v145 = 1;
      goto LABEL_124;
    }
    if (v151 <= 11)
    {
      int v54 = (int)v150;
      int v55 = v153;
      uint64_t v50 = (unsigned __int8 *)(v42 + 1);
      if (*(_DWORD *)(v172 + 20)) {
        goto LABEL_179;
      }
      goto LABEL_101;
    }
    int v54 = (int)v150;
    int v55 = v153;
    uint64_t v50 = (unsigned __int8 *)(v42 + 1);
LABEL_179:
    if (v55 != *(unsigned __int16 *)(v172 + 16)) {
      break;
    }
    int v153 = v55;
    if ((_WORD)v42 == (_WORD)v32)
    {
      int v39 = v152;
    }
    else
    {
      uint64_t v20 = escseqs_AppendOutText(a2, v32, (unsigned __int16)((_WORD)v42 - (_WORD)v32));
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_278;
      }
      int v39 = v152 + v42 - v32;
    }
    *((void *)&__b[2] + 1) = 0;
    uint64_t v17 = escseqm_Match(*(void **)(a1 + 64), v42, (unsigned __int16)v151, (uint64_t)__b, v44, v45, v46, v47);
    if ((v17 & 0x1FFF) == 0xA) {
      goto LABEL_279;
    }
    int v87 = DWORD1(__b[1]);
    if (DWORD1(__b[1]) == 36)
    {
      uint64_t v17 = escseqs_NormalizeLanguageName(a1, (uint64_t)__b);
      if ((v17 & 0x80000000) != 0) {
        goto LABEL_279;
      }
      int v87 = DWORD1(__b[1]);
    }
    if ((void)v171)
    {
      int v88 = (const float *)&__b[2] + 2;
      int32x4_t v89 = (int32x4_t)vld1q_dup_f32(v88);
      if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_s32(v89, (int32x4_t)xmmword_2206E3A10), (int8x16_t)xmmword_2206E3A20)) & 0xF) == 0&& v87 != 26)
      {
        heap_Free(*(void **)(v173 + 8), v171);
        *(void *)&long long v171 = 0;
        DWORD2(v171) = 0;
LABEL_195:
        uint64_t v20 = escseqs_AppendOutText(a2, v42, 1u);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_278;
        }
        ++v39;
        uint64_t v32 = (char *)v50;
        goto LABEL_197;
      }
    }
    if (v17) {
      goto LABEL_195;
    }
    if (marker_hasNonConstCharPtrArg(v87) && !*((void *)&__b[2] + 1))
    {
      LOWORD(__b[1]) = 0;
      *((void *)&__b[0] + 1) = 0;
      DWORD1(__b[1]) = 0x4000;
      DWORD2(__b[2]) = 0;
      goto LABEL_225;
    }
    int v91 = DWORD1(__b[1]);
    if (!(void)v171 || DWORD1(__b[1]) == 26)
    {
      if ((void)v171 && DWORD1(__b[1]) == 26)
      {
        int v93 = v39;
        unsigned __int16 v94 = cstdlib_strlen((const char *)v171);
        *(void *)char __dst = 0;
        uint64_t v95 = *((void *)&__b[2] + 1);
        uint64_t v96 = *(uint64_t (**)(void, void, uint64_t, void, uint64_t, uint64_t, char *))(*(void *)(a1 + 32)
                                                                                                  + 64);
        uint64_t NullHandle = safeh_GetNullHandle();
        if ((v96(*(void *)(a1 + 16), *(void *)(a1 + 24), v95, 0, NullHandle, v98, __dst) & 0x80000000) != 0)
        {
          log_OutText(*(void *)(v173 + 32), (uint64_t)&modESCPP, 4, 0, (uint64_t)"[ESCSEQS] Invalid audio file, file=%s, Putting alternate text in text stream: \"%s\" ", v99, v100, v101, *((uint64_t *)&__b[2] + 1));
          uint64_t v20 = escseqs_AppendOutText(a2, (const void *)v171, v94);
          if ((v20 & 0x80000000) != 0) {
            goto LABEL_278;
          }
          DWORD1(__b[1]) = 0;
          heap_Free(*(void **)(v173 + 8), *((uint64_t *)&__b[2] + 1));
          *((void *)&__b[2] + 1) = 0;
        }
        heap_Free(*(void **)(v173 + 8), v171);
        *(void *)&long long v171 = 0;
        int v91 = DWORD1(__b[1]);
        int v54 = (int)v150;
        int v39 = v93;
      }
      goto LABEL_223;
    }
    if (SDWORD2(__b[2]) > 70)
    {
      if (DWORD2(__b[2]) == 71)
      {
        DWORD2(__b[2]) = 43;
LABEL_222:
        DWORD2(v171) = 0;
        goto LABEL_223;
      }
      if (DWORD2(__b[2]) == 72)
      {
        int v92 = 4;
        goto LABEL_219;
      }
    }
    else
    {
      if (DWORD2(__b[2]) == 43)
      {
        int v92 = 1;
        goto LABEL_219;
      }
      if (DWORD2(__b[2]) == 70)
      {
        int v92 = 2;
LABEL_219:
        DWORD2(v171) = v92;
        DWORD2(__b[2]) = 43;
        goto LABEL_223;
      }
    }
    DWORD2(__b[2]) = 43;
    if (DWORD2(v171) == 3) {
      goto LABEL_222;
    }
LABEL_223:
    if (v91) {
      goto LABEL_226;
    }
    LOWORD(__b[1]) = 0;
    *((void *)&__b[0] + 1) = 0;
    DWORD1(__b[1]) = 999;
LABEL_225:
    DWORD2(v171) = 0;
    *(void *)&long long v171 = 0;
LABEL_226:
    int v102 = *(_DWORD *)(a1 + 80);
    int v103 = *(_DWORD *)(a1 + 84);
    LODWORD(__b[0]) = 0;
    DWORD2(__b[1]) = v102 + v42 - v54;
    LODWORD(__b[2]) = v103 + (unsigned __int16)v39;
    if (v144
      || ((DWORD2(__b[2]) - 15) > 0x39 || ((1 << (BYTE8(__b[2]) - 15)) & 0x280200010000003) == 0)
      && (DWORD2(__b[2]) - 106) >= 3)
    {
      uint64_t v17 = escseqs_AppendOutMarker(a2, __b);
    }
    else
    {
      if (v143 == DWORD2(__b[2])) {
        DWORD1(__b[1]) = 999;
      }
      uint64_t v17 = escseqs_AppendOutMarker(a2, __b);
      int v143 = DWORD2(__b[2]);
    }
    if (marker_hasNonConstCharPtrArg(SDWORD1(__b[1])) && *((void *)&__b[2] + 1))
    {
      heap_Free(*(void **)(v173 + 8), *((uint64_t *)&__b[2] + 1));
      *((void *)&__b[2] + 1) = 0;
    }
    else
    {
      DWORD2(__b[2]) = 0;
    }
    if ((v17 & 0x80000000) != 0) {
      return v17;
    }
    if (DWORD1(__b[1]) == 13)
    {
      uint64_t inserted = escseqs_InsertDefaultMarkers(a1, a2, (uint64_t)__b);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
    }
    else if (DWORD1(__b[1]) == 4)
    {
      DWORD1(v167) = 2;
      *((void *)&v167 + 1) = (HIDWORD(__b[1]) + DWORD2(__b[1]));
      LODWORD(v168) = __b[2];
      *(void *)((char *)&v168 + 4) = 0x100000000;
      uint64_t inserted = escseqs_AppendOutMarker(a2, &v166);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
    }
    uint64_t v32 = &v42[HIDWORD(__b[1])];
    HIDWORD(__b[1]) = 0;
    DWORD1(__b[1]) = 0;
    *(void *)&long long v171 = 0;
    DWORD2(v171) = 0;
LABEL_197:
    uint64_t v40 = v32;
    if ((unint64_t)&v32[utf8_determineUTF8CharLength(*v32)] > v31) {
      goto LABEL_248;
    }
  }
  uint64_t v40 = v42;
LABEL_247:
  LOWORD(v39) = v152;
LABEL_248:
  uint64_t v20 = escseqs_AppendOutText(a2, v32, (unsigned __int16)((_WORD)v40 - (_WORD)v32));
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_278;
  }
  int v105 = *(_DWORD *)(v172 + 20);
  *(void *)char __dst = 0;
  uint64_t v20 = datac_RequestBlock(a2, 1010, 1u, __dst);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_278;
  }
  *(_DWORD *)(*(void *)__dst + 20) = v105;
  uint64_t v20 = escseqs_PutOutMarkerEos(a2, *(_DWORD *)(v172 + 20));
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_278;
  }
  if (*(_DWORD *)(v172 + 20))
  {
    int v106 = 0;
    int v107 = 0;
    *(_DWORD *)(a1 + 92) = 0;
  }
  else
  {
    int v106 = *(_DWORD *)(a1 + 80) + v40 - v150;
    int v107 = *(_DWORD *)(a1 + 84) + (unsigned __int16)(v39 + (_WORD)v40 - (_WORD)v32);
  }
  *(_DWORD *)(a1 + 80) = v106;
  *(_DWORD *)(a1 + 84) = v107;
  *(void *)char __dst = 0;
  uint64_t v20 = datac_RequestBlock(a2, 1011, 1u, __dst);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_278;
  }
  uint64_t v108 = *(void *)__dst;
  unsigned int v109 = *(unsigned __int16 *)(*(void *)__dst + 16);
  if (v109 >= 2)
  {
    uint64_t v110 = *(void *)(*(void *)__dst + 8);
    int v111 = 1;
    do
    {
      uint64_t v112 = v110 + ((unint64_t)(unsigned __int16)v111 << 6);
      if (*(_DWORD *)(v112 + 20) == 7)
      {
        int v113 = *(_DWORD *)(v112 + 40);
        if (v113 == 60 || v113 == 16)
        {
          if ((unsigned __int16)v109 <= (unsigned __int16)(v111 + 1)) {
            int v115 = (unsigned __int16)(v111 + 1);
          }
          else {
            int v115 = (unsigned __int16)v109;
          }
          do
          {
            if ((unsigned __int16)++v111 >= (unsigned __int16)v109)
            {
              int v111 = v115;
              goto LABEL_271;
            }
            uint64_t v116 = v110 + ((unint64_t)(unsigned __int16)v111 << 6);
          }
          while (*(_DWORD *)(v116 + 20) != 7);
          int v118 = *(_DWORD *)(v116 + 40);
          uint64_t v117 = (_DWORD *)(v116 + 40);
          if (v113 == v118)
          {
            *uint64_t v117 = 15;
            uint64_t v108 = *(void *)__dst;
          }
        }
      }
LABEL_271:
      ++v111;
      unsigned int v109 = *(unsigned __int16 *)(v108 + 16);
    }
    while (v109 > (unsigned __int16)v111);
  }
  *(void *)char __dst = 0;
  uint64_t v20 = datac_RequestBlock(a2, 1011, 1u, __dst);
  if ((v20 & 0x80000000) != 0)
  {
LABEL_278:
    uint64_t v17 = v20;
  }
  else
  {
    unint64_t v119 = *(unsigned __int16 *)(*(void *)__dst + 16);
    if (v119 >= 2)
    {
      uint64_t v120 = 0;
      uint64_t v121 = *(void *)(*(void *)__dst + 8);
      unsigned __int16 v122 = 2;
      while (*(_DWORD *)(v121 + v120 + 84) != 0x4000)
      {
        ++v122;
        v120 += 64;
        if ((v119 << 6) - 64 == v120) {
          goto LABEL_295;
        }
      }
      if (v119 > v122)
      {
        int v123 = (int *)(v121 + v120 + 148);
        while (1)
        {
          int v124 = *v123;
          v123 += 16;
          if (v124 != 0x4000) {
            break;
          }
          if (v119 == ++v122) {
            goto LABEL_295;
          }
        }
        if (*(_DWORD *)(v121 + ((unint64_t)v122 << 6) + 20) == 0x4000)
        {
          uint64_t v125 = v122 + 1;
          if (v125 == v119)
          {
            *(_WORD *)(*(void *)__dst + 16) = v119 - 1;
          }
          else
          {
            cstdlib_memmove((void *)(v121 + v120 + 128), (const void *)(v121 + (v125 << 6)), (uint64_t)(int)(v119 - v122) << 6);
            *(_WORD *)(*(void *)__dst + 16) -= v122;
          }
          LOWORD(v31) = v149;
        }
      }
    }
LABEL_295:
    *(void *)uint64_t v174 = 0;
    uint64_t v17 = datac_RequestBlock(a2, 1011, 1u, v174);
    if ((v17 & 0x80000000) == 0)
    {
      uint64_t v126 = *(void *)v174;
      if (*(_WORD *)(*(void *)v174 + 16))
      {
        int v127 = 0;
        BOOL v128 = 0;
        unsigned __int16 v129 = 0;
        int v130 = 0;
        uint64_t v131 = *(void *)(*(void *)v174 + 8);
        do
        {
          uint64_t v132 = v131 + ((unint64_t)(unsigned __int16)v130 << 6);
          int v133 = *(_DWORD *)(v132 + 20);
          if (v133 == 7)
          {
            if (*(_DWORD *)(v132 + 40) == 43)
            {
              BOOL v128 = !v128;
              unsigned __int16 v129 = v130;
            }
            else
            {
              BOOL v128 = 0;
            }
          }
          else if (v133 == 0x4000 && v128)
          {
            long long v157 = 0u;
            long long v158 = 0u;
            *(_OWORD *)char __dst = 0u;
            long long v156 = 0u;
            uint64_t v135 = v131 + ((unint64_t)v129 << 6);
            int v136 = (_DWORD *)(v131 + ((unint64_t)(unsigned __int16)v130 << 6));
            v136[6] = *(_DWORD *)(v135 + 24);
            v136[8] = *(_DWORD *)(v135 + 32);
            cstdlib_memcpy(__dst, v136, 0x40uLL);
            uint64_t v137 = (v127 + 1);
            uint64_t v138 = *(void *)v174;
            unsigned int v139 = *(unsigned __int16 *)(*(void *)v174 + 16);
            if (v139 > v137)
            {
              cstdlib_memmove((void *)(v131 + ((unint64_t)(unsigned __int16)v130 << 6)), (const void *)(v131 + (v137 << 6)), (uint64_t)(int)(v139 - v137) << 6);
              uint64_t v138 = *(void *)v174;
              LOWORD(v139) = *(_WORD *)(*(void *)v174 + 16);
            }
            unsigned __int16 v140 = v139 - 1;
            *(_WORD *)(v138 + 16) = v140;
            cstdlib_memmove((void *)(v131 + ((unint64_t)(v129 + 1) << 6)), (const void *)(v131 + ((unint64_t)v129 << 6)), (uint64_t)(v140 - v129) << 6);
            cstdlib_memcpy((void *)(v131 + ((unint64_t)v129 << 6)), __dst, 0x40uLL);
            unsigned __int16 v129 = 0;
            BOOL v128 = 0;
            uint64_t v126 = *(void *)v174;
            ++*(_WORD *)(*(void *)v174 + 16);
            ++v130;
          }
          int v127 = (unsigned __int16)++v130;
        }
        while ((unsigned __int16)v130 < *(unsigned __int16 *)(v126 + 16));
      }
      cstdlib_memmove(v150, v40, (unsigned __int16)(v31 - (_WORD)v40));
      *(_WORD *)(v172 + 16) = v31 - (_WORD)v40;
    }
  }
LABEL_279:
  if (__s) {
    paramc_ParamRelease(*(void *)(v173 + 40));
  }
  return v17;
}

uint64_t escseqs_AppendOutMarker(uint64_t a1, long long *a2)
{
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  if (!a2) {
    return 2147491847;
  }
  uint64_t result = datac_RequestBlock(a1, 1012, 1u, &v23);
  if ((result & 0x80000000) == 0)
  {
    long long v5 = a2[1];
    long long v18 = *a2;
    long long v19 = v5;
    long long v6 = a2[3];
    *(_OWORD *)char __s1 = a2[2];
    long long v21 = v6;
    uint64_t result = datac_RequestBlock(a1, 1011, 1u, &v23);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v7 = *(_WORD *)(v23 + 16) + 1;
      if (*(unsigned __int16 *)(v23 + 18) >= v7
        || (uint64_t result = datac_RequestBlock(a1, 1011, (unsigned __int16)(*(_WORD *)(v23 + 16) + 1), &v23),
            (result & 0x80000000) == 0))
      {
        uint64_t result = datac_RequestBlock(a1, 1012, 1u, &v22);
        if ((result & 0x80000000) == 0)
        {
          if (marker_hasNonConstCharPtrArg(SDWORD1(v19)) && __s1[1])
          {
            unsigned int v8 = *(const char **)(v22 + 8);
            if (v8)
            {
              unsigned int v9 = 0;
              do
              {
                int v10 = v8;
                if (v9 >= *(unsigned __int16 *)(v22 + 16)) {
                  break;
                }
                int v11 = cstdlib_strlen(v8);
                if (!cstdlib_strcmp(__s1[1], v10))
                {
                  LODWORD(__s1[1]) = v9;
                  cstdlib_memcpy((void *)(*(void *)(v23 + 8) + ((unint64_t)*(unsigned __int16 *)(v23 + 16) << 6)), &v18, 0x40uLL);
                  uint64_t v14 = &v23;
                  goto LABEL_28;
                }
                uint64_t v12 = (v11 + 1);
                v9 += v12;
                unsigned int v8 = &v10[v12];
              }
              while (v10);
            }
            if (marker_hasNonConstCharPtrArg(*((_DWORD *)a2 + 5)))
            {
              if (*((void *)a2 + 5)) {
                int v13 = *(unsigned __int16 *)(v22 + 16);
              }
              else {
                int v13 = -1;
              }
              LODWORD(__s1[1]) = v13;
            }
          }
          cstdlib_memcpy((void *)(*(void *)(v23 + 8) + ((unint64_t)*(unsigned __int16 *)(v23 + 16) << 6)), &v18, 0x40uLL);
          *(_WORD *)(v23 + 16) = v7;
          uint64_t result = marker_hasNonConstCharPtrArg(*((_DWORD *)a2 + 5));
          if (result)
          {
            uint64_t result = *((void *)a2 + 5);
            if (result)
            {
              unsigned __int16 v15 = cstdlib_strlen((const char *)result) + 1;
              uint64_t v16 = v22;
              unsigned int v17 = *(unsigned __int16 *)(v22 + 16);
              unsigned __int16 v7 = v17 + v15;
              if (*(unsigned __int16 *)(v22 + 18) < (unsigned __int16)(v17 + v15))
              {
                uint64_t result = datac_RequestBlock(a1, 1012, (unsigned __int16)(v17 + v15), &v22);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v16 = v22;
                unsigned int v17 = *(unsigned __int16 *)(v22 + 16);
              }
              cstdlib_memcpy((void *)(*(void *)(v16 + 8) + v17), *((const void **)a2 + 5), v15);
              uint64_t v14 = &v22;
LABEL_28:
              uint64_t result = 0;
              *(_WORD *)(*v14 + 16) = v7;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t escseqs_AppendOutText(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v10 = 0;
  if (!a2) {
    return 2147491847;
  }
  uint64_t result = datac_RequestBlock(a1, 1010, 1u, &v10);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v7 = v10;
  unsigned int v8 = *(unsigned __int16 *)(v10 + 16);
  __int16 v9 = v8 + a3;
  if (*(unsigned __int16 *)(v10 + 18) < (unsigned __int16)(v8 + a3))
  {
    uint64_t result = datac_RequestBlock(a1, 1010, (unsigned __int16)(v8 + a3), &v10);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v7 = v10;
    unsigned int v8 = *(unsigned __int16 *)(v10 + 16);
  }
  cstdlib_memcpy((void *)(*(void *)(v7 + 8) + v8), a2, a3);
  uint64_t result = 0;
  *(_WORD *)(v10 + 16) = v9;
  return result;
}

uint64_t escseqs_NormalizeLanguageName(uint64_t a1, uint64_t a2)
{
  char __s2 = 0;
  uint64_t v12 = 0;
  int v10 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12);
  if ((inited & 0x80000000) != 0) {
    return 2147491847;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5) {
    return inited;
  }
  uint64_t v6 = (*(uint64_t (**)(void, void, void, char **, int *))(v5 + 24))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), &__s2, &v10);
  if ((v6 & 0x80000000) == 0 && v10 && __s2 && cstdlib_strcmp(*(const char **)(a2 + 40), __s2) && *__s2)
  {
    uint64_t v7 = strhelper_Strdup(*(void *)(v12 + 8), __s2);
    if (v7)
    {
      unsigned int v8 = v7;
      heap_Free(*(void **)(v12 + 8), *(void *)(a2 + 40));
      *(void *)(a2 + 40) = v8;
    }
    else
    {
      return 2147491850;
    }
  }
  return v6;
}

uint64_t escseqs_InsertDefaultMarkers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v22) & 0x80000000) != 0) {
    return 2147491847;
  }
  cstdlib_memset(&v18, 0, 0x40uLL);
  int v6 = *(_DWORD *)(a3 + 28) + *(_DWORD *)(a3 + 24);
  *(void *)&long long v20 = *(void *)(a3 + 32);
  DWORD2(v19) = v6;
  LODWORD(v18) = 0;
  uint64_t Defaults = escseqm_GetDefaults(*(void **)(a1 + 64), &v23);
  if ((Defaults & 0x80000000) == 0)
  {
    for (uint64_t i = 0; i != 2496; i += 64)
    {
      int v9 = *(_DWORD *)(v23 + i + 84);
      if (v9)
      {
        if (!marker_hasNonConstCharPtrArg(v9))
        {
          uint64_t v10 = v23 + i;
          *(_DWORD *)(v10 + 88) = *(_DWORD *)(a3 + 28) + *(_DWORD *)(a3 + 24);
          *(_DWORD *)(v10 + 100) = 0;
          uint64_t v11 = *(void *)(a3 + 32);
          *(_DWORD *)(v10 + 64) = 0;
          v10 += 64;
          *(void *)(v10 + 32) = v11;
          uint64_t appended = escseqs_AppendOutMarker(a2, (long long *)v10);
          uint64_t Defaults = 0;
          if ((appended & 0x80000000) != 0)
          {
LABEL_17:
            uint64_t Defaults = appended;
            goto LABEL_18;
          }
        }
      }
    }
    for (uint64_t j = 104; j != 2600; j += 64)
    {
      if (marker_hasNonConstCharPtrArg(*(_DWORD *)(v23 + j - 20)))
      {
        uint64_t v14 = v23 + j;
        *(_DWORD *)(v14 - 16) = *(_DWORD *)(a3 + 28) + *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v14 - 4) = 0;
        uint64_t v15 = *(void *)(a3 + 32);
        *(_DWORD *)(v14 - 40) = 0;
        v14 -= 40;
        *(void *)(v14 + 32) = v15;
        uint64_t appended = escseqs_AppendOutMarker(a2, (long long *)v14);
        if ((appended & 0x80000000) != 0) {
          goto LABEL_17;
        }
        uint64_t v16 = *(void *)(v23 + j);
        if (v16)
        {
          heap_Free(*(void **)(v22 + 8), v16);
          uint64_t Defaults = 0;
          *(void *)(v23 + j) = 0;
        }
        else
        {
          uint64_t Defaults = 0;
        }
      }
    }
  }
LABEL_18:
  if (v23) {
    heap_Free(*(void **)(v22 + 8), v23);
  }
  return Defaults;
}

uint64_t escseqs_PutOutMarkerEos(uint64_t a1, int a2)
{
  uint64_t v5 = 0;
  uint64_t result = datac_RequestBlock(a1, 1011, 1u, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(v5 + 20) = a2;
    uint64_t result = datac_RequestBlock(a1, 1012, 1u, &v5);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      *(_DWORD *)(v5 + 20) = a2;
    }
  }
  return result;
}

uint64_t extdata_LoadData(uint64_t a1, char *a2, const char *a3)
{
  return extdata_LoadSpecificData(a1, a2, 0, a3);
}

uint64_t extdata_LoadSpecificData(uint64_t a1, char *a2, const char *a3, const char *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char __s = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)char __s1 = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_DWORD *)char __s2 = 0;
  if (!a1) {
    return 2368741383;
  }
  uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  size_t v9 = 0;
  if (cstdlib_strlen(__s))
  {
    do
    {
      unint64_t v10 = v9;
      __s2[v9] = cstdlib_tolower(__s[v9]);
      ++v9;
      size_t v11 = cstdlib_strlen(__s);
    }
    while (v10 <= 1 && v9 < v11);
  }
  __s2[v9] = 0;
  if (cstdlib_strcmp(__s, __s2))
  {
    uint64_t result = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", __s2);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    char __s = __s2;
  }
  cstdlib_strcat(__s1, a4);
  cstdlib_strcat(__s1, "/");
  cstdlib_strcat(__s1, __s);
  brokeraux_ComposeBrokerString(*(void *)(a1 + 16), __s1, 1, 1, __s, 0, 0, v16, 0x80uLL);
  LODWORD(result) = readDataFile(a1, a2, (const char *)v16, a3);
  int v12 = result;
  int v13 = result & 0x80001FFF;
  if ((result & 0x80001FFF) == 0x8000000A) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 0;
  }
  if (v12 < 0 && v13 != -2147483638)
  {
    __s1[cstdlib_strlen(__s1) - 4] = 0;
    brokeraux_ComposeBrokerString(*(void *)(a1 + 16), __s1, 1, 1, __s, 0, 0, v16, 0x80uLL);
    return readDataFile(a1, a2, (const char *)v16, a3);
  }
  return result;
}

uint64_t readDataFile(uint64_t a1, char *a2, const char *a3, const char *a4)
{
  uint64_t v32 = 0;
  char v31 = 0;
  unsigned int v29 = 0;
  *(_DWORD *)char __s2 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t result = brk_DataOpenEx(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)a3, 1, (uint64_t)&v27);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = brk_DataClose(*(void *)(*(void *)(a1 + 16) + 24), v27);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = ssftriff_reader_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), 0, a3, a2, 1031, (uint64_t *)&v32);
      if ((result & 0x80000000) == 0)
      {
        do
        {
          int v16 = ssftriff_reader_OpenChunk((uint64_t)v32, (__int32 *)__s2, &v29, &v28);
          if (v16 < 0) {
            break;
          }
          if (*(_WORD *)(a1 + 32))
          {
            uint64_t v17 = 0;
            unint64_t v18 = 0;
            while (cstdlib_strcmp(*(const char **)(*(void *)(a1 + 24) + v17), __s2))
            {
              ++v18;
              v17 += 32;
              if (v18 >= *(unsigned __int16 *)(a1 + 32)) {
                goto LABEL_14;
              }
            }
            if (!a4 || !cstdlib_strcmp(a4, __s2))
            {
              int v16 = (*(uint64_t (**)(void, void *, void, uint64_t))(*(void *)(a1 + 24) + v17 + 8))(*(void *)(*(void *)(a1 + 24) + v17 + 24), v32, v29, v28);
              if (v16 < 0) {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_EXTDATA", 1800, (uint64_t)"%s%s", v19, v20, v21, v22, "loading_type");
              }
            }
          }
LABEL_14:
          int v23 = ssftriff_reader_CloseChunk((uint64_t)v32);
          if (v23 < 0 && v16 > -1) {
            int v16 = v23;
          }
        }
        while ((v16 & 0x80000000) == 0);
        if ((v16 & 0x1FFF) == 0x14) {
          int v25 = 0;
        }
        else {
          int v25 = v16;
        }
        LODWORD(result) = ssftriff_reader_ObjClose(v32, v9, v10, v11, v12, v13, v14, v15);
        if (v25 > -1 && (int)result < 0) {
          return result;
        }
        else {
          return v25;
        }
      }
    }
  }
  return result;
}

uint64_t extdata_RegisterData(uint64_t a1, char *a2, unsigned int a3)
{
  if (!a1) {
    return 2368741383;
  }
  if (!*(_WORD *)(a1 + 32))
  {
    uint64_t v8 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (32 * a3) | 1);
    *(void *)(a1 + 24) = v8;
    if (v8) {
      goto LABEL_7;
    }
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200A;
  }
  uint64_t v6 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 24), (32 * (*(unsigned __int16 *)(a1 + 32) + (unint64_t)a3)) | 1);
  if (!v6) {
    return (*(_DWORD *)(a1 + 36) << 20) | 0x8000200A;
  }
  *(void *)(a1 + 24) = v6;
LABEL_7:
  if (a3)
  {
    uint64_t v9 = 0;
    do
    {
      cstdlib_memcpy((void *)(*(void *)(a1 + 24) + 32 * (v9 + *(unsigned __int16 *)(a1 + 32))), a2, 0x20uLL);
      ++v9;
      a2 += 32;
    }
    while (a3 != v9);
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 32) += a3;
  return result;
}

uint64_t extdata_ObjOpen(_WORD *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v12 = 0;
  if (!a3 || (InitRsrcFunction(a1, a2, &v12) & 0x80000000) != 0)
  {
    int v11 = -2147475449;
  }
  else
  {
    *a3 = 0;
    uint64_t v8 = (void *)heap_Alloc(*(void *)(v12 + 8), 40);
    if (v8)
    {
      uint64_t v9 = v8;
      cstdlib_memset(v8, 0, 0x28uLL);
      uint64_t result = 0;
      *uint64_t v9 = a1;
      v9[1] = a2;
      v9[2] = v12;
      *((_WORD *)v9 + 16) = 0;
      *((_DWORD *)v9 + 9) = a4;
      *a3 = v9;
      return result;
    }
    int v11 = -2147475446;
  }
  return v11 | (a4 << 20);
}

uint64_t extdata_UnregisterModule(uint64_t a1, unsigned int a2)
{
  uint64_t result = 2368741383;
  if (a1)
  {
    if (*(unsigned __int16 *)(a1 + 32) > a2)
    {
      uint64_t result = 0;
      *(void *)(*(void *)(a1 + 24) + 32 * a2 + 24) = 0;
    }
  }
  return result;
}

uint64_t extdata_GetIndex(uint64_t a1, _WORD *a2)
{
  uint64_t result = 2368741383;
  if (a1)
  {
    if (!a2) {
      return result;
    }
    int v4 = *(unsigned __int16 *)(a1 + 32);
    LOWORD(a1) = v4 - 1;
    if (v4)
    {
      uint64_t result = 0;
    }
    else
    {
      LOWORD(a1) = 0;
      uint64_t result = 2368741383;
    }
  }
  *a2 = a1;
  return result;
}

uint64_t extdata_FreeData(uint64_t a1)
{
  if (!a1) {
    return 2368741383;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 32);
  if (*(_WORD *)(a1 + 32))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(a1 + 24) + v3;
      if (*(void *)(v5 + 24))
      {
        uint64_t result = (*(uint64_t (**)(void))(v5 + 16))();
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v2 = *(unsigned __int16 *)(a1 + 32);
      }
      ++v4;
      v3 += 32;
    }
    while (v4 < v2);
  }
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 24));
  uint64_t result = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  return result;
}

uint64_t extdata_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2368741383;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = extdata_FreeData(a1);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4)
    {
      heap_Free(*(void **)(v2 + 8), v4);
      *(_WORD *)(a1 + 32) = 0;
    }
    heap_Free(*(void **)(v2 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t freeEOSDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_WORD *)(a1 + 96)) {
    return 0;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] free EOS definitions", a6, a7, a8, v14);
  uint64_t v9 = *(void *)(a1 + 104);
  if (v9)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v9);
    *(void *)(a1 + 104) = 0;
  }
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 96) = 0;
  if (*(_WORD *)(a1 + 128))
  {
    uint64_t v10 = *(void *)(a1 + 120);
    if (v10)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v10);
      *(void *)(a1 + 120) = 0;
    }
    *(_WORD *)(a1 + 128) = 0;
  }
  if (*(_WORD *)(a1 + 144))
  {
    uint64_t v11 = *(void *)(a1 + 136);
    if (v11)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v11);
      *(void *)(a1 + 136) = 0;
    }
    *(_WORD *)(a1 + 144) = 0;
  }
  uint64_t v12 = *(void *)(a1 + 152);
  if (v12)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v12);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t result = *(void *)(a1 + 88);
  if (result)
  {
    uint64_t result = ssftriff_reader_ReleaseChunkData((void *)result);
    if ((result & 0x80000000) == 0) {
      *(void *)(a1 + 88) = 0;
    }
  }
  return result;
}

uint64_t getEOSDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = a4;
  int __dst = 0;
  uint64_t v9 = (_WORD *)(a1 + 96);
  if (*(_WORD *)(a1 + 96)) {
    return v8;
  }
  uint64_t v10 = a4;
  uint64_t v8 = 2369789962;
  int v42 = 0;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] get EOS definitions", a6, a7, a8, v41);
  cstdlib_memcpy(&__dst, (const void *)v10, 4uLL);
  cstdlib_memcpy((char *)&v44 + 4, (const void *)(v10 + 4), 4uLL);
  unsigned int v13 = HIDWORD(v44) + 8;
  uint64_t v14 = (HIDWORD(v44) + 8 + __dst);
  cstdlib_memcpy(v9, (const void *)(v10 + v14), 2uLL);
  uint64_t v15 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (8 * *(unsigned __int16 *)(a1 + 96)) | 1);
  *(void *)(a1 + 104) = v15;
  if (!v15) {
    goto LABEL_26;
  }
  unsigned int v23 = v14 + 2;
  if (*v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 1;
    do
    {
      cstdlib_memcpy((char *)&v42 + 2, (const void *)(v10 + v23), 2uLL);
      uint64_t v10 = v45;
      cstdlib_memcpy(&v44, (const void *)(v45 + v23 + 2), 4uLL);
      v23 += 6;
      uint64_t v26 = *(void *)(a1 + 104) + v24;
      *(unsigned char *)(v26 + 4) = BYTE2(v42);
      *(_DWORD *)uint64_t v26 = v44;
      v24 += 8;
    }
    while (*(unsigned __int16 *)(a1 + 96) > (unsigned __int16)v25++);
  }
  cstdlib_memcpy((void *)(a1 + 128), (const void *)(v10 + v23), 2uLL);
  uint64_t v28 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (2 * *(unsigned __int16 *)(a1 + 128)) | 1);
  *(void *)(a1 + 120) = v28;
  if (!v28) {
    goto LABEL_26;
  }
  uint64_t v29 = v45;
  if (*(_WORD *)(a1 + 128))
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    do
    {
      cstdlib_memcpy((void *)(*(void *)(a1 + 120) + v30), (const void *)(v29 + v23 + v30 + 2), 2uLL);
      ++v31;
      v30 += 2;
    }
    while (v31 < *(unsigned __int16 *)(a1 + 128));
    v23 += v30;
  }
  *(_WORD *)(a1 + 144) = 0;
  cstdlib_memcpy((void *)(a1 + 144), (const void *)(v29 + v23 + 2), 2uLL);
  unsigned int v32 = v23 + 4;
  if (*(_WORD *)(a1 + 144))
  {
    uint64_t v33 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (2 * *(unsigned __int16 *)(a1 + 144)) | 1);
    *(void *)(a1 + 136) = v33;
    if (v33)
    {
      if (*(_WORD *)(a1 + 144))
      {
        uint64_t v34 = 0;
        unint64_t v35 = 0;
        do
        {
          cstdlib_memcpy((void *)(*(void *)(a1 + 136) + v34), (const void *)(v29 + v32 + v34), 2uLL);
          ++v35;
          v34 += 2;
        }
        while (v35 < *(unsigned __int16 *)(a1 + 144));
        v32 += v34;
      }
      goto LABEL_17;
    }
LABEL_26:
    freeEOSDefs(a1, v16, v17, v18, v19, v20, v21, v22);
    return v8;
  }
LABEL_17:
  cstdlib_memcpy(&v42, (const void *)(v29 + v32), 2uLL);
  uint64_t v36 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (unsigned __int16)v42 + 1);
  *(void *)(a1 + 152) = v36;
  if (!v36) {
    goto LABEL_26;
  }
  unsigned int v37 = v32 + 2;
  if ((_WORD)v42)
  {
    unint64_t v38 = 0;
    do
    {
      cstdlib_memcpy((void *)(*(void *)(a1 + 152) + v38), (const void *)(v29 + v37 + v38), 1uLL);
      ++v38;
    }
    while (v38 < (unsigned __int16)v42);
    v37 += v38;
  }
  cstdlib_memcpy((char *)&v42 + 2, (const void *)(v29 + v37), 2uLL);
  int v39 = HIWORD(v42);
  *(_DWORD *)(a1 + 160) = HIWORD(v42);
  if (!v39)
  {
    uint64_t v8 = 2369789959;
    goto LABEL_26;
  }
  uint64_t v8 = ssftriff_reader_DetachChunkData(a2, (void **)(a1 + 88), &v45);
  if ((v8 & 0x80000000) == 0) {
    *(void *)(a1 + 112) = v45 + v13;
  }
  return v8;
}

uint64_t sparser_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  v35[4] = *MEMORY[0x263EF8340];
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)&__c[3] = 0;
  uint64_t v6 = 2369789959;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  unsigned __int16 v31 = 0;
  char __s1 = 0;
  if (a5 && (InitRsrcFunction(a1, a2, &v34) & 0x80000000) == 0)
  {
    *a5 = 0;
    unsigned int v13 = (void *)heap_Alloc(*(void *)(v34 + 8), 192);
    if (!v13) {
      return 2369789962;
    }
    uint64_t v14 = (uint64_t)v13;
    cstdlib_memset(v13, 0, 0xC0uLL);
    *(void *)uint64_t v14 = a1;
    *(void *)(v14 + 8) = a2;
    uint64_t v15 = v34;
    *(void *)(v14 + 16) = v34;
    *(void *)(v14 + 80) = a6;
    *(void *)(v14 + 64) = 0;
    *(_WORD *)(v14 + 72) = 0;
    *(_WORD *)(v14 + 184) = 0;
    *(_DWORD *)(v14 + 176) = 0;
    *(void *)(v14 + 168) = 0;
    *(_DWORD *)(v14 + 188) = 0;
    if ((paramc_ParamGetStr(*(void *)(v15 + 40), (uint64_t)"mnceosposition", &__s1) & 0x80000000) == 0
      && __s1
      && !cstdlib_strcmp(__s1, "yes"))
    {
      *(_DWORD *)(v14 + 188) = 1;
    }
    cstdlib_memset((void *)(v14 + 96), 0, 0x48uLL);
    *(void *)(v14 + 24) = a3;
    *(_DWORD *)(v14 + 32) = a4;
    *(void *)(v14 + 88) = 0;
    v35[0] = "EOSD";
    v35[1] = getEOSDefs;
    v35[2] = freeEOSDefs;
    v35[3] = v14;
    uint64_t v16 = extdata_RegisterData(a6, (char *)v35, 1u);
    if ((v16 & 0x80000000) == 0)
    {
      extdata_GetIndex(a6, &v31);
      if ((objc_GetObject(*(void *)(v34 + 48), (uint64_t)"FE_DCTLKP", &v33) & 0x80000000) != 0)
      {
        uint64_t v18 = *(void *)(v14 + 40);
        if (!v18)
        {
LABEL_28:
          uint64_t v6 = 0;
          *a5 = v14;
          return v6;
        }
      }
      else
      {
        uint64_t v17 = v33;
        uint64_t v18 = *(void *)(v33 + 8);
        *(void *)(v14 + 40) = v18;
        *(_OWORD *)(v14 + 48) = *(_OWORD *)(v17 + 16);
        if (!v18) {
          goto LABEL_28;
        }
      }
      *(_WORD *)&__c[1] = -1;
      uint64_t v16 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(v18 + 96))(*(void *)(v14 + 48), *(void *)(v14 + 56), "fecfg", "ppabbrscanback", &__c[3], &__c[1], __c);
      if ((v16 & 0x80000000) == 0)
      {
        if (*(unsigned __int16 *)&__c[1] != 1 || !*(void *)&__c[3]) {
          goto LABEL_28;
        }
        uint64_t v19 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v19) {
          *uint64_t v19 = 0;
        }
        uint64_t v20 = **(char ***)&__c[3];
        *(_WORD *)(v14 + 72) = 1;
        while (1)
        {
          uint64_t v21 = cstdlib_strchr(v20, 124);
          if (!v21) {
            break;
          }
          ++*(_WORD *)(v14 + 72);
          uint64_t v20 = v21 + 1;
        }
        uint64_t v22 = heap_Calloc(*(void **)(v34 + 8), 1, *(unsigned __int16 *)(v14 + 72) + 1);
        *(void *)(v14 + 64) = v22;
        if (v22)
        {
          unsigned int v23 = **(char ***)&__c[3];
          *(_WORD *)(v14 + 72) = 0;
          if (v23)
          {
            do
            {
              if (*v23 == __c[0]) {
                break;
              }
              uint64_t v24 = cstdlib_strchr(v23, 124);
              uint64_t v25 = v24;
              if (v24) {
                *uint64_t v24 = 0;
              }
              char v26 = cstdlib_atoi((unsigned __int8 *)v23);
              uint64_t v27 = *(void *)(v14 + 64);
              uint64_t v28 = *(unsigned __int16 *)(v14 + 72);
              *(_WORD *)(v14 + 72) = v28 + 1;
              *(unsigned char *)(v27 + v28) = v26;
              unsigned int v23 = v25 + 1;
            }
            while (v25);
          }
          goto LABEL_28;
        }
        return 2369789962;
      }
    }
    uint64_t v6 = v16;
    sparser_ObjClose(v14);
    extdata_UnregisterModule(a6, v31);
  }
  return v6;
}

uint64_t sparser_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2369789959;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 40)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"FE_DCTLKP");
    }
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3)
    {
      heap_Free(*(void **)(v5 + 8), v3);
      *(void *)(a1 + 64) = 0;
      *(_WORD *)(a1 + 72) = 0;
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t sparser_HasTextElementLeft(_WORD **a1, uint64_t a2, BOOL *a3, _WORD *a4)
{
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v8 = 2369789959;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  int v55 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long __b = 0u;
  long long v50 = 0u;
  int v48 = 0;
  cstdlib_memset(&__b, 0, 0x40uLL);
  LODWORD(__b) = 1;
  *((void *)&__b + 1) = 0;
  LOWORD(v50) = 0;
  DWORD1(v50) = 2;
  *(void *)&long long v52 = 0;
  DWORD2(v52) = 0;
  *((void *)&v50 + 1) = 0;
  *(void *)&long long v51 = 0;
  DWORD2(v51) = 1;
  if (!a1 || !a2 || !a3 || (InitRsrcFunction(*a1, (int)a1[1], &v59) & 0x80000000) != 0) {
    return v8;
  }
  if (!*((_WORD *)a1 + 48))
  {
    log_OutPublic(*(void *)(v59 + 32), (uint64_t)&modPP_1, 1808, 0, v9, v10, v11, v12, v47);
    return v8;
  }
  if ((datac_RequestBlock(a2, 1010, 1u, &v58) & 0x80000000) != 0)
  {
    uint64_t v8 = 0;
    *a3 = 0;
    return v8;
  }
  uint64_t v13 = datac_RequestBlock(a2, 1011, 1u, &v57);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v14 = *(void *)(v57 + 8);
  uint64_t v15 = *(unsigned __int16 *)(v57 + 16);
  uint64_t v13 = datac_RequestBlock(a2, 1012, 1u, &v56);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v13 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1011, &v54, 212);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if ((chars_ScanBlankHead(v58, (unsigned __int16 *)&v55 + 1, v57, &v55, &v48, 1u) & 0x80000000) == 0)
  {
    if (v15 < 2)
    {
      LOWORD(v16) = 0;
    }
    else
    {
      int v16 = 0;
      uint64_t v17 = (_DWORD *)(v14 + 96);
      uint64_t v18 = v15 - 1;
      uint64_t v19 = (_DWORD *)(v14 + 96);
      do
      {
        int v20 = *v19;
        v19 += 16;
        if (v20 - *(_DWORD *)(v14 + 32) > *(_DWORD *)(v14 + 32)
                                         + *(unsigned __int16 *)(v58 + 2) * HIWORD(v55))
          break;
        int v21 = *(v17 - 3);
        if (v21 == 0x4000) {
          int v22 = v16;
        }
        else {
          int v22 = v16 + 1;
        }
        if (v21 != 3) {
          int v16 = v22;
        }
        uint64_t v17 = v19;
        --v18;
      }
      while (v18);
    }
    if (*((unsigned __int16 *)a1 + 92) <= (unsigned __int16)v16)
    {
      if ((bed_GetpBlock(v54, &v57) & 0x80000000) != 0) {
        goto LABEL_69;
      }
      uint64_t v29 = v58;
      if (v15 >= 2)
      {
        unsigned __int16 v30 = 0;
        unsigned __int16 v31 = (_DWORD *)(v14 + 104);
        uint64_t v32 = 1;
        while (*(v31 - 2) - *(_DWORD *)(v14 + 32) <= *(unsigned __int16 *)(v58 + 2) * HIWORD(v55))
        {
          int v33 = *(v31 - 5);
          if (v33 == 3 && *v31 == 1) {
            goto LABEL_67;
          }
          if (v33 != 0x4000) {
            ++v30;
          }
          if (*((unsigned __int16 *)a1 + 92) == v30)
          {
            if ((bed_Goto(v54, v32) & 0x80000000) == 0)
            {
              DWORD2(v50) = *(v31 - 4);
              LODWORD(v51) = *(v31 - 2);
              if ((sparser_bed_InjectMarker(v54, (unsigned int *)&__b, 0, *((_DWORD *)a1 + 47)) & 0x80000000) == 0)
              {
                log_OutText(*((void *)a1[2] + 4), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] inserting EOS as number of markers in empty text exceeded, end marker now %u", v43, v44, v45, v32);
                goto LABEL_67;
              }
            }
            goto LABEL_69;
          }
          ++v32;
          v31 += 16;
          if (v15 == v32) {
            break;
          }
        }
      }
    }
    else
    {
      if (!(_WORD)v16 && HIWORD(v55) > 0x400u)
      {
        if ((bed_GetpBlock(v54, &v57) & 0x80000000) != 0) {
          goto LABEL_69;
        }
        HIWORD(v55) = 1024;
        int v23 = *(_DWORD *)(v14 + 32);
        DWORD2(v50) = *(_DWORD *)(v14 + 24);
        LODWORD(v51) = v23;
        if (v15)
        {
          uint64_t v24 = 0;
          uint64_t v25 = (_DWORD *)(v14 + 20);
          char v26 = (_DWORD *)(v14 + 20);
          while (1)
          {
            int v27 = *v26;
            v26 += 16;
            if (v27 != 0x4000) {
              break;
            }
            int v28 = v25[3];
            if (v28 - *(_DWORD *)(v14 + 32) > (*(unsigned __int16 *)(v58 + 2) << 10)) {
              break;
            }
            DWORD2(v50) = v25[1];
            LODWORD(v51) = v28;
            ++v24;
            uint64_t v25 = v26;
            if (v15 == v24) {
              goto LABEL_61;
            }
          }
          uint64_t v15 = (unsigned __int16)v24;
        }
LABEL_61:
        if ((bed_Goto(v54, v15) & 0x80000000) != 0
          || (sparser_bed_InjectMarker(v54, (unsigned int *)&__b, 0, *((_DWORD *)a1 + 47)) & 0x80000000) != 0)
        {
          goto LABEL_69;
        }
        log_OutText(*((void *)a1[2] + 4), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] inserting EOS as empty text length exceeded, end marker now %u", v40, v41, v42, v15);
LABEL_67:
        BOOL v39 = 1;
LABEL_68:
        *a3 = v39;
        goto LABEL_69;
      }
      uint64_t v29 = v58;
    }
    if ((chars_ScanBlankHead(v29, (unsigned __int16 *)&v55 + 1, v57, &v55, &v48, 2u) & 0x80000000) == 0)
    {
      uint64_t v34 = v57;
      uint64_t v35 = HIWORD(v55);
      sparser_GetReadMode(v14, *(unsigned __int16 *)(v57 + 16), HIWORD(v55), a4);
      int v36 = (__int16)*a4;
      switch(v36)
      {
        case 2:
          int NextCharacterBoundary = sparser_FindNextCharacterBoundary(v58, v34, v56, v35, 0, a3);
          goto LABEL_56;
        case 4:
          unsigned int v37 = sparser_FindNextLineBoundary;
          break;
        case 3:
          unsigned int v37 = sparser_FindNextWordBoundary;
          break;
        default:
          paramc_ParamGetStr(*(void *)(v59 + 40), (uint64_t)"extraesctn", &v53);
          int NextCharacterBoundary = sparser_FindNextSentenceBoundary(v58, v57, v56, HIWORD(v55), v53, a3);
LABEL_56:
          if (NextCharacterBoundary < 0 || *a3 || !*(_DWORD *)(v58 + 20)) {
            goto LABEL_69;
          }
          BOOL v39 = sparser_ScanDataMarker(v57);
          goto LABEL_68;
      }
      int NextCharacterBoundary = v37(v58, v34, v56, v35, 0, a3);
      goto LABEL_56;
    }
  }
LABEL_69:
  if (v54) {
    bed_ObjClose(v54);
  }
  return 0;
}

uint64_t sparser_bed_InjectMarker(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  uint64_t result = 2369789959;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = sparser_bed_MapPosCur(a1, a2[8], a2 + 6);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v9 = a2 + 7;
        uint64_t result = sparser_bed_MapPosCur(a1, a2[9] + a2[8], a2 + 7);
        if ((result & 0x80000000) == 0)
        {
          unsigned int v10 = a2[6];
          if (*v9 >= v10) {
            *v9 -= v10;
          }
          if (a3 == 1
            || (a4 != 1
              ? (uint64_t v14 = (uint64_t (*)(uint64_t, unint64_t))sparser_marker_HasStrictlyGreaterPosCur)
              : (uint64_t v14 = (uint64_t (*)(uint64_t, unint64_t))sparser_marker_HasGreaterEqualPosCur),
                (uint64_t result = bed_GoForward(a1, v14, (uint64_t)a2), (result & 0x80000000) == 0) || (result & 0x1FFF) == 0x14))
          {
            uint64_t v16 = 0;
            unsigned __int16 v15 = 0;
            uint64_t result = bed_GetcElem(a1, &v15);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = bed_GetpElem(a1, 0, &v16);
              if ((result & 0x80000000) == 0)
              {
                if (v15)
                {
                  uint64_t v11 = 0;
                  for (unint64_t i = 0; i < v15; ++i)
                  {
                    if (*(_DWORD *)(v16 + v11 + 32) > a2[8]) {
                      break;
                    }
                    uint64_t result = cstdlib_memcmp((const void *)(v16 + v11), a2, 0x40uLL);
                    if (!result) {
                      return result;
                    }
                    v11 += 64;
                  }
                }
                int v13 = bed_Insert(a1, a2, 1);
                return v13 & (v13 >> 31);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sparser_GetReadMode(uint64_t result, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(result + 32) + a3;
    uint64_t v5 = (_DWORD *)(result + 104);
    uint64_t v6 = a2 - 1;
    do
    {
      if (*(v5 - 2) > v4) {
        break;
      }
      if (*(v5 - 5) == 20) {
        *a4 = *v5;
      }
      v5 += 16;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sparser_FindNextCharacterBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _DWORD *a6)
{
  *a6 = *(unsigned __int16 *)(a1 + 16) > a4;
  return 0;
}

uint64_t sparser_FindNextWordBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, BOOL *a6)
{
  if (*(_DWORD *)(a1 + 20))
  {
    BOOL v8 = *(unsigned __int16 *)(a1 + 16) > a4;
  }
  else
  {
    unsigned __int16 v10 = a4;
    chars_ScanNonBlanks(*(void *)(a1 + 8), &v10, *(unsigned __int16 *)(a1 + 16));
    BOOL v8 = v10 < *(unsigned __int16 *)(a1 + 16);
  }
  *a6 = v8;
  return 0;
}

uint64_t sparser_FindNextLineBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, BOOL *a6)
{
  if (*(_DWORD *)(a1 + 20))
  {
    BOOL v8 = *(unsigned __int16 *)(a1 + 16) > a4;
  }
  else
  {
    unsigned __int16 v10 = a4;
    chars_ScanForLineEnd(*(void *)(a1 + 8), &v10, *(unsigned __int16 *)(a1 + 16));
    BOOL v8 = v10 < *(unsigned __int16 *)(a1 + 16);
  }
  *a6 = v8;
  return 0;
}

uint64_t sparser_FindNextSentenceBoundary(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *a5, BOOL *a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 20))
  {
    BOOL v9 = *(unsigned __int16 *)(a1 + 16) > a4;
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
  if (a4)
  {
    if (!*(_WORD *)(a2 + 16))
    {
      LODWORD(v16) = 0;
      goto LABEL_28;
    }
    BOOL v15 = 0;
    LODWORD(v16) = 0;
    do
    {
      uint64_t v17 = v13 + ((unint64_t)v16 << 6);
      if (*(_DWORD *)(v17 + 32) > *(_DWORD *)(v13 + 32) + *(unsigned __int16 *)(a1 + 2) * a4) {
        break;
      }
      if (a5 && *(_DWORD *)(v17 + 20) == 21)
      {
        cstdlib_strcpy(__dst, (const char *)(*(void *)(a3 + 8) + *(unsigned int *)(v13 + ((unint64_t)v16 << 6) + 40)));
        BOOL v15 = cstdlib_strstr(a5, __dst) != 0;
        LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
      }
      LODWORD(v16) = v16 + 1;
    }
    while (v16 < v14);
  }
  else
  {
    LODWORD(v16) = 0;
    BOOL v15 = 0;
  }
  if (v16 >= v14) {
    goto LABEL_28;
  }
  unint64_t v16 = v16;
  uint64_t v18 = (_DWORD *)(v13 + ((unint64_t)v16 << 6));
  while (1)
  {
    if (v18[8] == *(_DWORD *)(v13 + 32)
      || !sparser_marker_IsSentenceBoundary((BOOL)v18, (char *)(*(void *)(a3 + 8) + v18[10])))
    {
      if (a5 && v18[5] == 21)
      {
        cstdlib_strcpy(__dst, (const char *)(*(void *)(a3 + 8) + v18[10]));
        BOOL v15 = cstdlib_strstr(a5, __dst) != 0;
      }
      goto LABEL_25;
    }
    if (v15 && v18[5] == 2)
    {
LABEL_21:
      v18[10] = 0;
      goto LABEL_25;
    }
    if (!sparser_IsSuppressedSentenceBoundary(a2, a1, *((_WORD *)v18 + 16) - (unsigned __int16)*(_DWORD *)(v13 + 32)))break; {
    if (v18[5] == 2)
    }
      goto LABEL_21;
LABEL_25:
    ++v16;
    unint64_t v14 = *(unsigned __int16 *)(a2 + 16);
    v18 += 16;
    if (v16 >= v14) {
      goto LABEL_26;
    }
  }
  LODWORD(v14) = *(unsigned __int16 *)(a2 + 16);
LABEL_26:
  LODWORD(v16) = (unsigned __int16)v16;
LABEL_28:
  BOOL v9 = v16 < v14;
LABEL_29:
  *a6 = v9;
  return 0;
}

BOOL sparser_ScanDataMarker(BOOL result)
{
  if (result)
  {
    unint64_t v1 = *(unsigned __int16 *)(result + 16);
    if (*(_WORD *)(result + 16))
    {
      uint64_t v2 = 0;
      uint64_t v3 = *(void *)(result + 8);
      unsigned int v4 = (_DWORD *)(v3 + 20);
      BOOL v5 = 1;
      do
      {
        if (v3)
        {
          if (*v4 <= 0x28u && ((1 << *v4) & 0x10024000100) != 0) {
            break;
          }
        }
        BOOL v5 = ++v2 < v1;
        v4 += 16;
      }
      while (v1 != v2);
    }
    else
    {
      return 0;
    }
    return v5;
  }
  return result;
}

uint64_t sparser_PreScanTextElement(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v12 = 0;
  uint64_t v5 = datac_RequestBlock(a2, 1010, 1u, &v12);
  if ((v5 & 0x80000000) == 0)
  {
    unint64_t v6 = *(unsigned __int16 *)(v12 + 16);
    if (v6 >= 4)
    {
      uint64_t v7 = *(unsigned char **)(v12 + 8);
      unsigned __int16 v13 = 0;
      if (utf8_Utf8CharTo16bit(&v7[(v6 - 2)], (uint64_t)&v13))
      {
        if (v13 <= 0x3Fu && ((1 << v13) & 0x8000400200000000) != 0 || v13 == 65294)
        {
          if (utf8_BelongsToSet(2u, v7, *(unsigned __int16 *)(v12 + 16) - 1, *(unsigned __int16 *)(v12 + 16)))
          {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] text ends in period-space; get more text",
              v8,
              v9,
              v10,
              v12);
            *a3 = 1;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sparser_ScanTextElement(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v8 = 2369789959;
  int v87 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  if (!a1 || !a2) {
    return v8;
  }
  if (!*(_WORD *)(a1 + 96))
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 1808, 0, a5, a6, a7, a8, v77);
    return v8;
  }
  datac_RequestBlock(a2, 1012, 1u, &v85);
  unsigned int v13 = datac_RequestBlock(a2, 1010, 1u, &v90);
  if ((v13 & 0x80000000) != 0)
  {
    if ((v13 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v13;
    }
  }
  __int16 v14 = *(_WORD *)(v90 + 16);
  __int16 v15 = *(_WORD *)(v90 + 2);
  uint64_t v16 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a2, 1011, &v89, 212);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v16 = bed_GetpBlock(v89, &v86);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  unsigned int v17 = *(_DWORD *)(*(void *)(v86 + 8) + 32);
  uint64_t v18 = v89;
  long long v95 = 0u;
  long long v96 = 0u;
  long long __b = 0u;
  long long v94 = 0u;
  *(void *)int v91 = 0;
  cstdlib_memset(&__b, 0, 0x40uLL);
  LODWORD(__b) = 0;
  *((void *)&__b + 1) = 0;
  LOWORD(v94) = 0;
  DWORD1(v94) = 0x4000;
  *(void *)&long long v96 = 0;
  DWORD2(v96) = 0;
  *((void *)&v94 + 1) = 0;
  *(void *)&long long v95 = 0;
  if (!v18) {
    goto LABEL_121;
  }
  uint64_t v19 = bed_Goto(v18, 0);
  if ((v19 & 0x80000000) != 0
    || (uint64_t v19 = bed_GoForward(v18, (uint64_t (*)(uint64_t, unint64_t))sparser_marker_IsOfSameType, (uint64_t)&__b), (v19 & 0x80000000) != 0)|| (uint64_t v19 = bed_GetpElem(v18, 0xFFFFu, v91), (v19 & 0x80000000) != 0))
  {
    uint64_t v8 = v19;
LABEL_121:
    unsigned int v22 = 0;
    unsigned __int16 v73 = 0;
    HIWORD(v87) = 0;
    goto LABEL_122;
  }
  unsigned int v83 = *(_DWORD *)(*(void *)v91 + 32);
  unsigned int v20 = *(_DWORD *)(a1 + 168);
  if (v20 < v17)
  {
    *(_DWORD *)(a1 + 168) = v17;
    unsigned int v20 = v17;
  }
  *(_DWORD *)(a1 + 176) = v20;
  unsigned int v88 = (v20 - v17) / *(unsigned __int16 *)(v90 + 2);
  v91[0] = v88;
  uint64_t NextOrthRegion = sparser_FindNextOrthRegion(v90, v89, v91, &v88, &v87);
  unsigned int v22 = v88;
  if ((NextOrthRegion & 0x80000000) != 0)
  {
    uint64_t v8 = NextOrthRegion;
  }
  else
  {
    unsigned int v23 = v91[0];
    if (v88)
    {
      unsigned int v24 = *(unsigned __int16 *)(v90 + 16);
      if (v88 <= v24)
      {
        HIWORD(v87) = v88 - (v24 == (unsigned __int16)v88);
        chars_BackScanBlanks(*(void *)(v90 + 8), (_WORD *)&v87 + 1);
        if (!HIWORD(v87))
        {
          uint64_t v8 = 0;
          goto LABEL_129;
        }
      }
    }
    if (v23 >= v22)
    {
      uint64_t v8 = 0;
    }
    else
    {
      int v25 = 0;
      int v81 = a4;
      unsigned int v78 = v17 + (unsigned __int16)(v15 * v14);
      unsigned int v79 = v17;
      LOWORD(v26) = v23;
      do
      {
        unsigned __int16 v80 = v26;
        if ((unsigned __int16)v26 == (unsigned __int16)v22) {
          goto LABEL_20;
        }
        unsigned int v32 = (unsigned __int16)v22;
        unsigned __int16 v33 = v26;
        do
        {
          if (!v86) {
            goto LABEL_136;
          }
          unint64_t v34 = *(unsigned __int16 *)(v86 + 16);
          if (*(_WORD *)(v86 + 16))
          {
            uint64_t v35 = 0;
            uint64_t v36 = *(void *)(v86 + 8);
            int v37 = *(_DWORD *)(v36 + 32);
            unint64_t v38 = (unsigned __int16 *)(v36 + 40);
            BOOL v39 = (_DWORD *)(v36 + 96);
            unint64_t v40 = 2;
            int v41 = v81;
            do
            {
              int v42 = *((_DWORD *)v38 - 2) - v37;
              unsigned int v43 = (unsigned __int16)(*(v38 - 4) - v37);
              if (v43 > v32) {
                break;
              }
              if (*((_DWORD *)v38 - 5) == 20)
              {
                int v44 = *v38;
                if (v41 == 1)
                {
                  BOOL v45 = v44 == 1 || v43 >= v32;
                  if (!v45 && v43 > v33)
                  {
                    int v41 = 1;
                    int v67 = *((_DWORD *)v38 - 2) - v37;
                    LOWORD(v42) = v33;
LABEL_101:
                    unsigned __int16 v33 = v67;
                    if (a3) {
                      goto LABEL_59;
                    }
                    goto LABEL_20;
                  }
                }
                int v41 = *v38;
                BOOL v47 = v44 != 1 || v43 >= v32;
                if (!v47 && v43 >= v33)
                {
                  if ((unsigned __int16)v35 + 1 < v34)
                  {
                    LOWORD(v67) = v22;
                    uint64_t v68 = v39;
                    while (1)
                    {
                      int v69 = *v68;
                      v68 += 16;
                      __int16 v70 = v69 - v37;
                      unsigned int v71 = (unsigned __int16)(v69 - v37);
                      if (v71 > v32) {
                        break;
                      }
                      if (*(v39 - 3) == 20)
                      {
                        BOOL v72 = v71 < v32 && v71 >= v33;
                        if (v72) {
                          LOWORD(v67) = v70;
                        }
                      }
                      else
                      {
                        BOOL v72 = 0;
                      }
                      if (v40 < v34)
                      {
                        ++v40;
                        BOOL v39 = v68;
                        if (!v72) {
                          continue;
                        }
                      }
                      if (v72) {
                        goto LABEL_101;
                      }
                      break;
                    }
                  }
LABEL_56:
                  unsigned __int16 v33 = v22;
                  if (a3) {
                    goto LABEL_59;
                  }
                  goto LABEL_20;
                }
              }
              v38 += 32;
              ++v35;
              v39 += 16;
              ++v40;
            }
            while (v34 != v35);
            LOWORD(v42) = v33;
            goto LABEL_56;
          }
          LOWORD(v42) = v33;
          unsigned __int16 v33 = v22;
          int v41 = v81;
          if (!a3) {
            break;
          }
LABEL_59:
          if ((unsigned __int16)v42 == v33 || v41 != 1) {
            break;
          }
          uint64_t v84 = v90;
          if (!v90 || (uint64_t v49 = v89) == 0)
          {
            uint64_t matched = 2369789959;
LABEL_135:
            uint64_t v8 = matched;
LABEL_136:
            unsigned int v17 = v79;
            goto LABEL_137;
          }
          int v50 = *(unsigned __int16 *)(v90 + 2);
          uint64_t v51 = bed_Goto(v89, 0xFFFFFFFF);
          if ((v51 & 0x80000000) != 0) {
            goto LABEL_133;
          }
          unsigned __int16 v92 = 0;
          long long __b = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          LODWORD(v95) = v83 + v50 * (unsigned __int16)v42;
          uint64_t matched = bed_GoBackward(v49, (unsigned int (*)(uint64_t, unint64_t))sparser_marker_HasStrictlySmallerPosCur, (uint64_t)&__b);
          if ((matched & 0x80001FFF) == 0x80000014) {
            uint64_t matched = bed_Goto(v49, 0);
          }
          if ((matched & 0x80000000) != 0) {
            goto LABEL_135;
          }
          uint64_t v51 = bed_GetiElem(v49, &v92);
          if ((v51 & 0x80000000) != 0)
          {
LABEL_133:
            uint64_t matched = v51;
            goto LABEL_135;
          }
          uint64_t matched = sparser_MatchSb(a1, 0, 1, v84, v83, v42, v33, v49, v92);
          if ((matched & 0x80000000) != 0) {
            goto LABEL_135;
          }
          LOWORD(v82) = v42;
          while (1)
          {
            uint64_t v53 = v92;
            unsigned int v54 = *(unsigned __int16 *)(v84 + 2);
            *(void *)&long long __b = 0;
            v97[0] = 0;
            if ((bed_GetcElem(v49, v97) & 0x80000000) != 0 || (bed_GetpElem(v49, 0, &__b) & 0x80000000) != 0) {
              break;
            }
            if (v97[0] > v53)
            {
              int v55 = (unsigned int *)(__b + 32 + (v53 << 6));
              while (1)
              {
                unsigned int v56 = *v55;
                v55 += 16;
                if (v56 > *(_DWORD *)(__b + 32) + v54 * (unsigned __int16)v82) {
                  break;
                }
                if (v97[0] == ++v53) {
                  goto LABEL_97;
                }
              }
              LODWORD(v53) = (unsigned __int16)v53;
            }
            if (v53 >= v97[0]) {
              goto LABEL_97;
            }
            int v57 = *(_DWORD *)(__b + 32);
            unsigned int v58 = v57 + v54 * v33;
            uint64_t v59 = v53;
            unsigned int v60 = (_DWORD *)(__b + ((unint64_t)v53 << 6) + 20);
            while (v60[3] <= v58)
            {
              if (*v60 <= 0x28u && ((1 << *v60) & 0x10004000080) != 0) {
                break;
              }
              ++v59;
              v60 += 16;
              if (v97[0] == v59) {
                goto LABEL_97;
              }
            }
            uint64_t v62 = __b + ((unint64_t)(unsigned __int16)v59 << 6);
            unsigned int v63 = *(_DWORD *)(v62 + 32);
            if (v63 > v58
              || ((v64 = *(_DWORD *)(v62 + 20), BOOL v29 = v64 > 0x28, v65 = (1 << v64) & 0x10004000080, !v29)
                ? (BOOL v66 = v65 == 0)
                : (BOOL v66 = 1),
                  v66))
            {
LABEL_97:
              if ((matched & 0x80000000) != 0) {
                goto LABEL_135;
              }
              break;
            }
            if (v54) {
              unsigned int v82 = (unsigned __int16)(v63 - v57) / v54;
            }
            uint64_t matched = sparser_MatchSb(a1, 1, 0, v84, v83, v42, v82, v49, v92);
            if ((matched & 0x80000000) != 0) {
              goto LABEL_135;
            }
          }
          int v25 = 1;
          unsigned int v32 = (unsigned __int16)v22;
        }
        while (v33 != (unsigned __int16)v22);
LABEL_20:
        uint64_t v27 = sparser_FindNextOrthRegion(v90, v89, v91, &v88, &v87);
        if ((v27 & 0x80000000) != 0)
        {
          unsigned int v22 = v88;
          uint64_t v8 = v27;
          goto LABEL_136;
        }
        unsigned int v17 = v79;
        unsigned int v28 = v88;
        BOOL v29 = v88 > (unsigned __int16)v22 && v91[0] > v80;
        if (v29) {
          unsigned int v26 = v91[0];
        }
        else {
          unsigned int v26 = v88;
        }
        v91[0] = v26;
        int v30 = *(unsigned __int16 *)(v90 + 2);
        BOOL v31 = v79 + v88 * v30 > v78 || v26 >= v88;
        unsigned int v22 = v88;
      }
      while (!v31);
      if (v25 == 1) {
        uint64_t v8 = sparser_CheckForcedSb(a1, v90, v83, (unsigned __int16)(v30 * v88), v89, (unsigned __int16)v87, v85);
      }
      else {
        uint64_t v8 = 0;
      }
      unsigned int v22 = v28;
    }
  }
LABEL_137:
  HIWORD(v87) = v22;
  if ((_WORD)v22 && (unsigned int v76 = *(unsigned __int16 *)(v90 + 16), (unsigned __int16)v22 <= v76))
  {
    if ((unsigned __int16)v22 == v76) {
      HIWORD(v87) = v22 - 1;
    }
    chars_BackScanBlanks(*(void *)(v90 + 8), (_WORD *)&v87 + 1);
    unsigned __int16 v73 = HIWORD(v87);
  }
  else
  {
    unsigned __int16 v73 = v22;
  }
LABEL_122:
  if (v22 != v73) {
    *(_DWORD *)(a1 + 172) = v17 + *(unsigned __int16 *)(v90 + 2) * v73;
  }
  if (v22 >= 5)
  {
    HIWORD(v87) = v22;
    chars_BackScanNChars(*(void *)(v90 + 8), (_WORD *)&v87 + 1, 4);
    unsigned int v74 = v17 + *(unsigned __int16 *)(v90 + 2) * HIWORD(v87);
    goto LABEL_130;
  }
LABEL_129:
  unsigned int v74 = v17 + v22 * *(unsigned __int16 *)(v90 + 2);
LABEL_130:
  *(_DWORD *)(a1 + 168) = v74;
  if (v89) {
    bed_ObjClose(v89);
  }
  return v8;
}

uint64_t sparser_FindNextOrthRegion(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, _WORD *a5)
{
  uint64_t v51 = 0;
  uint64_t result = 2369789959;
  if (a1)
  {
    if (a2)
    {
      unsigned int v10 = *a3;
      unsigned int v11 = *a4;
      int v12 = (unsigned __int16)*a5;
      unsigned int v13 = *(unsigned __int16 *)(a1 + 16);
      *a3 = v13;
      *a4 = v13;
      uint64_t result = bed_GetpBlock(a2, &v51);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v14 = v51;
        unsigned int v15 = (unsigned __int16)*a5;
        LODWORD(v16) = *(unsigned __int16 *)(v51 + 16);
        if (v15 >= v16)
        {
LABEL_45:
          if (v10 == *a3 && v11 == *a4)
          {
LABEL_47:
            uint64_t result = 0;
            unsigned int v50 = *(unsigned __int16 *)(a1 + 16);
            *a3 = v50;
            *a4 = v50;
            return result;
          }
          return 0;
        }
        uint64_t v17 = *(void *)(v51 + 8);
        int v18 = *(_DWORD *)(v17 + 32);
        if (__CFADD__(v18, v11 * *(unsigned __int16 *)(a1 + 2)))
        {
          unint64_t v19 = 0;
          BOOL v21 = 0;
        }
        else
        {
          unsigned int v20 = 0;
          BOOL v21 = 0;
          unsigned int v22 = (unsigned int *)(v17 + 96);
          unint64_t v23 = 1;
          do
          {
            unsigned int v15 = v20;
            unint64_t v19 = v23;
            *a5 = v20;
            if (*(v22 - 19) == 7)
            {
              BOOL v21 = !v21;
              if (*(v22 - 14) != 43) {
                BOOL v21 = 0;
              }
            }
            unint64_t v16 = *(unsigned __int16 *)(v14 + 16);
            if (v23 >= v16) {
              break;
            }
            unsigned int v24 = *v22;
            v22 += 16;
            unsigned int v20 = (unsigned __int16)v23++;
          }
          while (v24 <= v18 + v11 * *(unsigned __int16 *)(a1 + 2));
        }
        if (v21)
        {
          if (v15 < v16)
          {
            int v25 = (int *)(v17 + ((unint64_t)v15 << 6) + 84);
            unint64_t v26 = v15 + 1;
            do
            {
              unsigned int v15 = (unsigned __int16)v26;
              *a5 = v26;
              unint64_t v16 = *(unsigned __int16 *)(v14 + 16);
              if (v26 >= v16) {
                break;
              }
              int v27 = *v25;
              v25 += 16;
              ++v26;
            }
            while (v27 != 7);
          }
          if (v15 >= v16 || *(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 20) != 7) {
            return 0;
          }
        }
        uint64_t v28 = v15;
        LODWORD(v29) = v16;
        if (v15 < v16)
        {
          int v30 = (int *)(v17 + ((unint64_t)v15 << 6) + 84);
          unint64_t v31 = v15 + 1;
          do
          {
            unsigned int v15 = (unsigned __int16)v31;
            *a5 = v31;
            unint64_t v29 = *(unsigned __int16 *)(v14 + 16);
            if (v31 >= v29) {
              break;
            }
            int v32 = *v30;
            v30 += 16;
            ++v31;
          }
          while (v32 != 7);
        }
        int v33 = *(_DWORD *)(v17 + (v28 << 6) + 32);
        int v34 = *(_DWORD *)(v17 + 32);
        unsigned int v35 = v33 - v34;
        unsigned int v36 = *(unsigned __int16 *)(a1 + 2);
        unsigned int v37 = v35 / v36;
        if (v15 >= v29)
        {
          if (v37 == *(unsigned __int16 *)(a1 + 16))
          {
LABEL_44:
            *a3 = v37;
            goto LABEL_45;
          }
        }
        else
        {
          unsigned int v38 = (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 32) - v34) / v36;
          if (v37 == v38)
          {
            BOOL v39 = (_DWORD *)(v17 + (v19 << 6) + 40);
            uint64_t v40 = v17 + 84;
            while (1)
            {
              if (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 20) == 7 && *v39 == 43)
              {
                unint64_t v41 = v15 + 1;
                int v42 = (int *)(v40 + ((unint64_t)v15 << 6));
                do
                {
                  LOWORD(v15) = v41;
                  *a5 = v41;
                  unint64_t v29 = *(unsigned __int16 *)(v14 + 16);
                  if (v41 >= v29) {
                    break;
                  }
                  int v43 = *v42;
                  v42 += 16;
                  ++v41;
                }
                while (v43 != 7);
                if (*(_DWORD *)(v17 + ((unint64_t)(unsigned __int16)v15 << 6) + 20) != 7) {
                  return 0;
                }
                unsigned int v15 = (unsigned __int16)v15;
              }
              uint64_t v44 = v15;
              if (v15 < v29)
              {
                BOOL v45 = (int *)(v40 + ((unint64_t)v15 << 6));
                unint64_t v46 = v15 + 1;
                do
                {
                  unsigned int v15 = (unsigned __int16)v46;
                  *a5 = v46;
                  unint64_t v29 = *(unsigned __int16 *)(v14 + 16);
                  if (v46 >= v29) {
                    break;
                  }
                  int v47 = *v45;
                  v45 += 16;
                  ++v46;
                }
                while (v47 != 7);
              }
              unsigned int v48 = *(unsigned __int16 *)(a1 + 2);
              unsigned int v37 = (*(_DWORD *)(v17 + (v44 << 6) + 32) - v34) / v48;
              if (v15 >= v29) {
                goto LABEL_44;
              }
              unsigned int v49 = (*(_DWORD *)(v17 + ((unint64_t)v15 << 6) + 32) - v34) / v48;
              if (v37 != v49)
              {
                *a3 = v37;
                *a4 = v49;
                goto LABEL_45;
              }
            }
          }
          *a4 = v38;
        }
        *a3 = v37;
        if (v10 != v37) {
          return 0;
        }
        uint64_t result = 0;
        if (v11 == *a4 && v12 == v15) {
          goto LABEL_47;
        }
      }
    }
  }
  return result;
}

uint64_t sparser_CheckForcedSb(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v98 = 0;
  uint64_t v7 = 2369789959;
  if (!a2) {
    return v7;
  }
  uint64_t i = a5;
  if (!a5) {
    return v7;
  }
  uint64_t v99 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v99) & 0x80000000) != 0) {
    return v7;
  }
  unsigned __int16 v96 = 0;
  sparser_getMaxCharsPerText(v99, (__int16 *)&v96);
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v7 = bed_Goto(i, a6);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  unsigned int v97 = 0;
  if (!a4) {
    return v7;
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  uint64_t v85 = a7;
  unsigned int v86 = a4 + a3;
  uint64_t v17 = v96;
  uint64_t v88 = i;
  while (1)
  {
    *(void *)&long long __b = 0;
    uint64_t v18 = bed_GetpBlock(i, &__b);
    if ((v18 & 0x80000000) != 0) {
      return v18;
    }
    unsigned int v90 = a3;
    uint64_t v19 = *(void *)(__b + 8);
    LOWORD(v95) = v16 / *(unsigned __int16 *)(a2 + 2);
    chars_ScanBlanks(*(void *)(a2 + 8), &v95, *(unsigned __int16 *)(a2 + 16));
    int v20 = *(unsigned __int16 *)(a2 + 2);
    unsigned __int16 v21 = v20 * v95;
    LOWORD(v95) = 0;
    uint64_t v22 = __b;
    uint64_t v23 = *(unsigned __int16 *)(__b + 16);
    int v24 = v21;
    if (!v21)
    {
LABEL_12:
      LOWORD(v29) = 0;
      goto LABEL_13;
    }
    if (*(_WORD *)(__b + 16)) {
      break;
    }
LABEL_29:
    uint64_t v35 = (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(a2 + 8), v20 * *(unsigned __int16 *)(a2 + 16) - v24);
    if (v35 > v17) {
      goto LABEL_30;
    }
    unsigned int v36 = v90;
    a3 = v90 + *(unsigned __int16 *)(a2 + 2) * *(unsigned __int16 *)(a2 + 16);
    uint64_t i = v88;
LABEL_36:
    uint64_t v7 = 0;
    unsigned int v97 = a3;
LABEL_75:
    if (a3 - v36 + v16 <= 0xFFFE)
    {
      int v80 = (unsigned __int16)(a3 - v36);
      if (a3 == v36) {
        int v80 = 1;
      }
      v16 += v80;
      if (v16 < a4) {
        continue;
      }
    }
    return v7;
  }
  int v25 = *(_DWORD *)(v19 + 32);
  unsigned int v26 = v25 + v21;
  if (__CFADD__(v25, v24)) {
    goto LABEL_12;
  }
  uint64_t v29 = 0;
  int v30 = (unsigned int *)(v19 + 96);
  do
  {
    if (v23 - 1 == v29)
    {
      LOWORD(v95) = *(_WORD *)(__b + 16);
LABEL_28:
      int v20 = *(unsigned __int16 *)(a2 + 2);
      goto LABEL_29;
    }
    ++v29;
    unsigned int v31 = *v30;
    v30 += 16;
  }
  while (v31 <= v26);
  LOWORD(v95) = v29;
LABEL_13:
  while (v23 > (unsigned __int16)v29)
  {
    uint64_t v27 = v19 + ((unint64_t)(unsigned __int16)v29 << 6);
    if (*(_DWORD *)(v27 + 32) != *(_DWORD *)(v19 + 32))
    {
      BOOL IsSentenceBoundary = sparser_marker_IsSentenceBoundary(v27, (char *)(*(void *)(a7 + 8) + *(unsigned int *)(v27 + 40)));
      LOWORD(v29) = v95;
      uint64_t v22 = __b;
      if (IsSentenceBoundary)
      {
        LODWORD(v23) = *(unsigned __int16 *)(__b + 16);
        break;
      }
    }
    LOWORD(v29) = v29 + 1;
    LOWORD(v95) = v29;
    LODWORD(v23) = *(unsigned __int16 *)(v22 + 16);
  }
  if (v23 <= (unsigned __int16)v29) {
    goto LABEL_28;
  }
  unsigned int v32 = *(_DWORD *)(v19 + 32) + v24;
  BOOL v33 = v32 > v90;
  LODWORD(v34) = (unsigned __int16)(v32 - v90);
  if (v33) {
    uint64_t v34 = v34;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(a2 + 8) + v34, *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v29 << 6) + 32)- (v90+ v34));
  if (v35 <= v17)
  {
    a3 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v95 << 6) + 32);
    uint64_t i = v88;
    unsigned int v36 = v90;
    goto LABEL_36;
  }
LABEL_30:
  unsigned int v95 = 0;
  long long v93 = 0u;
  long long v94 = 0u;
  long long __b = 0u;
  long long v92 = 0u;
  cstdlib_memset(&__b, 0, 0x40uLL);
  LODWORD(__b) = 1;
  *((void *)&__b + 1) = 0;
  LOWORD(v92) = 0;
  *(void *)&long long v94 = 0;
  DWORD2(v94) = 0;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  DWORD1(v92) = 2;
  DWORD2(v93) = 1;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] sentence character count %d is greater than max %d", v37, v38, v39, v35);
  unsigned int v95 = (unsigned __int16)(v17 + v16);
  utf8_GetPreviousValidUtf8Offset(*(void *)(a2 + 8), &v95);
  unsigned int v40 = (unsigned __int16)v95;
  int v41 = Utf8_LengthInUtf8chars(v14 + v16, (unsigned __int16)v95 - v16);
  if (v40 >= a4)
  {
    uint64_t i = v88;
  }
  else
  {
    int v45 = v41;
    for (uint64_t i = v88; v17 > (unsigned __int16)v45; ++v45)
    {
      v40 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(v14 + (unsigned __int16)v40));
      if (a4 <= (unsigned __int16)v40) {
        break;
      }
    }
  }
  unsigned int v97 = v90 - v16 + (unsigned __int16)v40;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] after resetting to %d characters, position=%d", v42, v43, v44, v17);
  eos_BackScanPhraseBoundary(*(char **)(a1 + 152), v14, v16, v90, &v97);
  uint64_t v49 = v97;
  if (v97 > v86)
  {
    uint64_t v49 = v86;
    unsigned int v97 = v86;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] after scanning back to phrase boundary, position=%d", v46, v47, v48, v49);
  *(void *)&long long v93 = v97;
  uint64_t v7 = bed_GetpBlock(i, &v98);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v53 = *(void *)(v98 + 8);
  uint64_t v54 = *(unsigned __int16 *)(v98 + 16);
  if (!*(_WORD *)(v98 + 16))
  {
    uint64_t v58 = v15;
    a7 = v85;
    goto LABEL_63;
  }
  uint64_t v55 = 0;
  BOOL v56 = 0;
  int v57 = (_DWORD *)(v53 + 40);
  uint64_t v58 = v15;
  a7 = v85;
  do
  {
    if (*(v57 - 2) > v93) {
      break;
    }
    if (*(v57 - 5) == 7)
    {
      BOOL v56 = !v56;
      uint64_t v58 = *v57 == 43 ? v55 : v58;
      if (*v57 != 43) {
        BOOL v56 = 0;
      }
    }
    v57 += 16;
    ++v55;
  }
  while (v54 != v55);
  if (!v56)
  {
LABEL_63:
    uint64_t v87 = v58;
    if (v93 == *(_DWORD *)(v53 + 32))
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] no hard reset (at start of text)", v50, v51, v52, v82);
      goto LABEL_74;
    }
    do
      LOWORD(v54) = v54 - 1;
    while ((_WORD)v54
         && v93 < *(_DWORD *)(v53 + ((unint64_t)(unsigned __int16)v54 << 6) + 36)
                              + *(_DWORD *)(v53 + ((unint64_t)(unsigned __int16)v54 << 6) + 32));
    unsigned int v74 = (unsigned __int16)v54;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] hard reset at position=%d", v50, v51, v52, v93);
    uint64_t v18 = bed_Goto(v88, v74);
    if ((v18 & 0x80000000) == 0)
    {
      uint64_t v18 = sparser_bed_InjectMarker(v88, (unsigned int *)&__b, 0, *(_DWORD *)(a1 + 188));
      uint64_t v7 = 0;
      uint64_t i = v88;
      if ((v18 & 0x80000000) == 0)
      {
LABEL_74:
        log_OutPublic(*(void *)(v99 + 32), (uint64_t)&modPP_1, 1816, 0, v70, v71, v72, v73, v83);
        a3 = v97;
        uint64_t v15 = v87;
        unsigned int v36 = v90;
        goto LABEL_75;
      }
    }
    return v18;
  }
  uint64_t v87 = v58;
  unsigned __int16 v59 = v58 + 1;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] position=%d is in a phoneme region", v50, v51, v52, v97);
  unint64_t v63 = *(unsigned __int16 *)(v98 + 16);
  if (v63 > v59)
  {
    unint64_t v64 = v59;
    uint64_t v65 = (int *)(v53 + ((unint64_t)v59 << 6) + 20);
    unsigned __int16 v66 = v59;
    do
    {
      int v68 = *v65;
      v65 += 16;
      int v67 = v68;
      if (v68 == 7) {
        unsigned __int16 v66 = v64;
      }
      ++v64;
    }
    while (v64 < v63 && v67 != 7);
    if (v67 == 7)
    {
      unsigned int v84 = v66;
      uint64_t v69 = v66;
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set forced EOS at end of phoneme region (marker %d)", v60, v61, v62, v66);
      unsigned int v97 = *(_DWORD *)(v53 + (v69 << 6) + 32);
      LODWORD(v93) = v97;
      uint64_t v18 = bed_Goto(i, v84);
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v18 = sparser_bed_InjectMarker(i, (unsigned int *)&__b, 0, *(_DWORD *)(a1 + 188));
      uint64_t v7 = 0;
      a7 = v85;
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      goto LABEL_74;
    }
  }
  uint64_t v18 = bed_Goto(i, (unsigned __int16)v87);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v78 = v53 + ((unint64_t)(unsigned __int16)v87 << 6);
  int v79 = *(_DWORD *)(v78 + 24);
  LODWORD(v93) = *(_DWORD *)(v78 + 32);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] didnt find end of phoneme region, hard reset at start of phoneme (marker %d)", v75, v76, v77, (unsigned __int16)v87);
  uint64_t v18 = sparser_bed_InjectMarker(i, (unsigned int *)&__b, 1, *(_DWORD *)(a1 + 188));
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v7 = bed_GetpBlock(i, &v98);
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(void *)(v98 + 8) + ((unint64_t)(unsigned __int16)v87 << 6) + 24) = v79;
    unsigned int v97 = a4;
    a7 = v85;
    goto LABEL_74;
  }
  return v7;
}

uint64_t sparser_GetTextElement(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, __int16 *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _WORD *a11, _WORD *a12)
{
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  uint64_t v167 = 0;
  uint64_t v168 = 0;
  uint64_t v12 = 2369789959;
  uint64_t v166 = 0;
  uint64_t v165 = 0;
  __int16 v163 = 0;
  int v162 = 0;
  if (!a2) {
    return v12;
  }
  int v164 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v170) & 0x80000000) != 0) {
    return v12;
  }
  *a12 = 0;
  *a11 = 0;
  *a8 = 0;
  if (!*(_WORD *)(a1 + 96))
  {
    uint64_t v26 = *(void *)(v170 + 32);
    uint64_t v27 = 1805;
LABEL_8:
    log_OutPublic(v26, (uint64_t)&modPP_1, v27, 0, v21, v22, v23, v24, v151);
    return v12;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1010, 1u, &v169);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v159 = (datac_RequestBlock(a2, 1012, 1u, &v167) & 0x80000000) != 0 ? 0 : *(void *)(v167 + 8);
  uint64_t v25 = datac_RequestBlock(a2, 1011, 1u, &v168);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v160 = *(void *)(v168 + 8);
  __int16 v28 = *(_WORD *)(v168 + 16);
  uint64_t v25 = chars_ScanBlankHead(v169, (unsigned __int16 *)&v164, v168, (_WORD *)&v164 + 1, &v162, 0);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  if (v162 == 1) {
    HIWORD(v164) = v28;
  }
  uint64_t v32 = v168;
  unint64_t v33 = *(unsigned __int16 *)(v168 + 16);
  if (v33 >= 2)
  {
    unsigned int v34 = *(_DWORD *)(v160 + 32) + (unsigned __int16)v164;
    uint64_t v35 = (_DWORD *)(v160 + 104);
    unint64_t v36 = v33 - 1;
    do
    {
      if (*(v35 - 2) > v34) {
        break;
      }
      if (*(v35 - 5) == 20) {
        *a7 = *v35;
      }
      v35 += 16;
      --v36;
    }
    while (v36);
  }
  uint64_t v37 = *a7 - 2;
  if (v37 > 2) {
    uint64_t v38 = (uint64_t (*)())sparser_GetSentenceLength;
  }
  else {
    uint64_t v38 = off_26D212F60[v37];
  }
  uint64_t v39 = v169;
  uint64_t v40 = v167;
  if (v32)
  {
    if (v169)
    {
      unsigned int v41 = HIWORD(v164);
      if (HIWORD(v164))
      {
        uint64_t v42 = 0;
        uint64_t v43 = *(_DWORD **)(v32 + 8);
        uint64_t v44 = v43;
        while ((v44[5] & 0xFFFFFFFE) != 2 || v44[10] != 1)
        {
          v44 += 16;
          if (-(uint64_t)HIWORD(v164) == --v42) {
            goto LABEL_30;
          }
        }
        long long v158 = a8;
        unint64_t v54 = -v42;
        unsigned int v45 = (unsigned __int16)-(__int16)v42;
        if ((_WORD)v42)
        {
          unsigned int v55 = v43[16 * (unint64_t)~v42 + 5];
          BOOL v121 = v55 > 0x28;
          uint64_t v56 = (1 << v55) & 0x10024000100;
          if (!v121 && v56 != 0)
          {
            unsigned int v58 = v44[8] - v43[8] / *(unsigned __int16 *)(v169 + 2);
            a8 = v158;
LABEL_54:
            LOWORD(v164) = v58;
            HIWORD(v164) = v45;
            goto LABEL_32;
          }
        }
        if (HIWORD(v164) <= v45)
        {
LABEL_87:
          a8 = v158;
        }
        else
        {
          while (1)
          {
            unsigned int v79 = v44[5];
            BOOL v121 = v79 > 0x28;
            uint64_t v80 = (1 << v79) & 0x10024000100;
            if (!v121 && v80 != 0) {
              break;
            }
            ++v54;
            v44 += 16;
            if (HIWORD(v164) == (unsigned __int16)v54) {
              goto LABEL_87;
            }
          }
          if (HIWORD(v164) <= (unsigned __int16)v54)
          {
            unsigned int v45 = (unsigned __int16)v54;
          }
          else
          {
            int v152 = *(_DWORD **)(v32 + 8);
            uint64_t v154 = v169;
            long long v156 = v38;
            do
            {
              uint64_t v149 = v40;
              BOOL IsSentenceBoundary = sparser_marker_IsSentenceBoundary((BOOL)v44, (char *)(*(void *)(v40 + 8) + v44[10]));
              unsigned int v41 = HIWORD(v164);
              if (IsSentenceBoundary) {
                break;
              }
              v44 += 16;
              ++v54;
              uint64_t v40 = v149;
            }
            while (v54 < HIWORD(v164));
            unsigned int v45 = (unsigned __int16)v54;
            uint64_t v39 = v154;
            uint64_t v38 = v156;
            uint64_t v43 = v152;
          }
          a8 = v158;
          if (v45 < v41)
          {
            LOWORD(v58) = (unsigned __int16)(v43[16 * (unint64_t)v45 + 8] - v43[8]) / *(_WORD *)(v39 + 2);
            goto LABEL_54;
          }
          uint64_t v39 = v169;
        }
      }
    }
  }
LABEL_30:
  uint64_t v25 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v170, v39);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  unsigned int v45 = HIWORD(v164);
LABEL_32:
  long long v157 = a8;
  if (v45 < 2)
  {
    unsigned __int16 v52 = 0;
    LOWORD(v48) = 1;
  }
  else
  {
    int v46 = 0;
    uint64_t v47 = v160 + 64;
    uint64_t v48 = 1;
    uint64_t v49 = v45;
    while (1)
    {
      int v50 = *(_DWORD *)(v47 + 20);
      int v51 = v50 == 0x4000 ? v46 : v46 + 1;
      if (v50 == 22) {
        break;
      }
      ++v48;
      int v46 = v51 + 1;
      v47 += 64;
      if (v49 == v48)
      {
        unsigned __int16 v52 = 0;
        LOWORD(v48) = v49;
        goto LABEL_60;
      }
    }
    HIWORD(v164) = v48;
    *a5 = 1;
    if ((unsigned __int16)v51 == (unsigned __int16)v48 && *(_DWORD *)(v47 + 32) == *(_DWORD *)(v160 + 32))
    {
      *a6 = 1;
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found immediate voice switch", v29, v30, v31, v151);
      uint64_t v25 = sparser_SetArgAsParamStr(a1, a2, v47, (uint64_t)"pipelineswitchvoice");
      if ((v25 & 0x80000000) != 0) {
        return v25;
      }
      HIWORD(v164) = v51 + 1;
    }
    else
    {
      *a6 = 0;
    }
    if (*(unsigned __int16 *)(v168 + 16) <= (unsigned __int16)v48) {
      unsigned int v53 = *(unsigned __int16 *)(v169 + 16);
    }
    else {
      unsigned int v53 = (unsigned __int16)(*(_DWORD *)(v47 + 32) - *(_DWORD *)(v160 + 32))
    }
          / *(unsigned __int16 *)(v169 + 2);
    if (v53 >= *(unsigned __int16 *)(v169 + 16)) {
      __int16 v59 = *(_WORD *)(v169 + 16);
    }
    else {
      __int16 v59 = v53;
    }
    LOWORD(v164) = v59;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found voice switch (marker %d); adjusted text length to %u, set iMEnd to %d, bImmediateVoiceSwi"
               "tch=%d bEndOnVoiceSwitch=%d",
      v29,
      v30,
      v31,
      v48);
    unsigned __int16 v52 = v48;
  }
LABEL_60:
  if ((unsigned __int16)v164 <= 1u) {
    unsigned int v60 = 1;
  }
  else {
    unsigned int v60 = (unsigned __int16)v164;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1020, v60, &v166);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1021, (unsigned __int16)(HIWORD(v164) + 1), &v165);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  cstdlib_memmove(*(void **)(v166 + 8), *(const void **)(v169 + 8), *(unsigned __int16 *)(v169 + 2) * (unint64_t)(unsigned __int16)v164);
  uint64_t v61 = (unsigned __int16)v164;
  *(_WORD *)(v166 + 16) = v164;
  uint64_t v62 = v169;
  unsigned __int16 v63 = *(_WORD *)(v169 + 16) - v61;
  *(_WORD *)(v169 + 16) = v63;
  cstdlib_memmove(*(void **)(v62 + 8), (const void *)(*(void *)(v62 + 8) + v61), *(unsigned __int16 *)(v62 + 2) * (unint64_t)v63);
  uint64_t v64 = v166;
  *a3 = *(unsigned __int16 *)(v166 + 16);
  if (*a5 == 1 && !*a6)
  {
    int v161 = 0;
    uint64_t v25 = chars_ScanBlankHead(v64, (unsigned __int16 *)&v161 + 1, v165, &v161, &v162, 0);
    if ((v25 & 0x80000000) != 0) {
      return v25;
    }
    if (HIWORD(v161) == *(unsigned __int16 *)(v166 + 16))
    {
      if (HIWORD(v164) < 2uLL)
      {
LABEL_97:
        *a6 = 1;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] found immediate voice switch, due to blank text", v82, v83, v84, v151);
        uint64_t v25 = sparser_SetArgAsParamStr(a1, a2, v160 + ((unint64_t)v52 << 6), (uint64_t)"pipelineswitchvoice");
        if ((v25 & 0x80000000) != 0) {
          return v25;
        }
        HIWORD(v164) = v48 + 1;
      }
      else
      {
        uint64_t v85 = (unsigned int *)(v160 + 84);
        uint64_t v86 = 1;
        while (1)
        {
          unsigned int v87 = *v85;
          v85 += 16;
          uint64_t v88 = (1 << v87) & 0x1080200084;
          if (v87 > 0x24 || v88 == 0) {
            break;
          }
          if (++v86 >= (unint64_t)HIWORD(v164)) {
            goto LABEL_97;
          }
        }
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] blank text, but non-eos marker found - continue with sentence", v82, v83, v84, v151);
        HIWORD(v164) = v48;
        *a5 = 0;
      }
    }
  }
  cstdlib_memmove(*(void **)(v165 + 8), *(const void **)(v168 + 8), (unint64_t)HIWORD(v164) << 6);
  uint64_t v68 = v165;
  unsigned int v69 = HIWORD(v164);
  if (HIWORD(v164))
  {
    unint64_t v70 = 0;
    uint64_t v71 = (_DWORD *)v160;
    uint64_t v72 = (const char **)(v160 + 48);
    uint64_t v73 = (char **)(*(void *)(v165 + 8) + 48);
    while (1)
    {
      if (*v72)
      {
        int v74 = (unsigned __int16)cstdlib_strlen(*v72);
        if (v74)
        {
          uint64_t v75 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (v74 + 1));
          *uint64_t v73 = v75;
          if (!v75) {
            return 2369789962;
          }
          cstdlib_strcpy(v75, *v72);
          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)*v72);
          *uint64_t v72 = 0;
        }
      }
      ++v70;
      unsigned int v69 = HIWORD(v164);
      v72 += 8;
      v73 += 8;
      if (v70 >= HIWORD(v164))
      {
        uint64_t v68 = v165;
        goto LABEL_76;
      }
    }
  }
  uint64_t v71 = (_DWORD *)v160;
LABEL_76:
  *(_WORD *)(v68 + 16) = v69;
  uint64_t v76 = v169;
  if (*(_DWORD *)(v169 + 20))
  {
    uint64_t v77 = v168;
    if (*(_WORD *)(v169 + 16))
    {
      int v78 = 0;
    }
    else
    {
      int v78 = *(_DWORD *)(v168 + 20);
      if (v78) {
        int v78 = *(unsigned __int16 *)(v168 + 16) == v69;
      }
    }
  }
  else
  {
    int v78 = 0;
    uint64_t v77 = v168;
  }
  int v90 = v71[16 * (unint64_t)v69 + 6];
  *(_DWORD *)(v166 + 20) = v78;
  *(_DWORD *)(v68 + 20) = v78;
  if (v69 >= *(unsigned __int16 *)(v77 + 16))
  {
    int v91 = *(unsigned __int16 *)(v76 + 2) * (unsigned __int16)v164;
    unsigned int v92 = v71[8] + v91;
  }
  else
  {
    int v91 = *(unsigned __int16 *)(v76 + 2) * (unsigned __int16)v164;
    unsigned int v92 = v91 + v71[8];
    unsigned int v93 = v71[16 * (unint64_t)v69 + 8];
    if (v92 >= v93)
    {
      int v153 = 0;
      v71[6] = v90;
      v71[8] = v93;
      goto LABEL_106;
    }
  }
  v71[6] += v91;
  v71[8] = v92;
  int v153 = 1;
LABEL_106:
  int v155 = v90;
  if (v69 < 2)
  {
    unsigned __int16 v96 = 1;
  }
  else
  {
    long long v94 = v71 + 21;
    unint64_t v95 = 1;
    unsigned __int16 v96 = 1;
    do
    {
      unsigned int v97 = *v94;
      if (*v94 != 2)
      {
        *a4 += v94[2];
        BOOL v121 = v97 > 0x24;
        uint64_t v98 = (1 << v97) & 0x1080200080;
        if (!v121 && v98 != 0)
        {
          unsigned int ArgOfLastOfType = sparser_marker_GetArgOfLastOfType(v160, (unsigned __int16)v95, (unsigned __int16)v69, 1);
          if (!sparser_marker_IsReadOutControlDefaultArg(*v94, ArgOfLastOfType, v159, *(_DWORD *)(a1 + 180)))
          {
            unint64_t v101 = v160 + ((unint64_t)v96 << 6);
            int v102 = *(_DWORD *)(v160 + 24);
            *(_DWORD *)(v101 + 20) = *v94;
            *(_DWORD *)(v101 + 24) = v102;
            unsigned int v103 = *(_DWORD *)(v160 + 32);
            *(_DWORD *)(v101 + 28) = 0;
            *(void *)(v101 + 32) = v103;
            *(_DWORD *)(v101 + 40) = ArgOfLastOfType;
            *(_DWORD *)unint64_t v101 = 1;
            ++v96;
          }
        }
      }
      ++v95;
      unsigned int v69 = HIWORD(v164);
      v94 += 16;
    }
    while (v95 < HIWORD(v164));
  }
  if (v69 > v96)
  {
    uint64_t v104 = v168;
    unsigned __int16 v105 = *(_WORD *)(v168 + 16) + v96 - v69;
    *(_WORD *)(v168 + 16) = v105;
    if (v105 >= 2u)
    {
      cstdlib_memmove((void *)(*(void *)(v104 + 8) + ((unint64_t)v96 << 6)), (const void *)(*(void *)(v104 + 8) + ((unint64_t)v69 << 6)), (v105 - (unint64_t)v96) << 6);
      LOWORD(v69) = HIWORD(v164);
    }
  }
  int v106 = *(int **)(v165 + 8);
  unsigned __int16 v107 = v69 - 1;
  if ((unsigned __int16)(v69 - 1) >= 2u)
  {
    unsigned __int16 v107 = v69 - 1;
    uint64_t v108 = &v106[16 * (unint64_t)(unsigned __int16)(v69 - 1)];
    unsigned int v109 = v108;
    while (1)
    {
      int v111 = *v109;
      v109 -= 16;
      int v110 = v111;
      if (v111 != 1 && (v110 || v108[5] != 0x4000)) {
        break;
      }
      --v107;
      uint64_t v108 = v109;
      if ((v107 & 0xFFFE) == 0)
      {
        unsigned __int16 v107 = 1;
        break;
      }
    }
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] end marker is pMrk[%d] (iMEnd=%d)", v65, v66, v67, v107);
  uint64_t v112 = HIWORD(v164);
  if (HIWORD(v164))
  {
    int v113 = v106;
    do
    {
      int v114 = *v113;
      v113 += 16;
      if (!v114) {
        ++*a11;
      }
      --v112;
    }
    while (v112);
  }
  int v115 = v106[6];
  int v116 = v155 - v115;
  int v117 = (unsigned __int16)v164;
  uint64_t v118 = v169;
  unint64_t v119 = &v106[16 * (unint64_t)v107];
  int v120 = v106[8]
       - v115
       + v119[6]
       + *(unsigned __int16 *)(v169 + 2) * (unsigned __int16)v164
       + v119[7]
       - (v119[8]
        + v119[9]);
  if (v155 - v115 < 0 && v120 < 0)
  {
    uint64_t v26 = *(void *)(v170 + 32);
    uint64_t v27 = 1902;
    goto LABEL_8;
  }
  BOOL v121 = v155 != v115 && v120 < 0;
  if (!v121) {
    int v116 = v106[8]
  }
         - v115
         + v119[6]
         + *(unsigned __int16 *)(v169 + 2) * (unsigned __int16)v164
         + v119[7]
         - (v119[8]
          + v119[9]);
  v106[7] = v116;
  v106[9] = *(unsigned __int16 *)(v118 + 2) * v117;
  LOWORD(v164) = 0;
  uint64_t v122 = v165;
  __int16 v123 = *(_WORD *)(v165 + 16);
  if (v123)
  {
    unint64_t v124 = 0;
    uint64_t v125 = v106 + 5;
    while (1)
    {
      uint64_t v126 = v125 - 5;
      if (*v125 == 3)
      {
        if (!v125[5] || v125[3] - v106[8] < v106[9])
        {
LABEL_148:
          uint64_t v127 = (unsigned __int16)v164;
          BOOL v128 = &v106[16 * (unint64_t)(unsigned __int16)v164];
          long long v129 = *(_OWORD *)(v125 + 3);
          long long v130 = *(_OWORD *)(v125 + 7);
          long long v131 = *(_OWORD *)(v125 - 1);
          *(_OWORD *)BOOL v128 = *v126;
          *((_OWORD *)v128 + 1) = v131;
          *((_OWORD *)v128 + 2) = v129;
          *((_OWORD *)v128 + 3) = v130;
          uint64_t v132 = v128 + 5;
          int v133 = v128[5];
          if (v133 == 3 && !v128[10] || *v125 == 3 && v125[3] - v106[8] < v106[9])
          {
            *uint64_t v132 = 999;
            v106[16 * v127 + 10] = 0;
          }
          else if (v133 == 3)
          {
            *uint64_t v132 = 2;
          }
          LOWORD(v164) = v127 + 1;
        }
      }
      else if ((*v125 & 0xFFFFFFFE) != 2)
      {
        goto LABEL_148;
      }
      if (v125[3] <= v106[8] && *v125 != 0x4000 && !*(_DWORD *)v126)
      {
        *v157 += v125[2];
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] [2] add pMrk[%d].lenRef (tag=%d) to posRefOffset(%d) %d,%d %d,%d", v22, v23, v24, v124);
      }
      ++v124;
      uint64_t v122 = v165;
      v125 += 16;
      if (v124 >= *(unsigned __int16 *)(v165 + 16))
      {
        __int16 v123 = v164;
        break;
      }
    }
  }
  *(_WORD *)(v122 + 16) = v123;
  uint64_t v25 = sparser_TrimBlankHead(a1, a2, v157, a12, &v163, a9, a10);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v25 = datac_RequestBlock(a2, 1021, 1u, &v165);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  uint64_t v134 = *(void *)(v165 + 8);
  int v135 = *(_DWORD *)(v134 + 24);
  int v136 = *(_DWORD *)(v134 + 28);
  uint64_t v25 = datac_RequestBlock(a2, 1011, 1u, &v168);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  if (!v153) {
    return 0;
  }
  uint64_t v137 = v168;
  uint64_t v138 = *(_DWORD **)(v168 + 8);
  v138[6] = v136 + v135;
  unint64_t v139 = *(unsigned __int16 *)(v137 + 16);
  if (v139 < 2) {
    return 0;
  }
  unsigned __int16 v140 = v138 + 24;
  int v141 = v138[8];
  unint64_t v142 = v139 - 1;
  int v143 = v140;
  do
  {
    int v144 = *v143;
    v143 += 16;
    if (v144 == v141)
    {
      unsigned int v145 = *(v140 - 3);
      BOOL v121 = v145 > 0x24;
      uint64_t v146 = (1 << v145) & 0x1080200080;
      if (!v121 && v146 != 0) {
        *(v140 - 2) = v136 + v135;
      }
    }
    uint64_t v12 = 0;
    unsigned __int16 v140 = v143;
    --v142;
  }
  while (v142);
  return v12;
}

uint64_t sparser_GetCharacterLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v8 = *a5;
  if (v8 >= *(unsigned __int16 *)(a2 + 16))
  {
    LOWORD(v13) = *(_WORD *)(a3 + 16);
  }
  else
  {
    uint64_t v11 = *(void *)(a3 + 8);
    unsigned __int16 v12 = *a5 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + v8));
    *a5 = v12;
    uint64_t v13 = (unsigned __int16)*a6;
    uint64_t v14 = *(unsigned __int16 *)(a3 + 16);
    if (v13 < v14)
    {
      unsigned int v15 = *(_DWORD *)(v11 + 32) + *(unsigned __int16 *)(a2 + 2) * v12;
      unsigned int v16 = (unsigned int *)(v11 + 32 + (v13 << 6));
      while (1)
      {
        unsigned int v17 = *v16;
        v16 += 16;
        if (v17 >= v15) {
          break;
        }
        if (v14 == ++v13)
        {
          LOWORD(v13) = *(_WORD *)(a3 + 16);
          break;
        }
      }
    }
  }
  *a6 = v13;
  return 0;
}

uint64_t sparser_GetWordLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned __int16 *a6)
{
  uint64_t v11 = *(void *)(a3 + 8);
  unsigned __int16 v39 = 0;
  int v12 = *a5;
  chars_ScanNonBlanks(*(void *)(a2 + 8), a5, *(unsigned __int16 *)(a2 + 16));
  sparser_getMaxCharsPerText(a1, (__int16 *)&v39);
  unsigned __int16 v13 = Utf8_LengthInUtf8chars(*(void *)(a2 + 8), *a5);
  unsigned int v18 = v39;
  if (v39 >= v13)
  {
    unsigned __int16 v20 = *a5;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)&modPP_1, 1814, 0, v14, v15, v16, v17, v37);
    *a5 = v18;
    unsigned int v38 = v18;
    utf8_GetPreviousValidUtf8Offset(*(void *)(a2 + 8), &v38);
    if (v38) {
      --v38;
    }
    utf8_GetPreviousValidUtf8Offset(*(void *)(a2 + 8), &v38);
    uint64_t v19 = (unsigned __int16)v38;
    *a5 = v38;
    unsigned __int16 v20 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + v19));
    *a5 = v20;
    if (*(unsigned __int16 *)(a2 + 16) > v20 && v18 >= 2)
    {
      unsigned int v22 = 1;
      do
      {
        unsigned __int16 v20 = *a5 + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + v20));
        *a5 = v20;
        ++v22;
      }
      while (*(unsigned __int16 *)(a2 + 16) > v20 && v22 < v18);
    }
  }
  uint64_t v24 = *(unsigned __int16 *)(a3 + 16);
  if (v12 == v20)
  {
LABEL_18:
    unsigned __int16 v25 = v24;
  }
  else
  {
    if (*(_WORD *)(a3 + 16))
    {
      uint64_t v26 = 0;
      BOOL v27 = 0;
      unsigned __int16 v25 = 0;
      __int16 v28 = (_DWORD *)(v11 + 40);
      do
      {
        if (v27 || *(v28 - 2) - *(_DWORD *)(v11 + 32) >= v20) {
          break;
        }
        if (*(v28 - 5) == 7)
        {
          BOOL v27 = *v28 == 43;
          if (*v28 == 43) {
            unsigned __int16 v25 = v26;
          }
        }
        else
        {
          BOOL v27 = 0;
        }
        v28 += 16;
        ++v26;
      }
      while (v24 != v26);
      if (v27)
      {
        uint64_t v29 = v11 + ((unint64_t)v25 << 6);
        int v30 = *(_DWORD *)(v11 + 32);
        if (*(_WORD *)(v29 + 32) != (_WORD)v30 || *(_DWORD *)(v29 + 20) != 7)
        {
          *a5 = *(_WORD *)(v29 + 32) - v30;
          goto LABEL_42;
        }
        while (1)
        {
          __int16 v31 = v25++;
          if (v24 <= v25) {
            break;
          }
          uint64_t v32 = v11 + ((unint64_t)v25 << 6);
          if (*(_DWORD *)(v32 + 20) == 7)
          {
            *a5 = *(_DWORD *)(v32 + 32) - v30;
            *a6 = v31 + 2;
            LODWORD(v24) = *(unsigned __int16 *)(a3 + 16);
            break;
          }
        }
      }
    }
    uint64_t v33 = *a6;
    unsigned __int16 v25 = *a6;
    if (v33 < v24)
    {
      unsigned int v34 = (unsigned int *)(v11 + 32 + (v33 << 6));
      while (1)
      {
        unsigned int v35 = *v34;
        v34 += 16;
        if (v35 >= *(_DWORD *)(v11 + 32) + *(unsigned __int16 *)(a2 + 2) * *a5) {
          break;
        }
        if (v24 == ++v33) {
          goto LABEL_18;
        }
      }
      unsigned __int16 v25 = v33;
    }
  }
LABEL_42:
  *a6 = v25;
  return 0;
}

uint64_t sparser_GetLineLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v12 = *(void *)(a3 + 8);
  unsigned __int16 v38 = 0;
  int v13 = *a5;
  chars_ScanForLineEnd(*(void *)(a2 + 8), a5, *(unsigned __int16 *)(a2 + 16));
  sparser_getMaxCharsPerText(a1, (__int16 *)&v38);
  unsigned __int16 v14 = Utf8_LengthInUtf8chars(*(void *)(a2 + 8), *a5);
  unsigned int v15 = v38;
  if (v38 < v14)
  {
    unint64_t v36 = a6;
    *a5 = v38;
    unsigned int v16 = v15;
    if (v15 == *(unsigned __int16 *)(a2 + 16))
    {
      *a5 = v15 - 1;
      unsigned int v16 = (unsigned __int16)(v15 - 1);
    }
    unsigned int v37 = v16;
    utf8_GetPreviousValidUtf8Offset(*(void *)(a2 + 8), &v37);
    int v17 = (unsigned __int16)v37;
    *a5 = v37;
    unsigned __int16 v18 = Utf8_LengthInUtf8chars(*(void *)(a2 + 8), v17);
    unsigned int v19 = *a5;
    if (v19 < *(unsigned __int16 *)(a2 + 16))
    {
      for (unsigned __int16 i = v18; v15 > i; ++i)
      {
        LOWORD(v19) = *a5
                    + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a2 + 8) + (unsigned __int16)v19));
        *a5 = v19;
        if (*(unsigned __int16 *)(a2 + 16) <= (unsigned __int16)v19) {
          break;
        }
      }
    }
    chars_BackScanToBlank(*(void *)(a2 + 8), a5);
    unsigned __int16 v25 = *a5;
    if (!*a5)
    {
      *a5 = v19;
      unsigned __int16 v25 = v19;
    }
    a6 = v36;
    if (*(_WORD *)(a3 + 16))
    {
      uint64_t v26 = 0;
      BOOL v27 = 0;
      unsigned __int16 v28 = 0;
      uint64_t v29 = (_DWORD *)(v12 + 40);
      do
      {
        if (*(v29 - 2) - *(_DWORD *)(v12 + 32) > v25) {
          break;
        }
        if (*(v29 - 5) == 7)
        {
          BOOL v27 = !v27;
          if (*v29 == 43) {
            unsigned __int16 v28 = v26;
          }
          else {
            BOOL v27 = 0;
          }
        }
        v29 += 16;
        ++v26;
      }
      while (*(unsigned __int16 *)(a3 + 16) != v26);
      if (v27) {
        *a5 = *(_WORD *)(v12 + ((unint64_t)v28 << 6) + 32) - *(_WORD *)(v12 + 32);
      }
    }
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)&modPP_1, 1815, 0, v21, v22, v23, v24, v36);
  }
  if (v13 == *a5)
  {
    LOWORD(v30) = *(_WORD *)(a3 + 16);
  }
  else
  {
    unint64_t v30 = (unsigned __int16)*a6;
    if (v30 < *(unsigned __int16 *)(a3 + 16))
    {
      __int16 v31 = (_DWORD *)(v12 + (v30 << 6));
      do
      {
        unsigned int v32 = v31[8];
        int v33 = *(_DWORD *)(v12 + 32);
        unsigned int v34 = *(unsigned __int16 *)(a2 + 2) * *a5;
        if (v32 >= v34 + v33) {
          break;
        }
        if (v34 >= (unsigned __int16)(v32 - v33)
          && sparser_marker_IsSentenceBoundary((BOOL)v31, (char *)(*(void *)(a4 + 8) + v31[10]))
          && ((v31[5] & 0xFFFFFFFE) != 2 || v31[10] != 1)
          && v31[8] != *(_DWORD *)(v12 + 32))
        {
          *a5 = (unsigned __int16)(*((_WORD *)v31 + 16) - *(_WORD *)(v12 + 32)) / *(_WORD *)(a2 + 2);
          break;
        }
        ++v30;
        v31 += 16;
      }
      while (v30 < *(unsigned __int16 *)(a3 + 16));
    }
  }
  *a6 = v30;
  return 0;
}

uint64_t sparser_GetSentenceLength(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, _WORD *a6)
{
  uint64_t v11 = *(void *)(a3 + 8);
  unint64_t v12 = (unsigned __int16)*a6;
  unsigned int v13 = *(unsigned __int16 *)(a3 + 16);
  if (v12 < v13)
  {
    uint64_t v14 = v11 + (v12 << 6);
    do
    {
      if (*(unsigned __int16 *)(a2 + 2) * (unsigned __int16)*a5 < (unsigned __int16)(*(_WORD *)(v14 + 32)
                                                                                                  - *(_WORD *)(v11 + 32)))
      {
        BOOL IsSentenceBoundary = sparser_marker_IsSentenceBoundary(v14, (char *)(*(void *)(a4 + 8) + *(unsigned int *)(v14 + 40)));
        unsigned int v13 = *(unsigned __int16 *)(a3 + 16);
        if (IsSentenceBoundary) {
          break;
        }
      }
      v14 += 64;
      ++v12;
    }
    while (v12 < v13);
    LODWORD(v12) = (unsigned __int16)v12;
  }
  if (v12 < v13)
  {
    unint64_t v12 = v12;
    uint64_t v16 = v11 + ((unint64_t)v12 << 6);
    do
    {
      if (*(unsigned __int16 *)(a2 + 2) * (unsigned __int16)*a5 < (unsigned __int16)(*(_WORD *)(v16 + 32)
                                                                                                  - *(_WORD *)(v11 + 32)))
      {
        if (sparser_marker_IsSentenceBoundary(v16, (char *)(*(void *)(a4 + 8) + *(unsigned int *)(v16 + 40))))
        {
          int IsSuppressedSentenceBoundary = sparser_IsSuppressedSentenceBoundary(a3, a2, *(_WORD *)(v16 + 32) - (unsigned __int16)*(_DWORD *)(v11 + 32));
          unsigned int v13 = *(unsigned __int16 *)(a3 + 16);
          if (!IsSuppressedSentenceBoundary) {
            break;
          }
        }
        else
        {
          unsigned int v13 = *(unsigned __int16 *)(a3 + 16);
        }
      }
      ++v12;
      v16 += 64;
    }
    while (v12 < v13);
    LODWORD(v12) = (unsigned __int16)v12;
  }
  if (v12 >= v13) {
    __int16 v18 = *(_WORD *)(a2 + 16);
  }
  else {
    __int16 v18 = (unsigned __int16)(*(_DWORD *)(v11 + ((unint64_t)v12 << 6) + 32) - *(_DWORD *)(v11 + 32))
  }
        / *(_WORD *)(a2 + 2);
  *a5 = v18;
  *a6 = v12;
  return 0;
}

uint64_t sparser_SetArgAsParamStr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 2369789959;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v16) & 0x80000000) == 0
    && (datac_RequestBlock(a2, 1012, 1u, &v15) & 0x80000000) == 0)
  {
    size_t v8 = (unsigned __int16)cstdlib_strlen((const char *)(*(void *)(v15 + 8) + *(unsigned int *)(a3 + 40)));
    uint64_t v9 = (char *)heap_Calloc(*(void **)(v16 + 8), 1, v8 + 1);
    if (v9)
    {
      unsigned int v10 = v9;
      cstdlib_strncpy(v9, (const char *)(*(void *)(v15 + 8) + *(unsigned int *)(a3 + 40)), v8);
      v10[v8] = 0;
      uint64_t v7 = paramc_ParamSetStr(*(void *)(v16 + 40), a4, v10);
      if ((v7 & 0x80000000) == 0) {
        log_OutText(*(void *)(v16 + 32), (uint64_t)&modPP_1, 4, 0, (uint64_t)"[SPARSER] SET PARAM marker:%d param=%s val=%s", v11, v12, v13, *(unsigned int *)(a3 + 20));
      }
      heap_Free(*(void **)(v16 + 8), (uint64_t)v10);
    }
    else
    {
      return 2369789962;
    }
  }
  return v7;
}

unint64_t sparser_marker_GetArgOfLastOfType(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v5 = a1 + ((unint64_t)a2 << 6);
  int v6 = *(_DWORD *)(v5 + 20);
  unint64_t result = *(void *)(v5 + 40);
  if (v6 == 7)
  {
    BOOL v8 = result == 43;
    if (a3 > (unsigned __int16)(a2 + 1))
    {
      uint64_t v9 = (unsigned __int16)(a2 + 1);
      unsigned int v10 = (_DWORD *)(a1 + (v9 << 6) + 20);
      uint64_t v11 = v9 + 1;
      do
      {
        if (*v10 == 7)
        {
          uint64_t v12 = v10[5];
          BOOL v13 = !v8;
          if (v8) {
            unint64_t v14 = result & 0xFFFFFFFF00000000 | 0xF;
          }
          else {
            unint64_t v14 = result;
          }
          int v15 = v13;
          if (v12 == 43) {
            unint64_t result = v14;
          }
          else {
            unint64_t result = result & 0xFFFFFFFF00000000 | v12;
          }
          if (v12 == 43) {
            BOOL v8 = v15;
          }
          else {
            BOOL v8 = 0;
          }
          if (a4 == 1) {
            *unsigned int v10 = 999;
          }
        }
        v10 += 16;
        BOOL v13 = a3 == (unsigned __int16)v11++;
      }
      while (!v13);
    }
    if (v8) {
      return result & 0xFFFFFFFF00000000 | 0xF;
    }
  }
  else if (a3 > (unsigned __int16)(a2 + 1))
  {
    uint64_t v16 = (unsigned __int16)(a2 + 1);
    uint64_t v17 = a1 + (v16 << 6) + 20;
    uint64_t v18 = v16 + 1;
    do
    {
      if (*(_DWORD *)v17 == v6)
      {
        unint64_t result = *(void *)(v17 + 20);
        if (a4 == 1) {
          *(_DWORD *)uint64_t v17 = 999;
        }
      }
      v17 += 64;
      BOOL v13 = a3 == (unsigned __int16)v18++;
    }
    while (!v13);
  }
  return result;
}

BOOL sparser_marker_IsReadOutControlDefaultArg(int a1, unsigned int a2, uint64_t a3, int a4)
{
  BOOL result = 0;
  if (a1 > 30)
  {
    if (a1 != 31)
    {
      if (a1 != 36) {
        return result;
      }
      goto LABEL_7;
    }
    return a2 == a4;
  }
  else
  {
    if (a1 != 7)
    {
      if (a1 != 21) {
        return result;
      }
LABEL_7:
      uint64_t v10 = v4;
      uint64_t v11 = v5;
      strcpy(__s2, "normal");
      return a3 && cstdlib_strcmp((const char *)(a3 + a2), __s2) == 0;
    }
    return a2 == 15;
  }
}

uint64_t sparser_TrimBlankHead(uint64_t a1, uint64_t a2, _DWORD *a3, _WORD *a4, _WORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7 = a7;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  int v116 = 0;
  int v117 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  a7[5] = 0;
  uint64_t result = datac_RequestBlock(a2, 1020, 1u, &v123);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = datac_RequestBlock(a2, 1021, 1u, &v122);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = chars_ScanBlankHead(v123, (unsigned __int16 *)&v117 + 1, v122, &v117, &v116, 0);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = datac_RequestBlock(a2, 1021, 1u, &v122);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v114 = a3;
  uint64_t v115 = a1;
  uint64_t v18 = *(_DWORD **)(v122 + 8);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] got %d (byte) blanks, but do they bisect markers?", v15, v16, v17, *(unsigned __int16 *)(v123 + 2) * HIWORD(v117));
  if (v116)
  {
    int v22 = 1;
  }
  else
  {
    unsigned __int16 v40 = 0;
    int v112 = v18[8];
    int v111 = v18 + 8;
    uint64_t v41 = v122;
    int v22 = 1;
    do
    {
      unsigned int v42 = *(unsigned __int16 *)(v41 + 16);
      if (v40 >= v42) {
        break;
      }
      unsigned int v43 = v18[16 * (unint64_t)v40 + 5];
      BOOL v44 = v43 > 0x24 || ((1 << v43) & 0x1080300080) == 0;
      if (v44
        || v18[16 * (unint64_t)v40]
        || (unsigned int v45 = v18[16 * (unint64_t)v40 + 8],
            unsigned int v46 = v18[8],
            unsigned int v47 = *(unsigned __int16 *)(v123 + 2),
            int v48 = v47 * HIWORD(v117),
            v45 >= v48 + v46))
      {
        int v55 = 0;
      }
      else
      {
        if (v42 <= (unsigned __int16)(v40 + 1))
        {
          uint64_t v113 = v40;
          unsigned __int16 v51 = v40;
        }
        else
        {
          unsigned __int16 v49 = v40 + 1;
          int v50 = &v111[16 * (unint64_t)(unsigned __int16)(v40 + 1)];
          unsigned __int16 v51 = v40;
          do
          {
            unsigned int v52 = *(v50 - 3);
            if (v52 <= 0x24 && ((1 << v52) & 0x1080300080) != 0)
            {
              BOOL v54 = v52 == v43 && *(v50 - 8) == 0;
              if (v54 && *v50 < v48 + v46) {
                unsigned __int16 v51 = v49;
              }
            }
            ++v49;
            v50 += 16;
          }
          while (v42 != v49);
          uint64_t v113 = v51;
          unsigned int v45 = v18[16 * (unint64_t)v51 + 8];
        }
        if (v45 < v46 || (v45 - v46) / v47 >= HIWORD(v117))
        {
          if (v18[16 * (unint64_t)v40 + 6] - v18[6] == v48)
          {
            log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] reset to reference region at marker %d", v19, v20, v21, v40);
            int v22 = 0;
            int v84 = *(unsigned __int16 *)(v123 + 2) * HIWORD(v117);
            int v85 = v18[7] - v84;
            v18[6] += v84;
            v18[7] = v85;
            LOWORD(v117) = v40;
            uint64_t v41 = v122;
          }
        }
        else
        {
          uint64_t v56 = &v18[16 * v113];
          unsigned int v109 = v9;
          int v110 = v56 + 8;
          LOWORD(v117) = v51;
          cstdlib_memcpy(v7, v56, 0x40uLL);
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] hard reference reset at marker %d", v57, v58, v59, v51);
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] reset to reference region at marker %d", v60, v61, v62, v51);
          unsigned __int16 v63 = &v18[16 * v113];
          int v64 = v63[6];
          v63 += 6;
          uint64_t v65 = (v64 - v18[6]);
          *a6 = v65;
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set refReset(%d) due to readout control marker %d", v66, v67, v68, v65);
          int v69 = v18[7] - *v63 + v18[6];
          char v18[6] = *v63;
          v18[7] = v69;
          uint64_t v108 = v63;
          uint64_t v70 = v63[1]
              + (HIWORD(v117) - (*v110 - v18[8]) / *(unsigned __int16 *)(v123 + 2))
              * *(unsigned __int16 *)(v123 + 2);
          *int v114 = v70;
          log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set posRefOffset(%d) due to readout control marker %d", v71, v72, v73, v70);
          uint64_t v41 = v122;
          if (*(unsigned __int16 *)(v122 + 16) > (unsigned __int16)(v51 + 1))
          {
            unint64_t v74 = (unsigned __int16)(v51 + 1);
            uint64_t v75 = &v111[16 * v74];
            int v76 = v112;
            uint64_t v77 = v108;
            do
            {
              if ((*(v75 - 3) == 999 || !*(v75 - 8))
                && *v75 <= v76 + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
                && *(v75 - 2) >= *v77)
              {
                uint64_t v78 = (*v114 + *(v75 - 1));
                *int v114 = v78;
                unsigned int v79 = v10;
                uint64_t v80 = v7;
                int v81 = v77;
                log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] set posRefOffset(%d) due to marker %d", v19, v20, v21, v78);
                uint64_t v77 = v81;
                uint64_t v7 = v80;
                uint64_t v10 = v79;
                int v76 = v112;
                uint64_t v41 = v122;
              }
              ++v74;
              v75 += 16;
            }
            while (v74 < *(unsigned __int16 *)(v41 + 16));
          }
          if (v51 < 2u)
          {
            int v22 = 0;
            uint64_t v9 = v109;
          }
          else
          {
            uint64_t v82 = v113 - 1;
            uint64_t v83 = v18 + 21;
            uint64_t v9 = v109;
            do
            {
              if (*v83 == 999) {
                *uint64_t v83 = 0x4000;
              }
              v83 += 16;
              --v82;
            }
            while (v82);
            int v22 = 0;
          }
        }
        unsigned __int16 v40 = *(_WORD *)(v41 + 16);
        int v55 = v116;
      }
      ++v40;
    }
    while (!v55);
  }
  uint64_t v23 = HIWORD(v117);
  if (!HIWORD(v117) && !v7[5]) {
    return 0;
  }
  int v24 = v22;
  uint64_t v25 = v123;
  unsigned __int16 v26 = *(_WORD *)(v123 + 16) - HIWORD(v117);
  *(_WORD *)(v123 + 16) = v26;
  cstdlib_memmove(*(void **)(v25 + 8), (const void *)(*(void *)(v25 + 8) + v23), *(unsigned __int16 *)(v25 + 2) * (unint64_t)v26);
  uint64_t result = datac_RequestBlock(a2, 1021, (unsigned __int16)(*(_WORD *)(v122 + 16) + 1), &v122);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v27 = v122;
  unsigned __int16 v28 = *(long long **)(v122 + 8);
  uint64_t v29 = (unsigned __int16)v117;
  if ((unsigned __int16)v117 == 1)
  {
    long long v30 = v28[1];
    long long v118 = *v28;
    long long v119 = v30;
    long long v31 = v28[3];
    long long v120 = v28[2];
    long long v121 = v31;
    *((_DWORD *)v28 + 7) = 0;
    *((_DWORD *)v28 + 9) = 0;
  }
  int v32 = *((_DWORD *)v28 + 8);
  int v33 = *((_DWORD *)v28 + 6);
  unsigned int v34 = v32
      - v33
      + *((_DWORD *)&v28[4 * v29 - 2] - 2)
      + *((_DWORD *)&v28[4 * v29 - 2] - 1)
      + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
      - (LODWORD(v28[4 * v29 - 2])
       + *((_DWORD *)&v28[4 * v29 - 1] - 3));
  if (v29 == 1)
  {
    long long v35 = v119;
    *unsigned __int16 v28 = v118;
    v28[1] = v35;
    long long v36 = v121;
    v28[2] = v120;
    v28[3] = v36;
  }
  unint64_t v37 = *(unsigned __int16 *)(v27 + 16);
  if (v37 < 2)
  {
    LOWORD(i) = 1;
  }
  else
  {
    unsigned __int16 v38 = (_DWORD *)v28 + 25;
    for (unint64_t i = 1; i < v37; ++i)
    {
      if (v32 != *(v38 - 1)) {
        break;
      }
      if (*v38) {
        break;
      }
      if (v33 != *(v38 - 3)) {
        break;
      }
      if (v34 <= *(v38 - 2)) {
        break;
      }
      v38 += 16;
    }
  }
  LOWORD(v117) = i;
  cstdlib_memmove(&v28[4 * (unint64_t)(unsigned __int16)i + 4], &v28[4 * (unint64_t)(unsigned __int16)i], (v37 - (unsigned __int16)i) << 6);
  uint64_t v89 = &v28[4 * (unint64_t)(unsigned __int16)v117];
  *(void *)uint64_t v89 = 0;
  *((void *)v89 + 1) = 0;
  *((void *)v89 + 2) = 0x400000000000;
  *((_DWORD *)v89 + 6) = v33;
  *((_DWORD *)v89 + 7) = v34;
  *((_DWORD *)v89 + 8) = v32;
  *(void *)((char *)v89 + 36) = 0;
  *(void *)((char *)v89 + 52) = 0;
  *(void *)((char *)v89 + 44) = 0;
  *((_DWORD *)v89 + 15) = 0;
  uint64_t v90 = v122;
  uint64_t v91 = v123;
  ++*(_WORD *)(v122 + 16);
  int v92 = HIWORD(v117);
  *uint64_t v10 = *(_WORD *)(v91 + 2) * HIWORD(v117);
  if (v24 == 1)
  {
    log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] add blanks (%d) to posRefOffset(%d)", v86, v87, v88, *(unsigned __int16 *)(v91 + 2) * v92);
    int v92 = HIWORD(v117);
    uint64_t v91 = v123;
    *v114 += *(unsigned __int16 *)(v123 + 2) * HIWORD(v117);
    uint64_t v90 = v122;
  }
  if (v7[5])
  {
    unsigned int v93 = *(unsigned __int16 *)(v90 + 16);
  }
  else
  {
    LOWORD(v117) = 1;
    if (*(unsigned __int16 *)(v90 + 16) < 2u) {
      goto LABEL_90;
    }
    unsigned __int16 v94 = 1;
    do
    {
      unint64_t v95 = &v28[4 * (unint64_t)v94];
      unsigned int v96 = *((_DWORD *)v95 + 8);
      unsigned int v97 = *((_DWORD *)v28 + 8);
      if (v96 > v97
        && v96 <= v97 + *(unsigned __int16 *)(v123 + 2) * HIWORD(v117)
        && DWORD1(v28[4 * (unint64_t)v94 + 1]) != 0x4000
        && !*(_DWORD *)v95)
      {
        log_OutText(*(void *)(*(void *)(v115 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] adjust posRefOffset(%d) by %d for leading esc sequences (marker tag=%d %d,%d,%d,%d)", v86, v87, v88, *v114);
        unsigned __int16 v94 = v117;
        uint64_t v98 = &v28[4 * (unint64_t)(unsigned __int16)v117];
        *v114 += *((_DWORD *)v98 + 7);
        *v9 += *((_WORD *)v98 + 14);
        uint64_t v90 = v122;
      }
      LOWORD(v117) = ++v94;
      unsigned int v93 = *(unsigned __int16 *)(v90 + 16);
    }
    while (v93 > v94);
    int v92 = HIWORD(v117);
    uint64_t v91 = v123;
  }
  if (v93 > 1)
  {
    unsigned int v99 = *(unsigned __int16 *)(v91 + 2) * v92;
    uint64_t v100 = v93;
    unsigned int v101 = *((_DWORD *)v28 + 8);
    int v102 = v28 + 6;
    uint64_t v103 = v100 - 1;
    do
    {
      if (*v102 >= v99 + v101) {
        unsigned int v104 = *v102 - v99;
      }
      else {
        unsigned int v104 = v101;
      }
      *int v102 = v104;
      v102 += 16;
      --v103;
    }
    while (v103);
    goto LABEL_91;
  }
LABEL_90:
  unsigned int v99 = *(unsigned __int16 *)(v91 + 2) * v92;
LABEL_91:
  uint64_t result = 0;
  unsigned int v105 = *((_DWORD *)v28 + 9);
  BOOL v106 = v105 >= v99;
  unsigned int v107 = v105 - v99;
  if (!v106) {
    unsigned int v107 = 0;
  }
  *((_DWORD *)v28 + 9) = v107;
  return result;
}

uint64_t sparser_SetReadoutMarkersAsParameters(uint64_t a1, uint64_t a2)
{
  v37[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = 2369789959;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v37[0] = 0;
  v37[1] = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v36) & 0x80000000) != 0
    || (datac_RequestBlock(a2, 1012, 1u, &v35) & 0x80000000) != 0)
  {
    return v4;
  }
  uint64_t v34 = *(void *)(v35 + 8);
  uint64_t v5 = datac_RequestBlock(a2, 1021, 1u, &v35);
  if ((v5 & 0x80000000) != 0) {
    return v5;
  }
  uint64_t v6 = v35;
  LODWORD(v7) = *(unsigned __int16 *)(v35 + 16);
  if (v7 < 2)
  {
LABEL_32:
    uint64_t v31 = 0;
    uint64_t v4 = v5;
    for (unint64_t i = (uint64_t *)&off_264561F18; ; i += 2)
    {
      if (!*(_DWORD *)((char *)v37 + v31))
      {
        uint64_t v19 = paramc_ParamRemove(*(void *)(v36 + 40), *i);
        uint64_t v4 = 0;
        if ((v19 & 0x80000000) != 0 && (v19 & 0x1FFF) != 0x14) {
          break;
        }
      }
      v31 += 4;
      if (v31 == 16) {
        return v4;
      }
    }
    return v19;
  }
  uint64_t v8 = *(void *)(v35 + 8);
  unint64_t v9 = 1;
  while (1)
  {
    unint64_t v10 = v8 + (v9 << 6);
    unsigned int v13 = *(_DWORD *)(v10 + 20);
    uint64_t v12 = (int *)(v10 + 20);
    uint64_t v11 = v13;
    uint64_t v14 = (1 << v13) & 0x1080200080;
    if (v13 > 0x24 || v14 == 0) {
      goto LABEL_31;
    }
    uint64_t v16 = 0;
    uint64_t v17 = (uint64_t *)&off_264561F18;
    while (*((_DWORD *)v17 - 2) != v11)
    {
      v16 += 4;
      v17 += 2;
      if (v16 == 16) {
        goto LABEL_31;
      }
    }
    if (*(_DWORD *)((char *)v37 + v16)) {
      goto LABEL_31;
    }
    unsigned int ArgOfLastOfType = sparser_marker_GetArgOfLastOfType(v8, (unsigned __int16)v9, (unsigned __int16)v7, 0);
    if (sparser_marker_IsReadOutControlDefaultArg(*v12, ArgOfLastOfType, v34, *(_DWORD *)(a1 + 180)))
    {
      uint64_t v19 = paramc_ParamRemove(*(void *)(v36 + 40), *v17);
      uint64_t v5 = 0;
      if ((v19 & 0x80000000) != 0 && (v19 & 0x1FFF) != 0x14) {
        return v19;
      }
      goto LABEL_30;
    }
    int v20 = *v12;
    if (*v12 <= 30) {
      break;
    }
    if (v20 == 36) {
      goto LABEL_27;
    }
    if (v20 == 31)
    {
LABEL_25:
      uint64_t v5 = paramc_ParamSetUInt(*(void *)(v36 + 40), *v17, ArgOfLastOfType);
      if ((v5 & 0x80000000) != 0) {
        return v5;
      }
      log_OutText(*(void *)(v36 + 32), (uint64_t)&modPP_1, 4, 0, (uint64_t)"[SPARSER] SET PARAM marker:%d param=%s val=%u", v21, v22, v23, v11);
    }
LABEL_30:
    *(_DWORD *)((char *)v37 + v16) = 1;
    uint64_t v6 = v35;
LABEL_31:
    ++v9;
    unint64_t v7 = *(unsigned __int16 *)(v6 + 16);
    if (v9 >= v7) {
      goto LABEL_32;
    }
  }
  if (v20 == 7) {
    goto LABEL_25;
  }
  if (v20 != 21) {
    goto LABEL_30;
  }
LABEL_27:
  int v24 = (const char *)(v34 + ArgOfLastOfType);
  size_t v25 = (unsigned __int16)cstdlib_strlen(v24);
  unsigned __int16 v26 = (char *)heap_Calloc(*(void **)(v36 + 8), 1, v25 + 1);
  if (!v26) {
    return 2369789962;
  }
  uint64_t v27 = v26;
  cstdlib_strncpy(v26, v24, v25);
  v27[v25] = 0;
  uint64_t v5 = paramc_ParamSetStr(*(void *)(v36 + 40), *v17, v27);
  if ((v5 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v36 + 32), (uint64_t)&modPP_1, 4, 0, (uint64_t)"[SPARSER] SET PARAM marker:%d param=%s val=%s", v28, v29, v30, v11);
    heap_Free(*(void **)(v36 + 8), (uint64_t)v27);
    goto LABEL_30;
  }
  heap_Free(*(void **)(v36 + 8), (uint64_t)v27);
  return v5;
}

uint64_t sparser_ProcessStart(uint64_t a1, int a2)
{
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) != 0) {
    return 2369789959;
  }
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 180) = a2;
  *(_WORD *)(a1 + 184) = 200;
  uint64_t UInt = paramc_ParamGetUInt(*(void *)(v12 + 40), (uint64_t)"ppmaxmarkersinemptytext", &v11);
  uint64_t result = 0;
  if ((UInt & 0x1FFF) != 0x14)
  {
    if ((UInt & 0x80000000) == 0)
    {
      if (v11 - 1 > 0xFFFD) {
        log_OutPublic(*(void *)(v12 + 32), (uint64_t)&modPP_1, 1820, 0, v4, v5, v6, v7, v10);
      }
      else {
        *(_WORD *)(a1 + 184) = v11;
      }
    }
    return UInt;
  }
  return result;
}

uint64_t sparser_ResetScanPosition(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 168) = a2;
  return 0;
}

uint64_t sparser_GetScanPosition(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sparser_NoteBlockRead(_DWORD *a1)
{
  unsigned int v1 = a1[43];
  if (v1 < a1[42] && v1 > a1[44])
  {
    a1[42] = v1;
    a1[44] = v1;
  }
  return 0;
}

uint64_t sparser_bed_MapPosCur(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v15 = 0;
  if (!a3) {
    return 2369789959;
  }
  unsigned __int16 v14 = 0;
  *a3 = a2;
  LODWORD(result) = bed_GetpElem(a1, 0, &v15);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 0xF) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    uint64_t result = bed_GetcElem(a1, &v14);
    if ((result & 0x80000000) == 0)
    {
      if (!v14) {
        return 0;
      }
      unsigned int v7 = 0;
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = (_DWORD *)(v15 + ((unint64_t)v7 << 6));
        unsigned int v10 = v9[8];
        if (v10 > a2) {
          break;
        }
        BOOL v11 = *v9 == 1 && v7 == 0;
        if (v11 || *v9 == 0)
        {
          unsigned int v13 = *(_DWORD *)(v15 + ((unint64_t)v7 << 6) + 36) + v10;
          if (v13 <= a2 && (!v8 || v8[9] + v8[8] <= v13)) {
            uint64_t v8 = (_DWORD *)(v15 + ((unint64_t)v7 << 6));
          }
        }
        ++v7;
      }
      while (v7 < v14);
      if (v8)
      {
        uint64_t result = 0;
        *a3 += v8[7] + v8[6] - (v8[8] + v8[9]);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sparser_marker_HasGreaterEqualPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 32) <= *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

BOOL sparser_marker_HasStrictlyGreaterPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 32) < *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

BOOL sparser_marker_IsSentenceBoundary(BOOL result, char *__s1)
{
  if (result)
  {
    uint64_t v2 = result;
    int v3 = *(_DWORD *)(result + 20);
    if (((v3 & 0xFFFFFFFE) != 2 || *(_DWORD *)(result + 40) != 1) && v3 != 12 && v3 != 20)
    {
      if (v3 != 36) {
        return v3 == 200;
      }
      if (cstdlib_strcmp(__s1, "vceunkn"))
      {
        int v3 = *(_DWORD *)(v2 + 20);
        return v3 == 200;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sparser_IsSuppressedSentenceBoundary(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    __int16 v7 = *(_WORD *)(a2 + 2);
    __int16 v14 = a3;
    chars_BackScanNChars(*(void *)(a2 + 8), &v14, 1);
    chars_BackScanBlanksX(*(void *)(a2 + 8), &v14, (unsigned __int16)(*(_WORD *)(a2 + 16) * v7));
    chars_ScanNChars(*(void *)(a2 + 8), (unsigned __int16)(*(_WORD *)(a2 + 16) * v7), &v14, 1);
    __int16 v13 = v14;
    chars_ScanBlanks(*(void *)(a2 + 8), &v13, (unsigned __int16)(*(_WORD *)(a2 + 16) * v7));
    uint64_t v8 = *(unsigned __int16 *)(a1 + 16) + 1;
    unint64_t v9 = (_DWORD *)(v6 + 40);
    while (--v8)
    {
      unsigned int v10 = (unsigned __int16)(*(v9 - 2) - *(_DWORD *)(v6 + 32));
      if (v10 > (unsigned __int16)(v13 * v7)) {
        break;
      }
      if (*(v9 - 5) == 3)
      {
        if (*v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v10 >= (unsigned __int16)(v14 * v7);
        }
        int v12 = v11;
      }
      else
      {
        int v12 = 0;
      }
      v9 += 16;
      if (v12) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sparser_marker_IsOfSameType(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
    }
  }
  return result;
}

uint64_t sparser_MatchSb(uint64_t a1, int a2, int a3, uint64_t a4, int a5, __int16 a6, __int16 a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v91 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  long long __b = 0u;
  long long v88 = 0u;
  cstdlib_memset(&__b, 0, 0x40uLL);
  LODWORD(__b) = 1;
  *((void *)&__b + 1) = 0;
  LOWORD(v88) = 0;
  DWORD1(v88) = 2;
  *(void *)&long long v90 = 0;
  DWORD2(v90) = 0;
  *((void *)&v88 + 1) = 0;
  *(void *)&long long v89 = 0;
  DWORD2(v89) = 1;
  uint64_t v14 = 136;
  if (!a2) {
    uint64_t v14 = 120;
  }
  uint64_t v15 = 144;
  if (!a2) {
    uint64_t v15 = 128;
  }
  uint64_t v16 = *(unsigned __int16 *)(a1 + v15);
  uint64_t v84 = *(void *)(a1 + v14);
  uint64_t v17 = *(char **)(a4 + 8);
  uint64_t v75 = a4;
  __int16 v18 = *(_WORD *)(a4 + 2);
  unsigned int v80 = bed_GetpBlock(a8, &v91);
  if ((v80 & 0x80000000) == 0 && v16)
  {
    uint64_t v19 = 0;
    unsigned __int16 v86 = v18 * a7;
    int v83 = (unsigned __int16)(v18 * a7);
    uint64_t v81 = v16;
    uint64_t v74 = a8;
    do
    {
      unsigned int v80 = bed_Goto(a8, a9);
      if ((v80 & 0x80000000) != 0) {
        return v80;
      }
      uint64_t v85 = *(void *)(a1 + 112)
          + *(unsigned int *)(*(void *)(a1 + 104) + 8 * *(unsigned __int16 *)(v84 + 2 * v19));
      int v20 = a5;
      LOWORD(v21) = *(_WORD *)(v75 + 2) * a6;
      while ((unsigned __int16)v21 < v86
           && (nuance_pcre_exec(*(void **)(a1 + 24), *(void *)(a1 + 32), v85, 0, v17, v83, (unsigned __int16)v21, 0, &v96, 30) & 0x80000000) == 0)
      {
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] regex %d matched at pos %u (iSb=%d) %s %d : (of %d)", v22, v23, v24, *(unsigned __int16 *)(v84 + 2 * v19));
        unsigned int v28 = *(unsigned __int8 *)(*(void *)(a1 + 104) + 8 * *(unsigned __int16 *)(v84 + 2 * v19) + 4);
        if (v28 > 0xFD)
        {
          int v31 = 0;
          LOWORD(v21) = v97;
          if (v28 == 255) {
            int v30 = v97 + v20;
          }
          else {
            int v30 = v96 + v20;
          }
          LODWORD(v89) = v30;
        }
        else
        {
          int v29 = *(&v96 + 2 * v28);
          LOWORD(v30) = v29 + v20;
          LODWORD(v89) = v29 + v20;
          int v21 = *(&v96 + ((2 * v28) | 1u));
          int v31 = v21 - v29;
        }
        DWORD1(v89) = v31;
        if (!v17) {
          goto LABEL_65;
        }
        __int16 v32 = v30 - v20;
        unsigned int v33 = (unsigned __int16)(v30 - v20);
        if (v33 >= v86) {
          goto LABEL_65;
        }
        uint64_t v34 = v91;
        unsigned __int16 v94 = v30 - v20;
        if (*(void *)(a1 + 40))
        {
          chars_BackScanNChars((uint64_t)v17, &v94, 1);
          chars_BackScanBlanksX((uint64_t)v17, &v94, v86);
          if (v94)
          {
            unsigned __int16 v95 = 0;
            if (utf8_Utf8CharTo16bit((unsigned __int8 *)&v17[v94], (uint64_t)&v95))
            {
              if (v95 == 65294 || v95 == 46)
              {
                unsigned int v93 = v94;
                uint64_t v35 = *(unsigned __int8 **)(a1 + 64);
                unsigned int v36 = *(unsigned __int16 *)(a1 + 72);
                if (*(_DWORD *)(a1 + 160) == 1) {
                  chars_BackScanNonBlanks((uint64_t)v17, &v93, v35, v36);
                }
                else {
                  chars_BackScan2NonBlanksNonChinese((uint64_t)v17, &v93, v35, v36);
                }
                unsigned int v37 = v94 - v93;
                if (v37 <= 0x3E)
                {
                  unsigned int v58 = v37 + 1;
                  cstdlib_memcpy(__dst, &v17[v93], v37 + 1);
                  __dst[v58] = 0;
                  unsigned int v78 = v93;
                  uint64_t v59 = v94 + 1;
                  unsigned int LogLevel = log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32));
                  if (sparser_IsNonFinalAbbr((void *)a1, (uint64_t)__dst, v78, v59, LogLevel, v61, v62, v63))
                  {
                    int v20 = a5;
                    a8 = v74;
                    goto LABEL_65;
                  }
                  unsigned int v79 = v58;
                  unsigned __int16 v92 = v94 - v93 + 1;
                  chars_BackScanNChars((uint64_t)__dst, &v92, 1);
                  cstdlib_strcpy(v98, "[*]");
                  int v20 = a5;
                  a8 = v74;
                  if (v92)
                  {
                    do
                    {
                      chars_BackScanNChars((uint64_t)__dst, &v92, 1);
                      unsigned int v64 = v79 - v92;
                      cstdlib_memcpy(v99, &__dst[v92], v64);
                      v99[v64] = 0;
                      uint64_t v65 = v93 + v92;
                      uint64_t v66 = v94 + 1;
                      unsigned int v67 = log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32));
                      int IsNonFinalAbbr = sparser_IsNonFinalAbbr((void *)a1, (uint64_t)v98, v65, v66, v67, v68, v69, v70);
                    }
                    while (v92 && !IsNonFinalAbbr);
                    a8 = v74;
                    int v20 = a5;
                    if (IsNonFinalAbbr) {
                      goto LABEL_65;
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v38 = *(void *)(v34 + 8);
        uint64_t v39 = *(unsigned __int16 *)(v34 + 16);
        if (!*(_WORD *)(v34 + 16))
        {
          unsigned __int16 v49 = 0;
          goto LABEL_47;
        }
        BOOL v40 = 0;
        BOOL v41 = 0;
        unsigned int v42 = (int *)(v38 + 32);
        int v43 = *(_DWORD *)(v38 + 32);
        BOOL v44 = (_DWORD *)(v38 + 40);
        uint64_t v45 = *(unsigned __int16 *)(v34 + 16);
        do
        {
          if (*(v44 - 2) - v43 > v33) {
            break;
          }
          int v46 = *(v44 - 5);
          if (v46 == 32)
          {
            BOOL v40 = *v44 == 1;
          }
          else if (v46 == 7)
          {
            BOOL v41 = !v41;
            if (*v44 != 43) {
              BOOL v41 = 0;
            }
          }
          v44 += 16;
          --v45;
        }
        while (v45);
        if (!v41 && !v40)
        {
          uint64_t v47 = 0;
          while (1)
          {
            int v48 = *v42;
            v42 += 16;
            if (v48 - v43 >= v33) {
              break;
            }
            if (v39 == ++v47)
            {
              unsigned __int16 v49 = *(_WORD *)(v34 + 16);
              goto LABEL_47;
            }
          }
          unsigned __int16 v49 = v47;
LABEL_47:
          if (v49 <= v39) {
            uint64_t v50 = *(unsigned __int16 *)(v34 + 16);
          }
          else {
            uint64_t v50 = v49;
          }
          unsigned __int16 v51 = (unsigned int *)(v38 + ((unint64_t)v49 << 6) + 20);
          uint64_t v52 = v50 - v49;
          while (v52 && v51[3] - *(_DWORD *)(v38 + 32) < (unsigned __int16)(v32 + v31))
          {
            unsigned int v53 = *v51;
            v51 += 16;
            uint64_t v54 = (1 << v53) & 0x10004000080;
            BOOL v56 = v53 <= 0x28 && v54 != 0;
            --v52;
            if (v56) {
              goto LABEL_65;
            }
          }
          unsigned int v57 = sparser_bed_InjectMarker(a8, (unsigned int *)&__b, 0, *(_DWORD *)(a1 + 188));
          unsigned int v80 = 0;
          if ((v57 & 0x80000000) != 0) {
            return v57;
          }
          goto LABEL_66;
        }
LABEL_65:
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] EOS insertion blocked (may be in Phon/Multiword, or non-final abbreviation preceeds the boundary)", v25, v26, v27, v73);
LABEL_66:
        uint64_t v16 = v81;
        if (!a3) {
          break;
        }
      }
      ++v19;
    }
    while (v19 != v16);
  }
  return v80;
}

BOOL sparser_marker_HasStrictlySmallerPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2) {
      return *(_DWORD *)(a1 + 32) > *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

uint64_t sparser_IsNonFinalAbbr(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  strcpy(__dst, "is not");
  uint64_t v18 = 0;
  if (a5 >= 5) {
    log_OutText(*(void *)(a1[2] + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] checking if \"%s\" is a Non Final Abbr at pos %lu,%lu", a6, a7, a8, a2);
  }
  char v16 = 0;
  __int16 v17 = -1;
  if (((*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t *, __int16 *, char *))(a1[5] + 96))(a1[6], a1[7], "neosnbs", a2, &v18, &v17, &v16) & 0x80000000) != 0)return 0; {
  if (v17 == 1)
  }
  {
    cstdlib_strcpy(__dst, "is");
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (a5 >= 5) {
    log_OutText(*(void *)(a1[2] + 32), (uint64_t)&modPP_1, 5, 0, (uint64_t)"[SPARSER] \"%s\" %s a Non Final Abbr at pos %lu,%lu", v11, v12, v13, a2);
  }
  return v14;
}

uint64_t sparser_getMaxCharsPerText(uint64_t a1, __int16 *a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (!result
    || (int v6 = 0, result = paramc_ParamGetInt(result, (uint64_t)"maxinputlength", &v6), (result & 0x80000000) != 0))
  {
    __int16 v5 = 750;
  }
  else
  {
    if (v6 >= 0x2710) {
      __int16 v4 = 10000;
    }
    else {
      __int16 v4 = v6;
    }
    if (v6 >= 1) {
      __int16 v5 = v4;
    }
    else {
      __int16 v5 = 1;
    }
  }
  *a2 = v5;
  return result;
}

uint64_t chars_ScanBlankHead(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4, _DWORD *a5, unsigned int a6)
{
  uint64_t result = 2369789959;
  if (a2 && a1 && a5 && (a3 || !a4))
  {
    *a5 = 0;
    if (a6 <= 1)
    {
      uint64_t v13 = *(unsigned __int8 **)(a1 + 8);
      LODWORD(v14) = *(unsigned __int16 *)(a1 + 16);
      if (*(_WORD *)(a1 + 16))
      {
        for (unint64_t i = *(unsigned char **)(a1 + 8); ; unint64_t i = v13)
        {
          if (!utf8_BelongsToSet(2u, i, 0, v14))
          {
            LOWORD(v16) = (_WORD)v13;
            uint64_t v13 = *(unsigned __int8 **)(a1 + 8);
            goto LABEL_15;
          }
          v13 += (unsigned __int16)utf8_determineUTF8CharLength(*v13);
          uint64_t v14 = *(unsigned __int16 *)(a1 + 16);
          if ((uint64_t)&v13[-*(void *)(a1 + 8)] >= v14) {
            break;
          }
        }
        LOWORD(v16) = (_WORD)v13;
        uint64_t v13 = *(unsigned __int8 **)(a1 + 8);
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 8);
      }
LABEL_15:
      unsigned __int16 v17 = v16 - (_WORD)v13;
      *a2 = v17;
      if (*(unsigned __int16 *)(a1 + 16) == v17) {
        *a5 = 1;
      }
    }
    uint64_t result = 0;
    if (a4 && (a6 & 0xFFFFFFFD) == 0)
    {
      *a4 = 0;
      if (*a2 && *(_WORD *)(a3 + 16))
      {
        unint64_t v18 = 0;
        uint64_t v19 = *(void *)(a3 + 8);
        int v22 = *(_DWORD *)(v19 + 32);
        int v20 = (unsigned int *)(v19 + 32);
        int v21 = v22;
        while (1)
        {
          unsigned int v23 = *v20;
          v20 += 16;
          if (v23 >= v21 + *(unsigned __int16 *)(a1 + 2) * *a2) {
            break;
          }
          uint64_t result = 0;
          *a4 = ++v18;
          if (v18 >= *(unsigned __int16 *)(a3 + 16)) {
            return result;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t chars_ScanBlanks(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result)
  {
    if (a2)
    {
      unsigned int v5 = (unsigned __int16)*a2;
      if (v5 < a3)
      {
        int v6 = (unsigned char *)result;
        do
        {
          uint64_t result = utf8_BelongsToSet(2u, v6, (unsigned __int16)v5, a3);
          if (!result) {
            break;
          }
          uint64_t result = utf8_determineUTF8CharLength(v6[(unsigned __int16)*a2]);
          LOWORD(v5) = *a2 + result;
          *a2 = v5;
        }
        while (a3 > (unsigned __int16)v5);
      }
    }
  }
  return result;
}

uint64_t chars_ScanNonBlanks(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result)
  {
    if (a2)
    {
      unsigned int v5 = (unsigned __int16)*a2;
      if (v5 < a3)
      {
        int v6 = (unsigned char *)result;
        do
        {
          uint64_t result = utf8_BelongsToSet(2u, v6, (unsigned __int16)v5, a3);
          if (result) {
            break;
          }
          uint64_t result = utf8_determineUTF8CharLength(v6[(unsigned __int16)*a2]);
          LOWORD(v5) = *a2 + result;
          *a2 = v5;
        }
        while (a3 > (unsigned __int16)v5);
      }
    }
  }
  return result;
}

uint64_t chars_ScanForLineEnd(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = (unsigned __int16)*a2;
      if (v3 < a3)
      {
        do
        {
          if (*(unsigned char *)(result + v3) == 10) {
            break;
          }
          *a2 = ++v3;
        }
        while (a3 != v3);
      }
    }
  }
  return result;
}

uint64_t chars_BackScanBlanks(uint64_t result, _WORD *a2)
{
  if (result && a2)
  {
    unsigned int v3 = (unsigned __int16)*a2;
    unsigned int v6 = v3;
    if (v3)
    {
      __int16 v4 = (unsigned char *)result;
      while (1)
      {
        uint64_t result = utf8_BelongsToSet(2u, v4, v3, (unsigned __int16)*a2);
        __int16 v5 = v6;
        if (!result) {
          break;
        }
        if (v6) {
          --v6;
        }
        uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v4, &v6);
        unsigned int v3 = v6;
        if (!v6) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      __int16 v5 = 0;
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_BackScanBlanksX(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (result && a2)
  {
    unsigned int v5 = (unsigned __int16)*a2;
    unsigned int v8 = v5;
    if (v5)
    {
      unsigned int v6 = (unsigned char *)result;
      while (1)
      {
        uint64_t result = utf8_BelongsToSet(2u, v6, v5, a3);
        __int16 v7 = v8;
        if (!result) {
          break;
        }
        --v8;
        uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v6, &v8);
        unsigned int v5 = v8;
        if (!v8) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      __int16 v7 = 0;
    }
    *a2 = v7;
  }
  return result;
}

uint64_t chars_BackScanToBlank(uint64_t result, _WORD *a2)
{
  if (result && a2)
  {
    unsigned int v3 = (unsigned __int16)*a2;
    unsigned int v6 = v3;
    if (v3)
    {
      __int16 v4 = (unsigned char *)result;
      while (1)
      {
        uint64_t result = utf8_BelongsToSet(2u, v4, v3, (unsigned __int16)*a2);
        __int16 v5 = v6;
        if (result) {
          break;
        }
        if (v6) {
          --v6;
        }
        uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v4, &v6);
        unsigned int v3 = v6;
        if (!v6) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      __int16 v5 = 0;
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_ScanNChars(uint64_t result, uint64_t a2, _WORD *a3, int a4)
{
  if (result && a3)
  {
    int v5 = a4;
    uint64_t v7 = (unsigned __int16)*a3;
    if (a4)
    {
      unsigned int v8 = (unsigned char *)result;
      do
      {
        uint64_t result = utf8_GetNextUtf8OffsetLimit(v8, v7, a2);
        uint64_t v7 = result;
        --v5;
      }
      while ((_WORD)v5);
    }
    *a3 = v7;
  }
  return result;
}

uint64_t chars_BackScanNChars(uint64_t result, _WORD *a2, int a3)
{
  if (result && a2)
  {
    int v4 = a3;
    unsigned int v5 = (unsigned __int16)*a2;
    if (a3 && *a2)
    {
      uint64_t v6 = result;
      do
      {
        unsigned int v7 = v5 - 1;
        uint64_t result = utf8_GetPreviousValidUtf8Offset(v6, &v7);
        --v4;
        unsigned int v5 = v7;
      }
      while ((_WORD)v4 && v7);
    }
    *a2 = v5;
  }
  return result;
}

uint64_t chars_BackScanNonBlanks(uint64_t result, unsigned int *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (result && a2)
  {
    unsigned int v6 = *a2;
    unsigned int v24 = v6;
    if (!v6) {
      goto LABEL_36;
    }
    unsigned int v8 = (unsigned char *)result;
    uint64_t v9 = a4;
    while (1)
    {
      uint64_t result = utf8_BelongsToSet(2u, v8, v6, *a2);
      unsigned int v6 = v24;
      if (result)
      {
LABEL_20:
        unsigned int v10 = *a2;
        goto LABEL_21;
      }
      if (a4) {
        break;
      }
LABEL_19:
      --v24;
      uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v8, &v24);
      unsigned int v6 = v24;
      if (!v24) {
        goto LABEL_20;
      }
    }
    unsigned int v10 = *a2;
    uint64_t v11 = a3;
    uint64_t v12 = v9;
    while (1)
    {
      int v14 = *v11++;
      int v13 = v14;
      BOOL v15 = v24 == v10 && v13 == 46;
      BOOL v16 = v15;
      if (v13 == v8[v24] && !v16) {
        break;
      }
      if (!--v12) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if (v6 >= v10) {
      goto LABEL_36;
    }
    int v18 = utf8_BelongsToSet(2u, v8, v6, v10);
    unsigned int v6 = v24;
    uint64_t result = v8[v24];
    if (!v18)
    {
      if (!a4) {
        goto LABEL_36;
      }
      while (1)
      {
        int v20 = *a3++;
        int v19 = v20;
        BOOL v21 = v24 == *a2 && v19 == 46;
        BOOL v22 = v21;
        if (v19 == result && !v22) {
          break;
        }
        if (!--v9) {
          goto LABEL_36;
        }
      }
    }
    uint64_t result = utf8_determineUTF8CharLength(result);
    unsigned int v6 = v24 + result;
LABEL_36:
    *a2 = v6;
  }
  return result;
}

uint64_t chars_BackScan2NonBlanksNonChinese(uint64_t result, unsigned int *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (result && a2)
  {
    unsigned int v7 = (unsigned char *)result;
    unsigned int v8 = *a2;
    unsigned int v25 = v8;
    if (v8)
    {
      unsigned int v9 = v8;
      while (!a4)
      {
LABEL_18:
        uint64_t result = utf8_BelongsToSet(2u, v7, v9, *a2);
        unsigned int v9 = v25;
        if (!result)
        {
          uint64_t result = utf8_BelongsToSet(0x20u, v7, v25, *a2);
          unsigned int v9 = v25;
          if (!result)
          {
            --v25;
            uint64_t result = utf8_GetPreviousValidUtf8Offset((uint64_t)v7, &v25);
            unsigned int v9 = v25;
            if (v25) {
              continue;
            }
          }
        }
        goto LABEL_23;
      }
      unsigned int v10 = a3;
      uint64_t v11 = a4;
      while (1)
      {
        int v13 = *v10++;
        int v12 = v13;
        BOOL v14 = v9 == v8 && v12 == 46;
        BOOL v15 = v14;
        if (v12 == v7[v9] && !v15) {
          break;
        }
        if (!--v11) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
LABEL_23:
    if (v9 >= *a2) {
      goto LABEL_26;
    }
    int v17 = utf8_BelongsToSet(2u, v7, v9, *a2);
    unsigned int v9 = v25;
    if (!v17)
    {
      unsigned int v18 = *a2;
      if (a4)
      {
        uint64_t v19 = a4;
        while (1)
        {
          int v21 = *a3++;
          int v20 = v21;
          BOOL v22 = v25 == v18 && v20 == 46;
          BOOL v23 = v22;
          if (v20 == v7[v25] && !v23) {
            break;
          }
          if (!--v19) {
            goto LABEL_41;
          }
        }
      }
      else
      {
LABEL_41:
        uint64_t result = utf8_BelongsToSet(0x20u, v7, v25, v18);
        unsigned int v9 = v25;
        if (!result) {
          goto LABEL_26;
        }
      }
    }
    uint64_t result = utf8_determineUTF8CharLength(v7[v9]);
    unsigned int v9 = v25 + result;
LABEL_26:
    *a2 = v9;
  }
  return result;
}

char *chars_BackScanPhraseBoundary(char *result, unsigned char *a2, _WORD *a3)
{
  if (a2 && a3)
  {
    unsigned int v5 = result;
    unsigned int v6 = (unsigned __int16)*a3;
    unsigned int v15 = v6;
    if (!v6) {
      goto LABEL_15;
    }
    while (1)
    {
      int v7 = utf8_BelongsToSet(2u, a2, v6, (unsigned __int16)*a3);
      unsigned int v8 = v15;
      if (!v7) {
        break;
      }
      if (v15) {
        --v15;
      }
      utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
      unsigned int v6 = v15;
      if (!v15) {
        goto LABEL_15;
      }
    }
    if (v15)
    {
      while (1)
      {
        int v9 = utf8_BelongsToSet(2u, a2, v8, (unsigned __int16)*a3);
        unsigned int v10 = v15;
        if (v9) {
          break;
        }
        uint64_t v11 = utf8_strchr(v5, &a2[v15]);
        unsigned int v10 = v15;
        if (v11) {
          break;
        }
        if (v15) {
          --v15;
        }
        utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
        unsigned int v8 = v15;
        if (!v15) {
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      unsigned int v10 = 0;
    }
    uint64_t result = utf8_strchr(v5, &a2[v10]);
    __int16 v12 = v15;
    if (!result)
    {
      if (v15)
      {
        uint64_t v13 = v15;
        do
        {
          BOOL v14 = utf8_strchr(v5, &a2[v13]);
          LODWORD(v13) = v15;
          if (v14) {
            break;
          }
          if (v15) {
            --v15;
          }
          utf8_GetPreviousValidUtf8Offset((uint64_t)a2, &v15);
          uint64_t v13 = v15;
        }
        while (v15);
      }
      else
      {
        LODWORD(v13) = 0;
      }
      uint64_t result = utf8_strchr(v5, &a2[v13]);
      if (result) {
        __int16 v12 = v15;
      }
    }
    *a3 = v12;
  }
  return result;
}

char *eos_BackScanPhraseBoundary(char *result, uint64_t a2, unsigned int a3, unsigned int a4, _WORD *a5)
{
  if (a2 && a5 && *(_DWORD *)a5 > a4)
  {
    unsigned __int16 v9 = *a5 - a4;
    int v7 = (unsigned char *)(a2 + a3);
    uint64_t result = chars_BackScanPhraseBoundary(result, v7, &v9);
    if (v9)
    {
      unsigned int v8 = v9 + a4;
      uint64_t result = (char *)utf8_determineUTF8CharLength(v7[v9]);
      *(_DWORD *)a5 = v8 + result;
    }
  }
  return result;
}

uint64_t tolhp_ObjOpen(_WORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2370838535;
  char __s2 = 0;
  uint64_t v15 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v15) & 0x80000000) == 0)
  {
    *a3 = 0;
    int v7 = (uint64_t *)heap_Alloc(*(void *)(v15 + 8), 40);
    if (!v7) {
      return 2370838538;
    }
    unsigned int v8 = v7;
    cstdlib_memset(v7, 0, 0x28uLL);
    *unsigned int v8 = (uint64_t)a1;
    v8[1] = a2;
    if (!v15) {
      goto LABEL_10;
    }
    int v9 = paramc_ParamGet(*(void *)(v15 + 40), (uint64_t)"langcode", &__s2, 0);
    uint64_t v3 = v9 & (v9 >> 31);
    if ((v9 & (v9 >> 31)) < 0) {
      goto LABEL_10;
    }
    cstdlib_strcpy(__dst, "nts_");
    cstdlib_strcat(__dst, __s2);
    uint64_t v10 = dct_ObjOpen(__dst, a1, a2, v8 + 2);
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v3 = v10;
      if ((v10 & 0x1FFF) != 1) {
        goto LABEL_10;
      }
    }
    cstdlib_strcpy(__s1, "sxm_");
    cstdlib_strcat(__s1, __s2);
    uint64_t v11 = dct_ObjOpen(__s1, a1, a2, v8 + 3);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v3 = v11;
      if ((v11 & 0x1FFF) != 1) {
        goto LABEL_10;
      }
    }
    cstdlib_strcpy(v16, "ipa_");
    cstdlib_strcat(v16, __s2);
    uint64_t v13 = dct_ObjOpen(v16, a1, a2, v8 + 4);
    uint64_t v3 = v13;
    if ((v13 & 0x80000000) != 0)
    {
      if ((v13 & 0x1FFF) != 1)
      {
LABEL_10:
        tolhp_ObjClose((uint64_t)v8);
        return v3;
      }
      uint64_t v3 = 0;
    }
    *a3 = v8;
  }
  return v3;
}

uint64_t tolhp_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    dct_ObjClose(*(void *)(a1 + 32));
    dct_ObjClose(*(void *)(a1 + 24));
    dct_ObjClose(*(void *)(a1 + 16));
    heap_Free(*(void **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t tolhp_ResetDcts(uint64_t a1)
{
  uint64_t result = tolhp_ResetDct((_WORD **)a1, "nts_", (const char ***)(a1 + 16));
  if ((result & 0x80000000) == 0)
  {
    return tolhp_ResetDct((_WORD **)a1, "sxm_", (const char ***)(a1 + 24));
  }
  return result;
}

uint64_t tolhp_ResetDct(_WORD **a1, const char *a2, const char ***a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2370838528;
  uint64_t v10 = 0;
  char __s2 = 0;
  if (!a1) {
    return 2370838535;
  }
  if ((InitRsrcFunction(*a1, (int)a1[1], &v10) & 0x80000000) != 0) {
    return 2370838535;
  }
  if (v10)
  {
    int v7 = paramc_ParamGet(*(void *)(v10 + 40), (uint64_t)"langcode", &__s2, 0);
    if ((v7 & (v7 >> 31)) >= 0)
    {
      cstdlib_strcpy(__dst, a2);
      cstdlib_strcat(__dst, __s2);
      if (*a3) {
        unsigned int v8 = dct_ObjReopen(*a3, __dst);
      }
      else {
        unsigned int v8 = dct_ObjOpen(__dst, *a1, (int)a1[1], (uint64_t *)a3);
      }
      if ((v8 & 0x80001FFF) == 0x80000001) {
        return 0;
      }
      else {
        return v8;
      }
    }
  }
  return v3;
}

uint64_t tolhp_RewritePhonTextInLhp(_WORD **a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v2 = 2370838535;
  uint64_t v57 = 0;
  if (a1 && a2)
  {
    uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v59, 213);
    if ((v5 & 0x80000000) != 0
      || (uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v58, 213), (v5 & 0x80000000) != 0)
      || (uint64_t v5 = datac_RequestBlock(a2, 1012, 1u, &v57), (v5 & 0x80000000) != 0))
    {
      uint64_t v2 = v5;
    }
    else
    {
      if (v57) {
        uint64_t v6 = *(void *)(v57 + 8);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v8 = v58;
      uint64_t v7 = v59;
      int v70 = 0;
      uint64_t v69 = 0x2400000007;
      uint64_t v61 = 0;
      if (!v59 || !v58)
      {
        uint64_t v11 = 2370838535;
        goto LABEL_112;
      }
      uint64_t v9 = bed_Goto(v58, 0);
      if ((v9 & 0x80000000) != 0)
      {
LABEL_111:
        uint64_t v11 = v9;
        goto LABEL_112;
      }
      uint64_t v10 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v69);
      if ((v10 & 0x1FFF) == 0x14)
      {
LABEL_14:
        uint64_t v11 = 0;
        goto LABEL_112;
      }
      uint64_t v11 = v10;
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v11 = bed_GetpElem(v8, 0xFFFFu, &v61);
        if ((v11 & 0x80000000) == 0)
        {
          uint64_t v12 = v61;
          if (v61)
          {
            uint64_t v13 = (const char ***)(a1 + 2);
            BOOL v14 = (const char ***)(a1 + 3);
            BOOL v56 = (const char ***)(a1 + 4);
            while (1)
            {
              __int16 v60 = 1;
              if (*(_DWORD *)(v12 + 20) == 7)
              {
                int v72 = 0;
                uint64_t v71 = 0x3E700000007;
                *(void *)uint64_t v74 = 0;
                *(void *)char __s1 = 0;
                unsigned __int16 v66 = 0;
                unsigned __int16 v65 = 0;
                __int16 v64 = 1;
                *(void *)uint64_t v73 = 0;
                *(void *)int __dst = 0;
                __int16 v62 = 0;
                uint64_t v9 = bed_GetpElem(v8, 0, __s1);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                uint64_t v9 = bed_GetpElem(v8, 0xFFFFu, v74);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                uint64_t v9 = bed_GetiElem(v8, &v66);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                uint64_t v9 = bed_GetcElem(v8, &v65);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_111;
                }
                if (*(void *)v74 && *(_DWORD *)(*(void *)v74 + 20) == 7)
                {
                  int v15 = *(_DWORD *)(*(void *)v74 + 40);
                  if (v15 == 43)
                  {
                    if (*(void *)(*(void *)v74 + 48))
                    {
                      int v16 = *(_DWORD *)(*(void *)v74 + 56);
                      if ((v16 - 2) < 3)
                      {
                        int v15 = v16 + 68;
LABEL_45:
                        __int16 v64 = 1;
                        bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v64);
                        uint64_t v22 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v71);
                        if ((v22 & 0x1FFF) == 0x14)
                        {
                          *(void *)uint64_t v73 = 0;
                        }
                        else
                        {
                          uint64_t v11 = v22;
                          if ((v22 & 0x80000000) != 0) {
                            break;
                          }
                          uint64_t v9 = bed_GetpElem(v8, 0xFFFFu, v73);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                        }
                        uint64_t v9 = bed_GetpElem(v7, 0, __dst);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        uint64_t v9 = bed_GetcElem(v7, &v62);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        int v23 = *(_DWORD *)(*(void *)v74 + 32);
                        int v24 = v23 - *(_DWORD *)(*(void *)__s1 + 32);
                        if (*(void *)v73) {
                          int v25 = *(_DWORD *)(*(void *)v73 + 32) - v23;
                        }
                        else {
                          LOWORD(v25) = v62 - v24;
                        }
                        unsigned __int16 v55 = v25;
                        uint64_t v28 = *(void *)__dst;
                        uint64_t __src = 0;
                        __int16 v67 = 0;
                        if (!*(void *)__dst
                          || (InitRsrcFunction(*a1, (int)a1[1], &__src) & 0x80000000) != 0
                          || (v15 - 70) > 2)
                        {
                          goto LABEL_119;
                        }
                        unsigned __int16 v51 = v24;
                        uint64_t v52 = (unsigned __int16)v24;
                        int v29 = (unsigned char *)(v28 + (unsigned __int16)v24);
                        unsigned int v53 = off_26D212F78[v15 - 70];
                        unsigned int v30 = 0;
                        if (v55)
                        {
                          while (utf8_BelongsToSet(0, v29, v30, v55))
                          {
                            if (v55 == ++v30)
                            {
                              LOWORD(v30) = v55;
                              break;
                            }
                          }
                        }
                        int v31 = &v29[(unsigned __int16)v30];
                        __int16 v32 = v55 - v30;
                        unsigned int v33 = (unsigned __int16)(v55 - v30);
                        if (v33)
                        {
                          __int16 v49 = v32;
                          uint64_t v50 = v13;
                          int v34 = 0;
                          while (utf8_BelongsToSet(0, v31, v33 - 1 + v34, v33))
                          {
                            if (-v33 == --v34)
                            {
                              __int16 v32 = v49;
                              LOWORD(v35) = v49;
                              uint64_t v13 = v50;
                              goto LABEL_82;
                            }
                          }
                          int v35 = -v34;
                          uint64_t v13 = v50;
                          __int16 v32 = v49;
                        }
                        else
                        {
                          LOWORD(v35) = 0;
                        }
LABEL_82:
                        size_t v36 = (unsigned __int16)(v32 - v35);
                        unsigned int v37 = (void *)heap_Alloc(*((void *)__src + 1), v36 + 1);
                        if (!v37)
                        {
                          uint64_t v2 = 2370838538;
LABEL_119:
                          uint64_t v11 = v2;
                          break;
                        }
                        uint64_t v38 = (uint64_t)v37;
                        cstdlib_memcpy(v37, v31, v36);
                        *(unsigned char *)(v38 + v36) = 0;
                        uint64_t v11 = ((uint64_t (*)(_WORD **, uint64_t, void, __int16 *))v53)(a1, v38, 0, &v67);
                        if ((v11 & 0x80000000) != 0 || !v67) {
                          goto LABEL_88;
                        }
                        uint64_t v39 = (char *)heap_Alloc(*((void *)__src + 1), (unsigned __int16)++v67);
                        if (!v39)
                        {
                          LOWORD(v54) = 0;
                          uint64_t v11 = 2370838538;
                          goto LABEL_89;
                        }
                        uint64_t v11 = ((uint64_t (*)(_WORD **, uint64_t, char *, __int16 *))v53)(a1, v38, v39, &v67);
                        if ((v11 & 0x80000000) != 0)
                        {
LABEL_88:
                          uint64_t v39 = 0;
                          LOWORD(v54) = 0;
                        }
                        else
                        {
                          int v54 = Utf8_Utf8NbrOfSymbols(v39) - 1;
                        }
LABEL_89:
                        heap_Free(*((void **)__src + 1), v38);
                        if ((v11 & 0x80000000) != 0) {
                          break;
                        }
                        uint64_t v9 = bed_Remove(v7, v51, v55);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        if ((_WORD)v54)
                        {
                          uint64_t v9 = bed_Goto(v7, v52);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                          uint64_t v9 = bed_Insert(v7, v39, (unsigned __int16)v54);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                        }
                        if (v39)
                        {
                          uint64_t v9 = tolhp_lhp_ObjClose((uint64_t)a1, (uint64_t)v39);
                          if ((v9 & 0x80000000) != 0) {
                            goto LABEL_111;
                          }
                        }
                        int v40 = (unsigned __int16)v54 - v55;
                        *(_DWORD *)(*(void *)__s1 + 36) += v40;
                        *(_DWORD *)(*(void *)v74 + 40) = 43;
                        uint64_t v9 = bed_Goto(v8, v66);
                        if ((v9 & 0x80000000) != 0) {
                          goto LABEL_111;
                        }
                        unsigned int v41 = v65;
                        int v42 = v66 + 1;
                        if (v65 > (unsigned __int16)(v66 + 1))
                        {
                          uint64_t v43 = *(void *)__s1;
                          BOOL v44 = (_DWORD *)(*(void *)v74 + 100);
                          do
                          {
                            unint64_t v45 = *(v44 - 1);
                            uint64_t v46 = *(unsigned int *)(v43 + 32);
                            if (v46 + v52 <= v45)
                            {
                              if (v46 + (unint64_t)(v52 + v55) <= v45)
                              {
                                *(v44 - 1) = v45 + v40;
                              }
                              else
                              {
                                *(v44 - 1) = v46 + v52;
                                if (*(v44 - 4) == 1) {
                                  _DWORD *v44 = (unsigned __int16)v54;
                                }
                              }
                            }
                            ++v42;
                            v44 += 16;
                          }
                          while (v41 > (unsigned __int16)v42);
                        }
                      }
                    }
                  }
                  else if ((v15 - 73) >= 0xFFFFFFFD)
                  {
                    goto LABEL_45;
                  }
                }
              }
              else if (v6)
              {
                __dst[0] = 0;
                uint64_t v17 = v6 + *(unsigned int *)(v12 + 40);
                MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
                if (cstdlib_strcmp((const char *)v17, MarkerArgStr))
                {
                  uint64_t v19 = 0;
                  while (*(unsigned char *)(v17 + v19))
                  {
                    __dst[v19] = *(unsigned char *)(v17 + v19);
                    if (++v19 == 3)
                    {
                      if (*(unsigned char *)(v17 + 3)) {
                        break;
                      }
                      char __dst[3] = 0;
                      goto LABEL_42;
                    }
                  }
                }
                else
                {
                  uint64_t v71 = 0;
                  uint64_t __src = 0;
                  if ((InitRsrcFunction(*a1, (int)a1[1], &v71) & 0x80000000) == 0)
                  {
                    if (v71)
                    {
                      int v20 = paramc_ParamGet(*(void *)(v71 + 40), (uint64_t)"langcode", &__src, 0);
                      if ((v20 & (v20 >> 31)) >= 0)
                      {
                        cstdlib_strncpy(__dst, __src, 4uLL);
LABEL_42:
                        cstdlib_strcpy(__s1, "nts_");
                        cstdlib_strcat(__s1, __dst);
                        uint64_t v21 = *v13 ? dct_ObjReopen(*v13, __s1) : dct_ObjOpen(__s1, *a1, (int)a1[1], (uint64_t *)v13);
                        uint64_t v11 = v21;
                        if ((v21 & 0x80000000) != 0 && (v21 & 0x1FFF) != 1) {
                          break;
                        }
                        cstdlib_strcpy(v74, "sxm_");
                        cstdlib_strcat(v74, __dst);
                        uint64_t v26 = *v14 ? dct_ObjReopen(*v14, v74) : dct_ObjOpen(v74, *a1, (int)a1[1], (uint64_t *)v14);
                        uint64_t v11 = v26;
                        if ((v26 & 0x80000000) != 0 && (v26 & 0x1FFF) != 1) {
                          break;
                        }
                        cstdlib_strcpy(v73, "ipa_");
                        cstdlib_strcat(v73, __dst);
                        uint64_t v27 = *v56 ? dct_ObjReopen(*v56, v73) : dct_ObjOpen(v73, *a1, (int)a1[1], (uint64_t *)v56);
                        uint64_t v11 = v27;
                        if ((v27 & 0x80000000) != 0 && (v27 & 0x1FFF) != 1) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
              __int16 v60 = 1;
              bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v60);
              uint64_t v47 = bed_GoForward(v8, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v69);
              if ((v47 & 0x1FFF) == 0x14) {
                goto LABEL_14;
              }
              uint64_t v11 = v47;
              if ((v47 & 0x80000000) == 0)
              {
                uint64_t v11 = bed_GetpElem(v8, 0xFFFFu, &v61);
                if ((v11 & 0x80000000) == 0)
                {
                  uint64_t v12 = v61;
                  if (v61) {
                    continue;
                  }
                }
              }
              break;
            }
          }
        }
      }
LABEL_112:
      uint64_t v2 = v11;
    }
    if (v58) {
      bed_ObjClose(v58);
    }
    if (v59) {
      bed_ObjClose(v59);
    }
  }
  return v2;
}

uint64_t tolhp_lhp_ObjClose(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) != 0) {
    return 2370838535;
  }
  heap_Free(*(void **)(v4 + 8), a2);
  return 0;
}

uint64_t tolhp_RewriteNts(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1) {
    return tolhp_Rewrite(*(void **)(a1 + 16), a2, a3, a4);
  }
  else {
    return 2370838535;
  }
}

uint64_t tolhp_RewriteSxms(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1) {
    return tolhp_Rewrite(*(void **)(a1 + 24), a2, a3, a4);
  }
  else {
    return 2370838535;
  }
}

uint64_t tolhp_RewriteIpa(uint64_t a1, char *a2, char *a3, _WORD *a4)
{
  if (a1) {
    return tolhp_Rewrite(*(void **)(a1 + 32), a2, a3, a4);
  }
  else {
    return 2370838535;
  }
}

uint64_t tolhp_Rewrite(void *a1, char *__s, char *a3, _WORD *a4)
{
  if (a3) {
    *a3 = 0;
  }
  else {
    *a4 = 0;
  }
  unsigned __int16 v8 = cstdlib_strlen(__s);
  uint64_t result = 0;
  if (a1)
  {
    int v10 = v8;
    if (v8)
    {
      if (__s)
      {
        for (unint64_t i = __s; ; ++i)
        {
          if (*i == 32)
          {
            *unint64_t i = 17;
          }
          else if (!*i)
          {
            break;
          }
        }
      }
      int v12 = 0;
      while (1)
      {
        __sa = 0;
        int LongestMatch = dct_FindLongestMatch(a1, &__s[v12], &__sa);
        if (LongestMatch < 1)
        {
          uint64_t result = 0;
          *a4 = 0;
          return result;
        }
        int v14 = LongestMatch;
        size_t v15 = cstdlib_strlen(__sa);
        if (a3)
        {
          if (v15 + cstdlib_strlen(a3) + 1 > (unsigned __int16)*a4) {
            return 2370838537;
          }
          cstdlib_strcat(a3, __sa);
        }
        else
        {
          *a4 += v15;
        }
        v12 += v14;
        if (v12 >= v10) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t dct_ObjOpen(const char *a1, _WORD *a2, int a3, uint64_t *a4)
{
  uint64_t v18 = 0;
  uint64_t v4 = 2370838535;
  if (!a4) {
    return 2370838535;
  }
  int v17 = 0;
  if ((InitRsrcFunction(a2, a3, &v18) & 0x80000000) != 0) {
    return 2370838535;
  }
  *a4 = 0;
  uint64_t v7 = (void *)heap_Alloc(*(void *)(v18 + 8), 40);
  uint64_t v8 = 2370838538;
  if (v7)
  {
    uint64_t v9 = (uint64_t)v7;
    cstdlib_memset(v7, 0, 0x28uLL);
    *(void *)uint64_t v9 = v18;
    uint64_t v10 = *(void *)(v18 + 8);
    int v11 = cstdlib_strlen(a1);
    int v12 = (char *)heap_Alloc(v10, (v11 + 1));
    *(void *)(v9 + 8) = v12;
    if (!v12) {
      goto LABEL_13;
    }
    cstdlib_strcpy(v12, a1);
    uint64_t v19 = 0;
    if (*(void *)v9)
    {
      uint64_t Object = objc_GetObject(*(void *)(*(void *)v9 + 48), (uint64_t)"FE_DCTLKP", &v19);
      if ((Object & 0x80000000) == 0)
      {
        uint64_t v14 = v19;
        uint64_t v15 = *(void *)(v19 + 8);
        *(void *)(v9 + 16) = v15;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v14 + 16);
        uint64_t v8 = (*(uint64_t (**)(void, void, const char *, int *))(v15 + 72))(*(void *)(v9 + 24), *(void *)(v9 + 32), a1, &v17);
        if ((v8 & 0x80000000) == 0)
        {
          if (v17)
          {
            *a4 = v9;
            return v8;
          }
          uint64_t v8 = 2370838529;
        }
LABEL_13:
        dct_ObjClose(v9);
        return v8;
      }
      uint64_t v4 = Object;
    }
    uint64_t v8 = v4;
    goto LABEL_13;
  }
  return v8;
}

uint64_t dct_ObjClose(uint64_t a1)
{
  uint64_t result = 2370838535;
  if (a1)
  {
    uint64_t v3 = *(void *)a1;
    if (*(void *)a1)
    {
      if (*(void *)(a1 + 16))
      {
        objc_ReleaseObject(*(void *)(v3 + 48), (uint64_t)"FE_DCTLKP");
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        uint64_t v3 = *(void *)a1;
      }
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4)
      {
        heap_Free(*(void **)(v3 + 8), v4);
        uint64_t v3 = *(void *)a1;
      }
      heap_Free(*(void **)(v3 + 8), a1);
      return 0;
    }
  }
  return result;
}

uint64_t dct_ObjReopen(const char **a1, const char *a2)
{
  uint64_t v2 = 2370838535;
  if (a1 && a2)
  {
    size_t v5 = cstdlib_strlen(a1[1]);
    size_t v6 = cstdlib_strlen(a2);
    uint64_t v7 = (char *)a1[1];
    if (v5 < v6)
    {
      uint64_t v8 = (uint64_t *)*((void *)*a1 + 1);
      int v9 = cstdlib_strlen(a2);
      uint64_t v10 = heap_Realloc(v8, (uint64_t)v7, (v9 + 1));
      if (!v10) {
        return 2370838538;
      }
      uint64_t v7 = (char *)v10;
      a1[1] = (const char *)v10;
    }
    cstdlib_strcpy(v7, a2);
    return 0;
  }
  return v2;
}

uint64_t dct_FindLongestMatch(void *a1, char *__s, void *a3)
{
  uint64_t result = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v16 = 0;
  uint64_t v15 = 0;
  __int16 v14 = 0;
  uint64_t v13 = 0;
  if (a1 && __s && a3)
  {
    *a3 = 0;
    unsigned __int16 v7 = cstdlib_strlen(__s);
    if (v7)
    {
      if (v7 <= 0xAu) {
        unsigned __int16 v8 = v7;
      }
      else {
        unsigned __int16 v8 = 10;
      }
      int v9 = v8;
      int64_t v10 = v8;
      cstdlib_memmove(__dst, __s, v8);
      if (v9)
      {
        int64_t v11 = v10;
        while (1)
        {
          __dst[v11] = 0;
          __int16 v14 = 1;
          if (((*(uint64_t (**)(void, void, void, unsigned char *, void **, __int16 *, char *))(a1[2] + 96))(a1[3], a1[4], a1[1], __dst, &v15, &v14, &v16) & 0x80000000) != 0)break; {
          int v12 = v11 - 1;
          }
          if (v11 != 1)
          {
            --v11;
            if (!v14) {
              continue;
            }
          }
          if (!v14) {
            break;
          }
LABEL_20:
          *a3 = *v15;
          return (v12 + 1);
        }
      }
      if ((paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &v13) & 0x80000000) == 0)
      {
        cstdlib_memmove(__dst, __s, v10);
        if (v10)
        {
          while (1)
          {
            __dst[v10] = 0;
            __int16 v14 = 0;
            if (((*(uint64_t (**)(void, void, void, unsigned char *, void **, __int16 *, char *))(a1[2] + 96))(a1[3], a1[4], a1[1], __dst, &v15, &v14, &v16) & 0x80000000) != 0)break; {
            int v12 = v10 - 1;
            }
            if (v10 >= 2)
            {
              --v10;
              if (!v14) {
                continue;
              }
            }
            if (!v14) {
              return 0;
            }
            goto LABEL_20;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t textpar_AllTextProcessed(uint64_t a1)
{
  uint64_t v3 = 0;
  if (!a1) {
    return 1;
  }
  uint64_t v1 = 1;
  if ((datac_RequestBlock(*(void *)(a1 + 16), 1010, 1u, &v3) & 0x80000000) == 0) {
    return *(unsigned int *)(v3 + 20);
  }
  return v1;
}

uint64_t textpar_ClearOutputDataContainers(uint64_t *a1)
{
  uint64_t v7 = 0;
  if (!a1) {
    return 2368741383;
  }
  uint64_t v2 = datac_RequestBlock(a1[2], 1011, 1u, &v7);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v7;
    if (*(unsigned __int16 *)(v7 + 16) >= 2u)
    {
      uint64_t v4 = (uint64_t *)(*(void *)(v7 + 8) + 112);
      unint64_t v5 = 1;
      do
      {
        if (*v4)
        {
          heap_Free(*(void **)(*a1 + 8), *v4);
          *uint64_t v4 = 0;
          uint64_t v3 = v7;
        }
        ++v5;
        v4 += 8;
      }
      while (v5 < *(unsigned __int16 *)(v3 + 16));
    }
    *(_WORD *)(v3 + 16) = 0;
  }
  return v2;
}

uint64_t textpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v5 = 2368741376;
  if (!a1) {
    return 2368741383;
  }
  int v30 = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 24) + 136))(a2, a3, &v30);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)"start textpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1010, (uint64_t)"start textpar_WriteTextAndMarkers()");
  uint64_t v11 = datac_RequestBlock(*(void *)(a1 + 16), 1010, 1u, &v29);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  int v12 = *(unsigned __int16 *)(v29 + 16);
  if (*(_WORD *)(v29 + 16))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(a1 + 24) + 104))(a2, a3, *(void *)(v29 + 8), *(unsigned __int16 *)(v29 + 2) * v12);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    *(_WORD *)(v29 + 16) = 0;
  }
  if ((datac_RequestBlock(*(void *)(a1 + 16), 1012, 1u, &v29) & 0x80000000) != 0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v29 + 8);
  }
  uint64_t v11 = datac_RequestBlock(*(void *)(a1 + 16), 1011, 1u, &v28);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  unsigned int v14 = *(unsigned __int16 *)(v28 + 16);
  if (*(_WORD *)(v28 + 16))
  {
    uint64_t v15 = *(void *)(v28 + 8);
    if (*(_DWORD *)(v15 + 20) == 0x4000)
    {
      if (v12)
      {
        int v16 = 0;
        int v30 = *(_DWORD *)(v15 + 32) - v30;
      }
      else
      {
        int v16 = marker_CheckForEmptyMarkers(v13, *(_DWORD *)(a1 + 76), v15, v14, 0, 0, 0);
        unsigned int v14 = *(unsigned __int16 *)(v28 + 16);
        int v30 = *(_DWORD *)(v15 + 32) - v30;
        if (!v14)
        {
          LODWORD(v24) = 0;
          goto LABEL_36;
        }
      }
      int v27 = v16;
      uint64_t v17 = v14;
      uint64_t v18 = (_DWORD *)(v15 + 32);
      do
      {
        *v18 -= v30;
        v18 += 16;
        --v17;
      }
      while (v17);
      unint64_t v19 = 0;
      int v20 = (void *)(v15 + 40);
      do
      {
        if (marker_hasNonConstCharPtrArg(*((_DWORD *)v20 - 5)))
        {
          uint64_t v21 = *(unsigned int *)v20;
          if (v13) {
            BOOL v22 = v21 == 0xFFFFFFFFLL;
          }
          else {
            BOOL v22 = 1;
          }
          uint64_t v23 = v13 + v21;
          if (v22) {
            uint64_t v23 = 0;
          }
          *int v20 = v23;
        }
        v20 += 8;
        ++v19;
        unint64_t v24 = *(unsigned __int16 *)(v28 + 16);
      }
      while (v19 < v24);
      if (v12) {
        goto LABEL_37;
      }
      if (v24 == 1)
      {
        if (v27 == 1 || *(_DWORD *)(v15 + 20) == 0x4000) {
          goto LABEL_38;
        }
        LODWORD(v24) = 1;
LABEL_37:
        marker_TraceMrk(211, (uint64_t)"PP_TEXT_PARSER", *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)"at end()", 1, v15, v24);
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 24) + 104))(a4, a5, v15, (v24 << 6));
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        return v11;
      }
      int v16 = v27;
LABEL_36:
      if (v16 == 1)
      {
LABEL_38:
        int v25 = textpar_ClearOutputDataContainers((uint64_t *)a1);
        return v25 & (v25 >> 31);
      }
      goto LABEL_37;
    }
  }
  return v5;
}

uint64_t textpar_CheckForEOF(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v9 = 0;
  uint64_t result = (*(uint64_t (**)(void, void, char *, uint64_t *))(a1[3] + 144))(a1[4], a1[5], (char *)&v9 + 4, &v9);
  if ((result & 0x80000000) == 0)
  {
    int v6 = v9;
    int v7 = HIDWORD(v9);
    if (a2 && a3)
    {
      *a2 = HIDWORD(v9);
      *a3 = v6;
    }
    if (v7) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v6 == 0;
    }
    if (v8) {
      return result;
    }
    else {
      return 2368741399;
    }
  }
  return result;
}

uint64_t textpar_ClassOpen(_WORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v9 = 0;
  if ((InitRsrcFunction(a1, a2, &v9) & 0x80000000) != 0) {
    return 2368741383;
  }
  int v6 = (uint64_t *)heap_Calloc(*(void **)(v9 + 8), 1, 16);
  if (!v6) {
    return 10;
  }
  *int v6 = v9;
  *a3 = v6;
  uint64_t v7 = escseqs_ClassOpen(a1, a2, v6 + 1);
  if ((v7 & 0x80000000) != 0) {
    textpar_ClassClose(*a3);
  }
  return v7;
}

uint64_t textpar_ClassClose(uint64_t *a1)
{
  if (!a1) {
    return 2368741383;
  }
  uint64_t v2 = *a1;
  uint64_t v3 = escseqs_ClassClose(a1[1]);
  if ((v3 & 0x80000000) == 0) {
    heap_Free(*(void **)(v2 + 8), (uint64_t)a1);
  }
  return v3;
}

uint64_t textpar_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v22 = 0;
  int v20 = 0;
  uint64_t v6 = 2368741383;
  if (a1)
  {
    if (a5)
    {
      long long v21 = 0uLL;
      if ((InitRsrcFunction(a2, a3, &v22) & 0x80000000) == 0)
      {
        *a5 = 0;
        uint64_t v13 = (void *)heap_Alloc(*(void *)(v22 + 8), 120);
        if (v13)
        {
          unsigned int v14 = v13;
          cstdlib_memset(v13, 0, 0x78uLL);
          *unsigned int v14 = v22;
          v14[1] = a1;
          v14[3] = a4;
          v14[11] = 0;
          *((_DWORD *)v14 + 19) = 0;
          *((_DWORD *)v14 + 29) = a6;
          if ((int)paramc_ParamGetUInt(*(void *)(v22 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v20) < 0) {
            unsigned __int16 v15 = 30;
          }
          else {
            unsigned __int16 v15 = v20;
          }
          if ((int)paramc_ParamGetUInt(*(void *)(v22 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v20) < 0) {
            __int16 v16 = 50;
          }
          else {
            __int16 v16 = v20;
          }
          uint64_t v17 = extdata_ObjOpen(a2, a3, v14 + 11, 211);
          if ((v17 & 0x80000000) != 0
            || (v14[12] = 0,
                *((_DWORD *)v14 + 26) = 0,
                uint64_t v17 = nuance_pcre_ObjOpen(a2, a3, (uint64_t)&v21),
                (v17 & 0x80000000) != 0)
            || (uint64_t v17 = nuance_pcre_Init((void *)v21, SDWORD2(v21), v15, v16), (v17 & 0x80000000) != 0)
            || (*((_OWORD *)v14 + 6) = v21,
                uint64_t v17 = escseqs_ObjOpen(*(void *)(v14[1] + 8), a2, a3, v14[12], v14[13], v14 + 10),
                (v17 & 0x80000000) != 0)
            || (uint64_t v17 = datac_ObjOpen(a2, a3, v14 + 2, 211), (v17 & 0x80000000) != 0))
          {
            uint64_t v6 = v17;
          }
          else
          {
            uint64_t v18 = 0;
            while (1)
            {
              uint64_t v6 = datac_RegisterBlock(v14[2], (unsigned __int16)aMETA[v18], (unsigned __int16)aMETA[v18 + 1], (unsigned __int16)aMETA[v18 + 2]);
              if ((v6 & 0x80000000) != 0) {
                break;
              }
              v18 += 3;
              if (v18 == 12)
              {
                *a5 = v14;
                return v6;
              }
            }
          }
          textpar_ObjClose(v14);
        }
        else
        {
          return 2368741386;
        }
      }
    }
  }
  return v6;
}

uint64_t textpar_ObjClose(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  if (v3)
  {
    datac_ObjClose(v3);
    a1[2] = 0;
  }
  uint64_t v4 = a1[11];
  if (v4)
  {
    extdata_ObjClose(v4);
    a1[11] = 0;
  }
  uint64_t v5 = a1[10];
  if (v5) {
    escseqs_ObjClose(v5);
  }
  uint64_t NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(a1[12], a1[13], NullHandle, v7))
  {
    nuance_pcre_DeInit((void *)a1[12], a1[13]);
    nuance_pcre_ObjClose(a1[12], a1[13]);
    a1[12] = 0;
    *((_DWORD *)a1 + 26) = 0;
  }
  ppParam_ClearAllPPParameters(v2);
  heap_Free(*(void **)(v2 + 8), (uint64_t)a1);
  return 0;
}

uint64_t textpar_ObjReopen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 2368741383;
  uint64_t v12 = 0;
  char __s1 = 0;
  if (a3)
  {
    uint64_t v11 = 0;
    if ((InitRsrcFunction(a1, a2, &v12) & 0x80000000) == 0)
    {
      uint64_t v7 = v12;
      *a3 = v12;
      if ((paramc_ParamGetStr(*(void *)(v7 + 40), (uint64_t)"component_stop_not_reset", &__s1) & 0x80000000) == 0
        && __s1
        && !cstdlib_strcmp(__s1, "yes"))
      {
        escseqs_SetPosInOut(a3[10], 0, 0);
        paramc_ParamSetStr(*(void *)(v12 + 40), (uint64_t)"component_stop_not_reset", "");
      }
      uint64_t v8 = extdata_FreeData(a3[11]);
      if ((v8 & 0x80000000) != 0
        || (escseqs_GetPosInOut(a3[10], (_DWORD *)&v11 + 1, &v11), a3[10])
        && (uint64_t v8 = escseqs_ObjClose(a3[10]), (v8 & 0x80000000) != 0))
      {
        uint64_t v3 = v8;
      }
      else
      {
        uint64_t v3 = escseqs_ObjOpen(*(void *)(a3[1] + 8), a1, a2, a3[12], a3[13], a3 + 10);
        if ((v3 & 0x80000000) == 0)
        {
          escseqs_SetPosInOut(a3[10], SHIDWORD(v11), v11);
          return v3;
        }
      }
      textpar_ObjClose(a3);
    }
  }
  return v3;
}

uint64_t textpar_ProcessStart(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0;
  if (!a1) {
    return 2368741383;
  }
  *(void *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 112) = log_GetLogLevel(*(void *)(*(void *)a1 + 32)) > 4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t result = escseqs_ProcessStart(*(void *)(a1 + 80), (_DWORD *)(a1 + 76));
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"ppspellpausevalue", *(_DWORD *)(a1 + 76));
    if ((result & 0x80000000) == 0)
    {
      uint64_t v5 = 0;
      while (1)
      {
        uint64_t result = datac_RequestBlock(*(void *)(a1 + 16), (unsigned __int16)aMETA[v5], 1u, &v7);
        if ((result & 0x80000000) != 0) {
          break;
        }
        v5 += 3;
        uint64_t v6 = v7;
        *(_WORD *)(v7 + 16) = 0;
        *(_DWORD *)(v6 + 20) = 0;
        if (v5 == 12) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t textpar_ProcessEnd()
{
  return 0;
}

uint64_t textpar_Process(uint64_t a1)
{
  if (a1)
  {
    if (!*(_DWORD *)(a1 + 116)
      || (*(void *)(a1 + 56) = 0,
          *(void *)(a1 + 64) = 0,
          *(_DWORD *)(a1 + 72) = 0,
          uint64_t v2 = escseqs_ProcessStart(*(void *)(a1 + 80), (_DWORD *)(a1 + 76)),
          (v2 & 0x80000000) == 0))
    {
      uint64_t v61 = 0;
      if (*(_DWORD *)(a1 + 56))
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          int v4 = datac_RequestBlock(*(void *)(a1 + 16), (unsigned __int16)aTAG[i], 1u, &v61);
          if (i != 2 && (v4 & 0x80000000) == 0) {
            *(_WORD *)(v61 + 16) = 0;
          }
        }
        goto LABEL_23;
      }
      uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1011, 1u, &v61);
      if ((v2 & 0x80000000) == 0)
      {
        uint64_t v6 = v61;
        if (*(unsigned __int16 *)(v61 + 16) >= 2u)
        {
          uint64_t v7 = (uint64_t *)(*(void *)(v61 + 8) + 112);
          unint64_t v8 = 1;
          do
          {
            if (*v7)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), *v7);
              *uint64_t v7 = 0;
              uint64_t v6 = v61;
            }
            ++v8;
            v7 += 8;
          }
          while (v8 < *(unsigned __int16 *)(v6 + 16));
        }
        for (uint64_t j = 0; j != 4; ++j)
        {
          int v10 = datac_RequestBlock(*(void *)(a1 + 16), (unsigned __int16)aAllTAG[j], 1u, &v61);
          if (j != 3 && (v10 & 0x80000000) == 0) {
            *(_WORD *)(v61 + 16) = 0;
          }
        }
LABEL_23:
        uint64_t v2 = textpar_CheckForEOF((void *)a1, 0, 0);
        if ((v2 & 0x80000000) == 0)
        {
          unsigned int v14 = (int *)(a1 + 60);
          unsigned __int16 v15 = "PP_TEXT_PARSER";
          __int16 v16 = "entering textpar_loc_GetTextBlock(bBlockHasBeenRead=%d,bBlockMoreTextRequest=%d,bMoreTextRequest=%d)";
          uint64_t v17 = "AFTER textpar_loc_GetTextBlock";
          uint64_t v18 = "BEFORE escseqs_Process TEXTPAR_OUT_MRK_BLOCK";
          unint64_t v19 = "BEFORE escseqs_Process TEXTPAR_OUT_TXT_BLOCK";
          while (1)
          {
            uint64_t v61 = 0;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v15, 5, 0, (uint64_t)v16, v11, v12, v13, *(unsigned int *)(a1 + 56));
            if (!*(_DWORD *)(a1 + 56) || !*(_DWORD *)(a1 + 72) && *(_DWORD *)(a1 + 68) == 1)
            {
              size_t __n = 0;
              int v20 = *(_DWORD *)(a1 + 60);
              uint64_t v2 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 24) + 88))(*(void *)(a1 + 32), *(void *)(a1 + 40), a1 + 48, a1 + 60);
              if ((v2 & 0x80000000) != 0) {
                return v2;
              }
              *(_DWORD *)(a1 + 56) = 1;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v15, 5, 0, (uint64_t)"pfReadDirectStart returns cTextBytesInStream %u bytes", v21, v22, v23, *(unsigned int *)(a1 + 60));
              uint64_t UInt = paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"ppresetlen", (unsigned int *)&__n);
              if ((UInt & 0x1FFF) == 0x14)
              {
                uint64_t v28 = 0;
                LODWORD(__n) = 0;
              }
              else
              {
                uint64_t v5 = UInt;
                if ((UInt & 0x80000000) != 0) {
                  return v5;
                }
                uint64_t v28 = __n;
              }
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v15, 5, 0, (uint64_t)"SSFT_PARAMC_PP_RESETLEN len is %u bytes", v25, v26, v27, v28);
              if (__n)
              {
                uint64_t v2 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 24) + 136))(*(void *)(a1 + 32), *(void *)(a1 + 40), (char *)&__n + 4);
                if ((v2 & 0x80000000) != 0) {
                  return v2;
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)v15, 5, 0, (uint64_t)"pfGetPosition is %u bytes - sync marker position", v29, v30, v31, HIDWORD(__n));
                if (!*(_DWORD *)(a1 + 68))
                {
                  uint64_t v2 = escseqs_SetMarkerSyncPos(*(void *)(a1 + 80), SHIDWORD(__n));
                  if ((v2 & 0x80000000) != 0) {
                    return v2;
                  }
                }
              }
              else
              {
                uint64_t v2 = escseqs_SetReset(*(void *)(a1 + 80));
                if ((v2 & 0x80000000) != 0) {
                  return v2;
                }
              }
              if (*(_DWORD *)(a1 + 68) == 1 && v20 && v20 == *v14) {
                *(_DWORD *)(a1 + 72) = 1;
              }
              else {
                *(_DWORD *)(a1 + 68) = 0;
              }
            }
            uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1000, 1u, &v61);
            if ((v2 & 0x80000000) != 0) {
              return v2;
            }
            int v32 = *v14;
            if (*(_DWORD *)(v61 + 20)) {
              break;
            }
            int v33 = *(_DWORD *)(a1 + 64);
            unsigned int v34 = v32 - v33;
            if (v32 == v33)
            {
              if (!*(_DWORD *)(a1 + 72) && !*(_DWORD *)(a1 + 68))
              {
                *(_DWORD *)(a1 + 68) = 1;
                if (!v32) {
                  return 2368743424;
                }
                if (!*(_DWORD *)(a1 + 116)) {
                  return 2368743424;
                }
                uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40));
                if ((v2 & 0x80000000) == 0) {
                  return 2368743424;
                }
                return v2;
              }
              *(_DWORD *)(v61 + 20) = 1;
            }
            else
            {
              uint64_t v35 = (uint64_t)v15;
              size_t v36 = v19;
              unsigned int v37 = v18;
              uint64_t v38 = v16;
              uint64_t v39 = v17;
              if (*(_DWORD *)(a1 + 116)) {
                unsigned __int16 v40 = v32 - v33;
              }
              else {
                unsigned __int16 v40 = 128;
              }
              uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1000, v40, &v61);
              if ((v2 & 0x80000000) != 0) {
                return v2;
              }
              uint64_t v41 = v61;
              if (*(_WORD *)(v61 + 16))
              {
                uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1000, (unsigned __int16)(*(_WORD *)(v61 + 16) + v40), &v61);
                if ((v2 & 0x80000000) != 0) {
                  return v2;
                }
                uint64_t v41 = v61;
              }
              uint64_t v42 = *(void *)(v41 + 8);
              if (v34 <= v40)
              {
                HIDWORD(__n) = v34;
              }
              else
              {
                HIDWORD(__n) = v40;
                utf8_GetPreviousValidUtf8Offset(*(void *)(a1 + 48) + *(unsigned int *)(a1 + 64), (unsigned int *)&__n + 1);
                log_OutText(*(void *)(*(void *)a1 + 32), v35, 5, 0, (uint64_t)"adjust bytes read to align with character boundary (IN=%d, OUT=%d)", v43, v44, v45, v40);
                uint64_t v41 = v61;
                unsigned int v34 = HIDWORD(__n);
              }
              uint64_t v17 = v39;
              __int16 v16 = v38;
              uint64_t v18 = v37;
              unint64_t v19 = v36;
              cstdlib_memcpy((void *)(v42 + *(unsigned __int16 *)(v41 + 16)), (const void *)(*(void *)(a1 + 48) + *(unsigned int *)(a1 + 64)), v34);
              if (!utf8_CheckValid(v42 + *(unsigned __int16 *)(v61 + 16), HIDWORD(__n)))
              {
                log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 1933, (uint64_t)"%s%s", v46, v47, v48, v49, "Invalid UTF-8 character sequence discovered");
                return 2368741637;
              }
              __int16 v50 = WORD2(__n);
              *(_DWORD *)(a1 + 64) += HIDWORD(__n);
              *(_WORD *)(v61 + 16) += v50;
              unsigned __int16 v15 = (const char *)v35;
            }
            if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)a1 + 32)) && !*(_DWORD *)(a1 + 68)) {
              log_OutTraceTuningDataBinary(*(void *)(*(void *)a1 + 32), 32, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
            }
                *(void *)(a1 + 48),
                *(unsigned int *)(a1 + 60));
            if (*(_DWORD *)(a1 + 116) == 1)
            {
              *(unsigned char *)(*(void *)(a1 + 48) + *(unsigned int *)(a1 + 64)) = 0;
              uint64_t v2 = paramc_ParamSetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"rettt_rewritten_text", *(char **)(a1 + 48));
              if ((v2 & 0x80000000) != 0) {
                return v2;
              }
            }
            marker_TraceTxt(211, (uint64_t)v15, *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1000, (uint64_t)v17);
            marker_TraceMrk(211, (uint64_t)v15, *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)v18, 0, 0, 0);
            marker_TraceTxt(211, (uint64_t)v15, *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1010, (uint64_t)v19);
            uint64_t v5 = escseqs_Process(*(void *)(a1 + 80), *(void *)(a1 + 16));
            marker_TraceMrk(211, (uint64_t)v15, *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1011, (uint64_t)"AFTER escseqs_Process TEXTPAR_OUT_MRK_BLOCK", 0, 0, 0);
            marker_TraceTxt(211, (uint64_t)v15, *(_DWORD *)(a1 + 112), *(void *)a1, *(void *)(a1 + 16), 1010, (uint64_t)"AFTER escseqs_Process TEXTPAR_OUT_TXT_BLOCK");
            if ((v5 & 0x1FFF) != 9)
            {
              if ((v5 & 0x80000000) != 0) {
                return v5;
              }
              uint64_t v61 = 0;
              uint64_t v2 = datac_RequestBlock(*(void *)(a1 + 16), 1010, 1u, &v61);
              if ((v2 & 0x80000000) == 0)
              {
                if (*(_WORD *)(v61 + 16) && *(_DWORD *)(a1 + 112) == 1)
                {
                  if (*(unsigned __int16 *)(v61 + 16) >= 0x400u) {
                    size_t v51 = 1024;
                  }
                  else {
                    size_t v51 = *(unsigned __int16 *)(v61 + 16);
                  }
                  uint64_t v52 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v51 + 1));
                  if (!v52) {
                    return 2368741386;
                  }
                  uint64_t v53 = (uint64_t)v52;
                  cstdlib_strncpy(v52, *(const char **)(v61 + 8), v51);
                  *(unsigned char *)(v53 + v51) = 0;
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_TEXT_PARSER", 5, 0, (uint64_t)"(Txt) (text processed) (tag=%d) len=%d (UTF8 *) \"%s\"", v54, v55, v56, 1010);
                  heap_Free(*(void **)(*(void *)a1 + 8), v53);
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v61 = 0;
                uint64_t v2 = datac_RequestBlock(v57, 1011, 1u, &v61);
                if ((v2 & 0x80000000) == 0)
                {
                  uint64_t v2 = marker_loc_FilterSyncMarkers(v61);
                  if ((v2 & 0x80000000) == 0)
                  {
                    if (!*(_DWORD *)(a1 + 116)) {
                      return 0;
                    }
                    uint64_t v2 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 60));
                    if ((v2 & 0x80000000) == 0) {
                      return 0;
                    }
                  }
                }
              }
              return v2;
            }
          }
          if (!v32
            || (uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40)), (v2 & 0x80000000) == 0))
          {
            int v58 = ppParam_ClearAllPPParameters(*(void *)a1);
            if (v58 < 0) {
              return v58;
            }
            else {
              return 2368741399;
            }
          }
        }
      }
    }
    return v2;
  }
  return 2368741383;
}

uint64_t pp_text_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2368741377;
  }
  uint64_t result = 0;
  *a2 = &IPPTextParser;
  return result;
}

uint64_t pp_text_parser_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2368741383;
  uint64_t v11 = 0;
  if (a3)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v11);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *(void *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
      uint64_t v8 = heap_Calloc(*(void **)(v11 + 8), 1, 16);
      if (v8)
      {
        uint64_t v9 = v8;
        *(void *)uint64_t v8 = v11;
        uint64_t v3 = textpar_ClassOpen(a1, a2, (uint64_t **)(v8 + 8));
        if ((v3 & 0x80000000) != 0)
        {
          pp_text_parser_ClassClose(*(void *)a3, *(void *)(a3 + 8));
        }
        else
        {
          *(void *)a3 = v9;
          *(_DWORD *)(a3 + 8) = 29953;
        }
      }
      else
      {
        return 2368741386;
      }
    }
  }
  return v3;
}

uint64_t pp_text_parser_ClassClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 29953, 16);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = textpar_ClassClose(*(uint64_t **)(a1 + 8));
  if ((v5 & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), a1);
    safeh_GetNullHandle();
  }
  return v5;
}

uint64_t pp_text_parser_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v5 = 2368741383;
  uint64_t v21 = 0;
  if (a5 && a1)
  {
    uint64_t v10 = safeh_HandleCheck(a1, a2, 29953, 16);
    if ((v10 & 0x80000000) != 0)
    {
      return v10;
    }
    else if ((InitRsrcFunction(a3, a4, &v23) & 0x80000000) == 0)
    {
      unsigned int v14 = v23;
      uint64_t v15 = v23[4];
      if (v15)
      {
        log_OutText(v15, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjOpen", v11, v12, v13, v20);
        unsigned int v14 = v23;
      }
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      __int16 v16 = (void *)heap_Alloc(v14[1], 96);
      if (v16)
      {
        uint64_t v17 = (uint64_t)v16;
        cstdlib_memset(v16, 0, 0x60uLL);
        *(void *)uint64_t v17 = a3;
        *(void *)(v17 + 8) = a4;
        *(_DWORD *)(v17 + 88) = 0;
        *(void *)(v17 + 16) = a1;
        uint64_t Object = objc_GetObject(v23[6], (uint64_t)"SYNTHSTREAM", &v22);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_17;
        }
        *(void *)(v17 + 24) = *(void *)(v22 + 8);
        *(_DWORD *)(v17 + 88) = 0;
        if ((paramc_ParamGetStr(v23[5], (uint64_t)"clcpppipelinemode", &v21) & 0x80000000) == 0 && v21 && *v21) {
          *(_DWORD *)(v17 + 88) = 1;
        }
        uint64_t Object = textpar_ObjOpen(*(void *)(a1 + 8), a3, a4, *(void *)(v17 + 24), (void *)(v17 + 80), *(_DWORD *)(v17 + 88));
        if ((Object & 0x80000000) != 0)
        {
LABEL_17:
          uint64_t v5 = Object;
          pp_text_parser_ObjClose(v17, 24357);
        }
        else
        {
          uint64_t v5 = 0;
          *(void *)a5 = v17;
          *(void *)(a5 + 8) = 24357;
        }
      }
      else
      {
        return 2368741386;
      }
    }
  }
  return v5;
}

uint64_t pp_text_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = 2368741383;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjClose", v4, v5, v6, v11);
    }
    uint64_t v8 = *(uint64_t **)(a1 + 80);
    if (v8) {
      textpar_ObjClose(v8);
    }
    uint64_t v9 = v12;
    if (*(void *)(a1 + 24))
    {
      objc_ReleaseObject(*(void *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      uint64_t v9 = v12;
    }
    heap_Free(*(void **)(v9 + 8), a1);
    return 0;
  }
  return v3;
}

uint64_t pp_text_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = 2368741383;
  uint64_t v13 = 0;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1)
  {
    uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v8 = inited;
      uint64_t v9 = *(void *)(v13 + 32);
      if (v9) {
        log_OutText(v9, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ObjReopen", v5, v6, v7, v12);
      }
      uint64_t v10 = *(uint64_t **)(a1 + 80);
      if (v10)
      {
        uint64_t v3 = textpar_ObjReopen(*(_WORD **)a1, *(void *)(a1 + 8), v10);
        if ((v3 & 0x80000000) != 0) {
          *(void *)(a1 + 80) = 0;
        }
      }
      else
      {
        return v8;
      }
    }
  }
  return v3;
}

uint64_t pp_text_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = 0;
  uint64_t v7 = 2368741383;
  if ((safeh_HandleCheck(a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v35) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v35 + 32);
    if (v11) {
      log_OutText(v11, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ProcessStart", v8, v9, v10, v33);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 24) + 64))(a3, a4, 211, "text/plain;charset=utf-8",
            0,
            0,
            a1 + 32);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v27 = v12;
      unsigned int v34 = 0;
      if ((paramc_ParamGetStr(*(void *)(v35 + 40), (uint64_t)"inputmimetype", &v34) & 0x80000000) == 0 && v34 && *v34)
      {
        log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1903, (uint64_t)"%s%s", v28, v29, v30, v31, "mimeContentType");
        return 2368741643;
      }
      else
      {
        log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1900, 0, v28, v29, v30, v31, v33);
        return v27;
      }
    }
    else
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 24) + 64))(a3, a4, 211, "text/plain;charset=utf-8",
              0,
              2,
              a1 + 48);
      if ((v13 & 0x80000000) != 0)
      {
        uint64_t v7 = v13;
        log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1901, (uint64_t)"%s%s", v14, v15, v16, v17, "mimeType");
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 24);
        unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v18 + 64);
        uint64_t v20 = (*(uint64_t (**)(void))(v18 + 168))();
        uint64_t v21 = v19(a3, a4, 211, "application/x-realspeak-int-markers-pp;version=4.0", v20, 1, a1 + 64);
        if ((v21 & 0x80000000) != 0)
        {
          uint64_t v7 = v21;
          log_OutPublic(*(void *)(v35 + 32), (uint64_t)"PP_TEXT_PARSER", 1902, 0, v22, v23, v24, v25, v33);
        }
        else
        {
          int v26 = textpar_ProcessStart(*(void *)(a1 + 80), *(void *)(a1 + 32), *(void *)(a1 + 40));
          return v26 & (v26 >> 31);
        }
      }
    }
  }
  return v7;
}

uint64_t pp_text_parser_Process(_WORD **a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = 2368741383;
  uint64_t v24 = 0;
  int v23 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1)
  {
    if (!a1[4]) {
      return 2368741393;
    }
    int v22 = 0;
    if ((InitRsrcFunction(*a1, (int)a1[1], &v24) & 0x80000000) == 0)
    {
      uint64_t v11 = *(void *)(v24 + 32);
      if (v11) {
        log_OutText(v11, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_Process", v8, v9, v10, v21);
      }
      *a5 = 2;
      uint64_t v12 = textpar_Process((uint64_t)a1[10]);
      uint64_t v7 = v12;
      if ((v12 & 0x80000000) == 0)
      {
        uint64_t v16 = (uint64_t)a1[6];
        if (!v16
          || (uint64_t v7 = textpar_WriteTextAndMarkers((uint64_t)a1[10], v16, (uint64_t)a1[7], (uint64_t)a1[8], (uint64_t)a1[9]),
              (v7 & 0x80000000) == 0))
        {
          if (*((_DWORD *)a1 + 22) || textpar_AllTextProcessed((uint64_t)a1[10]))
          {
            *a5 = 1;
            if (!*((_DWORD *)a1 + 22))
            {
              uint64_t v17 = pp_text_parser_loc_CloseOutStreams(a1);
              if ((v17 & 0x80000000) != 0) {
                return v17;
              }
              uint64_t v7 = 0;
            }
          }
        }
        goto LABEL_30;
      }
      if ((v12 & 0x1FFF) != 0x800)
      {
        if ((v12 & 0x1FFF) != 0x17)
        {
          if (!*((_DWORD *)a1 + 22)) {
            pp_text_parser_loc_CloseOutStreams(a1);
          }
          *a5 = 1;
          goto LABEL_30;
        }
        *a5 = 1;
        uint64_t v18 = pp_text_parser_loc_CloseOutStreams(a1);
        goto LABEL_20;
      }
      *a5 = 0;
      textpar_CheckForEOF(a1[10], &v22, &v23);
      if (v23)
      {
        *a5 = 1;
        uint64_t v18 = pp_text_parser_loc_CloseOutStreams(a1);
        if ((v18 & 0x80000000) != 0)
        {
LABEL_20:
          uint64_t v7 = v18;
          goto LABEL_30;
        }
        LODWORD(v7) = 0;
      }
      if (*((_DWORD *)a1 + 22)) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = 0;
      }
LABEL_30:
      uint64_t v19 = *(void *)(v24 + 32);
      if (v19) {
        log_OutText(v19, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Leaving pp_text_parser_Process peResults=%d fRet=%d", v13, v14, v15, *a5);
      }
    }
  }
  return v7;
}

uint64_t pp_text_parser_ProcessStop(_WORD **a1, int a2)
{
  uint64_t v3 = 2368741383;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 24357, 96) & 0x80000000) != 0) {
    return 2368741384;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_TEXT_PARSER", 4, 0, (uint64_t)"Entering pp_text_parser_ProcessStop", v4, v5, v6, v11);
    }
    uint64_t v8 = textpar_ProcessEnd();
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = pp_text_parser_loc_CloseOutStreams(a1);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v9 = a1[4];
    if (!v9) {
      return 0;
    }
    uint64_t v8 = (*((uint64_t (**)(_WORD *, _WORD *))a1[3] + 9))(v9, a1[5]);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      uint64_t v3 = 0;
      a1[4] = 0;
      *((_DWORD *)a1 + 10) = 0;
    }
  }
  return v3;
}

uint64_t pp_text_parser_loc_CloseOutStreams(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(a1[3] + 72))(v2, a1[9]);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    a1[8] = 0;
    *((_DWORD *)a1 + 18) = 0;
  }
  uint64_t result = a1[6];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(a1[3] + 72))(result, a1[7]);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = 0;
      a1[6] = 0;
      *((_DWORD *)a1 + 14) = 0;
    }
  }
  return result;
}

uint64_t sentpar_clearReadOutParameters(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = paramc_ParamRemove(*(void *)(a1 + 40), *(void *)((char *)&aSENTPARTAG2PARAM + v2 + 8));
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14) {
      break;
    }
    v2 += 16;
    if (v2 == 64) {
      return 0;
    }
  }
  return result;
}

uint64_t sentpar_clearPersistentParameters(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = paramc_ParamRemove(*(void *)(a1 + 40), (uint64_t)off_264561F90[v2]);
    if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 0x14) {
      break;
    }
    if (++v2 == 5) {
      return 0;
    }
  }
  return result;
}

uint64_t sentpar_clearAllParameters(uint64_t a1)
{
  uint64_t result = sentpar_clearReadOutParameters(a1);
  if ((result & 0x80000000) == 0)
  {
    return sentpar_clearPersistentParameters(a1);
  }
  return result;
}

uint64_t sentpar_loc_SetReadoutMarkersAsParameters(int *a1)
{
  _OWORD v34[2] = *MEMORY[0x263EF8340];
  uint64_t v33 = 0;
  v34[0] = 0;
  v34[1] = 0;
  if ((datac_RequestBlock(*((void *)a1 + 1), 1012, 1u, &v33) & 0x80000000) != 0) {
    return 2369789959;
  }
  uint64_t v32 = *(void *)(v33 + 8);
  uint64_t v2 = datac_RequestBlock(*((void *)a1 + 1), 1021, 1u, &v33);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v33;
    LODWORD(v4) = *(unsigned __int16 *)(v33 + 16);
    if (v4 >= 2)
    {
      uint64_t v5 = *(void *)(v33 + 8);
      for (unint64_t i = 1; i < v4; ++i)
      {
        unint64_t v7 = v5 + (i << 6);
        unsigned int v10 = *(_DWORD *)(v7 + 20);
        uint64_t v9 = (int *)(v7 + 20);
        uint64_t v8 = v10;
        uint64_t v11 = (1 << v10) & 0x1080200080;
        if (v10 > 0x24 || v11 == 0) {
          goto LABEL_30;
        }
        uint64_t v13 = 0;
        uint64_t v14 = (uint64_t *)&off_264561FC0;
        while (*((_DWORD *)v14 - 2) != v8)
        {
          v13 += 4;
          v14 += 2;
          if (v13 == 16) {
            goto LABEL_30;
          }
        }
        if (*(_DWORD *)((char *)v34 + v13)) {
          goto LABEL_30;
        }
        unsigned int ArgOfLastOfType = marker_GetArgOfLastOfType(v5, (unsigned __int16)i, (unsigned __int16)v4, 0);
        if (marker_IsReadoutControlDefaultArg(*v9, ArgOfLastOfType, v32, a1[47]))
        {
          uint64_t v16 = paramc_ParamRemove(*(void *)(*(void *)a1 + 40), *v14);
          uint64_t v2 = 0;
          if ((v16 & 0x80000000) != 0 && (v16 & 0x1FFF) != 0x14) {
            return v16;
          }
          goto LABEL_29;
        }
        int v17 = *v9;
        if (*v9 > 30)
        {
          if (v17 == 36)
          {
LABEL_26:
            uint64_t v21 = (const char *)(v32 + ArgOfLastOfType);
            size_t v22 = (unsigned __int16)cstdlib_strlen(v21);
            int v23 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v22 + 1);
            if (!v23) {
              return 2369789962;
            }
            uint64_t v24 = v23;
            cstdlib_strncpy(v23, v21, v22);
            v24[v22] = 0;
            uint64_t v2 = paramc_ParamSetStr(*(void *)(*(void *)a1 + 40), *v14, v24);
            uint64_t v28 = *(void *)a1;
            if ((v2 & 0x80000000) != 0)
            {
              heap_Free(*(void **)(v28 + 8), (uint64_t)v24);
              return v2;
            }
            log_OutText(*(void *)(v28 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"SET PARAM marker:%d param=%s val=%s", v25, v26, v27, v8);
            heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v24);
            goto LABEL_29;
          }
          if (v17 == 31)
          {
LABEL_24:
            uint64_t v2 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), *v14, ArgOfLastOfType);
            if ((v2 & 0x80000000) != 0) {
              return v2;
            }
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"SET PARAM marker:%d param=%s val=%u", v18, v19, v20, v8);
          }
        }
        else
        {
          if (v17 == 7) {
            goto LABEL_24;
          }
          if (v17 == 21) {
            goto LABEL_26;
          }
        }
LABEL_29:
        *(_DWORD *)((char *)v34 + v13) = 1;
        uint64_t v3 = v33;
LABEL_30:
        unint64_t v4 = *(unsigned __int16 *)(v3 + 16);
      }
    }
    uint64_t v29 = 0;
    for (uint64_t j = (uint64_t *)&off_264561FC0; ; j += 2)
    {
      if (!*(_DWORD *)((char *)v34 + v29))
      {
        uint64_t v16 = paramc_ParamRemove(*(void *)(*(void *)a1 + 40), *j);
        uint64_t v2 = 0;
        if ((v16 & 0x80000000) != 0 && (v16 & 0x1FFF) != 0x14) {
          break;
        }
      }
      v29 += 4;
      if (v29 == 16) {
        return v2;
      }
    }
    return v16;
  }
  return v2;
}

uint64_t sentpar_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v19 = 0;
  int v18 = 0;
  uint64_t v5 = 2369789959;
  if (a4 && (InitRsrcFunction(a1, a2, &v19) & 0x80000000) == 0)
  {
    *a4 = 0;
    uint64_t v11 = (void *)heap_Alloc(*(void *)(v19 + 8), 256);
    if (v11)
    {
      uint64_t v12 = v11;
      cstdlib_memset(v11, 0, 0x100uLL);
      *uint64_t v12 = v19;
      long long v12[2] = a3;
      v12[28] = 0;
      *((_DWORD *)v12 + 48) = 0;
      *((_WORD *)v12 + 98) = 0;
      *((_DWORD *)v12 + 60) = a5;
      cstdlib_memset(v12 + 15, 0, 0x40uLL);
      *((_DWORD *)v12 + 35) = 0;
      if ((int)paramc_ParamGetUInt(*(void *)(v19 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v18) < 0) {
        unsigned __int16 v13 = 30;
      }
      else {
        unsigned __int16 v13 = v18;
      }
      if ((int)paramc_ParamGetUInt(*(void *)(v19 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v18) < 0) {
        __int16 v14 = 50;
      }
      else {
        __int16 v14 = v18;
      }
      uint64_t v15 = extdata_ObjOpen(a1, a2, v12 + 28, 212);
      if ((v15 & 0x80000000) == 0)
      {
        v12[26] = 0;
        *((_DWORD *)v12 + 54) = 0;
        uint64_t v15 = nuance_pcre_ObjOpen(a1, a2, (uint64_t)(v12 + 26));
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v15 = nuance_pcre_Init((void *)v12[26], v12[27], v13, v14);
          if ((v15 & 0x80000000) == 0)
          {
            uint64_t v15 = sentpar_loc_OpenParts(a1, a2, v12);
            if ((v15 & 0x80000000) == 0)
            {
              uint64_t v15 = datac_ObjOpen(a1, a2, v12 + 1, 212);
              if ((v15 & 0x80000000) == 0)
              {
                uint64_t v16 = 0;
                while (1)
                {
                  uint64_t v15 = datac_RegisterBlock(v12[1], (unsigned __int16)aMETA_0[v16], (unsigned __int16)aMETA_0[v16 + 1], (unsigned __int16)aMETA_0[v16 + 2]);
                  if ((v15 & 0x80000000) != 0) {
                    break;
                  }
                  v16 += 3;
                  if (v16 == 18)
                  {
                    *a4 = v12;
                    return sentpar_clearAllParameters(v19);
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v5 = v15;
      sentpar_ObjClose(a1, a2, v12);
    }
    else
    {
      return 2369789962;
    }
  }
  return v5;
}

uint64_t sentpar_ObjClose(_WORD *a1, int a2, void *a3)
{
  uint64_t v3 = 2369789959;
  uint64_t v11 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v11) & 0x80000000) == 0)
  {
    uint64_t v5 = a3[1];
    if (v5) {
      datac_ObjClose(v5);
    }
    uint64_t v6 = a3[28];
    if (v6)
    {
      extdata_ObjClose(v6);
      a3[28] = 0;
    }
    uint64_t v7 = a3[25];
    if (v7) {
      sparser_ObjClose(v7);
    }
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a3[26], a3[27], NullHandle, v9))
    {
      nuance_pcre_DeInit((void *)a3[26], a3[27]);
      nuance_pcre_ObjClose(a3[26], a3[27]);
    }
    sentpar_clearAllParameters(v11);
    heap_Free(*(void **)(v11 + 8), (uint64_t)a3);
    return 0;
  }
  return v3;
}

uint64_t sentpar_loc_OpenParts(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = extdata_LoadSpecificData(a3[28], "PPSE", "BRKD", "pp/sent/parser");
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = sparser_ObjOpen(a1, a2, a3[26], a3[27], a3 + 25, a3[28]);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v7 = a3[28];
      return extdata_LoadData(v7, "PPSE", "pp/sent/parser");
    }
  }
  return result;
}

uint64_t sentpar_ObjReopen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 2369789959;
  char __s1 = 0;
  uint64_t v13 = 0;
  if (a3)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v13);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v8 = inited;
      if ((paramc_ParamGetStr(*(void *)(v13 + 40), (uint64_t)"pipelineswitchcomponent", &__s1) & 0x80000000) != 0
        || !__s1
        || (uint64_t v3 = v8, !cstdlib_strcmp(__s1, "pp/sent_parser")))
      {
        uint64_t v9 = extdata_FreeData(a3[28]);
        if ((v9 & 0x80000000) != 0 || (v10 = a3[25]) != 0 && (uint64_t v9 = sparser_ObjClose(v10), (v9 & 0x80000000) != 0))
        {
          uint64_t v3 = v9;
LABEL_12:
          sentpar_ObjClose(a1, a2, a3);
          return v3;
        }
        uint64_t v3 = sentpar_loc_OpenParts(a1, a2, a3);
        if ((v3 & 0x80000000) != 0) {
          goto LABEL_12;
        }
      }
    }
  }
  return v3;
}

uint64_t sentpar_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  if (!a2) {
    return 2369789959;
  }
  *(void *)(a2 + 24) = a3;
  *(_DWORD *)(a2 + 32) = a4;
  *(void *)(a2 + 40) = a5;
  *(_DWORD *)(a2 + 48) = a6;
  paramc_ParamSetUInt(*(void *)(*(void *)a2 + 40), (uint64_t)"finalsentencefound", 0);
  BOOL v9 = (int)paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"eosdetection", (_DWORD *)&v15 + 1) < 0
    || HIDWORD(v15) != 0;
  *(_DWORD *)(a2 + 232) = v9;
  if ((paramc_ParamGet(*(void *)(a1 + 40), (uint64_t)"readmode", &v13, 0) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 196) = (*v13 - 48);
  }
  *(_DWORD *)(a2 + 236) = log_GetLogLevel(*(void *)(a1 + 32)) > 4;
  *(_DWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 192) = 1024;
  if ((paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"ppreaddirectsize", (unsigned int *)&v15) & 0x80000000) == 0
    && v15 >= 0x100)
  {
    *(_DWORD *)(a2 + 192) = v15;
  }
  if ((paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"ppspellpausevalue", (unsigned int *)(a2 + 188)) & 0x80000000) != 0) {
    *(_DWORD *)(a2 + 188) = 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t result = datac_RequestBlock(*(void *)(a2 + 8), (unsigned __int16)aMETA_0[v10], 1u, &v14);
    if ((result & 0x80000000) != 0) {
      break;
    }
    v10 += 3;
    uint64_t v12 = v14;
    *(_WORD *)(v14 + 16) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    if (v10 == 18)
    {
      uint64_t result = sparser_ProcessStart(*(void *)(a2 + 200), *(_DWORD *)(a2 + 188));
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = 0;
        *(_DWORD *)(a2 + 244) = 0;
        *(_DWORD *)(a2 + 248) = 0;
      }
      return result;
    }
  }
  return result;
}

uint64_t sentpar_ProcessEnd(uint64_t a1, _WORD *a2, int a3)
{
  char __s1 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  if ((InitRsrcFunction(a2, a3, &v8) & 0x80000000) != 0) {
    return 2369789959;
  }
  if ((paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"pipelineswitchcomponent", &__s1) & 0x80000000) == 0
    && __s1
    && cstdlib_strcmp(__s1, "pp/sent_parser"))
  {
    cstdlib_memset((void *)(a1 + 120), 0, 0x40uLL);
    *(_DWORD *)(a1 + 140) = 0;
  }
  if ((paramc_ParamGetStr(*(void *)(v8 + 40), (uint64_t)"component_stop", &v6) & 0x80000000) == 0 && v6)
  {
    cstdlib_memset((void *)(a1 + 120), 0, 0x40uLL);
    *(_DWORD *)(a1 + 140) = 0;
    paramc_ParamSetStr(*(void *)(v8 + 40), (uint64_t)"component_stop", "");
  }
  if (!__s1)
  {
    cstdlib_memset((void *)(a1 + 120), 0, 0x40uLL);
    *(_DWORD *)(a1 + 140) = 0;
  }
  int v4 = sentpar_loc_PrepareDataContainers((uint64_t *)a1, 0);
  return v4 & (v4 >> 31);
}

uint64_t sentpar_loc_PrepareDataContainers(uint64_t *a1, int a2)
{
  uint64_t v14 = 0;
  if (a2)
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      int v4 = datac_RequestBlock(a1[1], (unsigned __int16)aTAG_0[i], 1u, &v14);
      if (i != 2 && (v4 & 0x80000000) == 0) {
        *(_WORD *)(v14 + 16) = 0;
      }
    }
    return 0;
  }
  uint64_t result = datac_RequestBlock(a1[1], 1011, 1u, &v14);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v6 = v14;
    if (*(unsigned __int16 *)(v14 + 16) >= 2u)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v14 + 8) + 112);
      unint64_t v8 = 1;
      do
      {
        if (*v7)
        {
          heap_Free(*(void **)(*a1 + 8), *v7);
          *uint64_t v7 = 0;
          uint64_t v6 = v14;
        }
        ++v8;
        v7 += 8;
      }
      while (v8 < *(unsigned __int16 *)(v6 + 16));
    }
    uint64_t result = datac_RequestBlock(a1[1], 1021, 1u, &v14);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v9 = v14;
      if (*(unsigned __int16 *)(v14 + 16) >= 2u)
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v14 + 8) + 112);
        unint64_t v11 = 1;
        do
        {
          if (*v10)
          {
            heap_Free(*(void **)(*a1 + 8), *v10);
            *uint64_t v10 = 0;
            uint64_t v9 = v14;
          }
          ++v11;
          v10 += 8;
        }
        while (v11 < *(unsigned __int16 *)(v9 + 16));
      }
      for (uint64_t j = 0; j != 5; ++j)
      {
        int v13 = datac_RequestBlock(a1[1], (unsigned __int16)aAllTAG_0[j], 1u, &v14);
        if (j != 2 && (v13 & 0x80000000) == 0) {
          *(_WORD *)(v14 + 16) = 0;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sentpar_Process(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v143 = 0;
  int v144 = 1;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  int v135 = 0;
  int v136 = 0;
  uint64_t v134 = 0;
  int v133 = 0;
  if (!a1) {
    return 2369789959;
  }
  long long v139 = 0u;
  long long v140 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_Process()", a6, a7, a8, v123);
  DWORD1(v138) = 0;
  if (*(_DWORD *)(a1 + 240))
  {
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    *(void *)(a1 + 84) = 0;
    *(void *)(a1 + 76) = 0;
    cstdlib_memset((void *)(a1 + 120), 0, 0x40uLL);
  }
  uint64_t InputStreams = sentpar_loc_PrepareDataContainers((uint64_t *)a1, *(_DWORD *)(a1 + 64));
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_GetTextBlockAndMarkers(bHaveReadInputStreams=%d,bBlockMoreInputRequest=%d,bMoreInputRequest=%d)", v13, v14, v15, *(unsigned int *)(a1 + 64));
  if (!*(_DWORD *)(a1 + 64) || !*(_DWORD *)(a1 + 88) && *(_DWORD *)(a1 + 84) == 1)
  {
    uint64_t InputStreams = sentpar_loc_ReadInputStreams(a1);
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    *(_DWORD *)(a1 + 64) = 1;
    goto LABEL_10;
  }
  *(void *)&long long __src = 0;
  uint64_t InputStreams = datac_RequestBlock(*(void *)(a1 + 8), 1010, 1u, &__src);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  if (*(_DWORD *)(__src + 20))
  {
    if (*(_DWORD *)(a1 + 68))
    {
      uint64_t InputStreams = (*(uint64_t (**)(void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32));
      if ((InputStreams & 0x80000000) != 0) {
        return InputStreams;
      }
    }
    if (*(_DWORD *)(a1 + 104))
    {
      uint64_t InputStreams = (*(uint64_t (**)(void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48));
      if ((InputStreams & 0x80000000) != 0) {
        return InputStreams;
      }
    }
    uint64_t InputStreams = sentpar_clearAllParameters(*(void *)a1);
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_CheckIfAllDataProcessed(return TTSEG_PROCESSING_COMP_RESULTS_FULL)", v72, v73, v74, v124);
    return 2369789975;
  }
  uint64_t v75 = *(unsigned int *)(a1 + 68);
  if (v75 == *(_DWORD *)(a1 + 76))
  {
    int v76 = *(_DWORD *)(a1 + 104);
    if (v76 == *(_DWORD *)(a1 + 108))
    {
      if (*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84))
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"FINISHED PROCESSING INPUT STREAM", v31, v32, v33, v124);
        uint64_t v30 = sentpar_loc_FlushStreamsAndReturn(a1, a3, a4);
        goto LABEL_12;
      }
      *(_DWORD *)(a1 + 84) = 1;
      if (*(_DWORD *)(a1 + 240))
      {
        if (!v75)
        {
LABEL_100:
          if (v76)
          {
            uint64_t InputStreams = (*(uint64_t (**)(void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48));
            if ((InputStreams & 0x80000000) != 0) {
              return InputStreams;
            }
          }
          goto LABEL_102;
        }
        uint64_t InputStreams = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32), v75);
        if ((InputStreams & 0x80000000) != 0) {
          return InputStreams;
        }
        if (*(_DWORD *)(a1 + 240))
        {
          int v76 = *(_DWORD *)(a1 + 104);
          goto LABEL_100;
        }
      }
LABEL_102:
      uint64_t v78 = *(void *)(*(void *)a1 + 32);
      unsigned int v79 = "issue more text request (cTextBytesAvailable==0)- TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
      goto LABEL_123;
    }
  }
  uint64_t InputStreams = sentpar_loc_ReadInputStreams(a1);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
LABEL_10:
  uint64_t InputStreams = sentpar_loc_SetUpTextBlock(a1, v16, v17, v18, v19, v20, v21, v22);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  uint64_t v30 = sentpar_loc_SetUpMarkerBlocks(a1, v23, v24, v25, v26, v27, v28, v29);
LABEL_12:
  uint64_t v34 = v30;
  if ((v30 & 0x80000000) != 0) {
    return v34;
  }
  if (!*(_DWORD *)(a1 + 240) && !*(_DWORD *)(a1 + 88))
  {
    unsigned int v77 = *(_DWORD *)(a1 + 68);
    if (v77 <= 0x1FF && v77 > *(_DWORD *)(a1 + 72))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 84) = 1;
      *(_DWORD *)(a1 + 72) = v77;
      uint64_t v78 = *(void *)(*(void *)a1 + 32);
      unsigned int v79 = "issue more text request as text block received is less than SENTPAR_BLOCK_SIZE  - TTSEG_PROCESSING_COMP_RESU"
            "LTS_NONE_NEED_MORE_INPUT";
LABEL_123:
      log_OutText(v78, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v79, v31, v32, v33, v124);
      return 2369792000;
    }
  }
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 68);
  v152[0] = 0;
  long long v150 = 0u;
  long long v151 = 0u;
  long long __src = 0u;
  long long v149 = 0u;
  int v147 = 0;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t InputStreams = datac_RequestBlock(*(void *)(a1 + 8), 1011, 1u, &v146);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  uint64_t v35 = *(void *)(v146 + 8);
  uint64_t v34 = datac_RequestBlock(*(void *)(a1 + 8), 1012, 1u, &v145);
  if ((v34 & 0x80000000) != 0) {
    return v34;
  }
  long long v130 = a2;
  if (!*(_DWORD *)(a1 + 240))
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v131 = *(unsigned __int16 *)(v145 + 16);
    uint64_t v129 = a3;
    while (1)
    {
      uint64_t v39 = aSENTPARTAG2PARAM_0[v36];
      if ((int)v39 > 30)
      {
        if (v39 == 36) {
          goto LABEL_27;
        }
        if (v39 != 31) {
          goto LABEL_50;
        }
      }
      else if (v39 != 7)
      {
        if (v39 != 21) {
          goto LABEL_50;
        }
LABEL_27:
        uint64_t v132 = v37;
        uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), *(void *)&aSENTPARTAG2PARAM_0[v36 + 2], &v147);
        int v48 = Str & 0x1FFF;
        if (v48 == 20)
        {
          uint64_t v34 = 0;
        }
        else
        {
          uint64_t v34 = Str;
          if ((Str & 0x80000000) != 0) {
            goto LABEL_51;
          }
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"GET PARAM marker:%d param=%s val=%s", v45, v46, v47, v39);
          size_t v52 = (unsigned __int16)cstdlib_strlen(v147);
          uint64_t v53 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v52 + 1);
          if (!v53) {
            return 2369789962;
          }
          uint64_t v38 = v53;
          cstdlib_strncpy(v53, v147, v52);
          v38[v52] = 0;
          LODWORD(__src) = 1;
          DWORD1(v149) = v39;
          unsigned int v54 = *(unsigned __int16 *)(v146 + 16);
          if (*(_WORD *)(v146 + 16))
          {
            unsigned int v54 = *(_DWORD *)(v35 + 24);
            unsigned int v55 = *(_DWORD *)(v35 + 32);
          }
          else
          {
            unsigned int v55 = 0;
          }
          *((void *)&v149 + 1) = v54;
          *(void *)&long long v150 = v55;
        }
        paramc_ParamRelease(*(void *)(*(void *)a1 + 40));
        int v147 = 0;
        if (v48 != 20)
        {
          uint64_t v49 = v146;
          LODWORD(v37) = v132;
LABEL_42:
          uint64_t v34 = datac_RequestBlock(*(void *)(a1 + 8), 1011, (unsigned __int16)(*(_WORD *)(v49 + 16) + 1), &v146);
          if ((v34 & 0x80000000) != 0) {
            goto LABEL_51;
          }
          uint64_t v56 = (v37 + 1);
          uint64_t v35 = *(void *)(v146 + 8);
          unsigned int v57 = *(unsigned __int16 *)(v146 + 16);
          BOOL v58 = v57 >= (unsigned __int16)v56;
          signed int v59 = v57 - (unsigned __int16)v56;
          uint64_t v132 = v56;
          if (v59 != 0 && v58) {
            cstdlib_memmove((void *)(v35 + ((unint64_t)((unsigned __int16)v56 + 1) << 6)), (const void *)(v35 + ((unint64_t)(unsigned __int16)v56 << 6)), (uint64_t)v59 << 6);
          }
          cstdlib_memcpy((void *)(v35 + ((unint64_t)(unsigned __int16)v56 << 6)), &__src, 0x40uLL);
          ++*(_WORD *)(v146 + 16);
          if (v38)
          {
            __int16 v60 = cstdlib_strlen(v38);
            uint64_t v34 = datac_RequestBlock(*(void *)(a1 + 8), 1012, (unsigned __int16)(v60 + *(_WORD *)(v145 + 16) + 1), &v145);
            if ((v34 & 0x80000000) != 0) {
              goto LABEL_52;
            }
            uint64_t v61 = *(void *)(v145 + 8);
            *(_DWORD *)(v35 + ((unint64_t)(unsigned __int16)v56 << 6) + 40) = (unsigned __int16)v131;
            unsigned __int16 v62 = cstdlib_strlen(v38);
            cstdlib_memcpy((void *)(v61 + (unsigned __int16)v131), v38, v62);
            *(unsigned char *)(v61 + (unsigned __int16)cstdlib_strlen(v38) + (unint64_t)(unsigned __int16)v131) = 0;
            int v63 = v131 + cstdlib_strlen(v38);
            a3 = v129;
            int v131 = v63 + 1;
            *(_WORD *)(v145 + 16) = v63 + 1;
            heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v38);
            uint64_t v38 = 0;
          }
        }
        uint64_t v37 = v132;
        goto LABEL_50;
      }
      uint64_t UInt = paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), *(void *)&aSENTPARTAG2PARAM_0[v36 + 2], v152);
      if ((UInt & 0x1FFF) != 0x14)
      {
        uint64_t v34 = UInt;
        if ((UInt & 0x80000000) != 0) {
          goto LABEL_51;
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"GET PARAM marker:%d param=%s val=%d", v41, v42, v43, v39);
        LODWORD(__src) = 1;
        DWORD1(v149) = v39;
        uint64_t v49 = v146;
        unsigned int v50 = *(unsigned __int16 *)(v146 + 16);
        if (*(_WORD *)(v146 + 16))
        {
          unsigned int v50 = *(_DWORD *)(v35 + 24);
          unsigned int v51 = *(_DWORD *)(v35 + 32);
        }
        else
        {
          unsigned int v51 = 0;
        }
        *((void *)&v149 + 1) = v50;
        *(void *)&long long v150 = v51;
        DWORD2(v150) = v152[0];
        DWORD2(v151) = 0;
        *(void *)&long long v151 = 0;
        goto LABEL_42;
      }
      uint64_t v34 = 0;
LABEL_50:
      v36 += 4;
      if (v36 == 16)
      {
LABEL_51:
        if (!v38) {
          break;
        }
LABEL_52:
        heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v38);
        break;
      }
    }
  }
  if (v147) {
    paramc_ParamRelease(*(void *)(*(void *)a1 + 40));
  }
  if ((v34 & 0x80000000) != 0) {
    return v34;
  }
  *(void *)&long long __src = 0;
  uint64_t InputStreams = datac_RequestBlock(*(void *)(a1 + 8), 1039, 1u, &__src);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  uint64_t v67 = *(unsigned __int16 *)(__src + 16);
  if (*(_WORD *)(__src + 16))
  {
    uint64_t v68 = *(void *)(__src + 8);
    LODWORD(v69) = *(_DWORD *)(v68 + ((unint64_t)(v67 - 1) << 6) + 32);
    if (*(_DWORD *)(a1 + 184) > v69) {
      LODWORD(v69) = *(_DWORD *)(a1 + 184);
    }
    int v70 = (_DWORD *)(v68 + 36);
    do
    {
      unsigned int v71 = *(v70 - 1);
      if (*v70 + v71 <= v69) {
        uint64_t v69 = v69;
      }
      else {
        uint64_t v69 = v71;
      }
      v70 += 16;
      --v67;
    }
    while (v67);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_GetStartScanPos -> %d", v64, v65, v66, v69);
  }
  else
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_GetStartScanPos -> %d", v64, v65, v66, *(unsigned int *)(a1 + 184));
  }
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1010, (uint64_t)"BEFORE sparser_ScanTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"BEFORE sparser_ScanTextElement", 0, 0, 0);
  if (*(_DWORD *)(a1 + 64) != 1 || *(_DWORD *)(a1 + 88) != 1 || *(_DWORD *)(a1 + 84) != 1)
  {
    uint64_t InputStreams = sparser_PreScanTextElement(*(void *)(a1 + 200), *(void *)(a1 + 8), &v133);
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    if (v133 == 1 && !*(_DWORD *)(a1 + 240))
    {
      *(_DWORD *)(a1 + 64) = 0;
      *(_DWORD *)(a1 + 84) = 1;
      uint64_t v78 = *(void *)(*(void *)a1 + 32);
      unsigned int v79 = "issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
      goto LABEL_123;
    }
  }
  uint64_t InputStreams = sparser_ScanTextElement(*(void *)(a1 + 200), *(void *)(a1 + 8), *(_DWORD *)(a1 + 232), *(_WORD *)(a1 + 196), v80, v31, v32, v33);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  *(_DWORD *)(a1 + 184) = sparser_GetScanPosition(*(void *)(a1 + 200));
  if (*(_DWORD *)(a1 + 240))
  {
    uint64_t v84 = 1;
    int v144 = 1;
  }
  else
  {
    uint64_t InputStreams = sparser_HasTextElementLeft(*(_WORD ***)(a1 + 200), *(void *)(a1 + 8), (BOOL *)&v144, (_WORD *)(a1 + 196));
    if ((InputStreams & 0x80000000) != 0) {
      return InputStreams;
    }
    uint64_t v84 = v144;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"AFTER sparser_HasTextElementLeft bTextRemaining=%d pSentPar->startScanPos=%d", v81, v82, v83, v84);
  if (!v144)
  {
    uint64_t v34 = sentpar_loc_Check2IssueMoreInputRequest(a1, &v135, v85, v86, v87, v88, v89, v90);
    if (v135 == 1)
    {
      LODWORD(__src) = 0;
      if ((paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"disablefinalsentencesilence", (unsigned int *)&__src) & 0x80000000) == 0&& __src == 1)
      {
        paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"finalsentencefound", 1u);
      }
    }
    if ((v34 & 0x80000000) != 0) {
      return v34;
    }
  }
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1010, (uint64_t)"BEFORE sparser_GetTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"BEFORE sparser_GetTextElement", 0, 0, 0);
  uint64_t InputStreams = sparser_GetTextElement(*(void *)(a1 + 200), *(void *)(a1 + 8), &v143, (_DWORD *)&v142 + 1, &v142, v130, (__int16 *)(a1 + 196), (_DWORD *)&v141 + 1, &v141, &v137, (_WORD *)&v136 + 1, &v136);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"AFTER sparser_GetTextElement", v91, v92, v93, v125);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"currentReadMode = %d, *bImmediateVoiceSwitch=%d, bEndOnVoiceSwitch=%d", v94, v95, v96, *(__int16 *)(a1 + 196));
    uint64_t v97 = *(void *)(*(void *)a1 + 32);
    uint64_t v98 = HIDWORD(v141);
    marker_getString(SDWORD1(v138));
    log_OutText(v97, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"posRefOffset=%d, refReset=%d, pRefResetMrk.tag=%s, numBlanksTrimmed=%d u32AdjustedEscLen=%d", v99, v100, v101, v98);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"inputMarkersConsumed=%d", v102, v103, v104, HIWORD(v136));
  }
  if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)a1 + 32))) {
    log_OutTraceTuningData(*(uint64_t ***)(*(void *)a1 + 32), 33, 0, v105, v106, v107, v108, v109, v125);
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"In Blocks", v107, v108, v109, v125);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1010, (uint64_t)"AFTER sparser_GetTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"AFTER sparser_GetTextElement", 0, 0, 0);
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Out Blocks", v110, v111, v112, v126);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1020, (uint64_t)"AFTER sparser_GetTextElement");
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"AFTER sparser_GetTextElement (out marker)", 0, 0, 0);
  int v113 = v142;
  if (*v130 != 1 && v142 != 1)
  {
    uint64_t InputStreams = sentpar_loc_CheckForEmptyOutput(a1, (_DWORD *)&v134 + 1, &v134);
    if ((InputStreams & 0x80000000) == 0)
    {
      if (v135 == 1 && v134 == 0x100000001)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bThereIsNoMoreInput && bEmptyText && bEmptyMarkers - flush and return", v114, v115, v116, v127);
        return sentpar_loc_FlushStreamsAndReturn(a1, a3, a4);
      }
      int v113 = v142;
      goto LABEL_127;
    }
    return InputStreams;
  }
LABEL_127:
  int v117 = *(_DWORD *)(a1 + 236);
  long long __src = v137;
  long long v149 = v138;
  long long v150 = v139;
  long long v151 = v140;
  uint64_t InputStreams = sentpar_loc_UpdateTextAndMrkReadPosition((uint64_t *)a1, SHIDWORD(v142), v117, v113, HIWORD(v136), (unsigned __int16)v136, HIDWORD(v141), v141, &__src);
  if ((InputStreams & 0x80000000) != 0) {
    return InputStreams;
  }
  long long __src = v137;
  long long v149 = v138;
  long long v150 = v139;
  long long v151 = v140;
  uint64_t v34 = sentpar_loc_SavePersistentData(a1, HIDWORD(v141), v141, (unsigned int *)&__src);
  if ((v34 & 0x80000000) == 0)
  {
    if (*v130 == 1)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bImmediateVoiceSwitch - immediate return", v118, v119, v120, v128);
    }
    else
    {
      if (v142 == 1) {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"bEndOnVoiceSwitch - continue processing", v118, v119, v120, v128);
      }
      int v122 = sentpar_loc_FilterSyncMarkers(*(void *)(a1 + 8));
      return v122 & (v122 >> 31);
    }
  }
  return v34;
}

uint64_t sentpar_loc_Check2IssueMoreInputRequest(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a2;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  *a2 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_Check2IssueMoreInputRequest()", a6, a7, a8, v22);
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 8), 1010, 1u, &v29);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 8), 1011, 1u, &v28);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 16) + 136))(*(void *)(a1 + 24), *(void *)(a1 + 32), (char *)&v27 + 4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 24), *(void *)(a1 + 32), (char *)&v26 + 4, (char *)&v25 + 4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t *))(*(void *)(a1 + 16) + 136))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v27);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v26, &v25);
  if ((v14 & 0x80000000) == 0)
  {
    if (HIDWORD(v25) == 1 && !HIDWORD(v26) && v25 == 1 && !v26)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"no text and markers : return TTSEG_PROCESSING_COMP_RESULTS_FULL", v11, v12, v13, v23);
      uint64_t v14 = 2369789975;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"have bytes in input stream, issue more text request?", v11, v12, v13, v23);
    if (HIDWORD(v26))
    {
      uint64_t v18 = (_DWORD *)(a1 + 84);
      if (*(_DWORD *)(a1 + 84) == 1)
      {
        uint64_t v19 = "already issued more text request - there is no more input";
LABEL_20:
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v19, v15, v16, v17, v24);
        uint64_t v21 = "leaving sentpar_loc_Check2IssueMoreInputRequest() - continue processing";
LABEL_25:
        *unint64_t v8 = 1;
        goto LABEL_26;
      }
      uint64_t v14 = 2369792000;
      *(_DWORD *)(a1 + 64) = 0;
      uint64_t v21 = "[1]issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
    }
    else
    {
      if (!v26)
      {
        uint64_t v21 = "leaving sentpar_loc_Check2IssueMoreInputRequest() - continue processing";
LABEL_26:
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v21, v15, v16, v17, v24);
        return v14;
      }
      uint64_t v18 = (_DWORD *)(a1 + 84);
      if (*(_DWORD *)(a1 + 84) == 1)
      {
        uint64_t v19 = "already issued more text request - still have some markers - return there is no more input";
        goto LABEL_20;
      }
      uint64_t v14 = 2369792000;
      *(_DWORD *)(a1 + 64) = 0;
      uint64_t v21 = "[2]issue more text request - TTSEG_PROCESSING_COMP_RESULTS_NONE_NEED_MORE_INPUT";
    }
    unint64_t v8 = v18;
    goto LABEL_25;
  }
  return v14;
}

uint64_t sentpar_loc_CheckForEmptyOutput(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v7 = 0;
  *a2 = 0;
  *a3 = 0;
  uint64_t result = datac_RequestBlock(*(void *)(a1 + 8), 1020, 1u, &v7);
  if ((result & 0x80000000) == 0)
  {
    if (!*(_WORD *)(v7 + 16)) {
      *a2 = 1;
    }
    uint64_t result = datac_RequestBlock(*(void *)(a1 + 8), 1021, 1u, &v7);
    if ((result & 0x80000000) == 0 && !*(_WORD *)(v7 + 16)) {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t sentpar_loc_FlushStreamsAndReturn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 68);
  int v7 = *(_DWORD *)(a1 + 76);
  if (v6 != v7)
  {
    uint64_t v8 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32), (v6 - v7));
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    *(_DWORD *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 76) = 0;
  }
  uint64_t v9 = 2369789975;
  if (*(_DWORD *)(a1 + 104) == *(_DWORD *)(a1 + 108)) {
    return v9;
  }
  uint64_t v40 = 0;
  uint64_t v8 = datac_RequestBlock(*(void *)(a1 + 8), 1021, 1u, &v40);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v10 = *(unsigned __int16 *)(v40 + 16);
  if (!*(_WORD *)(v40 + 16))
  {
    uint64_t v13 = 0;
    goto LABEL_44;
  }
  uint64_t v11 = *(void *)(v40 + 8);
  uint64_t v39 = 0;
  uint64_t v12 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v10 << 6) | 1);
  if (!v12) {
    return 2369789962;
  }
  uint64_t v13 = (_DWORD *)v12;
  uint64_t v14 = datac_RequestBlock(*(void *)(a1 + 8), 1012, 1u, &v39);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_38;
  }
  uint64_t v15 = v40;
  if (!*(_WORD *)(v40 + 16)) {
    goto LABEL_42;
  }
  unint64_t v16 = 0;
  uint64_t v17 = *(void *)(v39 + 8);
  uint64_t v18 = (void *)(v11 + 40);
  do
  {
    if (marker_hasNonConstCharPtrArg(*((_DWORD *)v18 - 5)))
    {
      uint64_t v19 = *(unsigned int *)v18;
      if (v19 == -1) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v17 + v19;
      }
      void *v18 = v20;
    }
    v18 += 8;
    ++v16;
    uint64_t v15 = v40;
  }
  while (v16 < *(unsigned __int16 *)(v40 + 16));
  if (!*(_WORD *)(v40 + 16))
  {
LABEL_42:
    uint64_t v25 = (unsigned __int16 *)(v15 + 16);
LABEL_43:
    *uint64_t v25 = 0;
    goto LABEL_44;
  }
  unint64_t v21 = 0;
  unint64_t v22 = 0;
  do
  {
    uint64_t v23 = &v13[v21 / 4];
    *(_OWORD *)(v23 + 5) = *(_OWORD *)(v11 + v21 + 20);
    v23[9] = *(_DWORD *)(v11 + v21 + 36);
    *((void *)v23 + 5) = *(void *)(v11 + v21 + 40);
    ++v22;
    uint64_t v24 = (_OWORD *)*(unsigned __int16 *)(v40 + 16);
    v21 += 64;
  }
  while (v22 < (unint64_t)v24);
  uint64_t v25 = (unsigned __int16 *)(v40 + 16);
  if (!*(_WORD *)(v40 + 16)) {
    goto LABEL_43;
  }
  unint64_t v26 = 0;
  unsigned __int16 v27 = 0;
  uint64_t v28 = v13;
  do
  {
    if (v26)
    {
      int v29 = v28[5];
      if (v29 == 0x4000) {
        goto LABEL_28;
      }
    }
    else
    {
      int v29 = v13[5];
    }
    if (v29 != 3)
    {
      uint64_t v24 = &v13[16 * (unint64_t)v27];
      long long v30 = *(_OWORD *)v28;
      long long v31 = *((_OWORD *)v28 + 1);
      long long v32 = *((_OWORD *)v28 + 3);
      v24[2] = *((_OWORD *)v28 + 2);
      v24[3] = v32;
      *uint64_t v24 = v30;
      v24[1] = v31;
      ++v27;
      LOWORD(v24) = *v25;
    }
LABEL_28:
    ++v26;
    v28 += 16;
  }
  while (v26 < (unsigned __int16)v24);
  *uint64_t v25 = v27;
  if (v27 >= 2u)
  {
    unint64_t v33 = 0;
    int v34 = 0;
    int v35 = v13[9];
    do
    {
      int v36 = v13[v33 / 4 + 21];
      if (v36 != 999 && v36 != 0x4000 && v13[v33 / 4 + 16] != 1) {
        int v34 = 1;
      }
      v13[v33 / 4 + 24] = v35 + v13[8];
      v33 += 64;
    }
    while (((unint64_t)v27 << 6) - 64 != v33);
    if (v34 == 1)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, void))(*(void *)(a1 + 16) + 104))(a2, a3, v13, v27 << 6);
      if ((v14 & 0x80000000) != 0)
      {
LABEL_38:
        uint64_t v9 = v14;
        goto LABEL_46;
      }
    }
  }
LABEL_44:
  uint64_t v37 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108)));
  if ((v37 & 0x80000000) != 0)
  {
    uint64_t v9 = v37;
    if (v13) {
LABEL_46:
    }
      heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v13);
  }
  else
  {
    *(void *)(a1 + 104) = 0;
    if (v13) {
      goto LABEL_46;
    }
  }
  return v9;
}

uint64_t sentpar_loc_UpdateTextAndMrkReadPosition(uint64_t *a1, int a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9)
{
  unsigned int v9 = a8;
  unsigned int v10 = a7;
  int v11 = a6;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_UpdateTextAndMrkReadPosition", a6, a7, a8, v62);
  uint64_t v17 = datac_RequestBlock(a1[1], 1020, 1u, &v76);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  int v18 = *(unsigned __int16 *)(v76 + 16);
  uint64_t v17 = datac_RequestBlock(a1[1], 1020, 1u, &v77);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  long long __src = *(char **)(v77 + 8);
  unsigned int v72 = *(unsigned __int16 *)(v77 + 16);
  uint64_t v17 = datac_RequestBlock(a1[1], 1011, 1u, &v75);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v22 = datac_RequestBlock(a1[1], 1039, 1u, &v74);
  if ((v22 & 0x80000000) == 0)
  {
    int v64 = a2;
    int v65 = a4;
    unsigned int v68 = v10;
    unsigned int v69 = v9;
    unsigned int v70 = a5;
    int v66 = v18;
    int v67 = v11;
    if (*(_WORD *)(v75 + 16))
    {
      unint64_t v23 = 0;
      unsigned int v24 = 0;
      uint64_t v25 = *(void *)(v75 + 8);
      unint64_t v26 = *(char **)(v74 + 8);
      do
      {
        unsigned __int16 v27 = (_DWORD *)(v25 + (v23 << 6));
        if (*v27 == 1 && v27[5] == 2)
        {
          uint64_t v28 = -1;
          int v29 = v26;
          while (1)
          {
            unint64_t v30 = *(unsigned __int16 *)(v74 + 16);
            if (++v28 >= v30) {
              break;
            }
            long long v31 = v29 + 64;
            int v32 = cstdlib_memcmp((const void *)(v25 + (v23 << 6)), v29, 0x40uLL);
            int v29 = v31;
            if (!v32) {
              goto LABEL_22;
            }
          }
          uint64_t v22 = datac_RequestBlock(a1[1], 1039, (unsigned __int16)(v30 + 1), &v74);
          if ((v22 & 0x80000000) != 0) {
            return v22;
          }
          unint64_t v26 = *(char **)(v74 + 8);
          uint64_t v33 = *(unsigned __int16 *)(v74 + 16);
          if (!*(_WORD *)(v74 + 16)) {
            goto LABEL_20;
          }
          uint64_t v34 = 0;
          int v35 = v26 + 64;
          size_t v36 = v33 << 6;
          while (*(v35 - 8) < *(_DWORD *)(v25 + (v23 << 6) + 32))
          {
            ++v34;
            v35 += 16;
            v36 -= 64;
            if (!v36)
            {
              unsigned int v24 = *(unsigned __int16 *)(v74 + 16);
              goto LABEL_20;
            }
          }
          unsigned int v24 = (unsigned __int16)v34;
          if (v33 != (unsigned __int16)v34) {
            cstdlib_memcpy(v35, v35 - 16, v36);
          }
          else {
LABEL_20:
          }
            uint64_t v34 = v24;
          cstdlib_memcpy(&v26[64 * v34], (const void *)(v25 + (v23 << 6)), 0x40uLL);
          ++*(_WORD *)(v74 + 16);
        }
LABEL_22:
        ++v23;
      }
      while (v23 < *(unsigned __int16 *)(v75 + 16));
    }
    if (a3 == 1 && v72)
    {
      if (v72 >= 0x400) {
        size_t v38 = 1024;
      }
      else {
        size_t v38 = v72;
      }
      uint64_t v39 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, (v38 + 1));
      if (!v39) {
        return 2369789962;
      }
      uint64_t v40 = (uint64_t)v39;
      cstdlib_strncpy(v39, __src, v38);
      *(unsigned char *)(v40 + v38) = 0;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"(Txt) (text processed) (tag=%d) len=%d (UTF8 *) \"%s\"", v41, v42, v43, 1011);
      heap_Free(*(void **)(*a1 + 8), v40);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"(Mrk) (%d markers processed)", v44, v45, v46, v70);
    }
    int v47 = *(unsigned __int16 *)(v77 + 2);
    uint64_t v48 = (v67 + v47 * v66);
    if (v48)
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"consume TXT Stream cTextBytesRead=%d", v19, v20, v21, (v67 + v47 * v66));
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[2] + 96))(a1[3], a1[4], v48);
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      int v49 = v67 + (v66 + v64) * v47 + *((_DWORD *)a1 + 20);
      *((_DWORD *)a1 + 19) += v48;
      *((_DWORD *)a1 + 20) = v49;
    }
    if (!v70) {
      goto LABEL_43;
    }
    uint64_t v50 = v70 << 6;
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"MRK Stream cMarkerBytesProcessed=%d", v19, v20, v21, v50);
    if (*((_DWORD *)a1 + 27) >= 0x40u)
    {
      uint64_t v54 = 0;
      int v55 = 0;
      do
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"CONSUMED pInMrk[%d].tag %d %d,%d %d,%d", v51, v52, v53, v54);
        uint64_t v54 = (unsigned __int16)++v55;
      }
      while ((unsigned __int16)v55 < *((_DWORD *)a1 + 27) >> 6);
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[2] + 96))(a1[5], a1[6], v50);
    if ((v22 & 0x80000000) == 0)
    {
      *(uint64_t *)((char *)a1 + 108) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)a1 + 108), vdup_n_s32(v50));
LABEL_43:
      if (v65 == 1 || *((_DWORD *)a1 + 20) > *((_DWORD *)a1 + 48))
      {
        long long v56 = a9[1];
        v73[0] = *a9;
        v73[1] = v56;
        long long v57 = a9[3];
        v73[2] = a9[2];
        v73[3] = v57;
        uint64_t v22 = sentpar_loc_SavePersistentData((uint64_t)a1, v68, v69, (unsigned int *)v73);
        if ((v22 & 0x80000000) == 0)
        {
          if (v65 == 1)
          {
            uint64_t v61 = "!! bEndOnVoiceSwitch - RESET";
          }
          else
          {
            uint64_t v61 = "!! cSTREAMTextBytesProcessed %d > pSentPar->cReadDirectSize %d - RESET";
            uint64_t v63 = *((unsigned int *)a1 + 20);
          }
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v61, v58, v59, v60, v63);
          *((_DWORD *)a1 + 46) = 0;
          a1[7] = 0;
          a1[8] = 0;
          *(uint64_t *)((char *)a1 + 84) = 0;
          *(uint64_t *)((char *)a1 + 76) = 0;
          a1[12] = 0;
          a1[13] = 0;
          *((_DWORD *)a1 + 28) = 0;
        }
      }
    }
  }
  return v22;
}

uint64_t sentpar_loc_SavePersistentData(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v17 = 0;
  uint64_t v8 = sentpar_loc_SetReadoutMarkersAsParameters((int *)a1);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_posrefoffset", a2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_refreset", a3);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = *(void *)(*(void *)a1 + 40);
  if (a3)
  {
    uint64_t v8 = paramc_ParamSetUInt(v9, (uint64_t)"pp_sentpar_refreset_mrk_tag", a4[5]);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", a4[6]);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v10 = *(void *)(*(void *)a1 + 40);
    unsigned int v11 = a4[7];
  }
  else
  {
    uint64_t v8 = paramc_ParamSetUInt(v9, (uint64_t)"pp_sentpar_refreset_mrk_tag", 0);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = paramc_ParamSetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", 0);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v10 = *(void *)(*(void *)a1 + 40);
    unsigned int v11 = 0;
  }
  uint64_t v8 = paramc_ParamSetUInt(v10, (uint64_t)"pp_sentpar_refreset_mrk_lenref", v11);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v12 = datac_RequestBlock(*(void *)(a1 + 8), 1011, 1u, &v17);
  if ((v12 & 0x80000000) == 0 && *(_WORD *)(v17 + 16))
  {
    cstdlib_memcpy((void *)(a1 + 120), *(const void **)(v17 + 8), 0x40uLL);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"STORE lastOutSyncMrk %d,%d %d,%d", v13, v14, v15, *(unsigned int *)(a1 + 144));
  }
  return v12;
}

uint64_t sentpar_loc_FilterSyncMarkers(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t result = datac_RequestBlock(a1, 1021, 1u, &v2);
  if ((result & 0x80000000) == 0) {
    return marker_loc_FilterSyncMarkers(v2);
  }
  return result;
}

uint64_t sentpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v5 = 2369789952;
  if (!a1) {
    return 2369789959;
  }
  int v34 = 0;
  uint64_t Object = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 16) + 136))(a2, a3, &v34);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"start sentpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1020, (uint64_t)"start sentpar_WriteTextAndMarkers()");
  uint64_t Object = datac_RequestBlock(*(void *)(a1 + 8), 1020, 1u, &v33);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  int v12 = *(unsigned __int16 *)(v33 + 16);
  if (!*(_WORD *)(v33 + 16)) {
    goto LABEL_11;
  }
  uint64_t Object = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(a1 + 16) + 104))(a2, a3, *(void *)(v33 + 8), *(unsigned __int16 *)(v33 + 2) * v12);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  if (!*(_DWORD *)(a1 + 240))
  {
    long long v31 = 0;
    uint64_t Object = objc_GetObject(*(void *)(*(void *)a1 + 48), (uint64_t)"CHARCOUNT", &v31);
    if ((Object & 0x80000000) == 0)
    {
      (*(void (**)(void, void, void, void))(v31[1] + 56))(v31[2], v31[3], *(void *)(v33 + 8), *(unsigned __int16 *)(v33 + 2) * *(unsigned __int16 *)(v33 + 16));
      objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"CHARCOUNT");
      goto LABEL_9;
    }
    return Object;
  }
LABEL_9:
  *(_WORD *)(v33 + 16) = 0;
LABEL_11:
  if ((datac_RequestBlock(*(void *)(a1 + 8), 1012, 1u, &v33) & 0x80000000) != 0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v33 + 8);
  }
  uint64_t Object = datac_RequestBlock(*(void *)(a1 + 8), 1021, 1u, &v32);
  if ((Object & 0x80000000) != 0) {
    return Object;
  }
  unsigned int v14 = *(unsigned __int16 *)(v32 + 16);
  if (!*(_WORD *)(v32 + 16)) {
    return v5;
  }
  uint64_t v15 = *(void *)(v32 + 8);
  if (*(_DWORD *)(v15 + 20) != 0x4000) {
    return v5;
  }
  if (v12)
  {
    uint64_t v16 = 0;
    int v34 = *(_DWORD *)(v15 + 32) - v34;
LABEL_22:
    uint64_t v19 = v14;
    uint64_t v20 = (_DWORD *)(v15 + 32);
    do
    {
      *v20 -= v34;
      v20 += 16;
      --v19;
    }
    while (v19);
    unint64_t v21 = 0;
    uint64_t v22 = (void *)(v15 + 40);
    do
    {
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v22 - 5)))
      {
        uint64_t v23 = *(unsigned int *)v22;
        if (v13) {
          BOOL v24 = v23 == 0xFFFFFFFFLL;
        }
        else {
          BOOL v24 = 1;
        }
        uint64_t v25 = v13 + v23;
        if (v24) {
          uint64_t v25 = 0;
        }
        *uint64_t v22 = v25;
      }
      v22 += 8;
      ++v21;
      uint64_t v18 = v32;
    }
    while (v21 < *(unsigned __int16 *)(v32 + 16));
    goto LABEL_34;
  }
  uint64_t v16 = marker_CheckForEmptyMarkers(v13, *(_DWORD *)(a1 + 188), v15, v14, *(void *)(a1 + 96), (unsigned __int16)(*(_DWORD *)(a1 + 104) >> 6), (unsigned __int16)(*(_DWORD *)(a1 + 108) >> 6));
  uint64_t v18 = v32;
  unsigned int v14 = *(unsigned __int16 *)(v32 + 16);
  int v34 = *(_DWORD *)(v15 + 32) - v34;
  if (v14) {
    goto LABEL_22;
  }
LABEL_34:
  if (!*(_DWORD *)(a1 + 240)) {
    sentpar_loc_Align(a1, v18);
  }
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1011, (uint64_t)"at end(internal only)", 0, 0, 0);
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"at end()", 1, 0, 0);
  uint64_t v26 = v32;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"entering sentpar_loc_writeMarkersToOutputStream(bNoSignificantMarkers=%d bTextOut=%d)", v27, v28, v29, v16);
  int v30 = *(unsigned __int16 *)(v26 + 16);
  if (!v12)
  {
    if (v30 == 1)
    {
      if (v16 == 1 || *(_DWORD *)(v15 + 20) == 0x4000) {
        return 0;
      }
      LOWORD(v30) = 1;
    }
    else if (v16 == 1)
    {
      return 0;
    }
  }
  marker_TraceMrk(212, (uint64_t)"PP_SENT_PARSER", *(_DWORD *)(a1 + 236), *(void *)a1, *(void *)(a1 + 8), 1021, (uint64_t)"markers output()", 1, v15, v30);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 16) + 104))(a4, a5, v15, *(unsigned __int16 *)(v26 + 16) << 6);
  if ((v5 & 0x80000000) == 0) {
    return 0;
  }
  return v5;
}

uint64_t sentpar_loc_Align(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(_DWORD **)(a2 + 8);
  int v4 = v3[6];
  int v5 = *(_DWORD *)(result + 244);
  int v6 = v5 + v4;
  unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
  if (v7 < 2)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = v3 + 21;
    unint64_t v11 = 1;
    int v12 = v3 + 21;
    do
    {
      int v13 = *v12;
      v12 += 16;
      if (v13 == 62)
      {
        uint64_t result = cstdlib_atoi(*(unsigned __int8 **)(v10 + 5));
        int v9 = result + v9 - v10[2];
        unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
      }
      ++v11;
      uint64_t v10 = v12;
    }
    while (v11 < v7);
    int v5 = *(_DWORD *)(v2 + 244);
    int v4 = v3[6];
  }
  int v14 = v5 + v9;
  int v15 = *(_DWORD *)(v2 + 248);
  int v17 = v6 - v15;
  BOOL v16 = v6 < v15;
  if (v6 > v15) {
    int v15 = v6;
  }
  if (!v16) {
    int v17 = 0;
  }
  int v18 = (v3[7] + v9 + v17) & ~((v3[7] + v9 + v17) >> 31);
  v3[6] = v15;
  v3[7] = v18;
  *(_DWORD *)(v2 + 244) = v14;
  *(_DWORD *)(v2 + 248) = v18 + v15;
  if (v7 >= 2)
  {
    int v19 = v15 - v4;
    uint64_t v20 = v7;
    unint64_t v21 = v3 + 22;
    uint64_t v22 = v20 - 1;
    do
    {
      if (*(v21 - 1) != 999) {
        *unint64_t v21 = (v19 + *v21) & ~((v19 + *v21) >> 31);
      }
      v21 += 16;
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t sentpar_IsTextElementAtEos(uint64_t a1)
{
  uint64_t v3 = 0;
  if (!a1) {
    return 1;
  }
  uint64_t v1 = 1;
  if ((datac_RequestBlock(*(void *)(a1 + 8), 1020, 1u, &v3) & 0x80000000) == 0) {
    return *(unsigned int *)(v3 + 20);
  }
  return v1;
}

uint64_t sentpar_ResetMarkerBlocks(uint64_t *a1)
{
  uint64_t v11 = 0;
  if (!a1) {
    return 2369789959;
  }
  uint64_t v2 = datac_RequestBlock(a1[1], 1021, 1u, &v11);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = v11;
  if (*(unsigned __int16 *)(v11 + 16) >= 2u)
  {
    int v4 = (uint64_t *)(*(void *)(v11 + 8) + 112);
    unint64_t v5 = 1;
    do
    {
      if (*v4)
      {
        heap_Free(*(void **)(*a1 + 8), *v4);
        *int v4 = 0;
        uint64_t v3 = v11;
      }
      ++v5;
      v4 += 8;
    }
    while (v5 < *(unsigned __int16 *)(v3 + 16));
  }
  *(_WORD *)(v3 + 16) = 0;
  uint64_t v6 = datac_RequestBlock(a1[1], 1011, 1u, &v11);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = v11;
    if (*(unsigned __int16 *)(v11 + 16) >= 2u)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v11 + 8) + 112);
      unint64_t v9 = 1;
      do
      {
        if (*v8)
        {
          heap_Free(*(void **)(*a1 + 8), *v8);
          *uint64_t v8 = 0;
          uint64_t v7 = v11;
        }
        ++v9;
        v8 += 8;
      }
      while (v9 < *(unsigned __int16 *)(v7 + 16));
    }
    *(_WORD *)(v7 + 16) = 0;
  }
  return v6;
}

uint64_t sentpar_loc_ReadInputStreams(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 104);
  int v3 = *(_DWORD *)(a1 + 104);
  int v4 = (_DWORD *)(a1 + 68);
  int v5 = *(_DWORD *)(a1 + 68);
  int v6 = *(_DWORD *)(a1 + 76);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v7 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 24), *(void *)(a1 + 32), (char *)&v32 + 4, (char *)&v31 + 4);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v32, &v31);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_ReadInputStreams()", v8, v9, v10, v30);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT State fTxtEos=%d cTxtBytesRemaining=%d", v11, v12, v13, HIDWORD(v31));
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"MRK State fMrkEos=%d cMrkBytesRemaining=%d", v14, v15, v16, v31);
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t, _DWORD *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 24), *(void *)(a1 + 32), a1 + 56, v4);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  *(_DWORD *)(a1 + 76) = 0;
  uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, _DWORD *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 40), *(void *)(a1 + 48), a1 + 96, v2);
  if ((v20 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 108) = 0;
    if (*(_DWORD *)(a1 + 236) == 1)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"After stream reads", v17, v18, v19, v30);
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT cTextBytesInStream=%d  (%u characters)", v21, v22, v23, *(unsigned int *)(a1 + 68));
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"TXT cMarkerBytesInStream=%d (%u markers)", v24, v25, v26, *(unsigned int *)(a1 + 104));
    }
    if (*(_DWORD *)(a1 + 84) == 1)
    {
      if (v31 == 0x100000001)
      {
        uint64_t v27 = *(void *)(*(void *)a1 + 32);
        uint64_t v28 = "!![1](fTxtEos==1) && (fMrkEos==1) && (bBlockMoreInputRequest) - NO MORE TEXT SO BLOCK REQUESTS";
      }
      else
      {
        if (v5 == v6 || v5 - v6 != *v4 || v3 && v3 != *v2)
        {
          *(_DWORD *)(a1 + 84) = 0;
          return v20;
        }
        uint64_t v27 = *(void *)(*(void *)a1 + 32);
        uint64_t v28 = "!![2](bBlockMoreInputRequest) - NO MORE TEXT & MARKERS SO BLOCK REQUESTS";
      }
      log_OutText(v27, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v28, v17, v18, v19, v30);
      *(_DWORD *)(a1 + 88) = 1;
    }
  }
  return v20;
}

uint64_t sentpar_loc_SetUpTextBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  int v9 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 76);
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_SetUpTextBlock()", a6, a7, a8, (uint64_t)v33);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Input Stream State :", v10, v11, v12, v34);
    unsigned int v13 = (unsigned __int16)v9;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"cTextBytesAvailable=%d cTextBytesInStream=%d cTextBytesRead=%d", v14, v15, v16, (unsigned __int16)v9);
  }
  else
  {
    unsigned int v13 = (unsigned __int16)(*(_WORD *)(a1 + 68) - *(_WORD *)(a1 + 76));
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (v13)
  {
    uint64_t v18 = datac_RequestBlock(v17, 1010, (unsigned __int16)v9, &v35);
    if ((v18 & 0x80000000) == 0)
    {
      uint64_t v19 = *(void **)(v35 + 8);
      cstdlib_memcpy(v19, (const void *)(*(void *)(a1 + 56) + *(unsigned int *)(a1 + 76)), v13);
      *(_WORD *)(v35 + 16) = v9;
      size_t v23 = *(unsigned int *)(a1 + 68);
      if (v23 < 0x400)
      {
        cstdlib_strncpy(__dst, *(const char **)(a1 + 56), v23);
        __dst[*(unsigned int *)(a1 + 68)] = 0;
        uint64_t v24 = *(void *)(*(void *)a1 + 32);
        uint64_t v25 = "Input TXT Stream -%s-";
        uint64_t v33 = __dst;
      }
      else
      {
        uint64_t v24 = *(void *)(*(void *)a1 + 32);
        uint64_t v25 = "Input TXT Stream > PP_MAX_LOG_MESSAGE, skip trace";
      }
      log_OutText(v24, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v25, v20, v21, v22, (uint64_t)v33);
      size_t v31 = *(unsigned __int16 *)(v35 + 16);
      if (v31 < 0x400)
      {
        cstdlib_strncpy(__dst, (const char *)v19, v31);
        __dst[*(unsigned __int16 *)(v35 + 16)] = 0;
        uint64_t v29 = *(void *)(*(void *)a1 + 32);
        uint64_t v30 = "Input TXT        -%s-";
        uint64_t v33 = __dst;
      }
      else
      {
        uint64_t v29 = *(void *)(*(void *)a1 + 32);
        uint64_t v30 = "Input TXT > PP_MAX_LOG_MESSAGE, skip trace";
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v18 = datac_RequestBlock(v17, 1010, 1u, &v35);
    if ((v18 & 0x80000000) == 0)
    {
      *(_WORD *)(v35 + 16) = 0;
      uint64_t v29 = *(void *)(*(void *)a1 + 32);
      uint64_t v30 = "Empty text block";
LABEL_14:
      log_OutText(v29, (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)v30, v26, v27, v28, (uint64_t)v33);
    }
  }
  return v18;
}

uint64_t sentpar_loc_SetUpMarkerBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  unint64_t v9 = *(unsigned int *)(a1 + 104);
  unint64_t v10 = *(unsigned int *)(a1 + 108);
  uint64_t v95 = 0;
  unsigned __int16 v11 = v9 - v10;
  uint64_t v12 = (unsigned __int16)(v9 - v10) >> 6;
  if (*(_DWORD *)(a1 + 236) == 1)
  {
    unsigned __int16 v93 = v9 - v10;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"sentpar_loc_SetUpMarkerBlocks()", a6, a7, a8, v90);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Input Stream State :", v13, v14, v15, v91);
    uint64_t v16 = (unsigned __int16)(v9 >> 6);
    unint64_t v94 = v10;
    unsigned int v17 = (unsigned __int16)(v10 >> 6);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"numMarkersAvailable=%d numMarkersInStream=%d numMarkersInStreamRead=%d", v18, v19, v20, v12);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Markers in Input Stream", v21, v22, v23, v92);
    if (v16)
    {
      uint64_t v27 = 0;
      unsigned int v28 = 0;
      do
      {
        uint64_t v29 = *(const char **)(*(void *)(a1 + 96) + v27 + 48);
        if (v29)
        {
          unsigned __int16 v30 = cstdlib_strlen(v29);
          if ((v30 & 0xFFE0) != 0) {
            size_t v31 = 31;
          }
          else {
            size_t v31 = v30;
          }
          cstdlib_strncpy(__dst, *(const char **)(*(void *)(a1 + 96) + v27 + 48), v31);
          __dst[v31] = 0;
        }
        else
        {
          __dst[0] = 0;
        }
        uint64_t v32 = "";
        if (v17 > v28) {
          uint64_t v32 = "(CONSUMED)";
        }
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"%spInMrk[%d] %d %d,%d %d,%d INT=%d Ext=%d %s", v24, v25, v26, (uint64_t)v32);
        ++v28;
        v27 += 64;
      }
      while (v16 << 6 != v27);
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"lastOutSyncMrk %d,%d %d,%d", v24, v25, v26, *(unsigned int *)(a1 + 144));
    unint64_t v10 = v94;
    unsigned __int16 v11 = v93;
  }
  if (v11 <= 0x3Fu)
  {
    if (!*(_DWORD *)(a1 + 140))
    {
      uint64_t v57 = 2369792000;
      if (!*(_DWORD *)(a1 + 240)) {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 1931, 0, a5, a6, a7, a8, v90);
      }
      return v57;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"no markers - use lastOutSyncMrk", a6, a7, a8, v90);
    uint64_t v33 = datac_RequestBlock(*(void *)(a1 + 8), 1011, 0x40u, &v97);
    if ((v33 & 0x80000000) == 0)
    {
      uint64_t v34 = *(_DWORD **)(v97 + 8);
      cstdlib_memcpy(v34, (const void *)(a1 + 120), 0x40uLL);
      *uint64_t v34 = 1;
      *(_WORD *)(v97 + 16) = 1;
      goto LABEL_54;
    }
    return v33;
  }
  uint64_t v33 = datac_RequestBlock(*(void *)(a1 + 8), 1011, v11 & 0xFFC0, &v97);
  if ((v33 & 0x80000000) != 0) {
    return v33;
  }
  unint64_t v35 = 0;
  unsigned __int16 v36 = 0;
  uint64_t v34 = *(_DWORD **)(v97 + 8);
  uint64_t v37 = (unsigned __int16)(v10 >> 6);
  if (v12 <= 1) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = v12;
  }
  uint64_t v39 = v37 << 6;
  do
  {
    cstdlib_memcpy(&v34[v35 / 4], (const void *)(*(void *)(a1 + 96) + v39 + v35), 0x40uLL);
    v34[v35 / 4] = 0;
    int hasNonConstCharPtrArg = marker_hasNonConstCharPtrArg(v34[v35 / 4 + 5]);
    uint64_t v45 = *(void *)(a1 + 96) + v39 + v35;
    if (hasNonConstCharPtrArg)
    {
      uint64_t v46 = *(const char **)(v45 + 40);
      if (v46)
      {
        __int16 v47 = cstdlib_strlen(v46);
        LODWORD(v46) = 0;
        v36 += v47 + 1;
      }
    }
    else
    {
      LODWORD(v46) = *(_DWORD *)(v45 + 40);
    }
    v34[v35 / 4 + 10] = v46;
    uint64_t v48 = *(const char **)(*(void *)(a1 + 96) + v39 + v35 + 48);
    if (v48)
    {
      int v49 = (unsigned __int16)cstdlib_strlen(v48);
      if (v49)
      {
        uint64_t v50 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (v49 + 1));
        *(void *)&v34[v35 / 4 + 12] = v50;
        if (!v50) {
          return 2369789962;
        }
        cstdlib_strcpy(v50, *(const char **)(*(void *)(a1 + 96) + v39 + v35 + 48));
      }
    }
    v35 += 64;
  }
  while ((unint64_t)v38 << 6 != v35);
  *(_WORD *)(v97 + 16) = v12;
  if (v36)
  {
    uint64_t v33 = datac_RequestBlock(*(void *)(a1 + 8), 1012, v36, &v96);
    if ((v33 & 0x80000000) != 0) {
      return v33;
    }
    int v51 = 0;
    uint64_t v52 = *(void *)(v96 + 8);
    uint64_t v53 = v34 + 10;
    uint64_t v54 = (v37 << 6) | 0x28;
    do
    {
      if (marker_hasNonConstCharPtrArg(*(v53 - 5)) && *(void *)(*(void *)(a1 + 96) + v54))
      {
        *uint64_t v53 = (unsigned __int16)v51;
        int v55 = *(const char **)(*(void *)(a1 + 96) + v54);
        unsigned __int16 v56 = cstdlib_strlen(v55);
        cstdlib_memcpy((void *)(v52 + (unsigned __int16)v51), v55, v56);
        *(unsigned char *)(v52
                 + (unsigned __int16)cstdlib_strlen(*(const char **)(*(void *)(a1 + 96) + v54))
                 + (unint64_t)(unsigned __int16)v51) = 0;
        v51 += cstdlib_strlen(*(const char **)(*(void *)(a1 + 96) + v54)) + 1;
      }
      v53 += 16;
      v54 += 64;
      --v38;
    }
    while (v38);
    *(_WORD *)(v96 + 16) = v51;
  }
  if (v34[5] == 0x4000)
  {
    if (*(_DWORD *)(a1 + 140))
    {
      if (*(unsigned __int16 *)(v97 + 16) >= 2u && v34[24] < *(_DWORD *)(a1 + 152)) {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 1932, (uint64_t)"%s%d%s%d", v41, v42, v43, v44, "pMrk[1].posCur");
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"First Input Stream is a SYNC marker, but update using lastOutSyncMrk", v42, v43, v44, v90);
      cstdlib_memcpy(v34, (const void *)(a1 + 120), 0x40uLL);
      *uint64_t v34 = 0;
      v34[7] = 0;
      v34[9] = 0;
      *((void *)v34 + 5) = 0;
    }
  }
  else
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"First Input Stream is not a SYNC marker, so clone it an make it a SYNC marker", v42, v43, v44, v90);
    cstdlib_memmove(v34 + 16, v34, (unint64_t)*(unsigned __int16 *)(v97 + 16) << 6);
    if (*(_DWORD *)(a1 + 140)) {
      uint64_t v58 = (const void *)(a1 + 120);
    }
    else {
      uint64_t v58 = v34 + 16;
    }
    cstdlib_memcpy(v34, v58, 0x40uLL);
    v34[5] = 0x4000;
    *uint64_t v34 = 1;
    v34[7] = 0;
    v34[9] = 0;
    *((void *)v34 + 5) = 0;
    ++*(_WORD *)(v97 + 16);
  }
LABEL_54:
  uint64_t v57 = datac_RequestBlock(*(void *)(a1 + 8), 1039, 1u, &v95);
  if ((v57 & 0x80000000) == 0)
  {
    uint64_t v62 = *(void *)(v95 + 8);
    unint64_t v63 = *(unsigned __int16 *)(v95 + 16);
    if (*(_WORD *)(v95 + 16))
    {
      uint64_t v64 = 0;
      int v65 = 0;
      unsigned __int16 v66 = 0;
      uint64_t v67 = 32;
      do
      {
        if (*(_DWORD *)(v62 + v67) < v34[8])
        {
          unsigned __int16 v66 = v64;
          int v65 = 1;
        }
        ++v64;
        v67 += 64;
      }
      while (v63 != v64);
      if (v65 == 1)
      {
        uint64_t v68 = v66 + 1;
        LODWORD(v63) = v63 - v68;
        if (v63)
        {
          cstdlib_memmove(*(void **)(v95 + 8), (const void *)(v62 + (v68 << 6)), (uint64_t)(int)v63 << 6);
          LOWORD(v63) = *(_WORD *)(v95 + 16) - v68;
          *(_WORD *)(v95 + 16) = v63;
        }
        else
        {
          *(_WORD *)(v95 + 16) = 0;
        }
      }
    }
    if (*(_DWORD *)(a1 + 236) == 1)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"Persistent Markers", v59, v60, v61, v90);
      if (!*(_WORD *)(v95 + 16)) {
        return v57;
      }
      unint64_t v72 = 0;
      uint64_t v73 = v62 + 36;
      do
      {
        v73 += 64;
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"PP_SENT_PARSER", 5, 0, (uint64_t)"pPersistMrk[%d] %d %d,%d %d,%d", v69, v70, v71, v72++);
        unint64_t v63 = *(unsigned __int16 *)(v95 + 16);
      }
      while (v72 < v63);
    }
    if ((_WORD)v63)
    {
      uint64_t v57 = datac_RequestBlock(*(void *)(a1 + 8), 1011, (unsigned __int16)((*(_WORD *)(v97 + 16) + v63) & 0x3FF) << 6, &v97);
      if ((v57 & 0x80000000) == 0)
      {
        if (*(_WORD *)(v95 + 16))
        {
          unint64_t v74 = 0;
          uint64_t v75 = v97;
          uint64_t v76 = *(void *)(v97 + 8);
          do
          {
            uint64_t v77 = *(unsigned __int16 *)(v75 + 16);
            if (v77)
            {
              uint64_t v78 = 0;
              unsigned __int16 v79 = 0;
              BOOL v80 = 0;
              uint64_t v81 = v62 + (v74 << 6);
              unsigned int v84 = *(_DWORD *)(v81 + 32);
              uint64_t v82 = (int *)(v81 + 32);
              unsigned int v83 = v84;
              uint64_t v85 = (_DWORD *)(v76 + 40);
              while (v83 >= *(v85 - 2))
              {
                if (*(v85 - 5) == 7)
                {
                  BOOL v80 = !v80;
                  if (*v85 == 43) {
                    unsigned __int16 v79 = v78;
                  }
                  else {
                    BOOL v80 = 0;
                  }
                }
                v85 += 16;
                if (v77 == ++v78)
                {
                  LOWORD(v78) = v77;
                  break;
                }
              }
              if (v80)
              {
                int v86 = *v82;
                int v87 = *(_DWORD *)(v76 + ((unint64_t)v79 << 6) + 32);
                if (v77 - 1 != v79) {
                  unsigned __int16 v79 = v77;
                }
                if (v86 != v87) {
                  unsigned __int16 v79 = v78;
                }
                if (v77 == (unsigned __int16)v78) {
                  LOWORD(v78) = v79;
                }
              }
            }
            else
            {
              LOWORD(v78) = 0;
            }
            if (v77 == (unsigned __int16)v78)
            {
              uint64_t v88 = (void *)(v76 + (v77 << 6));
            }
            else
            {
              uint64_t v88 = (void *)(v76 + ((unint64_t)(unsigned __int16)v78 << 6));
              cstdlib_memmove((void *)(v76 + ((unint64_t)((unsigned __int16)v78 + 1) << 6)), v88, (uint64_t)(int)(v77 - (unsigned __int16)v78) << 6);
            }
            cstdlib_memcpy(v88, (const void *)(v62 + (v74 << 6)), 0x40uLL);
            uint64_t v75 = v97;
            ++*(_WORD *)(v97 + 16);
            ++v74;
          }
          while (v74 < *(unsigned __int16 *)(v95 + 16));
        }
      }
    }
  }
  return v57;
}

uint64_t pp_sent_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2369789953;
  }
  uint64_t result = 0;
  *a2 = &IPPSentPar;
  return result;
}

uint64_t pp_sent_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v5 = 2369789959;
  uint64_t v19 = 0;
  if (a5 && (InitRsrcFunction(a3, a4, &v21) & 0x80000000) == 0)
  {
    uint64_t v12 = v21;
    uint64_t v13 = v21[4];
    if (v13)
    {
      log_OutText(v13, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjOpen", v9, v10, v11, v18);
      uint64_t v12 = v21;
    }
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t v14 = (void *)heap_Alloc(v12[1], 104);
    if (v14)
    {
      uint64_t v15 = v14;
      cstdlib_memset(v14, 0, 0x68uLL);
      *(void *)uint64_t v15 = a3;
      *((void *)v15 + 1) = a4;
      uint64_t Object = objc_GetObject(v21[6], (uint64_t)"SYNTHSTREAM", &v20);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_14;
      }
      *((void *)v15 + 2) = *(void *)(v20 + 8);
      *((_DWORD *)v15 + 24) = 0;
      if ((paramc_ParamGetStr(v21[5], (uint64_t)"clcpppipelinemode", &v19) & 0x80000000) == 0 && v19 && *v19) {
        *((_DWORD *)v15 + 24) = 1;
      }
      uint64_t Object = sentpar_ObjOpen(a3, a4, *((void *)v15 + 2), (void *)v15 + 11, *((_DWORD *)v15 + 24));
      if ((Object & 0x80000000) != 0)
      {
LABEL_14:
        uint64_t v5 = Object;
        pp_sent_parser_ObjClose((_WORD **)v15, 17557);
      }
      else
      {
        uint64_t v5 = 0;
        *(void *)a5 = v15;
        *(void *)(a5 + 8) = 17557;
      }
    }
    else
    {
      return 2369789962;
    }
  }
  return v5;
}

uint64_t pp_sent_parser_ObjClose(_WORD **a1, int a2)
{
  uint64_t v3 = 2369789959;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjClose", v4, v5, v6, v11);
    }
    uint64_t v8 = a1[11];
    if (v8) {
      sentpar_ObjClose(*a1, (int)a1[1], v8);
    }
    uint64_t v9 = v12;
    if (a1[2])
    {
      objc_ReleaseObject(*(void *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      uint64_t v9 = v12;
    }
    heap_Free(*(void **)(v9 + 8), (uint64_t)a1);
    return 0;
  }
  return v3;
}

uint64_t pp_sent_parser_ObjReopen(_WORD **a1, int a2)
{
  uint64_t v3 = 2369789959;
  uint64_t v11 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v11) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v11 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ObjReopen", v4, v5, v6, v10);
    }
    uint64_t v8 = (uint64_t *)a1[11];
    if (v8) {
      sentpar_ObjReopen(*a1, (uint64_t)a1[1], v8);
    }
    return 0;
  }
  return v3;
}

uint64_t pp_sent_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = 0;
  uint64_t v7 = 2369789959;
  if ((safeh_HandleCheck(a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v33) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v33 + 32);
    if (v11) {
      log_OutText(v11, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ProcessStart", v8, v9, v10, v32);
    }
    uint64_t v12 = 0;
    char v13 = 1;
    do
    {
      char v14 = v13;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, void, uint64_t))(*(void *)(a1 + 16)
                                                                                                  + 64))(a3, a4, 212, szOUTPUT_STREAMS[v12], 0, 0, a1 + 16 * v12 + 24);
      if ((v15 & 0x80000000) != 0) {
        goto LABEL_17;
      }
      char v13 = 0;
      uint64_t v12 = 1;
    }
    while ((v14 & 1) != 0);
    char v16 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v18 + 64);
      if (v16) {
        break;
      }
      char v16 = 1;
      uint64_t v15 = v19(a3, a4, 212, szOUTPUT_STREAMS[v17], 0, 1, a1 + 16 * v17 + 56);
      uint64_t v17 = 1;
      if ((v15 & 0x80000000) != 0) {
        goto LABEL_17;
      }
    }
    uint64_t v20 = (*(uint64_t (**)(void))(v18 + 168))();
    uint64_t v15 = v19(a3, a4, 212, "application/x-realspeak-int-markers-pp;version=4.0", v20, 1, a1 + 72);
    if ((v15 & 0x80000000) != 0)
    {
LABEL_17:
      uint64_t v7 = v15;
      goto LABEL_18;
    }
    uint64_t v7 = sentpar_ProcessStart(v33, *(void *)(a1 + 88), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
    if ((v7 & 0x80000000) == 0) {
      return v7;
    }
LABEL_18:
    uint64_t v21 = 0;
    char v22 = 1;
    do
    {
      char v23 = v22;
      uint64_t v24 = a1 + 16 * v21;
      uint64_t v25 = *(void *)(v24 + 24);
      if (v25)
      {
        (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v25, *(void *)(v24 + 32));
        *(void *)(v24 + 24) = 0;
        *(_DWORD *)(v24 + 32) = 0;
      }
      char v22 = 0;
      uint64_t v21 = 1;
    }
    while ((v23 & 1) != 0);
    uint64_t v26 = 0;
    char v27 = 1;
    do
    {
      char v28 = v27;
      uint64_t v29 = a1 + 16 * v26;
      uint64_t v30 = *(void *)(v29 + 56);
      if (v30)
      {
        (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v30, *(void *)(v29 + 64));
        *(void *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
      }
      char v27 = 0;
      uint64_t v26 = 1;
    }
    while ((v28 & 1) != 0);
  }
  return v7;
}

uint64_t pp_sent_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = 2369789959;
  uint64_t v23 = 0;
  int v22 = 0;
  if ((safeh_HandleCheck(a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1)
  {
    if (!*(void *)(a1 + 24)) {
      return 2369789969;
    }
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v23) & 0x80000000) == 0)
    {
      uint64_t v12 = *(void *)(v23 + 32);
      if (v12) {
        log_OutText(v12, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_Process", v9, v10, v11, v21);
      }
      *a5 = 2;
      uint64_t v13 = sentpar_Process(*(void *)(a1 + 88), &v22, *(void *)(a1 + 72), *(void *)(a1 + 80), v8, v9, v10, v11);
      if ((v13 & 0x80000000) == 0)
      {
        if (v22 == 1)
        {
          uint64_t v7 = paramc_ParamSetStr(*(void *)(v23 + 40), (uint64_t)"ppmarkersetlang", "normal");
          *a5 = 3;
          uint64_t v17 = *(void *)(v23 + 32);
          if (v17) {
            log_OutText(v17, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Immediate Voice Switch!", v14, v15, v16, v21);
          }
          goto LABEL_27;
        }
        uint64_t v18 = sentpar_WriteTextAndMarkers(*(void *)(a1 + 88), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80));
        if ((v18 & 0x80000000) != 0) {
          goto LABEL_22;
        }
        uint64_t v7 = sentpar_ResetMarkerBlocks(*(uint64_t **)(a1 + 88));
        if ((v7 & 0x80000000) != 0
          || !*(_DWORD *)(a1 + 96) && !sentpar_IsTextElementAtEos(*(void *)(a1 + 88)))
        {
          goto LABEL_27;
        }
        *a5 = 1;
        if (*(_DWORD *)(a1 + 96)) {
          goto LABEL_27;
        }
LABEL_21:
        uint64_t v18 = pp_sent_parser_loc_CloseOutStreams(a1);
LABEL_22:
        uint64_t v7 = v18;
        goto LABEL_27;
      }
      uint64_t v7 = v13;
      if ((v13 & 0x1FFF) == 0x800)
      {
        if (!*(_DWORD *)(a1 + 96))
        {
          *a5 = 0;
          if (*(_DWORD *)(a1 + 96)) {
            uint64_t v7 = v13;
          }
          else {
            uint64_t v7 = 0;
          }
LABEL_27:
          uint64_t v19 = *(void *)(v23 + 32);
          if (v19) {
            log_OutText(v19, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Leaving pp_sent_parser_Process peResults=%d fRet=%d", v14, v15, v16, *a5);
          }
          return v7;
        }
        uint64_t v7 = 0;
      }
      else
      {
        if ((v13 & 0x1FFF) == 0x17)
        {
          *a5 = 1;
          goto LABEL_21;
        }
        pp_sent_parser_loc_CloseOutStreams(a1);
      }
      *a5 = 1;
      goto LABEL_27;
    }
  }
  return v7;
}

uint64_t pp_sent_parser_ProcessStop(_WORD **a1, int a2)
{
  uint64_t v3 = 2369789959;
  uint64_t v17 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 17557, 104) & 0x80000000) != 0) {
    return 2369789960;
  }
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v17) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v17 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_SENT_PARSER", 4, 0, (uint64_t)"Entering pp_sent_parser_ProcessStop", v4, v5, v6, v16);
    }
    uint64_t v8 = sentpar_ProcessEnd((uint64_t)a1[11], *a1, (int)a1[1]);
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = pp_sent_parser_loc_CloseOutStreams((uint64_t)a1);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      uint64_t v9 = 0;
      char v10 = 1;
      do
      {
        while (1)
        {
          char v11 = v10;
          uint64_t v12 = &a1[2 * v9];
          uint64_t v13 = v12[3];
          if (v13) {
            break;
          }
          char v10 = 0;
          uint64_t v9 = 1;
          if ((v11 & 1) == 0) {
            return 0;
          }
        }
        int v14 = (*((uint64_t (**)(_WORD *, _WORD *))a1[2] + 9))(v13, v12[4]);
        char v10 = 0;
        void v12[3] = 0;
        *((_DWORD *)v12 + 8) = 0;
        uint64_t v9 = 1;
      }
      while ((v11 & (v14 >= 0)) != 0);
      if (v14 < 0) {
        return v14;
      }
      else {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t pp_sent_parser_loc_CloseOutStreams(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    while (1)
    {
      char v4 = v3;
      uint64_t v5 = a1 + 16 * v2;
      uint64_t v6 = *(void *)(v5 + 56);
      if (v6) {
        break;
      }
      char v3 = 0;
      uint64_t v2 = 1;
      if ((v4 & 1) == 0) {
        return 0;
      }
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v6, *(void *)(v5 + 64));
    char v3 = 0;
    *(void *)(v5 + 56) = 0;
    *(_DWORD *)(v5 + 64) = 0;
    uint64_t v2 = 1;
  }
  while ((((int)result >= 0) & v4) != 0);
  if ((int)result < 0) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t pp_word_parser_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (!a1) {
    return v5;
  }
  uint64_t v6 = *(void *)(a1 + 88);

  return wordpar_ResourceTypes(v6, a3);
}

uint64_t pp_word_parser_ResourceUnload(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (!a1) {
    return v7;
  }
  uint64_t v8 = *(void *)(a1 + 88);

  return wordpar_ResourceUnload(v8, a3, a4);
}

uint64_t pp_word_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2370838529;
  }
  uint64_t result = 0;
  *a2 = &IPPWordParser;
  return result;
}

uint64_t pp_word_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v5 = 2370838535;
  uint64_t v20 = 0;
  if (a5 && (InitRsrcFunction(a3, a4, &v22) & 0x80000000) == 0)
  {
    uint64_t v12 = v22;
    uint64_t v13 = v22[4];
    if (v13)
    {
      log_OutText(v13, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjOpen", v9, v10, v11, v19);
      uint64_t v12 = v22;
    }
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    int v14 = (void *)heap_Alloc(v12[1], 104);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      cstdlib_memset(v14, 0, 0x68uLL);
      *(void *)uint64_t v15 = a3;
      *(void *)(v15 + 8) = a4;
      *(_DWORD *)(v15 + 96) = 0;
      if ((paramc_ParamGetStr(v22[5], (uint64_t)"clcpppipelinemode", &v20) & 0x80000000) == 0 && v20 && *v20) {
        *(_DWORD *)(v15 + 96) = 1;
      }
      uint64_t Object = objc_GetObject(v22[6], (uint64_t)"SYNTHSTREAM", &v21);
      if ((Object & 0x80000000) != 0
        || (uint64_t v17 = *(void *)(v21 + 8),
            *(void *)(v15 + 16) = v17,
            uint64_t Object = wordpar_ObjOpen(a3, a4, v17, (uint64_t *)(v15 + 88), *(_DWORD *)(v15 + 96)),
            (Object & 0x80000000) != 0))
      {
        uint64_t v5 = Object;
        pp_word_parser_ObjClose(v15, 87327);
      }
      else
      {
        uint64_t v5 = 0;
        *(void *)a5 = v15;
        *(void *)(a5 + 8) = 87327;
      }
    }
    else
    {
      return 2370838538;
    }
  }
  return v5;
}

uint64_t pp_word_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = 2370838535;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjClose", v4, v5, v6, v11);
    }
    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      wordpar_ObjClose(v8);
    }
    uint64_t v9 = v12;
    if (*(void *)(a1 + 16))
    {
      objc_ReleaseObject(*(void *)(v12 + 48), (uint64_t)"SYNTHSTREAM");
      uint64_t v9 = v12;
    }
    heap_Free(*(void **)(v9 + 8), a1);
    return 0;
  }
  return v3;
}

uint64_t pp_word_parser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = 2370838535;
  uint64_t v12 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v12) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v12 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ObjReopen", v4, v5, v6, v11);
    }
    uint64_t v8 = *(_WORD ***)(a1 + 88);
    if (v8 && (uint64_t v9 = wordpar_ObjReopen(v8), (v9 & 0x80001FFF) == 0x8000000A))
    {
      uint64_t v3 = v9;
      *(void *)(a1 + 88) = 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t pp_word_parser_ResourceLoad(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = 0;
  uint64_t v13 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v20) & 0x80000000) == 0)
  {
    if (a3 && a7)
    {
      if (a4)
      {
        if (a5 || !a6) {
          return wordpar_ResourceLoad(*(void *)(a1 + 88), a3, a4, a5, a6, a7);
        }
      }
      else if (a5 && a6)
      {
        return wordpar_ResourceLoad(*(void *)(a1 + 88), a3, a4, a5, a6, a7);
      }
    }
    log_OutPublic(*(void *)(v20 + 32), (uint64_t)"PP_WORD_PARSER", 1923, 0, v14, v15, v16, v17, v19);
  }
  return v13;
}

uint64_t pp_word_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = 0;
  uint64_t v7 = 2370838535;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1)
  {
    HIDWORD(v31) = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v32) & 0x80000000) == 0)
    {
      uint64_t v11 = *(void *)(v32 + 32);
      if (v11) {
        log_OutText(v11, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ProcessStart", v8, v9, v10, v31);
      }
      uint64_t WParserType = wordpar_GetWParserType(*(void *)(a1 + 88), (_DWORD *)&v31 + 1);
      if ((WParserType & 0x80000000) != 0)
      {
        return WParserType;
      }
      else
      {
        uint64_t v13 = 0;
        char v14 = 1;
        while (1)
        {
          char v15 = v14;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, void, uint64_t))(*(void *)(a1 + 16) + 64))(a3, a4, 213, szINPUT_STREAMS[v13], 0, 0, a1 + 16 * v13 + 24) & 0x80000000) != 0)break; {
          char v14 = 0;
          }
          uint64_t v13 = 1;
          if ((v15 & 1) == 0)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(a1 + 16) + 64))(a3, a4, 213, "text/plain;charset=utf-8",
                    0,
                    1,
                    a1 + 56) & 0x80000000) == 0)
            {
              uint64_t v16 = *(void *)(a1 + 16);
              uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v16 + 64);
              uint64_t v18 = (*(uint64_t (**)(void))(v16 + 152))();
              if ((v17(a3, a4, 213, "application/x-realspeak-markers-pp;version=4.0", v18, 1, a1 + 72) & 0x80000000) == 0)
              {
                int v19 = wordpar_ProcessStart(*(void *)(a1 + 88));
                return v19 & (v19 >> 31);
              }
            }
            break;
          }
        }
        uint64_t v20 = 0;
        char v21 = 1;
        do
        {
          char v22 = v21;
          uint64_t v23 = a1 + 16 * v20;
          uint64_t v24 = *(void *)(v23 + 24);
          if (v24)
          {
            (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v24, *(void *)(v23 + 32));
            *(void *)(v23 + 24) = 0;
            *(_DWORD *)(v23 + 32) = 0;
          }
          char v21 = 0;
          uint64_t v20 = 1;
        }
        while ((v22 & 1) != 0);
        uint64_t v25 = 0;
        char v26 = 1;
        do
        {
          char v27 = v26;
          uint64_t v28 = a1 + 16 * v25;
          uint64_t v29 = *(void *)(v28 + 56);
          if (v29)
          {
            (*(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v29, *(void *)(v28 + 64));
            *(void *)(v28 + 56) = 0;
            *(_DWORD *)(v28 + 64) = 0;
          }
          char v26 = 0;
          uint64_t v25 = 1;
        }
        while ((v27 & 1) != 0);
        return 0;
      }
    }
  }
  return v7;
}

uint64_t pp_word_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v7 = 2370838535;
  uint64_t v44 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v44) & 0x80000000) == 0)
  {
    uint64_t v11 = v44;
    uint64_t v12 = *(void *)(v44 + 32);
    if (v12)
    {
      log_OutText(v12, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_Process", v8, v9, v10, v40);
      uint64_t v11 = v44;
    }
    *a5 = 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v43 = 0;
    uint64_t v13 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 24), *(void *)(a1 + 32), &v48, (char *)&v47 + 4);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v14 = HIDWORD(v47);
    uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t *))(*(void *)(a1 + 16) + 144))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v47, &v46);
    if ((v7 & 0x80000000) != 0) {
      return v7;
    }
    if (v47)
    {
      if (v47)
      {
        uint64_t v13 = (*(uint64_t (**)(void, void, const char ***, char *))(*(void *)(a1 + 16) + 88))(*(void *)(a1 + 40), *(void *)(a1 + 48), &v43, (char *)&v46 + 4);
        if ((v13 & 0x80000000) != 0) {
          return v13;
        }
        uint64_t v23 = HIDWORD(v46);
        uint64_t v7 = wordpar_LoadFromStreamData(*(void *)(a1 + 88), v48, HIDWORD(v47), v43, HIDWORD(v46));
        LODWORD(v18) = 0;
LABEL_19:
        if ((v7 & 0x80000000) != 0) {
          return v7;
        }
        uint64_t v24 = v43;
        uint64_t v25 = v44;
        uint64_t v48 = 0;
        if ((v23 & 0x3FFFC0) != 0)
        {
          unsigned int v41 = v23;
          unsigned int v42 = v14;
          uint64_t v26 = 0;
          uint64_t v7 = 0;
          uint64_t v27 = (unsigned __int16)(v23 >> 6);
          while (1)
          {
            while (1)
            {
              uint64_t v28 = &v24[8 * v26];
              if (*((_DWORD *)v28 + 5) == 200) {
                break;
              }
LABEL_34:
              if (++v26 == v27)
              {
                uint64_t v23 = v41;
                uint64_t v14 = v42;
                if ((v7 & 0x80000000) != 0) {
                  return v7;
                }
LABEL_50:
                if (v18)
                {
                  LODWORD(v7) = 0;
                  unsigned int v36 = 0;
                  goto LABEL_52;
                }
                unsigned int v38 = wordpar_Process(*(void *)(a1 + 88));
                if ((v38 & 0x1FFF) == 0xA) {
                  uint64_t v7 = v7;
                }
                else {
                  uint64_t v7 = v38;
                }
                if ((v7 & 0x80000000) != 0)
                {
                  if ((v7 & 0x1FFF) == 0x800)
                  {
                    *a5 = 0;
                    if (*(_DWORD *)(a1 + 96)) {
                      return v7;
                    }
                    else {
                      return 0;
                    }
                  }
                  if ((v7 & 0x1FFF) != 0x17)
                  {
                    pp_sent_parser_loc_CloseOutStreams(a1);
                    *a5 = 1;
                    return v7;
                  }
                  *a5 = 1;
                  uint64_t v13 = pp_sent_parser_loc_CloseOutStreams(a1);
                  if ((v13 & 0x80000000) == 0) {
                    return 0;
                  }
                }
                else
                {
                  unsigned int v36 = v38;
                  if ((v38 & 0x1FFF) == 0xA
                    || (uint64_t v13 = wordpar_WriteTextAndMarkers(*(void *)(a1 + 88), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80)), (v13 & 0x80000000) == 0))
                  {
                    uint64_t v13 = wordpar_ResetData(*(void *)(a1 + 88));
                    if ((v13 & 0x80000000) == 0)
                    {
                      uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 24), *(void *)(a1 + 32), v14);
                      if ((v13 & 0x80000000) == 0)
                      {
                        uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 16) + 96))(*(void *)(a1 + 40), *(void *)(a1 + 48), v23);
                        if ((v7 & 0x80000000) == 0)
                        {
LABEL_52:
                          uint64_t v37 = *(void *)(v44 + 32);
                          if (v37) {
                            log_OutText(v37, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Leaving pp_word_parser_Process", v15, v16, v17, v40);
                          }
                          if ((v36 & 0x1FFF) == 0xA) {
                            return v36;
                          }
                          else {
                            return v7;
                          }
                        }
                        return v7;
                      }
                    }
                  }
                }
                return v13;
              }
            }
            uint64_t v31 = v28[5];
            uint64_t v30 = (char **)(v28 + 5);
            uint64_t v29 = v31;
            if (v31 && cstdlib_strlen(v29) && LH_stricmp(*v30, "unset"))
            {
              if (LH_stricmp(*v30, "reset"))
              {
                uint64_t v32 = *v30;
              }
              else
              {
                int Str = paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)"shortfragmentforceclm_value_pipeline", &v48);
                if (v48) {
                  BOOL v35 = Str < 0;
                }
                else {
                  BOOL v35 = 1;
                }
                if (v35) {
                  uint64_t v32 = "";
                }
                else {
                  uint64_t v32 = (char *)v48;
                }
              }
            }
            else
            {
              uint64_t v32 = "";
            }
            uint64_t v33 = paramc_ParamSetStr(*(void *)(v25 + 40), (uint64_t)"shortfragmentforceclm", v32);
            uint64_t v7 = v33;
            if ((v33 & 0x80000000) == 0)
            {
              log_OutText(*(void *)(v25 + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Parameter markup \"\\!\\%s=%s\\\" => set \"%s=%s\"", v15, v16, v17, (uint64_t)"shortfragmentforceclm");
              goto LABEL_34;
            }
            if ((v33 & 0x1FFF) != 0xF) {
              goto LABEL_34;
            }
            log_OutText(*(void *)(v25 + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Parameter markup \"\\!\\%s=%s\\\" => set \"%s=%s\" : failed, invalid parameter value", v15, v16, v17, (uint64_t)"shortfragmentforceclm");
            uint64_t v7 = 0;
            if (++v26 == v27)
            {
              LODWORD(v7) = 0;
              uint64_t v23 = v41;
              uint64_t v14 = v42;
              goto LABEL_50;
            }
          }
        }
LABEL_49:
        LODWORD(v7) = 0;
        goto LABEL_50;
      }
      LODWORD(v18) = 0;
    }
    else
    {
      if (v46)
      {
        uint64_t v18 = 0;
        char v19 = 1;
        do
        {
          char v20 = v19;
          uint64_t v21 = a1 + 16 * v18;
          uint64_t v22 = *(void *)(v21 + 56);
          if (v22)
          {
            uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v22, *(void *)(v21 + 64));
            *(void *)(v21 + 56) = 0;
            *(_DWORD *)(v21 + 64) = 0;
          }
          char v19 = 0;
          uint64_t v18 = 1;
        }
        while ((v20 & 1) != 0);
        uint64_t v23 = 0;
        goto LABEL_19;
      }
      uint64_t v45 = 0;
      if ((paramc_ParamGetStr(*(void *)(v11 + 40), (uint64_t)"clcpppipelinemode", &v45) & 0x80000000) != 0
        || !v45
        || !*v45)
      {
        *a5 = 0;
      }
      LODWORD(v18) = 1;
    }
    uint64_t v23 = 0;
    goto LABEL_49;
  }
  return v7;
}

uint64_t pp_word_parser_ProcessStop(uint64_t a1, int a2)
{
  uint64_t v3 = 2370838535;
  uint64_t v17 = 0;
  if ((safeh_HandleCheck(a1, a2, 87327, 104) & 0x80000000) != 0) {
    return 2370838536;
  }
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v17) & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(v17 + 32);
    if (v7) {
      log_OutText(v7, (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"Entering pp_word_parser_ProcessStop", v4, v5, v6, v16);
    }
    uint64_t v8 = wordpar_ProcessEnd(*(void *)(a1 + 88));
    if ((v8 & 0x80000000) != 0) {
      return v8;
    }
    uint64_t v8 = pp_sent_parser_loc_CloseOutStreams(a1);
    if ((v8 & 0x80000000) != 0)
    {
      return v8;
    }
    else
    {
      uint64_t v9 = 0;
      char v10 = 1;
      do
      {
        while (1)
        {
          char v11 = v10;
          uint64_t v12 = a1 + 16 * v9;
          uint64_t v13 = *(void *)(v12 + 24);
          if (v13) {
            break;
          }
          char v10 = 0;
          uint64_t v9 = 1;
          if ((v11 & 1) == 0) {
            return 0;
          }
        }
        int v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 16) + 72))(v13, *(void *)(v12 + 32));
        char v10 = 0;
        *(void *)(v12 + 24) = 0;
        *(_DWORD *)(v12 + 32) = 0;
        uint64_t v9 = 1;
      }
      while ((v11 & (v14 >= 0)) != 0);
      if (v14 < 0) {
        return v14;
      }
      else {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t wordpar_freeBRKDefs(uint64_t a1)
{
  if (!*(void *)(a1 + 152)) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5);
  if ((inited & 0x80000000) != 0) {
    return 2370838535;
  }
  uint64_t v3 = inited;
  heap_Free(*(void **)(v5 + 8), *(void *)(a1 + 152));
  *(void *)(a1 + 152) = 0;
  return v3;
}

uint64_t wordpar_getBRKDefs(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!*(void *)(a1 + 152))
  {
    uint64_t v4 = 2370838535;
    unsigned __int16 __dst = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13) & 0x80000000) == 0)
    {
      cstdlib_memcpy(&__dst, (const void *)a4, 2uLL);
      *(_DWORD *)(a1 + 164) = __dst;
      cstdlib_memcpy(&v14, (const void *)(a4 + 2), 4uLL);
      LODWORD(v14) = v14 + 1;
      uint64_t v10 = heap_Calloc(*(void **)(v13 + 8), 1, v14);
      *(void *)(a1 + 152) = v10;
      if (v10)
      {
        cstdlib_memcpy((char *)&v14 + 4, (const void *)(a4 + 6), 4uLL);
        unsigned int StringZ = ssftriff_reader_ReadStringZ(a2, a4, a3, HIDWORD(v14) + 10, *(unsigned char **)(a1 + 152), (unsigned int *)&v14);
        if ((StringZ & 0x80000000) == 0)
        {
          if (*(void *)(a1 + 152)) {
            return StringZ;
          }
          else {
            return 2370838535;
          }
        }
      }
      else
      {
        wordpar_freeBRKDefs(a1);
        return 2370838538;
      }
    }
  }
  return v4;
}

uint64_t wordpar_loc_nonasian_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v254 = 0;
  uint64_t v255 = 0;
  if (!a1) {
    return 2370838535;
  }
  uint64_t v9 = a1;
  int v256 = 0;
  uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 32) + 136))(a2, a3, &v256);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v9 + 168), *(void *)(v9 + 16), *(void *)(v9 + 24), 1021, (uint64_t)"start wordpar_WriteTextAndMarkers()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v9 + 168), *(void *)(v9 + 16), *(void *)(v9 + 24), 1020, (uint64_t)"start wordpar_WriteTextAndMarkers()");
  uint64_t v258 = 0;
  v259[0] = 0;
  uint64_t v257 = 0;
  unsigned __int16 v11 = cstdlib_strlen((const char *)(v9 + 180));
  uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1020, 1u, v259);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  uint64_t v12 = *(char **)(v259[0] + 8);
  uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1021, 1u, &v258);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  uint64_t v13 = *(void *)(v258 + 8);
  uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1012, 1u, &v257);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  uint64_t v233 = a2;
  uint64_t v234 = a3;
  uint64_t v226 = a4;
  uint64_t v227 = a5;
  uint64_t v14 = v258;
  unsigned int v15 = *(unsigned __int16 *)(v258 + 16);
  uint64_t v244 = v9;
  if (v15 >= 2)
  {
    uint64_t v16 = 0;
    unsigned __int16 v224 = v11;
    size_t v253 = v11;
    uint64_t v17 = 1;
    int v225 = -1;
    int v18 = 1;
    unsigned __int16 v228 = v11;
    uint64_t v19 = v13;
    char v20 = v12;
    long long __src = (char *)(v9 + 180);
    while (1)
    {
      unint64_t v21 = v19 + ((unint64_t)(unsigned __int16)v17 << 6);
      int v24 = *(_DWORD *)(v21 + 20);
      uint64_t v23 = (_DWORD *)(v21 + 20);
      int v22 = v24;
      if (v24 == 21)
      {
        uint64_t v16 = v17;
        goto LABEL_246;
      }
      if (v22 == 7)
      {
        unint64_t v25 = v19 + ((unint64_t)(unsigned __int16)v17 << 6);
        uint64_t v26 = (_DWORD *)(v25 + 40);
        if (*(_DWORD *)(v25 + 40) == 43)
        {
          uint64_t v29 = *(char **)(v25 + 48);
          uint64_t v27 = (void *)(v25 + 48);
          uint64_t v28 = v29;
          if (v29) {
            break;
          }
        }
      }
LABEL_246:
      uint64_t v17 = (v17 + 1);
      int v18 = (unsigned __int16)v17;
      unsigned int v15 = *(unsigned __int16 *)(v14 + 16);
      if ((unsigned __int16)v17 >= v15) {
        goto LABEL_271;
      }
    }
    int v30 = *(_DWORD *)(v19 + 32);
    uint64_t v238 = (v18 + 1);
    LODWORD(v31) = v18 + 1;
    if ((unsigned __int16)v15 > (unsigned __int16)(v18 + 1))
    {
      uint64_t v31 = (unsigned __int16)(v18 + 1);
      uint64_t v32 = (int *)(v19 + (v31 << 6) + 20);
      while (1)
      {
        int v33 = *v32;
        v32 += 16;
        if (v33 == 7) {
          break;
        }
        if ((unsigned __int16)v15 == ++v31) {
          goto LABEL_19;
        }
      }
    }
    if ((unsigned __int16)v31 == (unsigned __int16)v15)
    {
LABEL_19:
      int v242 = *(_DWORD *)(v19 + 36);
    }
    else
    {
      int v242 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v31 << 6) + 32) - v30;
      unsigned int v15 = v31;
    }
    int v34 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 32) - v30;
    uint64_t v248 = (unsigned __int16)(*(_WORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 32) - v30);
    unsigned int v250 = v15;
    unint64_t v235 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v17 << 6) + 56);
    uint64_t v237 = v16;
    float v251 = v20;
    uint64_t v240 = (unsigned __int16)v17;
    uint64_t v243 = v19;
    int v229 = v18;
    unsigned __int16 v239 = v34;
    if (!*v235) {
      goto LABEL_61;
    }
    unsigned int v35 = v242 - v34;
    *uint64_t v27 = 0;
    unsigned int v36 = (unsigned __int16)(v242 - v34);
    if ((_WORD)v242 == (_WORD)v34) {
      goto LABEL_61;
    }
    uint64_t v231 = v26;
    uint64_t v37 = &v20[v248];
    unsigned int v38 = 0;
    while (utf8_BelongsToSet(0, v37, v38, (unsigned __int16)v35))
    {
      if (v36 == ++v38)
      {
        unsigned int v38 = v35;
        break;
      }
    }
    if ((_WORD)v35 == 1)
    {
LABEL_31:
      LOWORD(v35) = 1;
    }
    else
    {
      unsigned int v39 = (unsigned __int16)(v35 - 1);
      while (utf8_BelongsToSet(0, v37, v39, v36))
      {
        LOWORD(v35) = v35 - 1;
        if (!(_WORD)--v39) {
          goto LABEL_31;
        }
      }
    }
    if ((unsigned __int16)v38 >= (unsigned __int16)v35) {
      goto LABEL_61;
    }
    unsigned __int16 v245 = 0;
    char v40 = 95;
    unsigned int v41 = v38;
    do
    {
      int v42 = v37[(unsigned __int16)v41];
      if (v42 == 35 || v42 == 95)
      {
        if (v40 != 35 && v40 != 95) {
          ++v245;
        }
      }
      else
      {
        BOOL v85 = v42 == 92;
        uint64_t v43 = (unsigned __int16)v41 + 1;
        BOOL v44 = !v85 || v43 >= (unsigned __int16)v35;
        if (!v44 && v37[v43] == 84)
        {
          for (unsigned int i = v41 + 2;
                (unsigned __int16)i < (unsigned __int16)v35;
                i += utf8_determineUTF8CharLength(v46))
          {
            unsigned int v46 = v37[(unsigned __int16)i];
            if (v46 == 92) {
              break;
            }
          }
          if (v37[(unsigned __int16)i] == 92) {
            unsigned int v41 = i;
          }
          uint64_t v9 = v244;
        }
      }
      if (!utf8_BelongsToSet(0, v37, (unsigned __int16)v41, v36)) {
        char v40 = v37[(unsigned __int16)v41];
      }
      ++v41;
    }
    while ((unsigned __int16)v41 < (unsigned __int16)v35);
    if (v40 != 35 && v40 != 95) {
      ++v245;
    }
    if (v245)
    {
      unsigned __int16 v47 = v38 + v239;
      unsigned __int16 v48 = v35 - v38;
      uint64_t v49 = v257;
      unsigned int v50 = *(unsigned __int16 *)(v257 + 16);
      unsigned __int16 v51 = v35 - v38 + v50 + 1;
      if (*(unsigned __int16 *)(v257 + 18) >= v51)
      {
        unsigned __int16 v52 = v245;
      }
      else
      {
        uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1012, (unsigned __int16)(v35 - v38 + v50 + 1), &v257);
        unsigned __int16 v52 = v245;
        if ((inserted & 0x80000000) != 0) {
          return inserted;
        }
        uint64_t v49 = v257;
        unsigned int v50 = *(unsigned __int16 *)(v257 + 16);
      }
      __int16 v163 = (char *)(*(void *)(v49 + 8) + *(unsigned __int16 *)(v49 + 2) * (unint64_t)v50);
      cstdlib_strncpy(v163, &v251[v47], v48);
      v163[v48] = 0;
      *uint64_t v23 = 34;
      *uint64_t v231 = *(unsigned __int16 *)(v257 + 16);
      *(_WORD *)(v257 + 16) = v51;
    }
    else
    {
LABEL_61:
      unsigned __int16 v52 = 0;
    }
    unsigned __int16 v53 = cstdlib_strlen(v28);
    unsigned __int16 v54 = v53;
    unsigned int v55 = v53;
    if (v53)
    {
      uint64_t v56 = 0;
      int v57 = v53;
      while (utf8_BelongsToSet(1u, v28, v56, v55) == 1)
      {
        if (v57 == ++v56)
        {
          LOWORD(v56) = v54;
          if (!v54) {
            goto LABEL_96;
          }
          goto LABEL_71;
        }
      }
      if (!(_WORD)v56) {
        goto LABEL_72;
      }
      if (!utf8_BelongsToSet(1u, v28, v56, v55)) {
        cstdlib_memmove(v28, &v28[v56], v54 - v56);
      }
LABEL_71:
      v54 -= v56;
      v28[v54] = 0;
    }
LABEL_72:
    unsigned int v58 = v54;
    if (v54)
    {
      if (v54 == 1) {
        goto LABEL_84;
      }
      unsigned int v59 = (unsigned __int16)(v54 - 1) + 1;
      while (utf8_BelongsToSet(1u, v28, v59 - 1, v54) == 1)
      {
        __int16 v60 = v59-- - 2;
        if (!v60) {
          goto LABEL_82;
        }
      }
      if (v54 != v59 && !utf8_BelongsToSet(1u, v28, v59 - 1, v54))
      {
        v28[v59] = 0;
        unsigned __int16 v54 = cstdlib_strlen(v28);
      }
LABEL_82:
      if (v54)
      {
        unsigned int v58 = v54;
LABEL_84:
        unsigned int v61 = 0;
        LOWORD(v62) = 0;
        unsigned __int16 v63 = *v28 != 0;
        do
        {
          if (!v28[(unsigned __int16)v62]) {
            break;
          }
          int v64 = utf8_BelongsToSet(1u, v28, v61, v58);
          if ((unsigned __int16)v62 < v54 && v64 == 1)
          {
            unsigned int v62 = (unsigned __int16)v62;
            while (utf8_BelongsToSet(1u, v28, v62, v58) == 1)
            {
              if (v58 == ++v62)
              {
                LOWORD(v62) = v54;
                goto LABEL_94;
              }
            }
            if (v28[(unsigned __int16)v62]) {
              ++v63;
            }
          }
LABEL_94:
          LOWORD(v62) = v62 + 1;
          unsigned int v61 = (unsigned __int16)v62;
        }
        while ((unsigned __int16)v62 < v54);
        goto LABEL_98;
      }
LABEL_96:
      unsigned __int16 v54 = 0;
      unsigned int v58 = 0;
    }
    else
    {
      unsigned __int16 v54 = 0;
    }
    unsigned __int16 v63 = 0;
LABEL_98:
    unsigned __int16 v65 = 0;
    if (v52 && *v235)
    {
      if (v63 == v52)
      {
        unsigned __int16 v65 = 0;
        unsigned __int16 v66 = 0;
        __int16 v241 = 0;
      }
      else if (v63 >= v52)
      {
        uint64_t v125 = *(void *)(v9 + 24);
        unsigned __int16 v126 = *(_WORD *)(v258 + 16) + 1;
        *(_WORD *)(v258 + 16) = v126;
        uint64_t inserted = datac_RequestBlock(v125, 1021, v126, &v258);
        if ((inserted & 0x80000000) != 0) {
          return inserted;
        }
        uint64_t v127 = *(void *)(v258 + 8);
        uint64_t v128 = (_DWORD *)(v127 + ((unint64_t)(unsigned __int16)v238 << 6));
        cstdlib_memmove((void *)(v127 + ((unint64_t)((unsigned __int16)v238 + 1) << 6)), v128, (uint64_t)(*(unsigned __int16 *)(v258 + 16) - v229) << 6);
        __int16 v129 = *(_WORD *)(v257 + 16);
        unsigned __int16 v130 = v129 + cstdlib_strlen(v28) + 1;
        uint64_t v131 = v257;
        if (*(unsigned __int16 *)(v257 + 18) < v130)
        {
          uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1012, v130, &v257);
          if ((inserted & 0x80000000) != 0) {
            return inserted;
          }
          uint64_t v131 = v257;
        }
        __int16 v241 = v63 - v52;
        ++v250;
        cstdlib_strcpy((char *)(*(void *)(v131 + 8)+ *(unsigned __int16 *)(v131 + 2) * (unint64_t)*(unsigned __int16 *)(v131 + 16)), v28);
        v128[10] = *(unsigned __int16 *)(v257 + 16);
        *(_WORD *)(v257 + 16) = v130;
        uint64_t v243 = v127;
        unint64_t v132 = v127 + ((unint64_t)(unsigned __int16)v17 << 6);
        int v133 = *(_DWORD *)(v132 + 24);
        v128[5] = 100;
        v128[6] = v133;
        v128[8] = *(_DWORD *)(v132 + 32) + 1;
        *uint64_t v128 = 1;
        int v134 = cstdlib_strlen(v28);
        unsigned __int16 v65 = 0;
        unsigned __int16 v66 = 0;
        v128[7] = v134;
      }
      else
      {
        __int16 v241 = 0;
        unsigned __int16 v66 = v52 - v63;
        unsigned __int16 v65 = (v52 - v63) * v224;
      }
    }
    else
    {
      unsigned __int16 v66 = 0;
      __int16 v241 = 0;
    }
    int v67 = v58 + v65;
    int v68 = (unsigned __int16)v242 - v248;
    unsigned __int16 v69 = v67 - (v242 - v248);
    unsigned __int16 v246 = v52;
    int v232 = v67;
    if (v67 <= v68)
    {
      int v73 = v68 - v67;
      int v236 = -v73;
      cstdlib_memmove((void *)&v251[(unsigned __int16)v242 - (unsigned __int16)v73], &v251[(unsigned __int16)v242], *(unsigned __int16 *)(v259[0] + 16) - (unint64_t)(unsigned __int16)v242);
      uint64_t v71 = v259[0];
      __int16 v72 = *(_WORD *)(v259[0] + 16) - v73;
      uint64_t v70 = v251;
LABEL_107:
      *(_WORD *)(v71 + 16) = v72;
      cstdlib_strncpy((char *)&v70[v248], v28, v54);
      int v252 = (char *)v70;
      unsigned int v74 = cstdlib_strlen(v70);
      uint64_t v75 = v66;
      size_t v76 = v253;
      if (v66)
      {
        uint64_t v77 = &v252[v58 + v248];
        do
        {
          cstdlib_strncpy(v77, __src, v76);
          size_t v76 = v253;
          v77 += v253;
          --v75;
        }
        while (v75);
      }
      heap_Free(*(void **)(*(void *)(v9 + 16) + 8), (uint64_t)v28);
      if (v241)
      {
        unsigned __int16 PreviousUtf8Offset = v58 + v239 + v66 * v228;
        uint64_t v16 = v237;
        unsigned int v79 = v250;
        char v20 = v252;
        uint64_t v80 = (unsigned __int16)v17;
        while (--PreviousUtf8Offset)
        {
          if (*(unsigned __int16 *)(v259[0] + 16) <= PreviousUtf8Offset
            || utf8_BelongsToSet(1u, v252, PreviousUtf8Offset, v74) != 1)
          {
            while (1)
            {
              unsigned int v81 = *(unsigned __int16 *)(v259[0] + 16);
              if (PreviousUtf8Offset >= v81) {
                break;
              }
              if (utf8_BelongsToSet(1u, v252, PreviousUtf8Offset, v74))
              {
                unsigned int v81 = *(unsigned __int16 *)(v259[0] + 16);
                break;
              }
              unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v252, PreviousUtf8Offset);
              if (!PreviousUtf8Offset) {
                goto LABEL_139;
              }
            }
            if (v81 > PreviousUtf8Offset)
            {
              do
              {
                while (*(unsigned __int16 *)(v259[0] + 16) > PreviousUtf8Offset
                     && utf8_BelongsToSet(1u, v252, PreviousUtf8Offset, v74) == 1)
                {
                  v252[PreviousUtf8Offset--] = 45;
                  if (!PreviousUtf8Offset) {
                    goto LABEL_139;
                  }
                }
                --v241;
                while (1)
                {
                  unsigned int v84 = *(unsigned __int16 *)(v259[0] + 16);
                  if (PreviousUtf8Offset >= v84) {
                    break;
                  }
                  if (utf8_BelongsToSet(1u, v252, PreviousUtf8Offset, v74))
                  {
                    unsigned int v84 = *(unsigned __int16 *)(v259[0] + 16);
                    break;
                  }
                  unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v252, PreviousUtf8Offset);
                  if (!PreviousUtf8Offset) {
                    goto LABEL_139;
                  }
                }
                BOOL v85 = v84 <= PreviousUtf8Offset || v241 == 0;
              }
              while (!v85);
            }
            break;
          }
        }
LABEL_139:
        unint64_t v82 = *(unsigned __int16 *)(v258 + 16);
        if (v82 >= 2)
        {
          uint64_t v83 = v243;
          int v86 = *(_DWORD *)(v243 + 32);
          unsigned int v87 = v86 + v248;
          unsigned int v88 = v86 + (unsigned __int16)v242;
          unint64_t v89 = v82 - 1;
          uint64_t v90 = (unsigned int *)(v243 + 96);
          uint64_t v91 = v238;
          __int16 v92 = v236;
          do
          {
            if (*v90 > v87 && *v90 < v88) {
              *uint64_t v90 = v87;
            }
            v90 += 16;
            --v89;
          }
          while (v89);
LABEL_150:
          *(_DWORD *)(v83 + 36) = *(unsigned __int16 *)(v259[0] + 16);
          wordpar_loc_adjustMarkerPositions(v82, v243, (unsigned __int16)v91, v239, (unsigned __int16)v242, v92);
          uint64_t v19 = v243;
          unint64_t v94 = (_DWORD *)(v243 + (v80 << 6));
          if (!v246 || !v94[14])
          {
            uint64_t v14 = v258;
            unint64_t v100 = *(unsigned __int16 *)(v258 + 16);
            if (v100 >= 2)
            {
              uint64_t v101 = (_DWORD *)(v243 + 100);
              unint64_t v102 = v100 - 1;
              while (*(v101 - 4) != 1 || *(v101 - 1) != *(_DWORD *)(v243 + (v80 << 6) + 32))
              {
                v101 += 16;
                if (!--v102) {
                  goto LABEL_241;
                }
              }
              if (*(v101 - 4) == 1)
              {
                unsigned int v159 = *(unsigned __int16 *)(v243 + 36);
                unsigned int v160 = (unsigned __int16)(*((_WORD *)v101 - 2) - *(_DWORD *)(v243 + 32));
                if (v160 >= v159)
                {
                  unsigned __int16 v161 = 0;
                }
                else
                {
                  unsigned __int16 v161 = 0;
                  do
                  {
                    if (utf8_BelongsToSet(0, v252, v160, v74)) {
                      break;
                    }
                    __int16 v162 = utf8_determineUTF8CharLength(v252[v160]);
                    v161 += v162;
                    unsigned int v160 = (unsigned __int16)(v162 + v160);
                  }
                  while (v160 < v159);
                  uint64_t v14 = v258;
                  LODWORD(v100) = *(unsigned __int16 *)(v258 + 16);
                  uint64_t v19 = v243;
                  uint64_t v91 = v238;
                }
                *uint64_t v101 = v161;
              }
LABEL_241:
              char v20 = v252;
            }
            if (v91 != v100)
            {
              cstdlib_memmove(v94, (const void *)(v19 + (v91 << 6)), (uint64_t)((int)v100 - v229) << 6);
              uint64_t v19 = v243;
              uint64_t v14 = v258;
              LOWORD(v100) = *(_WORD *)(v258 + 16);
            }
            *(_WORD *)(v14 + 16) = v100 - 1;
            goto LABEL_245;
          }
          unsigned int v95 = v232 + v248 + *(_DWORD *)(v243 + 32);
          uint64_t v14 = v258;
          unsigned int v96 = *(unsigned __int16 *)(v258 + 16);
          for (unsigned __int16 j = 1; v96 > j; ++j)
          {
            unint64_t v98 = v243 + ((unint64_t)j << 6);
            unsigned int v99 = *(_DWORD *)(v98 + 32);
            if (v99 == v95 && *(_DWORD *)(v98 + 20) == 21)
            {
              uint64_t v105 = (unsigned __int16)v79;
LABEL_191:
              uint64_t v247 = v105;
              int v135 = (unsigned int *)(v19 + (v105 << 6) + 32);
              uint64_t v249 = (unsigned int *)(v19 + (v80 << 6) + 32);
              int v136 = (unsigned int *)(v19 + 96);
              char v137 = 1;
              uint64_t v138 = v19;
              char v20 = v252;
              while (2)
              {
                char v139 = v137;
                int v140 = *(_DWORD *)(v19 + 32);
                if (v139)
                {
                  unsigned int v141 = *v249;
                  unsigned __int16 v142 = *v249 - v140;
                  if (v142 && v20[v142 - 1] != 32)
                  {
                    unsigned __int16 v143 = *(_WORD *)(v258 + 16) + 1;
                    LOWORD(v144) = *(_WORD *)(v259[0] + 16);
                    goto LABEL_201;
                  }
LABEL_218:
                  char v137 = 0;
                  if ((v139 & 1) == 0) {
                    goto LABEL_219;
                  }
                  continue;
                }
                break;
              }
              unsigned int v141 = *v135;
              unsigned __int16 v142 = *v135 - v140;
              if (v142)
              {
                unsigned int v144 = *(unsigned __int16 *)(v259[0] + 16);
                if (v142 < v144 && v20[v142] != 32 && v20[v142 - 1] != 32)
                {
                  unsigned __int16 v143 = v79;
LABEL_201:
                  uint64_t inserted = datac_RequestBlock(*(void *)(v244 + 24), 1020, (unsigned __int16)(v144 + 1), v259);
                  if ((inserted & 0x80000000) != 0) {
                    return inserted;
                  }
                  uint64_t v145 = *(char **)(v259[0] + 8);
                  uint64_t v146 = v145;
                  int v147 = &v145[v142];
                  cstdlib_memmove(&v145[v142 + 1], v147, *(unsigned __int16 *)(v259[0] + 16) - (unint64_t)v142);
                  *int v147 = 32;
                  ++*(_WORD *)(v259[0] + 16);
                  uint64_t v14 = v258;
                  unint64_t v148 = *(unsigned __int16 *)(v258 + 16);
                  uint64_t v19 = v138;
                  if (v148 < 2)
                  {
LABEL_217:
                    ++*(_DWORD *)(v138 + 36);
                    char v20 = v146;
                    unsigned int v79 = v250;
                    goto LABEL_218;
                  }
                  unint64_t v149 = v148 - 1;
                  uint64_t v150 = v143 - 1;
                  long long v151 = v136;
                  uint64_t v152 = 1;
                  while (2)
                  {
                    if (v139)
                    {
                      unsigned int v153 = *v151;
                      if (*v151 >= v141)
                      {
                        BOOL v154 = v153 == v141 && *(v151 - 3) == 21;
                        int v155 = v151;
                        if (!v154) {
LABEL_215:
                        }
                          *int v155 = v153 + 1;
                      }
                    }
                    else if (v150)
                    {
                      unsigned int v153 = *v151;
                      if (*v151 >= v141)
                      {
                        int v155 = (unsigned int *)(v138 + (v152 << 6) + 32);
                        goto LABEL_215;
                      }
                    }
                    ++v152;
                    v151 += 16;
                    --v150;
                    if (!--v149) {
                      goto LABEL_217;
                    }
                    continue;
                  }
                }
              }
LABEL_219:
              if (*(_DWORD *)(v19 + (v240 << 6) + 20) == 34)
              {
                uint64_t v14 = v258;
                uint64_t v156 = *(unsigned __int16 *)(v258 + 16);
                uint64_t v9 = v244;
                uint64_t v16 = v237;
                if (v156 > (unsigned __int16)v79 && *(_DWORD *)(v19 + (v247 << 6) + 20) == 21)
                {
                  if (v156 < 2)
                  {
                    long long v158 = v20;
                    LODWORD(v157) = 1;
                  }
                  else
                  {
                    uint64_t v157 = 1;
                    while (*(v136 - 3) != 1 || *v136 != *v249)
                    {
                      ++v157;
                      v136 += 16;
                      if (v156 == v157)
                      {
                        long long v158 = v20;
                        LODWORD(v157) = *(unsigned __int16 *)(v258 + 16);
                        goto LABEL_249;
                      }
                    }
                    long long v158 = v20;
                  }
LABEL_249:
                  unint64_t v164 = v19 + ((unint64_t)(unsigned __int16)v157 << 6);
                  if (*(_DWORD *)(v164 + 20) != 1) {
                    goto LABEL_268;
                  }
                  int v165 = *(_DWORD *)(v164 + 32);
                  if (v165 != *v249) {
                    goto LABEL_268;
                  }
                  unsigned int v166 = *(unsigned __int16 *)(v19 + 36);
                  unsigned int v167 = (unsigned __int16)(v165 - *(_WORD *)(v19 + 32));
                  if (v167 >= v166)
                  {
                    unsigned __int16 v168 = 0;
                  }
                  else
                  {
                    unsigned __int16 v168 = 0;
                    do
                    {
                      if (utf8_BelongsToSet(0, v158, v167, v74)) {
                        break;
                      }
                      __int16 v169 = utf8_determineUTF8CharLength(v158[v167]);
                      v168 += v169;
                      unsigned int v167 = (unsigned __int16)(v169 + v167);
                    }
                    while (v167 < v166);
                    uint64_t v14 = v258;
                    LODWORD(v156) = *(unsigned __int16 *)(v258 + 16);
                    uint64_t v19 = v138;
                  }
                  *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v157 << 6) + 36) = v168;
                  int v170 = v157 + 1;
                  if (v156 > (unsigned __int16)(v157 + 1))
                  {
                    char v20 = v158;
                    do
                    {
                      long long v171 = (_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v170 << 6));
                      if (v171[5] == 1
                        && (unsigned int v172 = v171[8], v172 >= *v249)
                        && v172 < *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v250 << 6) + 32))
                      {
                        uint64_t v173 = (unsigned __int16)v170 + 1;
                        if (v173 != (unsigned __int16)v156)
                        {
                          cstdlib_memmove(v171, (const void *)(v19 + (v173 << 6)), (uint64_t)((unsigned __int16)v156 - (unsigned __int16)v170) << 6);
                          uint64_t v19 = v138;
                          uint64_t v14 = v258;
                        }
                        --*(_WORD *)(v14 + 16);
                        --v250;
                      }
                      else
                      {
                        LODWORD(v157) = v170;
                      }
                      int v170 = v157 + 1;
                      LODWORD(v156) = *(unsigned __int16 *)(v14 + 16);
                    }
                    while (v156 > (unsigned __int16)(v157 + 1));
                    LODWORD(v17) = v250;
                  }
                  else
                  {
LABEL_268:
                    LODWORD(v17) = v250;
                    char v20 = v158;
                  }
                }
                else
                {
                  LODWORD(v17) = v79;
                }
              }
              else
              {
                LODWORD(v17) = v79;
                uint64_t v9 = v244;
                uint64_t v16 = v237;
              }
LABEL_245:
              LODWORD(v17) = v17 - 1;
              goto LABEL_246;
            }
            if (v99 > v95) {
              break;
            }
          }
          uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1021, (unsigned __int16)(v96 + 1), &v258);
          if ((inserted & 0x80000000) == 0)
          {
            uint64_t v103 = *(void *)(v258 + 8);
            int v104 = *(unsigned __int16 *)(v258 + 16);
            if ((unsigned __int16)v79 == v104)
            {
              uint64_t v105 = (unsigned __int16)v79;
              cstdlib_memcpy((void *)(v103 + ((unint64_t)(unsigned __int16)v79 << 6)), (const void *)(v103 + ((uint64_t)((unsigned __int16)v79 - 1) << 6)), 0x40uLL);
              *(_DWORD *)(v103 + ((unint64_t)(unsigned __int16)v79 << 6) + 24) += *(_DWORD *)(v103 + ((unint64_t)(unsigned __int16)v79 << 6) + 28);
            }
            else
            {
              uint64_t v106 = (void *)(v103 + ((unint64_t)((unsigned __int16)v79 + 1) << 6));
              uint64_t v105 = (unsigned __int16)v79;
              cstdlib_memmove(v106, (const void *)(v103 + ((unint64_t)(unsigned __int16)v79 << 6)), (uint64_t)(v104 - (unsigned __int16)v79) << 6);
              cstdlib_memcpy((void *)(v103 + ((unint64_t)(unsigned __int16)v79 << 6)), v106, 0x40uLL);
            }
            uint64_t v107 = v103 + (v105 << 6);
            uint64_t v109 = *(void *)(v107 + 48);
            uint64_t v108 = (void *)(v107 + 48);
            *((_DWORD *)v108 - 7) = 21;
            *((_DWORD *)v108 - 4) = v95;
            *((_DWORD *)v108 - 3) = 0;
            *((_DWORD *)v108 - 5) = 0;
            uint64_t v19 = v103;
            if (v109) {
              *uint64_t v108 = 0;
            }
            uint64_t v80 = v240;
            if ((_WORD)v16)
            {
              unsigned int v110 = *(_DWORD *)(v19 + ((unint64_t)(unsigned __int16)v16 << 6) + 40);
LABEL_184:
              *(_DWORD *)(v19 + (v105 << 6) + 40) = v110;
              uint64_t v14 = v258;
              ++*(_WORD *)(v258 + 16);
              goto LABEL_191;
            }
            unsigned int v110 = v225;
            if (v225 != -1) {
              goto LABEL_184;
            }
            uint64_t v111 = v19;
            uint64_t v112 = v257;
            int v113 = *(const char **)(v257 + 8);
            if (v113)
            {
              unsigned int v110 = 0;
              while (1)
              {
                uint64_t v114 = v113;
                uint64_t v112 = v257;
                if (v110 >= *(unsigned __int16 *)(v257 + 16)) {
                  break;
                }
                int v115 = cstdlib_strlen(v113);
                MarkerArgint Str = marker_getMarkerArgStr(1u);
                if (!cstdlib_strcmp(v114, MarkerArgStr)) {
                  goto LABEL_183;
                }
                uint64_t v117 = (v115 + 1);
                v110 += v117;
                int v113 = &v114[v117];
                if (!v114)
                {
                  uint64_t v112 = v257;
                  break;
                }
              }
            }
            __int16 v118 = *(_WORD *)(v112 + 16);
            uint64_t v119 = marker_getMarkerArgStr(1u);
            unsigned __int16 v120 = v118 + cstdlib_strlen(v119) + 1;
            uint64_t v121 = v257;
            if (*(unsigned __int16 *)(v257 + 18) >= v120)
            {
LABEL_182:
              int v122 = (char *)(*(void *)(v121 + 8)
                            + *(unsigned __int16 *)(v121 + 2) * (unint64_t)*(unsigned __int16 *)(v121 + 16));
              uint64_t v123 = marker_getMarkerArgStr(1u);
              cstdlib_strcpy(v122, v123);
              uint64_t v124 = marker_getMarkerArgStr(1u);
              v122[cstdlib_strlen(v124)] = 0;
              unsigned int v110 = *(unsigned __int16 *)(v257 + 16);
              *(_WORD *)(v257 + 16) = v120;
LABEL_183:
              int v225 = v110;
              uint64_t v19 = v111;
              uint64_t v80 = v240;
              goto LABEL_184;
            }
            uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1012, v120, &v257);
            if ((inserted & 0x80000000) == 0)
            {
              uint64_t v121 = v257;
              goto LABEL_182;
            }
          }
          return inserted;
        }
        uint64_t v83 = v243;
      }
      else
      {
        unint64_t v82 = *(unsigned __int16 *)(v258 + 16);
        uint64_t v83 = v243;
        uint64_t v16 = v237;
        unsigned int v79 = v250;
        char v20 = v252;
        uint64_t v80 = (unsigned __int16)v17;
      }
      uint64_t v91 = v238;
      __int16 v92 = v236;
      goto LABEL_150;
    }
    uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1020, (unsigned __int16)(*(_WORD *)(v259[0] + 16) + v69), v259);
    if ((inserted & 0x80000000) == 0)
    {
      uint64_t v70 = *(const char **)(v259[0] + 8);
      cstdlib_memmove((void *)&v70[(unsigned __int16)v242 + v69], &v70[(unsigned __int16)v242], *(unsigned __int16 *)(v259[0] + 16) - (unint64_t)(unsigned __int16)v242);
      uint64_t v71 = v259[0];
      LOWORD(v236) = v69;
      __int16 v72 = *(_WORD *)(v259[0] + 16) + v69;
      goto LABEL_107;
    }
    return inserted;
  }
  uint64_t v19 = v13;
LABEL_271:
  uint64_t v174 = 2370838528;
  if (v15)
  {
    unint64_t v175 = 0;
    uint64_t v176 = (uint64_t *)(v19 + 48);
    do
    {
      if (*v176)
      {
        heap_Free(*(void **)(*(void *)(v9 + 16) + 8), *v176);
        uint64_t *v176 = 0;
        uint64_t v14 = v258;
      }
      ++v175;
      v176 += 8;
    }
    while (v175 < *(unsigned __int16 *)(v14 + 16));
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v9 + 168), *(void *)(v9 + 16), *(void *)(v9 + 24), 1021, (uint64_t)"after wordpar_loc_nonasian_HandleExtendedToi()", 0, 0, 0);
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v9 + 168), *(void *)(v9 + 16), *(void *)(v9 + 24), 1020, (uint64_t)"after wordpar_loc_nonasian_HandleExtendedToi()");
  uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1020, 1u, &v255);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  if (*(_WORD *)(v255 + 16))
  {
    uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(v9 + 32) + 104))(v233, v234, *(void *)(v255 + 8), *(unsigned __int16 *)(v255 + 2) * *(unsigned __int16 *)(v255 + 16));
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(v9 + 16) + 32))) {
      log_OutTraceTuningDataBinary(*(void *)(*(void *)(v9 + 16) + 32), 34, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
    }
        *(void *)(v255 + 8),
        *(unsigned __int16 *)(v255 + 2) * *(unsigned __int16 *)(v255 + 16));
    *(_WORD *)(v255 + 16) = 0;
    int v177 = 1;
  }
  else
  {
    if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(v9 + 16) + 32))) {
      log_OutTraceTuningDataBinary(*(void *)(*(void *)(v9 + 16) + 32), 34, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
    }
        0,
        0);
    int v177 = 0;
  }
  if ((datac_RequestBlock(*(void *)(v9 + 24), 1012, 1u, &v255) & 0x80000000) != 0) {
    uint64_t v178 = 0;
  }
  else {
    uint64_t v178 = *(void *)(v255 + 8);
  }
  uint64_t inserted = datac_RequestBlock(*(void *)(v9 + 24), 1021, 1u, &v254);
  if ((inserted & 0x80000000) != 0) {
    return inserted;
  }
  uint64_t v182 = v254;
  unint64_t v183 = *(unsigned __int16 *)(v254 + 16);
  if (*(_WORD *)(v254 + 16))
  {
    uint64_t v184 = *(void *)(v254 + 8);
    if (*(_DWORD *)(v184 + 20) == 0x4000)
    {
      uint64_t v185 = (_DWORD *)(v184 + 32);
      int v256 = *(_DWORD *)(v184 + 32) - v256;
      unint64_t v186 = v183;
      do
      {
        *v185 -= v256;
        v185 += 16;
        --v186;
      }
      while (v186);
      if (v178)
      {
        unint64_t v187 = 0;
        uint64_t v188 = (void *)(v184 + 40);
        do
        {
          if (marker_hasNonConstCharPtrArg(*((_DWORD *)v188 - 5)))
          {
            uint64_t v189 = *(unsigned int *)v188;
            if (v189 == -1) {
              uint64_t v190 = 0;
            }
            else {
              uint64_t v190 = v178 + v189;
            }
            *uint64_t v188 = v190;
          }
          v188 += 8;
          ++v187;
          uint64_t v182 = v254;
          unint64_t v183 = *(unsigned __int16 *)(v254 + 16);
        }
        while (v187 < v183);
      }
      if (v183 >= 3)
      {
        unsigned int v191 = (_DWORD *)(v184 + 164);
        uint64_t v192 = 1;
        do
        {
          int v193 = (_DWORD *)(v184 + (v192 << 6));
          if (v193[5] == 1)
          {
            int v194 = v193[7];
            int v195 = v193[9];
            if (v194 != v195 && (*(_DWORD *)(v184 + (v192 << 6) + 32) + v195) > *(v191 - 1) && !*v191)
            {
              log_OutText(*(void *)(*(void *)(v9 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1, 0, (uint64_t)"SEVERE: found control sequence embedded in a word (word marker pos %d, length %d; escape marker pos %d)",
                v179,
                v180,
                v181,
                *(unsigned int *)(v184 + (v192 << 6) + 24));
              uint64_t v182 = v254;
            }
          }
          ++v192;
          v191 += 16;
        }
        while (*(unsigned __int16 *)(v182 + 16) - 1 > (unsigned __int16)v192);
      }
      unsigned __int16 v196 = 1;
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v9 + 168), *(void *)(v9 + 16), *(void *)(v9 + 24), 1021, (uint64_t)"before wordpar_loc_Align()", 1, 0, 0);
      uint64_t v197 = v254;
      unsigned int v198 = *(unsigned __int16 *)(v254 + 16);
      if (v198 >= 2)
      {
        unsigned int v199 = 0;
        int v200 = 0;
        unsigned int v201 = 0;
        uint64_t v202 = *(void *)(v254 + 8);
        uint64_t v203 = v202 + 84;
        for (unint64_t k = 1; k < v198; ++k)
        {
          if (*(_DWORD *)v203 == 1)
          {
            int v200 = *(_DWORD *)(v203 + 8);
            unsigned int v199 = v200 + *(_DWORD *)(v203 + 4);
            unsigned int v201 = (unsigned __int16)k;
          }
          else if (*(_DWORD *)v203 == 62 && v201 != 0)
          {
            unsigned int v206 = *(_DWORD *)(v203 + 4);
            uint64_t v207 = v202 + ((unint64_t)v201 << 6);
            if (v206 >= *(_DWORD *)(v207 + 24) && v206 < v199)
            {
              int v200 = cstdlib_atoi(*(unsigned __int8 **)(v203 + 20)) + v200 - *(_DWORD *)(v203 + 8);
              *(_DWORD *)(v207 + 28) = v200 & ~(v200 >> 31);
              unsigned int v198 = *(unsigned __int16 *)(v197 + 16);
            }
          }
          v203 += 64;
        }
        if (v198 >= 2)
        {
          int v209 = 0;
          uint64_t v210 = *(void *)(v197 + 8);
          int v211 = *(_DWORD *)(v210 + 24);
          int v212 = *(_DWORD *)(v210 + 28) + v211;
          uint64_t v213 = v210 + 104;
          unint64_t v214 = 1;
          unsigned __int16 v196 = 1;
          while (1)
          {
            int v215 = *(_DWORD *)(v213 - 20);
            if (v215 == 999) {
              goto LABEL_333;
            }
            if (v215 != 62) {
              break;
            }
            int v209 = cstdlib_atoi(*(unsigned __int8 **)v213) + v209 - *(_DWORD *)(v213 - 12);
LABEL_334:
            ++v214;
            v213 += 64;
            if (v214 >= *(unsigned __int16 *)(v197 + 16)) {
              goto LABEL_337;
            }
          }
          int v216 = *(_DWORD *)(v213 - 16) + v209;
          if (v211 >= v216)
          {
            *(_DWORD *)(v213 - 16) = v211;
          }
          else if (v212 >= v216)
          {
            *(_DWORD *)(v213 - 16) = v216;
            int v211 = v216;
          }
          else
          {
            *(_DWORD *)(v210 + ((unint64_t)v196 << 6) + 24) = v212;
            int v211 = v212;
          }
LABEL_333:
          int v217 = (_OWORD *)(v210 + ((unint64_t)v196 << 6));
          long long v218 = *(_OWORD *)(v213 - 40);
          long long v219 = *(_OWORD *)(v213 - 24);
          long long v220 = *(_OWORD *)(v213 + 8);
          v217[2] = *(_OWORD *)(v213 - 8);
          v217[3] = v220;
          *int v217 = v218;
          v217[1] = v219;
          ++v196;
          goto LABEL_334;
        }
        unsigned __int16 v196 = 1;
      }
LABEL_337:
      *(_WORD *)(v197 + 16) = v196;
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v244 + 168), *(void *)(v244 + 16), *(void *)(v244 + 24), 1021, (uint64_t)"before wordpar_loc_MarkerPostProcessing()", 1, 0, 0);
      uint64_t inserted = wordpar_loc_MarkerPostProcessing(*(void *)(v244 + 24), v254);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v244 + 168), *(void *)(v244 + 16), *(void *)(v244 + 24), 1021, (uint64_t)"before wordpar_loc_InsertNLUMarkers()", 1, 0, 0);
      uint64_t inserted = wordpar_loc_InsertNLUMarkers(v244, v254);
      if ((inserted & 0x80000000) != 0) {
        return inserted;
      }
      uint64_t v221 = *(void *)(v254 + 8);
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(v244 + 168), *(void *)(v244 + 16), *(void *)(v244 + 24), 1021, (uint64_t)"at end()", 1, 0, 0);
      int v222 = wordpar_loc_writeMarkersToOutputStream(v244, v226, v227, v221, v254, v177);
      return v222 & (v222 >> 31);
    }
  }
  return v174;
}

uint64_t wordpar_loc_MarkerPostProcessing(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  LODWORD(v2) = *(unsigned __int16 *)(a2 + 16);
  if (v2 <= 1)
  {
    uint64_t result = 0;
    *(_WORD *)(a2 + 16) = 1;
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = 1;
  unsigned __int16 v6 = 2;
  uint64_t v7 = 148;
  LOWORD(v8) = 1;
  do
  {
    unint64_t v9 = (unsigned __int16)v2;
    unsigned __int16 v10 = v6;
    if ((unsigned __int16)v2 > v6) {
      unsigned __int16 v10 = (unsigned __int16)v2;
    }
    uint64_t v11 = v7;
    unint64_t v12 = v5;
    while (++v12 < (unsigned __int16)v2)
    {
      int v13 = *(_DWORD *)(v4 + v11);
      v11 += 64;
      if (v13 != 999)
      {
        unsigned __int16 v10 = v12;
        break;
      }
    }
    uint64_t v14 = (long long *)(v4 + (v5 << 6));
    int v15 = *((_DWORD *)v14 + 8);
    int v16 = *((_DWORD *)v14 + 5);
    if (v15 != *(_DWORD *)(v4 + 32)) {
      goto LABEL_21;
    }
    if (v16 == 21)
    {
      if (v12 >= (unsigned __int16)v2) {
        goto LABEL_22;
      }
      uint64_t v17 = v4 + ((unint64_t)v10 << 6);
      if (*(_DWORD *)(v17 + 32) != v15 || *(_DWORD *)(v17 + 20) != 21) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (v12 < (unsigned __int16)v2 && v16 == 7)
    {
      uint64_t v18 = v4 + ((unint64_t)v10 << 6);
      if (*(_DWORD *)(v18 + 32) != v15 || *(_DWORD *)(v18 + 20) != 7) {
        goto LABEL_22;
      }
    }
    else
    {
LABEL_21:
      if (v16 && v16 != 999)
      {
LABEL_22:
        uint64_t v19 = (unsigned __int16)v8;
        LOWORD(v8) = v8 + 1;
        uint64_t v2 = (_OWORD *)(v4 + (v19 << 6));
        long long v20 = *v14;
        long long v21 = v14[1];
        long long v22 = v14[3];
        v2[2] = v14[2];
        v2[3] = v22;
        *uint64_t v2 = v20;
        v2[1] = v21;
        unint64_t v9 = *(unsigned __int16 *)(a2 + 16);
        LOWORD(v2) = *(_WORD *)(a2 + 16);
      }
    }
LABEL_23:
    ++v5;
    ++v6;
    v7 += 64;
  }
  while (v5 < v9);
  *(_WORD *)(a2 + 16) = v8;
  if ((unsigned __int16)v8 >= 2u)
  {
    uint64_t v23 = 0;
    BOOL v24 = 0;
    int v25 = -1;
    unint64_t v26 = 1;
    do
    {
      uint64_t v27 = v4 + v23;
      int v28 = *(_DWORD *)(v4 + v23 + 84);
      if (v28 != 36 && v28 != 7) {
        goto LABEL_45;
      }
      unsigned int v30 = *(_DWORD *)(v27 + 96);
      unsigned int v31 = *(_DWORD *)(v4 + 36) + *(_DWORD *)(v4 + 32);
      if (*(_DWORD *)(v27 + 100) + v30 > v31)
      {
        BOOL v32 = v31 >= v30;
        unsigned int v33 = v31 - v30;
        if (!v32)
        {
          unsigned int v33 = 0;
          *(_DWORD *)(v27 + 96) = v31;
        }
        *(_DWORD *)(v27 + 100) = v33;
      }
      if (v28 == 7)
      {
        int v34 = *(_DWORD *)(v4 + v23 + 104);
        BOOL v35 = !v24 && v34 == 43;
        if (v34 == 43 || !v24)
        {
          BOOL v24 = v35;
        }
        else if (v34 == 15)
        {
          BOOL v24 = 0;
        }
        else
        {
          uint64_t result = datac_RequestBlock(a1, 1021, (unsigned __int16)(v8 + 1), &v38);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v4 = *(void *)(v38 + 8);
          cstdlib_memmove((void *)(v4 + v23 + 128), (const void *)(v4 + v23 + 64), (uint64_t)(v25 + *(unsigned __int16 *)(v38 + 16)) << 6);
          cstdlib_memcpy((void *)(v4 + v23 + 64), (const void *)(v4 + v23 + 128), 0x40uLL);
          BOOL v24 = 0;
          *(_DWORD *)(v4 + v23 + 104) = 15;
          a2 = v38;
          ++*(_WORD *)(v38 + 16);
        }
      }
      else
      {
LABEL_45:
        BOOL v24 = v24;
      }
      ++v26;
      unint64_t v8 = *(unsigned __int16 *)(a2 + 16);
      --v25;
      v23 += 64;
    }
    while (v26 < v8);
  }
  return 0;
}

uint64_t wordpar_loc_InsertNLUMarkers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v42 = 0;
  uint64_t v43 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t result = datac_RequestBlock(v3, 1013, 1u, &v42);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v6 = *(unsigned __int16 *)(v2 + 16);
    if (v6 >= 2)
    {
      unsigned __int16 v7 = 0;
      int v8 = 1;
      uint64_t v9 = 1;
      do
      {
        int v10 = *(_DWORD *)(v4 + (v9 << 6) + 20);
        if (v10 > 55)
        {
          if (v10 == 56)
          {
            unint64_t v12 = "E_";
            if (v7) {
              goto LABEL_23;
            }
            unsigned __int16 v7 = 0;
            goto LABEL_43;
          }
          if (v10 != 57)
          {
LABEL_7:
            BOOL v11 = v10 != 54 || v7 == 0;
            unint64_t v12 = "BND:";
            if (!v11)
            {
LABEL_23:
              LOWORD(v14) = v8 + 1;
              LOWORD(v15) = v7;
LABEL_36:
              uint64_t result = datac_RequestBlock(v3, 1021, (unsigned __int16)(*(_WORD *)(v2 + 16) + 1), &v43);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v4 = *(void *)(v43 + 8);
              uint64_t v27 = (unsigned __int16)v15;
              int v28 = (_DWORD *)(v4 + ((unint64_t)(unsigned __int16)v15 << 6));
              cstdlib_memmove((void *)(v4 + ((unint64_t)((unsigned __int16)v15 + 1) << 6)), v28, (uint64_t)(*(unsigned __int16 *)(v43 + 16) - (unsigned __int16)v15) << 6);
              if ((unsigned __int16)v15 > (unsigned __int16)v14) {
                cstdlib_memcpy(v28, (const void *)(v4 + ((unint64_t)(unsigned __int16)v14 << 6)), 0x40uLL);
              }
              *int v28 = 1;
              v28[5] = 51;
              __int16 v29 = *(_WORD *)(v42 + 16);
              uint64_t v30 = v4 + ((unint64_t)(unsigned __int16)v14 << 6);
              BOOL v32 = *(const char **)(v30 + 40);
              unsigned int v31 = (const char **)(v30 + 40);
              __int16 v33 = cstdlib_strlen(v32);
              unsigned __int16 v34 = v29 + cstdlib_strlen(v12) + v33 + 1;
              uint64_t v35 = v42;
              if (*(unsigned __int16 *)(v42 + 18) < v34)
              {
                uint64_t result = datac_RequestBlock(*(void *)(a1 + 24), 1013, v34, &v42);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v35 = v42;
              }
              unsigned int v36 = (char *)(*(void *)(v35 + 8)
                           + *(unsigned __int16 *)(v35 + 2) * (unint64_t)*(unsigned __int16 *)(v35 + 16));
              cstdlib_strcpy(v36, v12);
              cstdlib_strcat(v36, *v31);
              *(_DWORD *)(v4 + (v27 << 6) + 40) = *(unsigned __int16 *)(v42 + 16);
              uint64_t v2 = v43;
              *(_WORD *)(v42 + 16) = v34;
              ++*(_WORD *)(v2 + 16);
              ++v8;
              goto LABEL_43;
            }
            goto LABEL_43;
          }
        }
        else
        {
          if (v10 == 1)
          {
            unsigned __int16 v7 = v8;
            goto LABEL_43;
          }
          if (v10 != 55) {
            goto LABEL_7;
          }
        }
        if (v10 != 57 || v7 == 0)
        {
          int v14 = v8;
        }
        else
        {
          uint64_t result = datac_RequestBlock(v3, 1021, (unsigned __int16)(v6 + 1), &v43);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v4 = *(void *)(v43 + 8);
          int v16 = (_DWORD *)(v4 + ((unint64_t)v7 << 6));
          cstdlib_memmove((void *)(v4 + ((unint64_t)(v7 + 1) << 6)), v16, (uint64_t)(*(unsigned __int16 *)(v43 + 16) - v7) << 6);
          *int v16 = 1;
          v16[5] = 51;
          uint64_t v17 = v4 + (v9 << 6);
          uint64_t v19 = *(char **)(v17 + 104);
          uint64_t v18 = (const char **)(v17 + 104);
          long long v20 = cstdlib_strchr(v19, 58);
          long long v21 = *v18;
          if (v20) {
            unsigned __int16 v22 = (_WORD)v20 - (_WORD)v21;
          }
          else {
            unsigned __int16 v22 = cstdlib_strlen(v21);
          }
          uint64_t v23 = v42;
          unsigned int v24 = *(unsigned __int16 *)(v42 + 16);
          unsigned __int16 v25 = v22 + v24 + 3;
          if (*(unsigned __int16 *)(v42 + 18) < v25)
          {
            uint64_t result = datac_RequestBlock(*(void *)(a1 + 24), 1013, (unsigned __int16)(v22 + v24 + 3), &v42);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v23 = v42;
            unsigned int v24 = *(unsigned __int16 *)(v42 + 16);
          }
          unint64_t v26 = (char *)(*(void *)(v23 + 8) + *(unsigned __int16 *)(v23 + 2) * (unint64_t)v24);
          cstdlib_strcpy(v26, "R_");
          cstdlib_strncat(v26, *v18, v22);
          *(_DWORD *)(v4 + ((unint64_t)v7 << 6) + 40) = *(unsigned __int16 *)(v42 + 16);
          uint64_t v2 = v43;
          *(_WORD *)(v42 + 16) = v25;
          ++*(_WORD *)(v2 + 16);
          int v14 = v8 + 1;
        }
        int v15 = (unsigned __int16)v14 + 1;
        if ((v15 & 0x10000) == 0)
        {
          unint64_t v12 = "S_";
          int v8 = v14;
          goto LABEL_36;
        }
        int v8 = 0xFFFF;
LABEL_43:
        uint64_t v9 = (unsigned __int16)++v8;
        unsigned int v6 = *(unsigned __int16 *)(v2 + 16);
      }
      while (v6 > (unsigned __int16)v8);
    }
    if (v6)
    {
      unint64_t v37 = 0;
      uint64_t v38 = (void *)(v4 + 40);
      do
      {
        if (*((_DWORD *)v38 - 5) == 51 && *((_DWORD *)v38 - 10))
        {
          uint64_t v39 = *(unsigned int *)v38;
          if (v39 == -1) {
            uint64_t v40 = 0;
          }
          else {
            uint64_t v40 = *(void *)(v42 + 8) + v39;
          }
          void *v38 = v40;
          uint64_t v2 = v43;
        }
        ++v37;
        v38 += 8;
      }
      while (v37 < *(unsigned __int16 *)(v2 + 16));
    }
    return 0;
  }
  return result;
}

uint64_t wordpar_loc_writeMarkersToOutputStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v11 = *(unsigned __int16 *)(a5 + 16);
  if (!a6 && v11 == 1)
  {
    if (*(_DWORD *)(a4 + 20) == 0x4000) {
      return 0;
    }
    unsigned int v11 = 1;
  }
  uint64_t v13 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (32 * v11) | 1);
  if (!v13) {
    return 2370838538;
  }
  uint64_t v14 = v13;
  if (*(_WORD *)(a5 + 16))
  {
    unint64_t v15 = 0;
    int v16 = (void *)(v13 + 24);
    uint64_t v17 = (void *)(a4 + 40);
    do
    {
      *(_OWORD *)(v16 - 3) = *(_OWORD *)((char *)v17 - 20);
      *((_DWORD *)v16 - 2) = *((_DWORD *)v17 - 1);
      uint64_t v18 = *v17;
      v17 += 8;
      *int v16 = v18;
      v16 += 4;
      ++v15;
      unint64_t v19 = *(unsigned __int16 *)(a5 + 16);
    }
    while (v15 < v19);
  }
  else
  {
    LOWORD(v19) = 0;
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"at end()", 1, a4, v19);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 32) + 104))(a2, a3, v14, 32 * *(unsigned __int16 *)(a5 + 16));
  if ((v12 & 0x80000000) == 0 && log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
    log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 34, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
  }
      v14,
      32 * *(unsigned __int16 *)(a5 + 16));
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v14);
  return v12;
}

uint64_t wordpar_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v5 = 2370838535;
  if (a4 && (InitRsrcFunction(a1, a2, &v20) & 0x80000000) == 0)
  {
    *a4 = 0;
    unsigned int v11 = (void *)heap_Alloc(*(void *)(v20 + 8), 200);
    if (!v11) {
      return 2370838538;
    }
    uint64_t v12 = (uint64_t)v11;
    cstdlib_memset(v11, 0, 0xC8uLL);
    *(void *)uint64_t v12 = a1;
    *(void *)(v12 + 8) = a2;
    uint64_t v13 = v20;
    *(void *)(v12 + 16) = v20;
    *(void *)(v12 + 32) = a3;
    *(_DWORD *)(v12 + 164) = 0;
    *(void *)(v12 + 72) = 0;
    *(void *)(v12 + 152) = 0;
    *(_WORD *)(v12 + 176) = 30;
    if ((paramc_ParamGetUInt(*(void *)(v13 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v19 + 1) & 0x80000000) == 0) {
      *(_WORD *)(v12 + 176) = WORD2(v19);
    }
    *(_WORD *)(v12 + 178) = 50;
    if ((paramc_ParamGetUInt(*(void *)(v20 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v19 + 1) & 0x80000000) == 0) {
      *(_WORD *)(v12 + 178) = WORD2(v19);
    }
    *(void *)(v12 + 128) = 0;
    *(void *)(v12 + 80) = 0;
    *(void *)(v12 + 88) = 0;
    *(_DWORD *)(v12 + 96) = 0;
    *(void *)(v12 + 104) = 0;
    *(void *)(v12 + 112) = 0;
    *(_DWORD *)(v12 + 120) = 0;
    *(void *)(v12 + 136) = safeh_GetNullHandle();
    *(void *)(v12 + 144) = v14;
    uint64_t v15 = extdata_ObjOpen(a1, a2, (void *)(v12 + 72), 213);
    if ((v15 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    *(void *)(v12 + 56) = 0;
    *(_DWORD *)(v12 + 64) = 0;
    uint64_t v15 = nuance_pcre_ObjOpen(a1, a2, v12 + 56);
    if ((v15 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    uint64_t v15 = nuance_pcre_Init(*(void **)(v12 + 56), *(void *)(v12 + 64), *(unsigned __int16 *)(v12 + 176), *(_WORD *)(v12 + 178));
    if ((v15 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    uint64_t v16 = wordpar_loc_OpenParts((_WORD **)v12, &v19);
    if ((v16 & 0x80000000) != 0)
    {
      uint64_t v5 = v16;
      if (v19) {
        return v5;
      }
      goto LABEL_18;
    }
    *(_DWORD *)(v12 + 172) = a5;
    uint64_t v15 = datac_ObjOpen(a1, a2, (void *)(v12 + 24), 213);
    if ((v15 & 0x80000000) != 0)
    {
LABEL_17:
      uint64_t v5 = v15;
    }
    else
    {
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v5 = datac_RegisterBlock(*(void *)(v12 + 24), (unsigned __int16)aMETA_1[v17], (unsigned __int16)aMETA_1[v17 + 1], (unsigned __int16)aMETA_1[v17 + 2]);
        if ((v5 & 0x80000000) != 0) {
          break;
        }
        v17 += 3;
        if (v17 == 15)
        {
          *a4 = v12;
          return v5;
        }
      }
    }
LABEL_18:
    wordpar_ObjClose(v12);
  }
  return v5;
}

uint64_t wordpar_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v8 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v8) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      datac_ObjClose(v3);
    }
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4)
    {
      extdata_ObjClose(v4);
      *(void *)(a1 + 72) = 0;
    }
    wordpar_loc_CloseParts(a1);
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(*(void *)(a1 + 56), *(void *)(a1 + 64), NullHandle, v6))
    {
      nuance_pcre_DeInit(*(void **)(a1 + 56), *(void *)(a1 + 64));
      nuance_pcre_ObjClose(*(void *)(a1 + 56), *(void *)(a1 + 64));
    }
    heap_Free(*(void **)(v8 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wordpar_loc_OpenParts(_WORD **a1, _DWORD *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v27 = "BRKD";
  int v28 = wordpar_getBRKDefs;
  __int16 v29 = wordpar_freeBRKDefs;
  uint64_t v30 = a1;
  Specificuint64_t Data = extdata_RegisterData((uint64_t)a1[9], (char *)&v27, 1u);
  if ((SpecificData & 0x80000000) != 0) {
    return SpecificData;
  }
  Specificuint64_t Data = extdata_LoadSpecificData((uint64_t)a1[9], "PPWO", "BRKD", "pp/word/parser");
  if ((SpecificData & 0x80000000) != 0) {
    return SpecificData;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v26) & 0x80000000) != 0) {
    return 2370838535;
  }
  uint64_t v9 = (const char *)a1[19];
  if (v9)
  {
    uint64_t v27 = 0;
    int v28 = 0;
    if ((int)cstdlib_strlen(v9) >= 1)
    {
      int v10 = 0;
      do
      {
        *((unsigned char *)a1[19] + (unsigned __int16)v10) = cstdlib_tolower(*((unsigned __int8 *)a1[19] + (unsigned __int16)v10));
        ++v10;
      }
      while ((int)cstdlib_strlen((const char *)a1[19]) > (unsigned __int16)v10);
    }
    if ((brk_InterfaceQueryEx(*((void *)a1[2] + 3), (uint64_t)a1[19], 1, 1, (uint64_t)&v27, (uint64_t)(a1 + 16)) & 0x80000000) == 0)
    {
      Specificuint64_t Data = (*((uint64_t (**)(const char *, uint64_t (*)(uint64_t, uint64_t, unsigned int, uint64_t), void, _WORD *, _WORD **))a1[16]
                      + 4))(v27, v28, *a1, a1[1], a1 + 17);
      if ((SpecificData & 0x80000000) != 0) {
        return SpecificData;
      }
    }
  }
  else
  {
    log_OutPublic(*((void *)a1[2] + 4), (uint64_t)"PP_WORD_PARSER", 1811, 0, v5, v6, v7, v8, v24);
  }
  if (*((_DWORD *)a1 + 41))
  {
    uint64_t Object = objc_GetObject(*(void *)(v26 + 48), (uint64_t)"FE_UDWL", &v25);
    if ((Object & 0x80000000) != 0)
    {
      uint64_t v11 = Object;
LABEL_33:
      *a2 = 1;
      wordpar_ObjClose((uint64_t)a1);
      return v11;
    }
    uint64_t v13 = v25;
    a1[13] = *(_WORD **)(v25 + 8);
    uint64_t v14 = a1 + 13;
    *((_OWORD *)a1 + 7) = *(_OWORD *)(v13 + 16);
    uint64_t v15 = objc_GetObject(*(void *)(v26 + 48), (uint64_t)"FE_DCTLKP", &v25);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v11 = v15;
      uint64_t v19 = "FE_UDWL";
LABEL_32:
      objc_ReleaseObject(*(void *)(v26 + 48), (uint64_t)v19);
      *uint64_t v14 = 0;
      v14[1] = 0;
      *((_DWORD *)v14 + 4) = 0;
      goto LABEL_33;
    }
    uint64_t v16 = v25;
    uint64_t v17 = *(void *)(v25 + 8);
    a1[10] = (_WORD *)v17;
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(v16 + 16);
    uint64_t v18 = wparser_ObjOpen2(*a1, (uint64_t)a1[1], (uint64_t)a1[7], (int)a1[8], (uint64_t *)a1 + 5, (uint64_t)a1[13], (uint64_t)a1[14], (uint64_t)a1[15], v17, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[9], (uint64_t)a1[16], (uint64_t)a1[17], (uint64_t)a1[18]);
    if ((v18 & 0x80000000) != 0)
    {
      uint64_t v11 = v18;
      if (*v14)
      {
        objc_ReleaseObject(*(void *)(v26 + 48), (uint64_t)"FE_UDWL");
        *uint64_t v14 = 0;
        a1[14] = 0;
        *((_DWORD *)a1 + 30) = 0;
      }
      if (!a1[10]) {
        goto LABEL_33;
      }
      uint64_t v19 = "FE_DCTLKP";
      uint64_t v14 = a1 + 10;
      goto LABEL_32;
    }
  }
  else
  {
    safeh_GetNullHandle();
    Specificuint64_t Data = wparser_ObjOpen1(*a1, (uint64_t)a1[1], a1 + 5);
    if ((SpecificData & 0x80000000) != 0) {
      return SpecificData;
    }
  }
  Specificuint64_t Data = extdata_LoadData((uint64_t)a1[9], "PPWO", "pp/word/parser");
  if ((SpecificData & 0x80000000) != 0) {
    return SpecificData;
  }
  uint64_t v11 = tolhp_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t **)a1 + 6);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v20 = *((void *)a1[2] + 5);
    uint64_t v27 = 0;
    int Str = paramc_ParamGetStr(v20, (uint64_t)"is_teng", &v27);
    BOOL v22 = 0;
    if ((Str & 0x80000000) == 0 && v27)
    {
      if (*v27) {
        BOOL v22 = cstdlib_strchr("yYtT1", *v27) != 0;
      }
      else {
        BOOL v22 = 0;
      }
    }
    *((_DWORD *)a1 + 49) = v22;
  }
  return v11;
}

uint64_t wordpar_ObjReopen(_WORD **a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v6 = 0;
  int v5 = 0;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v6) & 0x80000000) == 0)
  {
    uint64_t v3 = extdata_FreeData((uint64_t)a1[9]);
    if ((v3 & 0x80000000) != 0 || (uint64_t v3 = wordpar_loc_CloseParts((uint64_t)a1), (v3 & 0x80000000) != 0))
    {
      uint64_t v1 = v3;
    }
    else
    {
      uint64_t v1 = wordpar_loc_OpenParts(a1, &v5);
      if ((v1 & 0x80000000) == 0 || v5) {
        return v1;
      }
    }
    wordpar_ObjClose((uint64_t)a1);
  }
  return v1;
}

uint64_t wordpar_loc_CloseParts(uint64_t a1)
{
  uint64_t v2 = tolhp_ObjClose(*(void *)(a1 + 48));
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 164))
  {
    if (v3)
    {
      uint64_t v4 = wparser_ObjClose2(v3);
      goto LABEL_8;
    }
  }
  else if (v3)
  {
    uint64_t v4 = wparser_ObjClose1(v3);
LABEL_8:
    uint64_t v5 = v4;
    if ((v4 & 0x80000000) != 0) {
      return v5;
    }
  }
  uint64_t v6 = wordpar_freeBRKDefs(a1);
  uint64_t v7 = *(void *)(a1 + 128);
  if (v7
    && (uint64_t v6 = (*(uint64_t (**)(void, void))(v7 + 40))(*(void *)(a1 + 136), *(void *)(a1 + 144)),
        (uint64_t v8 = *(void *)(a1 + 128)) != 0))
  {
    uint64_t v5 = brk_InterfaceRelease(*(void *)(*(void *)(a1 + 16) + 24), v8);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = safeh_GetNullHandle();
    *(void *)(a1 + 144) = v9;
  }
  else
  {
    uint64_t v5 = v6;
  }
  if (*(_DWORD *)(a1 + 164))
  {
    if (*(void *)(a1 + 104))
    {
      objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_UDWL");
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      *(_DWORD *)(a1 + 120) = 0;
    }
    if (*(void *)(a1 + 80))
    {
      objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
    }
  }
  return v5;
}

uint64_t wordpar_ProcessStart(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v8) & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 168) = log_GetLogLevel(*(void *)(v8 + 32)) > 4;
    cstdlib_strcpy((char *)(a1 + 180), " ");
    cstdlib_strcat((char *)(a1 + 180), "§");
    uint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = datac_RequestBlock(*(void *)(a1 + 24), (unsigned __int16)aMETA_1[v3], 1u, &v7);
      if ((v4 & 0x80000000) != 0) {
        break;
      }
      v3 += 3;
      uint64_t v5 = v7;
      *(_WORD *)(v7 + 16) = 0;
      *(_DWORD *)(v5 + 20) = 0;
      if (v3 == 15)
      {
        uint64_t v4 = tolhp_ResetDcts(*(void *)(a1 + 48));
        if ((v4 & 0x80000000) == 0)
        {
          if (!*(_DWORD *)(a1 + 164)) {
            return 0;
          }
          uint64_t v4 = wparser_ProcessStart(*(void *)(a1 + 40));
          if ((v4 & 0x80000000) == 0) {
            return 0;
          }
        }
        return v4;
      }
    }
    return v4;
  }
  return v1;
}

uint64_t wordpar_ProcessEnd(uint64_t a1)
{
  if (!a1) {
    return 2370838535;
  }
  if (*(_DWORD *)(a1 + 164)) {
    return wparser_ProcessEnd(*(void **)(a1 + 40));
  }
  return 0;
}

uint64_t wordpar_LoadFromStreamData(uint64_t a1, const void *a2, unsigned int a3, const char **a4, unsigned int a5)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  uint64_t v10 = *(void *)(a1 + 24);
  if (a3) {
    unsigned __int16 v11 = a3;
  }
  else {
    unsigned __int16 v11 = 1;
  }
  uint64_t v12 = datac_RequestBlock(v10, 1020, v11, &v35);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  if (a2) {
    cstdlib_memcpy(*(void **)(v35 + 8), a2, a3);
  }
  *(_WORD *)(v35 + 16) = a3;
  uint64_t v13 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)a5 & 0xFFC0, &v36);
  if ((v13 & 0x80000000) == 0)
  {
    unsigned int v14 = a5 >> 6;
    uint64_t v15 = v36;
    uint64_t v16 = *(void *)(v36 + 8);
    uint64_t v17 = (unsigned __int16)(a5 >> 6);
    if (!(unsigned __int16)(a5 >> 6)) {
      goto LABEL_27;
    }
    unsigned __int16 v18 = 0;
    uint64_t v19 = (unsigned __int16)(a5 >> 6);
    uint64_t v20 = a4;
    uint64_t v33 = *(void *)(v36 + 8);
    do
    {
      cstdlib_memcpy((void *)v16, v20, 0x40uLL);
      if (marker_hasNonConstCharPtrArg(*(_DWORD *)(v16 + 20)))
      {
        long long v21 = v20[5];
        if (v21)
        {
          __int16 v22 = cstdlib_strlen(v21);
          LODWORD(v21) = 0;
          v18 += v22 + 1;
        }
      }
      else
      {
        LODWORD(v21) = *((_DWORD *)v20 + 10);
      }
      *(_DWORD *)(v16 + 40) = v21;
      uint64_t v23 = v20[6];
      if (v23)
      {
        int v24 = (unsigned __int16)cstdlib_strlen(v23);
        if (v24)
        {
          uint64_t v25 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (v24 + 1));
          *(void *)(v16 + 48) = v25;
          if (!v25) {
            return 2370838538;
          }
          cstdlib_strcpy(v25, v20[6]);
        }
      }
      v16 += 64;
      v20 += 8;
      --v19;
    }
    while (v19);
    *(_WORD *)(v36 + 16) = v14;
    uint64_t v16 = v33;
    if (!v18) {
      goto LABEL_28;
    }
    uint64_t v13 = datac_RequestBlock(*(void *)(a1 + 24), 1012, v18, &v34);
    if ((v13 & 0x80000000) == 0)
    {
      LOWORD(v14) = 0;
      uint64_t v26 = *(void *)(v34 + 8);
      uint64_t v27 = (int *)(v33 + 20);
      int v28 = a4 + 5;
      __int16 v29 = (int *)(v33 + 20);
      do
      {
        int v30 = *v29;
        v29 += 16;
        if (marker_hasNonConstCharPtrArg(v30) && *v28)
        {
          unsigned __int16 v31 = cstdlib_strlen(*v28);
          v27[5] = (unsigned __int16)v14;
          cstdlib_memcpy((void *)(v26 + (unsigned __int16)v14), *v28, v31);
          *(unsigned char *)(v26 + v31 + (unint64_t)(unsigned __int16)v14) = 0;
          LOWORD(v14) = v14 + v31 + 1;
        }
        v28 += 8;
        uint64_t v27 = v29;
        --v17;
      }
      while (v17);
      uint64_t v16 = v33;
      uint64_t v15 = v34;
LABEL_27:
      *(_WORD *)(v15 + 16) = v14;
LABEL_28:
      if (*(_DWORD *)(v16 + 20) == 0x4000
        && !*(_DWORD *)(v16 + 24)
        && !*(_DWORD *)(v16 + 28)
        && !wordpar_loc_existingSentParParams(a1))
      {
        *(_DWORD *)(v16 + 28) = a3;
        *(_DWORD *)(v16 + 36) = a3;
      }
    }
  }
  return v13;
}

BOOL wordpar_loc_existingSentParParams(uint64_t a1)
{
  unsigned int v2 = 0;
  return (paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_posrefoffset", &v2) & 0x1FFF) == 0;
}

uint64_t wordpar_ResetData(uint64_t a1)
{
  uint64_t v4 = 0;
  if (!a1) {
    return 2370838535;
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t result = datac_RequestBlock(*(void *)(a1 + 24), (unsigned __int16)aTAG_1[i], 1u, &v4);
    if (i != 2 && (result & 0x80000000) == 0) {
      *(_WORD *)(v4 + 16) = 0;
    }
  }
  return result;
}

uint64_t wordpar_Process(uint64_t a1)
{
  uint64_t v44 = 0;
  if (!a1) {
    return 2370838535;
  }
  memset(v43, 0, sizeof(v43));
  LODWORD(v45) = 0;
  uint64_t UInt = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_posrefoffset", (unsigned int *)&v44 + 1);
  if ((UInt & 0x1FFF) == 0x14)
  {
    HIDWORD(v44) = 0;
  }
  else
  {
    uint64_t v3 = UInt;
    if ((UInt & 0x80000000) != 0) {
      return v3;
    }
  }
  uint64_t v4 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset", (unsigned int *)&v44);
  if ((v4 & 0x1FFF) == 0x14)
  {
    LODWORD(v44) = 0;
  }
  else
  {
    uint64_t v3 = v4;
    if ((v4 & 0x80000000) != 0) {
      return v3;
    }
  }
  uint64_t v5 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_tag", (unsigned int *)&v45);
  if ((v5 & 0x1FFF) == 0x14)
  {
    int v6 = 0;
  }
  else
  {
    uint64_t v3 = v5;
    if ((v5 & 0x80000000) != 0) {
      return v3;
    }
    int v6 = v45;
  }
  DWORD1(v43[1]) = v6;
  uint64_t v7 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_posref", (unsigned int *)&v43[1] + 2);
  if ((v7 & 0x1FFF) == 0x14)
  {
    DWORD2(v43[1]) = 0;
  }
  else
  {
    uint64_t v3 = v7;
    if ((v7 & 0x80000000) != 0) {
      return v3;
    }
  }
  uint64_t v8 = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pp_sentpar_refreset_mrk_lenref", (unsigned int *)&v43[1] + 3);
  if ((v8 & 0x1FFF) == 0x14)
  {
    HIDWORD(v43[1]) = 0;
  }
  else
  {
    uint64_t v3 = v8;
    if ((v8 & 0x80000000) != 0) {
      return v3;
    }
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"(from sentpar) posRefOffset=%d,refReset=%d pRefResetMrk->tag %d posRef %d lenRef %d", v9, v10, v11, HIDWORD(v44));
  if (!*(_DWORD *)(a1 + 164))
  {
    uint64_t inserted = wparser_ScanWords(*(void *)(a1 + 40), *(void *)(a1 + 24), SHIDWORD(v44), v44);
    if ((inserted & 0x80000000) != 0) {
      return inserted;
    }
    unsigned int v12 = 0;
LABEL_31:
    marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"BEFORE wordpar_loc_nonasian_PreProcessExtendedTOIWords");
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"BEFORE wordpar_loc_nonasian_PreProcessExtendedTOIWords", 0, 0, 0);
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v45 = 0;
    uint64_t inserted = datac_RequestBlock(v15, 1021, 1u, &v45);
    if ((inserted & 0x80000000) == 0)
    {
      uint64_t v16 = v45;
      unsigned int v17 = *(unsigned __int16 *)(v45 + 16);
      if (v17 > 1)
      {
        uint64_t v18 = *(void *)(v45 + 8);
        int v19 = 1;
        do
        {
          while (1)
          {
            uint64_t v20 = v18 + ((unint64_t)(unsigned __int16)v19 << 6);
            if (*(_DWORD *)(v20 + 20) == 7 && *(_DWORD *)(v20 + 40) >= 0x46u) {
              break;
            }
            ++v19;
LABEL_43:
            if ((unsigned __int16)v17 <= (unsigned __int16)v19) {
              goto LABEL_79;
            }
          }
          unsigned int v21 = *(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v19 << 6) + 32);
          if ((unsigned __int16)v17 <= (unsigned __int16)(v19 + 1)) {
            int v22 = (unsigned __int16)(v19 + 1);
          }
          else {
            int v22 = (unsigned __int16)v17;
          }
          while ((unsigned __int16)v17 > (unsigned __int16)++v19)
          {
            if (*(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v19 << 6) + 20) == 7) {
              goto LABEL_46;
            }
          }
          int v19 = v22;
LABEL_46:
          if ((unsigned __int16)v17 == (unsigned __int16)v19) {
            unsigned int v23 = (unsigned __int16)(*(_DWORD *)(v18 + 36) + *(_WORD *)(v18 + 32));
          }
          else {
            unsigned int v23 = *(_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v19 << 6) + 32);
          }
          if ((unsigned __int16)v17 < 2u) {
            goto LABEL_43;
          }
          int v24 = 0;
          unsigned __int16 v25 = 0;
          uint64_t v26 = (int *)(v18 + 84);
          uint64_t v27 = 1;
          do
          {
            unsigned int v28 = v26[3];
            if (v28 > v23) {
              break;
            }
            int v29 = *v26;
            v26 += 16;
            BOOL v30 = v29 == 1 && v28 >= v21;
            char v31 = v30;
            int v32 = v31 & (v28 < v23);
            if (v32) {
              int v24 = v27;
            }
            if ((v32 & (v25 == 0)) != 0) {
              unsigned __int16 v25 = v27;
            }
            ++v27;
          }
          while ((unsigned __int16)v17 != v27);
          if (!v25 || !(_WORD)v24 || v25 == (unsigned __int16)v24) {
            goto LABEL_43;
          }
          unsigned int v42 = v12;
          uint64_t v33 = (_DWORD *)(v18 + ((unint64_t)(unsigned __int16)v24 << 6));
          uint64_t v34 = (_DWORD *)(v18 + ((unint64_t)v25 << 6));
          v34[9] = v33[9] + v33[8] - v34[8];
          v34[7] = v33[7] + v33[6] - v34[6];
          if ((unsigned __int16)v24 > v25)
          {
            int v35 = (unsigned __int16)v24 - 1;
            unsigned int v36 = ~v24 | 0xFFFF0000;
            do
            {
              if (v33[5] == 1)
              {
                unsigned int v37 = v33[8];
                if (v37 >= v21 && v37 < v23)
                {
                  int v39 = *(unsigned __int16 *)(v16 + 16);
                  if (v35 + 2 != v39)
                  {
                    cstdlib_memmove(v33, (const void *)(v18 + ((unint64_t)(v35 + 2) << 6)), (uint64_t)(int)(v36 + v39) << 6);
                    uint64_t v16 = v45;
                  }
                  --*(_WORD *)(v16 + 16);
                }
              }
              v33 -= 16;
              BOOL v30 = v25 >= (unsigned __int16)v35--;
              ++v36;
            }
            while (!v30);
          }
          unsigned int v17 = *(unsigned __int16 *)(v16 + 16);
          unsigned int v12 = v42;
        }
        while (v17 > (unsigned __int16)v19);
      }
LABEL_79:
      marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"BEFORE tolhp_RewritePhonTextInLhp");
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"BEFORE tolhp_RewritePhonTextInLhp", 0, 0, 0);
      uint64_t inserted = tolhp_RewritePhonTextInLhp(*(_WORD ***)(a1 + 48), *(void *)(a1 + 24));
      if ((inserted & 0x80000000) == 0)
      {
        marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"AFTER tolhp_RewritePhonTextInLhp");
        marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"AFTER tolhp_RewritePhonTextInLhp", 0, 0, 0);
        if (!*(_DWORD *)(a1 + 164)
          || (uint64_t inserted = wparser_insertRegionTags(*(void *)(a1 + 40), *(void *)(a1 + 24)),
              (inserted & 0x80000000) == 0))
        {
          uint64_t v40 = *(void *)(a1 + 24);
          uint64_t v45 = 0;
          uint64_t inserted = datac_RequestBlock(v40, 1021, 1u, &v45);
          if ((inserted & 0x80000000) == 0)
          {
            uint64_t inserted = marker_loc_FilterSyncMarkers(v45);
            if ((inserted & 0x80000000) == 0)
            {
              if ((v12 & 0x1FFF) == 0xA) {
                return v12;
              }
              else {
                return 0;
              }
            }
          }
        }
      }
    }
    return inserted;
  }
  uint64_t v45 = 0;
  if ((datac_RequestBlock(*(void *)(a1 + 24), 1012, 1u, &v45) & 0x80000000) == 0) {
    *(_WORD *)(a1 + 160) = *(_WORD *)(v45 + 16);
  }
  uint64_t v3 = wordpar_loc_AlignInputMarkers(a1);
  if ((v3 & 0x80000000) == 0)
  {
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"AFTER wordpar_loc_AlignInputMarkers", 0, 0, 0);
    unsigned int v12 = 0;
    if (!*(_DWORD *)(a1 + 196))
    {
      unsigned int v13 = wparser_NormalizeWords(*(unsigned __int16 **)(a1 + 40), *(void *)(a1 + 24), SHIDWORD(v44), v44, v43);
      unsigned int v12 = v13;
      if ((v13 & 0x1FFF) == 0xA) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v13;
      }
    }
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"AFTER wparser_NormalizeWords", 0, 0, 0);
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  return v3;
}

uint64_t wordpar_loc_AlignInputMarkers(uint64_t a1)
{
  memset(__dst, 0, sizeof(__dst));
  uint64_t v11 = 0;
  uint64_t v1 = datac_RequestBlock(*(void *)(a1 + 24), 1021, 1u, &v11);
  if ((v1 & 0x80000000) != 0) {
    return v1;
  }
  uint64_t result = 2370838528;
  unsigned int v3 = *(unsigned __int16 *)(v11 + 16);
  if (*(_WORD *)(v11 + 16))
  {
    uint64_t v4 = *(void *)(v11 + 8);
    if (*(_DWORD *)(v4 + 20) == 0x4000)
    {
      if (v3 >= 2)
      {
        unsigned int v5 = 1;
        do
        {
          uint64_t v6 = v5 + 1;
          if (v6 >= v3
            || (uint64_t v7 = (_OWORD *)(v4 + (v6 << 6)),
                uint64_t v8 = (_OWORD *)(v4 + ((unint64_t)v5 << 6)),
                *((_DWORD *)v7 + 8) >= *((_DWORD *)v8 + 8)))
          {
            ++v5;
          }
          else
          {
            cstdlib_memcpy(__dst, (const void *)(v4 + (v6 << 6)), 0x40uLL);
            long long v9 = v8[1];
            *uint64_t v7 = *v8;
            v7[1] = v9;
            long long v10 = v8[3];
            v7[2] = v8[2];
            v7[3] = v10;
            cstdlib_memcpy(v8, __dst, 0x40uLL);
            unsigned int v5 = 0;
          }
        }
        while (v5 < v3);
      }
      return v1;
    }
  }
  return result;
}

uint64_t wordpar_ResourceLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = 2370838529;
  if (!a1) {
    return 2370838535;
  }
  if (*(_DWORD *)(a1 + 164)) {
    return (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 104)
  }
                                                                                                  + 64))(*(void *)(a1 + 112), *(void *)(a1 + 120), a2, a3, a4, a5, a6);
  return result;
}

uint64_t wordpar_ResourceTypes(uint64_t a1, void *a2)
{
  uint64_t v2 = 2370838535;
  uint64_t v7 = 0;
  if (a1)
  {
    uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v7);
    if ((inited & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 164)) {
        return (*(uint64_t (**)(void, void, void *))(*(void *)(a1 + 104) + 56))(*(void *)(a1 + 112), *(void *)(a1 + 120), a2);
      }
      *a2 = 0;
      return inited;
    }
  }
  return v2;
}

uint64_t wordpar_ResourceUnload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2370838536;
  if (!a1) {
    return 2370838535;
  }
  if (*(_DWORD *)(a1 + 164))
  {
    uint64_t v5 = *(void *)(a1 + 104);
    if (v5) {
      return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v5 + 72))(*(void *)(a1 + 112), *(void *)(a1 + 120), a2, a3);
    }
  }
  return result;
}

uint64_t wordpar_WriteTextAndMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(_DWORD *)(a1 + 164))
  {
    return wordpar_loc_nonasian_WriteTextAndMarkers(a1, a2, a3, a4, a5);
  }
  uint64_t v657 = 0;
  uint64_t v658 = 0;
  uint64_t v656 = 0;
  int v654 = 0;
  char __s1 = 0;
  int v659 = 0;
  if ((GetCfgParamVal(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 80), (uint64_t)"felid_act_lid", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 188) = cstdlib_strcmp(__s1, "yes") == 0; {
  if ((GetCfgParamVal(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 80), (uint64_t)"felid_remove_internal_lang", &__s1) & 0x80000000) == 0)*(_DWORD *)(a1 + 192) = cstdlib_strcmp(__s1, "yes") == 0;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)(a1 + 32) + 136))(a2, a3, &v659);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v11 = (datac_RequestBlock(*(void *)(a1 + 24), 1012, 1u, &v657) & 0x80000000) != 0 ? 0 : *(void *)(v657 + 8);
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 24), 1021, 1u, &v656);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v13 = 2370838528;
  uint64_t v14 = *(unsigned __int16 *)(v656 + 16);
  if (!*(_WORD *)(v656 + 16)) {
    return v13;
  }
  uint64_t v15 = *(_DWORD **)(v656 + 8);
  if (v15[5] != 0x4000) {
    return v13;
  }
  if (!*(_DWORD *)(a1 + 196))
  {
    uint64_t v16 = v15 + 8;
    int v17 = v659 - v15[8];
    do
    {
      *v16 += v17;
      v16 += 16;
      --v14;
    }
    while (v14);
  }
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"start wordpar_WriteTextAndMarkers()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"start wordpar_WriteTextAndMarkers()", 0, 0, 0);
  uint64_t v10 = datac_RequestBlock(*(void *)(a1 + 24), 1020, 1u, &v658);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v639 = v11;
  uint64_t v18 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, *(unsigned __int16 *)(v658 + 16) + 1);
  if (!v18) {
    return 2370838538;
  }
  int v19 = v18;
  cstdlib_strncpy(v18, *(const char **)(v658 + 8), *(unsigned __int16 *)(v658 + 16));
  v19[*(unsigned __int16 *)(v658 + 16)] = 0;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 4, 0, (uint64_t)"L0:%s", v20, v21, v22, (uint64_t)v19);
  uint64_t v23 = wordpar_loc_AlignInputMarkers(a1);
  if ((v23 & 0x80000000) != 0)
  {
    uint64_t v64 = v23;
    goto LABEL_544;
  }
  uint64_t v619 = a5;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"out wordpar_loc_AlignInputMarkers()", 0, 0, 0);
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = v656;
  unsigned __int16 v643 = cstdlib_strlen(v19);
  char __s = v19;
  unsigned int v26 = *(unsigned __int16 *)(v25 + 16);
  uint64_t v617 = a3;
  uint64_t v618 = a4;
  uint64_t v616 = a2;
  if (v26 < 2) {
    goto LABEL_135;
  }
  for (unint64_t i = 1; i < v26; ++i)
  {
    unsigned int v28 = &v15[16 * i];
    if (v28[5] == 7)
    {
      int v29 = v28[10];
      if ((v29 - 15) <= 1)
      {
        BOOL v30 = &v15[16 * i];
        int v32 = v30 + 4;
        uint64_t v31 = *((unsigned __int16 *)v30 + 8);
        uint64_t v33 = *((void *)v30 + 1);
        if (*((_WORD *)v30 + 8))
        {
          uint64_t v34 = 0;
          int v35 = v30 + 8;
          unsigned int v36 = v30 + 6;
          do
          {
            if (!*(_DWORD *)(v33 + 8 * v34))
            {
              if (v26 >= 2)
              {
                unsigned int v37 = *v35;
                uint64_t v38 = v15 + 21;
                for (uint64_t j = 1; j != v26; ++j)
                {
                  if (v38[3] > v37) {
                    break;
                  }
                  if (*v38 == 998)
                  {
                    int v40 = v38[1];
                    if (v40 == *v36)
                    {
                      BOOL v41 = v38[5] != v29 || j + 1 >= (unint64_t)v26;
                      if (!v41 && v38[16] == 41)
                      {
                        unsigned int v42 = *(_DWORD *)(v33 + 8 * v34 + 4) + v40;
                        if (v15[7] + v15[6] < v42) {
                          unsigned int v42 = v15[7] + v15[6];
                        }
                        int v43 = v38[2];
                        v38[17] = v42;
                        v38[18] = v43;
                        _DWORD *v38 = 0;
                      }
                    }
                  }
                  v38 += 16;
                }
              }
              unsigned int v44 = *(_DWORD *)(v33 + 8 * v34 + 4) + *v36;
              if (v15[7] + v15[6] < v44) {
                unsigned int v44 = v15[7] + v15[6];
              }
              unsigned int *v36 = v44;
            }
            ++v34;
          }
          while (v34 != v31);
LABEL_51:
          heap_Free(*(void **)(v24 + 8), v33);
          *((void *)v32 - 1) = 0;
          *int v32 = 0;
          unsigned int v26 = *(unsigned __int16 *)(v25 + 16);
          continue;
        }
        if (v33) {
          goto LABEL_51;
        }
        if (v26 >= 2)
        {
          uint64_t v45 = 0;
          unsigned int v46 = &v15[16 * i];
          unsigned __int16 v47 = v46 + 6;
          unsigned int v48 = v46[8];
          uint64_t v49 = v15 + 23;
          unint64_t v50 = 1;
          do
          {
            unsigned __int16 v51 = &v15[16 * v50];
            if (v51[8] > v48) {
              break;
            }
            int v53 = v51[5];
            unsigned __int16 v52 = v51 + 5;
            if (v53 == 998)
            {
              unsigned __int16 v54 = &v15[16 * v50];
              unsigned int v55 = v54[6];
              if (v55 == *v47 && v54[10] == v29)
              {
                unint64_t v56 = v50 + 1;
                if (v50 + 1 < v26 && (v57 = &v15[16 * v56], v57[5] == 41) && (v59 = v57[6], unsigned int v58 = v57 + 6, v59 == v55))
                {
                  *unsigned int v58 = v55;
                  v15[16 * v56 + 7] = v15[16 * v50 + 7];
                  *unsigned __int16 v52 = 0;
                }
                else if (v50 >= 2)
                {
                  uint64_t v60 = v45;
                  unsigned int v61 = v49;
                  while (1)
                  {
                    if (*(v61 - 2) == 41)
                    {
                      unsigned int v62 = *(v61 - 1);
                      if (v62 < v55) {
                        goto LABEL_70;
                      }
                      if (v62 == v55) {
                        break;
                      }
                    }
                    v61 -= 16;
                    if (!(unint64_t)((unsigned __int16)v60-- & 0xFFFE)) {
                      goto LABEL_70;
                    }
                  }
                  *(v61 - 1) = v55;
                  *unsigned int v61 = v15[16 * v50 + 7];
                  *unsigned __int16 v52 = 0;
                  break;
                }
              }
            }
LABEL_70:
            ++v50;
            v49 += 16;
            ++v45;
          }
          while (v26 != (unsigned __int16)v50);
        }
      }
    }
  }
  int v19 = __s;
  if (v26 < 2) {
    goto LABEL_135;
  }
  for (uint64_t k = 1; k != v26; ++k)
  {
    unsigned __int16 v66 = &v15[16 * k];
    if (v66[5] == 998)
    {
      int v67 = v66 + 6;
      int v68 = v66 + 7;
      unsigned int v69 = v66[8];
      uint64_t v70 = v15 + 21;
      uint64_t v71 = 1;
      while (1)
      {
        unsigned int v72 = v70[3];
        if (v72 > v69) {
          goto LABEL_85;
        }
        if (*v70 == 41 && v70[1] == *v67) {
          break;
        }
        ++v71;
        v70 += 16;
        if (v26 == v71) {
          goto LABEL_85;
        }
      }
      int v73 = *v68;
      v70[2] = *v68;
      if ((int)v71 + 1 < v26 && v70[16] == 39 && v70[19] == v72)
      {
        uint64_t v74 = v71 + 1;
LABEL_95:
        v15[16 * v74 + 7] = v73;
        continue;
      }
      if ((v71 & 0xFFFE) != 0 && *(v70 - 16) == 39 && *(v70 - 13) == v72)
      {
        uint64_t v74 = v71 - 1;
        goto LABEL_95;
      }
    }
LABEL_85:
    ;
  }
  uint64_t v632 = v24;
  uint64_t v75 = 1;
  size_t v76 = szPHONMARKER_BEG;
  int v77 = 1;
  while (2)
  {
    uint64_t v78 = &v15[16 * v75];
    if (v78[5] != 7)
    {
LABEL_97:
      unsigned int v79 = &v15[16 * (unint64_t)(unsigned __int16)v77];
      long long v80 = *(_OWORD *)v78;
      long long v81 = *((_OWORD *)v78 + 1);
      long long v82 = *((_OWORD *)v78 + 3);
      v79[2] = *((_OWORD *)v78 + 2);
      v79[3] = v82;
      *unsigned int v79 = v80;
      v79[1] = v81;
      ++v77;
      goto LABEL_98;
    }
    int v83 = v78[10];
    if (v83 != 43)
    {
      if ((v83 - 15) <= 1) {
        goto LABEL_97;
      }
      goto LABEL_114;
    }
    unsigned int v84 = &v15[16 * v75];
    if (!v84[9])
    {
      uint64_t v100 = *((void *)v84 + 6);
      unsigned int v99 = v84 + 12;
      uint64_t v98 = v100;
      if (v100)
      {
        heap_Free(*(void **)(v632 + 8), v98);
        *unsigned int v99 = 0;
      }
LABEL_114:
      uint64_t v101 = &v15[16 * v75];
      uint64_t v104 = *((void *)v101 + 1);
      uint64_t v103 = v101 + 2;
      uint64_t v102 = v104;
      if (v104)
      {
        heap_Free(*(void **)(v632 + 8), v102);
        *uint64_t v103 = 0;
        LOWORD(v15[16 * v75 + 4]) = 0;
      }
      goto LABEL_98;
    }
    int v85 = v84[8] - v15[8];
    int v86 = v76;
    unsigned int v87 = (unsigned __int16)(v85 - cstdlib_strlen(v76));
    if (v87 >= v643)
    {
      size_t v76 = v86;
    }
    else
    {
      size_t v88 = cstdlib_strlen(v86);
      if (!cstdlib_strncmp(&v19[v87], v86, v88))
      {
        unint64_t v89 = &v15[16 * v75];
        uint64_t v92 = *((void *)v89 + 1);
        uint64_t v91 = v89 + 2;
        uint64_t v90 = v92;
        if (v92)
        {
          heap_Free(*(void **)(v632 + 8), v90);
          *uint64_t v91 = 0;
          LOWORD(v15[16 * v75 + 4]) = 0;
        }
        unsigned __int16 v93 = &v15[16 * (unint64_t)(unsigned __int16)v77];
        long long v94 = *(_OWORD *)v78;
        long long v95 = *((_OWORD *)v78 + 1);
        long long v96 = *((_OWORD *)v78 + 3);
        v93[2] = *((_OWORD *)v78 + 2);
        void v93[3] = v96;
        *unsigned __int16 v93 = v94;
        v93[1] = v95;
        *((_DWORD *)v93 + 8) = v15[8] + (unsigned __int16)v85;
        while (1)
        {
          LOWORD(v85) = v85 + 1;
          int v97 = __s[(unsigned __int16)v85];
          if ((unsigned __int16)v85 >= v643) {
            break;
          }
          if (v97 == 31) {
            goto LABEL_118;
          }
        }
        if (v97 != 31) {
          goto LABEL_119;
        }
LABEL_118:
        v15[16 * (unint64_t)(unsigned __int16)v77 + 9] = (unsigned __int16)v85
                                                              - v87
                                                              - cstdlib_strlen(szPHONMARKER_BEG);
LABEL_119:
        ++v77;
      }
      int v19 = __s;
      size_t v76 = szPHONMARKER_BEG;
    }
LABEL_98:
    if (++v75 < (unint64_t)*(unsigned __int16 *)(v25 + 16)) {
      continue;
    }
    break;
  }
  *(_WORD *)(v25 + 16) = v77;
  if ((unsigned __int16)v77 < 2u)
  {
LABEL_135:
    *(_WORD *)(v25 + 16) = 1;
    goto LABEL_136;
  }
  uint64_t v105 = 0;
  uint64_t v106 = 1;
  do
  {
    uint64_t v107 = &v15[16 * v106];
    if (v107[5] != 7 || v107[10] != 43)
    {
      uint64_t v108 = v107 + 8;
      uint64_t v109 = v15 + 26;
      uint64_t v110 = (unsigned __int16)v77 - 1;
      uint64_t v111 = v105;
      while (1)
      {
        if (v111)
        {
          if (*(v109 - 5) == 7 && *v109 == 43)
          {
            unsigned int v112 = *(v109 - 2);
            if (*v108 >= v112 && *v108 < *(v109 - 1) + v112) {
              break;
            }
          }
        }
        --v111;
        v109 += 16;
        if (!--v110) {
          goto LABEL_132;
        }
      }
      *uint64_t v108 = v112;
    }
LABEL_132:
    ++v106;
    ++v105;
  }
  while (v106 != (unsigned __int16)v77);
  *(_WORD *)(v25 + 16) = v77;
  LOWORD(v290) = 1;
  do
  {
    unint64_t v290 = (unsigned __int16)v290;
    unsigned int v291 = &v15[16 * (unint64_t)(unsigned __int16)v290];
    while (1)
    {
      int v292 = v291[5];
      if (v292 == 998 || v292 == 0) {
        break;
      }
      ++v290;
      v291 += 16;
      if (v290 >= (unsigned __int16)v77) {
        goto LABEL_136;
      }
    }
    uint64_t v294 = (unsigned __int16)v290 + 1;
    if ((unsigned __int16)v77 > v294)
    {
      cstdlib_memmove(v291, &v15[16 * v294], (uint64_t)((unsigned __int16)v77 - (int)v294) << 6);
      LOWORD(v77) = *(_WORD *)(v25 + 16);
    }
    LOWORD(v77) = v77 - 1;
    *(_WORD *)(v25 + 16) = v77;
  }
  while ((unsigned __int16)v77 > (unsigned __int16)v290);
LABEL_136:
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"out wordpar_loc_asian_ProcessWparserMarkers()", 0, 0, 0);
  int v113 = (char *)v657;
  *(void *)&long long __src = v656;
  v667[0] = (char *)v657;
  unsigned __int16 v114 = cstdlib_strlen((const char *)(a1 + 180));
  char v666 = 0;
  __int16 v665 = 30;
  v664 = 0;
  int v115 = *((unsigned __int16 *)v113 + 8);
  MarkerArgint Str = marker_getMarkerArgStr(2u);
  int v117 = v115 + cstdlib_strlen(MarkerArgStr) + 1;
  if (*((unsigned __int16 *)v113 + 9) < (unsigned __int16)v117)
  {
    uint64_t inserted = datac_RequestBlock(*(void *)(a1 + 24), 1012, (unsigned __int16)v117, v667);
    if ((inserted & 0x80000000) == 0)
    {
      int v113 = v667[0];
      goto LABEL_139;
    }
LABEL_543:
    uint64_t v64 = inserted;
    goto LABEL_544;
  }
LABEL_139:
  uint64_t v119 = (char *)(*((void *)v113 + 1)
                + *((unsigned __int16 *)v113 + 1) * (unint64_t)*((unsigned __int16 *)v113 + 8));
  unsigned __int16 v120 = marker_getMarkerArgStr(2u);
  cstdlib_strcpy(v119, v120);
  uint64_t v121 = marker_getMarkerArgStr(2u);
  v119[cstdlib_strlen(v121)] = 0;
  unsigned int v122 = *((unsigned __int16 *)v667[0] + 8);
  *((_WORD *)v667[0] + 8) = v117;
  uint64_t v123 = marker_getMarkerArgStr(1u);
  unsigned __int16 v124 = v117 + cstdlib_strlen(v123) + 1;
  uint64_t v125 = v667[0];
  if (*((unsigned __int16 *)v667[0] + 9) < v124)
  {
    uint64_t inserted = datac_RequestBlock(*(void *)(a1 + 24), 1012, v124, v667);
    if ((inserted & 0x80000000) != 0) {
      goto LABEL_543;
    }
    uint64_t v125 = v667[0];
  }
  unsigned int v606 = -1924128768;
  unsigned __int16 v126 = (char *)(*((void *)v125 + 1)
                + *((unsigned __int16 *)v125 + 1) * (unint64_t)*((unsigned __int16 *)v125 + 8));
  uint64_t v127 = marker_getMarkerArgStr(1u);
  cstdlib_strcpy(v126, v127);
  uint64_t v128 = marker_getMarkerArgStr(1u);
  v126[cstdlib_strlen(v128)] = 0;
  unsigned int v129 = *((unsigned __int16 *)v667[0] + 8);
  *((_WORD *)v667[0] + 8) = v124;
  HIBYTE(v665) = 76;
  uint64_t v130 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(v19);
  log_OutText(v130, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v131, v132, v133, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eL\")");
  int v19 = __s;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eL\")", 0, 0, 0);
  uint64_t inserted = wordpar_loc_asian_deleteStrAddMarker(*(void *)(a1 + 24), __s, (const char *)&v665, __src, v122);
  if ((inserted & 0x80000000) != 0) {
    goto LABEL_543;
  }
  HIBYTE(v665) = 68;
  uint64_t v134 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v134, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v135, v136, v137, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eD\")");
  int v19 = __s;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eD\")", 0, 0, 0);
  uint64_t inserted = wordpar_loc_asian_deleteStrAddMarker(*(void *)(a1 + 24), __s, (const char *)&v665, __src, v122);
  if ((inserted & 0x80000000) != 0) {
    goto LABEL_543;
  }
  uint64_t v138 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v138, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v139, v140, v141, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eP\")");
  int v19 = __s;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStrAddMarker(\"\\x1eP\")", 0, 0, 0);
  HIBYTE(v665) = 80;
  uint64_t v142 = wordpar_loc_asian_deleteStrAddMarker(*(void *)(a1 + 24), __s, (const char *)&v665, __src, v129);
  uint64_t v64 = v142;
  if ((v142 & 0x80000000) != 0) {
    goto LABEL_544;
  }
  uint64_t v143 = v142;
  uint64_t v144 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v144, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v145, v146, v147, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szPHONMARKER_BEG)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szPHONMARKER_BEG)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(__src, __s, szPHONMARKER_BEG);
  uint64_t v148 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v148, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v149, v150, v151, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szWORD_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szWORD_END)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(__src, __s, szWORD_END);
  uint64_t v152 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v152, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v153, v154, v155, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \"\"), initial only");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \"\"), initial only", 0, 0, 0);
  wordpar_loc_asian_replaceStrWithStr(__src, __s, "", 1);
  uint64_t v156 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v156, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v157, v158, v159, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \" \")");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_replaceStrWithStr(szWORD_BEG, \" \")", 0, 0, 0);
  wordpar_loc_asian_replaceStrWithStr(__src, __s, " ", 0);
  uint64_t v160 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v160, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v161, v162, v163, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)", 0, 0, 0);
  wordpar_loc_asian_deleteStr(__src, __s, szMARKER_END);
  uint64_t v164 = *(void *)(*(void *)(a1 + 16) + 32);
  cstdlib_strlen(__s);
  log_OutText(v164, (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Txt) (%s) len=%d (UTF8) \"%s\"", v165, v166, v167, (uint64_t)"after wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"after wordpar_loc_asian_deleteStr(pBMarker, pStr, szMARKER_END)", 0, 0, 0);
  int v168 = 0;
  unint64_t v169 = *(unsigned __int16 *)(__src + 16);
  BOOL v41 = v169 >= 2;
  unint64_t v170 = v169 - 2;
  if (v41)
  {
    int v168 = 0;
    uint64_t v171 = *(void *)(__src + 8);
    unsigned int v172 = *(_DWORD *)(v171 + 32);
    uint64_t v173 = (_DWORD *)(v171 + 104);
    do
    {
      unsigned int v174 = *(v173 - 2);
      if (v174 == v172 && *(v173 - 5) == 7 && *v173 == 43) {
        int v168 = 1;
      }
      v173 += 16;
      BOOL v175 = v174 > v172 || v170-- == 0;
    }
    while (!v175);
  }
  int v19 = __s;
  unsigned __int16 v176 = cstdlib_strlen(__s);
  uint64_t v64 = v143;
  if ((v176 & 0xFFFE) != 0 && *__s == 32 && !v168)
  {
    cstdlib_memmove(__s, __s + 1, v176);
    int v177 = *(_DWORD **)(__src + 8);
    unint64_t v178 = *(unsigned __int16 *)(__src + 16);
    if (v178 >= 2)
    {
      int v179 = v177[8];
      unint64_t v180 = v178 - 1;
      uint64_t v181 = v177 + 24;
      do
      {
        if (*v181 != v179) {
          --*v181;
        }
        v181 += 16;
        --v180;
      }
      while (v180);
    }
    --v177[9];
  }
  uint64_t v182 = __src;
  unint64_t v183 = *(unsigned int **)(__src + 8);
  if (*(unsigned __int16 *)(__src + 16) < 2u)
  {
    uint64_t v188 = __s;
    goto LABEL_297;
  }
  uint64_t v644 = 0;
  unsigned int v623 = v114;
  size_t v594 = v114;
  uint64_t v184 = -2;
  uint64_t v185 = 3;
  uint64_t v186 = 160;
  unint64_t v187 = 1;
  uint64_t v188 = __s;
  unsigned int v592 = v129;
  while (2)
  {
    uint64_t v189 = &v183[16 * v187];
    unsigned int v191 = v189[5];
    uint64_t v190 = v189 + 5;
    if (v191 != 7 || v183[16 * v187 + 10] != 43) {
      goto LABEL_222;
    }
    uint64_t v633 = v190;
    unsigned __int16 __dst = &v183[16 * v187];
    uint64_t v602 = v186;
    uint64_t v604 = v184;
    __sa = v19;
    v610 = (char *)v188;
    unsigned __int16 v595 = cstdlib_strlen(v188);
    unsigned __int16 v196 = &v183[16 * v187 + 8];
    if (*v196 < v183[8]
      || (uint64_t v197 = &v183[16 * v187], v199 = v197[9], v198 = v197 + 9, !v199)
      || (unsigned int v200 = cstdlib_strlen(v610), v201 = *v198, *v198 > v200))
    {
      char v300 = &v183[16 * v187];
      uint64_t v303 = *((void *)v300 + 6);
      int v302 = v300 + 12;
      uint64_t v301 = v303;
      if (v303)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v301);
        *int v302 = 0;
      }
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1922, 0, v192, v193, v194, v195, v589);
      int v19 = __sa;
      goto LABEL_318;
    }
    unint64_t v628 = v187;
    unsigned int v599 = v64;
    uint64_t v607 = v183;
    uint64_t v202 = &v610[*v196 - v183[8]];
    unsigned int v203 = (unsigned __int16)*v198;
    uint64_t v598 = v185;
    unsigned int v204 = 0;
    if ((_WORD)v201)
    {
      while (utf8_BelongsToSet(0, v202, v204, (unsigned __int16)v201))
      {
        if (v203 == ++v204)
        {
          unsigned int v204 = v201;
          break;
        }
      }
      unsigned __int16 v209 = v201 - 1;
      if ((_WORD)v201 == 1)
      {
LABEL_183:
        LOWORD(v201) = 1;
        goto LABEL_184;
      }
    }
    else
    {
      unsigned __int16 v209 = -1;
    }
    unsigned int v210 = v209;
    while (utf8_BelongsToSet(0, v202, v210, v203))
    {
      LOWORD(v201) = v201 - 1;
      if (!(_WORD)--v210) {
        goto LABEL_183;
      }
    }
LABEL_184:
    if ((unsigned __int16)v201 <= (unsigned __int16)v204) {
      goto LABEL_217;
    }
    uint64_t v211 = 0;
    char v212 = 95;
    unsigned int v213 = v204;
    while (2)
    {
      unsigned int v214 = v202[(unsigned __int16)v213];
      if (v214 <= 0x5B)
      {
        if (v214 == 35) {
          goto LABEL_198;
        }
        if (v214 == 18) {
          break;
        }
      }
      else
      {
        if (v214 != 95)
        {
          BOOL v175 = v214 == 92;
          uint64_t v215 = (unsigned __int16)v213 + 1;
          BOOL v216 = !v175 || v215 >= (unsigned __int16)v201;
          if (!v216 && v202[v215] == 84)
          {
            uint64_t v217 = v211;
            for (unsigned int m = v213 + 2;
                  (unsigned __int16)m < (unsigned __int16)v201;
                  m += utf8_determineUTF8CharLength(v219))
            {
              unsigned int v219 = v202[(unsigned __int16)m];
              if (v219 == 92) {
                break;
              }
            }
            if (v202[(unsigned __int16)m] == 92) {
              unsigned int v213 = m;
            }
            uint64_t v211 = v217;
          }
          goto LABEL_206;
        }
LABEL_198:
        if (v212 != 35 && v212 != 95) {
          uint64_t v211 = (v211 + 1);
        }
      }
LABEL_206:
      if (!utf8_BelongsToSet(0, v202, (unsigned __int16)v213, v203)) {
        char v212 = v202[(unsigned __int16)v213];
      }
      if ((unsigned __int16)++v213 < (unsigned __int16)v201) {
        continue;
      }
      break;
    }
    if (v212 == 35)
    {
      long long v220 = v633;
    }
    else
    {
      long long v220 = v633;
      if (v212 != 95) {
        LOWORD(v211) = v211 + 1;
      }
    }
    unsigned int v634 = (unsigned __int16)v211;
    if (!(_WORD)v211)
    {
LABEL_217:
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 1818, 0, v205, v206, v207, v208, v589);
      unint64_t v187 = v628;
      unsigned __int16 v228 = &v607[16 * v628];
      uint64_t v231 = *((void *)v228 + 6);
      unint64_t v230 = v228 + 12;
      uint64_t v229 = v231;
      if (v231)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v229);
        *unint64_t v230 = 0;
      }
      uint64_t v182 = __src;
      uint64_t v232 = *(unsigned __int16 *)(__src + 16);
      int v19 = __sa;
      uint64_t v64 = v599;
      uint64_t v184 = v604;
      uint64_t v185 = v598;
      unint64_t v183 = v607;
      if (v628 + 1 != v232)
      {
        cstdlib_memmove(__dst, &v607[16 * v628 + 16], (uint64_t)((int)v232 - (int)v628) << 6);
        uint64_t v182 = __src;
        LOWORD(v232) = *(_WORD *)(__src + 16);
      }
      uint64_t v186 = v602;
      uint64_t v188 = v610;
      *(_WORD *)(v182 + 16) = v232 - 1;
      goto LABEL_222;
    }
    *long long v220 = 34;
    uint64_t v221 = v667[0];
    unsigned int v222 = *((unsigned __int16 *)v667[0] + 8);
    unsigned __int16 v223 = v201 - v204 + v222 + 1;
    if (*((unsigned __int16 *)v667[0] + 9) < v223)
    {
      uint64_t v224 = datac_RequestBlock(*(void *)(a1 + 24), 1012, (unsigned __int16)(v201 - v204 + v222 + 1), v667);
      unsigned int v225 = v634;
      if ((v224 & 0x80000000) == 0)
      {
        uint64_t v226 = *(unsigned int **)(__src + 8);
        uint64_t v221 = v667[0];
        unsigned int v222 = *((unsigned __int16 *)v667[0] + 8);
        unint64_t v227 = v628;
        goto LABEL_225;
      }
      uint64_t v64 = v224;
LABEL_640:
      int v19 = __sa;
      goto LABEL_544;
    }
    uint64_t v226 = v607;
    unint64_t v227 = v628;
    unsigned int v225 = v634;
LABEL_225:
    v600 = &v226[16 * v227 + 8];
    v608 = v226;
    uint64_t v233 = *v600 - v226[8];
    uint64_t v234 = (char *)(*((void *)v221 + 1) + *((unsigned __int16 *)v221 + 1) * (unint64_t)v222);
    unint64_t v235 = &v226[16 * v227];
    cstdlib_strncpy(v234, &v610[v233 + (unsigned __int16)v204], (unsigned __int16)(v201 - v204));
    v234[(unsigned __int16)v201 - (unsigned __int16)v204] = 0;
    unsigned int v237 = *((unsigned __int16 *)v235 + 18);
    int v236 = (unsigned __int16 *)(v235 + 9);
    *((_DWORD *)v236 + 1) = *((unsigned __int16 *)v667[0] + 8);
    *((_WORD *)v667[0] + 8) = v223;
    if (v623 * v225 <= v237)
    {
      uint64_t v240 = (uint64_t)__sa;
      __int16 v241 = (const void *)(a1 + 180);
    }
    else
    {
      uint64_t v238 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
      int v239 = cstdlib_strlen(v610);
      uint64_t v240 = heap_Realloc(v238, (uint64_t)v610, v623 * v225 + v239 - *v236 + 1);
      v610 = (char *)v240;
      __int16 v241 = (const void *)(a1 + 180);
      if (!v240)
      {
LABEL_639:
        uint64_t v64 = 2370838538;
        goto LABEL_640;
      }
    }
    __sb = (char *)v240;
    int v593 = v623 * v225;
    __dsta = v236;
    if (v233 >= v608[9])
    {
      int v591 = 0;
      int v242 = v610;
    }
    else
    {
      int v242 = v610;
      int v591 = *v236;
      cstdlib_memmove(&v610[v233], &v610[(v591 + v233)], v595 - (v591 + v233) + 1);
    }
    int v243 = 0;
    do
    {
      uint64_t v244 = (unsigned __int16)cstdlib_strlen(v242);
      cstdlib_memmove((void *)&v242[v233 + v623], &v242[v233], (v244 - v233));
      v242[v244 + v623] = 0;
      cstdlib_memmove((void *)&v242[v233], v241, v594);
      ++v243;
    }
    while (v634 > (unsigned __int16)v243);
    unint64_t v245 = *(unsigned __int16 *)(__src + 16);
    uint64_t v184 = v604;
    if (v628 + 1 < v245)
    {
      unsigned __int16 v246 = (unsigned int *)((char *)v608 + v602);
      uint64_t v247 = v598;
      do
      {
        if (*v246 > *v600) {
          *v246 += v593 - v591;
        }
        BOOL v175 = v245 == (unsigned __int16)v247++;
        v246 += 16;
      }
      while (!v175);
    }
    int v248 = 0;
    unint64_t v249 = 0;
    _DWORD *__dsta = 0;
    if (v634 <= 1) {
      unsigned int v250 = 1;
    }
    else {
      unsigned int v250 = v634;
    }
    unint64_t v251 = (unint64_t)v250 << 6;
    int v252 = v604;
    do
    {
      uint64_t v253 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)(v245 + 1), &__src);
      uint64_t v254 = v253;
      if ((v253 & 0x80000000) != 0)
      {
        int v19 = __sb;
        uint64_t v64 = v253;
        goto LABEL_544;
      }
      unint64_t v183 = *(unsigned int **)(__src + 8);
      cstdlib_memmove(&v183[v644 + 48 + v249 / 4], &v183[v644 + 32 + v249 / 4], (uint64_t)(v252 + *(unsigned __int16 *)(__src + 16)) << 6);
      uint64_t v255 = *(void *)(__src + 8) + v644 * 4 + v249;
      *(_DWORD *)(v255 + 128) = 1;
      *(_DWORD *)(v255 + 148) = 1;
      int v256 = &v183[16 * v628];
      *(void *)(v255 + 152) = *((void *)v256 + 3);
      unsigned int v258 = v256[8];
      uint64_t v257 = v256 + 8;
      *(_DWORD *)(v255 + 160) = v248 + v258;
      *(_DWORD *)(v255 + 164) = v623;
      *(_WORD *)(v255 + 144) = 0;
      *(void *)(v255 + 136) = 0;
      *(_DWORD *)(v255 + 168) = 0;
      *(void *)(v255 + 176) = 0;
      uint64_t v182 = __src;
      unsigned int v259 = *(unsigned __int16 *)(__src + 16);
      LOWORD(v245) = v259 + 1;
      *(_WORD *)(__src + 16) = v259 + 1;
      v249 += 64;
      v248 += v623;
      --v252;
    }
    while (v251 != v249);
    uint64_t v260 = 0;
    unsigned int v261 = *v257 + v593;
    unsigned int v262 = (unsigned __int16)(v259 + 1);
    if ((((_WORD)v259 + 1) & 0xFFFE) == 0) {
      unsigned int v262 = 1;
    }
    unint64_t v263 = (unint64_t)v262 << 6;
    uint64_t v64 = v254;
    while (1)
    {
      uint64_t v264 = v260 + 64;
      if (v263 == v260 + 64) {
        break;
      }
      uint64_t v265 = (char *)v183 + v260;
      BOOL v266 = v261 == *((_DWORD *)v265 + 24) && *((_DWORD *)v265 + 21) == 21;
      uint64_t v260 = v264;
      if (v266)
      {
        int v19 = __sb;
        goto LABEL_283;
      }
    }
    if ((unsigned __int16)(v259 + 1) < 2u)
    {
      LOWORD(v268) = 1;
      unsigned int v269 = v592;
    }
    else
    {
      uint64_t v267 = v183 + 26;
      uint64_t v268 = 1;
      unsigned int v269 = v592;
      while (1)
      {
        int v270 = *(v267 - 5);
        if (v270 == 21) {
          unsigned int v269 = *v267;
        }
        unsigned int v271 = *(v267 - 2) - v183[8];
        if (v261 <= v271 && (v270 == 7 || v261 != v271)) {
          break;
        }
        ++v268;
        v267 += 16;
        if ((unsigned __int16)(v259 + 1) == v268) {
          goto LABEL_269;
        }
      }
    }
    uint64_t v273 = (unsigned __int16)v268;
    if ((unsigned __int16)v268 == (unsigned __int16)v245)
    {
LABEL_269:
      uint64_t v274 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)(v259 + 2), &__src);
      uint64_t v275 = v274;
      if ((v274 & 0x80000000) != 0)
      {
        int v19 = __sb;
        uint64_t v64 = v274;
        goto LABEL_544;
      }
      uint64_t v276 = *(unsigned int **)(__src + 8);
      uint64_t v277 = *(unsigned __int16 *)(__src + 16);
      char v278 = &v276[16 * v277];
      *char v278 = 1;
      v278[5] = 21;
      if (v259) {
        int LastPosRef = wordpar_loc_asian_getLastPosRef(v276, v277, v261 - v276[8], v259, 0);
      }
      else {
        int LastPosRef = v276[7] + v276[6];
      }
      BOOL v289 = &v276[16 * v277];
      v289[6] = LastPosRef;
      v289[7] = 0;
      v289[8] = v261;
      v289[9] = 0;
      *((_WORD *)v289 + 8) = 0;
      *((void *)v289 + 1) = 0;
      v289[10] = v269;
      *((void *)v289 + 6) = 0;
      uint64_t v182 = __src;
      ++*(_WORD *)(__src + 16);
      int v19 = __sb;
      uint64_t v64 = v275;
      uint64_t v184 = v604;
      unint64_t v183 = v276;
    }
    else
    {
      unsigned int v280 = v183[8];
      if (v273 < (unsigned __int16)v245)
      {
        unint64_t v281 = v273 + 1;
        unsigned __int16 v282 = &v183[16 * v273 + 5];
        while (v261 == v282[3] - v280)
        {
          unsigned int v284 = *v282;
          v282 += 16;
          unsigned int v283 = v284;
          if (v281 < (unsigned __int16)(v259 + 1))
          {
            ++v281;
            if (v283 != 21) {
              continue;
            }
          }
          if (v283 != 21) {
            break;
          }
          int v19 = __sb;
          uint64_t v64 = v254;
          goto LABEL_280;
        }
      }
      int v285 = wordpar_loc_asian_getLastPosRef(v183, (unsigned __int16)(v259 + 1), v261 - v280, v273, 0);
      uint64_t v286 = datac_RequestBlock(*(void *)(a1 + 24), 1021, (unsigned __int16)(v259 + 2), &__src);
      uint64_t v287 = v286;
      if ((v286 & 0x80000000) != 0)
      {
        int v19 = __sb;
        uint64_t v64 = v286;
        goto LABEL_544;
      }
      unint64_t v183 = *(unsigned int **)(__src + 8);
      cstdlib_memmove(&v183[16 * (unint64_t)(v273 + 1)], &v183[16 * v273], (uint64_t)(*(unsigned __int16 *)(__src + 16) - (int)v273) << 6);
      uint64_t v288 = *(void *)(__src + 8) + (v273 << 6);
      *(_DWORD *)uint64_t v288 = 1;
      *(_DWORD *)(v288 + 20) = 21;
      *(_DWORD *)(v288 + 24) = v285;
      *(_DWORD *)(v288 + 28) = 0;
      *(_DWORD *)(v288 + 32) = v261;
      *(_WORD *)(v288 + 16) = 0;
      *(void *)(v288 + 8) = 0;
      *(_DWORD *)(v288 + 36) = 0;
      *(_DWORD *)(v288 + 40) = v269;
      *(void *)(v288 + 48) = 0;
      uint64_t v182 = __src;
      ++*(_WORD *)(__src + 16);
      int v19 = __sb;
      uint64_t v64 = v287;
LABEL_280:
      uint64_t v184 = v604;
    }
LABEL_283:
    uint64_t v185 = v598;
    uint64_t v186 = v602;
    unint64_t v187 = v628;
    uint64_t v188 = v610;
LABEL_222:
    ++v187;
    ++v185;
    v186 += 64;
    v644 += 16;
    --v184;
    if (v187 < *(unsigned __int16 *)(v182 + 16)) {
      continue;
    }
    break;
  }
LABEL_297:
  v183[9] = cstdlib_strlen(v188);
  if (*(_DWORD *)(a1 + 188)
    || (paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &v664) & 0x80000000) == 0
    && (!LH_stricmp(v664, "MNC")
     || !LH_stricmp(v664, "MNT")
     || !LH_stricmp(v664, "SIC")))
  {
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"in wordpar_loc_asian_TranslateMarkup() before remove conflict internal LANG marker", 0, 0, 0);
    uint64_t v295 = __src;
    LODWORD(v296) = *(unsigned __int16 *)(__src + 16);
    if (v296 >= 2)
    {
      unint64_t v297 = v183 + 16;
      uint64_t v298 = -1;
      unint64_t v299 = 1;
      do
      {
        if (*(v297 - 11) == 36 && v297[5] == 36 && *(v297 - 8) == v297[8] && !*v297)
        {
          cstdlib_memmove(v297 - 16, v297, (v298 + v296) << 6);
          uint64_t v295 = __src;
          --*(_WORD *)(__src + 16);
        }
        ++v299;
        unint64_t v296 = *(unsigned __int16 *)(v295 + 16);
        --v298;
        v297 += 16;
      }
      while (v299 < v296);
    }
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"in wordpar_loc_asian_TranslateMarkup() after remove conflict internal LANG marker", 0, 0, 0);
  }
  if ((v64 & 0x80000000) != 0) {
    goto LABEL_544;
  }
LABEL_318:
  __sa = v19;
  int v304 = datac_RequestBlock(*(void *)(a1 + 24), 1012, 1u, &v657);
  uint64_t v305 = v639;
  if ((v304 & 0x80000000) == 0) {
    uint64_t v305 = *(void *)(v657 + 8);
  }
  int v306 = *(char **)(v656 + 8);
  if (v305 && *(_WORD *)(v656 + 16))
  {
    uint64_t v307 = v305;
    unint64_t v308 = 0;
    BOOL v309 = 0;
    BOOL v310 = 0;
    uint64_t v311 = 0;
    uint64_t v312 = (const char **)(v306 + 40);
    do
    {
      if (marker_hasNonConstCharPtrArg(*((_DWORD *)v312 - 5)))
      {
        uint64_t v313 = *(unsigned int *)v312;
        if (v313 == -1) {
          uint64_t v314 = 0;
        }
        else {
          uint64_t v314 = (const char *)(v307 + v313);
        }
        *uint64_t v312 = v314;
        if (*((_DWORD *)v312 - 5) == 21) {
          uint64_t v311 = v314;
        }
        if (!*((_DWORD *)v312 - 10))
        {
          BOOL v310 = cstdlib_strcmp(v314, "enu") == 0;
          BOOL v309 = cstdlib_strcmp(*v312, "eng") == 0;
        }
        if (!v311 || cstdlib_strcmp(v311, "normal"))
        {
          if (v310 && *((_DWORD *)v312 - 5) == 36 && *((_DWORD *)v312 - 10) == 1) {
            *uint64_t v312 = "enu";
          }
          if (v309)
          {
            if (*((_DWORD *)v312 - 5) == 36 && *((_DWORD *)v312 - 10) == 1) {
              *uint64_t v312 = "eng";
            }
            BOOL v309 = 1;
          }
          else
          {
            BOOL v309 = 0;
          }
        }
      }
      ++v308;
      v312 += 8;
    }
    while (v308 < *(unsigned __int16 *)(v656 + 16));
  }
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_PostProcessMarkers()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_PostProcessMarkers()", 1, 0, 0);
  uint64_t v315 = *(void *)(a1 + 16);
  int v316 = *(_DWORD *)(a1 + 188);
  uint64_t v317 = v656;
  long long v662 = 0u;
  long long v663 = 0u;
  long long __src = 0u;
  long long v661 = 0u;
  unsigned __int16 v318 = marker_getMarkerArgStr(1u);
  uint64_t v319 = v317;
  v667[0] = 0;
  unsigned int v320 = *(unsigned __int16 *)(v317 + 16);
  uint64_t v645 = v317;
  if (v320 >= 2)
  {
    uint64_t v321 = v318;
    unsigned int v322 = 1;
    do
    {
      uint64_t v323 = v322 + 1;
      if (v323 < v320)
      {
        int v324 = &v306[64 * (unint64_t)v322];
        int v325 = &v306[64 * v323];
        if (*((_DWORD *)v324 + 8) == *((_DWORD *)v325 + 8))
        {
          int v326 = *((_DWORD *)v324 + 5);
          if (v326 != 36 && v326 != 0x4000 && *(_DWORD *)&v306[64 * v323 + 20] == 36)
          {
            cstdlib_memcpy(&__src, &v306[64 * v323], 0x40uLL);
            long long v327 = *((_OWORD *)v324 + 1);
            *(_OWORD *)int v325 = *(_OWORD *)v324;
            *((_OWORD *)v325 + 1) = v327;
            long long v328 = *((_OWORD *)v324 + 3);
            *((_OWORD *)v325 + 2) = *((_OWORD *)v324 + 2);
            *((_OWORD *)v325 + 3) = v328;
            cstdlib_memcpy(v324, &__src, 0x40uLL);
            uint64_t v319 = v317;
            unsigned int v320 = *(unsigned __int16 *)(v317 + 16);
            LODWORD(v323) = 1;
          }
        }
      }
      unsigned int v322 = v323;
    }
    while (v323 < v320);
    if (v320 >= 2)
    {
      int v329 = v306 + 84;
      for (unint64_t n = 1; n < v320; ++n)
      {
        int v331 = *(_DWORD *)v329;
        if (*(_DWORD *)v329 == 41)
        {
          BOOL v332 = marker_getMarkerArgStr(1u);
          if (!cstdlib_strcmp(v321, v332))
          {
            int v333 = *((_DWORD *)v329 + 3);
            int v334 = *((_DWORD *)v306 + 8);
            if (v333 != v334 && __sa[v333 + ~v334] == 32) {
              *((_DWORD *)v329 + 3) = v333 + 1;
            }
          }
          *(_DWORD *)int v329 = 1;
          uint64_t v319 = v645;
          unsigned int v320 = *(unsigned __int16 *)(v645 + 16);
        }
        else if (v331 == 39)
        {
          int v335 = *((_DWORD *)v329 + 3);
          if (v335 != *((_DWORD *)v306 + 8)) {
            *((_DWORD *)v329 + 3) = v335 + 1;
          }
          *(_DWORD *)int v329 = 37;
        }
        else if (v331 == 36)
        {
          uint64_t v321 = *(const char **)(v329 + 20);
        }
        v329 += 64;
      }
      if (v320 >= 2)
      {
        unsigned int v336 = 1;
        do
        {
          uint64_t v337 = v336 + 1;
          if (v337 >= v320
            || (uint64_t v338 = &v306[64 * v337],
                uint64_t v339 = &v306[64 * (unint64_t)v336],
                *((_DWORD *)v338 + 8) >= *((_DWORD *)v339 + 8)))
          {
            ++v336;
          }
          else
          {
            cstdlib_memcpy(&__src, &v306[64 * v337], 0x40uLL);
            long long v340 = *((_OWORD *)v339 + 1);
            *(_OWORD *)uint64_t v338 = *(_OWORD *)v339;
            *((_OWORD *)v338 + 1) = v340;
            long long v341 = *((_OWORD *)v339 + 3);
            *((_OWORD *)v338 + 2) = *((_OWORD *)v339 + 2);
            *((_OWORD *)v338 + 3) = v341;
            cstdlib_memcpy(v339, &__src, 0x40uLL);
            uint64_t v319 = v645;
            unsigned int v336 = 0;
            unsigned int v320 = *(unsigned __int16 *)(v645 + 16);
          }
        }
        while (v336 < v320);
        if (v320 >= 2)
        {
          unsigned int v342 = 1;
          do
          {
            uint64_t v343 = v342 + 1;
            if (v343 < v320)
            {
              uint64_t v344 = &v306[64 * (unint64_t)v342];
              uint64_t v345 = &v306[64 * v343];
              if (*((_DWORD *)v344 + 8) == *((_DWORD *)v345 + 8))
              {
                int v346 = *((_DWORD *)v344 + 5);
                if (v346 != 36 && v346 != 0x4000 && *(_DWORD *)&v306[64 * v343 + 20] == 36)
                {
                  cstdlib_memcpy(&__src, &v306[64 * v343], 0x40uLL);
                  long long v347 = *((_OWORD *)v344 + 1);
                  *(_OWORD *)uint64_t v345 = *(_OWORD *)v344;
                  *((_OWORD *)v345 + 1) = v347;
                  long long v348 = *((_OWORD *)v344 + 3);
                  *((_OWORD *)v345 + 2) = *((_OWORD *)v344 + 2);
                  *((_OWORD *)v345 + 3) = v348;
                  cstdlib_memcpy(v344, &__src, 0x40uLL);
                  uint64_t v319 = v645;
                  unsigned int v320 = *(unsigned __int16 *)(v645 + 16);
                  LODWORD(v343) = 1;
                }
              }
            }
            unsigned int v342 = v343;
          }
          while (v343 < v320);
        }
      }
    }
  }
  if (v316) {
    goto LABEL_385;
  }
  int Str = paramc_ParamGetStr(*(void *)(v315 + 40), (uint64_t)"langcode", v667);
  uint64_t v319 = v645;
  if (Str < 0
    || (v391 = LH_stricmp(v667[0], "MNC"), uint64_t v319 = v645, v391)
    && (v392 = LH_stricmp(v667[0], "MNT"), uint64_t v319 = v645, v392)
    && (v393 = LH_stricmp(v667[0], "SIC"), uint64_t v319 = v645, v393))
  {
    int v19 = __sa;
    if (*(unsigned __int16 *)(v319 + 16) < 2u)
    {
      unsigned int v349 = 1;
    }
    else
    {
      v394 = (const char **)(v306 + 104);
      unint64_t v395 = 1;
      do
      {
        if (*((_DWORD *)v394 - 5) == 36)
        {
          v396 = *v394;
          v397 = marker_getMarkerArgStr(9u);
          int v398 = cstdlib_strcmp(v396, v397);
          uint64_t v319 = v645;
          if (!v398
            || (v399 = *v394, v400 = marker_getMarkerArgStr(0xAu), v401 = cstdlib_strcmp(v399, v400), uint64_t v319 = v645, !v401))
          {
            *((_DWORD *)v394 - 5) = 999;
          }
        }
        ++v395;
        v394 += 8;
      }
      while (v395 < *(unsigned __int16 *)(v319 + 16));
      unsigned int v349 = (unsigned __int16)v395;
    }
    *(_WORD *)(v319 + 16) = v349;
  }
  else
  {
LABEL_385:
    unsigned int v349 = *(unsigned __int16 *)(v319 + 16);
    int v19 = __sa;
  }
  if (v349 >= 2)
  {
    uint64_t v350 = 1;
    unsigned __int16 v351 = 1;
    while (1)
    {
      int v352 = &v306[64 * v350];
      if (*((_DWORD *)v352 + 5) != 36) {
        goto LABEL_401;
      }
      unsigned __int16 v353 = v350 - 1;
      if (v350 == 1) {
        break;
      }
      int v354 = &v306[64 * v350];
      __int16 v355 = v354 + 32;
      while (1)
      {
        uint64_t v356 = v353;
        int v357 = &v306[64 * (unint64_t)v353];
        v358 = v357 + 20;
        if (*((_DWORD *)v357 + 5) == 36) {
          break;
        }
        unsigned __int16 v353 = v356 - 1;
        if ((_WORD)v356 == 1) {
          goto LABEL_402;
        }
      }
      int v359 = cstdlib_strcmp(*((const char **)v354 + 5), *((const char **)v357 + 5));
      uint64_t v319 = v645;
      if (!v359) {
        break;
      }
      int v360 = &v306[64 * v356];
      if (*v355 != *((_DWORD *)v360 + 8)) {
        break;
      }
      if (*(_DWORD *)v360 && (*(_DWORD *)v360 != 1 || *v355 != *((_DWORD *)v306 + 8)))
      {
        long long v366 = *(_OWORD *)v352;
        long long v367 = *((_OWORD *)v352 + 1);
        long long v368 = *((_OWORD *)v352 + 3);
        *((_OWORD *)v360 + 2) = *((_OWORD *)v352 + 2);
        *((_OWORD *)v360 + 3) = v368;
        *(_OWORD *)int v360 = v366;
        *((_OWORD *)v360 + 1) = v367;
        goto LABEL_404;
      }
      if (!*(_DWORD *)v352)
      {
        _DWORD *v358 = 999;
LABEL_401:
        uint64_t v361 = v351;
LABEL_403:
        v362 = &v306[64 * v361];
        long long v363 = *(_OWORD *)v352;
        long long v364 = *((_OWORD *)v352 + 1);
        long long v365 = *((_OWORD *)v352 + 3);
        *((_OWORD *)v362 + 2) = *((_OWORD *)v352 + 2);
        *((_OWORD *)v362 + 3) = v365;
        *(_OWORD *)v362 = v363;
        *((_OWORD *)v362 + 1) = v364;
        ++v351;
      }
LABEL_404:
      if (++v350 >= (unint64_t)*(unsigned __int16 *)(v319 + 16)) {
        goto LABEL_408;
      }
    }
LABEL_402:
    uint64_t v361 = v351;
    goto LABEL_403;
  }
  unsigned __int16 v351 = 1;
LABEL_408:
  *(_WORD *)(v319 + 16) = v351;
  marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_deleteMarkerForUnknown()");
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteMarkerForUnknown()", 0, 0, 0);
  uint64_t v369 = v656;
  if (*(_WORD *)(v656 + 16))
  {
    int v370 = 0;
    do
    {
      uint64_t v371 = &v306[64 * (unint64_t)(unsigned __int16)v370];
      long long __src = *(_OWORD *)v371;
      long long v661 = *((_OWORD *)v371 + 1);
      long long v662 = *((_OWORD *)v371 + 2);
      long long v663 = *((_OWORD *)v371 + 3);
      isMarkerUnknowunint64_t n = wordpar_loc_asian_isMarkerUnknown((uint64_t)&__src);
      unsigned __int16 v373 = *(_WORD *)(v369 + 16);
      if (isMarkerUnknown)
      {
        if (!*(_WORD *)(v369 + 16)) {
          goto LABEL_433;
        }
        unsigned __int16 v374 = 0;
        do
        {
          int v375 = &v306[64 * (unint64_t)v374];
          if (*((_DWORD *)v375 + 5) == 36
            && (v376 = (const char *)*((void *)v375 + 5), uint64_t v377 = marker_getMarkerArgStr(9u),
                                                            cstdlib_strcmp(v376, v377))
            && *(_DWORD *)v375 == 1
            && (uint64_t v378 = &v306[64 * (unint64_t)(unsigned __int16)v370],
                *((_DWORD *)v378 + 8) == *(_DWORD *)&v306[64 * (unint64_t)v374 + 32]))
          {
            cstdlib_memmove(v378, &v306[64 * (unint64_t)((unsigned __int16)v370 + 1)], (uint64_t)(*(unsigned __int16 *)(v369 + 16) - (unsigned __int16)v370) << 6);
            unsigned __int16 v373 = *(_WORD *)(v369 + 16) - 1;
            *(_WORD *)(v369 + 16) = v373;
            v370 -= (unsigned __int16)v370 >= v374;
          }
          else
          {
            ++v374;
            unsigned __int16 v373 = *(_WORD *)(v369 + 16);
          }
        }
        while (v374 < v373);
      }
      ++v370;
    }
    while ((unsigned __int16)v370 < v373);
    if (v373)
    {
      int v379 = 0;
      int v380 = 0;
      unint64_t v381 = 0;
      do
      {
        int v382 = &v306[64 * v381];
        if (*((_DWORD *)v382 + 5) != 36) {
          goto LABEL_431;
        }
        long long __src = *(_OWORD *)v382;
        long long v661 = *((_OWORD *)v382 + 1);
        long long v662 = *((_OWORD *)v382 + 2);
        long long v663 = *((_OWORD *)v382 + 3);
        if (wordpar_loc_asian_isMarkerUnknown((uint64_t)&__src))
        {
          ++v381;
        }
        else
        {
          if (!*(_DWORD *)v382)
          {
            int v380 = 0;
LABEL_431:
            ++v381;
            goto LABEL_432;
          }
          if (!v380) {
            goto LABEL_431;
          }
          cstdlib_memmove(&v306[64 * v381], &v306[64 * (unint64_t)(v379 + 1)], (uint64_t)(*(unsigned __int16 *)(v369 + 16) - v379) << 6);
          --*(_WORD *)(v369 + 16);
        }
        int v380 = 1;
LABEL_432:
        int v379 = (unsigned __int16)v381;
      }
      while (v381 < *(unsigned __int16 *)(v369 + 16));
    }
  }
LABEL_433:
  if (*(_DWORD *)(a1 + 192))
  {
    marker_TraceTxt(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1020, (uint64_t)"before wordpar_loc_asian_deleteConflictingLangMarker()");
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_deleteConflictingLangMarker()", 0, 0, 0);
    if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &v654) & 0x80000000) == 0)
    {
      uint64_t v383 = v656;
      unsigned int v384 = *(unsigned __int16 *)(v656 + 16);
      if (*(_WORD *)(v656 + 16))
      {
        unint64_t v385 = 0;
        v386 = v654;
        int v387 = v306 + 20;
        while (*(_DWORD *)v387 != 36)
        {
LABEL_440:
          ++v385;
          v387 += 64;
          if (v385 >= v384)
          {
            int v646 = 0;
            unint64_t v385 = 0;
            int v635 = 0;
            goto LABEL_457;
          }
        }
        v388 = *(const char **)(v387 + 20);
        uint64_t v389 = marker_getMarkerArgStr(0xBu);
        if (cstdlib_strcmp(v388, v389))
        {
          unsigned int v384 = *(unsigned __int16 *)(v383 + 16);
          goto LABEL_440;
        }
        int v635 = *((_DWORD *)v387 - 5);
        unsigned int v384 = *(unsigned __int16 *)(v383 + 16);
        int v646 = 1;
LABEL_457:
        if (v384)
        {
          int v402 = 0;
          int v403 = 0;
          unint64_t v404 = 0;
          int v640 = &v306[64 * v385];
          do
          {
            v405 = &v306[64 * v404];
            if (*((_DWORD *)v405 + 5) == 36)
            {
              size_t v406 = (const char *)*((void *)v405 + 5);
              size_t v407 = marker_getMarkerArgStr(1u);
              if (cstdlib_strcmp(v406, v407))
              {
                if (cstdlib_strcmp(v406, v386))
                {
                  uint64_t v408 = marker_getMarkerArgStr(2u);
                  if (cstdlib_strcmp(v406, v408))
                  {
                    ++v404;
                    int v403 = 1;
LABEL_473:
                    int v19 = __sa;
                    goto LABEL_482;
                  }
                }
              }
              if (!*(_DWORD *)v405)
              {
                int v403 = 0;
                ++v404;
                goto LABEL_473;
              }
              int v19 = __sa;
              if (v403)
              {
                uint64_t v409 = v386;
                if (!v646) {
                  goto LABEL_479;
                }
                if (*((_DWORD *)v640 + 5) != 36 || *((_DWORD *)v405 + 5) != 36) {
                  goto LABEL_480;
                }
                uint64_t v410 = (const char *)*((void *)v640 + 5);
                size_t v411 = (const char *)*((void *)v405 + 5);
                unint64_t v412 = marker_getMarkerArgStr(0xBu);
                if (cstdlib_strcmp(v410, v412))
                {
                  BOOL v413 = 0;
                }
                else
                {
                  int v414 = marker_getMarkerArgStr(2u);
                  BOOL v413 = cstdlib_strcmp(v411, v414) == 0;
                }
                v415 = marker_getMarkerArgStr(0xBu);
                if (cstdlib_strcmp(v410, v415))
                {
                  int v19 = __sa;
                  goto LABEL_478;
                }
                uint64_t v416 = marker_getMarkerArgStr(1u);
                int v19 = __sa;
                if (cstdlib_strcmp(v411, v416) | v635)
                {
LABEL_478:
                  if (v413) {
                    goto LABEL_479;
                  }
LABEL_480:
                  cstdlib_memmove(&v306[64 * v404], &v306[64 * (unint64_t)(v402 + 1)], (uint64_t)(*(unsigned __int16 *)(v383 + 16) - v402) << 6);
                  --*(_WORD *)(v383 + 16);
                }
                else
                {
LABEL_479:
                  ++v404;
                }
                int v403 = 1;
                v386 = v409;
                goto LABEL_482;
              }
            }
            ++v404;
LABEL_482:
            int v402 = (unsigned __int16)v404;
          }
          while (v404 < *(unsigned __int16 *)(v383 + 16));
        }
      }
    }
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wparser_InsertWordMarkers()", 0, 0, 0);
  uint64_t inserted = wparser_InsertWordMarkers(*(void *)(a1 + 40), *(void *)(a1 + 24), v19, (unsigned __int16 *)(v656 + 16));
  if ((inserted & 0x80000000) != 0) {
    goto LABEL_543;
  }
  unsigned __int16 v417 = 1;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_RemoveBlankLatinRegions()", 1, 0, 0);
  uint64_t v418 = v656;
  if (*(unsigned __int16 *)(v656 + 16) < 2u) {
    goto LABEL_546;
  }
  unsigned __int16 v419 = 1;
  uint64_t v647 = v656;
  while (2)
  {
    uint64_t v420 = v419;
    unint64_t v421 = &v306[64 * (unint64_t)v419];
    if (*((_DWORD *)v421 + 5) != 36) {
      goto LABEL_528;
    }
    char v422 = (const char *)*((void *)v421 + 5);
    if (!v422) {
      goto LABEL_528;
    }
    v423 = marker_getMarkerArgStr(2u);
    if (cstdlib_strcmp(v422, v423)) {
      goto LABEL_528;
    }
    if (*(unsigned __int16 *)(v418 + 16) <= (unsigned __int16)(v419 + 1))
    {
LABEL_515:
      __int16 v441 = &v306[64 * v420];
      unsigned int v442 = (unsigned __int16)(*((_WORD *)v441 + 16) - *((_DWORD *)v306 + 8));
      if (v442 >= *((_DWORD *)v306 + 9)) {
        goto LABEL_522;
      }
      do
      {
        unsigned int v443 = v19[v442];
        unsigned int v444 = (v443 < 0x21) & (0x100002600uLL >> v443);
        unsigned int v442 = (unsigned __int16)(utf8_determineUTF8CharLength(v443) + v442);
      }
      while (v444 == 1 && v442 < *((_DWORD *)v306 + 9));
      if (v444)
      {
LABEL_522:
        if (*(_DWORD *)v441 == 1)
        {
          uint64_t v446 = v419 + 1;
          uint64_t v418 = v647;
          unsigned int v447 = *(unsigned __int16 *)(v647 + 16);
          if (v446 < v447)
          {
            cstdlib_memmove(&v306[64 * v420], &v306[64 * v446], (uint64_t)(int)(v447 + ~v419) << 6);
            LOWORD(v447) = *(_WORD *)(v647 + 16);
          }
          unsigned __int16 v448 = v447 - 1;
          *(_WORD *)(v647 + 16) = v448;
          goto LABEL_529;
        }
        *(_DWORD *)&v306[64 * v420 + 20] = 999;
      }
      uint64_t v418 = v647;
      goto LABEL_528;
    }
    uint64_t v424 = (unsigned __int16)(v419 + 1);
    BOOL v425 = 1;
    while (2)
    {
      unsigned __int16 v426 = &v306[64 * v424];
      if (*((_DWORD *)v426 + 5) == 36)
      {
        unsigned __int16 v427 = (const char *)*((void *)v426 + 5);
        if (v427)
        {
          unsigned __int16 v428 = marker_getMarkerArgStr(2u);
          BOOL v425 = cstdlib_strcmp(v427, v428) == 0;
          int v429 = 1;
          goto LABEL_495;
        }
        int v429 = 1;
LABEL_498:
        uint64_t v430 = v419;
        int v431 = &v306[64 * (unint64_t)v419];
        int v432 = *((_DWORD *)v431 + 8);
        int v433 = *((_DWORD *)v306 + 8);
        int v434 = &v306[64 * v424 + 32];
        unsigned int v435 = (unsigned __int16)(v432 - v433);
        if (v435 >= *(_DWORD *)v434 - v433)
        {
LABEL_507:
          v439 = &v306[64 * v424];
          int v440 = *((_DWORD *)v439 + 7) + *((_DWORD *)v431 + 7);
          *((_DWORD *)v439 + 6) = *((_DWORD *)v431 + 6);
          *((_DWORD *)v439 + 7) = v440;
          *(_DWORD *)int v434 = v432;
          *((_DWORD *)v439 + 9) += *((_DWORD *)v431 + 9);
          if (*(_DWORD *)v431 == 1)
          {
            uint64_t v418 = v647;
            cstdlib_memmove(v431, &v306[64 * (unint64_t)(v419 + 1)], (uint64_t)(*(unsigned __int16 *)(v647 + 16) + ~v419) << 6);
            BOOL v425 = 0;
            --*(_WORD *)(v647 + 16);
            unsigned __int16 v419 = v424;
          }
          else
          {
            BOOL v425 = 0;
            *(_DWORD *)&v306[64 * v430 + 20] = 999;
            unsigned __int16 v419 = v424;
            uint64_t v418 = v647;
          }
        }
        else
        {
          int v636 = v429;
          do
          {
            unsigned int v436 = __sa[v435];
            unsigned int v437 = (v436 < 0x21) & (0x100002600uLL >> v436);
            unsigned int v435 = (unsigned __int16)(utf8_determineUTF8CharLength(v436) + v435);
          }
          while (v437 == 1 && v435 < *(_DWORD *)v434 - *((_DWORD *)v306 + 8));
          if (v437)
          {
            int v432 = *((_DWORD *)v431 + 8);
            int v429 = v636;
            uint64_t v430 = v419;
            goto LABEL_507;
          }
          BOOL v425 = 0;
          uint64_t v418 = v647;
          int v429 = v636;
        }
      }
      else
      {
        int v429 = 0;
LABEL_495:
        if (!v425) {
          goto LABEL_498;
        }
      }
      if (!v429 && ++v424 < (unint64_t)*(unsigned __int16 *)(v418 + 16)) {
        continue;
      }
      break;
    }
    int v19 = __sa;
    if (!v429)
    {
      uint64_t v420 = v419;
      goto LABEL_515;
    }
LABEL_528:
    unsigned __int16 v448 = *(_WORD *)(v418 + 16);
LABEL_529:
    if (++v419 < v448) {
      continue;
    }
    break;
  }
  if (v448 >= 2u)
  {
    uint64_t v449 = 1;
    unsigned __int16 v417 = 1;
    while (1)
    {
      uint64_t v450 = &v306[64 * v449];
      if (*((_DWORD *)v450 + 5) == 36)
      {
        unsigned __int16 v451 = v449 - 1;
        if (v449 != 1)
        {
          while (1)
          {
            uint64_t v452 = &v306[64 * (unint64_t)v451];
            if (*((_DWORD *)v452 + 5) == 36) {
              break;
            }
            if (!--v451) {
              goto LABEL_538;
            }
          }
          if (!cstdlib_strcmp(*(const char **)&v306[64 * v449 + 40], *((const char **)v452 + 5)))
          {
            if (*(_DWORD *)v450) {
              goto LABEL_539;
            }
            *((_DWORD *)v450 + 5) = 999;
          }
        }
      }
LABEL_538:
      v453 = &v306[64 * (unint64_t)v417];
      long long v454 = *(_OWORD *)v450;
      long long v455 = *((_OWORD *)v450 + 1);
      long long v456 = *((_OWORD *)v450 + 3);
      *((_OWORD *)v453 + 2) = *((_OWORD *)v450 + 2);
      *((_OWORD *)v453 + 3) = v456;
      *(_OWORD *)v453 = v454;
      *((_OWORD *)v453 + 1) = v455;
      ++v417;
LABEL_539:
      if (++v449 >= (unint64_t)*(unsigned __int16 *)(v418 + 16)) {
        goto LABEL_546;
      }
    }
  }
  unsigned __int16 v417 = 1;
LABEL_546:
  *(_WORD *)(v418 + 16) = v417;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceAfterPhoneticMarkers()", 1, 0, 0);
  uint64_t v641 = *(void *)(a1 + 16);
  unint64_t v457 = *(unsigned __int16 *)(v656 + 16);
  int v458 = cstdlib_strlen(v19);
  if (v457 < 2)
  {
    v462 = v19;
  }
  else
  {
    uint64_t v459 = v306 + 160;
    uint64_t v460 = 2;
    uint64_t v461 = 1;
    v462 = v19;
    int v620 = v306;
    do
    {
      uint64_t v624 = v461 + 1;
      uint64_t v629 = v460;
      v637 = v459;
      if (v461 + 1 < v457 && *(_DWORD *)&v306[64 * v461 + 20] == 34)
      {
        while (1)
        {
          int v463 = *(_DWORD *)&v306[64 * v460 + 20];
          if (v463 == 21)
          {
            uint64_t v464 = &v306[64 * v460 + 32];
            uint64_t v465 = (unsigned __int16)(*(_DWORD *)v464 - *((_DWORD *)v306 + 8));
            int v466 = (unsigned __int16)v458 - v465;
            if ((unsigned __int16)v458 <= v465) {
              break;
            }
            unsigned int v467 = v462[v465];
            BOOL v468 = v467 > 0x20;
            uint64_t v469 = (1 << v467) & 0x100002600;
            if (!v468 && v469 != 0) {
              break;
            }
            int v471 = v458;
            uint64_t v472 = heap_Realloc(*(uint64_t **)(v641 + 8), (uint64_t)v462, (unsigned __int16)v458 + 2);
            if (!v472) {
              goto LABEL_639;
            }
            v462 = (const char *)v472;
            uint64_t v473 = v472;
            v474 = (void *)(v472 + (v465 + 1));
            uint64_t v475 = (unsigned char *)(v473 + v465);
            cstdlib_memmove(v474, v475, v466);
            *uint64_t v475 = 32;
            int v458 = v471 + 1;
            *(unsigned char *)(v473 + (unsigned __int16)(v471 + 1)) = 0;
            unsigned int v476 = v459;
            unint64_t v477 = v460;
            int v306 = v620;
            do
            {
              if (*(_DWORD *)v464 < *v476) {
                ++*v476;
              }
              ++v477;
              v476 += 16;
            }
            while (v477 < v457);
            ++*((_DWORD *)v620 + 9);
            int v463 = 21;
          }
          if (++v460 < v457)
          {
            v459 += 16;
            if (v463 != 21) {
              continue;
            }
          }
          break;
        }
      }
      uint64_t v460 = v629 + 1;
      uint64_t v459 = v637 + 16;
      uint64_t v461 = v624;
    }
    while (v624 != v457);
  }
  int v19 = (char *)v462;
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_InsertSpaceBeforeTNMarkers()", 1, 0, 0);
  uint64_t v478 = *(void *)(a1 + 16);
  uint64_t v479 = *(void *)(a1 + 24);
  unsigned __int16 v480 = cstdlib_strlen(v462);
  *(void *)&long long __src = 0;
  uint64_t v481 = datac_RequestBlock(v479, 1021, 1u, &__src);
  uint64_t v64 = v481;
  if ((v481 & 0x80000000) != 0) {
    goto LABEL_544;
  }
  unsigned int v482 = *(unsigned __int16 *)(__src + 16);
  if (!*(_WORD *)(__src + 16) || (uint64_t v483 = *(void *)(__src + 8), *(_DWORD *)(v483 + 20) != 0x4000))
  {
    uint64_t v64 = 2370838528;
    goto LABEL_544;
  }
  if (v482 <= 1)
  {
    unsigned int v622 = (char *)v462;
  }
  else
  {
    unsigned __int16 v630 = v480;
    uint64_t v642 = v479;
    uint64_t v603 = v478;
    unsigned int v601 = v481;
    uint64_t v484 = 0;
    uint64_t v485 = (uint64_t)v462;
    unint64_t v486 = 1;
    uint64_t v487 = 96;
    __sa = (char *)v462;
    do
    {
      uint64_t v488 = v483 + (v486 << 6);
      int v491 = *(_DWORD *)(v488 + 32);
      uint64_t v489 = (_DWORD *)(v488 + 32);
      __int16 v490 = v491;
      int v492 = *(_DWORD *)(v483 + 32);
      LOWORD(v493) = v491 - v492;
      int v494 = *(v489 - 3);
      if (v494 == 7)
      {
        unsigned int v493 = (unsigned __int16)v493;
        BOOL v495 = *(_DWORD *)(v483 + (v486 << 6) + 40) == 16;
      }
      else
      {
        BOOL v495 = v494 == 21;
        unsigned int v493 = (unsigned __int16)v493;
      }
      BOOL v496 = !v495 || v493 == 0;
      if (!v496 && *(unsigned char *)(v485 + v493 - 1) != 32 && *(unsigned char *)(v485 + v493) != 32)
      {
        uint64_t v609 = v487;
        unsigned int v648 = v493;
        uint64_t v497 = v493;
        uint64_t v605 = v484;
        uint64_t v498 = v484;
        do
        {
          if (!v498) {
            break;
          }
          int v499 = *(_DWORD *)(v483 + v498 + 20);
          if (v499 == 34) {
            goto LABEL_635;
          }
          v498 -= 64;
        }
        while (v499 != 21);
        uint64_t v625 = v483;
        uint64_t v500 = heap_Realloc(*(uint64_t **)(v603 + 8), v485, v630 + 2);
        if (v500) {
          int v501 = (char *)v500;
        }
        else {
          int v501 = (char *)v485;
        }
        int v621 = v501;
        if (!v500) {
          goto LABEL_639;
        }
        uint64_t v502 = v500;
        v503 = (unsigned char *)(v500 + v497);
        cstdlib_memmove((void *)(v500 + v648 + 1), v503, (int)(v630 - v648));
        int v638 = 0;
        unsigned char *v503 = 32;
        *(unsigned char *)(v502 + (unsigned __int16)(v630 + 1)) = 0;
        if ((unsigned __int16)(v630 + 1) > (unsigned __int16)(v648 + 1))
        {
          uint64_t v504 = 0;
          do
          {
            if (v621[(unsigned __int16)(v648 + 1) + v504] == 32) {
              break;
            }
            ++v504;
          }
          while ((unsigned __int16)(v630 - v490 + v492) != (unsigned __int16)v504);
          int v638 = v504;
        }
        if (v486 < (unsigned __int16)v482)
        {
          uint64_t v505 = (unsigned __int16)v482;
          int v506 = (_DWORD *)(v625 + v609);
          do
          {
            if (*v506 >= *v489) {
              ++*v506;
            }
            --v505;
            v506 += 16;
          }
          while (v486 != v505);
        }
        uint64_t v483 = v625;
        ++*(_DWORD *)(v625 + 36);
        uint64_t v507 = 1;
        unsigned int v508 = v648;
        do
        {
          if ((unsigned __int16)v507 >= (unsigned __int16)v482) {
            break;
          }
          unint64_t v509 = (unsigned __int16)v507;
          int v510 = *(_DWORD *)(v483 + ((unint64_t)(unsigned __int16)v507 << 6) + 20);
          while (v510 == 1)
          {
            unsigned int v511 = *(_DWORD *)(v483 + 32) + v508;
            int v512 = (unsigned int *)(v483 + 32 + (v509 << 6));
            unsigned int v513 = *v512;
            if (v511 <= *v512) {
              break;
            }
            uint64_t v514 = v483 + (v509 << 6);
            int v516 = *(_DWORD *)(v514 + 36);
            v515 = (_DWORD *)(v514 + 36);
            unsigned int v517 = v516 + v513 - v511;
            if (v516 + v513 <= v511)
            {
              unsigned int v508 = v648;
              break;
            }
            uint64_t v518 = v507;
            unint64_t v519 = (unsigned __int16)v507;
            if ((unsigned __int16)v507 >= (unsigned __int16)v482) {
              goto LABEL_611;
            }
            v520 = (unsigned int *)(v483 + ((unint64_t)(unsigned __int16)v507 << 6) + 32);
            unsigned __int16 v521 = v507;
            while (*(v520 - 3) != 21 || *v520 <= v513)
            {
              ++v521;
              v520 += 16;
              if ((unsigned __int16)v482 == v521) {
                goto LABEL_611;
              }
            }
            if (!v521) {
              goto LABEL_611;
            }
            uint64_t v532 = v483 + ((unint64_t)v521 << 6);
            unsigned __int16 v534 = *(const char **)(v532 + 40);
            uint64_t v533 = (char **)(v532 + 40);
            uint64_t v626 = v483;
            int v535 = marker_getMarkerArgStr(3u);
            int v536 = cstdlib_strcmp(v534, v535);
            uint64_t v483 = v626;
            if (!v536) {
              goto LABEL_631;
            }
            int v611 = *v533;
            v537 = marker_getMarkerArgStr(4u);
            int v538 = cstdlib_strncmp(v611, v537, 6uLL);
            uint64_t v483 = v626;
            if (!v538) {
              goto LABEL_631;
            }
            v612 = *v533;
            unsigned int v539 = marker_getMarkerArgStr(6u);
            int v540 = cstdlib_strcmp(v612, v539);
            uint64_t v483 = v626;
            if (!v540) {
              goto LABEL_631;
            }
            __int16 v613 = *v533;
            unsigned __int16 v541 = marker_getMarkerArgStr(7u);
            int v542 = cstdlib_strcmp(v613, v541);
            uint64_t v483 = v626;
            if (!v542) {
              goto LABEL_631;
            }
            uint64_t v614 = *v533;
            uint64_t v543 = marker_getMarkerArgStr(8u);
            int v544 = cstdlib_strcmp(v614, v543);
            uint64_t v483 = v626;
            if (!v544) {
              goto LABEL_631;
            }
            int v545 = *v533;
            size_t v546 = marker_getMarkerArgStr(5u);
            int v547 = cstdlib_strcmp(v545, v546);
            uint64_t v483 = v626;
            if (v547)
            {
LABEL_611:
              uint64_t v507 = v518;
              if (v486 > v519)
              {
                uint64_t v522 = (unsigned int *)(v483 + (v519 << 6) + 32);
                while (1)
                {
                  unsigned int v523 = *v522;
                  v522 += 16;
                  if (v523 >= *(_DWORD *)(v483 + (v486 << 6) + 32)) {
                    break;
                  }
                  if (v486 == ++v519)
                  {
                    unint64_t v519 = v486;
                    break;
                  }
                }
                uint64_t v507 = v519;
              }
              unsigned int v601 = datac_RequestBlock(v642, 1021, (unsigned __int16)(*(_WORD *)(__src + 16) + 1), &__src);
              if ((v601 & 0x80000000) != 0)
              {
                int v19 = __sa;
                uint64_t v64 = v601;
                goto LABEL_544;
              }
              uint64_t v524 = *(void *)(__src + 8);
              unint64_t v519 = (unsigned __int16)v507;
              uint64_t v525 = (_DWORD *)(v524 + ((unint64_t)(unsigned __int16)v507 << 6));
              cstdlib_memmove((void *)(v524 + ((unint64_t)((unsigned __int16)v507 + 1) << 6)), v525, (uint64_t)((unsigned __int16)v482 - (unsigned __int16)v507) << 6);
              v526 = (_DWORD *)(v524 + (v509 << 6));
              cstdlib_memcpy(v525, v526, 0x40uLL);
              uint64_t v483 = v524;
              LOWORD(v482) = *(_WORD *)(__src + 16) + 1;
              *(_WORD *)(__src + 16) = v482;
              unsigned int v527 = v526[9];
              BOOL v41 = v527 >= v517;
              unsigned int v528 = v527 - v517;
              if (!v41) {
                unsigned int v528 = 0;
              }
              v526[9] = v528;
              int v530 = v526[6];
              unsigned int v529 = v526[7];
              BOOL v41 = v529 >= v517;
              unsigned int v531 = v529 - v517;
              if (!v41) {
                unsigned int v531 = 0;
              }
              v526[7] = v531;
              v525[8] = *(_DWORD *)(v524 + ((v486 + 1) << 6) + 32);
              v525[9] = v638;
              v525[6] = v530 + v531;
              v525[7] = v517;
              unsigned int v508 = v648;
            }
            else
            {
LABEL_631:
              unsigned int v508 = v648;
              _DWORD *v515 = *(_DWORD *)(v483 + 32) + v648 - *v512;
              uint64_t v507 = v518;
            }
            int v510 = *(_DWORD *)(v483 + (v519 << 6) + 20);
            unint64_t v509 = v519;
          }
          unsigned int v548 = *(_DWORD *)(v483 + ((unint64_t)(unsigned __int16)(v507 + 1) << 6) + 32);
          uint64_t v507 = (v507 + 1);
        }
        while (v548 <= *(_DWORD *)(v483 + 32) + v508);
        ++v630;
        uint64_t v485 = (uint64_t)v621;
LABEL_635:
        uint64_t v484 = v605;
        uint64_t v487 = v609;
      }
      ++v486;
      v484 += 64;
      v487 += 64;
    }
    while (v486 < (unsigned __int16)v482);
    unsigned int v622 = (char *)v485;
    int v19 = (char *)v485;
    uint64_t v64 = v601;
    if ((v601 & 0x80000000) != 0) {
      goto LABEL_544;
    }
  }
  marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_asian_HandleExtendedToi()", 0, 0, 0);
  uint64_t v549 = v656;
  uint64_t v550 = *(void *)(a1 + 24);
  uint64_t v649 = *(void *)(a1 + 16);
  *(void *)&long long __src = 0;
  uint64_t v551 = *(void *)(v656 + 8);
  unsigned int v552 = datac_RequestBlock(v550, 1012, 1u, &__src);
  if ((v552 & 0x80000000) != 0)
  {
    unsigned int v606 = v552;
    goto LABEL_674;
  }
  int __sc = (char *)v549;
  unsigned int v553 = *(unsigned __int16 *)(v549 + 16);
  if (v553 < 2)
  {
LABEL_662:
    marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_MarkerPostProcessing()", 1, 0, 0);
    uint64_t v571 = wordpar_loc_MarkerPostProcessing(*(void *)(a1 + 24), v656);
    if ((v571 & 0x80000000) == 0)
    {
      marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"before wordpar_loc_InsertNLUMarkers()", 1, 0, 0);
      uint64_t v571 = wordpar_loc_InsertNLUMarkers(a1, v656);
      if ((v571 & 0x80000000) == 0)
      {
        uint64_t v575 = *(void *)(v656 + 8);
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PP_WORD_PARSER", 5, 0, (uint64_t)"(Write2DB) \"%s\"", v572, v573, v574, (uint64_t)v622);
        marker_TraceMrk(211, (uint64_t)"PP_WORD_PARSER", *(_DWORD *)(a1 + 168), *(void *)(a1 + 16), *(void *)(a1 + 24), 1021, (uint64_t)"at end()", 1, 0, 0);
        if (!cstdlib_strlen(v622))
        {
          if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
            log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 34, (uint64_t)"", (uint64_t)"text/plain;charset=depes",
          }
              0,
              0);
          int v580 = 0;
          goto LABEL_680;
        }
        unsigned int v576 = *(uint64_t (**)(uint64_t, uint64_t, char *, void))(*(void *)(a1 + 32) + 104);
        int v577 = cstdlib_strlen(v622);
        uint64_t v571 = v576(v616, v617, v622, (v577 + 1));
        if ((v571 & 0x80000000) == 0)
        {
          if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32)))
          {
            uint64_t v578 = *(void *)(*(void *)(a1 + 16) + 32);
            int v579 = cstdlib_strlen(v622);
            log_OutTraceTuningDataBinary(v578, 34, (uint64_t)"", (uint64_t)"text/plain;charset=depes",
              (uint64_t)v622,
              (v579 + 1));
          }
          int v580 = 1;
LABEL_680:
          *(_WORD *)(v658 + 16) = 0;
          uint64_t v64 = wordpar_loc_writeMarkersToOutputStream(a1, v618, v619, v575, v656, v580);
          if ((v64 & 0x80000000) == 0)
          {
            if (*(_WORD *)(a1 + 160))
            {
              uint64_t v585 = *(void *)(v657 + 8);
              if (v585)
              {
                uint64_t v586 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), v585, *(unsigned __int16 *)(v657 + 2) * (unint64_t)*(unsigned __int16 *)(a1 + 160));
                if (v586)
                {
                  uint64_t v587 = v657;
                  *(void *)(v657 + 8) = v586;
                  __int16 v588 = *(_WORD *)(a1 + 160);
                  *(_WORD *)(v587 + 16) = v588;
                  *(_WORD *)(v587 + 18) = v588;
                }
                else
                {
                  uint64_t v64 = 2370838538;
                }
              }
            }
          }
          goto LABEL_672;
        }
      }
    }
    uint64_t v64 = v571;
LABEL_672:
    int v19 = v622;
    goto LABEL_544;
  }
  int v554 = 1;
  LOWORD(v555) = 1;
  while (1)
  {
    uint64_t v556 = (unsigned __int16)v555;
    unint64_t v557 = v551 + ((unint64_t)(unsigned __int16)v555 << 6);
    if (*(_DWORD *)(v557 + 20) == 34)
    {
      uint64_t v559 = (uint64_t *)(v557 + 48);
      uint64_t v558 = *(void *)(v557 + 48);
      if (v558) {
        break;
      }
    }
LABEL_661:
    LOWORD(v555) = v555 + 1;
    int v554 = (unsigned __int16)v555;
    if ((unsigned __int16)v555 >= (unsigned __int16)v553) {
      goto LABEL_662;
    }
  }
  int v560 = *(_DWORD *)(v551 + ((unint64_t)(unsigned __int16)v555 << 6) + 32);
  int v561 = *(_DWORD *)(v551 + 32);
  uint64_t v562 = (v554 + 1);
  LOWORD(v555) = v554 + 1;
  if ((unsigned __int16)v553 > (unsigned __int16)(v554 + 1))
  {
    uint64_t v555 = (unsigned __int16)(v554 + 1);
    uint64_t v563 = (int *)(v551 + 20 + (v555 << 6));
    while (1)
    {
      int v564 = *v563;
      v563 += 16;
      if (v564 == 21) {
        break;
      }
      if ((unsigned __int16)v553 == ++v555) {
        goto LABEL_673;
      }
    }
  }
  if ((unsigned __int16)v555 != (unsigned __int16)v553)
  {
    if (*(_DWORD *)(v551 + (v556 << 6) + 56))
    {
      heap_Free(*(void **)(v649 + 8), v558);
      *uint64_t v559 = 0;
      LOWORD(v553) = *((_WORD *)__sc + 8);
    }
    else
    {
      unsigned __int16 v565 = v560 - v561;
      __int16 v631 = v560 - v561;
      v615 = (char *)(v551 + ((unint64_t)(unsigned __int16)v555 << 6));
      int v627 = *((_DWORD *)v615 + 8) - v561;
      unsigned __int16 v566 = cstdlib_strlen(v622);
      cstdlib_memmove(&v622[v565], &v622[(unsigned __int16)v627], v566 - (unsigned __int16)v627 + 1);
      int v567 = cstdlib_strlen(v622);
      *(_DWORD *)(v551 + 36) = v567;
      wordpar_loc_adjustMarkerPositions(*((unsigned __int16 *)__sc + 8), v551, 1u, (unsigned __int16)v627, (unsigned __int16)v567, (__int16)(v631 - v627));
      heap_Free(*(void **)(v649 + 8), *v559);
      *uint64_t v559 = 0;
      int v568 = *((unsigned __int16 *)__sc + 8);
      if (v562 != v568)
      {
        cstdlib_memmove((void *)v557, (const void *)(v551 + (v562 << 6)), (uint64_t)(v568 - v554) << 6);
        LOWORD(v568) = *((_WORD *)__sc + 8);
      }
      unsigned __int16 v569 = v568 - 1;
      *((_WORD *)__sc + 8) = v569;
      uint64_t v570 = (unsigned __int16)v555 + 1;
      if (v570 != v569)
      {
        cstdlib_memmove(v615, (const void *)(v551 + (v570 << 6)), (uint64_t)(v569 - (unsigned __int16)v555) << 6);
        unsigned __int16 v569 = *((_WORD *)__sc + 8);
      }
      LOWORD(v553) = v569 - 1;
      *((_WORD *)__sc + 8) = v553;
    }
    goto LABEL_661;
  }
LABEL_673:
  heap_Free(*(void **)(v649 + 8), v558);
  *uint64_t v559 = 0;
  log_OutPublic(*(void *)(v649 + 32), (uint64_t)"PP_WORD_PARSER", 1929, 0, v581, v582, v583, v584, v590);
LABEL_674:
  int v19 = v622;
  uint64_t v64 = v606;
LABEL_544:
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v19);
  return v64;
}

uint64_t wordpar_GetWParserType(uint64_t a1, _DWORD *a2)
{
  if (!a1) {
    return 2370838535;
  }
  uint64_t result = 0;
  *a2 = *(_DWORD *)(a1 + 164);
  return result;
}

uint64_t wordpar_loc_adjustMarkerPositions(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, int a6)
{
  if (a3 < result)
  {
    uint64_t v6 = (_DWORD *)(a2 + ((unint64_t)a3 << 6) + 36);
    unint64_t v7 = result - (unint64_t)a3;
    do
    {
      unsigned int v8 = *(v6 - 1);
      int v9 = *(_DWORD *)(a2 + 32);
      unsigned int v10 = v9 + a5;
      if (v8 <= v9 + a4 || v8 >= v10)
      {
        if (v8 >= v10)
        {
          *(v6 - 1) = v8 + a6;
        }
        else if (*(v6 - 4) == 1)
        {
          unsigned int v12 = *v6 + v8;
          if (v12 > *(_DWORD *)(a2 + 36) + v9 && v12 != -a6) {
            *v6 += a6;
          }
        }
      }
      else
      {
        *(v6 - 1) = v9 + a4;
      }
      v6 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t GetCfgParamVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5)
{
  *a5 = "no";
  __int16 __c_1 = -1;
  unsigned __int8 __c = 0;
  int v9 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v9, &__c_1, &__c);
  if ((v6 & 0x80000000) == 0 && __c_1)
  {
    unint64_t v7 = cstdlib_strchr(*v9, __c);
    if (v7) {
      *unint64_t v7 = 0;
    }
    *a5 = *v9;
  }
  return v6;
}

uint64_t wordpar_loc_asian_deleteStrAddMarker(uint64_t a1, char *__s, const char *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = a4;
  uint64_t v57 = a4;
  unsigned __int16 v8 = cstdlib_strlen(__s);
  unsigned __int16 v56 = v8;
  unsigned __int16 v9 = cstdlib_strlen(a3);
  unsigned __int16 v10 = v9;
  uint64_t v11 = *(unsigned int **)(v5 + 8);
  if (v8)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    unsigned int v15 = v9;
    unsigned int v53 = v8;
    unsigned __int16 v16 = v8;
    unsigned __int16 v49 = v8;
    unsigned __int16 v54 = v9;
    do
    {
      if (!__s[(unsigned __int16)v12]) {
        break;
      }
      if (__s[(unsigned __int16)v12] != *a3) {
        goto LABEL_19;
      }
      uint64_t v17 = v12;
      if (!v15) {
        goto LABEL_12;
      }
      uint64_t v18 = 0;
      LODWORD(v17) = v12;
      do
      {
        int v19 = __s[(unsigned __int16)v17];
        int v20 = a3[v18];
        uint64_t v17 = (v17 + 1);
        ++v18;
      }
      while (v19 == v20 && v15 > (unsigned __int16)v18);
      if (v19 == v20)
      {
LABEL_12:
        uint64_t v22 = v11;
        int v23 = v13;
        uint64_t v24 = datac_RequestBlock(a1, 1021, (unsigned __int16)(*(_WORD *)(v5 + 16) + 1), &v57);
        uint64_t v14 = v24;
        if ((v24 & 0x80000000) != 0) {
          goto LABEL_46;
        }
        uint64_t v5 = v57;
        uint64_t v11 = *(unsigned int **)(v57 + 8);
        int v25 = v23;
        unsigned int v26 = (unsigned __int16)(v12 - v23 * v10);
        uint64_t v27 = *(unsigned __int16 *)(v57 + 16);
        unsigned int v28 = &v11[16 * v27];
        unsigned int v29 = v11[8];
        if (v27 != 1 && (unsigned __int16)(*(v28 - 8) - v29) > v26)
        {
          if (v27 < 2)
          {
            LOWORD(v27) = 0;
          }
          else if (v26 >= (unsigned __int16)(*((_WORD *)v11 + 48) - v29))
          {
            unsigned __int16 v33 = 1;
            while (v27 > ++v33)
            {
              uint64_t v34 = v33;
              if (v26 < (unsigned __int16)(LOWORD(v11[16 * (unint64_t)v33 + 8]) - v29))
              {
                unsigned int v47 = v24;
                int v32 = v33;
                goto LABEL_30;
              }
            }
            unsigned __int16 v16 = v49;
          }
          else
          {
            unsigned int v47 = v24;
            int v32 = 1;
            unsigned __int16 v33 = 1;
            uint64_t v34 = 1;
LABEL_30:
            __srca = &v11[16 * v34];
            unsigned int v37 = *(unsigned int **)(v57 + 8);
            int LastPosRef = wordpar_loc_asian_getLastPosRef(v11, v27, v26, v33, 1);
            cstdlib_memmove(&v37[16 * (unint64_t)(v32 + 1)], __srca, (uint64_t)((int)v27 - v32) << 6);
            uint64_t v11 = v37;
            uint64_t v38 = *(void *)(v57 + 8) + (v34 << 6);
            *(_DWORD *)uint64_t v38 = 1;
            *(_DWORD *)(v38 + 20) = 36;
            *(_DWORD *)(v38 + 24) = LastPosRef;
            *(_DWORD *)(v38 + 28) = 0;
            unsigned int v39 = v37[8] + v26;
            *(_WORD *)(v38 + 16) = 0;
            *(void *)(v38 + 8) = 0;
            *(_DWORD *)(v38 + 36) = 0;
            *(_DWORD *)(v38 + 40) = a5;
            *(void *)(v38 + 48) = 0;
            *(_DWORD *)(v38 + 32) = v39;
            int v40 = (_DWORD *)(v38 + 32);
            uint64_t v5 = v57;
            LOWORD(v27) = *(_WORD *)(v57 + 16);
            if ((_WORD)v27)
            {
              uint64_t v41 = (unsigned __int16)(v27 + 1) <= 2u ? 2 : (unsigned __int16)(v27 + 1);
              unsigned int v42 = v11 + 24;
              uint64_t v43 = v41 - 1;
              unsigned __int16 v16 = v49;
              int v25 = v23;
              do
              {
                if (*v42 > *v40) {
                  *v42 -= v15;
                }
                v42 += 16;
                --v43;
              }
              while (v43);
              uint64_t v14 = v47;
            }
            else
            {
              unsigned __int16 v16 = v49;
              uint64_t v14 = v47;
              int v25 = v23;
            }
          }
        }
        else
        {
          v28[5] = 36;
          *unsigned int v28 = 1;
          if (v27 == 1)
          {
            int v31 = v11[7] + v11[6];
          }
          else
          {
            uint64_t v35 = v24;
            long long __src = v11;
            int v31 = wordpar_loc_asian_getLastPosRef(v11, v27, v26, (unsigned __int16)(v27 - 1), 1);
            uint64_t v11 = __src;
            int v25 = v23;
            uint64_t v14 = v35;
          }
          unsigned int v36 = &v11[16 * v27];
          v36[6] = v31;
          v36[7] = 0;
          v36[8] = v29 + v26;
          v36[9] = 0;
          *((_WORD *)v36 + 8) = 0;
          *((void *)v36 + 1) = 0;
          v36[10] = a5;
          *((void *)v36 + 6) = 0;
          uint64_t v5 = v57;
          LOWORD(v27) = *(_WORD *)(v57 + 16);
        }
        *(_WORD *)(v5 + 16) = v27 + 1;
        v11[9] = v53;
        int v13 = v25 + 1;
        unsigned __int16 v10 = v54;
      }
      else
      {
LABEL_19:
        uint64_t v17 = (v12 + 1);
      }
      uint64_t v12 = v17;
    }
    while ((unsigned __int16)v17 < v16);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v22 = v11;
  unsigned int v44 = (unsigned __int8 *)a3;
  uint64_t v45 = v14;
  wordpar_loc_asian_adjustText(__s, v44, v10, &v56);
  uint64_t v14 = v45;
  unsigned __int16 v16 = v56;
LABEL_46:
  v22[9] = v16;
  return v14;
}

unsigned char *wordpar_loc_asian_deleteStr(uint64_t a1, char *__s, char *a3)
{
  unsigned __int16 v6 = cstdlib_strlen(__s);
  unsigned __int16 v24 = v6;
  unsigned __int16 v7 = cstdlib_strlen(a3);
  unsigned __int16 v8 = *(int **)(a1 + 8);
  if (v6)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    unsigned __int16 v11 = 0;
    do
    {
      if (!__s[(unsigned __int16)v10]) {
        break;
      }
      if (__s[(unsigned __int16)v10] == *a3)
      {
        if (!v7)
        {
          uint64_t v13 = v10;
LABEL_14:
          uint64_t v17 = *(unsigned __int16 *)(a1 + 16);
          if (v17 >= 2)
          {
            int v18 = v9 - v7 * v11;
            uint64_t v19 = v17 - 1;
            unsigned int v20 = 1;
            uint64_t v21 = v8 + 24;
            while (v18 >= (unsigned __int16)(LOWORD(v8[16 * (unint64_t)v20 + 8]) - v8[8]))
            {
              ++v20;
              v21 += 16;
              --v19;
              if (v20 >= v17) {
                goto LABEL_23;
              }
            }
            if (v20 < v17)
            {
              do
              {
                int v22 = *v21 - v7;
                if (v7 > (unsigned __int16)(*(_WORD *)v21 - v8[8])) {
                  int v22 = v8[8];
                }
                *uint64_t v21 = v22;
                v21 += 16;
                --v19;
              }
              while (v19);
            }
          }
LABEL_23:
          ++v11;
          goto LABEL_24;
        }
        uint64_t v12 = 0;
        LODWORD(v13) = v10;
        do
        {
          int v14 = __s[(unsigned __int16)v13];
          int v15 = a3[v12];
          uint64_t v13 = (v13 + 1);
          ++v12;
        }
        while (v14 == v15 && v7 > (unsigned __int16)v12);
        if (v14 == v15) {
          goto LABEL_14;
        }
      }
      uint64_t v13 = (v10 + 1);
LABEL_24:
      int v9 = (unsigned __int16)v13;
      uint64_t v10 = v13;
    }
    while ((unsigned __int16)v13 < v6);
  }
  uint64_t result = wordpar_loc_asian_adjustText(__s, (unsigned __int8 *)a3, v7, &v24);
  v8[9] = v24;
  return result;
}

uint64_t wordpar_loc_asian_replaceStrWithStr(uint64_t a1, char *__s, const char *a3, int a4)
{
  unsigned __int16 v7 = cstdlib_strlen(__s);
  int v8 = cstdlib_strlen(szWORD_BEG);
  long long __src = a3;
  uint64_t result = cstdlib_strlen(a3);
  uint64_t v37 = a1;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = v7;
  if (v7)
  {
    unsigned int v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    unsigned int v15 = (unsigned __int16)v8;
    int v36 = result - v8;
    uint64_t v16 = (__int16)(result - v8);
    size_t __n = (unsigned __int16)result;
    int v17 = a4;
    do
    {
      int v18 = &__s[(unsigned __int16)v14];
      if (!*v18 || v17 == 1 && (_WORD)v14) {
        break;
      }
      if (*v18 != 16) {
        goto LABEL_23;
      }
      uint64_t v19 = v14;
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v20 = 0;
      LODWORD(v19) = v14;
      do
      {
        int v21 = __s[(unsigned __int16)v19];
        int v22 = szWORD_BEG[v20];
        uint64_t v19 = (v19 + 1);
        ++v20;
      }
      while (v21 == v22 && v15 > (unsigned __int16)v20);
      if (v21 == v22)
      {
LABEL_14:
        int v41 = v13;
        uint64_t v24 = v16;
        int v40 = v36 + cstdlib_strlen(__s);
        cstdlib_memmove(&__s[(int)(v12 + v15 + v24)], &__s[v12 + v15], (int)(v11 - (v12 + v15) + 1));
        uint64_t result = (uint64_t)cstdlib_memcpy(&__s[(unsigned __int16)v14], __src, __n);
        uint64_t v16 = v24;
        unsigned __int16 v7 = v40;
        __s[(unsigned __int16)v40] = 0;
        unint64_t v25 = *(unsigned __int16 *)(v37 + 16);
        if (v25 >= 2)
        {
          int v26 = 1;
          while (1)
          {
            uint64_t v27 = (unsigned __int16)v26;
            unsigned int v28 = (int *)(v10 + 32 + ((unint64_t)(unsigned __int16)v26 << 6));
            int v29 = *v28;
            int v30 = *v28 - *(_DWORD *)(v10 + 32);
            int v31 = (unsigned __int16)v14;
            if ((_WORD)v14)
            {
              while (v31 == (unsigned __int16)v30 && *(_DWORD *)(v10 + (v27 << 6) + 20) == 36)
              {
                *unsigned int v28 = v29 + 1;
                uint64_t v27 = (unsigned __int16)++v26;
                unsigned int v28 = (int *)(v10 + 32 + ((unint64_t)(unsigned __int16)v26 << 6));
                int v29 = *v28;
                int v30 = *v28 - *(_DWORD *)(v10 + 32);
                int v31 = (unsigned __int16)v14;
              }
            }
            if (v12 < (unsigned __int16)v30) {
              break;
            }
            if (v25 <= (unsigned __int16)++v26) {
              goto LABEL_27;
            }
          }
          if (v25 > (unsigned __int16)v26)
          {
            unsigned __int16 v32 = v26;
            unsigned __int16 v33 = (_DWORD *)(v10 + 32 + ((unint64_t)(unsigned __int16)v26 << 6));
            unint64_t v34 = v25 - v32;
            do
            {
              *v33 += v16;
              v33 += 16;
              --v34;
            }
            while (v34);
          }
        }
LABEL_27:
        int v13 = v41 + 1;
        int v17 = a4;
      }
      else
      {
LABEL_23:
        uint64_t v19 = (v14 + 1);
      }
      unsigned int v12 = (unsigned __int16)v19;
      int v11 = v7;
      uint64_t v14 = v19;
    }
    while ((unsigned __int16)v19 < v7);
  }
  *(_DWORD *)(v10 + 36) = v11;
  return result;
}

uint64_t wordpar_loc_asian_getLastPosRef(unsigned int *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5 = a1[6];
  if (a2 >= a4) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = a2;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = a1[8];
    if (a2 <= 1) {
      int v9 = 1;
    }
    else {
      int v9 = a2;
    }
    uint64_t v10 = (v9 - 1);
    unsigned __int16 v11 = v9 - 1;
    unsigned int v12 = a1 + 24;
    unsigned int v13 = a1[8];
    while (a3 > (unsigned __int16)(v13 - v8))
    {
      if (v10 == v7) {
        goto LABEL_15;
      }
      unsigned int v13 = *v12;
      if (a3 <= (unsigned __int16)(*v12 - v8)) {
        break;
      }
      ++v7;
      v12 += 16;
      if (v6 == v7)
      {
        unsigned __int16 v11 = v6;
        goto LABEL_15;
      }
    }
    unsigned __int16 v11 = v7;
LABEL_15:
    if (v11)
    {
      uint64_t v14 = v11;
      if (a5 == 1
        && ((v15 = &a1[16 * (unint64_t)v11], v16 = v15[5], v16 != 41) ? (BOOL v17 = v16 == 1) : (BOOL v17 = 1), v17))
      {
        return v15[6];
      }
      else
      {
        return a1[16 * v14 + 7] + a1[16 * v14 + 6];
      }
    }
  }
  return v5;
}

unsigned char *wordpar_loc_asian_adjustText(unsigned char *result, unsigned __int8 *a2, unsigned int a3, unsigned __int16 *a4)
{
  unsigned __int16 v4 = *a4;
  if (*a4)
  {
    unsigned int v8 = result;
    int v9 = 0;
    int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t result = &v8[(unsigned __int16)v10];
      if (!*result) {
        return result;
      }
      if (*result == *a2)
      {
        if (!a3)
        {
          int v13 = v10;
LABEL_15:
          uint64_t result = cstdlib_memmove(result, &v8[v9 + a3], (int)(v4 - (v9 + a3) + 1));
          unsigned __int16 v4 = *a4 - a3;
          *a4 = v4;
          int v10 = v13 - a3;
          goto LABEL_16;
        }
        unint64_t v12 = 0;
        int v13 = v10;
        do
        {
          int v14 = v8[(unsigned __int16)v13];
          int v15 = a2[v12];
          ++v13;
          ++v12;
        }
        while (v14 == v15 && v12 < v11);
        if (v14 == v15) {
          goto LABEL_15;
        }
      }
      ++v10;
LABEL_16:
      int v9 = (unsigned __int16)v10;
    }
    while ((unsigned __int16)v10 < v4);
  }
  return result;
}

BOOL wordpar_loc_asian_isMarkerUnknown(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20) != 36) {
    return 0;
  }
  uint64_t v1 = *(const char **)(a1 + 40);
  MarkerArgint Str = marker_getMarkerArgStr(9u);
  return cstdlib_strcmp(v1, MarkerArgStr) == 0;
}

BOOL bed_marker_IsOfType(int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    int v3 = *a1;
    int v4 = *(_DWORD *)(a2 + 20);
    if (*a1)
    {
      int v5 = 0;
      while (v4 != v3)
      {
        int v3 = a1[(unsigned __int16)++v5];
        if (!v3) {
          return v4 == v3;
        }
      }
      int v3 = *(_DWORD *)(a2 + 20);
    }
    return v4 == v3;
  }
  return v2;
}

BOOL bed_marker_IsToiOfType(int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(a2 + 20) == 7)
    {
      int v3 = *a1;
      int v4 = *(_DWORD *)(a2 + 40);
      if (*a1)
      {
        int v5 = 0;
        while (v4 != v3)
        {
          int v3 = a1[(unsigned __int16)++v5];
          if (!v3) {
            return v4 == v3;
          }
        }
        int v3 = *(_DWORD *)(a2 + 40);
      }
      return v4 == v3;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

BOOL bed_marker_IsToiNotOfType(int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (*(_DWORD *)(a2 + 20) == 7)
    {
      int v3 = *a1;
      int v4 = *(_DWORD *)(a2 + 40);
      if (*a1)
      {
        int v5 = 0;
        while (v4 != v3)
        {
          int v3 = a1[(unsigned __int16)++v5];
          if (!v3) {
            return v4 != v3;
          }
        }
        int v3 = *(_DWORD *)(a2 + 40);
      }
      return v4 != v3;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t bed_marker_IsAt(_WORD *a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (*a1)
    {
      uint64_t result = 0;
      --*a1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t bed_marker_MapPosCur(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  int v13 = 0;
  uint64_t result = 2370838535;
  if (a1 && a3)
  {
    unsigned __int16 v12 = 0;
    *a3 = a2;
    LODWORD(result) = bed_GetpElem(a1, 0, &v13);
    if ((result & 0x80000000) != 0)
    {
      if ((result & 0x1FFF) == 0xF) {
        return 0;
      }
      else {
        return result;
      }
    }
    else
    {
      uint64_t result = bed_GetcElem(a1, &v12);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v7 = v12;
        if (!v12) {
          return 0;
        }
        unsigned int v8 = 0;
        int v9 = v13;
        do
        {
          unsigned int v10 = v9[8];
          if (v10 > a2) {
            break;
          }
          if (!*v9)
          {
            unsigned int v11 = v9[9] + v10;
            if (v11 <= a2 && (!v8 || v8[9] + v8[8] <= v11 && v8[7] + v8[6] <= (v9[7] + v9[6]))) {
              unsigned int v8 = v9;
            }
          }
          v9 += 16;
          --v7;
        }
        while (v7);
        if (v8)
        {
          uint64_t result = 0;
          *a3 += v8[7] + v8[6] - (v8[8] + v8[9]);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t bed_marker_InjectFixedRefMarker(uint64_t a1, void *a2)
{
  uint64_t result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = bed_GoForward(a1, (uint64_t (*)(uint64_t, unint64_t))bed_marker_HasGreaterOrEqualPosCur, (uint64_t)a2);
      if ((result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
      {
        int v5 = bed_Insert(a1, a2, 1);
        return v5 & (v5 >> 31);
      }
    }
  }
  return result;
}

BOOL bed_marker_HasGreaterOrEqualPosCur(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    unsigned int v5 = *(_DWORD *)(a2 + 32);
    BOOL v6 = v4 > v5;
    if (v4 == v5) {
      BOOL v6 = *(_DWORD *)(a1 + 36) > *(_DWORD *)(a2 + 36);
    }
    return !v6;
  }
  return result;
}

uint64_t bed_marker_InjectMarker(uint64_t a1, unsigned int *a2)
{
  uint64_t result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = bed_marker_MapPosCur(a1, a2[8], a2 + 6);
      if ((result & 0x80000000) == 0)
      {
        unsigned int v5 = a2 + 7;
        uint64_t result = bed_marker_MapPosCur(a1, a2[9] + a2[8], a2 + 7);
        if ((result & 0x80000000) == 0)
        {
          unsigned int v6 = a2[6];
          if (*v5 > v6) {
            *v5 -= v6;
          }
          uint64_t result = bed_GoForward(a1, (uint64_t (*)(uint64_t, unint64_t))bed_marker_HasGreaterOrEqualPosCur, (uint64_t)a2);
          if ((result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
          {
            int v7 = bed_Insert(a1, a2, 1);
            return v7 & (v7 >> 31);
          }
        }
      }
    }
  }
  return result;
}

uint64_t freeMERDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a1 + 88))
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] free MER definitions", a6, a7, a8, v13);
    uint64_t v9 = *(void *)(a1 + 96);
    if (v9)
    {
      if (*(_WORD *)(a1 + 88))
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if (*(void *)(v9 + v10 + 16))
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v9 + v10 + 16));
            uint64_t v9 = *(void *)(a1 + 96);
            *(void *)(v9 + v10 + 16) = 0;
          }
          if (*(void *)(v9 + v10 + 32))
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v9 + v10 + 32));
            uint64_t v9 = *(void *)(a1 + 96);
            *(void *)(v9 + v10 + 32) = 0;
          }
          if (*(void *)(v9 + v10 + 48))
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v9 + v10 + 48));
            uint64_t v9 = *(void *)(a1 + 96);
            *(void *)(v9 + v10 + 48) = 0;
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < *(unsigned __int16 *)(a1 + 88));
      }
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v9);
      *(void *)(a1 + 96) = 0;
    }
    *(_WORD *)(a1 + 88) = 0;
  }
  return 0;
}

uint64_t getMERDefs(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (_WORD *)(a1 + 88);
  if (*(_WORD *)(a1 + 88)) {
    freeMERDefs(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] get MER definitions", a6, a7, a8, v31);
  cstdlib_memcpy(v10, a4, 2uLL);
  uint64_t v11 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, ((unint64_t)*(unsigned __int16 *)(a1 + 88) << 6) | 1);
  *(void *)(a1 + 96) = v11;
  if (v11)
  {
    if (!*v10) {
      return 0;
    }
    uint64_t v19 = 0;
    unsigned int v20 = 2;
    while (1)
    {
      int __dst = 0;
      cstdlib_memcpy((char *)&__dst + 2, &a4[v20], 2uLL);
      *(_DWORD *)(*(void *)(a1 + 96) + (v19 << 6)) = HIWORD(__dst);
      cstdlib_memcpy((char *)&__dst + 2, &a4[v20 + 2], 2uLL);
      *(_DWORD *)(*(void *)(a1 + 96) + (v19 << 6) + 4) = HIWORD(__dst);
      cstdlib_memcpy((char *)&__dst + 2, &a4[v20 + 4], 2uLL);
      __int16 v21 = 0;
      v20 += 6;
      *(_DWORD *)(*(void *)(a1 + 96) + (v19 << 6) + 56) = HIWORD(__dst);
      while (1)
      {
        LOWORD(__dst) = 0;
        cstdlib_memcpy(&__dst, &a4[v20], 2uLL);
        v20 += 2;
        __int16 v22 = __dst;
        if ((_WORD)__dst)
        {
          uint64_t v23 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (4 * (unsigned __int16)__dst) | 1);
          if (!v23) {
            goto LABEL_24;
          }
          uint64_t v24 = v23;
          __int16 v22 = __dst;
          if ((_WORD)__dst)
          {
            unint64_t v25 = 0;
            do
            {
              cstdlib_memcpy((char *)&__dst + 2, &a4[v20], 2uLL);
              v20 += 2;
              *(_DWORD *)(v24 + 4 * v25++) = HIWORD(__dst);
              __int16 v22 = __dst;
            }
            while (v25 < (unsigned __int16)__dst);
          }
        }
        else
        {
          uint64_t v24 = 0;
        }
        if (v21) {
          break;
        }
        uint64_t v28 = *(void *)(a1 + 96) + (v19 << 6);
        *(_WORD *)(v28 + 8) = v22;
        uint64_t v27 = (uint64_t *)(v28 + 16);
LABEL_18:
        *uint64_t v27 = v24;
        ++v21;
      }
      if (v21 == 1) {
        break;
      }
      if (v21 == 2)
      {
        uint64_t v29 = *(void *)(a1 + 96) + (v19 << 6);
        *(_WORD *)(v29 + 40) = v22;
        *(void *)(v29 + 48) = v24;
      }
      uint64_t result = 0;
      if (++v19 >= (unint64_t)(unsigned __int16)*v10) {
        return result;
      }
    }
    uint64_t v26 = *(void *)(a1 + 96) + (v19 << 6);
    *(_WORD *)(v26 + 24) = v22;
    uint64_t v27 = (uint64_t *)(v26 + 32);
    goto LABEL_18;
  }
  *uint64_t v10 = 0;
LABEL_24:
  freeMERDefs(a1, v12, v13, v14, v15, v16, v17, v18);
  return 2370838538;
}

uint64_t freeSYMDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_WORD *)(a1 + 64)) {
    return 0;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] free SYM definitions", a6, a7, a8, v11);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v9) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v9);
  }
  *(_WORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t result = ssftriff_reader_ReleaseChunkData((void *)result);
    if ((result & 0x80000000) == 0) {
      *(void *)(a1 + 40) = 0;
    }
  }
  return result;
}

uint64_t getSYMDefs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 0;
  uint64_t __dst = 0;
  uint64_t v31 = a4;
  int v29 = 0;
  if (!*(_WORD *)(a1 + 64))
  {
    uint64_t v10 = a4;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] get SYM definitions", a6, a7, a8, v27);
    cstdlib_memcpy(&__dst, (const void *)v10, 4uLL);
    cstdlib_memcpy((char *)&__dst + 4, (const void *)(v10 + 4), 4uLL);
    unsigned int v12 = HIDWORD(__dst) + 8;
    uint64_t v13 = (HIDWORD(__dst) + 8 + __dst);
    cstdlib_memcpy((void *)(a1 + 64), (const void *)(v10 + v13), 2uLL);
    uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (8 * *(unsigned __int16 *)(a1 + 64)) | 1);
    *(void *)(a1 + 72) = v14;
    if (v14)
    {
      if (*(_WORD *)(a1 + 64))
      {
        uint64_t v22 = 0;
        unsigned int v23 = v13 + 2;
        uint64_t v24 = 1;
        do
        {
          unsigned __int16 v28 = 0;
          cstdlib_memcpy(&v28, (const void *)(v10 + v23), 2uLL);
          uint64_t v10 = v31;
          cstdlib_memcpy(&v29, (const void *)(v31 + v23 + 2), 4uLL);
          v23 += 6;
          unint64_t v25 = (_DWORD *)(*(void *)(a1 + 72) + v22);
          v25[1] = v28;
          *unint64_t v25 = v29;
          v22 += 8;
        }
        while (*(unsigned __int16 *)(a1 + 64) > (unsigned __int16)v24++);
      }
      uint64_t result = ssftriff_reader_DetachChunkData(a2, (void **)(a1 + 40), &v31);
      if ((result & 0x80000000) == 0) {
        *(void *)(a1 + 80) = v31 + v12;
      }
    }
    else
    {
      freeSYMDefs(a1, v15, v16, v17, v18, v19, v20, v21);
      return 2370838538;
    }
  }
  return result;
}

uint64_t wparser_ObjOpen2(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v33[8] = *MEMORY[0x263EF8340];
  uint64_t v15 = 2370838535;
  uint64_t v32 = 0;
  unsigned int v31 = 0;
  if (a5 && (InitRsrcFunction(a1, a2, &v32) & 0x80000000) == 0)
  {
    *a5 = 0;
    uint64_t v24 = (void *)heap_Alloc(*(void *)(v32 + 8), 144);
    if (v24)
    {
      uint64_t v25 = (uint64_t)v24;
      cstdlib_memset(v24, 0, 0x90uLL);
      *(void *)uint64_t v25 = a1;
      *(void *)(v25 + 8) = a2;
      *(void *)(v25 + 16) = v32;
      *(void *)(v25 + 32) = a12;
      cstdlib_memset((void *)(v25 + 88), 0, 0x10uLL);
      cstdlib_memset((void *)(v25 + 64), 0, 0x18uLL);
      *(_DWORD *)(v25 + 56) = a4;
      *(void *)(v25 + 40) = 0;
      *(void *)(v25 + 48) = a3;
      *(void *)(v25 + 104) = a6;
      *(void *)(v25 + 112) = a7;
      *(void *)(v25 + 120) = a8;
      *(void *)(v25 + 128) = 0;
      *(_WORD *)(v25 + 138) = 512;
      if ((paramc_ParamGetUInt(*(void *)(v32 + 40), (uint64_t)"udctmaxlookuplen", &v31) & 0x80000000) == 0) {
        *(_WORD *)(v25 + 138) = v31;
      }
      *(_WORD *)(v25 + 136) = 512;
      if ((paramc_ParamGetUInt(*(void *)(v32 + 40), (uint64_t)"udctmaxdictretlen", &v31) & 0x80000000) == 0) {
        *(_WORD *)(v25 + 136) = v31;
      }
      *(_WORD *)(v25 + 140) = 1;
      if ((paramc_ParamGetUInt(*(void *)(v32 + 40), (uint64_t)"numberoutputtranscriptions", &v31) & 0x80000000) != 0)
      {
        __int16 v27 = *(_WORD *)(v25 + 140);
      }
      else
      {
        __int16 v27 = v31;
        *(_WORD *)(v25 + 140) = v31;
      }
      HIDWORD(v28) = *(_DWORD *)(v25 + 136);
      LODWORD(v28) = HIDWORD(v28);
      uint64_t v29 = utoin_ObjOpen(a1, a2, (uint64_t *)(v25 + 24), a6, a7, a8, a9, v26, a10, a11, a13, a14, a15, SHIWORD(v28), (v28 >> 16) >> 16, v27);
      if ((v29 & 0x80000000) != 0) {
        goto LABEL_15;
      }
      v33[0] = "SYMD";
      v33[1] = getSYMDefs;
      v33[2] = freeSYMDefs;
      v33[3] = v25;
      v33[4] = "MERR";
      v33[5] = getMERDefs;
      v33[6] = freeMERDefs;
      v33[7] = v25;
      uint64_t v29 = extdata_RegisterData(a12, (char *)v33, 2u);
      if ((v29 & 0x80000000) != 0)
      {
LABEL_15:
        uint64_t v15 = v29;
        wparser_ObjClose2(v25);
      }
      else
      {
        uint64_t v15 = 0;
        *a5 = v25;
      }
    }
    else
    {
      return 2370838538;
    }
  }
  return v15;
}

uint64_t wparser_ObjClose2(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3) {
      utoin_ObjClose(v3);
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wparser_ProcessStart(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v11 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v11) & 0x80000000) == 0)
  {
    if (*(_WORD *)(a1 + 64))
    {
      uint64_t v7 = paramc_ParamGet(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", (void *)(a1 + 128), 0);
      if ((v7 & 0x80000000) != 0)
      {
        return v7;
      }
      else
      {
        int v8 = utoin_ProcessStart(*(void *)(a1 + 24));
        return v8 & (v8 >> 31);
      }
    }
    else
    {
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)&modPP_2, 1810, 0, v3, v4, v5, v6, v10);
    }
  }
  return v1;
}

uint64_t wparser_ProcessEnd(void *a1)
{
  if (!a1) {
    return 2370838535;
  }
  if (a1[16]) {
    paramc_ParamRelease(*(void *)(a1[2] + 40));
  }
  int v2 = utoin_ProcessEnd(a1[3]);
  return v2 & (v2 >> 31);
}

uint64_t wparser_NormalizeWords(unsigned __int16 *a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v5 = 2370838535;
  uint64_t v58 = 0;
  if (!a1 || !a2 || (InitRsrcFunction(*(_WORD **)a1, *((void *)a1 + 1), &v59) & 0x80000000) != 0) {
    return v5;
  }
  uint64_t v14 = datac_RequestBlock(a2, 1020, 1u, &v60);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  if (!*(_WORD *)(v60 + 16))
  {
    log_OutText(*(void *)(*((void *)a1 + 2) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[SEQ] wparser : no text to process", v11, v12, v13, v56);
    return v14;
  }
  uint64_t v15 = bed_ObjOpen(*(_WORD **)a1, *((void *)a1 + 1), a2, 1021, &v58, 213);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v61 = 0;
  unsigned int v16 = datac_RequestBlock(a2, 1021, 1u, &v61);
  if ((v16 & 0x80000000) != 0)
  {
    unsigned int v27 = v16;
    LOWORD(v25) = 0;
    goto LABEL_23;
  }
  uint64_t v17 = *(_DWORD **)(v61 + 8);
  unsigned int v18 = *(unsigned __int16 *)(v61 + 16);
  if (v18 < 2) {
    goto LABEL_39;
  }
  uint64_t v19 = v17 + 16;
  uint64_t v20 = *(unsigned __int16 *)(v61 + 16);
LABEL_10:
  uint64_t v21 = v19;
  uint64_t v22 = 1;
  do
  {
    if (v21[5] == 999 && v21[8] == v17[8] && !v21[10])
    {
      uint64_t v23 = (unsigned __int16)v22 + 1;
      if (v23 < v20)
      {
        uint64_t v24 = v19;
        cstdlib_memmove(v21, &v17[16 * v23], (uint64_t)(int)(v20 - (unsigned __int16)v22) << 6);
        uint64_t v19 = v24;
      }
      LOWORD(v25) = 0;
      uint64_t v57 = 0;
      int v26 = 0;
      --v20;
      unsigned int v18 = 1;
      if ((v20 & 0xFFFE) == 0)
      {
LABEL_59:
        *(_WORD *)(v61 + 16) = v18;
        unsigned int v43 = v17[6] + a3;
        int v44 = v17[7] - a3;
        v17[6] = v43;
        v17[7] = v44;
        if (v26)
        {
          uint64_t v45 = v17 + 38;
          uint64_t v46 = 1;
          uint64_t v47 = 3;
          do
          {
            if (v17[16 * v46 + 5] != 0x4000 && !v17[16 * v46] && v17[16 * v46 + 6] > v43)
            {
              if (v46 + 1 < (unint64_t)v18)
              {
                uint64_t v48 = v47;
                unsigned __int16 v49 = v45;
                do
                {
                  if (!*(v49 - 6)) {
                    *v49 -= v17[16 * v46 + 7];
                  }
                  v49 += 16;
                  BOOL v33 = v18 == (unsigned __int16)v48++;
                }
                while (!v33);
              }
              v17[16 * v46 + 7] = 0;
            }
            ++v46;
            v45 += 16;
            ++v47;
          }
          while (v46 != v18);
        }
        uint64_t v50 = *((void *)a1 + 13);
        BOOL v51 = log_GetLogLevel(*(void *)(*((void *)a1 + 2) + 32)) > 4;
        uint64_t v52 = utois_ScanRegions(v50, *((void *)a1 + 14), *((void *)a1 + 15), v51, *(_WORD **)a1, *((void *)a1 + 1), a2, a1 + 32, *((void **)a1 + 6), *((void *)a1 + 7), *((char **)a1 + 16), *((_DWORD *)a1 + 34), HIWORD(*((_DWORD *)a1 + 34)), a1[70]);
        uint64_t v5 = v52;
        if ((v52 & 0x80000000) != 0 && (v52 & 0x1FFF) != 0xA) {
          return v5;
        }
        uint64_t v15 = utoin_NormalizeRegions(*((_WORD ***)a1 + 3), a2, a1 + 44);
        if ((v15 & 0x80000000) == 0)
        {
          unsigned int v27 = wparser_loc_ReSyncOut((uint64_t)a1, a2, a3, a4, v57, (unsigned __int16)v25, v53, v54);
          goto LABEL_76;
        }
        return v15;
      }
      goto LABEL_10;
    }
    ++v22;
    v21 += 16;
  }
  while (v20 != v22);
  unsigned int v18 = (unsigned __int16)v20;
  if ((unsigned __int16)v20 < 2u)
  {
LABEL_39:
    LOWORD(v25) = 0;
    uint64_t v57 = 0;
    int v26 = 0;
    goto LABEL_59;
  }
  LOWORD(v25) = 0;
  uint64_t v28 = (unsigned __int16)v20 - 1;
  uint64_t v29 = v17 + 16;
  do
  {
    unsigned int v30 = v29[5];
    if (v30 != 0x4000 && !*v29
      || v29[6] == v17[6]
      && ((BOOL v31 = v30 > 0x24, v32 = (1 << v30) & 0x1080200080, !v31) ? (v33 = v32 == 0) : (v33 = 1), !v33 && *v29 == 1))
    {
      LOWORD(v25) = v25 + 1;
    }
    v29 += 16;
    --v28;
  }
  while (v28);
  if (!(_WORD)v25)
  {
    uint64_t v57 = 0;
    goto LABEL_41;
  }
  uint64_t v57 = heap_Calloc(*(void **)(*((void *)a1 + 2) + 8), 1, ((unint64_t)(unsigned __int16)v25 << 6) | 1);
  if (v57)
  {
LABEL_41:
    int v25 = 0;
    unsigned __int16 v34 = 0;
    uint64_t v35 = v17 + 16;
    uint64_t v36 = (unsigned __int16)v20 - 1;
    while (1)
    {
      unsigned int v37 = v35[5];
      if (v37 == 0x4000 || *v35)
      {
        int v38 = v35[6];
        if (v38 != v17[6]) {
          goto LABEL_57;
        }
        BOOL v31 = v37 > 0x24;
        uint64_t v39 = (1 << v37) & 0x1080200080;
        BOOL v40 = v31 || v39 == 0;
        if (v40 || *v35 != 1) {
          goto LABEL_57;
        }
        v35[6] = v38 + a3;
        cstdlib_memcpy((void *)(v57 + ((unint64_t)v34 << 6)), v35, 0x40uLL);
        ++v25;
      }
      else
      {
        cstdlib_memcpy((void *)(v57 + ((unint64_t)v34 << 6)), v35, 0x40uLL);
        ++v25;
        int v41 = a5[5];
        if (v41)
        {
          if (v41 == v35[5])
          {
            int v42 = a5[6];
            if (v42 == v35[6] && a5[7] == v35[7]) {
              *((void *)v35 + 3) = (v42 + a3);
            }
          }
        }
      }
      unsigned __int16 v34 = v25;
LABEL_57:
      v35 += 16;
      if (!--v36)
      {
        int v26 = 1;
        goto LABEL_59;
      }
    }
  }
  unsigned int v27 = -1924128758;
LABEL_23:
  uint64_t v57 = 0;
  LODWORD(v5) = 0;
LABEL_76:
  if ((_WORD)v25) {
    heap_Free(*(void **)(*((void *)a1 + 2) + 8), v57);
  }
  if (v58) {
    bed_ObjClose(v58);
  }
  if ((v5 & 0x1FFF) == 0xA) {
    return v5;
  }
  else {
    return v27;
  }
}

uint64_t wparser_loc_ReSyncOut(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a6;
  int v10 = a4;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_2, 5, 0, (uint64_t)"[WPARSER] ReSyncOut(refReset=%d posRefOffset=%d)", a6, a7, a8, a4);
  uint64_t result = datac_RequestBlock(a2, 1021, 1u, &v86);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v15 = *(_DWORD **)(v86 + 8);
  unint64_t v16 = *(unsigned __int16 *)(v86 + 16);
  uint64_t v17 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (2 * v16) | 1);
  if (!v17) {
    return 2370838538;
  }
  uint64_t v18 = v17;
  if (!v16) {
    goto LABEL_53;
  }
  uint64_t v19 = 0;
  unsigned int v20 = 0;
  do
  {
    uint64_t v21 = &v15[16 * v19];
    unsigned int v22 = v21[5];
    BOOL v23 = v22 > 0x24 || ((1 << v22) & 0x1080200080) == 0;
    if (v23 && v22 != 999)
    {
      if (*v21) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = v20 >= v8;
      }
      if (v30)
      {
LABEL_36:
        __int16 v34 = 0;
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    int v24 = *v21;
    if (!v24)
    {
      if (v20 >= v8) {
        goto LABEL_36;
      }
LABEL_32:
      uint64_t v31 = v20;
      uint64_t v32 = (int *)(a5 + 20 + ((unint64_t)v20 << 6));
      while (v22 != 999)
      {
        int v33 = *v32;
        v32 += 16;
        if (v33 == v22) {
          break;
        }
        if (v8 == ++v31) {
          goto LABEL_36;
        }
      }
      ++v20;
      __int16 v34 = v31 + 1;
      goto LABEL_37;
    }
    if (v22 == 999 || v24 != 1) {
      goto LABEL_36;
    }
    int v26 = v15[16 * v19 + 6];
    if (v26 != v15[6] || v20 >= v8) {
      goto LABEL_36;
    }
    __int16 v28 = v20;
    uint64_t v29 = (_DWORD *)(a5 + 24 + ((unint64_t)v20 << 6));
    while (*(v29 - 1) != v22 || *v29 != v26)
    {
      v29 += 16;
      if (v8 == (unsigned __int16)++v28) {
        goto LABEL_36;
      }
    }
    ++v20;
    __int16 v34 = v28 + 1;
LABEL_37:
    *(_WORD *)(v18 + 2 * v19++) = v34;
  }
  while (v19 != v16);
  uint64_t v35 = v15 + 7;
  unint64_t v36 = v16;
  unsigned int v37 = (_WORD *)v18;
  do
  {
    unsigned int v38 = *(v35 - 2);
    BOOL v39 = v38 > 0x24 || ((1 << v38) & 0x1080200080) == 0;
    if (!v39 || v38 == 999 || !*(v35 - 7))
    {
      uint64_t v40 = (unsigned __int16)*v37;
      if (*v37)
      {
        int v41 = *(_DWORD *)(a5 + ((unint64_t)(v40 - 1) << 6) + 24);
        *(v35 - 1) = v41;
        *uint64_t v35 = *(_DWORD *)(a5 + (v40 << 6) - 36);
        if (v41 == v15[6] && v15[7] + v41 >= (v41 - a3)) {
          *(v35 - 1) = v41 - a3;
        }
      }
    }
    v35 += 16;
    ++v37;
    --v36;
  }
  while (v36);
LABEL_53:
  int v42 = v15[7] + v10 + a3;
  v15[6] -= v10 + a3;
  v15[7] = v42;
  if (v16 >= 2)
  {
    int v43 = v15[8];
    for (uint64_t i = 1; i != v16; ++i)
    {
      uint64_t v45 = &v15[16 * i];
      if (v45[8] != v43 || v45[6] > (v10 + a3 + v15[6]))
      {
        int v46 = v45[5];
        if (v46 == 999 || v46 != 0x4000 && !*v45)
        {
          LOWORD(v47) = 0;
          uint64_t v48 = &v15[16 * i + 6];
          unsigned __int16 v49 = &v15[16 * (unint64_t)(unsigned __int16)(v16 - 1) + 6];
          uint64_t v50 = (unsigned __int16)(v16 - 1);
          do
          {
            if (i != v50 && *(v49 - 1) != 0x4000 && *v49 >= *v48) {
              LOWORD(v47) = v50;
            }
            --v50;
            v49 -= 16;
          }
          while ((_WORD)v50);
          int v51 = v15[16 * i + 7];
          if (v51)
          {
            if (v16 > (unsigned __int16)v47)
            {
              unint64_t v47 = (unsigned __int16)v47;
              uint64_t v52 = &v15[16 * (unint64_t)(unsigned __int16)v47 + 6];
              do
              {
                if (i != v47 && *(v52 - 1) != 999 && *(v52 - 6) == 1 && *v52 >= *v48)
                {
                  unsigned int v53 = *v52 + v51;
                  if (v15[6] + v42 < v53) {
                    break;
                  }
                  *uint64_t v52 = v53;
                }
                ++v47;
                v52 += 16;
              }
              while (v47 < v16);
            }
          }
        }
      }
    }
    unint64_t v54 = 1;
    while (2)
    {
      unint64_t v55 = v54 + 1;
      if (v15[16 * v54 + 5] == 41)
      {
        unsigned __int16 v56 = v54 + 1;
        if (v55 < v16)
        {
          uint64_t v57 = &v15[16 * v55];
          if (v57[5] == 39 && v57[8] == v15[16 * v54 + 8])
          {
            unsigned __int16 v58 = v54 + 1;
            goto LABEL_92;
          }
        }
        if (v54 >= 2 && (uint64_t v59 = &v15[16 * v54 - 16], v59[5] == 39))
        {
          if (v59[8] == v15[16 * v54 + 8]) {
            unsigned __int16 v58 = v54 - 1;
          }
          else {
            unsigned __int16 v58 = 0;
          }
        }
        else
        {
          unsigned __int16 v58 = 0;
        }
        if (v55 >= v16 || (uint64_t v60 = &v15[16 * v55], v60[5] != 14) || v60[8] != v15[16 * v54 + 8])
        {
LABEL_92:
          if (v54 >= 2 && (uint64_t v61 = &v15[16 * v54 - 16], v61[5] == 14))
          {
            if (v61[8] == v15[16 * v54 + 8]) {
              unsigned __int16 v56 = v54 - 1;
            }
            else {
              unsigned __int16 v56 = 0;
            }
          }
          else
          {
            unsigned __int16 v56 = 0;
          }
        }
        unsigned int v62 = &v15[16 * v54];
        unsigned int v63 = v62[6];
        uint64_t v64 = v62 + 7;
        unsigned __int16 v65 = v15 + 23;
        for (unint64_t j = 1; j != v16; ++j)
        {
          unsigned int v67 = *(v65 - 1);
          int v68 = *v64;
          unsigned int v69 = *v64 + v63;
          if (v67 > v69) {
            break;
          }
          if (j > v54)
          {
            if (v67)
            {
              if (!*(v65 - 7))
              {
                int v70 = *(v65 - 2);
                if (v70 != 7 && v70 != 0x4000 && v67 >= v63 && v67 < v69)
                {
                  int v71 = *v65 + v68;
                  if (v71 + v63 <= v15[7] + v15[6])
                  {
                    int *v64 = v71;
                    int v68 = v71;
                  }
                  if (v58) {
                    v15[16 * (unint64_t)v58 + 7] = v68;
                  }
                  if (v56) {
                    v15[16 * (unint64_t)v56 + 7] = *v64;
                  }
                }
              }
            }
          }
          v65 += 16;
        }
      }
      ++v54;
      if (v55 == v16) {
        break;
      }
      continue;
    }
  }
  uint64_t result = datac_RequestBlock(a2, 1020, 1u, &v87);
  if ((result & 0x80000000) == 0)
  {
    if (v16 >= 2)
    {
      unsigned int v72 = 1;
      int v73 = 1;
      do
      {
        uint64_t v74 = (unsigned __int16)v73;
        uint64_t v75 = &v15[16 * (unint64_t)(unsigned __int16)v73];
        if (v75[5] == 7 && v75[10] == 43)
        {
          if (v16 > (unsigned __int16)(v72 + 1))
          {
            size_t v76 = &v15[16 * (unint64_t)(unsigned __int16)v73];
            int v77 = v76 + 8;
            uint64_t v78 = v76 + 9;
            uint64_t v79 = (unsigned __int16)(v72 + 1);
            uint64_t v80 = (uint64_t)&v15[16 * v79 + 5];
            long long v81 = (int *)v80;
            while (1)
            {
              int v82 = *v81;
              v81 += 16;
              if (v82 == 999 && *(_DWORD *)(v80 + 12) == *v78 + *v77) {
                break;
              }
              LODWORD(v79) = v79 + 1;
              uint64_t v80 = (uint64_t)v81;
              if (v16 == (unsigned __int16)v79) {
                goto LABEL_126;
              }
            }
            if ((_WORD)v79)
            {
              v15[16 * (unint64_t)(unsigned __int16)v73 + 7] = v15[16 * (unint64_t)(unsigned __int16)v79
                                                                        + 7]
                                                                    + v15[16 * (unint64_t)(unsigned __int16)v79
                                                                        + 6]
                                                                    - v15[16 * (unint64_t)(unsigned __int16)v73
                                                                        + 6];
              goto LABEL_130;
            }
          }
LABEL_126:
          int v83 = &v15[16 * (unint64_t)(unsigned __int16)v73];
          if (*(unsigned __int16 *)(v87 + 16) + (unint64_t)v15[8] == v83[9] + v83[8])
          {
            v83[7] = v15[7] + v15[6] - v83[6];
            if ((datac_RequestBlock(a2, 1021, (unsigned __int16)(*(_WORD *)(v86 + 16) + 1), &v86) & 0x80000000) != 0) {
              break;
            }
            uint64_t v15 = *(_DWORD **)(v86 + 8);
            unsigned int v84 = &v15[16 * v74];
            cstdlib_memmove(&v15[16 * (unint64_t)(v72 + 1)], v84, (uint64_t)(int)(*(unsigned __int16 *)(v86 + 16) - v72) << 6);
            uint64_t v85 = *(void *)(v86 + 8) + (v74 << 6);
            *(_DWORD *)(v85 + 84) = 7;
            *(_DWORD *)(v85 + 104) = 15;
            *(_DWORD *)(v85 + 64) = 1;
            *(_DWORD *)(v85 + 88) = v84[6];
            *(_DWORD *)(v85 + 92) = 0;
            *(_DWORD *)(v85 + 96) = v84[9] + v84[8];
            *(_DWORD *)(v85 + 100) = 0;
            *(_WORD *)(v85 + 80) = 0;
            *(void *)(v85 + 72) = 0;
            *(void *)(v85 + 112) = 0;
            ++*(_WORD *)(v86 + 16);
            LODWORD(v79) = v16;
            goto LABEL_130;
          }
        }
        LODWORD(v79) = v73;
LABEL_130:
        int v73 = v79 + 1;
        unsigned int v72 = (unsigned __int16)(v79 + 1);
      }
      while (v72 < v16);
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v18);
    return 0;
  }
  return result;
}

uint64_t wparser_insertRegionTags(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return utoin_InsertRegions(*(_WORD ***)(a1 + 24), a2);
  }
  else {
    return 2370838535;
  }
}

uint64_t wparser_InsertWordMarkers(uint64_t a1, uint64_t a2, char *__s, unsigned __int16 *a4)
{
  unsigned int v84 = 0;
  v85[0] = 0;
  uint64_t v79 = 0;
  unsigned __int16 v78 = 0;
  unsigned __int16 v8 = cstdlib_strlen(__s);
  memset(__dst, 0, sizeof(__dst));
  uint64_t v9 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a2, 1021, v85, 213);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  uint64_t v10 = bed_GetpElem(v85[0], 0, &v84);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_52;
  }
  uint64_t v12 = v84;
  uint64_t v11 = v85[0];
  long long v13 = v84[1];
  long long v80 = *v84;
  long long v81 = v13;
  long long v14 = v84[3];
  long long v82 = v84[2];
  long long v83 = v14;
  *((_DWORD *)v84 + 7) = 0;
  *((_DWORD *)v12 + 9) = 0;
  uint64_t v10 = bed_GetpElem(v11, 0, &v84);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_52;
  }
  long long v15 = v81;
  uint64_t v17 = v84;
  uint64_t v16 = v85[0];
  long long *v84 = v80;
  v17[1] = v15;
  long long v18 = v83;
  v17[2] = v82;
  v17[3] = v18;
  uint64_t v10 = bed_GetcElem(v16, &v78);
  if ((v10 & 0x80000000) != 0)
  {
LABEL_52:
    uint64_t v19 = v10;
    goto LABEL_53;
  }
  uint64_t v19 = bed_GetpElem(v85[0], 0, &v79);
  if ((v19 & 0x80000000) == 0)
  {
    unsigned __int16 v20 = v78;
    if (v78 < 2u) {
      goto LABEL_81;
    }
    uint64_t v21 = v79;
    uint64_t v22 = 84;
    unint64_t v23 = 1;
    while (1)
    {
      unsigned int v76 = 0;
      unsigned int v76 = *(_DWORD *)(v21 + (v23 << 6) + 32) - *(_DWORD *)(v21 + 32);
      utf8_GetPreviousValidUtf8Offset((uint64_t)__s, &v76);
      uint64_t v21 = v79;
      unsigned int v24 = v76;
      uint64_t v25 = v79 + (v23 << 6);
      *(_DWORD *)(v25 + 32) = v76 + *(_DWORD *)(v79 + 32);
      unsigned int v26 = *(_DWORD *)(v25 + 20);
      BOOL v27 = v26 > 0x39;
      uint64_t v28 = (1 << v26) & 0x3C8002000004002;
      if (v27 || v28 == 0) {
        goto LABEL_49;
      }
      unsigned int v76 = v24;
      int v30 = utf8_BelongsToSet(5u, __s, v24, v8);
      unsigned int v31 = v76;
      if (v30)
      {
        while (v31 < v8 && utf8_BelongsToSet(5u, __s, v31, v8))
        {
          int v32 = utf8_determineUTF8CharLength(__s[v76]);
          *(_DWORD *)(v79 + (v23 << 6) + 32) += v32;
          unsigned int v31 = v76 + v32;
          v76 += v32;
        }
      }
      else if (v76 < *(_DWORD *)(v79 + 36))
      {
        unint64_t v33 = v23;
        while (1)
        {
          unint64_t v34 = v33;
          if (!v33) {
            break;
          }
          --v33;
          unsigned int v35 = *(_DWORD *)(v79 + ((unint64_t)(unsigned __int16)(v34 - 1) << 6) + 20);
          BOOL v27 = v35 > 0x39;
          uint64_t v36 = (1 << v35) & 0x3C8010124021140;
          if (!v27 && v36 != 0) {
            goto LABEL_23;
          }
        }
        LOWORD(v33) = -1;
LABEL_23:
        unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v76);
        if (PreviousUtf8Offset != -1)
        {
          for (unsigned int i = PreviousUtf8Offset; i != -1; unsigned int i = utf8_GetPreviousUtf8Offset((uint64_t)__s, i))
          {
            int v40 = utf8_BelongsToSet(5u, __s, i, v8);
            if (!v34) {
              break;
            }
            if (v40) {
              break;
            }
            if (i <= *(_DWORD *)(v79 + ((unint64_t)(unsigned __int16)v33 << 6) + 32)) {
              break;
            }
            *(_DWORD *)(v79 + (v23 << 6) + 32) += i - v76;
            unsigned int v76 = i;
          }
        }
      }
      uint64_t v21 = v79;
      uint64_t v41 = v79 + (v23 << 6);
      int v42 = *(_DWORD *)(v41 + 32);
      int v43 = *(_DWORD *)(v79 + 32);
      unsigned int v44 = v42 - v43;
      unsigned int v76 = v42 - v43;
      if (*(_DWORD *)(v41 + 20) != 1) {
        goto LABEL_49;
      }
      if (v44 < v8)
      {
        unsigned int v45 = v42 - v43;
        do
        {
          if (utf8_BelongsToSet(5u, __s, v45, v8)) {
            break;
          }
          unsigned int v45 = v76 + utf8_determineUTF8CharLength(__s[v76]);
          unsigned int v76 = v45;
        }
        while (v45 < v8);
        uint64_t v21 = v79;
      }
      if (v23 >= v78) {
        goto LABEL_47;
      }
      int v46 = (unsigned int *)(v21 + v22);
      unsigned __int16 v47 = v23;
      uint64_t v48 = (unsigned int *)(v21 + v22);
      while (1)
      {
        unsigned int v49 = *v48;
        v48 += 16;
        uint64_t v50 = (1 << v49) & 0x3C8010124221140;
        if (v49 <= 0x39 && v50 != 0)
        {
          unsigned int v52 = v46[3];
          unsigned int v53 = *(_DWORD *)(v21 + (v23 << 6) + 32);
          if (v52 > v53) {
            break;
          }
        }
        ++v47;
        int v46 = v48;
        if (v78 == v47) {
          goto LABEL_47;
        }
      }
      if (v47)
      {
        int v54 = v76 - v44;
        if (v76 - v44 + v53 > *(_DWORD *)(v21 + ((unint64_t)v47 << 6) + 32)) {
          goto LABEL_49;
        }
      }
      else
      {
LABEL_47:
        int v54 = v76 - v44;
      }
      *(_DWORD *)(v21 + (v23 << 6) + 36) = v54;
LABEL_49:
      ++v23;
      unsigned __int16 v20 = v78;
      v22 += 64;
      if (v23 >= v78)
      {
        if (v78 >= 2u)
        {
          int v56 = 1;
          unsigned __int16 v57 = 1;
          do
          {
            uint64_t v58 = v57;
            if (*(_DWORD *)(v79 + ((unint64_t)v57 << 6) + 20) != 0x4000
              && (uint64_t v59 = (v56 + 1), v59 < v20)
              && ((uint64_t v60 = (_DWORD *)(v79 + (v59 << 6)),
                   unsigned int v61 = v60[8],
                   unsigned int v62 = *(_DWORD *)(v79 + ((unint64_t)v57 << 6) + 32),
                   v61 < v62)
               || v61 == v62
               && *(_DWORD *)(v79 + (v59 << 6) + 36) < *(_DWORD *)(v79 + ((unint64_t)v57 << 6) + 36)))
            {
              cstdlib_memcpy(__dst, v60, 0x40uLL);
              unsigned int v63 = (_OWORD *)(v79 + (v59 << 6));
              uint64_t v64 = (long long *)(v79 + (v58 << 6));
              long long v65 = v64[3];
              long long v67 = *v64;
              long long v66 = v64[1];
              v63[2] = v64[2];
              v63[3] = v65;
              _OWORD *v63 = v67;
              v63[1] = v66;
              cstdlib_memcpy(v64, __dst, 0x40uLL);
              unsigned __int16 v57 = 0;
            }
            else
            {
              ++v57;
            }
            int v56 = v57;
            unsigned __int16 v20 = v78;
          }
          while (v57 < v78);
          if (v78 >= 2u)
          {
            unsigned __int16 v68 = 1;
LABEL_69:
            uint64_t v69 = v79;
            do
            {
              uint64_t v70 = v79 + ((unint64_t)v68 << 6);
              if (*(_DWORD *)(v70 + 20) == 1)
              {
                int v71 = (_DWORD *)(v70 + 32);
                unsigned __int16 v72 = v68;
                while (++v72 < v20)
                {
                  uint64_t v73 = v79 + ((unint64_t)v72 << 6);
                  if (*(_DWORD *)(v73 + 32) != *v71) {
                    break;
                  }
                  if (*(_DWORD *)(v73 + 20) == 1)
                  {
                    uint64_t v74 = (_DWORD *)(v79 + ((unint64_t)v72 << 6));
                    *(_DWORD *)(v79 + ((unint64_t)v68 << 6) + 28) = v74[7]
                                                                         + v74[6]
                                                                         - *(_DWORD *)(v79
                                                                                     + ((unint64_t)v68 << 6)
                                                                                     + 24);
                    uint64_t v75 = v72 + 1;
                    if (v20 > v75)
                    {
                      cstdlib_memmove(v74, (const void *)(v69 + (v75 << 6)), (uint64_t)(v20 - (int)v75) << 6);
                      unsigned __int16 v20 = v78;
                    }
                    unsigned __int16 v78 = --v20;
                    if (v68 < v20) {
                      goto LABEL_69;
                    }
                    goto LABEL_81;
                  }
                }
              }
              ++v68;
            }
            while (v68 < v20);
          }
        }
LABEL_81:
        *a4 = v20;
        break;
      }
    }
  }
LABEL_53:
  if (v85[0]) {
    bed_ObjClose(v85[0]);
  }
  return v19;
}

uint64_t utoin_LookUpUdctWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, __int16 a7, uint64_t a8)
{
  char v19 = 62;
  __int16 __s1 = 12049;
  uint64_t v17 = 0;
  int v16 = 1;
  if (!a4) {
    return 2370838535;
  }
  uint64_t v9 = 0;
  *(_DWORD *)(a4 + 12) = 0;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 8);
  if (v10 <= a6)
  {
    *(unsigned char *)(*(void *)a4 + v10) = 0;
    *(_WORD *)(a4 + 24) = a7;
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, const char *, int *, void, uint64_t, uint64_t, void, uint64_t *, void, void))(a1 + 128))(a2, a3, a5, *(void *)a4, 0, "normal", &v16, *(void *)(a4 + 16), a4 + 24, a8, 0, &v17, 0, 0);
    uint64_t v9 = 0;
    if (!v11)
    {
      unsigned __int16 v12 = cstdlib_strlen(*(const char **)(a4 + 16));
      *(_WORD *)(a4 + 24) = v12;
      long long v13 = *(char **)(a4 + 16);
      if (!v13[v12 - 1]) {
        *(_WORD *)(a4 + 24) = --v12;
      }
      if (v16 == 4)
      {
        if (v12 < 7u
          || cstdlib_memcmp(&__s1, v13, 3uLL)
          || cstdlib_memcmp(&__s1, (const void *)(*(void *)(a4 + 16) + *(unsigned __int16 *)(a4 + 24) - 3), 3uLL))
        {
          int v14 = 2;
        }
        else
        {
          cstdlib_memmove(*(void **)(a4 + 16), (const void *)(*(void *)(a4 + 16) + 2), *(unsigned __int16 *)(a4 + 24) - 4);
          *(unsigned char *)(*(unsigned __int16 *)(a4 + 24) + *(void *)(a4 + 16) - 4) = 0;
          int v14 = 16;
          **(unsigned char **)(a4 + 16) = 16;
          *(unsigned char *)(*(unsigned __int16 *)(a4 + 24) + *(void *)(a4 + 16) - 5) = 17;
          *(_WORD *)(a4 + 24) -= 4;
        }
      }
      else
      {
        int v14 = 43;
      }
      uint64_t v9 = 0;
      *(_DWORD *)(a4 + 12) = v14;
    }
  }
  return v9;
}

uint64_t utoin_ReplaceWord(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, char *a7)
{
  long long v81 = 0;
  v82[0] = 0;
  int v80 = 0;
  uint64_t v14 = 2370838535;
  long long v79 = 0u;
  memset(__b, 0, sizeof(__b));
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  *(void *)long long v65 = 0;
  cstdlib_memset(__b, 0, 0x40uLL);
  __b[0] = MarkerUDCTREF;
  __b[1] = unk_2206E3DB0;
  __b[2] = xmmword_2206E3DC0;
  long long v79 = unk_2206E3DD0;
  cstdlib_memset(&v74, 0, 0x40uLL);
  long long v74 = MarkerSetTypeOfInput;
  long long v75 = unk_2206E3DF0;
  long long v76 = xmmword_2206E3E00;
  long long v77 = unk_2206E3E10;
  cstdlib_memset(&v70, 0, 0x40uLL);
  long long v70 = MarkerSetLang;
  long long v71 = unk_2206E3E30;
  long long v72 = xmmword_2206E3E40;
  long long v73 = unk_2206E3E50;
  cstdlib_memset(&v66, 0, 0x40uLL);
  long long v66 = MarkerSetNLU;
  long long v67 = unk_2206E3E70;
  long long v68 = xmmword_2206E3E80;
  long long v69 = unk_2206E3E90;
  if (!a1 || !a2 || !a4) {
    return v14;
  }
  TNArgint Str = bed_GetpElem(a2, 0, v82);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  uint64_t v16 = *(unsigned int *)(v82[0] + 32);
  TNArgint Str = bed_GetpElem(a2, 0xFFFFu, &v81);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  if (a5 == 1 && v81[5] != 7) {
    return v14;
  }
  TNArgint Str = datac_RequestBlock(a6, 1012, 1u, v65);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  int v62 = a5;
  uint64_t v61 = v16;
  int v17 = v81[8];
  unsigned int v18 = a3;
  int v19 = *(_DWORD *)(v82[0] + 32);
  int v60 = v81[6];
  int v56 = v81[7];
  int v57 = v81[9];
  unsigned int v20 = v18;
  int v58 = *(unsigned __int16 *)(a4 + 8);
  TNArgint Str = bed_Remove(a1, v18, v58);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  int v59 = v17 - v19;
  if (*(_WORD *)(a4 + 24))
  {
    unsigned int v21 = v20;
    TNArgint Str = bed_Goto(a1, v20);
    int v22 = v62;
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    TNArgint Str = bed_Insert(a1, *(void **)(a4 + 16), *(unsigned __int16 *)(a4 + 24));
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    if (*(unsigned __int16 *)(a4 + 8) + v20 >= v81[9] + v59)
    {
      int v55 = v81[8];
      int v23 = 1;
    }
    else
    {
      int v23 = 0;
      int v55 = 0;
    }
    uint64_t v24 = v61;
  }
  else
  {
    int v23 = 0;
    int v55 = 0;
    unsigned int v21 = v20;
    uint64_t v24 = v61;
    int v22 = v62;
  }
  uint64_t v25 = (_DWORD **)v82;
  if (v22 == 1) {
    uint64_t v25 = &v81;
  }
  (*v25)[9] = (*v25)[9] + *(unsigned __int16 *)(a4 + 24) - *(unsigned __int16 *)(a4 + 8);
  TNArgint Str = bed_GetiElem(a2, &v80);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  int v63 = v21 - v59;
  if (a7)
  {
    DWORD1(v71) = 36;
    TNArgint Str = addOrGetTNArgStr(*(uint64_t *)v65, a7, (unsigned int *)&v72 + 2, a6);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    unsigned int v26 = v81[8];
    if (v26 - v24 < v21)
    {
      *((void *)&v71 + 1) = (v63 + v60);
      *(void *)&long long v72 = v24 + v21;
      TNArgint Str = bed_Goto(a2, 1u);
      if ((TNArgStr & 0x80000000) != 0) {
        return TNArgStr;
      }
      BOOL v27 = &v70;
      goto LABEL_30;
    }
    *((void *)&v71 + 1) = v81[6];
    *(void *)&long long v72 = v26;
    TNArgint Str = bed_Goto(a2, 1u);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    uint64_t v29 = &v70;
LABEL_37:
    TNArgint Str = bed_marker_InjectFixedRefMarker(a2, v29);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    TNArgint Str = bed_Goto(a2, (unsigned __int16)v80 + 1);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    LOWORD(v80) = v80 + 1;
    v81 += 16;
    goto LABEL_40;
  }
  strcpy(__s, "BND");
  DWORD1(v67) = 51;
  TNArgint Str = addOrGetTNArgStr(*(uint64_t *)v65, __s, (unsigned int *)&v68 + 2, a6);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  unsigned int v28 = v81[8];
  if (v28 - v24 >= v21)
  {
    *((void *)&v67 + 1) = v81[6];
    *(void *)&long long v68 = v28;
    TNArgint Str = bed_Goto(a2, 1u);
    if ((TNArgStr & 0x80000000) != 0) {
      return TNArgStr;
    }
    uint64_t v29 = &v66;
    goto LABEL_37;
  }
  *((void *)&v67 + 1) = (v63 + v60);
  *(void *)&long long v68 = v24 + v21;
  TNArgint Str = bed_Goto(a2, 1u);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  BOOL v27 = &v66;
LABEL_30:
  TNArgint Str = bed_marker_InjectFixedRefMarker(a2, v27);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  TNArgint Str = bed_Goto(a2, (unsigned __int16)v80);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
LABEL_40:
  TNArgint Str = bed_GetcElem(a2, (_WORD *)&v80 + 1);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  unsigned int v30 = HIWORD(v80);
  unsigned int v31 = v81 + 16;
  int v32 = (unsigned __int16)v80 + 1;
  if (HIWORD(v80) > (unsigned __int16)(v80 + 1))
  {
    unint64_t v33 = v24 + v21;
    do
    {
      unint64_t v34 = v31[8];
      if (v33 <= v34)
      {
        uint64_t v35 = *(unsigned __int16 *)(a4 + 8);
        int v36 = v24 + v21;
        if (v33 + v35 <= v34) {
          int v36 = v34 - v35 + *(unsigned __int16 *)(a4 + 24);
        }
        v31[8] = v36;
      }
      v31 += 16;
      ++v32;
    }
    while (v30 > (unsigned __int16)v32);
    LOWORD(v32) = v30;
  }
  long long v81 = v31;
  LOWORD(v80) = v32;
  if (!v22) {
    return 0;
  }
  TNArgint Str = bed_GetpElem(a2, 0xFFFFu, &v81);
  if ((TNArgStr & 0x80000000) != 0) {
    return TNArgStr;
  }
  unsigned int v37 = *(unsigned __int16 *)(a4 + 24);
  unsigned int v38 = v81;
  if (*(_WORD *)(a4 + 24))
  {
    unsigned int v39 = v81[10];
    int v40 = *(_DWORD *)(a4 + 12);
    if (v39 != v40)
    {
      unsigned int v41 = v81[8];
      if (v41 - v24 >= v21)
      {
        int v46 = *(unsigned __int16 *)(a4 + 8);
        v81[7] = v46;
        v38[9] = v37;
        v38[10] = v40;
        if (*(_DWORD *)(a4 + 12) == 16)
        {
          DWORD2(__b[1]) = v38[6];
          HIDWORD(__b[1]) = v46;
          *(void *)&__b[2] = __PAIR64__(v37, v41);
LABEL_64:
          DWORD2(__b[2]) = 16;
          TNArgint Str = bed_marker_InjectFixedRefMarker(a2, __b);
          if ((TNArgStr & 0x80000000) != 0) {
            return TNArgStr;
          }
        }
      }
      else
      {
        unsigned int v42 = v24 + v21;
        v81[9] = v42 - v41;
        TNArgint Str = bed_marker_MapPosCur(a2, v42, v38 + 7);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        v81[7] -= v81[6];
        int v43 = *(_DWORD *)(a4 + 12);
        int v44 = v58;
        if (v43 == 16) {
          int v44 = 0;
        }
        DWORD2(v75) = v63 + v60;
        HIDWORD(v75) = v44;
        *(void *)&long long v76 = __PAIR64__(*(unsigned __int16 *)(a4 + 24), v42);
        DWORD2(v76) = v43;
        TNArgint Str = bed_marker_InjectFixedRefMarker(a2, &v74);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        if (*(_DWORD *)(a4 + 12) == 16)
        {
          DWORD2(__b[1]) = v63 + v60;
          HIDWORD(__b[1]) = v58;
          *(void *)&__b[2] = __PAIR64__(*(unsigned __int16 *)(a4 + 24), v42);
          goto LABEL_64;
        }
      }
      unsigned int v47 = *(unsigned __int16 *)(a4 + 8) + v21;
      BOOL v48 = v59 + v57 >= v47;
      unsigned int v49 = v59 + v57 - v47;
      if (v49 == 0 || !v48)
      {
        int v50 = v61 + v21;
LABEL_68:
        if (v23) {
          int v51 = v55;
        }
        else {
          int v51 = v50 + *(unsigned __int16 *)(a4 + 24);
        }
        LOWORD(v80) = 0;
        TNArgint Str = bed_GetpElem(a2, 0, &v81);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        TNArgint Str = bed_GetcElem(a2, (_WORD *)&v80 + 1);
        if ((TNArgStr & 0x80000000) != 0) {
          return TNArgStr;
        }
        unsigned int v52 = (unsigned __int16)v80;
        if ((unsigned __int16)v80 < HIWORD(v80))
        {
          for (unsigned int i = v81 + 16; *(i - 11) != 7 || *(i - 6) != v39 || *(i - 8) != v51; i += 16)
          {
            uint64_t v14 = 0;
            long long v81 = i;
            LOWORD(v80) = ++v52;
            if (v52 >= HIWORD(v80)) {
              return v14;
            }
          }
          TNArgint Str = bed_Goto(a2, v52);
          if ((TNArgStr & 0x80000000) != 0) {
            return TNArgStr;
          }
        }
        return 0;
      }
      DWORD2(v75) = v63 + v58 + v60;
      HIDWORD(v75) = v56 - (v63 + v58);
      int v50 = v61 + v21;
      LODWORD(v76) = v50 + *(unsigned __int16 *)(a4 + 24);
      *(void *)((char *)&v76 + 4) = __PAIR64__(v39, v49);
      TNArgint Str = bed_marker_InjectFixedRefMarker(a2, &v74);
      if ((TNArgStr & 0x80000000) == 0) {
        goto LABEL_68;
      }
      return TNArgStr;
    }
  }
  else
  {
    unsigned int v39 = *(_DWORD *)(a4 + 12);
  }
  *(_OWORD *)((char *)&__b[1] + 8) = *(_OWORD *)(v81 + 6);
  DWORD2(__b[2]) = v39;
  int v45 = bed_marker_InjectFixedRefMarker(a2, __b);
  return v45 & (v45 >> 31);
}

uint64_t addOrGetTNArgStr(uint64_t a1, char *__s, unsigned int *a3, uint64_t a4)
{
  uint64_t v4 = 2370838535;
  uint64_t v18 = a1;
  if (a1)
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(const char **)(a1 + 8);
    if (v6)
    {
      unsigned int v10 = *(unsigned __int16 *)(a1 + 16);
      if (!*(_WORD *)(a1 + 16))
      {
LABEL_7:
        *a3 = v10;
        unsigned __int16 v14 = cstdlib_strlen(__s) + 1;
        unsigned int v15 = *(unsigned __int16 *)(v5 + 16);
        __int16 v16 = v15 + v14;
        if (*(unsigned __int16 *)(v5 + 18) >= (unsigned __int16)(v15 + v14))
        {
          uint64_t v4 = 0;
        }
        else
        {
          uint64_t v4 = datac_RequestBlock(a4, 1012, (unsigned __int16)(v15 + v14), &v18);
          if ((v4 & 0x80000000) != 0) {
            return v4;
          }
          uint64_t v5 = v18;
          unsigned int v15 = *(unsigned __int16 *)(v18 + 16);
        }
        cstdlib_memcpy((void *)(*(void *)(v5 + 8) + v15), __s, v14);
        *(_WORD *)(v18 + 16) = v16;
        return v4;
      }
      unsigned int v11 = 0;
      while (1)
      {
        int v12 = cstdlib_strlen(v6);
        if (!cstdlib_strcmp(__s, v6)) {
          break;
        }
        uint64_t v13 = (v12 + 1);
        v11 += v13;
        v6 += v13;
        unsigned int v10 = *(unsigned __int16 *)(v5 + 16);
        if (v11 >= v10) {
          goto LABEL_7;
        }
      }
      uint64_t v4 = 0;
      *a3 = v11;
    }
  }
  return v4;
}

uint64_t utoin_IncrReplaceCurrentRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t result = 2370838535;
  long long __src = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        int v34 = 0;
        unsigned __int16 v32 = 0;
        uint64_t result = bed_GetpElem(a2, 0, &v36);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v35);
          if ((result & 0x80000000) == 0)
          {
            int v10 = *(_DWORD *)(v35 + 32);
            int v11 = *(_DWORD *)(v36 + 32);
            int v12 = *(unsigned __int16 *)(v35 + 36);
            uint64_t result = bed_GetcElem(a3, (_WORD *)&v34 + 1);
            if ((result & 0x80000000) == 0)
            {
              unsigned __int16 v13 = v10 - v11;
              if (HIWORD(v34))
              {
                uint64_t result = bed_GetpElem(a3, 0, &__src);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = bed_Remove(a1, v13, v12);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = bed_Goto(a1, v13);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = bed_Insert(a1, __src, HIWORD(v34));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                int v14 = HIWORD(v34);
                uint64_t v15 = a3;
                unsigned int v16 = 0;
              }
              else
              {
                unsigned int v16 = v13;
                uint64_t v15 = a1;
                int v14 = v12;
              }
              uint64_t result = bed_Remove(v15, v16, v14);
              if ((result & 0x80000000) == 0)
              {
                uint64_t v17 = v35;
                *(_DWORD *)(v35 + 36) = HIWORD(v34);
                int v18 = *(_DWORD *)(v17 + 32);
                uint64_t result = bed_GetiElem(a2, &v32);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = bed_GetcElem(a2, &v34);
                  if ((result & 0x80000000) == 0)
                  {
                    unsigned int v19 = (unsigned __int16)v34;
                    uint64_t v20 = v35;
                    int v21 = v32 + 1;
                    unsigned __int16 v32 = v21;
                    if ((unsigned __int16)v34 > (unsigned __int16)v21)
                    {
                      uint64_t v22 = v36;
                      int v23 = HIWORD(v34);
                      while (1)
                      {
                        unsigned int v24 = *(_DWORD *)(v20 + 96);
                        int v25 = *(_DWORD *)(v22 + 32) + v13;
                        if (v24 >= v25 + v12) {
                          break;
                        }
                        if (a5 && *((_DWORD *)a5 + 4) == 1 && *((_WORD *)a5 + 4) && *((_DWORD *)a5 + 3) != 1)
                        {
                          uint64_t v27 = *a5;
                          uint64_t v28 = 12 * *((unsigned __int16 *)a5 + 4);
                          while (1)
                          {
                            int v29 = *(unsigned __int16 *)(v27 + v28 - 12);
                            if (v24 >= v18 + v29) {
                              break;
                            }
                            v28 -= 12;
                            if (!v28) {
                              goto LABEL_28;
                            }
                          }
                          int v30 = v24 - v29;
                          if (*(_DWORD *)(v20 + 84) != 99) {
                            int v30 = v18;
                          }
                          int v31 = v30 + *(unsigned __int16 *)(v27 + v28 - 4);
                          *(_DWORD *)(v20 + 96) = v31;
                          if (v31 == *(_DWORD *)(v22 + 32)) {
                            goto LABEL_28;
                          }
                          int v26 = v31 + 1;
                          goto LABEL_27;
                        }
                        *(_DWORD *)(v20 + 96) = v25;
                        if (v25 != *(_DWORD *)(v22 + 32))
                        {
                          int v26 = v25 + 1;
LABEL_27:
                          *(_DWORD *)(v20 + 96) = v26;
                        }
LABEL_28:
                        v20 += 64;
                        unsigned __int16 v32 = ++v21;
                        if (v19 <= (unsigned __int16)v21) {
                          return result;
                        }
                      }
                      int v26 = v24 - v12 + v23;
                      goto LABEL_27;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, __int16 a15, __int16 a16)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  __c_3 = 0;
  __int16 __c_1 = 0;
  unsigned __int8 __c = 0;
  strcpy(v65, "xlit23");
  uint64_t v70 = 0;
  strcpy(v71, "cpextensions");
  strcpy(__dst, "win936");
  __int16 v62 = -1;
  if (!a3) {
    return 2370838535;
  }
  int v69 = 0;
  unsigned __int8 v61 = 0;
  if ((InitRsrcFunction(a1, a2, &v70) & 0x80000000) != 0) {
    return 2370838535;
  }
  *a3 = 0;
  int v23 = (void *)heap_Alloc(*(void *)(v70 + 8), 184);
  if (!v23) {
    return 2370838538;
  }
  uint64_t v24 = (uint64_t)v23;
  cstdlib_memset(v23, 0, 0xB8uLL);
  *(void *)uint64_t v24 = a1;
  *(void *)(v24 + 8) = a2;
  uint64_t v29 = v70;
  *(void *)(v24 + 16) = v70;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = a7;
  *(void *)(v24 + 40) = a9;
  *(void *)(v24 + 48) = a10;
  *(_WORD *)(v24 + 56) = 0;
  *(_DWORD *)(v24 + 60) = 0;
  *(_DWORD *)(v24 + 72) = 0;
  *(_DWORD *)(v24 + 164) = 0;
  *(_DWORD *)(v24 + 144) = 0;
  *(void *)(v24 + 136) = 0;
  *(void *)(v24 + 148) = 0x100000001;
  *(void *)(v24 + 80) = a4;
  *(void *)(v24 + 88) = a5;
  *(void *)(v24 + 96) = a6;
  *(void *)(v24 + 104) = a11;
  *(void *)(v24 + 112) = a12;
  *(void *)(v24 + 120) = a13;
  *(_WORD *)(v24 + 128) = a14;
  *(_WORD *)(v24 + 130) = a15;
  *(_WORD *)(v24 + 132) = a16;
  *(_DWORD *)(v24 + 172) = 0;
  *(_DWORD *)(v24 + 176) = 0;
  *(_DWORD *)(v24 + 168) = 0;
  if (a11)
  {
    __int16 __c_1 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(a9, a10, "fecfg", "transcoder", &__c_3, &__c_1, &__c) & 0x80000000) == 0&& __c_1)
    {
      if (__c_1 == 1 && __c_3)
      {
        int v30 = cstdlib_strchr(*__c_3, __c);
        if (v30) {
          *int v30 = 0;
        }
        cstdlib_strcpy(__dst, *__c_3);
      }
      __int16 __c_1 = 0;
      uint64_t v35 = 2370838528;
      if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(void *)(v24 + 40), *(void *)(v24 + 48), "fecfg", "translitdef", &__c_3, &__c_1, &__c) & 0x80000000) != 0|| !__c_1)
      {
        uint64_t v43 = *(void *)(v70 + 32);
        uint64_t v44 = 1803;
        goto LABEL_38;
      }
      if (__c_1 == 1 && __c_3)
      {
        uint64_t v36 = cstdlib_strchr(*__c_3, __c);
        if (v36) {
          char *v36 = 0;
        }
        cstdlib_strcpy(v65, *__c_3);
      }
      __int16 __c_1 = -1;
      fecfg_fewordseg_paraunsigned int m = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(void *)(v24 + 40), *(void *)(v24 + 48), "fecfg", "backtrans", &__c_3, &__c_1, &__c);
      if ((fecfg_fewordseg_param & 0x80000000) == 0)
      {
        *(_DWORD *)(v24 + 64) = __c_1 != 0;
        fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v24, (_DWORD *)(v24 + 164), (uint64_t)"fewordseg_wpcrf");
        if ((fecfg_fewordseg_param & 0x80000000) == 0)
        {
          fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v24, (_DWORD *)(v24 + 164), (uint64_t)"fewordseg_bypasshexcode");
          if ((fecfg_fewordseg_param & 0x80000000) == 0)
          {
            fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v24, (_DWORD *)(v24 + 172), (uint64_t)"fewordseg_skipCollapseIdenticalRegion");
            if ((fecfg_fewordseg_param & 0x80000000) == 0)
            {
              fecfg_fewordseg_paraunsigned int m = read_fecfg_fewordseg_param(a7, v24, (_DWORD *)(v24 + 176), (uint64_t)"fewordseg_extra_split_marker");
              if ((fecfg_fewordseg_param & 0x80000000) == 0)
              {
                if (!*(_DWORD *)(v24 + 64))
                {
                  cstdlib_memset(__b, 0, 7uLL);
                  cstdlib_strcpy(__b, "word");
                  uint64_t v45 = (*(uint64_t (**)(void, void, char *, int *))(a7 + 72))(*(void *)(v24 + 40), *(void *)(v24 + 48), __b, &v69);
                  if ((v45 & 0x80000000) != 0)
                  {
                    uint64_t v51 = v45;
                    heap_Free(*(void **)(v70 + 8), v24);
                    return v51;
                  }
                  if (v69)
                  {
                    unsigned __int16 v39 = 1;
                  }
                  else
                  {
                    cstdlib_memset(__b, 0, 7uLL);
                    unsigned __int16 v39 = 0;
                    for (char i = 1; ; char i = 0)
                    {
                      cstdlib_strcpy(__b, "word");
                      unsigned int v53 = LH_itoa(v39, v60, 0xAu);
                      cstdlib_strcat(__b, v53);
                      uint64_t v54 = (*(uint64_t (**)(void, void, char *, int *))(a7 + 72))(*(void *)(v24 + 40), *(void *)(v24 + 48), __b, &v69);
                      if ((v54 & 0x80000000) != 0)
                      {
                        uint64_t v55 = v54;
                        heap_Free(*(void **)(v70 + 8), v24);
                        return v55;
                      }
                      if (!v69) {
                        break;
                      }
                      ++v39;
                    }
                    if (i)
                    {
                      heap_Free(*(void **)(v70 + 8), v24);
                      log_OutPublic(*(void *)(v70 + 32), (uint64_t)&modPP_3, 1809, 0, v56, v57, v58, v59, a3);
                      return 2370838794;
                    }
                  }
                  goto LABEL_45;
                }
                __int16 v62 = -1;
                fecfg_fewordseg_paraunsigned int m = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(void *)(v24 + 40), *(void *)(v24 + 48), "fecfg", "nrpart_g2p", &__c_3, &v62, &v61);
                if ((fecfg_fewordseg_param & 0x80000000) == 0)
                {
                  if (v62)
                  {
                    unsigned int v38 = cstdlib_strchr(*__c_3, v61);
                    if (v38) {
                      char *v38 = 0;
                    }
                    unsigned __int16 v39 = cstdlib_atoi((unsigned __int8 *)*__c_3);
                  }
                  else
                  {
                    unsigned __int16 v39 = 0;
                  }
LABEL_45:
                  *(_WORD *)(v24 + 56) = v39;
                  *(_DWORD *)(v24 + 60) = 0;
                  __int16 v62 = -1;
                  (*(void (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(void *)(v24 + 40), *(void *)(v24 + 48), "fecfg", "versioninfo", &__c_3, &v62, &v61);
                  if (v62)
                  {
                    int v46 = cstdlib_strchr(*__c_3, v61);
                    if (v46) {
                      char *v46 = 0;
                    }
                    *(_DWORD *)(v24 + 60) = hasCharDic((unsigned __int8 *)*__c_3);
                  }
                  __int16 v62 = -1;
                  (*(void (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(*(void *)(v24 + 40), *(void *)(v24 + 48), "fecfg", "useppdomains", &__c_3, &v62, &v61);
                  if (v62)
                  {
                    unsigned int v47 = cstdlib_strchr(*__c_3, v61);
                    if (v47) {
                      *unsigned int v47 = 0;
                    }
                    BOOL v48 = cstdlib_strcmp(*__c_3, "1") == 0;
                  }
                  else
                  {
                    BOOL v48 = 0;
                  }
                  uint64_t v49 = (*(uint64_t (**)(void, void, char *, int *))(a7 + 72))(*(void *)(v24 + 40), *(void *)(v24 + 48), v71, &v69);
                  if ((v49 & 0x80000000) != 0)
                  {
                    uint64_t v35 = v49;
                    goto LABEL_39;
                  }
                  if (!v69) {
                    v71[0] = 0;
                  }
                  uint64_t v50 = (*(uint64_t (**)(void, void, uint64_t, char *, char *, BOOL, char *))(*(void *)(v24 + 104) + 56))(*(void *)(v24 + 112), *(void *)(v24 + 120), v24 + 32, v65, __dst, v48, v71);
                  if ((v50 & 0x80000000) == 0)
                  {
                    uint64_t v35 = 0;
                    *a3 = v24;
                    return v35;
                  }
                  uint64_t v35 = v50;
                  uint64_t v43 = *(void *)(v70 + 32);
                  uint64_t v44 = 1807;
LABEL_38:
                  log_OutPublic(v43, (uint64_t)&modPP_3, v44, 0, v31, v32, v33, v34, a3);
LABEL_39:
                  heap_Free(*(void **)(v70 + 8), v24);
                  return v35;
                }
              }
            }
          }
        }
      }
      return fecfg_fewordseg_param;
    }
    uint64_t v40 = *(void *)(v70 + 32);
    uint64_t v41 = 1801;
  }
  else
  {
    uint64_t v40 = *(void *)(v29 + 32);
    uint64_t v41 = 1806;
  }
  log_OutPublic(v40, (uint64_t)&modPP_3, v41, 0, v25, v26, v27, v28, a3);
  heap_Free(*(void **)(v70 + 8), v24);
  return 2370838528;
}

uint64_t read_fecfg_fewordseg_param(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  memset(__c, 0, sizeof(__c));
  __int16 v9 = -1;
  uint64_t v5 = (*(uint64_t (**)(void, void, const char *, uint64_t, unsigned char *, __int16 *, unsigned char *))(a1 + 96))(*(void *)(a2 + 40), *(void *)(a2 + 48), "fecfg", a4, &__c[1], &v9, __c);
  if ((v5 & 0x80000000) == 0 && v9 == 1 && *(void *)&__c[1] != 0)
  {
    uint64_t v7 = cstdlib_strchr(**(char ***)&__c[1], __c[0]);
    if (v7) {
      *uint64_t v7 = 0;
    }
    if (!cstdlib_strcmp(**(const char ***)&__c[1], "yes")) {
      *a3 = 1;
    }
  }
  return v5;
}

BOOL hasCharDic(unsigned __int8 *a1)
{
  unsigned __int16 v8 = 0;
  __int16 v9 = a1;
  int v1 = cstdlib_strtol(a1, &v8, 0xAu);
  BOOL v2 = v1 < 1 || v8 == 0;
  if (v2 || *v8 != 46) {
    return 0;
  }
  unsigned int v3 = cstdlib_strtol(v8 + 1, &v9, 0xAu);
  BOOL result = 0;
  if ((v3 & 0x80000000) != 0 || !v9) {
    return result;
  }
  if (*v9 != 46) {
    return 0;
  }
  int v5 = cstdlib_strtol(v9 + 1, &v8, 0xAu);
  BOOL result = 0;
  if (v5 < 0 || !v8) {
    return result;
  }
  if (*v8 != 46 && *v8) {
    return 0;
  }
  return v1 > 4 && v3 > 1 && v5 != 0;
}

uint64_t utoin_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v6 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v6) & 0x80000000) == 0)
  {
    uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 104) + 88))(*(void *)(a1 + 112), *(void *)(a1 + 120));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 136);
      if (v4)
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v4);
        *(void *)(a1 + 136) = 0;
        *(_WORD *)(a1 + 146) = 0;
      }
      heap_Free(*(void **)(v6 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t utoin_ProcessStart(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  int v6 = 0;
  if (a1)
  {
    *(_DWORD *)(a1 + 72) = log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32)) > 4;
    uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 104) + 96))(*(void *)(a1 + 112), *(void *)(a1 + 120));
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
    if ((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"asianasciispaceudctlookup", &v6) & 0x80000000) == 0
      && v6 == 1)
    {
      *(_DWORD *)(a1 + 168) = 1;
    }
    uint64_t v3 = paramc_ParamGet(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", (void *)(a1 + 24), 0);
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      *(_WORD *)(a1 + 160) = 2;
      if (!cstdlib_strcmp(*(const char **)(a1 + 24), "tht")) {
        *(_WORD *)(a1 + 160) = 2;
      }
      if (*(_WORD *)(a1 + 146))
      {
        return 0;
      }
      else
      {
        uint64_t v5 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 120);
        *(void *)(a1 + 136) = v5;
        if (v5)
        {
          uint64_t v1 = 0;
          *(_WORD *)(a1 + 146) = 10;
        }
        else
        {
          return 2370838538;
        }
      }
    }
  }
  return v1;
}

uint64_t utoin_ProcessEnd(uint64_t a1)
{
  if (!a1) {
    return 2370838535;
  }
  uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 104) + 104))(*(void *)(a1 + 112), *(void *)(a1 + 120));
  if ((v2 & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 24)) {
      paramc_ParamRelease(*(void *)(*(void *)(a1 + 16) + 40));
    }
    uint64_t v3 = *(void *)(a1 + 136);
    if (v3)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v3);
      *(void *)(a1 + 136) = 0;
      *(_WORD *)(a1 + 146) = 0;
    }
  }
  return v2;
}

uint64_t utoin_NormalizeRegions(_WORD **a1, uint64_t a2, unsigned __int16 *a3)
{
  v103[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = 2370838535;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  if (!a1 || !a2) {
    return 2370838535;
  }
  uint64_t v7 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v95, 213);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  uint64_t v7 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v94, 213);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_RemoveNativeBlanks");
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v10 = v94;
  uint64_t v9 = v95;
  v103[0] = 2;
  long long v101 = xmmword_2206E3EE4;
  uint64_t v102 = 8;
  if (!v95 || !v94) {
    goto LABEL_127;
  }
  uint64_t v7 = bed_Goto(v95, 0);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  uint64_t v7 = bed_Goto(v10, 0);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  LOWORD(v100) = 0;
  LOWORD(v96) = 0;
  uint64_t v11 = bed_GoForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
  uint64_t v12 = v11;
  if ((v11 & 0x80000000) != 0 && (v11 & 0x1FFF) != 0x14) {
    goto LABEL_177;
  }
  while ((v12 & 0x80000000) == 0)
  {
    uint64_t Backward = bed_FindBackward(v10, (unsigned int (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v100);
    if ((Backward & 0x1FFF) == 0x14)
    {
      LOWORD(v100) = -1;
    }
    else
    {
      uint64_t v12 = Backward;
      if ((Backward & 0x80000000) != 0) {
        goto LABEL_177;
      }
    }
    uint64_t Forward = bed_FindForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v96);
    if ((Forward & 0x1FFF) == 0x14)
    {
      uint64_t v7 = bed_GetcElem(v10, &v96);
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_176;
      }
    }
    else
    {
      uint64_t v12 = Forward;
      if ((Forward & 0x80000000) != 0) {
        goto LABEL_177;
      }
    }
    if ((unsigned __int16)v100 != 0xFFFF)
    {
      uint64_t v7 = bed_Goto(v10, (unsigned __int16)v100);
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_176;
      }
    }
    uint64_t v7 = utoin_RemoveBlankRegions(v8, v10, (unsigned __int16)v96, v9);
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_176;
    }
    uint64_t v15 = bed_GoForward(v10, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
    uint64_t v12 = v15;
    if ((v15 & 0x80000000) != 0 && (v15 & 0x1FFF) != 0x14) {
      goto LABEL_177;
    }
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_MergeRegions");
  uint64_t v87 = a1[2];
  uint64_t v16 = v94;
  *(void *)&long long v101 = 0;
  if (v95) {
    BOOL v17 = v94 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    goto LABEL_171;
  }
  LOWORD(v103[0]) = 0;
  uint64_t v18 = bed_GetpElem(v94, 0, &v101);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_170;
  }
  uint64_t v18 = bed_GetcElem(v16, v103);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_170;
  }
  unsigned int v21 = *a3;
  if (*a3)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    while (1)
    {
      unint64_t v24 = *((void *)a3 + 1) + (v22 << 6);
      int v25 = *(_DWORD *)v24;
      int v26 = *(_DWORD *)(v24 + 4);
      uint64_t v27 = *(unsigned __int16 *)(v24 + 8);
      uint64_t v28 = *(int **)(v24 + 16);
      uint64_t v29 = *(unsigned __int16 *)(v24 + 24);
      int v30 = *(_DWORD **)(v24 + 32);
      uint64_t v31 = *(unsigned __int16 *)(v24 + 40);
      uint64_t v32 = *(int **)(v24 + 48);
      uint64_t v33 = *(unsigned int *)(v24 + 56);
      if (v33 == 1) {
        break;
      }
      if (LOWORD(v103[0]) < 2u) {
        goto LABEL_46;
      }
      unsigned int v37 = (_DWORD *)(v101 + 104);
      uint64_t v35 = 1;
      do
      {
        if (*(v37 - 5) == 7 && *v37 == v25) {
          goto LABEL_47;
        }
        ++v35;
        v37 += 16;
      }
      while (LOWORD(v103[0]) != v35);
LABEL_98:
      uint64_t v23 = ++v22;
      if (v22 >= v21) {
        goto LABEL_99;
      }
    }
    if (LOWORD(v103[0]) < 2u)
    {
LABEL_46:
      LODWORD(v38) = 1;
    }
    else
    {
      uint64_t v34 = (int *)(v101 + 84);
      uint64_t v35 = 1;
      while (1)
      {
        int v36 = *v34;
        v34 += 16;
        if (v36 == 7) {
          break;
        }
        if (LOWORD(v103[0]) == ++v35) {
          goto LABEL_98;
        }
      }
LABEL_47:
      LODWORD(v38) = v35;
    }
    if (LOWORD(v103[0]) <= (unsigned __int16)v38) {
      goto LABEL_98;
    }
    uint64_t v85 = v32;
    unint64_t v86 = v22;
    int v39 = 0;
    unsigned __int16 v40 = 0;
    unsigned __int16 v41 = v103[0];
    int v93 = v25;
    uint64_t v92 = v23;
    int v91 = v26;
    unint64_t v89 = v30;
    uint64_t v90 = v29;
    unsigned int v88 = v33;
    while (1)
    {
      if (v27)
      {
        unsigned int v42 = 0;
        do
        {
          unsigned __int16 v40 = v38;
          if ((unsigned __int16)(v38 - 1) > (unsigned __int16)v39)
          {
            uint64_t v43 = (unsigned __int16)(v38 - 1);
            unsigned __int16 v40 = v38;
            do
            {
              uint64_t v44 = v101 + (v43 << 6);
              if (*(_DWORD *)(v44 + 20) == 7)
              {
                int v45 = *(_DWORD *)(v44 + 40);
                int v46 = v28;
                uint64_t v47 = v27;
                while (1)
                {
                  int v48 = *v46++;
                  if (v48 == v45) {
                    break;
                  }
                  if (!--v47) {
                    goto LABEL_61;
                  }
                }
                unsigned __int16 v40 = v43;
              }
              --v43;
            }
            while ((unsigned __int16)v39 < (unsigned __int16)v43);
          }
LABEL_61:
          ++v42;
        }
        while (v42 < v27);
      }
      if (v29)
      {
        if ((unsigned __int16)(v38 + 1) < v41)
        {
          uint64_t v49 = (unsigned __int16)(v38 + 1);
          int v39 = v38;
          do
          {
            uint64_t v50 = v101 + (v49 << 6);
            if (*(_DWORD *)(v50 + 20) == 7)
            {
              int v51 = *(_DWORD *)(v50 + 40);
              unsigned int v52 = v30;
              uint64_t v53 = v29;
              while (1)
              {
                int v54 = *v52++;
                if (v54 == v51) {
                  break;
                }
                if (!--v53) {
                  goto LABEL_80;
                }
              }
              int v39 = v49;
            }
            ++v49;
          }
          while (v41 != (unsigned __int16)v49);
          goto LABEL_80;
        }
      }
      else
      {
        if (!v31) {
          goto LABEL_80;
        }
        int v39 = v38 + 1;
        if ((unsigned __int16)(v38 + 1) < v41)
        {
          uint64_t v55 = v101 + ((unint64_t)(unsigned __int16)(v38 + 1) << 6);
          if (*(_DWORD *)(v55 + 20) != 7)
          {
            while (1)
              ;
          }
          int v56 = *(_DWORD *)(v55 + 40);
          uint64_t v57 = v85;
          uint64_t v58 = v31;
          do
          {
            int v59 = *v57++;
            if (v59 == v56) {
              goto LABEL_80;
            }
          }
          while (--v58);
        }
      }
      int v39 = v38;
LABEL_80:
      if (v40 != (unsigned __int16)v39)
      {
        log_OutText(*((void *)v87 + 4), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (applying mergeRule %d between markers %u and %u)", v19, v33, v20, v23);
        uint64_t v33 = v88;
        int v30 = v89;
        uint64_t v29 = v90;
        int v26 = v91;
        int v25 = v93;
        uint64_t v23 = v92;
      }
      if (v40 < (unsigned __int16)v39)
      {
        unsigned __int16 v60 = v40;
        do
        {
          if (*(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 20) == 7
            && (v26 == 3 || *(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 40) != 1))
          {
            *(_DWORD *)(v101 + ((unint64_t)v60 << 6) + 40) = v26;
          }
          ++v60;
        }
        while (v60 <= (unsigned __int16)v39);
      }
      if (v33 != 1)
      {
        unsigned __int16 v41 = v103[0];
        LODWORD(v38) = v39 + 1;
        if (LOWORD(v103[0]) > (unsigned __int16)(v39 + 1))
        {
          uint64_t v38 = (unsigned __int16)(v39 + 1);
          unsigned __int8 v61 = (_DWORD *)(v101 + (v38 << 6) + 40);
          while (*(v61 - 5) != 7 || *v61 != v25)
          {
            ++v38;
            v61 += 16;
            if (LOWORD(v103[0]) == v38) {
              goto LABEL_97;
            }
          }
        }
        if (LOWORD(v103[0]) > (unsigned __int16)v38) {
          continue;
        }
      }
LABEL_97:
      unsigned int v21 = *a3;
      unint64_t v22 = v86;
      goto LABEL_98;
    }
  }
LABEL_99:
  if (*((_DWORD *)a1 + 43) != 1)
  {
    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_CollapseIdenticalRegions");
    uint64_t v7 = utoin_CollapseIdenticalRegions((uint64_t)a1, v95, v94);
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_176;
    }
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_LookUpWords");
  uint64_t v63 = v94;
  uint64_t v62 = v95;
  *(void *)&long long v101 = 7;
  v103[0] = 0;
  uint64_t v100 = 0;
  int v98 = 0;
  if (!v95 || !v94)
  {
LABEL_127:
    uint64_t v12 = 2370838535;
    goto LABEL_177;
  }
  uint64_t v64 = a1[10];
  if (!v64) {
    goto LABEL_137;
  }
  long long v65 = a1[2];
  __int16 v99 = 0;
  uint64_t v7 = (*((uint64_t (**)(_WORD *, _WORD *, int *))v64 + 15))(a1[11], a1[12], &v98);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_176;
  }
  if (!v98) {
    goto LABEL_137;
  }
  if (log_HasTraceTuningDataSubscriber(*((void *)v65 + 4)))
  {
    unsigned __int16 v97 = 0;
    uint64_t v96 = 0;
    bed_GetpElem(v62, 0, &v96);
    uint64_t v7 = bed_GetcElem(v62, &v97);
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_176;
    }
    log_OutTraceTuningDataBinary(*((void *)v65 + 4), 105, (uint64_t)"", (uint64_t)"text/plain;charset=utf-16",
      v96,
      v97);
  }
  uint64_t v66 = bed_GetcElem(v62, &v99);
  if ((v66 & 0x80000000) == 0)
  {
    uint64_t v67 = datac_RequestBlock(a2, 1029, (unsigned __int16)(v99 + 1), &v100);
    if ((v67 & 0x80000000) != 0)
    {
      uint64_t v12 = v67;
      if ((v67 & 0x1FFF) == 0x14)
      {
LABEL_137:
        uint64_t v72 = (uint64_t)a1[2];
        uint64_t v74 = v94;
        uint64_t v73 = v95;
        if (*((_DWORD *)a1 + 43) == 1) {
          goto LABEL_140;
        }
        UTOITrace(*((_DWORD *)a1 + 18), v72, v95, v94, (uint64_t)"BEFORE utoin_CollapseIdenticalRegions (second)");
        uint64_t v7 = utoin_CollapseIdenticalRegions((uint64_t)a1, v95, v94);
        if ((v7 & 0x80000000) == 0)
        {
          uint64_t v72 = (uint64_t)a1[2];
          uint64_t v74 = v94;
          uint64_t v73 = v95;
LABEL_140:
          UTOITrace(*((_DWORD *)a1 + 18), v72, v73, v74, (uint64_t)"BEFORE utoin_RemoveBlanksAtRegionBoundary");
          uint64_t v75 = (uint64_t)a1[2];
          uint64_t v77 = v94;
          uint64_t v76 = v95;
          v103[0] = 1;
          long long v101 = xmmword_2206E3F84;
          LODWORD(v102) = 0;
          uint64_t v100 = 0;
          if (!v95 || !v94) {
            goto LABEL_171;
          }
          uint64_t v18 = bed_Goto(v95, 0);
          if ((v18 & 0x80000000) == 0)
          {
            uint64_t v18 = bed_Goto(v77, 0);
            if ((v18 & 0x80000000) == 0)
            {
              LOWORD(v96) = 0;
              LOWORD(v98) = 0;
              uint64_t v78 = bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
              uint64_t v3 = v78;
              if ((v78 & 0x80000000) == 0 || (v78 & 0x1FFF) == 0x14)
              {
                while ((v3 & 0x80000000) == 0)
                {
                  uint64_t v79 = bed_FindBackward(v77, (unsigned int (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v96);
                  if ((v79 & 0x1FFF) == 0x14)
                  {
                    LOWORD(v96) = -1;
                  }
                  else
                  {
                    uint64_t v3 = v79;
                    if ((v79 & 0x80000000) != 0) {
                      goto LABEL_171;
                    }
                  }
                  uint64_t v80 = bed_FindForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiNotOfType, (uint64_t)&v101, &v98);
                  if ((v80 & 0x1FFF) == 0x14)
                  {
                    LOWORD(v98) = -1;
                  }
                  else
                  {
                    uint64_t v3 = v80;
                    if ((v80 & 0x80000000) != 0) {
                      goto LABEL_171;
                    }
                  }
                  if ((unsigned __int16)v96 == 0xFFFF)
                  {
                    int v81 = 0;
                  }
                  else
                  {
                    uint64_t v18 = bed_GetpElem(v77, (unsigned __int16)v96, &v100);
                    if ((v18 & 0x80000000) != 0) {
                      goto LABEL_170;
                    }
                    int v81 = *(_DWORD *)(v100 + 40);
                  }
                  if ((unsigned __int16)v98 == 0xFFFF) {
                    goto LABEL_164;
                  }
                  uint64_t v18 = bed_GetpElem(v77, (unsigned __int16)v98, &v100);
                  if ((v18 & 0x80000000) != 0) {
                    goto LABEL_170;
                  }
                  if (!v81 || (int v82 = *(_DWORD *)(v100 + 40)) == 0 || v81 == v82 || v82 == 14 || v82 == 44)
                  {
LABEL_164:
                    LOWORD(v96) = 1;
                    bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v96);
                  }
                  else
                  {
                    uint64_t v18 = bed_Goto(v77, (unsigned __int16)v96);
                    if ((v18 & 0x80000000) != 0) {
                      goto LABEL_170;
                    }
                    uint64_t v18 = utoin_RemoveBlankRegions(v75, v77, (unsigned __int16)v98, v76);
                    if ((v18 & 0x80000000) != 0) {
                      goto LABEL_170;
                    }
                  }
                  uint64_t v83 = bed_GoForward(v77, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v103);
                  uint64_t v3 = v83;
                  if ((v83 & 0x80000000) != 0 && (v83 & 0x1FFF) != 0x14) {
                    goto LABEL_171;
                  }
                }
                UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_MarkSingleLatinForSpell");
                uint64_t v7 = utoin_MarkSingleLatinForSpell(v94, v95, a2);
                if ((v7 & 0x80000000) == 0)
                {
                  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_SplitRegionOnWordSeparatingMarkers");
                  uint64_t v7 = utoin_SplitRegionOnWordSeparatingMarkers(v94, *((_DWORD *)a1 + 44));
                  if ((v7 & 0x80000000) == 0)
                  {
                    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"BEFORE utoin_Normalize");
                    uint64_t v12 = utoin_Normalize((uint64_t)a1, v95, v94, a2);
                    if ((v12 & 0x80000000) == 0) {
                      UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v95, v94, (uint64_t)"END utoin_NormalizeRegions()");
                    }
                    goto LABEL_177;
                  }
                }
                goto LABEL_176;
              }
              goto LABEL_171;
            }
          }
LABEL_170:
          uint64_t v3 = v18;
LABEL_171:
          uint64_t v12 = v3;
          goto LABEL_177;
        }
LABEL_176:
        uint64_t v12 = v7;
        goto LABEL_177;
      }
      goto LABEL_177;
    }
    uint64_t v66 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1029, v103, 213);
    if ((v66 & 0x80000000) == 0)
    {
      uint64_t v66 = bed_Goto(v62, 0);
      if ((v66 & 0x80000000) == 0)
      {
        uint64_t v66 = bed_Goto(v63, 0);
        if ((v66 & 0x80000000) == 0)
        {
          uint64_t v68 = bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v101);
          uint64_t v12 = v68;
          int v69 = v68 & 0x1FFF;
          if ((v68 & 0x80000000) != 0 && v69 != 20) {
            goto LABEL_129;
          }
          if ((v68 & 0x80000000) != 0)
          {
LABEL_123:
            if (v69 == 20) {
              uint64_t v12 = 0;
            }
            else {
              uint64_t v12 = v12;
            }
            goto LABEL_129;
          }
          while (1)
          {
            uint64_t v96 = 0;
            unsigned __int16 v97 = 0;
            uint64_t v66 = bed_GetpElem(v63, 0xFFFFu, &v96);
            if ((v66 & 0x80000000) != 0) {
              break;
            }
            unsigned int v70 = *(_DWORD *)(v96 + 40) - 2;
            if (v70 <= 4)
            {
              uint64_t v66 = ((uint64_t (*)(_WORD **, uint64_t, uint64_t, uint64_t, uint64_t))off_26D2130F8[v70])(a1, v62, v63, v103[0], a2);
              if ((v66 & 0x80000000) != 0) {
                break;
              }
            }
            unsigned __int16 v97 = 1;
            bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v97);
            uint64_t v71 = bed_GoForward(v63, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v101);
            uint64_t v12 = v71;
            int v69 = v71 & 0x1FFF;
            if ((v71 & 0x80000000) != 0 && v69 != 20) {
              goto LABEL_129;
            }
            if ((v71 & 0x80000000) != 0) {
              goto LABEL_123;
            }
          }
        }
      }
    }
  }
  uint64_t v12 = v66;
LABEL_129:
  if (!log_HasTraceTuningDataSubscriber(*((void *)v65 + 4))) {
    goto LABEL_132;
  }
  unsigned __int16 v97 = 0;
  uint64_t v96 = 0;
  bed_GetpElem(v62, 0, &v96);
  uint64_t v12 = bed_GetcElem(v62, &v97);
  if ((v12 & 0x80000000) == 0)
  {
    log_OutTraceTuningDataBinary(*((void *)v65 + 4), 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-16",
      v96,
      v97);
LABEL_132:
    if (v103[0]) {
      bed_ObjClose(v103[0]);
    }
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_177;
    }
    goto LABEL_137;
  }
LABEL_177:
  if (v94) {
    bed_ObjClose(v94);
  }
  if (v95) {
    bed_ObjClose(v95);
  }
  return v12;
}

uint64_t utoin_CollapseIdenticalRegions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = 0;
  unsigned __int16 v84 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long __b = 0u;
  long long v81 = 0u;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerIntWord;
  long long v81 = unk_2206E3F10;
  long long v82 = xmmword_2206E3F20;
  long long v83 = unk_2206E3F30;
  uint64_t result = 2370838535;
  if (a2)
  {
    if (a3)
    {
      uint64_t result = bed_GetpElem(a3, 0, &v85);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = bed_GetcElem(a3, &v84);
        if ((result & 0x80000000) == 0)
        {
          int v7 = v84;
          if (v84)
          {
            int v8 = 0;
            uint64_t v9 = 0;
            uint64_t v10 = 0;
            uint64_t v74 = a3;
            while (1)
            {
              uint64_t v11 = v85;
              if ((unsigned __int16)v7 <= (unsigned __int16)(v9 + 1)) {
                uint64_t v12 = (unsigned __int16)(v9 + 1);
              }
              else {
                uint64_t v12 = (unsigned __int16)v7;
              }
              while (1)
              {
                uint64_t v13 = v85 + ((unint64_t)(unsigned __int16)v9 << 6);
                if (*(_DWORD *)(v13 + 20) == 7) {
                  break;
                }
                uint64_t v9 = (v9 + 1);
                if ((unsigned __int16)v9 >= (unsigned __int16)v7)
                {
                  uint64_t v9 = v12;
                  goto LABEL_14;
                }
              }
              int v8 = *(_DWORD *)(v13 + 40);
              uint64_t v10 = v9;
LABEL_14:
              uint64_t v79 = (unsigned __int16)v10;
              uint64_t v14 = v85 + ((unint64_t)(unsigned __int16)v10 << 6);
              if (*(_DWORD *)(v14 + 20) == 7
                && *(_DWORD *)(v14 + 40) == 43
                && *(_DWORD *)(v85 + ((unint64_t)(unsigned __int16)v10 << 6) + 56))
              {
                uint64_t v9 = (v9 + 1);
                goto LABEL_108;
              }
              uint64_t v15 = v9;
              if ((unsigned __int16)v9 < (unsigned __int16)v7)
              {
                uint64_t v16 = (unsigned __int16)v9;
                unint64_t v17 = v85 + ((unint64_t)(unsigned __int16)v9 << 6) + 20;
                uint64_t v18 = (int *)v17;
                while (1)
                {
                  int v19 = *v18;
                  v18 += 16;
                  if (v19 != 7 || v8 != *(_DWORD *)(v17 + 20)) {
                    break;
                  }
                  ++v16;
                  unint64_t v17 = (unint64_t)v18;
                  if ((unsigned __int16)v7 == v16)
                  {
                    LODWORD(v16) = v7;
                    break;
                  }
                }
                uint64_t v15 = v9;
                if ((unsigned __int16)v16 != (unsigned __int16)v9)
                {
                  uint64_t v20 = (v16 - 1);
                  uint64_t v15 = v20;
                  if ((unsigned __int16)v20 > (unsigned __int16)v9)
                  {
                    uint64_t v21 = v10;
                    uint64_t v22 = (unsigned __int16)v20;
                    unint64_t v23 = v85 + ((unint64_t)(unsigned __int16)v20 << 6) + 20;
                    unint64_t v24 = (int *)v23;
                    while (1)
                    {
                      int v25 = *v24;
                      v24 -= 16;
                      if (v25 == 7 && v8 == *(_DWORD *)(v23 + 20)) {
                        break;
                      }
                      --v22;
                      unint64_t v23 = (unint64_t)v24;
                      if ((unsigned __int16)v9 >= (unsigned __int16)v22)
                      {
                        uint64_t v15 = v9;
                        goto LABEL_32;
                      }
                    }
                    uint64_t v15 = v22;
LABEL_32:
                    uint64_t v10 = v21;
                  }
                }
              }
              if (v8 == 43)
              {
                uint64_t v26 = v85 + ((unint64_t)(unsigned __int16)v15 << 6);
                if (*(_DWORD *)(v26 + 20) == 7 && *(_DWORD *)(v26 + 40) == 43 && *(_DWORD *)(a1 + 168) == 1)
                {
                  uint64_t v9 = (v9 + 1);
                  int v8 = 43;
                  goto LABEL_108;
                }
              }
              if ((unsigned __int16)v15 == (unsigned __int16)v9
                || (unsigned __int16)v15 >= (unsigned __int16)v7)
              {
                goto LABEL_110;
              }
              uint64_t v27 = v85 + (v79 << 6);
              if (*(_DWORD *)(v27 + 40) == 16)
              {
                if ((unsigned __int16)v10 >= 2u
                  && (uint64_t v28 = v85 + ((unint64_t)((unsigned __int16)v10 - 1) << 6),
                      *(_DWORD *)(v28 + 20) == 998))
                {
                  if (*(_DWORD *)(v28 + 32) == *(_DWORD *)(v85 + (v79 << 6) + 32)) {
                    unsigned __int16 v29 = v10 - 1;
                  }
                  else {
                    unsigned __int16 v29 = 0;
                  }
                }
                else
                {
                  unsigned __int16 v29 = 0;
                }
                uint64_t v31 = (unsigned __int16)v10 + 1;
                if (v31 < (unsigned __int16)v7)
                {
                  uint64_t v32 = v85 + (v31 << 6);
                  if (*(_DWORD *)(v32 + 20) == 998 && *(_DWORD *)(v32 + 32) == *(_DWORD *)(v85 + (v79 << 6) + 32)) {
                    unsigned __int16 v29 = v10 + 1;
                  }
                }
                if ((unsigned __int16)v15 >= 2u
                  && (v33 = (unsigned __int16)v15 - 1, uint64_t v34 = v85 + (v33 << 6),
                                                                     *(_DWORD *)(v34 + 20) == 998))
                {
                  if (*(_DWORD *)(v34 + 32) != *(_DWORD *)(v85 + ((unint64_t)(unsigned __int16)v15 << 6) + 32)) {
                    LOWORD(v33) = 0;
                  }
                }
                else
                {
                  LOWORD(v33) = 0;
                }
                unsigned int v35 = (unsigned __int16)v7;
                uint64_t v36 = (unsigned __int16)v15 + 1;
                if (v36 < v35)
                {
                  uint64_t v37 = v85 + (v36 << 6);
                  if (*(_DWORD *)(v37 + 20) == 998
                    && *(_DWORD *)(v37 + 32) == *(_DWORD *)(v85 + ((unint64_t)(unsigned __int16)v15 << 6) + 32))
                  {
                    LOWORD(v33) = v15 + 1;
                  }
                }
                if ((_WORD)v33) {
                  BOOL v30 = v29 != 0;
                }
                else {
                  BOOL v30 = 0;
                }
              }
              else
              {
                BOOL v30 = 0;
                unsigned __int16 v29 = 0;
              }
              uint64_t v38 = (_DWORD *)(v85 + ((unint64_t)(unsigned __int16)v15 << 6));
              int v39 = v38[8];
              int v40 = *(_DWORD *)(v27 + 32);
              int v76 = v8;
              unsigned __int16 v75 = v29;
              BOOL v78 = v30;
              if (!*v38 && v39 == v40)
              {
                *(void *)(v85 + (v79 << 6) + 24) = *(void *)(v85
                                                               + ((unint64_t)(unsigned __int16)v15 << 6)
                                                               + 24);
                int v40 = v39;
              }
              unint64_t v77 = (unsigned __int16)v15;
              unsigned __int16 v41 = (_DWORD *)(v11 + (v79 << 6));
              v41[9] = v39 - v40 + v38[9];
              v41[7] = v38[6] - v41[6] + v38[7];
              int v42 = (unsigned __int16)v10;
              unsigned __int16 v43 = v10;
              if ((unsigned __int16)v10 <= (unsigned __int16)v15)
              {
                do
                {
                  uint64_t v44 = v43;
                  if (v42 == v43) {
                    goto LABEL_77;
                  }
                  uint64_t v45 = v85;
                  uint64_t v46 = v85 + ((unint64_t)v43 << 6);
                  unsigned int v49 = *(unsigned __int16 *)(v46 + 16);
                  int v48 = (_WORD *)(v46 + 16);
                  unsigned int v47 = v49;
                  if (!v49) {
                    goto LABEL_77;
                  }
                  uint64_t v50 = v15;
                  uint64_t v51 = v10;
                  uint64_t v52 = a1;
                  uint64_t v53 = *(void *)(a1 + 16);
                  uint64_t v54 = *(unsigned __int16 *)(v85 + (v79 << 6) + 16);
                  uint64_t result = growOffsets(v53, v85 + (v79 << 6), v47);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t v55 = (unsigned __int16)*v48;
                  uint64_t v56 = v45 + (v44 << 6);
                  uint64_t v59 = *(void *)(v56 + 8);
                  uint64_t v58 = (void *)(v56 + 8);
                  uint64_t v57 = v59;
                  if (*v48)
                  {
                    unsigned __int16 v60 = (void *)(*(void *)(v45 + (v79 << 6) + 8) + 8 * v54);
                    unsigned __int8 v61 = (uint64_t *)v57;
                    a1 = v52;
                    uint64_t v10 = v51;
                    uint64_t v15 = v50;
                    do
                    {
                      uint64_t v62 = *v61++;
                      *v60++ = v62;
                      --v55;
                    }
                    while (v55);
                  }
                  else
                  {
                    a1 = v52;
                    uint64_t v10 = v51;
                    uint64_t v15 = v50;
                    if (!v57) {
                      goto LABEL_77;
                    }
                  }
                  uint64_t v63 = *(void **)(v53 + 8);
                  uint64_t v64 = v58;
                  heap_Free(v63, v57);
                  void *v64 = 0;
                  *int v48 = 0;
LABEL_77:
                  if (v44 != (unsigned __int16)v10)
                  {
                    uint64_t v65 = *(void *)(v85 + (v44 << 6) + 48);
                    if (v65)
                    {
                      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v65);
                      *(void *)(v85 + (v44 << 6) + 48) = 0;
                    }
                  }
                  unsigned __int16 v43 = v44 + 1;
                }
                while ((unsigned __int16)(v44 + 1) <= (unsigned __int16)v15);
              }
              unint64_t v66 = v77;
              if ((unsigned __int16)v15 > (unsigned __int16)v9) {
                break;
              }
LABEL_102:
              if (!v78)
              {
                int v7 = v84;
                int v8 = v76;
LABEL_110:
                uint64_t result = 0;
                uint64_t v9 = (v9 + 1);
                goto LABEL_111;
              }
              cstdlib_memcpy(&__b, (const void *)(v85 + ((unint64_t)v75 << 6)), 0x40uLL);
              DWORD1(v81) = 41;
              uint64_t result = bed_Goto(v74, v75 + 1);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = bed_marker_InjectFixedRefMarker(v74, &__b);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = bed_GetpElem(v74, 0, &v85);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = bed_GetcElem(v74, &v84);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v7 = v84;
              int v8 = v76;
LABEL_108:
              uint64_t result = 0;
LABEL_111:
              if ((unsigned __int16)v9 >= (unsigned __int16)v7) {
                return result;
              }
            }
            unint64_t v67 = v77 << 6;
            while (1)
            {
              uint64_t v68 = v85 + v67;
              int v69 = *(_DWORD *)(v85 + v67 + 20);
              if (v69 == 7 && v78) {
                break;
              }
              if (v69 == 0x4000) {
                goto LABEL_98;
              }
              if (v69 == 7) {
                goto LABEL_96;
              }
LABEL_101:
              --v66;
              v67 -= 64;
              if ((unsigned __int16)v9 >= (unsigned __int16)v66) {
                goto LABEL_102;
              }
            }
            if (v66 >= 2
              && (uint64_t v71 = v85 + ((unint64_t)(v66 - 1) << 6), *(_DWORD *)(v71 + 20) == 998)
              && *(_DWORD *)(v71 + 32) == *(_DWORD *)(v85 + v67 + 32)
              || (int)v66 + 1 < v84
              && (uint64_t v72 = v85 + ((unint64_t)(v66 + 1) << 6), *(_DWORD *)(v72 + 20) == 998)
              && *(_DWORD *)(v72 + 32) == *(_DWORD *)(v85 + v67 + 32))
            {
              *(_DWORD *)(v68 + 20) = 41;
              goto LABEL_101;
            }
LABEL_96:
            int v73 = *(_DWORD *)(v85 + v67);
            if (v73)
            {
              if (v73 == 1)
              {
LABEL_98:
                uint64_t result = bed_Remove(v74, (unsigned __int16)v66, 1);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                --v84;
                goto LABEL_101;
              }
            }
            else
            {
              *(_DWORD *)(v68 + 20) = 999;
            }
            goto LABEL_101;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t utoin_MarkSingleLatinForSpell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  unsigned __int16 v50 = 0;
  unsigned int v49 = 0;
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long __b = 0u;
  long long v45 = 0u;
  uint64_t v43 = 0;
  __int16 v42 = 0;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerUndef;
  long long v45 = unk_2206E3FA8;
  long long v46 = xmmword_2206E3FB8;
  long long v47 = unk_2206E3FC8;
  uint64_t result = bed_GetcElem(a2, &v42);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (!v42) {
    return result;
  }
  uint64_t result = datac_RequestBlock(a3, 1012, 1u, &v48);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetcElem(a1, &v50);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a1, 0, &v49);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a2, 0, &v43);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (v50 < 2u) {
    return 0;
  }
  unint64_t v7 = 1;
  uint64_t v8 = 21;
  int v9 = 1;
  while (1)
  {
    uint64_t v10 = v49;
    int v11 = v49[v8];
    if (v11 != 21) {
      break;
    }
    int v9 = v48;
    if (v48)
    {
      MarkerArgint Str = marker_getMarkerArgStr(1u);
      if (!cstdlib_strcmp(MarkerArgStr, (const char *)(*(void *)(v48 + 8) + v49[v8 + 5])))
      {
        uint64_t v10 = v49;
        int v11 = v49[v8];
        goto LABEL_16;
      }
      int v9 = 0;
    }
LABEL_23:
    ++v7;
    v8 += 16;
    if (v7 >= v50) {
      return 0;
    }
  }
  if (v9 != 1) {
    goto LABEL_23;
  }
LABEL_16:
  if (v11 != 7 || (v10[v8 + 5] - 3) > 5 || (v10[v8 + 4] - 1) > 3) {
    goto LABEL_22;
  }
  cstdlib_memset(__dst, 0, 8uLL);
  cstdlib_strncpy(__dst, (const char *)(v43 + (v49[v8 + 3] - v49[8])), v49[v8 + 4]);
  __dst[v49[v8 + 4]] = 0;
  __int16 v13 = Utf8_Utf8NbrOfSymbols(__dst);
  int v9 = 1;
  if (v49[v8] != 7 || (unsigned __int16)(v13 - 1) != 1) {
    goto LABEL_23;
  }
  uint64_t v14 = &v49[v8];
  if ((v49[v8 + 5] - 3) > 5)
  {
LABEL_22:
    int v9 = 1;
    goto LABEL_23;
  }
  if ((unsigned __int16)v7 < 2u)
  {
    int v17 = 0xFFFF;
  }
  else
  {
    unint64_t v15 = v7 - 1;
    uint64_t v16 = v49 + 26;
    int v17 = 0xFFFF;
    do
    {
      if (*(v16 - 5) == 7 && *v16 == 1) {
        int v17 = *(v16 - 2);
      }
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  unsigned int v18 = v14[1];
  unsigned int v19 = v14[3];
  int v20 = v14[4];
  if (v50 >= 2uLL)
  {
    int v21 = 0;
    uint64_t v22 = v49 + 25;
    uint64_t v23 = v50 - 1;
    do
    {
      if (v21) {
        break;
      }
      unsigned int v24 = *(v22 - 1);
      if (v24 > v19) {
        break;
      }
      if (*(v22 - 4) == 40)
      {
        if (v17 == 0xFFFF && v19 == *v22 + v24 || (v21 = 0, unsigned int v25 = v49[8], v17 == v25) && v24 >= v25) {
          int v21 = 1;
        }
      }
      else
      {
        int v21 = 0;
      }
      v22 += 16;
      --v23;
    }
    while (v23);
    if (v21 == 1) {
      return 0;
    }
  }
  unsigned __int16 v26 = v7 + 1;
  int v27 = 0xFFFF;
  int v28 = 0xFFFF;
  if (v50 > (unsigned __int16)(v7 + 1))
  {
    int v27 = v20 + v19;
    while (1)
    {
      uint64_t v29 = v26;
      BOOL v30 = &v49[16 * (unint64_t)v26];
      if (v30[8] != v27)
      {
LABEL_53:
        int v27 = 0xFFFF;
        int v28 = 0xFFFF;
        goto LABEL_54;
      }
      if (v30[5] == 7)
      {
        uint64_t v31 = &v49[16 * v29];
        if (v31[10] == 1) {
          break;
        }
      }
      unsigned __int16 v26 = v29 + 1;
      if (v50 <= (unsigned __int16)(v29 + 1)) {
        goto LABEL_53;
      }
    }
    int v28 = v31[9];
  }
LABEL_54:
  int v32 = v49[8];
  if (v17 != 0xFFFF || (int v33 = v14[3], v19 != v32))
  {
    int v33 = v17;
    if (v17 != v32) {
      return 0;
    }
  }
  int v34 = v27 == 0xFFFF ? v20 + v19 : v28 + v27;
  if (v34 != v49[9] + v33) {
    return 0;
  }
  int v39 = v14[2];
  int v40 = v14[3];
  int v41 = v14[4];
  v14[5] = 14;
  DWORD1(v45) = 21;
  uint64_t v35 = v48;
  uint64_t v36 = (char *)marker_getMarkerArgStr(3u);
  uint64_t result = addOrGetTNArgStr(v35, v36, (unsigned int *)&v46 + 2, a3);
  if ((result & 0x80000000) == 0)
  {
    *((void *)&v45 + 1) = v18;
    *(void *)&long long v46 = v49[v8 + 3];
    uint64_t result = bed_Goto(a1, v7);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = bed_marker_InjectFixedRefMarker(a1, &__b);
      if ((result & 0x80000000) == 0)
      {
        DWORD1(v45) = 21;
        uint64_t v37 = v48;
        uint64_t v38 = (char *)marker_getMarkerArgStr(1u);
        uint64_t result = addOrGetTNArgStr(v37, v38, (unsigned int *)&v46 + 2, a3);
        if ((result & 0x80000000) == 0)
        {
          *((void *)&v45 + 1) = v39 + v18;
          *(void *)&long long v46 = (v41 + v40);
          uint64_t result = bed_marker_InjectFixedRefMarker(a1, &__b);
          if ((result & 0x80000000) == 0) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_SplitRegionOnWordSeparatingMarkers(uint64_t a1, int a2)
{
  unsigned __int16 v24 = 0;
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  cstdlib_memset(&v19, 0, 0x40uLL);
  long long v19 = MarkerSetTypeOfInput;
  long long v20 = unk_2206E3DF0;
  long long v21 = xmmword_2206E3E00;
  long long v22 = unk_2206E3E10;
  uint64_t result = bed_GetcElem(a1, &v24);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = bed_GetpElem(a1, 0, &v23);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v5 = v24;
      if (v24 >= 2u)
      {
        int v6 = 0;
        unsigned int v7 = 0;
        unsigned __int16 v8 = 0;
        uint64_t v9 = v23;
        for (int i = 1; (unsigned __int16)i < v5; ++i)
        {
          uint64_t v11 = v9 + ((unint64_t)(unsigned __int16)i << 6);
          unsigned int v12 = *(_DWORD *)(v11 + 20);
          if (v12 == 7)
          {
            unsigned int v7 = *(_DWORD *)(v11 + 24);
            uint64_t v13 = *(void *)(v11 + 8);
            if (v13) {
              int v6 = *(_DWORD *)(v13 + 4);
            }
            else {
              int v6 = 0;
            }
            unsigned __int16 v8 = i;
          }
          else if (v8)
          {
            BOOL v14 = v12 > 0x39 || ((1 << v12) & 0x3C8010124021140) == 0;
            if (!v14 || a2 == 1 && (v12 <= 0x3C && ((1 << v12) & 0x1000000001050000) != 0 || v12 == 99))
            {
              uint64_t v15 = v9 + ((unint64_t)(unsigned __int16)i << 6);
              if (v7 < *(_DWORD *)(v15 + 24) + v6)
              {
                uint64_t v16 = (_DWORD *)(v9 + ((unint64_t)v8 << 6));
                DWORD2(v21) = v16[10];
                *((void *)&v20 + 1) = (*(_DWORD *)(v15 + 24) + v6);
                LODWORD(v21) = *(_DWORD *)(v15 + 32);
                DWORD1(v21) = v16[9];
                int v17 = *(_DWORD *)(v15 + 32) - v16[8];
                v16[9] = v17;
                DWORD1(v21) -= v17;
                if (DWORD1(v21))
                {
                  int v18 = i + 1;
                  uint64_t result = bed_Goto(a1, (unsigned __int16)(i + 1));
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t result = bed_marker_InjectFixedRefMarker(a1, &v19);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  uint64_t v9 = v23;
                  unsigned int v7 = *(_DWORD *)(v23 + ((unint64_t)(unsigned __int16)v18 << 6) + 24) + v6;
                  unsigned __int16 v5 = ++v24;
                  int i = v18;
                  unsigned __int16 v8 = v18;
                }
              }
            }
          }
          else
          {
            unsigned __int16 v8 = 0;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t utoin_Normalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v53[1] = *MEMORY[0x263EF8340];
  uint64_t v52 = 0;
  v53[0] = 7;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v4 = 2370838535;
  if (!a2 || !a3) {
    return v4;
  }
  __int16 v51 = 0;
  unsigned __int16 v48 = 0;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = bed_GetcElem(a2, &v51);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_67;
  }
  unsigned int v11 = datac_RequestBlock(a4, 1029, (unsigned __int16)(v51 + 1), &v50);
  if ((v11 & 0x80000000) != 0)
  {
    if ((v11 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v11;
    }
  }
  uint64_t v10 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a4, 1029, &v52, 213);
  if ((v10 & 0x80000000) != 0
    || (uint64_t v10 = bed_Goto(a2, 0), (v10 & 0x80000000) != 0)
    || (uint64_t v10 = bed_Goto(a3, 0), (v10 & 0x80000000) != 0))
  {
LABEL_67:
    uint64_t v4 = v10;
    goto LABEL_68;
  }
  uint64_t v12 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v53);
  uint64_t v4 = v12;
  if ((v12 & 0x80000000) != 0 && (v12 & 0x1FFF) != 0x14)
  {
LABEL_68:
    if (v52) {
      bed_ObjClose(v52);
    }
    return v4;
  }
  if ((v12 & 0x80000000) == 0)
  {
    int v13 = 0;
    long long v14 = 0uLL;
    while (1)
    {
      long long __src = 0;
      v46[0] = v14;
      v46[1] = v14;
      long long __dst = v14;
      long long v45 = v14;
      __int16 v43 = 0;
      uint64_t v10 = bed_GetpElem(a3, 0xFFFFu, &__src);
      if ((v10 & 0x80000000) != 0) {
        goto LABEL_67;
      }
      cstdlib_memcpy(&__dst, __src, 0x40uLL);
      int v15 = *((_DWORD *)__src + 10);
      uint64_t v16 = utoin_NormalizeOrthNativeWord;
      switch(v15)
      {
        case 1:
          int v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_MarkWordBoundary;
          goto LABEL_19;
        case 2:
        case 7:
          goto LABEL_20;
        case 3:
        case 4:
        case 15:
        case 16:
          goto LABEL_18;
        case 5:
          int v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
          if (*((_DWORD *)__src + 9) > 0x60u) {
            goto LABEL_19;
          }
          BOOL v18 = (v13 & 0xFFFFFFEF) == 0;
          long long v19 = utoin_NormalizeOrthNativeText;
          long long v20 = utoin_NormalizeOrthNativeWord;
          goto LABEL_36;
        case 6:
        case 8:
          int v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
          if (*((_DWORD *)__src + 9) > 0x20u) {
            goto LABEL_19;
          }
          BOOL v18 = (v13 & 0xFFFFFFEF) == 0;
          long long v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeText;
          long long v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeWord;
LABEL_36:
          if (v18) {
            uint64_t v16 = v20;
          }
          else {
            uint64_t v16 = v19;
          }
          goto LABEL_20;
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          goto LABEL_31;
        case 14:
          goto LABEL_32;
        default:
          uint64_t v21 = (v15 - 43);
          if (v21 > 0x38) {
            goto LABEL_31;
          }
          if (((1 << (v15 - 43)) & 0x38020001) != 0)
          {
LABEL_18:
            int v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_TranscodeText;
LABEL_19:
            uint64_t v16 = v17;
            goto LABEL_20;
          }
          if (v21 == 1)
          {
LABEL_32:
            int v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_SpellRegion;
            goto LABEL_19;
          }
          if (v21 != 56)
          {
LABEL_31:
            int v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))utoin_RemoveRegion;
            goto LABEL_19;
          }
LABEL_20:
          uint64_t v22 = *(void *)(v9 + 32);
          UTOIMarkerString = getUTOIMarkerString(v15);
          log_OutText(v22, (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (normalize region %s %u,%u)", v24, v25, v26, (uint64_t)UTOIMarkerString);
          uint64_t v10 = v16(a1, a2, a3, v52, a4);
          if ((v10 & 0x80000000) != 0) {
            goto LABEL_67;
          }
          uint64_t v10 = bed_Goto(a3, 0);
          if ((v10 & 0x80000000) != 0) {
            goto LABEL_67;
          }
          while (1)
          {
            uint64_t v27 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v53);
            if ((v27 & 0x80000000) != 0)
            {
              uint64_t v4 = v27;
              if ((v27 & 0x1FFF) != 0x14) {
                goto LABEL_68;
              }
            }
            uint64_t v10 = bed_GetpElem(a3, 0xFFFFu, &__src);
            if ((v10 & 0x80000000) != 0) {
              goto LABEL_67;
            }
            if (*((void *)&v45 + 1) == *((void *)__src + 3)
              && LODWORD(v46[0]) == *((_DWORD *)__src + 8)
              && !cstdlib_memcmp((char *)v46 + 8, (char *)__src + 40, 8uLL))
            {
              break;
            }
            __int16 v43 = 1;
            bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v43);
          }
          int v28 = *((_DWORD *)__src + 10);
          if ((v28 - 5) < 4) {
            goto LABEL_40;
          }
          if (v28 == 2)
          {
            int v28 = 16;
LABEL_47:
            int v13 = v28;
            goto LABEL_48;
          }
          if (v28 != 1) {
            goto LABEL_47;
          }
LABEL_40:
          int v28 = 16;
          if (!v13 || v13 == 43) {
            goto LABEL_47;
          }
LABEL_48:
          __int16 v43 = 1;
          bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v43);
          uint64_t v29 = bed_GoForward(a3, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v53);
          uint64_t v4 = v29;
          if ((v29 & 0x80000000) != 0 && (v29 & 0x1FFF) != 0x14) {
            goto LABEL_68;
          }
          long long v14 = 0uLL;
          if ((v29 & 0x80000000) != 0) {
            goto LABEL_51;
          }
          break;
      }
    }
  }
LABEL_51:
  uint64_t v30 = bed_GetpElem(a3, 0, &v49);
  if ((v30 & 0x80000000) != 0) {
    return v30;
  }
  uint64_t v4 = bed_GetcElem(a3, &v48);
  if ((v4 & 0x80000000) == 0)
  {
    unsigned __int16 v31 = v48;
    if (v48 >= 2u)
    {
      uint64_t v32 = 0;
      unint64_t v33 = 1;
      while (1)
      {
        if (*(_DWORD *)(v49 + v32 + 84) == 7 && !*(_DWORD *)(v49 + v32 + 100))
        {
          unsigned int v34 = *(_DWORD *)(v49 + v32 + 104);
          BOOL v35 = v34 > 7;
          int v36 = (1 << v34) & 0xA4;
          if (!v35 && v36 != 0)
          {
            uint64_t v38 = *(void *)(v49 + v32 + 72);
            if (v38)
            {
              heap_Free(*(void **)(v9 + 8), v38);
              *(void *)(v49 + v32 + 72) = 0;
              *(_WORD *)(v49 + v32 + 80) = 0;
            }
            uint64_t v4 = bed_Remove(a3, (unsigned __int16)v33, 1);
            if ((v4 & 0x80000000) != 0) {
              return v4;
            }
            log_OutText(*(void *)(v9 + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (deleted zero length entry, marker %d)", v39, v40, v41, v33);
            unsigned __int16 v31 = --v48;
          }
        }
        ++v33;
        v32 += 64;
        if (v33 >= v31) {
          goto LABEL_68;
        }
      }
    }
    goto LABEL_68;
  }
  return v4;
}

uint64_t utoin_InsertRegions(_WORD **a1, uint64_t a2)
{
  v60[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = 2370838535;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1020, &v52, 213);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_ObjOpen(*a1, (uint64_t)a1[1], a2, 1021, &v51, 213);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"BEFORE utoin_RemoveEmptyPhonemes");
  int v6 = a1[2];
  uint64_t v7 = v51;
  *(void *)char __s = 0;
  if (!v51) {
    goto LABEL_87;
  }
  *(_WORD *)long long __dst = 0;
  uint64_t v5 = bed_GetpElem(v51, 0, __s);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_GetcElem(v7, __dst);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  unsigned int v11 = *(unsigned __int16 *)__dst;
  if (*(unsigned __int16 *)__dst >= 2u)
  {
    uint64_t v12 = 1;
    __int16 v13 = 2;
    uint64_t v14 = 160;
    uint64_t v15 = 1;
    do
    {
      uint64_t v16 = *(void *)__s + (v12 << 6);
      if (*(_DWORD *)(v16 + 20) == 7)
      {
        unint64_t v17 = v12 + 1;
        if (*(_DWORD *)(v16 + 40) == 43 && v17 < v11)
        {
          uint64_t v19 = *(void *)__s + (v12 << 6);
          long long v20 = (int *)(v19 + 32);
          uint64_t v21 = (_DWORD *)(v19 + 36);
          uint64_t v22 = (_DWORD *)(*(void *)__s + v14);
          unsigned __int16 v23 = v13;
          while (1)
          {
            int v24 = *(v22 - 3);
            if (v24 == 999 || v24 == 7)
            {
              int v26 = *v20;
              if (*v22 >= *v20 && *v22 < (*v21 + v26)) {
                break;
              }
            }
            ++v23;
            v22 += 16;
            if (v11 == v23) {
              goto LABEL_26;
            }
          }
          if (v23 && *(_DWORD *)(*(void *)__s + ((unint64_t)v23 << 6) + 32) == v26)
          {
            *uint64_t v21 = 0;
            log_OutText(*((void *)v6 + 4), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] zero length phoneme found at marker %d", v8, v9, v10, v15);
            unsigned int v11 = *(unsigned __int16 *)__dst;
          }
        }
      }
      else
      {
        unint64_t v17 = v12 + 1;
      }
LABEL_26:
      ++v13;
      v14 += 64;
      uint64_t v12 = v17;
      uint64_t v15 = v17;
    }
    while (v17 < v11);
  }
  UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"BEFORE utoin_InsertRegionTags");
  uint64_t v28 = v51;
  uint64_t v27 = v52;
  v60[0] = 7;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  if (!v52 || !v51) {
    goto LABEL_87;
  }
  uint64_t v5 = bed_Goto(v52, 0);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_Goto(v28, 0);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  int v56 = 0;
  uint64_t v5 = bed_GetpElem(v28, 0, &v57);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v5 = bed_GetcElem(v28, (_WORD *)&v56 + 1);
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_86;
  }
  uint64_t v29 = bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v60);
  uint64_t v2 = v29;
  if ((v29 & 0x80000000) != 0 && (v29 & 0x1FFF) != 0x14) {
    goto LABEL_87;
  }
  int v30 = 0;
  unsigned int v31 = 0;
  while ((v2 & 0x80000000) == 0)
  {
    uint64_t v54 = 0;
    unsigned __int16 v53 = 0;
    uint64_t v5 = bed_GetpElem(v28, 0xFFFFu, &v54);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    uint64_t v5 = bed_GetiElem(v28, &v53);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    uint64_t v5 = bed_GetpElem(v28, 0, &v55);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    int v32 = *(_DWORD *)(v54 + 40);
    BOOL v33 = v32 != 43 || v31 == 0;
    if (!v33 && *(_DWORD *)(v55 + ((unint64_t)v31 << 6) + 40) == 43) {
      int v30 = 15;
    }
    uint64_t v5 = utoin_PutClosingAndOpeningTag(v30, v32, __s);
    if ((v5 & 0x80000000) != 0) {
      goto LABEL_86;
    }
    int v34 = *(_DWORD *)(v54 + 40);
    if ((v34 - 5) >= 4)
    {
      if (v34 == 2)
      {
        int v34 = 16;
LABEL_58:
        int v30 = v34;
        goto LABEL_59;
      }
      if (v34 != 1) {
        goto LABEL_58;
      }
    }
    int v34 = 16;
    if (!v30 || v30 == 43) {
      goto LABEL_58;
    }
LABEL_59:
    unsigned __int16 v35 = cstdlib_strlen(__s);
    if (v35)
    {
      int v36 = *(_DWORD *)(v57 + 32);
      int v37 = *(_DWORD *)(v54 + 32) - v36;
      LOWORD(v56) = *(_WORD *)(v54 + 32) - v36;
      uint64_t v5 = bed_Goto(v27, (unsigned __int16)v37);
      if ((v5 & 0x80000000) != 0) {
        goto LABEL_86;
      }
      cstdlib_strcpy(__dst, __s);
      uint64_t v5 = bed_Insert(v27, __dst, v35);
      if ((v5 & 0x80000000) != 0) {
        goto LABEL_86;
      }
      uint64_t v5 = bed_GetiElem(v28, &v56);
      if ((v5 & 0x80000000) != 0) {
        goto LABEL_86;
      }
      uint64_t v38 = v54;
      unsigned int v39 = *(unsigned __int16 *)(v54 + 32);
      unsigned int v40 = (unsigned __int16)v56;
      unsigned int v41 = HIWORD(v56);
      if ((unsigned __int16)v56 < HIWORD(v56))
      {
        uint64_t v42 = v54;
        do
        {
          *(_DWORD *)(v42 + 32) += v35;
          v42 += 64;
          ++v40;
        }
        while (v40 < v41);
        uint64_t v54 = v42;
      }
      if (v39 > *(_DWORD *)(v57 + 32) && *(_DWORD *)(v38 - 32) == v39)
      {
        __int16 v43 = (_DWORD *)(v38 - 44);
        do
        {
          if (*v43 == 36) {
            v43[3] = *(_DWORD *)(v38 + 32);
          }
          int v44 = *(v43 - 13);
          v43 -= 16;
        }
        while (v44 == v39);
      }
    }
    unsigned int v31 = v53;
    LOWORD(v56) = 1;
    bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v56);
    uint64_t v45 = bed_GoForward(v28, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v60);
    uint64_t v2 = v45;
    if ((v45 & 0x80000000) != 0 && (v45 & 0x1FFF) != 0x14) {
      goto LABEL_87;
    }
  }
  __s[0] = 0;
  if (v30)
  {
    if ((v30 - 3) > 1)
    {
      uint64_t v47 = 1;
      long long v46 = __s;
    }
    else
    {
      __s[0] = 17;
      long long v46 = &__s[1];
      uint64_t v47 = 2;
    }
    char *v46 = 31;
    __s[v47] = 0;
  }
  unsigned __int16 v48 = cstdlib_strlen(__s);
  if (!v48
    || (v49 = v48, uint64_t v5 = bed_GetcElem(v27, &v56), (v5 & 0x80000000) == 0)
    && (uint64_t v5 = bed_Goto(v27, (unsigned __int16)v56), (v5 & 0x80000000) == 0)
    && (cstdlib_strcpy(__dst, __s), uint64_t v5 = bed_Insert(v27, __dst, v49), (v5 & 0x80000000) == 0))
  {
    UTOITrace(*((_DWORD *)a1 + 18), (uint64_t)a1[2], v52, v51, (uint64_t)"AFTER utoin_InsertRegionTags");
    uint64_t v2 = 0;
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v2 = v5;
LABEL_87:
  if (v51) {
    bed_ObjClose(v51);
  }
  if (v52) {
    bed_ObjClose(v52);
  }
  return v2;
}

uint64_t utoin_RemoveBlankRegions(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v32[1] = *MEMORY[0x263EF8340];
  int v31 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  v32[0] = 1;
  uint64_t result = bed_GetpElem(a2, 0, &v30);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetcElem(a2, (_WORD *)&v31 + 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
  unsigned int v9 = (unsigned __int16)v31;
  if ((unsigned __int16)v31 < a3)
  {
    uint64_t result = bed_GetpElem(a2, (unsigned __int16)v31, &v29);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    BOOL v10 = 0;
    unsigned int v9 = (unsigned __int16)v31;
    unsigned int v11 = (_DWORD *)(v29 + 64);
    do
    {
      if (v10
        || (unint64_t)v11 >= v29
                                  + ((unint64_t)HIWORD(v31) << 6)
                                  - ((unint64_t)(unsigned __int16)v31 << 6))
      {
        break;
      }
      unsigned int v12 = v11[8];
      unsigned int v13 = *(_DWORD *)(v29 + 36) + *(_DWORD *)(v29 + 32);
      if (v12 == v13 && v11[5] == 7)
      {
        unsigned int v14 = v11[10];
        BOOL v10 = v14 <= 0x2C && ((1 << v14) & 0x10000001C000) != 0;
      }
      else
      {
        BOOL v10 = 0;
      }
      v11 += 16;
    }
    while (v12 <= v13);
    if (v10)
    {
      uint64_t result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
      goto LABEL_37;
    }
  }
  if ((result & 0x80000000) != 0 || v9 >= a3)
  {
LABEL_37:
    if ((result & 0x80000000) == 0 || (result & 0x1FFF) == 0x14)
    {
      int v28 = bed_Goto(a2, (unsigned __int16)a3);
      return v28 & (v28 >> 31);
    }
    return result;
  }
  while (1)
  {
    uint64_t result = bed_GetpElem(a2, (unsigned __int16)v9, &v29);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = bed_Remove(a4, (unsigned __int16)(*(_WORD *)(v29 + 32) - *(_DWORD *)(v30 + 32)), *(unsigned __int16 *)(v29 + 36));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v15 = v29;
    uint64_t v16 = HIWORD(v31);
    unsigned __int16 v17 = v31;
    if ((uint64_t)(HIWORD(v31) - (unint64_t)(unsigned __int16)v31) >= 2)
    {
      unint64_t v18 = v29 + 64;
      int v19 = *(_DWORD *)(v29 + 36);
      do
      {
        unsigned int v20 = *(_DWORD *)(v18 + 32);
        int v21 = *(_DWORD *)(v15 + 32);
        unsigned int v22 = v19 + v21;
        if (v20 == v19 + v21 && *(_DWORD *)(v18 + 20) == 7 && *(_DWORD *)(v18 + 40) != 43)
        {
          *(_DWORD *)(v18 + 24) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v18 + 28) += *(_DWORD *)(v15 + 28);
          uint64_t v23 = v30;
          uint64_t v24 = *(unsigned __int16 *)(v18 + 16);
          uint64_t result = growOffsets(a1, v18, 1u);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v25 = (_DWORD *)(*(void *)(v18 + 8) + 8 * v24);
          *uint64_t v25 = *(_DWORD *)(v15 + 24) - *(_DWORD *)(v23 + 24);
          v25[1] = *(_DWORD *)(v15 + 28);
          unsigned int v20 = *(_DWORD *)(v18 + 32);
          uint64_t v15 = v29;
          int v21 = *(_DWORD *)(v29 + 32);
          int v19 = *(_DWORD *)(v29 + 36);
          uint64_t v16 = HIWORD(v31);
          unsigned __int16 v17 = v31;
          unsigned int v22 = v19 + v21;
        }
        if (v20 >= v22) {
          int v26 = v20 - v19;
        }
        else {
          int v26 = v21;
        }
        *(_DWORD *)(v18 + 32) = v26;
        v18 += 64;
      }
      while (v18 < v15 + (v16 << 6) - ((unint64_t)v17 << 6));
    }
    uint64_t v27 = *(void *)(v15 + 8);
    if (v27)
    {
      heap_Free(*(void **)(a1 + 8), v27);
      *(void *)(v29 + 8) = 0;
      unsigned __int16 v17 = v31;
    }
    uint64_t result = bed_Remove(a2, v17, 1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    --HIWORD(v31);
    LOWORD(a3) = a3 - 1;
    uint64_t result = bed_FindForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsToiOfType, (uint64_t)v32, &v31);
    if ((result & 0x80000000) == 0)
    {
      LOWORD(v9) = v31;
      if ((unsigned __int16)v31 < (unsigned __int16)a3) {
        continue;
      }
    }
    goto LABEL_37;
  }
}

uint64_t growOffsets(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = heap_Realloc(v6, v5, (8 * (*(unsigned __int16 *)(a2 + 16) + (unint64_t)a3)) | 1);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t result = 0;
      *(void *)(a2 + 8) = v8;
      *(_WORD *)(a2 + 16) += v3;
      return result;
    }
  }
  else
  {
    uint64_t v10 = heap_Calloc(v6, a3, 9);
    *(void *)(a2 + 8) = v10;
    if (v10)
    {
      uint64_t result = 0;
      *(_WORD *)(a2 + 16) = v3;
      return result;
    }
  }
  return 2370838538;
}

uint64_t utoin_LookUpWordsInNativeRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  int v56 = 0;
  unsigned __int16 v55 = 0;
  int v54 = 0;
  __int16 v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long __b = 0u;
  long long v50 = 0u;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerSetTypeOfInput2;
  long long v50 = unk_2206E3F50;
  long long v51 = xmmword_2206E3F60;
  long long v52 = unk_2206E3F70;
  uint64_t result = 2370838535;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  if (!a3) {
    return result;
  }
  uint64_t result = bed_GetpElem(a3, 0, &v57);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetcElem(a3, (_WORD *)&v56 + 1);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a3, 0, &v60);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a2, 0, &v59);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a3, 0xFFFFu, &v58);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetiElem(a3, &v56);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v10 = 0;
  int v48 = *(_DWORD *)(v58 + 40);
  int v11 = *(_DWORD *)(v58 + 24);
  unint64_t v12 = *(unsigned __int16 *)(v58 + 16);
  char v13 = 1;
  if (*(_DWORD *)(a1 + 168) == 1 && *(_WORD *)(v58 + 16))
  {
    uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v12 + 1, 3);
    if (!v14) {
      return 2370838538;
    }
    uint64_t v10 = (_WORD *)v14;
    uint64_t v15 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v12 + 1, 9);
    uint64_t result = 2370838538;
    if (!v15) {
      return result;
    }
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(v58 + 8);
    if (v12 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v12;
    }
    do
    {
      *(void *)(v15 + v16) = *(void *)(v17 + v16);
      v16 += 8;
    }
    while (8 * v18 != v16);
    uint64_t v19 = 0;
    LOWORD(v20) = 0;
    int v21 = 0;
    uint64_t v22 = v58;
    uint64_t v23 = 4;
    do
    {
      if (!v19)
      {
        unsigned int v24 = **(_DWORD **)(v22 + 8);
        if (v24 > *(_DWORD *)(v22 + 24))
        {
          v21 += v24;
          int v20 = **(_DWORD **)(v22 + 8);
        }
      }
      uint64_t v25 = v19 + 1;
      if (v19 + 1 >= v12)
      {
        LOWORD(v26) = *(_WORD *)(v22 + 36) - v21;
      }
      else
      {
        int v26 = *(_DWORD *)(*(void *)(v22 + 8) + v23 + 4)
            - (*(_DWORD *)(*(void *)(v22 + 8) + v23 - 4)
             + *(_DWORD *)(*(void *)(v22 + 8) + v23));
        v21 += v26;
      }
      v10[v19] = v26;
      v23 += 8;
      ++v19;
    }
    while (v18 != v25);
    uint64_t v47 = v15;
    if ((_WORD)v20)
    {
      cstdlib_memmove(v10 + 1, v10, 2 * v12);
      char v13 = 0;
      *uint64_t v10 = v20;
      unsigned __int16 v27 = v12 + 1;
      LODWORD(v12) = (unsigned __int16)(v12 + 1);
      goto LABEL_30;
    }
    char v13 = 1;
  }
  else
  {
    uint64_t v47 = 0;
  }
  unsigned __int16 v27 = v12;
LABEL_30:
  uint64_t v28 = v60;
  int v29 = *(_DWORD *)(v58 + 32) - *(_DWORD *)(v60 + 32);
  int v30 = v29 + *(_DWORD *)(v58 + 36);
  if (*(_DWORD *)(a1 + 168) && v27)
  {
    int v43 = v11;
    char v44 = v13;
    unint64_t v31 = 0;
    unint64_t v45 = v12;
    uint64_t v46 = v27;
    while (1)
    {
      uint64_t v32 = (unsigned __int16)v31;
      int v33 = (__int16)v10[(unsigned __int16)v31];
      uint64_t v28 = v60;
      if (v33 < 1) {
        break;
      }
      unsigned int v34 = (unsigned __int16)(v33 + v29);
      if (v34 >= (unsigned __int16)v30) {
        unsigned __int16 v35 = v30;
      }
      else {
        unsigned __int16 v35 = v34;
      }
      if ((utoin_LookUpSubWordsInNativeRegion(a1, a2, a3, a5, v60, (uint64_t)v57, HIWORD(v56), v59, v48, v58, v29, v35, &v55, &v54, &v53) & 0x80000000) != 0)goto LABEL_61; {
      LOWORD(v29) = v55 + v35;
      }
      v30 += v55;
      ++v31;
      if (v54 == 1 && v31 < v45)
      {
        unsigned int v36 = (unsigned __int16)(v29 - v53);
        if ((bed_Goto(a2, v36) & 0x80000000) != 0
          || (bed_Insert(a2, (void *)" ", 1) & 0x80000000) != 0
          || (bed_GetpElem(a3, 0, &v57) & 0x80000000) != 0
          || (bed_GetcElem(a3, (_WORD *)&v56 + 1) & 0x80000000) != 0)
        {
          goto LABEL_61;
        }
        uint64_t v37 = (uint64_t)v57;
        if (HIWORD(v56) >= 2uLL)
        {
          unint64_t v38 = v57[8] + (unint64_t)v36;
          unsigned int v39 = v57 + 24;
          uint64_t v40 = HIWORD(v56) - 1;
          do
          {
            unint64_t v41 = *v39;
            if (v38 <= v41) {
              *unsigned int v39 = v41 + 1;
            }
            v39 += 16;
            --v40;
          }
          while (v40);
        }
        ++*(_DWORD *)(v37 + 36);
        if ((bed_Goto(a3, 1u) & 0x80000000) != 0) {
          goto LABEL_60;
        }
        DWORD2(v51) = 1;
        if (v44)
        {
          uint64_t v42 = (uint64_t)v57;
          *((void *)&v50 + 1) = (*(_DWORD *)(v47 + 8 * v31) + v57[6]);
        }
        else
        {
          *((void *)&v50 + 1) = (*(_DWORD *)(v47 + 8 * v32) + v43);
          uint64_t v42 = (uint64_t)v57;
        }
        LODWORD(v51) = *(_DWORD *)(v42 + 32) + v36;
        DWORD1(v51) = 1;
        if ((bed_marker_InjectFixedRefMarker(a3, &__b) & 0x80000000) != 0
          || (bed_GetpElem(a3, 0, &v57) & 0x80000000) != 0
          || (bed_GetcElem(a3, (_WORD *)&v56 + 1) & 0x80000000) != 0)
        {
          goto LABEL_60;
        }
        LOWORD(v29) = v29 + 1;
        ++v30;
      }
      if (v31 == v46)
      {
        uint64_t v28 = v60;
        break;
      }
    }
  }
  utoin_LookUpSubWordsInNativeRegion(a1, a2, a3, a5, v28, (uint64_t)v57, HIWORD(v56), v59, v48, v58, v29, v30, &v55, &v54, &v53);
LABEL_60:
  if (v10) {
LABEL_61:
  }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v10);
  if (v47) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v47);
  }
  return 0;
}

uint64_t utoin_LookUpWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v6 = 2370838538;
  uint64_t v29 = 0;
  uint64_t result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v26 = 0;
        long long __src = 0;
        uint64_t v28 = 0;
        uint64_t result = bed_GetpElem(a3, 0, &v31);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = bed_GetpElem(a2, 0, &v30);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = bed_GetpElem(a3, 0xFFFFu, &v29);
            if ((result & 0x80000000) == 0)
            {
              int v12 = *(_DWORD *)(v29 + 32);
              int v13 = *(_DWORD *)(v31 + 32);
              size_t v14 = *(unsigned __int16 *)(v29 + 36);
              long long __src = 0;
              uint64_t v15 = *(unsigned __int16 *)(a1 + 130);
              if (v14 <= v15)
              {
                LOWORD(v26) = v14;
                uint64_t v16 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v15 + 1, 1);
                uint64_t v25 = (uint64_t)v16;
                if (v16
                  && (cstdlib_memmove(v16, (const void *)(v30 + (unsigned __int16)(v12 - v13)), v14),
                      (long long __src = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, *(unsigned __int16 *)(a1 + 132)+ *(unsigned __int16 *)(a1 + 132)* (unint64_t)*(unsigned __int16 *)(a1 + 128)+ 1)) != 0))
                {
                  uint64_t v6 = utoin_LookUpUdctWord(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t)&v25, 1, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v24);
                  if ((v6 & 0x80000000) == 0 && HIDWORD(v26))
                  {
                    if (HIDWORD(v26) == 43 || HIDWORD(v26) == 16) {
                      *(_DWORD *)(v29 + 40) = HIDWORD(v26);
                    }
                    uint64_t v21 = bed_Insert(a4, __src, (unsigned __int16)v28);
                    if ((v21 & 0x80000000) == 0)
                    {
                      if (LH_stricmp(*(char **)(a1 + 24), v24)) {
                        uint64_t v22 = v24;
                      }
                      else {
                        uint64_t v22 = 0;
                      }
                      uint64_t v21 = utoin_ReplaceCurrentRegion(a2, a3, a4, a5, v22);
                    }
                    uint64_t v6 = v21;
                  }
                }
                else
                {
                  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 1923, 0, v17, v18, v19, v20, v23);
                }
                if (v25) {
                  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v25);
                }
                if (__src) {
                  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)__src);
                }
                return v6;
              }
              else
              {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}