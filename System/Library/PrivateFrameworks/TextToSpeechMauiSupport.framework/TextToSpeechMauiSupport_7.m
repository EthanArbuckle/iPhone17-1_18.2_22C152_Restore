_DWORD *op_open_memory(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  void *v6;
  void *v7;
  _DWORD *result;
  long long v9;
  long long v10;

  v9 = 0u;
  v10 = 0u;
  v6 = op_mem_stream_create(&v9, a2, a3);
  if (!v6)
  {
    if (a4)
    {
      result = 0;
      *a4 = -129;
      return result;
    }
    return 0;
  }
  v7 = v6;
  result = op_open_callbacks(a1, (uint64_t)v6, (uint64_t)&v9, 0, 0, a4);
  if (!result)
  {
    (*((void (**)(void *))&v10 + 1))(v7);
    return 0;
  }
  return result;
}

uint64_t op_test_memory(uint64_t a1, uint64_t a2, int *a3)
{
  long long v7 = 0u;
  long long v8 = 0u;
  v4 = op_mem_stream_create(&v7, a1, a2);
  if (!v4)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a3 = -129;
      return result;
    }
    return 0;
  }
  v5 = v4;
  uint64_t result = op_test_callbacks((uint64_t)v4, (uint64_t)&v7, 0, 0, a3);
  if (!result)
  {
    (*((void (**)(void *))&v8 + 1))(v5);
    return 0;
  }
  return result;
}

uint64_t op_test_open(_DWORD *a1)
{
  if (a1[30] != 1) {
    return 4294967165;
  }
  uint64_t v2 = op_open2(0, a1);
  if ((v2 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v3 = v2;
  bzero(a1, 0x3260uLL);
  return v3;
}

void op_free(uint64_t a1, void *a2)
{
  if (a2)
  {
    op_clear(a1, (uint64_t)a2);
    free(a2);
  }
}

uint64_t op_seekable(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t op_link_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t op_serialno(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2) {
    int v3 = v2 - 1;
  }
  else {
    int v3 = a2;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    int v3 = 0;
  }
  if (v3 < 0) {
    int v3 = *(_DWORD *)(a1 + 124);
  }
  return *(unsigned int *)(*(void *)(a1 + 48) + 376 * v3 + 48);
}

uint64_t op_channel_count(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2) {
    int v3 = v2 - 1;
  }
  else {
    int v3 = a2;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    int v3 = 0;
  }
  if (v3 < 0) {
    int v3 = *(_DWORD *)(a1 + 124);
  }
  return *(unsigned int *)(*(void *)(a1 + 48) + 376 * v3 + 56);
}

uint64_t op_head(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2) {
    int v3 = v2 - 1;
  }
  else {
    int v3 = a2;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    int v3 = 0;
  }
  if (v3 < 0) {
    int v3 = *(_DWORD *)(a1 + 124);
  }
  return *(void *)(a1 + 48) + 376 * v3 + 52;
}

uint64_t op_raw_total(uint64_t a1, unsigned int a2)
{
  if (*(int *)(a1 + 120) < 2) {
    return -131;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    return -131;
  }
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= (int)a2) {
    return -131;
  }
  if ((a2 & 0x80000000) != 0) {
    return *(void *)(a1 + 80);
  }
  if ((int)(a2 + 1) >= v2) {
    int v3 = (uint64_t *)(a1 + 80);
  }
  else {
    int v3 = (uint64_t *)(*(void *)(a1 + 48) + 376 * (a2 + 1));
  }
  uint64_t v5 = *v3;
  if (a2) {
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 376 * a2);
  }
  else {
    uint64_t v6 = 0;
  }
  return v5 - v6;
}

uint64_t op_pcm_total(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 120) < 2) {
    return -131;
  }
  int v2 = *(_DWORD *)(a1 + 44);
  if (!*(_DWORD *)(a1 + 40) || v2 <= a2) {
    return -131;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (a2 < 0)
  {
    a2 = v2 - 1;
    uint64_t v5 = *(void *)(v4 + 376 * (v2 - 1) + 24);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v4 + 376 * a2;
  uint64_t v8 = *(void *)(v6 + 32);
  int64_t v7 = *(void *)(v6 + 40);
  uint64_t v9 = v7 ^ v8;
  uint64_t v10 = v8 - v7;
  unint64_t v11 = ((v8 | 0x8000000000000000) - v7) ^ 0x8000000000000000;
  if ((uint64_t)(v8 | 0x8000000000000000) < v7) {
    unint64_t v11 = 0;
  }
  if (-2 - v8 >= (v7 ^ 0x7FFFFFFFFFFFFFFFLL)) {
    unint64_t v12 = v8 - v7;
  }
  else {
    unint64_t v12 = 0;
  }
  if (v8 >= 0) {
    unint64_t v12 = v11;
  }
  if (v9 >= 0) {
    unint64_t v12 = v10;
  }
  return v12 + v5 - *(unsigned int *)(v4 + 376 * a2 + 60);
}

uint64_t op_tags(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2 <= a2) {
    int v3 = v2 - 1;
  }
  else {
    int v3 = a2;
  }
  if (!*(_DWORD *)(a1 + 40))
  {
    int v4 = *(_DWORD *)(a1 + 120);
    if (v4 <= 2 && v4 != 1) {
      return 0;
    }
    goto LABEL_13;
  }
  if (v3 < 0)
  {
    if (*(int *)(a1 + 120) >= 3)
    {
      int v3 = *(_DWORD *)(a1 + 124);
      return *(void *)(a1 + 48) + 376 * v3 + 344;
    }
LABEL_13:
    int v3 = 0;
  }
  return *(void *)(a1 + 48) + 376 * v3 + 344;
}

uint64_t op_current_link(uint64_t a1)
{
  if (*(int *)(a1 + 120) < 2) {
    return 4294967165;
  }
  else {
    return *(unsigned int *)(a1 + 124);
  }
}

uint64_t op_bitrate(_DWORD *a1, signed int a2)
{
  if ((int)a1[30] < 2 || !a1[10] || a1[11] <= a2) {
    return 4294967165;
  }
  int64_t v4 = op_raw_total((uint64_t)a1, a2);
  unint64_t v5 = op_pcm_total((uint64_t)a1, a2);

  return op_calc_bitrate(v4, v5);
}

uint64_t op_calc_bitrate(int64_t a1, unint64_t a2)
{
  if ((uint64_t)a2 < 1) {
    return 0x7FFFFFFFLL;
  }
  if (a1 > (uint64_t)(((a2 >> 1) ^ 0x7FFFFFFFFFFFFC00) / 0x5DC00))
  {
    if (a2 > a1 / 0x15D8uLL) {
      return (uint64_t)(a1 + a2 / 0xBB800) / (uint64_t)(a2 / 0x5DC00);
    }
    return 0x7FFFFFFFLL;
  }
  if ((uint64_t)((a2 >> 1) + 384000 * a1) / (uint64_t)a2 >= 0x7FFFFFFF) {
    return 0x7FFFFFFFLL;
  }
  else {
    return (uint64_t)((a2 >> 1) + 384000 * a1) / (uint64_t)a2;
  }
}

uint64_t op_bitrate_instant(uint64_t a1)
{
  if (*(int *)(a1 + 120) < 2) {
    return 4294967165;
  }
  unint64_t v2 = *(void *)(a1 + 160);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = op_calc_bitrate(*(void *)(a1 + 152), v2);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  return result;
}

uint64_t op_raw_seek(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 120) < 2) {
    return 4294967165;
  }
  if (!*(_DWORD *)(a1 + 40)) {
    return 4294967158;
  }
  if (a2 < 0 || *(void *)(a1 + 80) < a2) {
    return 4294967165;
  }
  *(_DWORD *)(a1 + 12820) = 0;
  *(void *)(a1 + 136) = -1;
  int v3 = (void *)(a1 + 136);
  *(_DWORD *)(a1 + 12884) = 0;
  *(_DWORD *)(a1 + 120) = 2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = -1;
  if ((op_seek_helper((void *)a1, a2) & 0x80000000) != 0) {
    return 4294967168;
  }
  uint64_t result = op_fetch_and_process_page(a1, 0, -1, 1, 1);
  if (result == -2)
  {
    *(_DWORD *)(a1 + 12820) = 0;
    *(_DWORD *)(a1 + 12884) = 0;
    *int v3 = -1;
    *(void *)(a1 + 144) = -1;
    if (!*(_DWORD *)(a1 + 40)) {
      opus_tags_clear(*(void *)(a1 + 48) + 344);
    }
    uint64_t result = 0;
    uint64_t v5 = *(int *)(a1 + 44) - 1;
    *(_DWORD *)(a1 + 120) = 2;
    *(_DWORD *)(a1 + 124) = v5;
    *(void *)(a1 + 136) = *(void *)(*(void *)(a1 + 48) + 376 * v5 + 32);
    *(_DWORD *)(a1 + 128) = 0;
  }
  return result;
}

uint64_t op_seek_helper(void *a1, uint64_t a2)
{
  if (a1[9] != a2)
  {
    int v3 = (unsigned int (*)(void))a1[1];
    if (!v3 || v3(a1[4])) {
      return 4294967168;
    }
    a1[9] = a2;
    ogg_sync_reset((uint64_t)(a1 + 11));
  }
  return 0;
}

uint64_t op_fetch_and_process_page(uint64_t a1, long long *a2, uint64_t next_page, int a4, int a5)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 48);
  int v50 = *(_DWORD *)(a1 + 40);
  if (v50) {
    uint64_t v8 = *(unsigned int *)(a1 + 124);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v52 = v8;
  uint64_t v53 = *(void *)(a1 + 48);
  v49 = (void *)(a1 + 136);
  int v9 = *(_DWORD *)(v7 + 376 * (int)v8 + 48);
  v46 = (_OWORD *)(v7 + 344);
  v47 = (unsigned int *)(v7 + 52);
  v54 = (int64_t *)(a1 + 608);
  uint64_t v55 = a1 + 168;
  while (1)
  {
    long long v59 = 0u;
    long long v60 = 0u;
    if (!a2) {
      break;
    }
    long long v10 = a2[1];
    long long v59 = *a2;
    long long v60 = v10;
    if (next_page < 0) {
      goto LABEL_116;
    }
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 120);
    if (v11 < 3) {
      goto LABEL_12;
    }
    if (v9 == ogg_page_serialno((uint64_t)&v59))
    {
      int v11 = *(_DWORD *)(a1 + 120);
LABEL_12:
      *(void *)(a1 + 152) += *((void *)&v59 + 1);
      goto LABEL_13;
    }
    if (!ogg_page_bos((uint64_t)&v59)) {
      goto LABEL_100;
    }
    if (!a4) {
      return 4294967294;
    }
    int v11 = *(_DWORD *)(a1 + 120);
    if (v11 > 3)
    {
      *(_DWORD *)(a1 + 12820) = 0;
      *(_DWORD *)(a1 + 12884) = 0;
      void *v49 = -1;
      v49[1] = -1;
      if (!*(_DWORD *)(a1 + 40)) {
        opus_tags_clear(*(void *)(a1 + 48) + 344);
      }
      *(_DWORD *)(a1 + 120) = 2;
      goto LABEL_37;
    }
LABEL_13:
    if (v11 >= 3)
    {
      if (v11 != 3) {
        goto LABEL_15;
      }
      goto LABEL_93;
    }
LABEL_37:
    if (!v50)
    {
      do
      {
        uint64_t result = op_fetch_headers(a1, v47, v46, 0, 0, 0, &v59);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = op_find_initial_pcm_offset(a1, v53, &v59);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v9 = *(_DWORD *)(a1 + 544);
        *(_DWORD *)(*(void *)(a1 + 48) + 48) = v9;
        ++*(_DWORD *)(a1 + 124);
      }
      while (result);
      if (*(int *)(a1 + 12820) >= 1) {
        return op_make_decode_ready(0, a1);
      }
      goto LABEL_100;
    }
    int v25 = ogg_page_serialno((uint64_t)&v59);
    int v26 = v25;
    uint64_t v27 = v52;
    uint64_t v28 = (int)v52;
    if (*(_DWORD *)(v53 + 376 * (int)v52 + 48) != v25)
    {
      uint64_t v27 = (int)v52 + 1;
      if ((int)v52 + 1 >= *(_DWORD *)(a1 + 44) || (uint64_t v28 = (int)v52 + 1, *(_DWORD *)(v53 + 376 * v27 + 48) != v25))
      {
        uint64_t link_from_serialno = op_get_link_from_serialno(a1, v52, next_page, v25);
        if ((link_from_serialno & 0x80000000) != 0) {
          goto LABEL_100;
        }
        uint64_t v27 = link_from_serialno;
        uint64_t v28 = link_from_serialno;
      }
    }
    *(_DWORD *)(a1 + 124) = v27;
    ogg_stream_reset_serialno(v55, v26);
    *(_DWORD *)(a1 + 120) = 3;
    if (next_page <= *(void *)(v53 + 376 * v28 + 8))
    {
      uint64_t v43 = v53 + 376 * v28;
      *(void *)(a1 + 136) = *(void *)(v43 + 40);
      *(void *)(a1 + 144) = -1;
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(v43 + 60);
      a5 = 1;
    }
    uint64_t v52 = v27;
    int v9 = v26;
LABEL_93:
    uint64_t result = op_make_decode_ready(0, a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
LABEL_15:
    ogg_stream_pagein(v55, &v59);
    if (*(int *)(a1 + 120) < 4) {
      goto LABEL_100;
    }
    unsigned int v12 = op_collect_audio_packets(a1, (uint64_t)v61);
    if ((v12 & 0x80000000) == 0)
    {
      unsigned int v13 = v12;
LABEL_18:
      int v14 = 1;
      goto LABEL_19;
    }
    do
      unsigned int v29 = op_collect_audio_packets(a1, (uint64_t)v61);
    while ((v29 & 0x80000000) != 0);
    unsigned int v13 = v29;
    if (a5) {
      goto LABEL_18;
    }
    int v14 = 0;
    void *v49 = -1;
LABEL_19:
    uint64_t v15 = *(unsigned int *)(a1 + 12820);
    if ((int)v15 < 1) {
      goto LABEL_98;
    }
    uint64_t v16 = a1 + 48 * (v15 - 1);
    unint64_t v17 = *(void *)(v16 + 608);
    unint64_t v56 = v17;
    unint64_t v57 = 0;
    int v18 = *(_DWORD *)(v16 + 600);
    int64_t v19 = *(void *)(a1 + 136);
    int64_t v58 = v19;
    if (v19 == -1)
    {
      if (v18)
      {
        *(_DWORD *)(a1 + 12820) = 0;
        if ((v14 & 1) == 0) {
          return 4294967293;
        }
        goto LABEL_100;
      }
      int64_t v30 = *(void *)(v53 + 376 * (int)v52 + 40);
      int64_t v58 = v30;
      if (v17 == -1)
      {
        int64_t v19 = v30;
      }
      else
      {
        op_granpos_add(&v58, v17, -v13);
        int64_t v19 = v58;
      }
      if (((v19 ^ v30) & 0x8000000000000000) == 0)
      {
LABEL_47:
        int64_t v31 = v19 - v30;
        goto LABEL_48;
      }
      if (v19 < 0)
      {
        if (-2 - v19 >= (v30 ^ 0x7FFFFFFFFFFFFFFFLL)) {
          goto LABEL_47;
        }
      }
      else if ((uint64_t)(v19 | 0x8000000000000000) >= v30)
      {
        int64_t v31 = ((v19 | 0x8000000000000000) - v30) ^ 0x8000000000000000;
LABEL_48:
        int v32 = *(_DWORD *)(v53 + 376 * (int)v52 + 60);
        if (v32 <= 3840) {
          int v33 = 3840;
        }
        else {
          int v33 = *(_DWORD *)(v53 + 376 * (int)v52 + 60);
        }
        int v34 = v32 - v31;
        if (v31 > (unint64_t)(v33 - 3840)) {
          int v34 = 3840;
        }
        if (v31 >= 0) {
          int v35 = v34;
        }
        else {
          int v35 = 3840;
        }
LABEL_56:
        *(_DWORD *)(a1 + 128) = v35;
        goto LABEL_21;
      }
      int v35 = 3840;
      goto LABEL_56;
    }
LABEL_21:
    if (v17 == -1)
    {
      if ((op_granpos_add(&v56, v19, v13) & 0x80000000) != 0)
      {
        unint64_t v17 = *(void *)(v53 + 376 * (int)v52 + 32);
        unint64_t v56 = v17;
      }
      else
      {
        unint64_t v17 = v56;
      }
    }
    if (v18)
    {
      if (((v19 ^ v17) & 0x8000000000000000) == 0) {
        goto LABEL_60;
      }
      if ((v17 & 0x8000000000000000) != 0)
      {
        if ((uint64_t)(-2 - v17) >= (v19 ^ 0x7FFFFFFFFFFFFFFFLL))
        {
LABEL_60:
          int64_t v36 = v17 - v19;
          goto LABEL_61;
        }
      }
      else if ((uint64_t)(v17 | 0x8000000000000000) >= v19)
      {
        int64_t v36 = ((v17 | 0x8000000000000000) - v19) ^ 0x8000000000000000;
LABEL_61:
        if (v36 >= v13) {
          goto LABEL_23;
        }
        uint64_t v37 = 0;
        unint64_t v57 = v19;
        int64_t v45 = v17 | 0x8000000000000000;
        v38 = v54;
        while (2)
        {
          if ((v36 & 0x8000000000000000) == 0)
          {
            int v39 = v61[v37];
            uint64_t v40 = v39;
            goto LABEL_66;
          }
          int v39 = v61[v37];
          uint64_t v40 = v39;
          if (v36 + 0x7FFFFFFFFFFFFFFFLL < v39) {
            uint64_t v41 = v39 + 1;
          }
          else {
LABEL_66:
          }
            uint64_t v41 = v40 - v36;
          if (v41 < 1)
          {
            op_granpos_add(&v57, v19, v39);
            int64_t v19 = v57;
          }
          else
          {
            if (v41 > v39)
            {
              LODWORD(v15) = v37;
              goto LABEL_97;
            }
            unint64_t v57 = v17;
            *(v38 - 1) = 1;
            int64_t v19 = v17;
          }
          int64_t *v38 = v19;
          if (((v19 ^ v17) & 0x8000000000000000) != 0)
          {
            if ((v17 & 0x8000000000000000) != 0)
            {
              if ((uint64_t)(-2 - v17) >= (v19 ^ 0x7FFFFFFFFFFFFFFFLL)) {
                int64_t v36 = v17 - v19;
              }
              else {
                int64_t v36 = v41;
              }
            }
            else
            {
              int64_t v36 = (v45 - v19) ^ 0x8000000000000000;
              if (v45 < v19) {
                int64_t v36 = v41;
              }
            }
          }
          else
          {
            int64_t v36 = v17 - v19;
          }
          ++v37;
          v38 += 6;
          if (v15 == v37) {
            goto LABEL_97;
          }
          continue;
        }
      }
    }
LABEL_23:
    if ((op_granpos_add(&v58, v17, -v13) & 0x80000000) != 0) {
      int64_t v58 = 0;
    }
    v20 = v61;
    uint64_t v21 = v15;
    v22 = (unint64_t *)v54;
    do
    {
      if ((op_granpos_add(&v57, v17, -v13) & 0x80000000) != 0)
      {
        unint64_t v23 = 0;
        unint64_t v57 = 0;
      }
      else
      {
        unint64_t v23 = v57;
      }
      int v24 = *v20++;
      v13 -= v24;
      op_granpos_add(&v57, v23, v24);
      unint64_t *v22 = v57;
      v22 += 6;
      --v21;
    }
    while (v21);
LABEL_97:
    *(void *)(a1 + 136) = v58;
    *(void *)(a1 + 144) = next_page;
    *(_DWORD *)(a1 + 12820) = v15;
LABEL_98:
    if (!v14) {
      return 4294967293;
    }
    if ((int)v15 > 0) {
      return 0;
    }
LABEL_100:
    a2 = 0;
  }
  next_page = op_get_next_page(a1, &v59, *(void *)(a1 + 80));
  if ((next_page & 0x8000000000000000) == 0) {
    goto LABEL_9;
  }
LABEL_116:
  if (next_page == -1) {
    return 4294967294;
  }
  else {
    return next_page;
  }
}

uint64_t op_pcm_seek(uint64_t a1, int64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 120);
  if (v2 >= 2)
  {
    if (!*(_DWORD *)(a1 + 40)) {
      return 4294967158;
    }
    if ((a2 & 0x8000000000000000) == 0)
    {
      int v4 = 0;
      int v5 = *(_DWORD *)(a1 + 44);
      uint64_t v6 = *(void *)(a1 + 48);
      do
      {
        if (*(void *)(v6 + 376 * (v4 + ((v5 - v4) >> 1)) + 24) > a2) {
          int v5 = v4 + ((v5 - v4) >> 1);
        }
        else {
          v4 += (v5 - v4) >> 1;
        }
      }
      while (v5 - v4 > 1);
      uint64_t v7 = v6 + 376 * v4;
      int64_t v10 = *(void *)(v7 + 40);
      uint64_t v8 = v7 + 40;
      uint64_t v9 = v10;
      unsigned int v12 = (int *)(v8 + 20);
      uint64_t v11 = *(int *)(v8 + 20);
      uint64_t v13 = *(void *)(v8 - 8);
      int64_t v14 = a2 - *(void *)(v8 - 16);
      uint64_t v15 = v13 ^ v10;
      uint64_t v16 = v13 - v10;
      unint64_t v17 = ((v13 | 0x8000000000000000) - v10) ^ 0x8000000000000000;
      if ((uint64_t)(v13 | 0x8000000000000000) < v10) {
        unint64_t v17 = 0;
      }
      if (-2 - v13 >= (v9 ^ 0x7FFFFFFFFFFFFFFFLL)) {
        unint64_t v18 = v16;
      }
      else {
        unint64_t v18 = 0;
      }
      if (v13 < 0) {
        unint64_t v19 = v18;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v15 >= 0) {
        unint64_t v19 = v16;
      }
      if (v14 < (uint64_t)(v19 - v11))
      {
        uint64_t v107 = *(void *)(a1 + 48);
        uint64_t v20 = v14 + v11;
        if (v9 <= (v20 ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          unint64_t v21 = v9;
        }
        else
        {
          v20 += v9 + 0x8000000000000000;
          unint64_t v21 = 0x8000000000000000;
        }
        uint64_t v22 = v21 + v20;
        if (v21 + v20 != -1)
        {
          unint64_t v23 = ((v22 | 0x8000000000000000) - v9) ^ 0x8000000000000000;
          if ((uint64_t)(v22 | 0x8000000000000000) < v9) {
            unint64_t v23 = a2;
          }
          if (-2 - v22 >= (v9 ^ 0x7FFFFFFFFFFFFFFFuLL)) {
            unint64_t v24 = v22 - v9;
          }
          else {
            unint64_t v24 = a2;
          }
          if (v22 < 0) {
            unint64_t v23 = v24;
          }
          if ((v9 ^ v22) < 0) {
            unint64_t v25 = v23;
          }
          else {
            unint64_t v25 = v22 - v9;
          }
          uint64_t v100 = v25;
          BOOL v26 = v2 > 3 && v4 == *(_DWORD *)(a1 + 124);
          int v27 = v26;
          if (!v26) {
            goto LABEL_46;
          }
          unint64_t v28 = *(void *)(a1 + 136);
          *(void *)&v117[0] = v28;
          if (v28 == -1) {
            goto LABEL_46;
          }
          op_granpos_add(v117, v28, -((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) & ~((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) >> 31)));
          if ((*(void *)&v117[0] ^ v22) < 0)
          {
            if ((v22 & 0x8000000000000000) == 0)
            {
              if ((uint64_t)(v22 | 0x8000000000000000) < *(uint64_t *)&v117[0]) {
                goto LABEL_46;
              }
              int64_t v29 = ((v22 | 0x8000000000000000) - *(void *)&v117[0]) ^ 0x8000000000000000;
              goto LABEL_45;
            }
            if (-2 - v22 < (*(void *)&v117[0] ^ 0x7FFFFFFFFFFFFFFFuLL)) {
              goto LABEL_46;
            }
          }
          int64_t v29 = v22 - *(void *)&v117[0];
LABEL_45:
          if ((unint64_t)v29 >> 5 <= 0x86) {
            goto LABEL_255;
          }
LABEL_46:
          memset(v117, 0, 32);
          *(void *)(a1 + 152) = 0;
          *(void *)(a1 + 160) = 0;
          int64_t v30 = *(void *)v8;
          uint64_t v110 = *(void *)(v8 - 8);
          int v98 = v4;
          uint64_t v31 = v107 + 376 * v4;
          int v32 = *(_DWORD *)(v31 + 48);
          uint64_t v33 = *(void *)(v31 + 8);
          if ((unint64_t)v22 >= 0xF00)
          {
            int v34 = -3840;
            if (v22 <= (uint64_t)0x8000000000000EFFLL) {
              uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v35 = v22;
            }
            if (v22 <= (uint64_t)0x8000000000000EFFLL) {
              int v34 = v22 - 3839;
            }
            uint64_t v36 = v35 + v34;
            if (v36 < 0)
            {
              if ((v30 & 0x8000000000000000) == 0)
              {
LABEL_55:
                uint64_t v116 = 0;
                op_granpos_add(&v116, v30, *v12);
                v106 = v12;
                unint64_t v111 = v36;
                uint64_t v101 = v9;
                int64_t v109 = v30;
                if (v36 < 0)
                {
                  if ((v116 & 0x8000000000000000) == 0 || v116 <= v36)
                  {
LABEL_58:
                    uint64_t v38 = *(void *)(v107 + 376 * v4 + 16);
                    unint64_t v37 = 0;
                    if (!v27) {
                      goto LABEL_94;
                    }
                    int v39 = *(_DWORD *)(a1 + 12820);
                    BOOL v40 = __OFSUB__(v39, 1);
                    int v41 = v39 - 1;
                    if (v41 < 0 != v40) {
                      goto LABEL_94;
                    }
                    uint64_t v42 = *(void *)(a1 + 72);
                    if (v42 > v38) {
                      goto LABEL_94;
                    }
                    uint64_t v43 = *(void *)(a1 + 48 * v41 + 608);
                    if (v43 == -1) {
                      goto LABEL_276;
                    }
                    if (v109 < 0)
                    {
                      unint64_t v37 = 0;
                      if ((v43 & 0x8000000000000000) == 0)
                      {
                        unsigned int v12 = v106;
                        goto LABEL_94;
                      }
                      if (v43 <= v109) {
                        goto LABEL_282;
                      }
                    }
                    else if ((v43 & 0x8000000000000000) == 0 && v43 <= v109)
                    {
                      goto LABEL_276;
                    }
                    if ((v110 & 0x8000000000000000) == 0)
                    {
                      unint64_t v37 = 0;
                      if ((v43 & 0x8000000000000000) == 0 && v110 > v43) {
                        goto LABEL_68;
                      }
LABEL_282:
                      unsigned int v12 = v106;
                      goto LABEL_94;
                    }
                    if ((v43 & 0x8000000000000000) == 0 || v110 > v43)
                    {
LABEL_68:
                      if (((v43 ^ v36) & 0x8000000000000000) == 0) {
                        goto LABEL_69;
                      }
                      if (v43 < 0)
                      {
                        if (-2 - v43 >= (v36 ^ 0x7FFFFFFFFFFFFFFFuLL))
                        {
LABEL_69:
                          unint64_t v37 = v43 - v36;
                          if (((v43 - v36) & 0x8000000000000000) == 0) {
                            goto LABEL_70;
                          }
                          goto LABEL_280;
                        }
                      }
                      else
                      {
                        unint64_t v93 = (v43 | 0x8000000000000000) - v36;
                        if ((uint64_t)(v43 | 0x8000000000000000) >= v36)
                        {
                          unint64_t v37 = v93 ^ 0x8000000000000000;
                          if (((v93 ^ 0x8000000000000000) & 0x8000000000000000) != 0)
                          {
LABEL_280:
                            if (v42 - v33 >= (v38 - v33) >> 1 || v37 >= 0xFFFFFFFFFFA81C01)
                            {
                              uint64_t v108 = *(void *)(a1 + 72);
                              if (*(void *)(a1 + 192) < *(void *)(a1 + 184)) {
                                uint64_t v108 = *(void *)(a1 + 144);
                              }
                              *(void *)(a1 + 136) = -1;
                              *(_DWORD *)(a1 + 12820) = 0;
                              *(_DWORD *)(a1 + 12884) = 0;
                              v99 = (int64_t *)(a1 + 136);
                              *(void *)(a1 + 144) = -1;
                              int v52 = 1;
                              int64_t v109 = v43;
                              uint64_t v33 = v42;
                              unsigned int v12 = v106;
                              goto LABEL_96;
                            }
                            goto LABEL_282;
                          }
LABEL_70:
                          uint64_t v115 = 0;
                          unint64_t v44 = *(void *)(a1 + 608);
                          int packet_duration = op_get_packet_duration(*(unsigned char **)(a1 + 576), *(_DWORD *)(a1 + 584));
                          op_granpos_add(&v115, v44, -packet_duration);
                          uint64_t v46 = v115;
                          if (v115 < 0)
                          {
                            uint64_t v36 = v111;
                            if ((v111 & 0x8000000000000000) == 0) {
                              goto LABEL_73;
                            }
                          }
                          else
                          {
                            uint64_t v36 = v111;
                            if ((v111 & 0x8000000000000000) != 0) {
                              goto LABEL_87;
                            }
                          }
                          if (v115 > v36)
                          {
LABEL_73:
                            BOOL v48 = v42 - v33 <= (v38 - v33) >> 1 || v37 < 0x57E400;
                            *(void *)(a1 + 136) = -1;
                            uint64_t v49 = v110;
                            if (v48) {
                              uint64_t v49 = v43;
                            }
                            uint64_t v110 = v49;
                            int v50 = *(_DWORD *)(a1 + 40);
                            *(_DWORD *)(a1 + 12820) = 0;
                            if (v48) {
                              uint64_t v38 = v42;
                            }
                            *(_DWORD *)(a1 + 12884) = 0;
                            v99 = (int64_t *)(a1 + 136);
                            *(void *)(a1 + 144) = -1;
                            if (!v50) {
                              opus_tags_clear(*(void *)(a1 + 48) + 344);
                            }
                            unsigned int v12 = v106;
                            goto LABEL_95;
                          }
LABEL_87:
                          *(_DWORD *)(a1 + 12816) = 0;
                          *(_DWORD *)(a1 + 12884) = 0;
                          *(void *)(a1 + 136) = v46;
                          *(_DWORD *)(a1 + 120) = 3;
                          uint64_t decode_ready = op_make_decode_ready(0, a1);
                          goto LABEL_206;
                        }
                      }
                      unint64_t v37 = 0;
                      goto LABEL_70;
                    }
LABEL_276:
                    unint64_t v37 = 0;
                    goto LABEL_282;
                  }
                  unint64_t v37 = 0;
                }
                else
                {
                  unint64_t v37 = 0;
                  if ((v116 & 0x8000000000000000) == 0)
                  {
                    uint64_t v38 = v33;
                    if (v116 <= v36) {
                      goto LABEL_58;
                    }
LABEL_94:
                    *(void *)(a1 + 136) = -1;
                    *(_DWORD *)(a1 + 12820) = 0;
                    *(_DWORD *)(a1 + 12884) = 0;
                    v99 = (int64_t *)(a1 + 136);
                    *(void *)(a1 + 144) = -1;
LABEL_95:
                    *(_DWORD *)(a1 + 120) = 2;
                    ogg_stream_reset_serialno(a1 + 168, v32);
                    int v52 = 0;
                    uint64_t v108 = v33;
LABEL_96:
                    *(_DWORD *)(a1 + 120) = 3;
                    *(_DWORD *)(a1 + 124) = v4;
                    uint64_t v105 = v33;
                    if (v38 <= v33)
                    {
                      uint64_t decode_ready = -1;
                      goto LABEL_210;
                    }
                    uint64_t v53 = 0;
                    uint64_t v94 = -2 - v36;
                    int64_t v95 = v36 | 0x8000000000000000;
                    uint64_t v114 = a1 + 168;
                    uint64_t decode_ready = -1;
                    uint64_t v102 = v38 - v33;
                    uint64_t v103 = v38 - v33;
                    uint64_t v97 = v38 - v33;
                    uint64_t v54 = v38;
                    uint64_t v55 = v33;
                    int64_t v113 = v109;
                    while (1)
                    {
                      unint64_t v56 = v54 - v55;
                      if (v54 - v55 >= 0x10000)
                      {
                        uint64_t v58 = v54;
                        unint64_t v59 = v56 >> 1;
                        if (v53)
                        {
                          uint64_t v60 = v59 + v55;
                          uint64_t v61 = v102;
                        }
                        else
                        {
                          if (((v113 ^ v111) & 0x8000000000000000) != 0)
                          {
                            if ((v111 & 0x8000000000000000) != 0)
                            {
                              if (v94 >= (v113 ^ 0x7FFFFFFFFFFFFFFFLL)) {
                                unint64_t v62 = v111 - v113;
                              }
                              else {
                                unint64_t v62 = v37;
                              }
                            }
                            else if (v95 >= v113)
                            {
                              unint64_t v62 = (v95 - v113) ^ 0x8000000000000000;
                            }
                            else
                            {
                              unint64_t v62 = v37;
                            }
                          }
                          else
                          {
                            unint64_t v62 = v111 - v113;
                          }
                          uint64_t v61 = v102;
                          unint64_t v63 = ((v110 | 0x8000000000000000) - v113) ^ 0x8000000000000000;
                          if ((uint64_t)(v110 | 0x8000000000000000) < v113) {
                            unint64_t v63 = 0;
                          }
                          if (-2 - v110 >= (v113 ^ 0x7FFFFFFFFFFFFFFFLL)) {
                            unint64_t v64 = v110 - v113;
                          }
                          else {
                            unint64_t v64 = 0;
                          }
                          if (v110 < 0) {
                            unint64_t v63 = v64;
                          }
                          if ((v113 ^ v110) < 0) {
                            uint64_t v65 = v63;
                          }
                          else {
                            uint64_t v65 = v110 - v113;
                          }
                          unint64_t v37 = v62;
                          uint64_t v60 = v55 + op_rescale64(v62, v65, v56) - 0x10000;
                        }
                        uint64_t v53 = 0;
                        uint64_t v97 = v61 >> 1;
                        uint64_t v102 = v103 >> 1;
                        uint64_t v103 = v59;
                        if (v60 - 0x10000 >= v55) {
                          uint64_t v57 = v60;
                        }
                        else {
                          uint64_t v57 = v55;
                        }
                        uint64_t v54 = v58;
                      }
                      else
                      {
                        uint64_t v57 = v55;
                      }
                      if (v57 != *(void *)(a1 + 72))
                      {
                        uint64_t v66 = v53;
                        if (v52) {
                          ogg_stream_reset(v114);
                        }
                        uint64_t v67 = op_seek_helper((void *)a1, v57);
                        if ((v67 & 0x80000000) != 0) {
                          return v67;
                        }
                        int v52 = 0;
                        uint64_t decode_ready = -1;
                        uint64_t v53 = v66;
                      }
                      if (v54 <= v55)
                      {
                        uint64_t v57 = v54;
                        goto LABEL_182;
                      }
                      uint64_t v112 = v54;
                      unsigned int v96 = v53;
                      unint64_t v104 = v37;
                      int v68 = 0x10000;
                      uint64_t v69 = v38;
                      while (1)
                      {
                        while (1)
                        {
                          do
                          {
                            while (1)
                            {
                              uint64_t next_page = op_get_next_page(a1, v117, v69);
                              uint64_t decode_ready = next_page;
                              if ((next_page & 0x8000000000000000) == 0) {
                                break;
                              }
                              if (next_page != -1)
                              {
                                uint64_t v9 = v101;
                                goto LABEL_206;
                              }
                              if (v57 <= v55 + 1)
                              {
                                uint64_t decode_ready = -1;
                                goto LABEL_209;
                              }
                              if (v52) {
                                ogg_stream_reset(v114);
                              }
                              if (v57 - v68 <= v55) {
                                uint64_t v57 = v55;
                              }
                              else {
                                v57 -= v68;
                              }
                              uint64_t v67 = op_seek_helper((void *)a1, v57);
                              if ((v67 & 0x80000000) != 0) {
                                return v67;
                              }
                              int v52 = 0;
                              if (2 * v68 >= 0x100000) {
                                int v68 = 0x100000;
                              }
                              else {
                                v68 *= 2;
                              }
                              uint64_t decode_ready = -1;
                              int64_t v72 = v113;
                              uint64_t v69 = v38;
LABEL_148:
                              int64_t v113 = v72;
                              if (v55 >= v112)
                              {
                                int64_t v113 = v72;
LABEL_180:
                                uint64_t v57 = v112;
                                uint64_t v38 = v69;
LABEL_181:
                                unint64_t v37 = v104;
                                uint64_t v53 = v96;
                                goto LABEL_182;
                              }
                            }
                            if (next_page < v38) {
                              uint64_t v38 = next_page;
                            }
                          }
                          while (v32 != ogg_page_serialno((uint64_t)v117));
                          if ((int)ogg_page_packets((uint64_t *)v117) >= 1) {
                            break;
                          }
                          if (v52) {
                            ogg_stream_pagein(v114, v117);
                          }
                        }
                        uint64_t v71 = ogg_page_granulepos((uint64_t)v117);
                        if (v71 != -1) {
                          break;
                        }
                        if (v52)
                        {
                          ogg_stream_reset(v114);
                          int v52 = 0;
                        }
                      }
                      int64_t v72 = v71;
                      if ((v71 & 0x8000000000000000) == 0) {
                        break;
                      }
                      if ((v111 & 0x8000000000000000) != 0 && (uint64_t)v111 > v71)
                      {
                        uint64_t v55 = *(void *)(a1 + 72);
                        int64_t v73 = v113;
                        if ((v113 & 0x8000000000000000) == 0)
                        {
                          if ((v110 & 0x8000000000000000) == 0) {
                            goto LABEL_180;
                          }
                          goto LABEL_157;
                        }
LABEL_154:
                        if (v73 > v71) {
                          goto LABEL_180;
                        }
                        if ((v110 & 0x8000000000000000) == 0)
                        {
                          if (v71 < 0) {
                            goto LABEL_180;
                          }
                          goto LABEL_157;
                        }
                        if (v71 < 0)
                        {
LABEL_157:
                          if (v71 > v110) {
                            goto LABEL_180;
                          }
                        }
                        if (v52) {
                          ogg_stream_reset(v114);
                        }
                        uint64_t v108 = v55;
                        if (*(unsigned __int8 *)(*(unsigned __int8 *)(*(void *)&v117[0] + 26)
                                                + *(void *)&v117[0]
                                                + 26) == 255)
                        {
                          op_buffer_continued_data(a1, v117);
                          uint64_t v108 = decode_ready;
                        }
                        if (((v72 ^ v111) & 0x8000000000000000) != 0)
                        {
                          if ((v111 & 0x8000000000000000) != 0)
                          {
                            int64_t v74 = v104;
                            if (v94 >= (v72 ^ 0x7FFFFFFFFFFFFFFFLL)) {
                              int64_t v74 = v111 - v72;
                            }
                          }
                          else
                          {
                            int64_t v74 = v104;
                            if (v95 >= v72) {
                              int64_t v74 = (v95 - v72) ^ 0x8000000000000000;
                            }
                          }
                        }
                        else
                        {
                          int64_t v74 = v111 - v72;
                        }
                        int v52 = 1;
                        int64_t v109 = v72;
                        unint64_t v104 = v74;
                        uint64_t v105 = v55;
                        uint64_t v57 = v55;
                        if (v74 > 48000)
                        {
                          int64_t v113 = v72;
                          int64_t v109 = v72;
                          uint64_t v57 = v112;
                          uint64_t v38 = v69;
                          uint64_t v105 = v55;
                          goto LABEL_181;
                        }
                        goto LABEL_148;
                      }
LABEL_184:
                      if (v57 <= v55 + 1)
                      {
LABEL_209:
                        unsigned int v12 = v106;
                        goto LABEL_210;
                      }
                      uint64_t v53 = v57 - v55 > 2 * v97;
                      if (v110 < 0)
                      {
                        if (v71 < 0)
                        {
LABEL_187:
                          if (v110 <= v71) {
                            goto LABEL_192;
                          }
                        }
                        if (v113 < 0)
                        {
                          if ((v71 & 0x8000000000000000) == 0) {
                            goto LABEL_192;
                          }
LABEL_190:
                          if (v113 > v71) {
                            goto LABEL_192;
                          }
                        }
                        else if ((v71 & 0x8000000000000000) == 0)
                        {
                          goto LABEL_190;
                        }
                        uint64_t v110 = v71;
                        goto LABEL_192;
                      }
                      if ((v71 & 0x8000000000000000) == 0) {
                        goto LABEL_187;
                      }
LABEL_192:
                      unint64_t v37 = v104;
LABEL_182:
                      uint64_t v54 = v57;
                      BOOL v75 = v55 < v57;
                      unsigned int v12 = v106;
                      if (!v75)
                      {
LABEL_210:
                        if (v52) {
                          goto LABEL_211;
                        }
                        if (v108 == decode_ready)
                        {
                          if (v108 >= v105)
                          {
LABEL_211:
                            *(void *)(a1 + 136) = v109;
                            *(void *)(a1 + 144) = v108;
                            if (decode_ready < 0)
                            {
                              uint64_t v9 = v101;
                              goto LABEL_224;
                            }
                            v76 = v117;
                            uint64_t v9 = v101;
LABEL_225:
                            if ((op_fetch_and_process_page(a1, v76, decode_ready, 0, 1) & 0x80000000) != 0) {
                              return 4294967159;
                            }
                            if (*v99 < 0)
                            {
                              int64_t v79 = v111;
                              if ((v111 & 0x8000000000000000) == 0) {
                                return 4294967159;
                              }
                            }
                            else
                            {
                              int64_t v79 = v111;
                              if ((v111 & 0x8000000000000000) != 0) {
                                goto LABEL_229;
                              }
                            }
                            if (*v99 > v79) {
                              return 4294967159;
                            }
                            goto LABEL_229;
                          }
                          uint64_t v9 = v101;
                          uint64_t v77 = v107;
                          if ((v108 & 0x8000000000000000) == 0) {
                            goto LABEL_222;
                          }
LABEL_220:
                          uint64_t v78 = op_get_next_page(a1, v117, *(void *)(v77 + 376 * v98 + 16));
                          if (v78 > -2)
                          {
                            if (v78 != v108) {
                              return 4294967159;
                            }
LABEL_222:
                            op_buffer_continued_data(a1, v117);
LABEL_223:
                            *(void *)(a1 + 136) = v109;
                            *(void *)(a1 + 144) = v108;
                            uint64_t decode_ready = -1;
LABEL_224:
                            v76 = 0;
                            goto LABEL_225;
                          }
                          uint64_t decode_ready = v78;
LABEL_206:
                          unsigned int v12 = v106;
                          if ((decode_ready & 0x80000000) != 0) {
                            return decode_ready;
                          }
LABEL_229:
                          uint64_t v80 = 3840;
                          if (v100 > 3840) {
                            uint64_t v80 = v100;
                          }
                          uint64_t v81 = v80 - 3840;
                          if (v100 <= *v12) {
                            int64_t v82 = 0;
                          }
                          else {
                            int64_t v82 = v81;
                          }
                          uint64_t v83 = v9 ^ 0x7FFFFFFFFFFFFFFFLL;
                          while (1)
                          {
                            int v84 = *(_DWORD *)(a1 + 12820);
                            uint64_t v85 = *(void *)(a1 + 136);
                            int v86 = *(_DWORD *)(a1 + 12816);
                            if (v86 < v84) {
                              break;
                            }
LABEL_247:
                            *(void *)(a1 + 136) = v85;
                            *(_DWORD *)(a1 + 12816) = v86;
                            if ((op_fetch_and_process_page(a1, 0, -1, 0, 1) & 0x80000000) != 0) {
                              return 4294967159;
                            }
                          }
                          v87 = (uint64_t *)(a1 + 608 + 48 * v86);
                          while (2)
                          {
                            uint64_t v88 = v85;
                            uint64_t v89 = *v87;
                            v87 += 6;
                            uint64_t v85 = v89;
                            if ((v89 ^ v9) < 0)
                            {
                              if (v85 < 0)
                              {
                                if (-2 - v85 >= v83) {
                                  goto LABEL_238;
                                }
                              }
                              else if ((uint64_t)(v85 | 0x8000000000000000) >= v9)
                              {
                                int64_t v90 = ((v85 | 0x8000000000000000) - v9) ^ 0x8000000000000000;
                                goto LABEL_239;
                              }
                            }
                            else
                            {
LABEL_238:
                              int64_t v90 = v85 - v9;
LABEL_239:
                              if (v90 > v82)
                              {
                                *(void *)(a1 + 136) = v88;
                                *(_DWORD *)(a1 + 12816) = v86;
                                if (((v88 ^ v9) & 0x8000000000000000) == 0) {
                                  goto LABEL_250;
                                }
                                if ((v88 & 0x8000000000000000) == 0)
                                {
                                  if ((uint64_t)(v88 | 0x8000000000000000) >= v9)
                                  {
                                    int64_t v91 = ((v88 | 0x8000000000000000) - v9) ^ 0x8000000000000000;
                                    goto LABEL_251;
                                  }
                                  return 4294967159;
                                }
                                if (-2 - v88 < v83) {
                                  return 4294967159;
                                }
LABEL_250:
                                int64_t v91 = v88 - v9;
LABEL_251:
                                if (v91 > v82) {
                                  return 4294967159;
                                }
                                int64_t v29 = v100 - v91;
                                if (v29 > 2147483646) {
                                  return 4294967159;
                                }
LABEL_255:
                                uint64_t decode_ready = 0;
                                *(_DWORD *)(a1 + 128) = v29;
                                return decode_ready;
                              }
                            }
                            if (v84 == ++v86)
                            {
                              int v86 = *(_DWORD *)(a1 + 12820);
                              goto LABEL_247;
                            }
                            continue;
                          }
                        }
                        uint64_t v67 = op_seek_helper((void *)a1, v108);
                        if ((v67 & 0x80000000) == 0)
                        {
                          uint64_t v9 = v101;
                          uint64_t v77 = v107;
                          if (v108 < v105) {
                            goto LABEL_220;
                          }
                          goto LABEL_223;
                        }
                        return v67;
                      }
                    }
                    if ((v111 & 0x8000000000000000) == 0 && v111 <= v71) {
                      goto LABEL_184;
                    }
                    uint64_t v55 = *(void *)(a1 + 72);
                    int64_t v73 = v113;
                    if (v113 < 0) {
                      goto LABEL_180;
                    }
                    goto LABEL_154;
                  }
                }
                uint64_t v38 = v33;
                goto LABEL_94;
              }
              goto LABEL_54;
            }
            if ((v30 & 0x8000000000000000) == 0)
            {
LABEL_54:
              if (v30 <= v36) {
                goto LABEL_55;
              }
            }
          }
          uint64_t v36 = v30;
          goto LABEL_55;
        }
      }
    }
  }
  return 4294967165;
}

uint64_t op_raw_tell(uint64_t a1)
{
  if (*(int *)(a1 + 120) < 2) {
    return -131;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t op_pcm_tell(uint64_t a1)
{
  if (*(int *)(a1 + 120) < 2) {
    return -131;
  }
  unint64_t v2 = *(void *)(a1 + 136);
  unint64_t v22 = v2;
  if (v2 == -1) {
    return 0;
  }
  op_granpos_add(&v22, v2, -((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) & ~((*(_DWORD *)(a1 + 12884) - *(_DWORD *)(a1 + 12880)) >> 31)));
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3) {
    int v4 = *(_DWORD *)(a1 + 124);
  }
  else {
    int v4 = 0;
  }
  int v6 = op_granpos_add(&v22, v22, *(_DWORD *)(a1 + 128));
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = v7 + 376 * v4;
  uint64_t v9 = (unint64_t *)(v8 + 32);
  if (v6 >= 0) {
    uint64_t v9 = &v22;
  }
  uint64_t v10 = *v9;
  uint64_t result = *(void *)(v8 + 24);
  if (v3)
  {
    uint64_t v11 = *(void *)(v7 + 376 * v4 + 32);
    if ((v10 & 0x8000000000000000) == 0)
    {
      int64_t v12 = *(void *)(v7 + 376 * v4 + 40);
      if (v11 >= (unint64_t)v10) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = *(void *)(v7 + 376 * v4 + 32);
      }
      if (v11 >= 0) {
        uint64_t v10 = v13;
      }
      goto LABEL_19;
    }
    if (v11 < 0 && v11 >= v10)
    {
      int64_t v12 = *(void *)(v7 + 376 * v4 + 40);
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v11 = v10;
  }
  int64_t v12 = *(void *)(v7 + 376 * v4 + 40);
  uint64_t v10 = v11;
  if ((v11 & 0x8000000000000000) == 0)
  {
LABEL_19:
    if (v12 < 0) {
      return result;
    }
    int v14 = 0;
    goto LABEL_21;
  }
LABEL_34:
  if ((v12 & 0x8000000000000000) == 0) {
    goto LABEL_35;
  }
  int v14 = 1;
LABEL_21:
  unint64_t v15 = v10 - v12;
  if (v10 <= v12) {
    return result;
  }
  if ((v10 ^ v12) < 0)
  {
    if (!v14)
    {
      int64_t v19 = v10 | 0x8000000000000000;
      BOOL v20 = v19 < v12;
      int64_t v21 = v19 - v12;
      if (!v20)
      {
        unint64_t v15 = v21 ^ 0x8000000000000000;
        goto LABEL_23;
      }
      return 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_35:
    if (-2 - v10 >= (v12 ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      unint64_t v15 = v10 - v12;
      goto LABEL_23;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_23:
  uint64_t v16 = *(unsigned int *)(v7 + 376 * v4 + 60);
  BOOL v17 = __OFSUB__(v15, v16);
  uint64_t v18 = v15 - v16;
  if (v18 < 0 != v17) {
    uint64_t v18 = 0;
  }
  result += v18;
  return result;
}

uint64_t op_set_decode_callback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 12832) = a2;
  *(void *)(result + 12840) = a3;
  return result;
}

uint64_t op_set_gain_offset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 - 3007) >= 3 && a2 != 0) {
    return 4294967165;
  }
  *(_DWORD *)(a1 + 12888) = a2;
  if ((int)a3 >= 98303) {
    int v9 = 98303;
  }
  else {
    int v9 = a3;
  }
  if (v9 <= -98302) {
    int v9 = -98302;
  }
  *(_DWORD *)(a1 + 12892) = v9;
  op_update_gain(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t op_update_gain(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(int *)(result + 120) < 4) {
    return result;
  }
  uint64_t v8 = result;
  if (*(_DWORD *)(result + 40)) {
    int v9 = *(_DWORD *)(result + 124);
  }
  else {
    int v9 = 0;
  }
  int v10 = *(_DWORD *)(result + 12892);
  uint64_t v11 = *(void *)(result + 48);
  int v12 = *(_DWORD *)(result + 12888);
  if (v12)
  {
    if (v12 == 3008)
    {
      int v16 = 0;
      uint64_t v13 = v11 + 376 * v9;
      opus_tags_get_track_gain((uint64_t *)(v13 + 344), &v16);
      int v14 = v16;
      goto LABEL_11;
    }
    if (v12 == 3007)
    {
      int v17 = 0;
      uint64_t v13 = v11 + 376 * v9;
      opus_tags_get_album_gain((uint64_t *)(v13 + 344), &v17);
      int v14 = v17;
LABEL_11:
      v10 += v14 + *(_DWORD *)(v13 + 68);
    }
  }
  else
  {
    v10 += *(_DWORD *)(v11 + 376 * v9 + 68);
  }
  if (v10 >= 0x7FFF) {
    LODWORD(v15) = 0x7FFF;
  }
  else {
    LODWORD(v15) = v10;
  }
  if ((int)v15 <= -32768) {
    uint64_t v15 = 4294934528;
  }
  else {
    uint64_t v15 = v15;
  }
  return opus_multistream_decoder_ctl(*(_DWORD **)(v8 + 12824), 4034, a3, a4, a5, a6, a7, a8, v15);
}

uint64_t op_read_native(uint64_t a1, char *a2, int a3, _DWORD *a4)
{
  int v4 = *(_DWORD *)(a1 + 120);
  if (v4 < 2) {
    return 4294967165;
  }
  uint64_t v8 = a1 + 576;
  while (1)
  {
    if (v4 < 4)
    {
LABEL_22:
      int v30 = op_fetch_and_process_page(a1, 0, -1, 1, 0);
      if (v30 == -2)
      {
        uint64_t v29 = 0;
        goto LABEL_52;
      }
      if (v30 >= 0) {
        uint64_t v29 = v38;
      }
      else {
        uint64_t v29 = v30;
      }
      if (v30 < 0) {
        return v29;
      }
      goto LABEL_41;
    }
    int v9 = *(_DWORD *)(a1 + 40);
    if (v9) {
      int v9 = *(_DWORD *)(a1 + 124);
    }
    uint64_t v10 = *(int *)(*(void *)(a1 + 48) + 376 * v9 + 56);
    int v11 = *(_DWORD *)(a1 + 12880);
    uint64_t v12 = (*(_DWORD *)(a1 + 12884) - v11);
    if ((int)v12 >= 1) {
      break;
    }
    int v13 = *(_DWORD *)(a1 + 12816);
    if (v13 >= *(_DWORD *)(a1 + 12820)) {
      goto LABEL_22;
    }
    uint64_t v14 = v8 + 48 * v13;
    *(_DWORD *)(a1 + 12816) = v13 + 1;
    int v15 = *(_DWORD *)(a1 + 128);
    int v16 = (void *)(v14 + 8);
    uint64_t packet_duration = op_get_packet_duration(*(unsigned char **)v14, *(_DWORD *)(v14 + 8));
    uint64_t v21 = packet_duration;
    unint64_t v22 = *(void *)(v14 + 32);
    int v23 = packet_duration;
    if (*(void *)(v14 + 24))
    {
      unint64_t v31 = *(void *)(a1 + 136);
      if ((v22 & 0x8000000000000000) == 0)
      {
        int v23 = 0;
        if ((v31 & 0x8000000000000000) != 0 || (uint64_t)v22 <= (uint64_t)v31) {
          goto LABEL_9;
        }
LABEL_31:
        uint64_t v32 = v22 - v31;
        if (v32 >= (int)packet_duration) {
          int v23 = packet_duration;
        }
        else {
          int v23 = v32;
        }
        goto LABEL_9;
      }
      if ((v31 & 0x8000000000000000) != 0)
      {
        if (v22 <= v31)
        {
          int v23 = 0;
          goto LABEL_9;
        }
        if (((v31 ^ v22) & 0x8000000000000000) == 0) {
          goto LABEL_31;
        }
      }
      int v23 = packet_duration;
      if ((uint64_t)(-2 - v22) >= (uint64_t)(v31 ^ 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_31;
      }
    }
LABEL_9:
    *(void *)(a1 + 136) = v22;
    if ((int)packet_duration * (int)v10 > a3)
    {
      uint64_t v33 = *(void *)(a1 + 12872);
      if (!v33)
      {
        uint64_t v37 = packet_duration;
        uint64_t inited = op_init_buffer(a1);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
        uint64_t v33 = *(void *)(a1 + 12872);
        uint64_t v21 = v37;
      }
      uint64_t inited = op_decode(a1, v33, v14, v21, v10, v18, v19, v20);
      if ((inited & 0x80000000) != 0) {
        return inited;
      }
      if (v23 >= v15) {
        int v34 = v15;
      }
      else {
        int v34 = v23;
      }
      *(_DWORD *)(a1 + 128) = v15 - v34;
      *(_DWORD *)(a1 + 12880) = v34;
      *(_DWORD *)(a1 + 12884) = v23;
      uint64_t v35 = *(void *)(a1 + 160) + v23 - v34;
      *(void *)(a1 + 152) += *v16;
      *(void *)(a1 + 160) = v35;
LABEL_40:
      LODWORD(v29) = v38;
      goto LABEL_41;
    }
    uint64_t inited = op_decode(a1, (uint64_t)a2, v14, packet_duration, v10, v18, v19, v20);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    if (v23 < 1) {
      goto LABEL_40;
    }
    if (v23 >= v15) {
      int v25 = v15;
    }
    else {
      int v25 = v23;
    }
    *(_DWORD *)(a1 + 128) = v15 - v25;
    uint64_t v26 = (v23 - v25);
    if (v25 >= 1 && (int)v26 >= 1) {
      memmove(a2, &a2[2 * v25 * (int)v10], 2 * v10 * v26);
    }
    uint64_t v28 = *(void *)(a1 + 160);
    *(void *)(a1 + 152) += *v16;
    *(void *)(a1 + 160) = v28 + (int)v26;
    LODWORD(v29) = v38;
    if ((int)v26 >= 1)
    {
      uint64_t v29 = v26;
      goto LABEL_52;
    }
LABEL_41:
    unsigned int v38 = v29;
    int v4 = *(_DWORD *)(a1 + 120);
  }
  if ((int)v12 * (int)v10 <= a3 || (uint64_t v12 = (a3 / (int)v10), v29 = v12, (int)v12 >= 1))
  {
    memcpy(a2, (const void *)(*(void *)(a1 + 12872) + 2 * v11 * (int)v10), 2 * v10 * v12);
    *(_DWORD *)(a1 + 12880) = v12 + v11;
    uint64_t v29 = v12;
  }
LABEL_52:
  if (a4) {
    *a4 = *(_DWORD *)(a1 + 124);
  }
  return v29;
}

uint64_t op_read_stereo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return op_filter_read_native(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))op_stereo_filter, 0);
}

uint64_t op_filter_read_native(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), _DWORD *a5)
{
  uint64_t native = op_read_native(a1, 0, 0, a5);
  if ((native & 0x80000000) == 0 && *(int *)(a1 + 120) >= 4)
  {
    int v10 = *(_DWORD *)(a1 + 12880);
    uint64_t native = (*(_DWORD *)(a1 + 12884) - v10);
    if ((int)native >= 1)
    {
      if (*(_DWORD *)(a1 + 40)) {
        int v11 = *(_DWORD *)(a1 + 124);
      }
      else {
        int v11 = 0;
      }
      uint64_t native = a4(a1, a2, a3, *(void *)(a1 + 12872) + 2 * *(_DWORD *)(*(void *)(a1 + 48) + 376 * v11 + 56) * v10);
      *(_DWORD *)(a1 + 12880) = native + v10;
    }
  }
  return native;
}

uint64_t op_stereo_filter(int a1, char *__dst, int a3, char *__src, int a5, int a6)
{
  if (a3 >> 1 >= a5) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = (a3 >> 1);
  }
  if (a6 == 2)
  {
    memcpy(__dst, __src, 4 * v6);
  }
  else if (a6 == 1)
  {
    if ((int)v6 >= 1)
    {
      uint64_t v7 = __dst + 2;
      uint64_t v8 = v6;
      do
      {
        __int16 v9 = *(_WORD *)__src;
        __src += 2;
        *uint64_t v7 = v9;
        *(v7 - 1) = v9;
        v7 += 2;
        --v8;
      }
      while (v8);
    }
  }
  else if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      int32x2_t v11 = 0;
      if (a6 >= 1)
      {
        uint64_t v12 = a6;
        int v13 = (__int16 *)((char *)&OP_STEREO_DOWNMIX_Q14 + 32 * a6 - 96);
        uint64_t v14 = (__int16 *)__src;
        do
        {
          unsigned int v15 = *v14++;
          v16.i32[0] = *v13;
          v16.i32[1] = v13[1];
          int32x2_t v11 = vmla_s32(v11, vdup_n_s32(v15), v16);
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      int v17 = &__dst[4 * i];
      int32x2_t v18 = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32(v11, (int32x2_t)0x200000002000), 0xEuLL), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
      *((_WORD *)v17 + 1) = v18.i16[2];
      *(_WORD *)int v17 = v18.i16[0];
      __src += 2 * a6;
    }
  }
  return v6;
}

uint64_t op_read_float(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return op_filter_read_native(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))op_short2float_filter, a4);
}

uint64_t op_short2float_filter(uint64_t a1, float *a2, int a3, __int16 *a4, uint64_t a5, int a6)
{
  uint64_t result = a5;
  LODWORD(v7) = a6 * a5;
  if (a6 * (int)a5 > a3)
  {
    uint64_t result = (a3 / a6);
    LODWORD(v7) = result * a6;
  }
  if ((int)v7 >= 1)
  {
    uint64_t v7 = v7;
    do
    {
      int v8 = *a4++;
      *a2++ = (float)v8 * 0.000030518;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t op_read_float_stereo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return op_filter_read_native(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))op_short2float_stereo_filter, 0);
}

uint64_t op_short2float_stereo_filter(int a1, float *a2, int a3, char *__dst, int a5, int a6)
{
  uint64_t v6 = __dst;
  uint64_t v7 = a2;
  if (a3 >> 1 >= a5) {
    uint64_t result = a5;
  }
  else {
    uint64_t result = (a3 >> 1);
  }
  if (a6 == 1)
  {
    if ((int)result >= 1)
    {
      __int16 v9 = a2;
      uint64_t v10 = result;
      do
      {
        int v11 = *(__int16 *)v6;
        v6 += 2;
        *v9++ = (float)v11 * 0.000030518;
        --v10;
      }
      while (v10);
      unint64_t v12 = result + 1;
      int v13 = 2 * result - 2;
      do
      {
        float v14 = a2[(v12 - 2)];
        a2[v13 + 1] = v14;
        a2[v13] = v14;
        --v12;
        v13 -= 2;
      }
      while (v12 > 1);
    }
  }
  else if (a6 >= 5)
  {
    if ((int)result >= 1)
    {
      for (uint64_t i = 0; i != result; ++i)
      {
        float32x2_t v23 = 0;
        uint64_t v24 = a6;
        int v25 = (float32x2_t *)((char *)&OP_STEREO_DOWNMIX + 64 * (unint64_t)(a6 - 3));
        uint64_t v26 = v6;
        do
        {
          int v27 = *(__int16 *)v26;
          v26 += 2;
          float v28 = (float)v27 * 0.000030518;
          float32x2_t v29 = *v25++;
          float32x2_t v23 = vmla_n_f32(v23, v29, v28);
          --v24;
        }
        while (v24);
        *(float32x2_t *)&a2[2 * i] = v23;
        v6 += 2 * a6;
      }
    }
  }
  else
  {
    if (a6 >= 3) {
      LODWORD(result) = op_stereo_filter(result, __dst, 2 * (int)result, __dst, result, a6);
    }
    LODWORD(v16) = 2 * result;
    if (a3 >= 0) {
      int v17 = a3;
    }
    else {
      int v17 = a3 + 1;
    }
    unsigned int v18 = v17 >> 1;
    unsigned int v19 = v17 & 0xFFFFFFFE;
    BOOL v20 = (int)v16 <= a3;
    if ((int)v16 > a3) {
      uint64_t v16 = v19;
    }
    else {
      uint64_t v16 = v16;
    }
    if (v20) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v18;
    }
    if ((int)v16 >= 1)
    {
      do
      {
        int v21 = *(__int16 *)v6;
        v6 += 2;
        *v7++ = (float)v21 * 0.000030518;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t op_fetch_headers(uint64_t a1, unsigned int *a2, _OWORD *a3, _DWORD **a4, _DWORD *a5, int *a6, void *a7)
{
  uint64_t v7 = a7;
  memset(v33, 0, sizeof(v33));
  if (!a7)
  {
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = v13 >= 0x7FFFFFFFFFFEFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v13 + 0x10000;
    uint64_t v7 = v33;
    if (op_get_next_page(a1, v33, v14) < 0) {
      return 4294967164;
    }
  }
  unint64_t v31 = a3;
  *(_DWORD *)(a1 + 120) = 2;
  if (a4) {
    *a5 = 0;
  }
  memset(v34, 0, sizeof(v34));
  while (ogg_page_bos((uint64_t)v7))
  {
    if (a4)
    {
      unsigned int v15 = *a4;
      unint64_t v16 = *a5;
      int v17 = ogg_page_serialno((uint64_t)v7);
      if ((int)v16 >= 1)
      {
        if (*v15 == v17) {
          goto LABEL_43;
        }
        unint64_t v18 = 0;
        while (v16 - 1 != v18)
        {
          int v19 = v15[++v18];
          if (v19 == v17)
          {
            if (v18 < v16) {
              goto LABEL_43;
            }
            break;
          }
        }
      }
      int v20 = ogg_page_serialno((uint64_t)v7);
      int v21 = *a4;
      uint64_t v22 = (int)*a5;
      int v23 = *a6;
      if ((int)v22 >= *a6)
      {
        if (v23 > 0xFFFFFFF || (v23 = (2 * v23) | 1, (int v21 = realloc(v21, 4 * v23)) == 0))
        {
          uint64_t result = 4294967167;
          goto LABEL_44;
        }
      }
      v21[v22] = v20;
      *a4 = v21;
      *a5 = v22 + 1;
      *a6 = v23;
    }
    if (*(int *)(a1 + 120) <= 2)
    {
      int v24 = ogg_page_serialno((uint64_t)v7);
      ogg_stream_reset_serialno(a1 + 168, v24);
      ogg_stream_pagein(a1 + 168, v7);
      if ((int)ogg_stream_packetout((void *)(a1 + 168), v34) >= 1)
      {
        uint64_t result = opus_head_parse(a2, *(uint64_t *)&v34[0], *((unint64_t *)&v34[0] + 1));
        if ((result & 0x80000000) != 0)
        {
          if (result != -132) {
            goto LABEL_44;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 120) = 3;
        }
      }
    }
    uint64_t v26 = *(void *)(a1 + 72);
    if (v26 >= 0x7FFFFFFFFFFEFFFFLL) {
      uint64_t v26 = 0x7FFFFFFFFFFEFFFFLL;
    }
    if (op_get_next_page(a1, v7, v26 + 0x10000) < 0)
    {
      if (*(int *)(a1 + 120) >= 3) {
        uint64_t result = 4294967163;
      }
      else {
        uint64_t result = 4294967164;
      }
      goto LABEL_44;
    }
  }
  if (*(_DWORD *)(a1 + 120) != 3)
  {
    uint64_t result = 4294967164;
    goto LABEL_44;
  }
  uint64_t v27 = *(void *)(a1 + 544);
  if (v27 == (int)ogg_page_serialno((uint64_t)v7)) {
LABEL_34:
  }
    ogg_stream_pagein(a1 + 168, v7);
  int v28 = ogg_stream_packetout((void *)(a1 + 168), v34);
  if (!v28)
  {
    do
    {
      uint64_t v29 = *(void *)(a1 + 72);
      if (v29 >= 0x7FFFFFFFFFFEFFFFLL) {
        uint64_t v29 = 0x7FFFFFFFFFFEFFFFLL;
      }
      if (op_get_next_page(a1, v7, v29 + 0x10000) < 0) {
        break;
      }
      uint64_t v30 = *(void *)(a1 + 544);
      if (v30 == (int)ogg_page_serialno((uint64_t)v7)) {
        goto LABEL_34;
      }
    }
    while (!ogg_page_bos((uint64_t)v7));
    goto LABEL_43;
  }
  if (v28 == -1)
  {
LABEL_43:
    uint64_t result = 4294967163;
LABEL_44:
    *(_DWORD *)(a1 + 120) = 2;
    return result;
  }
  uint64_t result = opus_tags_parse(v31, *(uint64_t *)&v34[0], *((unint64_t *)&v34[0] + 1));
  if ((result & 0x80000000) != 0) {
    goto LABEL_44;
  }
  if (ogg_stream_packetout((void *)(a1 + 168), v34) || *(unsigned __int8 *)(v7[1] + *v7 - 1) == 255)
  {
    opus_tags_clear((uint64_t)v31);
    goto LABEL_43;
  }
  return 0;
}

uint64_t op_find_initial_pcm_offset(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = 0;
  int v6 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(v29, 0, sizeof(v29));
  if (a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = v29;
  }
  uint64_t v8 = a1 + 168;
  int v9 = *(_DWORD *)(a1 + 544);
  do
  {
    uint64_t next_page = op_get_next_page(a1, v7, *(void *)(a1 + 80));
    uint64_t v11 = next_page;
    if (next_page < 0)
    {
      if (next_page != -1) {
        return v11;
      }
      if (!*(_DWORD *)(a2 + 60))
      {
        uint64_t v11 = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 16) = *(void *)(a2 + 8);
        *(void *)(a2 + 24) = 0;
        return v11;
      }
      return 4294967157;
    }
    if (ogg_page_bos((uint64_t)v7))
    {
      if (!*(_DWORD *)(a2 + 60))
      {
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(void *)(a2 + 16) = *(void *)(a2 + 8);
        *(void *)(a2 + 24) = 0;
        return 1;
      }
      return 4294967157;
    }
    if (ogg_page_serialno((uint64_t)v7) == v9)
    {
      ogg_stream_pagein(v8, v7);
      *(void *)(a1 + 152) += v7[1];
      do
        int v12 = op_collect_audio_packets(a1, (uint64_t)v30);
      while (v12 < 0);
      int v5 = v12;
      int v6 = *(_DWORD *)(a1 + 12820);
    }
    unsigned int v13 = v6 - 1;
  }
  while (v6 < 1);
  unint64_t v14 = *(void *)(a1 + 48 * v13 + 608);
  if (v14 == -1) {
    return 4294967157;
  }
  int64_t v28 = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 48 * v13 + 600);
  int v16 = op_granpos_add(&v28, v14, -v5);
  if (!v15)
  {
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    return 4294967157;
  }
  if (v16 < 0)
  {
    int64_t v28 = 0;
    if ((v14 & 0x8000000000000000) == 0 && v14 < *(unsigned int *)(a2 + 60)) {
      return 4294967157;
    }
  }
LABEL_15:
  uint64_t v27 = a2;
  uint64_t v17 = 0;
  uint64_t v18 = v6;
  int64_t v19 = v28;
  int64_t v26 = v14 | 0x8000000000000000;
  int v20 = (int64_t *)(a1 + 608);
  int64_t v21 = v28;
  do
  {
    if (!v15)
    {
      int v23 = v30[v17];
LABEL_23:
      op_granpos_add(v20, v21, v23);
      int64_t v21 = *v20;
      goto LABEL_24;
    }
    if (((v21 ^ v14) & 0x8000000000000000) != 0)
    {
      if ((v14 & 0x8000000000000000) != 0)
      {
        if ((uint64_t)(-2 - v14) >= (v21 ^ 0x7FFFFFFFFFFFFFFFLL)) {
          uint64_t v22 = v21 - v14;
        }
        else {
          uint64_t v22 = 0;
        }
      }
      else if (v26 >= v21)
      {
        uint64_t v22 = ((v26 - v21) ^ 0x7FFFFFFFFFFFFFFFLL) + 1;
      }
      else
      {
        uint64_t v22 = 0;
      }
    }
    else
    {
      uint64_t v22 = v21 - v14;
    }
    int v23 = v30[v17];
    uint64_t v24 = v22 + v23;
    if (v24 < 1) {
      goto LABEL_23;
    }
    if (v24 > v23) {
      goto LABEL_33;
    }
    *(v20 - 1) = 1;
    int64_t *v20 = v14;
    int64_t v21 = v14;
LABEL_24:
    ++v17;
    v20 += 6;
  }
  while (v18 != v17);
  LODWORD(v17) = v18;
LABEL_33:
  *(_DWORD *)(a1 + 12820) = v17;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(v27 + 60);
  *(void *)(v27 + 24) = 0;
  *(void *)(v27 + 40) = v19;
  *(void *)(a1 + 136) = v19;
  *(void *)(a1 + 144) = v11;
  return 0;
}

uint64_t op_get_next_page(uint64_t a1, void *a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)(a1 + 88); ; ogg_sync_wrote((uint64_t)i, v12))
  {
    while (1)
    {
      if (a3 >= 1 && *(void *)(a1 + 72) >= a3) {
        return -1;
      }
      unsigned int v7 = ogg_sync_pageseek(i, a2);
      unsigned int v8 = v7;
      if ((v7 & 0x80000000) == 0) {
        break;
      }
      *(void *)(a1 + 72) -= (int)v7;
    }
    if (v7)
    {
      uint64_t result = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = result + v8;
      return result;
    }
    if (!a3) {
      return -1;
    }
    if (a3 < 0)
    {
      uint64_t v10 = 2048;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 72) + *(int *)(a1 + 100) - *(int *)(a1 + 104);
      if (a3 - v9 >= 2048) {
        uint64_t v10 = 2048;
      }
      else {
        uint64_t v10 = a3 - v9;
      }
      if (a3 <= v9) {
        return -1;
      }
    }
    uint64_t v11 = ogg_sync_buffer((uint64_t)i, (int)v10);
    int v12 = (*(uint64_t (**)(void, char *, uint64_t))a1)(*(void *)(a1 + 32), v11, v10);
    if (v12 <= 0) {
      break;
    }
  }
  uint64_t v14 = -137;
  if (a3 < 0) {
    uint64_t v14 = -1;
  }
  if (v12 >= 0) {
    return v14;
  }
  else {
    return -128;
  }
}

uint64_t op_collect_audio_packets(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)(a1 + 168);
  uint64_t v5 = a1 + 576;
  int v6 = ogg_stream_packetout((void *)(a1 + 168), (void *)(a1 + 576));
  if (v6)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    while ((v6 & 0x80000000) == 0)
    {
      int packet_duration = op_get_packet_duration(*(unsigned char **)(a1 + 48 * v7 + 576), *(_DWORD *)(a1 + 48 * v7 + 584));
      *(_DWORD *)(a2 + 4 * v7) = packet_duration;
      if (packet_duration < 1)
      {
        if (v8 >= 1) {
          *(void *)(a1 + 576 + 48 * (v8 - 1) + 32) = *(void *)(a1 + 576 + 48 * v7 + 32);
        }
      }
      else
      {
        ++v8;
        uint64_t v9 = (packet_duration + v9);
      }
      uint64_t v7 = v8;
      int v6 = ogg_stream_packetout(v4, (void *)(v5 + 48 * v8));
      if (!v6) {
        goto LABEL_11;
      }
    }
    uint64_t v9 = 4294967293;
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
  }
LABEL_11:
  *(_DWORD *)(a1 + 12816) = 0;
  *(_DWORD *)(a1 + 12820) = v8;
  return v9;
}

uint64_t op_get_packet_duration(unsigned char *a1, int a2)
{
  int nb_frames = opus_packet_get_nb_frames(a1, a2);
  uint64_t v4 = 4294967160;
  if ((nb_frames & 0x80000000) == 0)
  {
    int v5 = opus_packet_get_samples_per_frame(a1, 48000) * nb_frames;
    if (v5 <= 5760) {
      return v5;
    }
    else {
      return 4294967160;
    }
  }
  return v4;
}

uint64_t op_make_decode_ready(void *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 120);
  if (v2 > 3) {
    return 0;
  }
  if (v2 == 3)
  {
    if (*(_DWORD *)(a2 + 40)) {
      int v5 = *(_DWORD *)(a2 + 124);
    }
    else {
      int v5 = 0;
    }
    uint64_t v6 = *(void *)(a2 + 48);
    uint64_t v7 = (_DWORD *)(v6 + 376 * v5);
    int v8 = v7[19];
    int v9 = v7[20];
    signed int v10 = v7[14];
    uint64_t v11 = *(_DWORD **)(a2 + 12824);
    if (v11
      && *(_DWORD *)(a2 + 12848) == v8
      && *(_DWORD *)(a2 + 12852) == v9
      && *(_DWORD *)(a2 + 12856) == v10
      && !memcmp((const void *)(a2 + 12860), (const void *)(v6 + 376 * v5 + 84), v10))
    {
      opus_multistream_decoder_ctl(v11, 4028, v12, v13, v14, v15, v16, v17, v27);
      goto LABEL_13;
    }
    int v28 = 0;
    opus_multistream_decoder_destroy(a1);
    uint64_t v18 = opus_multistream_decoder_create(a1, 48000, v10, v8, v9, v6 + 376 * v5 + 84, &v28);
    *(void *)(a2 + 12824) = v18;
    if (v18)
    {
      *(_DWORD *)(a2 + 12848) = v8;
      *(_DWORD *)(a2 + 12852) = v9;
      *(_DWORD *)(a2 + 12856) = v10;
      memcpy((void *)(a2 + 12860), (const void *)(v6 + 376 * v5 + 84), v10);
LABEL_13:
      *(_DWORD *)(a2 + 120) = 4;
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 160) = 0;
      op_update_gain(a2, v19, v20, v21, v22, v23, v24, v25);
      return 0;
    }
  }
  return 4294967167;
}

uint64_t op_find_final_pcm_offset(void *a1, _DWORD *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8)
{
  int v9 = *(_DWORD *)(a4 + 48);
  if (a7 != -1 && v9 == a6)
  {
    uint64_t v10 = a7;
    uint64_t v11 = a5;
    goto LABEL_36;
  }
  uint64_t v33 = a4;
  int v34 = a8;
  memset(v40, 0, sizeof(v40));
  uint64_t v12 = a2 + 1;
  uint64_t v13 = a3 - 1;
  int v14 = 0x10000;
  uint64_t v10 = -1;
  uint64_t v15 = a5;
  uint64_t v16 = a5;
  do
  {
    int v36 = v14;
    uint64_t v17 = v16 - v14;
    uint64_t v16 = v17 & ~(v17 >> 63);
    uint64_t v18 = op_seek_helper(a1, v16);
    if ((v18 & 0x80000000) != 0) {
      return v18;
    }
    if (a1[9] < v15)
    {
      int v38 = 0;
      uint64_t v11 = -1;
      while (1)
      {
        uint64_t next_page = op_get_next_page((uint64_t)a1, v40, v15);
        uint64_t v20 = next_page;
        if (next_page < -1) {
          return v20;
        }
        if (next_page == -1) {
          goto LABEL_22;
        }
        int v21 = ogg_page_serialno((uint64_t)v40);
        if (v21 == v9)
        {
          uint64_t v22 = ogg_page_granulepos((uint64_t)v40);
          if (v22 != -1)
          {
            uint64_t v11 = v20;
            uint64_t v10 = v22;
          }
          goto LABEL_21;
        }
        if (a3 < 1) {
          goto LABEL_20;
        }
        if (*a2 != v21) {
          break;
        }
LABEL_21:
        if (a1[9] >= v15)
        {
LABEL_22:
          if (!v38 && v17 >= 1 || (v11 & 0x8000000000000000) == 0) {
            goto LABEL_28;
          }
          return 4294967159;
        }
      }
      unint64_t v23 = 0;
      while (v13 != v23)
      {
        int v24 = v12[v23++];
        if (v24 == v21)
        {
          if (v23 < a3) {
            goto LABEL_21;
          }
          break;
        }
      }
LABEL_20:
      int v38 = 1;
      goto LABEL_21;
    }
    if (v17 < 1) {
      return 4294967159;
    }
    uint64_t v11 = -1;
LABEL_28:
    if (2 * v36 >= 0x100000) {
      int v14 = 0x100000;
    }
    else {
      int v14 = 2 * v36;
    }
    if (v16 + 65306 >= a5) {
      uint64_t v15 = a5;
    }
    else {
      uint64_t v15 = v16 + 65306;
    }
  }
  while (v11 < 0);
  a4 = v33;
  a8 = v34;
LABEL_36:
  if (v11 < *(void *)(a4 + 8)) {
    return 4294967159;
  }
  uint64_t v25 = *(void *)(a4 + 40);
  if (((v25 ^ v10) & 0x8000000000000000) == 0) {
    goto LABEL_38;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    BOOL v31 = __OFSUB__(v10 | 0x8000000000000000, v25);
    uint64_t v32 = (v10 | 0x8000000000000000) - v25;
    if (v32 < 0 == v31)
    {
      int64_t v26 = v32 ^ 0x8000000000000000;
      goto LABEL_39;
    }
    return 4294967157;
  }
  if (-2 - v10 < (v25 ^ 0x7FFFFFFFFFFFFFFFLL)) {
    return 4294967157;
  }
LABEL_38:
  int64_t v26 = v10 - v25;
LABEL_39:
  int64_t v27 = *(unsigned int *)(a4 + 60);
  BOOL v28 = v26 < v27;
  int64_t v29 = v26 - v27;
  if (v28 || (v29 ^ 0x7FFFFFFFFFFFFFFFLL) < *a8) {
    return 4294967157;
  }
  uint64_t v20 = 0;
  *a8 += v29;
  *(void *)(a4 + 32) = v10;
  *(void *)(a4 + 16) = v11;
  return v20;
}

uint64_t op_rescale64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < a2)
  {
    if (a1 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = a2 >> 1;
      int v5 = 63;
      do
      {
        BOOL v6 = a1 >= v4;
        if (a1 < v4) {
          uint64_t v7 = 0;
        }
        else {
          uint64_t v7 = a2;
        }
        a1 = 2 * a1 - v7;
        uint64_t v3 = v6 | (2 * v3);
        --v5;
      }
      while (v5);
      uint64_t v8 = a3 & 1;
      uint64_t v9 = a3 >> 1;
      int v10 = 63;
      a3 = 0;
      do
      {
        if (v3) {
          a3 = v9 + (a3 >> 1) + (v8 & a3);
        }
        else {
          a3 >>= 1;
        }
        v3 >>= 1;
        --v10;
      }
      while (v10);
    }
  }
  return a3;
}

uint64_t op_get_link_from_serialno(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  unsigned int v5 = a2 + 1;
  if ((signed int)(a2 + 1) >= *(_DWORD *)(a1 + 44) || *(void *)(v4 + 376 * (int)v5) <= a3) {
    unsigned int v5 = *(_DWORD *)(a1 + 44);
  }
  unsigned int v6 = 0;
  do
  {
    if (*(void *)(v4 + 376 * (int)a2) > a3) {
      unsigned int v5 = a2;
    }
    else {
      unsigned int v6 = a2;
    }
    a2 = v6 + ((int)(v5 - v6) >> 1);
  }
  while ((int)(v5 - v6) > 1);
  if (*(_DWORD *)(v4 + 376 * (int)a2 + 48) == a4) {
    return a2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t op_buffer_continued_data(uint64_t a1, void *a2)
{
  memset(v4, 0, sizeof(v4));
  int v2 = (void *)(a1 + 168);
  ogg_stream_pagein(a1 + 168, a2);
  do
    uint64_t result = ogg_stream_packetout(v2, v4);
  while (result);
  return result;
}

uint64_t op_init_buffer(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 44);
    if ((int)v2 < 1)
    {
      size_t v5 = 11520;
    }
    else
    {
      uint64_t v3 = (int *)(*(void *)(a1 + 48) + 56);
      int v4 = 1;
      do
      {
        if (v4 <= *v3) {
          int v4 = *v3;
        }
        v3 += 94;
        --v2;
      }
      while (v2);
      size_t v5 = 11520 * v4;
    }
  }
  else
  {
    size_t v5 = 92160;
  }
  unsigned int v6 = malloc(v5);
  *(void *)(a1 + 12872) = v6;
  if (v6) {
    return 0;
  }
  else {
    return 4294967167;
  }
}

uint64_t op_decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 12832);
  if (v12
    && (LODWORD(result) = v12(*(void *)(a1 + 12840), *(void *)(a1 + 12824), a2, a3, a4, a5, 7008, *(unsigned int *)(a1 + 124)), result != 6720))
  {
    if ((int)result > 0) {
      return 4294967160;
    }
  }
  else
  {
    LODWORD(result) = opus_multistream_decode(*(int **)(a1 + 12824), *(char **)a3, *(unsigned int *)(a3 + 8), a2, a4, 0, a7, a8);
  }
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 4294967160;
  }
}

uint64_t opus_head_parse(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    if (*(void *)a2 != 0x646165487375704FLL) {
      return 4294967164;
    }
    if (a3 >= 9)
    {
      unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
      if (v4 > 0xF) {
        return 4294967162;
      }
      if (a3 >= 0x13)
      {
        int v6 = *(unsigned __int8 *)(a2 + 18);
        if (v6 == 255) {
          return 4294967166;
        }
        size_t v7 = *(unsigned __int8 *)(a2 + 9);
        unsigned int v8 = *(unsigned __int16 *)(a2 + 10);
        unsigned int v9 = *(_DWORD *)(a2 + 12);
        int v10 = *(unsigned __int8 *)(a2 + 16);
        int v11 = *(unsigned __int8 *)(a2 + 17);
        if (v6 == 1)
        {
          if ((v7 - 9) >= 0xFFFFFFF8 && v7 + 21 <= a3 && (v4 > 1 || v7 + 21 >= a3))
          {
            unsigned int v14 = *(unsigned __int8 *)(a2 + 19);
            if (*(unsigned char *)(a2 + 19))
            {
              unsigned int v15 = *(unsigned __int8 *)(a2 + 20);
              if (v14 >= v15)
              {
                if (!*(unsigned char *)(a2 + 9))
                {
LABEL_35:
                  unsigned int v27 = *(unsigned __int8 *)(a2 + 20);
                  int v28 = *(unsigned __int8 *)(a2 + 19);
                  int v26 = *(unsigned __int8 *)(a2 + 16);
                  unsigned int v24 = *(_DWORD *)(a2 + 12);
                  int v25 = *(unsigned __int8 *)(a2 + 17);
                  unsigned int v23 = *(unsigned __int16 *)(a2 + 10);
                  unsigned int v22 = *(unsigned __int8 *)(a2 + 8);
                  if (a1)
                  {
                    int v21 = a1;
                    int v29 = *(unsigned __int8 *)(a2 + 9);
                    memcpy(a1 + 8, (const void *)(a2 + 21), v7);
                    LODWORD(v7) = v29;
                    a1 = v21;
                    unsigned int v4 = v22;
                    int v6 = 1;
                    unsigned int v8 = v23;
                    unsigned int v9 = v24;
                    int v11 = v25;
                    int v10 = v26;
                    unsigned int v12 = v27;
                    int v13 = v28;
                    goto LABEL_19;
                  }
                  return 0;
                }
                uint64_t v16 = (unsigned __int8 *)(a2 + 21);
                uint64_t v17 = *(unsigned __int8 *)(a2 + 9);
                while (1)
                {
                  unsigned int v19 = *v16++;
                  unsigned int v18 = v19;
                  if (v19 != 255 && v15 + v14 <= v18) {
                    break;
                  }
                  if (!--v17) {
                    goto LABEL_35;
                  }
                }
              }
            }
          }
        }
        else if (!*(unsigned char *)(a2 + 18) && (v7 - 3) >= 0xFFFFFFFE && (a3 < 0x14 || v4 >= 2))
        {
          if (a1)
          {
            unsigned int v12 = v7 - 1;
            *((_WORD *)a1 + 16) = 256;
            int v13 = 1;
LABEL_19:
            uint64_t v3 = 0;
            *a1 = v4;
            a1[1] = v7;
            a1[2] = v8;
            a1[3] = v9;
            a1[4] = ((v10 << 16) | (v11 << 24)) >> 16;
            a1[5] = v6;
            a1[6] = v13;
            a1[7] = v12;
            return v3;
          }
          return 0;
        }
      }
    }
    return 4294967163;
  }
  return 4294967164;
}

double opus_tags_init(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void opus_tags_clear(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = *(void **)a1;
  if (v3) {
    int v4 = v2 + 1;
  }
  else {
    int v4 = v2;
  }
  if (v4 >= 1)
  {
    int v5 = v2 + (v3 != 0) + 1;
    unsigned int v6 = v4 - 1;
    do
    {
      free(*(void **)(*(void *)a1 + 8 * v6));
      --v5;
      --v6;
    }
    while (v5 > 1);
    uint64_t v3 = *(void **)a1;
  }
  free(v3);
  free(*(void **)(a1 + 8));
  size_t v7 = *(void **)(a1 + 24);

  free(v7);
}

uint64_t opus_tags_parse(_OWORD *a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v5 = opus_tags_parse_impl((uint64_t)&v8, a2, a3);
    if ((v5 & 0x80000000) != 0)
    {
      opus_tags_clear((uint64_t)&v8);
    }
    else
    {
      long long v6 = v9;
      *a1 = v8;
      a1[1] = v6;
    }
    return v5;
  }
  else
  {
    return opus_tags_parse_impl(0, a2, a3);
  }
}

uint64_t opus_tags_parse_impl(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 8) {
    return 4294967164;
  }
  if (*(void *)a2 != 0x736761547375704FLL) {
    return 4294967164;
  }
  if (a3 < 0x10) {
    return 4294967163;
  }
  unint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = a3 - 12 - v4;
  if (a3 - 12 < v4) {
    return 4294967163;
  }
  uint64_t v7 = a2 + 12;
  if (a1)
  {
    long long v8 = op_strdup_with_len((const void *)(a2 + 12), *(unsigned int *)(a2 + 8));
    *(void *)(a1 + 24) = v8;
    if (!v8) {
      return 4294967167;
    }
  }
  BOOL v9 = v5 >= 4;
  size_t v10 = v5 - 4;
  if (!v9) {
    return 4294967163;
  }
  int v11 = (_DWORD *)(v7 + v4);
  unsigned int v14 = *v11;
  int v13 = (char *)(v11 + 1);
  unint64_t v12 = v14;
  if (v14 > v10 >> 2) {
    return 4294967163;
  }
  if (v12 > 0x7FFFFFFE) {
    return 4294967167;
  }
  if (!a1 || (uint64_t result = op_tags_ensure_capacity(a1, v12), (result & 0x80000000) == 0))
  {
    if (v12)
    {
      uint64_t v15 = 0;
      while (v12 - v15 <= v10 >> 2)
      {
        unsigned int v18 = *(_DWORD *)v13;
        uint64_t v16 = v13 + 4;
        size_t v17 = v18;
        BOOL v9 = v10 - 4 >= v18;
        size_t v10 = v10 - 4 - v18;
        if (!v9) {
          break;
        }
        if ((v17 & 0x80000000) != 0) {
          return 4294967167;
        }
        if (a1)
        {
          *(void *)(*(void *)a1 + 8 * v15) = op_strdup_with_len(v16, v17);
          uint64_t v19 = *(void *)a1;
          if (!*(void *)(*(void *)a1 + 8 * v15)) {
            return 4294967167;
          }
          *(_DWORD *)(*(void *)(a1 + 8) + 4 * v15++) = v17;
          *(_DWORD *)(a1 + 16) = v15;
          *(void *)(v19 + 8 * v15) = 0;
        }
        else
        {
          ++v15;
        }
        int v13 = &v16[v17];
        if (v15 == v12) {
          goto LABEL_29;
        }
      }
      return 4294967163;
    }
LABEL_29:
    if (!v10 || (*v13 & 1) == 0) {
      return 0;
    }
    uint64_t result = v10 >> 31 ? 4294967167 : 0;
    if (a1 && !(v10 >> 31))
    {
      *(void *)(*(void *)a1 + 8 * v12) = malloc(v10);
      uint64_t v20 = *(void **)(*(void *)a1 + 8 * v12);
      if (v20)
      {
        memcpy(v20, v13, v10);
        uint64_t result = 0;
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12) = v10;
        return result;
      }
      return 4294967167;
    }
  }
  return result;
}

uint64_t opus_tags_copy(_OWORD *a1, uint64_t a2)
{
  long long v21 = 0uLL;
  *(void *)&long long v22 = 0;
  unint64_t v4 = *(const char **)(a2 + 24);
  size_t v5 = strlen(v4);
  *((void *)&v22 + 1) = op_strdup_with_len(v4, v5);
  if (*((void *)&v22 + 1))
  {
    unint64_t v6 = *(int *)(a2 + 16);
    uint64_t v7 = op_tags_ensure_capacity((uint64_t)&v21, v6);
    if ((v7 & 0x80000000) != 0)
    {
      uint64_t v15 = v7;
      goto LABEL_10;
    }
    if ((int)v6 < 1) {
      goto LABEL_12;
    }
    LODWORD(v8) = v22;
    int v9 = **(_DWORD **)(a2 + 8);
    size_t v10 = op_strdup_with_len(**(const void ***)a2, v9);
    uint64_t v11 = v21;
    *(void *)long long v21 = v10;
    if (v10)
    {
      uint64_t v8 = 0;
      uint64_t v12 = *((void *)&v21 + 1);
      uint64_t v13 = v11 + 8;
      while (1)
      {
        *(_DWORD *)(v12 + 4 * v8) = v9;
        if (v6 - 1 == v8) {
          break;
        }
        int v9 = *(_DWORD *)(*(void *)(a2 + 8) + 4 * v8 + 4);
        unsigned int v14 = op_strdup_with_len(*(const void **)(*(void *)a2 + 8 * v8 + 8), v9);
        *(void *)(v13 + 8 * v8++) = v14;
        if (!v14) {
          goto LABEL_8;
        }
      }
      LODWORD(v22) = v6;
LABEL_12:
      uint64_t v16 = *(void *)(a2 + 8);
      if (!v16) {
        goto LABEL_16;
      }
      size_t v17 = *(unsigned int *)(v16 + 4 * v6);
      if ((int)v17 < 1) {
        goto LABEL_16;
      }
      unsigned int v18 = malloc(*(unsigned int *)(v16 + 4 * v6));
      *(void *)(v21 + 8 * v6) = v18;
      if (v18)
      {
        memcpy(v18, *(const void **)(*(void *)a2 + 8 * v6), v17);
        *(_DWORD *)(*((void *)&v21 + 1) + 4 * v6) = v17;
LABEL_16:
        uint64_t v15 = 0;
        long long v19 = v22;
        *a1 = v21;
        a1[1] = v19;
        return v15;
      }
      goto LABEL_9;
    }
LABEL_8:
    LODWORD(v22) = v8;
  }
LABEL_9:
  uint64_t v15 = 4294967167;
LABEL_10:
  opus_tags_clear((uint64_t)&v21);
  return v15;
}

uint64_t opus_tags_add(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v6 = *(int *)(a1 + 16);
  uint64_t result = op_tags_ensure_capacity(a1, v6 + 1);
  if ((result & 0x80000000) == 0)
  {
    size_t v8 = strlen(a2);
    size_t v9 = strlen(a3);
    uint64_t result = 4294967167;
    unint64_t v10 = v9 + v8;
    if (!__CFADD__(v9, v8) && v10 <= 0x7FFFFFFD)
    {
      uint64_t v11 = malloc(v10 + 2);
      if (v11)
      {
        uint64_t v12 = v11;
        memcpy(v11, a2, v8);
        v12[v8] = 61;
        memcpy(&v12[v8 + 1], a3, v9 + 1);
        uint64_t result = 0;
        *(void *)(*(void *)a1 + 8 * v6) = v12;
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v6) = v10 + 1;
        *(_DWORD *)(a1 + 16) = v6 + 1;
      }
      else
      {
        return 4294967167;
      }
    }
  }
  return result;
}

uint64_t op_tags_ensure_capacity(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x7FFFFFFE) {
    return 4294967167;
  }
  unint64_t v4 = a2 + 1;
  uint64_t v5 = *(int *)(a1 + 16);
  uint64_t v6 = realloc(*(void **)(a1 + 8), 4 * (a2 + 1));
  if (!v6) {
    return 4294967167;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7) {
    LODWORD(v7) = v6[v5];
  }
  else {
    v6[v5] = 0;
  }
  v6[a2] = v7;
  *(void *)(a1 + 8) = v6;
  size_t v8 = realloc(*(void **)a1, 8 * v4);
  if (!v8) {
    return 4294967167;
  }
  size_t v9 = v8;
  unint64_t v10 = *(void **)a1;
  if (*(void *)a1) {
    unint64_t v10 = (void *)v8[v5];
  }
  else {
    v8[v5] = 0;
  }
  uint64_t result = 0;
  v9[a2] = v10;
  *(void *)a1 = v9;
  return result;
}

uint64_t opus_tags_add_comment(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)(a1 + 16);
  uint64_t result = op_tags_ensure_capacity(a1, v4 + 1);
  if ((result & 0x80000000) == 0)
  {
    int v6 = strlen(a2);
    uint64_t v7 = op_strdup_with_len(a2, v6);
    if (v7)
    {
      size_t v8 = v7;
      uint64_t result = 0;
      *(void *)(*(void *)a1 + 8 * v4) = v8;
      *(_DWORD *)(*(void *)(a1 + 8) + 4 * v4) = v6;
      *(_DWORD *)(a1 + 16) = v4 + 1;
    }
    else
    {
      return 4294967167;
    }
  }
  return result;
}

unsigned char *op_strdup_with_len(const void *a1, size_t a2)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t v4 = malloc(a2 + 1);
  uint64_t v5 = v4;
  if (v4)
  {
    memcpy(v4, a1, a2);
    v5[a2] = 0;
  }
  return v5;
}

uint64_t opus_tags_set_binary_suffix(uint64_t a1, unsigned char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 4294967165;
  }
  if (a3 && (!a2 || (*a2 & 1) == 0)) {
    return 4294967165;
  }
  unint64_t v7 = *(int *)(a1 + 16);
  uint64_t result = op_tags_ensure_capacity(a1, v7);
  if ((result & 0x80000000) == 0)
  {
    size_t v8 = realloc(*(void **)(*(void *)a1 + 8 * v7), a3);
    if (v8)
    {
      size_t v9 = v8;
      memcpy(v8, a2, a3);
      uint64_t result = 0;
      *(void *)(*(void *)a1 + 8 * v7) = v9;
      *(_DWORD *)(*(void *)(a1 + 8) + 4 * v7) = a3;
    }
    else
    {
      return 4294967167;
    }
  }
  return result;
}

uint64_t opus_tagcompare(char *a1, char *a2)
{
  size_t v4 = strlen(a1);
  if (v4 >> 31) {
    return 0xFFFFFFFFLL;
  }
  size_t v5 = v4;
  uint64_t result = op_strncasecmp(a1, a2, v4);
  if (!result) {
    return (61 - a2[v5]);
  }
  return result;
}

uint64_t opus_tagncompare(char *a1, int a2, char *a3)
{
  uint64_t result = op_strncasecmp(a1, a3, a2);
  if (!result) {
    return (61 - a3[a2]);
  }
  return result;
}

char *opus_tags_query(uint64_t a1, char *__s, int a3)
{
  size_t v6 = strlen(__s);
  if (v6 >> 31) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if ((int)v7 < 1) {
    return 0;
  }
  size_t v8 = v6;
  int v9 = 0;
  for (uint64_t i = *(char ***)a1; ; ++i)
  {
    uint64_t v11 = *i;
    if (op_strncasecmp(__s, *i, v8) || v11[v8] != 61) {
      goto LABEL_8;
    }
    if (v9 == a3) {
      break;
    }
    ++v9;
LABEL_8:
    if (!--v7) {
      return 0;
    }
  }
  return &(*i)[v8 + 1];
}

uint64_t opus_tags_query_count(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >> 31) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 < 1) {
    return 0;
  }
  size_t v6 = v4;
  LODWORD(v7) = 0;
  size_t v8 = *(char ***)a1;
  do
  {
    int v9 = *v8;
    int v10 = op_strncasecmp(__s, *v8, v6);
    if (!v10) {
      int v10 = 61 - v9[v6];
    }
    if (v10) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = (v7 + 1);
    }
    ++v8;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t opus_tags_get_binary_suffix(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(int *)(a1 + 16);
    int v4 = *(_DWORD *)(v2 + 4 * v3);
    *a2 = v4;
    if (v4 < 1) {
      return 0;
    }
    else {
      return *(void *)(*(void *)a1 + 8 * v3);
    }
  }
  else
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t opus_tags_get_album_gain(uint64_t *a1, int *a2)
{
  return opus_tags_get_gain(a1, a2, "R128_ALBUM_GAIN");
}

uint64_t opus_tags_get_gain(uint64_t *a1, int *a2, char *a3)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if ((int)v3 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  while (1)
  {
    size_t v8 = *(char **)(v7 + 8 * v6);
    if (!op_strncasecmp(a3, v8, 15) && v8[15] == 61)
    {
      uint64_t v9 = *(void *)(v7 + 8 * v6);
      int v10 = (unsigned char *)(v9 + 17);
      int v13 = *(unsigned __int8 *)(v9 + 16);
      uint64_t v11 = (unsigned char *)(v9 + 16);
      int v12 = v13;
      if (v13 == 45)
      {
        uint64_t v11 = v10;
        int v14 = -1;
      }
      else
      {
        int v14 = 0;
      }
      if (v12 == 43) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v11;
      }
      if (v12 == 43) {
        int v16 = 0;
      }
      else {
        int v16 = v14;
      }
      int v17 = *v15;
      if ((v17 - 48) <= 9)
      {
        int v18 = 0;
        long long v19 = v15 + 1;
        while (1)
        {
          int v18 = v17 + 10 * v18 - 48;
          if (v18 > 0x7FFF - v16) {
            goto LABEL_21;
          }
          int v20 = *v19++;
          int v17 = v20;
          if ((v20 - 48) > 9)
          {
            if (v17) {
              goto LABEL_21;
            }
            goto LABEL_23;
          }
        }
      }
      int v18 = 0;
      if (!*v15) {
        break;
      }
    }
LABEL_21:
    if (++v6 == v3) {
      return 0xFFFFFFFFLL;
    }
  }
LABEL_23:
  uint64_t result = 0;
  *a2 = (v18 + v16) ^ v16;
  return result;
}

uint64_t opus_tags_get_track_gain(uint64_t *a1, int *a2)
{
  return opus_tags_get_gain(a1, a2, "R128_TRACK_GAIN");
}

uint64_t opus_picture_tag_parse(uint64_t a1, char *a2)
{
  int v4 = op_strncasecmp("METADATA_BLOCK_PICTURE", a2, 22);
  if (!v4) {
    int v4 = 61 - a2[22];
  }
  uint64_t v5 = 23;
  if (v4) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = &a2[v5];
  size_t v7 = strlen(&a2[v5]);
  if ((v7 & 3) == 0 && v7 >= 0x2C)
  {
    size_t v8 = v7 >> 2;
    unint64_t v9 = 3 * (v7 >> 2) - (v6[v7 - 1] == 61) - (v6[v7 - 2] == 61);
    unint64_t v10 = v9 - 32;
    if (v9 >= 0x20)
    {
      int v13 = (unsigned int *)malloc(v9 + 1);
      if (!v13) {
        return 4294967167;
      }
      int v14 = v13;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v11 = 4294967164;
      while (1)
      {
        uint64_t v17 = 0;
        int v18 = 0;
        uint64_t v19 = 3 * v16;
        do
        {
          int v20 = v6[v17];
          if (v20 == 43)
          {
            int v21 = 62;
          }
          else if (v20 == 47)
          {
            int v21 = 63;
          }
          else if ((v20 - 48) > 9)
          {
            if ((v20 - 97) > 0x19)
            {
              int v21 = v20 - 65;
              if ((v20 - 65) > 0x19)
              {
                long long v22 = 0;
                if (v20 != 61)
                {
                  unsigned int v23 = 0;
                  goto LABEL_101;
                }
                unsigned int v23 = 0;
                if (v15 + v17 <= v9) {
                  goto LABEL_101;
                }
                int v21 = 0;
              }
            }
            else
            {
              int v21 = v20 - 71;
            }
          }
          else
          {
            int v21 = v20 + 4;
          }
          int v18 = v21 | (v18 << 6);
          ++v17;
        }
        while (v17 != 4);
        *((unsigned char *)v13 + 3 * v16) = BYTE2(v18);
        if (v19 + 1 < v9)
        {
          *((unsigned char *)v13 + v19 + 1) = BYTE1(v18);
          unint64_t v24 = v19 + 2;
          if (v24 < v9) {
            *((unsigned char *)v13 + v24) = v18;
          }
        }
        ++v16;
        v15 += 3;
        v6 += 4;
        if (v16 == v8)
        {
          size_t v25 = bswap32(v13[1]);
          size_t v26 = v10 - v25;
          if (v10 < v25)
          {
            long long v22 = 0;
            goto LABEL_36;
          }
          unsigned int v27 = *v13;
          int v28 = (char *)malloc((v25 + 1));
          long long v22 = v28;
          if (v28)
          {
            memcpy(v28, v14 + 2, v25);
            v22[v25] = 0;
            size_t v29 = bswap32(*(unsigned int *)((char *)v14 + v25 + 8));
            if (v26 < v29)
            {
LABEL_36:
              unsigned int v23 = 0;
              goto LABEL_37;
            }
            uint64_t v30 = malloc((v29 + 1));
            unsigned int v23 = v30;
            if (v30)
            {
              memcpy(v30, (char *)v14 + v25 + 12, v29);
              v23[v29] = 0;
              size_t v31 = v25 + 12 + v29;
              HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 1);
              LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 2));
              int v33 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31) << 24);
              HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 5);
              LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 6));
              int v34 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31 + 4) << 24);
              HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 9);
              LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 10));
              unsigned int v35 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31 + 8) << 24);
              HIDWORD(v32) = *((unsigned __int8 *)v14 + v31 + 13);
              LODWORD(v32) = bswap32(*(unsigned __int16 *)((char *)v14 + v31 + 14));
              unsigned int v36 = (v32 >> 16) | (*((unsigned __int8 *)v14 + v31 + 12) << 24);
              if (v35) {
                BOOL v37 = v34 == 0;
              }
              else {
                BOOL v37 = 1;
              }
              BOOL v38 = v37 || v33 == 0;
              if (!v38 || !(v33 | v34 | v35 | v36))
              {
                unint64_t v39 = bswap32(*(unsigned int *)((char *)v14 + v31 + 16));
                size_t v40 = v31 + 20;
                if (v9 - (v31 + 20) >= v39)
                {
                  unint64_t v60 = __PAIR64__(v35, v36);
                  unsigned int v61 = bswap32(v27);
                  unint64_t v62 = v39;
                  size_t v41 = v40 + v39;
                  int v42 = -1;
                  char v43 = 1;
                  switch((int)v25)
                  {
                    case 0:
                      goto LABEL_54;
                    case 3:
                      size_t v58 = v40;
                      if (strcmp(v22, "-->"))
                      {
                        int v42 = -1;
                        char v43 = 1;
                        size_t v40 = v58;
                        goto LABEL_91;
                      }
                      if (v61 == 1 && (v33 | v34) != 0)
                      {
                        uint64_t v11 = 4294967164;
                        if (v33 != 32 || v34 != 32) {
                          goto LABEL_101;
                        }
                      }
                      unsigned int v59 = 0;
                      *((unsigned char *)v14 + v41++) = 0;
                      unsigned int v54 = v61;
                      size_t v40 = v58;
                      goto LABEL_98;
                    case 6:
                      size_t v44 = v40;
                      int v45 = op_strncasecmp(v22, "image/", 6);
                      size_t v40 = v44;
                      if (v45) {
                        goto LABEL_86;
                      }
LABEL_54:
                      uint64_t v46 = (unsigned __int16 *)((char *)v14 + v40);
                      unint64_t v47 = v62;
                      if (v62 < 3) {
                        goto LABEL_61;
                      }
                      if (*v46 == 55551 && *((unsigned __int8 *)v46 + 2) == 255)
                      {
LABEL_87:
                        unint64_t v64 = 0;
                        uint64_t v65 = 0;
                        size_t v49 = v40;
                        int v63 = -1;
                        op_extract_jpeg_params((unsigned __int16 *)((char *)v14 + v40), v47, (_DWORD *)&v65 + 1, &v65, (_DWORD *)&v64 + 1, &v64, &v63);
                        int v42 = 1;
                        char v43 = 1;
                        goto LABEL_88;
                      }
                      if (v62 < 8 || *(void *)v46 != 0xA1A0A0D474E5089)
                      {
LABEL_61:
                        size_t v49 = v40;
                        goto LABEL_62;
                      }
                      goto LABEL_80;
                    case 9:
                      size_t v49 = v40;
                      if (op_strncasecmp(v22, "image/png", 9))
                      {
                        if (!op_strncasecmp(v22, "image/gif", 9))
                        {
                          uint64_t v46 = (unsigned __int16 *)((char *)v14 + v49);
                          unint64_t v47 = v62;
LABEL_62:
                          if (op_is_gif ((uint64_t)v46, v47))
                          {
                            unint64_t v64 = 0;
                            uint64_t v65 = 0;
                            int v63 = -1;
                            op_extract_gif_params((uint64_t)v14 + v49, v62, (_DWORD *)&v65 + 1, &v65, (_DWORD *)&v64 + 1, &v64, &v63);
                            char v43 = 1;
                            int v42 = 3;
                            goto LABEL_88;
                          }
                        }
                      }
                      else if (v62 >= 8)
                      {
                        size_t v40 = v49;
                        unint64_t v47 = v62;
                        if (*(void *)((char *)v14 + v49) != 0xA1A0A0D474E5089)
                        {
LABEL_86:
                          int v42 = -1;
                          char v43 = 1;
                          goto LABEL_91;
                        }
LABEL_80:
                        unint64_t v64 = 0;
                        uint64_t v65 = 0;
                        size_t v49 = v40;
                        int v63 = -1;
                        op_extract_png_params((unsigned int *)((char *)v14 + v40), v47, (_DWORD *)&v65 + 1, &v65, (_DWORD *)&v64 + 1, (unsigned int *)&v64, &v63);
                        char v43 = 0;
                        int v42 = 2;
LABEL_88:
                        if ((v63 & 0x80000000) == 0)
                        {
                          int v34 = v65;
                          int v33 = HIDWORD(v65);
                          unint64_t v60 = v64;
                        }
LABEL_90:
                        size_t v40 = v49;
LABEL_91:
                        unsigned int v54 = v61;
                        if (v61 == 1)
                        {
                          if (v33 != 32) {
                            char v43 = 1;
                          }
                          uint64_t v11 = 4294967164;
                          if ((v43 & 1) != 0 || v34 != 32) {
                            goto LABEL_101;
                          }
                          unsigned int v59 = 2;
                          int v33 = 32;
                        }
                        else
                        {
                          unsigned int v59 = v42;
                        }
LABEL_98:
                        size_t v55 = v41 - v40;
                        size_t v56 = v40;
                        memmove(v14, (char *)v14 + v40, v41 - v40);
                        uint64_t v57 = realloc(v14, v55);
                        if (v41 == v56 || v57)
                        {
                          uint64_t v11 = 0;
                          *(_DWORD *)a1 = v54;
                          *(_DWORD *)(a1 + 4) = 0;
                          *(void *)(a1 + 8) = v22;
                          *(void *)(a1 + 16) = v23;
                          *(_DWORD *)(a1 + 24) = v33;
                          *(_DWORD *)(a1 + 28) = v34;
                          *(_DWORD *)(a1 + 32) = HIDWORD(v60);
                          *(_DWORD *)(a1 + 36) = v60;
                          *(_DWORD *)(a1 + 40) = v62;
                          *(_DWORD *)(a1 + 44) = 0;
                          *(void *)(a1 + 48) = v57;
                          *(void *)(a1 + 56) = v59;
                          return v11;
                        }
                        goto LABEL_100;
                      }
                      int v42 = -1;
                      char v43 = 1;
                      goto LABEL_90;
                    case 10:
                      size_t v49 = v40;
                      int v50 = op_strncasecmp(v22, "image/jpeg", 10);
                      int v42 = -1;
                      char v43 = 1;
                      if (v62 < 3 || v50) {
                        goto LABEL_90;
                      }
                      unsigned int v51 = bswap32(*(unsigned __int16 *)((char *)v14 + v49)) >> 16;
                      if (v51 == 65496)
                      {
                        int v52 = *((unsigned __int8 *)v14 + v49 + 2) - 255;
                      }
                      else if (v51 < 0xFFD8)
                      {
                        int v52 = -1;
                      }
                      else
                      {
                        int v52 = 1;
                      }
                      unint64_t v47 = v62;
                      size_t v40 = v49;
                      if (v52) {
                        goto LABEL_86;
                      }
                      goto LABEL_87;
                    default:
                      goto LABEL_91;
                  }
                }
              }
LABEL_37:
              uint64_t v11 = 4294967164;
LABEL_101:
              free(v23);
              free(v22);
              free(v14);
              return v11;
            }
          }
          else
          {
            unsigned int v23 = 0;
          }
LABEL_100:
          uint64_t v11 = 4294967167;
          goto LABEL_101;
        }
      }
    }
  }
  return 4294967164;
}

double opus_picture_tag_init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void opus_picture_tag_clear(uint64_t a1)
{
  free(*(void **)(a1 + 16));
  free(*(void **)(a1 + 8));
  uint64_t v2 = *(void **)(a1 + 48);

  free(v2);
}

BOOL op_is_gif (uint64_t a1, unint64_t a2)
{
  if (a2 < 6) {
    return 0;
  }
  if (*(_DWORD *)a1 == 944130375 && *(_WORD *)(a1 + 4) == 24887) {
    return 1;
  }
  return *(_DWORD *)a1 == 944130375 && *(_WORD *)(a1 + 4) == 24889;
}

unsigned __int16 *op_extract_jpeg_params(unsigned __int16 *result, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  if (a2 >= 3 && *result == 55551 && *((unsigned __int8 *)result + 2) == 255)
  {
    unint64_t v8 = 2;
    while (1)
    {
      if (v8 < a2)
      {
        while (*((unsigned __int8 *)result + v8) != 255)
        {
          if (a2 == ++v8)
          {
LABEL_15:
            unint64_t v9 = a2;
            goto LABEL_17;
          }
        }
      }
      if (v8 < a2)
      {
        while (*((unsigned __int8 *)result + v8) == 255)
        {
          if (a2 == ++v8) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v9 = v8;
LABEL_17:
      unint64_t v8 = v9 + 1;
      unint64_t v10 = a2 - (v9 + 1);
      if (a2 <= v9 + 1) {
        break;
      }
      int v11 = *((unsigned __int8 *)result + v9);
      if ((v11 + 40) < 3u) {
        break;
      }
      if ((v11 & 0xF8) != 0xD0)
      {
        if (v10 < 2) {
          return result;
        }
        unint64_t v12 = *((unsigned __int8 *)result + v9 + 2) | ((unint64_t)*((unsigned __int8 *)result + v8) << 8);
        if (v12 < 2 || v10 < v12) {
          return result;
        }
        if (v11 == 192 || (v11 + 48) >= 0xF1u && (v11 & 3) != 0)
        {
          if (v12 >= 8)
          {
            *a4 = __rev16(*(unsigned __int16 *)((char *)result + v9 + 4));
            *a3 = __rev16(*(unsigned __int16 *)((char *)result + v9 + 6));
            *a5 = *((unsigned __int8 *)result + v9 + 8) * *((unsigned __int8 *)result + v9 + 3);
            *a6 = 0;
            *a7 = 0;
          }
          return result;
        }
        v8 += v12;
      }
    }
  }
  return result;
}

void *op_extract_png_params(void *result, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, unsigned int *a6, int *a7)
{
  if (a2 >= 8 && *result == 0xA1A0A0D474E5089 && a2 - 20 <= 0xFFFFFFFFFFFFFFF3)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v9 = (_DWORD *)((char *)result + v8);
      unint64_t v10 = bswap32(*(_DWORD *)((char *)result + v8));
      if (a2 - 12 - v8 < v10) {
        break;
      }
      if (v10 == 13 && v9[1] == 1380206665)
      {
        *a3 = bswap32(v9[2]);
        *a4 = bswap32(v9[3]);
        if (*((unsigned char *)result + v8 + 17) != 3)
        {
          int v11 = *((unsigned __int8 *)result + v8 + 16);
          switch(*((unsigned char *)result + v8 + 17))
          {
            case 0:
              goto LABEL_21;
            case 2:
              v11 *= 3;
              goto LABEL_21;
            case 4:
              v11 *= 2;
              goto LABEL_21;
            case 6:
              v11 *= 4;
LABEL_21:
              *a5 = v11;
              break;
            default:
              break;
          }
          *a6 = 0;
          *a7 = 0;
          return result;
        }
        *a5 = 24;
        *a7 = 1;
      }
      else if (*a7 >= 1 && v9[1] == 1163152464)
      {
        *a6 = v10 / 3;
        return result;
      }
      v8 += (v10 + 12);
    }
    while (a2 - v8 > 0xB);
  }
  return result;
}

BOOL op_extract_gif_params(uint64_t a1, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  BOOL result = op_is_gif (a1, a2);
  if (a2 >= 0xE && result)
  {
    *a3 = *(unsigned __int16 *)(a1 + 6);
    *a4 = *(unsigned __int16 *)(a1 + 8);
    *a5 = 24;
    *a6 = 1 << ((*(unsigned char *)(a1 + 10) & 7) + 1);
    *a7 = 1;
  }
  return result;
}

uint64_t op_strncasecmp(char *a1, char *a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t v3 = a3;
  while (1)
  {
    int v5 = *a1++;
    int v4 = v5;
    int v7 = *a2++;
    int v6 = v7;
    if ((v4 - 97) < 0x1A) {
      v4 -= 32;
    }
    if ((v6 - 97) < 0x1A) {
      v6 -= 32;
    }
    uint64_t v8 = (v4 - v6);
    if (v8) {
      break;
    }
    if (!--v3) {
      return 0;
    }
  }
  return v8;
}

void *op_mem_stream_create(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0) {
    return 0;
  }
  BOOL result = malloc(0x18uLL);
  if (result)
  {
    long long v7 = *(_OWORD *)off_26D2148D8;
    *a1 = OP_MEM_CALLBACKS;
    a1[1] = v7;
    *BOOL result = a2;
    result[1] = a3;
    result[2] = 0;
  }
  return result;
}

uint64_t op_mem_read(void *a1, void *__dst, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  BOOL v6 = v4 <= v5;
  uint64_t v7 = v4 - v5;
  if (v6) {
    return 0;
  }
  if (v7 >= a3) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = v7;
  }
  memcpy(__dst, (const void *)(*a1 + v5), (int)v8);
  a1[2] = v5 + (int)v8;
  return v8;
}

uint64_t op_mem_seek(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
LABEL_8:
    if (-v3 > a2 || (v3 ^ 0x7FFFFFFFFFFFFFFFLL) < a2) {
      return 0xFFFFFFFFLL;
    }
    a2 += v3;
LABEL_14:
    uint64_t v5 = 0;
    *(void *)(a1 + 16) = a2;
    return v5;
  }
  if (a3 == 1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    goto LABEL_8;
  }
  if (!a3 && (a2 & 0x8000000000000000) == 0) {
    goto LABEL_14;
  }
  return 0xFFFFFFFFLL;
}

uint64_t op_mem_tell(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t op_mem_close(void *a1)
{
  return 0;
}

int *opus_fft(int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v224 = *MEMORY[0x263EF8340];
  int v3 = result[1];
  if (*result >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      *(void *)(a3 + 8 * *(__int16 *)(*((void *)result + 5) + 2 * v4)) = *(void *)(a2 + 8 * v4);
      ++v4;
    }
    while (v4 < *result);
  }
  int v195 = v3 & ~(v3 >> 31);
  uint64_t v5 = 1;
  v223[0] = 1;
  BOOL v6 = (unsigned __int16 *)result + 5;
  int v7 = -1;
  int v8 = 1;
  do
  {
    v8 *= (__int16)*(v6 - 1);
    v223[v5] = v8;
    int v9 = *v6;
    v6 += 2;
    ++v5;
    v7 += 2;
  }
  while (v9 != 1);
  int v198 = *((__int16 *)result + v7 + 4);
  v194 = (int *)(a3 + 4);
  uint64_t v10 = v5 - 2;
  int32x2_t v11 = vdup_n_s32(0x5556u);
  int32x2_t v12 = vdup_n_s32(0x2AABu);
  uint64_t v200 = a3;
  v196 = result;
  do
  {
    int v13 = v198;
    uint64_t v197 = v10;
    if (v10)
    {
      unsigned int v14 = v10;
      int v198 = SHIWORD(result[(int)v10 + 1]);
      int v15 = v10;
    }
    else
    {
      unsigned int v14 = 0;
      int v15 = 0;
      int v198 = 1;
    }
    switch(LOWORD(result[v14 + 2]))
    {
      case 2:
        uint64_t v16 = v223[v15];
        if ((int)v16 >= 1)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *((void *)v196 + 6) + 2;
          uint64_t v19 = 2 * v13;
          int v20 = v194;
          do
          {
            if (v13 >= 1)
            {
              int v21 = (__int16 *)v18;
              long long v22 = v20;
              int v23 = v13;
              do
              {
                unint64_t v24 = &v22[v19];
                int v25 = *(v22 - 1);
                int v26 = *v22;
                int v27 = v22[v19 - 1];
                int v28 = v22[2 * v13];
                int v29 = *(v21 - 1);
                int v30 = v27 >> 17;
                int v31 = (unsigned __int16)(v27 >> 1);
                int v32 = *v21;
                int v33 = v28 >> 17;
                int v34 = (unsigned __int16)(v28 >> 1);
                int v35 = ((v31 * v29) >> 15) - ((v34 * v32) >> 15) + 2 * (v30 * v29 - v33 * v32);
                int v36 = ((v31 * v32) >> 15) + ((v34 * v29) >> 15) + 2 * (v33 * v29 + v30 * v32);
                *(v24 - 1) = (v25 >> 1) - v35;
                *unint64_t v24 = (v26 >> 1) - v36;
                *(v22 - 1) = v35 + (v25 >> 1);
                int *v22 = v36 + (v26 >> 1);
                v22 += 2;
                v21 += 2 * (v16 << v195);
                --v23;
              }
              while (v23);
            }
            ++v17;
            v20 += 2 * v198;
          }
          while (v17 != v16);
        }
        break;
      case 3:
        uint64_t v37 = v223[v15];
        if ((int)v37 >= 1)
        {
          uint64_t v38 = 0;
          uint64_t v39 = (int)(v37 << v195);
          uint64_t v40 = *((void *)v196 + 6);
          int v41 = *(__int16 *)(v40 + 4 * (int)v39 * (uint64_t)v13 + 2);
          int v42 = 2 * v41;
          char v43 = (__int16 *)(v40 + 2);
          uint64_t v44 = 8 * v39;
          uint64_t v45 = v13;
          uint64_t v46 = 4 * v39;
          do
          {
            unint64_t v47 = (int32x2_t *)(a3 + 8 * v38 * v198);
            BOOL v48 = v43;
            size_t v49 = v43;
            uint64_t v50 = v13;
            do
            {
              int32x2_t *v47 = (int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(*v47, 0x10uLL), v11), (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)*v47, (int8x8_t)0xFFFF0000FFFFLL), v12), 0xFuLL);
              unsigned int v51 = &v47[v45];
              v47[v13] = (int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(v47[v13], 0x10uLL), v11), (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)v47[v13], (int8x8_t)0xFFFF0000FFFFLL), v12), 0xFuLL);
              int v52 = &v47[2 * v13];
              uint32x2_t v53 = vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(*v52, 0x10uLL), v11), (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)*v52, (int8x8_t)0xFFFF0000FFFFLL), v12), 0xFuLL);
              *int v52 = (int32x2_t)v53;
              int v54 = *(v48 - 1);
              int v55 = v47[v13].i32[0] >> 16;
              int v56 = (unsigned __int16)v47[v13].i32[0];
              int v57 = *v48;
              int v58 = v47[v45].i32[1] >> 16;
              int v59 = (unsigned __int16)v47[v45].i32[1];
              int v60 = ((v56 * v54) >> 15) - ((v59 * v57) >> 15) + 2 * (v55 * v54 - v58 * v57);
              int v61 = ((v59 * v54) >> 15) + ((v56 * v57) >> 15) + 2 * (v55 * v57 + v58 * v54);
              int v62 = *(v49 - 1);
              int v63 = *v49;
              int v64 = ((v53.u16[0] * v62) >> 15)
                  - ((v53.u16[2] * v63) >> 15)
                  + 2 * ((v53.i32[0] >> 16) * v62 - (v53.i32[1] >> 16) * v63);
              int v65 = ((v53.u16[0] * v63) >> 15)
                  + ((v53.u16[2] * v62) >> 15)
                  + 2 * ((v53.i32[1] >> 16) * v62 + (v53.i32[0] >> 16) * v63);
              int v66 = v65 + v61;
              int v67 = v61 - v65;
              int v68 = v47->i32[1] - (v66 >> 1);
              v51->i32[0] = v47->i32[0] - ((v64 + v60) >> 1);
              v51->i32[1] = v68;
              int v69 = ((v60 - v64) >> 16) * v42 + (((unsigned __int16)(v60 - v64) * v41) >> 15);
              int v70 = (v67 >> 16) * v42 + (((unsigned __int16)v67 * v41) >> 15);
              __int32 v71 = v47->i32[1];
              v47->i32[0] += v64 + v60;
              v47->i32[1] = v71 + v66;
              ++v47;
              int v72 = v51->i32[1] - v69;
              v52->i32[0] = v70 + v51->i32[0];
              v52->i32[1] = v72;
              LODWORD(v52) = v51->i32[0] - v70;
              int v73 = v51->i32[1] + v69;
              v51->i32[0] = (int)v52;
              v51->i32[1] = v73;
              size_t v49 = (__int16 *)((char *)v49 + v44);
              BOOL v48 = (__int16 *)((char *)v48 + v46);
              --v50;
            }
            while (v50);
            ++v38;
          }
          while (v38 != v37);
        }
        break;
      case 4:
        uint64_t v74 = v223[v15];
        if ((int)v74 >= 1)
        {
          uint64_t v75 = 0;
          uint64_t v76 = (int)(v74 << v195);
          uint64_t v77 = 2 * v13;
          uint64_t v78 = *((void *)v196 + 6) + 2;
          uint64_t v79 = 12 * v76;
          uint64_t v80 = 4 * v76;
          uint64_t v81 = 8 * v76;
          do
          {
            if (v13 >= 1)
            {
              int64_t v82 = (int32x2_t *)(a3 + 8 * v75 * v198);
              uint64_t v83 = (__int16 *)v78;
              int v84 = (__int16 *)v78;
              uint64_t v85 = (__int16 *)v78;
              int v86 = v13;
              do
              {
                v87 = &v82[v13];
                uint64_t v88 = &v82[3 * v13];
                int32x2_t v89 = vshr_n_s32(*v87, 0x10uLL);
                int32x2_t v90 = (int32x2_t)vand_s8((int8x8_t)*v87, (int8x8_t)0xFFFF0000FFFFLL);
                int32x2_t v91 = vdup_n_s32(*v84);
                int32x2_t v92 = vmul_s32(vrev64_s32(v89), v91);
                int32x2_t v93 = vmul_s32(vrev64_s32(v90), v91);
                int32x2_t v94 = vdup_n_s32(*(v84 - 1));
                int32x2_t v95 = vmul_s32(v89, v94);
                int32x2_t v96 = vshr_n_s32(vmul_s32(v90, v94), 0xFuLL);
                v94.i32[0] = vsub_s32(v95, v92).u32[0];
                v94.i32[1] = vadd_s32(v95, v92).i32[1];
                v92.i32[0] = vsub_s32(v96, vshr_n_s32(v93, 0xFuLL)).u32[0];
                v92.i32[1] = vsra_n_s32(v96, v93, 0xFuLL).i32[1];
                int32x2_t v97 = vadd_s32(v92, vadd_s32(v94, v94));
                int32x2_t v98 = v82[v77];
                int32x2_t v99 = vshr_n_s32(v98, 0x10uLL);
                int32x2_t v100 = (int32x2_t)vand_s8((int8x8_t)v98, (int8x8_t)0xFFFF0000FFFFLL);
                int32x2_t v101 = vdup_n_s32(*v83);
                int32x2_t v102 = vmul_s32(vrev64_s32(v99), v101);
                int32x2_t v103 = vmul_s32(vrev64_s32(v100), v101);
                int32x2_t v104 = vdup_n_s32(*(v83 - 1));
                int32x2_t v105 = vmul_s32(v99, v104);
                int32x2_t v106 = vshr_n_s32(vmul_s32(v100, v104), 0xFuLL);
                v104.i32[0] = vsub_s32(v105, v102).u32[0];
                v104.i32[1] = vadd_s32(v105, v102).i32[1];
                v105.i32[0] = vsub_s32(v106, vshr_n_s32(v103, 0xFuLL)).u32[0];
                v105.i32[1] = vsra_n_s32(v106, v103, 0xFuLL).i32[1];
                int32x2_t v107 = vadd_s32(v105, vadd_s32(v104, v104));
                int32x2_t v108 = vshr_n_s32(*v88, 0x10uLL);
                int32x2_t v109 = (int32x2_t)vand_s8((int8x8_t)*v88, (int8x8_t)0xFFFF0000FFFFLL);
                int32x2_t v110 = vdup_n_s32(*v85);
                int32x2_t v111 = vmul_s32(vrev64_s32(v108), v110);
                int32x2_t v112 = vmul_s32(vrev64_s32(v109), v110);
                int32x2_t v113 = vdup_n_s32(*(v85 - 1));
                int32x2_t v114 = vmul_s32(v108, v113);
                int32x2_t v115 = vshr_n_s32(vmul_s32(v109, v113), 0xFuLL);
                v113.i32[0] = vsub_s32(v114, v111).u32[0];
                v113.i32[1] = vadd_s32(v114, v111).i32[1];
                v111.i32[0] = vsub_s32(v115, vshr_n_s32(v112, 0xFuLL)).u32[0];
                v111.i32[1] = vsra_n_s32(v115, v112, 0xFuLL).i32[1];
                int32x2_t v116 = vshr_n_s32(vadd_s32(v111, vadd_s32(v113, v113)), 2uLL);
                int32x2_t v117 = vshr_n_s32(vadd_s32(*v82, (int32x2_t)0x200000002), 2uLL);
                int32x2_t v118 = vsub_s32(v117, vshr_n_s32(v107, 2uLL));
                int32x2_t v119 = vsra_n_s32(v117, v107, 2uLL);
                int32x2_t v120 = vsub_s32(vshr_n_s32(v97, 2uLL), v116);
                int32x2_t v121 = vsra_n_s32(v116, v97, 2uLL);
                v82[v77] = vsub_s32(v119, v121);
                *v82++ = vadd_s32(v121, v119);
                v87->i32[0] = v120.i32[1] + v118.i32[0];
                v87->i32[1] = v118.i32[1] - v120.i32[0];
                v88->i32[0] = v118.i32[0] - v120.i32[1];
                v88->i32[1] = v120.i32[0] + v118.i32[1];
                uint64_t v85 = (__int16 *)((char *)v85 + v79);
                int v84 = (__int16 *)((char *)v84 + v80);
                uint64_t v83 = (__int16 *)((char *)v83 + v81);
                --v86;
              }
              while (v86);
            }
            ++v75;
          }
          while (v75 != v74);
        }
        break;
      case 5:
        uint64_t v203 = v223[v15];
        if ((int)v203 >= 1)
        {
          uint64_t v122 = 0;
          uint64_t v123 = (int)(v203 << v195);
          uint64_t v124 = *((void *)v196 + 6);
          uint64_t v125 = (int)v123 * (uint64_t)v13;
          v126 = (__int16 *)(v124 + 8 * v125);
          int v127 = v126[1];
          int v128 = *v126;
          v129 = (__int16 *)(v124 + 4 * v125);
          int v130 = v129[1];
          int v215 = *v129;
          uint64_t v131 = a3 + 32 * v13;
          uint64_t v201 = 8 * v198;
          int v202 = v13;
          v199 = (__int16 *)(v124 + 2);
          uint64_t v132 = a3 + 24 * v13;
          uint64_t v133 = a3 + 8 * v13;
          uint64_t v134 = a3;
          uint64_t v135 = a3 + 16 * v13;
          uint64_t v208 = 16 * v123;
          uint64_t v209 = 8 * v13;
          uint64_t v206 = 4 * v123;
          uint64_t v207 = 12 * v123;
          uint64_t v205 = 2 * v123;
          do
          {
            uint64_t v204 = v122;
            int v136 = v215;
            if (v13 >= 1)
            {
              uint64_t v137 = 0;
              v138 = v199;
              v139 = v199;
              v140 = v199;
              v141 = v199;
              uint64_t v213 = v133;
              uint64_t v214 = v131;
              uint64_t v211 = v135;
              uint64_t v212 = v134;
              uint64_t v210 = v132;
              do
              {
                v221 = v139;
                v222 = v140;
                v142 = (uint32x2_t *)(v134 + v137);
                v218 = (_DWORD *)(v133 + v137);
                int32x2_t v143 = vdup_n_s32(0x3334u);
                int32x2_t v144 = vdup_n_s32(0x199Au);
                uint32x2_t *v142 = vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(*(int32x2_t *)(v134 + v137), 0x10uLL), v143), (uint32x2_t)vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v134 + v137), (int8x8_t)0xFFFF0000FFFFLL), v144), 0xFuLL);
                uint32x2_t v145 = vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(*(int32x2_t *)(v133 + v137), 0x10uLL), v143), (uint32x2_t)vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v133 + v137), (int8x8_t)0xFFFF0000FFFFLL), v144), 0xFuLL);
                *(uint32x2_t *)(v133 + v137) = v145;
                v219 = (_DWORD *)(v132 + v137);
                v220 = (_DWORD *)(v135 + v137);
                uint32x2_t v146 = vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(*(int32x2_t *)(v135 + v137), 0x10uLL), v143), (uint32x2_t)vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v135 + v137), (int8x8_t)0xFFFF0000FFFFLL), v144), 0xFuLL);
                *(uint32x2_t *)(v135 + v137) = v146;
                uint32x2_t v147 = vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(*(int32x2_t *)(v132 + v137), 0x10uLL), v143), (uint32x2_t)vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v132 + v137), (int8x8_t)0xFFFF0000FFFFLL), v144), 0xFuLL);
                *(uint32x2_t *)(v132 + v137) = v147;
                v217 = (_DWORD *)(v131 + v137);
                uint32x2_t v148 = vsra_n_u32((uint32x2_t)vmul_s32(vshr_n_s32(*(int32x2_t *)(v131 + v137), 0x10uLL), v143), (uint32x2_t)vmul_s32((int32x2_t)vand_s8(*(int8x8_t *)(v131 + v137), (int8x8_t)0xFFFF0000FFFFLL), v144), 0xFuLL);
                *(uint32x2_t *)(v131 + v137) = v148;
                int v149 = *(v139 - 1);
                int v150 = *v139;
                int v151 = *(v140 - 1);
                int v152 = *v140;
                int v153 = v146.u16[2] * v152;
                int v154 = *(_DWORD *)(v134 + v137);
                int v155 = *(_DWORD *)(v134 + v137 + 4);
                int v156 = v146.u16[2] * v151;
                int v157 = -((v146.i32[1] >> 16) * v152);
                int v158 = (v146.u16[0] * v152) >> 15;
                int v159 = (v146.i32[1] >> 16) * v151 + (v146.i32[0] >> 16) * v152;
                int v160 = *(v141 - 1);
                __int32 v161 = v157 + (v146.i32[0] >> 16) * v151;
                int v162 = ((v146.u16[0] * v151) >> 15) - (v153 >> 15);
                int v163 = *v141;
                int v164 = ((v145.u16[0] * v150) >> 15)
                     + ((v145.u16[2] * v149) >> 15)
                     + 2 * ((v145.i32[1] >> 16) * v149 + (v145.i32[0] >> 16) * v150);
                int v165 = v158 + (v156 >> 15) + 2 * v159;
                int v166 = ((v147.u16[0] * v163) >> 15)
                     + ((v147.u16[2] * v160) >> 15)
                     + 2 * ((v147.i32[1] >> 16) * v160 + (v147.i32[0] >> 16) * v163);
                int v167 = *(v138 - 1);
                int v168 = ((v145.u16[0] * v149) >> 15)
                     - ((v145.u16[2] * v150) >> 15)
                     + 2 * ((v145.i32[0] >> 16) * v149 - (v145.i32[1] >> 16) * v150);
                int v169 = v162 + 2 * v161;
                int v170 = *v138;
                int v171 = ((v147.u16[0] * v160) >> 15)
                     - ((v147.u16[2] * v163) >> 15)
                     + 2 * ((v147.i32[0] >> 16) * v160 - (v147.i32[1] >> 16) * v163);
                int v172 = ((v148.u16[0] * v167) >> 15)
                     - ((v148.u16[2] * v170) >> 15)
                     + 2 * ((v148.i32[0] >> 16) * v167 - (v148.i32[1] >> 16) * v170);
                int v173 = ((v148.u16[0] * v170) >> 15)
                     + ((v148.u16[2] * v167) >> 15)
                     + 2 * ((v148.i32[1] >> 16) * v167 + (v148.i32[0] >> 16) * v170);
                int v174 = v172 + v168;
                int v175 = v173 + v164;
                int v176 = v164 - v173;
                int v177 = v171 + v169;
                int v178 = v166 + v165;
                int v179 = v169 - v171;
                int v180 = v168 - v172;
                int v181 = v165 - v166;
                int v216 = v155;
                v142->i32[0] = v177 + v154 + v174;
                v142->i32[1] = v178 + v155 + v175;
                LODWORD(v142) = v174 >> 16;
                int v182 = (unsigned __int16)v174;
                int v183 = v177 >> 16;
                int v184 = v175 >> 16;
                int v185 = v155
                     + (((unsigned __int16)v178 * v128) >> 15)
                     + (((unsigned __int16)v175 * v136) >> 15)
                     + 2 * ((v178 >> 16) * v128 + (v175 >> 16) * v136);
                int v186 = (((unsigned __int16)v176 * v130) >> 15)
                     + (((unsigned __int16)v181 * v127) >> 15)
                     + 2 * ((v181 >> 16) * v127 + (v176 >> 16) * v130);
                int v187 = v154
                     + (((unsigned __int16)v177 * v128) >> 15)
                     + ((v182 * v136) >> 15)
                     + 2 * ((v177 >> 16) * v128 + v142 * v136);
                int v188 = (((unsigned __int16)v180 * v130) >> 15)
                     + (((unsigned __int16)v179 * v127) >> 15)
                     + 2 * ((v179 >> 16) * v127 + (v180 >> 16) * v130);
                _DWORD *v218 = v187 - v186;
                v218[1] = v185 + v188;
                int v136 = v215;
                _DWORD *v217 = v187 + v186;
                v217[1] = v185 - v188;
                int v189 = v154 + (((unsigned __int16)v177 * v215) >> 15) + ((v182 * v128) >> 15);
                int v190 = (unsigned __int16)v175 * v128;
                uint64_t v134 = v212;
                uint64_t v133 = v213;
                LODWORD(v142) = v189 + 2 * (v183 * v215 + v142 * v128);
                int v191 = v216
                     + (((unsigned __int16)v178 * v215) >> 15)
                     + (v190 >> 15)
                     + 2 * ((v178 >> 16) * v215 + v184 * v128);
                int v192 = 2 * v130 * (v181 >> 16)
                     + (((unsigned __int16)v181 * v130) >> 15)
                     + -2 * v127 * (v176 >> 16)
                     - (((unsigned __int16)v176 * v127) >> 15);
                uint64_t v132 = v210;
                uint64_t v135 = v211;
                int v193 = (((unsigned __int16)v180 * v127) >> 15)
                     - (((unsigned __int16)v179 * v130) >> 15)
                     + 2 * ((v180 >> 16) * v127 - (v179 >> 16) * v130);
                _DWORD *v220 = v142 + v192;
                v220[1] = v191 + v193;
                uint64_t v131 = v214;
                _DWORD *v219 = v142 - v192;
                v219[1] = v191 - v193;
                v137 += 8;
                v138 = (__int16 *)((char *)v138 + v208);
                v141 = (__int16 *)((char *)v141 + v207);
                v140 = &v222[v206];
                v139 = &v221[v205];
              }
              while (v209 != v137);
            }
            uint64_t v122 = v204 + 1;
            a3 = v200;
            v131 += v201;
            v132 += v201;
            v134 += v201;
            v133 += v201;
            v135 += v201;
            int v13 = v202;
          }
          while (v204 + 1 != v203);
        }
        break;
      default:
        break;
    }
    BOOL result = v196;
    uint64_t v10 = v197 - 1;
  }
  while (v197 > 0);
  return result;
}

int *opus_ifft(int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v221 = *MEMORY[0x263EF8340];
  int v3 = result[1];
  if (*result >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      *(void *)(a3 + 8 * *(__int16 *)(*((void *)result + 5) + 2 * v4)) = *(void *)(a2 + 8 * v4);
      ++v4;
    }
    while (v4 < *result);
  }
  int v198 = v3 & ~(v3 >> 31);
  uint64_t v5 = 1;
  v220[0] = 1;
  BOOL v6 = (unsigned __int16 *)result + 5;
  int v7 = -1;
  int v8 = 1;
  do
  {
    v8 *= (__int16)*(v6 - 1);
    v220[v5] = v8;
    int v9 = *v6;
    v6 += 2;
    ++v5;
    v7 += 2;
  }
  while (v9 != 1);
  int v201 = *((__int16 *)result + v7 + 4);
  uint64_t v197 = (int *)(a3 + 4);
  uint64_t v10 = v5 - 2;
  v199 = result;
  do
  {
    int v11 = v201;
    uint64_t v200 = v10;
    if (v10)
    {
      unsigned int v12 = v10;
      int v201 = SHIWORD(result[(int)v10 + 1]);
      int v13 = v10;
    }
    else
    {
      unsigned int v12 = 0;
      int v13 = 0;
      int v201 = 1;
    }
    int v207 = v11;
    switch(LOWORD(result[v12 + 2]))
    {
      case 2:
        uint64_t v14 = v220[v13];
        if ((int)v14 >= 1)
        {
          uint64_t v15 = 0;
          uint64_t v16 = *((void *)v199 + 6) + 2;
          uint64_t v17 = 2 * v11;
          uint64_t v18 = v197;
          do
          {
            if (v11 >= 1)
            {
              uint64_t v19 = (__int16 *)v16;
              int v20 = v18;
              int v21 = v11;
              do
              {
                long long v22 = &v20[v17];
                int v23 = *(v19 - 1);
                int v24 = v20[v17 - 1] >> 16;
                int v25 = (unsigned __int16)v20[v17 - 1];
                int v26 = *v19;
                int v27 = v20[2 * v11] >> 16;
                int v28 = (unsigned __int16)v20[2 * v11];
                int v29 = ((v28 * v26) >> 15) + ((v25 * v23) >> 15) + 2 * (v24 * v23 + v27 * v26);
                int v30 = ((v28 * v23) >> 15) - ((v25 * v26) >> 15) + 2 * (v27 * v23 - v24 * v26);
                int v31 = *(v20 - 1);
                *(v22 - 1) = v31 - v29;
                int v32 = *v20;
                int *v22 = *v20 - v30;
                *(v20 - 1) = v29 + v31;
                int *v20 = v30 + v32;
                v20 += 2;
                v19 += 2 * (v14 << v198);
                --v21;
              }
              while (v21);
            }
            ++v15;
            v18 += 2 * v201;
          }
          while (v15 != v14);
        }
        break;
      case 3:
        uint64_t v33 = v220[v13];
        if ((int)v33 >= 1)
        {
          uint64_t v34 = 0;
          uint64_t v35 = (int)(v33 << v198);
          uint64_t v36 = *((void *)v199 + 6);
          int v37 = (__int16)-*(_WORD *)(v36 + 4 * (int)v35 * (uint64_t)v11 + 2);
          int v38 = (-65536 * *(unsigned __int16 *)(v36 + 4 * (int)v35 * (uint64_t)v11 + 2)) >> 15;
          uint64_t v39 = 2 * v11;
          uint64_t v40 = (__int16 *)(v36 + 2);
          uint64_t v41 = 8 * v35;
          uint64_t v42 = 4 * v11;
          uint64_t v43 = 4 * v35;
          uint64_t v44 = v197;
          do
          {
            uint64_t v45 = v40;
            uint64_t v46 = v40;
            unint64_t v47 = v44;
            int v48 = v11;
            do
            {
              int v49 = *(v45 - 1);
              uint64_t v50 = &v47[v39];
              int v51 = v47[v39 - 1] >> 16;
              int v52 = (unsigned __int16)v47[v39 - 1];
              int v53 = *v45;
              int v54 = v47[2 * v11] >> 16;
              int v55 = (unsigned __int16)v47[2 * v11];
              int v56 = ((v55 * v53) >> 15) + ((v52 * v49) >> 15) + 2 * (v51 * v49 + v54 * v53);
              int v57 = ((v55 * v49) >> 15) - ((v52 * v53) >> 15) + 2 * (v54 * v49 - v51 * v53);
              int v58 = *(v46 - 1);
              int v59 = &v47[v42];
              int v60 = v47[v42 - 1] >> 16;
              int v61 = (unsigned __int16)v47[v42 - 1];
              int v62 = *v46;
              int v63 = v47[4 * v11] >> 16;
              int v64 = (unsigned __int16)v47[4 * v11];
              int v65 = ((v64 * v62) >> 15) + ((v61 * v58) >> 15) + 2 * (v60 * v58 + v63 * v62);
              int v66 = ((v64 * v58) >> 15) - ((v61 * v62) >> 15) + 2 * (v63 * v58 - v60 * v62);
              int v67 = v66 + v57;
              int v68 = v57 - v66;
              *(v50 - 1) = *(v47 - 1) - ((v65 + v56) >> 1);
              *uint64_t v50 = *v47 - (v67 >> 1);
              int v69 = ((v56 - v65) >> 16) * v38 + (((unsigned __int16)(v56 - v65) * v37) >> 15);
              int v70 = (v68 >> 16) * v38 + (((unsigned __int16)v68 * v37) >> 15);
              *(v47 - 1) += v65 + v56;
              *v47 += v67;
              v47 += 2;
              *(v59 - 1) = v70 + *(v50 - 1);
              *int v59 = *v50 - v69;
              int v71 = *v50 + v69;
              *(v50 - 1) -= v70;
              *uint64_t v50 = v71;
              uint64_t v46 = (__int16 *)((char *)v46 + v41);
              uint64_t v45 = (__int16 *)((char *)v45 + v43);
              --v48;
            }
            while (v48);
            ++v34;
            v44 += 2 * v201;
          }
          while (v34 != v33);
        }
        break;
      case 4:
        uint64_t v72 = v220[v13];
        if ((int)v72 >= 1)
        {
          uint64_t v73 = 0;
          uint64_t v74 = (int)(v72 << v198);
          uint64_t v75 = *((void *)v199 + 6) + 2;
          uint64_t v76 = 12 * v74;
          uint64_t v77 = 8 * v74;
          uint64_t v78 = 6 * v11;
          uint64_t v79 = 4 * v74;
          uint64_t v80 = 4 * v11;
          uint64_t v81 = 2 * v11;
          do
          {
            if (v11 >= 1)
            {
              int64_t v82 = (_DWORD *)(a3 + 8 * v73 * v201);
              uint64_t v83 = (__int16 *)v75;
              int v84 = (__int16 *)v75;
              uint64_t v85 = (__int16 *)v75;
              int v86 = v207;
              do
              {
                int v87 = *(v83 - 1);
                uint64_t v88 = &v82[v81];
                int v89 = (int)v82[v81] >> 16;
                int v90 = (unsigned __int16)v82[v81];
                int v91 = *v83;
                int v92 = (int)v82[v81 + 1] >> 16;
                int v93 = (unsigned __int16)v82[v81 + 1];
                int v94 = ((v93 * v91) >> 15) + ((v90 * v87) >> 15) + 2 * (v89 * v87 + v92 * v91);
                int v95 = ((v93 * v87) >> 15) - ((v90 * v91) >> 15) + 2 * (v92 * v87 - v89 * v91);
                int v96 = *(v84 - 1);
                int32x2_t v97 = &v82[v80];
                int v98 = (int)v82[v80] >> 16;
                int v99 = (unsigned __int16)v82[v80];
                int v100 = *v84;
                int v101 = (int)v82[v80 + 1] >> 16;
                int v102 = (unsigned __int16)v82[v80 + 1];
                int v103 = ((v102 * v100) >> 15) + ((v99 * v96) >> 15) + 2 * (v98 * v96 + v101 * v100);
                int v104 = ((v102 * v96) >> 15) - ((v99 * v100) >> 15) + 2 * (v101 * v96 - v98 * v100);
                int v105 = *(v85 - 1);
                int32x2_t v106 = &v82[v78];
                int v107 = (int)v82[v78] >> 16;
                int v108 = (unsigned __int16)v82[v78];
                int v109 = *v85;
                int v110 = (int)v82[v78 + 1] >> 16;
                int v111 = (unsigned __int16)v82[v78 + 1];
                int v112 = ((v111 * v109) >> 15) + ((v108 * v105) >> 15) + 2 * (v107 * v105 + v110 * v109);
                int v113 = ((v111 * v105) >> 15) - ((v108 * v109) >> 15) + 2 * (v110 * v105 - v107 * v109);
                int v114 = v82[1];
                int v115 = *v82 - v103;
                int v116 = v114 - v104;
                int v117 = *v82 + v103;
                int v118 = v114 + v104;
                int v119 = v112 + v94;
                int v120 = v94 - v112;
                *int32x2_t v97 = v117 - v119;
                v97[1] = v118 - (v113 + v95);
                *int64_t v82 = v119 + v117;
                v82[1] = v113 + v95 + v118;
                v82 += 2;
                *uint64_t v88 = v115 - (v95 - v113);
                v88[1] = v120 + v116;
                _DWORD *v106 = v95 - v113 + v115;
                v106[1] = v116 - v120;
                uint64_t v85 = (__int16 *)((char *)v85 + v76);
                int v84 = (__int16 *)((char *)v84 + v77);
                uint64_t v83 = (__int16 *)((char *)v83 + v79);
                --v86;
              }
              while (v86);
            }
            ++v73;
            int v11 = v207;
          }
          while (v73 != v72);
        }
        break;
      case 5:
        uint64_t v205 = v220[v13];
        if ((int)v205 >= 1)
        {
          uint64_t v121 = 0;
          uint64_t v122 = (int)(v205 << v198);
          uint64_t v123 = *((void *)v199 + 6);
          uint64_t v124 = (int)v122 * (uint64_t)v11;
          uint64_t v125 = (__int16 *)(v123 + 8 * v124);
          int v126 = v125[1];
          int v127 = *v125;
          int v128 = (__int16 *)(v123 + 4 * v124);
          int v129 = v128[1];
          uint64_t v208 = 8 * v11;
          uint64_t v130 = a3 + 32 * v11;
          uint64_t v204 = 8 * v201;
          int v202 = (__int16 *)(v123 + 2);
          uint64_t v131 = a3 + 24 * v11;
          int v132 = *v128;
          uint64_t v133 = a3 + 16 * v11;
          uint64_t v134 = a3;
          uint64_t v135 = a3 + 8 * v11;
          do
          {
            uint64_t v206 = v121;
            if (v11 >= 1)
            {
              uint64_t v136 = 0;
              uint64_t v137 = v202;
              v138 = v202;
              v139 = v202;
              v140 = v202;
              uint64_t v211 = v131;
              uint64_t v212 = v130;
              uint64_t v218 = v134;
              uint64_t v209 = v133;
              uint64_t v210 = v135;
              do
              {
                v217 = v139;
                v219 = v138;
                v141 = (_DWORD *)(v135 + v136);
                int v142 = *(v138 - 1);
                int v143 = *(_DWORD *)(v135 + v136);
                int v144 = *(_DWORD *)(v135 + v136 + 4);
                int v145 = v143 >> 16;
                int v146 = (v143 >> 16) * v142;
                uint32x2_t v147 = (int *)(v130 + v136);
                uint32x2_t v148 = (int *)(v131 + v136);
                int v149 = (int *)(v133 + v136);
                int v150 = (unsigned __int16)v143;
                int v151 = (unsigned __int16)v143 * v142;
                int v152 = (_DWORD *)(v218 + v136);
                int v153 = *(_DWORD *)(v218 + v136);
                int v154 = *(_DWORD *)(v218 + v136 + 4);
                int v155 = *v219;
                int v156 = (unsigned __int16)v144;
                int v157 = v144 >> 16;
                int v158 = (((unsigned __int16)v144 * v155) >> 15) + (v151 >> 15) + 2 * (v146 + (v144 >> 16) * v155);
                int v159 = ((v156 * v142) >> 15) - ((v150 * v155) >> 15) + 2 * (v157 * v142 - v145 * v155);
                int v160 = *(v139 - 1);
                int v216 = v149;
                int v161 = *v149 >> 16;
                int v162 = (unsigned __int16)*v149;
                int v163 = *v139;
                int v164 = v149[1] >> 16;
                int v165 = (unsigned __int16)v149[1];
                int v166 = ((v165 * v163) >> 15) + ((v162 * v160) >> 15) + 2 * (v161 * v160 + v164 * v163);
                int v167 = ((v165 * v160) >> 15) - ((v162 * v163) >> 15) + 2 * (v164 * v160 - v161 * v163);
                int v168 = *(v140 - 1);
                int v215 = v148;
                int v169 = *v148 >> 16;
                int v170 = (unsigned __int16)*v148;
                int v171 = *v140;
                int v172 = v148[1] >> 16;
                int v173 = (unsigned __int16)v148[1];
                int v174 = ((v173 * v171) >> 15) + ((v170 * v168) >> 15) + 2 * (v169 * v168 + v172 * v171);
                int v175 = ((v173 * v168) >> 15) - ((v170 * v171) >> 15) + 2 * (v172 * v168 - v169 * v171);
                int v176 = *(v137 - 1);
                uint64_t v214 = v137;
                int v177 = *v147 >> 16;
                int v178 = (unsigned __int16)*v147;
                int v179 = *v137;
                int v180 = v147[1] >> 16;
                int v181 = (unsigned __int16)v147[1];
                int v182 = ((v181 * v179) >> 15) + ((v178 * v176) >> 15) + 2 * (v177 * v176 + v180 * v179);
                int v183 = ((v181 * v176) >> 15) - ((v178 * v179) >> 15) + 2 * (v180 * v176 - v177 * v179);
                int v184 = v182 + v158;
                int v185 = v183 + v159;
                int v186 = v158 - v182;
                int v187 = v159 - v183;
                int v188 = v174 + v166;
                int v189 = v175 + v167;
                int v190 = v166 - v174;
                int v191 = v167 - v175;
                *int v152 = v188 + v153 + v184;
                v152[1] = v189 + v154 + v185;
                LODWORD(v152) = v184 >> 16;
                int v213 = (unsigned __int16)v184;
                int v192 = v153
                     + (((unsigned __int16)v188 * v127) >> 15)
                     + (((unsigned __int16)v184 * v132) >> 15)
                     + 2 * ((v188 >> 16) * v127 + (v184 >> 16) * v132);
                int v193 = v154
                     + (((unsigned __int16)v189 * v127) >> 15)
                     + (((unsigned __int16)v185 * v132) >> 15)
                     + 2 * ((v189 >> 16) * v127 + (v185 >> 16) * v132);
                LODWORD(v148) = (((unsigned __int16)v187 * v129) >> 15)
                              + (((unsigned __int16)v191 * v126) >> 15)
                              + 2 * ((v191 >> 16) * v126 + (v187 >> 16) * v129);
                int v194 = (((unsigned __int16)v186 * v129) >> 15)
                     + (((unsigned __int16)v190 * v126) >> 15)
                     + 2 * ((v190 >> 16) * v126 + (v186 >> 16) * v129);
                _DWORD *v141 = v192 + v148;
                v141[1] = v193 - v194;
                LODWORD(v148) = v192 - v148;
                uint64_t v133 = v209;
                *uint32x2_t v147 = (int)v148;
                v147[1] = v193 + v194;
                LODWORD(v148) = (v188 >> 16) * v132 + v152 * v127;
                uint64_t v134 = v218;
                LODWORD(v148) = v153
                              + (((unsigned __int16)v188 * v132) >> 15)
                              + ((v213 * v127) >> 15)
                              + 2 * v148;
                uint64_t v130 = v212;
                LODWORD(v149) = v154
                              + (((unsigned __int16)v189 * v132) >> 15)
                              + (((unsigned __int16)v185 * v127) >> 15)
                              + 2 * ((v189 >> 16) * v132 + (v185 >> 16) * v127);
                int v195 = (((unsigned __int16)v187 * v126) >> 15)
                     - (((unsigned __int16)v191 * v129) >> 15)
                     + 2 * ((v187 >> 16) * v126 - (v191 >> 16) * v129);
                int v196 = 2 * v129 * (v190 >> 16)
                     + (((unsigned __int16)v190 * v129) >> 15)
                     + -2 * v126 * (v186 >> 16)
                     - (((unsigned __int16)v186 * v126) >> 15);
                *int v216 = v148 + v195;
                v216[1] = v149 + v196;
                *int v215 = v148 - v195;
                v215[1] = v149 - v196;
                uint64_t v135 = v210;
                uint64_t v131 = v211;
                v136 += 8;
                uint64_t v137 = &v214[8 * v122];
                v140 += 6 * v122;
                v139 = &v217[4 * v122];
                v138 = &v219[2 * v122];
              }
              while (v208 != v136);
            }
            int v11 = v207;
            uint64_t v121 = v206 + 1;
            v130 += v204;
            v131 += v204;
            v133 += v204;
            v135 += v204;
            v134 += v204;
          }
          while (v206 + 1 != v205);
        }
        break;
      default:
        break;
    }
    BOOL result = v199;
    uint64_t v10 = v200 - 1;
  }
  while (v200 > 0);
  return result;
}

uint64_t compute_allocation(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int *a7, int *a8, int a9, unsigned int *a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t *a16, int a17, int a18, unsigned int a19)
{
  int v196 = a8;
  uint64_t v206 = a7;
  uint64_t v203 = a5;
  int v21 = a2;
  uint64_t v213 = a1;
  uint64_t v217 = *MEMORY[0x263EF8340];
  unsigned int v22 = a9 & ~(a9 >> 31);
  int v215 = (char *)*(int *)(a1 + 8);
  int v210 = v22 > 7;
  int v23 = v22 - 8 * v210;
  uint64_t v205 = a4;
  if (a14 == 2)
  {
    int v24 = LOG2_FRAC_TABLE[(int)a3 - (int)a2];
    int v25 = 8 * (v23 - v24 > 7);
    int v26 = v23 - v24 - v25;
    BOOL v27 = v23 < v24;
    if (v23 < v24) {
      int v24 = 0;
    }
    int v197 = v24;
    if (v27) {
      int v28 = 0;
    }
    else {
      int v28 = v25;
    }
    int v195 = v28;
    if (!v27) {
      int v23 = v26;
    }
  }
  else
  {
    int v197 = 0;
    int v195 = 0;
  }
  uint64_t v211 = a16;
  uint64_t v199 = a13;
  uint64_t v200 = a12;
  uint64_t v214 = a11;
  int v198 = a10;
  size_t v29 = 4 * (void)v215;
  unint64_t v30 = (4 * (void)v215 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v216 = &v192[-v30];
  bzero(&v192[-v30], 4 * (void)v215);
  uint64_t v208 = (uint64_t)&v192[-v30];
  bzero(&v192[-v30], v29);
  int v31 = &v192[-v30];
  bzero(&v192[-v30], v29);
  int v207 = &v192[-v30];
  bzero(&v192[-v30], v29);
  int v32 = 8 * a14;
  uint64_t v212 = &v192[-v30];
  if ((int)v21 >= (int)a3)
  {
    uint64_t v36 = (int)a3;
    uint64_t v35 = (int)v21;
    uint64_t v47 = v203;
    uint64_t v33 = v213;
    int v55 = v216;
    uint64_t v48 = v205;
    uint64_t v42 = v207;
  }
  else
  {
    uint64_t v33 = v213;
    int v34 = a6 - a15 - 5;
    uint64_t v35 = (int)v21;
    uint64_t v36 = (int)a3;
    int v37 = (__int16 *)(*(void *)(v213 + 24) + 2 * (int)v21);
    __int16 v40 = *v37;
    int v38 = v37 + 1;
    __int16 v39 = v40;
    uint64_t v41 = (int *)&v31[4 * (int)v21];
    uint64_t v42 = v207;
    uint64_t v43 = &v207[4 * (int)v21];
    int v44 = a14 * v34;
    int v45 = v44 * (~v21 + a3);
    uint64_t v46 = (int)a3 - (uint64_t)(int)v21;
    uint64_t v47 = v203;
    uint64_t v48 = v205;
    do
    {
      int v49 = *v38++;
      int v50 = v49 - v39;
      __int16 v51 = v49;
      int v52 = (8 * ((3 * v50) << a15)) >> 4;
      if (v32 > v52) {
        int v52 = 8 * a14;
      }
      *v41++ = v52;
      int v53 = (v45 * v50) << (a15 + 3) >> 6;
      if (v50 << a15 == 1) {
        int v54 = 8 * a14;
      }
      else {
        int v54 = 0;
      }
      *v43++ = v53 - v54;
      v45 -= v44;
      __int16 v39 = v51;
      --v46;
    }
    while (v46);
    int v55 = v216;
  }
  uint64_t v204 = a19;
  int v193 = 8 * v210;
  int v56 = *(_DWORD *)(v33 + 44);
  int v57 = v56 - 1;
  int v58 = v42 - 4;
  LODWORD(v207) = a18;
  int v210 = a17;
  int v59 = v212 - 4;
  uint64_t v60 = v47 - 4;
  int v61 = 1;
  uint64_t v202 = v36;
  int v216 = v21;
  do
  {
    while (1)
    {
      int v62 = (v57 + v61) >> 1;
      if ((int)v21 < (int)a3) {
        break;
      }
      if (v23 < 0) {
        int v57 = v62 - 1;
      }
      else {
        int v61 = v62 + 1;
      }
      if (v61 > v57)
      {
        int v87 = (int)v21;
        goto LABEL_57;
      }
    }
    int v63 = v42;
    int v64 = 0;
    int v65 = 0;
    uint64_t v66 = *(void *)(v33 + 24);
    LOWORD(v67) = *(_WORD *)(v66 + 2 * v36);
    uint64_t v68 = v66 - 2;
    uint64_t v69 = v36;
    do
    {
      int v70 = (__int16)v67;
      int v67 = *(__int16 *)(v68 + 2 * v69);
      int v71 = ((v70 - v67) * a14 * *(unsigned __int8 *)(*(void *)(v33 + 48) + (int)v215 * (uint64_t)v62 - 1 + v69)) << a15;
      int v72 = v71 >> 2;
      if (v71 >= 4) {
        int v72 = (*(_DWORD *)&v58[4 * v69] + v72) & ~((*(_DWORD *)&v58[4 * v69] + v72) >> 31);
      }
      int v73 = *(_DWORD *)(v48 - 4 + 4 * v69) + v72;
      if (v65 || v73 >= *(_DWORD *)&v59[4 * v69])
      {
        if (v73 >= *(_DWORD *)(v60 + 4 * v69)) {
          int v73 = *(_DWORD *)(v60 + 4 * v69);
        }
        int v65 = 1;
      }
      else
      {
        int v65 = 0;
        if (v73 >= v32) {
          int v73 = 8 * a14;
        }
        else {
          int v73 = 0;
        }
      }
      --v69;
      v64 += v73;
    }
    while (v69 > v35);
    if (v64 > v23) {
      int v57 = v62 - 1;
    }
    else {
      int v61 = v62 + 1;
    }
    uint64_t v42 = v63;
  }
  while (v61 <= v57);
  uint64_t v74 = 0;
  uint64_t v75 = (__int16 *)(*(void *)(v33 + 24) + 2 * v35);
  __int16 v78 = *v75;
  uint64_t v77 = v75 + 1;
  __int16 v76 = v78;
  uint64_t v79 = *(void *)(v33 + 48) + v35;
  uint64_t v80 = v79 + (int)v215 * (uint64_t)v61;
  uint64_t v81 = v47 + 4 * v35;
  uint64_t v82 = v79 + (v61 - 1) * (void)v215;
  uint64_t v83 = &v63[4 * v35];
  uint64_t v84 = v48 + 4 * v35;
  uint64_t v85 = (unsigned char *)(v208 + 4 * v35);
  uint64_t v86 = v35 - v36;
  int v87 = (int)v21;
  do
  {
    int v88 = ((__int16)v77[v74] - v76) * a14;
    if (v61 >= v56) {
      int v89 = *(_DWORD *)(v81 + 4 * v74);
    }
    else {
      int v89 = (v88 * *(unsigned __int8 *)(v80 + v74)) << a15 >> 2;
    }
    int v90 = (v88 * *(unsigned __int8 *)(v82 + v74)) << a15;
    int v91 = v90 >> 2;
    if (v90 >= 4) {
      int v91 = (*(_DWORD *)&v83[4 * v74] + v91) & ~((*(_DWORD *)&v83[4 * v74] + v91) >> 31);
    }
    if (v89 >= 1) {
      int v89 = (*(_DWORD *)&v83[4 * v74] + v89) & ~((*(_DWORD *)&v83[4 * v74] + v89) >> 31);
    }
    __int16 v76 = v77[v74];
    int v92 = *(_DWORD *)(v84 + 4 * v74);
    if (v61 <= 1) {
      int v93 = 0;
    }
    else {
      int v93 = *(_DWORD *)(v84 + 4 * v74);
    }
    int v94 = v91 + v93;
    if (v92 > 0) {
      int v87 = v35 + v74;
    }
    *(_DWORD *)&v55[4 * v35 + 4 * v74] = v94;
    *(_DWORD *)&v85[4 * v74++] = (v89 - v94 + v92) & ~((v89 - v94 + v92) >> 31);
    LODWORD(v21) = v216;
  }
  while (v86 + v74);
LABEL_57:
  int v95 = 0;
  int v96 = 0;
  BOOL v194 = a14 > 1;
  int32x2_t v97 = (unsigned char *)(v208 - 4);
  int v98 = v55 - 4;
  int v99 = 64;
  uint64_t v100 = v214;
  do
  {
    while ((int)v21 >= (int)a3)
    {
      if (v23 < 0) {
        int v99 = (v96 + v99) >> 1;
      }
      else {
        int v96 = (v96 + v99) >> 1;
      }
      if (++v95 == 6)
      {
        int v106 = 0;
        goto LABEL_87;
      }
    }
    int v101 = 0;
    int v102 = 0;
    uint64_t v103 = v202;
    do
    {
      int v104 = *(_DWORD *)&v98[4 * v103] + ((*(_DWORD *)&v97[4 * v103] * ((v96 + v99) >> 1)) >> 6);
      if (v101 || v104 >= *(_DWORD *)&v59[4 * v103])
      {
        if (v104 >= *(_DWORD *)(v60 + 4 * v103)) {
          int v104 = *(_DWORD *)(v60 + 4 * v103);
        }
        int v101 = 1;
      }
      else
      {
        int v101 = 0;
        if (v104 >= v32) {
          int v104 = 8 * a14;
        }
        else {
          int v104 = 0;
        }
      }
      --v103;
      v102 += v104;
    }
    while (v103 > v35);
    if (v102 > v23) {
      int v99 = (v96 + v99) >> 1;
    }
    else {
      int v96 = (v96 + v99) >> 1;
    }
    ++v95;
  }
  while (v95 != 6);
  char v105 = 0;
  int v106 = 0;
  uint64_t v107 = v202;
  do
  {
    int v108 = *(_DWORD *)&v98[4 * v107] + ((*(_DWORD *)&v97[4 * v107] * v96) >> 6);
    v105 |= v108 >= *(_DWORD *)&v59[4 * v107];
    if (v108 >= v32) {
      int v109 = 8 * a14;
    }
    else {
      int v109 = 0;
    }
    if ((v105 & 1) == 0) {
      int v108 = v109;
    }
    if (v108 >= *(_DWORD *)(v60 + 4 * v107)) {
      int v108 = *(_DWORD *)(v60 + 4 * v107);
    }
    *(_DWORD *)(v100 - 4 + 4 * v107) = v108;
    v106 += v108;
    --v107;
  }
  while (v107 > v35);
LABEL_87:
  uint64_t v201 = a3;
  if ((int)a3 - 1 <= v87)
  {
    int v127 = v197;
    uint64_t v110 = a3;
LABEL_111:
    int v129 = v23 + v193;
LABEL_112:
    uint64_t v130 = v196;
    if (v127 > 0)
    {
      if (!v210) {
        goto LABEL_119;
      }
      uint64_t v131 = v206;
      int v132 = *v206;
      if (*v206 >= (int)v110) {
        int v132 = v110;
      }
      *uint64_t v206 = v132;
      int v133 = (int)v216;
      ec_enc_uint(v211, v132 - v216, v110 - v216 + 1);
      uint64_t v33 = v213;
      uint64_t v100 = v214;
      int v134 = *v131;
LABEL_127:
      if (v134 <= v133) {
        int v137 = v195;
      }
      else {
        int v137 = 0;
      }
      if (v195 && v134 > v133)
      {
        char v138 = v194;
        if (!v210) {
          goto LABEL_134;
        }
        ec_enc_bit_logp(v211, *v130, 1);
        uint64_t v33 = v213;
        uint64_t v100 = v214;
        goto LABEL_138;
      }
LABEL_136:
      char v138 = v194;
      goto LABEL_137;
    }
LABEL_126:
    int v134 = 0;
    *uint64_t v206 = 0;
    int v133 = (int)v216;
    goto LABEL_127;
  }
  LODWORD(v205) = v21 + 2;
  uint64_t v110 = a3;
  uint64_t v111 = (int)a3 - 1;
  uint64_t v204 = (int)v204;
  uint64_t v112 = v87;
  int v215 = (char *)&LOG2_FRAC_TABLE[-v35];
  int v113 = v197;
  int v114 = v212;
  uint64_t v208 = v87;
  int v209 = v23;
  while (1)
  {
    uint64_t v115 = *(void *)(v33 + 24);
    int v116 = *(__int16 *)(v115 + 2 * (int)v110);
    int v117 = *(__int16 *)(v115 + 2 * v35);
    int v118 = (v23 - v106) / (v116 - v117);
    LODWORD(v115) = *(__int16 *)(v115 + 2 * v111);
    int v119 = v23 - v106 + v117 - (v115 + (v116 - v117) * v118);
    int v120 = v119 & ~(v119 >> 31);
    int v121 = v116 - v115;
    int v122 = *(_DWORD *)(v100 + 4 * v111);
    int v123 = v122 + v121 * v118 + v120;
    int v124 = *(_DWORD *)&v114[4 * v111];
    if (v124 <= v32 + 8) {
      int v124 = v32 + 8;
    }
    if (v123 < v124) {
      goto LABEL_102;
    }
    if (v210)
    {
      int v125 = v113;
      if ((int)v110 <= (int)v205
        || ((int)v110 <= (int)v207 ? (int v126 = 7) : (int v126 = 9), v111 <= v204 && v123 > (8 * ((v121 * v126) << a15)) >> 4))
      {
        ec_enc_bit_logp(v211, 1, 1);
        uint64_t v33 = v213;
        uint64_t v100 = v214;
        int v127 = v125;
        int v129 = v209;
        goto LABEL_112;
      }
      ec_enc_bit_logp(v211, 0, 1);
      goto LABEL_101;
    }
    int v125 = v113;
    if (ec_dec_bit_logp((uint64_t)v211, 1)) {
      break;
    }
LABEL_101:
    v106 += 8;
    v123 -= 8;
    uint64_t v33 = v213;
    uint64_t v100 = v214;
    int v122 = *(_DWORD *)(v214 + 4 * v111);
    int v113 = v125;
    int v23 = v209;
    int v114 = v212;
    uint64_t v112 = v208;
LABEL_102:
    if (v113) {
      int v127 = v215[v111];
    }
    else {
      int v127 = 0;
    }
    if (v123 >= v32) {
      int v128 = 8 * a14;
    }
    else {
      int v128 = 0;
    }
    int v106 = v106 - v122 - v113 + v127 + v128;
    *(_DWORD *)(v100 + 4 * v111--) = v128;
    uint64_t v110 = (v110 - 1);
    int v113 = v127;
    if (v111 <= v112) {
      goto LABEL_111;
    }
  }
  BOOL v27 = v125 <= 0;
  uint64_t v130 = v196;
  uint64_t v33 = v213;
  uint64_t v100 = v214;
  int v129 = v209;
  if (v27) {
    goto LABEL_126;
  }
LABEL_119:
  int v135 = (int)v216;
  int v136 = ec_dec_uint((uint64_t)v211, (int)v110 - (int)v216 + 1);
  *uint64_t v206 = v136 + v135;
  if (v136 + v135 <= v135) {
    int v137 = v195;
  }
  else {
    int v137 = 0;
  }
  if (!v195)
  {
    uint64_t v33 = v213;
    uint64_t v100 = v214;
    goto LABEL_136;
  }
  BOOL v27 = v136 + v135 <= v135;
  uint64_t v33 = v213;
  uint64_t v100 = v214;
  char v138 = v194;
  if (!v27)
  {
LABEL_134:
    BOOL v139 = ec_dec_bit_logp((uint64_t)v211, 1);
    uint64_t v33 = v213;
    uint64_t v100 = v214;
    *uint64_t v130 = v139;
    goto LABEL_138;
  }
LABEL_137:
  *uint64_t v130 = 0;
LABEL_138:
  if ((int)v110 > (int)v216)
  {
    int v140 = v129 - v106 + v137;
    uint64_t v141 = *(void *)(v33 + 24);
    __int16 v142 = *(_WORD *)(v141 + 2 * v35);
    int v143 = *(__int16 *)(v141 + 2 * (int)v110) - v142;
    int v144 = v140 / v143;
    int v145 = v140 % v143;
    int v146 = (_DWORD *)(v100 + 4 * v35);
    uint64_t v147 = (int)v110 - v35;
    uint32x2_t v148 = (__int16 *)(v141 + 2 * v35 + 2);
    uint64_t v149 = v147;
    __int16 v150 = v142;
    do
    {
      int v151 = *v148++;
      *v146++ += (v151 - v150) * v144;
      __int16 v150 = v151;
      --v149;
    }
    while (v149);
    int v152 = (_DWORD *)(v100 + 4 * v35);
    int v153 = (__int16 *)(v141 + 2 * v35 + 2);
    __int16 v154 = v142;
    uint64_t v155 = v203;
    uint64_t v157 = v199;
    uint64_t v156 = v200;
    do
    {
      int v158 = *v153++;
      int v159 = v158 - v154;
      __int16 v160 = v158;
      if (v145 < v159) {
        int v159 = v145;
      }
      *v152++ += v159;
      v145 -= v159;
      __int16 v154 = v160;
      --v147;
    }
    while (v147);
    unsigned int v161 = 0;
    if (a14 <= 1) {
      char v162 = 3;
    }
    else {
      char v162 = 4;
    }
    uint64_t v163 = v141 + 2;
    while (1)
    {
      int v164 = *(__int16 *)(v163 + 2 * v35);
      int v165 = (v164 - v142) << a15;
      int v166 = *(_DWORD *)(v100 + 4 * v35) + v161;
      if (v165 < 2)
      {
        unsigned int v170 = (v166 - v32) & ~((v166 - v32) >> 31);
        if (v166 >= v32) {
          int v166 = 8 * a14;
        }
        *(_DWORD *)(v100 + 4 * v35) = v166;
        *(_DWORD *)(v156 + 4 * v35) = 0;
        *(_DWORD *)(v157 + 4 * v35) = 1;
        if (v170)
        {
LABEL_159:
          unsigned int v171 = v170 >> v162;
          int v172 = *(_DWORD *)(v156 + 4 * v35);
          if ((int)(v170 >> v162) >= 8 - v172) {
            unsigned int v171 = 8 - v172;
          }
          *(_DWORD *)(v156 + 4 * v35) = v171 + v172;
          int v173 = v171 * v32;
          *(_DWORD *)(v157 + 4 * v35) = v173 >= (int)(v170 - v161);
          unsigned int v161 = v170 - v173;
          goto LABEL_176;
        }
      }
      else
      {
        BOOL v167 = 0;
        int v168 = *(_DWORD *)(v155 + 4 * v35);
        int v169 = v166 - v168;
        if (v166 >= v168) {
          int v166 = *(_DWORD *)(v155 + 4 * v35);
        }
        *(_DWORD *)(v100 + 4 * v35) = v166;
        if (a14 == 2 && v165 != 2)
        {
          if (*v130) {
            BOOL v167 = 0;
          }
          else {
            BOOL v167 = v35 < *v206;
          }
        }
        int v174 = v165 * a14 + v167;
        int v175 = (8 * a15 + *(__int16 *)(*(void *)(v33 + 56) + 2 * v35)) * v174;
        int v176 = 8 * v174;
        if (v165 == 2) {
          int v177 = (8 * v174) >> 2;
        }
        else {
          int v177 = 0;
        }
        int v178 = v177 - 21 * v174 + (v175 >> 1);
        int v179 = v178 + v166;
        int v180 = v178 + (v175 >> 3);
        if (v178 + v166 >= 24 * v174) {
          int v180 = v178;
        }
        int v181 = v178 + (v175 >> 2);
        if (v179 >= 16 * v174) {
          int v181 = v180;
        }
        int v182 = ((v166 + 4 * v174 + v181) / v176) & ~(((v166 + 4 * v174 + v181) / v176) >> 31);
        *(_DWORD *)(v156 + 4 * v35) = v182;
        uint64_t v100 = v214;
        int v183 = *(_DWORD *)(v214 + 4 * v35);
        if (v182 * a14 > v183 >> 3) {
          int v182 = v183 >> v138 >> 3;
        }
        if (v182 >= 8) {
          int v182 = 8;
        }
        *(_DWORD *)(v156 + 4 * v35) = v182;
        *(_DWORD *)(v157 + 4 * v35) = v182 * v176 >= *(_DWORD *)(v100 + 4 * v35) + v181;
        unsigned int v170 = v169 & ~(v169 >> 31);
        *(_DWORD *)(v100 + 4 * v35) -= *(_DWORD *)(v156 + 4 * v35) * v32;
        if (v170) {
          goto LABEL_159;
        }
      }
      unsigned int v161 = 0;
LABEL_176:
      ++v35;
      __int16 v142 = v164;
      if ((int)v110 == v35)
      {
        int v184 = v110;
        goto LABEL_179;
      }
    }
  }
  unsigned int v161 = 0;
  uint64_t v157 = v199;
  uint64_t v156 = v200;
  int v184 = (int)v216;
LABEL_179:
  int v185 = v201;
  *int v198 = v161;
  if (v184 < v185)
  {
    uint64_t v186 = v202 - v184;
    int v187 = (_DWORD *)(v157 + 4 * v184);
    int v188 = (int *)(v156 + 4 * v184);
    int v189 = (int *)(v100 + 4 * v184);
    do
    {
      *int v188 = *v189 >> v138 >> 3;
      *v189++ = 0;
      int v190 = *v188++;
      *v187++ = v190 < 1;
      --v186;
    }
    while (v186);
  }
  return v110;
}

int *clt_mdct_forward(int *a1, uint64_t a2, _DWORD *a3, __int16 *a4, uint64_t a5, int a6, int a7)
{
  int v88 = a7;
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v12 = (*a1 >> a6);
  int v13 = (int)v12 >> 1;
  int v14 = (int)v12 >> 2;
  int v93 = a1;
  uint64_t v94 = v12;
  uint64_t v15 = (uint64_t)(int)v12 >> 1;
  size_t v16 = 4 * ((int)v12 >> 1);
  uint64_t v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v91 = v16;
  bzero(v17, v16);
  uint64_t v18 = (int *)(a2 + 4 * ((int)a5 >> 1));
  uint64_t v87 = a5;
  int v90 = ((int)a5 + 3) >> 2;
  if ((int)a5 < 1)
  {
    int v24 = 0;
    int v32 = &v18[v13 - 1];
    int v31 = (int *)v17;
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = (uint64_t)(int)a5 >> 1;
    int v23 = &a4[v22];
    if (((int)a5 + 3) >> 2 <= 1) {
      int v24 = 1;
    }
    else {
      int v24 = ((int)a5 + 3) >> 2;
    }
    do
    {
      int v26 = (int *)&v17[v19];
      int v27 = v23[v20 - 1];
      int v28 = v23[v21];
      uint64_t v25 = a2 + 4 * v15 + 4 * v22;
      int v29 = (((unsigned __int16)*(_DWORD *)(v25 + 4 * v20 - 4) * v28) >> 15)
          + (((unsigned __int16)*(_DWORD *)(v25 + v19) * v27) >> 15)
          + 2 * ((*(int *)(v25 + v19) >> 16) * v27 + (*(int *)(v25 + 4 * v20 - 4) >> 16) * v28);
      int v30 = (((unsigned __int16)v18[v19 / 4] * v28) >> 15)
          - (((unsigned __int16)v18[v20 - 1] * v27) >> 15)
          + 2 * ((v18[v19 / 4] >> 16) * v28 - (v18[v20 - 1] >> 16) * v27);
      *int v26 = v29;
      v26[1] = v30;
      v21 += 2;
      v20 -= 2;
      v19 += 8;
    }
    while (4 * v24 != (v21 * 2));
    int v31 = (int *)&v17[v19];
    int v32 = (int *)(a2 + 4 * v15 + 4 * v22 - v19 - 4);
    uint64_t v18 = (int *)((char *)v18 + v19);
  }
  int v89 = ((int)v94 >> 1) + 25736;
  int v92 = v17;
  bzero(v17, v91);
  int v33 = v14 - v90;
  if (v24 >= v14 - v90)
  {
    int v33 = v24;
  }
  else
  {
    do
    {
      int v35 = *v32;
      v32 -= 2;
      int v34 = v35;
      int v36 = *v18;
      v18 += 2;
      int v37 = v31 + 2;
      *int v31 = v34;
      v31[1] = v36;
      ++v24;
      v31 += 2;
    }
    while (v24 < v33);
    int v31 = v37;
  }
  uint64_t v38 = (uint64_t)v92;
  __int16 v39 = v93;
  int v40 = v89 / (int)v94;
  BOOL v41 = __OFSUB__(v14, v33);
  int v42 = v14 - v33;
  if (!((v42 < 0) ^ v41 | (v42 == 0)))
  {
    uint64_t v43 = &a4[(int)v87 - 1];
    do
    {
      int v45 = *a4;
      a4 += 2;
      int v44 = v45;
      int v46 = (v18[-v15] >> 16) * v45;
      int v48 = *v43;
      v43 -= 2;
      int v47 = v48;
      int v49 = (((unsigned __int16)*v32 * v48) >> 15)
          - (((unsigned __int16)v18[-v15] * v44) >> 15)
          + 2 * ((*v32 >> 16) * v48 - v46);
      int v50 = *v18;
      v18 += 2;
      int v51 = (((unsigned __int16)v32[v15] * v44) >> 15)
          + (((unsigned __int16)v50 * v47) >> 15)
          + 2 * ((v50 >> 16) * v47 + (v32[v15] >> 16) * v44);
      *int v31 = v49;
      v31[1] = v51;
      v31 += 2;
      v32 -= 2;
      --v42;
    }
    while (v42);
  }
  int v52 = v40 << 16;
  int v53 = (__int16)v40;
  int v54 = 2 * (__int16)v40;
  if ((int)v94 >= 4)
  {
    int v55 = 0;
    uint64_t v56 = *((void *)v39 + 5);
    if (v14 <= 1) {
      int v57 = 1;
    }
    else {
      int v57 = v14;
    }
    int v58 = v14;
    int v59 = (int *)v17;
    do
    {
      int v60 = *(__int16 *)(v56 + 2 * (v55 << a6));
      int v61 = *v59 >> 16;
      int v62 = (unsigned __int16)*v59;
      int v63 = *(__int16 *)(v56 + 2 * (v58 << a6));
      int v64 = v59[1] >> 16;
      int v65 = (unsigned __int16)v59[1];
      int v66 = ((v65 * v63) >> 15) + ((v62 * v60) >> 15) + 2 * (v61 * v60 + v64 * v63);
      int v67 = ((v62 * v63) >> 15) + 2 * v61 * v63 - (2 * v60 * v64 + ((v65 * v60) >> 15));
      *int v59 = v54 * (v67 >> 16) - v66 + (((unsigned __int16)v67 * v53) >> 15);
      v59[1] = v67 + -(v52 >> 15) * (-v66 >> 16) - (((unsigned __int16)-(__int16)v66 * v53) >> 15);
      v59 += 2;
      ++v55;
      --v58;
    }
    while (v57 != v55);
  }
  uint64_t v68 = (uint64_t)v17;
  uint64_t v69 = v38;
  BOOL result = opus_fft(*(int **)&v39[2 * a6 + 2], v68, v38);
  if ((int)v94 >= 4)
  {
    int v71 = 0;
    int v72 = &a3[((int)v15 - 1) * v88];
    uint64_t v73 = *((void *)v39 + 5);
    int v74 = 2 * v88;
    if (v14 <= 1) {
      int v75 = 1;
    }
    else {
      int v75 = v14;
    }
    uint64_t v76 = -4 * v74;
    uint64_t v77 = 4 * v74;
    __int16 v78 = (int *)(v69 + 4);
    do
    {
      int v79 = *(__int16 *)(v73 + 2 * (v14 << a6));
      int v80 = *v78 >> 16;
      int v81 = (unsigned __int16)*v78;
      int v82 = *(__int16 *)(v73 + 2 * (v71 << a6));
      int v83 = *(v78 - 1) >> 16;
      int v84 = (unsigned __int16)*(v78 - 1);
      int v85 = ((v84 * v82) >> 15) + ((v81 * v79) >> 15) + 2 * (v80 * v79 + v83 * v82);
      int v86 = ((v84 * v79) >> 15) - ((v81 * v82) >> 15) + 2 * (v83 * v79 - v80 * v82);
      BOOL result = (int *)(v85 >> 16);
      ++v71;
      --v14;
      *a3 = v85 + -(v52 >> 15) * (v86 >> 16) - (((unsigned __int16)v86 * v53) >> 15);
      *int v72 = v86 + v54 * result + (((unsigned __int16)v85 * v53) >> 15);
      int v72 = (_DWORD *)((char *)v72 + v76);
      a3 = (_DWORD *)((char *)a3 + v77);
      v78 += 2;
    }
    while (v75 != v71);
  }
  return result;
}

int *clt_mdct_backward(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v73 = a5;
  uint64_t v74 = *MEMORY[0x263EF8340];
  int v13 = *a1 >> a6;
  int v14 = v13 >> 2;
  uint64_t v72 = (uint64_t)v13 >> 1;
  size_t v15 = 4 * (v13 >> 1);
  size_t v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v16, v15);
  uint64_t v17 = a1;
  int v18 = ((v13 >> 1) + 25736) / v13;
  int v19 = (__int16)v18;
  int v20 = 2 * (__int16)v18;
  if (v13 >= 4)
  {
    int v21 = 0;
    uint64_t v22 = &a2[((int)v72 - 1) * a7];
    int v23 = v18 << 16;
    uint64_t v24 = *((void *)v17 + 5);
    int v25 = -(v23 >> 15);
    int v26 = 2 * a7;
    if (v14 <= 1) {
      int v27 = 1;
    }
    else {
      int v27 = v13 >> 2;
    }
    uint64_t v28 = 4 * v26;
    uint64_t v29 = -4 * v26;
    int v30 = v13 >> 2;
    int v31 = v16;
    do
    {
      int v32 = *(__int16 *)(v24 + 2 * (v21 << a6));
      int v33 = *v22 >> 16;
      int v34 = (unsigned __int16)*v22;
      int v35 = *(__int16 *)(v24 + 2 * (v30 << a6));
      int v36 = *a2 >> 16;
      int v37 = (unsigned __int16)*a2;
      int v38 = 2 * v35 * v36 - (2 * v33 * v32 + ((v34 * v32) >> 15)) + ((v37 * v35) >> 15);
      int v39 = ((v37 * v32) >> 15) + ((v34 * v35) >> 15) + 2 * (v33 * v35 + v36 * v32);
      ++v21;
      --v30;
      *int v31 = v38 + v25 * (-v39 >> 16) - (((unsigned __int16)-(__int16)v39 * v19) >> 15);
      v31[1] = v20 * (v38 >> 16) - v39 + (((unsigned __int16)v38 * v19) >> 15);
      v31 += 2;
      a2 = (int *)((char *)a2 + v28);
      uint64_t v22 = (int *)((char *)v22 + v29);
    }
    while (v27 != v21);
  }
  int v40 = v73;
  BOOL v41 = (int *)(a3 + 4 * ((int)v73 >> 1));
  BOOL result = opus_ifft(*(int **)&v17[2 * a6 + 2], (uint64_t)v16, (uint64_t)v41);
  if (v13 >= 4)
  {
    int v43 = 0;
    uint64_t v44 = *((void *)v17 + 5);
    int v45 = (v14 + 1) >> 1;
    if (v45 <= 1) {
      int v45 = 1;
    }
    int v46 = (int *)(4 * v72 + 4 * ((uint64_t)v40 >> 1) + a3 - 4);
    do
    {
      int v47 = *(__int16 *)(v44 + 2 * (v43 << a6));
      int v48 = *(__int16 *)(v44 + 2 * (v14 << a6));
      int v49 = *v41 >> 16;
      int v50 = (unsigned __int16)*v41;
      int v51 = v41[1] >> 16;
      int v52 = (unsigned __int16)v41[1];
      int v53 = ((v50 * v47) >> 15) - ((v52 * v48) >> 15) + 2 * (v49 * v47 - v51 * v48);
      int v54 = ((v50 * v48) >> 15) + ((v52 * v47) >> 15) + 2 * (v51 * v47 + v49 * v48);
      int v55 = *(v46 - 1);
      int v56 = *v46;
      *BOOL v41 = v20 * (v54 >> 16) - v53 + (((unsigned __int16)v54 * v19) >> 15);
      int v57 = *(__int16 *)(v44 + 2 * (--v14 << a6));
      int v58 = *(__int16 *)(v44 + 2 * (++v43 << a6));
      int *v46 = v54 + v20 * (v53 >> 16) + (((unsigned __int16)v53 * v19) >> 15);
      int v59 = (((unsigned __int16)v55 * v57) >> 15)
          - (((unsigned __int16)v56 * v58) >> 15)
          + 2 * ((v55 >> 16) * v57 - (v56 >> 16) * v58);
      BOOL result = (int *)((v56 >> 16) * v57);
      int v60 = (((unsigned __int16)v55 * v58) >> 15)
          + (((unsigned __int16)v56 * v57) >> 15)
          + 2 * (result + (v55 >> 16) * v58);
      *(v46 - 1) = v20 * (v60 >> 16) - v59 + (((unsigned __int16)v60 * v19) >> 15);
      v41[1] = v60 + v20 * (v59 >> 16) + (((unsigned __int16)v59 * v19) >> 15);
      v46 -= 2;
      v41 += 2;
    }
    while (v45 != v43);
  }
  if (v40 >= 0) {
    int v61 = v40;
  }
  else {
    int v61 = v40 + 1;
  }
  if (v40 >= 2)
  {
    uint64_t v62 = 0;
    int v63 = v61 >> 1;
    uint64_t v64 = v40 - 1;
    do
    {
      int v65 = *(__int16 *)(a4 + 2 * v64);
      int v66 = *(int *)(a3 + 4 * v62) >> 16;
      int v67 = (unsigned __int16)*(_DWORD *)(a3 + 4 * v62);
      int v68 = *(__int16 *)(a4 + 2 * v62);
      int v69 = *(int *)(a3 + 4 * v64) >> 16;
      int v70 = (unsigned __int16)*(_DWORD *)(a3 + 4 * v64);
      BOOL result = (int *)(v70 * v68);
      *(_DWORD *)(a3 + 4 * v62) = ((v67 * v65) >> 15) - ((int)result >> 15) + 2 * (v66 * v65 - v69 * v68);
      *(_DWORD *)(a3 + 4 * v64) = ((v67 * v68) >> 15) + ((v70 * v65) >> 15) + 2 * (v69 * v65 + v66 * v68);
      ++v62;
      --v64;
    }
    while (v63 != v62);
  }
  return result;
}

uint64_t *encode_pulses(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  int v4 = *(_DWORD *)(a1 + 4 * (a2 - 1));
  unsigned int v5 = v4 >> 31;
  if (v4 >= 0) {
    int v6 = *(_DWORD *)(a1 + 4 * (a2 - 1));
  }
  else {
    int v6 = -v4;
  }
  uint64_t v7 = a2;
  unint64_t v8 = 2;
  do
  {
    if ((int)v8 >= v6) {
      int v9 = v6;
    }
    else {
      int v9 = v8;
    }
    uint64_t v10 = (uint64_t)*(&CELT_PVQ_U_ROW + v9);
    if ((int)v8 <= v6) {
      unsigned int v11 = v6;
    }
    else {
      unsigned int v11 = v8;
    }
    v5 += *(_DWORD *)(v10 + 4 * v11);
    int v12 = *(_DWORD *)(a1 - 8 + 4 * v7);
    if (v12 >= 0) {
      int v13 = *(_DWORD *)(a1 - 8 + 4 * v7);
    }
    else {
      int v13 = -v12;
    }
    v6 += v13;
    if (v12 < 0)
    {
      if (v8 > v6) {
        int v14 = v6 + 1;
      }
      else {
        int v14 = v8;
      }
      uint64_t v15 = (uint64_t)*(&CELT_PVQ_U_ROW + v14);
      if ((int)v8 <= v6 + 1) {
        unsigned int v16 = v6 + 1;
      }
      else {
        unsigned int v16 = v8;
      }
      v5 += *(_DWORD *)(v15 + 4 * v16);
    }
    --v7;
    ++v8;
  }
  while (v7 > 1);
  if (a2 >= a3) {
    int v17 = a3;
  }
  else {
    int v17 = a2;
  }
  uint64_t v18 = (uint64_t)*(&CELT_PVQ_U_ROW + v17);
  if (a2 <= a3) {
    int v19 = a3;
  }
  else {
    int v19 = a2;
  }
  int v20 = *(_DWORD *)(v18 + 4 * v19);
  if (a3 + 1 < a2) {
    int v21 = a3 + 1;
  }
  else {
    int v21 = a2;
  }
  uint64_t v22 = (uint64_t)*(&CELT_PVQ_U_ROW + v21);
  if (a3 + 1 > a2) {
    int v23 = a3 + 1;
  }
  else {
    int v23 = a2;
  }
  return ec_enc_uint(a4, v5, *(_DWORD *)(v22 + 4 * v23) + v20);
}

uint64_t decode_pulses(int *a1, int a2, int a3, uint64_t a4)
{
  unsigned int v4 = a3;
  if (a2 >= a3) {
    int v7 = a3;
  }
  else {
    int v7 = a2;
  }
  uint64_t v8 = (uint64_t)*(&CELT_PVQ_U_ROW + v7);
  if (a2 <= a3) {
    int v9 = a3;
  }
  else {
    int v9 = a2;
  }
  int v10 = *(_DWORD *)(v8 + 4 * v9);
  if (a3 + 1 < a2) {
    int v11 = a3 + 1;
  }
  else {
    int v11 = a2;
  }
  uint64_t v12 = (uint64_t)*(&CELT_PVQ_U_ROW + v11);
  if (a3 + 1 > a2) {
    int v13 = a3 + 1;
  }
  else {
    int v13 = a2;
  }
  uint64_t result = ec_dec_uint(a4, *(_DWORD *)(v12 + 4 * v13) + v10);
  if (a2 >= 3)
  {
    uint64_t v15 = a2;
    do
    {
      if (v15 <= (int)v4)
      {
        uint64_t v26 = (uint64_t)*(&CELT_PVQ_U_ROW + v15);
        unsigned int v27 = *(_DWORD *)(v26 + 4 * (int)v4 + 4);
        if (result >= v27) {
          int v28 = *(_DWORD *)(v26 + 4 * (int)v4 + 4);
        }
        else {
          int v28 = 0;
        }
        unsigned int v29 = result - v28;
        if (*(_DWORD *)(v26 + 4 * v15) <= v29)
        {
          uint64_t v34 = v4;
          uint64_t v30 = (int)v4 + 1;
          do
          {
            unsigned int v32 = *(_DWORD *)(v26 + 4 * v34);
            uint64_t v34 = v30 - 2;
            --v30;
          }
          while (v32 > v29);
        }
        else
        {
          uint64_t v30 = v15;
          do
          {
            int v31 = &CELT_PVQ_U_ROW + v30--;
            unsigned int v32 = *((_DWORD *)*(v31 - 1) + v15);
          }
          while (v32 > v29);
        }
        BOOL v19 = result >= v27;
        uint64_t result = v29 - v32;
        int v33 = v4 - v30;
        if (v19) {
          int v33 = v30 - v4;
        }
        unsigned int v4 = v30;
      }
      else
      {
        unsigned int v16 = &CELT_PVQ_U_ROW + (int)v4;
        unsigned int v17 = *((_DWORD *)*v16 + v15);
        unsigned int v18 = *((_DWORD *)v16[1] + v15);
        BOOL v19 = result < v17 || result >= v18;
        if (v19)
        {
          uint64_t v20 = 0;
          if (result >= v18) {
            int v21 = *((_DWORD *)v16[1] + v15);
          }
          else {
            int v21 = 0;
          }
          unsigned int v22 = result - v21;
          int v23 = v16 - 1;
          do
          {
            unsigned int v24 = *((_DWORD *)v23[v20--] + v15);
            BOOL v19 = v22 >= v24;
            uint64_t v25 = v22 - v24;
          }
          while (!v19);
          v4 += v20;
          if (result >= v18) {
            int v33 = v20;
          }
          else {
            int v33 = -(int)v20;
          }
          uint64_t result = v25;
        }
        else
        {
          int v33 = 0;
          uint64_t result = result - v17;
        }
      }
      *a1++ = v33;
    }
    while (v15-- > 3);
  }
  unsigned int v36 = (2 * v4) | 1;
  if (result >= v36) {
    int v37 = (2 * v4) | 1;
  }
  else {
    int v37 = 0;
  }
  int v38 = result - v37;
  unsigned int v39 = v38 + 1;
  int v40 = v4 - ((v38 + 1) >> 1);
  if (result >= v36) {
    int v40 = ((v38 + 1) >> 1) - v4;
  }
  unsigned int v41 = ((v38 + 1) & 0xFFFFFFFE) - 1;
  BOOL v19 = v39 >= 2;
  unsigned int v42 = v39 >> 1;
  if (!v19) {
    unsigned int v41 = 0;
  }
  *a1 = v40;
  a1[1] = (v42 - (v38 - v41)) ^ (v41 - v38);
  return result;
}

void *opus_custom_mode_create(int a1, int a2, int *a3)
{
  int v3 = 0;
  while (a1 != 48000 || a2 << v3 != 960)
  {
    if (++v3 == 4)
    {
      uint64_t result = 0;
      if (!a3) {
        return result;
      }
      int v5 = -1;
      goto LABEL_9;
    }
  }
  uint64_t result = &mode48000_960_120;
  if (!a3) {
    return result;
  }
  int v5 = 0;
LABEL_9:
  *a3 = v5;
  return result;
}

uint64_t celt_decoder_get_size(int a1)
{
  uint64_t v2 = opus_custom_mode_create(48000, 960, 0);
  return ((4 * v2[1] + 8240) * a1 + 16 * v2[2] + 84);
}

uint64_t celt_decoder_init(void *a1, int a2, unsigned int a3)
{
  int v6 = opus_custom_mode_create(48000, 960, 0);
  if (a3 > 2) {
    return 0xFFFFFFFFLL;
  }
  if (!a1) {
    return 4294967289;
  }
  uint64_t v8 = v6;
  bzero(a1, (int)((4 * v6[1] + 8240) * a3 + 16 * v6[2] + 84));
  *a1 = v8;
  *((_DWORD *)a1 + 2) = v8[1];
  *((_DWORD *)a1 + 3) = a3;
  *((_DWORD *)a1 + 4) = a3;
  *(void *)((char *)a1 + 20) = 1;
  *((_DWORD *)a1 + 7) = v8[3];
  a1[4] = 1;
  *((_DWORD *)a1 + 13) = 0;
  opus_custom_decoder_ctl(a1, 4028, v9, v10, v11, v12, v13, v14, v16);
  int v15 = resampling_factor(a2);
  *((_DWORD *)a1 + 5) = v15;
  if (v15) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t celt_decode_with_ec(int32x2_t *a1, unsigned __int8 *a2, unsigned int a3, _WORD *a4, int a5, uint64_t *a6)
{
  int v6 = a6;
  uint64_t v8 = a1;
  uint64_t v9 = 0;
  v242[2] = *MEMORY[0x263EF8340];
  uint64_t v240 = 0;
  memset(v239, 0, sizeof(v239));
  v242[0] = 0;
  v242[1] = 0;
  v241[0] = 0;
  v241[1] = 0;
  uint64_t v238 = 0;
  int v10 = a1[1].i32[1];
  int v233 = a1[2].i32[0];
  uint64_t v11 = (__int16 *)*a1;
  uint64_t v12 = *(int *)(*(void *)a1 + 8);
  uint64_t v13 = *(unsigned int *)(*(void *)a1 + 8);
  uint64_t v14 = *(void *)(*(void *)a1 + 24);
  int v230 = *(_DWORD *)(*(void *)a1 + 4);
  int v16 = v230 + 2048;
  if (v10 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v10;
  }
  __int32 v18 = a1[2].i32[1];
  BOOL v19 = (_DWORD *)&a1[10] + 1;
  do
  {
    v242[v9++] = v19;
    v19 += v16;
  }
  while (v17 != v9);
  int v20 = *((_DWORD *)v11 + 8);
  if (v20 < 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v227 = v17;
  uint64_t v21 = 0;
  unsigned int v22 = 0;
  uint64_t v23 = (v18 * a5);
  int v15 = (_DWORD *)&a1[10] + 1;
  unsigned int v24 = (char *)&a1[6 * v10 + 10] + 4 * v16 * v10 + 4;
  uint64_t v25 = 2 * (int)v13;
  int v26 = v20 + 1;
  while (*((_DWORD *)v11 + 10) << v22 != v23)
  {
    ++v22;
    v21 += 8;
    if (v26 == v22) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 <= 0x4FB && a4)
  {
    int v28 = v8[3].i32[1];
    if (v28 >= *((_DWORD *)v11 + 3)) {
      int v28 = *((_DWORD *)v11 + 3);
    }
    if (!a2 || a3 <= 1)
    {
      celt_decode_lost(v8, a4, v23, v22);
      return ((int)v23 / v8[2].i32[1]);
    }
    int v210 = v28;
    unint64_t v206 = 24 * v10;
    uint64_t v207 = v16 * v10;
    int v237 = 0;
    uint64_t v205 = 2 * (int)v13;
    uint64_t v224 = (char *)&v15[v207 + v206 / 2];
    uint64_t v213 = &v24[2 * v25];
    uint64_t v212 = &v213[2 * v25];
    uint64_t v226 = v14;
    LODWORD(v228) = a3;
    if (!a6)
    {
      int v6 = (uint64_t *)v239;
      ec_dec_init((uint64_t *)v239, a2, v228);
      a3 = v228;
      unsigned int v24 = v224;
    }
    BOOL v30 = v233 == 1 && (int)v13 > 0;
    BOOL v204 = v30;
    if (v30)
    {
      uint64_t v31 = 0;
      do
      {
        int v32 = *(__int16 *)&v24[v31];
        if (v32 <= *(__int16 *)&v24[2 * v13 + v31]) {
          LOWORD(v32) = *(_WORD *)&v24[2 * v13 + v31];
        }
        *(_WORD *)&v24[v31] = v32;
        v31 += 2;
      }
      while (2 * v13 != v31);
    }
    int v33 = 8 * a3;
    unsigned int v34 = __clz(*((_DWORD *)v6 + 8));
    int v35 = *((_DWORD *)v6 + 6) + v34 - 32;
    int v223 = 8 * a3;
    int v209 = a4;
    if (v35 < (int)(8 * a3))
    {
      if (v35 != 1)
      {
        int v200 = 1;
        goto LABEL_39;
      }
      if (!ec_dec_bit_logp((uint64_t)v6, 15))
      {
        int v35 = 1;
        int v200 = 1;
        int v33 = v223;
        goto LABEL_39;
      }
      unsigned int v34 = __clz(*((_DWORD *)v6 + 8));
      int v33 = v223;
    }
    int v200 = 0;
    *((_DWORD *)v6 + 6) = v33 - v34 + 32;
    int v35 = v33;
LABEL_39:
    int v36 = 0;
    __int32 v37 = v8[3].i32[0];
    v235 = v6;
    uint64_t v208 = v13;
    if (v37)
    {
      int v38 = 0;
      int v39 = 0;
    }
    else
    {
      int v38 = 0;
      int v39 = 0;
      if (v35 + 16 <= v33)
      {
        int v39 = ec_dec_bit_logp((uint64_t)v6, 1);
        if (v39)
        {
          uint64_t v40 = v12;
          int v41 = ec_dec_uint((uint64_t)v6, 6u);
          int v6 = v235;
          int v36 = ec_dec_bits(v235, v41 + 4) + (16 << v41) - 1;
          int v42 = ec_dec_bits(v235, 3u);
          int v33 = v223;
          if ((int)(*((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 30) <= v223)
          {
            int v39 = ec_dec_icdf((uint64_t)v235, tapset_icdf, 2);
            int v33 = v223;
          }
          else
          {
            int v39 = 0;
          }
          int v38 = 3072 * v42 + 3072;
          uint64_t v12 = v40;
        }
        else
        {
          int v36 = 0;
          int v38 = 0;
          int v33 = v223;
        }
        int v35 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 32;
      }
    }
    int v218 = v38;
    int v231 = v39;
    int v232 = v36;
    BOOL v43 = 0;
    signed int v44 = v35 + 3;
    if (v22 && v44 <= v33)
    {
      BOOL v43 = ec_dec_bit_logp((uint64_t)v6, 3);
      int v33 = v223;
      signed int v44 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 29;
    }
    BOOL v45 = 0;
    BOOL v222 = v43;
    if (v43) {
      int v46 = 1 << v22;
    }
    else {
      int v46 = 0;
    }
    unsigned int v217 = v46;
    if (v44 <= v33) {
      BOOL v45 = ec_dec_bit_logp((uint64_t)v6, 3);
    }
    int v211 = 1 << v22;
    uint64_t v234 = v23;
    int v214 = v10;
    int v47 = v8[3].i32[0];
    int v48 = v8[3].i32[1];
    uint64_t v221 = v11;
    unquant_coarse_energy((uint64_t)v11, v47, v48, (uint64_t)v224, v45, (uint64_t)v6, v233, v22);
    uint64_t v219 = v12;
    int v49 = (char *)&v198 - ((4 * v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v220 = (char *)(4 * v12);
    bzero(v49, 4 * v12);
    uint64_t v51 = v8[3].i32[0];
    uint64_t v50 = v8[3].i32[1];
    v229 = v8;
    unsigned int v52 = 8 * *((_DWORD *)v6 + 2);
    unsigned int v53 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 32;
    if (v222) {
      int v54 = 2;
    }
    else {
      int v54 = 4;
    }
    if (v22) {
      BOOL v55 = v53 + v54 + 1 > v52;
    }
    else {
      BOOL v55 = 1;
    }
    int v56 = !v55;
    int v216 = v49;
    uint64_t v225 = v50;
    LODWORD(v236) = v56;
    int v57 = 0;
    if ((int)v51 < (int)v50)
    {
      int v58 = 0;
      unsigned int v59 = v52 - v56;
      if (v222) {
        int v60 = 4;
      }
      else {
        int v60 = 5;
      }
      int v61 = v50 - v51;
      uint64_t v62 = &v49[4 * v51];
      do
      {
        if (v54 + v53 <= v59)
        {
          v58 ^= ec_dec_bit_logp((uint64_t)v6, v54);
          unsigned int v53 = *((_DWORD *)v6 + 6) + __clz(*((_DWORD *)v6 + 8)) - 32;
          v57 |= v58;
        }
        *(_DWORD *)uint64_t v62 = v58;
        v62 += 4;
        int v54 = v60;
        --v61;
      }
      while (v61);
    }
    int v63 = (int)v236;
    if (v236)
    {
      BOOL v64 = v222;
      int v65 = v229;
      uint64_t v66 = (uint64_t)v216;
      if (tf_select_table[v57 + (uint64_t)(4 * (int)v222) + v21] == tf_select_table[4 * v222 + 2 + v57 + v21])
      {
        int v63 = 0;
      }
      else
      {
        BOOL v68 = ec_dec_bit_logp((uint64_t)v235, 1);
        BOOL v64 = v222;
        int v63 = 2 * v68;
      }
      signed int v67 = v223;
    }
    else
    {
      int v65 = v229;
      signed int v67 = v223;
      BOOL v64 = v222;
      uint64_t v66 = (uint64_t)v216;
    }
    if ((int)v51 < (int)v225)
    {
      int v69 = v63 + 4 * v64;
      uint64_t v70 = v225 - v51;
      uint64_t v71 = (int *)(v66 + 4 * v51);
      do
      {
        *uint64_t v71 = tf_select_table[*v71 + (uint64_t)v69 + v21];
        ++v71;
        --v70;
      }
      while (v70);
    }
    uint64_t v72 = v235;
    if ((int)(*((_DWORD *)v235 + 6) + __clz(*((_DWORD *)v235 + 8)) - 28) <= v67) {
      unsigned int v203 = ec_dec_icdf((uint64_t)v235, spread_icdf, 5);
    }
    else {
      unsigned int v203 = 2;
    }
    uint64_t v73 = (uint64_t)v221;
    size_t v74 = (size_t)v220;
    unint64_t v75 = (unint64_t)(v220 + 15) & 0xFFFFFFFFFFFFFFF0;
    bzero((char *)&v198 - v75, (size_t)v220);
    uint64_t v76 = v73;
    v236 = (_DWORD *)((char *)&v198 - v75);
    int v77 = v233;
    init_caps(v76, (uint64_t)&v198 - v75, v22, v233);
    unint64_t v202 = v75;
    uint64_t v225 = (uint64_t)&v198 - v75;
    bzero((char *)&v198 - v75, v74);
    int v78 = v228 << 6;
    int v79 = ec_tell_frac((uint64_t)v72);
    int v80 = v65[3].i32[1];
    uint64_t v81 = v65[3].i32[0];
    int v215 = v78;
    if ((int)v81 < v80)
    {
      int v82 = 6;
      uint64_t v83 = v226;
      uint64_t v84 = v225;
      do
      {
        uint64_t v85 = v81 + 1;
        int v86 = ((*(__int16 *)(v83 + 2 * (v81 + 1)) - *(__int16 *)(v83 + 2 * v81)) * v77) << v22;
        int v87 = 8 * v86;
        if (v86 <= 48) {
          int v86 = 48;
        }
        if (v87 >= v86) {
          int v88 = v86;
        }
        else {
          int v88 = v87;
        }
        if (v79 + 8 * v82 >= v78)
        {
          *(_DWORD *)(v84 + 4 * v81) = 0;
        }
        else
        {
          if ((int)v236[v81] < 1)
          {
            int v90 = 0;
          }
          else
          {
            int v89 = 0;
            LODWORD(v228) = v82;
            while (1)
            {
              int v90 = v89;
              size_t v91 = v235;
              BOOL v92 = ec_dec_bit_logp((uint64_t)v235, v82);
              int v93 = ec_tell_frac((uint64_t)v91);
              int v79 = v93;
              if (!v92) {
                break;
              }
              int v94 = v78 - v88;
              if (v93 + 8 < v78 - v88)
              {
                int v89 = v90 + v88;
                LOBYTE(v82) = 1;
                v78 -= v88;
                if (v90 + v88 < v236[v81]) {
                  continue;
                }
              }
              v90 += v88;
              int v78 = v94;
              break;
            }
            int v77 = v233;
            uint64_t v83 = v226;
            uint64_t v84 = v225;
            int v82 = v228;
          }
          *(_DWORD *)(v84 + 4 * v81) = v90;
          int v80 = v229[3].i32[1];
          if (v82 <= 3) {
            int v95 = 3;
          }
          else {
            int v95 = v82;
          }
          int v96 = v95 - 1;
          if (v90 > 0) {
            int v82 = v96;
          }
        }
        ++v81;
      }
      while (v85 < v80);
    }
    uint64_t v228 = (uint64_t)&v198 - v202;
    bzero((char *)&v198 - v202, (size_t)v220);
    int32x2_t v97 = v235;
    if (v79 + 48 <= v78) {
      int v98 = ec_dec_icdf((uint64_t)v235, trim_icdf, 7);
    }
    else {
      int v98 = 5;
    }
    int v99 = v221;
    int v100 = ec_tell_frac((uint64_t)v97);
    BOOL v101 = 0;
    int v102 = v215 + ~v100;
    uint64_t v8 = v229;
    int v103 = 0;
    if (v22 >= 2 && v222)
    {
      BOOL v101 = v102 >= (int)v21 + 16;
      if (v102 < (int)v21 + 16) {
        int v103 = 0;
      }
      else {
        int v103 = 8;
      }
    }
    int v201 = v103;
    LODWORD(v202) = v101;
    int v104 = v102 - v103;
    size_t v105 = (size_t)v220;
    int v106 = (char *)&v198 - ((unint64_t)(v220 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v106, (size_t)v220);
    bzero(v106, v105);
    uint64_t v107 = (unsigned char *)v8[3].u32[0];
    uint64_t v108 = v8[3].u32[1];
    v220 = v106;
    uint64_t v109 = v228;
    int v197 = v104;
    uint64_t v110 = v235;
    int v111 = v77;
    unsigned int v112 = compute_allocation((uint64_t)v99, v107, v108, v225, (uint64_t)v236, v98, (int *)&v238 + 1, (int *)&v238, v197, (unsigned int *)&v237, (uint64_t)v106, v228, (uint64_t)v106, v77, v22, v235, 0, 0, 0);
    unquant_fine_energy((uint64_t)v99, v8[3].i32[0], v8[3].i32[1], (uint64_t)v224, v109, v110, v111);
    uint64_t v225 = (v219 * v111);
    int v113 = (char *)&v198 - (((int)v225 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v113, (int)v225);
    int v114 = v234;
    uint64_t v199 = (v234 * v111);
    size_t v115 = 2 * (int)v199;
    int v116 = (char *)&v198 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v116, v115);
    int v117 = v8[3].i32[0];
    uint64_t v118 = v8[3].u32[1];
    if (v111 == 2) {
      uint64_t v119 = (uint64_t)&v116[2 * v114];
    }
    else {
      uint64_t v119 = 0;
    }
    v236 = v106;
    quant_all_bands(0, (uint64_t)v99, v117, v118, (uint64_t)v116, v119, (uint64_t)v113, 0, (uint64_t)v106, v217, v203, v238, HIDWORD(v238), (uint64_t)v216, v215 - v201, v237, (uint64_t)v110, v22, v112,
      &v8[5]);
    int v120 = 0;
    if (v202) {
      int v120 = ec_dec_bits(v110, 1u);
    }
    int v121 = v233;
    uint64_t v122 = (uint64_t)v224;
    unquant_energy_finalise((uint64_t)v99, v8[3].i32[0], v8[3].i32[1], (uint64_t)v224, v228, (uint64_t)v220, v223 - *((_DWORD *)v110 + 6) - __clz(*((_DWORD *)v110 + 8)) + 32, v110, v233);
    int v123 = v234;
    int v124 = v230;
    if (v120) {
      anti_collapse(v99, (uint64_t)v116, (uint64_t)v113, v22, v121, v234, v8[3].i32[0], v8[3].i32[1], v122, (uint64_t)v213, (uint64_t)v212, (uint64_t)v236, v8[5].i32[0]);
    }
    int v125 = v121;
    uint64_t v126 = v123;
    int v127 = v214;
    if (v214 <= v125) {
      int v128 = v125;
    }
    else {
      int v128 = v214;
    }
    size_t v129 = 4 * v123 * v128;
    uint64_t v130 = (char *)&v198 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v130, v129);
    v236 = v130;
    if (v200)
    {
      denormalise_bands((uint64_t)v99, (uint64_t)v116, (uint64_t)v130, (uint64_t)v224, v8[3].i32[0], v210, v125, v211);
      int v131 = v234;
      uint64_t v132 = v227;
    }
    else
    {
      uint64_t v132 = v227;
      if ((int)v225 >= 1) {
        memset_pattern16(v224, &unk_2207733D0, 2 * v225);
      }
      int v131 = v234;
      if ((int)v199 >= 1) {
        bzero(v236, 4 * v199);
      }
    }
    if (v124 >= 0) {
      int v133 = v124;
    }
    else {
      int v133 = v124 + 1;
    }
    size_t v134 = 4 * ((v133 >> 1) - v131 + 2048);
    int v135 = (void **)v242;
    do
    {
      int v136 = (char *)*v135++;
      memmove(v136, &v136[4 * v126], v134);
      --v132;
    }
    while (v132);
    int v137 = 0;
    int v138 = *(__int16 *)(v226 + 2 * v210) << v22;
    __int32 v139 = v8[2].i32[1];
    if (v233 <= 1) {
      int v140 = 1;
    }
    else {
      int v140 = v233;
    }
    uint64_t v141 = v234;
    int v142 = (int)v234 / v139;
    int v143 = v236;
    do
    {
      int v144 = v138;
      if (v139 != 1)
      {
        if (v138 >= v142) {
          int v144 = v142;
        }
        else {
          int v144 = v138;
        }
      }
      if (v144 < (int)v141)
      {
        bzero(&v143[v144 + v137], 4 * (v141 + ~v144) + 4);
        int v143 = v236;
      }
      v137 += v141;
      --v140;
    }
    while (v140);
    unint64_t v145 = 0;
    uint64_t v146 = 8 * v227;
    do
    {
      v241[v145 / 8] = v242[v145 / 8] - 4 * v126 + 0x2000;
      v145 += 8;
    }
    while (v146 != v145);
    uint64_t v147 = v235;
    uint32x2_t v148 = v221;
    int v149 = v230;
    if (v127 == 2 && v233 == 1 && (int)v141 >= 1)
    {
      uint64_t v150 = v141;
      int v151 = v143;
      do
      {
        v151[v126] = *v151;
        ++v151;
        --v150;
      }
      while (v150);
    }
    if (v127 == 1 && v233 == 2 && (int)v141 >= 1)
    {
      uint64_t v152 = v141;
      int v153 = v143;
      do
      {
        *int v153 = (v153[v126] + *v153) >> 1;
        ++v153;
        --v152;
      }
      while (v152);
    }
    compute_inv_mdcts((unsigned int *)v148, v217, (uint64_t)v143, (uint64_t)v241, v127, v22);
    unint64_t v154 = 0;
    int v155 = (__int16)v218;
    do
    {
      int32x2_t v156 = vmax_s32(v8[7], (int32x2_t)0xF0000000FLL);
      v8[7] = v156;
      uint64_t v157 = (int *)v241[v154 / 8];
      comb_filter(v157, v157, v156.i32[1], v156.i32[0], *((_DWORD *)v148 + 10), v8[8].i16[1], v8[8].i16[0], v8[9].i32[0], v8[8].i32[1], *((__int16 **)v148 + 8), v149);
      if (v22) {
        comb_filter(&v157[*((int *)v148 + 10)], &v157[*((int *)v148 + 10)], v8[7].i32[0], v232, v234 - *((_DWORD *)v148 + 10), v8[8].i16[0], v155, v8[8].i32[1], v231, *((__int16 **)v148 + 8), v149);
      }
      v154 += 8;
    }
    while (v146 != v154);
    __int32 v158 = v8[7].i32[0];
    v8[8].i16[1] = v8[8].i16[0];
    __int32 v159 = v8[8].i32[1];
    int v160 = v232;
    v8[7].i32[0] = v232;
    v8[7].i32[1] = v158;
    __int16 v161 = v218;
    v8[8].i16[0] = v218;
    int v162 = v231;
    v8[8].i32[1] = v231;
    v8[9].i32[0] = v159;
    if (v22)
    {
      v8[7].i32[1] = v160;
      v8[8].i16[1] = v161;
      v8[9].i32[0] = v162;
    }
    uint64_t v163 = v209;
    LODWORD(v23) = v234;
    uint64_t v164 = v219;
    int v165 = v208;
    unint64_t v166 = v206;
    uint64_t v167 = v205;
    int v168 = v224;
    int v169 = v213;
    unsigned int v170 = v212;
    int v171 = v211;
    if (v204)
    {
      uint64_t v172 = v208;
      int v173 = v224;
      do
      {
        *(_WORD *)&v173[2 * v164] = *(_WORD *)v173;
        v173 += 2;
        --v172;
      }
      while (v172);
    }
    if (v222)
    {
      int v174 = v214;
      if ((int)v164 >= 1)
      {
        if ((int)v167 <= 1) {
          uint64_t v175 = 1;
        }
        else {
          uint64_t v175 = v167;
        }
        do
        {
          int v176 = *(__int16 *)&v168[2 * v167];
          if (v176 >= *(__int16 *)v168) {
            LOWORD(v176) = *(_WORD *)v168;
          }
          *(_WORD *)&v168[2 * v167] = v176;
          v168 += 2;
          --v175;
        }
        while (v175);
      }
    }
    else
    {
      int v174 = v214;
      if (v165 >= 1)
      {
        if ((int)v167 <= 1) {
          uint64_t v177 = 1;
        }
        else {
          uint64_t v177 = v167;
        }
        uint64_t v178 = v177;
        do
        {
          __int16 v179 = *(_WORD *)v169;
          v169 += 2;
          *(_WORD *)unsigned int v170 = v179;
          v170 += 2;
          --v178;
        }
        while (v178);
        uint64_t v180 = v177;
        int v181 = v168;
        do
        {
          *(_WORD *)&v181[2 * v167] = *(_WORD *)v181;
          v181 += 2;
          --v180;
        }
        while (v180);
        do
        {
          int v182 = v171 + *(__int16 *)&v168[6 * v167];
          if (v182 >= *(__int16 *)v168) {
            LOWORD(v182) = *(_WORD *)v168;
          }
          *(_WORD *)&v168[6 * v167] = v182;
          v168 += 2;
          --v177;
        }
        while (v177);
      }
    }
    int v183 = 0;
    uint64_t v184 = (uint64_t)&v8[10] + 4 * v207 + 2 * v166 + 4;
    uint64_t v185 = v184 + 4 * v167;
    uint64_t v186 = v184 + 2 * v167;
    uint64_t v187 = v8[3].u32[0];
    uint64_t v188 = v8[3].i32[1];
    char v189 = 1;
    do
    {
      char v190 = v189;
      if ((int)v187 >= 1)
      {
        uint64_t v191 = 0;
        do
        {
          *(_WORD *)(v184 + 2 * v183 * (int)v164 + v191) = 0;
          *(_WORD *)(v185 + 2 * v183 * (int)v164 + v191) = -28672;
          *(_WORD *)(v186 + 2 * v183 * (int)v164 + v191) = -28672;
          v191 += 2;
        }
        while (2 * v187 != v191);
      }
      if ((int)v188 < v165)
      {
        uint64_t v192 = 0;
        uint64_t v193 = v188 + v183 * v165;
        uint64_t v194 = v184 + 2 * v193;
        uint64_t v195 = v185 + 2 * v193;
        uint64_t v196 = v186 + 2 * v193;
        do
        {
          *(_WORD *)(v194 + 2 * v192) = 0;
          *(_WORD *)(v195 + 2 * v192) = -28672;
          *(_WORD *)(v196 + 2 * v192++) = -28672;
        }
        while (v164 - v188 != v192);
      }
      char v189 = 0;
      int v183 = 1;
    }
    while ((v190 & 1) != 0);
    v8[5].i32[0] = *((_DWORD *)v147 + 8);
    deemphasis((uint64_t)v241, v163, v23, v174, v8[2].i32[1], v148 + 8, (uint64_t)&v8[9] + 4, v236);
    v8[6].i32[1] = 0;
    if ((int)(*((_DWORD *)v147 + 6) + __clz(*((_DWORD *)v147 + 8)) - 32) > v223) {
      return 4294967293;
    }
    if (*((_DWORD *)v147 + 12)) {
      v8[5].i32[1] = 1;
    }
    return ((int)v23 / v8[2].i32[1]);
  }
  return result;
}

uint64_t celt_decode_lost(_DWORD *a1, _WORD *a2, uint64_t a3, int a4)
{
  LODWORD(v181) = a4;
  uint64_t v4 = a3;
  __int32 v159 = a2;
  uint64_t v6 = 0;
  v185[2] = *(int **)MEMORY[0x263EF8340];
  v185[0] = 0;
  v185[1] = 0;
  uint64_t v7 = *(void *)a1;
  uint64_t v178 = *(int *)(*(void *)a1 + 8);
  uint64_t v8 = *(int *)(v7 + 4);
  uint64_t v176 = *(unsigned int *)(v7 + 4);
  int v9 = a1[3];
  v184[0] = 0;
  v184[1] = 0;
  uint64_t v177 = v8;
  int v10 = v8 + 2048;
  uint64_t v174 = (int)a3;
  uint64_t v171 = -(uint64_t)(int)a3;
  if (v9 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v9;
  }
  LODWORD(v169) = v11;
  __int16 v161 = (unsigned int *)v7;
  uint64_t v180 = *(void *)(v7 + 24);
  uint64_t v12 = a1;
  do
  {
    v185[v6] = v12 + 21;
    v184[v6++] = (char *)v12 + 8276 - 4 * (int)a3;
    v12 += v10;
  }
  while (v11 != v6);
  uint64_t v166 = (v10 * v9);
  uint64_t v13 = (uint64_t)&a1[(int)v166 + 21];
  int v14 = a1[13];
  uint64_t v15 = (int)a1[6];
  int v158 = a1[5];
  BOOL v16 = v14 <= 4 && v15 == 0;
  int v17 = !v16;
  int v18 = v9 * a3;
  if (v16) {
    int v19 = a3;
  }
  else {
    int v19 = v9 * a3;
  }
  size_t v20 = 4 * v19;
  uint64_t v21 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v21, v20);
  uint64_t v175 = a1;
  uint64_t v179 = v4;
  int v167 = v9;
  int v172 = v14;
  uint64_t v173 = v11;
  uint64_t v157 = v21;
  if (v17 != 1)
  {
    uint64_t v181 = v13;
    int v182 = 0;
    if (v14)
    {
      int v28 = a1[12];
      int v29 = 26214;
    }
    else
    {
      bzero(&v156 - 256, 0x800uLL);
      pitch_downsample(v185, (char *)&v156 - 2048, 2048, v9);
      pitch_search((__int16 *)&v156 - 664, (__int16 *)&v156 - 1024, 1328, 620, &v182);
      int v28 = 720 - v182;
      a1[12] = 720 - v182;
      int v29 = 0x7FFF;
    }
    LODWORD(v166) = v29;
    int v182 = v28;
    int v62 = v177;
    int v63 = (char *)&v156 - ((4 * v177 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v63, 4 * v177);
    unsigned int v170 = (__int16 *)&v156;
    BOOL v64 = &v156 - 256;
    bzero(&v156 - 256, 0x800uLL);
    uint64_t v65 = 0;
    uint64_t v66 = *((void *)v161 + 8);
    uint64_t v178 = (2048 - v179);
    size_t v169 = 4 * (int)v178;
    if ((int)v176 >= 0) {
      int v67 = v176;
    }
    else {
      int v67 = v176 + 1;
    }
    uint64_t v165 = (v67 >> 1);
    uint64_t v180 = (v176 + v179);
    uint64_t v68 = (int)v176 + (int)v179;
    LODWORD(v168) = 2047 - v179;
    int v160 = v62 - v179 + 2048;
    int v164 = v62 - 1;
    long long v163 = xmmword_2207733C0;
    long long v162 = xmmword_2206DA940;
    uint64_t v69 = v181;
    while (1)
    {
      uint64_t v70 = 0;
      uint64_t v71 = v185[v65];
      uint64_t v72 = 1024;
      do
      {
        *(int16x8_t *)&v64[v70] = vrshrn_high_n_s32(vrshrn_n_s32(*(int32x4_t *)&v71[v72], 0xCuLL), *(int32x4_t *)&v71[v72 + 4], 0xCuLL);
        v72 += 8;
        v70 += 2;
      }
      while (v70 != 256);
      if (!v14)
      {
        _celt_autocorr((char *)&v156 - 2048, (unsigned int *)v183, v66, v177, 24, 1024);
        v73.i64[0] = 0xFFFF0000FFFFLL;
        v73.i64[1] = 0xFFFF0000FFFFLL;
        v183[0] += v183[0] >> 13;
        uint64_t v74 = 1;
        int64x2_t v75 = (int64x2_t)v162;
        int64x2_t v76 = (int64x2_t)v163;
        do
        {
          v77.i64[0] = (v75.i32[0] * v75.i32[0]);
          v77.i64[1] = (v75.i32[2] * v75.i32[2]);
          v78.i64[0] = (v76.i32[0] * v76.i32[0]);
          v78.i64[1] = (v76.i32[2] * v76.i32[2]);
          int32x4_t v79 = *(int32x4_t *)&v183[v74];
          int32x4_t v80 = vuzp1q_s32(v77, v78);
          int32x4_t v81 = vaddq_s32(v80, v80);
          int32x4_t v82 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v79, v73), v81), 0xFuLL);
          int32x4_t v83 = vmulq_s32(v81, vshrq_n_s32(v79, 0x10uLL));
          *(int32x4_t *)&v183[v74] = vsubq_s32(vsubq_s32(v79, vaddq_s32(v83, v83)), v82);
          int64x2_t v84 = vdupq_n_s64(4uLL);
          int64x2_t v76 = vaddq_s64(v76, v84);
          int64x2_t v75 = vaddq_s64(v75, v84);
          v74 += 4;
        }
        while (v74 != 25);
        _celt_lpc((_WORD *)(v69 + 2 * (24 * v65)), v183, 24);
      }
      uint64_t v85 = 0;
      int v86 = v182;
      int v87 = 2 * v182;
      if (2 * v182 >= 1024) {
        int v87 = 1024;
      }
      uint64_t v88 = v87;
      int v89 = 2047 - v87;
      do
      {
        *(_WORD *)((char *)v183 + v85) = (v71[v89--] + 2048) >> 12;
        v85 += 2;
      }
      while (v85 != 48);
      uint64_t v90 = v181 + 2 * (24 * v65);
      celt_fir(&v170[-v88], v90, (uint64_t)&v170[-v88], v88, 24, v183);
      if (v86 < 1)
      {
        unsigned int v111 = 1;
        unsigned int v110 = 1;
      }
      else
      {
        __int16 v91 = 0;
        unsigned __int16 v92 = 0;
        int v93 = 1024 - v88;
        int v94 = (__int16 *)v64 + 1024 - (int)v88;
        uint64_t v95 = v88;
        int v96 = v94;
        uint64_t v97 = v88;
        do
        {
          int v99 = *v96++;
          int v98 = v99;
          if (v99 >= v92) {
            unsigned __int16 v92 = v98;
          }
          if (v91 >= v98) {
            __int16 v91 = v98;
          }
          --v97;
        }
        while (v97);
        char v100 = 0;
        if (v92 <= -v91) {
          unsigned int v101 = -v91;
        }
        else {
          unsigned int v101 = v92;
        }
        if (v101 >= 0x400)
        {
          __int16 v102 = 0;
          unsigned __int16 v103 = 0;
          do
          {
            int v105 = *v94++;
            int v104 = v105;
            if (v105 >= v103) {
              unsigned __int16 v103 = v104;
            }
            if (v102 >= v104) {
              __int16 v102 = v104;
            }
            --v95;
          }
          while (v95);
          if (v103 <= -v102) {
            unsigned int v106 = -v102;
          }
          else {
            unsigned int v106 = v103;
          }
          __int16 v107 = ((62 - 2 * __clz(v106)) & 0xFFFE) - 20;
          if (v106) {
            char v100 = v107;
          }
          else {
            char v100 = -20;
          }
        }
        LODWORD(v108) = (int)v88 >> 1;
        if ((int)v88 >> 1 <= 1) {
          uint64_t v108 = 1;
        }
        else {
          uint64_t v108 = v108;
        }
        int v109 = 1024 - ((int)v88 >> 1);
        unsigned int v110 = 1;
        unsigned int v111 = 1;
        do
        {
          int v112 = *((__int16 *)v64 + v109);
          v111 += (v112 * v112) >> v100;
          int v113 = *((__int16 *)v64 + v93);
          v110 += (v113 * v113) >> v100;
          ++v93;
          ++v109;
          --v108;
        }
        while (v108);
      }
      if (v111 >= v110) {
        unsigned int v114 = v110;
      }
      else {
        unsigned int v114 = v111;
      }
      uint64_t v115 = frac_div32(v114 >> 1, v110);
      __int16 v116 = celt_sqrt(v115);
      memmove(v71, &v71[v174], v169);
      if ((int)v68 < 1)
      {
        unsigned int v118 = 0;
      }
      else
      {
        int v117 = 0;
        unsigned int v118 = 0;
        int v119 = 1024 - v182;
        unsigned int v120 = (v116 * v166) >> 15;
        uint64_t v121 = v180;
        int v122 = 1024 - v182 - v179 + 1024;
        int v123 = v178;
        do
        {
          int v124 = v182;
          if (v117 < v182) {
            int v124 = 0;
          }
          else {
            LOWORD(v120) = (v116 * (__int16)v120) >> 15;
          }
          int v125 = v117 - v124;
          v71[v123] = (((__int16)v120 * *((__int16 *)v64 + v125 + v119)) >> 3) & 0xFFFFF000;
          int v126 = (16 * v71[v122 + v125] + 0x8000) >> 16;
          v118 += (v126 * v126) >> 8;
          int v117 = v125 + 1;
          ++v123;
          --v121;
        }
        while (v121);
      }
      uint64_t v127 = 0;
      int v128 = v168;
      do
      {
        *(_WORD *)((char *)v183 + v127) = (v71[v128--] + 2048) >> 12;
        v127 += 2;
      }
      while (v127 != 48);
      size_t v129 = (__int16 *)v90;
      uint64_t v130 = v180;
      celt_iir(&v71[v171 + 2048], v129, (uint64_t)&v71[v171 + 2048], v180, 24, v183);
      if ((int)v130 < 1)
      {
        int v46 = v175;
        if (v118)
        {
          unsigned int v131 = 0;
LABEL_121:
          if (v118 < v131)
          {
            uint64_t v136 = frac_div32((v118 >> 1) + 1, v131 + 1);
            __int16 v137 = celt_sqrt(v136);
            int v138 = 2 * v137;
            if ((int)v176 >= 1)
            {
              uint64_t v139 = v176;
              int v140 = (__int16 *)v66;
              int v141 = v178;
              do
              {
                int v142 = *v140++;
                v71[v141] = ((v71[v141] >> 15) & 0xFFFFFFFE)
                          * ((int)(((v138 ^ 0xFFFE) * v142) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                          + ((((int)(((v138 ^ 0xFFFE) * v142) & 0xFFFF0000 ^ 0x7FFF0000) >> 16)
                            * (unsigned __int16)v71[v141]) >> 15);
                ++v141;
                --v139;
              }
              while (v139);
            }
            if ((int)v179 >= 1)
            {
              int v143 = v160;
              uint64_t v144 = v177;
              do
              {
                v71[v143] = v138 * (v71[v143] >> 16) + (((unsigned __int16)v71[v143] * v137) >> 15);
                ++v144;
                ++v143;
              }
              while (v144 < v68);
            }
          }
        }
      }
      else
      {
        unsigned int v131 = 0;
        int v132 = v178;
        do
        {
          int v133 = (16 * v71[v132] + 0x8000) >> 16;
          v131 += (v133 * v133) >> 8;
          ++v132;
          --v130;
        }
        while (v130);
        int v46 = v175;
        if (v118 > v131 >> 2) {
          goto LABEL_121;
        }
        if ((int)v68 >= 1)
        {
          uint64_t v134 = v180;
          int v135 = v178;
          do
          {
            v71[v135++] = 0;
            --v134;
          }
          while (v134);
        }
      }
      comb_filter((int *)v63, v71 + 2048, v46[14], v46[14], v177, (__int16)-*((_WORD *)v46 + 32), (__int16)-*((_WORD *)v46 + 32), v46[17], v46[17], 0, 0);
      if ((int)v176 > 1)
      {
        unint64_t v145 = v71 + 2048;
        uint64_t v146 = v165;
        uint64_t v147 = (__int16 *)v66;
        uint32x2_t v148 = (int *)v63;
        int v149 = v164;
        do
        {
          int v151 = *v147++;
          int v150 = v151;
          int v152 = (*(int *)&v63[4 * v149] >> 16) * v151;
          int v153 = *(__int16 *)(v66 + 2 * v149);
          int v154 = *v148++;
          *v145++ = (((unsigned __int16)v154 * v153) >> 15)
                  + (((unsigned __int16)*(_DWORD *)&v63[4 * v149--] * v150) >> 15)
                  + 2 * (v152 + (v154 >> 16) * v153);
          --v146;
        }
        while (v146);
      }
      ++v65;
      int v14 = v172;
      uint64_t v69 = v181;
      if (v65 == v173)
      {
        LODWORD(v4) = v179;
        int v9 = v167;
        int v61 = v161;
        int v52 = v158;
        int v48 = v157;
        goto LABEL_133;
      }
    }
  }
  unsigned int v170 = (__int16 *)(v13 + 48 * v9);
  int v22 = v14;
  uint64_t v23 = (int)a1[7];
  LODWORD(v24) = v161[3];
  if ((int)v23 < (int)v24) {
    LODWORD(v24) = a1[7];
  }
  LODWORD(v177) = v24;
  if ((int)v15 <= (int)v24) {
    uint64_t v24 = v24;
  }
  else {
    uint64_t v24 = v15;
  }
  uint64_t v168 = v24;
  size_t v25 = 2 * v18;
  int v26 = (char *)&v156 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v26, v25);
  if (v22 <= 4)
  {
    uint64_t v27 = (uint64_t)v170;
    uint64_t v30 = 0;
    if (v22) {
      __int16 v31 = -512;
    }
    else {
      __int16 v31 = -1536;
    }
    uint64_t v32 = (uint64_t)&a1[12 * v9 + 21 + (int)v166] + 2 * v15;
    uint64_t v33 = 2 * v178;
    do
    {
      if ((int)v15 < (int)v23)
      {
        uint64_t v34 = v23 - v15;
        int v35 = (_WORD *)v32;
        do
        {
          *v35++ += v31;
          --v34;
        }
        while (v34);
      }
      ++v30;
      v32 += v33;
    }
    while (v30 != v11);
  }
  else
  {
    uint64_t v27 = (uint64_t)&v170[2 * v178 + 2 * v178 + 2 * v178];
  }
  int v36 = a1[10];
  unsigned int v170 = (__int16 *)v27;
  if (v9 >= 1)
  {
    int v37 = 0;
    int v38 = 0;
    uint64_t v39 = (int)v168;
    uint64_t v171 = v15;
    do
    {
      LODWORD(v178) = v38;
      if ((int)v15 < (int)v177)
      {
        int v40 = v38 * v4;
        do
        {
          int v41 = *(__int16 *)(v180 + 2 * v15);
          int v42 = v41 << v181;
          ++v15;
          int v43 = (*(__int16 *)(v180 + 2 * v15) - v41) << v181;
          if (v43 >= 1)
          {
            signed int v44 = &v26[2 * v37 + 2 * v42];
            uint64_t v45 = ((*(__int16 *)(v180 + 2 * v15) - v41) << v181);
            do
            {
              int v36 = celt_lcg_rand(v36);
              *(_WORD *)signed int v44 = v36 >> 20;
              v44 += 2;
              --v45;
            }
            while (v45);
          }
          renormalise_vector((__int16 *)&v26[2 * v42 + 2 * v40], v43, 0x7FFF);
        }
        while (v15 != v39);
      }
      int v38 = v178 + 1;
      LODWORD(v4) = v179;
      v37 += v179;
      int v9 = v167;
      uint64_t v15 = v171;
    }
    while (v178 + 1 != v167);
  }
  int v46 = v175;
  v175[10] = v36;
  char v47 = v181;
  int v48 = v157;
  int v49 = v168;
  denormalise_bands((uint64_t)v161, (uint64_t)v26, (uint64_t)v157, (uint64_t)v170, v15, v168, v9, 1 << v181);
  int v50 = 0;
  int v51 = *(__int16 *)(v180 + 2 * v49) << v47;
  int v52 = v158;
  int v53 = (int)v4 / v158;
  uint64_t v54 = v173;
  int v55 = v169;
  do
  {
    int v56 = v51;
    if (v52 != 1)
    {
      if (v51 >= v53) {
        int v56 = v53;
      }
      else {
        int v56 = v51;
      }
    }
    if (v56 < (int)v4) {
      bzero(&v48[v56 + v50], 4 * (~v56 + v4) + 4);
    }
    v50 += v4;
    --v55;
  }
  while (v55);
  size_t v57 = 4 * (((int)v176 >> 1) - (int)v4 + 2048);
  int v58 = (void **)v185;
  uint64_t v59 = v174;
  do
  {
    int v60 = (char *)*v58++;
    memmove(v60, &v60[4 * v59], v57);
    --v54;
  }
  while (v54);
  int v61 = v161;
  compute_inv_mdcts(v161, 0, (uint64_t)v48, (uint64_t)v184, v9, v181);
  int v14 = v172;
LABEL_133:
  uint64_t result = deemphasis((uint64_t)v184, v159, v4, v9, v52, (__int16 *)v61 + 8, (uint64_t)(v46 + 19), v48);
  v46[13] = v14 + 1;
  return result;
}

unsigned int *compute_inv_mdcts(unsigned int *result, unsigned int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = result;
  uint64_t v7 = result[1];
  signed int v8 = result[10];
  if (a2)
  {
    int v9 = result[8];
  }
  else
  {
    v8 <<= a6;
    int v9 = result[8] - a6;
    a2 = 1;
  }
  int v20 = 0;
  uint64_t v10 = 0;
  if (a5 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = a5;
  }
  uint64_t v19 = v11;
  uint64_t v12 = 4 * v8;
  int v18 = v8 * a2;
  uint64_t v13 = a2;
  uint64_t v21 = a4;
  do
  {
    if ((int)v13 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (int *)(a3 + 4 * v20);
      uint64_t v16 = v13;
      do
      {
        uint64_t result = (unsigned int *)clt_mdct_backward((int *)v6 + 18, v15, *(void *)(a4 + 8 * v10) + v14, *((void *)v6 + 8), v7, v9, v13);
        a4 = v21;
        v14 += v12;
        ++v15;
        --v16;
      }
      while (v16);
    }
    ++v10;
    v20 += v18;
  }
  while (v10 != v19);
  return result;
}

uint64_t deemphasis(uint64_t result, _WORD *a2, int a3, int a4, int a5, __int16 *a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v8 = 0;
  int v9 = 0;
  int v10 = *a6;
  int v11 = 2 * v10;
  if (a4 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = a4;
  }
  uint64_t v13 = 2 * a4;
  do
  {
    int v14 = *(_DWORD *)(a7 + 4 * v8);
    uint64_t v15 = *(int **)(result + 8 * v8);
    if (a5 <= 1)
    {
      uint64_t v20 = a3;
      uint64_t v21 = a2;
      if (a3 >= 1)
      {
        do
        {
          int v22 = *v15++;
          int v23 = v22 + v14;
          int v14 = v11 * ((v22 + v14) >> 16) + (((unsigned __int16)(v22 + v14) * v10) >> 15);
          int v24 = (v23 + 2048) >> 12;
          if (v24 <= -32768) {
            int v24 = -32768;
          }
          if (v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          *uint64_t v21 = v24;
          uint64_t v21 = (_WORD *)((char *)v21 + v13);
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      if (a3 >= 1)
      {
        uint64_t v16 = a3;
        int v17 = a8;
        do
        {
          int v18 = *v15++;
          int v19 = v18 + v14;
          int v14 = v11 * ((v18 + v14) >> 16) + (((unsigned __int16)(v18 + v14) * v10) >> 15);
          *v17++ = v19;
          --v16;
        }
        while (v16);
      }
      int v9 = 1;
    }
    *(_DWORD *)(a7 + 4 * v8) = v14;
    if (v9 && a3 / a5 >= 1)
    {
      uint64_t v25 = (a3 / a5);
      int v26 = a8;
      uint64_t v27 = a2;
      do
      {
        int v28 = (*v26 + 2048) >> 12;
        if (v28 <= -32768) {
          int v28 = -32768;
        }
        if (v28 >= 0x7FFF) {
          LOWORD(v28) = 0x7FFF;
        }
        *uint64_t v27 = v28;
        uint64_t v27 = (_WORD *)((char *)v27 + v13);
        v26 += a5;
        --v25;
      }
      while (v25);
    }
    ++v8;
    ++a2;
  }
  while (v8 != v12);
  return result;
}

uint64_t opus_custom_decoder_ctl(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  uint64_t result = 4294967291;
  switch(a2)
  {
    case 10007:
      if (!a9) {
        goto LABEL_29;
      }
      uint64_t result = 0;
      *a9 = a1[11];
      a1[11] = 0;
      break;
    case 10008:
      if ((a9 - 3) < 0xFFFFFFFE) {
        goto LABEL_29;
      }
      uint64_t result = 0;
      a1[4] = a9;
      break;
    case 10009:
    case 10011:
    case 10013:
    case 10014:
      return result;
    case 10010:
      if ((a9 & 0x80000000) != 0 || (int)a9 >= *(_DWORD *)(*(void *)a1 + 8)) {
        goto LABEL_29;
      }
      uint64_t result = 0;
      a1[6] = a9;
      break;
    case 10012:
      if ((int)a9 < 1 || (int)a9 > *(_DWORD *)(*(void *)a1 + 8)) {
        goto LABEL_29;
      }
      uint64_t result = 0;
      a1[7] = a9;
      break;
    case 10015:
      if (a9)
      {
        uint64_t result = 0;
        *(void *)a9 = *(void *)a1;
      }
      else
      {
LABEL_29:
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    case 10016:
      uint64_t result = 0;
      a1[8] = a9;
      break;
    default:
      switch(a2)
      {
        case 4027:
          int v11 = a9;
          if (!a9) {
            goto LABEL_29;
          }
          uint64_t result = 0;
          int v12 = a1[2] / a1[5];
          goto LABEL_28;
        case 4028:
          int v14 = a1[2];
          int v13 = a1[3];
          int v15 = *(_DWORD *)(*(void *)a1 + 8);
          bzero(a1 + 10, (4 * *(_DWORD *)(*(void *)a1 + 4) + 8240) * v13 + 16 * v15 + 84 - 40);
          if (v15 >= 1)
          {
            LODWORD(v16) = 2 * v15;
            int v17 = &a1[12 * v13 + 21 + (v14 + 2048) * v13 + v15];
            int v18 = &v17[2 * v15];
            if (2 * v15 <= 1) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = v16;
            }
            do
            {
              *v18++ = -28672;
              *v17++ = -28672;
              --v16;
            }
            while (v16);
          }
          return 0;
        case 4031:
          int v11 = a9;
          if (!a9) {
            goto LABEL_29;
          }
          uint64_t result = 0;
          int v12 = a1[10];
          goto LABEL_28;
        case 4033:
          int v11 = a9;
          if (!a9) {
            goto LABEL_29;
          }
          uint64_t result = 0;
          int v12 = a1[14];
LABEL_28:
          *int v11 = v12;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t quant_coarse_energy(uint64_t a1, int a2, int a3, int a4, uint64_t a5, char *a6, unsigned int a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, int a12, int a13, int *a14, int a15, int a16, int a17)
{
  uint64_t v82 = a11;
  int32x4_t v83 = a6;
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v72 = a14;
  if (a13)
  {
    int v69 = *a14;
    BOOL v18 = 1;
  }
  else
  {
    int v19 = (a3 - a2) * a10;
    int v69 = *a14;
    BOOL v18 = v69 > 2 * v19 && v19 < a12;
    if (a15) {
      BOOL v18 = 0;
    }
  }
  BOOL v74 = v18;
  uint64_t v20 = 0;
  int v21 = 0;
  unsigned int v81 = a7;
  int v68 = a16 * a7;
  unsigned int v67 = a10 << 9;
  uint64_t v22 = *(int *)(a1 + 8);
  if (a10 <= 1) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = a10;
  }
  int v24 = &v83[2 * a2];
  uint64_t v25 = 2 * v22;
  uint64_t v79 = a5;
  int v26 = (__int16 *)(a5 + 2 * a2);
  do
  {
    if (a2 < a4)
    {
      uint64_t v27 = v26;
      int v28 = v24;
      uint64_t v29 = a4 - (uint64_t)a2;
      do
      {
        int v30 = *v27++;
        int v31 = v30 >> 3;
        int v32 = *(__int16 *)v28;
        v28 += 2;
        v21 += (v31 - (v32 >> 3)) * (v31 - (v32 >> 3));
        --v29;
      }
      while (v29);
    }
    ++v20;
    v24 += v25;
    int v26 = (__int16 *)((char *)v26 + v25);
  }
  while (v20 != v23);
  uint64_t v80 = a1;
  int8x16_t v73 = (void *)a8;
  int v33 = v21 >> 14;
  if (v33 >= 200) {
    int v33 = 200;
  }
  unsigned int v71 = v33;
  uint64_t v34 = (long long *)(a9 + 32);
  uint64_t v35 = *(unsigned int *)(a9 + 28);
  unsigned int v36 = *(_DWORD *)(a9 + 24) + __clz(*(_DWORD *)(a9 + 32));
  int v78 = a3;
  int v37 = a12 << 7;
  if (a12 << 7 >= 0x4000) {
    int v37 = 0x4000;
  }
  int v76 = v36 - 32;
  unsigned int v38 = v36 - 29;
  if (a3 - a2 <= 10) {
    int v37 = 0x4000;
  }
  int v77 = a17;
  if (a17) {
    int v37 = 3;
  }
  int v75 = v37;
  *(_OWORD *)uint64_t v90 = *(_OWORD *)a9;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a9 + 12);
  uint64_t v89 = *(void *)(a9 + 48);
  long long v88 = *v34;
  size_t v39 = 2 * (int)v22 * a10;
  int v40 = (char *)&v61 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v40, v39);
  bzero(v40, v39);
  memcpy(v40, v83, v39);
  BOOL v41 = v38 <= v81 && a15 != 0;
  BOOL v42 = v74 && v38 <= v81;
  int v43 = (void *)(int)v82;
  if (v41 || v42)
  {
    uint64_t v65 = (void *)(int)v82;
    uint64_t v44 = v80;
    int v45 = quant_coarse_energy_impl(v80, a2, v78, v79, (uint64_t)v40, v81, v76, (uint64_t)&e_prob_model + 84 * (int)v82 + 42, (uint64_t)v40, a9, a10, v82, 1, v75, v77);
    if (v42)
    {
      memcpy(v83, v40, 2 * *(_DWORD *)(v44 + 8) * a10);
      size_t v46 = 2 * *(_DWORD *)(v44 + 8) * a10;
      char v47 = v73;
      int v48 = v40;
      goto LABEL_39;
    }
    int v70 = v45;
    BOOL v74 = v41;
    uint64_t v66 = v40;
    int v43 = v65;
  }
  else
  {
    BOOL v74 = v41;
    uint64_t v66 = v40;
    int v70 = 0;
  }
  signed int v62 = ec_tell_frac(a9);
  uint64_t v49 = *(void *)a9;
  long long v84 = *(_OWORD *)(a9 + 8);
  int v50 = *(_DWORD *)(a9 + 28);
  int v85 = *(_DWORD *)(a9 + 24);
  long long v86 = *v34;
  uint64_t v87 = *(void *)(a9 + 48);
  uint64_t v64 = v49;
  int v51 = (void *)(v49 + v35);
  int v63 = v50;
  size_t v52 = (v50 - v35);
  int v53 = (char *)&v61 - ((v52 + 15) & 0x1FFFFFFF0);
  bzero(v53, v52);
  uint64_t v65 = v51;
  memcpy(v53, v51, v52);
  *(_OWORD *)a9 = *(_OWORD *)v90;
  *(_OWORD *)(a9 + 12) = *(_OWORD *)&v90[12];
  *(_DWORD *)(a9 + 28) = v35;
  *uint64_t v34 = v88;
  *(void *)(a9 + 48) = v89;
  uint64_t v54 = (uint64_t)v73;
  uint64_t result = quant_coarse_energy_impl(v80, a2, v78, v79, (uint64_t)v83, v81, v76, (uint64_t)&e_prob_model + 84 * (int)v43, (uint64_t)v73, a9, a10, v82, 0, v75, v77);
  if (!v74
    || v70 >= (int)result
    && (v70 != result || (v59 = v68 * v69 / v67, uint64_t result = ec_tell_frac(a9), (int)(result + v59) <= v62)))
  {
    int v60 = (__int16)((pred_coef[(void)v43] * pred_coef[(void)v43]) >> 15);
    size_t v57 = v72;
    unsigned int v58 = v71 + ((*v72 >> 15) & 0xFFFFFFFE) * v60 + ((v60 * (unsigned __int16)*v72) >> 15);
    goto LABEL_43;
  }
  *(void *)a9 = v64;
  *(_OWORD *)(a9 + 8) = v84;
  *(_DWORD *)(a9 + 24) = v85;
  *(_DWORD *)(a9 + 28) = v63;
  *uint64_t v34 = v86;
  *(void *)(a9 + 48) = v87;
  memcpy(v65, v53, v52);
  uint64_t v56 = v80;
  memcpy(v83, v40, 2 * *(_DWORD *)(v80 + 8) * a10);
  size_t v46 = 2 * *(_DWORD *)(v56 + 8) * a10;
  char v47 = (void *)v54;
  int v48 = v66;
LABEL_39:
  uint64_t result = (uint64_t)memcpy(v47, v48, v46);
  size_t v57 = v72;
  unsigned int v58 = v71;
LABEL_43:
  *size_t v57 = v58;
  return result;
}

uint64_t quant_coarse_energy_impl(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, int a15)
{
  v60[1] = *MEMORY[0x263EF8340];
  v60[0] = 0;
  int v51 = a2;
  if (a7 + 3 <= a6)
  {
    ec_enc_bit_logp((uint64_t *)a10, a13, 3);
    a2 = v51;
  }
  if (a13)
  {
    int v55 = 0;
    int v56 = 4915;
  }
  else
  {
    int v55 = pred_coef[a12];
    int v56 = beta_coef[a12];
  }
  if (a2 >= a3)
  {
    unsigned int v18 = 0;
    goto LABEL_66;
  }
  unsigned int v18 = 0;
  int v54 = a6 + 32;
  int v47 = a3;
  if (a11 <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = a11;
  }
  uint64_t v53 = v19;
  int v20 = *(_DWORD *)(a1 + 8);
  int v21 = a2;
  do
  {
    uint64_t v22 = 0;
    int v52 = 3 * a11 * (v21 - a3);
    if (a15) {
      BOOL v23 = v21 <= 1;
    }
    else {
      BOOL v23 = 1;
    }
    int v24 = !v23;
    if (v21 >= 20) {
      int v25 = 20;
    }
    else {
      int v25 = v21;
    }
    uint64_t v49 = (2 * v25) | 1;
    uint64_t v50 = 2 * v25;
    do
    {
      int v26 = v21 + v20 * v22;
      int v27 = *(__int16 *)(a4 + 2 * v26);
      int v28 = *(__int16 *)(a5 + 2 * v26);
      if (v28 <= -9216) {
        int v29 = -9216;
      }
      else {
        int v29 = v28;
      }
      int v30 = *((_DWORD *)v60 + v22);
      int v31 = v30 + ((v55 * v29 + 128) >> 8);
      int v32 = (v27 << 7) - v31;
      int v33 = (v32 + 0x10000) >> 17;
      int v59 = v33;
      if (v32 <= -65537)
      {
        int v34 = v28 - a14;
        if (v34 <= -28672) {
          LOWORD(v34) = -28672;
        }
        BOOL v35 = __OFSUB__((__int16)v34, v27);
        int v36 = (__int16)v34 - v27;
        if (!((v36 < 0) ^ v35 | (v36 == 0)))
        {
          int v33 = (v33 + (v36 >> 10)) & ((v33 + (v36 >> 10)) >> 31);
          int v59 = v33;
        }
      }
      signed int v37 = v54 - *(_DWORD *)(a10 + 24) - __clz(*(_DWORD *)(a10 + 32));
      int v38 = v33;
      if (v21 != a2)
      {
        int v39 = v37 + v52;
        BOOL v40 = v37 + v52 <= 29 && v39 <= 23;
        int v38 = v33;
        if (v40)
        {
          int v38 = v33 >= 1 ? 1 : v33;
          int v59 = v38;
          if (v39 <= 15)
          {
            if (v38 < 0) {
              int v38 = -1;
            }
            int v59 = v38;
          }
        }
      }
      if (v24)
      {
        v38 &= v38 >> 31;
        int v59 = v38;
      }
      if (v37 >= 15)
      {
        ec_laplace_encode((uint64_t *)a10, &v59, *(unsigned __int8 *)(a8 + v50) << 7, *(unsigned __int8 *)(a8 + v49) << 6);
LABEL_55:
        a2 = v51;
        goto LABEL_56;
      }
      if (v37 >= 2)
      {
        if (v38 >= 1) {
          int v41 = 1;
        }
        else {
          int v41 = v38;
        }
        if (v41 < 0) {
          int v41 = -1;
        }
        int v59 = v41;
        ec_enc_icdf((uint64_t *)a10, (2 * v41) ^ (v41 >> 31), (uint64_t)small_energy_icdf, 2);
        goto LABEL_55;
      }
      if (v37 == 1)
      {
        int v59 = v38 & (v38 >> 31);
        ec_enc_bit_logp((uint64_t *)a10, -v59, 1);
        goto LABEL_55;
      }
      int v59 = -1;
LABEL_56:
      int v42 = v59;
      int v20 = *(_DWORD *)(a1 + 8);
      int v43 = v21 + v20 * v22;
      *(_WORD *)(a9 + 2 * v43) = ((v32 + 64) >> 7) - ((_WORD)v59 << 10);
      int v44 = v33 - v42;
      if (v33 - v42 < 0) {
        int v44 = v42 - v33;
      }
      v18 += v44;
      int v45 = v31 + (v42 << 17);
      if (v45 <= -3670016) {
        int v45 = -3670016;
      }
      *(_WORD *)(a5 + 2 * v43) = (v45 + 64) >> 7;
      *((_DWORD *)v60 + v22++) = v30 + (v42 << 17) - v56 * (__int16)(4 * v42);
    }
    while (v53 != v22);
    ++v21;
    a3 = v47;
  }
  while (v21 != v47);
LABEL_66:
  if (a15) {
    return 0;
  }
  else {
    return v18;
  }
}

uint64_t *quant_fine_energy(uint64_t *result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8)
{
  if (a2 < a3)
  {
    int v12 = result;
    if (a8 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = a8;
    }
    uint64_t v14 = a2;
    do
    {
      int v15 = *(_DWORD *)(a6 + 4 * v14);
      if (v15 >= 1)
      {
        int v16 = 0;
        int v17 = 0x10000 << v15 >> 16;
        int v18 = *((_DWORD *)v12 + 2);
        do
        {
          int v19 = (*(__int16 *)(a5 + 2 * (v14 + v18 * v16)) + 512) >> (10 - v15);
          if (v19 >= v17) {
            int v19 = v17 - 1;
          }
          int v20 = v19 & ~(v19 >> 31);
          uint64_t result = ec_enc_bits(a7, v20, v15);
          int v15 = *(_DWORD *)(a6 + 4 * v14);
          int v18 = *((_DWORD *)v12 + 2);
          uint64_t v21 = v14 + v18 * v16;
          unsigned int v22 = (((v20 << 10) | 0x200u) >> v15) - 512;
          *(_WORD *)(a4 + 2 * v21) += v22;
          *(_WORD *)(a5 + 2 * v21) -= v22;
          ++v16;
        }
        while (v13 != v16);
      }
      ++v14;
    }
    while (v14 != a3);
  }
  return result;
}

uint64_t *quant_energy_finalise(uint64_t *result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t *a9, int a10)
{
  int v13 = result;
  int v14 = 0;
  int v15 = a10;
  if (a10 <= 1) {
    int v16 = 1;
  }
  else {
    int v16 = a10;
  }
  uint64_t v23 = a2;
  uint64_t v17 = a3;
  char v18 = 1;
  uint64_t v28 = a7;
  uint64_t v27 = a3;
  do
  {
    char v26 = v18;
    if (a2 < a3 && a8 >= v15)
    {
      uint64_t v19 = v23;
      int v29 = v14;
      do
      {
        if (*(int *)(a6 + 4 * v19) <= 7 && *(_DWORD *)(a7 + 4 * v19) == v14)
        {
          int v30 = a8;
          int v20 = 0;
          int v21 = *((_DWORD *)v13 + 2);
          do
          {
            unsigned int v22 = *(unsigned __int16 *)(a5 + 2 * (v19 + v21 * v20));
            uint64_t result = ec_enc_bits(a9, (v22 >> 15) ^ 1, 1);
            int v21 = *((_DWORD *)v13 + 2);
            *(_WORD *)(a4 + 2 * (v19 + v21 * v20++)) += (int)((~(v22 >> 5) & 0x400) - 512) >> (*(unsigned char *)(a6 + 4 * v19)
                                                                                             + 1);
          }
          while (v16 != v20);
          int v14 = v29;
          a8 = v30 - v16;
          a7 = v28;
          int v15 = a10;
          uint64_t v17 = v27;
        }
        ++v19;
      }
      while (v19 < v17 && a8 >= v15);
    }
    char v18 = 0;
    int v14 = 1;
  }
  while ((v26 & 1) != 0);
  return result;
}

uint64_t unquant_coarse_energy(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  int v10 = a2;
  uint64_t v27 = result;
  v28[1] = *MEMORY[0x263EF8340];
  v28[0] = 0;
  if (a5)
  {
    int v25 = 0;
    int v26 = 4915;
  }
  else
  {
    int v25 = pred_coef[a8];
    int v26 = beta_coef[a8];
  }
  if (a2 < a3)
  {
    int v11 = (char *)&e_prob_model + 84 * a8 + 42 * a5;
    int v12 = 8 * *(_DWORD *)(a6 + 8) + 32;
    if (a7 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = a7;
    }
    do
    {
      uint64_t v14 = 0;
      if (v10 >= 20) {
        int v15 = 20;
      }
      else {
        int v15 = v10;
      }
      uint64_t v23 = (2 * v15) | 1;
      uint64_t v24 = 2 * v15;
      do
      {
        signed int v16 = v12 - *(_DWORD *)(a6 + 24) - __clz(*(_DWORD *)(a6 + 32));
        if (v16 < 15)
        {
          if (v16 < 2)
          {
            if (v16 == 1) {
              uint64_t result = -ec_dec_bit_logp(a6, 1);
            }
            else {
              uint64_t result = 0xFFFFFFFFLL;
            }
          }
          else
          {
            int v17 = ec_dec_icdf(a6, small_energy_icdf, 2);
            uint64_t result = -(v17 & 1) ^ (v17 >> 1);
          }
        }
        else
        {
          uint64_t result = ec_laplace_decode((uint64_t *)a6, v11[v24] << 7, v11[v23] << 6);
        }
        int v18 = v10 + *(_DWORD *)(v27 + 8) * v14;
        int v19 = *(__int16 *)(a4 + 2 * v18);
        if (v19 <= -9216) {
          int v19 = -9216;
        }
        int v20 = *((_DWORD *)v28 + v14) + (result << 17);
        int v21 = v20 + ((v25 * v19 + 128) >> 8);
        if (v21 <= -3670016) {
          int v21 = -3670016;
        }
        *(_WORD *)(a4 + 2 * v18) = (v21 + 64) >> 7;
        *((_DWORD *)v28 + v14++) = v20 - v26 * (__int16)(4 * result);
      }
      while (v13 != v14);
      ++v10;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t unquant_fine_energy(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  if (a2 < a3)
  {
    uint64_t v11 = result;
    if (a7 <= 1) {
      int v12 = 1;
    }
    else {
      int v12 = a7;
    }
    uint64_t v13 = a2;
    do
    {
      signed int v14 = *(_DWORD *)(a5 + 4 * v13);
      if (v14 >= 1)
      {
        for (int i = 0; i != v12; ++i)
        {
          uint64_t result = ec_dec_bits(a6, v14);
          signed int v14 = *(_DWORD *)(a5 + 4 * v13);
          uint64_t v16 = v13 + *(int *)(v11 + 8) * (uint64_t)i;
          *(_WORD *)(a4 + 2 * v16) = *(_WORD *)(a4 + 2 * v16) + (((result << 10) | 0x200) >> v14) - 512;
        }
      }
      ++v13;
    }
    while (v13 != a3);
  }
  return result;
}

uint64_t unquant_energy_finalise(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8, int a9)
{
  uint64_t v14 = result;
  int v15 = 0;
  if (a9 <= 1) {
    int v16 = 1;
  }
  else {
    int v16 = a9;
  }
  uint64_t v22 = a2;
  uint64_t v17 = a3;
  char v18 = 1;
  uint64_t v26 = a3;
  do
  {
    char v25 = v18;
    if (a2 < a3 && a7 >= a9)
    {
      uint64_t v19 = v22;
      int v27 = v15;
      do
      {
        if (*(int *)(a5 + 4 * v19) <= 7 && *(_DWORD *)(a6 + 4 * v19) == v15)
        {
          for (int i = 0; i != v16; ++i)
          {
            uint64_t result = ec_dec_bits(a8, 1u);
            uint64_t v21 = v19 + *(int *)(v14 + 8) * (uint64_t)i;
            *(_WORD *)(a4 + 2 * v21) += ((__int16)((_WORD)result << 10) - 512) >> (*(unsigned char *)(a5 + 4 * v19) + 1);
          }
          a7 -= v16;
          uint64_t v17 = v26;
          int v15 = v27;
        }
        ++v19;
      }
      while (v19 < v17 && a7 >= a9);
    }
    char v18 = 0;
    int v15 = 1;
  }
  while ((v25 & 1) != 0);
  return result;
}

uint64_t amp2Log2(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v7 = 0;
  size_t v22 = 2 * (~a2 + a3) + 2;
  uint64_t v23 = a2;
  if (a6 <= 1) {
    int v8 = 1;
  }
  else {
    int v8 = a6;
  }
  uint64_t v26 = a2;
  uint64_t v24 = result;
  int v25 = a2;
  int v21 = a3;
  do
  {
    if (a2 >= 1)
    {
      int v9 = *(_DWORD *)(result + 8) * v7;
      uint64_t v10 = v26;
      uint64_t v11 = (int *)(a4 + 4 * v9);
      int v12 = (_WORD *)(a5 + 2 * v9);
      uint64_t v13 = eMeans;
      do
      {
        int v14 = *v11++;
        signed int v15 = 4 * v14;
        if (4 * v14)
        {
          unsigned int v16 = __clz(v15) ^ 0x1F;
          int v17 = v15 >> (v16 - 15);
          int v18 = v15 << (15 - v16);
          if (v16 > 0xF) {
            int v18 = v17;
          }
          int v19 = (v16 << 10)
              + (((unsigned __int16)((((((unsigned __int16)(((-2802
                                                                                        * (((v18 << 16) + 0x40000000) >> 16)) >> 16)
                                                                        + 2545)
                                                     * (((v18 << 16) + 0x40000000) >> 15)
                                                     - 341901312) >> 16)
                                                   * (((v18 << 16) + 0x40000000) >> 16)) >> 15)
                                   + 15746)
                * (((v18 << 16) + 0x40000000) >> 15)
                - 445186048) >> 20)
              - 13312;
        }
        else
        {
          LOWORD(v19) = -32767;
        }
        __int16 v20 = *v13++;
        *v12++ = v19 - (v20 << 6);
        --v10;
      }
      while (v10);
    }
    if (a2 < a3)
    {
      memset_pattern16((void *)(a5 + 2 * (v23 + *(int *)(result + 8) * (uint64_t)v7)), &unk_220773570, v22);
      uint64_t result = v24;
      a2 = v25;
      a3 = v21;
    }
    ++v7;
  }
  while (v7 != v8);
  return result;
}

uint64_t alg_quant(__int16 *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  int v56 = a6;
  uint64_t v57 = *MEMORY[0x263EF8340];
  size_t v11 = 2 * a2;
  int v12 = &v54[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v12, v11);
  size_t v13 = 4 * a2;
  int v14 = &v54[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v14, v13);
  bzero(v12, v11);
  exp_rotation((uint64_t)a1, a2, 1, a5, a3, a4);
  uint64_t v15 = 0;
  if (a2 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = a2;
  }
  do
  {
    int v17 = a1[v15];
    if (v17 <= 0)
    {
      a1[v15] = -(__int16)v17;
      __int16 v18 = -1;
    }
    else
    {
      __int16 v18 = 1;
    }
    *(_WORD *)&v12[2 * v15] = v18;
    v14[v15] = 0;
    *(_WORD *)&v12[2 * v15++] = 0;
  }
  while (v16 != v15);
  if (a3 <= a2 >> 1)
  {
    int v24 = 0;
    int v25 = 0;
    int v31 = a3;
  }
  else
  {
    uint64_t v19 = 0;
    signed int v20 = 0;
    do
      v20 += a1[v19++];
    while (v16 != v19);
    int v55 = a5;
    if (v20 <= a3)
    {
      signed int v20 = 0x4000;
      *a1 = 0x4000;
      if (a2 <= 2) {
        int v21 = 2;
      }
      else {
        int v21 = a2;
      }
      bzero(a1 + 1, 2 * (v21 - 1));
    }
    int v22 = celt_rcp(v20);
    unsigned __int16 v23 = celt_rcp(v20);
    int v24 = 0;
    LOWORD(v25) = 0;
    int v26 = (int)((v22 & 0xFFFF0000 | v23) * (__int16)(a3 - 1)) >> 16;
    uint64_t v27 = v16;
    uint64_t v28 = a1;
    int v29 = v14;
    int v30 = v12;
    int v31 = a3;
    do
    {
      int v32 = *v28++;
      int v33 = (v26 * v32) >> 15;
      *v29++ = v33;
      int v25 = (__int16)v33 * (__int16)v33 + (__int16)v25;
      v24 += (__int16)v33 * v32;
      *v30++ = 2 * v33;
      v31 -= v33;
      --v27;
    }
    while (v27);
    a5 = v55;
  }
  if (v31 <= a2 + 3)
  {
    if (v31 >= 1)
    {
      for (int i = 0; i != v31; ++i)
      {
        uint64_t v35 = 0;
        int v36 = 0;
        __int16 v37 = 0;
        unsigned int v38 = 32 - __clz(a3 - v31 + 1 + i);
        int v39 = v25 + 1;
        int v40 = -32767;
        do
        {
          int v41 = (v24 + a1[v35]) >> v38;
          int v42 = (2 * (__int16)v41 * (__int16)v41) >> 16;
          if (v42 * v37 > v40 * (__int16)(*(_WORD *)&v12[2 * v35] + v39))
          {
            int v36 = v35;
            int v40 = v42;
            __int16 v37 = *(_WORD *)&v12[2 * v35] + v39;
          }
          ++v35;
        }
        while (v16 != v35);
        int v43 = *(unsigned __int16 *)&v12[2 * v36];
        v24 += a1[v36];
        *(_WORD *)&v12[2 * v36] = v43 + 2;
        int v25 = v43 + v39;
        ++v14[v36];
      }
    }
  }
  else
  {
    *v14 += v31;
  }
  for (uint64_t j = 0; j != v16; ++j)
  {
    int v45 = *(__int16 *)&v12[2 * j];
    a1[j] *= *(_WORD *)&v12[2 * j];
    if (v45 < 0) {
      v14[j] = -v14[j];
    }
  }
  encode_pulses((uint64_t)v14, a2, a3, v56);
  if (a5 < 2) {
    return 1;
  }
  uint64_t v47 = 0;
  LODWORD(result) = 0;
  int v48 = a2 / a5;
  if (a2 / a5 <= 1) {
    uint64_t v49 = 1;
  }
  else {
    uint64_t v49 = v48;
  }
  uint64_t v50 = 4 * v48;
  do
  {
    int v51 = v14;
    uint64_t v52 = v49;
    do
    {
      int v53 = *v51++;
      uint64_t result = ((v53 != 0) << v47) | result;
      --v52;
    }
    while (v52);
    ++v47;
    int v14 = (_DWORD *)((char *)v14 + v50);
  }
  while (v47 != a5);
  return result;
}

uint64_t exp_rotation(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  if (a2 > 2 * a5 && a6)
  {
    int v9 = (__int16 *)result;
    int v10 = (a2 << 16 >> 1) - (__int16)a2;
    signed int v11 = a2 + exp_rotation_SPREAD_FACTOR[a6 - 1] * a5;
    unsigned int v12 = (v10 >> 16) * (celt_rcp(v11) >> 16);
    unsigned int v13 = (((unsigned __int16)celt_rcp(v11) * (v10 >> 16)) >> 15) + 2 * v12;
    int v14 = (__int16)(v13 + ((((int)celt_rcp(v11) >> 16) * (unsigned __int16)v10) >> 15));
    unsigned int v15 = (v14 * v14) >> 16;
    int v16 = celt_cos_norm(v15);
    uint64_t result = celt_cos_norm(v15 ^ 0x7FFF);
    int v17 = result;
    if (a2 >= 8 * a4)
    {
      int v18 = 0;
      int v19 = a4;
      do
      {
        int v20 = (a4 >> 2) + v19 * (v18 + 2);
        ++v18;
        v19 += a4;
      }
      while (v20 < a2);
    }
    else
    {
      int v18 = 0;
    }
    if (a4 >= 1)
    {
      int v21 = a2 / a4;
      uint64_t v22 = a4;
      while ((a3 & 0x80000000) == 0)
      {
        uint64_t result = (uint64_t)exp_rotation1(v9, v21, 1, v16, (__int16)-(__int16)v17);
        if (v18)
        {
          unsigned __int16 v23 = v9;
          int v24 = v21;
          int v25 = v18;
          int v26 = v17;
          int v27 = (__int16)-(__int16)v16;
LABEL_15:
          uint64_t result = (uint64_t)exp_rotation1(v23, v24, v25, v26, v27);
        }
        v9 += v21;
        if (!--v22) {
          return result;
        }
      }
      if (v18) {
        exp_rotation1(v9, v21, v18, v17, v16);
      }
      unsigned __int16 v23 = v9;
      int v24 = v21;
      int v25 = 1;
      int v26 = v16;
      int v27 = v17;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t alg_unquant(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  v37[1] = *MEMORY[0x263EF8340];
  size_t v14 = 4 * a2;
  unsigned int v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v15, v14);
  decode_pulses((int *)v15, a2, a3, a6);
  unsigned int v16 = 0;
  if (a2 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = a2;
  }
  uint64_t v18 = v17;
  int v19 = (__int16 *)v15;
  do
  {
    int v20 = *v19;
    v19 += 2;
    v16 += v20 * v20;
    --v18;
  }
  while (v18);
  unsigned int v21 = __clz(v16);
  int v22 = (int)(31 - v21) >> 1;
  char v23 = (31 - v21) & 0xFE;
  unsigned int v24 = v16 >> (v23 - 14);
  unsigned int v25 = v16 << (14 - v23);
  if (v21 >= 0x10) {
    __int16 v26 = v25;
  }
  else {
    __int16 v26 = v24;
  }
  int v27 = celt_rsqrt_norm(v26);
  for (uint64_t i = 0; i != v17; ++i)
    *(_WORD *)(a1 + 2 * i) = (int)(((1 << (v22 + 1)) >> 1)
                                 + *(__int16 *)&v15[4 * i] * ((2 * a7 * v27 + 0x8000) >> 16)) >> (v22 + 1);
  exp_rotation(a1, a2, -1, a5, a3, a4);
  if (a5 < 2) {
    return 1;
  }
  uint64_t v30 = 0;
  LODWORD(result) = 0;
  int v31 = a2 / a5;
  if (a2 / a5 <= 1) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = v31;
  }
  uint64_t v33 = 4 * v31;
  do
  {
    int v34 = (int *)v15;
    uint64_t v35 = v32;
    do
    {
      int v36 = *v34++;
      uint64_t result = ((v36 != 0) << v30) | result;
      --v35;
    }
    while (v35);
    ++v30;
    v15 += v33;
  }
  while (v30 != a5);
  return result;
}

uint64_t renormalise_vector(__int16 *a1, int a2, int a3)
{
  int v4 = a2;
  int v5 = a1;
  unsigned int v6 = 1;
  if (a2 >= 1)
  {
    int v7 = a2;
    int v8 = a1;
    do
    {
      int v9 = *v8++;
      v6 += v9 * v9;
      --v7;
    }
    while (v7);
  }
  unsigned int v10 = __clz(v6) ^ 0x1F;
  unsigned int v11 = v10 >> 1;
  unsigned int v12 = v6 >> (2 * (v10 >> 1) - 14);
  unsigned int v13 = v6 << (14 - 2 * (v10 >> 1));
  if (v10 <= 0xF) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = v12;
  }
  uint64_t result = celt_rsqrt_norm(v14);
  if (v4 >= 1)
  {
    do
    {
      __int16 *v5 = (int)(((2 << v11) >> 1) + ((2 * a3 * (int)result + 0x8000) >> 16) * *v5) >> (v11 + 1);
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t stereo_itheta(__int16 *a1, __int16 *a2, int a3, int a4)
{
  if (a3)
  {
    if (a4 >= 1)
    {
      uint64_t v4 = a4;
      LODWORD(v5) = 1;
      LODWORD(v6) = 1;
      do
      {
        int v8 = *a1++;
        int v7 = v8;
        int v9 = v8 >> 1;
        int v10 = *a2++;
        uint64_t v6 = (v6 + ((v10 >> 1) + (v7 >> 1)) * ((v10 >> 1) + (v7 >> 1)));
        uint64_t v5 = (v5 + (v9 - (v10 >> 1)) * (v9 - (v10 >> 1)));
        --v4;
      }
      while (v4);
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v6 = 1;
    uint64_t v5 = 1;
    goto LABEL_11;
  }
  if (a4 < 1) {
    goto LABEL_10;
  }
  uint64_t v11 = a4;
  LODWORD(v5) = 1;
  LODWORD(v6) = 1;
  do
  {
    int v13 = *a1++;
    int v12 = v13;
    int v14 = *a2++;
    uint64_t v6 = (v6 + v12 * v12);
    uint64_t v5 = (v5 + v14 * v14);
    --v11;
  }
  while (v11);
LABEL_11:
  __int16 v15 = celt_sqrt(v6);
  __int16 v16 = celt_sqrt(v5);
  signed int v17 = v16;
  if (v16 >= v15)
  {
    int v24 = v15 >> 1;
    int v25 = v24 * ((int)celt_rcp(v16) >> 16);
    int v26 = (((unsigned __int16)celt_rcp(v17) * v24) >> 15) + 2 * v25;
    int v27 = v26 + ((((int)celt_rcp(v17) >> 16) * ((v15 & 1) << 15)) >> 15);
    if (v27 >= 0x7FFF) {
      LOWORD(v27) = 0x7FFF;
    }
    int v23 = 25736
        - ((__int16)((((((((9872 * (__int16)v27 - 782663680) >> 16) * 2 * (__int16)v27 - 1343488) >> 16)
                      * 2
                      * (__int16)v27
                      + 2147450880) >> 16)
                    * (__int16)v27
                    + 0x4000) >> 15) >> 1);
  }
  else
  {
    char v18 = v16;
    int v19 = v16 >> 1;
    int v20 = v19 * ((int)celt_rcp(v15) >> 16);
    int v21 = (((unsigned __int16)celt_rcp(v15) * v19) >> 15) + 2 * v20;
    int v22 = v21 + ((((int)celt_rcp(v15) >> 16) * ((v18 & 1) << 15)) >> 15);
    if (v22 >= 0x7FFF) {
      LOWORD(v22) = 0x7FFF;
    }
    int v23 = (int)((((((((9872 * (__int16)v22 - 782663680) >> 16) * 2 * (__int16)v22 - 1343488) >> 16)
                               * 2
                               * (__int16)v22
                               + 2147450880) >> 16)
                             * (__int16)v22
                             + 0x4000) >> 15 << 16) >> 17;
  }
  return ((20861 * (__int16)v23) >> 15);
}

__int16 *exp_rotation1(__int16 *result, int a2, int a3, int a4, int a5)
{
  int v5 = a2 - a3;
  if (a2 - a3 >= 1)
  {
    uint64_t v6 = result;
    do
    {
      int v7 = *v6;
      int v8 = v6[a3];
      v6[a3] = (v7 * a5 + v8 * a4) >> 15;
      *v6++ = (v7 * a4 - v8 * a5) >> 15;
      --v5;
    }
    while (v5);
  }
  int v9 = ~(2 * a3) + a2;
  if (v9 >= 0)
  {
    int v10 = &result[v9];
    int v11 = a2 - 2 * a3;
    do
    {
      int v12 = *v10;
      int v13 = v10[a3];
      v10[a3] = (v12 * a5 + v13 * a4) >> 15;
      *v10-- = (v12 * a4 - v13 * a5) >> 15;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t isqrt32(unsigned int a1)
{
  LODWORD(result) = 0;
  int v3 = (int)(31 - __clz(a1)) >> 1;
  unsigned int v4 = 1 << v3;
  do
  {
    unsigned int v5 = (v4 + 2 * result) << v3;
    if (v5 <= a1)
    {
      unsigned int v6 = v4;
    }
    else
    {
      unsigned int v5 = 0;
      unsigned int v6 = 0;
    }
    a1 -= v5;
    uint64_t result = v6 + result;
    v4 >>= 1;
  }
  while (v3-- > 0);
  return result;
}

uint64_t frac_div32(int a1, unsigned int a2)
{
  char v2 = __clz(a2);
  char v3 = v2 - 2;
  char v4 = 2 - v2;
  if (a2 >> 30) {
    int v5 = a1 >> v4;
  }
  else {
    int v5 = a1 << v3;
  }
  int v6 = (int)a2 >> v4;
  int v7 = a2 << v3;
  if (a2 >> 30) {
    int v8 = v6;
  }
  else {
    int v8 = v7;
  }
  int v9 = (int)((celt_rcp((v8 + 0x8000) >> 16) << 13) + 0x8000) >> 16;
  signed int v10 = ((v5 >> 15) & 0xFFFFFFFE) * v9 + ((v9 * (unsigned __int16)v5) >> 15);
  int v11 = (unsigned __int16)(((v5 >> 15) & 0xFFFE) * v9 + ((v9 * (unsigned __int16)v5) >> 15)) * (v8 >> 16);
  int v12 = v10
      + 8
      * v9
      * ((((v5 + 2) >> 2) - 2 * (v8 >> 16) * (v10 >> 16) - ((((v10 >> 16) * (unsigned __int16)v8) >> 15) + (v11 >> 15))) >> 16)
      + 4
      * (((unsigned __int16)(((v5 + 2) >> 2)
                           - 2 * HIWORD(v8) * HIWORD(v10)
                           - ((((v10 >> 16) * (unsigned __int16)v8) >> 15)
                            + (v11 >> 15)))
        * v9) >> 15);
  unsigned int v13 = 4 * v12;
  if (v12 < -536870911) {
    unsigned int v13 = -2147483647;
  }
  if (v12 <= 0x1FFFFFFF) {
    return v13;
  }
  else {
    return 0x7FFFFFFFLL;
  }
}

uint64_t celt_rcp(signed int a1)
{
  unsigned int v1 = __clz(a1);
  int v2 = a1 >> (16 - v1);
  if (v1 >= 0x10) {
    LOWORD(v2) = a1 << (v1 - 16);
  }
  unsigned int v3 = (__int16)v2 ^ 0xFFFF8000;
  unsigned int v4 = ((int)(-30840 * v3 + 2021130240) >> 16)
     - (((__int16)((((-30840 * v3 + 2021130240) >> 16) ^ 0x8000)
                               + ((((int)(-30840 * v3 + 2021130240) >> 16) * v3) >> 15))
                     * ((int)(-30840 * v3 + 2021130240) >> 16)) >> 15);
  int v5 = (__int16)(v4
               - ((2 * (__int16)v4 * (__int16)((v4 ^ 0x8000) + (((__int16)v4 * v3) >> 15)) + 0x10000) >> 16));
  unsigned int v6 = v5 << (v1 - 15);
  unsigned int v7 = v5 >> (15 - v1);
  if (v1 <= 0xE) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t celt_rsqrt_norm(__int16 a1)
{
  unsigned int v1 = a1 ^ 0xFFFF8000;
  int v2 = 2 * v1 * (((int)(6713 * v1) >> 15) + 2147470158) + 1543831552;
  int v3 = (__int16)((2 * ((((__int16)(((v2 >> 16) * (v2 >> 16)) >> 15) * v1) >> 15) + (((v2 >> 16) * (v2 >> 16)) >> 15))) ^ 0x8000);
  return (__int16)(((((((24576 * v3 - 0x40000000) >> 16) * v3) >> 15) * (v2 >> 16)) >> 15)
                               + HIWORD(v2));
}

uint64_t celt_sqrt(uint64_t result)
{
  if (result)
  {
    if ((int)result <= 0x3FFFFFFF)
    {
      unsigned int v1 = __clz(result) ^ 0x1F;
      int v2 = (int)result >> (2 * (v1 >> 1) - 14);
      if (v1 <= 0xF) {
        LOWORD(v2) = result << (14 - 2 * (v1 >> 1));
      }
      int v3 = (int)(2
               * ((__int16)v2 ^ 0xFFFF8000)
               * (unsigned __int16)(((((int)(2
                                           * ((__int16)v2 ^ 0xFFFF8000)
                                           * (unsigned __int16)(((-1328 * ((__int16)v2 ^ 0xFFFF8000)) >> 16) + 1699)
                                           - 197328896) >> 16)
                                    * ((__int16)v2 ^ 0xFFFF8000)) >> 15)
                                  + 11561)
               + 1518796800) >> 16;
      if (v1 >= 0x1C) {
        return (v3 << ((v1 >> 1) - 14));
      }
      else {
        return (v3 >> (14 - (v1 >> 1)));
      }
    }
    else
    {
      return 0x7FFFLL;
    }
  }
  return result;
}

uint64_t celt_cos_norm(int a1)
{
  unsigned int v1 = a1 & 0x1FFFF;
  if ((a1 & 0x1FFFFu) > 0x10000) {
    unsigned int v1 = 0x20000 - (a1 & 0x1FFFF);
  }
  if ((v1 & 0x7FFF) != 0)
  {
    if (v1 >> 15)
    {
      int v5 = ((int)(-65536 * v1) >> 15) * -(__int16)v1 + 0x8000;
      int v6 = ((((2 * (v5 >> 16) * (unsigned __int16)(((2147483022 * (v5 >> 16) + 0x4000) >> 15) + 8277)
             - 501383168) >> 16)
           * (v5 >> 16)
           + 0x4000) >> 15)
         - (v5 >> 16);
      if (v6 < 0) {
        return (__int16)((v6 ^ 0x7FFF) + 1);
      }
      else {
        return -32767;
      }
    }
    else
    {
      signed int v2 = ((int)(((int)(2
                       * ((2 * v1 * v1 + 0x8000) >> 16)
                       * (unsigned __int16)(((2147483022 * ((2 * v1 * v1 + 0x8000) >> 16) + 0x4000) >> 15) + 8277)
                       - 501383168) >> 16)
                * ((2 * v1 * v1 + 0x8000) >> 16)
                + 0x4000) >> 15)
         - ((2 * v1 * v1 + 0x8000) >> 16);
      if (v2 < 0) {
        return (__int16)(v2 ^ 0x8000);
      }
      else {
        return 0x7FFF;
      }
    }
  }
  else
  {
    if ((v1 & 0x1FFFF) != 0) {
      __int16 v4 = -32767;
    }
    else {
      __int16 v4 = 0x7FFF;
    }
    if ((_WORD)v1) {
      return 0;
    }
    else {
      return v4;
    }
  }
}

void _celt_lpc(_WORD *a1, signed int *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  signed int v6 = *a2;
  if (a3 >= 1) {
    bzero(v25, 4 * a3);
  }
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = -4;
    do
    {
      if (v8 == (a3 & ~(a3 >> 31))) {
        break;
      }
      int v10 = 0;
      if (v8)
      {
        int v11 = v25;
        uint64_t v12 = v7;
        do
        {
          int v13 = *v11++;
          v10 += 2 * (v13 >> 16) * (*(signed int *)((char *)a2 + v12) >> 16)
               + (((unsigned __int16)*(signed int *)((char *)a2 + v12) * (v13 >> 16)) >> 15)
               + (((*(signed int *)((char *)a2 + v12) >> 16) * (unsigned __int16)v13) >> 15);
          v12 -= 4;
        }
        while (v12);
      }
      int v14 = -(int)frac_div32((a2[(v8 + 1)] + 8 * v10) & 0xFFFFFFF8, v6);
      v25[v8] = v14 >> 3;
      int v15 = v14 >> 16;
      if (v8)
      {
        unint64_t v16 = 0;
        int v17 = 2 * v15;
        int v14 = (unsigned __int16)v14;
        uint64_t v18 = v9;
        do
        {
          int v19 = v25[v16];
          int v20 = *(_DWORD *)((char *)v25 + v18);
          v25[v16] = v19
                   + v17 * (v20 >> 16)
                   + (((unsigned __int16)v20 * v15) >> 15)
                   + (((v20 >> 16) * (unsigned __int16)v14) >> 15);
          *(_DWORD *)((char *)v25 + v18) = v20
                                         + v17 * (v19 >> 16)
                                         + (((unsigned __int16)v19 * v15) >> 15)
                                         + (((v19 >> 16) * (unsigned __int16)v14) >> 15);
          ++v16;
          v18 -= 4;
        }
        while (v16 < (v8 + 1) >> 1);
      }
      else
      {
        int v17 = 2 * v15;
        int v14 = (unsigned __int16)v14;
      }
      int v21 = v17 * v15 + 2 * ((v15 * v14) >> 15);
      signed int v6 = v6
         - 2 * (v6 >> 16) * (v21 >> 16)
         - ((((v21 >> 16) * (unsigned __int16)v6) >> 15)
          + (((v21 & 0xFFFE) * (v6 >> 16)) >> 15));
      v7 += 4;
      v9 += 4;
      ++v8;
    }
    while (v6 >= *a2 >> 10);
  }
  if (a3 >= 1)
  {
    uint64_t v22 = a3;
    int v23 = v25;
    do
    {
      int v24 = *v23++;
      *a1++ = (v24 + 0x8000) >> 16;
      --v22;
    }
    while (v22);
  }
}

uint64_t celt_fir(__int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _WORD *a6)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  size_t v12 = 2 * a5;
  int v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v13, v12);
  size_t v14 = 2 * (a5 + (int)a4);
  int v53 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v53, v14);
  if (a5 >= 1)
  {
    int v20 = (_WORD *)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v21 = a5;
    do
      *v20++ = *(_WORD *)(a2 + 2 * (int)--v21);
    while (v21);
    uint64_t v22 = v53;
    uint64_t v23 = a5;
    do
      *v22++ = a6[(int)--v23];
    while (v23);
  }
  int v24 = a4 - 1;
  if ((int)a4 >= 1) {
    memcpy(&v53[v12], a1, 2 * a4);
  }
  if (a5 >= 1)
  {
    uint64_t v25 = a5;
    do
    {
      *a6++ = a1[v24--];
      --v25;
    }
    while (v25);
  }
  uint64_t v50 = a5;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  int v26 = 0;
  if ((int)a4 >= 4)
  {
    int v27 = a1 + 2;
    uint64_t v28 = (_WORD *)(a3 + 4);
    int v29 = (unsigned __int16 *)v53;
    do
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      *(int32x2_t *)&double v15 = xcorr_kernel((__int16 *)v13, v29, (int *)&v54, a5, v15, v16, v17, v18, v19);
      int v30 = HIDWORD(v54);
      int v31 = *(v27 - 2) + (((int)v54 + 2048) >> 12);
      if (v31 <= -32768) {
        int v31 = -32768;
      }
      if (v31 >= 0x7FFF) {
        LOWORD(v31) = 0x7FFF;
      }
      *(v28 - 2) = v31;
      int v32 = *(v27 - 1) + ((v30 + 2048) >> 12);
      if (v32 <= -32768) {
        int v32 = -32768;
      }
      if (v32 >= 0x7FFF) {
        LOWORD(v32) = 0x7FFF;
      }
      *(v28 - 1) = v32;
      int v33 = HIDWORD(v55);
      int v34 = *v27 + (((int)v55 + 2048) >> 12);
      if (v34 <= -32768) {
        int v34 = -32768;
      }
      if (v34 >= 0x7FFF) {
        LOWORD(v34) = 0x7FFF;
      }
      *uint64_t v28 = v34;
      int v35 = v27[1] + ((v33 + 2048) >> 12);
      if (v35 <= -32768) {
        int v35 = -32768;
      }
      if (v35 >= 0x7FFF) {
        LOWORD(v35) = 0x7FFF;
      }
      v28[1] = v35;
      v26 += 4;
      v27 += 4;
      v29 += 4;
      v28 += 4;
    }
    while ((int)a4 - 3 > v26);
  }
  uint64_t v37 = v51;
  uint64_t result = v52;
  uint64_t v38 = v50;
  if (v26 < (int)v52)
  {
    uint64_t v39 = v26;
    int v40 = &v53[2 * v26];
    do
    {
      if (a5 < 1)
      {
        int v41 = 0;
      }
      else
      {
        int v41 = 0;
        uint64_t v42 = v38;
        int v43 = (__int16 *)v13;
        int v44 = v40;
        do
        {
          int v46 = *v43++;
          int v45 = v46;
          int v47 = *(__int16 *)v44;
          v44 += 2;
          v41 += v47 * v45;
          --v42;
        }
        while (v42);
      }
      int v48 = a1[v39] + ((v41 + 2048) >> 12);
      if (v48 <= -32768) {
        int v48 = -32768;
      }
      if (v48 >= 0x7FFF) {
        LOWORD(v48) = 0x7FFF;
      }
      *(_WORD *)(v37 + 2 * v39++) = v48;
      v40 += 2;
    }
    while ((int)v39 < (int)result);
  }
  return result;
}

int32x2_t xcorr_kernel(__int16 *a1, unsigned __int16 *a2, int *a3, int a4, double a5, double a6, double a7, double a8, int32x2_t a9)
{
  __int32 v9 = *a2;
  __int16 v10 = a2[1];
  int v11 = a2 + 3;
  unsigned int v12 = a2[2];
  if (a4 < 4)
  {
    unsigned int v41 = 0;
    signed int v16 = 0;
  }
  else
  {
    int v13 = 0;
    int v14 = *a3;
    int v15 = a3[1];
    signed int v16 = a4 & 0xFFFFFFFC;
    int v18 = a3[2];
    int v17 = a3[3];
    do
    {
      int v19 = *a1;
      int v20 = (__int16)*v11;
      int v21 = v14 + v19 * (__int16)v9;
      int v22 = v15 + v19 * v10;
      int v23 = v18 + v19 * (__int16)v12;
      int v24 = v17 + v20 * v19;
      int v25 = a1[1];
      int v26 = (__int16)v11[1];
      __int32 v9 = v11[1];
      int v27 = v21 + v25 * v10;
      int v28 = v22 + v25 * (__int16)v12;
      int v29 = v23 + v25 * v20;
      int v30 = v24 + v26 * v25;
      int v31 = a1[2];
      int v32 = (__int16)v11[2];
      __int16 v10 = v11[2];
      int v33 = v27 + v31 * (__int16)v12;
      int v34 = v28 + v31 * v20;
      int v35 = v29 + v31 * v26;
      int v36 = v30 + v32 * v31;
      uint64_t v37 = a1 + 4;
      int v38 = a1[3];
      uint64_t v39 = (__int16 *)(v11 + 4);
      int v40 = (__int16)v11[3];
      unsigned int v12 = (unsigned __int16)v40;
      int v14 = v33 + v38 * v20;
      int v15 = v34 + v38 * v26;
      int v18 = v35 + v38 * v32;
      int v17 = v36 + v40 * v38;
      v13 += 4;
      a1 = v37;
      int v11 = (unsigned __int16 *)v39;
    }
    while (v13 < a4 - 3);
    unsigned int v41 = (unsigned __int16)v20;
    *a3 = v14;
    a3[1] = v15;
    int v11 = (unsigned __int16 *)v39;
    a1 = v37;
    a3[2] = v18;
    a3[3] = v17;
  }
  int v42 = v16 | 1;
  if (v16 < a4)
  {
    unsigned int v44 = *a1++;
    unsigned int v43 = v44;
    int v45 = *a3 + v44 * (__int16)v9;
    unsigned int v46 = *v11++;
    unsigned int v41 = v46;
    int v47 = a3[1] + v43 * v10;
    *a3 = v45;
    a3[1] = v47;
    int32x2_t result = vmla_s32(*(int32x2_t *)(a3 + 2), vdup_n_s32(v43), vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v46, v12), 0x10uLL), 0x10uLL));
    *((int32x2_t *)a3 + 1) = result;
  }
  int v49 = v16 | 2;
  if (v42 < a4)
  {
    unsigned int v51 = *a1++;
    unsigned int v50 = v51;
    int v52 = (__int16)*v11++;
    __int32 v9 = (unsigned __int16)v52;
    *a3 += v50 * v10;
    int32x2_t result = vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v41, v12), 0x10uLL), 0x10uLL);
    *(int32x2_t *)(a3 + 1) = vmla_s32(*(int32x2_t *)(a3 + 1), vdup_n_s32(v50), result);
    a3[3] += v52 * v50;
  }
  if (v49 < a4)
  {
    int32x2_t v53 = vdup_n_s32(*a1);
    a9.i32[0] = v9;
    a9.i16[2] = *v11;
    int32x2_t result = vshr_n_s32(vshl_n_s32(a9, 0x10uLL), 0x10uLL);
    int32x2_t v54 = vmla_s32(*(int32x2_t *)(a3 + 2), v53, result);
    *(int32x2_t *)a3 = vmla_s32(*(int32x2_t *)a3, v53, vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v41, v12), 0x10uLL), 0x10uLL));
    *((int32x2_t *)a3 + 1) = v54;
  }
  return result;
}

void celt_iir(_OWORD *a1, __int16 *a2, uint64_t a3, uint64_t a4, int a5, _WORD *a6)
{
  int v7 = a5;
  uint64_t v67 = *MEMORY[0x263EF8340];
  size_t v12 = 2 * a5;
  int v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v13, v12);
  uint64_t v14 = a4;
  int v15 = v7 + a4;
  size_t v16 = 2 * v15;
  int v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v17, v16);
  uint64_t v22 = v7;
  if (v7 < 1)
  {
    int v27 = 0;
  }
  else
  {
    int v23 = v13;
    uint64_t v24 = v7;
    do
      *v23++ = a2[(int)--v24];
    while (v24);
    int v25 = v17;
    uint64_t v26 = v7;
    do
      *v25++ = -a6[(int)--v26];
    while (v26);
    int v27 = v7;
  }
  if (v27 < v15) {
    bzero(&v17[2 * v27], 2 * (v15 + ~v27) + 2);
  }
  uint64_t v28 = v7;
  uint64_t v29 = v14;
  if ((int)v14 < 4)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v63 = v29;
    uint64_t v64 = a3;
    int v31 = (unsigned __int16 *)v17;
    unint64_t v65 = (v29 - 3);
    int v32 = v7;
    uint64_t v60 = v7;
    uint64_t v61 = v31;
    uint64_t v33 = v7;
    int v34 = (int *)(a3 + 8);
    signed int v62 = a1;
    int v35 = a1;
    int v36 = v31;
    do
    {
      long long v37 = *v35++;
      long long v66 = v37;
      xcorr_kernel((__int16 *)v13, v36, (int *)&v66, v32, *(double *)&v37, v18, v19, v20, v21);
      uint64_t v38 = v66;
      unsigned int v39 = -((16 * v66 + 0x8000) >> 16);
      int v40 = &v36[v33];
      *int v40 = v39;
      *(v34 - 2) = v38;
      int v41 = (__int16)v39;
      int v42 = *a2;
      int v43 = HIDWORD(v38) + v41 * v42;
      unsigned int v44 = -((16 * v43 + 0x8000) >> 16);
      v40[1] = v44;
      *(v34 - 1) = v43;
      int v45 = (__int16)v44;
      int v46 = HIDWORD(v66);
      int v47 = a2[1];
      int v48 = DWORD2(v66) + (__int16)v44 * v42 + v47 * v41;
      *int v34 = v48;
      unsigned int v49 = -((16 * v48 + 0x8000) >> 16);
      _OWORD v40[2] = v49;
      int v50 = v46 + v45 * v47 + (__int16)v49 * v42 + a2[2] * v41;
      v40[3] = -((16 * v50 + 0x8000) >> 16);
      v34[1] = v50;
      v30 += 4;
      v36 += 4;
      v34 += 4;
    }
    while (v30 < v65);
    LODWORD(v29) = v63;
    a3 = v64;
    int v7 = v32;
    int v17 = (char *)v61;
    a1 = v62;
    uint64_t v28 = v60;
  }
  if ((int)v30 < (int)v29)
  {
    uint64_t v51 = (int)v30;
    do
    {
      int v52 = *((_DWORD *)a1 + v51);
      if (v7 >= 1)
      {
        int32x2_t v53 = &v17[2 * v51];
        uint64_t v54 = v22;
        uint64_t v55 = (__int16 *)v13;
        do
        {
          int v57 = *v55++;
          int v56 = v57;
          int v58 = *(__int16 *)v53;
          v53 += 2;
          v52 -= v58 * v56;
          --v54;
        }
        while (v54);
      }
      *(_WORD *)&v17[2 * v51 + 2 * v28] = (v52 + 2048) >> 12;
      *(_DWORD *)(a3 + 4 * v51++) = v52;
    }
    while (v51 != (int)v29);
  }
  if (v7 >= 1)
  {
    int v59 = v29 - 1;
    do
    {
      *a6++ = *(_DWORD *)(a3 + 4 * v59--);
      --v22;
    }
    while (v22);
  }
}

uint64_t _celt_autocorr(char *a1, unsigned int *a2, uint64_t a3, int a4, int a5, int a6)
{
  v44[1] = *MEMORY[0x263EF8340];
  size_t v12 = 2 * a6;
  int v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v13, v12);
  if (a4)
  {
    int v14 = a6 - 1;
    if (a6 >= 1) {
      memcpy(v13, a1, 2 * a6);
    }
    int v15 = v13;
    if (a4 >= 1)
    {
      uint64_t v16 = 0;
      do
      {
        int v17 = *(__int16 *)(a3 + v16);
        *(_WORD *)&v13[v16] = (v17 * *(__int16 *)&a1[v16]) >> 15;
        *(_WORD *)&v13[2 * v14] = (*(__int16 *)&a1[2 * v14] * v17) >> 15;
        --v14;
        v16 += 2;
      }
      while (2 * a4 != v16);
      int v15 = v13;
    }
  }
  else
  {
    int v15 = a1;
  }
  unsigned int v18 = (a6 << 7) | 1;
  if (a6) {
    v18 += (*(__int16 *)v15 * *(__int16 *)v15) >> 9;
  }
  int v19 = a6 - a5;
  uint64_t v20 = a6;
  if (a6 >= 2)
  {
    uint64_t v21 = a6 & 1;
    do
    {
      v18 += ((*(__int16 *)&v15[2 * v21] * *(__int16 *)&v15[2 * v21]) >> 9)
           + ((*(__int16 *)&v15[2 * v21 + 2] * *(__int16 *)&v15[2 * v21 + 2]) >> 9);
      v21 += 2;
    }
    while (v21 < a6);
  }
  if (v18 < 0x400000)
  {
    uint64_t v27 = 0;
    int v13 = v15;
  }
  else
  {
    unsigned int v22 = __clz(v18);
    int v23 = (int)((11 - v22 + (((11 - v22) & 0x80) >> 7)) << 24) >> 25;
    if (a6 >= 1)
    {
      uint64_t v24 = a6;
      int v25 = v13;
      do
      {
        int v26 = *(__int16 *)v15;
        v15 += 2;
        *v25++ = (int)(((1 << v23) >> 1) + v26) >> v23;
        --v24;
      }
      while (v24);
    }
    uint64_t v27 = (2 * v23);
  }
  uint64_t v28 = (a5 + 1);
  celt_pitch_xcorr_c((__int16 *)v13, (uint64_t)v13, (uint64_t)a2, v19, a5 + 1);
  if ((a5 & 0x80000000) == 0)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = a5;
    uint64_t v32 = v20 - v19;
    do
    {
      if (v30 >= v32)
      {
        int v33 = 0;
      }
      else
      {
        int v33 = 0;
        int v34 = &v13[2 * v29 + 2 * v19];
        int v35 = &v13[2 * v19];
        int v36 = v31;
        do
        {
          int v38 = *(__int16 *)v35;
          v35 += 2;
          int v37 = v38;
          int v39 = *(__int16 *)v34;
          v34 += 2;
          v33 += v39 * v37;
          --v36;
        }
        while (v36);
      }
      a2[v30++] += v33;
      ++v19;
      --v29;
      --v31;
    }
    while (v30 != v28);
  }
  unsigned int v40 = *a2;
  if (!v27) {
    *a2 = ++v40;
  }
  if ((int)v40 > 0xFFFFFFF)
  {
    if (v40 >> 29)
    {
      if (v40 >> 30) {
        int v42 = 2;
      }
      else {
        int v42 = 1;
      }
      if ((a5 & 0x80000000) == 0)
      {
        do
        {
          *a2 = (int)*a2 >> v42;
          ++a2;
          --v28;
        }
        while (v28);
      }
      return (v42 + v27);
    }
  }
  else
  {
    unsigned int v41 = __clz(v40) - 3;
    if ((a5 & 0x80000000) == 0)
    {
      do
      {
        *a2++ <<= v41;
        --v28;
      }
      while (v28);
    }
    return v27 - v41;
  }
  return v27;
}

void pitch_downsample(int **a1, char *a2, int a3, int a4)
{
  int v5 = a2;
  uint64_t v55 = *MEMORY[0x263EF8340];
  signed int v6 = *a1;
  if (a3 < 1)
  {
    int v14 = 0;
    int v16 = 0;
    int v15 = 0;
    int v20 = 0;
    if (a4 != 2) {
      goto LABEL_27;
    }
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = a3;
    __int16 v10 = *a1;
    uint64_t v11 = a3;
    do
    {
      int v13 = *v10++;
      int v12 = v13;
      if (v8 <= v13) {
        int v8 = v12;
      }
      if (v7 >= v12) {
        int v7 = v12;
      }
      --v11;
    }
    while (v11);
    if (v8 <= -v7) {
      int v14 = -v7;
    }
    else {
      int v14 = v8;
    }
    if (a4 != 2)
    {
      int v20 = 0;
      goto LABEL_27;
    }
    int v15 = 0;
    int v16 = 0;
    int v17 = a1[1];
    do
    {
      int v19 = *v17++;
      int v18 = v19;
      if (v16 <= v19) {
        int v16 = v18;
      }
      if (v15 >= v18) {
        int v15 = v18;
      }
      --v9;
    }
    while (v9);
  }
  if (v16 <= -v15) {
    int v21 = -v15;
  }
  else {
    int v21 = v16;
  }
  if (v14 <= v21) {
    int v14 = v21;
  }
  int v20 = 1;
LABEL_27:
  if (v14 <= 1) {
    unsigned int v22 = 1;
  }
  else {
    unsigned int v22 = v14;
  }
  signed int v23 = __clz(v22) ^ 0x1F;
  if (v23 <= 10) {
    LOBYTE(v23) = 10;
  }
  char v24 = v20 + v23 - 10;
  uint64_t v25 = (a3 >> 1);
  if (a3 >= 4)
  {
    if ((int)v25 <= 2) {
      uint64_t v26 = 2;
    }
    else {
      uint64_t v26 = v25;
    }
    uint64_t v27 = v6 + 2;
    uint64_t v28 = a2 + 2;
    uint64_t v29 = v26 - 1;
    do
    {
      *v28++ = (*v27 + ((v27[1] + *(v27 - 1)) >> 1)) >> 1 >> v24;
      v27 += 2;
      --v29;
    }
    while (v29);
  }
  int v30 = (*v6 + (v6[1] >> 1)) >> 1 >> v24;
  *(_WORD *)a2 = v30;
  if (v20)
  {
    int v31 = a1[1];
    if (a3 >= 4)
    {
      if ((int)v25 <= 2) {
        uint64_t v32 = 2;
      }
      else {
        uint64_t v32 = v25;
      }
      int v33 = v31 + 2;
      int v34 = a2 + 2;
      uint64_t v35 = v32 - 1;
      do
      {
        *v34++ += (*v33 + ((v33[1] + *(v33 - 1)) >> 1)) >> 1 >> v24;
        v33 += 2;
        --v35;
      }
      while (v35);
    }
    *(_WORD *)a2 = ((*v31 + (v31[1] >> 1)) >> 1 >> v24) + v30;
  }
  _celt_autocorr(a2, (unsigned int *)&v53, 0, 0, 4, a3 >> 1);
  v53 += v53 >> 13;
  int32x4_t v54 = vsubq_s32(vmlaq_s32(v54, vshrq_n_s32(v54, 0x10uLL), (int32x4_t)xmmword_2207735A0), (int32x4_t)vshrq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(v54), (uint16x4_t)0x20001200080002), 0xFuLL));
  _celt_lpc(&v49, &v53, 4);
  uint64_t v36 = 0;
  LOWORD(v37) = 0x7FFF;
  do
  {
    int v37 = (29491 * (__int16)v37) >> 15;
    *(__int16 *)((char *)&v49 + v36) = (v37 * *(__int16 *)((char *)&v49 + v36)) >> 15;
    v36 += 2;
  }
  while (v36 != 8);
  if (a3 >= 2)
  {
    int v38 = 0;
    int v39 = 0;
    int v40 = 0;
    int v41 = 0;
    __int16 v42 = 0;
    int v43 = (__int16)(v49 + 3277);
    int v44 = (__int16)(v50 + ((26214 * v49) >> 15));
    int v45 = (__int16)(v51 + ((26214 * v50) >> 15));
    int v46 = (__int16)(v52 + ((26214 * v51) >> 15));
    int v47 = (52428 * v52) >> 16;
    do
    {
      int v48 = v39 * v46 + v38 * v47 + v40 * v45 + v41 * v44;
      int v38 = v39;
      int v39 = v40;
      int v40 = v41;
      int v41 = v42;
      __int16 v42 = *(_WORD *)v5;
      *(_WORD *)v5 += (v48 + v41 * v43 + 2048) >> 12;
      v5 += 2;
      --v25;
    }
    while (v25);
  }
}

uint64_t celt_pitch_xcorr_c(__int16 *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a5 < 4)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = 1;
  }
  else
  {
    unint64_t v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      int v7 = (__int16 *)(a2 + 2 * v5);
      __int16 v8 = *v7;
      __int16 v9 = v7[1];
      __int16 v10 = v7 + 3;
      __int16 v11 = v7[2];
      if (a4 < 4)
      {
        int v15 = 0;
        int v14 = 0;
        int v13 = 0;
        int v12 = 0;
        __int16 v40 = 0;
        signed int v41 = 0;
        uint64_t v36 = a1;
      }
      else
      {
        int v12 = 0;
        int v13 = 0;
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = a1;
        do
        {
          int v18 = *v17;
          int v19 = *v10;
          int v20 = v15 + v18 * v8;
          int v21 = v14 + v18 * v9;
          int v22 = v13 + v18 * v11;
          int v23 = v12 + v19 * v18;
          int v24 = v17[1];
          int v25 = v10[1];
          __int16 v8 = v10[1];
          int v26 = v20 + v24 * v9;
          int v27 = v21 + v24 * v11;
          int v28 = v22 + v24 * v19;
          int v29 = v23 + v25 * v24;
          int v30 = v17[2];
          int v31 = v10[2];
          __int16 v9 = v10[2];
          int v32 = v26 + v30 * v11;
          int v33 = v27 + v30 * v19;
          int v34 = v28 + v30 * v25;
          int v35 = v29 + v31 * v30;
          uint64_t v36 = v17 + 4;
          int v37 = v17[3];
          int v38 = v10 + 4;
          int v39 = v10[3];
          __int16 v11 = v39;
          int v15 = v32 + v37 * v19;
          int v14 = v33 + v37 * v25;
          int v13 = v34 + v37 * v31;
          int v12 = v35 + v39 * v37;
          v16 += 4;
          int v17 = v36;
          __int16 v10 = v38;
        }
        while (v16 < a4 - 3);
        __int16 v40 = v19;
        signed int v41 = a4 & 0xFFFFFFFC;
        __int16 v10 = v38;
      }
      if (v41 < a4)
      {
        int v43 = *v36++;
        int v42 = v43;
        int v44 = *v10++;
        __int16 v40 = v44;
        v15 += v42 * v8;
        v14 += v42 * v9;
        v13 += v42 * v11;
        v12 += v44 * v42;
      }
      if ((v41 | 1) < a4)
      {
        int v46 = *v36++;
        int v45 = v46;
        int v47 = *v10++;
        __int16 v8 = v47;
        v15 += v45 * v9;
        v14 += v45 * v11;
        v13 += v45 * v40;
        v12 += v47 * v45;
      }
      if ((v41 | 2) < a4)
      {
        int v48 = *v36;
        v15 += v48 * v11;
        v14 += v48 * v40;
        v13 += v48 * v8;
        v12 += *v10 * v48;
      }
      *(_DWORD *)(a3 + 4 * v5) = v15;
      *(_DWORD *)(a3 + ((4 * v5) | 4)) = v14;
      *(_DWORD *)(a3 + ((4 * v5) | 8)) = v13;
      *(_DWORD *)(a3 + ((4 * v5) | 0xC)) = v12;
      if (v15 <= v14) {
        int v49 = v14;
      }
      else {
        int v49 = v15;
      }
      if (v13 <= v12) {
        int v13 = v12;
      }
      if (v49 > v13) {
        int v13 = v49;
      }
      if ((int)v6 <= v13) {
        uint64_t v6 = v13;
      }
      else {
        uint64_t v6 = v6;
      }
      v5 += 4;
    }
    while (v5 < (a5 - 3));
  }
  if ((int)v5 < a5)
  {
    uint64_t v50 = v5;
    __int16 v51 = (__int16 *)(a2 + 2 * v5);
    do
    {
      if (a4 < 1)
      {
        int v52 = 0;
      }
      else
      {
        int v52 = 0;
        uint64_t v53 = a4;
        int32x4_t v54 = a1;
        uint64_t v55 = v51;
        do
        {
          int v57 = *v54++;
          int v56 = v57;
          int v58 = *v55++;
          v52 += v58 * v56;
          --v53;
        }
        while (v53);
      }
      *(_DWORD *)(a3 + 4 * v50) = v52;
      if ((int)v6 <= v52) {
        uint64_t v6 = v52;
      }
      else {
        uint64_t v6 = v6;
      }
      ++v50;
      ++v51;
    }
    while (v50 != a5);
  }
  return v6;
}

uint64_t pitch_search(__int16 *a1, __int16 *a2, int a3, int a4, _DWORD *a5)
{
  int v76 = a5;
  int v77 = a2;
  v78[1] = *MEMORY[0x263EF8340];
  v78[0] = 0;
  int v8 = a4 + a3;
  uint64_t v9 = (a3 >> 2);
  size_t v10 = 2 * (int)v9;
  __int16 v11 = &v73[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v11, v10);
  int v12 = v8 >> 2;
  size_t v13 = 2 * (v8 >> 2);
  int v14 = (__int16 *)&v73[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v74 = a4;
  uint64_t v75 = (a4 >> 1);
  size_t v15 = 4 * (int)v75;
  int v16 = &v73[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a3 >= 4)
  {
    if ((int)v9 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v9;
    }
    int v18 = v11;
    int v19 = a1;
    do
    {
      __int16 v20 = *v19;
      v19 += 2;
      *v18++ = v20;
      --v17;
    }
    while (v17);
  }
  bzero(&v73[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], v13);
  if (v8 >= 4)
  {
    if (v12 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v12;
    }
    int v22 = v14;
    int v23 = v77;
    do
    {
      __int16 v24 = *v23;
      v23 += 2;
      *v22++ = v24;
      --v21;
    }
    while (v21);
  }
  if (a3 < 4)
  {
    int v31 = 0;
    int v25 = 0;
  }
  else
  {
    LOWORD(v25) = 0;
    unsigned __int16 v26 = 0;
    int v27 = (__int16 *)v11;
    uint64_t v28 = v9;
    do
    {
      int v30 = *v27++;
      int v29 = v30;
      if (v30 >= v26) {
        unsigned __int16 v26 = v29;
      }
      if ((__int16)v25 >= v29) {
        LOWORD(v25) = v29;
      }
      --v28;
    }
    while (v28);
    int v31 = v26;
    int v25 = (__int16)v25;
  }
  int v32 = 0;
  int v33 = 0;
  if (v31 <= -v25) {
    unsigned int v34 = -v25;
  }
  else {
    unsigned int v34 = v31;
  }
  if (v8 >= 4)
  {
    LOWORD(v33) = 0;
    LOWORD(v32) = 0;
    int v35 = v14;
    uint64_t v36 = (v8 >> 2);
    do
    {
      int v38 = *v35++;
      int v37 = v38;
      if (v38 >= (unsigned __int16)v32) {
        LOWORD(v32) = v37;
      }
      if ((__int16)v33 >= v37) {
        LOWORD(v33) = v37;
      }
      --v36;
    }
    while (v36);
    int v32 = (unsigned __int16)v32;
    int v33 = (__int16)v33;
  }
  char v39 = 0;
  if (v32 <= -v33) {
    unsigned int v40 = -v33;
  }
  else {
    unsigned int v40 = v32;
  }
  if (v34 <= v40) {
    unsigned int v34 = v40;
  }
  if (v34 <= 1) {
    unsigned int v34 = 1;
  }
  unsigned int v41 = __clz(v34);
  if ((v41 ^ 0x1C) >= 0xC)
  {
    char v42 = 20 - v41;
    if (a3 >= 4)
    {
      if ((int)v9 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v9;
      }
      int v44 = (__int16 *)v11;
      do
      {
        *v44++ >>= v42;
        --v43;
      }
      while (v43);
    }
    if (v8 >= 4)
    {
      if (v12 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v12;
      }
      int v46 = v14;
      do
      {
        *v46++ >>= v42;
        --v45;
      }
      while (v45);
    }
    char v39 = 2 * v42;
  }
  bzero(v16, v15);
  int v47 = v74;
  unsigned int v48 = celt_pitch_xcorr_c((__int16 *)v11, (uint64_t)v14, (uint64_t)v16, v9, v74 >> 2);
  find_best_pitch((uint64_t)v16, v14, v9, v47 >> 2, (uint64_t)v78, 0, v48);
  if (v47 <= 1)
  {
    unsigned int v52 = a3 >> 1;
    signed int v56 = 1;
    int v54 = v75;
  }
  else
  {
    uint64_t v49 = 0;
    int v50 = 2 * LODWORD(v78[0]);
    int v51 = 2 * HIDWORD(v78[0]);
    unsigned int v52 = a3 >> 1;
    if (a3 >> 1 <= 1) {
      uint64_t v53 = 1;
    }
    else {
      uint64_t v53 = v52;
    }
    int v54 = v75;
    if ((int)v75 <= 1) {
      uint64_t v55 = 1;
    }
    else {
      uint64_t v55 = v75;
    }
    signed int v56 = 1;
    int v57 = v77;
    do
    {
      *(_DWORD *)&v16[4 * v49] = 0;
      unsigned int v58 = v49 - v50;
      if ((int)v49 - v50 < 0) {
        unsigned int v58 = v50 - v49;
      }
      if (v58 < 3) {
        goto LABEL_68;
      }
      unsigned int v59 = v49 - v51;
      if ((int)v49 - v51 < 0) {
        unsigned int v59 = v51 - v49;
      }
      if (v59 <= 2)
      {
LABEL_68:
        if (a3 < 2)
        {
          int v60 = 0;
        }
        else
        {
          int v60 = 0;
          uint64_t v61 = v53;
          signed int v62 = a1;
          uint64_t v63 = v57;
          do
          {
            int v65 = *v62++;
            int v64 = v65;
            int v66 = *v63++;
            v60 += (v66 * v64) >> v39;
            --v61;
          }
          while (v61);
        }
        if (v60 < 0) {
          int v67 = -1;
        }
        else {
          int v67 = v60;
        }
        *(_DWORD *)&v16[4 * v49] = v67;
        if (v56 <= v60) {
          signed int v56 = v60;
        }
      }
      ++v49;
      ++v57;
    }
    while (v49 != v55);
  }
  uint64_t result = find_best_pitch((uint64_t)v16, v77, v52, v54, (uint64_t)v78, v39 | 1u, v56);
  int v69 = 0;
  if (SLODWORD(v78[0]) >= 1 && SLODWORD(v78[0]) < v54 - 1)
  {
    int v70 = *(_DWORD *)&v16[4 * (LODWORD(v78[0]) - 1)];
    int v71 = *(_DWORD *)&v16[4 * LODWORD(v78[0])];
    int v72 = *(_DWORD *)&v16[4 * LODWORD(v78[0]) + 4];
    if (v72 - v70 <= (int)(45876 * ((v71 - v70) >> 16) + ((22938 * (unsigned __int16)(v71 - v70)) >> 15))) {
      int v69 = v70 - v72 > (int)(45876 * ((v71 - v72) >> 16) + ((22938 * (unsigned __int16)(v71 - v72)) >> 15));
    }
    else {
      int v69 = -1;
    }
  }
  _DWORD *v76 = v69 + 2 * LODWORD(v78[0]);
  return result;
}

uint64_t find_best_pitch(uint64_t result, __int16 *a2, int a3, int a4, uint64_t a5, char a6, unsigned int a7)
{
  *(void *)a5 = 0x100000000;
  if (a3 < 1)
  {
    signed int v8 = 1;
  }
  else
  {
    uint64_t v7 = a3;
    signed int v8 = 1;
    uint64_t v9 = a2;
    do
    {
      int v10 = *v9++;
      v8 += (v10 * v10) >> a6;
      --v7;
    }
    while (v7);
  }
  if (a4 >= 1)
  {
    int v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    int v14 = 0;
    char v15 = __clz(a7);
    unsigned int v16 = a7 >> 15;
    char v17 = v15 - 17;
    char v18 = 17 - v15;
    LOWORD(v19) = -1;
    LOWORD(a7) = -1;
    uint64_t v20 = a4;
    uint64_t v21 = &a2[a3];
    do
    {
      int v22 = *(_DWORD *)(result + 4 * v12);
      if (v22 >= 1)
      {
        unsigned int v23 = v22 >> v18;
        int v24 = v22 << v17;
        if (v16) {
          LOWORD(v24) = v23;
        }
        int v25 = (__int16)v24 * (__int16)v24;
        int v26 = (__int16)(v25 >> 15);
        unsigned int v27 = (v8 >> 15) & 0xFFFFFFFE;
        if ((int)(((v14 >> 15) & 0xFFFFFFFE) * v26 + ((v26 * (unsigned __int16)v14) >> 15)) > (int)(v27 * (__int16)a7 + (((unsigned __int16)v8 * (__int16)a7) >> 15)))
        {
          if ((int)(((v13 >> 15) & 0xFFFFFFFE) * v26 + ((v26 * (unsigned __int16)v13) >> 15)) <= (int)(v27 * (__int16)v19 + (((unsigned __int16)v8 * (__int16)v19) >> 15)))
          {
            a7 = v25 >> 15;
            *(_DWORD *)(a5 + 4) = v12;
            int v14 = v8;
          }
          else
          {
            LOWORD(a7) = v19;
            unsigned int v19 = v25 >> 15;
            *(_DWORD *)a5 = v12;
            *(_DWORD *)(a5 + 4) = v11;
            int v11 = v12;
            int v14 = v13;
            int v13 = v8;
          }
        }
      }
      signed int v8 = ((v21[v12] * v21[v12]) >> a6) + v8 - ((a2[v12] * a2[v12]) >> a6);
      if (v8 <= 1) {
        signed int v8 = 1;
      }
      ++v12;
    }
    while (v20 != v12);
  }
  return result;
}

uint64_t remove_doubling(uint64_t a1, int a2, int a3, int a4, int *a5, int a6, int a7)
{
  int v102 = a7;
  uint64_t v109 = *MEMORY[0x263EF8340];
  if (a2 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = a2 + 1;
  }
  int v10 = v9 >> 1;
  HIDWORD(v83) = a3;
  if (a3 >= 0) {
    int v11 = a3;
  }
  else {
    int v11 = a3 + 1;
  }
  int v12 = *a5 / 2;
  if (a6 >= 0) {
    int v13 = a6;
  }
  else {
    int v13 = a6 + 1;
  }
  if (a4 >= 0) {
    int v14 = a4;
  }
  else {
    int v14 = a4 + 1;
  }
  uint64_t v95 = (v14 >> 1);
  char v15 = (__int16 *)(a1 + 2 * v10);
  LODWORD(v16) = v10 - 1;
  if (v12 >= v9 >> 1) {
    uint64_t v16 = v16;
  }
  else {
    uint64_t v16 = v12;
  }
  long long v84 = a5;
  *a5 = v16;
  uint64_t v17 = (v10 + 1);
  size_t v18 = 4 * (int)v17;
  int v104 = (int *)((char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v19 = 0;
  int v20 = 0;
  uint64_t v96 = v16;
  uint64_t v21 = (int)v16;
  int v94 = a4;
  if (a4 >= 2)
  {
    int v20 = 0;
    int v19 = 0;
    int v22 = (__int16 *)(a1 + 2 * v10);
    uint64_t v23 = v95;
    do
    {
      int v24 = *v22;
      v19 += v24 * v24;
      v20 += v22[-(int)v16] * v24;
      ++v22;
      --v23;
    }
    while (v23);
  }
  uint64_t v90 = (uint64_t)v9 >> 1;
  int v25 = v104;
  bzero(v104, v18);
  *int v25 = v19;
  if (a2 >= 2)
  {
    uint64_t v26 = (int)v95;
    unsigned int v27 = (__int16 *)(a1 + 2 * v90 - 2);
    uint64_t v28 = v104 + 1;
    uint64_t v29 = v17 - 1;
    int v30 = v19;
    do
    {
      int v30 = v30 + *v27 * *v27 - v27[v26] * v27[v26];
      *v28++ = v30 & ~(v30 >> 31);
      --v27;
      --v29;
    }
    while (v29);
  }
  int v103 = v11 >> 1;
  int v31 = v104[v21];
  int v100 = 2 * (v19 >> 16);
  int v101 = v19 >> 16;
  int v91 = v31;
  int v99 = (unsigned __int16)v19;
  signed int v32 = ((v100 * (v31 >> 16)
        + (((unsigned __int16)v31 * (v19 >> 16)) >> 15)
        + (((v31 >> 16) * (unsigned __int16)v19) >> 15)) >> 1)
      + 1;
  unsigned int v33 = __clz(v32);
  int v34 = v32 >> (((31 - v33) & 0xFE) - 14);
  signed int v35 = v32 << (14 - ((31 - v33) & 0xFE));
  if (v33 >= 0x10) {
    __int16 v36 = v35;
  }
  else {
    __int16 v36 = v34;
  }
  int v37 = v20 >> 15;
  if (v33 > 0x1F)
  {
    unsigned int v41 = (v37 & 0xFFFFFFFE) * (unsigned __int16)celt_rsqrt_norm(v36);
    int v40 = v41 + ((int)((unsigned __int16)v20 * celt_rsqrt_norm(v36)) >> 15);
  }
  else
  {
    int v38 = ((int)(31 - v33) >> 1) + 1;
    int v39 = (v37 & 0xFFFFFFFE) * celt_rsqrt_norm(v36);
    int v40 = (v39 + ((int)((unsigned __int16)v20 * celt_rsqrt_norm(v36)) >> 15)) >> v38;
  }
  int v42 = v94;
  int v98 = -(v13 >> 1);
  int v105 = 2 * v96;
  int v86 = v102 >> 1;
  int v92 = v96;
  int v93 = v40;
  int v97 = 3 * v103;
  int v89 = (22938 * (__int16)v40) >> 15;
  int v88 = 2 * v103;
  int v85 = (29491 * (__int16)v40) >> 15;
  int v87 = (27853 * (__int16)v40) >> 15;
  uint64_t v43 = 2;
  int v44 = 2;
  do
  {
    int v45 = (v44 + v105) / (2 * (int)v43);
    if (v45 < v103) {
      break;
    }
    if (v43 == 2)
    {
      int v46 = v45 + v96;
      if (v45 + (int)v96 > (int)v90) {
        int v46 = v96;
      }
    }
    else
    {
      int v46 = ((int)v43 + v105 * second_check[v43]) / (2 * (int)v43);
    }
    if (v42 < 2)
    {
      int v52 = 0;
    }
    else
    {
      int v47 = 0;
      int v48 = 0;
      uint64_t v49 = v15;
      uint64_t v50 = v95;
      do
      {
        int v51 = *v49;
        v48 += v49[-v45] * v51;
        v47 += v49[-v46] * v51;
        ++v49;
        --v50;
      }
      while (v50);
      int v52 = v47 + v48;
    }
    int v53 = v104[v46] + v104[v45];
    signed int v54 = ((v100 * (v53 >> 16)) | 1) + (((unsigned __int16)v53 * v101) >> 15) + (((v53 >> 16) * v99) >> 15);
    unsigned int v55 = __clz(v54);
    int v56 = v54 >> (((31 - v55) & 0xFE) - 14);
    signed int v57 = v54 << (14 - ((31 - v55) & 0xFE));
    if (v55 >= 0x10) {
      __int16 v58 = v57;
    }
    else {
      __int16 v58 = v56;
    }
    if (v55 > 0x1F)
    {
      unsigned int v62 = ((v52 >> 15) & 0xFFFFFFFE) * (unsigned __int16)celt_rsqrt_norm(v58);
      int v61 = v62 + ((int)((unsigned __int16)v52 * celt_rsqrt_norm(v58)) >> 15);
    }
    else
    {
      int v59 = ((int)(31 - v55) >> 1) + 1;
      int v60 = ((v52 >> 15) & 0xFFFFFFFE) * celt_rsqrt_norm(v58);
      int v61 = (v60 + ((int)((unsigned __int16)v52 * celt_rsqrt_norm(v58)) >> 15)) >> v59;
      int v42 = v94;
    }
    if (v45 + v98 >= 0) {
      unsigned int v63 = v45 + v98;
    }
    else {
      unsigned int v63 = -(v45 + v98);
    }
    __int16 v64 = v102;
    if (v63 >= 2)
    {
      if (v63 == 2)
      {
        __int16 v64 = v86;
        if (5 * v44 * (int)v43 >= (int)v96) {
          __int16 v64 = 0;
        }
      }
      else
      {
        __int16 v64 = 0;
      }
    }
    int v65 = v64;
    if (v45 >= v97)
    {
      int v66 = v89 - v64;
      if (v89 - v65 <= 9830) {
        int v66 = 9830;
      }
      if (v45 >= v88) {
        goto LABEL_63;
      }
      int v66 = v85 - v65;
      BOOL v68 = v85 - v65 <= 0x4000;
      int v67 = 0x4000;
    }
    else
    {
      int v66 = v87 - v64;
      int v67 = 13107;
      BOOL v68 = v66 <= 13107;
    }
    if (v68) {
      int v66 = v67;
    }
LABEL_63:
    if (v61 << 16 > v66 << 16)
    {
      int v92 = v45;
      int v93 = v61;
      int v20 = v52;
      int v91 = v53;
    }
    ++v43;
    ++v44;
  }
  while (v43 != 16);
  int v69 = v20 & ~(v20 >> 31);
  if (v91 <= v69) {
    LOWORD(v70) = 0x7FFF;
  }
  else {
    unsigned int v70 = frac_div32(v69, v91 + 1) >> 16;
  }
  uint64_t v71 = v95;
  int v72 = v92;
  uint64_t v73 = 0;
  int v74 = 1 - v92;
  do
  {
    if (v42 < 2)
    {
      int v75 = 0;
    }
    else
    {
      int v75 = 0;
      uint64_t v76 = v71;
      int v77 = v15;
      int v78 = v74;
      do
      {
        int v79 = *v77++;
        v75 += v15[v78++] * v79;
        --v76;
      }
      while (v76);
    }
    *(&v106 + v73++) = v75;
    --v74;
  }
  while (v73 != 3);
  if (v108 - v106 <= (int)(45876 * ((v107 - v106) >> 16)
                          + ((22938 * (unsigned __int16)(v107 - v106)) >> 15)))
  {
    if (v106 - v108 <= (int)(45876 * ((v107 - v108) >> 16)
                            + ((22938 * (unsigned __int16)(v107 - v108)) >> 15)))
      int v80 = 0;
    else {
      int v80 = -1;
    }
  }
  else
  {
    int v80 = 1;
  }
  if ((__int16)v70 >= (__int16)v93) {
    uint64_t result = (__int16)v93;
  }
  else {
    uint64_t result = (__int16)v70;
  }
  int v82 = v80 + 2 * v72;
  if (v82 <= SHIDWORD(v83)) {
    int v82 = HIDWORD(v83);
  }
  *long long v84 = v82;
  return result;
}

uint64_t *ec_laplace_encode(uint64_t *a1, int *a2, unsigned int a3, int a4)
{
  int v4 = *a2;
  if (*a2)
  {
    if (v4 >= 0) {
      int v5 = *a2;
    }
    else {
      int v5 = -v4;
    }
    unsigned int v6 = (0x4000 - a4) * (32736 - a3);
    unsigned int v7 = v6 >> 15;
    int v8 = 1;
    if (v6 >= 0x8000)
    {
      BOOL v10 = __OFSUB__(v5, 2);
      BOOL v9 = v5 - 2 < 0;
    }
    else
    {
      BOOL v10 = 0;
      BOOL v9 = 1;
    }
    if (v9 == v10)
    {
      do
      {
        a3 += 2 * v7 + 2;
        unsigned int v6 = 2 * v7 * a4;
        ++v8;
        unsigned int v7 = v6 >> 15;
        if (v6 >= 0x8000)
        {
          BOOL v12 = __OFSUB__(v8, v5);
          BOOL v11 = v8 - v5 < 0;
        }
        else
        {
          BOOL v12 = 0;
          BOOL v11 = 0;
        }
      }
      while (v11 != v12);
    }
    if (v6 >> 15)
    {
      if (v4 >= 0) {
        unsigned int v16 = v7 + 1;
      }
      else {
        unsigned int v16 = 0;
      }
      int v4 = v16 + a3;
      a3 = v7 + 1;
    }
    else
    {
      int v13 = v4 >> 31;
      int v14 = v5 - v8;
      int v15 = ((int)(((v4 >> 31) | 0x8000) - a3) >> 1) - 1;
      if (v14 >= v15) {
        int v14 = v15;
      }
      int v4 = v13 + a3 + 2 * v14 + 1;
      a3 = v13 + a3 + 2 * v14 != 0x7FFF;
      *a2 = (v8 + v13 + v14) ^ v13;
    }
  }
  return ec_encode_bin(a1, v4, v4 + a3, 15);
}

uint64_t ec_laplace_decode(uint64_t *a1, unsigned int a2, int a3)
{
  unsigned int v6 = ec_decode_bin(a1, 15);
  if (v6 >= a2)
  {
    unsigned int v9 = (0x4000 - a3) * (32736 - a2);
    int v10 = (v9 >> 15) + 1;
    if (v9 >= 0x8000)
    {
      unsigned int v11 = 1;
      int v12 = a2;
      while (1)
      {
        a2 = v12 + 2 * v10;
        if (v6 < a2) {
          break;
        }
        ++v11;
        unsigned int v13 = ((2 * v10 - 2) * a3) >> 15;
        int v10 = v13 + 1;
        int v12 = a2;
        if (!v13) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      unsigned int v11 = 1;
LABEL_8:
      v11 += (v6 - a2) >> 1;
      int v12 = ((v6 - a2) & 0xFFFFFFFE) + a2;
    }
    if (v6 >= v12 + v10) {
      uint64_t v7 = v11;
    }
    else {
      uint64_t v7 = -v11;
    }
    if (v6 >= v12 + v10) {
      int v8 = v12 + v10;
    }
    else {
      int v8 = v12;
    }
    a2 = v10;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
  }
  if (a2 + v8 >= 0x8000) {
    int v14 = 0x8000;
  }
  else {
    int v14 = a2 + v8;
  }
  ec_dec_update(a1, v8, v14, 0x8000);
  return v7;
}

double ec_enc_init(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 12) = xmmword_2207735F0;
  *(_OWORD *)(a1 + 28) = xmmword_220773600;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 44) = 0xFFFFFFFFLL;
  return result;
}

uint64_t *ec_encode(uint64_t *result, int a2, int a3, unsigned int a4)
{
  unsigned int v4 = *((_DWORD *)result + 8);
  int v5 = v4 / a4;
  if (a2)
  {
    *((_DWORD *)result + 9) += v4 + v5 * (a2 - a4);
    int v6 = v5 * (a3 - a2);
  }
  else
  {
    int v6 = v4 + v5 * (a3 - a4);
  }
  *((_DWORD *)result + 8) = v6;
  return ec_enc_normalize(result);
}

uint64_t *ec_enc_normalize(uint64_t *result)
{
  if (*((_DWORD *)result + 8) <= 0x800000u)
  {
    unsigned int v1 = result;
    unsigned int v2 = *((_DWORD *)result + 9);
    do
    {
      double result = ec_enc_carry_out(v1, v2 >> 23);
      unsigned int v2 = (*((_DWORD *)v1 + 9) & 0x7FFFFF) << 8;
      unsigned int v3 = *((_DWORD *)v1 + 8) << 8;
      *((_DWORD *)v1 + 8) = v3;
      *((_DWORD *)v1 + 9) = v2;
      *((_DWORD *)v1 + 6) += 8;
    }
    while (v3 < 0x800001);
  }
  return result;
}

uint64_t *ec_encode_bin(uint64_t *result, int a2, int a3, char a4)
{
  unsigned int v4 = *((_DWORD *)result + 8);
  unsigned int v5 = v4 >> a4;
  int v6 = -1 << a4;
  if (a2)
  {
    *((_DWORD *)result + 9) += v4 + v5 * (v6 + a2);
    int v7 = v5 * (a3 - a2);
  }
  else
  {
    int v7 = v4 + v5 * (v6 + a3);
  }
  *((_DWORD *)result + 8) = v7;
  return ec_enc_normalize(result);
}

uint64_t *ec_enc_bit_logp(uint64_t *result, int a2, char a3)
{
  unsigned int v3 = *((_DWORD *)result + 8);
  unsigned int v4 = v3 >> a3;
  unsigned int v5 = v3 - (v3 >> a3);
  if (a2)
  {
    *((_DWORD *)result + 9) += v5;
    unsigned int v5 = v4;
  }
  *((_DWORD *)result + 8) = v5;
  return ec_enc_normalize(result);
}

uint64_t *ec_enc_icdf(uint64_t *result, int a2, uint64_t a3, char a4)
{
  unsigned int v4 = *((_DWORD *)result + 8);
  unsigned int v5 = v4 >> a4;
  unsigned int v6 = a2 - 1;
  if (a2 < 1)
  {
    int v7 = v4 - v5 * *(unsigned __int8 *)(a3 + a2);
  }
  else
  {
    *((_DWORD *)result + 9) = *((_DWORD *)result + 9) + v4 - v5 * *(unsigned __int8 *)(a3 + v6);
    int v7 = (*(unsigned __int8 *)(a3 + v6) - *(unsigned __int8 *)(a3 + a2)) * v5;
  }
  *((_DWORD *)result + 8) = v7;
  return ec_enc_normalize(result);
}

uint64_t *ec_enc_uint(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v5 = a3 - 1;
  if (a3 - 1 < 0x100)
  {
    return ec_encode(a1, a2, a2 + 1, a3);
  }
  else
  {
    unsigned int v6 = __clz(v5);
    int v7 = 24 - v6;
    ec_encode(a1, a2 >> (24 - v6), (a2 >> (24 - v6)) + 1, (v5 >> (24 - v6)) + 1);
    return ec_enc_bits(a1, a2 & ~(-1 << v7), v7);
  }
}

uint64_t *ec_enc_bits(uint64_t *result, int a2, int a3)
{
  unsigned int v3 = *((_DWORD *)result + 4);
  int v4 = *((_DWORD *)result + 5);
  int v5 = v4 + a3;
  if ((v4 + a3) < 0x21)
  {
    int v11 = *((_DWORD *)result + 5);
  }
  else
  {
    do
    {
      unsigned int v7 = *((_DWORD *)result + 2);
      int v6 = *((_DWORD *)result + 3);
      if (v6 + *((_DWORD *)result + 7) >= v7)
      {
        int v8 = -1;
      }
      else
      {
        int v8 = 0;
        uint64_t v9 = *result;
        int v10 = v6 + 1;
        *((_DWORD *)result + 3) = v10;
        *(unsigned char *)(v9 + v7 - v10) = v3;
      }
      *((_DWORD *)result + 12) |= v8;
      v3 >>= 8;
      int v11 = v4 - 8;
      BOOL v12 = v4 <= 15;
      v4 -= 8;
    }
    while (!v12);
    int v5 = a3 + v11;
  }
  *((_DWORD *)result + 4) = (a2 << v11) | v3;
  *((_DWORD *)result + 5) = v5;
  *((_DWORD *)result + 6) += a3;
  return result;
}

uint64_t ec_enc_patch_initial_bits(uint64_t result, int a2, char a3)
{
  char v3 = 8 - a3;
  int v4 = ~(-1 << a3) << (8 - a3);
  if (*(_DWORD *)(result + 28))
  {
    **(unsigned char **)double result = **(unsigned char **)result & ~(_BYTE)v4 | ((_BYTE)a2 << v3);
  }
  else
  {
    int v5 = *(_DWORD *)(result + 44);
    if (v5 < 0)
    {
      if (*(_DWORD *)(result + 32) <= 0x80000000 >> a3) {
        *(_DWORD *)(result + 36) = *(_DWORD *)(result + 36) & ~(v4 << 23) | (a2 << ~a3);
      }
      else {
        *(_DWORD *)(result + 48) = -1;
      }
    }
    else
    {
      *(_DWORD *)(result + 44) = v5 & ~v4 | (a2 << v3);
    }
  }
  return result;
}

void *ec_enc_shrink(uint64_t a1, unsigned int a2)
{
  double result = memmove((void *)(*(void *)a1 + a2 - *(unsigned int *)(a1 + 12)), (const void *)(*(void *)a1 + *(unsigned int *)(a1 + 8) - *(unsigned int *)(a1 + 12)), *(unsigned int *)(a1 + 12));
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

void ec_enc_done(uint64_t a1)
{
  unsigned int v3 = *(_DWORD *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 36);
  unsigned int v4 = __clz(v3);
  unsigned int v5 = ((0x7FFFFFFFu >> v4) + v2) & ((int)0x80000000 >> v4);
  if ((v5 | (0x7FFFFFFFu >> v4)) >= v2 + v3)
  {
    unsigned int v6 = 0x3FFFFFFFu >> v4;
    int v7 = -1073741824 >> v4++;
    unsigned int v5 = (v6 + v2) & v7;
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  do
  {
    ec_enc_carry_out((uint64_t *)a1, v5 >> 23);
    unsigned int v5 = (v5 & 0x7FFFFF) << 8;
    BOOL v8 = v4 >= 8;
    v4 -= 8;
  }
  while (v4 != 0 && v8);
LABEL_6:
  if ((*(_DWORD *)(a1 + 44) & 0x80000000) == 0 || *(_DWORD *)(a1 + 40)) {
    ec_enc_carry_out((uint64_t *)a1, 0);
  }
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  int v10 = *(_DWORD *)(a1 + 20);
  if (v10 <= 7)
  {
    if (*(_DWORD *)(a1 + 48)) {
      return;
    }
    goto LABEL_18;
  }
  do
  {
    unsigned int v12 = *(_DWORD *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 12);
    if (v11 + *(_DWORD *)(a1 + 28) >= v12)
    {
      int v13 = -1;
    }
    else
    {
      int v13 = 0;
      uint64_t v14 = *(void *)a1;
      int v15 = v11 + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(unsigned char *)(v14 + v12 - v15) = v9;
    }
    int v16 = *(_DWORD *)(a1 + 48) | v13;
    *(_DWORD *)(a1 + 48) = v16;
    v9 >>= 8;
    int v17 = v10 - 8;
    BOOL v18 = v10 <= 15;
    v10 -= 8;
  }
  while (!v18);
  int v10 = v17;
  if (!v16)
  {
LABEL_18:
    bzero((void *)(*(void *)a1 + *(unsigned int *)(a1 + 28)), (*(_DWORD *)(a1 + 8) - (*(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 12))));
    if (v10 >= 1)
    {
      unsigned int v20 = *(_DWORD *)(a1 + 8);
      unsigned int v19 = *(_DWORD *)(a1 + 12);
      if (v19 >= v20)
      {
        *(_DWORD *)(a1 + 48) = -1;
      }
      else
      {
        if (*(_DWORD *)(a1 + 28) + v19 >= v20 && v10 > (signed int)-v4)
        {
          v9 &= ~(-1 << -(char)v4);
          *(_DWORD *)(a1 + 48) = -1;
        }
        *(unsigned char *)(*(void *)a1 + v20 + ~v19) |= v9;
      }
    }
  }
}

uint64_t *ec_enc_carry_out(uint64_t *result, int a2)
{
  if (a2 == 255)
  {
    ++*((_DWORD *)result + 10);
  }
  else
  {
    int v2 = *((_DWORD *)result + 11);
    if ((v2 & 0x80000000) == 0)
    {
      uint64_t v3 = *((unsigned int *)result + 7);
      if ((*((_DWORD *)result + 3) + v3) >= *((_DWORD *)result + 2))
      {
        int v4 = -1;
      }
      else
      {
        int v4 = 0;
        uint64_t v5 = *result;
        *((_DWORD *)result + 7) = v3 + 1;
        *(unsigned char *)(v5 + v3) = v2 + BYTE1(a2);
      }
      *((_DWORD *)result + 12) |= v4;
    }
    for (int i = *((_DWORD *)result + 10); i; *((_DWORD *)result + 10) = i)
    {
      uint64_t v7 = *((unsigned int *)result + 7);
      if ((*((_DWORD *)result + 3) + v7) >= *((_DWORD *)result + 2))
      {
        int v8 = -1;
      }
      else
      {
        int v8 = 0;
        uint64_t v9 = *result;
        *((_DWORD *)result + 7) = v7 + 1;
        *(unsigned char *)(v9 + v7) = BYTE1(a2) - 1;
        int i = *((_DWORD *)result + 10);
      }
      *((_DWORD *)result + 12) |= v8;
      --i;
    }
    *((_DWORD *)result + 11) = a2;
  }
  return result;
}

uint64_t *ec_dec_init(uint64_t *result, unsigned __int8 *a2, int a3)
{
  *double result = (uint64_t)a2;
  *((_DWORD *)result + 2) = a3;
  *(_OWORD *)((char *)result + 12) = xmmword_220773610;
  *(uint64_t *)((char *)result + 28) = 0x8000000000;
  if (a3)
  {
    *((_DWORD *)result + 7) = 1;
    unsigned int v3 = *a2;
  }
  else
  {
    unsigned int v3 = 0;
  }
  *((_DWORD *)result + 9) = (v3 >> 1) ^ 0x7F;
  *((_DWORD *)result + 11) = v3;
  *((_DWORD *)result + 12) = 0;
  return ec_dec_normalize(result);
}

uint64_t *ec_dec_normalize(uint64_t *result)
{
  unsigned int v1 = *((_DWORD *)result + 8);
  if (v1 <= 0x800000)
  {
    unint64_t v2 = *((unsigned int *)result + 2);
    int v3 = *((_DWORD *)result + 11);
    unint64_t v4 = *((unsigned int *)result + 7);
    int v5 = *((_DWORD *)result + 9);
    int v6 = *((_DWORD *)result + 6) + 8;
    do
    {
      *((_DWORD *)result + 6) = v6;
      *((_DWORD *)result + 8) = v1 << 8;
      if (v4 >= v2)
      {
        int v8 = 0;
      }
      else
      {
        uint64_t v7 = *result;
        *((_DWORD *)result + 7) = v4 + 1;
        int v8 = *(unsigned __int8 *)(v7 + v4++);
      }
      int v5 = (((v8 | (v3 << 8)) >> 1) | ((v5 & 0x7FFFFF) << 8)) ^ 0xFF;
      *((_DWORD *)result + 11) = v8;
      *((_DWORD *)result + 9) = v5;
      v6 += 8;
      int v3 = v8;
      BOOL v9 = v1 > 0x8000;
      v1 <<= 8;
    }
    while (!v9);
  }
  return result;
}

uint64_t ec_decode(_DWORD *a1, unsigned int a2)
{
  unsigned int v2 = a1[9];
  unsigned int v3 = a1[8] / a2;
  a1[10] = v3;
  unsigned int v4 = v2 / v3 + 1;
  BOOL v5 = a2 >= v4;
  unsigned int v6 = a2 - v4;
  if (v5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t ec_decode_bin(_DWORD *a1, char a2)
{
  unsigned int v2 = a1[9];
  unsigned int v3 = a1[8] >> a2;
  a1[10] = v3;
  unsigned int v4 = v2 / v3 + 1;
  BOOL v5 = 1 << a2 >= v4;
  unsigned int v6 = (1 << a2) - v4;
  if (v5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t *ec_dec_update(uint64_t *result, int a2, int a3, int a4)
{
  int v4 = *((_DWORD *)result + 10);
  int v5 = v4 * (a4 - a3);
  *((_DWORD *)result + 9) -= v5;
  if (a2) {
    int v6 = v4 * (a3 - a2);
  }
  else {
    int v6 = *((_DWORD *)result + 8) - v5;
  }
  *((_DWORD *)result + 8) = v6;
  return ec_dec_normalize(result);
}

BOOL ec_dec_bit_logp(uint64_t a1, char a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 32);
  unsigned int v3 = *(_DWORD *)(a1 + 36);
  unsigned int v4 = v2 >> a2;
  if (v3 >= v2 >> a2) {
    *(_DWORD *)(a1 + 36) = v3 - (v2 >> a2);
  }
  unsigned int v5 = v2 - v4;
  BOOL v6 = v3 < v4;
  if (v3 >= v4) {
    unsigned int v4 = v5;
  }
  *(_DWORD *)(a1 + 32) = v4;
  ec_dec_normalize((uint64_t *)a1);
  return v6;
}

uint64_t ec_dec_icdf(uint64_t a1, unsigned __int8 *a2, char a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  unsigned int v3 = *(_DWORD *)(a1 + 36);
  unsigned int v5 = v4 >> a3;
  LODWORD(v6) = -1;
  do
  {
    unsigned int v7 = v4;
    int v8 = *a2++;
    unsigned int v4 = v5 * v8;
    uint64_t v6 = (v6 + 1);
  }
  while (v3 < v5 * v8);
  *(_DWORD *)(a1 + 32) = v7 - v4;
  *(_DWORD *)(a1 + 36) = v3 - v4;
  ec_dec_normalize((uint64_t *)a1);
  return v6;
}

uint64_t ec_dec_uint(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2 - 1;
  if (v3 < 0x100)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 36);
    unsigned int v15 = *(_DWORD *)(a1 + 32) / a2;
    *(_DWORD *)(a1 + 40) = v15;
    unsigned int v16 = v14 / v15 + 1;
    BOOL v10 = a2 >= v16;
    unsigned int v17 = a2 - v16;
    if (v10) {
      uint64_t v13 = v17;
    }
    else {
      uint64_t v13 = 0;
    }
    ec_dec_update((uint64_t *)a1, v13, v13 + 1, a2);
  }
  else
  {
    unsigned int v4 = __clz(v3);
    unsigned int v5 = 24 - v4;
    unsigned int v6 = (v3 >> (24 - v4)) + 1;
    unsigned int v7 = *(_DWORD *)(a1 + 36);
    unsigned int v8 = *(_DWORD *)(a1 + 32) / v6;
    *(_DWORD *)(a1 + 40) = v8;
    unsigned int v9 = v7 / v8 + 1;
    BOOL v10 = v6 >= v9;
    int v11 = v6 - v9;
    if (v10) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    ec_dec_update((uint64_t *)a1, v12, v12 + 1, v6);
    uint64_t v13 = (v12 << v5) | ec_dec_bits((uint64_t *)a1, v5);
    if (v13 > v3)
    {
      *(_DWORD *)(a1 + 48) = 1;
      return v3;
    }
  }
  return v13;
}

uint64_t ec_dec_bits(uint64_t *a1, unsigned int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  int v2 = *((_DWORD *)a1 + 5);
  if (v2 >= a2)
  {
    int v8 = *((_DWORD *)a1 + 5);
  }
  else
  {
    unsigned int v4 = *((_DWORD *)a1 + 2);
    unsigned int v5 = *((_DWORD *)a1 + 3);
    do
    {
      if (v5 >= v4)
      {
        int v7 = 0;
      }
      else
      {
        uint64_t v6 = *a1;
        *((_DWORD *)a1 + 3) = ++v5;
        int v7 = *(unsigned __int8 *)(v6 + v4 - v5);
      }
      v3 |= v7 << v2;
      int v8 = v2 + 8;
      BOOL v9 = v2 < 17;
      v2 += 8;
    }
    while (v9);
  }
  *((_DWORD *)a1 + 4) = v3 >> a2;
  *((_DWORD *)a1 + 5) = v8 - a2;
  *((_DWORD *)a1 + 6) += a2;
  return v3 & ~(-1 << a2);
}

uint64_t ec_tell_frac(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  unsigned int v2 = __clz(v1);
  unsigned int v3 = 32 - v2;
  unsigned int v4 = v1 >> (16 - v2);
  for (unsigned int i = 4; i > 1; --i)
  {
    int v6 = v4 * v4;
    unsigned int v3 = __PAIR64__(v3, v6) >> 31;
    unsigned int v4 = v6 >> 15 >> (v6 < 0);
  }
  return 8 * *(_DWORD *)(a1 + 24) - v3;
}

uint64_t hysteresis_decision(int a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a4 < 1)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 0;
    while (*(__int16 *)(a2 + 2 * result) <= a1)
    {
      if (a4 == ++result)
      {
        uint64_t result = a4;
        break;
      }
    }
  }
  if ((int)result > a5)
  {
    if (*(__int16 *)(a3 + 2 * a5) + *(__int16 *)(a2 + 2 * a5) <= a1) {
      uint64_t result = result;
    }
    else {
      uint64_t result = a5;
    }
  }
  if ((int)result < a5)
  {
    if (*(__int16 *)(a2 + 2 * a5 - 2) - *(__int16 *)(a3 + 2 * a5 - 2) >= a1) {
      return result;
    }
    else {
      return a5;
    }
  }
  return result;
}

uint64_t celt_lcg_rand(int a1)
{
  return (1664525 * a1 + 1013904223);
}

uint64_t compute_band_energies(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v32 = result;
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(result + 24);
  if (a5 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = a5;
  }
  uint64_t v11 = a4;
  uint64_t v29 = 4 * *(_DWORD *)(result + 40) * a6;
  uint64_t v30 = v10;
  do
  {
    if (a4 >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        signed int v13 = 0;
        int v14 = v12;
        LODWORD(v16) = *(__int16 *)(v9 + 2 * v12++) * a6;
        uint64_t v15 = *(__int16 *)(v9 + 2 * v12) * (uint64_t)a6;
        uint64_t v16 = (int)v16;
        uint64_t v17 = (int)v16;
        do
        {
          signed int v18 = *(_DWORD *)(a2 + 4 * v17);
          if (v13 <= v18) {
            signed int v13 = *(_DWORD *)(a2 + 4 * v17);
          }
          if (v13 <= -v18) {
            signed int v13 = -v18;
          }
          ++v17;
        }
        while (v17 < v15);
        if (v13 < 1)
        {
          int v28 = 1;
        }
        else
        {
          LODWORD(v19) = 0;
          unsigned int v20 = __clz(v13);
          unsigned int v21 = v20 ^ 0x1F;
          char v22 = v20 - 21;
          char v23 = 21 - v20;
          do
          {
            int v24 = *(_DWORD *)(a2 + 4 * v16);
            int v25 = v24 >> v23;
            int v26 = v24 << v22;
            if (v21 > 0xA) {
              LOWORD(v26) = v25;
            }
            uint64_t v19 = (v19 + (__int16)v26 * (__int16)v26);
            ++v16;
          }
          while (v16 < v15);
          uint64_t result = celt_sqrt(v19);
          int v27 = (int)result >> v22;
          if (v21 >= 0xA) {
            int v27 = result << v23;
          }
          int v28 = v27 + 1;
        }
        *(_DWORD *)(a3 + 4 * (v14 + *(_DWORD *)(v32 + 8) * (int)v8)) = v28;
      }
      while (v12 != v11);
    }
    ++v8;
    a2 += v29;
  }
  while (v8 != v30);
  return result;
}

uint64_t normalise_bands(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + 24);
  int v14 = *(_DWORD *)(a1 + 40) * a7;
  if (a5 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = a5;
  }
  if (a6 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = a6;
  }
  uint64_t v31 = v16;
  uint64_t v29 = 4 * v14;
  uint64_t v30 = 2 * v14;
  do
  {
    uint64_t v17 = 0;
    do
    {
      signed int v18 = *(_DWORD *)(a4 + 4 * ((int)v17 + *(_DWORD *)(a1 + 8) * (int)v12));
      unsigned int v19 = 31 - __clz(v18);
      if (v18 >= 1) {
        unsigned int v20 = v19;
      }
      else {
        unsigned int v20 = 0;
      }
      int v21 = v18 >> (v20 - 13);
      signed int v22 = v18 << (13 - v20);
      if (v20 > 0xD) {
        LOWORD(v22) = v21;
      }
      uint64_t result = celt_rcp(8 * (__int16)v22);
      LODWORD(v25) = *(__int16 *)(v13 + 2 * v17++) * a7;
      uint64_t v24 = *(__int16 *)(v13 + 2 * v17) * (uint64_t)a7;
      uint64_t v25 = (int)v25;
      do
      {
        int v26 = *(_DWORD *)(a2 + 4 * v25);
        int v27 = v26 << (14 - v20);
        int v28 = v26 >> (v20 - 14);
        if ((unsigned __int16)v20 <= 0xEu) {
          LOWORD(v28) = v27;
        }
        *(_WORD *)(a3 + 2 * v25++) = ((__int16)v28 * (__int16)result) >> 15;
      }
      while (v25 < v24);
    }
    while (v17 != v15);
    ++v12;
    a3 += v30;
    a2 += v29;
  }
  while (v12 != v31);
  return result;
}

void denormalise_bands(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = *(void *)(a1 + 24);
  int v14 = *(_DWORD *)(a1 + 40);
  int v15 = v14 * a8;
  uint64_t v39 = a5;
  __int16 v38 = *(_WORD *)(v13 + 2 * a5);
  int v16 = v38 * a8;
  uint64_t v37 = a2 + 2 * v16;
  uint64_t v17 = a6;
  int v18 = *(__int16 *)(v13 + 2 * a6);
  int v44 = v18 * a8;
  size_t v41 = 4 * v16;
  int v45 = v16;
  uint64_t v40 = a3 + 4 * (v16 - 1) + 4;
  uint64_t v36 = 4 * ((v14 - v18) * a8 - 1) + 4;
  uint64_t v19 = v14 * a8;
  if (a7 <= 1) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = a7;
  }
  uint64_t v43 = v20;
  uint64_t v48 = v15;
  do
  {
    uint64_t v21 = v11 * v19;
    int v49 = v12;
    if (v45 < 1)
    {
      signed int v22 = (int *)(a3 + 4 * v21);
    }
    else
    {
      signed int v22 = (int *)(v40 + 4 * v12);
      bzero((void *)(a3 + 4 * (int)v19 * (int)v11), v41);
    }
    if (a5 < a6)
    {
      char v23 = (__int16 *)(v37 + 2 * v21);
      LOWORD(v24) = v38;
      uint64_t v25 = v39;
      uint64_t v19 = v48;
      while (1)
      {
        int v26 = (__int16)v24 * a8;
        uint64_t v27 = v25 + 1;
        int v24 = *(__int16 *)(v13 + 2 * (v25 + 1));
        int v28 = v24 * a8;
        int v29 = (__int16)(*(_WORD *)(a4 + 2 * (v25 + v11 * *(int *)(a1 + 8))) + (eMeans[v25] << 6));
        if (v29 >= -15360)
        {
          unsigned int v30 = 16 - (v29 >> 10);
          unsigned int v31 = ((((((326528 * (v29 & 0x3FFu)) >> 16) + 14819) * 32 * (v29 & 0x3FF) + 1494482944) >> 16)
               * 32
               * (v29 & 0x3FF)
               + 1073676288) >> 16;
          if (v29 > 17407)
          {
            if (v30 == -1) {
              char v32 = -1;
            }
            else {
              char v32 = -2;
            }
            if (v30 >= 0xFFFFFFFE) {
              int v33 = v31;
            }
            else {
              int v33 = 0x7FFF;
            }
            do
            {
              int v34 = *v23++;
              *v22++ = (v33 * v34) << -v32;
              ++v26;
            }
            while (v26 < v28);
            goto LABEL_22;
          }
        }
        else
        {
          LOBYTE(v30) = 0;
          unsigned int v31 = 0;
        }
        do
        {
          int v35 = *v23++;
          *v22++ = (int)(v31 * v35) >> v30;
          ++v26;
        }
        while (v26 < v28);
LABEL_22:
        uint64_t v25 = v27;
        if (v27 == v17) {
          goto LABEL_25;
        }
      }
    }
    uint64_t v19 = v48;
LABEL_25:
    if (v44 < (int)v19)
    {
      bzero(v22, v36);
      uint64_t v19 = v48;
    }
    ++v11;
    int v12 = v49 + v19;
  }
  while (v11 != v43);
}

__int16 *anti_collapse(__int16 *result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a7 < a8)
  {
    int v15 = result;
    if (1 << a4 <= 1) {
      int v17 = 1;
    }
    else {
      int v17 = 1 << a4;
    }
    uint64_t v71 = a6;
    if (a5 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = a5;
    }
    uint64_t v66 = v18;
    uint64_t v19 = a7;
    uint64_t v63 = a8;
    uint64_t v64 = a5;
    int v67 = result;
    do
    {
      uint64_t v70 = v19;
      int v20 = *(__int16 *)(*((void *)v15 + 3) + 2 * (v19 + 1)) - *(__int16 *)(*((void *)v15 + 3) + 2 * v19);
      unsigned int v69 = v20 << a4;
      int v21 = (*(_DWORD *)(a12 + 4 * v19) + 1) / (v20 << a4);
      int v22 = (__int16)(-128 * v21);
      uint64_t v65 = v19 + 1;
      if (v22 <= 15359)
      {
        if (v22 >= -15360)
        {
          unsigned int v24 = (((((20408 * ((-2048 * v21) & 0x3800u)) >> 16) + 14819) * 2 * ((-2048 * v21) & 0x3800) + 1494482944) >> 16)
              * 2
              * ((-2048 * v21) & 0x3800)
              + 1073676288;
          int v25 = -2 - ((__int16)(-128 * v21) >> 10);
          unsigned int v26 = HIWORD(v24);
          if (v22 > -2049) {
            int v23 = v26 << -(char)v25;
          }
          else {
            int v23 = v26 >> v25;
          }
        }
        else
        {
          int v23 = 0;
        }
      }
      else
      {
        int v23 = 2130706432;
      }
      int v27 = v23 >> 1;
      if (v27 >= 0x7FFF) {
        int v28 = 0x7FFF;
      }
      else {
        int v28 = v27;
      }
      signed int v29 = 31 - __clz(v69);
      int v74 = v29 >> 1;
      uint64_t result = (__int16 *)celt_rsqrt_norm(v69 << (14 - (v29 & 0xFE)));
      int v73 = (int)result;
      uint64_t v30 = 0;
      int v31 = (__int16)(v28 >> 1);
      uint64_t v32 = v70;
      int v15 = v67;
      int v33 = a5;
      uint64_t v34 = v66;
      uint64_t v35 = a11;
      uint64_t v37 = a9;
      uint64_t v36 = a10;
      do
      {
        uint64_t v38 = *((int *)v15 + 2);
        uint64_t v39 = v32 + (int)v38 * (uint64_t)(int)v30;
        LOWORD(v40) = *(_WORD *)(v36 + 2 * v39);
        __int16 v41 = *(_WORD *)(v35 + 2 * v39);
        if (v33 == 1)
        {
          uint64_t v42 = v32 + v38;
          if ((__int16)v40 <= *(__int16 *)(v36 + 2 * v42)) {
            LOWORD(v40) = *(_WORD *)(v36 + 2 * v42);
          }
          int v43 = *(__int16 *)(v35 + 2 * v42);
          if (v41 <= v43) {
            __int16 v41 = v43;
          }
        }
        int v44 = *(__int16 *)(v37 + 2 * v39);
        int v40 = (__int16)v40;
        if ((__int16)v40 >= v41) {
          int v40 = v41;
        }
        unsigned int v45 = (v44 - v40) & ~((v44 - v40) >> 31);
        if (v45 >> 14)
        {
          __int16 v47 = 0;
        }
        else
        {
          if ((unsigned __int16)v45 <= 0x3C00u)
          {
            unsigned int v48 = (unsigned __int16)v45;
            int v49 = -v45;
            unsigned int v50 = (((((326528 * (v49 & 0x3FFu)) >> 16) + 14819) * 32 * (v49 & 0x3FF) + 1494482944) >> 16)
                * 32
                * (v49 & 0x3FF)
                + 1073676288;
            int v51 = -2 - ((__int16)v49 >> 10);
            unsigned int v52 = HIWORD(v50);
            if (v48 < 0x801) {
              int v46 = v52 << -(char)v51;
            }
            else {
              int v46 = v52 >> v51;
            }
          }
          else
          {
            int v46 = 0;
          }
          int v53 = v46 >> 1;
          if (v53 >= 0x3FFF) {
            LOWORD(v53) = 0x3FFF;
          }
          __int16 v47 = 2 * v53;
        }
        int v54 = v47;
        if (v47 >= 23169) {
          int v54 = 23169;
        }
        unsigned int v55 = (23170 * v54) >> 14;
        if (a4 == 3) {
          __int16 v47 = v55;
        }
        int v56 = v47;
        if (v31 < v47) {
          int v56 = v31;
        }
        if (a4 != 31)
        {
          int v57 = 0;
          int v58 = 0;
          int v59 = ((v56 >> 1) * v73) >> 15 >> v74;
          uint64_t result = (__int16 *)(a2 + 2 * v30 * v71 + 2 * (*(__int16 *)(*((void *)v15 + 3) + 2 * v32) << a4));
          do
          {
            if (((1 << v58) & *(unsigned __int8 *)(a3 + v30 + v70 * v64)) != 0)
            {
              BOOL v60 = 1;
            }
            else
            {
              int v57 = 1;
              BOOL v60 = v20 < 1;
            }
            if (!v60)
            {
              int v61 = 0;
              do
              {
                a13 = 1664525 * a13 + 1013904223;
                if ((a13 & 0x8000) != 0) {
                  __int16 v62 = v59;
                }
                else {
                  __int16 v62 = -(__int16)v59;
                }
                result[(v61++ << a4) + v58] = v62;
              }
              while (v20 != v61);
              int v57 = 1;
            }
            ++v58;
          }
          while (v58 != v17);
          if (v57)
          {
            uint64_t result = (__int16 *)renormalise_vector(result, v69, 0x7FFF);
            uint64_t v37 = a9;
            uint64_t v36 = a10;
            uint64_t v32 = v70;
            uint64_t v34 = v66;
            uint64_t v35 = a11;
            int v15 = v67;
            int v33 = a5;
          }
        }
        ++v30;
      }
      while (v30 != v34);
      uint64_t v19 = v65;
    }
    while (v65 != v63);
  }
  return result;
}

uint64_t spreading_decision(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, _DWORD *a5, int *a6, int a7, int a8, int a9, int a10)
{
  uint64_t v10 = *(__int16 **)(a1 + 24);
  if ((v10[a8] - v10[a8 - 1]) * a10 < 9) {
    return 0;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  int v14 = 0;
  int v15 = 0;
  if (a9 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = a9;
  }
  do
  {
    if (a8 >= 1)
    {
      uint64_t v17 = 0;
      __int16 v18 = *v10;
      do
      {
        uint64_t v19 = v17 + 1;
        int v20 = v10[v17 + 1];
        uint64_t v21 = ((v20 - v18) * a10);
        if ((int)v21 >= 9)
        {
          int v22 = 0;
          int v23 = 0;
          int v24 = 0;
          uint64_t v25 = v18 * a10;
          int v26 = (__int16)((v20 - v18) * a10);
          int v27 = (__int16 *)(a2 + 2 * v25);
          uint64_t v28 = v21;
          do
          {
            int v29 = *v27++;
            int v30 = (__int16)((v29 * v29) >> 15) * v26;
            if (v30 < 2048) {
              ++v24;
            }
            if (v30 < 512) {
              ++v23;
            }
            if (v30 < 128) {
              ++v22;
            }
            --v28;
          }
          while (v28);
          if (v17 > *(int *)(a1 + 8) - 4) {
            v15 += 32 * (v23 + v24) / (int)v21;
          }
          int v31 = (int)v21 <= 2 * v24;
          if ((int)v21 <= 2 * v23) {
            ++v31;
          }
          if ((int)v21 <= 2 * v22) {
            ++v31;
          }
          v13 += v31 << 8;
          ++v14;
        }
        __int16 v18 = v20;
        uint64_t v17 = v19;
      }
      while (v19 != a8);
    }
    ++v12;
    a2 += 2 * *(_DWORD *)(a1 + 40) * a10;
  }
  while (v12 != v16);
  if (a7)
  {
    if (v15) {
      int v32 = v15 / ((a8 - *(_DWORD *)(a1 + 8) + 4) * a9);
    }
    else {
      int v32 = 0;
    }
    int v33 = (*a5 + v32) >> 1;
    *a5 = v33;
    int v34 = v33 - 4;
    if (*a6 == 2) {
      v33 += 4;
    }
    if (!*a6) {
      int v33 = v34;
    }
    if (v33 <= 22) {
      int v35 = v33 > 18;
    }
    else {
      int v35 = 2;
    }
    *a6 = v35;
  }
  int v36 = *a3 + v13 / v14;
  *a3 = v36 >> 1;
  unsigned int v37 = (v36 & 0xFFFFFFFE) + (v36 >> 1) - (a4 << 7) + 450;
  if ((int)v37 < 320) {
    return 3;
  }
  if (v37 >= 0x400) {
    return v37 < 0x600;
  }
  return 2;
}

__int16 *haar1(__int16 *result, int a2, unsigned int a3)
{
  if ((int)a3 >= 1)
  {
    uint64_t v3 = 0;
    LODWORD(v4) = a2 >> 1;
    uint64_t v5 = a3;
    if (a2 >> 1 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    uint64_t v6 = 4 * a3;
    uint64_t v7 = 4 * a3;
    uint64_t v8 = &result[a3];
    do
    {
      if (a2 >= 2)
      {
        uint64_t v9 = v4;
        uint64_t v10 = v8;
        uint64_t v11 = result;
        do
        {
          int v12 = 46340 * *v11;
          int v13 = 46340 * *v10;
          *uint64_t v11 = HIWORD(v13) + HIWORD(v12);
          *uint64_t v10 = HIWORD(v12) - HIWORD(v13);
          uint64_t v11 = (__int16 *)((char *)v11 + v6);
          uint64_t v10 = (__int16 *)((char *)v10 + v7);
          --v9;
        }
        while (v9);
      }
      ++v3;
      ++result;
      ++v8;
    }
    while (v3 != v5);
  }
  return result;
}

void quant_all_bands(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, int a12, unsigned int a13, uint64_t a14, int a15, int a16, uint64_t a17, int a18, unsigned int a19, _DWORD *a20)
{
  uint64_t v209 = a8;
  uint64_t v194 = a5;
  uint64_t v208 = a4;
  uint64_t v206 = a13;
  unsigned int v205 = a11;
  uint64_t v219 = *MEMORY[0x263EF8340];
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v195 = a6;
  int v25 = a6 != 0;
  long long v212 = 0u;
  long long v213 = 0u;
  long long v210 = 0u;
  long long v211 = 0u;
  if (a10) {
    int v26 = 1 << a18;
  }
  else {
    int v26 = 1;
  }
  int v200 = v26;
  int v27 = *(__int16 *)(v24 + 2 * a3);
  uint64_t v28 = *(int *)(a2 + 8);
  uint64_t v196 = v24;
  uint64_t v29 = v24 + 2 * v28;
  LODWORD(v28) = *(__int16 *)(v29 - 2);
  int v193 = v27;
  size_t v30 = 2 * (((int)v28 - v27) << a18 << v25);
  int v31 = (char *)&v166 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v31, v30);
  int v32 = *(__int16 *)(v29 - 2);
  *(void *)&long long v213 = v209;
  uint64_t v191 = a17;
  *(void *)&long long v212 = a17;
  int v202 = a1;
  LODWORD(v210) = a1;
  uint64_t v192 = a2;
  *((void *)&v210 + 1) = a2;
  int v167 = a20;
  int v33 = *a20;
  DWORD2(v213) = *a20;
  *(void *)((char *)&v211 + 4) = __PAIR64__(v205, v206);
  if (a3 < (int)v208)
  {
    int v207 = 0;
    int v34 = v193 << a18;
    uint64_t v35 = v32 << a18;
    if (v195) {
      int v36 = (__int16 *)v31;
    }
    else {
      int v36 = 0;
    }
    char v189 = v36;
    BOOL v37 = v205 == 3 && v200 <= 1;
    int v38 = !v37;
    int v188 = v38;
    int v187 = ~(-1 << v200);
    uint64_t v178 = a19;
    uint64_t v186 = (int)a19;
    uint64_t v185 = (int)v208;
    uint64_t v184 = (int)v208 - 1;
    uint64_t v181 = (int)v206;
    int v183 = a15;
    uint64_t v182 = a14;
    int v203 = a12;
    uint64_t v40 = v196;
    uint64_t v177 = v196 - 2;
    uint64_t v176 = v196 + 2;
    uint64_t v41 = (uint64_t)&v31[2 * (int)v35 + -2 * v34];
    char v190 = (__int16 *)v31;
    uint64_t v175 = &v31[-2 * v34];
    uint64_t v201 = a9;
    uint64_t v199 = a3;
    uint64_t v42 = a3;
    BOOL v43 = 1;
    int v44 = (__int16 *)(v194 + 2 * v35);
    int v179 = v193 << a18;
    uint64_t v197 = v41;
    uint64_t v166 = v41 - 2 * v34;
    while (1)
    {
      uint64_t v209 = v42;
      unsigned int v45 = v44;
      LODWORD(v211) = v42;
      int v46 = *(__int16 *)(v40 + 2 * v42);
      int v47 = v46 << a18;
      if (v195) {
        unsigned int v48 = (__int16 *)(v195 + 2 * v47);
      }
      else {
        unsigned int v48 = 0;
      }
      uint64_t v206 = v42 + 1;
      int v49 = *(__int16 *)(v40 + 2 * (v42 + 1));
      unsigned int v50 = ec_tell_frac(v191);
      uint64_t v51 = v209;
      unsigned int v52 = 0;
      if (v209 == v199) {
        unsigned int v53 = 0;
      }
      else {
        unsigned int v53 = v50;
      }
      int v54 = a16 - v53;
      unsigned int v205 = v50;
      int v55 = v183 - v50;
      DWORD2(v212) = v183 - v50 - 1;
      if (v209 < v186)
      {
        int v56 = v178 - v209;
        if ((int)v178 - (int)v209 >= 3) {
          int v56 = 3;
        }
        int v57 = *(_DWORD *)(v201 + 4 * v209) + v54 / v56;
        if (v55 >= v57) {
          int v55 = v57;
        }
        int v58 = v55 & ~(v55 >> 31);
        if (v58 >= 0x3FFF) {
          unsigned int v52 = 0x3FFF;
        }
        else {
          unsigned int v52 = v58;
        }
      }
      int v59 = v49 - v46;
      int v204 = v54;
      if (v202)
      {
        uint64_t v60 = v194;
        uint64_t v40 = v196;
        int v61 = v200;
        int v62 = v193;
        uint64_t v63 = v190;
        int v64 = v207;
        uint64_t v65 = v184;
        uint64_t v66 = v197;
      }
      else
      {
        uint64_t v40 = v196;
        uint64_t v60 = v194;
        int v61 = v200;
        int v62 = v193;
        uint64_t v63 = v190;
        int v64 = v207;
        uint64_t v65 = v184;
        uint64_t v66 = v197;
        if ((*(__int16 *)(v196 + 2 * v209) - v59) << a18 >= *(__int16 *)(v196 + 2 * v199) << a18 && (v43 || v207 == 0)) {
          int v64 = v209;
        }
      }
      BOOL v68 = (__int16 *)(v60 + 2 * v47);
      int v69 = *(_DWORD *)(v182 + 4 * v209);
      uint64_t v70 = (v59 << a18);
      HIDWORD(v211) = v69;
      uint64_t v71 = *(int *)(v192 + 12);
      BOOL v72 = v209 < v71;
      if (v209 >= v71) {
        int v73 = 0;
      }
      else {
        int v73 = v45;
      }
      if (v72) {
        int v74 = v68;
      }
      else {
        int v74 = v63;
      }
      if (v72) {
        int v75 = v48;
      }
      else {
        int v75 = v189;
      }
      if (v209 == v65) {
        int v44 = 0;
      }
      else {
        int v44 = v73;
      }
      if (v69 < 0) {
        int v76 = 1;
      }
      else {
        int v76 = v188;
      }
      int v77 = -1;
      if (v64)
      {
        int v78 = v187;
        int v79 = v187;
        if (v76)
        {
          int v80 = (*(__int16 *)(v40 + 2 * v64) - v62 - v59) << a18;
          int v77 = v80 & ~(v80 >> 31);
          int v81 = v77 + v179;
          int v82 = (__int16 *)(v177 + 2 * v64);
          int v83 = v64;
          do
          {
            int v84 = *v82--;
            --v83;
          }
          while (v84 << a18 > v81);
          int v85 = v81 + v70;
          int v86 = v64 - 2;
          int v87 = (__int16 *)(v176 + 2 * (v64 - 1));
          do
          {
            int v88 = *v87++;
            ++v86;
          }
          while (v88 << a18 < v85);
          int v79 = 0;
          int v78 = 0;
          do
          {
            v79 |= *(unsigned __int8 *)(a7 + (v83 << v25));
            v78 |= *(unsigned __int8 *)(a7 + (v83 << v25) + v25);
            BOOL v37 = v83++ < v86;
          }
          while (v37);
        }
      }
      else
      {
        int v78 = v187;
        int v79 = v187;
      }
      int v207 = v64;
      if (v203)
      {
        if (v202 || v209 != v181)
        {
          if (v209 != v181)
          {
            uint64_t v180 = v44;
            unsigned int v198 = v52;
            int v90 = v52 >> 1;
            *(void *)&v172[4] = v77;
            if (v77 == -1) {
              int v91 = 0;
            }
            else {
              int v91 = &v63[v77];
            }
            LODWORD(v173) = v52 >> 1;
            if (v209 == v65)
            {
              int v92 = v74;
              uint64_t v93 = v70;
              int v94 = v61;
              LODWORD(v174) = quant_band((int *)&v210, v92, v70, v90, v61, v91, a18, 0, 0x7FFF, 0, v79);
              uint64_t v95 = 0;
              if (v77 == -1) {
                uint64_t v96 = 0;
              }
              else {
                uint64_t v96 = (__int16 *)(v197 + 2 * *(void *)&v172[4]);
              }
            }
            else
            {
              uint64_t v126 = v209;
              uint64_t v127 = v74;
              uint64_t v93 = v70;
              int v94 = v61;
              LODWORD(v174) = quant_band((int *)&v210, v127, v70, v90, v61, v91, a18, &v175[2 * (*(__int16 *)(v40 + 2 * v209) << a18)], 0x7FFF, v73, v79);
              if (v77 == -1) {
                uint64_t v96 = 0;
              }
              else {
                uint64_t v96 = (__int16 *)(v197 + 2 * *(void *)&v172[4]);
              }
              uint64_t v95 = (_WORD *)(v166 + 2 * (*(__int16 *)(v40 + 2 * v126) << a18));
            }
            int v128 = v94;
            int v44 = v180;
            char v114 = quant_band((int *)&v210, v75, v93, (int)v173, v128, v96, a18, v95, 0x7FFF, v180, v78);
            uint64_t v103 = v206;
            unsigned int v104 = v205;
            int v105 = v198;
            LODWORD(v100) = v93;
            LOBYTE(v102) = (_BYTE)v174;
            goto LABEL_121;
          }
        }
        else if ((*(__int16 *)(v40 + 2 * v209) - v62) << a18 >= 1)
        {
          uint64_t v89 = 0;
          do
          {
            v63[v89] = (*(__int16 *)(v66 + 2 * v89) + v63[v89]) >> 1;
            ++v89;
          }
          while (v89 < (*(__int16 *)(v40 + 2 * v51) - v62) << a18);
        }
      }
      if (v77 == -1) {
        int v97 = 0;
      }
      else {
        int v97 = &v63[v77];
      }
      uint64_t v208 = v70;
      if (v75)
      {
        if (v51 == v65) {
          int v98 = 0;
        }
        else {
          int v98 = &v175[2 * (*(__int16 *)(v40 + 2 * v51) << a18)];
        }
        int v99 = v78 | v79;
        unsigned int v198 = v52;
        int v217 = v78 | v79;
        int v218 = v52;
        if (v70 == 1)
        {
          quant_band_n1((uint64_t)&v210, v74, v75, v98);
          LODWORD(v100) = v208;
          uint64_t v101 = v209;
          LOBYTE(v102) = 1;
          uint64_t v103 = v206;
          unsigned int v104 = v205;
          int v105 = v198;
LABEL_159:
          int v203 = 0;
          char v114 = v102;
          goto LABEL_160;
        }
        uint64_t v173 = v98;
        uint64_t v174 = v97;
        int v203 = v210;
        int v106 = (uint64_t *)v212;
        uint64_t v214 = 0;
        uint64_t v215 = 0;
        uint64_t v216 = 0;
        compute_theta((int *)&v210, (uint64_t)&v214, v74, v75, v208, &v218, v61, v61, a18, 1, &v217);
        *(void *)int v172 = v214;
        if (v208 == 2)
        {
          int v107 = v106;
          int v108 = v218;
          if ((v216 & 0xFFFFBFFF) != 0) {
            int v109 = -8;
          }
          else {
            int v109 = 0;
          }
          DWORD2(v212) += v109 - HIDWORD(v216);
          if ((int)v216 <= 0x2000) {
            unsigned int v110 = v74;
          }
          else {
            unsigned int v110 = v75;
          }
          if ((int)v216 <= 0x2000) {
            unsigned int v111 = v75;
          }
          else {
            unsigned int v111 = v74;
          }
          int v171 = v215;
          if ((v216 & 0xFFFFBFFF) != 0)
          {
            int v168 = v109;
            int v169 = v218;
            if (v203)
            {
              int v170 = v111[1] * *v110 < *v111 * v110[1];
              ec_enc_bits(v107, v170, 1);
            }
            else
            {
              int v170 = ec_dec_bits(v107, 1u);
            }
            int v108 = v169;
            int v109 = v168;
          }
          else
          {
            int v170 = 0;
          }
          LOBYTE(v102) = quant_band((int *)&v210, v110, 2, v108 + v109, v200, v174, a18, v173, 0x7FFF, v44, v99);
          __int16 v142 = 2 * v170;
          *unsigned int v111 = (2 * v170 - 1) * v110[1];
          v111[1] = *v110 - *v110 * v142;
          if (v203)
          {
            uint64_t v103 = v206;
            unsigned int v104 = v205;
            int v105 = v198;
            LODWORD(v100) = v208;
            uint64_t v101 = v209;
            goto LABEL_159;
          }
          int v143 = *(__int16 *)&v172[4];
          *int v74 = (*(__int16 *)&v172[4] * *v74) >> 15;
          v74[1] = (v143 * v74[1]) >> 15;
          int v144 = (__int16)v171;
          unsigned int v145 = (__int16)v171 * *v75;
          *int v75 = v145 >> 15;
          v75[1] = (v144 * v75[1]) >> 15;
          LOWORD(v144) = *v74;
          *v74 -= v145 >> 15;
          *v75 += v144;
          LOWORD(v144) = v74[1];
          v74[1] = v144 - v75[1];
          v75[1] += v144;
          int v105 = v198;
          uint64_t v100 = v208;
          uint64_t v101 = v209;
        }
        else
        {
          int v170 = v216;
          int v115 = v217;
          int v116 = v218 - HIDWORD(v215);
          if (v218 < SHIDWORD(v215)) {
            ++v116;
          }
          if (v218 >= v116 >> 1) {
            int v117 = v116 >> 1;
          }
          else {
            int v117 = v218;
          }
          int v118 = v117 & ~(v117 >> 31);
          int v119 = DWORD2(v212) - HIDWORD(v216);
          DWORD2(v212) -= HIDWORD(v216);
          uint64_t v180 = v44;
          if (v118 >= v218 - v118)
          {
            int v164 = v44;
            int v169 = v218 - v118;
            int v129 = v200;
            int v171 = v215;
            LODWORD(v174) = quant_band((int *)&v210, v74, v208, v117 & ~(v117 >> 31), v200, v174, a18, v173, 0x7FFF, v164, v217);
            int v130 = DWORD2(v212) - v119 + v118;
            if (v170) {
              BOOL v131 = v130 <= 24;
            }
            else {
              BOOL v131 = 1;
            }
            if (v131) {
              int v132 = 0;
            }
            else {
              int v132 = v130 - 24;
            }
            int v124 = quant_band((int *)&v210, v75, v208, v132 + v169, v129, 0, a18, 0, v171, 0, v115 >> v129);
            int v125 = &v209;
          }
          else
          {
            int v120 = v218 - v118;
            int v171 = quant_band((int *)&v210, v75, v208, v218 - v118, v200, 0, a18, 0, v215, 0, v217 >> v200);
            int v121 = DWORD2(v212) - v119 + v120;
            if (v170 == 0x4000 || v121 <= 24) {
              int v123 = 0;
            }
            else {
              int v123 = v121 - 24;
            }
            int v124 = quant_band((int *)&v210, v74, v208, v123 + v118, v200, v174, a18, v173, 0x7FFF, v180, v115);
            int v125 = &v206;
          }
          int v102 = v124 | *((_DWORD *)v125 - 64);
          int v105 = v198;
          uint64_t v101 = v209;
          if (v203)
          {
            uint64_t v103 = v206;
            unsigned int v104 = v205;
            LODWORD(v100) = v208;
            int v44 = v180;
            goto LABEL_159;
          }
          uint64_t v100 = v208;
          if ((int)v208 < 1)
          {
            int v134 = 0;
            int v133 = 0;
            __int16 v138 = *(_WORD *)&v172[4];
          }
          else
          {
            int v133 = 0;
            int v134 = 0;
            int v135 = v75;
            uint64_t v136 = v74;
            uint64_t v137 = v208;
            __int16 v138 = *(_WORD *)&v172[4];
            do
            {
              int v140 = *v135++;
              int v139 = v140;
              int v141 = *v136++;
              v134 += v141 * v139;
              v133 += v139 * v139;
              --v137;
            }
            while (v137);
          }
          int v146 = v138;
          int v147 = v133 + (v138 >> 1) * (v138 >> 1);
          int v148 = (v134 >> 16) * 4 * v138 + 2 * (((unsigned __int16)v134 * v138) >> 15);
          unsigned int v149 = v147 - v148;
          unsigned int v150 = v148 + v147;
          if (v148 + v147 < 161061 || (int)v149 < 161061)
          {
            int v44 = v180;
            if ((int)v208 < 1)
            {
              uint64_t v103 = v206;
              unsigned int v104 = v205;
              goto LABEL_159;
            }
            int v152 = v75;
            uint64_t v153 = v208;
            do
            {
              __int16 v154 = *v74++;
              *v152++ = v154;
              --v153;
            }
            while (v153);
          }
          else
          {
            LODWORD(v174) = v102;
            unsigned int v155 = 31 - __clz(v149);
            unsigned int v156 = 31 - __clz(v150);
            int v157 = celt_rsqrt_norm(v149 >> ((v155 & 0xFE) - 14));
            int v158 = celt_rsqrt_norm(v150 >> ((v156 & 0xFE) - 14));
            uint64_t v100 = v208;
            if ((int)v208 < 1)
            {
              uint64_t v40 = v196;
              int v44 = v180;
              uint64_t v103 = v206;
              unsigned int v104 = v205;
              int v105 = v198;
              LOBYTE(v102) = (_BYTE)v174;
              uint64_t v101 = v209;
              goto LABEL_159;
            }
            __int32 v159 = v75;
            uint64_t v160 = v208;
            int v44 = v180;
            int v105 = v198;
            uint64_t v101 = v209;
            do
            {
              unsigned int v161 = v146 * *v74;
              __int16 v162 = *v159;
              *v74++ = (int)(((2 << (v155 >> 1)) >> 1) + (__int16)((v161 >> 15) - *v159) * v157) >> ((v155 >> 1) + 1);
              *v159++ = (int)(((2 << (v156 >> 1)) >> 1) + (__int16)(v162 + (v161 >> 15)) * v158) >> ((v156 >> 1) + 1);
              --v160;
            }
            while (v160);
            uint64_t v40 = v196;
            LOBYTE(v102) = (_BYTE)v174;
          }
        }
        uint64_t v103 = v206;
        unsigned int v104 = v205;
        if ((int)v100 >= 1 && *(_DWORD *)v172)
        {
          uint64_t v163 = v100;
          do
          {
            *int v75 = -*v75;
            ++v75;
            --v163;
          }
          while (v163);
        }
        goto LABEL_159;
      }
      if (v51 == v65) {
        int v112 = 0;
      }
      else {
        int v112 = &v175[2 * (*(__int16 *)(v40 + 2 * v51) << a18)];
      }
      int v165 = v78 | v79;
      unsigned int v113 = v52;
      char v114 = quant_band((int *)&v210, v74, v70, v52, v61, v97, a18, v112, 0x7FFF, v44, v165);
      LODWORD(v100) = v208;
      int v105 = v113;
      LOBYTE(v102) = v114;
      int v203 = 0;
      uint64_t v103 = v206;
      unsigned int v104 = v205;
LABEL_121:
      uint64_t v101 = v209;
LABEL_160:
      *(unsigned char *)(a7 + (int)(v101 << v25)) = v102;
      *(unsigned char *)(a7 + (v101 << v25) + v25) = v114;
      a16 = v204 + v104 + *(_DWORD *)(v201 + 4 * v101);
      BOOL v43 = v105 > 8 * (int)v100;
      uint64_t v42 = v103;
      if (v103 >= v185)
      {
        int v33 = DWORD2(v213);
        break;
      }
    }
  }
  *int v167 = v33;
}

uint64_t quant_band(int *a1, __int16 *a2, uint64_t a3, int a4, int a5, __int16 *a6, int a7, _WORD *a8, __int16 a9, __int16 *a10, int a11)
{
  uint64_t v11 = a3;
  int v12 = a2;
  if (a3 == 1)
  {
    quant_band_n1((uint64_t)a1, a2, 0, a8);
    return v11;
  }
  int v13 = a6;
  int v16 = *a1;
  int v17 = a1[7] & ~(a1[7] >> 31);
  int v18 = (int)a3 / a5;
  int v50 = a1[7];
  int v51 = v17;
  BOOL v44 = a5 == 1;
  if (a6 && a10)
  {
    if (v50 <= 0)
    {
      BOOL v33 = (v18 & 1) != 0 || v50 == 0;
      BOOL v34 = !v33;
      if (a5 <= 1 && !v34)
      {
        char v45 = 1;
        goto LABEL_18;
      }
    }
    if ((int)a3 >= 1)
    {
      uint64_t v19 = 0;
      do
      {
        a10[v19] = a6[v19];
        ++v19;
      }
      while (a3 != v19);
    }
    int v13 = a10;
  }
  char v45 = 1;
  if (v50 >= 1)
  {
    int v46 = (int)a3 / a5;
    int v20 = 0;
    do
    {
      uint64_t v21 = v11;
      int v22 = (int)v11 >> v20;
      if (v16) {
        haar1(v12, v22, 1 << v20);
      }
      if (v13) {
        haar1(v13, v22, 1 << v20);
      }
      a11 = quant_band_bit_interleave_table[a11 & 0xF] | (4 * quant_band_bit_interleave_table[a11 >> 4]);
      ++v20;
      uint64_t v11 = v21;
    }
    while (v51 != v20);
    char v45 = 0;
    LOBYTE(v17) = v51;
    int v18 = v46;
  }
LABEL_18:
  int v23 = 0;
  int v24 = a5 >> v17;
  int v25 = v18 << v17;
  if (((v18 << v17) & 1) != 0 || (v50 & 0x80000000) == 0)
  {
    int v27 = v18 << v17;
  }
  else
  {
    int v26 = 0;
    do
    {
      if (v16) {
        haar1(v12, v25, v24);
      }
      if (v13) {
        haar1(v13, v25, v24);
      }
      a11 |= a11 << v24;
      v24 *= 2;
      int v27 = v25 >> 1;
      int v23 = v26 + 1;
      if ((v25 & 2) != 0) {
        break;
      }
      int v28 = v50 + v26++;
      v25 >>= 1;
    }
    while (v28 < -1);
  }
  if (v24 < 2)
  {
    int v42 = a11;
    int v31 = v11;
    uint64_t v11 = quant_partition((uint64_t)a1, v12, v11, a4, v24, v13, a7, a9, v42);
    if (v16) {
      return v11;
    }
    goto LABEL_37;
  }
  int v29 = v27 >> v51;
  int v30 = v24 << v51;
  if (v16) {
    deinterleave_hadamard(v12, v27 >> v51, v24 << v51, v44);
  }
  if (v13) {
    deinterleave_hadamard(v13, v29, v30, v44);
  }
  int v41 = a11;
  int v31 = v11;
  uint64_t v11 = quant_partition((uint64_t)a1, v12, v11, a4, v24, v13, a7, a9, v41);
  if (!v16)
  {
    interleave_hadamard((char *)v12, v29, v30, v44);
LABEL_37:
    while (v23)
    {
      v24 >>= 1;
      v27 *= 2;
      LODWORD(v11) = (v11 >> v24) | v11;
      haar1(v12, v27, v24);
      --v23;
    }
    if (v45)
    {
      char v32 = v51;
    }
    else
    {
      int v35 = 0;
      char v32 = v51;
      do
      {
        LODWORD(v11) = quant_band_bit_deinterleave_table[v11];
        haar1(v12, v31 >> v35, 1 << v35);
        ++v35;
      }
      while (v51 != v35);
    }
    int v36 = a8;
    if (a8)
    {
      __int16 v37 = celt_sqrt((v31 << 22));
      if (v31 >= 1)
      {
        uint64_t v38 = v31;
        do
        {
          int v39 = *v12++;
          *v36++ = (v37 * v39) >> 15;
          --v38;
        }
        while (v38);
      }
    }
    return v11 & ~(-1 << (v24 << v32));
  }
  return v11;
}

uint64_t quant_band_n1(uint64_t result, __int16 *a2, __int16 *a3, _WORD *a4)
{
  uint64_t v7 = result;
  int v8 = *(_DWORD *)result;
  uint64_t v9 = *(uint64_t **)(result + 32);
  int v10 = *(_DWORD *)(result + 40);
  char v11 = 1;
  int v12 = a2;
  do
  {
    if (v10 < 8)
    {
      int v13 = 0;
      if (v8) {
        goto LABEL_13;
      }
LABEL_9:
      if (v13) {
        __int16 v14 = -16384;
      }
      else {
        __int16 v14 = 0x4000;
      }
      *int v12 = v14;
      goto LABEL_13;
    }
    if (v8)
    {
      int v13 = (unsigned __int16)*v12 >> 15;
      uint64_t result = (uint64_t)ec_enc_bits(v9, v13, 1);
    }
    else
    {
      uint64_t result = ec_dec_bits(v9, 1u);
      int v13 = result;
    }
    int v10 = *(_DWORD *)(v7 + 40) - 8;
    *(_DWORD *)(v7 + 40) = v10;
    if (!v8) {
      goto LABEL_9;
    }
LABEL_13:
    char v15 = (a3 != 0) & v11;
    int v12 = a3;
    char v11 = 0;
  }
  while ((v15 & 1) != 0);
  if (a4) {
    *a4 = *a2 >> 4;
  }
  return result;
}

void deinterleave_hadamard(_WORD *a1, int a2, int a3, int a4)
{
  v22[1] = *MEMORY[0x263EF8340];
  int v8 = a3 * a2;
  size_t v9 = 2 * a3 * a2;
  int v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v10, v9);
  if (a4)
  {
    if (a3 >= 1)
    {
      uint64_t v11 = 0;
      int v12 = a1;
      do
      {
        if (a2 >= 1)
        {
          int v13 = &v10[2 * ordery_table[a3 - 2 + v11] * a2];
          uint64_t v14 = a2;
          char v15 = v12;
          do
          {
            *(_WORD *)int v13 = *v15;
            v13 += 2;
            v15 += a3;
            --v14;
          }
          while (v14);
        }
        ++v11;
        ++v12;
      }
      while (v11 != a3);
    }
  }
  else if (a3 >= 1)
  {
    uint64_t v16 = 0;
    int v17 = a1;
    int v18 = v10;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v19 = a2;
        int v20 = v17;
        uint64_t v21 = v18;
        do
        {
          *v21++ = *v20;
          v20 += a3;
          --v19;
        }
        while (v19);
      }
      ++v16;
      v18 += a2;
      ++v17;
    }
    while (v16 != a3);
  }
  if (v8 >= 1) {
    memcpy(a1, v10, 2 * v8);
  }
}

uint64_t quant_partition(uint64_t a1, __int16 *a2, int a3, int a4, int a5, __int16 *a6, int a7, int a8, int a9)
{
  char v9 = a7;
  int v14 = a9;
  int v84 = a4;
  int v15 = *(_DWORD *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  int v17 = *(_DWORD *)(a1 + 16);
  int v18 = *(_DWORD *)(a1 + 24);
  uint64_t v19 = *(uint64_t **)(a1 + 32);
  uint64_t v21 = *(void *)(v16 + 128);
  uint64_t v20 = *(void *)(v16 + 136);
  if (a7 == -1)
  {
    uint64_t v23 = v17;
  }
  else
  {
    int v22 = *(_DWORD *)(v16 + 8) + *(_DWORD *)(v16 + 8) * a7 + v17;
    uint64_t v23 = v22;
    if (a3 >= 3)
    {
      int v24 = (unsigned __int8 *)(v20 + *(__int16 *)(v21 + 2 * v22));
      if (v24[*v24] + 12 < a4)
      {
        uint64_t v81 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        uint64_t v25 = a3 >> 1;
        int v26 = &a2[v25];
        if (a5 == 1) {
          a9 = a9 & 1 | (2 * a9);
        }
        uint64_t v27 = ((a5 + 1) >> 1);
        unsigned int v79 = a7 - 1;
        compute_theta((int *)a1, (uint64_t)&v81, a2, &a2[v25], v25, &v84, (a5 + 1) >> 1, a5, a7 - 1, 0, &a9);
        __int16 v28 = WORD2(v81);
        __int16 v29 = v82;
        int v30 = HIDWORD(v82);
        int v31 = v83;
        int v32 = (HIDWORD(v82) + ((8 * (int)v25) >> (6 - v9))) & ((HIDWORD(v82) + ((8 * (int)v25) >> (6 - v9))) >> 31);
        if ((int)v83 > 0x2000) {
          int v32 = HIDWORD(v82) - (SHIDWORD(v82) >> (5 - v9));
        }
        if ((v83 & 0x3FFF) != 0) {
          int v33 = v32;
        }
        else {
          int v33 = HIDWORD(v82);
        }
        if (a5 >= 2) {
          int v30 = v33;
        }
        BOOL v34 = __OFSUB__(v84, v30);
        int v35 = v84 - v30;
        if (v35 < 0 != v34) {
          ++v35;
        }
        if (v84 >= v35 >> 1) {
          int v36 = v35 >> 1;
        }
        else {
          int v36 = v84;
        }
        uint64_t v37 = v36 & ~(v36 >> 31);
        int v75 = a5;
        uint64_t v38 = (v84 - v37);
        int v39 = *(_DWORD *)(a1 + 40) - HIDWORD(v83);
        *(_DWORD *)(a1 + 40) = v39;
        if (a6) {
          uint64_t v40 = &a6[v25];
        }
        else {
          uint64_t v40 = 0;
        }
        int v41 = a9;
        if ((int)v37 >= (int)v38)
        {
          __int16 v72 = v29;
          int v74 = v40;
          int v78 = quant_partition(a1, a2, v25, v37, v27, a6, v79, (__int16)((v28 * a8 + 0x4000) >> 15), a9);
          int v60 = *(_DWORD *)(a1 + 40) - v39 + v37;
          if (v31) {
            BOOL v61 = v60 <= 24;
          }
          else {
            BOOL v61 = 1;
          }
          if (v61) {
            int v62 = 0;
          }
          else {
            int v62 = v60 - 24;
          }
          return (quant_partition(a1, v26, v25, (v62 + v38), v27, v74, v79, (__int16)((v72 * a8 + 0x4000) >> 15), v41 >> v27) << (v75 >> 1)) | v78;
        }
        else
        {
          __int16 v73 = v28;
          unsigned int v76 = quant_partition(a1, v26, v25, v38, v27, v40, v79, (__int16)((v29 * a8 + 0x4000) >> 15), a9 >> v27) << (v75 >> 1);
          int v42 = *(_DWORD *)(a1 + 40) - v39 + v38;
          if (v31 == 0x4000 || v42 <= 24) {
            int v44 = 0;
          }
          else {
            int v44 = v42 - 24;
          }
          return quant_partition(a1, a2, v25, (v44 + v37), v27, a6, v79, (__int16)((v73 * a8 + 0x4000) >> 15), v41) | v76;
        }
      }
    }
  }
  int v46 = 0;
  int v47 = (unsigned __int8 *)(v20 + *(__int16 *)(v21 + 2 * v23));
  int v48 = *v47;
  int v49 = a4 - 1;
  int v50 = 6;
  do
  {
    if (v49 <= v47[(v48 + v46 + 1) >> 1]) {
      int v48 = (v48 + v46 + 1) >> 1;
    }
    else {
      int v46 = (v48 + v46 + 1) >> 1;
    }
    --v50;
  }
  while (v50);
  if (v46) {
    int v51 = v47[v46];
  }
  else {
    int v51 = -1;
  }
  if (v49 - v51 <= v47[v48] - v49) {
    uint64_t v52 = v46;
  }
  else {
    uint64_t v52 = v48;
  }
  if (!v52) {
    goto LABEL_57;
  }
  int v53 = v47[(int)v52] + 1;
  int v54 = *(_DWORD *)(a1 + 40) - v53;
  *(_DWORD *)(a1 + 40) = v54;
  if (v54 < 0 && (int)v52 >= 1)
  {
    uint64_t v55 = v52 - 1;
    do
    {
      int v56 = v53 + v54;
      *(_DWORD *)(a1 + 40) = v56;
      int v57 = v55;
      if (v55) {
        int v53 = v47[v55] + 1;
      }
      else {
        int v53 = 0;
      }
      int v54 = v56 - v53;
      *(_DWORD *)(a1 + 40) = v54;
      LODWORD(v52) = v52 - 1;
      if ((v54 & 0x80000000) == 0) {
        break;
      }
      unint64_t v58 = v55-- + 1;
    }
    while (v58 > 1);
    if (!v57)
    {
LABEL_57:
      if (!v15)
      {
        uint64_t v45 = (1 << a5) - 1;
        if ((v45 & v14) != 0)
        {
          if (a6)
          {
            if (a3 >= 1)
            {
              int v63 = *(_DWORD *)(a1 + 56);
              int v64 = a2;
              uint64_t v65 = a3;
              do
              {
                int v63 = 1664525 * v63 + 1013904223;
                __int16 v67 = *a6++;
                __int16 v66 = v67;
                if ((v63 & 0x8000) != 0) {
                  __int16 v68 = 4;
                }
                else {
                  __int16 v68 = -4;
                }
                *v64++ = v68 + v66;
                --v65;
              }
              while (v65);
              *(_DWORD *)(a1 + 56) = v63;
            }
            uint64_t v45 = v45 & v14;
          }
          else if (a3 >= 1)
          {
            int v69 = *(_DWORD *)(a1 + 56);
            uint64_t v70 = a2;
            uint64_t v71 = a3;
            do
            {
              int v69 = 1664525 * v69 + 1013904223;
              *v70++ = v69 >> 20;
              --v71;
            }
            while (v71);
            *(_DWORD *)(a1 + 56) = v69;
          }
          renormalise_vector(a2, a3, a8);
          return v45;
        }
        if (a3 >= 1) {
          bzero(a2, 2 * a3);
        }
      }
      return 0;
    }
  }
  if ((int)v52 >= 8) {
    LODWORD(v52) = (v52 & 7 | 8) << ((v52 >> 3) - 1);
  }
  if (v15)
  {
    return alg_quant(a2, a3, v52, v18, a5, v19);
  }
  else
  {
    return alg_unquant((uint64_t)a2, a3, v52, v18, a5, (uint64_t)v19, a8);
  }
}

void interleave_hadamard(char *a1, int a2, int a3, int a4)
{
  v24[1] = *MEMORY[0x263EF8340];
  int v8 = a3 * a2;
  size_t v9 = 2 * a3 * a2;
  int v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v10, v9);
  if (a4)
  {
    if (a3 >= 1)
    {
      uint64_t v11 = 0;
      int v12 = v10;
      do
      {
        if (a2 >= 1)
        {
          int v13 = &a1[2 * ordery_table[a3 - 2 + v11] * a2];
          uint64_t v14 = a2;
          int v15 = v12;
          do
          {
            __int16 v16 = *(_WORD *)v13;
            v13 += 2;
            *int v15 = v16;
            v15 += a3;
            --v14;
          }
          while (v14);
        }
        ++v11;
        ++v12;
      }
      while (v11 != a3);
    }
  }
  else if (a3 >= 1)
  {
    uint64_t v17 = 0;
    int v18 = (__int16 *)a1;
    uint64_t v19 = v10;
    do
    {
      if (a2 >= 1)
      {
        uint64_t v20 = a2;
        uint64_t v21 = v18;
        int v22 = v19;
        do
        {
          __int16 v23 = *v21++;
          _WORD *v22 = v23;
          v22 += a3;
          --v20;
        }
        while (v20);
      }
      ++v17;
      ++v19;
      v18 += a2;
    }
    while (v17 != a3);
  }
  if (v8 >= 1) {
    memcpy(a1, v10, 2 * v8);
  }
}

uint64_t compute_theta(int *a1, uint64_t a2, __int16 *a3, __int16 *a4, int a5, int *a6, char a7, int a8, int a9, int a10, _DWORD *a11)
{
  int v11 = a5;
  int v12 = a4;
  int v13 = a3;
  uint64_t v15 = a1[4];
  uint64_t v89 = (uint64_t *)*((void *)a1 + 4);
  int v16 = *(__int16 *)(*(void *)(*((void *)a1 + 1) + 56) + 2 * v15) + 8 * a9;
  BOOL v17 = a10 != 0;
  BOOL v18 = a5 == 2;
  BOOL v19 = !v18 || !v17;
  if (v18 && v17) {
    int v20 = -16;
  }
  else {
    int v20 = -4;
  }
  int v21 = v20 + (v16 >> 1);
  int v22 = *a6;
  if (v19) {
    int v23 = -1;
  }
  else {
    int v23 = -2;
  }
  int v24 = v22 - v16 - 32;
  int v25 = (v22 + v21 * (v23 + 2 * a5)) / (v23 + 2 * a5);
  if (v24 >= v25) {
    int v24 = v25;
  }
  if (v24 >= 64) {
    int v24 = 64;
  }
  uint64_t v83 = *((void *)a1 + 1);
  if (v24 >= 4) {
    unsigned int v28 = ((compute_qn_exp2_table8[v24 & 7] >> (14 - (v24 >> 3))) + 1) & 0xFFFFFFFE;
  }
  else {
    unsigned int v28 = 1;
  }
  uint64_t v82 = *((void *)a1 + 6);
  int v84 = a1[4];
  if ((int)v15 < a1[5] || a10 == 0) {
    int v30 = v28;
  }
  else {
    int v30 = 1;
  }
  int v31 = *a1;
  if (*a1) {
    int v32 = stereo_itheta(a3, a4, a10, a5);
  }
  else {
    int v32 = 0;
  }
  int v87 = ec_tell_frac((uint64_t)v89);
  if (v30 == 1)
  {
    if (a10)
    {
      if (v31)
      {
        BOOL v33 = v32 <= 0x2000;
        int v32 = v32 > 0x2000;
        BOOL v34 = a6;
        if (!v33 && v11 >= 1)
        {
          uint64_t v35 = v11;
          int v36 = v12;
          do
          {
            *int v36 = -*v36;
            ++v36;
            --v35;
          }
          while (v35);
        }
        intensity_stereo(v83, v13, v12, v82, v84, v11);
        int v37 = v31;
      }
      else
      {
        int v37 = 0;
        int v32 = 0;
        BOOL v34 = a6;
      }
      int v59 = a11;
      int v60 = v87;
      if (*v34 < 17 || a1[10] < 17)
      {
        int v32 = 0;
      }
      else if (v37)
      {
        ec_enc_bit_logp(v89, v32, 2);
      }
      else
      {
        int v32 = ec_dec_bit_logp((uint64_t)v89, 2);
      }
      goto LABEL_67;
    }
    goto LABEL_59;
  }
  int v38 = v32 * v30 + 0x2000;
  int v39 = v38 >> 14;
  if (v11 > 2 && a10)
  {
    int v80 = v11;
    char v81 = a7;
    uint64_t v86 = a2;
    if (v30 >= 0) {
      int v40 = v30;
    }
    else {
      int v40 = v30 + 1;
    }
    int v41 = v40 >> 1;
    int v42 = (v40 >> 1) + 1;
    int v43 = 3 * v42;
    unsigned int v44 = 3 * v42 + (v40 >> 1);
    if (v31)
    {
      if (v39 <= v41) {
        int v45 = 3 * v39;
      }
      else {
        int v45 = v43 + ~v41 + v39;
      }
      if (v39 <= v41) {
        int v46 = 3 * v39 + 3;
      }
      else {
        int v46 = v43 - v41 + v39;
      }
      ec_encode(v89, v45, v46, v44);
      a2 = v86;
      int v11 = v80;
      a7 = v81;
      goto LABEL_53;
    }
    int v63 = 3 * v42 + (v40 >> 1);
    int v64 = ec_decode(v89, v44);
    if (v64 < v43) {
      int v39 = v64 / 3;
    }
    else {
      int v39 = v64 - 2 * v42;
    }
    if (v39 <= v41) {
      int v65 = 3 * v39;
    }
    else {
      int v65 = v43 + ~v41 + v39;
    }
    if (v39 <= v41) {
      int v66 = 3 * v39 + 3;
    }
    else {
      int v66 = v43 - v41 + v39;
    }
    ec_dec_update(v89, v65, v66, v63);
    a2 = v86;
    LOWORD(v11) = v80;
    a7 = v81;
LABEL_85:
    uint64_t v55 = a6;
    int v58 = v87;
    int v32 = (v39 << 14) / v30;
    goto LABEL_86;
  }
  if (a8 < 2 && !a10)
  {
    __int16 v47 = v11;
    char v48 = a7;
    uint64_t v49 = a2;
    int v50 = v30 >> 1;
    int v11 = (v30 >> 1) + 1;
    int v51 = v11 * v11;
    if (v31)
    {
      int v52 = v30 - v39 + 1;
      if (v39 > v50)
      {
        int v53 = v51 - ((v52 * (v30 - v39 + 2)) >> 1);
      }
      else
      {
        int v52 = v39 + 1;
        int v53 = ((v39 + 1) * v39) >> 1;
      }
      ec_encode(v89, v53, v53 + v52, v11 * v11);
      a2 = v49;
      a7 = v48;
      LOWORD(v11) = v47;
    }
    else
    {
      int v67 = ec_decode(v89, v11 * v11);
      if (v67 >= (v11 * v50) >> 1)
      {
        int v39 = (2 * (v30 + 1) - isqrt32((8 * (v51 + ~v67)) | 1u)) >> 1;
        int v68 = v30 + 1 - v39;
        unsigned int v69 = v51 - ((v68 * (v30 - v39 + 2)) >> 1);
      }
      else
      {
        int v39 = (isqrt32((8 * v67) | 1u) - 1) >> 1;
        int v68 = v39 + 1;
        unsigned int v69 = ((v39 + 1) * v39) >> 1;
      }
      a7 = v48;
      LOWORD(v11) = v47;
      ec_dec_update(v89, v69, v69 + v68, v51);
      a2 = v49;
    }
    goto LABEL_85;
  }
  if (!v31)
  {
    int v39 = ec_dec_uint((uint64_t)v89, v30 + 1);
    goto LABEL_85;
  }
  ec_enc_uint(v89, v38 >> 14, v30 + 1);
LABEL_53:
  int v32 = (int)(v38 & 0xFFFFC000) / v30;
  if (a10)
  {
    if (!v32)
    {
      intensity_stereo(v83, v13, v12, v82, v84, v11);
      BOOL v34 = a6;
      int v59 = a11;
      int v60 = v87;
LABEL_67:
      uint64_t result = ec_tell_frac((uint64_t)v89);
      int v62 = result - v60;
      *v34 -= result - v60;
      goto LABEL_89;
    }
    if (v11 >= 1)
    {
      uint64_t v54 = v11;
      uint64_t v55 = a6;
      do
      {
        int v56 = 46340 * *v13;
        int v57 = (46340 * *v12) >> 16;
        *v13++ = ((46340 * *v12) >> 16) + HIWORD(v56);
        *v12++ = v57 - HIWORD(v56);
        --v54;
      }
      while (v54);
      goto LABEL_60;
    }
  }
LABEL_59:
  uint64_t v55 = a6;
LABEL_60:
  int v58 = v87;
LABEL_86:
  uint64_t result = ec_tell_frac((uint64_t)v89);
  int v62 = result - v58;
  *v55 -= result - v58;
  if (v32 == 0x4000)
  {
    int v72 = 0;
    *a11 &= ~(-1 << a7) << a7;
    int32x2_t v70 = (int32x2_t)0x7FFF00000000;
    int v71 = 0x4000;
    goto LABEL_92;
  }
  if (v32)
  {
    int v72 = 0;
    v73.i32[0] = v32 << 16;
    v73.i32[1] = 0x40000000 - (v32 << 16);
    int32x2_t v74 = vshr_n_s32(vmla_s32((int32x2_t)0x800000008000, vshl_s32(v73, (int32x2_t)0xFFFFFFF3FFFFFFF0), vshl_s32(v73, (int32x2_t)0xFFFFFFF0FFFFFFF3)), 0x10uLL);
    int32x2_t v75 = vmul_s32(v74, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)vdup_n_s32(0x2055u), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, v74, vdup_n_s32(0x7FFFFD8Eu)), 0xFuLL) & 0xFFFCFFFFFFFCFFFFLL));
    int32x2_t v70 = (int32x2_t)veor_s8((int8x8_t)vshr_n_s32(vshl_n_s32(vsub_s32((int32x2_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vshr_n_s32(vadd_s32(vadd_s32(v75, v75), vdup_n_s32(0xE21D8000)), 0x10uLL), v74), 0xFuLL), v74), 0x10uLL), 0x10uLL), (int8x8_t)0x7F0000007FLL);
    int32x2_t v76 = vclz_s32(v70);
    unsigned __int16 v77 = vsub_s32(v76, vdup_lane_s32(v76, 1)).u16[0];
    int32x2_t v78 = vshr_n_s32(vshl_n_s32((int32x2_t)vshl_u32((uint32x2_t)v70, (uint32x2_t)vadd_s32(v76, (int32x2_t)0x1000000010)), 0x10uLL), 0x10uLL);
    uint32x2_t v79 = vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x400000004000, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)vdup_n_s32(0x1EFCu), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, v78, vdup_n_s32(0x7FFFF5DBu)), 0xFuLL) & 0xFFFCFFFFFFFCFFFFLL), v78), 0xFuLL);
    int v71 = ((__int16)(v79.i16[2] - v79.i16[0] + (v77 << 11)) * (__int16)(((_WORD)v11 << 7) - 128) + 0x4000) >> 15;
    goto LABEL_92;
  }
  int v59 = a11;
LABEL_89:
  *v59 &= ~(-1 << a7);
  int32x2_t v70 = (int32x2_t)0x7FFFLL;
  int v71 = -16384;
  int v72 = v32;
  int v32 = 0;
LABEL_92:
  *(_DWORD *)a2 = v72;
  *(int32x2_t *)(a2 + 4) = v70;
  *(_DWORD *)(a2 + 12) = v71;
  *(_DWORD *)(a2 + 16) = v32;
  *(_DWORD *)(a2 + 20) = v62;
  return result;
}

uint64_t intensity_stereo(uint64_t a1, __int16 *a2, __int16 *a3, uint64_t a4, int a5, int a6)
{
  int v9 = *(_DWORD *)(a4 + 4 * a5);
  int v10 = *(_DWORD *)(a4 + 4 * (*(_DWORD *)(a1 + 8) + a5));
  if (v9 <= v10) {
    signed int v11 = *(_DWORD *)(a4 + 4 * (*(_DWORD *)(a1 + 8) + a5));
  }
  else {
    signed int v11 = *(_DWORD *)(a4 + 4 * a5);
  }
  unsigned int v12 = 31 - __clz(v11);
  if (v11 >= 1) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  int v14 = v9 << (13 - v13);
  int v15 = v10 << (13 - v13);
  int v16 = v9 >> (v13 - 13);
  int v17 = v10 >> (v13 - 13);
  if (v13 >= 0xE) {
    int v18 = v16;
  }
  else {
    int v18 = v14;
  }
  if (v13 >= 0xE) {
    int v19 = v17;
  }
  else {
    int v19 = v15;
  }
  uint64_t result = celt_sqrt(((__int16)v19 * (__int16)v19 + (__int16)v18 * (__int16)v18 + 1));
  if (a6 >= 1)
  {
    int v21 = (__int16)(result + 1);
    int v22 = (__int16)((v18 << 16 >> 2) / v21);
    int v23 = (__int16)((v19 << 16 >> 2) / v21);
    uint64_t v24 = a6;
    do
    {
      int v25 = *a3++;
      *a2 = ((v23 * v25) >> 14) + ((v22 * *a2) >> 14);
      ++a2;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t resampling_factor(int a1)
{
  if (a1 <= 15999)
  {
    if (a1 == 8000) {
      return 6;
    }
    if (a1 == 12000) {
      return 4;
    }
  }
  else
  {
    switch(a1)
    {
      case 16000:
        return 3;
      case 48000:
        return 1;
      case 24000:
        return 2;
    }
  }
  return 0;
}

int *comb_filter(int *result, int *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 *a10, int a11)
{
  if (a7 | a6)
  {
    uint64_t v11 = a11;
    unsigned int v12 = (__int16 *)((char *)&comb_filter_gains + 6 * a9);
    unsigned int v13 = (*v12 * a7) >> 15;
    unsigned int v14 = (v12[1] * a7) >> 15;
    unsigned int v15 = (v12[2] * a7) >> 15;
    uint64_t v16 = 1 - a4;
    uint64_t v17 = -a4;
    uint64_t v18 = ~a4;
    uint64_t v19 = -2 - a4;
    if (a11 < 1)
    {
      unsigned int v52 = 0;
      if (a7) {
        goto LABEL_6;
      }
    }
    else
    {
      int v68 = a5;
      int v20 = a2[v19];
      int v21 = a2[v18];
      int v22 = a2[v17];
      int v23 = a2[v16];
      uint64_t v24 = (__int16 *)((char *)&comb_filter_gains + 6 * a8);
      unsigned int v69 = ((2 * a6 * *v24) >> 15) & 0xFFFFFFFE;
      unsigned int v25 = ((2 * a6 * v24[1]) >> 15) & 0xFFFFFFFE;
      unsigned int v26 = ((2 * a6 * v24[2]) >> 15) & 0xFFFFFFFE;
      __int16 v65 = v14;
      __int16 v66 = v13;
      int v27 = 2 * (__int16)v13;
      int v28 = 2 * (__int16)v14;
      __int16 v64 = v15;
      int v30 = 2 * (__int16)v15;
      int v31 = 2 - a4;
      uint64_t v32 = 0x3FFFFFFFFFFFFFFFLL * a3;
      BOOL v33 = result;
      BOOL v34 = a2;
      do
      {
        int v35 = a2[v31];
        int v36 = *a10++;
        int v37 = (__int16)((v36 * v36) >> 15);
        int v38 = (int)((2 * v36 * v36) & 0xFFFF0000 ^ 0x7FFF0000) >> 16;
        int v39 = (v27 * v37) >> 16;
        int v40 = (v28 * v37) >> 16;
        int v41 = (int)(v69 * v38) >> 16;
        int v42 = (v30 * v37) >> 16;
        int v43 = v35 + v20;
        int v44 = v41 * (unsigned __int16)v34[v32];
        int v45 = (int)(v25 * v38) >> 16;
        int v46 = v39 * (v22 >> 16)
            + v40 * ((v21 + v23) >> 16)
            + v42 * (v43 >> 16)
            + v41 * (v34[v32] >> 16)
            + v45 * ((v34[v32 - 1] + v34[v32 + 1]) >> 16);
        int v47 = v45 * (unsigned __int16)(LOWORD(v34[v32 - 1]) + LOWORD(v34[v32 + 1]));
        int v48 = (int)(v26 * v38) >> 16;
        int v49 = v46 + v48 * ((v34[v32 - 2] + v34[v32 + 2]) >> 16);
        int v50 = v48 * (unsigned __int16)(LOWORD(v34[v32 - 2]) + LOWORD(v34[v32 + 2]));
        int v51 = *v34++;
        *v33++ = v51
               + ((v42 * (unsigned __int16)v43) >> 15)
               + ((v40 * (unsigned __int16)(v21 + v23)) >> 15)
               + ((v39 * (unsigned __int16)v22) >> 15)
               + (v50 >> 15)
               + (v47 >> 15)
               + (v44 >> 15)
               + 2 * v49;
        ++v31;
        int v20 = v21;
        int v21 = v22;
        int v22 = v23;
        int v23 = v35;
        --v11;
      }
      while (v11);
      LODWORD(v11) = a11;
      unsigned int v52 = a11;
      a5 = v68;
      LOWORD(v14) = v65;
      LOWORD(v13) = v66;
      LOWORD(v15) = v64;
      uint64_t v17 = -a4;
      uint64_t v16 = 1 - a4;
      uint64_t v19 = -2 - a4;
      uint64_t v18 = ~a4;
      if (a7)
      {
LABEL_6:
        uint64_t v53 = a5 - v52;
        if ((int)v53 >= 1)
        {
          uint64_t v54 = &a2[v52];
          int v55 = v54[v16];
          int v56 = v54[v17];
          int v57 = v54[v18];
          int v58 = v54[v19];
          int v59 = 2 - a4;
          int v60 = v54;
          result += v52;
          do
          {
            int v61 = v54[v59];
            int v62 = *v60++;
            *result++ = v62
                      + (((unsigned __int16)v56 * (__int16)v13) >> 15)
                      + (((unsigned __int16)(v55 + v57) * (__int16)v14) >> 15)
                      + (((unsigned __int16)(v61 + v58) * (__int16)v15) >> 15)
                      + 2
                      * ((v56 >> 16) * (__int16)v13
                       + ((v55 + v57) >> 16) * (__int16)v14
                       + ((v61 + v58) >> 16) * (__int16)v15);
            ++v59;
            int v58 = v57;
            int v57 = v56;
            int v56 = v55;
            int v55 = v61;
            --v53;
          }
          while (v53);
        }
        return result;
      }
    }
    if (a2 == result) {
      return result;
    }
    result += (int)v11;
    a2 += (int)v11;
    size_t v63 = 4 * (a5 - (int)v11);
  }
  else
  {
    if (a2 == result) {
      return result;
    }
    size_t v63 = 4 * a5;
  }
  return (int *)memmove(result, a2, v63);
}

uint64_t init_caps(uint64_t result, uint64_t a2, int a3, int a4)
{
  LODWORD(v4) = *(_DWORD *)(result + 8);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(__int16 **)(result + 24);
    uint64_t v7 = *(void *)(result + 144);
    __int16 v10 = *v6;
    int v8 = v6 + 1;
    __int16 v9 = v10;
    do
    {
      int v11 = (__int16)v8[v5];
      *(_DWORD *)(a2 + 4 * v5) = (((v11 - v9) << a3)
                                * a4
                                * (*(unsigned __int8 *)(v7 + (int)v4 * (a4 + 2 * a3 - 1) + v5) + 64)) >> 2;
      __int16 v9 = v11;
      uint64_t v4 = *(int *)(result + 8);
      ++v5;
    }
    while (v5 < v4);
  }
  return result;
}

const char *opus_strerror(int a1)
{
  if ((a1 - 1) >= 0xFFFFFFF8) {
    return opus_strerror_error_strings[-a1];
  }
  else {
    return "unknown error";
  }
}

const char *opus_get_version_string()
{
  return "libopus 1.1-fixed";
}

void silk_decode_parameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  silk_gains_dequant(a2 + 16, (char *)(a1 + 2760), (unsigned char *)(a1 + 2312), a3 == 2, *(_DWORD *)(a1 + 2324));
  silk_NLSF_decode(__src, (char *)(a1 + 2768), *(void *)(a1 + 2752));
  silk_NLSF2A((__int16 *)(a2 + 64), __src, *(_DWORD *)(a1 + 2340));
  if (*(_DWORD *)(a1 + 2376) == 1)
  {
    *(unsigned char *)(a1 + 2791) = 4;
LABEL_8:
    memcpy((void *)(a2 + 32), (const void *)(a2 + 64), 2 * *(int *)(a1 + 2340));
    goto LABEL_9;
  }
  int v5 = *(char *)(a1 + 2791);
  if (v5 > 3) {
    goto LABEL_8;
  }
  int v6 = *(_DWORD *)(a1 + 2340);
  if (v6 >= 1)
  {
    uint64_t v7 = (__int16 *)(a1 + 2344);
    int v8 = v22;
    __int16 v9 = __src;
    uint64_t v10 = *(unsigned int *)(a1 + 2340);
    do
    {
      int v12 = *v7++;
      int v11 = v12;
      int v13 = *v9++;
      *v8++ = v11 + (((v13 - v11) * v5) >> 2);
      --v10;
    }
    while (v10);
  }
  silk_NLSF2A((__int16 *)(a2 + 32), v22, v6);
LABEL_9:
  uint64_t v14 = *(int *)(a1 + 2340);
  memcpy((void *)(a1 + 2344), __src, 2 * v14);
  if (*(_DWORD *)(a1 + 4184))
  {
    silk_bwexpander((__int16 *)(a2 + 32), v14, 63570);
    silk_bwexpander((__int16 *)(a2 + 64), *(_DWORD *)(a1 + 2340), 63570);
  }
  if (*(unsigned char *)(a1 + 2789) == 2)
  {
    silk_decode_pitch(*(__int16 *)(a1 + 2786), *(char *)(a1 + 2788), (int *)a2, *(_DWORD *)(a1 + 2316), *(_DWORD *)(a1 + 2324));
    uint64_t v15 = *(unsigned int *)(a1 + 2324);
    if ((int)v15 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = (uint64_t)*(&silk_LTP_vq_ptrs_Q7 + *(char *)(a1 + 2792));
      uint64_t v18 = a2 + 96;
      do
      {
        uint64_t v19 = 0;
        uint64_t v20 = v17 + 5 * *(char *)(a1 + v16 + 2764);
        do
        {
          *(_WORD *)(v18 + 2 * v19) = *(char *)(v20 + v19) << 7;
          ++v19;
        }
        while (v19 != 5);
        ++v16;
        v18 += 10;
      }
      while (v16 != v15);
    }
    int v21 = silk_LTPScales_table_Q14[*(char *)(a1 + 2793)];
  }
  else
  {
    bzero((void *)a2, 4 * *(int *)(a1 + 2324));
    bzero((void *)(a2 + 96), 10 * *(int *)(a1 + 2324));
    int v21 = 0;
    *(unsigned char *)(a1 + 2792) = 0;
  }
  *(_DWORD *)(a2 + 136) = v21;
}

uint64_t silk_gains_quant(uint64_t result, uint64_t a2, unsigned char *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    uint64_t v10 = a5;
    do
    {
      silk_lin2log(*(_DWORD *)(a2 + 4 * v9));
      __int16 v11 = silk_lin2log(*(_DWORD *)(a2 + 4 * v9));
      unsigned int v12 = (2251 * (__int16)(v11 - 2090)) >> 16;
      *(unsigned char *)(v8 + v9) = (2251 * (__int16)(v11 - 2090)) >> 16;
      if ((char)*a3 > (char)((2251 * (__int16)(v11 - 2090)) >> 16)) {
        LOBYTE(v12) = v12 + 1;
      }
      int v13 = (char)v12 & ~((char)v12 >> 31);
      if (v13 >= 63) {
        LOBYTE(v13) = 63;
      }
      *(unsigned char *)(v8 + v9) = v13;
      int v14 = (char)*a3;
      if (v9 | a4)
      {
        LOBYTE(v14) = v13 - v14;
        *(unsigned char *)(v8 + v9) = v14;
        int v15 = (char)*a3;
        int v16 = v15 + 8;
        unsigned int v17 = v15 + 8 + (((char)v14 - v15 + 505) >> 1);
        if (v16 < (char)v14) {
          LOBYTE(v14) = v17;
        }
        int v14 = (char)v14;
        if ((char)v14 <= -4) {
          int v14 = -4;
        }
        if (v14 >= 36) {
          int v14 = 36;
        }
        *(unsigned char *)(v8 + v9) = v14;
        if (v16 >= v14) {
          char v18 = *a3 + v14;
        }
        else {
          char v18 = *a3 - v16 + 2 * v14;
        }
        *a3 = v18;
        *(unsigned char *)(v8 + v9) += 4;
        LOBYTE(v13) = *a3;
      }
      else
      {
        if (v14 - 4 > v13) {
          LOBYTE(v13) = v14 - 4;
        }
        if (v14 > 67) {
          LOBYTE(v13) = 63;
        }
        *(unsigned char *)(v8 + v9) = v13;
        *a3 = v13;
      }
      int v19 = 29 * (char)v13 + ((7281 * (char)v13) >> 16);
      if (v19 >= 1877) {
        int v19 = 1877;
      }
      uint64_t result = silk_log2lin(v19 + 2090);
      *(_DWORD *)(a2 + 4 * v9++) = result;
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t silk_gains_dequant(uint64_t result, char *a2, unsigned char *a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    uint64_t v10 = a5;
    do
    {
      if (v9 | a4)
      {
        int v11 = a2[v9] - 4;
        if (v11 > (char)*a3 + 8) {
          LOBYTE(v11) = 2 * v11 - 8;
        }
        else {
          LOBYTE(v11) = *a3 + v11;
        }
      }
      else
      {
        int v11 = *a2;
        if (v11 <= (char)*a3 - 16) {
          LOBYTE(v11) = *a3 - 16;
        }
      }
      int v12 = (char)v11 & ~((char)v11 >> 31);
      if (v12 >= 63) {
        int v12 = 63;
      }
      *a3 = v12;
      uint64_t result = silk_log2lin(29 * v12 + ((7281 * v12) >> 16) + 2090);
      *(_DWORD *)(v8 + 4 * v9++) = result;
    }
    while (v10 != v9);
  }
  return result;
}

unint64_t silk_gains_ID(unint64_t result, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  unsigned int v2 = (char *)result;
  LODWORD(result) = 0;
  uint64_t v3 = a2;
  do
  {
    int v4 = *v2++;
    uint64_t result = (v4 + (result << 8));
    --v3;
  }
  while (v3);
  return result;
}

unsigned char *silk_VQ_WMat_EC(unsigned char *result, int *a2, _DWORD *a3, _WORD *a4, int *a5, char *a6, uint64_t a7, uint64_t a8, __int16 a9, int a10, int a11)
{
  *a2 = 0x7FFFFFFF;
  if (a11 >= 1)
  {
    for (uint64_t i = 0; i != a11; ++i)
    {
      int v12 = *(unsigned __int8 *)(a7 + i);
      int v13 = (v12 - a10) & ~((v12 - a10) >> 31);
      int v14 = (__int16)(a4[1] - (a6[1] << 7));
      int v15 = (a5[1] >> 16) * v14;
      int v16 = (__int16)(a4[2] - (a6[2] << 7));
      int v17 = (__int16)(a4[3] - (a6[3] << 7));
      int v18 = (__int16)(a4[4] - (a6[4] << 7));
      int v19 = (__int16)(*a4 - (*a6 << 7));
      int v20 = ((*a5 >> 16) * v19
           + (((unsigned __int16)*a5 * v19) >> 16)
           + 2
           * (v15
            + (((unsigned __int16)a5[1] * v14) >> 16)
            + (a5[2] >> 16) * v16
            + (((unsigned __int16)a5[2] * v16) >> 16)
            + (a5[3] >> 16) * v17
            + (((unsigned __int16)a5[3] * v17) >> 16)
            + (a5[4] >> 16) * v18
            + (((unsigned __int16)a5[4] * v18) >> 16))) >> 16;
      int v21 = (unsigned __int16)(HIWORD(*a5) * v19
                             + (((unsigned __int16)*a5 * v19) >> 16)
                             + 2
                             * (v15
                              + (((unsigned __int16)a5[1] * v14) >> 16)
                              + HIWORD(a5[2]) * v16
                              + (((unsigned __int16)a5[2] * v16) >> 16)
                              + HIWORD(a5[3]) * v17
                              + (((unsigned __int16)a5[3] * v17) >> 16)
                              + HIWORD(a5[4]) * v18
                              + (((unsigned __int16)a5[4] * v18) >> 16)))
          * v19;
      int v22 = ((a5[6] >> 16) * v14
           + (((unsigned __int16)a5[6] * v14) >> 16)
           + 2
           * ((a5[7] >> 16) * v16
            + (((unsigned __int16)a5[7] * v16) >> 16)
            + (a5[8] >> 16) * v17
            + (((unsigned __int16)a5[8] * v17) >> 16)
            + (a5[9] >> 16) * v18
            + (((unsigned __int16)a5[9] * v18) >> 16))) >> 16;
      int v23 = ((a5[12] >> 16) * v16
           + (((unsigned __int16)a5[12] * v16) >> 16)
           + 2
           * ((a5[13] >> 16) * v17
            + (((unsigned __int16)a5[13] * v17) >> 16)
            + (a5[14] >> 16) * v18
            + (((unsigned __int16)a5[14] * v18) >> 16))) >> 16;
      int v24 = (unsigned __int16)(HIWORD(a5[12]) * v16
                             + (((unsigned __int16)a5[12] * v16) >> 16)
                             + 2
                             * (HIWORD(a5[13]) * v17
                              + (((unsigned __int16)a5[13] * v17) >> 16)
                              + HIWORD(a5[14]) * v18
                              + (((unsigned __int16)a5[14] * v18) >> 16)))
          * v16;
      int v25 = ((a5[18] >> 16) * v17
           + (((unsigned __int16)a5[18] * v17) >> 16)
           + 2 * ((a5[19] >> 16) * v18 + (((unsigned __int16)a5[19] * v18) >> 16))) >> 16;
      int v26 = a9 * *(unsigned __int8 *)(a8 + i)
          + (v13 << 10)
          + v20 * v19
          + (v21 >> 16)
          + v22 * v14
          + (((unsigned __int16)(HIWORD(a5[6]) * v14
                               + (((unsigned __int16)a5[6] * v14) >> 16)
                               + 2
                               * (HIWORD(a5[7]) * v16
                                + (((unsigned __int16)a5[7] * v16) >> 16)
                                + HIWORD(a5[8]) * v17
                                + (((unsigned __int16)a5[8] * v17) >> 16)
                                + HIWORD(a5[9]) * v18
                                + (((unsigned __int16)a5[9] * v18) >> 16)))
            * v14) >> 16)
          + v23 * v16
          + (v24 >> 16)
          + (((a5[24] >> 16) * v18 + (((unsigned __int16)a5[24] * v18) >> 16)) >> 16) * v18
          + v25 * v17
          + (((unsigned __int16)(HIWORD(a5[24]) * v18 + (((unsigned __int16)a5[24] * v18) >> 16)) * v18) >> 16)
          + (((unsigned __int16)(HIWORD(a5[18]) * v17
                               + (((unsigned __int16)a5[18] * v17) >> 16)
                               + 2 * (HIWORD(a5[19]) * v18 + (((unsigned __int16)a5[19] * v18) >> 16)))
            * v17) >> 16);
      if (v26 < *a2)
      {
        *a2 = v26;
        *uint64_t result = i;
        *a3 = v12;
      }
      a6 += 5;
    }
  }
  return result;
}

uint64_t silk_init_encoder(_DWORD *a1, int a2)
{
  bzero(a1, 0x2648uLL);
  a1[1285] = a2;
  unsigned int v4 = (silk_lin2log(0x3C0000u) << 8) - 0x80000;
  a1[2] = v4;
  a1[3] = v4;
  a1[1174] = 1;

  return silk_VAD_Init((uint64_t)(a1 + 8));
}

uint64_t silk_NLSF_encode(char *a1, __int16 *a2, __int16 *a3, __int16 *a4, int a5, uint64_t a6, int a7)
{
  int v66 = a5;
  int v62 = a4;
  int v60 = a1;
  uint64_t v77 = *MEMORY[0x263EF8340];
  int v69 = 0;
  silk_NLSF_stabilize(a2, *((__int16 **)a3 + 7), a3[1]);
  int v11 = *a3;
  size_t v12 = 4 * *a3;
  int v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v13, v12);
  uint64_t v14 = *((void *)a3 + 1);
  int v15 = a3[1];
  size_t v63 = a2;
  silk_NLSF_VQ((uint64_t)v13, (uint64_t)a2, v14, v11, v15);
  int v16 = (char *)&v59 - ((4 * (int)a6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v16, 4 * (int)a6);
  int v17 = *a3;
  int v68 = v16;
  silk_insertion_sort_increasing((uint64_t)v13, (uint64_t)v16, v17, a6);
  int v67 = (unsigned int *)v16;
  bzero(v16, 4 * (int)a6);
  size_t v18 = 16 * (int)a6;
  int v19 = (char *)&v59 - v18;
  bzero((char *)&v59 - v18, v18);
  uint64_t v61 = a6;
  if ((int)a6 >= 1)
  {
    uint64_t v20 = 0;
    int v65 = a7 >> 1;
    int v64 = (__int16)(v66 >> 2);
    uint64_t v21 = v61;
    do
    {
      uint64_t v22 = *(int *)&v68[4 * v20];
      uint64_t v23 = a3[1];
      if (v23 >= 1)
      {
        int v24 = (unsigned __int8 *)(*((void *)a3 + 1) + (int)v22 * (uint64_t)a3[1]);
        uint64_t v25 = v23;
        int v26 = &v76;
        int v27 = v74;
        int v28 = v63;
        do
        {
          __int16 v30 = *v24++;
          __int16 v29 = v30;
          *v27++ = v30 << 7;
          __int16 v31 = *v28++;
          *(_WORD *)int v26 = v31 - (v29 << 7);
          v26 += 2;
          --v25;
        }
        while (v25);
      }
      silk_NLSF_VQ_weights_laroia(v73, v74, v23);
      uint64_t v32 = a3[1];
      if (v32 >= 1)
      {
        uint64_t v32 = v32;
        BOOL v33 = v75;
        BOOL v34 = &v76;
        int v35 = v73;
        uint64_t v36 = v32;
        do
        {
          int v38 = *v35++;
          unsigned __int16 v37 = v38;
          if (v38 < 1)
          {
            LOWORD(v43) = 0;
          }
          else
          {
            unsigned int v39 = v37 << 16;
            unsigned int v40 = __clz(v39);
            int v41 = (v39 >> (24 - v40)) & 0x7F;
            if (v40) {
              unsigned int v42 = 0x8000;
            }
            else {
              unsigned int v42 = 46214;
            }
            unsigned int v43 = (v42 >> (v40 >> 1)) + ((213 * (v42 >> (v40 >> 1)) * v41) >> 16);
          }
          int v44 = *(__int16 *)v34;
          v34 += 2;
          *v33++ = ((__int16)v43 * v44) >> 14;
          --v36;
        }
        while (v36);
        int v45 = v72;
        int v46 = v73;
        int v47 = v62;
        do
        {
          int v48 = *v47++;
          int v49 = 32 * v48;
          int v50 = *v46++;
          *v45++ = v49 / v50;
          --v32;
        }
        while (v32);
      }
      silk_NLSF_unpack((uint64_t)v70, (uint64_t)v71, (uint64_t)a3, v22);
      int v51 = silk_NLSF_del_dec_quant(&v19[(16 * v20)], (uint64_t)v75, (uint64_t)v72, (uint64_t)v71, (uint64_t)v70, *((void *)a3 + 6), a3[2], a3[3], v66, SHIWORD(v66), a3[1]);
      unsigned int v52 = (unsigned __int8 *)(*((void *)a3 + 2) + *a3 * (uint64_t)v65);
      if (v22)
      {
        v52 += v22;
        int v53 = *(v52 - 1);
      }
      else
      {
        int v53 = 256;
      }
      v67[v20++] = v51 + (__int16)(1024 - silk_lin2log(v53 - *v52)) * v64;
    }
    while (v20 != v21);
  }
  uint64_t v54 = v67;
  silk_insertion_sort_increasing((uint64_t)v67, (uint64_t)&v69, v61, 1);
  uint64_t v55 = v69;
  int v56 = v60;
  int v57 = v60;
  *int v60 = *(_DWORD *)&v68[4 * v69];
  memcpy(v57 + 1, &v19[16 * v55], a3[1]);
  silk_NLSF_decode(v63, v56, (uint64_t)a3);
  return *v54;
}

uint64_t check_control_input(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = 4294967194;
  if (v1 <= 23999)
  {
    BOOL v3 = v1 == 8000 || v1 == 12000;
    int v4 = 16000;
  }
  else if (v1 > 44099)
  {
    BOOL v3 = v1 == 48000;
    int v4 = 44100;
  }
  else
  {
    BOOL v3 = v1 == 24000;
    int v4 = 32000;
  }
  if (v3 || v1 == v4)
  {
    unsigned int v6 = a1[5];
    if ((v6 == 8000 || v6 == 16000 || v6 == 12000)
      && ((unsigned int v7 = a1[3], v7 == 8000) || v7 == 16000 || v7 == 12000)
      && ((unsigned int v8 = a1[4], v8 == 8000) || v8 == 16000 || v8 == 12000)
      && v8 <= v6)
    {
      uint64_t v2 = 4294967194;
      if (v7 >= v6 && v8 <= v7)
      {
        unsigned int v10 = a1[6];
        uint64_t v2 = 4294967193;
        if (v10 <= 0x3C && ((1 << v10) & 0x1000010000100400) != 0)
        {
          if (a1[8] <= 0x64u)
          {
            if (a1[11] <= 1u)
            {
              if (a1[12] <= 1u)
              {
                if (a1[10] <= 1u)
                {
                  if ((*a1 - 3) >= 0xFFFFFFFE)
                  {
                    int v11 = a1[1];
                    uint64_t v2 = 4294967185;
                    if (v11 <= *a1 && (v11 - 3) >= 0xFFFFFFFE)
                    {
                      if (a1[9] <= 0xAu) {
                        return 0;
                      }
                      else {
                        return 4294967190;
                      }
                    }
                  }
                  else
                  {
                    return 4294967185;
                  }
                }
                else
                {
                  return 4294967189;
                }
              }
              else
              {
                return 4294967187;
              }
            }
            else
            {
              return 4294967188;
            }
          }
          else
          {
            return 4294967191;
          }
        }
      }
    }
    else
    {
      return 4294967194;
    }
  }
  return v2;
}

uint64_t silk_control_audio_bandwidth(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *(unsigned int *)(a1 + 4600);
  if (!(result << 16))
  {
    int v10 = *(_DWORD *)(a1 + 4596);
    int v9 = *(_DWORD *)(a1 + 4580);
    if (v10 < v9) {
      int v9 = v10;
    }
    return (v9 / 1000);
  }
  int v4 = 1000 * (__int16)result;
  int v5 = *(_DWORD *)(a1 + 4580);
  int v6 = *(_DWORD *)(a1 + 4588);
  BOOL v7 = v4 <= v5 && v4 <= v6;
  if (!v7 || v4 < *(_DWORD *)(a1 + 4592))
  {
    if (v5 >= v6) {
      int v8 = *(_DWORD *)(a1 + 4588);
    }
    else {
      int v8 = *(_DWORD *)(a1 + 4580);
    }
    int v9 = *(_DWORD *)(a1 + 4592);
    if (v8 > v9) {
      int v9 = v8;
    }
    return (v9 / 1000);
  }
  int v11 = *(_DWORD *)(a1 + 24);
  if (v11 >= 256) {
    *(_DWORD *)(a1 + 28) = 0;
  }
  if (*(_DWORD *)(a1 + 4560) || a2[15])
  {
    int v12 = *(_DWORD *)(a1 + 4596);
    if (v4 <= v12)
    {
      if (v4 >= v12)
      {
        if ((*(_DWORD *)(a1 + 28) & 0x80000000) == 0) {
          return result;
        }
      }
      else
      {
        if (a2[15])
        {
          if (result == 8) {
            uint64_t result = 12;
          }
          else {
            uint64_t result = 16;
          }
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0x100000000;
          return result;
        }
        if (!*(_DWORD *)(a1 + 28))
        {
LABEL_43:
          a2[21] = 1;
          a2[13] -= 5 * a2[13] / (a2[6] + 5);
          return result;
        }
      }
      int v13 = 1;
      goto LABEL_41;
    }
    if (*(_DWORD *)(a1 + 28))
    {
      if (!a2[15])
      {
        if (v11 <= 0) {
          goto LABEL_43;
        }
        goto LABEL_38;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 24) = 256;
      *(void *)(a1 + 16) = 0;
      if (!a2[15])
      {
LABEL_38:
        int v13 = -2;
LABEL_41:
        *(_DWORD *)(a1 + 28) = v13;
        return result;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    if (result == 16) {
      return 12;
    }
    else {
      return 8;
    }
  }
  return result;
}

_WORD *silk_interpolate(_WORD *result, __int16 *a2, __int16 *a3, __int16 a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = a5;
    do
    {
      __int16 v7 = *a2++;
      __int16 v6 = v7;
      __int16 v8 = *a3++;
      *result++ = v6 + ((a4 * (__int16)(v8 - v6)) >> 2);
      --v5;
    }
    while (v5);
  }
  return result;
}

__int16 *silk_NLSF_decode(__int16 *a1, char *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(__int16 *)(a3 + 2) < 1)
  {
    char v8 = *a2;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a3 + 8) + *(__int16 *)(a3 + 2) * (uint64_t)*a2;
    do
    {
      a1[v6] = *(unsigned __int8 *)(v7 + v6) << 7;
      ++v6;
    }
    while (v6 < *(__int16 *)(a3 + 2));
    char v8 = *a2;
  }
  silk_NLSF_unpack((uint64_t)v28, (uint64_t)v29, a3, v8);
  uint64_t v9 = *(unsigned __int16 *)(a3 + 2);
  if (*(__int16 *)(a3 + 2) >= 1)
  {
    LOWORD(v10) = 0;
    int v11 = *(__int16 *)(a3 + 4);
    unint64_t v12 = v9 + 1;
    do
    {
      int v13 = a2[(v12 - 2) + 1];
      int v14 = (__int16)v10 * v29[(v12 - 2)];
      int v15 = (v13 << 10) - 102;
      if (v13 <= 0) {
        int v15 = ((v13 << 10) | 0x66) & (v13 >> 31);
      }
      int v10 = (v15 >> 16) * v11 + (v14 >> 8) + (((v15 & 0xFFFE) * v11) >> 16);
      v27[(v12-- - 2) + 16] = v10;
    }
    while (v12 > 1);
  }
  silk_NLSF_VQ_weights_laroia(v27, a1, (__int16)v9);
  int v16 = *(__int16 *)(a3 + 2);
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      int v18 = (__int16)v27[v17];
      if (v18 < 1)
      {
        signed int v23 = 0;
      }
      else
      {
        unsigned int v19 = (unsigned __int16)v18 << 16;
        unsigned int v20 = __clz(v19);
        int v21 = (v19 >> (24 - v20)) & 0x7F;
        if (v20) {
          unsigned int v22 = 0x8000;
        }
        else {
          unsigned int v22 = 46214;
        }
        signed int v23 = (v22 >> (v20 >> 1)) + ((213 * (v22 >> (v20 >> 1)) * v21) >> 16);
      }
      int v24 = (__int16)v27[v17 + 16] << 14;
      int v25 = (v24 / v23 + a1[v17]) & ~((v24 / v23 + a1[v17]) >> 31);
      if (v25 >= 0x7FFF) {
        LOWORD(v25) = 0x7FFF;
      }
      a1[v17++] = v25;
    }
    while (v17 < *(__int16 *)(a3 + 2));
    LOWORD(v16) = *(_WORD *)(a3 + 2);
  }
  return silk_NLSF_stabilize(a1, *(__int16 **)(a3 + 56), (__int16)v16);
}

uint64_t silk_control_encoder(uint64_t a1, uint64_t a2, signed int a3, int a4, int a5, int a6)
{
  uint64_t v10 = a1 + 4565;
  int v11 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 6128) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 4708) = v11;
  int v12 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 4580) = v12;
  *(void *)(a1 + 4588) = *(void *)(a2 + 12);
  *(_DWORD *)(a1 + 4596) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 6140) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 5800) = *(void *)a2;
  *(_DWORD *)(a1 + 4560) = a4;
  *(_DWORD *)(a1 + 5808) = a5;
  if (!*(_DWORD *)(a1 + 4700) || *(_DWORD *)(a1 + 4712))
  {
    int v13 = silk_control_audio_bandwidth(a1, (_DWORD *)a2);
    if (!a6) {
      a6 = v13;
    }
    int v14 = silk_setup_resamplers(a1, a6);
    int v15 = *(_DWORD *)(a2 + 24);
    if (*(_DWORD *)(a1 + 4636) == v15)
    {
      int v16 = 0;
      int v17 = *(_DWORD *)(a1 + 4600);
LABEL_29:
      if (v17 != a6)
      {
        *(void *)(a1 + 7224) = 0;
        *(void *)(a1 + 7232) = 0;
        bzero((void *)(a1 + 7240), 0x45CuLL);
        bzero((void *)(a1 + 144), 0x111CuLL);
        *(_OWORD *)(a1 + 4524) = 0u;
        *(_OWORD *)(a1 + 4540) = 0u;
        *(void *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 5788) = 0;
        *(_DWORD *)(a1 + 5796) = 0;
        *(_DWORD *)(a1 + 4632) = 0;
        *(_DWORD *)(a1 + 4568) = 100;
        *(_DWORD *)(a1 + 4696) = 1;
        *(_DWORD *)(a1 + 8352) = 100;
        *(unsigned char *)(a1 + 7224) = 10;
        *(_DWORD *)(a1 + 4500) = 100;
        *(_DWORD *)(a1 + 4516) = 0x10000;
        *(unsigned char *)uint64_t v10 = 0;
        *(_DWORD *)(a1 + 4600) = a6;
        int v23 = *(_DWORD *)(a1 + 4604);
        if (a6 == 8)
        {
          int v24 = &silk_pitch_contour_10_ms_NB_iCDF;
          if (v23 == 4) {
            int v24 = &silk_pitch_contour_NB_iCDF;
          }
          int v25 = &silk_NLSF_CB_NB_MB;
          int v26 = 10;
        }
        else
        {
          int v24 = &silk_pitch_contour_10_ms_iCDF;
          if (v23 == 4) {
            int v24 = &silk_pitch_contour_iCDF;
          }
          if (a6 == 12) {
            int v26 = 10;
          }
          else {
            int v26 = 16;
          }
          int v25 = &silk_NLSF_CB_WB;
          if (a6 == 12) {
            int v25 = &silk_NLSF_CB_NB_MB;
          }
        }
        *(void *)(a1 + 4728) = v24;
        *(_DWORD *)(a1 + 4664) = v26;
        *(void *)(a1 + 4736) = v25;
        *(_DWORD *)(a1 + 4612) = 5 * a6;
        *(_DWORD *)(a1 + 4608) = (__int16)v23 * (__int16)(5 * a6);
        *(_DWORD *)(a1 + 4616) = 20 * (__int16)a6;
        *(_DWORD *)(a1 + 4620) = 2 * (__int16)a6;
        *(_DWORD *)(a1 + 4576) = 18 * (__int16)a6;
        if (v23 == 4) {
          int v27 = 24;
        }
        else {
          int v27 = 14;
        }
        *(_DWORD *)(a1 + 4572) = v27 * (__int16)a6;
        if (a6 == 16)
        {
          int v28 = silk_uniform8_iCDF;
          int v29 = 10;
        }
        else if (a6 == 12)
        {
          int v28 = (unsigned __int8 *)&silk_uniform6_iCDF;
          int v29 = 13;
        }
        else
        {
          int v28 = silk_uniform4_iCDF;
          int v29 = 15;
        }
        *(_DWORD *)(a1 + 4684) = v29;
        *(void *)(a1 + 4720) = v28;
      }
      unsigned int v30 = *(_DWORD *)(a2 + 36);
      if ((int)v30 > 1)
      {
        if (v30 > 3)
        {
          int v32 = 5 * a6;
          if (v30 > 5)
          {
            int v34 = 983 * a6;
            if (v30 > 7)
            {
              int v33 = 16;
              *(_DWORD *)(a1 + 4660) = 16;
              *(_DWORD *)(a1 + 4624) = v32;
              *(void *)(v10 + 87) = 0x100000004;
              *(_OWORD *)(v10 + 103) = xmmword_220773B70;
              *(_DWORD *)(a1 + 4692) = 32;
              *(_DWORD *)(a1 + 4704) = v34;
            }
            else
            {
              *(_DWORD *)(a1 + 4660) = 14;
              *(_DWORD *)(a1 + 4624) = v32;
              *(void *)(v10 + 87) = 0x100000003;
              *(_OWORD *)(v10 + 103) = xmmword_220773B80;
              *(_DWORD *)(a1 + 4692) = 16;
              *(_DWORD *)(a1 + 4704) = v34;
              int v33 = 12;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 4624) = v32;
            *(_DWORD *)(a1 + 4652) = 2;
            *(void *)(a1 + 4656) = 0xC00000001;
            *(_OWORD *)(v10 + 103) = xmmword_220773B90;
            *(_DWORD *)(a1 + 4692) = 8;
            *(_DWORD *)(a1 + 4704) = 983 * a6;
            int v33 = 10;
          }
        }
        else
        {
          *(void *)(a1 + 4676) = 49807;
          *(_DWORD *)(a1 + 4668) = 1;
          int v32 = 5 * a6;
          *(_DWORD *)(a1 + 4624) = 5 * a6;
          *(_DWORD *)(a1 + 4652) = 1;
          *(void *)(a1 + 4656) = 0xA00000000;
          *(_DWORD *)(a1 + 4692) = 4;
          *(_DWORD *)(a1 + 4704) = 0;
          int v33 = 8;
        }
        int v31 = v32;
      }
      else
      {
        *(_DWORD *)(a1 + 4668) = 0;
        *(void *)(a1 + 4676) = 0x10000CCCDLL;
        int v31 = 3 * a6;
        *(_DWORD *)(a1 + 4624) = 3 * a6;
        *(_DWORD *)(a1 + 4652) = 1;
        *(void *)(a1 + 4656) = 0x800000000;
        *(_DWORD *)(a1 + 4692) = 2;
        *(_DWORD *)(a1 + 4704) = 0;
        int v32 = 5 * a6;
        int v33 = 6;
      }
      uint64_t result = (v16 + v14);
      if (v33 >= *(_DWORD *)(a1 + 4664)) {
        int v33 = *(_DWORD *)(a1 + 4664);
      }
      *(_DWORD *)(a1 + 4672) = v33;
      *(_DWORD *)(a1 + 4628) = v32 + 2 * v31;
      *(_DWORD *)(a1 + 4648) = v30;
      int v35 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 4640) = v35;
      *(_DWORD *)(a1 + 6144) = 0;
      if (*(_DWORD *)(a1 + 6140) && v35 >= 1)
      {
        if (a6 == 12) {
          int v36 = 14000;
        }
        else {
          int v36 = 16000;
        }
        if (a6 == 8) {
          int v36 = 12000;
        }
        int v37 = 125 - v35;
        if (v35 >= 0x19) {
          int v37 = 100;
        }
        if ((int)(655 * ((v36 * v37) >> 16) + ((655 * ((v36 * v37) & 0xFFF0u)) >> 16)) < a3)
        {
          *(_DWORD *)(a1 + 6144) = 1;
          signed int v38 = -26214 * HIWORD(v35) - ((26214 * (unsigned __int16)v35) >> 16) + 7;
          if (v38 <= 2) {
            signed int v38 = 2;
          }
          *(_DWORD *)(a1 + 6148) = v38;
        }
      }
      *(_DWORD *)(a1 + 4700) = 1;
      return result;
    }
    if (v15 <= 0x3C && ((1 << v15) & 0x1000010000100400) != 0) {
      int v16 = 0;
    }
    else {
      int v16 = -103;
    }
    if (v15 > 10)
    {
      *(_DWORD *)(a1 + 5792) = v15 / 0x14u;
      *(_DWORD *)(a1 + 4604) = 4;
      *(_DWORD *)(a1 + 4608) = 20 * (__int16)a6;
      *(_DWORD *)(a1 + 4572) = 24 * (__int16)a6;
      int v17 = *(_DWORD *)(a1 + 4600);
      if (v17 == 8)
      {
        unsigned int v19 = &silk_pitch_contour_NB_iCDF;
        goto LABEL_23;
      }
      unsigned int v22 = &silk_pitch_contour_iCDF;
    }
    else
    {
      *(_DWORD *)(a1 + 5792) = 1;
      if (v15 == 10) {
        int v18 = 2;
      }
      else {
        int v18 = 1;
      }
      *(_DWORD *)(a1 + 4604) = v18;
      *(_DWORD *)(a1 + 4608) = (__int16)v15 * (__int16)a6;
      *(_DWORD *)(a1 + 4572) = 14 * (__int16)a6;
      int v17 = *(_DWORD *)(a1 + 4600);
      if (v17 == 8)
      {
        unsigned int v19 = &silk_pitch_contour_10_ms_NB_iCDF;
LABEL_23:
        *(void *)(a1 + 4728) = v19;
        int v17 = 8;
LABEL_28:
        *(_DWORD *)(a1 + 4636) = v15;
        *(_DWORD *)(a1 + 4632) = 0;
        goto LABEL_29;
      }
      unsigned int v22 = &silk_pitch_contour_10_ms_iCDF;
    }
    *(void *)(a1 + 4728) = v22;
    goto LABEL_28;
  }
  if (v12 == *(_DWORD *)(a1 + 4584)) {
    return 0;
  }
  int v20 = *(_DWORD *)(a1 + 4600);
  if (v20 < 1) {
    return 0;
  }

  return silk_setup_resamplers(a1, v20);
}

uint64_t silk_setup_resamplers(uint64_t a1, int a2)
{
  __int16 v2 = a2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 4600);
  if (v4 == a2 && *(_DWORD *)(a1 + 4584) == *(_DWORD *)(a1 + 4580))
  {
    uint64_t result = 0;
  }
  else if (v4)
  {
    int v6 = 10 * *(_DWORD *)(a1 + 4604) + 5;
    int v7 = v6 * v4;
    memset(v14, 0, 304);
    int v8 = silk_resampler_init((uint64_t)v14, 1000 * (__int16)v4, *(_DWORD *)(a1 + 4580), 0);
    int v9 = *(_DWORD *)(a1 + 4580) / 1000 * v6;
    size_t v10 = 2 * v9;
    int v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v11, v10);
    int v12 = silk_resampler(v14, v11, (char *)(a1 + 8356), v7);
    int v13 = v12 + v8 + silk_resampler_init(a1 + 5824, *(_DWORD *)(a1 + 4580), 1000 * v2, 1);
    uint64_t result = v13 + silk_resampler((_DWORD *)(a1 + 5824), (_WORD *)(a1 + 8356), v11, v9);
  }
  else
  {
    uint64_t result = silk_resampler_init(a1 + 5824, *(_DWORD *)(a1 + 4580), 1000 * a2, 1);
  }
  *(_DWORD *)(a1 + 4584) = *(_DWORD *)(a1 + 4580);
  return result;
}

uint64_t silk_resampler_init(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!a4)
  {
    if (a2 != 8000 && a2 != 16000 && a2 != 12000) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v4 = 0xFFFFFFFFLL;
    if ((int)a3 <= 15999)
    {
      if (a3 != 8000)
      {
        int v6 = 12000;
LABEL_22:
        if (a3 != v6) {
          return v4;
        }
      }
    }
    else if (a3 != 16000 && a3 != 48000)
    {
      int v6 = 24000;
      goto LABEL_22;
    }
    int v7 = (char *)&delay_matrix_dec + 5 * (a2 >> 12) + (((a3 >> 12) - (a3 > 0x3E80)) >> (a3 > 0x5DC0)) - 6;
    goto LABEL_24;
  }
  uint64_t v4 = 0xFFFFFFFFLL;
  if ((int)a2 <= 15999)
  {
    if (a2 != 8000)
    {
      int v5 = 12000;
LABEL_15:
      if (a2 != v5) {
        return v4;
      }
    }
  }
  else if (a2 != 16000 && a2 != 48000)
  {
    int v5 = 24000;
    goto LABEL_15;
  }
  if (a3 != 8000 && a3 != 16000 && a3 != 12000) {
    return 0xFFFFFFFFLL;
  }
  int v7 = (char *)&delay_matrix_enc + 3 * (((a2 >> 12) - (a2 > 0x3E80)) >> (a2 > 0x5DC0)) + (a3 >> 12) - 4;
LABEL_24:
  *(_DWORD *)(a1 + 292) = *v7;
  *(_DWORD *)(a1 + 284) = (unsigned __int16)a2 / 0x3E8u;
  *(_DWORD *)(a1 + 288) = (unsigned __int16)a3 / 0x3E8u;
  *(_DWORD *)(a1 + 268) = 10 * ((unsigned __int16)a2 / 0x3E8u);
  if (a3 > a2)
  {
    if (a3 == 2 * a2)
    {
      char v8 = 0;
      *(_DWORD *)(a1 + 264) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 264) = 2;
      char v8 = 1;
    }
    goto LABEL_43;
  }
  if (a3 >= a2)
  {
    char v8 = 0;
    *(_DWORD *)(a1 + 264) = 0;
    goto LABEL_43;
  }
  *(_DWORD *)(a1 + 264) = 3;
  if (4 * a3 != 3 * a2)
  {
    if (3 * a3 == 2 * a2)
    {
      char v8 = 0;
      *(void *)(a1 + 276) = 0x200000012;
      int v9 = &silk_Resampler_2_3_COEFS;
      goto LABEL_42;
    }
    if (a2 == 2 * a3)
    {
      char v8 = 0;
      *(void *)(a1 + 276) = 0x100000018;
      int v9 = &silk_Resampler_1_2_COEFS;
      goto LABEL_42;
    }
    if (3 * a3 == a2)
    {
      char v8 = 0;
      *(void *)(a1 + 276) = 0x100000024;
      int v9 = &silk_Resampler_1_3_COEFS;
      goto LABEL_42;
    }
    if (4 * a3 == a2)
    {
      char v8 = 0;
      *(void *)(a1 + 276) = 0x100000024;
      int v9 = &silk_Resampler_1_4_COEFS;
      goto LABEL_42;
    }
    if (6 * a3 == a2)
    {
      char v8 = 0;
      *(void *)(a1 + 276) = 0x100000024;
      int v9 = &silk_Resampler_1_6_COEFS;
      goto LABEL_42;
    }
    return 0xFFFFFFFFLL;
  }
  char v8 = 0;
  *(void *)(a1 + 276) = 0x300000012;
  int v9 = &silk_Resampler_3_4_COEFS;
LABEL_42:
  *(void *)(a1 + 296) = v9;
LABEL_43:
  unsigned int v10 = 4 * ((a2 << (v8 | 0xE)) / a3);
  signed int v11 = a2 << v8;
  do
  {
    unsigned int v12 = v10;
    signed int v13 = v10 * (((a3 >> 15) + 1) >> 1) + HIWORD(v10) * (__int16)a3 + (((unsigned __int16)v10 * (__int16)a3) >> 16);
    ++v10;
  }
  while (v13 < v11);
  uint64_t v4 = 0;
  *(_DWORD *)(a1 + 272) = v12;
  return v4;
}

uint64_t silk_resampler(_DWORD *a1, _WORD *a2, char *__src, int a4)
{
  uint64_t v8 = (int)a1[73];
  int v9 = (__int16 *)(a1 + 42);
  uint64_t v10 = a1[71] - (int)v8;
  memcpy((char *)a1 + 2 * v8 + 168, __src, 2 * v10);
  int v11 = a1[66];
  switch(v11)
  {
    case 3:
      silk_resampler_private_down_FIR((uint64_t)a1, a2, v9, a1[71]);
      silk_resampler_private_down_FIR((uint64_t)a1, &a2[a1[72]], (__int16 *)&__src[2 * v10], a4 - a1[71]);
      break;
    case 2:
      silk_resampler_private_IIR_FIR((uint64_t)a1, a2, v9, a1[71]);
      silk_resampler_private_IIR_FIR((uint64_t)a1, &a2[a1[72]], (__int16 *)&__src[2 * v10], a4 - a1[71]);
      break;
    case 1:
      silk_resampler_private_up2_HQ_wrapper(a1, a2, v9, a1[71]);
      silk_resampler_private_up2_HQ_wrapper(a1, &a2[a1[72]], &__src[2 * v10], (a4 - a1[71]));
      break;
    default:
      memcpy(a2, v9, 2 * (int)a1[71]);
      memcpy(&a2[a1[72]], &__src[2 * v10], 2 * (a4 - a1[71]));
      break;
  }
  memcpy(v9, &__src[2 * (a4 - a1[73])], 2 * (int)a1[73]);
  return 0;
}

void silk_LPC_analysis_filter(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v6 = a5 - 1;
  if (a5 < 1)
  {
    celt_fir((__int16 *)(a2 + 2 * a5), (uint64_t)v10, (uint64_t)a1 + 2 * a5, (a4 - a5), a5, v11);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = a5;
    do
    {
      *(_WORD *)&v10[v7] = -*(_WORD *)(a3 + v7);
      v7 += 2;
    }
    while (2 * a5 != v7);
    for (uint64_t i = 0; i != a5; v11[i++] = *(_WORD *)(a2 + 2 * v6--))
      ;
    celt_fir((__int16 *)(a2 + 2 * a5), (uint64_t)v10, (uint64_t)a1 + 2 * a5, (a4 - a5), a5, v11);
    bzero(a1, 2 * v8);
  }
}

unint64_t silk_stereo_LR_to_MS(unsigned __int16 *a1, __int16 *a2, uint64_t a3, uint64_t a4, unsigned char *a5, int *a6, int a7, __int16 a8, int a9, int a10, int a11)
{
  int v129 = a7;
  BOOL v131 = a5;
  int v132 = a6;
  uint64_t v130 = a4;
  uint64_t v133 = a3;
  v136[1] = *MEMORY[0x263EF8340];
  int v134 = a2;
  signed int v13 = a2 - 2;
  int v14 = a11 + 2;
  size_t v15 = 2 * (a11 + 2);
  int v16 = (unsigned __int16 *)((char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v16, v15);
  if (a11 >= -1)
  {
    if (v14 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v14;
    }
    int v18 = (__int16 *)(v133 - 4);
    unsigned int v19 = v16;
    int v20 = v13;
    do
    {
      int v21 = *v20;
      int v22 = *v18++;
      *v20++ = ((v22 + v21) & 1) + ((v22 + v21) >> 1);
      int v23 = ((v21 - v22) & 1) + ((v21 - v22) >> 1);
      if (v23 >= 0x7FFF) {
        LOWORD(v23) = 0x7FFF;
      }
      *v19++ = v23;
      --v17;
    }
    while (v17);
  }
  *(_DWORD *)signed int v13 = *((_DWORD *)a1 + 1);
  *(_DWORD *)int v16 = *((_DWORD *)a1 + 2);
  size_t v24 = 2 * a11;
  int v25 = *(_DWORD *)&v16[v24 / 2];
  *((_DWORD *)a1 + 1) = *(_DWORD *)&v13[v24 / 2];
  *((_DWORD *)a1 + 2) = v25;
  unint64_t v26 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v27 = (char *)&v127 - v26;
  bzero((char *)&v127 - v26, v24);
  int v28 = (char *)&v127 - v26;
  bzero((char *)&v127 - v26, v24);
  if (a11 <= 0)
  {
    signed int v38 = (char *)&v127 - v26;
    bzero((char *)&v127 - v26, 2 * a11);
    unsigned int v39 = (char *)&v127 - v26;
    bzero(v39, 2 * a11);
  }
  else
  {
    int v29 = v134;
    __int16 v30 = *(v134 - 2);
    int v31 = (unsigned __int16)*(v134 - 1);
    uint64_t v32 = a11;
    int v33 = (_WORD *)((char *)&v127 - v26);
    int v34 = (_WORD *)((char *)&v127 - v26);
    do
    {
      int v35 = *v29++;
      unsigned int v36 = ((v35 + v30) >> 1) + (__int16)v31 + 1;
      int v37 = v31 - (v36 >> 1);
      __int16 v30 = v31;
      int v31 = (unsigned __int16)v35;
      *v33++ = v36 >> 1;
      *v34++ = v37;
      --v32;
    }
    while (v32);
    signed int v38 = (char *)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v38, 2 * a11);
    unsigned int v39 = v38;
    bzero(v38, 2 * a11);
    uint64_t v40 = 0;
    signed __int16 v41 = *v16;
    int v42 = v16[1];
    unsigned int v43 = v16 + 2;
    do
    {
      unsigned int v44 = (((__int16)v43[v40] + v41) >> 1) + (__int16)v42 + 1;
      int v45 = v42 - (v44 >> 1);
      signed __int16 v41 = v42;
      int v42 = v43[v40];
      *(_WORD *)&v38[v40 * 2] = v44 >> 1;
      *(_WORD *)&v38[v40 * 2] = v45;
      ++v40;
    }
    while (a11 != v40);
  }
  int v128 = a9;
  uint64_t v135 = 0;
  if (10 * a10 == a11) {
    int v46 = 328;
  }
  else {
    int v46 = 655;
  }
  int v47 = v46 * ((a8 * a8) >> 16) + ((v46 * (unsigned __int16)(a8 * a8)) >> 16);
  if (10 * a10 == a11) {
    int v48 = -1200;
  }
  else {
    int v48 = -600;
  }
  LODWORD(v136[0]) = silk_stereo_find_predictor((int *)&v135 + 1, (unint64_t)v27, (__int16 *)v38, (int *)a1 + 3, a11, v47);
  unsigned int predictor = silk_stereo_find_predictor((int *)&v135, (unint64_t)v28, (__int16 *)v39, (int *)a1 + 5, a11, v47);
  HIDWORD(v136[0]) = predictor;
  int v50 = 3 * SWORD2(v135) + v135;
  if (v50 >= 0x10000) {
    int v50 = 0x10000;
  }
  int v51 = v48 + v129;
  if (v48 + v129 <= 1) {
    unsigned int v52 = 1;
  }
  else {
    unsigned int v52 = v48 + v129;
  }
  int v53 = 900 * (__int16)a10 + 2000;
  unsigned int v54 = __clz(v52);
  unsigned int v55 = -851968 - 3 * v50;
  if (3 * v50 + 851968 >= 0) {
    unsigned int v55 = 3 * v50 + 851968;
  }
  unsigned int v56 = __clz(v55);
  int v57 = (3 * v50 + 851968) << (v56 - 1);
  int v58 = 0x1FFFFFFF / (v57 >> 16);
  int v59 = v58 * ((int)(v52 << (v54 - 1)) >> 16) + ((v58 * (unsigned __int16)(v52 << (v54 - 1))) >> 16);
  int v60 = (v52 << (v54 - 1)) - (((unint64_t)(v57 * (uint64_t)v59) >> 29) & 0xFFFFFFF8);
  int v61 = v59 + (v60 >> 16) * v58 + (((unsigned __int16)v60 * v58) >> 16);
  int v62 = v54 - v56;
  if ((v62 + 10) >= 0x20) {
    int v63 = 0;
  }
  else {
    int v63 = v61 >> (v62 + 10);
  }
  int v64 = (int)0x80000000 >> (-10 - v62);
  if (v61 > v64) {
    int v64 = v61;
  }
  if (v61 <= (int)(0x7FFFFFFFu >> (-10 - v62))) {
    unsigned int v65 = v64;
  }
  else {
    unsigned int v65 = 0x7FFFFFFFu >> (-10 - v62);
  }
  unsigned int v66 = v65 << (-10 - v62);
  if (v62 <= -11) {
    int v67 = v66;
  }
  else {
    int v67 = v63;
  }
  int v68 = v132;
  *int v132 = v67;
  if (v67 >= v53)
  {
    v68[1] = v52 - v67;
    int v88 = 0x4000;
  }
  else
  {
    *int v68 = v53;
    v68[1] = v52 - v53;
    int v69 = 2 * (v52 - v53) - v53;
    int v70 = ((3 * v50 + 0x10000) >> 16) * (__int16)v53 + (((unsigned __int16)(3 * v50) * (__int16)v53) >> 16);
    if (v69 >= 0) {
      unsigned int v71 = 2 * (v52 - v53) - v53;
    }
    else {
      unsigned int v71 = v53 - 2 * (v52 - v53);
    }
    unsigned int v72 = __clz(v71);
    int v73 = v69 << (v72 - 1);
    if (v70 >= 0) {
      unsigned int v74 = ((3 * v50 + 0x10000) >> 16) * (__int16)v53 + (((unsigned __int16)(3 * v50) * (__int16)v53) >> 16);
    }
    else {
      unsigned int v74 = -v70;
    }
    unsigned int v75 = __clz(v74);
    int v76 = v70 << (v75 - 1);
    int v77 = 0x1FFFFFFF / (v76 >> 16);
    int v78 = v77 * (v73 >> 16) + ((v77 * (v73 & 0xFFFE)) >> 16);
    int v79 = v73 - (((unint64_t)(v78 * (uint64_t)v76) >> 29) & 0xFFFFFFF8);
    int v80 = v78 + (v79 >> 16) * v77 + (((v79 & 0xFFFE) * v77) >> 16);
    int v81 = v72 - v75;
    unsigned int v82 = v72 - v75 + 13;
    int v83 = v80 >> (v72 - v75 + 13);
    if (v82 >= 0x20) {
      int v84 = 0;
    }
    else {
      int v84 = v83;
    }
    int v85 = (int)0x80000000 >> (-13 - v81);
    if (v80 > v85) {
      int v85 = v80;
    }
    if (v80 <= (int)(0x7FFFFFFFu >> (-13 - v81))) {
      unsigned int v86 = v85;
    }
    else {
      unsigned int v86 = 0x7FFFFFFFu >> (-13 - v81);
    }
    int v87 = v86 << (-13 - v81);
    if (v81 > -14) {
      int v87 = v84;
    }
    int v88 = v87 & ~(v87 >> 31);
    if (v88 >= 0x4000) {
      int v88 = 0x4000;
    }
  }
  uint64_t v89 = v131;
  a1[14] += ((v88 - (__int16)a1[14]) * (unsigned __int16)v47) >> 16;
  *uint64_t v89 = 0;
  if (v128)
  {
    v136[0] = 0;
    unint64_t result = (unint64_t)silk_stereo_quant_pred(v136, v130);
    int v91 = 0;
    goto LABEL_72;
  }
  int v92 = 8 * v52;
  signed int v93 = (__int16)a1[14];
  if (a1[15])
  {
    if (v92 < 11 * v53 || (v50 >> 16) * v93 + (((unsigned __int16)v50 * v93) >> 16) <= 327)
    {
      v136[0] = vshr_n_s32(vmul_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(predictor, v136[0]), 0x10uLL), 0x10uLL), vdup_n_s32(v93)), 0xEuLL);
      unint64_t result = (unint64_t)silk_stereo_quant_pred(v136, v130);
      int v91 = 0;
      v136[0] = 0;
      goto LABEL_72;
    }
  }
  else if (v92 < 13 * v53 || (v50 >> 16) * v93 + (((unsigned __int16)v50 * v93) >> 16) <= 818)
  {
    v136[0] = vshr_n_s32(vmul_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(predictor, v136[0]), 0x10uLL), 0x10uLL), vdup_n_s32(v93)), 0xEuLL);
    unint64_t result = (unint64_t)silk_stereo_quant_pred(v136, v130);
    int v91 = 0;
    v136[0] = 0;
    *int v68 = v52;
    v68[1] = 0;
    *uint64_t v89 = 1;
    goto LABEL_73;
  }
  if (v93 < 15566)
  {
    v136[0] = vshr_n_s32(vmul_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(predictor, v136[0]), 0x10uLL), 0x10uLL), vdup_n_s32(v93)), 0xEuLL);
    unint64_t result = (unint64_t)silk_stereo_quant_pred(v136, v130);
    int v91 = (__int16)a1[14];
  }
  else
  {
    unint64_t result = (unint64_t)silk_stereo_quant_pred(v136, v130);
    int v91 = 0x4000;
  }
LABEL_72:
  if (*v89 != 1)
  {
    a1[16] = 0;
    goto LABEL_77;
  }
LABEL_73:
  signed __int16 v94 = a1[16] + a11 - 8 * a10;
  a1[16] = v94;
  if (5 * a10 <= v94)
  {
    a1[16] = 10000;
LABEL_77:
    if (*v89) {
      goto LABEL_83;
    }
    goto LABEL_78;
  }
  *uint64_t v89 = 0;
LABEL_78:
  if ((int)v68[1] <= 0)
  {
    if (v51 <= 2) {
      int v95 = 2;
    }
    else {
      int v95 = v51;
    }
    *int v68 = v95 - 1;
    v68[1] = 1;
  }
LABEL_83:
  int v96 = 8 * a10;
  unsigned __int16 v97 = v136[0];
  unsigned __int16 v98 = WORD2(v136[0]);
  if (a10 >= 1)
  {
    int v99 = *a1;
    int v100 = a1[1];
    int v101 = (__int16)a1[15];
    int v102 = (__int16)(0x10000 / v96);
    int v103 = (((v102 * (__int16)(LOWORD(v136[0]) - v99)) >> 15) + 1) >> 1;
    int v104 = (((v102 * (__int16)(WORD2(v136[0]) - v100)) >> 15) + 1) >> 1;
    int v105 = (((v91 - v101) >> 16) * v102 + (((unsigned __int16)(v91 - a1[15]) * v102) >> 16)) << 10;
    if (v96 <= 1) {
      uint64_t v106 = 1;
    }
    else {
      uint64_t v106 = v96;
    }
    int v107 = v103 << 16;
    int v108 = -(v107 + (v99 << 16));
    int v109 = v104 << 16;
    LODWORD(result) = -(v109 + (v100 << 16));
    unsigned int v110 = v134;
    unsigned int v111 = (_WORD *)(v133 - 2);
    int v112 = (__int16 *)(v16 + 1);
    int v113 = v105 + (v101 << 10);
    do
    {
      int v114 = *(v110 - 1);
      int v115 = (v114 << 10) + ((*v110 + *(v110 - 2)) << 9);
      int v116 = *v112++;
      int v117 = (v114 >> 5) * ((int)result >> 16)
           + (v113 >> 16) * v116
           + (((v113 & 0xFC00) * v116) >> 16)
           + ((((v114 & 0x1F) << 11) * ((int)result >> 16)) >> 16)
           + (v115 >> 16) * (v108 >> 16)
           + (((v115 & 0xFE00) * (v108 >> 16)) >> 16);
      if (v117 <= 8388479)
      {
        int v118 = ((v117 >> 7) + 1) >> 1;
        if (v118 <= -32768) {
          LOWORD(v118) = 0x8000;
        }
      }
      else
      {
        LOWORD(v118) = 0x7FFF;
      }
      ++v110;
      *v111++ = v118;
      v108 -= v107;
      unint64_t result = (result - v109);
      v113 += v105;
      --v106;
    }
    while (v106);
  }
  if (v96 < a11)
  {
    int v119 = &v16[v96 + 1];
    unint64_t result = (unint64_t)&v134[v96];
    int v120 = (_WORD *)(v133 + 2 * v96 - 2);
    uint64_t v121 = a11 - (uint64_t)v96;
    do
    {
      int v122 = *(__int16 *)(result - 2);
      int v123 = (v122 << 10) + ((*(__int16 *)result + *(__int16 *)(result - 4)) << 9);
      int v124 = (__int16)*v119++;
      int v125 = (v122 >> 5) * (__int16)-v98
           + (v91 >> 6) * v124
           + ((((v91 & 0x3F) << 10) * v124) >> 16)
           + ((((v122 & 0x1F) << 11) * (__int16)-v98) >> 16)
           + (v123 >> 16) * (__int16)-v97
           + (((v123 & 0xFE00) * (__int16)-v97) >> 16);
      if (v125 <= 8388479)
      {
        int v126 = ((v125 >> 7) + 1) >> 1;
        if (v126 <= -32768) {
          LOWORD(v126) = 0x8000;
        }
      }
      else
      {
        LOWORD(v126) = 0x7FFF;
      }
      result += 2;
      *v120++ = v126;
      --v121;
    }
    while (v121);
  }
  *a1 = v97;
  a1[1] = v98;
  a1[15] = v91;
  return result;
}

double silk_PLC_Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 4192) = *(_DWORD *)(a1 + 2328) << 7;
  *(void *)&double result = 0x1000000010000;
  *(void *)(a1 + 4264) = 0x1000000010000;
  *(void *)(a1 + 4276) = 0x1400000002;
  return result;
}

void silk_PLC(uint64_t a1, int32x4_t *a2, uint64_t a3, int a4)
{
  int v6 = *(_DWORD *)(a1 + 2316);
  if (v6 != *(_DWORD *)(a1 + 4272))
  {
    *(_DWORD *)(a1 + 4192) = *(_DWORD *)(a1 + 2328) << 7;
    *(void *)(a1 + 4264) = 0x1000000010000;
    *(void *)(a1 + 4276) = 0x1400000002;
    *(_DWORD *)(a1 + 4272) = v6;
  }
  if (a4)
  {
    silk_PLC_conceal(a1, a2, a3);
    ++*(_DWORD *)(a1 + 4184);
  }
  else
  {
    int v7 = *(char *)(a1 + 2789);
    *(_DWORD *)(a1 + 4188) = v7;
    if (v7 == 2)
    {
      int v8 = 0;
      uint64_t v9 = *(unsigned int *)(a1 + 2324);
      if (v9)
      {
        uint64_t v10 = (int)v9 - 1;
        int v11 = a2->i32[v10];
        if (v11 >= 1)
        {
          uint64_t v12 = 0;
          int v8 = 0;
          uint64_t v13 = *(int *)(a1 + 2332);
          int v14 = 5 * v9 - 5;
          do
          {
            uint64_t v15 = 0;
            int v16 = 0;
            int v17 = v9 + ~v12;
            do
              v16 += a2[6].i16[v14 + v15++];
            while (v15 != 5);
            if (v16 > v8)
            {
              int v18 = &a2->i8[10 * (__int16)v17];
              uint64_t v19 = *((void *)v18 + 12);
              *(_WORD *)(a1 + 4204) = *((_WORD *)v18 + 52);
              *(void *)(a1 + 4196) = v19;
              *(_DWORD *)(a1 + 4192) = a2->i32[v17] << 8;
              int v11 = a2->i32[v10];
              int v8 = v16;
            }
            if (++v12 == v9) {
              break;
            }
            v14 -= 5;
          }
          while (v12 * v13 < v11);
        }
      }
      *(void *)(a1 + 4196) = 0;
      *(_WORD *)(a1 + 4204) = 0;
      *(_WORD *)(a1 + 4200) = v8;
      if (v8 > 11468)
      {
        if (v8 >= 0x3CCE)
        {
          uint64_t v23 = 0;
          unsigned int v24 = 0xF334000u / v8;
          do
          {
            *(_WORD *)(a1 + 4196 + v23) = (v24 * *(__int16 *)(a1 + 4196 + v23)) >> 14;
            v23 += 2;
          }
          while (v23 != 10);
        }
      }
      else
      {
        uint64_t v20 = 0;
        if (v8 <= 1) {
          int v8 = 1;
        }
        int v21 = (__int16)(0xB33400u / v8);
        do
        {
          *(_WORD *)(a1 + 4196 + v20) = (v21 * *(__int16 *)(a1 + 4196 + v20)) >> 10;
          v20 += 2;
        }
        while (v20 != 10);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 4192) = 4608 * (__int16)v6;
      *(_WORD *)(a1 + 4204) = 0;
      *(void *)(a1 + 4196) = 0;
    }
    memcpy((void *)(a1 + 4206), &a2[4], 2 * *(int *)(a1 + 2340));
    *(_WORD *)(a1 + 4260) = a2[8].i32[2];
    int v22 = *(_DWORD *)(a1 + 2324);
    *(void *)(a1 + 4264) = *(uint64_t *)((char *)&a2->i64[1] + 4 * v22);
    *(_DWORD *)(a1 + 4280) = *(_DWORD *)(a1 + 2332);
    *(_DWORD *)(a1 + 4276) = v22;
  }
}

int32x4_t silk_PLC_conceal(uint64_t a1, int32x4_t *a2, uint64_t a3)
{
  uint64_t v129 = a3;
  int v122 = a2;
  uint64_t v3 = a1;
  *(void *)&v137[12] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(int *)(a1 + 4280);
  uint64_t v5 = *(unsigned int *)(a1 + 4280);
  uint64_t v6 = *(int *)(a1 + 2336);
  size_t v7 = 2 * v6;
  int v8 = (char *)&v118 - ((2 * v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v9 = 4 * (*(_DWORD *)(a1 + 2328) + (int)v6);
  int v124 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v6) = *(int *)(a1 + 4264) >> 6;
  int v120 = *(_DWORD *)(a1 + 4268);
  v135[0] = v6;
  v135[1] = v120 >> 6;
  int v119 = v120 >> 6;
  if (*(_DWORD *)(a1 + 2376))
  {
    *(_OWORD *)(a1 + 4222) = 0u;
    *(_OWORD *)(a1 + 4206) = 0u;
  }
  bzero((char *)&v118 - ((4 * v4 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v4);
  uint64_t v10 = 0;
  char v11 = 1;
  uint64_t v12 = (char *)&v118 - ((4 * v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  do
  {
    char v13 = v11;
    if ((int)v4 >= 1)
    {
      uint64_t v14 = 0;
      int v15 = v135[v10];
      int v16 = ((v10 | 0xFFFFFFFE) + *(_DWORD *)(v3 + 4276)) * v5;
      int v17 = (__int16)v15;
      int v18 = ((v15 >> 15) + 1) >> 1;
      uint64_t v19 = v3 + 4 + 4 * v16;
      do
      {
        int v20 = v17 * (*(int *)(v19 + 4 * v14) >> 16)
            + ((v17 * (unsigned __int16)*(_DWORD *)(v19 + 4 * v14)) >> 16)
            + v18 * *(_DWORD *)(v19 + 4 * v14);
        unsigned int v21 = v20 >> 8;
        if (v20 < -8388608) {
          LOWORD(v21) = 0x8000;
        }
        if (v20 < 0x800000) {
          __int16 v22 = v21;
        }
        else {
          __int16 v22 = 0x7FFF;
        }
        *(_WORD *)&v12[2 * v14++] = v22;
      }
      while (v5 != v14);
    }
    char v11 = 0;
    v12 += 2 * v4;
    uint64_t v10 = 1;
  }
  while ((v13 & 1) != 0);
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  bzero(v8, v7);
  bzero(v124, v9);
  silk_sum_sqr_shift((unsigned int *)&v133 + 1, (int *)&v134 + 1, (uint64_t)&v118 - ((4 * v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  silk_sum_sqr_shift((unsigned int *)&v133, (int *)&v134, (uint64_t)&v118 + 2 * *(int *)(v3 + 4280) - ((4 * v4 + 15) & 0xFFFFFFFFFFFFFFF0), *(_DWORD *)(v3 + 4280));
  int v23 = *(_DWORD *)(v3 + 4276);
  if (SHIDWORD(v133) >> v134 >= (int)v133 >> SBYTE4(v134))
  {
    int v24 = *(_DWORD *)(v3 + 4280);
  }
  else
  {
    int v24 = v23 - 1;
    int v23 = *(_DWORD *)(v3 + 4280);
  }
  int v25 = v24 * v23;
  if (v25 <= 128) {
    int v25 = 128;
  }
  LODWORD(v132) = v25;
  uint64_t v26 = v3 + 4196;
  LOWORD(v27) = *(_WORD *)(v3 + 4248);
  int v28 = *(_DWORD *)(v3 + 4184);
  if (v28 >= 1) {
    int v28 = 1;
  }
  int v29 = HARM_ATT_Q15[v28];
  if (*(_DWORD *)(v3 + 4188) == 2) {
    __int16 v30 = (__int16 *)&PLC_RAND_ATTENUATE_V_Q15;
  }
  else {
    __int16 v30 = (__int16 *)&PLC_RAND_ATTENUATE_UV_Q15;
  }
  int v31 = v30[v28];
  silk_bwexpander((__int16 *)(v3 + 4206), *(_DWORD *)(v3 + 2340), 64881);
  int v32 = *(_DWORD *)(v3 + 2340);
  __memcpy_chk();
  if (!*(_DWORD *)(v3 + 4184))
  {
    if (*(_DWORD *)(v3 + 4188) == 2)
    {
      uint64_t v33 = 0;
      LOWORD(v34) = 0x4000;
      do
      {
        LOWORD(v34) = v34 - *(_WORD *)(v26 + v33);
        v33 += 2;
      }
      while (v33 != 10);
      int v34 = (__int16)v34;
      if ((__int16)v34 <= 3277) {
        int v34 = 3277;
      }
      unsigned int v27 = (*(__int16 *)(v3 + 4260) * v34) >> 14;
    }
    else
    {
      int v35 = silk_LPC_inverse_pred_gain((__int16 *)(v3 + 4206), v32);
      if (v35 >= 0x8000000) {
        int v36 = 0x8000000;
      }
      else {
        int v36 = v35;
      }
      if (v36 <= 0x400000) {
        int v36 = 0x400000;
      }
      int v31 = (int)((v36 >> 13) * v31 + ((8 * (v36 & 0x1FFF) * v31) >> 16)) >> 14;
      int v32 = *(_DWORD *)(v3 + 2340);
      LOWORD(v27) = 0x4000;
    }
  }
  unsigned int v37 = *(_DWORD *)(v3 + 4244);
  unsigned int v38 = ((*(int *)(v3 + 4192) >> 7) + 1) >> 1;
  int v39 = *(_DWORD *)(v3 + 2336);
  int v40 = v32;
  int v41 = v39 - (v32 + v38) - 2;
  silk_LPC_analysis_filter(&v8[2 * v41], v3 + 2 * v41 + 1348, (uint64_t)v136, v39 - v41, v40);
  int v42 = *(_DWORD *)(v3 + 4268);
  if (v42 >= 0) {
    unsigned int v43 = *(_DWORD *)(v3 + 4268);
  }
  else {
    unsigned int v43 = -v42;
  }
  char v44 = __clz(v43);
  int v45 = v42 << (v44 - 1);
  int v46 = 0x1FFFFFFF / (v45 >> 16);
  int v47 = (v45 >> 16) * (__int16)v46 + (((unsigned __int16)v45 * (__int16)v46) >> 16);
  int v48 = (v46 << 16)
      - 8 * v47 * (((v46 >> 15) + 1) >> 1)
      + ((-8 * v47) >> 16) * (__int16)v46
      + ((((-8 * v47) & 0xFFF8) * (__int16)v46) >> 16);
  unsigned int v49 = HIWORD(v43);
  int v50 = v48 >> (16 - v44);
  char v51 = v44 - 16;
  int v52 = (int)0x80000000 >> v51;
  if (v48 > (int)0x80000000 >> v51) {
    int v52 = v48;
  }
  if (v48 <= (int)(0x7FFFFFFFu >> v51)) {
    unsigned int v53 = v52;
  }
  else {
    unsigned int v53 = 0x7FFFFFFFu >> v51;
  }
  int v54 = v53 << v51;
  if (v49) {
    int v54 = v50;
  }
  uint64_t v130 = *(unsigned int *)(v3 + 2340);
  LODWORD(v55) = v130 + v41;
  uint64_t v56 = *(int *)(v3 + 2336);
  int v57 = v124;
  if ((int)v130 + v41 < (int)v56)
  {
    if (v54 >= 0x3FFFFFFF) {
      int v58 = 0x3FFFFFFF;
    }
    else {
      int v58 = v54;
    }
    uint64_t v55 = (int)v55;
    do
    {
      *(_DWORD *)&v57[4 * v55] = (v58 >> 16) * *(__int16 *)&v8[2 * v55]
                               + (((unsigned __int16)v58 * *(__int16 *)&v8[2 * v55]) >> 16);
      ++v55;
    }
    while (v55 < v56);
  }
  uint64_t v121 = v56;
  LODWORD(v128) = *(_DWORD *)(v3 + 2324);
  uint64_t v131 = v3;
  if ((int)v128 >= 1)
  {
    int v59 = 0;
    uint64_t v60 = v3 + 4 * (v132 - 128) + 4;
    int v61 = *(_DWORD *)(v3 + 2332);
    int v125 = 4608 * *(__int16 *)(v3 + 2316);
    int v126 = (__int16)v31;
    int v62 = *(_DWORD *)(v3 + 4192);
    int v123 = v57 - 8;
    int v127 = v61;
    do
    {
      LODWORD(v132) = v59;
      int v63 = (__int16)v27;
      if (v61 >= 1)
      {
        int v64 = v39 - v38 + 2;
        int v65 = *(__int16 *)(v3 + 4196);
        int v66 = *(__int16 *)(v3 + 4198);
        int v67 = *(__int16 *)(v3 + 4200);
        int v68 = *(__int16 *)(v3 + 4202);
        int v69 = *(__int16 *)(v3 + 4204);
        int v70 = &v124[4 * v39];
        unsigned int v71 = (int *)&v123[4 * v64];
        unsigned int v72 = v71;
        do
        {
          int v73 = v72[1];
          ++v72;
          unsigned int v37 = 196314165 * v37 + 907633515;
          *(_DWORD *)int v70 = 4
                         * ((v71[2] >> 16) * v65
                          + (((unsigned __int16)v71[2] * v65) >> 16)
                          + (v73 >> 16) * v66
                          + (((unsigned __int16)v73 * v66) >> 16)
                          + (*v71 >> 16) * v67
                          + (((unsigned __int16)*v71 * v67) >> 16)
                          + (*(v71 - 1) >> 16) * v68
                          + (((unsigned __int16)*(v71 - 1) * v68) >> 16)
                          + (*(v71 - 2) >> 16) * v69
                          + (((unsigned __int16)*(v71 - 2) * v69) >> 16)
                          + (*(int *)(v60 + 4 * (v37 >> 25)) >> 16) * v63
                          + (((unsigned __int16)*(_DWORD *)(v60 + 4 * (v37 >> 25)) * v63) >> 16))
                         + 8;
          v70 += 4;
          ++v39;
          unsigned int v71 = v72;
          --v61;
        }
        while (v61);
      }
      for (uint64_t i = 0; i != 10; i += 2)
        *(_WORD *)(v26 + i) = (*(__int16 *)(v26 + i) * v29) >> 15;
      unsigned int v27 = (v126 * v63) >> 15;
      if ((int)(v62 + 655 * (v62 >> 16) + ((655 * (unsigned __int16)v62) >> 16)) >= v125) {
        int v62 = v125;
      }
      else {
        v62 += 655 * (v62 >> 16) + ((655 * (unsigned __int16)v62) >> 16);
      }
      uint64_t v3 = v131;
      *(_DWORD *)(v131 + 4192) = v62;
      unsigned int v38 = ((v62 >> 7) + 1) >> 1;
      int v59 = v132 + 1;
      int v61 = v127;
    }
    while (v132 + 1 != v128);
  }
  int v75 = v121 - 16;
  int v76 = v124;
  int v77 = (int *)&v124[4 * (int)v121 - 64];
  long long v78 = *(_OWORD *)(v3 + 1300);
  *(_OWORD *)int v77 = *(_OWORD *)(v3 + 1284);
  *((_OWORD *)v77 + 1) = v78;
  long long v79 = *(_OWORD *)(v3 + 1316);
  long long v80 = *(_OWORD *)(v3 + 1332);
  int v128 = (_OWORD *)(v3 + 1284);
  *((_OWORD *)v77 + 2) = v79;
  *((_OWORD *)v77 + 3) = v80;
  uint64_t v81 = *(unsigned int *)(v3 + 2328);
  if ((int)v81 >= 1)
  {
    uint64_t v82 = 0;
    int v83 = v136[0];
    int v84 = v136[1];
    int v85 = (int)v130 >> 1;
    int v86 = v136[2];
    int v87 = v136[3];
    int v88 = v76;
    int v89 = v136[4];
    int v90 = v136[5];
    int v91 = (__int16)v119;
    int v92 = v136[6];
    int v93 = v136[7];
    int v94 = ((v120 >> 21) + 1) >> 1;
    uint64_t v95 = (uint64_t)&v88[4 * v75 + 20];
    int v132 = (__int16 *)v137;
    uint64_t v96 = v130 - 10;
    int v97 = v136[8];
    int v98 = v136[9];
    do
    {
      int v99 = &v77[v82];
      int v100 = v85
           + (v99[15] >> 16) * v83
           + (((unsigned __int16)v99[15] * v83) >> 16)
           + (v99[14] >> 16) * v84
           + (((unsigned __int16)v99[14] * v84) >> 16)
           + (v99[13] >> 16) * v86
           + (((unsigned __int16)v99[13] * v86) >> 16);
      int v101 = v100
           + (v99[12] >> 16) * v87
           + (((unsigned __int16)v99[12] * v87) >> 16)
           + (v99[11] >> 16) * v89
           + (((unsigned __int16)v99[11] * v89) >> 16)
           + (v77[(v82 + 10)] >> 16) * v90
           + (((unsigned __int16)v77[(v82 + 10)] * v90) >> 16)
           + (v77[(v82 + 9)] >> 16) * v92
           + (((unsigned __int16)v77[(v82 + 9)] * v92) >> 16)
           + (v77[(v82 + 8)] >> 16) * v93
           + (((unsigned __int16)v77[(v82 + 8)] * v93) >> 16)
           + (v77[(v82 + 7)] >> 16) * v97
           + (((unsigned __int16)v77[(v82 + 7)] * v97) >> 16)
           + (v77[(v82 + 6)] >> 16) * v98
           + (((unsigned __int16)v77[(v82 + 6)] * v98) >> 16);
      if ((int)v130 >= 11)
      {
        uint64_t v102 = v96;
        int v103 = v132;
        int v104 = (int *)v95;
        do
        {
          int v106 = *v104--;
          int v105 = v106;
          int v107 = *v103++;
          v101 += (v105 >> 16) * v107 + (((unsigned __int16)v105 * v107) >> 16);
          --v102;
        }
        while (v102);
      }
      int v108 = v77[(v82 + 16)] + 16 * v101;
      v77[(v82 + 16)] = v108;
      int v109 = v108 * v94 + (v108 >> 16) * v91 + (((unsigned __int16)v108 * v91) >> 16);
      unsigned int v110 = ((v109 >> 7) + 1) >> 1;
      if (v109 < -8388736) {
        LOWORD(v110) = 0x8000;
      }
      if (v109 <= 8388479) {
        __int16 v111 = v110;
      }
      else {
        __int16 v111 = 0x7FFF;
      }
      *(_WORD *)(v129 + 2 * v82++) = v111;
      v95 += 4;
    }
    while (v82 != v81);
  }
  int v112 = &v77[(int)v81];
  long long v113 = *((_OWORD *)v112 + 1);
  int v114 = v128;
  *int v128 = *(_OWORD *)v112;
  v114[1] = v113;
  long long v115 = *((_OWORD *)v112 + 3);
  v114[2] = *((_OWORD *)v112 + 2);
  v114[3] = v115;
  uint64_t v116 = v131;
  *(_DWORD *)(v131 + 4244) = v37;
  *(_WORD *)(v116 + 4248) = v27;
  int32x4_t result = vdupq_n_s32(v38);
  *int v122 = result;
  return result;
}

unsigned int *silk_PLC_glue_frames(unsigned int *result, uint64_t a2, int a3)
{
  uint64_t v4 = (__int16 *)a2;
  uint64_t v5 = result;
  if (result[1046])
  {
    int32x4_t result = silk_sum_sqr_shift(result + 1063, (int *)result + 1064, a2, a3);
    v5[1060] = 1;
  }
  else
  {
    if (result[1060])
    {
      uint64_t v20 = 0;
      int32x4_t result = silk_sum_sqr_shift((unsigned int *)&v20, (int *)&v20 + 1, a2, a3);
      int v6 = v5[1064];
      if (SHIDWORD(v20) <= v6)
      {
        int v7 = SHIDWORD(v20) < v6 ? (int)v20 >> (v6 - BYTE4(v20)) : v20;
      }
      else
      {
        v5[1063] = (int)v5[1063] >> (BYTE4(v20) - v6);
        int v7 = v20;
      }
      signed int v8 = v5[1063];
      if (v7 > v8)
      {
        unsigned int v9 = __clz(v8);
        signed int v10 = v8 << (v9 - 1);
        v5[1063] = v10;
        int v11 = v7 >> ((25 - v9) & ~((int)(25 - v9) >> 31));
        if (v11 <= 1) {
          int v11 = 1;
        }
        unsigned int v12 = v10 / v11;
        if ((int)v12 < 1)
        {
          signed int v16 = 0;
        }
        else
        {
          unsigned int v13 = __clz(v12);
          if (v13 != 24)
          {
            if (v12 <= 0x7F) {
              LOBYTE(v12) = (v12 >> (56 - v13)) | ((_BYTE)v12 << (v13 - 24));
            }
            else {
              LOBYTE(v12) = ((_BYTE)v12 << (v13 + 8)) | (v12 >> (24 - v13));
            }
          }
          int v14 = v12 & 0x7F;
          if (v13) {
            unsigned int v15 = 0x8000;
          }
          else {
            unsigned int v15 = 46214;
          }
          signed int v16 = 16 * ((v15 >> (v13 >> 1)) + ((213 * (v15 >> (v13 >> 1)) * v14) >> 16));
        }
        if (a3 >= 1)
        {
          int v17 = 4 * ((0x10000 - v16) / a3);
          uint64_t v18 = a3 - 1;
          do
          {
            uint64_t v19 = v18;
            __int16 *v4 = HIWORD(v16) * *v4 + (((v16 & 0xFFFCu) * *v4) >> 16);
            ++v4;
            v16 += v17;
            if (v16 > 0x10000) {
              break;
            }
            --v18;
          }
          while (v19);
        }
      }
    }
    v5[1060] = 0;
  }
  return result;
}

uint64_t silk_quant_LTP_gains(uint64_t result, char *a2, unsigned char *a3, int *a4, int *a5, __int16 a6, int a7, int a8)
{
  int v32 = (_WORD *)result;
  uint64_t v8 = 0;
  int v29 = 0;
  uint64_t v40 = 0;
  size_t v27 = a8;
  uint64_t v36 = a8;
  int v37 = 0x7FFFFFFF;
  do
  {
    int v9 = *a4;
    uint64_t v38 = v8;
    int v10 = 0;
    if (a8 >= 1)
    {
      uint64_t v11 = (uint64_t)*(&silk_LTP_gain_BITS_Q5_ptrs + v8);
      unsigned int v12 = (char *)*(&silk_LTP_vq_ptrs_Q7 + v8);
      uint64_t v13 = (uint64_t)*(&silk_LTP_vq_gain_ptrs_Q7 + v8);
      int v14 = __src;
      uint64_t v15 = v36;
      int v16 = silk_LTP_vq_sizes[v8];
      int v17 = a5;
      uint64_t v18 = v32;
      do
      {
        int v19 = silk_log2lin(6229 - v9);
        silk_VQ_WMat_EC(v14, (int *)&v40 + 1, &v40, v18, v17, v12, v13, v11, a6, v19 - 51, v16);
        if (HIDWORD(v40) + v10 < 0 != __OFADD__(HIDWORD(v40), v10)) {
          int v10 = 0x7FFFFFFF;
        }
        else {
          v10 += HIDWORD(v40);
        }
        int32x4_t result = silk_lin2log((int)v40 + 51);
        if ((int)result + v9 >= 896)
        {
          int32x4_t result = silk_lin2log((int)v40 + 51);
          int v9 = v9 + result - 896;
        }
        else
        {
          int v9 = 0;
        }
        v18 += 5;
        v17 += 25;
        ++v14;
        --v15;
      }
      while (v15);
    }
    if (v10 >= 2147483646) {
      int v20 = 2147483646;
    }
    else {
      int v20 = v10;
    }
    if (v20 < v37)
    {
      *a3 = v38;
      int32x4_t result = (uint64_t)memcpy(a2, __src, v27);
      int v37 = v20;
      int v29 = v9;
    }
    if (v20 < silk_LTP_gain_middle_avg_RD_Q14 && a7 != 0) {
      break;
    }
    uint64_t v8 = v38 + 1;
  }
  while (v38 != 2);
  __int16 v22 = v32;
  if (a8 >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = (uint64_t)*(&silk_LTP_vq_ptrs_Q7 + (char)*a3);
    do
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      do
      {
        v22[v25] = *(char *)(v24 + ((v26 + 0x500000000 * a2[v23]) >> 32)) << 7;
        v26 += 0x100000000;
        ++v25;
      }
      while (v25 != 5);
      ++v23;
      v22 += 5;
    }
    while (v23 != v36);
  }
  *a4 = v29;
  return result;
}

void *silk_NSQ(_DWORD *a1, int32x2_t *a2, uint64_t a3, int *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, __int16 a15, __int16 a16)
{
  uint64_t v199 = a7;
  uint64_t v202 = a6;
  v241 = a5;
  int v19 = a1;
  uint64_t v205 = a13;
  uint64_t v242 = *MEMORY[0x263EF8340];
  a2[546].i32[0] = *(char *)(a3 + 34);
  int v20 = a2[544].i32[1];
  unsigned int v21 = silk_Quantization_Offsets_Q10[2 * (*(char *)(a3 + 29) >> 1) + *(char *)(a3 + 30)];
  uint64_t v203 = a3;
  int v22 = *(unsigned __int8 *)(a3 + 31);
  __int32 v23 = a1[1154];
  int v24 = a1[1152];
  size_t v25 = 4 * (v24 + v23);
  uint64_t v238 = &v188[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v238, v25);
  size_t v26 = 2 * (v24 + v23);
  char v190 = &v188[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v190, v26);
  uint64_t v27 = (int)v19[1153];
  int v237 = &v188[-((4 * v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v237, 4 * v27);
  a2[545].i32[1] = v23;
  a2[545].i32[0] = v23;
  LODWORD(v28) = v19[1151];
  if ((int)v28 >= 1)
  {
    uint64_t v240 = (char *)a2 + 2 * v23;
    BOOL v29 = v22 == 4;
    uint64_t v30 = 0;
    uint64_t v31 = v29;
    uint64_t v201 = v31;
    uint64_t v206 = a12;
    uint64_t v197 = a11;
    if (v29) {
      int v32 = 3;
    }
    else {
      int v32 = 1;
    }
    int v193 = v32;
    int v189 = a16;
    uint64_t v196 = (int *)&a2[495] + 1;
    int v204 = a2 + 480;
    uint64_t v195 = a10;
    uint64_t v200 = a9;
    unsigned int v212 = v21 - 944;
    int v211 = (__int16)(944 - v21) * a14;
    int v223 = a14 * v21;
    unsigned int v216 = v21 + 944;
    int v224 = a14;
    int v215 = (__int16)(v21 + 944) * a14;
    unsigned int v225 = v21;
    unsigned int v214 = v21 - 80;
    uint64_t v192 = a2 + 160;
    uint64_t v191 = a2 + 536;
    uint64_t v194 = a8 + 4;
    long long v213 = a2 + 537;
    v33.i64[0] = 0x100000001;
    v33.i64[1] = 0x100000001;
    int v34 = v241;
    int v35 = v20;
    int v207 = v19;
    uint64_t v198 = a8;
    do
    {
      uint64_t v36 = (__int16 *)(v202 + 32 * (v201 | (v30 >> 1)));
      int v37 = *(_DWORD *)(v200 + 4 * v30);
      a2[547].i32[0] = 0;
      int v239 = *(unsigned __int8 *)(v203 + 29);
      if (v239 == 2)
      {
        int v38 = *(_DWORD *)(v205 + 4 * v30);
        int v220 = v38;
        if ((v193 & v30) != 0)
        {
          int v239 = 2;
          char v39 = 1;
        }
        else
        {
          int v40 = v19[1166];
          int v41 = v19[1154] - v40 - v38 - 2;
          silk_LPC_analysis_filter(&v190[2 * v41], (uint64_t)a2 + 2 * v41 + 2 * (int)v27 * (int)v30, (uint64_t)v36, 2 - (-v40 - v38), v40);
          v33.i64[0] = 0x100000001;
          v33.i64[1] = 0x100000001;
          char v39 = 0;
          a2[547].i32[0] = 1;
          a2[545].i32[0] = v19[1154];
          int v239 = *(unsigned __int8 *)(v203 + 29);
        }
      }
      else
      {
        int v220 = v35;
        char v39 = 1;
      }
      int v42 = *(_DWORD *)(v205 + 4 * v30);
      int v43 = *(_DWORD *)(v206 + 4 * v30);
      if (v43 <= 1) {
        unsigned int v44 = 1;
      }
      else {
        unsigned int v44 = *(_DWORD *)(v206 + 4 * v30);
      }
      char v45 = __clz(v44);
      int v46 = v44 << (v45 - 1);
      int v47 = 0x1FFFFFFF / (v46 >> 16);
      int v48 = (v46 >> 16) * (__int16)v47 + (((unsigned __int16)v46 * (__int16)v47) >> 16);
      int v49 = (v47 << 16)
          - 8 * v48 * (((v47 >> 15) + 1) >> 1)
          + ((-8 * v48) >> 16) * (__int16)v47
          + ((((-8 * v48) & 0xFFF8) * (__int16)v47) >> 16);
      unsigned int v50 = v44 >> 17;
      int v51 = v49 >> (15 - v45);
      char v52 = v45 - 15;
      int v53 = (int)0x80000000 >> v52;
      if (v49 > (int)0x80000000 >> v52) {
        int v53 = v49;
      }
      if (v49 <= (int)(0x7FFFFFFFu >> v52)) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = 0x7FFFFFFFu >> v52;
      }
      int v55 = v54 << v52;
      if (v50) {
        int v55 = v51;
      }
      int v56 = a2[546].i32[1];
      if (v43 == v56)
      {
        signed int v57 = 0x10000;
      }
      else
      {
        if (v56 >= 0) {
          unsigned int v58 = a2[546].u32[1];
        }
        else {
          unsigned int v58 = -v56;
        }
        unsigned int v59 = __clz(v58);
        int v60 = v56 << (v59 - 1);
        if (v43 >= 0) {
          unsigned int v61 = *(_DWORD *)(v206 + 4 * v30);
        }
        else {
          unsigned int v61 = -v43;
        }
        unsigned int v62 = __clz(v61);
        int v63 = v43 << (v62 - 1);
        int v64 = 0x1FFFFFFF / (v63 >> 16);
        int v65 = v64 * (v60 >> 16) + ((v64 * (unsigned __int16)v60) >> 16);
        int v66 = v60 - (((unint64_t)(v65 * (uint64_t)v63) >> 29) & 0xFFFFFFF8);
        int v67 = v65 + (v66 >> 16) * v64 + (((unsigned __int16)v66 * v64) >> 16);
        int v68 = v59 - v62;
        if ((v68 + 29) >= 0x30) {
          int v69 = 0;
        }
        else {
          int v69 = v67 >> (v68 + 13);
        }
        int v70 = (int)0x80000000 >> (-13 - v68);
        if (v67 > v70) {
          int v70 = v67;
        }
        if (v67 <= (int)(0x7FFFFFFFu >> (-13 - v68))) {
          unsigned int v71 = v70;
        }
        else {
          unsigned int v71 = 0x7FFFFFFFu >> (-13 - v68);
        }
        signed int v57 = v71 << (-13 - v68);
        if (v68 > -14) {
          signed int v57 = v69;
        }
      }
      uint64_t v72 = v19[1153];
      if ((int)v72 >= 1)
      {
        int v73 = (v55 >> 7) + 1;
        int v74 = (__int16)(v73 >> 1);
        int v75 = ((v73 >> 16) + 1) >> 1;
        int v76 = a4;
        int v77 = v237;
        uint64_t v78 = v19[1153];
        do
        {
          int v79 = *v76++;
          *v77++ = v79 * v75 + (v79 >> 16) * v74 + (((unsigned __int16)v79 * v74) >> 16);
          --v78;
        }
        while (v78);
      }
      a2[546].i32[1] = v43;
      int v35 = v220;
      if ((v39 & 1) == 0)
      {
        if (!v30) {
          int v55 = 4 * ((v55 >> 16) * v189 + (((unsigned __int16)v55 * v189) >> 16));
        }
        uint64_t v80 = a2[545].i32[0];
        int v81 = v80 - v42 - 2;
        if (v81 < (int)v80)
        {
          int v82 = v55 >> 16;
          int v83 = (unsigned __int16)v55;
          uint64_t v84 = v80 - v81;
          int v85 = &v238[4 * v81];
          int v86 = &v190[2 * v81];
          do
          {
            int v87 = *(__int16 *)v86;
            v86 += 2;
            *(_DWORD *)int v85 = v82 * v87 + ((v83 * v87) >> 16);
            v85 += 4;
            --v84;
          }
          while (v84);
        }
      }
      uint64_t v210 = v30;
      uint64_t v208 = a4;
      if (v57 != 0x10000)
      {
        int v88 = v19[1154];
        unsigned int v89 = v57 >> 16;
        int v90 = v192;
        if (v88 >= 1)
        {
          uint64_t v91 = a2[545].i32[1] - v88;
          do
          {
            v90->i32[v91] = (__int16)v90->i32[v91] * v89
                          + (((__int16)v90->i32[v91] * (unsigned __int16)v57) >> 16)
                          + (((v90->i32[v91] >> 15) + 1) >> 1) * v57;
            ++v91;
          }
          while (v91 < a2[545].i32[1]);
        }
        if (v239 == 2 && !a2[547].i32[0])
        {
          uint64_t v92 = a2[545].i32[0];
          int v93 = v92 - v42 - 2;
          if (v93 < (int)v92)
          {
            uint64_t v94 = v92 - v93;
            uint64_t v95 = (int *)&v238[4 * v93];
            do
            {
              *uint64_t v95 = (__int16)*v95 * v89
                   + (((__int16)*v95 * (unsigned __int16)v57) >> 16)
                   + (((*v95 >> 15) + 1) >> 1) * v57;
              ++v95;
              --v94;
            }
            while (v94);
          }
        }
        uint64_t v96 = 0;
        a2[544].i32[0] = (__int16)a2[544].i32[0] * v89
                       + (((__int16)a2[544].i32[0] * (unsigned __int16)v57) >> 16)
                       + (((a2[544].i32[0] >> 15) + 1) >> 1) * v57;
        int32x4_t v97 = vdupq_n_s32(v89);
        int32x4_t v98 = vdupq_n_s32((unsigned __int16)v57);
        int32x4_t v99 = vdupq_n_s32(v57);
        int v100 = v204;
        do
        {
          int32x4_t v101 = *(int32x4_t *)v100[v96].i8;
          int32x4_t v102 = vshrq_n_s32(vshlq_n_s32(v101, 0x10uLL), 0x10uLL);
          *(int32x4_t *)v100[v96].i8 = vmlaq_s32(vsraq_n_s32(vmulq_s32(v102, v97), vmulq_s32(v102, v98), 0x10uLL), vhaddq_s32(vshrq_n_s32(v101, 0xFuLL), v33), v99);
          v96 += 2;
        }
        while (v96 != 16);
        uint64_t v103 = 0;
        int v104 = v191;
        do
        {
          int32x4_t v105 = *(int32x4_t *)v104[v103].i8;
          int32x4_t v106 = vshrq_n_s32(vshlq_n_s32(v105, 0x10uLL), 0x10uLL);
          *(int32x4_t *)v104[v103].i8 = vmlaq_s32(vsraq_n_s32(vmulq_s32(v106, v97), vmulq_s32(v106, v98), 0x10uLL), vhaddq_s32(vshrq_n_s32(v105, 0xFuLL), v33), v99);
          v103 += 2;
        }
        while (v103 != 8);
        uint64_t v72 = v19[1153];
      }
      uint64_t v209 = v72;
      if ((int)v72 >= 1)
      {
        uint64_t v107 = 0;
        uint64_t v219 = (__int16 *)(v194 + 32 * (v210 & 0xFFFFFFF));
        int v218 = (__int16 *)(v199 + 2 * (5 * v210));
        int v108 = v37 >> 2;
        int v109 = (v37 >> 2) | (v37 << 15);
        unsigned int v110 = (__int16 *)(v198 + 2 * (16 * v210));
        uint64_t v111 = v207[1166];
        uint64_t v112 = (int)v207[1165];
        int v113 = *(_DWORD *)(v206 + 4 * v210);
        int v114 = *(_DWORD *)(v197 + 4 * v210);
        int v236 = *(__int16 *)(v195 + 4 * v210);
        v235 = (int *)&v238[4 * (a2[545].i32[0] - v35) + 8];
        v241 = (_DWORD *)&a2[160] + a2[545].i32[1] - v35 + 1;
        int v233 = (int)v112 >> 1;
        int v234 = (int)v111 >> 1;
        uint64_t v232 = v112 - 1;
        int v231 = (int *)&a2[535] + v112 + 1;
        int v229 = v114 >> 16;
        int v230 = (__int16)v114;
        int v222 = (__int16)v108;
        int v221 = v109 >> 16;
        int v227 = ((v113 >> 21) + 1) >> 1;
        int v228 = (__int16)(v113 >> 6);
        int v115 = a2[546].i32[0];
        uint64_t v116 = v196;
        uint64_t v226 = v209;
        int v217 = v110;
        do
        {
          a2[546].i32[0] = 196314165 * v115 + 907633515;
          int v117 = *v116;
          int v118 = *v116 >> 16;
          int v119 = (unsigned __int16)*v116;
          int v120 = v36[1];
          int v121 = (unsigned __int16)*(v116 - 1) * v120;
          int v122 = v234 + v118 * *v36 + ((v119 * *v36) >> 16) + (*(v116 - 1) >> 16) * v120;
          int v123 = v36[3];
          int v124 = (unsigned __int16)*(v116 - 3) * v123;
          int v125 = v122
               + (v121 >> 16)
               + (*(v116 - 2) >> 16) * v36[2]
               + (((unsigned __int16)*(v116 - 2) * v36[2]) >> 16)
               + (*(v116 - 3) >> 16) * v123;
          int v126 = v36[5];
          int v127 = (unsigned __int16)*(v116 - 5) * v126;
          int v128 = v125
               + (v124 >> 16)
               + (*(v116 - 4) >> 16) * v36[4]
               + (((unsigned __int16)*(v116 - 4) * v36[4]) >> 16)
               + (*(v116 - 5) >> 16) * v126;
          int v129 = v36[7];
          int v130 = v128
               + (v127 >> 16)
               + (*(v116 - 6) >> 16) * v36[6]
               + (((unsigned __int16)*(v116 - 6) * v36[6]) >> 16)
               + (*(v116 - 7) >> 16) * v129
               + (((unsigned __int16)*(v116 - 7) * v129) >> 16)
               + (*(v116 - 8) >> 16) * v36[8]
               + (((unsigned __int16)*(v116 - 8) * v36[8]) >> 16)
               + (*(v116 - 9) >> 16) * v36[9]
               + (((unsigned __int16)*(v116 - 9) * v36[9]) >> 16);
          if (v111 == 16)
          {
            uint64_t v131 = v111;
            int v132 = v34;
            int v133 = v36[13];
            int v134 = (unsigned __int16)*(v116 - 13) * v133;
            int v135 = v130
                 + (*(v116 - 10) >> 16) * v36[10]
                 + (((unsigned __int16)*(v116 - 10) * v36[10]) >> 16)
                 + (*(v116 - 11) >> 16) * v36[11]
                 + (((unsigned __int16)*(v116 - 11) * v36[11]) >> 16)
                 + (*(v116 - 12) >> 16) * v36[12]
                 + (((unsigned __int16)*(v116 - 12) * v36[12]) >> 16)
                 + (*(v116 - 13) >> 16) * v133;
            int v34 = v132;
            int v35 = v220;
            int v136 = v135 + (v134 >> 16);
            unsigned int v110 = v217;
            uint64_t v111 = v131;
            int v130 = v136
                 + (*(v116 - 14) >> 16) * v36[14]
                 + (((unsigned __int16)*(v116 - 14) * v36[14]) >> 16)
                 + (*(v116 - 15) >> 16) * v36[15]
                 + (((unsigned __int16)*(v116 - 15) * v36[15]) >> 16);
          }
          if (v239 == 2)
          {
            int v137 = *v218;
            int v138 = v218[1];
            int v139 = (*v235 >> 16) * v137
                 + (((unsigned __int16)*v235 * v137) >> 16)
                 + (*(v235 - 1) >> 16) * v138
                 + (((unsigned __int16)*(v235 - 1) * v138) >> 16)
                 + (*(v235 - 2) >> 16) * v218[2]
                 + (((unsigned __int16)*(v235 - 2) * v218[2]) >> 16)
                 + (*(v235 - 3) >> 16) * v218[3]
                 + (((unsigned __int16)*(v235 - 3) * v218[3]) >> 16)
                 + (*(v235 - 4) >> 16) * v218[4]
                 + (((unsigned __int16)*(v235 - 4) * v218[4]) >> 16)
                 + 2;
            ++v235;
          }
          else
          {
            int v139 = 0;
          }
          int v140 = a2[536].i32[0];
          a2[536].i32[0] = v117;
          int v141 = v233 + v118 * *v110 + ((v119 * *v110) >> 16);
          unsigned int v142 = v225;
          if ((int)v112 >= 3)
          {
            int v143 = (int *)v213;
            int v144 = v219;
            for (uint64_t i = 2; i < v112; i += 2)
            {
              int v146 = *(v143 - 1);
              *(v143 - 1) = v140;
              int v147 = v140 >> 16;
              int v148 = *(v144 - 1);
              int v149 = (unsigned __int16)v140 * v148;
              int v140 = *v143;
              *int v143 = v146;
              v143 += 2;
              v141 += v147 * v148 + (v149 >> 16) + (v146 >> 16) * *v144 + (((unsigned __int16)v146 * *v144) >> 16);
              v144 += 2;
            }
          }
          uint64_t v150 = v232;
          *int v231 = v140;
          int v151 = v141 + (v140 >> 16) * v110[v150] + (((unsigned __int16)v140 * v110[v150]) >> 16);
          int v152 = a2[544].i32[0] >> 16;
          LODWORD(v150) = (unsigned __int16)a2[544].i32[0];
          int v153 = v152 * v236 + (((int)v150 * v236) >> 16) + 2 * v151;
          int v154 = v152 * v229
               + (((int)v150 * v229) >> 16)
               + (a2[159].i32[a2[545].i32[1] + 1] >> 16) * v230
               + (((unsigned __int16)a2[159].i32[a2[545].i32[1] + 1] * v230) >> 16);
          int v155 = 4 * v130 - v154 - v153;
          if (v35 < 1)
          {
            int v157 = v155 >> 1;
          }
          else
          {
            int v156 = ((*(v241 - 2) + *v241) >> 16) * v222
                 + ((int)*(v241 - 1) >> 16) * v221
                 + (((unsigned __int16)(*((_WORD *)v241 - 4) + *(_WORD *)v241) * v222) >> 16)
                 + (((unsigned __int16)*(v241 - 1) * v221) >> 16);
            ++v241;
            int v157 = (v139 + 2 * v155 - 2 * v156) >> 2;
          }
          int v158 = *(_DWORD *)&v237[4 * v107] - ((v157 + 1) >> 1);
          if (a2[546].i32[0] < 0) {
            int v158 = ((v157 + 1) >> 1) - *(_DWORD *)&v237[4 * v107];
          }
          if (v158 <= -31744) {
            int v158 = -31744;
          }
          if (v158 >= 30720) {
            int v159 = 30720;
          }
          else {
            int v159 = v158;
          }
          unsigned int v160 = v159 - v142;
          if ((int)(v159 - v142) < 1024)
          {
            unsigned int v161 = v142;
            unsigned int v162 = v216;
            int v163 = v223;
            int v164 = v215;
            if (v160 >= 0x400)
            {
              unsigned int v165 = v142 + (v160 & 0xFFFFFC00);
              unsigned int v166 = v165 + 80;
              unsigned int v167 = v165 + 1104;
              int v168 = (__int16)(-80 - v165) * v224;
              int v169 = (__int16)(-1104 - v165) * v224;
              if (v160 <= 0xFFFFFBFF) {
                unsigned int v161 = v166;
              }
              else {
                unsigned int v161 = v212;
              }
              if (v160 <= 0xFFFFFBFF) {
                unsigned int v162 = v167;
              }
              else {
                unsigned int v162 = v142;
              }
              if (v160 <= 0xFFFFFBFF) {
                int v163 = v168;
              }
              else {
                int v163 = v211;
              }
              if (v160 <= 0xFFFFFBFF) {
                int v164 = v169;
              }
              else {
                int v164 = v223;
              }
            }
          }
          else
          {
            unsigned int v161 = v214 + (v160 & 0xFFFFFC00);
            unsigned int v162 = v161 + 1024;
            int v163 = (__int16)(v214 + (v160 & 0xFC00)) * v224;
            int v164 = (__int16)(v214 + (v160 & 0xFC00) + 1024) * v224;
          }
          if (v164 + (__int16)(v159 - v162) * (__int16)(v159 - v162) >= v163
                                                                       + (__int16)(v159 - v161) * (__int16)(v159 - v161))
            unsigned int v170 = v161;
          else {
            unsigned int v170 = v162;
          }
          *((unsigned char *)v34 + v107) = ((v170 >> 9) + 1) >> 1;
          int v171 = 16 * v170;
          if (a2[546].i32[0] < 0) {
            int v171 = -v171;
          }
          int v172 = v171 + 2 * v139;
          int v173 = v172 + 16 * v130;
          int v174 = v173 * v227 + (v173 >> 16) * v228 + (((v173 & 0xFFFE) * v228) >> 16);
          unsigned int v175 = ((v174 >> 7) + 1) >> 1;
          if (v174 < -8388736) {
            LOWORD(v175) = 0x8000;
          }
          if (v174 <= 8388479) {
            __int16 v176 = v175;
          }
          else {
            __int16 v176 = 0x7FFF;
          }
          *(_WORD *)&v240[2 * v107] = v176;
          v116[1] = v173;
          ++v116;
          int v177 = v173 - 4 * v153;
          a2[544].i32[0] = v177;
          a2[160].i32[a2[545].i32[1]] = v177 - 4 * v154;
          int32x2_t v178 = vadd_s32(a2[545], (int32x2_t)0x100000001);
          *(_DWORD *)&v238[4 * (int)*(void *)&a2[545]] = 2 * v172;
          a2[545] = v178;
          int v115 = a2[546].i32[0] + *((char *)v34 + v107);
          a2[546].i32[0] = v115;
          ++v107;
        }
        while (v107 != v226);
      }
      int v179 = (_OWORD *)((char *)a2 + 4 * (int)v209);
      long long v180 = v179[240];
      long long v181 = v179[241];
      long long v182 = v179[243];
      int v183 = v204;
      *(_OWORD *)v204[4].i8 = v179[242];
      *(_OWORD *)v183[6].i8 = v182;
      *(_OWORD *)v183->i8 = v180;
      *(_OWORD *)v183[2].i8 = v181;
      long long v184 = v179[244];
      long long v185 = v179[245];
      long long v186 = v179[247];
      *(_OWORD *)v183[12].i8 = v179[246];
      *(_OWORD *)v183[14].i8 = v186;
      *(_OWORD *)v183[8].i8 = v184;
      *(_OWORD *)v183[10].i8 = v185;
      int v19 = v207;
      uint64_t v27 = (int)v207[1153];
      a4 = &v208[v27];
      int v34 = (_DWORD *)((char *)v34 + v27);
      v240 += 2 * v27;
      uint64_t v30 = v210 + 1;
      uint64_t v28 = (int)v207[1151];
    }
    while (v210 + 1 < v28);
    int v24 = v207[1152];
    __int32 v23 = v207[1154];
  }
  a2[544].i32[1] = *(_DWORD *)(v205 + 4 * ((int)v28 - 1));
  memmove(a2, (char *)a2 + 2 * v24, 2 * v23);
  return memmove(&a2[160], (char *)&a2[160] + 4 * v19[1152], 4 * (int)v19[1154]);
}

uint64_t silk_decode_indices(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a4 || *(_DWORD *)(a1 + 4 * a3 + 2416)) {
    unsigned int v8 = ec_dec_icdf(a2, silk_type_offset_VAD_iCDF, 8) + 2;
  }
  else {
    unsigned int v8 = ec_dec_icdf(a2, silk_type_offset_no_VAD_iCDF, 8);
  }
  *(unsigned char *)(a1 + 2789) = v8 >> 1;
  *(unsigned char *)(a1 + 2790) = v8 & 1;
  if (a5 == 2)
  {
    char v9 = ec_dec_icdf(a2, silk_delta_gain_iCDF, 8);
  }
  else
  {
    *(unsigned char *)(a1 + 2760) = 8 * ec_dec_icdf(a2, &silk_gain_iCDF[8 * (char)(v8 >> 1)], 8);
    char v9 = *(unsigned char *)(a1 + 2760) + ec_dec_icdf(a2, silk_uniform8_iCDF, 8);
  }
  *(unsigned char *)(a1 + 2760) = v9;
  if (*(int *)(a1 + 2324) > 1)
  {
    uint64_t v10 = 2761;
    do
    {
      *(unsigned char *)(a1 + v10) = ec_dec_icdf(a2, silk_delta_gain_iCDF, 8);
      uint64_t v11 = v10 - 2759;
      ++v10;
    }
    while (v11 < *(int *)(a1 + 2324));
  }
  char v12 = ec_dec_icdf(a2, (unsigned __int8 *)(*(void *)(*(void *)(a1 + 2752) + 16)+ **(__int16 **)(a1 + 2752) * (uint64_t)(*(char *)(a1 + 2789) >> 1)), 8);
  *(unsigned char *)(a1 + 2768) = v12;
  silk_NLSF_unpack((uint64_t)v23, (uint64_t)v22, *(void *)(a1 + 2752), v12);
  uint64_t v13 = *(void *)(a1 + 2752);
  if (*(__int16 *)(v13 + 2) >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      int v15 = ec_dec_icdf(a2, (unsigned __int8 *)(*(void *)(v13 + 40) + (__int16)v23[v14]), 8);
      if (v15 == 8)
      {
        LOBYTE(v15) = ec_dec_icdf(a2, silk_NLSF_EXT_iCDF, 8) + 8;
      }
      else if (!v15)
      {
        int v15 = -(int)ec_dec_icdf(a2, silk_NLSF_EXT_iCDF, 8);
      }
      *(unsigned char *)(a1 + 2769 + v14) = v15 - 4;
      uint64_t v13 = *(void *)(a1 + 2752);
      ++v14;
    }
    while (v14 < *(__int16 *)(v13 + 2));
  }
  if (*(_DWORD *)(a1 + 2324) == 4) {
    char v16 = ec_dec_icdf(a2, silk_NLSF_interpolation_factor_iCDF, 8);
  }
  else {
    char v16 = 4;
  }
  *(unsigned char *)(a1 + 2791) = v16;
  if (*(unsigned char *)(a1 + 2789) == 2)
  {
    if (a5 == 2 && *(_DWORD *)(a1 + 2408) == 2 && (int v17 = ec_dec_icdf(a2, silk_pitch_delta_iCDF, 8), v17 << 16 >= 1))
    {
      __int16 v18 = v17 + *(_WORD *)(a1 + 2412) - 9;
    }
    else
    {
      *(_WORD *)(a1 + 2786) = (*(_DWORD *)(a1 + 2316) >> 1) * ec_dec_icdf(a2, silk_pitch_lag_iCDF, 8);
      __int16 v18 = *(_WORD *)(a1 + 2786) + ec_dec_icdf(a2, *(unsigned __int8 **)(a1 + 2384), 8);
    }
    *(_WORD *)(a1 + 2786) = v18;
    *(_WORD *)(a1 + 2412) = v18;
    *(unsigned char *)(a1 + 2788) = ec_dec_icdf(a2, *(unsigned __int8 **)(a1 + 2392), 8);
    *(unsigned char *)(a1 + 2792) = ec_dec_icdf(a2, silk_LTP_per_index_iCDF, 8);
    if (*(int *)(a1 + 2324) >= 1)
    {
      uint64_t v19 = 0;
      do
        *(unsigned char *)(a1 + 2764 + v19++) = ec_dec_icdf(a2, (unsigned __int8 *)*(&silk_LTP_gain_iCDF_ptrs + *(char *)(a1 + 2792)), 8);
      while (v19 < *(int *)(a1 + 2324));
    }
    if (a5) {
      char v20 = 0;
    }
    else {
      char v20 = ec_dec_icdf(a2, silk_LTPscale_iCDF, 8);
    }
    *(unsigned char *)(a1 + 2793) = v20;
  }
  *(_DWORD *)(a1 + 2408) = *(char *)(a1 + 2789);
  uint64_t result = ec_dec_icdf(a2, silk_uniform4_iCDF, 8);
  *(unsigned char *)(a1 + 2794) = result;
  return result;
}

uint64_t silk_NLSF_unpack(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (*(__int16 *)(a3 + 2) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(*(void *)(a3 + 32) + *(unsigned __int16 *)(a3 + 2) * a4 / 2);
    do
    {
      unsigned int v6 = *v5++;
      int v7 = (_WORD *)(result + 2 * v4);
      *int v7 = (v6 >> 1) & 7 | (8 * ((v6 >> 1) & 7));
      unsigned int v8 = (unsigned char *)(a2 + v4);
      *unsigned int v8 = *(unsigned char *)(*(void *)(a3 + 24) + (((int)(v6 << 31) >> 31) & (*(__int16 *)(a3 + 2) - 1)) + (int)v4);
      v7[1] = (v6 >> 5) | (8 * (v6 >> 5));
      v8[1] = *(unsigned char *)(*(void *)(a3 + 24) + ((*(__int16 *)(a3 + 2) - 1) & ((int)(v6 << 27) >> 31)) + (int)v4 + 1);
      v4 += 2;
    }
    while (v4 < *(__int16 *)(a3 + 2));
  }
  return result;
}

uint64_t silk_stereo_find_predictor(int *a1, unint64_t a2, __int16 *a3, int *a4, int a5, int a6)
{
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  silk_sum_sqr_shift((unsigned int *)&v81 + 1, (int *)&v82 + 1, a2, a5);
  silk_sum_sqr_shift((unsigned int *)&v81, (int *)&v82, (uint64_t)a3, a5);
  if (SHIDWORD(v82) <= (int)v82) {
    int v12 = v82;
  }
  else {
    int v12 = HIDWORD(v82);
  }
  int v13 = (v12 & 1) + v12;
  int v14 = SHIDWORD(v81) >> (v13 - BYTE4(v82));
  if (v14 <= 1) {
    int v14 = 1;
  }
  LODWORD(v81) = (int)v81 >> (v13 - v82);
  HIDWORD(v81) = v14;
  int v15 = silk_inner_prod_aligned_scale(a2, a3, v13, a5);
  int v16 = v15;
  int v17 = HIDWORD(v81);
  if (v15 >= 0) {
    unsigned int v18 = v15;
  }
  else {
    unsigned int v18 = -v15;
  }
  unsigned int v19 = __clz(v18);
  if (v81 >= 0) {
    unsigned int v20 = HIDWORD(v81);
  }
  else {
    unsigned int v20 = -HIDWORD(v81);
  }
  unsigned int v21 = __clz(v20);
  int v22 = HIDWORD(v81) << (v21 - 1);
  int v23 = 0x1FFFFFFF / (v22 >> 16);
  int v24 = (v15 << (v19 - 1) >> 16) * v23 + (((unsigned __int16)(v15 << (v19 - 1)) * v23) >> 16);
  int v25 = (v15 << (v19 - 1)) - (((unint64_t)(v24 * (uint64_t)v22) >> 29) & 0xFFFFFFF8);
  int v26 = v24 + (v25 >> 16) * v23 + (((unsigned __int16)v25 * v23) >> 16);
  int v27 = v19 - v21;
  if ((v27 + 16) >= 0x20) {
    int v28 = 0;
  }
  else {
    int v28 = v26 >> (v27 + 16);
  }
  int v29 = (int)0x80000000 >> (-16 - v27);
  if (v26 > v29) {
    int v29 = v26;
  }
  if (v26 <= (int)(0x7FFFFFFFu >> (-16 - v27))) {
    unsigned int v30 = v29;
  }
  else {
    unsigned int v30 = 0x7FFFFFFFu >> (-16 - v27);
  }
  int v31 = v30 << (-16 - v27);
  if (v27 <= -17) {
    int v32 = v31;
  }
  else {
    int v32 = v28;
  }
  if (v32 <= -16384) {
    int v32 = -16384;
  }
  if (v32 >= 0x4000) {
    uint64_t result = 0x4000;
  }
  else {
    uint64_t result = v32;
  }
  int v34 = ((int)result >> 16) * result + (((unsigned __int16)result * (int)result) >> 16);
  if (v34 >= 0) {
    int v35 = ((int)result >> 16) * result + (((unsigned __int16)result * (int)result) >> 16);
  }
  else {
    int v35 = -v34;
  }
  if (a6 <= v35) {
    LOWORD(v36) = v35;
  }
  else {
    LOWORD(v36) = a6;
  }
  int v37 = v13 >> 1;
  int v38 = *a4;
  if (v81 <= 0)
  {
    unsigned int v50 = 0;
    int v36 = (__int16)v36;
    int v46 = (__int16)v36 * (-v38 >> 16);
  }
  else
  {
    unsigned int v39 = __clz(HIDWORD(v81));
    int v40 = HIDWORD(v81) >> (24 - v39);
    LOBYTE(v41) = BYTE4(v81);
    int v42 = HIDWORD(v81) << (v39 - 24);
    if (v39 != 24)
    {
      int v41 = (HIDWORD(v81) << (v39 + 8)) | v40;
      if (HIDWORD(v81) <= 0x7F) {
        LOBYTE(v41) = (HIDWORD(v81) >> (56 - v39)) | v42;
      }
    }
    int v43 = v41 & 0x7F;
    if (v39) {
      unsigned int v44 = 0x8000;
    }
    else {
      unsigned int v44 = 46214;
    }
    unsigned int v45 = v44 >> (v39 >> 1);
    int v36 = (__int16)v36;
    int v46 = ((int)(((v45 + ((213 * v45 * v43) >> 16)) << v37) - v38) >> 16) * (__int16)v36;
    int v47 = (HIDWORD(v81) << (v39 + 8)) | v40;
    int v48 = (HIDWORD(v81) >> (56 - v39)) | v42;
    if (HIDWORD(v81) > 0x7F) {
      LOBYTE(v48) = v47;
    }
    if (v39 == 24) {
      char v49 = BYTE4(v81);
    }
    else {
      char v49 = v48;
    }
    unsigned int v50 = v45 + ((213 * v45 * (v49 & 0x7F)) >> 16);
  }
  int v51 = v46 + v38 + (((unsigned __int16)((v50 << v37) - v38) * v36) >> 16);
  *a4 = v51;
  unsigned int v52 = v81
      - 16 * (result * (v16 >> 16) + ((int)(result * (unsigned __int16)v16) >> 16))
      + ((v34 * (v17 >> 16) + ((v34 * (unsigned __int16)v17) >> 16)) << 6);
  if ((int)v52 < 1)
  {
    unsigned int v60 = 0;
    unsigned int v63 = 0;
  }
  else
  {
    unsigned int v53 = __clz(v52);
    unsigned int v54 = v52 >> (24 - v53);
    LOBYTE(v55) = v52;
    unsigned int v56 = v52 << (v53 - 24);
    if (v53 != 24)
    {
      int v55 = (v52 << (v53 + 8)) | v54;
      if (v52 <= 0x7F) {
        LOBYTE(v55) = (v52 >> (56 - v53)) | v56;
      }
    }
    int v57 = v55 & 0x7F;
    if (v53) {
      unsigned int v58 = 0x8000;
    }
    else {
      unsigned int v58 = 46214;
    }
    unsigned int v59 = v58 >> (v53 >> 1);
    unsigned int v60 = (v59 + ((213 * v59 * v57) >> 16)) << v37;
    int v61 = (v52 << (v53 + 8)) | v54;
    int v62 = (v52 >> (56 - v53)) | v56;
    if (v52 > 0x7F) {
      LOBYTE(v62) = v61;
    }
    if (v53 != 24) {
      LOBYTE(v52) = v62;
    }
    unsigned int v63 = v59 + ((213 * v59 * (v52 & 0x7F)) >> 16);
  }
  int v64 = a4[1] + ((int)(v60 - a4[1]) >> 16) * v36 + (((unsigned __int16)((v63 << v37) - a4[1]) * v36) >> 16);
  a4[1] = v64;
  if (v51 <= 1) {
    unsigned int v65 = 1;
  }
  else {
    unsigned int v65 = v51;
  }
  if (v64 >= 0) {
    unsigned int v66 = v64;
  }
  else {
    unsigned int v66 = -v64;
  }
  unsigned int v67 = __clz(v66);
  int v68 = v64 << (v67 - 1);
  unsigned int v69 = __clz(v65);
  int v70 = v65 << (v69 - 1);
  int v71 = 0x1FFFFFFF / (v70 >> 16);
  int v72 = (v68 >> 16) * v71 + (((unsigned __int16)v68 * v71) >> 16);
  int v73 = v68 - (((unint64_t)(v72 * (uint64_t)v70) >> 29) & 0xFFFFFFF8);
  int v74 = v72 + (v73 >> 16) * v71 + (((unsigned __int16)v73 * v71) >> 16);
  int v75 = v67 - v69;
  if (v67 - v69 + 15 >= 0x20) {
    int v76 = 0;
  }
  else {
    int v76 = v74 >> (v75 + 15);
  }
  int v77 = (int)0x80000000 >> (-15 - v75);
  if (v74 > v77) {
    int v77 = v74;
  }
  if (v74 <= (int)(0x7FFFFFFFu >> (-15 - v75))) {
    unsigned int v78 = v77;
  }
  else {
    unsigned int v78 = 0x7FFFFFFFu >> (-15 - v75);
  }
  int v79 = v78 << (-15 - v75);
  if (v75 > -16) {
    int v79 = v76;
  }
  int v80 = v79 & ~(v79 >> 31);
  if (v80 >= 0x7FFF) {
    int v80 = 0x7FFF;
  }
  *a1 = v80;
  return result;
}

uint64_t *silk_shell_encoder(uint64_t *result, int *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = (const float *)a2;
  do
  {
    float32x4x2_t v31 = vld2q_f32(v5);
    v5 += 8;
    *(int32x4_t *)((char *)&v21 + v4) = vaddq_s32((int32x4_t)v31.val[1], (int32x4_t)v31.val[0]);
    v4 += 16;
  }
  while (v4 != 32);
  unsigned int v6 = (const float *)&v21;
  float32x4x2_t v32 = vld2q_f32(v6);
  int32x4_t v7 = vaddq_s32((int32x4_t)v32.val[1], (int32x4_t)v32.val[0]);
  int v8 = v7.i32[1];
  int v9 = v7.i32[2];
  int v10 = v7.i32[0];
  int v11 = v7.i32[1] + v7.i32[0];
  int v20 = v7.i32[3];
  int v12 = v7.i32[3] + v7.i32[2];
  int v13 = v7.i32[3] + v7.i32[2] + v7.i32[1] + v7.i32[0];
  if (v13 >= 1) {
    uint64_t result = ec_enc_icdf(result, v7.i32[1] + v7.i32[0], (uint64_t)&silk_shell_code_table3[silk_shell_code_table_offsets[v13]], 8);
  }
  if (v11 >= 1) {
    uint64_t result = ec_enc_icdf(v3, v10, (uint64_t)&silk_shell_code_table2[silk_shell_code_table_offsets[v11]], 8);
  }
  uint64_t v14 = v21;
  if (v10 >= 1) {
    uint64_t result = ec_enc_icdf(v3, v21, (uint64_t)&silk_shell_code_table1[silk_shell_code_table_offsets[v10]], 8);
  }
  if ((int)v14 >= 1) {
    uint64_t result = ec_enc_icdf(v3, *a2, (uint64_t)&silk_shell_code_table0[silk_shell_code_table_offsets[v14]], 8);
  }
  if (v22 >= 1) {
    uint64_t result = ec_enc_icdf(v3, a2[2], (uint64_t)&silk_shell_code_table0[silk_shell_code_table_offsets[v22]], 8);
  }
  uint64_t v15 = v23;
  if (v8 >= 1) {
    uint64_t result = ec_enc_icdf(v3, v23, (uint64_t)&silk_shell_code_table1[silk_shell_code_table_offsets[v8]], 8);
  }
  if ((int)v15 >= 1) {
    uint64_t result = ec_enc_icdf(v3, a2[4], (uint64_t)&silk_shell_code_table0[silk_shell_code_table_offsets[v15]], 8);
  }
  if (v24 >= 1) {
    uint64_t result = ec_enc_icdf(v3, a2[6], (uint64_t)&silk_shell_code_table0[silk_shell_code_table_offsets[v24]], 8);
  }
  if (v12 >= 1) {
    uint64_t result = ec_enc_icdf(v3, v9, (uint64_t)&silk_shell_code_table2[silk_shell_code_table_offsets[v12]], 8);
  }
  uint64_t v16 = v25;
  if (v9 >= 1) {
    uint64_t result = ec_enc_icdf(v3, v25, (uint64_t)&silk_shell_code_table1[silk_shell_code_table_offsets[v9]], 8);
  }
  if ((int)v16 >= 1) {
    uint64_t result = ec_enc_icdf(v3, a2[8], (uint64_t)&silk_shell_code_table0[silk_shell_code_table_offsets[v16]], 8);
  }
  if (v26 >= 1) {
    uint64_t result = ec_enc_icdf(v3, a2[10], (uint64_t)&silk_shell_code_table0[silk_shell_code_table_offsets[v26]], 8);
  }
  uint64_t v17 = v27;
  if (v20 >= 1) {
    uint64_t result = ec_enc_icdf(v3, v27, (uint64_t)&silk_shell_code_table1[silk_shell_code_table_offsets[v20]], 8);
  }
  if ((int)v17 >= 1) {
    uint64_t result = ec_enc_icdf(v3, a2[12], (uint64_t)&silk_shell_code_table0[silk_shell_code_table_offsets[v17]], 8);
  }
  if (v28 >= 1)
  {
    int v18 = a2[14];
    unsigned int v19 = &silk_shell_code_table0[silk_shell_code_table_offsets[v28]];
    return ec_enc_icdf(v3, v18, (uint64_t)v19, 8);
  }
  return result;
}

uint64_t silk_shell_decoder(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 1)
  {
    int v10 = 0;
    int v7 = 0;
  }
  else
  {
    int v6 = ec_dec_icdf(a2, &silk_shell_code_table3[silk_shell_code_table_offsets[a3]], 8);
    int v7 = a3 - v6;
    if (v6 < 1)
    {
      int v10 = 0;
    }
    else
    {
      int v8 = v6;
      int v9 = ec_dec_icdf(a2, &silk_shell_code_table2[silk_shell_code_table_offsets[v6]], 8);
      int v10 = v8 - v9;
      if (v9 > 0)
      {
        int v11 = v9;
        int v12 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v9]], 8);
        int v13 = v11 - v12;
        if (v12 < 1)
        {
          int v15 = 0;
          int v16 = 0;
        }
        else
        {
          int v14 = v12;
          int v15 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v12]], 8);
          int v16 = v14 - v15;
        }
        *(_DWORD *)a1 = v15;
        *(_DWORD *)(a1 + 4) = v16;
        if (v13 < 1)
        {
          int v17 = 0;
          int v18 = 0;
        }
        else
        {
          int v17 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v13]], 8);
          int v18 = v13 - v17;
        }
        goto LABEL_9;
      }
    }
  }
  int v17 = 0;
  int v18 = 0;
  *(void *)a1 = 0;
LABEL_9:
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 12) = v18;
  if (v10 <= 0)
  {
    int v24 = 0;
    int v25 = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    int v19 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v10]], 8);
    int v20 = v10 - v19;
    if (v19 < 1)
    {
      int v22 = 0;
      int v23 = 0;
    }
    else
    {
      int v21 = v19;
      int v22 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v19]], 8);
      int v23 = v21 - v22;
    }
    *(_DWORD *)(a1 + 16) = v22;
    *(_DWORD *)(a1 + 20) = v23;
    if (v20 < 1)
    {
      int v24 = 0;
      int v25 = 0;
    }
    else
    {
      int v24 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v20]], 8);
      int v25 = v20 - v24;
    }
  }
  *(_DWORD *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 28) = v25;
  if (v7 < 1)
  {
    int v27 = 0;
  }
  else
  {
    int v26 = ec_dec_icdf(a2, &silk_shell_code_table2[silk_shell_code_table_offsets[v7]], 8);
    int v27 = v7 - v26;
    if (v26 > 0)
    {
      int v28 = v26;
      int v29 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v26]], 8);
      int v30 = v28 - v29;
      if (v29 < 1)
      {
        int v32 = 0;
        int v33 = 0;
      }
      else
      {
        int v31 = v29;
        int v32 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v29]], 8);
        int v33 = v31 - v32;
      }
      *(_DWORD *)(a1 + 32) = v32;
      *(_DWORD *)(a1 + 36) = v33;
      if (v30 < 1)
      {
        int v34 = 0;
        int v35 = 0;
      }
      else
      {
        int v34 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v30]], 8);
        int v35 = v30 - v34;
      }
      goto LABEL_27;
    }
  }
  int v34 = 0;
  int v35 = 0;
  *(void *)(a1 + 32) = 0;
LABEL_27:
  *(_DWORD *)(a1 + 40) = v34;
  *(_DWORD *)(a1 + 44) = v35;
  if (v27 <= 0)
  {
    uint64_t result = 0;
    int v42 = 0;
    *(void *)(a1 + 48) = 0;
  }
  else
  {
    int v36 = ec_dec_icdf(a2, &silk_shell_code_table1[silk_shell_code_table_offsets[v27]], 8);
    int v37 = v27 - v36;
    if (v36 < 1)
    {
      int v39 = 0;
      int v40 = 0;
    }
    else
    {
      int v38 = v36;
      int v39 = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v36]], 8);
      int v40 = v38 - v39;
    }
    *(_DWORD *)(a1 + 48) = v39;
    *(_DWORD *)(a1 + 52) = v40;
    if (v37 < 1)
    {
      uint64_t result = 0;
      int v42 = 0;
    }
    else
    {
      uint64_t result = ec_dec_icdf(a2, &silk_shell_code_table0[silk_shell_code_table_offsets[v37]], 8);
      int v42 = v37 - result;
    }
  }
  *(_DWORD *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = v42;
  return result;
}

int *silk_LP_variable_cutoff(int *result, uint64_t a2, int a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v3 = result[3];
  if (!v3) {
    return result;
  }
  int v4 = result[2];
  int v5 = 0x40000 - (v4 << 10);
  if (v5 >= 0x40000)
  {
    uint64_t v30 = 0xAA4FADA0552B622;
    int v31 = 89306658;
    int v17 = &qword_220774A4C;
LABEL_12:
    uint64_t v29 = *v17;
    goto LABEL_13;
  }
  int v6 = v5 >> 16;
  unsigned int v7 = (unsigned __int16)(-1024 * v4);
  if (!(-1024 * (_WORD)v4))
  {
    int v18 = (char *)&silk_Transition_LP_B_Q28 + 12 * v6;
    uint64_t v30 = *(void *)v18;
    int v31 = *((_DWORD *)v18 + 2);
    int v17 = (uint64_t *)((char *)&silk_Transition_LP_A_Q28 + 8 * v6);
    goto LABEL_12;
  }
  if (v7 >= 0x8000)
  {
    uint64_t v20 = 0;
    uint64_t v21 = v6;
    uint64_t v22 = v6 + 1;
    int v23 = (char *)&silk_Transition_LP_B_Q28 + 12 * v6;
    do
    {
      *(_DWORD *)((char *)&v30 + v20) = *(_DWORD *)&v23[v20 + 12]
                                      + ((*(_DWORD *)&v23[v20 + 12] - *(_DWORD *)&v23[v20]) >> 16) * (__int16)v7
                                      + (((unsigned __int16)(*(_DWORD *)&v23[v20 + 12] - *(_WORD *)&v23[v20])
                                        * (__int16)v7) >> 16);
      v20 += 4;
    }
    while (v20 != 12);
    uint64_t v24 = 0;
    char v25 = 1;
    int v26 = (char *)&silk_Transition_LP_A_Q28 + 8 * v22;
    int v27 = (char *)&silk_Transition_LP_A_Q28 + 8 * v21;
    do
    {
      char v28 = v25;
      *((_DWORD *)&v29 + v24) = *(_DWORD *)&v26[4 * v24]
                              + ((*(_DWORD *)&v26[4 * v24] - *(_DWORD *)&v27[4 * v24]) >> 16) * (__int16)v7
                              + (((unsigned __int16)(*(_DWORD *)&v26[4 * v24] - *(_WORD *)&v27[4 * v24]) * (__int16)v7) >> 16);
      uint64_t v24 = 1;
      char v25 = 0;
    }
    while ((v28 & 1) != 0);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = v6;
    uint64_t v10 = v6 + 1;
    int v11 = (char *)&silk_Transition_LP_B_Q28 + 12 * v6;
    do
    {
      *(_DWORD *)((char *)&v30 + v8) = *(_DWORD *)&v11[v8]
                                     + ((*(_DWORD *)&v11[v8 + 12] - *(_DWORD *)&v11[v8]) >> 16) * v7
                                     + (((unsigned __int16)(*(_WORD *)&v11[v8 + 12] - *(_DWORD *)&v11[v8]) * v7) >> 16);
      v8 += 4;
    }
    while (v8 != 12);
    uint64_t v12 = 0;
    char v13 = 1;
    int v14 = (char *)&silk_Transition_LP_A_Q28 + 8 * v9;
    int v15 = (char *)&silk_Transition_LP_A_Q28 + 8 * v10;
    do
    {
      char v16 = v13;
      *((_DWORD *)&v29 + v12) = *(_DWORD *)&v14[4 * v12]
                              + ((*(_DWORD *)&v15[4 * v12] - *(_DWORD *)&v14[4 * v12]) >> 16) * v7
                              + (((unsigned __int16)(*(_WORD *)&v15[4 * v12] - *(_DWORD *)&v14[4 * v12]) * v7) >> 16);
      uint64_t v12 = 1;
      char v13 = 0;
    }
    while ((v16 & 1) != 0);
  }
LABEL_13:
  int v19 = (v4 + v3) & ~((v4 + v3) >> 31);
  if (v19 >= 256) {
    int v19 = 256;
  }
  result[2] = v19;
  return (int *)silk_biquad_alt(a2, (int *)&v30, &v29, result, a2, a3, 1);
}

void *silk_process_NLSFs(uint64_t a1, __int16 *a2, __int16 *a3, __int16 *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)(a1 + 4813);
  int v9 = ((59246 * *(__int16 *)(a1 + 4556)) >> 16) - 5 * *(__int16 *)(a1 + 4556) + 3146;
  if (*(_DWORD *)(a1 + 4604) == 2) {
    int v10 = v9 >> 1;
  }
  else {
    int v10 = 0;
  }
  int v11 = v10 + v9;
  silk_NLSF_VQ_weights_laroia(v21, a3, *(_DWORD *)(a1 + 4664));
  int v12 = 0;
  if (*(_DWORD *)(a1 + 4656) == 1)
  {
    int v13 = v8[2];
    if (v13 > 3)
    {
      int v12 = 0;
    }
    else
    {
      silk_interpolate(v22, a4, a3, v13, *(_DWORD *)(a1 + 4664));
      silk_NLSF_VQ_weights_laroia(v20, v22, *(_DWORD *)(a1 + 4664));
      uint64_t v14 = *(unsigned int *)(a1 + 4664);
      if ((int)v14 >= 1)
      {
        int v15 = (__int16)((v8[2] * (unsigned __int16)v8[2]) << 11);
        char v16 = v20;
        int v17 = v21;
        do
        {
          int v18 = *v16++;
          *int v17 = ((__int16)v18 >> 15) * v15 + ((v18 * v15) >> 16) + (*v17 >> 1);
          ++v17;
          --v14;
        }
        while (v14);
      }
      int v12 = 1;
    }
  }
  silk_NLSF_encode((char *)(a1 + 4792), a3, *(__int16 **)(a1 + 4736), v21, v11, *(unsigned int *)(a1 + 4692), *v8);
  silk_NLSF2A(a2 + 16, a3, *(_DWORD *)(a1 + 4664));
  if (!v12) {
    return memcpy(a2, a2 + 16, 2 * *(int *)(a1 + 4664));
  }
  silk_interpolate(v22, a4, a3, v8[2], *(_DWORD *)(a1 + 4664));
  return (void *)silk_NLSF2A(a2, v22, *(_DWORD *)(a1 + 4664));
}

__n128 silk_decode_core(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  int v144 = a3;
  uint64_t v6 = a1;
  uint64_t v193 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(int *)(a1 + 2336);
  uint64_t v8 = (char *)&v142 - ((2 * v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, 2 * v7);
  int v9 = *(_DWORD *)(v6 + 2328);
  size_t v10 = 4 * (v9 + (int)v7);
  int v11 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  size_t v12 = 4 * *(int *)(v6 + 2332);
  int v13 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v13, v12);
  size_t v14 = v12 + 64;
  int v15 = (__n128 *)((char *)&v142 - ((v12 + 79) & 0xFFFFFFFFFFFFFFF0));
  int v148 = *(char *)(v6 + 2791);
  if (v9 >= 1)
  {
    uint64_t v16 = 0;
    int v17 = *(char *)(v6 + 2794);
    int v18 = 16 * silk_Quantization_Offsets_Q10[2 * (*(char *)(v6 + 2789) >> 1) + *(char *)(v6 + 2790)];
    do
    {
      int v19 = 196314165 * v17 + 907633515;
      int v20 = *(_DWORD *)(a4 + 4 * v16) << 14;
      int v21 = (v20 | 0x500) & (v20 >> 31);
      if (v20 > 0) {
        int v21 = v20 - 1280;
      }
      int v22 = v21 + v18;
      if (v19 < 0) {
        int v22 = -v22;
      }
      *(_DWORD *)(v6 + 4 + 4 * v16) = v22;
      int v17 = *(_DWORD *)(a4 + 4 * v16++) + v19;
    }
    while (v16 < *(int *)(v6 + 2328));
  }
  bzero(v15, v14);
  __n128 v23 = *(__n128 *)(v6 + 1300);
  *int v15 = *(__n128 *)(v6 + 1284);
  v15[1] = v23;
  __n128 v24 = *(__n128 *)(v6 + 1316);
  __n128 v25 = *(__n128 *)(v6 + 1332);
  int v143 = (__n128 *)(v6 + 1284);
  v15[2] = v24;
  v15[3] = v25;
  if (*(int *)(v6 + 2324) >= 1)
  {
    uint64_t v26 = a2;
    int64_t v27 = 0;
    char v28 = (char *)(v6 + 4);
    int v151 = *(_DWORD *)(v6 + 2336);
    unsigned int v145 = v11 - 8;
    uint64_t v29 = v144;
    uint64_t v150 = v11;
    int v149 = v13;
    uint64_t v152 = v26;
    uint64_t v147 = v6;
    int v146 = v8;
    do
    {
      unint64_t v155 = v27;
      uint64_t v30 = v26 + 32 * (v27 >> 1) + 32;
      __memcpy_chk();
      uint64_t v26 = v152;
      unint64_t v31 = v155;
      int v32 = *(_DWORD *)(v152 + 4 * v155 + 16);
      if (v32 >= 0) {
        unsigned int v33 = *(_DWORD *)(v152 + 4 * v155 + 16);
      }
      else {
        unsigned int v33 = -v32;
      }
      unsigned int v34 = __clz(v33);
      int v35 = v32 << (v34 - 1);
      int v36 = 0x1FFFFFFF / (v35 >> 16);
      int v37 = (__int16)v36;
      int v38 = (v35 >> 16) * v37 + (((unsigned __int16)v35 * v37) >> 16);
      int v39 = (v36 << 16)
          - 8 * v38 * (((v36 >> 15) + 1) >> 1)
          + ((-8 * v38) >> 16) * v37
          + ((((-8 * v38) & 0xFFF8) * v37) >> 16);
      unsigned int v40 = v33 >> 17;
      int v41 = v39 >> (15 - v34);
      int v42 = (int)0x80000000 >> (v34 - 15);
      if (v39 > v42) {
        int v42 = v39;
      }
      if (v39 <= (int)(0x7FFFFFFFu >> (v34 - 15))) {
        unsigned int v43 = v42;
      }
      else {
        unsigned int v43 = 0x7FFFFFFFu >> (v34 - 15);
      }
      int v44 = v43 << (v34 - 15);
      if (v40) {
        int v45 = v41;
      }
      else {
        int v45 = v44;
      }
      int v46 = *(_DWORD *)v6;
      int v47 = v29;
      if (v32 == *(_DWORD *)v6)
      {
        uint64_t v48 = v30;
        signed int v49 = 0x10000;
      }
      else
      {
        uint64_t v50 = 0;
        if (v46 >= 0) {
          unsigned int v51 = *(_DWORD *)v6;
        }
        else {
          unsigned int v51 = -v46;
        }
        unsigned int v52 = __clz(v51);
        int v53 = v46 << (v52 - 1);
        int v54 = (v53 >> 16) * v37 + (((unsigned __int16)v53 * v37) >> 16);
        int v55 = v53 - (((unint64_t)(v54 * (uint64_t)v35) >> 29) & 0xFFFFFFF8);
        int v56 = v54 + (v55 >> 16) * v37 + (((unsigned __int16)v55 * v37) >> 16);
        int v57 = v52 - v34;
        if ((v57 + 29) >= 0x30) {
          int v58 = 0;
        }
        else {
          int v58 = v56 >> (v57 + 13);
        }
        int v59 = (int)0x80000000 >> (-13 - v57);
        if (v56 > v59) {
          int v59 = v56;
        }
        if (v56 <= (int)(0x7FFFFFFFu >> (-13 - v57))) {
          unsigned int v60 = v59;
        }
        else {
          unsigned int v60 = 0x7FFFFFFFu >> (-13 - v57);
        }
        signed int v61 = v60 << (-13 - v57);
        if (v57 <= -14) {
          signed int v49 = v61;
        }
        else {
          signed int v49 = v58;
        }
        int32x4_t v62 = vdupq_n_s32(v49 >> 16);
        int32x4_t v63 = vdupq_n_s32((unsigned __int16)v49);
        int32x4_t v64 = vdupq_n_s32(v49);
        v65.i64[0] = 0x100000001;
        v65.i64[1] = 0x100000001;
        do
        {
          int32x4_t v66 = (int32x4_t)v15[v50];
          int32x4_t v67 = vshrq_n_s32(vshlq_n_s32(v66, 0x10uLL), 0x10uLL);
          v15[v50++] = (__n128)vmlaq_s32(vsraq_n_s32(vmulq_s32(v67, v62), vmulq_s32(v67, v63), 0x10uLL), vhaddq_s32(vshrq_n_s32(v66, 0xFuLL), v65), v64);
        }
        while (v50 != 4);
        uint64_t v48 = v30;
      }
      int v68 = (__int16 *)(v152 + 2 * (5 * v31) + 96);
      int v69 = *(unsigned __int8 *)(v6 + 2789);
      *(_DWORD *)uint64_t v6 = v32;
      int v70 = *(_DWORD *)(v6 + 4184);
      int v153 = v28;
      if (!v70 || (*(_DWORD *)(v6 + 4188) == 2 ? (BOOL v71 = v31 > 1) : (BOOL v71 = 1), !v71 ? (v72 = v69 == 2) : (v72 = 1), v72))
      {
        if (v69 != 2)
        {
          uint64_t v73 = *(unsigned int *)(v6 + 2332);
          __int16 v176 = v28;
          int v74 = v47;
          goto LABEL_78;
        }
        unsigned int v175 = v47;
        int v75 = *(_DWORD *)(v152 + 4 * v31);
      }
      else
      {
        unsigned int v175 = v47;
        *(void *)int v68 = 0;
        *(_WORD *)(v152 + 2 * (5 * v31) + 104) = 0;
        *(_WORD *)(v152 + 2 * (5 * v31) + 100) = 4096;
        int v75 = *(_DWORD *)(v6 + 2308);
        *(_DWORD *)(v152 + 4 * v31) = v75;
      }
      BOOL v77 = v148 < 4 && v31 == 2;
      if (!v31 || v77)
      {
        int v80 = *(_DWORD *)(v6 + 2336);
        int v81 = *(_DWORD *)(v6 + 2340);
        int v82 = *(_DWORD *)(v6 + 2332);
        if (v31 == 2)
        {
          memcpy((void *)(v6 + 2 * v80 + 1348), v144, 4 * v82);
          LODWORD(v31) = v155;
          int v82 = *(_DWORD *)(v6 + 2332);
          int v83 = *(_DWORD *)(v6 + 2336);
          int v84 = *(_DWORD *)(v6 + 2340);
        }
        else
        {
          int v84 = *(_DWORD *)(v6 + 2340);
          int v83 = *(_DWORD *)(v6 + 2336);
        }
        silk_LPC_analysis_filter(&v8[2 * (v80 - v75 - v81) - 4], v6 + 2 * (v80 - v75 - v81 - 2 + v82 * (int)v31) + 1348, v48, v83 - (v80 - v75 - v81 - 2), v84);
        unint64_t v31 = v155;
        if (v155)
        {
          int v11 = v150;
          int v13 = v149;
          uint64_t v26 = v152;
        }
        else
        {
          uint64_t v26 = v152;
          int v45 = 4
              * (*(__int16 *)(v152 + 136) * (v45 >> 16) + ((*(__int16 *)(v152 + 136) * (unsigned __int16)v45) >> 16));
          int v11 = v150;
          int v13 = v149;
        }
        if (v75 >= -1)
        {
          uint64_t v85 = (v75 + 2);
          int v86 = v151 - 1;
          int v87 = *(_DWORD *)(v6 + 2336) - 1;
          do
          {
            int v88 = *(__int16 *)&v8[2 * v87];
            *(_DWORD *)&v11[4 * v86--] = (v45 >> 16) * v88 + (((unsigned __int16)v45 * v88) >> 16);
            --v87;
            --v85;
          }
          while (v85);
        }
      }
      else if (v49 != 0x10000 && v75 >= -1)
      {
        uint64_t v78 = (v75 + 2);
        int v79 = v151 - 1;
        do
        {
          *(_DWORD *)&v11[4 * v79] = (__int16)*(_DWORD *)&v11[4 * v79] * (v49 >> 16)
                                   + (((__int16)*(_DWORD *)&v11[4 * v79] * (unsigned __int16)v49) >> 16)
                                   + (((*(int *)&v11[4 * v79] >> 15) + 1) >> 1) * v49;
          --v79;
          --v78;
        }
        while (v78);
      }
      uint64_t v154 = *(unsigned int *)(v6 + 2332);
      if ((int)v154 >= 1)
      {
        uint64_t v89 = 0;
        int v90 = *v68;
        int v91 = v68[1];
        int v92 = v68[2];
        int v93 = v68[3];
        int v94 = v68[4];
        uint64_t v95 = &v11[4 * v151];
        uint64_t v96 = (int *)&v145[4 * (v151 - v75) + 8];
        int32x4_t v97 = v96;
        char v28 = v153;
        uint64_t v73 = v154;
        do
        {
          int v98 = v97[1];
          ++v97;
          int v99 = *(_DWORD *)&v28[4 * v89]
              + 2
              * ((v96[2] >> 16) * v90
               + (((unsigned __int16)v96[2] * v90) >> 16)
               + (v98 >> 16) * v91
               + (((unsigned __int16)v98 * v91) >> 16)
               + (*v96 >> 16) * v92
               + (((unsigned __int16)*v96 * v92) >> 16)
               + (*(v96 - 1) >> 16) * v93
               + (((unsigned __int16)*(v96 - 1) * v93) >> 16)
               + (*(v96 - 2) >> 16) * v94
               + (((unsigned __int16)*(v96 - 2) * v94) >> 16))
              + 4;
          *(_DWORD *)&v13[4 * v89] = v99;
          *(_DWORD *)&v95[4 * v89++] = 2 * v99;
          uint64_t v96 = v97;
        }
        while (v73 != v89);
        v151 += v89;
        __int16 v176 = v13;
        unint64_t v31 = v155;
        int v74 = v175;
LABEL_78:
        uint64_t v154 = v73;
        if ((int)v73 >= 1)
        {
          uint64_t v100 = 0;
          int v172 = *(_DWORD *)(v6 + 2340);
          int v170 = v178;
          int v171 = v177;
          int v168 = v180;
          int v169 = v179;
          int v101 = v181;
          LODWORD(v175) = v182;
          int v173 = v172 >> 1;
          int v174 = v183;
          int v102 = v184;
          int v103 = v185;
          int v104 = v186;
          int v164 = v187;
          int v162 = v188;
          int v163 = v185;
          int v159 = v190;
          int v160 = v189;
          int v156 = v192;
          int v157 = v191;
          int v105 = v15[3].n128_i32[3];
          int v106 = v15[3].n128_i32[1];
          int v107 = v15[2].n128_i32[3];
          int v108 = v15[2].n128_i32[1];
          int v109 = v15[1].n128_i32[3];
          int v165 = v186;
          int v161 = v184;
          int v158 = v181;
          do
          {
            int v110 = v105 >> 16;
            int v111 = (unsigned __int16)v105 * v171;
            uint64_t v112 = (int *)v15 + v100;
            int v113 = v112[14];
            int v114 = (unsigned __int16)v106 * v169;
            int v115 = v173
                 + v110 * v171
                 + (v111 >> 16)
                 + (v113 >> 16) * v170
                 + (((unsigned __int16)v113 * v170) >> 16)
                 + (v106 >> 16) * v169;
            int v116 = v112[12];
            int v117 = v115 + (v114 >> 16) + (v116 >> 16) * v168 + (((unsigned __int16)v116 * v168) >> 16);
            int v118 = (unsigned __int16)v107 * v101;
            int v119 = v117 + (v107 >> 16) * v101;
            int v120 = v112[10];
            int v121 = v119 + (v118 >> 16) + (v120 >> 16) * v175 + (((unsigned __int16)v120 * (int)v175) >> 16);
            int v122 = (unsigned __int16)v108 * v174;
            int v123 = v121 + (v108 >> 16) * v174;
            int v124 = v112[8];
            int v125 = v123
                 + (v122 >> 16)
                 + (v124 >> 16) * v102
                 + (((unsigned __int16)v124 * v102) >> 16)
                 + (v109 >> 16) * v103
                 + (((unsigned __int16)v109 * v103) >> 16)
                 + (v112[6] >> 16) * v104
                 + (((unsigned __int16)v112[6] * v104) >> 16);
            if (v172 == 16)
            {
              int v126 = v112[4];
              int v127 = v112[5] >> 16;
              int v128 = (unsigned __int16)v112[5] * v164;
              int v166 = (unsigned __int16)v126 * v162;
              int v167 = v126 >> 16;
              uint64_t v129 = v100 + 1;
              int v101 = v158;
              int v102 = v161;
              int v103 = v163;
              int v104 = v165;
              v125 += v127 * v164
                    + (v128 >> 16)
                    + v167 * v162
                    + (v166 >> 16)
                    + (v112[3] >> 16) * v160
                    + (((unsigned __int16)v112[3] * v160) >> 16)
                    + (v112[2] >> 16) * v159
                    + (((unsigned __int16)v112[2] * v159) >> 16)
                    + (v15->n128_i32[v100 + 1] >> 16) * v157
                    + (((unsigned __int16)v15->n128_u32[v100 + 1] * v157) >> 16)
                    + (*v112 >> 16) * v156
                    + (((unsigned __int16)*v112 * v156) >> 16);
            }
            else
            {
              uint64_t v129 = v100 + 1;
            }
            int v105 = *(_DWORD *)&v176[4 * v100] + 16 * v125;
            v15[4].n128_u32[v100] = v105;
            int v130 = v105 * (((v32 >> 21) + 1) >> 1)
                 + (v105 >> 16) * (__int16)(v32 >> 6)
                 + (((unsigned __int16)v105 * (__int16)(v32 >> 6)) >> 16);
            unsigned int v131 = ((v130 >> 7) + 1) >> 1;
            if (v130 < -8388736) {
              LOWORD(v131) = 0x8000;
            }
            if (v130 <= 8388479) {
              __int16 v132 = v131;
            }
            else {
              __int16 v132 = 0x7FFF;
            }
            v74[v100] = v132;
            int v109 = v124;
            int v108 = v120;
            int v107 = v116;
            int v106 = v113;
            uint64_t v100 = v129;
          }
          while (v129 != v73);
          uint64_t v26 = v152;
          char v28 = v153;
          uint64_t v6 = v147;
          uint64_t v8 = v146;
          int v11 = v150;
          int v13 = v149;
          unint64_t v31 = v155;
        }
        goto LABEL_91;
      }
      char v28 = v153;
      int v74 = v175;
LABEL_91:
      int v133 = v154;
      int v134 = (__n128 *)((char *)v15 + 4 * (int)v154);
      __n128 v135 = *v134;
      __n128 v136 = v134[1];
      __n128 v137 = v134[3];
      v15[2] = v134[2];
      v15[3] = v137;
      *int v15 = v135;
      v15[1] = v136;
      v28 += 4 * v133;
      uint64_t v29 = (char *)&v74[v133];
      int64_t v27 = v31 + 1;
    }
    while (v27 < *(int *)(v6 + 2324));
  }
  __n128 v138 = v15[1];
  int v139 = v143;
  *int v143 = *v15;
  v139[1] = v138;
  __n128 result = v15[2];
  __n128 v141 = v15[3];
  v139[2] = result;
  v139[3] = v141;
  return result;
}

_DWORD *silk_stereo_quant_pred(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  char v4 = 1;
  do
  {
    uint64_t v5 = 0;
    char v6 = v4;
    uint64_t v7 = (unsigned char *)(a2 + 3 * v2);
    uint64_t v8 = v7 + 1;
    unsigned int v9 = 0x7FFFFFFF;
    while (1)
    {
      size_t v10 = (__int16 *)((char *)&silk_stereo_pred_quant_Q13 + 2 * v5);
      int v11 = *v10;
      unsigned int v12 = 6554 * ((v10[1] - v11) >> 16) + ((6554 * (unsigned __int16)(v10[1] - *v10)) >> 16);
      int v13 = v12 + v11;
      int v14 = result[v2] - (v12 + v11);
      if (v14 < 0) {
        int v14 = v13 - result[v2];
      }
      if (v14 >= v9)
      {
        LOBYTE(v5) = *v7;
        goto LABEL_27;
      }
      *uint64_t v7 = v5;
      *uint64_t v8 = 0;
      int v3 = 3 * v12 + v11;
      if (result[v2] - v3 >= 0) {
        unsigned int v15 = result[v2] - v3;
      }
      else {
        unsigned int v15 = v3 - result[v2];
      }
      if (v15 >= v14)
      {
LABEL_24:
        int v3 = v13;
        goto LABEL_27;
      }
      *uint64_t v7 = v5;
      *uint64_t v8 = 1;
      if ((int)(result[v2] - (5 * v12 + v11)) >= 0) {
        unsigned int v16 = result[v2] - (5 * v12 + v11);
      }
      else {
        unsigned int v16 = 5 * v12 + v11 - result[v2];
      }
      if (v16 >= v15) {
        goto LABEL_27;
      }
      *uint64_t v7 = v5;
      *uint64_t v8 = 2;
      int v13 = v11 - v12 + 8 * v12;
      unsigned int v17 = result[v2] - v13 >= 0 ? result[v2] - v13 : v13 - result[v2];
      if (v17 >= v16) {
        break;
      }
      *uint64_t v7 = v5;
      *uint64_t v8 = 3;
      int v3 = 9 * v12 + v11;
      if (result[v2] - v3 >= 0) {
        unsigned int v9 = result[v2] - v3;
      }
      else {
        unsigned int v9 = v3 - result[v2];
      }
      if (v9 >= v17) {
        goto LABEL_24;
      }
      *uint64_t v7 = v5;
      *uint64_t v8 = 4;
      if (++v5 == 15)
      {
        LOBYTE(v5) = 14;
        goto LABEL_27;
      }
    }
    int v3 = 5 * v12 + v11;
LABEL_27:
    char v4 = 0;
    unsigned int v18 = (((86 * (char)v5) >> 15) & 1) + ((86 * (char)v5) >> 8);
    *(unsigned char *)(a2 + 3 * v2 + 2) = v18;
    *uint64_t v7 = -3 * v18 + v5;
    result[v2] = v3;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  *result -= result[1];
  return result;
}

int *silk_resampler_down2(int *result, __int16 *a2, uint64_t a3, int a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = a4 >> 1;
    uint64_t v5 = (__int16 *)(a3 + 2);
    int v7 = *result;
    unsigned int v6 = result[1];
    do
    {
      int v8 = *(v5 - 1);
      int v9 = (v8 << 10) - v7;
      int v10 = -25727 * (v9 >> 16) + ((-25727 * (unsigned __int16)v9) >> 16) + (v8 << 10);
      int v7 = v10 + v9;
      int v11 = *v5;
      unsigned int v12 = 9872 * ((int)((v11 << 10) - v6) >> 16)
          + ((9872 * (unsigned __int16)(((_WORD)v11 << 10) - v6)) >> 16);
      int v13 = v10 + v6 + v12;
      unsigned int v6 = v12 + (v11 << 10);
      v5 += 2;
      int v14 = ((v13 >> 10) + 1) >> 1;
      if (v14 <= -32768) {
        LOWORD(v14) = 0x8000;
      }
      if (v13 <= 67107839) {
        __int16 v15 = v14;
      }
      else {
        __int16 v15 = 0x7FFF;
      }
      *a2++ = v15;
      --v4;
    }
    while (v4);
    *__n128 result = v7;
    result[1] = v6;
  }
  return result;
}

__int16 *silk_ana_filt_bank_1(__int16 *result, int32x2_t *a2, __int16 *a3, __int16 *a4, int a5)
{
  if (a5 >= 2)
  {
    uint64_t v5 = a5 >> 1;
    int32x2_t v6 = *a2;
    do
    {
      v7.i32[0] = *result;
      v7.i32[1] = result[1];
      int32x2_t v8 = vshl_n_s32(v7, 0xAuLL);
      int32x2_t v9 = vsub_s32(v8, v6);
      int32x2_t v10 = vmul_s32((int32x2_t)vand_s8((int8x8_t)v9, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)0x2A24FFFFA11ELL);
      uint32x2_t v11 = vshr_n_u32((uint32x2_t)v10, 0x10uLL);
      v10.i32[0] = vshr_n_s32(v10, 0x10uLL).u32[0];
      v10.i32[1] = v11.i32[1];
      int32x2_t v12 = vmla_s32(v10, vshr_n_s32(v9, 0x10uLL), (int32x2_t)0x2A24FFFFA11ELL);
      v9.i32[1] = v8.i32[1];
      v8.i32[1] = v6.i32[1];
      int32x2_t v13 = vadd_s32(v12, v8);
      __int32 v14 = v13.i32[1];
      __int32 v15 = v13.i32[0];
      int32x2_t v6 = vadd_s32((int32x2_t)__PAIR64__(v12.u32[1], v13.u32[0]), v9);
      unsigned int v16 = (((v14 + v15) >> 10) + 1) >> 1;
      if (v14 + v15 < -67109888) {
        LOWORD(v16) = 0x8000;
      }
      if (v14 + v15 <= 67107839) {
        __int16 v17 = v16;
      }
      else {
        __int16 v17 = 0x7FFF;
      }
      *a3++ = v17;
      int v18 = v14 - v15;
      unsigned int v19 = ((v18 >> 10) + 1) >> 1;
      if (v18 < -67109888) {
        LOWORD(v19) = 0x8000;
      }
      if (v18 <= 67107839) {
        __int16 v20 = v19;
      }
      else {
        __int16 v20 = 0x7FFF;
      }
      *a4++ = v20;
      result += 2;
      --v5;
    }
    while (v5);
    *a2 = v6;
  }
  return result;
}

uint64_t silk_A2NLSF(_WORD *a1, int *a2, int a3)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  int32x4_t v67 = v70;
  int v68 = v69;
  int v5 = a3 >> 1;
  v70[v5] = 0x10000;
  uint64_t v6 = (uint64_t)a3 >> 1;
  v69[v5] = 0x10000;
  if (a3 <= 1)
  {
    int v24 = 0;
    int v20 = silk_LSFCosTab_FIX_Q12[0];
    __n128 v25 = v70;
    uint64_t v19 = 0x10000;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = (a3 >> 1);
    unint64_t v9 = v8;
    do
    {
      int v10 = a2[(int)--v9];
      int v11 = a2[v6 + v7];
      v70[v7] = -v11 - v10;
      v69[v7++] = v11 - v10;
    }
    while (v9);
    unint64_t v12 = (a3 >> 1);
    do
    {
      v70[(v12 - 1)] -= v70[v12];
      v69[(v12 - 1)] += v69[v12];
      BOOL v13 = v12-- > 1;
    }
    while (v13);
    if (a3 >= 4)
    {
      uint64_t v14 = (v6 + 1);
      uint64_t v15 = 2;
      do
      {
        if (v15 < v8)
        {
          uint64_t v16 = (a3 >> 1);
          do
          {
            v69[v16 + 7] -= v70[v16];
            --v16;
          }
          while (v16 > v15);
        }
        v69[v15 + 7] -= 2 * v70[v15];
        ++v15;
      }
      while (v15 != v14);
      uint64_t v17 = 2;
      do
      {
        if (v17 < v8)
        {
          uint64_t v18 = (a3 >> 1);
          do
          {
            v69[v18 - 2] -= v69[v18];
            --v18;
          }
          while (v18 > v17);
        }
        v69[v17 - 2] -= 2 * v69[v17];
        ++v17;
      }
      while (v17 != v14);
    }
    LODWORD(v19) = v70[v6];
    int v20 = silk_LSFCosTab_FIX_Q12[0];
    int v21 = (__int16)(16 * silk_LSFCosTab_FIX_Q12[0]);
    int v22 = ((silk_LSFCosTab_FIX_Q12[0] >> 11) + 1) >> 1;
    unint64_t v23 = v8 + 1;
    do
      uint64_t v19 = (v70[(v23-- - 2)]
                         + v19 * v22
                         + ((int)v19 >> 16) * v21
                         + (((unsigned __int16)v19 * v21) >> 16));
    while (v23 > 1);
    if ((v19 & 0x80000000) != 0)
    {
      *a1 = 0;
      __n128 v25 = v69;
      LODWORD(v19) = v69[v6];
      unint64_t v26 = v8 + 1;
      do
        uint64_t v19 = (v69[(v26-- - 2)]
                           + v19 * v22
                           + ((int)v19 >> 16) * v21
                           + (((unsigned __int16)v19 * v21) >> 16));
      while (v26 > 1);
      int v24 = 1;
    }
    else
    {
      int v24 = 0;
      __n128 v25 = v70;
    }
  }
  unsigned int v27 = 0;
  uint64_t v59 = (v6 + 1);
  unint64_t v60 = (a3 >> 1);
  int v62 = (__int16)(16 * v20);
  int v63 = v20;
  int v61 = ((v20 >> 11) + 1) >> 1;
  int v58 = &a2[v6];
  while (1)
  {
    unsigned int v65 = v27;
    int v28 = 1;
    int v29 = v20;
    do
    {
      int v30 = 0;
      int v31 = v29;
      int v29 = silk_LSFCosTab_FIX_Q12[v28];
      int v32 = (__int16)(16 * silk_LSFCosTab_FIX_Q12[v28]);
      int v33 = v28 << 8;
      unsigned int v66 = v28;
      for (uint64_t result = v19; ; uint64_t result = 4096 - ((v24 << 12) & 0x2000u))
      {
        uint64_t v19 = *(unsigned int *)&v25[4 * v6];
        if (a3 > 1)
        {
          unint64_t v35 = v6 + 1;
          LODWORD(v19) = *(_DWORD *)&v25[4 * v6];
          do
            uint64_t v19 = (*(_DWORD *)&v25[4 * (v35-- - 2)]
                               + v19 * (((v29 >> 11) + 1) >> 1)
                               + ((int)v19 >> 16) * v32
                               + (((unsigned __int16)v19 * v32) >> 16));
          while (v35 > 1);
        }
        if (((int)result >= 1 || (int)v19 < v30) && ((result & 0x80000000) != 0 || (int)v19 > -v30)) {
          break;
        }
        int v36 = 0;
        int v37 = -256;
        int v38 = v19;
        int v39 = v29;
        do
        {
          uint64_t v41 = *(unsigned int *)&v25[4 * v6];
          if (a3 > 1)
          {
            unint64_t v42 = v6 + 1;
            LODWORD(v41) = *(_DWORD *)&v25[4 * v6];
            do
            {
              int v40 = ((v39 + v31) & 1) + ((v39 + v31) >> 1);
              uint64_t v41 = (*(_DWORD *)&v25[4 * (v42-- - 2)]
                                 + v41 * ((((16 * v40) >> 15) + 1) >> 1)
                                 + ((int)v41 >> 16) * (__int16)(16 * v40)
                                 + (((unsigned __int16)v41 * (__int16)(16 * v40)) >> 16));
            }
            while (v42 > 1);
          }
          if (((int)result >= 1 || (v41 & 0x80000000) != 0) && ((result & 0x80000000) != 0 || (int)v41 >= 1))
          {
            v37 += 0x80u >> v36;
            int v31 = ((v39 + v31) & 1) + ((v39 + v31) >> 1);
            uint64_t result = v41;
          }
          else
          {
            int v39 = ((v39 + v31) & 1) + ((v39 + v31) >> 1);
            int v38 = v41;
          }
          ++v36;
        }
        while (v36 != 3);
        int v30 = v19 == 0;
        if ((int)result >= 0) {
          unsigned int v43 = result;
        }
        else {
          unsigned int v43 = -(int)result;
        }
        if (HIWORD(v43))
        {
          v37 += (int)result / (((int)result - v38) >> 5);
        }
        else if (result != v38)
        {
          v37 += ((((int)result - v38) >> 1) + 32 * (int)result) / ((int)result - v38);
        }
        __int16 v44 = v37 + v33;
        if (v37 + v33 >= 0x7FFF) {
          __int16 v44 = 0x7FFF;
        }
        a1[v24++] = v44;
        if (v24 >= a3) {
          return result;
        }
        __n128 v25 = (&v67)[v24 & 1];
        int v31 = silk_LSFCosTab_FIX_Q12[v28 - 1];
      }
      ++v28;
    }
    while (v66 < 0x80);
    if (v65 >= 0x1E) {
      break;
    }
    uint64_t v19 = 0x10000;
    silk_bwexpander_32(a2, a3, 0x10000 - (__int16)(v65 + 11) * (__int16)(v65 + 1));
    int v24 = 0;
    __n128 v25 = v70;
    v70[v6] = 0x10000;
    v69[v6] = 0x10000;
    unsigned int v27 = v65 + 1;
    int v20 = v63;
    if (a3 >= 2)
    {
      uint64_t v45 = 0;
      unint64_t v46 = v60;
      do
      {
        int v47 = a2[(int)--v46];
        int v48 = v58[v45];
        v70[v45] = -v48 - v47;
        v69[v45++] = v48 - v47;
      }
      while (v46);
      unint64_t v49 = v60;
      do
      {
        v70[(v49 - 1)] -= v70[v49];
        v69[(v49 - 1)] += v69[v49];
        BOOL v13 = v49-- > 1;
      }
      while (v13);
      if (a3 >= 4)
      {
        uint64_t v50 = 2;
        do
        {
          if (v50 < v60)
          {
            uint64_t v51 = v60;
            do
            {
              v69[v51 + 7] -= v70[v51];
              --v51;
            }
            while (v51 > v50);
          }
          v69[v50 + 7] -= 2 * v70[v50];
          ++v50;
        }
        while (v50 != v59);
        uint64_t v52 = 2;
        do
        {
          if (v52 < v60)
          {
            uint64_t v53 = v60;
            do
            {
              v69[v53 - 2] -= v69[v53];
              --v53;
            }
            while (v53 > v52);
          }
          v69[v52 - 2] -= 2 * v69[v52];
          ++v52;
        }
        while (v52 != v59);
      }
      LODWORD(v19) = v70[v6];
      unint64_t v54 = v6 + 1;
      do
        uint64_t v19 = (v70[(v54-- - 2)]
                           + v19 * v61
                           + ((int)v19 >> 16) * v62
                           + (((unsigned __int16)v19 * v62) >> 16));
      while (v54 > 1);
      int v24 = 0;
      __n128 v25 = v70;
      unsigned int v27 = v65 + 1;
      if ((v19 & 0x80000000) != 0)
      {
        *a1 = 0;
        LODWORD(v19) = v69[v6];
        unint64_t v55 = v6 + 1;
        do
        {
          __n128 v25 = v69;
          uint64_t v19 = (v69[(v55-- - 2)]
                             + v19 * v61
                             + ((int)v19 >> 16) * v62
                             + (((unsigned __int16)v19 * v62) >> 16));
          int v24 = 1;
        }
        while (v55 > 1);
        unsigned int v27 = v65 + 1;
      }
    }
  }
  int v56 = 0x8000 / (a3 + 1);
  *a1 = v56;
  if (a3 >= 2)
  {
    uint64_t v57 = 1;
    do
    {
      a1[v57] = (v57 + 1) * v56;
      ++v57;
    }
    while (a3 != v57);
  }
  return result;
}

uint64_t silk_insertion_sort_increasing(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a4 < 1) {
    goto LABEL_12;
  }
  for (uint64_t i = 0; i != a4; ++i)
    *(_DWORD *)(a2 + 4 * i) = i;
  if (a4 < 2)
  {
LABEL_12:
    int v11 = 0;
  }
  else
  {
    for (uint64_t j = 1; j != a4; *(_DWORD *)(a2 + v10) = j++)
    {
      int v6 = *(_DWORD *)(result + 4 * j);
      uint64_t v7 = j;
      while (1)
      {
        uint64_t v8 = v7 - 1;
        int v9 = *(_DWORD *)(result + 4 * (v7 - 1));
        if (v6 >= v9) {
          break;
        }
        *(_DWORD *)(result + 4 * v7) = v9;
        *(_DWORD *)(a2 + 4 * v7) = *(_DWORD *)(a2 + 4 * (v7 - 1));
        --v7;
        if (v8 + 1 <= 1)
        {
          LODWORD(v7) = 0;
          break;
        }
      }
      uint64_t v10 = 4 * (int)v7;
      *(_DWORD *)(result + v10) = v6;
    }
    int v11 = 1;
  }
  if (a4 < a3)
  {
    uint64_t v12 = a4;
    do
    {
      int v13 = *(_DWORD *)(result + 4 * v12);
      if (v13 < *(_DWORD *)(result + 4 * (a4 - 1)))
      {
        unsigned int v14 = a4 - 2;
        if (v11)
        {
          unsigned int v14 = a4 - 2;
          while (1)
          {
            int v15 = *(_DWORD *)(result + 4 * v14);
            if (v13 >= v15) {
              break;
            }
            unsigned int v16 = v14 + 1;
            *(_DWORD *)(result + 4 * v16) = v15;
            *(_DWORD *)(a2 + 4 * v16) = *(_DWORD *)(a2 + 4 * v14);
            if ((int)v14-- <= 0)
            {
              unsigned int v14 = -1;
              break;
            }
          }
        }
        signed int v18 = v14 + 1;
        *(_DWORD *)(result + 4 * v18) = v13;
        *(_DWORD *)(a2 + 4 * v18) = v12;
      }
      ++v12;
    }
    while (v12 != a3);
  }
  return result;
}

uint64_t silk_insertion_sort_decreasing_int16(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a4 < 1) {
    goto LABEL_12;
  }
  for (uint64_t i = 0; i != a4; ++i)
    *(_DWORD *)(a2 + 4 * i) = i;
  if (a4 < 2)
  {
LABEL_12:
    int v10 = 0;
  }
  else
  {
    for (uint64_t j = 1; j != a4; *(_DWORD *)(a2 + 4 * (int)v7) = j++)
    {
      int v6 = *(__int16 *)(result + 2 * j);
      uint64_t v7 = j;
      while (1)
      {
        uint64_t v8 = v7 - 1;
        int v9 = *(__int16 *)(result + 2 * (v7 - 1));
        if (v6 <= v9) {
          break;
        }
        *(_WORD *)(result + 2 * v7) = v9;
        *(_DWORD *)(a2 + 4 * v7) = *(_DWORD *)(a2 + 4 * (v7 - 1));
        --v7;
        if (v8 + 1 <= 1)
        {
          LODWORD(v7) = 0;
          break;
        }
      }
      *(_WORD *)(result + 2 * (int)v7) = v6;
    }
    int v10 = 1;
  }
  if (a4 < a3)
  {
    uint64_t v11 = a4;
    do
    {
      int v12 = *(__int16 *)(result + 2 * v11);
      if (v12 > *(__int16 *)(result + 2 * (a4 - 1)))
      {
        unsigned int v13 = a4 - 2;
        if (v10)
        {
          unsigned int v13 = a4 - 2;
          while (1)
          {
            int v14 = *(__int16 *)(result + 2 * v13);
            if (v12 <= v14) {
              break;
            }
            unsigned int v15 = v13 + 1;
            *(_WORD *)(result + 2 * v15) = v14;
            *(_DWORD *)(a2 + 4 * v15) = *(_DWORD *)(a2 + 4 * v13);
            if ((int)v13-- <= 0)
            {
              unsigned int v13 = -1;
              break;
            }
          }
        }
        signed int v17 = v13 + 1;
        *(_WORD *)(result + 2 * v17) = v12;
        *(_DWORD *)(a2 + 4 * v17) = v11;
      }
      ++v11;
    }
    while (v11 != a3);
  }
  return result;
}

uint64_t silk_insertion_sort_increasing_all_values_int16(uint64_t result, int a2)
{
  if (a2 >= 2)
  {
    for (uint64_t i = 1; i != a2; ++i)
    {
      int v3 = *(__int16 *)(result + 2 * i);
      uint64_t v4 = i;
      while (1)
      {
        uint64_t v5 = v4 - 1;
        int v6 = *(__int16 *)(result + 2 * (v4 - 1));
        if (v3 >= v6) {
          break;
        }
        *(_WORD *)(result + 2 * v4--) = v6;
        if (v5 + 1 <= 1)
        {
          LODWORD(v4) = 0;
          break;
        }
      }
      *(_WORD *)(result + 2 * (int)v4) = v3;
    }
  }
  return result;
}

uint64_t silk_decode_pulses(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v8 = ec_dec_icdf(a1, &silk_rate_levels_iCDF[9 * (a3 >> 1)], 8);
  unsigned int v9 = a5 >> 4;
  int v31 = a5;
  if ((int)(a5 & 0xFFFFFFF0) >= a5) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v9 + 1;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v33 = a2;
    uint64_t v11 = 0;
    int v12 = (unsigned __int8 *)&silk_pulses_per_block_iCDF + 18 * v8;
    do
    {
      v34[v11] = 0;
      int v13 = ec_dec_icdf(a1, v12, 8);
      if (v13 == 17)
      {
        int v14 = 0;
        do
        {
          if (v14++ == 9) {
            unsigned int v16 = (unsigned __int8 *)&unk_220773727;
          }
          else {
            unsigned int v16 = (unsigned __int8 *)&silk_pulses_per_block_iCDF;
          }
          int v13 = ec_dec_icdf(a1, v16 + 162, 8);
        }
        while (v13 == 17);
        v34[v11] = v14;
      }
      v35[v11++] = v13;
    }
    while (v11 != v10);
    int v17 = 0;
    signed int v18 = v35;
    uint64_t v19 = v10;
    a2 = v33;
    do
    {
      int v21 = *v18++;
      int v20 = v21;
      int v22 = (_OWORD *)(v33 + 4 * (v17 >> 12));
      if (v21 < 1)
      {
        void v22[2] = 0u;
        v22[3] = 0u;
        _OWORD *v22 = 0u;
        v22[1] = 0u;
      }
      else
      {
        silk_shell_decoder((uint64_t)v22, a1, v20);
      }
      v17 += 0x10000;
      --v19;
    }
    while (v19);
    for (uint64_t i = 0; i != v10; ++i)
    {
      int v24 = v34[i];
      if (v24 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = a2 + 64 * (__int16)i;
        do
        {
          int v27 = *(_DWORD *)(v26 + 4 * v25);
          int v28 = v24;
          do
          {
            int v27 = ec_dec_icdf(a1, silk_lsb_iCDF, 8) + 2 * v27;
            --v28;
          }
          while (v28);
          *(_DWORD *)(v26 + 4 * v25++) = v27;
        }
        while (v25 != 16);
        v35[i] |= 32 * v24;
        a2 = v33;
      }
    }
  }
  return silk_decode_signs(a1, a2, v31, a3, a4, (uint64_t)v35);
}

__int16 *silk_NLSF_stabilize(__int16 *result, __int16 *a2, int a3)
{
  uint64_t v5 = result;
  int v6 = 0;
  uint64_t v7 = a3;
  uint64_t v8 = a3 - 1;
  uint64_t v9 = a3;
  while (1)
  {
    int v10 = *a2;
    int v11 = *result - v10;
    if (a3 < 2)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      LODWORD(v12) = 0;
      __int16 v13 = *result;
      for (uint64_t i = 1; i != a3; ++i)
      {
        __int16 v15 = result[i];
        int v16 = v15 - (a2[i] + v13);
        if (v16 < v11)
        {
          LODWORD(v12) = i;
          int v11 = v16;
        }
        __int16 v13 = v15;
      }
    }
    int v17 = a2[a3];
    int v18 = 0x8000 - (result[v8] + v17);
    if (v18 >= v11) {
      uint64_t v12 = v12;
    }
    else {
      uint64_t v12 = a3;
    }
    if (v18 < v11) {
      int v11 = 0x8000 - (result[v8] + v17);
    }
    if ((v11 & 0x80000000) == 0) {
      break;
    }
    if (v12)
    {
      if (v12 == a3)
      {
        result[v8] = 0x8000 - v17;
      }
      else
      {
        if ((int)v12 < 1)
        {
          int v19 = 0;
        }
        else
        {
          int v19 = 0;
          uint64_t v20 = v12;
          int v21 = a2;
          do
          {
            int v22 = *v21++;
            v19 += v22;
            --v20;
          }
          while (v20);
        }
        uint64_t v23 = (int)v12;
        int v24 = 0x8000;
        if ((int)v12 < a3)
        {
          uint64_t v25 = a3;
          do
            v24 -= a2[v25--];
          while (v25 > (int)v12);
        }
        int v26 = a2[(int)v12] >> 1;
        int v27 = v19 + v26;
        int v28 = v24 - v26;
        int v29 = &result[v23];
        int v30 = *v29 + *(v29 - 1);
        int v31 = (v30 & 1) + (v30 >> 1);
        if (v27 <= v28) {
          int v32 = v28;
        }
        else {
          int v32 = v27;
        }
        if (v27 >= v28) {
          int v27 = v28;
        }
        if (v31 > v27) {
          LOWORD(v27) = v31;
        }
        if (v31 > v32) {
          LOWORD(v27) = v32;
        }
        __int16 v33 = v27 - v26;
        *(v29 - 1) = v33;
        *int v29 = v33 + a2[v23];
      }
    }
    else
    {
      *uint64_t result = v10;
    }
    if (++v6 == 20)
    {
      uint64_t result = (__int16 *)silk_insertion_sort_increasing_all_values_int16((uint64_t)result, a3);
      int v34 = *a2;
      if (*v5 > v34) {
        LOWORD(v34) = *v5;
      }
      __int16 *v5 = v34;
      if (a3 < 2)
      {
        int v42 = v5[v8];
        if (v42 >= 0x8000 - a2[v7]) {
          LOWORD(v42) = 0x8000 - a2[v7];
        }
        v5[v8] = v42;
      }
      else
      {
        unint64_t v35 = a2 + 1;
        uint64_t v36 = v5 + 1;
        uint64_t v37 = v9 - 1;
        do
        {
          int v38 = *v35++;
          int v34 = v38 + (__int16)v34;
          if (*v36 > v34) {
            LOWORD(v34) = *v36;
          }
          *v36++ = v34;
          --v37;
        }
        while (v37);
        int v39 = v5[v8];
        if (v39 >= 0x8000 - a2[v7]) {
          LOWORD(v39) = 0x8000 - a2[v7];
        }
        v5[v8] = v39;
        uint64_t v40 = (a3 - 2);
        LOWORD(v41) = v5[v40 + 1];
        do
        {
          int v41 = (__int16)v41 - a2[v40 + 1];
          if (v5[v40] < v41) {
            LOWORD(v41) = v5[v40];
          }
          v5[v40--] = v41;
        }
        while (v40 != -1);
      }
      return result;
    }
  }
  return result;
}

int *silk_resampler_private_AR2(int *result, int *a2, __int16 *a3, __int16 *a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = *a4;
    int v6 = a4[1];
    uint64_t v7 = a5;
    int v8 = *result;
    do
    {
      int v9 = *a3++;
      int v10 = v8 + (v9 << 8);
      *a2++ = v10;
      int v11 = (__int16)(v10 >> 14);
      int v12 = 4 * (v10 & 0x3FFF);
      int v8 = result[1] + v11 * v5 + ((v12 * v5) >> 16);
      *uint64_t result = v8;
      result[1] = v11 * v6 + ((v12 * v6) >> 16);
      --v7;
    }
    while (v7);
  }
  return result;
}

__n128 silk_resampler_private_IIR_FIR(uint64_t a1, _WORD *a2, __int16 *a3, int a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  LODWORD(v8) = *(_DWORD *)(a1 + 268);
  size_t v9 = 2 * (2 * (int)v8 + 8);
  int v10 = (_OWORD *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v10, v9);
  int v11 = (unsigned int *)a1;
  int v19 = (__n128 *)(a1 + 24);
  *int v10 = *(_OWORD *)(a1 + 24);
  int v12 = *(_DWORD *)(a1 + 272);
  int v21 = v10 + 1;
  for (uint64_t i = (unsigned int *)a1; ; LODWORD(v8) = i[67])
  {
    if (a4 >= (int)v8) {
      uint64_t v8 = v8;
    }
    else {
      uint64_t v8 = a4;
    }
    silk_resampler_private_up2_HQ(v11, (uint64_t)v21, a3, v8);
    if ((int)(v8 << 17) >= 1)
    {
      int v13 = 0;
      do
      {
        int8x16_t v14 = *(int8x16_t *)((char *)v10 + 2 * (v13 >> 16));
        int v15 = vaddvq_s32(vmlal_s16(vmull_s16(silk_resampler_frac_FIR_12[(unsigned __int16)((3 * (unsigned __int16)v13) >> 14)], *(int16x4_t *)v14.i8), vrev64_s16(silk_resampler_frac_FIR_12[11 - ((12 * (unsigned __int16)v13) >> 16)]), (int16x4_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
        if (v15 <= 1073725439)
        {
          int v16 = ((v15 >> 14) + 1) >> 1;
          if (v16 <= -32768) {
            LOWORD(v16) = 0x8000;
          }
        }
        else
        {
          LOWORD(v16) = 0x7FFF;
        }
        *a2++ = v16;
        v13 += v12;
      }
      while (v13 < v8 << 17);
    }
    a4 -= v8;
    int v17 = 2 * v8;
    if (a4 < 1) {
      break;
    }
    a3 += (int)v8;
    *int v10 = *(_OWORD *)((char *)v10 + 2 * v17);
    int v11 = i;
  }
  __n128 result = *(__n128 *)((char *)v10 + 2 * v17);
  *int v19 = result;
  return result;
}

uint64_t silk_Get_Decoder_Size(_DWORD *a1)
{
  *a1 = 8600;
  return 0;
}

uint64_t silk_InitDecoder(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t result = silk_init_decoder((_DWORD *)(a1 + 4288 * v2));
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  *(_DWORD *)(a1 + 8584) = 0;
  *(void *)(a1 + 8576) = 0;
  *(_DWORD *)(a1 + 8596) = 0;
  return result;
}

uint64_t silk_Decode(_DWORD *a1, int *a2, int a3, int a4, uint64_t a5, _WORD *a6, int *a7)
{
  uint64_t v96 = a6;
  int32x4_t v97 = a7;
  uint64_t v10 = (uint64_t)a1;
  v103[1] = *MEMORY[0x263EF8340];
  uint64_t v100 = 0;
  v103[0] = 0;
  LODWORD(v11) = a2[1];
  if (a4 && (int)v11 >= 1)
  {
    int v12 = a1 + 600;
    uint64_t v13 = a2[1];
    do
    {
      *int v12 = 0;
      v12 += 1072;
      --v13;
    }
    while (v13);
  }
  if ((int)v11 <= a1[2148])
  {
    uint64_t inited = 0;
  }
  else
  {
    uint64_t inited = silk_init_decoder(a1 + 1072);
    LODWORD(v11) = a2[1];
  }
  BOOL v95 = v11 == 1 && *(_DWORD *)(v10 + 8592) == 2 && a2[3] == 1000 * *(_DWORD *)(v10 + 2316);
  int v15 = *(_DWORD *)(v10 + 2400);
  int v99 = a3;
  if (!v15 && (int)v11 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v10;
    while (1)
    {
      int v18 = a2[4];
      uint64_t result = 4294967093;
      if (v18 <= 19)
      {
        if (v18) {
          BOOL v21 = v18 == 10;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21) {
          return result;
        }
        int v20 = 2;
      }
      else
      {
        if (v18 == 60)
        {
          int v20 = 4;
          int v22 = 3;
          goto LABEL_29;
        }
        if (v18 == 40)
        {
          int v20 = 4;
          int v22 = 2;
          goto LABEL_29;
        }
        if (v18 != 20) {
          return result;
        }
        int v20 = 4;
      }
      int v22 = 1;
LABEL_29:
      *(_DWORD *)(v17 + 2404) = v22;
      *(_DWORD *)(v17 + 2324) = v20;
      unsigned int v23 = a2[3] >> 10;
      if (v23 > 0xF || ((1 << v23) & 0x8880) == 0) {
        return 4294967096;
      }
      uint64_t inited = silk_decoder_set_fs(v17, v23 + 1, a2[2]) + inited;
      ++v16;
      uint64_t v11 = a2[1];
      v17 += 4288;
      if (v16 >= v11)
      {
        a3 = v99;
        break;
      }
    }
  }
  int v25 = *a2;
  if (*a2 != 2) {
    goto LABEL_42;
  }
  if (v11 != 2) {
    goto LABEL_41;
  }
  if (*(_DWORD *)(v10 + 8588) != 1 && *(_DWORD *)(v10 + 8592) != 1)
  {
    LODWORD(v11) = 2;
LABEL_41:
    int v25 = 2;
    goto LABEL_42;
  }
  *(_DWORD *)(v10 + 8576) = 0;
  *(_DWORD *)(v10 + 8584) = 0;
  memcpy((void *)(v10 + 6736), (const void *)(v10 + 2448), 0x130uLL);
  int v25 = *a2;
  LODWORD(v11) = a2[1];
LABEL_42:
  *(_DWORD *)(v10 + 8588) = v25;
  *(_DWORD *)(v10 + 8592) = v11;
  if ((a2[2] - 48001) < 0xFFFF63BF) {
    return 4294967096;
  }
  uint64_t v98 = v10;
  if (a3 == 1 || *(_DWORD *)(v10 + 2400)) {
    goto LABEL_83;
  }
  if ((int)v11 >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v10 + 2416;
    do
    {
      uint64_t v28 = v10 + 4288 * v26;
      if (*(int *)(v28 + 2404) >= 1)
      {
        uint64_t v29 = 0;
        int v30 = (int *)(v28 + 2404);
        do
          *(_DWORD *)(v27 + 4 * v29++) = ec_dec_bit_logp(a5, 1);
        while (v29 < *v30);
      }
      *(_DWORD *)(v10 + 4288 * v26++ + 2428) = ec_dec_bit_logp(a5, 1);
      uint64_t v11 = a2[1];
      v27 += 4288;
    }
    while (v26 < v11);
    if ((int)v11 >= 1)
    {
      uint64_t v31 = 0;
      uint64_t v32 = v10;
      long long v93 = xmmword_220774290;
      int64x2_t v94 = vdupq_n_s64(2uLL);
      do
      {
        uint64_t v33 = v10 + 4288 * v31;
        *(_DWORD *)(v33 + 2440) = 0;
        *(void *)(v33 + 2432) = 0;
        if (*(_DWORD *)(v33 + 2428))
        {
          uint64_t v34 = v10 + 4288 * v31;
          int v35 = *(_DWORD *)(v34 + 2404);
          if (v35 == 1)
          {
            *(_DWORD *)(v33 + 2432) = 1;
          }
          else
          {
            uint64_t v36 = (int *)(v34 + 2404);
            int v37 = ec_dec_icdf(a5, (unsigned __int8 *)*(&silk_LBRR_flags_iCDF_ptr + v35 - 2), 8);
            int64x2_t v38 = v94;
            uint64_t v39 = *v36;
            uint64_t v10 = v98;
            if ((int)v39 >= 1)
            {
              uint64_t v40 = 0;
              unsigned int v41 = v37 + 1;
              uint64x2_t v42 = (uint64x2_t)vdupq_n_s64(v39 - 1);
              int64x2_t v43 = (int64x2_t)v93;
              do
              {
                int32x2_t v44 = vmovn_s64((int64x2_t)vcgeq_u64(v42, (uint64x2_t)v43));
                if (v44.i8[0]) {
                  *(_DWORD *)(v32 + 4 * v40 + 2432) = (v41 >> v40) & 1;
                }
                if (v44.i8[4]) {
                  *(_DWORD *)(v32 + 4 * v40 + 2436) = (v41 >> (v40 + 1)) & 1;
                }
                v40 += 2;
                int64x2_t v43 = vaddq_s64(v43, v38);
              }
              while (((v39 + 1) & 0xFFFFFFFFFFFFFFFELL) != v40);
            }
          }
        }
        ++v31;
        uint64_t v11 = a2[1];
        v32 += 4288;
      }
      while (v31 < v11);
    }
  }
  if (v99) {
    goto LABEL_83;
  }
  int v45 = *(_DWORD *)(v10 + 2404);
  if (v45 < 1) {
    goto LABEL_83;
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0xFFFFFFFFLL;
  uint64_t v48 = 2432;
  do
  {
    if ((int)v11 < 1) {
      goto LABEL_82;
    }
    uint64_t v49 = 0;
    v94.i64[0] = v47;
    uint64_t v50 = 4 * v47 + 2432;
    uint64_t v51 = (_DWORD *)(v10 + 4 * v46 + 6720);
    do
    {
      if (!*(_DWORD *)(v10 + v48)) {
        goto LABEL_80;
      }
      if (v49 || v11 != 2 || (silk_stereo_decode_pred(a5, v103), *v51))
      {
        if (!v46) {
          goto LABEL_78;
        }
      }
      else
      {
        silk_stereo_decode_mid_only(a5, (_DWORD *)&v100 + 1);
        if (!v46)
        {
LABEL_78:
          int v52 = 0;
          goto LABEL_79;
        }
      }
      if (!*(_DWORD *)(v10 + v50)) {
        goto LABEL_78;
      }
      int v52 = 2;
LABEL_79:
      silk_decode_indices(v10, a5, v46, 1, v52);
      silk_decode_pulses(a5, (uint64_t)&v101, *(char *)(v10 + 2789), *(char *)(v10 + 2790), *(_DWORD *)(v10 + 2328));
      LODWORD(v11) = a2[1];
LABEL_80:
      ++v49;
      v10 += 4288;
    }
    while (v49 < (int)v11);
    uint64_t v10 = v98;
    int v45 = *(_DWORD *)(v98 + 2404);
    LODWORD(v47) = v94.i32[0];
LABEL_82:
    ++v46;
    v48 += 4;
    uint64_t v47 = (v47 + 1);
  }
  while (v46 < v45);
LABEL_83:
  int v53 = v99;
  if (v11 == 2)
  {
    if (v99)
    {
      if (v99 == 2 && *(_DWORD *)(v10 + 4 * *(int *)(v10 + 2400) + 2432) == 1)
      {
        silk_stereo_decode_pred(a5, v103);
        if (!*(_DWORD *)(v10 + 4 * *(int *)(v10 + 2400) + 6720)) {
          goto LABEL_88;
        }
LABEL_91:
        HIDWORD(v100) = 0;
      }
      else
      {
        int v54 = *(__int16 *)(v10 + 8578);
        LODWORD(v103[0]) = *(__int16 *)(v10 + 8576);
        HIDWORD(v103[0]) = v54;
      }
    }
    else
    {
      silk_stereo_decode_pred(a5, v103);
      if (*(_DWORD *)(v10 + 4 * *(int *)(v10 + 2400) + 6704)) {
        goto LABEL_91;
      }
LABEL_88:
      silk_stereo_decode_mid_only(a5, (_DWORD *)&v100 + 1);
    }
  }
  int v55 = a2[1];
  BOOL v56 = HIDWORD(v100) == 0;
  if (v55 == 2 && !HIDWORD(v100))
  {
    if (*(_DWORD *)(v10 + 8596) == 1)
    {
      bzero((void *)(v10 + 5636), 0x3C0uLL);
      *(_OWORD *)(v10 + 5604) = 0u;
      *(_OWORD *)(v10 + 5620) = 0u;
      *(_OWORD *)(v10 + 5572) = 0u;
      *(_OWORD *)(v10 + 5588) = 0u;
      *(_DWORD *)(v10 + 6596) = 100;
      *(unsigned char *)(v10 + 6600) = 10;
      *(_DWORD *)(v10 + 8476) = 0;
      *(_DWORD *)(v10 + 6664) = 1;
      int v55 = a2[1];
    }
    else
    {
      int v55 = 2;
    }
  }
  int v101 = 0;
  uint64_t v102 = 0;
  uint64_t v57 = *(int *)(v10 + 2328);
  size_t v58 = 2 * ((int)v57 + 2) * v55;
  uint64_t v59 = (char *)&v93 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v59, v58);
  v94.i64[0] = (uint64_t)v59;
  int v101 = v59;
  uint64_t v102 = (uint64_t)&v59[2 * v57 + 4];
  if (!v53) {
    goto LABEL_103;
  }
  if (!*(_DWORD *)(v10 + 8596))
  {
    BOOL v56 = 1;
LABEL_103:
    if (v55 >= 1) {
      goto LABEL_104;
    }
    int32x4_t v67 = v96;
    goto LABEL_125;
  }
  BOOL v56 = 0;
  if (v53 != 2 || v55 != 2) {
    goto LABEL_103;
  }
  BOOL v56 = *(_DWORD *)(v10 + 4 * *(int *)(v10 + 6688) + 6720) == 1;
LABEL_104:
  *(void *)&long long v93 = &v59[2 * v57 + 4];
  uint64_t v60 = 0;
  uint64_t v61 = v10 + 2432;
  int v62 = -1;
  do
  {
    if (v60) {
      int v63 = v56;
    }
    else {
      int v63 = 1;
    }
    if (v63 == 1)
    {
      int v64 = *(_DWORD *)(v98 + 2400);
      if (v62 + v64 + 1 < 1)
      {
        int v65 = 0;
      }
      else if (v99 == 2)
      {
        int v65 = 2 * (*(_DWORD *)(v61 + 4 * (v64 + v62)) != 0);
      }
      else if (v60 && *(_DWORD *)(v98 + 8596))
      {
        int v65 = 1;
      }
      else
      {
        int v65 = 2;
      }
      uint64_t inited = silk_decode_frame(v61 - 2432, a5, (&v101)[v60] + 4, (int *)&v100, v99, v65)
             + inited;
    }
    else
    {
      bzero((&v101)[v60] + 4, 2 * (int)v100);
    }
    ++*(_DWORD *)(v61 - 32);
    ++v60;
    uint64_t v66 = a2[1];
    --v62;
    v61 += 4288;
  }
  while (v60 < v66);
  int32x4_t v67 = v96;
  if (v66 == 2)
  {
    uint64_t v10 = v98;
    int v53 = v99;
    if (*a2 == 2)
    {
      silk_stereo_MS_to_LR((unsigned __int16 *)(v98 + 8576), v94.i64[0], (_DWORD *)v93, (int *)v103, *(_DWORD *)(v98 + 2316), v100);
      int v68 = v100;
      goto LABEL_126;
    }
  }
  else
  {
    uint64_t v10 = v98;
    int v53 = v99;
  }
LABEL_125:
  uint64_t v69 = v94.i64[0];
  *(_DWORD *)v94.i64[0] = *(_DWORD *)(v10 + 8580);
  int v68 = v100;
  *(_DWORD *)(v10 + 8580) = *(_DWORD *)(v69 + 2 * (int)v100);
LABEL_126:
  int v70 = a2[2] * v68 / (1000 * *(__int16 *)(v10 + 2316));
  *int32x4_t v97 = v70;
  int v71 = *a2;
  if (*a2 != 2) {
    int v70 = 0;
  }
  size_t v72 = 2 * v70;
  unint64_t v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v74 = v67;
  if (v71 == 2) {
    int v75 = (__int16 *)((char *)&v93 - v73);
  }
  else {
    int v75 = v67;
  }
  bzero((char *)&v93 - v73, v72);
  int v76 = a2[1];
  if (v71 >= v76) {
    int v77 = a2[1];
  }
  else {
    int v77 = v71;
  }
  if (v77 >= 1)
  {
    uint64_t v78 = 0;
    do
    {
      int v79 = silk_resampler((_DWORD *)(v10 + 4288 * v78 + 2448), v75, (&v101)[v78] + 2, v100);
      int v71 = *a2;
      if (*a2 == 2)
      {
        uint64_t v80 = *v97;
        if ((int)v80 >= 1)
        {
          int v81 = v75;
          int v82 = v74;
          do
          {
            __int16 v83 = *v81++;
            *int v82 = v83;
            v82 += 2;
            --v80;
          }
          while (v80);
        }
      }
      uint64_t inited = (v79 + inited);
      ++v78;
      int v76 = a2[1];
      if (v71 >= v76) {
        int v84 = a2[1];
      }
      else {
        int v84 = v71;
      }
      ++v74;
    }
    while (v78 < v84);
    int v53 = v99;
  }
  if (v71 != 2 || v76 != 1) {
    goto LABEL_155;
  }
  if (!v95)
  {
    uint64_t v88 = *v97;
    if ((int)v88 >= 1)
    {
      uint64_t v89 = v96 + 1;
      do
      {
        *uint64_t v89 = *(v89 - 1);
        v89 += 2;
        --v88;
      }
      while (v88);
    }
LABEL_155:
    uint64_t result = inited;
    goto LABEL_156;
  }
  uint64_t result = silk_resampler((_DWORD *)(v10 + 6736), v75, (char *)(v94.i64[0] + 2), v100)
         + inited;
  uint64_t v85 = *v97;
  if ((int)v85 >= 1)
  {
    int v86 = v96 + 1;
    do
    {
      __int16 v87 = *v75++;
      *int v86 = v87;
      v86 += 2;
      --v85;
    }
    while (v85);
  }
LABEL_156:
  if (*(_DWORD *)(v10 + 4188) == 2) {
    int v90 = dword_2207742A0[(*(_DWORD *)(v10 + 2316) - 8) >> 2] * *(_DWORD *)(v10 + 2308);
  }
  else {
    int v90 = 0;
  }
  a2[5] = v90;
  if (v53 == 1)
  {
    uint64_t v91 = *(unsigned int *)(v10 + 8592);
    if ((int)v91 >= 1)
    {
      int v92 = (unsigned char *)(v10 + 2312);
      do
      {
        *int v92 = 10;
        v92 += 4288;
        --v91;
      }
      while (v91);
    }
  }
  else
  {
    *(_DWORD *)(v10 + 8596) = HIDWORD(v100);
  }
  return result;
}

unint64_t silk_LPC_inverse_pred_gain(__int16 *a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 < 1) {
    return LPC_inverse_pred_gain_QA((uint64_t)v7, a2);
  }
  int v2 = 0;
  char v3 = &v7[64 * (unint64_t)(a2 & 1)];
  uint64_t v4 = a2;
  do
  {
    int v5 = *a1++;
    v2 += v5;
    *v3++ = v5 << 12;
    --v4;
  }
  while (v4);
  if (v2 <= 4095) {
    return LPC_inverse_pred_gain_QA((uint64_t)v7, a2);
  }
  else {
    return 0;
  }
}

unint64_t LPC_inverse_pred_gain_QA(uint64_t a1, int a2)
{
  int v2 = (int *)(a1 + ((unint64_t)(a2 & 1) << 6));
  int v3 = 0x40000000;
  if (a2 >= 2)
  {
    uint64_t v4 = a2;
    unint64_t v5 = ((unint64_t)a2 << 32) - 0x200000000;
    unsigned int v6 = a2 - 1;
    int v7 = 0x40000000;
    while (1)
    {
      char v8 = v4 - 1;
      uint64_t v9 = v2[(v4 - 1)];
      if ((v9 - 16773023) < 0xFE0020C3) {
        return 0;
      }
      uint64_t v10 = (_DWORD *)(a1 + ((unint64_t)(v6 & 1) << 6));
      int v11 = 0x40000000 - ((unint64_t)-((v9 << 7) * -128 * v9) >> 32);
      unint64_t v12 = (unint64_t)(v11 * (uint64_t)v7) >> 30;
      if (v11 >= 0) {
        unsigned int v13 = 0x40000000 - ((unint64_t)-((v9 << 7) * -128 * v9) >> 32);
      }
      else {
        unsigned int v13 = ((unint64_t)-((v9 << 7) * -128 * v9) >> 32) - 0x40000000;
      }
      unsigned int v14 = __clz(v13);
      int v15 = v11 << (v14 - 1);
      int v16 = 0x1FFFFFFF / (v15 >> 16);
      int v17 = (__int16)v16 * (v15 >> 16) + (((__int16)v16 * (unsigned __int16)v15) >> 16);
      int v7 = v12 & 0xFFFFFFFC;
      uint64_t v18 = (v16 << 16)
          - 8 * v17 * (((v16 >> 15) + 1) >> 1)
          + ((-8 * v17) >> 16) * (__int16)v16
          + ((((-8 * v17) & 0xFFF8) * (__int16)v16) >> 16);
      uint64_t v19 = v6;
      int v20 = v2;
      uint64_t v21 = v5;
      do
      {
        uint64_t v22 = *v20++;
        uint64_t v23 = (v22 - (int)((((unint64_t)(*(int *)((char *)v2 + (v21 >> 30)) * -128 * v9) >> 30) + 1) >> 1)) * v18;
        uint64_t v24 = ((v23 >> (31 - v14)) + 1) >> 1;
        uint64_t v25 = (v23 & 1) + (v23 >> 1);
        if (v14 != 31) {
          LODWORD(v25) = v24;
        }
        *v10++ = v25;
        v21 -= 0x100000000;
        --v19;
      }
      while (v19);
      v5 -= 0x100000000;
      --v6;
      int v2 = (int *)(a1 + ((unint64_t)(v8 & 1) << 6));
      if (v4-- < 3)
      {
        int v3 = v7;
        int v2 = (int *)(a1 + ((unint64_t)(v8 & 1) << 6));
        break;
      }
    }
  }
  uint64_t v27 = *v2;
  if ((v27 - 16773023) < 0xFE0020C3) {
    return 0;
  }
  return ((unint64_t)((int)((0x4000000000000000 - (-((v27 << 7) * -128 * v27) & 0x7FFFFFFF00000000uLL)) >> 32)
                           * (uint64_t)v3) >> 30) & 0xFFFFFFFC;
}

unint64_t silk_LPC_inverse_pred_gain_Q24(void *__src, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a2 >= 1) {
    memcpy(&v4[64 * (unint64_t)(a2 & 1)], __src, 4 * a2);
  }
  return LPC_inverse_pred_gain_QA((uint64_t)v4, a2);
}

uint64_t silk_sigm_Q15(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0)
  {
    if (a1 >= 0xFFFFFF41) {
      return sigm_LUT_neg_Q15[-a1 >> 5] - sigm_LUT_slope_Q10[2 * (-a1 >> 5)] * (-a1 & 0x1F);
    }
    else {
      return 0;
    }
  }
  else if (a1 <= 0xBF)
  {
    return sigm_LUT_pos_Q15[a1 >> 5] + sigm_LUT_slope_Q10[2 * (a1 >> 5)] * (a1 & 0x1F);
  }
  else
  {
    return 0x7FFFLL;
  }
}

void *silk_NSQ_del_dec(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, int a14, __int16 a15)
{
  uint64_t v211 = a7;
  uint64_t v212 = a8;
  uint64_t v210 = a6;
  uint64_t v221 = a5;
  uint64_t v200 = a4;
  uint64_t v216 = a3;
  int v217 = a13;
  uint64_t v223 = *MEMORY[0x263EF8340];
  int v219 = *(_DWORD *)(a2 + 4356);
  int v17 = *(_DWORD *)(a1 + 4652);
  size_t v18 = 1168 * v17;
  uint64_t v19 = (char *)&v192 - v18;
  bzero((char *)&v192 - v18, v18);
  bzero((char *)&v192 - v18, v18);
  if (v17 >= 1)
  {
    uint64_t v20 = v17;
    int v21 = *(unsigned __int8 *)(v216 + 34);
    int v22 = *(_DWORD *)(a2 + 4352);
    int v23 = *(_DWORD *)(a2 + 4 * *(int *)(a1 + 4616) + 1276);
    uint64_t v24 = (char *)&v192 - v18;
    do
    {
      long long v25 = *(_OWORD *)(a2 + 3920);
      *((_OWORD *)v24 + 4) = *(_OWORD *)(a2 + 3904);
      *((_OWORD *)v24 + 5) = v25;
      long long v26 = *(_OWORD *)(a2 + 3952);
      *((_OWORD *)v24 + 6) = *(_OWORD *)(a2 + 3936);
      *((_OWORD *)v24 + 7) = v26;
      long long v27 = *(_OWORD *)(a2 + 3856);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)(a2 + 3840);
      *((_OWORD *)v24 + 1) = v27;
      long long v28 = *(_OWORD *)(a2 + 3888);
      *((_OWORD *)v24 + 2) = *(_OWORD *)(a2 + 3872);
      *((_OWORD *)v24 + 3) = v28;
      long long v29 = *(_OWORD *)(a2 + 4320);
      *((_OWORD *)v24 + 71) = *(_OWORD *)(a2 + 4336);
      *((_OWORD *)v24 + 70) = v29;
      long long v30 = *(_OWORD *)(a2 + 4288);
      *((_OWORD *)v24 + 69) = *(_OWORD *)(a2 + 4304);
      uint64_t v31 = (int32x2_t *)(v24 + 1156);
      *((_OWORD *)v24 + 68) = v30;
      int32x2_t v32 = vdup_n_s32(v21 & 3);
      *((_DWORD *)v24 + 291) = 0;
      *((_DWORD *)v24 + 288) = v22;
      *((_DWORD *)v24 + 240) = v23;
      ++v21;
      v24 += 1168;
      *uint64_t v31 = v32;
      --v20;
    }
    while (v20);
  }
  uint64_t v213 = a12;
  int v33 = *(unsigned __int8 *)(v216 + 29);
  int v209 = silk_Quantization_Offsets_Q10[2 * ((char)v33 >> 1) + *(char *)(v216 + 30)];
  int v222 = 0;
  int v34 = *(_DWORD *)(a1 + 4612);
  if (v34 >= 32) {
    int v35 = 32;
  }
  else {
    int v35 = *(_DWORD *)(a1 + 4612);
  }
  if (v33 == 2)
  {
    uint64_t v36 = *(unsigned int *)(a1 + 4604);
    if ((int)v36 >= 1)
    {
      int v37 = v217;
      do
      {
        int v38 = *v37++;
        int v39 = v38 - 3;
        if (v35 >= v38 - 3) {
          int v35 = v39;
        }
        --v36;
      }
      while (v36);
    }
  }
  else if (v219 >= 1 && v35 >= v219 - 3)
  {
    int v35 = v219 - 3;
  }
  int v214 = v35;
  int v40 = *(unsigned __int8 *)(v216 + 31);
  uint64_t v41 = *(int *)(a1 + 4616);
  int v42 = *(_DWORD *)(a1 + 4608) + v41;
  size_t v43 = 4 * v42;
  int v215 = (char *)&v192 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v215, v43);
  size_t v44 = 2 * v42;
  uint64_t v201 = (char *)&v192 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v201, v44);
  int v218 = (char *)&v192 - ((4 * v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v218, 4 * v34);
  uint64_t v208 = &v192 - 16;
  long long v190 = 0u;
  long long v191 = 0u;
  long long v188 = 0u;
  long long v189 = 0u;
  long long v186 = 0u;
  long long v187 = 0u;
  *((_OWORD *)&v192 - 8) = 0u;
  *((_OWORD *)&v192 - 7) = 0u;
  uint64_t v45 = a2 + 2 * v41;
  *(_DWORD *)(a2 + 4364) = v41;
  *(_DWORD *)(a2 + 4360) = v41;
  LODWORD(v46) = *(_DWORD *)(a1 + 4604);
  if ((int)v46 >= 1)
  {
    uint64_t v47 = 0;
    int v48 = 0;
    BOOL v206 = v40 == 4;
    uint64_t v207 = a11;
    if (v40 == 4) {
      int v49 = 3;
    }
    else {
      int v49 = 1;
    }
    int v202 = v49;
    int v205 = a14;
    int v199 = a15;
    uint64_t v198 = v214;
    uint64_t v203 = a9;
    uint64_t v204 = a10;
    uint64_t v193 = v19 + 2332;
    uint64_t v197 = v19 + 1164;
    int v196 = -v214;
    v50.i64[0] = 0x100000001;
    v50.i64[1] = 0x100000001;
    LODWORD(v51) = v34;
    uint64_t v195 = -(uint64_t)v214;
    uint64_t v194 = -2 * v214;
    int v52 = v200;
    while (1)
    {
      int v53 = (__int16 *)(v210 + 32 * (v206 | (v47 >> 1)));
      int v54 = *(_DWORD *)(v203 + 4 * v47);
      *(_DWORD *)(a2 + 4376) = 0;
      int v55 = v215;
      int v56 = *(unsigned __int8 *)(v216 + 29);
      uint64_t v57 = v213;
      int v220 = v54;
      if (v56 == 2)
      {
        int v219 = v217[v47];
        if ((v202 & v47) == 0)
        {
          uint64_t v200 = v52;
          if (v47 == 2)
          {
            uint64_t v139 = *(unsigned int *)(a1 + 4652);
            if ((int)v139 <= 1)
            {
              unsigned int v140 = 0;
              int v144 = v214;
            }
            else
            {
              unsigned int v140 = 0;
              int v141 = *((_DWORD *)v19 + 291);
              uint64_t v142 = v193;
              uint64_t v143 = 1;
              int v144 = v214;
              do
              {
                if (*(_DWORD *)v142 < v141)
                {
                  unsigned int v140 = v143;
                  int v141 = *(_DWORD *)v142;
                }
                ++v143;
                v142 += 1168;
              }
              while (v139 != v143);
            }
            if ((int)v139 >= 1)
            {
              uint64_t v145 = v140;
              int v146 = v197;
              do
              {
                if (v145) {
                  *(_DWORD *)v146 += 0x7FFFFFF;
                }
                --v145;
                v146 += 1168;
                --v139;
              }
              while (v139);
            }
            if (v144 < 1)
            {
              int v48 = 0;
            }
            else
            {
              unsigned int v147 = v140;
              LOBYTE(v148) = v222 + v144;
              int v149 = (unsigned char *)(v221 + v195);
              uint64_t v150 = (__int16 *)(v45 + v194);
              uint64_t v151 = v198;
              int v152 = v196;
              do
              {
                unsigned int v148 = ((_BYTE)v148 - 1) & 0x1F;
                int v153 = &v19[1168 * v147 + 4 * v148];
                *v149++ = ((*((_DWORD *)v153 + 144) >> 9) + 1) >> 1;
                int v154 = (__int16)*(_DWORD *)(v57 + 4) * (*((int *)v153 + 176) >> 16)
                     + (((__int16)*(_DWORD *)(v57 + 4) * (unsigned __int16)*((_DWORD *)v153 + 176)) >> 16)
                     + (((*(int *)(v57 + 4) >> 15) + 1) >> 1) * *((_DWORD *)v153 + 176);
                unsigned int v155 = ((v154 >> 13) + 1) >> 1;
                if (v154 < -536879104) {
                  LOWORD(v155) = 0x8000;
                }
                if (v154 <= 536862719) {
                  __int16 v156 = v155;
                }
                else {
                  __int16 v156 = 0x7FFF;
                }
                int v157 = *((_DWORD *)v153 + 240);
                *v150++ = v156;
                *(_DWORD *)(a2 + 4 * (v152 + *(_DWORD *)(a2 + 4364)) + 1280) = v157;
                ++v152;
                --v151;
              }
              while (v151);
              int v48 = 0;
              LODWORD(v51) = *(_DWORD *)(a1 + 4612);
            }
          }
          int v158 = *(_DWORD *)(a1 + 4664);
          int v159 = *(_DWORD *)(a1 + 4616) - (v219 + v158) - 2;
          silk_LPC_analysis_filter(&v201[2 * v159], a2 + 2 * (v159 + (int)v51 * (int)v47), (uint64_t)v53, v219 + v158 + 2, v158);
          char v58 = 0;
          *(_DWORD *)(a2 + 4360) = *(_DWORD *)(a1 + 4616);
          *(_DWORD *)(a2 + 4376) = 1;
          int v55 = v215;
          LOBYTE(v56) = *(unsigned char *)(v216 + 29);
          int v52 = v200;
          v50.i64[0] = 0x100000001;
          v50.i64[1] = 0x100000001;
          goto LABEL_26;
        }
        LOBYTE(v56) = 2;
      }
      char v58 = 1;
LABEL_26:
      int v59 = v217[v47];
      uint64_t v60 = *(unsigned int *)(a1 + 4652);
      int v61 = *(_DWORD *)(v57 + 4 * v47);
      if (v61 <= 1) {
        unsigned int v62 = 1;
      }
      else {
        unsigned int v62 = *(_DWORD *)(v57 + 4 * v47);
      }
      char v63 = __clz(v62);
      int v64 = v62 << (v63 - 1);
      int v65 = 0x1FFFFFFF / (v64 >> 16);
      int v66 = (v64 >> 16) * (__int16)v65 + (((unsigned __int16)v64 * (__int16)v65) >> 16);
      int v67 = (v65 << 16)
          - 8 * v66 * (((v65 >> 15) + 1) >> 1)
          + ((-8 * v66) >> 16) * (__int16)v65
          + ((((-8 * v66) & 0xFFF8) * (__int16)v65) >> 16);
      unsigned int v68 = v62 >> 17;
      int v69 = v67 >> (15 - v63);
      char v70 = v63 - 15;
      int v71 = (int)0x80000000 >> v70;
      if (v67 > (int)0x80000000 >> v70) {
        int v71 = v67;
      }
      if (v67 <= (int)(0x7FFFFFFFu >> v70)) {
        unsigned int v72 = v71;
      }
      else {
        unsigned int v72 = 0x7FFFFFFFu >> v70;
      }
      int v73 = v72 << v70;
      if (v68) {
        int v73 = v69;
      }
      int v74 = *(_DWORD *)(a2 + 4372);
      if (v61 == v74)
      {
        signed int v75 = 0x10000;
      }
      else
      {
        if (v74 >= 0) {
          unsigned int v76 = *(_DWORD *)(a2 + 4372);
        }
        else {
          unsigned int v76 = -v74;
        }
        unsigned int v77 = __clz(v76);
        int v78 = v74 << (v77 - 1);
        if (v61 >= 0) {
          unsigned int v79 = *(_DWORD *)(v57 + 4 * v47);
        }
        else {
          unsigned int v79 = -v61;
        }
        unsigned int v80 = __clz(v79);
        int v81 = v61 << (v80 - 1);
        int v82 = 0x1FFFFFFF / (v81 >> 16);
        int v83 = v82 * (v78 >> 16) + ((v82 * (unsigned __int16)v78) >> 16);
        int v84 = v78 - (((unint64_t)(v83 * (uint64_t)v81) >> 29) & 0xFFFFFFF8);
        int v85 = v83 + (v84 >> 16) * v82 + (((unsigned __int16)v84 * v82) >> 16);
        int v86 = v77 - v80;
        if ((v86 + 29) >= 0x30) {
          int v87 = 0;
        }
        else {
          int v87 = v85 >> (v86 + 13);
        }
        int v88 = (int)0x80000000 >> (-13 - v86);
        if (v85 > v88) {
          int v88 = v85;
        }
        if (v85 <= (int)(0x7FFFFFFFu >> (-13 - v86))) {
          unsigned int v89 = v88;
        }
        else {
          unsigned int v89 = 0x7FFFFFFFu >> (-13 - v86);
        }
        signed int v75 = v89 << (-13 - v86);
        if (v86 > -14) {
          signed int v75 = v87;
        }
      }
      unsigned int v90 = v214;
      uint64_t v91 = *(unsigned int *)(a1 + 4612);
      if ((int)v91 >= 1)
      {
        int v92 = (v73 >> 7) + 1;
        int v93 = (__int16)(v92 >> 1);
        int v94 = ((v92 >> 16) + 1) >> 1;
        BOOL v95 = v52;
        uint64_t v96 = v218;
        do
        {
          int v97 = *v95++;
          *v96++ = v97 * v94 + (v97 >> 16) * v93 + (((unsigned __int16)v97 * v93) >> 16);
          --v91;
        }
        while (v91);
      }
      *(_DWORD *)(a2 + 4372) = v61;
      if ((v58 & 1) == 0)
      {
        if (!v47) {
          int v73 = 4 * ((v73 >> 16) * v199 + (((unsigned __int16)v73 * v199) >> 16));
        }
        uint64_t v98 = *(int *)(a2 + 4360);
        int v99 = v98 - v59 - 2;
        if (v99 < (int)v98)
        {
          int v100 = v73 >> 16;
          int v101 = (unsigned __int16)v73;
          uint64_t v102 = v98 - v99;
          int v103 = &v55[v99];
          int v104 = &v201[2 * v99];
          do
          {
            int v105 = *(__int16 *)v104;
            v104 += 2;
            *v103++ = v100 * v105 + ((v101 * v105) >> 16);
            --v102;
          }
          while (v102);
        }
      }
      int v106 = (char)v56;
      if (v75 != 0x10000)
      {
        int v107 = *(_DWORD *)(a1 + 4616);
        unsigned int v108 = v75 >> 16;
        if (v107 >= 1)
        {
          uint64_t v109 = *(_DWORD *)(a2 + 4364) - v107;
          do
          {
            *(_DWORD *)(a2 + 1280 + 4 * v109) = (__int16)*(_DWORD *)(a2 + 1280 + 4 * v109) * v108
                                              + (((__int16)*(_DWORD *)(a2 + 1280 + 4 * v109) * (unsigned __int16)v75) >> 16)
                                              + (((*(int *)(a2 + 1280 + 4 * v109) >> 15) + 1) >> 1) * v75;
            ++v109;
          }
          while (v109 < *(int *)(a2 + 4364));
        }
        if (v106 == 2 && !*(_DWORD *)(a2 + 4376))
        {
          int v110 = *(_DWORD *)(a2 + 4360);
          LODWORD(v111) = v110 - v59 - 2;
          int v112 = v110 - v90;
          if ((int)v111 < v112)
          {
            uint64_t v111 = (int)v111;
            do
            {
              v55[v111] = (__int16)v55[v111] * v108
                        + (((__int16)v55[v111] * (unsigned __int16)v75) >> 16)
                        + ((((int)v55[v111] >> 15) + 1) >> 1) * v75;
              ++v111;
            }
            while (v111 < v112);
          }
        }
        if ((int)v60 >= 1)
        {
          uint64_t v113 = 0;
          int32x4_t v114 = vdupq_n_s32(v108);
          int32x4_t v115 = vdupq_n_s32((unsigned __int16)v75);
          int32x4_t v116 = vdupq_n_s32(v75);
          int v117 = v19;
          do
          {
            uint64_t v118 = 0;
            *(_DWORD *)&v19[1168 * v113 + 1152] = (__int16)*(_DWORD *)&v19[1168 * v113 + 1152] * v108
                                                + (((__int16)*(_DWORD *)&v19[1168 * v113 + 1152] * (unsigned __int16)v75) >> 16)
                                                + (((*(int *)&v19[1168 * v113 + 1152] >> 15) + 1) >> 1) * v75;
            do
            {
              int32x4_t v119 = *(int32x4_t *)&v117[v118];
              int32x4_t v120 = vshrq_n_s32(vshlq_n_s32(v119, 0x10uLL), 0x10uLL);
              *(int32x4_t *)&v117[v118] = vmlaq_s32(vsraq_n_s32(vmulq_s32(v120, v114), vmulq_s32(v120, v115), 0x10uLL), vhaddq_s32(vshrq_n_s32(v119, 0xFuLL), v50), v116);
              v118 += 16;
            }
            while (v118 != 128);
            for (uint64_t i = 1088; i != 1152; i += 16)
            {
              int32x4_t v122 = *(int32x4_t *)&v117[i];
              int32x4_t v123 = vshrq_n_s32(vshlq_n_s32(v122, 0x10uLL), 0x10uLL);
              *(int32x4_t *)&v117[i] = vmlaq_s32(vsraq_n_s32(vmulq_s32(v123, v114), vmulq_s32(v123, v115), 0x10uLL), vhaddq_s32(vshrq_n_s32(v122, 0xFuLL), v50), v116);
            }
            for (uint64_t j = 0; j != 128; j += 16)
            {
              int v125 = (int32x4_t *)&v117[j];
              int32x4_t v126 = *(int32x4_t *)&v117[j + 832];
              int32x4_t v127 = vshrq_n_s32(vshlq_n_s32(v126, 0x10uLL), 0x10uLL);
              v125[52] = vmlaq_s32(vsraq_n_s32(vmulq_s32(v127, v114), vmulq_s32(v127, v115), 0x10uLL), vhaddq_s32(vshrq_n_s32(v126, 0xFuLL), v50), v116);
              int32x4_t v128 = *(int32x4_t *)&v117[j + 960];
              int32x4_t v129 = vshrq_n_s32(vshlq_n_s32(v128, 0x10uLL), 0x10uLL);
              v125[60] = vmlaq_s32(vsraq_n_s32(vmulq_s32(v129, v114), vmulq_s32(v129, v115), 0x10uLL), vhaddq_s32(vshrq_n_s32(v128, 0xFuLL), v50), v116);
            }
            ++v113;
            v117 += 1168;
          }
          while (v113 != v60);
        }
      }
      int v130 = *(_DWORD *)(v204 + 4 * v47);
      int v131 = *(_DWORD *)(v207 + 4 * v47);
      int v132 = *(_DWORD *)(v57 + 4 * v47);
      int v133 = *(_DWORD *)(a1 + 4612);
      int v134 = v48 + 1;
      uint64_t v135 = *(void *)(a1 + 4660);
      int v136 = *(_DWORD *)(a1 + 4704);
      unsigned int v137 = *(_DWORD *)(a1 + 4652);
      DWORD2(v189) = v48;
      HIDWORD(v187) = (v220 << 15) & 0xFFFF0000 | (v220 >> 2);
      *((void *)&v186 + 1) = v211 + 2 * (5 * v47);
      *(void *)&long long v187 = v212 + 2 * (16 * v47);
      uint64_t v138 = v221;
      silk_noise_shape_quantizer_del_dec((int32x2_t *)a2, v19, v106, (uint64_t)v218, v221, v45, (uint64_t)v55, (uint64_t)v208, v53, *((__int16 **)&v186 + 1), (__int16 *)v187, v219, SHIDWORD(v187), v130, v131, v132, v205, v209, v133,
        SDWORD2(v189),
        v135,
        SHIDWORD(v135),
        v136,
        v137,
        &v222,
        v90);
      v50.i64[0] = 0x100000001;
      v50.i64[1] = 0x100000001;
      uint64_t v51 = *(int *)(a1 + 4612);
      v52 += v51;
      uint64_t v221 = v138 + v51;
      v45 += 2 * v51;
      ++v47;
      uint64_t v46 = *(int *)(a1 + 4604);
      int v48 = v134;
      if (v47 >= v46)
      {
        int v17 = *(_DWORD *)(a1 + 4652);
        int v34 = v51;
        break;
      }
    }
  }
  int v160 = v214;
  uint64_t v161 = v221;
  if (v17 <= 1)
  {
    int v162 = 0;
  }
  else
  {
    int v162 = 0;
    int v163 = *((_DWORD *)v19 + 291);
    int v164 = (int *)(v19 + 2332);
    for (uint64_t k = 1; k != v17; ++k)
    {
      if (*v164 < v163)
      {
        int v162 = k;
        int v163 = *v164;
      }
      v164 += 292;
    }
  }
  uint64_t v166 = v213;
  *(unsigned char *)(v216 + 34) = *(_DWORD *)&v19[1168 * v162 + 1160];
  if (v160 >= 1)
  {
    int v167 = *(_DWORD *)(v166 + 4 * ((int)v46 - 1));
    LOBYTE(v46) = v222 + v160;
    int v168 = (__int16)(v167 >> 6);
    uint64_t v169 = -(uint64_t)v160;
    int v170 = ((v167 >> 21) + 1) >> 1;
    do
    {
      LODWORD(v46) = ((_BYTE)v46 - 1) & 0x1F;
      int v171 = &v19[1168 * v162 + 4 * v46];
      *(unsigned char *)(v161 + v169) = ((*((_DWORD *)v171 + 144) >> 9) + 1) >> 1;
      int v172 = *((_DWORD *)v171 + 176) * v170
           + (*((int *)v171 + 176) >> 16) * v168
           + (((unsigned __int16)*((_DWORD *)v171 + 176) * v168) >> 16);
      unsigned int v173 = ((v172 >> 7) + 1) >> 1;
      if (v172 < -8388736) {
        LOWORD(v173) = 0x8000;
      }
      if (v172 <= 8388479) {
        __int16 v174 = v173;
      }
      else {
        __int16 v174 = 0x7FFF;
      }
      *(_WORD *)(v45 + 2 * v169) = v174;
      *(_DWORD *)(a2 + 4 * ((int)v169 + *(_DWORD *)(a2 + 4364)) + 1280) = *((_DWORD *)v171 + 240);
    }
    while (!__CFADD__(v169++, 1));
    int v34 = *(_DWORD *)(a1 + 4612);
  }
  __int16 v176 = &v19[1168 * v162];
  __int16 v177 = &v176[4 * v34];
  long long v178 = *((_OWORD *)v177 + 5);
  *(_OWORD *)(a2 + 3904) = *((_OWORD *)v177 + 4);
  *(_OWORD *)(a2 + 3920) = v178;
  long long v179 = *((_OWORD *)v177 + 7);
  *(_OWORD *)(a2 + 3936) = *((_OWORD *)v177 + 6);
  *(_OWORD *)(a2 + 3952) = v179;
  long long v180 = *((_OWORD *)v177 + 1);
  *(_OWORD *)(a2 + 3840) = *(_OWORD *)v177;
  *(_OWORD *)(a2 + 3856) = v180;
  long long v181 = *((_OWORD *)v177 + 3);
  *(_OWORD *)(a2 + 3872) = *((_OWORD *)v177 + 2);
  *(_OWORD *)(a2 + 3888) = v181;
  long long v182 = *((_OWORD *)v176 + 68);
  long long v183 = *((_OWORD *)v176 + 69);
  long long v184 = *((_OWORD *)v176 + 70);
  *(_OWORD *)(a2 + 4336) = *((_OWORD *)v176 + 71);
  *(_OWORD *)(a2 + 4320) = v184;
  *(_OWORD *)(a2 + 4304) = v183;
  *(_OWORD *)(a2 + 4288) = v182;
  *(_DWORD *)(a2 + 4352) = *((_DWORD *)v176 + 288);
  *(_DWORD *)(a2 + 4356) = v217[*(int *)(a1 + 4604) - 1];
  memmove((void *)a2, (const void *)(a2 + 2 * *(int *)(a1 + 4608)), 2 * *(int *)(a1 + 4616));
  return memmove((void *)(a2 + 1280), (const void *)(a2 + 1280 + 4 * *(int *)(a1 + 4608)), 4 * *(int *)(a1 + 4616));
}

int32x2_t *silk_noise_shape_quantizer_del_dec(int32x2_t *result, _OWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 *a9, __int16 *a10, __int16 *a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20,int a21,int a22,int a23,unsigned int a24,int *a25,unsigned int a26)
{
  uint64_t v171 = a7;
  uint64_t v170 = a6;
  uint64_t v169 = a5;
  uint64_t v214 = a4;
  int v187 = a3;
  uint64_t v192 = result;
  int v27 = a24;
  uint64_t v229 = *MEMORY[0x263EF8340];
  uint64_t v226 = &v168 - 6 * (int)a24;
  uint64_t v188 = a19;
  if (a19 >= 1)
  {
    uint64_t v181 = a26;
    LODWORD(v228) = a23;
    int v186 = a20;
    int v204 = a18;
    int v224 = a14;
    long long v180 = a11;
    int v223 = a17;
    int v184 = a16 >> 6;
    int v168 = a10;
    int v202 = a9;
    long long v29 = (char *)v226;
    bzero(v226, 48 * (int)a24);
    int v30 = v204;
    uint64_t v227 = 0;
    long long v183 = (int *)(v171 + 4 * (v192[545].i32[0] - a12 + 2));
    __int32 v31 = v192[545].i32[1];
    int v185 = a12;
    long long v191 = (_DWORD *)&v192[160] + v31 - a12 + 1;
    int v178 = (__int16)a13;
    int v177 = a13 >> 16;
    int v213 = a22;
    int v32 = (__int16)v228;
    int v210 = a21 >> 1;
    int v211 = a22 >> 1;
    uint64_t v212 = a21;
    uint64_t v225 = a21 - 1;
    int v208 = (__int16)a15;
    int v209 = (__int16)v224;
    int v207 = a15 >> 16;
    int v195 = v204 - 944;
    int v194 = (__int16)(944 - v204) * (__int16)v223;
    int v205 = (__int16)v204 * (__int16)v223;
    int v199 = v204 + 944;
    int v206 = (__int16)v223;
    int v198 = (__int16)(v204 + 944) * (__int16)v223;
    int v197 = v204 - 80;
    uint64_t v33 = v181;
    uint64_t v190 = (int)v181;
    __int16 v176 = (char *)a2 + 1092;
    int v196 = v180 + 2;
    unsigned int v175 = v29 + 52;
    __int16 v174 = a2 + 28;
    unsigned int v173 = v29 + 28;
    int v34 = a2 + 8;
    int v172 = v29 + 12;
    uint64_t result = (int32x2_t *)a24;
    uint64_t v203 = (int32x2_t *)a24;
    uint64_t v189 = (int)a24;
    uint64_t v179 = a8;
    uint64_t v182 = 1168 * a24;
    do
    {
      if (v187 == 2)
      {
        int v35 = *v168;
        int v36 = v168[4];
        uint64_t result = v203;
        int v30 = v204;
        int v37 = 2
            * ((*v183 >> 16) * v35
             + (((unsigned __int16)*v183 * v35) >> 16)
             + (*(v183 - 1) >> 16) * v168[1]
             + (((unsigned __int16)*(v183 - 1) * v168[1]) >> 16)
             + (*(v183 - 2) >> 16) * v168[2]
             + (((unsigned __int16)*(v183 - 2) * v168[2]) >> 16)
             + (*(v183 - 3) >> 16) * v168[3]
             + (((unsigned __int16)*(v183 - 3) * v168[3]) >> 16)
             + (*(v183 - 4) >> 16) * v36
             + (((unsigned __int16)*(v183 - 4) * v36) >> 16))
            + 4;
        ++v183;
      }
      else
      {
        int v37 = 0;
      }
      if (v185 < 1)
      {
        int v38 = 0;
      }
      else
      {
        int v38 = v37
            - 4
            * (((*(v191 - 2) + *v191) >> 16) * v178
             + ((int)*(v191 - 1) >> 16) * v177
             + (((unsigned __int16)(*((_WORD *)v191 - 4) + *(_WORD *)v191) * v178) >> 16)
             + (((unsigned __int16)*(v191 - 1) * v177) >> 16));
        ++v191;
      }
      uint64_t v193 = v34;
      if (v27 <= 0)
      {
        int v126 = 0;
        int v127 = 0;
        int v128 = 0;
        char v129 = *a25 + 31;
        *a25 = v129 & 0x1F;
        uint64_t v130 = (v129 + (_BYTE)v33) & 0x1F;
        int v131 = *((_DWORD *)v226 + 1);
        int v132 = *((_DWORD *)v226 + 7);
      }
      else
      {
        int v39 = 0;
        int v40 = *v202;
        int v41 = v202[1];
        int v42 = (char *)a2 + 4 * (v227 + 31);
        int v43 = v202[2];
        int v223 = v202[3];
        int v224 = v43;
        int v44 = v202[4];
        int v221 = v202[5];
        int v222 = v44;
        int v45 = v202[6];
        int v219 = v202[7];
        int v220 = v45;
        int v46 = v202[8];
        int v217 = v202[9];
        int v218 = v46;
        int v228 = (int *)v176;
        int v47 = *v180;
        int v215 = v180[v225];
        int v216 = v47;
        uint64_t v201 = v42;
        int v200 = v38;
        do
        {
          int v48 = &a2[73 * (void)v39];
          *((_DWORD *)v48 + 289) = 196314165 * *((_DWORD *)v48 + 289) + 907633515;
          int v49 = (int *)&v42[1168 * (void)v39];
          int v50 = *v49;
          int v51 = v211
              + (*v49 >> 16) * v40
              + (((unsigned __int16)*v49 * v40) >> 16)
              + (*(v49 - 1) >> 16) * v41
              + (((unsigned __int16)*(v49 - 1) * v41) >> 16)
              + (*(v49 - 2) >> 16) * v224
              + (((unsigned __int16)*(v49 - 2) * v224) >> 16)
              + (*(v49 - 3) >> 16) * v223
              + (((unsigned __int16)*(v49 - 3) * v223) >> 16)
              + (*(v49 - 4) >> 16) * v222
              + (((unsigned __int16)*(v49 - 4) * v222) >> 16)
              + (*(v49 - 5) >> 16) * v221
              + (((unsigned __int16)*(v49 - 5) * v221) >> 16)
              + (*(v49 - 6) >> 16) * v220
              + (((unsigned __int16)*(v49 - 6) * v220) >> 16)
              + (*(v49 - 7) >> 16) * v219
              + (((unsigned __int16)*(v49 - 7) * v219) >> 16)
              + (*(v49 - 8) >> 16) * v218
              + (((unsigned __int16)*(v49 - 8) * v218) >> 16)
              + (*(v49 - 9) >> 16) * v217
              + (((unsigned __int16)*(v49 - 9) * v217) >> 16);
          if (v213 == 16)
          {
            int v52 = *(v49 - 10) >> 16;
            int v53 = v202[10];
            int v54 = (unsigned __int16)*(v49 - 10) * v53;
            int v55 = *(v49 - 11) >> 16;
            int v56 = v202[11];
            int v57 = (unsigned __int16)*(v49 - 11) * v56;
            int v58 = *(v49 - 12) >> 16;
            int v59 = v202[12];
            int v60 = (unsigned __int16)*(v49 - 12) * v59;
            int v61 = *(v49 - 13) >> 16;
            int v62 = v202[13];
            int v63 = (unsigned __int16)*(v49 - 13) * v62;
            int v65 = v49 - 15;
            int v64 = *(v49 - 15);
            int v66 = v64 >> 16;
            int v67 = v202[15];
            int v68 = (unsigned __int16)v64 * v67;
            int v69 = v51 + v52 * v53 + (v54 >> 16) + v55 * v56 + (v57 >> 16) + v58 * v59 + (v60 >> 16) + v61 * v62;
            int v30 = v204;
            uint64_t result = v203;
            int v70 = v69
                + (v63 >> 16)
                + (v65[1] >> 16) * v202[14]
                + (((unsigned __int16)v65[1] * v202[14]) >> 16)
                + v66 * v67;
            int v38 = v200;
            int v42 = v201;
            int v51 = v70 + (v68 >> 16);
          }
          int v71 = &a2[73 * (void)v39];
          int v72 = *((_DWORD *)v71 + 272);
          int v73 = v50 + (v72 >> 16) * v32 + (((unsigned __int16)v72 * v32) >> 16);
          int v74 = v72
              + ((*((_DWORD *)v71 + 273) - v73) >> 16) * v32
              + (((unsigned __int16)(*((_WORD *)v71 + 546) - v73) * v32) >> 16);
          *((_DWORD *)v71 + 272) = v73;
          int v75 = v210 + (v73 >> 16) * v216 + (((unsigned __int16)v73 * v216) >> 16);
          if ((int)v212 >= 3)
          {
            unsigned int v76 = v196;
            unsigned int v77 = v228;
            uint64_t v78 = 2;
            unsigned int v79 = v228;
            do
            {
              int v80 = v77[1];
              int v81 = *v77 + ((v80 - v74) >> 16) * v32 + (((unsigned __int16)(v80 - v74) * v32) >> 16);
              int v82 = v74 >> 16;
              int v83 = *(v76 - 1);
              int v84 = v79[2];
              v79 += 2;
              int v85 = (unsigned __int16)v74 * v83;
              *unsigned int v77 = v74;
              v77[1] = v81;
              int v74 = v80 + ((v84 - v81) >> 16) * v32 + (((unsigned __int16)(v84 - v81) * v32) >> 16);
              v75 += v82 * v83 + (v85 >> 16) + (v81 >> 16) * *v76 + (((unsigned __int16)v81 * *v76) >> 16);
              v78 += 2;
              v76 += 2;
              unsigned int v77 = v79;
            }
            while (v78 < a21);
          }
          int v86 = (int *)v48 + 289;
          int v87 = 16 * v51;
          int v88 = &a2[73 * (void)v39];
          *((_DWORD *)v88 + v225 + 272) = v74;
          int v89 = *((int *)v88 + 288) >> 16;
          int v90 = (unsigned __int16)*((_DWORD *)v88 + 288);
          int v91 = 8 * (v75 + (v74 >> 16) * v215 + (((unsigned __int16)v74 * v215) >> 16))
              + 4 * (v89 * v209 + ((v90 * v209) >> 16));
          uint64_t v92 = *a25;
          int v93 = v89 * v207
              + ((v90 * v207) >> 16)
              + (*((int *)v88 + v92 + 240) >> 16) * v208
              + (((unsigned __int16)*((_DWORD *)v88 + v92 + 240) * v208) >> 16);
          int v94 = *v86;
          if (*v86 >= 0) {
            int v95 = *(_DWORD *)(v214 + 4 * v227) - ((((16 * v51 + v38 - (v91 + 4 * v93)) >> 3) + 1) >> 1);
          }
          else {
            int v95 = ((((16 * v51 + v38 - (v91 + 4 * v93)) >> 3) + 1) >> 1) - *(_DWORD *)(v214 + 4 * v227);
          }
          if (v95 <= -31744) {
            int v95 = -31744;
          }
          if (v95 >= 30720) {
            int v96 = 30720;
          }
          else {
            int v96 = v95;
          }
          unsigned int v97 = v96 - v30;
          if (v96 - v30 < 1024)
          {
            int v100 = v205;
            int v101 = v198;
            int v98 = v30;
            int v99 = v199;
            if (v97 >= 0x400)
            {
              int v102 = v30 + (v97 & 0xFFFFFC00);
              int v103 = v102 + 80;
              int v104 = v102 + 1104;
              int v100 = (__int16)(-80 - v102) * v206;
              int v105 = (__int16)(-1104 - v102) * v206;
              if (v97 <= 0xFFFFFBFF)
              {
                int v101 = v105;
              }
              else
              {
                int v100 = v194;
                int v101 = v205;
              }
              if (v97 <= 0xFFFFFBFF) {
                int v98 = v103;
              }
              else {
                int v98 = v195;
              }
              if (v97 <= 0xFFFFFBFF) {
                int v99 = v104;
              }
              else {
                int v99 = v30;
              }
            }
          }
          else
          {
            int v98 = v197 + (v97 & 0xFFFFFC00);
            int v99 = v98 + 1024;
            int v100 = (__int16)(v197 + (v97 & 0xFC00)) * v206;
            int v101 = (__int16)(v197 + (v97 & 0xFC00) + 1024) * v206;
          }
          int v106 = (char *)&v226[6 * (void)v39];
          int v107 = 4 * v93;
          int v108 = (v100 + (__int16)(v96 - v98) * (__int16)(v96 - v98)) >> 10;
          int v109 = (v101 + (__int16)(v96 - v99) * (__int16)(v96 - v99)) >> 10;
          int v110 = HIDWORD(a2[73 * (void)v39 + 72]);
          BOOL v111 = v108 <= v109;
          if (v108 >= v109) {
            int v112 = (v101 + (__int16)(v96 - v99) * (__int16)(v96 - v99)) >> 10;
          }
          else {
            int v112 = (v100 + (__int16)(v96 - v98) * (__int16)(v96 - v98)) >> 10;
          }
          if (v108 <= v109) {
            int v108 = (v101 + (__int16)(v96 - v99) * (__int16)(v96 - v99)) >> 10;
          }
          if (v111) {
            int v113 = v98;
          }
          else {
            int v113 = v99;
          }
          if (v111) {
            int v98 = v99;
          }
          *(_DWORD *)int v106 = v113;
          *((_DWORD *)v106 + 1) = v110 + v112;
          *((_DWORD *)v106 + 6) = v98;
          *((_DWORD *)v106 + 7) = v110 + v108;
          int v114 = 16 * v113;
          if (v94 < 0) {
            int v114 = -16 * v113;
          }
          int v115 = v114 + v37;
          int v116 = v115 + v87;
          int v117 = 16 * v98;
          if (v94 < 0) {
            int v117 = -v117;
          }
          *((_DWORD *)v106 + 4) = v116 - v91 - v107;
          *((_DWORD *)v106 + 5) = v115;
          *((_DWORD *)v106 + 2) = v116;
          *((_DWORD *)v106 + 3) = v116 - v91;
          int v118 = v117 + v37;
          int v119 = v118 + v87 - v91;
          *((_DWORD *)v106 + 10) = v119 - v107;
          *((_DWORD *)v106 + 11) = v118;
          *((_DWORD *)v106 + 8) = v118 + v87;
          *((_DWORD *)v106 + 9) = v119;
          int v39 = (int32x2_t *)((char *)v39 + 1);
          v228 += 292;
        }
        while (v39 != result);
        *a25 = ((_BYTE)v92 + 31) & 0x1F;
        int v27 = v189;
        if ((int)v189 < 2)
        {
          int v120 = 0;
          a8 = v179;
          uint64_t v33 = v181;
        }
        else
        {
          int v120 = 0;
          int v121 = *((_DWORD *)v226 + 1);
          int32x4_t v122 = v175;
          uint64_t v123 = 1;
          a8 = v179;
          uint64_t v33 = v181;
          do
          {
            int v125 = *(_DWORD *)v122;
            v122 += 48;
            int v124 = v125;
            if (v125 < v121)
            {
              int v120 = v123;
              int v121 = v124;
            }
            ++v123;
          }
          while (result != (int32x2_t *)v123);
        }
        uint64_t v130 = ((_BYTE)v92 + 31 + (_BYTE)v33) & 0x1F;
        int v126 = v120;
        int v133 = *((_DWORD *)&a2[73 * v120 + 28] + v130);
        int v134 = (_DWORD *)v174 + v130;
        uint64_t v135 = result;
        int v136 = v173;
        do
        {
          if (*v134 != v133)
          {
            *((_DWORD *)v136 - 6) += 0x7FFFFFF;
            *(_DWORD *)v136 += 0x7FFFFFF;
          }
          v134 += 292;
          v136 += 48;
          uint64_t v135 = (int32x2_t *)((char *)v135 - 1);
        }
        while (v135);
        int v131 = *((_DWORD *)v226 + 1);
        int v132 = *((_DWORD *)v226 + 7);
        if (v27 < 2)
        {
          int v127 = 0;
          int v128 = 0;
        }
        else
        {
          int v128 = 0;
          int v127 = 0;
          unsigned int v137 = v175;
          uint64_t v138 = 1;
          do
          {
            if (*(_DWORD *)v137 > v131)
            {
              int v128 = v138;
              int v131 = *(_DWORD *)v137;
            }
            if (*((_DWORD *)v137 + 6) < v132)
            {
              int v127 = v138;
              int v132 = *((_DWORD *)v137 + 6);
            }
            ++v138;
            v137 += 48;
          }
          while (result != (int32x2_t *)v138);
        }
      }
      if (v132 < v131)
      {
        uint64_t v139 = a8;
        int v140 = v126;
        uint64_t v141 = v33;
        memcpy((char *)&a2[73 * v128] + 4 * v227, (char *)&a2[73 * v127] + 4 * v227, 1168 - 4 * v227);
        uint64_t v33 = v141;
        int v27 = v189;
        int v126 = v140;
        a8 = v139;
        uint64_t result = v203;
        int v30 = v204;
        uint64_t v142 = (char *)&v226[6 * v128];
        uint64_t v143 = (char *)&v226[6 * v127];
        *(_OWORD *)uint64_t v142 = *(_OWORD *)(v143 + 24);
        *((void *)v142 + 2) = *((void *)v143 + 5);
      }
      if (v186 > 0 || v227 >= v190)
      {
        int v144 = (_DWORD *)&a2[73 * v126] + v130;
        uint64_t v145 = v227 - v190;
        *(unsigned char *)(v169 + v227 - v190) = ((v144[144] >> 9) + 1) >> 1;
        int v146 = (__int16)*(_DWORD *)(a8 + 4 * v130) * ((int)v144[176] >> 16)
             + (((__int16)*(_DWORD *)(a8 + 4 * v130) * (unsigned __int16)v144[176]) >> 16)
             + (((*(int *)(a8 + 4 * v130) >> 15) + 1) >> 1) * v144[176];
        unsigned int v147 = ((v146 >> 7) + 1) >> 1;
        if (v146 < -8388736) {
          LOWORD(v147) = 0x8000;
        }
        if (v146 <= 8388479) {
          __int16 v148 = v147;
        }
        else {
          __int16 v148 = 0x7FFF;
        }
        *(_WORD *)(v170 + 2 * v145) = v148;
        int v149 = v192;
        v192[160].i32[v192[545].i32[1] - (int)v33] = v144[240];
        *(_DWORD *)(v171 + 4 * (v149[545].i32[0] - (int)v33)) = v144[208];
      }
      v192[545] = vadd_s32(v192[545], (int32x2_t)0x100000001);
      uint64_t v150 = v182;
      uint64_t v151 = v193;
      if (v27 >= 1)
      {
        unint64_t v152 = 0;
        int v153 = v172;
        do
        {
          int v154 = &a2[v152 / 0x10];
          int v155 = *((_DWORD *)v153 - 1);
          v154[288] = *(_DWORD *)v153;
          LODWORD(v151[v152 / 0x10]) = v155;
          *((_DWORD *)&a2[v152 / 0x10 + 44] + *a25) = v155;
          int v156 = *((_DWORD *)v153 - 3);
          int v157 = *((_DWORD *)v153 - 2);
          *((_DWORD *)&a2[v152 / 0x10 + 36] + *a25) = v156;
          int v158 = *((_DWORD *)v153 + 1);
          *((_DWORD *)&a2[v152 / 0x10 + 52] + *a25) = 2 * *((_DWORD *)v153 + 2);
          *((_DWORD *)&a2[v152 / 0x10 + 60] + *a25) = v158;
          int v159 = DWORD1(a2[v152 / 0x10 + 72]) + (((v156 >> 9) + 1) >> 1);
          v154[289] = v159;
          *((_DWORD *)&a2[v152 / 0x10 + 28] + *a25) = v159;
          v154[291] = v157;
          v152 += 1168;
          v153 += 48;
        }
        while (v150 != v152);
      }
      *(_DWORD *)(a8 + 4 * *a25) = v184;
      int v34 = (_OWORD *)((char *)v151 + 4);
      ++v227;
    }
    while (v227 != v188);
  }
  if (v27 >= 1)
  {
    uint64_t v160 = 4 * (int)v188;
    uint64_t v161 = v27;
    do
    {
      long long v162 = *(_OWORD *)((char *)a2 + v160);
      long long v163 = *(_OWORD *)((char *)a2 + v160 + 16);
      long long v164 = *(_OWORD *)((char *)a2 + v160 + 48);
      a2[2] = *(_OWORD *)((char *)a2 + v160 + 32);
      a2[3] = v164;
      *a2 = v162;
      a2[1] = v163;
      long long v165 = *(_OWORD *)((char *)a2 + v160 + 64);
      long long v166 = *(_OWORD *)((char *)a2 + v160 + 80);
      long long v167 = *(_OWORD *)((char *)a2 + v160 + 112);
      a2[6] = *(_OWORD *)((char *)a2 + v160 + 96);
      a2[7] = v167;
      a2[4] = v165;
      a2[5] = v166;
      a2 += 73;
      --v161;
    }
    while (v161);
  }
  return result;
}

__int16 *silk_bwexpander(__int16 *result, int a2, int a3)
{
  if (a2 >= 2)
  {
    int v3 = a3 - 0x10000;
    uint64_t v4 = (a2 - 1);
    uint64_t v5 = result;
    do
    {
      __int16 *v5 = (((a3 * *v5) >> 15) + 1) >> 1;
      ++v5;
      a3 += (((a3 * v3) >> 15) + 1) >> 1;
      --v4;
    }
    while (v4);
  }
  result[a2 - 1] = (((a3 * result[a2 - 1]) >> 15) + 1) >> 1;
  return result;
}

uint64_t silk_decode_frame(uint64_t a1, uint64_t a2, char *a3, int *a4, int a5, int a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v12 = *(_DWORD *)(a1 + 2328);
  memset(&v19, 0, 128);
  uint64_t v20 = 0;
  size_t v13 = 4 * (int)((v12 + 15) & 0xFFFFFFF0);
  unsigned int v14 = &v19.i8[-v13];
  bzero((char *)&v19 - v13, v13);
  int v21 = 0;
  if (a5 == 2)
  {
    uint64_t v15 = *(int *)(a1 + 2400);
    if (*(_DWORD *)(a1 + 4 * v15 + 2432) == 1) {
      goto LABEL_5;
    }
LABEL_6:
    silk_PLC(a1, &v19, (uint64_t)a3, 1);
    goto LABEL_7;
  }
  if (a5) {
    goto LABEL_6;
  }
  LODWORD(v15) = *(_DWORD *)(a1 + 2400);
LABEL_5:
  silk_decode_indices(a1, a2, v15, a5, a6);
  silk_decode_pulses(a2, (uint64_t)v14, *(char *)(a1 + 2789), *(char *)(a1 + 2790), *(_DWORD *)(a1 + 2328));
  silk_decode_parameters(a1, (uint64_t)&v19, a6);
  silk_decode_core(a1, (uint64_t)&v19, a3, (uint64_t)v14);
  silk_PLC(a1, &v19, (uint64_t)a3, 0);
  *(_DWORD *)(a1 + 4184) = 0;
  *(_DWORD *)(a1 + 4188) = *(char *)(a1 + 2789);
  *(_DWORD *)(a1 + 2376) = 0;
LABEL_7:
  uint64_t v16 = *(int *)(a1 + 2328);
  int v17 = *(_DWORD *)(a1 + 2336) - v16;
  memmove((void *)(a1 + 1348), (const void *)(a1 + 1348 + 2 * v16), 2 * v17);
  memcpy((void *)(a1 + 1348 + 2 * v17), a3, 2 * *(int *)(a1 + 2328));
  silk_PLC_glue_frames((unsigned int *)a1, (uint64_t)a3, v12);
  silk_CNG(a1, (uint64_t)&v19, (uint64_t)a3, v12);
  *(_DWORD *)(a1 + 2308) = v19.i32[*(int *)(a1 + 2324) - 1];
  *a4 = v12;
  return 0;
}

uint64_t silk_control_SNR(uint64_t a1, int a2)
{
  if (a2 <= 5000) {
    int v2 = 5000;
  }
  else {
    int v2 = a2;
  }
  if (v2 >= 80000) {
    int v3 = 80000;
  }
  else {
    int v3 = v2;
  }
  if (v3 != *(_DWORD *)(a1 + 4632))
  {
    uint64_t v4 = 0;
    *(_DWORD *)(a1 + 4632) = v3;
    int v5 = *(_DWORD *)(a1 + 4600);
    unsigned int v6 = &silk_TargetRate_table_WB;
    if (v5 == 12) {
      unsigned int v6 = &silk_TargetRate_table_MB;
    }
    if (v5 == 8) {
      int v7 = &silk_TargetRate_table_NB;
    }
    else {
      int v7 = v6;
    }
    if (*(_DWORD *)(a1 + 4604) == 2) {
      int v8 = v3 - 2200;
    }
    else {
      int v8 = v3;
    }
    uint64_t v9 = 1;
    while (1)
    {
      int v10 = v7[v9];
      if (v8 <= v10) {
        break;
      }
      ++v9;
      v4 += 0x100000000;
      if (v9 == 8) {
        goto LABEL_21;
      }
    }
    *(_DWORD *)(a1 + 4764) = (silk_SNR_table_Q1[v9] - *(__int16 *)((char *)silk_SNR_table_Q1 + (v4 >> 31)))
                           * (((v8 - *(_DWORD *)((char *)v7 + (v4 >> 30))) << 6)
                            / (v10 - *(_DWORD *)((char *)v7 + (v4 >> 30))))
                           + (*(__int16 *)((char *)silk_SNR_table_Q1 + (v4 >> 31)) << 6);
LABEL_21:
    if (*(_DWORD *)(a1 + 6144)) {
      *(_DWORD *)(a1 + 4764) += -31 * (__int16)(12 - *(_WORD *)(a1 + 6148));
    }
  }
  return 0;
}

uint64_t silk_Get_Encoder_Size(_DWORD *a1)
{
  *a1 = 19688;
  return 0;
}

uint64_t silk_InitEncoder(uint64_t a1, int a2, uint64_t a3)
{
  bzero((void *)a1, 0x4CE8uLL);
  uint64_t v6 = 0;
  LODWORD(v7) = 0;
  char v8 = 1;
  do
  {
    char v9 = v8;
    int inited = silk_init_encoder((_DWORD *)(a1 + 9800 * v6), a2);
    char v8 = 0;
    uint64_t v7 = (inited + v7);
    uint64_t v6 = 1;
  }
  while ((v9 & 1) != 0);
  *(void *)(a1 + 19660) = 0x100000001;
  *(void *)a3 = 0x100000001;
  int v11 = *(_DWORD *)(a1 + 4588);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 4580);
  *(_DWORD *)(a3 + 12) = v11;
  *(void *)&long long v12 = *(void *)(a1 + 4592);
  *((int32x2_t *)&v12 + 1) = vrev64_s32(*(int32x2_t *)(a1 + 4632));
  *(_OWORD *)(a3 + 16) = v12;
  int v13 = *(_DWORD *)(a1 + 4648);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 4640);
  *(_DWORD *)(a3 + 36) = v13;
  int v14 = *(_DWORD *)(a1 + 6128);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 6140);
  *(_DWORD *)(a3 + 44) = v14;
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(a1 + 4708);
  int v15 = *(_DWORD *)(a1 + 4600);
  int v16 = *(_DWORD *)(a1 + 4560);
  *(_DWORD *)(a3 + 68) = 1000 * (__int16)v15;
  *(_DWORD *)(a3 + 72) = v16;
  BOOL v17 = v15 == 16 && *(_DWORD *)(a1 + 28) == 0;
  *(_DWORD *)(a3 + 76) = v17;
  return v7;
}

uint64_t silk_Encode(_DWORD *a1, _DWORD *a2, __int16 *a3, int a4, uint64_t *a5, int *a6, int a7)
{
  uint64_t v179 = a6;
  int v196 = a5;
  int v10 = a2;
  uint64_t v11 = (uint64_t)a1;
  uint64_t v199 = *MEMORY[0x263EF8340];
  if (a2[16])
  {
    a1[1174] = 1;
    a1[3624] = 1;
  }
  a1[3899] = 0;
  a1[1449] = 0;
  int v12 = check_control_input(a2);
  if (v12) {
    return 1;
  }
  uint64_t v14 = v11 + 19600;
  v10[21] = 0;
  LODWORD(v15) = v10[1];
  BOOL v16 = (int)v15 <= *(_DWORD *)(v11 + 19664);
  uint64_t v170 = v11 + 9800;
  if (v16)
  {
    int v17 = 0;
  }
  else
  {
    int v17 = silk_init_encoder((_DWORD *)(v11 + 9800), *(_DWORD *)(v11 + 5140)) + (v12 != 0);
    *(_DWORD *)uint64_t v14 = 0;
    *(_OWORD *)(v11 + 19608) = xmmword_220774290;
    *(void *)(v11 + 19624) = 0x400000000001;
    if (*(_DWORD *)(v11 + 19660) == 2)
    {
      memcpy((void *)(v11 + 15624), (const void *)(v11 + 5824), 0x130uLL);
      *(void *)(v11 + 9800) = *(void *)v11;
    }
    LODWORD(v15) = v10[1];
  }
  int v18 = *(_DWORD *)(v11 + 4636);
  int v168 = v10[6];
  BOOL v19 = v168 != v18 || *(_DWORD *)(v11 + 19664) != v15;
  *(_DWORD *)(v11 + 19660) = *v10;
  *(_DWORD *)(v11 + 19664) = v15;
  int v20 = v10[2];
  int v21 = 100 * a4 / v20;
  int v22 = v21 >> 1;
  if (v21 <= 1) {
    int v22 = 1;
  }
  int v189 = v22;
  int v195 = v10;
  if (a7)
  {
    if (v21 != 1) {
      return 4294967195;
    }
    if ((int)v15 < 1)
    {
      v10[6] = 10;
      HIDWORD(v158) = v10[9];
      v10[9] = 0;
      goto LABEL_48;
    }
    int v184 = a3;
    int v183 = a4;
    uint64_t v23 = 0;
    uint64_t v24 = (_DWORD *)v11;
    do
    {
      int inited = silk_init_encoder(v24, v24[1285]);
      ++v23;
      uint64_t v15 = (int)v10[1];
      v24 += 2450;
    }
    while (v23 < v15);
    int v17 = inited;
    int v168 = v10[6];
    v10[6] = 10;
    HIDWORD(v158) = v10[9];
    v10[9] = 0;
    if ((int)v15 < 1) {
      goto LABEL_44;
    }
    uint64_t v26 = v15;
    int v27 = (_DWORD *)(v11 + 4712);
    a4 = v183;
    do
    {
      *(v27 - 3) = 0;
      *int v27 = 1;
      v27 += 2450;
      --v26;
    }
    while (v26);
  }
  else
  {
    uint64_t result = 4294967195;
    if (a4 < 0 || v21 * v20 != 100 * a4 || 1000 * a4 > v20 * v168) {
      return result;
    }
    int v184 = a3;
    int v168 = 0;
    HIDWORD(v158) = 0;
  }
  _VF = __OFSUB__(v15, 1);
  int v29 = v15 - 1;
  if (v29 < 0 == _VF)
  {
    int v183 = a4;
    uint64_t v30 = 0;
    signed int v31 = (int)v10[7] >> v29;
    uint64_t v32 = v11 + 4772;
    do
    {
      if (v30 == 1)
      {
        uint64_t v33 = v11;
        int v34 = *(_DWORD *)(v11 + 4600);
      }
      else
      {
        int v34 = 0;
        uint64_t v33 = v11;
      }
      int v35 = (_DWORD *)(v33 + 9800 * v30);
      uint64_t result = silk_control_encoder((uint64_t)v35, (uint64_t)v195, v31, *(_DWORD *)(v11 + 19676), v30, v34);
      if (result) {
        return result;
      }
      if (v35[1174]) {
        int v36 = 1;
      }
      else {
        int v36 = v19;
      }
      if (v36 == 1 && *(int *)(v11 + 5792) >= 1)
      {
        uint64_t v37 = 0;
        do
          *(_DWORD *)(v32 + 4 * v37++) = 0;
        while (v37 < *(int *)(v11 + 5792));
      }
      v35[1533] = v35[1532];
      ++v30;
      v32 += 9800;
    }
    while (v30 < (int)v195[1]);
    int v17 = 0;
    int v10 = v195;
LABEL_44:
    a4 = v183;
  }
  a3 = v184;
LABEL_48:
  long long v163 = (void *)(v11 + 17024);
  long long v162 = (unsigned char *)(v11 + 14365);
  int v38 = *(_DWORD *)(v11 + 4600);
  int v164 = 10 * v21;
  int v39 = *(_DWORD *)(v11 + 4580);
  int v175 = v38 * 10 * v21;
  size_t v40 = 2 * (v175 * v39 / (1000 * v38));
  int v178 = (char *)&v158 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v178, v40);
  int v41 = 0;
  __int16 v176 = (_DWORD *)(v11 + 5824);
  uint64_t v169 = (_DWORD *)(v11 + 15624);
  __int16 v174 = (unsigned __int16 *)(v11 + 19600);
  unsigned int v173 = (__int16 *)(v11 + 5148);
  uint64_t v172 = v11 + 14948;
  uint64_t v161 = (void *)(v11 + 17040);
  uint64_t v160 = (void *)(v11 + 9944);
  int v159 = (_OWORD *)(v11 + 14324);
  int v191 = v189 - 1;
  int v185 = 2 * v189;
  uint64_t v187 = v11 + 4772;
  uint64_t v167 = v11 + 6260;
  uint64_t v166 = v11 + 6181;
  uint64_t v165 = v11 + 4768;
  LODWORD(result) = v17;
  uint64_t v171 = v11 + 19652;
  int v42 = a7;
  int v177 = a7;
  uint64_t v186 = v11 + 19600;
  while (1)
  {
    int v190 = v41;
    int v183 = a4;
    int v43 = *(_DWORD *)(v11 + 5788);
    if (*(_DWORD *)(v11 + 4608) - v43 >= v175) {
      int v44 = v175;
    }
    else {
      int v44 = *(_DWORD *)(v11 + 4608) - v43;
    }
    uint64_t v45 = (v44 * *(_DWORD *)(v11 + 4580) / (1000 * *(_DWORD *)(v11 + 4600)));
    int v46 = *v10;
    int v184 = a3;
    uint64_t v182 = v45;
    if (v46 != 2)
    {
LABEL_71:
      size_t v62 = 2 * (int)v45;
      int v63 = a3;
      uint64_t v64 = v14;
      int v65 = v42;
      int v66 = v178;
      int v67 = v45;
      int v68 = result;
      memcpy(v178, v63, v62);
      int v69 = v66;
      int v42 = v65;
      uint64_t v14 = v64;
      uint64_t result = silk_resampler(v176, (_WORD *)(v11 + 2 * (v43 + 2) + 5144), v69, v67) + v68;
      int v61 = *(_DWORD *)(v11 + 5788) + v44;
LABEL_81:
      *(_DWORD *)(v11 + 5788) = v61;
      goto LABEL_82;
    }
    int v47 = v10[1];
    if (v47 == 1)
    {
      if ((int)v45 >= 1)
      {
        int v70 = a3 + 1;
        uint64_t v71 = v45;
        int v72 = v178;
        do
        {
          unsigned int v73 = *v70 + *(v70 - 1);
          *v72++ = (v73 & 1) + (v73 >> 1);
          v70 += 2;
          --v71;
        }
        while (v71);
      }
      uint64_t result = silk_resampler(v176, (_WORD *)(v11 + 2 * (v43 + 2) + 5144), v178, v45)
             + result;
      int v74 = *(_DWORD *)(v14 + 68);
      LODWORD(v194) = v44;
      if (v74 == 2 && !*(_DWORD *)(v11 + 5796))
      {
        uint64_t result = silk_resampler(v169, (_WORD *)(v11 + 2 * *(int *)(v11 + 15588) + 14948), v178, v45)
               + result;
        uint64_t v75 = *(unsigned int *)(v11 + 4608);
        if ((int)v75 >= 1)
        {
          int v76 = *(_DWORD *)(v11 + 5788) + 2;
          int v77 = *(_DWORD *)(v11 + 15588) + 2;
          do
          {
            *(_WORD *)(v11 + 2 * v76 + 5144) = (*(__int16 *)(v11 + 2 * v77 + 14944)
                                                              + *(__int16 *)(v11 + 2 * v76 + 5144)) >> 1;
            ++v76;
            ++v77;
            --v75;
          }
          while (v75);
        }
      }
      int v61 = *(_DWORD *)(v11 + 5788) + v194;
      goto LABEL_81;
    }
    if (v47 != 2) {
      goto LABEL_71;
    }
    int v48 = result;
    if ((int)v45 >= 1)
    {
      uint64_t v49 = v45;
      int v50 = (__int16 *)v178;
      int v51 = a3;
      do
      {
        __int16 v52 = *v51;
        v51 += 2;
        *v50++ = v52;
        --v49;
      }
      while (v49);
    }
    if (*(_DWORD *)(v14 + 68) == 1 && *(_DWORD *)(v11 + 5796) == 0) {
      memcpy(v169, v176, 0x130uLL);
    }
    int v54 = silk_resampler(v176, (_WORD *)(v11 + 2 * (v43 + 2) + 5144), v178, v45);
    *(_DWORD *)(v11 + 5788) += v44;
    int v55 = *(_DWORD *)(v11 + 15588);
    if (*(_DWORD *)(v11 + 14408) - v55 >= *(_DWORD *)(v11 + 14400) * v164) {
      int v56 = *(_DWORD *)(v11 + 14400) * v164;
    }
    else {
      int v56 = *(_DWORD *)(v11 + 14408) - v55;
    }
    if ((int)v45 >= 1)
    {
      int v57 = a3 + 1;
      uint64_t v58 = v45;
      int v59 = v178;
      do
      {
        __int16 v60 = *v57;
        v57 += 2;
        *v59++ = v60;
        --v58;
      }
      while (v58);
    }
    uint64_t result = v54 + v48 + silk_resampler(v169, (_WORD *)(v11 + 2 * (v55 + 2) + 14944), v178, v45);
    *(_DWORD *)(v11 + 15588) += v56;
    int v61 = *(_DWORD *)(v11 + 5788);
    int v42 = v177;
LABEL_82:
    int v78 = *v10;
    *(_DWORD *)(v14 + 76) = 0;
    if (v61 < *(_DWORD *)(v11 + 4608)) {
      break;
    }
    int v180 = v78;
    unsigned int v181 = result;
    unsigned int v79 = v184;
    if (*(_DWORD *)(v11 + 5796) | v42) {
      goto LABEL_116;
    }
    __int16 v197 = 0;
    LOBYTE(v197) = -(0x100u >> (v10[1] + v10[1] * *(_DWORD *)(v11 + 5792)));
    ec_enc_icdf(v196, 0, (uint64_t)&v197, 8);
    int v80 = v10[1];
    if (v80 >= 1)
    {
      uint64_t v81 = 0;
      uint64_t v82 = v187;
      do
      {
        uint64_t v83 = v11 + 9800 * v81;
        uint64_t v84 = *(unsigned int *)(v83 + 5792);
        if ((int)v84 < 1)
        {
          int v86 = 0;
        }
        else
        {
          uint64_t v85 = 0;
          int v86 = 0;
          do
          {
            v86 |= *(_DWORD *)(v82 + 4 * v85) << v85;
            ++v85;
          }
          while (v84 != v85);
        }
        *(unsigned char *)(v83 + 4771) = v86 > 0;
        if (v86 && (int)v84 >= 2)
        {
          ec_enc_icdf(v196, v86 - 1, (uint64_t)*(&silk_LBRR_flags_iCDF_ptr + (v84 - 2)), 8);
          int v80 = v10[1];
        }
        ++v81;
        v82 += 9800;
      }
      while (v81 < v80);
    }
    int v87 = *(_DWORD *)(v11 + 5792);
    if (v87 < 1) {
      goto LABEL_112;
    }
    uint64_t v88 = 0;
    unsigned int v89 = -1;
    uint64_t v90 = v187;
    uint64_t v91 = v166;
    uint64_t v92 = v167;
    do
    {
      if (v80 < 1) {
        goto LABEL_111;
      }
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      unsigned int v188 = v89;
      uint64_t v95 = v187 + 4 * v89;
      int v194 = (char *)(v11 + 19600 + 6 * v88 + 34);
      uint64_t v96 = v11;
      uint64_t v192 = (char *)(v11 + 19600 + v88 + 52);
      uint64_t v193 = (_DWORD *)(v11 + 4 * v88 + 14572);
      do
      {
        if (!*(_DWORD *)(v90 + v93)) {
          goto LABEL_109;
        }
        if (v93 || v80 != 2 || (silk_stereo_encode_pred(v196, v194), *v193))
        {
          if (!v88) {
            goto LABEL_107;
          }
        }
        else
        {
          silk_stereo_encode_mid_only(v196, *v192);
          if (!v88)
          {
LABEL_107:
            int v97 = 0;
            goto LABEL_108;
          }
        }
        if (!*(_DWORD *)(v95 + v93)) {
          goto LABEL_107;
        }
        int v97 = 2;
LABEL_108:
        int v98 = v196;
        silk_encode_indices(v96 + v93, v196, v88, 1, v97);
        silk_encode_pulses(v98, *(char *)(v91 + v93), *(char *)(v91 + v93 + 1), v92 + v93, *(_DWORD *)(v96 + v93 + 4608));
        int v80 = v195[1];
LABEL_109:
        ++v94;
        v93 += 9800;
      }
      while (v94 < v80);
      uint64_t v11 = v96;
      int v87 = *(_DWORD *)(v96 + 5792);
      int v10 = v195;
      unsigned int v89 = v188;
LABEL_111:
      ++v88;
      ++v89;
      v92 += 320;
      v91 += 36;
      v90 += 4;
    }
    while (v88 < v87);
LABEL_112:
    if (v80 >= 1)
    {
      uint64_t v99 = 0;
      uint64_t v100 = v187;
      do
      {
        *(_DWORD *)(v100 + 8) = 0;
        *(void *)uint64_t v100 = 0;
        ++v99;
        v100 += 9800;
      }
      while (v99 < (int)v10[1]);
    }
    int v42 = v177;
    uint64_t v14 = v186;
    unsigned int v79 = v184;
LABEL_116:
    silk_HP_variable_cutoff(v11);
    int v102 = v10[6];
    int v101 = v10[7];
    int v103 = v102 * v101 / 1000;
    if (!v42) {
      v103 -= (int)(*((_DWORD *)v196 + 6) + __clz(*((_DWORD *)v196 + 8)) - 32) >> 1;
    }
    uint64_t v104 = *(int *)(v11 + 5796);
    int v105 = (__int16)(v103 / (*(_DWORD *)(v11 + 5792) - (int)v104));
    if (v102 == 10) {
      int v106 = 100;
    }
    else {
      int v106 = 50;
    }
    int v107 = v105 * v106 - 2 * *(_DWORD *)(v14 + 56);
    if (v101 <= 5000) {
      int v108 = 5000;
    }
    else {
      int v108 = v10[7];
    }
    if (v101 >= 5000) {
      int v101 = 5000;
    }
    if (v107 > v101) {
      int v101 = v107;
    }
    if (v107 <= v108) {
      int v109 = v101;
    }
    else {
      int v109 = v108;
    }
    if (v10[1] == 2)
    {
      uint64_t v110 = v171;
      silk_stereo_LR_to_MS(v174, v173, v172, v11 + 6 * (int)v104 + 19634, (unsigned char *)(v171 + v104), v198, v109, *(_DWORD *)(v11 + 4556), v10[14], *(_DWORD *)(v11 + 4600), *(_DWORD *)(v11 + 4608));
      uint64_t v111 = *(int *)(v11 + 5796);
      if (*(unsigned char *)(v110 + v111))
      {
        *(unsigned char *)(v11 + v111 + 14568) = 0;
        if (!v42) {
          goto LABEL_195;
        }
      }
      else
      {
        if (*(_DWORD *)(v14 + 80) == 1)
        {
          __int16 v148 = v163;
          *long long v163 = 0;
          v148[1] = 0;
          bzero(v161, 0x45CuLL);
          bzero(v160, 0x111CuLL);
          int v149 = v159;
          *int v159 = 0u;
          v149[1] = 0u;
          *(void *)(v11 + 9816) = 0;
          *(_DWORD *)(v11 + 14368) = 100;
          *(_DWORD *)(v11 + 14300) = 100;
          *(unsigned char *)__int16 v148 = 10;
          *long long v162 = 0;
          *(_DWORD *)(v11 + 14316) = 0x10000;
          *(_DWORD *)(v11 + 14496) = 1;
        }
        silk_encode_do_VAD_FIX(v170);
        if (!v42)
        {
LABEL_195:
          silk_stereo_encode_pred(v196, (char *)(v11 + 6 * *(int *)(v11 + 5796) + 19634));
          uint64_t v150 = v11 + *(int *)(v11 + 5796);
          if (!*(unsigned char *)(v150 + 14568)) {
            silk_stereo_encode_mid_only(v196, *(char *)(v150 + 19652));
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v11 + 5144) = *(_DWORD *)(v14 + 4);
      *(_DWORD *)(v14 + 4) = *(_DWORD *)(v11 + 5144 + 2 * *(int *)(v11 + 4608));
    }
    silk_encode_do_VAD_FIX(v11);
    int v112 = v10[1];
    int v113 = (_DWORD *)v11;
    if (v112 >= 1)
    {
      uint64_t v114 = 0;
      int v115 = v190;
      BOOL v117 = v189 == 2 && v190 == 0;
      int v118 = v113;
      int v119 = v179;
      uint64_t result = v181;
      while (1)
      {
        int v120 = v10[13];
        if (v117) {
          break;
        }
        signed int v122 = v10[13];
        if (v189 != 3) {
          goto LABEL_152;
        }
        if (!v115)
        {
          int v121 = 2 * v120;
          goto LABEL_146;
        }
        if (v115 == 1) {
          signed int v122 = 3 * v120 / 4;
        }
        else {
          signed int v122 = v10[13];
        }
LABEL_152:
        if (v10[12]) {
          BOOL v123 = v115 == v191;
        }
        else {
          BOOL v123 = 0;
        }
        int v124 = v123;
        if (v112 == 1)
        {
          int v125 = v109;
        }
        else
        {
          int v125 = v198[v114];
          if (!v114 && v198[1] >= 1)
          {
            int v124 = 0;
            v122 -= v120 / v185;
          }
        }
        if (v125 >= 1)
        {
          silk_control_SNR((uint64_t)v113, v125);
          if (v114 >= (int)v118[1449])
          {
            int v126 = 0;
          }
          else if (v114 && *(_DWORD *)(v186 + 80))
          {
            int v126 = 1;
          }
          else
          {
            int v126 = 2;
          }
          uint64_t result = silk_encode_frame_FIX((uint64_t)v113, v119, v196, v126, v122, v124);
          int v112 = v10[1];
          int v115 = v190;
        }
        _X9 = v113 + 8799;
        v113[1175] = 0;
        v113[1447] = 0;
        __asm { PRFM            #0, [X9] }
        ++v113[1449];
        ++v114;
        v113 += 2450;
        if (v114 >= v112) {
          goto LABEL_175;
        }
      }
      int v121 = 3 * v120;
LABEL_146:
      signed int v122 = v121 / 5;
      goto LABEL_152;
    }
    int v118 = (_DWORD *)v11;
    int v119 = v179;
    int v115 = v190;
    uint64_t result = v181;
LABEL_175:
    uint64_t v11 = (uint64_t)v118;
    uint64_t v131 = (int)v118[1449];
    uint64_t v14 = v186;
    *(_DWORD *)(v186 + 80) = *((char *)v118 + v131 + 19651);
    int v132 = *v119;
    int v42 = v177;
    int v133 = v183;
    int v134 = v182;
    if (v132 >= 1 && v131 == *(_DWORD *)(v11 + 5792))
    {
      if (v112 < 1)
      {
        int v136 = 0;
        if (v177) {
          goto LABEL_184;
        }
      }
      else
      {
        uint64_t v135 = 0;
        int v136 = 0;
        unsigned int v137 = (char *)v165;
        do
        {
          uint64_t v138 = v11 + 9800 * v135;
          uint64_t v139 = *(unsigned int *)(v138 + 5792);
          if ((int)v139 >= 1)
          {
            int v140 = v137;
            do
            {
              int v141 = *v140++;
              int v136 = v141 | (2 * v136);
              --v139;
            }
            while (v139);
          }
          int v136 = *(char *)(v138 + 4771) | (2 * v136);
          ++v135;
          v137 += 9800;
        }
        while (v135 != v112);
        if (v177)
        {
LABEL_184:
          if (*(_DWORD *)(v11 + 6132) && (v10[1] == 1 || *(_DWORD *)(v11 + 15932))) {
            *uint64_t v179 = 0;
          }
          int v142 = v10[6];
          uint64_t v143 = -274877907 * v142 * v10[7];
          int v144 = (v143 >> 38) + ((unint64_t)v143 >> 63) + *(_DWORD *)(v14 + 56) + 8 * *v179;
          int v145 = v144 & ~(v144 >> 31);
          if (v145 >= 10000) {
            int v145 = 10000;
          }
          *(_DWORD *)(v14 + 56) = v145;
          int v146 = *(_DWORD *)(v14 + 72);
          if (*(_DWORD *)(v11 + 4556) >= ((3188 * (__int16)v146) >> 16) + 13)
          {
            *(_DWORD *)(v14 + 76) = 0;
            int v147 = v146 + v142;
          }
          else
          {
            int v147 = 0;
            *(_DWORD *)(v14 + 76) = 1;
          }
          *(_DWORD *)(v14 + 72) = v147;
          goto LABEL_199;
        }
      }
      uint64_t v151 = result;
      ec_enc_patch_initial_bits((uint64_t)v196, v136, v112 + v112 * v131);
      uint64_t result = v151;
      int v115 = v190;
      goto LABEL_184;
    }
LABEL_199:
    a3 = &v79[v180 * v134];
    int v41 = v115 + 1;
    a4 = v133 - v134;
    if (!a4)
    {
      int v152 = *(_DWORD *)(v14 + 76);
      goto LABEL_204;
    }
  }
  int v152 = 0;
LABEL_204:
  uint64_t v153 = v10[1];
  *(_DWORD *)(v14 + 68) = v153;
  v10[18] = v152;
  int v154 = *(_DWORD *)(v11 + 4600);
  BOOL v155 = v154 == 16 && *(_DWORD *)(v11 + 28) == 0;
  v10[19] = v155;
  v10[17] = 1000 * (__int16)v154;
  if (v10[14]) {
    int v156 = 0;
  }
  else {
    int v156 = *(__int16 *)(v14 + 28);
  }
  v10[20] = v156;
  if (v42)
  {
    v10[6] = v168;
    v10[9] = HIDWORD(v158);
    if ((int)v153 >= 1)
    {
      int v157 = (_DWORD *)(v11 + 4712);
      do
      {
        *(v157 - 3) = 0;
        *int v157 = 0;
        v157 += 2450;
        --v153;
      }
      while (v153);
    }
  }
  return result;
}

uint64_t silk_stereo_decode_pred(uint64_t a1, _DWORD *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v4 = ec_dec_icdf(a1, silk_stereo_pred_joint_iCDF, 8);
  v14[2] = v4 / 5;
  v14[5] = v4 % 5;
  v14[0] = ec_dec_icdf(a1, silk_uniform3_iCDF, 8);
  v14[1] = ec_dec_icdf(a1, "͚f3", 8);
  v14[3] = ec_dec_icdf(a1, silk_uniform3_iCDF, 8);
  int v5 = ec_dec_icdf(a1, "͚f3", 8);
  uint64_t v6 = 0;
  v14[4] = v5;
  char v7 = 1;
  do
  {
    char v8 = v7;
    char v9 = &v14[3 * v6];
    uint64_t v10 = *v9 + 3 * v9[2];
    *char v9 = v10;
    uint64_t v11 = (__int16 *)((char *)&silk_stereo_pred_quant_Q13 + 2 * v10);
    int v12 = *v11;
    LODWORD(v11) = v11[1] - v12;
    uint64_t result = (6554 * ((int)v11 >> 16));
    a2[v6] = v12
           + (result + ((6554 * (unsigned __int16)v11) >> 16)) * (__int16)((2 * *((_WORD *)v9 + 2)) | 1);
    uint64_t v6 = 1;
    char v7 = 0;
  }
  while ((v8 & 1) != 0);
  *a2 -= a2[1];
  return result;
}

uint64_t silk_stereo_decode_mid_only(uint64_t a1, _DWORD *a2)
{
  uint64_t result = ec_dec_icdf(a1, silk_stereo_only_code_mid_iCDF, 8);
  *a2 = result;
  return result;
}

uint64_t *silk_encode_indices(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (a4) {
    char v8 = (char *)(a1 + 36 * a3 + 6152);
  }
  else {
    char v8 = (char *)(a1 + 4784);
  }
  int v9 = v8[30] + 2 * v8[29];
  if (a4 || v9 >= 2)
  {
    v9 -= 2;
    uint64_t v10 = silk_type_offset_VAD_iCDF;
  }
  else
  {
    uint64_t v10 = silk_type_offset_no_VAD_iCDF;
  }
  ec_enc_icdf(a2, v9, (uint64_t)v10, 8);
  int v11 = *v8;
  if (a5 == 2)
  {
    int v12 = silk_delta_gain_iCDF;
  }
  else
  {
    ec_enc_icdf(a2, v11 >> 3, (uint64_t)&silk_gain_iCDF[8 * v8[29]], 8);
    int v11 = *v8 & 7;
    int v12 = silk_uniform8_iCDF;
  }
  ec_enc_icdf(a2, v11, (uint64_t)v12, 8);
  if (*(int *)(a1 + 4604) > 1)
  {
    uint64_t v13 = 1;
    do
      ec_enc_icdf(a2, v8[v13++], (uint64_t)silk_delta_gain_iCDF, 8);
    while (v13 < *(int *)(a1 + 4604));
  }
  ec_enc_icdf(a2, v8[8], *(void *)(*(void *)(a1 + 4736) + 16) + **(__int16 **)(a1 + 4736) * (uint64_t)(v8[29] >> 1), 8);
  silk_NLSF_unpack((uint64_t)v32, (uint64_t)v31, *(void *)(a1 + 4736), v8[8]);
  uint64_t v14 = *(void *)(a1 + 4736);
  if (*(__int16 *)(v14 + 2) >= 1)
  {
    uint64_t v15 = 0;
    BOOL v16 = v8 + 9;
    do
    {
      int v17 = v16[v15];
      if (v17 < 4)
      {
        if (v17 > -4)
        {
          int v18 = v17 + 4;
          int v20 = (unsigned __int8 *)(*(void *)(v14 + 40) + (__int16)v32[v15]);
          BOOL v19 = a2;
          goto LABEL_22;
        }
        ec_enc_icdf(a2, 0, *(void *)(v14 + 40) + (__int16)v32[v15], 8);
        int v18 = -4 - v16[v15];
      }
      else
      {
        ec_enc_icdf(a2, 8, *(void *)(v14 + 40) + (__int16)v32[v15], 8);
        int v18 = v16[v15] - 4;
      }
      BOOL v19 = a2;
      int v20 = silk_NLSF_EXT_iCDF;
LABEL_22:
      ec_enc_icdf(v19, v18, (uint64_t)v20, 8);
      ++v15;
      uint64_t v14 = *(void *)(a1 + 4736);
    }
    while (v15 < *(__int16 *)(v14 + 2));
  }
  if (*(_DWORD *)(a1 + 4604) == 4) {
    ec_enc_icdf(a2, v8[31], (uint64_t)silk_NLSF_interpolation_factor_iCDF, 8);
  }
  if (v8[29] == 2)
  {
    if (a5 != 2
      || *(_DWORD *)(a1 + 5816) != 2
      || ((int v21 = *((__int16 *)v8 + 13) - *(__int16 *)(a1 + 5820), v22 = v21 - 12, v23 = v21 + 9, v22 >= 0xFFFFFFEC)
        ? (int v24 = v23)
        : (int v24 = 0),
          ec_enc_icdf(a2, v24, (uint64_t)silk_pitch_delta_iCDF, 8),
          v22 <= 0xFFFFFFEB))
    {
      int v25 = *((__int16 *)v8 + 13);
      int v26 = *(_DWORD *)(a1 + 4600);
      int v27 = v25 / (v26 >> 1);
      int v28 = v25 - (__int16)v27 * (__int16)(v26 >> 1);
      ec_enc_icdf(a2, v27, (uint64_t)silk_pitch_lag_iCDF, 8);
      ec_enc_icdf(a2, v28, *(void *)(a1 + 4720), 8);
    }
    *(_WORD *)(a1 + 5820) = *((_WORD *)v8 + 13);
    ec_enc_icdf(a2, v8[28], *(void *)(a1 + 4728), 8);
    ec_enc_icdf(a2, v8[32], (uint64_t)silk_LTP_per_index_iCDF, 8);
    if (*(int *)(a1 + 4604) >= 1)
    {
      uint64_t v29 = 0;
      do
        ec_enc_icdf(a2, v8[v29++ + 4], (uint64_t)*(&silk_LTP_gain_iCDF_ptrs + v8[32]), 8);
      while (v29 < *(int *)(a1 + 4604));
    }
    if (!a5) {
      ec_enc_icdf(a2, v8[33], (uint64_t)silk_LTPscale_iCDF, 8);
    }
  }
  *(_DWORD *)(a1 + 5816) = v8[29];
  return ec_enc_icdf(a2, v8[34], (uint64_t)silk_uniform4_iCDF, 8);
}

uint64_t silk_HP_variable_cutoff(uint64_t result)
{
  if (*(unsigned char *)(result + 4565) == 2)
  {
    uint64_t v1 = result;
    int v2 = silk_lin2log(65536000 * *(_DWORD *)(result + 4600) / *(_DWORD *)(result + 4568));
    int v3 = ((-4 * *(_DWORD *)(v1 + 4744)) >> 16) * (__int16)*(_DWORD *)(v1 + 4744)
       + (((unsigned __int16)(-4 * *(_DWORD *)(v1 + 4744)) * (__int16)*(_DWORD *)(v1 + 4744)) >> 16);
    int v4 = (__int16)(v2 - silk_lin2log(0x3C0000u));
    __int16 v5 = silk_lin2log(0x3C0000u);
    int v6 = *(_DWORD *)(v1 + 8);
    int v7 = v2 - (v6 >> 8) + (v3 >> 16) * v4 + (((unsigned __int16)v3 * (__int16)(v2 - v5)) >> 16) - 2048;
    if (v7 < 0) {
      v7 *= 3;
    }
    if (v7 <= -51) {
      int v7 = -51;
    }
    if (v7 >= 51) {
      int v7 = 51;
    }
    *(_DWORD *)(v1 + 8) = v6
                        + 6554 * ((v7 * *(__int16 *)(v1 + 4556)) >> 16)
                        + ((6554 * (unsigned __int16)(v7 * *(_WORD *)(v1 + 4556))) >> 16);
    signed int v8 = silk_lin2log(0x3Cu) << 8;
    int v9 = silk_lin2log(0x64u);
    signed int v10 = *(_DWORD *)(v1 + 8);
    if (v8 <= v9 << 8)
    {
      if (v10 > (int)(silk_lin2log(0x64u) << 8))
      {
LABEL_13:
        unsigned int v12 = 100;
LABEL_16:
        uint64_t result = silk_lin2log(v12);
        int v14 = result << 8;
LABEL_18:
        *(_DWORD *)(v1 + 8) = v14;
        return result;
      }
      int v13 = *(_DWORD *)(v1 + 8);
      uint64_t result = silk_lin2log(0x3Cu);
      if (v13 >= result << 8)
      {
LABEL_17:
        int v14 = *(_DWORD *)(v1 + 8);
        goto LABEL_18;
      }
    }
    else if (v10 <= (int)(silk_lin2log(0x3Cu) << 8))
    {
      int v11 = *(_DWORD *)(v1 + 8);
      uint64_t result = silk_lin2log(0x64u);
      if (v11 >= result << 8) {
        goto LABEL_17;
      }
      goto LABEL_13;
    }
    unsigned int v12 = 60;
    goto LABEL_16;
  }
  return result;
}

uint64_t *silk_encode_signs(uint64_t *result, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  v14[1] = 0;
  if (a3 >= 8)
  {
    signed int v8 = result;
    uint64_t v9 = 0;
    signed int v10 = (char *)&silk_sign_iCDF + 8 * (((a5 << 16) + (a4 << 17)) >> 16) - (((a5 << 16) + (a4 << 17)) >> 16);
    uint64_t v11 = (a3 + 8) >> 4;
    do
    {
      if (*(int *)(a6 + 4 * v9) >= 1)
      {
        uint64_t v12 = 0;
        unsigned int v13 = *(_DWORD *)(a6 + 4 * v9) & 0x1F;
        if (v13 >= 6) {
          unsigned int v13 = 6;
        }
        v14[0] = v10[v13];
        do
        {
          if (*(unsigned char *)(a2 + v12)) {
            uint64_t result = ec_enc_icdf(v8, (*(unsigned char *)(a2 + v12) & 0x80) == 0, (uint64_t)v14, 8);
          }
          ++v12;
        }
        while (v12 != 16);
      }
      a2 += 16;
      ++v9;
    }
    while (v9 != v11);
  }
  return result;
}

uint64_t silk_decode_signs(uint64_t result, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  v14[1] = 0;
  if (a3 >= 8)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    signed int v10 = (char *)&silk_sign_iCDF + 8 * (((a5 << 16) + (a4 << 17)) >> 16) - (((a5 << 16) + (a4 << 17)) >> 16);
    uint64_t v11 = (a3 + 8) >> 4;
    do
    {
      if (*(int *)(a6 + 4 * v9) >= 1)
      {
        uint64_t v12 = 0;
        unsigned int v13 = *(_DWORD *)(a6 + 4 * v9) & 0x1F;
        if (v13 >= 6) {
          unsigned int v13 = 6;
        }
        v14[0] = v10[v13];
        do
        {
          if (*(int *)(a2 + v12) >= 1)
          {
            uint64_t result = ec_dec_icdf(v8, v14, 8);
            *(_DWORD *)(a2 + v12) *= 2 * result - 1;
          }
          v12 += 4;
        }
        while (v12 != 64);
      }
      a2 += 64;
      ++v9;
    }
    while (v9 != v11);
  }
  return result;
}

uint64_t silk_log2lin(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0) {
    return 0;
  }
  if (a1 > 0xF7E) {
    return 0x7FFFFFFFLL;
  }
  unsigned int v2 = 1 << (a1 >> 7);
  int v3 = (a1 & 0x7F) + ((int)(-174 * (a1 & 0x7F) * (128 - (a1 & 0x7F))) >> 16);
  int v4 = v3 << (a1 >> 7) >> 7;
  if (a1 > 0x7FF) {
    int v4 = v3 * (v2 >> 7);
  }
  return v4 + v2;
}

uint64_t silk_biquad_alt(uint64_t result, int *a2, _DWORD *a3, int *a4, uint64_t a5, int a6, int a7)
{
  if (a6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = -*a3 & 0x3FFF;
    int v9 = (-4 * *a3) >> 16;
    int v10 = -a3[1] & 0x3FFF;
    int v11 = (-4 * a3[1]) >> 16;
    uint64_t v12 = a6;
    int v13 = *a4;
    int v14 = a4[1];
    uint64_t v15 = 2 * a7;
    do
    {
      int v16 = *(__int16 *)(result + v7);
      int v17 = v13 + (*a2 >> 16) * v16 + (((unsigned __int16)*a2 * v16) >> 16);
      int v18 = (__int16)(v17 >> 14);
      int v19 = v14
          + v18 * v9
          + (((unsigned __int16)(4 * v17) * v9) >> 16)
          + ((((int)(v18 * v8 + (((unsigned __int16)(4 * v17) * v8) >> 16)) >> 13) + 1) >> 1);
      *a4 = v19;
      int v13 = (a2[1] >> 16) * v16 + (((unsigned __int16)a2[1] * v16) >> 16) + v19;
      int v20 = v18 * v11
          + (((unsigned __int16)(4 * v17) * v11) >> 16)
          + ((((int)(v18 * v10 + (((unsigned __int16)(4 * v17) * v10) >> 16)) >> 13) + 1) >> 1);
      *a4 = v13;
      a4[1] = v20;
      int v14 = (a2[2] >> 16) * v16 + (((unsigned __int16)a2[2] * v16) >> 16) + v20;
      a4[1] = v14;
      int v21 = (4 * v17 + 0x3FFF) >> 14;
      if (v21 <= -32768) {
        LOWORD(v21) = 0x8000;
      }
      if (4 * v17 > 536854528) {
        LOWORD(v21) = 0x7FFF;
      }
      *(_WORD *)(a5 + v7) = v21;
      v7 += v15;
      --v12;
    }
    while (v12);
  }
  return result;
}

unsigned int *silk_resampler_private_up2_HQ(unsigned int *result, uint64_t a2, __int16 *a3, uint64_t a4)
{
  if ((int)a4 >= 1)
  {
    unsigned int v4 = *result;
    unsigned int v5 = result[1];
    int v6 = (__int16 *)(a2 + 2);
    int v8 = result[2];
    unsigned int v7 = result[3];
    unsigned int v10 = result[4];
    int v9 = result[5];
    a4 = a4;
    do
    {
      int v11 = *a3++;
      unsigned int v12 = 1746 * ((int)((v11 << 10) - v4) >> 16)
          + ((1746 * (unsigned __int16)(((_WORD)v11 << 10) - v4)) >> 16);
      unsigned int v13 = v12 + v4;
      unsigned int v4 = v12 + (v11 << 10);
      unsigned int v14 = 14986 * ((int)(v13 - v5) >> 16) + ((14986 * (unsigned __int16)(v13 - v5)) >> 16);
      unsigned int v15 = v14 + v5;
      unsigned int v5 = v14 + v13;
      int v16 = v15 - v8;
      unsigned int v17 = 6854 * ((int)((v11 << 10) - v7) >> 16)
          + ((6854 * (unsigned __int16)(((_WORD)v11 << 10) - v7)) >> 16);
      unsigned int v18 = v17 + v7;
      int v19 = -26453 * (v16 >> 16) + ((-26453 * (unsigned __int16)v16) >> 16) + v15;
      unsigned int v7 = v17 + (v11 << 10);
      int v8 = v19 + v16;
      unsigned int v20 = 25769 * ((int)(v18 - v10) >> 16) + ((25769 * (unsigned __int16)(v18 - v10)) >> 16);
      int v21 = ((v19 >> 9) + 1) >> 1;
      if (v21 <= -32768) {
        LOWORD(v21) = 0x8000;
      }
      unsigned int v22 = v20 + v10;
      unsigned int v10 = v20 + v18;
      int v23 = v22 - v9;
      BOOL v24 = v19 <= 33553919;
      int v25 = -9994 * (v23 >> 16) + ((-9994 * (unsigned __int16)v23) >> 16) + v22;
      if (v24) {
        __int16 v26 = v21;
      }
      else {
        __int16 v26 = 0x7FFF;
      }
      int v9 = v25 + v23;
      *(v6 - 1) = v26;
      if (((v25 >> 9) + 1) >> 1 <= -32768) {
        LOWORD(v27) = 0x8000;
      }
      else {
        int v27 = ((v25 >> 9) + 1) >> 1;
      }
      if (v25 <= 33553919) {
        __int16 v28 = v27;
      }
      else {
        __int16 v28 = 0x7FFF;
      }
      *int v6 = v28;
      v6 += 2;
      --a4;
    }
    while (a4);
    *uint64_t result = v4;
    result[1] = v5;
    result[2] = v8;
    result[3] = v7;
    result[4] = v10;
    result[5] = v9;
  }
  return result;
}

uint64_t silk_NLSF_del_dec_quant(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, __int16 a9, __int16 a10, unsigned __int16 a11)
{
  *(void *)&v81[88] = *MEMORY[0x263EF8340];
  int v11 = a8 >> 16;
  int v12 = (unsigned __int16)a8;
  v78[0] = 0;
  uint64_t v13 = (__int16)a11;
  v80[0] = 0;
  unsigned int v14 = 1;
LABEL_2:
  uint64_t v15 = v14;
  while (1)
  {
    uint64_t v16 = v13--;
    if ((int)v15 < 1) {
      goto LABEL_54;
    }
    uint64_t v17 = 0;
    uint64_t v18 = a6 + *(__int16 *)(a5 + 2 * v13);
    int v19 = *(unsigned __int8 *)(a4 + v13) << 8;
    __int16 v20 = *(_WORD *)(a2 + 2 * v13);
    uint64_t v76 = v13;
    int v21 = *(__int16 *)(a3 + 2 * v13);
    unsigned int v22 = &v81[7];
    uint64_t v23 = v15;
    do
    {
      int v24 = v19 * (__int16)v80[v17];
      int v25 = v24 >> 16;
      int v26 = v11 * (__int16)(v20 - HIWORD(v24)) + ((v12 * (__int16)(v20 - HIWORD(v24))) >> 16);
      if (v26 <= -10) {
        int v26 = -10;
      }
      if (v26 >= 9) {
        int v27 = 9;
      }
      else {
        int v27 = v26;
      }
      v22[v16] = v27;
      int v28 = v27 << 10;
      unsigned int v29 = (v27 << 10) + 1024;
      int v30 = (v27 << 10) | 0x66;
      if (v27 == -1) {
        int v30 = -922;
      }
      else {
        unsigned int v29 = (v27 << 10) + 1126;
      }
      if (!v27)
      {
        int v30 = 0;
        unsigned int v29 = 922;
      }
      unsigned int v31 = v28 - 102;
      int v32 = v28 | 0x39A;
      BOOL v33 = v26 < 1;
      if (v26 >= 1) {
        unsigned int v34 = v31;
      }
      else {
        unsigned int v34 = v30;
      }
      if (!v33) {
        unsigned int v29 = v32;
      }
      unsigned int v35 = HIWORD(v29);
      unsigned int v36 = (unsigned __int16)v29 * (__int16)a7;
      unsigned int v37 = v25 + HIWORD(v34) * a7 + (((unsigned __int16)v34 * (__int16)a7) >> 16);
      int v38 = v25 + v35 * a7 + HIWORD(v36);
      v80[v17] = v37;
      v80[v23] = v25 + v35 * a7 + HIWORD(v36);
      if (v27 < 3)
      {
        if (v27 > -4)
        {
          int v39 = *(unsigned __int8 *)(v18 + (v27 + 4));
          int v40 = *(unsigned __int8 *)(v18 + (v27 + 5));
        }
        else if (v27 == -4)
        {
          int v40 = *(unsigned __int8 *)(v18 + 1);
          int v39 = 280;
        }
        else
        {
          int v39 = -43 * v27 + 108;
          int v40 = -43 * v27 + 65;
        }
      }
      else if (v27 == 3)
      {
        int v39 = *(unsigned __int8 *)(v18 + 7);
        int v40 = 280;
      }
      else
      {
        int v39 = 43 * v27 + 108;
        int v40 = 43 * v27 + 151;
      }
      int v41 = v78[v17];
      v78[v17] = v41 + v39 * a9 + (__int16)(v20 - v37) * (__int16)(v20 - v37) * v21;
      v78[v23] = v41 + v40 * a9 + (__int16)(v20 - v38) * (__int16)(v20 - v38) * v21;
      ++v17;
      ++v23;
      v22 += 16;
    }
    while (v15 != v17);
    if ((int)v15 <= 2)
    {
      uint64_t v60 = 0;
      uint64_t v13 = v76;
      do
      {
        v81[16 * v15 + 7 + v16 + v60] = v81[v16 + 7 + v60] + 1;
        v60 += 16;
      }
      while (16 * v15 != v60);
LABEL_54:
      unsigned int v14 = 2 * v15;
      if (v15 <= 1)
      {
        uint64_t v61 = (int)v14;
        if (v14 <= 3) {
          int v62 = 3;
        }
        else {
          int v62 = 2 * v15;
        }
        uint64_t v63 = v62 + 1;
        uint64_t v64 = &v81[7];
        do
        {
          v81[16 * v61++ + 8 + v13] = v64[v16];
          v64 += 16;
        }
        while (v63 != v61);
      }
      goto LABEL_2;
    }
    if (v16 < 2) {
      break;
    }
    uint64_t v42 = 0;
    int v43 = v81;
    int v44 = (int *)&v79;
    uint64_t v13 = v76;
    do
    {
      int v45 = *(v44 - 4);
      int v46 = *v44;
      if (v45 <= *v44)
      {
        int v49 = *v44;
        int v46 = *(v44 - 4);
        int v47 = v42;
      }
      else
      {
        int v47 = v42 + 4;
        *(v44 - 4) = v46;
        *int v44 = v45;
        __int16 v48 = *(v43 - 4);
        *(v43 - 4) = *v43;
        *int v43 = v48;
        int v49 = v45;
      }
      v77[v42] = v49;
      v77[v42 + 4] = v46;
      *(_DWORD *)&v81[4 * v42++ + 72] = v47;
      ++v44;
      ++v43;
    }
    while (v42 != 4);
    uint64_t v50 = 0;
    int v51 = 0;
    int v52 = 0;
    int v53 = 0;
    int v54 = 0x7FFFFFFF;
    while (1)
    {
      do
      {
        int v55 = v77[v50];
        if (v54 > v55) {
          int v53 = v50;
        }
        int v56 = v77[v50 + 4];
        if (v54 >= v55) {
          int v54 = v77[v50];
        }
        if (v51 < v56) {
          int v52 = v50;
        }
        if (v51 <= v56) {
          int v51 = v77[v50 + 4];
        }
        ++v50;
      }
      while (v50 != 4);
      if (v54 >= v51) {
        break;
      }
      uint64_t v50 = 0;
      int v51 = 0;
      *(_DWORD *)&v81[4 * v52 + 72] = *(_DWORD *)&v81[4 * v53 + 72] ^ 4;
      uint64_t v57 = v53 + 4;
      v78[v52] = v78[v57];
      v80[v52] = v80[v57];
      v77[v52 + 4] = 0;
      int v54 = 0x7FFFFFFF;
      v77[v53] = 0x7FFFFFFF;
      *(_OWORD *)&v81[16 * v52 + 8] = *(_OWORD *)&v81[16 * v53 + 8];
      int v52 = 0;
      int v53 = 0;
    }
    uint64_t v58 = 0;
    int v59 = &v81[7];
    do
    {
      v59[v16] += *(_DWORD *)&v81[v58 + 72] >> 2;
      v58 += 4;
      v59 += 16;
    }
    while (v58 != 16);
  }
  uint64_t v65 = 0;
  unsigned int v66 = 0;
  LODWORD(v67) = 0x7FFFFFFF;
  do
  {
    int v68 = v78[v65];
    if ((int)v67 > v68) {
      unsigned int v66 = v65;
    }
    if ((int)v67 >= v68) {
      uint64_t v67 = v68;
    }
    else {
      uint64_t v67 = v67;
    }
    ++v65;
  }
  while (v65 != 8);
  if ((__int16)a11 >= 1) {
    memcpy(a1, &v81[16 * (v66 & 3) + 8], a11);
  }
  *a1 += v66 >> 2;
  return v67;
}

int *silk_bwexpander_32(int *result, int a2, int a3)
{
  if (a2 >= 2)
  {
    int v4 = a3 - 0x10000;
    uint64_t v5 = (a2 - 1);
    int v6 = result;
    do
    {
      *int v6 = (__int16)*v6 * (a3 >> 16) + (((__int16)*v6 * (unsigned __int16)a3) >> 16) + (((*v6 >> 15) + 1) >> 1) * a3;
      ++v6;
      a3 += (((a3 * v4) >> 15) + 1) >> 1;
      --v5;
    }
    while (v5);
  }
  int v3 = a2 - 1;
  result[v3] = (__int16)result[v3] * (a3 >> 16)
             + (((__int16)result[v3] * (unsigned __int16)a3) >> 16)
             + (((result[v3] >> 15) + 1) >> 1) * a3;
  return result;
}

void *silk_resampler_private_down_FIR(uint64_t a1, _WORD *a2, __int16 *a3, int a4)
{
  v83[1] = *(void **)MEMORY[0x263EF8340];
  int v8 = *(_DWORD *)(a1 + 268);
  uint64_t v9 = *(int *)(a1 + 276);
  size_t v10 = 4 * ((int)v9 + v8);
  int v11 = (char *)v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  v83[0] = (void *)(a1 + 24);
  memcpy(v11, (const void *)(a1 + 24), 4 * v9);
  uint64_t v12 = *(void *)(a1 + 296);
  uint64_t v13 = v12 + 4;
  int v14 = *(_DWORD *)(a1 + 272);
  for (uint64_t i = (__int16 *)v12; ; uint64_t i = *(__int16 **)(a1 + 296))
  {
    if (a4 < v8) {
      int v8 = a4;
    }
    silk_resampler_private_AR2((int *)a1, (int *)&v11[4 * (int)v9], a3, i, v8);
    int v18 = v8 << 16;
    int v19 = *(_DWORD *)(a1 + 276);
    if (v19 == 18)
    {
      if (v18 >= 1)
      {
        int v44 = 0;
        int v45 = *(_DWORD *)(a1 + 280);
        v46.i64[0] = 0xFFFF0000FFFFLL;
        v46.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          int v47 = &v11[4 * (v44 >> 16)];
          int v48 = (unsigned __int16)v44 * (__int16)v45;
          int v49 = (int16x8_t *)(v13 + 18 * (v48 >> 16));
          int32x4_t v50 = *((int32x4_t *)v47 + 1);
          uint64_t v51 = v13 + 18 * (v45 + ~(v48 >> 16));
          int32x4_t v52 = *(int32x4_t *)(v47 + 56);
          v16.i64[0] = *((void *)v47 + 6);
          v53.i16[0] = v49[1].i16[0];
          v53.i16[1] = *(_WORD *)v51;
          v53.i32[1] = *(_DWORD *)(v51 + 2);
          int32x4_t v54 = vmovl_s16(v53);
          int32x4_t v55 = vmovl_high_s16(*v49);
          int32x4_t v56 = vmovl_s16(*(int16x4_t *)v49->i8);
          int32x4_t v57 = vmovl_s16(*(int16x4_t *)(v51 + 6));
          v17.i32[0] = *((_DWORD *)v47 + 8);
          int8x16_t v58 = (int8x16_t)vrev64q_s32((int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v17, 4uLL));
          int32x4_t v59 = vuzp1q_s32(v52, v16);
          v59.i32[1] = v16.i32[1];
          v59.i32[3] = *((_DWORD *)v47 + 11);
          int32x4_t v60 = (int32x4_t)vextq_s8(v58, v58, 8uLL);
          int32x4_t v61 = vmulq_s32(vshrq_n_s32(v60, 0x10uLL), v54);
          int32x4_t v16 = vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v60, v46), v54);
          int32x4_t v17 = vmlaq_s32(vmulq_s32(vshrq_n_s32(v59, 0x10uLL), v57), vshrq_n_s32(v50, 0x10uLL), v55);
          int v62 = vaddvq_s32(vaddq_s32(vaddq_s32(vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8(*(int8x16_t *)v47, v46), v56), 0x10uLL), v16, 0x10uLL), vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v50, v46), v55), 0x10uLL), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v59, v46), v57), 0x10uLL)), vaddq_s32(vmlaq_s32(v61, vshrq_n_s32(*(int32x4_t *)v47, 0x10uLL), v56), v17)))+ (((unsigned __int16)*((_DWORD *)v47 + 10) * *(__int16 *)(v51 + 14)) >> 16)+ (*((int *)v47 + 10) >> 16) * *(__int16 *)(v51 + 14)+ (((unsigned __int16)*((_DWORD *)v47 + 9) * *(__int16 *)(v51 + 16)) >> 16)+ (*((int *)v47 + 9) >> 16) * *(__int16 *)(v51 + 16);
          if (v62 <= 2097119)
          {
            int v63 = ((v62 >> 5) + 1) >> 1;
            if (v63 <= -32768) {
              LOWORD(v63) = 0x8000;
            }
          }
          else
          {
            LOWORD(v63) = 0x7FFF;
          }
          *a2++ = v63;
          v44 += v14;
        }
        while (v44 < v18);
      }
    }
    else if (v19 == 24)
    {
      v64.i64[0] = 0xFFFF0000FFFFLL;
      v64.i64[1] = 0xFFFF0000FFFFLL;
      if (v18 >= 1)
      {
        for (int j = 0; j < v18; j += v14)
        {
          unsigned int v66 = (int32x4_t *)&v11[4 * (j >> 16)];
          int8x16_t v67 = (int8x16_t)vrev64q_s32(v66[5]);
          int8x16_t v68 = (int8x16_t)vrev64q_s32(v66[4]);
          int32x4_t v69 = vaddq_s32((int32x4_t)vextq_s8(v68, v68, 8uLL), v66[1]);
          int32x4_t v70 = vaddq_s32((int32x4_t)vextq_s8(v67, v67, 8uLL), *v66);
          int16x8_t v71 = *(int16x8_t *)(v12 + 4);
          int32x4_t v72 = vmovl_s16(*(int16x4_t *)v71.i8);
          int32x4_t v73 = vmovl_high_s16(v71);
          int32x4_t v74 = vmulq_s32(vshrq_n_s32(v69, 0x10uLL), v73);
          int32x4_t v75 = vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v69, v64), v73);
          int8x16_t v76 = (int8x16_t)vrev64q_s32(v66[3]);
          int32x4_t v77 = vaddq_s32((int32x4_t)vextq_s8(v76, v76, 8uLL), v66[2]);
          int32x4_t v78 = vmovl_s16(*(int16x4_t *)(v12 + 20));
          int v79 = vaddvq_s32(vaddq_s32(vaddq_s32(vsraq_n_s32(vmulq_s32(vshrq_n_s32(v77, 0x10uLL), v78), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v77, v64), v78), 0x10uLL), vmlaq_s32(v74, vshrq_n_s32(v70, 0x10uLL), v72)), vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v70, v64), v72), 0x10uLL), v75, 0x10uLL)));
          if (v79 <= 2097119)
          {
            int v80 = ((v79 >> 5) + 1) >> 1;
            if (v80 <= -32768) {
              LOWORD(v80) = 0x8000;
            }
          }
          else
          {
            LOWORD(v80) = 0x7FFF;
          }
          *a2++ = v80;
        }
      }
    }
    else
    {
      BOOL v20 = v19 != 36 || v18 < 1;
      v21.i64[0] = 0xFFFF0000FFFFLL;
      v21.i64[1] = 0xFFFF0000FFFFLL;
      if (!v20)
      {
        int v22 = 0;
        do
        {
          uint64_t v23 = &v11[4 * (v22 >> 16)];
          v24.i64[0] = *((void *)v23 + 6);
          v24.i32[2] = *((_DWORD *)v23 + 14);
          v24.i32[3] = *((_DWORD *)v23 + 20);
          int8x16_t v25 = (int8x16_t)vrev64q_s32(*((int32x4_t *)v23 + 8));
          int8x16_t v26 = (int8x16_t)vrev64q_s32(*((int32x4_t *)v23 + 7));
          int8x16_t v27 = (int8x16_t)vrev64q_s32(*((int32x4_t *)v23 + 6));
          *(int32x2_t *)v28.i8 = vrev64_s32(*(int32x2_t *)(v23 + 88));
          v28.i32[2] = *((_DWORD *)v23 + 21);
          v28.i32[3] = *((_DWORD *)v23 + 15);
          int32x4_t v29 = vaddq_s32(v24, v28);
          int32x4_t v30 = vaddq_s32(*((int32x4_t *)v23 + 1), (int32x4_t)vextq_s8(v26, v26, 8uLL));
          int32x4_t v31 = vaddq_s32(*((int32x4_t *)v23 + 2), (int32x4_t)vextq_s8(v27, v27, 8uLL));
          int32x4_t v32 = vaddq_s32(*(int32x4_t *)v23, (int32x4_t)vextq_s8(v25, v25, 8uLL));
          int16x8_t v33 = *(int16x8_t *)(v12 + 20);
          int16x8_t v34 = *(int16x8_t *)(v12 + 4);
          int32x4_t v35 = vmovl_s16(*(int16x4_t *)v34.i8);
          int32x4_t v36 = vmovl_s16(*(int16x4_t *)v33.i8);
          int32x4_t v37 = vmovl_high_s16(v34);
          int32x4_t v38 = vmovl_high_s16(v33);
          int v39 = *(__int16 *)(v12 + 36);
          int v40 = ((*((_DWORD *)v23 + 19) + *((_DWORD *)v23 + 16)) >> 16) * v39;
          int v41 = (unsigned __int16)(*((_WORD *)v23 + 38) + *((_WORD *)v23 + 32)) * v39;
          LODWORD(v23) = *((_DWORD *)v23 + 18) + *((_DWORD *)v23 + 17);
          int v42 = vaddvq_s32(vaddq_s32(vaddq_s32(vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v32, v21), v35), 0x10uLL), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v31, v21), v36), 0x10uLL), vsraq_n_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v30, v21), v37), 0x10uLL), vmulq_s32((int32x4_t)vandq_s8((int8x16_t)v29, v21), v38), 0x10uLL)), vaddq_s32(vmlaq_s32(vmulq_s32(vshrq_n_s32(v31, 0x10uLL), v36), vshrq_n_s32(v32, 0x10uLL), v35), vmlaq_s32(vmulq_s32(vshrq_n_s32(v29, 0x10uLL), v38), vshrq_n_s32(v30, 0x10uLL), v37))))+ (v41 >> 16)+ v40+ (((unsigned __int16)v23 * *(__int16 *)(v12 + 38)) >> 16)+ ((int)v23 >> 16) * *(__int16 *)(v12 + 38);
          if (v42 <= 2097119)
          {
            int v43 = ((v42 >> 5) + 1) >> 1;
            if (v43 <= -32768) {
              LOWORD(v43) = 0x8000;
            }
          }
          else
          {
            LOWORD(v43) = 0x7FFF;
          }
          *a2++ = v43;
          v22 += v14;
        }
        while (v22 < v18);
      }
    }
    a4 -= v8;
    size_t v81 = 4 * v19;
    if (a4 <= 1) {
      break;
    }
    a3 += v8;
    memcpy(v11, &v11[4 * v8], v81);
    int v8 = *(_DWORD *)(a1 + 268);
    LODWORD(v9) = *(_DWORD *)(a1 + 276);
  }
  return memcpy(v83[0], &v11[4 * v8], v81);
}

_WORD *silk_NLSF_VQ_weights_laroia(_WORD *result, __int16 *a2, int a3)
{
  int v3 = *a2;
  if (v3 <= 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = *a2;
  }
  unsigned int v5 = 0x20000 / v4;
  int v6 = a2[1] - v3;
  if (v6 <= 1) {
    int v6 = 1;
  }
  unsigned int v7 = 0x20000u / v6;
  int v8 = 0x20000u / v6 + v5;
  if (v8 >= 0x7FFF) {
    LOWORD(v8) = 0x7FFF;
  }
  *uint64_t result = v8;
  unint64_t v9 = (a3 - 1);
  if (a3 <= 2)
  {
    unint64_t v9 = (int)v9;
  }
  else
  {
    size_t v10 = a2 + 2;
    int v11 = result + 2;
    unint64_t v12 = 1;
    do
    {
      int v13 = *v10 - *(v10 - 1);
      if (v13 <= 1) {
        int v13 = 1;
      }
      unsigned int v14 = 0x20000u / v13;
      int v15 = v14 + v7;
      if (v15 >= 0x7FFF) {
        LOWORD(v15) = 0x7FFF;
      }
      *(v11 - 1) = v15;
      v12 += 2;
      int v16 = v10[1] - *v10;
      if (v16 <= 1) {
        int v16 = 1;
      }
      unsigned int v7 = 0x20000u / v16;
      int v17 = v7 + v14;
      if (v17 >= 0x7FFF) {
        LOWORD(v17) = 0x7FFF;
      }
      *int v11 = v17;
      v11 += 2;
      v10 += 2;
    }
    while (v12 < v9);
  }
  int v18 = 0x20000u / (0x8000 - a2[v9]) + v7;
  if (v18 >= 0x7FFF) {
    LOWORD(v18) = 0x7FFF;
  }
  result[v9] = v18;
  return result;
}

__n128 silk_resampler_down2_3(__n128 *a1, __int16 *a2, __int16 *a3, int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  bzero(v29, 0x780uLL);
  int v8 = a3;
  for (__n128 i = *a1; ; __n128 i = *(__n128 *)((char *)&i + 4 * v24))
  {
    int v27 = a4;
    if (a4 >= 480) {
      a4 = 480;
    }
    int8x16_t v26 = v8;
    silk_resampler_private_AR2((int *)&a1[1], v29, v8, silk_Resampler_2_3_COEFS_LQ, a4);
    if (a4 >= 3)
    {
      int v9 = i.n128_u32[0];
      int v10 = a4 + 3;
      int v11 = v29;
      do
      {
        int v12 = 4697 * (v9 >> 16);
        int v13 = 4697 * (unsigned __int16)v9;
        int v14 = *(v11 - 3) >> 16;
        int v15 = (unsigned __int16)*(v11 - 3);
        int v16 = 8276 * (*(v11 - 2) >> 16) + ((8276 * (unsigned __int16)*(v11 - 2)) >> 16);
        int v9 = *(v11 - 1);
        int v17 = v12
            + (v13 >> 16)
            + 10739 * v14
            + ((10739 * v15) >> 16)
            + v16
            + 1567 * (v9 >> 16)
            + ((1567 * (unsigned __int16)v9) >> 16);
        int v18 = ((v17 >> 5) + 1) >> 1;
        if (v18 <= -32768) {
          LOWORD(v18) = 0x8000;
        }
        if (v17 <= 2097119) {
          __int16 v19 = v18;
        }
        else {
          __int16 v19 = 0x7FFF;
        }
        *a2 = v19;
        int v20 = 10739 * (v9 >> 16)
            + ((10739 * (unsigned __int16)v9) >> 16)
            + 1567 * v14
            + v16
            + ((1567 * v15) >> 16)
            + 4697 * (*v11 >> 16)
            + ((4697 * (unsigned __int16)*v11) >> 16);
        if (v20 <= 2097119)
        {
          int v22 = ((v20 >> 5) + 1) >> 1;
          if (v22 <= -32768) {
            __int16 v21 = 0x8000;
          }
          else {
            __int16 v21 = v22;
          }
        }
        else
        {
          __int16 v21 = 0x7FFF;
        }
        v11 += 3;
        uint64_t v23 = a2 + 2;
        a2[1] = v21;
        v10 -= 3;
        a2 += 2;
      }
      while (v10 > 5);
      a2 = v23;
    }
    uint64_t v24 = a4;
    a4 = v27 - a4;
    if (a4 < 1) {
      break;
    }
    int v8 = &v26[v24];
  }
  __n128 result = *(__n128 *)((char *)&i + 4 * v24);
  *a1 = result;
  return result;
}

uint64_t silk_CNG_Reset(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 2340);
  if ((int)v1 >= 1)
  {
    int v2 = 0x7FFF / ((int)v1 + 1);
    int v3 = (_WORD *)(result + 4076);
    int v4 = v2;
    do
    {
      *v3++ = v4;
      v4 += v2;
      --v1;
    }
    while (v1);
  }
  *(void *)(result + 4172) = 0x30788000000000;
  return result;
}

void silk_CNG(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v99 = a3;
  uint64_t v112 = *MEMORY[0x263EF8340];
  unsigned int v7 = (char *)(a1 + 2796);
  int v8 = *(_DWORD *)(a1 + 2316);
  if (v8 != *(_DWORD *)(a1 + 4180))
  {
    uint64_t v9 = *(unsigned int *)(a1 + 2340);
    if ((int)v9 >= 1)
    {
      int v10 = 0x7FFF / ((int)v9 + 1);
      int v11 = (_WORD *)(a1 + 4076);
      int v12 = v10;
      do
      {
        *v11++ = v12;
        v12 += v10;
        --v9;
      }
      while (v9);
    }
    *(void *)(a1 + 4172) = 0x30788000000000;
    *(_DWORD *)(a1 + 4180) = v8;
  }
  if (*(_DWORD *)(a1 + 4184)) {
    goto LABEL_22;
  }
  if (!*(_DWORD *)(a1 + 4188))
  {
    uint64_t v13 = *(unsigned int *)(a1 + 2340);
    if ((int)v13 >= 1)
    {
      int v14 = (__int16 *)(a1 + 2344);
      do
      {
        v14[866] += 16348 * ((*v14 - v14[866]) >> 16)
                  + ((16348 * (unsigned __int16)(*v14 - v14[866])) >> 16);
        ++v14;
        --v13;
      }
      while (v13);
    }
    uint64_t v15 = *(unsigned int *)(a1 + 2324);
    if ((int)v15 < 1)
    {
      int v18 = 0;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 0;
      int v18 = 0;
      do
      {
        if (*(_DWORD *)(a2 + 16 + 4 * v16) > v17)
        {
          int v18 = v16;
          int v17 = *(_DWORD *)(a2 + 16 + 4 * v16);
        }
        ++v16;
      }
      while (v15 != v16);
    }
    memmove(&v7[4 * *(int *)(a1 + 2332)], v7, 4 * *(_DWORD *)(a1 + 2332) * ((int)v15 - 1));
    memcpy(v7, (const void *)(a1 + 4 * *(_DWORD *)(a1 + 2332) * v18 + 4), 4 * *(int *)(a1 + 2332));
    uint64_t v19 = *(unsigned int *)(a1 + 2324);
    if ((int)v19 >= 1)
    {
      int v20 = *(_DWORD *)(a1 + 4172);
      __int16 v21 = (int *)(a2 + 16);
      do
      {
        int v22 = *v21++;
        v20 += 4634 * ((v22 - v20) >> 16) + ((4634 * (unsigned __int16)(v22 - v20)) >> 16);
        *(_DWORD *)(a1 + 4172) = v20;
        --v19;
      }
      while (v19);
    }
  }
  if (*(_DWORD *)(a1 + 4184))
  {
LABEL_22:
    size_t v23 = 4 * (a4 + 16);
    uint64_t v24 = (int *)((char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v24, v23);
    int v25 = *(_DWORD *)(a1 + 4172);
    unsigned int v26 = 255;
    do
    {
      signed int v27 = v26;
      v26 >>= 1;
    }
    while (v27 > a4);
    unsigned int v28 = *(_DWORD *)(a1 + 4176);
    if (a4 >= 1)
    {
      int32x4_t v29 = v24 + 16;
      int v30 = (__int16)(v25 >> 4);
      int v31 = v25 >> 19;
      uint64_t v32 = a4;
      int v33 = (v31 + 1) >> 1;
      do
      {
        unsigned int v28 = 196314165 * v28 + 907633515;
        int v34 = *(_DWORD *)&v7[4 * (v27 & HIBYTE(v28))];
        int v35 = v34 * v33 + (v34 >> 16) * v30 + (((unsigned __int16)v34 * v30) >> 16);
        if (v35 <= -32768) {
          int v35 = -32768;
        }
        if (v35 >= 0x7FFF) {
          int v35 = 0x7FFF;
        }
        *v29++ = v35;
        --v32;
      }
      while (v32);
    }
    *(_DWORD *)(a1 + 4176) = v28;
    silk_NLSF2A(v100, (__int16 *)(a1 + 4076), *(_DWORD *)(a1 + 2340));
    size_t v81 = (_OWORD *)(a1 + 4108);
    long long v36 = *(_OWORD *)(a1 + 4124);
    *(_OWORD *)uint64_t v24 = *(_OWORD *)(a1 + 4108);
    *((_OWORD *)v24 + 1) = v36;
    long long v37 = *(_OWORD *)(a1 + 4156);
    *((_OWORD *)v24 + 2) = *(_OWORD *)(a1 + 4140);
    *((_OWORD *)v24 + 3) = v37;
    unsigned int v82 = a4;
    if (a4 >= 1)
    {
      uint64_t v38 = 0;
      int v39 = *(_DWORD *)(a1 + 2340);
      int v40 = v100[0];
      int v97 = v100[1];
      int v98 = v39 >> 1;
      int v41 = v100[2];
      int v96 = v100[3];
      int v42 = v100[4];
      int v43 = v101;
      int v44 = v102;
      int v45 = v103;
      int v46 = v104;
      int v47 = v105;
      int v91 = v106;
      int v89 = v107;
      int v90 = v103;
      int v86 = v109;
      int v87 = v108;
      int v84 = v111;
      int v85 = v110;
      uint64_t v48 = v82;
      int v49 = v24[15];
      int v50 = v24[13];
      int v51 = v24[11];
      int v52 = v24[9];
      int v53 = v24[7];
      int v92 = v105;
      int v93 = v104;
      int v88 = v101;
      uint64_t v83 = v82;
      do
      {
        int v54 = v49 >> 16;
        int v55 = (unsigned __int16)v49 * v40;
        int32x4_t v56 = &v24[v38];
        int v57 = v56[14];
        int v58 = (unsigned __int16)v50 * v41;
        int v59 = v98
            + v54 * v40
            + (v55 >> 16)
            + (v57 >> 16) * v97
            + (((unsigned __int16)v57 * v97) >> 16)
            + (v50 >> 16) * v41;
        int v60 = v56[12];
        int v61 = (unsigned __int16)v51 * v42;
        int v62 = v59 + (v58 >> 16) + (v60 >> 16) * v96 + (((unsigned __int16)v60 * v96) >> 16) + (v51 >> 16) * v42;
        int v63 = v56[10];
        int v64 = v62 + (v61 >> 16) + (v63 >> 16) * v43 + (((unsigned __int16)v63 * v43) >> 16);
        int v65 = (unsigned __int16)v52 * v44;
        int v66 = v64 + (v52 >> 16) * v44;
        int v67 = v56[8];
        int v68 = v66
            + (v65 >> 16)
            + (v67 >> 16) * v45
            + (((unsigned __int16)v67 * v45) >> 16)
            + (v53 >> 16) * v46
            + (((unsigned __int16)v53 * v46) >> 16)
            + (v56[6] >> 16) * v47
            + (((unsigned __int16)v56[6] * v47) >> 16);
        if (v39 == 16)
        {
          int v69 = v56[4];
          int v70 = v56[5] >> 16;
          int v71 = (unsigned __int16)v56[5] * v91;
          int v94 = (unsigned __int16)v69 * v89;
          int v95 = v69 >> 16;
          uint64_t v72 = v38 + 1;
          int v73 = v68 + v70 * v91 + (v71 >> 16) + (v69 >> 16) * v89;
          int v46 = v93;
          uint64_t v48 = v83;
          int v43 = v88;
          int v45 = v90;
          int v47 = v92;
          int v68 = v73
              + (v94 >> 16)
              + (v56[3] >> 16) * v87
              + (((unsigned __int16)v56[3] * v87) >> 16)
              + (v56[2] >> 16) * v86
              + (((unsigned __int16)v56[2] * v86) >> 16)
              + (v24[v38 + 1] >> 16) * v85
              + (((unsigned __int16)v24[v38 + 1] * v85) >> 16)
              + (*v56 >> 16) * v84
              + (((unsigned __int16)*v56 * v84) >> 16);
        }
        else
        {
          uint64_t v72 = v38 + 1;
        }
        int v49 = v24[v38 + 16] + 16 * v68;
        v24[v38 + 16] = v49;
        int v74 = *(__int16 *)(v99 + 2 * v38) + (((v68 >> 5) + 1) >> 1);
        if (v74 <= -32768) {
          int v74 = -32768;
        }
        if (v74 >= 0x7FFF) {
          LOWORD(v74) = 0x7FFF;
        }
        *(_WORD *)(v99 + 2 * v38) = v74;
        int v53 = v67;
        int v52 = v63;
        int v51 = v60;
        int v50 = v57;
        uint64_t v38 = v72;
      }
      while (v72 != v48);
    }
    int32x4_t v75 = &v24[v82];
    long long v76 = *((_OWORD *)v75 + 1);
    int32x4_t v77 = v81;
    *size_t v81 = *(_OWORD *)v75;
    v77[1] = v76;
    long long v78 = *((_OWORD *)v75 + 3);
    v77[2] = *((_OWORD *)v75 + 2);
    v77[3] = v78;
  }
  else
  {
    size_t v79 = 4 * *(int *)(a1 + 2340);
    bzero((void *)(a1 + 4108), v79);
  }
}

uint64_t silk_NLSF_VQ(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a4 >= 1)
  {
    for (uint64_t i = 0; i != a4; *(_DWORD *)(result + 4 * i++) = v7)
    {
      if (a5 < 1)
      {
        int v7 = 0;
      }
      else
      {
        uint64_t v6 = 0;
        int v7 = 0;
        do
        {
          int v8 = (_WORD *)(a2 + 2 * v6);
          int v9 = (__int16)(v8[1] - (*(unsigned __int8 *)(a3 + v6 + 1) << 7));
          v7 += ((__int16)(*v8 - (*(unsigned __int8 *)(a3 + v6) << 7))
                             * (__int16)(*v8 - (*(unsigned __int8 *)(a3 + v6) << 7))
                             + v9 * v9) >> 4;
          v6 += 2;
        }
        while (v6 < a5);
        a3 += v6;
      }
    }
  }
  return result;
}

uint64_t silk_lin2log(unsigned int a1)
{
  unsigned int v1 = __clz(a1);
  if (v1 != 24)
  {
    if (a1 <= 0x7F) {
      LOBYTE(a1) = (a1 >> (56 - v1)) | ((_BYTE)a1 << (v1 - 24));
    }
    else {
      LOBYTE(a1) = ((_BYTE)a1 << (v1 + 8)) | (a1 >> (24 - v1));
    }
  }
  return (a1 & 0x7F) - (v1 << 7) + ((179 * (a1 & 0x7F) * (128 - (a1 & 0x7F))) >> 16) + 3968;
}

uint64_t *silk_stereo_encode_pred(uint64_t *a1, char *a2)
{
  ec_enc_icdf(a1, 5 * a2[2] + a2[5], (uint64_t)silk_stereo_pred_joint_iCDF, 8);
  ec_enc_icdf(a1, *a2, (uint64_t)silk_uniform3_iCDF, 8);
  ec_enc_icdf(a1, a2[1], (uint64_t)"͚f3", 8);
  ec_enc_icdf(a1, a2[3], (uint64_t)silk_uniform3_iCDF, 8);
  int v4 = a2[4];

  return ec_enc_icdf(a1, v4, (uint64_t)"͚f3", 8);
}

uint64_t *silk_stereo_encode_mid_only(uint64_t *a1, int a2)
{
  return ec_enc_icdf(a1, a2, (uint64_t)silk_stereo_only_code_mid_iCDF, 8);
}

unint64_t silk_NLSF2A(__int16 *a1, __int16 *a2, int a3)
{
  unsigned int v5 = (unsigned __int8 *)&silk_NLSF2A_ordering10;
  *(void *)((char *)&v62[7] + 4) = *MEMORY[0x263EF8340];
  if (a3 == 16) {
    unsigned int v5 = (unsigned __int8 *)&silk_NLSF2A_ordering16;
  }
  uint64_t v6 = a3;
  uint64_t v7 = (a3 >> 1);
  if (a3 <= 0)
  {
    int v59 = 0x10000;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      int v9 = *a2++;
      int v10 = ((((silk_LSFCosTab_FIX_Q12[(v9 >> 8) + 1] - silk_LSFCosTab_FIX_Q12[v9 >> 8]) * v9
             + (silk_LSFCosTab_FIX_Q12[v9 >> 8] << 8)) >> 3)
           + 1) >> 1;
      unsigned int v11 = *v5++;
      *(&v61 + v11) = v10;
      --v8;
    }
    while (v8);
    int v59 = 0x10000;
    v60[0] = -v61;
    if (a3 > 3)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 1;
      do
      {
        int v14 = *(&v61 + 2 * v13);
        unint64_t v15 = v13 + 1;
        v60[v13] = 2 * v60[v13 - 2] - ((((unint64_t)(v60[v13 - 1] * (uint64_t)v14) >> 15) + 1) >> 1);
        if (v13 >= 2)
        {
          uint64_t v16 = v12;
          do
          {
            v60[v16] = v60[v16]
                     + v60[(v16 - 1) - 1]
                     - ((((unint64_t)(v60[v16 - 1] * (uint64_t)v14) >> 15) + 1) >> 1);
            uint64_t v17 = v16-- + 1;
          }
          while (v17 > 2);
        }
        v60[0] -= v14;
        ++v12;
        unint64_t v13 = v15;
      }
      while (v15 != v7);
      uint64_t v18 = 0;
      int v57 = 0x10000;
      v58[0] = -LODWORD(v62[0]);
      unint64_t v19 = 1;
      do
      {
        int v20 = v62[v19];
        unint64_t v21 = v19 + 1;
        v58[v19] = 2 * v58[v19 - 2] - ((((unint64_t)(v58[v19 - 1] * (uint64_t)v20) >> 15) + 1) >> 1);
        if (v19 >= 2)
        {
          uint64_t v22 = v18;
          do
          {
            v58[v22] = v58[v22]
                     + v58[(v22 - 1) - 1]
                     - ((((unint64_t)(v58[v22 - 1] * (uint64_t)v20) >> 15) + 1) >> 1);
            uint64_t v23 = v22-- + 1;
          }
          while (v23 > 2);
        }
        v58[0] -= v20;
        ++v18;
        unint64_t v19 = v21;
      }
      while (v21 != v7);
      goto LABEL_20;
    }
  }
  int v57 = 0x10000;
  v58[0] = -LODWORD(v62[0]);
LABEL_20:
  if (a3 >= 2)
  {
    if ((int)v7 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v7;
    }
    int v24 = v59;
    int v25 = v57;
    int v26 = a3 - 1;
    signed int v27 = v58;
    unsigned int v28 = v60;
    int32x4_t v29 = v56;
    do
    {
      int v31 = *v28++;
      int v30 = v31;
      int v32 = v24 + v31;
      int v33 = *v27++;
      int v34 = v33 - v25;
      *v29++ = -(v32 + v34);
      v56[v26--] = v34 - v32;
      int v25 = v33;
      int v24 = v30;
      --v7;
    }
    while (v7);
  }
  int v35 = 0;
  int v36 = 0;
  while (a3 >= 1)
  {
    uint64_t v37 = 0;
    unsigned int v38 = 0;
    do
    {
      int v39 = v56[v37];
      if (v39 < 0) {
        int v39 = -v39;
      }
      if (v39 > (int)v38)
      {
        unsigned int v38 = v39;
        int v35 = v37;
      }
      ++v37;
    }
    while (v6 != v37);
    if (v38 <= 0xFFFEF)
    {
      int v46 = v56;
      uint64_t v47 = v6;
      uint64_t v48 = a1;
      do
      {
        unsigned int v49 = *v46++;
        *v48++ = ((v49 >> 4) + 1) >> 1;
        --v47;
      }
      while (v47);
      break;
    }
    unsigned int v40 = ((v38 >> 4) + 1) >> 1;
    if (v40 >= 0x27FFE) {
      unsigned int v40 = 163838;
    }
    silk_bwexpander_32(v56, v6, 65470 - (int)((v40 << 14) - 536854528) / ((int)(v40 + v40 * v35) >> 2));
    if (++v36 == 10)
    {
      int v41 = v56;
      uint64_t v42 = v6;
      int v43 = a1;
      do
      {
        int v44 = ((*v41 >> 4) + 1) >> 1;
        if (*v41 < -1048592) {
          LOWORD(v44) = 0x8000;
        }
        if (*v41 <= 1048559) {
          __int16 v45 = v44;
        }
        else {
          __int16 v45 = 0x7FFF;
        }
        *v43++ = v45;
        *v41++ = 32 * v45;
        --v42;
      }
      while (v42);
      break;
    }
  }
  for (int i = 0; i != 16; ++i)
  {
    unint64_t result = silk_LPC_inverse_pred_gain(a1, a3);
    if ((int)result > 107373) {
      break;
    }
    unint64_t result = (unint64_t)silk_bwexpander_32(v56, a3, (-2 << i) + 0x10000);
    if (a3 >= 1)
    {
      int v52 = v56;
      uint64_t v53 = v6;
      int v54 = a1;
      do
      {
        unsigned int v55 = *v52++;
        *v54++ = ((v55 >> 4) + 1) >> 1;
        --v53;
      }
      while (v53);
    }
  }
  return result;
}

unsigned __int16 *silk_stereo_MS_to_LR(unsigned __int16 *result, _DWORD *a2, _DWORD *a3, int *a4, int a5, int a6)
{
  *a2 = *((_DWORD *)result + 1);
  *a3 = *((_DWORD *)result + 2);
  uint64_t v6 = 2 * a6;
  *((_DWORD *)result + 1) = *(_DWORD *)((char *)a2 + v6);
  *((_DWORD *)result + 2) = *(_DWORD *)((char *)a3 + v6);
  int v7 = 8 * a5;
  int v8 = *a4;
  int v9 = a4[1];
  if (a5 >= 1)
  {
    int v10 = *result;
    int v11 = result[1];
    int v12 = (__int16)(0x10000 / v7);
    int v13 = (((v12 * (__int16)(v8 - v10)) >> 15) + 1) >> 1;
    int v14 = (((v12 * (__int16)(v9 - v11)) >> 15) + 1) >> 1;
    if (v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v7;
    }
    uint64_t v16 = (__int16 *)(a2 + 1);
    uint64_t v17 = (__int16 *)a3 + 1;
    int v18 = (v14 + v11) << 16;
    int v19 = v14 << 16;
    int v20 = (v13 + v10) << 16;
    int v21 = v13 << 16;
    do
    {
      int v22 = *(v16 - 1);
      int v23 = (v22 << 10) + ((*v16 + *(v16 - 2)) << 9);
      int v24 = (v22 >> 5) * (v18 >> 16)
          + (*v17 << 8)
          + ((((v22 & 0x1F) << 11) * (v18 >> 16)) >> 16)
          + (v23 >> 16) * (v20 >> 16)
          + (((v23 & 0xFE00) * (v20 >> 16)) >> 16);
      if (v24 <= 8388479)
      {
        int v25 = ((v24 >> 7) + 1) >> 1;
        if (v25 <= -32768) {
          LOWORD(v25) = 0x8000;
        }
      }
      else
      {
        LOWORD(v25) = 0x7FFF;
      }
      ++v16;
      *v17++ = v25;
      v18 += v19;
      v20 += v21;
      --v15;
    }
    while (v15);
  }
  if (v7 < a6)
  {
    uint64_t v26 = 2 * v7 + 2;
    signed int v27 = (__int16 *)((char *)a3 + v26);
    unsigned int v28 = (__int16 *)((char *)a2 + v26);
    uint64_t v29 = a6 - (uint64_t)v7;
    int v30 = (__int16 *)((char *)a2 + v26);
    do
    {
      int v31 = v30[1];
      ++v30;
      int v32 = (*v28 >> 5) * (__int16)v9
          + (*v27 << 8)
          + ((((*v28 & 0x1F) << 11) * (__int16)v9) >> 16)
          + (((*v28 << 10) + ((v31 + *(v28 - 1)) << 9)) >> 16) * (__int16)v8
          + (((((*v28 << 10) + ((v31 + *(v28 - 1)) << 9)) & 0xFE00) * (__int16)v8) >> 16);
      if (v32 <= 8388479)
      {
        int v33 = ((v32 >> 7) + 1) >> 1;
        if (v33 <= -32768) {
          LOWORD(v33) = 0x8000;
        }
      }
      else
      {
        LOWORD(v33) = 0x7FFF;
      }
      *v27++ = v33;
      unsigned int v28 = v30;
      --v29;
    }
    while (v29);
  }
  *unint64_t result = v8;
  result[1] = v9;
  if (a6 >= 1)
  {
    int v34 = (__int16 *)a3 + 1;
    int v35 = (__int16 *)a2 + 1;
    uint64_t v36 = a6;
    do
    {
      int v37 = *v35;
      int v38 = *v34;
      int v39 = v37 + v38;
      if (v37 + v38 >= 0x7FFF) {
        int v39 = 0x7FFF;
      }
      if (v39 <= -32768) {
        LOWORD(v39) = 0x8000;
      }
      *v35++ = v39;
      int v40 = v37 - v38;
      if (v40 >= 0x7FFF) {
        int v40 = 0x7FFF;
      }
      if (v40 <= -32768) {
        LOWORD(v40) = 0x8000;
      }
      *v34++ = v40;
      --v36;
    }
    while (v36);
  }
  return result;
}

uint64_t silk_VAD_Init(uint64_t a1)
{
  uint64_t v1 = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 92) = xmmword_220774A70;
  do
  {
    uint64_t v2 = a1 + v1;
    int v3 = 100 * *(_DWORD *)(a1 + v1 + 92);
    *(_DWORD *)(v2 + 60) = v3;
    *(_DWORD *)(v2 + 76) = 0x7FFFFFFF / v3;
    v1 += 4;
  }
  while (v1 != 16);
  *(_DWORD *)(a1 + 108) = 15;
  memset_pattern16((void *)(a1 + 40), &unk_220774A90, 0x10uLL);
  return 0;
}

uint64_t silk_VAD_GetSA_Q8(uint64_t a1, __int16 *a2)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  int v4 = (int32x2_t *)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 4608);
  int v97 = v5 >> 2;
  v98[0] = 0;
  int v6 = v5 >> 3;
  int v7 = (v5 >> 3) + (v5 >> 2);
  int v8 = v7 + (v5 >> 3);
  int v9 = v8 + (v5 >> 2);
  v98[1] = v7;
  v98[2] = v8;
  v98[3] = v9;
  size_t v10 = 2 * (v9 + (v5 >> 1));
  int v11 = (_WORD *)((char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v11, v10);
  silk_ana_filt_bank_1(a2, v4, v11, &v11[v9], v5);
  silk_ana_filt_bank_1(v11, (int32x2_t *)(a1 + 40), v11, &v11[v8], v5 >> 1);
  silk_ana_filt_bank_1(v11, (int32x2_t *)(a1 + 48), v11, &v11[v7], v97);
  int v12 = (__int16)v11[(v5 >> 3) - 1] >> 1;
  v11[(v5 >> 3) - 1] = (__int16)v11[(v5 >> 3) - 1] >> 1;
  if (v5 >= 16)
  {
    int v13 = &v11[v6 - 1];
    int v14 = &v11[v6 - 2];
    do
    {
      int v15 = *v14;
      *v14-- >>= 1;
      *v13-- -= v15 >> 1;
      --v6;
    }
    while (v6 > 1);
  }
  uint64_t v16 = 0;
  *v11 -= *(_WORD *)(a1 + 88);
  *(_WORD *)(a1 + 88) = v12;
  do
  {
    int v17 = 0;
    unsigned int v18 = 0;
    char v19 = 4 - v16;
    if (4 - (int)v16 >= 3) {
      char v19 = 3;
    }
    int v20 = *(int *)(a1 + 4608) >> v19;
    unsigned int v21 = v20 >> 2;
    uint64_t v22 = a1 + 4 * v16;
    int v25 = *(_DWORD *)(v22 + 56);
    int v24 = (unsigned int *)(v22 + 56);
    int v23 = v25;
    if (v20 >> 2 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v21;
    }
    do
    {
      if (v20 < 4)
      {
        unsigned int v27 = 0;
      }
      else
      {
        unsigned int v27 = 0;
        int v28 = v98[v16] + v17;
        uint64_t v29 = v26;
        do
        {
          int v30 = (__int16)v11[v28] >> 3;
          v27 += v30 * v30;
          ++v28;
          --v29;
        }
        while (v29);
      }
      unsigned int v31 = v27 >> (v18 > 2);
      BOOL v32 = __OFADD__(v23, v31);
      v23 += v31;
      if (v23 < 0 != v32) {
        int v23 = 0x7FFFFFFF;
      }
      ++v18;
      v17 += v21;
    }
    while (v18 != 4);
    v99.i32[v16] = v23;
    *int v24 = v27;
    ++v16;
  }
  while (v16 != 4);
  int v33 = *(_DWORD *)(a1 + 140);
  if (v33 > 999) {
    unsigned int v34 = 0;
  }
  else {
    unsigned int v34 = 0x7FFF / ((v33 >> 4) + 1);
  }
  uint64_t v35 = 0;
  int v36 = 0;
  unsigned int v37 = 0;
  int32x4_t v38 = *(int32x4_t *)(a1 + 92);
  int32x4_t v39 = *(int32x4_t *)(a1 + 108);
  int8x16_t v40 = (int8x16_t)vaddq_s32(*(int32x4_t *)(a1 + 124), v99);
  v41.i64[0] = -1;
  v41.i64[1] = -1;
  int8x16_t v42 = (int8x16_t)vcgtq_s32((int32x4_t)v40, v41);
  int8x16_t v43 = vorrq_s8(vandq_s8(v40, v42), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v42) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
  int8x16_t v44 = (int8x16_t)vcgtq_s32((int32x4_t)v43, vshlq_n_s32(v38, 3uLL));
  int8x16_t v45 = (int8x16_t)vcgtq_s32(v38, (int32x4_t)v43);
  v43.i32[0] = 0x7FFFFFFF / v43.i32[0];
  v43.i32[1] = 0x7FFFFFFF / v43.i32[1];
  v43.i32[2] = 0x7FFFFFFF / v43.i32[2];
  v43.i32[3] = 0x7FFFFFFF / v43.i32[3];
  int8x16_t v46 = (int8x16_t)vshrq_n_s32(vshlq_n_s32(v38, 0x10uLL), 0x10uLL);
  v47.i64[0] = 0xFFFF0000FFFFLL;
  v47.i64[1] = 0xFFFF0000FFFFLL;
  v48.i64[0] = 0x100000001;
  v48.i64[1] = 0x100000001;
  int32x4_t v49 = vsraq_n_s32(vmlaq_s32(vmulq_s32((int32x4_t)v43, vhaddq_s32(vshrq_n_s32(v38, 0xFuLL), v48)), vshrq_n_s32((int32x4_t)v43, 0x10uLL), (int32x4_t)v46), vmulq_s32((int32x4_t)vandq_s8(v43, v47), (int32x4_t)v46), 0x10uLL);
  v46.i64[0] = 0x700000007;
  v46.i64[1] = 0x700000007;
  v50.i64[0] = 0x40000000400;
  v50.i64[1] = 0x40000000400;
  int8x16_t v51 = vbslq_s8(v45, v50, vbslq_s8(v46, (int8x16_t)vshrq_n_s32(v49, 5uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v49, 5uLL)));
  v45.i64[0] = 0x8000000080;
  v45.i64[1] = 0x8000000080;
  int32x4_t v52 = vmaxq_s32((int32x4_t)vbslq_s8(v44, v45, v51), vdupq_n_s32(v34));
  int8x16_t v53 = (int8x16_t)vsubq_s32((int32x4_t)v43, v39);
  int32x4_t v54 = vshrq_n_s32(vshlq_n_s32(v52, 0x10uLL), 0x10uLL);
  int32x4_t v55 = vsraq_n_s32(vmlaq_s32(v39, vshrq_n_s32((int32x4_t)v53, 0x10uLL), v54), vmulq_s32((int32x4_t)vandq_s8(v53, v47), v54), 0x10uLL);
  v54.i32[0] = 0x7FFFFFFF / v55.i32[0];
  v54.i32[1] = 0x7FFFFFFF / v55.i32[1];
  v54.i32[2] = 0x7FFFFFFF / v55.i32[2];
  v54.i32[3] = 0x7FFFFFFF / v55.i32[3];
  v53.i64[0] = 0xFFFFFF00FFFFFFLL;
  v53.i64[1] = 0xFFFFFF00FFFFFFLL;
  int v56 = *(_DWORD *)(a1 + 140) + 1;
  *(int32x4_t *)(a1 + 92) = vminq_s32(v54, (int32x4_t)v53);
  *(int32x4_t *)(a1 + 108) = v55;
  *(_DWORD *)(a1 + 140) = v56;
  do
  {
    __int32 v57 = v99.i32[v35];
    int v58 = *(_DWORD *)(a1 + 92 + v35 * 4);
    unsigned int v59 = v57 - v58;
    if (v57 - v58 < 1)
    {
      v98[v35 + 4] = 256;
    }
    else
    {
      if (v57 < 0x800000) {
        v57 <<= 8;
      }
      else {
        v58 >>= 8;
      }
      unsigned int v60 = v57 / (v58 + 1);
      v98[v35 + 4] = v60;
      int v61 = (__int16)(silk_lin2log(v60) - 1024);
      int v62 = v61;
      if (!(v59 >> 20))
      {
        unsigned int v63 = __clz(v59);
        unsigned int v64 = v59 >> (24 - v63);
        LOBYTE(v65) = v59;
        unsigned int v66 = v59 << (v63 - 24);
        if (v63 != 24)
        {
          int v65 = (v59 << (v63 + 8)) | v64;
          if (v59 <= 0x7F) {
            LOBYTE(v65) = (v59 >> (56 - v63)) | v66;
          }
        }
        int v67 = v65 & 0x7F;
        if (v63) {
          unsigned int v68 = 0x8000;
        }
        else {
          unsigned int v68 = 46214;
        }
        unsigned int v69 = v68 >> (v63 >> 1);
        unsigned int v70 = ((v69 + ((213 * v69 * v67) >> 16)) >> 10) * v61;
        int v71 = (v59 << (v63 + 8)) | v64;
        int v72 = (v59 >> (56 - v63)) | v66;
        if (v59 > 0x7F) {
          LOBYTE(v72) = v71;
        }
        if (v63 == 24) {
          char v73 = v59;
        }
        else {
          char v73 = v72;
        }
        int v62 = (int)(((((_WORD)v69 + ((213 * v69 * (v73 & 0x7F)) >> 16)) & 0x3FF) << 6) * v61 + (v70 << 16)) >> 16;
      }
      v36 += v61 * v61;
      v37 += (tiltWeights[v35] >> 16) * v62 + (((unsigned __int16)tiltWeights[v35] * v62) >> 16);
    }
    ++v35;
  }
  while (v35 != 4);
  int v74 = v36 + 3;
  if (v36 >= 0) {
    int v74 = v36;
  }
  if (v36 >= 4)
  {
    unsigned int v76 = v74 >> 2;
    unsigned int v77 = __clz(v74 >> 2);
    if (v77 != 24)
    {
      if (v76 <= 0x7F) {
        LOBYTE(v76) = (v76 >> (56 - v77)) | ((_BYTE)v76 << (v77 - 24));
      }
      else {
        LOBYTE(v76) = ((_BYTE)v76 << (v77 + 8)) | (v76 >> (24 - v77));
      }
    }
    int v78 = v76 & 0x7F;
    if (v77) {
      unsigned int v79 = 0x8000;
    }
    else {
      unsigned int v79 = 46214;
    }
    unsigned int v75 = ((45000 * (__int16)(3 * ((v79 >> (v77 >> 1)) + ((213 * (v79 >> (v77 >> 1)) * v78) >> 16)))) >> 16) - 128;
  }
  else
  {
    unsigned int v75 = -128;
  }
  int v80 = silk_sigm_Q15(v75);
  *(_DWORD *)(a1 + 4760) = 2 * silk_sigm_Q15(v37) - 0x8000;
  int v81 = vaddvq_s32(vmulq_s32(vshrq_n_s32(vsubq_s32(v99, *(int32x4_t *)(a1 + 92)), 4uLL), (int32x4_t)xmmword_220774A80));
  int v82 = *(_DWORD *)(a1 + 4608);
  if (v81 <= 0)
  {
    v80 >>= 1;
  }
  else if (!(v81 >> 15))
  {
    if (v82 == 10 * *(_DWORD *)(a1 + 4600)) {
      char v83 = 16;
    }
    else {
      char v83 = 15;
    }
    unsigned int v84 = v81 << v83;
    unsigned int v85 = __clz(v84);
    int v86 = __ROR4__(v84, 24 - v85) & 0x7F;
    if (v85) {
      unsigned int v87 = 0x8000;
    }
    else {
      unsigned int v87 = 46214;
    }
    unsigned int v88 = (v87 >> (v85 >> 1)) + ((213 * (v87 >> (v85 >> 1)) * v86) >> 16) + 0x8000;
    int v80 = HIWORD(v88) * (__int16)v80 + (((unsigned __int16)v88 * (__int16)v80) >> 16);
  }
  unint64_t v89 = 0;
  int v90 = v80 >> 7;
  if (v80 >> 7 >= 255) {
    int v90 = 255;
  }
  *(_DWORD *)(a1 + 4556) = v90;
  if (v82 == 10 * *(_DWORD *)(a1 + 4600)) {
    char v91 = 21;
  }
  else {
    char v91 = 20;
  }
  int v92 = (int)((__int16)v80 * (unsigned __int16)v80 + ((v80 * HIWORD(v80)) << 16)) >> v91;
  do
  {
    unsigned int v93 = *(_DWORD *)(a1 + v89 + 72)
        + ((v98[v89 / 4 + 4] - *(_DWORD *)(a1 + v89 + 72)) >> 16) * v92
        + (((unsigned __int16)(LOWORD(v98[v89 / 4 + 4]) - *(_DWORD *)(a1 + v89 + 72)) * v92) >> 16);
    *(_DWORD *)(a1 + v89 + 72) = v93;
    int v94 = silk_lin2log(v93);
    *(_DWORD *)(a1 + v89 + 4744) = silk_sigm_Q15((3 * v94 - 5120) >> 4);
    v89 += 4;
  }
  while (v89 != 16);
  return 0;
}

uint64_t silk_decode_pitch(uint64_t result, int a2, int *a3, int a4, int a5)
{
  uint64_t v5 = 3;
  if (a5 == 4) {
    uint64_t v5 = 11;
  }
  int v6 = (char *)&silk_CB_lags_stage2_10_ms;
  if (a5 == 4) {
    int v6 = (char *)&silk_CB_lags_stage2;
  }
  uint64_t v7 = 12;
  if (a5 == 4)
  {
    uint64_t v7 = 34;
    int v8 = &silk_CB_lags_stage3;
  }
  else
  {
    int v8 = (char *)&silk_CB_lags_stage3_10_ms;
  }
  if (a4 == 8)
  {
    int v9 = v6;
  }
  else
  {
    uint64_t v5 = v7;
    int v9 = v8;
  }
  if (a5 >= 1)
  {
    int v10 = 2 * (__int16)a4;
    int v11 = 18 * (__int16)a4;
    uint64_t v13 = a5;
    if (v10 <= v11) {
      int v14 = 18 * (__int16)a4;
    }
    else {
      int v14 = 2 * (__int16)a4;
    }
    if (v10 >= v11) {
      int v10 = 18 * (__int16)a4;
    }
    int v15 = &v9[a2];
    do
    {
      int v12 = result + 2 * (__int16)a4;
      int v16 = v12 + *v15;
      if (v16 <= v10) {
        int v17 = v10;
      }
      else {
        int v17 = v12 + *v15;
      }
      if (v16 <= v14) {
        int v18 = v17;
      }
      else {
        int v18 = v14;
      }
      *a3++ = v18;
      v15 += v5;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t silk_decoder_set_fs(uint64_t a1, int a2, unsigned int a3)
{
  int v6 = (__int16)a2;
  *(_DWORD *)(a1 + 2332) = 5 * (__int16)a2;
  int v7 = *(__int16 *)(a1 + 2324) * (__int16)(5 * a2);
  if (*(_DWORD *)(a1 + 2316) == a2 && *(_DWORD *)(a1 + 2320) == a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = silk_resampler_init(a1 + 2448, 1000 * (__int16)a2, a3, 0);
    char v9 = 0;
    *(_DWORD *)(a1 + 2320) = a3;
    if (*(_DWORD *)(a1 + 2316) != a2) {
      goto LABEL_7;
    }
  }
  if (v7 != *(_DWORD *)(a1 + 2328))
  {
    char v9 = 1;
LABEL_7:
    int v10 = *(_DWORD *)(a1 + 2324);
    BOOL v11 = v10 == 4;
    if (v10 == 4) {
      int v12 = &silk_pitch_contour_NB_iCDF;
    }
    else {
      int v12 = &silk_pitch_contour_10_ms_NB_iCDF;
    }
    uint64_t v13 = &silk_pitch_contour_10_ms_iCDF;
    if (v11) {
      uint64_t v13 = &silk_pitch_contour_iCDF;
    }
    if (a2 != 8) {
      int v12 = v13;
    }
    *(void *)(a1 + 2392) = v12;
    if (v9) {
      goto LABEL_26;
    }
    *(_DWORD *)(a1 + 2336) = 20 * v6;
    if ((a2 | 4) == 0xC)
    {
      int v14 = &silk_NLSF_CB_NB_MB;
      int v15 = 10;
    }
    else
    {
      int v14 = &silk_NLSF_CB_WB;
      int v15 = 16;
    }
    *(_DWORD *)(a1 + 2340) = v15;
    *(void *)(a1 + 2752) = v14;
    switch(a2)
    {
      case 16:
        int v16 = silk_uniform8_iCDF;
        break;
      case 12:
        int v16 = (unsigned __int8 *)&silk_uniform6_iCDF;
        break;
      case 8:
        int v16 = silk_uniform4_iCDF;
        break;
      default:
LABEL_25:
        *(_DWORD *)(a1 + 2376) = 1;
        *(_DWORD *)(a1 + 2308) = 100;
        *(unsigned char *)(a1 + 2312) = 10;
        *(_DWORD *)(a1 + 4188) = 0;
        bzero((void *)(a1 + 1348), 0x3C0uLL);
        *(_OWORD *)(a1 + 1316) = 0u;
        *(_OWORD *)(a1 + 1332) = 0u;
        *(_OWORD *)(a1 + 1284) = 0u;
        *(_OWORD *)(a1 + 1300) = 0u;
LABEL_26:
        *(_DWORD *)(a1 + 2316) = a2;
        *(_DWORD *)(a1 + 2328) = v7;
        return v8;
    }
    *(void *)(a1 + 2384) = v16;
    goto LABEL_25;
  }
  return v8;
}

uint64_t *silk_encode_pulses(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v66 = a3;
  uint64_t v68 = a2;
  uint64_t v72 = *MEMORY[0x263EF8340];
  memset(v71, 0, sizeof(v71));
  int v8 = a5 >> 4;
  if ((int)(a5 & 0xFFFFFFF0) < a5)
  {
    ++v8;
    char v9 = (void *)(a4 + a5);
    *char v9 = 0;
    v9[1] = 0;
  }
  uint64_t v10 = 16 * v8;
  BOOL v11 = (char *)&v64 - 4 * v10;
  bzero(v11, 4 * v10);
  if (v8 >= 1)
  {
    uint64_t v13 = 0;
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    int v15 = (int8x16_t *)((char *)&v64 - 4 * v10);
    do
    {
      v12.i32[0] = *(_DWORD *)(a4 + v13);
      int8x16_t v12 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vabs_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v12.i8))), v14);
      *v15++ = v12;
      v13 += 4;
    }
    while (v13 < v10);
  }
  int v65 = a5;
  unint64_t v16 = (4 * v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  bzero((char *)&v64 - v16, 4 * v8);
  int v17 = (char *)&v64 - v16;
  bzero((char *)&v64 - v16, 4 * v8);
  if (v8 >= 1)
  {
    uint64_t v18 = 0;
    char v19 = v11 + 4;
    int v20 = v11;
    do
    {
      int v21 = 0;
      *(_DWORD *)&v17[4 * v18] = 0;
      while (1)
      {
        uint64_t v22 = 0;
        int v23 = v19;
        while (1)
        {
          int v24 = *(_DWORD *)v23 + *((_DWORD *)v23 - 1);
          if (v24 > silk_max_pulses_table) {
            break;
          }
          v23 += 8;
          *(_DWORD *)((char *)v71 + v22) = v24;
          v22 += 4;
          if (v22 == 32)
          {
            int v25 = 0;
            goto LABEL_14;
          }
        }
        int v25 = 1;
LABEL_14:
        uint64_t v26 = 0;
        unsigned int v27 = (int *)v71;
        while (1)
        {
          int v28 = *(_DWORD *)((char *)v71 + v26 + 4) + *(_DWORD *)((char *)v71 + v26);
          if (v28 > 10) {
            break;
          }
          *v27++ = v28;
          v26 += 8;
          if (v26 == 32)
          {
            int v29 = 0;
            goto LABEL_19;
          }
        }
        int v29 = 1;
LABEL_19:
        uint64_t v30 = 0;
        int v31 = v29 + v25;
        BOOL v32 = (int *)v71;
        while (1)
        {
          int v33 = *(_DWORD *)((char *)v71 + v30 + 4) + *(_DWORD *)((char *)v71 + v30);
          if (v33 > 12) {
            break;
          }
          *v32++ = v33;
          v30 += 8;
          if (v30 == 16)
          {
            int v34 = 0;
            goto LABEL_24;
          }
        }
        int v34 = -1;
LABEL_24:
        if (DWORD1(v71[0]) + LODWORD(v71[0]) <= 16)
        {
          *(_DWORD *)((char *)&v64 + 4 * v18 - v16) = DWORD1(v71[0]) + LODWORD(v71[0]);
          if (v31 == v34) {
            break;
          }
        }
        uint64_t v35 = 0;
        *(_DWORD *)&v17[4 * v18] = ++v21;
        do
        {
          *(int32x4_t *)&v20[v35] = vshrq_n_s32(*(int32x4_t *)&v20[v35], 1uLL);
          v35 += 16;
        }
        while (v35 != 64);
      }
      v20 += 64;
      ++v18;
      v19 += 64;
    }
    while (v18 != v8);
  }
  uint64_t v69 = a4;
  uint64_t v36 = 0;
  int v37 = 0;
  uint64_t v38 = (uint64_t)(int)v68 >> 1;
  int v39 = 0x7FFFFFFF;
  uint64_t v40 = v8;
  do
  {
    int v41 = silk_rate_levels_BITS_Q5[9 * v38 + v36];
    if (v8 >= 1)
    {
      int8x16_t v42 = (char *)&silk_pulses_per_block_BITS_Q5 + 18 * v36;
      uint64_t v43 = v8;
      int8x16_t v44 = (int *)((char *)&v64 - v16);
      int8x16_t v45 = (int *)((char *)&v64 - v16);
      do
      {
        int v46 = *v44++;
        int8x16_t v47 = v42 + 17;
        if (v46 <= 0) {
          int8x16_t v47 = &v42[*v45];
        }
        v41 += *v47;
        ++v45;
        --v43;
      }
      while (v43);
    }
    if (v41 < v39)
    {
      int v37 = v36;
      int v39 = v41;
    }
    ++v36;
  }
  while (v36 != 9);
  int v67 = (int *)((char *)&v64 - v16);
  ec_enc_icdf(a1, v37, (uint64_t)&silk_rate_levels_iCDF[9 * v38], 8);
  if (v8 >= 1)
  {
    uint64_t v48 = 0;
    int32x4_t v49 = (char *)&silk_pulses_per_block_iCDF + 18 * v37;
    int8x16_t v50 = v67;
    do
    {
      int v51 = *(_DWORD *)&v17[4 * v48];
      int32x4_t v52 = v49;
      if (v51)
      {
        ec_enc_icdf(a1, 17, (uint64_t)v49, 8);
        if (v51 < 2)
        {
          int32x4_t v52 = &unk_2207737C8;
        }
        else
        {
          int v53 = v51 - 1;
          do
          {
            int32x4_t v52 = &unk_2207737C8;
            ec_enc_icdf(a1, 17, (uint64_t)&unk_2207737C8, 8);
            --v53;
          }
          while (v53);
        }
      }
      ec_enc_icdf(a1, v50[v48++], (uint64_t)v52, 8);
    }
    while (v48 != v40);
    uint64_t v54 = v40;
    do
    {
      int v55 = *v50++;
      if (v55 >= 1) {
        silk_shell_encoder(a1, (int *)v11);
      }
      v11 += 64;
      --v54;
    }
    while (v54);
    uint64_t v56 = 0;
    uint64_t v70 = v40;
    do
    {
      int v57 = *(_DWORD *)&v17[4 * v56];
      if (v57 >= 1)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v69 + 16 * v56;
        do
        {
          int v60 = *(char *)(v59 + v58);
          if (v60 < 0) {
            int v60 = -v60;
          }
          unsigned int v61 = (char)v60;
          if (v57 != 1)
          {
            int v62 = v57 + 1;
            do
              ec_enc_icdf(a1, (v61 >> (v62-- - 2)) & 1, (uint64_t)silk_lsb_iCDF, 8);
            while (v62 > 2);
          }
          ec_enc_icdf(a1, v61 & 1, (uint64_t)silk_lsb_iCDF, 8);
          ++v58;
        }
        while (v58 != 16);
      }
      ++v56;
    }
    while (v56 != v70);
  }
  return silk_encode_signs(a1, v69, v65, v68, v66, (uint64_t)v67);
}

unint64_t silk_inner_prod_aligned_scale(unint64_t result, __int16 *a2, char a3, int a4)
{
  if (a4 < 1) {
    return 0;
  }
  int v4 = (__int16 *)result;
  LODWORD(result) = 0;
  uint64_t v5 = a4;
  do
  {
    int v7 = *v4++;
    int v6 = v7;
    int v8 = *a2++;
    unint64_t result = (((v8 * v6) >> a3) + result);
    --v5;
  }
  while (v5);
  return result;
}

uint64_t silk_init_decoder(_DWORD *a1)
{
  a1[594] = 1;
  *a1 = 0x10000;
  silk_CNG_Reset((uint64_t)a1);
  silk_PLC_Reset((uint64_t)a1);
  return 0;
}

unsigned int *silk_sum_sqr_shift(unsigned int *result, int *a2, uint64_t a3, int a4)
{
  int v4 = a4 - 1;
  if (a4 < 2)
  {
    LODWORD(v5) = 0;
    int v7 = 0;
    unsigned int v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    while (1)
    {
      v6 += *(__int16 *)(a3 + 2 * v5) * *(__int16 *)(a3 + 2 * v5)
          + *(__int16 *)(a3 + 2 * v5 + 2) * *(__int16 *)(a3 + 2 * v5 + 2);
      if ((v6 & 0x80000000) != 0) {
        break;
      }
      v5 += 2;
      if (v4 <= (int)v5)
      {
        int v7 = 0;
        goto LABEL_8;
      }
    }
    v6 >>= 2;
    int v7 = 2;
  }
LABEL_8:
  if ((int)v5 < v4)
  {
    uint64_t v8 = 0;
    int v9 = v5;
    uint64_t v10 = a3 + 2 * v5;
    do
    {
      int v11 = *(__int16 *)(a3 + 2 * ((v9 + v8) & 0xFFFFFFFE) + 2);
      v6 += (*(__int16 *)(v10 + 2 * v8) * *(__int16 *)(v10 + 2 * v8) + v11 * v11) >> v7;
      if ((v6 & 0x80000000) != 0)
      {
        v7 += 2;
        v6 >>= 2;
      }
      v8 += 2;
    }
    while (v4 > v9 + (int)v8);
    LODWORD(v5) = v9 + v8;
  }
  if (v5 == v4)
  {
    int v12 = *(__int16 *)(a3 + 2 * v4);
    v6 += (v12 * v12) >> v7;
  }
  unsigned int v13 = v6 >> 2;
  if (v6 >> 30) {
    v7 += 2;
  }
  else {
    unsigned int v13 = v6;
  }
  *a2 = v7;
  *unint64_t result = v13;
  return result;
}

uint64_t silk_pitch_analysis_core(__int16 *a1, void *a2, _WORD *a3, unsigned char *a4, __int16 *a5, signed int a6, int a7, int a8, int a9, int a10, unsigned int a11)
{
  int v254 = a8;
  int v255 = a7;
  v256 = a5;
  v249 = a4;
  v248 = a3;
  v250 = a2;
  int v13 = a9;
  uint64_t v269 = *MEMORY[0x263EF8340];
  v265[0] = 0;
  unsigned int v264 = 0;
  uint64_t v260 = a11;
  int v14 = 5 * a11 + 20;
  int v15 = 4 * v14;
  uint64_t v16 = (8 * v14);
  uint64_t v17 = (v14 * a9);
  uint64_t v18 = (__int16 *)&v241 - (int)v16;
  bzero(v18, 2 * (int)v16);
  v246 = a1;
  uint64_t v245 = v17;
  if (a9 == 16)
  {
    v267.n128_u64[0] = 0;
    silk_resampler_down2((int *)&v267, (__int16 *)&v241 - (int)v16, (uint64_t)a1, v17);
  }
  else if (a9 == 12)
  {
    __n128 v267 = 0uLL;
    uint64_t v268 = 0;
    silk_resampler_down2_3(&v267, (__int16 *)&v241 - (int)v16, a1, v17);
  }
  else
  {
    memcpy((char *)&v241 - 2 * (int)v16, a1, 2 * (int)v16);
  }
  v267.n128_u64[0] = 0;
  size_t v19 = 2 * v15;
  int v20 = (__int16 *)((char *)&v241 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v20, v19);
  silk_resampler_down2((int *)&v267, v20, (uint64_t)&v241 - 2 * (int)v16, v16);
  if ((int)v260 >= -3)
  {
    int v21 = (char *)&v20[(20 * v260 + 76) + 3];
    int v22 = 20 * v260 + 81;
    int v23 = v21;
    do
    {
      int v24 = *((__int16 *)v23 - 1);
      v23 -= 2;
      int v25 = *(__int16 *)v21 + v24;
      if (v25 >= 0x7FFF) {
        int v25 = 0x7FFF;
      }
      if (v25 <= -32768) {
        LOWORD(v25) = 0x8000;
      }
      *(_WORD *)int v21 = v25;
      --v22;
      int v21 = v23;
    }
    while (v22 > 2);
  }
  silk_sum_sqr_shift(v265, (int *)&v264, (uint64_t)v20, v15);
  int v26 = v260;
  if ((int)v264 >= 1)
  {
    unsigned int v27 = v264 >> 1;
    v264 >>= 1;
    if ((int)v260 >= -3)
    {
      if (v15 <= 1) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v15;
      }
      int v29 = v20;
      do
      {
        *v29++ >>= v27;
        --v28;
      }
      while (v28);
    }
  }
  int v30 = a10;
  size_t v31 = 264 * v26;
  BOOL v32 = (__int16 *)((char *)&v241 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  size_t v257 = v31;
  bzero(v32, v31);
  *(&v241 - 4) = 0;
  *((_OWORD *)&v241 - 3) = 0u;
  *((_OWORD *)&v241 - 2) = 0u;
  *((_OWORD *)&v241 - 5) = 0u;
  *((_OWORD *)&v241 - 4) = 0u;
  *((_OWORD *)&v241 - 7) = 0u;
  *((_OWORD *)&v241 - 6) = 0u;
  *((_OWORD *)&v241 - 9) = 0u;
  *((_OWORD *)&v241 - 8) = 0u;
  *((_OWORD *)&v241 - 11) = 0u;
  *((_OWORD *)&v241 - 10) = 0u;
  *((_OWORD *)&v241 - 13) = 0u;
  *((_OWORD *)&v241 - 12) = 0u;
  int v33 = (int)v260 >> 1;
  *((_OWORD *)&v241 - 15) = 0u;
  *((_OWORD *)&v241 - 14) = 0u;
  *((_OWORD *)&v241 - 16) = 0u;
  size_t v34 = 2 * ((v33 << 6) + ((int)v260 >> 1));
  *((_OWORD *)&v241 - 17) = 0u;
  bzero(v32, v34);
  int v251 = v13;
  int v247 = a10;
  if ((int)v260 <= 1) {
    goto LABEL_63;
  }
  uint64_t v252 = v16;
  v253 = (char *)&v241 - 2 * (int)v16;
  LODWORD(v258) = a6;
  uint64_t v35 = 0;
  uint64_t v36 = v20 + 80;
  uint64_t v37 = v33 <= 1 ? 1 : v33;
  uint64_t v259 = v37;
  uint64_t v38 = (char *)(v20 + 111);
  int v39 = 1;
  do
  {
    LODWORD(v261) = v39;
    uint64_t v262 = (uint64_t)v38;
    uint64_t v263 = v35;
    celt_pitch_xcorr_c(v36, (uint64_t)(v36 - 72), (uint64_t)(&v241 - 68), 40, 65);
    int v40 = *(&v241 - 4);
    int v41 = silk_inner_prod_aligned((unint64_t)v36, v36, 40);
    int v42 = silk_inner_prod_aligned((unint64_t)(v36 - 8), v36 - 8, 40);
    int v43 = (int)v261;
    int8x16_t v44 = (__int16 *)v262;
    uint64_t v45 = v263;
    int v46 = v41 + v42 + 160000;
    if (v40 >= 0) {
      unsigned int v47 = v40;
    }
    else {
      unsigned int v47 = -v40;
    }
    unsigned int v48 = __clz(v47);
    unsigned int v49 = -160000 - (v41 + v42);
    if (v46 >= 0) {
      unsigned int v49 = v41 + v42 + 160000;
    }
    unsigned int v50 = __clz(v49);
    int v51 = v46 << (v50 - 1);
    int v52 = 0x1FFFFFFF / (v51 >> 16);
    int v53 = v52 * (v40 << (v48 - 1) >> 16) + ((v52 * (unsigned __int16)(v40 << (v48 - 1))) >> 16);
    int v54 = (v40 << (v48 - 1)) - (((unint64_t)(v53 * (uint64_t)v51) >> 29) & 0xFFFFFFF8);
    int v55 = v53 + (v54 >> 16) * v52 + (((unsigned __int16)v54 * v52) >> 16);
    int v56 = v48 - v50;
    if ((v56 + 29) >= 0x2E) {
      __int16 v57 = 0;
    }
    else {
      __int16 v57 = v55 >> (v56 + 15);
    }
    int v58 = (int)0x80000000 >> (-15 - v56);
    if (v55 > v58) {
      int v58 = v55;
    }
    if (v55 <= (int)(0x7FFFFFFFu >> (-15 - v56))) {
      unsigned int v59 = v58;
    }
    else {
      unsigned int v59 = 0x7FFFFFFFu >> (-15 - v56);
    }
    unsigned int v60 = v59 << (-15 - v56);
    if (v56 <= -16) {
      __int16 v61 = v60;
    }
    else {
      __int16 v61 = v57;
    }
    v32[(65 * v263)] = v61;
    int v62 = v44;
    int v63 = v43;
    uint64_t v64 = 252;
    do
    {
      int v65 = *(int *)((char *)&v241 + v64 - 272);
      v46 += (*v62 + *(v62 - 40)) * (*(v62 - 40) - *v62);
      if (v65 >= 0) {
        unsigned int v66 = *(int *)((char *)&v241 + v64 - 272);
      }
      else {
        unsigned int v66 = -v65;
      }
      unsigned int v67 = __clz(v66);
      if (v46 >= 0) {
        unsigned int v68 = v46;
      }
      else {
        unsigned int v68 = -v46;
      }
      int v69 = v65 << (v67 - 1);
      unsigned int v70 = __clz(v68);
      int v71 = v46 << (v70 - 1);
      int v72 = 0x1FFFFFFF / (v71 >> 16);
      int v73 = v72 * (v69 >> 16) + ((v72 * (unsigned __int16)v69) >> 16);
      int v74 = v69 - (((unint64_t)(v71 * (uint64_t)v73) >> 29) & 0xFFFFFFF8);
      int v75 = v73 + (v74 >> 16) * v72 + (((unsigned __int16)v74 * v72) >> 16);
      int v76 = v67 - v70;
      v64 -= 4;
      --v62;
      int v77 = v75 >> (v76 + 15);
      char v78 = -15 - v76;
      int v79 = (int)0x80000000 >> (-15 - v76);
      if ((v76 + 29) >= 0x2E) {
        LOWORD(v77) = 0;
      }
      if (v75 > v79) {
        int v79 = v75;
      }
      if (v75 <= (int)(0x7FFFFFFFu >> v78)) {
        unsigned int v80 = v79;
      }
      else {
        unsigned int v80 = 0x7FFFFFFFu >> v78;
      }
      unsigned int v81 = v80 << v78;
      if (v76 > -16) {
        LOWORD(v81) = v77;
      }
      v32[v63++] = v81;
    }
    while (v64 != -4);
    v36 += 40;
    uint64_t v35 = v45 + 1;
    int v39 = v43 + 65;
    uint64_t v38 = (char *)(v44 + 40);
  }
  while (v35 != v259);
  BOOL v82 = v260 == 4;
  int v13 = v251;
  int v30 = v247;
  a6 = (int)v258;
  uint64_t v18 = (__int16 *)v253;
  LODWORD(v16) = v252;
  if (v260 == 4)
  {
    uint64_t v83 = 0;
    int v84 = -75497472;
    do
    {
      unsigned int v85 = &v32[v83];
      int v86 = v85[129] + v85[64];
      v85[64] = v86
              + HIWORD(v86) * HIWORD(v84)
              + (((unsigned __int16)(v85[129] + v85[64]) * (v84 >> 16)) >> 16);
      v84 += 0x100000;
      unint64_t v87 = v83 + 72;
      --v83;
    }
    while (v87 > 8);
  }
  else
  {
LABEL_63:
    uint64_t v88 = 64;
    int v89 = -75497472;
    do
    {
      v32[v88] = (v32[v88] >> 15) * HIWORD(v89)
               + 2 * v32[v88]
               + ((2 * (v32[v88] & 0x7FFFu) * (v89 >> 16)) >> 16);
      v89 += 0x100000;
      unint64_t v90 = v88 + 8;
      --v88;
    }
    while (v90 > 8);
    BOOL v82 = 0;
  }
  uint64_t v91 = (2 * v30 + 4);
  silk_insertion_sort_decreasing_int16((uint64_t)v32, (uint64_t)v266, 65, 2 * v30 + 4);
  int v92 = *v32;
  if (v92 <= 3276)
  {
    size_t v93 = 4 * (int)v260;
LABEL_176:
    bzero(v250, v93);
    LOBYTE(v178) = 0;
    *(_DWORD *)v256 = 0;
    _WORD *v248 = 0;
    uint64_t result = 1;
    goto LABEL_177;
  }
  unsigned int v242 = 5 * v13;
  LODWORD(v263) = 18 * v13;
  if (2 * v30 <= -4)
  {
    uint64_t v96 = &v241 - 68;
    LOWORD(v97) = 0;
    *(_OWORD *)(&v241 - 5) = 0u;
    *((_OWORD *)&v241 - 3) = 0u;
    *((_OWORD *)&v241 - 2) = 0u;
    *((_OWORD *)&v241 - 5) = 0u;
    *((_OWORD *)&v241 - 4) = 0u;
    *((_OWORD *)&v241 - 7) = 0u;
    *((_OWORD *)&v241 - 6) = 0u;
    *((_OWORD *)&v241 - 9) = 0u;
    *((_OWORD *)&v241 - 8) = 0u;
    *((_OWORD *)&v241 - 11) = 0u;
    *((_OWORD *)&v241 - 10) = 0u;
    *((_OWORD *)&v241 - 13) = 0u;
    *((_OWORD *)&v241 - 12) = 0u;
    *((_OWORD *)&v241 - 15) = 0u;
    *((_OWORD *)&v241 - 14) = 0u;
    *((_OWORD *)&v241 - 16) = 0u;
    *((_OWORD *)&v241 - 17) = 0u;
  }
  else
  {
    uint64_t v94 = 0;
    signed int v95 = (v255 >> 16) * (unsigned __int16)v92 + (((unsigned __int16)v255 * (unsigned __int16)v92) >> 16);
    while (v95 < v32[v94])
    {
      v266[v94] = 2 * v266[v94] + 16;
      if (v91 == ++v94) {
        goto LABEL_75;
      }
    }
    LODWORD(v91) = v94;
LABEL_75:
    uint64_t v96 = &v241 - 68;
    *(_OWORD *)(&v241 - 5) = 0u;
    *((_OWORD *)&v241 - 3) = 0u;
    *((_OWORD *)&v241 - 2) = 0u;
    *((_OWORD *)&v241 - 5) = 0u;
    *((_OWORD *)&v241 - 4) = 0u;
    *((_OWORD *)&v241 - 7) = 0u;
    *((_OWORD *)&v241 - 6) = 0u;
    *((_OWORD *)&v241 - 9) = 0u;
    *((_OWORD *)&v241 - 8) = 0u;
    *((_OWORD *)&v241 - 11) = 0u;
    *((_OWORD *)&v241 - 10) = 0u;
    *((_OWORD *)&v241 - 13) = 0u;
    *((_OWORD *)&v241 - 12) = 0u;
    *((_OWORD *)&v241 - 15) = 0u;
    *((_OWORD *)&v241 - 14) = 0u;
    *((_OWORD *)&v241 - 16) = 0u;
    *((_OWORD *)&v241 - 17) = 0u;
    if ((int)v91 < 1)
    {
      LOWORD(v97) = 0;
    }
    else
    {
      uint64_t v98 = v91;
      int32x4_t v99 = v266;
      do
      {
        uint64_t v100 = *v99++;
        *((_WORD *)v96 + v100 - 13) = 1;
        --v98;
      }
      while (v98);
      uint64_t v97 = *((unsigned __int16 *)&v241 - 4);
    }
  }
  uint64_t v101 = 0;
  int v243 = 2 * v13;
  int v241 = v263 - 1;
  do
  {
    __int16 v102 = (char *)v96 + 2 * v101;
    __int16 v103 = *((_WORD *)v102 + 131);
    *((_WORD *)v102 + 133) += v103 + v97;
    unint64_t v104 = v101 + 146;
    --v101;
    LOWORD(v97) = v103;
  }
  while (v104 > 0x10);
  uint64_t v105 = 0;
  int v106 = 0;
  do
  {
    if (*((__int16 *)v96 + v105 + 4) >= 1) {
      v266[v106++] = v105 + 16;
    }
    ++v105;
  }
  while (v105 != 128);
  uint64_t v107 = 0;
  __int16 v108 = *((_WORD *)v96 + 132);
  __int16 v109 = *((_WORD *)v96 + 131);
  do
  {
    __int16 v110 = v109 + v108;
    __int16 v111 = (char *)v96 + 2 * v107;
    __int16 v108 = v109;
    __int16 v109 = *((_WORD *)v111 + 130);
    *((_WORD *)v111 + 133) += v110 + v109;
    unint64_t v112 = v107 + 146;
    --v107;
  }
  while (v112 > 0x10);
  uint64_t v113 = 0;
  int v114 = 0;
  do
  {
    if (*((__int16 *)v96 + v113 + 3) >= 1) {
      *((_WORD *)v96 + v114++) = v113 + 14;
    }
    ++v113;
  }
  while (v113 != 131);
  silk_sum_sqr_shift(v265, (int *)&v264, (uint64_t)v18, v16);
  BOOL v244 = v82;
  if ((int)v264 >= 1)
  {
    unsigned int v115 = v264 >> 1;
    v264 >>= 1;
    if ((int)v260 <= -4)
    {
      bzero(v32, v257);
      int v145 = 0;
      uint64_t v118 = v260;
      goto LABEL_124;
    }
    if ((int)v16 <= 1) {
      uint64_t v116 = 1;
    }
    else {
      uint64_t v116 = v16;
    }
    BOOL v117 = v18;
    do
    {
      *v117++ >>= v115;
      --v116;
    }
    while (v116);
  }
  bzero(v32, v257);
  uint64_t v118 = v260;
  if ((int)v260 < 1)
  {
    int v145 = 0;
  }
  else
  {
    int v255 = v106;
    v261 = (__int16 *)v96;
    LODWORD(v258) = a6;
    int v119 = 0;
    int v120 = v18 + 160;
    LODWORD(v259) = -14;
    size_t v257 = v114;
    LODWORD(v262) = v114;
    do
    {
      int v121 = silk_inner_prod_aligned((unint64_t)v120, v120, 40);
      if (v114 >= 1)
      {
        int v122 = v121 + 1;
        int v123 = v259 + 132 * v119;
        size_t v124 = v257;
        int v125 = v261;
        do
        {
          uint64_t v127 = *v125++;
          int v126 = v127;
          int v128 = &v120[-v127];
          int v129 = silk_inner_prod_aligned((unint64_t)v120, v128, 40);
          if (v129 < 1)
          {
            LOWORD(v144) = 0;
          }
          else
          {
            unsigned int v130 = v129;
            int v131 = v122 + silk_inner_prod_aligned((unint64_t)v128, v128, 40);
            unsigned int v132 = __clz(v130);
            if (v131 >= 0) {
              unsigned int v133 = v131;
            }
            else {
              unsigned int v133 = -v131;
            }
            unsigned int v134 = __clz(v133);
            int v135 = v131 << (v134 - 1);
            int v136 = 0x1FFFFFFF / (v135 >> 16);
            int v137 = v136 * ((int)(v130 << (v132 - 1)) >> 16) + ((v136 * (unsigned __int16)(v130 << (v132 - 1))) >> 16);
            int v138 = (v130 << (v132 - 1)) - (((unint64_t)(v137 * (uint64_t)v135) >> 29) & 0xFFFFFFF8);
            int v139 = v137 + (v138 >> 16) * v136 + (((unsigned __int16)v138 * v136) >> 16);
            int v140 = v132 - v134;
            if ((v140 + 29) >= 0x2E) {
              __int16 v141 = 0;
            }
            else {
              __int16 v141 = v139 >> (v140 + 15);
            }
            int v142 = (int)0x80000000 >> (-15 - v140);
            if (v139 > v142) {
              int v142 = v139;
            }
            if (v139 <= (int)(0x7FFFFFFFu >> (-15 - v140))) {
              unsigned int v143 = v142;
            }
            else {
              unsigned int v143 = 0x7FFFFFFFu >> (-15 - v140);
            }
            unsigned int v144 = v143 << (-15 - v140);
            if (v140 > -16) {
              LOWORD(v144) = v141;
            }
          }
          v32[v123 + v126] = v144;
          --v124;
        }
        while (v124);
      }
      v120 += 40;
      ++v119;
      uint64_t v118 = v260;
      int v114 = v262;
    }
    while (v119 != v260);
    int v145 = 1;
    int v13 = v251;
    a6 = (int)v258;
    BOOL v82 = v244;
    int v106 = v255;
  }
LABEL_124:
  if (a6 < 1)
  {
    int v255 = 0;
  }
  else
  {
    if (v13 == 12) {
      a6 = 2 * a6 / 3;
    }
    else {
      a6 = a6 >> (v13 == 16);
    }
    int v146 = silk_lin2log(a6);
    uint64_t v118 = v260;
    int v255 = v146;
  }
  int v147 = (__int16 *)&silk_CB_lags_stage2_10_ms;
  if (v82) {
    int v147 = (__int16 *)silk_CB_lags_stage2;
  }
  v261 = v147;
  if (v106 < 1) {
    goto LABEL_175;
  }
  LODWORD(v258) = a6;
  uint64_t v148 = 0;
  LODWORD(v252) = 0;
  BOOL v149 = v13 != 8 || v247 <= 0;
  BOOL v150 = !v149;
  int v151 = (__int16)(1638 * v118);
  LODWORD(v259) = (__int16)v118 * (__int16)v254;
  uint64_t v152 = v82 ? 11 : 3;
  size_t v257 = v106;
  uint64_t v153 = v82 && v150 ? 11 : 3;
  int v254 = -1;
  LODWORD(v262) = 0x80000000;
  LODWORD(v253) = 0x80000000;
  do
  {
    uint64_t v154 = 0;
    unsigned int v155 = v266[v148];
    int v156 = (char *)v261;
    do
    {
      v265[v154 + 1] = 0;
      if (v145)
      {
        unsigned int v157 = 0;
        uint64_t v158 = v118;
        int v159 = v156;
        unsigned int v160 = v155 - 14;
        do
        {
          v157 += v32[v160 + *v159];
          v160 += 132;
          v159 += v152;
          --v158;
        }
        while (v158);
        v265[v154 + 1] = v157;
      }
      ++v154;
      ++v156;
    }
    while (v154 != v153);
    uint64_t v161 = 0;
    int v162 = 0;
    int v163 = 0x80000000;
    do
    {
      if ((int)v265[v161 + 1] > v163)
      {
        int v162 = v161;
        int v163 = v265[v161 + 1];
      }
      ++v161;
    }
    while (v153 != v161);
    __int16 v164 = silk_lin2log(v155);
    int v165 = v163 - ((v164 * v151) >> 7);
    if ((int)v258 >= 1)
    {
      unsigned int v166 = ((__int16)(v164 - v255) * (__int16)(v164 - v255)) >> 7;
      v165 -= (int)(((*v256 * v151) >> 15) * v166) / (int)(v166 + 64);
    }
    BOOL v167 = v165 <= (int)v262 || v163 <= (int)v259;
    uint64_t v118 = v260;
    if (!v167 && silk_CB_lags_stage2[v162] <= 16)
    {
      LODWORD(v252) = v162;
      int v254 = v155;
      LODWORD(v253) = v163;
      LODWORD(v262) = v165;
    }
    ++v148;
  }
  while (v148 != v257);
  int v168 = v254;
  int v169 = v251;
  if (v254 == -1)
  {
LABEL_175:
    size_t v93 = 4 * (int)v118;
    goto LABEL_176;
  }
  *(_DWORD *)v256 = 4 * ((int)v253 / (int)v260);
  if (v169 <= 8)
  {
    int v180 = (int *)v250;
    LOBYTE(v178) = v252;
    if (v145)
    {
      unsigned int v181 = (char *)v261 + (int)v252;
      do
      {
        int v182 = v168 + *v181;
        if (v182 <= 16) {
          int v182 = 16;
        }
        if (v182 >= 144) {
          int v182 = 144;
        }
        *v180++ = v182;
        v181 += v152;
        --v118;
      }
      while (v118);
    }
    __int16 v183 = v168 - 16;
  }
  else
  {
    uint64_t v170 = (uint64_t)v246;
    int v171 = v245;
    silk_sum_sqr_shift(v265, (int *)&v264, (uint64_t)v246, v245);
    int v172 = v264;
    if ((int)v264 <= 0) {
      int v173 = 0;
    }
    else {
      int v173 = v171;
    }
    size_t v174 = 2 * v173;
    int v175 = (char *)&v241 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v175, v174);
    if (v172 < 1)
    {
      uint64_t v176 = v260;
    }
    else
    {
      unsigned int v264 = v172 >> 1;
      uint64_t v176 = v260;
      if (v171 >= 1)
      {
        uint64_t v177 = 0;
        do
        {
          *(_WORD *)&v175[v177] = *(__int16 *)(v170 + v177) >> (v172 >> 1);
          v177 += 2;
        }
        while (2 * v171 != v177);
      }
      uint64_t v170 = (uint64_t)v175;
    }
    int v184 = 2 * v168;
    if (v169 != 16) {
      int v184 = 3 * (__int16)v168;
    }
    int v185 = (3 * (__int16)v168) >> 1;
    if (v169 != 12) {
      int v185 = v184;
    }
    if (v185 <= v243) {
      int v186 = v243;
    }
    else {
      int v186 = v185;
    }
    if (v185 >= (int)v263) {
      int v186 = v241;
    }
    if (v185 <= v241) {
      int v187 = v241;
    }
    else {
      int v187 = v185;
    }
    if (v185 <= v243) {
      int v188 = v187;
    }
    else {
      int v188 = v243;
    }
    if (v243 >= (int)v263) {
      int v189 = v188;
    }
    else {
      int v189 = v186;
    }
    if (v189 - 2 <= v243) {
      int v190 = v243;
    }
    else {
      int v190 = v189 - 2;
    }
    int v191 = v189 + 2;
    if (v189 + 2 >= v241) {
      int v191 = v241;
    }
    LODWORD(v261) = v191;
    if (v145)
    {
      uint64_t v192 = &silk_CB_lags_stage2[(int)v252];
      uint64_t v193 = v176;
      int v194 = v250;
      do
      {
        int v195 = *v192;
        v192 += 11;
        *v194++ = v189 + 2 * v195;
        --v193;
      }
      while (v193);
    }
    uint64_t v196 = v170;
    if (v244)
    {
      int v197 = v247;
      uint64_t v198 = silk_nb_cbk_searchs_stage3[v247];
      v258 = silk_CB_lags_stage3;
      uint64_t v259 = 34;
    }
    else
    {
      v258 = (char *)&silk_CB_lags_stage3_10_ms;
      uint64_t v198 = 12;
      uint64_t v259 = 12;
      int v197 = v247;
    }
    uint64_t v199 = (char *)&v241 - ((20 * (int)v198 * (int)v176 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v199, 20 * (int)v198 * (int)v176);
    int v200 = v199;
    bzero(v199, 20 * (int)v198 * (int)v176);
    uint64_t v201 = v196;
    uint64_t v202 = v196;
    uint64_t v203 = v242;
    silk_P_Ana_calc_corr_st3((uint64_t)v199, v202, v190, v242, v176, v197);
    silk_P_Ana_calc_energy_st3((unint64_t)v199, v201, v190, v203, v176, v197);
    int v204 = silk_inner_prod_aligned(v201 + 40 * v251, (__int16 *)(v201 + 40 * v251), (int)v203 * (int)v176);
    if (v190 <= (int)v261)
    {
      int v206 = 0;
      int v178 = 0;
      int v207 = (1638 / v189) << 16;
      v261 = (__int16 *)(v261 - v190 + 1);
      uint64_t v208 = v198;
      uint64_t v209 = 20 * (int)v198;
      signed int v210 = 0x80000000;
      uint64_t v205 = v260;
      uint64_t v262 = v198;
      do
      {
        if ((int)v198 >= 1)
        {
          uint64_t v211 = 0;
          uint64_t v212 = v199;
          int v213 = v200;
          do
          {
            if (!v145) {
              goto LABEL_239;
            }
            uint64_t v214 = 0;
            signed int v215 = 0;
            uint64_t v216 = v260;
            int v217 = v204 + 1;
            do
            {
              v215 += *(_DWORD *)&v213[v214];
              v217 += *(_DWORD *)&v212[v214];
              v214 += v209;
              --v216;
            }
            while (v216);
            if (v215 >= 1)
            {
              unsigned int v218 = __clz(v215);
              int v219 = v215 << (v218 - 1);
              if (v217 >= 0) {
                unsigned int v220 = v217;
              }
              else {
                unsigned int v220 = -v217;
              }
              unsigned int v221 = __clz(v220);
              int v222 = v217 << (v221 - 1);
              int v223 = 0x1FFFFFFF / (v222 >> 16);
              int v224 = v223 * (v219 >> 16) + ((v223 * (unsigned __int16)v219) >> 16);
              int v225 = v219 - (((unint64_t)(v224 * (uint64_t)v222) >> 29) & 0xFFFFFFF8);
              int v226 = v224 + (v225 >> 16) * v223 + (((unsigned __int16)v225 * v223) >> 16);
              int v227 = v218 - v221;
              if (v218 - v221 + 29 >= 0x2E) {
                int v228 = 0;
              }
              else {
                int v228 = v226 >> (v227 + 15);
              }
              int v229 = (int)0x80000000 >> (-15 - v227);
              if (v226 > v229) {
                int v229 = v226;
              }
              if (v226 <= (int)(0x7FFFFFFFu >> (-15 - v227))) {
                unsigned int v230 = v229;
              }
              else {
                unsigned int v230 = 0x7FFFFFFFu >> (-15 - v227);
              }
              int v231 = v230 << (-15 - v227);
              if (v227 > -16) {
                int v231 = v228;
              }
              int v232 = (v231 >> 16) * ((2147418112 - v207 * (int)v211) >> 16)
                   + (((unsigned __int16)v231 * ((2147418112 - v207 * (int)v211) >> 16)) >> 16);
            }
            else
            {
LABEL_239:
              int v232 = 0;
            }
            if (v232 > v210 && v190 + silk_CB_lags_stage3[v211] < (int)v263)
            {
              int v178 = v211;
              int v189 = v190;
              signed int v210 = v232;
            }
            ++v211;
            v213 += 20;
            v212 += 20;
          }
          while (v211 != v208);
        }
        int v206 = (__int16 *)((char *)v206 + 1);
        ++v190;
        v200 += 4;
        v199 += 4;
        LODWORD(v198) = v262;
      }
      while (v206 != v261);
    }
    else
    {
      int v178 = 0;
      uint64_t v205 = v260;
    }
    int v233 = (int *)v250;
    uint64_t v234 = v259;
    if (v145)
    {
      int v235 = v263;
      if (v243 <= (int)v263) {
        int v236 = v263;
      }
      else {
        int v236 = v243;
      }
      if (v243 < (int)v263) {
        int v235 = v243;
      }
      int v237 = &v258[v178];
      do
      {
        int v238 = v189 + *v237;
        if (v238 <= v235) {
          int v239 = v235;
        }
        else {
          int v239 = v189 + *v237;
        }
        if (v238 <= v236) {
          int v240 = v239;
        }
        else {
          int v240 = v236;
        }
        *v233++ = v240;
        v237 += v234;
        --v205;
      }
      while (v205);
    }
    __int16 v183 = v189 - v243;
  }
  uint64_t result = 0;
  _WORD *v248 = v183;
LABEL_177:
  unsigned char *v249 = v178;
  return result;
}

uint64_t silk_P_Ana_calc_corr_st3(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v36 = a4;
  uint64_t v31 = result;
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a5 == 4)
  {
    uint64_t v35 = (char *)&silk_Lag_range_stage3 + 8 * a6;
    int v6 = silk_nb_cbk_searchs_stage3[a6];
    int v30 = &silk_CB_lags_stage3;
    uint64_t v7 = 34;
  }
  else
  {
    int v30 = (char *)&silk_CB_lags_stage3_10_ms;
    uint64_t v35 = (char *)&silk_Lag_range_stage3_10_ms;
    int v6 = 12;
    uint64_t v7 = 12;
  }
  uint64_t v34 = v7;
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  if (a5 >= 1)
  {
    int v8 = 0;
    int v9 = 0;
    uint64_t v10 = (__int16 *)(a2 + 8 * v36);
    uint64_t v32 = (int)v36;
    uint64_t v33 = -(uint64_t)a3;
    uint64_t v11 = a5;
    uint64_t v12 = 0;
    uint64_t v29 = v6;
    do
    {
      int v13 = &v35[2 * v12];
      int v14 = *v13;
      int v15 = v13[1];
      uint64_t result = celt_pitch_xcorr_c(v10, (uint64_t)&v10[v33 - v13[1]], (uint64_t)v25, v36, v15 - v14 + 1);
      if (v15 >= v14)
      {
        uint64_t v16 = (v15 - v14 + 1);
        uint64_t v17 = (int *)&v25[4 * v15 + -4 * v14];
        uint64_t v18 = v27;
        do
        {
          int v19 = *v17--;
          *v18++ = v19;
          --v16;
        }
        while (v16);
      }
      if (v6 >= 1)
      {
        uint64_t v20 = v31 + 20 * v9;
        int v21 = &v30[v8 & 0xFFFFFFFE];
        uint64_t v22 = v29;
        do
        {
          uint64_t v23 = *v21++;
          int v24 = &v27[v23 - v14];
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
          *(_DWORD *)(v20 + 16) = v24[4];
          v20 += 20;
          --v22;
        }
        while (v22);
      }
      v10 += v32;
      ++v12;
      v9 += v6;
      v8 += v34;
    }
    while (v12 != v11);
  }
  return result;
}

unint64_t silk_P_Ana_calc_energy_st3(unint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v47 = a4;
  int v46 = a3;
  unint64_t v40 = result;
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (a5 == 4)
  {
    uint64_t v45 = (char *)&silk_Lag_range_stage3 + 8 * a6;
    unsigned int v6 = silk_nb_cbk_searchs_stage3[a6];
    uint64_t v36 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    uint64_t v44 = 34;
    int v39 = &silk_CB_lags_stage3;
  }
  else
  {
    uint64_t v36 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    if (a5 < 1) {
      return result;
    }
    uint64_t v44 = 12;
    uint64_t v45 = (char *)&silk_Lag_range_stage3_10_ms;
    int v39 = (char *)&silk_CB_lags_stage3_10_ms;
    unsigned int v6 = 12;
  }
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = a2 + 8 * v47;
  uint64_t v43 = 2 * (int)v47;
  uint64_t v37 = (char *)&v31 + 4;
  uint64_t v38 = v43 - 2;
  uint64_t v41 = v6;
  uint64_t v42 = a5;
  do
  {
    uint64_t v11 = &v45[2 * v9];
    int v12 = *v11;
    int v13 = v12 + v46;
    uint64_t result = silk_inner_prod_aligned(v10 - 2 * v13, (__int16 *)(v10 - 2 * v13), v47);
    LODWORD(v31) = result;
    int v14 = v11[1];
    BOOL v15 = __OFSUB__(v14, v12);
    int v16 = v14 - v12;
    if (!((v16 < 0) ^ v15 | (v16 == 0)))
    {
      uint64_t v17 = (v16 + 1);
      unint64_t v18 = (2 * v13) ^ 0xFFFFFFFFFFFFFFFELL;
      uint64_t v19 = v38 - 2 * v13;
      uint64_t v20 = v17 - 1;
      int v21 = v37;
      do
      {
        int v22 = result - *(__int16 *)(v10 + v19) * *(__int16 *)(v10 + v19);
        int v23 = v22 + *(__int16 *)(v10 + v18) * *(__int16 *)(v10 + v18);
        if (v23 >= 0 || v22 <= -1) {
          uint64_t result = v23;
        }
        else {
          uint64_t result = 0x7FFFFFFFLL;
        }
        *v21++ = result;
        v18 -= 2;
        v19 -= 2;
        --v20;
      }
      while (v20);
    }
    int v25 = v41;
    if ((int)v41 >= 1)
    {
      unint64_t v26 = v40 + 20 * v8;
      unsigned int v27 = &v39[v7 & 0xFFFFFFFE];
      uint64_t v28 = v41;
      do
      {
        uint64_t v29 = *v27++;
        int v30 = (char *)&v31 + 4 * (v29 - v12);
        *(_OWORD *)unint64_t v26 = *(_OWORD *)v30;
        *(_DWORD *)(v26 + 16) = *((_DWORD *)v30 + 4);
        v26 += 20;
        --v28;
      }
      while (v28);
    }
    v10 += v43;
    ++v9;
    v8 += v25;
    v7 += v44;
  }
  while (v9 != v42);
  return result;
}

uint64_t silk_noise_shape_analysis_FIX(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v298 = a5;
  uint64_t v7 = a2;
  int v8 = a1;
  uint64_t v326 = *MEMORY[0x263EF8340];
  uint64_t v9 = (unsigned __int8 *)a1 + 4813;
  int v319 = 0;
  uint64_t v10 = a1[1156];
  int v11 = a1[1191];
  *(_DWORD *)(a2 + 480) = (a1[1187] + a1[1186]) >> 2;
  int v12 = (int)silk_sigm_Q15((((v11 - 2560) >> 3) + 1) >> 1) >> 1;
  *(_DWORD *)(v7 + 484) = v12;
  if (!v8[1177])
  {
    int v13 = -8
        * ((int)((-*((unsigned char *)v8 + 4556) << 8) * (__int16)(256 - *((_WORD *)v8 + 2278))
               + (((256 - v8[1139]) * ((256 - v8[1139]) >> 8)) << 16)) >> 16);
    int v14 = (int)((unsigned __int16)(*(_WORD *)(v7 + 480) + 0x4000) * (__int16)v12
              + ((v12 * ((*(_DWORD *)(v7 + 480) + 0x4000) >> 16)) << 16)) >> 16;
    v11 += (v13 >> 16) * v14 + (((v13 & 0xFFF8) * v14) >> 16);
  }
  signed int v318 = 0;
  int v15 = *v9;
  uint64_t v305 = v7;
  v297 = v9;
  if (v15 == 2)
  {
    HIDWORD(v296) = v11 + (v8[2449] << 16 >> 23);
    v9[1] = 0;
    *(_DWORD *)(v7 + 488) = 0;
  }
  else
  {
    uint64_t v316 = v10;
    uint64_t v317 = a4;
    int v16 = ((26214 * (__int16)v8[1191]) >> 16) - 2 * (__int16)v8[1191] + 3072;
    int v17 = (__int16)(0x4000 - *(_WORD *)(v7 + 480));
    int v315 = (v16 >> 16) * v17;
    int v18 = ((unsigned __int16)v16 * v17) >> 16;
    if (v8[1151] << 16 < 1)
    {
      int v20 = 0;
    }
    else
    {
      int v19 = 0;
      int v20 = 0;
      int v21 = 0;
      int v22 = 2 * v8[1150];
      do
      {
        silk_sum_sqr_shift((unsigned int *)&v318, &v319, a3, v22);
        v318 += v22 >> v319;
        int v23 = silk_lin2log(v318);
        int v24 = v23 - v21;
        if (v23 - v21 < 0) {
          int v24 = v21 - v23;
        }
        int v25 = v24 + v20;
        if (v19) {
          int v20 = v25;
        }
        ++v19;
        a3 += 2 * v22;
        int v21 = v23;
      }
      while (v19 < 5 * *((__int16 *)v8 + 2302) / 2);
    }
    int v26 = silk_sigm_Q15(6554 * ((v20 - 640) >> 16) + ((6554 * (unsigned __int16)(v20 - 640)) >> 16));
    uint64_t v7 = v305;
    *(_DWORD *)(v305 + 488) = v26 >> 7;
    v297[1] = v26 < 24704;
    HIDWORD(v296) = v315 + v11 + v18 + (__int16)((v26 >> 7) - 128);
    uint64_t v10 = v316;
    a4 = v317;
  }
  signed int v27 = 66 * (*(int *)(v7 + 492) >> 16) + ((66 * (unsigned __int16)*(_DWORD *)(v7 + 492)) >> 16);
  int v28 = (__int16)v27 * (v27 >> 16)
      + (((__int16)v27
        * (unsigned __int16)(66 * HIWORD(*(_DWORD *)(v7 + 492))
                           + ((66 * (unsigned __int16)*(_DWORD *)(v7 + 492)) >> 16))) >> 16)
      + (((v27 >> 15) + 1) >> 1) * v27;
  unsigned int v30 = v28 + 0x10000;
  BOOL v29 = v28 + 0x10000 < 0;
  unsigned int v31 = -65536 - v28;
  if (!v29) {
    unsigned int v31 = v30;
  }
  char v32 = __clz(v31);
  int v33 = v30 << (v32 - 1);
  int v34 = 0x1FFFFFFF / (v33 >> 16);
  int v35 = 31129 * (__int16)v34 + ((__int16)v34 >> 1);
  int v36 = 2040102912 - (((unint64_t)(v33 * (uint64_t)v35) >> 29) & 0xFFFFFFF8);
  int v37 = v35 + (v36 >> 16) * (__int16)v34 + (((v36 & 0xFFF8) * (__int16)v34) >> 16);
  int v38 = v37 >> (29 - v32);
  char v39 = v32 - 29;
  int v40 = (int)0x80000000 >> v39;
  if (v37 > (int)0x80000000 >> v39) {
    int v40 = v37;
  }
  if (v37 <= (int)(0x7FFFFFFFu >> v39)) {
    unsigned int v41 = v40;
  }
  else {
    unsigned int v41 = 0x7FFFFFFFu >> v39;
  }
  unsigned int v42 = v41 << v39;
  if (v31 <= 3) {
    int v43 = v42;
  }
  else {
    int v43 = v38;
  }
  int v44 = *(_DWORD *)(v7 + 484);
  int v45 = v8[1176];
  if (v45 < 1) {
    unsigned int v300 = 0;
  }
  else {
    unsigned int v300 = v45
  }
         + 2621 * (*(int *)(v7 + 484) >> 16)
         + ((2621 * (unsigned __int16)*(_DWORD *)(v7 + 484)) >> 16);
  size_t v46 = 2 * v8[1157];
  v303 = (char *)&v296 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v303, v46);
  if (v8[1151] >= 1)
  {
    uint64_t v47 = 0;
    unsigned int v48 = 655 * ((-3 * (__int16)v44 + 0x10000) >> 16) + ((655 * (unsigned __int16)(-3 * v44)) >> 16);
    uint64_t v49 = a4 - 2 * v10;
    int v301 = (int)((v43 - v48) << 14) / ((int)(v48 + v43) >> 2);
    int v302 = v48 + v43;
    int v50 = (__int16)v300;
    int v51 = v50 * ((signed int)-v300 >> 16) + ((v50 * (unsigned __int16)-(__int16)v300) >> 16);
    int v52 = (__int16)-(__int16)v300;
    unsigned int v53 = v51 + 0x10000;
    BOOL v29 = v51 + 0x10000 < 0;
    unsigned int v54 = -65536 - v51;
    if (!v29) {
      unsigned int v54 = v53;
    }
    unsigned int v55 = __clz(v54);
    int v56 = v53 << (v55 - 1);
    int v315 = v56 >> 16;
    LODWORD(v316) = v56;
    unsigned int v313 = v55 + 4;
    int v314 = (unsigned __int16)v56;
    v309 = (int *)&v321;
    v310 = (int *)&v323;
    uint64_t v299 = v7 + 268;
    v304 = v8;
    do
    {
      uint64_t v308 = v47;
      uint64_t v57 = 3 * v8[1150];
      int v58 = (v8[1157] - (int)v57) >> 1;
      unsigned int v59 = v303;
      uint64_t v60 = v49;
      silk_apply_sine_window((uint64_t)v303, v49, 1, v58);
      memcpy(&v59[2 * v58], (const void *)(v60 + 2 * v58), 2 * v57);
      uint64_t v307 = v60;
      uint64_t v61 = v60 + 2 * ((int)v57 + v58);
      int v8 = v304;
      silk_apply_sine_window((uint64_t)&v59[2 * (int)v57 + 2 * v58], v61, 2, v58);
      int v62 = v8[1176];
      int v63 = v8[1157];
      int v64 = v8[1165];
      uint64_t v306 = v8[1153];
      if (v62 < 1) {
        silk_autocorr(v325, &v319, v59, v63, v64 + 1);
      }
      else {
        silk_warped_autocorrelation_FIX(v325, &v319, (uint64_t)v59, v300, v63, v64);
      }
      signed int v65 = 52 * ((int)v325[0] >> 20) + ((52 * (unsigned __int16)(v325[0] >> 4)) >> 16);
      if (v65 <= 1) {
        signed int v65 = 1;
      }
      v325[0] += v65;
      signed int v318 = silk_schur64(v324, (const float *)v325, v8[1165]);
      silk_k2a_Q16(&v320, (uint64_t)v324, v8[1165]);
      int v66 = -v319;
      uint64_t v7 = v305;
      if (-v319)
      {
        int v66 = ~v319;
        unsigned int v67 = v318 >> 1;
        v318 >>= 1;
      }
      else
      {
        unsigned int v67 = v318;
      }
      uint64_t v68 = v308;
      if ((int)v67 < 1)
      {
        unsigned int v72 = 0;
      }
      else
      {
        unsigned int v69 = __clz(v67);
        if (v69 != 24)
        {
          if (v67 <= 0x7F) {
            LOBYTE(v67) = (v67 >> (56 - v69)) | ((_BYTE)v67 << (v69 - 24));
          }
          else {
            LOBYTE(v67) = ((_BYTE)v67 << (v69 + 8)) | (v67 >> (24 - v69));
          }
        }
        int v70 = v67 & 0x7F;
        if (v69) {
          unsigned int v71 = 0x8000;
        }
        else {
          unsigned int v71 = 46214;
        }
        unsigned int v72 = (v71 >> (v69 >> 1)) + ((213 * (v71 >> (v69 >> 1)) * v70) >> 16);
      }
      int v73 = 16 - (v66 >> 1);
      if (v72 >= 0x7FFFFFFFu >> v73) {
        unsigned int v72 = 0x7FFFFFFFu >> v73;
      }
      int v74 = v72 << v73;
      *(_DWORD *)(v305 + 4 * v308) = v74;
      if (v8[1176] >= 1)
      {
        int v75 = v8[1165];
        int v76 = *(&v320 + v75 - 1);
        BOOL v77 = __OFSUB__(v75, 2);
        int v78 = v75 - 2;
        if (v78 < 0 == v77)
        {
          uint64_t v79 = 4 * v78;
          do
          {
            int v76 = *(int *)((char *)&v320 + v79) + (v76 >> 16) * v52 + (((unsigned __int16)v76 * v52) >> 16);
            v79 -= 4;
          }
          while (v79 != -4);
        }
        int v80 = (v76 >> 16) * v50 + (((unsigned __int16)v76 * v50) >> 16);
        unsigned int v81 = v80 + 0x1000000;
        BOOL v29 = v80 + 0x1000000 < 0;
        unsigned int v82 = -16777216 - v80;
        if (!v29) {
          unsigned int v82 = v81;
        }
        char v83 = __clz(v82);
        int v84 = v81 << (v83 - 1);
        int v85 = 0x1FFFFFFF / (v84 >> 16);
        int v86 = (v84 >> 16) * (__int16)v85 + (((unsigned __int16)v84 * (__int16)v85) >> 16);
        int v87 = (v85 << 16)
            - 8 * v86 * (((v85 >> 15) + 1) >> 1)
            + ((-8 * v86) >> 16) * (__int16)v85
            + ((((-8 * v86) & 0xFFF8) * (__int16)v85) >> 16);
        int v88 = v87 >> (22 - v83);
        char v89 = v83 - 22;
        int v90 = (int)0x80000000 >> v89;
        if (v87 > (int)0x80000000 >> v89) {
          int v90 = v87;
        }
        if (v87 <= (int)(0x7FFFFFFFu >> v89)) {
          unsigned int v91 = v90;
        }
        else {
          unsigned int v91 = 0x7FFFFFFFu >> v89;
        }
        int v92 = v91 << v89;
        if (v82 > 0x3FF) {
          int v92 = v88;
        }
        int v93 = (__int16)v92;
        int v94 = ((v92 >> 15) + 1) >> 1;
        if (v93 * (((v74 & 1) + (v74 >> 1)) >> 16)
           + ((v93 * (unsigned __int16)((v74 & 1) + (v74 >> 1))) >> 16)
           + v94 * ((v74 & 1) + (v74 >> 1)) <= 1073741822)
          int v95 = v93 * (v74 >> 16) + ((v93 * (unsigned __int16)v74) >> 16) + v94 * v74;
        else {
          int v95 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v7 + 4 * v68) = v95;
      }
      silk_bwexpander_32(&v320, v8[1165], v302);
      int v96 = v8[1165];
      __memcpy_chk();
      silk_bwexpander_32(&v322, v96, v301);
      int v97 = silk_LPC_inverse_pred_gain_Q24(&v320, v8[1165]);
      int v98 = silk_LPC_inverse_pred_gain_Q24(&v322, v8[1165]);
      uint64_t v99 = v308;
      signed int v318 = v98;
      unsigned int v100 = 22938 * (unsigned __int16)v97;
      int v101 = 2 * (22938 * (v97 >> 16) + HIWORD(v100));
      if (((22938 * (v97 >> 16) + HIWORD(v100)) & 0x40000000) != 0) {
        unsigned int v102 = -2 * (22938 * (v97 >> 16) + HIWORD(v100));
      }
      else {
        unsigned int v102 = 2 * (22938 * (v97 >> 16) + HIWORD(v100));
      }
      unsigned int v103 = __clz(v102);
      int v104 = v101 << (v103 - 1);
      if (v98 >= 0) {
        unsigned int v105 = v98;
      }
      else {
        unsigned int v105 = -v98;
      }
      unsigned int v106 = __clz(v105);
      int v107 = v98 << (v106 - 1);
      int v108 = 0x1FFFFFFF / (v107 >> 16);
      int v109 = (v104 >> 16) * v108 + (((v104 & 0xFFFE) * v108) >> 16);
      int v110 = v104 - (((unint64_t)(v109 * (uint64_t)v107) >> 29) & 0xFFFFFFF8);
      int v111 = v109 + (v110 >> 16) * v108 + (((v110 & 0xFFFE) * v108) >> 16);
      int v112 = v103 - v106;
      if ((v112 + 15) >= 0x20) {
        int v113 = 0;
      }
      else {
        int v113 = v111 >> (v112 + 15);
      }
      int v114 = (int)0x80000000 >> (-15 - v112);
      if (v111 > v114) {
        int v114 = v111;
      }
      if (v111 <= (int)(0x7FFFFFFFu >> (-15 - v112))) {
        unsigned int v115 = v114;
      }
      else {
        unsigned int v115 = 0x7FFFFFFFu >> (-15 - v112);
      }
      int v116 = v115 << (-15 - v112);
      if (v112 > -16) {
        int v116 = v113;
      }
      *(_DWORD *)(v7 + 4 * v308 + 412) = v116 + 4915;
      uint64_t v117 = v8[1165];
      unint64_t v312 = (v117 - 1);
      if ((int)v117 >= 2)
      {
        unint64_t v118 = v312;
        do
        {
          int v119 = *(&v320 + v118);
          int v120 = *(&v322 + v118);
          BOOL v286 = v118-- > 1;
          *(&v320 + v118) += (v119 >> 16) * v52 + (((unsigned __int16)v119 * v52) >> 16);
          *(&v322 + v118) += (v120 >> 16) * v52 + (((unsigned __int16)v120 * v52) >> 16);
        }
        while (v286);
      }
      int v121 = (v320 >> 16) * v50 + (((unsigned __int16)v320 * v50) >> 16);
      unsigned int v122 = v121 + 0x1000000;
      BOOL v29 = v121 + 0x1000000 < 0;
      unsigned int v123 = -16777216 - v121;
      if (!v29) {
        unsigned int v123 = v122;
      }
      unsigned int v124 = __clz(v123);
      int v125 = v122 << (v124 - 1);
      int v126 = 0x1FFFFFFF / (v125 >> 16);
      int v127 = v126 * v315 + ((v126 * v314) >> 16);
      int v128 = v316 - (((unint64_t)(v125 * (uint64_t)v127) >> 29) & 0xFFFFFFF8);
      int v129 = v127 + (v128 >> 16) * v126 + (((unsigned __int16)v128 * v126) >> 16);
      int v130 = v313 - v124;
      if ((v130 + 1) >= 0x20) {
        int v131 = 0;
      }
      else {
        int v131 = v129 >> (v130 + 1);
      }
      int v132 = (int)0x80000000 >> ~(_BYTE)v130;
      if (v129 > v132) {
        int v132 = v129;
      }
      if (v129 <= (int)(0x7FFFFFFFu >> ~(_BYTE)v130)) {
        unsigned int v133 = v132;
      }
      else {
        unsigned int v133 = 0x7FFFFFFFu >> ~(_BYTE)v130;
      }
      int v134 = v133 << ~(_BYTE)v130;
      if (v130 <= -2) {
        int v135 = v134;
      }
      else {
        int v135 = v131;
      }
      int v136 = (v322 >> 16) * v50 + (((unsigned __int16)v322 * v50) >> 16);
      unsigned int v137 = v136 + 0x1000000;
      BOOL v29 = v136 + 0x1000000 < 0;
      unsigned int v138 = -16777216 - v136;
      if (!v29) {
        unsigned int v138 = v137;
      }
      unsigned int v139 = __clz(v138);
      int v140 = v137 << (v139 - 1);
      int v141 = 0x1FFFFFFF / (v140 >> 16);
      int v142 = v141 * v315 + ((v141 * v314) >> 16);
      int v143 = v316 - (((unint64_t)(v140 * (uint64_t)v142) >> 29) & 0xFFFFFFF8);
      int v144 = v142 + (v143 >> 16) * v141 + (((unsigned __int16)v143 * v141) >> 16);
      int v145 = v313 - v139;
      if ((v145 + 1) >= 0x20) {
        int v146 = 0;
      }
      else {
        int v146 = v144 >> (v145 + 1);
      }
      int v147 = (int)0x80000000 >> ~(_BYTE)v145;
      if (v144 > v147) {
        int v147 = v144;
      }
      if (v144 <= (int)(0x7FFFFFFFu >> ~(_BYTE)v145)) {
        unsigned int v148 = v147;
      }
      else {
        unsigned int v148 = 0x7FFFFFFFu >> ~(_BYTE)v145;
      }
      int v149 = v148 << ~(_BYTE)v145;
      if (v145 <= -2) {
        int v150 = v149;
      }
      else {
        int v150 = v146;
      }
      if ((int)v117 >= 1)
      {
        uint64_t v151 = 0;
        uint64_t v152 = 4 * v117;
        uint64_t v153 = (__int16 *)(v299 + 32 * (v99 & 0xFFFFFFF));
        do
        {
          *(int *)((char *)&v320 + v151) = (__int16)*(int *)((char *)&v320 + v151) * (v135 >> 16)
                                         + (((__int16)*(int *)((char *)&v320 + v151) * (unsigned __int16)v135) >> 16)
                                         + (((*(int *)((char *)&v320 + v151) >> 15) + 1) >> 1) * v135;
          *(int *)((char *)&v322 + v151) = (__int16)*(int *)((char *)&v322 + v151) * (v150 >> 16)
                                         + (((__int16)*(int *)((char *)&v322 + v151) * (unsigned __int16)v150) >> 16)
                                         + (((*(int *)((char *)&v322 + v151) >> 15) + 1) >> 1) * v150;
          v151 += 4;
        }
        while (v152 != v151);
        int v154 = 0;
        int v155 = 0;
        uint64_t v311 = v117 - 1;
        do
        {
          uint64_t v156 = 0;
          unsigned int v157 = -1;
          do
          {
            int v158 = *(&v320 + v156);
            if (v158 < 0) {
              int v158 = -v158;
            }
            int v159 = *(&v322 + v156);
            if (v159 < 0) {
              int v159 = -v159;
            }
            if (v158 <= v159) {
              int v158 = v159;
            }
            if (v158 > (int)v157)
            {
              int v154 = v156;
              unsigned int v157 = v158;
            }
            ++v156;
          }
          while (v117 != v156);
          if (v157 < 0x3FFBE78) {
            break;
          }
          if ((int)v117 >= 2)
          {
            int v160 = v320;
            int v161 = v322;
            int v162 = v309;
            int v163 = v310;
            uint64_t v164 = v311;
            do
            {
              int v165 = *v162;
              int v166 = v160 + (*v162 >> 16) * v50 + (((unsigned __int16)*v162 * v50) >> 16);
              int v167 = *v163;
              *(v163 - 1) = v161 + (*v163 >> 16) * v50 + (((unsigned __int16)*v163 * v50) >> 16);
              ++v163;
              *(v162++ - 1) = v166;
              int v161 = v167;
              int v160 = v165;
              --v164;
            }
            while (v164);
          }
          uint64_t v168 = 0;
          if (v135 >= 0) {
            unsigned int v169 = v135;
          }
          else {
            unsigned int v169 = -v135;
          }
          char v170 = __clz(v169);
          int v171 = v135 << (v170 - 1);
          int v172 = 0x1FFFFFFF / (v171 >> 16);
          int v173 = (__int16)v172 * (v171 >> 16) + (((__int16)v172 * (unsigned __int16)v171) >> 16);
          int v174 = (v172 << 16)
               - 8 * v173 * (((v172 >> 15) + 1) >> 1)
               + ((-8 * v173) >> 16) * (__int16)v172
               + ((((-8 * v173) & 0xFFF8) * (__int16)v172) >> 16);
          int v175 = v174 >> (30 - v170);
          char v176 = v170 - 30;
          int v177 = (int)0x80000000 >> v176;
          if (v174 > (int)0x80000000 >> v176) {
            int v177 = v174;
          }
          if (v174 <= (int)(0x7FFFFFFFu >> v176)) {
            unsigned int v178 = v177;
          }
          else {
            unsigned int v178 = 0x7FFFFFFFu >> v176;
          }
          int v179 = v178 << v176;
          if (v169 > 3) {
            int v179 = v175;
          }
          if (v150 >= 0) {
            unsigned int v180 = v150;
          }
          else {
            unsigned int v180 = -v150;
          }
          char v181 = __clz(v180);
          int v182 = v150 << (v181 - 1);
          int v183 = 0x1FFFFFFF / (v182 >> 16);
          int v184 = (__int16)v183 * (v182 >> 16) + (((__int16)v183 * (unsigned __int16)v182) >> 16);
          int v185 = (v183 << 16)
               - 8 * v184 * (((v183 >> 15) + 1) >> 1)
               + ((-8 * v184) >> 16) * (__int16)v183
               + ((((-8 * v184) & 0xFFF8) * (__int16)v183) >> 16);
          int v186 = v185 >> (30 - v181);
          char v187 = v181 - 30;
          int v188 = (int)0x80000000 >> v187;
          if (v185 > (int)0x80000000 >> v187) {
            int v188 = v185;
          }
          if (v185 <= (int)(0x7FFFFFFFu >> v187)) {
            unsigned int v189 = v188;
          }
          else {
            unsigned int v189 = 0x7FFFFFFFu >> v187;
          }
          int v190 = v189 << v187;
          if (v180 > 3) {
            int v190 = v186;
          }
          do
          {
            *(int *)((char *)&v320 + v168) = (__int16)*(int *)((char *)&v320 + v168) * (v179 >> 16)
                                           + (((__int16)*(int *)((char *)&v320 + v168) * (unsigned __int16)v179) >> 16)
                                           + (((*(int *)((char *)&v320 + v168) >> 15) + 1) >> 1) * v179;
            *(int *)((char *)&v322 + v168) = (__int16)*(int *)((char *)&v322 + v168) * (v190 >> 16)
                                           + (((__int16)*(int *)((char *)&v322 + v168) * (unsigned __int16)v190) >> 16)
                                           + (((*(int *)((char *)&v322 + v168) >> 15) + 1) >> 1) * v190;
            v168 += 4;
          }
          while (v152 != v168);
          LODWORD(v317) = v155;
          unsigned int v191 = ((v157 - 67092087) >> 16) * ((6684672 * v155 + 53673984) >> 16)
               + (((unsigned __int16)(v157 + 16777) * ((6684672 * v155 + 53673984) >> 16)) >> 16);
          int v192 = v157 + v157 * v154;
          unsigned int v193 = __clz(v191);
          int v194 = v191 << (v193 - 1);
          if (v192 >= 0) {
            unsigned int v195 = v192;
          }
          else {
            unsigned int v195 = -v192;
          }
          unsigned int v196 = __clz(v195);
          int v197 = v192 << (v196 - 1);
          int v198 = 0x1FFFFFFF / (v197 >> 16);
          int v199 = v198 * (v194 >> 16) + ((v198 * (unsigned __int16)v194) >> 16);
          int v200 = v194 - (((unint64_t)(v199 * (uint64_t)v197) >> 29) & 0xFFFFFFF8);
          int v201 = v199 + (v200 >> 16) * v198 + (((unsigned __int16)v200 * v198) >> 16);
          int v202 = v193 - v196;
          if (v193 - v196 + 7 >= 0x20) {
            int v203 = 0;
          }
          else {
            int v203 = v201 >> (v202 + 7);
          }
          int v204 = (int)0x80000000 >> (-7 - v202);
          if (v201 > v204) {
            int v204 = v201;
          }
          if (v201 <= (int)(0x7FFFFFFFu >> (-7 - v202))) {
            unsigned int v205 = v204;
          }
          else {
            unsigned int v205 = 0x7FFFFFFFu >> (-7 - v202);
          }
          int v206 = v205 << (-7 - v202);
          if (v202 > -8) {
            int v206 = v203;
          }
          int v207 = 64881 - v206;
          silk_bwexpander_32(&v320, v117, 64881 - v206);
          silk_bwexpander_32(&v322, v117, v207);
          if ((int)v117 >= 2)
          {
            uint64_t v208 = v312;
            do
            {
              int v209 = *(&v320 + v208);
              int v210 = *(&v322 + v208);
              BOOL v286 = v208-- <= 1;
              *(&v320 + v208) += (v209 >> 16) * v52 + (((unsigned __int16)v209 * v52) >> 16);
              *(&v322 + v208) += (v210 >> 16) * v52 + (((unsigned __int16)v210 * v52) >> 16);
            }
            while (!v286);
          }
          int v211 = (v320 >> 16) * v50 + (((unsigned __int16)v320 * v50) >> 16);
          unsigned int v212 = v211 + 0x1000000;
          BOOL v29 = v211 + 0x1000000 < 0;
          unsigned int v213 = -16777216 - v211;
          if (!v29) {
            unsigned int v213 = v212;
          }
          unsigned int v214 = __clz(v213);
          int v215 = v212 << (v214 - 1);
          int v216 = 0x1FFFFFFF / (v215 >> 16);
          int v217 = v216 * v315 + ((v216 * v314) >> 16);
          int v218 = v316 - (((unint64_t)(v215 * (uint64_t)v217) >> 29) & 0xFFFFFFF8);
          int v219 = v217 + (v218 >> 16) * v216 + (((unsigned __int16)v218 * v216) >> 16);
          int v220 = v313 - v214;
          if ((v220 + 1) >= 0x20) {
            int v221 = 0;
          }
          else {
            int v221 = v219 >> (v220 + 1);
          }
          int v222 = (int)0x80000000 >> ~(_BYTE)v220;
          if (v219 > v222) {
            int v222 = v219;
          }
          if (v219 <= (int)(0x7FFFFFFFu >> ~(_BYTE)v220)) {
            unsigned int v223 = v222;
          }
          else {
            unsigned int v223 = 0x7FFFFFFFu >> ~(_BYTE)v220;
          }
          int v224 = v223 << ~(_BYTE)v220;
          if (v220 <= -2) {
            int v135 = v224;
          }
          else {
            int v135 = v221;
          }
          int v225 = (v322 >> 16) * v50 + (((unsigned __int16)v322 * v50) >> 16);
          unsigned int v226 = v225 + 0x1000000;
          BOOL v29 = v225 + 0x1000000 < 0;
          unsigned int v227 = -16777216 - v225;
          if (!v29) {
            unsigned int v227 = v226;
          }
          unsigned int v228 = __clz(v227);
          int v229 = v226 << (v228 - 1);
          int v230 = 0x1FFFFFFF / (v229 >> 16);
          int v231 = v230 * v315 + ((v230 * v314) >> 16);
          int v232 = v316 - (((unint64_t)(v229 * (uint64_t)v231) >> 29) & 0xFFFFFFF8);
          int v233 = v231 + (v232 >> 16) * v230 + (((unsigned __int16)v232 * v230) >> 16);
          int v234 = v313 - v228;
          if ((v234 + 1) >= 0x20) {
            int v235 = 0;
          }
          else {
            int v235 = v233 >> (v234 + 1);
          }
          signed int v236 = (int)0x80000000 >> ~(_BYTE)v234;
          if (v233 > v236) {
            signed int v236 = v233;
          }
          unsigned int v237 = v233 <= (int)(0x7FFFFFFFu >> ~(_BYTE)v234) ? v236 : 0x7FFFFFFFu >> ~(_BYTE)v234;
          int v238 = v237 << ~(_BYTE)v234;
          int v150 = v234 <= -2 ? v238 : v235;
          int v239 = &v322;
          int v240 = &v320;
          uint64_t v241 = v117;
          do
          {
            *int v240 = (__int16)*v240 * (v135 >> 16)
                  + (((__int16)*v240 * (unsigned __int16)v135) >> 16)
                  + (((*v240 >> 15) + 1) >> 1) * v135;
            ++v240;
            *int v239 = (__int16)*v239 * (v150 >> 16)
                  + (((__int16)*v239 * (unsigned __int16)v150) >> 16)
                  + (((*v239 >> 15) + 1) >> 1) * v150;
            ++v239;
            --v241;
          }
          while (v241);
          int v155 = v317 + 1;
        }
        while (v317 != 9);
        int v8 = v304;
        uint64_t v7 = v305;
        uint64_t v242 = v304[1165];
        uint64_t v99 = v308;
        if ((int)v242 >= 1)
        {
          int v243 = &v320;
          BOOL v244 = &v322;
          do
          {
            int v246 = *v244++;
            int v245 = v246;
            unsigned int v247 = ((v246 >> 10) + 1) >> 1;
            if (v246 < -67109888) {
              LOWORD(v247) = 0x8000;
            }
            if (v245 <= 67107839) {
              __int16 v248 = v247;
            }
            else {
              __int16 v248 = 0x7FFF;
            }
            *(v153 - 64) = v248;
            int v250 = *v243++;
            int v249 = v250;
            unsigned int v251 = ((v250 >> 10) + 1) >> 1;
            if (v250 < -67109888) {
              LOWORD(v251) = 0x8000;
            }
            if (v249 <= 67107839) {
              __int16 v252 = v251;
            }
            else {
              __int16 v252 = 0x7FFF;
            }
            *v153++ = v252;
            --v242;
          }
          while (v242);
        }
      }
      uint64_t v49 = v307 + 2 * v306;
      uint64_t v47 = v99 + 1;
    }
    while (v47 < v8[1151]);
  }
  int v253 = silk_log2lin(-10486 * (SHIDWORD(v296) >> 16) - ((10486 * WORD2(v296)) >> 16) + 2048);
  int v254 = silk_log2lin(0x828u);
  LODWORD(v255) = v8[1151];
  if ((int)v255 >= 1)
  {
    uint64_t v256 = 0;
    do
    {
      int v257 = v254
           + *(_DWORD *)(v7 + 4 * v256) * (((v253 >> 15) + 1) >> 1)
           + (*(int *)(v7 + 4 * v256) >> 16) * (__int16)v253
           + (((unsigned __int16)*(_DWORD *)(v7 + 4 * v256) * (__int16)v253) >> 16);
      if (v257 < 0) {
        int v257 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v7 + 4 * v256++) = v257;
      uint64_t v255 = v8[1151];
    }
    while (v256 < v255);
    if ((int)v255 >= 1)
    {
      uint64_t v258 = 0;
      int v259 = (((((410 * *(_DWORD *)(v7 + 484) + 3355443) >> 9) + 1) >> 1) + 0x10000) >> 16;
      int v260 = (unsigned __int16)((((410 * *(_DWORD *)(v7 + 484) + 3355443) >> 9) + 1) >> 1);
      do
      {
        *(_DWORD *)(v7 + 412 + 4 * v258) = *(__int16 *)(v7 + 412 + 4 * v258) * v259
                                         + ((*(__int16 *)(v7 + 412 + 4 * v258) * v260) >> 16);
        ++v258;
      }
      while (v258 < v8[1151]);
      LODWORD(v255) = v8[1151];
    }
  }
  int v261 = v8[1139];
  signed int v262 = (((v8[1186] << 16 >> 14) & 0xFFFFFFC0 ^ 0xFFFE0000) + 0x40000) * v261;
  int v263 = *v297;
  int v264 = v8[1150];
  if (v263 == 2)
  {
    if ((int)v255 >= 1)
    {
      uint64_t v265 = 0;
      int v266 = (unsigned __int16)(v262 >> 8);
      int v267 = (v262 >> 24) + 1;
      int v268 = 3277 / v264;
      do
      {
        uint64_t v269 = v7 + 4 * v265;
        *(_DWORD *)(v269 + 396) = (unsigned __int16)(49152 / *(_DWORD *)(v269 + 124) + v268 - 0x4000)
                                - (((__int16)(49152 / *(_DWORD *)(v269 + 124) + v268) * v266
                                  + (((49152 / *(_DWORD *)(v269 + 124) + v268) * v267) << 16)) & 0xFFFF0000)
                                + 0x40000000;
        ++v265;
      }
      while (v265 < v8[1151]);
      int v261 = v8[1139];
    }
    int v270 = -16384 - ((49152 * ((5832704 * v261 + 39322 * (__int16)v261) >> 16)) >> 16);
  }
  else
  {
    unsigned int v271 = (unsigned __int16)(21299 / v264 - 0x4000)
         - ((((39322 * (21299 / v264)) >> 16) * (unsigned __int16)(v262 >> 8)
           + ((21299 / v264 + ((39322 * (21299 / v264)) >> 16) * (v262 >> 24)) << 16)) & 0xFFFF0000)
         + 0x40000000;
    *(_DWORD *)(v7 + 396) = v271;
    if (v8[1151] >= 2)
    {
      uint64_t v272 = 100;
      do
      {
        *(_DWORD *)(v7 + 4 * v272) = v271;
        uint64_t v273 = v272 - 98;
        ++v272;
      }
      while (v273 < v8[1151]);
    }
    int v270 = -16384;
  }
  v274 = (int32x2_t *)(v8 + 1807);
  int v275 = *(_DWORD *)(v7 + 484);
  int v276 = v8[2449];
  int v277 = (((0x20000 - 8 * v275) >> 16) * (__int16)v276 + ((((0x20000 - 8 * v275) & 0xFFF8) * (__int16)v276) >> 16)) >> 16;
  unsigned int v278 = (6554
        * (unsigned __int16)(((0x20000 - 8 * v275) >> 16) * v276
                                         + ((((0x20000 - 8 * v275) & 0xFFF8u) * (__int16)v276) >> 16))) >> 16;
  int v279 = *(_DWORD *)(v7 + 480);
  uint64_t result = 0x10000;
  if (v263 == 2)
  {
    int v281 = 0x10000
         - ((__int16)v279 * ((0x40000 - 16 * v275) >> 16)
          + (((__int16)v279 * ((0x40000 - 16 * v275) & 0xFFF0)) >> 16));
    signed int v282 = 2 * (13107 * (v281 >> 16) + ((13107 * (unsigned __int16)v281) >> 16)) + 39322;
    signed int v283 = v276 << 15;
    unsigned int v284 = __clz(v283);
    if (v284) {
      unsigned int v285 = 0x8000;
    }
    else {
      unsigned int v285 = 46214;
    }
    uint64_t result = ((int)(((213 * ((v283 >> (24 - v284)) & 0x7F)) | 0x10000)
                                * (v285 >> (v284 >> 1))) >> 16);
    BOOL v286 = v283 < 1;
    if (v283 >= 1) {
      int v287 = (v282 >> 16) * result;
    }
    else {
      int v287 = 0;
    }
    if (v286) {
      int v288 = 0;
    }
    else {
      int v288 = result;
    }
    int v289 = v287 + ((v288 * (v282 & 0xFFFE)) >> 16);
  }
  else
  {
    int v289 = 0;
  }
  uint64_t v290 = 0;
  int v291 = 6554 * (v277 + ((0x10000 - 4 * v279) >> 16));
  int32x2_t v292 = vdup_n_s32(0x6666u);
  do
  {
    v293.i32[0] = v278 + ((6554 * (unsigned __int16)(-4 * v279)) >> 16) - *(void *)v274 + v291;
    v293.i32[1] = v289 - HIDWORD(*(unint64_t *)v274);
    uint32x2_t v294 = vsra_n_u32((uint32x2_t)vmla_s32(*v274, vshr_n_s32(v293, 0x10uLL), v292), (uint32x2_t)vmul_s32((int32x2_t)vand_s8((int8x8_t)v293, (int8x8_t)0xFFFF0000FFFFLL), v292), 0x10uLL);
    v8[1809] += 26214 * ((v270 - v8[1809]) >> 16) + ((26214 * (unsigned __int16)(v270 - v8[1809])) >> 16);
    int32x2_t *v274 = (int32x2_t)v294;
    v295 = (_DWORD *)(v7 + v290);
    v295[107] = ((v294.i32[0] >> 1) + 1) >> 1;
    v295[115] = ((v8[1808] >> 1) + 1) >> 1;
    v295[111] = ((v8[1809] >> 1) + 1) >> 1;
    v290 += 4;
  }
  while (v290 != 16);
  return result;
}

unint64_t silk_corrVector_FIX(unint64_t result, __int16 *a2, int a3, int a4, _DWORD *a5, int a6)
{
  unsigned int v6 = a5;
  unint64_t v9 = result + 2 * (a4 - 1);
  if (a6 <= 0)
  {
    if (a4 >= 1)
    {
      uint64_t v13 = a4;
      do
      {
        uint64_t result = silk_inner_prod_aligned(v9, a2, a3);
        *v6++ = result;
        v9 -= 2;
        --v13;
      }
      while (v13);
    }
  }
  else if (a4 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (a3 < 1)
      {
        int v12 = 0;
      }
      else
      {
        uint64_t v11 = 0;
        int v12 = 0;
        do
        {
          v12 += (a2[v11] * *(__int16 *)(v9 + v11 * 2)) >> a6;
          ++v11;
        }
        while (a3 != v11);
      }
      a5[i] = v12;
      v9 -= 2;
    }
  }
  return result;
}

unint64_t silk_corrMatrix_FIX(uint64_t a1, int a2, unsigned int a3, int a4, int *a5, int *a6)
{
  uint64_t v57 = 0;
  uint64_t v12 = a3 - 1;
  unint64_t result = (unint64_t)silk_sum_sqr_shift((unsigned int *)&v57, (int *)&v57 + 1, a1, (int)v12 + a2);
  unsigned int v14 = __clz(v57);
  BOOL v15 = __OFSUB__(a4, v14);
  int v16 = a4 - v14;
  if ((v16 < 0) ^ v15 | (v16 == 0)) {
    int v17 = 0;
  }
  else {
    int v17 = v16;
  }
  int v18 = (int)v57 >> v17;
  int v19 = v17 + HIDWORD(v57);
  HIDWORD(v57) += v17;
  if ((int)a3 >= 2)
  {
    uint64_t v20 = v12;
    int v21 = (__int16 *)a1;
    do
    {
      int v22 = *v21++;
      v18 -= (v22 * v22) >> v19;
      --v20;
    }
    while (v20);
  }
  int v23 = *a6;
  if (*a6 > v19)
  {
    v18 >>= *a6 - v19;
    HIDWORD(v57) = *a6;
    int v19 = v23;
  }
  *a5 = v18;
  signed int v24 = a3 - 2;
  if ((int)a3 >= 2)
  {
    unint64_t v25 = a1 + 2 * (int)v12;
    uint64_t v26 = a2;
    signed int v27 = (__int16 *)(v25 - 2);
    uint64_t v28 = a3 - 1;
    unsigned int v29 = a3 + 1;
    do
    {
      int v18 = ((*v27 * *v27) >> v19) + v18 - ((v27[a2] * v27[a2]) >> v19);
      a5[v29] = v18;
      --v27;
      v29 += a3 + 1;
      --v28;
    }
    while (v28);
    LODWORD(v57) = v18;
    uint64_t v30 = v24;
    unsigned int v31 = (__int16 *)(a1 + 2 * v24);
    if (v19 <= 0)
    {
      int v54 = a2;
      unsigned int v53 = a6;
      int v42 = 2 * a3;
      uint64_t v43 = (uint64_t)&a5[a3 + 2];
      uint64_t v44 = a1 + 2 * (int)v12 - 2;
      uint64_t v45 = 2 * v26 + 2 * v24 + a1 - 2;
      uint64_t v46 = 1;
      unsigned int v47 = v12;
      uint64_t v48 = v44 + 2 * v26;
      do
      {
        unsigned int v55 = v47;
        int v56 = (_DWORD *)v43;
        unint64_t result = silk_inner_prod_aligned(v25, v31, v54);
        LODWORD(v57) = result;
        a5[v46 * a3] = result;
        a5[v46] = result;
        if (v46 < a3 - 1)
        {
          unint64_t v49 = 0;
          int v50 = v56;
          int v51 = v42;
          uint64_t v52 = 1;
          do
          {
            unint64_t result = (result
                                  - *(__int16 *)(v45 + v49) * *(__int16 *)(v48 + v49)
                                  + v31[v49 / 2 - 1] * *(__int16 *)(v44 + v49));
            a5[v52 + v51] = result;
            *int v50 = result;
            ++v52;
            v51 += a3;
            v50 += a3 + 1;
            v49 -= 2;
          }
          while (2 * v55 - 2 + v49);
          LODWORD(v57) = result;
        }
        --v31;
        ++v46;
        unsigned int v47 = v55 - 1;
        v42 += a3;
        uint64_t v43 = (uint64_t)(v56 + 1);
        v45 -= 2;
      }
      while (v46 != a3);
      int v19 = HIDWORD(v57);
      a6 = v53;
    }
    else
    {
      int v32 = 2 * a3;
      uint64_t v33 = (uint64_t)&a5[a3 + 2];
      uint64_t v34 = a1 + 2 * (int)v12 - 2;
      uint64_t v35 = 2 * a2 + 2 * v30 + a1 - 2;
      uint64_t v36 = 1;
      do
      {
        if (a2 < 1)
        {
          int v38 = 0;
        }
        else
        {
          uint64_t v37 = 0;
          int v38 = 0;
          do
          {
            v38 += (v31[v37] * *(__int16 *)(v25 + v37 * 2)) >> v19;
            ++v37;
          }
          while (a2 != v37);
        }
        unint64_t result = v36 * a3;
        a5[result] = v38;
        a5[v36] = v38;
        if (v36 < a3 - 1)
        {
          unint64_t result = 0;
          char v39 = (_DWORD *)v33;
          int v40 = v32;
          uint64_t v41 = 1;
          do
          {
            int v38 = ((*(__int16 *)((char *)v31 + result - 2) * *(__int16 *)(v34 + result)) >> v19)
                + v38
                - ((*(__int16 *)(v35 + result) * *(__int16 *)(v34 + 2 * a2 + result)) >> v19);
            a5[v41 + v40] = v38;
            *char v39 = v38;
            ++v41;
            v40 += a3;
            v39 += a3 + 1;
            result -= 2;
          }
          while (2 * v12 - 2 + result);
        }
        --v31;
        ++v36;
        LODWORD(v12) = v12 - 1;
        v32 += a3;
        v33 += 4;
        v35 -= 2;
      }
      while (v36 != a3);
    }
  }
  *a6 = v19;
  return result;
}

uint64_t silk_schur64(char *a1, const float *a2, int a3)
{
  v35[16] = *MEMORY[0x263EF8340];
  if (*(int *)a2 < 1)
  {
    bzero(a1, 4 * a3);
    return 0;
  }
  else
  {
    if (a3 < 0) {
      goto LABEL_26;
    }
    uint64_t v3 = (a3 + 1);
    int v4 = (float32x2_t *)v33;
    do
    {
      float32x2_t v5 = vld1_dup_f32(a2++);
      *v4++ = v5;
      --v3;
    }
    while (v3);
    if (a3 < 1)
    {
LABEL_26:
      LODWORD(v7) = 0;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      unsigned int v8 = a3;
      while (1)
      {
        uint64_t v9 = v7++;
        int v10 = *(_DWORD *)&v33[8 * v7];
        signed int v11 = v10 >= 0 ? *(_DWORD *)&v33[8 * v7] : -v10;
        if (v11 >= v34) {
          break;
        }
        unsigned int v12 = __clz(v11);
        int v13 = -v10 << (v12 - 1);
        if (v34 >= 0) {
          unsigned int v14 = v34;
        }
        else {
          unsigned int v14 = -v34;
        }
        unsigned int v15 = __clz(v14);
        int v16 = v34 << (v15 - 1);
        int v17 = 0x1FFFFFFF / (v16 >> 16);
        int v18 = v17 * (v13 >> 16) + ((v17 * (unsigned __int16)v13) >> 16);
        int v19 = v13 - (((unint64_t)(v18 * (uint64_t)v16) >> 29) & 0xFFFFFFF8);
        int v20 = v18 + (v19 >> 16) * v17 + (((unsigned __int16)v19 * v17) >> 16);
        int v21 = v12 - v15;
        int v22 = v20 >> (v12 - v15 - 2);
        int v23 = (int)0x80000000 >> (2 - v21);
        if (v20 > v23) {
          int v23 = v20;
        }
        if (v20 <= (int)(0x7FFFFFFFu >> (2 - v21))) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = 0x7FFFFFFFu >> (2 - v21);
        }
        int v25 = v24 << (2 - v21);
        if (v21 > 1) {
          int v25 = v22;
        }
        *(_DWORD *)&a1[4 * v9] = ((v25 >> 14) + 1) >> 1;
        if ((int)v9 < a3)
        {
          int v26 = v25;
          uint64_t v27 = v8;
          uint64_t v28 = v35;
          do
          {
            int v29 = v28[v6];
            int v30 = *((_DWORD *)v28 - 1);
            LODWORD(v28[v6]) = v29 + ((unint64_t)(v26 * (uint64_t)(2 * v30)) >> 32);
            *((_DWORD *)v28++ - 1) = v30 + ((unint64_t)(v26 * (uint64_t)(2 * v29)) >> 32);
            --v27;
          }
          while (v27);
        }
        --v8;
        ++v6;
        if (v7 == a3) {
          goto LABEL_34;
        }
      }
      if (v10 > 0) {
        int v32 = -64881;
      }
      else {
        int v32 = 64881;
      }
      *(_DWORD *)&a1[4 * v9] = v32;
    }
    if ((int)v7 < a3) {
      bzero(&a1[4 * v7], 4 * (~v7 + a3) + 4);
    }
LABEL_34:
    if (v34 <= 1) {
      return 1;
    }
    else {
      return v34;
    }
  }
}

uint64_t silk_LTP_scale_ctrl_FIX(uint64_t result, uint64_t a2, int a3)
{
  if (a3)
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    signed int v4 = 51 * (((__int16)(*(_DWORD *)(result + 5792) + *(_DWORD *)(result + 4640)) * *(__int16 *)(a2 + 496)) >> 16)
       + ((51
         * (unsigned __int16)((*(_DWORD *)(result + 5792) + *(_DWORD *)(result + 4640))
                                          * *(_WORD *)(a2 + 496))) >> 16);
    unsigned int v3 = v4 & ~(v4 >> 31);
    if (v3 >= 2) {
      LOBYTE(v3) = 2;
    }
  }
  *(unsigned char *)(result + 4817) = v3;
  *(_DWORD *)(a2 + 120) = silk_LTPScales_table_Q14[v3];
  return result;
}

void silk_burg_modified(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v223 = *MEMORY[0x263EF8340];
  uint64_t v210 = 0;
  silk_sum_sqr_shift((unsigned int *)&v210, (int *)&v210 + 1, a4, a7 * a6);
  if (SHIDWORD(v210) < 8)
  {
    int v13 = 3 - __clz(v210);
    int v14 = -16 - HIDWORD(v210);
    if (v13 > -16 - HIDWORD(v210)) {
      int v14 = v13;
    }
    if (v13 >= 7 - HIDWORD(v210)) {
      int v13 = 7 - HIDWORD(v210);
    }
    int v15 = (int)v210 >> v13;
    if (!(v210 >> 29))
    {
      int v15 = v210 << -(char)v14;
      int v13 = v14;
    }
    LODWORD(v210) = v15;
    int v12 = v13 + HIDWORD(v210);
  }
  else
  {
    LODWORD(v210) = v210 << (BYTE4(v210) - 7);
    int v12 = 7;
  }
  int v188 = a1;
  unsigned int v189 = a2;
  HIDWORD(v210) = v12;
  long long v219 = 0u;
  long long v220 = 0u;
  long long v221 = 0u;
  long long v222 = 0u;
  int v199 = a8;
  if (v12 <= 0)
  {
    if (a7 >= 1)
    {
      uint64_t v23 = 0;
      int v24 = a6 - a8;
      uint64_t v25 = (a8 + 1);
      uint64_t v26 = a4;
      do
      {
        celt_pitch_xcorr_c((__int16 *)(a4 + 2 * v23 * a6), a4 + 2 * v23 * a6 + 2, (uint64_t)v211, a6 - a8, a8);
        if (a8 >= 1)
        {
          uint64_t v27 = -1;
          int v28 = a8 - 1;
          uint64_t v29 = 1;
          int v30 = v24 + 1;
          do
          {
            if (v24 + (int)v29 >= a6)
            {
              int v31 = 0;
            }
            else
            {
              int v31 = 0;
              int v32 = (__int16 *)(v26 + 2 * (v27 + v30));
              uint64_t v33 = (__int16 *)(v26 + 2 * v30);
              int v34 = v28;
              do
              {
                int v36 = *v33++;
                int v35 = v36;
                int v37 = *v32++;
                v31 += v37 * v35;
                --v34;
              }
              while (v34);
            }
            v211[v29++ - 1] += v31;
            ++v30;
            --v27;
            --v28;
          }
          while (v29 != v25);
          int v38 = -HIDWORD(v210);
          char v39 = v211;
          int v40 = &v219;
          uint64_t v41 = v25 - 1;
          do
          {
            int v42 = *v39++;
            *(_DWORD *)v40 += v42 << v38;
            int v40 = (long long *)((char *)v40 + 4);
            --v41;
          }
          while (v41);
        }
        ++v23;
        v26 += 2 * a6;
      }
      while (v23 != a7);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v16 = 0;
    int v17 = (__int16 *)(a4 + 2);
    uint64_t v206 = (a8 + 1) - 1;
    do
    {
      if (a8 >= 1)
      {
        int v18 = &v219;
        uint64_t v19 = v206;
        int v20 = v17;
        int v21 = a6 - 1;
        do
        {
          uint64_t v22 = silk_inner_prod16_aligned_64((__int16 *)(a4 + 2 * v16 * a6), v20, v21);
          *(_DWORD *)v18 += v22 >> SBYTE4(v210);
          int v18 = (long long *)((char *)v18 + 4);
          --v21;
          ++v20;
          --v19;
        }
        while (v19);
      }
      ++v16;
      v17 += a6;
      a8 = v199;
    }
    while (v16 != a7);
  }
  v217[0] = v219;
  v217[1] = v220;
  v217[2] = v221;
  long long v218 = v222;
  unint64_t v43 = (unint64_t)(42950 * (int)v210) >> 32;
  int v44 = ((unint64_t)(0x10000A7C6 * (int)v210) >> 32) + 1;
  int v214 = v44;
  v212[0] = v44;
  if (a8 >= 1)
  {
    unint64_t v185 = (unint64_t)(42950 * (int)v210) >> 32;
    int v186 = v210;
    uint64_t v45 = 0;
    int v46 = HIDWORD(v210);
    int v204 = -HIDWORD(v210);
    char v47 = ~BYTE4(v210);
    char v203 = 16 - BYTE4(v210);
    char v205 = 7 - BYTE4(v210);
    if (a5 >= 0) {
      unsigned int v48 = a5;
    }
    else {
      unsigned int v48 = -a5;
    }
    unsigned int v190 = __clz(v48);
    uint64_t v49 = a6;
    uint64_t v50 = 2 * a6;
    int v51 = (__int16 *)a4;
    uint64_t v201 = a4 - 2;
    uint64_t v202 = a4 + v50;
    uint64_t v52 = &v213;
    uint64_t v53 = -4;
    uint64_t v200 = a4;
    uint64_t v54 = 1;
    uint64_t v55 = 2;
    int v56 = 0x40000000;
    uint64_t v57 = a7;
    uint64_t v207 = v49;
    uint64_t v209 = (v49 << 32) - 0x100000000;
    uint64_t v191 = a8;
    int v192 = HIDWORD(v210);
    while (1)
    {
      int v198 = v56;
      uint64_t v195 = v55;
      unsigned int v196 = v52;
      uint64_t v197 = v53;
      if (v46 <= -2)
      {
        if (a7 >= 1)
        {
          uint64_t v81 = 0;
          unsigned int v82 = (__int16 *)v200;
          char v83 = (__int16 *)v201;
          uint64_t v84 = v202;
          do
          {
            int v85 = &v51[v81 * v207];
            int v86 = v85[v45];
            int v87 = v85[~v45 + v207];
            int v88 = v86 << 17;
            int v89 = v87 << 17;
            if (v45)
            {
              uint64_t v90 = 0;
              int v91 = v86 << v204;
              int v92 = v87 << v204;
              int v93 = v83;
              do
              {
                int v94 = *v93--;
                *((_DWORD *)&v219 + v90) -= v91 * v94;
                int v95 = *(__int16 *)(v84 + 2 * v90);
                *((_DWORD *)v217 + v90) -= v92 * v95;
                int v96 = ((v216[v90] >> 7) + 1) >> 1;
                v88 += v96 * v94;
                v89 += v96 * v95;
                ++v90;
              }
              while (v45 != v90);
            }
            uint64_t v97 = 0;
            int v98 = -v88;
            int v99 = -v89;
            unsigned int v100 = v82;
            uint64_t v101 = v209;
            do
            {
              int v102 = *v100--;
              *(_DWORD *)&v215[4 * v97 - 4] += (__int16)(v102 << v47) * (v98 >> 16)
                                             + (((__int16)(v102 << v47) * (unsigned __int16)v98) >> 16)
                                             + (((v102 << v47 >> 15) + 1) >> 1) * v98;
              int v103 = *(__int16 *)((char *)v85 + (v101 >> 31)) << v47;
              v212[v97++] += (__int16)v103 * (v99 >> 16)
                           + (((__int16)v103 * (unsigned __int16)v99) >> 16)
                           + (((v103 >> 15) + 1) >> 1) * v99;
              v101 += 0x100000000;
            }
            while (v54 != v97);
            ++v81;
            v84 += v50;
            char v83 = (__int16 *)((char *)v83 + v50);
            unsigned int v82 = (__int16 *)((char *)v82 + v50);
            uint64_t v57 = a7;
            int v51 = (__int16 *)a4;
          }
          while (v81 != a7);
        }
      }
      else if (a7 >= 1)
      {
        uint64_t v58 = 0;
        uint64_t v60 = (__int16 *)v200;
        unsigned int v59 = (__int16 *)v201;
        uint64_t v61 = v202;
        do
        {
          int v62 = &v51[v58 * v207];
          int v63 = v62[v45];
          int v64 = v62[~v45 + v207];
          int v65 = v63 << 9;
          int v66 = v64 << 9;
          if (v45)
          {
            uint64_t v67 = 0;
            int v68 = -(v64 << v203);
            int v69 = -(v63 << v203);
            int v70 = v69 >> 16;
            int v71 = (unsigned __int16)v69;
            unsigned int v72 = v59;
            do
            {
              int v73 = *v72--;
              *((_DWORD *)&v219 + v67) += v70 * v73 + ((v71 * v73) >> 16);
              int v74 = *(__int16 *)(v61 + 2 * v67);
              *((_DWORD *)v217 + v67) += (v68 >> 16) * v74 + (((unsigned __int16)v68 * v74) >> 16);
              int v75 = v216[v67] >> 16;
              int v76 = (unsigned __int16)v216[v67];
              v65 += v75 * v73 + ((v76 * v73) >> 16);
              v66 += v75 * v74 + ((v76 * v74) >> 16);
              ++v67;
            }
            while (v45 != v67);
          }
          uint64_t v77 = 0;
          int v78 = v60;
          uint64_t v79 = v209;
          do
          {
            int v80 = *v78--;
            *(_DWORD *)&v215[4 * v77 - 4] += (-v65 << v205 >> 16) * v80
                                           + (((unsigned __int16)(-v65 << v205) * v80) >> 16);
            v212[v77++] += (-v66 << v205 >> 16) * *(__int16 *)((char *)v62 + (v79 >> 31))
                         + (((unsigned __int16)(-v66 << v205) * *(__int16 *)((char *)v62 + (v79 >> 31))) >> 16);
            v79 += 0x100000000;
          }
          while (v54 != v77);
          ++v58;
          v61 += v50;
          unsigned int v59 = (__int16 *)((char *)v59 + v50);
          uint64_t v60 = (__int16 *)((char *)v60 + v50);
          uint64_t v57 = a7;
          int v51 = (__int16 *)a4;
        }
        while (v58 != a7);
      }
      int v104 = *((_DWORD *)&v219 + v45);
      int v105 = *((_DWORD *)v217 + v45);
      int v106 = v214 + v212[0];
      int v107 = 0;
      if (v45)
      {
        unint64_t v108 = 4;
        uint64_t v109 = v45;
        int v111 = v198;
        int v110 = v199;
        int v112 = a5;
        do
        {
          int v113 = *(_DWORD *)&v215[v108 + 60];
          if (v113 >= 0) {
            unsigned int v114 = *(_DWORD *)&v215[v108 + 60];
          }
          else {
            unsigned int v114 = -v113;
          }
          int v115 = __clz(v114);
          if (v115 >= 8) {
            LOBYTE(v115) = 8;
          }
          uint64_t v116 = v113 << (v115 - 1);
          char v117 = 8 - v115;
          v104 += (unint64_t)(v216[v109 + 15] * v116) >> 32 << v117;
          v105 += (unint64_t)(*((int *)&v218 + v109 + 3) * v116) >> 32 << v117;
          v107 += (unint64_t)((int)v212[v109] * v116) >> 32 << v117;
          v106 += (unint64_t)((*(_DWORD *)&v215[v108 - 4] + (uint64_t)(int)v212[v108 / 4]) * v116) >> 32 << v117;
          v108 += 4;
          --v109;
        }
        while (v109);
      }
      else
      {
        int v111 = v198;
        int v110 = v199;
        int v112 = a5;
      }
      uint64_t v118 = v45 + 1;
      *(_DWORD *)&v215[4 * v45] = v104;
      v212[v45 + 1] = v105;
      signed int v119 = 2 * (v105 + v107);
      int v120 = -2 * (v105 + v107);
      if (v120 >= 0) {
        signed int v119 = -2 * (v105 + v107);
      }
      if (v119 >= v106)
      {
        int v134 = v120 > 0 ? 0x7FFFFFFF : 0x80000000;
        uint64_t v130 = v197;
      }
      else
      {
        unsigned int v121 = __clz(v119);
        unsigned int v122 = v106 >= 0 ? v106 : -v106;
        unsigned int v123 = __clz(v122);
        int v124 = v106 << (v123 - 1);
        int v125 = 0x1FFFFFFF / (v124 >> 16);
        int v126 = v125 * (v120 << (v121 - 1) >> 16) + ((v125 * ((v120 << (v121 - 1)) & 0xFFFE)) >> 16);
        int v127 = (v120 << (v121 - 1)) - (((unint64_t)(v126 * (uint64_t)v124) >> 29) & 0xFFFFFFF8);
        int v128 = v126 + (v127 >> 16) * v125 + (((v127 & 0xFFFE) * v125) >> 16);
        int v129 = v121 - v123;
        uint64_t v130 = v197;
        if (v129 > 1)
        {
          int v134 = v128 >> (v129 - 2);
        }
        else
        {
          char v131 = 2 - v129;
          unsigned int v132 = (int)0x80000000 >> v131;
          if (v128 > (int)0x80000000 >> v131) {
            unsigned int v132 = v128;
          }
          unsigned int v133 = v128 <= (int)(0x7FFFFFFFu >> v131) ? v132 : 0x7FFFFFFFu >> v131;
          int v134 = v133 << v131;
        }
      }
      unint64_t v135 = ((unint64_t)((int)((0x4000000000000000 - ((v134 * (uint64_t)v134) & 0x7FFFFFFF00000000uLL)) >> 32)
                               * (uint64_t)v111) >> 30) & 0xFFFFFFFC;
      int v136 = v135;
      if ((int)v135 <= v112)
      {
        if (v111 >= 0) {
          unsigned int v137 = v111;
        }
        else {
          unsigned int v137 = -v111;
        }
        unsigned int v138 = __clz(v137);
        int v139 = v111 << (v138 - 1);
        int v140 = 0x1FFFFFFF / (v139 >> 16);
        int v141 = v140 * (a5 << (v190 - 1) >> 16) + ((v140 * (unsigned __int16)(a5 << (v190 - 1))) >> 16);
        int v142 = (a5 << (v190 - 1)) - (((unint64_t)(v141 * (uint64_t)v139) >> 29) & 0xFFFFFFF8);
        int v143 = v141 + (v142 >> 16) * v140 + (((unsigned __int16)v142 * v140) >> 16);
        int v144 = v190 - v138;
        int v145 = v143 >> (v144 - 1);
        int v146 = (int)0x80000000 >> (1 - v144);
        if (v143 > v146) {
          int v146 = v143;
        }
        if (v143 <= (int)(0x7FFFFFFFu >> (1 - v144))) {
          unsigned int v147 = v146;
        }
        else {
          unsigned int v147 = 0x7FFFFFFFu >> (1 - v144);
        }
        int v148 = v147 << (1 - v144);
        if (v144 > 0) {
          int v148 = v145;
        }
        unsigned int v149 = 0x40000000 - v148;
        if (v148 <= 0x3FFFFFFF)
        {
          unsigned int v151 = __clz(v149);
          char v152 = v149;
          if (v151 != 24)
          {
            if (v149 <= 0x7F) {
              char v152 = (v149 >> (56 - v151)) | ((_BYTE)v149 << (v151 - 24));
            }
            else {
              char v152 = ((_BYTE)v149 << (v151 + 8)) | (v149 >> (24 - v151));
            }
          }
          if (v151) {
            unsigned int v153 = 0x8000;
          }
          else {
            unsigned int v153 = 46214;
          }
          signed int v150 = (v153 >> (v151 >> 1)) + ((213 * (v153 >> (v151 >> 1)) * (v152 & 0x7F)) >> 16);
        }
        else
        {
          signed int v150 = 0;
        }
        unsigned int v154 = (((int)v149 / v150 + v150) << 15) & 0xFFFF0000;
        if (v120 >= 0) {
          int v134 = v154;
        }
        else {
          int v134 = -v154;
        }
        int v136 = v112;
      }
      if (v45)
      {
        unint64_t v155 = 0;
        uint64_t v156 = v130;
        do
        {
          int v157 = v216[v155];
          int v158 = *(int *)((char *)v216 + v156);
          v216[v155] = (((unint64_t)(v158 * (uint64_t)v134) >> 31) & 0xFFFFFFFE) + v157;
          *(int *)((char *)v216 + v156) = (((unint64_t)(v157 * (uint64_t)v134) >> 31) & 0xFFFFFFFE) + v158;
          ++v155;
          v156 -= 4;
        }
        while (v155 < v118 >> 1);
      }
      v216[v45] = v134 >> 6;
      if ((int)v135 <= v112) {
        break;
      }
      uint64_t v159 = 0;
      int v160 = v196;
      uint64_t v161 = v191;
      do
      {
        int v162 = *(_DWORD *)&v215[4 * v159 - 4];
        int v163 = *v160;
        *(_DWORD *)&v215[4 * v159 - 4] = (((unint64_t)(*v160 * (uint64_t)v134) >> 31) & 0xFFFFFFFE) + v162;
        *v160-- = (((unint64_t)(v162 * (uint64_t)v134) >> 31) & 0xFFFFFFFE) + v163;
        ++v159;
      }
      while (v195 != v159);
      ++v54;
      uint64_t v55 = v195 + 1;
      v201 += 2;
      v202 -= 2;
      v209 -= 0x100000000;
      v200 += 2;
      uint64_t v53 = v130 + 4;
      uint64_t v52 = v196 + 1;
      uint64_t v45 = v118;
      int v56 = v136;
      int v46 = v192;
      if (v118 == v191)
      {
        int v44 = v214;
        uint64_t v164 = (int *)v215;
        int v165 = 0x10000;
        int v166 = v216;
        int v167 = a3;
        LODWORD(v43) = v185;
        do
        {
          int v168 = *v166++;
          int v169 = (v168 >> 8) + 1;
          int v170 = *v164++;
          int v171 = (__int16)(v169 >> 1);
          int v172 = ((v169 >> 16) + 1) >> 1;
          v44 += v171 * (v170 >> 16) + v172 * v170 + ((v171 * (unsigned __int16)v170) >> 16);
          v165 += v171 * (v169 >> 17) + v172 * (v169 >> 1) + ((v171 * (unsigned __int16)(v169 >> 1)) >> 16);
          *v167++ = -(v169 >> 1);
          --v161;
        }
        while (v161);
        goto LABEL_118;
      }
    }
    if ((int)v118 < v110) {
      bzero(&v216[v45 + 1], 4 * (v110 - v45 - 2) + 4);
    }
    int v177 = v216;
    char v176 = v188;
    int v175 = v189;
    unsigned int v178 = a3;
    uint64_t v179 = v191;
    do
    {
      int v180 = *v177++;
      *v178++ = -(((v180 >> 8) + 1) >> 1);
      --v179;
    }
    while (v179);
    int v174 = v192;
    if (v192 <= 0)
    {
      int v181 = v186;
      if (a7 >= 1)
      {
        int v182 = v136;
        do
        {
          int v184 = silk_inner_prod_aligned((unint64_t)v51, v51, v110);
          int v174 = HIDWORD(v210);
          int v181 = v210 - (v184 << -BYTE4(v210));
          LODWORD(v210) = v181;
          v51 += v207;
          --v57;
        }
        while (v57);
        goto LABEL_131;
      }
    }
    else
    {
      int v181 = v186;
      if (a7 >= 1)
      {
        int v182 = v136;
        do
        {
          uint64_t v183 = silk_inner_prod16_aligned_64(v51, v51, v110);
          int v174 = HIDWORD(v210);
          int v181 = v210 - (v183 >> SBYTE4(v210));
          LODWORD(v210) = v181;
          v51 += v207;
          --v57;
        }
        while (v57);
LABEL_131:
        int v136 = v182;
      }
    }
    unint64_t v173 = ((unint64_t)(v181 * (uint64_t)v136) >> 30) & 0xFFFFFFFC;
    goto LABEL_133;
  }
  int v165 = 0x10000;
LABEL_118:
  LODWORD(v173) = v44
                + (__int16)-(__int16)v165 * ((int)v43 >> 16)
                + (((__int16)-(__int16)v165 * (unsigned __int16)v43) >> 16)
                + (((-v165 >> 15) + 1) >> 1) * v43;
  int v174 = HIDWORD(v210);
  char v176 = v188;
  int v175 = v189;
LABEL_133:
  *char v176 = v173;
  *int v175 = -v174;
}

_WORD *silk_scale_copy_vector16(_WORD *result, __int16 *a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = a4;
    do
    {
      int v5 = *a2++;
      *result++ = HIWORD(a3) * v5 + (((unsigned __int16)a3 * v5) >> 16);
      --v4;
    }
    while (v4);
  }
  return result;
}

int *silk_scale_vector32_Q26_lshift_18(int *result, int a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      *unint64_t result = (unint64_t)(*result * (uint64_t)a2) >> 8;
      ++result;
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t silk_inner_prod_aligned(unint64_t result, __int16 *a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t v3 = (__int16 *)result;
  LODWORD(result) = 0;
  uint64_t v4 = a3;
  do
  {
    int v6 = *v3++;
    int v5 = v6;
    int v7 = *a2++;
    unint64_t result = (result + v7 * v5);
    --v4;
  }
  while (v4);
  return result;
}

uint64_t silk_inner_prod16_aligned_64(__int16 *a1, __int16 *a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = a3;
  do
  {
    int v7 = *a1++;
    int v6 = v7;
    int v8 = *a2++;
    result += v8 * (uint64_t)v6;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t silk_residual_energy16_covar_FIX(__int16 *a1, int *a2, int *a3, int a4, int a5, int a6)
{
  *(void *)&v48[60] = *MEMORY[0x263EF8340];
  signed int v6 = 16 - a6;
  unint64_t v7 = a5;
  if (a5 < 1)
  {
    signed int v8 = 0;
  }
  else
  {
    signed int v8 = 0;
    uint64_t v9 = a5;
    int v10 = a1;
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      if (v12 < 0) {
        int v11 = -v11;
      }
      if (v8 <= v11) {
        signed int v8 = v11;
      }
      --v9;
    }
    while (v9);
  }
  signed int v13 = __clz(v8) - 17;
  if (v6 < v13) {
    signed int v13 = 16 - a6;
  }
  int v14 = *a2;
  if (*a2 <= a2[a5 * a5 - 1]) {
    int v14 = a2[a5 * a5 - 1];
  }
  signed int v15 = __clz((((v14 >> 16) * (__int16)v8 + (((unsigned __int16)v14 * (__int16)v8) >> 16)) >> 4) * a5) - 5;
  if (v13 < v15) {
    signed int v15 = v13;
  }
  int v16 = v15 & ~(v15 >> 31);
  if (a5 <= 0)
  {
    LODWORD(v22) = 0;
    char v20 = v6 - v16;
    char v27 = v20 + 1;
    int v28 = a4 >> (v20 + 1);
  }
  else
  {
    int v17 = v47;
    uint64_t v18 = a5;
    do
    {
      int v19 = *a1++;
      *(_DWORD *)int v17 = v19 << v16;
      v17 += 2;
      --v18;
    }
    while (v18);
    char v20 = v6 - v16;
    int v21 = v47;
    uint64_t v22 = a5;
    do
    {
      int v24 = *a3++;
      int v23 = v24;
      int v25 = *v21;
      v21 += 2;
      LODWORD(v18) = v18 + v25 * (v23 >> 16) + ((v25 * (unsigned __int16)v23) >> 16);
      --v22;
    }
    while (v22);
    uint64_t v26 = 0;
    char v27 = v20 + 1;
    int v28 = (a4 >> (v20 + 1)) - v18;
    uint64_t v29 = (__int16 *)v48;
    int v30 = a2 + 1;
    uint64_t v31 = 1;
    do
    {
      uint64_t v32 = v26 + 1;
      if (v26 + 1 >= v7)
      {
        int v33 = 0;
      }
      else
      {
        int v33 = 0;
        unint64_t v34 = v7;
        int v35 = v30;
        int v36 = v29;
        do
        {
          int v38 = *v35++;
          unsigned __int16 v37 = v38;
          int v39 = v38 >> 16;
          int v40 = *v36;
          v36 += 2;
          v33 += v40 * v39 + ((v40 * v37) >> 16);
          --v34;
        }
        while (v31 != v34);
      }
      int v41 = a2[v26 * v7 + v26];
      int v42 = v47[2 * v26];
      int v43 = v33 + v42 * (v41 >> 17) + ((v42 * (unsigned __int16)(v41 >> 1)) >> 16);
      LODWORD(v22) = v22 + (v43 >> 16) * v42 + (((unsigned __int16)v43 * v42) >> 16);
      ++v31;
      v29 += 2;
      v30 += v7 + 1;
      uint64_t v26 = v32;
    }
    while (v32 != v7);
  }
  signed int v44 = (v22 << v20) + v28;
  if (v44 < 1) {
    return 1;
  }
  unsigned int v45 = v44 << v27;
  if (v44 <= 0x7FFFFFFFu >> (v20 + 2)) {
    return v45;
  }
  else {
    return 0x3FFFFFFFLL;
  }
}

void *silk_k2a(void *__src, __int16 *a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3 >= 1)
  {
    uint64_t v4 = __src;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = a3;
    do
    {
      if (v6)
      {
        __src = memcpy(__dst, v4, 4 * v6);
        int v8 = a2[v6];
        uint64_t v9 = v5;
        int v10 = v4;
        do
        {
          *v10++ += (__int16)(*(int *)&v11[v9] >> 15) * v8 + ((2 * (*(_DWORD *)&v11[v9] & 0x7FFF) * v8) >> 16);
          v9 -= 4;
        }
        while (v9);
      }
      else
      {
        int v8 = *a2;
      }
      *((_DWORD *)v4 + v6++) = -512 * v8;
      v5 += 4;
    }
    while (v6 != v7);
  }
  return __src;
}

void silk_find_LPC_FIX(uint64_t a1, __int16 *a2, uint64_t a3, int a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v27 = 0;
  int v26 = 0;
  int v25 = 0;
  int v24 = 0;
  int v23 = 0;
  int v22 = 0;
  int v21 = 0;
  int v20 = 0;
  int v8 = *(_DWORD *)(a1 + 4664);
  int v9 = v8 + *(_DWORD *)(a1 + 4612);
  int v10 = (unsigned char *)(a1 + 4815);
  *(unsigned char *)(a1 + 4815) = 4;
  silk_burg_modified(&v23, &v21, v31, a3, a4, v9, *(_DWORD *)(a1 + 4604), v8);
  if (*(_DWORD *)(a1 + 4656) && !*(_DWORD *)(a1 + 4696) && *(_DWORD *)(a1 + 4604) == 4)
  {
    silk_burg_modified(&v22, &v20, v30, a3 + 4 * v9, a4, v9, 2, *(_DWORD *)(a1 + 4664));
    unsigned int v11 = v20 - v21;
    if (v20 - v21 < 0)
    {
      int v23 = (v23 >> (v21 - v20)) - v22;
      int v21 = v20;
    }
    else if (v11 <= 0x1F)
    {
      v23 -= v22 >> v11;
    }
    silk_A2NLSF(a2, v30, *(_DWORD *)(a1 + 4664));
    int v12 = (char *)&v20 - ((4 * v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v12, 4 * v9);
    for (int i = 3; i != -1; --i)
    {
      silk_interpolate(v28, (__int16 *)(a1 + 4524), a2, i, *(_DWORD *)(a1 + 4664));
      silk_NLSF2A(v29, v28, *(_DWORD *)(a1 + 4664));
      silk_LPC_analysis_filter((char *)&v20 - ((4 * v9 + 15) & 0xFFFFFFFFFFFFFFF0), a3, (uint64_t)v29, 2 * v9, *(_DWORD *)(a1 + 4664));
      silk_sum_sqr_shift((unsigned int *)&v27, &v25, (uint64_t)&v12[2 * *(int *)(a1 + 4664)], v9 - *(_DWORD *)(a1 + 4664));
      silk_sum_sqr_shift((unsigned int *)&v26, &v24, (uint64_t)&v12[2 * v9 + 2 * *(int *)(a1 + 4664)], v9 - *(_DWORD *)(a1 + 4664));
      int v14 = v25;
      if (v25 - v24 < 0)
      {
        int v16 = v27 >> (v24 - v25);
        int v27 = v16;
        int v15 = v26;
        int v14 = v24;
      }
      else
      {
        int v15 = v26 >> (v25 - v24);
        int v26 = v15;
        int v16 = v27;
      }
      int v17 = -v14;
      int v18 = v15 + v16;
      unsigned int v19 = v17 - v21;
      if (v17 - v21 < 0)
      {
        if (v19 < 0xFFFFFFE1 || v18 >= v23 >> (v21 - v17)) {
          continue;
        }
      }
      else if (v18 >> v19 >= v23)
      {
        continue;
      }
      int v23 = v18;
      int v21 = v17;
      *int v10 = i;
    }
  }
  if (*v10 == 4) {
    silk_A2NLSF(a2, v31, *(_DWORD *)(a1 + 4664));
  }
}

void silk_solve_LDL_FIX(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  size_t v8 = 4 * (a2 * a2);
  int v9 = (char *)&v76 - ((v8 + 15) & 0x3FFFFFFF0);
  bzero(v9, v8);
  int v10 = *a1;
  int v11 = a1[(__int16)a2 * (__int16)a2 - 1];
  if (v11 + *a1 < 0)
  {
    if ((v11 | v10) < 0) {
      signed int v12 = v11 + *a1;
    }
    else {
      signed int v12 = 0x7FFFFFFF;
    }
  }
  else if ((v11 & v10) < 0 != __OFADD__(v11, v10))
  {
    signed int v12 = 0x80000000;
  }
  else
  {
    signed int v12 = v11 + *a1;
  }
  unint64_t v13 = (unint64_t)(21475 * v12) >> 32;
  if ((int)v13 <= 512) {
    int v14 = 512;
  }
  else {
    int v14 = v13;
  }
  if ((int)a2 > 0)
  {
    uint64_t v76 = a3;
    int v77 = (__int16)a2;
    int v81 = 0;
    int v15 = v9;
    int v16 = a2 + 1;
    uint64_t v17 = 4 * a2;
    unint64_t v18 = a2;
    int v78 = v9;
    uint64_t v79 = &v9[v17];
    uint64_t v80 = a2;
    do
    {
      uint64_t v19 = 0;
      int v20 = v79;
      int v21 = v15;
      uint64_t v22 = 1;
      while (1)
      {
        if (v19)
        {
          uint64_t v23 = 0;
          int v24 = 0;
          do
          {
            int v25 = *(_DWORD *)&v21[4 * v23];
            int v26 = (__int16)v25;
            int v27 = ((v25 >> 15) + 1) >> 1;
            int v28 = v26 * (*(int *)&v83[4 * v23 + 124] >> 16)
                + ((v26 * (unsigned __int16)*(_DWORD *)&v83[4 * v23 + 124]) >> 16)
                + v27 * *(_DWORD *)&v83[4 * v23 + 124];
            v84[v23] = v28;
            v24 += v28 * v27 + (v28 >> 16) * v26 + (((unsigned __int16)v28 * v26) >> 16);
            ++v23;
          }
          while (v19 != v23);
        }
        else
        {
          int v24 = 0;
        }
        uint64_t v29 = v19 * v18 + v19;
        int v30 = a1[v29] - v24;
        if (v30 < v14) {
          break;
        }
        *(_DWORD *)&v83[4 * v19 + 124] = v30;
        if (v30 >= 0) {
          unsigned int v31 = v30;
        }
        else {
          unsigned int v31 = -v30;
        }
        char v32 = __clz(v31);
        int v33 = v30 << (v32 - 1);
        int v34 = 0x1FFFFFFF / (v33 >> 16);
        int v35 = (__int16)v34;
        int v36 = v35 * (v33 >> 16) + ((v35 * (unsigned __int16)v33) >> 16);
        int v37 = (v34 << 16)
            - 8 * v36 * (((v34 >> 15) + 1) >> 1)
            + ((-8 * v36) >> 16) * v35
            + ((((-8 * v36) & 0xFFF8) * v35) >> 16);
        int v38 = v37 >> (26 - v32);
        char v39 = v32 - 26;
        int v40 = (int)0x80000000 >> v39;
        if (v37 > (int)0x80000000 >> v39) {
          int v40 = v37;
        }
        if (v37 <= (int)(0x7FFFFFFFu >> v39)) {
          unsigned int v41 = v40;
        }
        else {
          unsigned int v41 = 0x7FFFFFFFu >> v39;
        }
        int v42 = v41 << v39;
        if (v31 <= 0x3F) {
          int v38 = v42;
        }
        int v43 = (__int16)(16 * v38);
        int v44 = (((16 * v38) >> 15) + 1) >> 1;
        int v45 = 0x1000000 - (v43 * (v30 >> 16) + v44 * v30 + ((v43 * (unsigned __int16)v30) >> 16));
        int v46 = v45 * v44
            + (v45 >> 16) * v43
            + (((unsigned __int16)-(__int16)(v43 * HIWORD(v30)
                                           + v44 * v30
                                           + ((v43 * (unsigned __int16)v30) >> 16))
              * v43) >> 16);
        char v47 = (int *)&v82[8 * v19];
        int *v47 = v38;
        v47[1] = v46;
        *(_DWORD *)&v15[4 * v29] = 0x10000;
        uint64_t v48 = v19 + 1;
        if (v19 + 1 < v18)
        {
          uint64_t v49 = &a1[v19 * v18];
          uint64_t v50 = v46;
          int v51 = (__int16)v38;
          int v52 = ((v38 >> 15) + 1) >> 1;
          uint64_t v53 = v20;
          uint64_t v54 = v22;
          do
          {
            if (v19)
            {
              uint64_t v55 = 0;
              int v56 = 0;
              do
              {
                v56 += (__int16)*(_DWORD *)&v53[4 * v55] * ((int)v84[v55] >> 16)
                     + (((__int16)*(_DWORD *)&v53[4 * v55] * (unsigned __int16)v84[v55]) >> 16)
                     + (((*(int *)&v53[4 * v55] >> 15) + 1) >> 1) * v84[v55];
                ++v55;
              }
              while (v19 != v55);
            }
            else
            {
              int v56 = 0;
            }
            uint64_t v57 = v49[v54] - (uint64_t)v56;
            *(_DWORD *)&v15[4 * v19 + 4 * v54 * v18] = ((unint64_t)(v57 * v50) >> 32)
                                                     + (((int)v57 * v52
                                                       + ((int)v57 >> 16) * v51
                                                       + (((unsigned __int16)(LOWORD(v49[v54]) - v56) * v51) >> 16)) >> 4);
            ++v54;
            v53 += v17;
          }
          while (v54 != v18);
        }
        ++v22;
        v21 += v17;
        v20 += v17;
        ++v19;
        if (v48 == v18) {
          goto LABEL_42;
        }
      }
      int v58 = 0;
      int v59 = (__int16)(v81 + 1) * v14 - v30;
      unint64_t v60 = v18;
      do
      {
        a1[v58] += v59;
        v58 += v16;
        --v60;
      }
      while (v60);
LABEL_42:
      int v61 = v80;
      ++v81;
    }
    while (v81 < (int)v80 && v30 < v14);
    uint64_t v62 = 0;
    int v63 = v78;
    int v64 = v77;
    uint64_t v65 = v76;
    do
    {
      if (v62)
      {
        uint64_t v66 = 0;
        int v67 = 0;
        do
        {
          v67 += (__int16)v84[v66] * (*(int *)&v15[4 * v66] >> 16)
               + (((__int16)v84[v66] * (unsigned __int16)*(_DWORD *)&v15[4 * v66]) >> 16)
               + ((((int)v84[v66] >> 15) + 1) >> 1) * *(_DWORD *)&v15[4 * v66];
          ++v66;
        }
        while (v62 != v66);
      }
      else
      {
        int v67 = 0;
      }
      v84[v62] = *(_DWORD *)(v65 + 4 * v62) - v67;
      ++v62;
      v15 += 4 * v18;
    }
    while (v62 != v18);
    int v68 = (int *)v83;
    int v69 = v84;
    do
    {
      *int v69 = ((unint64_t)(*v69 * (uint64_t)*v68) >> 32)
           + (((*v69 >> 16) * (__int16)*(v68 - 1)
             + (((*(v68 - 1) >> 15) + 1) >> 1) * *v69
             + (((unsigned __int16)*v69 * (__int16)*(v68 - 1)) >> 16)) >> 4);
      ++v69;
      v68 += 2;
      --v18;
    }
    while (v18);
    uint64_t v70 = (v61 - 1);
    do
    {
      if (v70 >= (v61 - 1))
      {
        int v71 = 0;
      }
      else
      {
        int v71 = 0;
        int v72 = (v61 << 16) - 0x10000;
        uint64_t v73 = v61 - 1;
        do
        {
          int v74 = *(_DWORD *)&v63[4 * v70 + 4 * (v72 >> 16) * v64];
          v71 += (__int16)*(_DWORD *)(a4 + 4 * v73) * (v74 >> 16)
               + (((__int16)*(_DWORD *)(a4 + 4 * v73) * (unsigned __int16)v74) >> 16)
               + (((*(int *)(a4 + 4 * v73) >> 15) + 1) >> 1) * v74;
          --v73;
          v72 -= 0x10000;
        }
        while (v70 < v73);
      }
      *(_DWORD *)(a4 + 4 * v70) = v84[v70] - v71;
    }
    while (v70-- > 0);
  }
}

unsigned int *silk_residual_energy_FIX(unsigned int *result, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int *a5, int a6, int a7, int a8)
{
  unsigned int v31 = a5;
  uint64_t v36 = a4;
  int v9 = result;
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v38 = a8;
  int v10 = a8 + a6;
  int v11 = 2 * (a8 + a6);
  size_t v12 = 2 * v11;
  int v37 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v32 = a7;
  if (a7 > 1)
  {
    uint64_t v15 = v11;
    int v39 = 0;
    int v16 = v37;
    bzero(v37, v12);
    uint64_t v17 = 0;
    uint64_t v34 = v32 >> 1;
    uint64_t v35 = v15;
    uint64_t v18 = 2 * v10;
    int v33 = &v16[2 * v38];
    do
    {
      silk_LPC_analysis_filter(v37, a3, v36 + 32 * v17, v15, v38);
      uint64_t v19 = 0;
      uint64_t v20 = 2 * v17;
      char v21 = 1;
      uint64_t v22 = (uint64_t)v33;
      do
      {
        char v23 = v21;
        uint64_t v24 = v19 | v20;
        uint64_t result = silk_sum_sqr_shift(&v9[v19 | v20], &v39, v22, a6);
        char v21 = 0;
        a2[v24] = -v39;
        v22 += v18;
        uint64_t v19 = 1;
      }
      while ((v23 & 1) != 0);
      LODWORD(v15) = v35;
      a3 += 2 * v35;
      ++v17;
    }
    while (v17 != v34);
  }
  int v25 = v31;
  if (v32 >= 1)
  {
    uint64_t v26 = v32;
    do
    {
      unsigned int v27 = __clz(*v9);
      unsigned int v28 = *v25++;
      unsigned int v29 = __clz(v28) - 1;
      *int v9 = (unint64_t)((int)((unint64_t)((int)(v28 << v29) * (uint64_t)(int)(v28 << v29)) >> 32)
                             * (uint64_t)(int)(*v9 << (v27 - 1))) >> 32;
      ++v9;
      *a2 = v27 + *a2 + 2 * v29 - 65;
      ++a2;
      --v26;
    }
    while (v26);
  }
  return result;
}

double silk_find_pred_coefs_FIX(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(a1 + 4604);
  if (v10 >= 1)
  {
    int v11 = 0x1FFFFFF;
    uint64_t v12 = *(unsigned int *)(a1 + 4604);
    unint64_t v13 = (int *)a2;
    do
    {
      int v15 = *v13++;
      int v14 = v15;
      if (v11 >= v15) {
        int v11 = v14;
      }
      --v12;
    }
    while (v12);
    if (v11 >= 0) {
      unsigned int v16 = v11;
    }
    else {
      unsigned int v16 = -v11;
    }
    unsigned int v17 = __clz(v16);
    int v18 = v11 << (v17 - 1);
    uint64_t v19 = v69;
    uint64_t v20 = v68;
    char v21 = v70;
    uint64_t v22 = *(unsigned int *)(a1 + 4604);
    char v23 = (int *)a2;
    do
    {
      int v25 = *v23++;
      unsigned int v24 = v25;
      if (v25 >= 0) {
        unsigned int v26 = v24;
      }
      else {
        unsigned int v26 = -v24;
      }
      unsigned int v27 = __clz(v26);
      int v28 = v24 << (v27 - 1);
      int v29 = 0x1FFFFFFF / (v28 >> 16);
      int v30 = v29 * (v18 >> 16) + ((v29 * (unsigned __int16)v18) >> 16);
      int v31 = v18 - (((unint64_t)(v30 * (uint64_t)v28) >> 29) & 0xFFFFFFF8);
      int v32 = v30 + (v31 >> 16) * v29 + (((unsigned __int16)v31 * v29) >> 16);
      int v33 = v17 - v27;
      int v34 = v32 >> (v33 + 15);
      int v35 = (int)0x80000000 >> (-15 - v33);
      if ((v33 + 29) >= 0x2E) {
        int v34 = 0;
      }
      if (v32 > v35) {
        int v35 = v32;
      }
      if (v32 <= (int)(0x7FFFFFFFu >> (-15 - v33))) {
        unsigned int v36 = v35;
      }
      else {
        unsigned int v36 = 0x7FFFFFFFu >> (-15 - v33);
      }
      int v37 = v36 << (-15 - v33);
      if (v33 > -16) {
        int v37 = v34;
      }
      if (v37 <= 363) {
        int v37 = 363;
      }
      *v21++ = v37;
      *(_DWORD *)uint64_t v20 = (int)((__int16)v37 * HIWORD(v37) + (((__int16)v37 * (unsigned __int16)v37) >> 16)) >> 1;
      v20 += 2;
      *v19++ = 0x10000u / v37;
      --v22;
    }
    while (v22);
  }
  int v38 = *(_DWORD *)(a1 + 4664);
  size_t v39 = 2 * (*(_DWORD *)(a1 + 4608) + v38 * v10);
  uint64_t v40 = (char *)&v66[-2] - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v40, v39);
  if (*(unsigned char *)(a1 + 4813) == 2)
  {
    size_t v41 = 100 * v10;
    int v42 = (char *)&v66[-2] - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v42, v41);
    silk_find_LTP_FIX(a2 + 80, (int *)v42, (_DWORD *)(a2 + 496), a3, a2 + 124, v68, *(_DWORD *)(a1 + 4612), v10, *(_DWORD *)(a1 + 4616), v66);
    silk_quant_LTP_gains(a2 + 80, (char *)(a1 + 4788), (unsigned char *)(a1 + 4816), (int *)(a1 + 4688), (int *)v42, *(_DWORD *)(a1 + 4684), *(_DWORD *)(a1 + 4680), *(_DWORD *)(a1 + 4604));
    silk_LTP_scale_ctrl_FIX(a1, a2, a5);
    silk_LTP_analysis_filter_FIX((uint64_t)v40, a4 - 2 * *(int *)(a1 + 4664), a2 + 80, a2 + 124, (uint64_t)v70, *(_DWORD *)(a1 + 4612), *(_DWORD *)(a1 + 4604), *(_DWORD *)(a1 + 4664));
  }
  else
  {
    if (v10 >= 1)
    {
      uint64_t v43 = 0;
      int v44 = (__int16 *)(a4 - 2 * v38);
      LODWORD(v45) = *(_DWORD *)(a1 + 4612);
      int v46 = v40;
      do
      {
        silk_scale_copy_vector16(v46, v44, v70[v43], v38 + v45);
        uint64_t v45 = *(int *)(a1 + 4612);
        int v38 = *(_DWORD *)(a1 + 4664);
        v46 += v38 + (int)v45;
        v44 += v45;
        ++v43;
      }
      while (v43 < *(int *)(a1 + 4604));
      int v10 = *(_DWORD *)(a1 + 4604);
    }
    bzero((void *)(a2 + 80), 10 * v10);
    *(_DWORD *)(a2 + 496) = 0;
    *(_DWORD *)(a1 + 4688) = 0;
  }
  if (*(_DWORD *)(a1 + 4696))
  {
    int v47 = 10737418;
  }
  else
  {
    int v48 = silk_log2lin(21845 * (*(int *)(a2 + 496) >> 16)+ ((21845 * (unsigned __int16)*(_DWORD *)(a2 + 496)) >> 16)+ 2048);
    signed int v49 = 10000 * ((((3 * *(__int16 *)(a2 + 484) + 0x10000) >> 15) + 1) >> 1)
        + ((10000 * (__int16)(3 * *(_WORD *)(a2 + 484))) >> 16);
    if (v48 >= 0) {
      unsigned int v50 = v48;
    }
    else {
      unsigned int v50 = -v48;
    }
    unsigned int v51 = __clz(v50);
    if (v49 >= 0) {
      unsigned int v52 = 10000 * ((((3 * *(__int16 *)(a2 + 484) + 0x10000) >> 15) + 1) >> 1)
    }
          + ((10000 * (__int16)(3 * *(_WORD *)(a2 + 484))) >> 16);
    else {
      unsigned int v52 = -v49;
    }
    unsigned int v53 = __clz(v52);
    int v54 = v49 << (v53 - 1);
    int v55 = 0x1FFFFFFF / (v54 >> 16);
    int v56 = (v48 << (v51 - 1) >> 16) * v55 + (((unsigned __int16)(v48 << (v51 - 1)) * v55) >> 16);
    int v57 = (v48 << (v51 - 1)) - (((unint64_t)(v54 * (uint64_t)v56) >> 29) & 0xFFFFFFF8);
    int v58 = v56 + (v57 >> 16) * v55 + (((unsigned __int16)v57 * v55) >> 16);
    int v59 = v51 - v53;
    if (v59 > -16)
    {
      int v47 = v58 >> (v59 + 15);
    }
    else
    {
      char v60 = -15 - v59;
      int v61 = (int)0x80000000 >> v60;
      if (v58 > (int)0x80000000 >> v60) {
        int v61 = v58;
      }
      if (v58 <= (int)(0x7FFFFFFFu >> v60)) {
        unsigned int v62 = v61;
      }
      else {
        unsigned int v62 = 0x7FFFFFFFu >> v60;
      }
      int v47 = v62 << v60;
    }
  }
  silk_find_LPC_FIX(a1, (__int16 *)v67, (uint64_t)v40, v47);
  silk_process_NLSFs(a1, (__int16 *)(a2 + 16), (__int16 *)v67, (__int16 *)(a1 + 4524));
  silk_residual_energy_FIX((unsigned int *)(a2 + 500), (_DWORD *)(a2 + 516), (uint64_t)v40, a2 + 16, v69, *(_DWORD *)(a1 + 4612), *(_DWORD *)(a1 + 4604), *(_DWORD *)(a1 + 4664));
  double result = *(double *)v67;
  long long v64 = v67[1];
  *(_OWORD *)(a1 + 4524) = v67[0];
  *(_OWORD *)(a1 + 4540) = v64;
  return result;
}

uint64_t silk_process_gains_FIX(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (unsigned char *)(a1 + 7224);
  uint64_t v7 = (unsigned __int8 *)(a1 + 4813);
  uint64_t v8 = a1 + 4784;
  if (*(unsigned char *)(a1 + 4813) == 2)
  {
    __int16 v9 = silk_sigm_Q15((((*(_DWORD *)(a2 + 496) - 1536) >> 3) + 1) >> 1);
    if (*(int *)(a1 + 4604) >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        *(_DWORD *)(a2 + 4 * v10) += (*(int *)(a2 + 4 * v10) >> 16) * (__int16)-v9
                                   + (((unsigned __int16)*(_DWORD *)(a2 + 4 * v10) * (__int16)-v9) >> 16);
        ++v10;
      }
      while (v10 < *(int *)(a1 + 4604));
    }
  }
  int v11 = silk_log2lin(21627 * ((8894 - *(_DWORD *)(a1 + 4764)) >> 16)+ ((21627 * (unsigned __int16)(8894 - *(_WORD *)(a1 + 4764))) >> 16));
  uint64_t v12 = *(int *)(a1 + 4604);
  if ((int)v12 > 0)
  {
    uint64_t v13 = 0;
    int v14 = v11 / *(_DWORD *)(a1 + 4612);
    int v15 = (__int16)v14;
    int v16 = ((v14 >> 15) + 1) >> 1;
    do
    {
      uint64_t v17 = a2 + 4 * v13;
      int v18 = *(_DWORD *)(v17 + 500) * v16
          + (*(int *)(v17 + 500) >> 16) * v15
          + (((unsigned __int16)*(_DWORD *)(v17 + 500) * v15) >> 16);
      int v19 = *(_DWORD *)(v17 + 516);
      int v20 = v18 << -(char)v19;
      if (v18 >= (int)(0x7FFFFFFFu >> -(char)v19)) {
        int v20 = 0x7FFFFFFF;
      }
      int v21 = ((v18 >> (v19 - 1)) + 1) >> 1;
      int v22 = (v18 & 1) + (v18 >> 1);
      BOOL v23 = v19 < 1;
      if (v19 == 1) {
        int v24 = v22;
      }
      else {
        int v24 = v21;
      }
      if (v23) {
        int v25 = v20;
      }
      else {
        int v25 = v24;
      }
      int v26 = *(_DWORD *)(a2 + 4 * v13);
      signed int v27 = v25 + ((unint64_t)(v26 * (uint64_t)v26) >> 32);
      if (v27 < 0 && v25 > -1) {
        signed int v27 = 0x7FFFFFFF;
      }
      if (v27 > 32766)
      {
        unsigned int v34 = __clz(v27);
        int v35 = __ROR4__(v27, 24 - v34) & 0x7F;
        if (v34) {
          unsigned int v36 = 0x8000;
        }
        else {
          unsigned int v36 = 46214;
        }
        signed int v37 = (v36 >> (v34 >> 1)) + ((213 * (v36 >> (v34 >> 1)) * v35) >> 16);
        if (v37 >= 0x7FFF) {
          signed int v37 = 0x7FFF;
        }
        signed int v38 = v37 << 16;
      }
      else
      {
        unsigned int v29 = (__int16)v26 * (v26 >> 16)
            + (v25 << 16)
            + (((__int16)v26 * (unsigned __int16)v26) >> 16)
            + (((v26 >> 15) + 1) >> 1) * v26;
        if ((int)v29 < 1)
        {
          unsigned int v33 = 0;
        }
        else
        {
          unsigned int v30 = __clz(v29);
          if (v30 != 24)
          {
            if (v29 <= 0x7F) {
              LOBYTE(v29) = (v29 >> (56 - v30)) | ((_BYTE)v29 << (v30 - 24));
            }
            else {
              LOBYTE(v29) = ((_BYTE)v29 << (v30 + 8)) | (v29 >> (24 - v30));
            }
          }
          int v31 = v29 & 0x7F;
          if (v30) {
            unsigned int v32 = 0x8000;
          }
          else {
            unsigned int v32 = 46214;
          }
          unsigned int v33 = (v32 >> (v30 >> 1)) + ((213 * (v32 >> (v30 >> 1)) * v31) >> 16);
        }
        signed int v38 = v33 << 8;
      }
      *(_DWORD *)(a2 + 4 * v13++) = v38;
      uint64_t v12 = *(int *)(a1 + 4604);
    }
    while (v13 < v12);
  }
  memcpy((void *)(a2 + 532), (const void *)a2, 4 * v12);
  *(unsigned char *)(a2 + 548) = *v6;
  uint64_t result = silk_gains_quant(v8, a2, v6, a3 == 2, *(_DWORD *)(a1 + 4604));
  int v40 = *v7;
  if (v40 == 2)
  {
    if (*(_DWORD *)(a2 + 496) + (*(int *)(a1 + 4760) >> 8) < 129)
    {
      uint64_t v41 = 1;
      v7[1] = 1;
    }
    else
    {
      uint64_t v41 = 0;
      v7[1] = 0;
    }
  }
  else
  {
    uint64_t v41 = (char)v7[1];
  }
  *(_DWORD *)(a2 + 476) = -50 * *(__int16 *)(a1 + 4652)
                        + ((52429 * silk_Quantization_Offsets_Q10[2 * ((char)v40 >> 1) + v41]) >> 16)
                        + ((13108 * *(__int16 *)(a1 + 4556)) >> 16)
                        - (*(__int16 *)(a1 + 4556)
                         + *(__int16 *)(a2 + 480)
                         + *(__int16 *)(a2 + 484))
                        + ((65127 * *(__int16 *)(a2 + 480)) >> 16)
                        + ((64718 * *(__int16 *)(a2 + 484)) >> 16)
                        + 1229;
  return result;
}

uint64_t silk_encode_do_VAD_FIX(uint64_t a1)
{
  uint64_t result = silk_VAD_GetSA_Q8(a1, (__int16 *)(a1 + 5146));
  if (*(int *)(a1 + 4556) > 12)
  {
    *(void *)(a1 + 6132) = 0;
    char v4 = 1;
    *(unsigned char *)(a1 + 4813) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 4813) = 0;
    int v3 = *(_DWORD *)(a1 + 6136);
    *(_DWORD *)(a1 + 6136) = v3 + 1;
    if (v3 >= 9)
    {
      if (v3 < 0x1E)
      {
        char v4 = 0;
        goto LABEL_8;
      }
      *(_DWORD *)(a1 + 6136) = 10;
    }
    char v4 = 0;
    *(_DWORD *)(a1 + 6132) = 0;
  }
LABEL_8:
  *(unsigned char *)(a1 + *(int *)(a1 + 5796) + 4768) = v4;
  return result;
}

uint64_t silk_encode_frame_FIX(uint64_t a1, int *a2, uint64_t *a3, int a4, signed int a5, int a6)
{
  int v76 = a6;
  signed int v92 = a5;
  int v78 = a4;
  unsigned int v82 = a3;
  int v63 = a2;
  uint64_t v111 = *MEMORY[0x263EF8340];
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  long long v101 = 0u;
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  long long v98 = 0u;
  memset(v110, 0, 28);
  uint64_t v109 = 0;
  long long v108 = 0uLL;
  memset(v93, 0, 512);
  int v7 = *(_DWORD *)(a1 + 4644);
  *(_DWORD *)(a1 + 4644) = v7 + 1;
  uint64_t v8 = *(int *)(a1 + 4616);
  unsigned int v62 = (void *)(a1 + 8356);
  uint64_t v9 = a1 + 8356 + 2 * v8;
  uint64_t v80 = (unsigned char *)(a1 + 4564);
  *(unsigned char *)(a1 + 4818) = v7 & 3;
  silk_LP_variable_cutoff((int *)(a1 + 16), a1 + 5146, *(_DWORD *)(a1 + 4608));
  memcpy((void *)(v9 + 10 * *(int *)(a1 + 4600)), (const void *)(a1 + 5146), 2 * *(int *)(a1 + 4608));
  if (!*(_DWORD *)(a1 + 4712))
  {
    int v86 = (unsigned char *)(a1 + 7224);
    unint64_t v87 = a1 + 4784;
    uint64_t v11 = *(int *)(a1 + 4616);
    size_t v12 = 2 * (*(_DWORD *)(a1 + 4608) + *(_DWORD *)(a1 + 4620) + (int)v11);
    uint64_t v13 = &v57[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
    bzero(v13, v12);
    silk_find_pitch_lags_FIX(a1, (uint64_t)&v98, (__int16 *)v13, v9);
    silk_noise_shape_analysis_FIX((int *)a1, (uint64_t)&v98, (uint64_t)&v13[2 * v11], v9, *(_DWORD *)(a1 + 5140));
    LODWORD(v11) = v78;
    silk_find_pred_coefs_FIX(a1, (uint64_t)&v98, (uint64_t)v13, v9, v78);
    silk_process_gains_FIX(a1, (uint64_t)&v98, v11);
    size_t v14 = 4 * *(int *)(a1 + 4608);
    int v15 = &v57[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
    bzero(v15, v14);
    int v75 = (int *)v15;
    silk_prefilter_FIX(a1, (uint64_t)&v98, (int *)v15, v9);
    if (*(_DWORD *)(a1 + 6144) && *(int *)(a1 + 4556) >= 78)
    {
      uint64_t v16 = *(int *)(a1 + 5796);
      uint64_t v17 = a1 + 36 * (int)v16 + 6152;
      *(_DWORD *)(a1 + 4 * v16 + 4772) = 1;
      memcpy(v107, (const void *)(a1 + 144), sizeof(v107));
      long long v19 = *(_OWORD *)v87;
      long long v18 = *(_OWORD *)(v87 + 16);
      *(_DWORD *)(v17 + 32) = *(_DWORD *)(v87 + 32);
      *(_OWORD *)uint64_t v17 = v19;
      *(_OWORD *)(v17 + 16) = v18;
      int v20 = *(_DWORD *)(a1 + 4604);
      __memcpy_chk();
      int v21 = *(_DWORD *)(a1 + 5796);
      if (!v21 || !*(_DWORD *)(a1 + 4 * (v21 - 1) + 4772))
      {
        *uint64_t v80 = *v86;
        int v22 = (char)(*(unsigned char *)v17 + *(unsigned char *)(a1 + 6148));
        if (v22 >= 63) {
          LOBYTE(v22) = 63;
        }
        *(unsigned char *)uint64_t v17 = v22;
        int v20 = *(_DWORD *)(a1 + 4604);
      }
      silk_gains_dequant((uint64_t)&v98, (char *)v17, (unsigned char *)(a1 + 4564), v78 == 2, v20);
      if (*(int *)(a1 + 4652) <= 1 && *(int *)(a1 + 4704) < 1) {
        silk_NSQ((_DWORD *)a1, (int32x2_t *)v107, v17, v75, (_DWORD *)(a1 + 320 * *(int *)(a1 + 5796) + 6260), (uint64_t)v99, (uint64_t)v100, (uint64_t)&v100[11] + 12, (uint64_t)&v102 + 12, (uint64_t)&v101 + 12, (uint64_t)&v100[19] + 12, (uint64_t)&v98, (uint64_t)&v100[2] + 12, SWORD6(v103), SHIWORD(v103), SWORD4(v100[2]));
      }
      else {
        silk_NSQ_del_dec(a1, (uint64_t)v107, v17, v75, a1 + 320 * *(int *)(a1 + 5796) + 6260, (uint64_t)v99, (uint64_t)v100, (uint64_t)&v100[11] + 12, (uint64_t)&v102 + 12, (uint64_t)&v101 + 12, (uint64_t)&v100[19] + 12, (uint64_t)&v98, (int *)&v100[2] + 3, SHIDWORD(v103), SWORD4(v100[2]));
      }
      __memcpy_chk();
    }
    uint64_t v97 = 0;
    long long v96 = 0u;
    long long v95 = 0u;
    long long v94 = 0u;
    int v23 = silk_gains_ID(v87, *(_DWORD *)(a1 + 4604));
    long long v24 = *((_OWORD *)v82 + 1);
    long long v94 = *(_OWORD *)v82;
    long long v95 = v24;
    long long v96 = *((_OWORD *)v82 + 2);
    uint64_t v97 = v82[6];
    int v61 = v82 + 4;
    int v81 = (int32x2_t *)(a1 + 144);
    memcpy(v107, (const void *)(a1 + 144), sizeof(v107));
    int v25 = v80[254];
    int v59 = *(unsigned __int16 *)(a1 + 5820);
    int v60 = v25;
    int v58 = *(_DWORD *)(a1 + 5816);
    uint64_t v66 = &v57[-1280];
    bzero(&v57[-1280], 0x4FBuLL);
    uint64_t v65 = 0;
    unsigned int v26 = 0;
    signed int v88 = 0;
    int v89 = 0;
    uint64_t v27 = 0;
    signed int v91 = 0;
    int v28 = 0;
    int v85 = 0;
    int v64 = 0;
    int v74 = (_DWORD *)(a1 + 4820);
    int v72 = v100;
    uint64_t v73 = v99;
    uint64_t v70 = (uint64_t)&v102 + 12;
    uint64_t v71 = (uint64_t)&v100[11] + 12;
    uint64_t v68 = (uint64_t)&v100[19] + 12;
    uint64_t v69 = (uint64_t)&v101 + 12;
    int v67 = (int *)&v100[2] + 3;
    signed int v79 = v92 - 5;
    LOWORD(v29) = 256;
    int v90 = -1;
    BOOL v83 = v78 == 2;
    int v84 = -1;
    while (1)
    {
      signed int v30 = v91;
      if (v23 != v90)
      {
        signed int v30 = v88;
        if (v23 != v84)
        {
          uint64_t v31 = v27;
          if (v26)
          {
            long long v32 = v95;
            unsigned int v33 = v81;
            unsigned int v34 = v82;
            *(_OWORD *)unsigned int v82 = v94;
            *((_OWORD *)v34 + 1) = v32;
            *((_OWORD *)v34 + 2) = v96;
            v34[6] = v97;
            memcpy(v33, v107, 0x111CuLL);
            v80[254] = v60;
            *(_WORD *)(a1 + 5820) = v59;
            *(_DWORD *)(a1 + 5816) = v58;
          }
          int v77 = v28;
          int v35 = v74;
          if (*(int *)(a1 + 4652) <= 1 && *(int *)(a1 + 4704) < 1) {
            silk_NSQ((_DWORD *)a1, v81, v87, v75, v74, (uint64_t)v73, (uint64_t)v72, v71, v70, v69, v68, (uint64_t)&v98, (uint64_t)v67, SWORD6(v103), SHIWORD(v103), SWORD4(v100[2]));
          }
          else {
            silk_NSQ_del_dec(a1, (uint64_t)v81, v87, v75, (uint64_t)v74, (uint64_t)v73, (uint64_t)v72, v71, v70, v69, v68, (uint64_t)&v98, v67, SHIDWORD(v103), SWORD4(v100[2]));
          }
          unsigned int v36 = v82;
          silk_encode_indices(a1, v82, *(_DWORD *)(a1 + 5796), 0, v78);
          silk_encode_pulses(v36, (char)v80[249], (char)v80[250], (uint64_t)v35, *(_DWORD *)(a1 + 4608));
          signed int v30 = *((_DWORD *)v36 + 6) + __clz(*((_DWORD *)v36 + 8)) - 32;
          if (v26 | v76)
          {
            int v28 = v77;
            uint64_t v27 = v31;
          }
          else
          {
            int v28 = v77;
            uint64_t v27 = v31;
            if (v30 <= v92) {
              goto LABEL_2;
            }
          }
        }
      }
      if (v26 == 6) {
        break;
      }
      if (v30 <= v92)
      {
        if (v30 >= v79) {
          goto LABEL_2;
        }
        int v28 = (__int16)v29;
        if (v23 != v90)
        {
          v110[0] = *(_OWORD *)v82;
          *(_OWORD *)((char *)v110 + 12) = *(_OWORD *)((char *)v82 + 12);
          uint64_t v38 = *((unsigned int *)v82 + 7);
          long long v108 = *(_OWORD *)v61;
          uint64_t v109 = v61[2];
          uint64_t v65 = v38;
          __memcpy_chk();
          memcpy(v93, v81, 0x111CuLL);
          int v64 = *v86;
        }
        uint64_t v27 = 1;
        int v90 = v23;
        signed int v91 = v30;
        int v37 = v89;
      }
      else if (v27 || v26 < 2)
      {
        int v84 = v23;
        int v85 = (__int16)v29;
        int v37 = 1;
        signed int v88 = v30;
      }
      else
      {
        int v37 = 0;
        uint64_t v27 = 0;
        HIDWORD(v103) += SHIDWORD(v103) >> 1;
        int v84 = -1;
      }
      int v89 = v37;
      uint64_t v39 = v27;
      if ((v27 & v37) != 0)
      {
        int v40 = (__int16)((v85 - v28) * (v92 - v91) / (v88 - v91) + v28);
        int v29 = v28 + ((v85 - v28) >> 2);
        if (v40 <= v29)
        {
          if (v40 >= v85 - ((v85 - v28) >> 2)) {
            LOWORD(v29) = (v85 - v28) * (v92 - v91) / (v88 - v91) + v28;
          }
          else {
            LOWORD(v29) = v85 - ((v85 - v28) >> 2);
          }
        }
      }
      else
      {
        signed int v41 = v92;
        int v42 = silk_log2lin(((v30 - v92) << 7) / *(_DWORD *)(a1 + 4608) + 2048);
        if (v42 >= 0x20000) {
          int v43 = 0x20000;
        }
        else {
          int v43 = v42;
        }
        if (v43 <= 85197) {
          int v44 = 85197;
        }
        else {
          int v44 = v43;
        }
        if (v30 > v41) {
          int v43 = v44;
        }
        int v29 = (v43 >> 16) * (__int16)v29 + (((unsigned __int16)v43 * (__int16)v29) >> 16);
      }
      int v45 = *(_DWORD *)(a1 + 4604);
      if (v45 >= 1)
      {
        int v46 = &v98;
        uint64_t v47 = *(unsigned int *)(a1 + 4604);
        do
        {
          int v48 = (*((int *)v46 + 133) >> 16) * (__int16)v29
              + (((unsigned __int16)*((_DWORD *)v46 + 133) * (__int16)v29) >> 16);
          if (v48 <= -8388608) {
            int v48 = -8388608;
          }
          if (v48 >= 0x7FFFFF) {
            int v48 = 0x7FFFFF;
          }
          *(_DWORD *)int v46 = v48 << 8;
          int v46 = (long long *)((char *)v46 + 4);
          --v47;
        }
        while (v47);
      }
      signed int v49 = v86;
      unint64_t v50 = v87;
      *int v86 = v106;
      silk_gains_quant(v50, (uint64_t)&v98, v49, v83, v45);
      int v23 = silk_gains_ID(v50, *(_DWORD *)(a1 + 4604));
      ++v26;
      uint64_t v27 = v39;
    }
    BOOL v53 = v23 == v90 || v30 > v92;
    if (v27 && v53)
    {
      int v54 = v82;
      *(_OWORD *)unsigned int v82 = v110[0];
      *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)((char *)v110 + 12);
      unsigned int v56 = v65;
      int v55 = v66;
      *((_DWORD *)v54 + 7) = v65;
      *((_OWORD *)v54 + 2) = v108;
      v54[6] = v109;
      memcpy((void *)*v54, v55, v56);
      memcpy(v81, v93, 0x111CuLL);
      *int v86 = v64;
    }
  }
LABEL_2:
  memmove(v62, (const void *)(a1 + 2 * *(int *)(a1 + 4608) + 8356), 2 * (5 * *(_DWORD *)(a1 + 4600) + *(_DWORD *)(a1 + 4616)));
  if (*(_DWORD *)(a1 + 4712))
  {
    int v10 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 4568) = *((_DWORD *)&v100[2] + *(int *)(a1 + 4604) + 2);
    v80[1] = v80[249];
    *(_DWORD *)(a1 + 4696) = 0;
    int v10 = (int)(*((_DWORD *)v82 + 6) + __clz(*((_DWORD *)v82 + 8)) - 25) >> 3;
  }
  *int v63 = v10;
  return 0;
}

uint64_t silk_LTP_analysis_filter_FIX(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  if (a7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (a8 + a6);
    uint64_t v10 = 2 * a6;
    uint64_t v11 = a7;
    do
    {
      if ((int)v9 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (__int16 *)(a3 + 10 * v8);
        int16x4_t v14 = *(int16x4_t *)(v13 + 1);
        int v15 = *v13;
        int v16 = HIWORD(*(_DWORD *)(a5 + 4 * v8));
        int v17 = (unsigned __int16)*(_DWORD *)(a5 + 4 * v8);
        int32x4_t v18 = vmovl_s16(v14);
        uint64_t v19 = -2 * *(int *)(a4 + 4 * v8);
        do
        {
          *(_WORD *)(result + 2 * v12) = *(_WORD *)(a2 + 2 * v12);
          int v20 = *(__int16 *)(a2 + 2 * v12)
              - (((vaddvq_s32(vmlaq_s32((int32x4_t)(v15 * *(__int16 *)(a2 + v19 + 4)), v18, vmovl_s16(vrev64_s16(*(int16x4_t *)(a2 + v19 - 4))))) >> 13)+ 1) >> 1);
          if (v20 <= -32768) {
            int v20 = -32768;
          }
          if (v20 >= 0x7FFF) {
            int v20 = 0x7FFF;
          }
          *(_WORD *)(result + 2 * v12++) = v20 * v16 + ((v20 * v17) >> 16);
          v19 += 2;
        }
        while (v9 != v12);
      }
      ++v8;
      result += 2 * (int)v9;
      a2 += v10;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t silk_regularize_correlations_FIX(uint64_t result, _DWORD *a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = a4;
    do
    {
      *(_DWORD *)(result + 4 * v4) += a3;
      v4 += a4 + 1;
      --v5;
    }
    while (v5);
  }
  *a2 += a3;
  return result;
}

uint64_t silk_autocorr(unsigned int *a1, _DWORD *a2, char *a3, int a4, int a5)
{
  if (a4 >= a5) {
    int v6 = a5;
  }
  else {
    int v6 = a4;
  }
  uint64_t result = _celt_autocorr(a3, a1, 0, 0, v6 - 1, a4);
  *a2 = result;
  return result;
}

uint64_t silk_find_LTP_FIX(uint64_t result, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, __int16 *a6, int a7, int a8, int a9, int *a10)
{
  uint64_t v10 = a3;
  uint64_t v11 = result;
  uint64_t v12 = a10;
  uint64_t v167 = *MEMORY[0x263EF8340];
  int v160 = 0;
  if (a8 < 1)
  {
    int v48 = 0;
    if (!a3) {
      goto LABEL_66;
    }
    goto LABEL_44;
  }
  uint64_t v14 = 0;
  uint64_t v15 = a4 + 2 * a9;
  int v16 = (__int16 *)result;
  int v152 = a8;
  signed int v153 = 655 * (a7 >> 16) + ((655 * (unsigned __int16)a7) >> 16);
  uint64_t v154 = a8;
  uint64_t v155 = a7;
  do
  {
    uint64_t v17 = *(int *)(a5 + 4 * v14);
    int32x4_t v18 = &v161[v14];
    uint64_t v159 = (__int16 *)v15;
    silk_sum_sqr_shift(v18, &v160, v15, a7);
    int v19 = *v18;
    if (*v18 >> 30)
    {
      unsigned int v20 = __clz(v19);
      int v21 = v19 >> 1;
      int v22 = (*v18 & 1) + ((int)*v18 >> 1);
      int v23 = (v21 + 1) >> 1;
      if (v20 != 1) {
        int v22 = v23;
      }
      *int32x4_t v18 = v22;
      int v24 = v160 - v20 + 2;
      int v160 = v24;
    }
    else
    {
      int v24 = v160;
    }
    unint64_t v25 = (unint64_t)&v159[-2 - v17];
    unsigned int v26 = &a10[v14];
    *unsigned int v26 = v24;
    silk_corrMatrix_FIX(v25, a7, 5u, 2, a2, v26);
    silk_corrVector_FIX(v25, v159, a7, 5, v162, *v26);
    int v27 = v161[v14];
    if (*v26 > v160)
    {
      v27 >>= *(unsigned char *)v26 - v160;
      *int32x4_t v18 = v27;
    }
    silk_regularize_correlations_FIX((uint64_t)a2, v18, ((1092 * (unsigned __int16)v27) >> 16)+ ((1092 * (unsigned __int16)*a2) >> 16)+ ((1092 * (unsigned __int16)a2[24]) >> 16)+ 1092 * ((*a2 >> 16) + (v27 >> 16) + (a2[24] >> 16))+ 1, 5);
    silk_solve_LDL_FIX(a2, 5, (uint64_t)v162, (uint64_t)v166);
    for (uint64_t i = 0; i != 5; ++i)
    {
      int v29 = v166[i];
      unsigned int v30 = ((v29 >> 1) + 1) >> 1;
      if (v29 < -131074) {
        LOWORD(v30) = 0x8000;
      }
      if (v29 <= 131069) {
        __int16 v31 = v30;
      }
      else {
        __int16 v31 = 0x7FFF;
      }
      v16[i] = v31;
    }
    int v32 = silk_residual_energy16_covar_FIX(v16, a2, v162, v161[v14], 5, 14);
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    v164[v14] = v32;
    if (*v26 >= 2) {
      LOBYTE(v35) = 2;
    }
    else {
      int v35 = *v26;
    }
    char v36 = v35 + 1;
    int v37 = *(_DWORD *)&a6[2 * v14];
    int v38 = (__int16)v37 * (v32 >> 16) + (((__int16)v37 * (unsigned __int16)v32) >> 16);
    int v39 = v37 << 16;
    if (v38 <= (int)0x80000000 >> (v35 + 1)) {
      int v40 = (int)0x80000000 >> (v35 + 1);
    }
    else {
      int v40 = (__int16)v37 * (v32 >> 16) + (((__int16)v37 * (unsigned __int16)v32) >> 16);
    }
    if (v38 > (int)(0x7FFFFFFFu >> (v35 + 1))) {
      int v40 = 0x7FFFFFFFu >> (v35 + 1);
    }
    char v41 = *v26 - v35;
    int v42 = (v40 << v36) + (v153 >> v41);
    if (v42 <= 1) {
      int v42 = 1;
    }
    char v43 = v41 + 5;
    do
    {
      if (a2[v33] > (int)v34) {
        unsigned int v34 = a2[v33];
      }
      ++v33;
    }
    while (v33 != 25);
    int v44 = (v39 / v42) >> v43;
    int v45 = 16 << __clz(v34);
    if (v44 < v45) {
      int v45 = v44;
    }
    if (v34 <= 0x1F) {
      int v46 = v44;
    }
    else {
      int v46 = v45;
    }
    uint64_t result = (uint64_t)silk_scale_vector32_Q26_lshift_18(a2, v46, 25);
    v163[v14] = a2[12];
    uint64_t v47 = v154;
    uint64_t v15 = (uint64_t)&v159[v155];
    v16 += 5;
    a2 += 25;
    ++v14;
  }
  while (v14 != v154);
  int v48 = 0;
  uint64_t v12 = a10;
  signed int v49 = a10;
  a8 = v152;
  uint64_t v10 = a3;
  do
  {
    int v51 = *v49++;
    int v50 = v51;
    if (v51 > v48) {
      int v48 = v50;
    }
    --v47;
  }
  while (v47);
  if (a3)
  {
LABEL_44:
    if (a8 < 1)
    {
      int v57 = a8;
      int v53 = 0;
      signed int v52 = 0;
    }
    else
    {
      signed int v52 = 0;
      int v53 = 0;
      int v54 = v164;
      int v55 = v161;
      unsigned int v56 = v12;
      int v57 = a8;
      uint64_t v58 = a8;
      int v59 = a6;
      do
      {
        int v61 = *v55++;
        unsigned __int16 v60 = v61;
        int v62 = v61 >> 16;
        int v64 = *v59;
        v59 += 2;
        int v63 = v64;
        int v65 = v64 * v62 + ((v64 * v60) >> 16) + 1;
        int v66 = *v56++;
        LOBYTE(v62) = v48 - v66 + 1;
        v53 += v65 >> v62;
        int v67 = *v54++;
        v52 += ((v67 >> 16) * v63 + (((unsigned __int16)v67 * v63) >> 16) + 1) >> v62;
        --v58;
      }
      while (v58);
    }
    if (v52 <= 1) {
      signed int v52 = 1;
    }
    if (v53 >= 0) {
      unsigned int v68 = v53;
    }
    else {
      unsigned int v68 = -v53;
    }
    unsigned int v69 = __clz(v68);
    int v70 = v53 << (v69 - 1);
    unsigned int v71 = __clz(v52);
    int v72 = v52 << (v71 - 1);
    int v73 = 0x1FFFFFFF / (v72 >> 16);
    int v74 = v73 * (v70 >> 16) + ((v73 * (unsigned __int16)v70) >> 16);
    int v75 = v70 - (((unint64_t)(v74 * (uint64_t)v72) >> 29) & 0xFFFFFFF8);
    int v76 = v74 + (v75 >> 16) * v73 + (((unsigned __int16)v75 * v73) >> 16);
    int v77 = v69 - v71;
    if (v69 - v71 + 13 >= 0x20) {
      int v78 = 0;
    }
    else {
      int v78 = v76 >> (v77 + 13);
    }
    int v79 = (int)0x80000000 >> (-13 - v77);
    if (v76 > v79) {
      int v79 = v76;
    }
    if (v76 <= (int)(0x7FFFFFFFu >> (-13 - v77))) {
      unsigned int v80 = v79;
    }
    else {
      unsigned int v80 = 0x7FFFFFFFu >> (-13 - v77);
    }
    unsigned int v81 = v80 << (-13 - v77);
    if (v77 <= -14) {
      unsigned int v82 = v81;
    }
    else {
      unsigned int v82 = v78;
    }
    uint64_t result = silk_lin2log(v82);
    *uint64_t v10 = (((int)result - 2048) << 16 >> 15) + (__int16)(result - 2048);
    a8 = v57;
  }
LABEL_66:
  if (a8 < 1)
  {
    signed int v89 = 0;
    int v99 = -11;
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v84 = v11;
    uint64_t v85 = a8;
    do
    {
      uint64_t v86 = 0;
      int v87 = 0;
      do
      {
        v87 += *(__int16 *)(v84 + v86);
        v86 += 2;
      }
      while (v86 != 10);
      v165[v83] = v87;
      v84 += 10;
      ++v83;
    }
    while (v83 != a8);
    int v88 = 0;
    signed int v89 = 0;
    int v90 = v163;
    signed int v91 = v165;
    signed int v92 = v12;
    do
    {
      int v94 = *v91++;
      int v93 = v94;
      if (v94 < 0) {
        int v93 = -v93;
      }
      if (v89 <= v93) {
        signed int v89 = v93;
      }
      unsigned int v95 = *v90++;
      unsigned int v96 = __clz(v95);
      int v97 = *v92++;
      int v98 = v97 - v48 - v96 + 32;
      if (v88 <= v98) {
        int v88 = v98;
      }
      --v85;
    }
    while (v85);
    int v99 = v88 - 11;
  }
  unsigned int v100 = __clz(v89);
  int v101 = ((v99 - v48 - v100) & ~((int)(v99 - v48 - v100) >> 31)) + v48;
  signed int v102 = (0x106u >> (((v99 - v48 - v100) & ~((int)(v99 - v48 - v100) >> 31)) + v48)) + 1;
  if (a8 < 1)
  {
    int v103 = 0;
  }
  else
  {
    int v103 = 0;
    long long v104 = v165;
    long long v105 = v163;
    char v106 = v12;
    uint64_t v107 = a8;
    do
    {
      int v109 = *v105++;
      int v108 = v109;
      int v110 = *v106++;
      int v111 = v108 >> (v101 - v110);
      v102 += v111;
      int v112 = *v104++;
      uint64_t result = (unsigned __int16)v111 * (__int16)v112;
      v103 += 4 * ((v111 >> 16) * (__int16)v112 + ((int)result >> 16) + (((v112 >> 15) + 1) >> 1) * v111);
      --v107;
    }
    while (v107);
  }
  if (v103 >= 0) {
    unsigned int v113 = v103;
  }
  else {
    unsigned int v113 = -v103;
  }
  unsigned int v114 = __clz(v113);
  int v115 = v103 << (v114 - 1);
  if (v102 >= 0) {
    unsigned int v116 = v102;
  }
  else {
    unsigned int v116 = -v102;
  }
  unsigned int v117 = __clz(v116);
  int v118 = v102 << (v117 - 1);
  int v119 = 0x1FFFFFFF / (v118 >> 16);
  int v120 = v119 * (v115 >> 16) + ((v119 * (v115 & 0xFFFC)) >> 16);
  int v121 = v115 - (((unint64_t)(v120 * (uint64_t)v118) >> 29) & 0xFFFFFFF8);
  int v122 = v120 + (v121 >> 16) * v119 + (((v121 & 0xFFFC) * v119) >> 16);
  int v123 = v114 - v117;
  if ((v123 + 17) >= 0x20) {
    int v124 = 0;
  }
  else {
    int v124 = v122 >> (v123 + 17);
  }
  int v125 = (int)0x80000000 >> (-17 - v123);
  if (v122 > v125) {
    int v125 = v122;
  }
  if (v122 <= (int)(0x7FFFFFFFu >> (-17 - v123))) {
    unsigned int v126 = v125;
  }
  else {
    unsigned int v126 = 0x7FFFFFFFu >> (-17 - v123);
  }
  unsigned int v127 = v126 << (-17 - v123);
  if (v123 <= -18) {
    int v128 = v127;
  }
  else {
    int v128 = v124;
  }
  if (a8 >= 1)
  {
    uint64_t v129 = 0;
    uint64_t result = 0x7FFFFFFLL;
    uint64_t v130 = a8;
    do
    {
      int v131 = v12[v129];
      if (v131 > 1)
      {
        char v133 = v131 - 2;
        unsigned int v134 = (int)0x80000000 >> v133;
        int v135 = v163[v129];
        if (v135 > (int)0x80000000 >> v133) {
          unsigned int v134 = v163[v129];
        }
        if (v135 > (int)(0x7FFFFFFFu >> v133)) {
          unsigned int v134 = 0x7FFFFFFFu >> v133;
        }
        int v132 = v134 << v133;
      }
      else
      {
        int v132 = (int)v163[v129] >> (2 - v131);
      }
      int v136 = (int)v165[v129] >> 2;
      unsigned int v137 = v128 - v136;
      if (v128 - v136 < 0)
      {
        BOOL v140 = __OFSUB__(v137, -134217728);
        if (v137 <= 0xF8000000) {
          unsigned int v137 = -134217728;
        }
        if ((v136 & ~v128) < 0 != v140) {
          int v139 = 0x7FFFFFF;
        }
        else {
          int v139 = v137;
        }
      }
      else
      {
        BOOL v138 = __OFSUB__(v137, 0x7FFFFFF);
        if (v137 >= 0x7FFFFFF) {
          unsigned int v137 = 0x7FFFFFF;
        }
        if ((v128 & ~v136) < 0 != v138) {
          int v139 = -134217728;
        }
        else {
          int v139 = v137;
        }
      }
      uint64_t v141 = 0;
      int v142 = 0;
      int v143 = 16 * (6710887 / (v132 + 6553));
      do
      {
        int v144 = *(__int16 *)(v11 + 2 * v141);
        if (v144 <= 1638) {
          int v144 = 1638;
        }
        v165[v141 + 4] = v144;
        v142 += v144;
        ++v141;
      }
      while (v141 != 5);
      uint64_t v145 = 0;
      int v146 = v143 * v139 / v142;
      if (v146 <= -134217728) {
        int v146 = -134217728;
      }
      if (v146 >= 0x7FFFFFF) {
        int v147 = 0x7FFFFFF;
      }
      else {
        int v147 = v146;
      }
      int v148 = v147 >> 12;
      int v149 = 16 * (v147 & 0xFFF);
      do
      {
        int v150 = *(__int16 *)(v11 + 2 * v145) + SLOWORD(v165[v145 + 4]) * v148 + ((SLOWORD(v165[v145 + 4]) * v149) >> 16);
        if (v150 <= -16000) {
          int v150 = -16000;
        }
        if (v150 >= 28000) {
          LOWORD(v150) = 28000;
        }
        *(_WORD *)(v11 + 2 * v145++) = v150;
      }
      while (v145 != 5);
      v11 += 10;
      ++v129;
    }
    while (v129 != v130);
  }
  return result;
}

uint64_t silk_fit_LTP(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    int v3 = *(_DWORD *)(result + 4 * i);
    unsigned int v4 = ((v3 >> 1) + 1) >> 1;
    if (v3 < -131074) {
      LOWORD(v4) = 0x8000;
    }
    if (v3 <= 131069) {
      __int16 v5 = v4;
    }
    else {
      __int16 v5 = 0x7FFF;
    }
    *(_WORD *)(a2 + 2 * i) = v5;
  }
  return result;
}

_DWORD *silk_warped_LPC_analysis_filter_FIX(_DWORD *result, uint64_t a2, __int16 *a3, uint64_t a4, int a5, int a6, int a7)
{
  if (a6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &a3[a7];
    int v11 = *a3;
    uint64_t v9 = a3 + 2;
    int v10 = v11;
    int v12 = *(v8 - 1);
    uint64_t v13 = a6;
    do
    {
      int v14 = result[1];
      int v15 = *result + (v14 >> 16) * a5 + (((unsigned __int16)v14 * a5) >> 16);
      int v16 = *(__int16 *)(a4 + 2 * v7);
      int v17 = result[2];
      int v18 = v14 + ((v17 - v15) >> 16) * a5 + (((unsigned __int16)(v17 - v15) * a5) >> 16);
      *uint64_t result = v16 << 14;
      result[1] = v15;
      int v19 = (a7 >> 1) + (v15 >> 16) * v10 + (((unsigned __int16)v15 * v10) >> 16);
      if (a7 >= 3)
      {
        unsigned int v20 = v9;
        int v21 = result + 4;
        uint64_t v22 = 2;
        do
        {
          int v23 = *(v21 - 1);
          int v24 = v17 + ((v23 - v18) >> 16) * a5 + (((unsigned __int16)(v23 - v18) * a5) >> 16);
          int v25 = v18 >> 16;
          int v26 = *(v20 - 1);
          int v17 = *v21;
          int v27 = (unsigned __int16)v18 * v26;
          v22 += 2;
          *(v21 - 2) = v18;
          *(v21 - 1) = v24;
          int v18 = v23 + ((v17 - v24) >> 16) * a5 + (((unsigned __int16)(v17 - v24) * a5) >> 16);
          v19 += v25 * v26 + (v27 >> 16) + (v24 >> 16) * *v20 + (((unsigned __int16)v24 * *v20) >> 16);
          v21 += 2;
          v20 += 2;
        }
        while (v22 < a7);
      }
      result[a7] = v18;
      *(_DWORD *)(a2 + 4 * v7++) = 4 * v16
                                 - ((((v19 + (v18 >> 16) * v12 + (((unsigned __int16)v18 * v12) >> 16)) >> 8) + 1) >> 1);
    }
    while (v7 != v13);
  }
  return result;
}

void silk_prefilter_FIX(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v53 = a4;
  uint64_t v48 = a2;
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a1 + 8352);
  uint64_t v7 = *(int *)(a1 + 4612);
  unint64_t v8 = (4 * v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  bzero((char *)&v42 - v8, 4 * v7);
  uint64_t v9 = (int *)((char *)&v42 - v8);
  bzero((char *)&v42 - v8, 4 * v7);
  LODWORD(v10) = *(_DWORD *)(a1 + 4604);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a1 + 7240;
    int v46 = (unsigned char *)(a1 + 4813);
    uint64_t v47 = (int *)((char *)&v42 - v8);
    int v45 = (_DWORD *)(a1 + 8264);
    char v43 = v9 + 1;
    int v44 = (char *)&v42 - v8 + 4;
    LODWORD(v13) = v7;
    uint64_t v14 = v53;
    do
    {
      signed int v52 = a3;
      if (*v46 == 2) {
        int v6 = *(_DWORD *)(v48 + 4 * v11 + 124);
      }
      uint64_t v15 = v48;
      uint64_t v16 = v48 + 4 * v11;
      int v17 = (__int16)(0x4000 - *(_WORD *)(v16 + 428)) * (*(int *)(v16 + 460) >> 16)
          + (((__int16)(0x4000 - *(_WORD *)(v16 + 428)) * (unsigned __int16)*(_DWORD *)(v16 + 460)) >> 16);
      int v18 = *(_DWORD *)(v16 + 396);
      int v49 = *(_DWORD *)(v16 + 444);
      int v50 = v18;
      uint64_t v51 = v11;
      int v19 = *(__int16 *)(a1 + 4704);
      int v20 = *(_DWORD *)(a1 + 4660);
      uint64_t v53 = v14;
      silk_warped_LPC_analysis_filter_FIX(v45, (uint64_t)v9, (__int16 *)(v48 + 2 * (16 * v11) + 140), v14, v19, v13, v20);
      int v21 = (((((410 * *(__int16 *)(v15 + 484) + *(__int16 *)(v16 + 428) * (__int16)v17 + 3355443) >> 16)
             * (__int16)-*(_WORD *)(v16 + 412)
             + (((unsigned __int16)(410 * *(_WORD *)(v15 + 484) + *(_WORD *)(v16 + 428) * v17 + 13107)
               * (__int16)-*(_WORD *)(v16 + 412)) >> 16)) >> 13)
           + 1) >> 1;
      if (v21 <= -32768) {
        int v21 = -32768;
      }
      if (v21 >= 0x7FFF) {
        int v21 = 0x7FFF;
      }
      int v22 = *v9;
      int v23 = ((*(_DWORD *)(v16 + 412) << 12) + 0x8000) >> 16;
      int v24 = v47;
      int *v47 = *v9 * v23 + v21 * *(_DWORD *)(a1 + 8344);
      uint64_t v13 = *(unsigned int *)(a1 + 4612);
      if ((int)v13 >= 2)
      {
        uint64_t v25 = v13 - 1;
        int v26 = v43;
        int v27 = v44;
        do
        {
          int v28 = *v26++;
          *v27++ = v28 * v23 + v22 * v21;
          int v22 = v28;
          --v25;
        }
        while (v25);
      }
      unsigned int v29 = *(_DWORD *)(a1 + 8332);
      int v30 = *(_DWORD *)(a1 + 8336);
      int v31 = *(_DWORD *)(a1 + 8340);
      *(_DWORD *)(a1 + 8344) = v9[(int)v13 - 1];
      int v32 = v52;
      if ((int)v13 >= 1)
      {
        int v33 = (__int16)v49;
        int v34 = v50 >> 16;
        int v35 = (__int16)v50;
        char v36 = v24;
        int v37 = v52;
        do
        {
          if (v6 < 1) {
            int v38 = 0;
          }
          else {
            int v38 = (((v17 >> 2) | (v17 << 15)) >> 16) * *(__int16 *)(v12 + 2 * (((_WORD)v29 + (_WORD)v6 - 1) & 0x1FF))
          }
                + (*(__int16 *)(v12 + 2 * (((_WORD)v29 + (_WORD)v6) & 0x1FF))
                 + *(__int16 *)(v12 + 2 * (((_WORD)v29 + (_WORD)v6 + 510) & 0x1FF)))
                * (__int16)(v17 >> 2);
          int v39 = (v30 >> 16) * v34
              + (v31 >> 16) * v35
              + (((unsigned __int16)v30 * v34) >> 16)
              + (((unsigned __int16)v31 * v35) >> 16);
          int v40 = *v36++;
          int v30 = v40 - 4 * ((v30 >> 16) * v33 + (((unsigned __int16)v30 * v33) >> 16));
          int v31 = v30 - 4 * v39;
          unsigned int v29 = ((_WORD)v29 - 1) & 0x1FF;
          int v41 = ((v31 >> 11) + 1) >> 1;
          if (v41 <= -32768) {
            LOWORD(v41) = 0x8000;
          }
          if (v31 > 134215679) {
            LOWORD(v41) = 0x7FFF;
          }
          *(_WORD *)(v12 + 2 * v29) = v41;
          *v37++ = (((v31 - v38) >> 8) + 1) >> 1;
          --v13;
        }
        while (v13);
        LODWORD(v13) = *(_DWORD *)(a1 + 4612);
      }
      *(_DWORD *)(a1 + 8336) = v30;
      *(_DWORD *)(a1 + 8340) = v31;
      *(_DWORD *)(a1 + 8332) = v29;
      uint64_t v14 = v53 + 2 * (int)v13;
      a3 = &v32[(int)v13];
      uint64_t v11 = v51 + 1;
      uint64_t v10 = *(int *)(a1 + 4604);
    }
    while (v51 + 1 < v10);
  }
  *(_DWORD *)(a1 + 8352) = *(_DWORD *)(v48 + 4 * (int)v10 + 120);
}

uint64_t silk_apply_sine_window(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4 = freq_table_Q16[(a4 >> 2) - 4];
  int v5 = ((__int16)v4 >> 16) * (__int16)-(__int16)v4 + ((v4 * (__int16)-(__int16)v4) >> 16);
  int v6 = (a4 >> 4) + (v5 >> 1) + 0x10000;
  if (a3 == 1) {
    int v7 = 0;
  }
  else {
    int v7 = 0x10000;
  }
  if (a3 == 1) {
    int v6 = (__int16)v4 + (a4 >> 3);
  }
  if (a4 >= 1)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (__int16 *)(a2 + 4);
    uint64_t v10 = (_WORD *)(result + 4);
    do
    {
      *(v10 - 2) = (__PAIR32__((v6 + v7) >> 17, (v6 + v7) >> 1) * *(v9 - 2)) >> 16;
      *(v10 - 1) = (v6 * (unsigned __int16)*(v9 - 1)) >> 16;
      int v11 = (v6 >> 16) * (__int16)v5 - v7 + 2 * v6 + (((unsigned __int16)v6 * (__int16)v5) >> 16);
      if (v11 >= 0xFFFF) {
        int v11 = 0xFFFF;
      }
      int v7 = v11 + 1;
      *uint64_t v10 = (__PAIR32__((v7 + v6) >> 17, (v7 + v6) >> 1) * *v9) >> 16;
      v10[1] = (v7 * (unsigned __int16)v9[1]) >> 16;
      uint64_t result = (unsigned __int16)v7 * (__int16)v5;
      int v6 = (v7 >> 16) * (__int16)v5 - v6 + 2 * v7 + ((int)result >> 16);
      if (v6 >= 0x10000) {
        int v6 = 0x10000;
      }
      v8 += 4;
      v9 += 4;
      v10 += 4;
    }
    while (v8 < a4);
  }
  return result;
}

void *silk_k2a_Q16(void *__src, uint64_t a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a3 >= 1)
  {
    int v4 = __src;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = a3;
    do
    {
      if (v6)
      {
        __src = memcpy(__dst, v4, 4 * v6);
        uint64_t v8 = v5;
        uint64_t v9 = v4;
        do
        {
          *v9++ += (__int16)*(_DWORD *)(a2 + 4 * v6) * (*(int *)&v10[v8] >> 16)
                 + (((__int16)*(_DWORD *)(a2 + 4 * v6) * (unsigned __int16)*(_DWORD *)&v10[v8]) >> 16)
                 + (((*(int *)(a2 + 4 * v6) >> 15) + 1) >> 1) * *(_DWORD *)&v10[v8];
          v8 -= 4;
        }
        while (v8);
      }
      *((_DWORD *)v4 + v6) = -256 * *(_DWORD *)(a2 + 4 * v6);
      ++v6;
      v5 += 4;
    }
    while (v6 != v7);
  }
  return __src;
}

uint64_t silk_schur(uint64_t a1, unsigned int *a2, int a3)
{
  int v30[16] = *MEMORY[0x263EF8340];
  if (*a2 >> 30)
  {
    if ((a3 & 0x80000000) == 0)
    {
      uint64_t v3 = (a3 + 1);
      int v4 = (int32x2_t *)v28;
      do
      {
        int v5 = *a2++;
        *v4++ = vdup_n_s32(v5 >> 1);
        --v3;
      }
      while (v3);
      goto LABEL_14;
    }
LABEL_32:
    LODWORD(v14) = 0;
    goto LABEL_37;
  }
  unsigned int v6 = __clz(*a2) - 2;
  if (v6)
  {
    if (a3 < 0) {
      goto LABEL_32;
    }
    uint64_t v10 = (a3 + 1);
    int v11 = (int32x2_t *)v28;
    do
    {
      unsigned int v12 = *a2++;
      *v11++ = vdup_n_s32(v12 << v6);
      --v10;
    }
    while (v10);
  }
  else
  {
    if (a3 < 0) {
      goto LABEL_32;
    }
    uint64_t v7 = (a3 + 1);
    uint64_t v8 = (float32x2_t *)v28;
    do
    {
      float32x2_t v9 = vld1_dup_f32((const float *)a2++);
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
LABEL_14:
  if (a3 < 1) {
    goto LABEL_32;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unsigned int v15 = a3;
  while (1)
  {
    uint64_t v16 = v14++;
    int v17 = *(_DWORD *)&v28[8 * v14];
    int v18 = v17 >= 0 ? *(_DWORD *)&v28[8 * v14] : -v17;
    if (v18 >= v29) {
      break;
    }
    int v19 = v29 >> 15;
    if (v29 >> 15 <= 1) {
      int v19 = 1;
    }
    int v20 = v17 / v19;
    if (-v20 < -32768 || v20 == 0x8000) {
      int v21 = -32768;
    }
    else {
      int v21 = -v20;
    }
    if (v21 >= 0x7FFF) {
      int v21 = 0x7FFF;
    }
    *(_WORD *)(a1 + 2 * v16) = v21;
    if ((int)v16 < a3)
    {
      uint64_t v22 = v15;
      int v23 = v30;
      do
      {
        int v24 = v23[v13];
        int v25 = *((_DWORD *)v23 - 1);
        LODWORD(v23[v13]) = v24 + (__int16)(v25 >> 15) * v21 + ((2 * (v25 & 0x7FFF) * v21) >> 16);
        *((_DWORD *)v23++ - 1) = v25 + (__int16)(v24 >> 15) * v21 + ((2 * (v24 & 0x7FFF) * v21) >> 16);
        --v22;
      }
      while (v22);
    }
    --v15;
    ++v13;
    if (v14 == a3) {
      goto LABEL_39;
    }
  }
  if (v17 > 0) {
    __int16 v26 = -32440;
  }
  else {
    __int16 v26 = 32440;
  }
  *(_WORD *)(a1 + 2 * v16) = v26;
LABEL_37:
  if ((int)v14 < a3) {
    bzero((void *)(a1 + 2 * v14), 2 * (~v14 + a3) + 2);
  }
LABEL_39:
  if (v29 <= 1) {
    return 1;
  }
  else {
    return v29;
  }
}

void silk_find_pitch_lags_FIX(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4)
{
  int v45 = a3;
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v46 = (char *)(a1 + 4565);
  int v47 = 0;
  int v6 = *(_DWORD *)(a1 + 4620);
  uint64_t v7 = *(int *)(a1 + 4616);
  int v8 = *(_DWORD *)(a1 + 4608) + v6 + v7;
  uint64_t v9 = a4 - 2 * v7;
  uint64_t v10 = *(int *)(a1 + 4572);
  int v11 = (char *)&v44 - ((2 * v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, 2 * v10);
  uint64_t v12 = v9 + 2 * v8 - 2 * v10;
  silk_apply_sine_window((uint64_t)v11, v12, 1, v6);
  uint64_t v13 = *(int *)(a1 + 4620);
  uint64_t v14 = (const void *)(v12 + 2 * v13);
  int v15 = *(_DWORD *)(a1 + 4572) - 2 * v13;
  memcpy(&v11[2 * v13], v14, 2 * v15);
  silk_apply_sine_window((uint64_t)&v11[2 * v13 + 2 * v15], (uint64_t)v14 + 2 * v15, 2, v13);
  silk_autocorr(v51, &v47, v11, *(_DWORD *)(a1 + 4572), *(_DWORD *)(a1 + 4672) + 1);
  v51[0] += 66 * ((int)v51[0] >> 16) + ((66 * LOWORD(v51[0])) >> 16) + 1;
  int v16 = silk_schur((uint64_t)v50, v51, *(_DWORD *)(a1 + 4672));
  if (v16 <= 1) {
    unsigned int v17 = 1;
  }
  else {
    unsigned int v17 = v16;
  }
  if ((v51[0] & 0x80000000) == 0) {
    unsigned int v18 = v51[0];
  }
  else {
    unsigned int v18 = -v51[0];
  }
  unsigned int v19 = __clz(v18);
  unsigned int v20 = __clz(v17);
  int v21 = v17 << (v20 - 1);
  int v22 = 0x1FFFFFFF / (v21 >> 16);
  int v23 = ((int)(v51[0] << (v19 - 1)) >> 16) * v22 + (((unsigned __int16)(v51[0] << (v19 - 1)) * v22) >> 16);
  int v24 = (v51[0] << (v19 - 1)) - (((unint64_t)(v23 * (uint64_t)v21) >> 29) & 0xFFFFFFF8);
  int v25 = v23 + (v24 >> 16) * v22 + (((unsigned __int16)v24 * v22) >> 16);
  int v26 = v19 - v20;
  if (v19 - v20 + 29 >= 0x30) {
    int v27 = 0;
  }
  else {
    int v27 = v25 >> (v26 + 13);
  }
  int v28 = (int)0x80000000 >> (-13 - v26);
  if (v25 > v28) {
    int v28 = v25;
  }
  if (v25 <= (int)(0x7FFFFFFFu >> (-13 - v26))) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = 0x7FFFFFFFu >> (-13 - v26);
  }
  int v30 = v29 << (-13 - v26);
  if (v26 > -14) {
    int v30 = v27;
  }
  *(_DWORD *)(a2 + 492) = v30;
  silk_k2a(__src, v50, *(_DWORD *)(a1 + 4672));
  int v31 = *(_DWORD *)(a1 + 4672);
  if (v31 >= 1)
  {
    int v32 = v48;
    int v33 = (int *)__src;
    uint64_t v34 = *(unsigned int *)(a1 + 4672);
    do
    {
      int v36 = *v33++;
      int v35 = v36;
      unsigned int v37 = v36 >> 12;
      if (v36 < -134217728) {
        LOWORD(v37) = 0x8000;
      }
      if (v35 <= 0x7FFFFFF) {
        __int16 v38 = v37;
      }
      else {
        __int16 v38 = 0x7FFF;
      }
      *v32++ = v38;
      --v34;
    }
    while (v34);
  }
  silk_bwexpander(v48, v31, 64881);
  int v39 = v45;
  silk_LPC_analysis_filter(v45, v9, (uint64_t)v48, v8, *(_DWORD *)(a1 + 4672));
  int v40 = v46;
  if (v46[248] && !*(_DWORD *)(a1 + 4696))
  {
    int v41 = -1228 * (*v46 >> 1)
        - (((int)(*(_DWORD *)(a1 + 4672) << 16) >> 11)
         + 4 * (__int16)*(_DWORD *)(a1 + 4556))
        + ((52430 * (__int16)*(_DWORD *)(a1 + 4556)) >> 16)
        - *(__int16 *)(a1 + 4760)
        + ((63899 * *(__int16 *)(a1 + 4760)) >> 16)
        + 4915;
    if (v41 <= -32768) {
      int v41 = -32768;
    }
    if (v41 >= 0x7FFF) {
      int v42 = 0x7FFF;
    }
    else {
      int v42 = v41;
    }
    if (silk_pitch_analysis_core(v39, (void *)(a2 + 124), (_WORD *)(a1 + 4810), (unsigned char *)(a1 + 4812), (__int16 *)(a1 + 9796), *(_DWORD *)(a1 + 4568), *(_DWORD *)(a1 + 4676), v42, *(_DWORD *)(a1 + 4600), *(_DWORD *)(a1 + 4668), *(_DWORD *)(a1 + 4604)))char v43 = 1; {
    else
    }
      char v43 = 2;
    v40[248] = v43;
  }
  else
  {
    *(void *)(a2 + 132) = 0;
    *(void *)(a2 + 124) = 0;
    *(_WORD *)(a1 + 4810) = 0;
    v40[247] = 0;
    *(_DWORD *)(a1 + 9796) = 0;
  }
}

_DWORD *silk_warped_autocorrelation_FIX(_DWORD *result, _DWORD *a2, uint64_t a3, __int16 a4, int a5, int a6)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  if (a5 < 1)
  {
    unint64_t v17 = 0;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    int v8 = a4;
    uint64_t v9 = a5;
    do
    {
      int v10 = *(__int16 *)(a3 + 2 * v7) << 14;
      if (a6 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = (int *)v31 + 1;
        uint64_t v13 = (void *)v29 + 1;
        do
        {
          int v14 = *v12;
          int v15 = v6 + ((*v12 - v10) >> 16) * v8 + (((unsigned __int16)(*(_WORD *)v12 - v10) * v8) >> 16);
          *(v12 - 1) = v10;
          int v16 = v31[0];
          *(v13 - 1) += (SLODWORD(v31[0]) * (uint64_t)v10) >> 18;
          v11 += 2;
          int v6 = v12[1];
          int v10 = v14 + ((v6 - v15) >> 16) * v8 + (((unsigned __int16)(v6 - v15) * v8) >> 16);
          *uint64_t v12 = v15;
          v12 += 2;
          *v13 += (v16 * (uint64_t)v15) >> 18;
          v13 += 2;
        }
        while (v11 < a6);
      }
      *((_DWORD *)v31 + a6) = v10;
      int v6 = v31[0];
      *((void *)v29 + a6) += (SLODWORD(v31[0]) * (uint64_t)v10) >> 18;
      ++v7;
    }
    while (v7 != v9);
    unint64_t v17 = *(void *)&v29[0];
  }
  unint64_t v18 = HIDWORD(v17);
  signed int v19 = __clz(v17) + 32;
  unsigned int v20 = __clz(v18);
  if (v18) {
    signed int v19 = v20;
  }
  if (v19 <= 13) {
    signed int v19 = 13;
  }
  if (v19 >= 55) {
    signed int v19 = 55;
  }
  *a2 = 25 - v19;
  if (v19 <= 0x22)
  {
    if ((a6 & 0x80000000) == 0)
    {
      char v25 = 35 - v19;
      uint64_t v26 = (a6 + 1);
      int v27 = (uint64_t *)v29;
      do
      {
        uint64_t v28 = *v27++;
        *result++ = v28 >> v25;
        --v26;
      }
      while (v26);
    }
  }
  else if ((a6 & 0x80000000) == 0)
  {
    char v21 = v19 - 35;
    uint64_t v22 = (a6 + 1);
    int v23 = (uint64_t *)v29;
    do
    {
      uint64_t v24 = *v23++;
      *result++ = v24 << v21;
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t BET3FLT__InitTreeSet(int a1, void *__b)
{
  return 0;
}

void *BET3FLT__DeInitTreeSet(void *result, char *__b)
{
  if (__b)
  {
    uint64_t v3 = (uint64_t)result;
    for (uint64_t i = 104; i != 184; i += 8)
    {
      uint64_t v5 = *(void *)&__b[i];
      if (v5) {
        heap_Free(*(void **)(v3 + 8), v5);
      }
    }
    return cstdlib_memset(__b, 0, 0xD0uLL);
  }
  return result;
}

uint64_t BET3FLT__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  unsigned __int16 v30 = 0;
  uint64_t v9 = *a4;
  if (a4[4] - v9 >= 8 && *(unsigned char *)(*((void *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    uint64_t v12 = a3;
    uint64_t v13 = (_WORD *)(a2 + 2 * a3 + 184);
    if (BET3FLT__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FLT__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      int v14 = BET3FLT__xfread2ptr_BET3((void *)(a2 + 8 * v12 + 24), 1u, v30, a4);
      if (v14 == v30)
      {
        if (*a4) {
          ++*a4;
        }
        uint64_t v15 = heap_Calloc(*(void **)(v8 + 8), 16, (unsigned __int16)*v13);
        uint64_t v21 = a2 + 8 * v12;
        *(void *)(v21 + 104) = v15;
        uint64_t v22 = (uint64_t *)(v21 + 104);
        if (!v15)
        {
          BET3FLT__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13) {
          return 0;
        }
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        while (BET3FLT__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FLT__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1) {
            break;
          }
          int v25 = BET3FLT__xfread2ptr_BET3((void *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          uint64_t v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2)) {
            break;
          }
          uint64_t v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13) {
            return v26;
          }
        }
        uint64_t v26 = 2229280772;
        int v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        uint64_t v28 = 55015;
      }
      else
      {
        uint64_t v26 = 2229280772;
        int v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        uint64_t v28 = 55013;
      }
    }
    else
    {
      uint64_t v26 = 2229280772;
      int v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      uint64_t v28 = 55012;
    }
  }
  else
  {
    uint64_t v26 = 2229280772;
    int v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    uint64_t v28 = 55011;
  }
  BET3FLT__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t BET3FLT__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  LOWORD(v5) = 0;
  uint64_t v6 = a3 + 8 * a4;
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(v6 + 104) + 16 * a5 + 8);
  uint64_t v9 = a2 + 2;
  uint64_t v10 = a2 + 1;
  while (2)
  {
    uint64_t v11 = -(uint64_t)(__int16)v5;
    uint64_t v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    uint64_t v13 = (unsigned __int8 *)(v7 + *v12);
    uint64_t v14 = *v13;
    int v15 = v13[1];
    uint64_t v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 2));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 1));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10)) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v10);
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          unsigned __int8 v16 = -1;
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v9);
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        goto LABEL_39;
      default:
        if (v14 == 3)
        {
          unsigned int v17 = *(unsigned __int16 *)(*(void *)(a1 + 1784) + 2 * a2);
          BOOL v18 = v17 > 0x19;
          unsigned __int8 v16 = 10 * v17;
          if (v18) {
            unsigned __int8 v16 = -1;
          }
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(a1 + 8 * v14 + 16);
          if (!v19) {
            goto LABEL_39;
          }
          unsigned __int8 v16 = *(unsigned char *)(v19 + a2);
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
LABEL_24:
        uint64_t v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v13[3] >= v16) {
            goto LABEL_30;
          }
        }
        else
        {
          int v21 = v15 - 1;
          if (v21)
          {
            int v22 = 0;
            while (1)
            {
              int v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22)) {
                ++v23;
              }
              int v24 = v23 >> 1;
              unsigned int v25 = v20[v24];
              if (v25 == v16) {
                break;
              }
              if (v16 < v25) {
                int v21 = v24 - 1;
              }
              else {
                int v22 = v24 + 1;
              }
              if (v22 > v21) {
                goto LABEL_39;
              }
            }
LABEL_30:
            uint64_t v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16) {
            goto LABEL_30;
          }
        }
LABEL_39:
        if ((v5 & 0x8000) != 0) {
          continue;
        }
        return v5;
    }
  }
}

uint64_t BET3FLT__select_bet3_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v16 = 0;
  *a5 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v9 = (void *)heap_Calloc(*(void **)(v16 + 8), 1, 24);
    if (v9)
    {
      *uint64_t v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t BET3FLT__select_bet3_FeatureExtractObjClose(uint64_t a1)
{
  if (a1) {
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
  }
  return 0;
}

uint64_t BET3FLT__select_bet3_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__b, _DWORD *a6)
{
  __s1 = 0;
  cstdlib_memset(__b, 0, 0xE48uLL);
  *__b = a2;
  if ((paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && !cstdlib_strcmp(__s1, "bet3"))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a1[2] + 272))(a3, a4, 128, 3, 0, 0);
  }
  return usextract_ProcessStart(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, (uint64_t)__b, a6);
}

uint64_t BET3FLT__select_bet3_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a1;
  if (a11) {
    BOOL v16 = a12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(unsigned char *)(*(void *)a10 + 2748 + v18) == 1) {
      ++v19;
    }
    ++v18;
  }
  while (v18 != 218);
  uint64_t v21 = heap_Calloc(*(void **)(v15 + 8), (v19 * v20), 1);
  if (!v21) {
    goto LABEL_119;
  }
  uint64_t v26 = v21;
  int v104 = v17;
  uint64_t v106 = a4;
  uint64_t v107 = a3;
  for (uint64_t i = 0; i != 218; ++i)
  {
    uint64_t v28 = *(void *)a10;
    int v29 = *(unsigned __int8 *)(*(void *)a10 + i + 2748);
    if (*(unsigned char *)(*(void *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        uint64_t v30 = heap_Calloc(*(void **)(v15 + 8), v20, 2);
        *(void *)(a10 + 8 * i + 1760) = v30;
        if (!v30) {
          goto LABEL_43;
        }
      }
      else if (v29 == 1)
      {
        *(void *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            uint64_t v31 = heap_Calloc(*(void **)(v15 + 8), v20, 9);
            *(void *)(a10 + 3560) = v31;
            if (!v31) {
              goto LABEL_43;
            }
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            int v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              uint64_t v34 = heap_Calloc(*(void **)(v15 + 8), (v33 * v20), 4);
              *(void *)(a10 + 3568) = v34;
              if (!v34) {
                goto LABEL_43;
              }
            }
            continue;
          case '4':
            int v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              uint64_t v36 = heap_Calloc(*(void **)(v15 + 8), (v35 * v20), 4);
              *(void *)(a10 + 3576) = v36;
              if (!v36) {
                goto LABEL_43;
              }
            }
            continue;
          case '5':
            int v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              uint64_t v38 = heap_Calloc(*(void **)(v15 + 8), (v37 * v20), 4);
              *(void *)(a10 + 3584) = v38;
              if (!v38) {
                goto LABEL_43;
              }
            }
            continue;
          case '6':
            int v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              uint64_t v40 = heap_Calloc(*(void **)(v15 + 8), (v39 * v20), 4);
              *(void *)(a10 + 3592) = v40;
              if (!v40) {
                goto LABEL_43;
              }
            }
            continue;
          case '8':
            int v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              uint64_t v42 = heap_Calloc(*(void **)(v15 + 8), (v41 * v20), 1);
              *(void *)(a10 + 3600) = v42;
              if (!v42) {
                goto LABEL_43;
              }
            }
            continue;
          default:
            if (i == 24)
            {
              uint64_t v32 = heap_Calloc(*(void **)(v15 + 8), v20, 8);
              *(void *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                int v43 = -2065686518;
                log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v101);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55007, (uint64_t)"%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  unsigned int v44 = *(unsigned __int16 *)(*(void *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, (uint64_t)"Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    int v43 = -2065686513;
    goto LABEL_122;
  }
  int v45 = (void *)heap_Calloc(*(void **)(v15 + 8), v44 * v20, 4);
  *(void *)(a10 + 3608) = v45;
  if (!v45)
  {
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v46, v47, v48, v49, v101);
LABEL_122:
    if (!a12) {
      goto LABEL_127;
    }
    goto LABEL_123;
  }
  if (*(unsigned __int16 *)(*(void *)a10 + 3578) * v20) {
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(void *)a10 + 3578) * v20);
  }
  int GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*a1, (uint64_t)"SELECT_BET3", (void *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    int v43 = GenericFeatureLayers;
    if (!a12) {
      goto LABEL_127;
    }
    goto LABEL_123;
  }
  int v43 = usextract_Process(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, a10, v51, v52);
  if (v43 < 0) {
    goto LABEL_122;
  }
  if (*(void *)(a10 + 3504))
  {
    uint64_t v53 = **(const char ***)(*(void *)a10 + 3336);
    if (v53)
    {
      uint64_t v54 = 0;
      unsigned int v55 = 1;
      do
      {
        int v56 = cstdlib_strncmp(v53, "INNO_", 5uLL);
        uint64_t v57 = *(void *)a10;
        if (v56)
        {
          uint64_t v58 = *(const char ***)(*(void *)(v57 + 3344) + 8 * v54);
          size_t v59 = cstdlib_strlen("FEATIDX");
          unsigned int Index = usextract_getIndex(v58, "FEATIDX", (unint64_t)&aFeatidx[v59]);
          if (Index == -1)
          {
            if (cstdlib_strcmp(*(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v54), "POS"))
            {
              if (!cstdlib_strcmp(*(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v54), "PHR")) {
                *(void *)(a10 + 512) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
              }
            }
            else
            {
              *(void *)(a10 + 504) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
            }
          }
          else
          {
            *(void *)(a10
                      + 8 * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)a10 + 3352) + 8 * v54) + Index)
                      + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
          }
        }
        else
        {
          unsigned int v61 = cstdlib_atoi((unsigned __int8 *)(*(void *)(*(void *)(v57 + 3336) + 8 * v54) + 5)) + 79;
          if (v61 <= 0x5E) {
            *(void *)(a10 + 8 * v61 + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
          }
        }
        uint64_t v54 = v55;
        uint64_t v53 = *(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v55++);
      }
      while (v53);
    }
  }
  int v102 = *(__int16 *)(a10 + 10);
  unsigned int v103 = v102 & ~(v102 >> 31);
  if (BET3FLT__log_select_GetLogLevel(*(void *)(v15 + 32)) >= 6)
  {
    LH_itoa(0x4Eu, (char *)v110, 0xAu);
    for (uint64_t j = 0; j != 218; ++j)
    {
      int v63 = "application/x-realspeak-usplosives;version=4.0";
      switch((int)j)
      {
        case 2:
          char v109 = 5;
          char v108 = 0;
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            (uint64_t)&v109,
            1u,
            0);
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            *(void *)(a10 + 8 * j + 16),
            v103,
            0);
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            (uint64_t)&v108,
            1u,
            0);
          continue;
        case 3:
          int v63 = "application/x-realspeak-usdurs;version=4.0";
          goto LABEL_72;
        case 4:
          goto LABEL_72;
        case 5:
          int v63 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_72:
          int v64 = *(unsigned __int8 *)(*(void *)a10 + j + 2748);
          if (v64 == 2)
          {
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)v63, *(void *)(a10 + 8 * j + 1760), 2 * v103, 0);
          }
          else if (v64 == 1)
          {
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)v63, *(void *)(a10 + 8 * j + 16), v103, 0);
          }
          break;
        default:
          continue;
      }
    }
  }
  unint64_t v65 = *(unsigned int *)(a10 + 3520);
  if (v65)
  {
    uint64_t v66 = 0;
    for (unint64_t k = 0; k < v65; ++k)
    {
      if (*(_DWORD *)(*(void *)(a10 + 3512) + v66) == 25)
      {
        v110[0] = 0;
        paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v110);
        unsigned int v68 = *(_DWORD *)(*(void *)(a10 + 3512) + v66 + 24);
        *a9 = v68;
        int v43 = paramc_ParamSetInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", v68);
        if (v43 < 0)
        {
          log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%d%s%x", v69, v70, v71, v72, "parameter");
          goto LABEL_44;
        }
        unint64_t v65 = *(unsigned int *)(a10 + 3520);
      }
      v66 += 32;
    }
  }
  featextract_adjustSilAudioOrder(a10);
  a4 = v106;
  a3 = v107;
  if (v104)
  {
    int v73 = *(_DWORD *)(a10 + 3520);
    uint64_t v74 = v73 + v103;
    *a12 = v74;
    if (v73 + v103)
    {
      uint64_t v75 = heap_Calloc(*(void **)(v15 + 8), v74, 32);
      *a11 = v75;
      if (v75)
      {
        int v76 = (void *)heap_Calloc(*(void **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
        if (v76)
        {
          uint64_t v77 = (uint64_t)v76;
          cstdlib_memcpy(v76, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
          if (*a12)
          {
            uint64_t v78 = 0;
            unint64_t v79 = 0;
            unsigned int v80 = 0;
            unint64_t v81 = 0;
            while (v81 < *(unsigned int *)(a10 + 3520))
            {
              if (v80 >= v103)
              {
                int v87 = (_OWORD *)(*a11 + v78);
                int v88 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
                long long v89 = v88[1];
                _OWORD *v87 = *v88;
                v87[1] = v89;
                ++v81;
                goto LABEL_96;
              }
              uint64_t v82 = v80;
              if (!*(_WORD *)(v77 + 2 * v80)) {
                goto LABEL_94;
              }
              uint64_t v83 = (_OWORD *)(*a11 + v78);
              uint64_t v84 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
              long long v85 = v84[1];
              *uint64_t v83 = *v84;
              v83[1] = v85;
              ++v81;
              --*(_WORD *)(v77 + 2 * v80);
LABEL_96:
              ++v79;
              v78 += 32;
              if (v79 >= *a12) {
                goto LABEL_97;
              }
            }
            uint64_t v82 = v80;
LABEL_94:
            uint64_t v86 = (_DWORD *)(*a11 + v78);
            *uint64_t v86 = 33;
            v86[6] = *(unsigned __int8 *)(*(void *)(a10 + 32) + v82);
            ++v80;
            goto LABEL_96;
          }
LABEL_97:
          heap_Free(*(void **)(v15 + 8), v77);
          goto LABEL_98;
        }
      }
LABEL_119:
      int v43 = -2065686518;
      log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v101);
      if (!a12) {
        goto LABEL_127;
      }
      goto LABEL_123;
    }
  }
LABEL_98:
  if (v102 < 1) {
    goto LABEL_122;
  }
  uint64_t v90 = 0;
  if (v103 <= 1) {
    uint64_t v91 = 1;
  }
  else {
    uint64_t v91 = v103;
  }
  uint64_t v92 = a2;
  do
  {
    uint64_t v93 = *(void *)(a10 + 248);
    if (!*(unsigned char *)(v93 + v90)) {
      *(unsigned char *)(v93 + v90) = -1;
    }
    uint64_t v94 = *(void *)(a10 + 192);
    if (*(unsigned char *)(*(void *)(a10 + 32) + v90) == 35) {
      char v95 = 1;
    }
    else {
      char v95 = 2 * *(unsigned char *)(v94 + v90);
    }
    *(unsigned char *)(v94 + v90) = v95;
    uint64_t v96 = *(void *)(a10 + 32);
    if ((unsigned __int16)(v102 & ~(unsigned __int16)(v102 >> 31)) - 1 == v90 && *(unsigned char *)(v96 + v90) == 35)
    {
      v110[0] = 0;
      paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v110);
      int v97 = 0;
      uint64_t v98 = *(void *)(a10 + 1784);
      if (v110[0] != 1) {
        int v97 = *(unsigned __int16 *)(v98 + 2 * v90) + 200 * *a9;
      }
      if (v97 <= 1) {
        int v97 = 1;
      }
      if (v97 >= 0xFFFF) {
        LOWORD(v97) = -1;
      }
      *(_WORD *)(v98 + 2 * v90) = v97;
      uint64_t v96 = *(void *)(a10 + 32);
      uint64_t v92 = a2;
    }
    *(unsigned char *)(v96 + v90) = *(unsigned char *)(v92 + *(unsigned __int8 *)(v96 + v90) + 7356);
    ++v90;
  }
  while (v91 != v90);
LABEL_44:
  a4 = v106;
  a3 = v107;
  if (a12)
  {
LABEL_123:
    if (a11 && v43 < 0 && *a11)
    {
      heap_Free(*(void **)(v15 + 8), *a11);
      *a11 = 0;
      *a12 = 0;
    }
  }
LABEL_127:
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(a1[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1) {
    return v43;
  }
  else {
    return result;
  }
}

uint64_t BET3FLT__select_bet3_FeatureExtractProcessEnd(uint64_t *a1, void *a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET3", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((void *)*a1, (uint64_t)"SELECT_BET3", a2);
  uint64_t v10 = 0;
  int v11 = 1;
  do
  {
    int v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(unsigned char *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        uint64_t v14 = a2[v10 + 220];
        if (v14) {
LABEL_11:
        }
          heap_Free(*(void **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          uint64_t v13 = a2[v10 + 2];
          if (v13) {
            heap_Free(*(void **)(v4 + 8), v13);
          }
          int v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            uint64_t v14 = a2[445];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            uint64_t v14 = a2[446];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '4':
            uint64_t v14 = a2[447];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '5':
            uint64_t v14 = a2[448];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '6':
            uint64_t v14 = a2[449];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '8':
            uint64_t v14 = a2[450];
            if (v14) {
              goto LABEL_11;
            }
            break;
          default:
            if (v10 == 24)
            {
              uint64_t v14 = a2[444];
              if (v14) {
                goto LABEL_11;
              }
            }
            else
            {
LABEL_20:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55010, (uint64_t)"%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  uint64_t v15 = a2[451];
  if (v15) {
    heap_Free(*(void **)(v4 + 8), v15);
  }
  cstdlib_memset(a2, 0, 8uLL);
  return v5;
}

float BET3FLT__mul_int32_Q8_24_to_int32(float a1, float a2)
{
  return a1 * a2;
}

float BET3FLT__mul_int32_Q8_24_to_Q8_24(float a1, float a2)
{
  return a1 * a2;
}

float BET3FLT__mul_Q18_14_Q1_15_to_Q18_14(float a1, float a2)
{
  return a1 * a2;
}

float BET3FLT__div_int32_int32_to_Q8_24(float a1, float a2)
{
  return a1 / a2;
}

float BET3FLT__div_Q8_24_Q12_20_to_Q8_24(float a1, float a2)
{
  return a1 / a2;
}

float BET3FLT__div_Q18_14_Q18_14_to_Q18_14(float a1, float a2)
{
  return a1 / a2;
}

uint64_t BET3FLT__LoadModelFile(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = a3;
  if (a2[a3 + 84])
  {
    uint64_t v7 = &a2[a3];
    unsigned int v9 = v7[32];
    uint64_t v8 = (int *)(v7 + 32);
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), v9, 8);
    *((void *)a2 + 21) = v10;
    if (!v10) {
      return 2229280778;
    }
    if (*v8 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = (int *)(a2 + 11);
      while (1)
      {
        uint64_t v14 = (unsigned int *)(a4 + 24 * v11);
        if (BET3FLT__xfread_BET3(a2, 4u, 1, v14) != 1 || (*a2 & 0x80000000) != 0)
        {
          int v67 = "LoadModelFile: the number of HMM states is illegal for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55020;
          goto LABEL_67;
        }
        if (BET3FLT__xfread_BET3(a2 + 11, 4u, 1, v14) != 1 || (int v20 = *v13, *v13 < 0))
        {
          int v67 = "LoadModelFile: the number of PDFs is illegal for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55021;
          goto LABEL_67;
        }
        if (!v12)
        {
          uint64_t v21 = heap_Calloc(*(void **)(v5 + 8), (*v8 * v20), 8);
          if (!v21) {
            return 2229280778;
          }
          uint64_t v12 = v21;
          int v20 = *v13;
        }
        uint64_t v22 = v6;
        *(void *)(*((void *)a2 + 21) + 8 * v11) = v12 + 8 * v20 * (int)v11;
        *(void *)(*((void *)a2 + 21) + 8 * v11) -= 8;
        if (v20 >= 1) {
          break;
        }
LABEL_16:
        ++v11;
        uint64_t v6 = v22;
        if (v11 >= *v8) {
          goto LABEL_17;
        }
      }
      uint64_t v23 = 0;
      int v24 = *a2;
      uint64_t v25 = 8;
      while (1)
      {
        int v26 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*((void *)a2 + 21) + 8 * v11) + v25), 4u, (2 * v24), v14);
        int v24 = *a2;
        if (v26 != 2 * *a2) {
          break;
        }
        uint64_t v27 = *(void *)(*((void *)a2 + 21) + 8 * v11) + 8 * v23;
        *(void *)(v27 + 8) -= 8;
        ++v23;
        v25 += 8;
        if (v23 >= (int)a2[11]) {
          goto LABEL_16;
        }
      }
      int v67 = "LoadModelFile: PDF read failed for %s %d\n";
      uint64_t v68 = v5;
      uint64_t v69 = 55022;
      goto LABEL_67;
    }
  }
LABEL_17:
  uint64_t v28 = &a2[v6];
  if (v28[94])
  {
    int v29 = (int *)(v28 + 32);
    uint64_t v30 = heap_Calloc(*(void **)(v5 + 8), v28[32], 8);
    uint64_t v31 = &a2[2 * v6];
    *((void *)v31 + 22) = v30;
    uint64_t v32 = v31 + 44;
    uint64_t v33 = 2229280778;
    if (!v30) {
      return v33;
    }
    uint64_t v73 = heap_Calloc(*(void **)(v5 + 8), *a2 * *v29, 8);
    if (!v73) {
      return v33;
    }
    if (*v29 >= 1)
    {
      uint64_t v34 = 0;
      int v35 = &a2[v6 + 1];
      uint64_t v36 = &a2[2 * v6 + 12];
      uint64_t v71 = v5;
      uint64_t v74 = v6;
      while (1)
      {
        int v37 = (unsigned int *)(a4 + 24 * v34);
        if (BET3FLT__xfread_BET3(v35, 4u, 1, v37) != 1 || (*v35 & 0x80000000) != 0)
        {
          int v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55023;
          goto LABEL_67;
        }
        int v38 = BET3FLT__xfread2ptr_BET3(v36, 4u, *a2, v37);
        if (v38 != *a2)
        {
          int v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55024;
          goto LABEL_67;
        }
        uint64_t v39 = *(void *)v36;
        *(void *)v36 -= 8;
        if (v38 > 0) {
          break;
        }
        *(void *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
        *(void *)(*v32 + 8 * v34) -= 16;
LABEL_34:
        ++v34;
        uint64_t v5 = v71;
        uint64_t v6 = v74;
        if (v34 >= *v29) {
          goto LABEL_35;
        }
      }
      uint64_t v40 = 0;
      do
      {
        if ((*(_DWORD *)(v39 + 4 * v40) & 0x80000000) != 0)
        {
          int v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
          uint64_t v68 = v5;
          uint64_t v69 = 55025;
          goto LABEL_67;
        }
        ++v40;
      }
      while ((v38 + 2) - 2 != v40);
      *(void *)(*v32 + 8 * v34) = v73 + 8 * v38 * (int)v34;
      *(void *)(*v32 + 8 * v34) -= 16;
      uint64_t v41 = *(void *)v36;
      unsigned int v42 = *v35;
      uint64_t v43 = 16;
      uint64_t v44 = 2;
      while (1)
      {
        int v45 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*v32 + 8 * v34) + v43), 4u, 2 * *(_DWORD *)(v41 + 4 * v44) * v42, v37);
        uint64_t v41 = *(void *)v36;
        unsigned int v42 = *v35;
        if (v45 != 2 * *(_DWORD *)(*(void *)v36 + 4 * v44) * *v35) {
          break;
        }
        v43 += 8;
        BOOL v46 = v44++ <= (int)*a2;
        if (!v46) {
          goto LABEL_34;
        }
      }
      int v67 = "LoadModelFile: PDF read failed for %s %d\n";
      uint64_t v68 = v71;
      uint64_t v69 = 55026;
      goto LABEL_67;
    }
  }
LABEL_35:
  if (!v28[104]) {
    return 0;
  }
  uint64_t v47 = &a2[v6];
  unsigned int v49 = v47[32];
  uint64_t v48 = (int *)(v47 + 32);
  uint64_t v50 = heap_Calloc(*(void **)(v5 + 8), v49, 8);
  uint64_t v75 = v6;
  uint64_t v51 = &a2[2 * v6];
  *((void *)v51 + 32) = v50;
  uint64_t v33 = 2229280778;
  if (v50)
  {
    uint64_t v52 = heap_Calloc(*(void **)(v5 + 8), *a2 * *v48, 8);
    if (v52)
    {
      if (*v48 >= 1)
      {
        uint64_t v53 = v52;
        uint64_t v54 = 0;
        unsigned int v55 = v51 + 64;
        int v56 = &a2[v75 + 1];
        uint64_t v57 = &a2[2 * v75 + 12];
        uint64_t v72 = v5;
        while (1)
        {
          uint64_t v58 = (unsigned int *)(a4 + 24 * v54);
          if (BET3FLT__xfread_BET3(v56, 4u, 1, v58) != 1 || (*v56 & 0x80000000) != 0)
          {
            int v67 = "LoadModelFile: the vector size is illegal for %s %d\n";
            uint64_t v68 = v5;
            uint64_t v69 = 55027;
            goto LABEL_67;
          }
          int v59 = BET3FLT__xfread2ptr_BET3(v57, 4u, *a2, v58);
          if (v59 != *a2)
          {
            int v67 = "LoadModelFile: reading the number of PDFs failed for %s %d\n";
            uint64_t v68 = v5;
            uint64_t v69 = 55028;
            goto LABEL_67;
          }
          uint64_t v60 = *(void *)v57;
          *(void *)v57 -= 8;
          if (v59 > 0) {
            break;
          }
          *(void *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
          *(void *)(*v55 + 8 * v54) -= 16;
LABEL_52:
          uint64_t v33 = 0;
          ++v54;
          uint64_t v5 = v72;
          if (v54 >= *v48) {
            return v33;
          }
        }
        uint64_t v61 = 0;
        do
        {
          if ((*(_DWORD *)(v60 + 4 * v61) & 0x80000000) != 0)
          {
            int v67 = "LoadModelFile: the number of PDFs for %s at state %d is illegal\n";
            uint64_t v68 = v5;
            uint64_t v69 = 55029;
            goto LABEL_67;
          }
          ++v61;
        }
        while ((v59 + 2) - 2 != v61);
        *(void *)(*v55 + 8 * v54) = v53 + 8 * v59 * (int)v54;
        *(void *)(*v55 + 8 * v54) -= 16;
        uint64_t v62 = *(void *)v57;
        unsigned int v63 = *v56;
        uint64_t v64 = 16;
        uint64_t v65 = 2;
        while (1)
        {
          int v66 = BET3FLT__xfread2ptr_BET3((void *)(*(void *)(*v55 + 8 * v54) + v64), 4u, 4 * *(_DWORD *)(v62 + 4 * v65) * v63, v58);
          uint64_t v62 = *(void *)v57;
          unsigned int v63 = *v56;
          if (v66 != 4 * *(_DWORD *)(*(void *)v57 + 4 * v65) * *v56) {
            break;
          }
          v64 += 8;
          BOOL v46 = v65++ <= (int)*a2;
          if (!v46) {
            goto LABEL_52;
          }
        }
        int v67 = "LoadModelFile: PDF read failed for %s %d\n";
        uint64_t v68 = v72;
        uint64_t v69 = 55030;
LABEL_67:
        BET3FLT__log_select_Error(v68, v69, (uint64_t)v67, v15, v16, v17, v18, v19);
        return 2229280772;
      }
      return 0;
    }
  }
  return v33;
}

uint64_t BET3FLT__FindDurPDF(int32x2_t *a1, int *a2, int a3, int a4, int a5, float a6)
{
  uint64_t v6 = a1[1].i32[0];
  a1[3] = 0;
  LODWORD(v7) = *a2;
  if (*a2 >= 1)
  {
    uint64_t v13 = a4;
    uint64_t v14 = 2;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v30 = _Q0;
    float v20 = 0.0;
    do
    {
      uint64_t v21 = *(void *)(*(void *)(*((void *)a2 + 21) + 8 * v13) + 8 * v6);
      float v22 = *(float *)(v21 + 4 * v14);
      float v23 = *(float *)(v21 + 4 * ((int)v14 + (int)v7));
      if (a5) {
        float v23 = BET3FLT__bet3_finv(v23);
      }
      float v24 = v22 + (float)(v23 * a6);
      if (v24 < 0.0) {
        float v24 = 0.0;
      }
      if (a2[115])
      {
        if (v24 > 4000.0) {
          float v24 = 4000.0;
        }
      }
      else if (v24 > 4000.0)
      {
        float v24 = v20 * 0.5;
      }
      v25.f64[0] = (float)(v24 + (float)a3);
      int32x2_t v26 = a1[2];
      v25.f64[1] = sqrt(v23);
      int32x2_t v27 = vmovn_s64(vcvtq_s64_f64(vaddq_f64(v25, v30)));
      *(_DWORD *)(*(void *)&v26 + 4 * v14) = v27.i32[0];
      a1[3] = vadd_s32(a1[3], v27);
      a3 += (int)(float)(v24 - (float)*(int *)(*(void *)&v26 + 4 * v14));
      uint64_t v7 = *a2;
      float v20 = v24;
    }
    while (v14++ <= v7);
  }
  return 0;
}

uint64_t BET3FLT__FindContPDF(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = (void *)(a3 + 8 * a1);
  uint64_t v6 = *(int *)(a4 + 4 * a1 + 4);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 8 * a1 + 176) + 8 * a5) + 8 * a2)
     + 4 * (2 * *(_DWORD *)(v5[9] + 4 * a2) - 2) * (int)v6;
  *(void *)(v5[19] + 8 * a2) = v7;
  *(void *)(v5[29] + 8 * a2) = v7 + 4 * v6;
  return 0;
}

uint64_t BET3FLT__FindMsdPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6 = a4 + 4 * a1;
  int v9 = *(_DWORD *)(v6 + 4);
  uint64_t v7 = (int *)(v6 + 4);
  int v8 = v9;
  if (v9 >= 1)
  {
    int v10 = 0;
    uint64_t v11 = a2;
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 8 * a1 + 256) + 8 * a6) + 8 * a2)
        + 4 * (4 * *(_DWORD *)(*(void *)(a3 + 8 * a1 + 72) + 4 * a2) - 4) * v8;
    uint64_t v13 = a3 + 8 * a1;
    uint64_t v14 = a5 + 4 * a1;
    uint64_t v15 = (void *)(v13 + 152);
    uint64_t v16 = (void *)(v13 + 232);
    uint64_t v17 = (int *)(v14 + 224);
    uint64_t v18 = (float *)(v14 + 2104);
    uint64_t v19 = 1;
    do
    {
      uint64_t v20 = v12 + 4 * v10;
      uint64_t v21 = *(void *)(*v15 + 8 * v11);
      *(_DWORD *)(v21 + 4 * v19) = *(_DWORD *)v20;
      float v22 = *(float *)(v20 + 4);
      *(float *)(*(void *)(*v16 + 8 * v11) + 4 * v19) = v22;
      float v23 = *(float *)(a5 + 44);
      if (v23 != 0.0 && *v17 == 2) {
        *(float *)(v21 + 4 * v19) = *(float *)(v21 + 4 * v19) + (float)(v22 * v23);
      }
      if (v19 == 1)
      {
        int v24 = *v17;
        if (*v17 == 2) {
          *(_DWORD *)(*(void *)(a3 + 320) + 4 * v11) = *(_DWORD *)(v20 + 8);
        }
        float v25 = *(float *)(v20 + 8);
        uint64_t v26 = 1 << v24;
        uint64_t v27 = *(void *)(a3 + 312);
        if (v25 <= *v18) {
          char v28 = *(unsigned char *)(v27 + v11) & ~(_BYTE)v26;
        }
        else {
          char v28 = *(unsigned char *)(v27 + v11) | v26;
        }
        *(unsigned char *)(v27 + v11) = v28;
      }
      v10 += 4;
    }
    while (v19++ < *v7);
  }
  return 0;
}

uint64_t BET3FLT__FindDurPDF_PerStateRho(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = *(int *)(a1 + 8);
  *(void *)(a1 + 24) = 0;
  LODWORD(v7) = *a2;
  if (*a2 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a5;
    float v15 = 0.0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(*((void *)a2 + 21) + 8 * v14) + 8 * v6);
      float v17 = *(float *)(v16 + 4 * v13 + 8);
      float v18 = *(float *)(a3 + 4 * v13);
      float v19 = *(float *)(v16 + 4 * (v13 + (int)v7) + 8);
      if (a6) {
        float v19 = BET3FLT__bet3_finv(v19);
      }
      double v20 = sqrt(v19);
      float v21 = v20;
      float v22 = v17 + (float)(v18 * v21);
      if (v22 < 0.0) {
        float v22 = 0.0;
      }
      if (a2[115])
      {
        if (v22 > 4000.0) {
          float v22 = 4000.0;
        }
      }
      else if (v22 > 4000.0)
      {
        float v22 = v15 * 0.5;
      }
      int v23 = (int)((float)(v22 + (float)a4) + 0.5);
      uint64_t v24 = *(void *)(a1 + 16) + 4 * v13;
      if (v23 <= 1) {
        int v23 = 1;
      }
      *(_DWORD *)(v24 + 8) = v23;
      int v25 = *(_DWORD *)(a1 + 28) + (int)(v20 + 0.5);
      *(_DWORD *)(a1 + 24) += v23;
      *(_DWORD *)(a1 + 28) = v25;
      a4 += (int)(float)(v22 - (float)*(int *)(v24 + 8));
      uint64_t v7 = *a2;
      uint64_t v26 = v13 + 2;
      ++v13;
      float v15 = v22;
    }
    while (v26 <= v7);
  }
  return 0;
}

uint64_t BET3FLT__FindLF0PDF_PerStateRho(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  uint64_t v8 = a4 + 4 * a1;
  int v11 = *(_DWORD *)(v8 + 4);
  int v10 = (int *)(v8 + 4);
  int v9 = v11;
  if (v11 >= 1)
  {
    uint64_t v14 = a2;
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a4 + 8 * a1 + 256) + 8 * a6) + 8 * a2)
        + 4 * (4 * *(_DWORD *)(*(void *)(a3 + 8 * a1 + 72) + 4 * a2) - 4) * v9;
    uint64_t v16 = a3 + 8 * a1;
    float v17 = (void *)(v16 + 152);
    float v18 = (void *)(v16 + 232);
    uint64_t v19 = a5 + 4 * a1;
    double v20 = a8;
    float v21 = (float *)(v19 + 2104);
    float v22 = (_DWORD *)(v19 + 224);
    uint64_t v23 = 1;
    do
    {
      uint64_t v24 = v15 + 4 * (4 * (int)v23 - 4);
      int v25 = (float *)(*(void *)(*v17 + 8 * v14) + 4 * v23);
      *int v25 = *(float *)v24;
      float v26 = *(float *)(v24 + 4);
      *(float *)(*(void *)(*v18 + 8 * v14) + 4 * v23) = v26;
      if (a8 != 0.0)
      {
        if (a7)
        {
          double v27 = sqrt(BET3FLT__bet3_finv(v26));
          int v25 = (float *)(*(void *)(*v17 + 8 * v14) + 4 * v23);
        }
        else
        {
          double v27 = sqrt(v26);
        }
        float v28 = v27 * v20;
        *int v25 = *v25 + v28;
      }
      if (v23 == 1)
      {
        *(_DWORD *)(*(void *)(a3 + 320) + 4 * v14) = *(_DWORD *)(v24 + 8);
        uint64_t v29 = 1 << *v22;
        uint64_t v30 = *(void *)(a3 + 312);
        if (*(float *)(v24 + 8) <= *v21) {
          char v31 = *(unsigned char *)(v30 + v14) & ~(_BYTE)v29;
        }
        else {
          char v31 = *(unsigned char *)(v30 + v14) | v29;
        }
        *(unsigned char *)(v30 + v14) = v31;
      }
    }
    while (v23++ < *v10);
  }
  return 0;
}

void *BET3FLT__DeInitModelSet(uint64_t a1, char *__b)
{
  if (*((int *)__b + 114) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t **)(__b + 256);
    uint64_t v6 = __b + 416;
    do
    {
      if (*(v6 - 20))
      {
        uint64_t v7 = (void *)*((void *)__b + 21);
        if (v7)
        {
          if (*v7)
          {
            *v7 += 8;
            heap_Free(*(void **)(a1 + 8), **((void **)__b + 21));
            uint64_t v7 = (void *)*((void *)__b + 21);
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v7);
          *((void *)__b + 21) = 0;
        }
      }
      if (*(v6 - 10))
      {
        uint64_t v8 = *(v5 - 10);
        if (v8)
        {
          if (*v8)
          {
            *v8 += 16;
            heap_Free(*(void **)(a1 + 8), **(v5 - 10));
            uint64_t v8 = *(v5 - 10);
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v8);
        }
      }
      if (*v6)
      {
        int v9 = *v5;
        if (*v5)
        {
          if (*v9)
          {
            *v9 += 16;
            heap_Free(*(void **)(a1 + 8), **v5);
            int v9 = *v5;
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v9);
        }
      }
      ++v4;
      ++v5;
      ++v6;
    }
    while (v4 < *((int *)__b + 114));
  }

  return cstdlib_memset(__b, 0, 0x1D0uLL);
}

uint64_t BET3FLT__InitUttModel(uint64_t a1, char *__b, int *a3, unsigned int a4)
{
  uint64_t v8 = 2229280778;
  cstdlib_memset(__b, 0, 0x240uLL);
  *(void *)__b = a1;
  *((void *)__b + 1) = a3;
  *((_DWORD *)__b + 138) = a4;
  *((_DWORD *)__b + 141) = *a3 * a4;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a4, 528);
  *((void *)__b + 68) = v9;
  if (v9)
  {
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 4);
    *((void *)__b + 4) = v10;
    if (v10)
    {
      uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 1);
      *((void *)__b + 41) = v11;
      if (v11)
      {
        uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 4);
        *((void *)__b + 42) = v12;
        if (v12)
        {
          int v13 = a3[114];
          if (v13 >= 1)
          {
            uint64_t v14 = 0;
            uint64_t v15 = __b + 168;
            uint64_t v16 = a3;
            do
            {
              if (!v16[84])
              {
                uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 4);
                *(v15 - 10) = v17;
                if (!v17) {
                  return v8;
                }
                float v18 = *(void **)(a1 + 8);
                int v19 = *((_DWORD *)__b + 138);
                double v20 = v16[104]
                    ? BET3FLT__int32_ccalloc(v18, 2 * v19 * *a3, v16[1] + 1)
                    : (void *)heap_Calloc(v18, (2 * v19 * *a3), 8);
                *uint64_t v15 = v20;
                if (!v20) {
                  return v8;
                }
                v15[10] = &v20[*a3 * *((_DWORD *)__b + 138)];
                int v13 = a3[114];
              }
              ++v14;
              ++v16;
              ++v15;
            }
            while (v14 < v13);
          }
          uint64_t v21 = *((unsigned int *)__b + 138);
          if ((int)v21 >= 1)
          {
            uint64_t v22 = 0;
            uint64_t v23 = *a3;
            uint64_t v24 = 152;
            do
            {
              uint64_t v25 = *((void *)__b + 68);
              uint64_t v26 = v25 + 528 * v22;
              *(_DWORD *)uint64_t v26 = v22;
              uint64_t v27 = v22 * v23;
              uint64_t v28 = *((void *)__b + 41) + v22 * v23;
              uint64_t v29 = *((void *)__b + 42) + 4 * v22 * v23;
              *(void *)(v26 + 16) = *((void *)__b + 4) + 4 * v22 * v23 - 8;
              *(void *)(v26 + 312) = v28 - 2;
              *(void *)(v26 + 320) = v29 - 8;
              if (v13 >= 1)
              {
                uint64_t v30 = (uint64_t *)(v25 + v24);
                char v31 = __b + 168;
                uint64_t v32 = v13;
                uint64_t v33 = a3 + 84;
                do
                {
                  if (!*v33++)
                  {
                    uint64_t v35 = *(v31 - 10) + 4 * v27;
                    *(v30 - 10) = v35;
                    uint64_t v36 = *v31 + 8 * v27;
                    *uint64_t v30 = v36;
                    uint64_t v37 = v31[10] + 8 * v27;
                    *(v30 - 10) = v35 - 8;
                    *uint64_t v30 = v36 - 16;
                    v30[10] = v37 - 16;
                  }
                  ++v30;
                  ++v31;
                  --v32;
                }
                while (v32);
              }
              ++v22;
              v24 += 528;
            }
            while (v22 != v21);
          }
          return 0;
        }
      }
    }
  }
  return v8;
}

void *BET3FLT__DeInitUttModel(void *result)
{
  uint64_t v1 = result;
  if (*result && result[68])
  {
    uint64_t v2 = result[1];
    uint64_t v3 = result[4];
    if (v3)
    {
      heap_Free(*(void **)(*result + 8), v3);
      v1[4] = 0;
    }
    uint64_t v4 = v1[41];
    if (v4)
    {
      heap_Free(*(void **)(*v1 + 8), v4);
      v1[41] = 0;
    }
    uint64_t v5 = v1[42];
    if (v5)
    {
      heap_Free(*(void **)(*v1 + 8), v5);
      v1[42] = 0;
    }
    if (*(int *)(v2 + 456) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        if (!*(_DWORD *)(v2 + 336 + 4 * v6))
        {
          uint64_t v7 = &v1[v6];
          uint64_t v8 = v7[11];
          if (v8)
          {
            heap_Free(*(void **)(*v1 + 8), v8);
            v7[11] = 0;
          }
          uint64_t v9 = v7[21];
          if (v9)
          {
            heap_Free(*(void **)(*v1 + 8), v9);
            v7[21] = 0;
          }
        }
        ++v6;
      }
      while (v6 < *(int *)(v2 + 456));
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v1[68]);
  }
  v1[68] = 0;
  *((_DWORD *)v1 + 138) = 0;
  *uint64_t v1 = 0;
  return result;
}

void *BET3FLT__DeInitMSDUttModel(void *result, int a2)
{
  uint64_t v2 = result[1];
  if (!*(_DWORD *)(v2 + 4 * a2 + 336))
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = &result[a2];
    uint64_t v6 = v5[11];
    if (v6)
    {
      uint64_t result = heap_Free(*(void **)(*result + 8), v6);
      v5[11] = 0;
    }
    uint64_t v9 = (void *)v5[21];
    uint64_t v8 = (uint64_t **)(v5 + 21);
    uint64_t v7 = v9;
    if (v9)
    {
      if (*(_DWORD *)(v2 + 4 * v4 + 416))
      {
        *v7 += 4;
        uint64_t result = BET3FLT__int32_free(*(void **)(*v3 + 8), *v8);
      }
      else
      {
        uint64_t result = heap_Free(*(void **)(*v3 + 8), (uint64_t)v7);
      }
      *uint64_t v8 = 0;
    }
  }
  return result;
}

uint64_t BET3FLT__InitModelSet(int a1, char *__b, _DWORD *a3)
{
  cstdlib_memset(__b, 0, 0x1D0uLL);
  int v5 = a3[33];
  *((_DWORD *)__b + 114) = v5;
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = __b + 376;
    uint64_t v8 = 536;
    do
    {
      *((_DWORD *)v7 - 62) = a3[86];
      uint64_t v9 = __b + 336;
      if (v8 != 536)
      {
        if (a3[536]) {
          uint64_t v9 = &__b[4 * v6 + 416];
        }
        else {
          uint64_t v9 = v7;
        }
      }
      ++a3;
      *(_DWORD *)uint64_t v9 = 1;
      ++v6;
      uint64_t v10 = v8 - 535;
      ++v8;
      v7 += 4;
    }
    while (v10 < *((int *)__b + 114));
  }
  return 0;
}

uint64_t BET3FLT__meancpy(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(unsigned int *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        uint64_t v4 = *(uint64_t **)(result + 72);
        int v5 = *(uint64_t **)(result + 40);
        uint64_t v6 = v3;
        do
        {
          uint64_t v7 = *v4++;
          int v8 = *(_DWORD *)(v7 + 4 * v2);
          uint64_t v9 = *v5++;
          *(_DWORD *)(v9 + 4 * v2) = v8;
          --v6;
        }
        while (v6);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return result;
}

float BET3FLT__ConstW_Calc_R_and_r(uint64_t a1, int a2)
{
  uint64_t v3 = *(float ***)(a1 + 96);
  uint64_t v2 = *(float **)(a1 + 104);
  uint64_t v4 = *(uint64_t **)(a1 + 72);
  int v5 = *(uint64_t **)(a1 + 80);
  int v6 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 20);
  uint64_t v8 = a2;
  uint64_t v9 = *v5;
  uint64_t v10 = v5[1];
  float v11 = *(float *)(*v5 + 4 * a2);
  uint64_t v12 = *v4;
  uint64_t v13 = v4[1];
  float v14 = v11 * *(float *)(*v4 + 4 * a2);
  *uint64_t v2 = v14;
  float v15 = *(float *)(v10 + 4 * (v6 + a2));
  uint64_t v16 = v6 + a2;
  float v17 = v14 + (float)((float)(v15 * -0.5) * *(float *)(v13 + 4 * v16));
  *uint64_t v2 = v17;
  uint64_t v18 = a2 + 2 * v6;
  float v19 = *(float *)(v9 + 4 * v18);
  float v20 = v17 + (float)((float)(v19 * -2.0) * *(float *)(v12 + 4 * v18));
  *uint64_t v2 = v20;
  float v21 = *(float *)(v10 + 4 * v18);
  *uint64_t v2 = v20 + (float)(v21 * *(float *)(v13 + 4 * v18));
  uint64_t v22 = *v3;
  float *v22 = v11 + (float)((float)((float)(v19 * 4.0) + (float)(v15 * 0.25)) + v21);
  v22[1] = (float)(v19 * -2.0) + (float)(v21 * -2.0);
  void v22[2] = v21 + (float)(v15 * -0.25);
  if (v7 < 3)
  {
    LODWORD(v23) = 1;
  }
  else
  {
    uint64_t v23 = (v7 - 1);
    uint64_t v24 = v3 + 1;
    uint64_t v25 = v2 + 1;
    uint64_t v26 = v5 + 2;
    uint64_t v27 = v4 + 2;
    uint64_t v28 = v23 - 1;
    do
    {
      float v29 = *(float *)(v10 + 4 * v8);
      float v30 = v29 * *(float *)(v13 + 4 * v8);
      *uint64_t v25 = v30;
      uint64_t v31 = *(v26 - 2);
      float v32 = *(float *)(v31 + 4 * v16);
      uint64_t v33 = *(v27 - 2);
      float v34 = v30 + (float)((float)(v32 * 0.5) * *(float *)(v33 + 4 * v16));
      *uint64_t v25 = v34;
      uint64_t v36 = *v26++;
      uint64_t v35 = v36;
      float v37 = *(float *)(v36 + 4 * v16);
      uint64_t v39 = *v27++;
      uint64_t v38 = v39;
      float v40 = v34 + (float)((float)(v37 * -0.5) * *(float *)(v39 + 4 * v16));
      *uint64_t v25 = v40;
      float v41 = *(float *)(v31 + 4 * v18);
      float v42 = v40 + (float)(v41 * *(float *)(v33 + 4 * v18));
      *uint64_t v25 = v42;
      float v43 = *(float *)(v10 + 4 * v18);
      float v44 = v42 + (float)((float)(v43 * -2.0) * *(float *)(v13 + 4 * v18));
      *uint64_t v25 = v44;
      float v45 = *(float *)(v35 + 4 * v18);
      *v25++ = v44 + (float)(v45 * *(float *)(v39 + 4 * v18));
      BOOL v46 = *v24++;
      float *v46 = (float)((float)((float)((float)(v29 + (float)(v32 * 0.25)) + (float)(v37 * 0.25)) + v41) + v45)
           + (float)(v43 * 4.0);
      v46[1] = (float)(v45 * -2.0) + (float)(v43 * -2.0);
      v46[2] = v45 + (float)(v37 * -0.25);
      uint64_t v13 = v38;
      uint64_t v10 = v35;
      --v28;
    }
    while (v28);
    uint64_t v10 = v5[v23];
    uint64_t v13 = v4[v23];
  }
  float v47 = *(float *)(v10 + 4 * v8);
  float v48 = v47 * *(float *)(v13 + 4 * v8);
  v2[v23] = v48;
  uint64_t v49 = v5[(int)v23 - 1];
  float v50 = *(float *)(v49 + 4 * v16);
  uint64_t v51 = v4[(int)v23 - 1];
  float v52 = v48 + (float)((float)(v50 * 0.5) * *(float *)(v51 + 4 * v16));
  v2[v23] = v52;
  float v53 = *(float *)(v49 + 4 * v18);
  float v54 = v52 + (float)(v53 * *(float *)(v51 + 4 * v18));
  v2[v23] = v54;
  float v55 = *(float *)(v10 + 4 * v18);
  v2[v23] = v54 + (float)((float)(v55 * -2.0) * *(float *)(v13 + 4 * v18));
  int v56 = v3[v23];
  float result = v47 + (float)((float)(v53 + (float)(v50 * 0.25)) + (float)(v55 * 4.0));
  *int v56 = result;
  v56[1] = 0.0;
  v56[2] = 0.0;
  return result;
}

float BET3FLT__ConstW_Cholesky(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = *(_DWORD **)v2;
  uint64_t v3 = *(float **)(v2 + 8);
  LODWORD(a2) = **(_DWORD **)v2;
  float32x2_t v5 = vdiv_f32(*(float32x2_t *)(*(void *)v2 + 4), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
  *(float32x2_t *)(v4 + 1) = v5;
  float v6 = v3[1];
  *(float *)&a2 = *v3 + (float)((float)((float)-v5.f32[0] * v5.f32[0]) * *(float *)&a2);
  *uint64_t v3 = *(float *)&a2;
  float v7 = (float)(v6 + (float)((float)-(float)(*((float *)v4 + 1) * *((float *)v4 + 2)) * *(float *)v4)) / *(float *)&a2;
  float v8 = v3[2] / *(float *)&a2;
  v3[1] = v7;
  v3[2] = v8;
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  if ((int)v9 >= 3)
  {
    uint64_t v10 = (float **)(v2 + 16);
    uint64_t v11 = v9 - 2;
    do
    {
      uint64_t v12 = *v10;
      float v13 = (*v10)[1];
      float v14 = **v10 + (float)((float)-(float)(v7 * v7) * *(float *)&a2);
      *uint64_t v12 = v14;
      *(float *)&a2 = v14 + (float)((float)-(float)((*(v10 - 2))[2] * (*(v10 - 2))[2]) * **(v10 - 2));
      *uint64_t v12 = *(float *)&a2;
      float v7 = (float)(v13 + (float)((float)-(float)(v3[1] * v3[2]) * *v3)) / *(float *)&a2;
      float v15 = v12[2] / *(float *)&a2;
      v12[1] = v7;
      v12[2] = v15;
      ++v10;
      uint64_t v3 = v12;
      --v11;
    }
    while (v11);
  }
  return *(float *)&a2;
}

float BET3FLT__ConstW_Cholesky_forward(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 96);
  uint64_t v1 = *(float **)(a1 + 104);
  uint64_t v3 = *(float **)(a1 + 88);
  float v4 = *v1;
  *uint64_t v3 = *v1;
  uint64_t v5 = *v2;
  float result = v1[1] - (float)(*(float *)(*v2 + 4) * v4);
  v3[1] = result;
  uint64_t v7 = *(unsigned int *)(a1 + 20);
  if ((int)v7 >= 3)
  {
    float v8 = v3 + 2;
    uint64_t v9 = v1 + 2;
    uint64_t v10 = v2 + 1;
    uint64_t v11 = v7 - 2;
    do
    {
      float v12 = *v9++;
      float v13 = v12;
      float v14 = *(float *)(v5 + 8);
      uint64_t v15 = *v10++;
      uint64_t v5 = v15;
      float result = v13 - (float)((float)(v14 * *(v8 - 2)) + (float)(*(float *)(v15 + 4) * result));
      *v8++ = result;
      --v11;
    }
    while (v11);
  }
  return result;
}

float BET3FLT__ConstW_Cholesky_backward(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 40);
  float v6 = *(float *)(v3 + 4 * (v2 - 1)) / **(float **)(v4 + 8 * (v2 - 1));
  *(float *)(*(void *)(v5 + 8 * (v2 - 1)) + 4 * a2) = v6;
  uint64_t v7 = *(float **)(v4 + 8 * (v2 - 2));
  float result = (float)(*(float *)(v3 + 4 * (v2 - 2)) / *v7) - (float)(v7[1] * v6);
  *(float *)(*(void *)(v5 + 8 * (v2 - 2)) + 4 * a2) = result;
  BOOL v9 = __OFSUB__(v2, 3);
  uint64_t v10 = (v2 - 3);
  if ((int)v10 < 0 == v9)
  {
    uint64_t v11 = (void *)(v5 + 8 * v10 + 16);
    float v12 = v11;
    do
    {
      uint64_t v13 = *--v12;
      float result = (float)((float)(*(float *)(v3 + 4 * v10) / **(float **)(v4 + 8 * v10))
                     - (float)(*(float *)(*(void *)(v4 + 8 * v10) + 4) * *(float *)(v13 + 4 * a2)))
             - (float)(*(float *)(*(void *)(v4 + 8 * v10) + 8) * *(float *)(*v11 + 4 * a2));
      *(float *)(*(v11 - 2) + 4 * a2) = result;
      --v10;
      uint64_t v11 = v12;
    }
    while (v10 != -1);
  }
  return result;
}

void BET3FLT__mlpg2(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 20) < 2)
  {
    BET3FLT__meancpy(a1);
  }
  else
  {
    *(float *)&double v4 = BET3FLT__ConstW_Calc_R_and_r(a1, a2);
    BET3FLT__ConstW_Cholesky(a1, v4);
    BET3FLT__ConstW_Cholesky_forward(a1);
    BET3FLT__ConstW_Cholesky_backward(a1, a2);
  }
}

char *BET3FLT__heap_StrDup(void *a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  int v4 = cstdlib_strlen(__s);
  uint64_t v5 = (char *)heap_Calloc(a1, (v4 + 1), 1);
  float v6 = v5;
  if (v5) {
    cstdlib_strcpy(v5, __s);
  }
  return v6;
}

uint64_t BET3FLT__xfread_BET3(void *a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *a4;
  unsigned int v7 = a4[4];
  if (v6 + a3 * a2 > v7) {
    uint64_t v5 = (v7 - v6) / a2;
  }
  if (v5)
  {
    size_t v8 = v5 * a2;
    cstdlib_memcpy(a1, (const void *)(*((void *)a4 + 1) + v6), v8);
    *a4 += v8;
  }
  return v5;
}

uint64_t BET3FLT__xfread2ptr_BET3(void *a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = *a4;
  if (a2 >= 2 && v4 % a2) {
    return 0;
  }
  unsigned int v5 = a4[4];
  if (v4 + a3 * a2 > v5) {
    a3 = (v5 - v4) / a2;
  }
  if (a3)
  {
    *a1 = *((void *)a4 + 1) + v4;
    *a4 = v4 + a3 * a2;
  }
  return a3;
}

uint64_t BET3FLT__log_out_Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9 = a3 - 1;
  do
    int v10 = *(unsigned __int8 *)++v9;
  while (v10 == 10);
  return log_VOutEvent(*(uint64_t ***)(a1 + 32), a2, v9, &a9);
}

uint64_t BET3FLT__log_select_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  do
    int v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", (a2 + 2), 0, v3);
}

uint64_t BET3FLT__log_select_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t BET3FLT__log_select_GetLogLevel(uint64_t a1)
{
  unsigned int LogLevel = log_GetLogLevel(a1);
  if (LogLevel >= 3) {
    return LogLevel - 2;
  }
  else {
    return 0;
  }
}

float BET3FLT__bet3_finv(float a1)
{
  float v1 = 0.0;
  if (a1 < 1.0e19 && a1 > -1.0e19)
  {
    if (a1 > 1.0e-19 || a1 < 0.0)
    {
      if (a1 < -1.0e-19 || a1 >= 0.0) {
        return 1.0 / a1;
      }
      else {
        return -1.0e38;
      }
    }
    else
    {
      return 1.0e38;
    }
  }
  return v1;
}

void *BET3FLT__ddcalloc(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FLT__ddcalloc_64(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FLT__dd_free(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

void *BET3FLT__dd_free_64(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

void *BET3FLT__ffcalloc(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FLT__ff_free(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

void *BET3FLT__int32_ccalloc(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FLT__int32_free(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

void *BET3FLT__iicalloc(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FLT__ii_free(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

uint64_t BET3FLT__InitDWinSet(int a1, void *__b, uint64_t a3)
{
  cstdlib_memset(__b, 0, 0x190uLL);
  uint64_t v5 = *(unsigned int *)(a3 + 132);
  if ((int)v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = a3 + 4 * i;
      int v8 = *(_DWORD *)(v7 + 304);
      if (v8 >= 1)
      {
        int v9 = 0;
        uint64_t v10 = (int *)(v7 + 304);
        do
        {
          *((_DWORD *)__b + 10 * i) = v8 + 1;
          ++v9;
          int v8 = *v10;
        }
        while (v9 < *v10);
      }
    }
  }
  return 0;
}

void **BET3FLT__DeInitDWinSet(void **result, char *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    for (uint64_t i = 0; i != 400; i += 40)
    {
      uint64_t v5 = &a2[i];
      BET3FLT__ii_free(v3[1], *(uint64_t **)&a2[i + 8]);
      uint64_t v6 = *(uint64_t **)&a2[i + 16];
      if (v6)
      {
        if (!*v6 || (heap_Free(v3[1], *v6), **((void **)v5 + 2) = 0, (uint64_t v6 = (uint64_t *)*((void *)v5 + 2)) != 0))
        {
          heap_Free(v3[1], (uint64_t)v6);
          *((void *)v5 + 2) = 0;
        }
      }
    }
    return (void **)cstdlib_memset(a2, 0, 0x190uLL);
  }
  return result;
}

uint64_t BET3FLT__LoadDWinFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v5 = (unsigned int *)(a2 + 40 * a3);
  if (!*v5) {
    return 0;
  }
  uint64_t v9 = 2229280778;
  uint64_t v10 = BET3FLT__iicalloc(*(void **)(a1 + 8), *v5, 2);
  uint64_t v11 = a2 + 40 * a3;
  *(void *)(v11 + 8) = v10;
  float v12 = (int ***)(v11 + 8);
  if (v10)
  {
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), *v5, 8);
    uint64_t v14 = a2 + 40 * a3;
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = (uint64_t **)(v14 + 16);
    if (v13)
    {
      *(void *)**float v12 = 0;
      **uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, 4);
      uint64_t v16 = (_DWORD *)**v15;
      if (v16)
      {
        *uint64_t v16 = 1065353216;
        LODWORD(v17) = *v5;
        if ((int)*v5 <= 1)
        {
LABEL_9:
          uint64_t v27 = a2 + 40 * a3;
          *(_DWORD *)(v27 + 24) = 0;
          uint64_t v28 = (_DWORD *)(v27 + 24);
          v28[1] = 0;
          if ((int)v17 < 1)
          {
            int v30 = 0;
          }
          else
          {
            int v29 = 0;
            int v30 = 0;
            uint64_t v31 = *v12;
            uint64_t v17 = v17;
            do
            {
              float v32 = *v31;
              int v33 = **v31;
              if (v30 > v33)
              {
                *uint64_t v28 = v33;
                int v30 = v33;
              }
              int v34 = v32[1];
              if (v29 < v34)
              {
                v28[1] = v34;
                int v29 = v34;
              }
              ++v31;
              --v17;
            }
            while (v17);
            if (v30 < v29)
            {
              uint64_t v9 = 0;
              *(_DWORD *)(a2 + 40 * a3 + 32) = v29;
              return v9;
            }
          }
          uint64_t v9 = 0;
          *(_DWORD *)(a2 + 40 * a3 + 32) = v30;
          return v9;
        }
        uint64_t v18 = 1;
        uint64_t v19 = 1;
        while (1)
        {
          unsigned int v20 = BET3FLT__xfread2ptr_BET3(&(*v15)[v19], 4u, 0xFFFFFFFFLL, a4);
          if (!v20) {
            break;
          }
          (*v15)[v19] += 4 * (v20 >> 1);
          uint64_t v26 = (*v12)[v19];
          *uint64_t v26 = -(v20 >> 1);
          v26[1] = (v20 & 1) + (v20 >> 1) - 1;
          ++v18;
          uint64_t v17 = (int)*v5;
          ++v19;
          a4 += 6;
          if (v18 >= v17) {
            goto LABEL_9;
          }
        }
        BET3FLT__log_select_Error(a1, 55019, (uint64_t)"InitDWin: illegal data\n", v21, v22, v23, v24, v25);
        return 2229280772;
      }
    }
  }
  return v9;
}

void *BET3FLT__InitSMatrices(uint64_t a1, void *__b)
{
  float result = cstdlib_memset(__b, 0, 0x40uLL);
  *__b = a1;
  return result;
}

double BET3FLT__FreeSMatrices(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1)
    {
      int v2 = *(uint64_t **)(a1 + 24);
      if (v2)
      {
        if (!*(_DWORD *)(a1 + 8))
        {
          BET3FLT__dd_free(*(void **)(*(void *)a1 + 8), v2);
          BET3FLT__dd_free_64(*(void **)(*(void *)a1 + 8), *(uint64_t **)(a1 + 48));
          uint64_t v3 = *(void *)(a1 + 40);
          if (v3) {
            heap_Free(*(void **)(*(void *)a1 + 8), v3);
          }
        }
        *(_DWORD *)(a1 + 60) = 0;
        double result = 0.0;
        *(_OWORD *)(a1 + 44) = 0u;
        *(_OWORD *)(a1 + 28) = 0u;
        *(_OWORD *)(a1 + 12) = 0u;
      }
    }
  }
  return result;
}

uint64_t BET3FLT__InitPStreamSM(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (a2
    && *(void *)(a2 + 24)
    && *((_DWORD *)a1 + 3) == *(_DWORD *)(a2 + 12)
    && *((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 16)
    && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 20))
  {
    uint64_t result = 0;
    long long v6 = *(_OWORD *)(a2 + 48);
    long long v8 = *(_OWORD *)a2;
    long long v7 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a1 + 6) = v6;
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = v7;
LABEL_12:
    *((_DWORD *)a1 + 14) = 1;
    return result;
  }
  a1[6] = v4;
  uint64_t v9 = (long long *)(a1 + 6);
  int v10 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 14) = 0;
  *((_DWORD *)a1 + 15) = v10;
  uint64_t v11 = *(uint64_t *)((char *)a1 + 20);
  a1[8] = v11;
  float v12 = BET3FLT__ddcalloc(*(void **)(v4 + 8), 2 * (int)v11, v10);
  a1[9] = (uint64_t)v12;
  if (v12
    && (int v13 = *((_DWORD *)a1 + 6),
        uint64_t v14 = *((int *)a1 + 5),
        a1[10] = (uint64_t)&v12[v14],
        uint64_t v15 = BET3FLT__ddcalloc_64(*(void **)(v4 + 8), v14, v13),
        (a1[12] = (uint64_t)v15) != 0)
    && (uint64_t v16 = heap_Calloc(*(void **)(v4 + 8), (2 * *((_DWORD *)a1 + 5)), 4), (a1[11] = v16) != 0))
  {
    a1[13] = v16 + 4 * *((int *)a1 + 5);
    if (a2)
    {
      BET3FLT__FreeSMatrices(a2);
      uint64_t result = 0;
      long long v17 = *v9;
      long long v18 = *((_OWORD *)a1 + 4);
      long long v19 = *((_OWORD *)a1 + 6);
      *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 5);
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)a2 = v17;
      *(_OWORD *)(a2 + 16) = v18;
      goto LABEL_12;
    }
    return 0;
  }
  else
  {
    BET3FLT__FreeSMatrices((uint64_t)(a1 + 6));
    return 2229280778;
  }
}

double BET3FLT__FreePStreamSM(uint64_t a1)
{
  return BET3FLT__FreeSMatrices(a1 + 48);
}

uint64_t BET3FLT__InitPStreamParam(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  a1[6] = (2 * *(_DWORD *)(*((void *)a1 + 4) + 32)) | 1;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5)
    {
      if (a1[5] == *(_DWORD *)(a2 + 20) && a1[4] == *(_DWORD *)(a2 + 16))
      {
        *((void *)a1 + 5) = v5;
        long long v6 = a1 + 2;
LABEL_12:
        uint64_t result = 0;
        *long long v6 = 1;
        return result;
      }
    }
  }
  a1[2] = 0;
  long long v6 = a1 + 2;
  long long v7 = BET3FLT__int32_ccalloc(*(void **)(v4 + 8), a1[5], a1[4]);
  *((void *)a1 + 5) = v7;
  if (v7) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 2229280778;
  }
  if (a2 && v7)
  {
    BET3FLT__FreePStreamParam((void *)a2);
    memcpy((void *)a2, a1, 0x2D8uLL);
    goto LABEL_12;
  }
  return result;
}

void *BET3FLT__FreePStreamParam(void *result)
{
  if (*result)
  {
    float v1 = result;
    int v2 = (uint64_t *)result[5];
    if (v2)
    {
      if (!*((_DWORD *)result + 2)) {
        uint64_t result = BET3FLT__int32_free(*(void **)(*result + 8), v2);
      }
      v1[5] = 0;
      *((_DWORD *)v1 + 2) = 0;
    }
  }
  return result;
}

uint64_t select_float_bet3_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISelect_Bet3;
  return result;
}

uint64_t select_bet3_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 25957;
  }
  return result;
}

uint64_t select_bet3_ClassClose()
{
  return 0;
}

uint64_t select_bet3_ObjOpen(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  unsigned int v50 = 0;
  uint64_t v48 = 0;
  *(void *)uint64_t v49 = 0;
  uint64_t v5 = 2229280775;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v52 = 0u;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, v49);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else if ((safeh_HandleCheck(a1, a2, 25957, 416) & 0x80000000) != 0)
    {
      return 2229280776;
    }
    else
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      log_OutText(*(void *)(*(void *)v49 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjOpen", v12, v13, v14, v43);
      uint64_t v15 = (void *)heap_Calloc(*(void **)(*(void *)v49 + 8), 1, 6584);
      if (v15)
      {
        unsigned int v20 = v15;
        *uint64_t v15 = a3;
        v15[1] = a4;
        uint64_t v21 = *(void *)v49;
        v15[2] = *(void *)v49;
        v15[3] = a1;
        uint64_t Object = objc_GetObject(*(void *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v48);
        if ((Object & 0x80000000) != 0
          || (v20[4] = *(void *)(v48 + 8),
              uint64_t Object = objc_GetObject(*(void *)(*(void *)v49 + 48), (uint64_t)"LINGDB", &v48),
              (Object & 0x80000000) != 0))
        {
          uint64_t v5 = Object;
          log_OutPublic(*(void *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55001, 0, v23, v24, v25, v26, v44);
        }
        else
        {
          uint64_t v27 = *(void *)(v48 + 8);
          v20[5] = v27;
          uint64_t ObjOpen = BET3FLT__select_bet3_FeatureExtractObjOpen(a3, a4, v20[4], v27, v20 + 7);
          if ((ObjOpen & 0x80000000) != 0) {
            goto LABEL_27;
          }
          uint64_t ObjOpen = select_bet3_loc_CreateDataBrkString(*(uint64_t *)v49, __dst);
          if ((ObjOpen & 0x80000000) != 0) {
            goto LABEL_27;
          }
          uint64_t v29 = v20[3];
          if (!v29 || (uint64_t v30 = *(void *)(v29 + 48)) == 0) {
            uint64_t v30 = *(void *)(v20[2] + 48);
          }
          uint64_t ObjOpen = objc_GetAddRefCountedObject(v30, (uint64_t)__dst, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))select_bet3_loc_ObjcVoiceOpen, (void (*)(void, void, _OWORD *))select_bet3_loc_ObjcVoiceClose, *(uint64_t *)v49, &v48);
          if ((ObjOpen & 0x80000000) != 0
            || (uint64_t v31 = *(void *)v49,
                uint64_t v32 = *(void *)(v48 + 32),
                v20[6] = v32,
                uint64_t ObjOpen = select_bet3_loc_SetSynthParams(v31, v32),
                (ObjOpen & 0x80000000) != 0))
          {
LABEL_27:
            uint64_t v5 = ObjOpen;
          }
          else
          {
            uint64_t v33 = *(void *)(*(void *)v49 + 40);
            BOOL v46 = v20;
            long long v45 = xmmword_26D214968;
            long long v47 = xmmword_26D214968;
            uint64_t v34 = paramc_ListenerAdd(v33, "frequencyhz", &v46);
            if ((v34 & 0x80000000) == 0)
            {
              uint64_t v39 = 0;
              while (1)
              {
                float v40 = off_26456AD80[v39];
                if ((paramc_ParamGetInt(*(void *)(*(void *)v49 + 40), (uint64_t)v40, &v50) & 0x80000000) != 0)
                {
                  unsigned int v50 = dword_220774B50[v39];
                  uint64_t v34 = paramc_ParamSetInt(*(void *)(*(void *)v49 + 40), (uint64_t)v40, v50);
                  if ((v34 & 0x80000000) != 0) {
                    break;
                  }
                }
                uint64_t v34 = select_bet3_loc_ParamSet((uint64_t)v20, v40, v50);
                if ((v34 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v41 = *(void *)(*(void *)v49 + 40);
                BOOL v46 = v20;
                long long v47 = v45;
                uint64_t v5 = paramc_ListenerAdd(v41, v40, &v46);
                if ((v5 & 0x80000000) != 0) {
                  goto LABEL_32;
                }
                if (++v39 == 3)
                {
                  *(void *)a5 = v20;
                  *(_DWORD *)(a5 + 8) = 25958;
                  goto LABEL_29;
                }
              }
            }
            uint64_t v5 = v34;
LABEL_32:
            log_OutPublic(*(void *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55002, (uint64_t)"%s%s", v35, v36, v37, v38, "param");
          }
        }
        *(void *)a5 = v20;
        *(_DWORD *)(a5 + 8) = 25958;
        select_bet3_ObjClose(v20, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)v49 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v16, v17, v18, v19, v44);
        uint64_t v5 = 2229280778;
      }
LABEL_29:
      log_OutText(*(void *)(*(void *)v49 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjOpen: %x", v36, v37, v38, v5);
    }
  }
  return v5;
}

uint64_t select_bet3_ObjClose(void *a1, int a2)
{
  int v3 = safeh_HandleCheck((uint64_t)a1, a2, 25958, 6584);
  if (v3 < 0) {
    return 2229280776;
  }
  LODWORD(v7) = v3;
  uint64_t v8 = a1[2];
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjClose", v4, v5, v6, v30);
  uint64_t v9 = 0;
  long long v31 = xmmword_26D214968;
  do
  {
    int v10 = off_26456ADA0[v9];
    uint64_t v11 = *(void *)(v8 + 40);
    uint64_t v32 = a1;
    long long v33 = v31;
    int v12 = paramc_ListenerRemove(v11, v10, (long long *)&v32);
    if ((int)v7 > -1 && v12 < 0) {
      uint64_t v7 = v12;
    }
    else {
      uint64_t v7 = v7;
    }
    ++v9;
  }
  while (v9 != 4);
  uint64_t v14 = a1[6];
  if (v14)
  {
    uint64_t v15 = a1[3];
    if (!v15 || (uint64_t v16 = *(void *)(v15 + 48)) == 0) {
      uint64_t v16 = *(void *)(a1[2] + 48);
    }
    int v17 = objc_ReleaseObject(v16, v14);
    a1[6] = 0;
    if ((int)v7 > -1 && v17 < 0) {
      uint64_t v7 = v17;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  uint64_t v19 = a1[7];
  if (v19)
  {
    int ObjClose = BET3FLT__select_bet3_FeatureExtractObjClose(v19);
    if ((int)v7 > -1 && ObjClose < 0) {
      uint64_t v7 = ObjClose;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[5])
  {
    int v22 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"LINGDB");
    if ((int)v7 > -1 && v22 < 0) {
      uint64_t v7 = v22;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[4])
  {
    int v24 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v7 > -1 && v24 < 0) {
      uint64_t v7 = v24;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  heap_Free(*(void **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjClose: %x", v26, v27, v28, v7);
  return v7;
}

uint64_t select_bet3_ObjReopen(void *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v22 = 0u;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 25958, 6584) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v6 = a1[2];
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjReopen", v3, v4, v5, v19);
  uint64_t DataBrkString = select_bet3_loc_CreateDataBrkString(v6, __dst);
  if ((DataBrkString & 0x80000000) == 0)
  {
    uint64_t v11 = a1[3];
    if (!v11 || (uint64_t v12 = *(void *)(v11 + 48)) == 0) {
      uint64_t v12 = *(void *)(a1[2] + 48);
    }
    uint64_t DataBrkString = objc_GetAddRefCountedObject(v12, (uint64_t)__dst, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))select_bet3_loc_ObjcVoiceOpen, (void (*)(void, void, _OWORD *))select_bet3_loc_ObjcVoiceClose, v6, &v20);
    if ((DataBrkString & 0x80000000) == 0)
    {
      uint64_t v13 = a1[6];
      if (v13)
      {
        uint64_t v14 = a1[3];
        if (!v14 || (uint64_t v15 = *(void *)(v14 + 48)) == 0) {
          uint64_t v15 = *(void *)(a1[2] + 48);
        }
        objc_ReleaseObject(v15, v13);
      }
      uint64_t v16 = *(void *)(v20 + 32);
      a1[6] = v16;
      uint64_t DataBrkString = select_bet3_loc_SetSynthParams(v6, v16);
    }
  }
  uint64_t v17 = DataBrkString;
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjReopen: %x", v8, v9, v10, DataBrkString);
  return v17;
}

uint64_t select_bet3_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 25958, 6584) & 0x80000000) != 0) {
    return 2229280776;
  }
  synstrmaux_InitStreamOpener(a1 + 72, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sptchk;version=4.0",
    1,
    a1 + 928);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sgt;version=4.0", 1, a1 + 944);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-bet3-speech-frames;version=5.0",
    a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 912);
  uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 72), *(void *)(a1 + 32), a3, a4);
  if ((v8 & 0x80000000) != 0) {
    select_bet3_ProcessEnd(a1, a2);
  }
  *(_DWORD *)(a1 + 6576) = 0;
  return v8;
}

uint64_t select_bet3_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v60 = 0;
  if ((safeh_HandleCheck(a1, a2, 25958, 6584) & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  uint64_t v9 = (_DWORD *)(a1 + 6544);
  int v10 = *(_DWORD *)(a1 + 6544);
  if (*(void *)(a1 + 4616))
  {
    if (!v10)
    {
      uint64_t v11 = BET3FLT__ParamGenFrames((uint64_t *)(a1 + 4616), (int *)(*(void *)(a1 + 48) + 8112), (_DWORD *)(a1 + 6544));
      if ((v11 & 0x80000000) != 0)
      {
        uint64_t v25 = v11;
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 6552);
        if (!v12) {
          goto LABEL_65;
        }
        uint64_t v13 = *(unsigned int *)(a1 + 6564);
        unsigned int v14 = *(_DWORD *)(a1 + 6560);
        if (v14 <= v13) {
          goto LABEL_65;
        }
        uint64_t v15 = v12 + 32 * v13;
        int v16 = *(_DWORD *)(a1 + 5228);
        int v17 = *(_DWORD *)(a1 + 5232);
        if (v17 >= v16)
        {
          int v23 = 0;
          uint64_t v20 = (_DWORD *)(v12 + 32 * v13);
        }
        else
        {
          int v18 = 0;
          unsigned int v19 = *(_DWORD *)(a1 + 6576);
          uint64_t v20 = (_DWORD *)(v12 + 32 * v13);
          do
          {
            if (*v20 == 33)
            {
              unsigned int v21 = *(_DWORD *)(a1 + 6572);
              int v22 = *(_DWORD *)(*(void *)(a1 + 5216) + 528 * v17 + 24);
              v20[4] = v22;
              *(_DWORD *)(a1 + 6572) = v22 + v21;
              *(_DWORD *)(a1 + 5232) = ++v17;
            }
            else
            {
              if (*v20 == 8)
              {
                unsigned int v19 = v20[6] / *(_DWORD *)(*(void *)(a1 + 48) + 152);
                *(_DWORD *)(a1 + 6576) = v19;
              }
              unsigned int v21 = *(_DWORD *)(a1 + 6572);
              v20[4] = 0;
            }
            if (v19 > v21)
            {
              *(_DWORD *)(a1 + 6576) = v21;
              unsigned int v19 = v21;
            }
            v20[3] = v21 - v19;
            v20 += 8;
            int v23 = v18 + 1;
            if (v17 >= v16) {
              break;
            }
            unsigned int v24 = v13 + 1 + v18++;
          }
          while (v24 < v14);
        }
        if (*v9)
        {
          unsigned int v44 = v23 + v13;
          if (v23 + (int)v13 < v14)
          {
            int v45 = *(_DWORD *)(a1 + 6572);
            BOOL v46 = v20 + 4;
            do
            {
              *(v46 - 1) = v45;
              _DWORD *v46 = 0;
              v46 += 8;
              ++v44;
            }
            while (v44 < v14);
            int v23 = v14 - v13;
          }
        }
        if (!v23)
        {
LABEL_65:
          uint64_t v59 = a1 + 4616;
          uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 896), *(void *)(a1 + 904), &v59, 8);
          if ((v25 & 0x80000000) != 0)
          {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, (uint64_t)"%s%s%s%x", v52, v53, v54, v55, "contentType");
          }
          else if (*v9)
          {
            int ProcessEnd = BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
            if (ProcessEnd >= 0) {
              uint64_t v25 = v25;
            }
            else {
              uint64_t v25 = ProcessEnd;
            }
            uint64_t v57 = *(void *)(a1 + 6552);
            if (v57)
            {
              heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v57);
              *(void *)(a1 + 6552) = 0;
              *(void *)(a1 + 6560) = 0;
              *(_DWORD *)(a1 + 6568) = 0;
            }
            int v43 = 1;
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        uint64_t v47 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), v15, (32 * v23));
        if ((v47 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 6564) += v23;
          goto LABEL_65;
        }
        uint64_t v25 = v47;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, (uint64_t)"%s%s%s%x", v48, v49, v50, v51, "contentType");
        *(_DWORD *)(a1 + 6564) += v23;
      }
LABEL_74:
      int v43 = 2;
      goto LABEL_75;
    }
  }
  else if (!v10)
  {
    goto LABEL_22;
  }
  BET3FLT__DeInitVStream((void *)(a1 + 4616));
  *uint64_t v9 = 0;
LABEL_22:
  uint64_t v25 = BET3FLT__select_bet3_FeatureExtractProcessStart(*(uint64_t **)(a1 + 56), *(void *)(a1 + 48) + 9184, a3, a4, (void *)(a1 + 960), &v60);
  if ((v25 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55005, (uint64_t)"%s%x", v26, v27, v28, v29, "lhError");
  }
  else if (*(__int16 *)(a1 + 970) > 1)
  {
    *(_DWORD *)(a1 + 6564) = 0;
    uint64_t inited = BET3FLT__InitVStream(*(void *)(a1 + 16), (char *)(a1 + 4616), (_DWORD *)(*(void *)(a1 + 48) + 128));
    if ((inited & 0x80000000) != 0
      || (*(void *)(a1 + 4624) = a1 + 960,
          uint64_t inited = BET3FLT__LoadVStream((uint64_t *)(a1 + 4616), *(void *)(a1 + 48) + 8112, *(void *)(a1 + 48) + 128), (inited & 0x80000000) != 0)|| (uint64_t inited = BET3FLT__select_bet3_FeatureExtractProcess(*(uint64_t **)(a1 + 56), *(void *)(a1 + 48) + 128, a3, a4, *(void *)(a1 + 928), *(void *)(a1 + 936), *(void *)(a1 + 944), *(void *)(a1 + 952), (unsigned int *)(a1 + 64), a1 + 960, (uint64_t *)(a1 + 6552), (_DWORD *)(a1 + 6560)), (inited & 0x80000000) != 0))
    {
      uint64_t v25 = inited;
    }
    else
    {
      uint64_t v25 = BET3FLT__ParamGenStart(a1 + 4616, (int *)(*(void *)(a1 + 48) + 8112), (int *)(*(void *)(a1 + 48) + 128));
      if ((v25 & 0x80000000) == 0)
      {
        int v43 = 4;
LABEL_75:
        *a5 = v43;
        return v25;
      }
    }
    BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
    BET3FLT__DeInitVStream((void *)(a1 + 4616));
  }
  else
  {
    int v30 = v60;
    if (v60)
    {
      if (*(void *)(a1 + 912))
      {
        if (*(_DWORD *)(a1 + 4480))
        {
          LODWORD(v25) = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 104))();
          if ((v25 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, (uint64_t)"%s%s%s%x", v31, v32, v33, v34, "contentType");
          }
        }
      }
      int v35 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 72), *(void *)(a1 + 32));
      if (v35 < 0 && (int)v25 > -1) {
        LODWORD(v25) = v35;
      }
      int v30 = 1;
    }
    *a5 = v30;
    int v37 = BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
    if (v37 >= 0 || (int)v25 <= -1) {
      int v39 = v25;
    }
    else {
      int v39 = v37;
    }
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4);
    if (v39 > -1 && v40 < 0) {
      return v40;
    }
    else {
      return v39;
    }
  }
  return v25;
}

uint64_t select_bet3_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 25958, 6584) & 0x80000000) != 0) {
    return 2229280776;
  }
  BET3FLT__DeInitVStream((void *)(a1 + 4616));
  *(_DWORD *)(a1 + 6544) = 0;
  BET3FLT__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
  uint64_t v3 = *(void *)(a1 + 6552);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v3);
    *(void *)(a1 + 6552) = 0;
    *(void *)(a1 + 6560) = 0;
    *(_DWORD *)(a1 + 6568) = 0;
  }
  *(_DWORD *)(a1 + 6572) = 0;
  uint64_t v4 = *(void *)(a1 + 32);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 72), v4);
}

uint64_t select_bet3_loc_ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  __src = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(__dst, 0, sizeof(__dst));
  uint64_t inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  cstdlib_memcpy(__dst, __src, 0x1A0uLL);
  long long v46 = *(_OWORD *)(a5 + 32);
  uint64_t v71 = 0;
  *(void *)(a4 + 32) = 0;
  int v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "FLT3", 1031, (uint64_t *)&v71);
  if (v11 < 0) {
    return (v11 & 0x1FFFu) - 2065686528;
  }
  uint64_t v12 = (char *)heap_Calloc(*((void **)&__dst[0] + 1), 1, 37800);
  uint64_t v17 = (uint64_t)v12;
  if (v12)
  {
    cstdlib_strcpy(v12, a3);
    cstdlib_strcpy((char *)(v17 + 9336), a3);
    cstdlib_memset((void *)(v17 + 11328), 255, 0x100uLL);
    cstdlib_memset((void *)(v17 + 12232), 255, 0x11CuLL);
    cstdlib_memset((void *)(v17 + 12560), 255, 0x20uLL);
    *(_DWORD *)(v17 + 11708) = 1;
    BET3FLT__InitVParam((_DWORD *)(v17 + 128));
    cstdlib_memset((void *)(v17 + 7808), -1, 0x12CuLL);
    cstdlib_strcpy((char *)(v17 + 7792), "mlsa");
    cstdlib_memset(__b, 0, 0x50uLL);
    uint64_t v18 = select_bet3_ParseRiff((uint64_t)__dst, v17, (uint64_t)v71, 0, __b, 0, 0);
    if ((v18 & 0x80000000) != 0)
    {
      uint64_t VData = v18;
      cstdlib_strcpy(__s1, "");
      if (__b[0])
      {
        int v41 = 0;
        float v42 = __b;
        do
        {
          cstdlib_strcat(__s1, "/");
          cstdlib_strcat(__s1, v42);
          float v42 = &__b[5 * (unsigned __int16)++v41];
        }
        while (*v42);
      }
      log_OutPublic(v46, (uint64_t)"SELECT_BET3", 55003, (uint64_t)"%s%s%s%s%s%x", v37, v38, v39, v40, "file");
    }
    else if (*(unsigned char *)(v17 + 7519) && *(int *)(v17 + 260) > 0)
    {
      int v23 = *(uint64_t **)(v17 + 11648);
      if (v23)
      {
        uint64_t v24 = *v23;
        if (v24)
        {
          uint64_t v25 = 0;
          int v26 = 0;
          do
          {
            *(void *)(v17 + 8 * v25 + 5432) = v24;
            uint64_t v25 = (unsigned __int16)++v26;
            uint64_t v24 = *(void *)(*(void *)(v17 + 11648) + 8 * (unsigned __int16)v26);
          }
          while (v24);
        }
      }
      uint64_t v27 = BET3FLT__InitVData((int)__dst, (char *)(v17 + 8112), (_DWORD *)(v17 + 128));
      if ((v27 & 0x80000000) != 0)
      {
        uint64_t VData = v27;
      }
      else
      {
        uint64_t VData = BET3FLT__LoadVData((uint64_t)__dst, v17 + 8112, v17 + 128);
        if ((VData & 0x80000000) == 0)
        {
          *(_WORD *)(v17 + 12762) = 1;
          *(void *)&long long v36 = 0x100000001;
          *((void *)&v36 + 1) = 0x100000001;
          *(_OWORD *)(v17 + 12352) = v36;
          *(_OWORD *)(v17 + 12368) = v36;
          *(void *)(v17 + 12384) = 0x100000001;
          *(_DWORD *)(v17 + 12396) = 1;
          *(_OWORD *)(v17 + 12412) = v36;
          *(_OWORD *)(v17 + 12428) = v36;
          *(_OWORD *)(v17 + 12444) = v36;
          *(_OWORD *)(v17 + 12460) = v36;
          *(_OWORD *)(v17 + 12476) = v36;
          *(_DWORD *)(v17 + 12492) = 1;
          *(void *)(v17 + 12496) = 0x100000001;
          *(_DWORD *)(v17 + 11934) = 33620481;
          *(unsigned char *)(v17 + 11961) = 1;
          *(void *)(v17 + 11939) = 0x101010101010101;
          *(_DWORD *)(v17 + 11983) = -1;
          *(_WORD *)(v17 + 11987) = -255;
          *(void *)(v17 + 11997) = 0x101010101010101;
          *(void *)(v17 + 11947) = 0x101010101010101;
          *(void *)(v17 + 12002) = 0x101010101010101;
          *(void *)(v17 + 12105) = 0x101010101010101;
          *(void *)(v17 + 12113) = 0x101010101010101;
          *(void *)(v17 + 12121) = 0x101010101010101;
          if ((*(_DWORD *)(v17 + 12288) & 0x80000000) == 0) {
            *(_WORD *)(v17 + 11963) = 257;
          }
          if ((*(_DWORD *)(v17 + 12304) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11965) = 1;
          }
          if ((*(_DWORD *)(v17 + 12320) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11966) = 1;
          }
          if ((*(_DWORD *)(v17 + 12324) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11967) = 1;
          }
          if ((*(_DWORD *)(v17 + 12328) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11968) = 1;
          }
          if ((*(_DWORD *)(v17 + 12332) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11969) = 1;
          }
          if ((*(_DWORD *)(v17 + 12252) & 0x80000000) == 0) {
            *(_WORD *)(v17 + 11957) = 257;
          }
          if ((*(_DWORD *)(v17 + 12576) & 0x80000000) == 0 || (*(_DWORD *)(v17 + 12580) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11956) = 8;
          }
          if ((*(_DWORD *)(v17 + 12256) & 0x80000000) == 0) {
            *(_WORD *)(v17 + 11959) = 257;
          }
          if (*(_DWORD *)(v17 + 11744)) {
            *(unsigned char *)(v17 + 11978) = 9;
          }
          if ((*(_DWORD *)(v17 + 12352) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11997) = 1;
          }
          if ((*(_DWORD *)(v17 + 12356) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11998) = 1;
          }
          if ((*(_DWORD *)(v17 + 12360) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 11999) = 1;
          }
          *(_WORD *)(v17 + 12008) = 257;
          *(_DWORD *)(v17 + 12000) = 16843009;
          *(_DWORD *)(v17 + 12003) = 16843009;
        }
      }
    }
    else
    {
      uint64_t VData = 2229280772;
      log_OutPublic(v46, (uint64_t)"SELECT_BET3", 55006, (uint64_t)"%s%s", v19, v20, v21, v22, "file");
    }
  }
  else
  {
    log_OutPublic(v46, (uint64_t)"SELECT_BET3", 55000, 0, v13, v14, v15, v16, v44);
    uint64_t VData = 2229280778;
  }
  if (v71)
  {
    ssftriff_reader_ObjClose(v71, v28, v29, v30, v31, v32, v33, v34);
    uint64_t v71 = 0;
  }
  if ((VData & 0x80000000) != 0)
  {
    if ((VData & 0x7FF01FFF) == 0xA200014) {
      uint64_t VData = 2229280772;
    }
    else {
      uint64_t VData = VData;
    }
    select_bet3_loc_VoiceClose(__dst, v17);
  }
  else
  {
    *(void *)(a4 + 32) = v17;
  }
  return VData;
}

uint64_t select_bet3_loc_ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0) {
    select_bet3_loc_VoiceClose(v6, *(void *)(a3 + 32));
  }
  return inited;
}

uint64_t select_bet3_loc_ParamCheckChange(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  *a4 = 1;
  if (cstdlib_strcmp(__s1, "frequencyhz"))
  {
    if (!cstdlib_strcmp(__s1, "waitfactor") && (LH_atoi(a3) & 0x80000000) != 0)
    {
      uint64_t result = 2229280783;
LABEL_7:
      *a4 = 0;
      return result;
    }
  }
  else if (*(void *)(a1 + 896))
  {
    uint64_t result = 2229280785;
    goto LABEL_7;
  }
  return 0;
}

uint64_t select_bet3_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  if (!cstdlib_strcmp(__s1, "frequencyhz"))
  {
    if (*(void *)(a1 + 896)) {
      return 2229280785;
    }
    else {
      return 0;
    }
  }
  if (!cstdlib_strcmp(__s1, "rate") || !cstdlib_strcmp(__s1, "waitfactor"))
  {
    unsigned int v11 = 0;
    if (cstdlib_strcmp(__s1, "waitfactor")
      || (paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v11), v11 != 1))
    {
      uint64_t v7 = (uint64_t)LH_atoi(a3);
      uint64_t v8 = a1;
      uint64_t v9 = __s1;
      return select_bet3_loc_ParamSet(v8, v9, v7);
    }
    return 0;
  }
  if (cstdlib_strcmp(__s1, "finalsentencefound")) {
    return 0;
  }
  if ((unsigned __int16)LH_atou(a3) != 1)
  {
    unsigned int v10 = 0;
    paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", &v10);
    uint64_t v7 = v10;
    uint64_t v9 = "waitfactor";
    uint64_t v8 = a1;
    return select_bet3_loc_ParamSet(v8, v9, v7);
  }
  paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", *(_DWORD *)(a1 + 64));

  return select_bet3_loc_ParamSet(a1, "waitfactor", 0);
}

uint64_t select_bet3_loc_CreateDataBrkString(uint64_t a1, char *__dst)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v10 = 0;
  __s2 = 0;
  cstdlib_strcpy(__dst, "select");
  int Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &__s2);
  if (Str < 0) {
    return Str & 0x1FFF | 0x84E02000;
  }
  cstdlib_strcat(__dst, "/");
  cstdlib_strcat(__dst, __s2);
  int Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voicemodel", &__s2);
  if (Str < 0) {
    return Str & 0x1FFF | 0x84E02000;
  }
  cstdlib_strcat(__dst, "/");
  cstdlib_strcat(__dst, __s2);
  int Str = paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"frequencyhz", &v10);
  if (Str < 0) {
    return Str & 0x1FFF | 0x84E02000;
  }
  cstdlib_strcat(__dst, "f");
  unsigned int v5 = v10 / 1000;
  size_t v6 = cstdlib_strlen(__dst);
  LH_itoa(v5, &__dst[v6], 0xAu);
  uint64_t v7 = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"datapackagename", &__s2);
  if ((v7 & 0x80000000) == 0)
  {
    if (__s2)
    {
      if (*__s2)
      {
        uint64_t v7 = brokeraux_ComposeBrokerString(a1, __dst, 0, 0, 0, 0, 0, __src, 0x80uLL);
        if ((v7 & 0x80000000) == 0) {
          cstdlib_strcpy(__dst, __src);
        }
      }
    }
  }
  return v7;
}

uint64_t select_bet3_loc_SetSynthParams(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2 + 7808;
  uint64_t v4 = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"synth_type", (char *)(a2 + 7792));
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v10 = v4;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%s%s%x", v5, v6, v7, v8, "parameter");
  }
  else
  {
    uint64_t v9 = paramc_ParamSetPermanent(*(void *)(a1 + 40), (uint64_t)"mrcc_synthparam_ref_ptr", &v12, 8uLL);
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicealpha", *(float *)(a2 + 128));
      if ((v9 & 0x80000000) == 0)
      {
        uint64_t v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicebeta", *(float *)(a2 + 132));
        if ((v9 & 0x80000000) == 0)
        {
          uint64_t v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicevol", *(float *)(a2 + 164));
          if ((v9 & 0x80000000) == 0)
          {
            uint64_t v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicevuvrelamp", *(float *)(a2 + 140));
            if ((v9 & 0x80000000) == 0)
            {
              uint64_t v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicemvfboost", *(float *)(a2 + 168));
              if ((v9 & 0x80000000) == 0)
              {
                uint64_t v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicef0std", *(float *)(a2 + 176));
                if ((v9 & 0x80000000) == 0)
                {
                  uint64_t v9 = select_bet3_loc_SetSynthParamFloat(a1, (uint64_t)"bet2voicef0mean", *(float *)(a2 + 180));
                  if ((v9 & 0x80000000) == 0)
                  {
                    uint64_t v9 = select_bet3_loc_SetSynthParamInt(a1, (uint64_t)"bet2voiceframesize", *(_DWORD *)(a2 + 152));
                    if ((v9 & 0x80000000) == 0)
                    {
                      uint64_t v9 = select_bet3_loc_SetSynthParamInt(a1, (uint64_t)"bet2voiceorder", *(_DWORD *)(a2 + 144));
                      if ((v9 & 0x80000000) == 0)
                      {
                        uint64_t v9 = select_bet3_loc_SetSynthParamArrayOfBet3_int32(a1, *(void **)(a2 + 7784), *(_DWORD *)(a2 + 144) + 1);
                        if ((v9 & 0x80000000) == 0) {
                          return select_bet3_loc_SetSynthParamInt(a1, (uint64_t)"voicepitchavghz", *(_DWORD *)(a2 + 184));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return v9;
  }
  return v10;
}

uint64_t select_bet3_loc_ParamSet(uint64_t a1, char *__s1, uint64_t a3)
{
  if (cstdlib_strcmp(__s1, "waitfactor")) {
    return 0;
  }
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 64) = a3;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Set wait factor %d", v5, v6, v7, a3);
    return 0;
  }
  return 2229280783;
}

uint64_t select_bet3_ParseRiff(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, int a7)
{
  uint64_t StringZ = 0;
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v13 = (_WORD *)(a2 + 37792);
  int v124 = (unsigned __int8 *)(a2 + 11680);
  int v134 = 0;
  char v133 = 0;
  *(_DWORD *)__src = 0;
  __dst = (char *)&a5[5 * a4];
  unsigned int v116 = (char *)(a2 + 7792);
  int v118 = (void *)(a2 + 7484);
  int v120 = (void *)(a2 + 11684);
  int v122 = (void *)(a2 + 7784);
  __s1 = (char *)(a5 + 5);
  char v108 = (uint64_t *)(a2 + 11656);
  char v109 = (uint64_t *)(a2 + 11648);
  int v112 = (uint64_t *)(a2 + 12520);
  uint64_t v111 = (uint64_t *)(a2 + 12528);
  int v110 = (uint64_t *)(a2 + 12536);
  unsigned int v113 = (unsigned char *)(a2 + 11584);
  unsigned int v114 = (unsigned char *)(a2 + 10557);
  int v115 = (unsigned char *)(a2 + 10814);
  unsigned int v117 = (unsigned char *)(a2 + 10300);
  int v119 = (unsigned char *)(a2 + 10043);
  __s = (char *)(a2 + 9786);
  while ((StringZ & 0x80000000) == 0)
  {
    uint64_t v14 = ssftriff_reader_OpenChunk(a3, (__int32 *)__src, (unsigned int *)&v134, 0);
    LODWORD(v15) = v14;
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t StringZ = v14;
      break;
    }
    cstdlib_strcpy(__dst, __src);
    if (a4 == 1)
    {
      if (cstdlib_strcmp(a5, "FEEX"))
      {
        if (cstdlib_strcmp(a5, "STM3"))
        {
          if (cstdlib_strcmp(__src, "SYNC")) {
            goto LABEL_366;
          }
          *(_DWORD *)int v136 = 0;
          *(void *)__s2 = 0;
          if (a6)
          {
            uint64_t v20 = a6 + ssftriff_reader_GetPosition(a3) - a7;
            *(void *)__s2 = v20;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v134, __s2);
            if ((ChunkData & 0x80000000) != 0) {
              goto LABEL_343;
            }
            uint64_t v20 = *(void *)__s2;
          }
          LOBYTE(v135[0]) = 0;
          *(_DWORD *)int v136 = 256;
          uint64_t StringZ = ssftriff_reader_ReadStringZ(a3, v20, v134, 0, v135, (unsigned int *)v136);
          if ((StringZ & 0x80000000) != 0)
          {
LABEL_249:
            int v44 = 3;
            goto LABEL_382;
          }
          if (!cstdlib_strcmp((const char *)v135, "SYNTH_TYPE"))
          {
            unsigned int v43 = *(_DWORD *)v136;
            *(_DWORD *)int v136 = 256;
            uint64_t StringZ = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v134, v43, v135, (unsigned int *)v136);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_249;
            }
            cstdlib_strcpy(v116, (const char *)v135);
          }
          LODWORD(v15) = StringZ;
        }
        else
        {
          *(_DWORD *)int v136 = 0;
          uint64_t v22 = *(int *)(a2 + 260);
          if (!cstdlib_strcmp(__src, "STC3"))
          {
            LODWORD(v130) = 0;
            *(void *)__s2 = 0;
            if (a6)
            {
              int v106 = a7;
              uint64_t v41 = a6 + ssftriff_reader_GetPosition(a3) - a7;
              *(void *)__s2 = v41;
            }
            else
            {
              uint64_t v15 = ssftriff_reader_GetChunkData(a3, v134, __s2);
              if ((v15 & 0x80000000) != 0)
              {
LABEL_306:
                int v44 = 1;
                uint64_t StringZ = v15;
                goto LABEL_326;
              }
              int v106 = a7;
              uint64_t v41 = *(void *)__s2;
            }
            long long v60 = (int *)(a2 + 4 * v22);
            cstdlib_memcpy(v60 + 88, (const void *)(v41 + *(unsigned int *)v136), 4uLL);
            *(_DWORD *)v136 += 4;
            uint64_t v107 = v60 + 98;
            cstdlib_memcpy(v60 + 98, (const void *)(*(void *)__s2 + *(unsigned int *)v136), 4uLL);
            int v61 = *(_DWORD *)v136;
            *(_DWORD *)v136 += 4;
            uint64_t v62 = *(void *)__s2;
            v60[568] = *(unsigned char *)(*(void *)__s2 + *(unsigned int *)v136) != 0;
            uint64_t v63 = (v61 + 5);
            *(_DWORD *)int v136 = v63;
            cstdlib_memcpy(v60 + 558, (const void *)(v62 + v63), 4uLL);
            unsigned int v64 = *(_DWORD *)v136 + 4;
            *(_DWORD *)v136 += 4;
            uint64_t v65 = v60[98];
            if ((int)v65 < 1) {
              goto LABEL_296;
            }
            uint64_t v66 = heap_Calloc(*(void **)(a1 + 8), v65, 8);
            uint64_t v67 = a2 + 8 * v22;
            *(void *)(v67 + 2472) = v66;
            if (!v66) {
              LODWORD(v15) = -2065686518;
            }
            if ((v15 & 0x80000000) == 0)
            {
              uint64_t v68 = heap_Calloc(*(void **)(a1 + 8), *v107, 8);
              *(void *)(v67 + 2312) = v68;
              LODWORD(v15) = -2065686518;
              if (v68)
              {
                unsigned int v64 = *(_DWORD *)v136;
LABEL_296:
                LOBYTE(v135[0]) = 0;
                LODWORD(v130) = 256;
                LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v134, v64, v135, (unsigned int *)&v130);
                if ((v15 & 0x80000000) == 0)
                {
                  long long v69 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)v135);
                  uint64_t v70 = (void *)(a2 + 8 * v22);
                  v70[34] = v69;
                  if (!v69)
                  {
                    int v44 = 3;
                    uint64_t StringZ = 2229280778;
                    goto LABEL_382;
                  }
                  *(_DWORD *)v136 += v130;
                  if (*v107 >= 1)
                  {
                    uint64_t v71 = 0;
                    uint64_t v72 = v70 + 309;
                    uint64_t v73 = v70 + 289;
                    while (1)
                    {
                      LOBYTE(v135[0]) = 0;
                      LODWORD(v130) = 256;
                      int v74 = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v134, *(unsigned int *)v136, v135, (unsigned int *)&v130);
                      if (v74 < 0) {
                        break;
                      }
                      *(void *)(*v72 + 8 * v71) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)v135);
                      if (!*(void *)(*v72 + 8 * v71)) {
                        goto LABEL_376;
                      }
                      *(_DWORD *)v136 += v130;
                      LOBYTE(v135[0]) = 0;
                      LODWORD(v130) = 256;
                      LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v134, *(unsigned int *)v136, v135, (unsigned int *)&v130);
                      if ((v15 & 0x80000000) != 0) {
                        goto LABEL_379;
                      }
                      *(void *)(*v73 + 8 * v71) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)v135);
                      if (!*(void *)(*v73 + 8 * v71))
                      {
LABEL_376:
                        LODWORD(v15) = -2065686518;
                        goto LABEL_379;
                      }
                      *(_DWORD *)v136 += v130;
                      if (++v71 >= *v107) {
                        goto LABEL_379;
                      }
                    }
                    LODWORD(v15) = v74;
                  }
                }
              }
            }
LABEL_379:
            a7 = v106;
            goto LABEL_369;
          }
          if (cstdlib_strcmp(__src, "TRE3"))
          {
            if (cstdlib_strcmp(__src, "PDF3"))
            {
              if (cstdlib_strcmp(__src, "WIN3"))
              {
                if (cstdlib_strcmp(__src, "CBK3")) {
                  goto LABEL_366;
                }
                uint64_t v45 = a2 + 24 * (int)v22 + 5192;
              }
              else
              {
                uint64_t v79 = a2 + 128 + 4 * v22;
                int v80 = *(_DWORD *)(v79 + 304);
                uint64_t v45 = a2 + 128 + 120 * (int)v22 + 24 * v80 + 3864;
                *(_DWORD *)(v79 + 304) = v80 + 1;
              }
            }
            else
            {
              *(void *)__s2 = 0;
              if (a6)
              {
                uint64_t v57 = a6 + ssftriff_reader_GetPosition(a3) - a7;
                *(void *)__s2 = v57;
              }
              else
              {
                uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v134, __s2);
                if ((ChunkData & 0x80000000) != 0)
                {
LABEL_343:
                  uint64_t StringZ = ChunkData;
                  int v44 = 1;
                  unsigned int v121 = ChunkData;
                  goto LABEL_382;
                }
                uint64_t v57 = *(void *)__s2;
              }
              *(_DWORD *)int v136 = 256;
              LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, v57, v134, 0, v135, (unsigned int *)v136);
              if ((v15 & 0x80000000) != 0)
              {
                uint64_t v45 = 0;
              }
              else
              {
                uint64_t v91 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), (char *)v135);
                uint64_t v92 = a2 + 128 + 4 * v22;
                uint64_t v93 = *(int *)(v92 + 344);
                *(void *)(a2 + 128 + 40 * (int)v22 + 8 * v93 + 1304) = v91;
                if ((v136[0] & 3) != 0) {
                  *(_DWORD *)v136 -= *(_DWORD *)v136 | 0xFFFFFFFC;
                }
                uint64_t v45 = a2 + 120 * (int)v22 + 24 * (int)v93 + 2792;
                *(_DWORD *)(v92 + 344) = v93 + 1;
              }
            }
          }
          else
          {
            uint64_t v45 = a2 + 24 * (int)v22 + 2552;
          }
          if ((v15 & 0x80000000) == 0 && v45)
          {
            v135[0] = 0;
            if (a6)
            {
              uint64_t v94 = (char *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
            }
            else
            {
              uint64_t v95 = ssftriff_reader_GetChunkData(a3, v134, v135);
              LODWORD(v15) = v95;
              if ((v95 & 0x80000000) != 0)
              {
                int v44 = 1;
                unsigned int v121 = v95;
                uint64_t StringZ = v95;
                goto LABEL_382;
              }
              uint64_t v94 = (char *)v135[0];
            }
            int v96 = *(_DWORD *)v136;
            *(void *)(v45 + 8) = &v94[*(unsigned int *)v136];
            *(_DWORD *)(v45 + 16) = v134 - v96;
          }
        }
      }
      else
      {
        if (!cstdlib_strcmp(__src, "VCAT"))
        {
          v135[0] = 0;
          if (a6)
          {
            v135[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
          }
          else
          {
            uint64_t v51 = ssftriff_reader_GetChunkData(a3, v134, v135);
            if ((v51 & 0x80000000) != 0) {
              return v51;
            }
          }
          uint64_t v16 = a1;
          uint64_t v17 = a2;
          uint64_t v18 = a3;
          uint64_t v19 = 2;
LABEL_266:
          int v40 = select_bet3_ParseRiff(v16, v17, v18, v19, a5, 0, 0);
LABEL_267:
          LODWORD(v15) = v40;
          goto LABEL_369;
        }
        if (!cstdlib_strcmp(__src, "VBOP"))
        {
          v135[0] = 0;
          if (a6)
          {
            uint64_t v21 = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
            v135[0] = v21;
          }
          else
          {
            uint64_t v15 = ssftriff_reader_GetChunkData(a3, v134, v135);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            uint64_t v21 = v135[0];
          }
          if (v134 >= 0xF8) {
            size_t v58 = 248;
          }
          else {
            size_t v58 = v134;
          }
          long long v59 = v120;
LABEL_287:
          cstdlib_memcpy(v59, v21, v58);
          goto LABEL_369;
        }
        if (cstdlib_strcmp(__src, "PRE3"))
        {
          if (cstdlib_strcmp(__src, "TRA3"))
          {
            if (cstdlib_strcmp(__src, "PHM3")) {
              goto LABEL_366;
            }
            v135[0] = 0;
            if (a6)
            {
              uint64_t v21 = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
              v135[0] = v21;
            }
            else
            {
              uint64_t v15 = ssftriff_reader_GetChunkData(a3, v134, v135);
              if ((v15 & 0x80000000) != 0) {
                return v15;
              }
              uint64_t v21 = v135[0];
            }
            if (v134 >= 0x100) {
              size_t v58 = 256;
            }
            else {
              size_t v58 = v134;
            }
            long long v59 = v118;
            goto LABEL_287;
          }
          *(_WORD *)__s2 = 0;
          v135[0] = 0;
          if (a6)
          {
            v135[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
          }
          else
          {
            uint64_t v15 = ssftriff_reader_GetChunkData(a3, v134, v135);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
          }
          if (v134 >= 2)
          {
            unsigned __int16 v87 = 0;
            do
            {
              cstdlib_memcpy(__s2, (char *)v135[0] + 2 * v87, 2uLL);
              if (*(unsigned __int16 *)__s2 < 8u) {
                *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)__s2 + 12560) = 1;
              }
              else {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v88, v89, v90, *(unsigned __int16 *)__s2);
              }
              ++v87;
            }
            while (v134 >> 1 > v87);
          }
        }
        else
        {
          *(_WORD *)__s2 = 0;
          v135[0] = 0;
          if (a6)
          {
            v135[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
          }
          else
          {
            uint64_t v15 = ssftriff_reader_GetChunkData(a3, v134, v135);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
          }
          if (v134 >= 2)
          {
            unsigned __int16 v81 = 0;
            do
            {
              cstdlib_memcpy(__s2, (char *)v135[0] + 2 * v81, 2uLL);
              if (*(unsigned __int16 *)__s2 < 0x47u) {
                *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)__s2 + 12232) = 1;
              }
              else {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v82, v83, v84, *(unsigned __int16 *)__s2);
              }
              ++v81;
            }
            while (v134 >> 1 > v81);
          }
        }
      }
    }
    else if (a4)
    {
      if (cstdlib_strcmp(a5, "FEEX") || cstdlib_strcmp(__s1, "VCAT"))
      {
LABEL_366:
        cstdlib_strcpy((char *)v135, "");
        int v98 = 0;
        do
        {
          cstdlib_strcat((char *)v135, "/");
          cstdlib_strcat((char *)v135, &a5[5 * (unsigned __int16)v98++]);
        }
        while (a4 >= (unsigned __int16)v98);
        log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown data: %s for %s", v99, v100, v101, (uint64_t)v135);
        goto LABEL_369;
      }
      v135[0] = 0;
      if (a6)
      {
        v135[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
      }
      else
      {
        uint64_t v15 = ssftriff_reader_GetChunkData(a3, v134, v135);
        if ((v15 & 0x80000000) != 0) {
          return v15;
        }
      }
      if (cstdlib_strcmp(__src, "ALPH"))
      {
        if (cstdlib_strcmp(__src, "VOIC"))
        {
          if (cstdlib_strcmp(__src, "COVO"))
          {
            if (cstdlib_strcmp(__src, "SAFE"))
            {
              if (cstdlib_strcmp(__src, "PLOS"))
              {
                if (cstdlib_strcmp(__src, "DIFF"))
                {
                  if (cstdlib_strcmp(__src, "GENF"))
                  {
                    if (cstdlib_strcmp(__src, "TAGA"))
                    {
                      if (cstdlib_strcmp(__src, "BTOA")) {
                        goto LABEL_366;
                      }
                      long long v46 = v135[0];
                      int v47 = v134;
                      uint64_t v48 = a1;
                      uint64_t v49 = a3;
                      long long v50 = v108;
                    }
                    else
                    {
                      long long v46 = v135[0];
                      int v47 = v134;
                      uint64_t v48 = a1;
                      uint64_t v49 = a3;
                      long long v50 = v109;
                    }
                    int RiffStringTable = uselect_LoadRiffStringTable(v48, v49, v46, v47, v50);
                  }
                  else
                  {
                    int RiffStringTable = select_bet3_LoadRiffGenericFeatureMap(a1, a3, (unsigned __int16 *)v135[0], v134, v112, v111, v110);
                  }
                  goto LABEL_364;
                }
                *(_DWORD *)__s2 = 64;
                uint64_t v75 = v135[0];
                unsigned int v76 = v134;
                uint64_t v77 = a3;
                uint64_t v78 = v113;
              }
              else
              {
                *(_DWORD *)__s2 = 257;
                uint64_t v75 = v135[0];
                unsigned int v76 = v134;
                uint64_t v77 = a3;
                uint64_t v78 = v114;
              }
            }
            else
            {
              *(_DWORD *)__s2 = 257;
              uint64_t v75 = v135[0];
              unsigned int v76 = v134;
              uint64_t v77 = a3;
              uint64_t v78 = v115;
            }
          }
          else
          {
            *(_DWORD *)__s2 = 257;
            uint64_t v75 = v135[0];
            unsigned int v76 = v134;
            uint64_t v77 = a3;
            uint64_t v78 = v117;
          }
        }
        else
        {
          *(_DWORD *)__s2 = 257;
          uint64_t v75 = v135[0];
          unsigned int v76 = v134;
          uint64_t v77 = a3;
          uint64_t v78 = v119;
        }
        int RiffStringTable = ssftriff_reader_ReadStringZ(v77, (uint64_t)v75, v76, 0, v78, (unsigned int *)__s2);
LABEL_364:
        LODWORD(v15) = RiffStringTable;
        goto LABEL_369;
      }
      *(_DWORD *)__s2 = 257;
      LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, (uint64_t)v135[0], v134, 0, __s, (unsigned int *)__s2);
      if ((v15 & 0x80000000) == 0)
      {
        *(_WORD *)int v124 = 255;
        if (cstdlib_strlen(__s))
        {
          size_t v52 = 0;
          int v53 = 0;
          do
          {
            long long v54 = (unsigned __int8 *)(a2 + v52 + 9786);
            unsigned int v55 = *v54;
            if (v55 < *v124)
            {
              *int v124 = v55;
              unsigned int v55 = *v54;
            }
            if (v55 > v124[1])
            {
              v124[1] = v55;
              unsigned int v55 = *v54;
            }
            *(unsigned char *)(a2 + v55 + 11328) = v53;
            size_t v52 = (v53 + 1);
            size_t v56 = cstdlib_strlen(__s);
            int v53 = v52;
          }
          while (v56 > v52);
        }
      }
    }
    else if (cstdlib_strcmp(__src, "VCFG"))
    {
      if (cstdlib_strcmp(__src, "EQUA"))
      {
        if (cstdlib_strcmp(__src, "FEEX"))
        {
          if (!cstdlib_strcmp(__src, "STM3"))
          {
            uint64_t Position = ssftriff_reader_GetPosition(a3);
            v135[0] = 0;
            int v40 = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * (unsigned __int16)*v13 + 37584), v135);
            if ((v40 & 0x80000000) == 0)
            {
              ++*v13;
              LODWORD(v15) = select_bet3_ParseRiff(a1, a2, a3, 1, a5, v135[0], Position);
              ++*(_DWORD *)(a2 + 260);
              goto LABEL_369;
            }
            goto LABEL_267;
          }
          if (cstdlib_strcmp(__src, "SYNT")) {
            goto LABEL_366;
          }
        }
        uint64_t v16 = a1;
        uint64_t v17 = a2;
        uint64_t v18 = a3;
        uint64_t v19 = 1;
        goto LABEL_266;
      }
      LODWORD(v15) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * (unsigned __int16)*v13 + 37584), v122);
      if ((v15 & 0x80000000) == 0) {
        ++*v13;
      }
    }
    else
    {
      unsigned int v131 = 0;
      *(void *)uint64_t v129 = 0;
      uint64_t v130 = 0;
      if (a6)
      {
        *(void *)uint64_t v129 = a6 + ssftriff_reader_GetPosition(a3) - a7;
      }
      else
      {
        uint64_t v15 = ssftriff_reader_GetChunkData(a3, v134, v129);
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_306;
        }
      }
      int v23 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), "PHRASE");
      *(void *)(a2 + 208) = v23;
      if (!v23) {
        goto LABEL_325;
      }
      *(_DWORD *)(a2 + 216) = 1000;
      unsigned int v24 = v134;
      if (v134)
      {
        unsigned int v25 = 0;
        do
        {
          LOBYTE(v135[0]) = 0;
          __s2[0] = 0;
          unsigned int v131 = 64;
          LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v129, v24, v25, __s2, &v131);
          if ((v15 & 0x80000000) == 0 && v25 < v134)
          {
            v25 += v131;
            unsigned int v131 = 256;
            LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v129, v134, v25, v135, &v131);
          }
          if ((v15 & 0x80000000) != 0) {
            break;
          }
          unsigned int v26 = v131;
          cstdlib_strcpy(v136, "bet3voiceoverride.");
          cstdlib_strcat(v136, __s2);
          if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v136, &v130) & 0x80000000) != 0 || !v130 || !*v130) {
            uint64_t v130 = (char *)v135;
          }
          if (!cstdlib_strcmp(__s2, "ALPHA"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v27 = v27;
            *(_DWORD *)(a2 + 128) = LODWORD(v27);
          }
          if (!cstdlib_strcmp(__s2, "BETA"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v28 = v28;
            *(_DWORD *)(a2 + 132) = LODWORD(v28);
          }
          if (!cstdlib_strcmp(__s2, "VUV_REL_AMP"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v29 = v29;
            *(_DWORD *)(a2 + 140) = LODWORD(v29);
          }
          if (!cstdlib_strcmp(__s2, "RHO"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v30 = v30;
            *(_DWORD *)(a2 + 160) = LODWORD(v30);
          }
          if (!cstdlib_strcmp(__s2, "VOL"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v31 = v31;
            *(_DWORD *)(a2 + 164) = LODWORD(v31);
          }
          if (!cstdlib_strcmp(__s2, "MVF_BOOST"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v32 = v32;
            *(_DWORD *)(a2 + 168) = LODWORD(v32);
          }
          if (!cstdlib_strcmp(__s2, "F0_RHO"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v33 = v33;
            *(_DWORD *)(a2 + 172) = LODWORD(v33);
          }
          if (!cstdlib_strcmp(__s2, "F0_STD"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v34 = v34;
            *(_DWORD *)(a2 + 176) = LODWORD(v34);
          }
          if (!cstdlib_strcmp(__s2, "F0_MEAN"))
          {
            cstdlib_atof((unsigned __int8 *)v130);
            *(float *)&double v35 = v35;
            *(_DWORD *)(a2 + 180) = LODWORD(v35);
          }
          if (!cstdlib_strcmp(__s2, "FS")) {
            *(_DWORD *)(a2 + 136) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "ORDER")) {
            *(_DWORD *)(a2 + 144) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE")) {
            *(_DWORD *)(a2 + 152) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SPEECH_F0_MEAN")) {
            *(_DWORD *)(a2 + 184) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "PDF_VARIANCE_TYPE")) {
            *(_DWORD *)(a2 + 200) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "BREAKER"))
          {
            uint64_t v36 = *(void *)(a2 + 208);
            uint64_t v37 = a1;
            if (v36)
            {
              heap_Free(*(void **)(a1 + 8), v36);
              uint64_t v37 = a1;
            }
            uint64_t v38 = BET3FLT__heap_StrDup(*(void **)(v37 + 8), v130);
            *(void *)(a2 + 208) = v38;
            if (!v38)
            {
              LODWORD(v15) = -2065686518;
              break;
            }
          }
          if (!cstdlib_strcmp(__s2, "BRK_LENGTH")) {
            *(_DWORD *)(a2 + 216) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "BRK_TC")) {
            *(_DWORD *)(a2 + 220) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "BRK_ZPAD")) {
            *(_DWORD *)(a2 + 224) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "ALGN_ST")) {
            *(_DWORD *)(a2 + 240) = LH_atoi(v130) != 0;
          }
          if (!cstdlib_strcmp(__s2, "ALGN_PH")) {
            *(_DWORD *)(a2 + 244) = LH_atoi(v130) != 0;
          }
          if (!cstdlib_strcmp(__s2, "VSYNTH")) {
            *(void *)(a2 + 7776) = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v130);
          }
          if (!cstdlib_strcmp(__s2, "FFTSZ")) {
            *(_DWORD *)(a2 + 7808) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "EN_MEAN")) {
            *(_DWORD *)(a2 + 7812) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "FEED_EN_MEAN_LOOKAHEAD")) {
            *(_DWORD *)(a2 + 7820) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "COUNT_UV_DISTANCE")) {
            *(_DWORD *)(a2 + 7816) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SAMPLE_RATE")) {
            *(_DWORD *)(a2 + 7824) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENERGY")) {
            *(_DWORD *)(a2 + 7828) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_SIZE")) {
            *(_DWORD *)(a2 + 7832) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SPCPAR_FREQWARP")) {
            *(_DWORD *)(a2 + 7836) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENHANCE_ALPHA")) {
            *(_DWORD *)(a2 + 7840) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENHANCE_ALPHA_UNVOICED")) {
            *(_DWORD *)(a2 + 7844) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE_MRCC")) {
            *(_DWORD *)(a2 + 7848) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_PHS_EXTRAP_USE")) {
            *(_DWORD *)(a2 + 7852) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_NOISE_FREQ_TH")) {
            *(_DWORD *)(a2 + 7856) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_USE")) {
            *(_DWORD *)(a2 + 7860) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_MVF_USE")) {
            *(_DWORD *)(a2 + 7864) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_LO")) {
            *(_DWORD *)(a2 + 7868) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_HI")) {
            *(_DWORD *)(a2 + 7872) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_UNIFORM")) {
            *(_DWORD *)(a2 + 7876) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_USE")) {
            *(_DWORD *)(a2 + 7880) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_MVF_USE")) {
            *(_DWORD *)(a2 + 7884) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_MIXHARM_LO")) {
            *(_DWORD *)(a2 + 7888) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_MIXHARM_HI")) {
            *(_DWORD *)(a2 + 7892) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_RES_LO")) {
            *(_DWORD *)(a2 + 7896) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_RES_HI")) {
            *(_DWORD *)(a2 + 7900) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_ALIGN_CUTOFF_FREQ")) {
            *(_DWORD *)(a2 + 7904) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF")) {
            *(_DWORD *)(a2 + 7908) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ATTENUATE_UV")) {
            *(_DWORD *)(a2 + 7912) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_SKIP_WEAK_HARM_RATIO")) {
            *(_DWORD *)(a2 + 7916) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN")) {
            *(_DWORD *)(a2 + 7940) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_THR")) {
            *(_DWORD *)(a2 + 7944) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_RATIO_EN_THR")) {
            *(_DWORD *)(a2 + 7948) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_MVF_THR")) {
            *(_DWORD *)(a2 + 7952) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_BY_LOW_EN")) {
            *(_DWORD *)(a2 + 7956) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_BY_RATIO_EN")) {
            *(_DWORD *)(a2 + 7960) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_0")) {
            *(_DWORD *)(a2 + 7964) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_1")) {
            *(_DWORD *)(a2 + 7968) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_2")) {
            *(_DWORD *)(a2 + 7972) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_3")) {
            *(_DWORD *)(a2 + 7976) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_BITS")) {
            *(_DWORD *)(a2 + 7980) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "PHSPAR_USE")) {
            *(_DWORD *)(a2 + 7984) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_USE")) {
            *(_DWORD *)(a2 + 7988) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "USE_LOG2")) {
            *(_DWORD *)(a2 + 7992) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENHANCE_POWSPC")) {
            *(_DWORD *)(a2 + 7996) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_ATTENUATE")) {
            *(_DWORD *)(a2 + 8000) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_ATTENUATE_LO")) {
            *(_DWORD *)(a2 + 8004) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_ATTENUATE_HI")) {
            *(_DWORD *)(a2 + 8008) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_APPLY_DEEMP")) {
            *(_DWORD *)(a2 + 8012) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_HI_RES_ALIGN")) {
            *(_DWORD *)(a2 + 8016) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FAST_AUX_HARM")) {
            *(_DWORD *)(a2 + 8020) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FIX_OLA")) {
            *(_DWORD *)(a2 + 8024) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DC_GUARD_VOICED")) {
            *(_DWORD *)(a2 + 8028) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DC_GUARD_UNVOICED")) {
            *(_DWORD *)(a2 + 8032) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_NYQUIST_GUARD")) {
            *(_DWORD *)(a2 + 8036) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "PHSPAR_SIZE")) {
            *(_DWORD *)(a2 + 8040) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "PHSPAR_FLIP")) {
            *(_DWORD *)(a2 + 8044) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENERGY_NORM_TH")) {
            *(_DWORD *)(a2 + 8048) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SPCPAR_FREQWARP_ALPHA")) {
            *(_DWORD *)(a2 + 8052) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_PHS_ALIGN_WITH_CONST")) {
            *(_DWORD *)(a2 + 8056) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_NORM_GLOBAL")) {
            *(_DWORD *)(a2 + 8060) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEEMP_COEF")) {
            *(_DWORD *)(a2 + 8064) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_USE_NOISE_MODULATION")) {
            *(_DWORD *)(a2 + 8068) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "SYN_NOISE_MODULATION_FACTOR")) {
            *(_DWORD *)(a2 + 8072) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "MAX_FRAME_SIZE")) {
            *(_DWORD *)(a2 + 8076) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "MIN_FRAME_SIZE")) {
            *(_DWORD *)(a2 + 8080) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "MIN_FFT_SIZE")) {
            *(_DWORD *)(a2 + 8084) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE_INC_NUM")) {
            *(_DWORD *)(a2 + 8088) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE_DEC_NUM")) {
            *(_DWORD *)(a2 + 8092) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "ANAL_FFT_SIZE")) {
            *(_DWORD *)(a2 + 8096) = LH_atoi(v130);
          }
          if (!cstdlib_strcmp(__s2, "FFT_SIZE")) {
            *(_DWORD *)(a2 + 8100) = LH_atoi(v130);
          }
          v25 += v26;
          unsigned int v24 = v134;
        }
        while (v25 < v134);
      }
      cstdlib_strcpy(v136, "bet3voiceoverride.");
      cstdlib_strcat(v136, "BREAKER");
      if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v136, &v130) & 0x80000000) == 0)
      {
        uint64_t v85 = *(void *)(a2 + 208);
        if (v85)
        {
          heap_Free(*(void **)(a1 + 8), v85);
          *(void *)(a2 + 208) = 0;
        }
        uint64_t v86 = BET3FLT__heap_StrDup(*(void **)(a1 + 8), v130);
        *(void *)(a2 + 208) = v86;
        if (!v86)
        {
LABEL_325:
          int v44 = 3;
          LODWORD(v15) = v121;
          uint64_t StringZ = 2229280778;
LABEL_326:
          unsigned int v121 = v15;
LABEL_382:
          if (v44 != 3) {
            return v121;
          }
          break;
        }
      }
      cstdlib_strcpy(v136, "bet3voiceoverride.");
      cstdlib_strcat(v136, "BRK_LENGTH");
      if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v136, &v130) & 0x80000000) == 0) {
        *(_DWORD *)(a2 + 216) = LH_atoi(v130);
      }
    }
LABEL_369:
    int v102 = ssftriff_reader_CloseChunk(a3);
    if ((int)v15 > -1 && v102 < 0) {
      uint64_t StringZ = v102;
    }
    else {
      uint64_t StringZ = v15;
    }
  }
  if ((StringZ & 0x1FFF) == 0x14) {
    uint64_t v104 = 0;
  }
  else {
    uint64_t v104 = StringZ;
  }
  uint64_t v15 = StringZ;
  if ((v104 & 0x80000000) == 0)
  {
    char *__dst = 0;
    return v104;
  }
  return v15;
}

void *select_bet3_loc_VoiceClose(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *(uint64_t **)(a2 + 11648);
    if (v4 && *v4)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 1;
      do
      {
        *(void *)(a2 + 8 * v5 + 5432) = 0;
        uint64_t v4 = *(uint64_t **)(a2 + 11648);
        uint64_t v5 = v6;
      }
      while (v4[v6++]);
    }
    uselect_FreeRiffStringTable(result, v4);
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)(a2 + 11656));
    uint64_t v8 = *(uint64_t **)(a2 + 12520);
    uint64_t v9 = *(uint64_t ***)(a2 + 12528);
    uint64_t v10 = *(uint64_t **)(a2 + 12536);
    if (v8)
    {
      uint64_t v11 = *v8;
      if (*v8)
      {
        int v12 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v11);
          uint64_t v11 = v8[(unsigned __int16)++v12];
        }
        while (v11);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v8);
    }
    if (v9)
    {
      uint64_t v13 = *v9;
      if (*v9)
      {
        int v14 = 0;
        uint64_t v15 = v9;
        do
        {
          uint64_t v16 = *v13;
          if (*v13)
          {
            int v17 = 0;
            do
            {
              heap_Free(*(void **)(v3 + 8), v16);
              ++v17;
              uint64_t v13 = *v15;
              uint64_t v16 = (*v15)[(unsigned __int16)v17];
            }
            while (v16);
          }
          heap_Free(*(void **)(v3 + 8), (uint64_t)v13);
          uint64_t v15 = &v9[(unsigned __int16)++v14];
          uint64_t v13 = *v15;
        }
        while (*v15);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v9);
    }
    if (v10)
    {
      uint64_t v18 = *v10;
      if (*v10)
      {
        int v19 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v18);
          uint64_t v18 = v10[(unsigned __int16)++v19];
        }
        while (v18);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v10);
    }
    BET3FLT__DeInitVData((void *)v3, (char *)(a2 + 8112));
    BET3FLT__DeInitVParam(v3, (void *)(a2 + 128));
    uint64_t v20 = (_WORD *)(a2 + 37792);
    if (*(_WORD *)(a2 + 37792))
    {
      unint64_t v21 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(void **)(a2 + 37584 + 8 * v21++));
      while (v21 < (unsigned __int16)*v20);
    }
    _WORD *v20 = 0;
    *(unsigned char *)a2 = 0;
    uint64_t v22 = *(void **)(v3 + 8);
    return heap_Free(v22, a2);
  }
  return result;
}

uint64_t select_bet3_LoadRiffGenericFeatureMap(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v11 = a1;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a3;
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), v12 + 1, 8);
  *a5 = v13;
  if (v13)
  {
    uint64_t v14 = heap_Calloc(*(void **)(v11 + 8), v12 + 1, 8);
    *a6 = v14;
    if (v14)
    {
      uint64_t v15 = heap_Calloc(*(void **)(v11 + 8), v12 + 1, 8);
      *a7 = v15;
      if (v15)
      {
        if (!v12) {
          return 0;
        }
        unsigned int v16 = 0;
        unsigned int v17 = 2;
        double v28 = a5;
        double v29 = a7;
        unsigned int v30 = v12;
        while (1)
        {
          __dst[0] = 0;
          unsigned int v34 = 256;
          uint64_t v18 = ssftriff_reader_ReadStringZ(a2, (uint64_t)a3, a4, v17, __dst, &v34);
          unsigned int v19 = v34;
          *(void *)(*a5 + 8 * v16) = BET3FLT__heap_StrDup(*(void **)(v11 + 8), __dst);
          if (!*(void *)(*a5 + 8 * v16)) {
            break;
          }
          uint64_t v20 = v16;
          unsigned int v21 = v19 + v17;
          uint64_t v31 = *(unsigned __int16 *)((char *)a3 + v21);
          *(void *)(*a6 + 8 * v16) = heap_Calloc(*(void **)(v11 + 8), v31 + 1, 8);
          if (!*(void *)(*a6 + 8 * v16)) {
            break;
          }
          *(void *)(*a7 + 8 * v16) = heap_Calloc(*(void **)(v11 + 8), v31 + 1, 1);
          if (!*(void *)(*a7 + 8 * v16)) {
            break;
          }
          unsigned int v17 = v21 + 2;
          if (v31)
          {
            uint64_t v22 = v11;
            uint64_t v23 = 0;
            while (1)
            {
              unsigned int v24 = v17;
              __dst[0] = 0;
              unsigned int v34 = 256;
              uint64_t v18 = ssftriff_reader_ReadStringZ(a2, (uint64_t)a3, a4, v17, __dst, &v34);
              unsigned int v25 = v34;
              *(void *)(*(void *)(*a6 + 8 * v20) + v23) = BET3FLT__heap_StrDup(*(void **)(v22 + 8), __dst);
              if (!*(void *)(*(void *)(*a6 + 8 * v20) + v23)) {
                return 2229280778;
              }
              v17 += v25;
              v23 += 8;
              if (8 * v31 == v23)
              {
                a5 = v28;
                a7 = v29;
                for (uint64_t i = 0; i != v31; ++i)
                  *(unsigned char *)(*(void *)(*v29 + 8 * v20) + i) = *((unsigned char *)a3 + v24 + v25 + i);
                unsigned int v17 = v24 + v25 + i;
                uint64_t v11 = v22;
                break;
              }
            }
          }
          unsigned int v16 = v20 + 1;
          if ((int)v20 + 1 >= v30) {
            return v18;
          }
        }
      }
    }
  }
  return 2229280778;
}

uint64_t select_bet3_loc_SetSynthParamFloat(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __sprintf_chk(v11, 0, 0x20uLL, "%f", a3);
  uint64_t v9 = paramc_ParamSetStr(*(void *)(a1 + 40), a2, v11);
  if ((v9 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%f%s%x", v5, v6, v7, v8, "parameter");
  }
  return v9;
}

uint64_t select_bet3_loc_SetSynthParamInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = paramc_ParamSetInt(*(void *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%d%s%x", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t select_bet3_loc_SetSynthParamArrayOfBet3_int32(uint64_t a1, void *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = paramc_ParamSet(*(void *)(a1 + 40), (uint64_t)"bet3cepstralequalizer", a2, (4 * a3));
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%p%s%d%s%d", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t BET3FLT__ParamGenStart(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)a1;
  uint64_t result = BET3FLT__InitUttModel(*(void *)a1, (char *)(a1 + 56), a2, *(__int16 *)(*(void *)(a1 + 8) + 10));
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(v5 + 16) = a3[8];
    int v13 = a3[7];
    if (v13 >= 1 && v13 < *(_DWORD *)(v5 + 620))
    {
      BET3FLT__log_select_Error(v6, 55018, (uint64_t)"Specified length of generated speech is too short (this sentence is composed from %d states), specify more than %d milliseconds\n", v8, v9, v10, v11, v12);
      return 2229280775;
    }
    if (*(int *)(v5 + 608) >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v92 = v5;
      uint64_t v93 = (uint64_t)(v4 + 116);
      int v15 = *(_DWORD *)(v5 + 32);
      unsigned __int16 v81 = a3 + 326;
      uint64_t v82 = *(void *)(*(void *)(v5 + 8) + 1784);
      float v16 = -0.5;
      float v17 = 0.0;
      float v18 = 0.0;
      uint64_t v84 = (uint64_t)a3;
      uint64_t v89 = (uint64_t)v4;
      uint64_t v91 = v6;
      while (1)
      {
        uint64_t v19 = *(void *)(v5 + 600);
        uint64_t v20 = (int32x2_t *)(v19 + 528 * v14);
        uint64_t v87 = v19;
        uint64_t v94 = v20;
        if (v15 >= 1)
        {
          uint64_t v21 = 0;
          uint64_t v22 = v81;
          do
          {
            uint64_t v23 = &a3[v21];
            int v24 = v23[86];
            if (v24 < 1)
            {
              LODWORD(v25) = 0;
            }
            else
            {
              uint64_t v25 = 0;
              unsigned int v26 = v23 + 86;
              double v27 = (const char **)&a3[2 * *(unsigned __int8 *)(*(void *)(*(void *)(v5 + 8) + 248) + v20->i32[0])
                                     + 1326];
              do
              {
                double v28 = *(const char **)&v22[2 * v25];
                if (v28 && *v27)
                {
                  if (!cstdlib_strcmp(v28, *v27)) {
                    goto LABEL_18;
                  }
                  int v24 = *v26;
                }
                ++v25;
              }
              while (v25 < v24);
              LODWORD(v25) = 0;
LABEL_18:
              uint64_t v19 = v87;
              uint64_t v20 = v94;
            }
            *(_DWORD *)(v19 + 528 * v14 + 4 * v21++ + 32) = v25;
            v22 += 10;
          }
          while (v21 < *(int *)(v5 + 32));
        }
        BET3FLT__log_select_Diag(v6, 21, (uint64_t)"[phoneme %d]\n");
        if (!v82) {
          break;
        }
        if (a3[29])
        {
          uint64_t v34 = v19 + 528 * v14;
          *(_DWORD *)(v34 + 8) = BET3FLT__TreeSearch(*(void *)(v5 + 8), v14, v93, 0, 0);
          BET3FLT__log_select_Diag(v6, 6, (uint64_t)"DUR pdf id %d\n");
          uint64_t result = BET3FLT__FindDurPDF(v94, v4, 0, *(_DWORD *)(v34 + 32), 0, *(float *)(v5 + 16));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          LOWORD(v35) = *(_WORD *)(*(void *)(*(void *)(v5 + 8) + 1784) + 2 * v94->i32[0]);
          float v36 = BET3FLT__div_int32_int32_to_Q8_24((float)v35, (float)a3[6]);
          if (v36 != 0.0)
          {
            float v37 = v36;
            float v38 = 0.0;
            float v39 = 0.0;
            if (*v4 >= 1)
            {
              uint64_t v40 = 2;
              do
              {
                float v39 = v39 + BET3FLT__int32_to_Q12_20((float)*(int *)(*(void *)(v19 + 528 * v14 + 16) + 4 * v40));
                BOOL v41 = v40++ <= *v4;
              }
              while (v41);
            }
            float v42 = v16 + v37;
            float v43 = BET3FLT__div_Q8_24_Q12_20_to_Q8_24(v42, v39);
            uint64_t v44 = v19 + 528 * v14;
            *(_DWORD *)(v44 + 24) = 0;
            uint64_t v45 = (_DWORD *)(v44 + 24);
            if (*v4 >= 1)
            {
              float v46 = v43;
              uint64_t v47 = v19 + 528 * v14;
              uint64_t v50 = *(void *)(v47 + 16);
              uint64_t v49 = (uint64_t *)(v47 + 16);
              uint64_t v48 = v50;
              uint64_t v51 = 2;
              do
              {
                float v52 = BET3FLT__mul_int32_Q8_24_to_Q8_24((float)*(int *)(v48 + 4 * v51), v46);
                int v53 = (int)BET3FLT__Q8_24_to_int32(v52 + 0.5);
                if (v53 <= 1) {
                  int v54 = 1;
                }
                else {
                  int v54 = v53;
                }
                uint64_t v48 = *v49;
                *(_DWORD *)(*v49 + 4 * v51) = v54;
                int v55 = *v45 + v54;
                *uint64_t v45 = v55;
                BOOL v41 = v51++ <= *v4;
              }
              while (v41);
              float v38 = (float)v55;
            }
            float v16 = v42 - BET3FLT__int32_to_Q8_24(v38);
          }
LABEL_45:
          *(_DWORD *)(v5 + 624) += *(_DWORD *)(v19 + 528 * v14 + 24);
          goto LABEL_46;
        }
        if (!a3[28]) {
          break;
        }
        uint64_t result = BET3FLT__log_select_Error(v6, 55017, (uint64_t)"State level segmentation is not currently supported\n", v29, v30, v31, v32, v33);
LABEL_46:
        uint64_t v83 = v14;
        int v15 = *(_DWORD *)(v5 + 32);
        if (v15 >= 1)
        {
          for (uint64_t i = 0; i < v15; ++i)
          {
            uint64_t v62 = *(void *)(v5 + 24);
            if (!*(_DWORD *)(v62 + 1528 * i + 1480))
            {
              if (*(_DWORD *)(v62 + 1528 * i + 1488))
              {
                uint64_t v63 = v5 + 8 * i;
                int v64 = *v4 * v83;
                uint64_t v85 = *(void *)(*(void *)(v63 + 304) + 8 * v64);
                uint64_t v86 = *(void *)(*(void *)(v63 + 224) + 8 * v64);
              }
              uint64_t v65 = (char *)v4 + 2 * i;
              if (*((_WORD *)v65 + 324))
              {
                uint64_t v66 = 0;
                unint64_t v67 = 0;
                uint64_t v90 = (unsigned __int16 *)(v65 + 648);
                uint64_t v68 = v19 + 528 * v83;
                long long v69 = (void *)(v68 + 8 * i);
                uint64_t v70 = v69 + 9;
                uint64_t v71 = v69 + 19;
                uint64_t v72 = v69 + 29;
                uint64_t v88 = (int *)(v68 + 4 * i + 32);
                do
                {
                  uint64_t v73 = *(unsigned __int16 *)(*(void *)&v4[2 * i + 142] + v66);
                  *(_DWORD *)(*v70 + 4 * v73) = BET3FLT__TreeSearch(*(void *)(v92 + 8), v94->i32[0], v93, i, v67);
                  uint64_t result = BET3FLT__log_select_Diag(v91, 6, (uint64_t)"%s pdf state %d id %d\n");
                  uint64_t v74 = *(void *)(v92 + 24);
                  if (*(_DWORD *)(v74 + 1528 * i + 1488))
                  {
                    int v75 = v73 - 2 + (v73 - 2) * v4[i + 1];
                    *(void *)(*v71 + 8 * v73) = v86 + 4 * v75;
                    *(void *)(*v71 + 8 * v73) -= 4;
                    *(void *)(*v72 + 8 * v73) = v85 + 4 * v75;
                    *(void *)(*v72 + 8 * v73) -= 4;
                    uint64_t result = BET3FLT__FindMsdPDF(i, v73, (uint64_t)v94, v89, v84, *v88);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                  }
                  else if (*(_DWORD *)(v74 + 1528 * i + 1484))
                  {
                    uint64_t result = BET3FLT__FindContPDF(i, v73, (uint64_t)v94, v89, *v88);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                  }
                  ++v67;
                  v66 += 16;
                }
                while (v67 < *v90);
                uint64_t v5 = v92;
                int v15 = *(_DWORD *)(v92 + 32);
                a3 = (int *)v84;
                uint64_t v4 = (int *)v89;
                uint64_t v19 = v87;
              }
            }
          }
        }
        uint64_t v14 = v83 + 1;
        uint64_t v6 = v91;
        if (v83 + 1 >= *(int *)(v5 + 608))
        {
          int v13 = a3[7];
          goto LABEL_65;
        }
      }
      uint64_t v56 = v19 + 528 * v14;
      *(_DWORD *)(v56 + 8) = BET3FLT__TreeSearch(*(void *)(v5 + 8), v14, v93, 0, 0);
      uint64_t v57 = (int *)(v56 + 8);
      uint64_t result = BET3FLT__log_select_Diag(v6, 6, (uint64_t)"DUR pdf id %d\n");
      if (a3[7])
      {
        uint64_t v58 = *v4;
        if ((int)v58 >= 1)
        {
          long long v59 = (float *)(*(void *)(*(void *)(*((void *)v4 + 21) + 8 * *(int *)(v19 + 528 * v14 + 32))
                                    + 8 * *v57)
                        + 8);
          uint64_t v60 = (v58 + 2) - 2;
          do
          {
            float v18 = v18 + *v59;
            float v17 = v17 + v59[v58];
            ++v59;
            --v60;
          }
          while (v60);
        }
        goto LABEL_46;
      }
      uint64_t result = BET3FLT__FindDurPDF(v94, v4, 0, *(_DWORD *)(v19 + 528 * v14 + 32), 0, *(float *)(v5 + 16));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      SetSilenceDuration(v5, v4, (uint64_t)a3, (int *)v94);
      goto LABEL_45;
    }
    float v18 = 0.0;
    float v17 = 0.0;
LABEL_65:
    if (v13 < 1
      || (float v76 = BET3FLT__int32_to_Q18_14(result, (float)v13),
          float v77 = BET3FLT__div_Q18_14_Q18_14_to_Q18_14(v76 - v18, v17),
          *(float *)(v5 + 16) = BET3FLT__Q18_14_to_Q1_15(v77),
          *(int *)(v5 + 608) < 1))
    {
LABEL_70:
      if (BET3FLT__log_select_GetLogLevel(*(void *)(v6 + 32)) >= 0x15) {
        OutLabel(v5);
      }
      BET3FLT__log_select_Diag(v6, 2, (uint64_t)">> tree search done\n");
      AddBreakMarks(v5, v4, (uint64_t)a3);
      return ParamGenLT(v5, v4);
    }
    else
    {
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      while (1)
      {
        int v80 = (int32x2_t *)(*(void *)(v5 + 600) + v78);
        uint64_t result = BET3FLT__FindDurPDF(v80, v4, 0, v80[4].i32[0], 0, *(float *)(v5 + 16));
        if ((result & 0x80000000) != 0) {
          break;
        }
        SetSilenceDuration(v5, v4, (uint64_t)a3, (int *)v80);
        *(_DWORD *)(v5 + 624) += v80[3].i32[0];
        ++v79;
        v78 += 528;
        if (v79 >= *(int *)(v5 + 608)) {
          goto LABEL_70;
        }
      }
    }
  }
  return result;
}

void SetSilenceDuration(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *a4;
  if (*(unsigned char *)(*(void *)(v4 + 32) + v5) == 1)
  {
    int v8 = *(unsigned __int16 *)(*(void *)(v4 + 1784) + 2 * v5) / *(int *)(a3 + 24);
    LODWORD(v4) = *a2;
    if (v8 <= *a2)
    {
      if ((int)v4 >= 1)
      {
        uint64_t v14 = *((void *)a4 + 2);
        uint64_t v15 = 2;
        do
        {
          *(_DWORD *)(v14 + 4 * v15) = 1;
          BOOL v11 = v15++ <= *a2;
        }
        while (v11);
        LODWORD(v4) = *a2;
      }
      a4[6] = v4;
    }
    else
    {
      if (v8 >= a4[6])
      {
        if ((int)v4 < 1)
        {
          int v12 = 0;
          int v13 = 0;
        }
        else
        {
          int v13 = 0;
          int v12 = 0;
          uint64_t v16 = *((void *)a4 + 2);
          uint64_t v17 = 2;
          do
          {
            int v18 = *(_DWORD *)(v16 + 4 * v17);
            if (v18 <= 0)
            {
              int v18 = 1;
              *(_DWORD *)(v16 + 4 * v17) = 1;
              LODWORD(v4) = *a2;
            }
            BOOL v19 = v17 == 2 || v17 == v4 + 1;
            if (v19) {
              int v20 = 0;
            }
            else {
              int v20 = v18;
            }
            v12 += v20;
            if (!v19) {
              int v18 = 0;
            }
            v13 += v18;
            BOOL v11 = v17++ <= (int)v4;
          }
          while (v11);
        }
      }
      else
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = *((void *)a4 + 2);
          uint64_t v10 = 2;
          do
          {
            *(_DWORD *)(v9 + 4 * v10) = 1;
            uint64_t v4 = *a2;
            BOOL v11 = v10++ <= v4;
          }
          while (v11);
        }
        int v12 = v4 - 2;
        int v13 = 2;
      }
      float v21 = BET3FLT__div_int32_int32_to_Q8_24((float)(v8 - v13), (float)v12);
      a4[6] = v13;
      LODWORD(v22) = *a2;
      if (*a2 >= 3)
      {
        float v23 = v21;
        uint64_t v24 = 3;
        do
        {
          if (v24 >= (int)v22) {
            int v25 = v8 - v13;
          }
          else {
            int v25 = (int)BET3FLT__mul_int32_Q8_24_to_int32((float)*(int *)(*((void *)a4 + 2) + 4 * v24), v23);
          }
          if (v25 <= 1) {
            int v25 = 1;
          }
          *(_DWORD *)(*((void *)a4 + 2) + 4 * v24) = v25;
          int v13 = a4[6] + v25;
          a4[6] = v13;
          uint64_t v22 = *a2;
          BOOL v11 = v24++ < v22;
        }
        while (v11);
      }
    }
  }
}

uint64_t OutLabel(uint64_t result)
{
  if (*(int *)(result + 608) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v1 + 600) + v2;
      uint64_t result = BET3FLT__log_select_Diag(*(void *)v1, 21, (uint64_t)"%d %d %d [%d]\n");
      v4 += *(_DWORD *)(v5 + 24);
      ++v3;
      v2 += 528;
    }
    while (v3 < *(int *)(v1 + 608));
  }
  return result;
}

uint64_t AddBreakMarks(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "PHRASE_TIME");
  if (result)
  {
    uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "PHRASE");
    if (result)
    {
      uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "WORD");
      if (result)
      {
        uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "SYLLABLE");
        if (result)
        {
          uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "TIME");
          if (result)
          {
            uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "NONE");
            if (result)
            {
              uint64_t v12 = *(void *)a1;
              return BET3FLT__log_select_Error(v12, 55036, (uint64_t)"valid breaker is required\n", v7, v8, v9, v10, v11);
            }
          }
          else
          {
            uint64_t v39 = *(unsigned int *)(a1 + 608);
            if ((int)v39 >= 1)
            {
              uint64_t v40 = 0;
              int v41 = 0;
              int v42 = *(_DWORD *)(a3 + 88);
              int v43 = *a2;
              uint64_t v44 = *(void *)(a1 + 600);
              int v45 = v42;
              int v46 = 0;
              do
              {
                if (v43 >= 1)
                {
                  uint64_t result = *(void *)(v44 + 528 * v40 + 16) + 8;
                  uint64_t v47 = (v43 + 2) - 2;
                  int v46 = v41;
                  do
                  {
                    int v48 = *(_DWORD *)result;
                    result += 4;
                    v46 += v48;
                    --v47;
                  }
                  while (v47);
                }
                if (v46 > v45)
                {
                  int v45 = v41 + v42;
                  uint64_t v49 = v44 + 528 * v40;
                  uint64_t result = *(_DWORD *)(v49 + 4) | 2u;
                  *(_DWORD *)(v49 + 4) = result;
                }
                ++v40;
                int v41 = v46;
              }
              while (v40 != v39);
            }
          }
        }
        else
        {
          int v35 = *(_DWORD *)(a1 + 608);
          if (v35 >= 3)
          {
            uint64_t v36 = (v35 - 2);
            float v37 = *(int **)(a1 + 600);
            uint64_t v38 = *(void *)(*(void *)(a1 + 8) + 112);
            do
            {
              if (*(unsigned char *)(v38 + *v37)) {
                v37[133] |= 2u;
              }
              v37 += 132;
              --v36;
            }
            while (v36);
          }
        }
      }
      else
      {
        int v31 = *(_DWORD *)(a1 + 608);
        if (v31 >= 3)
        {
          uint64_t v32 = (v31 - 2);
          uint64_t v33 = *(int **)(a1 + 600);
          uint64_t v34 = *(void *)(*(void *)(a1 + 8) + 112);
          do
          {
            if ((*(unsigned char *)(v34 + *v33) & 0xFE) == 2) {
              v33[133] |= 2u;
            }
            v33 += 132;
            --v32;
          }
          while (v32);
        }
      }
    }
    else
    {
      int v27 = *(_DWORD *)(a1 + 608);
      if (v27 >= 3)
      {
        uint64_t v28 = (v27 - 2);
        uint64_t v29 = *(int **)(a1 + 600);
        uint64_t v30 = *(void *)(*(void *)(a1 + 8) + 112);
        do
        {
          if (*(unsigned char *)(v30 + *v29) == 3) {
            v29[133] |= 2u;
          }
          v29 += 132;
          --v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    uint64_t v13 = *(int *)(a1 + 608);
    if ((int)v13 >= 1)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v16 = *(void *)(a1 + 600);
      int v17 = *a2;
      int v18 = *(_DWORD *)(a3 + 88);
      uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 112);
      uint64_t v20 = v13 - 2;
      uint64_t v21 = *(unsigned int *)(a1 + 608);
      do
      {
        if (v17 < 1)
        {
          int v22 = 0;
        }
        else
        {
          int v22 = 0;
          float v23 = (int *)(*(void *)(v16 + 528 * v14 + 16) + 8);
          uint64_t v24 = (v17 + 2) - 2;
          do
          {
            int v25 = *v23++;
            v22 += v25;
            --v24;
          }
          while (v24);
        }
        v15 += v22;
        if (v15 > v18)
        {
          *(_DWORD *)(v16 + 528 * v14 + 4) |= 2u;
          int v15 = v22;
        }
        uint64_t result = v16 + 528 * v14;
        if (*(unsigned char *)(v19 + *(int *)result) == 3 && v14 < v20)
        {
          int v15 = 0;
          *(_DWORD *)(result + 532) |= 2u;
        }
        ++v14;
      }
      while (v14 != v21);
    }
  }
  return result;
}

uint64_t ParamGenLT(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = 2229280778;
  memset(__b, 0, 512);
  memset(v78, 0, sizeof(v78));
  memset(v77, 0, sizeof(v77));
  cstdlib_memset(__b, 0, 0x2D8uLL);
  BET3FLT__InitSMatrices(v3, v78);
  BET3FLT__InitSMatrices(v3, v77);
  uint64_t v5 = heap_Calloc(*(void **)(v3 + 8), (*(_DWORD *)(a1 + 624) + 1), 1);
  *(void *)(a1 + 48) = v5;
  if (!v5) {
    return v4;
  }
  uint64_t v6 = heap_Calloc(*(void **)(v3 + 8), (*(_DWORD *)(a1 + 624) + 1), 4);
  *(void *)(a1 + 40) = v6;
  if (!v6) {
    return v4;
  }
  int v7 = *(_DWORD *)(a1 + 608);
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    LODWORD(v10) = *a2;
    do
    {
      if ((int)v10 >= 1)
      {
        uint64_t v11 = *(void *)(a1 + 600) + 528 * v8;
        uint64_t v14 = *(void *)(v11 + 16);
        uint64_t v12 = (uint64_t *)(v11 + 16);
        uint64_t v13 = v14;
        int v15 = v12 + 37;
        uint64_t v16 = 2;
        do
        {
          if (*(int *)(v13 + 4 * v16) >= 1)
          {
            int v17 = 0;
            uint64_t v18 = v9;
            do
            {
              *(unsigned char *)(*(void *)(a1 + 48) + v18) = *(unsigned char *)(*v15 + v16);
              *(_DWORD *)(*(void *)(a1 + 40) + 4 * v18++) = *(_DWORD *)(v12[38] + 4 * v16);
              uint64_t v13 = *v12;
              ++v17;
            }
            while (v17 < *(_DWORD *)(*v12 + 4 * v16));
            v9 += v17;
          }
          uint64_t v19 = *(unsigned int *)(a1 + 32);
          if ((int)v19 >= 1)
          {
            uint64_t v20 = *(_DWORD **)(a1 + 24);
            do
            {
              if (v20[372] && ((1 << v20[3]) & (unint64_t)*(unsigned __int8 *)(*v15 + v16)) >> v20[3]) {
                v20[11] += *(_DWORD *)(v13 + 4 * v16);
              }
              v20 += 382;
              --v19;
            }
            while (v19);
          }
          uint64_t v10 = *a2;
          BOOL v21 = v16++ <= v10;
        }
        while (v21);
        int v7 = *(_DWORD *)(a1 + 608);
      }
      ++v8;
    }
    while (v8 < v7);
  }
  if (*(int *)(a1 + 32) < 1)
  {
    uint64_t v4 = 0;
    goto LABEL_65;
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v4 = 0;
  uint64_t v24 = (void *)(a1 + 56);
  while (1)
  {
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = v25 + 1528 * v22;
    if (*(_DWORD *)(v26 + 1488)) {
      break;
    }
LABEL_61:
    if (++v22 >= *(int *)(a1 + 32)) {
      goto LABEL_65;
    }
  }
  if (!*(_DWORD *)(v25 + 1528 * v22 + 44))
  {
LABEL_60:
    BET3FLT__DeInitMSDUttModel(v24, v22);
    goto LABEL_61;
  }
  int v27 = (uint64_t *)(v26 + 24);
  uint64_t inited = BET3FLT__InitPStreamParam((_DWORD *)(v26 + 24), 0);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v29 = BET3FLT__InitPStreamSM(v27, (uint64_t)v78);
    uint64_t v4 = v29;
    if ((v29 & 0x80000000) != 0) {
      goto LABEL_65;
    }
    int v31 = *(_DWORD *)(a1 + 608);
    if (v31 >= 1)
    {
      unint64_t v67 = v27;
      unsigned int v68 = v29;
      uint64_t v32 = 0;
      int v33 = 0;
      int v34 = 0;
      uint64_t v35 = v25 + 1528 * v22;
      uint64_t v36 = v35 + 56;
      float v37 = (void *)(v35 + 96);
      uint64_t v38 = (void *)(v35 + 104);
      int v39 = *a2;
      uint64_t v74 = v22;
      do
      {
        if (v39 >= 1)
        {
          uint64_t v69 = v32;
          uint64_t v40 = *(void *)(a1 + 600) + 528 * v32;
          uint64_t v41 = v40 + 8 * v22;
          uint64_t v42 = *(void *)(v40 + 16);
          uint64_t v71 = (uint64_t *)(v40 + 16);
          uint64_t v30 = (void *)(v41 + 152);
          int v43 = (void *)(v41 + 232);
          uint64_t v44 = 2;
          do
          {
            if (*(int *)(v42 + 4 * v44) >= 1)
            {
              uint64_t v45 = v34;
              uint64_t v46 = *(void *)(a1 + 24);
              int v47 = 1;
              uint64_t v75 = v44;
              do
              {
                if (*(int *)(v46 + 1528 * v22 + 36) >= 1)
                {
                  int v72 = v47;
                  uint64_t v48 = 0;
                  int v73 = v33;
                  uint64_t v49 = v33;
                  uint64_t v76 = v33;
                  do
                  {
                    int v50 = *(_DWORD *)(v46 + 1528 * v22 + 12);
                    uint64_t v51 = 1 << v50;
                    uint64_t v52 = (1 << v50);
                    v23 |= v52;
                    int v53 = *(int **)(*(void *)(*(void *)v36 + 8) + 8 * v48);
                    int v55 = *v53;
                    int v54 = v53[1];
                    if (v55 <= v54)
                    {
                      uint64_t v56 = v52 ^ 0xFF;
                      int v57 = v54 - v55 + 1;
                      unsigned int v58 = v34 + v55;
                      do
                      {
                        uint64_t v59 = v56;
                        if ((v58 & 0x80000000) == 0)
                        {
                          uint64_t v59 = v56;
                          if (*(_DWORD *)(a1 + 624) >= (signed int)v58) {
                            uint64_t v59 = *(unsigned __int8 *)(*(void *)(a1 + 48) + v58);
                          }
                        }
                        v23 &= v59;
                        ++v58;
                        --v57;
                      }
                      while (v57);
                    }
                    if ((unint64_t)(v51 & *(unsigned char *)(*(void *)(a1 + 48) + v45)) >> v50)
                    {
                      if (!v48 || (v51 & v23) >> v50)
                      {
                        uint64_t v60 = 4 * v48 + 4;
                        *(_DWORD *)(*(void *)(*v37 + 8 * v49) + 4 * v48) = *(_DWORD *)(*(void *)(*v30 + 8 * v44)
                                                                                       + v60);
                        float v61 = *(float *)(*(void *)(*v43 + 8 * v44) + v60);
                        if (*(_DWORD *)(v46 + 1528 * v22 + 1492))
                        {
                          *(float *)(*(void *)(*v38 + 8 * v49) + 4 * v48) = v61;
                        }
                        else
                        {
                          uint64_t v62 = v38;
                          uint64_t v63 = v36;
                          int v64 = v30;
                          float v65 = BET3FLT__bet3_finv(v61);
                          uint64_t v30 = v64;
                          uint64_t v44 = v75;
                          uint64_t v49 = v76;
                          uint64_t v36 = v63;
                          uint64_t v22 = v74;
                          uint64_t v38 = v62;
                          *(float *)(*(void *)(*v62 + 8 * v76) + 4 * v48) = v65;
                          uint64_t v46 = *(void *)(a1 + 24);
                        }
                      }
                      else
                      {
                        *(_DWORD *)(*(void *)(*v37 + 8 * v49) + 4 * v48) = 0;
                        *(_DWORD *)(*(void *)(*v38 + 8 * v49) + 4 * v48) = 0;
                      }
                    }
                    ++v48;
                  }
                  while (v48 < *(int *)(v46 + 1528 * v22 + 36));
                  uint64_t v42 = *v71;
                  int v33 = v73;
                  int v47 = v72;
                }
                if (((1 << *(_DWORD *)(v46 + 1528 * v22 + 12)) & (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 48) + v45)) >> *(_DWORD *)(v46 + 1528 * v22 + 12)) {
                  ++v33;
                }
                ++v45;
                ++v34;
                BOOL v21 = v47++ < *(_DWORD *)(v42 + 4 * v44);
              }
              while (v21);
              int v39 = *a2;
              int v34 = v45;
            }
            BOOL v21 = v44++ <= v39;
          }
          while (v21);
          int v31 = *(_DWORD *)(a1 + 608);
          uint64_t v32 = v69;
        }
        ++v32;
      }
      while (v32 < v31);
      uint64_t v24 = (void *)(a1 + 56);
      if (v33 < 1)
      {
        uint64_t v4 = v68;
        int v27 = v67;
      }
      else
      {
        int v27 = v67;
        (**(void (***)(uint64_t *, void, uint64_t, void *))(*(void *)(a1 + 24) + 1528 * v22 + 1504))(v67, 0, v36, v30);
        uint64_t v4 = v68;
      }
    }
    BET3FLT__FreePStreamSM((uint64_t)v27);
    goto LABEL_60;
  }
  uint64_t v4 = inited;
LABEL_65:
  BET3FLT__FreePStreamParam(__b);
  BET3FLT__FreeSMatrices((uint64_t)v78);
  BET3FLT__FreeSMatrices((uint64_t)v77);
  return v4;
}

uint64_t BET3FLT__ParamGenFrames(uint64_t *a1, int *a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *a1;
  memset(__b, 0, 512);
  memset(v121, 0, sizeof(v121));
  memset(v120, 0, sizeof(v120));
  *a3 = 0;
  cstdlib_memset(__b, 0, 0x2D8uLL);
  BET3FLT__InitSMatrices(v5, v121);
  uint64_t v103 = v5;
  BET3FLT__InitSMatrices(v5, v120);
  int v6 = *((_DWORD *)v4 + 153);
  uint64_t v7 = v4[75] + 528 * v6;
  *(_DWORD *)(v7 + 4) &= ~2u;
  int v8 = *((_DWORD *)v4 + 152);
  BOOL v9 = __OFSUB__(v8, v6);
  int v10 = v8 - v6;
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
    LODWORD(v12) = 0;
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = 0;
    LODWORD(v12) = 0;
    while ((*(unsigned char *)(v7 + 4) & 2) == 0)
    {
      uint64_t v13 = *a2;
      if ((int)v13 >= 1)
      {
        uint64_t v14 = (int *)(*(void *)(v7 + 16) + 8);
        do
        {
          int v15 = *v14++;
          LODWORD(v12) = v15 + v12;
          --v13;
        }
        while (v13);
      }
      v7 += 528;
      if (++v11 == v10)
      {
        unsigned int v11 = v10;
        break;
      }
    }
  }
  BET3FLT__log_select_Diag(v5, 2, (uint64_t)"| processing %d models %d frames <=> ");
  if (*((int *)v4 + 8) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    int v119 = 0;
    int v19 = 0;
    unsigned int inited = 0;
    uint64_t v101 = -(uint64_t)v11;
    unsigned int v102 = v11;
    int v115 = v4;
    int v106 = a2;
    while (1)
    {
      uint64_t v20 = v4[3];
      if (*(_DWORD *)(v20 + 1528 * v16 + 1484))
      {
        uint64_t v21 = v20 + 1528 * v16;
        uint64_t v107 = (void **)(v21 + 64);
        uint64_t v116 = v16;
        unsigned int v117 = (_DWORD *)(v21 + 24);
        if (*(void *)(v21 + 64))
        {
          BET3FLT__FreePStreamParam((void *)(v21 + 24));
          uint64_t v16 = v116;
        }
        uint64_t v22 = v4[3] + 1528 * v16;
        int v23 = *(_DWORD *)(v22 + 1496);
        uint64_t v111 = *(unsigned int *)(v22 + 1500);
        int v24 = *((_DWORD *)v4 + 153);
        int v25 = *((_DWORD *)v4 + 152);
        if ((int)(v17 + v11 + v24) < v25 && v18 < v23)
        {
          int v27 = *a2;
          uint64_t v28 = v7;
          do
          {
            if (v27 >= 1)
            {
              uint64_t v29 = (int *)(*(void *)(v28 + 16) + 8);
              uint64_t v30 = (v27 + 2) - 2;
              do
              {
                int v31 = *v29++;
                v18 += v31;
                --v30;
              }
              while (v30);
            }
            v28 += 528;
            uint64_t v17 = (v17 + 1);
          }
          while ((int)(v17 + v11 + v24) < v25 && v18 < v23);
        }
        if (v24 > v119 && v19 < v23)
        {
          uint64_t v33 = v7 + 528 * v101;
          int v34 = *a2;
          do
          {
            if (v34 >= 1)
            {
              uint64_t v35 = (int *)(*(void *)(v33 - 512) + 8);
              uint64_t v36 = (v34 + 2) - 2;
              do
              {
                int v37 = *v35++;
                v19 += v37;
                --v36;
              }
              while (v36);
            }
            if (v24 <= ++v119) {
              break;
            }
            v33 -= 528;
          }
          while (v19 < v23);
        }
        uint64_t v108 = v7;
        uint64_t v104 = v17;
        BET3FLT__log_select_Diag(v103, 3, (uint64_t)"L: %d %d  R: %d %d\n");
        uint64_t v38 = v20 + 1528 * v116;
        *(_DWORD *)(v38 + 44) = v12;
        char v109 = (unsigned int *)(v38 + 44);
        *(_DWORD *)(v38 + 772) = v111 + v12 + v18 + v19 + v111;
        unsigned int inited = BET3FLT__InitPStreamParam(v117, 0);
        if ((inited & 0x80000000) != 0) {
          goto LABEL_96;
        }
        uint64_t v39 = v20 + 1528 * v116;
        int v42 = *(_DWORD *)(v39 + 40);
        uint64_t v41 = (int *)(v39 + 40);
        int v40 = v42;
        uint64_t v16 = v116;
        if (v42 >= 1)
        {
          uint64_t v43 = 0;
          unsigned int v114 = (uint64_t *)(v107 + 86);
          int v112 = (int *)(v109 + 182);
          uint64_t v44 = v20 + 1528 * v116;
          uint64_t v45 = (_DWORD **)(v44 + 784);
          uint64_t v46 = (void *)(v44 + 824);
          int v47 = (void *)(v44 + 832);
          uint64_t v118 = v17 + v102 + v119;
          long long v105 = (void *)(v44 + 792);
          uint64_t v48 = 0;
          while (1)
          {
            if (*(_DWORD *)(*(void *)(v115[3] + 1528 * v116 + 1520) + 4 * v48) == 1)
            {
              uint64_t v49 = BET3FLT__InitPStreamParam(v114, (uint64_t)__b);
              if ((v49 & 0x80000000) != 0)
              {
                uint64_t v51 = v49;
                goto LABEL_98;
              }
              uint64_t v50 = BET3FLT__InitPStreamSM(v114, (uint64_t)v120);
              uint64_t v51 = v50;
              if ((v50 & 0x80000000) != 0) {
                goto LABEL_98;
              }
              unsigned int inited = v50;
              uint64_t v113 = v48;
              if ((int)v111 < 1)
              {
                LODWORD(v52) = 0;
              }
              else
              {
                uint64_t v52 = 0;
                uint64_t v53 = *v112 & ~(*v112 >> 31);
                do
                {
                  if (v52 == v53) {
                    break;
                  }
                  uint64_t v54 = **v45;
                  if ((int)v54 >= 1)
                  {
                    int v55 = *(_DWORD **)(*v46 + 8 * v52);
                    uint64_t v56 = *(_DWORD **)(*v47 + 8 * v52);
                    do
                    {
                      *v55++ = 0;
                      *v56++ = 1065353216;
                      --v54;
                    }
                    while (v54);
                  }
                  ++v52;
                }
                while (v52 != v111);
              }
              LODWORD(v12) = v52;
              if ((int)v118 >= 1)
              {
                uint64_t v57 = 0;
                uint64_t v58 = v115[75];
                int v59 = *((_DWORD *)v115 + 153);
                int v60 = *v106;
                uint64_t v61 = (*v106 + 2);
                LODWORD(v12) = v52;
                do
                {
                  int v62 = v57 - v119 + v59;
                  if (v60 >= 1)
                  {
                    uint64_t v63 = v58 + 528 * v62;
                    uint64_t v64 = *(void *)(v63 + 16);
                    uint64_t v65 = v63 + 8 * v116;
                    uint64_t v66 = (void *)(v65 + 152);
                    unint64_t v67 = (void *)(v65 + 232);
                    uint64_t v68 = 2;
                    do
                    {
                      int v69 = *(_DWORD *)(v64 + 4 * v68);
                      if (v69 >= 1)
                      {
                        uint64_t v70 = **v45;
                        uint64_t v12 = (int)v12;
                        int v71 = 1;
                        do
                        {
                          if ((int)v70 >= 1)
                          {
                            uint64_t v72 = *(void *)(*v66 + 8 * v68);
                            int v73 = *(_DWORD **)(*v46 + 8 * v12);
                            uint64_t v74 = *(void *)(*v67 + 8 * v68);
                            uint64_t v75 = *(_DWORD **)(*v47 + 8 * v12);
                            uint64_t v76 = 4 * *v41;
                            uint64_t v77 = v70;
                            uint64_t v78 = v43;
                            do
                            {
                              *v73++ = *(_DWORD *)(v72 + v78);
                              *v75++ = *(_DWORD *)(v74 + v78);
                              v78 += v76;
                              --v77;
                            }
                            while (v77);
                          }
                          ++v12;
                        }
                        while (v71++ != v69);
                      }
                      ++v68;
                    }
                    while (v68 != v61);
                  }
                  ++v57;
                }
                while (v57 != v118);
                uint64_t v108 = v58 + 528 * v62;
              }
              if (*(_DWORD *)(v115[3] + 1528 * v116 + 1492)) {
                BOOL v80 = 0;
              }
              else {
                BOOL v80 = (int)v52 < (int)v12;
              }
              if (v80)
              {
                uint64_t v81 = v52;
                LODWORD(v52) = **v45;
                do
                {
                  if ((int)v52 >= 1)
                  {
                    uint64_t v82 = 0;
                    uint64_t v83 = *(void *)(*v47 + 8 * v81);
                    do
                    {
                      float v84 = BET3FLT__bet3_finv(*(float *)(v83 + 4 * v82));
                      uint64_t v83 = *(void *)(*v47 + 8 * v81);
                      *(float *)(v83 + 4 * v82++) = v84;
                      uint64_t v52 = (int)**v45;
                    }
                    while (v82 < v52);
                  }
                  ++v81;
                }
                while (v81 != v12);
              }
              int v85 = *v112;
              if ((int)v12 >= *v112)
              {
                uint64_t v91 = v116;
                uint64_t v48 = v113;
              }
              else
              {
                uint64_t v86 = **v45;
                uint64_t v87 = (int)v12;
                uint64_t v48 = v113;
                do
                {
                  if ((int)v86 >= 1)
                  {
                    uint64_t v88 = *(_DWORD **)(*v46 + 8 * v87);
                    uint64_t v89 = *(_DWORD **)(*v47 + 8 * v87);
                    uint64_t v90 = v86;
                    do
                    {
                      *v88++ = 0;
                      *v89++ = 1065353216;
                      --v90;
                    }
                    while (v90);
                  }
                  ++v87;
                }
                while (v87 != v85);
                LODWORD(v12) = v85;
                uint64_t v91 = v116;
              }
              (*(void (**)(uint64_t *, void))(*(void *)(v115[3] + 1528 * v91 + 1504) + 8 * v48))(v114, 0);
              uint64_t v92 = *v109;
              if ((int)v92 >= 1)
              {
                uint64_t v93 = *v107;
                uint64_t v94 = (int **)(*v105 + 8 * (v19 + (int)v111));
                do
                {
                  uint64_t v95 = *v94++;
                  int v96 = *v95;
                  uint64_t v97 = *v93++;
                  *(_DWORD *)(v97 + 4 * v48) = v96;
                  --v92;
                }
                while (v92);
              }
              BET3FLT__FreePStreamSM((uint64_t)v114);
              BET3FLT__FreePStreamParam(v114);
              int v40 = *v41;
            }
            ++v48;
            v43 += 4;
            if (v48 >= v40)
            {
              uint64_t v4 = v115;
              a2 = v106;
              unsigned int v11 = v102;
              uint64_t v16 = v116;
              goto LABEL_90;
            }
          }
        }
        unsigned int v11 = v102;
LABEL_90:
        uint64_t v17 = v104;
        uint64_t v7 = v108;
      }
      if (++v16 >= *((int *)v4 + 8)) {
        goto LABEL_94;
      }
    }
  }
  unsigned int inited = 0;
LABEL_94:
  signed int v98 = *((_DWORD *)v4 + 153) + v11;
  *((_DWORD *)v4 + 153) = v98;
  if (v98 >= *((_DWORD *)v4 + 152)) {
    *a3 = 1;
  }
LABEL_96:
  uint64_t v51 = inited;
LABEL_98:
  BET3FLT__FreePStreamParam(__b);
  BET3FLT__FreeSMatrices((uint64_t)v121);
  BET3FLT__FreeSMatrices((uint64_t)v120);
  return v51;
}

uint64_t BET3FLT__InitVData(int a1, char *__b, _DWORD *a3)
{
  cstdlib_memset(__b, 0, 0x430uLL);
  uint64_t result = BET3FLT__InitModelSet(a1, __b, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = BET3FLT__InitTreeSet(a1, __b + 464);
    if ((result & 0x80000000) == 0)
    {
      return BET3FLT__InitDWinSet(a1, __b + 672, (uint64_t)a3);
    }
  }
  return result;
}

void *BET3FLT__DeInitVData(void *a1, char *a2)
{
  BET3FLT__DeInitModelSet((uint64_t)a1, a2);
  BET3FLT__DeInitTreeSet(a1, a2 + 464);
  BET3FLT__DeInitDWinSet((void **)a1, a2 + 672);

  return cstdlib_memset(a2, 0, 0x430uLL);
}

uint64_t BET3FLT__LoadVData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a2 + 456) < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 464;
  uint64_t v8 = a2 + 672;
  uint64_t v9 = a3 + 2664;
  int v10 = (unsigned int *)(a3 + 2424);
  do
  {
    uint64_t ModelFile = BET3FLT__LoadModelFile(a1, (unsigned int *)a2, v6, v9);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = BET3FLT__LoadTreesFile(a1, v7, v6, v10, a3, v12, v13, v14);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = BET3FLT__LoadDWinFile(a1, v8, v6, (unsigned int *)(v9 + 1200));
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    ++v6;
    uint64_t v20 = *(int *)(a2 + 456);
    v9 += 120;
    v10 += 6;
  }
  while (v6 < v20);
  if ((int)v20 < 1) {
    return 0;
  }
  uint64_t v21 = 0;
  while (1)
  {
    if (!*(void *)(a2 + 8 * v21 + 568))
    {
      uint64_t v31 = 2229280775;
      uint64_t v33 = "%s tree is required\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55032;
      goto LABEL_37;
    }
    uint64_t v22 = a2 + 4 * v21;
    if (*(_DWORD *)(v22 + 336) && !*(void *)(a2 + 168))
    {
LABEL_38:
      uint64_t v31 = 2229280775;
      uint64_t v33 = "%s PDF is required\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55033;
      goto LABEL_37;
    }
    int v23 = *(_DWORD *)(v22 + 376);
    if (v23)
    {
      if (!*(void *)(a2 + 8 * v21 + 176)) {
        goto LABEL_38;
      }
      if (!*(_DWORD *)(a2 + 4 * v21 + 416))
      {
        char v24 = 1;
        goto LABEL_19;
      }
    }
    else if (!*(_DWORD *)(a2 + 4 * v21 + 416))
    {
      goto LABEL_31;
    }
    if (!*(void *)(a2 + 8 * v21 + 256)) {
      goto LABEL_38;
    }
    char v24 = 0;
LABEL_19:
    uint64_t v25 = *(unsigned int *)(a2 + 4 * v21 + 128);
    if ((int)v25 >= 1) {
      break;
    }
LABEL_26:
    if (v23) {
      char v30 = 0;
    }
    else {
      char v30 = v24;
    }
    if ((v30 & 1) == 0 && *(_DWORD *)(a2 + 4 * v21 + 4) % *(_DWORD *)(v8 + 40 * v21))
    {
      uint64_t v31 = 2229280775;
      uint64_t v33 = "The number of dynamic windows for %s is not correct %d %d\n";
      uint64_t v34 = a1;
      uint64_t v35 = 55035;
      goto LABEL_37;
    }
LABEL_31:
    uint64_t v31 = 0;
    if (++v21 == *(_DWORD *)(a2 + 456)) {
      return v31;
    }
  }
  uint64_t v26 = 0;
  uint64_t v27 = a2 + 8 * v21;
  uint64_t v28 = (void *)(v27 + 176);
  uint64_t v29 = (void *)(v27 + 256);
  while ((!v23 || *(void *)(*v28 + 8 * v26)) && ((v24 & 1) != 0 || *(void *)(*v29 + 8 * v26)))
  {
    if (v25 == ++v26) {
      goto LABEL_26;
    }
  }
  uint64_t v31 = 2229280775;
  uint64_t v33 = "%s PDF layer %d is required\n";
  uint64_t v34 = a1;
  uint64_t v35 = 55034;
LABEL_37:
  BET3FLT__log_select_Error(v34, v35, (uint64_t)v33, v15, v16, v17, v18, v19);
  return v31;
}

uint64_t BET3FLT__InitVStream(uint64_t a1, char *__b, _DWORD *a3)
{
  cstdlib_memset(__b, 0, 0x788uLL);
  *(void *)__b = a1;
  uint64_t v6 = a3[33];
  *((_DWORD *)__b + 8) = v6;
  uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), v6, 1528);
  *((void *)__b + 3) = v7;
  if (!v7) {
    return 2229280778;
  }
  if (*((int *)__b + 8) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = __b + 648;
    int v10 = a3 + 36;
    do
    {
      cstdlib_strcpy(v9, "");
      if (cstdlib_strlen(*(const char **)&v10[2 * v8])) {
        cstdlib_strcpy(v9, *(const char **)&v10[2 * v8]);
      }
      ++v8;
      uint64_t v11 = *((int *)__b + 8);
      v9 += 128;
    }
    while (v8 < v11);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)__b + 3);
      int v14 = a3[18];
      uint64_t v15 = 1528 * *((unsigned int *)__b + 8);
      do
      {
        uint64_t v16 = v13 + v12;
        *(_DWORD *)(v16 + 12) = a3[56];
        *(void *)(v16 + 24) = a1;
        *(void *)(v16 + 752) = a1;
        if (v12)
        {
          if (a3[536]) {
            *(_DWORD *)(v13 + v12 + 1488) = 1;
          }
          else {
            *(_DWORD *)(v13 + v12 + 1484) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v13 + 1480) = 1;
        }
        if (v14 == 1) {
          *(_DWORD *)(v13 + v12 + 1492) = 1;
        }
        ++a3;
        v12 += 1528;
      }
      while (v15 != v12);
    }
  }
  return 0;
}

uint64_t BET3FLT__LoadVStream(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*((int *)a1 + 8) < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 672;
  uint64_t v8 = a1[3];
  while (1)
  {
    uint64_t v9 = (_DWORD *)(v7 + 40 * v6);
    uint64_t v10 = v8 + 1528 * v6;
    *(void *)(v10 + 56) = v9;
    int v11 = *(_DWORD *)(v10 + 1484);
    if (v11) {
      *(void *)(v8 + 1528 * v6 + 784) = v9;
    }
    if (!*(_DWORD *)(v8 + 1528 * v6 + 1480)) {
      break;
    }
    if (v11) {
      goto LABEL_7;
    }
LABEL_8:
    if (++v6 >= *((int *)a1 + 8)) {
      return 0;
    }
  }
  uint64_t v13 = a2 + 4 * v6;
  uint64_t v14 = v8 + 1528 * v6;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v13 + 4);
  uint64_t v15 = (*(_DWORD *)(v13 + 4) / *v9);
  *(_DWORD *)(v14 + 40) = v15;
  *(void *)(v14 + 1496) = *(void *)(a3 + 92);
  uint64_t v16 = heap_Calloc(*(void **)(*a1 + 8), v15, 8);
  uint64_t v17 = a1[3];
  *(void *)(v17 + 1528 * v6 + 1504) = v16;
  if (!v16) {
    return 2229280778;
  }
  LODWORD(v17) = *(_DWORD *)(v17 + 1528 * v6 + 40);
  if ((int)v17 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      if (cstdlib_strcmp(*(const char **)(*(void *)(a3 + 8 * v6 + 2184) + 8 * v18), "MLPG2"))
      {
        uint64_t v31 = *a1;
        uint64_t v32 = "invalid solver for stream %d: %s\n";
        goto LABEL_28;
      }
      *(void *)(*(void *)(a1[3] + 1528 * v6 + 1504) + 8 * v18++) = BET3FLT__mlpg2;
      uint64_t v17 = *(int *)(a1[3] + 1528 * v6 + 40);
    }
    while (v18 < v17);
  }
  uint64_t v24 = heap_Calloc(*(void **)(*a1 + 8), v17, 4);
  uint64_t v25 = a1[3];
  *(void *)(v25 + 1528 * v6 + 1520) = v24;
  if (!v24) {
    return 2229280778;
  }
  if (*(int *)(v25 + 1528 * v6 + 40) < 1)
  {
LABEL_23:
    BET3FLT__log_select_Diag(*a1, 1, (uint64_t)"%s: vSize = %d, order = %d, nLayer = %d\n");
    uint64_t v8 = a1[3];
    if (!*(_DWORD *)(v8 + 1528 * v6 + 1484)) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v12 = v8 + 1528 * v6;
    *(_DWORD *)(v12 + 764) = *(_DWORD *)(a2 + 4 * v6 + 4);
    *(_DWORD *)(v12 + 768) = 1;
    goto LABEL_8;
  }
  uint64_t v26 = 0;
  uint64_t v27 = (void *)(a3 + 8 * v6 + 2344);
  while (1)
  {
    if (!cstdlib_strcmp(*(const char **)(*v27 + 8 * v26), "OFF"))
    {
      int v28 = 0;
      goto LABEL_22;
    }
    if (cstdlib_strcmp(*(const char **)(*v27 + 8 * v26), "ON")) {
      break;
    }
    int v28 = 1;
LABEL_22:
    uint64_t v29 = a1[3] + 1528 * v6;
    *(_DWORD *)(*(void *)(v29 + 1520) + 4 * v26++) = v28;
    if (v26 >= *(int *)(v29 + 40)) {
      goto LABEL_23;
    }
  }
  uint64_t v31 = *a1;
  uint64_t v32 = "valid breaker setting is required for stream %d\n";
LABEL_28:
  BET3FLT__log_select_Error(v31, 55036, (uint64_t)v32, v19, v20, v21, v22, v23);
  return 2229280775;
}

void *BET3FLT__DeInitVStream(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result)
    {
      if (*((int *)result + 8) >= 1)
      {
        uint64_t v2 = 0;
        uint64_t v3 = result[3];
        uint64_t v4 = 1520;
        do
        {
          if (!v3) {
            break;
          }
          BET3FLT__FreePStreamSM(v3 + v4 - 1496);
          BET3FLT__FreePStreamParam((void *)(v1[3] + v4 - 1496));
          BET3FLT__FreePStreamSM(v1[3] + v4 - 768);
          BET3FLT__FreePStreamParam((void *)(v1[3] + v4 - 768));
          uint64_t v3 = v1[3];
          uint64_t v5 = *(void *)(v3 + v4 - 16);
          if (v5)
          {
            heap_Free(*(void **)(*v1 + 8), v5);
            uint64_t v3 = v1[3];
            *(void *)(v3 + v4 - 16) = 0;
          }
          uint64_t v6 = *(void *)(v3 + v4);
          if (v6)
          {
            heap_Free(*(void **)(*v1 + 8), v6);
            uint64_t v3 = v1[3];
            *(void *)(v3 + v4) = 0;
          }
          ++v2;
          v4 += 1528;
        }
        while (v2 < *((int *)v1 + 8));
      }
      uint64_t v7 = v1[6];
      if (v7)
      {
        heap_Free(*(void **)(*v1 + 8), v7);
        v1[6] = 0;
      }
      uint64_t v8 = v1[5];
      if (v8)
      {
        heap_Free(*(void **)(*v1 + 8), v8);
        v1[5] = 0;
      }
      uint64_t v9 = v1[3];
      if (v9)
      {
        heap_Free(*(void **)(*v1 + 8), v9);
        v1[3] = 0;
      }
      BET3FLT__DeInitUttModel(v1 + 7);
      return cstdlib_memset(v1, 0, 0x788uLL);
    }
  }
  return result;
}

void *BET3FLT__InitVParam(_DWORD *a1)
{
  uint64_t result = cstdlib_memset(a1, 0, 0x1F30uLL);
  a1[32] = 1;
  return result;
}

void *BET3FLT__DeInitVParam(uint64_t a1, void *__b)
{
  if (__b[954])
  {
    for (uint64_t i = 0; i != 20; ++i)
    {
      if (*(void *)(__b[954] + 8 * i))
      {
        for (uint64_t j = 0; j != 800; j += 8)
        {
          uint64_t v6 = *(void *)(*(void *)(__b[954] + 8 * i) + j);
          if (v6)
          {
            heap_Free(*(void **)(a1 + 8), v6);
            *(void *)(*(void *)(__b[954] + 8 * i) + j) = 0;
          }
        }
        uint64_t v7 = *(void *)(__b[954] + 8 * i);
        if (v7)
        {
          heap_Free(*(void **)(a1 + 8), v7);
          *(void *)(__b[954] + 8 * i) = 0;
        }
      }
      uint64_t v8 = *(void *)(__b[955] + 8 * i);
      if (v8)
      {
        heap_Free(*(void **)(a1 + 8), v8);
        *(void *)(__b[955] + 8 * i) = 0;
      }
      uint64_t v9 = *(void *)(__b[953] + 8 * i);
      if (v9)
      {
        heap_Free(*(void **)(a1 + 8), v9);
        *(void *)(__b[953] + 8 * i) = 0;
      }
    }
    uint64_t v10 = __b[954];
    if (v10)
    {
      heap_Free(*(void **)(a1 + 8), v10);
      __b[954] = 0;
    }
    uint64_t v11 = __b[955];
    if (v11)
    {
      heap_Free(*(void **)(a1 + 8), v11);
      __b[955] = 0;
    }
    uint64_t v12 = __b[953];
    if (v12)
    {
      heap_Free(*(void **)(a1 + 8), v12);
      __b[953] = 0;
    }
  }
  uint64_t v13 = __b[10];
  if (v13)
  {
    heap_Free(*(void **)(a1 + 8), v13);
    __b[10] = 0;
  }
  uint64_t v14 = __b[15];
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    __b[15] = 0;
  }
  uint64_t v15 = __b[956];
  if (v15)
  {
    heap_Free(*(void **)(a1 + 8), v15);
    __b[956] = 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = __b;
  do
  {
    uint64_t v18 = (char *)&__b[v16];
    uint64_t v19 = *((void *)v18 + 18);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      *((void *)v18 + 18) = 0;
    }
    uint64_t v20 = *((void *)v18 + 53);
    if (v20)
    {
      heap_Free(*(void **)(a1 + 8), v20);
      *((void *)v18 + 53) = 0;
    }
    for (uint64_t k = 0; k != 5; ++k)
    {
      uint64_t v22 = &v17[k];
      uint64_t v23 = v17[k + 63];
      if (v23)
      {
        heap_Free(*(void **)(a1 + 8), v23);
        v22[63] = 0;
      }
      uint64_t v24 = v22[163];
      if (v24)
      {
        heap_Free(*(void **)(a1 + 8), v24);
        v22[163] = 0;
      }
    }
    for (uint64_t m = 213; m != 218; ++m)
    {
      uint64_t v26 = v17[m];
      if (v26)
      {
        heap_Free(*(void **)(a1 + 8), v26);
        v17[m] = 0;
      }
    }
    uint64_t v27 = (char *)__b + 4 * v16;
    if (*((_DWORD *)v27 + 66))
    {
      unint64_t v28 = 0;
      uint64_t v29 = (unsigned int *)(v27 + 264);
      char v30 = (char *)&__b[v16];
      uint64_t v31 = v30 + 2344;
      uint64_t v32 = v30 + 2184;
      uint64_t v33 = v30 + 2264;
      do
      {
        if (*v31)
        {
          uint64_t v34 = *(void *)(*v31 + 8 * v28);
          if (v34)
          {
            heap_Free(*(void **)(a1 + 8), v34);
            *(void *)(*v31 + 8 * v28) = 0;
          }
        }
        if (*v32)
        {
          uint64_t v35 = *(void *)(*v32 + 8 * v28);
          if (v35)
          {
            heap_Free(*(void **)(a1 + 8), v35);
            *(void *)(*v32 + 8 * v28) = 0;
          }
        }
        if (*v33)
        {
          uint64_t v36 = *(void *)(*v33 + 8 * v28);
          if (v36)
          {
            heap_Free(*(void **)(a1 + 8), v36);
            *(void *)(*v33 + 8 * v28) = 0;
          }
        }
        ++v28;
      }
      while (v28 < *v29);
    }
    int v37 = (char *)&__b[v16];
    uint64_t v38 = *((void *)v37 + 293);
    if (v38)
    {
      heap_Free(*(void **)(a1 + 8), v38);
      *((void *)v37 + 293) = 0;
    }
    uint64_t v39 = *((void *)v37 + 273);
    if (v39)
    {
      heap_Free(*(void **)(a1 + 8), v39);
      *((void *)v37 + 273) = 0;
    }
    int v40 = (char *)&__b[v16];
    uint64_t v41 = *((void *)v40 + 283);
    if (v41)
    {
      int v42 = v40 + 2264;
      heap_Free(*(void **)(a1 + 8), v41);
      *int v42 = 0;
    }
    ++v16;
    v17 += 5;
  }
  while (v16 != 10);
  for (uint64_t n = 663; n != 919; ++n)
  {
    uint64_t v44 = __b[n];
    if (v44)
    {
      heap_Free(*(void **)(a1 + 8), v44);
      __b[n] = 0;
    }
  }
  if (__b[952])
  {
    for (iuint64_t i = 0; ii != 2048; ii += 8)
    {
      uint64_t v46 = *(void *)(__b[952] + ii);
      if (v46)
      {
        heap_Free(*(void **)(a1 + 8), v46);
        *(void *)(__b[952] + ii) = 0;
      }
    }
    heap_Free(*(void **)(a1 + 8), __b[952]);
  }

  return cstdlib_memset(__b, 0, 0x1F30uLL);
}

uint64_t synth_float_bet3_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2164269057;
  }
  uint64_t result = 0;
  *a2 = &ISynth_Bet3;
  return result;
}

uint64_t synth_bet3_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object = 2164269063;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  unsigned int v40 = 0;
  __s1 = 0;
  long long v37 = xmmword_26D2149F0;
  uint64_t v38 = off_26D214A00;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, &v42);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    log_OutText(*(void *)(v42 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjOpen", v10, v11, v12, v34);
    uint64_t v13 = (void *)heap_Calloc(*(void **)(v42 + 8), 1, 1904);
    if (v13)
    {
      uint64_t v18 = (uint64_t)v13;
      *uint64_t v13 = a3;
      v13[1] = a4;
      uint64_t v19 = v42;
      v13[2] = v42;
      Listeuint64_t n = critsec_ObjOpen(*(void *)(v19 + 16), *(void **)(v19 + 8), v13 + 3);
      if ((Listen & 0x80000000) != 0) {
        goto LABEL_21;
      }
      *(void *)&long long v37 = v18;
      Listeuint64_t n = synth_bet3_loc_ParamGetListen(v18, "volume", 0, 100, 0x50u, &v37, &v40);
      if ((Listen & 0x80000000) != 0) {
        goto LABEL_21;
      }
      Listeuint64_t n = synth_bet3_loc_ParamGetListen(v18, "rate", 50, 400, 0x64u, &v37, &v40);
      if ((Listen & 0x80000000) != 0) {
        goto LABEL_21;
      }
      Listeuint64_t n = synth_bet3_loc_ParamGetListen(v18, "pitch", 50, 200, 0x64u, &v37, &v40);
      if ((Listen & 0x80000000) != 0) {
        goto LABEL_21;
      }
      Listeuint64_t n = synth_bet3_loc_ParamGetListen(v18, "rate_baseline", 50, 400, 0x64u, &v37, &v40);
      if ((Listen & 0x80000000) != 0) {
        goto LABEL_21;
      }
      Listeuint64_t n = synth_bet3_loc_ParamGetListen(v18, "pitch_baseline", 50, 200, 0x64u, &v37, &v40);
      if ((Listen & 0x80000000) != 0) {
        goto LABEL_21;
      }
      Listeuint64_t n = synth_bet3_loc_ParamGetListen(v18, "audiooutputbufsamples", 1, 0x7FFFFFFF, 0x100u, &v37, &v40);
      if ((Listen & 0x80000000) != 0) {
        goto LABEL_21;
      }
      *(_DWORD *)(v18 + 40) = v40;
      if ((paramc_ParamGetStr(*(void *)(v42 + 40), (uint64_t)"synth_type", &__s1) & 0x80000000) == 0)
      {
        if (cstdlib_strcmp(__s1, "mlsa") && cstdlib_strcmp(__s1, "mfs"))
        {
          log_OutText(*(void *)(v42 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Unknown synthesizer: %s", v21, v22, v23, (uint64_t)__s1);
          return 7;
        }
        log_OutText(*(void *)(v42 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MLSA synthesizer", v21, v22, v23, v35);
      }
      *(_DWORD *)(v18 + 1896) = 0;
      Listeuint64_t n = synth_bet3_loc_SynthInit_MLSA(v18);
      if ((Listen & 0x80000000) != 0)
      {
LABEL_21:
        uint64_t Object = Listen;
      }
      else
      {
        uint64_t Object = objc_GetObject(*(void *)(v42 + 48), (uint64_t)"SYNTHSTREAM", &v41);
        if ((Object & 0x80000000) == 0)
        {
          *(void *)(v18 + 32) = *(void *)(v41 + 8);
          *(void *)a5 = v18;
          *(_DWORD *)(a5 + 8) = 9346;
          goto LABEL_23;
        }
        log_OutPublic(*(void *)(*(void *)(v18 + 16) + 32), (uint64_t)"SYNTH_BET3", 56001, 0, v27, v24, v25, v26, v35);
      }
      *(void *)a5 = v18;
      *(_DWORD *)(a5 + 8) = 9346;
      synth_bet3_ObjClose(v18, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      goto LABEL_23;
    }
    log_OutPublic(*(void *)(v42 + 32), (uint64_t)"SYNTH_BET3", 56000, 0, v14, v15, v16, v17, v35);
    uint64_t Object = 2164269066;
LABEL_23:
    log_OutText(*(void *)(v42 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjOpen: %x", v24, v25, v26, Object);
    log_OutEvent(*(uint64_t ***)(v42 + 32), 22, (uint64_t)"", v28, v29, v30, v31, v32, v36);
  }
  return Object;
}

uint64_t synth_bet3_ObjClose(uint64_t a1, int a2)
{
  int v3 = safeh_HandleCheck(a1, a2, 9346, 1904);
  if (v3 < 0) {
    return 2164269064;
  }
  LODWORD(v7) = v3;
  uint64_t v8 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjClose", v4, v5, v6, v35);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v37 = a1;
  long long v36 = *(long long *)((char *)&xmmword_26D2149F0 + 8);
  long long v38 = *(long long *)((char *)&xmmword_26D2149F0 + 8);
  int v10 = paramc_ListenerRemove(v9, "volume", (long long *)&v37);
  uint64_t v11 = *(void *)(v8 + 40);
  if (v10 < 0) {
    LODWORD(v7) = v10;
  }
  uint64_t v37 = a1;
  long long v38 = v36;
  int v12 = paramc_ListenerRemove(v11, "rate", (long long *)&v37);
  uint64_t v13 = *(void *)(v8 + 40);
  if (v12 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v12;
  }
  uint64_t v37 = a1;
  long long v38 = v36;
  int v15 = paramc_ListenerRemove(v13, "pitch", (long long *)&v37);
  uint64_t v16 = *(void *)(v8 + 40);
  if (v15 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v15;
  }
  uint64_t v37 = a1;
  long long v38 = v36;
  int v18 = paramc_ListenerRemove(v16, "rate_baseline", (long long *)&v37);
  uint64_t v19 = *(void *)(v8 + 40);
  if (v18 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v18;
  }
  uint64_t v37 = a1;
  long long v38 = v36;
  int v21 = paramc_ListenerRemove(v19, "pitch_baseline", (long long *)&v37);
  uint64_t v22 = *(void *)(v8 + 40);
  if (v21 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v21;
  }
  uint64_t v37 = a1;
  long long v38 = v36;
  int v24 = paramc_ListenerRemove(v22, "audiooutputbufsamples", (long long *)&v37);
  if (v24 >= 0 || (int)v7 <= -1) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = v24;
  }
  if (*(void *)(a1 + 32))
  {
    int v26 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if (v26 >= 0 || (int)v7 <= -1) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v26;
    }
  }
  if (!*(_DWORD *)(a1 + 1896)) {
    MFVSyn__deinit__MVF_Synthesis((void *)(a1 + 72));
  }
  uint64_t v28 = *(void *)(a1 + 24);
  if (v28)
  {
    int v29 = critsec_ObjClose(v28);
    if ((int)v7 > -1 && v29 < 0) {
      uint64_t v7 = v29;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  heap_Free(*(void **)(v8 + 8), a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjClose: %x", v31, v32, v33, v7);
  return v7;
}

uint64_t synth_bet3_ObjReopen(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 9346, 1904) & 0x80000000) != 0) {
    return 2164269064;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjReopen", v3, v4, v5, v12);
  uint64_t inited = synth_bet3_loc_SynthInit_MLSA(a1);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjReopen: %x", v8, v9, v10, inited);
  return inited;
}

uint64_t synth_bet3_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if ((safeh_HandleCheck(a1, a2, 9346, 1904) & 0x80000000) != 0) {
    return 2164269064;
  }
  cstdlib_strcpy(__dst, "audio/L16;rate=");
  unsigned int v8 = *(_DWORD *)(a1 + 48);
  size_t v9 = cstdlib_strlen(__dst);
  LH_itoa(v8, &__dst[v9], 0xAu);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-bet3-speech-frames;version=5.0",
          0,
          0,
          a1 + 1792);
  if ((v10 & 0x80000000) != 0
    || (uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 32) + 64))(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0",
                0,
                0,
                a1 + 1808),
        (v10 & 0x80000000) != 0))
  {
    uint64_t v23 = v10;
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56002, (uint64_t)"%s%s", v11, v12, v13, v14, "contentType");
LABEL_12:
    *(_DWORD *)(a1 + 1856) = 0;
LABEL_13:
    synth_bet3_ProcessEnd((void *)a1, a2);
    return v23;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, uint64_t, uint64_t))(*(void *)(a1 + 32)
                                                                                               + 64))(a3, a4, 16, __dst, 0, 1, a1 + 1824);
  if ((v15 & 0x80000000) != 0)
  {
    uint64_t v23 = v15;
    goto LABEL_11;
  }
  uint64_t v20 = *(void *)(a1 + 32);
  int v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t))(v20 + 64);
  uint64_t v22 = (*(uint64_t (**)(void))(v20 + 152))();
  uint64_t v23 = v21(a3, a4, 16, "application/x-realspeak-markers-pp;version=4.0", v22, 1, a1 + 1840);
  if ((v23 & 0x80000000) != 0)
  {
LABEL_11:
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56003, (uint64_t)"%s%s", v16, v17, v18, v19, "contentType");
    goto LABEL_12;
  }
  if (!*(_DWORD *)(a1 + 1896))
  {
    uint64_t v23 = BET3FLT__MFVSyn__reset__MVF_Synthesis(a1 + 72);
    *(_DWORD *)(a1 + 1856) = 0;
    if ((v23 & 0x80000000) == 0) {
      return v23;
    }
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 1856) = 0;
  return v23;
}

uint64_t synth_bet3_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v152 = *MEMORY[0x263EF8340];
  int v8 = -2130698234;
  int v9 = safeh_HandleCheck(a1, a2, 9346, 1904);
  if (v9 < 0) {
    return 2164269064;
  }
  uint64_t v10 = 1;
  if (v9 || !a1) {
    return v10;
  }
  __uint64_t n = 0;
  int v149 = 0;
  __src = 0;
  int v148 = 0;
  uint64_t v145 = 0;
  __dst = 0;
  if ((safeh_HandleCheck(a1, a2, 9346, 1904) & 0x80000000) != 0) {
    return 2164269064;
  }
  *a5 = 1;
  unsigned int v11 = *(_DWORD *)(a1 + 40);
  unsigned int v12 = *(_DWORD *)(a1 + 44);
  if (v11 >= v12)
  {
    if (v12) {
      v12 *= v11 / v12;
    }
    else {
      unsigned int v12 = *(_DWORD *)(a1 + 40);
    }
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, char *, int *))(*(void *)(a1 + 32) + 144))(*(void *)(a1 + 1792), *(void *)(a1 + 1800), (char *)&__n + 4, &v149);
  if ((v10 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56004, (uint64_t)"%s%x", v14, v15, v16, v17, "lhError");
    return v10;
  }
  if (HIDWORD(__n))
  {
    uint64_t v18 = (*(uint64_t (**)(void, void, uint64_t **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 1792), *(void *)(a1 + 1800), &v148, (char *)&__n + 4);
    if ((v18 & 0x80000000) != 0)
    {
      uint64_t v10 = v18;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, (uint64_t)"%s%s%s%x", v19, v20, v21, v22, "contentType");
      return v10;
    }
    uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 1808), *(void *)(a1 + 1816), &__src, &__n);
    if ((v10 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, (uint64_t)"%s%s%s%x", v23, v24, v25, v26, "contentType");
      return v10;
    }
    if (HIDWORD(__n) >= 8)
    {
      uint64_t v27 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1824), *(void *)(a1 + 1832), &v145, 2 * v12);
      if ((v27 & 0x80000000) != 0)
      {
        uint64_t v10 = v27;
        uint64_t v116 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_184:
        log_OutPublic(v116, (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v28, v29, v30, v31, "stream");
        return v10;
      }
      if (!__n
        || (uint64_t v32 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1840), *(void *)(a1 + 1848), &__dst), (v32 & 0x80000000) == 0))
      {
        uint64_t v10 = critsec_Enter(*(void **)(a1 + 24));
        if ((v10 & 0x80000000) != 0) {
          return v10;
        }
        uint64_t v33 = *v148;
        uint64_t __b = 0;
        unsigned int v143 = 0;
        uint64_t v139 = *(void *)(v33 + 40);
        uint64_t v140 = *(void *)(v33 + 48);
        if (__n && __src && __dst)
        {
          cstdlib_memcpy(__dst, __src, __n);
          LODWORD(__n) = __n >> 5;
        }
        uint64_t v34 = *(unsigned int *)(v33 + 32);
        if ((int)v34 < 1) {
          goto LABEL_201;
        }
        uint64_t v35 = 0;
        long long v36 = 0;
        uint64_t v37 = 0;
        long long v38 = *(int **)(v33 + 24);
        do
        {
          int v39 = v38[3];
          if (v39 == 1) {
            unsigned int v40 = v38;
          }
          else {
            unsigned int v40 = v37;
          }
          if (v39 == 2)
          {
            unsigned int v40 = v37;
            uint64_t v41 = v38;
          }
          else
          {
            uint64_t v41 = v36;
          }
          if (v39 == 3) {
            uint64_t v35 = v38;
          }
          v38 += 382;
          if (v39 != 3)
          {
            uint64_t v37 = v40;
            long long v36 = v41;
          }
          --v34;
        }
        while (v34);
        if (!v37 || !v36) {
          goto LABEL_201;
        }
        uint64_t v42 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v37[11], 1);
        if (!v42)
        {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56000, 0, v43, v44, v45, v46, v137);
          int v8 = -2130698230;
          goto LABEL_201;
        }
        uint64_t v47 = v42;
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        LODWORD(i) = 0;
        uint64_t v138 = v42;
        int v49 = *(_DWORD *)(a1 + 1856);
        int v8 = v10;
        while (1)
        {
          if (v49 >= v37[11] || *(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 44) + HIDWORD(v141) > v12)
          {
LABEL_149:
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v47);
            if (HIDWORD(v141)
              && (v8 & 0x80000000) == 0
              && (int v8 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1824), *(void *)(a1 + 1832), (2 * HIDWORD(v141))), v8 < 0))
            {
              uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_198:
              log_OutPublic(v105, (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v101, v102, v103, v104, "stream");
            }
            else if (v8 < 0 || !i)
            {
              if ((v8 & 0x80000000) == 0) {
                goto LABEL_188;
              }
            }
            else
            {
              int v8 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1840), *(void *)(a1 + 1848), (32 * i));
              if (v8 < 0)
              {
                uint64_t v105 = *(void *)(*(void *)(a1 + 16) + 32);
                goto LABEL_198;
              }
LABEL_188:
              if (*(_DWORD *)(a1 + 1856) < v37[11])
              {
                int v129 = 2;
                goto LABEL_194;
              }
              int v8 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 1792), *(void *)(a1 + 1800), 8);
              if (v8 < 0)
              {
                uint64_t v134 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_200:
                log_OutPublic(v134, (uint64_t)"SYNTH_BET3", 56006, (uint64_t)"%s%s%s%x", v130, v131, v132, v133, "contentType");
              }
              else
              {
                *(_DWORD *)(a1 + 1856) = 0;
                if (HIDWORD(__n) <= 8) {
                  int v129 = 1;
                }
                else {
                  int v129 = 2;
                }
LABEL_194:
                *a5 = v129;
                if (i)
                {
                  int v8 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 1808), *(void *)(a1 + 1816), (32 * i));
                  if (v8 < 0)
                  {
                    uint64_t v134 = *(void *)(*(void *)(a1 + 16) + 32);
                    goto LABEL_200;
                  }
                }
              }
            }
LABEL_201:
            int v135 = critsec_Leave(*(void **)(a1 + 24));
            if (v135 >= 0 || v8 <= -1) {
              return v8;
            }
            else {
              return v135;
            }
          }
          uint64_t v50 = __dst;
          if (__dst) {
            BOOL v51 = i >= __n;
          }
          else {
            BOOL v51 = 1;
          }
          if (!v51)
          {
            for (unint64_t i = i; v50 && i < __n; ++i)
            {
              unsigned int v52 = v50[8 * i + 3];
              int v53 = *(_DWORD *)(a1 + 52);
              if (v52 > *(_DWORD *)(a1 + 1860))
              {
                if (v53) {
                  break;
                }
LABEL_57:
                int v58 = v50[3];
                unsigned int v59 = v52 - v58;
                int v60 = v50[8 * i];
                if (v60 == 8 || v60 == 26)
                {
                  if (v59 < v37[11])
                  {
                    *(unsigned char *)(v47 + v59) = 1;
                    uint64_t v50 = __dst;
                  }
                }
                else if (v60 == 33)
                {
                  int v62 = v50[8 * v142 + 3] - v58;
                  if (v50[8 * i + 6] == 35)
                  {
                    if ((v52 == v58 || v59 < v37[11] && *(unsigned char *)(v47 + v59) || v50[8 * v142 + 4] + v62 == v59)
                      && v50[8 * i + 4])
                    {
                      unint64_t v63 = 0;
                      do
                      {
                        if (v59 + v63 < v37[11])
                        {
                          *(unsigned char *)(v47 + v59 + v63) = 2;
                          uint64_t v50 = __dst;
                        }
                        ++v63;
                      }
                      while (v63 < v50[8 * i + 4]);
                    }
                    uint64_t v142 = i;
                  }
                  else if (v59 < v37[11] && !*(unsigned char *)(v47 + v59))
                  {
                    int v64 = v50[8 * v142 + 4];
                    if (v64)
                    {
                      if (v64 + v62 == v59)
                      {
                        unint64_t v65 = 0;
                        do
                        {
                          if (v62 + (int)v65 < v37[11])
                          {
                            *(unsigned char *)(v47 + (v62 + v65)) = 0;
                            uint64_t v50 = __dst;
                          }
                          ++v65;
                        }
                        while (v65 < v50[8 * v142 + 4]);
                      }
                    }
                  }
                }
                continue;
              }
              if (!v53) {
                goto LABEL_57;
              }
              if (!i) {
                LODWORD(v141) = v50[3];
              }
              HIDWORD(v54) = 0;
              *(void *)(a1 + 1880) = 0;
              switch(v50[8 * i])
              {
                case 0x10:
                  critsec_Leave(*(void **)(a1 + 24));
                  uint64_t v55 = *(void *)(*(void *)(a1 + 16) + 40);
                  unsigned int v56 = *((_DWORD *)__dst + 8 * i + 6);
                  uint64_t v57 = "pitch";
                  goto LABEL_88;
                case 0x11:
                  critsec_Leave(*(void **)(a1 + 24));
                  uint64_t v55 = *(void *)(*(void *)(a1 + 16) + 40);
                  unsigned int v56 = *((_DWORD *)__dst + 8 * i + 6);
                  uint64_t v57 = "timbre";
                  goto LABEL_88;
                case 0x12:
                  critsec_Leave(*(void **)(a1 + 24));
                  uint64_t v55 = *(void *)(*(void *)(a1 + 16) + 40);
                  unsigned int v56 = *((_DWORD *)__dst + 8 * i + 6);
                  uint64_t v57 = "rate";
                  goto LABEL_88;
                case 0x18:
                  critsec_Leave(*(void **)(a1 + 24));
                  uint64_t v55 = *(void *)(*(void *)(a1 + 16) + 40);
                  unsigned int v56 = *((_DWORD *)__dst + 8 * i + 6);
                  uint64_t v57 = "volume";
LABEL_88:
                  paramc_ParamSetUInt(v55, (uint64_t)v57, v56);
                  critsec_Enter(*(void **)(a1 + 24));
                  break;
                default:
                  break;
              }
              uint64_t v50 = __dst;
              *((_DWORD *)__dst + 8 * i + 3) = *(_DWORD *)(a1 + 1864);
              if (i + 1 >= __n)
              {
                unsigned int v66 = *(_DWORD *)(a1 + 44);
              }
              else
              {
                unsigned int v66 = *(_DWORD *)(a1 + 44);
                if (v50[8 * i + 8] == 8)
                {
                  *(_DWORD *)(a1 + 1880) = v52 - v141;
                  unint64_t v67 = (char *)&v50[8 * i];
                  unsigned int v68 = *((_DWORD *)v67 + 4);
                  *(_DWORD *)(a1 + 1884) = v68 + v52 - v141;
                  *((_DWORD *)v67 + 4) = ((double)v68 * (double)v66 + 0.5);
                  continue;
                }
              }
              int v69 = (char *)&v50[8 * i];
              LODWORD(v54) = *((_DWORD *)v69 + 4);
              *((_DWORD *)v69 + 4) = ((double)v54 * ceil((double)v66 * *(float *)(a1 + 132)) + 0.5);
            }
          }
          float v70 = 0.0;
          float v71 = 0.0;
          if ((*(unsigned char *)(v140 + *v37) & 4) != 0)
          {
            float v72 = *(float *)(a1 + 64);
            uint64_t v73 = *v36;
            float v74 = exp(**(float **)(*((void *)v36 + 8) + 8 * v73));
            float v71 = *(float *)(a1 + 68) + (float)(v72 * v74);
            *long long v36 = v73 + 1;
          }
          if (v35 && ((1 << v35[3]) & (unint64_t)*(unsigned __int8 *)(v140 + *v37)) >> v35[3])
          {
            uint64_t v75 = *v35;
            float v70 = exp(**(float **)(*((void *)v35 + 8) + 8 * v75));
            *uint64_t v35 = v75 + 1;
          }
          uint64_t v76 = *(unsigned int *)(a1 + 272);
          if ((v76 & 0x80000000) == 0)
          {
            uint64_t v77 = *(int **)(*((void *)v37 + 8) + 8 * *(int *)(a1 + 1856));
            uint64_t v78 = v76 + 1;
            uint64_t v79 = v151;
            uint64_t v80 = v78;
            do
            {
              int v81 = *v77++;
              *v79++ = v81;
              --v80;
            }
            while (v80);
            uint64_t v82 = *(float **)(a1 + 1872);
            if (v82)
            {
              uint64_t v83 = (float *)v151;
              do
              {
                float v84 = *v82++;
                *uint64_t v83 = *v83 + v84;
                ++v83;
                --v78;
              }
              while (v78);
            }
          }
          cstdlib_memset(&__b, 0, 8uLL);
          int v85 = *(_DWORD *)(a1 + 52);
          int v49 = *(_DWORD *)(a1 + 1856);
          if (!v85
            && (**(float **)(*((void *)v37 + 8) + 8 * v49) == 0.0 || v49 >= v37[11] || *(unsigned char *)(v47 + v49) == 2))
          {
            unsigned int v143 = vcvtps_u32_f32(*(float *)(a1 + 132) * (float)*(int *)(a1 + 552));
          }
          else
          {
            int v86 = *(_DWORD *)(a1 + 132);
            unsigned int v87 = *(_DWORD *)(a1 + 1880);
            if (v87 <= v49 && *(_DWORD *)(a1 + 1884) > v49) {
              *(_DWORD *)(a1 + 132) = 1065353216;
            }
            if (v85 || !v49 || !*(_DWORD *)(a1 + 56))
            {
              int v8 = BET3FLT__MFVSyn__SynthesisOneFrame(a1 + 72, v151, (int *)&v143, &__b, v71, 0.0, *(float *)(v139 + 4 * *v37), v70);
              unsigned int v87 = *(_DWORD *)(a1 + 1880);
              int v49 = *(_DWORD *)(a1 + 1856);
            }
            if (v87 <= v49 && *(_DWORD *)(a1 + 1884) > v49) {
              *(_DWORD *)(a1 + 132) = v86;
            }
          }
          BOOL v88 = 0;
          if ((v8 & 0x80000000) == 0)
          {
            unsigned int v89 = v143;
            if (v143) {
              break;
            }
          }
LABEL_147:
          if (v88 || v8 < 0) {
            goto LABEL_149;
          }
        }
        ++*(_DWORD *)(a1 + 1860);
        *(_DWORD *)(a1 + 1864) += v89;
        if (v89 + HIDWORD(v141) <= v12)
        {
          BOOL v88 = 0;
          goto LABEL_137;
        }
        if (HIDWORD(v141))
        {
          int v90 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1824), *(void *)(a1 + 1832), (2 * HIDWORD(v141)));
          if (v90 < 0)
          {
            int v8 = v90;
            goto LABEL_145;
          }
          unsigned int v89 = v143;
        }
        if (v89 <= v12) {
          unsigned int v95 = v12;
        }
        else {
          unsigned int v95 = v89;
        }
        if (!*(_DWORD *)(a1 + 52)) {
          unsigned int v89 = v95;
        }
        int v8 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1824), *(void *)(a1 + 1832), &v145, 2 * v89);
        if ((v8 & 0x80000000) == 0)
        {
          HIDWORD(v141) = 0;
          BOOL v88 = *(_DWORD *)(a1 + 52) != 0;
LABEL_137:
          uint64_t v96 = __b;
          if (__b)
          {
            uint64_t v97 = v143;
            if (v143)
            {
              uint64_t v98 = 0;
              uint64_t v99 = v145;
              do
              {
                *(_WORD *)(v99 + 2 * (HIDWORD(v141) + v98)) = (int)*(float *)(v96 + 4 * v98);
                ++v98;
              }
              while (v97 != v98);
            }
            int v100 = HIDWORD(v141);
          }
          else
          {
            int v100 = HIDWORD(v141);
            cstdlib_memset((void *)(v145 + 2 * HIDWORD(v141)), 0, v143 + 2);
            LODWORD(v97) = v143;
          }
          HIDWORD(v141) = v97 + v100;
          uint64_t v47 = v138;
          goto LABEL_146;
        }
LABEL_145:
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v91, v92, v93, v94, "stream");
        HIDWORD(v141) = 0;
        BOOL v88 = *(_DWORD *)(a1 + 52) != 0;
LABEL_146:
        ++*v37;
        int v49 = *(_DWORD *)(a1 + 1856) + 1;
        *(_DWORD *)(a1 + 1856) = v49;
        goto LABEL_147;
      }
LABEL_183:
      uint64_t v10 = v32;
      uint64_t v116 = *(void *)(*(void *)(a1 + 16) + 32);
      goto LABEL_184;
    }
  }
  else
  {
    if (!v149)
    {
      *a5 = 0;
      return v10;
    }
    uint64_t v106 = *(void *)(a1 + 1824);
    if (!v106
      || (uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 32) + 72))(v106, *(void *)(a1 + 1832)),
          *(void *)(a1 + 1824) = safeh_GetNullHandle(),
          *(void *)(a1 + 1832) = v107,
          (v10 & 0x80000000) == 0))
    {
      if (*(void *)(a1 + 1840))
      {
        uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 1808), *(void *)(a1 + 1816), &__src, &__n);
        if ((v10 & 0x80000000) != 0)
        {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, (uint64_t)"%s%s%s%x", v108, v109, v110, v111, "contentType");
        }
        else if (__n)
        {
          uint64_t v10 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1840), *(void *)(a1 + 1848), &__dst);
          if ((v10 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v112, v113, v114, v115, "stream");
          }
        }
        if ((v10 & 0x80000000) == 0 && __n && __src && __dst)
        {
          cstdlib_memcpy(__dst, __src, __n);
          unsigned int v117 = __n;
          LODWORD(__n) = __n >> 5;
          if (v117 >= 0x20)
          {
            uint64_t v118 = 0;
            unint64_t v119 = 0;
            int v120 = *(_DWORD *)(a1 + 1864);
            unsigned int v121 = (char *)__dst;
            do
            {
              int v122 = &v121[v118];
              *((_DWORD *)v122 + 3) = v120;
              *((_DWORD *)v122 + 4) = 0;
              ++v119;
              v118 += 32;
            }
            while (v119 < __n);
          }
          else
          {
            uint64_t v118 = 0;
          }
          uint64_t v32 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1840), *(void *)(a1 + 1848), v118);
          if ((v32 & 0x80000000) != 0) {
            goto LABEL_183;
          }
          uint64_t v123 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 1808), *(void *)(a1 + 1816), v118);
          if ((v123 & 0x80000000) != 0)
          {
            uint64_t v10 = v123;
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56006, (uint64_t)"%s%s%s%x", v124, v125, v126, v127, "contentType");
            return v10;
          }
        }
        else if ((v10 & 0x80000000) != 0)
        {
          return v10;
        }
        uint64_t v10 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 72))(*(void *)(a1 + 1840), *(void *)(a1 + 1848));
        *(void *)(a1 + 1840) = safeh_GetNullHandle();
        *(void *)(a1 + 1848) = v128;
      }
    }
  }
  return v10;
}

uint64_t synth_bet3_ProcessEnd(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 9346, 1904);
  if ((v3 & 0x80000000) != 0) {
    return 2164269064;
  }
  uint64_t v4 = v3;
  *(void *)((char *)a1 + 1860) = 0;
  uint64_t v5 = a1[224];
  if (v5)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void))(a1[4] + 72))(v5, a1[225]);
    a1[224] = safeh_GetNullHandle();
    a1[225] = v6;
  }
  uint64_t v7 = a1[226];
  if (v7)
  {
    int v8 = (*(uint64_t (**)(uint64_t, void))(a1[4] + 72))(v7, a1[227]);
    if ((int)v4 > -1 && v8 < 0) {
      uint64_t v4 = v8;
    }
    else {
      uint64_t v4 = v4;
    }
    a1[226] = safeh_GetNullHandle();
    a1[227] = v10;
  }
  uint64_t v11 = a1[228];
  if (v11)
  {
    int v12 = (*(uint64_t (**)(uint64_t, void))(a1[4] + 72))(v11, a1[229]);
    if ((int)v4 > -1 && v12 < 0) {
      uint64_t v4 = v12;
    }
    else {
      uint64_t v4 = v4;
    }
    a1[228] = safeh_GetNullHandle();
    a1[229] = v14;
  }
  uint64_t v15 = a1[230];
  if (v15)
  {
    int v16 = (*(uint64_t (**)(uint64_t, void))(a1[4] + 72))(v15, a1[231]);
    if ((int)v4 > -1 && v16 < 0) {
      uint64_t v4 = v16;
    }
    else {
      uint64_t v4 = v4;
    }
    a1[230] = safeh_GetNullHandle();
    a1[231] = v18;
  }
  return v4;
}

uint64_t synth_bet3_loc_ParamCheckChange(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  if (cstdlib_strcmp(__s1, "audiooutputbufsamples"))
  {
    if (cstdlib_strcmp(__s1, "volume"))
    {
      if (cstdlib_strcmp(__s1, "rate") && cstdlib_strcmp(__s1, "rate_baseline"))
      {
        if (cstdlib_strcmp(__s1, "ratewpm"))
        {
          if (cstdlib_strcmp(__s1, "pitch") && cstdlib_strcmp(__s1, "pitch_baseline"))
          {
            uint64_t result = 0;
          }
          else if (LH_atoi(a3) - 201 >= 0xFFFFFF69)
          {
            uint64_t result = 0;
          }
          else
          {
            uint64_t result = 2164269071;
          }
        }
        else
        {
          uint64_t result = 2164269057;
        }
      }
      else if (LH_atoi(a3) - 401 >= 0xFFFFFEA1)
      {
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = 2164269071;
      }
    }
    else if (LH_atoi(a3) <= 0x64)
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 2164269071;
    }
  }
  else if ((int)LH_atoi(a3) <= 0)
  {
    uint64_t result = 2164269071;
  }
  else
  {
    uint64_t result = 0;
  }
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet3_loc_ParamLearnChange(uint64_t a1, char *__s1, const char *a3)
{
  if (cstdlib_strcmp(__s1, "audiooutputbufsamples")
    && cstdlib_strcmp(__s1, "volume")
    && cstdlib_strcmp(__s1, "rate")
    && cstdlib_strcmp(__s1, "rate_baseline")
    && cstdlib_strcmp(__s1, "ratewpm")
    && cstdlib_strcmp(__s1, "pitch")
    && cstdlib_strcmp(__s1, "pitch_baseline"))
  {
    return 0;
  }
  uint64_t v7 = LH_atoi(a3);

  return synth_bet3_loc_ParamSet(a1, __s1, (uint64_t)v7);
}

uint64_t synth_bet3_loc_ParamGetListen(uint64_t a1, unsigned char *a2, signed int a3, signed int a4, unsigned int a5, long long *a6, unsigned int *a7)
{
  if ((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
    || (a5 = a3, (int)*a7 < a3)
    || (a5 = a4, (int)*a7 > a4))
  {
    uint64_t v14 = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a5);
    *a7 = a5;
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v20 = v14;
      uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v25 = "parameter";
      uint64_t v23 = "%s%s";
      uint64_t v22 = 56009;
      goto LABEL_8;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
  long long v26 = *a6;
  uint64_t v27 = *((void *)a6 + 2);
  uint64_t v20 = paramc_ListenerAdd(v19, a2, &v26);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
    uint64_t v22 = 56010;
    uint64_t v23 = 0;
LABEL_8:
    log_OutPublic(v21, (uint64_t)"SYNTH_BET3", v22, (uint64_t)v23, v15, v16, v17, v18, v25);
  }
  return v20;
}

uint64_t synth_bet3_loc_SynthInit_MLSA(uint64_t a1)
{
  uint64_t v42 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  int v41 = 0;
  unsigned int v40 = 0;
  uint64_t v39 = 0;
  long long v38 = 0u;
  memset(__b, 0, sizeof(__b));
  unsigned int v36 = 0;
  uint64_t Int = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"frequencyhz", &v41);
  if ((Int & 0x80000000) != 0)
  {
    uint64_t Str = Int;
    uint64_t v10 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_55:
    log_OutPublic(v10, (uint64_t)"SYNTH_BET3", 56008, (uint64_t)"%s%s", v4, v5, v6, v7, "parameter");
    return Str;
  }
  MFVSyn__deinit__MVF_Synthesis((void *)(a1 + 72));
  *(_DWORD *)(a1 + 48) = v41;
  BOOL v8 = (paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicemodel", &v42) & 0x80000000) == 0
    && cstdlib_strcmp(v42, "bet3") == 0;
  *(_DWORD *)(a1 + 52) = v8;
  BOOL v11 = (paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicemodel", &v42) & 0x80000000) == 0
     && !cstdlib_strcmp(v42, "bet4")
     && (paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet4suppressbet3pcm", &v42) & 0x80000000) == 0
     && cstdlib_strcmp(v42, "yes") == 0;
  *(_DWORD *)(a1 + 56) = v11;
  cstdlib_memset(__b, 0, 0x30uLL);
  *(long long *)((char *)__b + 8) = xmmword_220774B60;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)&__b[1] + 1) = _D0;
  BYTE4(v38) = 1;
  *(_WORD *)((char *)&v38 + 5) = *(_DWORD *)(a1 + 52) != 0;
  DWORD2(v38) = 4;
  LODWORD(__b[0]) = vcvtps_s32_f32(COERCE_FLOAT(COERCE_UNSIGNED_INT64(wave_t__convertFromF0ToTp__SR((float)v41, 700.0))));
  DWORD1(__b[0]) = vcvtms_s32_f32(COERCE_FLOAT(COERCE_UNSIGNED_INT64(wave_t__convertFromF0ToTp__SR((float)v41, 40.0))));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicealpha", &v42);
  if ((Str & 0x80000000) != 0
    || !v42
    || !*v42
    || (cstdlib_atof((unsigned __int8 *)v42),
        double v18 = v17,
        paramc_ParamRelease(*(void *)(v2 + 40)),
        uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicebeta", &v42),
        (Str & 0x80000000) != 0)
    || !v42
    || !*v42)
  {
LABEL_54:
    uint64_t v10 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_55;
  }
  cstdlib_atof((unsigned __int8 *)v42);
  double v20 = v19;
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t v21 = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceframesize", (_DWORD *)&v39 + 1);
  if ((v21 & 0x80000000) != 0) {
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 44) = HIDWORD(v39) * *(_DWORD *)(a1 + 48) / 0x3E8u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevol", &v42);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_54;
  }
  if (!v42) {
    goto LABEL_54;
  }
  if (!*v42) {
    goto LABEL_54;
  }
  cstdlib_atof((unsigned __int8 *)v42);
  *(float *)&double v22 = v22;
  *(_DWORD *)(a1 + 60) = LODWORD(v22);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevuvrelamp", &v42);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_54;
  }
  if (!v42) {
    goto LABEL_54;
  }
  if (!*v42) {
    goto LABEL_54;
  }
  cstdlib_atof((unsigned __int8 *)v42);
  *(float *)&double v23 = v23;
  DWORD2(__b[0]) = LODWORD(v23);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicemvfboost", &v42);
  if ((Str & 0x80000000) != 0 || !v42 || !*v42) {
    goto LABEL_54;
  }
  cstdlib_atof((unsigned __int8 *)v42);
  double v25 = v24;
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t v21 = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceorder", &v39);
  if ((v21 & 0x80000000) != 0)
  {
LABEL_53:
    uint64_t Str = v21;
    goto LABEL_54;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicef0std", &v42);
  if ((Str & 0x80000000) != 0) {
    goto LABEL_54;
  }
  if (!v42) {
    goto LABEL_54;
  }
  if (!*v42) {
    goto LABEL_54;
  }
  cstdlib_atof((unsigned __int8 *)v42);
  *(float *)&double v26 = v26;
  *(_DWORD *)(a1 + 64) = LODWORD(v26);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicef0mean", &v42);
  if ((Str & 0x80000000) != 0 || !v42 || !*v42) {
    goto LABEL_54;
  }
  cstdlib_atof((unsigned __int8 *)v42);
  *(float *)&double v27 = v27;
  *(_DWORD *)(a1 + 68) = LODWORD(v27);
  paramc_ParamRelease(*(void *)(v2 + 40));
  if ((paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2cpupower", &v40) & 0x80000000) == 0
    && (int)v40 >= 1
    && (int)v40 < 5)
  {
    DWORD2(v38) = v40;
  }
  if (paramc_ParamGet(*(void *)(v2 + 40), (uint64_t)"bet3cepstralequalizer", (void *)(a1 + 1872), &v36)|| v39 + 1 == v36 >> 2)
  {
    float v31 = v18;
    float v32 = v20;
    uint64_t inited = BET3FLT__MFVSyn__init__MVF_Synthesis(*(void *)(a1 + 16), a1 + 72, __b, 0, SHIDWORD(v39), v39, v31, v32, (float)v41);
    if ((inited & 0x80000000) == 0)
    {
      float v34 = v25;
      uint64_t inited = BET3FLT__MFVSyn__setMVFBoost(a1 + 72, v34);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"volume", &v40);
        if ((inited & 0x80000000) == 0)
        {
          uint64_t inited = synth_bet3_loc_ParamSet(a1, "volume", v40);
          if ((inited & 0x80000000) == 0)
          {
            uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate_baseline", &v40);
            if ((inited & 0x80000000) == 0)
            {
              uint64_t inited = synth_bet3_loc_ParamSet(a1, "rate_baseline", v40);
              if ((inited & 0x80000000) == 0)
              {
                uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", &v40);
                if ((inited & 0x80000000) == 0)
                {
                  uint64_t inited = synth_bet3_loc_ParamSet(a1, "pitch_baseline", v40);
                  if ((inited & 0x80000000) == 0)
                  {
                    uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", &v40);
                    if ((inited & 0x80000000) == 0)
                    {
                      uint64_t inited = synth_bet3_loc_ParamSet(a1, "rate", v40);
                      if ((inited & 0x80000000) == 0)
                      {
                        uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", &v40);
                        if ((inited & 0x80000000) == 0) {
                          return synth_bet3_loc_ParamSet(a1, "pitch", v40);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return inited;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56008, (uint64_t)"%s%s", v28, v39, v29, v30, "parameter");
    return 0;
  }
}

uint64_t synth_bet3_loc_ParamSet(uint64_t a1, const char *a2, uint64_t a3)
{
  if (cstdlib_strcmp(a2, "audiooutputbufsamples"))
  {
    uint64_t v6 = critsec_Enter(*(void **)(a1 + 24));
    if ((v6 & 0x80000000) == 0)
    {
      if (cstdlib_strcmp(a2, "volume"))
      {
        if (cstdlib_strcmp(a2, "rate_baseline"))
        {
          if (!cstdlib_strcmp(a2, "rate"))
          {
            int v18 = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 1892), a3);
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set rate %d", v19, v20, v21, a3);
            if (!*(_DWORD *)(a1 + 1896))
            {
              uint64_t v10 = v6;
              if (*(_DWORD *)(a1 + 52))
              {
                if (MFVSyn__setRateTtsEg(a1 + 72, v18)) {
                  uint64_t v10 = 2164269071;
                }
                else {
                  uint64_t v10 = v6;
                }
              }
              goto LABEL_38;
            }
            goto LABEL_26;
          }
          if (!cstdlib_strcmp(a2, "ratewpm"))
          {
            uint64_t v10 = 2164269057;
            goto LABEL_38;
          }
          if (cstdlib_strcmp(a2, "pitch_baseline"))
          {
            if (!cstdlib_strcmp(a2, "pitch"))
            {
              uint64_t v10 = 2164269071;
              if ((a3 - 201) >= 0xFFFFFF69)
              {
                if (*(_DWORD *)(a1 + 52))
                {
                  float v11 = (float)(int)MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 1888), a3);
                  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set pitch %d (synth %f)", v12, v13, v14, a3);
                  uint64_t v10 = v6;
                  if (!*(_DWORD *)(a1 + 1896))
                  {
                    BET3FLT__MFVSyn__setPitchLevelPercent(a1 + 72, v11);
                    if (v15) {
                      uint64_t v10 = 2164269071;
                    }
                    else {
                      uint64_t v10 = v6;
                    }
                  }
                  goto LABEL_38;
                }
                goto LABEL_26;
              }
LABEL_38:
              critsec_Leave(*(void **)(a1 + 24));
              return v10;
            }
LABEL_26:
            uint64_t v10 = v6;
            goto LABEL_38;
          }
          uint64_t v10 = 2164269071;
          if ((a3 - 201) < 0xFFFFFF69) {
            goto LABEL_38;
          }
          unsigned int v26 = 0;
          *(_DWORD *)(a1 + 1888) = a3;
          double v22 = "pitch";
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", &v26);
          uint64_t v23 = v26;
LABEL_28:
          synth_bet3_loc_ParamSet(a1, v22, v23);
          uint64_t v10 = 0;
          goto LABEL_38;
        }
        if ((a3 - 401) >= 0xFFFFFEA1)
        {
          unsigned int v25 = 0;
          *(_DWORD *)(a1 + 1892) = a3;
          double v22 = "rate";
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", &v25);
          uint64_t v23 = v25;
          goto LABEL_28;
        }
      }
      else if (a3 <= 0x64)
      {
        uint64_t v10 = v6;
        if (!*(_DWORD *)(a1 + 1896))
        {
          if (a3 > 0x50) {
            float v17 = *(float *)(a1 + 60) + (float)((float)((float)(2.0 - *(float *)(a1 + 60)) * (float)(a3 - 80)) / 20.0);
          }
          else {
            float v17 = (float)(*(float *)(a1 + 60) * (float)(int)a3) / 80.0;
          }
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set volume %d (synth %f)", v7, v8, v9, a3);
          uint64_t v10 = BET3FLT__MFVSyn__setVolumeBoost(a1 + 72, v17);
        }
        goto LABEL_38;
      }
      uint64_t v10 = 2164269071;
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (a3 <= 1) {
      int v16 = 1;
    }
    else {
      int v16 = a3;
    }
    *(_DWORD *)(a1 + 40) = v16;
  }
  return v6;
}

void rand_num(unint64_t *a1, float *a2, int a3, float a4)
{
  if (a3 >= 1)
  {
    float v6 = a4 + a4;
    uint64_t v7 = a3;
    do
    {
      *a2++ = v6 * (float)((float)(rand31pmc_ranf(a1) * 4.6566e-10) + -0.5);
      --v7;
    }
    while (v7);
  }
}

uint64_t *BET3FLT__rand_num_init(uint64_t *a1)
{
  return BET3FLT__rand31pmc_seedi(a1, 0);
}

void BET3FLT__MFVSyn__constructExcitationShapingFilter(uint64_t a1, float a2)
{
  float v2 = a2;
  if (a2 <= 0.0)
  {
    vect_t__fillZero(a1 + 576);
  }
  else
  {
    float v17 = 0.0;
    rand_num((unint64_t *)(a1 + 88), &v17, 1, 1.0);
    uint64_t v4 = *(void *)(a1 + 584);
    uint64_t v5 = *(int *)(a1 + 592);
    *(float *)(v4 + 4 * (v5 - 1)) = (float)((float)(v17 * 25.0) + 25.0) + v2;
    v_equ((void *)v4, (const void *)(v4 + 4), v5 - 1);
    float v17 = 0.0;
    uint64_t v6 = *(void *)(a1 + 584);
    int v7 = *(_DWORD *)(a1 + 592);
    float v8 = *(float *)(v6 + 4 * (v7 - 2));
    if (v8 <= 0.0)
    {
      int v10 = 0;
      float v9 = 0.0;
    }
    else
    {
      float v9 = (float)(v8 * 4.0) + 0.0;
      float v17 = v9;
      int v10 = 4;
    }
    float v11 = *(float *)(v6 + 4 * (v7 - 3));
    if (v11 > 0.0)
    {
      v10 |= 2u;
      float v9 = v9 + (float)(v11 * 2.0);
      float v17 = v9;
    }
    float v12 = *(float *)(v6 + 4 * (v7 - 4));
    BOOL v13 = v12 <= 0.0;
    if (v12 <= 0.0) {
      float v12 = -0.0;
    }
    float v14 = v9 + v12;
    if (v13) {
      unsigned int v15 = v10;
    }
    else {
      unsigned int v15 = v10 + 1;
    }
    float v2 = v14 * invDiv[v15];
  }
  float v16 = (float)*(int *)(a1 + 168) * 0.5;
  if (v16 >= (float)(v2 * *(float *)(a1 + 52))) {
    float v16 = v2 * *(float *)(a1 + 52);
  }
  *(float *)(a1 + 552) = v16;
}

float MFVSyn__filterExcitationWithShapingFilterFast(uint64_t a1, int a2, uint64_t a3, float a4)
{
  float v7 = *(float *)(a1 + 552);
  if (v7 > 0.0)
  {
    float v8 = *(float *)(a1 + 556);
    if (v8 > 0.0) {
      float v7 = (float)((float)(1.0 - a4) * v8) + (float)(a4 * v7);
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 792);
  uint64_t v10 = a1 + 808;
  if ((int)v9 < 1)
  {
LABEL_8:
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = 0;
    float v12 = (float *)(a1 + 824);
    while (*v12 < (float)(v7 / (float)*(int *)(a1 + 168)))
    {
      ++v11;
      v12 += 6;
      if (v9 == v11) {
        goto LABEL_8;
      }
    }
  }
  unsigned int v13 = v11;
  v_equ(*(void **)(a3 + 8), *(const void **)(v10 + 24 * v11), *(unsigned __int16 *)(a1 + 796));
  float v14 = sqrt((double)a2);
  v_scale(*(float **)(a3 + 8), *(unsigned __int16 *)(a1 + 796), *(float *)(a1 + 56) * v14);
  int v15 = *(_DWORD *)(a1 + 672);
  if (v15 >= 1)
  {
    if (v15 >= a2) {
      int v15 = a2;
    }
    if (*(_DWORD *)(a3 + 16) >= v15) {
      int v16 = v15;
    }
    else {
      int v16 = *(_DWORD *)(a3 + 16);
    }
    v_add(*(float **)(a3 + 8), *(float **)(a1 + 664), v16);
    int v17 = *(_DWORD *)(a1 + 672);
    if (v17 > v16)
    {
      v_equ(*(void **)(a1 + 664), (const void *)(*(void *)(a1 + 664) + 4 * v16), v17 - v16);
      *(_DWORD *)(a1 + 672) = (*(_DWORD *)(a1 + 672) - v16) & ~((*(_DWORD *)(a1 + 672) - v16) >> 31);
    }
  }
  vect_t__fillZero(a1 + 656);
  int v18 = *(unsigned __int16 *)(a1 + 796);
  if (v18 <= a2)
  {
    uint64_t v19 = a2;
  }
  else
  {
    uint64_t v19 = a2;
    v_equ(*(void **)(a1 + 664), (const void *)(*(void *)(a3 + 8) + 4 * a2), v18 - a2);
    int v20 = *(unsigned __int16 *)(a1 + 796) - a2;
    if (v20 <= *(_DWORD *)(a1 + 672)) {
      int v20 = *(_DWORD *)(a1 + 672);
    }
    *(_DWORD *)(a1 + 672) = v20;
  }
  uint64_t v21 = *(unsigned __int16 *)(a1 + 800);
  rand_num((unint64_t *)(a1 + 88), (float *)(*(void *)(a1 + 464) + 4 * v21), a2, (float)(*(float *)(a1 + 44) * 1.15) * *(float *)(a1 + 56));
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 688), v21);
  v_equ(*(void **)(a1 + 688), (const void *)(*(void *)(a1 + 464) + 4 * v19), v21);
  zerflt(*(void *)(a1 + 464) + 4 * v21, *(float **)(v10 + 24 * v13 + 8), *(void *)(a1 + 464) + 4 * v21, *(unsigned __int16 *)(a1 + 800), a2);
  v_equ(*(void **)(a1 + 464), (const void *)(*(void *)(a1 + 464) + 4 * v21), a2);
  double v22 = *(float **)(a3 + 8);
  uint64_t v23 = *(float **)(a1 + 464);

  return v_add(v22, v23, a2);
}

uint64_t BET3FLT__vect_t__createVect(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a1;
  uint64_t v5 = 4 * a3;
  uint64_t v6 = (void *)heap_Alloc(a1, v5);
  *(void *)(a2 + 8) = v6;
  if (!v6) {
    return 2164269066;
  }
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  if (a3 >= 1) {
    bzero(v6, v5);
  }
  return 0;
}

void *BET3FLT__vect_t__deleteVect(void *result)
{
  if (result)
  {
    float v2 = result + 1;
    uint64_t v1 = result[1];
    if (v1) {
      uint64_t result = heap_Free((void *)*result, v1);
    }
    *float v2 = 0;
    v2[1] = 0;
  }
  return result;
}

void vect_t__fillZero(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 20);
  if ((int)v1 >= 1) {
    bzero(*(void **)(a1 + 8), 4 * v1);
  }
}

uint64_t vect_t__scale(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 16);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(float **)(result + 8);
    do
    {
      *uint64_t v3 = *v3 * a2;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void vect_t__mulByHanning(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    do
    {
      float v4 = cos((float)((float)(6.2832 / (float)(v1 - 1)) * (float)(int)v2));
      *(float *)(v3 + 4 * v2) = (float)((float)(1.0 - v4) * 0.5) * *(float *)(v3 + 4 * v2);
      ++v2;
    }
    while (v1 != v2);
  }
}

void vect_t__mulByHamming(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    do
    {
      float v4 = cos((float)((float)(6.2832 / (float)(v1 - 1)) * (float)(int)v2));
      *(float *)(v3 + 4 * v2) = (float)((float)(v4 * -0.46) + 0.54) * *(float *)(v3 + 4 * v2);
      ++v2;
    }
    while (v1 != v2);
  }
}

void vect_t__mulByBlackman(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    do
    {
      float v4 = (float)(6.2832 / (float)(v1 - 1)) * (float)(int)v2;
      float v5 = cos(v4);
      float v6 = (float)(v5 * -0.5) + 0.42;
      float v7 = cos((float)(v4 + v4));
      *(float *)(v3 + 4 * v2) = (float)(v6 + (float)(v7 * 0.08)) * *(float *)(v3 + 4 * v2);
      ++v2;
    }
    while (v1 != v2);
  }
}

uint64_t BET3FLT__MFVSyn__SynthesisOneFrame(uint64_t a1, const void *a2, int *a3, void *a4, float a5, float a6, float a7, float a8)
{
  *a3 = 0;
  int v15 = *(_DWORD *)(a1 + 604);
  BOOL v16 = a5 == 0.0;
  if (v15 != 1) {
    BOOL v16 = 0;
  }
  if (v15) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = a5 > 0.0;
  }
  *a4 = 0;
  *(_DWORD *)(a1 + 600) = v17 || v16;
  if (a5 != 0.0)
  {
    a5 = *(float *)(a1 + 64) * a5;
    if (a5 < 40.0) {
      a5 = 40.0;
    }
  }
  *(_DWORD *)(a1 + 604) = a5 > 0.0;
  float v18 = (float)*(int *)(a1 + 480);
  float v19 = *(float *)(a1 + 60);
  double v20 = BET3FLT__wave_t__convertFromF0ToTp((float *)(a1 + 32), a5);
  *(_DWORD *)(a1 + 704) = LODWORD(v20);
  if (*(float *)&v20 == 0.0)
  {
    int v21 = *(_DWORD *)(a1 + 544);
    *(_DWORD *)(a1 + 544) = v21 + 1;
    int v22 = *(_DWORD *)(a1 + 536);
    uint64_t v23 = *(void *)(a1 + 528);
    if (v21 >= v22)
    {
      v_equ((void *)v23, (const void *)(v23 + 4), v22 - 1);
      uint64_t v23 = *(void *)(a1 + 528);
      int v22 = *(_DWORD *)(a1 + 536);
      *(float *)(v23 + 4 * (v22 - 1)) = (float)*(int *)(a1 + 512);
    }
    double v24 = v_sum((float *)v23, v22);
    *(float *)(a1 + 704) = *(float *)&v24 / (float)*(int *)(a1 + 536);
  }
  else
  {
    *(_DWORD *)(a1 + 544) = 0;
    v_equ(*(void **)(a1 + 528), (const void *)(*(void *)(a1 + 528) + 4), *(_DWORD *)(a1 + 536) - 1);
    *(_DWORD *)(*(void *)(a1 + 528) + 4 * *(int *)(a1 + 536) - 4) = *(_DWORD *)(a1 + 704);
  }
  float v25 = v19 * v18;
  v_equ(*(void **)(a1 + 728), a2, *(_DWORD *)(a1 + 200) + 1);
  float v26 = 0.0;
  if (a6 > 0.0) {
    float v26 = 0.25;
  }
  *(float *)(a1 + 708) = v26;
  *(float *)(a1 + 712) = a8;
  int v27 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 560) = 1065353216;
  *(_DWORD *)(a1 + 568) = v27;
  BET3FLT__MFVSyn__mc2mlsa(a1, *(void *)(a1 + 728), *(void *)(a1 + 384));
  MFVSyn__postFilter(a1, *(float **)(a1 + 728), *(float **)(a1 + 384));
  v_equ(*(void **)(a1 + 728), *(const void **)(a1 + 384), *(_DWORD *)(a1 + 200) + 1);
  BET3FLT__MFVSyn__constructExcitationShapingFilter(a1, *(float *)(a1 + 712));
  if (*(_DWORD *)(a1 + 600)
    || (float v28 = vabds_f32(*(float *)(a1 + 704), *(float *)(a1 + 744)),
        v28 >= BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), 60.0)))
  {
    *(_DWORD *)(a1 + 744) = *(_DWORD *)(a1 + 704);
  }
  int v29 = vcvtps_s32_f32(v25);
  int v30 = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a1 + 84) = (v30 + 1) >> 1;
  if (*(unsigned char *)(a1 + 244))
  {
    uint64_t v31 = *(unsigned int *)(a1 + 240);
    if ((v31 & 0x80000000) == 0)
    {
      float v32 = 1.0 / (float)(1 << *(unsigned char *)(a1 + 244));
      uint64_t v33 = *(float **)(a1 + 728);
      float v34 = *(float **)(a1 + 768);
      uint64_t v35 = *(float **)(a1 + 224);
      uint64_t v36 = v31 + 1;
      do
      {
        float v37 = *v33++;
        float v38 = v37;
        float v39 = *v34++;
        *v35++ = v32 * (float)(v38 - v39);
        --v36;
      }
      while (v36);
    }
  }
  else
  {
    uint64_t v40 = *(unsigned int *)(a1 + 240);
    if ((v40 & 0x80000000) == 0)
    {
      float v41 = (float)v30 / (float)v29;
      uint64_t v42 = *(float **)(a1 + 728);
      uint64_t v43 = *(float **)(a1 + 768);
      uint64_t v44 = *(float **)(a1 + 224);
      uint64_t v45 = v40 + 1;
      do
      {
        float v46 = *v42++;
        float v47 = v46;
        float v48 = *v43++;
        *v44++ = v41 * (float)(v47 - v48);
        --v45;
      }
      while (v45);
    }
  }
  v_equ(*(void **)(a1 + 184), *(const void **)(a1 + 768), *(_DWORD *)(a1 + 200) + 1);
  signed int v49 = *(_DWORD *)(a1 + 784);
  if (v49 >= 1)
  {
    uint64_t v50 = *(void **)(a1 + 440);
    BOOL v51 = *(const void **)(a1 + 416);
    if (v49 <= v29)
    {
      v_equ(v50, v51, v49);
      BET3FLT__MFVSyn__mlsa_filter(a1, *(void *)(a1 + 440), *(void *)(a1 + 496), *(_DWORD *)(a1 + 784));
    }
    else
    {
      v_equ(v50, v51, v29);
      BET3FLT__MFVSyn__mlsa_filter(a1, *(void *)(a1 + 440), *(void *)(a1 + 496), v29);
      v_equ(*(void **)(a1 + 416), (const void *)(*(void *)(a1 + 416) + 4 * v29), *(_DWORD *)(a1 + 784) - v29);
    }
  }
  for (int i = *(_DWORD *)(a1 + 784); i < v29; *(_DWORD *)(a1 + 784) = i)
  {
    float v53 = (float)i / (float)v29;
    float v54 = *(float *)(a1 + 704);
    if (*(_DWORD *)(a1 + 76) < 4u)
    {
      float v55 = *(float *)(a1 + 708);
    }
    else
    {
      float v54 = (float)((float)(1.0 - v53) * *(float *)(a1 + 744)) + (float)(v53 * v54);
      float v55 = (float)((float)(1.0 - v53) * *(float *)(a1 + 748)) + (float)(v53 * *(float *)(a1 + 708));
    }
    float v62 = 0.0;
    rand_num((unint64_t *)(a1 + 88), &v62, 1, 1.0);
    int v56 = (int)(v54 * (1.0 - (float)(v55 * v62)) + 0.5);
    if (*(_DWORD *)(a1 + 36) > v56) {
      int v56 = *(_DWORD *)(a1 + 36);
    }
    if (v56 >= *(_DWORD *)(a1 + 40)) {
      int v57 = *(_DWORD *)(a1 + 40);
    }
    else {
      int v57 = v56;
    }
    if (*(unsigned char *)(a1 + 74)) {
      MFVSyn__filterExcitationWithShapingFilterFast(a1, v57, a1 + 432, v53);
    }
    else {
      MFVSyn__filterExcitationWithShapingFilterHQ(a1, v57, *(_DWORD *)(a1 + 604), a1 + 432, v54, v53, a7);
    }
    uint64_t v58 = *(int *)(a1 + 784);
    int v59 = v58 + v57;
    if ((int)v58 + v57 >= v29) {
      int v59 = v29;
    }
    BET3FLT__MFVSyn__mlsa_filter(a1, *(void *)(a1 + 440), *(void *)(a1 + 496) + 4 * v58, v59 - v58);
    int v60 = *(_DWORD *)(a1 + 784);
    int i = v60 + v57;
    if (v60 + v57 > v29)
    {
      v_equ(*(void **)(a1 + 416), (const void *)(*(void *)(a1 + 440) + 4 * (v29 - v60)), v57 - (v29 - v60));
      int i = *(_DWORD *)(a1 + 784) + v57;
    }
  }
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 552);
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a1 + 572) = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a1 + 712);
  *(void *)(a1 + 744) = *(void *)(a1 + 704);
  v_equ(*(void **)(a1 + 768), *(const void **)(a1 + 728), *(_DWORD *)(a1 + 200) + 1);
  if (*(unsigned char *)(a1 + 73)) {
    MFVSyn__disperse(a1, a1 + 488, 0, v29);
  }
  *(_DWORD *)(a1 + 784) -= v29;
  *a3 = v29;
  *a4 = *(void *)(a1 + 496);
  return 0;
}

unint64_t BET3FLT__rand31pmc_next(unint64_t *a1)
{
  unint64_t v1 = ((1101463552 * (*a1 >> 16)) & 0x7FFF0000)
     + 16807 * (unsigned __int16)*a1
     + ((16807 * (*a1 >> 16)) >> 15);
  if (v1 >> 31) {
    v1 -= 0x7FFFFFFFLL;
  }
  *a1 = v1;
  return v1;
}

uint64_t *BET3FLT__rand31pmc_seedi(uint64_t *result, unint64_t a2)
{
  if (a2 <= 1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = a2;
  }
  *uint64_t result = v2;
  return result;
}

unint64_t rand31pmc_ranlui(unint64_t *a1)
{
  unint64_t v1 = ((1101463552 * (*a1 >> 16)) & 0x7FFF0000)
     + 16807 * (unsigned __int16)*a1
     + ((16807 * (*a1 >> 16)) >> 15);
  if (v1 >> 31) {
    v1 -= 0x7FFFFFFFLL;
  }
  *a1 = v1;
  return v1;
}

float rand31pmc_ranf(unint64_t *a1)
{
  unint64_t v1 = ((1101463552 * (*a1 >> 16)) & 0x7FFF0000)
     + 16807 * (unsigned __int16)*a1
     + ((16807 * (*a1 >> 16)) >> 15);
  if (v1 >> 31) {
    v1 -= 0x7FFFFFFFLL;
  }
  *a1 = v1;
  return (float)v1;
}

uint64_t BET3FLT__MFVSyn__setSpectralOrder(uint64_t a1, int a2)
{
  uint64_t result = 2164269071;
  if (a2 >= 6 && *(_DWORD *)(a1 + 204) >= a2)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 200) = a2;
  }
  return result;
}

uint64_t BET3FLT__MFVSyn__getSpectralOrder(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 200);
  return 0;
}

uint64_t BET3FLT__MFVSyn__setVolumeBoost(uint64_t a1, float a2)
{
  if (a2 >= 0.0)
  {
    BOOL v3 = a2 == 2.0;
    BOOL v2 = a2 >= 2.0;
  }
  else
  {
    BOOL v2 = 1;
    BOOL v3 = 0;
  }
  if (!v3 && v2) {
    return 2164269071;
  }
  uint64_t result = 0;
  *(float *)(a1 + 56) = a2;
  return result;
}

uint64_t BET3FLT__MFVSyn__getVolumeBoost(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 56);
  return 0;
}

uint64_t BET3FLT__MFVSyn__setMVFBoost(uint64_t a1, float a2)
{
  if (a2 >= 0.0)
  {
    BOOL v3 = a2 == 2.0;
    BOOL v2 = a2 >= 2.0;
  }
  else
  {
    BOOL v2 = 1;
    BOOL v3 = 0;
  }
  if (!v3 && v2) {
    return 2164269071;
  }
  uint64_t result = 0;
  *(float *)(a1 + 52) = a2;
  return result;
}

uint64_t BET3FLT__MFVSyn__getMVFBoost(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 52);
  return 0;
}

uint64_t BET3FLT__MFVSyn__setRate(uint64_t a1, float a2)
{
  if (a2 > 0.0)
  {
    BOOL v3 = a2 == 4.0;
    BOOL v2 = a2 >= 4.0;
  }
  else
  {
    BOOL v2 = 1;
    BOOL v3 = 0;
  }
  if (!v3 && v2) {
    return 2164269071;
  }
  uint64_t result = 0;
  *(float *)(a1 + 60) = a2;
  return result;
}

uint64_t BET3FLT__MFVSyn__getRate(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 60);
  return 0;
}

uint64_t MFVSyn__setRateTtsEg(uint64_t a1, int a2)
{
  uint64_t v2 = 2164269071;
  if (a2 >= 400) {
    int v3 = 400;
  }
  else {
    int v3 = a2;
  }
  if (v3 <= 50) {
    int v4 = 50;
  }
  else {
    int v4 = v3;
  }
  if ((a2 - 401) >= 0xFFFFFEA1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 2164269071;
  }
  float v6 = 100.0 / (float)v4;
  float v7 = 0.01;
  if (v6 >= 0.01)
  {
    float v7 = 100.0 / (float)v4;
    if (v6 > 4.0) {
      float v7 = 4.0;
    }
  }
  if (v7 > 0.0 && v7 <= 4.0)
  {
    *(float *)(a1 + 60) = v7;
    return v5;
  }
  return v2;
}

float BET3FLT__MFVSyn__setPitchLevelPercent(uint64_t a1, float result)
{
  if (result >= 50.0 && result <= 200.0)
  {
    uint64_t result = result / 100.0;
    *(float *)(a1 + 64) = result;
  }
  return result;
}

uint64_t MFVSyn__getPitchLevelHz(uint64_t a1, float *a2)
{
  *a2 = *(float *)(a1 + 64) * 100.0;
  return 0;
}

uint64_t MFVSyn__EnableDispersionFilter(uint64_t a1)
{
  *(unsigned char *)(a1 + 73) = 1;
  return 0;
}

uint64_t MFVSyn__DisableDispersionFilter(uint64_t a1)
{
  *(unsigned char *)(a1 + 73) = 0;
  return 0;
}

uint64_t *BET3FLT__MFVSyn__construct(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  *(void *)(a1 + 584) = 0;
  uint64_t result = BET3FLT__rand_num_init((uint64_t *)(a1 + 88));
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 184) = 0;
  if (!*(unsigned char *)(a1 + 74))
  {
    *(void *)(a1 + 688) = 0;
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 616) = 0;
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 416) = 0;
  return result;
}

void *BET3FLT__MFVSyn__deconstruct(uint64_t a1)
{
  BET3FLT__vect_t__deleteVect((void *)(a1 + 760));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 720));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 520));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 576));
  BET3FLT__MFVSyn__mlsa_filter_deinit(a1);
  BET3FLT__vect_t__deleteVect((void *)(a1 + 176));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 216));
  if (!*(unsigned char *)(a1 + 74))
  {
    BET3FLT__vect_t__deleteVect((void *)(a1 + 608));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 632));
  }
  BET3FLT__vect_t__deleteVect((void *)(a1 + 656));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 680));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 144));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 96));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 120));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 408));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 432));
  BET3FLT__vect_t__deleteVect((void *)(a1 + 456));

  return BET3FLT__vect_t__deleteVect((void *)(a1 + 488));
}

uint64_t BET3FLT__MFVSyn__init__MVF_Synthesis(uint64_t a1, uint64_t a2, long long *a3, char *a4, int a5, int a6, float a7, float a8, float a9)
{
  *(void *)a2 = a1;
  long long v14 = *a3;
  long long v15 = a3[1];
  *(_OWORD *)(a2 + 68) = a3[2];
  *(_OWORD *)(a2 + 52) = v15;
  *(_OWORD *)(a2 + 36) = v14;
  *(_DWORD *)(a2 + 200) = a6;
  *(_DWORD *)(a2 + 204) = a6;
  BOOL v16 = (float *)(a2 + 32);
  BET3FLT__wave_t__setSampleRateHz((float *)(a2 + 32), a9);
  BET3FLT__MFVSyn__construct(a2);
  *(float *)(a2 + 68) = BET3FLT__wave_t__convertFromMsecToTp(v16, (float)a5);
  if (*(unsigned char *)(a2 + 74))
  {
    uint64_t ExcTable = BET3FLT__MFVSyn__loadExcTable((void *)a2, a4);
    if ((ExcTable & 0x80000000) != 0) {
      return ExcTable;
    }
  }
  *(_DWORD *)(a2 + 600) = 0;
  double v18 = BET3FLT__wave_t__convertFromF0ToTp(v16, 250.0);
  *(_DWORD *)(a2 + 512) = (int)*(float *)&v18;
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 520, 4);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  v_set(*(float **)(a2 + 528), *(_DWORD *)(a2 + 540), 1.0);
  v_scale(*(float **)(a2 + 528), *(_DWORD *)(a2 + 540), (float)*(int *)(a2 + 512));
  *(_DWORD *)(a2 + 544) = 0;
  *(_DWORD *)(a2 + 168) = (int)BET3FLT__wave_t__sampleRateHz((uint64_t)v16);
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 576, 5);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  if (*(unsigned char *)(a2 + 74))
  {
    unsigned int v19 = *(unsigned __int16 *)(a2 + 796);
    if (v19 <= *(unsigned __int16 *)(a2 + 800)) {
      unsigned int v19 = *(unsigned __int16 *)(a2 + 800);
    }
  }
  else
  {
    *(void *)(a2 + 808) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    unsigned int v19 = 89;
  }
  *(_DWORD *)(a2 + 172) = v19;
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 176, *(_DWORD *)(a2 + 200) + 1);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t v20 = *(void *)(*(void *)a2 + 8);
  int v21 = *(_DWORD *)(a2 + 172);
  if (*(unsigned char *)(a2 + 74))
  {
    uint64_t ExcTable = BET3FLT__vect_t__createVect(v20, a2 + 656, v21);
    if ((ExcTable & 0x80000000) == 0)
    {
      *(_DWORD *)(a2 + 672) = 0;
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 680, *(_DWORD *)(a2 + 172));
      if ((ExcTable & 0x80000000) == 0)
      {
        *(_DWORD *)(a2 + 136) = 0;
        goto LABEL_14;
      }
    }
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(v20, a2 + 608, v21);
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 632, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 656, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 680, *(_DWORD *)(a2 + 172));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
  uint64_t ExcTable = MFVSyn__setDispersion(a2, *(_DWORD *)(a2 + 168));
  if ((ExcTable & 0x80000000) != 0) {
    return ExcTable;
  }
LABEL_14:
  *(_DWORD *)(a2 + 556) = 0;
  *(_DWORD *)(a2 + 564) = 0;
  *(_DWORD *)(a2 + 572) = 0;
  *(_DWORD *)(a2 + 784) = 0;
  int v22 = (int)*(float *)(a2 + 68);
  *(_DWORD *)(a2 + 480) = v22;
  switch(*(_DWORD *)(a2 + 76))
  {
    case 1:
      int v23 = *(_DWORD *)(a2 + 200);
      if (v23 < 4) {
        int v24 = 1;
      }
      else {
        int v24 = v23 >> 2;
      }
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 1;
      *(_DWORD *)(a2 + 208) = v22 >> 1;
      *(_DWORD *)(a2 + 80) = 0;
      goto LABEL_32;
    case 2:
      int v25 = *(_DWORD *)(a2 + 200);
      if (v25 <= 24) {
        int v25 = 24;
      }
      int v24 = v25 >> 1;
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 0;
      if (v22 <= 67) {
        int v26 = v22 >> 2;
      }
      else {
        int v26 = 16;
      }
      *(_DWORD *)(a2 + 208) = v26;
      *(_DWORD *)(a2 + 80) = 1;
LABEL_32:
      int v27 = 3;
      goto LABEL_36;
    case 3:
      int v24 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 0;
      *(_DWORD *)(a2 + 208) = 1;
      *(_DWORD *)(a2 + 80) = 2;
      int v27 = 4;
      goto LABEL_36;
    case 4:
      int v24 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 240) = v24;
      *(unsigned char *)(a2 + 244) = 0;
      *(_DWORD *)(a2 + 208) = 1;
      *(_DWORD *)(a2 + 80) = 3;
      goto LABEL_35;
    default:
      int v24 = *(_DWORD *)(a2 + 240);
LABEL_35:
      int v27 = 5;
LABEL_36:
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 216, v24 + 1);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      uint64_t ExcTable = BET3FLT__MFVSyn__mlsa_filter_init(a2, v27, a7, a8);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      if (*(float *)(a2 + 1628) == 0.0) {
        *(_DWORD *)(a2 + 80) = 0;
      }
      uint64_t ExcTable = MFVSyn__init__postFilter((_DWORD *)a2);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v28 = *(_DWORD *)(a2 + 172);
      if (v28 <= 2 * *(_DWORD *)(a2 + 40)) {
        int v28 = 2 * *(_DWORD *)(a2 + 40);
      }
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 432, 2 * v28);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v29 = *(_DWORD *)(a2 + 172);
      if (v29 <= *(_DWORD *)(a2 + 40)) {
        int v29 = *(_DWORD *)(a2 + 40);
      }
      int v30 = *(_DWORD *)(a2 + 480) <= v29 ? v29 : *(_DWORD *)(a2 + 480);
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 408, v30);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v31 = *(_DWORD *)(a2 + 172);
      if (v31 <= 2 * *(_DWORD *)(a2 + 40)) {
        int v31 = 2 * *(_DWORD *)(a2 + 40);
      }
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 456, 2 * v31);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      int v32 = *(_DWORD *)(a2 + 40);
      if (v32 <= *(_DWORD *)(a2 + 480)) {
        int v32 = *(_DWORD *)(a2 + 480);
      }
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 488, *(_DWORD *)(a2 + 136) + v32 + 1);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      float v33 = (float)*(int *)(a2 + 512);
      *(float *)(a2 + 744) = v33;
      *(float *)(a2 + 752) = v33;
      uint64_t ExcTable = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 760, *(_DWORD *)(a2 + 200) + 1);
      if ((ExcTable & 0x80000000) != 0) {
        return ExcTable;
      }
      uint64_t Vect = BET3FLT__vect_t__createVect(*(void *)(*(void *)a2 + 8), a2 + 720, *(_DWORD *)(a2 + 200) + 1);
      if ((Vect & 0x80000000) == 0)
      {
        BET3FLT__MFVSyn__mc2mlsa(a2, *(void *)(a2 + 768), *(void *)(a2 + 768));
        *(_DWORD *)(a2 + 748) = 0;
      }
      break;
  }
  return Vect;
}

uint64_t BET3FLT__MFVSyn__reset__MVF_Synthesis(uint64_t a1)
{
  if (!a1) {
    return 2164269063;
  }
  BET3FLT__rand_num_init((uint64_t *)(a1 + 88));
  *(_DWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  v_zap(*(void **)(a1 + 128), *(_DWORD *)(a1 + 140));
  v_zap(*(void **)(a1 + 1656), *(_DWORD *)(a1 + 1668));
  v_zap(*(void **)(a1 + 384), *(_DWORD *)(a1 + 396));
  *(float *)(a1 + 744) = (float)*(int *)(a1 + 512);
  *(_DWORD *)(a1 + 752) = 0;
  v_zap(*(void **)(a1 + 768), *(_DWORD *)(a1 + 776));
  BET3FLT__MFVSyn__mc2mlsa(a1, *(void *)(a1 + 768), *(void *)(a1 + 768));
  v_zap(*(void **)(a1 + 440), *(_DWORD *)(a1 + 452));
  v_zap(*(void **)(a1 + 416), *(_DWORD *)(a1 + 428));
  v_zap(*(void **)(a1 + 664), *(_DWORD *)(a1 + 676));
  v_zap(*(void **)(a1 + 688), *(_DWORD *)(a1 + 700));
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  v_zap(*(void **)(a1 + 224), *(_DWORD *)(a1 + 236));
  v_set(*(float **)(a1 + 528), *(_DWORD *)(a1 + 540), 1.0);
  v_scale(*(float **)(a1 + 528), *(_DWORD *)(a1 + 540), (float)*(int *)(a1 + 512));
  *(_DWORD *)(a1 + 544) = 0;
  v_zap(*(void **)(a1 + 584), *(_DWORD *)(a1 + 596));
  uint64_t result = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 560) = 0;
  return result;
}

void *MFVSyn__deinit__MVF_Synthesis(void *a1)
{
  BET3FLT__MFVSyn__releaseExcTable(a1);
  MFVSyn__deinit__postFilter((uint64_t)a1);
  BET3FLT__MFVSyn__deconstruct((uint64_t)a1);

  return cstdlib_memset(a1, 0, 0x6B8uLL);
}

uint64_t MFVSyn__disperse(uint64_t a1, uint64_t a2, int a3, signed int a4)
{
  uint64_t v8 = *(int *)(a1 + 160);
  v_equ((void *)(*(void *)(a1 + 104) + 4 * v8), (const void *)(*(void *)(a2 + 8) + 4 * a3), a4);
  v_equ(*(void **)(a1 + 104), *(const void **)(a1 + 128), v8);
  v_equ(*(void **)(a1 + 128), (const void *)(*(void *)(a1 + 104) + 4 * a4), v8);
  uint64_t v9 = *(void *)(a1 + 104) + 4 * v8;
  uint64_t v10 = *(float **)(a1 + 152);
  uint64_t v11 = *(void *)(a2 + 8) + 4 * a3;

  return zerflt(v9, v10, v11, v8, a4);
}

uint64_t MFVSyn__setDispersion(uint64_t a1, int a2)
{
  int v3 = &dispersion_22kHz;
  if (a2 == 22050)
  {
    int v4 = 179;
  }
  else
  {
    int v3 = &dispersion_16kHz;
    int v4 = 129;
  }
  if (a2 == 11025) {
    uint64_t v5 = &dispersion_8kHz;
  }
  else {
    uint64_t v5 = v3;
  }
  if (a2 == 11025) {
    int v4 = 65;
  }
  if (a2 == 8000) {
    float v6 = &dispersion_8kHz;
  }
  else {
    float v6 = v5;
  }
  if (a2 == 8000) {
    int v7 = 65;
  }
  else {
    int v7 = v4;
  }
  uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 144, v7);
  if ((result & 0x80000000) == 0)
  {
    v_equ(*(void **)(a1 + 152), v6, v7);
    int v9 = *(_DWORD *)(a1 + 40);
    if (v9 <= v7) {
      int v9 = v7;
    }
    uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 96, v9 + 5 * v7);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v10 = *(void *)(*(void *)a1 + 8);
      return BET3FLT__vect_t__createVect(v10, a1 + 120, v7);
    }
  }
  return result;
}

void *MFVSyn__pickLowPassFilter(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  int v7 = *(_DWORD *)(a1 + 24);
  uint64_t v8 = (void **)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 16);
  v_zap(*(void **)(a2 + 8), *(_DWORD *)(a2 + 20));
  uint64_t v11 = *(void **)(a3 + 8);
  uint64_t v10 = (void **)(a3 + 8);
  uint64_t result = v_zap(v11, *((_DWORD *)v10 + 3));
  float v13 = ceilf(a4 / 250.0) * 250.0;
  if (v13 < 1000.0) {
    goto LABEL_4;
  }
  int v14 = *(_DWORD *)(a1 + 168);
  if ((double)v14 * 0.5 + -1000.0 < v13)
  {
    uint64_t v10 = v8;
LABEL_4:
    *((_DWORD *)*v10 + (v9 >> 1)) = 1065353216;
    return result;
  }
  int v15 = v7 - 1;
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 16);
  if ((int)v16 < 1)
  {
LABEL_10:
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = 0;
    float v19 = v13 / (float)v14;
    uint64_t v20 = (float *)(v17 + 20);
    while (*v20 < v19)
    {
      ++v18;
      v20 += 10;
      if (v16 == v18) {
        goto LABEL_10;
      }
    }
  }
  v_equ(*v8, *(const void **)(v17 + 40 * v18), *(_DWORD *)(v17 + 40 * v18 + 16));
  uint64_t v21 = *(unsigned int *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 16);
  if ((int)v21 >= 1)
  {
    uint64_t v23 = 0;
    int v24 = (float *)(v22 + 20);
    while (*v24 < (float)(0.5 - (float)(v13 / (float)*(int *)(a1 + 168))))
    {
      ++v23;
      v24 += 10;
      if (v21 == v23) {
        goto LABEL_17;
      }
    }
    int v15 = v23;
  }
LABEL_17:
  uint64_t result = v_equ(*v10, *(const void **)(v22 + 40 * v15), *(_DWORD *)(v22 + 40 * v15 + 16));
  uint64_t v25 = *(unsigned int *)(*(void *)(a1 + 16) + 40 * v15 + 16);
  if ((int)v25 >= 1)
  {
    int v26 = (float *)*v10;
    float v27 = 1.0;
    do
    {
      *int v26 = v27 * *v26;
      ++v26;
      if (v27 == 1.0) {
        float v27 = -1.0;
      }
      else {
        float v27 = 1.0;
      }
      --v25;
    }
    while (v25);
  }
  return result;
}

void MFVSyn__lowPassFilterCoeffGenerator(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v11 = (void *)(a2 + 8);
  uint64_t v12 = *(unsigned int *)(a2 + 16);
  uint64_t v13 = ((int)v12 >> 1);
  v_zap(*(void **)(a2 + 8), *(_DWORD *)(a2 + 20));
  int v15 = *(void **)(a3 + 8);
  int v14 = (void *)(a3 + 8);
  v_zap(v15, *((_DWORD *)v14 + 3));
  if (a4 <= 600.0) {
    goto LABEL_17;
  }
  int v16 = *(_DWORD *)(a1 + 168);
  if (v16 >= 0) {
    int v17 = *(_DWORD *)(a1 + 168);
  }
  else {
    int v17 = v16 + 1;
  }
  if ((float)((v17 >> 1) - 600) <= a4)
  {
    int v14 = v11;
LABEL_17:
    *(_DWORD *)(*v14 + 4 * (int)v13) = 1065353216;
    return;
  }
  if ((int)v12 >= 1)
  {
    uint64_t v18 = 0;
    float v19 = a4 / (float)v16;
    double v20 = a5;
    double v21 = (float)(v19 * 6.2832);
    uint64_t v22 = *v11;
    do
    {
      uint64_t v23 = ((int)v12 >> 1);
      double v24 = v21 / 3.14159265 * v20;
      if (v13 != v18)
      {
        double v24 = sin(v21 * (double)((int)v18 - (int)v13)) * (1.0 / ((double)((int)v18 - (int)v13) * 3.14159265) * v20);
        uint64_t v23 = v18;
      }
      float v25 = v24;
      *(float *)(v22 + 4 * v23) = v25;
      ++v18;
    }
    while (v12 != v18);
    uint64_t v26 = 0;
    float v27 = v19 * -6.28318531 + 3.14159265;
    double v28 = a6;
    double v29 = v27;
    float v30 = (float)(v27 / 3.1416) * a6;
    uint64_t v31 = *v14;
    do
    {
      uint64_t v32 = ((int)v12 >> 1);
      float v33 = v30;
      if (v13 != v26)
      {
        long double v34 = pow(-1.0, (double)(int)v26) * v28;
        float v33 = v34 * (sin(v29 * (double)((int)v26 - (int)v13)) * (1.0 / (float)((float)(v26 - v13) * 3.1416)));
        uint64_t v32 = v26;
      }
      *(float *)(v31 + 4 * v32) = v33;
      ++v26;
    }
    while (v12 != v26);
  }
}

void MFVSyn__fillExcPulse(uint64_t a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  int v11 = *(unsigned __int8 *)(a1 + 72);
  if (*(unsigned char *)(a1 + 72))
  {
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        vect_t__fillZero(a2);
        **(float **)(a2 + 8) = sqrtf(a5);
      }
      return;
    }
    double v23 = a6;
    if (a6 > 1.0) {
      double v23 = 1.0;
    }
    if (v23 >= 0.0) {
      double v24 = 1.0 - v23;
    }
    else {
      double v24 = 1.0;
    }
    vect_t__fillZero(a2);
    if (a4)
    {
      float v25 = v24;
      if (v25 >= 0.1)
      {
        if (v25 > 0.8) {
          float v25 = 0.8;
        }
      }
      else
      {
        float v25 = 0.3;
      }
      double v29 = sqrt(a5);
      float v30 = v29;
      uint64_t v31 = *(float **)(a2 + 8);
      *uint64_t v31 = v30;
      float v32 = v30 + 0.0;
      if (a3 >= 2)
      {
        float v33 = v31 + 1;
        uint64_t v34 = a3 - 1;
        do
        {
          float v30 = v25 * v30;
          *v33++ = v30;
          float v32 = v32 + v30;
          --v34;
        }
        while (v34);
      }
      float v35 = v29 / v32;
      v_scale(v31, a3, v35);
      return;
    }
    uint64_t v26 = (unint64_t *)(a1 + 88);
    float v27 = *(float **)(a2 + 8);
    float v28 = *(float *)(a1 + 44) * 1.25 + *(float *)(a1 + 44) * 1.25;
    goto LABEL_21;
  }
  vect_t__fillZero(a2);
  if (a6 <= 0.3)
  {
    uint64_t v26 = (unint64_t *)(a1 + 88);
    float v27 = *(float **)(a2 + 8);
    float v28 = 2.25;
LABEL_21:
    rand_num(v26, v27, a3, v28);
    return;
  }
  double v12 = sqrt(a5);
  float v13 = v12;
  int v14 = *(float **)(a2 + 8);
  *int v14 = v13;
  float v15 = v13 + 0.0;
  if (a3 >= 2)
  {
    int v16 = (unint64_t *)(a1 + 88);
    float v17 = fmin((float)(1.0 - a6) * 10.0, 1.0);
    uint64_t v18 = 1;
    do
    {
      float v36 = 0.0;
      rand_num(v16, &v36, 1, 2.0);
      double v19 = v13 * 0.4;
      float v20 = v19 * (v36 * 0.1 + 1.0);
      *(float *)(*(void *)(a2 + 8) + v18 * 4) = v20;
      rand_num(v16, &v36, 1, 2.0);
      float v13 = v19 * (float)((float)(v17 * v36) + 1.0);
      int v14 = *(float **)(a2 + 8);
      float v15 = v15 + v14[v18++];
    }
    while (a3 != v18);
  }
  float v21 = v12 / v15;
  v_scale(v14, a3, v21);
}

float *MFVSyn__filterExcitationWithShapingFilterHQ(uint64_t a1, signed int a2, int a3, uint64_t a4, float a5, float a6, float a7)
{
  float v13 = *(float *)(a1 + 552);
  if (v13 > 0.0)
  {
    float v14 = *(float *)(a1 + 556);
    if (v14 > 0.0) {
      float v13 = (float)((float)(1.0 - a6) * v14) + (float)(a6 * v13);
    }
  }
  if (*(_DWORD *)(a1 + 8))
  {
    MFVSyn__pickLowPassFilter(a1, a1 + 608, a1 + 632, v13);
  }
  else
  {
    float v15 = (float)((float)(1.0 - a6) * *(float *)(a1 + 564)) + (float)(a6 * *(float *)(a1 + 560));
    float v16 = (float)((float)(1.0 - a6) * *(float *)(a1 + 572)) + (float)(a6 * *(float *)(a1 + 568));
    if (v13 > 0.0)
    {
      float v17 = (float)(int)(float)(v13 / BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5));
      float v18 = BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5) * v17;
      float v13 = v18 + (float)(BET3FLT__wave_t__convertFromTpToF0((float *)(a1 + 32), a5) * 0.5);
    }
    MFVSyn__lowPassFilterCoeffGenerator(a1, a1 + 608, a1 + 632, v13, v15, v16);
  }
  vect_t__mulByHanning(a1 + 608);
  vect_t__mulByHanning(a1 + 632);
  v_zap(*(void **)(a4 + 8), *(_DWORD *)(a4 + 20));
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  MFVSyn__fillExcPulse(a1, a4, a2, a3, a5, a7);
  v_equ((void *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), *(const void **)(a4 + 8), a2);
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 664), *(_DWORD *)(a1 + 172));
  v_equ(*(void **)(a1 + 664), (const void *)(*(void *)(a1 + 464) + 4 * a2), *(_DWORD *)(a1 + 172));
  uint64_t v19 = *(void *)(a1 + 464) + 4 * *(int *)(a1 + 172);
  zerflt(v19, *(float **)(a1 + 616), v19, *(_DWORD *)(a1 + 624), a2);
  v_equ(*(void **)(a4 + 8), (const void *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2);
  v_zap(*(void **)(a1 + 464), *(_DWORD *)(a1 + 476));
  rand_num((unint64_t *)(a1 + 88), (float *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2, *(float *)(a1 + 44) * 1.15);
  v_equ(*(void **)(a1 + 464), *(const void **)(a1 + 688), *(_DWORD *)(a1 + 172));
  v_equ(*(void **)(a1 + 688), (const void *)(*(void *)(a1 + 464) + 4 * a2), *(_DWORD *)(a1 + 172));
  uint64_t v20 = *(void *)(a1 + 464) + 4 * *(int *)(a1 + 172);
  zerflt(v20, *(float **)(a1 + 640), v20, *(_DWORD *)(a1 + 648), a2);
  v_equ(*(void **)(a1 + 464), (const void *)(*(void *)(a1 + 464) + 4 * *(int *)(a1 + 172)), a2);
  v_add(*(float **)(a4 + 8), *(float **)(a1 + 464), a2);
  float v21 = *(float **)(a4 + 8);
  float v22 = *(float *)(a1 + 56);

  return v_scale(v21, a2, v22);
}

uint64_t BET3FLT__MFVSyn__mc2mlsa(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(int *)(result + 200);
  float v4 = *(float *)(result + 1624);
  *(_DWORD *)(a3 + 4 * v3) = *(_DWORD *)(a2 + 4 * v3);
  if ((int)v3 >= 1)
  {
    unint64_t v3 = v3;
    float v5 = -v4;
    do
    {
      float v6 = *(float *)(a3 + 4 * v3);
      BOOL v7 = v3-- > 1;
      *(float *)(a3 + 4 * v3) = *(float *)(a2 + 4 * v3) + (float)(v5 * v6);
    }
    while (v7);
  }
  return result;
}

void MFVSyn__postFilter(uint64_t a1, float *a2, float *a3)
{
  int v3 = *(_DWORD *)(a1 + 80);
  if (v3)
  {
    double v7 = 1.0;
    if (v3 != 1)
    {
      v_equ(*(void **)(a1 + 264), a2, *(_DWORD *)(a1 + 200) + 1);
      MFVSyn__freqt__postFilter(a1);
      MFVSyn__c2ir__postFilter(a1);
      uint64_t v8 = *(unsigned int *)(a1 + 400);
      if ((int)v8 < 1)
      {
        double v7 = 0.0;
      }
      else
      {
        int v9 = *(float **)(a1 + 312);
        float v10 = 0.0;
        do
        {
          float v11 = *v9++;
          float v10 = v10 + (float)(v11 * v11);
          --v8;
        }
        while (v8);
        double v7 = v10;
      }
    }
    a3[1] = a3[1] - (float)(*(float *)(a1 + 1632) * a2[2]);
    uint64_t v12 = *(unsigned int *)(a1 + 200);
    if ((int)v12 > 1)
    {
      float v13 = a3 + 2;
      uint64_t v14 = v12 - 1;
      do
      {
        *float v13 = *v13 * (float)(*(float *)(a1 + 1628) + 1.0);
        ++v13;
        --v14;
      }
      while (v14);
    }
    if (*(_DWORD *)(a1 + 80) >= 2u)
    {
      float v15 = *(float *)(a1 + 1624);
      uint64_t v16 = *(void *)(a1 + 264);
      float v17 = a3[(int)v12];
      *(float *)(v16 + 4 * (int)v12) = v17;
      if ((int)v12 >= 1)
      {
        unint64_t v18 = v12 + 1;
        do
        {
          float v19 = a3[(v18 - 2)];
          *(float *)(v16 + 4 * (v18-- - 2)) = v19 + (float)(v15 * v17);
          float v17 = v19;
        }
        while (v18 > 1);
      }
      MFVSyn__freqt__postFilter(a1);
      MFVSyn__c2ir__postFilter(a1);
      uint64_t v20 = *(unsigned int *)(a1 + 400);
      if ((int)v20 < 1)
      {
        double v24 = 0.0;
      }
      else
      {
        float v21 = *(float **)(a1 + 312);
        float v22 = 0.0;
        do
        {
          float v23 = *v21++;
          float v22 = v22 + (float)(v23 * v23);
          --v20;
        }
        while (v20);
        double v24 = v22;
      }
      float v25 = *a3;
      float v26 = log(v7);
      float v27 = log(v24);
      *a3 = v25 + (float)((float)(v26 - v27) * 0.5);
    }
  }
}

uint64_t MFVSyn__init__postFilter(_DWORD *a1)
{
  uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 94), a1[50] + 1);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v3 = a1[20];
    if (v3 >= 2)
    {
      int v4 = v3 == 2 ? 32 : 64;
      a1[100] = v4;
      uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 70), v4);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 64), a1[50] + 1);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 76), a1[100]);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), (uint64_t)(a1 + 82), a1[100]);
            if ((result & 0x80000000) == 0)
            {
              uint64_t v5 = *(void *)(*(void *)a1 + 8);
              int v6 = a1[100];
              return BET3FLT__vect_t__createVect(v5, (uint64_t)(a1 + 88), v6);
            }
          }
        }
      }
    }
  }
  return result;
}

void *MFVSyn__deinit__postFilter(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) >= 2u)
  {
    BET3FLT__vect_t__deleteVect((void *)(a1 + 280));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 256));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 304));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 328));
    BET3FLT__vect_t__deleteVect((void *)(a1 + 352));
  }

  return BET3FLT__vect_t__deleteVect((void *)(a1 + 376));
}

void BET3FLT__MFVSyn__mlsa_filter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(float **)(a1 + 184);
    uint64_t v61 = *(float **)(a1 + 224);
    unint64_t v6 = *(unsigned int *)(a1 + 1644);
    uint64_t v7 = *(void *)(a1 + 1656);
    uint64_t v8 = (int)v6 + 1;
    int v9 = (float *)(v7 + 4 * v8);
    uint64_t v57 = v8;
    LODWORD(v8) = 2 * v8;
    uint64_t v10 = *(unsigned int *)(a1 + 200);
    uint64_t v11 = v7 + 4 * (int)v8;
    uint64_t v12 = a1 + 1688;
    uint64_t v13 = (v10 + 1);
    uint64_t v58 = a4;
    uint64_t v14 = v7 + 4 * (int)v8 + 4 * v13;
    uint64_t v15 = v7 + 4 * v10 + 4 * (int)v8;
    uint64_t v56 = v13 - 2;
    do
    {
      uint64_t v63 = v4;
      float v16 = *(float *)(a2 + 4 * v4);
      float v17 = exp(*v5);
      float v18 = fminf(fmaxf(v16 * v17, -32768.0), 32767.0);
      if ((int)v6 <= 0)
      {
        *int v9 = v18;
        float v31 = 0.0;
        float v29 = v18 + 0.0;
        float v30 = (float *)(v11 + 4 * *(int *)(v12 + 4 * v57));
      }
      else
      {
        float v19 = *(float *)(a1 + 1624);
        float v20 = *(float *)(a1 + 1672);
        float v21 = 0.0;
        unint64_t v22 = v6;
        uint64_t v23 = *(void *)(a1 + 1680);
        do
        {
          float v24 = (float)(v19 * *(float *)(v7 + 4 * v22)) + (float)(v20 * v9[(v22 - 1)]);
          *(float *)(v7 + 4 * v22) = v24;
          float v25 = v24 * v5[1];
          v9[v22] = v25;
          float v26 = v25 * *(float *)(v23 + 4 * v22);
          float v27 = -v26;
          if (v22) {
            float v27 = v26;
          }
          float v18 = v18 + v27;
          float v21 = v21 + v26;
          BOOL v28 = v22-- > 1;
        }
        while (v28);
        *int v9 = v18;
        float v29 = v21 + v18;
        float v30 = (float *)(v11 + 4 * *(int *)(v12 + 4 * v57));
        float v31 = 0.0;
        uint64_t v32 = v6;
        do
        {
          float v33 = v30[(v32 - 1)];
          uint64_t v34 = *(int *)(v12 + 4 * v32);
          float v35 = (float *)(v11 + 4 * v34);
          float v36 = (float)(v19 * v35[1]) + (float)(v20 * v33);
          *float v35 = v33;
          v35[1] = v36;
          float v37 = 0.0;
          if ((int)v10 > 1)
          {
            float v38 = v35[2];
            float v39 = (float *)(v11 + 12 + 4 * v34);
            uint64_t v40 = v56;
            float v41 = v5 + 2;
            do
            {
              float v42 = *v39;
              float v36 = v38 + (float)(v19 * (float)(*v39 - v36));
              *(v39 - 1) = v36;
              float v43 = *v41++;
              float v37 = v37 + (float)(v36 * v43);
              ++v39;
              float v38 = v42;
              --v40;
            }
            while (v40);
          }
          if ((int)v10 >= 1)
          {
            uint64_t v44 = (_DWORD *)(v14 + 4 * v34);
            int v45 = v10 + 2;
            float v46 = (int *)(v15 + 4 * v34);
            do
            {
              int v47 = *v46--;
              *v44-- = v47;
              --v45;
            }
            while (v45 > 2);
          }
          v30[v32] = v37;
          float v48 = v37 * *(float *)(v23 + 4 * v32);
          float v49 = -v48;
          if (v32) {
            float v49 = v48;
          }
          float v29 = v29 + v49;
          float v31 = v31 + v48;
          BOOL v28 = v32-- <= 1;
        }
        while (!v28);
      }
      *float v30 = v29;
      *(float *)(a3 + 4 * v63) = fminf(fmaxf(v31 + v29, -32768.0), 32767.0);
      if (v61)
      {
        int v50 = *(_DWORD *)(a1 + 84) - 1;
        *(_DWORD *)(a1 + 84) = v50;
        if (!v50)
        {
          uint64_t v51 = *(unsigned int *)(a1 + 240);
          if ((v51 & 0x80000000) == 0)
          {
            uint64_t v52 = v51 + 1;
            float v53 = v5;
            float v54 = v61;
            do
            {
              float v55 = *v54++;
              *float v53 = *v53 + v55;
              ++v53;
              --v52;
            }
            while (v52);
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 208);
        }
      }
      uint64_t v4 = v63 + 1;
    }
    while (v63 + 1 != v58);
  }
}

uint64_t BET3FLT__MFVSyn__mlsa_filter_init(uint64_t a1, int a2, float a3, float a4)
{
  *(float *)(a1 + 1624) = a3;
  *(float *)(a1 + 1628) = a4;
  int v4 = *(_DWORD *)(a1 + 200);
  if (v4 < 4) {
    return 0;
  }
  *(_DWORD *)(a1 + 1644) = a2;
  uint64_t Vect = BET3FLT__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 1648, (v4 + 5) * a2 + 3);
  if ((Vect & 0x80000000) == 0)
  {
    v_zap(*(void **)(a1 + 1656), *(_DWORD *)(a1 + 1668));
    float v7 = *(float *)(a1 + 1624);
    *(float *)(a1 + 1636) = -v7;
    *(float *)(a1 + 1632) = v7 * *(float *)(a1 + 1628);
    float v8 = 1.0 - (float)(v7 * v7);
    *(float *)(a1 + 1672) = v8;
    *(float *)(a1 + 1676) = v8;
    int v9 = *(_DWORD *)(a1 + 1644);
    *(void *)(a1 + 1680) = (char *)&g_pade + 24 * v9;
    if (v9 >= -1)
    {
      int v10 = *(_DWORD *)(a1 + 200);
      int v11 = v9 + 2;
      uint64_t v12 = (int *)(a1 + 4 * (v9 + 1) + 1688);
      int v13 = v9 * (v10 + 2);
      int v14 = -2 - v10;
      do
      {
        *v12-- = v13;
        --v11;
        v13 += v14;
      }
      while (v11 > 0);
    }
  }
  return Vect;
}

void *BET3FLT__MFVSyn__mlsa_filter_deinit(uint64_t a1)
{
  return BET3FLT__vect_t__deleteVect((void *)(a1 + 1648));
}

void *MFVSyn__freqt__postFilter(uint64_t a1)
{
  float v2 = *(float *)(a1 + 1636);
  float v3 = *(float *)(a1 + 1676);
  int v4 = *(_DWORD *)(a1 + 200);
  uint64_t v5 = *(unsigned int *)(a1 + 400);
  uint64_t v6 = *(void *)(a1 + 264);
  float v7 = *(void **)(a1 + 288);
  if ((int)v5 >= 1) {
    bzero(*(void **)(a1 + 360), 4 * v5);
  }
  if (v4 < 0)
  {
    int v9 = *(float **)(a1 + 360);
  }
  else
  {
    int v8 = -v4;
    int v9 = *(float **)(a1 + 360);
    int v10 = *(float **)(a1 + 336);
    do
    {
      int v11 = v8;
      *int v10 = *v9;
      int v12 = *((_DWORD *)v9 + 1);
      *int v9 = *(float *)(v6 + 4 * -v8) + (float)(v2 * *v9);
      *((_DWORD *)v10 + 1) = v12;
      v9[1] = (float)(v2 * v9[1]) + (float)(v3 * *v10);
      if ((int)v5 >= 3)
      {
        uint64_t v13 = v5 - 2;
        int v14 = v9 + 2;
        uint64_t v15 = v10 + 2;
        do
        {
          *uint64_t v15 = *v14;
          *int v14 = *(v15 - 1) + (float)(v2 * (float)(*v14 - *(v14 - 1)));
          ++v14;
          ++v15;
          --v13;
        }
        while (v13);
      }
      int v8 = v11 + 1;
    }
    while (v11);
  }

  return v_equ(v7, v9, v5);
}

float MFVSyn__c2ir__postFilter(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 400);
  float v2 = *(float **)(a1 + 288);
  float v3 = *(float **)(a1 + 312);
  float result = exp(*v2);
  *float v3 = result;
  if ((int)v1 >= 2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = v3;
    do
    {
      uint64_t v7 = 0;
      float v8 = 0.0;
      int v9 = v6;
      do
      {
        float v10 = *v9--;
        float v8 = v8 + (float)((float)(v2[v7 + 1] * (float)(v7 + 1)) * v10);
        ++v7;
      }
      while (v5 != v7);
      float result = v8 * g_oneOver[v5];
      v3[v5++] = result;
      ++v6;
    }
    while (v5 != v1);
  }
  return result;
}

float v_equ_fistp(_WORD *a1, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float v5 = *a2++;
      float result = v5;
      *a1++ = (int)v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

float v_equ_fild(float *a1, __int16 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v5 = *a2++;
      float result = (float)v5;
      *a1++ = (float)v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

float v_add(float *a1, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float v5 = *a2++;
      float result = v5 + *a1;
      *a1++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *v_scale_and_add(float *result, float *a2, int a3, float a4)
{
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    float v5 = result;
    do
    {
      float v6 = *a2++;
      float *v5 = *v5 + (float)(a4 * v6);
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *v_equ(void *a1, const void *a2, unsigned int a3)
{
  return a1;
}

_DWORD *v_equ_circ(_DWORD *result, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5 = *a3;
  if (a5 >= 1)
  {
    uint64_t v6 = a5;
    uint64_t v7 = result;
    do
    {
      unsigned int v5 = (v5 + 1) & a4;
      *v7++ = *(_DWORD *)(a2 + 4 * v5);
      --v6;
    }
    while (v6);
  }
  *a3 = v5;
  return result;
}

_DWORD *v_equ_int(_DWORD *result, int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = result;
    do
    {
      int v5 = *a2++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

double v_inner(float *a1, float *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = a3;
  double result = 0.0;
  do
  {
    float v5 = *a1++;
    float v6 = v5;
    float v7 = *a2++;
    *(float *)&double result = *(float *)&result + (float)(v6 * v7);
    --v3;
  }
  while (v3);
  return result;
}

double v_magsq(float *a1, int a2)
{
  if (a2 < 1) {
    return 0.0;
  }
  uint64_t v2 = a2;
  double result = 0.0;
  do
  {
    float v4 = *a1++;
    *(float *)&double result = *(float *)&result + (float)(v4 * v4);
    --v2;
  }
  while (v2);
  return result;
}

double v_sum(float *a1, int a2)
{
  if (a2 < 1) {
    return 0.0;
  }
  uint64_t v2 = a2;
  double result = 0.0;
  do
  {
    float v4 = *a1++;
    *(float *)&double result = *(float *)&result + v4;
    --v2;
  }
  while (v2);
  return result;
}

float *v_scale(float *result, int a2, float a3)
{
  if (a3 != 1.0 && a2 >= 1)
  {
    uint64_t v4 = a2;
    float v5 = result;
    do
    {
      float *v5 = *v5 * a3;
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

float *v_set(float *result, int a2, float a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    do
    {
      *v4++ = a3;
      --v3;
    }
    while (v3);
  }
  return result;
}

float v_sub(float *a1, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      float v5 = *a2++;
      float result = *a1 - v5;
      *a1++ = result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *v_zap(void *a1, int a2)
{
  if (a2 >= 1) {
    bzero(a1, 4 * a2);
  }
  return a1;
}

void *v_zap_int(void *a1, int a2)
{
  if (a2 >= 1) {
    bzero(a1, 4 * a2);
  }
  return a1;
}

float *v_fill(float *result, int a2, float a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    do
    {
      *result++ = a3;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *interp_array(float *result, float *a2, float *a3, int a4, float a5)
{
  if (a4 >= 1)
  {
    uint64_t v5 = a4;
    do
    {
      float v6 = *a2++;
      float v7 = v6;
      float v8 = *result++;
      *a3++ = (float)((float)(1.0 - a5) * v8) + (float)(a5 * v7);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t zerflt(uint64_t result, float *a2, uint64_t a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = a5;
    uint64_t v6 = result + 4 * a5 - 4;
    do
    {
      float v7 = 0.0;
      if (a4 >= 1)
      {
        uint64_t v8 = a4;
        int v9 = a2;
        float v10 = (float *)v6;
        do
        {
          float v11 = *v10--;
          float v12 = v11;
          float v13 = *v9++;
          float v7 = v7 + (float)(v12 * v13);
          --v8;
        }
        while (v8);
      }
      *(float *)(a3 + 4 * (v5 - 1)) = v7;
      v6 -= 4;
    }
    while (v5-- > 1);
  }
  return result;
}

float wave_t__convertFromTpToMsec(float *a1, float a2)
{
  return (float)(a2 * 1000.0) / *a1;
}

double BET3FLT__wave_t__convertFromF0ToTp(float *a1, float a2)
{
  if (a2 == 0.0) {
    return 0.0;
  }
  *(float *)&double result = (float)(1.0 / a2) * *a1;
  return result;
}

float BET3FLT__wave_t__convertFromTpToF0(float *a1, float a2)
{
  return (float)(1.0 / a2) * *a1;
}

float BET3FLT__wave_t__convertFromMsecToTp(float *a1, float a2)
{
  return (float)(a2 * 0.001) * *a1;
}

float BET3FLT__wave_t__sampleRateHz(uint64_t a1)
{
  return *(float *)a1;
}

float *BET3FLT__wave_t__setSampleRateHz(float *result, float a2)
{
  if (result)
  {
    if (a2 > 0.0) {
      *double result = a2;
    }
  }
  return result;
}

float wave_t__convertFromTpToMsec__SR(float a1, float a2)
{
  return a2 * 1000.0 / a1;
}

double wave_t__convertFromF0ToTp__SR(float a1, float a2)
{
  if (a2 == 0.0) {
    return 0.0;
  }
  double result = 1.0 / a2 * a1;
  *(float *)&double result = result;
  return result;
}

float wave_t__convertFromTpToF0__SR(float a1, float a2)
{
  return 1.0 / a2 * a1;
}

float wave_t__convertFromMsecToTp__SR(float a1, float a2)
{
  return (float)(a2 * 0.001) * a1;
}

uint64_t BET3FLT__MFVSyn__loadExcTable(void *a1, char *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  double v31 = 0.0;
  cstdlib_memcpy(__dst, a2, 0x30uLL);
  uint64_t v4 = (int *)(a1 + 99);
  cstdlib_memcpy(a1 + 99, a2 + 48, 4uLL);
  uint64_t v5 = (_WORD *)a1 + 398;
  cstdlib_memcpy((char *)a1 + 796, a2 + 52, 2uLL);
  cstdlib_memcpy((char *)a1 + 798, a2 + 54, 2uLL);
  uint64_t v6 = a1 + 100;
  cstdlib_memcpy(a1 + 100, a2 + 56, 2uLL);
  cstdlib_memcpy((char *)a1 + 802, a2 + 58, 2uLL);
  cstdlib_memcpy((char *)a1 + 804, a2 + 60, 2uLL);
  cstdlib_memcpy((char *)a1 + 806, a2 + 62, 2uLL);
  uint64_t v7 = heap_Alloc(*(void *)(*a1 + 8), 4 * (*((unsigned __int16 *)a1 + 400) + *((unsigned __int16 *)a1 + 398)) * *((_DWORD *)a1 + 198));
  a1[101] = v7;
  uint64_t v8 = *((unsigned int *)a1 + 198);
  if ((int)v8 > 1)
  {
    uint64_t v9 = *((unsigned __int16 *)a1 + 398);
    float v10 = a1 + 104;
    uint64_t v11 = v8 - 1;
    uint64_t v12 = v9;
    do
    {
      *float v10 = v7 + 4 * v12;
      v10 += 3;
      v12 += v9;
      --v11;
    }
    while (v11);
  }
  if ((int)v8 >= 1)
  {
    uint64_t v13 = 0;
    int v14 = a2 + 64;
    uint64_t v15 = a1 + 101;
    float v16 = &a1[3 * (v8 - 1) + 101];
    uint64_t v17 = *((unsigned __int16 *)a1 + 400);
    uint64_t v18 = *((unsigned __int16 *)a1 + 398);
    float v19 = a1 + 102;
    do
    {
      *float v19 = *v16 + 4 * v13 + 4 * v18;
      v19 += 3;
      v13 += v17;
      --v8;
    }
    while (v8);
    uint64_t v20 = 0;
    do
    {
      cstdlib_memcpy(v32, v14, 8 * (unsigned __int16)*v5);
      uint64_t v21 = (unsigned __int16)*v5;
      if (*v5)
      {
        uint64_t v22 = 0;
        do
        {
          float v23 = v32[v22];
          *(float *)(v15[3 * v20] + 4 * v22++) = v23;
        }
        while (v21 != v22);
      }
      float v24 = &v14[8 * v21];
      cstdlib_memcpy(v32, v24, 8 * (unsigned __int16)*v6);
      uint64_t v25 = (unsigned __int16)*v6;
      if (*v6)
      {
        uint64_t v26 = 0;
        do
        {
          float v27 = v32[v26];
          *(float *)(v15[3 * v20 + 1] + 4 * v26++) = v27;
        }
        while (v25 != v26);
      }
      BOOL v28 = &v24[8 * v25];
      cstdlib_memcpy(&v31, v28, 8uLL);
      int v14 = v28 + 8;
      float v29 = v31;
      *(float *)&v15[3 * v20++ + 2] = v29;
    }
    while (v20 < *v4);
  }
  return 0;
}

void *BET3FLT__MFVSyn__releaseExcTable(void *result)
{
  uint64_t v1 = result[101];
  if (v1)
  {
    uint64_t v2 = result;
    double result = heap_Free(*(void **)(*result + 8), v1);
    v2[101] = 0;
  }
  return result;
}

uint64_t BET3FXD__InitTreeSet(int a1, void *__b)
{
  return 0;
}

void *BET3FXD__DeInitTreeSet(void *result, char *__b)
{
  if (__b)
  {
    uint64_t v3 = (uint64_t)result;
    for (uint64_t i = 104; i != 184; i += 8)
    {
      uint64_t v5 = *(void *)&__b[i];
      if (v5) {
        heap_Free(*(void **)(v3 + 8), v5);
      }
    }
    return cstdlib_memset(__b, 0, 0xD0uLL);
  }
  return result;
}

uint64_t BET3FXD__LoadTreesFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  unsigned __int16 v30 = 0;
  uint64_t v9 = *a4;
  if (a4[4] - v9 >= 8 && *(unsigned char *)(*((void *)a4 + 1) + v9) == 48)
  {
    *a4 = v9 + 2;
    uint64_t v12 = a3;
    uint64_t v13 = (_WORD *)(a2 + 2 * a3 + 184);
    if (BET3FXD__xfread_BET3(v13, 2u, 1, a4) == 1
      && BET3FXD__xfread_BET3(&v30, 2u, 1, a4) == 1
      && BET3FXD__xfread_BET3((void *)(a2 + 2 * v12), 2u, 1, a4) == 1)
    {
      int v14 = BET3FXD__xfread2ptr_BET3((void *)(a2 + 8 * v12 + 24), 1u, v30, a4);
      if (v14 == v30)
      {
        if (*a4) {
          ++*a4;
        }
        uint64_t v15 = heap_Calloc(*(void **)(v8 + 8), 16, (unsigned __int16)*v13);
        uint64_t v21 = a2 + 8 * v12;
        *(void *)(v21 + 104) = v15;
        uint64_t v22 = (uint64_t *)(v21 + 104);
        if (!v15)
        {
          BET3FXD__log_select_Error(v8, 55000, (uint64_t)"LoadTreesFile : out of memory for type %s\n", v16, v17, v18, v19, v20);
          return 2229280778;
        }
        if (!*v13) {
          return 0;
        }
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        while (BET3FXD__xfread_BET3((void *)(v15 + v23), 2u, 1, a4) == 1)
        {
          if (BET3FXD__xfread_BET3((void *)(*v22 + v23 + 2), 2u, 1, a4) != 1) {
            break;
          }
          int v25 = BET3FXD__xfread2ptr_BET3((void *)(*v22 + v23 + 8), 2u, 3 * *(unsigned __int16 *)(*v22 + v23 + 2), a4);
          uint64_t v15 = *v22;
          if (v25 != 3 * *(unsigned __int16 *)(*v22 + v23 + 2)) {
            break;
          }
          uint64_t v26 = 0;
          ++v24;
          v23 += 16;
          if (v24 >= (unsigned __int16)*v13) {
            return v26;
          }
        }
        uint64_t v26 = 2229280772;
        float v27 = "LoadTreesFile : corrupt tree nodes for type %s, state %u\n";
        a1 = v8;
        uint64_t v28 = 55015;
      }
      else
      {
        uint64_t v26 = 2229280772;
        float v27 = "LoadTreesFile : corrupt tree questions for type %s\n";
        a1 = v8;
        uint64_t v28 = 55013;
      }
    }
    else
    {
      uint64_t v26 = 2229280772;
      float v27 = "LoadTreesFile : corrupt tree header for type %s\n";
      a1 = v8;
      uint64_t v28 = 55012;
    }
  }
  else
  {
    uint64_t v26 = 2229280772;
    float v27 = "LoadTreesFile : invalid tree data version for type %s\n";
    uint64_t v28 = 55011;
  }
  BET3FXD__log_select_Error(a1, v28, (uint64_t)v27, (uint64_t)a4, a5, a6, a7, a8);
  return v26;
}

uint64_t BET3FXD__TreeSearch(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  LOWORD(v5) = 0;
  uint64_t v6 = a3 + 8 * a4;
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(v6 + 104) + 16 * a5 + 8);
  uint64_t v9 = a2 + 2;
  uint64_t v10 = a2 + 1;
  while (2)
  {
    uint64_t v11 = -(uint64_t)(__int16)v5;
    uint64_t v12 = (unsigned __int16 *)(v8 + 6 * (int)v11);
    uint64_t v13 = (unsigned __int8 *)(v7 + *v12);
    uint64_t v14 = *v13;
    int v15 = v13[1];
    uint64_t v5 = v12[1];
    switch(*v13)
    {
      case 0xFCu:
        if (a2 < 2) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 2));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFDu:
        if (a2 < 1) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + (a2 - 1));
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFEu:
        if ((int)v10 >= *(__int16 *)(a1 + 10)) {
          goto LABEL_20;
        }
        unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v10);
        if (v13[1]) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 0xFFu:
        if ((int)v9 >= *(__int16 *)(a1 + 10))
        {
LABEL_20:
          unsigned __int8 v16 = -1;
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        else
        {
          unsigned __int8 v16 = *(unsigned char *)(*(void *)(a1 + 32) + v9);
          if (v13[1]) {
            goto LABEL_24;
          }
        }
        goto LABEL_39;
      default:
        if (v14 == 3)
        {
          unsigned int v17 = *(unsigned __int16 *)(*(void *)(a1 + 1784) + 2 * a2);
          BOOL v18 = v17 > 0x19;
          unsigned __int8 v16 = 10 * v17;
          if (v18) {
            unsigned __int8 v16 = -1;
          }
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(a1 + 8 * v14 + 16);
          if (!v19) {
            goto LABEL_39;
          }
          unsigned __int8 v16 = *(unsigned char *)(v19 + a2);
          if (!v13[1]) {
            goto LABEL_39;
          }
        }
LABEL_24:
        uint64_t v20 = v13 + 2;
        if (v15 == 255)
        {
          if (*v20 <= v16 && v13[3] >= v16) {
            goto LABEL_30;
          }
        }
        else
        {
          int v21 = v15 - 1;
          if (v21)
          {
            int v22 = 0;
            while (1)
            {
              int v23 = v21 + v22;
              if (v21 + v22 < 0 != __OFADD__(v21, v22)) {
                ++v23;
              }
              int v24 = v23 >> 1;
              unsigned int v25 = v20[v24];
              if (v25 == v16) {
                break;
              }
              if (v16 < v25) {
                int v21 = v24 - 1;
              }
              else {
                int v22 = v24 + 1;
              }
              if (v22 > v21) {
                goto LABEL_39;
              }
            }
LABEL_30:
            uint64_t v5 = *(unsigned __int16 *)(v8 + 6 * (int)v11 + 4);
            goto LABEL_39;
          }
          if (*v20 == v16) {
            goto LABEL_30;
          }
        }
LABEL_39:
        if ((v5 & 0x8000) != 0) {
          continue;
        }
        return v5;
    }
  }
}

uint64_t BET3FXD__select_bet3_FeatureExtractObjOpen(_WORD *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v16 = 0;
  *a5 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v9 = (void *)heap_Calloc(*(void **)(v16 + 8), 1, 24);
    if (v9)
    {
      *uint64_t v9 = v16;
      v9[1] = a3;
      v9[2] = a4;
      *a5 = v9;
    }
    else
    {
      log_OutPublic(*(void *)(v16 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v10, v11, v12, v13, v15);
      return 2229280778;
    }
  }
  return inited;
}

uint64_t BET3FXD__select_bet3_FeatureExtractObjClose(uint64_t a1)
{
  if (a1) {
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
  }
  return 0;
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__b, _DWORD *a6)
{
  __s1 = 0;
  cstdlib_memset(__b, 0, 0xE48uLL);
  *uint64_t __b = a2;
  if ((paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && !cstdlib_strcmp(__s1, "bet3"))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a1[2] + 272))(a3, a4, 128, 3, 0, 0);
  }
  return usextract_ProcessStart(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, (uint64_t)__b, a6);
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcess(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v15 = *a1;
  if (a11) {
    BOOL v16 = a12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  if (!v16)
  {
    *a11 = 0;
    *a12 = 0;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = *(__int16 *)(a10 + 10);
  do
  {
    if (*(unsigned char *)(*(void *)a10 + 2748 + v18) == 1) {
      ++v19;
    }
    ++v18;
  }
  while (v18 != 218);
  uint64_t v21 = heap_Calloc(*(void **)(v15 + 8), (v19 * v20), 1);
  if (!v21) {
    goto LABEL_119;
  }
  uint64_t v26 = v21;
  int v104 = v17;
  uint64_t v106 = a4;
  uint64_t v107 = a3;
  for (uint64_t i = 0; i != 218; ++i)
  {
    uint64_t v28 = *(void *)a10;
    int v29 = *(unsigned __int8 *)(*(void *)a10 + i + 2748);
    if (*(unsigned char *)(*(void *)a10 + i + 2748))
    {
      if (v29 == 2)
      {
        uint64_t v30 = heap_Calloc(*(void **)(v15 + 8), v20, 2);
        *(void *)(a10 + 8 * i + 1760) = v30;
        if (!v30) {
          goto LABEL_43;
        }
      }
      else if (v29 == 1)
      {
        *(void *)(a10 + 8 * i + 16) = v26;
        v26 += v20;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            uint64_t v31 = heap_Calloc(*(void **)(v15 + 8), v20, 9);
            *(void *)(a10 + 3560) = v31;
            if (!v31) {
              goto LABEL_43;
            }
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_28;
          case '3':
            int v33 = *(unsigned __int16 *)(v28 + 2966);
            if (v33)
            {
              uint64_t v34 = heap_Calloc(*(void **)(v15 + 8), (v33 * v20), 4);
              *(void *)(a10 + 3568) = v34;
              if (!v34) {
                goto LABEL_43;
              }
            }
            continue;
          case '4':
            int v35 = *(unsigned __int16 *)(v28 + 2966);
            if (v35)
            {
              uint64_t v36 = heap_Calloc(*(void **)(v15 + 8), (v35 * v20), 4);
              *(void *)(a10 + 3576) = v36;
              if (!v36) {
                goto LABEL_43;
              }
            }
            continue;
          case '5':
            int v37 = *(unsigned __int16 *)(v28 + 3360);
            if (v37)
            {
              uint64_t v38 = heap_Calloc(*(void **)(v15 + 8), (v37 * v20), 4);
              *(void *)(a10 + 3584) = v38;
              if (!v38) {
                goto LABEL_43;
              }
            }
            continue;
          case '6':
            int v39 = *(unsigned __int16 *)(v28 + 3360);
            if (v39)
            {
              uint64_t v40 = heap_Calloc(*(void **)(v15 + 8), (v39 * v20), 4);
              *(void *)(a10 + 3592) = v40;
              if (!v40) {
                goto LABEL_43;
              }
            }
            continue;
          case '8':
            int v41 = *(unsigned __int16 *)(v28 + 2966);
            if (v41)
            {
              uint64_t v42 = heap_Calloc(*(void **)(v15 + 8), (v41 * v20), 1);
              *(void *)(a10 + 3600) = v42;
              if (!v42) {
                goto LABEL_43;
              }
            }
            continue;
          default:
            if (i == 24)
            {
              uint64_t v32 = heap_Calloc(*(void **)(v15 + 8), v20, 8);
              *(void *)(a10 + 3552) = v32;
              if (!v32)
              {
LABEL_43:
                int v43 = -2065686518;
                log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v101);
                goto LABEL_44;
              }
            }
            else
            {
LABEL_28:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55007, (uint64_t)"%s%u", v22, v23, v24, v25, "feature");
            }
            break;
        }
      }
    }
  }
  unsigned int v44 = *(unsigned __int16 *)(*(void *)a10 + 3578);
  if (v44 >= 4)
  {
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, (uint64_t)"Invalid number of states per phoneme", v22, v23, v24, v25, "%s%u");
    int v43 = -2065686513;
    goto LABEL_122;
  }
  int v45 = (void *)heap_Calloc(*(void **)(v15 + 8), v44 * v20, 4);
  *(void *)(a10 + 3608) = v45;
  if (!v45)
  {
    int v43 = -2065686518;
    log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v46, v47, v48, v49, v101);
LABEL_122:
    if (!a12) {
      goto LABEL_127;
    }
    goto LABEL_123;
  }
  if (*(unsigned __int16 *)(*(void *)a10 + 3578) * v20) {
    memset(v45, 255, 4 * *(unsigned __int16 *)(*(void *)a10 + 3578) * v20);
  }
  int GenericFeatureLayers = usextract_allocateGenericFeatureLayers(*a1, (uint64_t)"SELECT_BET3", (void *)a10, v20);
  if (GenericFeatureLayers < 0)
  {
    int v43 = GenericFeatureLayers;
    if (!a12) {
      goto LABEL_127;
    }
    goto LABEL_123;
  }
  int v43 = usextract_Process(*a1, (uint64_t)"SELECT_BET3", a1[2], a3, a4, a10, v51, v52);
  if (v43 < 0) {
    goto LABEL_122;
  }
  if (*(void *)(a10 + 3504))
  {
    float v53 = **(const char ***)(*(void *)a10 + 3336);
    if (v53)
    {
      uint64_t v54 = 0;
      unsigned int v55 = 1;
      do
      {
        int v56 = cstdlib_strncmp(v53, "INNO_", 5uLL);
        uint64_t v57 = *(void *)a10;
        if (v56)
        {
          uint64_t v58 = *(const char ***)(*(void *)(v57 + 3344) + 8 * v54);
          size_t v59 = cstdlib_strlen("FEATIDX");
          unsigned int Index = usextract_getIndex(v58, "FEATIDX", (unint64_t)&aFeatidx[v59]);
          if (Index == -1)
          {
            if (cstdlib_strcmp(*(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v54), "POS"))
            {
              if (!cstdlib_strcmp(*(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v54), "PHR")) {
                *(void *)(a10 + 512) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
              }
            }
            else
            {
              *(void *)(a10 + 504) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
            }
          }
          else
          {
            *(void *)(a10
                      + 8 * *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)a10 + 3352) + 8 * v54) + Index)
                      + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
          }
        }
        else
        {
          unsigned int v61 = cstdlib_atoi((unsigned __int8 *)(*(void *)(*(void *)(v57 + 3336) + 8 * v54) + 5)) + 79;
          if (v61 <= 0x5E) {
            *(void *)(a10 + 8 * v61 + 16) = *(void *)(*(void *)(a10 + 3504) + 8 * v54);
          }
        }
        uint64_t v54 = v55;
        float v53 = *(const char **)(*(void *)(*(void *)a10 + 3336) + 8 * v55++);
      }
      while (v53);
    }
  }
  int v102 = *(__int16 *)(a10 + 10);
  unsigned int v103 = v102 & ~(v102 >> 31);
  if (BET3FXD__log_select_GetLogLevel(*(void *)(v15 + 32)) >= 6)
  {
    LH_itoa(0x4Eu, (char *)v110, 0xAu);
    for (uint64_t j = 0; j != 218; ++j)
    {
      uint64_t v63 = "application/x-realspeak-usplosives;version=4.0";
      switch((int)j)
      {
        case 2:
          char v109 = 5;
          char v108 = 0;
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            (uint64_t)&v109,
            1u,
            0);
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            *(void *)(a10 + 8 * j + 16),
            v103,
            0);
          log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
            (uint64_t)&v108,
            1u,
            0);
          continue;
        case 3:
          uint64_t v63 = "application/x-realspeak-usdurs;version=4.0";
          goto LABEL_72;
        case 4:
          goto LABEL_72;
        case 5:
          uint64_t v63 = "application/x-realspeak-usmarkers-u16;version=4.0";
LABEL_72:
          int v64 = *(unsigned __int8 *)(*(void *)a10 + j + 2748);
          if (v64 == 2)
          {
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)v63, *(void *)(a10 + 8 * j + 1760), 2 * v103, 0);
          }
          else if (v64 == 1)
          {
            log_OutBinary(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 99, 0, (uint64_t)v110, (uint64_t)v63, *(void *)(a10 + 8 * j + 16), v103, 0);
          }
          break;
        default:
          continue;
      }
    }
  }
  unint64_t v65 = *(unsigned int *)(a10 + 3520);
  if (v65)
  {
    uint64_t v66 = 0;
    for (unint64_t k = 0; k < v65; ++k)
    {
      if (*(_DWORD *)(*(void *)(a10 + 3512) + v66) == 25)
      {
        v110[0] = 0;
        paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v110);
        unsigned int v68 = *(_DWORD *)(*(void *)(a10 + 3512) + v66 + 24);
        *a9 = v68;
        int v43 = paramc_ParamSetInt(*(void *)(v15 + 40), (uint64_t)"waitfactor", v68);
        if (v43 < 0)
        {
          log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%d%s%x", v69, v70, v71, v72, "parameter");
          goto LABEL_44;
        }
        unint64_t v65 = *(unsigned int *)(a10 + 3520);
      }
      v66 += 32;
    }
  }
  featextract_adjustSilAudioOrder(a10);
  a4 = v106;
  a3 = v107;
  if (v104)
  {
    int v73 = *(_DWORD *)(a10 + 3520);
    uint64_t v74 = v73 + v103;
    *a12 = v74;
    if (v73 + v103)
    {
      uint64_t v75 = heap_Calloc(*(void **)(v15 + 8), v74, 32);
      *a11 = v75;
      if (v75)
      {
        uint64_t v76 = (void *)heap_Calloc(*(void **)(v15 + 8), *(__int16 *)(a10 + 10), 2);
        if (v76)
        {
          uint64_t v77 = (uint64_t)v76;
          cstdlib_memcpy(v76, *(const void **)(a10 + 1800), 2 * *(__int16 *)(a10 + 10));
          if (*a12)
          {
            uint64_t v78 = 0;
            unint64_t v79 = 0;
            unsigned int v80 = 0;
            unint64_t v81 = 0;
            while (v81 < *(unsigned int *)(a10 + 3520))
            {
              if (v80 >= v103)
              {
                unsigned int v87 = (_OWORD *)(*a11 + v78);
                BOOL v88 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
                long long v89 = v88[1];
                _OWORD *v87 = *v88;
                v87[1] = v89;
                ++v81;
                goto LABEL_96;
              }
              uint64_t v82 = v80;
              if (!*(_WORD *)(v77 + 2 * v80)) {
                goto LABEL_94;
              }
              uint64_t v83 = (_OWORD *)(*a11 + v78);
              float v84 = (_OWORD *)(*(void *)(a10 + 3512) + 32 * v81);
              long long v85 = v84[1];
              *uint64_t v83 = *v84;
              v83[1] = v85;
              ++v81;
              --*(_WORD *)(v77 + 2 * v80);
LABEL_96:
              ++v79;
              v78 += 32;
              if (v79 >= *a12) {
                goto LABEL_97;
              }
            }
            uint64_t v82 = v80;
LABEL_94:
            int v86 = (_DWORD *)(*a11 + v78);
            *int v86 = 33;
            v86[6] = *(unsigned __int8 *)(*(void *)(a10 + 32) + v82);
            ++v80;
            goto LABEL_96;
          }
LABEL_97:
          heap_Free(*(void **)(v15 + 8), v77);
          goto LABEL_98;
        }
      }
LABEL_119:
      int v43 = -2065686518;
      log_OutPublic(*(void *)(v15 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v22, v23, v24, v25, v101);
      if (!a12) {
        goto LABEL_127;
      }
      goto LABEL_123;
    }
  }
LABEL_98:
  if (v102 < 1) {
    goto LABEL_122;
  }
  uint64_t v90 = 0;
  if (v103 <= 1) {
    uint64_t v91 = 1;
  }
  else {
    uint64_t v91 = v103;
  }
  uint64_t v92 = a2;
  do
  {
    uint64_t v93 = *(void *)(a10 + 248);
    if (!*(unsigned char *)(v93 + v90)) {
      *(unsigned char *)(v93 + v90) = -1;
    }
    uint64_t v94 = *(void *)(a10 + 192);
    if (*(unsigned char *)(*(void *)(a10 + 32) + v90) == 35) {
      char v95 = 1;
    }
    else {
      char v95 = 2 * *(unsigned char *)(v94 + v90);
    }
    *(unsigned char *)(v94 + v90) = v95;
    uint64_t v96 = *(void *)(a10 + 32);
    if ((unsigned __int16)(v102 & ~(unsigned __int16)(v102 >> 31)) - 1 == v90 && *(unsigned char *)(v96 + v90) == 35)
    {
      v110[0] = 0;
      paramc_ParamGetUInt(*(void *)(v15 + 40), (uint64_t)"finalsentencefound", v110);
      int v97 = 0;
      uint64_t v98 = *(void *)(a10 + 1784);
      if (v110[0] != 1) {
        int v97 = *(unsigned __int16 *)(v98 + 2 * v90) + 200 * *a9;
      }
      if (v97 <= 1) {
        int v97 = 1;
      }
      if (v97 >= 0xFFFF) {
        LOWORD(v97) = -1;
      }
      *(_WORD *)(v98 + 2 * v90) = v97;
      uint64_t v96 = *(void *)(a10 + 32);
      uint64_t v92 = a2;
    }
    *(unsigned char *)(v96 + v90) = *(unsigned char *)(v92 + *(unsigned __int8 *)(v96 + v90) + 7356);
    ++v90;
  }
  while (v91 != v90);
LABEL_44:
  a4 = v106;
  a3 = v107;
  if (a12)
  {
LABEL_123:
    if (a11 && v43 < 0 && *a11)
    {
      heap_Free(*(void **)(v15 + 8), *a11);
      *a11 = 0;
      *a12 = 0;
    }
  }
LABEL_127:
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t))(a1[2] + 64))(a3, a4);
  if ((int)result >= 0 || v43 <= -1) {
    return v43;
  }
  else {
    return result;
  }
}

uint64_t BET3FXD__select_bet3_FeatureExtractProcessEnd(uint64_t *a1, void *a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = usextract_ProcessEnd(*a1, (uint64_t)"SELECT_BET3", (uint64_t)a2);
  usextract_freeGenericFeatureLayers((void *)*a1, (uint64_t)"SELECT_BET3", a2);
  uint64_t v10 = 0;
  int v11 = 1;
  do
  {
    int v12 = *(unsigned __int8 *)(*a2 + v10 + 2748);
    if (*(unsigned char *)(*a2 + v10 + 2748))
    {
      if (v12 == 2)
      {
        uint64_t v14 = a2[v10 + 220];
        if (v14) {
LABEL_11:
        }
          heap_Free(*(void **)(v4 + 8), v14);
      }
      else if (v12 == 1)
      {
        if (v11)
        {
          uint64_t v13 = a2[v10 + 2];
          if (v13) {
            heap_Free(*(void **)(v4 + 8), v13);
          }
          int v11 = 0;
        }
      }
      else
      {
        switch((int)v10)
        {
          case '.':
            uint64_t v14 = a2[445];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            uint64_t v14 = a2[446];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '4':
            uint64_t v14 = a2[447];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '5':
            uint64_t v14 = a2[448];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '6':
            uint64_t v14 = a2[449];
            if (v14) {
              goto LABEL_11;
            }
            break;
          case '8':
            uint64_t v14 = a2[450];
            if (v14) {
              goto LABEL_11;
            }
            break;
          default:
            if (v10 == 24)
            {
              uint64_t v14 = a2[444];
              if (v14) {
                goto LABEL_11;
              }
            }
            else
            {
LABEL_20:
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"SELECT_BET3", 55010, (uint64_t)"%s%u", v6, v7, v8, v9, "feature");
            }
            break;
        }
      }
    }
    ++v10;
  }
  while (v10 != 218);
  uint64_t v15 = a2[451];
  if (v15) {
    heap_Free(*(void **)(v4 + 8), v15);
  }
  cstdlib_memset(a2, 0, 8uLL);
  return v5;
}

uint64_t BET3FXD__mul_int32_Q8_24_to_int32(int a1, int a2)
{
  return ((a2 * a1) >> 24);
}

uint64_t BET3FXD__mul_int32_Q8_24_to_Q8_24(int a1, int a2)
{
  return (a2 * a1);
}

uint64_t BET3FXD__mul_Q18_14_Q1_15_to_Q18_14(uint64_t result, int a2)
{
  if (a2 == 0x7FFF) {
    return result;
  }
  else {
    return ((unint64_t)(a2 * (uint64_t)(int)result) >> 15);
  }
}

uint64_t BET3FXD__div_int32_int32_to_Q8_24(int a1, int a2)
{
  return (((a1 << 16) / a2) << 8);
}

uint64_t BET3FXD__div_Q8_24_Q12_20_to_Q8_24(int a1, int a2)
{
  return ((a1 / (a2 >> 8)) << 12);
}

uint64_t BET3FXD__div_Q18_14_Q18_14_to_Q18_14(int a1, int a2)
{
  return ((16 * a1 / (a2 >> 4)) << 6);
}

uint64_t BET3FXD__Q8_24_to_int32(int a1)
{
  return (a1 >> 24);
}

uint64_t BET3FXD__Q10_22_to_Q8_24(int a1)
{
  return (4 * a1);
}

uint64_t BET3FXD__int32_to_Q8_24(int a1)
{
  return (a1 << 24);
}

uint64_t BET3FXD__int32_to_Q12_20(int a1)
{
  return (a1 << 20);
}

uint64_t BET3FXD__int32_to_Q18_14(int a1)
{
  return (a1 << 14);
}

uint64_t BET3FXD__Q18_14_to_Q1_15(__int16 a1)
{
  return (__int16)(2 * a1);
}

uint64_t BET3FXD__LoadModelFile(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2[a3 + 120])
  {
    uint64_t result = loadQuantizedDurFile(a1, (uint64_t)(a2 + 42), a4, 0xFu);
    if (result) {
      return result;
    }
    *a2 = a2[43];
  }
  uint64_t v13 = &a2[a3];
  if (v13[130])
  {
    uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), (*(_DWORD *)(a6 + 268) - 1), 4);
    *((void *)a2 + 53) = v14;
    if (!v14) {
      return 2229280778;
    }
    uint64_t result = loadVQQuantizedCepFile(a1, (unsigned __int16 *)a2 + 196, a4);
    if (result) {
      return result;
    }
    *a2 = *((unsigned __int16 *)a2 + 199);
    a2[a3 + 1] = *((unsigned __int16 *)a2 + 198) + *((unsigned __int16 *)a2 + 198) * *((unsigned __int16 *)a2 + 201);
    uint64_t result = loadCodebookSet(a1, (uint64_t)(a2 + 116), a5, 0x10u);
    if (result) {
      return result;
    }
  }
  if (!v13[140]) {
    return 0;
  }
  uint64_t v15 = (uint64_t *)&a2[2 * a3 + 78];
  if (*v15) {
    heap_Free(*(void **)(a1 + 8), *v15);
  }
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 1, 128);
  *uint64_t v15 = v16;
  if (!v16) {
    return 2229280778;
  }
  int v17 = *(_DWORD *)(a6 + 4 * a3 + 224);
  if (v17 == 2)
  {
    int v18 = 3774880;
    unsigned int v19 = 20;
  }
  else if (v17 == 3)
  {
    int v18 = 1310720;
    unsigned int v19 = 18;
  }
  else
  {
    unsigned int v19 = 0;
    int v18 = 0;
  }
  uint64_t result = loadQuantizedMsdFile(a1, v16, *a2, a4, v19, v18);
  if (!result) {
    a2[a3 + 1] = *(_DWORD *)(*v15 + 8);
  }
  return result;
}

uint64_t BET3FXD__FindDurPDF(uint64_t a1, int *a2, int a3, int a4)
{
  int v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  if (*a2 < 1) {
    return 0;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = (uint64_t)(a2 + 42);
  int v12 = v4 - 1;
  while (1)
  {
    uint64_t v20 = 0;
    uint64_t result = dequantDur(v11, v12, v9, (_DWORD *)&v20 + 1, &v20, 15);
    if ((result & 0x80000000) != 0) {
      break;
    }
    int v14 = HIDWORD(v20);
    int v15 = BET3FXD__mul_Q18_14_Q1_15_to_Q18_14(((int)v20 >> 1), a3);
    unsigned int v16 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
    if (a2[151])
    {
      if (v16 >= 0x3E7F060) {
        int v10 = 65532000;
      }
      else {
        int v10 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
      }
    }
    else if (v16 <= 0x3E7F060)
    {
      int v10 = (v15 + (v14 >> 1)) & ~((v15 + (v14 >> 1)) >> 31);
    }
    else
    {
      v10 >>= 1;
    }
    int v17 = a4 + ((v10 + 0x2000) >> 14);
    uint64_t v18 = *(void *)(a1 + 16) + 4 * v9;
    *(_DWORD *)(v18 + 8) = v17;
    *(_DWORD *)(a1 + 24) += v17;
    a4 = (v10 + 0x2000 - (*(_DWORD *)(v18 + 8) << 14)) >> 14;
    uint64_t v19 = v9 + 2;
    ++v9;
    if (v19 > *a2) {
      return 0;
    }
  }
  return result;
}

uint64_t BET3FXD__FindContPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  unint64_t v35 = 0;
  int v10 = a1;
  int v11 = *a8;
  int v12 = *a8 * *(unsigned __int16 *)(a4 + 396);
  LODWORD(v13) = *(unsigned __int16 *)(a4 + 402);
  int v14 = v12 + v12 * v13;
  if (*(_WORD *)(a4 + 396))
  {
    uint64_t v31 = a3;
    uint64_t v32 = a8;
    unsigned int v16 = 0;
    int v17 = *(_DWORD *)(*(void *)(a3 + 8 * a1 + 72) + 4 * a2);
    uint64_t v18 = (unsigned __int16 *)(a4 + 392);
    uint64_t v19 = a4 + 464;
    int v20 = v14 + 1;
    int v33 = v12 + v12 * v13;
    while (1)
    {
      uint64_t result = dequantEnergy(v18, a2, (unsigned __int16)v17, v16, (_DWORD *)&v35 + 1, &v35, 0x10u);
      if ((result & 0x80000000) != 0) {
        break;
      }
      int v22 = v16 + v16 * v13 + v14;
      LODWORD(v35) = (int)v35 >> 4;
      int v23 = v35;
      HIDWORD(v35) <<= 8;
      *(_DWORD *)(a6 + 4 * v22) = HIDWORD(v35);
      *(_DWORD *)(a7 + 4 * v22) = v23;
      LODWORD(v13) = *(unsigned __int16 *)(a4 + 402);
      if (*(_WORD *)(a4 + 402))
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = *(int *)(*(void *)(a4 + 424) + 4 * v24);
          uint64_t result = deVQSpectrum(v18, v19, a2, (unsigned __int16)v17, v25, v24 - *(unsigned __int16 *)(*(void *)(a4 + 416) + 2 * v25), v16, (_DWORD *)&v35 + 1, &v35, 0x10u);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          int v26 = v20 + v24 + v16 + v16 * v13;
          unsigned int v27 = HIDWORD(v35) << 8;
          int v28 = (int)v35 >> 4;
          *(_DWORD *)(a6 + 4 * v26) = HIDWORD(v35) << 8;
          unint64_t v35 = __PAIR64__(v27, v28);
          *(_DWORD *)(a7 + 4 * v26) = v28;
          ++v24;
          unint64_t v13 = *(unsigned __int16 *)(a4 + 402);
        }
        while (v24 < v13);
      }
      ++v16;
      int v14 = v33;
      if (v16 >= *(unsigned __int16 *)(a4 + 396))
      {
        a3 = v31;
        a8 = v32;
        int v11 = *v32;
        int v10 = a1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t result = 0;
LABEL_11:
    uint64_t v29 = a3 + 8 * v10;
    *(void *)(*(void *)(v29 + 152) + 8 * a2) = a6 + 4 * v14;
    *(void *)(*(void *)(v29 + 232) + 8 * a2) = a7 + 4 * v14;
    *a8 = v11 + 1;
  }
  return result;
}

uint64_t BET3FXD__FindMsdPDF(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = 0;
  int v38 = 0;
  uint64_t v5 = a5 + 4 * a1;
  int v8 = *(_DWORD *)(v5 + 224);
  uint64_t v7 = (_DWORD *)(v5 + 224);
  int v6 = v8;
  if (v8 == 3) {
    unsigned int v9 = 18;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v6 == 2) {
    uint64_t v10 = 20;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = a4 + 4 * a1;
  int v13 = *(_DWORD *)(v11 + 4);
  int v12 = (int *)(v11 + 4);
  if (v13 < 1) {
    return 0;
  }
  uint64_t v14 = a3;
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  int v17 = (uint64_t *)(a4 + 8 * a1 + 312);
  uint64_t v18 = (void *)(a3 + 8 * a1);
  uint64_t v19 = (a2 - 2);
  int v37 = *(_DWORD *)(v18[9] + 4 * a2) - 1;
  char v20 = 24 - v10;
  uint64_t v36 = v18 + 19;
  char v35 = v10 - 12;
  int v33 = (int *)(a5 + 4 * a1 + 2104);
  uint64_t v34 = v18 + 29;
  uint64_t v32 = v12;
  do
  {
    uint64_t v21 = dequantMsd(*v17, v19, v37, v15, (_DWORD *)&v39 + 1, &v39, &v38, v10);
    if ((v21 & 0x80000000) != 0) {
      break;
    }
    v38 <<= v20;
    *(_DWORD *)(*(void *)(*v36 + 8 * v16) + 4 * v15 + 4) = HIDWORD(v39) << v20;
    if ((*v7 & 0xFFFFFFFE) == 2) {
      *(_DWORD *)(*(void *)(*v34 + 8 * v16) + 4 * v15 + 4) = (int)v39 >> v35;
    }
    if (!v15)
    {
      uint64_t v22 = v10;
      uint64_t v23 = v19;
      unint64_t v24 = v17;
      if (*v7 == 2) {
        *(_DWORD *)(*(void *)(v14 + 320) + 4 * v16) = v38;
      }
      uint64_t v25 = v14;
      int v26 = v38;
      int v27 = BET3FXD__Q10_22_to_Q8_24(*v33);
      uint64_t v28 = 1 << *v7;
      if (v26 <= v27)
      {
        uint64_t v14 = v25;
        uint64_t v29 = *(void *)(v25 + 312);
        char v30 = *(unsigned char *)(v29 + v16) & ~(_BYTE)v28;
      }
      else
      {
        uint64_t v14 = v25;
        uint64_t v29 = *(void *)(v25 + 312);
        char v30 = *(unsigned char *)(v29 + v16) | v28;
      }
      *(unsigned char *)(v29 + v16) = v30;
      int v17 = v24;
      uint64_t v19 = v23;
      uint64_t v10 = v22;
      int v12 = v32;
    }
    ++v15;
  }
  while (v15 < *v12);
  return v21;
}

void *BET3FXD__DeInitModelSet(uint64_t a1, void *__b)
{
  uint64_t v4 = __b[59];
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    __b[59] = 0;
  }
  for (uint64_t i = 39; i != 49; ++i)
  {
    uint64_t v6 = __b[i];
    if (v6)
    {
      if (*(void *)(v6 + 120))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v6 + 120));
        *(void *)(__b[i] + 120) = 0;
        uint64_t v6 = __b[i];
      }
      heap_Free(*(void **)(a1 + 8), v6);
      __b[i] = 0;
    }
  }
  if (*((_WORD *)__b + 198))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = __b[54];
    uint64_t v10 = v9;
    do
    {
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + v7 + 8);
        if (v11)
        {
          heap_Free(*(void **)(a1 + 8), v11);
          uint64_t v9 = __b[54];
          *(void *)(v9 + v7 + 8) = 0;
        }
        uint64_t v12 = *(void *)(v9 + v7 + 24);
        if (v12)
        {
          heap_Free(*(void **)(a1 + 8), v12);
          uint64_t v9 = __b[54];
          *(void *)(v9 + v7 + 24) = 0;
        }
        uint64_t v13 = *(void *)(v9 + v7 + 32);
        uint64_t v10 = v9;
        if (v13)
        {
          heap_Free(*(void **)(a1 + 8), v13);
          uint64_t v9 = __b[54];
          *(void *)(v9 + v7 + 32) = 0;
          uint64_t v10 = v9;
        }
      }
      ++v8;
      v7 += 40;
    }
    while (v8 < 2 * (unint64_t)*((unsigned __int16 *)__b + 198));
  }
  uint64_t v14 = __b[52];
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    __b[52] = 0;
  }
  uint64_t v15 = __b[53];
  if (v15)
  {
    heap_Free(*(void **)(a1 + 8), v15);
    __b[53] = 0;
  }
  uint64_t v16 = __b[54];
  if (v16)
  {
    heap_Free(*(void **)(a1 + 8), v16);
    __b[54] = 0;
  }
  uint64_t v17 = __b[56];
  if (v17)
  {
    __b[56] = v17 + 32;
    heap_Free(*(void **)(a1 + 8), v17 + 32);
    __b[56] = 0;
  }

  return cstdlib_memset(__b, 0, 0x260uLL);
}

uint64_t BET3FXD__InitUttModel(uint64_t a1, char *__b, int *a3, unsigned int a4)
{
  uint64_t v8 = 2229280778;
  cstdlib_memset(__b, 0, 0x240uLL);
  *(void *)uint64_t __b = a1;
  *((void *)__b + 1) = a3;
  *((_DWORD *)__b + 138) = a4;
  *((_DWORD *)__b + 141) = *a3 * a4;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a4, 528);
  *((void *)__b + 68) = v9;
  if (v9)
  {
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 4);
    *((void *)__b + 4) = v10;
    if (v10)
    {
      uint64_t v11 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 1);
      *((void *)__b + 41) = v11;
      if (v11)
      {
        uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 4);
        *((void *)__b + 42) = v12;
        if (v12)
        {
          int v13 = a3[150];
          if (v13 >= 1)
          {
            uint64_t v14 = 0;
            uint64_t v15 = __b + 168;
            uint64_t v16 = a3;
            do
            {
              if (!v16[120])
              {
                uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), (*a3 * *((_DWORD *)__b + 138)), 4);
                *(v15 - 10) = v17;
                if (!v17) {
                  return v8;
                }
                uint64_t v18 = *(void **)(a1 + 8);
                int v19 = *((_DWORD *)__b + 138);
                char v20 = v16[140]
                    ? BET3FXD__int32_ccalloc(v18, 2 * v19 * *a3, v16[1] + 1)
                    : (void *)heap_Calloc(v18, (2 * v19 * *a3), 8);
                *uint64_t v15 = v20;
                if (!v20) {
                  return v8;
                }
                v15[10] = &v20[*a3 * *((_DWORD *)__b + 138)];
                int v13 = a3[150];
              }
              ++v14;
              ++v16;
              ++v15;
            }
            while (v14 < v13);
          }
          uint64_t v21 = *((unsigned int *)__b + 138);
          if ((int)v21 >= 1)
          {
            uint64_t v22 = 0;
            uint64_t v23 = *a3;
            uint64_t v24 = 152;
            do
            {
              uint64_t v25 = *((void *)__b + 68);
              uint64_t v26 = v25 + 528 * v22;
              *(_DWORD *)uint64_t v26 = v22;
              uint64_t v27 = v22 * v23;
              uint64_t v28 = *((void *)__b + 41) + v22 * v23;
              uint64_t v29 = *((void *)__b + 42) + 4 * v22 * v23;
              *(void *)(v26 + 16) = *((void *)__b + 4) + 4 * v22 * v23 - 8;
              *(void *)(v26 + 312) = v28 - 2;
              *(void *)(v26 + 320) = v29 - 8;
              if (v13 >= 1)
              {
                char v30 = (uint64_t *)(v25 + v24);
                uint64_t v31 = __b + 168;
                uint64_t v32 = v13;
                int v33 = a3 + 120;
                do
                {
                  if (!*v33++)
                  {
                    uint64_t v35 = *(v31 - 10) + 4 * v27;
                    *(v30 - 10) = v35;
                    uint64_t v36 = *v31 + 8 * v27;
                    *char v30 = v36;
                    uint64_t v37 = v31[10] + 8 * v27;
                    *(v30 - 10) = v35 - 8;
                    *char v30 = v36 - 16;
                    v30[10] = v37 - 16;
                  }
                  ++v30;
                  ++v31;
                  --v32;
                }
                while (v32);
              }
              ++v22;
              v24 += 528;
            }
            while (v22 != v21);
          }
          return 0;
        }
      }
    }
  }
  return v8;
}

void *BET3FXD__DeInitUttModel(void *result)
{
  uint64_t v1 = result;
  if (*result && result[68])
  {
    uint64_t v2 = result[1];
    uint64_t v3 = result[4];
    if (v3)
    {
      heap_Free(*(void **)(*result + 8), v3);
      v1[4] = 0;
    }
    uint64_t v4 = v1[41];
    if (v4)
    {
      heap_Free(*(void **)(*v1 + 8), v4);
      v1[41] = 0;
    }
    uint64_t v5 = v1[42];
    if (v5)
    {
      heap_Free(*(void **)(*v1 + 8), v5);
      v1[42] = 0;
    }
    if (*(int *)(v2 + 600) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        if (!*(_DWORD *)(v2 + 480 + 4 * v6))
        {
          uint64_t v7 = &v1[v6];
          uint64_t v8 = v7[11];
          if (v8)
          {
            heap_Free(*(void **)(*v1 + 8), v8);
            v7[11] = 0;
          }
          uint64_t v9 = v7[21];
          if (v9)
          {
            heap_Free(*(void **)(*v1 + 8), v9);
            v7[21] = 0;
          }
        }
        ++v6;
      }
      while (v6 < *(int *)(v2 + 600));
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v1[68]);
  }
  v1[68] = 0;
  *((_DWORD *)v1 + 138) = 0;
  *uint64_t v1 = 0;
  return result;
}

void *BET3FXD__DeInitMSDUttModel(void *result, int a2)
{
  uint64_t v2 = result[1];
  if (!*(_DWORD *)(v2 + 4 * a2 + 480))
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = &result[a2];
    uint64_t v6 = v5[11];
    if (v6)
    {
      uint64_t result = heap_Free(*(void **)(*result + 8), v6);
      v5[11] = 0;
    }
    uint64_t v9 = (void *)v5[21];
    uint64_t v8 = (uint64_t **)(v5 + 21);
    uint64_t v7 = v9;
    if (v9)
    {
      if (*(_DWORD *)(v2 + 4 * v4 + 560))
      {
        *v7 += 4;
        uint64_t result = BET3FXD__int32_free(*(void **)(*v3 + 8), *v8);
      }
      else
      {
        uint64_t result = heap_Free(*(void **)(*v3 + 8), (uint64_t)v7);
      }
      *uint64_t v8 = 0;
    }
  }
  return result;
}

uint64_t BET3FXD__InitModelSet(int a1, char *__b, _DWORD *a3)
{
  cstdlib_memset(__b, 0, 0x260uLL);
  int v5 = a3[33];
  *((_DWORD *)__b + 150) = v5;
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 536;
    uint64_t v8 = __b;
    do
    {
      *((_DWORD *)v8 + 32) = a3[86];
      uint64_t v9 = __b + 480;
      if (v7 != 536)
      {
        if (a3[536]) {
          uint64_t v9 = &__b[4 * v6 + 560];
        }
        else {
          uint64_t v9 = v8 + 520;
        }
      }
      ++a3;
      *(_DWORD *)uint64_t v9 = 1;
      ++v6;
      uint64_t v10 = v7 - 535;
      ++v7;
      v8 += 4;
    }
    while (v10 < *((int *)__b + 150));
  }
  return 0;
}

uint64_t BET3FXD__meancpy(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if (v1 >= 1)
  {
    uint64_t v2 = 0;
    LODWORD(v3) = *(_DWORD *)(result + 20);
    do
    {
      if ((int)v3 >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void *)(result + 72);
        uint64_t v6 = *(void *)(result + 40);
        do
        {
          *(_DWORD *)(*(void *)(v6 + 8 * v4) + 4 * v2) = *(_DWORD *)(*(void *)(v5 + 8 * v4) + 4 * v2);
          ++v4;
          uint64_t v3 = *(int *)(result + 20);
        }
        while (v4 < v3);
        int v1 = *(_DWORD *)(result + 16);
      }
      ++v2;
    }
    while (v2 < v1);
  }
  return result;
}

uint64_t BET3FXD__ConstW_Calc_R_and_r(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 20);
  int v4 = a2 + 2 * v2;
  uint64_t v5 = a2;
  uint64_t v6 = *(void **)(a1 + 72);
  uint64_t v7 = *(void **)(a1 + 80);
  uint64_t v8 = v7[1];
  uint64_t v9 = *(int *)(*v7 + 4 * a2);
  int v10 = v2 + a2;
  uint64_t v11 = *(int *)(v8 + 4 * v10);
  uint64_t v12 = v6[1];
  int v13 = *(_DWORD *)(*v6 + 4 * a2);
  uint64_t v14 = v10;
  uint64_t v15 = ((int)((unint64_t)(-2147483392 * v11) >> 32) * (uint64_t)*(int *)(v12 + 4 * v10)) >> 12;
  uint64_t v16 = *(void ***)(a1 + 96);
  uint64_t v17 = *(void **)(a1 + 104);
  uint64_t v18 = v15 + ((v13 * (uint64_t)(int)v9) >> 12);
  uint64_t v19 = v4;
  uint64_t v20 = *(int *)(*v7 + 4 * v4);
  uint64_t v21 = (uint64_t)(0xFFFFFFFE00000200 * v20) >> 32;
  uint64_t v22 = v18 + (((int)v21 * (uint64_t)*(int *)(*v6 + 4 * v4)) >> 12);
  int v23 = *(_DWORD *)(v8 + 4 * v4);
  uint64_t result = v23;
  int v25 = *(_DWORD *)(v12 + 4 * v4);
  *uint64_t v17 = v22 + ((v25 * (uint64_t)v23) >> 12);
  uint64_t v26 = *v16;
  uint64_t v27 = (0xFFFFFFLL * v23) >> 12;
  *uint64_t v26 = ((0x3FFFFF * v11) >> 12) + (v9 << 12) + ((67108860 * v20) >> 12) + v27;
  v26[1] = ((-33554430 * v23) >> 12) + (v21 << 12);
  v26[2] = v27 + ((-4194303 * v11) >> 12);
  if (v3 < 3)
  {
    int v48 = v25;
    LODWORD(v28) = 1;
  }
  else
  {
    uint64_t v28 = (v3 - 1);
    uint64_t v29 = v16 + 1;
    char v30 = v17 + 1;
    uint64_t v31 = v7 + 2;
    uint64_t v32 = v6 + 2;
    uint64_t v33 = v28 - 1;
    do
    {
      uint64_t v34 = *(int *)(v8 + 4 * v5);
      uint64_t v35 = *(v31 - 2);
      uint64_t v36 = *(int *)(v35 + 4 * v14);
      uint64_t v37 = *(v32 - 2);
      uint64_t v38 = (((int)((unint64_t)(2147483392 * v36) >> 32) * (uint64_t)*(int *)(v37 + 4 * v14)) >> 12)
          + ((*(int *)(v12 + 4 * v5) * (uint64_t)(int)v34) >> 12);
      uint64_t v39 = *v31++;
      uint64_t v8 = v39;
      uint64_t v40 = *(int *)(v39 + 4 * v14);
      uint64_t v41 = *v32++;
      uint64_t v12 = v41;
      uint64_t v42 = *(int *)(v35 + 4 * v19);
      uint64_t v43 = v38
          + (((int)((unint64_t)(-2147483392 * (int)v40) >> 32) * (uint64_t)*(int *)(v41 + 4 * v14)) >> 12)
          + ((*(int *)(v37 + 4 * v19) * (uint64_t)(int)v42) >> 12);
      uint64_t v44 = (uint64_t)(0xFFFFFFFE00000200 * v23) >> 32;
      uint64_t v45 = v43 + (((int)v44 * (uint64_t)v25) >> 12);
      uint64_t v46 = *(int *)(v8 + 4 * v19);
      int v25 = *(_DWORD *)(v41 + 4 * v19);
      *v30++ = v45 + ((v25 * (uint64_t)(int)v46) >> 12);
      uint64_t v47 = *v29++;
      void *v47 = ((0x3FFFFF * v40) >> 12)
           + ((0x3FFFFF * v36) >> 12)
           + ((67108860 * v23) >> 12)
           + ((v42 + v34 + v46) << 12);
      v47[1] = ((-33554430 * (int)v46) >> 12) + (v44 << 12);
      __int16 v47[2] = ((0xFFFFFF * v46) >> 12) + ((-4194303 * v40) >> 12);
      int v23 = v46;
      --v33;
    }
    while (v33);
    uint64_t v8 = v7[v28];
    uint64_t v12 = v6[v28];
    uint64_t result = *(int *)(v8 + 4 * v19);
    int v48 = *(_DWORD *)(v12 + 4 * v19);
  }
  uint64_t v49 = *(int *)(v8 + 4 * v5);
  uint64_t v50 = v7[(int)v28 - 1];
  uint64_t v51 = *(int *)(v50 + 4 * v14);
  uint64_t v52 = v6[(int)v28 - 1];
  uint64_t v53 = *(int *)(v50 + 4 * v19);
  v17[v28] = (((int)((unint64_t)(2147483392 * v51) >> 32) * (uint64_t)*(int *)(v52 + 4 * v14)) >> 12)
                         + ((*(int *)(v12 + 4 * v5) * (uint64_t)(int)v49) >> 12)
                         + ((*(int *)(v52 + 4 * v19) * (uint64_t)(int)v53) >> 12)
                         + (((int)((0xFFFFFFFE00000200 * result) >> 32) * (uint64_t)v48) >> 12);
  uint64_t v54 = v16[v28];
  v54[1] = 0;
  v54[2] = 0;
  void *v54 = ((v53 + v49) << 12) + ((0x3FFFFF * v51) >> 12) + ((67108860 * result) >> 12);
  return result;
}

uint64_t BET3FXD__ConstW_Cholesky(uint64_t result)
{
  int v1 = *(uint64_t ***)(result + 96);
  int v3 = *v1;
  int v2 = v1[1];
  uint64_t v4 = **v1;
  uint64_t v5 = v4 >> 4;
  if ((unint64_t)v4 < 0x10) {
    uint64_t v5 = 1;
  }
  uint64_t v6 = ((*v1)[1] << 16) / v5;
  uint64_t v7 = 16 * ((v3[2] << 16) / v5);
  v3[1] = 16 * v6;
  v3[2] = v7;
  uint64_t v8 = v2[1];
  uint64_t v9 = *v2 - ((uint64_t)(((unint64_t)(((16 * v6) >> 3) * ((16 * v6) >> 3)) >> 21) * (v4 >> 3)) >> 18);
  *int v2 = v9;
  uint64_t v10 = v8 - (((((v3[2] >> 3) * (v3[1] >> 3)) >> 21) * (*v3 >> 3)) >> 18);
  if ((unint64_t)v9 < 0x10) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v9 >> 4;
  }
  uint64_t v12 = 16 * ((v10 << 16) / v11);
  uint64_t v13 = 16 * ((v2[2] << 16) / v11);
  v2[1] = v12;
  v2[2] = v13;
  uint64_t v14 = *(unsigned int *)(result + 20);
  if ((int)v14 >= 3)
  {
    uint64_t v15 = v1 + 2;
    uint64_t v16 = v14 - 2;
    do
    {
      uint64_t v17 = *v15;
      uint64_t v18 = (*v15)[1];
      uint64_t v19 = **v15 - ((uint64_t)(((unint64_t)((v12 >> 3) * (v12 >> 3)) >> 21) * (v9 >> 3)) >> 18);
      *uint64_t v17 = v19;
      uint64_t v9 = v19
         - ((uint64_t)(((unint64_t)(((*(v15 - 2))[2] >> 3) * ((*(v15 - 2))[2] >> 3)) >> 21) * (**(v15 - 2) >> 3)) >> 18);
      *uint64_t v17 = v9;
      uint64_t v20 = v18 - (((((v2[2] >> 3) * (v2[1] >> 3)) >> 21) * (*v2 >> 3)) >> 18);
      if ((unint64_t)v9 < 0x10) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v9 >> 4;
      }
      uint64_t v12 = 16 * ((v20 << 16) / v21);
      uint64_t v22 = 16 * ((v17[2] << 16) / v21);
      v17[1] = v12;
      v17[2] = v22;
      ++v15;
      int v2 = v17;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t BET3FXD__ConstW_Cholesky_forward(uint64_t result)
{
  int v1 = *(uint64_t **)(result + 96);
  int v2 = *(uint64_t **)(result + 104);
  int v3 = *(uint64_t **)(result + 88);
  uint64_t v4 = *v2;
  *int v3 = *v2;
  uint64_t v5 = *v1;
  uint64_t v6 = v2[1] - ((*(void *)(*v1 + 8) * v4) >> 24);
  v3[1] = v6;
  uint64_t v7 = *(unsigned int *)(result + 20);
  if ((int)v7 >= 3)
  {
    uint64_t v8 = v1 + 1;
    uint64_t v9 = v3 + 2;
    uint64_t v10 = v2 + 2;
    uint64_t v11 = v7 - 2;
    do
    {
      uint64_t v13 = *v8++;
      uint64_t v12 = v13;
      uint64_t v14 = ((v6 >> 3) * (*(uint64_t *)(v13 + 8) >> 3)) >> 18;
      uint64_t v15 = *v10++;
      uint64_t v6 = v15 - (v14 + (((*(v9 - 2) >> 3) * (*(uint64_t *)(v5 + 16) >> 3)) >> 18));
      *v9++ = v6;
      uint64_t v5 = v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t BET3FXD__ConstW_Cholesky_backward(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 20);
  int v3 = v2 - 1;
  uint64_t v4 = *(void *)(result + 88);
  uint64_t v5 = *(void *)(result + 96);
  uint64_t v6 = **(void **)(v5 + 8 * (v2 - 1));
  if ((unint64_t)v6 <= 1) {
    uint64_t v6 = 1;
  }
  uint64_t v7 = (*(void *)(v4 + 8 * v3) << 24) / v6;
  uint64_t v8 = *(void *)(result + 40);
  *(_DWORD *)(*(void *)(v8 + 8 * v3) + 4 * a2) = v7;
  int v9 = v2 - 2;
  uint64_t v10 = *(uint64_t **)(v5 + 8 * v9);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  if ((unint64_t)v12 < 0x10) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12 >> 4;
  }
  *(_DWORD *)(*(void *)(v8 + 8 * v9) + 4 * a2) = 16 * ((*(void *)(v4 + 8 * v9) << 16) / v13)
                                                     - ((unint64_t)(v11 * (int)v7) >> 24);
  int v14 = *(_DWORD *)(result + 20);
  if (v14 >= 3)
  {
    uint64_t v15 = 8 * (v14 - 3);
    uint64_t v16 = v8 + 16;
    do
    {
      uint64_t v17 = *(uint64_t **)(v5 + v15);
      if ((unint64_t)*v17 < 0x10) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = *v17 >> 4;
      }
      uint64_t result = *(void *)(v16 + v15 - 16);
      *(_DWORD *)(result + 4 * a2) = 16 * ((*(void *)(v4 + v15) << 16) / v18)
                                     - (((unint64_t)(v17[1] * *(int *)(*(void *)(v16 + v15 - 8) + 4 * a2)) >> 24)
                                      + ((unint64_t)(v17[2] * *(int *)(*(void *)(v16 + v15) + 4 * a2)) >> 24));
      v15 -= 8;
    }
    while (v15 != -8);
  }
  return result;
}

uint64_t BET3FXD__mlpg2(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 20) < 2)
  {
    return BET3FXD__meancpy(a1);
  }
  else
  {
    BET3FXD__ConstW_Calc_R_and_r(a1, a2);
    BET3FXD__ConstW_Cholesky(a1);
    BET3FXD__ConstW_Cholesky_forward(a1);
    return BET3FXD__ConstW_Cholesky_backward(a1, a2);
  }
}

char *BET3FXD__heap_StrDup(void *a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  int v4 = cstdlib_strlen(__s);
  uint64_t v5 = (char *)heap_Calloc(a1, (v4 + 1), 1);
  uint64_t v6 = v5;
  if (v5) {
    cstdlib_strcpy(v5, __s);
  }
  return v6;
}

uint64_t BET3FXD__xfread_BET3(void *a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *a4;
  unsigned int v7 = a4[4];
  if (v6 + a3 * a2 > v7) {
    uint64_t v5 = (v7 - v6) / a2;
  }
  if (v5)
  {
    size_t v8 = v5 * a2;
    cstdlib_memcpy(a1, (const void *)(*((void *)a4 + 1) + v6), v8);
    *a4 += v8;
  }
  return v5;
}

uint64_t BET3FXD__xfread2ptr_BET3(void *a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = *a4;
  if (a2 >= 2 && v4 % a2) {
    return 0;
  }
  unsigned int v5 = a4[4];
  if (v4 + a3 * a2 > v5) {
    a3 = (v5 - v4) / a2;
  }
  if (a3)
  {
    *a1 = *((void *)a4 + 1) + v4;
    *a4 = v4 + a3 * a2;
  }
  return a3;
}

uint64_t BET3FXD__log_out_Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9 = a3 - 1;
  do
    int v10 = *(unsigned __int8 *)++v9;
  while (v10 == 10);
  return log_VOutEvent(*(uint64_t ***)(a1 + 32), a2, v9, &a9);
}

uint64_t BET3FXD__log_select_Diag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3 - 1;
  do
    int v4 = *(unsigned __int8 *)++v3;
  while (v4 == 10);
  return log_VOutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", (a2 + 2), 0, v3);
}

uint64_t BET3FXD__log_select_Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", a2, 0, a5, a6, a7, a8, v9);
}

uint64_t BET3FXD__log_select_GetLogLevel(uint64_t a1)
{
  unsigned int LogLevel = log_GetLogLevel(a1);
  if (LogLevel >= 3) {
    return LogLevel - 2;
  }
  else {
    return 0;
  }
}

void *BET3FXD__ddcalloc(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FXD__ddcalloc_64(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 8);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 8 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 8 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FXD__dd_free(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

void *BET3FXD__dd_free_64(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

void *BET3FXD__int32_ccalloc(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FXD__int32_free(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

void *BET3FXD__iicalloc(void *a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if ((int)a2 >= 1 && a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v3 = (void *)heap_Calloc(a1, a2, 8);
    if (v3)
    {
      uint64_t v8 = heap_Calloc(a1, a3 * a2, 4);
      *uint64_t v3 = v8;
      if (v8)
      {
        if (a2 >= 2)
        {
          uint64_t v9 = 1;
          uint64_t v10 = v8 + 4 * a3;
          do
          {
            v3[v9] = v10;
            v10 += 4 * a3;
            ++v9;
          }
          while (v7 != v9);
        }
      }
      else
      {
        heap_Free(a1, (uint64_t)v3);
        return 0;
      }
    }
  }
  return v3;
}

void *BET3FXD__ii_free(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    heap_Free(result, *a2);
    return heap_Free(v3, (uint64_t)a2);
  }
  return result;
}

uint64_t BET3FXD__InitDWinSet(int a1, void *__b, uint64_t a3)
{
  cstdlib_memset(__b, 0, 0x190uLL);
  uint64_t v5 = *(unsigned int *)(a3 + 132);
  if ((int)v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = a3 + 4 * i;
      int v8 = *(_DWORD *)(v7 + 304);
      if (v8 >= 1)
      {
        int v9 = 0;
        uint64_t v10 = (int *)(v7 + 304);
        do
        {
          *((_DWORD *)__b + 10 * i) = v8 + 1;
          ++v9;
          int v8 = *v10;
        }
        while (v9 < *v10);
      }
    }
  }
  return 0;
}

void **BET3FXD__DeInitDWinSet(void **result, char *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    for (uint64_t i = 0; i != 400; i += 40)
    {
      uint64_t v5 = &a2[i];
      BET3FXD__ii_free(v3[1], *(uint64_t **)&a2[i + 8]);
      uint64_t v6 = *(uint64_t **)&a2[i + 16];
      if (v6)
      {
        if (!*v6 || (heap_Free(v3[1], *v6), **((void **)v5 + 2) = 0, (uint64_t v6 = (uint64_t *)*((void *)v5 + 2)) != 0))
        {
          heap_Free(v3[1], (uint64_t)v6);
          *((void *)v5 + 2) = 0;
        }
      }
    }
    return (void **)cstdlib_memset(a2, 0, 0x190uLL);
  }
  return result;
}

uint64_t BET3FXD__LoadDWinFile(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  uint64_t v5 = (unsigned int *)(a2 + 40 * a3);
  if (!*v5) {
    return 0;
  }
  uint64_t v9 = 2229280778;
  uint64_t v10 = BET3FXD__iicalloc(*(void **)(a1 + 8), *v5, 2);
  uint64_t v11 = a2 + 40 * a3;
  *(void *)(v11 + 8) = v10;
  uint64_t v12 = (int ***)(v11 + 8);
  if (v10)
  {
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), *v5, 8);
    uint64_t v14 = a2 + 40 * a3;
    *(void *)(v14 + 16) = v13;
    uint64_t v15 = (uint64_t **)(v14 + 16);
    if (v13)
    {
      *(void *)**uint64_t v12 = 0;
      **uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, 4);
      uint64_t v16 = (_DWORD *)**v15;
      if (v16)
      {
        *uint64_t v16 = 1;
        LODWORD(v17) = *v5;
        if ((int)*v5 <= 1)
        {
LABEL_9:
          uint64_t v27 = a2 + 40 * a3;
          *(_DWORD *)(v27 + 24) = 0;
          uint64_t v28 = (_DWORD *)(v27 + 24);
          v28[1] = 0;
          if ((int)v17 < 1)
          {
            int v30 = 0;
          }
          else
          {
            int v29 = 0;
            int v30 = 0;
            uint64_t v31 = *v12;
            uint64_t v17 = v17;
            do
            {
              uint64_t v32 = *v31;
              int v33 = **v31;
              if (v30 > v33)
              {
                *uint64_t v28 = v33;
                int v30 = v33;
              }
              int v34 = v32[1];
              if (v29 < v34)
              {
                v28[1] = v34;
                int v29 = v34;
              }
              ++v31;
              --v17;
            }
            while (v17);
            if (v30 < v29)
            {
              uint64_t v9 = 0;
              *(_DWORD *)(a2 + 40 * a3 + 32) = v29;
              return v9;
            }
          }
          uint64_t v9 = 0;
          *(_DWORD *)(a2 + 40 * a3 + 32) = v30;
          return v9;
        }
        uint64_t v18 = 1;
        uint64_t v19 = 1;
        while (1)
        {
          unsigned int v20 = BET3FXD__xfread2ptr_BET3(&(*v15)[v19], 4u, 0xFFFFFFFFLL, a4);
          if (!v20) {
            break;
          }
          (*v15)[v19] += 4 * (v20 >> 1);
          uint64_t v26 = (*v12)[v19];
          *uint64_t v26 = -(v20 >> 1);
          v26[1] = (v20 & 1) + (v20 >> 1) - 1;
          ++v18;
          uint64_t v17 = (int)*v5;
          ++v19;
          a4 += 6;
          if (v18 >= v17) {
            goto LABEL_9;
          }
        }
        BET3FXD__log_select_Error(a1, 55019, (uint64_t)"InitDWin: illegal data\n", v21, v22, v23, v24, v25);
        return 2229280772;
      }
    }
  }
  return v9;
}

void *BET3FXD__InitSMatrices(uint64_t a1, void *__b)
{
  uint64_t result = cstdlib_memset(__b, 0, 0x40uLL);
  *uint64_t __b = a1;
  return result;
}

double BET3FXD__FreeSMatrices(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1)
    {
      int v2 = *(uint64_t **)(a1 + 24);
      if (v2)
      {
        if (!*(_DWORD *)(a1 + 8))
        {
          BET3FXD__dd_free(*(void **)(*(void *)a1 + 8), v2);
          BET3FXD__dd_free_64(*(void **)(*(void *)a1 + 8), *(uint64_t **)(a1 + 48));
          uint64_t v3 = *(void *)(a1 + 40);
          if (v3) {
            heap_Free(*(void **)(*(void *)a1 + 8), v3);
          }
        }
        *(_DWORD *)(a1 + 60) = 0;
        double result = 0.0;
        *(_OWORD *)(a1 + 44) = 0u;
        *(_OWORD *)(a1 + 28) = 0u;
        *(_OWORD *)(a1 + 12) = 0u;
      }
    }
  }
  return result;
}

uint64_t BET3FXD__InitPStreamSM(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (a2
    && *(void *)(a2 + 24)
    && *((_DWORD *)a1 + 3) == *(_DWORD *)(a2 + 12)
    && *((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 16)
    && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 20))
  {
    uint64_t result = 0;
    long long v6 = *(_OWORD *)(a2 + 48);
    long long v8 = *(_OWORD *)a2;
    long long v7 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a1 + 6) = v6;
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = v7;
LABEL_12:
    *((_DWORD *)a1 + 14) = 1;
    return result;
  }
  a1[6] = v4;
  uint64_t v9 = (long long *)(a1 + 6);
  int v10 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 14) = 0;
  *((_DWORD *)a1 + 15) = v10;
  uint64_t v11 = *(uint64_t *)((char *)a1 + 20);
  a1[8] = v11;
  uint64_t v12 = BET3FXD__ddcalloc(*(void **)(v4 + 8), 2 * (int)v11, v10);
  a1[9] = (uint64_t)v12;
  if (v12
    && (int v13 = *((_DWORD *)a1 + 6),
        uint64_t v14 = *((int *)a1 + 5),
        a1[10] = (uint64_t)&v12[v14],
        uint64_t v15 = BET3FXD__ddcalloc_64(*(void **)(v4 + 8), v14, v13),
        (a1[12] = (uint64_t)v15) != 0)
    && (uint64_t v16 = heap_Calloc(*(void **)(v4 + 8), (2 * *((_DWORD *)a1 + 5)), 8), (a1[11] = v16) != 0))
  {
    a1[13] = v16 + 8 * *((int *)a1 + 5);
    if (a2)
    {
      BET3FXD__FreeSMatrices(a2);
      uint64_t result = 0;
      long long v17 = *v9;
      long long v18 = *((_OWORD *)a1 + 4);
      long long v19 = *((_OWORD *)a1 + 6);
      *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 5);
      *(_OWORD *)(a2 + 48) = v19;
      *(_OWORD *)a2 = v17;
      *(_OWORD *)(a2 + 16) = v18;
      goto LABEL_12;
    }
    return 0;
  }
  else
  {
    BET3FXD__FreeSMatrices((uint64_t)(a1 + 6));
    return 2229280778;
  }
}

double BET3FXD__FreePStreamSM(uint64_t a1)
{
  return BET3FXD__FreeSMatrices(a1 + 48);
}

uint64_t BET3FXD__InitPStreamParam(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *((_DWORD *)a1 + 6) = (2 * *(_DWORD *)(a1[4] + 32)) | 1;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    if (v5)
    {
      if (*((_DWORD *)a1 + 5) == *(_DWORD *)(a2 + 20) && *((_DWORD *)a1 + 4) == *(_DWORD *)(a2 + 16))
      {
        a1[5] = v5;
        long long v6 = a1 + 1;
LABEL_12:
        uint64_t result = 0;
        *long long v6 = 1;
        return result;
      }
    }
  }
  *((_DWORD *)a1 + 2) = 0;
  long long v6 = a1 + 1;
  long long v7 = BET3FXD__int32_ccalloc(*(void **)(v4 + 8), *((_DWORD *)a1 + 5), *((_DWORD *)a1 + 4));
  a1[5] = (uint64_t)v7;
  if (v7) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = 2229280778;
  }
  if (a2 && v7)
  {
    BET3FXD__FreePStreamParam((void *)a2);
    long long v9 = *(_OWORD *)a1;
    long long v10 = *((_OWORD *)a1 + 1);
    long long v11 = *((_OWORD *)a1 + 3);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 2);
    *(_OWORD *)(a2 + 48) = v11;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    long long v12 = *((_OWORD *)a1 + 4);
    long long v13 = *((_OWORD *)a1 + 5);
    long long v14 = *((_OWORD *)a1 + 6);
    *(void *)(a2 + 112) = a1[14];
    *(_OWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 64) = v12;
    goto LABEL_12;
  }
  return result;
}

void *BET3FXD__FreePStreamParam(void *result)
{
  if (*result)
  {
    int v1 = result;
    int v2 = (uint64_t *)result[5];
    if (v2)
    {
      if (!*((_DWORD *)result + 2)) {
        uint64_t result = BET3FXD__int32_free(*(void **)(*result + 8), v2);
      }
      v1[5] = 0;
      *((_DWORD *)v1 + 2) = 0;
    }
  }
  return result;
}

uint64_t select_bet3_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISelect_Bet3_0;
  return result;
}

uint64_t select_bet3_ClassOpen_0(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 25957;
  }
  return result;
}

uint64_t select_bet3_ClassClose_0()
{
  return 0;
}

uint64_t select_bet3_ObjOpen_0(uint64_t a1, int a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  unsigned int v50 = 0;
  uint64_t v48 = 0;
  *(void *)uint64_t v49 = 0;
  uint64_t v5 = 2229280775;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v52 = 0u;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, v49);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else if ((safeh_HandleCheck(a1, a2, 25957, 416) & 0x80000000) != 0)
    {
      return 2229280776;
    }
    else
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      log_OutText(*(void *)(*(void *)v49 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjOpen", v12, v13, v14, v43);
      uint64_t v15 = (void *)heap_Calloc(*(void **)(*(void *)v49 + 8), 1, 6608);
      if (v15)
      {
        unsigned int v20 = v15;
        *uint64_t v15 = a3;
        v15[1] = a4;
        uint64_t v21 = *(void *)v49;
        v15[2] = *(void *)v49;
        v15[3] = a1;
        uint64_t Object = objc_GetObject(*(void *)(v21 + 48), (uint64_t)"SYNTHSTREAM", &v48);
        if ((Object & 0x80000000) != 0
          || (v20[4] = *(void *)(v48 + 8),
              uint64_t Object = objc_GetObject(*(void *)(*(void *)v49 + 48), (uint64_t)"LINGDB", &v48),
              (Object & 0x80000000) != 0))
        {
          uint64_t v5 = Object;
          log_OutPublic(*(void *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55001, 0, v23, v24, v25, v26, v44);
        }
        else
        {
          uint64_t v27 = *(void *)(v48 + 8);
          v20[5] = v27;
          uint64_t ObjOpen = BET3FXD__select_bet3_FeatureExtractObjOpen(a3, a4, v20[4], v27, v20 + 7);
          if ((ObjOpen & 0x80000000) != 0) {
            goto LABEL_27;
          }
          uint64_t ObjOpen = select_bet3_loc_CreateDataBrkString(*(uint64_t *)v49, __dst);
          if ((ObjOpen & 0x80000000) != 0) {
            goto LABEL_27;
          }
          uint64_t v29 = v20[3];
          if (!v29 || (uint64_t v30 = *(void *)(v29 + 48)) == 0) {
            uint64_t v30 = *(void *)(v20[2] + 48);
          }
          uint64_t ObjOpen = objc_GetAddRefCountedObject(v30, (uint64_t)__dst, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))select_bet3_loc_ObjcVoiceOpen_0, (void (*)(void, void, _OWORD *))select_bet3_loc_ObjcVoiceClose_0, *(uint64_t *)v49, &v48);
          if ((ObjOpen & 0x80000000) != 0
            || (uint64_t v31 = *(void *)v49,
                uint64_t v32 = *(void *)(v48 + 32),
                v20[6] = v32,
                uint64_t ObjOpen = select_bet3_loc_SetSynthParams_0(v31, v32),
                (ObjOpen & 0x80000000) != 0))
          {
LABEL_27:
            uint64_t v5 = ObjOpen;
          }
          else
          {
            uint64_t v33 = *(void *)(*(void *)v49 + 40);
            uint64_t v46 = v20;
            long long v45 = xmmword_26D214A88;
            long long v47 = xmmword_26D214A88;
            uint64_t v34 = paramc_ListenerAdd(v33, "frequencyhz", &v46);
            if ((v34 & 0x80000000) == 0)
            {
              uint64_t v39 = 0;
              while (1)
              {
                uint64_t v40 = off_26456ADC8[v39];
                if ((paramc_ParamGetInt(*(void *)(*(void *)v49 + 40), (uint64_t)v40, &v50) & 0x80000000) != 0)
                {
                  unsigned int v50 = dword_2207756F4[v39];
                  uint64_t v34 = paramc_ParamSetInt(*(void *)(*(void *)v49 + 40), (uint64_t)v40, v50);
                  if ((v34 & 0x80000000) != 0) {
                    break;
                  }
                }
                uint64_t v34 = select_bet3_loc_ParamSet_0((uint64_t)v20, v40, v50);
                if ((v34 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v41 = *(void *)(*(void *)v49 + 40);
                uint64_t v46 = v20;
                long long v47 = v45;
                uint64_t v5 = paramc_ListenerAdd(v41, v40, &v46);
                if ((v5 & 0x80000000) != 0) {
                  goto LABEL_32;
                }
                if (++v39 == 3)
                {
                  *(void *)a5 = v20;
                  *(_DWORD *)(a5 + 8) = 25958;
                  goto LABEL_29;
                }
              }
            }
            uint64_t v5 = v34;
LABEL_32:
            log_OutPublic(*(void *)(v20[2] + 32), (uint64_t)"SELECT_BET3", 55002, (uint64_t)"%s%s", v35, v36, v37, v38, "param");
          }
        }
        *(void *)a5 = v20;
        *(_DWORD *)(a5 + 8) = 25958;
        select_bet3_ObjClose_0(v20, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)v49 + 32), (uint64_t)"SELECT_BET3", 55000, 0, v16, v17, v18, v19, v44);
        uint64_t v5 = 2229280778;
      }
LABEL_29:
      log_OutText(*(void *)(*(void *)v49 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjOpen: %x", v36, v37, v38, v5);
    }
  }
  return v5;
}

uint64_t select_bet3_ObjClose_0(void *a1, int a2)
{
  int v3 = safeh_HandleCheck((uint64_t)a1, a2, 25958, 6608);
  if (v3 < 0) {
    return 2229280776;
  }
  LODWORD(v7) = v3;
  uint64_t v8 = a1[2];
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjClose", v4, v5, v6, v30);
  uint64_t v9 = 0;
  long long v31 = xmmword_26D214A88;
  do
  {
    long long v10 = off_26456ADE8[v9];
    uint64_t v11 = *(void *)(v8 + 40);
    uint64_t v32 = a1;
    long long v33 = v31;
    int v12 = paramc_ListenerRemove(v11, v10, (long long *)&v32);
    if ((int)v7 > -1 && v12 < 0) {
      uint64_t v7 = v12;
    }
    else {
      uint64_t v7 = v7;
    }
    ++v9;
  }
  while (v9 != 4);
  uint64_t v14 = a1[6];
  if (v14)
  {
    uint64_t v15 = a1[3];
    if (!v15 || (uint64_t v16 = *(void *)(v15 + 48)) == 0) {
      uint64_t v16 = *(void *)(a1[2] + 48);
    }
    int v17 = objc_ReleaseObject(v16, v14);
    a1[6] = 0;
    if ((int)v7 > -1 && v17 < 0) {
      uint64_t v7 = v17;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  uint64_t v19 = a1[7];
  if (v19)
  {
    int ObjClose = BET3FXD__select_bet3_FeatureExtractObjClose(v19);
    if ((int)v7 > -1 && ObjClose < 0) {
      uint64_t v7 = ObjClose;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[5])
  {
    int v22 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"LINGDB");
    if ((int)v7 > -1 && v22 < 0) {
      uint64_t v7 = v22;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  if (a1[4])
  {
    int v24 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if ((int)v7 > -1 && v24 < 0) {
      uint64_t v7 = v24;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  heap_Free(*(void **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjClose: %x", v26, v27, v28, v7);
  return v7;
}

uint64_t select_bet3_ObjReopen_0(void *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v22 = 0u;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v6 = a1[2];
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Entering select_bet3_ObjReopen", v3, v4, v5, v19);
  uint64_t DataBrkString = select_bet3_loc_CreateDataBrkString(v6, __dst);
  if ((DataBrkString & 0x80000000) == 0)
  {
    uint64_t v11 = a1[3];
    if (!v11 || (uint64_t v12 = *(void *)(v11 + 48)) == 0) {
      uint64_t v12 = *(void *)(a1[2] + 48);
    }
    uint64_t DataBrkString = objc_GetAddRefCountedObject(v12, (uint64_t)__dst, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))select_bet3_loc_ObjcVoiceOpen_0, (void (*)(void, void, _OWORD *))select_bet3_loc_ObjcVoiceClose_0, v6, &v20);
    if ((DataBrkString & 0x80000000) == 0)
    {
      uint64_t v13 = a1[6];
      if (v13)
      {
        uint64_t v14 = a1[3];
        if (!v14 || (uint64_t v15 = *(void *)(v14 + 48)) == 0) {
          uint64_t v15 = *(void *)(a1[2] + 48);
        }
        objc_ReleaseObject(v15, v13);
      }
      uint64_t v16 = *(void *)(v20 + 32);
      a1[6] = v16;
      uint64_t DataBrkString = select_bet3_loc_SetSynthParams_0(v6, v16);
    }
  }
  uint64_t v17 = DataBrkString;
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SELECT_BET3", 4, 0, (uint64_t)"Leaving select_bet3_ObjReopen: %x", v8, v9, v10, DataBrkString);
  return v17;
}

uint64_t select_bet3_ProcessStart_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  synstrmaux_InitStreamOpener(a1 + 72, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sptchk;version=4.0",
    1,
    a1 + 928);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-cspp-sgt;version=4.0", 1, a1 + 944);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-bet3-speech-frames;version=5.0",
    a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 912);
  uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 72), *(void *)(a1 + 32), a3, a4);
  if ((v8 & 0x80000000) != 0) {
    select_bet3_ProcessEnd_0(a1, a2);
  }
  *(_DWORD *)(a1 + 6600) = 0;
  return v8;
}

uint64_t select_bet3_Process_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v60 = 0;
  if ((safeh_HandleCheck(a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  uint64_t v9 = (_DWORD *)(a1 + 6568);
  int v10 = *(_DWORD *)(a1 + 6568);
  if (*(void *)(a1 + 4616))
  {
    if (!v10)
    {
      uint64_t v11 = BET3FXD__ParamGenFrames(a1 + 4616, (int *)(*(void *)(a1 + 48) + 8112), (_DWORD *)(a1 + 6568));
      if ((v11 & 0x80000000) != 0)
      {
        uint64_t v25 = v11;
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 6576);
        if (!v12) {
          goto LABEL_65;
        }
        uint64_t v13 = *(unsigned int *)(a1 + 6588);
        unsigned int v14 = *(_DWORD *)(a1 + 6584);
        if (v14 <= v13) {
          goto LABEL_65;
        }
        uint64_t v15 = v12 + 32 * v13;
        int v16 = *(_DWORD *)(a1 + 5228);
        int v17 = *(_DWORD *)(a1 + 5232);
        if (v17 >= v16)
        {
          int v23 = 0;
          uint64_t v20 = (_DWORD *)(v12 + 32 * v13);
        }
        else
        {
          int v18 = 0;
          unsigned int v19 = *(_DWORD *)(a1 + 6600);
          uint64_t v20 = (_DWORD *)(v12 + 32 * v13);
          do
          {
            if (*v20 == 33)
            {
              unsigned int v21 = *(_DWORD *)(a1 + 6596);
              int v22 = *(_DWORD *)(*(void *)(a1 + 5216) + 528 * v17 + 24);
              v20[4] = v22;
              *(_DWORD *)(a1 + 6596) = v22 + v21;
              *(_DWORD *)(a1 + 5232) = ++v17;
            }
            else
            {
              if (*v20 == 8)
              {
                unsigned int v19 = v20[6] / *(_DWORD *)(*(void *)(a1 + 48) + 152);
                *(_DWORD *)(a1 + 6600) = v19;
              }
              unsigned int v21 = *(_DWORD *)(a1 + 6596);
              v20[4] = 0;
            }
            if (v19 > v21)
            {
              *(_DWORD *)(a1 + 6600) = v21;
              unsigned int v19 = v21;
            }
            v20[3] = v21 - v19;
            v20 += 8;
            int v23 = v18 + 1;
            if (v17 >= v16) {
              break;
            }
            unsigned int v24 = v13 + 1 + v18++;
          }
          while (v24 < v14);
        }
        if (*v9)
        {
          unsigned int v44 = v23 + v13;
          if (v23 + (int)v13 < v14)
          {
            int v45 = *(_DWORD *)(a1 + 6596);
            uint64_t v46 = v20 + 4;
            do
            {
              *(v46 - 1) = v45;
              _DWORD *v46 = 0;
              v46 += 8;
              ++v44;
            }
            while (v44 < v14);
            int v23 = v14 - v13;
          }
        }
        if (!v23)
        {
LABEL_65:
          uint64_t v59 = a1 + 4616;
          uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 896), *(void *)(a1 + 904), &v59, 8);
          if ((v25 & 0x80000000) != 0)
          {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, (uint64_t)"%s%s%s%x", v52, v53, v54, v55, "contentType");
          }
          else if (*v9)
          {
            int ProcessEnd = BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
            if (ProcessEnd >= 0) {
              uint64_t v25 = v25;
            }
            else {
              uint64_t v25 = ProcessEnd;
            }
            uint64_t v57 = *(void *)(a1 + 6576);
            if (v57)
            {
              heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v57);
              *(void *)(a1 + 6576) = 0;
              *(void *)(a1 + 6584) = 0;
              *(_DWORD *)(a1 + 6592) = 0;
            }
            int v43 = 1;
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        uint64_t v47 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 32) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), v15, (32 * v23));
        if ((v47 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 6588) += v23;
          goto LABEL_65;
        }
        uint64_t v25 = v47;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, (uint64_t)"%s%s%s%x", v48, v49, v50, v51, "contentType");
        *(_DWORD *)(a1 + 6588) += v23;
      }
LABEL_74:
      int v43 = 2;
      goto LABEL_75;
    }
  }
  else if (!v10)
  {
    goto LABEL_22;
  }
  BET3FXD__DeInitVStream((void *)(a1 + 4616));
  *uint64_t v9 = 0;
LABEL_22:
  uint64_t v25 = BET3FXD__select_bet3_FeatureExtractProcessStart(*(uint64_t **)(a1 + 56), *(void *)(a1 + 48) + 9328, a3, a4, (void *)(a1 + 960), &v60);
  if ((v25 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55005, (uint64_t)"%s%x", v26, v27, v28, v29, "lhError");
  }
  else if (*(__int16 *)(a1 + 970) > 1)
  {
    *(_DWORD *)(a1 + 6588) = 0;
    uint64_t inited = BET3FXD__InitVStream(*(void *)(a1 + 16), (char *)(a1 + 4616), (_DWORD *)(*(void *)(a1 + 48) + 128));
    if ((inited & 0x80000000) != 0
      || (*(void *)(a1 + 4624) = a1 + 960,
          uint64_t inited = BET3FXD__LoadVStream((uint64_t *)(a1 + 4616), *(void *)(a1 + 48) + 8112, *(void *)(a1 + 48) + 128), (inited & 0x80000000) != 0)|| (uint64_t inited = BET3FXD__select_bet3_FeatureExtractProcess(*(uint64_t **)(a1 + 56), *(void *)(a1 + 48) + 128, a3, a4, *(void *)(a1 + 928), *(void *)(a1 + 936), *(void *)(a1 + 944), *(void *)(a1 + 952), (unsigned int *)(a1 + 64), a1 + 960, (uint64_t *)(a1 + 6576), (_DWORD *)(a1 + 6584)), (inited & 0x80000000) != 0))
    {
      uint64_t v25 = inited;
    }
    else
    {
      uint64_t v25 = BET3FXD__ParamGenStart(a1 + 4616, (int *)(*(void *)(a1 + 48) + 8112), *(void *)(a1 + 48) + 128);
      if ((v25 & 0x80000000) == 0)
      {
        int v43 = 4;
LABEL_75:
        *a5 = v43;
        return v25;
      }
    }
    BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
    BET3FXD__DeInitVStream((void *)(a1 + 4616));
  }
  else
  {
    int v30 = v60;
    if (v60)
    {
      if (*(void *)(a1 + 912))
      {
        if (*(_DWORD *)(a1 + 4480))
        {
          LODWORD(v25) = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 104))();
          if ((v25 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 55008, (uint64_t)"%s%s%s%x", v31, v32, v33, v34, "contentType");
          }
        }
      }
      int v35 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 72), *(void *)(a1 + 32));
      if (v35 < 0 && (int)v25 > -1) {
        LODWORD(v25) = v35;
      }
      int v30 = 1;
    }
    *a5 = v30;
    int v37 = BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
    if (v37 >= 0 || (int)v25 <= -1) {
      int v39 = v25;
    }
    else {
      int v39 = v37;
    }
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(a3, a4);
    if (v39 > -1 && v40 < 0) {
      return v40;
    }
    else {
      return v39;
    }
  }
  return v25;
}

uint64_t select_bet3_ProcessEnd_0(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 25958, 6608) & 0x80000000) != 0) {
    return 2229280776;
  }
  BET3FXD__DeInitVStream((void *)(a1 + 4616));
  *(_DWORD *)(a1 + 6568) = 0;
  BET3FXD__select_bet3_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 56), (void *)(a1 + 960));
  uint64_t v3 = *(void *)(a1 + 6576);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v3);
    *(void *)(a1 + 6576) = 0;
    *(void *)(a1 + 6584) = 0;
    *(_DWORD *)(a1 + 6592) = 0;
  }
  *(_DWORD *)(a1 + 6596) = 0;
  uint64_t v4 = *(void *)(a1 + 32);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 72), v4);
}

uint64_t select_bet3_loc_ObjcVoiceOpen_0(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  __src = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  memset(__dst, 0, sizeof(__dst));
  uint64_t inited = InitRsrcFunction(a1, a2, &__src);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  cstdlib_memcpy(__dst, __src, 0x1A0uLL);
  long long v46 = *(_OWORD *)(a5 + 32);
  uint64_t v71 = 0;
  *(void *)(a4 + 32) = 0;
  int v11 = ssftriff_reader_ObjOpen(a1, a2, 0, a3, "FIX3", 1031, (uint64_t *)&v71);
  if (v11 < 0) {
    return (v11 & 0x1FFFu) - 2065686528;
  }
  uint64_t v12 = (char *)heap_Calloc(*((void **)&__dst[0] + 1), 1, 37944);
  uint64_t v17 = (uint64_t)v12;
  if (v12)
  {
    cstdlib_strcpy(v12, a3);
    cstdlib_strcpy((char *)(v17 + 9480), a3);
    cstdlib_memset((void *)(v17 + 11472), 255, 0x100uLL);
    cstdlib_memset((void *)(v17 + 12376), 255, 0x11CuLL);
    cstdlib_memset((void *)(v17 + 12704), 255, 0x20uLL);
    *(_DWORD *)(v17 + 11852) = 1;
    BET3FXD__InitVParam((_DWORD *)(v17 + 128));
    cstdlib_memset((void *)(v17 + 7808), -1, 0x12CuLL);
    cstdlib_strcpy((char *)(v17 + 7792), "mlsa");
    cstdlib_memset(__b, 0, 0x50uLL);
    uint64_t v18 = select_bet3_ParseRiff_0((uint64_t)__dst, v17, (uint64_t)v71, 0, __b, 0, 0);
    if ((v18 & 0x80000000) != 0)
    {
      uint64_t VData = v18;
      cstdlib_strcpy(__s1, "");
      if (__b[0])
      {
        int v41 = 0;
        uint64_t v42 = __b;
        do
        {
          cstdlib_strcat(__s1, "/");
          cstdlib_strcat(__s1, v42);
          uint64_t v42 = &__b[5 * (unsigned __int16)++v41];
        }
        while (*v42);
      }
      log_OutPublic(v46, (uint64_t)"SELECT_BET3", 55003, (uint64_t)"%s%s%s%s%s%x", v37, v38, v39, v40, "file");
    }
    else if (*(unsigned char *)(v17 + 7519) && *(int *)(v17 + 260) > 0)
    {
      int v23 = *(uint64_t **)(v17 + 11792);
      if (v23)
      {
        uint64_t v24 = *v23;
        if (v24)
        {
          uint64_t v25 = 0;
          int v26 = 0;
          do
          {
            *(void *)(v17 + 8 * v25 + 5432) = v24;
            uint64_t v25 = (unsigned __int16)++v26;
            uint64_t v24 = *(void *)(*(void *)(v17 + 11792) + 8 * (unsigned __int16)v26);
          }
          while (v24);
        }
      }
      uint64_t v27 = BET3FXD__InitVData((int)__dst, (char *)(v17 + 8112), (_DWORD *)(v17 + 128));
      if ((v27 & 0x80000000) != 0)
      {
        uint64_t VData = v27;
      }
      else
      {
        uint64_t VData = BET3FXD__LoadVData((uint64_t)__dst, (_DWORD *)(v17 + 8112), v17 + 128);
        if ((VData & 0x80000000) == 0)
        {
          *(_WORD *)(v17 + 12906) = 1;
          *(void *)&long long v36 = 0x100000001;
          *((void *)&v36 + 1) = 0x100000001;
          *(_OWORD *)(v17 + 12496) = v36;
          *(_OWORD *)(v17 + 12512) = v36;
          *(void *)(v17 + 12528) = 0x100000001;
          *(_DWORD *)(v17 + 12540) = 1;
          *(_OWORD *)(v17 + 12556) = v36;
          *(_OWORD *)(v17 + 12572) = v36;
          *(_OWORD *)(v17 + 12588) = v36;
          *(_OWORD *)(v17 + 12604) = v36;
          *(_OWORD *)(v17 + 12620) = v36;
          *(_DWORD *)(v17 + 12636) = 1;
          *(void *)(v17 + 12640) = 0x100000001;
          *(_DWORD *)(v17 + 12078) = 33620481;
          *(unsigned char *)(v17 + 12105) = 1;
          *(void *)(v17 + 12083) = 0x101010101010101;
          *(_DWORD *)(v17 + 12127) = -1;
          *(_WORD *)(v17 + 12131) = -255;
          *(void *)(v17 + 12141) = 0x101010101010101;
          *(void *)(v17 + 12091) = 0x101010101010101;
          *(void *)(v17 + 12146) = 0x101010101010101;
          *(void *)(v17 + 12249) = 0x101010101010101;
          *(void *)(v17 + 12257) = 0x101010101010101;
          *(void *)(v17 + 12265) = 0x101010101010101;
          if ((*(_DWORD *)(v17 + 12432) & 0x80000000) == 0) {
            *(_WORD *)(v17 + 12107) = 257;
          }
          if ((*(_DWORD *)(v17 + 12448) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12109) = 1;
          }
          if ((*(_DWORD *)(v17 + 12464) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12110) = 1;
          }
          if ((*(_DWORD *)(v17 + 12468) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12111) = 1;
          }
          if ((*(_DWORD *)(v17 + 12472) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12112) = 1;
          }
          if ((*(_DWORD *)(v17 + 12476) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12113) = 1;
          }
          if ((*(_DWORD *)(v17 + 12396) & 0x80000000) == 0) {
            *(_WORD *)(v17 + 12101) = 257;
          }
          if ((*(_DWORD *)(v17 + 12720) & 0x80000000) == 0 || (*(_DWORD *)(v17 + 12724) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12100) = 8;
          }
          if ((*(_DWORD *)(v17 + 12400) & 0x80000000) == 0) {
            *(_WORD *)(v17 + 12103) = 257;
          }
          if (*(_DWORD *)(v17 + 11888)) {
            *(unsigned char *)(v17 + 12122) = 9;
          }
          if ((*(_DWORD *)(v17 + 12496) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12141) = 1;
          }
          if ((*(_DWORD *)(v17 + 12500) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12142) = 1;
          }
          if ((*(_DWORD *)(v17 + 12504) & 0x80000000) == 0) {
            *(unsigned char *)(v17 + 12143) = 1;
          }
          *(_WORD *)(v17 + 12152) = 257;
          *(_DWORD *)(v17 + 12144) = 16843009;
          *(_DWORD *)(v17 + 12147) = 16843009;
        }
      }
    }
    else
    {
      uint64_t VData = 2229280772;
      log_OutPublic(v46, (uint64_t)"SELECT_BET3", 55006, (uint64_t)"%s%s", v19, v20, v21, v22, "file");
    }
  }
  else
  {
    log_OutPublic(v46, (uint64_t)"SELECT_BET3", 55000, 0, v13, v14, v15, v16, v44);
    uint64_t VData = 2229280778;
  }
  if (v71)
  {
    ssftriff_reader_ObjClose(v71, v28, v29, v30, v31, v32, v33, v34);
    uint64_t v71 = 0;
  }
  if ((VData & 0x80000000) != 0)
  {
    if ((VData & 0x7FF01FFF) == 0xA200014) {
      uint64_t VData = 2229280772;
    }
    else {
      uint64_t VData = VData;
    }
    select_bet3_loc_VoiceClose_0(__dst, v17);
  }
  else
  {
    *(void *)(a4 + 32) = v17;
  }
  return VData;
}

uint64_t select_bet3_loc_ObjcVoiceClose_0(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v6);
  if ((inited & 0x80000000) == 0) {
    select_bet3_loc_VoiceClose_0(v6, *(void *)(a3 + 32));
  }
  return inited;
}

uint64_t select_bet3_loc_ParamCheckChange_0(uint64_t a1, char *__s1, const char *a3, _DWORD *a4)
{
  *a4 = 1;
  if (cstdlib_strcmp(__s1, "frequencyhz"))
  {
    if (!cstdlib_strcmp(__s1, "waitfactor") && (LH_atoi(a3) & 0x80000000) != 0)
    {
      uint64_t result = 2229280783;
LABEL_7:
      *a4 = 0;
      return result;
    }
  }
  else if (*(void *)(a1 + 896))
  {
    uint64_t result = 2229280785;
    goto LABEL_7;
  }
  return 0;
}

uint64_t select_bet3_loc_ParamLearnChange_0(uint64_t a1, char *__s1, const char *a3)
{
  if (!cstdlib_strcmp(__s1, "frequencyhz"))
  {
    if (*(void *)(a1 + 896)) {
      return 2229280785;
    }
    else {
      return 0;
    }
  }
  if (!cstdlib_strcmp(__s1, "rate") || !cstdlib_strcmp(__s1, "waitfactor"))
  {
    unsigned int v11 = 0;
    if (cstdlib_strcmp(__s1, "waitfactor")
      || (paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"finalsentencefound", &v11), v11 != 1))
    {
      uint64_t v7 = (uint64_t)LH_atoi(a3);
      uint64_t v8 = a1;
      uint64_t v9 = __s1;
      return select_bet3_loc_ParamSet_0(v8, v9, v7);
    }
    return 0;
  }
  if (cstdlib_strcmp(__s1, "finalsentencefound")) {
    return 0;
  }
  if ((unsigned __int16)LH_atou(a3) != 1)
  {
    unsigned int v10 = 0;
    paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", &v10);
    uint64_t v7 = v10;
    uint64_t v9 = "waitfactor";
    uint64_t v8 = a1;
    return select_bet3_loc_ParamSet_0(v8, v9, v7);
  }
  paramc_ParamSetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"waitfactorbackup", *(_DWORD *)(a1 + 64));

  return select_bet3_loc_ParamSet_0(a1, "waitfactor", 0);
}

uint64_t select_bet3_loc_SetSynthParams_0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2 + 7808;
  uint64_t result = select_bet3_loc_SetSynthParamString(a1, (uint64_t)"synth_type", (char *)(a2 + 7792));
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamSetPermanent(*(void *)(a1 + 40), (uint64_t)"mrcc_synthparam_ref_ptr", &v5, 8uLL);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicealpha", *(_DWORD *)(a2 + 128));
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicebeta", *(_DWORD *)(a2 + 132));
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicevol", *(_DWORD *)(a2 + 164));
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicevuvrelamp", *(_DWORD *)(a2 + 140));
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voicemvfboost", *(_DWORD *)(a2 + 168));
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = select_bet3_loc_SetSynthParamString(a1, (uint64_t)"bet2voicevsynthinit", *(char **)(a2 + 7776));
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voiceframesize", *(_DWORD *)(a2 + 152));
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"bet2voiceorder", *(_DWORD *)(a2 + 144));
                    if ((result & 0x80000000) == 0)
                    {
                      uint64_t result = select_bet3_loc_SetSynthParamArrayOfBet3_int32_0(a1, *(void **)(a2 + 7784), *(_DWORD *)(a2 + 144) + 1);
                      if ((result & 0x80000000) == 0) {
                        return select_bet3_loc_SetSynthParamInt_0(a1, (uint64_t)"voicepitchavghz", *(_DWORD *)(a2 + 184));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t select_bet3_loc_ParamSet_0(uint64_t a1, char *__s1, uint64_t a3)
{
  if (cstdlib_strcmp(__s1, "waitfactor")) {
    return 0;
  }
  if ((a3 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 64) = a3;
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Set wait factor %d", v5, v6, v7, a3);
    return 0;
  }
  return 2229280783;
}

uint64_t select_bet3_ParseRiff_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, int a7)
{
  uint64_t StringZ = 0;
  uint64_t v129 = *MEMORY[0x263EF8340];
  uint64_t v13 = (_WORD *)(a2 + 37936);
  uint64_t v115 = (unsigned __int8 *)(a2 + 11824);
  int v125 = 0;
  char v124 = 0;
  *(_DWORD *)__src = 0;
  __dst = (char *)&a5[5 * a4];
  uint64_t v107 = (char *)(a2 + 7792);
  char v109 = (void *)(a2 + 7484);
  uint64_t v111 = (void *)(a2 + 11828);
  uint64_t v113 = (void *)(a2 + 7784);
  __s1 = (char *)(a5 + 5);
  uint64_t v99 = (uint64_t *)(a2 + 11800);
  int v100 = (uint64_t *)(a2 + 11792);
  unsigned int v103 = (uint64_t *)(a2 + 12664);
  int v102 = (uint64_t *)(a2 + 12672);
  unsigned int v101 = (uint64_t *)(a2 + 12680);
  int v104 = (unsigned char *)(a2 + 11728);
  uint64_t v105 = (unsigned char *)(a2 + 10701);
  uint64_t v106 = (unsigned char *)(a2 + 10958);
  char v108 = (unsigned char *)(a2 + 10444);
  uint64_t v110 = (unsigned char *)(a2 + 10187);
  __s = (char *)(a2 + 9930);
  while ((StringZ & 0x80000000) == 0)
  {
    uint64_t v14 = ssftriff_reader_OpenChunk(a3, (__int32 *)__src, (unsigned int *)&v125, 0);
    LODWORD(v15) = v14;
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t StringZ = v14;
      break;
    }
    cstdlib_strcpy(__dst, __src);
    if (a4 == 1)
    {
      if (cstdlib_strcmp(a5, "FEEX"))
      {
        if (cstdlib_strcmp(a5, "STM3"))
        {
          if (cstdlib_strcmp(__src, "SYNC")) {
            goto LABEL_358;
          }
          *(_DWORD *)uint64_t v127 = 0;
          *(void *)__s2 = 0;
          if (a6)
          {
            uint64_t v20 = a6 + ssftriff_reader_GetPosition(a3) - a7;
            *(void *)__s2 = v20;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v125, __s2);
            if ((ChunkData & 0x80000000) != 0) {
              goto LABEL_335;
            }
            uint64_t v20 = *(void *)__s2;
          }
          LOBYTE(v126[0]) = 0;
          *(_DWORD *)uint64_t v127 = 256;
          uint64_t StringZ = ssftriff_reader_ReadStringZ(a3, v20, v125, 0, v126, (unsigned int *)v127);
          if ((StringZ & 0x80000000) != 0)
          {
LABEL_241:
            int v35 = 3;
            goto LABEL_374;
          }
          if (!cstdlib_strcmp((const char *)v126, "SYNTH_TYPE"))
          {
            unsigned int v34 = *(_DWORD *)v127;
            *(_DWORD *)uint64_t v127 = 256;
            uint64_t StringZ = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v125, v34, v126, (unsigned int *)v127);
            if ((StringZ & 0x80000000) != 0) {
              goto LABEL_241;
            }
            cstdlib_strcpy(v107, (const char *)v126);
          }
          LODWORD(v15) = StringZ;
        }
        else
        {
          *(_DWORD *)uint64_t v127 = 0;
          uint64_t v22 = *(int *)(a2 + 260);
          if (!cstdlib_strcmp(__src, "STC3"))
          {
            LODWORD(v121) = 0;
            *(void *)__s2 = 0;
            if (a6)
            {
              int v97 = a7;
              uint64_t v32 = a6 + ssftriff_reader_GetPosition(a3) - a7;
              *(void *)__s2 = v32;
            }
            else
            {
              uint64_t v15 = ssftriff_reader_GetChunkData(a3, v125, __s2);
              if ((v15 & 0x80000000) != 0)
              {
LABEL_298:
                int v35 = 1;
                uint64_t StringZ = v15;
                goto LABEL_318;
              }
              int v97 = a7;
              uint64_t v32 = *(void *)__s2;
            }
            long long v51 = (int *)(a2 + 4 * v22);
            cstdlib_memcpy(v51 + 88, (const void *)(v32 + *(unsigned int *)v127), 4uLL);
            *(_DWORD *)v127 += 4;
            uint64_t v98 = v51 + 98;
            cstdlib_memcpy(v51 + 98, (const void *)(*(void *)__s2 + *(unsigned int *)v127), 4uLL);
            int v52 = *(_DWORD *)v127;
            *(_DWORD *)v127 += 4;
            uint64_t v53 = *(void *)__s2;
            v51[568] = *(unsigned char *)(*(void *)__s2 + *(unsigned int *)v127) != 0;
            uint64_t v54 = (v52 + 5);
            *(_DWORD *)uint64_t v127 = v54;
            cstdlib_memcpy(v51 + 558, (const void *)(v53 + v54), 4uLL);
            unsigned int v55 = *(_DWORD *)v127 + 4;
            *(_DWORD *)v127 += 4;
            uint64_t v56 = v51[98];
            if ((int)v56 < 1) {
              goto LABEL_288;
            }
            uint64_t v57 = heap_Calloc(*(void **)(a1 + 8), v56, 8);
            uint64_t v58 = a2 + 8 * v22;
            *(void *)(v58 + 2472) = v57;
            if (!v57) {
              LODWORD(v15) = -2065686518;
            }
            if ((v15 & 0x80000000) == 0)
            {
              uint64_t v59 = heap_Calloc(*(void **)(a1 + 8), *v98, 8);
              *(void *)(v58 + 2312) = v59;
              LODWORD(v15) = -2065686518;
              if (v59)
              {
                unsigned int v55 = *(_DWORD *)v127;
LABEL_288:
                LOBYTE(v126[0]) = 0;
                LODWORD(v121) = 256;
                LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v125, v55, v126, (unsigned int *)&v121);
                if ((v15 & 0x80000000) == 0)
                {
                  long long v60 = BET3FXD__heap_StrDup(*(void **)(a1 + 8), (char *)v126);
                  long long v61 = (void *)(a2 + 8 * v22);
                  v61[34] = v60;
                  if (!v60)
                  {
                    int v35 = 3;
                    uint64_t StringZ = 2229280778;
                    goto LABEL_374;
                  }
                  *(_DWORD *)v127 += v121;
                  if (*v98 >= 1)
                  {
                    uint64_t v62 = 0;
                    long long v63 = v61 + 309;
                    long long v64 = v61 + 289;
                    while (1)
                    {
                      LOBYTE(v126[0]) = 0;
                      LODWORD(v121) = 256;
                      int v65 = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v125, *(unsigned int *)v127, v126, (unsigned int *)&v121);
                      if (v65 < 0) {
                        break;
                      }
                      *(void *)(*v63 + 8 * v62) = BET3FXD__heap_StrDup(*(void **)(a1 + 8), (char *)v126);
                      if (!*(void *)(*v63 + 8 * v62)) {
                        goto LABEL_368;
                      }
                      *(_DWORD *)v127 += v121;
                      LOBYTE(v126[0]) = 0;
                      LODWORD(v121) = 256;
                      LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v125, *(unsigned int *)v127, v126, (unsigned int *)&v121);
                      if ((v15 & 0x80000000) != 0) {
                        goto LABEL_371;
                      }
                      *(void *)(*v64 + 8 * v62) = BET3FXD__heap_StrDup(*(void **)(a1 + 8), (char *)v126);
                      if (!*(void *)(*v64 + 8 * v62))
                      {
LABEL_368:
                        LODWORD(v15) = -2065686518;
                        goto LABEL_371;
                      }
                      *(_DWORD *)v127 += v121;
                      if (++v62 >= *v98) {
                        goto LABEL_371;
                      }
                    }
                    LODWORD(v15) = v65;
                  }
                }
              }
            }
LABEL_371:
            a7 = v97;
            goto LABEL_361;
          }
          if (cstdlib_strcmp(__src, "TRE3"))
          {
            if (cstdlib_strcmp(__src, "PDF3"))
            {
              if (cstdlib_strcmp(__src, "WIN3"))
              {
                if (cstdlib_strcmp(__src, "CBK3")) {
                  goto LABEL_358;
                }
                uint64_t v36 = a2 + 24 * (int)v22 + 5192;
              }
              else
              {
                uint64_t v70 = a2 + 128 + 4 * v22;
                int v71 = *(_DWORD *)(v70 + 304);
                uint64_t v36 = a2 + 128 + 120 * (int)v22 + 24 * v71 + 3864;
                *(_DWORD *)(v70 + 304) = v71 + 1;
              }
            }
            else
            {
              *(void *)__s2 = 0;
              if (a6)
              {
                uint64_t v48 = a6 + ssftriff_reader_GetPosition(a3) - a7;
                *(void *)__s2 = v48;
              }
              else
              {
                uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v125, __s2);
                if ((ChunkData & 0x80000000) != 0)
                {
LABEL_335:
                  uint64_t StringZ = ChunkData;
                  int v35 = 1;
                  unsigned int v112 = ChunkData;
                  goto LABEL_374;
                }
                uint64_t v48 = *(void *)__s2;
              }
              *(_DWORD *)uint64_t v127 = 256;
              LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, v48, v125, 0, v126, (unsigned int *)v127);
              if ((v15 & 0x80000000) != 0)
              {
                uint64_t v36 = 0;
              }
              else
              {
                uint64_t v82 = BET3FXD__heap_StrDup(*(void **)(a1 + 8), (char *)v126);
                uint64_t v83 = a2 + 128 + 4 * v22;
                uint64_t v84 = *(int *)(v83 + 344);
                *(void *)(a2 + 128 + 40 * (int)v22 + 8 * v84 + 1304) = v82;
                if ((v127[0] & 3) != 0) {
                  *(_DWORD *)v127 -= *(_DWORD *)v127 | 0xFFFFFFFC;
                }
                uint64_t v36 = a2 + 120 * (int)v22 + 24 * (int)v84 + 2792;
                *(_DWORD *)(v83 + 344) = v84 + 1;
              }
            }
          }
          else
          {
            uint64_t v36 = a2 + 24 * (int)v22 + 2552;
          }
          if ((v15 & 0x80000000) == 0 && v36)
          {
            v126[0] = 0;
            if (a6)
            {
              long long v85 = (char *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
            }
            else
            {
              uint64_t v86 = ssftriff_reader_GetChunkData(a3, v125, v126);
              LODWORD(v15) = v86;
              if ((v86 & 0x80000000) != 0)
              {
                int v35 = 1;
                unsigned int v112 = v86;
                uint64_t StringZ = v86;
                goto LABEL_374;
              }
              long long v85 = (char *)v126[0];
            }
            int v87 = *(_DWORD *)v127;
            *(void *)(v36 + 8) = &v85[*(unsigned int *)v127];
            *(_DWORD *)(v36 + 16) = v125 - v87;
          }
        }
      }
      else
      {
        if (!cstdlib_strcmp(__src, "VCAT"))
        {
          v126[0] = 0;
          if (a6)
          {
            v126[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
          }
          else
          {
            uint64_t v42 = ssftriff_reader_GetChunkData(a3, v125, v126);
            if ((v42 & 0x80000000) != 0) {
              return v42;
            }
          }
          uint64_t v16 = a1;
          uint64_t v17 = a2;
          uint64_t v18 = a3;
          uint64_t v19 = 2;
LABEL_258:
          int v31 = select_bet3_ParseRiff_0(v16, v17, v18, v19, a5, 0, 0);
LABEL_259:
          LODWORD(v15) = v31;
          goto LABEL_361;
        }
        if (!cstdlib_strcmp(__src, "VBOP"))
        {
          v126[0] = 0;
          if (a6)
          {
            uint64_t v21 = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
            v126[0] = v21;
          }
          else
          {
            uint64_t v15 = ssftriff_reader_GetChunkData(a3, v125, v126);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            uint64_t v21 = v126[0];
          }
          if (v125 >= 0xF8) {
            size_t v49 = 248;
          }
          else {
            size_t v49 = v125;
          }
          long long v50 = v111;
LABEL_279:
          cstdlib_memcpy(v50, v21, v49);
          goto LABEL_361;
        }
        if (cstdlib_strcmp(__src, "PRE3"))
        {
          if (cstdlib_strcmp(__src, "TRA3"))
          {
            if (cstdlib_strcmp(__src, "PHM3")) {
              goto LABEL_358;
            }
            v126[0] = 0;
            if (a6)
            {
              uint64_t v21 = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
              v126[0] = v21;
            }
            else
            {
              uint64_t v15 = ssftriff_reader_GetChunkData(a3, v125, v126);
              if ((v15 & 0x80000000) != 0) {
                return v15;
              }
              uint64_t v21 = v126[0];
            }
            if (v125 >= 0x100) {
              size_t v49 = 256;
            }
            else {
              size_t v49 = v125;
            }
            long long v50 = v109;
            goto LABEL_279;
          }
          *(_WORD *)__s2 = 0;
          v126[0] = 0;
          if (a6)
          {
            v126[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
          }
          else
          {
            uint64_t v15 = ssftriff_reader_GetChunkData(a3, v125, v126);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
          }
          if (v125 >= 2)
          {
            unsigned __int16 v78 = 0;
            do
            {
              cstdlib_memcpy(__s2, (char *)v126[0] + 2 * v78, 2uLL);
              if (*(unsigned __int16 *)__s2 < 8u) {
                *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)__s2 + 12704) = 1;
              }
              else {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v79, v80, v81, *(unsigned __int16 *)__s2);
              }
              ++v78;
            }
            while (v125 >> 1 > v78);
          }
        }
        else
        {
          *(_WORD *)__s2 = 0;
          v126[0] = 0;
          if (a6)
          {
            v126[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
          }
          else
          {
            uint64_t v15 = ssftriff_reader_GetChunkData(a3, v125, v126);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
          }
          if (v125 >= 2)
          {
            unsigned __int16 v72 = 0;
            do
            {
              cstdlib_memcpy(__s2, (char *)v126[0] + 2 * v72, 2uLL);
              if (*(unsigned __int16 *)__s2 < 0x47u) {
                *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)__s2 + 12376) = 1;
              }
              else {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v73, v74, v75, *(unsigned __int16 *)__s2);
              }
              ++v72;
            }
            while (v125 >> 1 > v72);
          }
        }
      }
    }
    else if (a4)
    {
      if (cstdlib_strcmp(a5, "FEEX") || cstdlib_strcmp(__s1, "VCAT"))
      {
LABEL_358:
        cstdlib_strcpy((char *)v126, "");
        int v89 = 0;
        do
        {
          cstdlib_strcat((char *)v126, "/");
          cstdlib_strcat((char *)v126, &a5[5 * (unsigned __int16)v89++]);
        }
        while (a4 >= (unsigned __int16)v89);
        log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"Unknown data: %s for %s", v90, v91, v92, (uint64_t)v126);
        goto LABEL_361;
      }
      v126[0] = 0;
      if (a6)
      {
        v126[0] = (void *)(a6 + ssftriff_reader_GetPosition(a3) - a7);
      }
      else
      {
        uint64_t v15 = ssftriff_reader_GetChunkData(a3, v125, v126);
        if ((v15 & 0x80000000) != 0) {
          return v15;
        }
      }
      if (cstdlib_strcmp(__src, "ALPH"))
      {
        if (cstdlib_strcmp(__src, "VOIC"))
        {
          if (cstdlib_strcmp(__src, "COVO"))
          {
            if (cstdlib_strcmp(__src, "SAFE"))
            {
              if (cstdlib_strcmp(__src, "PLOS"))
              {
                if (cstdlib_strcmp(__src, "DIFF"))
                {
                  if (cstdlib_strcmp(__src, "GENF"))
                  {
                    if (cstdlib_strcmp(__src, "TAGA"))
                    {
                      if (cstdlib_strcmp(__src, "BTOA")) {
                        goto LABEL_358;
                      }
                      uint64_t v37 = v126[0];
                      int v38 = v125;
                      uint64_t v39 = a1;
                      uint64_t v40 = a3;
                      int v41 = v99;
                    }
                    else
                    {
                      uint64_t v37 = v126[0];
                      int v38 = v125;
                      uint64_t v39 = a1;
                      uint64_t v40 = a3;
                      int v41 = v100;
                    }
                    int RiffStringTable = uselect_LoadRiffStringTable(v39, v40, v37, v38, v41);
                  }
                  else
                  {
                    int RiffStringTable = select_bet3_LoadRiffGenericFeatureMap_0(a1, a3, (unsigned __int16 *)v126[0], v125, v103, v102, v101);
                  }
                  goto LABEL_356;
                }
                *(_DWORD *)__s2 = 64;
                long long v66 = v126[0];
                unsigned int v67 = v125;
                uint64_t v68 = a3;
                long long v69 = v104;
              }
              else
              {
                *(_DWORD *)__s2 = 257;
                long long v66 = v126[0];
                unsigned int v67 = v125;
                uint64_t v68 = a3;
                long long v69 = v105;
              }
            }
            else
            {
              *(_DWORD *)__s2 = 257;
              long long v66 = v126[0];
              unsigned int v67 = v125;
              uint64_t v68 = a3;
              long long v69 = v106;
            }
          }
          else
          {
            *(_DWORD *)__s2 = 257;
            long long v66 = v126[0];
            unsigned int v67 = v125;
            uint64_t v68 = a3;
            long long v69 = v108;
          }
        }
        else
        {
          *(_DWORD *)__s2 = 257;
          long long v66 = v126[0];
          unsigned int v67 = v125;
          uint64_t v68 = a3;
          long long v69 = v110;
        }
        int RiffStringTable = ssftriff_reader_ReadStringZ(v68, (uint64_t)v66, v67, 0, v69, (unsigned int *)__s2);
LABEL_356:
        LODWORD(v15) = RiffStringTable;
        goto LABEL_361;
      }
      *(_DWORD *)__s2 = 257;
      LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, (uint64_t)v126[0], v125, 0, __s, (unsigned int *)__s2);
      if ((v15 & 0x80000000) == 0)
      {
        *(_WORD *)uint64_t v115 = 255;
        if (cstdlib_strlen(__s))
        {
          size_t v43 = 0;
          int v44 = 0;
          do
          {
            int v45 = (unsigned __int8 *)(a2 + v43 + 9930);
            unsigned int v46 = *v45;
            if (v46 < *v115)
            {
              *uint64_t v115 = v46;
              unsigned int v46 = *v45;
            }
            if (v46 > v115[1])
            {
              v115[1] = v46;
              unsigned int v46 = *v45;
            }
            *(unsigned char *)(a2 + v46 + 11472) = v44;
            size_t v43 = (v44 + 1);
            size_t v47 = cstdlib_strlen(__s);
            int v44 = v43;
          }
          while (v47 > v43);
        }
      }
    }
    else if (cstdlib_strcmp(__src, "VCFG"))
    {
      if (cstdlib_strcmp(__src, "EQUA"))
      {
        if (cstdlib_strcmp(__src, "FEEX"))
        {
          if (!cstdlib_strcmp(__src, "STM3"))
          {
            uint64_t Position = ssftriff_reader_GetPosition(a3);
            v126[0] = 0;
            int v31 = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * (unsigned __int16)*v13 + 37728), v126);
            if ((v31 & 0x80000000) == 0)
            {
              ++*v13;
              LODWORD(v15) = select_bet3_ParseRiff_0(a1, a2, a3, 1, a5, v126[0], Position);
              ++*(_DWORD *)(a2 + 260);
              goto LABEL_361;
            }
            goto LABEL_259;
          }
          if (cstdlib_strcmp(__src, "SYNT")) {
            goto LABEL_358;
          }
        }
        uint64_t v16 = a1;
        uint64_t v17 = a2;
        uint64_t v18 = a3;
        uint64_t v19 = 1;
        goto LABEL_258;
      }
      LODWORD(v15) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * (unsigned __int16)*v13 + 37728), v113);
      if ((v15 & 0x80000000) == 0) {
        ++*v13;
      }
    }
    else
    {
      unsigned int v122 = 0;
      *(void *)int v120 = 0;
      unsigned int v121 = 0;
      if (a6)
      {
        *(void *)int v120 = a6 + ssftriff_reader_GetPosition(a3) - a7;
      }
      else
      {
        uint64_t v15 = ssftriff_reader_GetChunkData(a3, v125, v120);
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_298;
        }
      }
      int v23 = BET3FXD__heap_StrDup(*(void **)(a1 + 8), "PHRASE");
      *(void *)(a2 + 208) = v23;
      if (!v23) {
        goto LABEL_317;
      }
      *(_DWORD *)(a2 + 216) = 1000;
      unsigned int v24 = v125;
      if (v125)
      {
        unsigned int v25 = 0;
        do
        {
          LOBYTE(v126[0]) = 0;
          __s2[0] = 0;
          unsigned int v122 = 64;
          LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v120, v24, v25, __s2, &v122);
          if ((v15 & 0x80000000) == 0 && v25 < v125)
          {
            v25 += v122;
            unsigned int v122 = 256;
            LODWORD(v15) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v120, v125, v25, v126, &v122);
          }
          if ((v15 & 0x80000000) != 0) {
            break;
          }
          unsigned int v26 = v122;
          cstdlib_strcpy(v127, "bet3voiceoverride.");
          cstdlib_strcat(v127, __s2);
          if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v127, &v121) & 0x80000000) != 0 || !v121 || !*v121) {
            unsigned int v121 = (char *)v126;
          }
          if (!cstdlib_strcmp(__s2, "ALPHA")) {
            *(_DWORD *)(a2 + 128) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "BETA")) {
            *(_DWORD *)(a2 + 132) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "VUV_REL_AMP")) {
            *(_DWORD *)(a2 + 140) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "VOL")) {
            *(_DWORD *)(a2 + 164) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "MVF_BOOST")) {
            *(_DWORD *)(a2 + 168) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "FS")) {
            *(_DWORD *)(a2 + 136) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "ORDER")) {
            *(_DWORD *)(a2 + 144) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE")) {
            *(_DWORD *)(a2 + 152) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SPEECH_F0_MEAN")) {
            *(_DWORD *)(a2 + 184) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "PDF_VARIANCE_TYPE")) {
            *(_DWORD *)(a2 + 200) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "BREAKER"))
          {
            uint64_t v27 = *(void *)(a2 + 208);
            uint64_t v28 = a1;
            if (v27)
            {
              heap_Free(*(void **)(a1 + 8), v27);
              uint64_t v28 = a1;
            }
            uint64_t v29 = BET3FXD__heap_StrDup(*(void **)(v28 + 8), v121);
            *(void *)(a2 + 208) = v29;
            if (!v29)
            {
              LODWORD(v15) = -2065686518;
              break;
            }
          }
          if (!cstdlib_strcmp(__s2, "BRK_LENGTH")) {
            *(_DWORD *)(a2 + 216) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "BRK_TC")) {
            *(_DWORD *)(a2 + 220) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "BRK_ZPAD")) {
            *(_DWORD *)(a2 + 224) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "ALGN_ST")) {
            *(_DWORD *)(a2 + 240) = LH_atoi(v121) != 0;
          }
          if (!cstdlib_strcmp(__s2, "ALGN_PH")) {
            *(_DWORD *)(a2 + 244) = LH_atoi(v121) != 0;
          }
          if (!cstdlib_strcmp(__s2, "VSYNTH")) {
            *(void *)(a2 + 7776) = BET3FXD__heap_StrDup(*(void **)(a1 + 8), v121);
          }
          if (!cstdlib_strcmp(__s2, "FFTSZ")) {
            *(_DWORD *)(a2 + 7808) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "EN_MEAN")) {
            *(_DWORD *)(a2 + 7812) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "FEED_EN_MEAN_LOOKAHEAD")) {
            *(_DWORD *)(a2 + 7820) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "COUNT_UV_DISTANCE")) {
            *(_DWORD *)(a2 + 7816) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SAMPLE_RATE")) {
            *(_DWORD *)(a2 + 7824) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENERGY")) {
            *(_DWORD *)(a2 + 7828) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_SIZE")) {
            *(_DWORD *)(a2 + 7832) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SPCPAR_FREQWARP")) {
            *(_DWORD *)(a2 + 7836) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENHANCE_ALPHA")) {
            *(_DWORD *)(a2 + 7840) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENHANCE_ALPHA_UNVOICED")) {
            *(_DWORD *)(a2 + 7844) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE_MRCC")) {
            *(_DWORD *)(a2 + 7848) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_PHS_EXTRAP_USE")) {
            *(_DWORD *)(a2 + 7852) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_NOISE_FREQ_TH")) {
            *(_DWORD *)(a2 + 7856) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_USE")) {
            *(_DWORD *)(a2 + 7860) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_MVF_USE")) {
            *(_DWORD *)(a2 + 7864) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_LO")) {
            *(_DWORD *)(a2 + 7868) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FREQNOISE_HI")) {
            *(_DWORD *)(a2 + 7872) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_UNIFORM")) {
            *(_DWORD *)(a2 + 7876) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_USE")) {
            *(_DWORD *)(a2 + 7880) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_MVF_USE")) {
            *(_DWORD *)(a2 + 7884) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_MIXHARM_LO")) {
            *(_DWORD *)(a2 + 7888) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_MIXHARM_HI")) {
            *(_DWORD *)(a2 + 7892) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_RES_LO")) {
            *(_DWORD *)(a2 + 7896) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_RES_HI")) {
            *(_DWORD *)(a2 + 7900) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_ALIGN_CUTOFF_FREQ")) {
            *(_DWORD *)(a2 + 7904) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF")) {
            *(_DWORD *)(a2 + 7908) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ATTENUATE_UV")) {
            *(_DWORD *)(a2 + 7912) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_SKIP_WEAK_HARM_RATIO")) {
            *(_DWORD *)(a2 + 7916) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN")) {
            *(_DWORD *)(a2 + 7940) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_THR")) {
            *(_DWORD *)(a2 + 7944) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_RATIO_EN_THR")) {
            *(_DWORD *)(a2 + 7948) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_MVF_THR")) {
            *(_DWORD *)(a2 + 7952) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_BY_LOW_EN")) {
            *(_DWORD *)(a2 + 7956) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_BY_RATIO_EN")) {
            *(_DWORD *)(a2 + 7960) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_0")) {
            *(_DWORD *)(a2 + 7964) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_1")) {
            *(_DWORD *)(a2 + 7968) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_2")) {
            *(_DWORD *)(a2 + 7972) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEBUZZ_PROCESS_MVF_3")) {
            *(_DWORD *)(a2 + 7976) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_BITS")) {
            *(_DWORD *)(a2 + 7980) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "PHSPAR_USE")) {
            *(_DWORD *)(a2 + 7984) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_USE")) {
            *(_DWORD *)(a2 + 7988) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "USE_LOG2")) {
            *(_DWORD *)(a2 + 7992) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENHANCE_POWSPC")) {
            *(_DWORD *)(a2 + 7996) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_ATTENUATE")) {
            *(_DWORD *)(a2 + 8000) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_ATTENUATE_LO")) {
            *(_DWORD *)(a2 + 8004) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_ATTENUATE_HI")) {
            *(_DWORD *)(a2 + 8008) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_APPLY_DEEMP")) {
            *(_DWORD *)(a2 + 8012) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_HI_RES_ALIGN")) {
            *(_DWORD *)(a2 + 8016) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FAST_AUX_HARM")) {
            *(_DWORD *)(a2 + 8020) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_FIX_OLA")) {
            *(_DWORD *)(a2 + 8024) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DC_GUARD_VOICED")) {
            *(_DWORD *)(a2 + 8028) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DC_GUARD_UNVOICED")) {
            *(_DWORD *)(a2 + 8032) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_NYQUIST_GUARD")) {
            *(_DWORD *)(a2 + 8036) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "PHSPAR_SIZE")) {
            *(_DWORD *)(a2 + 8040) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "PHSPAR_FLIP")) {
            *(_DWORD *)(a2 + 8044) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "AMPPAR_ENERGY_NORM_TH")) {
            *(_DWORD *)(a2 + 8048) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SPCPAR_FREQWARP_ALPHA")) {
            *(_DWORD *)(a2 + 8052) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_PHS_ALIGN_WITH_CONST")) {
            *(_DWORD *)(a2 + 8056) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_AUXNOISE_NORM_GLOBAL")) {
            *(_DWORD *)(a2 + 8060) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_DEEMP_COEF")) {
            *(_DWORD *)(a2 + 8064) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_USE_NOISE_MODULATION")) {
            *(_DWORD *)(a2 + 8068) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "SYN_NOISE_MODULATION_FACTOR")) {
            *(_DWORD *)(a2 + 8072) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "MAX_FRAME_SIZE")) {
            *(_DWORD *)(a2 + 8076) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "MIN_FRAME_SIZE")) {
            *(_DWORD *)(a2 + 8080) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "MIN_FFT_SIZE")) {
            *(_DWORD *)(a2 + 8084) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE_INC_NUM")) {
            *(_DWORD *)(a2 + 8088) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "FRAME_SIZE_DEC_NUM")) {
            *(_DWORD *)(a2 + 8092) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "ANAL_FFT_SIZE")) {
            *(_DWORD *)(a2 + 8096) = LH_atoi(v121);
          }
          if (!cstdlib_strcmp(__s2, "FFT_SIZE")) {
            *(_DWORD *)(a2 + 8100) = LH_atoi(v121);
          }
          v25 += v26;
          unsigned int v24 = v125;
        }
        while (v25 < v125);
      }
      *(_WORD *)(a2 + 160) = 0;
      *(_WORD *)(a2 + 172) = 0;
      *(void *)(a2 + 176) = 0;
      cstdlib_strcpy(v127, "bet3voiceoverride.");
      cstdlib_strcat(v127, "BREAKER");
      if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v127, &v121) & 0x80000000) == 0)
      {
        uint64_t v76 = *(void *)(a2 + 208);
        if (v76)
        {
          heap_Free(*(void **)(a1 + 8), v76);
          *(void *)(a2 + 208) = 0;
        }
        uint64_t v77 = BET3FXD__heap_StrDup(*(void **)(a1 + 8), v121);
        *(void *)(a2 + 208) = v77;
        if (!v77)
        {
LABEL_317:
          int v35 = 3;
          LODWORD(v15) = v112;
          uint64_t StringZ = 2229280778;
LABEL_318:
          unsigned int v112 = v15;
LABEL_374:
          if (v35 != 3) {
            return v112;
          }
          break;
        }
      }
      cstdlib_strcpy(v127, "bet3voiceoverride.");
      cstdlib_strcat(v127, "BRK_LENGTH");
      if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v127, &v121) & 0x80000000) == 0) {
        *(_DWORD *)(a2 + 216) = LH_atoi(v121);
      }
    }
LABEL_361:
    int v93 = ssftriff_reader_CloseChunk(a3);
    if ((int)v15 > -1 && v93 < 0) {
      uint64_t StringZ = v93;
    }
    else {
      uint64_t StringZ = v15;
    }
  }
  if ((StringZ & 0x1FFF) == 0x14) {
    uint64_t v95 = 0;
  }
  else {
    uint64_t v95 = StringZ;
  }
  uint64_t v15 = StringZ;
  if ((v95 & 0x80000000) == 0)
  {
    char *__dst = 0;
    return v95;
  }
  return v15;
}

void *select_bet3_loc_VoiceClose_0(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *(uint64_t **)(a2 + 11792);
    if (v4 && *v4)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 1;
      do
      {
        *(void *)(a2 + 8 * v5 + 5432) = 0;
        uint64_t v4 = *(uint64_t **)(a2 + 11792);
        uint64_t v5 = v6;
      }
      while (v4[v6++]);
    }
    uselect_FreeRiffStringTable(result, v4);
    uselect_FreeRiffStringTable((void *)v3, *(uint64_t **)(a2 + 11800));
    uint64_t v8 = *(uint64_t **)(a2 + 12664);
    uint64_t v9 = *(uint64_t ***)(a2 + 12672);
    unsigned int v10 = *(uint64_t **)(a2 + 12680);
    if (v8)
    {
      uint64_t v11 = *v8;
      if (*v8)
      {
        int v12 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v11);
          uint64_t v11 = v8[(unsigned __int16)++v12];
        }
        while (v11);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v8);
    }
    if (v9)
    {
      uint64_t v13 = *v9;
      if (*v9)
      {
        int v14 = 0;
        uint64_t v15 = v9;
        do
        {
          uint64_t v16 = *v13;
          if (*v13)
          {
            int v17 = 0;
            do
            {
              heap_Free(*(void **)(v3 + 8), v16);
              ++v17;
              uint64_t v13 = *v15;
              uint64_t v16 = (*v15)[(unsigned __int16)v17];
            }
            while (v16);
          }
          heap_Free(*(void **)(v3 + 8), (uint64_t)v13);
          uint64_t v15 = &v9[(unsigned __int16)++v14];
          uint64_t v13 = *v15;
        }
        while (*v15);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v9);
    }
    if (v10)
    {
      uint64_t v18 = *v10;
      if (*v10)
      {
        int v19 = 0;
        do
        {
          heap_Free(*(void **)(v3 + 8), v18);
          uint64_t v18 = v10[(unsigned __int16)++v19];
        }
        while (v18);
      }
      heap_Free(*(void **)(v3 + 8), (uint64_t)v10);
    }
    BET3FXD__DeInitVData((void *)v3, a2 + 8112);
    BET3FXD__DeInitVParam(v3, (void *)(a2 + 128));
    uint64_t v20 = (_WORD *)(a2 + 37936);
    if (*(_WORD *)(a2 + 37936))
    {
      unint64_t v21 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(void **)(a2 + 37728 + 8 * v21++));
      while (v21 < (unsigned __int16)*v20);
    }
    _WORD *v20 = 0;
    *(unsigned char *)a2 = 0;
    uint64_t v22 = *(void **)(v3 + 8);
    return heap_Free(v22, a2);
  }
  return result;
}

uint64_t select_bet3_LoadRiffGenericFeatureMap_0(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v11 = a1;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a3;
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), v12 + 1, 8);
  *a5 = v13;
  if (v13)
  {
    uint64_t v14 = heap_Calloc(*(void **)(v11 + 8), v12 + 1, 8);
    *a6 = v14;
    if (v14)
    {
      uint64_t v15 = heap_Calloc(*(void **)(v11 + 8), v12 + 1, 8);
      *a7 = v15;
      if (v15)
      {
        if (!v12) {
          return 0;
        }
        unsigned int v16 = 0;
        unsigned int v17 = 2;
        uint64_t v28 = a5;
        uint64_t v29 = a7;
        unsigned int v30 = v12;
        while (1)
        {
          __dst[0] = 0;
          unsigned int v34 = 256;
          uint64_t v18 = ssftriff_reader_ReadStringZ(a2, (uint64_t)a3, a4, v17, __dst, &v34);
          unsigned int v19 = v34;
          *(void *)(*a5 + 8 * v16) = BET3FXD__heap_StrDup(*(void **)(v11 + 8), __dst);
          if (!*(void *)(*a5 + 8 * v16)) {
            break;
          }
          uint64_t v20 = v16;
          unsigned int v21 = v19 + v17;
          uint64_t v31 = *(unsigned __int16 *)((char *)a3 + v21);
          *(void *)(*a6 + 8 * v16) = heap_Calloc(*(void **)(v11 + 8), v31 + 1, 8);
          if (!*(void *)(*a6 + 8 * v16)) {
            break;
          }
          *(void *)(*a7 + 8 * v16) = heap_Calloc(*(void **)(v11 + 8), v31 + 1, 1);
          if (!*(void *)(*a7 + 8 * v16)) {
            break;
          }
          unsigned int v17 = v21 + 2;
          if (v31)
          {
            uint64_t v22 = v11;
            uint64_t v23 = 0;
            while (1)
            {
              unsigned int v24 = v17;
              __dst[0] = 0;
              unsigned int v34 = 256;
              uint64_t v18 = ssftriff_reader_ReadStringZ(a2, (uint64_t)a3, a4, v17, __dst, &v34);
              unsigned int v25 = v34;
              *(void *)(*(void *)(*a6 + 8 * v20) + v23) = BET3FXD__heap_StrDup(*(void **)(v22 + 8), __dst);
              if (!*(void *)(*(void *)(*a6 + 8 * v20) + v23)) {
                return 2229280778;
              }
              v17 += v25;
              v23 += 8;
              if (8 * v31 == v23)
              {
                a5 = v28;
                a7 = v29;
                for (uint64_t i = 0; i != v31; ++i)
                  *(unsigned char *)(*(void *)(*v29 + 8 * v20) + i) = *((unsigned char *)a3 + v24 + v25 + i);
                unsigned int v17 = v24 + v25 + i;
                uint64_t v11 = v22;
                break;
              }
            }
          }
          unsigned int v16 = v20 + 1;
          if ((int)v20 + 1 >= v30) {
            return v18;
          }
        }
      }
    }
  }
  return 2229280778;
}

uint64_t select_bet3_loc_SetSynthParamString(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v8 = paramc_ParamSetStr(*(void *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%s%s%x", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t select_bet3_loc_SetSynthParamInt_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = paramc_ParamSetInt(*(void *)(a1 + 40), a2, a3);
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%d%s%x", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t select_bet3_loc_SetSynthParamArrayOfBet3_int32_0(uint64_t a1, void *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = paramc_ParamSet(*(void *)(a1 + 40), (uint64_t)"bet3cepstralequalizer", a2, (4 * a3));
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 55009, (uint64_t)"%s%s%s%p%s%d%s%d", v4, v5, v6, v7, "parameter");
  }
  return v8;
}

uint64_t BET3FXD__ParamGenStart(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = (char *)(a1 + 56);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 632);
  if (v8)
  {
    heap_Free(*(void **)(v7 + 8), v8);
    *(void *)(a1 + 632) = 0;
  }
  uint64_t v9 = *(void *)(a1 + 640);
  if (v9)
  {
    heap_Free(*(void **)(v7 + 8), v9);
    *(void *)(a1 + 640) = 0;
  }
  uint64_t result = BET3FXD__InitUttModel(v7, v6, a2, *(__int16 *)(*(void *)(a1 + 8) + 10));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a3 + 32);
  int v16 = *(_DWORD *)(a3 + 28);
  if (v16 >= 1 && v16 < *(_DWORD *)(a1 + 620))
  {
    BET3FXD__log_select_Error(v7, 55018, (uint64_t)"Specified length of generated speech is too short (this sentence is composed from %d states), specify more than %d milliseconds\n", v11, v12, v13, v14, v15);
    return 2229280775;
  }
  if (*(int *)(a1 + 608) < 1) {
    goto LABEL_75;
  }
  uint64_t v17 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v82 = *(void *)(*(void *)(a1 + 8) + 1784);
  uint64_t v95 = (uint64_t)(a2 + 152);
  int v18 = *(_DWORD *)(a1 + 32);
  uint64_t v80 = v7;
  uint64_t v81 = a3 + 1304;
  int v79 = -8388608;
  uint64_t v85 = a3;
  uint64_t v90 = (uint64_t)a2;
  do
  {
    uint64_t v19 = *(void *)(a1 + 600);
    uint64_t v20 = (int *)(v19 + 528 * v17);
    uint64_t v88 = v19;
    uint64_t v96 = v20;
    if (v18 >= 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v81;
      do
      {
        uint64_t v23 = a3 + 4 * v21;
        int v24 = *(_DWORD *)(v23 + 344);
        if (v24 < 1)
        {
          LODWORD(v25) = 0;
        }
        else
        {
          uint64_t v25 = 0;
          unsigned int v26 = (int *)(v23 + 344);
          uint64_t v27 = (const char **)(a3 + 8 * *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 248) + *v20) + 5304);
          do
          {
            uint64_t v28 = *(const char **)(v22 + 8 * v25);
            if (v28 && *v27)
            {
              if (!cstdlib_strcmp(v28, *v27)) {
                goto LABEL_22;
              }
              int v24 = *v26;
            }
            ++v25;
          }
          while (v25 < v24);
          LODWORD(v25) = 0;
LABEL_22:
          uint64_t v19 = v88;
          uint64_t v20 = v96;
        }
        *(_DWORD *)(v19 + 528 * v17 + 4 * v21++ + 32) = v25;
        v22 += 40;
      }
      while (v21 < *(int *)(a1 + 32));
    }
    BET3FXD__log_select_Diag(v7, 21, (uint64_t)"[phoneme %d]\n");
    uint64_t v83 = v17;
    if (v82)
    {
      if (*(_DWORD *)(a3 + 116))
      {
        *(_DWORD *)(v19 + 528 * v17 + 8) = BET3FXD__TreeSearch(*(void *)(a1 + 8), v17, v95, 0, 0);
        BET3FXD__log_select_Diag(v7, 6, (uint64_t)"DUR pdf id %d\n");
        uint64_t result = BET3FXD__FindDurPDF((uint64_t)v96, a2, *(__int16 *)(a1 + 16), 0);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v34 = BET3FXD__div_int32_int32_to_Q8_24(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 8) + 1784) + 2 * *v96), *(_DWORD *)(a3 + 24));
        if (v34)
        {
          int v35 = v34;
          if (*a2 < 1)
          {
            int v36 = 0;
          }
          else
          {
            int v36 = 0;
            uint64_t v37 = 2;
            do
            {
              v36 += BET3FXD__int32_to_Q12_20(*(_DWORD *)(*(void *)(v88 + 528 * v83 + 16) + 4 * v37));
              BOOL v38 = v37++ <= *a2;
            }
            while (v38);
          }
          int v39 = v35 + v79;
          int v40 = BET3FXD__div_Q8_24_Q12_20_to_Q8_24(v35 + v79, v36);
          uint64_t v19 = v88;
          uint64_t v41 = v88 + 528 * v83;
          *(_DWORD *)(v41 + 24) = 0;
          uint64_t v42 = (_DWORD *)(v41 + 24);
          if (*a2 < 1)
          {
            int v52 = 0;
          }
          else
          {
            int v43 = v40;
            int v93 = v39;
            uint64_t v44 = v88 + 528 * v83;
            uint64_t v47 = *(void *)(v44 + 16);
            unsigned int v46 = (uint64_t *)(v44 + 16);
            uint64_t v45 = v47;
            uint64_t v48 = 2;
            do
            {
              int v49 = BET3FXD__mul_int32_Q8_24_to_Q8_24(*(_DWORD *)(v45 + 4 * v48), v43);
              int v50 = BET3FXD__Q8_24_to_int32(v49 + 0x7FFFFF);
              if (v50 <= 1) {
                int v51 = 1;
              }
              else {
                int v51 = v50;
              }
              uint64_t v45 = *v46;
              *(_DWORD *)(*v46 + 4 * v48) = v51;
              int v52 = *v42 + v51;
              *uint64_t v42 = v52;
              BOOL v38 = v48++ <= *a2;
            }
            while (v38);
            uint64_t v19 = v88;
            int v39 = v93;
          }
          int v79 = v39 - BET3FXD__int32_to_Q8_24(v52);
          uint64_t v17 = v83;
        }
        else
        {
          uint64_t v19 = v88;
        }
        *(_DWORD *)(a1 + 624) += *(_DWORD *)(v19 + 528 * v17 + 24);
        goto LABEL_51;
      }
      if (*(_DWORD *)(a3 + 112))
      {
        BET3FXD__log_select_Error(v7, 55017, (uint64_t)"State level segmentation is not currently supported\n", v29, v30, v31, v32, v33);
        goto LABEL_51;
      }
    }
    *(_DWORD *)(v19 + 528 * v17 + 8) = BET3FXD__TreeSearch(*(void *)(a1 + 8), v17, v95, 0, 0);
    BET3FXD__log_select_Diag(v7, 6, (uint64_t)"DUR pdf id %d\n");
    if (!*(_DWORD *)(a3 + 28))
    {
      uint64_t result = BET3FXD__FindDurPDF((uint64_t)v96, a2, *(__int16 *)(a1 + 16), 0);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      SetSilenceDuration_0(a1, a2, a3, v96);
      *(_DWORD *)(a1 + 624) += *(_DWORD *)(v19 + 528 * v17 + 24);
    }
LABEL_51:
    int v18 = *(_DWORD *)(a1 + 32);
    if (v18 >= 1)
    {
      for (uint64_t i = 0; i < v18; ++i)
      {
        uint64_t v54 = *(void *)(a1 + 24);
        if (!*(_DWORD *)(v54 + 312 * i + 264))
        {
          if (*(_DWORD *)(v54 + 312 * i + 272))
          {
            uint64_t v55 = a1 + 8 * i;
            int v56 = *a2 * v83;
            uint64_t v86 = *(void *)(*(void *)(v55 + 304) + 8 * v56);
            uint64_t v87 = *(void *)(*(void *)(v55 + 224) + 8 * v56);
          }
          uint64_t v57 = (char *)a2 + 2 * i;
          if (*((_WORD *)v57 + 396))
          {
            uint64_t v58 = v7;
            uint64_t v59 = 0;
            unint64_t v60 = 0;
            uint64_t v94 = (unsigned __int16 *)(v57 + 792);
            uint64_t v61 = v19 + 528 * v83;
            uint64_t v62 = (void *)(v61 + 8 * i);
            uint64_t v92 = &a2[2 * i + 178];
            uint64_t v91 = v62 + 9;
            uint64_t v84 = &a2[i + 1];
            long long v63 = v62 + 19;
            long long v64 = v62 + 29;
            int v89 = (unsigned int *)(v61 + 4 * i + 32);
            while (1)
            {
              uint64_t v65 = *(unsigned __int16 *)(*(void *)v92 + v59);
              *(_DWORD *)(*v91 + 4 * v65) = BET3FXD__TreeSearch(*(void *)(a1 + 8), *v96, v95, i, v60);
              BET3FXD__log_select_Diag(v58, 6, (uint64_t)"%s pdf state %d id %d\n");
              uint64_t v66 = *(void *)(a1 + 24);
              if (*(_DWORD *)(v66 + 312 * i + 272))
              {
                int v67 = v65 - 2 + (v65 - 2) * *v84;
                *(void *)(*v63 + 8 * v65) = v87 + 4 * v67;
                *(void *)(*v63 + 8 * v65) -= 4;
                *(void *)(*v64 + 8 * v65) = v86 + 4 * v67;
                *(void *)(*v64 + 8 * v65) -= 4;
                uint64_t result = BET3FXD__FindMsdPDF(i, v65, (uint64_t)v96, v90, v85);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              else if (*(_DWORD *)(v66 + 312 * i + 268))
              {
                uint64_t v68 = *(void *)(a1 + 632);
                uint64_t v69 = *(void *)(a1 + 640);
                if (!v68)
                {
                  if (v69)
                  {
                    uint64_t v68 = 0;
                  }
                  else
                  {
                    int v70 = *(_DWORD *)(a1 + 608) * *v94 * *(unsigned __int16 *)(v90 + 396);
                    uint64_t v71 = v70 + v70 * *(unsigned __int16 *)(v90 + 402);
                    uint64_t v72 = heap_Calloc(*(void **)(v58 + 8), v71, 4);
                    *(void *)(a1 + 632) = v72;
                    if (!v72) {
                      return 2229280778;
                    }
                    uint64_t v73 = heap_Calloc(*(void **)(v80 + 8), v71, 4);
                    *(void *)(a1 + 640) = v73;
                    if (!v73) {
                      return 2229280778;
                    }
                    uint64_t v69 = v73;
                    *(_DWORD *)(a1 + 648) = 0;
                    uint64_t v68 = *(void *)(a1 + 632);
                  }
                }
                uint64_t result = BET3FXD__FindContPDF(i, v65, (uint64_t)v96, v90, *v89, v68, v69, (_DWORD *)(a1 + 648));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              ++v60;
              v59 += 16;
              if (v60 >= *v94)
              {
                int v18 = *(_DWORD *)(a1 + 32);
                a3 = v85;
                a2 = (int *)v90;
                uint64_t v7 = v58;
                uint64_t v19 = v88;
                break;
              }
            }
          }
        }
      }
    }
    uint64_t v17 = v83 + 1;
  }
  while (v83 + 1 < *(int *)(a1 + 608));
  int v16 = *(_DWORD *)(a3 + 28);
LABEL_75:
  if (v16 < 1
    || (int v74 = BET3FXD__int32_to_Q18_14(v16),
        __int16 v75 = BET3FXD__div_Q18_14_Q18_14_to_Q18_14(v74, 0),
        *(_WORD *)(a1 + 16) = BET3FXD__Q18_14_to_Q1_15(v75),
        *(int *)(a1 + 608) < 1))
  {
LABEL_80:
    if (BET3FXD__log_select_GetLogLevel(*(void *)(v7 + 32)) >= 0x15) {
      OutLabel_0(a1);
    }
    BET3FXD__log_select_Diag(v7, 2, (uint64_t)">> tree search done\n");
    AddBreakMarks_0(a1, a2, a3);
    return ParamGenLT_0(a1, a2);
  }
  else
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    while (1)
    {
      unsigned __int16 v78 = (int *)(*(void *)(a1 + 600) + v76);
      uint64_t result = BET3FXD__FindDurPDF((uint64_t)v78, a2, *(__int16 *)(a1 + 16), 0);
      if ((result & 0x80000000) != 0) {
        break;
      }
      SetSilenceDuration_0(a1, a2, a3, v78);
      *(_DWORD *)(a1 + 624) += v78[6];
      ++v77;
      v76 += 528;
      if (v77 >= *(int *)(a1 + 608)) {
        goto LABEL_80;
      }
    }
  }
  return result;
}

uint64_t SetSilenceDuration_0(uint64_t result, int *a2, uint64_t a3, int *a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *a4;
  if (*(unsigned char *)(*(void *)(v4 + 32) + v5) == 1)
  {
    int v8 = *(unsigned __int16 *)(*(void *)(v4 + 1784) + 2 * v5) / *(int *)(a3 + 24);
    LODWORD(v4) = *a2;
    if (v8 <= *a2)
    {
      if ((int)v4 >= 1)
      {
        uint64_t v14 = *((void *)a4 + 2);
        uint64_t v15 = 2;
        do
        {
          *(_DWORD *)(v14 + 4 * v15) = 1;
          BOOL v11 = v15++ <= *a2;
        }
        while (v11);
        LODWORD(v4) = *a2;
      }
      a4[6] = v4;
    }
    else
    {
      if (v8 >= a4[6])
      {
        if ((int)v4 < 1)
        {
          int v12 = 0;
          int v13 = 0;
        }
        else
        {
          int v13 = 0;
          int v12 = 0;
          uint64_t v16 = *((void *)a4 + 2);
          uint64_t v17 = 2;
          do
          {
            int v18 = *(_DWORD *)(v16 + 4 * v17);
            if (v18 <= 0)
            {
              int v18 = 1;
              *(_DWORD *)(v16 + 4 * v17) = 1;
              LODWORD(v4) = *a2;
            }
            BOOL v19 = v17 == 2 || v17 == v4 + 1;
            if (v19) {
              int v20 = 0;
            }
            else {
              int v20 = v18;
            }
            v12 += v20;
            if (!v19) {
              int v18 = 0;
            }
            v13 += v18;
            BOOL v11 = v17++ <= (int)v4;
          }
          while (v11);
        }
      }
      else
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = *((void *)a4 + 2);
          uint64_t v10 = 2;
          do
          {
            *(_DWORD *)(v9 + 4 * v10) = 1;
            uint64_t v4 = *a2;
            BOOL v11 = v10++ <= v4;
          }
          while (v11);
        }
        int v12 = v4 - 2;
        int v13 = 2;
      }
      uint64_t result = BET3FXD__div_int32_int32_to_Q8_24(v8 - v13, v12);
      a4[6] = v13;
      LODWORD(v21) = *a2;
      if (*a2 >= 3)
      {
        int v22 = result;
        uint64_t v23 = 3;
        do
        {
          if (v23 >= (int)v21) {
            uint64_t result = (v8 - v13);
          }
          else {
            uint64_t result = BET3FXD__mul_int32_Q8_24_to_int32(*(_DWORD *)(*((void *)a4 + 2) + 4 * v23), v22);
          }
          if ((int)result <= 1) {
            int v24 = 1;
          }
          else {
            int v24 = result;
          }
          *(_DWORD *)(*((void *)a4 + 2) + 4 * v23) = v24;
          int v13 = a4[6] + v24;
          a4[6] = v13;
          uint64_t v21 = *a2;
          BOOL v11 = v23++ < v21;
        }
        while (v11);
      }
    }
  }
  return result;
}

uint64_t OutLabel_0(uint64_t result)
{
  if (*(int *)(result + 608) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v1 + 600) + v2;
      uint64_t result = BET3FXD__log_select_Diag(*(void *)v1, 21, (uint64_t)"%d %d %d [%d]\n");
      v4 += *(_DWORD *)(v5 + 24);
      ++v3;
      v2 += 528;
    }
    while (v3 < *(int *)(v1 + 608));
  }
  return result;
}

uint64_t AddBreakMarks_0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "PHRASE_TIME");
  if (result)
  {
    uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "PHRASE");
    if (result)
    {
      uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "WORD");
      if (result)
      {
        uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "SYLLABLE");
        if (result)
        {
          uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "TIME");
          if (result)
          {
            uint64_t result = cstdlib_strcmp(*(const char **)(a3 + 80), "NONE");
            if (result)
            {
              uint64_t v12 = *(void *)a1;
              return BET3FXD__log_select_Error(v12, 55036, (uint64_t)"valid breaker is required\n", v7, v8, v9, v10, v11);
            }
          }
          else
          {
            uint64_t v39 = *(unsigned int *)(a1 + 608);
            if ((int)v39 >= 1)
            {
              uint64_t v40 = 0;
              int v41 = 0;
              int v42 = *(_DWORD *)(a3 + 88);
              int v43 = *a2;
              uint64_t v44 = *(void *)(a1 + 600);
              int v45 = v42;
              int v46 = 0;
              do
              {
                if (v43 >= 1)
                {
                  uint64_t result = *(void *)(v44 + 528 * v40 + 16) + 8;
                  uint64_t v47 = (v43 + 2) - 2;
                  int v46 = v41;
                  do
                  {
                    int v48 = *(_DWORD *)result;
                    result += 4;
                    v46 += v48;
                    --v47;
                  }
                  while (v47);
                }
                if (v46 > v45)
                {
                  int v45 = v41 + v42;
                  uint64_t v49 = v44 + 528 * v40;
                  uint64_t result = *(_DWORD *)(v49 + 4) | 2u;
                  *(_DWORD *)(v49 + 4) = result;
                }
                ++v40;
                int v41 = v46;
              }
              while (v40 != v39);
            }
          }
        }
        else
        {
          int v35 = *(_DWORD *)(a1 + 608);
          if (v35 >= 3)
          {
            uint64_t v36 = (v35 - 2);
            uint64_t v37 = *(int **)(a1 + 600);
            uint64_t v38 = *(void *)(*(void *)(a1 + 8) + 112);
            do
            {
              if (*(unsigned char *)(v38 + *v37)) {
                v37[133] |= 2u;
              }
              v37 += 132;
              --v36;
            }
            while (v36);
          }
        }
      }
      else
      {
        int v31 = *(_DWORD *)(a1 + 608);
        if (v31 >= 3)
        {
          uint64_t v32 = (v31 - 2);
          uint64_t v33 = *(int **)(a1 + 600);
          uint64_t v34 = *(void *)(*(void *)(a1 + 8) + 112);
          do
          {
            if ((*(unsigned char *)(v34 + *v33) & 0xFE) == 2) {
              v33[133] |= 2u;
            }
            v33 += 132;
            --v32;
          }
          while (v32);
        }
      }
    }
    else
    {
      int v27 = *(_DWORD *)(a1 + 608);
      if (v27 >= 3)
      {
        uint64_t v28 = (v27 - 2);
        uint64_t v29 = *(int **)(a1 + 600);
        uint64_t v30 = *(void *)(*(void *)(a1 + 8) + 112);
        do
        {
          if (*(unsigned char *)(v30 + *v29) == 3) {
            v29[133] |= 2u;
          }
          v29 += 132;
          --v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    uint64_t v13 = *(int *)(a1 + 608);
    if ((int)v13 >= 1)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v16 = *(void *)(a1 + 600);
      int v17 = *a2;
      int v18 = *(_DWORD *)(a3 + 88);
      uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 112);
      uint64_t v20 = v13 - 2;
      uint64_t v21 = *(unsigned int *)(a1 + 608);
      do
      {
        if (v17 < 1)
        {
          int v22 = 0;
        }
        else
        {
          int v22 = 0;
          uint64_t v23 = (int *)(*(void *)(v16 + 528 * v14 + 16) + 8);
          uint64_t v24 = (v17 + 2) - 2;
          do
          {
            int v25 = *v23++;
            v22 += v25;
            --v24;
          }
          while (v24);
        }
        v15 += v22;
        if (v15 > v18)
        {
          *(_DWORD *)(v16 + 528 * v14 + 4) |= 2u;
          int v15 = v22;
        }
        uint64_t result = v16 + 528 * v14;
        if (*(unsigned char *)(v19 + *(int *)result) == 3 && v14 < v20)
        {
          int v15 = 0;
          *(_DWORD *)(result + 532) |= 2u;
        }
        ++v14;
      }
      while (v14 != v21);
    }
  }
  return result;
}

uint64_t ParamGenLT_0(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)a1;
  unsigned int v67 = -2065686518;
  uint64_t v73 = 0;
  memset(__b, 0, sizeof(__b));
  memset(v71, 0, sizeof(v71));
  memset(v70, 0, sizeof(v70));
  cstdlib_memset(__b, 0, 0x78uLL);
  BET3FXD__InitSMatrices(v4, v71);
  BET3FXD__InitSMatrices(v4, v70);
  uint64_t v5 = heap_Calloc(*(void **)(v4 + 8), (*(_DWORD *)(a1 + 624) + 1), 1);
  *(void *)(a1 + 48) = v5;
  if (!v5) {
    return v67;
  }
  uint64_t v6 = heap_Calloc(*(void **)(v4 + 8), (*(_DWORD *)(a1 + 624) + 1), 4);
  *(void *)(a1 + 40) = v6;
  if (!v6) {
    return v67;
  }
  int v7 = *(_DWORD *)(a1 + 608);
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    LODWORD(v10) = *a2;
    do
    {
      if ((int)v10 >= 1)
      {
        uint64_t v11 = *(void *)(a1 + 600) + 528 * v8;
        uint64_t v14 = *(void *)(v11 + 16);
        uint64_t v12 = (uint64_t *)(v11 + 16);
        uint64_t v13 = v14;
        int v15 = v12 + 37;
        uint64_t v16 = 2;
        do
        {
          if (*(int *)(v13 + 4 * v16) >= 1)
          {
            int v17 = 0;
            uint64_t v18 = v9;
            do
            {
              *(unsigned char *)(*(void *)(a1 + 48) + v18) = *(unsigned char *)(*v15 + v16);
              *(_DWORD *)(*(void *)(a1 + 40) + 4 * v18++) = *(_DWORD *)(v12[38] + 4 * v16);
              uint64_t v13 = *v12;
              ++v17;
            }
            while (v17 < *(_DWORD *)(*v12 + 4 * v16));
            v9 += v17;
          }
          uint64_t v19 = *(unsigned int *)(a1 + 32);
          if ((int)v19 >= 1)
          {
            uint64_t v20 = *(_DWORD **)(a1 + 24);
            do
            {
              if (v20[68] && ((1 << v20[3]) & (unint64_t)*(unsigned __int8 *)(*v15 + v16)) >> v20[3]) {
                v20[11] += *(_DWORD *)(v13 + 4 * v16);
              }
              v20 += 78;
              --v19;
            }
            while (v19);
          }
          uint64_t v10 = *a2;
          BOOL v21 = v16++ <= v10;
        }
        while (v21);
        int v7 = *(_DWORD *)(a1 + 608);
      }
      ++v8;
    }
    while (v8 < v7);
  }
  if (*(int *)(a1 + 32) < 1)
  {
    unsigned int v67 = 0;
    goto LABEL_64;
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  unsigned int v67 = 0;
  while (1)
  {
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v25 = v24 + 312 * v22;
    if (*(_DWORD *)(v25 + 272)) {
      break;
    }
LABEL_60:
    if (++v22 >= *(int *)(a1 + 32)) {
      goto LABEL_64;
    }
  }
  if (!*(_DWORD *)(v24 + 312 * v22 + 44))
  {
LABEL_59:
    BET3FXD__DeInitMSDUttModel((void *)(a1 + 56), v22);
    goto LABEL_60;
  }
  unsigned int v26 = (uint64_t *)(v25 + 24);
  unsigned int inited = BET3FXD__InitPStreamParam((uint64_t *)(v25 + 24), 0);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v66 = v26;
    unsigned int v67 = BET3FXD__InitPStreamSM(v26, (uint64_t)v71);
    if ((v67 & 0x80000000) != 0) {
      goto LABEL_64;
    }
    int v28 = *(_DWORD *)(a1 + 608);
    if (v28 < 1) {
      goto LABEL_57;
    }
    uint64_t v29 = 0;
    int v30 = 0;
    int v31 = 0;
    uint64_t v68 = *(void *)(a1 + 600);
    uint64_t v32 = v24 + 312 * v22;
    uint64_t v33 = v32 + 56;
    uint64_t v34 = (void *)(v32 + 96);
    int v35 = (void *)(v32 + 104);
    int v36 = *a2;
    do
    {
      if (v36 >= 1)
      {
        uint64_t v69 = v29;
        uint64_t v37 = v68 + 528 * v29;
        uint64_t v38 = *(void *)(v37 + 16);
        uint64_t v39 = v37 + 8 * v22;
        uint64_t v40 = (void *)(v39 + 152);
        int v41 = (void *)(v39 + 232);
        uint64_t v42 = 2;
        do
        {
          int v43 = *(_DWORD *)(v38 + 4 * v42);
          if (v43 >= 1)
          {
            uint64_t v44 = *(void *)(a1 + 24) + 312 * v22;
            int v47 = *(_DWORD *)(v44 + 36);
            int v45 = (int *)(v44 + 36);
            LODWORD(v46) = v47;
            int v48 = v45 - 6;
            uint64_t v49 = *(void *)(a1 + 48);
            uint64_t v50 = v31;
            int v51 = 1;
            do
            {
              if ((int)v46 >= 1)
              {
                uint64_t v52 = 0;
                uint64_t v53 = *(void *)(*(void *)v33 + 8);
                do
                {
                  int v54 = *v48;
                  uint64_t v55 = 1 << *v48;
                  v23 |= v55;
                  int v56 = *(int **)(v53 + 8 * v52);
                  int v57 = *v56;
                  int v58 = v56[1];
                  if (v57 <= v58)
                  {
                    int v59 = v58 - v57 + 1;
                    unsigned int v60 = v31 + v57;
                    do
                    {
                      uint64_t v61 = v55 ^ 0xFFLL;
                      if ((v60 & 0x80000000) == 0)
                      {
                        uint64_t v61 = v55 ^ 0xFFLL;
                        if (*(_DWORD *)(a1 + 624) >= (signed int)v60) {
                          uint64_t v61 = *(unsigned __int8 *)(v49 + v60);
                        }
                      }
                      v23 &= v61;
                      ++v60;
                      --v59;
                    }
                    while (v59);
                  }
                  if ((unint64_t)(v55 & *(unsigned char *)(v49 + v50)) >> v54)
                  {
                    if (!v52 || (v55 & v23) >> v54)
                    {
                      uint64_t v63 = 4 * v52 + 4;
                      *(_DWORD *)(*(void *)(*v34 + 8 * v30) + 4 * v52) = *(_DWORD *)(*(void *)(*v40 + 8 * v42)
                                                                                       + v63);
                      int v62 = *(_DWORD *)(*(void *)(*v41 + 8 * v42) + v63);
                    }
                    else
                    {
                      int v62 = 0;
                      *(_DWORD *)(*(void *)(*v34 + 8 * v30) + 4 * v52) = 0;
                    }
                    *(_DWORD *)(*(void *)(*v35 + 8 * v30) + 4 * v52) = v62;
                  }
                  ++v52;
                  uint64_t v46 = *v45;
                }
                while (v52 < v46);
                int v43 = *(_DWORD *)(v38 + 4 * v42);
              }
              if (((1 << *v48) & (unint64_t)*(unsigned __int8 *)(v49 + v50)) >> *v48) {
                ++v30;
              }
              ++v50;
              ++v31;
              BOOL v21 = v51++ < v43;
            }
            while (v21);
            int v36 = *a2;
            int v31 = v50;
          }
          BOOL v21 = v42++ <= v36;
        }
        while (v21);
        int v28 = *(_DWORD *)(a1 + 608);
        uint64_t v29 = v69;
      }
      ++v29;
    }
    while (v29 < v28);
    if (v30 < 1)
    {
LABEL_57:
      uint64_t v64 = (uint64_t)v66;
    }
    else
    {
      (**(void (***)(uint64_t *, void))(*(void *)(a1 + 24) + 312 * v22 + 288))(v66, 0);
      uint64_t v64 = (uint64_t)v66;
    }
    BET3FXD__FreePStreamSM(v64);
    goto LABEL_59;
  }
  unsigned int v67 = inited;
LABEL_64:
  BET3FXD__FreePStreamParam(__b);
  BET3FXD__FreeSMatrices((uint64_t)v71);
  BET3FXD__FreeSMatrices((uint64_t)v70);
  return v67;
}

uint64_t BET3FXD__ParamGenFrames(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v116 = 0;
  memset(__b, 0, sizeof(__b));
  memset(v114, 0, sizeof(v114));
  memset(v113, 0, sizeof(v113));
  *a3 = 0;
  cstdlib_memset(__b, 0, 0x78uLL);
  BET3FXD__InitSMatrices(v5, v114);
  uint64_t v98 = v5;
  BET3FXD__InitSMatrices(v5, v113);
  uint64_t v109 = a1;
  int v6 = *(_DWORD *)(a1 + 612);
  uint64_t v7 = *(void *)(a1 + 600) + 528 * v6;
  *(_DWORD *)(v7 + 4) &= ~2u;
  int v8 = *(_DWORD *)(a1 + 608);
  BOOL v9 = __OFSUB__(v8, v6);
  int v10 = v8 - v6;
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
    LODWORD(v12) = 0;
    unsigned int v11 = 0;
  }
  else
  {
    unsigned int v11 = 0;
    LODWORD(v12) = 0;
    while ((*(unsigned char *)(v7 + 4) & 2) == 0)
    {
      uint64_t v13 = *a2;
      if ((int)v13 >= 1)
      {
        uint64_t v14 = (int *)(*(void *)(v7 + 16) + 8);
        do
        {
          int v15 = *v14++;
          LODWORD(v12) = v15 + v12;
          --v13;
        }
        while (v13);
      }
      v7 += 528;
      if (++v11 == v10)
      {
        unsigned int v11 = v10;
        break;
      }
    }
  }
  BET3FXD__log_select_Diag(v5, 2, (uint64_t)"| processing %d models %d frames <=> ");
  uint64_t v16 = a1;
  if (*(int *)(a1 + 32) < 1)
  {
    unsigned int inited = 0;
LABEL_83:
    signed int v93 = *(_DWORD *)(v16 + 612) + v11;
    *(_DWORD *)(v16 + 612) = v93;
    if (v93 >= *(_DWORD *)(v16 + 608)) {
      *a3 = 1;
    }
LABEL_85:
    uint64_t v92 = inited;
    goto LABEL_86;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  unsigned int inited = 0;
  uint64_t v97 = -(uint64_t)v11;
  unsigned int v95 = v11;
  while (1)
  {
    uint64_t v22 = *(void *)(v16 + 24);
    if (*(_DWORD *)(v22 + 312 * v17 + 268)) {
      break;
    }
LABEL_79:
    if (++v17 >= *(int *)(v16 + 32)) {
      goto LABEL_83;
    }
  }
  uint64_t v23 = v22 + 312 * v17;
  unsigned int v101 = (uint64_t *)(v23 + 64);
  uint64_t v108 = v17;
  uint64_t v111 = (uint64_t *)(v23 + 24);
  if (*(void *)(v23 + 64))
  {
    uint64_t v24 = v20;
    BET3FXD__FreePStreamParam((void *)(v23 + 24));
    uint64_t v20 = v24;
    uint64_t v17 = v108;
    uint64_t v16 = v109;
    uint64_t v25 = *(void *)(v109 + 24);
  }
  else
  {
    uint64_t v25 = *(void *)(v16 + 24);
  }
  uint64_t v26 = v25 + 312 * v17;
  int v27 = *(_DWORD *)(v26 + 280);
  uint64_t v105 = *(unsigned int *)(v26 + 284);
  int v28 = *(_DWORD *)(v16 + 612);
  int v29 = *(_DWORD *)(v16 + 608);
  if ((int)(v18 + v11 + v28) < v29 && v19 < v27)
  {
    int v30 = *a2;
    uint64_t v31 = v7;
    do
    {
      if (v30 >= 1)
      {
        uint64_t v32 = (int *)(*(void *)(v31 + 16) + 8);
        uint64_t v33 = (v30 + 2) - 2;
        do
        {
          int v34 = *v32++;
          v19 += v34;
          --v33;
        }
        while (v33);
      }
      v31 += 528;
      uint64_t v18 = (v18 + 1);
      BOOL v35 = (int)(v18 + v11 + v28) < v29 && v19 < v27;
    }
    while (v35);
  }
  if (v28 > (int)v20 && v21 < v27)
  {
    uint64_t v36 = v7 + 528 * v97;
    int v37 = *a2;
    do
    {
      if (v37 >= 1)
      {
        uint64_t v38 = (int *)(*(void *)(v36 - 512) + 8);
        uint64_t v39 = (v37 + 2) - 2;
        do
        {
          int v40 = *v38++;
          v21 += v40;
          --v39;
        }
        while (v39);
      }
      uint64_t v20 = (v20 + 1);
      if (v28 <= (int)v20) {
        break;
      }
      v36 -= 528;
    }
    while (v21 < v27);
  }
  uint64_t v102 = v7;
  uint64_t v107 = v20;
  BET3FXD__log_select_Diag(v98, 3, (uint64_t)"L: %d %d  R: %d %d\n");
  uint64_t v41 = v22 + 312 * v108;
  *(_DWORD *)(v41 + 164) = v105 + v12 + v19 + v21 + v105;
  uint64_t v106 = (int *)(v41 + 164);
  *(_DWORD *)(v41 + 44) = v12;
  unsigned int v103 = (int *)(v41 + 44);
  unsigned int inited = BET3FXD__InitPStreamParam(v111, 0);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_85;
  }
  uint64_t v99 = v18;
  uint64_t v42 = v22 + 312 * v108;
  int v45 = *(_DWORD *)(v42 + 40);
  uint64_t v44 = (int *)(v42 + 40);
  int v43 = v45;
  uint64_t v17 = v108;
  if (v45 < 1)
  {
    uint64_t v16 = v109;
    uint64_t v18 = v99;
    uint64_t v20 = v107;
LABEL_78:
    uint64_t v7 = v102;
    goto LABEL_79;
  }
  uint64_t v46 = 0;
  int v47 = v101 + 10;
  uint64_t v48 = v22 + 312 * v108;
  unsigned int v49 = v11;
  uint64_t v50 = (int **)(v48 + 176);
  int v51 = (void *)(v48 + 216);
  uint64_t v52 = (void *)(v48 + 224);
  uint64_t v20 = v107;
  int v112 = v99 + v49 + v107;
  int v100 = (void *)(v48 + 184);
  uint64_t v16 = v109;
  uint64_t v110 = v101 + 10;
  while (*(_DWORD *)(*(void *)(*(void *)(v16 + 24) + 312 * v17 + 304) + 4 * v46) != 1)
  {
LABEL_75:
    if (++v46 >= v43)
    {
      unsigned int v11 = v95;
      uint64_t v18 = v99;
      goto LABEL_78;
    }
  }
  uint64_t v53 = v47;
  uint64_t v54 = BET3FXD__InitPStreamParam(v47, (uint64_t)__b);
  if ((v54 & 0x80000000) == 0)
  {
    uint64_t v54 = BET3FXD__InitPStreamSM(v53, (uint64_t)v113);
    if ((v54 & 0x80000000) == 0)
    {
      unsigned int inited = v54;
      if ((int)v105 < 1)
      {
        LODWORD(v12) = 0;
        uint64_t v56 = v108;
        uint64_t v55 = v109;
        int v57 = v106;
        int v58 = v107;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v56 = v108;
        uint64_t v55 = v109;
        int v57 = v106;
        int v58 = v107;
        while (v12 < *v106)
        {
          int v59 = *v50;
          if (**v50 >= 1)
          {
            uint64_t v60 = 0;
            uint64_t v61 = *(void *)(*v51 + 8 * v12);
            uint64_t v62 = *(void *)(*v52 + 8 * v12);
            do
            {
              *(_DWORD *)(v61 + 4 * v60) = 0;
              *(_DWORD *)(v62 + 4 * v60++) = 4095;
            }
            while (v60 < *v59);
          }
          if (++v12 == v105)
          {
            LODWORD(v12) = v105;
            break;
          }
        }
      }
      if (v112 >= 1)
      {
        int v63 = 0;
        uint64_t v64 = *(void *)(v55 + 600);
        int v65 = *a2;
        do
        {
          int v66 = v63 - v58 + *(_DWORD *)(v55 + 612);
          if (v65 >= 1)
          {
            uint64_t v67 = v64 + 528 * v66;
            uint64_t v68 = *(void *)(v67 + 16);
            uint64_t v69 = v67 + 8 * v56;
            int v70 = (void *)(v69 + 152);
            uint64_t v71 = (void *)(v69 + 232);
            uint64_t v72 = 2;
            do
            {
              int v73 = *(_DWORD *)(v68 + 4 * v72);
              if (v73 >= 1)
              {
                int v74 = *v50;
                uint64_t v12 = (int)v12;
                LODWORD(v75) = **v50;
                int v76 = 1;
                do
                {
                  if ((int)v75 >= 1)
                  {
                    uint64_t v77 = 0;
                    uint64_t v78 = *(void *)(*v70 + 8 * v72);
                    uint64_t v79 = *(void *)(*v51 + 8 * v12);
                    uint64_t v80 = *(void *)(*v71 + 8 * v72);
                    uint64_t v81 = *(void *)(*v52 + 8 * v12);
                    do
                    {
                      int v82 = v46 + *v44 * v77;
                      *(_DWORD *)(v79 + 4 * v77) = *(_DWORD *)(v78 + 4 * v82);
                      *(_DWORD *)(v81 + 4 * v77++) = *(_DWORD *)(v80 + 4 * v82);
                      uint64_t v75 = *v74;
                    }
                    while (v77 < v75);
                    int v73 = *(_DWORD *)(v68 + 4 * v72);
                  }
                  ++v12;
                  BOOL v35 = v76++ < v73;
                }
                while (v35);
                int v65 = *a2;
              }
              BOOL v35 = v72++ <= v65;
            }
            while (v35);
          }
          ++v63;
        }
        while (v63 != v112);
        uint64_t v102 = v64 + 528 * v66;
        int v57 = v106;
      }
      int v83 = *v57;
      if ((int)v12 < *v57)
      {
        uint64_t v84 = *v50;
        uint64_t v12 = (int)v12;
        LODWORD(v85) = **v50;
        do
        {
          if ((int)v85 >= 1)
          {
            uint64_t v86 = 0;
            uint64_t v87 = *(void *)(*v51 + 8 * v12);
            uint64_t v88 = *(void *)(*v52 + 8 * v12);
            do
            {
              *(_DWORD *)(v87 + 4 * v86) = 0;
              *(_DWORD *)(v88 + 4 * v86++) = 4095;
              uint64_t v85 = *v84;
            }
            while (v86 < v85);
            int v83 = *v57;
          }
          ++v12;
        }
        while (v12 < v83);
      }
      (*(void (**)(void *, void))(*(void *)(*(void *)(v55 + 24) + 312 * v56 + 288) + 8 * v46))(v110, 0);
      if (*v103 >= 1)
      {
        uint64_t v89 = 0;
        uint64_t v90 = *v101;
        uint64_t v91 = *v100 + 8 * (v21 + (int)v105);
        do
        {
          *(_DWORD *)(*(void *)(v90 + 8 * v89) + 4 * v46) = **(_DWORD **)(v91 + 8 * v89);
          ++v89;
        }
        while (v89 < *v103);
      }
      BET3FXD__FreePStreamSM((uint64_t)v110);
      BET3FXD__FreePStreamParam(v110);
      uint64_t v16 = v109;
      int v47 = v101 + 10;
      int v43 = *v44;
      uint64_t v20 = v107;
      uint64_t v17 = v108;
      goto LABEL_75;
    }
  }
  uint64_t v92 = v54;
LABEL_86:
  BET3FXD__FreePStreamParam(__b);
  BET3FXD__FreeSMatrices((uint64_t)v114);
  BET3FXD__FreeSMatrices((uint64_t)v113);
  return v92;
}

uint64_t BET3FXD__InitVData(int a1, char *__b, _DWORD *a3)
{
  cstdlib_memset(__b, 0, 0x4C0uLL);
  uint64_t result = BET3FXD__InitModelSet(a1, __b, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = BET3FXD__InitTreeSet(a1, __b + 608);
    if ((result & 0x80000000) == 0)
    {
      return BET3FXD__InitDWinSet(a1, __b + 816, (uint64_t)a3);
    }
  }
  return result;
}

void *BET3FXD__DeInitVData(void *a1, uint64_t a2)
{
  BET3FXD__DeInitModelSet((uint64_t)a1, (void *)a2);
  BET3FXD__DeInitTreeSet(a1, (char *)(a2 + 608));
  BET3FXD__DeInitDWinSet((void **)a1, (char *)(a2 + 816));

  return cstdlib_memset((void *)a2, 0, 0x4C0uLL);
}

uint64_t BET3FXD__LoadVData(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if ((int)a2[150] < 1) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t)(a2 + 152);
  int v8 = a2 + 204;
  uint64_t v9 = a3 + 2664;
  uint64_t v10 = a3 + 5064;
  do
  {
    uint64_t ModelFile = BET3FXD__LoadModelFile(a1, v4, v6, v9, v10, a3);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = BET3FXD__LoadTreesFile(a1, v7, v6, (unsigned int *)(v10 - 2640), a3, v12, v13, v14);
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    uint64_t ModelFile = BET3FXD__LoadDWinFile(a1, (uint64_t)v8, v6, (unsigned int *)(v9 + 1200));
    if ((ModelFile & 0x80000000) != 0) {
      return ModelFile;
    }
    ++v6;
    uint64_t v20 = (int)v4[150];
    v9 += 120;
    v10 += 24;
  }
  while (v6 < v20);
  uint64_t v21 = v4[150];
  if ((int)v20 < 1) {
    return 0;
  }
  uint64_t v22 = a3 + 144;
  uint64_t v23 = v4 + 178;
  while (1)
  {
    if (!*v23)
    {
      uint64_t v24 = 2229280775;
      uint64_t v26 = "%s tree is required\n";
      uint64_t v27 = a1;
      uint64_t v28 = 55032;
      goto LABEL_19;
    }
    if ((v4[130] || v4[140]) && v4[1] % *v8) {
      break;
    }
    v22 += 8;
    ++v23;
    v8 += 10;
    ++v4;
    if (!--v21) {
      return 0;
    }
  }
  uint64_t v24 = 2229280775;
  uint64_t v26 = "The number of dynamic windows for %s is not correct %d %d\n";
  uint64_t v27 = a1;
  uint64_t v28 = 55035;
LABEL_19:
  BET3FXD__log_select_Error(v27, v28, (uint64_t)v26, v15, v16, v17, v18, v19);
  return v24;
}

uint64_t BET3FXD__InitVStream(uint64_t a1, char *__b, _DWORD *a3)
{
  cstdlib_memset(__b, 0, 0x7A0uLL);
  *(void *)uint64_t __b = a1;
  uint64_t v6 = a3[33];
  *((_DWORD *)__b + 8) = v6;
  uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), v6, 312);
  *((void *)__b + 3) = v7;
  if (!v7) {
    return 2229280778;
  }
  if (*((int *)__b + 8) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = __b + 672;
    uint64_t v10 = a3 + 36;
    do
    {
      cstdlib_strcpy(v9, "");
      if (cstdlib_strlen(*(const char **)&v10[2 * v8])) {
        cstdlib_strcpy(v9, *(const char **)&v10[2 * v8]);
      }
      ++v8;
      uint64_t v11 = *((int *)__b + 8);
      v9 += 128;
    }
    while (v8 < v11);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)__b + 3);
      int v14 = a3[18];
      uint64_t v15 = 312 * *((unsigned int *)__b + 8);
      do
      {
        uint64_t v16 = v13 + v12;
        *(_DWORD *)(v16 + 12) = a3[56];
        *(void *)(v16 + 24) = a1;
        *(void *)(v16 + 144) = a1;
        if (v12)
        {
          if (a3[536]) {
            *(_DWORD *)(v13 + v12 + 272) = 1;
          }
          else {
            *(_DWORD *)(v13 + v12 + 268) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v13 + 264) = 1;
        }
        if (v14 == 1) {
          *(_DWORD *)(v13 + v12 + 276) = 1;
        }
        ++a3;
        v12 += 312;
      }
      while (v15 != v12);
    }
  }
  uint64_t result = 0;
  *((_DWORD *)__b + 162) = 0;
  *(_OWORD *)(__b + 632) = 0u;
  return result;
}

uint64_t BET3FXD__LoadVStream(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*((int *)a1 + 8) < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 816;
  uint64_t v8 = a1[3];
  while (1)
  {
    uint64_t v9 = (_DWORD *)(v7 + 40 * v6);
    uint64_t v10 = v8 + 312 * v6;
    *(void *)(v10 + 56) = v9;
    int v11 = *(_DWORD *)(v10 + 268);
    if (v11) {
      *(void *)(v8 + 312 * v6 + 176) = v9;
    }
    if (!*(_DWORD *)(v8 + 312 * v6 + 264)) {
      break;
    }
    if (v11) {
      goto LABEL_7;
    }
LABEL_8:
    if (++v6 >= *((int *)a1 + 8)) {
      return 0;
    }
  }
  uint64_t v13 = a2 + 4 * v6;
  uint64_t v14 = v8 + 312 * v6;
  *(_DWORD *)(v14 + 36) = *(_DWORD *)(v13 + 4);
  uint64_t v15 = (*(_DWORD *)(v13 + 4) / *v9);
  *(_DWORD *)(v14 + 40) = v15;
  *(void *)(v14 + 280) = *(void *)(a3 + 92);
  uint64_t v16 = heap_Calloc(*(void **)(*a1 + 8), v15, 8);
  uint64_t v17 = a1[3];
  *(void *)(v17 + 312 * v6 + 288) = v16;
  if (!v16) {
    return 2229280778;
  }
  LODWORD(v17) = *(_DWORD *)(v17 + 312 * v6 + 40);
  if ((int)v17 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      if (cstdlib_strcmp(*(const char **)(*(void *)(a3 + 8 * v6 + 2184) + 8 * v18), "MLPG2"))
      {
        uint64_t v31 = *a1;
        uint64_t v32 = "invalid solver for stream %d: %s\n";
        goto LABEL_28;
      }
      *(void *)(*(void *)(a1[3] + 312 * v6 + 288) + 8 * v18++) = BET3FXD__mlpg2;
      uint64_t v17 = *(int *)(a1[3] + 312 * v6 + 40);
    }
    while (v18 < v17);
  }
  uint64_t v24 = heap_Calloc(*(void **)(*a1 + 8), v17, 4);
  uint64_t v25 = a1[3];
  *(void *)(v25 + 312 * v6 + 304) = v24;
  if (!v24) {
    return 2229280778;
  }
  if (*(int *)(v25 + 312 * v6 + 40) < 1)
  {
LABEL_23:
    BET3FXD__log_select_Diag(*a1, 1, (uint64_t)"%s: vSize = %d, order = %d, nLayer = %d\n");
    uint64_t v8 = a1[3];
    if (!*(_DWORD *)(v8 + 312 * v6 + 268)) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v12 = v8 + 312 * v6;
    *(_DWORD *)(v12 + 156) = *(_DWORD *)(a2 + 4 * v6 + 4);
    *(_DWORD *)(v12 + 160) = 1;
    goto LABEL_8;
  }
  uint64_t v26 = 0;
  uint64_t v27 = (void *)(a3 + 8 * v6 + 2344);
  while (1)
  {
    if (!cstdlib_strcmp(*(const char **)(*v27 + 8 * v26), "OFF"))
    {
      int v28 = 0;
      goto LABEL_22;
    }
    if (cstdlib_strcmp(*(const char **)(*v27 + 8 * v26), "ON")) {
      break;
    }
    int v28 = 1;
LABEL_22:
    uint64_t v29 = a1[3] + 312 * v6;
    *(_DWORD *)(*(void *)(v29 + 304) + 4 * v26++) = v28;
    if (v26 >= *(int *)(v29 + 40)) {
      goto LABEL_23;
    }
  }
  uint64_t v31 = *a1;
  uint64_t v32 = "valid breaker setting is required for stream %d\n";
LABEL_28:
  BET3FXD__log_select_Error(v31, 55036, (uint64_t)v32, v19, v20, v21, v22, v23);
  return 2229280775;
}

void *BET3FXD__DeInitVStream(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result)
    {
      if (*((int *)result + 8) >= 1)
      {
        uint64_t v2 = 0;
        uint64_t v3 = result[3];
        uint64_t v4 = 304;
        do
        {
          if (!v3) {
            break;
          }
          BET3FXD__FreePStreamSM(v3 + v4 - 280);
          BET3FXD__FreePStreamParam((void *)(v1[3] + v4 - 280));
          BET3FXD__FreePStreamSM(v1[3] + v4 - 160);
          BET3FXD__FreePStreamParam((void *)(v1[3] + v4 - 160));
          uint64_t v3 = v1[3];
          uint64_t v5 = *(void *)(v3 + v4 - 16);
          if (v5)
          {
            heap_Free(*(void **)(*v1 + 8), v5);
            uint64_t v3 = v1[3];
            *(void *)(v3 + v4 - 16) = 0;
          }
          uint64_t v6 = *(void *)(v3 + v4);
          if (v6)
          {
            heap_Free(*(void **)(*v1 + 8), v6);
            uint64_t v3 = v1[3];
            *(void *)(v3 + v4) = 0;
          }
          ++v2;
          v4 += 312;
        }
        while (v2 < *((int *)v1 + 8));
      }
      uint64_t v7 = v1[6];
      if (v7)
      {
        heap_Free(*(void **)(*v1 + 8), v7);
        v1[6] = 0;
      }
      uint64_t v8 = v1[5];
      if (v8)
      {
        heap_Free(*(void **)(*v1 + 8), v8);
        v1[5] = 0;
      }
      uint64_t v9 = v1[3];
      if (v9)
      {
        heap_Free(*(void **)(*v1 + 8), v9);
        v1[3] = 0;
      }
      uint64_t v10 = v1[79];
      if (v10)
      {
        heap_Free(*(void **)(*v1 + 8), v10);
        v1[79] = 0;
      }
      uint64_t v11 = v1[80];
      if (v11)
      {
        heap_Free(*(void **)(*v1 + 8), v11);
        v1[80] = 0;
      }
      BET3FXD__DeInitUttModel(v1 + 7);
      return cstdlib_memset(v1, 0, 0x7A0uLL);
    }
  }
  return result;
}

void *BET3FXD__InitVParam(_DWORD *a1)
{
  uint64_t result = cstdlib_memset(a1, 0, 0x1F30uLL);
  a1[32] = 1;
  return result;
}

void *BET3FXD__DeInitVParam(uint64_t a1, void *__b)
{
  if (__b[954])
  {
    for (uint64_t i = 0; i != 20; ++i)
    {
      if (*(void *)(__b[954] + 8 * i))
      {
        for (uint64_t j = 0; j != 800; j += 8)
        {
          uint64_t v6 = *(void *)(*(void *)(__b[954] + 8 * i) + j);
          if (v6)
          {
            heap_Free(*(void **)(a1 + 8), v6);
            *(void *)(*(void *)(__b[954] + 8 * i) + j) = 0;
          }
        }
        uint64_t v7 = *(void *)(__b[954] + 8 * i);
        if (v7)
        {
          heap_Free(*(void **)(a1 + 8), v7);
          *(void *)(__b[954] + 8 * i) = 0;
        }
      }
      uint64_t v8 = *(void *)(__b[955] + 8 * i);
      if (v8)
      {
        heap_Free(*(void **)(a1 + 8), v8);
        *(void *)(__b[955] + 8 * i) = 0;
      }
      uint64_t v9 = *(void *)(__b[953] + 8 * i);
      if (v9)
      {
        heap_Free(*(void **)(a1 + 8), v9);
        *(void *)(__b[953] + 8 * i) = 0;
      }
    }
    uint64_t v10 = __b[954];
    if (v10)
    {
      heap_Free(*(void **)(a1 + 8), v10);
      __b[954] = 0;
    }
    uint64_t v11 = __b[955];
    if (v11)
    {
      heap_Free(*(void **)(a1 + 8), v11);
      __b[955] = 0;
    }
    uint64_t v12 = __b[953];
    if (v12)
    {
      heap_Free(*(void **)(a1 + 8), v12);
      __b[953] = 0;
    }
  }
  uint64_t v13 = __b[10];
  if (v13)
  {
    heap_Free(*(void **)(a1 + 8), v13);
    __b[10] = 0;
  }
  uint64_t v14 = __b[15];
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    __b[15] = 0;
  }
  uint64_t v15 = __b[956];
  if (v15)
  {
    heap_Free(*(void **)(a1 + 8), v15);
    __b[956] = 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = __b;
  do
  {
    uint64_t v18 = (char *)&__b[v16];
    uint64_t v19 = *((void *)v18 + 18);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      *((void *)v18 + 18) = 0;
    }
    uint64_t v20 = *((void *)v18 + 53);
    if (v20)
    {
      heap_Free(*(void **)(a1 + 8), v20);
      *((void *)v18 + 53) = 0;
    }
    for (uint64_t k = 0; k != 5; ++k)
    {
      uint64_t v22 = &v17[k];
      uint64_t v23 = v17[k + 63];
      if (v23)
      {
        heap_Free(*(void **)(a1 + 8), v23);
        v22[63] = 0;
      }
      uint64_t v24 = v22[163];
      if (v24)
      {
        heap_Free(*(void **)(a1 + 8), v24);
        v22[163] = 0;
      }
    }
    for (uint64_t m = 213; m != 218; ++m)
    {
      uint64_t v26 = v17[m];
      if (v26)
      {
        heap_Free(*(void **)(a1 + 8), v26);
        v17[m] = 0;
      }
    }
    uint64_t v27 = (char *)__b + 4 * v16;
    if (*((_DWORD *)v27 + 66))
    {
      unint64_t v28 = 0;
      uint64_t v29 = (unsigned int *)(v27 + 264);
      int v30 = (char *)&__b[v16];
      uint64_t v31 = v30 + 2344;
      uint64_t v32 = v30 + 2184;
      uint64_t v33 = v30 + 2264;
      do
      {
        if (*v31)
        {
          uint64_t v34 = *(void *)(*v31 + 8 * v28);
          if (v34)
          {
            heap_Free(*(void **)(a1 + 8), v34);
            *(void *)(*v31 + 8 * v28) = 0;
          }
        }
        if (*v32)
        {
          uint64_t v35 = *(void *)(*v32 + 8 * v28);
          if (v35)
          {
            heap_Free(*(void **)(a1 + 8), v35);
            *(void *)(*v32 + 8 * v28) = 0;
          }
        }
        if (*v33)
        {
          uint64_t v36 = *(void *)(*v33 + 8 * v28);
          if (v36)
          {
            heap_Free(*(void **)(a1 + 8), v36);
            *(void *)(*v33 + 8 * v28) = 0;
          }
        }
        ++v28;
      }
      while (v28 < *v29);
    }
    int v37 = (char *)&__b[v16];
    uint64_t v38 = *((void *)v37 + 293);
    if (v38)
    {
      heap_Free(*(void **)(a1 + 8), v38);
      *((void *)v37 + 293) = 0;
    }
    uint64_t v39 = *((void *)v37 + 273);
    if (v39)
    {
      heap_Free(*(void **)(a1 + 8), v39);
      *((void *)v37 + 273) = 0;
    }
    int v40 = (char *)&__b[v16];
    uint64_t v41 = *((void *)v40 + 283);
    if (v41)
    {
      uint64_t v42 = v40 + 2264;
      heap_Free(*(void **)(a1 + 8), v41);
      *uint64_t v42 = 0;
    }
    ++v16;
    v17 += 5;
  }
  while (v16 != 10);
  for (uint64_t n = 663; n != 919; ++n)
  {
    uint64_t v44 = __b[n];
    if (v44)
    {
      heap_Free(*(void **)(a1 + 8), v44);
      __b[n] = 0;
    }
  }
  if (__b[952])
  {
    for (iuint64_t i = 0; ii != 2048; ii += 8)
    {
      uint64_t v46 = *(void *)(__b[952] + ii);
      if (v46)
      {
        heap_Free(*(void **)(a1 + 8), v46);
        *(void *)(__b[952] + ii) = 0;
      }
    }
    heap_Free(*(void **)(a1 + 8), __b[952]);
  }

  return cstdlib_memset(__b, 0, 0x1F30uLL);
}

uint64_t XFREAD_XTRA_bound(unsigned int a1, unsigned int *a2)
{
  uint64_t result = (a1 + *a2 / a1 * a1 - *a2) % a1;
  unsigned int v3 = result + *a2;
  if (v3 >= a2[4]) {
    unsigned int v3 = a2[4];
  }
  *a2 = v3;
  return result;
}

uint64_t dequantDur(uint64_t a1, int a2, int a3, _DWORD *a4, _DWORD *a5, int a6)
{
  uint64_t v10 = *(int *)(a1 + 4);
  uint64_t v11 = *(void *)(a1 + 128) + *(unsigned int *)(a1 + 136) + (2 * a2 * *(_DWORD *)a1 * v10);
  if (*(_DWORD *)a1 == 1)
  {
    int v12 = *(unsigned __int8 *)(v11 + a3);
    int v13 = *(unsigned __int8 *)(v11 + v10 + a3);
  }
  else
  {
    int v12 = *(unsigned __int16 *)(v11 + 2 * a3);
    int v13 = *(unsigned __int16 *)(v11 + 2 * ((int)v10 + a3));
  }
  *a4 = dequantValueToU32(v12, *(_DWORD *)(a1 + 12 + 4 * a3), *(unsigned __int16 *)(a1 + 68), *(unsigned __int16 *)(a1 + 70 + 2 * a3), *(unsigned __int16 *)(a1 + 98 + 2 * a3), a6);
  *a5 = dequantValueToU32(v13, *(_DWORD *)(a1 + 12 + 4 * (*(_DWORD *)(a1 + 4) + a3)), *(unsigned __int16 *)(a1 + 68), *(unsigned __int16 *)(a1 + 70 + 2 * (*(_DWORD *)(a1 + 4) + a3)), *(unsigned __int16 *)(a1 + 98 + 2 * (*(_DWORD *)(a1 + 4) + a3)), a6);
  return 0;
}

uint64_t dequantValueToU32(int a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  __int16 v8 = a6 + 2 - a4;
  if (a6 + 2 > a4)
  {
    char v9 = a6 + 2 - a4;
  }
  else
  {
    __int16 v8 = 0;
    char v9 = 0;
  }
  unsigned int v10 = (unsigned __int16)(a6 - v8);
  char v11 = a6 - v8 + 16 - a4;
  if (v10 + 16 <= a4)
  {
    __int16 v13 = a4 - v10;
    int v12 = a5;
  }
  else
  {
    a1 <<= v11;
    int v12 = a5;
    __int16 v13 = 16;
  }
  int v14 = fxd_S32ShMultRndS32S32(a1, v12, v13);
  if (v10 >= a3)
  {
    uint64_t v16 = 0x7FFFFFFFLL;
    if (0x7FFFFFFFu >> (v10 - a3) <= a2) {
      return v16;
    }
    unsigned int v15 = a2 << (v10 - a3);
  }
  else
  {
    unsigned int v15 = a2 >> (a3 - v10);
  }
  unsigned int v17 = v15 + v14;
  if (v17 >= 0x7FFFFFFFu >> v9) {
    return 0x7FFFFFFFLL;
  }
  else {
    return v17 << v9;
  }
}

uint64_t dequantMsd(uint64_t a1, int a2, int a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, unsigned int a8)
{
  int v12 = (unsigned __int8 *)(*(void *)(a1 + 112)
                          + *(unsigned int *)(*(void *)(a1 + 120) + 4 * a2)
                          + *(unsigned __int16 *)(a1 + 12) * (uint64_t)a3
                          + 3 * a4 * *(_DWORD *)a1);
  if (*(_DWORD *)a1 == 1)
  {
    int v13 = *v12;
    int v14 = v12[1];
    int v15 = v12[2];
  }
  else
  {
    int v13 = *(unsigned __int16 *)v12;
    int v14 = *((unsigned __int16 *)v12 + 1);
    int v15 = *((unsigned __int16 *)v12 + 2);
  }
  uint64_t v16 = a1 + 12 * a4;
  unsigned int v17 = (unsigned __int16 *)(a1 + 6 * a4);
  *a5 = dequantValueToS32(v13, *(_DWORD *)(v16 + 64), *(unsigned __int16 *)(a1 + 100), v17[14], v17[23], a8);
  *a6 = dequantValueToS32(v14, *(_DWORD *)(v16 + 68), *(unsigned __int16 *)(a1 + 100), v17[15], v17[24], a8);
  *a7 = dequantValueToU32(v15, *(_DWORD *)(v16 + 72), *(unsigned __int16 *)(a1 + 100), v17[16], v17[25], a8);
  return 0;
}

uint64_t dequantValueToS32(int a1, int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  if (a6 + 16 <= a4)
  {
    __int16 v10 = a4 - a6;
    int v9 = a5;
  }
  else
  {
    a1 <<= a6 + 16 - a4;
    int v9 = a5;
    __int16 v10 = 16;
  }
  int v11 = fxd_S32ShMultRndS32S32(a1, v9, v10);
  unsigned int v12 = v11 + (a2 << (a6 - a3));
  if ((int)(0x7FFFFFFFu >> (a6 - a3)) <= a2) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (a3 > a6) {
    return (v11 + (a2 >> (a3 - a6)));
  }
  else {
    return v12;
  }
}

uint64_t dequantEnergy(unsigned __int16 *a1, int a2, int a3, __int16 a4, _DWORD *a5, _DWORD *a6, unsigned int a7)
{
  uint64_t result = 2229280793;
  int v11 = *((_DWORD *)a1 + 16);
  if (v11)
  {
    if (v11 != 1) {
      return result;
    }
    uint64_t v12 = *((void *)a1 + 7) + 16 * a2;
    uint64_t v13 = *(void *)v12 + *(unsigned int *)(v12 + 8);
    int v14 = *a1;
    int v15 = a1[1] + a1[2] * v14;
    int v16 = 2 * a3 - 2;
  }
  else
  {
    uint64_t v17 = *((void *)a1 + 7) + 16 * a2;
    uint64_t v13 = *(void *)v17 + *(unsigned int *)(v17 + 8);
    int v15 = a3 - 1;
    int v14 = *a1;
    int v16 = a1[1] + 2 * v14 * a1[2];
  }
  uint64_t v18 = v13 + (v16 * v15);
  if (v18)
  {
    unsigned __int16 v19 = 2 * a4;
    uint64_t v20 = (unsigned __int16)(2 * a4);
    if (v14 == 1) {
      int v21 = *(unsigned __int8 *)(v18 + v20);
    }
    else {
      int v21 = *(unsigned __int16 *)(v18 + 2 * v20);
    }
    uint64_t v22 = *((void *)a1 + 5) + 40 * (unsigned __int16)(2 * a4);
    *a5 = dequantValueToS32(v21, **(_DWORD **)(v22 + 8), *(unsigned __int16 *)(v22 + 16), **(unsigned __int16 **)(v22 + 24), **(unsigned __int16 **)(v22 + 32), a7);
    if (a6)
    {
      uint64_t v23 = v19 | 1u;
      if (*a1 == 1) {
        int v24 = *(unsigned __int8 *)(v18 + v23);
      }
      else {
        int v24 = *(unsigned __int16 *)(v18 + 2 * v23);
      }
      uint64_t v25 = *((void *)a1 + 5) + 40 * (v19 | 1u);
      int v26 = dequantValueToS32(v24, **(_DWORD **)(v25 + 8), *(unsigned __int16 *)(v25 + 16), **(unsigned __int16 **)(v25 + 24), **(unsigned __int16 **)(v25 + 32), a7);
      uint64_t result = 0;
      *a6 = v26;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t deVQSpectrum(unsigned __int16 *a1, uint64_t a2, int a3, int a4, int a5, int a6, __int16 a7, _DWORD *a8, _DWORD *a9, unsigned __int16 a10)
{
  unsigned __int16 v12 = a1[4];
  uint64_t v13 = (unsigned __int16)(v12 * a7);
  int v14 = a1[2];
  unsigned __int16 v15 = (v14 + a7) * v12;
  int v16 = *((_DWORD *)a1 + 16);
  if (v16)
  {
    if (v16 == 1)
    {
      uint64_t v17 = *((void *)a1 + 7) + 16 * a3;
      uint64_t v18 = *(void *)v17
          + *(unsigned int *)(v17 + 8)
          + (2 * a4 - 2) * (*a1 * v14 + a1[1])
          + 2 * *a1 * v14;
      uint64_t v19 = v13 + a5;
      int v20 = *(unsigned __int16 *)(v18 + 2 * v19);
      uint64_t v21 = v15 + (uint64_t)a5;
      int v22 = *(unsigned __int16 *)(v18 + 2 * v21);
    }
    else
    {
      int v20 = 0;
      int v22 = 0;
      uint64_t v19 = (int)v13 + a5;
      uint64_t v21 = a5 + v15;
    }
  }
  else
  {
    uint64_t v23 = *((void *)a1 + 7) + 16 * a3;
    uint64_t v24 = *(void *)v23
        + *(unsigned int *)(v23 + 8)
        + 2 * v14 * *a1
        + (a1[1] + 2 * v14 * *a1) * (a4 - 1);
    uint64_t v19 = v13 + a5;
    int v20 = *(unsigned __int8 *)(v24 + v19);
    uint64_t v21 = v15 + (uint64_t)a5;
    int v22 = *(unsigned __int8 *)(v24 + v21);
  }
  dequantCbkVectorElem((unsigned __int16 *)(*(void *)(a2 + 8) + 168 * v19), v20, a6, a8, a10);
  dequantCbkVectorElem((unsigned __int16 *)(*(void *)(a2 + 8) + 168 * v21), v22, a6, a9, a10);
  return 0;
}

uint64_t dequantCbkVectorElem(unsigned __int16 *a1, int a2, int a3, _DWORD *a4, unsigned int a5)
{
  int v6 = a1[2];
  uint64_t v7 = *((void *)a1 + 18) + *((unsigned int *)a1 + 38) + *a1 * (uint64_t)(v6 * a2);
  if (v6 == 1) {
    int v8 = *(unsigned __int8 *)(v7 + a3);
  }
  else {
    int v8 = *(unsigned __int16 *)(v7 + 2 * a3);
  }
  uint64_t result = dequantValueToS32(v8, *(_DWORD *)&a1[2 * a3 + 38], a1[36], a1[a3 + 4], a1[a3 + 20], a5);
  *a4 = result;
  return result;
}

uint64_t loadQuantizedDurFile(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v34 = 0;
  BET3FXD__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  if (HIWORD(v34) != 1)
  {
    uint64_t v12 = 2229280772;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = "LoadQuantizedDurFile: invalid quantization format";
    goto LABEL_7;
  }
  BET3FXD__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  BET3FXD__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  int v11 = HIWORD(v34);
  *(_DWORD *)a2 = HIWORD(v34);
  if ((v11 - 3) <= 0xFFFFFFFD)
  {
    uint64_t v12 = 2229280772;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = "LoadQuantizedDurFile: invalid value for code length";
LABEL_7:
    log_OutText(v13, (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v14, v8, v9, v10, v33);
    return v12;
  }
  BET3FXD__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  int v15 = HIWORD(v34);
  *(_DWORD *)(a2 + 4) = HIWORD(v34);
  if ((v15 - 8) <= 0xFFFFFFF8)
  {
    uint64_t v12 = 2229280772;
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = "LoadDurFile : the number of HMM states is illegal";
    goto LABEL_7;
  }
  uint64_t v17 = 0;
  int v18 = 4 - (*(_DWORD *)a3 & 3);
  if ((*(_DWORD *)a3 & 3) == 0) {
    int v18 = 0;
  }
  unsigned int v19 = v18 + *(_DWORD *)a3;
  if (v19 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v19 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v19;
  uint64_t v20 = a2 + 70;
  do
  {
    BET3FXD__xfread_BET3((void *)v20, 2u, 1, (unsigned int *)a3);
    BET3FXD__xfread_BET3((void *)(v20 + 28), 2u, 1, (unsigned int *)a3);
    ++v17;
    v20 += 2;
  }
  while (v17 < 2 * *(int *)(a2 + 4));
  BET3FXD__xfread_BET3(&v34, 2u, 1, (unsigned int *)a3);
  int v21 = 4 - (*(_DWORD *)a3 & 3);
  if ((*(_DWORD *)a3 & 3) == 0) {
    int v21 = 0;
  }
  unsigned int v22 = v21 + *(_DWORD *)a3;
  if (v22 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v22 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v22;
  if (*(int *)(a2 + 4) >= 1)
  {
    uint64_t v23 = &v35;
    uint64_t v24 = 3;
    do
    {
      BET3FXD__xfread_BET3(v23, 2u, 1, (unsigned int *)a3);
      unsigned int v25 = *(unsigned __int16 *)v23;
      v23 += 2;
      unsigned int v26 = v25 >> (v34 - a4);
      int v27 = v25 << (a4 - v34);
      if ((unsigned __int16)v34 <= a4) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = v26;
      }
      *(_DWORD *)(a2 + 4 * v24) = v28;
      uint64_t v29 = v24 - 2;
      ++v24;
    }
    while (v29 < 2 * *(int *)(a2 + 4));
  }
  *(_WORD *)(a2 + 68) = a4;
  BET3FXD__xfread_BET3((char *)&v34 + 2, 2u, 1, (unsigned int *)a3);
  uint64_t v12 = 0;
  unsigned int v30 = *(_DWORD *)a3;
  int v31 = 4 - (*(_DWORD *)a3 & 3);
  *(_DWORD *)(a2 + 8) = HIWORD(v34);
  if ((v30 & 3) == 0) {
    int v31 = 0;
  }
  unsigned int v32 = v31 + v30;
  if (v32 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v32 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v32;
  *(void *)(a2 + 128) = *(void *)(a3 + 8);
  *(_DWORD *)(a2 + 136) = v32;
  return v12;
}

uint64_t loadQuantizedMsdFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v47 = 0;
  uint64_t v12 = 2229280772;
  unsigned __int16 v46 = 0;
  *(_DWORD *)(a2 + 4) = a3;
  BET3FXD__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  if (HIWORD(v47) != 1)
  {
    uint64_t v17 = "LoadQuantizedFreqFile: invalid quantization format";
    goto LABEL_5;
  }
  BET3FXD__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  BET3FXD__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  int v16 = HIWORD(v47);
  *(_DWORD *)(a2 + 8) = HIWORD(v47);
  if ((v16 - 4) < 0xFFFFFFFD)
  {
    uint64_t v17 = "LoadQuantizedFreqFile: invalid value for number of streams";
LABEL_5:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v17, v13, v14, v15, v45);
    return v12;
  }
  BET3FXD__xfread_BET3((char *)&v47 + 2, 2u, 1, (unsigned int *)a4);
  int v19 = HIWORD(v47);
  *(_DWORD *)a2 = HIWORD(v47);
  if ((v19 - 3) < 0xFFFFFFFE)
  {
    uint64_t v17 = "LoadQuantizedFreqFile: invalid value for code length";
    goto LABEL_5;
  }
  int v20 = 4 - (*(_DWORD *)a4 & 3);
  if ((*(_DWORD *)a4 & 3) == 0) {
    int v20 = 0;
  }
  unsigned int v21 = v20 + *(_DWORD *)a4;
  if (v21 >= *(_DWORD *)(a4 + 16)) {
    unsigned int v21 = *(_DWORD *)(a4 + 16);
  }
  *(_DWORD *)a4 = v21;
  BET3FXD__xfread_BET3((void *)(a2 + 14), 2u, a3, (unsigned int *)a4);
  int v22 = 4 - (*(_DWORD *)a4 & 3);
  if ((*(_DWORD *)a4 & 3) == 0) {
    int v22 = 0;
  }
  unsigned int v23 = v22 + *(_DWORD *)a4;
  if (v23 >= *(_DWORD *)(a4 + 16)) {
    unsigned int v23 = *(_DWORD *)(a4 + 16);
  }
  *(_DWORD *)a4 = v23;
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = a2;
    do
    {
      uint64_t v26 = -6;
      do
      {
        BET3FXD__xfread_BET3((void *)(v25 + v26 + 34), 2u, 1, (unsigned int *)a4);
        BET3FXD__xfread_BET3((void *)(v25 + v26 + 52), 2u, 1, (unsigned int *)a4);
        v26 += 2;
      }
      while (v26);
      ++v24;
      v25 += 6;
    }
    while (v24 < *(int *)(a2 + 8));
  }
  BET3FXD__xfread_BET3(&v46, 2u, 1, (unsigned int *)a4);
  int v30 = 4 - (*(_DWORD *)a4 & 3);
  if ((*(_DWORD *)a4 & 3) == 0) {
    int v30 = 0;
  }
  unsigned int v31 = v30 + *(_DWORD *)a4;
  if (v31 >= *(_DWORD *)(a4 + 16)) {
    unsigned int v31 = *(_DWORD *)(a4 + 16);
  }
  *(_DWORD *)a4 = v31;
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = a2 + 64;
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        BET3FXD__xfread_BET3(&v47, 2u, 1, (unsigned int *)a4);
        if (v46 <= a5) {
          int v35 = (__int16)v47 << (a5 - v46);
        }
        else {
          int v35 = (__int16)v47 >> (v46 - a5);
        }
        *(_DWORD *)(v33 + i) = v35;
      }
      ++v32;
      v33 += 12;
    }
    while (v32 < *(int *)(a2 + 8));
  }
  *(_WORD *)(a2 + 100) = a5;
  uint64_t v36 = *(unsigned int *)(a2 + 64);
  if ((int)v36 >= a6) {
    a6 = (13 * ((int)v36 >> 2)) >> 2;
  }
  else {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"LoadQuantizedFreqFile : minimum Log pitch value is too small (%d in Q%d), clamping to minimum (%d)\n", v27, v28, v29, v36);
  }
  *(_DWORD *)(a2 + 104) = a6;
  *(void *)(a2 + 112) = *(void *)(a4 + 8);
  uint64_t v37 = heap_Calloc(*(void **)(a1 + 8), a3, 4);
  *(void *)(a2 + 120) = v37;
  if (!v37) {
    return 2229280778;
  }
  int v38 = *(_DWORD *)(a2 + 4);
  int v39 = (-3 * *(_DWORD *)a2 * *(_DWORD *)(a2 + 8)) & 3;
  int v40 = v39 + 3 * *(_DWORD *)a2 * *(_DWORD *)(a2 + 8);
  *(_WORD *)(a2 + 12) = ((-3 * *(_WORD *)a2 * *(_WORD *)(a2 + 8)) & 3) + 3 * *(_WORD *)a2 * *(_WORD *)(a2 + 8);
  if (v38 >= 1)
  {
    uint64_t v41 = 0;
    int v42 = *(_DWORD *)a4;
    do
    {
      int v43 = 4 - (v42 & 3);
      if ((v42 & 3) == 0) {
        int v43 = 0;
      }
      unsigned int v44 = v43 + v42;
      if (v44 >= *(_DWORD *)(a4 + 16)) {
        unsigned int v44 = *(_DWORD *)(a4 + 16);
      }
      *(_DWORD *)a4 = v44;
      *(_DWORD *)(v37 + 4 * v41) = v44;
      int v42 = *(_DWORD *)a4 - v39 + (unsigned __int16)v40 * *(unsigned __int16 *)(a2 + 14 + 2 * v41);
      *(_DWORD *)a4 = v42;
      ++v41;
    }
    while (v41 < *(int *)(a2 + 4));
  }
  return 0;
}

uint64_t loadVQQuantizedCepFile(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  __int16 v63 = 0;
  *((_DWORD *)a2 + 16) = 0;
  BET3FXD__xfread_BET3(&v63, 2u, 1, (unsigned int *)a3);
  if (v63 != 1)
  {
    if (v63 != 2)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"LoadVQQuantizedCepFile: invalid quantization format", v6, v7, v8, v59);
      return 2229280772;
    }
    *((_DWORD *)a2 + 16) = 1;
  }
  BET3FXD__xfread_BET3(&v63, 2u, 1, (unsigned int *)a3);
  BET3FXD__xfread_BET3(a2 + 3, 2u, 1, (unsigned int *)a3);
  BET3FXD__xfread_BET3(a2 + 2, 2u, 1, (unsigned int *)a3);
  unsigned __int16 v9 = a2[2];
  BET3FXD__xfread_BET3(a2 + 5, 2u, 1, (unsigned int *)a3);
  a2[6] = a2[5] + 1;
  *((_DWORD *)a2 + 4) = 2;
  BET3FXD__xfread_BET3(&v63, 2u, 1, (unsigned int *)a3);
  uint64_t v10 = 2229280772;
  if (v63 == 1)
  {
    uint64_t v10 = 2229280778;
    unsigned __int16 v11 = 2 * v9;
    BET3FXD__xfread_BET3(a2 + 1, 2u, 1, (unsigned int *)a3);
    BET3FXD__xfread_BET3(a2, 2u, 1, (unsigned int *)a3);
    int v12 = 4 - (*(_DWORD *)a3 & 3);
    if ((*(_DWORD *)a3 & 3) == 0) {
      int v12 = 0;
    }
    unsigned int v13 = v12 + *(_DWORD *)a3;
    if (v13 >= *(_DWORD *)(a3 + 16)) {
      unsigned int v13 = *(_DWORD *)(a3 + 16);
    }
    *(_DWORD *)a3 = v13;
    uint64_t v62 = v11;
    uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), v11, 40);
    *((void *)a2 + 5) = v14;
    if (v14)
    {
      uint64_t v60 = a2 + 5;
      if (v11)
      {
        uint64_t v15 = 0;
        uint64_t v61 = a1;
        do
        {
          uint64_t v16 = *((void *)a2 + 5);
          uint64_t v17 = v16 + 40 * v15;
          int v18 = (_WORD *)(v17 + 2);
          BET3FXD__xfread_BET3((void *)(v17 + 2), 2u, 1, (unsigned int *)a3);
          uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), *(unsigned __int16 *)(v17 + 2), 4);
          *(void *)(v17 + 8) = v19;
          int v20 = (void **)(v17 + 8);
          if (!v19) {
            return 2229280778;
          }
          uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), (unsigned __int16)*v18, 2);
          uint64_t v22 = v16 + 40 * v15;
          *(void *)(v22 + 24) = v21;
          unsigned int v23 = (void *)(v22 + 24);
          if (!v21) {
            return 2229280778;
          }
          uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), (unsigned __int16)*v18, 2);
          uint64_t v28 = v16 + 40 * v15;
          *(void *)(v28 + 32) = v24;
          uint64_t v29 = (void *)(v28 + 32);
          if (!v24) {
            return 2229280778;
          }
          if (!*v18)
          {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)"ReadQuantDescr: number of streams is wrong\n", v25, v26, v27, v59);
            return 2229280772;
          }
          uint64_t v30 = 0;
          unint64_t v31 = 0;
          int v32 = 4 - (*(_DWORD *)a3 & 3);
          if ((*(_DWORD *)a3 & 3) == 0) {
            int v32 = 0;
          }
          unsigned int v33 = v32 + *(_DWORD *)a3;
          if (v33 >= *(_DWORD *)(a3 + 16)) {
            unsigned int v33 = *(_DWORD *)(a3 + 16);
          }
          *(_DWORD *)a3 = v33;
          do
          {
            BET3FXD__xfread_BET3((void *)(*v23 + v30), 2u, 1, (unsigned int *)a3);
            BET3FXD__xfread_BET3((void *)(*v29 + v30), 2u, 1, (unsigned int *)a3);
            ++v31;
            v30 += 2;
          }
          while (v31 < (unsigned __int16)*v18);
          BET3FXD__xfread_BET3((void *)(v16 + 40 * v15 + 16), 2u, 1, (unsigned int *)a3);
          int v34 = 4 - (*(_DWORD *)a3 & 3);
          if ((*(_DWORD *)a3 & 3) == 0) {
            int v34 = 0;
          }
          unsigned int v35 = v34 + *(_DWORD *)a3;
          if (v35 >= *(_DWORD *)(a3 + 16)) {
            unsigned int v35 = *(_DWORD *)(a3 + 16);
          }
          *(_DWORD *)a3 = v35;
          BET3FXD__xfread_BET3(*v20, 4u, (unsigned __int16)*v18, (unsigned int *)a3);
          ++v15;
          a1 = v61;
        }
        while (v15 != v62);
      }
      BET3FXD__xfread_BET3(a2 + 4, 2u, 1, (unsigned int *)a3);
      uint64_t v36 = (void *)heap_Calloc(*(void **)(a1 + 8), a2[4], 2);
      *((void *)a2 + 3) = v36;
      if (!v36) {
        return 2229280778;
      }
      int v37 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v37 = 0;
      }
      unsigned int v38 = v37 + *(_DWORD *)a3;
      if (v38 >= *(_DWORD *)(a3 + 16)) {
        unsigned int v38 = *(_DWORD *)(a3 + 16);
      }
      *(_DWORD *)a3 = v38;
      BET3FXD__xfread_BET3(v36, 2u, a2[4], (unsigned int *)a3);
      uint64_t v39 = (unsigned __int16)*v60;
      uint64_t v10 = 2229280778;
      if (*v60)
      {
        uint64_t v40 = 0;
        int v41 = 0;
        int v42 = a2[4];
        uint64_t v43 = *((void *)a2 + 4);
        do
        {
          unint64_t v44 = v40 + 1;
          if (v41 + 1 < v42 && v44 > *(unsigned __int16 *)(*((void *)a2 + 3) + 2 * (v41 + 1))) {
            ++v41;
          }
          *(_DWORD *)(v43 + 4 * v40++) = v41;
        }
        while (v39 != v44);
      }
      int v45 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v45 = 0;
      }
      unsigned int v46 = v45 + *(_DWORD *)a3;
      if (v46 >= *(_DWORD *)(a3 + 16)) {
        unsigned int v46 = *(_DWORD *)(a3 + 16);
      }
      *(_DWORD *)a3 = v46;
      BET3FXD__xfread2ptr_BET3((void *)a2 + 6, 2u, a2[3], (unsigned int *)a3);
      *((void *)a2 + 6) -= 4;
      uint64_t v47 = heap_Calloc(*(void **)(a1 + 8), a2[3], 16);
      *((void *)a2 + 7) = v47;
      if (v47)
      {
        unsigned int v48 = *(_DWORD *)a3;
        int v49 = 4 - (*(_DWORD *)a3 & 3);
        if ((*(_DWORD *)a3 & 3) == 0) {
          int v49 = 0;
        }
        *((void *)a2 + 7) = v47 - 32;
        unsigned int v50 = v49 + v48;
        unsigned int v51 = *(_DWORD *)(a3 + 16);
        if (v50 >= v51) {
          unsigned int v50 = *(_DWORD *)(a3 + 16);
        }
        *(_DWORD *)a3 = v50;
        if (a2[3])
        {
          uint64_t v52 = *(void *)(a3 + 8);
          int v53 = *((_DWORD *)a2 + 16);
          uint64_t v54 = -(uint64_t)a2[3];
          uint64_t v55 = (unsigned int *)(v47 + 8);
          uint64_t v56 = 2;
          do
          {
            int v57 = 4 - (v50 & 3);
            if ((v50 & 3) == 0) {
              int v57 = 0;
            }
            v50 += v57;
            if (v50 >= v51) {
              unsigned int v50 = v51;
            }
            *((void *)v55 - 1) = v52;
            *uint64_t v55 = v50;
            if (v53)
            {
              if (v53 == 1) {
                v50 += 2 * *(unsigned __int16 *)(*((void *)a2 + 6) + 2 * v56) * (a2[1] + a2[2] * *a2);
              }
            }
            else
            {
              v50 += (a2[1] + 2 * *a2 * a2[2]) * *(unsigned __int16 *)(*((void *)a2 + 6) + 2 * v56);
            }
            ++v56;
            v55 += 4;
          }
          while (v54 + v56 != 2);
          uint64_t v10 = 0;
          *(_DWORD *)a3 = v50;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v10;
}

uint64_t loadCodebookSet(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  uint64_t v8 = 2229280772;
  memset(v51, 0, 512);
  v52[1] = 0;
  BET3FXD__xfread_BET3(&v52[1], 2u, 1, (unsigned int *)a3);
  if (v52[1] != 1)
  {
    unsigned int v13 = "ReadQCodeBookSetHdr: invalid quantization format";
    goto LABEL_5;
  }
  BET3FXD__xfread_BET3(&v52[1], 2u, 1, (unsigned int *)a3);
  BET3FXD__xfread_BET3(v51, 2u, 1, (unsigned int *)a3);
  uint64_t v12 = LOWORD(v51[0]);
  if (LOWORD(v51[0]) >= 0x97u)
  {
    unsigned int v13 = "ReadQCodeBookSetHdr : Number of codebooks is too high, aborting\n";
LABEL_5:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v13, v9, v10, v11, v46);
    return v8;
  }
  int v15 = 4 - (*(_DWORD *)a3 & 3);
  if ((*(_DWORD *)a3 & 3) == 0) {
    int v15 = 0;
  }
  unsigned int v16 = v15 + *(_DWORD *)a3;
  if (v16 >= *(_DWORD *)(a3 + 16)) {
    unsigned int v16 = *(_DWORD *)(a3 + 16);
  }
  *(_DWORD *)a3 = v16;
  BET3FXD__xfread_BET3((char *)v51 + 4, 4u, v12, (unsigned int *)a3);
  __int16 v17 = v51[0];
  uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), LOWORD(v51[0]), 168);
  *(void *)(a2 + 8) = v18;
  if (!v18) {
    return 2229280778;
  }
  *(_WORD *)(a2 + 2) = v17;
  *(_WORD *)a2 = 0;
  __int16 v19 = v51[0];
  if (LOWORD(v51[0]))
  {
    unsigned __int16 v49 = a4;
    uint64_t v47 = a1;
    uint64_t v48 = a2;
    unint64_t v20 = 0;
    uint64_t v21 = 40;
    uint64_t v22 = 76;
    while (1)
    {
      uint64_t v23 = *(void *)(a2 + 8);
      uint64_t v24 = (_WORD *)(v23 + 168 * v20);
      *(_DWORD *)uint64_t v52 = 0;
      BET3FXD__xfread_BET3(v24, 2u, 1, (unsigned int *)a3);
      if ((unsigned __int16)*v24 > 0x10u)
      {
        int v45 = "LoadQuantizedCodebook: invalid value for codebook vector length\n";
        goto LABEL_49;
      }
      uint64_t v28 = v23 + 168 * v20;
      BET3FXD__xfread_BET3((void *)(v28 + 2), 2u, 1, (unsigned int *)a3);
      uint64_t v29 = (unsigned __int16 *)(v28 + 4);
      BET3FXD__xfread_BET3((void *)(v28 + 4), 2u, 1, (unsigned int *)a3);
      if (*(unsigned __int16 *)(v28 + 4) - 3 < 0xFFFFFFFE) {
        break;
      }
      unsigned int v50 = (unsigned __int16 *)(v28 + 2);
      int v30 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v30 = 0;
      }
      unsigned int v31 = v30 + *(_DWORD *)a3;
      if (v31 >= *(_DWORD *)(a3 + 16)) {
        unsigned int v31 = *(_DWORD *)(a3 + 16);
      }
      *(_DWORD *)a3 = v31;
      if (*v24)
      {
        unint64_t v32 = 0;
        unsigned int v33 = (char *)(v23 + v21);
        do
        {
          BET3FXD__xfread_BET3(v33 - 32, 2u, 1, (unsigned int *)a3);
          BET3FXD__xfread_BET3(v33, 2u, 1, (unsigned int *)a3);
          ++v32;
          v33 += 2;
        }
        while (v32 < (unsigned __int16)*v24);
      }
      BET3FXD__xfread_BET3(&v52[1], 2u, 1, (unsigned int *)a3);
      int v34 = 4 - (*(_DWORD *)a3 & 3);
      if ((*(_DWORD *)a3 & 3) == 0) {
        int v34 = 0;
      }
      unsigned int v35 = *(_DWORD *)(a3 + 16);
      if (v34 + *(_DWORD *)a3 >= v35) {
        unsigned int v36 = *(_DWORD *)(a3 + 16);
      }
      else {
        unsigned int v36 = v34 + *(_DWORD *)a3;
      }
      *(_DWORD *)a3 = v36;
      if (*v24)
      {
        unint64_t v37 = 0;
        unsigned __int16 v38 = v49;
        do
        {
          BET3FXD__xfread_BET3(v52, 2u, 1, (unsigned int *)a3);
          unsigned int v39 = (unsigned __int16)v52[1];
          if ((unsigned __int16)v52[1] <= v38)
          {
            if ((unsigned __int16)v52[1] + 16 < v38) {
              unsigned __int16 v38 = v52[1] + 16;
            }
            int v40 = v52[0] << (v38 - LOBYTE(v52[1]));
          }
          else
          {
            int v40 = v52[0];
          }
          *(_DWORD *)(v23 + v22 + 4 * v37++) = v40;
          unint64_t v41 = (unsigned __int16)*v24;
        }
        while (v37 < v41);
        unsigned int v36 = *(_DWORD *)a3;
        unsigned int v35 = *(_DWORD *)(a3 + 16);
        a2 = v48;
      }
      else
      {
        LODWORD(v41) = 0;
        unsigned int v39 = (unsigned __int16)v52[1];
        unsigned __int16 v38 = v49;
      }
      int v42 = 4 - (v36 & 3);
      if ((v36 & 3) == 0) {
        int v42 = 0;
      }
      if (v39 <= v38) {
        LOWORD(v39) = v38;
      }
      uint64_t v43 = v23 + 168 * v20;
      *(_WORD *)(v43 + 72) = v39;
      unsigned int v44 = v42 + v36;
      if (v42 + v36 >= v35) {
        unsigned int v44 = v35;
      }
      *(void *)(v43 + 144) = *(void *)(a3 + 8);
      *(_DWORD *)(v43 + 152) = v44;
      *(_DWORD *)a3 = v44 + v41 * *v29 * *v50;
      ++v20;
      __int16 v19 = v51[0];
      v21 += 168;
      v22 += 168;
      if (v20 >= LOWORD(v51[0])) {
        goto LABEL_45;
      }
    }
    int v45 = "LoadQuantizedCodebook: invalid value for code length\n";
LABEL_49:
    log_OutText(*(void *)(v47 + 32), (uint64_t)"SELECT_BET3", 3, 0, (uint64_t)v45, v25, v26, v27, v47);
    return 2229280772;
  }
  else
  {
LABEL_45:
    uint64_t v8 = 0;
    *(_WORD *)a2 = v19;
  }
  return v8;
}

uint64_t synth_bet3_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2164269057;
  }
  uint64_t result = 0;
  *a2 = &ISynth_Bet3_0;
  return result;
}

uint64_t synth_bet3_ObjOpen_0(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object = 2164269063;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  unsigned int v43 = 0;
  __s1 = 0;
  long long v40 = xmmword_26D214B10;
  unint64_t v41 = off_26D214B20;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, &v45);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    log_OutText(*(void *)(v45 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjOpen", v10, v11, v12, v37);
    unsigned int v13 = (void *)heap_Calloc(*(void **)(v45 + 8), 1, 1344);
    if (!v13)
    {
      log_OutPublic(*(void *)(v45 + 32), (uint64_t)"SYNTH_BET3", 56000, 0, v14, v15, v16, v17, v38);
      uint64_t Object = 2164269066;
LABEL_27:
      log_OutText(*(void *)(v45 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjOpen: %x", v26, v27, v28, Object);
      log_OutEvent(*(uint64_t ***)(v45 + 32), 22, (uint64_t)"", v31, v32, v33, v34, v35, v39);
      return Object;
    }
    uint64_t v18 = (uint64_t)v13;
    *unsigned int v13 = a3;
    v13[1] = a4;
    uint64_t v19 = v45;
    v13[2] = v45;
    if ((critsec_ObjOpen(*(void *)(v19 + 16), *(void **)(v19 + 8), v13 + 3) & 0x80000000) == 0)
    {
      *(void *)&long long v40 = v18;
      if ((synth_bet3_loc_ParamGetListen_0(v18, "volume", 0, 100, 0x50u, &v40, &v43) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "rate", 50, 400, 0x64u, &v40, &v43) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "rate_baseline", 50, 400, 0x64u, &v40, &v43) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "pitch", 50, 200, 0x64u, &v40, &v43) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "pitch_baseline", 50, 200, 0x64u, &v40, &v43) & 0x80000000) == 0
        && (synth_bet3_loc_ParamGetListen_0(v18, "audiooutputbufsamples", 1, 0x7FFFFFFF, 0x100u, &v40, &v43) & 0x80000000) == 0)
      {
        *(_DWORD *)(v18 + 40) = v43;
      }
    }
    if ((paramc_ParamGetStr(*(void *)(v45 + 40), (uint64_t)"synth_type", &__s1) & 0x80000000) == 0)
    {
      if (!cstdlib_strcmp(__s1, "rcc"))
      {
        log_OutText(*(void *)(v45 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MRCC synthesizer", v20, v21, v22, v38);
        *(_DWORD *)(v18 + 1036) = 1;
        uint64_t v29 = synth_bet3_loc_SynthInit_MRCC(v18);
LABEL_22:
        uint64_t Object = v29;
        if ((v29 & 0x80000000) == 0)
        {
          uint64_t Object = objc_GetObject(*(void *)(v45 + 48), (uint64_t)"SYNTHSTREAM", &v44);
          if ((Object & 0x80000000) == 0)
          {
            *(void *)(v18 + 32) = *(void *)(v44 + 8);
            *(void *)a5 = v18;
            *(_DWORD *)(a5 + 8) = 9346;
            goto LABEL_27;
          }
          log_OutPublic(*(void *)(*(void *)(v18 + 16) + 32), (uint64_t)"SYNTH_BET3", 56001, 0, v30, v26, v27, v28, v38);
        }
        *(void *)a5 = v18;
        *(_DWORD *)(a5 + 8) = 9346;
        synth_bet3_ObjClose_0(v18, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        goto LABEL_27;
      }
      if (cstdlib_strcmp(__s1, "mlsa") && cstdlib_strcmp(__s1, "mfs"))
      {
        log_OutText(*(void *)(v45 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Unknown synthesizer: %s", v23, v24, v25, (uint64_t)__s1);
        return 7;
      }
      log_OutText(*(void *)(v45 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MLSA synthesizer", v23, v24, v25, v38);
    }
    *(_DWORD *)(v18 + 1036) = 0;
    uint64_t v29 = synth_bet3_loc_SynthInit_MLSA_0(v18);
    goto LABEL_22;
  }
  return Object;
}

uint64_t synth_bet3_ObjClose_0(uint64_t a1, int a2)
{
  int v3 = safeh_HandleCheck(a1, a2, 9346, 1344);
  if (v3 < 0) {
    return 2164269064;
  }
  LODWORD(v7) = v3;
  uint64_t v8 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjClose", v4, v5, v6, v36);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v38 = a1;
  long long v37 = *(long long *)((char *)&xmmword_26D214B10 + 8);
  long long v39 = *(long long *)((char *)&xmmword_26D214B10 + 8);
  int v10 = paramc_ListenerRemove(v9, "volume", (long long *)&v38);
  uint64_t v11 = *(void *)(v8 + 40);
  if (v10 < 0) {
    LODWORD(v7) = v10;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v12 = paramc_ListenerRemove(v11, "rate", (long long *)&v38);
  uint64_t v13 = *(void *)(v8 + 40);
  if (v12 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v12;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v15 = paramc_ListenerRemove(v13, "rate_baseline", (long long *)&v38);
  uint64_t v16 = *(void *)(v8 + 40);
  if (v15 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v15;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v18 = paramc_ListenerRemove(v16, "pitch", (long long *)&v38);
  uint64_t v19 = *(void *)(v8 + 40);
  if (v18 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v18;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v21 = paramc_ListenerRemove(v19, "pitch_baseline", (long long *)&v38);
  uint64_t v22 = *(void *)(v8 + 40);
  if (v21 < 0 && (int)v7 > -1) {
    LODWORD(v7) = v21;
  }
  uint64_t v38 = a1;
  long long v39 = v37;
  int v24 = paramc_ListenerRemove(v22, "audiooutputbufsamples", (long long *)&v38);
  if (v24 >= 0 || (int)v7 <= -1) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = v24;
  }
  if (*(void *)(a1 + 32))
  {
    int v26 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if (v26 >= 0 || (int)v7 <= -1) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v26;
    }
  }
  int v28 = *(_DWORD *)(a1 + 1036);
  if (v28 == 1)
  {
    RccSyn__deinit_Synthesis(a1 + 1048);
  }
  else if (!v28)
  {
    MFVSyn__denit__MVF_Synthesis((void **)(a1 + 64));
  }
  uint64_t v29 = *(void *)(a1 + 24);
  if (v29)
  {
    int v30 = critsec_ObjClose(v29);
    if ((int)v7 > -1 && v30 < 0) {
      uint64_t v7 = v30;
    }
    else {
      uint64_t v7 = v7;
    }
  }
  heap_Free(*(void **)(v8 + 8), a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjClose: %x", v32, v33, v34, v7);
  return v7;
}

uint64_t synth_bet3_ObjReopen_0(uint64_t a1, int a2)
{
  __s1 = 0;
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Entering synth_bet3_ObjReopen", v3, v4, v5, v19);
  if ((paramc_ParamGetStr(*(void *)(v6 + 40), (uint64_t)"synth_type", &__s1) & 0x80000000) != 0) {
    goto LABEL_10;
  }
  if (!cstdlib_strcmp(__s1, "rcc"))
  {
    log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MRCC synthesizer", v7, v8, v9, v20);
    MFVSyn__denit__MVF_Synthesis((void **)(a1 + 64));
    *(_DWORD *)(a1 + 1036) = 1;
    uint64_t inited = synth_bet3_loc_SynthInit_MRCC(a1);
LABEL_11:
    uint64_t v13 = inited;
    log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"synth_bet3_ObjReopen: %x", v15, v16, v17, inited);
    return v13;
  }
  if (!cstdlib_strcmp(__s1, "mlsa") || !cstdlib_strcmp(__s1, "mfs"))
  {
    log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Setting up MLSA synthesizer", v10, v11, v12, v20);
LABEL_10:
    RccSyn__deinit_Synthesis(a1 + 1048);
    *(_DWORD *)(a1 + 1036) = 0;
    uint64_t inited = synth_bet3_loc_SynthInit_MLSA_0(a1);
    goto LABEL_11;
  }
  log_OutText(*(void *)(v6 + 32), (uint64_t)"SYNTH_BET3", 4, 0, (uint64_t)"Unknown synthesizer: %s", v10, v11, v12, (uint64_t)__s1);
  return 7;
}

uint64_t synth_bet3_ProcessStart_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  synstrmaux_InitStreamOpener(a1 + 128, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3");
  if (synstrmaux_BuildAudioContentType("audio/L16;rate=", *(_DWORD *)(a1 + 48), (char *)(a1 + 80), 0x30uLL) > 0x2F) {
    return 9;
  }
  synstrmaux_RegisterInStream((_WORD *)(a1 + 128), (uint64_t)"application/x-realspeak-bet3-speech-frames;version=5.0",
    0,
    a1 + 952);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 128), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 968);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 128), a1 + 80, a1 + 984);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 128), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    a1 + 1000);
  uint64_t v8 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 128), *(void *)(a1 + 32), a3, a4);
  if ((v8 & 0x80000000) != 0)
  {
    *(_DWORD *)(a1 + 1016) = 0;
    *(void *)(a1 + 1028) = 0;
LABEL_12:
    synth_bet3_ProcessEnd_0(a1, a2);
    return v8;
  }
  int v9 = *(_DWORD *)(a1 + 1036);
  if (v9)
  {
    if (v9 != 1)
    {
      *(_DWORD *)(a1 + 1016) = 0;
      *(void *)(a1 + 1028) = 0;
      return v8;
    }
    RccSyn__reset_Synthesis(a1 + 1048);
    uint64_t inited = synth_bet3_loc_SynthInit_MRCC(a1);
  }
  else
  {
    uint64_t inited = BET3FXD__MFVSyn__reset__MVF_Synthesis((uint64_t *)(a1 + 64));
  }
  uint64_t v8 = inited;
  *(_DWORD *)(a1 + 1016) = 0;
  *(void *)(a1 + 1028) = 0;
  if ((inited & 0x80000000) != 0) {
    goto LABEL_12;
  }
  return v8;
}

uint64_t synth_bet3_Process_0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  v228[25] = *MEMORY[0x263EF8340];
  int v8 = -2130698234;
  int v9 = safeh_HandleCheck(a1, a2, 9346, 1344);
  if (v9 < 0) {
    return 2164269064;
  }
  uint64_t v10 = 1;
  if (v9 || !a1) {
    return v10;
  }
  if (*(_DWORD *)(a1 + 1036) == 1)
  {
    LODWORD(v221) = 0;
    __uint64_t n = 0;
    v228[0] = 0;
    __dst = 0;
    __src = 0;
    uint64_t v223 = 0;
    if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) == 0)
    {
      *a5 = 1;
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      unsigned int v12 = *(_DWORD *)(a1 + 44);
      if (v11 >= v12)
      {
        if (v12) {
          v12 *= v11 / v12;
        }
        else {
          unsigned int v12 = *(_DWORD *)(a1 + 40);
        }
      }
      uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t *, size_t *))(*(void *)(a1 + 32) + 144))(*(void *)(a1 + 952), *(void *)(a1 + 960), &v221, &__n);
      if ((v10 & 0x80000000) == 0)
      {
        if (v221)
        {
          uint64_t v20 = (*(uint64_t (**)(void, void, void *, uint64_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 952), *(void *)(a1 + 960), v228, &v221);
          if ((v20 & 0x80000000) == 0)
          {
            uint64_t v10 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__src, (char *)&__n + 4);
            if ((v10 & 0x80000000) == 0)
            {
              if (v221 < 8) {
                return v10;
              }
              uint64_t v29 = (*(uint64_t (**)(void, void, void **, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v223, 2 * v12);
              if ((v29 & 0x80000000) == 0)
              {
                if (!HIDWORD(__n)
                  || (uint64_t v34 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &__dst), (v34 & 0x80000000) == 0))
                {
                  uint64_t v10 = critsec_Enter(*(void **)(a1 + 24));
                  if ((v10 & 0x80000000) != 0) {
                    return v10;
                  }
                  uint64_t v36 = *(void *)v228[0];
                  uint64_t v222 = 0;
                  unsigned int v226 = 0;
                  uint64_t v215 = *(void *)(v36 + 48);
                  LOWORD(v220) = 0;
                  if (HIDWORD(__n) && __src && __dst)
                  {
                    cstdlib_memcpy(__dst, __src, HIDWORD(__n));
                    HIDWORD(__n) >>= 5;
                  }
                  uint64_t v37 = *(unsigned int *)(v36 + 32);
                  if ((int)v37 < 1) {
                    goto LABEL_338;
                  }
                  uint64_t v38 = 0;
                  long long v39 = 0;
                  long long v40 = 0;
                  int v213 = *(_DWORD *)(a1 + 1324);
                  unint64_t v41 = *(int **)(v36 + 24);
                  do
                  {
                    int v42 = v41[3];
                    if (v42 == 1) {
                      unsigned int v43 = v41;
                    }
                    else {
                      unsigned int v43 = v40;
                    }
                    if (v42 == 2)
                    {
                      unsigned int v43 = v40;
                      uint64_t v44 = v41;
                    }
                    else
                    {
                      uint64_t v44 = v39;
                    }
                    if (v42 == 3) {
                      uint64_t v38 = v41;
                    }
                    v41 += 78;
                    if (v42 != 3)
                    {
                      long long v40 = v43;
                      long long v39 = v44;
                    }
                    --v37;
                  }
                  while (v37);
                  uint64_t v45 = v215;
                  if (!v40 || !v39 || !v38)
                  {
LABEL_338:
                    int v209 = critsec_Leave(*(void **)(a1 + 24));
                    if (v209 >= 0 || v8 <= -1) {
                      return v8;
                    }
                    else {
                      return v209;
                    }
                  }
                  int v46 = *(_DWORD *)(a1 + 1016);
                  if (v46 >= v40[11])
                  {
                    *(void *)(a1 + 1028) = 0;
                    if ((v10 & 0x80000000) != 0)
                    {
                      int v8 = v10;
                      goto LABEL_338;
                    }
                    BOOL v106 = 0;
                    LODWORD(v48) = 0;
                    int v8 = v10;
                    goto LABEL_324;
                  }
                  int v47 = 0;
                  LODWORD(v48) = 0;
                  uint64_t v211 = a1 + 1096;
                  int v8 = v10;
                  while (1)
                  {
                    if (*(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 44) + v47 > v12)
                    {
LABEL_144:
                      *(void *)(a1 + 1028) = 0;
                      if ((v8 & 0x80000000) == 0)
                      {
                        if (v47)
                        {
                          int v8 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), (2 * v47), v35);
                          if (v8 < 0)
                          {
                            uint64_t v208 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_337:
                            log_OutPublic(v208, (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v102, v103, v104, v105, "stream");
                            goto LABEL_338;
                          }
                        }
                      }
                      BOOL v106 = v48 != 0;
                      if ((v8 & 0x80000000) == 0 && v48)
                      {
                        int v8 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), (32 * v48), v35);
                        if ((v8 & 0x80000000) == 0)
                        {
                          BOOL v106 = 1;
                          goto LABEL_324;
                        }
                        uint64_t v208 = *(void *)(*(void *)(a1 + 16) + 32);
                        goto LABEL_337;
                      }
                      if (v8 < 0) {
                        goto LABEL_338;
                      }
LABEL_324:
                      if (*(_DWORD *)(a1 + 1016) < v40[11])
                      {
                        int v202 = 2;
                        goto LABEL_330;
                      }
                      int v8 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 952), *(void *)(a1 + 960), 8);
                      if (v8 < 0)
                      {
                        uint64_t v207 = *(void *)(*(void *)(a1 + 16) + 32);
                      }
                      else
                      {
                        *(_DWORD *)(a1 + 1016) = 0;
                        if (v221 <= 8) {
                          int v202 = 1;
                        }
                        else {
                          int v202 = 2;
                        }
LABEL_330:
                        *a5 = v202;
                        if (!v106) {
                          goto LABEL_338;
                        }
                        int v8 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 968), *(void *)(a1 + 976), (32 * v48));
                        if ((v8 & 0x80000000) == 0) {
                          goto LABEL_338;
                        }
                        uint64_t v207 = *(void *)(*(void *)(a1 + 16) + 32);
                      }
                      log_OutPublic(v207, (uint64_t)"SYNTH_BET3", 56006, (uint64_t)"%s%s%s%x", v203, v204, v205, v206, "contentType");
                      goto LABEL_338;
                    }
                    unsigned __int16 v49 = (char *)__dst;
                    unsigned int v50 = HIDWORD(__n);
                    if (__dst) {
                      BOOL v51 = v48 >= HIDWORD(__n);
                    }
                    else {
                      BOOL v51 = 1;
                    }
                    int v217 = v47;
                    if (!v51)
                    {
                      unint64_t v48 = v48;
                      uint64_t v52 = (32 * v48) | 0x18;
                      do
                      {
                        if (*(_DWORD *)&v49[v52 - 12] > *(_DWORD *)(a1 + 1020)) {
                          break;
                        }
                        switch(*(_DWORD *)&v49[v52 - 24])
                        {
                          case 0x10:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "pitch";
                            goto LABEL_61;
                          case 0x11:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "timbre";
                            goto LABEL_61;
                          case 0x12:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "rate";
                            goto LABEL_61;
                          case 0x18:
                            critsec_Leave(*(void **)(a1 + 24));
                            uint64_t v53 = *(void *)(*(void *)(a1 + 16) + 40);
                            unsigned int v54 = *(_DWORD *)((char *)__dst + v52);
                            uint64_t v55 = "volume";
LABEL_61:
                            paramc_ParamSetUInt(v53, (uint64_t)v55, v54);
                            critsec_Enter(*(void **)(a1 + 24));
                            unsigned int v50 = HIDWORD(__n);
                            break;
                          default:
                            break;
                        }
                        unsigned __int16 v49 = (char *)__dst;
                        if (v48 < v50 && *(_DWORD *)((char *)__dst + v52 - 24) == 8)
                        {
                          int v56 = *(_DWORD *)(a1 + 1016);
                          *(_DWORD *)(a1 + 1028) = v56;
                          *(_DWORD *)(a1 + 1032) = *(_DWORD *)&v49[v52 + 24] + v56;
                        }
                        int v57 = &v49[v52];
                        *((_DWORD *)v57 - 3) = *(_DWORD *)(a1 + 1024);
                        *((_DWORD *)v57 - 2) = *(_DWORD *)(a1 + 44)
                                             * *(_DWORD *)&v49[v52 - 8]
                                             * *(unsigned __int16 *)(a1 + 1340)
                                             / 0x64;
                        ++v48;
                        if (!v49) {
                          break;
                        }
                        unsigned int v50 = HIDWORD(__n);
                        v52 += 32;
                      }
                      while (v48 < HIDWORD(__n));
                      int v46 = *(_DWORD *)(a1 + 1016);
                    }
                    unsigned int v226 = 0;
                    __int16 v212 = *(_WORD *)(a1 + 1340);
                    if (v46 >= *(_DWORD *)(a1 + 1028) && v46 <= *(_DWORD *)(a1 + 1032)) {
                      *(_WORD *)(a1 + 1340) = 100;
                    }
                    int v58 = *v40;
                    int v59 = *(unsigned __int8 *)(v45 + *v40);
                    if ((v59 & 4) != 0)
                    {
                      int v62 = *v39;
                      int v63 = v39[11];
                      if (*v39 >= v63)
                      {
                        int v62 = v63 - 1;
                        *long long v39 = v63 - 1;
                      }
                      int v64 = exp_S7_25(2 * **(_DWORD **)(*((void *)v39 + 8) + 8 * v62), &v220);
                      uint64_t v65 = 1374389535 * (v64 >> (24 - v220)) * *(_DWORD *)(a1 + 1328);
                      int v60 = (v65 >> 37) + ((unint64_t)v65 >> 63);
                      ++*v39;
                      int v58 = *v40;
                      uint64_t v61 = *v40;
                      int v59 = *(unsigned __int8 *)(v45 + v61);
                    }
                    else
                    {
                      int v60 = 0;
                      uint64_t v61 = v58;
                    }
                    if ((v59 & 8) != 0)
                    {
                      int v67 = *v38;
                      int v68 = v38[11];
                      if (*v38 >= v68)
                      {
                        int v67 = v68 - 1;
                        int *v38 = v68 - 1;
                      }
                      int v69 = exp_S7_25(2 * **(_DWORD **)(*((void *)v38 + 8) + 8 * v67), &v220);
                      int v66 = *(_DWORD **)(a1 + 1056);
                      if (v66)
                      {
                        int v70 = v69 >> ~(__int16)v220;
                        if (v70)
                        {
                          int v71 = v66[1];
                          BOOL v72 = __OFSUB__(v70, v71);
                          int v73 = v70 - v71;
                          if (v73 < 0 != v72)
                          {
                            LODWORD(v66) = v66[3];
                          }
                          else if (v66[2] >= v70)
                          {
                            LODWORD(v66) = v66[3] + *v66 * v73;
                          }
                          else
                          {
                            LODWORD(v66) = v66[4];
                          }
                        }
                        else
                        {
                          LODWORD(v66) = 0;
                        }
                      }
                      ++*v38;
                      int v58 = *v40;
                      uint64_t v61 = *v40;
                      int v59 = *(unsigned __int8 *)(v45 + v61);
                    }
                    else
                    {
                      LODWORD(v66) = 0;
                    }
                    if ((~v59 & 0xC) != 0)
                    {
                      int v78 = 0;
                      *(void *)(a1 + 1332) = 0;
                    }
                    else
                    {
                      int v74 = v40[11];
                      int v75 = *(_DWORD *)(a1 + 1332) + 1;
                      *(_DWORD *)(a1 + 1332) = v75;
                      int v76 = *(_DWORD *)(a1 + 1336);
                      if (v76)
                      {
                        int v77 = v76 - 1;
                      }
                      else
                      {
                        BOOL v72 = __OFSUB__(v74, v58);
                        int v77 = v74 - v58;
                        if ((v77 < 0) ^ v72 | (v77 == 0))
                        {
                          int v77 = 0;
                        }
                        else
                        {
                          uint64_t v79 = 0;
                          uint64_t v80 = v45 + v61;
                          while ((~*(unsigned __int8 *)(v80 + v79) & 0xC) == 0)
                          {
                            if (v77 == ++v79) {
                              goto LABEL_101;
                            }
                          }
                          int v77 = v79;
                        }
                      }
LABEL_101:
                      *(_DWORD *)(a1 + 1336) = v77;
                      if (v77 >= v75) {
                        int v78 = v75;
                      }
                      else {
                        int v78 = v77;
                      }
                    }
                    if ((*(unsigned char *)(v45 + *v40) & 0xC) != 0xC)
                    {
                      int v60 = 0;
                      LODWORD(v66) = 0;
                    }
                    *(_DWORD *)(a1 + 1136) = v78;
                    *(_DWORD *)(a1 + 1140) = 0;
                    *(_DWORD *)(a1 + 1124) = v66;
                    *(_DWORD *)(a1 + 1120) = 0;
                    *(_DWORD *)(a1 + 1128) = (42949673 * (unint64_t)(*(unsigned __int16 *)(a1 + 1340) << 10)) >> 32;
                    MrccInput_AllocateData(v211, v40[10]);
                    *(_DWORD *)(a1 + 1116) = v60;
                    if (v213)
                    {
                      *(void *)(a1 + 1104) = *(void *)(*((void *)v40 + 8) + 8 * *v40);
                    }
                    else
                    {
                      int Data = MrccInput_AllocateData(v211, v40[10]);
                      if (Data < 0)
                      {
                        int v8 = Data;
                        goto LABEL_338;
                      }
                      uint64_t v82 = *(unsigned int *)(a1 + 1112);
                      if ((int)v82 >= 1)
                      {
                        int v83 = *(int **)(*((void *)v40 + 8) + 8 * *(int *)(a1 + 1016));
                        uint64_t v84 = *(unsigned int **)(a1 + 1104);
                        do
                        {
                          int v86 = *v83++;
                          unsigned int v85 = v86;
                          BOOL v87 = v86 < 0;
                          if (v86 < 0) {
                            unsigned int v85 = -v85;
                          }
                          unsigned int v88 = v85 + 14506 * (v85 >> 15) + ((14506 * (v85 & 0x7FFF) + 0x4000) >> 15);
                          if (v87) {
                            unsigned int v88 = -v88;
                          }
                          *v84++ = v88;
                          --v82;
                        }
                        while (v82);
                      }
                    }
                    int v8 = RccSyn__SynthesisOneFrame(a1 + 1048, &v226, &v222);
                    if (v8 < 0) {
                      goto LABEL_338;
                    }
                    v35.n128_f64[0] = RrInput_Reset(a1 + 1208);
                    int v46 = *(_DWORD *)(a1 + 1016);
                    if (v46 >= *(_DWORD *)(a1 + 1028) && v46 <= *(_DWORD *)(a1 + 1032)) {
                      *(_WORD *)(a1 + 1340) = v212;
                    }
                    unsigned int v89 = v226;
                    int v47 = v217;
                    if (!v226)
                    {
                      BOOL v98 = 0;
                      goto LABEL_141;
                    }
                    ++*(_DWORD *)(a1 + 1020);
                    *(_DWORD *)(a1 + 1024) += v89;
                    if (v89 + v217 <= v12) {
                      break;
                    }
                    if (v217)
                    {
                      int v90 = (*(uint64_t (**)(void, void, void, __n128))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), (2 * v217), v35);
                      if (v90 < 0)
                      {
                        int v8 = v90;
LABEL_139:
                        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v91, v92, v93, v94, "stream");
                        int v47 = 0;
                        BOOL v98 = *(_DWORD *)(a1 + 52) != 0;
                        goto LABEL_140;
                      }
                      unsigned int v89 = v226;
                    }
                    if (v89 <= v12) {
                      unsigned int v95 = v12;
                    }
                    else {
                      unsigned int v95 = v89;
                    }
                    if (!*(_DWORD *)(a1 + 52)) {
                      unsigned int v89 = v95;
                    }
                    int v8 = (*(uint64_t (**)(void, void, void **, void, __n128))(*(void *)(a1 + 32)
                                                                                            + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v223, 2 * v89, v35);
                    if (v8 < 0) {
                      goto LABEL_139;
                    }
                    int v47 = 0;
                    int v96 = 0;
                    unsigned int v97 = 0;
                    BOOL v98 = *(_DWORD *)(a1 + 52) != 0;
                    unsigned int v89 = v226;
                    uint64_t v99 = (__int16 *)v223;
                    if (v226) {
                      goto LABEL_135;
                    }
LABEL_137:
                    vol_ScaleToLevel(&v99[v96], v97, *(unsigned __int16 *)(a1 + 60));
                    int v47 = v226 + v96;
                    uint64_t v45 = v215;
LABEL_140:
                    ++*v40;
                    int v46 = *(_DWORD *)(a1 + 1016) + 1;
                    *(_DWORD *)(a1 + 1016) = v46;
LABEL_141:
                    if (v8 < 0 || v98 || v46 >= v40[11]) {
                      goto LABEL_144;
                    }
                  }
                  BOOL v98 = 0;
                  uint64_t v99 = (__int16 *)v223;
LABEL_135:
                  uint64_t v100 = 0;
                  int v96 = v47;
                  uint64_t v101 = v222;
                  unsigned int v97 = v89;
                  do
                  {
                    v99[(v96 + v100)] = *(_WORD *)(v101 + 2 * v100);
                    ++v100;
                  }
                  while (v89 != v100);
                  goto LABEL_137;
                }
                goto LABEL_219;
              }
LABEL_195:
              uint64_t v10 = v29;
              uint64_t v132 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_220:
              log_OutPublic(v132, (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v30, v31, v32, v33, "stream");
              return v10;
            }
LABEL_193:
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, (uint64_t)"%s%s%s%x", v25, v26, v27, v28, "contentType");
            return v10;
          }
LABEL_186:
          uint64_t v10 = v20;
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, (uint64_t)"%s%s%s%x", v21, v22, v23, v24, "contentType");
          return v10;
        }
        if (__n)
        {
          if (*(void *)(a1 + 1000))
          {
            uint64_t v10 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__src, (char *)&__n + 4);
            if ((v10 & 0x80000000) != 0)
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, (uint64_t)"%s%s%s%x", v107, v108, v109, v110, "contentType");
            }
            else if (HIDWORD(__n))
            {
              uint64_t v10 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &__dst);
              if ((v10 & 0x80000000) != 0) {
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v111, v112, v113, v114, "stream");
              }
            }
            if ((v10 & 0x80000000) == 0 && HIDWORD(__n) && __src && __dst)
            {
              cstdlib_memcpy(__dst, __src, HIDWORD(__n));
              unsigned int v133 = HIDWORD(__n);
              HIDWORD(__n) >>= 5;
              if (v133 >= 0x20)
              {
                uint64_t v134 = 0;
                unint64_t v135 = 0;
                int v136 = *(_DWORD *)(a1 + 1024);
                unsigned int v137 = (char *)__dst;
                do
                {
                  uint64_t v138 = &v137[v134];
                  *((_DWORD *)v138 + 3) = v136;
                  *((_DWORD *)v138 + 4) = 0;
                  ++v135;
                  v134 += 32;
                }
                while (v135 < HIDWORD(__n));
                goto LABEL_216;
              }
              goto LABEL_211;
            }
LABEL_212:
            if ((v10 & 0x80000000) != 0) {
              return v10;
            }
            return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
          }
          return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
        }
        goto LABEL_194;
      }
LABEL_185:
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56004, (uint64_t)"%s%x", v16, v17, v18, v19, "lhError");
      return v10;
    }
    return 2164269064;
  }
  __uint64_t n = 0;
  unsigned int v226 = 0;
  __dst = 0;
  __src = 0;
  uint64_t v222 = 0;
  uint64_t v223 = 0;
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  *a5 = 1;
  unsigned int v13 = *(_DWORD *)(a1 + 40);
  unsigned int v14 = *(_DWORD *)(a1 + 44);
  if (v13 >= v14)
  {
    if (v14) {
      v14 *= v13 / v14;
    }
    else {
      unsigned int v14 = *(_DWORD *)(a1 + 40);
    }
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, char *, unsigned int *))(*(void *)(a1 + 32) + 144))(*(void *)(a1 + 952), *(void *)(a1 + 960), (char *)&__n + 4, &v226);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_185;
  }
  if (!HIDWORD(__n))
  {
    if (v226)
    {
      if (*(void *)(a1 + 1000))
      {
        uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__dst, &__n);
        if ((v10 & 0x80000000) != 0)
        {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56005, (uint64_t)"%s%s%s%x", v124, v125, v126, v127, "contentType");
        }
        else if (__n)
        {
          uint64_t v10 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &v223);
          if ((v10 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v128, v129, v130, v131, "stream");
          }
        }
        if ((v10 & 0x80000000) == 0 && __n && __dst && v223)
        {
          cstdlib_memcpy(v223, __dst, __n);
          unsigned int v139 = __n;
          LODWORD(__n) = __n >> 5;
          if (v139 >= 0x20)
          {
            uint64_t v134 = 0;
            unint64_t v140 = 0;
            int v141 = *(_DWORD *)(a1 + 1024);
            uint64_t v142 = (char *)v223;
            do
            {
              unsigned int v143 = &v142[v134];
              *((_DWORD *)v143 + 3) = v141;
              *((_DWORD *)v143 + 4) = 0;
              ++v140;
              v134 += 32;
            }
            while (v140 < __n);
LABEL_216:
            uint64_t v34 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), v134);
            if ((v34 & 0x80000000) == 0)
            {
              uint64_t v144 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 968), *(void *)(a1 + 976), v134);
              if ((v144 & 0x80000000) != 0)
              {
                uint64_t v10 = v144;
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56006, (uint64_t)"%s%s%s%x", v145, v146, v147, v148, "contentType");
                return v10;
              }
              return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
            }
LABEL_219:
            uint64_t v10 = v34;
            uint64_t v132 = *(void *)(*(void *)(a1 + 16) + 32);
            goto LABEL_220;
          }
LABEL_211:
          uint64_t v134 = 0;
          goto LABEL_216;
        }
        goto LABEL_212;
      }
      return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 128), *(void *)(a1 + 32));
    }
LABEL_194:
    *a5 = 0;
    return v10;
  }
  uint64_t v20 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 952), *(void *)(a1 + 960), &__src, (char *)&__n + 4);
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_186;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, void **, size_t *))(*(void *)(a1 + 32) + 88))(*(void *)(a1 + 968), *(void *)(a1 + 976), &__dst, &__n);
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_193;
  }
  if (HIDWORD(__n) < 8) {
    return v10;
  }
  uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v222, 2 * v14);
  if ((v29 & 0x80000000) != 0) {
    goto LABEL_195;
  }
  if (__n)
  {
    uint64_t v34 = (*(uint64_t (**)(void, void, void **))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), &v223);
    if ((v34 & 0x80000000) != 0) {
      goto LABEL_219;
    }
  }
  uint64_t v10 = critsec_Enter(*(void **)(a1 + 24));
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v115 = *(void *)__src;
  uint64_t v221 = 0;
  unsigned int v220 = 0;
  __int16 v219 = 0;
  uint64_t v216 = *(void *)(v115 + 48);
  if (__n && __dst && v223)
  {
    cstdlib_memcpy(v223, __dst, __n);
    LODWORD(__n) = __n >> 5;
  }
  uint64_t v116 = *(unsigned int *)(v115 + 32);
  if ((int)v116 < 1)
  {
    unint64_t v119 = 0;
    uint64_t v118 = 0;
    unsigned int v117 = 0;
  }
  else
  {
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    unint64_t v119 = 0;
    int v120 = *(int **)(v115 + 24);
    do
    {
      int v121 = v120[3];
      if (v121 == 1) {
        unsigned int v122 = v120;
      }
      else {
        unsigned int v122 = v119;
      }
      if (v121 == 2)
      {
        unsigned int v122 = v119;
        uint64_t v123 = v120;
      }
      else
      {
        uint64_t v123 = v118;
      }
      if (v121 == 3) {
        unsigned int v117 = v120;
      }
      v120 += 78;
      if (v121 != 3)
      {
        unint64_t v119 = v122;
        uint64_t v118 = v123;
      }
      --v116;
    }
    while (v116);
  }
  if (v117) {
    BOOL v149 = v118 == 0;
  }
  else {
    BOOL v149 = 1;
  }
  if (v149 || v119 == 0) {
    int v151 = -2130698234;
  }
  else {
    int v151 = v10;
  }
  if (v151 < 0)
  {
    LODWORD(v10) = v151;
    goto LABEL_317;
  }
  if (*(_DWORD *)(a1 + 1016) >= v119[11])
  {
    BOOL v192 = 0;
    LODWORD(v153) = 0;
    goto LABEL_302;
  }
  unsigned int v152 = 0;
  LODWORD(v153) = 0;
  while (!*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 44) + v152 <= v14)
  {
    uint64_t v154 = (char *)v223;
    if (v223) {
      BOOL v155 = v153 >= __n;
    }
    else {
      BOOL v155 = 1;
    }
    if (!v155)
    {
      unsigned int v156 = v152;
      unint64_t v153 = v153;
      uint64_t v157 = (32 * v153) | 0x18;
      do
      {
        int v158 = &v154[v157];
        if (*((_DWORD *)v158 - 3) > *(_DWORD *)(a1 + 1020)) {
          break;
        }
        switch(*((_DWORD *)v158 - 6))
        {
          case 0x10:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "pitch";
            goto LABEL_248;
          case 0x11:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "timbre";
            goto LABEL_248;
          case 0x12:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "rate";
            goto LABEL_248;
          case 0x18:
            critsec_Leave(*(void **)(a1 + 24));
            uint64_t v159 = *(void *)(*(void *)(a1 + 16) + 40);
            unsigned int v160 = *(_DWORD *)((char *)v223 + v157);
            uint64_t v161 = "volume";
LABEL_248:
            paramc_ParamSetUInt(v159, (uint64_t)v161, v160);
            critsec_Enter(*(void **)(a1 + 24));
            break;
          default:
            break;
        }
        uint64_t v154 = (char *)v223;
        int v162 = (char *)v223 + v157;
        *((_DWORD *)v162 - 3) = *(_DWORD *)(a1 + 1024);
        *((_DWORD *)v162 - 2) *= (*(_DWORD *)(*(void *)(a1 + 64) + 40) * *(_DWORD *)(a1 + 44)) >> 14;
        ++v153;
        if (!v154) {
          break;
        }
        v157 += 32;
      }
      while (v153 < __n);
      unsigned int v152 = v156;
    }
    unsigned int v220 = 0;
    char v163 = *(unsigned char *)(v216 + *v119);
    unsigned int v218 = v152;
    if ((v163 & 4) != 0)
    {
      int v165 = exp_S7_25(2 * **(_DWORD **)(*((void *)v118 + 8) + 8 * *v118), &v219);
      int v164 = v165 >> (25 - v219);
      ++*v118;
      char v163 = *(unsigned char *)(v216 + *v119);
    }
    else
    {
      LOWORD(v164) = 0;
    }
    if ((v163 & 8) != 0)
    {
      int v167 = exp_S7_25(2 * **(_DWORD **)(*((void *)v117 + 8) + 8 * *v117), &v219);
      int v166 = v167 >> ~(_BYTE)v219;
      ++*v117;
    }
    else
    {
      LOWORD(v166) = 0;
    }
    uint64_t v168 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v168 + 120) & 0x80000000) == 0)
    {
      uint64_t v169 = 0;
      uint64_t v170 = *(void *)(*((void *)v119 + 8) + 8 * *(int *)(a1 + 1016));
      do
      {
        *((_DWORD *)v228 + v169) = *(int *)(v170 + 4 * v169) >> 2;
        uint64_t v171 = *(int *)(v168 + 120);
        BOOL v87 = v169++ < v171;
      }
      while (v87);
      if ((v171 & 0x80000000) == 0)
      {
        uint64_t v172 = *(void *)(a1 + 72);
        if (v172)
        {
          uint64_t v173 = 0;
          do
          {
            *((_DWORD *)v228 + v173) += *(_DWORD *)(v172 + 4 * v173);
            BOOL v87 = v173++ < *(int *)(v168 + 120);
          }
          while (v87);
        }
      }
    }
    LODWORD(v10) = BET3FXD__MFVSyn__SynthesisOneFrame(v168, (unsigned __int16)v164, v228, v166, (int *)&v220, &v221);
    BOOL v174 = 0;
    if ((v10 & 0x80000000) != 0)
    {
      unsigned int v152 = v218;
      goto LABEL_287;
    }
    unsigned int v175 = v220;
    unsigned int v152 = v218;
    if (!v220) {
      goto LABEL_287;
    }
    ++*(_DWORD *)(a1 + 1020);
    *(_DWORD *)(a1 + 1024) += v175;
    if (v175 + v218 <= v14)
    {
      BOOL v214 = 0;
      uint64_t v184 = v222;
LABEL_281:
      unsigned int v185 = v152;
      uint64_t v186 = 0;
      unsigned int v182 = v185;
      uint64_t v187 = v221;
      unsigned int v183 = v175;
      do
      {
        *(_WORD *)(v184 + 2 * (v182 + v186)) = *(_WORD *)(v187 + 2 * v186);
        ++v186;
      }
      while (v175 != v186);
      goto LABEL_283;
    }
    if (v218)
    {
      int v176 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), 2 * v218);
      if (v176 < 0)
      {
        LODWORD(v10) = v176;
LABEL_285:
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v177, v178, v179, v180, "stream");
        unsigned int v152 = 0;
        BOOL v174 = *(_DWORD *)(a1 + 52) != 0;
        goto LABEL_286;
      }
      unsigned int v175 = v220;
    }
    if (v175 <= v14) {
      unsigned int v181 = v14;
    }
    else {
      unsigned int v181 = v175;
    }
    if (!*(_DWORD *)(a1 + 52)) {
      unsigned int v175 = v181;
    }
    LODWORD(v10) = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 32) + 112))(*(void *)(a1 + 984), *(void *)(a1 + 992), &v222, 2 * v175);
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_285;
    }
    unsigned int v152 = 0;
    unsigned int v182 = 0;
    unsigned int v183 = 0;
    BOOL v214 = *(_DWORD *)(a1 + 52) != 0;
    unsigned int v175 = v220;
    uint64_t v184 = v222;
    if (v220) {
      goto LABEL_281;
    }
LABEL_283:
    vol_ScaleToLevel((__int16 *)(v184 + 2 * v182), v183, *(unsigned __int16 *)(a1 + 60));
    unsigned int v152 = v220 + v182;
    BOOL v174 = v214;
LABEL_286:
    ++*v119;
    ++*(_DWORD *)(a1 + 1016);
LABEL_287:
    if ((v10 & 0x80000000) != 0 || v174 || *(_DWORD *)(a1 + 1016) >= v119[11]) {
      break;
    }
  }
  if ((v10 & 0x80000000) == 0)
  {
    if (v152)
    {
      LODWORD(v10) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 984), *(void *)(a1 + 992), 2 * v152);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v199 = *(void *)(*(void *)(a1 + 16) + 32);
        goto LABEL_316;
      }
    }
  }
  BOOL v192 = v153 != 0;
  if ((v10 & 0x80000000) != 0 || !v153)
  {
    if ((v10 & 0x80000000) != 0) {
      goto LABEL_317;
    }
LABEL_302:
    if (*(_DWORD *)(a1 + 1016) >= v119[11])
    {
      LODWORD(v10) = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 952), *(void *)(a1 + 960), 8);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v198 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_312:
        log_OutPublic(v198, (uint64_t)"SYNTH_BET3", 56006, (uint64_t)"%s%s%s%x", v194, v195, v196, v197, "contentType");
        goto LABEL_317;
      }
      *(_DWORD *)(a1 + 1016) = 0;
      if (HIDWORD(__n) <= 8) {
        int v193 = 1;
      }
      else {
        int v193 = 2;
      }
    }
    else
    {
      int v193 = 2;
    }
    *a5 = v193;
    if (!v192) {
      goto LABEL_317;
    }
    LODWORD(v10) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 96))(*(void *)(a1 + 968), *(void *)(a1 + 976), (32 * v153));
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_317;
    }
    uint64_t v198 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_312;
  }
  LODWORD(v10) = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 120))(*(void *)(a1 + 1000), *(void *)(a1 + 1008), (32 * v153));
  if ((v10 & 0x80000000) == 0)
  {
    BOOL v192 = 1;
    goto LABEL_302;
  }
  uint64_t v199 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_316:
  log_OutPublic(v199, (uint64_t)"SYNTH_BET3", 56007, (uint64_t)"%s%s%s%x", v188, v189, v190, v191, "stream");
LABEL_317:
  int v200 = critsec_Leave(*(void **)(a1 + 24));
  if (v200 >= 0 || (int)v10 <= -1) {
    return v10;
  }
  else {
    return v200;
  }
}

uint64_t synth_bet3_ProcessEnd_0(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 9346, 1344) & 0x80000000) != 0) {
    return 2164269064;
  }
  *(void *)(a1 + 1020) = 0;
  uint64_t v3 = *(void *)(a1 + 32);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 128), v3);
}

uint64_t synth_bet3_loc_ParamCheckChange_0(int a1, char *__s1, const char *a3, _DWORD *a4)
{
  if (cstdlib_strcmp(__s1, "audiooutputbufsamples"))
  {
    if (cstdlib_strcmp(__s1, "volume"))
    {
      if (cstdlib_strcmp(__s1, "rate"))
      {
        if (!cstdlib_strcmp(__s1, "ratewpm"))
        {
          uint64_t result = 2164269057;
          goto LABEL_19;
        }
        if (cstdlib_strcmp(__s1, "pitch"))
        {
          uint64_t result = 0;
          goto LABEL_19;
        }
        BOOL v8 = __CFADD__(LH_atoi(a3) - 201, 151);
      }
      else
      {
        BOOL v8 = __CFADD__(LH_atoi(a3) - 401, 351);
      }
      if (v8) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 2164269071;
      }
    }
    else if (LH_atoi(a3) <= 0x64)
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = 2164269071;
    }
  }
  else if ((int)LH_atoi(a3) <= 0)
  {
    uint64_t result = 2164269071;
  }
  else
  {
    uint64_t result = 0;
  }
LABEL_19:
  *a4 = (int)result >= 0;
  return result;
}

uint64_t synth_bet3_loc_ParamLearnChange_0(uint64_t a1, char *__s1, const char *a3)
{
  if (cstdlib_strcmp(__s1, "audiooutputbufsamples")
    && cstdlib_strcmp(__s1, "volume")
    && cstdlib_strcmp(__s1, "rate")
    && cstdlib_strcmp(__s1, "rate_baseline")
    && cstdlib_strcmp(__s1, "pitch_baseline")
    && cstdlib_strcmp(__s1, "ratewpm")
    && cstdlib_strcmp(__s1, "pitch"))
  {
    return 0;
  }
  unsigned int v7 = LH_atoi(a3);

  return synth_bet3_loc_ParamSet_0(a1, __s1, v7);
}

uint64_t synth_bet3_loc_ParamGetListen_0(uint64_t a1, unsigned char *a2, signed int a3, signed int a4, unsigned int a5, long long *a6, unsigned int *a7)
{
  if ((paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a7) & 0x80000000) != 0
    || (a5 = a3, (int)*a7 < a3)
    || (a5 = a4, (int)*a7 > a4))
  {
    uint64_t v14 = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)a2, a5);
    *a7 = a5;
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v20 = v14;
      uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v25 = "parameter";
      uint64_t v23 = "%s%s";
      uint64_t v22 = 56009;
      goto LABEL_8;
    }
  }
  uint64_t v19 = *(void *)(*(void *)(a1 + 16) + 40);
  long long v26 = *a6;
  uint64_t v27 = *((void *)a6 + 2);
  uint64_t v20 = paramc_ListenerAdd(v19, a2, &v26);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 32);
    uint64_t v22 = 56010;
    uint64_t v23 = 0;
LABEL_8:
    log_OutPublic(v21, (uint64_t)"SYNTH_BET3", v22, (uint64_t)v23, v15, v16, v17, v18, v25);
  }
  return v20;
}

uint64_t synth_bet3_loc_SynthInit_MRCC(uint64_t a1)
{
  uint64_t v19 = 0;
  __s1 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1332) = 0;
  *(_WORD *)(a1 + 1340) = 100;
  uint64_t v3 = a1 + 1048;
  RccSyn__deinit_Synthesis(a1 + 1048);
  int v22 = 0;
  uint64_t v21 = 0;
  uint64_t inited = paramc_ParamGet(*(void *)(v2 + 40), (uint64_t)"mrcc_synthparam_ref_ptr", &v21, &v22);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v5 = *v21;
    *(_DWORD *)(v5 + 128) = 4000;
    *(_OWORD *)(v5 + 112) = xmmword_220775700;
    *(void *)(a1 + 1056) = v5 + 112;
    *(void *)(a1 + 1320) = 0;
    uint64_t inited = RccSyn__init_Synthesis(v2, v3, (_DWORD *)v5);
    if ((inited & 0x80000000) == 0)
    {
      int v6 = *(_DWORD *)(v5 + 16);
      if (v6 == 22000)
      {
        int v6 = 22050;
        *(_DWORD *)(v5 + 16) = 22050;
      }
      *(_DWORD *)(a1 + 48) = v6;
      BOOL v7 = (paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
        && cstdlib_strcmp(__s1, "bet3") == 0;
      *(_DWORD *)(a1 + 52) = v7;
      uint64_t Int = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceframesize", &v19);
      if ((Int & 0x80000000) != 0)
      {
        uint64_t Str = Int;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56008, (uint64_t)"%s%s", v9, v10, v11, v12, "parameter");
        return Str;
      }
      *(_DWORD *)(a1 + 44) = (int)v19 * *(_DWORD *)(a1 + 48) / 0x3E8u;
      uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevol", &__s1);
      if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 26011, (uint64_t)"%s%s", v13, v14, v15, v16, "parameter");
        return Str;
      }
      *(_DWORD *)(a1 + 56) = LH_atoi(__s1);
      paramc_ParamRelease(*(void *)(v2 + 40));
      uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"volume", (_DWORD *)&v19 + 1);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "volume", HIDWORD(v19));
        if ((inited & 0x80000000) == 0)
        {
          uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", (_DWORD *)&v19 + 1);
          if ((inited & 0x80000000) == 0)
          {
            uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "rate", HIDWORD(v19));
            if ((inited & 0x80000000) == 0)
            {
              uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate_baseline", (_DWORD *)&v19 + 1);
              if ((inited & 0x80000000) == 0)
              {
                uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "rate_baseline", HIDWORD(v19));
                if ((inited & 0x80000000) == 0)
                {
                  uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", (_DWORD *)&v19 + 1);
                  if ((inited & 0x80000000) == 0)
                  {
                    uint64_t inited = synth_bet3_loc_ParamSet_0(a1, "pitch_baseline", HIDWORD(v19));
                    if ((inited & 0x80000000) == 0)
                    {
                      uint64_t inited = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", (_DWORD *)&v19 + 1);
                      if ((inited & 0x80000000) == 0) {
                        return synth_bet3_loc_ParamSet_0(a1, "pitch", HIDWORD(v19));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return inited;
}

uint64_t synth_bet3_loc_SynthInit_MLSA_0(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v46 = 0;
  __s1 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  long long __b = 0u;
  long long v43 = 0u;
  unsigned int v41 = 0;
  long long v39 = 0;
  long long v40 = 0;
  uint64_t Int = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"frequencyhz", (_DWORD *)&v46 + 1);
  if ((Int & 0x80000000) != 0)
  {
    uint64_t Str = Int;
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_37:
    log_OutPublic(v11, (uint64_t)"SYNTH_BET3", 56008, (uint64_t)"%s%s", v4, v5, v6, v7, "parameter");
    return Str;
  }
  BOOL v8 = (uint64_t *)(a1 + 64);
  MFVSyn__denit__MVF_Synthesis((void **)(a1 + 64));
  *(_DWORD *)(a1 + 48) = HIDWORD(v46);
  BOOL v9 = (paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"voicemodel", &__s1) & 0x80000000) == 0
    && cstdlib_strcmp(__s1, "bet3") == 0;
  *(_DWORD *)(a1 + 52) = v9;
  cstdlib_memset(&__b, 0, 0x28uLL);
  long long v43 = xmmword_220775710;
  LODWORD(__b) = wave_t__convertFromF0ToTp_SR(0xAF00u, SHIDWORD(v46)) >> 6;
  DWORD1(__b) = wave_t__convertFromF0ToTp_SR(0xA00u, SHIDWORD(v46)) >> 6;
  uint64_t v12 = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceframesize", (_DWORD *)&v45 + 1);
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t Str = v12;
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_37;
  }
  *(_DWORD *)(a1 + 44) = HIDWORD(v45) * *(_DWORD *)(a1 + 48) / 0x3E8u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevol", &__s1);
  if ((Str & 0x80000000) != 0
    || !__s1
    || !*__s1
    || (*(_DWORD *)(a1 + 56) = LH_atoi(__s1),
        paramc_ParamRelease(*(void *)(v2 + 40)),
        uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicemvfboost", &__s1),
        (Str & 0x80000000) != 0)
    || !__s1
    || !*__s1)
  {
    uint64_t v27 = *(void *)(*(void *)(a1 + 16) + 32);
LABEL_35:
    log_OutPublic(v27, (uint64_t)"SYNTH_BET3", 26011, (uint64_t)"%s%s", v13, v14, v15, v16, "parameter");
    return Str;
  }
  unsigned int v17 = LH_atoi(__s1);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicealpha", &__s1);
  if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
  {
    uint64_t v27 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_35;
  }
  int v18 = LH_atoi(__s1);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t Str = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevuvrelamp", &__s1);
  if ((Str & 0x80000000) != 0 || !__s1 || !*__s1)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_37;
  }
  unsigned int v19 = LH_atoi(__s1);
  paramc_ParamRelease(*(void *)(v2 + 40));
  uint64_t v20 = paramc_ParamGetInt(*(void *)(v2 + 40), (uint64_t)"bet2voiceorder", &v45);
  if ((v20 & 0x80000000) != 0
    || (uint64_t v20 = paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicevsynthinit", &v40), (v20 & 0x80000000) != 0))
  {
    uint64_t Str = v20;
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 32);
    goto LABEL_37;
  }
  int v21 = 1;
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2cpupower", &__s1) & 0x80000000) == 0 && __s1 && *__s1)
  {
    unsigned int v22 = LH_atoi(__s1);
    if (v22 >= 5) {
      int v21 = 1;
    }
    else {
      int v21 = v22;
    }
    paramc_ParamRelease(*(void *)(v2 + 40));
  }
  if (!paramc_ParamGet(*(void *)(v2 + 40), (uint64_t)"bet3cepstralequalizer", (void *)(a1 + 72), &v41)
    && v45 + 1 != v41 >> 2)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 56008, (uint64_t)"%s%s", v23, v24, v25, v26, "parameter");
    return 0;
  }
  cstdlib_strcpy(__dst, "synth");
  if ((paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet2voicequality", &__s1) & 0x80000000) == 0 && __s1 && *__s1)
  {
    cstdlib_strcat(__dst, "/");
    cstdlib_strcat(__dst, __s1);
    paramc_ParamRelease(*(void *)(v2 + 40));
  }
  else
  {
    cstdlib_strcat(__dst, "/med");
  }
  cstdlib_strcat(__dst, "/fxd");
  cstdlib_strcat(__dst, "/bet3f");
  unsigned int v29 = SHIDWORD(v46) / 1000;
  size_t v30 = cstdlib_strlen(__dst);
  LH_itoa(v29, &__dst[v30], 0xAu);
  uint64_t v31 = ssftriff_reader_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), 0, __dst, "HMEX", 1031, (uint64_t *)&v39);
  if ((v31 & 0x80000000) != 0) {
    return v31;
  }
  uint64_t Str = BET3FXD__MFVSyn__init__MVF_Synthesis((uint64_t *)(a1 + 64), *(void *)(a1 + 16), &__b, (uint64_t)v39, SHIDWORD(v45), v45, v18, HIDWORD(v46), v21, v40);
  if ((Str & 0x80000000) == 0)
  {
    if (!v39 || (uint64_t Str = ssftriff_reader_ObjClose(v39, v32, v33, v34, v35, v36, v37, v38), (Str & 0x80000000) == 0))
    {
      if (MFVSyn__setRelativeUVBoost((_DWORD *)*v8, v19)) {
        LODWORD(Str) = -2130698240;
      }
      if ((Str & 0x80000000) == 0 && BET3FXD__MFVSyn__setMVFBoost(*v8, v17)) {
        LODWORD(Str) = -2130698240;
      }
      uint64_t Str = BET3FXD__MFVSyn__setVolumeBoost(*(_DWORD **)(a1 + 64), *(_DWORD *)(a1 + 56))
          ? 2164269056
          : Str;
      if ((Str & 0x80000000) == 0)
      {
        uint64_t v31 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"volume", &v46);
        if ((v31 & 0x80000000) == 0)
        {
          uint64_t v31 = synth_bet3_loc_ParamSet_0(a1, "volume", v46);
          if ((v31 & 0x80000000) == 0)
          {
            uint64_t v31 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate_baseline", &v46);
            if ((v31 & 0x80000000) == 0)
            {
              uint64_t v31 = synth_bet3_loc_ParamSet_0(a1, "rate_baseline", v46);
              if ((v31 & 0x80000000) == 0)
              {
                uint64_t v31 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", &v46);
                if ((v31 & 0x80000000) == 0)
                {
                  uint64_t v31 = synth_bet3_loc_ParamSet_0(a1, "rate", v46);
                  if ((v31 & 0x80000000) == 0)
                  {
                    uint64_t v31 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch_baseline", &v46);
                    if ((v31 & 0x80000000) == 0)
                    {
                      uint64_t v31 = synth_bet3_loc_ParamSet_0(a1, "pitch_baseline", v46);
                      if ((v31 & 0x80000000) == 0)
                      {
                        uint64_t v31 = paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", &v46);
                        if ((v31 & 0x80000000) == 0) {
                          return synth_bet3_loc_ParamSet_0(a1, "pitch", v46);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return v31;
      }
    }
  }
  return Str;
}

uint64_t synth_bet3_loc_ParamSet_0(uint64_t a1, const char *a2, unsigned int a3)
{
  if (cstdlib_strcmp(a2, "audiooutputbufsamples"))
  {
    uint64_t v6 = critsec_Enter(*(void **)(a1 + 24));
    if ((v6 & 0x80000000) == 0)
    {
      if (cstdlib_strcmp(a2, "volume"))
      {
        if (cstdlib_strcmp(a2, "rate_baseline"))
        {
          if (cstdlib_strcmp(a2, "rate"))
          {
            if (!cstdlib_strcmp(a2, "ratewpm"))
            {
              uint64_t v11 = 2164269057;
              goto LABEL_27;
            }
            if (cstdlib_strcmp(a2, "pitch_baseline"))
            {
              if (!cstdlib_strcmp(a2, "pitch"))
              {
                uint64_t v7 = MapProsodyValue_Scaling(50, 100, 200, *(_DWORD *)(a1 + 1044), a3);
                uint64_t v11 = 2164269071;
                if ((v7 - 201) < 0xFFFFFF69) {
                  goto LABEL_27;
                }
                if (*(_DWORD *)(a1 + 52))
                {
                  int v12 = v7;
                  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set pitch %d (synth %d)", v8, v9, v10, v7);
                  int v13 = *(_DWORD *)(a1 + 1036);
                  if (v13 != 1)
                  {
                    uint64_t v11 = v6;
                    if (!v13)
                    {
                      int v14 = BET3FXD__MFVSyn__setPitchLevelPercent(*(void *)(a1 + 64), v12);
                      goto LABEL_35;
                    }
                    goto LABEL_27;
                  }
                  *(_DWORD *)(a1 + 1328) = v12;
                }
              }
              goto LABEL_23;
            }
            uint64_t v11 = 2164269071;
            if (a3 - 201 < 0xFFFFFF69) {
              goto LABEL_27;
            }
            unsigned int v25 = 0;
            *(_DWORD *)(a1 + 1044) = a3;
            uint64_t v16 = "pitch";
            paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pitch", &v25);
            uint64_t v17 = v25;
LABEL_22:
            synth_bet3_loc_ParamSet_0(a1, v16, v17);
            goto LABEL_23;
          }
          uint64_t v18 = MapProsodyValue_Scaling(50, 100, 400, *(_DWORD *)(a1 + 1040), a3);
          if (v18)
          {
            int v22 = ((int)v18 + 9999) / (int)v18;
            if (((v22 << 16) - 13107201) >= 0xFF50FFFF)
            {
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"SYNTH_BET3", 3, 0, (uint64_t)"Set rate %d", v19, v20, v21, v18);
              int v24 = *(_DWORD *)(a1 + 1036);
              if (v24 != 1)
              {
                uint64_t v11 = v6;
                if (!v24)
                {
                  int v14 = BET3FXD__MFVSyn__setRate(*(void *)(a1 + 64), (__int16)v22);
LABEL_35:
                  if (v14) {
                    uint64_t v11 = 2164269071;
                  }
                  else {
                    uint64_t v11 = v6;
                  }
                }
LABEL_27:
                critsec_Leave(*(void **)(a1 + 24));
                return v11;
              }
              uint64_t v11 = 2164269071;
              if ((unsigned __int16)v22 - 25 > 0xAF) {
                goto LABEL_27;
              }
              *(_WORD *)(a1 + 1340) = v22;
LABEL_23:
              uint64_t v11 = v6;
              goto LABEL_27;
            }
          }
        }
        else if (a3 - 401 >= 0xFFFFFEA1)
        {
          unsigned int v26 = 0;
          *(_DWORD *)(a1 + 1040) = a3;
          uint64_t v16 = "rate";
          paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"rate", &v26);
          uint64_t v17 = v26;
          goto LABEL_22;
        }
      }
      else if (a3 <= 0x64)
      {
        *(_WORD *)(a1 + 60) = a3;
        goto LABEL_23;
      }
      uint64_t v11 = 2164269071;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (a3 <= 1) {
      int v15 = 1;
    }
    else {
      int v15 = a3;
    }
    *(_DWORD *)(a1 + 40) = v15;
  }
  return v6;
}

uint64_t BET3FXD__rand31pmc_next(_DWORD *a1)
{
  unsigned int v1 = ((1101463552 * HIWORD(*a1)) & 0x7FFF0000)
     + 16807 * (unsigned __int16)*a1
     + ((16807 * HIWORD(*a1)) >> 15);
  uint64_t v2 = (v1 + (v1 >> 31)) & 0x7FFFFFFF;
  *a1 = v2;
  return v2;
}

int *BET3FXD__rand31pmc_seedi(int *result, unsigned int a2)
{
  if (a2 <= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a2;
  }
  *uint64_t result = v2;
  return result;
}

unsigned int *rand_num_qs(unsigned int *result, _WORD *a2, int a3, int a4)
{
  if (a4 >= 1)
  {
    unsigned int v4 = *result;
    uint64_t v5 = a4;
    do
    {
      unsigned int v6 = ((1101463552 * HIWORD(v4)) & 0x7FFF0000)
         + 16807 * (unsigned __int16)v4
         + ((16807 * HIWORD(v4)) >> 15);
      unsigned int v4 = (v6 + (v6 >> 31)) & 0x7FFFFFFF;
      *a2++ = (((int)(0x40000000 - v4) >> 16) * (__int16)(a3 >> 2)) >> 14;
      --v5;
    }
    while (v5);
    *uint64_t result = v4;
  }
  return result;
}

_DWORD *BET3FXD__rand_num_init(_DWORD *result)
{
  *uint64_t result = 1;
  return result;
}

void *BET3FXD__MFVSyn__constructExcitationShapingFilter(void *result, unsigned int a2)
{
  int v2 = result;
  if (*((_DWORD *)result + 14) >= *((_DWORD *)result + 96))
  {
    uint64_t v3 = result[46];
    if (a2)
    {
      uint64_t v4 = *((int *)v2 + 94) - 1;
      *(_WORD *)(v3 + 2 * v4) = a2;
      uint64_t result = cstdlib_memmove((void *)v3, (const void *)(v3 + 2), 2 * v4);
      uint64_t v5 = v2[46];
      int v6 = *((_DWORD *)v2 + 94);
      int v7 = *(__int16 *)(v5 + 2 * (v6 - 2));
      BOOL v8 = v7 <= 0;
      BOOL v9 = v7 > 0;
      int v10 = 4 * v7;
      int v11 = 4 * v9;
      if (v8) {
        int v10 = 0;
      }
      int v12 = *(__int16 *)(v5 + 2 * (v6 - 3));
      int v13 = (4 * v9) | 2;
      int v14 = 2 * v12;
      if (v12 <= 0) {
        int v14 = 0;
      }
      else {
        int v11 = v13;
      }
      int v15 = *(__int16 *)(v5 + 2 * (v6 - 4));
      a2 = ((v14 + v10 + (v15 & ~(v15 >> 31))) * g_invDiv[v11 | (v15 > 0)]) >> 16;
    }
    else
    {
      uint64_t result = cstdlib_memset((void *)v3, 0, 2 * *((unsigned int *)v2 + 95));
      a2 = 0;
    }
  }
  unsigned int v16 = *((_DWORD *)v2 + 3);
  if (v16 >= (*((_DWORD *)v2 + 12) * a2) >> 14) {
    LOWORD(v16) = (*((_DWORD *)v2 + 12) * a2) >> 14;
  }
  *((_WORD *)v2 + 176) = v16;
  return result;
}

uint64_t MFVSyn__filterExcitationWithShapingFilter(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  unsigned int v7 = *(_DWORD *)(a1 + 16) * a3;
  if (v7 < 0x7AE149)
  {
    cstdlib_memset(*(void **)(a4 + 8), 0, 2 * *(unsigned int *)(a4 + 16));
    uint64_t result = (uint64_t)rand_num_qs((unsigned int *)(v6 + 60), *(_WORD **)(v6 + 208), *(_DWORD *)(v6 + 32), a2);
    *(void *)(v6 + 508) = 0xFFFFFFFFLL;
    goto LABEL_46;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 472);
  if ((int)v8 < 1)
  {
LABEL_6:
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = (unsigned int *)(*(void *)(a1 + 480) + 16);
    while (1)
    {
      unsigned int v11 = *v10;
      v10 += 6;
      if (v11 >= v7) {
        break;
      }
      if (v8 == ++v9) {
        goto LABEL_6;
      }
    }
  }
  if (*(_DWORD *)(a1 + 504) == a2)
  {
    int v12 = *(__int16 *)(a1 + 500);
    LOWORD(a1) = *(_WORD *)(a1 + 500);
    *(_DWORD *)(v6 + 504) = a2;
  }
  else
  {
    LODWORD(a1) = fxd_U16SqrtS32(a2 << 6);
    int v14 = *(unsigned __int16 *)(v6 + 500);
    *(_DWORD *)(v6 + 504) = a2;
    int v12 = (__int16)a1;
    if (a1 != v14) {
      goto LABEL_16;
    }
  }
  if (v9 != *(_DWORD *)(v6 + 508))
  {
LABEL_16:
    if (*(__int16 *)(v6 + 488) >= 1)
    {
      __int16 v46 = a1;
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(v6 + 480) + 24 * v9;
      int v21 = (((unsigned __int16)((((unsigned __int16)*(_DWORD *)(v6 + 28) * *(__int16 *)(v20 + 20)) >> 14)
                               + 4 * *(_WORD *)(v20 + 20) * HIWORD(*(_DWORD *)(v6 + 28)))
            * v12) >> 14)
          + 4
          * v12
          * (((((unsigned __int16)*(_DWORD *)(v6 + 28) * *(__int16 *)(v20 + 20)) >> 14)
            + 4 * *(__int16 *)(v20 + 20) * (*(int *)(v6 + 28) >> 16)) >> 16);
      uint64_t v22 = *(void *)v20;
      uint64_t v23 = 2 * *(unsigned __int16 *)(v6 + 488);
      do
      {
        int v24 = fxd_S32ShMultRndS32S16(v21, *(__int16 *)(v22 + v19), 7);
        if (v24 <= -32768) {
          int v25 = -32768;
        }
        else {
          int v25 = v24;
        }
        if (v25 >= 0x7FFF) {
          LOWORD(v25) = 0x7FFF;
        }
        *(_WORD *)(*(void *)(a4 + 8) + v19) = v25;
        *(_WORD *)(*(void *)(v6 + 528) + v19) = v25;
        v19 += 2;
      }
      while (v23 != v19);
      LOWORD(a1) = v46;
    }
    goto LABEL_25;
  }
  if (*(__int16 *)(v6 + 488) >= 1)
  {
    uint64_t v15 = *(unsigned __int16 *)(v6 + 488);
    unsigned int v16 = *(__int16 **)(v6 + 528);
    uint64_t v17 = *(_WORD **)(a4 + 8);
    do
    {
      __int16 v18 = *v16++;
      *v17++ = v18;
      --v15;
    }
    while (v15);
  }
LABEL_25:
  *(_WORD *)(v6 + 500) = a1;
  int v26 = *(_DWORD *)(v6 + 264);
  if (v26 >= 1)
  {
    if (v26 >= a2) {
      int v27 = a2;
    }
    else {
      int v27 = *(_DWORD *)(v6 + 264);
    }
    if (*(_DWORD *)(a4 + 16) >= v27) {
      int v28 = v27;
    }
    else {
      int v28 = *(_DWORD *)(a4 + 16);
    }
    if (v28 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *(void *)(a4 + 8);
      do
      {
        __int16 v31 = fxd_S16SatAddS16S16(*(__int16 *)(v30 + v29), *(__int16 *)(*(void *)(v6 + 256) + v29));
        uint64_t v30 = *(void *)(a4 + 8);
        *(_WORD *)(v30 + v29) = v31;
        v29 += 2;
      }
      while (2 * v28 != v29);
      int v26 = *(_DWORD *)(v6 + 264);
    }
    BOOL v32 = __OFSUB__(v26, v28);
    int v33 = v26 - v28;
    if (!((v33 < 0) ^ v32 | (v33 == 0)))
    {
      cstdlib_memmove(*(void **)(v6 + 256), (const void *)(*(void *)(v6 + 256) + 2 * v28), 2 * v33);
      *(_DWORD *)(v6 + 264) = (*(_DWORD *)(v6 + 264) - v28) & ~((*(_DWORD *)(v6 + 264) - v28) >> 31);
    }
  }
  cstdlib_memset(*(void **)(v6 + 256), 0, 2 * *(unsigned int *)(v6 + 268));
  int v34 = *(__int16 *)(v6 + 488);
  BOOL v32 = __OFSUB__(v34, a2);
  int v35 = v34 - a2;
  if ((v35 < 0) ^ v32 | (v35 == 0))
  {
    uint64_t v36 = a2;
  }
  else
  {
    uint64_t v36 = a2;
    cstdlib_memmove(*(void **)(v6 + 256), (const void *)(*(void *)(a4 + 8) + 2 * a2), 2 * v35);
    int v37 = *(__int16 *)(v6 + 488) - a2;
    if (v37 <= *(_DWORD *)(v6 + 264)) {
      int v37 = *(_DWORD *)(v6 + 264);
    }
    *(_DWORD *)(v6 + 264) = v37;
  }
  uint64_t v38 = *(__int16 *)(v6 + 492);
  int v39 = *(__int16 *)(*(void *)(v6 + 480) + 24 * v9 + 22);
  rand_num_qs((unsigned int *)(v6 + 60), (_WORD *)(*(void *)(v6 + 208) + 2 * v38), (((unsigned __int16)*(_DWORD *)(v6 + 32) * v39) >> 14) + 4 * v39 * (*(int *)(v6 + 32) >> 16), a2);
  cstdlib_memmove(*(void **)(v6 + 208), *(const void **)(v6 + 280), 2 * v38);
  cstdlib_memmove(*(void **)(v6 + 280), (const void *)(*(void *)(v6 + 208) + 2 * v36), 2 * v38);
  zerflt_qs(*(void *)(v6 + 208) + 2 * v38, *(__int16 **)(*(void *)(v6 + 480) + 24 * v9 + 8), *(void *)(v6 + 208) + 2 * v38, *(__int16 *)(v6 + 492), a2);
  uint64_t result = (uint64_t)cstdlib_memmove(*(void **)(v6 + 208), (const void *)(*(void *)(v6 + 208) + 2 * v38), 2 * a2);
  int v40 = *(_DWORD *)(v6 + 512);
  int v41 = *(_DWORD *)(v6 + 516);
  BOOL v32 = __OFSUB__(v40, v41);
  int v42 = v40 - v41;
  if (!((v42 < 0) ^ v32 | (v42 == 0))) {
    *(_DWORD *)(v6 + 512) = v42;
  }
  *(_DWORD *)(v6 + 508) = v9;
LABEL_46:
  if (a2 >= 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = *(void *)(a4 + 8);
    uint64_t v45 = 2 * a2;
    do
    {
      uint64_t result = fxd_S16SatAddS16S16(*(__int16 *)(v44 + v43), *(__int16 *)(*(void *)(v6 + 208) + v43));
      uint64_t v44 = *(void *)(a4 + 8);
      *(_WORD *)(v44 + v43) = result;
      v43 += 2;
    }
    while (v45 != v43);
  }
  return result;
}

uint64_t MFVSyn__MVFExcitation_construct(uint64_t a1)
{
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 504) = 0xFFFFFFFF00000004;
  *(_WORD *)(a1 + 500) = 2;
  *(void *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 516) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)(a1 + 8), 4);
  return 0;
}

uint64_t MFVSyn__createMVFExcitation_(uint64_t a1)
{
  if (*(__int16 *)(a1 + 488) <= *(__int16 *)(a1 + 492)) {
    unsigned int v2 = *(__int16 *)(a1 + 492);
  }
  else {
    unsigned int v2 = *(__int16 *)(a1 + 488);
  }
  *(_DWORD *)(a1 + 68) = v2;
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 248, v2)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 264) = 0;
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 272, *(_DWORD *)(a1 + 68))) {
    return 0xFFFFFFFFLL;
  }
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 520, *(_DWORD *)(a1 + 68))) {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t MFVSyn__deleteMVFExcitation_(uint64_t a1)
{
  int v2 = vect_t__deleteVect_qs(a1 + 248);
  int v3 = vect_t__deleteVect_qs(a1 + 272);
  if (vect_t__deleteVect_qs(a1 + 520) | v3 | v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t vect_t__createVect_qs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a1;
  uint64_t v5 = (void *)heap_Alloc(a1, 2 * a3);
  *(void *)(a2 + 8) = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  cstdlib_memset(v5, 0, 2 * a3);
  return 0;
}

uint64_t vect_t__deleteVect_qs(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = (void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  heap_Free(*(void **)a1, v1);
  uint64_t result = 0;
  *int v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t BET3FXD__vect_t__createVect(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a1;
  uint64_t v5 = (void *)heap_Alloc(a1, 4 * a3);
  *(void *)(a2 + 8) = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a2 + 16) = a3;
  *(_DWORD *)(a2 + 20) = a3;
  cstdlib_memset(v5, 0, 4 * a3);
  return 0;
}

uint64_t BET3FXD__vect_t__deleteVect(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = (void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  heap_Free(*(void **)a1, v1);
  uint64_t result = 0;
  *int v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t exp_S7_25(int a1, _WORD *a2)
{
  int v2 = a1 >> 10;
  uint64_t result = 0x40000000;
  int v4 = 1;
  for (uint64_t i = 10; i != 32; ++i)
  {
    if (v2)
    {
      uint64_t result = (exp_mantissa_lut[i] * (((int)result + 0x4000) >> 15));
      v4 += exp_scale_lut[i];
      if ((int)result <= 1073733631)
      {
        uint64_t result = (2 * result);
        --v4;
      }
    }
    v2 >>= 1;
  }
  if ((int)result <= 0x3FFFFFFF)
  {
    do
    {
      uint64_t result = (2 * result);
      LOWORD(v4) = v4 - 1;
    }
    while ((int)result < 0x40000000);
  }
  *a2 = v4;
  return result;
}

uint64_t BET3FXD__MFVSyn__SynthesisOneFrame(uint64_t a1, int a2, void *__src, __int16 a4, int *a5, void *a6)
{
  *a5 = 0;
  *a6 = 0;
  int v9 = *(_DWORD *)(a1 + 396);
  BOOL v10 = a2 == 0;
  if (v9 != 1) {
    BOOL v10 = 0;
  }
  if (v9) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = a2 != 0;
  }
  *(_DWORD *)(a1 + 392) = v11 || v10;
  if (a2)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 36) * a2;
    unsigned int v13 = v12 >> 25;
    unsigned int v14 = HIWORD(v12);
    if (v13 < 5) {
      unsigned int v14 = 2560;
    }
  }
  else
  {
    unsigned int v14 = 0;
  }
  *(_DWORD *)(a1 + 396) = v14 != 0;
  int v15 = *(_DWORD *)(a1 + 296);
  int v16 = *(_DWORD *)(a1 + 300);
  *a5 = v15;
  int v17 = *(_DWORD *)(a1 + 40);
  if (v17 != 0x4000)
  {
    int v15 = (*(_DWORD *)(a1 + 296) * v17 + 0x2000) >> 14;
    int v16 = (unsigned __int16)(0x10000u / (unsigned __int16)v15);
    *a5 = v15;
  }
  if (!v14 || (int v18 = (*(_DWORD *)(a1 + 8) << 12) / v14, (*(_WORD *)(a1 + 400) = v18) == 0)) {
    *(_WORD *)(a1 + 400) = *(_WORD *)(a1 + 344);
  }
  cstdlib_memmove(*(void **)(a1 + 416), __src, 4 * (*(_DWORD *)(a1 + 120) + 1));
  *(_WORD *)(a1 + 402) = a4;
  BET3FXD__MFVSyn__mc2mlsa(a1, *(void *)(a1 + 416), *(int32x2_t **)(a1 + 576));
  cstdlib_memmove(*(void **)(a1 + 416), *(const void **)(a1 + 576), 4 * (*(_DWORD *)(a1 + 120) + 1));
  BET3FXD__MFVSyn__constructExcitationShapingFilter((void *)a1, *(unsigned __int16 *)(a1 + 402));
  int v19 = *(unsigned __int16 *)(a1 + 400);
  if (*(_DWORD *)(a1 + 392)) {
    goto LABEL_20;
  }
  int v20 = v19 - *(unsigned __int16 *)(a1 + 432);
  if (v20 < 0) {
    int v20 = *(unsigned __int16 *)(a1 + 432) - v19;
  }
  if (v20 >= *(_DWORD *)(a1 + 340)) {
LABEL_20:
  }
    *(_WORD *)(a1 + 432) = v19;
  LODWORD(v21) = *(_DWORD *)(a1 + 120);
  if ((v21 & 0x80000000) != 0)
  {
    int v24 = *(_DWORD **)(a1 + 448);
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = *(void *)(a1 + 416);
    int v24 = *(_DWORD **)(a1 + 448);
    uint64_t v25 = *(void *)(a1 + 136);
    do
    {
      *(_DWORD *)(v25 + 4 * v22) = ((*(_DWORD *)(v23 + 4 * v22) - v24[v22]) >> 16) * (__int16)v16
                                 + (((unsigned __int16)(*(_WORD *)(v23 + 4 * v22) - LOWORD(v24[v22])) * (__int16)v16
                                   + 0x8000) >> 16);
      uint64_t v21 = *(int *)(a1 + 120);
    }
    while (v22++ < v21);
  }
  cstdlib_memmove(*(void **)(a1 + 80), v24, 4 * (v21 + 1));
  uint64_t v27 = 0;
  uint64_t v28 = *(void *)(a1 + 448);
  uint64_t v29 = *(void *)(a1 + 104);
  do
  {
    *(_WORD *)(v29 + 2 * v27) = *(_DWORD *)(v28 + 4 * v27) >> 10;
    ++v27;
  }
  while (v27 != 5);
  for (uint64_t i = 0; i != 6; ++i)
    *(_WORD *)(v29 + 10 + 2 * i) = *(_DWORD *)(v28 + 20 + 4 * i) >> 9;
  int v31 = *(_DWORD *)(a1 + 120);
  if (v31 >= 11)
  {
    BOOL v32 = (unsigned int *)(v28 + 44);
    int v33 = (_WORD *)(v29 + 22);
    uint64_t v34 = (v31 - 10);
    do
    {
      unsigned int v35 = *v32++;
      *v33++ = v35 >> 8;
      --v34;
    }
    while (v34);
  }
  uint64_t v36 = *(unsigned int *)(a1 + 464);
  if ((int)v36 >= 1)
  {
    int v37 = *(void **)(a1 + 184);
    uint64_t v38 = *(const void **)(a1 + 160);
    if ((int)v36 <= v15)
    {
      cstdlib_memmove(v37, v38, 2 * v36);
      BET3FXD__MFVSyn__mlsa_filter((void *)a1, *(void *)(a1 + 184), *(void *)(a1 + 232), *(_DWORD *)(a1 + 464));
    }
    else
    {
      cstdlib_memmove(v37, v38, 2 * v15);
      BET3FXD__MFVSyn__mlsa_filter((void *)a1, *(void *)(a1 + 184), *(void *)(a1 + 232), v15);
      cstdlib_memmove(*(void **)(a1 + 160), (const void *)(*(void *)(a1 + 160) + 2 * v15), 2 * (*(_DWORD *)(a1 + 464) - v15));
    }
  }
  for (int j = *(_DWORD *)(a1 + 464); j < v15; *(_DWORD *)(a1 + 464) = j)
  {
    int v40 = j * v16;
    unsigned int v41 = *(unsigned __int16 *)(a1 + 400);
    if (*(_DWORD *)(a1 + 56) >= 3u) {
      unsigned int v41 = (v40 * v41 + (0x10000 - v40) * *(unsigned __int16 *)(a1 + 432)) >> 16;
    }
    signed int v42 = v41 >> 6;
    if (v42 <= *(_DWORD *)(a1 + 20)) {
      signed int v42 = *(_DWORD *)(a1 + 20);
    }
    if (v42 >= *(_DWORD *)(a1 + 24)) {
      int v43 = *(_DWORD *)(a1 + 24);
    }
    else {
      int v43 = v42;
    }
    unsigned int v44 = *(unsigned __int16 *)(a1 + 352);
    if (*(_WORD *)(a1 + 352) && *(_WORD *)(a1 + 354)) {
      unsigned int v44 = (v40 * v44 + (0x10000 - v40) * *(unsigned __int16 *)(a1 + 354)) >> 16;
    }
    MFVSyn__filterExcitationWithShapingFilter(a1, v43, v44, a1 + 176);
    uint64_t v45 = *(int *)(a1 + 464);
    int v46 = v45 + v43;
    if ((int)v45 + v43 >= v15) {
      int v46 = v15;
    }
    BET3FXD__MFVSyn__mlsa_filter((void *)a1, *(void *)(a1 + 184), *(void *)(a1 + 232) + 2 * v45, v46 - v45);
    int v47 = *(_DWORD *)(a1 + 464);
    int j = v47 + v43;
    if (v47 + v43 > v15)
    {
      cstdlib_memmove(*(void **)(a1 + 160), (const void *)(*(void *)(a1 + 184) + 2 * (v15 - v47)), 2 * (v43 - (v15 - v47)));
      int j = *(_DWORD *)(a1 + 464) + v43;
    }
  }
  *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 352);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a1 + 400);
  cstdlib_memmove(*(void **)(a1 + 448), *(const void **)(a1 + 416), 4 * (*(_DWORD *)(a1 + 120) + 1));
  *(_DWORD *)(a1 + 464) -= v15;
  *a6 = *(void *)(a1 + 232);
  return 0;
}

uint64_t BET3FXD__MFVSyn__setSpectralOrder(uint64_t a1, int a2)
{
  if (a2 < 10 || *(_DWORD *)(a1 + 124) < a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 120) = a2;
  return result;
}

uint64_t BET3FXD__MFVSyn__getSpectralOrder(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 120);
  return 0;
}

uint64_t BET3FXD__MFVSyn__setVolumeBoost(_DWORD *a1, unsigned int a2)
{
  if (a2 > 0xC8) {
    return 0xFFFFFFFFLL;
  }
  if (a2 == 100) {
    int v3 = 0x4000;
  }
  else {
    int v3 = 164 * a2;
  }
  a1[7] = v3;
  int v4 = fxd_S32ShMultRndS32S32(v3, 4 * a1[11], 16);
  uint64_t result = 0;
  a1[8] = v4;
  return result;
}

uint64_t MFVSyn__setRelativeUVBoost(_DWORD *a1, unsigned int a2)
{
  if (a2 > 0xC8) {
    return 0xFFFFFFFFLL;
  }
  int v2 = 164 * a2;
  if (a2 == 100) {
    int v2 = 0x4000;
  }
  a1[11] = v2;
  BET3FXD__MFVSyn__setVolumeBoost(a1, (100 * a1[7]) >> 14);
  return 0;
}

uint64_t BET3FXD__MFVSyn__setMVFBoost(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xC8) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v4 = 164 * a2;
  if (a2 == 100) {
    int v4 = 0x4000;
  }
  *(_DWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t BET3FXD__MFVSyn__setPitchLevelPercent(uint64_t a1, int a2)
{
  if ((a2 - 50) > 0x96) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 36) = (a2 << 16) / 0x64u;
  return result;
}

uint64_t BET3FXD__MFVSyn__setRate(uint64_t a1, int a2)
{
  if ((a2 - 11) > 0xBD) {
    return 0xFFFFFFFFLL;
  }
  if (a2 == 100) {
    int v3 = 0x4000;
  }
  else {
    int v3 = fxd_S32ShMultRndS32S32(10737418, a2, 16);
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t BET3FXD__MFVSyn__getVolumeBoost(uint64_t a1, _DWORD *a2)
{
  *a2 = 100 * (*(int *)(a1 + 28) >> 14);
  return 0;
}

uint64_t MFVSyn__getRelativeUVBoost(uint64_t a1, _DWORD *a2)
{
  *a2 = 100 * (*(int *)(a1 + 44) >> 14);
  return 0;
}

uint64_t BET3FXD__MFVSyn__getMVFBoost(uint64_t a1, _DWORD *a2)
{
  *a2 = 100 * (*(_DWORD *)(a1 + 48) >> 14);
  return 0;
}

uint64_t MFVSyn__getPitchLevelPercent(uint64_t a1, unsigned int *a2)
{
  *a2 = (100 * *(_DWORD *)(a1 + 36)) >> 16;
  return 0;
}

uint64_t BET3FXD__MFVSyn__getRate(uint64_t a1, _DWORD *a2)
{
  *a2 = 100 * (*(int *)(a1 + 40) >> 14);
  return 0;
}

uint64_t BET3FXD__MFVSyn__construct(uint64_t a1)
{
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 396) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 232) = 0;
  BET3FXD__rand_num_init((_DWORD *)(a1 + 60));
  MFVSyn__mlsa_filter_construct((void *)a1);
  MFVSyn__MVFExcitation_construct(a1);
  *(_DWORD *)(a1 + 20) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)(a1 + 8), 0xAF00u) >> 6;
  *(_DWORD *)(a1 + 24) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)(a1 + 8), 0xA00u) >> 6;
  *(_WORD *)(a1 + 52) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)(a1 + 8), 4) >> 6;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 40) = 0x4000;
  *(_DWORD *)(a1 + 28) = 0x4000;
  *(_DWORD *)(a1 + 32) = fxd_S32ShMultRndS32S32(0x4000, 4 * *(_DWORD *)(a1 + 44), 16);
  *(void *)(a1 + 44) = 0x400000004000;
  BET3FXD__MFVSyn__setVolumeBoost((_DWORD *)a1, (100 * *(_DWORD *)(a1 + 28)) >> 14);
  *(_DWORD *)(a1 + 36) = 0x10000;
  return 0;
}

uint64_t BET3FXD__MFVSyn__deconstruct(_DWORD *a1)
{
  int v2 = BET3FXD__vect_t__deleteVect((uint64_t)(a1 + 110));
  if (BET3FXD__vect_t__deleteVect((uint64_t)(a1 + 102)) | v2) {
    unsigned int v3 = -1;
  }
  else {
    unsigned int v3 = 0;
  }
  unsigned int v4 = a1[14];
  if (v4 >= a1[84])
  {
    if (vect_t__deleteVect_qs((uint64_t)(a1 + 76))) {
      unsigned int v3 = -1;
    }
    unsigned int v4 = a1[14];
  }
  if (v4 >= a1[96] && vect_t__deleteVect_qs((uint64_t)(a1 + 90))) {
    unsigned int v3 = -1;
  }
  int v5 = BET3FXD__MFVSyn__mlsa_filter_deinit((uint64_t)a1);
  int v6 = BET3FXD__vect_t__deleteVect((uint64_t)(a1 + 18));
  int v7 = BET3FXD__vect_t__deleteVect((uint64_t)(a1 + 32));
  int v8 = vect_t__deleteVect_qs((uint64_t)(a1 + 38));
  int v9 = vect_t__deleteVect_qs((uint64_t)(a1 + 44));
  int v10 = vect_t__deleteVect_qs((uint64_t)(a1 + 50));
  int v11 = vect_t__deleteVect_qs((uint64_t)(a1 + 56));
  if (MFVSyn__deleteMVFExcitation(a1) | v11 | v10 | v9 | v8 | v7 | v6 | v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3;
  }
}

uint64_t BET3FXD__MFVSyn__reset__MVF_Synthesis(uint64_t *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  BET3FXD__rand_num_init((_DWORD *)(v1 + 60));
  *(_DWORD *)(v1 + 464) = 0;
  *(_DWORD *)(v1 + 396) = 0;
  *(_WORD *)(v1 + 354) = 0;
  cstdlib_memset(*(void **)(v1 + 552), 0, 4 * *(unsigned int *)(v1 + 564));
  cstdlib_memset(*(void **)(v1 + 576), 0, 4 * *(unsigned int *)(v1 + 588));
  *(_WORD *)(v1 + 432) = *(_WORD *)(v1 + 344);
  *(_WORD *)(v1 + 434) = 0;
  cstdlib_memset(*(void **)(v1 + 448), 0, 4 * *(unsigned int *)(v1 + 456));
  BET3FXD__MFVSyn__mc2mlsa(v1, *(void *)(v1 + 448), *(int32x2_t **)(v1 + 448));
  cstdlib_memset(*(void **)(v1 + 184), 0, 2 * *(unsigned int *)(v1 + 196));
  cstdlib_memset(*(void **)(v1 + 160), 0, 2 * *(unsigned int *)(v1 + 172));
  cstdlib_memset(*(void **)(v1 + 256), 0, 2 * *(unsigned int *)(v1 + 268));
  cstdlib_memset(*(void **)(v1 + 280), 0, 2 * *(unsigned int *)(v1 + 292));
  cstdlib_memset(*(void **)(v1 + 208), 0, 2 * *(unsigned int *)(v1 + 220));
  cstdlib_memset(*(void **)(v1 + 528), 0, 2 * *(unsigned int *)(v1 + 540));
  *(_DWORD *)(v1 + 512) = 0;
  *(void *)(v1 + 504) = 0xFFFFFFFF00000004;
  *(_WORD *)(v1 + 500) = 2;
  cstdlib_memset(*(void **)(v1 + 136), 0, 4 * *(unsigned int *)(v1 + 148));
  v_set_qs(*(_WORD **)(v1 + 312), *(_WORD *)(v1 + 344), *(_DWORD *)(v1 + 324));
  uint64_t result = 0;
  if (*(_DWORD *)(v1 + 56) >= *(_DWORD *)(v1 + 384))
  {
    cstdlib_memset(*(void **)(v1 + 368), 0, 2 * *(unsigned int *)(v1 + 380));
    return 0;
  }
  return result;
}

uint64_t BET3FXD__MFVSyn__init__MVF_Synthesis(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, int a9, unsigned char *a10)
{
  uint64_t v18 = heap_Calloc(*(void **)(a2 + 8), 1, 704);
  BOOL v32 = (void *)v18;
  *a1 = v18;
  if (!v18) {
    return 0xFFFFFFFFLL;
  }
  int v19 = (uint64_t *)v18;
  long long v30 = 0uLL;
  int v31 = 0;
  *(void *)uint64_t v18 = a2;
  long long v20 = *a3;
  int v21 = *((_DWORD *)a3 + 8);
  *(_OWORD *)(v18 + 36) = a3[1];
  *(_OWORD *)(v18 + 20) = v20;
  *(_DWORD *)(v18 + 52) = v21;
  *(_DWORD *)(v18 + 56) = a9;
  *(_DWORD *)(v18 + 120) = a6;
  *(_DWORD *)(v18 + 124) = a6;
  if ((int)a8 > 15999)
  {
    if (a8 == 22050) {
      goto LABEL_8;
    }
    int v22 = 16000;
  }
  else
  {
    if (a8 == 8000) {
      goto LABEL_8;
    }
    int v22 = 11025;
  }
  if (a8 != v22) {
    goto LABEL_16;
  }
LABEL_8:
  BET3FXD__wave_t__setSampleRateHz((_DWORD *)(v18 + 8), a8);
  if (BET3FXD__MFVSyn__construct((uint64_t)v19)) {
    goto LABEL_16;
  }
  *((_DWORD *)v19 + 7) = 0x4000;
  *((_DWORD *)v19 + 8) = fxd_S32ShMultRndS32S32(0x4000, 4 * *((_DWORD *)v19 + 11), 16);
  *((_DWORD *)v19 + 10) = 0x4000;
  if ((int)a8 > 15999)
  {
    if (a8 != 22050)
    {
      int v23 = 16000;
LABEL_14:
      if (a8 != v23) {
        goto LABEL_16;
      }
    }
  }
  else if (a8 != 8000)
  {
    int v23 = 11025;
    goto LABEL_14;
  }
  *((_WORD *)v19 + 26) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)v19 + 2, a5) >> 6;
  if (!BET3FXD__MFVSyn__loadExcTable(v19, a4))
  {
    *((_DWORD *)v19 + 98) = 0;
    *((_WORD *)v19 + 172) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)v19 + 2, 0x3E80u);
    *((_DWORD *)v19 + 85) = BET3FXD__wave_t__convertFromF0ToTp((_DWORD *)v19 + 2, 0xF00u);
    *((_DWORD *)v19 + 84) = 3;
    if (*((_DWORD *)v19 + 14) >= 3u)
    {
      if (vect_t__createVect_qs(*(void *)(*v19 + 8), (uint64_t)(v19 + 38), 4u)) {
        goto LABEL_16;
      }
      v_set_qs((_WORD *)v19[39], *((_WORD *)v19 + 172), *((_DWORD *)v19 + 81));
      *((_DWORD *)v19 + 83) = 0x10000 / *((_DWORD *)v19 + 80);
      *((_DWORD *)v19 + 82) = 0;
    }
    *((_DWORD *)v19 + 16) = BET3FXD__wave_t__sampleRateHz((unsigned int *)v19 + 2);
    *((_DWORD *)v19 + 96) = 3;
    if ((*((_DWORD *)v19 + 14) < 3u
       || !vect_t__createVect_qs(*(void *)(*v19 + 8), (uint64_t)(v19 + 45), 5u))
      && !MFVSyn__createMVFExcitation(v19)
      && !BET3FXD__vect_t__createVect(*(void *)(*v19 + 8), (uint64_t)(v19 + 9), *((_DWORD *)v19 + 30) + 1))
    {
      *((_WORD *)v19 + 177) = 0;
      *((_DWORD *)v19 + 116) = 0;
      unsigned int v25 = *((unsigned __int16 *)v19 + 26);
      *((_DWORD *)v19 + 74) = v25;
      *((_DWORD *)v19 + 75) = (unsigned __int16)(0x10000 / v25);
      if (v25)
      {
        if ((unsigned __int16)(0x10000 / v25))
        {
          uint64_t v26 = *((int *)v19 + 14);
          if (v26 <= 4)
          {
            int v27 = dword_2207758EC[v26];
            if (!BET3FXD__vect_t__createVect(*(void *)(*v19 + 8), (uint64_t)(v19 + 16), *((_DWORD *)v19 + 30) + 1))
            {
              *((_DWORD *)v19 + 129) = BET3FXD__wave_t__convertFromMsecToTp((_DWORD *)v19 + 2, v27) >> 6;
              if (!MFVSyn__mlsa_filter_consult((uint64_t)v19, *((_DWORD *)v19 + 14), a8, a7, a10, (uint64_t)&v30))
              {
                long long v28 = v30;
                int v29 = v31;
                if (!BET3FXD__MFVSyn__mlsa_filter_init((uint64_t)v19, (uint64_t)&v28)
                  && !vect_t__createVect_qs(*(void *)(*v19 + 8), (uint64_t)(v19 + 22), *((_DWORD *)v19 + 74) + *((_DWORD *)v19 + 17) + *((_DWORD *)v19 + 6) + 1)&& !vect_t__createVect_qs(*(void *)(*v19 + 8), (uint64_t)(v19 + 19), *((_DWORD *)v19 + 74) + *((_DWORD *)v19 + 17) + *((_DWORD *)v19 + 6) + 1)&& !vect_t__createVect_qs(*(void *)(*v19 + 8), (uint64_t)(v19 + 25), *((_DWORD *)v19 + 74) + *((_DWORD *)v19 + 17) + *((_DWORD *)v19 + 6) + 1)&& !vect_t__createVect_qs(*(void *)(*v19 + 8), (uint64_t)(v19 + 28), 2 * *((_DWORD *)v19 + 74)))
                {
                  *((_WORD *)v19 + 216) = *((_WORD *)v19 + 172);
                  *((_WORD *)v19 + 217) = 0;
                  if (!BET3FXD__vect_t__createVect(*(void *)(*v19 + 8), (uint64_t)(v19 + 55), *((_DWORD *)v19 + 30) + 1)&& !BET3FXD__vect_t__createVect(*(void *)(*v19 + 8), (uint64_t)(v19 + 51), *((_DWORD *)v19 + 30) + 1))
                  {
                    BET3FXD__MFVSyn__mc2mlsa((uint64_t)v19, v19[56], (int32x2_t *)v19[56]);
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_16:
  MFVSyn__denit__MVF_Synthesis(&v32);
  *a1 = 0;
  return 0xFFFFFFFFLL;
}

uint64_t MFVSyn__denit__MVF_Synthesis(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v3 = BET3FXD__MFVSyn__releaseExcTable(*a1);
  if (BET3FXD__MFVSyn__deconstruct(v2) | v3) {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(void *)v2) {
    heap_Free(*(void **)(*(void *)v2 + 8), (uint64_t)v2);
  }
  *a1 = 0;
  return v4;
}

uint64_t MFVSyn__logStateMachine__MVF_Synthesis()
{
  return 0;
}

uint64_t getAlpha(int a1)
{
  if (a1 > 11999)
  {
    switch(a1)
    {
      case 12000:
        return 6207570;
      case 22050:
        return 7381975;
      case 16000:
        return 7046431;
    }
  }
  else
  {
    switch(a1)
    {
      case 8000:
        return 5200937;
      case 10000:
        return 5872026;
      case 11025:
        return 6039798;
    }
  }
  return 0;
}

int32x2_t BET3FXD__MFVSyn__mc2mlsa(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  unint64_t v3 = *(int *)(a1 + 120);
  int v4 = *(_DWORD *)(a1 + 608);
  a3->i32[v3] = *(_DWORD *)(a2 + 4 * v3);
  if ((int)v3 >= 1)
  {
    unint64_t v3 = v3;
    int v5 = (__int16)(v4 >> 8);
    do
      a3->i32[(v3 - 1)] = *(_DWORD *)(a2 + 4 * (v3 - 1))
                                      - ((a3->i32[v3] >> 16) * v5
                                       + (((unsigned __int16)a3->i32[v3] * v5 + 0x8000) >> 16));
    while (v3-- > 1);
  }
  int32x2_t result = vmin_s32(vmax_s32(*a3, (int32x2_t)0xFF09999A00000000), (int32x2_t)0xF6666601F9999ALL);
  *a3 = result;
  return result;
}

uint64_t MFVSyn__mlsadf_fxd(uint64_t a1, int a2, __int16 *a3)
{
  int v5 = 0;
  uint64_t v6 = *(void *)(a1 + 552);
  int v128 = *(_DWORD *)(a1 + 120);
  int v7 = *(__int16 *)(a1 + 616);
  int v133 = *(__int16 *)(a1 + 618);
  int v8 = *(__int16 **)(a1 + 600);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 621);
  int v10 = (int *)(v6 + 4 * v9 + 4);
  uint64_t v127 = v6;
  int v11 = (int *)(v6 + 8 * v9);
  uint64_t v12 = v6;
  do
  {
    int v13 = *v11--;
    int v14 = fxd_S32ShMultRndS32S16(v13, v133, 14);
    int v15 = fxd_S32ShMultRndS32S16(*(_DWORD *)(v12 + 4 * v9), v7, 14);
    *(_DWORD *)(v12 + 4 * v9) = v15 + v14;
    unsigned int v16 = (((v15 + v14) >> 12) & 0xFFFFFFF0) * a3[1] + (((unsigned __int16)(v15 + v14) * a3[1]) >> 12);
    v10[v9] = v16;
    if (v9 == 3) {
      int v17 = (v10[3] * v8[3]) >> 16;
    }
    else {
      int v17 = (int)(v16 * v8[v9]) >> 18;
    }
    if ((v9-- & 1) == 0) {
      int v19 = -v17;
    }
    else {
      int v19 = v17;
    }
    a2 += 2 * v19;
    v5 += v17;
  }
  while ((unint64_t)(v9 + 1) > 3);
  int v20 = fxd_S32ShMultRndS32S16(v10[1], v133, 14);
  int v21 = fxd_S32ShMultRndS32S16(*(_DWORD *)(v127 + 8), v7, 14);
  *(_DWORD *)(v127 + 8) = v21 + v20;
  int v22 = (((v21 + v20) >> 12) & 0xFFFFFFF0) * a3[1] + (((unsigned __int16)(v21 + v20) * a3[1]) >> 12);
  v10[2] = v22;
  int v23 = fxd_S32ShMultRndS32S16(v22, v8[2], 15);
  int v24 = a2 - 2 * v23;
  int v25 = v23 + v5;
  unsigned int v26 = (*v10 >> 14) & 0xFFFFFFFC;
  int v27 = (unsigned __int16)*v10 * v133 + 0x2000;
  int v28 = fxd_S32ShMultRndS32S16(*(_DWORD *)(v127 + 4), v7, 14);
  int v29 = v28 + v26 * v133 + (v27 >> 14);
  *(_DWORD *)(v127 + 4) = v29;
  int v30 = (((unsigned __int16)(v28 + v26 * v133 + (v27 >> 14)) * a3[1]) >> 12) + 16 * a3[1] * (v29 >> 16);
  v10[1] = v30;
  int v31 = fxd_S32ShMultRndS32S16(v30, v8[1], 15);
  int v32 = v31 + (v24 >> 1);
  *int v10 = v32;
  int v130 = v25 + v31 + v32;
  int v131 = 0;
  uint64_t v33 = a1;
  uint64_t v34 = *(unsigned __int8 *)(a1 + 620);
  uint64_t v119 = *(unsigned __int16 *)(a1 + 642);
  uint64_t v35 = v127 + 4 * v119;
  uint64_t v36 = (int *)(v35 + 4 * *(unsigned __int16 *)(a1 + 2 * v34 + 624));
  int v37 = a3 + 2;
  uint64_t v125 = v35;
  uint64_t v126 = a3 + 5;
  if (v128 <= 11) {
    uint64_t v38 = 11;
  }
  else {
    uint64_t v38 = v128;
  }
  uint64_t v122 = (v38 + 1);
  uint64_t v123 = (int *)(v35 + 4 * *(unsigned __int16 *)(a1 + 2 * v34 + 624));
  uint64_t v121 = v35 + 44;
  uint64_t v118 = v38;
  uint64_t v120 = v38 - 10;
  uint64_t v132 = a3 + 11;
  do
  {
    uint64_t v39 = v34;
    uint64_t v40 = *(unsigned __int16 *)(v33 + 2 * v34 + 622);
    unsigned int v41 = (int *)(v125 + 4 * v40);
    uint64_t v129 = v34 - 1;
    int v42 = v36[v34 - 1];
    *unsigned int v41 = v42;
    int v43 = fxd_S32ShMultRndS32S16(v42, v133, 14);
    uint64_t v44 = 0;
    int v45 = 0;
    v41[1] = fxd_S32ShMultRndS32S16(v41[1], v7, 14) + v43;
    int v46 = v37;
    do
    {
      int v47 = v41[v44 + 2];
      int v48 = fxd_S32ShMultRndS32S16(v41[v44 + 3] - v41[v44 + 1], v7, 14);
      v41[v44 + 2] = v48 + v47;
      int v49 = *v46++;
      v45 += (((v48 + v47) >> 12) & 0xFFFFFFF0) * v49 + (((unsigned __int16)(v48 + v47) * v49 + 2048) >> 12);
      ++v44;
    }
    while (v44 != 3);
    uint64_t v50 = 0;
    BOOL v51 = v126;
    do
    {
      int v52 = v41[v50 + 5] + (((v41[v50 + 6] - v41[v50 + 4]) * v7) >> 14);
      v41[v50 + 5] = v52;
      int v53 = *v51++;
      v45 += ((v52 >> 13) & 0xFFFFFFF8) * v53 + (((unsigned __int16)v52 * v53 + 4096) >> 13);
      ++v50;
    }
    while (v50 != 6);
    unsigned int v54 = v41 + 12;
    uint64_t v55 = v120;
    int v56 = (int *)(v121 + 4 * v40);
    int v57 = v132;
    do
    {
      int v58 = *v56 + (((*v54 - *(v54 - 2)) * v7) >> 14);
      *v56++ = v58;
      int v59 = *v57++;
      v45 += fxd_S32ShMultRndS32S16(v58, v59, 14);
      ++v54;
      --v55;
    }
    while (v55);
    int v60 = v54 - 2;
    uint64_t v61 = v122;
    uint64_t v36 = v123;
    do
    {
      int v62 = *v60--;
      v41[v61] = v62;
      BOOL v63 = v61-- <= 2;
    }
    while (!v63);
    v123[v39] = v45;
    uint64_t v33 = a1;
    int v64 = v132;
    if (v39 == 3)
    {
      int v65 = v123[3];
      int v66 = *(__int16 *)(*(void *)(a1 + 592) + 6);
      char v67 = 16;
    }
    else
    {
      int v66 = *(__int16 *)(*(void *)(a1 + 592) + 2 * v39);
      int v65 = v45;
      char v67 = 18;
    }
    int v68 = fxd_S32ShMultRndS32S16(v65, v66, v67);
    uint64_t v34 = v129;
    if (v39) {
      int v69 = v68;
    }
    else {
      int v69 = -v68;
    }
    v130 += v69;
    v131 += v68;
  }
  while (v39 > 3);
  uint64_t v70 = *(unsigned __int16 *)(a1 + 626);
  int v71 = (int *)(v125 + 4 * v70);
  int v72 = v123[1];
  *int v71 = v72;
  int v73 = fxd_S32ShMultRndS32S16(v72, v133, 14);
  int v74 = fxd_S32ShMultRndS32S16(v71[1], v7, 14);
  uint64_t v75 = 0;
  int v76 = 0;
  int v77 = v74 + v73;
  v71[1] = v74 + v73;
  int v78 = v37;
  do
  {
    int v77 = v71[v75 + 2] + (((v71[v75 + 3] - v77) * v7) >> 14);
    v71[v75 + 2] = v77;
    int v79 = *v78++;
    v76 += (v77 * v79) >> 12;
    ++v75;
  }
  while (v75 != 3);
  uint64_t v80 = 0;
  uint64_t v81 = v126;
  do
  {
    int v82 = v71[v80 + 5] + (((v71[v80 + 6] - v71[v80 + 4]) * v7) >> 14);
    v71[v80 + 5] = v82;
    int v83 = *v81++;
    v76 += (v82 * v83) >> 13;
    ++v80;
  }
  while (v80 != 6);
  uint64_t v84 = 4 * v70;
  unsigned int v85 = (int *)(4 * v70 + 4 * v119 + v127 + 44);
  uint64_t v86 = v118 - 10;
  BOOL v87 = v71 + 12;
  do
  {
    int v88 = *v85 + (((*v87 - *(v87 - 2)) * v7) >> 14);
    *v85++ = v88;
    int v89 = *v64++;
    v76 += fxd_S32ShMultRndS32S16(v88, v89, 14);
    ++v87;
    --v86;
  }
  while (v86);
  uint64_t v90 = v118 + 3;
  uint64_t v91 = (_DWORD *)(v84 + 4 * v119 + 4 * v118 + v127 + 4);
  uint64_t v92 = v87 - 2;
  do
  {
    *uint64_t v91 = *v92;
    *(v91 - 1) = *(v92 - 1);
    v90 -= 2;
    v91 -= 2;
    v92 -= 2;
  }
  while (v90 > 3);
  v123[2] = v76;
  int v93 = fxd_S32ShMultRndS32S16(v76, *(__int16 *)(*(void *)(a1 + 592) + 4), 15);
  uint64_t v94 = *(unsigned __int16 *)(a1 + 624);
  unsigned int v95 = (int *)(v125 + 4 * v94);
  int v96 = *v123;
  *unsigned int v95 = *v123;
  int v97 = fxd_S32ShMultRndS32S16(v96, v133, 14);
  int v98 = fxd_S32ShMultRndS32S16(v95[1], v7, 14);
  uint64_t v99 = 0;
  int v100 = 0;
  int v101 = v98 + v97;
  v95[1] = v98 + v97;
  uint64_t v102 = v132;
  do
  {
    int v101 = v95[v99 + 2] + (((v95[v99 + 3] - v101) * v7) >> 14);
    v95[v99 + 2] = v101;
    int v103 = *v37++;
    v100 += (v101 * v103) >> 12;
    ++v99;
  }
  while (v99 != 3);
  uint64_t v104 = 0;
  uint64_t v105 = v126;
  do
  {
    int v106 = v95[v104 + 5] + (((v95[v104 + 6] - v95[v104 + 4]) * v7) >> 14);
    v95[v104 + 5] = v106;
    int v107 = *v105++;
    v100 += (v106 * v107) >> 13;
    ++v104;
  }
  while (v104 != 6);
  uint64_t v108 = (int *)(4 * v94 + 4 * v119 + v127 + 44);
  uint64_t v109 = v118 - 10;
  uint64_t v110 = v95 + 12;
  do
  {
    int v111 = *v108 + (((*v110 - *(v110 - 2)) * v7) >> 14);
    *v108++ = v111;
    int v112 = *v102++;
    v100 += fxd_S32ShMultRndS32S16(v111, v112, 14);
    ++v110;
    --v109;
  }
  while (v109);
  uint64_t v113 = v110 - 2;
  uint64_t v114 = v122;
  do
  {
    int v115 = *v113--;
    v95[v114] = v115;
    BOOL v63 = v114-- <= 2;
  }
  while (!v63);
  v123[1] = v100;
  int v116 = fxd_S32ShMultRndS32S16(v100, *(__int16 *)(*(void *)(a1 + 592) + 2), 15);
  *uint64_t v123 = v116 + v130 - v93;
  return (v131 + v116 + v116 + v130);
}

void *BET3FXD__MFVSyn__mlsa_filter(void *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v5 = (uint64_t)result;
    int v6 = 0;
    uint64_t v7 = result[17];
    int v8 = (__int16 *)result[13];
    uint64_t v9 = result[10];
    uint64_t v10 = v9 + 20;
    do
    {
      int v11 = *(__int16 *)(a2 + 2 * v6);
      int32x2_t result = (void *)MFVSyn__mlsadf_fxd(v5, ((((unsigned __int16)g_expTable[**(__int16 **)(v5 + 104) >> 7] * v11) >> 12)+ 16 * v11 * (g_expTable[**(__int16 **)(v5 + 104) >> 7] >> 16)) >> 14, v8);
      for (uint64_t i = 0; i != 5; ++i)
      {
        unsigned int v13 = *(_DWORD *)(v7 + 4 * i) + *(_DWORD *)(v9 + 4 * i);
        *(_DWORD *)(v9 + 4 * i) = v13;
        v8[i] = v13 >> 10;
      }
      if (*v8 < 0) {
        *int v8 = 0;
      }
      for (uint64_t j = 0; j != 6; ++j)
      {
        unsigned int v15 = *(_DWORD *)(v7 + 20 + 4 * j) + *(_DWORD *)(v10 + 4 * j);
        *(_DWORD *)(v10 + 4 * j) = v15;
        v8[j + 5] = v15 >> 9;
      }
      uint64_t v16 = 11;
      do
      {
        unsigned int v17 = *(_DWORD *)(v7 + 4 * v16) + *(_DWORD *)(v9 + 4 * v16);
        *(_DWORD *)(v9 + 4 * v16) = v17;
        v8[v16] = v17 >> 8;
        BOOL v18 = v16++ < *(int *)(v5 + 120);
      }
      while (v18);
      if ((result + 62258) > 0x1E664)
      {
        int v19 = result + 59638 + (((int)result + 59638) >> 2);
        int v20 = (v19 >> 1) - 59638;
        BOOL v18 = v19 > 0xFFFFEB85;
        int v21 = (((v19 >> 1) + 2621 + (((v19 >> 1) + 2621) >> 2)) >> 2) - 62259;
        if (v18) {
          int v21 = v20;
        }
        if (v21 <= -65536) {
          int v21 = -65536;
        }
        unsigned int v22 = result - 59638 + ((result - 59638) >> 2);
        if (v22 >> 2 >= 0x51F) {
          int v23 = (((v22 >> 1) - 2621 + (((v22 >> 1) - 2621) >> 2)) >> 2) + 62259;
        }
        else {
          int v23 = (v22 >> 1) + 59638;
        }
        if (v23 >= 0xFFFF) {
          int v23 = 0xFFFF;
        }
        if ((int)result >= 59639) {
          int v21 = v23;
        }
        *(_WORD *)(a3 + 2 * v6) = v21 >> 1;
      }
      else
      {
        *(_WORD *)(a3 + 2 * v6++) = result >> 1;
        if (v6 < a4) {
          continue;
        }
      }
      ++v6;
    }
    while (v6 < a4);
  }
  return result;
}

void *MFVSyn__mlsa_filter_construct(void *result)
{
  result[69] = 0;
  result[72] = 0;
  result[13] = 0;
  return result;
}

uint64_t BET3FXD__MFVSyn__mlsa_filter_init(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(a1 + 120)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 608) = *(_DWORD *)a2;
  int v4 = BET3FXD__wave_t__sampleRateHz((unsigned int *)(a1 + 8));
  int Alpha = getAlpha(v4);
  *(_DWORD *)(a1 + 608) = Alpha;
  int v6 = fxd_S32ShMultRndS32S32(Alpha, Alpha, 24);
  *(_DWORD *)(a1 + 612) = 0x1000000 - v6;
  unsigned int v7 = *(_DWORD *)(a1 + 608);
  *(_WORD *)(a1 + 616) = v7 >> 10;
  *(_WORD *)(a1 + 618) = (0x1000000 - v6) >> 10;
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  if (vect_t__createVect_qs(*(void *)(*(void *)a1 + 8), a1 + 96, *(_DWORD *)(a1 + 120) + 1)) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)(a1 + 120) < 4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + 4);
  *(unsigned char *)(a1 + 621) = v8;
  *(unsigned char *)(a1 + 620) = *(unsigned char *)(a2 + 5);
  *(_WORD *)(a1 + 642) = 2 * v8 + 2;
  if (MFVSyn__mlsa_pickPadeApproximation(a1, *(_DWORD *)(a2 + 8), v8, *(unsigned __int8 *)(a2 + 16), (char **)(a1 + 600))|| MFVSyn__mlsa_pickPadeApproximation(a1, *(_DWORD *)(a2 + 12), *(unsigned __int8 *)(a1 + 620), *(unsigned __int8 *)(a2 + 17), (char **)(a1 + 592))|| BET3FXD__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 544, *(unsigned __int8 *)(a1 + 620)+ 2 * *(unsigned __int8 *)(a1 + 621)+ (*(_DWORD *)(a1 + 120) + 2) * *(unsigned __int8 *)(a1 + 620)+ 3)|| BET3FXD__vect_t__createVect(*(void *)(*(void *)a1 + 8), a1 + 568, *(_DWORD *)(a1 + 120) + 1))
  {
    return 0xFFFFFFFFLL;
  }
  __int16 v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = *(unsigned __int8 *)(a1 + 620);
  int v13 = *(_DWORD *)(a1 + 120);
  __int16 v14 = v13 + 2;
  uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(v12 + 1);
  __int16 v16 = v12 * (v13 + 2);
  __int16 v17 = -4 - 2 * v13;
  __int16 v18 = (v12 - 1) * v14;
  uint64_t v19 = ((_WORD)v12 + 3) & 0x1FE;
  int v20 = (_WORD *)(a1 + 2 * *(unsigned __int8 *)(a1 + 620) + 624);
  do
  {
    int32x2_t v21 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v11), (int8x16_t)xmmword_220774290)));
    if (v21.i8[0]) {
      _WORD *v20 = v16 + v10;
    }
    if (v21.i8[4]) {
      *(v20 - 1) = v18 + v10;
    }
    uint64_t result = 0;
    v11 += 2;
    v20 -= 2;
    v10 += v17;
  }
  while (v19 != v11);
  return result;
}

uint64_t BET3FXD__MFVSyn__mlsa_filter_deinit(uint64_t a1)
{
  int v2 = vect_t__deleteVect_qs(a1 + 96);
  int v3 = BET3FXD__vect_t__deleteVect(a1 + 544);
  if (BET3FXD__vect_t__deleteVect(a1 + 568) | v3 | v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t MFVSyn__mlsa_pickPadeApproximation(uint64_t a1, int a2, unsigned int a3, int a4, char **a5)
{
  if (a2 == 1)
  {
    if (a3 - 2 <= 5)
    {
      uint64_t result = 0xFFFFFFFFLL;
      switch(a4)
      {
        case 2:
          unsigned int v7 = (char *)&g_ChebyPade_R2;
          goto LABEL_15;
        case 3:
          unsigned int v7 = (char *)&g_ChebyPade_R3;
          goto LABEL_15;
        case 4:
          unsigned int v7 = (char *)&g_ChebyPade_R4;
          goto LABEL_15;
        case 5:
          unsigned int v7 = (char *)&g_ChebyPade_R5;
          goto LABEL_15;
        case 6:
          unsigned int v7 = (char *)&g_ChebyPade_R6;
          goto LABEL_15;
        case 8:
          unsigned int v7 = (char *)&g_ChebyPade_R8;
LABEL_15:
          uint64_t v5 = &v7[16 * a3];
          goto LABEL_16;
        default:
          return result;
      }
    }
    return 0;
  }
  else if (a2 || a3 - 3 > 2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = (char *)&g_pade_0 + 12 * a3;
LABEL_16:
    uint64_t result = 0;
    *a5 = v5;
  }
  return result;
}

uint64_t mlsa_strcpy(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  do
  {
    int v3 = *(unsigned __int8 *)(a2 + v2);
    *(unsigned char *)(result + v2++) = v3;
  }
  while (v3);
  return result;
}

unint64_t mlsa_strlen(unint64_t result)
{
  uint64_t v1 = (unsigned __int8 *)result;
  LODWORD(result) = -1;
  do
  {
    int v2 = *v1++;
    uint64_t result = (result + 1);
  }
  while (v2);
  return result;
}

uint64_t MFVSyn__mlsa_filter_mlp_fill(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = 0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  do
  {
    int v8 = *(unsigned __int8 *)(a5 + v7);
    v16[v7++] = v8;
  }
  while (v8);
  qmemcpy(v15, "XLMHU", 5);
  *(_DWORD *)a6 = a4;
  if (!v16[0]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = 0;
  while (v16[++v9])
    ;
  if (v9 != 80) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = 0;
  while (v16[v11] != *((unsigned char *)v15 + a2))
  {
    v11 += 16;
    if (v11 == 80) {
      return 0;
    }
  }
  int v13 = &v16[v11];
  *((unsigned char *)v13 + 14) = 0;
  *((unsigned char *)v13 + 12) = 0;
  *((unsigned char *)v13 + 10) = 0;
  *((unsigned char *)v13 + 8) = 0;
  *((unsigned char *)v13 + 6) = 0;
  *((unsigned char *)v13 + 4) = 0;
  *((unsigned char *)v13 + 2) = 0;
  *(_DWORD *)(a6 + 8) = LH_atoi(&v16[v11 + 7]);
  *(_DWORD *)(a6 + 12) = LH_atoi(v13 + 13);
  *(unsigned char *)(a6 + 4) = LH_atoi(v13 + 3);
  *(unsigned char *)(a6 + 5) = LH_atoi(v13 + 9);
  *(unsigned char *)(a6 + 16) = LH_atoi(v13 + 5);
  unsigned __int8 v14 = LH_atoi(v13 + 11);
  uint64_t result = 0;
  *(unsigned char *)(a6 + 17) = v14;
  return result;
}

uint64_t MFVSyn__mlsa_filter_consult(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned char *a5, uint64_t a6)
{
  if (!a1 || !*(_DWORD *)(a1 + 120)) {
    return 0xFFFFFFFFLL;
  }
  if (a5 && *a5) {
    return MFVSyn__mlsa_filter_mlp_fill(a1, a2, a3, a4, (uint64_t)a5, a6);
  }
  int v7 = 0;
  int v8 = 1;
  char v9 = 3;
  char v10 = 5;
  switch(a2)
  {
    case 0u:
      int v8 = 0;
      int v7 = 1;
      char v9 = 2;
      goto LABEL_9;
    case 2u:
      char v10 = 4;
      goto LABEL_15;
    case 3u:
LABEL_15:
      uint64_t result = 0;
      *(_DWORD *)a6 = a4;
      *(void *)(a6 + 8) = 0;
      *(unsigned char *)(a6 + 4) = 3;
      *(unsigned char *)(a6 + 5) = v10;
      __int16 v12 = 2056;
      goto LABEL_17;
    case 4u:
      uint64_t result = 0;
      *(_DWORD *)a6 = a4;
      *(void *)(a6 + 8) = 0x100000001;
      *(_WORD *)(a6 + 4) = 1795;
      __int16 v12 = 1284;
LABEL_17:
      *(_WORD *)(a6 + 16) = v12;
      return result;
    default:
LABEL_9:
      *(_DWORD *)a6 = a4;
      *(void *)(a6 + 8) = 0x100000001;
      if (a3 == 8000) {
        char v11 = 4;
      }
      else {
        char v11 = 5;
      }
      *(unsigned char *)(a6 + 4) = 3;
      *(unsigned char *)(a6 + 5) = v9;
      uint64_t result = 0;
      if (v8)
      {
        *(unsigned char *)(a6 + 16) = 4;
      }
      else
      {
        if (!v7) {
          return result;
        }
        *(unsigned char *)(a6 + 16) = 4;
      }
      *(unsigned char *)(a6 + 17) = v11;
      break;
  }
  return result;
}

unint64_t zerflt_qs(unint64_t result, __int16 *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = (_WORD *)(a3 + 2 * (a5 - 1));
  unint64_t v6 = result + 2 * (a5 - 1);
  do
  {
    uint64_t v7 = 0;
    LOWORD(v8) = 0;
    char v9 = a2;
    do
    {
      int v10 = *v9++;
      int v8 = ((*(__int16 *)(v6 + v7) * v10) >> 16) + (__int16)v8;
      v7 -= 2;
    }
    while (v9 < &a2[a4]);
    v6 -= 2;
    *v5-- = v8;
  }
  while (v6 >= result);
  return result;
}

uint64_t v_sum_qs(__int16 *a1, int a2)
{
  if (a2 < 1)
  {
    return 0;
  }
  else
  {
    __int16 v2 = 0;
    uint64_t v3 = a2;
    do
    {
      __int16 v4 = *a1++;
      v2 += v4;
      --v3;
    }
    while (v3);
  }
  return v2;
}

_WORD *v_set_qs(_WORD *result, __int16 a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      *result++ = a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t BET3FXD__wave_t__convertFromF0ToTp(_DWORD *a1, unsigned int a2)
{
  if (a2) {
    return (unsigned __int16)((*a1 << 12) / a2);
  }
  else {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

uint64_t wave_t__convertFromF0ToTp_SR(unsigned int a1, int a2)
{
  if (a1) {
    return (unsigned __int16)((a2 << 12) / a1);
  }
  else {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

uint64_t BET3FXD__wave_t__convertFromTpToF0(_DWORD *a1, unsigned int a2)
{
  if (a2) {
    return (unsigned __int16)((*a1 << 12) / a2);
  }
  else {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

uint64_t BET3FXD__wave_t__convertFromMsecToTp(_DWORD *a1, int a2)
{
  return (unsigned __int16)((1049 * a2 * *a1) >> 14);
}

uint64_t BET3FXD__wave_t__sampleRateHz(unsigned int *a1)
{
  return *a1;
}

uint64_t BET3FXD__wave_t__setSampleRateHz(_DWORD *a1, uint64_t a2)
{
  if (!a1 || (int)a2 < 1) {
    return a2;
  }
  *a1 = a2;
  a1[1] = a2 >> 1;
  if ((int)a2 <= 11999)
  {
    if (a2 == 8000)
    {
      int v2 = 268435;
      goto LABEL_15;
    }
    if (a2 != 11025) {
      return a2;
    }
    unsigned __int16 v3 = -1825;
LABEL_13:
    int v2 = v3 | 0x20000;
    goto LABEL_15;
  }
  switch(a2)
  {
    case 0x2EE0:
      unsigned __int16 v3 = -17651;
      goto LABEL_13;
    case 0x3E80:
      unsigned __int16 v3 = 3146;
      goto LABEL_13;
    case 0x5622:
      int v2 = 97392;
LABEL_15:
      a1[2] = v2;
      break;
  }
  return a2;
}

uint64_t BET3FXD__MFVSyn__loadExcTable(uint64_t *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  char v39 = 0;
  int v37 = 0;
  *(_DWORD *)__s1 = 0;
  memset(v40, 0, sizeof(v40));
  __src = 0;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    if ((ssftriff_reader_OpenChunk(a2, (__int32 *)__s1, (unsigned int *)&v37, &__src) & 0x80000000) == 0
      && !cstdlib_strcmp(__s1, "EXHD"))
    {
      unsigned int v36 = 64;
      if ((ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, v37, 0, v40, &v36) & 0x80000000) == 0
        && (unint64_t)v36 + 16 >= v37)
      {
        __src = (char *)__src + v36;
        cstdlib_memmove(a1 + 59, __src, 4uLL);
        __src = (char *)__src + 4;
        uint64_t v5 = (__int16 *)(a1 + 61);
        cstdlib_memmove(a1 + 61, __src, 2uLL);
        __src = (char *)__src + 2;
        cstdlib_memmove((char *)a1 + 490, __src, 2uLL);
        __src = (char *)__src + 2;
        cstdlib_memmove((char *)a1 + 492, __src, 2uLL);
        __src = (char *)__src + 2;
        cstdlib_memmove((char *)a1 + 494, __src, 2uLL);
        __src = (char *)__src + 2;
        cstdlib_memmove(a1 + 62, __src, 2uLL);
        __src = (char *)__src + 2;
        cstdlib_memmove((char *)a1 + 498, __src, 2uLL);
        __src = (char *)__src + 2;
        if ((ssftriff_reader_CloseChunk(a2) & 0x80000000) == 0
          && (ssftriff_reader_OpenChunk(a2, (__int32 *)__s1, (unsigned int *)&v37, &__src) & 0x80000000) == 0
          && !cstdlib_strcmp(__s1, "EXDT"))
        {
          if (*((_WORD *)a1 + 249))
          {
            int __dst = 0;
            uint64_t v7 = heap_Calloc(*(void **)(*a1 + 8), *((unsigned int *)a1 + 118), 24);
            a1[60] = v7;
            if (v7)
            {
              uint64_t v8 = heap_Calloc(*(void **)(*a1 + 8), ((*((__int16 *)a1 + 246) + *((__int16 *)a1 + 244)) * *((_DWORD *)a1 + 118)), 2);
              char v9 = (uint64_t *)a1[60];
              *char v9 = v8;
              if (v8)
              {
                uint64_t v10 = *((unsigned int *)a1 + 118);
                if ((int)v10 > 1)
                {
                  uint64_t v11 = 2 * *v5;
                  uint64_t v12 = v8 + v11;
                  int v13 = v9 + 3;
                  uint64_t v14 = v10 - 1;
                  do
                  {
                    *int v13 = v12;
                    v13 += 3;
                    v12 += v11;
                    --v14;
                  }
                  while (v14);
                }
                if ((int)v10 < 1) {
                  return ((int)ssftriff_reader_CloseChunk(a2) >> 31);
                }
                uint64_t v15 = v9[3 * (v10 - 1)] + 2 * *v5;
                uint64_t v16 = 2 * *((__int16 *)a1 + 246);
                uint64_t v17 = v9 + 1;
                do
                {
                  *uint64_t v17 = v15;
                  v17 += 3;
                  v15 += v16;
                  --v10;
                }
                while (v10);
                uint64_t v18 = 0;
                uint64_t v19 = (char *)__src;
LABEL_24:
                cstdlib_memmove(*(void **)(a1[60] + 24 * v18), v19, 2 * (a1[61] & 0x7FFF));
                __int16 v20 = *((_WORD *)a1 + 244);
                int32x2_t v21 = (char *)__src + 2 * (v20 & 0x7FFF);
                __src = v21;
                for (int i = v20 & 0x7FFF; ; int i = v23)
                {
                  unsigned int v23 = i - 1;
                  if (i == 1)
                  {
                    __int16 v25 = 0;
                    uint64_t v24 = *(void *)(a1[60] + 24 * v18);
                  }
                  else
                  {
                    if (!i)
                    {
                      cstdlib_memmove(*(void **)(a1[60] + 24 * v18 + 8), v21, 2 * (*((_WORD *)a1 + 246) & 0x7FFF));
                      __int16 v26 = *((_WORD *)a1 + 246);
                      int v27 = (char *)__src + 2 * (v26 & 0x7FFF);
                      __src = v27;
                      for (int j = v26 & 0x7FFF; ; int j = v29)
                      {
                        unsigned int v29 = j - 1;
                        if (j == 1)
                        {
                          __int16 v31 = 0;
                          uint64_t v30 = *(void *)(a1[60] + 24 * v18 + 8);
                        }
                        else
                        {
                          if (!j)
                          {
                            cstdlib_memmove(&__dst, v27, 4uLL);
                            __src = (char *)__src + 4;
                            int v32 = __src;
                            uint64_t v33 = a1[60] + 24 * v18;
                            *(_DWORD *)(v33 + 16) = __dst;
                            cstdlib_memmove((void *)(v33 + 20), v32, 2uLL);
                            __src = (char *)__src + 2;
                            cstdlib_memmove((void *)(a1[60] + 24 * v18 + 22), __src, 2uLL);
                            uint64_t v19 = (char *)__src + 2;
                            __src = (char *)__src + 2;
                            if (++v18 >= *((int *)a1 + 118)) {
                              return ((int)ssftriff_reader_CloseChunk(a2) >> 31);
                            }
                            goto LABEL_24;
                          }
                          uint64_t v30 = *(void *)(a1[60] + 24 * v18 + 8);
                          __int16 v31 = *(_WORD *)(v30 + 2 * (j - 2));
                        }
                        *(_WORD *)(v30 + 2 * v29) ^= v31;
                      }
                    }
                    uint64_t v24 = *(void *)(a1[60] + 24 * v18);
                    __int16 v25 = *(_WORD *)(v24 + 2 * (i - 2));
                  }
                  *(_WORD *)(v24 + 2 * v23) ^= v25;
                }
              }
            }
          }
          else
          {
            uint64_t v6 = *(void *)a1[60];
            if (v6)
            {
              heap_Free(0, v6);
              heap_Free(0, a1[60]);
            }
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t BET3FXD__MFVSyn__releaseExcTable(void *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = (uint64_t *)a1[60];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  if (*v2)
  {
    heap_Free(*(void **)(*a1 + 8), *v2);
    int v2 = (uint64_t *)a1[60];
  }
  heap_Free(*(void **)(*a1 + 8), (uint64_t)v2);
  return 0;
}

uint64_t RccSyn__init_Synthesis(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v5 = 2164269062;
  long long v12 = xmmword_26D214B38;
  long long v13 = xmmword_26D214B28;
  *(void *)a2 = a1;
  if (!PRMBLK_CreateFromMRCC_Param(a1, 2, (void *)(a2 + 32), (uint64_t)&v13, (uint64_t)&v12, 0, a3, 1))
  {
    uint64_t v6 = *(uint64_t **)(a2 + 32);
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    *uint64_t v7 = a1;
    *uint64_t v6 = a1;
    uint64_t v8 = v7[1];
    if (!Mrcc2Rr_InitByProps(0, v6) && !Rr2Pcm_InitByProps(0, v7))
    {
      MrccInput_Init(a1, a2 + 48);
      int v9 = *(_DWORD *)(v8 + 24);
      if (v9 <= *(_DWORD *)(v8 + 28)) {
        int v9 = *(_DWORD *)(v8 + 28);
      }
      *(_DWORD *)(a2 + 260) = v9;
      RrInput_Init(a1, a2 + 160);
      *(_DWORD *)(a2 + 256) = *(_DWORD *)(v8 + 24);
      uint64_t v10 = heap_Alloc(*(void *)(a1 + 8), 2 * *(unsigned int *)(a2 + 260));
      *(void *)(a2 + 264) = v10;
      if (v10) {
        return 0;
      }
      else {
        return 2164269062;
      }
    }
  }
  return v5;
}

uint64_t *Mrcc2Rr_alloc_callback(uint64_t a1, uint64_t a2)
{
  return Mrcc2Rr_AllocateAndInit(a1, a2, 1);
}

uint64_t *Rr2Pcm_alloc_callback(uint64_t a1, int *a2)
{
  return Rr2Pcm_AllocateAndInit(a1, a2, 1);
}

uint64_t Mrcc2Rr_set_callback(int a1, uint64_t a2, char *__s1, unsigned __int8 *a4, char *a5)
{
  return Mrcc2Rr_SetProperty(*(_DWORD **)(a2 + 8), __s1, a4, a5);
}

BOOL Rr2Pcm_set_callback(int a1, uint64_t a2, char *a3, unsigned __int8 *a4)
{
  return Rr2Pcm_SetProperty(a1, *(void *)(a2 + 8), a3, a4);
}

uint64_t RccSyn__GetEnergy(uint64_t a1)
{
  return Mrcc2Rr_GetEnergy(*(void *)(a1 + 16), a1 + 48);
}

uint64_t RccSyn__SynthesisOneFrame(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = a1 + 160;
  RrInput_Reset(a1 + 160);
  if (Mrcc2Rr_ProcessFrame(v7, a1 + 48, v9)) {
    return 7;
  }
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(v8 + 24);
  if (Rr2Pcm_ProcessFrame(v6, v9, a1 + 248)) {
    return 10;
  }
  uint64_t result = 2164269062;
  if (a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      *a2 = *(_DWORD *)(a1 + 256);
      *a3 = *(void *)(a1 + 264);
    }
  }
  return result;
}

void *RccSyn__deinit_Synthesis(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    Mrcc2Rr_Deallocate(v2);
    *(void *)(a1 + 32) = 0;
  }
  unsigned __int16 v3 = *(void **)(a1 + 40);
  if (v3)
  {
    Rr2Pcm_Deallocate(v3);
    *(void *)(a1 + 40) = 0;
  }
  RrInput_DeallocateData((int *)(a1 + 160));
  MrccInput_DeallocateData((void *)(a1 + 48));
  uint64_t result = MrccInput_DeallocateData((void *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 264);
  if (v5)
  {
    uint64_t result = heap_Free(*(void **)(*(void *)a1 + 8), v5);
    *(void *)(a1 + 264) = 0;
  }
  return result;
}

uint64_t RccSyn__reset_Synthesis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v2.n128_f64[0] = Rr2Pcm_Reset(*(void *)(a1 + 40));

  return Mrcc2Rr_Reset(v1, v2);
}

uint64_t PRMBLK_ReadParameters(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  if (a3 != 2) {
    return 3;
  }
  uint64_t v85 = v4;
  uint64_t v86 = v5;
  uint64_t v9 = *(_DWORD **)(*a2 + 8);
  int v10 = a4[4];
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t result = 1;
    if (v10 <= 11024)
    {
      if (!v10)
      {
        v9[2] = 0;
        v9[4] = 0;
        goto LABEL_22;
      }
      if (v10 == 8000)
      {
LABEL_13:
        int v10 = v9[4];
        if (v10 <= 0)
        {
          int v10 = 256;
LABEL_20:
          v9[4] = v10;
        }
LABEL_22:
        v9[5] = (v10 >> 1) + 1;
        goto LABEL_23;
      }
      if (v10 != 11000) {
        return result;
      }
    }
    else
    {
      if (v10 > 21999)
      {
        if (v10 != 22050 && v10 != 22000) {
          return result;
        }
        v9[2] = 22000;
LABEL_18:
        int v10 = v9[4];
        if (v10 <= 0)
        {
          int v10 = 512;
          goto LABEL_20;
        }
        goto LABEL_22;
      }
      if (v10 != 11025)
      {
        if (v10 != 16000) {
          return result;
        }
        goto LABEL_18;
      }
    }
    v9[2] = 11000;
    goto LABEL_13;
  }
LABEL_23:
  unsigned int v12 = a4[73];
  if ((v12 & 0x80000000) == 0 && Mrcc2Rr_SetSampleRateDependentParams(v9, v9[2], v12)) {
    return 1;
  }
  int v13 = a4[6];
  if ((v13 & 0x80000000) == 0) {
    v9[3] = v13;
  }
  int v14 = a4[43];
  if ((v14 & 0x80000000) == 0) {
    v9[14] = v14;
  }
  int v15 = a4[44];
  if ((v15 & 0x80000000) == 0) {
    v9[6] = v15;
  }
  int v16 = a4[45];
  if ((v16 & 0x80000000) == 0) {
    v9[7] = v16;
  }
  int v17 = a4[5];
  if ((v17 & 0x80000000) == 0) {
    v9[8] = v17;
  }
  int v18 = a4[46];
  if ((v18 & 0x80000000) == 0) {
    v9[15] = v18;
  }
  int v19 = a4[8];
  if ((v19 & 0x80000000) == 0) {
    v9[9] = v19;
  }
  int v20 = a4[9];
  if ((v20 & 0x80000000) == 0) {
    v9[10] = v20;
  }
  int v21 = a4[47];
  if ((v21 & 0x80000000) == 0) {
    v9[11] = v21;
  }
  int v22 = a4[26];
  if ((v22 & 0x80000000) == 0) {
    v9[12] = v22;
  }
  int v23 = a4[7];
  if ((v23 & 0x80000000) == 0) {
    v9[13] = v23;
  }
  uint64_t v24 = *(void *)(a2[1] + 8);
  int v25 = a4[4];
  if (v25 < 0) {
    goto LABEL_84;
  }
  uint64_t result = 1;
  if (v25 > 15999)
  {
    int v26 = 16000;
    if (v25 == 16000)
    {
      *(_DWORD *)(v24 + 8) = 16000;
      int v27 = *(_DWORD *)(v24 + 12);
      int v28 = 512;
      if (v27 > 0)
      {
        int v29 = 0;
        int v30 = 160;
        int v31 = 80;
        goto LABEL_70;
      }
      int v29 = 0;
      *(_DWORD *)(v24 + 12) = 512;
      int v30 = 160;
      int v31 = 80;
    }
    else
    {
      if (v25 != 22050 && v25 != 22000) {
        return result;
      }
      int v26 = 22000;
      *(_DWORD *)(v24 + 8) = 22000;
      int v27 = *(_DWORD *)(v24 + 12);
      int v28 = 512;
      if (v27 > 0)
      {
        int v29 = 1;
        int v30 = 220;
        int v31 = 110;
        goto LABEL_70;
      }
      *(_DWORD *)(v24 + 12) = 512;
      int v29 = 1;
      int v30 = 220;
      int v31 = 110;
    }
    int v27 = 512;
    goto LABEL_70;
  }
  int v26 = 8000;
  if (v25 == 8000)
  {
    *(_DWORD *)(v24 + 8) = 8000;
    int v27 = *(_DWORD *)(v24 + 12);
    int v28 = 256;
    if (v27 > 0)
    {
      int v29 = 0;
      int v30 = 80;
      int v31 = 40;
      goto LABEL_70;
    }
    int v29 = 0;
    *(_DWORD *)(v24 + 12) = 256;
    int v30 = 80;
    int v31 = 40;
LABEL_67:
    int v27 = 256;
    goto LABEL_70;
  }
  int v26 = 11000;
  if (v25 != 11000 && v25 != 11025) {
    return result;
  }
  *(_DWORD *)(v24 + 8) = 11000;
  int v27 = *(_DWORD *)(v24 + 12);
  int v28 = 256;
  if (v27 <= 0)
  {
    int v29 = 0;
    *(_DWORD *)(v24 + 12) = 256;
    int v30 = 110;
    int v31 = 55;
    goto LABEL_67;
  }
  int v29 = 0;
  int v30 = 110;
  int v31 = 55;
LABEL_70:
  *(_DWORD *)(v24 + 44) = v30;
  unsigned int v32 = v27 >> 1;
  int v33 = *(_DWORD *)(v24 + 32);
  if (*(_DWORD *)(v24 + 28) < (signed int)(v27 >> 1)) {
    unsigned int v32 = *(_DWORD *)(v24 + 28);
  }
  *(_DWORD *)(v24 + 24) = v31;
  *(_DWORD *)(v24 + 28) = v32;
  if (v31 >= v33) {
    int v34 = v33;
  }
  else {
    int v34 = v31;
  }
  *(_DWORD *)(v24 + 32) = v34;
  if (*(_DWORD *)(v24 + 16) < v27) {
    int v27 = *(_DWORD *)(v24 + 16);
  }
  *(_DWORD *)(v24 + 16) = v27;
  *(_DWORD *)(v24 + 20) = v28;
  if (v29) {
    int v35 = 4;
  }
  else {
    int v35 = 0;
  }
  if (v29) {
    int v36 = 968;
  }
  else {
    int v36 = 1024;
  }
  *(_DWORD *)(v24 + 168) = v35;
  *(_DWORD *)(v24 + 172) = v36;
  Rr2Pcm_ProcessMvf_SetHbThr(v24 + 200, *(_DWORD *)(v24 + 136), v26);
LABEL_84:
  int v37 = *(_DWORD *)(v24 + 12);
  *(int8x8_t *)(v24 + 168) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_DWORD *)(v24 + 8) == 22000), 0x1FuLL)), (int8x8_t)0x3C800000004, (int8x8_t)0x40000000000);
  *(_DWORD *)(v24 + 44) = 2 * *(_DWORD *)(v24 + 24);
  if (v37 >= 0) {
    int v38 = v37;
  }
  else {
    int v38 = v37 + 1;
  }
  *(_DWORD *)(v24 + 288) = v38 >> 1;
  *(_DWORD *)(v24 + 284) = PositiveShortLog2((__int16)v37);
  int v39 = *(_DWORD *)(v24 + 12);
  *(_DWORD *)(v24 + 292) = v39;
  *(_DWORD *)(v24 + 296) = 440 * v39 / *(_DWORD *)(v24 + 44) / 256;
  Rr2Pcm_SetDerivedParams((int *)v24);
  uint64_t v40 = *(int *)(v24 + 8);
  uint64_t v41 = *(int *)(v24 + 12);
  *(_DWORD *)(v24 + 300) = 32 * v40 / v41;
  *(_DWORD *)(v24 + 304) = (v41 << 20) / (32 * v40);
  *(_DWORD *)(v24 + 308) = ((int)v40 + 860160 * *(_DWORD *)(v24 + 24)) / (2 * (int)v40);
  Rr2Pcm_ProcessMvf_SetHbThr(v24 + 200, *(_DWORD *)(v24 + 136), v40);
  int v42 = a4[10];
  if ((v42 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 24) = v42;
    Rr2Pcm_SetDerivedParams((int *)v24);
  }
  int v43 = a4[72];
  if ((v43 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 20) = v43;
  }
  int v44 = a4[11];
  if ((v44 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 184) = v44;
  }
  int v45 = a4[25];
  if ((v45 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 196) = v45;
    if (v45)
    {
      if (!*(_DWORD *)(v24 + 248))
      {
        __sprintf_chk(v84, 0, 3uLL, "%d", 3);
        if (Rr2Pcm_ProcessMvf_SetProperty(a1, v24 + 200, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN", (unsigned __int8 *)v84))return 2; {
      }
        }
    }
  }
  int v46 = a4[74];
  if ((v46 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 64) = v46;
  }
  int v47 = a4[13];
  if ((v47 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 76) = v47;
  }
  int v48 = a4[18];
  if ((v48 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 80) = v48;
  }
  int v49 = a4[17];
  if ((v49 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 84) = v49;
  }
  int v50 = a4[14];
  if ((v50 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 96) = v50;
  }
  int v51 = a4[19];
  if ((v51 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 100) = v51;
  }
  int v52 = a4[22];
  if ((v52 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 104) = 32 * v52;
  }
  int v53 = a4[23];
  if ((v53 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 108) = 32 * v53;
  }
  int v54 = a4[20];
  if ((v54 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 112) = 32 * v54;
  }
  int v55 = a4[21];
  if ((v55 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 116) = 32 * v55;
  }
  int v56 = a4[48];
  if ((v56 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 120) = v56;
    *(_DWORD *)(v24 + 124) = v56;
  }
  int v57 = a4[49];
  if ((v57 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 120) = v57;
  }
  int v58 = a4[50];
  if ((v58 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 124) = v58;
  }
  int v59 = a4[15];
  if ((v59 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 128) = v59;
  }
  int v60 = a4[16];
  if ((v60 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 132) = v60;
  }
  int v61 = a4[12];
  if ((v61 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 136) = v61;
    Rr2Pcm_ProcessMvf_SetHbThr(v24 + 200, v61, *(_DWORD *)(v24 + 8));
  }
  int v62 = a4[51];
  if ((v62 & 0x80000000) == 0)
  {
    *(_DWORD *)(v24 + 156) = v62;
    if (v62) {
      *(_WORD *)(v24 + 164) = 31785;
    }
  }
  int v63 = a4[52];
  if ((v63 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 268) = v63;
  }
  int v64 = a4[53];
  if ((v64 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 272) = v64;
  }
  int v65 = a4[46];
  if ((v65 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 280) = v65;
  }
  int v66 = a4[54];
  if ((v66 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 160) = v66;
  }
  int v67 = a4[55];
  if ((v67 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 144) = *(int *)(v24 + 12) * (uint64_t)v67 / (32 * *(int *)(v24 + 8));
  }
  int v68 = a4[56];
  if ((v68 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 148) = *(int *)(v24 + 12) * (uint64_t)v68 / (32 * *(int *)(v24 + 8));
  }
  int v69 = a4[57];
  if ((v69 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 140) = *(int *)(v24 + 12) * (uint64_t)v69 / (32 * *(int *)(v24 + 8));
  }
  int v70 = a4[24];
  if ((v70 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 60) = v70;
  }
  int v71 = a4[27];
  if ((v71 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 276) = v71;
  }
  if ((a4[33] & 0x80000000) == 0)
  {
    uint64_t v72 = *(void *)(v24 + 232);
    if (v72)
    {
      heap_Free(*(void **)(a1 + 8), v72);
      *(void *)(v24 + 232) = 0;
    }
    int v73 = (void *)heap_Alloc(*(void *)(a1 + 8), 12);
    *(void *)(v24 + 232) = v73;
    if (!v73) {
      return 2;
    }
    cstdlib_memset(v73, 0, 0xCuLL);
    *(_DWORD *)(v24 + 248) = 3;
  }
  int v74 = a4[34];
  if ((v74 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 220) = v74;
  }
  int v75 = a4[35];
  if ((v75 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 216) = v75;
  }
  int v76 = a4[36];
  if ((v76 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 208) = v76;
  }
  int v77 = a4[37];
  if ((v77 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 252) = v77;
  }
  int v78 = a4[38];
  if ((v78 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 256) = v78;
  }
  int v79 = a4[67];
  if ((v79 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 28) = v79;
  }
  int v80 = a4[68];
  if ((v80 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 32) = v80;
  }
  int v81 = a4[69];
  if ((v81 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 16) = v81;
  }
  int v82 = a4[70];
  if ((v82 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 36) = v82;
  }
  int v83 = a4[71];
  uint64_t result = 0;
  if ((v83 & 0x80000000) == 0) {
    *(_DWORD *)(v24 + 40) = v83;
  }
  return result;
}

uint64_t PRMBLK_CreateFromMRCC_Param(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(void, _DWORD *), _DWORD *a7, int a8)
{
  uint64_t v9 = a3;
  if (a2 <= 0)
  {
    return PRMBLK_ReadParameters(a1, a3, a2, a7);
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v16 = 8 * a2;
    uint64_t v17 = a2;
    do
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t, _DWORD *))(a4 + v15))(a1, a7);
      v9[v15 / 8] = v18;
      if (!v18) {
        return 4;
      }
      v15 += 8;
    }
    while (v16 != v15);
    uint64_t result = PRMBLK_ReadParameters(a1, v9, a2, a7);
    if (a6)
    {
      do
      {
        int v20 = (*a6)(*v9, a7);
        if (v20) {
          BOOL v21 = a8 == 0;
        }
        else {
          BOOL v21 = 0;
        }
        if (v21) {
          return 3;
        }
        ++v9;
        ++a6;
        --v17;
      }
      while (v17);
      if (v20) {
        return 3;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Mrcc2Rr_SetProperty(_DWORD *a1, char *__s1, unsigned __int8 *a3, char *a4)
{
  if (!cstdlib_strcmp(__s1, "PROD_CODE"))
  {
    int v8 = cstdlib_atoi(a3);
    if (Mrcc2Rr_SetSampleRateDependentParams(a1, v8, a1[4])) {
      return 1;
    }
  }
  cstdlib_strcpy(a4, "");
  return 0;
}

uint64_t Mrcc2Rr_SetSampleRateDependentParams(_DWORD *a1, int a2, unsigned int a3)
{
  uint64_t v3 = 1;
  if (a2 <= 11024)
  {
    if (!a2)
    {
      unsigned int v7 = 0;
      a1[2] = 0;
LABEL_20:
      uint64_t v3 = 0;
      a1[4] = v7;
      a1[5] = (v7 >> 1) + 1;
      return v3;
    }
    if (a2 == 8000)
    {
      a1[2] = 8000;
      goto LABEL_16;
    }
    if (a2 != 11000) {
      return v3;
    }
LABEL_9:
    a1[2] = 11000;
LABEL_16:
    BOOL v5 = __OFSUB__(a3, 1);
    BOOL v4 = (int)(a3 - 1) < 0;
    int v6 = 256;
LABEL_17:
    if (v4 != v5) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = a3;
    }
    goto LABEL_20;
  }
  if (a2 <= 21999)
  {
    if (a2 != 11025)
    {
      if (a2 == 16000)
      {
        a1[2] = 16000;
LABEL_13:
        BOOL v5 = __OFSUB__(a3, 1);
        BOOL v4 = (int)(a3 - 1) < 0;
        int v6 = 512;
        goto LABEL_17;
      }
      return v3;
    }
    goto LABEL_9;
  }
  if (a2 == 22050 || a2 == 22000)
  {
    a1[2] = 22000;
    goto LABEL_13;
  }
  return v3;
}

uint64_t *Mrcc2Rr_AllocateAndInit(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (uint64_t *)heap_Calloc(*(void **)(a1 + 8), 1, 32);
  if (v6)
  {
    Mrcc2Rr_Init(a1, a2, v6, a3);
    if (v7)
    {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
      return 0;
    }
  }
  return v6;
}

void Mrcc2Rr_Init(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  *a3 = a1;
  int v8 = (void *)heap_Alloc(*(void *)(a1 + 8), 64);
  a3[1] = (uint64_t)v8;
  if (v8)
  {
    cstdlib_memset(v8, 0, 0x40uLL);
    uint64_t v9 = (void *)heap_Alloc(*(void *)(a1 + 8), 64);
    a3[2] = (uint64_t)v9;
    if (v9)
    {
      cstdlib_memset(v9, 0, 0x40uLL);
      int v10 = (void *)heap_Alloc(*(void *)(a1 + 8), 176);
      a3[3] = (uint64_t)v10;
      if (v10)
      {
        uint64_t v11 = cstdlib_memset(v10, 0, 0xB0uLL);
        Mrcc2Rr_InitProps((uint64_t)v11, a2, a3[1]);
        if (!(v12 | a4))
        {
          int v13 = (int *)a3[1];
          Mrcc2Rr_InitByProps(v13, a3);
        }
      }
    }
  }
}

double Mrcc2Rr_InitProps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    LODWORD(a2) = *(_DWORD *)(a2 + 16);
  }
  if (!Mrcc2Rr_SetSampleRateDependentParams((_DWORD *)a3, a2, 0))
  {
    *(_DWORD *)(a3 + 12) = -1;
    *(_OWORD *)(a3 + 24) = xmmword_220776180;
    *(_OWORD *)(a3 + 40) = xmmword_220776190;
    *(void *)&double result = 0x100000018;
    *(void *)(a3 + 56) = 0x100000018;
  }
  return result;
}

uint64_t Mrcc2Rr_InitByProps(int *a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    a2[1] = (uint64_t)a1;
  }
  else
  {
    uint64_t v3 = (int *)a2[1];
  }
  uint64_t v4 = a2[2];
  BOOL v5 = (int *)a2[3];
  if (!v3[7] && !v3[6]) {
    return 1;
  }
  if (!Init_SinTable(*a2, a2[2], 0)) {
    Init_MelTable(*a2, v4 + 32, 0, v3[2]);
  }
  if (!v3[7]) {
    return 0;
  }
  uint64_t result = Mrcc_InitByProps(*a2, v5, v4, (uint64_t)v3, 0);
  if (!result) {
    return 0;
  }
  return result;
}

double MrccInput_Init(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  double result = 0.0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_220774290;
  *(_OWORD *)(a2 + 32) = xmmword_2207761A0;
  return result;
}

uint64_t MrccInput_AllocateData(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2) {
    BOOL v3 = v2 < (int)a2;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v6);
    *(void *)(a1 + 8) = 0;
  }
  int v7 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * a2);
  *(void *)(a1 + 8) = v7;
  if (!v7) {
    return 2;
  }
  cstdlib_memset(v7, 0, 4 * a2);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 16) = a2;
  return result;
}

void *MrccInput_DeallocateData(void *result)
{
  if (*((_DWORD *)result + 12))
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t result = heap_Free(*(void **)(*result + 8), v2);
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t Mrcc2Rr_GetEnergy(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) + 56);
  if (v2 < 12) {
    return ipow2(**(_DWORD **)(a2 + 8) << (11 - v2));
  }
  else {
    return ipow2((**(int **)(a2 + 8) >> (v2 - 11))+ (((unint64_t)**(int **)(a2 + 8) >> (v2 - 12)) & 1));
  }
}

uint64_t Mrcc2Rr_ProcessFrame(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (_DWORD *)a1[1];
  int v7 = (int *)a1[3];
  int v8 = v6[7];
  int v9 = v6[3];
  if (v9 < 1)
  {
    if (v8) {
      goto LABEL_12;
    }
    return 1;
  }
  int v10 = *(_DWORD *)(a2 + 16);
  if (v10 != v9 && v10 > 0 || v8 == 0) {
    return 1;
  }
LABEL_12:
  int v14 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a3 + 76) = v14;
  *(_DWORD *)(a3 + 64) = -1;
  int v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a3 + 44) = v15;
  *(_DWORD *)(a3 + 48) = v15;
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(a3 + 56) = v16;
  *(_DWORD *)(a3 + 80) = *(_DWORD *)(a2 + 32);
  if (v15)
  {
    int v17 = v6[6];
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v17;
    if (v16)
    {
      int v18 = v6[2];
      int v19 = v18 + (((v15 + 2097152000) / (2 * v15)) << 6);
LABEL_18:
      int v20 = v19 / (2 * v18);
      goto LABEL_19;
    }
LABEL_17:
    int v18 = v6[2];
    int v19 = v18 + (v15 << 9);
    goto LABEL_18;
  }
  int v17 = v6[6] & *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 12) = v17;
  if (!v16) {
    goto LABEL_17;
  }
  int v20 = 0;
LABEL_19:
  BOOL v21 = *(_DWORD **)(a2 + 8);
  int v22 = *(_DWORD *)(a2 + 16);
  int v23 = *(_DWORD *)(a2 + 36);
  v7[7] = v14;
  v7[8] = v23;
  uint64_t result = Mrcc_PutHarmFrqs((uint64_t)v7, v20, 0x4000, v6[13]);
  if (result) {
    return result;
  }
  uint64_t result = Mrcc_PutCoefs(v7, v21, v22, 0);
  if (result) {
    return result;
  }
  uint64_t v24 = *(void *)(a3 + 24);
  if (v24)
  {
    if (*(_DWORD *)(a3 + 72) >= v7[26]) {
      goto LABEL_27;
    }
    heap_Free(*(void **)(*a1 + 8), v24);
    *(void *)(a3 + 24) = 0;
  }
  int v25 = (void *)heap_Alloc(*(void *)(*a1 + 8), 4 * v7[23]);
  *(void *)(a3 + 24) = v25;
  if (!v25) {
    return 2;
  }
  cstdlib_memset(v25, 0, 4 * v7[23]);
  *(_DWORD *)(a3 + 72) = v7[23];
LABEL_27:
  if (!v17)
  {
    *(_DWORD *)(a3 + 40) = v7[26];
    Mrcc_Enhance((uint64_t)v7);
    goto LABEL_37;
  }
  uint64_t v26 = *(void *)(a3 + 32);
  if (v26)
  {
    int v27 = v7[26];
    if (*(_DWORD *)(a3 + 68) >= v27) {
      goto LABEL_33;
    }
    heap_Free(*(void **)(*a1 + 8), v26);
    *(void *)(a3 + 32) = 0;
  }
  int v28 = (void *)heap_Alloc(*(void *)(*a1 + 8), 4 * v7[23]);
  *(void *)(a3 + 32) = v28;
  if (!v28) {
    return 2;
  }
  cstdlib_memset(v28, 0, 4 * v7[23]);
  *(_DWORD *)(a3 + 68) = v7[23];
  int v27 = v7[26];
LABEL_33:
  *(_DWORD *)(a3 + 40) = v27;
  Mrcc_Enhance((uint64_t)v7);
  if (*(_DWORD *)(a2 + 44))
  {
LABEL_37:
    int v29 = 0;
    goto LABEL_38;
  }
  int v29 = 2;
LABEL_38:

  return Mrcc_Solve_AmpPhase((uint64_t)v7, (void **)a3, v29, 1);
}

void *Mrcc2Rr_Deallocate(void *a1)
{
  uint64_t result = Mrcc2Rr_Clear(a1);
  if (a1)
  {
    BOOL v3 = *(void **)(*a1 + 8);
    return heap_Free(v3, (uint64_t)a1);
  }
  return result;
}

void *Mrcc2Rr_Clear(void *a1)
{
  if (*(_DWORD *)(a1[1] + 28)) {
    Mrcc_Clear((void *)*a1, (void *)a1[3]);
  }
  uint64_t v2 = a1[2];
  Deinit_SinTable(*a1, v2);
  uint64_t result = (void *)Deinit_MelTable(*a1, v2 + 32);
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v4);
    a1[1] = 0;
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v5);
    a1[2] = 0;
  }
  uint64_t v6 = a1[3];
  if (v6)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v6);
    a1[3] = 0;
  }
  return result;
}

uint64_t Init_MelTable(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(_DWORD *)(a2 + 24) = 0;
  if (a3) {
    int v4 = a3 + 1;
  }
  else {
    int v4 = 1025;
  }
  *(_DWORD *)(a2 + 16) = v4;
  unsigned int v5 = a3 & 0xFFFFFBFF;
  if ((a3 & 0xFFFFFBFF) == 0 && a4 == 22000)
  {
    uint64_t v6 = &alMelFrq_Q15_22000_1024;
LABEL_16:
    uint64_t result = 0;
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = &alNrmFrq_Q15_1024;
    *(_DWORD *)(a2 + 20) = 16;
    return result;
  }
  if (!v5 && a4 == 11000)
  {
    uint64_t v6 = &alMelFrq_Q15_11000_1024;
    goto LABEL_16;
  }
  if (!v5 && a4 == 16000)
  {
    uint64_t v6 = &alMelFrq_Q15_16000_1024;
    goto LABEL_16;
  }
  uint64_t result = 7;
  if (!v5 && a4 == 8000)
  {
    uint64_t v6 = &alMelFrq_Q15_8000_1024;
    goto LABEL_16;
  }
  return result;
}

uint64_t Get_MelValue(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = a2 / *(_DWORD *)(a1 + 20) + 1;
  unsigned int v5 = *(unsigned int **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v4;
  return GetInterpolatedValue(v6, v5, v3, a2, (_DWORD *)(a1 + 24), 0);
}

uint64_t Get_MelValues(uint64_t result, int *a2, _DWORD *a3, int a4)
{
  *(_DWORD *)(result + 24) = 0;
  int v4 = (_DWORD *)(result + 24);
  if (a4 >= 1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a4;
    do
    {
      int v9 = *a2++;
      uint64_t result = GetInterpolatedValue(*(void *)(v7 + 8), *(unsigned int **)v7, *(_DWORD *)(v7 + 16), v9, v4, 0);
      *a3++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t Mrcc_SetProperty(int *a1, char *__s1, char *a3)
{
  if (cstdlib_strcmp(__s1, "SIZE"))
  {
    if (!cstdlib_strcmp(__s1, "ENERGY_MODE"))
    {
      if (cstdlib_strcmp(a3, "EN_RR_ENV"))
      {
        if (cstdlib_strcmp(a3, "EN_RR"))
        {
          if (cstdlib_strcmp(a3, "EN_C0")) {
            return 1;
          }
          int v7 = 2;
        }
        else
        {
          int v7 = 1;
        }
      }
      else
      {
        int v7 = 3;
      }
      a1[6] = v7;
    }
  }
  else
  {
    *a1 = cstdlib_atoi((unsigned __int8 *)a3);
  }
  int v8 = a1[6];
  if (v8)
  {
    if (v8 == 3) {
      int v9 = *a1 - 2;
    }
    else {
      int v9 = *a1 - 1;
    }
  }
  else
  {
    int v9 = *a1;
  }
  uint64_t result = 0;
  a1[1] = v9;
  return result;
}

uint64_t Mrcc_InitByProps(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5)
{
  a2[40] = *(_DWORD *)(a4 + 60);
  if (a5) {
    return 1;
  }
  unsigned int v7 = *(_DWORD *)(a4 + 32);
  unsigned int v8 = *(_DWORD *)(a4 + 52);
  a2[42] = *(_DWORD *)(a4 + 56);
  long long v9 = *(_OWORD *)(a4 + 36);
  uint64_t v10 = *(unsigned int *)(a4 + 20);
  unsigned int v12 = *(_DWORD *)(a4 + 8);
  int v11 = *(_DWORD *)(a4 + 12);
  *((void *)a2 + 16) = a3;
  *((void *)a2 + 17) = a3 + 32;
  *a2 = v11;
  if (v11 < 1) {
    return 8;
  }
  *(void *)&double v14 = v11 | 0xFFFFFFFF00000000;
  HIDWORD(v15) = 1;
  LODWORD(v15) = v11 - 2;
  if (v7 != 3) {
    *(void *)&double v15 = (v11 - 1);
  }
  if (v7) {
    double v14 = v15;
  }
  *(double *)(a2 + 1) = v14;
  a2[6] = v7;
  *(_OWORD *)(a2 + 9) = v9;
  a2[13] = 5;
  signed int v16 = 2 * v10 - 2;
  a2[23] = v10;
  a2[24] = v16;
  a2[25] = PositiveShortLog2((__int16)(2 * v10 - 2));
  int v17 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * *a2);
  *((void *)a2 + 2) = v17;
  if (!v17) {
    return 2;
  }
  cstdlib_memset(v17, 0, 4 * *a2);
  int v18 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 7) = v18;
  if (!v18) {
    return 2;
  }
  cstdlib_memset(v18, 0, 4 * v10);
  int v19 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 8) = v19;
  if (!v19) {
    return 2;
  }
  cstdlib_memset(v19, 0, 4 * v10);
  int v20 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 9) = v20;
  if (!v20) {
    return 2;
  }
  cstdlib_memset(v20, 0, 4 * v10);
  BOOL v21 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v10);
  *((void *)a2 + 10) = v21;
  if (!v21) {
    return 2;
  }
  cstdlib_memset(v21, 0, 4 * v10);
  int v22 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * (a2[24] + 2));
  *((void *)a2 + 18) = v22;
  if (!v22) {
    return 2;
  }
  cstdlib_memset(v22, 0, 4 * (a2[24] + 2));
  int v23 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * (a2[24] + 2));
  *((void *)a2 + 19) = v23;
  if (!v23) {
    return 2;
  }
  cstdlib_memset(v23, 0, 4 * (a2[24] + 2));
  a2[28] = v12;
  a2[29] = 0x4000;
  a2[30] = v8;
  a2[31] = 0x8000;
  uint64_t v24 = (int *)*((void *)a2 + 10);
  if ((int)v10 >= 1)
  {
    int v25 = 0;
    uint64_t v26 = (_DWORD *)*((void *)a2 + 10);
    uint64_t v27 = v10;
    do
    {
      *v26++ = v25;
      v25 += ((int)v10 + 0x7FFF) / v16;
      --v27;
    }
    while (v27);
  }
  warpFreqs((uint64_t)a2, v24, *((_DWORD **)a2 + 9), v10, a2 + 22);
  return 0;
}

uint64_t Mrcc_PutCoefs(int *a1, _DWORD *a2, int a3, int a4)
{
  uint64_t result = 6;
  if (a2 && a3 >= 1)
  {
    int v6 = *a1;
    if (*a1 < 1 || v6 == a3)
    {
      if (a4)
      {
        if (v6 >= 1)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *((void *)a1 + 2);
          do
          {
            *(_DWORD *)(v9 + 4 * v8) = -a2[v8];
            ++v8;
          }
          while (v8 < *a1);
        }
      }
      else
      {
        cstdlib_memcpy(*((void **)a1 + 2), a2, 4 * v6);
      }
      uint64_t v20 = 0;
      int v10 = a1[42];
      LODWORD(v11) = a1[2];
      char v12 = v10 - 13;
      if (v10 >= 13 && (v11 & 0x80000000) == 0)
      {
        uint64_t v13 = 0;
        char v14 = v10 - 12;
        uint64_t v15 = *((void *)a1 + 2);
        uint64_t v16 = 1 << v12;
        do
        {
          uint64_t v17 = *(int *)(v15 + 4 * v13);
          if ((v16 & v17) != 0) {
            int v18 = ((int)v17 >> v14) + 1;
          }
          else {
            int v18 = (int)v17 >> v14;
          }
          *(_DWORD *)(v15 + 4 * v13) = v18;
          uint64_t v11 = a1[2];
        }
        while (v13++ < v11);
      }
      ScaleTo16BitSignedRange((int *)(*((void *)a1 + 2) + 4 * (int)v11 + 4), a1[1], (int *)&v20 + 1, (int *)&v20, 0, 0);
      uint64_t result = 0;
      a1[41] = v20 - HIDWORD(v20);
    }
    else
    {
      return 5;
    }
  }
  return result;
}

uint64_t Mrcc_PutFrqs(uint64_t a1, const void *a2, int a3, int a4, int a5)
{
  uint64_t v6 = *(int *)(a1 + 92);
  if ((int)v6 >= a3) {
    signed int v7 = a3;
  }
  else {
    signed int v7 = v6 - 1;
  }
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 116) = a4;
  *(_DWORD *)(a1 + 120) = a5;
  uint64_t v8 = *(void **)(a1 + 56);
  if (v6 == v7)
  {
    cstdlib_memcpy(v8, *(const void **)(a1 + 80), 4 * v6);
    cstdlib_memcpy(*(void **)(a1 + 64), *(const void **)(a1 + 72), 4 * *(int *)(a1 + 108));
  }
  else
  {
    cstdlib_memcpy(v8, a2, 4 * v7);
    warpFreqs(a1, 0, 0, v7, (_DWORD *)(a1 + 108));
  }
  return 0;
}

uint64_t warpFreqs(uint64_t result, int *a2, _DWORD *a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v6 = result;
  unsigned int v7 = *(_DWORD *)(result + 92);
  if ((int)v7 >= (int)a4) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = v7;
  }
  if (a2)
  {
    if (a3) {
      goto LABEL_6;
    }
  }
  else
  {
    a2 = *(int **)(result + 56);
    if (a3) {
      goto LABEL_6;
    }
  }
  a3 = *(_DWORD **)(result + 64);
LABEL_6:
  if (*(_DWORD *)(result + 120) == 1)
  {
    uint64_t v9 = *(void *)(result + 136);
    int v10 = *(_DWORD *)(v6 + 116);
    if (v10 < 0x4000)
    {
      if ((int)v8 < 1)
      {
        LODWORD(v8) = 0;
      }
      else
      {
        uint64_t v11 = 0;
        while (a2[v11] <= v10)
        {
          if (v8 == ++v11) {
            goto LABEL_19;
          }
        }
        LODWORD(v8) = v11;
      }
    }
LABEL_19:
    uint64_t result = Get_MelValues(v9, a2, a3, v8);
    if (a5) {
      goto LABEL_20;
    }
  }
  else
  {
    LODWORD(v8) = 0;
    if (a5) {
LABEL_20:
    }
      *a5 = v8;
  }
  return result;
}

uint64_t Mrcc_PutHarmFrqs(uint64_t a1, int a2, int a3, int a4)
{
  if (a2)
  {
    int v5 = *(_DWORD *)(a1 + 92) - 1;
    if (v5 >= a3 / a2 + 1) {
      int v6 = a3 / a2 + 1;
    }
    else {
      int v6 = *(_DWORD *)(a1 + 92) - 1;
    }
    *(_DWORD *)(a1 + 108) = v6;
    if (v5 >= 0x4000 / a2 + 1) {
      int v5 = 0x4000 / a2 + 1;
    }
    *(_DWORD *)(a1 + 104) = v5;
    *(_DWORD *)(a1 + 116) = a3;
    *(_DWORD *)(a1 + 120) = a4;
    unsigned int v7 = *(_DWORD **)(a1 + 56);
    *unsigned int v7 = 0;
    LODWORD(v8) = *(_DWORD *)(a1 + 104);
    if ((int)v8 >= 2)
    {
      uint64_t v9 = 1;
      int v10 = a2;
      do
      {
        v7[v9++] = v10;
        uint64_t v8 = *(int *)(a1 + 104);
        v10 += a2;
      }
      while (v9 < v8);
    }
    warpFreqs(a1, 0, 0, v8, (_DWORD *)(a1 + 108));
  }
  else
  {
    if (a3 == 0x4000)
    {
      int v11 = *(_DWORD *)(a1 + 92);
      int v12 = v11;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 92);
      int v13 = 2 * a3 * (v11 - 1) + 0x7FFF;
      if (((a3 * (v11 - 1)) & 0x40000000) == 0) {
        int v13 = 2 * a3 * (v11 - 1);
      }
      int v12 = (v13 >> 15) + 1;
    }
    *(_DWORD *)(a1 + 104) = v11;
    *(_DWORD *)(a1 + 108) = v12;
    *(_DWORD *)(a1 + 116) = a3;
    *(_DWORD *)(a1 + 120) = a4;
    cstdlib_memcpy(*(void **)(a1 + 56), *(const void **)(a1 + 80), 4 * v11);
    cstdlib_memcpy(*(void **)(a1 + 64), *(const void **)(a1 + 72), 4 * *(int *)(a1 + 88));
  }
  return 0;
}

void *Mrcc_Clear(void *result, void *a2)
{
  if (a2)
  {
    int v3 = result;
    uint64_t v4 = a2[2];
    if (v4)
    {
      uint64_t result = heap_Free((void *)result[1], v4);
      a2[2] = 0;
    }
    uint64_t v5 = a2[8];
    if (v5)
    {
      uint64_t result = heap_Free((void *)v3[1], v5);
      a2[8] = 0;
    }
    uint64_t v6 = a2[9];
    if (v6)
    {
      uint64_t result = heap_Free((void *)v3[1], v6);
      a2[9] = 0;
    }
    uint64_t v7 = a2[10];
    if (v7)
    {
      uint64_t result = heap_Free((void *)v3[1], v7);
      a2[10] = 0;
    }
    uint64_t v8 = a2[7];
    if (v8)
    {
      uint64_t result = heap_Free((void *)v3[1], v8);
      a2[7] = 0;
    }
    uint64_t v9 = a2[18];
    if (v9)
    {
      uint64_t result = heap_Free((void *)v3[1], v9);
      a2[18] = 0;
    }
    uint64_t v10 = a2[19];
    if (v10)
    {
      uint64_t result = heap_Free((void *)v3[1], v10);
      a2[19] = 0;
    }
  }
  return result;
}

uint64_t Mrcc_Enhance(uint64_t result)
{
  if (*(_DWORD *)(result + 104) >= *(_DWORD *)(result + 92)) {
    uint64_t v1 = 40;
  }
  else {
    uint64_t v1 = 36;
  }
  if (*(_DWORD *)(result + 24))
  {
    uint64_t v2 = *(int *)(result + 8);
    if (*(_DWORD *)(result + 36) != 0x8000 && *(int *)(result + 4) >= 1)
    {
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(result + v1);
      if (v4 >= 0) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = -v4;
      }
      int v6 = v5 & 0x7FFF;
      unsigned int v7 = v5 >> 15;
      uint64_t v8 = *(void *)(result + 16) + 4 * v2 + 4;
      signed int v9 = 0x8000;
      do
      {
        if (v9 >= 0) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = -v9;
        }
        int v11 = (v9 >> 31) | 1;
        if (v4 < 0) {
          int v11 = -v11;
        }
        signed int v9 = ((v10 >> 15) * v6 + (((v10 & 0x7FFF) * v6 + 0x4000) >> 15) + v10 * v7) * v11;
        int v12 = *(_DWORD *)(v8 + 4 * v3);
        if (v12 >= 0) {
          unsigned int v13 = *(_DWORD *)(v8 + 4 * v3);
        }
        else {
          unsigned int v13 = -v12;
        }
        int v14 = (v12 >> 31) | 1;
        if (v9 >= 0) {
          unsigned int v15 = v9;
        }
        else {
          unsigned int v15 = -v9;
        }
        if (v9 < 0) {
          int v14 = -v14;
        }
        *(_DWORD *)(v8 + 4 * v3++) = ((v13 >> 15) * (v15 & 0x7FFF)
                                    + (((v13 & 0x7FFF) * (v15 & 0x7FFF) + 0x4000) >> 15)
                                    + v13 * (v15 >> 15))
                                   * v14;
      }
      while (v3 < *(int *)(result + 4));
    }
    if (*(_DWORD *)(result + 44) != 0x8000 && *(int *)(result + 4) >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(result + 16) + 4 * v2 + 4;
      do
      {
        int v18 = *(_DWORD *)(v17 + 4 * v16);
        if (v18 >= 0) {
          unsigned int v19 = *(_DWORD *)(v17 + 4 * v16);
        }
        else {
          unsigned int v19 = -v18;
        }
        int v20 = (v18 >> 31) | 1;
        int v21 = *(_DWORD *)(result + 44);
        BOOL v22 = v21 < 0;
        if (v21 < 0) {
          int v21 = -v21;
        }
        if (v22) {
          int v20 = -v20;
        }
        *(_DWORD *)(v17 + 4 * v16++) = ((v21 & 0x7FFF) * (v19 >> 15)
                                      + (((v21 & 0x7FFF) * (v19 & 0x7FFF) + 0x4000) >> 15)
                                      + v19 * (v21 >> 15))
                                     * v20;
      }
      while (v16 < *(int *)(result + 4));
    }
    int v23 = *(_DWORD *)(result + 48);
    if (v23 != 0x8000)
    {
      int v24 = *(_DWORD *)(result + 104);
      int v25 = *(_DWORD *)(result + 92);
      int v26 = *(_DWORD *)(result + 28);
      if (v26 < 1 || (int v27 = *(_DWORD *)(result + 52), v26 > v27) || v24 == v25)
      {
        if (v24 != v25) {
          int v23 = 0x8000;
        }
      }
      else
      {
        v23 += v26 * (0x8000 - v23) / (v27 + 1);
      }
      *(_DWORD *)(result + 32) = v23;
    }
  }
  return result;
}

uint64_t Mrcc_Solve_AmpPhase(uint64_t a1, void **a2, int a3, int a4)
{
  signed int v7 = *((_DWORD *)a2 + 10);
  if (a3 == 1) {
    int v8 = 0;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 24);
  }
  unsigned int v9 = *(_DWORD *)(a1 + 108);
  if ((int)v9 >= v7) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t result = 1;
  if (a4 && (v8 & 0xFFFFFFFD) == 1)
  {
    int v12 = (int *)a2[3];
    uint64_t v14 = *(int *)(a1 + 4);
    uint64_t v13 = *(int *)(a1 + 8);
    if (*(_DWORD *)(a1 + 104) < v7) {
      signed int v7 = *(_DWORD *)(a1 + 104);
    }
    size_t v15 = 4 * v7;
    if (!a3 || (cstdlib_memset(a2[4], 0, 4 * v7), a3 != 1)) {
      cstdlib_memset(v12, 0, v15);
    }
    uint64_t result = 1;
    *((_DWORD *)a2 + 4) = 1;
    if (v8 != 2)
    {
      int v16 = ipow2(**(_DWORD **)(a1 + 16) / 2);
      if (v16 >= 0) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = -v16;
      }
      int v18 = *(_DWORD *)(a1 + 32);
      BOOL v19 = v18 < 0;
      if (v18 < 0) {
        int v18 = -v18;
      }
      if (v19) {
        int v20 = -((v16 >> 31) | 1);
      }
      else {
        int v20 = (v16 >> 31) | 1;
      }
      *((_DWORD *)a2 + 16) = ((v18 & 0x7FFF) * (v17 >> 15)
                            + (((v18 & 0x7FFF) * (v17 & 0x7FFF) + 0x4000) >> 15)
                            + v17 * (v18 >> 15))
                           * v20;
      if (*(_DWORD *)(a1 + 104) == *(_DWORD *)(a1 + 92))
      {
        int v21 = *(_DWORD **)(a1 + 144);
        *int v21 = 0;
        cstdlib_memcpy(v21 + 1, (const void *)(*(void *)(a1 + 16) + 4 * v13 + 4), 4 * *(int *)(a1 + 4));
        cstdlib_memset((void *)(*(void *)(a1 + 144) + 4 * (v14 + 1)), 0, 4 * (*(_DWORD *)(a1 + 96) - ((int)v14 + 1)));
        BOOL v22 = (__int16 *)call_cfsv_construct((uint64_t)*a2, *(void *)(a1 + 144), *(_WORD *)(a1 + 96), 15);
        if (v22)
        {
          int v23 = (unsigned __int16 *)v22;
          call_cfsv_rfft(v22, *(__int16 *)(a1 + 96));
          call_cfsv_changeOutputSampleOrder(v23, *(_DWORD **)(a1 + 152));
          call_cfsv_destruct(*a2, (uint64_t)v23);
        }
        uint64_t v24 = *(void *)(a1 + 144);
        *(_DWORD *)(v24 + 4 * *(int *)(a1 + 96)) = *(_DWORD *)(v24 + 4);
        if ((int)v10 < 1) {
          return 0;
        }
        int v25 = *(int **)(a1 + 64);
        uint64_t v26 = v10;
        int v27 = v12;
        do
        {
          uint64_t v28 = *v25++;
          *v27++ = 2
                 * *(_DWORD *)(v24
                             + 4
                             * (int)(2
                                   * (((1 << (14 - *(_DWORD *)(a1 + 100))) + v28) >> (15 - *(_DWORD *)(a1 + 100)))));
          --v26;
        }
        while (v26);
        int v29 = *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 164) - 12;
        if (v29 >= 1)
        {
          uint64_t v30 = 1 << (*(unsigned char *)(a1 + 168) + *(unsigned char *)(a1 + 164) - 13);
          do
          {
            *int v12 = (v30 + *v12) >> v29;
            ++v12;
            --v10;
          }
          while (v10);
          return 0;
        }
        int v74 = 12 - (*(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 164));
        uint64_t result = 0;
        do
        {
          *v12++ <<= v74;
          --v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v31 = *(int *)(a1 + 8);
        LODWORD(v32) = *((_DWORD *)a2 + 10);
        int v34 = (int *)a2[3];
        int v33 = (unsigned int *)a2[4];
        int v35 = *(_DWORD *)(a1 + 108);
        if (v35 >= (int)v32) {
          uint64_t v32 = v32;
        }
        else {
          uint64_t v32 = v35;
        }
        int v36 = *(_DWORD *)(a1 + 164) + *(_DWORD *)(a1 + 168);
        int v37 = v36 - 12;
        if (a3 == 2)
        {
          if ((int)v32 >= 1)
          {
            uint64_t v52 = 0;
            uint64_t v53 = *(void *)(a1 + 64);
            uint64_t v54 = 4 * v31 + 4;
            do
            {
              v34[v52] = 0;
              if (*(int *)(a1 + 4) >= 1)
              {
                uint64_t v55 = 0;
                int v56 = *(_DWORD *)(v53 + 4 * v52);
                uint64_t v57 = *(void *)(a1 + 128);
                uint64_t v58 = *(void *)(a1 + 16) + v54;
                int v59 = v56;
                do
                {
                  int v60 = (((v59 >> 5) & 1) + (v59 >> 6)) & *(_DWORD *)(v57 + 24);
                  int v61 = *(_DWORD *)(v57 + 16);
                  int v62 = v60 - v61;
                  if (v60 >= v61)
                  {
                    int v63 = -*(__int16 *)(*(void *)v57 + 2 * v62);
                    int v64 = -*(__int16 *)(*(void *)(v57 + 8) + 2 * v62);
                  }
                  else
                  {
                    int v63 = *(__int16 *)(*(void *)v57 + 2 * v60);
                    int v64 = *(__int16 *)(*(void *)(v57 + 8) + 2 * v60);
                  }
                  if (v63 == 0x7FFF) {
                    int v63 = 0x8000;
                  }
                  if (v64 == 0x7FFF) {
                    int v64 = 0x8000;
                  }
                  v33[v52] -= (*(_DWORD *)(v58 + 4 * v55) * v63) >> 14;
                  v34[v52] += (*(_DWORD *)(v58 + 4 * v55) * v64) >> 14;
                  v59 += v56;
                  ++v55;
                }
                while (v55 < *(int *)(a1 + 4));
              }
              ++v52;
            }
            while (v52 != v32);
          }
        }
        else if (!a3 && (int)v32 >= 1)
        {
          uint64_t v38 = 0;
          uint64_t v39 = *(void *)(a1 + 64);
          uint64_t v40 = 4 * v31 + 4;
          do
          {
            v34[v38] = 0;
            if (*(int *)(a1 + 4) >= 1)
            {
              uint64_t v41 = 0;
              int v42 = 0;
              int v43 = *(_DWORD *)(v39 + 4 * v38);
              uint64_t v44 = *(void *)(a1 + 128);
              uint64_t v45 = *(void *)(a1 + 16) + v40;
              int v46 = v43;
              do
              {
                int v47 = (((v46 >> 5) & 1) + (v46 >> 6)) & *(_DWORD *)(v44 + 24);
                int v48 = *(_DWORD *)(v44 + 16);
                BOOL v49 = __OFSUB__(v47, v48);
                int v50 = v47 - v48;
                if (v50 < 0 != v49) {
                  int v51 = *(__int16 *)(*(void *)(v44 + 8) + 2 * v47);
                }
                else {
                  int v51 = -*(__int16 *)(*(void *)(v44 + 8) + 2 * v50);
                }
                v42 += (*(_DWORD *)(v45 + 4 * v41) * v51) >> 14;
                v34[v38] = v42;
                v46 += v43;
                ++v41;
              }
              while (v41 < *(int *)(a1 + 4));
            }
            ++v38;
          }
          while (v38 != v32);
        }
        int v65 = v36 - 9;
        if (v37 < 1)
        {
          if ((int)v32 >= 1)
          {
            uint64_t v67 = v32;
            do
            {
              *v34++ <<= 12 - v36;
              --v67;
            }
            while (v67);
          }
        }
        else if ((int)v32 >= 1)
        {
          uint64_t v66 = v32;
          do
          {
            *int v34 = ((1 << (v36 - 13)) + *v34) >> v37;
            ++v34;
            --v66;
          }
          while (v66);
        }
        if (v65 >= 1)
        {
          if ((int)v32 >= 1)
          {
            uint64_t v68 = 1 << (v36 - 10);
            do
            {
              unsigned int v69 = *v33;
              if ((*v33 & 0x80000000) != 0) {
                unsigned int v69 = -v69;
              }
              signed int v70 = 3615 * (v69 >> 15) + ((3615 * (v69 & 0x7FFF) + 0x4000) >> 15);
              if ((*v33 & 0x80000000) != 0) {
                signed int v70 = -v70;
              }
              *v33++ = (v68 + v70) >> v65;
              --v32;
            }
            while (v32);
          }
          return 0;
        }
        if ((int)v32 < 1) {
          return 0;
        }
        char v71 = 9 - v36;
        do
        {
          uint64_t result = 0;
          unsigned int v72 = *v33;
          if ((*v33 & 0x80000000) != 0) {
            unsigned int v72 = -v72;
          }
          unsigned int v73 = 3615 * (v72 >> 15) + ((3615 * (v72 & 0x7FFF) + 0x4000) >> 15);
          if ((*v33 & 0x80000000) != 0) {
            unsigned int v73 = -v73;
          }
          *v33++ = v73 << v71;
          --v32;
        }
        while (v32);
      }
    }
  }
  return result;
}

uint64_t Rr2Pcm_SetHarmonicInfo(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = a5;
  uint64_t v6 = a4;
  int v9 = *(unsigned __int16 *)(a3 + 48);
  uint64_t v10 = *(_DWORD **)(a3 + 248);
  if (a5 && v10)
  {
    uint64_t v11 = *(void *)(a3 + 16);
    int v12 = *(_DWORD *)(a3 + 40);
    int v13 = a1[3] / **(_DWORD **)(a4 + 64);
  }
  else
  {
    uint64_t v11 = *(void *)(a3 + 8);
    int v12 = *(_DWORD *)(a3 + 32);
    if (v10)
    {
      if (!*v10) {
        return 1;
      }
      int v13 = a1[3] / *v10;
    }
    else
    {
      int v13 = 1;
    }
  }
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v15 = *(unsigned int *)(v14 + 64);
  uint64_t v16 = *(unsigned int *)(v14 + 40);
  if (!v9)
  {
    if (((int)v16 - 1) / v13 >= v12) {
      int v26 = v12;
    }
    else {
      int v26 = ((int)v16 - 1) / v13;
    }
    if (*(_DWORD *)(v14 + 8) && !*(_DWORD *)(v14 + 12) && *(_DWORD *)(v14 + 16))
    {
      int v27 = 0;
      if (a1[70] && v26 >= 1)
      {
        int v106 = *(_DWORD *)(v14 + 64);
        uint64_t v28 = 4 * v13;
        int v29 = (_DWORD *)(*(void *)(v14 + 24) + v28);
        uint64_t v30 = (unsigned int *)(*(void *)(a3 + 8) + 8);
        int v31 = v26;
        do
        {
          unsigned int v32 = *v29 + (*(_DWORD *)(a3 + 196) << 12);
          *uint64_t v30 = v32;
          unsigned int v33 = ipow2(v32);
          *(v30 - 1) = v33;
          v30[1] = v33;
          v30[2] = 0;
          int v29 = (_DWORD *)((char *)v29 + v28);
          v30 += 9;
          --v31;
        }
        while (v31);
        int v27 = v26;
        uint64_t v6 = a4;
        LODWORD(v15) = v106;
      }
      if (v27 < v12)
      {
        int v34 = (void *)(v11 + 36 * v27 + 4);
        do
        {
          *int v34 = 0;
          v34[1] = 0;
          int v34 = (void *)((char *)v34 + 36);
          ++v27;
        }
        while (v12 > v27);
      }
      scaleHarmEnergy(a3, v6, v15, 0, v5);
      goto LABEL_107;
    }
    return 1;
  }
  int v111 = 0;
  if (a1[25]) {
    unsigned int v17 = (int *)(a3 + 56);
  }
  else {
    unsigned int v17 = a1 + 34;
  }
  int v18 = *(_DWORD *)(v14 + 16);
  int v19 = a1[17];
  if (v18) {
    BOOL v20 = v19 == 1;
  }
  else {
    BOOL v20 = 0;
  }
  int v21 = v20;
  if (a5)
  {
    BOOL v22 = *(_DWORD **)(a3 + 16);
    int v24 = *(_DWORD *)(a3 + 40);
    int v23 = *(_DWORD *)(a3 + 44);
    int v25 = (int *)(*(void *)(a4 + 64) + 36);
  }
  else
  {
    BOOL v22 = *(_DWORD **)(a3 + 8);
    int v24 = *(_DWORD *)(a3 + 32);
    int v23 = *(_DWORD *)(a3 + 36);
    if (v10) {
      int v25 = v10 + 9;
    }
    else {
      int v25 = a1 + 75;
    }
  }
  if (v19) {
    int v35 = v21;
  }
  else {
    int v35 = 1;
  }
  if (v35 != 1 || !*(_WORD *)(a3 + 50) || !v18 || !*(_DWORD *)(v14 + 8) || !a1[70]) {
    return 1;
  }
  int v96 = *v17;
  uint64_t v98 = *(void *)(a3 + 72);
  int v105 = *v25;
  int v99 = *(unsigned __int16 *)(a3 + 50);
  int v101 = v23;
  if (*(_DWORD *)(a3 + 100))
  {
    LODWORD(v36) = 0;
    if (v24 >= 1 && (int)v16 >= 2)
    {
      uint64_t v36 = 0;
      int v37 = v22 + 4;
      int v38 = 1;
      do
      {
        if (*(v37 - 4))
        {
          int v39 = *(_DWORD *)(v14 + 12);
          int v40 = *(_DWORD *)(*(void *)(a3 + 152) + 4 * v38 - 4);
          *(v37 - 3) = v40;
          if (v39)
          {
            v37[4] = *(_DWORD *)(*(void *)(v14 + 32) + 4 * v38);
          }
          else
          {
            *(v37 - 1) = v40;
            *int v37 = 0;
          }
          ++v38;
        }
        if (++v36 >= (unint64_t)v24) {
          break;
        }
        v37 += 9;
      }
      while (v38 < (int)v16);
    }
  }
  else if (v24 < 1)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    uint64_t v41 = 0;
    int v42 = v22 + 4;
    int v43 = 1;
    unsigned int v107 = v15;
    while (1)
    {
      uint64_t v44 = *(void *)(a3 + 64);
      if (v43 >= *(_DWORD *)(v44 + 40)) {
        break;
      }
      if (*(v42 - 4))
      {
        uint64_t v45 = v22;
        uint64_t v46 = v6;
        int v47 = *(_DWORD *)(v44 + 12);
        unsigned int v48 = *(_DWORD *)(*(void *)(v44 + 24) + 4 * v43) + (*(_DWORD *)(a3 + 196) << 12);
        *(v42 - 2) = v48;
        int v49 = ipow2(v48);
        *(v42 - 3) = v49;
        if (v47)
        {
          v42[4] = *(_DWORD *)(*(void *)(*(void *)(a3 + 64) + 32) + 4 * v43);
        }
        else
        {
          *(v42 - 1) = v49;
          *int v42 = 0;
        }
        uint64_t v6 = v46;
        BOOL v22 = v45;
        ++v43;
        int v5 = a5;
        uint64_t v15 = v107;
      }
      ++v41;
      v42 += 9;
      if (v24 == v41) {
        goto LABEL_75;
      }
    }
    LODWORD(v36) = v41;
  }
  if ((int)v36 < v24)
  {
    int v50 = &v22[9 * v36 + 1];
    do
    {
      if (*((_DWORD *)v50 - 1))
      {
        *int v50 = 0;
        v50[1] = 0;
      }
      LODWORD(v36) = v36 + 1;
      int v50 = (void *)((char *)v50 + 36);
    }
    while (v24 > (int)v36);
  }
LABEL_75:
  uint64_t v51 = a2;
  if (v24 == v101) {
    goto LABEL_76;
  }
  if (a1[17] != 1 || a1[23]) {
    return 1;
  }
  if ((int)v16 > 1)
  {
    uint64_t v79 = v16 - 1;
    int v80 = (unsigned int *)v98;
    unsigned int v81 = (13440 * v99) >> 15;
    do
    {
      *v80++ = v81;
      v81 += (13440 * v99) >> 15;
      --v79;
    }
    while (v79);
  }
  signed int v100 = (13440 * v99) >> 15;
  if (v24 >= 1)
  {
    int v82 = 32 * v96;
    int v97 = v16 - 1;
    uint64_t v83 = v24;
    unsigned int v108 = v15;
    do
    {
      int v84 = v22[7] * v105 / 16;
      if (v84 >= v82)
      {
        uint64_t v85 = v15;
        uint64_t v110 = v22;
        VoicedAmpAttenuatiouint64_t n = GetVoicedAmpAttenuation(a1, v82, v22[7] * v105 / 16);
        BOOL v22 = v110;
        int v87 = VoicedAmpAttenuation;
        if (*v110)
        {
          v110[1] = (v110[1] * VoicedAmpAttenuation) >> 10;
          uint64_t v15 = v85;
        }
        else
        {
          int InterpolatedValue = GetInterpolatedValue(v98, (unsigned int *)(*(void *)(*(void *)(a3 + 64) + 24) + 4), v97, v84, &v111, 0);
          int v102 = ipow2(InterpolatedValue + (*(_DWORD *)(a3 + 196) << 12));
          _OWORD v110[2] = v102;
          AuxUvHarmResolutiouint64_t n = GetAuxUvHarmResolution(a1, v82, v84);
          uint64_t v90 = v51;
          if (AuxUvHarmResolution >= v100)
          {
            int v92 = 1024;
          }
          else
          {
            if (a1[21]) {
              signed int v91 = 0;
            }
            else {
              signed int v91 = AuxUvHarmResolution;
            }
            int v92 = (AuxUvHarmResolution << 10) / (v100 - v91);
          }
          unsigned int v93 = v87 * v87;
          NoiseAttenuatiouint64_t n = GetNoiseAttenuation(a1, v82, v84);
          if (NoiseAttenuation * NoiseAttenuation <= v93) {
            int v95 = 0;
          }
          else {
            int v95 = (int)(sqroot5((int *)(a3 + 220), ((int)(NoiseAttenuation * NoiseAttenuation - v93) / 4 * v92 / 256) >> 8)* v102) >> 10;
          }
          uint64_t v51 = v90;
          uint64_t v15 = v108;
          BOOL v22 = v110;
          v110[1] = v95;
        }
      }
      v22 += 9;
      --v83;
    }
    while (v83);
  }
LABEL_76:
  scaleHarmEnergy(a3, v6, v15, 1, v5);
  uint64_t v53 = *(void *)(a3 + 8);
  uint64_t v54 = *(int *)(a3 + 32);
  if (*(_WORD *)(a3 + 48))
  {
    if (v54)
    {
      uint64_t v55 = 36 * v54;
      do
      {
        if (*(_DWORD *)v53)
        {
          int v56 = *(_DWORD *)(v51 + 32) & *(_DWORD *)(v53 + 32);
          int v57 = *(_DWORD *)(v51 + 24);
          BOOL v58 = __OFSUB__(v56, v57);
          int v59 = v56 - v57;
          if (v59 < 0 != v58)
          {
            v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v56);
            v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v56);
            int32x2_t v60 = vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL);
          }
          else
          {
            v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v59);
            v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v59);
            int32x2_t v60 = vneg_s32(vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL));
          }
          int v61 = *(_DWORD *)(v53 + 4);
          if (v61 >= 0) {
            unsigned int v62 = *(_DWORD *)(v53 + 4);
          }
          else {
            unsigned int v62 = -v61;
          }
          if (v61 >= 0) {
            unsigned int v63 = -1;
          }
          else {
            unsigned int v63 = 1;
          }
          int8x8_t v64 = (int8x8_t)vabs_s32(v60);
          int32x2_t v65 = (int32x2_t)vand_s8(v64, (int8x8_t)0x7F0000007FLL);
          int32x2_t v52 = vmul_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vmul_s32(vdup_n_s32(v62), (int32x2_t)vshr_n_u32((uint32x2_t)v64, 0xFuLL)), vdup_n_s32(v62 >> 15), v65), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v62 & 0x7FFF), v65), 0xFuLL), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v60), (int8x8_t)vdup_n_s32(v63), (int8x8_t)vdup_n_s32((v61 >> 31) | 1u)));
          *(int32x2_t *)(v53 + 12) = v52;
        }
        v53 += 36;
        v55 -= 36;
      }
      while (v55);
    }
  }
  else if (v54)
  {
    int v67 = *(_DWORD *)(v51 + 32);
    int v68 = *(_DWORD *)(v51 + 24);
    uint64_t v69 = 36 * v54;
    signed int v70 = (_DWORD *)(v53 + 32);
    do
    {
      int v71 = *v70 & v67;
      int v72 = v71 - v68;
      if (v71 >= v68)
      {
        v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v72);
        v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v72);
        int32x2_t v73 = vneg_s32(vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL));
      }
      else
      {
        v52.i16[0] = *(_WORD *)(*(void *)(v51 + 16) + 2 * v71);
        v52.i16[2] = *(_WORD *)(*(void *)(v51 + 8) + 2 * v71);
        int32x2_t v73 = vshr_n_s32(vshl_n_s32(v52, 0x10uLL), 0x10uLL);
      }
      int v74 = *(v70 - 7);
      if (v74 >= 0) {
        unsigned int v75 = *(v70 - 7);
      }
      else {
        unsigned int v75 = -v74;
      }
      if (v74 >= 0) {
        unsigned int v76 = -1;
      }
      else {
        unsigned int v76 = 1;
      }
      int8x8_t v77 = (int8x8_t)vabs_s32(v73);
      int32x2_t v78 = (int32x2_t)vand_s8(v77, (int8x8_t)0x7F0000007FLL);
      int32x2_t v52 = vmul_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vmul_s32(vdup_n_s32(v75), (int32x2_t)vshr_n_u32((uint32x2_t)v77, 0xFuLL)), vdup_n_s32(v75 >> 15), v78), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v75 & 0x7FFF), v78), 0xFuLL), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v73), (int8x8_t)vdup_n_s32(v76), (int8x8_t)vdup_n_s32((v74 >> 31) | 1u)));
      *(int32x2_t *)(v70 - 5) = v52;
      v70 += 9;
      v69 -= 36;
    }
    while (v69);
  }
LABEL_107:
  FilterHarmonics(a1, a3, v6, v5);
  return 0;
}

uint64_t scaleHarmEnergy(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v38 = 0;
  if (a5)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int v9 = *(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a2 + 64);
    if (*(_WORD *)(a1 + 48)) {
      int v11 = 1;
    }
    else {
      int v11 = *(_DWORD *)(v10 + 52);
    }
    uint64_t v15 = (int *)(v10 + 56);
    int v13 = (int *)(a1 + 216);
    uint64_t v14 = (int *)(a1 + 212);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 248);
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 32);
    int v13 = (int *)(a1 + 208);
    uint64_t v14 = (int *)(a1 + 204);
    if (v12)
    {
      if (*(_WORD *)(a1 + 48)) {
        int v11 = 1;
      }
      else {
        int v11 = *(_DWORD *)(v12 + 52);
      }
      uint64_t v15 = (int *)(v12 + 56);
    }
    else
    {
      if (*(_WORD *)(a1 + 48)) {
        int v11 = 1;
      }
      else {
        int v11 = *(_DWORD *)(a1 + 92);
      }
      uint64_t v15 = (int *)(a1 + 96);
    }
  }
  int v37 = 0;
  int v16 = *v15;
  uint64_t v17 = v9;
  if ((int)a3 <= 0)
  {
    uint64_t result = ScaleTo16BitSignedRangeWithSkip(v8 + 4, v9, 36, (int *)&v38 + 1, (int *)&v38, *(_DWORD *)(a1 + 200));
    int v21 = HIDWORD(v38) - (v38 + *(_DWORD *)(a1 + 196));
    if (v11 > 1)
    {
      if (v17)
      {
        uint64_t v22 = 36 * v17;
        int v23 = (int *)(v8 + 4);
        do
        {
          *int v23 = (*v23 * v11) >> v16;
          v23 += 9;
          v22 -= 36;
        }
        while (v22);
      }
      v21 += v16;
    }
    if (v21 >= 1)
    {
      *v13 += v21;
      return result;
    }
    int v24 = *v14 - v21;
    goto LABEL_61;
  }
  unsigned int v18 = CalcSquareNormWthSkip(v8 + 4, v9, 36, 2896, &v37, a4);
  uint64_t result = sqroot5(0, v18 >> 8);
  if (!result) {
    return result;
  }
  if (a4) {
    int v20 = v37;
  }
  else {
    int v20 = 0;
  }
  while ((int)result > (int)(a3 + (a3 >> 1)))
  {
    uint64_t result = ((int)result >> 1);
    ++v20;
  }
  if (!v20)
  {
    if ((int)result >= (int)(a3 >> 1))
    {
      int v20 = 0;
    }
    else
    {
      int v20 = 0;
      do
      {
        uint64_t result = (2 * result);
        --v20;
      }
      while ((int)result < (int)(a3 >> 1));
    }
  }
  int v25 = (int)(a3 << 10) / (int)result;
  int v26 = 15 - v16;
  if (v11 <= 1) {
    int v26 = 10;
  }
  int v27 = v26 + v20;
  if (v11 <= 1) {
    char v28 = 0;
  }
  else {
    char v28 = v16 - 5;
  }
  if (v27 < 0)
  {
    int v33 = -v27;
    if (!v17)
    {
      signed int v31 = -1;
      goto LABEL_59;
    }
    uint64_t v34 = 36 * v17;
    int v35 = (int *)(v8 + 4);
    signed int v31 = -1;
    do
    {
      int v36 = (((*v35 * v25) >> v28) * v11) << v33;
      *int v35 = v36;
      v35 += 9;
      if (v36 > v31) {
        signed int v31 = v36;
      }
      v34 -= 36;
    }
    while (v34);
  }
  else
  {
    if (!v17)
    {
      signed int v31 = -1;
      int v33 = v27;
      goto LABEL_59;
    }
    uint64_t v29 = 36 * v17;
    uint64_t v30 = (int *)(v8 + 4);
    signed int v31 = -1;
    do
    {
      int v32 = ((*v30 * v25) >> v28) * v11;
      *uint64_t v30 = v32;
      v30 += 9;
      if (v32 > v31) {
        signed int v31 = v32;
      }
      v29 -= 36;
    }
    while (v29);
    int v33 = v27;
  }
  if (!a4 || v31 < 0x4000)
  {
LABEL_59:
    uint64_t result = ScaleTo16BitSignedRangeWithSkip(v8 + 4, v17, 36, v13, v14, v31);
    if (v27 < 0) {
      return result;
    }
    goto LABEL_60;
  }
  if ((v27 & 0x80000000) == 0)
  {
LABEL_60:
    int v24 = *v14 + v33;
LABEL_61:
    *uint64_t v14 = v24;
  }
  return result;
}

_DWORD *FilterHarmonics(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = v4 + 36 * *(int *)(a2 + 40);
    uint64_t v6 = *(_DWORD **)(a3 + 64);
LABEL_4:
    int v7 = v6[4] - v6[6];
    uint64_t v8 = v6 + 8;
    int v9 = v6 + 7;
    goto LABEL_5;
  }
  uint64_t v6 = *(_DWORD **)(a2 + 248);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = v4 + 36 * *(int *)(a2 + 32);
  if (v6) {
    goto LABEL_4;
  }
  int v7 = result[72] - result[35];
  uint64_t v8 = result + 37;
  int v9 = result + 36;
LABEL_5:
  if (*(_WORD *)(a2 + 48)) {
    uint64_t v8 = v9;
  }
  int v10 = *v8;
  if (*(_DWORD *)(v4 + 20) > *v8 || v4 == v5)
  {
    uint64_t v12 = v4;
  }
  else
  {
    do
    {
      uint64_t v12 = v4 + 36;
      *(void *)(v4 + 12) = 0;
      *(void *)(v4 + 4) = 0;
      BOOL v13 = *(_DWORD *)(v4 + 56) > v10 || v12 == v5;
      v4 += 36;
    }
    while (!v13);
  }
  do
  {
    uint64_t v14 = v12 + 36;
    BOOL v15 = *(_DWORD *)(v12 + 20) >= v7 || v12 == v5;
    v12 += 36;
  }
  while (!v15);
  for (uint64_t i = v14 - 36; i != v5; i += 36)
  {
    *(void *)(i + 12) = 0;
    *(void *)(i + 4) = 0;
  }
  return result;
}

uint64_t NormRand_create(uint64_t a1)
{
  *(void *)(a1 + 96) = RandNormTable();
  return 0;
}

uint64_t WindowTrans_Create_Base(void *a1, _DWORD *a2, int a3, int a4, int a5)
{
  if (a3 == 3 && a4 == 128 && a5 == 80)
  {
    LODWORD(v5) = 9;
LABEL_5:
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm160;
LABEL_21:
    *a1 = v6;
    *a2 = v5;
    return 0;
  }
  BOOL v7 = a3 == 6 && a4 == 256;
  char v8 = v7;
  if (v7 && a5 == 80)
  {
    LODWORD(v5) = 9;
LABEL_16:
    uint64_t v6 = &asHannTransSamples_B13_Fft512_Frm80;
    goto LABEL_21;
  }
  if (a3 == 11 && a4 == 512 && a5 == 80)
  {
    LODWORD(v5) = 9;
    uint64_t v6 = &asHannTransSamples_B23_Fft512_Frm40;
    goto LABEL_21;
  }
  if (a3 == 6 && a4 == 512 && a5 == 160)
  {
    LODWORD(v5) = 8;
    goto LABEL_16;
  }
  BOOL v10 = a3 == 3 && a4 == 256;
  char v11 = v10;
  if (v10 && a5 == 160)
  {
    LODWORD(v5) = 8;
    goto LABEL_5;
  }
  BOOL v12 = a3 == 3 && a4 == 512;
  char v13 = v12;
  if (v12 && a5 == 320)
  {
    LODWORD(v5) = 7;
    goto LABEL_5;
  }
  if (a3 == 4 && a4 == 512 && a5 == 220)
  {
    LODWORD(v5) = 8;
LABEL_51:
    uint64_t v6 = &asHannTransSamples_B9_Fft512_Frm110;
    goto LABEL_21;
  }
  BOOL v14 = a3 == 2 && a4 == 256;
  char v15 = v14;
  if (v14 && a5 == 220)
  {
    LODWORD(v5) = 8;
LABEL_72:
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm110;
    goto LABEL_21;
  }
  BOOL v16 = a3 == 2 && a4 == 512;
  char v17 = v16;
  if (v16 && a5 == 440)
  {
    LODWORD(v5) = 7;
    goto LABEL_72;
  }
  if (a3 == 8 && a4 == 512 && a5 == 110)
  {
    LODWORD(v5) = 9;
    uint64_t v6 = &asHannTransSamples_B17_Fft512_Frm55;
    goto LABEL_21;
  }
  BOOL v18 = a3 == 4 && a4 == 256;
  char v19 = v18;
  if (v18 && a5 == 110)
  {
    LODWORD(v5) = 9;
    goto LABEL_51;
  }
  if (a3 == 2 && a4 == 128 && a5 == 110)
  {
    LODWORD(v5) = 9;
    goto LABEL_72;
  }
  if (a3 == 8 && a4 == 256 && a5 == 54)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B17_Fft256_Frm27;
    goto LABEL_21;
  }
  if (a4 == 256 && a3 == 7 && a5 == 62)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B15_Fft256_Frm31;
    goto LABEL_21;
  }
  if (a5 == 70) {
    char v20 = v8;
  }
  else {
    char v20 = 0;
  }
  if (v20)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B13_Fft256_Frm35;
    goto LABEL_21;
  }
  if (a5 != 78) {
    char v8 = 0;
  }
  if (v8)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B13_Fft256_Frm39;
    goto LABEL_21;
  }
  BOOL v21 = a3 == 5 && a4 == 256;
  char v22 = v21;
  if (v21 && a5 == 88)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B11_Fft256_Frm44;
    goto LABEL_21;
  }
  if (a5 != 96) {
    char v22 = 0;
  }
  if (v22)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B11_Fft256_Frm48;
    goto LABEL_21;
  }
  if (a5 == 104) {
    char v23 = v19;
  }
  else {
    char v23 = 0;
  }
  if (v23)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B9_Fft256_Frm52;
    goto LABEL_21;
  }
  if (a5 == 112) {
    char v24 = v19;
  }
  else {
    char v24 = 0;
  }
  if (v24)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B9_Fft256_Frm56;
    goto LABEL_21;
  }
  if (a5 == 120) {
    char v25 = v19;
  }
  else {
    char v25 = 0;
  }
  if (v25)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B9_Fft256_Frm60;
    goto LABEL_21;
  }
  if (a5 == 128) {
    char v26 = v11;
  }
  else {
    char v26 = 0;
  }
  if (v26)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm64;
    goto LABEL_21;
  }
  if (a5 == 138) {
    char v27 = v11;
  }
  else {
    char v27 = 0;
  }
  if (v27)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm69;
    goto LABEL_21;
  }
  if (a5 == 146) {
    char v28 = v11;
  }
  else {
    char v28 = 0;
  }
  if (v28)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm73;
    goto LABEL_21;
  }
  if (a5 == 154) {
    char v29 = v11;
  }
  else {
    char v29 = 0;
  }
  if (v29)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm77;
    goto LABEL_21;
  }
  if (a5 == 162) {
    char v30 = v11;
  }
  else {
    char v30 = 0;
  }
  if (v30)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm81;
    goto LABEL_21;
  }
  if (a5 != 170) {
    char v11 = 0;
  }
  if (v11)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B7_Fft256_Frm85;
    goto LABEL_21;
  }
  if (a5 == 178) {
    char v31 = v15;
  }
  else {
    char v31 = 0;
  }
  if (v31)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm89;
    goto LABEL_21;
  }
  if (a5 == 186) {
    char v32 = v15;
  }
  else {
    char v32 = 0;
  }
  if (v32)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm93;
    goto LABEL_21;
  }
  if (a5 == 196) {
    char v33 = v15;
  }
  else {
    char v33 = 0;
  }
  if (v33)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm98;
    goto LABEL_21;
  }
  if (a5 == 204) {
    char v34 = v15;
  }
  else {
    char v34 = 0;
  }
  if (v34)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm102;
    goto LABEL_21;
  }
  if (a5 == 212) {
    char v35 = v15;
  }
  else {
    char v35 = 0;
  }
  if (v35)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm106;
    goto LABEL_21;
  }
  if (a5 == 242) {
    char v36 = v15;
  }
  else {
    char v36 = 0;
  }
  if (v36)
  {
    LODWORD(v5) = 8;
    uint64_t v6 = &asHannTransSamples_B5_Fft256_Frm121;
    goto LABEL_21;
  }
  if (a5 == 264) {
    char v37 = v13;
  }
  else {
    char v37 = 0;
  }
  if (v37)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm132;
    goto LABEL_21;
  }
  if (a5 == 286) {
    char v38 = v13;
  }
  else {
    char v38 = 0;
  }
  if (v38)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm143;
    goto LABEL_21;
  }
  if (a5 == 308) {
    char v39 = v13;
  }
  else {
    char v39 = 0;
  }
  if (v39)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm154;
    goto LABEL_21;
  }
  if (a5 == 330) {
    char v40 = v13;
  }
  else {
    char v40 = 0;
  }
  if (v40)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm165;
    goto LABEL_21;
  }
  if (a5 != 352) {
    char v13 = 0;
  }
  if (v13)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B7_Fft512_Frm176;
    goto LABEL_21;
  }
  if (a5 == 374) {
    char v41 = v17;
  }
  else {
    char v41 = 0;
  }
  if (v41)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B5_Fft512_Frm187;
    goto LABEL_21;
  }
  if (a5 == 396) {
    char v42 = v17;
  }
  else {
    char v42 = 0;
  }
  if (v42)
  {
    LODWORD(v5) = 7;
    uint64_t v6 = &asHannTransSamples_B5_Fft512_Frm198;
    goto LABEL_21;
  }
  char v43 = v17 ^ 1;
  uint64_t v5 = 7;
  if (a5 != 418) {
    char v43 = 1;
  }
  if ((v43 & 1) == 0)
  {
    uint64_t v6 = &asHannTransSamples_B5_Fft512_Frm209;
    goto LABEL_21;
  }
  return v5;
}

uint64_t WindowTrans_Create(uint64_t a1, int *a2)
{
  return WindowTrans_Create_Base((void *)(a1 + 40), (_DWORD *)(a1 + 64), a2[74], a2[3], a2[11]);
}

uint64_t DeempFreqResponse_Create(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = &alDeemphFilterFreqResponse;
  int v3 = *(_DWORD *)(a2 + 156) != 0;
  if (!*(_DWORD *)(a2 + 156)) {
    uint64_t v2 = 0;
  }
  *(void *)(a1 + 72) = v2;
  *(_DWORD *)(a1 + 68) = v3 << 8;
  return 0;
}

uint64_t Window_Create_Base(void *a1, int a2)
{
  uint64_t v2 = 7;
  if (a2 > 109)
  {
    if (a2 > 164)
    {
      if (a2 > 197)
      {
        if (a2 == 198)
        {
          int v3 = &asHannSamples_397;
          goto LABEL_69;
        }
        if (a2 == 209)
        {
          int v3 = &asHannSamples_419;
          goto LABEL_69;
        }
        if (a2 != 220) {
          return v2;
        }
        int v3 = &asHannSamples_441;
      }
      else
      {
        if (a2 == 165)
        {
          int v3 = &asHannSamples_331;
          goto LABEL_69;
        }
        if (a2 == 176)
        {
          int v3 = &asHannSamples_353;
          goto LABEL_69;
        }
        if (a2 != 187) {
          return v2;
        }
        int v3 = &asHannSamples_375;
      }
    }
    else if (a2 > 142)
    {
      if (a2 == 143)
      {
        int v3 = &asHannSamples_287;
        goto LABEL_69;
      }
      if (a2 == 154)
      {
        int v3 = &asHannSamples_309;
        goto LABEL_69;
      }
      if (a2 != 160) {
        return v2;
      }
      int v3 = &asHannSamples_321;
    }
    else
    {
      if (a2 == 110)
      {
        int v3 = &asHannSamples_221;
        goto LABEL_69;
      }
      if (a2 == 121)
      {
        int v3 = &asHannSamples_243;
        goto LABEL_69;
      }
      if (a2 != 132) {
        return v2;
      }
      int v3 = &asHannSamples_265;
    }
LABEL_69:
    uint64_t v2 = 0;
    *a1 = v3;
    return v2;
  }
  if (a2 <= 68)
  {
    if (a2 > 47)
    {
      switch(a2)
      {
        case '0':
          int v3 = &asHannSamples_97;
          goto LABEL_69;
        case '1':
        case '2':
        case '3':
        case '5':
        case '6':
          return v2;
        case '4':
          int v3 = &asHannSamples_105;
          goto LABEL_69;
        case '7':
          int v3 = &asHannSamples_111;
          goto LABEL_69;
        case '8':
          int v3 = &asHannSamples_113;
          goto LABEL_69;
        default:
          if (a2 == 60)
          {
            int v3 = &asHannSamples_121;
          }
          else
          {
            if (a2 != 64) {
              return v2;
            }
            int v3 = &asHannSamples_129;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case '#':
          int v3 = &asHannSamples_71;
          goto LABEL_69;
        case '$':
        case '%':
        case '&':
        case ')':
        case '*':
        case '+':
          return v2;
        case '\'':
          int v3 = &asHannSamples_79;
          goto LABEL_69;
        case '(':
        case ',':
          int v3 = &asHannSamples_89;
          goto LABEL_69;
        default:
          if (a2 == 27)
          {
            int v3 = &asHannSamples_55;
          }
          else
          {
            if (a2 != 31) {
              return v2;
            }
            int v3 = &asHannSamples_63;
          }
          break;
      }
    }
    goto LABEL_69;
  }
  if (a2 <= 88)
  {
    switch(a2)
    {
      case 'M':
        int v3 = &asHannSamples_155;
        goto LABEL_69;
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'T':
        return v2;
      case 'P':
        int v3 = &asHannSamples_161;
        goto LABEL_69;
      case 'Q':
        int v3 = &asHannSamples_163;
        goto LABEL_69;
      case 'U':
        int v3 = &asHannSamples_171;
        goto LABEL_69;
      default:
        if (a2 == 69)
        {
          int v3 = &asHannSamples_139;
        }
        else
        {
          if (a2 != 73) {
            return v2;
          }
          int v3 = &asHannSamples_147;
        }
        break;
    }
    goto LABEL_69;
  }
  if (a2 <= 97)
  {
    if (a2 == 89)
    {
      int v3 = &asHannSamples_179;
      goto LABEL_69;
    }
    if (a2 == 93)
    {
      int v3 = &asHannSamples_187;
      goto LABEL_69;
    }
  }
  else
  {
    switch(a2)
    {
      case 'b':
        int v3 = &asHannSamples_197;
        goto LABEL_69;
      case 'f':
        int v3 = &asHannSamples_205;
        goto LABEL_69;
      case 'j':
        int v3 = &asHannSamples_213;
        goto LABEL_69;
    }
  }
  return v2;
}

uint64_t Window_Create(uint64_t a1, uint64_t a2)
{
  return Window_Create_Base((void *)(a1 + 48), *(_DWORD *)(a2 + 24));
}

double RrInput_Init(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = a1;
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 44) = xmmword_2207811B0;
  *(_OWORD *)(a2 + 60) = xmmword_2207811C0;
  *(void *)(a2 + 8) = 1;
  *(void *)&double result = 0x400FFFFFFFFLL;
  *(void *)(a2 + 76) = 0x400FFFFFFFFLL;
  return result;
}

double RrInput_Reset(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = -1;
  *(void *)(a1 + 8) = 1;
  *(void *)&double result = 0x400FFFFFFFFLL;
  *(void *)(a1 + 76) = 0x400FFFFFFFFLL;
  return result;
}

int *RrInput_DeallocateData(int *result)
{
  uint64_t v1 = result;
  if (result[18] >= 1)
  {
    uint64_t v2 = *((void *)result + 3);
    if (!v2) {
      goto LABEL_5;
    }
    double result = (int *)heap_Free(*(void **)(*(void *)result + 8), v2);
  }
  *((void *)v1 + 3) = 0;
LABEL_5:
  if (v1[17] < 1)
  {
LABEL_8:
    *((void *)v1 + 4) = 0;
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)v1 + 4);
  if (v3)
  {
    double result = (int *)heap_Free(*(void **)(*(void *)v1 + 8), v3);
    goto LABEL_8;
  }
LABEL_9:
  v1[17] = 0;
  v1[18] = 0;
  return result;
}

uint64_t RrInput_AllocateData(uint64_t a1, int a2, int a3)
{
  if (a2 >= 1)
  {
    int v6 = *(_DWORD *)(a1 + 72);
    if (!v6 || v6 < a2)
    {
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8)
      {
        heap_Free(*(void **)(*(void *)a1 + 8), v8);
        *(void *)(a1 + 24) = 0;
      }
      int v9 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * a2);
      *(void *)(a1 + 24) = v9;
      if (!v9) {
        return 2;
      }
      cstdlib_memset(v9, 0, 4 * a2);
      *(_DWORD *)(a1 + 72) = a2;
    }
  }
  if (a3 < 1) {
    return 0;
  }
  int v10 = *(_DWORD *)(a1 + 68);
  if (v10 && v10 >= a3) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v12);
    *(void *)(a1 + 32) = 0;
  }
  char v13 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 4 * a3);
  *(void *)(a1 + 32) = v13;
  if (v13)
  {
    cstdlib_memset(v13, 0, 4 * a3);
    uint64_t result = 0;
    *(_DWORD *)(a1 + 68) = a3;
    return result;
  }
  return 2;
}

uint64_t Rr2Pcm_ProcessPhases(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v24 = 0;
  int v8 = *(_DWORD *)(*(void *)(a3 + 64) + 12);
  ComparePitches(a1, a3, a4, &v24);
  if (*(_DWORD *)(a1 + 52)) {
    int PhaseAlignment = findPhaseAlignment((void **)a1, a2, a3, a4);
  }
  else {
    int PhaseAlignment = 0;
  }
  if (*(_WORD *)(a3 + 48))
  {
    unsigned __int16 v12 = v24;
    if (!*(_DWORD *)(a1 + 56)) {
      unsigned __int16 v12 = 0;
    }
    *(_WORD *)(a3 + 52) = v12;
    if (PhaseAlignment)
    {
      __int16 v13 = *(_WORD *)(a3 + 84);
      LOWORD(v14) = v13 + *(_WORD *)(a4 + 20) + v12;
    }
    else
    {
      __int16 v13 = 0;
      int v14 = (*(_DWORD *)(a3 + 80) * v12 + *(_DWORD *)(a4 + 24) * *(unsigned __int16 *)(a4 + 20)) / *(_DWORD *)(a3 + 80);
    }
    *(_WORD *)(a3 + 52) = v14;
    *(_WORD *)(a3 + 86) = v13;
    AddLinearPhase(a2, a3, (unsigned __int16)v14, 0, v9, v10);
    AddRandomPhase(a2, a3, 0, v21, v22);
    char v20 = (_WORD *)(a3 + 84);
  }
  else
  {
    if (v8 && (uint64_t v15 = *(void *)(a3 + 64), v16 = *(unsigned int *)(v15 + 40), (int)v16 >= 2))
    {
      char v17 = (_DWORD *)(*(void *)(v15 + 32) + 4);
      uint64_t v18 = v16 - 1;
      while (!*v17++)
      {
        if (!--v18) {
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      AddRandomPhase(a2, a3, 0, v9, v10);
    }
    *(_WORD *)(a3 + 86) = 0;
    char v20 = (_WORD *)(a3 + 52);
  }
  _WORD *v20 = 0;
  return 0;
}

uint64_t AddLinearPhase(uint64_t result, uint64_t a2, int a3, int a4, double a5, double a6)
{
  uint64_t v6 = 40;
  if (!a4) {
    uint64_t v6 = 32;
  }
  uint64_t v7 = 16;
  if (!a4) {
    uint64_t v7 = 8;
  }
  if (a3)
  {
    uint64_t v8 = *(void *)(a2 + v7);
    uint64_t v9 = *(int *)(a2 + v6);
    int v10 = ((a3 >> 6) & 1) + (a3 >> 7);
    if (*(_WORD *)(a2 + 48))
    {
      if (v9)
      {
        uint64_t v11 = 36 * v9;
        unsigned __int16 v12 = (int *)(v8 + 32);
        int v13 = 1;
        do
        {
          if (*(v12 - 8))
          {
            int v14 = *v12 + v13 * v10;
            *unsigned __int16 v12 = v14;
            int v15 = *(_DWORD *)(result + 32) & v14;
            int v16 = *(_DWORD *)(result + 24);
            BOOL v17 = __OFSUB__(v15, v16);
            int v18 = v15 - v16;
            if (v18 < 0 != v17)
            {
              LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v15);
              WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v15);
              int32x2_t v19 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL);
            }
            else
            {
              LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v18);
              WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v18);
              int32x2_t v19 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL));
            }
            int v20 = *(v12 - 7);
            if (v20 >= 0) {
              unsigned int v21 = *(v12 - 7);
            }
            else {
              unsigned int v21 = -v20;
            }
            if (v20 >= 0) {
              unsigned int v22 = -1;
            }
            else {
              unsigned int v22 = 1;
            }
            int8x8_t v23 = (int8x8_t)vabs_s32(v19);
            int32x2_t v24 = (int32x2_t)vand_s8(v23, (int8x8_t)0x7F0000007FLL);
            a6 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v21 >> 15), v24), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v21 & 0x7FFF), v24), 0xFuLL), vdup_n_s32(v21), (int32x2_t)vshr_n_u32((uint32x2_t)v23, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v19), (int8x8_t)vdup_n_s32(v22), (int8x8_t)vdup_n_s32((v20 >> 31) | 1u))));
            *(double *)(v12 - 5) = a6;
            ++v13;
          }
          v12 += 9;
          v11 -= 36;
        }
        while (v11);
      }
    }
    else if (v9)
    {
      int v25 = *(_DWORD *)(result + 32);
      int v26 = *(_DWORD *)(result + 24);
      uint64_t v27 = 36 * v9;
      char v28 = (int *)(v8 + 32);
      int v29 = ((a3 >> 6) & 1) + (a3 >> 7);
      do
      {
        int v30 = v29 + *v28;
        *char v28 = v30;
        int v31 = v25 & v30;
        int v32 = (v25 & v30) - v26;
        if (v31 >= v26)
        {
          LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v32);
          WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v32);
          int32x2_t v33 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL));
        }
        else
        {
          LOWORD(a6) = *(_WORD *)(*(void *)(result + 16) + 2 * v31);
          WORD2(a6) = *(_WORD *)(*(void *)(result + 8) + 2 * v31);
          int32x2_t v33 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a6, 0x10uLL), 0x10uLL);
        }
        int v34 = *(v28 - 7);
        if (v34 >= 0) {
          unsigned int v35 = *(v28 - 7);
        }
        else {
          unsigned int v35 = -v34;
        }
        if (v34 >= 0) {
          unsigned int v36 = -1;
        }
        else {
          unsigned int v36 = 1;
        }
        int8x8_t v37 = (int8x8_t)vabs_s32(v33);
        int32x2_t v38 = (int32x2_t)vand_s8(v37, (int8x8_t)0x7F0000007FLL);
        a6 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v35 >> 15), v38), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v35 & 0x7FFF), v38), 0xFuLL), vdup_n_s32(v35), (int32x2_t)vshr_n_u32((uint32x2_t)v37, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v33), (int8x8_t)vdup_n_s32(v36), (int8x8_t)vdup_n_s32((v34 >> 31) | 1u))));
        *(double *)(v28 - 5) = a6;
        v28 += 9;
        v29 += v10;
        v27 -= 36;
      }
      while (v27);
    }
  }
  return result;
}

uint64_t AddRandomPhase(uint64_t result, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t v5 = 32;
  if (a3) {
    uint64_t v5 = 40;
  }
  uint64_t v6 = 16;
  if (!a3) {
    uint64_t v6 = 8;
  }
  uint64_t v7 = *(void *)(a2 + v6);
  uint64_t v8 = *(int *)(a2 + v5);
  if (*(_WORD *)(a2 + 48))
  {
    uint64_t v9 = 44;
    if (!a3) {
      uint64_t v9 = 36;
    }
    if (v8 != *(_DWORD *)(a2 + v9) && v8 != 0)
    {
      uint64_t v11 = 36 * v8;
      do
      {
        if (!*(_DWORD *)v7)
        {
          unsigned int v12 = 1664525 * *(_DWORD *)a2 + 1013904223;
          *(_DWORD *)a2 = v12;
          int v13 = (v12 + (v12 >> 11)) & *(_DWORD *)(result + 32);
          int v14 = *(_DWORD *)(result + 24);
          BOOL v15 = __OFSUB__(v13, v14);
          int v16 = v13 - v14;
          if (v16 < 0 != v15)
          {
            LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v13);
            WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v13);
            int32x2_t v17 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL);
          }
          else
          {
            LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v16);
            WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v16);
            int32x2_t v17 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL));
          }
          *(_DWORD *)(v7 + 32) = v13;
          int v18 = *(_DWORD *)(v7 + 4);
          if (v18 >= 0) {
            unsigned int v19 = *(_DWORD *)(v7 + 4);
          }
          else {
            unsigned int v19 = -v18;
          }
          if (v18 >= 0) {
            unsigned int v20 = -1;
          }
          else {
            unsigned int v20 = 1;
          }
          int8x8_t v21 = (int8x8_t)vabs_s32(v17);
          int32x2_t v22 = (int32x2_t)vand_s8(v21, (int8x8_t)0x7F0000007FLL);
          a5 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v19 >> 15), v22), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v19 & 0x7FFF), v22), 0xFuLL), vdup_n_s32(v19), (int32x2_t)vshr_n_u32((uint32x2_t)v21, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v17), (int8x8_t)vdup_n_s32(v20), (int8x8_t)vdup_n_s32((v18 >> 31) | 1u))));
          *(double *)(v7 + 12) = a5;
        }
        v7 += 36;
        v11 -= 36;
      }
      while (v11);
    }
  }
  else if (v8)
  {
    uint64_t v23 = 36 * v8;
    int32x2_t v24 = (int *)(v7 + 32);
    do
    {
      unsigned int v25 = 1664525 * *(_DWORD *)a2 + 1013904223;
      *(_DWORD *)a2 = v25;
      int v26 = (v25 + (v25 >> 11)) & *(_DWORD *)(result + 32);
      int v27 = *(_DWORD *)(result + 24);
      BOOL v15 = __OFSUB__(v26, v27);
      int v28 = v26 - v27;
      if (v28 < 0 != v15)
      {
        LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v26);
        WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v26);
        int32x2_t v29 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL);
      }
      else
      {
        LOWORD(a5) = *(_WORD *)(*(void *)(result + 16) + 2 * v28);
        WORD2(a5) = *(_WORD *)(*(void *)(result + 8) + 2 * v28);
        int32x2_t v29 = vneg_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)&a5, 0x10uLL), 0x10uLL));
      }
      *int32x2_t v24 = v26;
      int v30 = *(v24 - 7);
      if (v30 >= 0) {
        unsigned int v31 = *(v24 - 7);
      }
      else {
        unsigned int v31 = -v30;
      }
      if (v30 >= 0) {
        unsigned int v32 = -1;
      }
      else {
        unsigned int v32 = 1;
      }
      int8x8_t v33 = (int8x8_t)vabs_s32(v29);
      int32x2_t v34 = (int32x2_t)vand_s8(v33, (int8x8_t)0x7F0000007FLL);
      a5 = COERCE_DOUBLE(vmul_s32(vmla_s32((int32x2_t)vsra_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v31 >> 15), v34), (uint32x2_t)vmla_s32((int32x2_t)0x400000004000, vdup_n_s32(v31 & 0x7FFF), v34), 0xFuLL), vdup_n_s32(v31), (int32x2_t)vshr_n_u32((uint32x2_t)v33, 0xFuLL)), (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v29), (int8x8_t)vdup_n_s32(v32), (int8x8_t)vdup_n_s32((v30 >> 31) | 1u))));
      *(double *)(v24 - 5) = a5;
      v24 += 9;
      v23 -= 36;
    }
    while (v23);
  }
  return result;
}

uint64_t *Rr2Pcm_AllocateAndInit(uint64_t a1, int *a2, int a3)
{
  uint64_t v6 = (uint64_t *)heap_Calloc(*(void **)(a1 + 8), 1, 40);
  if (v6 && Rr2Pcm_Init(a1, a2, v6, a3))
  {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
    return 0;
  }
  return v6;
}

uint64_t Rr2Pcm_Init(uint64_t a1, int *a2, uint64_t *a3, int a4)
{
  *a3 = a1;
  uint64_t v8 = (void *)heap_Alloc(*(void *)(a1 + 8), 320);
  a3[1] = (uint64_t)v8;
  if (!v8) {
    return 2;
  }
  cstdlib_memset(v8, 0, 0x140uLL);
  uint64_t v9 = (void *)heap_Alloc(*(void *)(a1 + 8), 104);
  a3[2] = (uint64_t)v9;
  if (!v9) {
    return 2;
  }
  cstdlib_memset(v9, 0, 0x68uLL);
  int v10 = (void *)heap_Alloc(*(void *)(a1 + 8), 256);
  a3[3] = (uint64_t)v10;
  if (!v10) {
    return 2;
  }
  cstdlib_memset(v10, 0, 0x100uLL);
  uint64_t v11 = (void *)heap_Alloc(*(void *)(a1 + 8), 72);
  a3[4] = (uint64_t)v11;
  if (!v11) {
    return 2;
  }
  cstdlib_memset(v11, 0, 0x48uLL);
  uint64_t result = Rr2Pcm_InitProps(a1, a2, a3[1]);
  if (!(result | a4))
  {
    int v13 = (int *)a3[1];
    return Rr2Pcm_InitByProps(v13, a3);
  }
  return result;
}

uint64_t Rr2Pcm_InitProps(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)a3 = a1;
  if (a2)
  {
    uint64_t v5 = a2;
    LODWORD(a2) = a2[4];
    int v6 = v5[10];
    int v7 = *v5;
    *(_DWORD *)(a3 + 312) = v5[1];
    *(_DWORD *)(a3 + 16) = 256;
    *(void *)(a3 + 28) = 0x1B000000DCLL;
    if (v7 > 0) {
      int v8 = -1;
    }
    else {
      int v8 = v7;
    }
  }
  else
  {
    int v6 = 0;
    *(_DWORD *)(a3 + 312) = 0;
    *(_DWORD *)(a3 + 16) = 256;
    *(void *)(a3 + 28) = 0x1B000000DCLL;
    int v8 = -1;
  }
  *(void *)(a3 + 36) = 0x140000000ALL;
  if (Rr2Pcm_SetSampleRateDependentParams(a3, (int)a2, v8)) {
    return 1;
  }
  if (v6 != *(_DWORD *)(a3 + 24))
  {
    int v10 = *(_DWORD *)(a3 + 12);
    if (v10 >= *(_DWORD *)(a3 + 28)) {
      int v10 = *(_DWORD *)(a3 + 28);
    }
    *(_DWORD *)(a3 + 24) = v6;
    *(_DWORD *)(a3 + 28) = v10;
    *(_DWORD *)(a3 + 32) = v6 / 4;
    Rr2Pcm_SetDerivedParams((int *)a3);
  }
  *(_OWORD *)(a3 + 48) = xmmword_220781210;
  *(_OWORD *)(a3 + 64) = xmmword_220781220;
  *(void *)(a3 + 80) = 0x100000001;
  *(_OWORD *)(a3 + 96) = xmmword_220781230;
  *(_OWORD *)(a3 + 112) = xmmword_220781240;
  *(void *)(a3 + 128) = 0x40000000333;
  *(_DWORD *)(a3 + 136) = 4200;
  *(_WORD *)(a3 + 164) = 0;
  *(void *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 184) = xmmword_220781250;
  uint64_t result = Rr2Pcm_initProcessMvf(a1, a3 + 200, 0);
  if (result) {
    return 2;
  }
  *(_DWORD *)(a3 + 280) = 1;
  *(_DWORD *)(a3 + 160) = 1;
  *(void *)(a3 + 264) = 0;
  *(void *)(a3 + 272) = 0;
  return result;
}

uint64_t Rr2Pcm_InitByProps(int *a1, uint64_t *a2)
{
  uint64_t v3 = a2[3];
  if (a1)
  {
    uint64_t v4 = a1;
    a2[1] = (uint64_t)a1;
  }
  else
  {
    uint64_t v4 = (int *)a2[1];
  }
  uint64_t v5 = (uint64_t *)a2[2];
  uint64_t v6 = a2[4];
  *(_DWORD *)uint64_t v3 = 12345;
  int v7 = v4[72];
  int v8 = 2 * v7;
  int v9 = v7 + 32 * v4[2] / (2 * v4[27]);
  if (v8 > v9) {
    int v9 = v8;
  }
  *(_DWORD *)(v3 + 104) = v9;
  int v10 = (void *)heap_Alloc(*(void *)(*a2 + 8), 36 * v9);
  *(void *)(v3 + 8) = v10;
  if (!v10) {
    return 2;
  }
  cstdlib_memset(v10, 0, 36 * *(unsigned int *)(v3 + 104));
  uint64_t v11 = (void *)heap_Alloc(*(void *)(*a2 + 8), 36 * *(unsigned int *)(v3 + 104));
  *(void *)uint64_t v6 = v11;
  if (!v11) {
    return 2;
  }
  cstdlib_memset(v11, 0, 36 * *(unsigned int *)(v3 + 104));
  unsigned int v12 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
  *(void *)(v3 + 24) = v12;
  if (!v12) {
    return 2;
  }
  cstdlib_memset(v12, 0, 4 * *(unsigned int *)(v3 + 104));
  if (*(int *)(v3 + 104) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(v3 + 24);
    do
    {
      *(_DWORD *)(v14 + 4 * v13) = v13;
      ++v13;
    }
    while (v13 < *(int *)(v3 + 104));
  }
  Init_SqrtSearch((void *)(v3 + 220));
  uint64_t v15 = *a2;
  uint64_t *v5 = *a2;
  uint64_t result = Init_SinTable(v15, (uint64_t)(v5 + 1), 0);
  if (!result)
  {
    uint64_t result = WindowTrans_Create((uint64_t)v5, v4);
    if (!result)
    {
      uint64_t result = Window_Create((uint64_t)v5, (uint64_t)v4);
      if (!result)
      {
        uint64_t result = NormRand_create((uint64_t)v5);
        if (!result)
        {
          int32x2_t v17 = (void *)heap_Alloc(*(void *)(*a2 + 8), 8 * (v4[3] / 2 + 1));
          *(void *)(v3 + 112) = v17;
          if (!v17) {
            return 2;
          }
          cstdlib_memset(v17, 0, 8 * (v4[3] / 2 + 1));
          int v18 = (void *)heap_Alloc(*(void *)(*a2 + 8), 8 * (v4[3] / 2 + 1));
          *(void *)(v3 + 176) = v18;
          if (!v18) {
            return 2;
          }
          cstdlib_memset(v18, 0, 8 * (v4[3] / 2 + 1));
          int v19 = *(_DWORD *)(v3 + 104) + 2;
          if (v19 <= 3 * v4[72]) {
            int v19 = 3 * v4[72];
          }
          unsigned int v20 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * v19);
          *(void *)(v3 + 152) = v20;
          if (!v20) {
            return 2;
          }
          int v21 = *(_DWORD *)(v3 + 104) + 2;
          if (v21 <= 3 * v4[72]) {
            int v21 = 3 * v4[72];
          }
          cstdlib_memset(v20, 0, 4 * v21);
          int32x2_t v22 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
          *(void *)(v3 + 136) = v22;
          if (!v22) {
            return 2;
          }
          cstdlib_memset(v22, 0, 4 * *(unsigned int *)(v3 + 104));
          uint64_t v23 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
          *(void *)(v3 + 144) = v23;
          if (!v23) {
            return 2;
          }
          cstdlib_memset(v23, 0, 4 * *(unsigned int *)(v3 + 104));
          int32x2_t v24 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * (2 * *(_DWORD *)(v3 + 104)));
          *(void *)(v6 + 32) = v24;
          if (!v24) {
            return 2;
          }
          cstdlib_memset(v24, 0, 4 * (2 * *(_DWORD *)(v3 + 104)));
          unsigned int v25 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
          *(void *)(v6 + 40) = v25;
          if (!v25) {
            return 2;
          }
          cstdlib_memset(v25, 0, 4 * *(unsigned int *)(v3 + 104));
          int v26 = v4[73];
          if (v26 <= *(_DWORD *)(v3 + 104)) {
            int v26 = *(_DWORD *)(v3 + 104);
          }
          int v27 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * (v26 + 2));
          *(void *)(v3 + 160) = v27;
          if (!v27) {
            return 2;
          }
          int v28 = v4[73];
          if (v28 <= *(_DWORD *)(v3 + 104)) {
            int v28 = *(_DWORD *)(v3 + 104);
          }
          cstdlib_memset(v27, 0, 4 * (v28 + 2));
          uint64_t result = DeempFreqResponse_Create((uint64_t)v5, (uint64_t)v4);
          if (!result)
          {
            int v29 = v4[72];
            int v31 = v4[2];
            int v30 = v4[3];
            if (v31 >= 0) {
              int v32 = v4[2];
            }
            else {
              int v32 = v31 + 1;
            }
            int v33 = (v30 * v4[15] + (v32 >> 1)) / v31;
            if (v29 < v33) {
              int v33 = v4[72];
            }
            *(_DWORD *)(v3 + 192) = v33;
            if (v4[10] + v4[9] < 1)
            {
              *(void *)(v3 + 16) = 0;
              *(void *)(v3 + 120) = 0;
              *(void *)(v3 + 240) = 0;
              *(void *)(v3 + 248) = 0;
              *(void *)(v6 + 64) = 0;
            }
            else
            {
              uint64_t result = FrameRateModificationSupport(v4, a2);
              if (result) {
                return result;
              }
              int v30 = v4[3];
              int v29 = v4[72];
            }
            int32x2_t v34 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * (v30 + v29 + 2));
            *(void *)(v3 + 184) = v34;
            if (!v34) {
              return 2;
            }
            cstdlib_memset(v34, 0, 4 * (v4[3] + v4[72] + 2));
            *(void *)(v3 + 184) += 8;
            if (v4[38] && v4[42])
            {
              unsigned int v35 = (void *)heap_Alloc(*(void *)(*a2 + 8), 56);
              v5[10] = (uint64_t)v35;
              if (!v35) {
                return 2;
              }
              cstdlib_memset(v35, 0, 0x38uLL);
              unsigned int v36 = (_OWORD *)v5[10];
              *unsigned int v36 = TD_HP_FILTER_CASCADE_22;
              *(_OWORD *)((char *)v36 + 12) = *(long long *)((char *)&TD_HP_FILTER_CASCADE_22 + 12);
              uint64_t v37 = v5[10];
              *(_OWORD *)(v37 + 40) = unk_220781288;
              *(_OWORD *)(v37 + 28) = *(_OWORD *)&algn_220781270[12];
            }
            int32x2_t v38 = (void *)heap_Alloc(*(void *)(*a2 + 8), 4 * *(unsigned int *)(v3 + 104));
            *(void *)(v3 + 72) = v38;
            if (v38)
            {
              cstdlib_memset(v38, 0, 4 * *(unsigned int *)(v3 + 104));
              *(_WORD *)(v3 + 84) = 0;
              *(_WORD *)(v3 + 52) = 0;
              *(_WORD *)(v6 + 20) = 0;
              *(_DWORD *)(v3 + 86) = 0x4000000;
              *(_DWORD *)(v3 + 80) = 1;
              *(_DWORD *)(v6 + 24) = 1;
              int v39 = 10 * v4[2] * v4[3] / (474 * v4[5]);
              *(_DWORD *)(v3 + 92) = v39;
              int v40 = PositiveShortLog2((__int16)v39);
              *(_DWORD *)(v3 + 96) = v40;
              if (*(_DWORD *)(v3 + 92) > 1 << v40) {
                *(_DWORD *)(v3 + 96) = v40 + 1;
              }
              uint64_t result = 0;
              *(void *)(v6 + 8) = 0;
              *(_DWORD *)(v6 + 28) = 0;
              *(_DWORD *)(v6 + 56) = 0;
              *(_DWORD *)(v6 + 48) = 0;
              *(_DWORD *)(v3 + 228) = 0;
              return result;
            }
            return 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t Rr2Pcm_GetMvf(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 24) + 56);
}

BOOL Rr2Pcm_SetProperty(int a1, uint64_t a2, char *__s1, unsigned __int8 *a4)
{
  BOOL result = 0;
  if (!cstdlib_strcmp(__s1, "PROD_CODE"))
  {
    int v7 = cstdlib_atoi(a4);
    if (Rr2Pcm_SetSampleRateDependentParams(a2, v7, *(_DWORD *)(a2 + 12))) {
      return 1;
    }
  }
  return result;
}

uint64_t Rr2Pcm_SetSampleRateDependentParams(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = 1;
  if (a2 <= 11024)
  {
    if (a2)
    {
      int v5 = 8000;
      if (a2 == 8000)
      {
        int v6 = 0;
        *(_DWORD *)(a1 + 8) = 8000;
        *(void *)(a1 + 20) = 0x2800000100;
        *(_DWORD *)(a1 + 44) = 80;
        if (a3 < 1) {
          a3 = 256;
        }
        int v7 = 40;
        goto LABEL_23;
      }
      if (a2 != 11000) {
        return v4;
      }
      goto LABEL_11;
    }
    int v6 = 0;
    int v5 = 0;
    int v7 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    a3 &= ~(a3 >> 31);
    *(void *)(a1 + 28) = 0;
    *(void *)(a1 + 20) = 0;
  }
  else
  {
    if (a2 <= 21999)
    {
      if (a2 != 11025)
      {
        int v5 = 16000;
        if (a2 != 16000) {
          return v4;
        }
        int v6 = 0;
        *(_DWORD *)(a1 + 8) = 16000;
        *(void *)(a1 + 20) = 0x5000000200;
        *(_DWORD *)(a1 + 44) = 160;
        if (a3 < 1) {
          a3 = 512;
        }
        int v7 = 80;
        goto LABEL_23;
      }
LABEL_11:
      int v6 = 0;
      int v5 = 11000;
      *(_DWORD *)(a1 + 8) = 11000;
      *(void *)(a1 + 20) = 0x3700000100;
      *(_DWORD *)(a1 + 44) = 110;
      if (a3 < 1) {
        a3 = 256;
      }
      int v7 = 55;
      goto LABEL_23;
    }
    int v5 = 22000;
    if (a2 != 22000 && a2 != 22050) {
      return v4;
    }
    *(_DWORD *)(a1 + 8) = 22000;
    *(void *)(a1 + 20) = 0x6E00000200;
    *(_DWORD *)(a1 + 44) = 220;
    if (a3 < 1) {
      a3 = 512;
    }
    int v7 = 110;
    int v6 = 1;
  }
LABEL_23:
  *(_DWORD *)(a1 + 12) = a3;
  unsigned int v8 = a3 >> 1;
  if (*(_DWORD *)(a1 + 28) < (signed int)(a3 >> 1)) {
    unsigned int v8 = *(_DWORD *)(a1 + 28);
  }
  if (v7 >= *(_DWORD *)(a1 + 32)) {
    int v7 = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 32) = v7;
  if (a3)
  {
    if (*(_DWORD *)(a1 + 16) < a3) {
      a3 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = a3;
  }
  if (v6) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  if (v6) {
    int v10 = 968;
  }
  else {
    int v10 = 1024;
  }
  *(_DWORD *)(a1 + 168) = v9;
  *(_DWORD *)(a1 + 172) = v10;
  if (a2) {
    Rr2Pcm_ProcessMvf_SetHbThr(a1 + 200, *(_DWORD *)(a1 + 136), v5);
  }
  return 0;
}

uint64_t Rr2Pcm_SetDerivedParams(int *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = 32 * a1[2];
  a1[35] = 3200 * (int)v2 / v3;
  a1[36] = 1280 * v2 / v3;
  a1[37] = 9600 * (int)v2 / v3;
  a1[11] = 2 * a1[6];
  if ((int)v2 >= 0) {
    int v4 = v2;
  }
  else {
    int v4 = v2 + 1;
  }
  a1[72] = v4 >> 1;
  uint64_t result = PositiveShortLog2((__int16)v2);
  a1[71] = result;
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  a1[73] = v6;
  a1[74] = (440 * (int)v6 + (a1[11] << 7)) / (a1[11] << 8);
  a1[75] = 32 * v7 / v6;
  a1[76] = (v6 << 20) / (32 * v7);
  a1[77] = ((int)v7 + 860160 * a1[6]) / (2 * (int)v7);
  return result;
}

uint64_t FrameRateModificationSupport(int *a1, void *a2)
{
  uint64_t v4 = a2[3];
  unsigned int v5 = 1;
  *(_DWORD *)(v4 + 232) = 1;
  int v6 = a1[6];
  if (a1[7] > v6)
  {
    unsigned int v5 = a1[9] + 1;
    *(_DWORD *)(v4 + 232) = v5;
  }
  if (a1[8] < v6)
  {
    v5 += a1[10];
    *(_DWORD *)(v4 + 232) = v5;
  }
  uint64_t v7 = (void *)heap_Alloc(*(void *)(*a2 + 8), 88 * v5);
  *(void *)(v4 + 240) = v7;
  if (!v7) {
    return 2;
  }
  cstdlib_memset(v7, 0, 88 * *(unsigned int *)(v4 + 232));
  unint64_t v8 = a1[10];
  uint64_t v9 = *(void *)(v4 + 240);
  if ((v8 & 0x80000000) == 0)
  {
    int v10 = a1[8];
    int v11 = ((2 * v10) | 1) * v8;
    int v12 = a1[6];
    int v13 = 2 * v8;
    uint64_t v14 = (v8 + 2) & 0x1FFFFFFFELL;
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(v8);
    int v16 = (int *)(v9 + 92);
    int v17 = 4 * v12 - 4 * v10;
    int v18 = 2 * v12 - 2 * v10;
    int64x2_t v19 = (int64x2_t)xmmword_220774290;
    int64x2_t v20 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v21 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)v19));
      if (v21.i8[0]) {
        *(v16 - 22) = v11 / v13;
      }
      if (v21.i8[4]) {
        *int v16 = (v18 + v11) / v13;
      }
      int64x2_t v19 = vaddq_s64(v19, v20);
      v16 += 44;
      v11 += v17;
      v14 -= 2;
    }
    while (v14);
  }
  int v59 = a2;
  uint64_t v22 = a1[9];
  if ((int)v22 >= 1)
  {
    unint64_t v23 = 0;
    int v24 = a1[6];
    int v25 = a1[7];
    int v26 = ((2 * v24) | 1) * v22;
    int v27 = 2 * v22;
    uint64x2_t v28 = (uint64x2_t)vdupq_n_s64(v22 - 1);
    int v29 = 2 * v25 - 2 * v24;
    int v30 = 4 * v25 - 4 * v24;
    int v31 = (int *)(v9 + 88 * (int)v8 + 180);
    do
    {
      int32x2_t v32 = vmovn_s64((int64x2_t)vcgeq_u64(v28, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v23), (int8x16_t)xmmword_220774290)));
      if (v32.i8[0]) {
        *(v31 - 22) = (v29 + v26) / v27;
      }
      if (v32.i8[4]) {
        *int v31 = (v30 + v26) / v27;
      }
      v23 += 2;
      v31 += 44;
      v26 += v30;
    }
    while (((v22 + 1) & 0x1FFFFFFFELL) != v23);
  }
  if ((int)v8 + (int)v22 < 0)
  {
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v33 = 0;
    while (1)
    {
      int v34 = a1[3];
      uint64_t v35 = v9 + 88 * v33;
      int v37 = *(_DWORD *)(v35 + 4);
      unsigned int v36 = (_DWORD *)(v35 + 4);
      for (int i = 2 * v37; v34 >= i; v34 /= 2)
        ;
      int v39 = 2 * v34;
      if (v39 <= a1[4]) {
        int v39 = a1[4];
      }
      int v40 = (int *)(v9 + 88 * v33);
      *int v40 = v39;
      uint64_t v41 = 32 * a1[2];
      v40[6] = 3200 * v39 / v41;
      v40[7] = 1280 * v39 / v41;
      v40[8] = 9600 * v39 / v41;
      _OWORD v40[2] = i;
      int v42 = v39 >= 0 ? v39 : v39 + 1;
      _OWORD v40[4] = v42 >> 1;
      v40[3] = PositiveShortLog2((__int16)v39);
      uint64_t v43 = *v40;
      v40[5] = (440 * (int)v43 + (v40[2] << 7)) / (v40[2] << 8);
      uint64_t v44 = a1[2];
      v40[9] = 32 * v44 / v43;
      v40[10] = (v43 << 20) / (32 * v44);
      v40[11] = ((int)v44 + 860160 * *v36) / (2 * (int)v44);
      uint64_t v45 = *(void *)(v4 + 240) + 88 * v33;
      uint64_t Base = WindowTrans_Create_Base((void *)(v45 + 64), (_DWORD *)(v45 + 80), *(_DWORD *)(v45 + 20), *(_DWORD *)v45, *(_DWORD *)(v45 + 8));
      uint64_t v9 = *(void *)(v4 + 240);
      if (Base) {
        break;
      }
      uint64_t Base = Window_Create_Base((void *)(v9 + 88 * v33 + 72), *(_DWORD *)(v9 + 88 * v33 + 4));
      uint64_t v9 = *(void *)(v4 + 240);
      if (Base) {
        break;
      }
      uint64_t v47 = 88 * v33;
      unsigned int v48 = (_DWORD *)(v9 + 88 * v33);
      int v49 = v48[4];
      int v50 = a1[2];
      if (v50 >= 0) {
        int v51 = a1[2];
      }
      else {
        int v51 = v50 + 1;
      }
      if (v49 >= (*v48 * a1[15] + (v51 >> 1)) / v50) {
        int v49 = (*v48 * a1[15] + (v51 >> 1)) / v50;
      }
      int v52 = 10 * *v48 * v50 / (474 * a1[5]);
      v48[12] = v49;
      v48[13] = v52;
      int v53 = PositiveShortLog2((__int16)v52);
      uint64_t v9 = *(void *)(v4 + 240);
      *(_DWORD *)(v9 + v47 + 56) = v53;
      if (*(_DWORD *)(v9 + v47 + 52) > 1 << v53) {
        *(_DWORD *)(v9 + v47 + 56) = v53 + 1;
      }
      if (v33++ >= a1[10] + (uint64_t)a1[9])
      {
        uint64_t v55 = 0;
        goto LABEL_41;
      }
    }
    uint64_t v55 = Base;
LABEL_41:
    LODWORD(v8) = a1[10];
  }
  *(void *)(v4 + 248) = v9 + 88 * (int)v8;
  int v56 = (void *)heap_Alloc(*(void *)(*v59 + 8), 36 * *(unsigned int *)(v4 + 104));
  *(void *)(v4 + 16) = v56;
  if (!v56) {
    return 2;
  }
  cstdlib_memset(v56, 0, 36 * *(unsigned int *)(v4 + 104));
  int v57 = (void *)heap_Alloc(*(void *)(*v59 + 8), ((4 * a1[3]) & 0x3FFFFFFF8) + 8);
  *(void *)(v4 + 120) = v57;
  if (!v57) {
    return 2;
  }
  cstdlib_memset(v57, 0, ((4 * a1[3]) & 0x3FFFFFFF8) + 8);
  return v55;
}

void *Rr2Pcm_Deallocate(void *a1)
{
  uint64_t result = Rr2Pcm_Clear(a1);
  if (a1)
  {
    uint64_t v3 = *(void **)(*a1 + 8);
    return heap_Free(v3, (uint64_t)a1);
  }
  return result;
}

void *Rr2Pcm_Clear(void *a1)
{
  uint64_t v3 = (_DWORD *)a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = (void *)a1[3];
  unsigned int v5 = (uint64_t *)a1[4];
  uint64_t v6 = v4[9];
  if (v6)
  {
    heap_Free(*(void **)(*a1 + 8), v6);
    v4[9] = 0;
  }
  uint64_t v7 = v4[3];
  if (v7)
  {
    heap_Free(*(void **)(*a1 + 8), v7);
    _OWORD v4[3] = 0;
  }
  uint64_t v8 = v4[1];
  if (v8)
  {
    heap_Free(*(void **)(*a1 + 8), v8);
    v4[1] = 0;
  }
  if (*v5)
  {
    heap_Free(*(void **)(*a1 + 8), *v5);
    uint64_t *v5 = 0;
  }
  Deinit_SinTable(*a1, v2 + 8);
  Window_Destroy(v2);
  WindowTrans_Destroy(v2);
  NormRand_destroy(v2);
  uint64_t v9 = v4[14];
  if (v9)
  {
    heap_Free(*(void **)(*a1 + 8), v9);
    v4[14] = 0;
  }
  uint64_t v10 = v4[22];
  if (v10)
  {
    heap_Free(*(void **)(*a1 + 8), v10);
    v4[22] = 0;
  }
  uint64_t v11 = v4[19];
  if (v11)
  {
    heap_Free(*(void **)(*a1 + 8), v11);
    v4[19] = 0;
  }
  uint64_t v12 = v4[17];
  if (v12)
  {
    heap_Free(*(void **)(*a1 + 8), v12);
    v4[17] = 0;
  }
  uint64_t v13 = v4[18];
  if (v13)
  {
    heap_Free(*(void **)(*a1 + 8), v13);
    v4[18] = 0;
  }
  uint64_t v14 = v5[4];
  if (v14)
  {
    heap_Free(*(void **)(*a1 + 8), v14);
    v5[4] = 0;
  }
  uint64_t v15 = v5[5];
  if (v15)
  {
    heap_Free(*(void **)(*a1 + 8), v15);
    v5[5] = 0;
  }
  uint64_t v16 = v4[20];
  if (v16)
  {
    heap_Free(*(void **)(*a1 + 8), v16);
    v4[20] = 0;
  }
  if (v3[10] + v3[9] > 0)
  {
    uint64_t v17 = v4[2];
    if (v17)
    {
      heap_Free(*(void **)(*a1 + 8), v17);
      v4[2] = 0;
    }
    uint64_t v18 = v4[15];
    if (v18)
    {
      heap_Free(*(void **)(*a1 + 8), v18);
      v4[15] = 0;
    }
    uint64_t v19 = v4[30];
    if (v19)
    {
      heap_Free(*(void **)(*a1 + 8), v19);
      v4[30] = 0;
    }
  }
  uint64_t v20 = v4[23];
  if (v20)
  {
    v4[23] = v20 - 8;
    heap_Free(*(void **)(*a1 + 8), v20 - 8);
    v4[23] = 0;
  }
  if (v3[38])
  {
    if (v3[42])
    {
      uint64_t v21 = *(void *)(v2 + 80);
      if (v21)
      {
        heap_Free(*(void **)(*a1 + 8), v21);
        *(void *)(v2 + 80) = 0;
      }
    }
  }
  uint64_t result = Rr2Pcm_clearProcessMvf((void *)*a1, a1[1] + 200);
  uint64_t v23 = a1[1];
  if (v23)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v23);
    a1[1] = 0;
  }
  uint64_t v24 = a1[2];
  if (v24)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v24);
    a1[2] = 0;
  }
  uint64_t v25 = a1[3];
  if (v25)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v25);
    a1[3] = 0;
  }
  uint64_t v26 = a1[4];
  if (v26)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v26);
    a1[4] = 0;
  }
  return result;
}

double Rr2Pcm_Reset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  *(_WORD *)(v1 + 84) = 0;
  *(_WORD *)(v1 + 52) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_DWORD *)(v1 + 86) = 0x4000000;
  *(_DWORD *)(v1 + 80) = 1;
  *(void *)(v2 + 8) = 0;
  *(void *)&double result = 1;
  *(void *)(v2 + 24) = 1;
  *(_DWORD *)(v2 + 56) = 0;
  return result;
}

uint64_t PcmOutput_Init(uint64_t result, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = result;
  return result;
}

uint64_t PcmOutput_Reset(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

int *PcmOutput_DeallocateData(int *result)
{
  uint64_t v1 = result;
  if (result[3] < 1) {
    goto LABEL_4;
  }
  uint64_t v2 = *((void *)result + 2);
  if (v2)
  {
    double result = (int *)heap_Free(*(void **)(*(void *)result + 8), v2);
LABEL_4:
    *((void *)v1 + 2) = 0;
  }
  *((void *)v1 + 1) = 0;
  return result;
}

uint64_t PcmOutput_AllocateData(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 12);
  if (v4) {
    BOOL v5 = v4 < a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v6);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v7 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 2 * a2);
  *(void *)(a1 + 16) = v7;
  if (!v7) {
    return 2;
  }
  cstdlib_memset(v7, 0, 2 * a2);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t PcmOutput_SetLength(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = a2;
  return PcmOutput_AllocateData(a1, a2);
}

uint64_t Rr2Pcm_ProcessFrame(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (_DWORD *)a1[1];
  uint64_t v8 = a1[2];
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9 != 1)
  {
    if (v9) {
      goto LABEL_18;
    }
    int v10 = *(_DWORD *)(a2 + 48);
    if (v10)
    {
      if (v10 >= 7040)
      {
        if (v10 <= 0xD200) {
          unint64_t v11 = (40904451 * (unint64_t)(((v10 & 0x1FFFF) << 6) | 0x34u)) >> 32;
        }
        else {
          LOWORD(v11) = 0x8000;
        }
      }
      else
      {
        LOWORD(v11) = 4291;
      }
      *(_WORD *)(v5 + 50) = v11;
      *(_WORD *)(v5 + 48) = ((unsigned __int16)v11 | 0x10C30000u) / (2 * (unsigned __int16)v11);
      goto LABEL_18;
    }
LABEL_9:
    *(_DWORD *)(v5 + 48) = 0;
    goto LABEL_18;
  }
  int v12 = *(_DWORD *)(a2 + 48);
  if (!v12) {
    goto LABEL_9;
  }
  if (v12 <= 18618)
  {
    if (v12 >= 2439) {
      unsigned int v13 = (55 * ((v12 << 15) / 0x1F40u)) >> 7;
    }
    else {
      LOWORD(v13) = 4291;
    }
  }
  else
  {
    LOWORD(v13) = 0x8000;
  }
  *(_WORD *)(v5 + 48) = v13;
  *(_WORD *)(v5 + 50) = ((unsigned __int16)v13 | 0x10C30000u) / (2 * (unsigned __int16)v13);
LABEL_18:
  *(void *)(v5 + 64) = a2;
  uint64_t v14 = *(int **)(a2 + 24);
  uint64_t v15 = *(unsigned int *)(a2 + 40);
  *(void *)(v5 + 212) = 0;
  *(void *)(v5 + 204) = 0;
  int v16 = -50;
  if ((int)v15 >= 1)
  {
    do
    {
      int v18 = *v14++;
      int v17 = v18;
      if (v18 > v16) {
        int v16 = v17;
      }
      --v15;
    }
    while (v15);
  }
  uint64_t v19 = 77824 - v16;
  if (v19 < 0) {
    uint64_t v19 = 81919 - v16;
  }
  unint64_t v20 = (unint64_t)v19 >> 12;
  *(_DWORD *)(v5 + 196) = v20;
  *(_DWORD *)(v5 + 200) = ipow2(v16 + (v20 << 12));
  int v21 = v7[9];
  int v22 = v7[10];
  if (v21 + v22 >= 1)
  {
    int v23 = *(_DWORD *)(a2 + 80);
    int v24 = v23 - 1024;
    if (v23 < 1024)
    {
      int v28 = v7[6];
      int v29 = v28 - v7[8];
      if (v29) {
        int v29 = ((v29 << 10) + 2 * v22 * (1024 - v23) * v28) / (v29 << 11);
      }
      if (v29 >= v22) {
        int v29 = v7[10];
      }
      uint64_t v27 = *(void *)(v5 + 240) + 88 * v22 - 88 * v29;
    }
    else
    {
      int v25 = v7[6];
      int v26 = v7[7] - v25;
      if (v26) {
        int v26 = ((v26 << 10) + 2 * v21 * v24 * v25) / (v26 << 11);
      }
      if (v26 < v21) {
        int v21 = v26;
      }
      uint64_t v27 = *(void *)(v5 + 240) + 88 * v22 + 88 * v21;
    }
    *(void *)(v5 + 248) = v27;
  }
  if (v7[49])
  {
    *(_DWORD *)(v5 + 56) = Rr2Pcm_processMvf((uint64_t)v7, v5, *(void *)(v5 + 152), (_DWORD *)(v5 + 100));
  }
  else
  {
    int v30 = *(_DWORD *)(a2 + 60);
    if (v30)
    {
      if (*(_WORD *)(v5 + 48))
      {
        if (v30 >= v7[34]) {
          int v30 = v7[34];
        }
      }
      else
      {
        int v30 = 0;
      }
    }
    *(_DWORD *)(v5 + 56) = v30;
    *(_DWORD *)(v5 + 100) = 0;
  }
  Rr2Pcm_PrepareHarmonicInfo(v7, v8, v5, v6, 0);
  uint64_t result = Rr2Pcm_SetHarmonicInfo(v7, v8, v5, v6, 0);
  if (!result)
  {
    uint64_t result = Rr2Pcm_ProcessPhases((uint64_t)v7, v8, v5, v6);
    if (!result)
    {
      int32x2_t v32 = *(_DWORD **)(v5 + 248);
      if (v32)
      {
        uint64_t v33 = *(_DWORD **)(v6 + 64);
        if (v33)
        {
          if (*v32 == *v33)
          {
            cstdlib_memcpy(*(void **)(v5 + 16), *(const void **)(v5 + 8), 36 * *(unsigned int *)(v5 + 32));
            *(void *)(v5 + 40) = *(void *)(v5 + 32);
          }
          else
          {
            Rr2Pcm_PrepareHarmonicInfo(v7, v8, v5, v6, 1);
            unint64_t v34 = *(unsigned int *)(v5 + 40);
            uint64_t v35 = *(unsigned int *)(v5 + 32);
            if (*(void *)(v5 + 40) == *(void *)(v5 + 32))
            {
              if ((int)v34 >= 1)
              {
                unsigned int v36 = (_DWORD *)(*(void *)(v5 + 16) + 32);
                int v37 = (_DWORD *)(*(void *)(v5 + 8) + 32);
                do
                {
                  *((_OWORD *)v36 - 2) = *((_OWORD *)v37 - 2);
                  *(v36 - 4) = *(v37 - 4);
                  int v38 = *v37;
                  v37 += 9;
                  *unsigned int v36 = v38;
                  v36 += 9;
                  --v34;
                }
                while (v34);
              }
            }
            else if (*(_WORD *)(v5 + 48))
            {
              if ((int)v34 >= 1 && (int)v35 >= 1)
              {
                unint64_t v39 = 0;
                int v40 = 0;
                uint64_t v41 = *(void *)(v5 + 16);
                do
                {
                  int v42 = *(_DWORD *)(v41 + 36 * v39);
                  if (v42)
                  {
                    uint64_t v43 = v40;
                    uint64_t v44 = (int *)(*(void *)(v5 + 8) + 36 * v40--);
                    do
                    {
                      ++v40;
                      if (v43 >= v35) {
                        break;
                      }
                      int v45 = *v44;
                      v44 += 9;
                      ++v43;
                    }
                    while (!v45);
                  }
                  if (v40 < (int)v35 && (uint64_t v46 = *(void *)(v5 + 8), *(_DWORD *)(v46 + 36 * v40) == v42))
                  {
                    uint64_t v47 = v46 + 36 * v40;
                    uint64_t v48 = v41 + 36 * v39;
                    *(_OWORD *)(v48 + 4) = *(_OWORD *)(v47 + 4);
                    *(_DWORD *)(v48 + 32) = *(_DWORD *)(v47 + 32);
                    ++v40;
                  }
                  else
                  {
                    uint64_t v49 = v41 + 36 * v39;
                    *(void *)(v49 + 12) = 0;
                    *(void *)(v49 + 4) = 0;
                  }
                  ++v39;
                }
                while (v39 < v34 && v40 < (int)v35);
              }
            }
            else
            {
              int v50 = **(_DWORD **)(v6 + 64);
              int v51 = **(_DWORD **)(v5 + 248);
              BOOL v52 = v50 <= v51;
              int v53 = v51 / v50;
              int v54 = v50 / v51;
              if (v52) {
                int v55 = 1;
              }
              else {
                int v55 = v54;
              }
              if (v52) {
                int v56 = v53;
              }
              else {
                int v56 = 1;
              }
              if (v55 <= (int)v34 && v56 <= (int)v35)
              {
                int v57 = v56 - 1;
                uint64_t v58 = v56;
                uint64_t v59 = v55;
                uint64_t v60 = v55 + (uint64_t)(v55 - 1);
                int v61 = (_DWORD *)(*(void *)(v5 + 8) + 36 * (v56 - 1) + 32);
                uint64_t v62 = 36 * v56;
                unsigned int v63 = (_DWORD *)(*(void *)(v5 + 16) + 36 * (v55 - 1) + 16);
                uint64_t v64 = 36 * v55;
                uint64_t v65 = v58 + v57;
                do
                {
                  *((_OWORD *)v63 - 1) = *((_OWORD *)v61 - 2);
                  *unsigned int v63 = *(v61 - 4);
                  v63[4] = *v61;
                  if (v60 >= (int)v34) {
                    break;
                  }
                  v60 += v59;
                  int v61 = (_DWORD *)((char *)v61 + v62);
                  unsigned int v63 = (_DWORD *)((char *)v63 + v64);
                  BOOL v52 = v65 < (int)v35;
                  v65 += v58;
                }
                while (v52);
              }
            }
          }
          *(void *)(v5 + 212) = *(void *)(v5 + 204);
        }
      }
      Rr2Pcm_EnvLineSpectrumToPcm(v7, v8, v5, v6, a3);
      Rr2Pcm_UpdateState(v5, v6);
      return 0;
    }
  }
  return result;
}

double Rr2Pcm_UpdateState(uint64_t a1, uint64_t a2)
{
  cstdlib_memcpy(*(void **)a2, *(const void **)(a1 + 8), 36 * *(unsigned int *)(a1 + 32));
  double result = *(double *)(a1 + 32);
  *(double *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 48);
  *(_DWORD *)(a2 + 18) = *(_DWORD *)(a1 + 50);
  int v5 = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a2 + 52) = v5;
  *(void *)(a2 + 64) = *(void *)(a1 + 248);
  return result;
}

_DWORD *Rr2Pcm_PrepareHarmonicInfo(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = *(_DWORD *)(a3 + 56);
  uint64_t v6 = (void *)(a4 + 64);
  if (!a5) {
    uint64_t v6 = (void *)(a3 + 248);
  }
  uint64_t v7 = (_DWORD *)*v6;
  if (v7) {
    BOOL v8 = a5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = 8;
  if (!v8) {
    uint64_t v9 = 16;
  }
  int v10 = *(_DWORD *)(a3 + 56);
  if (!result[24]) {
    int v10 = result[34];
  }
  if (!result[25]) {
    int v5 = result[34];
  }
  uint64_t v11 = *(void *)(a3 + v9);
  int v12 = v7 + 3;
  unsigned int v13 = v7 + 9;
  uint64_t v14 = v7 + 10;
  BOOL v15 = v7 == 0;
  if (v7) {
    int v16 = v7 + 4;
  }
  else {
    int v16 = result + 72;
  }
  if (v15) {
    int v17 = result + 71;
  }
  else {
    int v17 = v12;
  }
  if (v15) {
    int v18 = result + 75;
  }
  else {
    int v18 = v13;
  }
  int v19 = *v16;
  if (v15) {
    unint64_t v20 = result + 76;
  }
  else {
    unint64_t v20 = v14;
  }
  if (*(_WORD *)(a3 + 48))
  {
    int v21 = *(unsigned __int16 *)(a3 + 50);
    int v22 = 9 - *v17;
    int v23 = (int)(((420 * v21) >> v22) + 2 * result[2]) / (4 * result[2]);
    int v24 = v19 - 1;
    unint64_t v25 = (unint64_t)(v23 + 8) >> 4;
    if (v19 - 1 <= (int)v25 || v19 < 1)
    {
      int v33 = 0;
      int v32 = 0;
      goto LABEL_31;
    }
    int v31 = 0;
    int v32 = 0;
    int v33 = 0;
    int v34 = 32 * v10;
    int v35 = 32 * v5;
    int v57 = *v20;
    int v36 = *v18;
    int v37 = *(unsigned __int16 *)(a3 + 50);
    int v38 = (int)(((420 * v21) >> v22) + 2 * result[2]) / (4 * result[2]);
    while (1)
    {
      v11 += 36;
      v37 += v21;
      unsigned int v39 = 420 * v37;
      int v40 = v32 + 1;
      while (1)
      {
        int v32 = v40;
        int v41 = v38 - 16 * v25 + 8;
        BOOL v42 = v41 == 16;
        if (v38 - 16 * v25 == 8) {
          int v41 = 0;
        }
        if (v42) {
          LODWORD(v25) = v25 + 1;
        }
        *(_DWORD *)(v11 - 16) = v25;
        *(_DWORD *)(v11 - 12) = v41;
        *(void *)(v11 - 36) = 0x7FFF00000001;
        *(_DWORD *)(v11 - 8) = v38;
        *(_DWORD *)(v11 - 4) = 0;
        *(void *)(v11 - 24) = 0x7FFFLL;
        int v38 = (int)((v39 >> v22) + 2 * result[2]) / (4 * result[2]);
        if (result[19])
        {
          int v43 = v38 * v36 / 16;
          if (v43 < v34) {
            goto LABEL_58;
          }
          int v44 = result[33];
          int v45 = 32 * result[34];
          if (v45 > v43)
          {
            if (v45 >= v34) {
              int v46 = v34;
            }
            else {
              int v46 = 32 * result[34];
            }
            int v44 = (((v43 - v46) << 10) / (v45 - v46) * v44 + (1024 - ((v43 - v46) << 10) / (v45 - v46)) * result[32])
                / 1024;
          }
          if (v44)
          {
            unsigned int v47 = 1664525 * *(_DWORD *)a3 + 1013904223;
            *(_DWORD *)a3 = v47;
            int v44 = (*(_DWORD *)(*(void *)(a2 + 96) + 4 * (v47 + (v47 >> 11))) * v44) >> 14;
            if (v44 >= 501) {
              int v44 = 501;
            }
            if (v44 <= -501) {
              int v44 = -501;
            }
          }
          v38 += (v44 * v23) >> 10;
        }
        if (!result[20])
        {
          ++v33;
          goto LABEL_82;
        }
        if (*(_DWORD *)(v11 - 8) * v36 / 16 >= v35) {
          break;
        }
LABEL_58:
        unint64_t v25 = (unint64_t)(v38 + 8) >> 4;
        v11 += 36;
        v39 += 420 * v21;
        v37 += v21;
        int v40 = v32 + 1;
        ++v33;
        if (v24 <= (int)v25 || v32 >= v19) {
          goto LABEL_31;
        }
      }
      int v49 = v38 * v36 / 16;
      int v50 = 32 * result[34];
      if (v50 >= v35) {
        int v51 = v35;
      }
      else {
        int v51 = 32 * result[34];
      }
      if (v49 >= v51)
      {
        int v52 = result[27];
        if (v50 > v49) {
          int v52 = (((v49 - v51) << 10) / (v50 - v51) * v52 + (1024 - ((v49 - v51) << 10) / (v50 - v51)) * result[26])
        }
              / 1024;
      }
      else
      {
        int v52 = 0;
      }
      int v53 = result[21];
      if (v31) {
        BOOL v54 = v53 == 0;
      }
      else {
        BOOL v54 = 1;
      }
      if (v54) {
        int v55 = *(_DWORD *)(v11 - 8) * v36 / 16;
      }
      else {
        int v55 = v31;
      }
      if (!v53) {
        v49 -= 7 * v52 / 8;
      }
      ++v33;
      if (v55 + v52 < v49)
      {
        int v56 = v57 * (v55 + v52);
        int v31 = v55;
        do
        {
          *(_DWORD *)(v11 + 20) = (v56 / 0x10000 + 8) >> 4;
          *(_DWORD *)(v11 + 24) = 8;
          *(void *)uint64_t v11 = 0x7FFF00000000;
          *(_DWORD *)(v11 + 28) = v56 / 0x10000;
          *(_DWORD *)(v11 + 32) = 0;
          *(void *)(v11 + 12) = 0x7FFFLL;
          v11 += 36;
          ++v33;
          v31 += v52;
          v56 += v57 * v52;
        }
        while (v52 + v31 < v49);
      }
LABEL_82:
      unint64_t v25 = (unint64_t)(v38 + 8) >> 4;
      if (v24 <= (int)v25 || v32 >= v19)
      {
LABEL_31:
        if (a5)
        {
          *(_DWORD *)(a3 + 40) = v33;
          *(_DWORD *)(a3 + 44) = v32;
        }
        else
        {
          *(_DWORD *)(a3 + 32) = v33;
          *(_DWORD *)(a3 + 36) = v32;
        }
        return result;
      }
    }
  }
  if (v19 >= 2)
  {
    uint64_t v27 = (_DWORD *)(v11 + 32);
    int v28 = 1;
    int v29 = 16;
    do
    {
      *(v27 - 3) = v28;
      *(v27 - 2) = 8;
      *(v27 - 1) = v29;
      *uint64_t v27 = 0;
      *((void *)v27 - 4) = 0x7FFF00000000;
      ++v28;
      *(void *)(v27 - 5) = 0x7FFFLL;
      v27 += 9;
      v29 += 16;
    }
    while (v19 != v28);
  }
  int v30 = v19 - 1;
  if (a5)
  {
    *(_DWORD *)(a3 + 40) = v30;
    *(_DWORD *)(a3 + 44) = 0;
  }
  else
  {
    *(_DWORD *)(a3 + 32) = v30;
    *(_DWORD *)(a3 + 36) = 0;
  }
  return result;
}

uint64_t GetAuxUvHarmResolution(_DWORD *a1, int a2, int a3)
{
  int v3 = 32 * a1[34];
  if (v3 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = 32 * a1[34];
  }
  if (a3 < v4) {
    return 0;
  }
  uint64_t result = a1[27];
  if (v3 > a3) {
    return ((((a3 - v4) << 10) / (v3 - v4) * (int)result + (1024 - ((a3 - v4) << 10) / (v3 - v4)) * a1[26])
  }
                        / 1024);
  return result;
}

uint64_t GetVoicedAmpAttenuation(_DWORD *a1, int a2, int a3)
{
  int v3 = 32 * a1[34];
  if (v3 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = 32 * a1[34];
  }
  if (a3 < v4) {
    return 1;
  }
  uint64_t result = a1[29];
  if (v3 > a3) {
    return ((((a3 - v4) << 10) / (v3 - v4) * (int)result + (1024 - ((a3 - v4) << 10) / (v3 - v4)) * a1[28])
  }
                        / 1024);
  return result;
}

uint64_t GetNoiseAttenuation(_DWORD *a1, int a2, int a3)
{
  int v3 = 32 * a1[34];
  if (v3 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = 32 * a1[34];
  }
  if (a3 < v4) {
    return 1;
  }
  uint64_t result = a1[31];
  if (v3 > a3) {
    return ((((a3 - v4) << 10) / (v3 - v4) * (int)result + (1024 - ((a3 - v4) << 10) / (v3 - v4)) * a1[30])
  }
                        / 1024);
  return result;
}

uint64_t Rr2Pcm_ProcessMvf_SetProperty(uint64_t a1, uint64_t a2, char *__s1, unsigned __int8 *a4)
{
  if (!cstdlib_strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_SMOOTH_WIN"))
  {
    int v9 = cstdlib_atoi(a4);
    if (v9 < 1)
    {
      *(void *)(a2 + 32) = 0;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 32);
      if (v10)
      {
        heap_Free(*(void **)(a1 + 8), v10);
        *(void *)(a2 + 32) = 0;
      }
      uint64_t v11 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * v9);
      *(void *)(a2 + 32) = v11;
      if (!v11) {
        return 2;
      }
      cstdlib_memset(v11, 0, 4 * v9);
    }
    uint64_t result = 0;
    *(_DWORD *)(a2 + 48) = v9;
    return result;
  }
  int v15 = 0;
  if (cstdlib_strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_THR"))
  {
    if (cstdlib_strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_RATIO_EN_THR"))
    {
      if (cstdlib_strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_LOW_EN_MVF_THR"))
      {
        if (cstdlib_strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_BY_LOW_EN"))
        {
          if (cstdlib_strcmp(__s1, "SYN_DEBUZZ_PROCESS_MVF_BY_RATIO_EN"))
          {
            return 1;
          }
          else
          {
            int v14 = cstdlib_atoi(a4);
            uint64_t result = 0;
            *(_DWORD *)(a2 + 56) = v14 != 0;
          }
        }
        else
        {
          int v13 = cstdlib_atoi(a4);
          uint64_t result = 0;
          *(_DWORD *)(a2 + 52) = v13 != 0;
        }
      }
      else
      {
        int v12 = cstdlib_atoi(a4);
        uint64_t result = 0;
        *(_DWORD *)(a2 + 8) = v12;
      }
    }
    else
    {
      uint64_t result = string2fixed(a1, (char *)a4, 1024, &v15);
      if (!result) {
        *(_DWORD *)(a2 + 16) = v15;
      }
    }
  }
  else
  {
    uint64_t result = string2fixed(a1, (char *)a4, 1024, &v15);
    if (!result) {
      *(_DWORD *)(a2 + 20) = v15;
    }
  }
  return result;
}

uint64_t Rr2Pcm_initProcessMvf(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + 16) = 0x33300000133;
  *(_OWORD *)a2 = xmmword_2207812B0;
  *(_DWORD *)(a2 + 28) = 768;
  if (a3 < 1)
  {
    *(void *)(a2 + 32) = 0;
    goto LABEL_5;
  }
  int v5 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * a3);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    cstdlib_memset(v5, 0, 4 * a3);
LABEL_5:
    uint64_t result = 0;
    *(void *)(a2 + 40) = 0xFFFFFFFFLL;
    *(_DWORD *)(a2 + 48) = a3;
    *(void *)(a2 + 52) = 0x100000001;
    return result;
  }
  return 2;
}

void *Rr2Pcm_clearProcessMvf(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 32);
    if (v3)
    {
      uint64_t result = heap_Free((void *)result[1], v3);
      *(void *)(a2 + 32) = 0;
    }
  }
  return result;
}

uint64_t Rr2Pcm_ProcessMvf_SetHbThr(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 24) = (a2 << 11) / a3;
  return result;
}

uint64_t Rr2Pcm_processMvf(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(unsigned int *)(v4 + 60);
  *a4 = 0;
  int v6 = *(_DWORD *)(a1 + 200);
  if ((int)v5 <= v6) {
    return v5;
  }
  int v8 = *(_DWORD *)(a1 + 204);
  if ((int)v5 >= v8) {
    return v5;
  }
  uint64_t v11 = v5;
  if (*(_DWORD *)(a1 + 252))
  {
    int v12 = *(_DWORD *)(v4 + 64);
    uint64_t v11 = v5;
    if (v12 >= 1)
    {
      int v13 = v12 << 10;
      int v14 = *(_DWORD *)(a1 + 312);
      uint64_t v11 = v5;
      if (v13 < *(_DWORD *)(a1 + 220) * v14)
      {
        int v15 = *(_DWORD *)(a1 + 208);
        uint64_t v11 = *(unsigned int *)(a1 + 200);
        if ((int)v5 < v15) {
          return v11;
        }
        uint64_t v11 = (v6
                           + (((((int)v5 - v15) << 10)
                             / (v8 - v15)
                             * ((((int)v5 - v15) << 10)
                              / (v8 - v15))
                             * (v13
                              / v14)) >> 20)
                           * *(_DWORD *)(a1 + 212)
                           / 1024);
      }
    }
  }
  if (!*(_DWORD *)(a1 + 256)) {
    return v11;
  }
  if (*(_DWORD *)(v4 + 8) && *(_DWORD *)(v4 + 16))
  {
    *a4 = 1;
    if (*(_DWORD *)(a1 + 280) && *(int *)(v4 + 40) >= 2)
    {
      uint64_t v16 = 0;
      do
      {
        unsigned int v17 = *(_DWORD *)(*(void *)(v4 + 24) + 4 * v16 + 4) + (*(_DWORD *)(a2 + 196) << 12);
        *(_DWORD *)(a3 + 4 * v16) = v17;
        *(_DWORD *)(a3 + 4 * v16) = ipow2(v17);
        uint64_t v18 = v16 + 2;
        ++v16;
      }
      while (v18 < *(int *)(*(void *)(a2 + 64) + 40));
    }
  }
  else
  {
    a3 = *(void *)(v4 + 24) + 4;
  }
  int v20 = *(_DWORD *)(v4 + 40) - 1;
  int v21 = v20 * *(_DWORD *)(a1 + 224);
  if (v21 < 1024)
  {
    LODWORD(v23) = 0;
    int v22 = 0;
  }
  else
  {
    int v22 = 0;
    uint64_t v23 = v21 >> 10;
    uint64_t v24 = v23;
    unint64_t v25 = (int *)a3;
    do
    {
      int v26 = *v25++;
      v22 += v26;
      --v24;
    }
    while (v24);
  }
  if ((int)v23 >= v20)
  {
    uint64_t v28 = 0;
    if (v22) {
      goto LABEL_30;
    }
    return v11;
  }
  int v27 = 0;
  uint64_t v23 = v23;
  do
    v27 += *(_DWORD *)(a3 + 4 * v23++);
  while (v20 > (int)v23);
  uint64_t v28 = (uint64_t)v27 << 10;
  if (!v22) {
    return v11;
  }
LABEL_30:
  uint64_t v29 = *(void *)(a1 + 232);
  uint64_t v30 = v28 / v22;
  if (v29)
  {
    int v31 = *(_DWORD *)(a1 + 248);
    int v32 = *(_DWORD *)(a1 + 240);
    if (v32 < 0)
    {
      int v34 = *(_DWORD *)(a1 + 244);
      int v36 = v30;
    }
    else
    {
      int v33 = 1;
      int v34 = *(_DWORD *)(a1 + 240);
      int v35 = v30;
      while (v33 == 1 || v34 != *(_DWORD *)(a1 + 244))
      {
        v35 += *(_DWORD *)(v29 + 4 * v34);
        int v34 = (v34 + 1) % v31;
        ++v33;
      }
      int v36 = v35 / v33;
    }
    if (v32 == v34) {
      *(_DWORD *)(a1 + 240) = (v32 + 1) % v31;
    }
    *(_DWORD *)(v29 + 4 * v34) = v30;
    int v37 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)(a1 + 244) = (*(_DWORD *)(a1 + 244) + 1) % v31;
    if (v37 < 0) {
      *(_DWORD *)(a1 + 240) = 0;
    }
  }
  else
  {
    int v36 = v30;
  }
  if (v36 > *(_DWORD *)(a1 + 216))
  {
    int v38 = 0x100000 / v36;
    if (0x100000 / v36 >= *(_DWORD *)(a1 + 228)) {
      int v38 = *(_DWORD *)(a1 + 228);
    }
    LODWORD(v5) = *(_DWORD *)(a1 + 200)
                + (((((int)v5 - *(_DWORD *)(a1 + 200)) << 10)
                  / *(_DWORD *)(a1 + 212)
                  * ((((int)v5 - *(_DWORD *)(a1 + 200)) << 10)
                   / *(_DWORD *)(a1 + 212))
                  * v38) >> 20)
                * *(_DWORD *)(a1 + 212)
                / 1024;
  }
  if ((int)v5 >= (int)v11) {
    return v11;
  }
  else {
    return v5;
  }
}

uint64_t FindBestRationalFactor(uint64_t result, int a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4 = 0;
  int v5 = 0x7FFFFFFF;
  do
  {
    int v6 = (int *)((char *)&aiRationalFactors + 4 * v4);
    int v7 = *v6;
    int v8 = v6[1];
    int v9 = v7 * result - v8 * a2;
    if (v9 < 0) {
      int v9 = v8 * a2 - v7 * result;
    }
    if ((v7 * (int)result + (v9 << 12)) / (2 * v7 * (int)result) < v5)
    {
      *a3 = v7;
      *a4 = v8;
      int v5 = (v7 * (int)result + (v9 << 12)) / (2 * v7 * (int)result);
    }
    BOOL v10 = v4 >= 0x14;
    v4 += 2;
  }
  while (!v10);
  return result;
}

void *Rr2Pcm_EnvLineSpectrumToPcm(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a3;
  int v8 = (void **)a1;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a3 + 16);
  unint64_t v11 = *(unsigned int *)(a3 + 32);
  unint64_t v12 = *(unsigned int *)(a3 + 40);
  uint64_t v175 = 0;
  int v13 = *(int **)(a3 + 248);
  if (!v13)
  {
    int v18 = 0;
    int v16 = 0;
    int v15 = a1[3];
    int v17 = *(_DWORD *)(a2 + 64);
    goto LABEL_8;
  }
  int v14 = *(int **)(a4 + 64);
  int v15 = *v13;
  if (!v14)
  {
    int v18 = 0;
    int v16 = 0;
    int v17 = v13[20];
    goto LABEL_8;
  }
  int v16 = *v14;
  if (v15 == *v14)
  {
    int v17 = v13[20];
    if (v13[1] == v14[1])
    {
      int v18 = 0;
      int v16 = 0;
LABEL_8:
      int v19 = -14;
      goto LABEL_11;
    }
  }
  else
  {
    int v17 = v13[20];
  }
  int v19 = v14[20] - 14;
  int v18 = 1;
LABEL_11:
  if (*(_WORD *)(a3 + 48))
  {
    ReconstructDftFromHarmonies(a1, a2, a3, a4, v11 - 1, 0);
    *(_DWORD *)(v6 + 204) = v17 + *(_DWORD *)(v6 + 204) - 14;
    if (!v18) {
      goto LABEL_35;
    }
    ReconstructDftFromHarmonies(v8, a2, v6, a4, v12 - 1, 1);
    goto LABEL_34;
  }
  int v20 = *(int **)(a3 + 112);
  *(void *)int v20 = 0;
  int v21 = 2;
  if ((int)v11 >= 1 && v15 >= 2)
  {
    int v22 = (_DWORD *)(v9 + 16);
    uint64_t v23 = v20 + 3;
    int v24 = 4;
    unint64_t v25 = 1;
    do
    {
      *(v23 - 1) = *(v22 - 1);
      *uint64_t v23 = *v22;
      int v26 = v24 + 2;
      if (v25 >= v11) {
        break;
      }
      v22 += 9;
      ++v25;
      v23 += 2;
      BOOL v89 = v15 < v24;
      v24 += 2;
    }
    while (!v89);
    int v21 = v26 - 2;
  }
  int v27 = v15 + 2;
  if (v21 < v15 + 2) {
    bzero(&v20[v21], 4 * (v15 - v21 + 1) + 4);
  }
  ScaleTo16BitSignedRange(v20, v27, (int *)&v175 + 1, (int *)&v175, 0, 0);
  int v28 = *(_DWORD *)(v6 + 208) + HIDWORD(v175);
  *(_DWORD *)(v6 + 204) += v175;
  *(_DWORD *)(v6 + 208) = v28;
  if (v18)
  {
    uint64_t v29 = *(int **)(v6 + 120);
    *(void *)uint64_t v29 = 0;
    int v30 = 2;
    if ((int)v12 >= 1 && v16 >= 2)
    {
      int v31 = (_DWORD *)(v10 + 16);
      int v32 = v29 + 3;
      int v33 = 4;
      unint64_t v34 = 1;
      do
      {
        *(v32 - 1) = *(v31 - 1);
        *int v32 = *v31;
        int v35 = v33 + 2;
        if (v34 >= v12) {
          break;
        }
        v31 += 9;
        ++v34;
        v32 += 2;
        BOOL v89 = v16 < v33;
        v33 += 2;
      }
      while (!v89);
      int v30 = v35 - 2;
    }
    if (v30 < v16 + 2) {
      bzero(&v29[v30], 4 * (v16 - v30 + 1) + 4);
    }
    ScaleTo16BitSignedRange(v29, v16 + 2, (int *)&v175 + 1, (int *)&v175, 0, 0);
    int v19 = v175;
    *(_DWORD *)(v6 + 216) += HIDWORD(v175);
LABEL_34:
    *(_DWORD *)(v6 + 212) += v19;
  }
LABEL_35:
  int v36 = *(int **)(v6 + 112);
  int v37 = *(int **)(v6 + 248);
  int v174 = v18;
  uint64_t v173 = a2;
  if (v18)
  {
    int v38 = *(int **)(a4 + 64);
    int v39 = v38[1];
    int v170 = *v38;
    int v40 = *(_DWORD **)(v6 + 120);
    uint64_t v160 = *((void *)v38 + 9);
    int v18 = *(_DWORD *)(v6 + 216);
    int v163 = *(_DWORD *)(v6 + 212);
  }
  else
  {
    int v40 = 0;
    int v170 = 0;
    int v39 = 0;
    int v163 = 0;
    uint64_t v160 = 0;
  }
  uint64_t v164 = a5;
  int v41 = *(_WORD **)(a5 + 16);
  int __dst = *(_DWORD **)(v6 + 184);
  int v167 = *(_DWORD *)(v6 + 208);
  int v168 = *(_DWORD *)(v6 + 204);
  BOOL v42 = v37 + 2;
  int v43 = v37 + 18;
  BOOL v44 = v37 == 0;
  if (v37)
  {
    int v45 = (unsigned int *)(v37 + 1);
  }
  else
  {
    int v37 = (int *)v8 + 3;
    int v45 = (unsigned int *)(v8 + 3);
  }
  if (v44) {
    int v46 = (int *)v8 + 11;
  }
  else {
    int v46 = v42;
  }
  if (v44) {
    unsigned int v47 = (int *)(v173 + 48);
  }
  else {
    unsigned int v47 = v43;
  }
  uint64_t v48 = *(void *)v47;
  int v161 = *v46;
  uint64_t v169 = *v45;
  uint64_t v49 = *v37;
  v36[1] = v36[v49];
  int v50 = (unsigned __int16 *)call_cfsv_construct((uint64_t)*v8, (uint64_t)v36, v49, 15);
  if (v50)
  {
    int v51 = (__int16 *)v50;
    call_cfsv_changeInputSampleOrder(v50, *(void *)(v6 + 176));
    call_cfsv_rifft(v51, (__int16)v49);
    int v50 = (unsigned __int16 *)v51;
  }
  uint64_t v171 = v49;
  int v52 = v167 - v168;
  uint64_t v166 = (uint64_t)v50;
  if (v174)
  {
    v40[1] = v40[v170];
    int v53 = (unsigned __int16 *)call_cfsv_construct((uint64_t)*v8, (uint64_t)v40, v170, 15);
    if (v53)
    {
      uint64_t v54 = *(void *)(v6 + 176);
      uint64_t v159 = v6;
      int v55 = v8;
      int v56 = v36;
      int v57 = (__int16 *)v53;
      call_cfsv_changeInputSampleOrder(v53, v54);
      call_cfsv_rifft(v57, (__int16)v170);
      int v53 = (unsigned __int16 *)v57;
      int v36 = v56;
      int v8 = v55;
      uint64_t v6 = v159;
    }
    v18 -= v163;
    uint64_t v162 = (uint64_t)v53;
    if (*(_WORD *)(v6 + 48))
    {
      uint64_t v58 = v164;
      uint64_t v59 = a4;
      uint64_t v60 = __dst;
      uint64_t v62 = v169;
      int v61 = v170;
LABEL_70:
      if (v52 < 1)
      {
        uint64_t v74 = v171;
        if (v167 != v168 && (v62 & 0x80000000) == 0)
        {
          uint64_t v82 = v62 + 1;
          uint64_t v83 = v36;
          do
          {
            *v83++ >>= v168 - v167;
            --v82;
          }
          while (v82);
        }
      }
      else
      {
        uint64_t v74 = v171;
        if ((v62 & 0x80000000) == 0)
        {
          uint64_t v75 = v62 + 1;
          unsigned int v76 = v36;
          do
          {
            *v76++ <<= v52;
            --v75;
          }
          while (v75);
        }
      }
      if (v18 < 1)
      {
        if (v18 && v39 >= 1)
        {
          uint64_t v85 = v61 - v39;
          do
          {
            v40[v85] = (int)v40[v85] >> -(char)v18;
            ++v85;
          }
          while (v85 < v61);
        }
      }
      else if (v39 >= 1)
      {
        uint64_t v84 = v61 - v39;
        do
          v40[v84++] <<= v18;
        while (v84 < v61);
      }
      int v80 = v174;
      goto LABEL_97;
    }
    int v61 = v170;
    if (v39 >= 2)
    {
      uint64_t v63 = v39 - 1;
      uint64_t v64 = (__int16 *)(v160 + 2);
      uint64_t v65 = &v40[v170 - v39 + 1];
      do
      {
        int v66 = *v64++;
        *uint64_t v65 = (*v65 * v66) >> 15;
        ++v65;
        --v63;
      }
      while (v63);
    }
    cstdlib_memset(v40, 0, 4 * (v171 - v39 + 1));
    uint64_t v67 = (int)v169;
    if ((int)v169 > 1)
    {
      uint64_t v68 = 2 * v169 - 2;
      uint64_t v69 = v36 + 1;
      do
      {
        *uint64_t v69 = (*v69 * *(__int16 *)(v48 + v68)) >> 15;
        ++v69;
        v68 -= 2;
      }
      while (v68);
      uint64_t v67 = v169;
    }
    unsigned int v70 = v171 - v169;
    uint64_t v58 = v164;
  }
  else
  {
    uint64_t v62 = v169;
    if (*(_WORD *)(v6 + 48))
    {
      uint64_t v162 = 0;
      uint64_t v58 = v164;
      uint64_t v59 = a4;
      uint64_t v60 = __dst;
      int v61 = v170;
      goto LABEL_75;
    }
    uint64_t v67 = (int)v169;
    if ((int)v169 > 1)
    {
      uint64_t v71 = 2 * v169 - 2;
      int v72 = v36 + 1;
      uint64_t v73 = 2;
      do
      {
        v72[(int)v49 - (int)v169] = (v72[(int)v49 - (int)v169] * *(__int16 *)(v48 + v73)) >> 15;
        *int v72 = (*v72 * *(__int16 *)(v48 + v71)) >> 15;
        ++v72;
        v73 += 2;
        v71 -= 2;
      }
      while (v71);
      uint64_t v67 = v169;
    }
    uint64_t v162 = 0;
    unsigned int v70 = v49 - 2 * v169 + 1;
    uint64_t v58 = v164;
    int v61 = v170;
  }
  cstdlib_memset(&v36[v67], 0, 4 * v70);
  uint64_t v59 = a4;
  uint64_t v60 = __dst;
  uint64_t v62 = v169;
  if (v174) {
    goto LABEL_70;
  }
LABEL_75:
  if (v52 < 1)
  {
    if ((v52 & 0x80000000) == 0)
    {
      int v80 = v174;
      uint64_t v74 = v171;
      if (!*((_DWORD *)v8 + 40)) {
        goto LABEL_134;
      }
      goto LABEL_114;
    }
    char v154 = v168 - v167;
    *v36 >>= v168 - v167;
    int v80 = v174;
    uint64_t v74 = v171;
    if ((int)v62 >= 1)
    {
      BOOL v155 = v36;
      uint64_t v156 = v62;
      uint64_t v157 = v36;
      do
      {
        int v158 = v157[1];
        *++uint64_t v157 = v158 >> v154;
        v155[(int)v171 - (int)v62] >>= v154;
        BOOL v155 = v157;
        --v156;
      }
      while (v156);
    }
  }
  else
  {
    *v36 <<= v52;
    if ((int)v62 < 1)
    {
      int v80 = v174;
      uint64_t v74 = v171;
    }
    else
    {
      uint64_t v74 = v171;
      int8x8_t v77 = v36;
      uint64_t v78 = v62;
      uint64_t v79 = v36;
      int v80 = v174;
      do
      {
        int v81 = v79[1];
        *++uint64_t v79 = v81 << v52;
        v77[(int)v171 - (int)v62] <<= v52;
        int8x8_t v77 = v79;
        --v78;
      }
      while (v78);
    }
  }
LABEL_97:
  if (*((_DWORD *)v8 + 40))
  {
    if (v80)
    {
      LODWORD(v86) = v61 - v39;
      int v87 = v40[v61 - v39];
      int v88 = v36[(int)v169];
      BOOL v89 = (v87 - 6) >= 0xFFFFFFF5 && v88 <= 5;
      if (v89 && v88 > -6)
      {
LABEL_130:
        if (v39 >= 2)
        {
          uint64_t v112 = v39 - 1;
          uint64_t v113 = v60 + 1;
          uint64_t v114 = &v40[(int)v86 + 1];
          do
          {
            int v115 = *v114++;
            *v113++ += v115;
            --v112;
          }
          while (v112);
        }
        goto LABEL_138;
      }
      int v91 = (v88 - v87) << 10;
      int v92 = v87 << 10;
      int v93 = v91 / (v39 + (int)v62 - 1);
      if (v39 >= 1)
      {
        uint64_t v86 = (int)v86;
        unint64_t v94 = v92 + 512;
        do
        {
          v40[v86++] -= v94 >> 10;
          v92 += v93;
          v94 += v93;
        }
        while (v86 < v61);
      }
      if ((v62 & 0x80000000) == 0)
      {
        uint64_t v95 = v92;
        uint64_t v96 = v62 + 1;
        unint64_t v97 = v95 + 512;
        uint64_t v98 = v36;
        do
        {
          *v98++ -= v97 >> 10;
          v97 += v93;
          --v96;
        }
        while (v96);
      }
      goto LABEL_128;
    }
LABEL_114:
    LODWORD(v99) = v74 - v62;
    int v100 = v36[(int)v74 - (int)v62];
    int v101 = v36[(int)v169];
    if ((v100 - 6) >= 0xFFFFFFF5 && v101 <= 5 && v101 > -6) {
      goto LABEL_134;
    }
    int v104 = (v101 - v100) << 10;
    int v105 = v100 << 10;
    int v106 = v104 / (v161 - 1);
    if ((int)v62 >= 1)
    {
      uint64_t v99 = (int)v99;
      unint64_t v107 = v105 + 512;
      do
      {
        v36[v99++] -= v107 >> 10;
        v105 += v106;
        v107 += v106;
      }
      while (v99 < v74);
    }
    if ((v62 & 0x80000000) == 0)
    {
      uint64_t v108 = v105;
      uint64_t v109 = v62 + 1;
      unint64_t v110 = v108 + 512;
      int v111 = v36;
      do
      {
        *v111++ -= v110 >> 10;
        v110 += v106;
        --v109;
      }
      while (v109);
    }
  }
LABEL_128:
  if (v80)
  {
    LODWORD(v86) = v61 - v39;
    goto LABEL_130;
  }
LABEL_134:
  if ((int)v62 >= 2)
  {
    uint64_t v116 = v62 - 1;
    unsigned int v117 = v60 + 1;
    uint64_t v118 = &v36[(int)v74 - (int)v62 + 1];
    do
    {
      int v119 = *v118++;
      *v117++ += v119;
      --v116;
    }
    while (v116);
  }
  int v39 = v62;
LABEL_138:
  *(_DWORD *)(v58 + 8) = v39;
  uint64_t v120 = *(int **)(v6 + 184);
  int v121 = *((__int16 *)v8 + 82);
  int v122 = *((_DWORD *)v8 + 42);
  if (*((_WORD *)v8 + 82))
  {
    int v123 = *(_DWORD *)(v59 + 56);
    if (v39 >= 1)
    {
      uint64_t v124 = v39;
      uint64_t v125 = *(int **)(v6 + 184);
      do
      {
        int v123 = *v125 + ((v123 * v121) >> 15);
        *v125++ = v123;
        --v124;
      }
      while (v124);
    }
    *(_DWORD *)(v59 + 56) = v123;
  }
  else
  {
    *(_DWORD *)(v59 + 56) = v120[v39 - 1];
  }
  if (!*((_DWORD *)v8 + 38) || !*((_DWORD *)v8 + 42)) {
    goto LABEL_171;
  }
  if (v122 > 1)
  {
    uint64_t v126 = 0;
    LODWORD(v127) = v122 >> 1;
    uint64_t v128 = *(void *)(v173 + 80);
    if ((int)v127 <= 1) {
      uint64_t v127 = 1;
    }
    else {
      uint64_t v127 = v127;
    }
    do
    {
      uint64_t v129 = (unsigned char *)(v128 + 28 * v126);
      if ((*(_DWORD *)v129 & 0x80000000) != 0)
      {
        if (v39 >= 1)
        {
          int v133 = (unsigned int *)v120;
          uint64_t v134 = v39;
          do
          {
            unsigned int v135 = *v133;
            if ((int)*v133 < 1) {
              unsigned int v136 = -(-v135 >> -*v129);
            }
            else {
              unsigned int v136 = v135 >> -*v129;
            }
            *v133++ = v136;
            --v134;
          }
          while (v134);
        }
      }
      else
      {
        if (*(_DWORD *)v129) {
          BOOL v130 = v39 < 1;
        }
        else {
          BOOL v130 = 1;
        }
        if (!v130)
        {
          int v131 = v120;
          uint64_t v132 = v39;
          do
          {
            *v131++ <<= *(_DWORD *)v129;
            --v132;
          }
          while (v132);
        }
      }
      uint64_t v137 = v128 + 28 * v126;
      uint64_t v138 = (_DWORD *)(v137 + 12);
      *(v120 - 1) = *(_DWORD *)(v137 + 12);
      int v140 = *(_DWORD *)(v137 + 16);
      unsigned int v139 = (_DWORD *)(v137 + 16);
      *(v120 - 2) = v140;
      if (v39 >= 1)
      {
        int v141 = v139 + 1;
        int v143 = v139[1];
        int v142 = v139[2];
        uint64_t v144 = v120;
        uint64_t v145 = v39;
        do
        {
          int v146 = v142 - 2 * v143;
          int v143 = *v144;
          *uint64_t v144 = v146 + *v144 - (*(v144 - 1) * *(v139 - 3) + *(v144 - 2) * *(v139 - 2)) / 0x4000;
          ++v144;
          int v142 = *v141;
          int *v141 = v143;
          v139[2] = v142;
          --v145;
        }
        while (v145);
      }
      _DWORD *v138 = v120[v39 - 1];
      _DWORD *v139 = v120[v39 - 2];
      ++v126;
    }
    while (v126 != v127);
  }
  if (v39 >= 1)
  {
    uint64_t v147 = v39;
    uint64_t v148 = v120;
    do
    {
      *uint64_t v148 = *v148 * *((_DWORD *)v8 + 43) / 1024;
      ++v148;
      --v147;
    }
    while (v147);
LABEL_171:
    if (v39 >= 1)
    {
      uint64_t v149 = v39;
      do
      {
        int v151 = *v120++;
        __int16 v150 = v151;
        int v152 = (v151 >> 31) + 0x7FFF;
        if (((v151 >> 15) + 1) >= 2) {
          __int16 v150 = v152;
        }
        *v41++ = v150;
        --v149;
      }
      while (v149);
    }
  }
  *(_DWORD *)(v58 + 8) = v39;
  cstdlib_memcpy(v60, v36, 4 * v62);
  uint64_t result = call_cfsv_destruct(*v8, v166);
  if (v80) {
    return call_cfsv_destruct(*v8, v162);
  }
  return result;
}

int *ReconstructDftFromHarmonies(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v74 = 0;
  if (a6)
  {
    uint64_t v10 = *(void *)(a4 + 64);
    unint64_t v11 = (uint64_t *)(v10 + 64);
    unint64_t v12 = (int *)(v10 + 20);
    int v13 = (int *)(v10 + 16);
    uint64_t v14 = *(void *)(a3 + 16);
    int v15 = *(int32x2_t **)(a3 + 120);
  }
  else
  {
    uint64_t v16 = *(void *)(a3 + 248);
    uint64_t v14 = *(void *)(a3 + 8);
    int v15 = *(int32x2_t **)(a3 + 112);
    int v17 = (int *)(v16 + 20);
    int v18 = (uint64_t *)(v16 + 64);
    BOOL v19 = v16 == 0;
    if (v16) {
      int v13 = (int *)(v16 + 16);
    }
    else {
      int v13 = a1 + 72;
    }
    if (v19) {
      unint64_t v12 = a1 + 74;
    }
    else {
      unint64_t v12 = v17;
    }
    if (v19) {
      unint64_t v11 = (uint64_t *)(a2 + 40);
    }
    else {
      unint64_t v11 = v18;
    }
  }
  uint64_t v20 = *v11;
  int v21 = *v12;
  int v22 = *v13;
  cstdlib_memset(v15, 0, 8 * (*v13 + 1));
  unsigned int v23 = 0;
  int v24 = a1[69];
  if (v24 >= 1 && (a5 & 0x80000000) == 0)
  {
    unsigned int v23 = 0;
    uint64_t v25 = (a5 + 1);
    int v26 = (int *)(v14 + 4);
    do
    {
      int v28 = *v26;
      v26 += 9;
      unsigned int v27 = v28;
      if ((int)v23 <= v28) {
        unsigned int v23 = v27;
      }
      --v25;
    }
    while (v25);
  }
  if ((a5 & 0x80000000) == 0)
  {
    int v29 = 0;
    int v30 = 2 * v21;
    signed int v31 = (v23 >> 15) * (a1[69] & 0x7FFF) + (((v23 & 0x7FFF) * (a1[69] & 0x7FFF) + 0x4000) >> 15) + v23 * (a1[69] >> 15);
    int v32 = v21 + 1;
    do
    {
      if (v24 < 1 || *(_DWORD *)(v14 + 4) >= v31)
      {
        int v33 = *(_DWORD *)(v14 + 20);
        int v34 = v33 - v21;
        int v35 = (v21 - v33) & ((v33 - v21) >> 31);
        int v36 = v33 + v21;
        if (v33 + v21 >= v22) {
          int v37 = v22 + ~(v33 + v21);
        }
        else {
          int v37 = 0;
        }
        int32x2_t v38 = *(int32x2_t *)(v14 + 12);
        uint64_t v39 = v20 + 2 * *(_DWORD *)(v14 + 24) * ((2 * v21) | 1);
        int8x8_t v40 = (int8x8_t)vcltz_s32(v38);
        if (v35 <= v37 + v30)
        {
          int v41 = v35 + v34;
          BOOL v42 = &v15[v35 + v34];
          int v43 = (__int16 *)(v39 + 2 * v35);
          int8x8_t v44 = (int8x8_t)vabs_s32(v38);
          int32x2_t v45 = (int32x2_t)vshr_n_u32((uint32x2_t)v44, 0xFuLL);
          int32x2_t v46 = (int32x2_t)vand_s8(v44, (int8x8_t)0x7F0000007FLL);
          int32x2_t v47 = vshl_n_s32(v45, 0x10uLL);
          int v48 = v32 + v37 + v33 - v41;
          do
          {
            int v50 = *v43++;
            int v49 = v50;
            BOOL v51 = v50 < 0;
            if (v50 >= 0) {
              unsigned int v52 = v49;
            }
            else {
              unsigned int v52 = -v49;
            }
            if (v51) {
              unsigned int v53 = 1;
            }
            else {
              unsigned int v53 = -1;
            }
            int32x2_t v54 = vdup_n_s32(v52 & 0x7FFF);
            int32x2_t v55 = vdup_n_s32(v52 >> 15);
            int32x2_t v56 = vmla_s32(vmul_s32(v55, v46), v54, v45);
            *BOOL v42 = vmla_s32(*v42, (int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vadd_s32(v56, v56), v47, v55), (uint32x2_t)vmla_s32((int32x2_t)0x200000002000, v54, v46), 0xEuLL), (int32x2_t)vbsl_s8(v40, (int8x8_t)vdup_n_s32(v53), (int8x8_t)vdup_n_s32((v49 >> 31) | 1u)));
            ++v42;
            --v48;
          }
          while (v48);
        }
        if (v35 < 0 && v36 <= v30)
        {
          int v57 = (__int16 *)(v39 + 2 * v36);
          int8x8_t v58 = (int8x8_t)vabs_s32(v38);
          int32x2_t v59 = (int32x2_t)vand_s8(v58, (int8x8_t)0x7F0000007FLL);
          int32x2_t v60 = (int32x2_t)vshr_n_u32((uint32x2_t)v58, 0xFuLL);
          int32x2_t v61 = vshl_n_s32(v60, 0x10uLL);
          int v62 = v32 - v33;
          uint64_t v63 = v15;
          do
          {
            int v65 = *v57++;
            int v64 = v65;
            BOOL v66 = v65 < 0;
            if (v65 >= 0) {
              unsigned int v67 = v64;
            }
            else {
              unsigned int v67 = -v64;
            }
            if (v66) {
              int v68 = 1;
            }
            else {
              int v68 = -1;
            }
            int32x2_t v69 = vdup_n_s32(v67 & 0x7FFF);
            int32x2_t v70 = vdup_n_s32(v67 >> 15);
            int32x2_t v71 = vmla_s32(vmul_s32(v70, v59), v69, v60);
            *uint64_t v63 = vmla_s32(*v63, (int32x2_t)vsra_n_u32((uint32x2_t)vmla_s32(vadd_s32(v71, v71), v61, v70), (uint32x2_t)vmla_s32((int32x2_t)0x200000002000, v69, v59), 0xEuLL), (int32x2_t)vbsl_s8(v40, (int8x8_t)__PAIR64__((v64 >> 31) | 1u, v68), (int8x8_t)vrev64_s32((int32x2_t)__PAIR64__((v64 >> 31) | 1u, v68))));
            ++v63;
            --v62;
          }
          while (v62);
        }
      }
      v14 += 36;
      BOOL v19 = v29++ == a5;
    }
    while (!v19);
  }
  uint64_t result = ScaleTo16BitSignedRange((int *)v15, a1[3] + 2, (int *)&v74 + 1, (int *)&v74, 0, 0);
  if (a6)
  {
    *(_DWORD *)(a3 + 216) += HIDWORD(v74);
    uint64_t v73 = (_DWORD *)(a3 + 212);
  }
  else
  {
    *(_DWORD *)(a3 + 208) += HIDWORD(v74);
    uint64_t v73 = (_DWORD *)(a3 + 204);
  }
  *v73 += v74;
  return result;
}

uint64_t findPhaseAlignment(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(char **)(a4 + 32);
  int v5 = *(char **)(a4 + 40);
  int v8 = *(int **)(a3 + 136);
  int v7 = *(int **)(a3 + 144);
  uint64_t v9 = *(int *)(a4 + 28);
  uint64_t v10 = *(void *)(a3 + 8);
  int v11 = *(_DWORD *)(a3 + 32);
  unint64_t v12 = *(_DWORD **)(a3 + 248);
  int v13 = *(void **)(a3 + 160);
  int v107 = 0;
  int v14 = *(_DWORD *)(a3 + 192);
  if (v14 <= *(_DWORD *)(a4 + 52)) {
    int v14 = *(_DWORD *)(a4 + 52);
  }
  if (v12) {
    int v14 = *v12 * v14 / *((_DWORD *)a1 + 3);
  }
  int v15 = *((_DWORD *)a1 + 71);
  int v16 = *((_DWORD *)a1 + 73);
  uint64_t v17 = *(void *)(a2 + 72);
  uint64_t v18 = *(void *)(a3 + 24);
  uint64_t v106 = *(int *)(a3 + 80);
  uint64_t v19 = *(int *)(a4 + 24);
  int v20 = *(unsigned __int16 *)(a4 + 16);
  *(_WORD *)(a3 + 84) = 0;
  if (!*(_WORD *)(a3 + 48)) {
    return 0;
  }
  int v105 = v13;
  int __dst = v6;
  int v103 = v5;
  int v100 = v20;
  if (v11 != *(_DWORD *)(a3 + 36))
  {
    if (v11)
    {
      int v22 = 0;
      LODWORD(v21) = 0;
      int v28 = 0;
      uint64_t v29 = 36 * v11;
      int v30 = (int *)(v10 + 20);
      do
      {
        if (*v30 > v14) {
          break;
        }
        if (*(v30 - 5))
        {
          *(_DWORD *)(v18 + 4 * (int)v21) = v28;
          v8[(int)v21] = *(v30 - 2);
          int v31 = *(v30 - 1);
          v7[(int)v21] = v31;
          int v32 = v8[(int)v21];
          if (v32 < 0) {
            int v32 = -v32;
          }
          if (v22 > v32) {
            int v32 = v22;
          }
          if (v31 < 0) {
            int v31 = -v31;
          }
          if (v32 <= v31) {
            int v22 = v31;
          }
          else {
            int v22 = v32;
          }
          LODWORD(v21) = v21 + 1;
        }
        ++v28;
        v30 += 9;
        v29 -= 36;
      }
      while (v29);
      goto LABEL_39;
    }
LABEL_38:
    LODWORD(v21) = 0;
    int v22 = 0;
    goto LABEL_39;
  }
  if (!v11) {
    goto LABEL_38;
  }
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v23 = 36 * v11;
  int v24 = (int *)(v10 + 20);
  while (*v24 <= v14)
  {
    v8[v21] = *(v24 - 2);
    int v25 = *(v24 - 1);
    v7[v21] = v25;
    int v26 = v8[v21];
    if (v26 < 0) {
      int v26 = -v26;
    }
    if (v22 > v26) {
      int v26 = v22;
    }
    if (v25 < 0) {
      int v25 = -v25;
    }
    if (v26 <= v25) {
      int v22 = v25;
    }
    else {
      int v22 = v26;
    }
    ++v21;
    v24 += 9;
    v23 -= 36;
    if (!v23)
    {
      LODWORD(v21) = v11;
      break;
    }
  }
LABEL_39:
  uint64_t v96 = v18;
  int v97 = v11;
  uint64_t v98 = v10;
  ScaleTo16BitSignedRange(v8, v21, &v107, 0, 0, v22);
  ScaleTo16BitSignedRange(v7, v21, &v107, 0, 0, v22);
  if (!v100)
  {
    cstdlib_memcpy(__dst, v8, 4 * v21);
    cstdlib_memcpy(v103, v7, 4 * v21);
    uint64_t result = 0;
    *(_DWORD *)(a4 + 28) = v21;
    *(_DWORD *)(a3 + 228) = 0;
    return result;
  }
  int v101 = v7;
  uint64_t v33 = (uint64_t)v105;
  int v34 = v106;
  *int v105 = 0;
  unint64_t v35 = *((unsigned int *)a1 + 73);
  BOOL v36 = (int)v35 >= 4 && (int)v106 <= (int)v21;
  char v38 = !v36 || (int)v19 > (int)v9;
  if (v17)
  {
    if ((v38 & 1) == 0)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = *(void *)(a3 + 8);
      unint64_t v42 = v35 >> 1;
      int v43 = (_DWORD *)v105 + 3;
      uint64_t v44 = 4 * v106 - 4;
      uint64_t v45 = v96 + v44;
      int32x2_t v46 = (char *)v8 + v44;
      int32x2_t v47 = (char *)v101 + v44;
      uint64_t v48 = 4 * v19 - 4;
      int v49 = &__dst[v48];
      int v50 = &v103[v48];
      uint64_t v51 = 2;
      do
      {
        signed int v52 = *(_DWORD *)(v41 + 36 * *(int *)(v45 + 4 * v39) + 20) * (0x100u >> (v15 - 1));
        unint64_t v53 = v51;
        *(v43 - 1) = ((*(_DWORD *)&v49[4 * v40] * *(_DWORD *)&v46[4 * v39]
                     + *(_DWORD *)&v50[4 * v40] * *(_DWORD *)&v47[4 * v39]) >> 15)
                   * *(_DWORD *)(v17 + 4 * v52);
        int v34 = v106;
        *int v43 = ((*(_DWORD *)&v49[4 * v40] * *(_DWORD *)&v47[4 * v39]
               - *(_DWORD *)&v50[4 * v40] * *(_DWORD *)&v46[4 * v39]) >> 15)
             * *(_DWORD *)(v17 + 4 * v52);
        ++v51;
        if (v53 >= v42) {
          break;
        }
        if (2 * v106 + v39 > (int)v21) {
          break;
        }
        uint64_t v54 = 2 * v19 + v40;
        v40 += v19;
        v43 += 2;
        v39 += v106;
      }
      while (v54 <= v9);
      unsigned int v55 = v51 - 1;
      uint64_t v33 = (uint64_t)v105;
      goto LABEL_64;
    }
LABEL_58:
    unsigned int v55 = 1;
    goto LABEL_64;
  }
  if (v38) {
    goto LABEL_58;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  unsigned int v58 = v35 >> 1;
  int32x2_t v59 = (int *)v105 + 3;
  uint64_t v60 = 4 * v106 - 4;
  int32x2_t v61 = (char *)v8 + v60;
  int v62 = (char *)v101 + v60;
  uint64_t v63 = 4 * v19 - 4;
  int v64 = &__dst[v63];
  int v65 = &v103[v63];
  uint64_t v66 = 2;
  do
  {
    *(v59 - 1) = (*(_DWORD *)&v64[4 * v57] * *(_DWORD *)&v61[4 * v56]
                + *(_DWORD *)&v65[4 * v57] * *(_DWORD *)&v62[4 * v56]) >> 15;
    unint64_t v67 = v66;
    *int32x2_t v59 = (*(_DWORD *)&v64[4 * v57] * *(_DWORD *)&v62[4 * v56] - *(_DWORD *)&v65[4 * v57] * *(_DWORD *)&v61[4 * v56]) >> 15;
    ++v66;
    if (v67 >= v58) {
      break;
    }
    if (2 * v106 + v56 > (int)v21) {
      break;
    }
    uint64_t v68 = 2 * v19 + v57;
    v57 += v19;
    v59 += 2;
    v56 += v106;
  }
  while (v68 <= v9);
  unsigned int v55 = v66 - 1;
LABEL_64:
  if (v16 >= (int)(2 * v55))
  {
    do
    {
      LOBYTE(v15) = v15 - 1;
      if (v16 >= 0) {
        int v69 = v16;
      }
      else {
        int v69 = v16 + 1;
      }
      int v16 = v69 >> 1;
    }
    while (v69 >> 1 >= (int)(2 * v55));
  }
  if (v16 <= 16) {
    unsigned int v70 = 16;
  }
  else {
    unsigned int v70 = v16;
  }
  if (v16 >= 16) {
    char v71 = v15;
  }
  else {
    char v71 = 4;
  }
  if (v16 >= 16) {
    uint64_t v72 = (2 * v16);
  }
  else {
    uint64_t v72 = 32;
  }
  if (v70 >= v55)
  {
    bzero((void *)(v33 + 8 * v55), 8 * (v70 - v55) + 8);
    uint64_t v33 = (uint64_t)v105;
  }
  *(_DWORD *)(v33 + 4) = *(_DWORD *)(v33 + 8 * v70);
  uint64_t v73 = (unsigned __int16 *)call_cfsv_construct((uint64_t)*a1, v33, v72, 15);
  uint64_t v74 = (__int16 *)v73;
  if (v73)
  {
    call_cfsv_changeInputSampleOrder(v73, *(void *)(a3 + 176));
    call_cfsv_rifft(v74, (__int16)v72);
  }
  int v75 = *(_DWORD *)v105;
  if ((int)v72 < 2)
  {
    int v77 = 0;
    int v76 = 0;
    int v79 = *(_DWORD *)v105;
  }
  else
  {
    int v76 = 0;
    int v77 = 0;
    uint64_t v78 = 1;
    int v79 = *(_DWORD *)v105;
    do
    {
      int v80 = *((_DWORD *)v105 + v78);
      if (v80 >= v79) {
        int v81 = v76;
      }
      else {
        int v81 = v78;
      }
      if (v80 >= v79) {
        int v82 = v79;
      }
      else {
        int v82 = *((_DWORD *)v105 + v78);
      }
      BOOL v83 = v80 <= v75;
      if (v80 <= v75)
      {
        int v76 = v81;
      }
      else
      {
        int v77 = v78;
        int v75 = *((_DWORD *)v105 + v78);
      }
      if (v83) {
        int v79 = v82;
      }
      ++v78;
    }
    while (v72 != v78);
  }
  if (v75 <= -v79) {
    int v84 = v76;
  }
  else {
    int v84 = v77;
  }
  if (v75 <= -v79) {
    int v85 = -v79;
  }
  else {
    int v85 = v75;
  }
  int v86 = *((_DWORD *)a1 + 16);
  if (!*(_DWORD *)(a4 + 48))
  {
    if (v84 == v76 && v86 == 0)
    {
      int v76 = v84;
    }
    else
    {
      int v76 = v84;
      int v84 = v77;
      if (v86 * v85 >= (v85 - v75) << 10) {
        goto LABEL_116;
      }
    }
LABEL_123:
    *(_DWORD *)(a3 + 228) = 1;
    int v92 = v8;
    int v93 = v101;
    if ((int)v21 >= 1)
    {
      uint64_t v94 = v21;
      do
      {
        *int v92 = -*v92;
        ++v92;
        *int v93 = -*v93;
        ++v93;
        --v94;
      }
      while (v94);
    }
    for (int i = *(_DWORD **)(a3 + 8); i != (_DWORD *)(v98 + 36 * v97); i += 9)
    {
      if (*i) {
        i[8] += *((_DWORD *)a1 + 72);
      }
    }
    goto LABEL_117;
  }
  BOOL v87 = v84 == v77 && v86 == 0;
  if (!v87 && v86 * v85 >= (v85 + v79) << 10) {
    goto LABEL_123;
  }
LABEL_116:
  *(_DWORD *)(a3 + 228) = 0;
  int v76 = v84;
LABEL_117:
  char v89 = 15 - v71;
  if (v34 == 1)
  {
    int v90 = v76 << v89;
  }
  else
  {
    int v91 = ((v76 << v89) + (v34 << 16) - 0x10000) / v34;
    BOOL v36 = v76 <= (int)(v72 >> 1);
    int v90 = ((unsigned __int16)v76 << v89) / (unsigned __int16)v34;
    if (!v36) {
      LOWORD(v90) = v91;
    }
  }
  *(_WORD *)(a3 + 84) = v90;
  call_cfsv_destruct(*a1, (uint64_t)v74);
  cstdlib_memcpy(__dst, v8, 4 * v21);
  cstdlib_memcpy(v103, v101, 4 * v21);
  *(_DWORD *)(a4 + 28) = v21;
  return 1;
}

uint64_t ComparePitches(uint64_t result, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v7 = *(void *)(a3 + 64);
  if (v7) {
    int v8 = (int *)(v7 + 44);
  }
  else {
    int v8 = (int *)(result + 308);
  }
  if (*(_WORD *)(a2 + 48) && *(_WORD *)(a3 + 16))
  {
    int v9 = *v8;
    uint64_t v13 = 0;
    uint64_t result = FindBestRationalFactor(*(unsigned __int16 *)(a3 + 18), *(unsigned __int16 *)(a2 + 50), (_DWORD *)&v13 + 1, &v13);
    int v11 = v13;
    int v10 = HIDWORD(v13);
    *(_DWORD *)(a3 + 24) = HIDWORD(v13);
    *(_DWORD *)(a2 + 80) = v11;
    unsigned int v12 = ((v10 * *(unsigned __int16 *)(a3 + 18) + v11 * *(unsigned __int16 *)(a2 + 50)) * v9 + (v11 << 9))
        / (v11 << 10);
  }
  else
  {
    LOWORD(v12) = 0;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a2 + 80) = 1;
  }
  *a4 = v12;
  return result;
}

void *RandNormTable()
{
  return &alfNormalNoise;
}

uint64_t RandNorm(unsigned int *a1)
{
  unsigned int v1 = 1664525 * *a1 + 1013904223;
  *a1 = v1;
  return alfNormalNoise[(v1 + (v1 >> 11))];
}

uint64_t Init_SinTable(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    int v3 = a3;
  }
  else {
    int v3 = 512;
  }
  if (v3 >= 0) {
    int v4 = v3;
  }
  else {
    int v4 = v3 + 1;
  }
  int v5 = v4 >> 1;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = v3 - 1;
  HIDWORD(v6) = v5;
  LODWORD(v6) = v5 - 32;
  switch((v6 >> 5))
  {
    case 0u:
      uint64_t v7 = &asCos32;
      int v8 = &asSin32;
      goto LABEL_13;
    case 1u:
      uint64_t v7 = &asCos64;
      int v8 = &asSin64;
      goto LABEL_13;
    case 3u:
      uint64_t v7 = &asCos128;
      int v8 = &asSin128;
      goto LABEL_13;
    case 7u:
      uint64_t v7 = &asCos256;
      int v8 = &asSin256;
LABEL_13:
      *(void *)a2 = v8;
      *(void *)(a2 + 8) = v7;
      break;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      break;
  }
  return 0;
}

uint64_t PositiveShortLog2(int a1)
{
  if (a1 < 2) {
    return 0;
  }
  int v2 = a1;
  if ((a1 & 0x4000) != 0) {
    return 14;
  }
  LODWORD(result) = 14;
  do
  {
    uint64_t result = (result - 1);
    if (!result) {
      break;
    }
    __int16 v3 = v2;
    v2 *= 2;
  }
  while ((v3 & 0x2000) == 0);
  return result;
}

uint64_t ipow2(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0) {
    return a1 > 0xFFFFEFFF;
  }
  if (a1 >> 12 > 0x1E) {
    return 0x7FFFFFFFLL;
  }
  unsigned int v2 = a1 & 0xFFF;
  if ((a1 & 0xFFF) != 0)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    LODWORD(v5) = 0x8000;
    do
    {
      unint64_t v5 = ((unint64_t)(ipow2Table[v3 + (v2 & 0xF)] * v5) + 0x4000) >> 15;
      if (v4 > 1) {
        break;
      }
      ++v4;
      v3 += 16;
      BOOL v6 = v2 > 0xF;
      v2 >>= 4;
    }
    while (v6);
  }
  else
  {
    LODWORD(v5) = 0x8000;
  }
  int v7 = 15 - (a1 >> 12);
  if (a1 >= 0xF000) {
    LOBYTE(v7) = 0;
  }
  unsigned int v8 = v5 >> v7;
  int v9 = (a1 >> 12) - 15;
  if (!HIWORD(a1)) {
    LOBYTE(v9) = 0;
  }
  return v8 << v9;
}

uint64_t string2fixed(uint64_t a1, char *__s, int a3, _DWORD *a4)
{
  int v34 = 0;
  size_t v8 = cstdlib_strlen(__s) + 1;
  int v9 = (char *)heap_Alloc(*(void *)(a1 + 8), v8);
  if (!v9) {
    return 2;
  }
  int v10 = v9;
  cstdlib_memset(v9, 0, v8);
  cstdlib_strcpy(v10, __s);
  int v11 = extstdlib_strtok_r(v10, " \t\r\n", &v34);
  if (!v11) {
    return 1;
  }
  unsigned int v12 = (unsigned __int8 *)v11;
  uint64_t v13 = cstdlib_strchr(v11, 46);
  if (v13)
  {
    int v14 = v13;
    *uint64_t v13 = 0;
    int v15 = cstdlib_atol(v12);
    int v18 = v14[1];
    uint64_t v17 = (unsigned __int8 *)(v14 + 1);
    int v16 = v18;
    int v19 = 0;
    if ((v18 - 48) <= 9)
    {
      BOOL v21 = __OFSUB__(a3, 1);
      BOOL v20 = a3 - 1 < 0;
    }
    else
    {
      BOOL v21 = 0;
      BOOL v20 = 1;
    }
    if (v20 != v21)
    {
      int v28 = 1;
    }
    else
    {
      int v27 = 10 * a3;
      int v28 = 1;
      do
      {
        int v19 = v16 + 10 * v19 - 48;
        v28 *= 10;
        int v29 = *++v17;
        int v16 = v29;
        if ((v29 - 48) <= 9)
        {
          BOOL v31 = __OFSUB__(v28, v27);
          BOOL v30 = v28 - v27 < 0;
        }
        else
        {
          BOOL v31 = 0;
          BOOL v30 = 0;
        }
      }
      while (v30 != v31);
    }
    do
    {
      int v33 = *v17++;
      int v32 = v33;
    }
    while ((v33 - 48) < 0xA);
    if ((v32 | 0x20) == 0x65)
    {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v10);
      return 1;
    }
    LODWORD(v26) = (int)(v19 * a3 + (v28 >> 1)) / v28 + v15 * a3;
  }
  else
  {
    uint64_t v23 = cstdlib_atol(v12);
    uint64_t v24 = 2 * a3 * v23;
    unint64_t v25 = v24 + 2;
    if (((a3 * v23) & 0x4000000000000000) == 0) {
      unint64_t v25 = v24 | 1;
    }
    unint64_t v26 = v25 >> 1;
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v10);
  uint64_t result = 0;
  *a4 = v26;
  return result;
}

int *ScaleTo16BitSignedRange(int *result, int a2, int *a3, int *a4, char a5, int a6)
{
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a2)
  {
    if (a6 > 0) {
      goto LABEL_37;
    }
    if (a2 < 1)
    {
      a6 = -1;
LABEL_28:
      if (a3)
      {
        int v13 = *a3;
        do
        {
          unsigned int v14 = HIWORD(a6);
          a6 >>= 1;
          ++v13;
        }
        while (v14);
        *a3 = v13;
        if (v13 - 1 >= 0 && a2 >= 1)
        {
          uint64_t v15 = a2;
          do
          {
            *result++ >>= *a3 + a5;
            --v15;
          }
          while (v15);
        }
      }
      return result;
    }
    uint64_t v9 = a2;
    a6 = -1;
    int v10 = result;
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      if (v12 < 0) {
        int v11 = -v11;
      }
      if (v11 > a6) {
        a6 = v11;
      }
      --v9;
    }
    while (v9);
    if (a6)
    {
LABEL_37:
      if (!(a6 >> 15))
      {
        if (a4)
        {
          int v6 = *a4;
          if (!(a6 >> 14))
          {
            do
            {
              ++v6;
              BOOL v7 = a6 >= 0x2000;
              a6 *= 2;
            }
            while (!v7);
            *a4 = v6;
          }
          if (v6 >= 1 && a2 >= 1)
          {
            uint64_t v8 = a2;
            do
            {
              *result++ <<= *a4;
              --v8;
            }
            while (v8);
          }
        }
        return result;
      }
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t ScaleTo16BitSignedRangeWithSkip(uint64_t result, int a2, int a3, int *a4, int *a5, unsigned int a6)
{
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    uint64_t v6 = a3 * a2;
    if (a6) {
      goto LABEL_37;
    }
    if (!a3)
    {
      a6 = -1;
LABEL_28:
      if (a4)
      {
        int v12 = *a4;
        do
        {
          unsigned int v13 = HIWORD(a6);
          a6 = (int)a6 >> 1;
          ++v12;
        }
        while (v13);
        *a4 = v12;
        if (v12 - 1 >= 0)
        {
          if (a3)
          {
            uint64_t v14 = 0;
            do
            {
              *(_DWORD *)(result + v14) = ((1 << (*a4 - 1)) + *(int *)(result + v14)) >> *a4;
              v14 += a3;
            }
            while (v6 != v14);
          }
        }
      }
      return result;
    }
    uint64_t v10 = 0;
    a6 = -1;
    do
    {
      int v11 = *(_DWORD *)(result + v10);
      if (v11 < 0) {
        int v11 = -v11;
      }
      if (v11 > (int)a6) {
        a6 = v11;
      }
      v10 += a3;
    }
    while (v6 != v10);
    if (a6)
    {
LABEL_37:
      if (!(a6 >> 15))
      {
        if (a5)
        {
          int v7 = *a5;
          if (!(a6 >> 14))
          {
            do
            {
              ++v7;
              BOOL v8 = a6 >= 0x2000;
              a6 *= 2;
            }
            while (!v8);
            *a5 = v7;
          }
          if (v7 >= 1 && a3)
          {
            uint64_t v9 = 0;
            do
            {
              *(_DWORD *)(result + v9) <<= *a5;
              v9 += a3;
            }
            while (v6 != v9);
          }
        }
        return result;
      }
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t CalcSquareNormWthSkip(uint64_t a1, int a2, int a3, int a4, _DWORD *a5, int a6)
{
  int v6 = a3 * a2;
  if (a3 * a2)
  {
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    int v9 = -1;
    do
    {
      int v10 = *(_DWORD *)(a1 + v7);
      if (v10 > v9) {
        int v9 = *(_DWORD *)(a1 + v7);
      }
      uint64_t v8 = (v8 + v10 * v10);
      v7 += a3;
    }
    while (v6 != v7);
    if (v9 <= a4)
    {
      int v11 = 0;
    }
    else
    {
      if (v9 < 46341)
      {
        int v11 = 0;
      }
      else
      {
        int v11 = 0;
        do
        {
          ++v11;
          BOOL v12 = v9 > 0x16A09;
          int v9 = v9 >> 1;
        }
        while (v12);
      }
      uint64_t v13 = 0;
      unsigned int v14 = 0;
      do
      {
        int v15 = (*(int *)(a1 + v13) >> v11) * (*(int *)(a1 + v13) >> v11);
        BOOL v16 = (int)(v15 + v14) < 0;
        BOOL v17 = __CFADD__(v15, v14);
        v14 += v15;
        int v18 = v17 || v16;
        v11 += v18;
        if (v18) {
          unsigned int v14 = (v14 >> 2) | 0x40000000;
        }
        v13 += a3;
      }
      while (v6 != v13);
      uint64_t v19 = 0;
      LODWORD(v8) = 0;
      do
      {
        uint64_t v20 = *(int *)(a1 + v19);
        if (((1 << (v11 - 1)) & v20) != 0) {
          int v21 = ((int)v20 >> v11) + 1;
        }
        else {
          int v21 = (int)v20 >> v11;
        }
        if (!a6) {
          *(_DWORD *)(a1 + v19) = v21;
        }
        uint64_t v8 = (v8 + v21 * v21);
        v19 += a3;
      }
      while (v6 != v19);
    }
  }
  else
  {
    int v11 = 0;
    uint64_t v8 = 0;
  }
  *a5 = v11;
  return v8;
}

uint64_t sqroot5(int *a1, unsigned int a2)
{
  if (!a1)
  {
    if (a2 >= 0x800000)
    {
      uint64_t v6 = 1023;
      return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
    }
    if (!a2)
    {
      uint64_t v6 = 0;
      return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
    }
    LODWORD(v3) = 0;
    goto LABEL_11;
  }
  int v2 = a1[1];
  uint64_t v3 = *a1;
  if (*((_DWORD *)&astSqrtTbl + 2 * v3) > a2) {
    LODWORD(v3) = 0;
  }
  unsigned int v4 = *((_DWORD *)&astSqrtTbl + 2 * v2);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      if (*((_DWORD *)&astSqrtTbl + 2 * (int)v3) >= a2)
      {
LABEL_29:
        uint64_t v6 = (int)v3;
        *a1 = v3;
        return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
      }
      goto LABEL_15;
    }
    uint64_t v6 = v2;
LABEL_28:
    a1[1] = v2;
    return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
  }
  if (a2 >= 0x800000)
  {
    uint64_t v6 = 1023;
    int v2 = 1023;
    goto LABEL_28;
  }
  if (*((_DWORD *)&astSqrtTbl + 2 * (int)v3) >= a2) {
    goto LABEL_29;
  }
LABEL_11:
  int v2 = 1023;
LABEL_15:
  if (v2 - (int)v3 < 2)
  {
LABEL_21:
    if (a1)
    {
      *a1 = v3;
      a1[1] = v2;
    }
    uint64_t v6 = (int)v3;
    if (a2 - *((_DWORD *)&astSqrtTbl + 2 * (int)v3) >= *((_DWORD *)&astSqrtTbl + 2 * v2) - a2) {
      uint64_t v6 = v2;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v6 = (uint64_t)(int)(v2 + v3 + (v2 + (int)v3 < 0)) >> 1;
      unsigned int v5 = *((_DWORD *)&astSqrtTbl + 2 * ((v2 + (int)v3) / 2));
      if (v5 == a2) {
        break;
      }
      if (v5 > a2) {
        int v2 = (v2 + (int)v3) / 2;
      }
      else {
        LODWORD(v3) = (v2 + (int)v3) / 2;
      }
      if (v2 - (int)v3 <= 1) {
        goto LABEL_21;
      }
    }
  }
  return *((unsigned int *)&astSqrtTbl + 2 * v6 + 1);
}

double Init_SqrtSearch(void *a1)
{
  *(void *)&double result = 0x3FF00000000;
  *a1 = 0x3FF00000000;
  return result;
}

uint64_t GetInterpolatedValue(uint64_t a1, unsigned int *a2, int a3, int a4, _DWORD *a5, int a6)
{
  if (a5) {
    LODWORD(v6) = *a5;
  }
  else {
    LODWORD(v6) = 0;
  }
  if ((int)v6 >= a3) {
    goto LABEL_16;
  }
  uint64_t v6 = (int)v6;
  while (*(_DWORD *)(a1 + 4 * v6) <= a4)
  {
    if (a3 == ++v6)
    {
      LODWORD(v6) = a3;
      goto LABEL_16;
    }
  }
  if ((int)v6 < 1)
  {
LABEL_16:
    if (v6)
    {
      uint64_t result = a2[a3 - 1];
      if (!a5) {
        return result;
      }
    }
    else
    {
      uint64_t result = *a2;
      if (!a5) {
        return result;
      }
    }
    goto LABEL_20;
  }
  int v7 = *(_DWORD *)(a1 + 4 * (v6 - 1));
  unsigned int v8 = a2[(v6 - 1)];
  uint64_t v9 = v6;
  int v10 = *(_DWORD *)(a1 + v9 * 4);
  unsigned int v11 = a2[v9];
  int v12 = a4 - v7;
  if (!a6)
  {
    uint64_t result = ((int)((v12 << 12) / (v10 - v7) * v11 + (4096 - (v12 << 12) / (v10 - v7)) * v8) / 4096);
    if (!a5) {
      return result;
    }
    goto LABEL_20;
  }
  if (v12 <= v10 - a4) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = v11;
  }
  if (a5) {
LABEL_20:
  }
    *a5 = v6;
  return result;
}

uint64_t FixedRFFT(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (a2 <= 127)
  {
    if (a2 == 32)
    {
      int v69 = (char *)&RFFT_table_32;
      int v3 = 5;
    }
    else
    {
      if (a2 != 64) {
        return result;
      }
      int v69 = (char *)&RFFT_table_64;
      int v3 = 6;
    }
  }
  else
  {
    switch(a2)
    {
      case 128:
        int v69 = (char *)&RFFT_table_128;
        int v3 = 7;
        break;
      case 256:
        int v69 = (char *)&RFFT_table_256;
        int v3 = 8;
        break;
      case 512:
        int v69 = (char *)&RFFT_table_512;
        int v3 = 9;
        break;
      default:
        return result;
    }
  }
  int v67 = v3;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = (a2 - 1);
  do
  {
    if (v4 < v5)
    {
      int v7 = *(_DWORD *)(result + 4 * v5);
      *(_DWORD *)(result + 4 * v5) = *(_DWORD *)(result + 4 * v4);
      *(_DWORD *)(result + 4 * v4) = v7;
    }
    int v8 = a2;
    do
    {
      int v9 = v5;
      int v10 = v8 >> 1;
      BOOL v11 = __OFSUB__(v5, v8 >> 1);
      v5 -= v8 >> 1;
      v8 >>= 1;
    }
    while (v5 < 0 == v11);
    int v5 = v9 + v10;
    ++v4;
  }
  while (v4 != v6);
  int v12 = 0;
  uint64_t v13 = (unsigned __int16)a2;
  int v14 = 4;
  do
  {
    if (v12 < a2)
    {
      uint64_t v15 = v12;
      BOOL v16 = (int *)(result + 4 + 4 * v12);
      do
      {
        int v17 = *(v16 - 1) + *v16;
        int v18 = v17 - 2 * *v16;
        *(v16 - 1) = v17;
        *BOOL v16 = v18;
        v15 += v14;
        v16 += v14;
      }
      while (v15 < (unsigned __int16)a2);
    }
    int v12 = 2 * v14 - 2;
    v14 *= 4;
  }
  while (v12 < (int)v6);
  int v19 = 2;
  int v68 = 1;
  uint64_t v105 = result;
  uint64_t v94 = (unsigned __int16)a2;
  do
  {
    int v75 = v19;
    int v20 = 2 * v19;
    int v83 = (2 * v19) >> 2;
    int v81 = (2 * v19) >> 3;
    int v70 = 4 * v19;
    int v73 = 2 * v19;
    int v21 = 0;
    int v22 = 4 * v19;
    uint64_t v88 = 2 * v83 + v81;
    do
    {
      uint64_t v23 = v21;
      uint64_t v24 = v22;
      uint64_t v103 = 4 * v81 + 4 * v21;
      uint64_t v25 = 4 * v22;
      uint64_t v101 = v83 + (uint64_t)v81 + v21;
      uint64_t v99 = v88 + v21;
      uint64_t v26 = 8 * v83 + 4 * v21;
      uint64_t v97 = v88 + v83 + v21;
      uint64_t v27 = v2;
      uint64_t v28 = v21;
      uint64_t v29 = 12 * v83 + 4 * v21;
      uint64_t v95 = v22;
      uint64_t v92 = v25;
      do
      {
        int v30 = *(_DWORD *)(v27 + v29) - *(_DWORD *)(v27 + v26);
        *(_DWORD *)(v27 + v29) = v30;
        int v31 = *(_DWORD *)(v27 + 4 * v23) - (v30 + 2 * *(_DWORD *)(v27 + v26));
        *(_DWORD *)(v27 + v26) = v31;
        *(_DWORD *)(v27 + 4 * v23) = 2 * *(_DWORD *)(v27 + 4 * v23) - v31;
        if (v20 != 4)
        {
          int v32 = QMul31(*(_DWORD *)(v27 + 4 * v99) - *(_DWORD *)(v27 + 4 * v97), 1518500250);
          int v33 = *(_DWORD *)(v27 + 4 * v101);
          uint64_t result = QMul31(*(_DWORD *)(v27 + 4 * v97) + *(_DWORD *)(v27 + 4 * v99), 1518500250);
          uint64_t v25 = v92;
          uint64_t v13 = v94;
          uint64_t v24 = v95;
          int v20 = v73;
          *(_DWORD *)(v27 + 4 * v97) = v33 - result;
          *(_DWORD *)(v27 + 4 * v99) = v33 - result - 2 * *(_DWORD *)(v27 + 4 * v101);
          *(_DWORD *)(v27 + 4 * v101) = *(_DWORD *)(v27 + v103) - v32;
          *(_DWORD *)(v27 + v103) += v32;
        }
        v28 += v24;
        v27 += v25;
      }
      while (v28 < v13);
      int v21 = 2 * (v24 - v75);
      int v22 = 4 * v24;
      uint64_t v2 = v105;
    }
    while (v21 < a2);
    if (v20 >= 16)
    {
      if (v81 <= 2) {
        uint64_t v34 = 2;
      }
      else {
        uint64_t v34 = v81;
      }
      uint64_t v71 = v34;
      int v35 = 2 * v83 - 1;
      int v36 = v35 + v83;
      int v37 = 4 * v83 - 1;
      int v38 = v83 - 1;
      uint64_t v78 = 4;
      uint64_t v79 = v83 + 1;
      uint64_t v72 = 1;
      uint64_t v77 = (2 * v83) | 1;
      uint64_t v76 = v79 + 2 * v83;
      do
      {
        int v39 = 0;
        uint64_t v40 = (int *)&v69[16 * (v72 << (v67 + ~(_BYTE)v68)) - 16];
        int v41 = *v40;
        int v42 = v70;
        int v86 = v35;
        int v85 = v36;
        int v84 = v37;
        int v80 = *v40;
        int v82 = v38;
        do
        {
          uint64_t v43 = v39;
          uint64_t v96 = v42;
          uint64_t v93 = v78 + 4 * v39;
          uint64_t v90 = v79 + v39;
          uint64_t v91 = 4 * v42;
          uint64_t v44 = v2;
          uint64_t v87 = v76 + v39;
          uint64_t v89 = v77 + v39;
          do
          {
            int v104 = v38 + v43;
            unsigned int v102 = v35 + v43;
            int v45 = v36 + v43;
            int v46 = v37 + v43;
            int v47 = QMul31(*(_DWORD *)(v44 + 4 * v89), v41);
            int v48 = *(_DWORD *)(v2 + 4 * v45);
            int v49 = v40[1];
            int v100 = QMul31(v48, v49) + v47;
            int v50 = QMul31(*(_DWORD *)(v105 + 4 * v45), v41);
            int v98 = v50 - QMul31(*(_DWORD *)(v44 + 4 * v89), v49);
            int v51 = v40[2];
            int v52 = QMul31(*(_DWORD *)(v44 + 4 * v87), v51);
            int v53 = v40[3];
            int v54 = QMul31(*(_DWORD *)(v105 + 4 * v46), v53) + v52;
            int v55 = QMul31(*(_DWORD *)(v105 + 4 * v46), v51);
            int v56 = QMul31(*(_DWORD *)(v44 + 4 * v87), v53);
            int v38 = v82;
            int v37 = v84;
            uint64_t v13 = v94;
            int v57 = v55 - v56;
            int v58 = v55 - v56 + v98;
            uint64_t result = v102;
            int v59 = *(_DWORD *)(v105 + 4 * (int)v102);
            int v60 = v58 + v59;
            *(_DWORD *)(v44 + 4 * v89) = v58 - v59;
            int v61 = v54 + v100;
            *(_DWORD *)(v105 + 4 * v46) = v60;
            int v62 = v100 - v54;
            uint64_t v2 = v105;
            int v63 = *(_DWORD *)(v44 + 4 * v90);
            *(_DWORD *)(v105 + 4 * v45) = -v63 - v62;
            *(_DWORD *)(v44 + 4 * v87) = v63 - v62;
            int v36 = v85;
            int v64 = *(_DWORD *)(v44 + v93);
            *(_DWORD *)(v105 + 4 * (int)v102) = v64 - v61;
            *(_DWORD *)(v44 + v93) = v64 + v61;
            int v35 = v86;
            int v65 = v98 - v57;
            int v41 = v80;
            int v66 = *(_DWORD *)(v105 + 4 * v104);
            *(_DWORD *)(v105 + 4 * v104) = v66 - v65;
            *(_DWORD *)(v44 + 4 * v90) = v66 + v65;
            v43 += v96;
            v44 += v91;
          }
          while (v43 < v94);
          int v39 = 2 * (v96 - v75);
          int v42 = 4 * v96;
        }
        while (v39 < a2);
        v78 += 4;
        ++v79;
        ++v76;
        ++v77;
        int v35 = v86 - 1;
        int v36 = v85 - 1;
        int v37 = v84 - 1;
        int v38 = v82 - 1;
        ++v72;
      }
      while (v72 != v71);
    }
    int v19 = v73;
    ++v68;
  }
  while (v68 != v67);
  return result;
}

int *FixedIRFFT(int *result, int a2)
{
  uint64_t v2 = result;
  if (a2 <= 127)
  {
    if (a2 == 32)
    {
      uint64_t v74 = (char *)&RFFT_table_32;
      int v3 = 5;
    }
    else
    {
      if (a2 != 64) {
        return result;
      }
      uint64_t v74 = (char *)&RFFT_table_64;
      int v3 = 6;
    }
  }
  else
  {
    switch(a2)
    {
      case 128:
        uint64_t v74 = (char *)&RFFT_table_128;
        int v3 = 7;
        break;
      case 256:
        uint64_t v74 = (char *)&RFFT_table_256;
        int v3 = 8;
        break;
      case 512:
        uint64_t v74 = (char *)&RFFT_table_512;
        int v3 = 9;
        break;
      default:
        return result;
    }
  }
  int v4 = 2 * a2;
  uint64_t result = (int *)a2;
  int v73 = 1;
  uint64_t v113 = v2;
  int v78 = a2;
  unsigned int v102 = (int *)a2;
  int v72 = v3;
  do
  {
    unsigned int v79 = v4 >> 1;
    uint64_t v5 = v4 >> 3;
    unsigned int v84 = v4;
    uint64_t v82 = v4 >> 4;
    uint64_t v71 = (a2 - 1);
    int v6 = 0;
    uint64_t v95 = v82 + v5;
    uint64_t v93 = v82 + 2 * v5;
    uint64_t v91 = 8 * v5;
    uint64_t v89 = 12 * v5;
    uint64_t v87 = 3 * v5 + v82;
    uint64_t v98 = v5;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = v4;
      uint64_t v114 = 4 * v82 + 4 * v6;
      uint64_t v9 = 4 * v4;
      uint64_t v111 = v95 + v6;
      uint64_t v10 = v5 + v6;
      uint64_t v109 = v93 + v6;
      uint64_t v11 = v91 + 4 * v6;
      uint64_t v103 = v87 + v6;
      uint64_t v12 = v6;
      uint64_t v13 = v89 + 4 * v6;
      uint64_t v105 = v9;
      uint64_t v107 = v4;
      uint64_t v100 = v6;
      do
      {
        int v14 = v2[v7];
        int v15 = *(int *)((char *)v2 + v11);
        v2[v7] = v15 + v14;
        v2[v10] *= 2;
        int v16 = v14 - v15;
        *(int *)((char *)v2 + v11) = v16 - 2 * *(int *)((char *)v2 + v13);
        *(int *)((char *)v2 + v13) = v16 + 2 * *(int *)((char *)v2 + v13);
        if (v5 != 1)
        {
          int v17 = QMul31(v2[v111] - *(int *)((char *)v2 + v114), 1518500250);
          int v18 = QMul31(v2[v109] + v2[v103], 1518500250);
          uint64_t v5 = v98;
          uint64_t v7 = v100;
          uint64_t v9 = v105;
          uint64_t v8 = v107;
          *(int *)((char *)v2 + v114) += v2[v111];
          v2[v111] = v2[v103] - v2[v109];
          v2[v109] = -2 * (v18 + v17);
          int v19 = v17 - v18;
          uint64_t result = v102;
          v2[v103] = 2 * v19;
        }
        v12 += v8;
        uint64_t v2 = (int *)((char *)v2 + v9);
      }
      while (v12 < (uint64_t)result);
      int v6 = 2 * v8 - v79;
      int v4 = 4 * v8;
      a2 = v78;
      uint64_t v2 = v113;
    }
    while (v6 < v78);
    if (v84 >= 0x20)
    {
      int v86 = 0;
      int v75 = v84 & 0x7FFFFFFE;
      if (v82 <= 2) {
        uint64_t v20 = 2;
      }
      else {
        uint64_t v20 = v82;
      }
      uint64_t v76 = v20;
      int v21 = 2 * v5 - 1;
      int v22 = v21 + v5;
      int v23 = 4 * v5 - 1;
      int v24 = v5 - 1;
      uint64_t v83 = 4;
      uint64_t v85 = v5 + 1;
      uint64_t v77 = 1;
      uint64_t v80 = v5 + 1 + 2 * v5;
      uint64_t v81 = (2 * v5) | 1;
      int v94 = v21;
      int v92 = v21 + v5;
      int v90 = v23;
      int v88 = v5 - 1;
      do
      {
        int v25 = 0;
        uint64_t v26 = (int *)&v74[16 * (v77 << (v73 - 1)) - 16];
        int v27 = *v26;
        int v28 = v75;
        int v112 = *v26;
        do
        {
          uint64_t v29 = v25;
          uint64_t v104 = v28;
          uint64_t v99 = 4 * v28;
          uint64_t v101 = v83 + 4 * v25;
          uint64_t v96 = v81 + v25;
          uint64_t v97 = v85 + v25;
          int v30 = v86 + v25;
          int v31 = v2;
          uint64_t v115 = v80 + v25;
          do
          {
            int v32 = v21 + v30;
            int v108 = v22 + v30;
            int v110 = v23 + v30;
            int v33 = *(int *)((char *)v31 + v101);
            int v34 = v2[v21 + v30];
            int v35 = v33 - v34;
            *(int *)((char *)v31 + v101) = v34 + v33;
            int v36 = v2[v24 + v30];
            int v37 = v31[v97];
            int v38 = v36 - v37;
            v2[v24 + v30] = v37 + v36;
            int v39 = v2[v110];
            int v40 = v31[v96];
            int v41 = v40 + v39;
            v2[v32] = v39 - v40;
            int v42 = v31[v115];
            int v43 = v2[v108];
            v31[v97] = v42 - v43;
            int v44 = v35 - (v43 + v42);
            int v106 = v43 + v42 + v35;
            int v45 = v38 - v41;
            int v46 = v41 + v38;
            int v47 = QMul31(v44, v27);
            int v48 = v26;
            int v49 = v26[1];
            v31[v96] = QMul31(v45, v49) + v47;
            int v50 = QMul31(v45, v112);
            int v51 = v49;
            uint64_t v26 = v48;
            v113[v108] = QMul31(v44, v51) - v50;
            int v52 = v48[2];
            int v53 = QMul31(v106, v52);
            int v54 = v48[3];
            v31[v115] = v53 - QMul31(v46, v54);
            int v55 = QMul31(v46, v52);
            uint64_t v2 = v113;
            int v56 = QMul31(v106, v54);
            int v27 = v112;
            int v24 = v88;
            int v23 = v90;
            int v22 = v92;
            int v21 = v94;
            v113[v110] = v56 + v55;
            uint64_t result = v102;
            v29 += v104;
            int v31 = (int *)((char *)v31 + v99);
            v30 += v104;
          }
          while (v29 < (uint64_t)v102);
          int v25 = 2 * v104 - v79;
          int v28 = 4 * v104;
          a2 = v78;
        }
        while (v25 < v78);
        v83 += 4;
        ++v85;
        ++v80;
        ++v81;
        --v86;
        ++v77;
      }
      while (v77 != v76);
    }
    int v4 = v79;
    ++v73;
  }
  while (v73 != v72);
  int v57 = 0;
  int v58 = 4;
  do
  {
    if (v57 < a2)
    {
      uint64_t v59 = v57;
      int v60 = &v2[v57 + 1];
      do
      {
        int v61 = *(v60 - 1) + *v60;
        int v62 = v61 - 2 * *v60;
        *(v60 - 1) = v61;
        *int v60 = v62;
        v59 += v58;
        v60 += v58;
      }
      while (v59 < (uint64_t)result);
    }
    int v57 = 2 * v58 - 2;
    v58 *= 4;
  }
  while (v57 < (int)v71);
  uint64_t v63 = 0;
  int v64 = 0;
  do
  {
    if (v63 < v64)
    {
      int v65 = v2[v64];
      v2[v64] = v2[v63];
      v2[v63] = v65;
    }
    int v66 = a2;
    do
    {
      int v67 = v64;
      int v68 = v66 >> 1;
      BOOL v69 = __OFSUB__(v64, v66 >> 1);
      v64 -= v66 >> 1;
      v66 >>= 1;
    }
    while (v64 < 0 == v69);
    int v64 = v67 + v68;
    ++v63;
  }
  while (v63 != v71);
  uint64_t v70 = a2;
  do
  {
    *v2++ >>= v72;
    --v70;
  }
  while (v70);
  return result;
}

uint64_t QMul31(int a1, int a2)
{
  if (a1 >= 0) {
    unsigned int v2 = a1;
  }
  else {
    unsigned int v2 = -a1;
  }
  int v3 = (a1 >> 31) | 1;
  if (a2 >= 0) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = -a2;
  }
  if (a2 < 0) {
    int v3 = -v3;
  }
  return ((((v4 & 0x7FFF) * (v2 >> 15) + (v4 >> 15) * (v2 & 0x7FFF)) >> 16) + (((v4 >> 15) * (v2 >> 15)) >> 1)) * v3;
}

uint64_t c_abs(uint64_t result)
{
  if ((int)result >= 0) {
    return result;
  }
  else {
    return -(int)result;
  }
}

uint64_t call_cfsv_construct(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  uint64_t result = heap_Calloc(*(void **)(a1 + 8), 24, 1);
  if (result)
  {
    *(_WORD *)uint64_t result = a3;
    *(void *)(result + 8) = a2;
    *(_DWORD *)(result + 16) = 0;
    *(_WORD *)(result + 20) = a4;
  }
  return result;
}

void *call_cfsv_destruct(void *result, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 8)) {
      return heap_Free((void *)result[1], a2);
    }
  }
  return result;
}

uint64_t call_cfsv_rfft(__int16 *a1, int a2)
{
  if (*a1 < a2) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 <= 127)
  {
    if (a2 != 32 && a2 != 64) {
      return result;
    }
  }
  else if (a2 != 128 && a2 != 512 && a2 != 256)
  {
    return result;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = (unsigned __int16)a2;
  do
  {
    int v9 = ((int)c_abs(*(unsigned int *)(*((void *)a1 + 1) + 4 * v5)) >> v7) + v6;
    if (v9 <= 0x3FFFFFFF) {
      __int16 v10 = v7;
    }
    else {
      __int16 v10 = v7 + 1;
    }
    __int16 v7 = v10;
    unsigned int v6 = v9 >> (v9 > 0x3FFFFFFF);
    ++v5;
  }
  while (v8 != v5);
  if (v10 >= 1) {
    call_cfsv_setScale((unsigned __int16 *)a1, (__int16)(a1[10] - v10));
  }
  FixedRFFT(*((void *)a1 + 1), a2);
  return 1;
}

unsigned __int16 *call_cfsv_setScale(unsigned __int16 *result, int a2)
{
  int v2 = result[10];
  if (v2 != (unsigned __int16)a2)
  {
    int v3 = (__int16)v2;
    uint64_t v4 = *result;
    char v5 = v3 - a2;
    if (v3 >= a2)
    {
      if ((__int16)v4 >= 1)
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        do
        {
          *v8++ >>= v5;
          --v4;
        }
        while (v4);
      }
    }
    else if ((__int16)v4 >= 1)
    {
      char v6 = a2 - v3;
      __int16 v7 = (_DWORD *)*((void *)result + 1);
      do
      {
        *v7++ <<= v6;
        --v4;
      }
      while (v4);
    }
    result[10] = a2;
  }
  return result;
}

uint64_t call_cfsv_rifft(__int16 *a1, int a2)
{
  if (*a1 < a2) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 <= 127)
  {
    if (a2 != 32 && a2 != 64) {
      return result;
    }
  }
  else if (a2 != 128 && a2 != 512 && a2 != 256)
  {
    return result;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = (unsigned __int16)a2;
  do
  {
    int v9 = ((int)c_abs(*(unsigned int *)(*((void *)a1 + 1) + 4 * v5)) >> v7) + v6;
    if (v9 <= 0x3FFFFFFF) {
      __int16 v10 = v7;
    }
    else {
      __int16 v10 = v7 + 1;
    }
    __int16 v7 = v10;
    unsigned int v6 = v9 >> (v9 > 0x3FFFFFFF);
    ++v5;
  }
  while (v8 != v5);
  if (v10 >= 1) {
    call_cfsv_setScale((unsigned __int16 *)a1, (__int16)(a1[10] - v10));
  }
  FixedIRFFT(*((int **)a1 + 1), a2);
  return 1;
}

uint64_t call_cfsv_changeInputSampleOrder(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  LODWORD(v3) = (int)((v2 + (v2 >> 15)) << 16) >> 17;
  if ((__int16)v2 <= 1)
  {
    uint64_t v3 = (int)v3;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = (int)v3;
    uint64_t v5 = (_DWORD *)(*((void *)a1 + 1) + 36);
    unsigned int v6 = (_DWORD *)(a2 + 16);
    __int16 v7 = (_DWORD *)(a2 + 4 * v2 - 16);
    do
    {
      *(v6 - 4) = *(v5 - 9);
      *(v6 - 3) = *(v5 - 7);
      *(v6 - 2) = *(v5 - 5);
      *(v6 - 1) = *(v5 - 3);
      *unsigned int v6 = *(v5 - 1);
      v6[1] = v5[1];
      v6[2] = v5[3];
      v6[3] = v5[5];
      v7[3] = *(v5 - 6);
      v7[2] = *(v5 - 4);
      v7[1] = *(v5 - 2);
      *__int16 v7 = *v5;
      *(v7 - 1) = v5[2];
      *(v7 - 2) = v5[4];
      *(v7 - 3) = v5[6];
      if ((int)v4 + 7 < (int)v3 - 1) {
        *(v7 - 4) = v5[8];
      }
      v4 += 8;
      v5 += 16;
      v6 += 8;
      v7 -= 8;
    }
    while (v4 < (int)v3);
  }
  uint64_t v8 = *((void *)a1 + 1);
  *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(v8 + 4);
  if ((__int16)v2 >= 1)
  {
    unint64_t v9 = 0;
    __int16 v10 = (_DWORD *)(a2 + 16);
    uint64_t v11 = (_DWORD *)(v8 + 16);
    do
    {
      *(v11 - 4) = *(v10 - 4);
      *(v11 - 3) = *(v10 - 3);
      *(v11 - 2) = *(v10 - 2);
      *(v11 - 1) = *(v10 - 1);
      *uint64_t v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v9 += 8;
      v10 += 8;
      v11 += 8;
    }
    while (v9 < v2);
  }
  return 1;
}

uint64_t call_cfsv_changeOutputSampleOrder(unsigned __int16 *a1, _DWORD *a2)
{
  unint64_t v2 = *a1;
  LODWORD(v3) = (int)((v2 + (v2 >> 15)) << 16) >> 17;
  if ((__int16)v2 <= 1)
  {
    uint64_t v3 = (int)v3;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v3 = (int)v3;
    unsigned int v6 = a2 + 9;
    __int16 v7 = (_DWORD *)(v5 + 16);
    uint64_t v8 = (_DWORD *)(v5 + 4 * v2 - 16);
    do
    {
      *(v6 - 9) = *(v7 - 4);
      *(v6 - 7) = *(v7 - 3);
      *(v6 - 5) = *(v7 - 2);
      *(v6 - 3) = *(v7 - 1);
      *(v6 - 1) = *v7;
      v6[1] = v7[1];
      v6[3] = v7[2];
      v6[5] = v7[3];
      *(v6 - 6) = v8[3];
      *(v6 - 4) = v8[2];
      *(v6 - 2) = v8[1];
      *unsigned int v6 = *v8;
      v6[2] = *(v8 - 1);
      v6[4] = *(v8 - 2);
      v6[6] = *(v8 - 3);
      if ((int)v4 + 7 < (int)v3 - 1) {
        v6[8] = *(v8 - 4);
      }
      v7 += 8;
      v8 -= 8;
      v4 += 8;
      v6 += 16;
    }
    while (v4 < (int)v3);
  }
  uint64_t v9 = *((void *)a1 + 1);
  a2[1] = *(_DWORD *)(v9 + 4 * v3);
  if ((__int16)v2 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a2 + 4;
    uint64_t v12 = (_DWORD *)(v9 + 16);
    do
    {
      *(v12 - 4) = *(v11 - 4);
      *(v12 - 3) = *(v11 - 3);
      *(v12 - 2) = *(v11 - 2);
      *(v12 - 1) = *(v11 - 1);
      *uint64_t v12 = *v11;
      v12[1] = v11[1];
      v12[2] = v11[2];
      v12[3] = v11[3];
      v10 += 8;
      v11 += 8;
      v12 += 8;
    }
    while (v10 < v2);
  }
  return 1;
}

uint64_t featex_bet5_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = 2229280774;
  if ((safeh_HandleCheck(a1, a2, 415, 248) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 152);
    uint64_t v5 = (const char *)(v4 + 152);
    if (v6) {
      __int16 v7 = v5;
    }
    else {
      __int16 v7 = 0;
    }
  }
  else
  {
    __int16 v7 = 0;
  }
  uint64_t Voice = select_bet5_loadVoice(*(void *)(a1 + 24), *(void *)(a1 + 16), v7, (uint64_t)&v14, 0);
  if ((Voice & 0x80000000) != 0) {
    return Voice;
  }
  if (v14)
  {
    USuint64_t Voice = select_bet5_GetUSVoice(v14, v15);
    *(void *)(a1 + 32) = USVoice;
    if (!USVoice) {
      return v3;
    }
  }
  else if (!*(void *)(a1 + 32))
  {
    return v3;
  }
  VParauint64_t m = select_bet5_GetVParam(v14, v15);
  *(void *)(a1 + 40) = VParam;
  if (VParam)
  {
    NNFeatexint Data = select_bet5_GetNNFeatexData(v14, v15);
    *(void *)(a1 + 104) = NNFeatexData;
    if (NNFeatexData)
    {
      *(void *)(a1 + 112) = select_bet5_GetTransWeightRulesDiph(v14, v15, (_DWORD *)(a1 + 128));
      *(void *)(a1 + 120) = select_bet5_GetTransWeightRulesPhon(v14, v15, (_DWORD *)(a1 + 132));
      nnfeatex_DeInit((uint64_t *)(a1 + 88));
      int v12 = nnfeatex_Init(a1 + 88, *(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 104), *(void *)(a1 + 16));
      if (v12) {
        return v12 | 0x84E02000;
      }
      else {
        return 0;
      }
    }
  }
  return v3;
}

uint64_t featex_bet5_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 415, 248);
  if ((v7 & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 56) + 64))(a3, a4, 78, "application/x-realspeak-cspp-sptchk;version=4.0",
    0,
    0,
    a1 + 136);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(a1 + 56) + 64))(a3, a4, 78, "application/x-realspeak-cspp-sgt;version=4.0",
         0,
         0,
         a1 + 152);
  unint64_t v10 = 0;
  uint64_t v11 = a1 + 168;
  do
  {
    switch((int)v10)
    {
      case 0:
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(v12 + 64);
        uint64_t v14 = szOUTPUT_STREAMS_0[v10];
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(v12 + 152))(v9);
        uint64_t v9 = v13(a3, a4, 207, v14, v15, 1, v11);
        goto LABEL_6;
      case 1:
      case 2:
      case 3:
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 64))(a3, a4, 207, szOUTPUT_STREAMS_0[v10], 0, 1, v11);
LABEL_6:
        uint64_t v8 = v9;
        break;
      default:
        break;
    }
    if ((v8 & 0x80000000) != 0) {
      break;
    }
    v11 += 16;
  }
  while (v10++ < 3);
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(a1 + 56);
    do
    {
      uint64_t v19 = *(void *)(a1 + v17 + 168);
      if (v19) {
        (*(void (**)(uint64_t, void))(v18 + 72))(v19, *(void *)(a1 + v17 + 176));
      }
      v17 += 16;
    }
    while (v17 != 64);
  }
  return v8;
}

uint64_t featex_bet5_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v51 = 0;
  int v49 = 0;
  uint64_t v9 = safeh_HandleCheck(a1, a2, 415, 248);
  if ((v9 & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  if (!*(void *)(a1 + 168)) {
    return v9;
  }
  unsigned int v50 = 0;
  unint64_t v10 = *(unsigned __int16 **)(a1 + 240);
  cstdlib_memset(v10, 0, 0xE48uLL);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)unint64_t v10 = v11;
  if (!v11)
  {
    int v13 = -2065686522;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)(a1 + 48) + 272))(a3, a4, 128, 3, 0, 0);
  int v12 = nnfeatex_ProcessStart((uint64_t *)(a1 + 88), a3, a4, v10, &v49);
  if (v12)
  {
    int v13 = v12 | 0x84E02000;
LABEL_9:
    char v15 = 1;
LABEL_10:
    for (uint64_t i = 0; i != 64; i += 16)
    {
      uint64_t v17 = a1 + i;
      uint64_t v18 = *(void *)(a1 + i + 168);
      if (v18)
      {
        int v19 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 56) + 72))(v18, *(void *)(v17 + 176));
        *(void *)(v17 + 168) = 0;
        if (v13 > -1 && v19 < 0) {
          int v13 = v19;
        }
      }
    }
    if (v15) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  int v13 = UNICORN__select_bet5_FeatureExtractProcessStart(*(uint64_t **)(a1 + 80), *(void *)(a1 + 32), a3, a4, v10, &v49);
  if (v13 < 0)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 55005, (uint64_t)"%s%x", v27, v28, v29, v30, "lhError");
    goto LABEL_9;
  }
  if ((__int16)v10[5] <= 1)
  {
    int v31 = v49;
    if (v49)
    {
      if (*(void *)(a1 + 168))
      {
        if (*((_DWORD *)v10 + 880))
        {
          int v13 = (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 104))();
          if (v13 < 0) {
            log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 55008, (uint64_t)"%s%s%s%x", v32, v33, v34, v35, "contentType");
          }
        }
      }
      int v31 = 1;
    }
    *a5 = v31;
    goto LABEL_43;
  }
  int Process = UNICORN__select_bet5_FeatureExtractProcess(*(uint64_t **)(a1 + 80), *(void *)(a1 + 40), a3, a4, *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), (_DWORD *)(a1 + 232), (uint64_t)v10, (uint64_t *)(a1 + 64), (unsigned int *)(a1 + 72));
  if (Process < 0) {
    goto LABEL_60;
  }
  int v37 = nnfeatex_Process((uint64_t *)(a1 + 88), a3, a4, (uint64_t)v10, (uint64_t)&v49, 0, &v51, &v50, 1);
  if (v37)
  {
    int v13 = v37 | 0x84E02000;
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 70001, (uint64_t)"%x", v38, v39, v40, v41, v37 | 0x84E02000);
    char v15 = 0;
    goto LABEL_10;
  }
  featex_bet5_loc_ApplyTransWeightRules(*(void *)(a1 + 112), *(_DWORD *)(a1 + 128), *(void *)(a1 + 120), *(_DWORD *)(a1 + 132), *(void *)(a1 + 32), (uint64_t)v10);
  if (log_GetLogLevel(*(void *)(*(void *)(a1 + 16) + 32)) >= 6) {
    featex_bet5_loc_logFeatures(*(void *)(a1 + 16), (uint64_t)v10);
  }
  featex_bet5_removeRAPColumns((void *)*(unsigned int *)(*(void *)(a1 + 32) + 3580), (uint64_t)v10, v51, v50);
  int Process = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 56) + 104))(*(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 64), (32 * *(_DWORD *)(a1 + 72)));
  if (Process < 0
    || (int Process = featex_bet5_serializeFeatures(*(void *)(a1 + 16), *(void *)(a1 + 56), *(void *)(a1 + 184), *(void *)(a1 + 192), (uint64_t *)v10), Process < 0))
  {
LABEL_60:
    int v13 = Process;
    goto LABEL_61;
  }
  uint64_t v42 = *(void *)(a1 + 32);
  unsigned __int16 v43 = v10[5];
  if (!*(_DWORD *)(v42 + 3580)) {
    v43 *= *(_WORD *)(v42 + 3578);
  }
  int v13 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 56) + 104))(*(void *)(a1 + 200), *(void *)(a1 + 208), v51, 4 * v43 * v50);
  if (v13 < 0
    || (uint64_t v48 = *(void *)(*(void *)(a1 + 240) + 3608)) != 0
    && (int v13 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 56) + 104))(*(void *)(a1 + 216), *(void *)(a1 + 224), v48, 4 * v10[5] * *(unsigned __int16 *)(*(void *)(a1 + 32) + 3578)), v13 < 0))
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FEATEX_BET5", 70002, (uint64_t)"%s%s%s%x", v44, v45, v46, v47, "contentType");
LABEL_61:
    char v15 = 0;
    goto LABEL_10;
  }
LABEL_43:
  char v15 = 0;
  if (v13 < 0 || v49) {
    goto LABEL_10;
  }
LABEL_19:
  int ProcessEnd = UNICORN__select_bet5_FeatureExtractProcessEnd(*(uint64_t **)(a1 + 80), v10);
  if (ProcessEnd >= 0) {
    int v22 = v13;
  }
  else {
    int v22 = ProcessEnd;
  }
  int v23 = nnfeatex_ProcessEnd((uint64_t *)(a1 + 88), &v51, &v50);
  if (v23) {
    int v13 = v23 | 0x84E02000;
  }
  else {
    int v13 = v22;
  }
LABEL_25:
  int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 48) + 64))(a3, a4);
  if (v13 > -1 && v24 < 0) {
    uint64_t v14 = v24;
  }
  else {
    uint64_t v14 = v13;
  }
  if (*(_DWORD *)(a1 + 72))
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 64));
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
  }
  return v14;
}

BOOL featex_bet5_loc_ApplyTransWeightRules(BOOL result, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (*(__int16 *)(a6 + 10) >= 1)
  {
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v17 = (float *)(a3 + 8);
    uint64_t v18 = (float *)(result + 8);
    do
    {
      if (a2)
      {
        uint64_t v11 = 0;
        int v12 = v18;
        do
        {
          uint64_t result = featex_bet5_loc_TransRulesMatch(a5, v9, a6, (__int16)v10, v11);
          if (result)
          {
            unsigned int v13 = *((unsigned __int8 *)v12 - 1) + v10 * *(unsigned __int16 *)(*(void *)a6 + 3360);
            *(_DWORD *)(*(void *)(a6 + 3584) + 4 * v13) = (float)((float)(*v12
                                                                                          * (float)*(unsigned int *)(*(void *)(a6 + 3584) + 4 * v13))
                                                                                  + 0.5);
          }
          ++v11;
          v12 += 3;
        }
        while (a2 != v11);
      }
      if (a4)
      {
        uint64_t v14 = 0;
        char v15 = v17;
        do
        {
          uint64_t result = featex_bet5_loc_TransRulesMatch(a5, a3, a6, (__int16)v10, v14);
          if (result)
          {
            unsigned int v16 = *((unsigned __int8 *)v15 - 1) + v10 * *(unsigned __int16 *)(*(void *)a6 + 3360);
            *(_DWORD *)(*(void *)(a6 + 3592) + 4 * v16) = (float)((float)(*v15
                                                                                          * (float)*(unsigned int *)(*(void *)(a6 + 3592) + 4 * v16))
                                                                                  + 0.5);
          }
          ++v14;
          v15 += 3;
        }
        while (a4 != v14);
      }
      ++v10;
    }
    while (v10 < *(__int16 *)(a6 + 10));
  }
  return result;
}

uint64_t featex_bet5_loc_logFeatures(uint64_t result, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(__int16 *)(a2 + 10) >= 1)
  {
    uint64_t v3 = result;
    LH_itoa(0xCFu, v18, 0xAu);
    for (uint64_t i = 0; i != 5; ++i)
    {
      uint64_t v5 = dword_220784714[i];
      uint64_t v6 = a2 + 8 * v5;
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v7 = (uint64_t *)(v6 + 16);
      uint64_t v9 = "application/x-realspeak-u8-feat-";
      if (!v8)
      {
        uint64_t v9 = "application/x-realspeak-u16-feat-";
        if (!*(void *)(a2 + 8 * v5 + 1760)) {
          continue;
        }
      }
      cstdlib_strncpy(__dst, v9, 0x100uLL);
      size_t v10 = cstdlib_strlen(__dst);
      LH_itoa(v5, &__dst[v10], 0xAu);
      uint64_t v11 = *v7;
      if (!*v7) {
        uint64_t v11 = *(void *)(a2 + 8 * v5 + 1760);
      }
      log_OutBinary(*(void *)(v3 + 32), (uint64_t)"FEATEX_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, v11, *(unsigned __int16 *)(a2 + 10) << (*v7 == 0), 0);
    }
    LH_itoa(0x4Eu, v18, 0xAu);
    if (*(void *)(a2 + 504))
    {
      cstdlib_strncpy(__dst, "application/x-realspeak-u8-feat-", 0x100uLL);
      size_t v12 = cstdlib_strlen(__dst);
      LH_itoa(0x3Du, &__dst[v12], 0xAu);
      log_OutBinary(*(void *)(v3 + 32), (uint64_t)"SELECT_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 504), *(unsigned __int16 *)(a2 + 10), 0);
    }
    if (*(void *)(a2 + 512))
    {
      cstdlib_strncpy(__dst, "application/x-realspeak-u8-feat-", 0x100uLL);
      size_t v13 = cstdlib_strlen(__dst);
      LH_itoa(0x3Eu, &__dst[v13], 0xAu);
      log_OutBinary(*(void *)(v3 + 32), (uint64_t)"SELECT_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 512), *(unsigned __int16 *)(a2 + 10), 0);
    }
    for (uint64_t j = 97; j != 123; ++j)
    {
      if (*(void *)(a2 + 8 * j))
      {
        cstdlib_strncpy(__dst, "application/x-realspeak-u8-feat-", 0x100uLL);
        size_t v15 = cstdlib_strlen(__dst);
        LH_itoa(j - 2, &__dst[v15], 0xAu);
        log_OutBinary(*(void *)(v3 + 32), (uint64_t)"SELECT_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 8 * j), *(unsigned __int16 *)(a2 + 10), 0);
      }
    }
    cstdlib_strncpy(__dst, "application/x-realspeak-u32-feat-", 0x100uLL);
    size_t v16 = cstdlib_strlen(__dst);
    LH_itoa(0x35u, &__dst[v16], 0xAu);
    log_OutBinary(*(void *)(v3 + 32), (uint64_t)"FEATEX_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 3584), 4 * *(unsigned __int16 *)(a2 + 10) * *(unsigned __int16 *)(*(void *)a2 + 3360), 0);
    cstdlib_strncpy(__dst, "application/x-realspeak-u32-feat-", 0x100uLL);
    size_t v17 = cstdlib_strlen(__dst);
    LH_itoa(0x36u, &__dst[v17], 0xAu);
    return log_OutBinary(*(void *)(v3 + 32), (uint64_t)"FEATEX_BET5", 100, 0, (uint64_t)v18, (uint64_t)__dst, *(void *)(a2 + 3592), 4 * *(unsigned __int16 *)(a2 + 10) * *(unsigned __int16 *)(*(void *)a2 + 3360), 0);
  }
  return result;
}

void *featex_bet5_removeRAPColumns(void *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v31 = (int)result;
  int v4 = *(__int16 *)(a2 + 10);
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    do
    {
      int v9 = (__int16)v4;
      int v10 = (__int16)v4 - 1;
      if (v10 <= (int)v7)
      {
        unsigned __int16 v12 = v7;
        signed int v11 = v7;
      }
      else
      {
        signed int v11 = v7;
        unsigned __int16 v12 = v7;
        do
        {
          if (*(_DWORD *)(*(void *)(a2 + 3608) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3578)) != -2) {
            break;
          }
          signed int v11 = (__int16)++v12;
        }
        while (v10 > (__int16)v12);
      }
      if (v7 != v12)
      {
        unsigned int v13 = (unsigned __int16)(v4 - v11);
        if (v9 <= v11) {
          size_t v14 = 0;
        }
        else {
          size_t v14 = v13;
        }
        if (v8 >= v11)
        {
          uint64_t v16 = (__int16)v12;
        }
        else
        {
          uint64_t v15 = *(void *)(a2 + 1800);
          uint64_t v16 = (__int16)v12;
          int v17 = *(unsigned __int16 *)(v15 + 2 * (__int16)v12);
          uint64_t v18 = v11;
          int v19 = (unsigned __int16 *)(v15 + v6);
          do
          {
            int v20 = *v19++;
            v17 += v20;
            *(_WORD *)(v15 + 2 * (__int16)v12) = v17;
            --v18;
          }
          while (v7 != v18);
        }
        if (v16 <= v7)
        {
          LOWORD(v4) = *(_WORD *)(a2 + 10);
        }
        else
        {
          int v33 = v8;
          if (v31)
          {
            int v21 = (void *)(a3 + 4 * v7 * a4);
            int v22 = (const void *)(a3 + 4 * v12 * a4);
            size_t v23 = a4 * (unint64_t)(4 * v14);
          }
          else
          {
            uint64_t v24 = *(unsigned __int16 *)(*(void *)a2 + 3578);
            int v21 = (void *)(a3 + 4 * v24 * a4 * v7);
            int v22 = (const void *)(a3 + 4 * v24 * a4 * v12);
            size_t v23 = a4 * (unint64_t)(4 * v14) * v24;
          }
          cstdlib_memmove(v21, v22, v23);
          for (uint64_t i = 0; i != 1728; i += 8)
          {
            uint64_t v26 = *(void *)(a2 + i + 32);
            if (v26) {
              cstdlib_memmove((void *)(v26 + v7), (const void *)(v26 + v16), v14);
            }
            uint64_t v27 = *(void *)(a2 + i + 1776);
            if (v27) {
              cstdlib_memmove((void *)(v27 + 2 * v7), (const void *)(v27 + 2 * v16), (2 * v14));
            }
          }
          uint64_t v28 = *(void *)(a2 + 3552);
          if (v28) {
            cstdlib_memmove((void *)(v28 + 8 * v7), (const void *)(v28 + 8 * v16), (8 * v14));
          }
          uint64_t v29 = *(void *)(a2 + 3560);
          if (v29) {
            cstdlib_memmove((void *)(v29 + 9 * v7), (const void *)(v29 + 9 * v16), (9 * v14));
          }
          cstdlib_memmove((void *)(*(void *)(a2 + 3568) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (const void *)(*(void *)(a2 + 3568) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 2966));
          cstdlib_memmove((void *)(*(void *)(a2 + 3576) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (const void *)(*(void *)(a2 + 3576) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 2966)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 2966));
          cstdlib_memmove((void *)(*(void *)(a2 + 3584) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (const void *)(*(void *)(a2 + 3584) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 3360));
          cstdlib_memmove((void *)(*(void *)(a2 + 3592) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (const void *)(*(void *)(a2 + 3592) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3360)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 3360));
          cstdlib_memmove((void *)(*(void *)(a2 + 3600) + *(unsigned __int16 *)(*(void *)a2 + 2966) * (uint64_t)v33), (const void *)(*(void *)(a2 + 3600) + *(unsigned __int16 *)(*(void *)a2 + 2966) * (uint64_t)v11), *(unsigned __int16 *)(*(void *)a2 + 2966) * (unint64_t)v14);
          uint64_t result = cstdlib_memmove((void *)(*(void *)(a2 + 3608) + 4 * v33 * *(unsigned __int16 *)(*(void *)a2 + 3578)), (const void *)(*(void *)(a2 + 3608) + 4 * v11 * *(unsigned __int16 *)(*(void *)a2 + 3578)), (4 * v14) * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 3578));
          LOWORD(v4) = v7 - v12 + *(_WORD *)(a2 + 10);
          *(_WORD *)(a2 + 10) = v4;
        }
      }
      ++v7;
      v6 += 2;
      int v8 = v7;
    }
    while (v7 < (__int16)v4);
  }
  return result;
}

uint64_t featex_bet5_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 415, 248);
  if ((v3 & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  do
  {
    uint64_t v7 = *(void *)(a1 + v5 + 168);
    if (v7) {
      (*(void (**)(uint64_t, void))(v6 + 72))(v7, *(void *)(a1 + v5 + 176));
    }
    v5 += 16;
  }
  while (v5 != 64);
  return v4;
}

uint64_t featex_bet5_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &IFeatextract_0;
  return result;
}

BOOL featex_bet5_loc_TransRulesMatch(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  int v8 = (unsigned __int8 *)(a2 + 12 * a5);
  if (!cstdlib_strchr(*(char **)(*(void *)(a1 + 3424) + 8 * *v8), *(unsigned __int8 *)(*(void *)(a3 + 32) + a4))) {
    return 0;
  }
  uint64_t v9 = a4 + 1;
  if (!cstdlib_strchr(*(char **)(*(void *)(a1 + 3424) + 8 * v8[1]), *(unsigned __int8 *)(*(void *)(a3 + 32) + v9)))return 0; {
  int v10 = a4 ? *(unsigned __int8 *)(a4 + *(void *)(a3 + 32) - 1) : 35;
  }
  if (!cstdlib_strchr(*(char **)(*(void *)(a1 + 3424) + 8 * v8[2]), v10)) {
    return 0;
  }
  int v11 = *(__int16 *)(a3 + 10) - 2;
  if (v11 != a4)
  {
    if (cstdlib_strchr(*(char **)(*(void *)(a1 + 3424) + 8 * v8[3]), *(unsigned __int8 *)(a4 + *(void *)(a3 + 32) + 2)))
    {
      goto LABEL_12;
    }
    int v11 = *(__int16 *)(a3 + 10) - 2;
  }
  if (v11 != a4 || !cstdlib_strchr(*(char **)(*(void *)(a1 + 3424) + 8 * v8[3]), 35)) {
    return 0;
  }
LABEL_12:
  if ((*(_DWORD *)(a1 + 3092) & 0x80000000) != 0) {
    return 1;
  }
  uint64_t v12 = *(void *)(a1 + 3432);
  unsigned int v13 = *(char **)(v12 + 8 * v8[4]);
  if (v13)
  {
    if (!cstdlib_strchr(v13, *(unsigned __int8 *)(*(void *)(a3 + 248) + a4) + 48)) {
      return 0;
    }
    uint64_t v12 = *(void *)(a1 + 3432);
  }
  size_t v14 = *(char **)(v12 + 8 * v8[5]);
  return !v14 || cstdlib_strchr(v14, *(unsigned __int8 *)(*(void *)(a3 + 248) + v9) + 48);
}

uint64_t featex_bet5_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 416;
  }
  return result;
}

uint64_t featex_bet5_ClassClose()
{
  return 0;
}

uint64_t featex_bet5_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v32);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  int v10 = (void *)heap_Calloc(*(void **)(v32 + 8), 1, 248);
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v15 = v10;
  *int v10 = a3;
  v10[1] = a4;
  uint64_t v16 = v32;
  v10[2] = v32;
  v10[3] = a1;
  v10[6] = 0;
  int v17 = v10 + 6;
  unsigned char v10[4] = 0;
  v10[7] = 0;
  uint64_t v18 = heap_Calloc(*(void **)(v16 + 8), 1, 3656);
  v15[30] = v18;
  if (v18)
  {
    uint64_t v28 = 0;
    LODWORD(v29) = 0;
    uint64_t Voice = select_bet5_loadVoice(v15[3], v15[2], 0, (uint64_t)&v28, 0);
    if ((Voice & 0x80000000) != 0)
    {
LABEL_16:
      featex_bet5_ObjClose(*(void **)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return Voice;
    }
    USuint64_t Voice = select_bet5_GetUSVoice(v28, v29);
    v15[4] = USVoice;
    if (USVoice)
    {
      VParauint64_t m = select_bet5_GetVParam(v28, v29);
      v15[5] = VParam;
      if (VParam)
      {
        NNFeatexint Data = select_bet5_GetNNFeatexData(v28, v29);
        v15[13] = NNFeatexData;
        if (NNFeatexData)
        {
          v15[14] = select_bet5_GetTransWeightRulesDiph(v28, v29, (_DWORD *)v15 + 32);
          v15[15] = select_bet5_GetTransWeightRulesPhon(v28, v29, (_DWORD *)v15 + 33);
          uint64_t Object = objc_GetObject(*(void *)(v32 + 48), (uint64_t)"LINGDB", &v30);
          if ((Object & 0x80000000) != 0
            || (*int v17 = *(void *)(v30 + 8),
                uint64_t Object = objc_GetObject(*(void *)(v32 + 48), (uint64_t)"SYNTHSTREAM", &v31),
                (Object & 0x80000000) != 0)
            || (uint64_t v24 = *(void *)(v31 + 8),
                v15[7] = v24,
                uint64_t Object = UNICORN__select_bet5_FeatureExtractObjOpen(a3, a4, v24, v15[6], v15 + 10),
                (Object & 0x80000000) != 0))
          {
            uint64_t Voice = Object;
          }
          else
          {
            int v25 = nnfeatex_Init((uint64_t)(v15 + 11), v15[6], v15[4], v15[13], v15[2]);
            if (!v25)
            {
              uint64_t Voice = 0;
              *(void *)a5 = v15;
              *(_DWORD *)(a5 + 8) = 415;
              return Voice;
            }
            uint64_t Voice = v25 | 0x84E02000;
          }
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
LABEL_13:
    uint64_t Voice = 2229280778;
    log_OutPublic(*(void *)(v32 + 32), (uint64_t)"FEATEX_BET5", 31000, 0, v11, v12, v13, v14, v27);
  }
  return Voice;
}

uint64_t featex_bet5_ObjClose(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 415, 248);
  if ((v3 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!a1) {
    return v3;
  }
  nnfeatex_DeInit(a1 + 11);
  uint64_t ObjClose = UNICORN__select_bet5_FeatureExtractObjClose(a1[10]);
  if (a1[6]) {
    objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"LINGDB");
  }
  if (a1[7]) {
    objc_ReleaseObject(*(void *)(a1[2] + 48), (uint64_t)"SYNTHSTREAM");
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    uint64_t v6 = a1[3];
    if (!v6 || (uint64_t v7 = *(void *)(v6 + 48)) == 0) {
      uint64_t v7 = *(void *)(a1[2] + 48);
    }
    objc_ReleaseObject(v7, v5 + 152);
  }
  uint64_t v8 = a1[30];
  if (v8) {
    heap_Free(*(void **)(a1[2] + 8), v8);
  }
  heap_Free(*(void **)(a1[2] + 8), (uint64_t)a1);
  return ObjClose;
}

uint64_t featex_bet5_serializeFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = *a5;
  int __dst = 0;
  uint64_t v12 = v11 + 2748;
  do
  {
    int v13 = *(unsigned __int8 *)(v12 + v9);
    if (*(unsigned char *)(v12 + v9))
    {
      if (v13 == 2)
      {
        v10 += 2;
      }
      else if (v13 == 1)
      {
        ++v10;
      }
      else if ((unsigned __int16)v9 - 53 <= 1)
      {
        v10 += 4 * *(unsigned __int16 *)(v11 + 3360);
      }
    }
    ++v9;
  }
  while (v9 != 218);
  uint64_t v14 = *(void **)(v11 + 3336);
  if (v14 && *v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v14 + 1;
    while (v16[v15++])
      ;
    v10 += v15;
  }
  else
  {
    LODWORD(v15) = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void **, void))(a2 + 112))(a3, a4, &__dst, v10 * *((unsigned __int16 *)a5 + 5));
  if ((result & 0x80000000) == 0)
  {
    uint64_t v29 = a4;
    uint64_t v19 = 0;
    int v20 = (char *)__dst;
    uint64_t v21 = v11 + 2748;
    while (1)
    {
      int v22 = *(unsigned __int8 *)(v21 + v19);
      if (*(unsigned char *)(v21 + v19))
      {
        if (v22 == 2)
        {
          uint64_t v25 = *((unsigned __int16 *)a5 + 5);
          cstdlib_memcpy(v20, (const void *)a5[v19 + 220], 2 * v25);
          v20 += 2 * v25;
        }
        else
        {
          if (v22 == 1)
          {
            size_t v23 = *((unsigned __int16 *)a5 + 5);
            uint64_t v24 = (const void *)a5[v19 + 2];
LABEL_28:
            cstdlib_memcpy(v20, v24, v23);
            v20 += v23;
            goto LABEL_29;
          }
          if ((unsigned __int16)v19 - 53 <= 1)
          {
            size_t v23 = 4 * *((unsigned __int16 *)a5 + 5) * *(unsigned __int16 *)(v11 + 3360);
            if (v19 == 53) {
              uint64_t v26 = 448;
            }
            else {
              uint64_t v26 = 449;
            }
            uint64_t v24 = (const void *)a5[v26];
            goto LABEL_28;
          }
        }
      }
LABEL_29:
      if (++v19 == 218)
      {
        if (v15)
        {
          int v27 = 0;
          do
          {
            size_t v28 = *((unsigned __int16 *)a5 + 5);
            cstdlib_memcpy(v20, *(const void **)(a5[438] + 8 * (unsigned __int16)v27), v28);
            v20 += v28;
            ++v27;
          }
          while (v15 > (unsigned __int16)v27);
        }
        return (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 120))(a3, v29, v10 * *((unsigned __int16 *)a5 + 5));
      }
    }
  }
  return result;
}

uint64_t UnicornAddon_Init(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(_DWORD *)(a5 + 24) = a4;
  if (!*(_DWORD *)(*(void *)(a2 + 568) + 6692) || !*(_DWORD *)(*(void *)(a3 + 568) + 6692)) {
    return 0;
  }
  uint64_t v9 = 2229280778;
  unsigned int v10 = *(_DWORD *)(a2 + 2452);
  unsigned int v11 = *(_DWORD *)(a3 + 2452);
  if (v10 >= v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), *(unsigned int *)(a3 + 2448), 4);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * *(unsigned int *)(a3 + 2448));
    if (v15)
    {
      uint64_t v16 = (uint64_t)v15;
      uint64_t v17 = *(unsigned int *)(a3 + 2448);
      if (v17) {
        memset_pattern16(v15, &unk_220784730, 4 * v17);
      }
      uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), *(unsigned int *)(a2 + 2448), 4);
      if (v18)
      {
        uint64_t v19 = v18;
        int v20 = (void *)heap_Alloc(*(void *)(a1 + 8), 4 * *(unsigned int *)(a2 + 2448));
        if (v20)
        {
          uint64_t v21 = (uint64_t)v20;
          uint64_t v22 = *(unsigned int *)(a2 + 2448);
          if (v22) {
            memset_pattern16(v20, &unk_220784730, 4 * v22);
          }
          unint64_t v23 = *(unsigned int *)(a3 + 2448);
          if (v23)
          {
            unint64_t v24 = 0;
            LODWORD(v25) = v22;
            do
            {
              if (v25)
              {
                unint64_t v26 = 0;
                uint64_t v27 = *(void *)(a3 + 2440);
                uint64_t v28 = *(void *)(a2 + 2440);
                do
                {
                  if (v12)
                  {
                    uint64_t v29 = (float *)(v28 + 4 * (*(_DWORD *)(a2 + 2452) * v26));
                    uint64_t v30 = (float *)(v27 + 4 * (v24 * *(_DWORD *)(a3 + 2452)));
                    float v31 = 0.0;
                    uint64_t v32 = v12;
                    do
                    {
                      float v33 = *v30++;
                      float v34 = v33;
                      float v35 = *v29++;
                      float v31 = v31 + (float)((float)(v34 - v35) * (float)(v34 - v35));
                      --v32;
                    }
                    while (v32);
                  }
                  else
                  {
                    float v31 = 0.0;
                  }
                  if (v31 < *(float *)(v16 + 4 * v24))
                  {
                    *(_DWORD *)(v14 + 4 * v24) = v26;
                    *(float *)(v16 + 4 * v24) = v31;
                  }
                  if (v31 < *(float *)(v21 + 4 * v26))
                  {
                    *(_DWORD *)(v19 + 4 * v26) = v24;
                    *(float *)(v21 + 4 * v26) = v31;
                  }
                  ++v26;
                  unint64_t v25 = *(unsigned int *)(a2 + 2448);
                }
                while (v26 < v25);
                unint64_t v23 = *(unsigned int *)(a3 + 2448);
              }
              ++v24;
            }
            while (v24 < v23);
          }
          *(void *)(a5 + 32) = v19;
          *(void *)(a5 + 40) = v14;
          heap_Free(*(void **)(a1 + 8), v16);
          heap_Free(*(void **)(a1 + 8), v21);
          return 0;
        }
      }
    }
  }
  return v9;
}

void *UnicornAddon_Deinit(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4) {
    uint64_t result = heap_Free((void *)result[1], v4);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = (void *)v3[1];
    return heap_Free(v6, v5);
  }
  return result;
}

uint64_t UnicornAddon_UID2AddonId(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a3 != -1 && a2 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (unsigned int *)(a1 + 24);
    do
    {
      unsigned int v7 = *v6;
      v6 += 12;
      if (v7 > a3) {
        break;
      }
      ++v5;
    }
    while (v5 < a2);
    return (v5 - 1);
  }
  return result;
}

void *UnicornPipelineFactory_Create(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = heap_Calloc(*(void **)(a2 + 8), 1, 112);
  uint64_t v9 = (void *)v8;
  if (v8)
  {
    *(void *)(v8 + 8) = a2;
    if (a1 == 1)
    {
      uint64_t v26 = heap_Calloc(*(void **)(a2 + 8), 1, 240);
      if (v26)
      {
        uint64_t v11 = v26;
        int v27 = UnicornPipelineMT_Create(v26, a2, a3, a4);
        uint64_t v13 = UnicornPipelineMT_isMultiThreaded;
        uint64_t v14 = UnicornPipelineMT_isDone;
        uint64_t v15 = UnicornPipelineMT_SetSIMDCallbacks;
        uint64_t v16 = UnicornPipelineMT_SetForcedEEEnabled;
        uint64_t v17 = UnicornPipelineMT_GetForcedEEEnabled;
        uint64_t v18 = UnicornPipelineMT_GetStream;
        uint64_t v19 = UnicornPipelineMT_GetPreparedCount;
        int v20 = UnicornPipelineMT_SynthesizeDummy;
        uint64_t v21 = UnicornPipelineMT_ProcessPhoneme;
        uint64_t v22 = UnicornPipelineMT_Destroy;
        unint64_t v23 = UnicornPipelineMT_Release;
        unint64_t v24 = UnicornPipelineMT_Init;
        if ((v27 & 0x80000000) == 0)
        {
          unint64_t v25 = "Unicorn Pipeline is MULTITHREAD";
          goto LABEL_11;
        }
      }
    }
    else if (!a1)
    {
      uint64_t v10 = heap_Calloc(*(void **)(a2 + 8), 1, 200);
      if (v10)
      {
        uint64_t v11 = v10;
        int v12 = UnicornPipeline_Create(v10, a2, a3, a4);
        uint64_t v13 = UnicornPipeline_isMultiThreaded;
        uint64_t v14 = UnicornPipeline_isDone;
        uint64_t v15 = UnicornPipeline_SetSIMDCallbacks;
        uint64_t v16 = UnicornPipeline_SetForcedEEEnabled;
        uint64_t v17 = UnicornPipeline_GetForcedEEEnabled;
        uint64_t v18 = UnicornPipeline_GetStream;
        uint64_t v19 = UnicornPipeline_GetPreparedCount;
        int v20 = UnicornPipeline_SynthesizeDummy;
        uint64_t v21 = UnicornPipeline_ProcessPhoneme;
        uint64_t v22 = UnicornPipeline_Destroy;
        unint64_t v23 = UnicornPipeline_Release;
        unint64_t v24 = UnicornPipeline_Init;
        if ((v12 & 0x80000000) == 0)
        {
          unint64_t v25 = "Unicorn Pipeline is STANDARD SINGLETHREAD";
LABEL_11:
          v9[2] = v24;
          v9[3] = v23;
          v9[4] = v22;
          v9[5] = v21;
          v9[6] = v20;
          v9[7] = v19;
          v9[8] = v18;
          v9[9] = v17;
          v9[10] = v16;
          v9[11] = v15;
          v9[12] = v14;
          v9[13] = v13;
          *uint64_t v9 = v11;
          UNICORN__log_select_Diag(a2, 3, (uint64_t)v25);
          return v9;
        }
      }
    }
    return 0;
  }
  return v9;
}

uint64_t UnicornPipelineClass_Init(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1[2];
  uint64_t v14 = *a1;

  return v13(v14, a3, a4, a5, a6, a7);
}

uint64_t UnicornPipelineClass_Release(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v3 = (uint64_t (*)(uint64_t))a1[3];
  uint64_t v4 = *a1;

  return v3(v4);
}

uint64_t UnicornPipelineClass_Destroy(uint64_t a1, int a2)
{
  unint64_t v2 = (uint64_t *)a1;
  int v3 = safeh_HandleCheck(a1, a2, 135969, 112);
  if (v3 < 0) {
    unint64_t v2 = 0;
  }
  if (v3 < 0) {
    return 2229280776;
  }
  uint64_t v4 = ((uint64_t (*)(uint64_t))v2[4])(*v2);
  if (*v2) {
    heap_Free(*(void **)(v2[1] + 8), *v2);
  }
  *unint64_t v2 = 0;
  heap_Free(*(void **)(v2[1] + 8), (uint64_t)v2);
  return v4;
}

uint64_t UnicornPipelineClass_ProcessPhoneme(uint64_t *a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[5];
  uint64_t v6 = *a1;

  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_SynthesizeDummy(uint64_t *a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 2229280776;
  }
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[6];
  uint64_t v6 = *a1;

  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_GetPreparedCount(uint64_t *a1, int a2)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  int v3 = (uint64_t (*)(uint64_t))a1[7];
  uint64_t v4 = *a1;

  return v3(v4);
}

uint64_t UnicornPipelineClass_GetStream(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 0;
  }
  int v3 = (uint64_t (*)(uint64_t))a1[8];
  uint64_t v4 = *a1;

  return v3(v4);
}

uint64_t UnicornPipelineClass_GetForcedEEEnabled(uint64_t *a1, int a2)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  int v3 = (uint64_t (*)(uint64_t))a1[9];
  uint64_t v4 = *a1;

  return v3(v4);
}

uint64_t UnicornPipelineClass_SetForcedEEEnabled(uint64_t *a1, int a2, uint64_t a3)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[10];
  uint64_t v6 = *a1;

  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_SetSIMDCallbacks(uint64_t *a1, int a2, uint64_t a3)
{
  safeh_HandleCheck((uint64_t)a1, a2, 135969, 112);
  unint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))a1[11];
  uint64_t v6 = *a1;

  return v5(v6, a3);
}

uint64_t UnicornPipelineClass_isDone(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 0;
  }
  int v3 = (uint64_t (*)(uint64_t))a1[12];
  uint64_t v4 = *a1;

  return v3(v4);
}

uint64_t UnicornPipelineClass_isMultiThreaded(uint64_t *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 135969, 112) & 0x80000000) != 0) {
    return 0;
  }
  int v3 = (uint64_t (*)(uint64_t))a1[13];
  uint64_t v4 = *a1;

  return v3(v4);
}

float UNICORN__mfsLLCost(float a1, float a2)
{
  return (float)(a1 * a2) * (float)(a1 * a2);
}

float UNICORN__mfsLLCostVar(float a1, float a2)
{
  return (float)(a1 * a1) * a2;
}

float UNICORN__mfsProbToPenalty(float a1, float a2)
{
  float v2 = (float)(a2 * 0.39894) * expf((float)((float)(a1 * a2) * (float)(a1 * a2)) * -0.5);
  float v3 = 20.0;
  if (v2 > 1.0e-10)
  {
    float v3 = 0.0;
    if (v2 < 0.9) {
      return fabsf(logf(v2)) / 2.3026;
    }
  }
  return v3;
}

float UNICORN__mfsLogLikelihood(float a1, float a2)
{
  float v3 = -(float)(a1 * a1);
  float v4 = UNICORN__bet5_finv(a2);
  return -(float)(logf(v4) - (float)(v3 * a2));
}

char *UNICORN__mfs_InitParam(uint64_t a1)
{
  float v2 = (_OWORD *)(a1 + 6132);
  cstdlib_memset((void *)a1, 0, 0x2D88uLL);
  *(void *)(a1 + 11520) = 0;
  *(_DWORD *)(a1 + 11544) = 100000;
  *(void *)(a1 + 11536) = 0;
  *(_DWORD *)(a1 + 11488) = 0;
  *(_DWORD *)(a1 + 5048) = 0;
  *(void *)(a1 + 5548) = -4294965296;
  *(_DWORD *)(a1 + 5592) = 0;
  *(void *)(a1 + 5556) = 0x3F8000003F800000;
  *(_DWORD *)(a1 + 5564) = 2000;
  *(_OWORD *)(a1 + 5504) = xmmword_220784750;
  *(void *)(a1 + 6120) = 0x3C00000001;
  *(_DWORD *)(a1 + 6128) = 1112014848;
  *float v2 = xmmword_220784760;
  *(void *)(a1 + 6148) = 0x7530000000C8;
  *(_DWORD *)(a1 + 6156) = 1056964608;
  *(void *)(a1 + 6160) = 0x4248000040600000;
  *(void *)(a1 + 6664) = 0x186A0FFFFFFFFLL;
  *(void *)(a1 + 6192) = 3212836864;
  *(_DWORD *)(a1 + 6200) = 0;
  *(_OWORD *)(a1 + 6616) = 0u;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)(a1 + 6584) = v3;
  *(_OWORD *)(a1 + 6600) = v3;
  *(_OWORD *)(a1 + 6552) = v3;
  *(_OWORD *)(a1 + 6568) = v3;
  *(_OWORD *)(a1 + 6520) = v3;
  *(_OWORD *)(a1 + 6536) = v3;
  *(_OWORD *)(a1 + 6488) = v3;
  *(_OWORD *)(a1 + 6504) = v3;
  *(_OWORD *)(a1 + 6456) = v3;
  *(_OWORD *)(a1 + 6472) = v3;
  *(_OWORD *)(a1 + 6424) = v3;
  *(_OWORD *)(a1 + 6440) = v3;
  *(_OWORD *)(a1 + 6392) = v3;
  *(_OWORD *)(a1 + 6408) = v3;
  *(_OWORD *)(a1 + 6360) = v3;
  *(_OWORD *)(a1 + 6376) = v3;
  *(_OWORD *)(a1 + 6328) = v3;
  *(_OWORD *)(a1 + 6344) = v3;
  *(_OWORD *)(a1 + 6296) = v3;
  *(_OWORD *)(a1 + 6312) = v3;
  *(_OWORD *)(a1 + 6264) = v3;
  *(_OWORD *)(a1 + 6280) = v3;
  *(_OWORD *)(a1 + 6232) = v3;
  *(_OWORD *)(a1 + 6248) = v3;
  *(_DWORD *)(a1 + 6632) = 200;
  *(_OWORD *)(a1 + 6636) = xmmword_220784770;
  *(_DWORD *)(a1 + 6652) = 1084647014;
  *(void *)(a1 + 6656) = 0x40A6666640BCCCCDLL;
  *(void *)(a1 + 5980) = 0;
  *(void *)(a1 + 5992) = 1;
  *(void *)(a1 + 6000) = 0x4000000000000000;
  v2[34] = xmmword_220784780;
  *(_DWORD *)(a1 + 6692) = 0;
  *(void *)(a1 + 6696) = 0x300000000;
  *(void *)(a1 + 6704) = 0;
  *(_DWORD *)(a1 + 6712) = 0;
  *(_DWORD *)(a1 + 6672) = 1123942400;
  *(void *)(a1 + 6744) = 0;
  *(_OWORD *)(a1 + 6728) = 0u;
  *(_DWORD *)(a1 + 6764) = 0;
  *(_DWORD *)(a1 + 6772) = 3;
  *(void *)(a1 + 6776) = 1056964608;
  *(void *)(a1 + 6784) = 1065353216;
  *(_DWORD *)(a1 + 5568) = 1084227584;
  *(void *)(a1 + 5576) = 0x447A0000000003B6;
  *(void *)(a1 + 5584) = 0x4120000000000000;
  v2[335] = xmmword_220784790;
  *(_DWORD *)(a1 + 11508) = 4000;
  *(void *)(a1 + 11512) = 0x7D000000FA0;
  *(_DWORD *)(a1 + 5924) = 9;
  *(void *)(a1 + 5928) = 0x1400000001;
  UNICORN__InitVParam((_DWORD *)a1);
  uint64_t result = cstdlib_strcpy((char *)(a1 + 5072), "mfs");
  unint64_t v5 = 0;
  *(_DWORD *)(a1 + 5524) = 1056964608;
  *(_DWORD *)(a1 + 10464) = 1065353216;
  uint64_t v6 = (float *)(a1 + 10472);
  v7.i64[0] = 255;
  v7.i64[1] = 255;
  do
  {
    int32x2_t v8 = vmovn_s64((int64x2_t)vcgtq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v5), (int8x16_t)xmmword_220774290)));
    if (v8.i8[0]) {
      *(v6 - 1) = 1.0 / (float)(v5 + 1);
    }
    if (v8.i8[4]) {
      *uint64_t v6 = 1.0 / (float)(v5 + 2);
    }
    v5 += 2;
    v6 += 2;
  }
  while (v5 != 256);
  return result;
}

void *UNICORN__mfs_DeInitParam(uint64_t a1, void *a2)
{
  UNICORN__DeInitVParam(a1, a2);
  uint64_t v4 = a2[677];
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    a2[677] = 0;
  }
  uint64_t v5 = a2[1301];
  if (v5)
  {
    heap_Free(*(void **)(a1 + 8), v5);
    a2[1301] = 0;
  }
  uint64_t v6 = a2[1302];
  if (v6)
  {
    heap_Free(*(void **)(a1 + 8), v6);
    a2[1302] = 0;
  }
  uint64_t v7 = a2[1303];
  if (v7)
  {
    heap_Free(*(void **)(a1 + 8), v7);
    a2[1303] = 0;
  }
  uint64_t v8 = a2[1304];
  if (v8)
  {
    heap_Free(*(void **)(a1 + 8), v8);
    a2[1304] = 0;
  }
  uint64_t v9 = a2[1305];
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    a2[1305] = 0;
  }
  uint64_t v10 = a2[1306];
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    a2[1306] = 0;
  }
  uint64_t v11 = a2[1307];
  if (v11)
  {
    heap_Free(*(void **)(a1 + 8), v11);
    a2[1307] = 0;
  }
  uint64_t v12 = a2[776];
  if (v12)
  {
    heap_Free(*(void **)(a1 + 8), v12);
    a2[776] = 0;
  }
  uint64_t v13 = a2[777];
  if (v13)
  {
    heap_Free(*(void **)(a1 + 8), v13);
    a2[777] = 0;
  }
  uint64_t v14 = a2[778];
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    a2[778] = 0;
  }

  return cstdlib_memset(a2, 0, 0x2D88uLL);
}

const char *BET5_Param_GetInfo(char *__s2, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = 0;
  uint64_t result = "F_PRUNE_DUR_OUTLIER_DIST_PARAM1";
  uint64_t v8 = &off_26456AE48;
  do
  {
    uint64_t result = (const char *)cstdlib_strcmp(result, __s2);
    if (!result) {
      break;
    }
    ++v6;
    uint64_t v9 = *v8;
    v8 += 2;
    uint64_t result = v9;
  }
  while (v6 != 7);
  uint64_t v10 = &(&auxTableParamInfo)[2 * v6];
  *a2 = *((_DWORD *)v10 + 2);
  *a3 = *((_DWORD *)v10 + 3);
  return result;
}

uint64_t BET5_Param_GetType(int a1)
{
  uint64_t v1 = 0;
  float v2 = &dword_26456AE40;
  while (1)
  {
    int v3 = *v2;
    v2 += 4;
    if (v3 == a1) {
      break;
    }
    if (++v1 == 7)
    {
      uint64_t v1 = 7;
      return *((unsigned int *)&auxTableParamInfo + 4 * v1 + 3);
    }
  }
  return *((unsigned int *)&auxTableParamInfo + 4 * v1 + 3);
}

float BET5_Param_GetGlobalValue(uint64_t a1, int a2, _DWORD *a3)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = 6168;
      goto LABEL_9;
    case 2:
      uint64_t v3 = 6172;
      goto LABEL_9;
    case 3:
      uint64_t v3 = 6776;
      goto LABEL_9;
    case 4:
      uint64_t v3 = 6176;
      goto LABEL_9;
    case 5:
      uint64_t v3 = 6180;
      goto LABEL_9;
    case 6:
      uint64_t v3 = 6184;
      goto LABEL_9;
    case 7:
      uint64_t v3 = 6188;
LABEL_9:
      uint64_t v4 = (float *)(a1 + v3);
      float result = *v4;
      *a3 = *(_DWORD *)v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t select_bet5_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2229280769;
  }
  uint64_t result = 0;
  *a2 = &ISelect_Bet5;
  return result;
}

uint64_t select_bet5_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  if (!a3) {
    return 2229280775;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = 135967;
  }
  return result;
}

uint64_t select_bet5_ClassClose()
{
  return 0;
}

uint64_t select_bet5_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t *a5)
{
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  *a5 = 0;
  *((_DWORD *)a5 + 2) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v25);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v8 = heap_Calloc(*(void **)(v25 + 8), 1, 1304);
  uint64_t v13 = v25;
  if (!v8)
  {
    log_OutPublic(*(void *)(v25 + 32), (uint64_t)"SELECT_BET5", 31000, 0, v9, v10, v11, v12, v20[0]);
    return 2229280778;
  }
  uint64_t v14 = v8;
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = v13;
  *(_DWORD *)(v8 + 1296) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  uint64_t v21 = 0;
  LODWORD(v22) = 0;
  uint64_t Voice = select_bet5_loadVoice(a1, v25, 0, (uint64_t)&v21, 0);
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  uint64_t Voice = safeh_HandleCheck(v21, v22, 117, 43432);
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  *(void *)(v14 + 16) = v21;
  uint64_t Voice = select_bet5_loc_CreateAddonListParamName(v14);
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  uint64_t Voice = paramc_ParamSetStr(*(void *)(*(void *)(v14 + 8) + 40), *(void *)(v14 + 40), "");
  if ((Voice & 0x80000000) != 0) {
    goto LABEL_14;
  }
  uint64_t v16 = *(void *)(*(void *)(v14 + 8) + 40);
  uint64_t v17 = *(unsigned char **)(v14 + 40);
  v20[0] = v14;
  v20[1] = select_bet5_loc_CheckParamChange;
  v20[2] = select_bet5_loc_LearnParamChange;
  uint64_t Voice = paramc_ListenerAdd(v16, v17, v20);
  if ((Voice & 0x80000000) != 0
    || (uint64_t Voice = objc_GetObject(*(void *)(v25 + 48), (uint64_t)"LINGDB", &v23), (Voice & 0x80000000) != 0)
    || (*(void *)(v14 + 24) = *(void *)(v23 + 8),
        uint64_t Voice = objc_GetObject(*(void *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v24),
        (Voice & 0x80000000) != 0))
  {
LABEL_14:
    uint64_t UnicornPipeline = Voice;
LABEL_15:
    select_bet5_ObjClose(*a5, a5[1]);
    *a5 = 0;
    *((_DWORD *)a5 + 2) = 0;
    return UnicornPipeline;
  }
  *(void *)(v14 + 64) = *(void *)(v24 + 8);
  paramc_ParamSetInt(*(void *)(v25 + 40), (uint64_t)"bet2voiceframesize", *(_DWORD *)(*(void *)(*(void *)(v14 + 16) + 12480) + 24));
  *a5 = v14;
  *((_DWORD *)a5 + 2) = 135968;
  if ((select_bet5_RegisterObject(v14, a5[1], v25) & 0x80000000) == 0) {
    *(_DWORD *)(v14 + 1296) = 1;
  }
  uint64_t UnicornPipeline = select_bet5_loc_CreateUnicornPipeline((void *)v14);
  if ((UnicornPipeline & 0x80000000) != 0) {
    goto LABEL_15;
  }
  return UnicornPipeline;
}

uint64_t select_bet5_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 135968, 1304);
  if ((v3 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!a1) {
    return v3;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = UnicornPipelineClass_Destroy(*(void *)(a1 + 1232), *(void *)(a1 + 1240));
  if (*(void *)(a1 + 24)) {
    objc_ReleaseObject(*(void *)(v4 + 48), (uint64_t)"LINGDB");
  }
  if (*(void *)(a1 + 64)) {
    objc_ReleaseObject(*(void *)(v4 + 48), (uint64_t)"SYNTHSTREAM");
  }
  if (*(_DWORD *)(a1 + 1296) == 1) {
    objc_UnregisterObject(*(void *)(v4 + 48), (uint64_t)"SELECTBET5");
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = select_bet5_loc_CheckParamChange;
  uint64_t v13 = select_bet5_loc_LearnParamChange;
  paramc_ListenerRemove(v6, v7, &v12);
  select_bet5_loc_LearnParamChange(a1, *(char **)(a1 + 40), "");
  select_bet5_loc_FreeUnicornAddons(*(void **)(a1 + 8), *(void *)(a1 + 1248), *(_DWORD *)(a1 + 56));
  heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    if (!*(void *)a1 || (uint64_t v9 = *(void *)(*(void *)a1 + 48)) == 0) {
      uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 48);
    }
    objc_ReleaseObject(v9, v8);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    heap_Free(*(void **)(v4 + 8), v10);
  }
  *(void *)(a1 + 32) = 0;
  heap_Free(*(void **)(v4 + 8), a1);
  return v5;
}

uint64_t select_bet5_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)int __dst = 0u;
  long long v18 = 0u;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) != 0) {
    return 2229280776;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(v3 + 14536)) {
    cstdlib_strncpy(__dst, (const char *)(v3 + 14536), 0x100uLL);
  }
  uint64_t Voice = select_bet5_loadVoice(*(void *)a1, *(void *)(a1 + 8), __dst, (uint64_t)&v15, 0);
  if ((Voice & 0x80000000) != 0) {
    return Voice;
  }
  if ((safeh_HandleCheck(v15, v16, 117, 43432) & 0x80000000) == 0) {
    *(void *)(a1 + 16) = v15;
  }
  UnicornPipelineClass_Destroy(*(void *)(a1 + 1232), *(void *)(a1 + 1240));
  uint64_t UnicornPipeline = select_bet5_loc_CreateUnicornPipeline((void *)a1);
  if (cstdlib_strcmp(__dst, (const char *)(*(void *)(a1 + 16) + 14536)))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
    uint64_t v7 = *(unsigned char **)(a1 + 40);
    *(void *)&long long v12 = a1;
    *((void *)&v12 + 1) = select_bet5_loc_CheckParamChange;
    uint64_t v13 = select_bet5_loc_LearnParamChange;
    uint64_t v14 = 0;
    paramc_ListenerRemove(v6, v7, &v12);
    if (*(_DWORD *)(a1 + 56))
    {
      select_bet5_loc_LearnParamChange(a1, *(char **)(a1 + 40), "");
      select_bet5_loc_FreeUnicornAddons(*(void **)(a1 + 8), *(void *)(a1 + 1248), *(_DWORD *)(a1 + 56));
    }
    uint64_t Voice = select_bet5_loc_CreateAddonListParamName(a1);
    if ((Voice & 0x80000000) != 0) {
      return Voice;
    }
    paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 40), &v14);
    if (v14) {
      uint64_t v8 = select_bet5_loc_LearnParamChange(a1, *(char **)(a1 + 40), v14);
    }
    else {
      uint64_t v8 = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 8) + 40), *(void *)(a1 + 40), "");
    }
    uint64_t UnicornPipeline = v8;
    if ((v8 & 0x80000000) == 0)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 40);
      uint64_t v10 = *(unsigned char **)(a1 + 40);
      *(void *)&long long v12 = a1;
      *((void *)&v12 + 1) = select_bet5_loc_CheckParamChange;
      uint64_t v13 = select_bet5_loc_LearnParamChange;
      return paramc_ListenerAdd(v9, v10, &v12);
    }
  }
  return UnicornPipeline;
}

uint64_t select_bet5_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 2229280776;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) == 0)
  {
    synstrmaux_InitStreamOpener(a1 + 376, *(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5");
    uint64_t v8 = heap_Calloc(*(void **)(*(void *)(a1 + 8) + 8), 1, 3656);
    *(void *)(a1 + 32) = v8;
    if (v8)
    {
      uint64_t v13 = 0;
      *(void *)(a1 + 1200) = 0;
      *(_DWORD *)(a1 + 1208) = 0;
      *(void *)(a1 + 1272) = 0;
      *(void *)(a1 + 1288) = 0;
      *(void *)(a1 + 1280) = 0;
      do
      {
        uint64_t v14 = 0;
        while (s_select_Bet5_SynthStreamInfo[v14] != v13)
        {
          v14 += 6;
          if (v14 == 114) {
            goto LABEL_11;
          }
        }
        uint64_t v15 = *(const char **)&s_select_Bet5_SynthStreamInfo[v14 + 2];
        if (cstdlib_strcmp(v15, "application/x-realspeak-markers-pp;version=4.0"))
        {
          synstrmaux_RegisterInStream((_WORD *)(a1 + 376), (uint64_t)v15, (unint64_t)(v13 - 3) < 4, a1 + 16 * v13 + 72);
        }
        else
        {
          uint64_t v16 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 152))();
          synstrmaux_RegisterStream((_WORD *)(a1 + 376), (uint64_t)v15, 0, v16, (unint64_t)(v13 - 3) < 4, a1 + 16 * v13 + 72);
        }
LABEL_11:
        ++v13;
      }
      while (v13 != 7);
      for (uint64_t i = 0; i != 12; ++i)
      {
        uint64_t v18 = 0;
        while (s_select_Bet5_SynthStreamInfo[v18 + 1] != i)
        {
          v18 += 6;
          if (v18 == 114) {
            goto LABEL_20;
          }
        }
        long long v19 = *(const char **)&s_select_Bet5_SynthStreamInfo[v18 + 2];
        if (cstdlib_strcmp(v19, "application/x-realspeak-markers-pp;version=4.0"))
        {
          synstrmaux_RegisterOutStream((_WORD *)(a1 + 376), (uint64_t)v19, a1 + 16 * i + 184);
        }
        else
        {
          uint64_t v20 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 152))();
          synstrmaux_RegisterStream((_WORD *)(a1 + 376), (uint64_t)v19, 1, v20, 0, a1 + 16 * i + 184);
        }
LABEL_20:
        ;
      }
      uint64_t v21 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 376), *(void *)(a1 + 64), a3, a4);
      if ((v21 & 0x80000000) != 0)
      {
        uint64_t v7 = v21;
LABEL_26:
        synstrmaux_CloseStreams((_WORD *)(a1 + 376), *(void *)(a1 + 64));
        return v7;
      }
      uint64_t v7 = UnicornPipelineClass_SetForcedEEEnabled(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), 1);
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 31000, 0, v9, v10, v11, v12, v23);
      return 2229280778;
    }
  }
  return v7;
}

uint64_t select_bet5_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  uint64_t v7 = 2229280778;
  uint64_t v143 = 0;
  int v142 = 0;
  int v141 = 0;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) != 0) {
    return 2229280776;
  }
  *a5 = 1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = (*(uint64_t (**)(void, void, char *, uint64_t *))(v9 + 144))(*(void *)(a1 + 88), *(void *)(a1 + 96), (char *)&v145 + 4, &v144);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  *(_DWORD *)(a1 + 1200) |= v144;
  uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t *, char *))(v9 + 144))(*(void *)(a1 + 104), *(void *)(a1 + 112), &v145, (char *)&v143 + 4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  *(_DWORD *)(a1 + 1204) |= HIDWORD(v143);
  uint64_t v11 = (*(uint64_t (**)(void, void, char *, uint64_t *))(v9 + 144))(*(void *)(a1 + 72), *(void *)(a1 + 80), (char *)&v144 + 4, &v143);
  if ((v11 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 1208) |= v143;
    if (!HIDWORD(v145) || !v145 || !HIDWORD(v144))
    {
LABEL_122:
      uint64_t v97 = *(void *)(a1 + 32);
      if (v97 && *(__int16 *)(v97 + 10) <= 1)
      {
        Streauint64_t m = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
        if (Stream) {
          select_bet5_FreeTuningData(*(void **)(a1 + 8), (uint64_t *)(Stream + 1768));
        }
        UnicornPipelineClass_Release(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
        select_bet5_loc_deInitFeatures(a1);
        if (*(_DWORD *)(a1 + 1204) || *(_DWORD *)(a1 + 1200) || *(_DWORD *)(a1 + 1208))
        {
          int v99 = *(_DWORD *)(*(void *)(a1 + 32) + 3520);
          if (v99)
          {
            uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 64) + 104))(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 1256) + 32 * *(unsigned int *)(a1 + 1268), (32 * v99));
            if ((v11 & 0x80000000) != 0) {
              log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 58008, (uint64_t)"%s%s%s%x", v100, v101, v102, v103, "contentType");
            }
          }
          goto LABEL_136;
        }
        goto LABEL_162;
      }
      if (UnicornPipelineClass_isDone(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240)))
      {
        if (*(_DWORD *)(a1 + 1204) || *(_DWORD *)(a1 + 1200) || *(_DWORD *)(a1 + 1208))
        {
LABEL_136:
          synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 376), v9);
          int v104 = 1;
LABEL_137:
          *a5 = v104;
          return v11;
        }
LABEL_162:
        *a5 = 0;
        return v11;
      }
      uint64_t v105 = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
      uint64_t v11 = UnicornPipelineClass_ProcessPhoneme(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), (uint64_t)&v142);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      int PreparedCount = UnicornPipelineClass_GetPreparedCount(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
      int v107 = *(_DWORD *)(a1 + 1280);
      uint64_t v108 = (PreparedCount - v107);
      if (PreparedCount == v107)
      {
        int v117 = 0;
        goto LABEL_153;
      }
      uint64_t v109 = *(void *)(a1 + 16);
      unsigned int v110 = *(_DWORD *)(v109 + 11912);
      unsigned int v111 = *(_DWORD *)(a1 + 1276) + v108;
      unsigned int v112 = *(_DWORD *)(*(void *)(v109 + 12480) + 5924);
      LODWORD(v151[0]) = 0;
      LODWORD(v150) = 0;
      unsigned int v113 = v111 / v110;
      select_bet5_GetEEMode(a1, v151, &v150);
      if (!UnicornPipelineClass_GetForcedEEEnabled(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240))
        || v113 < v112
        || (uint64_t v11 = UnicornPipelineClass_SetForcedEEEnabled(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), 0),
            (v11 & 0x80000000) == 0))
      {
        if (v142) {
          goto LABEL_144;
        }
        uint64_t v140 = v105;
        int v124 = (int)v151[0];
        int v125 = UnicornPipelineClass_GetPreparedCount(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
        if (v124)
        {
          if (v125 >= (int)v110)
          {
            int v127 = *(_DWORD *)(a1 + 1280);
            uint64_t v105 = v140;
            while (1)
            {
              uint64_t v128 = (v125 - v127);
              if (v125 <= v127)
              {
LABEL_181:
                char v126 = 1;
                goto LABEL_182;
              }
              int v129 = (v125 - 1) / (int)v110;
              BOOL v130 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 32) + v129) == 1 && v129 * v110 + 1 == v125;
              if (v130) {
                break;
              }
              int v131 = v125--;
              if (v131 <= (int)v110) {
                goto LABEL_181;
              }
            }
            char v126 = 0;
            *(_DWORD *)(a1 + 1292) = v110 - 1;
            uint64_t v108 = v128;
LABEL_182:
            BOOL v134 = v113 >= v112 && v108 != 0 || v150 == 0;
            int v117 = 0;
            if ((v126 & 1) == 0 && v134)
            {
              if (!v108)
              {
                int v117 = 0;
                goto LABEL_145;
              }
LABEL_144:
              log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Sent to synth: %d", v114, v115, v116, v108);
              int v117 = 1;
LABEL_145:
              unsigned int v118 = *(_DWORD *)(a1 + 1280) + v108;
              uint64_t v10 = select_bet5_ProcessAndWriteMarkers(a1, v118);
              if ((v10 & 0x80000000) == 0)
              {
                uint64_t v10 = select_bet5_WriteAll(v8, a1 + 184, v9, v105, *(_DWORD *)(a1 + 1280), v118, *(_DWORD *)(a1 + 1288), *(_DWORD *)(a1 + 1292), *(_DWORD *)(a1 + 1284), v142, *(_DWORD *)(a1 + 1208));
                if ((v10 & 0x80000000) == 0)
                {
                  *(int32x2_t *)(a1 + 1276) = vadd_s32(*(int32x2_t *)(a1 + 1276), vdup_n_s32(v108));
                  uint64_t v11 = UnicornPipelineClass_SynthesizeDummy(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), v108);
                  if ((v11 & 0x80000000) != 0) {
                    return v11;
                  }
                  if (LODWORD(v151[0]))
                  {
                    int v119 = *(_DWORD *)(a1 + 1292);
                    *(_DWORD *)(a1 + 1284) += v119 + *(_DWORD *)(a1 + 1288);
                    *(void *)(a1 + 1288) = v110 - v119;
                  }
                  goto LABEL_153;
                }
              }
              return v10;
            }
LABEL_153:
            if (v142)
            {
              uint64_t v121 = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
              if (v121) {
                select_bet5_FreeTuningData(*(void **)(a1 + 8), (uint64_t *)(v121 + 1768));
              }
              if (*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 12480) + 6800) == 9
                && UNICORN__log_select_GetLogLevel(*(void *)(*(void *)(a1 + 8) + 32)) >= 3)
              {
                if (v121)
                {
                  unsigned int v122 = *(_DWORD *)(*(void *)(a1 + 16) + 11912) * *(__int16 *)(*(void *)(a1 + 32) + 10);
                  if (v122)
                  {
                    *(_DWORD *)(v121 + 1948) /= v122;
                    *(_DWORD *)(v121 + 1952) /= v122;
                    *(_DWORD *)(v121 + 1956) /= v122;
                    *(_DWORD *)(v121 + 1960) /= v122;
                    *(_DWORD *)(v121 + 1964) /= v122;
                    *(_DWORD *)(v121 + 1968) /= v122;
                    *(_DWORD *)(v121 + 1972) /= v122;
                    UNICORN__log_select_Diag(*(void *)(a1 + 8), 3, (uint64_t)"average counts: initCluster:%d searchStage1:%d searchStage2Casc1:%d searchStage2Casc2:%d searchStage2Casc3:%d vitInnerLoop:%d(%d)");
                  }
                }
              }
              UnicornPipelineClass_Release(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
              select_bet5_loc_deInitFeatures(a1);
              BOOL v123 = v142 == 0;
            }
            else
            {
              BOOL v123 = 1;
            }
            if (v117) {
              BOOL v123 = 1;
            }
            if (v123) {
              int v104 = 2;
            }
            else {
              int v104 = 0;
            }
            goto LABEL_137;
          }
          char v126 = 1;
        }
        else
        {
          char v126 = 0;
          uint64_t v108 = v108 + v125 / v110 * v110 - v125;
        }
        uint64_t v105 = v140;
        goto LABEL_182;
      }
      return v11;
    }
    *(_DWORD *)(a1 + 1264) = HIDWORD(v144) >> 5;
    v151[0] = 0;
    LODWORD(v150) = 0;
    uint64_t v12 = (*(uint64_t (**)(void, void, const void **, uint64_t *))(*(void *)(a1 + 64) + 88))(*(void *)(a1 + 72), *(void *)(a1 + 80), v151, &v150);
    uint64_t v17 = *(void *)(a1 + 8);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v49 = v12;
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"SELECT_BET5", 21008, (uint64_t)"%s%x", v13, v14, v15, v16, "lhError");
      return v49;
    }
    else
    {
      uint64_t v18 = (void *)heap_Calloc(*(void **)(v17 + 8), 1, v150);
      if (v18)
      {
        uint64_t v19 = (uint64_t)v18;
        uint64_t v20 = cstdlib_memcpy(v18, v151[0], v150);
        if (v150 >= 0x20)
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          while (1)
          {
            uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)(a1 + 64) + 152))(v20);
            uint64_t v20 = (void *)(*(uint64_t (**)(char *, void, uint64_t))(v23 + 8))((char *)v151[0] + v21, *(void *)(*(void *)(a1 + 8) + 8), v19 + v21);
            if (!v20) {
              break;
            }
            ++v22;
            v21 += 32;
            if (v22 >= (unint64_t)v150 >> 5) {
              goto LABEL_14;
            }
          }
          heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v19);
          return v7;
        }
LABEL_14:
        uint64_t v24 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 64) + 96))(*(void *)(a1 + 72), *(void *)(a1 + 80));
        if ((v24 & 0x80000000) != 0)
        {
          uint64_t v51 = v24;
          heap_Free(*(void **)(*(void *)(a1 + 8) + 8), v19);
          log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 2571, (uint64_t)"%s%x", v52, v53, v54, v55, "lhError");
          return v51;
        }
        else
        {
          *(void *)(a1 + 1256) = v19;
          uint64_t v25 = *(void *)(a1 + 32);
          LODWORD(v150) = 0;
          v151[0] = 0;
          uint64_t v26 = *(void *)(a1 + 64);
          uint64_t v27 = *(void *)(a1 + 8);
          uint64_t v28 = *(void *)(a1 + 16);
          int v29 = *(unsigned __int16 *)(v28 + 42808);
          *(void *)uint64_t v25 = v28 + 14384;
          if ((select_bet5_deserializeFeatures(v27, v26, *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t *)v25) & 0x80000000) != 0) {
            goto LABEL_27;
          }
          float v34 = (_WORD *)(v28 + 17962);
          int v35 = *(_DWORD *)(v28 + 17964);
          unsigned __int16 v36 = *(_WORD *)(v25 + 10);
          if (!v35) {
            v36 *= *v34;
          }
          uint64_t v139 = a1 + 72;
          uint64_t DirectStart = select_bet5_ReadDirectStart(v27, a1 + 72, v26, 2u, "application/x-realspeak-nn-ufeats", (uint64_t)v151, (uint64_t)&v150);
          uint64_t v31 = v150;
          if (v150 != 4 * v36 * v29)
          {
LABEL_27:
            uint64_t v7 = 2229280789;
            uint64_t v50 = 71001;
          }
          else
          {
            uint64_t v11 = DirectStart;
            if ((DirectStart & 0x80000000) != 0)
            {
              select_bet5_ReadDirectEnd(v27, v139, v26, 2u, "application/x-realspeak-nn-ufeats", v150);
              return v11;
            }
            if (VectBlock_Create(v27, a1 + 1216, v150, v150 / v36))
            {
              StartPtr_LH_F32 = (void *)VectBlock_Get_StartPtr_LH_F32(a1 + 1216);
              cstdlib_memcpy(StartPtr_LH_F32, v151[0], v150);
              select_bet5_ReadDirectEnd(v27, v139, v26, 2u, "application/x-realspeak-nn-ufeats", v150);
              uint64_t v150 = 0;
              v151[0] = 0;
              uint64_t v148 = 0;
              uint64_t v149 = 0;
              uint64_t v39 = *(void *)(a1 + 8);
              uint64_t v40 = *(void *)(a1 + 16);
              uint64_t v41 = *(void *)(a1 + 64);
              uint64_t v147 = 0;
              int v146 = 0;
              int v141 = 0;
              uint64_t v138 = v41;
              int v42 = select_bet5_ReadDirectStart(v39, v139, v41, 3u, "application/x-realspeak-tapids;version=4.0",
                      (uint64_t)&v146,
                      (uint64_t)&v148 + 4);
              unsigned int v47 = HIDWORD(v148);
              if (v42 < 0 || !HIDWORD(v148))
              {
                int v146 = 0;
              }
              else if (HIDWORD(v148) != 4 {
                                       * *(unsigned __int16 *)(*(void *)(a1 + 32) + 10)
              }
                                       * (unint64_t)*(unsigned __int16 *)(v40 + 17962))
              {
                log_OutPublic(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 71001, 0, v43, v44, v45, v46, v136);
                uint64_t v48 = 0;
                uint64_t v11 = 2229280789;
                goto LABEL_116;
              }
              unsigned int v56 = HIDWORD(v148) >> 2;
              if ((select_bet5_ReadDirectStart(v39, v139, v138, 4u, "application/x-realspeak-usfrozen;version=4.0",
                      (uint64_t)v151,
                      (uint64_t)&v148) & 0x80000000) != 0
                || !v148)
              {
                v151[0] = 0;
              }
              else
              {
                if (v47 >= 4)
                {
                  BOOL v130 = v56 == v148 >> 2;
                  unsigned int v56 = v148 >> 2;
                  uint64_t v57 = a1 + 72;
                  if (!v130) {
                    goto LABEL_57;
                  }
LABEL_44:
                  if ((select_bet5_ReadDirectStart(v39, v57, v138, 6u, "application/x-realspeak-usnoreusebias;version=4.0",
                          (uint64_t)&v150,
                          (uint64_t)&v147 + 4) & 0x80000000) != 0
                    || !HIDWORD(v147))
                  {
                    uint64_t v150 = 0;
                  }
                  else
                  {
                    if (v56)
                    {
                      BOOL v130 = v56 == HIDWORD(v147) / 0x1F8;
                      unsigned int v56 = HIDWORD(v147) / 0x1F8;
                      uint64_t v57 = a1 + 72;
                      if (!v130) {
                        goto LABEL_57;
                      }
LABEL_53:
                      uint64_t v58 = select_bet5_ReadDirectStart(v39, v57, v138, 5u, "application/x-realspeak-usprosodybias;version=4.0",
                              (uint64_t)&v149,
                              (uint64_t)&v147);
                      if ((v58 & 0x80000000) != 0 || !v147)
                      {
                        uint64_t v11 = 0;
                        uint64_t v149 = 0;
                      }
                      else
                      {
                        uint64_t v11 = v58;
                        if (v56)
                        {
                          BOOL v130 = v56 == v147 >> 3;
                          unsigned int v56 = v147 >> 3;
                          uint64_t v57 = a1 + 72;
                          if (!v130)
                          {
LABEL_57:
                            uint64_t v48 = 0;
                            uint64_t v11 = 2229280768;
LABEL_117:
                            select_bet5_ReadDirectEnd(v39, v57, v138, 3u, "application/x-realspeak-tapids;version=4.0",
                              HIDWORD(v148));
                            select_bet5_ReadDirectEnd(v39, v57, v138, 4u, "application/x-realspeak-usfrozen;version=4.0",
                              v148);
                            select_bet5_ReadDirectEnd(v39, v57, v138, 6u, "application/x-realspeak-usnoreusebias;version=4.0",
                              HIDWORD(v147));
                            select_bet5_ReadDirectEnd(v39, v57, v138, 5u, "application/x-realspeak-usprosodybias;version=4.0",
                              v147);
                            if ((v11 & 0x80000000) != 0)
                            {
                              select_bet5_FreeTuningData((void *)v39, (uint64_t *)&v141);
                              return v11;
                            }
                            uint64_t v11 = UnicornPipelineClass_Init(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), *(void *)(a1 + 32), a1 + 1216, v48, *(void *)(a1 + 1248), *(unsigned int *)(a1 + 56));
                            if ((v11 & 0x80000000) != 0) {
                              return v11;
                            }
                            UnicornPipelineClass_SetSIMDCallbacks(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240), 1);
                            uint64_t v96 = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
                            if (v96) {
                              *(_DWORD *)(v96 + 1976) = 1;
                            }
                            *(_DWORD *)(a1 + 1268) = 0;
                            *(_OWORD *)(a1 + 1280) = 0u;
                            goto LABEL_122;
                          }
LABEL_61:
                          if (!v56)
                          {
                            if (!v146)
                            {
                              uint64_t v48 = 0;
                              goto LABEL_117;
                            }
                            int v70 = *(unsigned __int16 *)(v40 + 17962) * *(__int16 *)(*(void *)(a1 + 32) + 10);
                            if (v70 >= 1 && *v146 == -1)
                            {
                              unsigned __int16 v135 = 0;
                              do
                                int v71 = ++v135;
                              while (v70 > v135 && v146[v135] == -1);
                            }
                            else
                            {
                              int v71 = 0;
                            }
                            uint64_t v48 = 0;
                            unsigned int v56 = (unsigned __int16)v70;
                            if (!(_WORD)v70 || v70 == v71) {
                              goto LABEL_117;
                            }
                          }
                          uint64_t v59 = (uint64_t *)heap_Calloc(*(void **)(v39 + 8), 1, 32);
                          uint64_t v48 = (uint64_t)v59;
                          int v141 = v59;
                          if (!v59
                            || (*((_DWORD *)v59 + 2) = v56,
                                uint64_t v137 = v56,
                                uint64_t v64 = heap_Calloc(*(void **)(v39 + 8), v56, 48),
                                (*(void *)uint64_t v48 = v64) == 0))
                          {
LABEL_115:
                            log_OutPublic(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 19000, 0, v60, v61, v62, v63, v136);
                            uint64_t v11 = 2229280778;
LABEL_116:
                            uint64_t v57 = a1 + 72;
                            goto LABEL_117;
                          }
                          int v65 = 50;
                          *(_DWORD *)(v48 + 20) = 50;
                          int v66 = (int *)(v48 + 20);
                          if ((paramc_ParamGetUInt(*(void *)(v39 + 40), (uint64_t)"uselectweightdurationbias", (unsigned int *)(v48 + 20)) & 0x80000000) == 0)
                          {
                            if (*v66 < 0x65) {
                              goto LABEL_68;
                            }
                            int v65 = 100;
                          }
                          *int v66 = v65;
LABEL_68:
                          int v67 = 50;
                          *(_DWORD *)(v48 + 24) = 50;
                          int v68 = (int *)(v48 + 24);
                          Uuint64_t Int = paramc_ParamGetUInt(*(void *)(v39 + 40), (uint64_t)"uselectweightpitchbias", (unsigned int *)(v48 + 24));
                          if ((UInt & 0x80000000) != 0)
                          {
                            uint64_t v11 = 0;
                          }
                          else
                          {
                            uint64_t v11 = UInt;
                            if (*v68 < 0x65)
                            {
LABEL_81:
                              uint64_t v72 = 0;
                              uint64_t v73 = 4;
                              uint64_t v74 = *(void *)v48;
                              uint64_t v75 = v56;
                              while (1)
                              {
                                uint64_t v76 = v72;
                                *(unsigned char *)(v74 + 48 * v72 + 28) = 0;
                                if (!v150) {
                                  break;
                                }
                                int v77 = *(_DWORD *)(v150 + 504 * v72);
                                if (!v77) {
                                  break;
                                }
                                uint64_t v48 = (uint64_t)v141;
                                int v78 = (_DWORD *)(*v141 + 48 * v72);
                                *int v78 = 1;
                                v78[6] = v77;
                                uint64_t v79 = heap_Calloc(*(void **)(v39 + 8), (v77 + 1), 4);
                                uint64_t v74 = *(void *)v48;
                                *(void *)(*(void *)v48 + 48 * v76 + 8) = v79;
                                if (!v79) {
                                  goto LABEL_115;
                                }
                                uint64_t v81 = v74 + 48 * v76;
                                int v83 = *(_DWORD *)(v81 + 24);
                                uint64_t v82 = (unsigned int *)(v81 + 24);
                                if (v83)
                                {
                                  unint64_t v84 = 0;
                                  uint64_t v85 = v150 + v73;
                                  uint64_t v75 = v137;
                                  do
                                  {
                                    *(_DWORD *)(v79 + 4 * v84) = *(_DWORD *)(v85 + 4 * v84);
                                    ++v84;
                                  }
                                  while (v84 < *v82);
                                }
                                else
                                {
                                  LODWORD(v84) = 0;
                                  uint64_t v75 = v137;
                                }
                                uint64_t v89 = (_DWORD *)(v79 + 4 * v84);
LABEL_101:
                                *uint64_t v89 = -1;
                                uint64_t v90 = v149;
                                if (!v149) {
                                  goto LABEL_113;
                                }
                                uint64_t v91 = v149 + 8 * v76;
                                int v92 = *(unsigned __int8 *)(v91 + 6);
                                int v93 = *(unsigned __int8 *)(v91 + 4);
                                if (!(v92 | v93)) {
                                  goto LABEL_113;
                                }
                                if (v93 == 1)
                                {
                                  float v94 = 100.0;
                                }
                                else
                                {
                                  if (v93 != 2) {
                                    goto LABEL_108;
                                  }
                                  float v94 = -100.0;
                                }
                                *(_DWORD *)(v48 + 16) = 1;
                                LOBYTE(v80) = *(unsigned char *)(v90 + 8 * v76 + 5);
                                float v80 = (float)LODWORD(v80);
                                *(float *)(v74 + 48 * v76 + 20) = v80 / v94;
LABEL_108:
                                if (v92 == 1)
                                {
                                  float v95 = 100.0;
                                  goto LABEL_112;
                                }
                                if (v92 == 2)
                                {
                                  float v95 = -100.0;
LABEL_112:
                                  *(_DWORD *)(v48 + 12) = 1;
                                  LOBYTE(v80) = *(unsigned char *)(v90 + 8 * v76 + 7);
                                  *(float *)(v74 + 48 * v76 + 16) = (float)LODWORD(v80) / v95;
                                }
LABEL_113:
                                uint64_t v72 = v76 + 1;
                                v73 += 504;
                                if (v76 + 1 == v75)
                                {
                                  *(_DWORD *)(v74 + 48 * v76) = 4;
                                  goto LABEL_116;
                                }
                              }
                              int v86 = (_DWORD *)heap_Calloc(*(void **)(v39 + 8), 2, 4);
                              uint64_t v48 = (uint64_t)v141;
                              uint64_t v74 = *v141;
                              *(void *)(*v141 + 48 * v76 + 8) = v86;
                              if (!v86) {
                                goto LABEL_115;
                              }
                              *(_DWORD *)(v74 + 48 * v76 + 24) = 1;
                              if (!v151[0] || *((_DWORD *)v151[0] + v76) == -1)
                              {
                                if (!v146 || v146[v76] == -1)
                                {
                                  *(_DWORD *)(v74 + 48 * v76) = 2;
                                  *int v86 = 0;
                                  goto LABEL_98;
                                }
                                log_OutText(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 5, 0, (uint64_t)"%s: %u", v61, v62, v63, (uint64_t)"Locked unit");
                                uint64_t v74 = *(void *)v48;
                                uint64_t v87 = *(void *)v48 + 48 * v76;
                                *(_DWORD *)uint64_t v87 = 0;
                                int v88 = v146;
                              }
                              else
                              {
                                log_OutText(*(void *)(v39 + 32), (uint64_t)"SELECT_BET5", 5, 0, (uint64_t)"%s: %u", v61, v62, v63, (uint64_t)"Locked unit");
                                uint64_t v74 = *(void *)v48;
                                uint64_t v87 = *(void *)v48 + 48 * v76;
                                *(_DWORD *)uint64_t v87 = 0;
                                int v88 = v151[0];
                              }
                              int v86 = *(_DWORD **)(v87 + 8);
                              *int v86 = v88[v76];
LABEL_98:
                              uint64_t v89 = v86 + 1;
                              goto LABEL_101;
                            }
                            int v67 = 100;
                          }
                          *int v68 = v67;
                          goto LABEL_81;
                        }
                        unsigned int v56 = v147 >> 3;
                      }
                      uint64_t v57 = a1 + 72;
                      goto LABEL_61;
                    }
                    unsigned int v56 = HIDWORD(v147) / 0x1F8;
                  }
                  uint64_t v57 = a1 + 72;
                  goto LABEL_53;
                }
                unsigned int v56 = v148 >> 2;
              }
              uint64_t v57 = a1 + 72;
              goto LABEL_44;
            }
            uint64_t v50 = 71000;
          }
          log_OutPublic(*(void *)(v27 + 32), (uint64_t)"SELECT_BET5", v50, 0, v30, v31, v32, v33, v136);
        }
      }
    }
    return v7;
  }
  return v11;
}

uint64_t select_bet5_ProcessEnd(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  if ((safeh_HandleCheck(a1, a2, 135968, 1304) & 0x80000000) != 0) {
    return 2229280776;
  }
  *(void *)(a1 + 1272) = 0;
  *(void *)(a1 + 1200) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  uint64_t v3 = synstrmaux_CloseStreams((_WORD *)(a1 + 376), *(void *)(a1 + 64));
  if (!UnicornPipelineClass_isDone(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240)))
  {
    Streauint64_t m = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
    if (Stream) {
      uint64_t v5 = *(void *)(Stream + 1768);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v7 = v5;
    UnicornPipelineClass_Release(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
    select_bet5_FreeTuningData(*(void **)(a1 + 8), &v7);
  }
  if (*(void *)(a1 + 32))
  {
    select_bet5_loc_deInitFeatures(a1);
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 32));
  }
  *(void *)(a1 + 32) = 0;
  return v3;
}

uint64_t select_bet5_GetAlphabetInformation(uint64_t a1, int a2, char *a3)
{
  uint64_t v5 = safeh_HandleCheck(a1, a2, 135968, 1304);
  if ((v5 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!*(void *)(a1 + 16)) {
    return 2229280785;
  }
  uint64_t v6 = v5;
  cstdlib_memset(a3, 0, 0x985uLL);
  uint64_t v7 = 0;
  int v8 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) != 255)
    {
      uint64_t v9 = &a3[(unsigned __int16)v8];
      *uint64_t v9 = v7;
      v9[514] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 15500);
      v9[257] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 15243);
      v9[771] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 15757);
      v9[1028] = *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned __int8 *)(*(void *)(a1 + 16) + v7 + 16528) + 16014);
      ++v8;
    }
    ++v7;
  }
  while (v7 != 256);
  cstdlib_strcpy(a3 + 1285, (const char *)(*(void *)(a1 + 16) + 16784));
  if (*(_DWORD *)(*(void *)(a1 + 16) + 17504) == 1 && cstdlib_strlen("12345"))
  {
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v12 = &a12345[v10];
      int v13 = *v12;
      if (!cstdlib_strchr(a3 + 1285, v13) && !cstdlib_strchr(a3, v13)) {
        cstdlib_strncat(a3 + 1349, v12, 1uLL);
      }
      uint64_t v10 = (unsigned __int16)++v11;
    }
    while (cstdlib_strlen("12345") > (unsigned __int16)v11);
  }
  uint64_t v14 = *(const char ***)(*(void *)(a1 + 16) + 16848);
  if (v14)
  {
    uint64_t v15 = *v14;
    if (*v14)
    {
      int v16 = 0;
      uint64_t v17 = a3 + 1413;
      do
      {
        cstdlib_strcat(v17, v15);
        cstdlib_strcat(v17, " ");
        uint64_t v15 = *(const char **)(*(void *)(*(void *)(a1 + 16) + 16848) + 8 * (unsigned __int16)++v16);
      }
      while (v15);
    }
  }
  return v6;
}

uint64_t select_bet5_QueryCapability(uint64_t a1, int a2, const char *a3, _DWORD *a4)
{
  uint64_t v7 = 2229280768;
  uint64_t v8 = safeh_HandleCheck(a1, a2, 135968, 1304);
  if ((v8 & 0x80000000) != 0) {
    return 2229280776;
  }
  if (!*(void *)(a1 + 16)) {
    return 2229280785;
  }
  uint64_t v9 = v8;
  if (!cstdlib_strcmp(a3, "PRM") || !cstdlib_strcmp(a3, "BND"))
  {
    *a4 = 1;
    return v9;
  }
  if (!cstdlib_strcmp(a3, "max-PRM"))
  {
    LOBYTE(v10) = 3;
    goto LABEL_12;
  }
  if (!cstdlib_strcmp(a3, "units-per-phoneme"))
  {
    int v10 = *(_DWORD *)(*(void *)(a1 + 16) + 11912);
LABEL_12:
    *(unsigned char *)a4 = v10;
    return v9;
  }
  return v7;
}

uint64_t select_bet5_loc_CreateAddonListParamName(uint64_t a1)
{
  __s = 0;
  int v13 = 0;
  __s2 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"voice", &v13);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"voiceoperatingpoint", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v3 = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"vopversion", &__s2);
  if ((v3 & 0x80000000) == 0)
  {
    unsigned int v4 = cstdlib_strlen(__s);
    if (__s2) {
      uint64_t v5 = cstdlib_strlen(__s2);
    }
    else {
      uint64_t v5 = 0;
    }
    unsigned int v7 = cstdlib_strlen(v13);
    uint64_t v8 = (char *)heap_Realloc(*(uint64_t **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 40), v5 + v4 + v7 + 16);
    *(void *)(a1 + 40) = v8;
    if (v8)
    {
      uint64_t v9 = v7;
      cstdlib_strcpy(v8, "voiceaddons.");
      if (v7)
      {
        uint64_t v10 = 0;
        do
        {
          *(unsigned char *)(*(void *)(a1 + 40) + v10 + 12) = cstdlib_tolower(v13[v10]);
          ++v10;
        }
        while (v9 != v10);
      }
      *(unsigned char *)(v9 + *(void *)(a1 + 40) + 12) = 0;
      cstdlib_strcat(*(char **)(a1 + 40), ".");
      cstdlib_strcat(*(char **)(a1 + 40), __s);
      if (__s2)
      {
        cstdlib_strcat(*(char **)(a1 + 40), ".");
        cstdlib_strcat(*(char **)(a1 + 40), __s2);
      }
    }
    else
    {
      return 2229280778;
    }
  }
  return v3;
}

uint64_t select_bet5_loc_CheckParamChange()
{
  return 0;
}

uint64_t select_bet5_loc_LearnParamChange(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (cstdlib_strcmp(__s1, *(const char **)(a1 + 40))) {
    return 0;
  }
  v42[0] = 0;
  v42[1] = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  *(_OWORD *)__s = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  *(_OWORD *)int __dst = 0u;
  unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 11804);
  if (*(_DWORD *)(a1 + 56))
  {
    unint64_t v7 = 0;
    do
    {
      if (!*(void *)a1 || (uint64_t v8 = *(void *)(*(void *)a1 + 48)) == 0) {
        uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 48);
      }
      objc_ReleaseObject(v8, *(void *)(*(void *)(a1 + 48) + 8 * v7++));
      unint64_t v9 = *(unsigned int *)(a1 + 56);
    }
    while (v7 < v9);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  select_bet5_loc_FreeUnicornAddons(*(void **)(a1 + 8), *(void *)(a1 + 1248), v9);
  *(_DWORD *)(a1 + 56) = 0;
  if (!a3 || !cstdlib_strlen(a3))
  {
    heap_Free(*(void **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 48));
    uint64_t v5 = 0;
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    return v5;
  }
  size_t v41 = 0;
  if (betX_GetVAOName(a3, &v41, __s, 0x100uLL))
  {
    uint64_t v5 = 2229280778;
    do
    {
      uint64_t Voice = paramc_ParamSetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"voiceaddon", __s);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      uint64_t Voice = select_bet5_loadVoice(*(void *)a1, *(void *)(a1 + 8), 0, (uint64_t)v42, 1);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      uint64_t v11 = v42[0];
      uint64_t v12 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 48), 8 * (*(_DWORD *)(a1 + 56) + 1));
      *(void *)(a1 + 48) = v12;
      if (!v12) {
        return v5;
      }
      uint64_t v16 = *(unsigned int *)(a1 + 56);
      *(void *)(v12 + 8 * v16) = v11;
      uint64_t v17 = *(void *)(a1 + 16);
      if (!v17) {
        return 2229280774;
      }
      int v18 = *(_DWORD *)(v17 + 11912);
      uint64_t v19 = *(void *)(v17 + 12480);
      int v20 = *(_DWORD *)(v19 + 24);
      uint64_t v21 = *(void *)(v11 + 12480);
      int v22 = *(_DWORD *)(v21 + 24);
      int v23 = *(_DWORD *)(v19 + 11520);
      int v24 = *(_DWORD *)(v21 + 11520);
      if (v18 != *(_DWORD *)(v11 + 11912) || v20 != v22 || v23 != v24)
      {
        log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 1, 0, (uint64_t)"Unable to load VAO data %s: expected #states=%d frame_size=%d psola_mode=%d found #states=%d frame_size=%d psola_mode=%d", v13, v14, v15, v11);
        return 2229280793;
      }
      *(_DWORD *)(a1 + 56) = v16 + 1;
      cstdlib_strcpy(__dst, "voiceaddonoffset.");
      if (cstdlib_strlen(__s))
      {
        uint64_t v25 = 0;
        unsigned int v26 = 1;
        do
        {
          __dst[v25 + 17] = cstdlib_tolower(__s[v25]);
          uint64_t v25 = v26;
        }
        while (cstdlib_strlen(__s) > v26++);
      }
      unsigned int v28 = v6 + *(_DWORD *)(v11 + 11912) - 1;
      uint64_t Voice = paramc_ParamSetInt(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)__dst, v28);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      unsigned int v6 = *(_DWORD *)(v11 + 11804) + v28;
      cstdlib_memset(__s, 0, 0x100uLL);
      cstdlib_memset(__dst, 0, 0x100uLL);
    }
    while (betX_GetVAOName(a3, &v41, __s, 0x100uLL));
  }
  uint64_t v29 = *(unsigned int *)(a1 + 56);
  if (v29)
  {
    uint64_t v30 = *(void *)(a1 + 8);
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(uint64_t **)(a1 + 48);
    int v33 = *(_DWORD *)(v31 + 11804);
    uint64_t v34 = heap_Calloc(*(void **)(v30 + 8), *(unsigned int *)(a1 + 56), 48);
    if (!v34) {
      return 2229280778;
    }
    uint64_t v35 = v34;
    uint64_t v36 = 0;
    uint64_t v37 = v31 + 11912;
    while (1)
    {
      int v38 = v33 + *(_DWORD *)(*v32 + 11912) - 1;
      uint64_t Voice = UnicornAddon_Init(v30, v37, *v32 + 11912, v38, v35 + v36);
      if ((Voice & 0x80000000) != 0) {
        return Voice;
      }
      uint64_t v39 = *v32++;
      int v33 = *(_DWORD *)(v39 + 11804) + v38;
      v36 += 48;
      if (48 * v29 == v36) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v35 = 0;
LABEL_37:
  uint64_t v5 = 0;
  *(void *)(a1 + 1248) = v35;
  return v5;
}

uint64_t select_bet5_RegisterObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  cstdlib_memset(&v7, 0, 0x28uLL);
  LOBYTE(v7) = 1;
  *((void *)&v7 + 1) = &ISelect_Bet5;
  *(void *)&long long v8 = a1;
  *((void *)&v8 + 1) = a2;
  uint64_t v9 = 0;
  return objc_RegisterObject(*(void *)(a3 + 48), (uint64_t)"SELECTBET5", &v7);
}

uint64_t select_bet5_loc_CreateUnicornPipeline(void *a1)
{
  uint64_t v10 = 0;
  uint64_t v2 = a1[1];
  paramc_ParamGetStr(*(void *)(v2 + 40), (uint64_t)"bet5multithreadenabled", &v10);
  if (v10 && *v10 && cstdlib_strchr("nNfF0", (char)*v10))
  {
    uint64_t v3 = UnicornPipelineFactory_Create(0, v2, a1[2] + 11912, *(void *)(a1[2] + 12480));
    a1[154] = v3;
    a1[155] = v4;
  }
  else
  {
    uint64_t v3 = UnicornPipelineFactory_Create(*(void *)(v2 + 408) != 0, v2, a1[2] + 11912, *(void *)(a1[2] + 12480));
    a1[154] = v3;
    a1[155] = v4;
    if (!*(void *)(v2 + 408))
    {
      log_OutText(*(void *)(a1[1] + 32), (uint64_t)"SELECT_BET5", 1, 0, (uint64_t)"Impossible to use MultiThread implementation because no external service was found to support this. Fallback to standard implementation.", v5, v6, v7, v9);
      uint64_t v3 = (void *)a1[154];
      uint64_t v4 = a1[155];
    }
  }
  return safeh_HandleCheck((uint64_t)v3, v4, 135969, 0);
}

void *select_bet5_loc_FreeUnicornAddons(void *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 48 * a3;
    do
    {
      UnicornAddon_Deinit(v4, a2 + v5);
      v5 += 48;
    }
    while (v6 != v5);
    uint64_t v7 = (void *)v4[1];
    return heap_Free(v7, a2);
  }
  return result;
}

void *select_bet5_FreeTuningData(void *result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (v3)
    {
      uint64_t v4 = result;
      uint64_t v5 = *(void *)v3;
      if (*(void *)v3)
      {
        if (*(_DWORD *)(v3 + 8))
        {
          unint64_t v6 = 0;
          uint64_t v7 = 8;
          do
          {
            if (*(void *)(*(void *)v3 + v7))
            {
              heap_Free((void *)v4[1], *(void *)(*(void *)v3 + v7));
              uint64_t v3 = *a2;
            }
            ++v6;
            v7 += 48;
          }
          while (v6 < *(unsigned int *)(v3 + 8));
          uint64_t v5 = *(void *)v3;
        }
        heap_Free((void *)v4[1], v5);
        uint64_t v3 = *a2;
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *a2 = 0;
    }
  }
  return result;
}

void *select_bet5_loc_deInitFeatures(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  VectBlock_Destroy((void **)v2, (uint64_t *)(a1 + 1216));
  uint64_t result = select_bet5_deserializeFeatures_Free((void *)v2, *(void **)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 1256);
  if (v4)
  {
    if (*(_DWORD *)(a1 + 1264))
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)(a1 + 64) + 152))(result);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void))(v7 + 16))(*(void *)(a1 + 1256) + v5, *(void *)(v2 + 8));
        ++v6;
        v5 += 32;
      }
      while (v6 < *(unsigned int *)(a1 + 1264));
      uint64_t v4 = *(void *)(a1 + 1256);
    }
    uint64_t result = heap_Free(*(void **)(v2 + 8), v4);
    *(void *)(a1 + 1256) = 0;
  }
  return result;
}

uint64_t select_bet5_GetEEMode(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6 = 0;
  *a2 = 1;
  *a3 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 8) + 40), (uint64_t)"bet5earlyemissionallowed", &v6);
  if ((result & 0x80000000) == 0 && v6 && *v6)
  {
    uint64_t result = (uint64_t)cstdlib_strchr("yYtT1", (char)*v6);
    if (result)
    {
      *a3 = 1;
      *a2 = 0;
    }
  }
  return result;
}

uint64_t select_bet5_ProcessAndWriteMarkers(uint64_t a1, unsigned int a2)
{
  if (!*(void *)(a1 + 1256) || *(_DWORD *)(a1 + 1268) >= *(_DWORD *)(a1 + 1264)) {
    return 0;
  }
  Streauint64_t m = UnicornPipelineClass_GetStream(*(uint64_t **)(a1 + 1232), *(void *)(a1 + 1240));
  uint64_t v8 = Stream;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 16) + 11912);
  unsigned int v10 = a2 / v9;
  uint64_t v11 = *(void *)(a1 + 1256);
  uint64_t v12 = *(unsigned int *)(a1 + 1268);
  uint64_t v13 = (int *)(v11 + 32 * v12);
  unsigned int v14 = *(_DWORD *)(Stream + 400);
  if (v14 < a2 / v9)
  {
    int v15 = 0;
    int v16 = 0;
    unsigned int v17 = *(_DWORD *)(a1 + 1264);
    BOOL v18 = v17 >= v12;
    int v19 = v17 - v12;
    if (!v18) {
      int v19 = 0;
    }
    int v20 = *(_DWORD *)(Stream + 400);
    uint64_t v21 = (_DWORD *)(v11 + 32 * v12);
    do
    {
      if (v16 == v19) {
        break;
      }
      v21[4] = 0;
      if (*v21 == 33)
      {
        int v22 = 0;
        unsigned int v23 = v20 * v9;
        uint64_t v24 = v9;
        do
        {
          uint64_t v5 = *(unsigned int *)(*(void *)(v8 + 1800) + 40 * v23 + 8);
          v22 += v5;
          ++v23;
          --v24;
        }
        while (v24);
        v21[4] = v22;
        ++v15;
      }
      v21 += 8;
      ++v16;
      int v20 = v14 + v15;
    }
    while (v14 + v15 < v10);
  }
  if (*(_DWORD *)(a1 + 1288))
  {
    int v25 = *(_DWORD *)(a1 + 1280);
    if (v25)
    {
      unsigned int v26 = *(_DWORD *)(a1 + 1264);
      unsigned int v27 = v12;
      if (v12 < v26)
      {
        while (1)
        {
          int v28 = *v13;
          v13 += 8;
          if (v28 == 33) {
            break;
          }
          if (v26 == ++v27)
          {
            unsigned int v27 = *(_DWORD *)(a1 + 1264);
            break;
          }
        }
      }
      if (v27 == v26) {
        uint64_t v29 = v12;
      }
      else {
        uint64_t v29 = v27;
      }
      uint64_t v30 = v11 + 32 * v29;
      unsigned int v32 = *(_DWORD *)(v30 + 16);
      uint64_t v31 = (unsigned int *)(v30 + 16);
      unsigned int v33 = *(_DWORD *)(*(void *)(v8 + 1800) + 40 * (v25 - 1) + 8);
      BOOL v18 = v32 >= v33;
      unsigned int v34 = v32 - v33;
      if (v18) {
        *uint64_t v31 = v34;
      }
    }
  }
  if (v14 >= v10)
  {
    uint64_t v35 = 0;
  }
  else
  {
    LODWORD(v35) = 0;
    unsigned int v36 = *(_DWORD *)(a1 + 1264);
    BOOL v18 = v36 >= v12;
    LODWORD(v37) = v36 - v12;
    if (v18) {
      uint64_t v37 = v37;
    }
    else {
      uint64_t v37 = 0;
    }
    int v38 = (_DWORD *)(v11 + 32 * v12 + 16);
    while (v37 != v35)
    {
      int v39 = *(_DWORD *)(a1 + 1272);
      *(v38 - 1) = v39;
      if (*(v38 - 4) == 33)
      {
        *(_DWORD *)(a1 + 1272) = *v38 + v39;
        *(_DWORD *)(v8 + 400) = ++v14;
      }
      uint64_t v35 = (v35 + 1);
      v38 += 8;
      if (v14 >= v10) {
        goto LABEL_38;
      }
    }
    uint64_t v35 = v37;
  }
LABEL_38:
  log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"About to write %d markers, starting with index %d", v5, v6, v7, v35);
  unint64_t v41 = *(unsigned int *)(a1 + 1268);
  if (v41 < (int)v41 + (int)v35)
  {
    uint64_t v42 = 32 * v41;
    do
    {
      marker_logOutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTH_BET5", 3, (uint64_t)"Outputting marker ", *(void *)(a1 + 1256) + v42);
      ++v41;
      v42 += 32;
    }
    while (v41 < (*(_DWORD *)(a1 + 1268) + v35));
    LODWORD(v41) = *(_DWORD *)(a1 + 1268);
  }
  if (v35)
  {
    uint64_t v40 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 64) + 104))(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 1256) + 32 * v41, (32 * v35));
    if ((v40 & 0x80000000) != 0) {
      log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 58008, (uint64_t)"%s%s%s%x", v43, v44, v45, v46, "contentType");
    }
  }
  else
  {
    uint64_t v40 = 0;
  }
  *(_DWORD *)(a1 + 1268) += v35;
  if (*(_DWORD *)(a1 + 1292))
  {
    long long __b = 0u;
    long long v53 = 0u;
    cstdlib_memset(&__b, 0, 0x20uLL);
    DWORD2(v53) = 35;
    int v47 = *(_DWORD *)(a1 + 1272);
    LODWORD(__b) = 33;
    HIDWORD(__b) = v47;
    LODWORD(v53) = *(_DWORD *)(*(void *)(v8 + 1800) + 40 * (a2 - 1) + 8);
    *(_DWORD *)(a1 + 1272) = v53 + v47;
    log_OutText(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Outputting             trailSilMrk:tag=%d u32Value=%d posCur=%d lenCur=%d", v48, v49, v50, 33);
    return (*(uint64_t (**)(void, void, long long *, uint64_t))(*(void *)(a1 + 64) + 104))(*(void *)(a1 + 184), *(void *)(a1 + 192), &__b, 32);
  }
  return v40;
}

uint64_t select_bet5_WriteAll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, int a11)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  unint64_t v11 = a6 - a5 + a7 + a8;
  if (!(a6 - a5 + a7 + a8)) {
    return 0;
  }
  for (uint64_t i = 1; i != 12; ++i)
  {
    uint64_t v16 = 0;
    while (s_select_Bet5_SynthStreamInfo[v16 + 1] != i)
    {
      v16 += 6;
      if (v16 == 114)
      {
        LODWORD(v17) = 0;
        goto LABEL_8;
      }
    }
    uint64_t v17 = *(void *)&s_select_Bet5_SynthStreamInfo[v16 + 4];
LABEL_8:
    uint64_t v22 = (*(uint64_t (**)(void, void, char *, void))(a3 + 112))(*(void *)(a2 + 16 * i), *(void *)(a2 + 16 * i + 8), (char *)&v80 + 8 * i, (v11 * v17));
    if ((v22 & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", 71003, (uint64_t)"%s%s%s%x", v18, v19, v20, v21, "contentType");
      return v22;
    }
  }
  if (a7)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(a4 + 1800);
    uint64_t v25 = *((void *)&v80 + 1);
    long long v26 = v81;
    uint64_t v27 = *((void *)&v82 + 1);
    long long v28 = v83;
    long long v30 = v84;
    uint64_t v29 = v85;
    uint64_t v31 = (_DWORD *)(v82 + 4);
    uint64_t v32 = *((void *)&v85 + 1);
    do
    {
      *(v31 - 1) = 0;
      *uint64_t v31 = a9 + a5 + v23;
      if (v24)
      {
        *(_DWORD *)(v25 + 4 * v23) = -1;
        *(_DWORD *)(v26 + 4 * v23) = 0;
        *(_DWORD *)(*((void *)&v26 + 1) + 4 * v23) = 0;
        *(_DWORD *)(v27 + 4 * v23) = 0;
        *(_DWORD *)(v28 + 4 * v23) = 0;
        *(_DWORD *)(*((void *)&v28 + 1) + 4 * v23) = 0;
        *(_DWORD *)(v30 + 4 * v23) = 0;
        *(_DWORD *)(*((void *)&v30 + 1) + 4 * v23) = 0;
        *(_DWORD *)(v29 + 4 * v23) = 0;
        *(_DWORD *)(v32 + 4 * v23) = 0;
      }
      ++v23;
      v31 += 2;
    }
    while (a7 != v23);
  }
  uint64_t v33 = a8;
  unint64_t v34 = v11 - a8;
  if (v34 > a7)
  {
    uint64_t v35 = 0;
    uint64_t v36 = *((void *)&v85 + 1) + 4 * a7;
    uint64_t v37 = v85 + 4 * a7;
    if (a11) {
      int v38 = 3;
    }
    else {
      int v38 = 1;
    }
    uint64_t v39 = *((void *)&v84 + 1) + 4 * a7;
    uint64_t v40 = v84 + 4 * a7;
    uint64_t v41 = *((void *)&v83 + 1) + 4 * a7;
    uint64_t v42 = v83 + 4 * a7;
    uint64_t v43 = *((void *)&v82 + 1) + 4 * a7;
    uint64_t v44 = *((void *)&v81 + 1) + 4 * a7;
    uint64_t v45 = v81 + 4 * a7;
    uint64_t v46 = *(void *)(a4 + 1800);
    unint64_t v47 = ~(unint64_t)a8 + v11 - a7;
    uint64_t v48 = (_DWORD *)(v82 + 8 * a7 + 4);
    uint64_t v49 = *((void *)&v80 + 1) + 4 * a7;
    do
    {
      if (v47 != v35 || a10 == 0) {
        int v51 = 0;
      }
      else {
        int v51 = v38;
      }
      *(v48 - 1) = v51;
      *uint64_t v48 = a9 + a7 + a5 + v35;
      if (v46)
      {
        long long v52 = (_DWORD *)(v46 + 40 * (a5 + v35));
        *(_DWORD *)(v49 + 4 * v35) = *v52;
        *(_DWORD *)(v45 + 4 * v35) = v52[1];
        *(_DWORD *)(v44 + 4 * v35) = v52[2];
        *(_DWORD *)(v43 + 4 * v35) = v52[3];
        *(_DWORD *)(v42 + 4 * v35) = v52[4];
        *(_DWORD *)(v41 + 4 * v35) = v52[5];
        *(_DWORD *)(v40 + 4 * v35) = v52[6];
        *(_DWORD *)(v39 + 4 * v35) = v52[7];
        *(_DWORD *)(v37 + 4 * v35) = v52[8];
        *(_DWORD *)(v36 + 4 * v35) = v52[9];
      }
      ++v35;
      v48 += 2;
    }
    while ((unint64_t)a7 + v35 < v34);
  }
  if (v34 < v11)
  {
    uint64_t v53 = 0;
    uint64_t v54 = 4 * v11 - 4 * v33;
    uint64_t v55 = *((void *)&v85 + 1) + v54;
    uint64_t v56 = v85 + v54;
    uint64_t v57 = *((void *)&v84 + 1) + v54;
    uint64_t v58 = v84 + v54;
    uint64_t v59 = *((void *)&v83 + 1) + v54;
    uint64_t v60 = v83 + v54;
    uint64_t v61 = *((void *)&v82 + 1) + v54;
    uint64_t v62 = *((void *)&v81 + 1) + v54;
    uint64_t v63 = v81 + v54;
    uint64_t v64 = *((void *)&v80 + 1) + v54;
    uint64_t v65 = *(void *)(a4 + 1800);
    long long v66 = (_DWORD *)(v82 - 8 * v33 + 8 * v11 + 4);
    do
    {
      *(v66 - 1) = 0;
      *long long v66 = a9 + a7 + a6 + v53;
      if (v65)
      {
        *(_DWORD *)(v64 + 4 * v53) = -1;
        *(_DWORD *)(v63 + 4 * v53) = 0;
        *(_DWORD *)(v62 + 4 * v53) = 0;
        *(_DWORD *)(v61 + 4 * v53) = 0;
        *(_DWORD *)(v60 + 4 * v53) = 0;
        *(_DWORD *)(v59 + 4 * v53) = 0;
        *(_DWORD *)(v58 + 4 * v53) = 0;
        *(_DWORD *)(v57 + 4 * v53) = 0;
        *(_DWORD *)(v56 + 4 * v53) = 0;
        *(_DWORD *)(v55 + 4 * v53) = 0;
      }
      ++v53;
      v66 += 2;
    }
    while (v33 != v53);
  }
  for (uint64_t j = 1; j != 12; ++j)
  {
    if (*((void *)&v80 + j))
    {
      uint64_t v68 = 0;
      while (s_select_Bet5_SynthStreamInfo[v68 + 1] != j)
      {
        v68 += 6;
        if (v68 == 114)
        {
          LODWORD(v69) = 0;
          goto LABEL_41;
        }
      }
      uint64_t v69 = *(void *)&s_select_Bet5_SynthStreamInfo[v68 + 4];
LABEL_41:
      uint64_t v22 = (*(uint64_t (**)(void, void, void))(a3 + 120))(*(void *)(a2 + 16 * j), *(void *)(a2 + 16 * j + 8), (v11 * v69));
      if ((v22 & 0x80000000) != 0) {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", 71003, (uint64_t)"%s%s%s%x", v70, v71, v72, v73, "contentType");
      }
    }
  }
  return v22;
}

uint64_t select_bet5_ReadDirectStart(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = 0;
  while (s_select_Bet5_SynthStreamInfo[v13] != a4)
  {
    v13 += 6;
    if (v13 == 114) {
      return 2229280788;
    }
  }
  int v15 = *(const char **)&s_select_Bet5_SynthStreamInfo[v13 + 2];
  uint64_t v16 = (uint64_t *)(a2 + 16 * a4);
  uint64_t NullHandle = safeh_GetNullHandle();
  BOOL v19 = safeh_HandlesEqual(*v16, v16[1], NullHandle, v18);
  if (a4 - 3 <= 3 && v19) {
    return 0;
  }
  if (cstdlib_strcmp(v15, a5))
  {
    uint64_t v14 = 2229280788;
  }
  else
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 88))(*v16, v16[1], a6, a7);
    if ((v14 & 0x80000000) == 0) {
      return v14;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"SELECT_BET5", 71001, (uint64_t)"%s%s", v20, v21, v22, v23, "layer");
  return v14;
}

uint64_t select_bet5_ReadDirectEnd(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6)
{
  uint64_t v10 = result;
  uint64_t v11 = 0;
  while (s_select_Bet5_SynthStreamInfo[v11] != a4)
  {
    v11 += 6;
    if (v11 == 114) {
      return result;
    }
  }
  uint64_t v12 = *(const char **)&s_select_Bet5_SynthStreamInfo[v11 + 2];
  uint64_t v13 = (uint64_t *)(a2 + 16 * a4);
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t result = safeh_HandlesEqual(*v13, v13[1], NullHandle, v15);
  if (a4 - 3 > 3 || !result)
  {
    if (cstdlib_strcmp(v12, a5)) {
      return log_OutPublic(*(void *)(v10 + 32), (uint64_t)"SELECT_BET5", 71001, (uint64_t)"%s%s", v16, v17, v18, v19, "layer");
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 96))(*v13, v13[1], a6);
    if ((result & 0x80000000) != 0) {
      return log_OutPublic(*(void *)(v10 + 32), (uint64_t)"SELECT_BET5", 71001, (uint64_t)"%s%s", v16, v17, v18, v19, "layer");
    }
  }
  return result;
}

uint64_t PredictPipeline_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 1072);
  uint64_t v4 = (void *)*(unsigned int *)(a1 + 392);
  v8[1] = a2;
  v8[2] = a3;
  v8[0] = a1;
  uint64_t v5 = *(uint64_t (***)(void, void *))(a1 + 1760);
  if (((*v5)(v5, v8) & 0x80000000) != 0)
  {
    uint64_t v7 = "PredictPipeline, Error, self->Open\n";
  }
  else
  {
    if ((v5[1](v5, v4) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v7 = "PredictPipeline, Error, self->Set\n";
  }
  UNICORN__log_select_Diag(v3, 0, (uint64_t)v7);
  return 2229280778;
}

uint64_t PredictPipeline_Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[1] = a2;
  v6[2] = a3;
  v6[0] = 0;
  uint64_t v4 = UnicornPredict_Create(a1, (uint64_t)v6);
  if (!v4) {
    UNICORN__log_select_Diag(a1, 0, (uint64_t)"PredictPipeline, Error, UnicornPredict_Create\n");
  }
  return v4;
}

uint64_t PredictPipeline_Process(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 224) + 1072);
  if (((*(uint64_t (**)(void))(a1 + 16))() & 0x80000000) == 0) {
    return 0;
  }
  UNICORN__log_select_Diag(v1, 0, (uint64_t)"PredictPipeline, Error, self->Process\n");
  return 2229280778;
}

uint64_t PredictPipeline_Destroy(uint64_t a1)
{
  return 0;
}

uint64_t PredictPipeline_GetNProcessedPhonemes(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 40))();
  }
  return result;
}

uint64_t Search_NoPrune(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, signed int a9, int a10)
{
  uint64_t v11 = a1[14];
  uint64_t v10 = a1[15];
  if (*(_DWORD *)(v11 + 5992) == 1)
  {
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    int v16 = *(_DWORD *)(*(void *)(a5 + 8 * a2 + 56) + 4 * a3);
    uint64_t v17 = a1[13];
    uint64_t v18 = v17 + 768;
    uint64_t v36 = (void *)(v17 + 768 + 8 * a2 + 40);
    uint64_t v37 = *(unsigned int *)(*(void *)(*(void *)(v17 + 768 + 8 * a2) + 8 * a3) + 40 * v16);
    uint64_t v38 = v17;
    int v19 = *(_DWORD *)(*(void *)(v17 + 848)
                    + 4 * (*(_DWORD *)(*v36 + 4 * v37) / *(_DWORD *)(*(void *)(v17 + 568) + 5992)));
    IndexPtr_LH_F32 = (float *)VectBlock_Get_IndexPtr_LH_F32(v10 + 1848, a9);
    uint64_t v20 = a8[2] + 32 * a9;
    uint64_t v40 = v14;
    uint64_t v39 = v18;
    uint64_t v21 = *(void *)(*(void *)(v18 + 8 * v14) + 8 * v15);
    int v22 = v16;
    unsigned int v23 = *(_DWORD *)(v21 + 40 * v16 + 4);
    int v24 = *(_DWORD *)(v20 + 16);
    if (*(_DWORD *)(v20 + 20) < v23)
    {
      uint64_t result = UNICORN__mfs_CostList_Resize(a8, a9, v23);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)(v39 + 8 * v40) + 8 * v15) + 40 * v16 + 4);
    }
    if (v23) {
      BOOL v26 = v24 - a6 >= a7;
    }
    else {
      BOOL v26 = 1;
    }
    if (!v26)
    {
      unint64_t v27 = 0;
      do
      {
        uint64_t v28 = a7;
        unsigned int v29 = *(_DWORD *)(*v36 + 4 * (v37 + v27));
        float v30 = mfs_bnfData_Distance(v38, IndexPtr_LH_F32, v29);
        if (a10)
        {
          uint64_t v31 = a8[9];
          *(_DWORD *)(a8[8] + 4 * ((v29 / *(_DWORD *)(v11 + 5992)) >> 5)) |= 1 << (v29 / *(_DWORD *)(v11 + 5992));
          int v32 = v19 + v27;
          *(float *)(v31 + 4 * (v19 + v27)) = v30;
        }
        else
        {
          int v32 = v19 + v27;
        }
        mfs_CostList_PadWithBnfOffset(a8, a9, v29, v32, v30);
        ++v27;
        a7 = v28;
      }
      while (v27 < *(unsigned int *)(*(void *)(*(void *)(v39 + 8 * v40) + 8 * v15) + 40 * v22 + 4)
           && *(_DWORD *)(a8[2] + 32 * a9 + 16) - a6 < v28);
    }
    return 0;
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(v10 + 1072), 1, (uint64_t)"CONFIG ERROR : Search is not implemented for Phoneme Substate Modeling\n");
    return 2229280768;
  }
}

uint64_t Search_PruneBNF(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, signed int a9)
{
  uint64_t v10 = a1[14];
  uint64_t v9 = a1[15];
  if (*(_DWORD *)(v10 + 5992) == 1)
  {
    uint64_t v13 = a2;
    uint64_t v14 = (int)a3;
    int v15 = *(_DWORD *)(*(void *)(a5 + 8 * a2 + 56) + 4 * (int)a3);
    uint64_t v16 = a1[13];
    int v45 = *(unsigned __int8 *)(a4 + 1);
    int v44 = *(_DWORD *)(*(void *)(*(void *)(v16 + 768 + 8 * a2) + 8 * (int)a3) + 40 * v15);
    uint64_t IndexPtr_LH_F32 = VectBlock_Get_IndexPtr_LH_F32(v9 + 1848, a9);
    unsigned int v18 = a9;
    uint64_t v41 = (float *)IndexPtr_LH_F32;
    uint64_t v19 = a8[2] + 32 * a9;
    uint64_t v20 = v13;
    uint64_t v46 = v16 + 768;
    int v47 = v15;
    uint64_t v48 = v14;
    unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)(v16 + 768 + 8 * v13) + 8 * v14) + 40 * v15 + 4);
    int v22 = *(_DWORD *)(v19 + 16);
    if (*(_DWORD *)(v19 + 20) >= v21)
    {
      int v23 = a6;
    }
    else
    {
      int v23 = a6;
      uint64_t v24 = UNICORN__mfs_CostList_Resize(a8, a9, v21);
      if ((v24 & 0x80000000) != 0) {
        return v24;
      }
      unsigned int v21 = *(_DWORD *)(*(void *)(*(void *)(v46 + 8 * v20) + 8 * v48) + 40 * v15 + 4);
      unsigned int v18 = a9;
    }
    unsigned int v43 = v18;
    if (v21) {
      BOOL v26 = v22 - v23 >= a7;
    }
    else {
      BOOL v26 = 1;
    }
    if (v26)
    {
      unsigned int v27 = *(_DWORD *)(a8[2] + 32 * a9 + 16);
    }
    else
    {
      unint64_t v29 = 1;
      do
      {
        uint64_t v30 = a7;
        uint64_t v28 = (void *)(v16 + 8 * v20 + 808);
        uint64_t v31 = *(unsigned int *)(*v28 + 4 * (v44 + v29 - 1));
        if (v45 == 1
          || (IsPhonemeDurationOutlier = UNICORN__IsPhonemeDurationOutlier(v16, *(_DWORD *)(*v28 + 4 * (v44 + v29 - 1)), *(float *)(v10 + 6160), a3, *(_DWORD *)(a5 + 24), *(_DWORD *)(a5 + 28)), float v33 = 9999.9, !IsPhonemeDurationOutlier))
        {
          float v33 = mfs_bnfData_Distance(v16, v41, v31);
        }
        float v34 = *(float *)(*(void *)(v16 + 592) + 16 * v31);
        float v35 = *(float *)(v10 + 6192);
        if (v34 < v35) {
          float v33 = v33 * (float)(v34 / v35);
        }
        if (v33 <= 0.5 || (unsigned int v27 = *(_DWORD *)(a8[2] + 32 * a9 + 16), v27 <= 0xC8))
        {
          UNICORN__mfs_CostList_Pad(a8, v43, v31, v33);
          unsigned int v27 = *(_DWORD *)(a8[2] + 32 * a9 + 16);
        }
        BOOL v26 = v29++ >= *(unsigned int *)(*(void *)(*(void *)(v46 + 8 * v20) + 8 * v48) + 40 * v47 + 4);
        a7 = v30;
      }
      while (!v26 && v27 - v23 < v30);
    }
    unsigned int v37 = *(_DWORD *)(v10 + 6144);
    if (v27 <= v37)
    {
      return 0;
    }
    else
    {
      uint64_t v25 = mfs_CostList_Select((uint64_t)a8, v43, 1, v37);
      if ((v25 & 0x80000000) == 0) {
        UNICORN__mfs_CostList_Prune(a8, v43, *(_DWORD *)(v10 + 6144));
      }
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(v9 + 1072), 1, (uint64_t)"CONFIG ERROR : Search is not implemented for Phoneme Substate Modeling\n");
    return 2229280768;
  }
  return v25;
}

uint64_t Search_Diphone_PruneBNF(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, void *a8, signed int a9)
{
  uint64_t v9 = a1[15];
  if (*(_DWORD *)(a1[14] + 5992) != 1)
  {
    uint64_t v42 = 2229280768;
    uint64_t v43 = *(void *)(v9 + 1072);
    int v44 = "CONFIG ERROR : Search is not implemented for Phoneme Substate Modeling\n";
LABEL_29:
    UNICORN__log_select_Diag(v43, 1, (uint64_t)v44);
    return v42;
  }
  uint64_t v12 = a3;
  uint64_t v50 = a1[14];
  int v14 = *(_DWORD *)(*(void *)(a5 + 8 * a2 + 56) + 4 * (int)a3);
  int v51 = *(unsigned __int8 *)(a4 + 1);
  uint64_t v15 = a1[13];
  uint64_t v55 = v15 + 768;
  uint64_t v16 = *(void *)(*(void *)(v15 + 768 + 8 * a2) + 8 * (int)a3);
  int v54 = *(_DWORD *)(v16 + 40 * v14);
  uint64_t v17 = a8[2] + 32 * a9;
  unsigned int v18 = *(_DWORD *)(v16 + 40 * v14 + 4);
  int v20 = *(_DWORD *)(v17 + 16);
  if (*(_DWORD *)(v17 + 20) < v18)
  {
    uint64_t v21 = v12;
    uint64_t v22 = UNICORN__mfs_CostList_Resize(a8, a9, v18);
    uint64_t v12 = v21;
    if ((v22 & 0x80000000) != 0) {
      return v22;
    }
  }
  uint64_t v53 = a8;
  uint64_t v46 = v9;
  uint64_t v47 = v12;
  uint64_t v23 = (int)v12;
  uint64_t IndexPtr_LH_F32 = (float *)VectBlock_Get_IndexPtr_LH_F32(v9 + 1848, a9);
  int v28 = v54;
  uint64_t v52 = a2;
  uint64_t v29 = *(void *)(v55 + 8 * a2);
  unsigned int v30 = a7;
  if (*(_DWORD *)(*(void *)(v29 + 8 * v23) + 40 * v14 + 4)) {
    BOOL v31 = v20 - a6 >= a7;
  }
  else {
    BOOL v31 = 1;
  }
  if (!v31)
  {
    int v32 = (void *)(v15 + 8 * a2 + 808);
    uint64_t v33 = 0xFFFFFFFFLL;
    unint64_t v34 = 1;
    do
    {
      uint64_t v35 = *(unsigned int *)(*v32 + 4 * (v28 + v34 - 1));
      uint64_t v36 = *(void *)(v15 + 592);
      if (*(unsigned __int8 *)(v36 + 16 * v35 + 13) == *(unsigned __int8 *)(a4 + 1)
        && *(unsigned __int8 *)(v36 + 16 * v35 + 14) == *(unsigned __int8 *)(a4 + 2))
      {
        if ((v51 == 1
           || (IsPhonemeDurationOutlier = UNICORN__IsPhonemeDurationOutlier(v15, *(_DWORD *)(*v32 + 4 * (v28 + v34 - 1)), *(float *)(v50 + 6160), v47, *(_DWORD *)(a5 + 24), *(_DWORD *)(a5 + 28)), float v38 = 9999.9, !IsPhonemeDurationOutlier))&& (float v38 = mfs_bnfData_Distance(v15, IndexPtr_LH_F32, v35), v38 <= 0.5)|| *(_DWORD *)(v53[2] + 32 * a9 + 16) <= 0xC8u)
        {
          if (v35 <= v33) {
            UNICORN__mfs_CostList_Add(v38, v15, v53, a9, v35);
          }
          else {
            UNICORN__mfs_CostList_Pad(v53, a9, v35, v38);
          }
        }
        int v20 = *(_DWORD *)(v53[2] + 32 * a9 + 16);
        int v28 = v54;
        uint64_t v29 = *(void *)(v55 + 8 * v52);
        unsigned int v30 = a7;
      }
      else
      {
        uint64_t v35 = v33;
      }
      BOOL v31 = v34++ >= *(unsigned int *)(*(void *)(v29 + 8 * v23) + 40 * v14 + 4);
      BOOL v39 = v31 || v20 - a6 >= v30;
      uint64_t v33 = v35;
    }
    while (!v39);
  }
  unsigned int v40 = *(_DWORD *)(v53[2] + 32 * a9 + 16);
  uint64_t v41 = *(unsigned int *)(v50 + 6144);
  if (v40 <= v41)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = mfs_CostList_Select((uint64_t)v53, a9, 1, v41);
    if ((v42 & 0x80000000) != 0) {
      return v42;
    }
    UNICORN__mfs_CostList_Prune(v53, a9, *(_DWORD *)(v50 + 6144));
    unsigned int v40 = *(_DWORD *)(v53[2] + 32 * a9 + 16);
  }
  if (!v40)
  {
    UNICORN__log_select_Error(*(void *)(v46 + 1072), 0, (uint64_t)"** ERROR no candidates found for Offline Unit Bulking: state #%d (diphone: A%02d+A%02d)\n", v41, v24, v25, v26, v27);
    return 2229280783;
  }
  if (v40 <= 0x31)
  {
    uint64_t v43 = *(void *)(v46 + 1072);
    int v44 = "** Warning too few candidates (%d) for Offline Unit Bulking: state #%d (diphone: A%02d+A%02d)\n";
    goto LABEL_29;
  }
  return v42;
}

uint64_t mfs_QuantizeLF0Frame(uint64_t a1, float a2)
{
  if (a2 <= 0.0)
  {
    if (*(_DWORD *)(a1 + 5596)) {
      return *(unsigned int *)(a1 + 5600);
    }
    else {
      return 0;
    }
  }
  else
  {
    float v2 = *(float *)(a1 + 6016);
    if (v2 > a2) {
      a2 = *(float *)(a1 + 6016);
    }
    if (a2 > *(float *)(a1 + 6036)) {
      a2 = *(float *)(a1 + 6036);
    }
    return (float)((float)((float)(a2 - v2) * *(float *)(a1 + 6056)) + 0.5);
  }
}

uint64_t mfs_UpdateTargetQuantizedTrajectory_LF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 104);
  if ((int)v3 < 1) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 568);
  unsigned int v7 = *(_DWORD *)(a2 + 1824);
  uint64_t v8 = *(float **)(a3 + 32);
  uint64_t v9 = 2229280778;
  uint64_t v10 = *(void *)(a2 + 1072);
  *(_DWORD *)(a2 + 1824) = v3 + v7;
  uint64_t v11 = heap_Realloc(*(uint64_t **)(v10 + 8), *(void *)(a2 + 1808), 2 * (v3 + v7));
  *(void *)(a2 + 1808) = v11;
  if (v11)
  {
    uint64_t v12 = heap_Realloc(*(uint64_t **)(v10 + 8), *(void *)(a2 + 1816), 4 * *(unsigned int *)(a2 + 1824));
    *(void *)(a2 + 1816) = v12;
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 1808);
      do
      {
        float v14 = *v8;
        if (*v8 <= 0.0)
        {
          unsigned int v16 = *(_DWORD *)(v6 + 5596);
          if (v16) {
            unsigned int v16 = *(_DWORD *)(v6 + 5600);
          }
        }
        else
        {
          float v15 = *(float *)(v6 + 6016);
          if (v15 > v14) {
            float v14 = *(float *)(v6 + 6016);
          }
          if (v14 > *(float *)(v6 + 6036)) {
            float v14 = *(float *)(v6 + 6036);
          }
          unsigned int v16 = (float)((float)((float)(v14 - v15) * *(float *)(v6 + 6056)) + 0.5);
        }
        *(_WORD *)(v13 + 2 * v7) = v16;
        *(_DWORD *)(v12 + 4 * v7++) = *(_DWORD *)(a3 + 120);
        ++v8;
        --v3;
      }
      while (v3);
      return 0;
    }
  }
  return v9;
}

uint64_t UnicornPredict_Create(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), 1, 312);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (*(void *)(v6 + 8016))
    {
      if ((ANNFactory_CreateANNLibInstance((void *)(v4 + 56), a1) & 0x80000000) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      if (!*(void *)(v6 + 9816))
      {
        UNICORN__log_select_Diag(a1, 0, (uint64_t)"%s_Create failed because the model does not contain BET5 ANN data\n");
        goto LABEL_12;
      }
      if ((ANNFactory_CreateFastInferInstance((void *)(v4 + 56), a1) & 0x80000000) != 0)
      {
LABEL_12:
        heap_Free(*(void **)(a1 + 8), v5);
        return 0;
      }
    }
    *(_DWORD *)(v5 + 144) = 20;
    uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), 20, 16);
    *(void *)(v5 + 136) = v7;
    if (!v7)
    {
LABEL_10:
      (*(void (**)(void))(v5 + 128))(*(void *)(v5 + 56));
      goto LABEL_12;
    }
    *(void *)uint64_t v5 = UnicornPredict_Open;
    *(void *)(v5 + 8) = UnicornPredict_Set;
    *(void *)(v5 + 16) = UnicornPredict_Process;
    *(void *)(v5 + 24) = UnicornPredict_Reset;
    *(void *)(v5 + 32) = UnicornPredict_Close;
    *(void *)(v5 + 40) = UnicornPredict_GetNProcessedPhonemes;
    *(void *)(v5 + 48) = a1;
    if (((*(uint64_t (**)(void, void))(v5 + 64))(*(void *)(v5 + 56), *(void *)(*(void *)(a2 + 8) + 1944)) & 0x80000000) != 0)
    {
      UNICORN__log_select_Diag(a1, 0, (uint64_t)"%s_Create, Error, ANNObject Open failed\n");
      goto LABEL_10;
    }
  }
  return v5;
}

uint64_t UnicornPredict_Open(uint64_t a1, uint64_t *a2)
{
  if (!a1) {
    return 2229280778;
  }
  uint64_t v3 = a2[1];
  uint64_t v2 = a2[2];
  uint64_t v4 = *a2;
  *(void *)(a1 + 216) = v2;
  *(void *)(a1 + 224) = v4;
  *(void *)(a1 + 184) = v2;
  *(void *)(a1 + 192) = v3;
  *(void *)(a1 + 168) = v3;
  *(void *)(a1 + 176) = v4;
  int v5 = *(_DWORD *)v3;
  int v6 = *(_DWORD *)(v4 + 392);
  *(_DWORD *)(a1 + 200) = v6;
  *(_DWORD *)(a1 + 204) = v5;
  unsigned int v7 = 1;
  int v8 = *(unsigned __int8 *)(v3 + 1932);
  if (*(_DWORD *)(v2 + 6728)) {
    v8 *= 8;
  }
  *(_DWORD *)(a1 + 160) = v8;
  if (*(_DWORD *)(v2 + 5984)) {
    int v9 = 1;
  }
  else {
    int v9 = v5;
  }
  *(_DWORD *)(a1 + 208) = v6 * v9;
  *(_DWORD *)(a1 + 212) = 1;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 144);
  if (v10)
  {
    uint64_t v11 = *(void **)(a1 + 136);
    *uint64_t v11 = *(void *)(v2 + 10408);
    *(_DWORD *)(a1 + 148) = 1;
    v11[1] = UnicornPredict_CopyOutputToBNFStream;
  }
  else
  {
    unsigned int v7 = 0;
  }
  if (v7 < v10)
  {
    uint64_t v13 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    *uint64_t v13 = *(void *)(v2 + 10416);
    *(_DWORD *)(a1 + 148) = ++v7;
    v13[1] = UnicornPredict_CopyOutputToLF0Stream;
  }
  if (v7 < v10)
  {
    float v14 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    *float v14 = *(void *)(v2 + 10424);
    *(_DWORD *)(a1 + 148) = ++v7;
    v14[1] = UnicornPredict_CopyOutputToDURStream;
  }
  if (v7 < v10)
  {
    float v15 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    *float v15 = *(void *)(v2 + 10432);
    *(_DWORD *)(a1 + 148) = ++v7;
    v15[1] = UnicornPredict_CopyOutputToSDURStream;
  }
  if (v7 < v10)
  {
    unsigned int v16 = (void *)(*(void *)(a1 + 136) + 16 * v7);
    *unsigned int v16 = *(void *)(v2 + 10440);
    *(_DWORD *)(a1 + 148) = ++v7;
    v16[1] = UnicornPredict_CopyOutputToVUVStream;
  }
  if (v7 >= v10) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v17 = (void *)(*(void *)(a1 + 136) + 16 * v7);
  *uint64_t v17 = *(void *)(v2 + 10448);
  *(_DWORD *)(a1 + 148) = v7 + 1;
  v17[1] = UnicornPredict_CopyOutputToELF0Stream;
  return v12;
}

uint64_t UnicornPredict_Set(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 200) = a2;
  uint64_t v3 = *(void *)(a1 + 216);
  uint64_t v4 = *(void *)(a1 + 224);
  if (!*(_DWORD *)(v3 + 5984)) {
    a2 *= *(_DWORD *)(a1 + 204);
  }
  *(_DWORD *)(a1 + 208) = a2;
  *(_DWORD *)(v4 + 1944) = *(_DWORD *)(v3 + 6728) != 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  int v5 = (*(uint64_t (**)(void))(a1 + 120))(*(void *)(a1 + 56));
  int v6 = *(_DWORD *)(a1 + 208);
  if (*(_DWORD *)(v4 + 1840) == 4 * (v6 * v5))
  {
    unsigned int v7 = *(_DWORD *)(a1 + 160);
    unsigned int v8 = v7 * v6;
    unsigned int v10 = (uint64_t *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 48);
    *(void *)(a1 + 152) = *(void *)(v4 + 1832);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 6728))
    {
      unsigned int v11 = v8 >> 3;
      v7 >>= 3;
      uint64_t v12 = v4 + 1864;
    }
    else
    {
      uint64_t v12 = v4 + 1864;
      unsigned int v11 = v7 * v6;
    }
    if (VectBlock_Create(v9, v12, v11, v7))
    {
      *(void *)(a1 + 264) = *(void *)(v4 + 1864);
      if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1848, 4 * v8, *(_DWORD *)(a1 + 160)))
      {
        *(void *)(a1 + 280) = *(void *)(v4 + 1848);
        if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1880, 2 * v8 + 32, *(_DWORD *)(a1 + 160)))
        {
          *(void *)(a1 + 272) = *(void *)(v4 + 1880);
          if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1928, 4 * *(_DWORD *)(a1 + 208) + 64, 1))
          {
            *(void *)(a1 + 296) = *(void *)(v4 + 1928);
            uint64_t v14 = *(void *)(a1 + 216);
            if (!*(void *)(v14 + 10448)) {
              goto LABEL_16;
            }
            if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1896, 8 * *(_DWORD *)(v14 + 5992) * *(_DWORD *)(a1 + 208), 1))
            {
              *(void *)(a1 + 288) = *(void *)(v4 + 1896);
              if (VectBlock_Create(*(void *)(a1 + 48), v4 + 1912, 4 * *(_DWORD *)(*(void *)(a1 + 216) + 5992) * *(_DWORD *)(a1 + 208), 1))
              {
                *(void *)(a1 + 304) = *(void *)(v4 + 1912);
LABEL_16:
                uint64_t v15 = *(void *)(a1 + 232);
                if (v15)
                {
                  heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v15);
                  *(void *)(a1 + 232) = 0;
                }
                uint64_t v16 = *(void *)(a1 + 224);
                if (!v16) {
                  return 0;
                }
                uint64_t v17 = *(void *)(v16 + 1768);
                if (!v17) {
                  return 0;
                }
                if (*(_DWORD *)(v17 + 12) != 1) {
                  return 0;
                }
                int v18 = *(_DWORD *)(v17 + 8);
                int v19 = *(_DWORD *)(a1 + 200);
                if (v18 != *(_DWORD *)(a1 + 204) * v19) {
                  return 0;
                }
                uint64_t v20 = heap_Calloc(*(void **)(*(void *)(a1 + 48) + 8), (v19 + 4), 4);
                *(void *)(a1 + 232) = v20;
                if (v20) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v13 = "%s_Set, Error, Out of memory\n";
    goto LABEL_25;
  }
  unsigned int v10 = (uint64_t *)(a1 + 48);
  uint64_t v13 = "%s_Set, Error, Inputs misaligned\n";
LABEL_25:
  UNICORN__log_select_Diag(*v10, 0, (uint64_t)v13);
  return 2229280778;
}

uint64_t UnicornPredict_Process(uint64_t a1, _DWORD *a2)
{
  if (a2) {
    *a2 = 0;
  }
  int v4 = *(_DWORD *)(a1 + 240);
  int v5 = v4 + 1;
  unsigned int v6 = v4 + 4;
  if (v6 >= *(_DWORD *)(a1 + 200)) {
    unsigned int v7 = *(_DWORD *)(a1 + 200);
  }
  else {
    unsigned int v7 = v6;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 256);
  *(_DWORD *)(a1 + 240) = v5;
  *(_DWORD *)(a1 + 244) = v8;
  *(_DWORD *)(a1 + 248) = v8;
  *(_DWORD *)(a1 + 252) = v8;
  if (v8 >= v7) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned int v10 = "%s_Process: Expected Output  '%s' not found in ANNObject\n";
  do
  {
    unsigned int v11 = *(_DWORD **)(a1 + 216);
    int v12 = v11[1685];
    unsigned int v13 = *(_DWORD *)(a1 + 200);
    if (v12 < 1) {
      int v12 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(a1 + 248) = v8;
    unsigned int v14 = v11[1686];
    BOOL v15 = v8 >= v14;
    unsigned int v16 = v8 - v14;
    if (v15) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = 0;
    }
    *(_DWORD *)(a1 + 244) = v17;
    unsigned int v18 = v17 + v12;
    *(_DWORD *)(a1 + 252) = v18;
    if (v18 >= v13)
    {
      *(_DWORD *)(a1 + 252) = v13;
      unsigned int v21 = v13;
    }
    else
    {
      unsigned int v19 = v11[1687];
      BOOL v15 = v18 >= v19;
      unsigned int v20 = v18 - v19;
      if (v15) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = 0;
      }
      unsigned int v13 = v18;
    }
    if (v21 > v8) {
      unsigned int v8 = v21;
    }
    *(_DWORD *)(a1 + 256) = v8;
    uint64_t v22 = *(void *)(a1 + 152);
    uint64_t v23 = v13 - v17;
    if (v11[1496])
    {
      unsigned int v24 = (*(uint64_t (**)(void))(a1 + 120))(*(void *)(a1 + 56)) * v17;
      if (!v23) {
        return v9;
      }
    }
    else
    {
      int v25 = *(_DWORD *)(a1 + 204) * v17;
      unsigned int v24 = v25 * (*(uint64_t (**)(void))(a1 + 120))(*(void *)(a1 + 56));
      uint64_t v23 = (*(_DWORD *)(a1 + 204) * v23);
      if (!v23) {
        return v9;
      }
    }
    uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 72))(*(void *)(a1 + 56), v22 + 4 * v24, v23);
    if ((v26 & 0x80000000) != 0) {
      goto LABEL_60;
    }
    uint64_t v27 = *(void *)(a1 + 224);
    if (v27)
    {
      int v28 = *(uint64_t **)(v27 + 1768);
      if (v28)
      {
        if (*((_DWORD *)v28 + 3) == 1)
        {
          int v29 = *(_DWORD *)(a1 + 204);
          if (*((_DWORD *)v28 + 2) == v29 * *(_DWORD *)(a1 + 200))
          {
            uint64_t v30 = *(void *)(a1 + 232);
            if (v30)
            {
              uint64_t v31 = *(void *)(a1 + 216);
              int v32 = *(void *)(v31 + 10456) ? *(char **)(v31 + 10456) : "output_pdur";
              unsigned int v33 = *(_DWORD *)(a1 + 244);
              unsigned int v34 = *(_DWORD *)(a1 + 252);
              BOOL v15 = v34 >= v33;
              unsigned int v35 = v34 - v33;
              if (v35 != 0 && v15)
              {
                uint64_t v36 = *v28;
                unsigned int v37 = v33 * v29;
                unsigned int v38 = v35;
                BOOL v39 = *(_DWORD **)(a1 + 232);
                do
                {
                  *v39++ = *(_DWORD *)(v36 + 48 * v37 + 16);
                  v37 += v29;
                  --v38;
                }
                while (v38);
              }
              else
              {
                unsigned int v35 = 0;
              }
              *(_DWORD *)(v30 + 4 * v35) = *(_DWORD *)(v31 + 11576);
              *(_DWORD *)(v30 + 4 * (v35 + 1)) = *(_DWORD *)(v31 + 11580);
              *(_DWORD *)(v30 + 4 * (v35 + 2)) = *(_DWORD *)(v31 + 11568);
              *(_DWORD *)(v30 + 4 * (v35 + 3)) = *(_DWORD *)(v31 + 11572);
              uint64_t v26 = (*(uint64_t (**)(void, char *))(a1 + 112))(*(void *)(a1 + 56), v32);
              if ((v26 & 0x80000000) != 0)
              {
LABEL_60:
                uint64_t v9 = v26;
                uint64_t v46 = *(void *)(a1 + 48);
                uint64_t v47 = "%s_Set, Error, ANNObject Set failed\n";
LABEL_58:
                UNICORN__log_select_Diag(v46, 0, (uint64_t)v47);
                return v9;
              }
            }
          }
        }
      }
    }
    uint64_t v40 = (*(uint64_t (**)(void))(a1 + 80))(*(void *)(a1 + 56));
    if ((v40 & 0x80000000) != 0)
    {
      uint64_t v9 = v40;
      uint64_t v46 = *(void *)(a1 + 48);
      uint64_t v47 = "%s_Process, Error, ANNObject Process\n";
      goto LABEL_58;
    }
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v41 = *(unsigned int *)(a1 + 148);
    if (v41)
    {
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v44 = *(void *)(*(void *)(a1 + 136) + v42);
        if (v44)
        {
          uint64_t v45 = (*(uint64_t (**)(void, uint64_t, uint64_t *, char *, uint64_t *))(a1 + 88))(*(void *)(a1 + 56), v44, &v49, (char *)&v50 + 4, &v50);
          if ((v45 & 0x80000000) != 0)
          {
            uint64_t v9 = v45;
LABEL_57:
            uint64_t v46 = *(void *)(a1 + 48);
            uint64_t v47 = v10;
            goto LABEL_58;
          }
          uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)(a1 + 136) + v42 + 8))(a1, v49, HIDWORD(v50), v50);
          if ((v9 & 0x80000000) != 0)
          {
            unsigned int v10 = "%s_Process: Collector  '%s', Error\n";
            goto LABEL_57;
          }
          unint64_t v41 = *(unsigned int *)(a1 + 148);
        }
        ++v43;
        v42 += 16;
        if (v43 >= v41)
        {
          if ((v9 & 0x80000000) == 0) {
            goto LABEL_50;
          }
          return v9;
        }
      }
    }
    uint64_t v9 = 0;
LABEL_50:
    (*(void (**)(void))(a1 + 96))(*(void *)(a1 + 56));
    if (a2) {
      *a2 += *(_DWORD *)(a1 + 256) - *(_DWORD *)(a1 + 248);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 256);
  }
  while (v8 < v7);
  return v9;
}

uint64_t UnicornPredict_Reset(uint64_t a1)
{
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  (*(void (**)(void))(a1 + 96))(*(void *)(a1 + 56));
  return 0;
}

uint64_t UnicornPredict_Close()
{
  return 0;
}

uint64_t UnicornPredict_GetNProcessedPhonemes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 256);
}

void *UnicornPredict_Destroy(uint64_t a1)
{
  (*(void (**)(void))(a1 + 104))(*(void *)(a1 + 56));
  (*(void (**)(void))(a1 + 128))(*(void *)(a1 + 56));
  heap_Free(*(void **)(*(void *)(a1 + 48) + 8), *(void *)(a1 + 136));
  uint64_t v2 = *(void *)(a1 + 232);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)(a1 + 48) + 8), v2);
    *(void *)(a1 + 232) = 0;
  }
  uint64_t v3 = *(void **)(*(void *)(a1 + 48) + 8);

  return heap_Free(v3, a1);
}

uint64_t UnicornPredict_CopyOutputToBNFStream(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = *(_DWORD *)(a1 + 200);
  if ((v5 < a3 || *(_DWORD *)(a1 + 160) != a4) && (*(_DWORD *)(a1 + 204) * v5 < a3 || *(_DWORD *)(a1 + 160) != a4))
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToBNFStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d, nBNFOrder=%d\n");
    return 2229280775;
  }
  int v8 = *(_DWORD *)(a1 + 248);
  unsigned int v9 = (v8 - *(_DWORD *)(a1 + 244)) * a4;
  uint64_t v10 = *(void *)(a1 + 216);
  int v11 = *(_DWORD *)(v10 + 5984);
  if (!v11)
  {
    int v18 = *(_DWORD *)(a1 + 204);
    uint64_t v12 = a2 + 4 * v18 * v9;
    unsigned int v13 = (*(_DWORD *)(a1 + 256) - v8) * v18;
    unsigned int v14 = (unsigned int *)(a1 + 160);
    int v15 = v8 * a4;
    unsigned int v21 = v8 * a4 * v18;
    uint64_t v16 = *(void *)(a1 + 280) + 4 * v21;
    uint64_t v17 = *(void *)(a1 + 272) + 2 * v21;
    if (*(_DWORD *)(v10 + 6728)) {
      goto LABEL_10;
    }
LABEL_12:
    unsigned int v20 = v18 * v15;
    char v19 = 1;
    goto LABEL_13;
  }
  uint64_t v12 = a2 + 4 * v9;
  unsigned int v13 = *(_DWORD *)(a1 + 256) - v8;
  unsigned int v14 = (unsigned int *)(a1 + 160);
  int v15 = v8 * a4;
  uint64_t v16 = *(void *)(a1 + 280) + 4 * v8 * a4;
  uint64_t v17 = *(void *)(a1 + 272) + 2 * v8 * a4;
  int v18 = 1;
  if (!*(_DWORD *)(v10 + 6728)) {
    goto LABEL_12;
  }
LABEL_10:
  char v19 = 0;
  unsigned int v20 = (a4 >> 3) * v8 * v18;
LABEL_13:
  if (v11) {
    int v22 = 1;
  }
  else {
    int v22 = *(_DWORD *)(a1 + 204);
  }
  uint64_t v23 = *(void *)(a1 + 296) + 4 * (v22 * v8);
  if (v19)
  {
    if (v13)
    {
      uint64_t v24 = 0;
      unsigned int v25 = 0;
      int v26 = 0;
      uint64_t v57 = v13;
      LODWORD(v27) = *(_DWORD *)(a1 + 160);
      uint64_t v56 = *(void *)(a1 + 296) + 4 * (v22 * v8);
      do
      {
        if (v27)
        {
          unint64_t v28 = 0;
          uint64_t v58 = v24;
          float v29 = 0.0;
          do
          {
            float v30 = *(float *)(v12 + 4 * (v26 + v28));
            *(float *)(v16 + 4 * (v25 + v28)) = v30;
            float v29 = v29 + (float)(v30 * v30);
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"ANN-predicted BNF: %d,%d %f\n");
            ++v28;
            unint64_t v27 = *(unsigned int *)(a1 + 160);
          }
          while (v28 < v27);
          if (v27)
          {
            uint64_t v31 = 0;
            float v32 = sqrtf(v29);
            uint64_t v23 = v56;
            uint64_t v24 = v58;
            do
            {
              *(float *)(v16 + 4 * (v25 + v31)) = *(float *)(v16 + 4 * (v25 + v31))
                                                                / v32;
              ++v31;
            }
            while (v27 != v31);
            float v33 = 0.0;
            unint64_t v34 = v27;
            unsigned int v35 = v25;
            do
            {
              float v36 = fabsf(*(float *)(v16 + 4 * v35));
              if (v36 > v33) {
                float v33 = v36;
              }
              ++v35;
              --v34;
            }
            while (v34);
            if (v33 <= 0.0) {
              float v37 = 1.0;
            }
            else {
              float v37 = 1.0 / v33;
            }
            unint64_t v38 = v27;
            unsigned int v39 = v25;
            do
            {
              float v40 = *(float *)(v16 + 4 * v39);
              int v41 = (int)(float)((float)(v37 * 32767.0) * v40);
              *(_WORD *)(v17 + 2 * v39) = v41;
              if ((v41 + 8) <= 0x10)
              {
                BOOL v42 = v40 <= 0.0 || v40 > 8.0;
                if (!v42 || (v40 < 0.0 ? (BOOL v43 = v40 < -8.0) : (BOOL v43 = 1), !v43)) {
                  *(_WORD *)(v17 + 2 * v39) = (int)(float)((float)(v37 * (float)(v40 * 4.0)) * 32767.0);
                }
              }
              ++v39;
              --v38;
            }
            while (v38);
            v26 += v28;
          }
          else
          {
            v26 += v28;
            float v37 = 1.0;
            uint64_t v23 = v56;
            uint64_t v24 = v58;
          }
        }
        else
        {
          float v37 = 1.0;
        }
        float v44 = 1.0 / (v37 * 32767.0);
        *(float *)(v23 + 4 * v24) = v44;
        v25 += v27;
        ++v24;
      }
      while (v24 != v57);
    }
  }
  else if (v13)
  {
    uint64_t v45 = 0;
    uint64_t v46 = *(void *)(a1 + 264) + v20;
    unsigned int v47 = *v14;
    do
    {
      if (v47)
      {
        unsigned int v48 = 0;
        do
        {
          unsigned int v49 = v48 + v45 * v47;
          float v50 = *(float *)(v12 + 4 * v49);
          *(float *)(v16 + 4 * v49) = v50;
          *(_WORD *)(v17 + 2 * v49) = v50 < 0.0;
          int v51 = 1 << (~(_BYTE)v48 & 7);
          unsigned int v52 = (v47 >> 3) * v45 + (v48 >> 3);
          char v53 = *(unsigned char *)(v46 + v52);
          char v54 = v53 | v51;
          char v55 = v53 & ~(_BYTE)v51;
          if (v50 < 0.0) {
            char v55 = v54;
          }
          *(unsigned char *)(v46 + v52) = v55;
          ++v48;
          unsigned int v47 = *v14;
        }
        while (v48 < *v14);
      }
      *(_DWORD *)(v23 + 4 * v45++) = 1065353216;
    }
    while (v45 != v13);
  }
  return 0;
}

uint64_t UnicornPredict_CopyOutputToLF0Stream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v40 = *(void *)(a1 + 176);
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToLF0Stream\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  int v8 = *(_DWORD *)(a1 + 204);
  BOOL v10 = v9 >= a3 && 6 * v8 == a4;
  if (v10 || a4 == 6 && v8 * v9 >= a3)
  {
    unint64_t v11 = *(unsigned int *)(a1 + 248);
    int v12 = *(_DWORD *)(*(void *)(a1 + 216) + 5984);
    if (v12) {
      int v13 = 1;
    }
    else {
      int v13 = *(_DWORD *)(a1 + 204);
    }
    unsigned int v14 = (v11 - *(_DWORD *)(a1 + 244)) * a4 * v13;
    uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 176) + 32);
    if ((int)v15 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      uint64_t v16 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 184) + 184 + 4 * v16) != 2)
      {
        if (v15 == ++v16)
        {
          LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 176) + 32);
          break;
        }
      }
    }
    uint64_t v17 = a2 + 4 * v14;
    if (v12)
    {
      if (v11 >= v9) {
        goto LABEL_48;
      }
      unsigned int v18 = 0;
      uint64_t v39 = v16;
      while (1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(v40 + 384) + 312 * v11 + 8 * v39;
        unsigned int v21 = (void *)(v20 + 96);
        int v22 = (void *)(v20 + 136);
        do
        {
          if ((v8 - 1) > 0xFFFFFFFC) {
            goto LABEL_32;
          }
          uint64_t v41 = v19;
          uint64_t v23 = v19 + 1;
          unint64_t v24 = 2;
          do
          {
            int v25 = 0;
            if (v11 < *(unsigned int *)(a1 + 256)) {
              int v25 = *(_DWORD *)(v17 + 4 * v18++);
            }
            *(_DWORD *)(*(void *)(*v21 + 8 * v24) + 4 * v23) = v25;
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, mean %f -> %f \n");
            ++v24;
            int v8 = *(_DWORD *)(a1 + 204);
          }
          while (v24 < (v8 + 2));
          if ((v8 - 1) > 0xFFFFFFFC)
          {
            uint64_t v19 = v41;
LABEL_32:
            uint64_t v23 = v19 + 1;
            goto LABEL_33;
          }
          unint64_t v26 = 2;
          do
          {
            float v27 = 1.0;
            if (v11 < *(unsigned int *)(a1 + 256)) {
              float v27 = *(float *)(v17 + 4 * v18++);
            }
            *(float *)(*(void *)(*v22 + 8 * v26) + 4 * v23) = v27;
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, var  %f -> %f \n");
            ++v26;
            int v8 = *(_DWORD *)(a1 + 204);
          }
          while (v26 < (v8 + 2));
LABEL_33:
          uint64_t v19 = v23;
        }
        while (v23 != 3);
        if (++v11 >= *(unsigned int *)(a1 + 200)) {
          goto LABEL_48;
        }
      }
    }
    if (v11 < v9)
    {
      unsigned int v28 = 0;
      uint64_t v42 = v16;
      do
      {
        if ((v8 - 1) <= 0xFFFFFFFC)
        {
          uint64_t v29 = *(void *)(v40 + 384) + 312 * v11 + 8 * v42;
          float v30 = (void *)(v29 + 96);
          uint64_t v31 = (void *)(v29 + 136);
          unint64_t v32 = 2;
          do
          {
            for (uint64_t i = 1; i != 4; ++i)
            {
              if (v11 >= *(unsigned int *)(a1 + 256))
              {
                float v36 = 1.0;
                int v35 = 0;
              }
              else
              {
                unsigned int v34 = v28 + 1;
                int v35 = *(_DWORD *)(v17 + 4 * v28);
                v28 += 2;
                float v36 = *(float *)(v17 + 4 * v34);
              }
              UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, mean %f -> %f \n");
              UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d,%d,%d, var  %f -> %f \n");
              *(_DWORD *)(*(void *)(*v30 + 8 * v32) + 4 * i) = v35;
              *(float *)(*(void *)(*v31 + 8 * v32) + 4 * i) = v36;
            }
            ++v32;
            int v8 = *(_DWORD *)(a1 + 204);
          }
          while (v32 < (v8 + 2));
          unsigned int v9 = *(_DWORD *)(a1 + 200);
        }
        ++v11;
      }
      while (v11 < v9);
    }
LABEL_48:
    uint64_t v37 = 0;
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToLF0Stream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v37 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToLF0Stream\n");
  return v37;
}

uint64_t UnicornPredict_CopyOutputToDURStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 176);
  int v36 = 0;
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToDurStream_Phoneme\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  if (a4 == 1 && v9 >= a3 || a4 == 1 && *(_DWORD *)(a1 + 204) * v9 >= a3)
  {
    unint64_t v10 = *(unsigned int *)(a1 + 248);
    uint64_t v11 = (v10 - *(_DWORD *)(a1 + 244));
    unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 216) + 5984);
    if (v12)
    {
      int v13 = (unsigned int *)(a1 + 256);
    }
    else
    {
      uint64_t v15 = *(unsigned int *)(a1 + 204);
      uint64_t v11 = (v15 * v11);
      uint64_t v16 = a2 + 4 * v11;
      int v13 = (unsigned int *)(a1 + 256);
      unsigned int v17 = (*(_DWORD *)(a1 + 256) - v10) * v15;
      LODWORD(v18) = v17 / v15;
      if (v17 / v15 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v18;
      }
      do
      {
        if (v15 <= v17)
        {
          uint64_t v19 = 0;
          unsigned int v20 = v12;
          do
          {
            float v21 = 0.0;
            unsigned int v22 = v20;
            uint64_t v23 = v15;
            do
            {
              float v21 = v21 + *(float *)(v16 + 4 * v22++);
              --v23;
            }
            while (v23);
            *(float *)(v16 + 4 * (v12 + v19++)) = v21 / (float)v15;
            v20 += v15;
          }
          while (v19 != v18);
        }
        ++v12;
      }
      while (v12 != 1);
    }
    *(_DWORD *)(v8 + 408) = 0;
    if (v10)
    {
      int v24 = 0;
      int v25 = (_DWORD *)(*(void *)(v8 + 384) + 24);
      unint64_t v26 = v10;
      do
      {
        v24 += *v25;
        v25 += 78;
        --v26;
      }
      while (v26);
      *(_DWORD *)(v8 + 408) = v24;
    }
    if (v10 >= v9)
    {
      uint64_t v14 = 0;
    }
    else
    {
      unsigned int v27 = 0;
      uint64_t v35 = a2 + 4 * v11;
      uint64_t v28 = 312 * v10;
      do
      {
        if (v10 >= *v13) {
          float v29 = (float)*(unsigned int *)(a1 + 204) * 0.08;
        }
        else {
          float v29 = *(float *)(v35 + 4 * v27++);
        }
        uint64_t v30 = *(void *)(v8 + 384);
        if (v29 >= 0.0) {
          float v31 = v29 * 1000.0;
        }
        else {
          float v31 = 0.0;
        }
        float v32 = v31 / (float)*(int *)(*(void *)(a1 + 184) + 24);
        *(float *)(v30 + v28 + 32) = v31;
        UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d duration scale (%f)\n");
        int v33 = *(_DWORD *)(a1 + 212);
        if (v33 == 2)
        {
          UNICORN__UniformStateDuration(v32, *(void *)(a1 + 48), v30 + v28, *(int **)(a1 + 168));
        }
        else if (v33 == 1)
        {
          UNICORN__MaxLLStateDuration(*(void *)(a1 + 48), v30 + v28, *(unsigned int **)(a1 + 168), (float *)&v36, v32);
        }
        else
        {
          UNICORN__StateDuration(v32, *(void *)(a1 + 48), v30 + v28, *(int **)(a1 + 168));
        }
        *(_DWORD *)(v8 + 408) += *(_DWORD *)(v30 + v28 + 24);
        ++v10;
        v28 += 312;
      }
      while (v10 < *(unsigned int *)(a1 + 200));
      uint64_t v14 = 0;
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToDURStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v14 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToDurStream_Phoneme\n");
  return v14;
}

uint64_t UnicornPredict_CopyOutputToSDURStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 176);
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToDurStream\n");
  *(_DWORD *)(v8 + 408) = 0;
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  int v10 = *(_DWORD *)(a1 + 204);
  BOOL v11 = v9 >= a3 && v10 == a4;
  int v12 = a4;
  if (v11 || a4 == 1 && (int v12 = *(_DWORD *)(a1 + 204), v10 * v9 >= a3))
  {
    int v13 = *(_DWORD *)(a1 + 244);
    unint64_t v14 = *(unsigned int *)(a1 + 248);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 5984)) {
      int v12 = 1;
    }
    if (v14)
    {
      int v15 = 0;
      uint64_t v16 = (_DWORD *)(*(void *)(v8 + 384) + 24);
      uint64_t v17 = *(unsigned int *)(a1 + 248);
      do
      {
        v15 += *v16;
        v16 += 78;
        --v17;
      }
      while (v17);
      *(_DWORD *)(v8 + 408) = v15;
    }
    if (v14 >= v9)
    {
      uint64_t v39 = 0;
    }
    else
    {
      unsigned int v18 = 0;
      uint64_t v44 = a2 + 4 * ((v14 - v13) * a4 * v12);
      uint64_t v41 = v8;
      do
      {
        uint64_t v19 = *(void *)(v8 + 384);
        unsigned int v20 = (int *)(v19 + 312 * v14);
        v20[6] = 0;
        float v21 = v20 + 6;
        if ((*(_DWORD *)(a1 + 204) - 1) > 0xFFFFFFFC)
        {
          int v25 = 0;
        }
        else
        {
          uint64_t v42 = (int *)(v19 + 312 * v14);
          uint64_t v43 = v19;
          unint64_t v22 = 2;
          do
          {
            if (v14 >= *(unsigned int *)(a1 + 256)) {
              float v23 = 0.08;
            }
            else {
              float v23 = *(float *)(v44 + 4 * v18++);
            }
            if (v23 < 0.0) {
              float v23 = 0.0;
            }
            if ((int)(float)((float)((float)(1000.0 / (float)*(int *)(*(void *)(a1 + 184) + 24)) * v23) + 0.5) <= 1) {
              int v24 = 1;
            }
            else {
              int v24 = (int)(float)((float)((float)(1000.0 / (float)*(int *)(*(void *)(a1 + 184) + 24)) * v23) + 0.5);
            }
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"ANN sdur %d (HMM %d)\n");
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d %d %d\n");
            *(_DWORD *)(*((void *)v42 + 2) + 4 * v22) = v24;
            int v25 = *v21 + v24;
            *float v21 = v25;
            ++v22;
          }
          while (v22 < (*(_DWORD *)(a1 + 204) + 2));
          uint64_t v8 = v41;
          unsigned int v20 = v42;
          uint64_t v19 = v43;
        }
        if (v14 < *(unsigned int *)(a1 + 256))
        {
          unint64_t v26 = *(int **)(a1 + 192);
          LODWORD(v27) = *v26;
          if ((*v26 - 4) >= 0xFFFFFFFE)
          {
            uint64_t v28 = *(void *)(*(void *)(a1 + 176) + 8);
            uint64_t v29 = *v20;
            if (*(unsigned char *)(*(void *)(v28 + 32) + v29) == 1)
            {
              int v30 = *(unsigned __int16 *)(*(void *)(v28 + 1784) + 2 * v29);
              if (v30)
              {
                uint64_t v31 = *(void *)(a1 + 184);
                if ((v30 / *(_DWORD *)(v31 + 24)) <= 1) {
                  int v32 = 1;
                }
                else {
                  int v32 = v30 / *(_DWORD *)(v31 + 24);
                }
                *float v21 = 0;
                uint64_t v33 = *(void *)(v19 + 312 * v14 + 16);
                if (v32 <= (int)v27)
                {
                  uint64_t v38 = 2;
                  do
                  {
                    *(_DWORD *)(v33 + 4 * v38) = 1;
                    int v25 = *v21 + 1;
                    *float v21 = v25;
                    BOOL v36 = v38++ <= *v26;
                  }
                  while (v36);
                }
                else
                {
                  int v25 = 0;
                  uint64_t v34 = 2;
                  do
                  {
                    int v35 = *(_DWORD *)(v33 + 4 * v34);
                    if (v35 <= 0)
                    {
                      int v35 = 1;
                      *(_DWORD *)(v33 + 4 * v34) = 1;
                      int v25 = *v21;
                      LODWORD(v27) = *v26;
                    }
                    v25 += v35;
                    *float v21 = v25;
                    BOOL v36 = v34++ <= (int)v27;
                  }
                  while (v36);
                  if (v32 < v25)
                  {
                    if ((int)v27 >= 1)
                    {
                      uint64_t v37 = 2;
                      do
                      {
                        *(_DWORD *)(v33 + 4 * v37) = 1;
                        uint64_t v27 = *v26;
                        BOOL v36 = v37++ <= v27;
                      }
                      while (v36);
                    }
                    *float v21 = v27;
                    int v25 = v27;
                  }
                  if (v32 >= v25)
                  {
                    *(_DWORD *)(v33 + 12) += v32 - v25;
                    *float v21 = v32;
                    int v25 = v32;
                  }
                }
                *(float *)(v19 + 312 * v14 + 32) = (float)v25 * (float)*(int *)(v31 + 24);
              }
            }
          }
        }
        *(_DWORD *)(v8 + 408) += v25;
        ++v14;
      }
      while (v14 < *(unsigned int *)(a1 + 200));
      uint64_t v39 = 0;
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToSDURStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v39 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToDurStream\n");
  return v39;
}

uint64_t UnicornPredict_CopyOutputToVUVStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 176);
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToVUVStream\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  int v10 = *(_DWORD *)(a1 + 204);
  BOOL v11 = v9 >= a3 && v10 == a4;
  int v12 = a4;
  if (v11 || a4 == 1 && (int v12 = *(_DWORD *)(a1 + 204), v10 * v9 >= a3))
  {
    unint64_t v13 = *(unsigned int *)(a1 + 248);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 5984)) {
      int v14 = 1;
    }
    else {
      int v14 = v12;
    }
    uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 176) + 32);
    if ((int)v15 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      uint64_t v16 = 0;
      while (*(_DWORD *)(*(void *)(a1 + 184) + 184 + 4 * v16) != 2)
      {
        if (v15 == ++v16)
        {
          LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 176) + 32);
          break;
        }
      }
    }
    if (v13 >= v9)
    {
      uint64_t v29 = 0;
    }
    else
    {
      unsigned int v17 = 0;
      uint64_t v18 = a2 + 4 * ((v13 - *(_DWORD *)(a1 + 244)) * a4 * v14);
      uint64_t v19 = v16;
      do
      {
        if ((v12 - 1) <= 0xFFFFFFFC)
        {
          unsigned int v20 = (void *)(*(void *)(v8 + 384) + 312 * v13 + 176);
          unint64_t v21 = 2;
          do
          {
            float v22 = 0.0;
            if (v13 < *(unsigned int *)(a1 + 256)) {
              float v22 = *(float *)(v18 + 4 * v17++);
            }
            if (v22 < 0.0) {
              float v22 = 0.0;
            }
            char v23 = *(unsigned char *)(*v20 + v21);
            if (v22 > 1.0) {
              float v22 = 1.0;
            }
            uint64_t v24 = *(void *)(a1 + 184) + 4 * v19;
            float v25 = *(float *)(v24 + 1128);
            uint64_t v26 = 1 << *(_DWORD *)(v24 + 184);
            char v27 = v23 & ~(_BYTE)v26;
            char v28 = v23 | v26;
            if (v22 <= v25) {
              char v28 = v27;
            }
            *(unsigned char *)(*v20 + v21) = v28;
            UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"%d: vuv %f %d (HMM %d)\n");
            ++v21;
            int v12 = *(_DWORD *)(a1 + 204);
          }
          while (v21 < (v12 + 2));
          unsigned int v9 = *(_DWORD *)(a1 + 200);
        }
        ++v13;
      }
      while (v13 < v9);
      uint64_t v29 = 0;
    }
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToVUVStream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    uint64_t v29 = 2229280775;
  }
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToVUVStream\n");
  return v29;
}

uint64_t UnicornPredict_CopyOutputToELF0Stream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"+%s_CopyOutputToELF0Stream\n");
  unsigned int v9 = *(_DWORD *)(a1 + 200);
  unsigned int v8 = *(_DWORD *)(a1 + 204);
  unsigned int v10 = 2 * v8;
  BOOL v11 = v9 >= a3 && v10 == a4;
  if (v11 || a4 == 2 && v8 * v9 >= a3)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 248);
    if (*(_DWORD *)(*(void *)(a1 + 216) + 5984)) {
      int v13 = 1;
    }
    else {
      int v13 = *(_DWORD *)(a1 + 204);
    }
    unsigned int v14 = 0;
    if (v12)
    {
      uint32x4_t v15 = (uint32x4_t)vdupq_n_s32(v12 - 1);
      int32x4_t v16 = vdupq_n_s32(v10);
      int8x16_t v17 = 0uLL;
      do
      {
        int8x16_t v18 = v17;
        int8x16_t v17 = (int8x16_t)vaddq_s32(v16, (int32x4_t)v17);
        v14 += 4;
      }
      while (((v12 + 3) & 0xFFFFFFFC) != v14);
      unsigned int v14 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v14 - 4), (int8x16_t)xmmword_2206E2AF0), v15), v18, v17));
    }
    unsigned int v19 = *(_DWORD *)(a1 + 256);
    if (v12 < v19)
    {
      unsigned int v20 = 0;
      uint64_t v21 = *(void *)(a1 + 288);
      uint64_t v28 = *(void *)(a1 + 304);
      uint64_t v22 = a2 + 4 * (v12 - *(_DWORD *)(a1 + 244)) * a4 * v13;
      unsigned int v23 = *(_DWORD *)(a1 + 204);
      do
      {
        if (v23)
        {
          unsigned int v24 = 0;
          do
          {
            *(_DWORD *)(v21 + 4 * v14) = *(_DWORD *)(v22 + 4 * v20);
            uint64_t v25 = v14;
            *(_DWORD *)(v21 + 4 * (v14 + 1)) = *(_DWORD *)(v22 + 4 * (v20 + 1));
            if (v14)
            {
              int v26 = mfs_QuantizeLF0Frame(*(void *)(a1 + 216), *(float *)(v21 + 4 * (v14 - 1)));
              *(_DWORD *)(v28 + 4 * (v24 + v12 * *(_DWORD *)(a1 + 204))) = mfs_QuantizeLF0Frame(*(void *)(a1 + 216), *(float *)(v21 + 4 * v25))- v26;
              UNICORN__log_select_Diag(*(void *)(a1 + 48), 11, (uint64_t)"@t_(%d) L(%f,%d) - R(%f,%d) = d(%d)\n");
              unsigned int v8 = *(_DWORD *)(a1 + 204);
            }
            unsigned int v14 = v25 + 2;
            ++v24;
            v20 += 2;
          }
          while (v24 < v8);
          unsigned int v19 = *(_DWORD *)(a1 + 256);
          unsigned int v23 = v8;
        }
        ++v12;
      }
      while (v12 < v19);
    }
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 10, (uint64_t)"-%s_CopyOutputToELF0Stream\n");
    return 0;
  }
  else
  {
    UNICORN__log_select_Diag(*(void *)(a1 + 48), 0, (uint64_t)"UnicornPredict_CopyOutputToELF0Stream: nPhonemes=%d, nStates=%d, _timesteps=%d, _dim=%d\n");
    return 2229280775;
  }
}

void AdjustDurationForTuning(int *a1, unsigned int a2, uint64_t a3, int a4, _DWORD *a5)
{
  unsigned int v7 = a4 - 4;
  unsigned int v8 = a2 / (a4 - 4);
  if (a2 % (a4 - 4))
  {
    uint64_t v9 = a2;
    do
    {
      int v10 = *a1++;
      *a5++ = v10;
      --v9;
    }
    while (v9);
  }
  else if (a4 != 4)
  {
    unsigned int v11 = 0;
    float v12 = *(float *)(a3 + 4 * v7);
    float v13 = *(float *)(a3 + 4 * (a4 - 3));
    float v14 = *(float *)(a3 + 4 * (a4 - 1));
    uint64_t v15 = v8 - 1;
    if (v8 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v8;
    }
    unsigned int v26 = a2 / (a4 - 4);
    unsigned int v27 = a2;
    do
    {
      if (v7 <= a2)
      {
        uint64_t v18 = 0;
        unsigned int v17 = v11 + 1;
        int v29 = v11 * v8;
        do
        {
          double v19 = exp((float)(v12 + (float)(*(float *)&a1[(v29 + v18)] * v13)));
          if (v17 < v7 && v15 == v18) {
            unsigned int v21 = v11 + 1;
          }
          else {
            unsigned int v21 = v11;
          }
          if (v18) {
            BOOL v22 = 1;
          }
          else {
            BOOL v22 = v11 == 0;
          }
          float v23 = v19;
          if (!v22) {
            unsigned int v21 = v11 - 1;
          }
          double v24 = v23 + (float)(v14 * *(float *)(a3 + 4 * v21));
          if (v24 < 0.008) {
            double v24 = 0.008;
          }
          float v25 = log(v24);
          *(float *)&a5[(v29 + v18++)] = (float)(v25 - v12) / v13;
        }
        while (v16 != v18);
        unsigned int v8 = v26;
        a2 = v27;
      }
      else
      {
        unsigned int v17 = v11 + 1;
      }
      unsigned int v11 = v17;
    }
    while (v17 != v7);
  }
}

uint64_t UnicornPipeline_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 2229280778;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v7 = PredictPipeline_Create(a2, a3, a4);
  *(void *)(a1 + 40) = v7;
  if (v7)
  {
    uint64_t v8 = heap_Calloc(*(void **)(a2 + 8), 1, 1984);
    *(void *)(a1 + 16) = v8;
    if (v8)
    {
      uint64_t v9 = UnicornSearch_Create(a2);
      *(void *)(a1 + 48) = v9;
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        if (v10 && (uint64_t v11 = *(void *)(v10 + 568)) != 0)
        {
          BOOL v12 = *(_DWORD *)(v11 + 5928) > 1u || *(_DWORD *)(v11 + 5932) != -1;
          uint64_t v6 = 0;
          *(_DWORD *)(a1 + 180) = v12;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v6;
}

uint64_t UnicornPipeline_SetForcedEEEnabled(uint64_t a1, int a2)
{
  uint64_t v2 = 2229281037;
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 568);
      if (v4)
      {
        if (a2) {
          BOOL v5 = *(_DWORD *)(v4 + 5928) > 1u || *(_DWORD *)(v4 + 5932) != -1;
        }
        else {
          BOOL v5 = 0;
        }
        uint64_t v2 = 0;
        *(_DWORD *)(a1 + 180) = v5;
      }
    }
  }
  return v2;
}

uint64_t UnicornPipeline_Destroy(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[6];
  if (v2)
  {
    UnicornSearch_Destroy(v2);
    a1[6] = 0;
  }
  uint64_t v3 = a1[2];
  if (v3) {
    heap_Free(*(void **)(*a1 + 8), v3);
  }
  a1[2] = 0;
  uint64_t v4 = a1[5];
  if (!v4) {
    return 2229280774;
  }

  return PredictPipeline_Destroy(v4);
}

uint64_t UnicornPipeline_Init(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)a1;
  float v14 = *(_DWORD **)(v12 + 568);
  uint64_t inited = UNICORN__mfs_InitStream(*(void *)a1, (void *)v11, v14);
  if ((inited & 0x80000000) != 0)
  {
    uint64_t v26 = inited;
    unsigned int v27 = "mfs_InitStream() failed";
LABEL_11:
    UNICORN__log_select_Error(v13, v26, (uint64_t)v27, v16, v17, v18, v19, v20);
    return v26;
  }
  Streauint64_t m = UNICORN__mfs_LoadStream(v11, v12, (uint64_t)v14, a5, a6);
  if ((Stream & 0x80000000) != 0)
  {
    uint64_t v26 = Stream;
    unsigned int v27 = "mfs_LoadStream() failed";
    goto LABEL_11;
  }
  *(void *)(v11 + 1768) = a4;
  UNICORN__log_select_Diag(v13, 2, (uint64_t)">> loading vstream done\n");
  *(_DWORD *)(v11 + 1980) = *(_DWORD *)(a1 + 192);
  *(void *)(v11 + 8) = a2;
  *(_OWORD *)(v11 + 1832) = *a3;
  *(void *)(v11 + 1760) = *(void *)(a1 + 40);
  uint64_t v22 = UNICORN__mfs_ParamGenStart(v11, (int *)v12, v14);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  int v23 = *(_DWORD *)v12;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)v12;
  int v24 = *(_DWORD *)(v11 + 392);
  *(_DWORD *)(a1 + 148) = v24 * v23;
  *(_DWORD *)(a1 + 152) = v24;
  *(_DWORD *)(v11 + 1080) = v24 * v23;
  uint64_t v22 = Install_DynamicBeams_Unicorn((uint64_t)v14, (unsigned int *)v12, v11, v24 * v23);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  uint64_t v22 = TransWeights_InitCopy((uint64_t)v14, (int *)v12, v11, *(_DWORD *)(a1 + 148));
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  if (!*(_DWORD *)(*(void *)(v12 + 568) + 11520))
  {
    *(void *)(v11 + 1800) = 0;
    goto LABEL_13;
  }
  uint64_t v25 = heap_Calloc(*(void **)(v13 + 8), *(unsigned int *)(a1 + 148), 40);
  *(void *)(v11 + 1800) = v25;
  if (v25)
  {
LABEL_13:
    uint64_t v30 = v11;
    uint64_t v31 = v12;
    int v32 = v14;
    uint64_t v22 = (**(uint64_t (***)(void))(a1 + 48))();
    if ((v22 & 0x80000000) == 0)
    {
      uint64_t v22 = ViterbiEE_Init(a1 + 56, v11, v14, v12);
      if ((v22 & 0x80000000) == 0)
      {
        *(void *)(a1 + 184) = 0;
        *(void *)(a1 + 156) = 0;
        *(void *)(a1 + 172) = 0;
        *(void *)(a1 + 164) = 0;
        return BET5_GenericRules_ParamActions_AllocMemoryAndInit((uint64_t)v14, (int *)v12, v11);
      }
    }
    return v22;
  }
  return 2229280778;
}

uint64_t UnicornPipeline_Release(uint64_t *a1)
{
  ViterbiEE_Release((uint64_t)(a1 + 7));
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(v2 + 40))();
    if ((v3 & 0x80000000) != 0)
    {
      UNICORN__log_select_Diag(*a1, 0, (uint64_t)"SearchPipeline, Error, self->Close\n");
      return 2229280778;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)a1[23];
  if (v4)
  {
    UNICORN__Psola_Deinitialise(*a1, v4);
    a1[23] = 0;
    BOOL v5 = (void *)a1[2];
  }
  else
  {
    BOOL v5 = (void *)a1[2];
    if (v5)
    {
      uint64_t v6 = v5[225];
      if (v6)
      {
        heap_Free(*(void **)(*a1 + 8), v6);
        BOOL v5 = (void *)a1[2];
        v5[225] = 0;
      }
    }
  }
  BET5_GenericRules_ParamActions_FreeMemory(v5);
  UNICORN__mfs_DeInitStream((void *)a1[2]);
  return v3;
}

uint64_t UnicornPipeline_ProcessPhoneme(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = UNICORN__mfs_ParamGenContinue(*(void *)(a1 + 16), *(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 568));
  if ((v4 & 0x80000000) == 0)
  {
    int v5 = *(_DWORD *)(a1 + 160);
    if (v5 >= *(_DWORD *)(a1 + 152))
    {
      uint64_t v15 = 0;
      goto LABEL_26;
    }
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 8))();
    if ((v4 & 0x80000000) == 0)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 24))();
      if ((v4 & 0x80000000) == 0)
      {
        uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 32))();
        if ((v4 & 0x80000000) == 0)
        {
          uint64_t v6 = *(uint64_t **)(a1 + 16);
          char v19 = 0;
          __int16 v18 = 0;
          UNICORN__mfs_Ling_GetPhonCtxt(v6[1], *(_DWORD *)(a1 + 160), &v18);
          if (*(int *)(a1 + 144) >= 1)
          {
            int v7 = 0;
            int v8 = HIBYTE(v18);
            signed int v9 = *(_DWORD *)(a1 + 156);
            do
            {
              unsigned int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 568) + 11548);
              UNICORN__log_select_Diag(*(void *)a1, 12, (uint64_t)"Decoder at state idx %d\n");
              uint64_t v11 = v6[138];
              if (!*(_DWORD *)(v11 + 32 * v9 + 16))
              {
                uint64_t v4 = UNICORN__mfs_CostList_Add(0.0, *(void *)(a1 + 8), v6 + 136, v9, v10);
                if ((v4 & 0x80000000) != 0) {
                  return v4;
                }
                uint64_t v11 = v6[138];
              }
              BOOL v12 = *(_DWORD *)(a1 + 144) == 2 && v8 == 1;
              BOOL v13 = v12 && v7 == 0;
              int v14 = v13;
              uint64_t v4 = ViterbiEE_Decode(a1 + 56, v11 + 32 * v9, v14);
              if ((v4 & 0x80000000) != 0) {
                return v4;
              }
              mfs_CostList_FreeAt(v6 + 136, v9);
              signed int v9 = *(_DWORD *)(a1 + 156) + 1;
              *(_DWORD *)(a1 + 156) = v9;
            }
            while (++v7 < *(_DWORD *)(a1 + 144));
          }
          uint64_t v15 = UnicornPipeline_PrepareEmissionIfPossible(a1, 0);
          int v5 = *(_DWORD *)(a1 + 160) + 1;
          *(_DWORD *)(a1 + 160) = v5;
          if ((v15 & 0x80000000) != 0) {
            return v15;
          }
LABEL_26:
          int v16 = *(_DWORD *)(a1 + 164) - *(_DWORD *)(a1 + 168);
          if (v16)
          {
            uint64_t v15 = UnicornPipeline_PrepareSynth(a1, v16);
            if ((v15 & 0x80000000) != 0) {
              return v15;
            }
            UNICORN__log_select_Diag(*(void *)a1, 1, (uint64_t)"Prepared: %d units\n");
            int v5 = *(_DWORD *)(a1 + 160);
          }
          *a2 = v5 >= *(_DWORD *)(a1 + 152);
          return v15;
        }
      }
    }
  }
  return v4;
}

uint64_t UnicornPipeline_PrepareSynth(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = *(_DWORD *)(a1 + 168);
  int v5 = a2 + 1;
  do
  {
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 568) + 11520))
    {
      uint64_t result = mfs_Psola_CalculateAdjustments_ByOne(*(int **)(a1 + 8), *(void *)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 1800), v4, *(_DWORD *)(a1 + 148), (int *)(a1 + 172));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v4 = *(_DWORD *)(a1 + 168);
    }
    *(_DWORD *)(a1 + 168) = ++v4;
    --v5;
  }
  while (v5 > 1);
  return result;
}

uint64_t UnicornPipeline_GetAvailableCount(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 172) - *(_DWORD *)(a1 + 176));
}

uint64_t UnicornPipeline_GetAvailableDuration(uint64_t result)
{
  uint64_t v2 = *(int *)(result + 172);
  uint64_t v1 = *(int *)(result + 176);
  if ((int)v1 >= (int)v2) {
    return 0;
  }
  uint64_t v3 = result;
  LODWORD(result) = 0;
  int v4 = (int *)(*(void *)(*(void *)(v3 + 16) + 1800) + 40 * (int)v1 + 8);
  uint64_t v5 = v2 - v1;
  do
  {
    int v6 = *v4;
    v4 += 10;
    uint64_t result = (v6 + result);
    --v5;
  }
  while (v5);
  return result;
}

uint64_t UnicornPipeline_SynthesizeDummy(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) += a2;
  return 0;
}

BOOL UnicornPipeline_GetForcedEEEnabled(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 180) != 0;
  }
  return result;
}

uint64_t UnicornPipeline_GetPreparedCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 172);
}

uint64_t UnicornPipeline_GetStream(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

BOOL UnicornPipeline_isDone(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) >= *(_DWORD *)(a1 + 152);
}

uint64_t UnicornPipeline_isMultiThreaded()
{
  return 0;
}

uint64_t UnicornPipeline_PrepareEmissionIfPossible(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2) {
    *a2 = 0;
  }
  if (*(_DWORD *)(a1 + 160) + 1 == *(_DWORD *)(a1 + 152))
  {
    int UniquePathLength = *(_DWORD *)(a1 + 148) - *(_DWORD *)(a1 + 164);
    if (!UniquePathLength) {
      return 0;
    }
  }
  else
  {
    int UniquePathLength = ViterbiEE_GetUniquePathLength(a1 + 56, *(_DWORD *)(a1 + 164));
    if (!UniquePathLength)
    {
      if (!*(_DWORD *)(a1 + 180)) {
        return 0;
      }
      int UniquePathLength = ViterbiForcedEE_GetPathLength(a1 + 56, *(_DWORD *)(a1 + 164));
      if (!UniquePathLength) {
        return 0;
      }
    }
  }
  int v6 = *(_DWORD *)(a1 + 164);
  int v7 = v6 + UniquePathLength;
  uint64_t v8 = v4 + 1448;
  uint64_t result = ViterbiEE_Backtrack(a1 + 56, v6, v6 + UniquePathLength, *(void *)(v4 + 8), v4 + 1448, v4 + 1472, v4 + 1496);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = v4 + 1552;
    uint64_t v11 = v4 + 1400;
    UNICORN__log_select_Diag(*(void *)a1, 1, (uint64_t)"Emitted: %d (+%d) units (%d decoded, debt %d)\n");
    if (*(_DWORD *)(a1 + 180)) {
      ViterbiForcedEE_KillPaths(a1 + 56, v7 - 1, *(_DWORD *)(a1 + 156) - 1, v8);
    }
    uint64_t result = mfs_UnitSequence_SequencePartial(*(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32), v11, v10, v6, v6 + UniquePathLength);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 164) = v7;
      if (a2) {
        *a2 = 1;
      }
    }
  }
  return result;
}

uint64_t UnicornPipeline_SetSIMDCallbacks(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    ViterbiEE_EnableSIMD(result + 56, a2);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v2 + 48) + 48);
    return v3();
  }
  return result;
}

uint64_t UNICORN__mfs_SegmentList_Init(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  a3[1] = a2;
  a3[2] = 0;
  a3[3] = 0;
  return 0;
}

uint64_t mfs_SegmentList_InitPrealloc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  uint64_t v6 = heap_Alloc(*(void *)(a1 + 8), 28 * a3);
  *(void *)(a4 + 16) = v6;
  if (!v6) {
    return 2229280778;
  }
  uint64_t result = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 28) = a3;
  return result;
}

void *UNICORN__mfs_SegmentList_DeInit(void *result)
{
  uint64_t v1 = result;
  if (result[1])
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), result[2]);
    v1[2] = 0;
  }
  v1[3] = 0;
  return result;
}

uint64_t UNICORN__mfs_SegmentList_Add(uint64_t a1, int a2, char a3, int a4, int a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    uint64_t v11 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 16), 28 * (v10 + 1));
    if (!v11) {
      return 2229280778;
    }
    *(void *)(a1 + 16) = v11;
    unsigned int v10 = *(_DWORD *)(a1 + 24);
    unsigned int v12 = v10 + 1;
    *(_DWORD *)(a1 + 28) = v10 + 1;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    unsigned int v12 = v10 + 1;
  }
  uint64_t v13 = 0;
  uint64_t v14 = v11 + 28 * v10;
  *(_DWORD *)uint64_t v14 = a2;
  *(unsigned char *)(v14 + 4) = a3;
  *(_DWORD *)(v14 + 8) = a4;
  *(_DWORD *)(v14 + 12) = a5;
  *(_DWORD *)(v14 + 16) = 1;
  *(_DWORD *)(a1 + 24) = v12;
  return v13;
}

uint64_t UNICORN__mfs_SegmentList_Length(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

uint64_t UNICORN__mfs_SegmentList_Get(uint64_t a1, unsigned int a2, _DWORD *a3, unsigned char *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  if (a1 && *(_DWORD *)(a1 + 24) > a2)
  {
    uint64_t result = 0;
    uint64_t v10 = *(void *)(a1 + 16) + 28 * a2;
    *a3 = *(_DWORD *)v10;
    *a4 = *(unsigned char *)(v10 + 4);
    uint64_t v11 = (_DWORD *)(*(void *)(a1 + 16) + 28 * a2);
    *a5 = v11[2];
    *a6 = v11[3];
    *a7 = v11[5];
    *a8 = v11[6];
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
    *a6 = 0;
    uint64_t result = 2229280775;
    *a5 = 0;
  }
  return result;
}

uint64_t SearchPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 1072);
  v10[1] = a2;
  v10[2] = a3;
  v10[0] = a1;
  uint64_t v4 = (uint64_t *)UnicornSearch_Create(v3);
  if (!v4)
  {
    uint64_t v7 = 2229280778;
    uint64_t v8 = "SearchPipeline, Error, UnicornSearch_Create\n";
LABEL_10:
    UNICORN__log_select_Diag(v3, 0, (uint64_t)v8);
    return v7;
  }
  uint64_t v5 = v4;
  if ((((uint64_t (*)(uint64_t *, void *))*v4)(v4, v10) & 0x80000000) != 0)
  {
    uint64_t v7 = 2229280778;
    uint64_t v8 = "SearchPipeline, Error, self->Open\n";
    goto LABEL_10;
  }
  ((void (*)(uint64_t *, uint64_t))v5[6])(v5, 1);
  if ((((uint64_t (*)(uint64_t *))v5[2])(v5) & 0x80000000) != 0)
  {
    uint64_t v7 = 2229280778;
    uint64_t v8 = "SearchPipeline, Error, self->Process\n";
    goto LABEL_10;
  }
  uint64_t v6 = ((uint64_t (*)(uint64_t *))v5[5])(v5);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = 2229280778;
    uint64_t v8 = "SearchPipeline, Error, self->Close\n";
    goto LABEL_10;
  }
  uint64_t v7 = v6;
  UnicornSearch_Destroy(v5);
  return v7;
}

uint64_t UnicornPipelineMT_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  uint64_t v7 = (uint64_t *)(a1 + 208);
  uint64_t result = critsec_ObjOpen(*(void *)(a2 + 16), *(void **)(a2 + 8), (uint64_t *)(a1 + 208));
  if ((result & 0x80000000) == 0)
  {
    if (result)
    {
      critsec_ObjClose(*v7);
      return UnicornPipeline_Destroy((void *)(a1 + 8));
    }
    else
    {
      *(void *)(a1 + 216) = 0;
      uint64_t result = UnicornPipeline_Create(a1 + 8, *(void *)a1, a3, a4);
      *(_DWORD *)(a1 + 200) = 1;
    }
  }
  return result;
}

uint64_t UnicornPipelineMT_Destroy(uint64_t a1)
{
  critsec_ObjClose(*(void *)(a1 + 208));

  return UnicornPipeline_Destroy((void *)(a1 + 8));
}

uint64_t UnicornPipelineMT_Init(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  return UnicornPipeline_Init(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t UnicornPipelineMT_Release(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 216)) {
    goto LABEL_6;
  }
  critsec_Enter(*(void **)(a1 + 208));
  if (*(_DWORD *)(a1 + 172) < *(_DWORD *)(a1 + 156)) {
    *(_DWORD *)(a1 + 220) = 1;
  }
  critsec_Leave(*(void **)(a1 + 208));
  thread_Join(*(void **)(a1 + 232));
  thread_ObjClose(*(void *)(a1 + 232));
  *(void *)(a1 + 232) = 0;
  int v2 = semaphore_ObjectClose(*(void *)(a1 + 224));
  *(void *)(a1 + 216) = 0;
  if (v2)
  {
    uint64_t v3 = v2 | 0x84E02000;
    UnicornPipeline_Release((uint64_t *)(a1 + 8));
    return v3;
  }
  else
  {
LABEL_6:
    return UnicornPipeline_Release((uint64_t *)(a1 + 8));
  }
}

uint64_t UnicornPipelineMT_ProcessPhoneme(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 216) != 1)
  {
    int v8 = semaphore_ObjectOpen(*(void *)(*(void *)a1 + 408), *(void **)(*(void *)a1 + 8), 0, 0x7FFFLL, (uint64_t *)(a1 + 224));
    if (v8 < 0) {
      return v8 | 0x84E02000;
    }
    int v8 = thread_ObjOpen(*(void *)(*(void *)a1 + 408), *(void **)(*(void *)a1 + 8), (uint64_t *)(a1 + 232));
    if (v8 < 0) {
      return v8 | 0x84E02000;
    }
    int v8 = thread_Start(*(void **)(a1 + 232));
    if (v8) {
      return v8 | 0x84E02000;
    }
    *(_DWORD *)(a1 + 216) = 1;
  }
  uint64_t v4 = 0;
  int v19 = 0;
  int v5 = *(_DWORD *)(a1 + 168);
  if (v5 < *(_DWORD *)(a1 + 160))
  {
    if (!*(_DWORD *)(a1 + 220))
    {
      while (1)
      {
        char v21 = 0;
        __int16 v20 = 0;
        UNICORN__mfs_Ling_GetPhonCtxt(*(void *)(*(void *)(a1 + 24) + 8), v5, &v20);
        int v10 = *(_DWORD *)(a1 + 152);
        if (v10 >= 1)
        {
          int v11 = 0;
          int v12 = HIBYTE(v20);
          while (!*(_DWORD *)(a1 + 220))
          {
            int v13 = *(_DWORD *)(a1 + 168);
            int v8 = semaphore_Acquire(*(void **)(a1 + 224));
            if (v8) {
              return v8 | 0x84E02000;
            }
            signed int v14 = v11 + v13 * v10;
            BOOL v17 = *(_DWORD *)(a1 + 152) == 2 && v12 == 1 && v11 == 0;
            uint64_t v18 = ViterbiEE_Decode(a1 + 64, *(void *)(*(void *)(a1 + 24) + 1104) + 32 * v14, v17);
            if (v18)
            {
              uint64_t v4 = v18;
              if ((v18 & 0x80000000) != 0) {
                return v4;
              }
              break;
            }
            mfs_CostList_FreeAt((void *)(*(void *)(a1 + 24) + 1088), v14);
            ++*(_DWORD *)(a1 + 164);
            ++v11;
            int v10 = *(_DWORD *)(a1 + 152);
            if (v11 >= v10) {
              break;
            }
          }
        }
        uint64_t v4 = UnicornPipeline_PrepareEmissionIfPossible(a1 + 8, &v19);
        if ((v4 & 0x80000000) != 0) {
          return v4;
        }
        int v5 = *(_DWORD *)(a1 + 168) + 1;
        *(_DWORD *)(a1 + 168) = v5;
        if (v5 >= *(_DWORD *)(a1 + 160) || *(_DWORD *)(a1 + 220) | v19) {
          goto LABEL_5;
        }
      }
    }
    uint64_t v4 = 0;
  }
LABEL_5:
  int v6 = *(_DWORD *)(a1 + 172);
  int v7 = *(_DWORD *)(a1 + 176);
  if (v6 == v7)
  {
LABEL_8:
    *a2 = v6 >= *(_DWORD *)(a1 + 156);
    return v4;
  }
  uint64_t v4 = UnicornPipeline_PrepareSynth(a1 + 8, v6 - v7);
  if ((v4 & 0x80000000) == 0)
  {
    UNICORN__log_select_Diag(*(void *)a1, 1, (uint64_t)"Prepared: %d units\n");
    int v6 = *(_DWORD *)(a1 + 172);
    goto LABEL_8;
  }
  return v4;
}

uint64_t UnicornPipelineMT_locSearch(uint64_t a1)
{
  if (*(int *)(a1 + 160) >= 1)
  {
    int v2 = 0;
    uint64_t v3 = *(void *)(a1 + 24);
    while (!*(_DWORD *)(a1 + 220))
    {
      if ((UNICORN__mfs_ParamGenContinue(v3, *(void *)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 568)) & 0x80000000) != 0
        || ((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 8))() & 0x80000000) != 0
        || ((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 24))() & 0x80000000) != 0
        || ((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 32))() & 0x80000000) != 0)
      {
        goto LABEL_16;
      }
      int v4 = *(_DWORD *)(a1 + 152);
      if (v4 >= 1)
      {
        uint64_t v5 = 0;
        while (1)
        {
          int v6 = v2 * v4;
          if (!*(_DWORD *)(*(void *)(v3 + 1104) + 32 * (v5 + v6) + 16)
            && (UNICORN__mfs_CostList_Add(0.0, *(void *)(a1 + 16), (void *)(v3 + 1088), (int)v5 + v6, *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 568) + 11548)) & 0x80000000) != 0)
          {
            break;
          }
          if ((semaphore_Release(*(void **)(a1 + 224)) & 0x80000000) != 0) {
            break;
          }
          int v4 = *(_DWORD *)(a1 + 152);
          if ((int)++v5 >= v4) {
            goto LABEL_14;
          }
        }
LABEL_16:
        *(_DWORD *)(a1 + 220) = 1;
        break;
      }
LABEL_14:
      if (++v2 >= *(_DWORD *)(a1 + 160)) {
        break;
      }
    }
  }
  semaphore_Release(*(void **)(a1 + 224));
  return 0;
}

BOOL UnicornPipelineMT_GetForcedEEEnabled(uint64_t a1)
{
  return UnicornPipeline_GetForcedEEEnabled(a1 + 8);
}

uint64_t UnicornPipelineMT_SetForcedEEEnabled(uint64_t a1, int a2)
{
  return UnicornPipeline_SetForcedEEEnabled(a1 + 8, a2);
}

uint64_t UnicornPipelineMT_SetSIMDCallbacks(uint64_t a1, int a2)
{
  return UnicornPipeline_SetSIMDCallbacks(a1 + 8, a2);
}

BOOL UnicornPipelineMT_isDone(uint64_t a1)
{
  return UnicornPipeline_isDone(a1 + 8);
}

uint64_t UnicornPipelineMT_isMultiThreaded()
{
  return 1;
}

uint64_t UnicornPipelineMT_SynthesizeDummy(uint64_t a1, int a2)
{
  return UnicornPipeline_SynthesizeDummy(a1 + 8, a2);
}

uint64_t UnicornPipelineMT_GetPreparedCount(uint64_t a1)
{
  return UnicornPipeline_GetPreparedCount(a1 + 8);
}

uint64_t UnicornPipelineMT_GetStream(uint64_t a1)
{
  return UnicornPipeline_GetStream(a1 + 8);
}

uint64_t UNICORN__mfs_FSM_Load(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2229280772;
  int v4 = *(int **)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v7 = *v4;
    *(_DWORD *)a1 = *v4;
    if (v5 >= 5)
    {
      uint64_t v8 = v4[1];
      *(_DWORD *)(a1 + 4) = v8;
      if (v5 >= 9)
      {
        unsigned int v9 = v4[2];
        *(_DWORD *)(a1 + 8) = v9;
        if (v5 >= 0xD)
        {
          int v10 = (char *)v4 + v5;
          int v11 = v4 + 3;
          *(void *)(a1 + 16) = v11;
          int v12 = (char *)&v11[2 * (v7 + 1)];
          if (v12 < v10)
          {
            *(void *)(a1 + 24) = v12;
            unint64_t v13 = (unint64_t)&v12[8 * v8];
            if (v13 < (unint64_t)v10)
            {
              *(void *)(a1 + 32) = v13;
              if ((char *)(v13 + 12 * v9) == v10) {
                return 0;
              }
              else {
                return 2229280772;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *UNICORN__mfs_FSM_DeInit(void *a1)
{
  return cstdlib_memset(a1, 0, 0x28uLL);
}

uint64_t UNICORN__mfs_Version_Init()
{
  return 3341;
}

uint64_t UNICORN__mfs_Version_Retrieve(uint64_t a1, unsigned char *a2)
{
  *(void *)(a1 + 64) = a2;
  char v2 = 86;
  uint64_t v3 = &byte_220784841;
  int v4 = "vljpollet";
  do
  {
    *a2++ = *v4 ^ v2;
    if (!*(unsigned __int8 *)++v4) {
      int v4 = "vljpollet";
    }
    int v6 = *v3++;
    char v2 = v6;
  }
  while (v6);
  *(a2 - 1) = 0;
  return __sprintf_chk((char *)a1, 0, 0x40uLL, "%d.%02d %s", 1, 0, "Unicorn");
}

uint64_t UNICORN__mfs_Version_DeInit(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  return 0;
}

uint64_t UNICORN__mfs_Version_DataCheck(uint64_t a1, const char *a2)
{
  return cstdlib_strcmp(UNICORN__VersionMetaData01, a2);
}

void *Allocate_EQ_SYM5DIAG(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)a1 = a2;
  int v4 = (char *)malloc(20 * a2);
  *(void *)(a1 + 8) = v4;
  uint64_t result = malloc(8 * a2);
  *(void *)(a1 + 16) = result;
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 16) + v6) = v4;
      v4 += 12;
      v6 += 8;
    }
    while (8 * a2 != v6);
  }
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = &v4[4 * a2];
  return result;
}

double Deallocate_EQ_SYM5DIAG(uint64_t a1)
{
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 16));
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

float EQ_SYM5DIAG_LU_decomposition(unsigned int *a1, double a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  int v4 = *(_DWORD **)v2;
  uint64_t v3 = *(float **)(v2 + 8);
  LODWORD(a2) = **(_DWORD **)v2;
  float32x2_t v5 = vdiv_f32(*(float32x2_t *)(*(void *)v2 + 4), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0));
  *(float32x2_t *)(v4 + 1) = v5;
  float v6 = v3[1];
  *(float *)&a2 = *v3 + (float)((float)((float)-v5.f32[0] * v5.f32[0]) * *(float *)&a2);
  *uint64_t v3 = *(float *)&a2;
  float v7 = (float)(v6 + (float)((float)-(float)(*((float *)v4 + 1) * *((float *)v4 + 2)) * *(float *)v4)) / *(float *)&a2;
  float v8 = v3[2] / *(float *)&a2;
  v3[1] = v7;
  v3[2] = v8;
  uint64_t v9 = *a1;
  if (v9 >= 3)
  {
    int v10 = (float **)(v2 + 16);
    uint64_t v11 = v9 - 2;
    do
    {
      int v12 = *v10;
      float v13 = (*v10)[1];
      float v14 = **v10 + (float)((float)-(float)(v7 * v7) * *(float *)&a2);
      *int v12 = v14;
      *(float *)&a2 = v14 + (float)((float)-(float)((*(v10 - 2))[2] * (*(v10 - 2))[2]) * **(v10 - 2));
      *int v12 = *(float *)&a2;
      float v7 = (float)(v13 + (float)((float)-(float)(v3[1] * v3[2]) * *v3)) / *(float *)&a2;
      float v15 = v12[2] / *(float *)&a2;
      v12[1] = v7;
      v12[2] = v15;
      ++v10;
      uint64_t v3 = v12;
      --v11;
    }
    while (v11);
  }
  return *(float *)&a2;
}

float *solve_LU_EQ_SYM5DIAG(void *a1, float *a2)
{
  uint64_t v3 = (uint64_t *)a1[2];
  uint64_t v2 = (float *)a1[3];
  int v4 = (float *)a1[4];
  float v5 = *v2;
  float *v4 = *v2;
  uint64_t v6 = *v3;
  float v7 = v2[1] - (float)(*(float *)(*v3 + 4) * v5);
  v4[1] = v7;
  uint64_t v8 = *(unsigned int *)a1;
  if ((int)v8 >= 3)
  {
    uint64_t v9 = v4 + 2;
    int v10 = v2 + 2;
    uint64_t v11 = v3 + 1;
    uint64_t v12 = v8 - 2;
    do
    {
      float v13 = *v10++;
      float v14 = v13;
      float v15 = *(float *)(v6 + 8);
      uint64_t v16 = *v11++;
      uint64_t v6 = v16;
      float v7 = v14 - (float)((float)(v15 * *(v9 - 2)) + (float)(*(float *)(v16 + 4) * v7));
      *v9++ = v7;
      --v12;
    }
    while (v12);
  }
  if (a2 || (a2 = (float *)malloc(4 * v8)) != 0)
  {
    float v17 = v4[(int)v8 - 1] / *(float *)v3[(int)v8 - 1];
    a2[(int)v8 - 1] = v17;
    uint64_t v18 = (float *)v3[(int)v8 - 2];
    a2[(int)v8 - 2] = (float)(v4[(int)v8 - 2] / *v18) - (float)(v18[1] * v17);
    if ((int)v8 >= 3)
    {
      uint64_t v19 = (v8 - 3);
      __int16 v20 = (float **)&v3[(v8 - 3)];
      do
      {
        char v21 = *v20--;
        a2[v19] = (float)((float)(v4[v19] / *v21) - (float)(v21[1] * a2[v19 + 1])) - (float)(v21[2] * a2[v19 + 2]);
        --v19;
      }
      while (v19 != -1);
    }
  }
  return a2;
}

float *solve_EQ_SYM5DIAG(unsigned int *a1, float *a2, double a3)
{
  EQ_SYM5DIAG_LU_decomposition(a1, a3);

  return solve_LU_EQ_SYM5DIAG(a1, a2);
}

uint64_t UNICORN__mfs_CostList_CompareNodesScore_faster(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  unsigned int v3 = *(_DWORD *)(a2 + 4);
  BOOL v4 = v2 > v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

uint64_t UNICORN__mfs_CostList_Init(uint64_t a1, uint64_t a2, unsigned int *__b, unsigned int a4, int a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v10 = 2229280778;
  cstdlib_memset(__b, 0, 0xE8uLL);
  uint64_t result = 2229280774;
  if (a1 && a2)
  {
    *(void *)long long __b = a1;
    *((void *)__b + 1) = a2;
    uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), a4, 32);
    *((void *)__b + 2) = v12;
    if (!v12) {
      return 2229280778;
    }
    if (a4)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = heap_Calloc(*(void **)(*(void *)__b + 8), 1, 12);
        uint64_t v15 = *((void *)__b + 2);
        *(void *)(v15 + v13) = v14;
        if (!v14) {
          return 2229280778;
        }
        uint64_t v16 = v15 + v13;
        *(void *)(v16 + 16) = 0x100000000;
        *(_DWORD *)(v16 + 24) = a5;
        *(_DWORD *)(v16 + 28) = 1;
        v13 += 32;
      }
      while (32 * a4 != v13);
    }
    __b[6] = a4;
    if (*(_DWORD *)(a2 + 1928) == 1)
    {
      float v17 = (unsigned int *)*((void *)__b + 1);
      if (v17[482] != 1) {
        return 0;
      }
      uint64_t v18 = ((*(_DWORD *)(*((void *)v17 + 71) + 11548) + 1)
           / *(_DWORD *)(*((void *)v17 + 71) + 5992)
           + 31) >> 5;
      __b[14] = -1;
      __b[15] = v18;
      *((void *)__b + 8) = heap_Calloc(*(void **)(*(void *)__b + 8), v18, 4);
      uint64_t v19 = heap_Calloc(*(void **)(*(void *)__b + 8), 4, (*(_DWORD *)(*((void *)v17 + 71) + 11548) + 101)/ *(_DWORD *)(*((void *)v17 + 71) + 5992));
      *((void *)__b + 9) = v19;
      if (*((void *)__b + 8))
      {
        if (v19)
        {
          __b[8] = -1;
          __b[20] = -1;
          if (*(_DWORD *)(*((void *)v17 + 71) + 5992) == 1) {
            goto LABEL_13;
          }
          uint64_t v26 = __b[15];
          __b[9] = v26;
          *((void *)__b + 5) = heap_Calloc(*(void **)(*(void *)__b + 8), v26, 4);
          uint64_t v27 = heap_Calloc(*(void **)(*(void *)__b + 8), 4, (*(_DWORD *)(*((void *)v17 + 71) + 11548) + 101)/ *(_DWORD *)(*((void *)v17 + 71) + 5992));
          *((void *)__b + 6) = v27;
          if (*((void *)__b + 5))
          {
            if (v27)
            {
              uint64_t v28 = __b[15];
              __b[21] = v28;
              *((void *)__b + 11) = heap_Calloc(*(void **)(*(void *)__b + 8), v28, 4);
              uint64_t v29 = heap_Calloc(*(void **)(*(void *)__b + 8), 4, (*(_DWORD *)(*((void *)v17 + 71) + 11548) + 101)/ *(_DWORD *)(*((void *)v17 + 71) + 5992));
              *((void *)__b + 12) = v29;
              if (*((void *)__b + 11))
              {
                if (v29)
                {
LABEL_13:
                  __b[55] = 1;
                  uint64_t v20 = ((v17[249] + 31) >> 5) * *v17;
                  __b[54] = v20;
                  uint64_t v21 = heap_Calloc(*(void **)(*(void *)__b + 8), v20, 4);
                  *((void *)__b + 26) = v21;
                  if (v21)
                  {
                    uint64_t v22 = *v17;
                    if ((int)v22 >= 1)
                    {
                      unsigned int v23 = v17[249];
                      int v24 = (unsigned int *)v30;
                      do
                      {
                        *v24++ = v23;
                        --v22;
                      }
                      while (v22);
                    }
                    Unicorn_CostListBlock_ResetPointers((char *)__b, (uint64_t)v30);
                    uint64_t v25 = heap_Calloc(*(void **)(*(void *)__b + 8), v17[249], 4);
                    *((void *)__b + 13) = v25;
                    if (v25) {
                      return 0;
                    }
                    else {
                      return 2229280778;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Unicorn_CostListBlock_Set(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*(_DWORD *)v2 - 1) <= 0xFFFFFFFC)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (*(_DWORD *)v2 + 2);
    uint64_t v5 = *(void *)(v2 + 776);
    uint64_t v6 = *(void *)(a2 + 64) + 8;
    do
    {
      v9[v3] = *(_DWORD *)(*(void *)(v5 + 16 + 8 * v3) + 40 * *(unsigned int *)(v6 + 4 * v3) + 4);
      unint64_t v7 = v3 + 3;
      ++v3;
    }
    while (v7 < v4);
  }
  Unicorn_CostListBlock_ResetPointers((char *)a1, (uint64_t)v9);
  return 0;
}

char *Unicorn_CostListBlock_ResetPointers(char *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (int *)*((void *)result + 1);
    if (*v2 < 1)
    {
      size_t v8 = 0;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v5 = result + 176;
      do
      {
        uint64_t v6 = (*(_DWORD *)(a2 + 4 * v3) + 31) >> 5;
        *(void *)&v5[8 * v3 - 64] = *((void *)result + 26) + 4 * v4;
        *(_DWORD *)&v5[4 * v3] = v6;
        v4 += v6;
        uint64_t v7 = v3 + 2;
        ++v3;
      }
      while (v7 <= *v2);
      size_t v8 = 4 * v4;
    }
    return (char *)cstdlib_memset(*((void **)result + 26), 0, v8);
  }
  return result;
}

void *mfs_CostList_FreeAt(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = 32 * a2;
  uint64_t result = heap_Free(*(void **)(*a1 + 8), *(void *)(a1[2] + v4));
  uint64_t v6 = a1[2];
  uint64_t v7 = v6 + 32 * v3;
  *(void *)(v6 + v4) = 0;
  uint64_t v10 = *(void *)(v7 + 8);
  uint64_t v9 = (void *)(v7 + 8);
  uint64_t v8 = v10;
  if (v10)
  {
    uint64_t result = heap_Free(*(void **)(*a1 + 8), v8);
    *uint64_t v9 = 0;
  }
  return result;
}

void *UNICORN__mfs_CostList_DeInit(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if (v2)
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), v2);
    v1[5] = 0;
  }
  uint64_t v3 = v1[6];
  if (v3)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v3);
    v1[6] = 0;
  }
  uint64_t v4 = v1[8];
  if (v4)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v4);
    v1[8] = 0;
  }
  uint64_t v5 = v1[9];
  if (v5)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v5);
    v1[9] = 0;
  }
  uint64_t v6 = v1[11];
  if (v6)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v6);
    v1[11] = 0;
  }
  uint64_t v7 = v1[12];
  if (v7)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v7);
    v1[12] = 0;
  }
  uint64_t v8 = v1[26];
  if (v8)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v8);
    v1[26] = 0;
  }
  uint64_t v9 = v1[13];
  if (v9)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v9);
    v1[13] = 0;
  }
  uint64_t v10 = v1[2];
  if (v10)
  {
    if (*((_DWORD *)v1 + 6))
    {
      unsigned int v11 = 0;
      do
        mfs_CostList_FreeAt(v1, v11++);
      while (v11 < *((_DWORD *)v1 + 6));
      uint64_t v10 = v1[2];
    }
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v10);
    v1[2] = 0;
  }
  *((_DWORD *)v1 + 6) = 0;
  return result;
}

uint64_t UNICORN__mfs_CostList_IsNodeInList(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v6 = *(void *)(a1 + 16) + 32 * a2;
  *a4 = -1;
  unsigned int InsertionPoint = mfs_CostList_FindInsertionPoint((uint64_t *)v6, a3);
  if (InsertionPoint >= *(_DWORD *)(v6 + 16) || *(_DWORD *)(*(void *)v6 + 12 * InsertionPoint) != a3) {
    return 0;
  }
  *a4 = InsertionPoint;
  return 1;
}

uint64_t mfs_CostList_FindInsertionPoint(uint64_t *a1, unsigned int a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  int v3 = v2 - 1;
  if (v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = *a1;
  while (1)
  {
    uint64_t v7 = ((v3 + (int)result) >> 1);
    unsigned int v8 = *(_DWORD *)(v6 + 12 * (int)v7);
    if (v8 >= a2)
    {
      if (v8 <= a2) {
        return v7;
      }
      int v3 = v7 - 1;
    }
    else
    {
      uint64_t result = (v7 + 1);
    }
    if ((int)result <= v3)
    {
      uint64_t v7 = ((v3 + (int)result) >> 1);
      unsigned int v9 = *(_DWORD *)(v6 + 12 * (int)v7);
      if (v9 >= a2)
      {
        if (v9 <= a2) {
          return v7;
        }
        int v3 = v7 - 1;
      }
      else
      {
        uint64_t result = (v7 + 1);
      }
      if ((int)result <= v3) {
        break;
      }
    }
LABEL_17:
    if ((int)result > v3) {
      return result;
    }
  }
  uint64_t v7 = ((v3 + (int)result) >> 1);
  unsigned int v10 = *(_DWORD *)(v6 + 12 * (int)v7);
  if (v10 < a2)
  {
    uint64_t result = (v7 + 1);
    goto LABEL_17;
  }
  if (v10 > a2)
  {
    int v3 = v7 - 1;
    goto LABEL_17;
  }
  return v7;
}

uint64_t UNICORN__mfs_CostList_Resize(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1[2] + 32 * a2;
  if (*(_DWORD *)(v3 + 20) >= a3) {
    return 0;
  }
  uint64_t v5 = heap_Realloc(*(uint64_t **)(*a1 + 8), *(void *)v3, 12 * a3);
  if (!v5) {
    return 2229280778;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  *(_DWORD *)(v3 + 20) = a3;
  *(void *)uint64_t v3 = v6;
  return result;
}

uint64_t UNICORN__mfs_CostList_Add(float a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 2229280769;
  uint64_t v6 = a3[2];
  uint64_t v7 = a4;
  uint64_t v8 = v6 + 32 * a4;
  if (!*(_DWORD *)(v8 + 24))
  {
    unsigned int InsertionPoint = mfs_CostList_FindInsertionPoint((uint64_t *)(v6 + 32 * a4), a5);
    unsigned int v13 = InsertionPoint;
    uint64_t v15 = (unsigned int *)(v8 + 16);
    unsigned int v14 = *(_DWORD *)(v8 + 16);
    uint64_t v16 = *(void *)v8;
    if (InsertionPoint < v14 && *(_DWORD *)(v16 + 12 * InsertionPoint) == a5)
    {
      return 2229280770;
    }
    else
    {
      uint64_t v17 = v6 + 32 * v7;
      int v19 = *(_DWORD *)(v17 + 20);
      uint64_t v18 = (unsigned int *)(v17 + 20);
      if (v19 == v14)
      {
        unsigned int v20 = v14 + 64;
        *uint64_t v18 = v20;
        uint64_t v21 = heap_Realloc(*(uint64_t **)(*a3 + 8), v16, 12 * v20);
        *(void *)uint64_t v8 = v21;
        if (!v21)
        {
          *v18 -= 64;
          return 2229280778;
        }
        uint64_t v16 = v21;
        unsigned int v14 = *v15;
      }
      unsigned int v22 = v13;
      unsigned int v23 = v14 - v13;
      if (v23)
      {
        cstdlib_memmove((void *)(v16 + 12 * (v13 + 1)), (const void *)(v16 + 12 * v13), 12 * v23);
        uint64_t v16 = *(void *)v8;
        unsigned int v13 = *v15;
      }
      uint64_t v5 = 0;
      uint64_t v24 = v16 + 12 * v22;
      *(_DWORD *)uint64_t v24 = a5;
      *(float *)(v24 + 4) = a1;
      *uint64_t v15 = v13 + 1;
    }
  }
  return v5;
}

uint64_t UNICORN__mfs_CostList_Pad(void *a1, unsigned int a2, int a3, float a4)
{
  uint64_t v4 = 2229280769;
  uint64_t v5 = a1[2] + 32 * a2;
  if (!*(_DWORD *)(v5 + 24))
  {
    uint64_t v8 = (int *)(v5 + 16);
    unsigned int v9 = *(_DWORD *)(v5 + 16);
    unsigned int v10 = (_DWORD *)(v5 + 20);
    uint64_t v11 = *(void *)v5;
    if (*(_DWORD *)(v5 + 20) == v9)
    {
      *unsigned int v10 = v9 + 64;
      uint64_t v12 = heap_Realloc(*(uint64_t **)(*a1 + 8), v11, 12 * (v9 + 64));
      *(void *)uint64_t v5 = v12;
      if (!v12)
      {
        *v10 -= 64;
        return 2229280778;
      }
      uint64_t v11 = v12;
      int v13 = *v8;
    }
    else
    {
      int v13 = *(_DWORD *)(v5 + 16);
    }
    uint64_t v4 = 0;
    uint64_t v14 = v11 + 12 * v9;
    *(_DWORD *)uint64_t v14 = a3;
    *(float *)(v14 + 4) = a4;
    *uint64_t v8 = v13 + 1;
  }
  return v4;
}

uint64_t mfs_CostList_Pad_Faster(uint64_t result, int a2, float a3)
{
  unsigned int v3 = *(_DWORD *)(result + 16);
  uint64_t v4 = *(void *)result + 12 * v3;
  *(_DWORD *)uint64_t v4 = a2;
  *(float *)(v4 + 4) = a3;
  *(_DWORD *)(result + 16) = v3 + 1;
  return result;
}

uint64_t mfs_CostList_PadWithBnfOffset(void *a1, unsigned int a2, int a3, int a4, float a5)
{
  uint64_t result = UNICORN__mfs_CostList_Pad(a1, a2, a3, a5);
  if (!result)
  {
    uint64_t v9 = a1[2] + 32 * a2;
    *(_DWORD *)(*(void *)v9 + 12 * (*(_DWORD *)(v9 + 16) - 1) + 8) = a4;
  }
  return result;
}

uint64_t UNICORN__mfs_ConcatTwoLists(void *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a3 + 16) + 32 * a4;
  uint64_t v5 = (unsigned int *)(v4 + 16);
  unsigned int v6 = *(_DWORD *)(v4 + 16);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = a1[2];
  uint64_t v8 = a2;
  uint64_t v9 = v7 + 32 * a2;
  unsigned int v10 = (_DWORD *)(v9 + 16);
  unsigned int v11 = *(_DWORD *)(v9 + 16) + 2 * v6;
  uint64_t v12 = (unsigned int *)(v9 + 20);
  if (v11 <= *(_DWORD *)(v9 + 20)) {
    goto LABEL_5;
  }
  *uint64_t v12 = v11;
  uint64_t v13 = heap_Realloc(*(uint64_t **)(*a1 + 8), *(void *)v9, 12 * v11);
  *(void *)uint64_t v9 = v13;
  if (!v13)
  {
    *v12 -= v6;
    uint64_t result = 2229280778;
    goto LABEL_8;
  }
  unsigned int v6 = *v5;
  if (*v5)
  {
LABEL_5:
    cstdlib_memcpy((void *)(*(void *)v9 + 12 * *v10), *(const void **)v4, 12 * v6);
    uint64_t result = 0;
    *v10 += *v5;
    *(_DWORD *)(v7 + 32 * v8 + 28) = 0;
  }
  else
  {
LABEL_6:
    uint64_t result = 0;
  }
LABEL_8:
  unsigned int *v5 = 0;
  return result;
}

uint64_t mfs_ClonePrevList(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v5 = a3 - 1;
      unsigned int v6 = (_DWORD *)a1 + v5 + 44;
      if (*((_DWORD *)a1 + a3 + 44) == *v6)
      {
        uint64_t v8 = a1[2];
        uint64_t v9 = a2 - 1;
        uint64_t v10 = v8 + 32 * v9;
        unsigned int v12 = *(_DWORD *)(v10 + 16);
        unsigned int v11 = (unsigned int *)(v10 + 16);
        if ((UNICORN__mfs_CostList_Resize(a1, a2, v12) & 0x80000000) == 0)
        {
          uint64_t v13 = (void **)(v8 + 32 * a2);
          uint64_t v14 = a1 + 14;
          cstdlib_memcpy(*v13, *(const void **)(v8 + 32 * v9), 12 * *v11);
          int v15 = *v11;
          if (*v11)
          {
            uint64_t v16 = *v13;
            uint64_t v17 = *v11;
            do
            {
              ++*v16;
              v16 += 3;
              --v17;
            }
            while (v17);
          }
          uint64_t v18 = v8 + 32 * a2;
          *(_DWORD *)(v18 + 16) = v15;
          uint64_t v19 = v8 + 32 * v9;
          *(_DWORD *)(v18 + 28) = *(_DWORD *)(v19 + 28);
          *(void *)(v18 + 20) = *(void *)(v19 + 20);
          cstdlib_memcpy((void *)v14[a3], (const void *)v14[v5], 4 * *v6);
        }
      }
    }
  }
  return 0;
}

uint64_t UNICORN__mfs_CostList_Sort(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 32 * a2;
  uint64_t v7 = (_DWORD *)(v6 + 24);
  if (*(_DWORD *)(v6 + 24) == a3 && *(_DWORD *)(v6 + 28)) {
    return 0;
  }
  if (!a3)
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    uint64_t v10 = (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesUid;
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a3 == 1)
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    uint64_t v10 = (uint64_t (*)(unint64_t, unint64_t))UNICORN__mfs_CostList_CompareNodesScore_faster;
    if (!v9)
    {
LABEL_8:
      uint64_t result = 0;
      *uint64_t v7 = a3;
      *(_DWORD *)(v4 + 32 * v5 + 28) = 1;
      return result;
    }
LABEL_7:
    ssft_qsort(*(void *)v6, v9, 12, v10);
    goto LABEL_8;
  }
  return 2229280769;
}

uint64_t mfs_CostList_CompareNodesUid(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t mfs_CostList_QSelectUnitIDs_Faster(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3 = a2 - 1;
  if (a2 != 1)
  {
    unsigned int v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = (uint64_t *)(result + 12 * a3);
    do
    {
      uint64_t v7 = v3;
      uint64_t v8 = (uint64_t *)(result + 12 * v3);
      int v9 = *((_DWORD *)v8 + 2);
      uint64_t v10 = *v8;
      int v11 = *((_DWORD *)v6 + 2);
      *uint64_t v8 = *v6;
      *((_DWORD *)v8 + 2) = v11;
      *uint64_t v6 = v10;
      *((_DWORD *)v6 + 2) = v9;
      unsigned int v12 = v4;
      if (v4 < v3)
      {
        uint64_t v13 = (uint64_t *)(result + 12 * v4);
        uint64_t v14 = v7 - v4;
        unsigned int v12 = v4;
        do
        {
          if (*(_DWORD *)v13 < *(_DWORD *)v8)
          {
            int v15 = (uint64_t *)(result + 12 * v12);
            int v16 = *((_DWORD *)v15 + 2);
            uint64_t v17 = *v15;
            int v18 = *((_DWORD *)v13 + 2);
            *int v15 = *v13;
            *((_DWORD *)v15 + 2) = v18;
            *uint64_t v13 = v17;
            *((_DWORD *)v13 + 2) = v16;
            ++v12;
          }
          uint64_t v13 = (uint64_t *)((char *)v13 + 12);
          --v14;
        }
        while (v14);
      }
      uint64_t v19 = (uint64_t *)(result + 12 * v12);
      int v20 = *((_DWORD *)v19 + 2);
      uint64_t v21 = *v19;
      int v22 = *((_DWORD *)v8 + 2);
      *uint64_t v19 = *v8;
      *((_DWORD *)v19 + 2) = v22;
      *uint64_t v8 = v21;
      *((_DWORD *)v8 + 2) = v20;
      if (v12 == a3) {
        break;
      }
      if (v12 >= a3)
      {
        unsigned int v3 = v12 - 1;
      }
      else
      {
        unsigned int v4 = v12 + 1;
        unsigned int v3 = v7;
      }
      ++v5;
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t mfs_CostList_QSelectScores_Faster(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a2 - 1;
  if (a2 != 1)
  {
    unsigned int v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = a3 - 1;
    do
    {
      uint64_t v7 = (uint64_t *)(result + 12 * v3);
      int v8 = *((_DWORD *)v7 + 2);
      uint64_t v9 = *v7;
      uint64_t v10 = (uint64_t *)(result + 12 * (v3 >> 1));
      int v11 = *((_DWORD *)v10 + 2);
      unsigned int v12 = v3;
      *uint64_t v7 = *v10;
      *((_DWORD *)v7 + 2) = v11;
      *uint64_t v10 = v9;
      *((_DWORD *)v10 + 2) = v8;
      unsigned int v13 = v4;
      if (v4 < v3)
      {
        uint64_t v14 = (uint64_t *)(result + 12 * v4);
        unint64_t v15 = v3 - (unint64_t)v4;
        unsigned int v13 = v4;
        do
        {
          if (*((_DWORD *)v14 + 1) < *(_DWORD *)(result + 12 * v3 + 4))
          {
            int v16 = (uint64_t *)(result + 12 * v13);
            int v17 = *((_DWORD *)v16 + 2);
            uint64_t v18 = *v16;
            int v19 = *((_DWORD *)v14 + 2);
            *int v16 = *v14;
            *((_DWORD *)v16 + 2) = v19;
            *uint64_t v14 = v18;
            *((_DWORD *)v14 + 2) = v17;
            ++v13;
          }
          uint64_t v14 = (uint64_t *)((char *)v14 + 12);
          --v15;
        }
        while (v15);
      }
      int v20 = (uint64_t *)(result + 12 * v13);
      int v21 = *((_DWORD *)v20 + 2);
      uint64_t v22 = *v20;
      int v23 = *((_DWORD *)v7 + 2);
      uint64_t *v20 = *v7;
      *((_DWORD *)v20 + 2) = v23;
      *uint64_t v7 = v22;
      *((_DWORD *)v7 + 2) = v21;
      if (v13 == v6) {
        break;
      }
      if (v13 >= v6)
      {
        unsigned int v3 = v13 - 1;
      }
      else
      {
        unsigned int v4 = v13 + 1;
        unsigned int v3 = v12;
      }
      ++v5;
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t mfs_CostList_Select(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 32 * a2;
  if (*(_DWORD *)(v6 + 24) == a3 && *(_DWORD *)(v6 + 28)) {
    return 0;
  }
  if (!a3)
  {
    int v9 = *(_DWORD *)(v4 + 32 * a2 + 16);
    if (v9) {
      mfs_CostList_QSelectUnitIDs_Faster(*(void *)v6, v9, a4);
    }
    goto LABEL_10;
  }
  if (a3 == 1)
  {
    int v8 = *(_DWORD *)(v4 + 32 * a2 + 16);
    if (v8) {
      mfs_CostList_QSelectScores_Faster(*(void *)v6, v8, a4);
    }
LABEL_10:
    uint64_t result = 0;
    *(_DWORD *)(v4 + 32 * v5 + 28) = 0;
    return result;
  }
  return 2229280769;
}

uint64_t UNICORN__mfs_CostList_UpdateCost_inlined(uint64_t result, unsigned int a2, unsigned int a3, float a4)
{
  *(float *)(*(void *)(*(void *)(result + 16) + 32 * a2) + 12 * a3 + 4) = a4;
  return result;
}

uint64_t UNICORN__mfs_CostList_UpdateCostEnd_inlined(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 16) + 32 * a2;
  if (*(_DWORD *)(v2 + 24) == 1) {
    *(_DWORD *)(v2 + 28) = 0;
  }
  return result;
}

uint64_t UNICORN__mfs_CostList_UpdateCost(uint64_t result, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t v4 = *(void *)(result + 16) + 32 * a2;
  *(float *)(*(void *)v4 + 12 * a3 + 4) = a4;
  if (*(_DWORD *)(v4 + 24) == 1) {
    *(_DWORD *)(v4 + 28) = 0;
  }
  return result;
}

uint64_t UNICORN__mfs_CostList_HasUnit(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3 + 32 * a2;
  uint64_t v6 = (_DWORD *)(v4 + 16);
  uint64_t v5 = *(unsigned int *)(v4 + 16);
  if (!*(_DWORD *)(v4 + 16)) {
    return 0;
  }
  uint64_t v8 = v3 + 32 * a2;
  if (!*(_DWORD *)(v8 + 24))
  {
    BOOL v17 = __OFSUB__(v5, 1);
    int v18 = v5 - 1;
    if (v18 < 0 == v17)
    {
      int v19 = 0;
      do
      {
        int v20 = (v18 + v19) / 2;
        unsigned int v21 = *(_DWORD *)(*(void *)v4 + 12 * v20);
        if (v21 >= a3)
        {
          if (v21 <= a3) {
            return 1;
          }
          int v18 = v20 - 1;
        }
        else
        {
          int v19 = v20 + 1;
        }
      }
      while (v19 <= v18);
    }
    return 0;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  int v9 = (uint64_t *)(v8 + 8);
  if (v10) {
    goto LABEL_25;
  }
  uint64_t v11 = heap_Alloc(*(void *)(*a1 + 8), 4 * v5);
  *int v9 = v11;
  uint64_t v12 = *v6;
  if (v11)
  {
    if (v12)
    {
      unint64_t v13 = 0;
      uint64_t v14 = *(int **)v4;
      do
      {
        int v15 = *v14;
        v14 += 3;
        *(_DWORD *)(v11 + 4 * v13++) = v15;
        unint64_t v16 = *v6;
      }
      while (v13 < v16);
    }
    else
    {
      unint64_t v16 = 0;
    }
    ssft_qsort(v11, v16, 4, (uint64_t (*)(unint64_t, unint64_t))mfs_CostList_CompareNodesUid);
    LODWORD(v5) = *v6;
LABEL_25:
    BOOL v17 = __OFSUB__(v5, 1);
    int v25 = v5 - 1;
    if (v25 < 0 == v17)
    {
      int v26 = 0;
      do
      {
        int v27 = (v25 + v26) / 2;
        unsigned int v28 = *(_DWORD *)(*v9 + 4 * v27);
        if (v28 >= a3)
        {
          if (v28 <= a3) {
            return 1;
          }
          int v25 = v27 - 1;
        }
        else
        {
          int v26 = v27 + 1;
        }
      }
      while (v26 <= v25);
    }
    return 0;
  }
  if (!v12) {
    return 0;
  }
  uint64_t v22 = *(int **)v4;
  while (1)
  {
    int v23 = *v22;
    v22 += 3;
    if (v23 == a3) {
      break;
    }
    uint64_t result = 0;
    if (!--v12) {
      return result;
    }
  }
  return 1;
}

void *UNICORN__mfs_CostList_Prune(void *result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result[2] + 32 * a2;
  if (*(_DWORD *)(v4 + 16) > a3)
  {
    uint64_t v5 = result;
    *(int32x2_t *)(v4 + 16) = vdup_n_s32(a3);
    uint64_t result = (void *)heap_Realloc(*(uint64_t **)(*result + 8), *(void *)v4, 12 * a3);
    if (result) {
      *(void *)uint64_t v4 = result;
    }
    uint64_t v6 = v5[2] + 32 * v3;
    uint64_t v9 = *(void *)(v6 + 8);
    uint64_t v8 = (void *)(v6 + 8);
    uint64_t v7 = v9;
    if (v9)
    {
      uint64_t result = heap_Free(*(void **)(*v5 + 8), v7);
      *uint64_t v8 = 0;
    }
  }
  return result;
}

void *UNICORN__mfs_CostList_FreeUidIndex(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    unint64_t v2 = *((unsigned int *)result + 6);
    if (v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 8;
      do
      {
        uint64_t v5 = v1[2];
        uint64_t v6 = *(void *)(v5 + v4);
        if (v6)
        {
          uint64_t result = heap_Free(*(void **)(*v1 + 8), v6);
          *(void *)(v5 + v4) = 0;
          unint64_t v2 = *((unsigned int *)v1 + 6);
        }
        ++v3;
        v4 += 32;
      }
      while (v3 < v2);
    }
  }
  return result;
}

uint64_t UNICORN__mfs_SparseMtx_Load(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2229280772;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 16);
    if (v4)
    {
      *(void *)a1 = v3;
      float v5 = (float)v4 * 0.25;
      float v6 = sqrtf(v5);
      if ((float)(v6 - floorf(v6)) <= 0.0)
      {
        unsigned int v9 = v6;
        unsigned int v10 = v4 >> 2;
        do
        {
          unsigned int v11 = v9 * v9;
          ++v9;
        }
        while (v11 < v10);
        unsigned int v8 = v9 - 1;
      }
      else
      {
        float v7 = sqrt((v5 + -1.0) * 0.5);
        unsigned int v8 = v7;
      }
      uint64_t v2 = 0;
      *(_DWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 12) = v8;
    }
  }
  return v2;
}

uint64_t mfs_FullMtx_Load(void *a1, char *__src, int a3, void *a4, int *a5)
{
  if (a5) {
    *a5 = 0;
  }
  if (__src)
  {
    cstdlib_memcpy(a1 + 1, __src, 4uLL);
    cstdlib_memcpy((char *)a1 + 12, __src + 4, 4uLL);
    unsigned int v10 = __src + 8;
    if (a5)
    {
      int v11 = *a5 + 8;
      *a5 = v11;
      if (a3)
      {
        cstdlib_memcpy(a4, v10, 4uLL);
        unsigned int v10 = __src + 12;
        int v11 = *a5 + 4;
        *a5 = v11;
      }
      *a1 = v10;
      *a5 = v11 + 4 * *((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3);
    }
    else if (a3)
    {
      cstdlib_memcpy(a4, v10, 4uLL);
      *a1 = __src + 12;
    }
    else
    {
      *a1 = v10;
    }
  }
  return 0;
}

void *UNICORN__mfs_SparseMtx_DeInit(void *a1)
{
  return cstdlib_memset(a1, 0, 0x10uLL);
}

uint64_t UnicornSearch_StageTwo_TreeIndex_Sliced(uint64_t a1, uint64_t a2)
{
  unint64_t v111 = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  long long __b = 0u;
  long long v108 = 0u;
  unsigned int v3 = a2 + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 92);
  uint64_t v4 = v3 - 2;
  if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v4))
  {
    uint64_t updated = 0;
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 136) + 16) + 32 * v4) + 4) = 0;
  }
  else
  {
    cstdlib_memset(&__b, 0, 0x48uLL);
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 16) + 4 * a2);
    if (*(float *)(*(void *)(a1 + 112) + 6704) == 0.0)
    {
      LODWORD(updated) = 0;
    }
    else
    {
      uint64_t updated = mfs_UpdateTargetQuantizedTrajectory_LF0(*(void *)(a1 + 104), *(void *)(a1 + 120), a1 + 176);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
    }
    unsigned int v106 = updated;
    uint64_t v7 = *(void *)(a1 + 336);
    if (v7) {
      mfs_TCost_Elf0_Manhattan_TreeIndex(*(float **)(a1 + 112), *(void *)(a1 + 120), (uint64_t *)(*(void *)(a1 + 120) + 1088), v3 - 2, a1 + 176, *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 64) + 4 * a2), a2, *(unsigned __int8 *)(a1 + 345) == 1, *(float *)(v7 + 4 * (2 * v4)), *(float *)(v7 + 4 * ((2 * v4) | 1u)));
    }
    if (*(unsigned char *)(a1 + 156) || *(unsigned char *)(a1 + 345) != 1)
    {
      uint64_t v9 = *(void *)(a1 + 112);
      uint64_t v8 = *(void *)(a1 + 120);
      unsigned int v10 = *(_DWORD *)(a1 + 100);
      unsigned int v11 = *(_DWORD *)(a1 + 380);
      uint64_t v12 = *(int **)(v8 + 1096);
      int v13 = *v12;
      cstdlib_memset(&__b, 0, 0x48uLL);
      if (v12[482] == 1)
      {
        unint64_t v111 = __PAIR64__(v11, v10);
        if (v11)
        {
          if (a2 == 2) {
            int v14 = 1;
          }
          else {
            int v14 = v13 + 1 == a2 ? 2 : 4;
          }
          HIDWORD(v110) = v14;
        }
        else
        {
          HIDWORD(v110) = 0;
        }
        *(void *)&long long __b = GetBnfTargetVectorPacked(v8, v4 / *(_DWORD *)(v9 + 5992), (float *)&v109 + 2);
        if (*(int *)(v9 + 6752) >= 1)
        {
          if (v3 != 2)
          {
            if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v3 - 3))) {
              uint64_t BnfTargetVectorPacked = 0;
            }
            else {
              uint64_t BnfTargetVectorPacked = GetBnfTargetVectorPacked(v8, (v3 - 3) / *(_DWORD *)(v9 + 5992), (float *)&v109 + 3);
            }
            *((void *)&__b + 1) = BnfTargetVectorPacked;
          }
          unsigned int v16 = (v3 - 1) / *(_DWORD *)(v9 + 5992);
          if (v16 < v10)
          {
            if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v3 - 1))) {
              uint64_t v17 = 0;
            }
            else {
              uint64_t v17 = GetBnfTargetVectorPacked(v8, v16, (float *)&v110);
            }
            *(void *)&long long v108 = v17;
          }
          if (*(int *)(v9 + 6752) >= 2)
          {
            if (v4 >= 2)
            {
              if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * (v3 - 4))) {
                uint64_t v18 = 0;
              }
              else {
                uint64_t v18 = GetBnfTargetVectorPacked(v8, (v3 - 4) / *(_DWORD *)(v9 + 5992), (float *)&v110 + 1);
              }
              *((void *)&v108 + 1) = v18;
            }
            unsigned int v19 = v3 / *(_DWORD *)(v9 + 5992);
            if (v19 < v10)
            {
              if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v3)) {
                uint64_t v20 = 0;
              }
              else {
                uint64_t v20 = GetBnfTargetVectorPacked(v8, v19, (float *)&v110 + 2);
              }
              *(void *)&long long v109 = v20;
            }
          }
        }
      }
      switch(HIDWORD(v110))
      {
        case 4:
          uint64_t v40 = *(void **)(a1 + 120);
          uint64_t v41 = v40[137];
          if (*(_DWORD *)(v41 + 1928) == 1)
          {
            uint64_t v42 = *(_DWORD **)(a1 + 112);
            if (v42[1688])
            {
              uint64_t v43 = v40[138];
              if (*(_DWORD *)(v43 + 32 * v4 + 16))
              {
                uint64_t v44 = 0;
                unint64_t v45 = 0;
                uint64_t v46 = (uint64_t *)(v43 + 32 * v4);
                float v47 = 1.0 - *(float *)(v40[169] + 4 * v4);
                int v105 = *(_DWORD *)(*(void *)(v41 + 568) + 11548) - 1;
                uint64_t v48 = *v46;
                do
                {
                  if (v42[1496])
                  {
                    unsigned int v49 = (unsigned int *)(*v46 + v44 + 8);
                    float v50 = v49;
                  }
                  else
                  {
                    uint64_t v51 = *(void *)(v41 + 1064);
                    int v52 = *(_DWORD *)(*v46 + v44 + 8);
                    unsigned int v49 = (unsigned int *)(v51 + 4 * (2 * v52));
                    float v50 = (unsigned int *)(v51 + 4 * ((2 * v52) | 1u));
                  }
                  int v53 = *(_DWORD *)(v48 + v44);
                  uint64_t v54 = *v50;
                  if (*((void *)&__b + 1))
                  {
                    float v55 = *(float *)(v40[164] + 4);
                    if ((*(_DWORD *)(v40[144] + 4 * (((v53 - 1) / v42[1498]) >> 5)) >> ((v53 - 1) / v42[1498]))) {
                      float v56 = *(float *)(v40[145] + 4 * *v49);
                    }
                    else {
                      float v56 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *((float *)&v109 + 3));
                    }
                    float v57 = (float)(v55 * v56) + 0.0;
                  }
                  else
                  {
                    float v57 = 0.0;
                  }
                  if ((void)v108)
                  {
                    float v58 = *(float *)(v40[164] + 8);
                    if ((*(_DWORD *)(v40[144] + 4 * (((v53 + 1) / v42[1498]) >> 5)) >> ((v53 + 1) / v42[1498]))) {
                      float v59 = *(float *)(v40[145] + 4 * v54);
                    }
                    else {
                      float v59 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *(float *)&v110);
                    }
                    float v57 = v57 + (float)(v58 * v59);
                  }
                  if ((int)v42[1688] >= 2)
                  {
                    if (*((void *)&v108 + 1) && v53 >= 2)
                    {
                      float v60 = *(float *)(v40[164] + 12);
                      float v57 = v57
                          + (float)(v60
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v53 + 2 <= v105)
                    {
                      float v61 = *(float *)(v40[164] + 16);
                      float v57 = v57
                          + (float)(v61
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v41, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v62 = v40[138] + 32 * v4;
                  uint64_t v48 = *(void *)v62;
                  *(float *)(*(void *)v62 + v44 + 4) = (float)(v47 * v57) + *(float *)(*(void *)v62 + v44 + 4);
                  ++v45;
                  v44 += 12;
                }
                while (v45 < *(unsigned int *)(v62 + 16));
              }
            }
          }
          break;
        case 2:
          uint64_t v63 = *(void **)(a1 + 120);
          uint64_t v64 = v63[137];
          if (*(_DWORD *)(v64 + 1928) == 1)
          {
            uint64_t v65 = *(_DWORD **)(a1 + 112);
            if (v65[1688])
            {
              uint64_t v66 = v63[138];
              if (*(_DWORD *)(v66 + 32 * v4 + 16))
              {
                uint64_t v67 = 0;
                unint64_t v68 = 0;
                uint64_t v69 = (uint64_t *)(v66 + 32 * v4);
                float v70 = 1.0 - *(float *)(v63[169] + 4 * v4);
                int v71 = *(_DWORD *)(*(void *)(v64 + 568) + 11548) - 1;
                uint64_t v72 = *v69;
                do
                {
                  if (v65[1496]) {
                    uint64_t v73 = (unsigned int *)(*v69 + v67 + 8);
                  }
                  else {
                    uint64_t v73 = (unsigned int *)(*(void *)(v64 + 1064)
                  }
                                         + 4 * (2 * *(_DWORD *)(*v69 + v67 + 8)));
                  int v74 = *(_DWORD *)(v72 + v67);
                  if (*((void *)&__b + 1))
                  {
                    float v75 = *(float *)(v63[164] + 4);
                    if ((*(_DWORD *)(v63[144] + 4 * (((v74 - 1) / v65[1498]) >> 5)) >> ((v74 - 1) / v65[1498]))) {
                      float v76 = *(float *)(v63[145] + 4 * *v73);
                    }
                    else {
                      float v76 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *((float *)&v109 + 3));
                    }
                    float v77 = (float)(v75 * v76) + 0.0;
                  }
                  else
                  {
                    float v77 = 0.0;
                  }
                  if ((void)v108 && v74 < v71)
                  {
                    float v78 = *(float *)(v63[164] + 8);
                    float v77 = v77
                        + (float)(v78
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *(float *)&v110));
                  }
                  if ((int)v65[1688] >= 2)
                  {
                    if (*((void *)&v108 + 1) && v74 >= 2)
                    {
                      float v79 = *(float *)(v63[164] + 12);
                      float v77 = v77
                          + (float)(v79
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v74 + 2 <= v71)
                    {
                      float v80 = *(float *)(v63[164] + 16);
                      float v77 = v77
                          + (float)(v80
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v64, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v81 = v63[138] + 32 * v4;
                  uint64_t v72 = *(void *)v81;
                  *(float *)(*(void *)v81 + v67 + 4) = (float)(v70 * v77) + *(float *)(*(void *)v81 + v67 + 4);
                  ++v68;
                  v67 += 12;
                }
                while (v68 < *(unsigned int *)(v81 + 16));
              }
            }
          }
          break;
        case 1:
          unsigned int v21 = *(void **)(a1 + 120);
          uint64_t v22 = v21[137];
          if (*(_DWORD *)(v22 + 1928) == 1)
          {
            int v23 = *(_DWORD **)(a1 + 112);
            if (v23[1688])
            {
              uint64_t v24 = v21[138];
              if (*(_DWORD *)(v24 + 32 * v4 + 16))
              {
                uint64_t v25 = 0;
                unint64_t v26 = 0;
                float v27 = 1.0 - *(float *)(v21[169] + 4 * v4);
                int v103 = *(_DWORD *)(*(void *)(v22 + 568) + 11548) - 1;
                int v104 = (uint64_t *)(v24 + 32 * v4);
                uint64_t v28 = *v104;
                do
                {
                  if (v23[1496]) {
                    uint64_t v29 = (unsigned int *)(*v104 + v25 + 8);
                  }
                  else {
                    uint64_t v29 = (unsigned int *)(*(void *)(v22 + 1064) + 4 * ((2 * *(_DWORD *)(*v104 + v25 + 8)) | 1u));
                  }
                  int v30 = *(_DWORD *)(v28 + v25);
                  uint64_t v31 = *v29;
                  float v32 = 0.0;
                  if (*((void *)&__b + 1)) {
                    BOOL v33 = v30 < 1;
                  }
                  else {
                    BOOL v33 = 1;
                  }
                  if (!v33)
                  {
                    float v34 = *(float *)(v21[164] + 4);
                    float v32 = (float)(v34
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *((float *)&v109 + 3)))+ 0.0;
                  }
                  if ((void)v108)
                  {
                    int v35 = v30 + 1;
                    if ((*(_DWORD *)(v21[144] + 4 * ((v35 / v23[1498]) >> 5)) >> (v35 / v23[1498])))
                    {
                      float v32 = v32 + (float)(*(float *)(v21[164] + 8) * *(float *)(v21[145] + 4 * v31));
                    }
                    else
                    {
                      float v36 = (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *(float *)&v110);
                      float v32 = v32 + (float)(*(float *)(v21[164] + 8) * v36);
                      *(_DWORD *)(v21[144] + 4 * ((v35 / v23[1498]) >> 5)) |= 1 << (v35 / v23[1498]);
                      *(float *)(v21[145] + 4 * v31) = v36;
                    }
                  }
                  if ((int)v23[1688] >= 2)
                  {
                    if (*((void *)&v108 + 1) && v30 >= 2)
                    {
                      float v37 = *(float *)(v21[164] + 12);
                      float v32 = v32
                          + (float)(v37
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v30 + 2 <= v103)
                    {
                      float v38 = *(float *)(v21[164] + 16);
                      float v32 = v32
                          + (float)(v38
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v22, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v39 = v21[138] + 32 * v4;
                  uint64_t v28 = *(void *)v39;
                  *(float *)(*(void *)v39 + v25 + 4) = (float)(v27 * v32) + *(float *)(*(void *)v39 + v25 + 4);
                  ++v26;
                  v25 += 12;
                }
                while (v26 < *(unsigned int *)(v39 + 16));
              }
            }
          }
          break;
        default:
          long long v82 = *(void **)(a1 + 120);
          uint64_t v83 = v82[137];
          if (*(_DWORD *)(v83 + 1928) == 1)
          {
            uint64_t v84 = *(void *)(a1 + 112);
            if (*(_DWORD *)(v84 + 6752))
            {
              uint64_t v85 = v82[138];
              if (*(_DWORD *)(v85 + 32 * v4 + 16))
              {
                uint64_t v86 = 0;
                unint64_t v87 = 0;
                float v88 = 1.0 - *(float *)(v82[169] + 4 * v4);
                int v89 = *(_DWORD *)(*(void *)(v83 + 568) + 11548) - 1;
                uint64_t v90 = *(void *)(v85 + 32 * v4);
                do
                {
                  int v91 = *(_DWORD *)(v90 + v86);
                  if (*((void *)&__b + 1)) {
                    BOOL v92 = v91 < 1;
                  }
                  else {
                    BOOL v92 = 1;
                  }
                  float v93 = 0.0;
                  if (!v92)
                  {
                    float v94 = *(float *)(v82[164] + 4);
                    float v93 = (float)(v94
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *((float *)&v109 + 3)))+ 0.0;
                  }
                  if ((void)v108) {
                    BOOL v95 = v91 < v89;
                  }
                  else {
                    BOOL v95 = 0;
                  }
                  if (v95)
                  {
                    float v96 = *(float *)(v82[164] + 8);
                    float v93 = v93
                        + (float)(v96
                                * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *(float *)&v110));
                  }
                  if (*(int *)(v84 + 6752) >= 2)
                  {
                    if (*((void *)&v108 + 1) && v91 >= 2)
                    {
                      float v97 = *(float *)(v82[164] + 12);
                      float v93 = v93
                          + (float)(v97
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *((float *)&v110 + 1)));
                    }
                    if ((void)v109 && v91 + 2 <= v89)
                    {
                      float v98 = *(float *)(v82[164] + 16);
                      float v93 = v93
                          + (float)(v98
                                  * (*(float (**)(uint64_t, void, float))(a1 + 392))(v83, *(void *)(a1 + 56), *((float *)&v110 + 2)));
                    }
                  }
                  uint64_t v99 = v82[138] + 32 * v4;
                  uint64_t v90 = *(void *)v99;
                  *(float *)(*(void *)v99 + v86 + 4) = (float)(v88 * v93) + *(float *)(*(void *)v99 + v86 + 4);
                  ++v87;
                  v86 += 12;
                }
                while (v87 < *(unsigned int *)(v99 + 16));
              }
            }
          }
          break;
      }
    }
    uint64_t v100 = *(void *)(a1 + 136);
    unsigned int v101 = *(_DWORD *)(*(void *)(a1 + 112) + 5564);
    uint64_t updated = v106;
    if (*(_DWORD *)(*(void *)(v100 + 16) + 32 * v4 + 16) > v101)
    {
      uint64_t updated = mfs_CostList_Select(v100, v4, 1, v101);
      UNICORN__mfs_CostList_Prune(*(void **)(a1 + 136), v4, *(_DWORD *)(*(void *)(a1 + 112) + 5564));
    }
    UNICORN__log_select_Diag(*(void *)(a1 + 56), 11, (uint64_t)"costlist(%d)\n");
  }
  return updated;
}

uint64_t select_bet5_loadVoice(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)__s2 = 0u;
  long long v23 = 0u;
  v19[1] = 0;
  v20[0] = a2;
  v20[1] = 1;
  v19[0] = a2;
  if (a5)
  {
    uint64_t VAOBrokerString = betX_CreateVAOBrokerString(a2, 1, __s2, 0x100uLL, 0);
    unsigned int v11 = v19;
    if ((VAOBrokerString & 0x80000000) != 0) {
      return VAOBrokerString;
    }
  }
  else
  {
    uint64_t VAOBrokerString = betX_CreateRegularBrokerString(a2, 0, __s2, 0x100uLL);
    unsigned int v11 = v20;
    if ((VAOBrokerString & 0x80000000) != 0) {
      return VAOBrokerString;
    }
  }
  if (a3)
  {
    int v12 = cstdlib_strcmp(a3, __s2);
    uint64_t v13 = *(void *)(a1 + 48);
    if (!v12)
    {
      uint64_t Object = objc_GetObject(v13, (uint64_t)__s2, &v21);
      uint64_t VAOBrokerString = Object;
      if (!a5 && (Object & 0x80000000) == 0)
      {
        objc_ReleaseObject(*(void *)(a1 + 48), (uint64_t)a3);
        uint64_t v16 = *(void *)(v21 + 32);
        *(void *)a4 = v16;
        *(_DWORD *)(a4 + 8) = 117;
LABEL_18:
        paramc_ParamSetStr(*(void *)(a2 + 40), (uint64_t)"voicecomponentid", (char *)(v16 + 43362));
        paramc_ParamSetInt(*(void *)(a2 + 40), (uint64_t)"bet5nstatesperphoneme", *(_DWORD *)(v16 + 11912));
        return VAOBrokerString;
      }
      goto LABEL_12;
    }
    objc_ReleaseObject(v13, (uint64_t)a3);
  }
  AddRefCounteduint64_t Object = objc_GetAddRefCountedObject(*(void *)(a1 + 48), (uint64_t)__s2, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))ObjcVoiceOpen, (void (*)(void, void, _OWORD *))ObjcVoiceClose, (uint64_t)v11, &v21);
  uint64_t VAOBrokerString = AddRefCountedObject;
  if (a5 && (AddRefCountedObject & 0x80000000) != 0)
  {
    uint64_t v15 = betX_CreateVAOBrokerString(a2, 1, __s2, 0x100uLL, 1);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    uint64_t VAOBrokerString = objc_GetAddRefCountedObject(*(void *)(a1 + 48), (uint64_t)__s2, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))ObjcVoiceOpen, (void (*)(void, void, _OWORD *))ObjcVoiceClose, (uint64_t)v20, &v21);
  }
LABEL_12:
  if ((VAOBrokerString & 0x80000000) == 0)
  {
    uint64_t v16 = *(void *)(v21 + 32);
    *(void *)a4 = v16;
    *(_DWORD *)(a4 + 8) = 117;
    if (!a5) {
      goto LABEL_18;
    }
  }
  return VAOBrokerString;
}

uint64_t ObjcVoiceOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  int v74 = 0;
  float v75 = 0;
  int v9 = *((_DWORD *)a5 + 2);
  uint64_t v10 = *a5;
  __src = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  memset(__dst, 0, sizeof(__dst));
  uint64_t result = InitRsrcFunction(a1, a2, &__src);
  if ((result & 0x80000000) == 0)
  {
    cstdlib_memcpy(__dst, __src, 0x1A0uLL);
    long long v49 = *(_OWORD *)(v10 + 32);
    int v12 = ssftriff_reader_ObjOpen(a1, a2, 2 * (v9 == 0), a3, "SEL5", 1031, (uint64_t *)&v75);
    if (v12 < 0)
    {
      return (v12 & 0x1FFFu) - 2065686528;
    }
    else
    {
      uint64_t v13 = (char *)heap_Calloc(*((void **)&__dst[0] + 1), 1, 43432);
      uint64_t v18 = (uint64_t)v13;
      if (v13)
      {
        *(void *)(a4 + 32) = v13;
        cstdlib_strcpy(v13, a3);
        cstdlib_strcpy((char *)(v18 + 14536), a3);
        cstdlib_memset((void *)(v18 + 16528), 255, 0x100uLL);
        cstdlib_memset((void *)(v18 + 17432), 255, 0x11CuLL);
        cstdlib_memset((void *)(v18 + 17760), 255, 0x20uLL);
        *(_DWORD *)(v18 + 16908) = 1;
        *(unsigned char *)(v18 + 43362) = 0;
        UNICORN__mfs_InitParam(v18 + 256);
        cstdlib_memset(__b, 0, 0x50uLL);
        *(_DWORD *)(v18 + 43428) = 0;
        if ((paramc_ParamGetStr(*((uint64_t *)&v49 + 1), (uint64_t)"bet5odlbnf", &v74) & 0x80000000) == 0
          && v74
          && *v74
          && cstdlib_strchr("yYtT1", (char)*v74))
        {
          *(_DWORD *)(v18 + 43428) = 1;
        }
        unsigned int v19 = select_bet5_ParseRiff((uint64_t *)__dst, v18, (uint64_t)v75, 0, __b, 0, 0);
        if ((v19 & 0x80000000) != 0)
        {
          unsigned int Data = v19;
          cstdlib_strcpy(__s1, "");
          if (__b[0])
          {
            int v43 = 1;
            uint64_t v44 = __b;
            do
            {
              cstdlib_strcat(__s1, "/");
              cstdlib_strcat(__s1, v44);
              uint64_t v44 = &__b[5 * v43++];
            }
            while (*v44);
          }
          log_OutPublic(v49, (uint64_t)"SELECT_BET5", 58003, (uint64_t)"%s%s%s%s%s%x", v39, v40, v41, v42, "file");
        }
        else if (*(unsigned char *)(v18 + 5071) && *(int *)(v18 + 388) > 0)
        {
          long long v24 = *(uint64_t **)(v18 + 16848);
          if (v24)
          {
            uint64_t v25 = *v24;
            if (v25)
            {
              uint64_t v26 = 0;
              unsigned int v27 = 1;
              do
              {
                *(void *)(v18 + 8 * v26 + 2984) = v25;
                uint64_t v26 = v27;
                uint64_t v25 = *(void *)(*(void *)(v18 + 16848) + 8 * v27++);
              }
              while (v25);
            }
          }
          log_OutText(v49, (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Memory mapped %s: %lu bytes in %lu chunks", v21, v22, v23, (uint64_t)a3);
          unsigned int inited = UNICORN__mfs_InitData((uint64_t)__dst, (void *)(v18 + 11912), (_DWORD *)(v18 + 256));
          if ((inited & 0x80000000) != 0)
          {
            unsigned int Data = inited;
          }
          else
          {
            unsigned int Data = UNICORN__mfs_LoadData((uint64_t)__dst, (uint64_t)a3, *(_DWORD *)(v18 + 43428), (int32x2_t *)(v18 + 11912), (int32x2_t *)(v18 + 256));
            if ((Data & 0x80000000) == 0)
            {
              *(_WORD *)(v18 + 17962) = *(_DWORD *)(v18 + 11912);
              *(_DWORD *)(v18 + 17964) = *(_DWORD *)(v18 + 6240);
              *(_DWORD *)(v18 + 17134) = 33620481;
              *(unsigned char *)(v18 + 17187) = 1;
              *(void *)(v18 + 17139) = 0x101010101010101;
              *(void *)(v18 + 17147) = 0x101010101010101;
              *(_DWORD *)(v18 + 17157) = 16843009;
              *(unsigned char *)(v18 + 17161) = 1;
              *(_DWORD *)(v18 + 17163) = 16843009;
              *(_DWORD *)(v18 + 17166) = 16843009;
              *(_WORD *)(v18 + 17185) = -1;
              *(unsigned char *)(v18 + 17156) = 8;
              *(unsigned char *)(v18 + 17178) = 9;
              *(void *)(v18 + 17195) = 0x101010101010101;
              *(_WORD *)(v18 + 17208) = 257;
              *(_DWORD *)(v18 + 17204) = 16843009;
              *(void *)&long long v37 = 0x101010101010101;
              *((void *)&v37 + 1) = 0x101010101010101;
              *(_OWORD *)(v18 + 17313) = v37;
              *(_OWORD *)(v18 + 17301) = v37;
              *(_OWORD *)(v18 + 17285) = v37;
              *(_OWORD *)(v18 + 17269) = v37;
              *(_OWORD *)(v18 + 17253) = v37;
              uint64_t v38 = *((void *)&v49 + 1);
              *(_DWORD *)__s1 = 0;
              if ((paramc_ParamGetUInt(*((uint64_t *)&v49 + 1), (uint64_t)"bet5underrunthreshold", (unsigned int *)__s1) & 0x80000000) == 0) {
                *(_DWORD *)(v18 + 6180) = *(_DWORD *)__s1;
              }
              if ((paramc_ParamGetUInt(v38, (uint64_t)"bet5earlyemissionmaxhypotheses", (unsigned int *)__s1) & 0x80000000) == 0) {
                *(_DWORD *)(v18 + 6184) = *(_DWORD *)__s1;
              }
              if ((paramc_ParamGetUInt(v38, (uint64_t)"bet5earlyemissionmaxphonambiguitywindow", (unsigned int *)__s1) & 0x80000000) == 0) {
                *(_DWORD *)(v18 + 6188) = *(_DWORD *)__s1;
              }
            }
          }
        }
        else
        {
          log_OutPublic(v49, (uint64_t)"SELECT_BET5", 71002, (uint64_t)"%s%s", v20, v21, v22, v23, "file");
          unsigned int Data = -2065686524;
        }
      }
      else
      {
        log_OutPublic(v49, (uint64_t)"SELECT_BET5", 71000, 0, v14, v15, v16, v17, v47);
        unsigned int Data = -2065686518;
      }
      if (v75)
      {
        ssftriff_reader_ObjClose(v75, v29, v30, v31, v32, v33, v34, v35);
        float v75 = 0;
      }
      int v45 = Data & 0x7FF01FFF;
      if ((Data & 0x7FF01FFF) == 0xA200014) {
        uint64_t result = 2229280772;
      }
      else {
        uint64_t result = Data;
      }
      if (v45 == 169869332) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v18;
      }
      if (v18)
      {
        if (v45 == 169869332)
        {
          heap_Free(*((void **)&__dst[0] + 1), v18);
          uint64_t v46 = 0;
          uint64_t result = 2229280772;
        }
      }
      *(void *)(a4 + 32) = v46;
    }
  }
  return result;
}

uint64_t ObjcVoiceClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v33 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v33);
  uint64_t v5 = inited;
  if (a3 && (inited & 0x80000000) == 0)
  {
    uint64_t v6 = *(void *)(a3 + 32);
    uint64_t v7 = *(void **)(v6 + 16848);
    if (v7 && *v7)
    {
      uint64_t v8 = 2984;
      do
      {
        *(void *)(v6 + v8) = 0;
        uint64_t v9 = *(void *)(*(void *)(v6 + 16848) + v8 - 2976);
        v8 += 8;
      }
      while (v9);
    }
    uint64_t v10 = *(void *)(v6 + 17752);
    if (v10)
    {
      heap_Free((void *)v33[1], v10);
      *(void *)(v6 + 17752) = 0;
    }
    uselect_FreeRiffStringTable(v33, *(uint64_t **)(v6 + 5296));
    *(void *)(v6 + 5296) = 0;
    uselect_FreeRiffStringTable(v33, *(uint64_t **)(v6 + 17816));
    uselect_FreeRiffStringTable(v33, *(uint64_t **)(v6 + 17808));
    unsigned int v11 = v33;
    int v12 = *(uint64_t **)(v6 + 17720);
    uint64_t v13 = *(uint64_t ***)(v6 + 17728);
    uint64_t v14 = *(uint64_t **)(v6 + 17736);
    if (v12)
    {
      uint64_t v15 = *v12;
      if (*v12)
      {
        int v16 = 0;
        do
        {
          heap_Free((void *)v11[1], v15);
          uint64_t v15 = v12[(unsigned __int16)++v16];
        }
        while (v15);
      }
      heap_Free((void *)v11[1], (uint64_t)v12);
    }
    uint64_t v17 = (_WORD *)(v6 + 42784);
    if (v13)
    {
      uint64_t v18 = *v13;
      if (*v13)
      {
        int v19 = 0;
        uint64_t v20 = v13;
        do
        {
          uint64_t v21 = *v18;
          if (*v18)
          {
            int v22 = 0;
            do
            {
              heap_Free((void *)v11[1], v21);
              ++v22;
              uint64_t v18 = *v20;
              uint64_t v21 = (*v20)[(unsigned __int16)v22];
            }
            while (v21);
          }
          heap_Free((void *)v11[1], (uint64_t)v18);
          uint64_t v20 = &v13[(unsigned __int16)++v19];
          uint64_t v18 = *v20;
        }
        while (*v20);
      }
      heap_Free((void *)v11[1], (uint64_t)v13);
    }
    if (v14)
    {
      uint64_t v23 = *v14;
      if (*v14)
      {
        int v24 = 0;
        do
        {
          heap_Free((void *)v11[1], v23);
          uint64_t v23 = v14[(unsigned __int16)++v24];
        }
        while (v23);
      }
      heap_Free((void *)v11[1], (uint64_t)v14);
    }
    uselect_FreeRiffStringTable(v33, *(uint64_t **)(v6 + 16848));
    uselect_FreeRiffStringTable(v33, *(uint64_t **)(v6 + 16856));
    mfs_DeInitDataAndParam(v33, v6 + 11912, (void *)(v6 + 256));
    uselect_FreeRiffStringTable(v33, *(uint64_t **)(v6 + 42800));
    uint64_t v25 = *(void *)(v6 + 42792);
    if (v25)
    {
      uint64_t v26 = v33;
      if (*v17)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        do
        {
          uint64_t v29 = *(void *)(v6 + 42792);
          uint64_t v30 = *(void *)(v29 + v27);
          if (v30)
          {
            heap_Free((void *)v26[1], v30);
            uint64_t v29 = *(void *)(v6 + 42792);
          }
          uselect_FreeRiffStringTable(v26, *(uint64_t **)(v29 + v27 + 8));
          ++v28;
          v27 += 16;
        }
        while (v28 < (unsigned __int16)*v17);
        uint64_t v25 = *(void *)(v6 + 42792);
      }
      heap_Free((void *)v26[1], v25);
      *(void *)(v6 + 42792) = 0;
      *uint64_t v17 = 0;
    }
    if (*(_WORD *)(v6 + 43360))
    {
      unint64_t v31 = 0;
      do
        ssftriff_reader_ReleaseChunkData(*(void **)(v6 + 42848 + 8 * v31++));
      while (v31 < *(unsigned __int16 *)(v6 + 43360));
    }
    *(_WORD *)(v6 + 43360) = 0;
    *(unsigned char *)uint64_t v6 = 0;
    heap_Free((void *)v33[1], v6);
  }
  return v5;
}

uint64_t select_bet5_GetUSVoice(uint64_t a1, int a2)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return v3 + 14384;
  }
  else {
    return 0;
  }
}

uint64_t select_bet5_GetVParam(uint64_t a1, int a2)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return v3 + 256;
  }
  else {
    return 0;
  }
}

uint64_t select_bet5_GetNNFeatexData(uint64_t a1, int a2)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return v3 + 42784;
  }
  else {
    return 0;
  }
}

uint64_t select_bet5_GetTransWeightRulesDiph(uint64_t a1, int a2, _DWORD *a3)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a3 && v5)
  {
    *a3 = *(_DWORD *)(v5 + 42824);
    return *(void *)(v5 + 42816);
  }
  if (v5) {
    return *(void *)(v5 + 42816);
  }
  return 0;
}

uint64_t select_bet5_GetTransWeightRulesPhon(uint64_t a1, int a2, _DWORD *a3)
{
  if ((int)safeh_HandleCheck(a1, a2, 117, 43432) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a3 && v5)
  {
    *a3 = *(_DWORD *)(v5 + 42840);
    return *(void *)(v5 + 42832);
  }
  if (v5) {
    return *(void *)(v5 + 42832);
  }
  return 0;
}

uint64_t select_bet5_ParseRiff(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7 = a6;
  int v12 = a1;
  unsigned int v404 = 0;
  uint64_t v427 = *MEMORY[0x263EF8340];
  v403 = (unsigned __int16 *)(a2 + 42784);
  v409 = (unsigned __int8 *)(a2 + 16880);
  uint64_t v406 = a2 + 42844;
  int v423 = 0;
  char v422 = 0;
  *(_DWORD *)__src = 0;
  int __dst = (char *)&a5[5 * a4];
  v385 = (void *)(a2 + 5036);
  v395 = (void *)(a2 + 16884);
  v413 = (_DWORD *)(a2 + 11864);
  v414 = (_DWORD *)(a2 + 11824);
  v363 = (void *)(a2 + 8032);
  v364 = (void *)(a2 + 8632);
  v365 = (void *)(a2 + 8512);
  v366 = (void *)(a2 + 8392);
  v367 = (void *)(a2 + 9832);
  v368 = (void *)(a2 + 10552);
  v369 = (void *)(a2 + 10192);
  v370 = (void *)(a2 + 10432);
  v371 = (void *)(a2 + 9712);
  v372 = (void *)(a2 + 9592);
  v373 = (void *)(a2 + 9472);
  v374 = (void *)(a2 + 9352);
  v375 = (void *)(a2 + 9256);
  v376 = (void *)(a2 + 9232);
  v377 = (void *)(a2 + 9112);
  v378 = (void *)(a2 + 8056);
  v381 = (void *)(a2 + 10072);
  v386 = (void *)(a2 + 8272);
  v388 = (void *)(a2 + 7312);
  v391 = (void *)(a2 + 8872);
  v401 = (uint64_t *)(a2 + 5296);
  v405 = (char *)(a2 + 43362);
  v398 = (uint64_t *)(a2 + 42800);
  v397 = (void *)(a2 + 42808);
  v390 = (void *)(a2 + 42832);
  v393 = (void *)(a2 + 42816);
  v399 = (uint64_t *)(a2 + 17816);
  v402 = (uint64_t *)(a2 + 17808);
  v379 = (uint64_t *)(a2 + 16856);
  v380 = (uint64_t *)(a2 + 16848);
  v384 = (uint64_t *)(a2 + 17720);
  v383 = (uint64_t *)(a2 + 17728);
  v382 = (uint64_t *)(a2 + 17736);
  v387 = (unsigned char *)(a2 + 42656);
  v389 = (unsigned char *)(a2 + 16784);
  v392 = (unsigned char *)(a2 + 15757);
  v394 = (unsigned char *)(a2 + 16014);
  v396 = (unsigned char *)(a2 + 15500);
  v400 = (unsigned char *)(a2 + 15243);
  uint64_t v408 = a2 + 11880;
  uint64_t v407 = a2 + 11888;
  __s1 = (char *)(a5 + 5);
  __s = (char *)(a2 + 14986);
  do
  {
    LODWORD(ChunkData) = ssftriff_reader_OpenChunk(a3, (__int32 *)__src, (unsigned int *)&v423, 0);
    if ((ChunkData & 0x80000000) != 0) {
      break;
    }
    cstdlib_strcpy(__dst, __src);
    if (a4 == 1)
    {
      if (!cstdlib_strcmp(__src, "VSTG"))
      {
        LODWORD(v419) = 0;
        *(void *)v424 = 0;
        if (v7)
        {
          *(void *)v424 = v7 + ssftriff_reader_GetPosition(a3) - a7;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, v424);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        LOBYTE(v425[0]) = 0;
        __s2[0] = 0;
        unsigned int v34 = v423;
        if (v423)
        {
          unsigned int v35 = 0;
          do
          {
            LODWORD(v419) = 1024;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v424, v34, v35, __s2, (unsigned int *)&v419);
            if ((ChunkData & 0x80000000) == 0 && v35 < v423)
            {
              v35 += v419;
              LODWORD(v419) = 1024;
              LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v424, v423, v35, v425, (unsigned int *)&v419);
            }
            if ((ChunkData & 0x80000000) != 0) {
              break;
            }
            int v36 = (int)v419;
            if (!cstdlib_strcmp(__s2, "MEANDURINSECS"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v37 = v37;
              _DWORD *v414 = LODWORD(v37);
            }
            if (!cstdlib_strcmp(__s2, "STDEVDURINSECS"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v38 = v38;
              *(_DWORD *)(a2 + 11828) = LODWORD(v38);
            }
            if (!cstdlib_strcmp(__s2, "MEANDURINSECSLOG"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v39 = v39;
              *(_DWORD *)(a2 + 11832) = LODWORD(v39);
            }
            if (!cstdlib_strcmp(__s2, "STDEVDURINSECSLOG"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v40 = v40;
              *(_DWORD *)(a2 + 11836) = LODWORD(v40);
            }
            if (!cstdlib_strcmp(__s2, "MEANLEFTPITCH"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v41 = v41;
              *(_DWORD *)(a2 + 11840) = LODWORD(v41);
            }
            if (!cstdlib_strcmp(__s2, "STDEVLEFTPITCH"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v42 = v42;
              *(_DWORD *)(a2 + 11844) = LODWORD(v42);
            }
            if (!cstdlib_strcmp(__s2, "MEANRIGHTPITCH"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v43 = v43;
              *(_DWORD *)(a2 + 11848) = LODWORD(v43);
            }
            if (!cstdlib_strcmp(__s2, "STDEVRIGHTPITCH"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v44 = v44;
              *(_DWORD *)(a2 + 11852) = LODWORD(v44);
            }
            if (!cstdlib_strcmp(__s2, "MEANSLOPEPITCH"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v45 = v45;
              *(_DWORD *)(a2 + 11856) = LODWORD(v45);
            }
            if (!cstdlib_strcmp(__s2, "STDEVSLOPEPITCH"))
            {
              cstdlib_atof((unsigned __int8 *)v425);
              *(float *)&double v46 = v46;
              *(_DWORD *)(a2 + 11860) = LODWORD(v46);
            }
            v35 += v36;
            unsigned int v34 = v423;
          }
          while (v35 < v423);
        }
        goto LABEL_818;
      }
      if (!cstdlib_strcmp(__src, "VSTC"))
      {
        *(void *)__s2 = 0;
        if (v7)
        {
          *(void *)__s2 = v7 + ssftriff_reader_GetPosition(a3) - a7;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        if (v423 < 4) {
          LODWORD(ChunkData) = -2065686524;
        }
        if ((ChunkData & 0x80000000) == 0)
        {
          cstdlib_memcpy(v413, *(const void **)__s2, 4uLL);
          *(void *)__s2 += 4;
          LODWORD(ChunkData) = -2065686524;
          if (v423 >= 4 * (unint64_t)(*v413 + 1))
          {
            LODWORD(ChunkData) = StatValues_AllocMemoryForClusterCount((uint64_t)v12, (uint64_t)v414);
            if ((ChunkData & 0x80000000) == 0)
            {
              if (*v413)
              {
                uint64_t v66 = 0;
                unint64_t v67 = 0;
                long long v68 = *(const void **)__s2;
                do
                {
                  cstdlib_memcpy((void *)(*(void *)(a2 + 11872) + v66), v68, 4uLL);
                  long long v68 = (const void *)(*(void *)__s2 + 4);
                  *(void *)__s2 += 4;
                  ++v67;
                  v66 += 4;
                }
                while (v67 < *(unsigned int *)(a2 + 11864));
              }
            }
          }
        }
        goto LABEL_818;
      }
      if (!cstdlib_strcmp(__src, "VSC1") || !cstdlib_strcmp(__src, "VSC2"))
      {
        *(void *)__s2 = 0;
        if (v7)
        {
          *(void *)__s2 = v7 + ssftriff_reader_GetPosition(a3) - a7;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        uint64_t v48 = *v413;
        if (v48)
        {
          int v49 = 0;
          long long v50 = *(int **)(a2 + 11872);
          do
          {
            int v51 = *v50++;
            v49 += 4 * v51 + 4;
            --v48;
          }
          while (v48);
        }
        else
        {
          int v49 = 0;
        }
        if (v423 != v49) {
          LODWORD(ChunkData) = -2065686524;
        }
        if ((ChunkData & 0x80000000) == 0)
        {
          int v52 = cstdlib_strcmp(__src, "VSC1");
          uint64_t v53 = v52 ? 11888 : 11880;
          long long v54 = (uint64_t *)(v52 ? v407 : v408);
          LODWORD(ChunkData) = StatValues_AllocMemoryForClusterStatValues((uint64_t)v12, v54, *(_DWORD *)(a2 + 11864), *(void *)(a2 + 11872));
          if ((ChunkData & 0x80000000) == 0)
          {
            unint64_t v55 = *v413;
            if (v55)
            {
              for (unint64_t i = 0; i < v55; ++i)
              {
                int v57 = *(_DWORD *)(*(void *)(a2 + 11872) + 4 * i);
                BOOL v58 = __CFADD__(v57, 1);
                unsigned int v59 = v57 + 1;
                if (!v58)
                {
                  uint64_t v60 = 0;
                  long long v61 = *(const void **)__s2;
                  uint64_t v62 = 4 * v59;
                  do
                  {
                    cstdlib_memcpy((void *)(*(void *)(*(void *)(a2 + v53) + 8 * i) + v60), v61, 4uLL);
                    long long v61 = (const void *)(*(void *)__s2 + 4);
                    *(void *)__s2 += 4;
                    v60 += 4;
                  }
                  while (v62 != v60);
                  unint64_t v55 = *v413;
                  uint64_t v7 = a6;
                  int v12 = a1;
                }
              }
            }
          }
        }
        goto LABEL_818;
      }
      if (!cstdlib_strcmp(a5, "FEEX"))
      {
        if (!cstdlib_strcmp(__src, "VCAT"))
        {
          *(void *)__s2 = 0;
          if (v7)
          {
            *(void *)__s2 = v7 + ssftriff_reader_GetPosition(a3) - a7;
          }
          else
          {
            uint64_t v250 = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((v250 & 0x80000000) != 0) {
              return v250;
            }
          }
LABEL_756:
          uint64_t v26 = v12;
          uint64_t v27 = a2;
          uint64_t v28 = a3;
          uint64_t v29 = 2;
LABEL_83:
          int RiffStringTable = select_bet5_ParseRiff(v26, v27, v28, v29, a5, 0, 0);
          goto LABEL_748;
        }
        if (!cstdlib_strcmp(__src, "VBOP"))
        {
          *(void *)__s2 = 0;
          if (v7)
          {
            uint64_t v258 = (const void *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
            *(void *)__s2 = v258;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
            uint64_t v258 = *(const void **)__s2;
          }
          if (v423 >= 0xF8) {
            size_t v282 = 248;
          }
          else {
            size_t v282 = v423;
          }
          signed int v283 = v395;
LABEL_792:
          cstdlib_memcpy(v283, v258, v282);
          goto LABEL_818;
        }
        if (!cstdlib_strcmp(__src, "PRE3"))
        {
          LOWORD(v425[0]) = 0;
          *(void *)__s2 = 0;
          if (v7)
          {
            *(void *)__s2 = v7 + ssftriff_reader_GetPosition(a3) - a7;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
          }
          if (v423 >= 2)
          {
            unsigned __int16 v290 = 0;
            do
            {
              cstdlib_memcpy(v425, (const void *)(*(void *)__s2 + 2 * v290), 2uLL);
              if (LOWORD(v425[0]) < 0x47u) {
                *(_DWORD *)(a2 + 4 * LOWORD(v425[0]) + 17432) = 1;
              }
              else {
                log_OutText(v12[4], (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Unknown preselection feature: %u for %s", v291, v292, v293, LOWORD(v425[0]));
              }
              ++v290;
            }
            while (v423 >> 1 > v290);
          }
          goto LABEL_818;
        }
        if (!cstdlib_strcmp(__src, "TRA3"))
        {
          LOWORD(v425[0]) = 0;
          *(void *)__s2 = 0;
          if (v7)
          {
            *(void *)__s2 = v7 + ssftriff_reader_GetPosition(a3) - a7;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
          }
          if (v423 >= 2)
          {
            unsigned __int16 v305 = 0;
            do
            {
              cstdlib_memcpy(v425, (const void *)(*(void *)__s2 + 2 * v305), 2uLL);
              if (LOWORD(v425[0]) < 8u) {
                *(_DWORD *)(a2 + 4 * LOWORD(v425[0]) + 17760) = 1;
              }
              else {
                log_OutText(v12[4], (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Unknown transition feature: %u for %s", v306, v307, v308, LOWORD(v425[0]));
              }
              ++v305;
            }
            while (v423 >> 1 > v305);
          }
          goto LABEL_818;
        }
        if (!cstdlib_strcmp(__src, "TRAF"))
        {
          LODWORD(v425[0]) = 0;
          *(void *)__s2 = 0;
          if (v7)
          {
            int v289 = (const void *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
            *(void *)__s2 = v289;
          }
          else
          {
            uint64_t v250 = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((v250 & 0x80000000) != 0) {
              return v250;
            }
            int v289 = *(const void **)__s2;
          }
          cstdlib_memcpy(v425, v289, 4uLL);
          *((_WORD *)v409 + 432) = v425[0];
          ssftriff_reader_Seek(a3, 4u, 1);
          uint64_t v321 = heap_Calloc((void *)v12[1], 12, *((unsigned __int16 *)v409 + 432));
          *(void *)(a2 + 17752) = v321;
          if (!v321) {
            return 2229280778;
          }
LABEL_871:
          int v238 = select_bet5_ParseRiff(v12, a2, a3, 2, a5, 0, 0);
LABEL_712:
          LODWORD(ChunkData) = v238;
          goto LABEL_818;
        }
        if (!cstdlib_strcmp(__src, "PHM3"))
        {
          *(void *)__s2 = 0;
          if (v7)
          {
            uint64_t v258 = (const void *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
            *(void *)__s2 = v258;
          }
          else
          {
            uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((ChunkData & 0x80000000) != 0) {
              return ChunkData;
            }
            uint64_t v258 = *(const void **)__s2;
          }
          if (v423 >= 0x100) {
            size_t v282 = 256;
          }
          else {
            size_t v282 = v423;
          }
          signed int v283 = v385;
          goto LABEL_792;
        }
        if (!cstdlib_strcmp(__src, "CTXR")) {
          goto LABEL_756;
        }
        if (!cstdlib_strcmp(__src, "NNFE")) {
          goto LABEL_871;
        }
        goto LABEL_815;
      }
      if (cstdlib_strcmp(a5, "STM3"))
      {
LABEL_815:
        cstdlib_strcpy(__s2, "");
        int v294 = 0;
        do
        {
          cstdlib_strcat(__s2, "/");
          cstdlib_strcat(__s2, &a5[5 * (unsigned __int16)v294++]);
        }
        while (a4 >= (unsigned __int16)v294);
        log_OutText(v12[4], (uint64_t)"SELECT_BET5", 3, 0, (uint64_t)"Unknown data: %s for %s", v295, v296, v297, (uint64_t)__s2);
        goto LABEL_818;
      }
      *(_DWORD *)v424 = 0;
      uint64_t v16 = *(int *)(a2 + 388);
      if (cstdlib_strcmp(__src, "STC3"))
      {
        if (cstdlib_strcmp(__src, "TRE3"))
        {
          if (cstdlib_strcmp(__src, "PDF3"))
          {
            if (cstdlib_strcmp(__src, "WIN3"))
            {
              if (cstdlib_strcmp(__src, "STC3") && cstdlib_strcmp(__src, "STC4"))
              {
                if (cstdlib_strcmp(__src, "STW4"))
                {
                  if (cstdlib_strcmp(__src, "UNP4"))
                  {
                    if (cstdlib_strcmp(__src, "PCI4"))
                    {
                      if (cstdlib_strcmp(__src, "JCI4"))
                      {
                        if (cstdlib_strcmp(__src, "JCS4"))
                        {
                          if (cstdlib_strcmp(__src, "JTYP"))
                          {
                            if (cstdlib_strcmp(__src, "JFSM"))
                            {
                              if (cstdlib_strcmp(__src, "FSMR"))
                              {
                                if (cstdlib_strcmp(__src, "JCBK")) {
                                  goto LABEL_226;
                                }
                                int v17 = v423;
                                uint64_t v18 = a2;
                                uint64_t v19 = a3;
                                unsigned int v20 = 24;
                              }
                              else
                              {
                                int v17 = v423;
                                uint64_t v18 = a2;
                                uint64_t v19 = a3;
                                unsigned int v20 = 16;
                              }
                            }
                            else
                            {
                              int v17 = v423;
                              uint64_t v18 = a2;
                              uint64_t v19 = a3;
                              unsigned int v20 = 9;
                            }
                          }
                          else
                          {
                            int v17 = v423;
                            uint64_t v18 = a2;
                            uint64_t v19 = a3;
                            unsigned int v20 = 14;
                          }
                        }
                        else
                        {
                          int v17 = v423;
                          uint64_t v18 = a2;
                          uint64_t v19 = a3;
                          unsigned int v20 = 7;
                        }
                      }
                      else
                      {
                        int v17 = v423;
                        uint64_t v18 = a2;
                        uint64_t v19 = a3;
                        unsigned int v20 = 6;
                      }
                      Mfsunsigned int Data = select_bet5_LoadMfsData(v18, v19, v20, v16, v17, v7, a7, 0);
                    }
                    else
                    {
                      Mfsunsigned int Data = select_bet5_ParseRiff(v12, a2, a3, 2, a5, v7, a7);
                    }
                    goto LABEL_812;
                  }
                  if (v7)
                  {
                    int v327 = v423;
                    int Position = ssftriff_reader_GetPosition(a3);
                    LODWORD(ChunkData) = 0;
                    uint64_t v329 = a2 + 24 * (int)v16;
                    *(void *)(v329 + 7432) = v7 + Position - a7;
                    *(_DWORD *)(v329 + 7440) = v327;
                  }
                  else
                  {
                    LODWORD(ChunkData) = -2065686527;
                  }
                }
                else
                {
                  *(void *)__s2 = 0;
                  if (v7)
                  {
                    v324 = (const void *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
                    *(void *)__s2 = v324;
                  }
                  else
                  {
                    uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
                    if ((ChunkData & 0x80000000) != 0) {
                      return ChunkData;
                    }
                    v324 = *(const void **)__s2;
                  }
                  uint64_t v332 = a2 + 4 * v16;
                  cstdlib_memcpy((void *)(v332 + 5700), v324, 4uLL);
                  *(void *)__s2 += 4;
                  cstdlib_memcpy((void *)(v332 + 5720), *(const void **)__s2, 4uLL);
                }
              }
              else
              {
                LODWORD(v419) = 0;
                v425[0] = 0;
                if (v7)
                {
                  BOOL v286 = (void *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
                  v425[0] = v286;
                }
                else
                {
                  uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, v425);
                  if ((ChunkData & 0x80000000) != 0) {
                    return ChunkData;
                  }
                  BOOL v286 = v425[0];
                }
                uint64_t v316 = (int *)(a2 + 4 * v16);
                cstdlib_memcpy(v316 + 1420, v286, 4uLL);
                v425[0] = (char *)v425[0] + 4;
                cstdlib_memcpy(v316 + 1435, v425[0], 4uLL);
                v425[0] = (char *)v425[0] + 4;
                cstdlib_memcpy(v316 + 1446, v425[0], 4uLL);
                v425[0] = (char *)v425[0] + 4;
                cstdlib_memcpy(v316 + 1576, v425[0], 4uLL);
                v425[0] = (char *)v425[0] + 4;
                cstdlib_memcpy(v316 + 1566, v425[0], 4uLL);
                v425[0] = (char *)v425[0] + 4;
                cstdlib_memcpy(v316 + 1571, v425[0], 4uLL);
                v425[0] = (char *)v425[0] + 4;
                cstdlib_memcpy(v316 + 1584, v425[0], 4uLL);
                v425[0] = (char *)v425[0] + 4;
                cstdlib_memcpy(v316 + 1589, v425[0], 4uLL);
                v425[0] = (char *)v425[0] + 4;
                v362 = v316 + 115;
                if (v316[115] >= 1)
                {
                  uint64_t v317 = v16;
                  uint64_t v318 = 0;
                  int v319 = (void *)(a2 + 8 * v317 + 1464);
                  unsigned int v320 = *(_DWORD *)v424;
                  do
                  {
                    __s2[0] = 0;
                    LODWORD(v419) = 256;
                    LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, (uint64_t)v425[0], v423, v320, __s2, (unsigned int *)&v419);
                    if ((ChunkData & 0x80000000) != 0) {
                      break;
                    }
                    *(void *)(*v319 + 8 * v318) = UNICORN__heap_StrDup((void *)v12[1], __s2);
                    if (!*(void *)(*v319 + 8 * v318)) {
                      goto LABEL_867;
                    }
                    unsigned int v320 = *(_DWORD *)v424 + v419;
                    *(_DWORD *)v424 += v419;
                    ++v318;
                  }
                  while (v318 < *v362);
                }
              }
              goto LABEL_813;
            }
            uint64_t v287 = a2 + 256 + 4 * v16;
            int v288 = *(_DWORD *)(v287 + 224);
            uint64_t v261 = a2 + 256 + 120 * (int)v16 + 24 * v288 + 2008;
            *(_DWORD *)(v287 + 224) = v288 + 1;
          }
          else
          {
            v425[0] = 0;
            if (v7)
            {
              uint64_t v265 = (void *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
              v425[0] = v265;
            }
            else
            {
              uint64_t v250 = ssftriff_reader_GetChunkData(a3, v423, v425);
              if ((v250 & 0x80000000) != 0) {
                return v250;
              }
              uint64_t v265 = v425[0];
            }
            *(_DWORD *)v424 = 256;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, (uint64_t)v265, v423, 0, __s2, (unsigned int *)v424);
            if ((ChunkData & 0x80000000) != 0)
            {
              uint64_t v261 = 0;
            }
            else
            {
              unsigned int v300 = UNICORN__heap_StrDup((void *)v12[1], __s2);
              uint64_t v301 = a2 + 256 + 4 * v16;
              uint64_t v304 = *(int *)(v301 + 244);
              int v302 = (_DWORD *)(v301 + 244);
              int v303 = v304;
              *(void *)(a2 + 256 + 40 * (int)v16 + 8 * v304 + 728) = v300;
              if ((v424[0] & 3) != 0) {
                *(_DWORD *)v424 -= *(_DWORD *)v424 | 0xFFFFFFFC;
              }
              uint64_t v261 = a2 + 120 * (int)v16 + 24 * v303 + 1664;
              *int v302 = v303 + 1;
            }
          }
        }
        else
        {
          uint64_t v261 = a2 + 24 * (int)v16 + 1544;
        }
        int v81 = 1;
        if ((ChunkData & 0x80000000) != 0 || !v261) {
          goto LABEL_814;
        }
        *(void *)__s2 = 0;
        if (v7)
        {
          int v309 = ssftriff_reader_GetPosition(a3);
          int v310 = *(_DWORD *)v424;
          *(void *)(v261 + 8) = v7 + v309 - a7 + *(unsigned int *)v424;
          int v311 = v423 - v310;
        }
        else
        {
          unsigned int v312 = *(unsigned __int16 *)(v406 + 516);
          LODWORD(ChunkData) = -2065686524;
          if (v312 > 0x3F) {
            goto LABEL_813;
          }
          if (*(_DWORD *)v424)
          {
            ssftriff_reader_Seek(a3, *(unsigned int *)v424, 1);
            unsigned int v312 = *(unsigned __int16 *)(v406 + 516);
          }
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v312 + 42848), __s2);
          if ((ChunkData & 0x80000000) != 0) {
            goto LABEL_813;
          }
          ++*(_WORD *)(v406 + 516);
          int v313 = v423;
          *(_DWORD *)v406 += v423;
          *(void *)(v261 + 8) = *(void *)__s2;
          int v311 = v313 - *(_DWORD *)v424;
        }
        *(_DWORD *)(v261 + 16) = v311;
        goto LABEL_813;
      }
      LODWORD(v419) = 0;
      v425[0] = 0;
      if (v7)
      {
        int v257 = (char *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
        v425[0] = v257;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, v425);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
        int v257 = (char *)v425[0];
      }
      int v266 = (int *)(a2 + 4 * v16);
      cstdlib_memcpy(v266 + 110, &v257[*(unsigned int *)v424], 4uLL);
      *(_DWORD *)v424 += 4;
      v361 = v266 + 115;
      cstdlib_memcpy(v266 + 115, (char *)v425[0] + *(unsigned int *)v424, 4uLL);
      int v267 = *(_DWORD *)v424;
      *(_DWORD *)v424 += 4;
      int v268 = (char *)v425[0];
      v266[351] = *((unsigned char *)v425[0] + *(unsigned int *)v424) != 0;
      uint64_t v269 = (v267 + 5);
      *(_DWORD *)v424 = v269;
      cstdlib_memcpy(v266 + 346, &v268[v269], 4uLL);
      unsigned int v270 = *(_DWORD *)v424 + 4;
      *(_DWORD *)v424 += 4;
      uint64_t v271 = v266[115];
      if ((int)v271 >= 1)
      {
        uint64_t v272 = heap_Calloc((void *)v12[1], v271, 8);
        uint64_t v273 = v16;
        v274 = v12;
        uint64_t v359 = v273;
        uint64_t v275 = a2 + 8 * v273;
        *(void *)(v275 + 1504) = v272;
        if (!v272) {
          LODWORD(ChunkData) = -2065686518;
        }
        if ((ChunkData & 0x80000000) == 0)
        {
          uint64_t v276 = heap_Calloc((void *)v274[1], *v361, 8);
          *(void *)(v275 + 1424) = v276;
          if (v276)
          {
            uint64_t v277 = heap_Calloc((void *)v274[1], *v361, 8);
            *(void *)(a2 + 8 * v359 + 1464) = v277;
            int v12 = v274;
            if (!v277) {
              goto LABEL_867;
            }
            unsigned int v270 = *(_DWORD *)v424;
            uint64_t v16 = v359;
            goto LABEL_776;
          }
          LODWORD(ChunkData) = -2065686518;
        }
        int v12 = v274;
        goto LABEL_813;
      }
LABEL_776:
      __s2[0] = 0;
      LODWORD(v419) = 256;
      LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, (uint64_t)v425[0], v423, v270, __s2, (unsigned int *)&v419);
      if ((ChunkData & 0x80000000) == 0)
      {
        unsigned int v278 = UNICORN__heap_StrDup((void *)v12[1], __s2);
        int v279 = (void *)(a2 + 8 * v16);
        v279[50] = v278;
        *(_DWORD *)v424 += v419;
        if (!v278) {
          goto LABEL_867;
        }
        if (*v361 >= 1)
        {
          uint64_t v280 = 0;
          int v281 = v279 + 188;
          v360 = v279 + 178;
          while (1)
          {
            __s2[0] = 0;
            LODWORD(v419) = 256;
            Mfsunsigned int Data = ssftriff_reader_ReadStringZ(a3, (uint64_t)v425[0], v423, *(unsigned int *)v424, __s2, (unsigned int *)&v419);
            if (MfsData < 0) {
              goto LABEL_812;
            }
            *(void *)(*v281 + 8 * v280) = UNICORN__heap_StrDup((void *)v12[1], __s2);
            if (!*(void *)(*v281 + 8 * v280)) {
              goto LABEL_867;
            }
            *(_DWORD *)v424 += v419;
            __s2[0] = 0;
            LODWORD(v419) = 256;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, (uint64_t)v425[0], v423, *(unsigned int *)v424, __s2, (unsigned int *)&v419);
            if ((ChunkData & 0x80000000) == 0)
            {
              *(void *)(*v360 + 8 * v280) = UNICORN__heap_StrDup((void *)v12[1], __s2);
              if (!*(void *)(*v360 + 8 * v280)) {
                goto LABEL_867;
              }
              *(_DWORD *)v424 += v419;
              if (++v280 < *v361) {
                continue;
              }
            }
            goto LABEL_813;
          }
        }
      }
      goto LABEL_813;
    }
    if (a4)
    {
      if (!cstdlib_strcmp(a5, "FEEX") && !cstdlib_strcmp(__s1, "VCAT"))
      {
        *(void *)__s2 = 0;
        if (v7)
        {
          *(void *)__s2 = v7 + ssftriff_reader_GetPosition(a3) - a7;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
        }
        if (!cstdlib_strcmp(__src, "ALPH"))
        {
          LODWORD(v425[0]) = 257;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)__s2, v423, 0, __s, (unsigned int *)v425);
          if ((ChunkData & 0x80000000) == 0)
          {
            *(_WORD *)v409 = 255;
            if (cstdlib_strlen(__s))
            {
              size_t v74 = 0;
              int v75 = 0;
              do
              {
                float v76 = (unsigned __int8 *)(a2 + v74 + 14986);
                unsigned int v77 = *v76;
                if (v77 < *v409)
                {
                  unsigned __int8 *v409 = v77;
                  unsigned int v77 = *v76;
                }
                if (v77 > v409[1])
                {
                  v409[1] = v77;
                  unsigned int v77 = *v76;
                }
                *(unsigned char *)(a2 + v77 + 16528) = v75;
                size_t v74 = (v75 + 1);
                size_t v78 = cstdlib_strlen(__s);
                int v75 = v74;
              }
              while (v78 > v74);
            }
          }
          goto LABEL_813;
        }
        if (cstdlib_strcmp(__src, "VOIC"))
        {
          if (cstdlib_strcmp(__src, "COVO"))
          {
            if (cstdlib_strcmp(__src, "SAFE"))
            {
              if (cstdlib_strcmp(__src, "PLOS"))
              {
                if (cstdlib_strcmp(__src, "DIFF"))
                {
                  if (cstdlib_strcmp(__src, "NUCL"))
                  {
                    if (cstdlib_strcmp(__src, "GENF"))
                    {
                      if (cstdlib_strcmp(__src, "TAGA"))
                      {
                        if (cstdlib_strcmp(__src, "BTOA")) {
                          goto LABEL_226;
                        }
                        long long v69 = *(char **)__s2;
                        int v70 = v423;
                        uint64_t v71 = (uint64_t)v12;
                        uint64_t v72 = a3;
                        uint64_t v73 = v379;
                      }
                      else
                      {
                        long long v69 = *(char **)__s2;
                        int v70 = v423;
                        uint64_t v71 = (uint64_t)v12;
                        uint64_t v72 = a3;
                        uint64_t v73 = v380;
                      }
                      goto LABEL_716;
                    }
                    Mfsunsigned int Data = select_bet5_LoadRiffGenericFeatureMap((uint64_t)v12, a3, *(char **)__s2, v423, v384, v383, v382);
LABEL_812:
                    LODWORD(ChunkData) = MfsData;
                    goto LABEL_813;
                  }
                  LODWORD(v425[0]) = 128;
                  int v234 = *(const void **)__s2;
                  unsigned int v235 = v423;
                  uint64_t v236 = a3;
                  unsigned int v237 = v387;
                }
                else
                {
                  LODWORD(v425[0]) = 64;
                  int v234 = *(const void **)__s2;
                  unsigned int v235 = v423;
                  uint64_t v236 = a3;
                  unsigned int v237 = v389;
                }
              }
              else
              {
                LODWORD(v425[0]) = 257;
                int v234 = *(const void **)__s2;
                unsigned int v235 = v423;
                uint64_t v236 = a3;
                unsigned int v237 = v392;
              }
            }
            else
            {
              LODWORD(v425[0]) = 257;
              int v234 = *(const void **)__s2;
              unsigned int v235 = v423;
              uint64_t v236 = a3;
              unsigned int v237 = v394;
            }
          }
          else
          {
            LODWORD(v425[0]) = 257;
            int v234 = *(const void **)__s2;
            unsigned int v235 = v423;
            uint64_t v236 = a3;
            unsigned int v237 = v396;
          }
        }
        else
        {
          LODWORD(v425[0]) = 257;
          int v234 = *(const void **)__s2;
          unsigned int v235 = v423;
          uint64_t v236 = a3;
          unsigned int v237 = v400;
        }
        Mfsunsigned int Data = ssftriff_reader_ReadStringZ(v236, (uint64_t)v234, v235, 0, v237, (unsigned int *)v425);
        goto LABEL_812;
      }
      if (!cstdlib_strcmp(a5, "FEEX") && !cstdlib_strcmp(__s1, "TRAF") && !cstdlib_strcmp(__src, "FEAT"))
      {
        LOWORD(v425[0]) = 0;
        *(void *)__s2 = 0;
        if (v7)
        {
          float v79 = (const void *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
          *(void *)__s2 = v79;
        }
        else
        {
          uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
          if ((ChunkData & 0x80000000) != 0) {
            return ChunkData;
          }
          float v79 = *(const void **)__s2;
        }
        cstdlib_memcpy(v425, v79, 2uLL);
        int v245 = (const void *)(*(void *)__s2 + 2);
        *(void *)__s2 += 2;
        int v246 = LOWORD(v425[0]);
        if (LOWORD(v425[0]) >= 8u)
        {
          log_OutPublic(v12[4], (uint64_t)"SELECT_BET5", 58010, (uint64_t)"%s%hu", v241, v242, v243, v244, "feature");
          return 2229280772;
        }
        *(_DWORD *)(a2 + 4 * LOWORD(v425[0]) + 17760) = v404;
        unsigned int v247 = (_DWORD *)(*(void *)(a2 + 17752) + 12 * v404);
        *unsigned int v247 = v246;
        cstdlib_memcpy(v247 + 2, v245, 2uLL);
        *(void *)__s2 += 2;
        cstdlib_memcpy((void *)(*(void *)(a2 + 17752) + 12 * v404++ + 4), *(const void **)__s2, 4uLL);
        goto LABEL_818;
      }
      if (!cstdlib_strcmp(a5, "FEEX") && !cstdlib_strcmp(__s1, "CTXR"))
      {
        if (!cstdlib_strcmp(__src, "RULF"))
        {
          *(void *)__s2 = 0;
          if (v7)
          {
            float v80 = (char *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
            *(void *)__s2 = v80;
          }
          else
          {
            uint64_t v250 = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((v250 & 0x80000000) != 0) {
              return v250;
            }
            float v80 = *(char **)__s2;
          }
          int v251 = v423;
          uint64_t v252 = (uint64_t)v12;
          uint64_t v253 = a3;
          int v254 = v402;
          goto LABEL_747;
        }
        if (!cstdlib_strcmp(__src, "RULT"))
        {
          *(void *)__s2 = 0;
          if (v7)
          {
            float v80 = (char *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
            *(void *)__s2 = v80;
          }
          else
          {
            uint64_t v250 = ssftriff_reader_GetChunkData(a3, v423, __s2);
            if ((v250 & 0x80000000) != 0) {
              return v250;
            }
            float v80 = *(char **)__s2;
          }
          int v251 = v423;
          uint64_t v252 = (uint64_t)v12;
          uint64_t v253 = a3;
          int v254 = v399;
LABEL_747:
          int RiffStringTable = select_bet5_LoadRiffStringTable(v252, v253, v80, v251, v254);
LABEL_748:
          LODWORD(ChunkData) = RiffStringTable;
          goto LABEL_818;
        }
        if (!cstdlib_strcmp(__src, "TRD4"))
        {
          unint64_t v248 = *(unsigned __int16 *)(v406 + 516);
          if (v248 <= 0x3F)
          {
            LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v248 + 42848), v393);
            if ((ChunkData & 0x80000000) == 0)
            {
              ++*(_WORD *)(v406 + 516);
              unsigned int v249 = v423;
              *(_DWORD *)v406 += v423;
              *((_DWORD *)v403 + 10) = v249 / 0xC;
            }
            goto LABEL_818;
          }
LABEL_914:
          LODWORD(ChunkData) = -2065686524;
          goto LABEL_818;
        }
        if (!cstdlib_strcmp(__src, "TRP4"))
        {
          unint64_t v47 = *(unsigned __int16 *)(v406 + 516);
          if (v47 <= 0x3F)
          {
            LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v47 + 42848), v390);
            if ((ChunkData & 0x80000000) == 0)
            {
              ++*(_WORD *)(v406 + 516);
              unsigned int v264 = v423;
              *(_DWORD *)v406 += v423;
              *((_DWORD *)v403 + 14) = v264 / 0xC;
            }
            goto LABEL_818;
          }
LABEL_133:
          LODWORD(ChunkData) = -2065686524;
          goto LABEL_818;
        }
        goto LABEL_815;
      }
      if (cstdlib_strcmp(a5, "FEEX") || cstdlib_strcmp(__s1, "NNFE"))
      {
        if (!cstdlib_strcmp(a5, "STM3") && !cstdlib_strcmp(__s1, "PCI4"))
        {
          int v21 = *(_DWORD *)(a2 + 388);
          if (!cstdlib_strcmp(__src, "PCII"))
          {
            int v22 = v423;
            uint64_t v23 = a2;
            uint64_t v24 = a3;
            unsigned int v25 = 4;
            goto LABEL_711;
          }
          if (!cstdlib_strcmp(__src, "PCIL"))
          {
            int v22 = v423;
            uint64_t v23 = a2;
            uint64_t v24 = a3;
            unsigned int v25 = 5;
LABEL_711:
            int v238 = select_bet5_LoadMfsData(v23, v24, v25, v21, v22, v7, a7, 0);
            goto LABEL_712;
          }
        }
        goto LABEL_815;
      }
      *(void *)__s2 = 0;
      if (v7)
      {
        *(void *)__s2 = v7 + ssftriff_reader_GetPosition(a3) - a7;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, __s2);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      if (cstdlib_strcmp(__src, "NNLT"))
      {
        if (cstdlib_strcmp(__src, "NNUF"))
        {
LABEL_226:
          int v81 = 0;
LABEL_814:
          if (v81) {
            goto LABEL_818;
          }
          goto LABEL_815;
        }
        cstdlib_memcpy(v397, *(const void **)__s2, 2uLL);
        long long v69 = *(char **)__s2;
        int v70 = v423;
        uint64_t v71 = (uint64_t)v12;
        uint64_t v72 = a3;
        uint64_t v73 = v398;
LABEL_716:
        Mfsunsigned int Data = select_bet5_LoadRiffStringTable(v71, v72, v69, v70, v73);
        goto LABEL_812;
      }
      unsigned int v82 = *v403;
      LODWORD(ChunkData) = -2065686524;
      if (v82 <= 0x10)
      {
        uint64_t v83 = *(char **)__s2;
        unsigned int v84 = v423;
        if (*((void *)v403 + 1))
        {
LABEL_231:
          unsigned __int16 *v403 = v82 + 1;
          LODWORD(v425[0]) = 0;
          int StringW = ssftriff_reader_ReadStringW(a3, (uint64_t)v83, v84, 0, 0, v425);
          if ((StringW & 0x80000000) == 0 || (LODWORD(ChunkData) = StringW, (StringW & 0x1FFF) == 9))
          {
            unint64_t v87 = (unsigned char *)heap_Alloc(v12[1], LODWORD(v425[0]));
            *(void *)(*((void *)v403 + 1) + 16 * *v403 - 16) = v87;
            if (v87)
            {
              Mfsunsigned int Data = ssftriff_reader_ReadStringW(a3, (uint64_t)v83, v84, 0, v87, v425);
              if ((MfsData & 0x80000000) == 0)
              {
                int v70 = v84 - (LODWORD(v425[0]) + 1);
                long long v69 = &v83[LODWORD(v425[0]) - 1 + 2];
                uint64_t v73 = (uint64_t *)(*((void *)v403 + 1) + 16 * *v403 - 8);
                uint64_t v71 = (uint64_t)v12;
                uint64_t v72 = a3;
                goto LABEL_716;
              }
              goto LABEL_812;
            }
            goto LABEL_867;
          }
        }
        else
        {
          uint64_t v85 = heap_Calloc((void *)v12[1], 18, 16);
          *((void *)v403 + 1) = v85;
          if (v85)
          {
            LOWORD(v82) = *v403;
            goto LABEL_231;
          }
LABEL_867:
          LODWORD(ChunkData) = -2065686518;
        }
      }
LABEL_813:
      int v81 = 1;
      goto LABEL_814;
    }
    if (!cstdlib_strcmp(__src, "VINF"))
    {
      LODWORD(v419) = 0;
      *(void *)v424 = 0;
      if (v7)
      {
        *(void *)v424 = v7 + ssftriff_reader_GetPosition(a3) - a7;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, v424);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      unsigned int v31 = v423;
      if (!v423) {
        goto LABEL_818;
      }
      unsigned int v32 = 0;
      while (1)
      {
        LOBYTE(v425[0]) = 0;
        __s2[0] = 0;
        LODWORD(v419) = 1024;
        LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v424, v31, v32, __s2, (unsigned int *)&v419);
        if ((ChunkData & 0x80000000) == 0 && v32 < v423)
        {
          v32 += v419;
          LODWORD(v419) = 1024;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v424, v423, v32, v425, (unsigned int *)&v419);
        }
        if ((ChunkData & 0x80000000) != 0) {
          goto LABEL_127;
        }
        int v33 = (int)v419;
        if (!cstdlib_strcmp("GUID", __s2) || !cstdlib_strcmp("ComponentID", __s2))
        {
          cstdlib_strcpy(v405, (const char *)v425);
          goto LABEL_127;
        }
        v32 += v33;
        unsigned int v31 = v423;
        int v12 = a1;
        if (v32 >= v423) {
          goto LABEL_818;
        }
      }
    }
    if (!cstdlib_strcmp(__src, "VPRP"))
    {
      LODWORD(v419) = 0;
      *(void *)v424 = 0;
      if (v7)
      {
        *(void *)v424 = v7 + ssftriff_reader_GetPosition(a3) - a7;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, v424);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      LOBYTE(v425[0]) = 0;
      __s2[0] = 0;
      unsigned int v63 = v423;
      if (v423)
      {
        unsigned int v64 = 0;
        do
        {
          LODWORD(v419) = 1024;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v424, v63, v64, __s2, (unsigned int *)&v419);
          if ((ChunkData & 0x80000000) == 0 && v64 < v423)
          {
            v64 += v419;
            LODWORD(v419) = 1024;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v424, v423, v64, v425, (unsigned int *)&v419);
          }
          if ((ChunkData & 0x80000000) != 0) {
            break;
          }
          int v65 = (int)v419;
          if (!cstdlib_strcmp(__s2, "COUNT_UNITS_FULL_SPEECHBASE")) {
            *(_DWORD *)(a2 + 11804) = LH_atou((const char *)v425);
          }
          if (!cstdlib_strcmp(__s2, "COUNT_UNITS_AVAILABLE")) {
            *(_DWORD *)(a2 + 11812) = LH_atou((const char *)v425);
          }
          if (!cstdlib_strcmp(__s2, "COUNT_UNITS_GRAVEYARD")) {
            *(_DWORD *)(a2 + 11816) = LH_atou((const char *)v425);
          }
          if (!cstdlib_strcmp(__s2, "COUNT_UNITS_REMOVED")) {
            *(_DWORD *)(a2 + 11808) = LH_atou((const char *)v425);
          }
          v64 += v65;
          unsigned int v63 = v423;
        }
        while (v64 < v423);
      }
      goto LABEL_818;
    }
    if (!cstdlib_strcmp(__src, "VSTS")) {
      goto LABEL_82;
    }
    if (!cstdlib_strcmp(__src, "VCFG"))
    {
      unsigned int v420 = 0;
      *(void *)v418 = 0;
      v419 = 0;
      if (v7)
      {
        *(void *)v418 = v7 + ssftriff_reader_GetPosition(a3) - a7;
      }
      else
      {
        uint64_t ChunkData = ssftriff_reader_GetChunkData(a3, v423, v418);
        if ((ChunkData & 0x80000000) != 0) {
          return ChunkData;
        }
      }
      unsigned int v89 = v423;
      if (v423)
      {
        unsigned int v90 = 0;
        do
        {
          __s2[0] = 0;
          v424[0] = 0;
          unsigned int v420 = 64;
          LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v418, v89, v90, v424, &v420);
          if ((ChunkData & 0x80000000) == 0 && v90 < v423)
          {
            v90 += v420;
            unsigned int v420 = 256;
            LODWORD(ChunkData) = ssftriff_reader_ReadStringZ(a3, *(uint64_t *)v418, v423, v90, __s2, &v420);
          }
          if ((ChunkData & 0x80000000) != 0) {
            break;
          }
          unsigned int v91 = v420;
          cstdlib_strcpy((char *)v425, "bet5voiceoverride.");
          cstdlib_strcat((char *)v425, v424);
          if ((paramc_ParamGetStr(v12[5], (uint64_t)v425, &v419) & 0x80000000) != 0 || !v419 || !*v419) {
            v419 = __s2;
          }
          if (!cstdlib_strcmp(v424, "BREAKER"))
          {
            BOOL v92 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 336) = v92;
            if (!v92) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "BRK_LENGTH")) {
            *(_DWORD *)(a2 + 344) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "BRK_TC")) {
            *(_DWORD *)(a2 + 348) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "BRK_ZPAD")) {
            *(_DWORD *)(a2 + 352) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "ALGN_ST")) {
            *(_DWORD *)(a2 + 368) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "ALGN_PH")) {
            *(_DWORD *)(a2 + 372) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "ALPHA"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v93 = v93;
            *(_DWORD *)(a2 + 256) = LODWORD(v93);
          }
          if (!cstdlib_strcmp(v424, "BETA"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v94 = v94;
            *(_DWORD *)(a2 + 260) = LODWORD(v94);
          }
          if (!cstdlib_strcmp(v424, "FS")) {
            *(_DWORD *)(a2 + 264) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_SILENCE_SYNTH")) {
            *(_DWORD *)(a2 + 5304) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "VUV_REL_AMP"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v95 = v95;
            *(_DWORD *)(a2 + 268) = LODWORD(v95);
          }
          if (!cstdlib_strcmp(v424, "ORDER")) {
            *(_DWORD *)(a2 + 272) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "FRAME_SIZE")) {
            *(_DWORD *)(a2 + 280) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "RHO"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v96 = v96;
            *(_DWORD *)(a2 + 288) = LODWORD(v96);
          }
          if (!cstdlib_strcmp(v424, "VOL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v97 = v97;
            *(_DWORD *)(a2 + 292) = LODWORD(v97);
          }
          if (!cstdlib_strcmp(v424, "MVF_BOOST"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v98 = v98;
            *(_DWORD *)(a2 + 296) = LODWORD(v98);
          }
          if (!cstdlib_strcmp(v424, "VSYNTH"))
          {
            uint64_t v99 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 360) = v99;
            if (!v99) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "F0_RHO"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v100 = v100;
            *(_DWORD *)(a2 + 300) = LODWORD(v100);
          }
          if (!cstdlib_strcmp(v424, "F0_STD"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v101 = v101;
            *(_DWORD *)(a2 + 304) = LODWORD(v101);
          }
          if (!cstdlib_strcmp(v424, "F0_MEAN"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v102 = v102;
            *(_DWORD *)(a2 + 308) = LODWORD(v102);
          }
          if (!cstdlib_strcmp(v424, "SPEECH_F0_MEAN")) {
            *(_DWORD *)(a2 + 312) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "PDF_VARIANCE_TYPE")) {
            *(_DWORD *)(a2 + 328) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_PSOLA_MODE")) {
            *(_DWORD *)(a2 + 11776) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_PSOLA_MODE2_PROTECT_VOWELS")) {
            *(_DWORD *)(a2 + 11780) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_ENABLE_CREAK_PROTECTION")) {
            *(_DWORD *)(a2 + 11792) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_PSOLA_MIN_DURATION_RATIO")) {
            *(_DWORD *)(a2 + 11796) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_PSOLA_MAX_DURATION_RATIO")) {
            *(_DWORD *)(a2 + 11800) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_VITERBI_DECODER_VARIANT")) {
            *(_DWORD *)(a2 + 11744) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v103 = v103;
            *(_DWORD *)(a2 + 5760) = LODWORD(v103);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_SLL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v104 = v104;
            *(_DWORD *)(a2 + 5848) = LODWORD(v104);
          }
          if (!cstdlib_strcmp(v424, "F_SLL_STEP"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v105 = v105;
            *(_DWORD *)(a2 + 5844) = LODWORD(v105);
          }
          if (!cstdlib_strcmp(v424, "F_Q"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v106 = v106;
            *(_DWORD *)(a2 + 5772) = LODWORD(v106);
          }
          if (!cstdlib_strcmp(v424, "F_Q_UNV"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v107 = v107;
            *(_DWORD *)(a2 + 5776) = LODWORD(v107);
          }
          if (!cstdlib_strcmp(v424, "F_SYM_QA"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v108 = v108;
            *(_DWORD *)(a2 + 5780) = LODWORD(v108);
          }
          if (!cstdlib_strcmp(v424, "N_SEARCH_MODE")) {
            *(_DWORD *)(a2 + 7056) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_NODE_LIMIT")) {
            *(_DWORD *)(a2 + 5804) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_INV_NODE_LIMIT")) {
            *(_DWORD *)(a2 + 5808) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_PCT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v109 = v109;
            *(_DWORD *)(a2 + 5812) = LODWORD(v109);
          }
          if (!cstdlib_strcmp(v424, "F_BEAM_WIDTH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v110 = v110;
            *(_DWORD *)(a2 + 5824) = LODWORD(v110);
          }
          if (!cstdlib_strcmp(v424, "F_BEAM_WIDTH_UNV"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v111 = v111;
            *(_DWORD *)(a2 + 5828) = LODWORD(v111);
          }
          if (!cstdlib_strcmp(v424, "F_NODE_PRUNE_PCT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v112 = v112;
            *(_DWORD *)(a2 + 5816) = LODWORD(v112);
          }
          if (!cstdlib_strcmp(v424, "N_NODE_PRUNE_MAX")) {
            *(_DWORD *)(a2 + 5820) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_SILVIT")) {
            *(_DWORD *)(a2 + 5832) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_SLL_MAX"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v113 = v113;
            *(_DWORD *)(a2 + 5836) = LODWORD(v113);
          }
          if (!cstdlib_strcmp(v424, "F_SLL_WEIGHT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v114 = v114;
            *(_DWORD *)(a2 + 5840) = LODWORD(v114);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPOS_SNT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v115 = v115;
            *(_DWORD *)(a2 + 5860) = LODWORD(v115);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPOS_SNT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v116 = v116;
            *(_DWORD *)(a2 + 5864) = LODWORD(v116);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPOS_PHR_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v117 = v117;
            *(_DWORD *)(a2 + 5868) = LODWORD(v117);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPOS_PHR_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v118 = v118;
            *(_DWORD *)(a2 + 5872) = LODWORD(v118);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPOS_SNT_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v119 = v119;
            *(_DWORD *)(a2 + 5876) = LODWORD(v119);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPOS_SNT_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v120 = v120;
            *(_DWORD *)(a2 + 5880) = LODWORD(v120);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPOS_PHR_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v121 = v121;
            *(_DWORD *)(a2 + 5884) = LODWORD(v121);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPOS_PHR_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v122 = v122;
            *(_DWORD *)(a2 + 5888) = LODWORD(v122);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPOS_PHR_MID"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v123 = v123;
            *(_DWORD *)(a2 + 5892) = LODWORD(v123);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPOS_PHR_MID"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v124 = v124;
            *(_DWORD *)(a2 + 5896) = LODWORD(v124);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDWRDPOSSHP_SENT_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v125 = v125;
            *(_DWORD *)(a2 + 5900) = LODWORD(v125);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDWRDPOSSHP_SENT_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v126 = v126;
            *(_DWORD *)(a2 + 5904) = LODWORD(v126);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDWRDPOSSHP_SENT_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v127 = v127;
            *(_DWORD *)(a2 + 5908) = LODWORD(v127);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDWRDPOSSHP_SENT_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v128 = v128;
            *(_DWORD *)(a2 + 5912) = LODWORD(v128);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDWRDPOSSHP_SENT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v129 = v129;
            *(_DWORD *)(a2 + 5916) = LODWORD(v129);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDWRDPOSSHP_SENT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v130 = v130;
            *(_DWORD *)(a2 + 5920) = LODWORD(v130);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDWRDPOSSHP_IP4_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v131 = v131;
            *(_DWORD *)(a2 + 5924) = LODWORD(v131);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDWRDPOSSHP_IP4_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v132 = v132;
            *(_DWORD *)(a2 + 5928) = LODWORD(v132);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDWRDPOSSHP_IP4_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v133 = v133;
            *(_DWORD *)(a2 + 5932) = LODWORD(v133);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDWRDPOSSHP_IP4_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v134 = v134;
            *(_DWORD *)(a2 + 5936) = LODWORD(v134);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDWRDPOSSHP_IP4_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v135 = v135;
            *(_DWORD *)(a2 + 5940) = LODWORD(v135);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDWRDPOSSHP_IP4_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v136 = v136;
            *(_DWORD *)(a2 + 5944) = LODWORD(v136);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRM_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v137 = v137;
            *(_DWORD *)(a2 + 5948) = LODWORD(v137);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRM_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v138 = v138;
            *(_DWORD *)(a2 + 5952) = LODWORD(v138);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRM_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v139 = v139;
            *(_DWORD *)(a2 + 5956) = LODWORD(v139);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRM_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v140 = v140;
            *(_DWORD *)(a2 + 5960) = LODWORD(v140);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRM_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v141 = v141;
            *(_DWORD *)(a2 + 5964) = LODWORD(v141);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRM_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v142 = v142;
            *(_DWORD *)(a2 + 5968) = LODWORD(v142);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRM_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v143 = v143;
            *(_DWORD *)(a2 + 5972) = LODWORD(v143);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRM_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v144 = v144;
            *(_DWORD *)(a2 + 5976) = LODWORD(v144);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRMSHP_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v145 = v145;
            *(_DWORD *)(a2 + 5980) = LODWORD(v145);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRMSHP_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v146 = v146;
            *(_DWORD *)(a2 + 5984) = LODWORD(v146);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRMSHP_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v147 = v147;
            *(_DWORD *)(a2 + 5988) = LODWORD(v147);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRMSHP_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v148 = v148;
            *(_DWORD *)(a2 + 5992) = LODWORD(v148);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRMSHP_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v149 = v149;
            *(_DWORD *)(a2 + 5996) = LODWORD(v149);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRMSHP_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v150 = v150;
            *(_DWORD *)(a2 + 6000) = LODWORD(v150);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRMSHP_NUC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v151 = v151;
            *(_DWORD *)(a2 + 6004) = LODWORD(v151);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRMSHP_NUC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v152 = v152;
            *(_DWORD *)(a2 + 6008) = LODWORD(v152);
          }
          if (!cstdlib_strcmp(v424, "F_Q_WRDPRMSHP_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v153 = v153;
            *(_DWORD *)(a2 + 6012) = LODWORD(v153);
          }
          if (!cstdlib_strcmp(v424, "F_B_WRDPRMSHP_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v154 = v154;
            *(_DWORD *)(a2 + 6016) = LODWORD(v154);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPOS_SNT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v155 = v155;
            *(_DWORD *)(a2 + 6020) = LODWORD(v155);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPOS_PHR_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v156 = v156;
            *(_DWORD *)(a2 + 6024) = LODWORD(v156);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPOS_SNT_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v157 = v157;
            *(_DWORD *)(a2 + 6028) = LODWORD(v157);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPOS_PHR_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v158 = v158;
            *(_DWORD *)(a2 + 6032) = LODWORD(v158);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPOS_PHR_MID"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v159 = v159;
            *(_DWORD *)(a2 + 6036) = LODWORD(v159);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDWRDPOSSHP_SENT_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v160 = v160;
            *(_DWORD *)(a2 + 6040) = LODWORD(v160);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDWRDPOSSHP_SENT_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v161 = v161;
            *(_DWORD *)(a2 + 6044) = LODWORD(v161);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDWRDPOSSHP_SENT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v162 = v162;
            *(_DWORD *)(a2 + 6048) = LODWORD(v162);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDWRDPOSSHP_IP4_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v163 = v163;
            *(_DWORD *)(a2 + 6052) = LODWORD(v163);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDWRDPOSSHP_IP4_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v164 = v164;
            *(_DWORD *)(a2 + 6056) = LODWORD(v164);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDWRDPOSSHP_IP4_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v165 = v165;
            *(_DWORD *)(a2 + 6060) = LODWORD(v165);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRM_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v166 = v166;
            *(_DWORD *)(a2 + 6064) = LODWORD(v166);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRM_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v167 = v167;
            *(_DWORD *)(a2 + 6068) = LODWORD(v167);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRM_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v168 = v168;
            *(_DWORD *)(a2 + 6072) = LODWORD(v168);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRM_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v169 = v169;
            *(_DWORD *)(a2 + 6076) = LODWORD(v169);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRMSHP_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v170 = v170;
            *(_DWORD *)(a2 + 6080) = LODWORD(v170);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRMSHP_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v171 = v171;
            *(_DWORD *)(a2 + 6084) = LODWORD(v171);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRMSHP_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v172 = v172;
            *(_DWORD *)(a2 + 6088) = LODWORD(v172);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRMSHP_NUC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v173 = v173;
            *(_DWORD *)(a2 + 6092) = LODWORD(v173);
          }
          if (!cstdlib_strcmp(v424, "F_QA_WRDPRMSHP_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v174 = v174;
            *(_DWORD *)(a2 + 6096) = LODWORD(v174);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPOS_SNT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v175 = v175;
            *(_DWORD *)(a2 + 6100) = LODWORD(v175);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPOS_PHR_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v176 = v176;
            *(_DWORD *)(a2 + 6104) = LODWORD(v176);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPOS_SNT_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v177 = v177;
            *(_DWORD *)(a2 + 6108) = LODWORD(v177);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPOS_PHR_INIT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v178 = v178;
            *(_DWORD *)(a2 + 6112) = LODWORD(v178);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPOS_PHR_MID"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v179 = v179;
            *(_DWORD *)(a2 + 6116) = LODWORD(v179);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_SENT_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v180 = v180;
            *(_DWORD *)(a2 + 6120) = LODWORD(v180);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_SENT_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v181 = v181;
            *(_DWORD *)(a2 + 6124) = LODWORD(v181);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_SENT_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v182 = v182;
            *(_DWORD *)(a2 + 6128) = LODWORD(v182);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_IP4_SINGLE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v183 = v183;
            *(_DWORD *)(a2 + 6132) = LODWORD(v183);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_IP4_INITIAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v184 = v184;
            *(_DWORD *)(a2 + 6136) = LODWORD(v184);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDWRDPOSSHP_IP4_FINAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v185 = v185;
            *(_DWORD *)(a2 + 6140) = LODWORD(v185);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRM_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v186 = v186;
            *(_DWORD *)(a2 + 6144) = LODWORD(v186);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRM_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v187 = v187;
            *(_DWORD *)(a2 + 6148) = LODWORD(v187);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRM_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v188 = v188;
            *(_DWORD *)(a2 + 6152) = LODWORD(v188);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRM_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v189 = v189;
            *(_DWORD *)(a2 + 6156) = LODWORD(v189);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_UACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v190 = v190;
            *(_DWORD *)(a2 + 6160) = LODWORD(v190);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_DACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v191 = v191;
            *(_DWORD *)(a2 + 6164) = LODWORD(v191);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_ACC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v192 = v192;
            *(_DWORD *)(a2 + 6168) = LODWORD(v192);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_NUC"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v193 = v193;
            *(_DWORD *)(a2 + 6172) = LODWORD(v193);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_WRDPRMSHP_EMPH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v194 = v194;
            *(_DWORD *)(a2 + 6176) = LODWORD(v194);
          }
          if (!cstdlib_strcmp(v424, "F_W_CONTEXT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v195 = v195;
            *(_DWORD *)(a2 + 5764) = LODWORD(v195);
          }
          if (!cstdlib_strcmp(v424, "F_W_GENERIC_CONTEXT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v196 = v196;
            *(_DWORD *)(a2 + 5768) = LODWORD(v196);
          }
          if (!cstdlib_strcmp(v424, "N_DATABNF_TYPE_OF_BNF_STYLE")) {
            *(_DWORD *)(a2 + 7012) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_DATAJV_TYPE_OF_JV_STYLE")) {
            *(_DWORD *)(a2 + 7016) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_DATAJV_CLUSTERED")) {
            *(_DWORD *)(a2 + 7020) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "F_MODE_DEC4_SIMD_STYLE")) {
            *(_DWORD *)(a2 + 7024) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_EXPLICIT_PHONE_MODEL")) {
            *(_DWORD *)(a2 + 6232) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_DIPHONE_UNITS")) {
            *(_DWORD *)(a2 + 6236) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_PHONEME_SUBSTATE_MODEL")) {
            *(_DWORD *)(a2 + 6240) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_PHONEME_SUBSTATE_DATA_OPTIMIZATION")) {
            *(_DWORD *)(a2 + 6244) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_UNITBULKING")) {
            *(_DWORD *)(a2 + 6252) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_UNITBULKING_SEARCH_MINADJ")) {
            *(_DWORD *)(a2 + 6256) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "F_UNITBULKING_SEARCH_COST_NO_ADJACENT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v197 = v197;
            *(_DWORD *)(a2 + 6260) = LODWORD(v197);
          }
          if (!cstdlib_strcmp(v424, "B_STATE_LM_BACKUP")) {
            *(_DWORD *)(a2 + 6324) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_ALL_STATE_LM")) {
            *(_DWORD *)(a2 + 6328) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_BACKOFF")) {
            *(_DWORD *)(a2 + 6332) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_UNIGRAMS_IN_PJ_SPMTX_MCP")) {
            *(_DWORD *)(a2 + 6932) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_CODEBOOK_VECTORS_MCP")) {
            *(_DWORD *)(a2 + 6948) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "B_CONTEXTEXPANDBNF")) {
            *(_DWORD *)(a2 + 7008) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_TYPEOFPITCHCOST")) {
            *(_DWORD *)(a2 + 7028) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_LLMINNEGTARGETSTEP"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v198 = v198;
            *(_DWORD *)(a2 + 6448) = LODWORD(v198);
          }
          if (!cstdlib_strcmp(v424, "B_USEQUANTIZEDLL")) {
            *(_DWORD *)(a2 + 6452) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_USELL")) {
            *(_DWORD *)(a2 + 6456) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "F_PITCHSLOPEWEIGHT"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v199 = v199;
            *(_DWORD *)(a2 + 7032) = LODWORD(v199);
          }
          if (!cstdlib_strcmp(v424, "F_BNF_MAXVAL"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v200 = v200;
            *(float *)(a2 + 6928) = 127.0 / *(float *)&v200;
          }
          if (!cstdlib_strcmp(v424, "B_UNIGRAMS_IN_PJ_SPMTX_LF0")) {
            *(_DWORD *)(a2 + 6936) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_USE_PJ_FSM_MCP")) {
            *(_DWORD *)(a2 + 6940) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_NGRAM_ORDER_PJ_FSM_MCP")) {
            *(_DWORD *)(a2 + 6944) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_USE_PJ_FSM_LF0")) {
            *(_DWORD *)(a2 + 6952) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_NGRAM_ORDER_PJ_FSM_LF0")) {
            *(_DWORD *)(a2 + 6956) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_BIAS_PJ_FSM_LF0"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v201 = v201;
            *(_DWORD *)(a2 + 6960) = LODWORD(v201);
          }
          if (!cstdlib_strcmp(v424, "N_BIAS_SHIFT_PJ_FSM_LF0")) {
            *(_DWORD *)(a2 + 6964) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_BIAS_ONLY_VOICED_PJ_FSM_LF0")) {
            *(_DWORD *)(a2 + 6968) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_QUANT_PRECOMP_FSMR_LF0")) {
            *(_DWORD *)(a2 + 6972) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_TRANSPOSE_PJ_MTX")) {
            *(_DWORD *)(a2 + 6980) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_ANN_CHUNK_PH_SIZE")) {
            *(_DWORD *)(a2 + 6996) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_ANN_CHUNK_PH_OVL_L_SIZE")) {
            *(_DWORD *)(a2 + 7000) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_ANN_CHUNK_PH_OVL_R_SIZE")) {
            *(_DWORD *)(a2 + 7004) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_ADDITIVE_TRANS_WEIGHTS")) {
            *(_DWORD *)(a2 + 6392) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_ENABLE_CCL")) {
            *(_DWORD *)(a2 + 6376) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_LEN_CCL")) {
            *(_DWORD *)(a2 + 6380) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_SLL_THRES"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v202 = v202;
            *(_DWORD *)(a2 + 6384) = LODWORD(v202);
          }
          if (!cstdlib_strcmp(v424, "B_ENABLE_SLL_THRES")) {
            *(_DWORD *)(a2 + 6388) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "B_ENABLE_BNF_DISTANCE_PRUNING")) {
            *(_DWORD *)(a2 + 6396) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_BNF_PRUNING_MIN_NODES")) {
            *(_DWORD *)(a2 + 6400) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_BNF_MIN_CAND")) {
            *(_DWORD *)(a2 + 6404) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "N_BNF_MAX_CAND")) {
            *(_DWORD *)(a2 + 6408) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "N_BNF_THRESH"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v203 = v203;
            *(_DWORD *)(a2 + 6412) = LODWORD(v203);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_DUR_OUTLIER_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v204 = v204;
            *(_DWORD *)(a2 + 6416) = LODWORD(v204);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_DUR_OUTLIER_MAX"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v205 = v205;
            *(_DWORD *)(a2 + 6420) = LODWORD(v205);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_DUR_OUTLIER_DIST_PARAM1"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v206 = v206;
            *(_DWORD *)(a2 + 6424) = LODWORD(v206);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_DUR_OUTLIER_DIST_PARAM2"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v207 = v207;
            *(_DWORD *)(a2 + 6428) = LODWORD(v207);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_PITCH_SLOPE_OUTLIER_DIST_PARAM1"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v208 = v208;
            *(_DWORD *)(a2 + 6432) = LODWORD(v208);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_PITCH_SLOPE_OUTLIER_DIST_PARAM2"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v209 = v209;
            *(_DWORD *)(a2 + 6436) = LODWORD(v209);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_PITCH_EDGE_OUTLIER_DIST_PARAM1"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v210 = v210;
            *(_DWORD *)(a2 + 6440) = LODWORD(v210);
          }
          if (!cstdlib_strcmp(v424, "F_PRUNE_PITCH_EDGE_OUTLIER_DIST_PARAM2"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v211 = v211;
            *(_DWORD *)(a2 + 6444) = LODWORD(v211);
          }
          if (!cstdlib_strcmp(v424, "B_BNF_RND_PROJECTION")) {
            *(_DWORD *)(a2 + 6984) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_BNF_VECTOR_SIZE")) {
            *(_DWORD *)(a2 + 6988) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "N_BNF_LF0_JOIN_THRESHOLD")) {
            *(_DWORD *)(a2 + 6920) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_MAX_RNN_LF0_JOIN_DEVIATION")) {
            *(_DWORD *)(a2 + 6924) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "S_LANGUAGE_INDICES")) {
            *(void *)(a2 + 6464) = UNICORN__heap_StrDup((void *)v12[1], v419);
          }
          if (!cstdlib_strcmp(v424, "S_QUESTION_INDICES")) {
            *(void *)(a2 + 6472) = UNICORN__heap_StrDup((void *)v12[1], v419);
          }
          if (!cstdlib_strcmp(v424, "S_STYLE_INDICES")) {
            *(void *)(a2 + 6480) = UNICORN__heap_StrDup((void *)v12[1], v419);
          }
          if (!cstdlib_strcmp(v424, "N_MAIN_LANGUAGE_INDEX")) {
            *(_DWORD *)(a2 + 6872) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_LANGUAGE_SCORE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v212 = v212;
            *(_DWORD *)(a2 + 6876) = LODWORD(v212);
          }
          if (!cstdlib_strcmp(v424, "F_QUESTION_SCORE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v213 = v213;
            *(_DWORD *)(a2 + 6880) = LODWORD(v213);
          }
          if (!cstdlib_strcmp(v424, "F_STYLE_SCORE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v214 = v214;
            *(_DWORD *)(a2 + 6884) = LODWORD(v214);
          }
          if (!cstdlib_strcmp(v424, "N_NODE_PRUNE_MIN")) {
            *(_DWORD *)(a2 + 6888) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "F_NODE_SCORE_MAX"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v215 = v215;
            *(_DWORD *)(a2 + 6892) = LODWORD(v215);
          }
          if (!cstdlib_strcmp(v424, "F_BEG_1ST_CASCADED_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v216 = v216;
            *(_DWORD *)(a2 + 6896) = LODWORD(v216);
          }
          if (!cstdlib_strcmp(v424, "F_MID_1ST_CASCADED_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v217 = v217;
            *(_DWORD *)(a2 + 6900) = LODWORD(v217);
          }
          if (!cstdlib_strcmp(v424, "F_END_1ST_CASCADED_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v218 = v218;
            *(_DWORD *)(a2 + 6904) = LODWORD(v218);
          }
          if (!cstdlib_strcmp(v424, "F_BEG_2ND_CASCADED_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v219 = v219;
            *(_DWORD *)(a2 + 6908) = LODWORD(v219);
          }
          if (!cstdlib_strcmp(v424, "F_MID_2ND_CASCADED_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v220 = v220;
            *(_DWORD *)(a2 + 6912) = LODWORD(v220);
          }
          if (!cstdlib_strcmp(v424, "F_END_2ND_CASCADED_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v221 = v221;
            *(_DWORD *)(a2 + 6916) = LODWORD(v221);
          }
          if (!cstdlib_strcmp(v424, "N_MAX_UNITBASE_UNITS")) {
            *(_DWORD *)(a2 + 7048) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_MAXLOAD_UNITS")) {
            *(_DWORD *)(a2 + 7052) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_USE_ANN_PRED")) {
            *(_DWORD *)(a2 + 6992) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "S_ANN_PRED_OUTLAYER_BNF"))
          {
            uint64_t v222 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 10664) = v222;
            if (!v222) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "S_ANN_PRED_OUTLAYER_LF0"))
          {
            uint64_t v223 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 10672) = v223;
            if (!v223) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "S_ANN_PRED_OUTLAYER_DUR"))
          {
            int v224 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 10680) = v224;
            if (!v224) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "S_ANN_PRED_OUTLAYER_SDUR"))
          {
            int v225 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 10688) = v225;
            if (!v225) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "S_ANN_PRED_OUTLAYER_VUV"))
          {
            unsigned int v226 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 10696) = v226;
            if (!v226) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "S_ANN_PRED_OUTLAYER_ELF0"))
          {
            unsigned int v227 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 10704) = v227;
            if (!v227) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "S_ANN_PRED_OUTLAYER_PDUR"))
          {
            unsigned int v228 = UNICORN__heap_StrDup((void *)v12[1], v419);
            *(void *)(a2 + 10712) = v228;
            if (!v228) {
              LODWORD(ChunkData) = -2065686518;
            }
          }
          if (!cstdlib_strcmp(v424, "F_JOIN_UNIT_SYLRATE_FACTOR"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v229 = v229;
            *(_DWORD *)(a2 + 7040) = LODWORD(v229);
          }
          if (!cstdlib_strcmp(v424, "B_JOIN_UNIT_SYLRATE_ADJ")) {
            *(_DWORD *)(a2 + 7044) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "F_HMM_STREAM_WEIGHT_DUR_TUNE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v230 = v230;
            *(_DWORD *)(a2 + 11752) = LODWORD(v230);
          }
          if (!cstdlib_strcmp(v424, "F_BEAM_WIDTH_TUNE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v231 = v231;
            *(_DWORD *)(a2 + 11748) = LODWORD(v231);
          }
          if (!cstdlib_strcmp(v424, "F_JCOST_WEIGHT_ADJ_TUNE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v232 = v232;
            *(_DWORD *)(a2 + 11756) = LODWORD(v232);
          }
          if (!cstdlib_strcmp(v424, "F_SYM_QA_TUNE"))
          {
            cstdlib_atof((unsigned __int8 *)v419);
            *(float *)&double v233 = v233;
            *(_DWORD *)(a2 + 11760) = LODWORD(v233);
          }
          if (!cstdlib_strcmp(v424, "N_NODE_LIMIT_TUNE")) {
            *(_DWORD *)(a2 + 11764) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_INV_NODE_LIMIT_TUNE")) {
            *(_DWORD *)(a2 + 11768) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "N_NODE_PRUNE_MAX_TUNE")) {
            *(_DWORD *)(a2 + 11772) = LH_atoi(v419);
          }
          if (!cstdlib_strcmp(v424, "B_MIXEDVOICINGBIGRAMS")) {
            *(_DWORD *)(a2 + 5852) = LH_atoi(v419) != 0;
          }
          if (!cstdlib_strcmp(v424, "N_UV_CODE")) {
            *(_DWORD *)(a2 + 5856) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "N_UNDERRUN_THRESHOLD")) {
            *(_DWORD *)(a2 + 6180) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "N_EARLYEMISSION_MAX_HYPOTHESES")) {
            *(_DWORD *)(a2 + 6184) = LH_atou(v419);
          }
          if (!cstdlib_strcmp(v424, "N_EARLYEMISSION_MAX_AMBIGUITY_WINDOW")) {
            *(_DWORD *)(a2 + 6188) = LH_atou(v419);
          }
          if ((ChunkData & 0x80000000) != 0) {
            break;
          }
          v90 += v91;
          unsigned int v89 = v423;
        }
        while (v90 < v423);
      }
      goto LABEL_818;
    }
    if (!cstdlib_strcmp(__src, "FEEX"))
    {
LABEL_82:
      uint64_t v26 = v12;
      uint64_t v27 = a2;
      uint64_t v28 = a3;
      uint64_t v29 = 1;
      goto LABEL_83;
    }
    if (!cstdlib_strcmp(__src, "PCT4"))
    {
      *(void *)__s2 = 0;
      if (v7)
      {
        float v80 = (char *)(v7 + ssftriff_reader_GetPosition(a3) - a7);
        *(void *)__s2 = v80;
      }
      else
      {
        uint64_t v250 = ssftriff_reader_GetChunkData(a3, v423, __s2);
        if ((v250 & 0x80000000) != 0) {
          return v250;
        }
        float v80 = *(char **)__s2;
      }
      int v251 = v423;
      uint64_t v252 = (uint64_t)v12;
      uint64_t v253 = a3;
      int v254 = v401;
      goto LABEL_747;
    }
    if (cstdlib_strcmp(__src, "STM3"))
    {
      if (!cstdlib_strcmp(__src, "CJE5"))
      {
        unint64_t v255 = *(unsigned __int16 *)(v406 + 516);
        if (v255 <= 0x3F)
        {
          int v256 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v255 + 42848), v391);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v256;
            *(_DWORD *)(a2 + 8880) = v256;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "UND4"))
      {
        unint64_t v259 = *(unsigned __int16 *)(v406 + 516);
        if (v259 <= 0x3F)
        {
          int v260 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v259 + 42848), v388);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v260;
            *(_DWORD *)(a2 + 7320) = v260;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "ANNP"))
      {
        unint64_t v262 = *(unsigned __int16 *)(v406 + 516);
        if (v262 <= 0x3F)
        {
          int v263 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v262 + 42848), v386);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v263;
            *(_DWORD *)(a2 + 8280) = v263;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "ANNF"))
      {
        unint64_t v284 = *(unsigned __int16 *)(v406 + 516);
        if (v284 <= 0x3F)
        {
          int v285 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v284 + 42848), v381);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v285;
            *(_DWORD *)(a2 + 10080) = v285;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "BNCV"))
      {
        int RiffStringTable = select_bet5_LoadMfsData(a2, a3, 8u, 0, v423, 0, 0, *(_DWORD *)(v406 + 584));
        goto LABEL_748;
      }
      if (!cstdlib_strcmp(__src, "BNCN"))
      {
        unint64_t v314 = *(unsigned __int16 *)(v406 + 516);
        if (v314 <= 0x3F)
        {
          int v315 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v314 + 42848), v378);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v315;
            *(_DWORD *)(a2 + 8064) = v315;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "UIDO"))
      {
        unint64_t v322 = *(unsigned __int16 *)(v406 + 516);
        if (v322 <= 0x3F)
        {
          int v323 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v322 + 42848), v377);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v323;
            *(_DWORD *)(a2 + 9120) = v323;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "EF0L"))
      {
        unint64_t v325 = *(unsigned __int16 *)(v406 + 516);
        if (v325 <= 0x3F)
        {
          int v326 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v325 + 42848), v376);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v326;
            *(_DWORD *)(a2 + 9240) = v326;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "EF0R"))
      {
        unint64_t v330 = *(unsigned __int16 *)(v406 + 516);
        if (v330 <= 0x3F)
        {
          int v331 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v330 + 42848), v375);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v331;
            *(_DWORD *)(a2 + 9264) = v331;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "MIF0"))
      {
        unint64_t v333 = *(unsigned __int16 *)(v406 + 516);
        if (v333 <= 0x3F)
        {
          int v334 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v333 + 42848), v374);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v334;
            *(_DWORD *)(a2 + 9360) = v334;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "FRAD"))
      {
        unint64_t v335 = *(unsigned __int16 *)(v406 + 516);
        if (v335 <= 0x3F)
        {
          int v336 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v335 + 42848), v373);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v336;
            *(_DWORD *)(a2 + 9480) = v336;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "CSLL"))
      {
        unint64_t v337 = *(unsigned __int16 *)(v406 + 516);
        if (v337 <= 0x3F)
        {
          int v338 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v337 + 42848), v372);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v338;
            *(_DWORD *)(a2 + 9600) = v338;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "CINT"))
      {
        unint64_t v339 = *(unsigned __int16 *)(v406 + 516);
        if (v339 <= 0x3F)
        {
          int v340 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v339 + 42848), v371);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v340;
            *(_DWORD *)(a2 + 9720) = v340;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "FUZ5"))
      {
        unint64_t v341 = *(unsigned __int16 *)(v406 + 516);
        if (v341 <= 0x3F)
        {
          int v344 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v341 + 42848), v370);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v344;
            *(_DWORD *)(a2 + 10440) = v344;
          }
          goto LABEL_818;
        }
        goto LABEL_914;
      }
      if (!cstdlib_strcmp(__src, "CSYM"))
      {
        unint64_t v342 = *(unsigned __int16 *)(v406 + 516);
        if (v342 > 0x3F) {
          goto LABEL_133;
        }
        int v343 = v423;
        LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v342 + 42848), v369);
        if ((ChunkData & 0x80000000) == 0)
        {
          ++*(_WORD *)(v406 + 516);
          *(_DWORD *)v406 += v343;
          *(_DWORD *)(a2 + 10200) = v343;
        }
LABEL_936:
        uint64_t v7 = a6;
LABEL_127:
        int v12 = a1;
        goto LABEL_818;
      }
      if (!cstdlib_strcmp(__src, "GCR5"))
      {
        unint64_t v345 = *(unsigned __int16 *)(v406 + 516);
        if (v345 <= 0x3F)
        {
          int v346 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v345 + 42848), v368);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v346;
            *(_DWORD *)(a2 + 10560) = v346;
          }
          goto LABEL_936;
        }
LABEL_935:
        LODWORD(ChunkData) = -2065686524;
        goto LABEL_936;
      }
      if (!cstdlib_strcmp(__src, "PHOD"))
      {
        unint64_t v347 = *(unsigned __int16 *)(v406 + 516);
        if (v347 <= 0x3F)
        {
          int v348 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v347 + 42848), v367);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v348;
            *(_DWORD *)(a2 + 9840) = v348;
          }
          goto LABEL_936;
        }
        goto LABEL_935;
      }
      if (!cstdlib_strcmp(__src, "BNFT"))
      {
        unint64_t v349 = *(unsigned __int16 *)(v406 + 516);
        if (v349 <= 0x3F)
        {
          int v350 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v349 + 42848), v366);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v350;
            *(_DWORD *)(a2 + 8400) = v350;
          }
          goto LABEL_936;
        }
        goto LABEL_935;
      }
      if (!cstdlib_strcmp(__src, "LOUD"))
      {
        unint64_t v351 = *(unsigned __int16 *)(v406 + 516);
        if (v351 <= 0x3F)
        {
          int v352 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v351 + 42848), v365);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v352;
            *(_DWORD *)(a2 + 8520) = v352;
          }
          goto LABEL_936;
        }
        goto LABEL_935;
      }
      if (!cstdlib_strcmp(__src, "SYLR"))
      {
        unint64_t v353 = *(unsigned __int16 *)(v406 + 516);
        if (v353 <= 0x3F)
        {
          int v354 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v353 + 42848), v364);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v354;
            *(_DWORD *)(a2 + 8640) = v354;
          }
          goto LABEL_936;
        }
        goto LABEL_935;
      }
      uint64_t v7 = a6;
      int v12 = a1;
      if (!cstdlib_strcmp(__src, "BNFD"))
      {
        unint64_t v14 = *(unsigned __int16 *)(v406 + 516);
        if (v14 <= 0x3F)
        {
          int v15 = v423;
          LODWORD(ChunkData) = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v14 + 42848), v363);
          if ((ChunkData & 0x80000000) == 0)
          {
            ++*(_WORD *)(v406 + 516);
            *(_DWORD *)v406 += v15;
            *(_DWORD *)(a2 + 8040) = v15;
          }
          goto LABEL_936;
        }
        goto LABEL_935;
      }
      goto LABEL_815;
    }
    *(void *)__s2 = 0;
    unint64_t v239 = *(unsigned __int16 *)(v406 + 516);
    LODWORD(ChunkData) = -2065686524;
    if (v239 <= 0x3F)
    {
      int RiffStringTable = ssftriff_reader_DetachChunkData(a3, (void **)(a2 + 8 * v239 + 42848), __s2);
      if (RiffStringTable < 0) {
        goto LABEL_748;
      }
      uint64_t v240 = ssftriff_reader_GetPosition(a3);
      ++*(_WORD *)(v406 + 516);
      *(_DWORD *)v406 += v423;
      LODWORD(ChunkData) = select_bet5_ParseRiff(v12, a2, a3, 1, a5, *(void *)__s2, v240);
      ++*(_DWORD *)(a2 + 388);
    }
LABEL_818:
    int v298 = ssftriff_reader_CloseChunk(a3);
    if ((int)ChunkData > -1 && v298 < 0) {
      LODWORD(ChunkData) = v298;
    }
  }
  while ((ChunkData & 0x80000000) == 0);
  if ((ChunkData & 0x1FFF) == 0x14) {
    uint64_t ChunkData = 0;
  }
  else {
    uint64_t ChunkData = ChunkData;
  }
  if ((ChunkData & 0x80000000) == 0) {
    char *__dst = 0;
  }
  v355 = *(char **)(a2 + 6464);
  if (v355) {
    ParseInternalTagString(v355, a2 + 6488);
  }
  v356 = *(char **)(a2 + 6472);
  if (v356) {
    ParseInternalTagString(v356, a2 + 6616);
  }
  v357 = *(char **)(a2 + 6480);
  if (v357) {
    ParseInternalTagString(v357, a2 + 6744);
  }
  return ChunkData;
}

uint64_t select_bet5_LoadRiffStringTable(uint64_t a1, uint64_t a2, char *__src, int a4, uint64_t *a5)
{
  unsigned __int16 __dst = 0;
  cstdlib_memcpy(&__dst, __src, 2uLL);
  if (__dst)
  {
    uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), __dst + 1, 8);
    *a5 = v10;
    if (v10)
    {
      if (__dst)
      {
        unint64_t v11 = 0;
        unsigned int v12 = a4 - 2;
        uint64_t v13 = __src + 2;
        do
        {
          unsigned int v17 = 0;
          uint64_t result = ssftriff_reader_ReadStringW(a2, (uint64_t)v13, v12, 0, 0, &v17);
          if ((result & 0x80000000) != 0 && (result & 0x1FFF) != 9) {
            break;
          }
          *(void *)(*a5 + 8 * v11) = heap_Alloc(*(void *)(a1 + 8), v17);
          int v15 = *(unsigned char **)(*a5 + 8 * v11);
          if (!v15) {
            return 2229280778;
          }
          uint64_t result = ssftriff_reader_ReadStringW(a2, (uint64_t)v13, v12, 0, v15, &v17);
          if ((result & 0x80000000) != 0) {
            break;
          }
          v13 += v17 + 1;
          v12 -= v17 + 1;
          ++v11;
        }
        while (v11 < __dst);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2229280778;
    }
  }
  else
  {
    uint64_t result = 0;
    *a5 = 0;
  }
  return result;
}

uint64_t select_bet5_LoadMfsData(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  if (a6)
  {
    int Position = ssftriff_reader_GetPosition(a2);
    uint64_t result = 0;
    uint64_t v16 = a1 + 120 * a3 + 24 * a4;
    *(void *)(v16 + 7072) = a6 + (Position - a7);
    *(_DWORD *)(v16 + 7080) = a5;
  }
  else if (a8)
  {
    uint64_t result = 2229280769;
    if (a3 == 8 && !a4)
    {
      *(_DWORD *)(a1 + 8040) = a5;
      int v17 = ssftriff_reader_GetPosition(a2);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 8044) = v17;
    }
  }
  else
  {
    unint64_t v18 = *(unsigned __int16 *)(a1 + 43360);
    if (v18 <= 0x3F)
    {
      uint64_t result = ssftriff_reader_DetachChunkData(a2, (void **)(a1 + 8 * v18 + 42848), (void *)(a1 + 120 * a3 + 24 * a4 + 7072));
      if ((result & 0x80000000) == 0)
      {
        ++*(_WORD *)(a1 + 43360);
        *(_DWORD *)(a1 + 42844) += a5;
        *(_DWORD *)(a1 + 120 * a3 + 24 * a4 + 7080) = a5;
      }
    }
    else
    {
      return 2229280772;
    }
  }
  return result;
}

uint64_t select_bet5_LoadRiffGenericFeatureMap(uint64_t a1, uint64_t a2, char *__src, unsigned int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v13 = 2229280778;
  unsigned __int16 __dst = 0;
  cstdlib_memcpy(&__dst, __src, 2uLL);
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), __dst + 1, 8);
  *a5 = v14;
  if (v14)
  {
    uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), __dst + 1, 8);
    *a6 = v15;
    if (v15)
    {
      uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), __dst + 1, 8);
      *a7 = v16;
      if (v16)
      {
        if (__dst)
        {
          uint64_t v26 = a5;
          uint64_t v27 = a7;
          uint64_t v17 = 0;
          unsigned int v18 = 2;
          while (1)
          {
            unsigned __int16 v29 = 0;
            __s[0] = 0;
            unsigned int v30 = 256;
            uint64_t v13 = ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, a4, v18, __s, &v30);
            unsigned int v19 = v30;
            *(void *)(*a5 + 8 * v17) = UNICORN__heap_StrDup(*(void **)(a1 + 8), __s);
            if (!*(void *)(*a5 + 8 * v17)) {
              return 2229280778;
            }
            uint64_t v20 = v19 + v18;
            cstdlib_memcpy(&v29, &__src[v20], 2uLL);
            *(void *)(*a6 + 8 * v17) = heap_Calloc(*(void **)(a1 + 8), v29 + 1, 8);
            if (!*(void *)(*a6 + 8 * v17)) {
              return 2229280778;
            }
            *(void *)(*v27 + 8 * v17) = heap_Calloc(*(void **)(a1 + 8), v29 + 1, 1);
            if (!*(void *)(*v27 + 8 * v17)) {
              return 2229280778;
            }
            unsigned int v18 = v20 + 2;
            if (v29)
            {
              uint64_t v21 = 0;
              while (1)
              {
                unsigned int v22 = v18;
                __s[0] = 0;
                unsigned int v30 = 256;
                uint64_t v13 = ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, a4, v18, __s, &v30);
                unsigned int v23 = v30;
                *(void *)(*(void *)(*a6 + 8 * v17) + 8 * v21) = UNICORN__heap_StrDup(*(void **)(a1 + 8), __s);
                if (!*(void *)(*(void *)(*a6 + 8 * v17) + 8 * v21)) {
                  return 2229280778;
                }
                v18 += v23;
                if (++v21 >= (unint64_t)v29)
                {
                  if (v29)
                  {
                    unint64_t v24 = 0;
                    a5 = v26;
                    do
                    {
                      *(unsigned char *)(*(void *)(*v27 + 8 * v17) + v24) = __src[v22 + v23 + v24];
                      ++v24;
                    }
                    while (v24 < v29);
                    unsigned int v18 = v22 + v23 + v24;
                  }
                  else
                  {
                    a5 = v26;
                  }
                  goto LABEL_19;
                }
              }
            }
            a5 = v26;
LABEL_19:
            if (++v17 >= (unint64_t)__dst) {
              return v13;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v13;
}

uint64_t ParseInternalTagString(char *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)a1;
  uint64_t v4 = cstdlib_strchr(a1, 95);
  if (v4)
  {
    unsigned __int8 v5 = 0;
    do
    {
      char *v4 = 0;
      *(unsigned char *)(a2 + v5++) = cstdlib_atoi(v3);
      uint64_t v3 = (unsigned __int8 *)(v4 + 1);
      uint64_t v4 = cstdlib_strchr(v4 + 1, 95);
    }
    while (v4);
    uint64_t v4 = (char *)v5;
  }
  uint64_t result = cstdlib_atoi(v3);
  v4[a2] = result;
  return result;
}

uint64_t UNICORN__mfs_ParamMap_UnMapSection(uint64_t result)
{
  uint64_t v1 = result;
  for (uint64_t i = 0; i != 80; i += 16)
  {
    uint64_t v3 = v1 + i;
    uint64_t v4 = *(void *)(v1 + i + 1592);
    if (v4)
    {
      uint64_t result = brk_DataUnmap(*(void *)(*(void *)(v1 + 1072) + 24), *(void *)(v3 + 1584), v4);
      *(void *)(v3 + 1592) = 0;
    }
  }
  return result;
}

float mfs_Stub_ParamMap_GetDecodeLF0FromJV(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, float result)
{
  if (*(void *)(a2 + 2416))
  {
    uint64_t v12 = *(void *)(a2 + 568);
    *a6 = 2;
    if (*(_DWORD *)(a3 + 1712) <= 1u)
    {
      uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a3 + 1680), 208);
      *(void *)(a3 + 1680) = v13;
      if (!v13) {
        return result;
      }
      *(_DWORD *)(a3 + 1712) = *a6 + 50;
    }
    if (*(_DWORD *)(v12 + 6764))
    {
      uint64_t v14 = *(void *)(a2 + 568);
      if (*(_DWORD *)(v12 + 5984)) {
        a4 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (a4 / *(_DWORD *)(v14 + 5992)))
      }
           + *(_DWORD *)(v14 + 11564) / *(_DWORD *)a2 * (a4 % *(_DWORD *)a2);
      else {
        a4 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (a4 / *(_DWORD *)(v14 + 5992)));
      }
    }
    uint64_t v15 = (_WORD *)(*(void *)(a2 + 2416) + 24 * a4);
    LOWORD(result) = *v15;
    *(float *)&unsigned int v16 = (float)((float)LODWORD(result) / *(float *)(v12 + 6056)) + *(float *)(v12 + 6016);
    uint64_t v17 = *(float **)(a3 + 1680);
    *uint64_t v17 = *(float *)&v16;
    LOWORD(v16) = v15[1];
    uint64_t result = (float)((float)v16 / *(float *)(v12 + 6056)) + *(float *)(v12 + 6016);
    v17[*a6 - 1] = result;
    *(void *)(a5 + 16) = v17;
  }
  return result;
}

void UNICORN__mfs_Stub_ParamMap_GetAcousticVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, float a7)
{
  uint64_t v7 = *(void *)(a2 + 568);
  if ((*(_DWORD *)(v7 + 6772) - 5) >= 0xFFFFFFFE
    && *(void *)(a3 + 1896)
    && *(_DWORD *)(v7 + 11520) != 3)
  {
    int v9 = *(_DWORD *)(v7 + 6800);
    if (v9 == 9 || v9 == 7)
    {
      unsigned int v13 = a4;
      if (*(_DWORD *)(a2 + 1928))
      {
        mfs_Stub_ParamMap_GetDecodeLF0FromJV(a1, a2, a3, a4, a5, a6, a7);
      }
      else
      {
        unsigned int v16 = *a6;
        if (!*a6)
        {
          unsigned __int16 v33 = 0;
          mfs_GetMessageOffsetAndDur_Frames(a2, a4, 0, &v33);
          unsigned int v16 = v33;
          *a6 = v33;
        }
        if (*(_DWORD *)(a3 + 1712) < v16)
        {
          uint64_t v17 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a3 + 1680), 4 * (int)(v16 + 50));
          *(void *)(a3 + 1680) = v17;
          if (!v17) {
            return;
          }
          *(_DWORD *)(a3 + 1712) = *a6 + 50;
        }
        if (*(_DWORD *)(v7 + 6764))
        {
          uint64_t v18 = *(void *)(a2 + 568);
          if (*(_DWORD *)(v7 + 5984)) {
            unsigned int v13 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (v13 / *(_DWORD *)(v18 + 5992)))
          }
                + *(_DWORD *)(v18 + 11564) / *(_DWORD *)a2 * (v13 % *(_DWORD *)a2);
          else {
            unsigned int v13 = *(_DWORD *)(*(void *)(a2 + 848) + 4 * (v13 / *(_DWORD *)(v18 + 5992)));
          }
        }
        unsigned int v19 = (_WORD *)(*(void *)(a2 + 2416) + 24 * v13);
        LOWORD(a7) = *v19;
        *(float *)&unsigned int v20 = (float)((float)LODWORD(a7) / *(float *)(v7 + 6056)) + *(float *)(v7 + 6016);
        uint64_t v21 = *(float **)(a3 + 1680);
        *uint64_t v21 = *(float *)&v20;
        LOWORD(v20) = v19[1];
        unint64_t v22 = *a6;
        uint64_t v23 = (int)v22 - 1;
        v21[v23] = (float)((float)v20 / *(float *)(v7 + 6056)) + *(float *)(v7 + 6016);
        *(void *)(a5 + 16) = v21;
        if ((int)v22 < 4)
        {
          LODWORD(v24) = 1;
        }
        else
        {
          unint64_t v24 = v22 >> 1;
          unsigned int v25 = *(int **)(a3 + 1680);
          int v27 = *v25;
          uint64_t v26 = v25 + 1;
          int v28 = v27;
          unint64_t v29 = v24 - 1;
          do
          {
            *v26++ = v28;
            --v29;
          }
          while (v29);
        }
        if ((int)v24 < (int)v23)
        {
          uint64_t v30 = *(void *)(a3 + 1680);
          unsigned int v31 = (_DWORD *)(v30 + 4 * v24);
          unint64_t v32 = v23 - (unint64_t)v24;
          do
          {
            *v31++ = *(_DWORD *)(v30 + 4 * v23);
            --v32;
          }
          while (v32);
        }
      }
    }
  }
}

uint64_t mfs_bnfData_Init(int32x2_t *a1, int32x2_t *a2, uint64_t a3)
{
  __int32 v6 = a1[844].i32[1];
  a2[241].i32[0] = v6 == 1;
  uint64_t v7 = (__int8 *)a1[972];
  if (v7)
  {
    a2[242] = (int32x2_t)(v7 + 1);
    a2[241].i8[4] = *v7;
  }
  else
  {
    a2[242] = 0;
  }
  if (v6 != 1) {
    return 0;
  }
  unsigned int v8 = a1[846].i32[1] - 5;
  BOOL v9 = v8 < 0xFFFFFFFE;
  if (a1[775].i32[0]) {
    BOOL v10 = a1[774].i32[1] != 0;
  }
  else {
    BOOL v10 = 0;
  }
  __int32 v12 = a1[748].i32[0];
  int v13 = a2->i32[0];
  if (v12) {
    unsigned int v14 = a2->i32[0];
  }
  else {
    unsigned int v14 = 1;
  }
  a1[749].i32[0] = v14;
  if (v13 <= 0)
  {
    unsigned int v15 = 0;
    LODWORD(v18) = 0;
    a2[124].i32[1] = 0;
  }
  else
  {
    unsigned int v15 = 0;
    int32x2_t v16 = a2[5];
    if (v13 + 2 <= 3) {
      uint64_t v17 = 3;
    }
    else {
      uint64_t v17 = (v13 + 2);
    }
    uint64_t v18 = v17 - 2;
    unsigned int v19 = (unsigned int *)(*(void *)&v16 + 8);
    do
    {
      unsigned int v21 = *v19++;
      unsigned int v20 = v21;
      if (v15 <= v21) {
        unsigned int v15 = v20;
      }
      --v18;
    }
    while (v18);
    unsigned __int32 v22 = 0;
    a2[124].i32[1] = 0;
    uint64_t v23 = 2;
    do
    {
      uint64_t v24 = *(unsigned int *)(*(void *)&v16 + 4 * v23);
      if (v24)
      {
        unsigned int v25 = (unsigned __int32 *)(*(void *)(*(void *)&a2[97] + 8 * v23) + 44);
        do
        {
          unsigned __int32 v27 = *v25;
          v25 += 10;
          unsigned __int32 v26 = v27;
          if (v22 <= v27) {
            unsigned __int32 v22 = v26;
          }
          LODWORD(v18) = v26 + v18;
          --v24;
        }
        while (v24);
        a2[124].i32[1] = v22;
      }
      ++v23;
    }
    while (v23 != v17);
  }
  __int32 v28 = a1[1444].i32[1];
  if (!v28)
  {
    a1[1444].i32[1] = v18;
    unsigned __int32 v29 = a1[1443].i32[1] - v18;
    a1[1445].i32[0] = v29;
    goto LABEL_34;
  }
  if (v18 == v28)
  {
    unsigned __int32 v29 = a1[1445].u32[0];
LABEL_34:
    unsigned __int32 v30 = v29 + v18;
    a1[1445].i32[1] = v30;
    int32x2_t v31 = a1[1107];
    a2[106] = v31;
    if (!*(void *)&v31) {
      goto LABEL_117;
    }
    if (v29) {
      int v32 = 2;
    }
    else {
      int v32 = 1;
    }
    BOOL v44 = v12 == 0;
    a2[106] = (int32x2_t)(*(void *)&v31 + 4);
    uint64_t v33 = v32 + v15;
    int32x2_t v34 = a2[71];
    unsigned int v35 = *(_DWORD *)(*(void *)&v34 + 5992);
    int v36 = v29 / v35;
    if (v44) {
      int v37 = v36 + 1;
    }
    else {
      int v37 = v36;
    }
    a2[124].i32[0] = v30 / v35;
    a2[107].i32[0] = v33;
    if (v13 >= 1)
    {
      BOOL v84 = v10;
      int v38 = 0;
      uint64_t v39 = 2;
      while (1)
      {
        int v40 = *(_DWORD *)(*(void *)&a2[71] + 5984);
        double v41 = &a2[v39];
        v41[106] = (int32x2_t)heap_Calloc(*(void **)(a3 + 8), v33, 4);
        uint64_t v42 = heap_Calloc(*(void **)(a3 + 8), v33, 4);
        v41[114] = (int32x2_t)v42;
        int32x2_t v43 = v41[106];
        BOOL v44 = !*(void *)&v43 || v42 == 0;
        if (v44) {
          goto LABEL_117;
        }
        if (v40) {
          int v38 = 0;
        }
        uint64_t v45 = *(unsigned int *)(*(void *)&a2[5] + 4 * v39);
        if (v45)
        {
          double v46 = (_DWORD *)(*(void *)&v43 + 4);
          unint64_t v47 = (_DWORD *)(v42 + 4);
          uint64_t v48 = (int *)(*(void *)(*(void *)&a2[97] + 8 * v39) + 44);
          do
          {
            int v49 = *v48;
            v48 += 10;
            *v47++ = v37 + v38;
            *v46++ = v49;
            v38 += v49;
            --v45;
          }
          while (v45);
        }
        if (v39++ > a2->i32[0])
        {
          int32x2_t v34 = a2[71];
          unsigned int v14 = a1[749].u32[0];
          BOOL v10 = v84;
          BOOL v9 = v8 < 0xFFFFFFFE;
          break;
        }
      }
    }
    uint64_t v51 = heap_Calloc(*(void **)(a3 + 8), 2 * ((*(_DWORD *)(*(void *)&v34 + 11548) + 1) / v14), 4);
    a2[133] = (int32x2_t)v51;
    if (!v51)
    {
LABEL_117:
      uint64_t result = 2229280778;
      goto LABEL_118;
    }
    if (a1[1443].i32[1])
    {
      unsigned __int32 v52 = 0;
      int32x2_t v53 = a2[106];
      int32x2_t v54 = a2[71];
      __int32 v55 = a1[749].i32[0];
      do
      {
        unsigned int v56 = *(_DWORD *)(*(void *)&v54 + 5992);
        if ((int)(v52 - v55) < 0) {
          int v57 = 0;
        }
        else {
          int v57 = *(_DWORD *)(*(void *)&v53 + 4 * ((v52 - v55) / v56));
        }
        unsigned int v58 = v52 + v55;
        if (v58 >= *(_DWORD *)(*(void *)&v54 + 11548) + 1) {
          int v59 = 0;
        }
        else {
          int v59 = *(_DWORD *)(*(void *)&v53 + 4 * (v58 / v56));
        }
        int v60 = *(_DWORD *)(*(void *)&v53 + 4 * (v52 / v56));
        *(_DWORD *)(v51 + 4 * (2 * v60)) = v57;
        *(_DWORD *)(v51 + 4 * ((2 * v60) | 1u)) = v59;
        __int32 v55 = a1[749].i32[0];
        v52 += v55;
      }
      while (v52 < a1[1443].i32[1]);
    }
    int32x2_t v61 = a1[975];
    if (*(void *)&v61 && (a2[126] = (int32x2_t)(*(void *)&v61 + 16), unsigned int v62 = a1[976].i32[0] - 16, v62 > 3))
    {
      unsigned int v63 = (unsigned char *)a1[972];
      if (!v63)
      {
        unsigned int v64 = v62 >> 2;
        LODWORD(v63) = a1[841].i32[1];
LABEL_73:
        a2[190].i32[1] = 1;
        a2[125] = 0;
        int32x2_t v65 = vadd_s32(a1[973], (int32x2_t)0x10FFFFFFF0);
        a2[191] = vrev64_s32(v65);
        if (!v63)
        {
          if (v64 <= 1) {
            LODWORD(v63) = 1;
          }
          else {
            LODWORD(v63) = v64;
          }
          LOBYTE(v63) = v65.i32[0] / v63;
        }
        goto LABEL_78;
      }
    }
    else
    {
      unsigned int v63 = (unsigned char *)a1[972];
      if (!v63)
      {
        LODWORD(v63) = a1[841].i32[1];
        if (!v63)
        {
          uint64_t result = 2229280785;
          goto LABEL_118;
        }
        unsigned int v64 = 0;
        goto LABEL_73;
      }
    }
    a2[190].i32[1] = 0;
    a2[125] = (int32x2_t)(v63 + 16);
    a2[191] = 0;
    LOBYTE(v63) = *v63;
LABEL_78:
    a2[190].i8[0] = (char)v63;
    int32x2_t v66 = a1[1122];
    if (v66) {
      a2[127] = (int32x2_t)(*(void *)&v66 + 16);
    }
    int32x2_t v67 = a1[1125];
    if (v67) {
      a2[128] = (int32x2_t)(*(void *)&v67 + 16);
    }
    int32x2_t v68 = a1[1152];
    if (v68) {
      a2[129] = (int32x2_t)(*(void *)&v68 + 16);
    }
    if (v10)
    {
      int32x2_t v69 = a1[1167];
      if (v69) {
        a2[130] = (int32x2_t)(*(void *)&v69 + 16);
      }
    }
    int32x2_t v70 = a1[1182];
    if (v70) {
      a2[131] = (int32x2_t)(*(void *)&v70 + 16);
    }
    if (v8 <= 0xFFFFFFFD)
    {
      int32x2_t v71 = a1[1137];
      if (v71) {
        a2[132] = (int32x2_t)(*(void *)&v71 + 16);
      }
    }
    if (a2->i32[0] < 1)
    {
      uint64_t result = 0;
      goto LABEL_118;
    }
    uint64_t v72 = 0;
    uint64_t v73 = a2[107].u32[0];
    size_t v74 = (uint64_t *)&a2[134];
    while (1)
    {
      int v75 = *(void **)(a3 + 8);
      if (a2[190].i32[1]) {
        v74[58] = heap_Calloc(v75, v73, 4);
      }
      else {
        *size_t v74 = heap_Calloc(v75, v73, 8);
      }
      __int32 v76 = a2[190].i32[1];
      if (v76 == 1)
      {
        if (!v74[58]) {
          goto LABEL_117;
        }
      }
      else if (!v76 && !*v74)
      {
        goto LABEL_117;
      }
      if (a2[126])
      {
        uint64_t v77 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[8] = v77;
        if (!v77) {
          goto LABEL_117;
        }
      }
      if (a2[127])
      {
        uint64_t v78 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        __int16 v74[16] = v78;
        if (!v78) {
          goto LABEL_117;
        }
      }
      if (a2[128])
      {
        uint64_t v79 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[24] = v79;
        if (!v79) {
          goto LABEL_117;
        }
      }
      if (a2[129])
      {
        uint64_t v80 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[32] = v80;
        if (!v80) {
          goto LABEL_117;
        }
      }
      if (a2[130])
      {
        uint64_t v81 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
        v74[40] = v81;
        if (!v81) {
          goto LABEL_117;
        }
      }
      if (v8 <= 0xFFFFFFFD)
      {
        if (a2[132])
        {
          uint64_t v82 = heap_Calloc(*(void **)(a3 + 8), v73, 8);
          v74[48] = v82;
          if (!v82) {
            goto LABEL_117;
          }
        }
      }
      uint64_t v83 = v72 + 2;
      initClusterData((uint64_t)a2, (uint64_t)a1, v72 + 2, v9, v10);
      uint64_t result = 0;
      ++v72;
      ++v74;
      if (v83 > a2->i32[0]) {
        goto LABEL_118;
      }
    }
  }
  uint64_t result = 2229280768;
LABEL_118:
  a2[241].i8[4] = a2[190].i8[0];
  return result;
}

uint64_t initClusterData(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(result + 40) + 4 * a3);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3 - 2;
    unsigned int v8 = (void *)(result + 8 * v7);
    BOOL v9 = v8 + 116;
    BOOL v10 = v8 + 192;
    unint64_t v11 = v8 + 134;
    __int32 v12 = v8 + 142;
    int v13 = v8 + 150;
    unsigned int v14 = v8 + 158;
    unsigned int v15 = v8 + 166;
    int32x2_t v16 = v8 + 174;
    uint64_t v17 = v8 + 182;
    do
    {
      int v18 = *(_DWORD *)(a2 + 5984);
      if (v18) {
        int v18 = *(_DWORD *)(*(void *)(result + 568) + 11564) / *(_DWORD *)result * v7;
      }
      uint64_t v19 = *(unsigned int *)(*v9 + 4 * v6 + 4);
      if (*(_DWORD *)(result + 1524)) {
        *(_DWORD *)(*v10 + 4 * v6 + 4) = v19 * *(unsigned __int8 *)(result + 1520);
      }
      else {
        *(void *)(*v11 + 8 * v6 + 8) = *(void *)(result + 1000)
      }
                                       + v19 * *(unsigned __int8 *)(result + 1520);
      uint64_t v20 = *(void *)(result + 1008);
      if (v20) {
        *(void *)(*v12 + 8 * v6 + 8) = v20 + 4 * v19;
      }
      unsigned int v21 = v18 + v19;
      uint64_t v22 = *(void *)(result + 1016);
      if (v22) {
        *(void *)(*v13 + 8 * v6 + 8) = v22 + 2 * v21;
      }
      uint64_t v23 = *(void *)(result + 1024);
      if (v23) {
        *(void *)(*v14 + 8 * v6 + 8) = v23 + 2 * v21;
      }
      uint64_t v24 = *(void *)(result + 1032);
      if (v24) {
        *(void *)(*v15 + 8 * v6 + 8) = v24 + v21;
      }
      if (a5)
      {
        uint64_t v25 = *(void *)(result + 1040);
        if (v25) {
          *(void *)(*v16 + 8 * v6 + 8) = v25 + v21;
        }
      }
      if (a4)
      {
        uint64_t v26 = *(void *)(result + 1056);
        if (v26) {
          *(void *)(*v17 + 8 * v6 + 8) = v26 + 2 * v21;
        }
      }
      ++v6;
    }
    while (v5 != v6);
  }
  return result;
}

void *mfs_bnfData_DeInit(void *result, uint64_t a2)
{
  uint64_t v2 = (int *)result;
  if (*((_DWORD *)result + 482) == 1)
  {
    if (*(int *)result >= 1)
    {
      uint64_t v4 = result + 108;
      uint64_t v5 = 1;
      do
      {
        uint64_t v6 = v4[84];
        if (v6)
        {
          heap_Free(*(void **)(a2 + 8), v6);
          v4[84] = 0;
        }
        uint64_t v7 = v4[26];
        if (v7)
        {
          heap_Free(*(void **)(a2 + 8), v7);
          v4[26] = 0;
        }
        uint64_t v8 = v4[34];
        if (v8)
        {
          heap_Free(*(void **)(a2 + 8), v8);
          v4[34] = 0;
        }
        uint64_t v9 = v4[42];
        if (v9)
        {
          heap_Free(*(void **)(a2 + 8), v9);
          v4[42] = 0;
        }
        uint64_t v10 = v4[50];
        if (v10)
        {
          heap_Free(*(void **)(a2 + 8), v10);
          v4[50] = 0;
        }
        uint64_t v11 = v4[58];
        if (v11)
        {
          heap_Free(*(void **)(a2 + 8), v11);
          v4[58] = 0;
        }
        uint64_t v12 = v4[66];
        if (v12)
        {
          heap_Free(*(void **)(a2 + 8), v12);
          v4[66] = 0;
        }
        if (*v4)
        {
          heap_Free(*(void **)(a2 + 8), *v4);
          uint64_t *v4 = 0;
        }
        uint64_t v13 = v4[8];
        if (v13)
        {
          heap_Free(*(void **)(a2 + 8), v13);
          v4[8] = 0;
        }
        uint64_t v14 = v4[74];
        if (v14)
        {
          heap_Free(*(void **)(a2 + 8), v14);
          v4[74] = 0;
        }
        ++v5;
        ++v4;
      }
      while (v5 <= *v2);
    }
    unsigned int v15 = *(void **)(a2 + 8);
    uint64_t v16 = *((void *)v2 + 133);
    return heap_Free(v15, v16);
  }
  else
  {
    *((unsigned char *)result + 1932) = 0;
    result[242] = 0;
  }
  return result;
}

double mfs_bnfData_sse(float *a1, float *a2, unsigned int a3)
{
  if (!a3) {
    return 0.0;
  }
  uint64_t v3 = a3;
  double result = 0.0;
  do
  {
    float v5 = *a1++;
    float v6 = v5;
    float v7 = *a2++;
    *(float *)&double result = *(float *)&result + (float)((float)(v6 - v7) * (float)(v6 - v7));
    --v3;
  }
  while (v3);
  return result;
}

char *mfs_bnfData_Delta(char *result, char *a2, unsigned int a3, unsigned char *a4)
{
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      char v6 = *result++;
      char v5 = v6;
      char v7 = *a2++;
      *a4++ = v5 - v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

float mfs_bnfData_Delta_flt(float *a1, float *a2, unsigned int a3, float *a4)
{
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      float v5 = *a1++;
      float v6 = v5;
      float v7 = *a2++;
      float result = v6 - v7;
      *a4++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}