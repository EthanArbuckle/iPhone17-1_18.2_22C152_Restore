void sub_2201C0000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t MauiStreamOpen(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = a1;
  uint64_t v9 = 2147483655;
  if (a3)
  {
    if (a4)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        v10 = objc_msgSend(NSString, "stringWithCString:encoding:", a3, objc_msgSend(NSString, "defaultCStringEncoding"));
        v11 = objc_msgSend(NSString, "stringWithCString:encoding:", a4, objc_msgSend(NSString, "defaultCStringEncoding"));
        uint64_t v9 = [v8 open:v10 mode:v11 outPointer:a5];
      }
    }
  }

  return v9;
}

uint64_t MauiMappingOpen(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  return TTSMauiVocalizerDataMappingImplOpenWithFunctionPointer(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, const void *, const char *, uint64_t *))MauiStreamOpen);
}

void sub_2201C0924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_2201C0E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MauiProcCallback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = [v5 processingCallback:a4];
  }
  else {
    uint64_t v6 = 2147483655;
  }

  return v6;
}

void sub_2201C2AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2201C2F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

int *TTSVocalizerDataClassCreate(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  theString = a1;
  id v13 = a2;
  v66 = a6;
  id v68 = a7;
  v14 = (int *)malloc_type_calloc(1uLL, 0x70uLL, 0x1070040A66C06C2uLL);
  v14[7] = -1;
  v15 = [MEMORY[0x263F7EEA0] sharedInstance];
  v67 = [v15 resourceWithVoiceId:v68];

  v69 = [v67 contentPath];
  if (!v69) {
    goto LABEL_51;
  }
  *((void *)v14 + 9) = CFStringCreateCopy(0, theString);
  *((void *)v14 + 10) = a3;
  *((void *)v14 + 11) = a4;
  *((void *)v14 + 12) = a5;
  if (v66) {
    Copy = (__CFString *)CFStringCreateCopy(0, v66);
  }
  else {
    Copy = 0;
  }
  *((void *)v14 + 13) = Copy;
  id v17 = v69;
  v18 = Copy;
  id v19 = v17;
  v64 = v18;
  v20 = (void *)[v19 mutableCopy];
  [v20 appendString:@"/"];
  uint64_t v21 = *((void *)v14 + 10);
  if (v21 == 6 || v21 == 1)
  {
    v22 = [MEMORY[0x263F08850] defaultManager];
    id v74 = 0;
    v23 = [v22 contentsOfDirectoryAtPath:v20 error:&v74];
    id v24 = v74;

    if (v24)
    {
      v25 = AXTTSLogCommon();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        TTSVocalizerDataClassCreate_cold_4((uint64_t)v24, v25);
      }
    }
    else
    {
      uint64_t v26 = [v23 indexOfObjectPassingTest:&__block_literal_global_0];
      if (v26 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v25 = AXTTSLogCommon();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          TTSVocalizerDataClassCreate_cold_3((uint64_t *)v14 + 13, v25);
        }
      }
      else
      {
        v25 = [v23 objectAtIndex:v26];
        [v20 appendString:v25];
      }
    }
  }
  else
  {
    [v20 appendString:@"broker.hdr.asset"];
  }
  v27 = [MEMORY[0x263F08850] defaultManager];
  char v28 = [v27 fileExistsAtPath:v20];

  if (v28)
  {
    v29 = v20;
  }
  else
  {
    v29 = (void *)[v19 mutableCopy];

    [v29 appendString:@"/"];
    [v29 appendString:@"broker.hdr"];
  }
  int v30 = [v29 getFileSystemRepresentation:v76 maxLength:1024];

  if (v30)
  {
    memset(&v75, 0, sizeof(v75));
    if (!stat(v76, &v75))
    {
      int v55 = open(v76, 0);
      if ((v55 & 0x80000000) == 0)
      {
        off_t st_size = v75.st_size;
        v57 = mmap(0, v75.st_size, 1, 2, v55, 0);
        if (v57 == (void *)-1)
        {
          v63 = AXTTSLogCommon();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
            TTSVocalizerDataClassCreate_cold_2((uint64_t)v76, v63);
          }

          close(v55);
        }
        else
        {
          v14[7] = v55;
          *(void *)v14 = v57;
          *((void *)v14 + 4) = st_size;
        }
      }
    }
    uint64_t v31 = *(void *)v14;
    *((void *)v14 + 1) = *(void *)v14;
    if (!v31) {
      goto LABEL_42;
    }
LABEL_24:
    v32 = objc_msgSend(NSString, "stringWithUTF8String:");
    id v73 = 0;
    v33 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"<gender>(.*)</gender>" options:1 error:&v73];
    id v34 = v73;
    if (v34)
    {
      v35 = AXTTSLogCommon();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
        TTSVocalizerDataClassCreate_cold_1((uint64_t)v34, v35);
      }
    }
    *(void *)&v75.st_dev = 0;
    v75.st_ino = (__darwin_ino64_t)&v75;
    *(void *)&v75.st_uid = 0x3032000000;
    *(void *)&v75.st_rdev = __Block_byref_object_copy__0;
    v75.st_atimespec.tv_sec = (__darwin_time_t)__Block_byref_object_dispose__0;
    v75.st_atimespec.tv_nsec = 0;
    uint64_t v36 = [v32 length];
    v70[0] = MEMORY[0x263EF8330];
    v70[1] = 3221225472;
    v70[2] = ___DirInfoInitializeBrokerInfoAtPath_block_invoke_1007;
    v70[3] = &unk_26455D410;
    v72 = &v75;
    id v37 = v32;
    id v71 = v37;
    objc_msgSend(v33, "enumerateMatchesInString:options:range:usingBlock:", v37, 0, 0, v36, v70);
    *((void *)v14 + 11) = 0;
    if ([*(id *)(v75.st_ino + 40) isEqualToString:@"Female"])
    {
      uint64_t v38 = 2;
    }
    else
    {
      if (![*(id *)(v75.st_ino + 40) isEqualToString:@"Male"])
      {
LABEL_33:
        id v39 = v13;
        unint64_t v40 = *((void *)v14 + 4);
        size_t v41 = v40 - 7;
        if (v40 >= 7
          && ((uint64_t v42 = *(void *)v14, **(_DWORD **)v14 == 1634100580)
            ? (BOOL v43 = *(_DWORD *)(*(void *)v14 + 3) == 1953264993)
            : (BOOL v43 = 0),
              v43))
        {
          v58 = (char *)memchr((void *)(v42 + 7), 10, v41);
          if (v58)
          {
            v59 = v58;
            size_t v60 = (size_t)&v58[-v42 - 7];
            if (v60)
            {
              v61 = malloc_type_malloc(v60 + 1, 0x100004077774924uLL);
              *((void *)v14 + 2) = v61;
              memcpy(v61, (const void *)(*(void *)v14 + 7), v60);
              *(unsigned char *)(*((void *)v14 + 2) + v60) = 0;
              uint64_t v42 = *(void *)v14;
              unint64_t v40 = *((void *)v14 + 4);
            }
            if ((unint64_t)&v59[-v42] < v40 - 1) {
              v62 = v59 + 1;
            }
            else {
              v62 = 0;
            }
            *(void *)v14 = v62;
            *((void *)v14 + 1) = v42;
            goto LABEL_41;
          }
        }
        else if (v64)
        {
          size_t v44 = CFStringGetMaximumSizeForEncoding([(__CFString *)v64 length], 0x8000100u) + 1;
          v45 = malloc_type_malloc(v44, 0x9464F8ECuLL);
          *((void *)v14 + 2) = v45;
          [(__CFString *)v64 getCString:v45 maxLength:v44 encoding:4];
        }
        *((void *)v14 + 1) = *(void *)v14;
LABEL_41:

        id v13 = v39;
        _Block_object_dispose(&v75, 8);

        goto LABEL_42;
      }
      uint64_t v38 = 1;
    }
    *((void *)v14 + 11) = v38;
    goto LABEL_33;
  }
  if (*(void *)v14) {
    goto LABEL_24;
  }
LABEL_42:

  size_t v46 = [v19 maximumLengthOfBytesUsingEncoding:4];
  v47 = malloc_type_malloc(v46, 0xD253E7BuLL);
  if ([v19 getFileSystemRepresentation:v47 maxLength:v46])
  {
    uint64_t v48 = v14[10];
    v14[10] = v48 + 1;
    *(void *)&v14[2 * v48 + 12] = v47;
  }
  else
  {
    free(v47);
  }
  CFStringRef v49 = TTSVocalizerCopyPathForCommonResources();
  CFStringRef v50 = v49;
  if (v49)
  {
    CFIndex MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v49);
    v52 = malloc_type_malloc(MaximumSizeOfFileSystemRepresentation, 0xAEC2B0EEuLL);
    if (CFStringGetFileSystemRepresentation(v50, (char *)v52, MaximumSizeOfFileSystemRepresentation))
    {
      uint64_t v53 = v14[10];
      v14[10] = v53 + 1;
      *(void *)&v14[2 * v53 + 12] = v52;
    }
    else
    {
      free(v52);
    }
    CFRelease(v50);
  }

LABEL_51:
  return v14;
}

void sub_2201C3B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TTSVocalizerDataClassSupportsVoiceParamters(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v11 = a2;
  id v12 = a6;
  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v13 = a1[10];
  unsigned int v14 = v13 == a3;
  if (a3 == 1) {
    goto LABEL_18;
  }
  if (v13 != a3 || a4 && a1[11] != a4)
  {
    BOOL v15 = 0;
    if (v12) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  if (!a5)
  {
    BOOL v15 = 1;
    if (v12) {
      goto LABEL_10;
    }
LABEL_17:
    unsigned int v14 = v15;
    goto LABEL_18;
  }
  BOOL v15 = a1[12] == a5;
  if (!v12) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v16 = a1[13];
  if (v16) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = v15;
  }
  if (v16 && v15) {
    unsigned int v14 = objc_msgSend(v12, "isEqualToString:");
  }
LABEL_18:
  if (v11) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v14;
  }
  if (v11 && v14)
  {
    if ([v11 isEqualToString:a1[9]])
    {
      uint64_t v17 = a1[12] == a5;
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v17 = 0;
  }
LABEL_26:

  return v17;
}

uint64_t TTSVocalizerDataClassGetBrokerInfo(uint64_t result)
{
  if (result) {
    return *(void *)result;
  }
  return result;
}

__CFString *_TTSVocalizerResourceFileNameForResource(uint64_t a1)
{
  v1 = @"apdb.dat";
  if (a1 != 1) {
    v1 = 0;
  }
  if (a1) {
    return v1;
  }
  else {
    return @"user_rules.txt";
  }
}

uint64_t TTSNuanceRuleForLHP(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v4 = &stru_26D21B548;
  if (a4) {
    v4 = @"i";
  }
  return [NSString stringWithFormat:@"/\\b%@\\b/%@   -->   \\e\\\\toi=lhp\\\\%@\x1B\\\\toi=orth\\\\\n", a1, v4, a2];
}

id TTSNuanceRuleForIPA(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  v7 = (void *)MEMORY[0x263F7EEC0];
  id v8 = a1;
  uint64_t v9 = [v7 phonemesFromIPA:a2 language:a3];
  uint64_t v10 = &stru_26D21B548;
  if (a4) {
    uint64_t v10 = @"i";
  }
  id v11 = [NSString stringWithFormat:@"/\\b%@\\b/%@   -->   \\e\\\\toi=lhp\\\\%@\x1B\\\\toi=orth\\\\\n", v8, v10, v9];

  return v11;
}

id TTSVocalizerGetProgrammaticRuleData(void *a1, void *a2, void *a3, uint64_t a4, int a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = [MEMORY[0x263F089D8] string];
  if (a5)
  {
    uint64_t v13 = [NSString stringWithFormat:@"[header]\nlanguage = %@\ncharset = utf-8\n\n[data]\n", v10];
    [v12 appendString:v13];
  }
  [v12 appendString:@"/\\bvoiceover\\b/i   -->   \"VoiceOver\"\n"];
  [v12 appendString:@"/\\bimessage\\b/i   -->   \"iMessage\"\n"];
  [v12 appendString:@"/\\bBeatsX\\b/   -->   \"Beats X\"\n"];
  [v12 appendString:@"/\\bFXNOW\\b/   -->   \"FX Now\"\n"];
  [v12 appendString:@"/\\bDIRECTV\\b/   -->   \"DirectTV\"\n"];
  [v12 appendString:@"/\\bTouch ID\\b/i  -->  \"Touch I D\"\n"];
  [v12 appendString:@"/\\bFace ID\\b/i  -->  \"Face I D\"\n"];
  [v12 appendString:@"/\\biQueue\\b/i  -->  \"I Queue\"\n"];
  [v12 appendString:@"/\\bappleid.apple.com\\b/i  -->  \"AppleID .apple.com\"\n"];
  [v12 appendString:@"/(\\$[\\d]+)\\.00\\b/i   -->   \"$1\"\n"];
  [v12 appendString:@"/\\bcodebase\\b/i  -->  \"code base\"\n"];
  [v12 appendString:@"/\\bwifi\\b/i  -->  \"Wi-Fi\"\n"];
  [v12 appendString:@"/\\bwi fi\\b/i  -->  \"Wi-Fi\"\n"];
  [v12 appendString:@"/\\(U[Ss]\\)/  -->  \"(U S)\"\n"];
  [v12 appendString:@"/\\b(988|711)\\b/  -->  \"\\e\\\\tn=spell\\\\$1\\e\\\\tn=normal\\\\\"\n"];
  if (v11)
  {
    int v14 = [v11 isEqualToString:@"Tingting"];
    if ((unint64_t)(a4 - 1) <= 1 && v14)
    {
      [v12 appendString:@"/(.*?)\\?/   -->   \"$1 \\e\\\\eos\\\\\"\n"];
    }
    else
    {
      int v15 = [v11 isEqualToString:@"Oliver"];
      if (a4 == 5 && v15)
      {
        uint64_t v16 = TTSNuanceRuleForIPA(@"edit", @"ɛdɪt", (uint64_t)v9, 1);
        [v12 appendString:v16];
      }
    }
  }
  if ([v9 isEqualToString:@"hu-HU"])
  {
    uint64_t v17 = @"/−/  -->  \"-\"\n";
LABEL_15:
    [v12 appendString:v17];
    goto LABEL_16;
  }
  if (([v9 isEqualToString:@"pt-PT"] & 1) != 0
    || [v9 isEqualToString:@"pt-BR"])
  {
    uint64_t v17 = @"/\\bfreeform\\b/i  -->  \"Frifórm\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"de-DE"])
  {
    id v24 = [NSString stringWithFormat:@"/\\b%@\\b/%@   -->   \\e\\\\toi=lhp\\\\%@\x1B\\\\toi=orth\\\\\n", @"iTunes", @"i", @"'a&i.tu:ns"];
    [v12 appendString:v24];

    v25 = [NSString stringWithFormat:@"/\\b%@\\b/%@   -->   \\e\\\\toi=lhp\\\\%@\x1B\\\\toi=orth\\\\\n", @"App Store", @"i", @"'E:p.sto:R"];
    [v12 appendString:v25];

    uint64_t v26 = [NSString stringWithFormat:@"/\\b%@\\b/%@   -->   \\e\\\\toi=lhp\\\\%@\x1B\\\\toi=orth\\\\\n", @"YouTube", @"i", @"'ju:.tu:b"];
    [v12 appendString:v26];

    v27 = TTSNuanceRuleForIPA(@"stand", @"ʃtan.d", (uint64_t)v9, 1);
    [v12 appendString:v27];

    uint64_t v17 = @"/\\bOEPNV\\b/  -->  \"Ö P N V\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"id-ID"])
  {
    [v12 appendString:@"/\\bmata\\b/i  -->  \"ma ta\"\n"];
    uint64_t v17 = @"/\\bbaca\\b/i  -->  \"ba ka\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"ms-MY"])
  {
    uint64_t v17 = @"/\\bescape\\b/i  -->  \"es-cape\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"it-IT"])
  {
    char v28 = @"mio";
    v29 = @"ˈmi.o";
LABEL_32:
    int v30 = TTSNuanceRuleForIPA(v28, (uint64_t)v29, (uint64_t)v9, 1);
    [v12 appendString:v30];

    goto LABEL_16;
  }
  if ([v9 isEqualToString:@"el-GR"])
  {
    [v12 appendString:@"/τηλ\\. εκπομπές/i  -->  \"τηλεοπτικές εκπομπές\"\n"];
    uint64_t v17 = @"/Τηλ\\.\\s+(\\e\\\\pause=325\\\\)?\\s+εκπομπές/i  -->  \"Τηλεοπτικές εκπομπές\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"fi-FI"])
  {
    [v12 appendString:@"/\\bap\\.(?=\\s|$)/  -->  \"aamupäivä(llä)\"\n"];
    [v12 appendString:@"/\\bApple TV\\b/i  -->  \"Apple teevee\"\n"];
    [v12 appendString:@"/\\b(1)\\s*h\\b/  -->  \"$1 huone\"\n"];
    [v12 appendString:@"/\\b([\\d]+)\\s*h\\b/  -->  \"$1 huonetta\"\n"];
    uint64_t v17 = @"/\\bp([\\d]{4,})\\b/  -->  \"p, $1\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"ru-RU"])
  {
    uint64_t v17 = @"/(^|\\s)ви(?=\\s|$)/  -->  \"вы\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"en-GB"])
  {
    uint64_t v31 = TTSNuanceRuleForIPA(@"profoundness", @"'pɻo͡ʊ.ˈfa͡ʊnd.nɪs", (uint64_t)v9, 1);
    [v12 appendString:v31];

    v32 = TTSNuanceRuleForIPA(@"purchases", @"ˈpɜɻ.t͡ʃɪ.sɪz", (uint64_t)v9, 1);
    [v12 appendString:v32];

    v33 = TTSNuanceRuleForIPA(@"programmes", @"ˈpɻo͡ʊ.ˈgɻæmz", (uint64_t)v9, 1);
    [v12 appendString:v33];

    char v28 = @"cheque";
    v29 = @"ˈt͡ʃɛk";
    goto LABEL_32;
  }
  if ([v9 isEqualToString:@"en-IE"])
  {
    uint64_t v17 = @"/\\bhe\\b/i   -->   \"hee\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"en-US"])
  {
    id v34 = [NSString stringWithFormat:@"/\\b%@\\b/%@   -->   \\e\\\\toi=lhp\\\\%@\x1B\\\\toi=orth\\\\\n", @"pasting", @"i", @"'pe&I.stInK"];
    [v12 appendString:v34];

    v35 = TTSNuanceRuleForIPA(@"fleizach", @"ˈfla͡ɪ.zæk", (uint64_t)v9, 1);
    [v12 appendString:v35];

    uint64_t v36 = TTSNuanceRuleForIPA(@"nguyen", @"ˈngu.wən", (uint64_t)v9, 1);
    [v12 appendString:v36];

    id v37 = TTSNuanceRuleForIPA(@"federighi", @"ˈfɛ.də.ˈɻi.gi", (uint64_t)v9, 1);
    [v12 appendString:v37];

    uint64_t v38 = TTSNuanceRuleForIPA(@"unsecured", @"ˈʌn.sɪ.ˈkjʊɻd", (uint64_t)v9, 1);
    [v12 appendString:v38];

    id v39 = TTSNuanceRuleForIPA(@"chess", @"ˈt͡ʃɛs", (uint64_t)v9, 1);
    [v12 appendString:v39];

    unint64_t v40 = TTSNuanceRuleForIPA(@"plugins", @"ˈplʌ.gɪnz", (uint64_t)v9, 1);
    [v12 appendString:v40];

    size_t v41 = TTSNuanceRuleForIPA(@"playdate", @"ˈple͡ɪ.ˈde͡ɪt", (uint64_t)v9, 1);
    [v12 appendString:v41];

    uint64_t v42 = TTSNuanceRuleForIPA(@"nigiri", @"nɪ.ˈgi.ɻi,", (uint64_t)v9, 1);
    [v12 appendString:v42];

    BOOL v43 = TTSNuanceRuleForIPA(@"ungroup", @"ˈʌn.ˈgɻup", (uint64_t)v9, 1);
    [v12 appendString:v43];

    size_t v44 = TTSNuanceRuleForIPA(@"pinnochio", @"pə.ˈno͡ʊ.ki.o͡ʊ", (uint64_t)v9, 1);
    [v12 appendString:v44];

    v45 = TTSNuanceRuleForIPA(@"hotspot", @"ˈhɑt.ˈspɑt", (uint64_t)v9, 1);
    [v12 appendString:v45];

    size_t v46 = TTSNuanceRuleForIPA(@"placeholder", @"ˈple͡ɪs.ˈho͡ʊ.dəɻ", (uint64_t)v9, 1);
    [v12 appendString:v46];

    v47 = TTSNuanceRuleForIPA(@"audiobooks", @"ˈɔ.di.o͡ʊ.ˈbʊks", (uint64_t)v9, 1);
    [v12 appendString:v47];

    uint64_t v48 = TTSNuanceRuleForIPA(@"audiobook", @"ˈɔ.di.o͡ʊ.ˈbʊk", (uint64_t)v9, 1);
    [v12 appendString:v48];

    CFStringRef v49 = TTSNuanceRuleForIPA(@"quebec", @"'kwɪ.bɛk", (uint64_t)v9, 1);
    [v12 appendString:v49];

    CFStringRef v50 = TTSNuanceRuleForIPA(@"emoji", @"ˈɪmo͡ʊ.d͡ʒi'", (uint64_t)v9, 1);
    [v12 appendString:v50];

    v51 = TTSNuanceRuleForIPA(@"emojis", @"ˈɪmo͡ʊ.d͡ʒiz'", (uint64_t)v9, 1);
    [v12 appendString:v51];

    v52 = TTSNuanceRuleForIPA(@"loupe", @"ˈlup", (uint64_t)v9, 1);
    [v12 appendString:v52];

    uint64_t v53 = TTSNuanceRuleForIPA(@"unsatisfied", @"ˈʌn.ˈsæ.tɪ.ˈsfa͡ɪd", (uint64_t)v9, 1);
    [v12 appendString:v53];

    v54 = TTSNuanceRuleForIPA(@"selfie", @"ˈsɛl.ˈfi", (uint64_t)v9, 1);
    [v12 appendString:v54];

    int v55 = TTSNuanceRuleForIPA(@"selfies", @"ˈsɛl.ˈfiz", (uint64_t)v9, 1);
    [v12 appendString:v55];

    v56 = TTSNuanceRuleForIPA(@"trebuchet", @"ˈtɻɛ.bjə.ˈʃe&I", (uint64_t)v9, 1);
    [v12 appendString:v56];

    v57 = TTSNuanceRuleForIPA(@"meme", @"ˈmim", (uint64_t)v9, 1);
    [v12 appendString:v57];

    v58 = TTSNuanceRuleForIPA(@"gigabytes", @"ˈgɪ.gə.ˈba͡ɪts", (uint64_t)v9, 1);
    [v12 appendString:v58];

    v59 = TTSNuanceRuleForIPA(@"deselect", @"ˈdi.sə.ˈlɛkt", (uint64_t)v9, 1);
    [v12 appendString:v59];

    size_t v60 = TTSNuanceRuleForIPA(@"headwind", @"ˈhɛd.ˈwɪnd", (uint64_t)v9, 1);
    [v12 appendString:v60];

    v61 = TTSNuanceRuleForIPA(@"spiderweb", @"ˈspa͡ɪ.dəɻ.ˈwɛb", (uint64_t)v9, 1);
    [v12 appendString:v61];

    v62 = TTSNuanceRuleForIPA(@"blindspot", @"ˈbla͡ɪn.ˈspɑt", (uint64_t)v9, 1);
    [v12 appendString:v62];

    v63 = TTSNuanceRuleForIPA(@"adobe", @"ə.ˈdo͡ʊ.bi", (uint64_t)v9, 1);
    [v12 appendString:v63];

    v64 = TTSNuanceRuleForIPA(@"unreachable", @"ˈʌn.ɻi.t͡ʃə.bəl", (uint64_t)v9, 1);
    [v12 appendString:v64];

    v65 = TTSNuanceRuleForIPA(@"dish", @"ˈdɪʃ", (uint64_t)v9, 1);
    [v12 appendString:v65];

    v66 = TTSNuanceRuleForIPA(@"loses", @"ˈlu.zɪz", (uint64_t)v9, 1);
    [v12 appendString:v66];

    v67 = TTSNuanceRuleForIPA(@"programmers", @"ˈpɻo͡ʊ.ˈgɻɛ.məɻz", (uint64_t)v9, 1);
    [v12 appendString:v67];

    id v68 = TTSNuanceRuleForIPA(@"licenses", @"ˈla͡ɪ.sən.sɪz", (uint64_t)v9, 1);
    [v12 appendString:v68];

    v69 = TTSNuanceRuleForIPA(@"offline", @"ˈɔ.ˈfla͡ɪn", (uint64_t)v9, 1);
    [v12 appendString:v69];

    v70 = TTSNuanceRuleForIPA(@"unpaired", @"ˈʌn.ˈpɛɻd", (uint64_t)v9, 1);
    [v12 appendString:v70];

    id v71 = TTSNuanceRuleForIPA(@"unforgettable", @"ˈʌn.fəɻ.ˈgɛ.də.bəl", (uint64_t)v9, 1);
    [v12 appendString:v71];

    v72 = TTSNuanceRuleForIPA(@"stamp", @"ˈstæmp", (uint64_t)v9, 1);
    [v12 appendString:v72];

    id v73 = TTSNuanceRuleForIPA(@"suica", @"ˈswi.kə", (uint64_t)v9, 1);
    [v12 appendString:v73];

    id v74 = TTSNuanceRuleForIPA(@"animoji", @"ˈæ.nə.ˈmo͡ʊ.ˈd͡ʒi", (uint64_t)v9, 1);
    [v12 appendString:v74];

    stat v75 = TTSNuanceRuleForIPA(@"invoicing", @"ɪn.ˈvɔ͡ɪ.sɪŋ", (uint64_t)v9, 1);
    [v12 appendString:v75];

    v76 = TTSNuanceRuleForIPA(@"pushes", @"ˈpʊ.ʃəs", (uint64_t)v9, 1);
    [v12 appendString:v76];

    uint64_t v77 = TTSNuanceRuleForIPA(@"spiky", @"ˈspa͡ɪ.ki", (uint64_t)v9, 1);
    [v12 appendString:v77];

    v78 = TTSNuanceRuleForIPA(@"micro", @"ˈma͡ɪ.kɻo͡ʊ", (uint64_t)v9, 1);
    [v12 appendString:v78];

    v79 = TTSNuanceRuleForIPA(@"arrhythmia", @"ˈɑ.ɻɪk.mjə", (uint64_t)v9, 1);
    [v12 appendString:v79];

    v80 = TTSNuanceRuleForIPA(@"pangea", @"ˈpæn.ˈd͡ʒi.ə", (uint64_t)v9, 1);
    [v12 appendString:v80];

    v81 = TTSNuanceRuleForIPA(@"strikethrough", @"ˈstɻa͡ɪk.ˈθɻu", (uint64_t)v9, 1);
    [v12 appendString:v81];

    v82 = TTSNuanceRuleForIPA(@"newsfeed", @"ˈnuz.ˈfid", (uint64_t)v9, 1);
    [v12 appendString:v82];

    v83 = TTSNuanceRuleForIPA(@"unassigned", @"ˈʌ.nə.ˈsa͡ɪnd", (uint64_t)v9, 1);
    [v12 appendString:v83];

    v84 = TTSNuanceRuleForIPA(@"atrial", @"ˈe͡ɪ.tɻi.əl", (uint64_t)v9, 1);
    [v12 appendString:v84];

    v85 = TTSNuanceRuleForIPA(@"corgi", @"ˈkɔɻ.gi", (uint64_t)v9, 1);
    [v12 appendString:v85];

    v86 = TTSNuanceRuleForIPA(@"depositions", @"ˈdɛ.pə.ˈzɪ.ʃənz", (uint64_t)v9, 1);
    [v12 appendString:v86];

    v87 = TTSNuanceRuleForIPA(@"elasticycle", @"ɪ.ˈlæ.stə.ˈsa͡ɪ.kəl", (uint64_t)v9, 1);
    [v12 appendString:v87];

    v88 = TTSNuanceRuleForIPA(@"politics", @"ˈpɔ.lɪ.ˈtɪks", (uint64_t)v9, 1);
    [v12 appendString:v88];

    v89 = TTSNuanceRuleForIPA(@"outlier", @"ˈa͡ʊt.ˈla͡ɪɻ", (uint64_t)v9, 1);
    [v12 appendString:v89];

    v90 = TTSNuanceRuleForIPA(@"outliers", @"ˈa͡ʊt.ˈla͡ɪɻz", (uint64_t)v9, 1);
    [v12 appendString:v90];

    v91 = TTSNuanceRuleForIPA(@"purposes", @"ˈpɜɻ.pə.sɪz", (uint64_t)v9, 1);
    [v12 appendString:v91];

    v92 = TTSNuanceRuleForIPA(@"undulate", @"ˈʌn.d͡ʒə.ˈle͡ɪt", (uint64_t)v9, 1);
    [v12 appendString:v92];

    v93 = TTSNuanceRuleForIPA(@"elastigirl", @"ɪ.ˈlæ.stə.ˈgɜɻl", (uint64_t)v9, 1);
    [v12 appendString:v93];

    v94 = TTSNuanceRuleForIPA(@"recuérdame", @"ɻɪ.ˈkɜɻ.ˈdʌ.mi", (uint64_t)v9, 1);
    [v12 appendString:v94];

    v95 = TTSNuanceRuleForIPA(@"frapuccino", @"ˈfɻæ.pə.ˈt͡ʃi.no͡ʊ", (uint64_t)v9, 1);
    [v12 appendString:v95];

    v96 = TTSNuanceRuleForIPA(@"cappuccino", @"ˈkæ.pə.ˈt͡ʃi.no͡ʊ", (uint64_t)v9, 1);
    [v12 appendString:v96];

    v97 = TTSNuanceRuleForIPA(@"latte", @"ˈlɑ.ˈte͡ɪ", (uint64_t)v9, 1);
    [v12 appendString:v97];

    v98 = TTSNuanceRuleForIPA(@"brulee", @"ˈbɻu.ˈle͡ɪ", (uint64_t)v9, 1);
    [v12 appendString:v98];

    v99 = TTSNuanceRuleForIPA(@"macchiatos", @"ˈmɑ.ki.ˈɑ.to͡ʊs", (uint64_t)v9, 1);
    [v12 appendString:v99];

    v100 = TTSNuanceRuleForIPA(@"decaf", @"ˈdi.ˈkæf", (uint64_t)v9, 1);
    [v12 appendString:v100];

    v101 = TTSNuanceRuleForIPA(@"chai", @"ˈt͡ʃa͡ɪ", (uint64_t)v9, 1);
    [v12 appendString:v101];

    v102 = TTSNuanceRuleForIPA(@"grande", @"ˈgɻɑn.ˈde͡ɪ", (uint64_t)v9, 1);
    [v12 appendString:v102];

    v103 = TTSNuanceRuleForIPA(@"youthberry", @"ˈjuθ.ˈbɛ.ɻi", (uint64_t)v9, 1);
    [v12 appendString:v103];

    v104 = TTSNuanceRuleForIPA(@"horchata", @"ˈɔɻ.ˈd͡ʒɑ.tə", (uint64_t)v9, 1);
    [v12 appendString:v104];

    v105 = TTSNuanceRuleForIPA(@"coconutmilk", @"ˈko͡ʊ.kə.ˈnʌt.ˈmɪlk", (uint64_t)v9, 1);
    [v12 appendString:v105];

    v106 = TTSNuanceRuleForIPA(@"fl oz", @"ˈflu.ɪ.ˈda͡ʊn.sɪs", (uint64_t)v9, 1);
    [v12 appendString:v106];

    v107 = TTSNuanceRuleForIPA(@"vegan", @"ˈvi.gən", (uint64_t)v9, 1);
    [v12 appendString:v107];

    v108 = TTSNuanceRuleForIPA(@"burrata", @"bə.ˈɻɑ.də", (uint64_t)v9, 1);
    [v12 appendString:v108];

    v109 = TTSNuanceRuleForIPA(@"panini", @"pə.ˈni.ni", (uint64_t)v9, 1);
    [v12 appendString:v109];

    v110 = TTSNuanceRuleForIPA(@"tabbouleh", @"tə.ˈbu.li", (uint64_t)v9, 1);
    [v12 appendString:v110];

    v111 = TTSNuanceRuleForIPA(@"fajita", @"fə.ˈhi.tə", (uint64_t)v9, 1);
    [v12 appendString:v111];

    v112 = TTSNuanceRuleForIPA(@"via", @"ˈvi.ə", (uint64_t)v9, 1);
    [v12 appendString:v112];

    v113 = TTSNuanceRuleForIPA(@"liblouis", @"ˈlɪ.ˈblu.i", (uint64_t)v9, 1);
    [v12 appendString:v113];

    v114 = TTSNuanceRuleForIPA(@"meta", @"ˈmɛ.tə", (uint64_t)v9, 1);
    [v12 appendString:v114];

    v115 = TTSNuanceRuleForIPA(@"ahmed", @"ˈɑh.mɛd", (uint64_t)v9, 1);
    [v12 appendString:v115];

    v116 = TTSNuanceRuleForIPA(@"tweeted", @"ˈtwi.tɪd", (uint64_t)v9, 1);
    [v12 appendString:v116];

    v117 = TTSNuanceRuleForIPA(@"birthdate", @"ˈbɜɻθ.ˈde͡ɪt", (uint64_t)v9, 1);
    [v12 appendString:v117];

    v118 = TTSNuanceRuleForIPA(@"rotate", @"ˈɻo͡ʊ.ˈte͡ɪt", (uint64_t)v9, 1);
    [v12 appendString:v118];

    v119 = TTSNuanceRuleForIPA(@"spiraling", @"ˈspa͡ɪ.ɻə.lɪŋ", (uint64_t)v9, 1);
    [v12 appendString:v119];

    v120 = TTSNuanceRuleForIPA(@"youtube", @"ˈju.ˈtub", (uint64_t)v9, 1);
    [v12 appendString:v120];

    v121 = TTSNuanceRuleForIPA(@"memoji", @"ˈmi.ˈmo͡ʊ.d͡ʒi", (uint64_t)v9, 1);
    [v12 appendString:v121];

    v122 = TTSNuanceRuleForIPA(@"glyph", @"ˈglɪf", (uint64_t)v9, 1);
    [v12 appendString:v122];

    v123 = TTSNuanceRuleForIPA(@"juneteenth", @"ˈd͡ʒun.ˈtinθ", (uint64_t)v9, 1);
    [v12 appendString:v123];

    v124 = TTSNuanceRuleForIPA(@"adventure", @"ˈæd.ˈvɛn.t͡ʃəɻ", (uint64_t)v9, 1);
    [v12 appendString:v124];

    v125 = TTSNuanceRuleForIPA(@"cheque", @"ˈt͡ʃɛk", (uint64_t)v9, 1);
    [v12 appendString:v125];

    v126 = TTSNuanceRuleForIPA(@"ebook", @"'i.bʊk", (uint64_t)v9, 1);
    [v12 appendString:v126];

    [v12 appendString:@"/-([\\d]+[a-zA-Z]+)\\b/  -->  \"negative $1\"\n"];
    [v12 appendString:@"/-(\\$)(\\d?(\\.\\d+))\\b/  -->  \"minus $1$2\"\n"];
    [v12 appendString:@"/\\bobamacare\\b/i  -->  \"Obama care\"\n"];
    [v12 appendString:@"/\\b([S|s]tu)\\b/i  -->  \"stew\"\n"];
    [v12 appendString:@"/\\blightyear\\b/i  -->  \"light year\"\n"];
    [v12 appendString:@"/\\bbullseye\\b/i  -->  \"bulls eye\"\n"];
    [v12 appendString:@"/\\bfavourites\\b/i  -->  \"favorites\"\n"];
    [v12 appendString:@"/\\bfavourite\\b/i  -->  \"favorite\"\n"];
    [v12 appendString:@"/\\blifecycles\\b/i  -->  \"life cycles\"\n"];
    [v12 appendString:@"/\\blifecycle\\b/i  -->  \"life cycle\"\n"];
    [v12 appendString:@"/\\blivestream\\b/i  -->  \"live stream\"\n"];
    [v12 appendString:@"/\\bbreastfeeding\\b/i  -->  \"breast feeding\"\n"];
    [v12 appendString:@"/\\bmoonrise\\b/i  -->  \"moon rise\"\n"];
    [v12 appendString:@"/\\bmoonset\\b/i  -->  \"moon set\"\n"];
    [v12 appendString:@"/\\bhbogo(\\b|\\.)/i  -->  \" \\e/+'e&It&S_'bi_'o&U\\e/+ go \"\n"];
    uint64_t v17 = @"/\\bwebpage\\b/i  -->  \"web page\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"ja-JP"])
  {
    [v12 appendString:@"/半濁点キー/  -->  \"はんだくてんキー\"\n"];
    [v12 appendString:@"/未満/  -->  \"みまん\"\n"];
    [v12 appendString:@"/\\bwallet\\b/i  -->  \"ウォレット\"\n"];
    [v12 appendString:@"/\\bapp store\\b/i --> \"アップストアー\"\n"];
    uint64_t v17 = @"/\\bipod touch\\b/i --> \"アイポッドタッチ\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"ko-KR"])
  {
    [v12 appendString:@"/\\banimoji\\b/i   -->   \"애니모지\"\n"];
    uint64_t v17 = @"/닭/   -->   \"닥\"\n";
    goto LABEL_15;
  }
  if ([v9 isEqualToString:@"bg-BG"])
  {
    uint64_t v17 = @"/\\bразстояние (\\d{0,4}(?:[.,]\\d{1,3})*)m\\b/i   -->   \"разстояние $1 метра\"\n";
    goto LABEL_15;
  }
LABEL_16:
  if ([v9 hasPrefix:@"en"])
  {
    [v12 appendString:@"/\\bHawaii\\s+Five-0\\b/i  -->  \"Hawaii Five-O\"\n"];
    [v12 appendString:@"/\\bscreenshot(s)?\\b/i  -->  \"screen shot$1\"\n"];
    [v12 appendString:@"/\\biPhone X\\b/i  -->  \"iPhone ten\"\n"];
    [v12 appendString:@"/\\beSim\\b/  -->  \"E Sim\"\n"];
    [v12 appendString:@"/\\bapr\\b\\s{1}([\\d]{1,2})/i  -->  \"April $1\"\n"];
    [v12 appendString:@"/\\bAPR\\b/  -->  \"A P R\"\n"];
    v18 = TTSNuanceRuleForIPA(@"shazam", @"ʃə.ˈzæm", (uint64_t)v9, 1);
    [v12 appendString:v18];

    [v12 appendString:@"/\\bMar\\s+([\\d]{1,2})\\b/i  -->  \"March $1\"\n"];
    [v12 appendString:@"/\\bJun\\s+([\\d]{1,2})\\b/i  -->  \"June $1\"\n"];
    [v12 appendString:@"/\\bgov\\.([a-z]{2,5})\\b/i  -->  \"gov dot $1\"\n"];
    [v12 appendString:@"/\\bavg\\.\\b/i  -->  \"average\"\n"];
    [v12 appendString:@"/\\bspacex\\b/  -->  \"space X\"\n"];
    [v12 appendString:@"/\\bheartrate\\b/i  -->  \"heart rate\"\n"];
    [v12 appendString:@"/\\bphotoshop\\b/i  -->  \"photo shop\"\n"];
    [v12 appendString:@"/\\bsubdials\\b/i  -->  \"sub dials\"\n"];
    [v12 appendString:@"/\\bstrikethrough\\b/i  -->  \"strike through\"\n"];
    [v12 appendString:@"/\\bchildcare\\b/i  -->  \"child care\"\n"];
    [v12 appendString:@"/\\bsupergirl\\b/i  -->  \"super girl\"\n"];
    [v12 appendString:@"/\\bdatagraph\\b/i  -->  \"data graph\"\n"];
    [v12 appendString:@"/\\bgameplay\\b/i  -->  \"game play\"\n"];
    [v12 appendString:@"/\\bnewsletter(s)?\\b/i  -->  \"news letter$1\"\n"];
    [v12 appendString:@"/\\blive\\s+(photo|video|loops|listen|titles|TV|caption(s)?)\\b/i --> \"\\e\\\\toi=lhp\\\\la&Iv\x1B\\\\toi=orth\\\\ $1\"\n"];
    [v12 appendString:@"/\\bsidebar\\b/i  -->  \"side bar\"\n"];
    [v12 appendString:@"/\\bUberEATS\\b/i  -->  \"Uber Eats\"\n"];
    [v12 appendString:@"/\\btoothache\\b/i  -->  \"tooth ache\"\n"];
    [v12 appendString:@"/\\bautopilot\\b/i  -->  \"auto pilot\"\n"];
    [v12 appendString:@"/\\b76er(s)?\\b/i  -->  \"seventy six er$1\"\n"];
    [v12 appendString:@"/\\bapplewifi\\b/i  -->  \"Apple WiFi\"\n"];
    [v12 appendString:@"/\\bMedical\\s+ID\\b/i  -->  \"Medical I D\"\n"];
    [v12 appendString:@"/\\bunfavorite\\b/i  -->  \"un-favorite\"\n"];
    [v12 appendString:@"/\\bVS\\b/  -->  \"V S\"\n"];
    [v12 appendString:@"/\\bunselected\\b/i  -->  \"un-selected\"\n"];
    [v12 appendString:@"/\\b1h\\s+ago\\b/i  -->  \"1 hour ago\"\n"];
    [v12 appendString:@"/\\b([\\d]+)h\\s+ago\\b/i  -->  \"$1 hours ago\"\n"];
    [v12 appendString:@"/\\b1m\\s+ago\\b/i  -->  \"1 minute ago\"\n"];
    [v12 appendString:@"/\\b([\\d]+)m\\s+ago\\b/i  -->  \"$1 minutes ago\"\n"];
    [v12 appendString:@"/\\bschooltime\\b/i  -->  \"school time\"\n"];
    [v12 appendString:@"/\\bundescribed\\b/i  -->  \"un-described\"\n"];
    [v12 appendString:@"/\\bhiit\\b/i  -->  \"hit\"\n"];
    id v19 = TTSNuanceRuleForIPA(@"wind down", @"ˈwa͡ɪnd.ˈda͡ʊn", (uint64_t)v9, 1);
    [v12 appendString:v19];

    [v12 appendString:@"/\\bmuted-color(s)?\\b/i  -->  \"muted color$1\"\n"];
    [v12 appendString:@"/\\blocation-based\\b/i  -->  \"location based\"\n"];
    [v12 appendString:@"/\\biPadOS\\b/i   -->   \"\\e/+'a&I.p@d'o&U'Es\\e/+\"\n"];
    v20 = @"/\\btürkiye\\b/i  -->  \"Turkey\"\n";
  }
  else
  {
    if (![v9 hasPrefix:@"no"]) {
      goto LABEL_21;
    }
    v20 = @"/\\beg\\b/i  -->  \"ieg\"\n";
  }
  [v12 appendString:v20];
LABEL_21:
  char v127 = 0;
  uint64_t v21 = [v12 dataUsingEncoding:4];
  v22 = (void *)[v21 mutableCopy];

  [v22 appendBytes:&v127 length:1];

  return v22;
}

id TTSVocalizerAddProgrammaticRules(uint64_t a1, void *a2, int a3)
{
  if (a1)
  {
    a1 = TTSVocalizerGetProgrammaticRuleData(*(void **)(a1 + 72), a2, *(void **)(a1 + 104), *(void *)(a1 + 96), a3);
    uint64_t v3 = vars8;
  }
  return (id)a1;
}

id TTSVocalizerDataClassCopyResourceURL(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v6 = 0;
    goto LABEL_24;
  }
  if (a2 == 2)
  {
    if (*(void *)(a1 + 48))
    {
      v4 = NSURL;
      objc_msgSend(NSString, "stringWithUTF8String:");
      id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
      uint64_t v6 = [v4 URLWithString:v5];
      goto LABEL_23;
    }
    v7 = AXTTSLogCommon();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      TTSVocalizerDataClassCopyResourceURL_cold_1(a1, v7);
    }
  }
  id v8 = @"apdb.dat";
  if (a2 != 1) {
    id v8 = 0;
  }
  if (!a2) {
    id v8 = @"user_rules.txt";
  }
  id v5 = v8;
  int v9 = *(_DWORD *)(a1 + 40);
  if (v9 < 1)
  {
LABEL_22:
    uint64_t v6 = 0;
    goto LABEL_23;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(a1 + 48 + 8 * v10);
    if (v11) {
      break;
    }
LABEL_21:
    if (++v10 >= v9) {
      goto LABEL_22;
    }
  }
  id v12 = (void *)[objc_alloc(NSURL) initFileURLWithFileSystemRepresentation:v11 isDirectory:1 relativeToURL:0];
  if (!v12 || ([0 URLByAppendingPathComponent:v5], (uint64_t v13 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_20:

    int v9 = *(_DWORD *)(a1 + 40);
    goto LABEL_21;
  }
  uint64_t v6 = (void *)v13;
  int v14 = [MEMORY[0x263F08850] defaultManager];
  int v15 = [v6 path];
  char v16 = [v14 fileExistsAtPath:v15];

  if ((v16 & 1) == 0)
  {

    goto LABEL_20;
  }

LABEL_23:
LABEL_24:

  return v6;
}

uint64_t TTSVocalizerDataClassGetPathForDataId(uint64_t result, unsigned char *a2, char *a3, size_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  result = 0;
  if (!a4 || !a3 || !a2 || *(int *)(v5 + 40) < 1) {
    return result;
  }
  int v7 = *a2;
  if (*a2)
  {
    unint64_t v8 = 0;
    int v9 = a2 + 1;
    do
    {
      if (v7 == 47) {
        LOBYTE(v7) = 95;
      }
      __source[v8] = v7;
      unint64_t v10 = v8 + 1;
      int v7 = v9[v8];
      if (!v9[v8]) {
        break;
      }
    }
    while (v8++ < 0x3FF);
    result = 0;
    strcpy(__src, ".dat");
    if (v10 - 1 >= 0x3FB) {
      return result;
    }
  }
  else
  {
    unint64_t v10 = 0;
    strcpy(__src, ".dat");
  }
  strcpy(&__source[v10], __src);
  if (*(int *)(v5 + 40) < 1) {
    return 0;
  }
  uint64_t v12 = 0;
  size_t v13 = v10 + 5;
  while (1)
  {
    size_t v14 = strlcpy(a3, *(const char **)(v5 + 48 + 8 * v12), a4);
    if (v14 + 1 < a4) {
      a3[v14++] = 47;
    }
    if (v14 + v13 <= a4)
    {
      strlcpy(&a3[v14], __source, v13);
      memset(&v15, 0, sizeof(v15));
      if (!stat(a3, &v15)) {
        break;
      }
    }
    if (++v12 >= *(int *)(v5 + 40)) {
      return 0;
    }
  }
  return 1;
}

void TTSVocalizerDataClassDestroy(int *a1)
{
  if (a1)
  {
    if (a1[10] >= 1)
    {
      uint64_t v2 = 0;
      do
        free(*(void **)&a1[2 * v2++ + 12]);
      while (v2 < a1[10]);
    }
    uint64_t v3 = (void *)*((void *)a1 + 1);
    if (v3) {
      munmap(v3, *((void *)a1 + 4));
    }
    int v4 = a1[7];
    if ((v4 & 0x80000000) == 0) {
      close(v4);
    }
    uint64_t v5 = (void *)*((void *)a1 + 2);
    if (v5) {
      free(v5);
    }
    uint64_t v6 = (const void *)*((void *)a1 + 9);
    if (v6) {
      CFRelease(v6);
    }
    int v7 = (const void *)*((void *)a1 + 13);
    if (v7) {
      CFRelease(v7);
    }
    free(a1);
  }
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t (**TTSVocalizerGetHeapImpl())(int, size_t size)
{
  return &TTSVocalizerGetHeapImpl___HeapImpl;
}

void *_TTSVocalizerHeapImplMalloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x2B6DDB67uLL);
}

void *_TTSVocalizerHeapImplCalloc(int a1, size_t count, size_t size)
{
  return malloc_type_calloc(count, size, 0xE744C1EBuLL);
}

void *_TTSVocalizerHeapImplRealloc(int a1, void *ptr, size_t size)
{
  return malloc_type_realloc(ptr, size, 0xD5DC1A3AuLL);
}

void _TTSVocalizerHeapImplFree(int a1, void *a2)
{
}

uint64_t (**TTSVocalizerGetCriticalSectionImpl())()
{
  return TTSVocalizerGetCriticalSectionImpl___CriticalSectionImpl;
}

uint64_t _TTSVocalizerCriticalSectionImplOpen(uint64_t a1, uint64_t a2, pthread_mutex_t **a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 2147483655;
  }
  uint64_t v4 = 2147483912;
  uint64_t v5 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  if (v5)
  {
    uint64_t v6 = v5;
    v8.__sig = 0;
    *(void *)v8.__opaque = 0;
    pthread_mutexattr_init(&v8);
    pthread_mutexattr_settype(&v8, 2);
    if (pthread_mutex_init(v6, &v8))
    {
      free(v6);
      uint64_t v4 = 2147483918;
    }
    else
    {
      uint64_t v4 = 0;
      *a3 = v6;
    }
    pthread_mutexattr_destroy(&v8);
  }
  return v4;
}

pthread_mutex_t *_TTSVocalizerCriticalSectionImplClose(pthread_mutex_t *result)
{
  if (result)
  {
    v1 = result;
    if (pthread_mutex_destroy(result))
    {
      return (pthread_mutex_t *)2147483918;
    }
    else
    {
      free(v1);
      return 0;
    }
  }
  return result;
}

pthread_mutex_t *_TTSVocalizerCriticalSectionImplEnter(pthread_mutex_t *result)
{
  if (result)
  {
    if (pthread_mutex_lock(result)) {
      return (pthread_mutex_t *)2147483918;
    }
    else {
      return 0;
    }
  }
  return result;
}

pthread_mutex_t *_TTSVocalizerCriticalSectionImplLeave(pthread_mutex_t *result)
{
  if (result)
  {
    if (pthread_mutex_unlock(result)) {
      return (pthread_mutex_t *)2147483918;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t (**TTSVocalizerGetDataStreamImpl())()
{
  return TTSVocalizerGetDataStreamImpl___DataStreamImpl;
}

uint64_t _TTSVocalizerDataStreamImplOpen(uint64_t a1, uint64_t a2, unsigned char *a3, const char *a4, FILE **a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = 2147483655;
  if (a3 && a4 && a5)
  {
    unint64_t v10 = AXTTSLogCommon();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _TTSVocalizerDataStreamImplOpen_cold_2((uint64_t)a3, v10);
    }

    if (TTSVocalizerDataClassGetPathForDataId(a1, a3, __filename, 0x400uLL))
    {
      uint64_t v11 = AXTTSLogCommon();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        _TTSVocalizerDataStreamImplOpen_cold_1((uint64_t)__filename, v11);
      }

      uint64_t v12 = fopen(__filename, a4);
      if (v12)
      {
        size_t v13 = v12;
        uint64_t result = 0;
        *a5 = v13;
      }
      else
      {
        return 2147483651;
      }
    }
    else
    {
      return 2147483668;
    }
  }
  return result;
}

uint64_t _TTSVocalizerDataStreamImplClose(FILE *a1)
{
  if (!a1) {
    return 2147483655;
  }
  if (fclose(a1)) {
    return 2147483907;
  }
  return 0;
}

uint64_t _TTSVocalizerDataStreamImplRead(void *a1, size_t a2, size_t a3, FILE *a4)
{
  if (a4) {
    return fread(a1, a2, a3, a4);
  }
  else {
    return 0;
  }
}

uint64_t _TTSVocalizerDataStreamImplSeek(FILE *a1, uint64_t a2, int a3, int a4)
{
  if (!a1) {
    return 2147483655;
  }
  if (a3 == 1) {
    int v4 = 1;
  }
  else {
    int v4 = 2 * (a3 == 2);
  }
  if (a4 == -1) {
    a2 = -a2;
  }
  if (fseek(a1, a2, v4) == -1) {
    return 2147483908;
  }
  else {
    return 0;
  }
}

FILE *_TTSVocalizerDataStreamImplGetSize(FILE *result)
{
  if (result)
  {
    memset(&v2, 0, sizeof(v2));
    int v1 = fileno(result);
    if (fstat(v1, &v2)) {
      return 0;
    }
    else {
      return (FILE *)LODWORD(v2.st_size);
    }
  }
  return result;
}

uint64_t _TTSVocalizerDataStreamImplGetError(FILE *a1)
{
  if (!a1) {
    return 2147483655;
  }
  if (ferror(a1)) {
    return 2147483652;
  }
  return 0;
}

uint64_t _TTSVocalizerDataStreamImplWrite(const void *a1, size_t a2, size_t a3, FILE *a4)
{
  if (a4) {
    return fwrite(a1, a2, a3, a4);
  }
  else {
    return 0;
  }
}

uint64_t (**TTSVocalizerGetDataMappingImpl())()
{
  return TTSVocalizerGetDataMappingImpl___DataMappingImpl;
}

uint64_t _TTSVocalizerDataMappingImplOpen(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4)
{
  uint64_t v17 = 0;
  if (a4)
  {
    pthread_mutex_lock(&__MappingInfoCacheLock);
    if (__MappingInfoCache && (Value = CFDictionaryGetValue((CFDictionaryRef)__MappingInfoCache, a3)) != 0)
    {
      if (*((unsigned char *)Value + 56))
      {
        uint64_t v9 = 0;
        ++Value[5];
        *a4 = Value;
LABEL_20:
        pthread_mutex_unlock(&__MappingInfoCacheLock);
        return v9;
      }
      int v10 = 0;
    }
    else
    {
      int v10 = 1;
    }
    uint64_t v9 = _TTSVocalizerDataStreamImplOpen(a1, v7, a3, "r", &v17);
    if (!v9)
    {
      if (a3)
      {
        uint64_t v11 = (const void *)strlen(a3);
        uint64_t v12 = malloc_type_malloc(0x40uLL, 0x109004021B9ABA4uLL);
        if (v11 && (size_t v13 = (char *)malloc_type_malloc((size_t)v11 + 1, 0x100004077774924uLL), (v11 = v13) != 0))
        {
          strcpy(v13, a3);
          int v14 = 1;
        }
        else
        {
          int v14 = 0;
        }
      }
      else
      {
        uint64_t v12 = malloc_type_malloc(0x40uLL, 0x109004021B9ABA4uLL);
        int v14 = 0;
        uint64_t v11 = 0;
      }
      uint64_t v9 = 0;
      v12[6] = v11;
      v12[1] = 0;
      v12[2] = 0;
      *uint64_t v12 = v17;
      *((_OWORD *)v12 + 2) = xmmword_2206DA8C0;
      *((unsigned char *)v12 + 56) = 0;
      *a4 = v12;
      if ((v10 & v14) == 1)
      {
        uint64_t v15 = (__CFDictionary *)__MappingInfoCache;
        if (!__MappingInfoCache)
        {
          CFDictionaryKeyCallBacks keyCallBacks = *(CFDictionaryKeyCallBacks *)byte_26D20AA90;
          uint64_t v15 = CFDictionaryCreateMutable(0, 0, &keyCallBacks, 0);
          __MappingInfoCache = (uint64_t)v15;
        }
        CFDictionarySetValue(v15, v11, v12);
        uint64_t v9 = 0;
      }
    }
    goto LABEL_20;
  }
  return 2147483655;
}

uint64_t _TTSVocalizerDataMappingImplClose(FILE **a1)
{
  if (!a1) {
    return 2147483655;
  }
  pthread_mutex_lock(&__MappingInfoCacheLock);
  if (a1[5] == (FILE *)1)
  {
    stat v2 = a1[6];
    if (v2 && __MappingInfoCache && CFDictionaryGetValue((CFDictionaryRef)__MappingInfoCache, a1[6]) == a1) {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)__MappingInfoCache, v2);
    }
    pthread_mutex_unlock(&__MappingInfoCacheLock);
    uint64_t v3 = a1[1];
    if (v3)
    {
      int v4 = munmap(v3, (size_t)a1[3]);
      BOOL v5 = v4 != 0;
      if (v4) {
        uint64_t v6 = 2147483918;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      BOOL v5 = 0;
      uint64_t v6 = 0;
    }
    if (*a1 && !v5)
    {
      if (fclose(*a1)) {
        uint64_t v6 = 2147483907;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    uint64_t v7 = a1[6];
    if (v7) {
      free(v7);
    }
    free(a1);
  }
  else
  {
    a1[5] = (FILE *)((char *)a1[5] - 1);
    pthread_mutex_unlock(&__MappingInfoCacheLock);
    return 0;
  }
  return v6;
}

uint64_t _TTSVocalizerDataMappingImplMap(uint64_t a1, unint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v8 = getpagesize();
  uint64_t result = 2147483655;
  if (!a1 || !a4) {
    return result;
  }
  off_t v10 = a2 / v8 * v8;
  unint64_t v11 = a2 % v8;
  pthread_mutex_lock(&__MappingInfoCacheLock);
  uint64_t v12 = *(void *)(a1 + 32);
  if ((v12 & 0x8000000000000000) == 0 && *(unsigned char *)(a1 + 56)) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 8)) {
    _TTSVocalizerDataMappingImplMap_cold_2();
  }
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = _TTSVocalizerDataStreamImplGetSize(*(FILE **)a1);
  }
  if (!*(void *)a1) {
    goto LABEL_13;
  }
  int v13 = fileno(*(FILE **)a1);
  if (v13 < 0) {
    goto LABEL_13;
  }
  int v14 = v13;
  size_t v15 = *(void *)(a1 + 16);
  char v16 = mmap(0, v15, 1, 2, v13, 0);
  *(void *)(a1 + 8) = v16;
  if (v16 != (void *)-1)
  {
    uint64_t v12 = 0;
    *(void *)(a1 + 24) = v15;
    *(unsigned char *)(a1 + 56) = 1;
LABEL_12:
    *(void *)(a1 + 32) = v12 + 1;
    goto LABEL_13;
  }
  if (a3)
  {
    unint64_t v31 = *a3;
    if (*a3)
    {
      unint64_t v32 = v31 + v11;
      v33 = mmap(0, v31 + v11, 1, 2, v14, v10);
      *(void *)(a1 + 8) = v33;
      if (v33 != (void *)-1)
      {
        if (*a3)
        {
          uint64_t v12 = 0;
          *(void *)(a1 + 24) = v32;
          goto LABEL_12;
        }
      }
    }
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
LABEL_13:
  int v17 = *(unsigned __int8 *)(a1 + 56);
  CFStringRef v18 = CFStringCreateWithCString(0, *(const char **)(a1 + 48), 0x8000100u);
  CFStringRef v19 = v18;
  if (*(unsigned char *)(a1 + 56))
  {
    if (CFStringHasPrefix(v18, @"uselect"))
    {
      unint64_t v20 = *a3;
      if (*a3 > 0x200000 && (double)*(unint64_t *)(a1 + 24) * 0.8 > (double)(v20 + a2))
      {
        uint64_t v21 = AXTTSLogCommon();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = *(void *)(a1 + 48);
          v35[0] = 67109634;
          v35[1] = v20;
          __int16 v36 = 1024;
          int v37 = a2;
          __int16 v38 = 2080;
          uint64_t v39 = v34;
          _os_log_debug_impl(&dword_2201BD000, v21, OS_LOG_TYPE_DEBUG, "-----------> Preheat: Preheating %u bytes of uselect starting at %u on same thread %s .....\n", (uint8_t *)v35, 0x18u);
        }

        double Current = CFAbsoluteTimeGetCurrent();
        unint64_t v23 = *(void *)(a1 + 8) + a2;
        unint64_t v24 = v23 + v20;
        while (v23 < v24)
          v23 += 4096;
        v25 = AXTTSLogCommon();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
          _TTSVocalizerDataMappingImplMap_cold_1(v20, v25, Current);
        }
      }
    }
  }
  if (v19) {
    CFRelease(v19);
  }
  pthread_mutex_unlock(&__MappingInfoCacheLock);
  if (*(void *)(a1 + 16) >= a2)
  {
    uint64_t v26 = *(void *)(a1 + 24);
    if (v17) {
      unint64_t v27 = a2;
    }
    else {
      unint64_t v27 = v11;
    }
    *a4 = *(void *)(a1 + 8) + v27;
    uint64_t result = 0;
    if (a3)
    {
      if (v17) {
        unint64_t v28 = a2;
      }
      else {
        unint64_t v28 = 0;
      }
      unint64_t v29 = v26 - v28;
      if (*a3 < v29 && *a3 != 0) {
        unint64_t v29 = *a3;
      }
      *a3 = v29;
    }
  }
  else
  {
    uint64_t result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t _TTSVocalizerDataMappingImplUnmap(uint64_t a1)
{
  if (!a1) {
    return 2147483655;
  }
  pthread_mutex_lock(&__MappingInfoCacheLock);
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 < 1;
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    uint64_t v5 = 2147483665;
  }
  else
  {
    uint64_t v5 = 0;
    *(void *)(a1 + 32) = v4;
  }
  if (!*(unsigned char *)(a1 + 56))
  {
    if (munmap(*(void **)(a1 + 8), *(void *)(a1 + 24)))
    {
      uint64_t v5 = 2147483918;
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 24) = 0;
    }
  }
  pthread_mutex_unlock(&__MappingInfoCacheLock);
  return v5;
}

uint64_t _TTSVocalizerDataMappingImplFreeze()
{
  return 0;
}

uint64_t (**TTSVocalizerGetLogImpl())()
{
  return TTSVocalizerGetLogImpl___LogImpl;
}

void _TTSVocalizerLogError(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  __sprintf_chk(v7, 0, 0x400uLL, "ERROR %u: ", a2);
  if (a3)
  {
    unsigned int v4 = 1;
    do
    {
      if (v4 != 1) {
        __strcat_chk();
      }
      __strcat_chk();
      __strcat_chk();
      __strcat_chk();
      unint64_t v5 = v4++;
    }
    while (v5 < a3);
  }
  uint64_t v6 = AXTTSLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    _TTSVocalizerLogError_cold_1((uint64_t)v7, v6);
  }
}

void _TTSVocalizerLogDiagnostic(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v5 = AXTTSLogCommon();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    _TTSVocalizerLogDiagnostic_cold_1(a3, a2, v5);
  }
}

BOOL _CompareBrokerNames(char *__s1, char *a2)
{
  if (__s1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (__s1)
  {
    if (a2) {
      return strcmp(__s1, a2) == 0;
    }
  }
  return result;
}

const char *_HashBrokerName(const char *result)
{
  if (result)
  {
    int v1 = result;
    BOOL result = (const char *)strlen(result);
    if (result)
    {
      uint64_t v2 = result;
      BOOL v3 = (char *)&v1[(void)result];
      BOOL result = (const char *)(v1[(void)result - 1] + (uint64_t)*v1);
      if (v2 != (const char *)1) {
        result += v1[1] + (uint64_t)*(v3 - 2);
      }
    }
  }
  return result;
}

CFStringRef TTSVocalizerCopyPathForCommonResources()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  CFURLRef v0 = TTSVocalizerCopyURLForFrameworkResourcesWithType();
  if (!v0) {
    return 0;
  }
  CFURLRef v1 = v0;
  CFURLRef v2 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x263EFFB08], v0, @"common", 1u);
  if (v2)
  {
    CFURLRef v3 = v2;
    memset(&v6, 0, sizeof(v6));
    if (CFURLGetFileSystemRepresentation(v2, 1u, buffer, 1024) && !stat((const char *)buffer, &v6))
    {
      CFStringRef v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
      CFRelease(v3);
      goto LABEL_7;
    }
    CFRelease(v3);
  }
  CFStringRef v4 = 0;
LABEL_7:
  CFRelease(v1);
  return v4;
}

CFURLRef TTSVocalizerCopyURLForFrameworkResourcesWithType()
{
  CFURLRef v0 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], @"/System/Library/PrivateFrameworks/TextToSpeechMauiSupport.framework", kCFURLPOSIXPathStyle, 1u);
  if (!v0) {
    return 0;
  }
  CFURLRef v1 = v0;
  CFURLRef v2 = CFBundleCreate(0, v0);
  CFURLRef v3 = CFBundleCopyResourceURL(v2, @"TTSResources", 0, 0);
  CFRelease(v1);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

uint64_t vplatform_dynlib_Open(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 2147483654;
  if (a5)
  {
    *a5 = 0;
    uint64_t v9 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
    if (v9)
    {
      off_t v10 = v9;
      *uint64_t v9 = a2;
      unint64_t v11 = dlopen(a3, 130);
      v10[1] = v11;
      if (v11)
      {
        uint64_t v5 = 0;
        *a5 = v10;
      }
      else
      {
        free(v10);
        return 2147483661;
      }
    }
    else
    {
      return 2147483658;
    }
  }
  return v5;
}

uint64_t vplatform_dynlib_Close(void **a1)
{
  if (!a1) {
    return 2147483654;
  }
  uint64_t v2 = (dlclose(a1[1]) != 0) << 31;
  free(a1);
  return v2;
}

uint64_t vplatform_dynlib_GetSymbol()
{
  return 2147483649;
}

uint64_t vplatform_dynlib_Exists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *a5 = 0;
  return 2147483649;
}

uint64_t (**TTSMauiVocalizerGetDLDImpl())()
{
  return IDynLib;
}

uint64_t (**TTSMauiVocalizerGetHeapImpl())(int, size_t size)
{
  return &TTSMauiVocalizerGetHeapImpl___HeapImpl;
}

void *_TTSMauiVocalizerHeapImplMalloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0xB5C814A1uLL);
}

void *_TTSMauiVocalizerHeapImplCalloc(int a1, size_t count, size_t size)
{
  return malloc_type_calloc(count, size, 0x1701EE74uLL);
}

void *_TTSMauiVocalizerHeapImplRealloc(int a1, void *ptr, size_t size)
{
  return malloc_type_realloc(ptr, size, 0x66677C66uLL);
}

void _TTSMauiVocalizerHeapImplFree(int a1, void *a2)
{
}

uint64_t (**TTSMauiVocalizerGetCriticalSectionImpl())()
{
  return TTSMauiVocalizerGetCriticalSectionImpl___CriticalSectionImpl;
}

uint64_t _TTSMauiVocalizerCriticalSectionImplOpen(uint64_t a1, uint64_t a2, pthread_mutex_t **a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 2147483655;
  }
  uint64_t v4 = 2147483912;
  uint64_t v5 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  if (v5)
  {
    stat v6 = v5;
    v8.__sig = 0;
    *(void *)v8.__opaque = 0;
    pthread_mutexattr_init(&v8);
    pthread_mutexattr_settype(&v8, 2);
    if (pthread_mutex_init(v6, &v8))
    {
      free(v6);
      uint64_t v4 = 2147483918;
    }
    else
    {
      uint64_t v4 = 0;
      *a3 = v6;
    }
    pthread_mutexattr_destroy(&v8);
  }
  return v4;
}

pthread_mutex_t *_TTSMauiVocalizerCriticalSectionImplClose(pthread_mutex_t *result)
{
  if (result)
  {
    CFURLRef v1 = result;
    if (pthread_mutex_destroy(result))
    {
      return (pthread_mutex_t *)2147483918;
    }
    else
    {
      free(v1);
      return 0;
    }
  }
  return result;
}

pthread_mutex_t *_TTSMauiVocalizerCriticalSectionImplEnter(pthread_mutex_t *result)
{
  if (result)
  {
    if (pthread_mutex_lock(result)) {
      return (pthread_mutex_t *)2147483918;
    }
    else {
      return 0;
    }
  }
  return result;
}

pthread_mutex_t *_TTSMauiVocalizerCriticalSectionImplLeave(pthread_mutex_t *result)
{
  if (result)
  {
    if (pthread_mutex_unlock(result)) {
      return (pthread_mutex_t *)2147483918;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t (**TTSMauiVocalizerGetDataStreamImpl())()
{
  return TTSMauiVocalizerGetDataStreamImpl___DataStreamImpl;
}

uint64_t _TTSMauiVocalizerDataStreamImplOpen(uint64_t a1, uint64_t a2, unsigned char *a3, const char *a4, FILE **a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = 2147483655;
  if (a3 && a4 && a5)
  {
    off_t v10 = AXTTSLogCommon();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      _TTSVocalizerDataStreamImplOpen_cold_2((uint64_t)a3, v10);
    }

    if (TTSVocalizerDataClassGetPathForDataId(a1, a3, __filename, 0x400uLL))
    {
      unint64_t v11 = AXTTSLogCommon();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        _TTSVocalizerDataStreamImplOpen_cold_1((uint64_t)__filename, v11);
      }

      uint64_t v12 = fopen(__filename, a4);
      if (v12)
      {
        int v13 = v12;
        uint64_t result = 0;
        *a5 = v13;
      }
      else
      {
        return 2147483651;
      }
    }
    else
    {
      return 2147483668;
    }
  }
  return result;
}

uint64_t _TTSMauiVocalizerDataStreamImplClose(FILE *a1)
{
  if (!a1) {
    return 2147483655;
  }
  if (fclose(a1)) {
    return 2147483907;
  }
  return 0;
}

uint64_t _TTSMauiVocalizerDataStreamImplRead(void *a1, size_t a2, size_t a3, FILE *a4)
{
  if (a4) {
    return fread(a1, a2, a3, a4);
  }
  else {
    return 0;
  }
}

uint64_t _TTSMauiVocalizerDataStreamImplSeek(FILE *a1, uint64_t a2, int a3, int a4)
{
  if (!a1) {
    return 2147483655;
  }
  if (a3 == 1) {
    int v4 = 1;
  }
  else {
    int v4 = 2 * (a3 == 2);
  }
  if (a4 == -1) {
    a2 = -a2;
  }
  if (fseek(a1, a2, v4) == -1) {
    return 2147483908;
  }
  else {
    return 0;
  }
}

FILE *_TTSMauiVocalizerDataStreamImplGetSize(FILE *result)
{
  if (result)
  {
    memset(&v2, 0, sizeof(v2));
    int v1 = fileno(result);
    if (fstat(v1, &v2)) {
      return 0;
    }
    else {
      return (FILE *)v2.st_size;
    }
  }
  return result;
}

uint64_t _TTSMauiVocalizerDataStreamImplGetError(FILE *a1)
{
  if (!a1) {
    return 2147483655;
  }
  if (ferror(a1)) {
    return 2147483652;
  }
  return 0;
}

size_t _TTSMauiVocalizerDataStreamImplWrite(const void *a1, size_t a2, size_t a3, FILE *a4)
{
  if (a4) {
    return fwrite(a1, a2, a3, a4);
  }
  else {
    return 0;
  }
}

uint64_t TTSMauiVocalizerDataMappingImplOpenWithFunctionPointer(uint64_t a1, uint64_t a2, const void *a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, const void *, const char *, uint64_t *))
{
  uint64_t v19 = 0;
  if (a4)
  {
    pthread_mutex_lock(&__MappingInfoCacheLock_0);
    if (__MappingInfoCache_0 && (Value = CFDictionaryGetValue((CFDictionaryRef)__MappingInfoCache_0, a3)) != 0)
    {
      if (*((unsigned char *)Value + 56))
      {
        uint64_t v11 = 0;
        ++Value[5];
        *a4 = Value;
LABEL_20:
        pthread_mutex_unlock(&__MappingInfoCacheLock_0);
        return v11;
      }
      int v12 = 0;
    }
    else
    {
      int v12 = 1;
    }
    uint64_t v11 = a5(a1, a2, a3, "r", &v19);
    if (!v11)
    {
      if (a3)
      {
        int v13 = (const void *)strlen((const char *)a3);
        int v14 = malloc_type_malloc(0x40uLL, 0x109004021B9ABA4uLL);
        if (v13 && (v15 = (char *)malloc_type_malloc((size_t)v13 + 1, 0x100004077774924uLL), (int v13 = v15) != 0))
        {
          strcpy(v15, (const char *)a3);
          int v16 = 1;
        }
        else
        {
          int v16 = 0;
        }
      }
      else
      {
        int v14 = malloc_type_malloc(0x40uLL, 0x109004021B9ABA4uLL);
        int v16 = 0;
        int v13 = 0;
      }
      uint64_t v11 = 0;
      v14[6] = v13;
      v14[1] = 0;
      v14[2] = 0;
      void *v14 = v19;
      *((_OWORD *)v14 + 2) = xmmword_2206DA8C0;
      *((unsigned char *)v14 + 56) = 0;
      *a4 = v14;
      if ((v12 & v16) == 1)
      {
        int v17 = (__CFDictionary *)__MappingInfoCache_0;
        if (!__MappingInfoCache_0)
        {
          CFDictionaryKeyCallBacks keyCallBacks = *(CFDictionaryKeyCallBacks *)byte_26D20AC08;
          int v17 = CFDictionaryCreateMutable(0, 0, &keyCallBacks, 0);
          __MappingInfoCache_0 = (uint64_t)v17;
        }
        CFDictionarySetValue(v17, v13, v14);
        uint64_t v11 = 0;
      }
    }
    goto LABEL_20;
  }
  return 2147483655;
}

uint64_t (**TTSMauiVocalizerGetDataMappingImpl())()
{
  return TTSMauiVocalizerGetDataMappingImpl___DataMappingImpl;
}

uint64_t _TTSMauiVocalizerDataMappingImplOpen(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  return TTSMauiVocalizerDataMappingImplOpenWithFunctionPointer(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, const void *, const char *, uint64_t *))_TTSMauiVocalizerDataStreamImplOpen);
}

uint64_t _TTSMauiVocalizerDataMappingImplClose(FILE **a1)
{
  if (!a1) {
    return 2147483655;
  }
  pthread_mutex_lock(&__MappingInfoCacheLock_0);
  if (a1[5] == (FILE *)1)
  {
    stat v2 = a1[6];
    if (v2 && __MappingInfoCache_0 && CFDictionaryGetValue((CFDictionaryRef)__MappingInfoCache_0, a1[6]) == a1) {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)__MappingInfoCache_0, v2);
    }
    pthread_mutex_unlock(&__MappingInfoCacheLock_0);
    CFURLRef v3 = a1[1];
    if (v3)
    {
      int v4 = munmap(v3, (size_t)a1[3]);
      BOOL v5 = v4 != 0;
      if (v4) {
        uint64_t v6 = 2147483918;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      BOOL v5 = 0;
      uint64_t v6 = 0;
    }
    if (*a1 && !v5)
    {
      if (fclose(*a1)) {
        uint64_t v6 = 2147483907;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    uint64_t v7 = a1[6];
    if (v7) {
      free(v7);
    }
    free(a1);
  }
  else
  {
    a1[5] = (FILE *)((char *)a1[5] - 1);
    pthread_mutex_unlock(&__MappingInfoCacheLock_0);
    return 0;
  }
  return v6;
}

uint64_t _TTSMauiVocalizerDataMappingImplMap(uint64_t a1, unint64_t a2, unint64_t *a3, void *a4)
{
  int v8 = getpagesize();
  uint64_t result = 2147483655;
  if (!a1 || !a4) {
    return result;
  }
  off_t v10 = a2 / v8 * v8;
  unint64_t v11 = a2 % v8;
  pthread_mutex_lock(&__MappingInfoCacheLock_0);
  uint64_t v12 = *(void *)(a1 + 32);
  if ((v12 & 0x8000000000000000) == 0 && *(unsigned char *)(a1 + 56)) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 8)) {
    _TTSMauiVocalizerDataMappingImplMap_cold_1();
  }
  if (!*(void *)(a1 + 16)) {
    *(void *)(a1 + 16) = _TTSMauiVocalizerDataStreamImplGetSize(*(FILE **)a1);
  }
  if (!*(void *)a1) {
    goto LABEL_13;
  }
  int v13 = fileno(*(FILE **)a1);
  if (v13 < 0) {
    goto LABEL_13;
  }
  int v14 = v13;
  size_t v15 = *(void *)(a1 + 16);
  int v16 = mmap(0, v15, 1, 2, v13, 0);
  *(void *)(a1 + 8) = v16;
  if (v16 != (void *)-1)
  {
    uint64_t v12 = 0;
    *(void *)(a1 + 24) = v15;
    *(unsigned char *)(a1 + 56) = 1;
LABEL_12:
    *(void *)(a1 + 32) = v12 + 1;
    goto LABEL_13;
  }
  if (a3)
  {
    unint64_t v28 = *a3;
    if (*a3)
    {
      unint64_t v29 = v28 + v11;
      int v30 = mmap(0, v28 + v11, 1, 2, v14, v10);
      *(void *)(a1 + 8) = v30;
      if (v30 != (void *)-1)
      {
        if (*a3)
        {
          uint64_t v12 = 0;
          *(void *)(a1 + 24) = v29;
          goto LABEL_12;
        }
      }
    }
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
LABEL_13:
  int v17 = *(unsigned __int8 *)(a1 + 56);
  CFStringRef v18 = CFStringCreateWithCString(0, *(const char **)(a1 + 48), 0x8000100u);
  CFStringRef v19 = v18;
  if (*(unsigned char *)(a1 + 56))
  {
    if (CFStringHasPrefix(v18, @"uselect"))
    {
      unint64_t v20 = *a3;
      if (*a3 > 0x200000 && (double)*(unint64_t *)(a1 + 24) * 0.8 > (double)(v20 + a2))
      {
        unint64_t v21 = *(void *)(a1 + 8) + a2;
        unint64_t v22 = v21 + v20;
        while (v21 < v22)
          v21 += 4096;
      }
    }
  }
  if (v19) {
    CFRelease(v19);
  }
  pthread_mutex_unlock(&__MappingInfoCacheLock_0);
  if (*(void *)(a1 + 16) >= a2)
  {
    uint64_t v23 = *(void *)(a1 + 24);
    if (v17) {
      unint64_t v24 = a2;
    }
    else {
      unint64_t v24 = v11;
    }
    *a4 = *(void *)(a1 + 8) + v24;
    uint64_t result = 0;
    if (a3)
    {
      if (v17) {
        unint64_t v25 = a2;
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v26 = v23 - v25;
      if (*a3 < v26 && *a3 != 0) {
        unint64_t v26 = *a3;
      }
      *a3 = v26;
    }
  }
  else
  {
    uint64_t result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t _TTSMauiVocalizerDataMappingImplUnmap(uint64_t a1)
{
  if (!a1) {
    return 2147483655;
  }
  pthread_mutex_lock(&__MappingInfoCacheLock_0);
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 < 1;
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    uint64_t v5 = 2147483665;
  }
  else
  {
    uint64_t v5 = 0;
    *(void *)(a1 + 32) = v4;
  }
  if (!*(unsigned char *)(a1 + 56))
  {
    if (munmap(*(void **)(a1 + 8), *(void *)(a1 + 24)))
    {
      uint64_t v5 = 2147483918;
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 24) = 0;
    }
  }
  pthread_mutex_unlock(&__MappingInfoCacheLock_0);
  return v5;
}

uint64_t _TTSMauiVocalizerDataMappingImplFreeze()
{
  return 0;
}

uint64_t (**TTSMauiVocalizerGetLogImpl())()
{
  return TTSMauiVocalizerGetLogImpl___LogImpl;
}

void _TTSMauiVocalizerLogError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  char v28 = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (i) {
        __strcat_chk();
      }
      if (*(void *)(a4 + 8 * i)) {
        BOOL v10 = *(void *)(a5 + 8 * i) == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        __strcat_chk();
        __strcat_chk();
        __strcat_chk();
      }
    }
  }
  unint64_t v11 = NSString;
  uint64_t v12 = [NSNumber numberWithUnsignedInt:a2];
  int v13 = [v11 stringWithFormat:@"%@", v12];

  int v14 = TTSVocalizerErrors();
  size_t v15 = [v14 objectForKeyedSubscript:v13];

  if (v15)
  {
    int v16 = [v15 objectForKeyedSubscript:@"severity"];
    uint64_t v17 = [v15 objectForKeyedSubscript:@"text"];
    CFStringRef v18 = (void *)v17;
    CFStringRef v19 = &stru_26D21B548;
    if (v17) {
      CFStringRef v19 = (__CFString *)v17;
    }
    unint64_t v20 = v19;

    if ((int)[v16 intValue] <= 3)
    {
      unint64_t v21 = AXTTSLogCommon();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109634;
        int v23 = a2;
        __int16 v24 = 2112;
        unint64_t v25 = v20;
        __int16 v26 = 2080;
        unint64_t v27 = &v28;
        _os_log_error_impl(&dword_2201BD000, v21, OS_LOG_TYPE_ERROR, "MauiVocalizer: %d (%@): %s\n", buf, 0x1Cu);
      }
    }
  }
  else
  {
    int v16 = AXTTSLogCommon();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _TTSMauiVocalizerLogError_cold_1();
    }
  }
}

void _TTSMauiVocalizerLogDiagnostic()
{
  CFURLRef v0 = AXTTSLogCommon();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
    _TTSMauiVocalizerLogDiagnostic_cold_1();
  }
}

uint64_t (**TTSMauiVocalizerGetThreadImpl())()
{
  return TTSMauiVocalizerGetThreadImpl___ThreadImpl;
}

uint64_t _TTSMauiVocalizerGetThreadImplOpen(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = 2147483912;
  uint64_t v6 = malloc_type_malloc(0x10uLL, 0xB5C814A1uLL);
  *a3 = v6;
  if (!v6) {
    return 2147483654;
  }
  uint64_t v7 = v6;
  *((_DWORD *)v6 + 2) = 135972;
  int v8 = malloc_type_malloc(0x10uLL, 0xB5C814A1uLL);
  if (!v8)
  {
LABEL_7:
    free(a3);
    return v5;
  }
  uint64_t v9 = v8;
  BOOL v10 = malloc_type_malloc(8uLL, 0xB5C814A1uLL);
  *uint64_t v9 = v10;
  if (!v10)
  {
    free(v9);
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  v9[1] = a2;
  void *v7 = v9;
  return v5;
}

uint64_t _TTSMauiVocalizerGetThreadImplClose(_DWORD *a1)
{
  uint64_t result = 2147483654;
  if (a1)
  {
    if (a1[2] == 135972)
    {
      BOOL v3 = *(void ***)a1;
      if (*(void *)a1)
      {
        free(*v3);
        free(a1);
        free(v3);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t _TTSMauiVocalizerGetThreadImplStart(uint64_t a1, void *(__cdecl *a2)(void *), void *a3, size_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135972)
    {
      uint64_t v6 = *(pthread_t ***)a1;
      if (*(void *)a1)
      {
        memset(&v10, 0, sizeof(v10));
        pthread_attr_init(&v10);
        pthread_attr_setstacksize(&v10, a4);
        pthread_attr_setdetachstate(&v10, 1);
        pthread_attr_set_qos_class_np(&v10, QOS_CLASS_USER_INTERACTIVE, -1);
        if (pthread_create(*v6, &v10, a2, a3)) {
          return 2147483651;
        }
        else {
          return 0;
        }
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t _TTSMauiVocalizerGetThreadImplJoin(uint64_t a1, void **a2)
{
  uint64_t result = 2147483654;
  uint64_t v5 = a2;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135972)
    {
      uint64_t v4 = *(pthread_t ***)a1;
      if (v4)
      {
        if (a2) {
          a2 = &v5;
        }
        return (pthread_join(**v4, a2) != 0) << 31;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t _TTSMauiVocalizerGetThreadImplSleepMs(uint64_t a1, int a2)
{
  return 0;
}

uint64_t _TTSMauiVocalizerGetThreadImplThreadId(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    *a2 = 0;
    *a2 += pthread_self();
  }
  return 0;
}

uint64_t (**TTSMauiVocalizerGetSemaphoreImpl())()
{
  return TTSMauiVocalizerGetSemaphoreImpl___SemaphoreImpl;
}

uint64_t _TTSMauiVocalizerGetSemaphoreImplOpen(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void ****a5)
{
  uint64_t v7 = 2147483654;
  int v8 = (void ***)malloc_type_malloc(0x10uLL, 0xB5C814A1uLL);
  *a5 = v8;
  if (v8)
  {
    uint64_t v9 = v8;
    *((_DWORD *)v8 + 2) = 135973;
    pthread_attr_t v10 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0x1701EE74uLL);
    if (v10)
    {
      uint64_t v11 = v10;
      dispatch_semaphore_t v12 = dispatch_semaphore_create(a3);
      int v13 = *v11;
      void *v11 = v12;

      uint64_t v7 = 0;
      *uint64_t v9 = v11;
    }
    else
    {
      free(a5);
      return 2147483912;
    }
  }
  return v7;
}

uint64_t _TTSMauiVocalizerGetSemaphoreImplClose(void ***a1)
{
  uint64_t result = 2147483654;
  if (a1)
  {
    if (*((_DWORD *)a1 + 2) == 135973)
    {
      BOOL v3 = *a1;
      if (*a1)
      {
        uint64_t v4 = *v3;
        *BOOL v3 = 0;

        free(a1);
        free(v3);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t _TTSMauiVocalizerGetSemaphoreImplAcquire(uint64_t a1)
{
  uint64_t result = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135973)
    {
      BOOL v3 = *(dispatch_semaphore_t **)a1;
      if (v3)
      {
        dispatch_semaphore_wait(*v3, 0xFFFFFFFFFFFFFFFFLL);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

uint64_t _TTSMauiVocalizerGetSemaphoreImplRelease(uint64_t a1)
{
  uint64_t result = 2147483654;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 135973)
    {
      BOOL v3 = *(dispatch_semaphore_t **)a1;
      if (v3)
      {
        dispatch_semaphore_signal(*v3);
        return 0;
      }
      else
      {
        return 2147483916;
      }
    }
    else
    {
      return 2147483656;
    }
  }
  return result;
}

id TTSVocalizerErrors()
{
  if (TTSVocalizerErrors_onceToken != -1) {
    dispatch_once(&TTSVocalizerErrors_onceToken, &__block_literal_global_1);
  }
  CFURLRef v0 = (void *)TTSVocalizerErrors_vocalizerErrors;

  return v0;
}

void __TTSVocalizerErrors_block_invoke()
{
  CFURLRef v0 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  id v3 = [v0 pathForResource:@"vocalizer_errors" ofType:@"plist"];

  uint64_t v1 = [NSDictionary dictionaryWithContentsOfFile:v3];
  uint64_t v2 = (void *)TTSVocalizerErrors_vocalizerErrors;
  TTSVocalizerErrors_vocalizerErrors = v1;
}

BOOL _CompareBrokerNames_0(char *__s1, char *a2)
{
  if (__s1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (__s1)
  {
    if (a2) {
      return strcmp(__s1, a2) == 0;
    }
  }
  return result;
}

const char *_HashBrokerName_0(const char *result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL result = (const char *)strlen(result);
    if (result)
    {
      uint64_t v2 = result;
      id v3 = (char *)&v1[(void)result];
      BOOL result = (const char *)(v1[(void)result - 1] + (uint64_t)*v1);
      if (v2 != (const char *)1) {
        result += v1[1] + (uint64_t)*(v3 - 2);
      }
    }
  }
  return result;
}

BOOL sub_2201C8578(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2201C8590()
{
  return sub_2206D91A8();
}

uint64_t sub_2201C85D8()
{
  return sub_2206D9198();
}

uint64_t sub_2201C8604()
{
  return sub_2206D91A8();
}

void *sub_2201C8648@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_2201C8668(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_2201C8674()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C730);
  __swift_allocate_value_buffer(v0, qword_267F18550);
  __swift_project_value_buffer(v0, (uint64_t)qword_267F18550);
  __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C910);
  return sub_2206D8CE8();
}

uint64_t variable initialization expression of MauiAUSPAudioUnit._outputBusses()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.request()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.vocalizerMarkup()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.mauiEngine()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.currentMauiBuffer()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.currentFramePosition()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.currentByteOffset()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.ssmlMarkerPosition()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.currentStrippedSSML()
{
  return 0;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.markerQueue()
{
  return sub_2201C8814(0x72616D2E6975616DLL, 0xEB0000000072656BLL);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.voiceResourceQueue()
{
  return sub_2201C8814(0xD000000000000012, 0x80000002207AF8D0);
}

uint64_t sub_2201C8814(uint64_t a1, uint64_t a2)
{
  v7[1] = a1;
  v7[2] = a2;
  uint64_t v2 = sub_2206D8FE8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2206D8FD8();
  MEMORY[0x270FA5388]();
  sub_2206D8D48();
  MEMORY[0x270FA5388]();
  sub_2201D1684(0, &qword_26AD52710);
  sub_2206D8D38();
  v7[3] = MEMORY[0x263F8EE78];
  sub_2201D1094(&qword_26AD52708, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26AD526E0);
  sub_2201D10DC((unint64_t *)&unk_26AD526E8, &qword_26AD526E0);
  sub_2206D90A8();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F130], v2);
  return sub_2206D9008();
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.currentResourceLoadToken@<X0>(uint64_t a1@<X8>)
{
  return sub_2201C8BD0(MEMORY[0x263F07508], a1);
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.lastSentRange()
{
  return 0;
}

unint64_t variable initialization expression of MauiAUSPAudioUnit.phonemeMappings()
{
  return sub_2201C8A94(MEMORY[0x263F8EE78]);
}

unint64_t sub_2201C8A94(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_267F0C928);
  uint64_t v2 = (void *)sub_2206D9138();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_2201CECBC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    dispatch_semaphore_t v12 = (void *)(v2[7] + 16 * result);
    *dispatch_semaphore_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.requestStart@<X0>(uint64_t a1@<X8>)
{
  return sub_2201C8BD0(MEMORY[0x263F07490], a1);
}

uint64_t sub_2201C8BD0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of MauiAUSPAudioUnit._timbre()
{
  uint64_t v0 = self;
  LOBYTE(v9) = 0;
  sub_2206D8E18();
  uint64_t v1 = (void *)sub_2206D8DF8();
  swift_bridgeObjectRelease();
  type metadata accessor for MauiAUSPAudioUnit();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_2206D8AE8();

  uint64_t v4 = (void *)sub_2206D8DF8();
  swift_bridgeObjectRelease();
  LODWORD(v5) = 1112014848;
  LODWORD(v6) = 1128792064;
  id v7 = objc_msgSend(v0, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v1, v4, 0, 0, 0, 0, v5, v6, 0, 0, v9);

  return sub_2206D8BC8();
}

uint64_t type metadata accessor for MauiAUSPAudioUnit()
{
  uint64_t result = qword_26AD52870;
  if (!qword_26AD52870) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit._sentencePauseDuration()
{
  uint64_t v0 = self;
  LOBYTE(v8) = 1;
  sub_2206D8E18();
  uint64_t v1 = (void *)sub_2206D8DF8();
  swift_bridgeObjectRelease();
  type metadata accessor for MauiAUSPAudioUnit();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_2206D8AE8();

  uint64_t v4 = (void *)sub_2206D8DF8();
  swift_bridgeObjectRelease();
  LODWORD(v5) = 9.0;
  id v6 = objc_msgSend(v0, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v1, v4, 1, 0, 0, 0, 0.0, v5, 0, 0, v8);

  return sub_2206D8BC8();
}

void static MauiAUSPAudioUnit.registerAudioUnit()()
{
  int v0 = sub_2206D8E48();
  uint64_t v1 = self;
  type metadata accessor for MauiAUSPAudioUnit();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = (void *)sub_2206D8DF8();
  v4[0] = 1635087216;
  v4[1] = v0;
  uint64_t v5 = 1634758764;
  int v6 = 0;
  objc_msgSend(v1, sel_registerSubclass_asComponentDescription_name_version_, ObjCClassFromMetadata, v4, v3, 0);
}

void sub_2201C908C()
{
  int v0 = sub_2206D8E48();
  uint64_t v1 = self;
  type metadata accessor for MauiAUSPAudioUnit();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = (void *)sub_2206D8DF8();
  v4[0] = 1635087216;
  v4[1] = v0;
  uint64_t v5 = 1634758764;
  int v6 = 0;
  objc_msgSend(v1, sel_registerSubclass_asComponentDescription_name_version_, ObjCClassFromMetadata, v4, v3, 0);
}

uint64_t sub_2201C9148(unint64_t a1, unint64_t a2, int a3, unsigned int a4)
{
  uint64_t v5 = v4;
  unsigned int v92 = a4;
  int v91 = a3;
  unint64_t v90 = a2;
  unint64_t v89 = a1;
  uint64_t v111 = *MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26AD52718);
  MEMORY[0x270FA5388]();
  v100 = (char *)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26AD526D0);
  MEMORY[0x270FA5388]();
  v99 = (char *)v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = (void *)sub_2206D8FE8();
  uint64_t v8 = *(v98 - 1);
  MEMORY[0x270FA5388]();
  char v10 = (char *)v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2206D8FD8();
  MEMORY[0x270FA5388]();
  sub_2206D8D48();
  MEMORY[0x270FA5388]();
  uint64_t v83 = qword_26AD527F0;
  *(void *)&v4[qword_26AD527F0] = 0;
  uint64_t v84 = qword_26AD52850;
  *(void *)&v4[qword_26AD52850] = 0;
  uint64_t v11 = &v4[qword_26AD527F8];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  v85 = v11;
  uint64_t v86 = qword_26AD527E0;
  *(void *)&v4[qword_26AD527E0] = 0;
  uint64_t v87 = qword_26AD527D0;
  *(void *)&v4[qword_26AD527D0] = 0;
  *(_DWORD *)&v4[qword_26AD52830] = 0;
  *(_DWORD *)&v4[qword_26AD52808] = 0;
  dispatch_semaphore_t v12 = &v4[qword_26AD52810];
  *(void *)dispatch_semaphore_t v12 = 0;
  v12[8] = 1;
  uint64_t v13 = &v4[qword_26AD52828];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  v82[1] = v13;
  uint64_t v102 = qword_26AD527E8;
  v103 = (objc_class *)sub_2201D1684(0, &qword_26AD52710);
  v97 = v4;
  sub_2206D8D38();
  *(void *)&long long v108 = MEMORY[0x263F8EE78];
  uint64_t v95 = sub_2201D1094(&qword_26AD52708, MEMORY[0x263F8F0F8]);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_26AD526E0);
  uint64_t v96 = sub_2201D10DC((unint64_t *)&unk_26AD526E8, &qword_26AD526E0);
  sub_2206D90A8();
  uint64_t v14 = *MEMORY[0x263F8F130];
  uint64_t v15 = *(void (**)(char *, uint64_t, void *))(v8 + 104);
  uint64_t v93 = v8 + 104;
  int v16 = v10;
  uint64_t v17 = v10;
  CFStringRef v18 = v98;
  v15(v17, v14, v98);
  uint64_t v19 = sub_2206D9008();
  v88 = v5;
  *(void *)&v5[v102] = v19;
  uint64_t v20 = qword_26AD52820;
  sub_2206D8D38();
  *(void *)&long long v108 = MEMORY[0x263F8EE78];
  sub_2206D90A8();
  v15(v16, v14, v18);
  uint64_t v21 = sub_2206D9008();
  uint64_t v96 = v20;
  unint64_t v22 = v97;
  *(void *)&v97[v20] = v21;
  uint64_t v23 = (uint64_t)&v22[qword_26AD528A8];
  uint64_t v24 = sub_2206D8B98();
  unint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  uint64_t v95 = v23;
  v25(v23, 1, 1, v24);
  __int16 v26 = &v22[qword_26AD52888];
  *(void *)__int16 v26 = 0;
  *((void *)v26 + 1) = 0;
  v26[16] = 1;
  uint64_t v27 = qword_26AD52898;
  unint64_t v28 = sub_2201C8A94(MEMORY[0x263F8EE78]);
  uint64_t v94 = v27;
  *(void *)&v22[v27] = v28;
  uint64_t v29 = (uint64_t)&v22[qword_26AD52880];
  uint64_t v30 = sub_2206D8B78();
  unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
  uint64_t v93 = v29;
  v31(v29, 1, 1, v30);
  unint64_t v32 = &v22[qword_26AD528B8];
  v98 = self;
  LOBYTE(v108) = 0;
  sub_2206D8E18();
  v33 = (void *)sub_2206D8DF8();
  swift_bridgeObjectRelease();
  v103 = (objc_class *)type metadata accessor for MauiAUSPAudioUnit();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v35 = self;
  id v36 = objc_msgSend(v35, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_2206D8AE8();

  int v37 = (void *)sub_2206D8DF8();
  swift_bridgeObjectRelease();
  LODWORD(v38) = 1112014848;
  LODWORD(v39) = 1128792064;
  id v40 = v98;
  id v41 = objc_msgSend(v98, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v33, v37, 0, 0, 0, 0, v38, v39, 0, 0);

  v105[0] = (id)100;
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  v82[0] = v32;
  sub_2206D8BC8();
  uint64_t v42 = &v22[qword_26AD528A0];
  LOBYTE(v108) = 1;
  sub_2206D8E18();
  BOOL v43 = (void *)sub_2206D8DF8();
  swift_bridgeObjectRelease();
  id v44 = objc_msgSend(v35, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_2206D8AE8();

  v45 = (void *)sub_2206D8DF8();
  size_t v46 = v42;
  swift_bridgeObjectRelease();
  LODWORD(v47) = 9.0;
  id v48 = objc_msgSend(v40, sel_createParameterWithIdentifier_name_address_min_max_unit_unitName_flags_valueStrings_dependentParameters_, v43, v45, 1, 0, 0, 0, 0.0, v47, 0, 0);

  CFStringRef v49 = v22;
  v105[0] = (id)1;
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  sub_2206D8BC8();
  v22[qword_26AD52860] = 0;
  v105[1] = (id)0x40D5888000000000;
  long long v106 = xmmword_2206DA910;
  long long v107 = xmmword_2206DA920;
  type metadata accessor for CMFormatDescription(0);
  uint64_t v50 = sub_2206D8DB8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v99, 1, 1, v50);
  uint64_t v51 = sub_2206D9038();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v100, 1, 1, v51);
  uint64_t v52 = v101;
  sub_2206D8DC8();
  if (v52)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v53 = (void *)v108;
    id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9390]), sel_initWithCMAudioFormatDescription_, (void)v108);

    uint64_t v55 = qword_26AD52840;
    *(void *)&v22[qword_26AD52840] = v54;
    id v56 = objc_allocWithZone(MEMORY[0x263F28DA8]);
    *(void *)&long long v108 = 0;
    id v57 = v54;
    id v58 = objc_msgSend(v56, sel_initWithFormat_error_, v57, &v108);
    if (v58)
    {
      id v59 = v58;
      unsigned int v60 = v89;
      unint64_t v61 = HIDWORD(v89);
      unsigned int v62 = v90;
      unint64_t v63 = HIDWORD(v90);
      id v64 = (id)v108;

      *(void *)&v49[qword_26AD52858] = v59;
      v104.receiver = v49;
      v104.super_class = v103;
      v105[0] = 0;
      *(void *)&long long v108 = __PAIR64__(v61, v60);
      *((void *)&v108 + 1) = __PAIR64__(v63, v62);
      LODWORD(v109) = v91;
      v65 = (char *)objc_msgSendSuper2(&v104, sel_initWithComponentDescription_options_error_, &v108, v92, v105);
      id v66 = v105[0];
      if (v65)
      {
        v67 = v65;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26AD52740);
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = xmmword_2206DA930;
        v69 = *(void **)&v67[qword_26AD52858];
        *(void *)(v68 + 32) = v69;
        *(void *)&long long v108 = v68;
        sub_2206D8F58();
        id v70 = objc_allocWithZone(MEMORY[0x263F28DB0]);
        sub_2201D1684(0, (unint64_t *)&unk_26AD526F8);
        id v71 = v67;
        id v72 = v66;
        id v73 = v69;
        id v74 = (void *)sub_2206D8F38();
        swift_bridgeObjectRelease();
        id v75 = objc_msgSend(v70, sel_initWithAudioUnit_busType_busses_, v71, 2, v74);

        v76 = *(void **)&v71[qword_26AD527F0];
        *(void *)&v71[qword_26AD527F0] = v75;

        id v77 = objc_msgSend(self, sel_sharedInstance);
        objc_msgSend(v77, sel_addObserver_, v71);
      }
      else
      {
        id v71 = (char *)v105[0];
        sub_2206D8B08();

        swift_willThrow();
      }
    }
    else
    {
      id v78 = (id)v108;
      sub_2206D8B08();

      swift_willThrow();
      v79 = v88;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_2201D11D4(v95, (uint64_t *)&unk_26AD526B8);
      swift_bridgeObjectRelease();
      sub_2201D11D4(v93, (uint64_t *)&unk_26AD526A8);
      id v71 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_26AD526C8);
      v80 = *(void (**)(char *, char *))(*((void *)v71 - 1) + 8);
      v80((char *)v82[0], v71);
      v80(v46, v71);
      swift_deallocPartialClassInstance();
    }
    return (uint64_t)v71;
  }
  return result;
}

uint64_t variable initialization expression of MauiAUSPAudioUnit.reloadVoice()
{
  return 0;
}

uint64_t sub_2201C9EF4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return sub_2201C9148(*(void *)a3, *(void *)(a3 + 8), *(_DWORD *)(a3 + 16), a4);
}

id sub_2201C9F74(uint64_t a1)
{
  id result = *(id *)(a1 + qword_26AD527F0);
  if (result) {
    return result;
  }
  __break(1u);
  return result;
}

id MauiAUSPAudioUnit.outputBusses.getter()
{
  id result = *(id *)(v0 + qword_26AD527F0);
  if (result) {
    return result;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MauiAUSPAudioUnit.allocateRenderResources()()
{
  v4[1] = *(id *)MEMORY[0x263EF8340];
  v4[0] = 0;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MauiAUSPAudioUnit();
  if (objc_msgSendSuper2(&v3, sel_allocateRenderResourcesAndReturnError_, v4))
  {
    id v1 = v4[0];
  }
  else
  {
    id v2 = v4[0];
    sub_2206D8B08();

    swift_willThrow();
  }
}

BOOL sub_2201CA058(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  MauiAUSPAudioUnit.allocateRenderResources()();

  if (v5)
  {
    if (a3)
    {
      uint64_t v6 = (void *)sub_2206D8AF8();

      id v7 = v6;
      *a3 = v6;
    }
    else
    {
    }
  }
  return v5 == 0;
}

id sub_2201CA0D4()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v3[4] = sub_2201CEB20;
  v3[5] = v0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 1107296256;
  v3[2] = sub_2201CA1F8;
  v3[3] = &block_descriptor_18;
  id v1 = _Block_copy(v3);
  swift_release();

  return v1;
}

void (*MauiAUSPAudioUnit.internalRenderBlock.getter())(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return sub_2201CEB20;
}

uint64_t sub_2201CA1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *aBlock)
{
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))(a1 + 32);
  uint64_t v15 = _Block_copy(aBlock);
  if (v15)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    uint64_t v15 = sub_2201D1004;
  }
  else
  {
    uint64_t v16 = 0;
  }
  swift_retain();
  uint64_t v17 = v14(a2, a3, a4, a5, a6, a7, v15, v16);
  sub_2201D156C((uint64_t)v15);
  swift_release();
  return v17;
}

void sub_2201CA2E4(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  v79 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26AD526A8);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  v82 = (char *)v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v73 - v8;
  uint64_t v10 = sub_2206D8B78();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  v81 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v80 = (char *)v73 - v14;
  uint64_t v15 = sub_2206D8D88();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  CFStringRef v18 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v19 = MEMORY[0x223C694B0](a4 + 16);
  if (v19)
  {
    uint64_t v20 = (char *)v19;
    sub_2206D8D98();
    uint64_t v21 = (void (*)(void *, void))sub_2206D8DA8();
    uint64_t v23 = v22;
    v21(aBlock, 0);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v93 = v23;
    if (v23)
    {
      unsigned int v24 = a2;
      if (*(void *)&v20[qword_26AD52850])
      {
        if (a2)
        {
          unsigned int v92 = v9;
          uint64_t v96 = qword_26AD527D0;
          uint64_t v91 = qword_26AD527E0;
          uint64_t v75 = qword_26AD52808;
          uint64_t v74 = qword_26AD527E8;
          uint64_t v95 = qword_26AD52830;
          unint64_t v90 = &v20[qword_26AD52880];
          swift_beginAccess();
          v88 = 0;
          uint64_t v87 = 0;
          uint64_t v25 = 0;
          unint64_t v89 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
          id v78 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
          __int16 v26 = (void (**)(void, void))(v11 + 8);
          id v77 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
          v73[1] = v98;
          long long v76 = xmmword_2206DA940;
          uint64_t v27 = (SEL *)&unk_26456D000;
          unsigned int v83 = a2;
          uint64_t v94 = v10;
          while (1)
          {
            uint64_t v29 = *(void **)&v20[v96];
            if (!v29) {
              break;
            }
            uint64_t v30 = v26;
            uint64_t v31 = v25;
            id v32 = v29;
            id v33 = [v32 v27[178]];
            uint64_t v34 = objc_msgSend(v33, sel_mutableAudioBufferList);

            v35 = v27;
            uint64_t v36 = v34[2];
            if (!v36) {
              goto LABEL_39;
            }
            uint64_t v37 = v95;
            unsigned int v38 = *(_DWORD *)&v20[v95];
            id v39 = [v32 (SEL)v35 + 2740];
            unsigned int v40 = objc_msgSend(v39, sel_frameLength);

            if (v38 >= v40)
            {
              *(_DWORD *)&v20[v37] = 0;
              unint64_t v28 = *(void **)&v20[v96];
              *(void *)&v20[v96] = 0;

              uint64_t v10 = v94;
              uint64_t v25 = v31;
            }
            else
            {
              v41.i16[0] = *(_WORD *)(v36 + 2 * *(unsigned int *)&v20[v37]);
              v93[v31] = (float)vmovl_s16(v41).i32[0] * 0.000030518;

              int v42 = *(_DWORD *)&v20[v37];
              BOOL v43 = __CFADD__(v42, 1);
              int v44 = v42 + 1;
              uint64_t v10 = v94;
              if (v43)
              {
                __break(1u);
LABEL_35:
                __break(1u);
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
              uint64_t v25 = (v31 + 1);
              *(_DWORD *)&v20[v37] = v44;
            }
            __int16 v26 = v30;
            uint64_t v27 = (SEL *)&unk_26456D000;
LABEL_8:
            if (v25 >= v24) {
              goto LABEL_31;
            }
          }
          id v45 = objc_msgSend(*(id *)&v20[v91], sel_nextBuffer);
          size_t v46 = *(void **)&v20[v96];
          *(void *)&v20[v96] = v45;

          uint64_t v47 = (uint64_t)v90;
          uint64_t v48 = (uint64_t)v92;
          sub_2201D157C((uint64_t)v90, (uint64_t)v92, (uint64_t *)&unk_26AD526A8);
          if ((*v89)(v48, 1, v10) == 1)
          {
            sub_2201D11D4(v48, (uint64_t *)&unk_26AD526A8);
          }
          else
          {
            unsigned int v86 = v25;
            CFStringRef v49 = v80;
            (*v78)(v80, v48, v10);
            uint64_t v50 = v81;
            sub_2206D8B68();
            sub_2206D8B58();
            v85 = (void (*)(char *, uint64_t))*v26;
            v85(v50, v10);
            uint64_t v51 = (uint64_t)v82;
            (*v77)(v82, 1, 1, v10);
            swift_beginAccess();
            sub_2201D1120(v51, v47, (uint64_t *)&unk_26AD526A8);
            swift_endAccess();
            id v52 = (id)AXTTSLogCommon();
            if (!v52) {
              goto LABEL_40;
            }
            uint64_t v53 = v52;
            id v54 = v49;
            int v84 = sub_2206D8FB8();
            __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C748);
            uint64_t v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = v76;
            uint64_t v56 = sub_2201D1684(0, &qword_267F0C918);
            uint64_t v57 = sub_2206D9048();
            *(void *)(v55 + 56) = v56;
            *(void *)(v55 + 64) = sub_2201D1184(&qword_267F0C920, &qword_267F0C918);
            *(void *)(v55 + 32) = v57;
            sub_2206D8CF8();

            swift_bridgeObjectRelease();
            v85(v54, v10);
            unsigned int v24 = v83;
            uint64_t v25 = v86;
          }
          id v58 = *(void **)&v20[v96];
          if (v58)
          {
            id v59 = objc_msgSend(v58, sel_markers);
            __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C898);
            unint64_t v60 = sub_2206D8F48();

            if (v60 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v69 = sub_2206D9128();
              swift_bridgeObjectRelease();
              if (v69) {
                goto LABEL_21;
              }
            }
            else if (*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_21:
              uint64_t v61 = v25;
              int v62 = *(_DWORD *)&v20[v75];
              unint64_t v63 = *(void **)&v20[v74];
              uint64_t v64 = swift_allocObject();
              *(void *)(v64 + 16) = v20;
              *(void *)(v64 + 24) = v60;
              *(_DWORD *)(v64 + 32) = v62;
              v65 = v63;
              id v66 = v20;
              sub_2201D156C((uint64_t)v88);
              uint64_t v67 = swift_allocObject();
              v88 = sub_2201D1620;
              *(void *)(v67 + 16) = sub_2201D1620;
              *(void *)(v67 + 24) = v64;
              v98[2] = sub_2201D165C;
              v98[3] = v67;
              aBlock[0] = MEMORY[0x263EF8330];
              aBlock[1] = 1107296256;
              v98[0] = sub_2201CACD0;
              v98[1] = &block_descriptor_45;
              uint64_t v68 = _Block_copy(aBlock);
              swift_retain();
              swift_release();
              dispatch_sync(v65, v68);

              _Block_release(v68);
              LOBYTE(v68) = swift_isEscapingClosureAtFileLocation();
              swift_release();
              if (v68) {
                goto LABEL_35;
              }
              uint64_t v87 = v64;
              unsigned int v24 = v83;
              uint64_t v10 = v94;
              uint64_t v25 = v61;
              goto LABEL_25;
            }
            swift_bridgeObjectRelease();
          }
LABEL_25:
          *(_DWORD *)&v20[v95] = 0;
          uint64_t v27 = (SEL *)&unk_26456D000;
          if (!*(void *)&v20[v96])
          {
            _DWORD *v79 = 128;
            v93[v25] = 0.0;
            uint64_t v25 = (v25 + 1);
          }
          goto LABEL_8;
        }
        v88 = 0;
        uint64_t v87 = 0;
        LODWORD(v25) = 0;
LABEL_31:
        unint64_t v70 = *((unsigned int *)objc_msgSend(*(id *)&v20[qword_26AD52840], sel_streamDescription) + 6)
            * (unint64_t)v25;
        if ((v70 & 0xFFFFFFFF00000000) != 0) {
          goto LABEL_36;
        }
        int v71 = *(_DWORD *)&v20[qword_26AD52808];
        BOOL v43 = __CFADD__(v71, v70);
        int v72 = v71 + v70;
        if (!v43)
        {
          *(_DWORD *)&v20[qword_26AD52808] = v72;
          sub_2206D8D08();

          sub_2201D156C((uint64_t)v88);
          return;
        }
LABEL_37:
        __break(1u);
      }
      else if (!(a2 >> 30))
      {
        bzero(v93, 4 * a2);
        _DWORD *v79 = 128;
        sub_2206D8D08();

        return;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_2201CACD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall MauiAUSPAudioUnit.synthesizeSpeechRequest(_:)(AVSpeechSynthesisProviderRequest a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26AD526A8);
  MEMORY[0x270FA5388](v4 - 8);
  v185 = (char *)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_267F0C720);
  uint64_t v188 = *(void *)(v193 - 8);
  MEMORY[0x270FA5388](v193);
  v195 = (char *)&v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = sub_2206D8CD8();
  uint64_t v186 = *(void *)(v187 - 8);
  MEMORY[0x270FA5388](v187);
  v194 = (char *)&v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&qword_26AD526C8);
  uint64_t v189 = *(void *)(v192 - 8);
  MEMORY[0x270FA5388](v192);
  v191 = (char *)&v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2206D8C18();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v196 = qword_26AD52850;
  uint64_t v13 = *(void **)(v2 + qword_26AD52850);
  *(AVSpeechSynthesisProviderRequest *)(v2 + qword_26AD52850) = a1;
  uint64_t v14 = a1.super.isa;

  uint64_t v178 = sub_2206D8C58();
  uint64_t v15 = (void *)sub_2206D8C48();
  uint64_t v16 = *MEMORY[0x263F7ED78];
  uint64_t v17 = *(void (**)(uint64_t *, void, uint64_t))(v10 + 104);
  uint64_t v181 = v10 + 104;
  v180 = v17;
  v17(v12, v16, v9);
  id v18 = [(objc_class *)v14 jobIdentifier];
  sub_2206D8E08();

  sub_2206D8C38();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t))(v10 + 8);
  v182 = v12;
  uint64_t v184 = v9;
  uint64_t v183 = v10 + 8;
  v179 = v19;
  v19(v12, v9);
  v197 = v14;
  id v20 = [(objc_class *)v14 ssmlRepresentation];
  uint64_t v21 = sub_2206D8E08();
  unint64_t v23 = v22;

  unsigned int v24 = (unint64_t *)(v2 + qword_26AD52828);
  *unsigned int v24 = v21;
  v24[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void **)(v2 + v196);
  uint64_t v196 = v2;
  if (v25)
  {
    id v26 = objc_msgSend(v25, sel_ssmlRepresentation);
    uint64_t v27 = sub_2206D8E08();
    unint64_t v29 = v28;

    uint64_t aBlock = v27;
    unint64_t v201 = v29;
    if (qword_267F182B0 != -1) {
      swift_once();
    }
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C730);
    __swift_project_value_buffer(v30, (uint64_t)qword_267F18550);
    sub_2201CEB68();
    sub_2201D10DC(&qword_267F0C740, &qword_267F0C730);
    uint64_t v31 = sub_2206D8DD8();
    swift_bridgeObjectRelease();
    uint64_t v190 = v31;
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      id v33 = (unint64_t *)(v190 + 40);
      do
      {
        if (v24[1])
        {
          unint64_t v40 = *(v33 - 1);
          unint64_t v39 = *v33;
          sub_2206D8F08();
          unint64_t v36 = *v24;
          unint64_t v41 = v24[1];
          if (v41)
          {
            uint64_t aBlock = 0;
            unint64_t v201 = 0xE000000000000000;
            uint64_t v206 = 32;
            unint64_t v207 = 0xE100000000000000;
            sub_2201CEBBC();
            swift_bridgeObjectRetain();
            uint64_t v34 = sub_2206D9098();
            unint64_t v36 = sub_2201CC218(v40, v39, v34, v35, v36, v41);
            unint64_t v38 = v37;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v38 = 0;
          }
          *unsigned int v24 = v36;
          v24[1] = v38;
          swift_bridgeObjectRelease();
        }
        v33 += 2;
        --v32;
      }
      while (v32);
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v196;
  }
  uint64_t v42 = v2 + qword_26AD52888;
  *(void *)uint64_t v42 = 0;
  *(void *)(v42 + 8) = 0;
  *(unsigned char *)(v42 + 16) = 1;
  uint64_t v43 = qword_26AD527E0;
  int v44 = *(void **)(v2 + qword_26AD527E0);
  if (v44)
  {
    id v45 = objc_msgSend(v44, sel_currentVoice);
    id v46 = objc_msgSend(v45, sel_voiceId);

    uint64_t v47 = v197;
    if (v46)
    {
      uint64_t v48 = sub_2206D8E08();
      uint64_t v50 = v49;
    }
    else
    {
      uint64_t v48 = 0;
      uint64_t v50 = 0;
    }
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v50 = 0;
    uint64_t v47 = v197;
  }
  uint64_t v51 = MEMORY[0x263F8D310];
  id v52 = [(objc_class *)v47 voice];
  id v53 = objc_msgSend(v52, sel_identifier);

  uint64_t v54 = sub_2206D8E08();
  uint64_t v56 = v55;

  if (!v50)
  {
    swift_bridgeObjectRelease();
    uint64_t v57 = v196;
    goto LABEL_25;
  }
  if (v48 == v54 && v50 == v56)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v57 = v196;
  }
  else
  {
    char v58 = sub_2206D9168();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v57 = v196;
    if ((v58 & 1) == 0) {
      goto LABEL_25;
    }
  }
  if (*(unsigned char *)(v57 + qword_26AD52860) == 1)
  {
LABEL_25:
    *(unsigned char *)(v57 + qword_26AD52860) = 0;
    id v59 = self;
    id v60 = objc_msgSend(v59, sel_sharedInstance);
    id v61 = [(objc_class *)v197 voice];
    id v62 = objc_msgSend(v61, sel_identifier);

    if (!v62)
    {
      sub_2206D8E08();
      id v62 = (id)sub_2206D8DF8();
      swift_bridgeObjectRelease();
    }
    id v63 = objc_msgSend(v60, sel_resourceWithVoiceId_, v62);

    if (v63)
    {
      id v64 = v63;
      if (objc_msgSend(v64, sel_isInstalled))
      {
        id v65 = objc_msgSend(v64, sel_contentPath);
        if (v65)
        {
          id v66 = v65;

LABEL_35:
          goto LABEL_36;
        }
      }
      id v67 = objc_msgSend(v64, sel_footprint);

      if (v67 != (id)3)
      {
LABEL_36:
        uint64_t v93 = *(void **)(v57 + v43);
        if (v93)
        {
          objc_msgSend(v93, sel_setVoice_, v64);
        }
        else
        {
          id v102 = objc_msgSend(objc_allocWithZone((Class)TTSMauiSpeechEngine), sel_initWithVoice_, v64);
          v103 = *(void **)(v57 + v43);
          *(void *)(v57 + v43) = v102;
        }
        sub_2201CCCFC(v64);

        goto LABEL_42;
      }
      id v68 = [(objc_class *)v197 voice];
      id v69 = objc_msgSend(v68, sel_identifier);

      uint64_t v70 = sub_2206D8E08();
      unint64_t v72 = v71;

      uint64_t aBlock = v70;
      unint64_t v201 = v72;
      uint64_t v206 = sub_2206D8E08();
      unint64_t v207 = v73;
      uint64_t v198 = sub_2206D8E08();
      uint64_t v199 = v74;
      sub_2201CEBBC();
      uint64_t v190 = sub_2206D9078();
      uint64_t v76 = v75;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v77 = (id)AXTTSLogCommon();
      if (v77)
      {
        uint64_t v78 = v51;
        v79 = v77;
        int v177 = sub_2206D8FA8();
        uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C748);
        uint64_t v80 = swift_allocObject();
        *(_OWORD *)(v80 + 16) = xmmword_2206DA950;
        id v81 = [(objc_class *)v197 voice];
        id v82 = objc_msgSend(v81, (SEL)&selRef_setBrokerString_);

        uint64_t v83 = sub_2206D8E08();
        uint64_t v85 = v84;

        *(void *)(v80 + 56) = v78;
        unint64_t v86 = sub_2201CEC10();
        *(void *)(v80 + 32) = v83;
        *(void *)(v80 + 40) = v85;
        uint64_t v87 = v78;
        *(void *)(v80 + 96) = v78;
        *(void *)(v80 + 104) = v86;
        unint64_t v88 = v86;
        uint64_t v89 = v190;
        *(void *)(v80 + 64) = v86;
        *(void *)(v80 + 72) = v89;
        *(void *)(v80 + 80) = v76;
        swift_bridgeObjectRetain();
        sub_2206D8CF8();

        swift_bridgeObjectRelease();
        id v90 = objc_msgSend(v59, sel_sharedInstance);
        uint64_t v91 = (void *)sub_2206D8DF8();
        swift_bridgeObjectRelease();
        id v92 = objc_msgSend(v90, sel_resourceWithVoiceId_, v91);

        if (v92)
        {
          id v66 = v64;
          id v64 = v92;
          uint64_t v57 = v196;
          goto LABEL_35;
        }
        unint64_t v167 = v88;
        id v168 = (id)AXTTSLogCommon();
        if (v168)
        {
          v169 = v168;
          sub_2206D8FC8();
          uint64_t v170 = swift_allocObject();
          *(_OWORD *)(v170 + 16) = xmmword_2206DA940;
          id v171 = [(objc_class *)v197 voice];
          id v172 = objc_msgSend(v171, sel_identifier);

          uint64_t v173 = sub_2206D8E08();
          uint64_t v175 = v174;

          *(void *)(v170 + 56) = v87;
          *(void *)(v170 + 64) = v167;
          *(void *)(v170 + 32) = v173;
          *(void *)(v170 + 40) = v175;
          sub_2206D8CF8();

          swift_bridgeObjectRelease();
          return;
        }
LABEL_65:
        __break(1u);
        return;
      }
    }
    else
    {
      id v94 = (id)AXTTSLogCommon();
      if (v94)
      {
        uint64_t v95 = v94;
        sub_2206D8FC8();
        __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C748);
        uint64_t v96 = swift_allocObject();
        *(_OWORD *)(v96 + 16) = xmmword_2206DA940;
        id v97 = [(objc_class *)v197 voice];
        id v98 = objc_msgSend(v97, sel_identifier);

        uint64_t v99 = sub_2206D8E08();
        uint64_t v101 = v100;

        *(void *)(v96 + 56) = v51;
        *(void *)(v96 + 64) = sub_2201CEC10();
        *(void *)(v96 + 32) = v99;
        *(void *)(v96 + 40) = v101;
        sub_2206D8CF8();

        swift_bridgeObjectRelease();
        return;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_65;
  }
LABEL_42:
  objc_super v104 = *(void **)(v57 + v43);
  if (v104)
  {
    uint64_t v105 = v57;
    uint64_t v106 = v57 + qword_26AD528B8;
    uint64_t v107 = v189;
    long long v108 = *(void (**)(char *, uint64_t, uint64_t))(v189 + 16);
    long long v109 = v191;
    uint64_t v110 = v192;
    v108(v191, v106, v192);
    id v111 = v104;
    sub_2206D8BB8();
    v112 = *(void (**)(char *, uint64_t))(v107 + 8);
    v112(v109, v110);
    id v113 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, aBlock);
    objc_msgSend(v111, sel_setTimbre_, v113);

    v114 = *(void **)(v105 + v43);
    if (v114)
    {
      uint64_t v115 = v105 + qword_26AD528A0;
      uint64_t v116 = v43;
      v117 = v191;
      uint64_t v118 = v192;
      v108(v191, v115, v192);
      id v119 = v114;
      sub_2206D8BB8();
      v120 = v117;
      uint64_t v43 = v116;
      v112(v120, v118);
      id v121 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, aBlock);
      objc_msgSend(v119, sel_setPostSentencePauseDuration_, v121);
    }
  }
  id v122 = [(objc_class *)v197 ssmlRepresentation];
  sub_2206D8E08();

  sub_2206D8CC8();
  sub_2206D8C08();
  swift_allocObject();
  uint64_t v123 = sub_2206D8BF8();
  uint64_t aBlock = v123;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_267F0C758);
  swift_allocObject();
  swift_retain();
  sub_2206D8C28();
  sub_2206D8CA8();
  uint64_t v124 = v196;
  v125 = *(void **)(v196 + v43);
  if (v125)
  {
    id v126 = objc_msgSend(v125, sel_currentVoice);
    id v127 = objc_msgSend(v126, sel_primaryLanguage);

    sub_2206D8E08();
  }
  sub_2206D8CB8();
  sub_2206D8C98();
  v128 = *(void **)(v124 + v43);
  if (v128
    && (id v129 = objc_msgSend(v128, sel_currentVoice),
        id v130 = objc_msgSend(v129, sel_footprint),
        v129,
        v130 == (id)2)
    && (v131 = *(void **)(v124 + v43)) != 0)
  {
    id v132 = objc_msgSend(v131, sel_currentVoice);
    id v133 = objc_msgSend(v132, sel_primaryLanguage);

    uint64_t v134 = sub_2206D8E08();
    uint64_t v136 = v135;

    if (v134 == 0x4E432D687ALL && v136 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t aBlock = 0x3D6C6C6570735C1BLL;
      unint64_t v201 = 0xE800000000000000;
    }
    else
    {
      sub_2206D9168();
      swift_bridgeObjectRelease();
      uint64_t aBlock = 0x3D6C6C6570735C1BLL;
      unint64_t v201 = 0xE800000000000000;
    }
  }
  else
  {
    uint64_t aBlock = 0x3D6C6C6570735C1BLL;
    unint64_t v201 = 0xE800000000000000;
  }
  sub_2206D8EA8();
  swift_bridgeObjectRelease();
  sub_2206D8EA8();
  uint64_t v137 = aBlock;
  unint64_t v138 = v201;
  uint64_t v192 = v123;
  sub_2206D8BE8();
  uint64_t aBlock = v137;
  unint64_t v201 = v138;
  swift_bridgeObjectRetain();
  sub_2206D8EA8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v140 = aBlock;
  unint64_t v139 = v201;
  v141 = (void *)sub_2206D8C48();
  v142 = v197;
  id v143 = [(objc_class *)v197 ssmlRepresentation];
  uint64_t v144 = sub_2206D8E08();
  uint64_t v146 = v145;

  v147 = v182;
  uint64_t *v182 = v144;
  v147[1] = v146;
  v147[2] = v140;
  v147[3] = v139;
  uint64_t v148 = v184;
  v180(v147, *MEMORY[0x263F7ED88], v184);
  swift_bridgeObjectRetain();
  id v149 = [(objc_class *)v142 jobIdentifier];
  sub_2206D8E08();

  sub_2206D8C38();
  swift_bridgeObjectRelease();
  v179(v147, v148);
  uint64_t v150 = sub_2206D8C88();
  uint64_t v151 = v196;
  *(void *)(v196 + qword_26AD52898) = v150;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v151 + qword_26AD52830) = 0;
  *(_DWORD *)(v151 + qword_26AD52808) = 0;
  uint64_t v152 = v151 + qword_26AD52810;
  *(void *)uint64_t v152 = 0;
  *(unsigned char *)(v152 + 8) = 1;
  v153 = (uint64_t *)(v151 + qword_26AD527F8);
  uint64_t *v153 = v140;
  v153[1] = v139;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v154 = *(void **)(v151 + v43);
  if (v154)
  {
    id v155 = objc_msgSend(v154, sel_ruleSetRunner);
    uint64_t v156 = swift_allocObject();
    *(void *)(v156 + 16) = v142;
    v204 = sub_2201CEC9C;
    uint64_t v205 = v156;
    uint64_t aBlock = MEMORY[0x263EF8330];
    unint64_t v201 = 1107296256;
    v202 = sub_2201CC728;
    v203 = &block_descriptor;
    v157 = _Block_copy(&aBlock);
    v158 = v142;
    uint64_t v151 = v196;
    swift_release();
    objc_msgSend(v155, sel_setMatchLogger_, v157);
    _Block_release(v157);
  }
  uint64_t v159 = (uint64_t)v185;
  sub_2206D8B68();
  uint64_t v160 = sub_2206D8B78();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v160 - 8) + 56))(v159, 0, 1, v160);
  uint64_t v161 = v151 + qword_26AD52880;
  swift_beginAccess();
  sub_2201D1120(v159, v161, (uint64_t *)&unk_26AD526A8);
  swift_endAccess();
  v162 = *(void **)(v151 + v43);
  if (v162)
  {
    id v163 = v162;
    v164 = (void *)sub_2206D8DF8();
    swift_bridgeObjectRelease();
    objc_msgSend(v163, sel_speakString_, v164);
    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v165 = v187;
  uint64_t v166 = v186;
  (*(void (**)(char *, uint64_t))(v188 + 8))(v195, v193);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v194, v165);
}

uint64_t sub_2201CC218(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain();
  sub_2206D9068();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  sub_2206D9068();
  uint64_t v15 = v14;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v15 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v17 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v17) = 1;
  }
  uint64_t v18 = 4 << v17;
  unint64_t v19 = a1;
  if ((a1 & 0xC) == 4 << v17)
  {
    uint64_t result = sub_2201D038C(a1, a5, a6);
    unint64_t v19 = result;
  }
  uint64_t v40 = a3;
  unint64_t v20 = a2;
  unint64_t v21 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    uint64_t v23 = a6 & 0x2000000000000000;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v32 = HIBYTE(a6) & 0xF;
    }
    else {
      unint64_t v32 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 < v19 >> 16) {
      goto LABEL_43;
    }
    uint64_t result = sub_2206D8ED8();
    uint64_t v22 = result;
    if (v21) {
      uint64_t v26 = 7;
    }
    else {
      uint64_t v26 = 11;
    }
  }
  else
  {
    uint64_t v22 = v19 >> 16;
    uint64_t v23 = a6 & 0x2000000000000000;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    uint64_t v26 = 7;
  }
  if (!v23) {
    unint64_t v24 = v25;
  }
  uint64_t v27 = 4 << (v21 >> 59);
  unint64_t v28 = v26 | (v24 << 16);
  a2 = v20;
  if ((a6 & 0x1000000000000000) == 0) {
    uint64_t v27 = 8;
  }
  unint64_t v29 = v20;
  if ((v20 & 0xC) == v27)
  {
    unint64_t v33 = v20;
    uint64_t v34 = v22;
    uint64_t result = sub_2201D038C(v33, a5, a6);
    uint64_t v22 = v34;
    unint64_t v29 = result;
  }
  if ((v26 & 0xC) == v18)
  {
    unint64_t v35 = v26 | (v24 << 16);
    uint64_t v36 = v22;
    uint64_t result = sub_2201D038C(v35, a5, a6);
    uint64_t v22 = v36;
    unint64_t v28 = result;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      uint64_t v30 = (v28 >> 16) - (v29 >> 16);
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v24 < v29 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v24 >= v28 >> 16)
  {
    uint64_t v37 = v22;
    uint64_t v38 = sub_2206D8ED8();
    uint64_t v22 = v37;
    uint64_t v30 = v38;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      if ((a4 & 0x2000000000000000) != 0)
      {
        uint64_t result = HIBYTE(a4) & 0xF;
        uint64_t v31 = v22 + result;
        if (!__OFADD__(v22, result)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v40 & 0xFFFFFFFFFFFFLL;
        uint64_t v31 = v22 + (v40 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v22, v40 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_23;
        }
      }
      goto LABEL_39;
    }
LABEL_37:
    uint64_t v39 = v22;
    uint64_t result = sub_2206D8EB8();
    uint64_t v31 = v39 + result;
    if (!__OFADD__(v39, result))
    {
LABEL_23:
      uint64_t result = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        MEMORY[0x223C67FF0](result);
LABEL_25:
        sub_2206D8F18();
        sub_2201D14B4();
        sub_2206D8E98();
        swift_bridgeObjectRelease();
        sub_2206D8E98();
        sub_2201CEE18(a2, a5, a6);
        sub_2206D8E98();
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_2201CC560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v26 = a4;
  id v27 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a3;
  uint64_t v12 = sub_2206D8C18();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2206D8C58();
  uint64_t v16 = (void *)sub_2206D8C48();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = objc_msgSend(a7, sel_identifier);
  uint64_t v18 = sub_2206D8E08();
  uint64_t v20 = v19;

  void *v15 = a1;
  v15[1] = a2;
  v15[2] = v24;
  v15[3] = a6;
  uint64_t v21 = v26;
  v15[4] = v25;
  v15[5] = v21;
  v15[6] = v18;
  v15[7] = v20;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F7ED68], v12);
  id v22 = objc_msgSend(v27, sel_jobIdentifier);
  sub_2206D8E08();

  sub_2206D8C38();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_2201CC728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))(a1 + 32);
  uint64_t v10 = sub_2206D8E08();
  uint64_t v12 = v11;
  uint64_t v13 = sub_2206D8E08();
  uint64_t v15 = v14;
  swift_retain();
  id v16 = a6;
  v9(v10, v12, a3, a4, v13, v15, v16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_2201CC804(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  MauiAUSPAudioUnit.synthesizeSpeechRequest(_:)((AVSpeechSynthesisProviderRequest)v4);
}

Swift::Void __swiftcall MauiAUSPAudioUnit.cancelSpeechRequest()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2206D8C18();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2206D8C58();
  uint64_t v6 = (void *)sub_2206D8C48();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F7ED70], v2);
  uint64_t v7 = qword_26AD52850;
  uint64_t v8 = *(void **)(v1 + qword_26AD52850);
  if (v8)
  {
    id v9 = objc_msgSend(v8, sel_jobIdentifier);
    sub_2206D8E08();
  }
  sub_2206D8C38();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(*(id *)(v1 + qword_26AD527E0), sel_cancelSpeaking);
  uint64_t v10 = *(void **)(v1 + v7);
  *(void *)(v1 + v7) = 0;

  *(_DWORD *)(v1 + qword_26AD52830) = 0;
  uint64_t v11 = *(void **)(v1 + qword_26AD527D0);
  *(void *)(v1 + qword_26AD527D0) = 0;

  *(_DWORD *)(v1 + qword_26AD52808) = 0;
  uint64_t v12 = v1 + qword_26AD52810;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
}

void sub_2201CCA44(void *a1)
{
  id v1 = a1;
  MauiAUSPAudioUnit.cancelSpeechRequest()();
}

id sub_2201CCA8C()
{
  _s23TextToSpeechMauiSupport0D13AUSPAudioUnitC12speechVoicesSaySo30AVSpeechSynthesisProviderVoiceCGvg_0();
  sub_2201D1684(0, &qword_26AD52760);
  uint64_t v0 = (void *)sub_2206D8F38();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_2201CCB00(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_2206D9128();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_2206D9128();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x223C68280](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_2201CFF7C(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_2206D9128();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_2206D8F58();
}

void MauiAUSPAudioUnit.finishedDownloadingResource(_:wasCancelled:)(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    *(unsigned char *)(v2 + qword_26AD52860) = 1;
  }
}

uint64_t sub_2201CCCE4(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    *(unsigned char *)(result + qword_26AD52860) = 1;
  }
  return result;
}

void sub_2201CCCFC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2206D8D68();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = sub_2206D8D28();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v47 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_2206D8D48();
  uint64_t v46 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  int v44 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = qword_26AD527E0;
  objc_msgSend(*(id *)&v1[qword_26AD527E0], sel_unloadAllVoiceResources);
  sub_2206D8C78();
  id v45 = a1;
  unint64_t v16 = sub_2206D8C68();
  unint64_t v17 = v16;
  uint64_t v53 = v5;
  uint64_t v54 = v4;
  uint64_t v51 = v8;
  id v52 = v10;
  uint64_t v49 = v12;
  uint64_t v50 = v11;
  if (v16 >> 62) {
    goto LABEL_13;
  }
  uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v18; uint64_t v18 = sub_2206D9128())
  {
    uint64_t v19 = 4;
    uint64_t v20 = 0;
    if ((v17 & 0xC000000000000001) != 0)
    {
LABEL_4:
      id v21 = (id)MEMORY[0x223C68270](v20, v17);
      goto LABEL_6;
    }
    while (1)
    {
      id v21 = *(id *)(v17 + 8 * v19);
LABEL_6:
      id v22 = v21;
      BOOL v23 = __OFADD__(v20, 1);
      uint64_t v24 = v20 + 1;
      if (v23) {
        break;
      }
      uint64_t v25 = *(void **)&v2[v15];
      if (v25) {
        objc_msgSend(v25, sel_loadRuleset_, v22);
      }

      if (v24 == v18) {
        goto LABEL_14;
      }
      uint64_t v20 = ++v19 - 4;
      if ((v17 & 0xC000000000000001) != 0) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease_n();
  dispatch_semaphore_t v26 = dispatch_semaphore_create(0);
  id v27 = *(void **)&v2[qword_26AD52820];
  unint64_t v28 = (void *)swift_allocObject();
  unint64_t v29 = v45;
  v28[2] = v45;
  v28[3] = v2;
  v28[4] = v26;
  aBlock[4] = sub_2201D1088;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_2201CDD30;
  aBlock[3] = &block_descriptor_27;
  uint64_t v30 = _Block_copy(aBlock);
  id v31 = v27;
  id v32 = v29;
  unint64_t v33 = v2;
  uint64_t v34 = v26;
  unint64_t v35 = v44;
  sub_2206D8D38();
  uint64_t v55 = MEMORY[0x263F8EE78];
  sub_2201D1094(&qword_267F0C8D8, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C8E0);
  sub_2201D10DC(&qword_267F0C8E8, &qword_267F0C8E0);
  uint64_t v36 = v47;
  uint64_t v37 = v50;
  sub_2206D90A8();
  MEMORY[0x223C681B0](0, v35, v36, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v48);
  swift_release();
  uint64_t v38 = v51;
  sub_2206D8D58();
  uint64_t v39 = v52;
  MEMORY[0x223C67F30](v38, 0.25);
  uint64_t v40 = v54;
  unint64_t v41 = *(void (**)(char *, uint64_t))(v53 + 8);
  v41(v38, v54);
  sub_2206D9018();
  v41(v39, v40);
  if ((sub_2206D8D18() & 1) == 0) {
    goto LABEL_17;
  }
  id v42 = (id)AXTTSLogCommon();
  if (v42)
  {
    uint64_t v43 = v42;
    sub_2206D8FC8();
    sub_2206D8CF8();

LABEL_17:
    return;
  }
  __break(1u);
}

id sub_2201CD258(void *a1, void *a2, uint64_t a3)
{
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C8F0);
  MEMORY[0x270FA5388](v62);
  uint64_t v63 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26AD526B8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v61 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v65 = (char *)&v59 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = sub_2206D8B98();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  id v59 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v69 = (char *)&v59 - v18;
  sub_2206D8B88();
  id v19 = objc_msgSend(a1, sel_footprint);
  id v64 = a2;
  if (v19 == (id)2)
  {
    uint64_t v20 = v14;
    id result = objc_msgSend(a1, sel_voiceId);
    if (!result)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    id v22 = result;
    uint64_t v23 = sub_2206D8E08();
    uint64_t v25 = v24;

    uint64_t aBlock = v23;
    uint64_t v75 = v25;
    uint64_t v72 = sub_2206D8E08();
    uint64_t v73 = v26;
    uint64_t v70 = sub_2206D8E08();
    uint64_t v71 = v27;
    sub_2201CEBBC();
    sub_2206D9078();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(self, sel_sharedInstance);
    unint64_t v29 = (void *)sub_2206D8DF8();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_downloadResourceWithVoiceId_, v29);

    uint64_t v14 = v20;
    a2 = v64;
  }
  uint64_t v67 = a3;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v30(v13, v69, v14);
  uint64_t v66 = v15;
  id v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
  uint64_t v68 = v14;
  v31(v13, 0, 1, v14);
  uint64_t v32 = (uint64_t)a2 + qword_26AD528A8;
  swift_beginAccess();
  sub_2201D1120((uint64_t)v13, v32, (uint64_t *)&unk_26AD526B8);
  swift_endAccess();
  id v33 = objc_msgSend(a1, sel_primaryLanguage);
  if (!v33)
  {
    sub_2206D8E08();
    id v33 = (id)sub_2206D8DF8();
    swift_bridgeObjectRelease();
  }
  uint64_t v34 = self;
  id v35 = objc_msgSend(a1, sel_speechVoice);
  uint64_t v36 = a1;
  id v37 = objc_msgSend(v35, sel_voiceType);

  id v60 = v34;
  id v38 = objc_msgSend(v34, sel_effectiveResourceForLanguageCode_andVoiceType_, v33, v37);

  if (!v38)
  {
    id result = (id)AXTTSLogCommon();
    uint64_t v40 = v68;
    if (result)
    {
      uint64_t v46 = result;
      sub_2206D8FA8();
      __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C748);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_2206DA940;
      *(void *)(v47 + 56) = sub_2201D1684(0, (unint64_t *)&unk_26AD52750);
      *(void *)(v47 + 64) = sub_2201D1184(&qword_267F0C8F8, (unint64_t *)&unk_26AD52750);
      *(void *)(v47 + 32) = v36;
      id v48 = v36;
      sub_2206D8CF8();

      swift_bridgeObjectRelease();
      sub_2206D9028();
      uint64_t v44 = v66;
      return (id)(*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v69, v40);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v39 = (uint64_t)v65;
  uint64_t v40 = v68;
  v30(v65, v69, v68);
  v31((char *)v39, 0, 1, v40);
  uint64_t v41 = v39;
  uint64_t v42 = v63;
  uint64_t v43 = v63 + *(int *)(v62 + 48);
  sub_2201D157C(v41, v63, (uint64_t *)&unk_26AD526B8);
  sub_2201D157C(v32, v43, (uint64_t *)&unk_26AD526B8);
  uint64_t v44 = v66;
  id v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  if (v45(v42, 1, v40) == 1)
  {
    sub_2201D11D4(v41, (uint64_t *)&unk_26AD526B8);
    if (v45(v43, 1, v40) == 1)
    {
      sub_2201D11D4(v42, (uint64_t *)&unk_26AD526B8);
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v49 = v61;
  sub_2201D157C(v42, v61, (uint64_t *)&unk_26AD526B8);
  if (v45(v43, 1, v40) == 1)
  {
    sub_2201D11D4((uint64_t)v65, (uint64_t *)&unk_26AD526B8);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v49, v40);
LABEL_14:
    sub_2201D11D4(v42, &qword_267F0C8F0);
    goto LABEL_15;
  }
  uint64_t v51 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v59, v43, v40);
  sub_2201D1094(&qword_267F0C900, MEMORY[0x263F07508]);
  char v52 = sub_2206D8DE8();
  uint64_t v53 = *(void (**)(char *, uint64_t))(v44 + 8);
  v53(v51, v40);
  sub_2201D11D4((uint64_t)v65, (uint64_t *)&unk_26AD526B8);
  v53((char *)v49, v40);
  sub_2201D11D4(v42, (uint64_t *)&unk_26AD526B8);
  if ((v52 & 1) == 0)
  {
LABEL_15:
    sub_2206D9028();
    id result = (id)AXTTSLogCommon();
    if (result)
    {
      uint64_t v50 = result;
      sub_2206D8FA8();
      sub_2206D8CF8();

      return (id)(*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v69, v40);
    }
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v54 = swift_allocObject();
  uint64_t v55 = v64;
  *(void *)(v54 + 16) = v64;
  uint64_t v78 = sub_2201D1230;
  uint64_t v79 = v54;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v75 = 1107296256;
  uint64_t v76 = sub_2201CDB34;
  id v77 = &block_descriptor_33;
  uint64_t v56 = _Block_copy(&aBlock);
  id v57 = v55;
  swift_release();
  objc_msgSend(v60, sel_enumerateLoadableResourcesInAsset_usingBlock_, v38, v56);
  _Block_release(v56);
  id result = (id)AXTTSLogCommon();
  if (result)
  {
    char v58 = result;
    sub_2206D8FB8();
    sub_2206D8CF8();

    sub_2206D9028();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v69, v40);
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_2201CDB34(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v19 = sub_2206D8B28();
  uint64_t v6 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t, char *))(a1 + 32);
  uint64_t v9 = sub_2206D8E08();
  uint64_t v11 = v10;
  uint64_t v12 = sub_2206D8E08();
  uint64_t v14 = v13;
  uint64_t v15 = _Block_copy(a4);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  sub_2206D8B18();
  swift_retain();
  v18(v9, v11, v12, v14, sub_2201D1454, v16, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v19);
}

uint64_t sub_2201CDCDC(uint64_t a1)
{
  id v1 = (id)(*(uint64_t (**)(void))(a1 + 16))();
  uint64_t v2 = sub_2206D8B48();

  return v2;
}

uint64_t sub_2201CDD30(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_2201CDD74(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = *(void *)&v2[qword_26AD52828 + 8];
  if (v3)
  {
    uint64_t v4 = *(void **)&v2[qword_26AD52850];
    if (v4)
    {
      uint64_t v5 = *(void *)&v2[qword_26AD527F8 + 8];
      if (v5)
      {
        uint64_t v8 = *(void *)&v2[qword_26AD52828];
        uint64_t v9 = *(void *)&v2[qword_26AD527F8];
        id v10 = v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v11 = objc_msgSend(v2, sel_speechSynthesisOutputMetadataBlock);
        if (v11)
        {
          uint64_t v12 = (void (**)(void, void, void))v11;
          if (a1 < 0 || (a1 & 0x4000000000000000) != 0)
          {
            unint64_t v17 = swift_bridgeObjectRetain();
            uint64_t v13 = (uint64_t)sub_2201CEE64(v17);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
          }
          unint64_t v19 = v13;
          sub_2201CEF5C((uint64_t *)&v19);
          unint64_t v14 = v19;
          id v18 = v10;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v15 = v2;
          sub_2201D0408(v14, v9, v5, (uint64_t)v15, v8, v3, v18, a2);
          swift_release();
          swift_bridgeObjectRelease_n();

          swift_bridgeObjectRelease_n();
          sub_2201D1684(0, &qword_267F0C830);
          uint64_t v16 = (void *)sub_2206D8F38();
          ((void (**)(void, void *, id))v12)[2](v12, v16, v18);
          swift_bridgeObjectRelease();

          _Block_release(v12);
        }
        else
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

void sub_2201CDFC8(uint64_t a1@<X3>, uint64_t a2@<X4>, unint64_t a3@<X5>, void *a4@<X6>, unsigned int a5@<W7>, void *a6@<X8>)
{
  id v46 = a4;
  unint64_t v48 = a3;
  uint64_t v10 = sub_2206D8C18();
  uint64_t v47 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v12 = (id *)((char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  self;
  if (swift_dynamicCastObjCClass())
  {
    self;
    uint64_t v13 = (void *)swift_dynamicCastObjCClassUnconditional();
    swift_unknownObjectRetain();
    objc_msgSend(v13, sel_wordRange);
    sub_2206D8F98();
    if ((v14 & 1) == 0)
    {
      id v43 = v13;
      unsigned int v44 = a5;
      id v45 = a6;
      uint64_t v15 = sub_2206D8F18();
      uint64_t v16 = MEMORY[0x223C67FE0](v15);
      uint64_t v18 = v17;
      swift_bridgeObjectRelease();
      unint64_t v19 = (void *)sub_2206D8DF8();
      id v20 = objc_msgSend(v19, sel_xmlEscaped);

      uint64_t v21 = sub_2206D8E08();
      uint64_t v23 = v22;

      if (*(void *)(*(void *)(a1 + qword_26AD52898) + 16))
      {
        swift_bridgeObjectRetain();
        sub_2201CECBC(v16, v18);
        if (v24)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v25 = (void *)sub_2206D8DF8();
          swift_bridgeObjectRelease();
          id v26 = objc_msgSend(v25, sel_xmlEscaped);

          uint64_t v21 = sub_2206D8E08();
          uint64_t v23 = v27;

          goto LABEL_13;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_13:
      uint64_t v33 = a1 + qword_26AD52810;
      unint64_t v34 = v48;
      sub_2201CE4EC(v21, v23, *(void *)(a1 + qword_26AD52810), *(unsigned char *)(a1 + qword_26AD52810 + 8), a2, v48);
      if (v35)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_2206D8E78();
        *(void *)uint64_t v33 = sub_2206D8E88();
        *(unsigned char *)(v33 + 8) = 0;
        uint64_t v49 = a2;
        unint64_t v50 = v34;
        sub_2201CEBBC();
        uint64_t v36 = sub_2206D8E68();
        uint64_t v37 = sub_2206D8EE8();
        swift_bridgeObjectRelease();
        uint64_t v38 = a1 + qword_26AD52888;
        if ((*(unsigned char *)(a1 + qword_26AD52888 + 16) & 1) != 0 || *(void *)v38 != v36 || *(void *)(v38 + 8) != v37)
        {
          *(void *)uint64_t v38 = v36;
          *(void *)(v38 + 8) = v37;
          *(unsigned char *)(v38 + 16) = 0;
          sub_2206D8C58();
          uint64_t v39 = (void *)sub_2206D8C48();
          *uint64_t v12 = objc_msgSend(v43, sel_wordRange);
          v12[1] = v40;
          v12[2] = v36;
          v12[3] = v37;
          uint64_t v41 = v47;
          (*(void (**)(void *, void, uint64_t))(v47 + 104))(v12, *MEMORY[0x263F7ED80], v10);
          id v42 = objc_msgSend(v46, sel_jobIdentifier);
          sub_2206D8E08();

          sub_2206D8C38();
          swift_bridgeObjectRelease();
          (*(void (**)(void *, uint64_t))(v41 + 8))(v12, v10);
          id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF9480]), sel_initWithMarkerType_forTextRange_atByteSampleOffset_, 1, v36, v37, v44);
          swift_unknownObjectRelease();
LABEL_18:
          a6 = v45;
          goto LABEL_19;
        }
      }
      swift_unknownObjectRelease();
      id v28 = 0;
      goto LABEL_18;
    }
    swift_unknownObjectRelease();
    id v28 = 0;
LABEL_19:
    *a6 = v28;
    return;
  }
  self;
  id v28 = (id)swift_dynamicCastObjCClass();
  if (!v28) {
    goto LABEL_19;
  }
  swift_unknownObjectRetain();
  id v29 = objc_msgSend(v28, sel_name);
  if (v29)
  {
    uint64_t v30 = v29;
    sub_2206D8E08();

    id v31 = objc_allocWithZone(MEMORY[0x263EF9480]);
    uint64_t v32 = (void *)sub_2206D8DF8();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v31, sel_initWithBookmarkName_atByteSampleOffset_, v32, a5);
    swift_unknownObjectRelease();

    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_2201CE4EC(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C8B0);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    uint64_t v29 = a5;
    unint64_t v30 = a6;
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    uint64_t v21 = sub_2206D8BA8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 1, 1, v21);
    sub_2201CEBBC();
  }
  else
  {
    uint64_t v14 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v14 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if (a3 >> 14 >= 4 * v14) {
      return 0;
    }
    uint64_t v29 = a5;
    unint64_t v30 = a6;
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    uint64_t v15 = sub_2206D8BA8();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v25 = v16 + 56;
    id v26 = v17;
    v17(v13, 1, 1, v15);
    sub_2201CEBBC();
    uint64_t v18 = sub_2206D9088();
    char v20 = v19;
    sub_2201D11D4((uint64_t)v13, &qword_267F0C8B0);
    if ((v20 & 1) == 0) {
      return v18;
    }
    uint64_t v29 = a5;
    unint64_t v30 = a6;
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    v26(v13, 1, 1, v15);
  }
  uint64_t v18 = sub_2206D9088();
  char v23 = v22;
  sub_2201D11D4((uint64_t)v13, &qword_267F0C8B0);
  if (v23) {
    return 0;
  }
  return v18;
}

uint64_t sub_2201CE784()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_2201D11D4(v0 + qword_26AD528A8, (uint64_t *)&unk_26AD526B8);
  swift_bridgeObjectRelease();
  sub_2201D11D4(v0 + qword_26AD52880, (uint64_t *)&unk_26AD526A8);
  uint64_t v1 = v0 + qword_26AD528B8;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26AD526C8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v5)((void *)(v2 - 8), v1, v2);
  uint64_t v3 = v0 + qword_26AD528A0;

  return v5(v3, v2);
}

id MauiAUSPAudioUnit.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MauiAUSPAudioUnit();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2201CE950(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_2201D11D4(a1 + qword_26AD528A8, (uint64_t *)&unk_26AD526B8);
  swift_bridgeObjectRelease();
  sub_2201D11D4(a1 + qword_26AD52880, (uint64_t *)&unk_26AD526A8);
  uint64_t v2 = a1 + qword_26AD528B8;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26AD526C8);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), v2, v3);
  uint64_t v4 = a1 + qword_26AD528A0;

  return v6(v4, v3);
}

uint64_t sub_2201CEAE8()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_2201CEB20(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  sub_2201CA2E4(a1, a3, a5, v5);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_2201CEB68()
{
  unint64_t result = qword_267F0C738;
  if (!qword_267F0C738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267F0C738);
  }
  return result;
}

unint64_t sub_2201CEBBC()
{
  unint64_t result = qword_26AD52768;
  if (!qword_26AD52768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD52768);
  }
  return result;
}

unint64_t sub_2201CEC10()
{
  unint64_t result = qword_267F0C750;
  if (!qword_267F0C750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267F0C750);
  }
  return result;
}

uint64_t sub_2201CEC64()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2201CEC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return sub_2201CC560(a1, a2, a3, a4, a5, a6, a7, *(void **)(v7 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_2201CECBC(uint64_t a1, uint64_t a2)
{
  sub_2206D9188();
  sub_2206D8E58();
  uint64_t v4 = sub_2206D91A8();

  return sub_2201CED34(a1, a2, v4);
}

unint64_t sub_2201CED34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2206D9168() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2206D9168() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_2201CEE18(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_2206D8F18();
  }
  __break(1u);
  return result;
}

void *sub_2201CEE64(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26AD52740);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_2201CFDB8((uint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_2206D9128();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

uint64_t sub_2201CEF5C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_2201D0378();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_2201CEFD8(v6);
  return sub_2206D90E8();
}

uint64_t sub_2201CEFD8(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t result = sub_2206D9158();
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_146;
    }
    if (v4) {
      return sub_2201CF808(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_145;
  }
  uint64_t v7 = result;
  uint64_t v99 = a1;
  if (v4 <= 1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t v107 = MEMORY[0x263F8EE78];
    uint64_t v105 = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (v11 < 2)
      {
LABEL_122:
        swift_bridgeObjectRelease();
        *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
        sub_2206D8F58();
        return swift_bridgeObjectRelease();
      }
LABEL_110:
      uint64_t v90 = *v99;
      while (1)
      {
        unint64_t v91 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_140;
        }
        if (!v90) {
          goto LABEL_153;
        }
        uint64_t v92 = v9;
        uint64_t v93 = v9 + 32;
        uint64_t v94 = *(void *)(v9 + 32 + 16 * v91);
        uint64_t v95 = *(void *)(v9 + 32 + 16 * (v11 - 1) + 8);
        uint64_t result = sub_2201CF944((char *)(v90 + 8 * v94), (char *)(v90 + 8 * *(void *)(v93 + 16 * (v11 - 1))), v90 + 8 * v95, v105);
        if (v2) {
          goto LABEL_122;
        }
        if (v95 < v94) {
          goto LABEL_141;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_2201CFDA4(v92);
          uint64_t v92 = result;
        }
        if (v91 >= *(void *)(v92 + 16)) {
          goto LABEL_142;
        }
        uint64_t v96 = (void *)(v92 + 32 + 16 * v91);
        void *v96 = v94;
        v96[1] = v95;
        unint64_t v97 = *(void *)(v92 + 16);
        if (v11 > v97) {
          goto LABEL_143;
        }
        uint64_t v9 = v92;
        uint64_t result = (uint64_t)memmove((void *)(v92 + 32 + 16 * (v11 - 1)), (const void *)(v92 + 32 + 16 * v11), 16 * (v97 - v11));
        *(void *)(v92 + 16) = v97 - 1;
        unint64_t v11 = v97 - 1;
        if (v97 <= 2) {
          goto LABEL_122;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C898);
    uint64_t result = sub_2206D8F78();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v105 = (char *)((result & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v107 = result;
  }
  uint64_t v101 = v7;
  uint64_t v10 = 0;
  uint64_t v100 = *a1 - 8;
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v104 = v4;
  uint64_t v106 = *a1;
LABEL_15:
  uint64_t v12 = v10++;
  if (v10 >= v4) {
    goto LABEL_41;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result || (uint64_t v13 = (void *)result, self, (result = swift_dynamicCastObjCClass()) == 0))
  {
    uint64_t v18 = v12 + 2;
    uint64_t v4 = v104;
    if (v12 + 2 < v104)
    {
      BOOL v17 = 1;
      goto LABEL_24;
    }
    uint64_t v19 = v106;
LABEL_33:
    if (v12 < v18)
    {
      uint64_t v25 = (uint64_t *)(v100 + 8 * v18);
      uint64_t v26 = v18;
      uint64_t v27 = v12;
      uint64_t v28 = (uint64_t *)(v19 + 8 * v12);
      while (1)
      {
        if (v27 != --v26)
        {
          if (!v19) {
            goto LABEL_152;
          }
          uint64_t v29 = *v28;
          *uint64_t v28 = *v25;
          uint64_t *v25 = v29;
        }
        ++v27;
        --v25;
        ++v28;
        if (v27 >= v26) {
          goto LABEL_40;
        }
      }
    }
    goto LABEL_40;
  }
  BOOL v14 = (void *)result;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v15 = objc_msgSend(v13, sel_wordRange);
  id v16 = objc_msgSend(v14, sel_wordRange);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  BOOL v17 = (uint64_t)v15 < (uint64_t)v16;
  uint64_t v18 = v12 + 2;
  uint64_t v4 = v104;
  uint64_t v19 = v106;
  if (v12 + 2 >= v104)
  {
LABEL_28:
    if (!v17) {
      goto LABEL_40;
    }
LABEL_32:
    if (v18 < v12) {
      goto LABEL_147;
    }
    goto LABEL_33;
  }
  do
  {
LABEL_24:
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result && (uint64_t v21 = (void *)result, self, (result = swift_dynamicCastObjCClass()) != 0))
    {
      char v22 = (void *)result;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      id v23 = objc_msgSend(v21, sel_wordRange);
      id v24 = objc_msgSend(v22, sel_wordRange);
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      if (((v17 ^ ((uint64_t)v23 >= (uint64_t)v24)) & 1) == 0)
      {
        uint64_t v4 = v104;
        uint64_t v19 = v106;
        goto LABEL_28;
      }
    }
    else if (!v17)
    {
      uint64_t v10 = v18;
      uint64_t v4 = v104;
      if (v18 < v104) {
        goto LABEL_42;
      }
LABEL_61:
      if (v10 < v12) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_2201CFCA8(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      unint64_t v40 = *(void *)(v9 + 16);
      unint64_t v39 = *(void *)(v9 + 24);
      unint64_t v11 = v40 + 1;
      uint64_t v41 = v106;
      if (v40 >= v39 >> 1)
      {
        uint64_t result = (uint64_t)sub_2201CFCA8((char *)(v39 > 1), v40 + 1, 1, (char *)v9);
        uint64_t v41 = v106;
        uint64_t v9 = result;
      }
      *(void *)(v9 + 16) = v11;
      uint64_t v42 = v9 + 32;
      id v43 = (uint64_t *)(v9 + 32 + 16 * v40);
      *id v43 = v12;
      v43[1] = v10;
      if (v40)
      {
        while (1)
        {
          unint64_t v44 = v11 - 1;
          if (v11 >= 4)
          {
            unint64_t v49 = v42 + 16 * v11;
            uint64_t v50 = *(void *)(v49 - 64);
            uint64_t v51 = *(void *)(v49 - 56);
            BOOL v55 = __OFSUB__(v51, v50);
            uint64_t v52 = v51 - v50;
            if (v55) {
              goto LABEL_128;
            }
            uint64_t v54 = *(void *)(v49 - 48);
            uint64_t v53 = *(void *)(v49 - 40);
            BOOL v55 = __OFSUB__(v53, v54);
            uint64_t v47 = v53 - v54;
            char v48 = v55;
            if (v55) {
              goto LABEL_129;
            }
            unint64_t v56 = v11 - 2;
            id v57 = (uint64_t *)(v42 + 16 * (v11 - 2));
            uint64_t v59 = *v57;
            uint64_t v58 = v57[1];
            BOOL v55 = __OFSUB__(v58, v59);
            uint64_t v60 = v58 - v59;
            if (v55) {
              goto LABEL_130;
            }
            BOOL v55 = __OFADD__(v47, v60);
            uint64_t v61 = v47 + v60;
            if (v55) {
              goto LABEL_132;
            }
            if (v61 >= v52)
            {
              uint64_t v79 = (uint64_t *)(v42 + 16 * v44);
              uint64_t v81 = *v79;
              uint64_t v80 = v79[1];
              BOOL v55 = __OFSUB__(v80, v81);
              uint64_t v82 = v80 - v81;
              if (v55) {
                goto LABEL_138;
              }
              BOOL v72 = v47 < v82;
              goto LABEL_98;
            }
          }
          else
          {
            if (v11 != 3)
            {
              uint64_t v73 = *(void *)(v9 + 32);
              uint64_t v74 = *(void *)(v9 + 40);
              BOOL v55 = __OFSUB__(v74, v73);
              uint64_t v66 = v74 - v73;
              char v67 = v55;
              goto LABEL_92;
            }
            uint64_t v46 = *(void *)(v9 + 32);
            uint64_t v45 = *(void *)(v9 + 40);
            BOOL v55 = __OFSUB__(v45, v46);
            uint64_t v47 = v45 - v46;
            char v48 = v55;
          }
          if (v48) {
            goto LABEL_131;
          }
          unint64_t v56 = v11 - 2;
          uint64_t v62 = (uint64_t *)(v42 + 16 * (v11 - 2));
          uint64_t v64 = *v62;
          uint64_t v63 = v62[1];
          BOOL v65 = __OFSUB__(v63, v64);
          uint64_t v66 = v63 - v64;
          char v67 = v65;
          if (v65) {
            goto LABEL_133;
          }
          uint64_t v68 = (uint64_t *)(v42 + 16 * v44);
          uint64_t v70 = *v68;
          uint64_t v69 = v68[1];
          BOOL v55 = __OFSUB__(v69, v70);
          uint64_t v71 = v69 - v70;
          if (v55) {
            goto LABEL_135;
          }
          if (__OFADD__(v66, v71)) {
            goto LABEL_137;
          }
          if (v66 + v71 >= v47)
          {
            BOOL v72 = v47 < v71;
LABEL_98:
            if (v72) {
              unint64_t v44 = v56;
            }
            goto LABEL_100;
          }
LABEL_92:
          if (v67) {
            goto LABEL_134;
          }
          uint64_t v75 = (uint64_t *)(v42 + 16 * v44);
          uint64_t v77 = *v75;
          uint64_t v76 = v75[1];
          BOOL v55 = __OFSUB__(v76, v77);
          uint64_t v78 = v76 - v77;
          if (v55) {
            goto LABEL_136;
          }
          if (v78 < v66) {
            goto LABEL_14;
          }
LABEL_100:
          unint64_t v83 = v44 - 1;
          if (v44 - 1 >= v11)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
            goto LABEL_149;
          }
          if (!v41) {
            goto LABEL_151;
          }
          uint64_t v84 = v9;
          uint64_t v85 = (uint64_t *)(v42 + 16 * v83);
          uint64_t v86 = *v85;
          uint64_t v87 = (void *)(v42 + 16 * v44);
          uint64_t v88 = v87[1];
          uint64_t result = sub_2201CF944((char *)(v41 + 8 * *v85), (char *)(v41 + 8 * *v87), v41 + 8 * v88, v105);
          if (v1) {
            goto LABEL_122;
          }
          if (v88 < v86) {
            goto LABEL_125;
          }
          if (v44 > *(void *)(v84 + 16)) {
            goto LABEL_126;
          }
          uint64_t *v85 = v86;
          *(void *)(v42 + 16 * v83 + 8) = v88;
          unint64_t v89 = *(void *)(v84 + 16);
          if (v44 >= v89) {
            goto LABEL_127;
          }
          uint64_t v9 = v84;
          unint64_t v11 = v89 - 1;
          uint64_t result = (uint64_t)memmove((void *)(v42 + 16 * v44), v87 + 2, 16 * (v89 - 1 - v44));
          *(void *)(v84 + 16) = v89 - 1;
          uint64_t v41 = v106;
          if (v89 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v11 = 1;
LABEL_14:
      uint64_t v4 = v104;
      if (v10 >= v104)
      {
        uint64_t v2 = v1;
        if (v11 < 2) {
          goto LABEL_122;
        }
        goto LABEL_110;
      }
      goto LABEL_15;
    }
    uint64_t v20 = v18 + 1;
    uint64_t v18 = v20;
    uint64_t v4 = v104;
    uint64_t v19 = v106;
  }
  while (v20 < v104);
  uint64_t v18 = v20;
  if (v17) {
    goto LABEL_32;
  }
LABEL_40:
  uint64_t v10 = v18;
LABEL_41:
  if (v10 >= v4) {
    goto LABEL_61;
  }
LABEL_42:
  if (__OFSUB__(v10, v12)) {
    goto LABEL_144;
  }
  if (v10 - v12 >= v101) {
    goto LABEL_61;
  }
  if (__OFADD__(v12, v101)) {
    goto LABEL_148;
  }
  if (v12 + v101 >= v4) {
    uint64_t v30 = v4;
  }
  else {
    uint64_t v30 = v12 + v101;
  }
  if (v30 >= v12)
  {
    if (v10 != v30)
    {
      uint64_t v102 = v30;
      uint64_t v103 = v12;
      uint64_t v98 = v9;
      id v31 = (uint64_t *)(v100 + 8 * v10);
      do
      {
        uint64_t v32 = v103;
        uint64_t v33 = v31;
        do
        {
          self;
          uint64_t result = swift_dynamicCastObjCClass();
          if (result)
          {
            unint64_t v34 = (void *)result;
            self;
            uint64_t result = swift_dynamicCastObjCClass();
            if (result)
            {
              char v35 = (void *)result;
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              id v36 = objc_msgSend(v34, sel_wordRange);
              id v37 = objc_msgSend(v35, sel_wordRange);
              swift_unknownObjectRelease();
              uint64_t result = swift_unknownObjectRelease();
              if ((uint64_t)v36 >= (uint64_t)v37) {
                break;
              }
            }
          }
          if (!v106) {
            goto LABEL_150;
          }
          uint64_t v38 = *v33;
          uint64_t *v33 = v33[1];
          v33[1] = v38;
          --v33;
          ++v32;
        }
        while (v10 != v32);
        ++v10;
        ++v31;
      }
      while (v10 != v102);
      uint64_t v10 = v102;
      uint64_t v9 = v98;
      uint64_t v12 = v103;
    }
    goto LABEL_61;
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
  return result;
}

uint64_t sub_2201CF808(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = (void *)(*a4 + 8 * a3 - 8);
LABEL_5:
    uint64_t v7 = v14;
    id v15 = v6;
    while (1)
    {
      self;
      uint64_t result = swift_dynamicCastObjCClass();
      if (result)
      {
        uint64_t v8 = (void *)result;
        self;
        uint64_t result = swift_dynamicCastObjCClass();
        if (result)
        {
          uint64_t v9 = (void *)result;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          id v10 = objc_msgSend(v8, sel_wordRange);
          id v11 = objc_msgSend(v9, sel_wordRange);
          swift_unknownObjectRelease();
          uint64_t result = swift_unknownObjectRelease();
          if ((uint64_t)v10 >= (uint64_t)v11)
          {
LABEL_4:
            ++v4;
            uint64_t v6 = v15 + 1;
            if (v4 == a2) {
              return result;
            }
            goto LABEL_5;
          }
        }
      }
      if (!v5) {
        break;
      }
      uint64_t v12 = *v6;
      *uint64_t v6 = v6[1];
      v6[1] = v12;
      --v6;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2201CF944(char *__src, char *__dst, unint64_t a3, char *a4)
{
  uint64_t v6 = __dst;
  uint64_t v7 = __src;
  int64_t v8 = __dst - __src;
  int64_t v9 = __dst - __src + 7;
  if (__dst - __src >= 0) {
    int64_t v9 = __dst - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)__dst;
  uint64_t v12 = a3 - (void)__dst + 7;
  if ((uint64_t)(a3 - (void)__dst) >= 0) {
    uint64_t v12 = a3 - (void)__dst;
  }
  uint64_t v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __dst || &__dst[8 * v13] <= a4) {
      memmove(a4, __dst, 8 * v13);
    }
    unint64_t v34 = a4;
    id v15 = &a4[8 * v13];
    if (v7 >= v6 || v11 < 8)
    {
LABEL_44:
      uint64_t v14 = v34;
      goto LABEL_47;
    }
    id v24 = (char *)(a3 - 8);
    while (1)
    {
      char v35 = v24 + 8;
      id v36 = v15;
      v15 -= 8;
      uint64_t v25 = v6 - 8;
      self;
      uint64_t v26 = swift_dynamicCastObjCClass();
      if (v26)
      {
        uint64_t v27 = (void *)v26;
        self;
        uint64_t v28 = swift_dynamicCastObjCClass();
        if (v28)
        {
          uint64_t v29 = (void *)v28;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          id v30 = objc_msgSend(v27, sel_wordRange);
          id v31 = objc_msgSend(v29, sel_wordRange);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          if ((uint64_t)v30 >= (uint64_t)v31) {
            break;
          }
        }
      }
      if (v35 != v6)
      {
        v6 -= 8;
        id v15 = v36;
LABEL_37:
        *(void *)id v24 = *(void *)v25;
        goto LABEL_38;
      }
      BOOL v32 = v24 >= v6;
      v6 -= 8;
      id v15 = v36;
      if (v32) {
        goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v24 -= 8;
        if (v15 > v34) {
          continue;
        }
      }
      goto LABEL_44;
    }
    uint64_t v25 = v15;
    if (v35 == v36 && v24 < v36) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v14 = a4;
  if (a4 != __src || &__src[8 * v10] <= a4) {
    memmove(a4, __src, 8 * v10);
  }
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    id v15 = &v14[8 * v10];
    while (1)
    {
      self;
      uint64_t v16 = swift_dynamicCastObjCClass();
      if (!v16) {
        break;
      }
      BOOL v17 = (void *)v16;
      self;
      uint64_t v18 = swift_dynamicCastObjCClass();
      if (!v18) {
        break;
      }
      uint64_t v19 = (void *)v18;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      id v20 = objc_msgSend(v17, sel_wordRange);
      id v21 = objc_msgSend(v19, sel_wordRange);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((uint64_t)v20 < (uint64_t)v21) {
        break;
      }
      char v22 = v14;
      BOOL v23 = v7 == v14;
      v14 += 8;
      if (!v23) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 8;
      if (v14 >= v15 || (unint64_t)v6 >= a3)
      {
        uint64_t v6 = v7;
        goto LABEL_47;
      }
    }
    char v22 = v6;
    BOOL v23 = v7 == v6;
    v6 += 8;
    if (v23) {
      goto LABEL_17;
    }
LABEL_16:
    *(void *)uint64_t v7 = *(void *)v22;
    goto LABEL_17;
  }
  uint64_t v6 = v7;
  id v15 = &v14[8 * v10];
LABEL_47:
  if (v6 != v14 || v6 >= &v14[(v15 - v14 + (v15 - v14 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8]) {
    memmove(v6, v14, 8 * ((v15 - v14) / 8));
  }
  return 1;
}

char *sub_2201CFCA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_267F0C8B8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2201CFDA4(uint64_t a1)
{
  return sub_2201CFCA8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2201CFDB8(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_2206D9128();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_2206D9128();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_2201D10DC(&qword_267F0C8A8, &qword_267F0C8A0);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C8A0);
            uint64_t v10 = sub_2201D014C(v13, i, a3);
            uint64_t v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C898);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2201CFF7C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_2206D9128();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_2206D9128();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_2201D10DC(&qword_267F0C8D0, &qword_267F0C8C8);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_267F0C8C8);
            uint64_t v10 = sub_2201D01B8(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void (**)(id *), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_2201D1684(0, (unint64_t *)&unk_26AD52750);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*sub_2201D014C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_2201D0268(v6, a2, a3);
  return sub_2201D01B4;
}

uint64_t (*sub_2201D01B8(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_2201D02F0(v6, a2, a3);
  return sub_2201D01B4;
}

void sub_2201D0220(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_2201D0268(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x223C68270](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_2201D02E8;
  }
  __break(1u);
  return result;
}

uint64_t sub_2201D02E8()
{
  return swift_unknownObjectRelease();
}

void (*sub_2201D02F0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x223C68270](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_2201D0370;
  }
  __break(1u);
  return result;
}

void sub_2201D0370(id *a1)
{
}

void sub_2201D0378()
{
}

uint64_t sub_2201D038C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_2206D8EF8();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x223C68080](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_2201D0408(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7, unsigned int a8)
{
  uint64_t v23 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_2206D9128();
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v11 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = MEMORY[0x223C68270](i - 4, a1);
          uint64_t v13 = i - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(a1 + 8 * i);
          swift_unknownObjectRetain();
          uint64_t v13 = i - 3;
          if (__OFADD__(v11, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        v22[1] = v12;
        sub_2201CDFC8(a4, a5, a6, a7, a8, v22);
        if (v21)
        {
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v14 = swift_unknownObjectRelease();
        if (v22[0])
        {
          MEMORY[0x223C680E0](v14);
          if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2206D8F68();
          }
          sub_2206D8F88();
          sub_2206D8F58();
        }
        if (v13 == v9)
        {
          swift_bridgeObjectRelease();
          return v23;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

id _s23TextToSpeechMauiSupport0D13AUSPAudioUnitC12speechVoicesSaySo30AVSpeechSynthesisProviderVoiceCGvg_0()
{
  uint64_t v0 = MEMORY[0x263F8EE78];
  if (!AXRuntimeCheck_MauiSSE()) {
    return (id)v0;
  }
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_sharedInstance);
  id v3 = objc_msgSend(v2, sel_resourcesWithType_subType_, 4, 1);

  sub_2201D1684(0, (unint64_t *)&unk_26AD52750);
  uint64_t v4 = sub_2206D8F48();

  unint64_t v39 = v4;
  id v5 = objc_msgSend(v1, sel_sharedInstance);
  id v6 = objc_msgSend(v5, sel_resourcesWithType_subType_, 10, 1);

  unint64_t v7 = sub_2206D8F48();
  sub_2201CCB00(v7);
  id v8 = objc_msgSend(v1, sel_sharedInstance);
  id v9 = objc_msgSend(v8, sel_resourcesWithType_subType_, 7, 1);

  unint64_t v10 = sub_2206D8F48();
  sub_2201CCB00(v10);
  id v11 = objc_msgSend(v1, sel_sharedInstance);
  id v12 = objc_msgSend(v11, sel_resourcesWithType_subType_, 6, 1);

  unint64_t v13 = sub_2206D8F48();
  sub_2201CCB00(v13);
  unint64_t v14 = v39;
  if (!(v39 >> 62))
  {
    uint64_t v15 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    unint64_t v34 = v39;
    if (v15) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  id result = (id)sub_2206D9128();
  uint64_t v15 = (uint64_t)result;
  unint64_t v34 = v39;
  if (!result) {
    goto LABEL_16;
  }
LABEL_4:
  if (v15 >= 1)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if ((v39 & 0xC000000000000001) != 0) {
        id v18 = (id)MEMORY[0x223C68270](i, v14);
      }
      else {
        id v18 = *(id *)(v14 + 8 * i + 32);
      }
      uint64_t v19 = v18;
      if (objc_msgSend(v18, sel_isInstalled, v34))
      {
        sub_2206D90D8();
        sub_2206D9108();
        unint64_t v14 = v34;
        sub_2206D9118();
        sub_2206D90E8();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = v0;
    if (v0 < 0)
    {
LABEL_31:
      while (1)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_2206D9128();
        swift_release();
        if (!v21) {
          goto LABEL_32;
        }
LABEL_19:
        uint64_t v38 = v0;
        id result = (id)sub_2206D90F8();
        if (v21 < 0) {
          goto LABEL_35;
        }
        uint64_t v0 = 0;
        uint64_t v36 = v21;
        unint64_t v37 = v20 & 0xC000000000000001;
        char v22 = (SEL *)&unk_26456D000;
        uint64_t v35 = v20;
        while (v21 != v0)
        {
          if (v37) {
            id v23 = (id)MEMORY[0x223C68270](v0, v20);
          }
          else {
            id v23 = *(id *)(v20 + 8 * v0 + 32);
          }
          id v24 = v23;
          id v25 = objc_msgSend(v23, sel_localizedNameWithFootprint, v34);
          sub_2206D8E08();

          id result = objc_msgSend(v24, sel_voiceId);
          if (!result) {
            goto LABEL_36;
          }
          uint64_t v26 = result;
          sub_2206D8E08();

          id result = [v24 v22[368]];
          if (!result) {
            goto LABEL_37;
          }
          uint64_t v27 = result;
          sub_2206D8F48();

          id result = [v24 v22[368]];
          if (!result) {
            goto LABEL_38;
          }
          uint64_t v28 = result;
          ++v0;
          sub_2206D8F48();

          id v29 = objc_allocWithZone(MEMORY[0x263EF9488]);
          id v30 = (void *)sub_2206D8DF8();
          swift_bridgeObjectRelease();
          id v31 = (void *)sub_2206D8DF8();
          swift_bridgeObjectRelease();
          BOOL v32 = (void *)sub_2206D8F38();
          swift_bridgeObjectRelease();
          uint64_t v33 = (void *)sub_2206D8F38();
          swift_bridgeObjectRelease();
          objc_msgSend(v29, sel_initWithName_identifier_primaryLanguages_supportedLanguages_, v30, v31, v32, v33);

          sub_2206D90D8();
          sub_2206D9108();
          sub_2206D9118();
          sub_2206D90E8();
          uint64_t v20 = v35;
          uint64_t v21 = v36;
          char v22 = (SEL *)&unk_26456D000;
          if (v36 == v0)
          {
            uint64_t v0 = v38;
            swift_bridgeObjectRelease();
            swift_release();
            return (id)v0;
          }
        }
        __break(1u);
      }
    }
LABEL_17:
    if ((v20 & 0x4000000000000000) != 0) {
      goto LABEL_31;
    }
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21) {
      goto LABEL_19;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_release();
    return (id)MEMORY[0x263F8EE78];
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_2201D0B28()
{
  sub_2201D0CDC(319, (unint64_t *)&unk_26AD527B0, MEMORY[0x263F07508]);
  if (v0 <= 0x3F)
  {
    sub_2201D0CDC(319, &qword_26AD527A8, MEMORY[0x263F07490]);
    if (v1 <= 0x3F)
    {
      sub_2201D0D30();
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

void sub_2201D0CDC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2206D9058();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_2201D0D30()
{
  if (!qword_26AD527C0)
  {
    unint64_t v0 = sub_2206D8BD8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AD527C0);
    }
  }
}

uint64_t sub_2201D0D90()
{
  return type metadata accessor for MauiAUSPAudioUnit();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MauiAUSPParameter(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MauiAUSPParameter(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2201D0F24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_2201D0F4C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_2201D0F58(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MauiAUSPParameter()
{
  return &type metadata for MauiAUSPParameter;
}

unint64_t sub_2201D0F78()
{
  unint64_t result = qword_267F0C828;
  if (!qword_267F0C828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267F0C828);
  }
  return result;
}

uint64_t sub_2201D0FCC()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2201D1004()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void type metadata accessor for CMFormatDescription(uint64_t a1)
{
}

uint64_t sub_2201D1040()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

id sub_2201D1088()
{
  return sub_2201CD258(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_2201D1094(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2201D10DC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2201D1120(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_2201D1184(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2201D1684(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2201D11D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2201D1230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v9 = *(void *)(v5 + 16);
  id v10 = objc_msgSend(objc_allocWithZone((Class)TTSMauiVoiceResource), sel_init);
  if (a3 != 0xD000000000000022 || a4 != 0x80000002207AFFB0)
  {
    id v20 = v10;
    if ((sub_2206D9168() & 1) == 0)
    {
      if (a3 == 0xD000000000000020 && a4 == 0x80000002207AFFE0 || (sub_2206D9168() & 1) != 0)
      {
        uint64_t v11 = 1;
      }
      else if (a3 == 0xD00000000000001FLL && a4 == 0x80000002207B0010)
      {
        uint64_t v11 = 2;
      }
      else if (sub_2206D9168())
      {
        uint64_t v11 = 2;
      }
      else
      {
        uint64_t v11 = 0;
      }
      id v12 = v20;
      objc_msgSend(v12, sel_setType_, v11);
      unint64_t v13 = (void *)sub_2206D8DF8();
      objc_msgSend(v12, sel_setResourceName_, v13);

      uint64_t v14 = a5();
      unint64_t v16 = v15;
      BOOL v17 = (void *)sub_2206D8B38();
      sub_2201D145C(v14, v16);
      objc_msgSend(v12, sel_setResourceData_, v17);

      id v18 = *(id *)(v9 + qword_26AD527E0);
      objc_msgSend(v18, sel_loadVoiceResource_, v12);
    }
  }

  return MEMORY[0x270F9A758]();
}

uint64_t sub_2201D1454()
{
  return sub_2201CDCDC(*(void *)(v0 + 16));
}

uint64_t sub_2201D145C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_2201D14B4()
{
  unint64_t result = qword_267F0C908;
  if (!qword_267F0C908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267F0C908);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_2201D156C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_2201D157C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2201D15E0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 36, 7);
}

void sub_2201D1620()
{
  sub_2201CDD74(*(void *)(v0 + 24), *(_DWORD *)(v0 + 32));
}

uint64_t sub_2201D164C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2201D165C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2201D1684(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_2201D16D4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2201D16F4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for AudioBufferList(uint64_t a1)
{
}

uint64_t sub_2201D1734(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_2201D177C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2201D179C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for AudioTimeStamp(uint64_t a1)
{
}

void type metadata accessor for AudioUnitRenderActionFlags(uint64_t a1)
{
}

void type metadata accessor for AudioTimeStampFlags(uint64_t a1)
{
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for SMPTETime(uint64_t a1)
{
}

uint64_t sub_2201D183C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2201D185C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for AudioBuffer(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeFlags(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeType(uint64_t a1)
{
}

void sub_2201D18C0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t brkhlp_ScanFilesForEnginesAndAddOns(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    ssftmap_Clear(*(void *)(a1 + 40));
  }
  uint64_t result = brkhlp_FindAllEnginesAndAddOns(a1, *(char **)(a2 + 16));
  if (*(void *)(a2 + 32) && (result & 0x80000000) == 0 && *(_WORD *)(a2 + 24))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t result = brkhlp_FindAllEnginesAndAddOns(a1, *(char **)(*(void *)(a2 + 32) + 8 * v6));
      if ((result & 0x80000000) != 0) {
        break;
      }
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 24));
  }
  return result;
}

uint64_t brkhlp_FindAllEnginesAndAddOns(uint64_t a1, char *a2)
{
  char v48 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  __s1 = 0;
  BOOL v55 = 0;
  uint64_t v52 = 0;
  __s = 0;
  uint64_t v51 = 0;
  int v50 = 1;
  uint64_t FirstFile = brkhlp_FindFirstFile(v4, a2, "*.hdr", &__s, (uint64_t *)&v55);
  if ((FirstFile & 0x80000000) != 0) {
    return FirstFile;
  }
  uint64_t v47 = 0;
  do
  {
    if (!v55)
    {
      uint64_t FirstFile = brkhlp_FindFirstFile(v4, a2, "*.dat", &__s, (uint64_t *)&__s1);
      if ((FirstFile & 0x80000000) != 0) {
        return FirstFile;
      }
      if (!__s1) {
        goto LABEL_43;
      }
      while (1)
      {
        uint64_t v21 = __s;
        log_OutText(*(void *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem szFullPathName=%s", v18, v19, v20, (uint64_t)__s);
        char v22 = cstdlib_strrchr(v21, 47);
        if (v22) {
          id v23 = v22;
        }
        else {
          id v23 = v21 - 1;
        }
        int v24 = cstdlib_strlen(v21) + v21 - v23;
        id v25 = (char *)heap_Alloc(*(void *)(v4 + 8), (v24 - 4));
        if (!v25) {
          return 2169528330;
        }
        unint64_t v26 = (unint64_t)v25;
        size_t v27 = (v24 - 5);
        cstdlib_strncpy(v25, v23 + 1, v27);
        *(unsigned char *)(v26 + v27) = 0;
        log_OutText(*(void *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem szSurrogateBrokerString=%s", v28, v29, v30, v26);
        id v31 = __s;
        uint64_t v32 = hdrpars_CreateSurrogateTagMap(*(void **)(v4 + 8), v26, (uint64_t)__s, &v52);
        if ((v32 & 0x80000000) != 0)
        {
          uint64_t NextFile = v32;
        }
        else
        {
          uint64_t NextFile = brkhlp_AddItemToClass((uint64_t)v31, v52, a1);
          if ((NextFile & 0x80000000) == 0) {
            log_OutText(*(void *)(v4 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_FindHdrFileAndAddItem AddedNewSurrogateBrokerString=%s", v33, v34, v35, v26);
          }
        }
        heap_Free(*(void **)(v4 + 8), v26);
        heap_Free(*(void **)(v4 + 8), (uint64_t)v31);
        if ((NextFile & 0x80000000) != 0) {
          break;
        }
        uint64_t NextFile = brkhlp_FindNextFile(__s1, a2, &__s, *(void **)(v4 + 8), &v50);
        p_s1 = (uint64_t *)&__s1;
        if ((NextFile & 0x80000000) != 0 || !v50) {
          goto LABEL_42;
        }
        if (!__s1) {
          goto LABEL_43;
        }
      }
      unint64_t v37 = &__s1;
      goto LABEL_85;
    }
    unint64_t v6 = __s;
    unsigned int v7 = cstdlib_strlen(__s);
    if (v7 < 5 || cstdlib_strncmp(&v6[v7 - 4], ".hdr", 4uLL)) {
      goto LABEL_6;
    }
    uint64_t NextFile = hdrpars_ReadHeader(*(_WORD **)a1, *(void *)(a1 + 8), v6, 0, &v52, &v51);
    if ((NextFile & 0x80000000) != 0)
    {
      log_OutPublic(*(void *)(v4 + 32), (uint64_t)"BROKER", 276, (uint64_t)"%s%s", v10, v11, v12, v13, "file");
      if ((NextFile & 0x1FFF) == 0xA) {
        goto LABEL_83;
      }
LABEL_6:
      heap_Free(*(void **)(v4 + 8), (uint64_t)v6);
      goto LABEL_7;
    }
    if (!v51)
    {
      uint64_t v17 = brkhlp_ExpandComponentPath(a1, v52);
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t NextFile = brkhlp_AddItemToClass((uint64_t)v6, v52, a1);
        goto LABEL_25;
      }
      uint64_t NextFile = v17;
LABEL_83:
      heap_Free(*(void **)(v4 + 8), (uint64_t)v6);
LABEL_84:
      unint64_t v37 = &v55;
LABEL_85:
      unint64_t v44 = *v37;
      goto LABEL_86;
    }
    unint64_t v49 = 0;
    if (vector_GetElemAt(v51, 0, &v49))
    {
      unsigned int v14 = 1;
      while (1)
      {
        if ((NextFile & 0x80000000) != 0) {
          goto LABEL_18;
        }
        uint64_t v15 = brkhlp_ExpandComponentPath(a1, *v49);
        if ((v15 & 0x80000000) != 0) {
          break;
        }
        uint64_t NextFile = brkhlp_AddItemToClass((uint64_t)v6, *v49, a1);
LABEL_19:
        if (!vector_GetElemAt(v51, v14++, &v49)) {
          goto LABEL_20;
        }
      }
      uint64_t NextFile = v15;
LABEL_18:
      ssftmap_ObjClose(*v49);
      goto LABEL_19;
    }
LABEL_20:
    vector_ObjClose(v51);
    uint64_t v51 = 0;
LABEL_25:
    heap_Free(*(void **)(v4 + 8), (uint64_t)v6);
    if ((NextFile & 0x80000000) != 0) {
      goto LABEL_84;
    }
LABEL_7:
    uint64_t NextFile = brkhlp_FindNextFile(v55, a2, &__s, *(void **)(v4 + 8), &v50);
    p_s1 = (uint64_t *)&v55;
  }
  while ((NextFile & 0x80000000) == 0 && v50);
LABEL_42:
  osspi_FindClose(*p_s1);
  if ((NextFile & 0x80000000) != 0) {
    return NextFile;
  }
LABEL_43:
  uint64_t v47 = 0;
  char v48 = 0;
  if (!a2) {
    goto LABEL_69;
  }
  __s1 = 0;
  BOOL v55 = 0;
  uint64_t FirstFile = brkhlp_ConcatenatePath(&v55, a2, "*", 0, *(void *)(v4 + 8));
  if ((FirstFile & 0x80000000) != 0) {
    return FirstFile;
  }
  uint64_t v36 = v55;
  LODWORD(NextFile) = osspi_FindOpen(*(void **)(v4 + 64), *(void **)(v4 + 8), (uint64_t)v55, 16, (uint64_t)&__s1, (uint64_t *)&v48);
  if ((NextFile & 0x80000000) == 0)
  {
    while ((NextFile & 0x80000000) == 0)
    {
      if (cstdlib_strcmp(__s1, ".") && cstdlib_strcmp(__s1, ".."))
      {
        int v39 = brkhlp_ConcatenatePath(&v47, a2, __s1, 0, *(void *)(v4 + 8));
        LODWORD(NextFile) = 0;
        if ((v39 & 0x80000000) == 0)
        {
LABEL_58:
          if (__s1) {
            heap_Free(*(void **)(v4 + 8), (uint64_t)__s1);
          }
          goto LABEL_60;
        }
        int v46 = v39;
        uint64_t v38 = v48;
        LODWORD(NextFile) = v46;
        if (!v48)
        {
LABEL_56:
          char v48 = 0;
          goto LABEL_58;
        }
LABEL_55:
        osspi_FindClose((uint64_t)v38);
        goto LABEL_56;
      }
      heap_Free(*(void **)(v4 + 8), (uint64_t)__s1);
      __s1 = 0;
      LODWORD(NextFile) = osspi_FindNext(v48, (uint64_t)&__s1);
      if ((NextFile & 0x1FFF) == 0x14)
      {
        uint64_t NextFile = 0;
        goto LABEL_63;
      }
    }
    uint64_t v38 = v48;
    if (!v48) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_60:
  if ((NextFile & 0x1FFF) == 0x14) {
    uint64_t NextFile = 0;
  }
  else {
    uint64_t NextFile = NextFile;
  }
LABEL_63:
  if (v36) {
    heap_Free(*(void **)(v4 + 8), (uint64_t)v36);
  }
  if (!v47 && v48)
  {
    osspi_FindClose((uint64_t)v48);
    char v48 = 0;
  }
  if ((NextFile & 0x80000000) == 0)
  {
LABEL_69:
    if (v48)
    {
      while (1)
      {
        unint64_t v40 = v47;
        uint64_t NextFile = brkhlp_FindAllEnginesAndAddOns(a1, v47);
        heap_Free(*(void **)(v4 + 8), (uint64_t)v40);
        if ((NextFile & 0x80000000) != 0) {
          break;
        }
        uint64_t v41 = v48;
        uint64_t v42 = *(void **)(v4 + 8);
        BOOL v55 = 0;
        uint64_t v47 = 0;
        unsigned int Next = osspi_FindNext(v48, (uint64_t)&v55);
        if ((Next & 0x80000000) != 0)
        {
          if ((Next & 0x1FFF) == 0x14) {
            uint64_t NextFile = 0;
          }
          else {
            uint64_t NextFile = Next;
          }
          break;
        }
        while ((Next & 0x80000000) == 0 && (!cstdlib_strcmp(v55, ".") || !cstdlib_strcmp(v55, "..")))
        {
          heap_Free(v42, (uint64_t)v55);
          BOOL v55 = 0;
          unsigned int Next = osspi_FindNext(v41, (uint64_t)&v55);
          if ((Next & 0x1FFF) == 0x14)
          {
            uint64_t NextFile = 0;
            goto LABEL_80;
          }
        }
        uint64_t NextFile = brkhlp_ConcatenatePath(&v47, a2, v55, 0, (uint64_t)v42);
        heap_Free(v42, (uint64_t)v55);
        if ((NextFile & 0x80000000) != 0) {
          break;
        }
        uint64_t NextFile = 0;
        if (!v48) {
          return NextFile;
        }
      }
LABEL_80:
      unint64_t v44 = (char *)v48;
LABEL_86:
      osspi_FindClose((uint64_t)v44);
    }
    else
    {
      return 0;
    }
  }
  return NextFile;
}

uint64_t brkhlp_FindFirstFile(uint64_t a1, char *a2, const char *a3, char **a4, uint64_t *a5)
{
  uint64_t v5 = 0;
  *a5 = 0;
  if (a2 && a3)
  {
    unsigned int v14 = 0;
    uint64_t v15 = 0;
    uint64_t v10 = brkhlp_ConcatenatePath(&v15, a2, a3, 0, *(void *)(a1 + 8));
    if ((v10 & 0x80000000) != 0)
    {
      return v10;
    }
    else
    {
      uint64_t v11 = v15;
      unsigned int Open = osspi_FindOpen(*(void **)(a1 + 64), *(void **)(a1 + 8), (uint64_t)v15, 0, (uint64_t)&v14, a5);
      if ((Open & 0x80000000) != 0)
      {
        if ((Open & 0x1FFF) == 0x14) {
          uint64_t v5 = 0;
        }
        else {
          uint64_t v5 = Open;
        }
      }
      else
      {
        uint64_t v5 = brkhlp_ConcatenatePath(a4, a2, v14, 0, *(void *)(a1 + 8));
        if ((v5 & 0x80000000) != 0)
        {
          if (*a5) {
            osspi_FindClose(*a5);
          }
          *a5 = 0;
        }
        heap_Free(*(void **)(a1 + 8), (uint64_t)v14);
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v11);
    }
  }
  return v5;
}

uint64_t brkhlp_ExpandComponentPath(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  memset(__b, 0, sizeof(__b));
  uint64_t v13 = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = "COMPONENT";
  int v5 = brkhlp_SearchTag(a2, (uint64_t)"COMPONENT", &v16);
  if (v5 < 0
    && (v4 = "COMMONCOMPONENT", unsigned int v6 = brkhlp_SearchTag(a2, (uint64_t)"COMMONCOMPONENT", &v16), (v6 & 0x80000000) != 0)
    || (unsigned int v6 = brkhlp_SearchTag(a2, (uint64_t)"HDRFILE", &v15), (v6 & 0x80000000) != 0)
    || (unsigned int v6 = brkhlp_ConcatenatePath(&v13, v15, v16, 1, *(void *)(v3 + 8)), (v6 & 0x80000000) != 0))
  {
    unsigned int v9 = v6;
  }
  else
  {
    cstdlib_memset(__b, 0, 0x18uLL);
    unsigned int v7 = v13;
    __b[0] = v13;
    unsigned int v8 = ssftmap_Insert(a2, (uint64_t)"FULLPATHCOMPONENT", (uint64_t)__b);
    if ((v8 & 0x80000000) == 0 || (unsigned int v9 = v8, (v8 & 0x1FFF) == 2)) {
      unsigned int v9 = ssftmap_Remove(a2, (uint64_t)v4);
    }
    heap_Free(*(void **)(v3 + 8), (uint64_t)v7);
    if (v5 < 0 && (v9 & 0x80000000) == 0)
    {
      cstdlib_memset(__b, 0, 0x18uLL);
      __b[0] = "1";
      int v10 = ssftmap_Insert(a2, (uint64_t)"COMMON", (uint64_t)__b);
      if ((v10 & 0x1FFF) == 2) {
        int v11 = 0;
      }
      else {
        int v11 = v10;
      }
      if (v10 < 0) {
        unsigned int v9 = v11;
      }
      else {
        unsigned int v9 = v10;
      }
    }
  }
  if (v9 == -2125438956) {
    return 0;
  }
  else {
    return v9;
  }
}

uint64_t brkhlp_FindNextFile(void *a1, char *a2, char **a3, void *a4, _DWORD *a5)
{
  uint64_t v12 = 0;
  *a3 = 0;
  *a5 = 0;
  unsigned int Next = osspi_FindNext(a1, (uint64_t)&v12);
  if ((Next & 0x80000000) != 0)
  {
    if ((Next & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return Next;
    }
  }
  else
  {
    uint64_t v10 = brkhlp_ConcatenatePath(a3, a2, v12, 0, (uint64_t)a4);
    heap_Free(a4, (uint64_t)v12);
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v10 = 0;
      *a5 = 1;
    }
  }
  return v10;
}

uint64_t brkhlp_ConcatenatePath(char **a1, char *__s, const char *a3, int a4, uint64_t a5)
{
  uint64_t v5 = 2169528320;
  if (__s && a3)
  {
    unsigned int v11 = cstdlib_strlen(__s);
    int v12 = cstdlib_strlen(a3);
    uint64_t v13 = (char *)heap_Alloc(a5, v11 + v12 + 2);
    *a1 = v13;
    if (v13)
    {
      cstdlib_strcpy(v13, __s);
      if (a4)
      {
        uint64_t v14 = v11++;
        while (v14)
        {
          int v15 = (*a1)[--v14];
          --v11;
          if (v15 == 47) {
            goto LABEL_11;
          }
        }
        unsigned int v11 = 0;
LABEL_11:
        (*a1)[v11] = 0;
      }
      if (v12 && v11 && __s[v11 - 1] != 47) {
        cstdlib_strcat(*a1, "/");
      }
      cstdlib_strcat(*a1, a3);
      unint64_t v16 = cstdlib_strchr(*a1 + 1, 46);
      if (v16)
      {
        uint64_t v17 = v16;
        while (1)
        {
          uint64_t v18 = v17 - 1;
          if (*(v17 - 1) != 47) {
            goto LABEL_31;
          }
          uint64_t v19 = v17 + 1;
          int v20 = v17[1];
          if (v20 == 46) {
            break;
          }
          if (v20 != 47) {
            goto LABEL_31;
          }
          size_t v21 = cstdlib_strlen(v17 + 2);
          cstdlib_memmove(v17, v17 + 2, v21 + 1);
          uint64_t v19 = v17;
LABEL_32:
          uint64_t v17 = cstdlib_strchr(v19, 46);
          if (!v17) {
            return 0;
          }
        }
        if (v17[2] == 47)
        {
          char v22 = *a1;
          if (v18 > *a1)
          {
            int v23 = 0;
            int v24 = v17 - 1;
            while (1)
            {
              int v26 = *--v24;
              int v25 = v26;
              if (v26 == 47) {
                break;
              }
              if (v25 != 46) {
                int v23 = 1;
              }
              uint64_t v18 = v24;
              if (v24 <= v22)
              {
                if (!v23) {
                  goto LABEL_32;
                }
                goto LABEL_35;
              }
            }
            char v22 = v18;
            if (!v23) {
              goto LABEL_32;
            }
LABEL_35:
            size_t v27 = v17 + 3;
            size_t v28 = cstdlib_strlen(v27);
            cstdlib_memmove(v22, v27, v28 + 1);
            uint64_t v19 = v22;
          }
          goto LABEL_32;
        }
LABEL_31:
        uint64_t v19 = v17 + 1;
        goto LABEL_32;
      }
      return 0;
    }
    else
    {
      return 2169528330;
    }
  }
  return v5;
}

uint64_t engbrk_AddSystemInfo(uint64_t a1, char *a2)
{
  uint64_t result = 2169528326;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = critsec_Enter(*(void **)(a1 + 24));
      if ((result & 0x80000000) == 0)
      {
        int v5 = brkhlp_ScanBufferForEnginesAndAddOns(*(void *)(a1 + 16), a1, a2);
        LODWORD(result) = critsec_Leave(*(void **)(a1 + 24));
        if (v5 > -1 && (int)result < 0) {
          return result;
        }
        else {
          return v5;
        }
      }
    }
  }
  return result;
}

uint64_t brkhlp_ScanBufferForEnginesAndAddOns(uint64_t a1, uint64_t a2, char *__s1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2169528326;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  strcpy(v22, "BINBROKER");
  if (!a2) {
    return v3;
  }
  uint64_t i = __s1;
  if (!__s1) {
    return v3;
  }
  if (cstdlib_strncmp(__s1, "<?xml", 5uLL))
  {
    unsigned int v7 = cstdlib_strpbrk(i, "\n\r");
    if (v7)
    {
      for (uint64_t i = v7; ; ++i)
      {
        int v8 = *i;
        if (v8 != 13 && v8 != 10) {
          break;
        }
      }
    }
  }
  uint64_t v3 = hdrpars_ReadHeader(*(_WORD **)a2, *(void *)(a2 + 8), 0, i, &v21, &v20);
  if ((v3 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"BROKER", 276, 0, v10, v11, v12, v13, v19);
    return v3;
  }
  if (!v20)
  {
    uint64_t v3 = brkhlp_AddItemToClass((uint64_t)v22, v21, a2);
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
    goto LABEL_24;
  }
  uint64_t v19 = 0;
  if (vector_GetElemAt(v20, 0, &v19))
  {
    unsigned int v14 = 1;
    do
    {
      if ((v3 & 0x80000000) != 0) {
        ssftmap_ObjClose(*v19);
      }
      else {
        uint64_t v3 = brkhlp_AddItemToClass((uint64_t)v22, *v19, a2);
      }
    }
    while (vector_GetElemAt(v20, v14++, &v19));
  }
  vector_ObjClose(v20);
  uint64_t v20 = 0;
  if ((v3 & 0x80000000) == 0)
  {
LABEL_24:
    uint64_t v3 = critsec_Enter(*(void **)(a2 + 56));
    if ((v3 & 0x80000000) == 0)
    {
      if (!ssftmap_GetSize(*(void *)(a2 + 40))) {
        LODWORD(v3) = -2125438710;
      }
      int v16 = critsec_Leave(*(void **)(a2 + 56));
      if ((int)v3 > -1 && v16 < 0) {
        return v16;
      }
      else {
        return v3;
      }
    }
  }
  return v3;
}

uint64_t engbrk_GetSystemInfo(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v3 = 2169528326;
  int v15 = 0;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    if ((ssftstring_ObjOpen(*(void **)(*(void *)(a1 + 16) + 8), &v15) & 0x80000000) == 0)
    {
      uint64_t v7 = critsec_Enter(*(void **)(a1 + 56));
      if ((v7 & 0x80000000) != 0)
      {
        uint64_t v3 = v7;
LABEL_22:
        ssftstring_ObjClose(v15);
        return v3;
      }
      int v8 = v15;
      int Size = ssftmap_GetSize(*(void *)(a1 + 40));
      ssftstring_Reserve((uint64_t)v8, 500 * Size);
      uint64_t v10 = v15;
      uint64_t v11 = *(void *)(a1 + 40);
      int v16 = 0;
      uint64_t v17 = 0;
      if (v11)
      {
        uint64_t v18 = 0;
        uint64_t v12 = ssftmap_IteratorOpen(v11, 0, 1, (uint64_t)&v16);
        uint64_t v3 = v12;
        if ((v12 & 0x80000000) == 0)
        {
          if ((ssftmap_IteratorNext(v16, &v17, &v18) & 0x80000000) == 0)
          {
            while (1)
            {
              uint64_t appended = ssftstring_AppendCStr((uint64_t)v10, "<?xml version=\"1.0\"?>\n<NUANCE>\n<VERSION>NUAN_1.0</VERSION>\n<HEADER>\n");
              if ((appended & 0x80000000) != 0) {
                break;
              }
              uint64_t appended = StoreTagInfo((uint64_t)v10, *v18);
              if ((appended & 0x80000000) != 0) {
                break;
              }
              uint64_t v3 = ssftstring_AppendCStr((uint64_t)v10, "</HEADER>\n</NUANCE>\n");
              if ((v3 & 0x80000000) != 0) {
                goto LABEL_20;
              }
              if ((ssftmap_IteratorNext(v16, &v17, &v18) & 0x80000000) != 0) {
                goto LABEL_13;
              }
            }
            uint64_t v3 = appended;
LABEL_20:
            ssftmap_IteratorClose((uint64_t)v16);
            goto LABEL_21;
          }
LABEL_13:
          ssftmap_IteratorClose((uint64_t)v16);
          goto LABEL_18;
        }
        if ((v12 & 0x1FFF) != 0x14)
        {
LABEL_21:
          critsec_Leave(*(void **)(a1 + 56));
          goto LABEL_22;
        }
      }
      uint64_t v3 = 0;
LABEL_18:
      *a3 = ssftstring_Size((uint64_t)v15) + 1;
      *a2 = ssftstring_CStrDetach((uint64_t)v15);
      goto LABEL_21;
    }
    return 2169528330;
  }
  return v3;
}

uint64_t engbrk_FreeSystemInfo(uint64_t a1, uint64_t a2)
{
  if (a2) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a2);
  }
  return 0;
}

uint64_t StoreTagInfo(uint64_t a1, uint64_t a2)
{
  __s = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  if (!a2)
  {
    LODWORD(v3) = 0;
LABEL_29:
    if ((v3 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v3;
    }
  }
  uint64_t v3 = ssftmap_IteratorOpen(a2, 0, 1, (uint64_t)&v11);
  if ((v3 & 0x80000000) != 0) {
    goto LABEL_29;
  }
  if ((ssftmap_IteratorNext(v11, &__s, &v9) & 0x80000000) != 0) {
    goto LABEL_34;
  }
  while (1)
  {
    uint64_t appended = ssftstring_AppendCStr(a1, "<");
    if ((appended & 0x80000000) != 0 || (uint64_t appended = ssftstring_AppendCStr(a1, __s), (appended & 0x80000000) != 0))
    {
LABEL_33:
      uint64_t v3 = appended;
      goto LABEL_34;
    }
    uint64_t v5 = *(void *)(v9 + 8);
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    uint64_t v12 = 0;
    if (v5) {
      break;
    }
LABEL_18:
    uint64_t appended = ssftstring_AppendCStr(a1, ">");
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    uint64_t appended = ssftstring_AppendCStr(a1, *(char **)v9);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    if (ssftmap_GetSize(*(void *)(v9 + 16)))
    {
      uint64_t appended = ssftstring_AppendCStr(a1, "\n");
      if ((appended & 0x80000000) != 0) {
        goto LABEL_33;
      }
      uint64_t appended = StoreTagInfo(a1, *(void *)(v9 + 16));
      if ((appended & 0x80000000) != 0) {
        goto LABEL_33;
      }
    }
    uint64_t appended = ssftstring_AppendCStr(a1, "</");
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    uint64_t appended = ssftstring_AppendCStr(a1, __s);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_33;
    }
    uint64_t v3 = ssftstring_AppendCStr(a1, ">\n");
    if ((v3 & 0x80000000) != 0 || (ssftmap_IteratorNext(v11, &__s, &v9) & 0x80000000) != 0) {
      goto LABEL_34;
    }
  }
  uint64_t v6 = ssftmap_IteratorOpen(v5, 0, 1, (uint64_t)&v14);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v3 = v6;
    if ((v6 & 0x1FFF) != 0x14) {
      goto LABEL_34;
    }
    goto LABEL_18;
  }
  do
  {
    if ((ssftmap_IteratorNext(v14, &v13, &v12) & 0x80000000) != 0)
    {
      ssftmap_IteratorClose((uint64_t)v14);
      goto LABEL_18;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, " ");
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, v13);
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, "=\"");
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, v12);
    if ((v7 & 0x80000000) != 0) {
      break;
    }
    uint64_t v7 = ssftstring_AppendCStr(a1, "\"");
  }
  while ((v7 & 0x80000000) == 0);
  uint64_t v3 = v7;
  ssftmap_IteratorClose((uint64_t)v14);
LABEL_34:
  ssftmap_IteratorClose((uint64_t)v11);
  return v3;
}

uint64_t brkhlp_SearchTag(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0;
  int v4 = ssftmap_Find(a1, a2, &v6);
  if ((v4 & 0x80000000) == 0 && v6) {
    *a3 = *v6;
  }
  if (v4 < 0) {
    return 2169528340;
  }
  else {
    return 0;
  }
}

uint64_t brkhlp_ElemCompareKeysBrokerString(char *a1, char *a2)
{
  if ((unint64_t)a1 | (unint64_t)a2) {
    LODWORD(v2) = -1;
  }
  else {
    LODWORD(v2) = 0;
  }
  if (a1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = v2;
  }
  if (a1 && a2) {
    return LH_stricmp(a1, a2);
  }
  else {
    return v2;
  }
}

uint64_t brkhlp_AddItemToClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  int v6 = ssftmap_Find(a2, (uint64_t)"BROKERSTRING", &v9);
  if ((v6 & 0x80000000) == 0 && v9)
  {
    uint64_t v7 = *v9;
    return brkhlp_AddNewAddOn(v7, a1, a2, a3, 0);
  }
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = 0;
    return brkhlp_AddNewAddOn(v7, a1, a2, a3, 0);
  }
  hdrpars_FreeHeader(a2);
  return 2169528340;
}

uint64_t brkhlp_AddNewAddOn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a3) {
    return 2169528327;
  }
  uint64_t __b = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v9 = *(void *)(a4 + 16);
  cstdlib_memset(&__b, 0, 0x18uLL);
  uint64_t __b = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a5;
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_AddNewAddOn: detect= %s", v10, v11, v12, a1);
  int v13 = critsec_Enter(*(void **)(a4 + 56));
  if (v13 < 0)
  {
    int v18 = v13;
  }
  else
  {
    int v18 = ssftmap_Insert(*(void *)(a4 + 40), v23, (uint64_t)&__b);
    if (v18 < 0) {
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"BROKER", 289, (uint64_t)"%s%s", v14, v15, v16, v17, "file");
    }
    int v19 = critsec_Leave(*(void **)(a4 + 56));
    if (v19 < 0 && v18 > -1) {
      int v18 = v19;
    }
  }
  if (__b) {
    hdrpars_FreeHeader(__b);
  }
  if ((v18 & 0x1FFF) == 2) {
    return 0;
  }
  else {
    return v18;
  }
}

uint64_t engbrk_ClassOpen(_WORD *a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v5 = 2169528321;
  *(void *)int v39 = 0;
  if ((*a3 & 0xFFFE) == 2)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, v39);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(*(void *)v39 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassOpen: Begin", v11, v12, v13, v35);
      uint64_t v14 = (uint64_t *)heap_Calloc(*(void **)(*(void *)v39 + 8), 1, 72);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t *v14 = (uint64_t)a1;
        v14[1] = a2;
        uint64_t v16 = *(void *)v39;
        v14[2] = *(void *)v39;
        uint64_t v17 = *(void **)(v16 + 8);
        uint64_t v18 = heap_Calloc(v17, 1, 48);
        if (!v18)
        {
LABEL_22:
          v15[6] = 0;
          uint64_t v5 = 2169528330;
          goto LABEL_32;
        }
        uint64_t v19 = v18;
        *(_WORD *)uint64_t v18 = *a3;
        *(void *)(v18 + 8) = 0;
        uint64_t v20 = (char *)*((void *)a3 + 2);
        if (v20)
        {
          uint64_t v21 = brkhlp_CloneString(v17, v20);
          *(void *)(v19 + 16) = v21;
          if (!v21) {
            goto LABEL_21;
          }
        }
        else
        {
          *(void *)(v18 + 16) = 0;
        }
        *(_WORD *)(v19 + 24) = 0;
        if (a3[12])
        {
          uint64_t v22 = heap_Calloc(v17, a3[12], 8);
          *(void *)(v19 + 32) = v22;
          if (!v22)
          {
LABEL_21:
            brkhlp_FreeProductInfo(v17, v19);
            goto LABEL_22;
          }
          if (a3[12])
          {
            uint64_t v23 = 0;
            do
            {
              *(void *)(*(void *)(v19 + 32) + 8 * v23) = brkhlp_CloneString(v17, *(char **)(*((void *)a3 + 4) + 8 * v23));
              if (!*(void *)(*(void *)(v19 + 32) + 8 * v23)) {
                goto LABEL_21;
              }
              ++*(_WORD *)(v19 + 24);
            }
            while (++v23 < (unint64_t)a3[12]);
          }
        }
        else
        {
          *(void *)(v19 + 32) = 0;
        }
        uint64_t v24 = (char *)*((void *)a3 + 5);
        if (v24)
        {
          int v25 = brkhlp_CloneString(v17, v24);
          *(void *)(v19 + 40) = v25;
          if (!v25) {
            goto LABEL_21;
          }
        }
        else
        {
          *(void *)(v19 + 40) = 0;
        }
        v15[6] = v19;
        uint64_t v26 = critsec_ObjOpen(*(void *)(*(void *)v39 + 16), *(void **)(*(void *)v39 + 8), v15 + 3);
        if ((v26 & 0x80000000) != 0) {
          goto LABEL_31;
        }
        size_t v27 = *(void **)(*(void *)v39 + 8);
        long long v36 = BRK_ADDON_IELEM;
        long long v37 = *(_OWORD *)&off_26D20B268;
        uint64_t v38 = off_26D20B278;
        uint64_t v26 = ssftmap_ObjOpen(v27, 0, &v36, v15 + 5);
        if ((v26 & 0x80000000) != 0
          || (size_t v28 = *(void **)(*(void *)v39 + 8),
              long long v36 = BRK_INTF_IELEM,
              long long v37 = *(_OWORD *)off_26D20B290,
              uint64_t v38 = off_26D20B2A0,
              uint64_t v26 = ssftmap_ObjOpen(v28, 0, &v36, v15 + 4),
              (v26 & 0x80000000) != 0)
          || (uint64_t v26 = critsec_ObjOpen(*(void *)(*(void *)v39 + 16), *(void **)(*(void *)v39 + 8), v15 + 7),
              (v26 & 0x80000000) != 0))
        {
LABEL_31:
          uint64_t v5 = v26;
          goto LABEL_32;
        }
        int v29 = *a3;
        if (v29 == 3)
        {
          uint64_t v30 = brkhlp_ScanBufferForEnginesAndAddOns(*(uint64_t *)v39, (uint64_t)v15, *((char **)a3 + 5));
        }
        else
        {
          if (v29 != 2) {
            goto LABEL_32;
          }
          uint64_t v30 = brkhlp_ScanFilesForEnginesAndAddOns((uint64_t)v15, (uint64_t)a3, 1);
        }
        uint64_t v5 = v30;
        if ((v30 & 0x80000000) == 0)
        {
          *a5 = v15;
          goto LABEL_33;
        }
LABEL_32:
        engbrk_ClassClose(v15);
LABEL_33:
        log_OutText(*(void *)(*(void *)v39 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassOpen: End %x", v31, v32, v33, v5);
        return v5;
      }
      return 2169528330;
    }
  }
  return v5;
}

uint64_t engbrk_ClassClose(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  if (v3)
  {
    int v4 = ssftmap_ObjClose(v3);
    a1[4] = 0;
    uint64_t v5 = v4 & (v4 >> 31);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[5];
  if (v6)
  {
    int v7 = ssftmap_ObjClose(v6);
    a1[5] = 0;
    if (v7 >= 0 || (int)v5 <= -1) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v7;
    }
  }
  uint64_t v9 = a1[3];
  if (v9)
  {
    int v10 = critsec_ObjClose(v9);
    a1[3] = 0;
    if (v10 >= 0 || (int)v5 <= -1) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v10;
    }
  }
  uint64_t v12 = a1[7];
  if (v12)
  {
    int v13 = critsec_ObjClose(v12);
    a1[7] = 0;
    if (v13 >= 0 || (int)v5 <= -1) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v13;
    }
  }
  uint64_t v15 = a1[6];
  if (v15)
  {
    brkhlp_FreeProductInfo(*(void **)(v2 + 8), v15);
    a1[6] = 0;
  }
  heap_Free(*(void **)(v2 + 8), (uint64_t)a1);
  return v5;
}

void *brkhlp_FreeProductInfo(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4) {
      heap_Free(result, v4);
    }
    uint64_t v5 = *(void *)(a2 + 32);
    if (v5)
    {
      if (*(_WORD *)(a2 + 24))
      {
        unint64_t v6 = 0;
        do
          heap_Free(v3, *(void *)(*(void *)(a2 + 32) + 8 * v6++));
        while (v6 < *(unsigned __int16 *)(a2 + 24));
        uint64_t v5 = *(void *)(a2 + 32);
      }
      heap_Free(v3, v5);
    }
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7) {
      heap_Free(v3, v7);
    }
    return heap_Free(v3, a2);
  }
  return result;
}

uint64_t engbrk_ClassUpdateEx(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassUpdate: Begin", a6, a7, a8, v16);
  uint64_t v14 = brkhlp_ScanFilesForEnginesAndAddOns(a1, *(void *)(a1 + 48), a2);
  if ((v14 & 0x80000000) != 0) {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"BROKER", v14, (uint64_t)"brk_ClassUpdate: Scan failed", v10, v11, v12, v13, v17);
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ClassUpdate: End %x", v11, v12, v13, v14);
  return v14;
}

uint64_t engbrk_ClassUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_ClassUpdateEx(a1, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t engbrk_ObjOpen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  int v25 = 0;
  *a3 = 0;
  if (a2)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(v11 + 32);
    if (a1) {
      log_OutText(v12, (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen  Object identifier=%s: Begin", a6, a7, a8, a1);
    }
    else {
      log_OutText(v12, (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen  Object identifier=NULL: Begin", a6, a7, a8, v23);
    }
    uint64_t v17 = heap_Calloc(*(void **)(v11 + 8), 1, 40);
    uint64_t v18 = *(void *)(v11 + 32);
    if (v17)
    {
      *(void *)uint64_t v17 = a2;
      *(void *)(v17 + 8) = v18;
      *(_DWORD *)(v17 + 24) = 0;
      if ((paramc_ParamGetStr(*(void *)(v11 + 40), (uint64_t)"broker_mmap_clc_data", &v25) & 0x80000000) == 0
        && (!LH_stricmp(v25, "yes") || !LH_stricmp(v25, "true")))
      {
        *(_DWORD *)(v17 + 24) = 1;
      }
      *(void *)(v17 + 32) = 0;
      *a3 = v17;
      log_OutText(*(void *)(v11 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjOpen : End", v19, v20, v21, v24);
      return 0;
    }
    else
    {
      log_OutPublic(v18, (uint64_t)"BROKER", 200, 0, v13, v14, v15, v16, v24);
      return 2169528330;
    }
  }
  return v8;
}

uint64_t engbrk_ObjClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  uint64_t v9 = *(void *)(*(void *)a1 + 16);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjClose : Begin", a6, a7, a8, v18);
  uint64_t v10 = 0;
  if (*(void *)(*(void *)(*(void *)a1 + 16) + 24) == a1)
  {
    uint64_t v11 = critsec_Enter(*(void **)(*(void *)a1 + 24));
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
    LODWORD(v10) = ssftmap_Clear(*(void *)(*(void *)a1 + 32));
    int v12 = critsec_Leave(*(void **)(*(void *)a1 + 24));
    if ((int)v10 > -1 && v12 < 0) {
      uint64_t v10 = v12;
    }
    else {
      uint64_t v10 = v10;
    }
  }
  heap_Free(*(void **)(v9 + 8), a1);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ObjClose : End", v14, v15, v16, v19);
  return v10;
}

uint64_t engbrk_SetLog(void *a1, uint64_t a2)
{
  if (!a1) {
    return 2169528327;
  }
  if (!a2) {
    a2 = *(void *)(*(void *)(*a1 + 16) + 32);
  }
  uint64_t v2 = 0;
  a1[1] = a2;
  return v2;
}

uint64_t engbrk_SetRsrc(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 2169528327;
  }
  uint64_t result = 0;
  *(void *)(a1 + 32) = a2;
  return result;
}

uint64_t engbrk_ObjGetClass(uint64_t *a1, void *a2)
{
  if (a1 && a2)
  {
    uint64_t result = 0;
    uint64_t v4 = *a1;
  }
  else
  {
    uint64_t result = 2169528327;
    if (!a2) {
      return result;
    }
    uint64_t v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t engbrk_InterfaceQuery(uint64_t *a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  return engbrk_InterfaceQueryEx(a1, a2, a3, 0, a4, a5);
}

uint64_t engbrk_InterfaceQueryEx(uint64_t *a1, char *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  int v6 = -2125438956;
  uint64_t v7 = 2169528327;
  uint64_t v62 = 0;
  if (a1 && a2 && a6)
  {
    memset(__b, 0, sizeof(__b));
    uint64_t v14 = *(void *)(*a1 + 16);
    if (a5)
    {
      *a5 = safeh_GetNullHandle();
      a5[1] = v15;
    }
    *a6 = 0;
    cstdlib_memset(__b, 0, 0x20uLL);
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceQuery BrokerString=%s : Begin", v16, v17, v18, (uint64_t)a2);
    uint64_t v7 = critsec_Enter(*(void **)(*a1 + 24));
    if ((v7 & 0x80000000) == 0)
    {
      if ((ssftmap_Find(*(void *)(*a1 + 32), (uint64_t)a2, &v62) & 0x80000000) == 0)
      {
        uint64_t v23 = v62;
        uint64_t v24 = v62[1];
        if (v24)
        {
LABEL_9:
          *a6 = v24;
          if (a5) {
            *(_OWORD *)a5 = *((_OWORD *)v23 + 1);
          }
          char v25 = 1;
          goto LABEL_22;
        }
        int v6 = -2125438963;
        if (!a4)
        {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 259, (uint64_t)"%s%s%s%x", v19, v20, v21, v22, "BrokerString");
          int v6 = -2125438963;
        }
        goto LABEL_21;
      }
      int v26 = ssftmap_Insert(*(void *)(*a1 + 32), (uint64_t)a2, (uint64_t)__b);
      if (v26 < 0 || (int v26 = ssftmap_Find(*(void *)(*a1 + 32), (uint64_t)a2, &v62), v26 < 0))
      {
        int v6 = v26;
        log_OutPublic(a1[1], (uint64_t)"BROKER", 200, (uint64_t)"%s%s", v27, v28, v29, v30, "module");
        goto LABEL_21;
      }
      int v31 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v66);
      if (v31 < 0)
      {
        if ((v31 & 0x1FFF) == 0xA)
        {
          int v6 = -2125438966;
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v32 = v66;
        uint64_t v33 = *v66;
        char v67 = 0;
        int v34 = ssftmap_Find(v33, (uint64_t)"FULLPATHCOMPONENT", &v67);
        if ((v34 & 0x80000000) == 0 && v67)
        {
          uint64_t v65 = *v67;
          BOOL v39 = a4 == 0;
          goto LABEL_33;
        }
        BOOL v39 = a4 == 0;
        if (a4 || (v34 & 0x80000000) == 0)
        {
          if ((v34 & 0x80000000) == 0)
          {
LABEL_33:
            uint64_t v45 = *v32;
            char v67 = 0;
            int v46 = ssftmap_Find(v45, (uint64_t)"GETINTERFACE", &v67);
            if (v46 < 0 || !v67)
            {
              if (v46 < 0)
              {
                if (v39) {
                  log_OutPublic(a1[1], (uint64_t)"BROKER", 262, (uint64_t)"%s%s%s%x", v47, v20, v21, v22, "BrokerString");
                }
                goto LABEL_21;
              }
              uint64_t v48 = 0;
            }
            else
            {
              uint64_t v48 = *v67;
            }
            int v6 = 0;
            uint64_t v64 = v48;
LABEL_42:
            uint64_t v51 = v63;
            if ((v6 & 0x80000000) == 0 && !v63)
            {
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : osspi_DynModOpen %s, %d", v20, v21, v22, v65);
              int v52 = osspi_DynModOpen(*(void **)(v14 + 64), *(void **)(v14 + 8), v65, 0, v62);
              int v6 = v52;
              if (!a4 && v52 < 0)
              {
                log_OutPublic(a1[1], (uint64_t)"BROKER", 263, (uint64_t)"%s%s%s%x", v53, v20, v21, v22, "BrokerString");
                goto LABEL_21;
              }
              if (v52 < 0) {
                goto LABEL_21;
              }
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : osspi_DynModObjLoad %s", v20, v21, v22, v64);
              int v54 = osspi_DynModObjLoad((void *)*v62, v64, (uint64_t)&v63);
              int v6 = v54;
              if (!a4 && v54 < 0)
              {
                log_OutPublic(a1[1], (uint64_t)"BROKER", 264, (uint64_t)"%s%s%s%x", v55, v20, v21, v22, "BrokerString");
                goto LABEL_21;
              }
              uint64_t v51 = v63;
            }
            if (v6 < 0 || !v51 || (v56 = v51(a3, v62 + 1), int v6 = v56, a4) || (v56 & 0x80000000) == 0)
            {
              if ((v6 & 0x80000000) == 0)
              {
                uint64_t v23 = v62;
                uint64_t v24 = v62[1];
                uint64_t v58 = *(uint64_t (**)(void, void, uint64_t *))(v24 + 16);
                if (v58)
                {
                  int v59 = v58(*(void *)*a1, *(void *)(*a1 + 8), v62 + 2);
                  int v6 = v59;
                  if (!a4 && v59 < 0)
                  {
                    log_OutPublic(a1[1], (uint64_t)"BROKER", 266, (uint64_t)"%s%s%s%x", v60, v20, v21, v22, "module");
                    goto LABEL_21;
                  }
                  if (v59 < 0) {
                    goto LABEL_21;
                  }
                  uint64_t v23 = v62;
                  uint64_t v24 = v62[1];
                }
                LODWORD(v7) = v6;
                goto LABEL_9;
              }
            }
            else
            {
              log_OutPublic(a1[1], (uint64_t)"BROKER", 265, (uint64_t)"%s%s%s%x", v57, v20, v21, v22, "module");
            }
LABEL_21:
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_InterfaceQuery : BrokerString=%s: Module Not Found (%x)", v20, v21, v22, (uint64_t)a2);
            char v25 = 0;
            LODWORD(v7) = v6;
LABEL_22:
            int v40 = critsec_Leave(*(void **)(*a1 + 24));
            if ((v25 & (v40 < 0)) != 0) {
              uint64_t v7 = v40;
            }
            else {
              uint64_t v7 = v7;
            }
            log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceQuery BrokerString=%s : End", v41, v42, v43, (uint64_t)a2);
            return v7;
          }
        }
        else
        {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 260, (uint64_t)"%s%s%s%x", v35, v36, v37, v38, "BrokerString");
        }
      }
      int BuiltinInterface = brkhlp_GetBuiltinInterface(a2, &v63, &v65, &v64);
      int v6 = BuiltinInterface;
      if (!a4 && BuiltinInterface < 0)
      {
        log_OutPublic(a1[1], (uint64_t)"BROKER", 261, (uint64_t)"%s%s%s%x", v50, v20, v21, v22, "BrokerString");
        goto LABEL_21;
      }
      goto LABEL_42;
    }
  }
  return v7;
}

uint64_t brkhlp_SearchAddOn(uint64_t a1, char *a2, void *a3)
{
  *a3 = 0;
  uint64_t result = 2169528333;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = critsec_Enter(*(void **)(*(void *)a1 + 56));
      if ((result & 0x80000000) == 0)
      {
        int v7 = brkhlp_InternalSearchAddOn(a1, a2, a3);
        LODWORD(result) = critsec_Leave(*(void **)(*(void *)a1 + 56));
        if (v7 > -1 && (int)result < 0) {
          return result;
        }
        else {
          return v7;
        }
      }
    }
  }
  return result;
}

uint64_t engbrk_InterfaceRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceRelease : Begin", a6, a7, a8, v13);
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_InterfaceRelease : End", v10, v11, v12, v14);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_TagQuery(void *a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return engbrk_TagQueryEx(a1, a2, a3, 0, a4, a6, a7, a8);
}

uint64_t engbrk_TagQueryEx(void *a1, char *a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  uint64_t v8 = 2169528327;
  if (a1 && a5 && a3 && a2 && *a1)
  {
    *a5 = 0;
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagQuery BrokerString=%s TagName=%s : Begin", a6, a7, a8, (uint64_t)a2);
    int v14 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v22);
    if (v14 < 0)
    {
      if ((v14 & 0x1FFF) == 0xA)
      {
        uint64_t v8 = 2169528330;
        goto LABEL_16;
      }
      uint64_t v8 = 2169528333;
    }
    else
    {
      uint64_t v19 = brkhlp_SearchTag(*v22, a3, a5);
      if ((v19 & 0x80000000) == 0)
      {
        uint64_t v8 = 0;
LABEL_16:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagQuery TagContents = %p \"%s\": End", v16, v17, v18, *a5);
        return v8;
      }
      uint64_t v8 = v19;
    }
    uint64_t v20 = a1[1];
    if (a4) {
      log_OutText(v20, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_TagQuery : BrokerString=%s TagName=%s  Failure (%x)", v16, v17, v18, (uint64_t)a2);
    }
    else {
      log_OutPublic(v20, (uint64_t)"BROKER", 267, (uint64_t)"%s%s%s%s%s%x", v15, v16, v17, v18, "Broker String");
    }
    goto LABEL_16;
  }
  return v8;
}

uint64_t engbrk_TagRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagRelease TagContents address = %p : Begin", a6, a7, a8, a2);
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagRelease : End", v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_ComponentTableIteratorOpen(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (a1 && a3 && a2 && *(void *)a1)
  {
    uint64_t v12 = *(void *)(*(void *)a1 + 16);
    log_OutText(*(void *)(v12 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorOpen Query=%s: Begin", a6, a7, a8, (uint64_t)a2);
    uint64_t v13 = (void *)heap_Calloc(*(void **)(v12 + 8), 1, 72);
    *(void *)a3 = v13;
    if (v13)
    {
      *uint64_t v13 = v12;
      *(void *)(*(void *)a3 + 8) = a1;
      uint64_t String = brkhlp_CreateString((char **)(*(void *)a3 + 16), a2, *(void *)(v12 + 8));
      if ((String & 0x80000000) == 0)
      {
        uint64_t v8 = critsec_Enter(*(void **)(*(void *)a1 + 56));
        uint64_t v22 = *(void **)a3;
        if ((v8 & 0x80000000) == 0)
        {
          int v23 = ssftmap_IteratorOpen(*(void *)(*(void *)a1 + 40), (uint64_t)a2, 0, (uint64_t)(v22 + 3));
          LODWORD(v8) = (v23 & 0x80001FFF) == 0x80000014 ? 0 : v23;
          int v24 = critsec_Leave(*(void **)(*(void *)a1 + 56));
          BOOL v25 = (int)v8 > -1 && v24 < 0;
          uint64_t v8 = v25 ? v24 : v8;
          uint64_t v22 = *(void **)a3;
          if ((v8 & 0x80000000) == 0) {
            goto LABEL_24;
          }
        }
        goto LABEL_22;
      }
      uint64_t v8 = String;
    }
    else
    {
      uint64_t v8 = 2169528330;
    }
    uint64_t v22 = *(void **)a3;
LABEL_22:
    if (v22)
    {
      engbrk_ComponentTableIteratorClose(v22, v14, v15, v16, v17, v18, v19, v20);
      uint64_t v22 = 0;
      *(void *)a3 = 0;
    }
LABEL_24:
    log_OutText(*(void *)(v12 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorOpen iterator address = %p: End", v18, v19, v20, (uint64_t)v22);
  }
  return v8;
}

uint64_t brkhlp_CreateString(char **a1, char *__s, uint64_t a3)
{
  uint64_t v3 = 2169528320;
  if (!a1) {
    return 2169528327;
  }
  *a1 = 0;
  if (__s)
  {
    int v7 = cstdlib_strlen(__s);
    uint64_t v8 = (char *)heap_Alloc(a3, (v7 + 1));
    *a1 = v8;
    if (v8)
    {
      cstdlib_strcpy(v8, __s);
      return 0;
    }
    else
    {
      return 2169528330;
    }
  }
  return v3;
}

uint64_t engbrk_ComponentTableIteratorClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  uint64_t v9 = *a1;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorClose iterator=%p: Begin", a6, a7, a8, (uint64_t)a1);
  uint64_t v10 = a1[2];
  if (v10)
  {
    heap_Free(*(void **)(v9 + 8), v10);
    a1[2] = 0;
  }
  uint64_t v11 = a1[3];
  if (v11) {
    ssftmap_IteratorClose(v11);
  }
  heap_Free(*(void **)(v9 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorClose: End", v12, v13, v14, v16);
  return 0;
}

uint64_t engbrk_ComponentTableIteratorNext(uint64_t a1, const char **a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (!a1) {
    return 2169528327;
  }
  uint64_t v8 = a2;
  uint64_t v10 = *(void *)a1;
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  log_OutText(*(void *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorNext iterator=%p: Begin", a6, a7, a8, a1);
  LODWORD(v11) = brkhlp_SizeOfNextBlock(*(char **)(a1 + 16));
  uint64_t v12 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 24), &v37, &v36);
  if ((v12 & 0x80000000) != 0)
  {
LABEL_19:
    uint64_t v16 = v12;
  }
  else
  {
    unint64_t v11 = v11;
    uint64_t v16 = 2169528330;
    uint64_t v35 = v10;
    unint64_t v33 = v11;
    while (1)
    {
      if ((LH_strnicmp(*(void *)(a1 + 16), (uint64_t)v37, v11) & 0x80000000) != 0)
      {
        uint64_t v16 = 2169528343;
        goto LABEL_32;
      }
      uint64_t v17 = *(void **)(v10 + 8);
      uint64_t v18 = v37;
      uint64_t v19 = *(const char **)(a1 + 16);
      int v20 = cstdlib_strlen(v19);
      uint64_t v21 = heap_Alloc((uint64_t)v17, (v20 + 1));
      if (!v21) {
        goto LABEL_32;
      }
      uint64_t v22 = (char *)v21;
      int v23 = v8;
      if (!cstdlib_strlen(v19)) {
        break;
      }
      int v24 = (char *)v19;
      BOOL v25 = (char *)v18;
      while (1)
      {
        size_t Block = brkhlp_SizeOfNextBlock(v24);
        cstdlib_strncpy(v22, v24, Block);
        v22[Block] = 0;
        uint64_t v27 = cstdlib_strstr(v25, v22);
        if (!v27) {
          break;
        }
        BOOL v25 = &v27[Block];
        if (Block)
        {
          if (v22[Block - 1] != 47 && v25 - v18 != cstdlib_strlen(v18)) {
            break;
          }
        }
        v24 += (Block + 1);
        if (v24 - v19 >= cstdlib_strlen(v19)) {
          goto LABEL_21;
        }
      }
      heap_Free(v17, (uint64_t)v22);
      uint64_t v12 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 24), &v37, &v36);
      uint64_t v8 = v23;
      uint64_t v10 = v35;
      uint64_t v16 = 2169528330;
      unint64_t v11 = v33;
      if ((v12 & 0x80000000) != 0) {
        goto LABEL_19;
      }
    }
LABEL_21:
    heap_Free(v17, (uint64_t)v22);
    uint64_t v8 = v23;
    if (v23) {
      uint64_t *v23 = v37;
    }
    uint64_t v10 = v35;
    if (a3)
    {
      *(void *)(a1 + 32) = v37;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      uint64_t v28 = brkhlp_SearchTag(*v36, (uint64_t)"NAME", (void *)(a1 + 40));
      if ((v28 & 0x80000000) == 0 || (uint64_t v16 = v28, v28 == -2125438956))
      {
        uint64_t v29 = brkhlp_SearchTag(*v36, (uint64_t)"LANGUAGE", (void *)(a1 + 56));
        if ((v29 & 0x80000000) == 0 || (uint64_t v16 = v29, v29 == -2125438956))
        {
          uint64_t v30 = brkhlp_SearchTag(*v36, (uint64_t)"VERSION", (void *)(a1 + 48));
          if ((v30 & 0x80000000) == 0 || (uint64_t v16 = v30, v30 == -2125438956))
          {
            uint64_t v16 = 0;
            *a3 = a1 + 32;
          }
        }
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
  }
LABEL_32:
  int v31 = "";
  if (v8 && *v8) {
    int v31 = *v8;
  }
  log_OutText(*(void *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentTableIteratorNext szBrkString=%s: End", v13, v14, v15, (uint64_t)v31);
  return v16;
}

size_t brkhlp_SizeOfNextBlock(char *a1)
{
  uint64_t v2 = cstdlib_strchr(a1, 42);
  if (v2) {
    return v2 - a1;
  }
  else {
    return cstdlib_strlen(a1);
  }
}

uint64_t engbrk_DataReplace(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v31 = 0;
  uint64_t v8 = 2169528327;
  if (a1 && a2 && a3)
  {
    uint64_t v11 = *(void *)(*a1 + 16);
    log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataReplace BrokerString=%s : Begin", a6, a7, a8, (uint64_t)a2);
    uint64_t v12 = brkhlp_SearchAddOn((uint64_t)a1, a2, &v31);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v24 = v12;
      log_OutPublic(a1[1], (uint64_t)"BROKER", 293, (uint64_t)"%s%s", v13, v14, v15, v16, "brokerString");
      if ((v24 & 0x1FFF) == 0xA)
      {
        uint64_t v8 = 2169528330;
LABEL_16:
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataReplace : End", v25, v26, v27, v30);
        return v8;
      }
    }
    else
    {
      uint64_t v17 = *v31;
      uint64_t v32 = 0;
      int v18 = ssftmap_Find(v17, (uint64_t)"FULLPATHCOMPONENT", &v32);
      if ((v18 & 0x80000000) == 0 && v32)
      {
        uint64_t v23 = *v32;
        goto LABEL_12;
      }
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t v23 = 0;
LABEL_12:
        uint64_t v8 = osspi_DataReplace(*(void **)(v11 + 64), *(void *)(v11 + 8), v23);
        if ((v8 & 0x80000000) != 0) {
          log_OutPublic(a1[1], (uint64_t)"BROKER", 295, (uint64_t)"%s%s%s%x", v28, v25, v26, v27, "brokerString");
        }
        goto LABEL_16;
      }
      log_OutPublic(a1[1], (uint64_t)"BROKER", 294, (uint64_t)"%s%s", v19, v20, v21, v22, "brokerString");
      uint64_t v24 = 2169528340;
    }
    uint64_t v8 = v24;
    goto LABEL_16;
  }
  return v8;
}

uint64_t engbrk_DataOpen(uint64_t *a1, char *a2, uint64_t **a3)
{
  return engbrk_DataOpenEx(a1, a2, 0, a3);
}

uint64_t engbrk_DataOpenEx(uint64_t *a1, char *__s, char a3, uint64_t **a4)
{
  uint64_t v5 = 2169528330;
  uint64_t v106 = 0;
  v107[0] = 0;
  uint64_t result = 2169528327;
  if (a1)
  {
    int v7 = __s;
    if (__s)
    {
      if (a4)
      {
        uint64_t v10 = *(void *)(*a1 + 16);
        if (a1[4]) {
          uint64_t v11 = a1[4];
        }
        else {
          uint64_t v11 = *(void *)(*a1 + 16);
        }
        *a4 = 0;
        size_t v12 = cstdlib_strlen(__s);
        log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataOpen : BrokerString=%s : Begin", v13, v14, v15, (uint64_t)v7);
        uint64_t v16 = heap_Calloc(*(void **)(v10 + 8), 1, 48);
        if (!v16)
        {
          hlp_ReleaseUriFetcherInterface(v11, 0);
LABEL_93:
          log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataOpen : End %x", v28, v29, v30, v5);
          return v5;
        }
        uint64_t v17 = (uint64_t *)v16;
        char v99 = a3;
        int v18 = IsThisUrlOrRealPath(v7, v12, 0);
        uint64_t v19 = cstdlib_strchr(v7, 58);
        uint64_t v20 = v19;
        int v21 = -2125438976;
        uint64_t v101 = v11;
        if (v18 || !v19 || (unsigned int v22 = v19 - v7, v19 == v7))
        {
          uint64_t v100 = 0;
        }
        else
        {
          uint64_t v23 = critsec_Enter(*(void **)(*a1 + 24));
          if ((v23 & 0x80000000) != 0)
          {
            hlp_ReleaseUriFetcherInterface(v101, (uint64_t)v17);
            uint64_t v100 = 0;
            uint64_t v37 = 0;
            goto LABEL_88;
          }
          uint64_t v24 = (char *)heap_Alloc(*(void *)(v10 + 8), v22 + 1);
          if (!v24)
          {
            hlp_ReleaseUriFetcherInterface(v101, (uint64_t)v17);
            uint64_t v100 = 0;
            uint64_t v37 = 0;
            goto LABEL_79;
          }
          uint64_t v25 = v17;
          int v26 = v23;
          uint64_t v27 = v24;
          cstdlib_strncpy(v24, v7, v22);
          v27[v22] = 0;
          uint64_t v100 = (uint64_t)v27;
          int v7 = v27;
          int v21 = v26;
          uint64_t v17 = v25;
          int v18 = 0;
        }
        int v97 = v18;
        if (v18) {
          int v31 = 0;
        }
        else {
          int v31 = v20;
        }
        uint64_t v32 = brkhlp_SearchAddOn((uint64_t)a1, v7, v107);
        uint64_t v36 = v32;
        if ((v32 & 0x80000000) == 0)
        {
          log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on broker string %s", v33, v34, v35, (uint64_t)v7);
          goto LABEL_21;
        }
        if ((v32 & 0x1FFF) == 0xA) {
          goto LABEL_25;
        }
        uint64_t v40 = *(void *)(v10 + 8);
        int v41 = cstdlib_strlen(v7);
        uint64_t v37 = (char *)heap_Alloc(v40, (v41 + 4));
        if (!v37) {
          goto LABEL_77;
        }
        if (!engbrk_CreateSurrogateBrokerString(v7, (uint64_t)v37)) {
          goto LABEL_37;
        }
        uint64_t v36 = brkhlp_SearchAddOn((uint64_t)a1, v37, v107);
        if ((v36 & 0x80000000) == 0) {
          log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v42, v43, v44, (uint64_t)v37);
        }
        if ((v36 & 0x1FFF) == 0xA) {
          goto LABEL_25;
        }
        if ((v36 & 0x80000000) != 0)
        {
LABEL_37:
          cstdlib_strcpy(v37, v7);
          uint64_t v45 = cstdlib_strstr(v37, "mpthreeml");
          if (!v45) {
            goto LABEL_50;
          }
          cstdlib_strcpy(v45, "mpthreevadml");
          uint64_t v46 = brkhlp_SearchAddOn((uint64_t)a1, v37, v107);
          uint64_t v36 = v46;
          if ((v46 & 0x80000000) == 0)
          {
            log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v47, v48, v49, (uint64_t)v37);
            goto LABEL_40;
          }
          if ((v46 & 0x1FFF) == 0xA) {
            goto LABEL_25;
          }
          if (engbrk_CreateSurrogateBrokerString(v37, (uint64_t)v37))
          {
            uint64_t v36 = brkhlp_SearchAddOn((uint64_t)a1, v37, v107);
            if ((v36 & 0x80000000) == 0) {
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : match on Surrogate broker string %s", v50, v51, v52, (uint64_t)v37);
            }
            if ((v36 & 0x1FFF) == 0xA) {
              goto LABEL_25;
            }
            heap_Free(*(void **)(v10 + 8), (uint64_t)v37);
            if ((v36 & 0x80000000) == 0) {
              goto LABEL_21;
            }
          }
          else
          {
LABEL_50:
            heap_Free(*(void **)(v10 + 8), (uint64_t)v37);
          }
          if (v31)
          {
            uint64_t v53 = brkhlp_RegisterAddon(v7, 0, 0, v107, *a1);
            if ((v53 & 0x80000000) != 0)
            {
              uint64_t v37 = 0;
              uint64_t v5 = v53;
              goto LABEL_77;
            }
          }
LABEL_53:
          if (v97)
          {
            uint64_t v37 = 0;
            BOOL v39 = v7;
LABEL_60:
            if (UriGetUrlPrefixLength(v39, 0)
              && (objc_GetObject(*(void *)(v101 + 48), (uint64_t)"URIFETCHER", &v106) & 0x80000000) == 0)
            {
              uint64_t v60 = v106;
              v17[3] = *(void *)(v106 + 8);
              *((_OWORD *)v17 + 2) = *(_OWORD *)(v60 + 16);
            }
LABEL_63:
            uint64_t v98 = v17 + 3;
            uint64_t v5 = osspi_DataOpenEx(*(void **)(v10 + 64), *(void **)(v10 + 8), v17[3], v17[4], v17[5], (uint64_t)v39, v17);
            if ((v5 & 0x80000000) != 0)
            {
              if (v99)
              {
                log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : osspi_DataOpen failed: %s, %x", v61, v62, v63, (uint64_t)v39);
              }
              else
              {
                int v77 = cstdlib_strcmp(v39, v7);
                uint64_t v78 = a1[1];
                if (v77) {
                  log_OutPublic(v78, (uint64_t)"BROKER", 275, (uint64_t)"%s%s%s%s%s%x", v73, v74, v75, v76, "BrokerString");
                }
                else {
                  log_OutPublic(v78, (uint64_t)"BROKER", 275, (uint64_t)"%s%s%s%x", v73, v74, v75, v76, "BrokerString");
                }
              }
            }
            else
            {
              log_OutText(a1[1], (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : osspi_DataOpen %s, %p", v61, v62, v63, (uint64_t)v39);
              if (v31)
              {
                uint64_t v95 = v31;
                uint64_t v64 = cstdlib_strstr(v7, "clc");
                uint64_t v65 = cstdlib_strstr(v7, "clmnn");
                uint64_t v94 = v107[0];
                uint64_t v96 = (uint64_t *)(v107[0] + 16);
                uint64_t v66 = clcarchive_ObjOpen(*(_WORD **)*a1, *(void *)(*a1 + 8), v7, (uint64_t *)(v107[0] + 16));
                uint64_t v5 = v66;
                if ((v66 & 0x80000000) == 0)
                {
                  unint64_t v67 = (unint64_t)v65 | (unint64_t)v64;
                  BOOL v68 = ((unint64_t)v65 | (unint64_t)v64) != 0;
                  if (v67 && *((_DWORD *)a1 + 6))
                  {
                    unsigned int v69 = 0;
                    BOOL v70 = (v66 & 0x1FFF) == 1;
                    uint64_t v71 = v101;
                    BOOL v72 = v96;
                  }
                  else
                  {
                    BOOL v72 = v96;
                    uint64_t v79 = osspi_ClcDataOpen(*v17, *v96);
                    uint64_t v5 = v79;
                    unsigned int v69 = v79 >> 31;
                    BOOL v70 = (v79 & 0x1FFF) == 1;
                    if ((v79 & 0x1FFF) == 1)
                    {
                      uint64_t v71 = v101;
                    }
                    else
                    {
                      uint64_t v71 = v101;
                      if ((v79 & 0x80000000) != 0)
                      {
                        BOOL v70 = 0;
                        uint64_t *v96 = 0;
                      }
                    }
                  }
                  if (*((_DWORD *)a1 + 6)) {
                    BOOL v82 = v68;
                  }
                  else {
                    BOOL v82 = 0;
                  }
                  if ((v70 & v69 & 1) != 0 || v82)
                  {
                    uint64_t v104 = 0;
                    uint64_t v105 = 0;
                    memset(v103, 0, sizeof(v103));
                    clcarchive_GetMemoryStreamInterface(v103);
                    int v102 = 0;
                    uint64_t v86 = engbrk_DataMapEx(a1, (uint64_t)v17, 0, (unsigned int *)&v105, &v104, v83, v84, v85);
                    if ((v86 & 0x80000000) != 0)
                    {
                      uint64_t v5 = v86;
                    }
                    else
                    {
                      int v87 = clcarchive_Parse(*v72, v103, (uint64_t)&v104, &v102, 1);
                      int v88 = engbrk_DataUnmap(a1, (uint64_t)v17, v104);
                      if (v87 > -1 && v88 < 0) {
                        int v87 = v88;
                      }
                      int v90 = osspi_DataClose(*v17);
                      *uint64_t v17 = 0;
                      if (v87 > -1 && v90 < 0) {
                        uint64_t v5 = v90;
                      }
                      else {
                        uint64_t v5 = v87;
                      }
                      if (v17[3] && v17[4])
                      {
                        objc_ReleaseObject(*(void *)(v71 + 48), (uint64_t)"URIFETCHER");
                        void *v98 = 0;
                        v17[4] = 0;
                      }
                    }
                  }
                  if ((v5 & 0x80000000) == 0)
                  {
                    uint64_t v5 = brkhlp_SearchClcArchive(a1[1], v94, v95 + 1, v99, (uint64_t)v17, (uint64_t)a1);
                    uint64_t v92 = v107[0];
                    uint64_t v93 = *(void *)(v107[0] + 16);
                    if (v93)
                    {
                      if (v5)
                      {
                        clcarchive_ObjClose(v93);
                        *(void *)(v92 + 16) = 0;
                        osspi_DataClose(*v17);
                        *uint64_t v17 = 0;
                        if (v17[3])
                        {
                          if (v17[4])
                          {
                            objc_ReleaseObject(*(void *)(v71 + 48), (uint64_t)"URIFETCHER");
                            void *v98 = 0;
                            v17[4] = 0;
                          }
                        }
                      }
                    }
                  }
LABEL_78:
                  hlp_ReleaseUriFetcherInterface(v71, (uint64_t)v17);
                  if (v21 < 0)
                  {
LABEL_85:
                    if ((v5 & 0x80000000) == 0)
                    {
                      *a4 = v17;
LABEL_89:
                      if (v100) {
                        heap_Free(*(void **)(v10 + 8), v100);
                      }
                      if (v37) {
                        heap_Free(*(void **)(v10 + 8), (uint64_t)v37);
                      }
                      goto LABEL_93;
                    }
                    uint64_t v23 = v5;
LABEL_88:
                    heap_Free(*(void **)(v10 + 8), (uint64_t)v17);
                    uint64_t v5 = v23;
                    goto LABEL_89;
                  }
LABEL_79:
                  int v80 = critsec_Leave(*(void **)(*a1 + 24));
                  if ((int)v5 > -1 && v80 < 0) {
                    uint64_t v5 = v80;
                  }
                  else {
                    uint64_t v5 = v5;
                  }
                  goto LABEL_85;
                }
              }
            }
LABEL_77:
            uint64_t v71 = v101;
            goto LABEL_78;
          }
          uint64_t v54 = *(void *)(v10 + 8);
          int v55 = cstdlib_strlen(v7);
          uint64_t v56 = heap_Alloc(v54, (v55 + 1));
          if (v56)
          {
            BOOL v39 = (const char *)v56;
            cstdlib_strlen(v7);
            uint64_t v57 = 0;
            unsigned int v58 = 1;
            do
            {
              v39[v57] = cstdlib_tolower(v7[v57]);
              uint64_t v57 = v58;
            }
            while (cstdlib_strlen(v7) >= v58++);
            uint64_t v37 = (char *)v39;
LABEL_59:
            if (!v97) {
              goto LABEL_63;
            }
            goto LABEL_60;
          }
LABEL_25:
          uint64_t v37 = 0;
          goto LABEL_77;
        }
LABEL_40:
        heap_Free(*(void **)(v10 + 8), (uint64_t)v37);
LABEL_21:
        if (*(void *)(v107[0] + 16))
        {
          if (!v31)
          {
            uint64_t v37 = 0;
            uint64_t v5 = v36;
            goto LABEL_77;
          }
          uint64_t v5 = brkhlp_SearchClcArchive(a1[1], v107[0], v31 + 1, v99, (uint64_t)v17, (uint64_t)a1);
          goto LABEL_25;
        }
        uint64_t v38 = *(void *)v107[0];
        *(void *)&v103[0] = 0;
        if ((ssftmap_Find(v38, (uint64_t)"FULLPATHCOMPONENT", v103) & 0x80000000) == 0)
        {
          if (*(void *)&v103[0])
          {
            BOOL v39 = **(const char ***)&v103[0];
            if (**(void **)&v103[0])
            {
              uint64_t v37 = 0;
              goto LABEL_59;
            }
          }
        }
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t engbrk_CreateSurrogateBrokerString(const char *a1, uint64_t a2)
{
  if (cstdlib_strlen(a1))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      int v7 = a1[v4];
      BOOL v8 = (v7 - 48) >= 0xA && (v7 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (v8 && v7 != 45)
      {
        if (v7 == 95 || v7 == 47)
        {
          if (v7 == 95) {
            uint64_t v5 = v5;
          }
          else {
            uint64_t v5 = 1;
          }
          LOBYTE(v7) = 95;
        }
        else
        {
          uint64_t v5 = 1;
          LOBYTE(v7) = 45;
        }
      }
      *(unsigned char *)(a2 + v4) = v7;
      uint64_t v4 = v6;
    }
    while (cstdlib_strlen(a1) > v6++);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  *(unsigned char *)(a2 + v4) = 0;
  return v5;
}

uint64_t brkhlp_SearchClcArchive(uint64_t a1, uint64_t a2, char *__s, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a2 + 16);
  memset(v22, 0, sizeof(v22));
  if (cstdlib_strlen(__s) <= 0x7F) {
    engbrk_CreateSurrogateBrokerString(__s, (uint64_t)v22);
  }
  if (*(_DWORD *)(v12 + 16))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    while (LH_stricmp((char *)v22, *(char **)(*(void *)(v12 + 8) + v17)))
    {
      ++v18;
      v17 += 40;
      if (v18 >= *(unsigned int *)(v12 + 16)) {
        goto LABEL_7;
      }
    }
    *(_DWORD *)(a5 + 16) = v18;
    *(void *)(a5 + 8) = v12;
    uint64_t v20 = critsec_Enter(*(void **)(*(void *)a6 + 24));
    if ((v20 & 0x80000000) == 0)
    {
      ++*(_DWORD *)(v12 + 120);
      return critsec_Leave(*(void **)(*(void *)a6 + 24));
    }
    return v20;
  }
  else
  {
LABEL_7:
    uint64_t v19 = 2169528333;
    if (a4) {
      log_OutText(a1, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_DataOpen : SearchClcArchive failed: %s:%s", v14, v15, v16, *(void *)(a2 + 8));
    }
    else {
      log_OutPublic(a1, (uint64_t)"BROKER", 257, (uint64_t)"%s%s%s%s", v13, v14, v15, v16, "archive");
    }
  }
  return v19;
}

uint64_t brkhlp_RegisterAddon(char *a1, char *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v17 = 0;
  *(void *)unint64_t v18 = 0;
  uint64_t v5 = 2169528326;
  if (a1)
  {
    if (a5)
    {
      uint64_t v7 = *(void *)(a5 + 16);
      if (v7)
      {
        uint64_t v12 = brkhlp_SearchAddOn(*(void *)(v7 + 24), a1, a4);
        if ((v12 & 0x80000000) == 0 && a3 && !*(void *)(*a4 + 16))
        {
          *(void *)(*a4 + 16) = a3;
          return v12;
        }
        if ((v12 & 0x1FFF) != 0xA)
        {
          uint64_t v13 = *(void **)(*(void *)(a5 + 16) + 8);
          v15[0] = BRK_HDRPARS_TAG_MAP_IELEM;
          v15[1] = *(_OWORD *)off_26D20B3F0;
          uint64_t v16 = off_26D20B400;
          uint64_t v12 = ssftmap_ObjOpen(v13, 1, v15, (uint64_t *)v18);
          if ((v12 & 0x80000000) == 0)
          {
            uint64_t v12 = brkhlp_allocateAndStoreTagInMap(*(void **)(*(void *)(a5 + 16) + 8), *(uint64_t *)v18, a1, (uint64_t)"BROKER", &v17);
            if ((v12 & 0x80000000) == 0)
            {
              if (!a2
                || (uint64_t v12 = brkhlp_allocateAndStoreTagInMap(*(void **)(*(void *)(a5 + 16) + 8), *(uint64_t *)v18, a2, (uint64_t)"FULLPATHCOMPONENT", v15), (v12 & 0x80000000) == 0))
              {
                uint64_t v12 = brkhlp_AddNewAddOn(*v17, *v17, *(uint64_t *)v18, a5, a3);
                if ((v12 & 0x80000000) == 0) {
                  return brkhlp_SearchAddOn(*(void *)(*(void *)(a5 + 16) + 24), a1, a4);
                }
              }
            }
          }
          return v12;
        }
        return 2169528330;
      }
    }
  }
  return v5;
}

uint64_t engbrk_DataMapEx(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (!a2 || !a1 || !a4 || !a5) {
    return v8;
  }
  int v12 = a3;
  *a5 = 0;
  uint64_t v14 = *(void *)(a2 + 8);
  if (!v14)
  {
    uint64_t v8 = osspi_DataMap(*(void *)a2, a3, a4, a5);
    if ((v8 & 0x80000000) == 0) {
      return v8;
    }
LABEL_26:
    log_OutPublic(a1[1], (uint64_t)"BROKER", 287, (uint64_t)"%s%p%s%u%s%u%s%x", (uint64_t)a5, a6, a7, a8, "hData");
    return v8;
  }
  uint64_t v15 = *(void *)(v14 + 8);
  unsigned int v16 = *(_DWORD *)(a2 + 16);
  unsigned int v17 = *(_DWORD *)(v15 + 40 * v16 + 16);
  uint64_t v8 = 2169528324;
  if (v17 < a3) {
    goto LABEL_26;
  }
  if (*a4)
  {
    unsigned int v18 = *(_DWORD *)(v15 + 40 * v16 + 16);
    unsigned int v17 = *a4;
  }
  else
  {
    *a4 = v17;
    unsigned int v16 = *(_DWORD *)(a2 + 16);
    unsigned int v18 = *(_DWORD *)(v15 + 40 * v16 + 16);
  }
  if (v17 + a3 > v18)
  {
    *a4 = v18 - a3;
    unsigned int v16 = *(_DWORD *)(a2 + 16);
  }
  uint64_t v19 = *(void *)(v15 + 40 * v16 + 8);
  if (v19)
  {
    uint64_t v8 = 0;
    *a5 = v19 + a3;
    return v8;
  }
  uint64_t v20 = critsec_Enter(*(void **)(*a1 + 56));
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v8 = v20;
    goto LABEL_26;
  }
  int Data = clcarchive_GetData(*(void *)(a2 + 8), *(_DWORD *)(a2 + 16), v12, *a4, a5);
  int v22 = critsec_Leave(*(void **)(*a1 + 56));
  if (Data > -1 && v22 < 0) {
    uint64_t v8 = v22;
  }
  else {
    uint64_t v8 = Data;
  }
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_26;
  }
  return v8;
}

uint64_t engbrk_DataUnmap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2169528327;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = *(void *)(*a1 + 16);
    uint64_t v3 = critsec_Enter(*(void **)(*a1 + 24));
    if ((v3 & 0x80000000) != 0) {
      goto LABEL_16;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    if (v12)
    {
      if (!*(void *)(*(void *)(v12 + 8) + 40 * *(unsigned int *)(a2 + 16) + 8)) {
        heap_Free(*(void **)(v7 + 8), a3);
      }
    }
    else
    {
      LODWORD(v3) = osspi_DataUnmap(*(void *)a2, a3);
    }
    int v13 = critsec_Leave(*(void **)(*a1 + 24));
    BOOL v14 = (int)v3 > -1 && v13 < 0;
    uint64_t v3 = v14 ? v13 : v3;
    if ((v3 & 0x80000000) != 0) {
LABEL_16:
    }
      log_OutPublic(a1[1], (uint64_t)"BROKER", 296, (uint64_t)"%s%p%s%x", v8, v9, v10, v11, "hData");
  }
  return v3;
}

uint64_t hlp_ReleaseUriFetcherInterface(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)(a2 + 24);
    if (*(void *)(a2 + 24))
    {
      if (*(void *)(a2 + 32))
      {
        uint64_t result = objc_ReleaseObject(*(void *)(result + 48), (uint64_t)"URIFETCHER");
        *uint64_t v2 = 0;
        v2[1] = 0;
      }
    }
  }
  return result;
}

uint64_t engbrk_DataClose(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  if (!a1 || !a2) {
    return v8;
  }
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v13 = *(void *)(v12 + 16);
  if (a1[4]) {
    uint64_t v14 = a1[4];
  }
  else {
    uint64_t v14 = *(void *)(v12 + 16);
  }
  log_OutText(v11, (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataClose : hData=%p : Begin", a6, a7, a8, (uint64_t)a2);
  if (!a2[1])
  {
    if (*a2)
    {
      uint64_t v8 = osspi_DataClose(*a2);
      *a2 = 0;
    }
    else
    {
      uint64_t v8 = 0;
    }
    goto LABEL_26;
  }
  uint64_t v19 = critsec_Enter(*(void **)(*a1 + 24));
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  uint64_t v23 = a2[1];
  int v24 = *(_DWORD *)(v23 + 120);
  if (v24)
  {
    int v25 = v24 - 1;
    *(_DWORD *)(v23 + 120) = v25;
    if (!v25)
    {
LABEL_15:
      uint64_t v38 = 0;
      if ((brkhlp_SearchAddOn((uint64_t)a1, *(char **)(v23 + 128), &v38) & 0x80001FFF) == 0x8000000A)
      {
LABEL_16:
        critsec_Leave(*(void **)(*a1 + 24));
        return 2169528330;
      }
      uint64_t v26 = v38;
      if (v38) {
        goto LABEL_19;
      }
      uint64_t v34 = *(void *)(v13 + 8);
      int v35 = cstdlib_strlen(*(const char **)(a2[1] + 128));
      uint64_t v36 = heap_Alloc(v34, (v35 + 1));
      if (!v36) {
        goto LABEL_16;
      }
      uint64_t v37 = (char *)v36;
      engbrk_CreateSurrogateBrokerString(*(const char **)(a2[1] + 128), v36);
      if (cstdlib_strcmp(*(const char **)(a2[1] + 128), v37))
      {
        brkhlp_SearchAddOn((uint64_t)a1, v37, &v38);
        uint64_t v26 = v38;
        heap_Free(*(void **)(v13 + 8), (uint64_t)v37);
        if (v26) {
LABEL_19:
        }
          *(void *)(v26 + 16) = 0;
      }
      else
      {
        heap_Free(*(void **)(v13 + 8), (uint64_t)v37);
      }
      uint64_t v27 = a2[1];
      if (*(void *)(v27 + 112))
      {
        osspi_DataClose(*(void *)(v27 + 112));
        uint64_t v28 = a2[3];
        uint64_t v27 = a2[1];
        *(void *)(v27 + 112) = 0;
        if (v28)
        {
          if (a2[4])
          {
            objc_ReleaseObject(*(void *)(v14 + 48), (uint64_t)"URIFETCHER");
            a2[3] = 0;
            a2[4] = 0;
            uint64_t v27 = a2[1];
          }
        }
      }
      clcarchive_ObjClose(v27);
      a2[1] = 0;
    }
  }
  else
  {
    log_OutText(a1[1], (uint64_t)"BROKER", 1, 0, (uint64_t)"brk_DataClose : RefCount is 0 before substruction. hData=%p", v20, v21, v22, (uint64_t)a2);
    uint64_t v23 = a2[1];
    if (!*(_DWORD *)(v23 + 120)) {
      goto LABEL_15;
    }
  }
  int v29 = critsec_Leave(*(void **)(*a1 + 24));
  uint64_t v8 = v29 & (v29 >> 31);
LABEL_26:
  if (a2[3] && a2[4])
  {
    objc_ReleaseObject(*(void *)(v14 + 48), (uint64_t)"URIFETCHER");
    a2[3] = 0;
    a2[4] = 0;
  }
  if ((v8 & 0x80000000) != 0) {
    log_OutPublic(a1[1], (uint64_t)"BROKER", 280, (uint64_t)"%s%p%s%x", v15, v16, v17, v18, "hData");
  }
  heap_Free(*(void **)(v13 + 8), (uint64_t)a2);
  log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_DataClose : End %x", v30, v31, v32, v8);
  return v8;
}

uint64_t engbrk_DataMap(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v13 = a4;
  uint64_t result = engbrk_DataMapEx(a1, a2, a3, &v13, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0 && v13 < a4)
  {
    engbrk_DataUnmap(a1, a2, *a5);
    return 2169528324;
  }
  return result;
}

uint64_t engbrk_DataFreeze(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2169528327;
  if (a1 && a2)
  {
    if (*(void *)(a2 + 8))
    {
      return 0;
    }
    else
    {
      uint64_t v4 = osspi_DataFreeze(*(void **)a2);
      uint64_t v2 = v4;
      if ((v4 & 0x80000000) != 0 && (v4 & 0x1FFF) != 1) {
        log_OutPublic(*(void *)(a1 + 8), (uint64_t)"BROKER", 297, (uint64_t)"%s%p%s%x", v5, v6, v7, v8, "hData");
      }
    }
  }
  return v2;
}

uint64_t engbrk_TagIteratorOpen(uint64_t a1, char *a2, char *a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2169528327;
  uint64_t v38 = 0;
  BOOL v39 = 0;
  if (a1 && a2 && a3 && *a2 && a5 && *a3)
  {
    uint64_t v14 = *(void *)(*(void *)a1 + 16);
    *a5 = 0;
    log_OutText(*(void *)(v14 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorOpen BrokerString=%s Query=%s QueryMode=%d: Begin", a6, a7, a8, (uint64_t)a2);
    int v15 = brkhlp_SearchAddOn(a1, a2, &v39);
    if (v39) {
      BOOL v23 = v15 < 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23 && (v15 & 0x1FFF) == 13) {
      uint64_t v25 = 2169528333;
    }
    else {
      uint64_t v25 = v15;
    }
    if ((v25 & 0x80000000) != 0 || !v39)
    {
      if ((v25 & 0x80000000) != 0) {
        goto LABEL_39;
      }
      uint64_t v37 = v14;
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v37 = v14;
      uint64_t v26 = *v39;
    }
    for (uint64_t i = a3; ; uint64_t i = v28 + 1)
    {
      uint64_t v28 = cstdlib_strchr(i, 47);
      if (!v28 && !cstdlib_strcmp(i, "*")) {
        break;
      }
      if (v38) {
        uint64_t v26 = *(void *)(v38 + 16);
      }
      if (!v26) {
        goto LABEL_38;
      }
      if (!v28)
      {
        if ((ssftmap_Find(v26, (uint64_t)i, &v38) & 0x80000000) != 0)
        {
LABEL_38:
          uint64_t v25 = 2169528333;
          uint64_t v14 = v37;
          goto LABEL_39;
        }
        break;
      }
      size_t v29 = (v28 - i);
      if (v29 > 0x7F)
      {
        uint64_t v31 = v26;
        uint64_t v30 = i;
      }
      else
      {
        cstdlib_strncpy(__dst, i, v29);
        __dst[v28 - i] = 0;
        uint64_t v30 = __dst;
        uint64_t v31 = v26;
      }
      if ((ssftmap_Find(v31, (uint64_t)v30, &v38) & 0x80000000) != 0) {
        goto LABEL_38;
      }
    }
    uint64_t v14 = v37;
    uint64_t v32 = heap_Calloc(*(void **)(v37 + 8), 1, 24);
    *a5 = v32;
    if (!v32)
    {
      uint64_t v25 = 2169528330;
LABEL_41:
      uint64_t v35 = *(void *)(v14 + 32);
      if (a4) {
        log_OutText(v35, (uint64_t)"BROKER", 3, 0, (uint64_t)"brk_TagIteratorOpen : BrokerString=%s Query=%s  Failure (%x)", v20, v21, v22, (uint64_t)a2);
      }
      else {
        log_OutPublic(v35, (uint64_t)"BROKER", 282, (uint64_t)"%s%s%s%s%s%x", v19, v20, v21, v22, "Broker String");
      }
      goto LABEL_44;
    }
    if (!cstdlib_strcmp(i, "*"))
    {
      if (v38) {
        uint64_t v26 = *(void *)(v38 + 16);
      }
      uint64_t String = ssftmap_IteratorOpen(v26, 0, 1, *a5 + 16);
LABEL_50:
      uint64_t v25 = String;
      *(void *)*a5 = v37;
      if ((String & 0x80000000) == 0)
      {
LABEL_44:
        log_OutText(*(void *)(v14 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorOpen iterator address = %p: End", v20, v21, v22, *a5);
        return v25;
      }
      goto LABEL_39;
    }
    uint64_t v33 = ssftmap_IteratorOpen(v26, (uint64_t)i, 1, *a5 + 16);
    if ((v33 & 0x80000000) == 0)
    {
      uint64_t String = brkhlp_CreateString((char **)(*a5 + 8), i, *(void *)(v37 + 8));
      goto LABEL_50;
    }
    uint64_t v25 = v33;
LABEL_39:
    if (*a5)
    {
      engbrk_TagIteratorClose((void *)*a5, v16, v17, v18, v19, v20, v21, v22);
      *a5 = 0;
    }
    goto LABEL_41;
  }
  return v8;
}

uint64_t engbrk_TagIteratorClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2169528327;
  }
  uint64_t v9 = *a1;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorClose iterator=%p: Begin", a6, a7, a8, (uint64_t)a1);
  uint64_t v10 = a1[1];
  if (v10) {
    heap_Free(*(void **)(v9 + 8), v10);
  }
  uint64_t v11 = a1[2];
  if (v11) {
    ssftmap_IteratorClose(v11);
  }
  heap_Free(*(void **)(v9 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v9 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorClose: End", v12, v13, v14, v16);
  return 0;
}

uint64_t engbrk_DataGetSize(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 2169528327;
  if (a2 && a3 && a1 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      uint64_t result = 0;
      *a4 = *(_DWORD *)(*(void *)(v6 + 8) + 40 * *(unsigned int *)(a2 + 16) + 16);
      *a3 = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_TagIteratorNext(uint64_t a1, const char **a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  uint64_t v8 = 2169528327;
  if (!a1 || !a2 || !a3) {
    return v8;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorNext iterator=%p: Begin", a6, a7, a8, a1);
  uint64_t v16 = ssftmap_IteratorNext(*(uint64_t **)(a1 + 16), a2, &v22);
  if ((v16 & 0x80000000) != 0) {
    goto LABEL_13;
  }
  uint64_t v17 = *(const char **)(a1 + 8);
  if (!v17 || !cstdlib_strcmp(v17, *a2))
  {
    uint64_t v18 = v22;
    if (v22[2]) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *v22;
    }
    *a3 = v19;
    if (a4) {
      *a4 = v18[1];
    }
LABEL_13:
    uint64_t v8 = v16;
    goto LABEL_14;
  }
  uint64_t v8 = 2169528343;
LABEL_14:
  uint64_t v20 = *a2;
  if (!*a2) {
    uint64_t v20 = "";
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_TagIteratorNext Name=%s, Value=%s, Attrs=%p: End", v13, v14, v15, (uint64_t)v20);
  return v8;
}

uint64_t engbrk_ComponentPathQuery(void *a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2169528327;
  uint64_t v14 = 0;
  if (!a1) {
    return v8;
  }
  if (!a3) {
    return v8;
  }
  if (!a2) {
    return v8;
  }
  if (!*a1) {
    return v8;
  }
  log_OutText(a1[1], (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathQuery BrokerString=%s : Begin", a6, a7, a8, (uint64_t)a2);
  uint64_t v8 = 2169528333;
  if ((brkhlp_SearchAddOn((uint64_t)a1, a2, &v14) & 0x80000000) != 0 || !v14) {
    return v8;
  }
  uint64_t v12 = *v14;

  return brkhlp_SearchTag(v12, (uint64_t)"FULLPATHCOMPONENT", a3);
}

uint64_t engbrk_ComponentPathRelease(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 2169528327;
  if (a1)
  {
    if (a2)
    {
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathRelease address = %p : Begin", a6, a7, a8, a2);
      log_OutText(*(void *)(a1 + 8), (uint64_t)"BROKER", 4, 0, (uint64_t)"brk_ComponentPathRelease : End", v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t engbrk_RegisterCupAddon(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0;
  *a2 = 0;
  *a3 = 0;
  uint64_t result = 2169528326;
  if (a1 && a5)
  {
    uint64_t v9 = *(void *)(*(void *)(a5 + 16) + 48);
    if (a4) {
      uint64_t v10 = *(void *)(a4 + 32);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t result = objc_GetAddRefCountedObject(v9, a1, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))ObjcLoadCupAddon, (void (*)(void, void, _OWORD *))ObjcUnloadCupAddon, v10, &v12);
    if ((result & 0x80000000) == 0 && v12)
    {
      uint64_t v11 = *(void **)(v12 + 32);
      if (v11)
      {
        *a2 = *(void *)(*v11 + 16);
        *a3 = v11[3];
      }
    }
  }
  return result;
}

uint64_t ObjcLoadCupAddon(_WORD *a1, int a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t v12 = v11;
  uint64_t inited = InitRsrcFunction(a1, a2, &v28);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v14 = 2169528330;
  uint64_t v15 = heap_Calloc(*(void **)(v28 + 8), 1, 32);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = strhelper_Strdup(*(void *)(v28 + 8), a3);
    *(void *)(v16 + 8) = v17;
    if (v17)
    {
      uint64_t v18 = heap_Calloc(*(void **)(v28 + 8), 1, 8);
      *(void *)(v16 + 24) = v18;
      if (v18)
      {
        uint64_t v19 = UriToBrokerString(*(void **)(v28 + 8), a3);
        *(void *)(v16 + 16) = v19;
        if (v19)
        {
          uint64_t v20 = v28;
          if (a5) {
            uint64_t v20 = a5;
          }
          if ((objc_GetObject(*(void *)(v20 + 48), (uint64_t)"URIFETCHER", &v27) & 0x80000000) != 0)
          {
            uint64_t v21 = 0;
          }
          else
          {
            uint64_t v21 = v27[1];
            uint64_t NullHandle = v27[2];
            uint64_t v12 = v27[3];
          }
          uint64_t v22 = clcarchive_ObjOpen(a1, a2, *(const char **)(v16 + 16), &v26);
          if ((v22 & 0x80000000) == 0)
          {
            ++*(_DWORD *)(v26 + 120);
            uint64_t v22 = osspi_DataOpenEx(*(void **)(v28 + 64), *(void **)(v28 + 8), v21, NullHandle, v12, (uint64_t)a3, &v25);
            if ((v22 & 0x80000000) == 0)
            {
              uint64_t v22 = osspi_ClcDataOpen(v25, v26);
              if ((v22 & 0x80000000) == 0)
              {
                cstdlib_memcpy(*(void **)(v16 + 24), &v25, 8uLL);
                uint64_t v22 = brkhlp_RegisterAddon(*(char **)(v16 + 16), a3, v26, (void *)v16, **(void **)(v28 + 24));
              }
            }
          }
          uint64_t v14 = v22;
          if (v21 && NullHandle)
          {
            uint64_t v23 = v28;
            if (a5) {
              uint64_t v23 = a5;
            }
            objc_ReleaseObject(*(void *)(v23 + 48), (uint64_t)"URIFETCHER");
          }
          if ((v14 & 0x80000000) == 0)
          {
            *(void *)(a4 + 32) = v16;
            return v14;
          }
        }
        else
        {
          uint64_t v14 = 2169528338;
        }
      }
    }
    FreeAllCupAddonResources(v28, (void *)v16);
  }
  return v14;
}

uint64_t ObjcUnloadCupAddon(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v7);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v5 = *(void **)(a3 + 32);
    if (v5) {
      FreeAllCupAddonResources(v7, v5);
    }
  }
  return inited;
}

uint64_t engbrk_UnregisterCupAddon(uint64_t a1, uint64_t a2)
{
  if (a1) {
    objc_ReleaseObject(*(void *)(*(void *)(a2 + 16) + 48), a1);
  }
  return 0;
}

uint64_t engbrk_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 8;
  }
  uint64_t result = 0;
  *a2 = &IBroker;
  return result;
}

char *brkhlp_CloneString(void *a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  int v4 = cstdlib_strlen(__s);
  uint64_t v5 = (char *)heap_Calloc(a1, 1, (v4 + 1));
  uint64_t v6 = v5;
  if (v5) {
    cstdlib_strcpy(v5, __s);
  }
  return v6;
}

uint64_t brkhlp_ElemCopyConstPtr(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  return 0;
}

uint64_t brkhlp_ElemCopyAddOn(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)heap_Alloc(a2, 24);
  if (!v5) {
    return 2169528330;
  }
  uint64_t v6 = v5;
  cstdlib_memcpy(v5, a1, 0x18uLL);
  uint64_t result = 0;
  *a1 = 0;
  a1[2] = 0;
  *a3 = v6;
  return result;
}

uint64_t *brkhlp_ElemFreeAddOn(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *result;
    if (v4) {
      hdrpars_FreeHeader(v4);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t brkhlp_ElemCopyLoadedIntf(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)heap_Alloc(a2, 32);
  if (!v5) {
    return 2169528330;
  }
  uint64_t v6 = v5;
  cstdlib_memcpy(v5, a1, 0x20uLL);
  *a1 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  uint64_t result = 0;
  a1[2] = NullHandle;
  a1[3] = v9;
  *a3 = v6;
  return result;
}

uint64_t *brkhlp_ElemFreeLoadedIntf(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (result[2])
    {
      uint64_t v4 = *(void (**)(void))(result[1] + 24);
      if (v4) {
        v4();
      }
    }
    if (*v3) {
      osspi_DynModClose(*v3);
    }
    return heap_Free(a2, (uint64_t)v3);
  }
  return result;
}

uint64_t brkhlp_InternalSearchAddOn(uint64_t a1, char *a2, void *a3)
{
  uint64_t v5 = 2169528333;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = ssftmap_IteratorOpen(*(void *)(*(void *)a1 + 40), (uint64_t)a2, 1, (uint64_t)&v12);
  uint64_t v7 = v6;
  if ((v6 & 0x80000000) != 0)
  {
    if ((v6 & 0x1FFF) == 0x14) {
      return 2169528333;
    }
    else {
      return v6;
    }
  }
  while ((ssftmap_IteratorNext(v12, &v11, &v10) & 0x80000000) == 0)
  {
    int v8 = LH_stricmp(a2, v11);
    if (!v8)
    {
      *a3 = v10;
      break;
    }
    if (v8 > 0) {
      break;
    }
  }
  ssftmap_IteratorClose((uint64_t)v12);
  if (*a3) {
    return v7;
  }
  return v5;
}

uint64_t brkhlp_allocateAndStoreTagInMap(void *a1, uint64_t a2, char *__s, uint64_t a4, void *a5)
{
  unsigned int v10 = cstdlib_strlen(__s);
  uint64_t v11 = heap_Calloc(a1, 1, v10 + 25);
  if (!v11) {
    return 2169528330;
  }
  uint64_t v12 = (void *)v11;
  uint64_t v13 = (char *)(v11 + 24);
  *uint64_t v12 = v13;
  cstdlib_strcpy(v13, __s);
  uint64_t result = ssftmap_Insert(a2, a4, (uint64_t)v12);
  if ((result & 0x80000000) == 0) {
    *a5 = v12;
  }
  return result;
}

uint64_t brkhlp_ElemCopyTag(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = a1;
  return 0;
}

void *brkhlp_ElemFreeTag(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = result[1];
    if (v4) {
      ssftmap_ObjClose(v4);
    }
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5) {
      ssftmap_ObjClose(v5);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

void *FreeAllCupAddonResources(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (uint64_t *)a2[3];
  if (v5)
  {
    uint64_t v6 = *v5;
    uint64_t v7 = (char *)a2[2];
    uint64_t v8 = **(void **)(a1 + 24);
    uint64_t v19 = 0;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      if (v10)
      {
        if ((critsec_Enter(*(void **)(v8 + 24)) & 0x80000000) == 0)
        {
          if ((brkhlp_InternalSearchAddOn(*(void *)(*(void *)(v8 + 16) + 24), v7, &v19) & 0x80000000) == 0)
          {
            uint64_t v11 = v19;
            uint64_t v12 = *(void *)(v19 + 16);
            if (v12)
            {
              if (v6)
              {
                osspi_ClcDataClose(v6, v12);
                uint64_t v12 = *(void *)(v11 + 16);
              }
              --*(_DWORD *)(v12 + 120);
              clcarchive_ObjClose(v12);
            }
          }
          if ((ssftmap_Remove(*(void *)(v8 + 40), (uint64_t)v7) & 0x80000000) == 0) {
            log_OutText(*(void *)(v10 + 32), (uint64_t)"BROKER", 4, 0, (uint64_t)"brkhlp_RemoveAddOn: %s", v13, v14, v15, (uint64_t)v7);
          }
          critsec_Leave(*(void **)(v8 + 24));
        }
      }
    }
    if (v6) {
      osspi_DataClose(v6);
    }
    heap_Free(v4, a2[3]);
    uint64_t v4 = *(void **)(a1 + 8);
  }
  uint64_t v16 = a2[1];
  if (v16)
  {
    heap_Free(v4, v16);
    uint64_t v4 = *(void **)(a1 + 8);
  }
  uint64_t v17 = a2[2];
  if (v17)
  {
    heap_Free(v4, v17);
    uint64_t v4 = *(void **)(a1 + 8);
  }

  return heap_Free(v4, (uint64_t)a2);
}

uint64_t brkhlp_GetBuiltinInterface(char *__s1, void *a2, void *a3, void *a4)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  uint64_t v8 = "fe/fe_prmfx";
  BOOL v9 = &off_26D20B428;
  while (cstdlib_strcmp(__s1, v8))
  {
    uint64_t v10 = *v9;
    v9 += 4;
    uint64_t v8 = v10;
    if (!v10) {
      return 2169528333;
    }
  }
  uint64_t v12 = (uint64_t)*(v9 - 3);
  uint64_t result = 0;
  if (v12)
  {
    *a2 = v12;
  }
  else
  {
    *a3 = *(v9 - 2);
    *a4 = *(v9 - 1);
  }
  return result;
}

uint64_t log_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = 2226135048;
  uint64_t v18 = 0;
  if (!a4) {
    return 2226135046;
  }
  if ((InitRsrcFunction(a1, a2, &v18) & 0x80000000) == 0)
  {
    *a4 = 0;
    uint64_t v8 = (void *)heap_Calloc(*(void **)(v18 + 8), 1, 224);
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      cstdlib_memset(v8, 0, 0xE0uLL);
      *(void *)uint64_t v9 = a1;
      *(void *)(v9 + 8) = a2;
      *(void *)(v9 + 16) = v18;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      __src = 0;
      __s1 = 0;
      bzero(__dst, 0x400uLL);
      uint64_t v19 = 0;
      if ((InitRsrcFunction(*(_WORD **)v9, *(void *)(v9 + 8), &v23) & 0x80000000) != 0 || !*(void *)(v23 + 40))
      {
LABEL_49:
        log_ClassClose(v9);
      }
      else
      {
        if (brk_TagIteratorOpen(*(void *)(*(void *)(v9 + 16) + 24), "logging", "*", 1, &v19)) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v19 == 0;
        }
        if (!v10)
        {
          while ((brk_TagIteratorNext(v19, (uint64_t)&__s1, (uint64_t)&__src) & 0x80000000) == 0)
          {
            if (__s1) {
              BOOL v11 = __src == 0;
            }
            else {
              BOOL v11 = 1;
            }
            if (v11 || !cstdlib_strcmp(__s1, "BROKERSTRING")) {
              continue;
            }
            __dst[0] = 0;
            if (!cstdlib_strcmp(__s1, "LOG.DIAGNOSTIC"))
            {
              __s1 = "logfile.enabled";
              goto LABEL_36;
            }
            if (!cstdlib_strcmp(__s1, "LOG.DIAGNOSTIC.LEVEL"))
            {
              __s1 = "logfile.filter.level";
              goto LABEL_36;
            }
            if (cstdlib_strcmp(__s1, "LOG.DIAGNOSTIC.DIR"))
            {
              if (!cstdlib_strcmp(__s1, "LOG.DIAGNOSTIC.FILEMAXSIZEMB"))
              {
                __s1 = "logfile.max_size";
                cstdlib_strcpy(__dst, __src);
                cstdlib_strcat(__dst, "000000");
LABEL_32:
                __src = __dst;
                goto LABEL_36;
              }
              if (cstdlib_strcmp(__s1, "LOG.DIAGNOSTIC.FILEMIMETYPE"))
              {
                if (!cstdlib_strcmp(__s1, "LOG.DIAGNOSTIC.MODULES"))
                {
                  __s1 = "logfile.filter.modules";
                  LH_MapModuleNamesToIds(__src, __dst, 0x400u);
                  goto LABEL_32;
                }
                if (cstdlib_strcmp(__s1, "LOG.TSO"))
                {
                  if (cstdlib_strcmp(__s1, "LOG.TSO.LEVEL"))
                  {
                    if (cstdlib_strcmp(__s1, "LOG.TSO.FILENAME")) {
                      goto LABEL_36;
                    }
                    uint64_t v12 = "logtso.filename";
                  }
                  else
                  {
                    uint64_t v12 = "logtso.filter.level";
                  }
                }
                else
                {
                  uint64_t v12 = "logtso.enabled";
                }
              }
              else
              {
                uint64_t v12 = "logfile.filemimetype";
              }
            }
            else
            {
              uint64_t v12 = "logfile.filename.1";
            }
            __s1 = v12;
LABEL_36:
            int Str = paramc_ParamGetStr(*(void *)(v23 + 40), (uint64_t)__s1, &v22);
            uint64_t v14 = *(void *)(v23 + 40);
            if (Str < 0)
            {
              if ((paramc_ParamSetStr(v14, (uint64_t)__s1, __src) & 0x80000000) != 0)
              {
                brk_TagIteratorClose(v19);
                uint64_t v4 = 2226135040;
                goto LABEL_49;
              }
            }
            else
            {
              paramc_ParamRelease(v14);
            }
          }
          brk_TagIteratorClose(v19);
        }
        uint64_t v15 = 0;
        uint64_t v16 = (uint64_t *)&LOG_SUBSCRIBER_ID;
        do
        {
          if (v15 != 40) {
            brk_InterfaceQueryEx(*(void *)(*(void *)(v9 + 16) + 24), *v16, 1, 1, v9 + v15 + 48, v9 + v15 + 40);
          }
          v15 += 40;
          ++v16;
        }
        while (v15 != 200);
        uint64_t v4 = 0;
        *a4 = v9;
      }
    }
    else
    {
      return 2226135050;
    }
  }
  return v4;
}

uint64_t log_ClassClose(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  for (uint64_t i = 40; i != 240; i += 40)
  {
    uint64_t v3 = *(void *)(a1 + i);
    if (v3)
    {
      uint64_t v4 = brk_InterfaceRelease(*(void *)(*(void *)(a1 + 16) + 24), v3);
      if ((v4 & 0x80000000) != 0) {
        return v4;
      }
      *(void *)(a1 + i) = 0;
    }
  }
  uint64_t v8 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v8);
  if ((inited & 0x80000000) != 0) {
    return 2226135048;
  }
  uint64_t v6 = inited;
  heap_Free(*(void **)(v8 + 8), a1);
  return v6;
}

uint64_t log_ObjOpen(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v3 = 2226135046;
    if (a2)
    {
      *a2 = 0;
      uint64_t v5 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 128);
      if (v5)
      {
        uint64_t v6 = (uint64_t)v5;
        cstdlib_memset(v5, 0, 0x80uLL);
        uint64_t v7 = 0;
        *(void *)uint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8);
        uint64_t v8 = (void *)(a1 + 56);
        do
        {
          uint64_t v9 = *(v8 - 2);
          *(void *)(v6 + v7 + 24) = v9;
          if (v9)
          {
            uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t))(v9 + 32))(*(v8 - 1), *v8, v6 + v7 + 16);
            if ((v10 & 0x80000000) != 0)
            {
              uint64_t v3 = v10;
              log_ObjClose(v6);
              return v3;
            }
          }
          v8 += 5;
          v7 += 16;
        }
        while (v7 != 80);
        uint64_t v11 = 0;
        *(_DWORD *)(v6 + 96) = 1;
        do
        {
          uint64_t v12 = *(void *)(v6 + v11 + 24);
          if (v12)
          {
            uint64_t v13 = *(uint64_t (**)(void))(v12 + 80);
            if (v13)
            {
              unsigned int v14 = v13(*(void *)(v6 + v11 + 16));
              if (v14 > *(_DWORD *)(v6 + 96)) {
                *(_DWORD *)(v6 + 96) = v14;
              }
            }
          }
          v11 += 16;
        }
        while (v11 != 80);
        uint64_t v3 = 0;
        *a2 = v6;
      }
      else
      {
        return 2226135050;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    *a2 = 0;
  }
  return v3;
}

uint64_t log_ObjClose(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = v1[v2 + 3];
      if (v3)
      {
        uint64_t v4 = (uint64_t (*)(void))v3[5];
        if (v4)
        {
          if (v1[v2 + 2])
          {
            uint64_t result = v4();
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
        }
      }
      v2 += 2;
      if (v2 == 10)
      {
        heap_Free(*v1, (uint64_t)v1);
        return 0;
      }
    }
  }
  return result;
}

uint64_t log_SetParamc()
{
  return 0;
}

uint64_t log_SubscriberAdd(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(void *)(result + 112))
    {
      return 2226135040;
    }
    else
    {
      *(void *)(result + 104) = a2;
      *(void *)(result + 112) = a3;
      if (a3 && (v4 = *(uint64_t (**)(uint64_t))(a3 + 80)) != 0 && (unsigned int v5 = v4(a2), v5 > *(_DWORD *)(v3 + 96)))
      {
        unsigned int v6 = v5;
        uint64_t result = 0;
        *(_DWORD *)(v3 + 96) = v6;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t log_SubscriberRemove(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 2226135040;
    if (*(void *)(v3 + 112) == a3)
    {
      uint64_t v5 = *(void *)(v3 + 104);
      uint64_t v4 = (void *)(v3 + 104);
      if (v5 == a2)
      {
        uint64_t result = 0;
        void *v4 = 0;
        v4[1] = 0;
      }
    }
  }
  return result;
}

uint64_t LH_ERROR_to_VERROR(int a1)
{
  uint64_t v1 = 0;
  while (LH_ERROR_to_VERROR_lh2v[v1] != a1)
  {
    v1 += 2;
    if (v1 == 22) {
      return 2703237376;
    }
  }
  if (v1 * 4) {
    return LH_ERROR_to_VERROR_lh2v[v1 + 1] | 0xA1202000;
  }
  else {
    return 0;
  }
}

const char *verror_GetString(int a1)
{
  if (a1) {
    return "NO ERROR STRINGS SUPPORTED";
  }
  else {
    return " Success";
  }
}

const char *verror_GetModuleName(int a1)
{
  if (a1) {
    return "NO ERROR STRINGS SUPPORTED";
  }
  else {
    return "NO ERROR";
  }
}

uint64_t compstats_ObjOpen(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v27 = 0;
  uint64_t result = 2285903879;
  if (!a3) {
    return result;
  }
  if (!a4) {
    return result;
  }
  uint64_t result = InitRsrcFunction(a1, a2, &v27);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v9 = heap_Calloc(*(void **)(v27 + 8), 1, 320);
  if (!v9)
  {
LABEL_13:
    log_OutPublic(*(void *)(v27 + 32), (uint64_t)"CompStats", 2688, 0, v10, v11, v12, v13, v25);
    return 2285903882;
  }
  unsigned int v14 = (void *)v9;
  *(_DWORD *)(v9 + 284) = a3;
  uint64_t v15 = 2 * a3;
  uint64_t v16 = heap_Calloc(*(void **)(v27 + 8), v15, 56);
  v14[36] = v16;
  if (!v16)
  {
    heap_Free(*(void **)(v27 + 8), (uint64_t)v14);
    goto LABEL_13;
  }
  void *v14 = a1;
  v14[1] = a2;
  v14[2] = v27;
  v14[38] = v16 + 56 * a3;
  if (v15)
  {
    uint64_t v17 = 0;
    __asm { FMOV            V0.2D, #1.0 }
    long long v26 = _Q0;
    do
    {
      uint64_t v23 = v14[36];
      if (v23)
      {
        uint64_t v24 = v23 + v17;
        cstdlib_memset((void *)(v23 + v17), 0, 0x38uLL);
        *(_OWORD *)(v24 + 40) = v26;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(void *)(v24 + 32) = 0;
      }
      v17 += 56;
    }
    while (56 * v15 != v17);
  }
  *(void *)a4 = v14;
  *(_DWORD *)(a4 + 8) = 61435;
  return compstats_Reset((uint64_t)v14);
}

uint64_t compstats_ClockInit(_OWORD *a1)
{
  if (!a1) {
    return 2285903879;
  }
  cstdlib_memset(a1, 0, 0x38uLL);
  uint64_t result = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)a1 + 40) = _Q0;
  *a1 = 0u;
  a1[1] = 0u;
  *((void *)a1 + 4) = 0;
  return result;
}

uint64_t compstats_Reset(uint64_t a1)
{
  if (!a1) {
    return 2285903879;
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  unint64_t v1 = *(unsigned int *)(a1 + 284);
  if (v1)
  {
    uint64_t v2 = 0;
    for (unint64_t i = 0; i < v1; ++i)
    {
      uint64_t v4 = *(void *)(a1 + 288);
      if (v4)
      {
        uint64_t v5 = v4 + v2;
        *(void *)(v5 + 32) = 0;
        *(_OWORD *)uint64_t v5 = 0uLL;
        *(_OWORD *)(v5 + 16) = 0uLL;
        unint64_t v1 = *(unsigned int *)(a1 + 284);
      }
      v2 += 56;
    }
  }
  return 0;
}

uint64_t compstats_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 61435, 320);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 16) + 8);
    heap_Free(v4, *(void *)(a1 + 288));
    heap_Free(v4, a1);
  }
  return v3;
}

uint64_t compstats_Start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    int v9 = a3;
    if (*(_DWORD *)(a1 + 284) <= a3)
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2689, 0, a5, a6, a7, a8, v21);
    }
    else if (*(_DWORD *)(a1 + 24) < 0x40u)
    {
      uint64_t v11 = compstats_ClockXStart(*(void *)(a1 + 288) + 56 * a3, *(void *)(a1 + 16) + 392, a3, a4, a5, a6, a7, a8);
      if ((v11 & 0x80000000) != 0)
      {
        return v11;
      }
      else
      {
        unsigned int v18 = *(_DWORD *)(a1 + 24);
        if (v18 && (unsigned int v19 = *(_DWORD *)(a1 + 4 * (v18 - 1) + 28)) != 0)
        {
          uint64_t v8 = compstats_ClockXStop(*(void *)(a1 + 288) + 56 * v19, *(void *)(a1 + 16) + 392, v12, v13, v14, v15, v16, v17);
          unsigned int v18 = *(_DWORD *)(a1 + 24);
        }
        else
        {
          uint64_t v8 = 0;
        }
        *(_DWORD *)(a1 + 4 * v18 + 28) = v9;
        *(_DWORD *)(a1 + 24) = v18 + 1;
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2690, 0, a5, a6, a7, a8, v21);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t compstats_ClockXStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2693, 0, a5, a6, a7, a8, v12[0]);
      return 2285903889;
    }
    else
    {
      uint64_t v10 = *(void (***)(void, void *))a2;
      if (*(void *)a2)
      {
        memset(v12, 0, 12);
        (*v10)(*(void *)(a2 + 8), v12);
        uint64_t v8 = 0;
        *(_DWORD *)(a1 + 12) = v12[0];
        *(void *)(a1 + 4) = *(void *)((char *)v12 + 4);
      }
      else
      {
        return 0;
      }
    }
  }
  return v8;
}

uint64_t compstats_ClockXStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      memset(v14, 0, sizeof(v14));
      uint64_t v15 = 0;
      compstats_ClockXStart((uint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
      int32x2_t v10 = vsub_s32(*(int32x2_t *)((char *)v14 + 4), *(int32x2_t *)(a1 + 4));
      int v11 = *(_DWORD *)(a1 + 16);
      unsigned int v12 = HIDWORD(v14[0]) - *(_DWORD *)(a1 + 12);
      *(int32x2_t *)(a1 + 28) = vadd_s32(*(int32x2_t *)(a1 + 28), v10);
      *(_DWORD *)(a1 + 36) += v12;
      if (*(_DWORD *)(a1 + 20) + v11 < vadd_s32(vdup_lane_s32(v10, 1), v10).u32[0]) {
        *(int32x2_t *)(a1 + 16) = v10;
      }
      if (*(_DWORD *)(a1 + 24) < v12) {
        *(_DWORD *)(a1 + 24) = v12;
      }
      uint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)a1 = (*(_DWORD *)a1 + 1);
    }
    else
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2694, 0, a5, a6, a7, a8, v14[0]);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t compstats_InsertNewAt(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 284);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v11 <= a3)
    {
      log_OutPublic(*(void *)(v12 + 32), (uint64_t)"CompStats", 2689, 0, a5, a6, a7, a8, v53);
    }
    else
    {
      uint64_t v13 = heap_Realloc(*(uint64_t **)(v12 + 8), *(void *)(a1 + 288), 56 * (2 * v11 + 2));
      *(void *)(a1 + 288) = v13;
      if (v13)
      {
        int v18 = *(_DWORD *)(a1 + 284);
        unsigned int v19 = v18 + 1;
        *(_DWORD *)(a1 + 284) = v18 + 1;
        if (2 * (v18 + 1) - 1 >= (v18 + 1))
        {
          unsigned int v20 = 2 * v18;
          do
          {
            uint64_t v21 = *(void *)(a1 + 288);
            uint64_t v22 = v21 + 56 * (v20 + 1);
            uint64_t v23 = v21 + 56 * v20;
            long long v24 = *(_OWORD *)(v23 + 16);
            *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
            *(_OWORD *)(v22 + 16) = v24;
            *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
            *(void *)(v22 + 48) = *(void *)(v23 + 48);
            unsigned int v19 = *(_DWORD *)(a1 + 284);
          }
          while (v20-- >= v19);
          uint64_t v13 = *(void *)(a1 + 288);
        }
        *(void *)(a1 + 304) = v13 + 56 * v19;
        unsigned int v26 = v19 - 1;
        if (v19 - 1 > a3)
        {
          uint64_t v27 = 56 * (v19 - 2);
          uint64_t v28 = 56 * v26;
          do
          {
            uint64_t v29 = *(void *)(a1 + 288);
            uint64_t v30 = v29 + v28;
            uint64_t v31 = (long long *)(v29 + v27);
            long long v32 = *v31;
            long long v33 = v31[1];
            long long v34 = v31[2];
            *(void *)(v30 + 48) = *((void *)v31 + 6);
            *(_OWORD *)(v30 + 16) = v33;
            *(_OWORD *)(v30 + 32) = v34;
            *(_OWORD *)uint64_t v30 = v32;
            uint64_t v35 = *(void *)(a1 + 304);
            uint64_t v36 = v35 + v28;
            uint64_t v37 = (long long *)(v35 + v27);
            long long v38 = *v37;
            long long v39 = v37[1];
            long long v40 = v37[2];
            *(void *)(v36 + 48) = *((void *)v37 + 6);
            *(_OWORD *)(v36 + 16) = v39;
            *(_OWORD *)(v36 + 32) = v40;
            *(_OWORD *)uint64_t v36 = v38;
            v27 -= 56;
            v28 -= 56;
            --v26;
          }
          while (v26 > a3);
          uint64_t v13 = *(void *)(a1 + 288);
        }
        __asm { FMOV            V1.2D, #1.0 }
        long long v54 = _Q1;
        if (v13)
        {
          uint64_t v45 = (_OWORD *)(v13 + 56 * a3);
          cstdlib_memset(v45, 0, 0x38uLL);
          *(_OWORD *)((char *)v45 + 40) = v54;
          _OWORD *v45 = 0u;
          v45[1] = 0u;
          *((void *)v45 + 4) = 0;
        }
        uint64_t v46 = *(void *)(a1 + 304);
        if (v46)
        {
          uint64_t v47 = (_OWORD *)(v46 + 56 * a3);
          cstdlib_memset(v47, 0, 0x38uLL);
          *(_OWORD *)((char *)v47 + 40) = v54;
          _OWORD *v47 = 0u;
          v47[1] = 0u;
          *((void *)v47 + 4) = 0;
        }
        unint64_t v48 = *(unsigned int *)(a1 + 24);
        if (v48)
        {
          unint64_t v49 = 0;
          uint64_t v50 = a1 + 28;
          do
          {
            unsigned int v51 = *(_DWORD *)(v50 + 4 * v49);
            if (v51 >= a3) {
              *(_DWORD *)(v50 + 4 * v49) = v51 + 1;
            }
            ++v49;
          }
          while (v49 < v48);
        }
        return 0;
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2688, 0, v14, v15, v16, v17, v53);
        *(_DWORD *)(a1 + 284) = 0;
        return 2285903882;
      }
    }
  }
  return v8;
}

uint64_t compstats_Stop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (!a1) {
    return v8;
  }
  if (*(_DWORD *)(a1 + 284) <= a3)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2691, 0, a5, a6, a7, a8, v22);
    return v8;
  }
  int v10 = *(_DWORD *)(a1 + 24);
  if (!v10 || *(_DWORD *)(a1 + 4 * (v10 - 1) + 28) != a3)
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"CompStats", 2692, 0, a5, a6, a7, a8, v22);
    return 2285903889;
  }
  uint64_t v8 = compstats_ClockXStop(*(void *)(a1 + 288) + 56 * a3, *(void *)(a1 + 16) + 392, a3, a4, a5, a6, a7, a8);
  int v17 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v17 - 1;
  if (v17 == 1) {
    return v8;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 4 * (v17 - 2) + 28);
  if (!v18) {
    return v8;
  }
  uint64_t v19 = *(void *)(a1 + 288) + 56 * v18;
  uint64_t v20 = *(void *)(a1 + 16) + 392;

  return compstats_ClockXStart(v19, v20, v11, v12, v13, v14, v15, v16);
}

uint64_t compstats_Notify(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 2285903879;
  }
  if (a3 != 8) {
    return 0;
  }
  if (!*(_DWORD *)(a1 + 296))
  {
    *(_DWORD *)(a1 + 296) = 1;
    cstdlib_memcpy(*(void **)(a1 + 304), *(const void **)(a1 + 288), 56 * *(unsigned int *)(a1 + 284));
    int v10 = *(_DWORD *)(a1 + 24);
    if (v10)
    {
      unsigned int v11 = v10 - 1;
      do
      {
        uint64_t v12 = *(void *)(a1 + 304);
        unsigned int v13 = *(_DWORD *)(a1 + 4 * v11 + 28);
        if (*(_DWORD *)(v12 + 56 * v13 + 12)) {
          compstats_ClockXStop(v12 + 56 * v13, *(void *)(a1 + 16) + 392, v4, v5, v6, v7, v8, v9);
        }
      }
      while ((unint64_t)v11--);
    }
    paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"audiooutputbufsamples", (unsigned int *)(a1 + 312));
  }
  return 0;
}

uint64_t compstats_ClockReset(uint64_t a1)
{
  if (!a1) {
    return 2285903879;
  }
  uint64_t result = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t compstats_Log(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v15 = 0;
  uint64_t result = 2285903879;
  if (a1 && a3)
  {
    if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"pipeline", &v15) & 0x80000000) != 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v14 = v15;
    }
    if (*(_DWORD *)(a1 + 296))
    {
      compstats_LogReport(*(_DWORD *)(a1 + 284), *(_DWORD **)(a1 + 304), a3, a4, (uint64_t)" Latency", v14, *(unsigned int *)(a1 + 312), a5, 0, 0);
      uint64_t v14 = v15;
    }
    compstats_LogReport(*(_DWORD *)(a1 + 284), *(_DWORD **)(a1 + 288), a3, a4, 0, v14, *(unsigned int *)(a1 + 312), a5, a6, a7);
    return 0;
  }
  return result;
}

uint64_t compstats_LogReport(unsigned int a1, _DWORD *a2, uint64_t a3, const char *a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (a4) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = "";
  }
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"====================Compstats %s%s Report Start====================", (uint64_t)a6, a7, a8, (uint64_t)v16);
  if (a6 && *a6) {
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"Pipeline %s", v17, v18, v19, (uint64_t)a6);
  }
  if (a7) {
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"Audio output buffer samples %u", v17, v18, v19, a7);
  }
  int v20 = a9;
  int v21 = a10;
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"<CPU msec> / <real-time msec>, <%% CPU> / <%% real-time> (timer starts), <max CPU> / <max real-time>", v17, v18, v19, v53);
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v22, v23, v24, v54);
  int v28 = a2[8] + a2[7];
  if (a1 <= 1)
  {
    BOOL v39 = v28 == 0;
  }
  else
  {
    int v59 = v16;
    unsigned int v29 = 0;
    unsigned int v30 = 0;
    uint64_t v31 = a1 - 1;
    long long v32 = a2 + 23;
    uint64_t v33 = v31;
    int v34 = a2[9];
    int v35 = a2[8] + a2[7];
    do
    {
      v35 -= *(v32 - 2) + *(v32 - 1);
      v34 -= *v32;
      if (v30 <= *(v32 - 4) + *(v32 - 5)) {
        unsigned int v30 = *(v32 - 4) + *(v32 - 5);
      }
      if (v29 <= *(v32 - 3)) {
        unsigned int v29 = *(v32 - 3);
      }
      v32 += 14;
      --v33;
    }
    while (v33);
    BOOL v58 = v28 == 0;
    uint64_t v36 = a2 + 26;
    uint64_t v37 = (const char **)(a8 + 8);
    do
    {
      if (a8)
      {
        long long v38 = *v37;
        if (!*v37) {
          long long v38 = "";
        }
      }
      else
      {
        long long v38 = "";
      }
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f, %6.1f%% / %6.1f%% (%4u), %7.1f / %7.1f", v25, v26, v27, (uint64_t)v38);
      v36 += 14;
      ++v37;
      --v31;
    }
    while (v31);
    uint64_t v16 = v59;
    int v20 = a9;
    int v21 = a10;
    BOOL v39 = v58;
  }
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f, %6.1f%% / %6.1f%% (%4u)", v25, v26, v27, (uint64_t)"Other");
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v40, v41, v42, v55);
  log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.1f / %7.1f  %6s    %6s   %4s   %7.1f / %7.1f", v43, v44, v45, (uint64_t)"TOTAL");
  if (v21 | v20)
  {
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v46, v47, v48, v56);
    if (v20) {
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7u", v49, v50, v51, (uint64_t)"Input text length (bytes)");
    }
    if (v21)
    {
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7u", v49, v50, v51, (uint64_t)"Output duration (msec)");
      if (!v39) {
        log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.2f / %7.2f", v49, v50, v51, (uint64_t)"Real-time rate");
      }
    }
    if (v20) {
      log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"%-25s %7.2f / %7.2f", v49, v50, v51, (uint64_t)"Msec per byte of input");
    }
    log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"----------------------------------------------------------------------------------------", v49, v50, v51, v57);
  }
  return log_OutText(a3, (uint64_t)"CompStats", 2, 0, (uint64_t)"====================Compstats %s%s Report End====================", v46, v47, v48, (uint64_t)v16);
}

uint64_t compstats_ClockStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2693, 0, a5, a6, a7, a8, v10);
      return 2285903889;
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t compstats_ClockStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 2285903879;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      return 0;
    }
    else
    {
      log_OutPublic(0, (uint64_t)"CompStats", 2694, 0, a5, a6, a7, a8, v10);
      return 2285903889;
    }
  }
  return v8;
}

uint64_t critsec_cb_ClassOpen(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2168463367;
  if (a3)
  {
    unsigned int v11 = (void *)heap_Calloc(a1, 1, 32);
    *(void *)a5 = v11;
    if (v11)
    {
      uint64_t v5 = 0;
      void *v11 = a1;
      *(void *)(*(void *)a5 + 8) = a2;
      *(void *)(*(void *)a5 + 16) = a3;
      *(void *)(*(void *)a5 + 24) = a4;
    }
    else
    {
      return 2168463370;
    }
  }
  return v5;
}

uint64_t critsec_cb_ClassClose(uint64_t *a1)
{
  uint64_t result = 2168463367;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(void **)*a1, *a1);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t critsec_ObjOpen(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = 2168463367;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = (void *)heap_Calloc(a2, 1, 24);
    *a3 = (uint64_t)v7;
    if (v7)
    {
      void *v7 = a1;
      *(void *)(*a3 + 8) = a2;
      uint64_t v8 = **(uint64_t (***)(void, void, uint64_t))(a1 + 16);
      if (v8)
      {
        uint64_t v3 = v8(*(void *)(a1 + 24), *(void *)(a1 + 8), *a3 + 16);
        if ((v3 & 0x80000000) != 0)
        {
          heap_Free(a2, *a3);
          *a3 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2168463370;
    }
  }
  return v3;
}

uint64_t critsec_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2168463367;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8);
  if (v2)
  {
    uint64_t v3 = v2(*(void *)(a1 + 16));
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  heap_Free(*(void **)(a1 + 8), a1);
  return v3;
}

uint64_t critsec_Enter(void *a1)
{
  if (!a1) {
    return 2168463367;
  }
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 16);
  if (v1) {
    return v1(a1[2]);
  }
  else {
    return 0;
  }
}

uint64_t critsec_Leave(void *a1)
{
  if (!a1) {
    return 2168463367;
  }
  unint64_t v1 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 24);
  if (v1) {
    return v1(a1[2]);
  }
  else {
    return 0;
  }
}

uint64_t brk_ClassOpen(_WORD *a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v14);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v13 = v14;
    memcpy((void *)(v14 + 80), a3, 0x138uLL);
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 96))(a1, a2, a4, a5, a6);
  }
  return result;
}

uint64_t brk_ClassClose(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 16) + 104))();
  }
  return result;
}

uint64_t brk_ClassUpdate(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 352))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ObjOpen(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 120))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ObjClose(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 128))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_SetLog(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 144))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_SetRsrc(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 384))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ObjGetClass(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 136))();
  }
  if (a2) {
    *a2 = 0;
  }
  return 2169528327;
}

uint64_t brk_InterfaceQuery(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 264))();
}

uint64_t brk_InterfaceQueryEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 && a2 && a6) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 272))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_InterfaceRelease(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 280))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagQuery(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 152))();
}

uint64_t brk_TagQueryEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 && a5 && a3 && a2 && *(void *)a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 160))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagRelease(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 168))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentTableIteratorOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a3 && a2 && *(void *)a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 240))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentTableIteratorNext(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentTableIteratorClose(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataReplace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 288))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataOpen(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 296))();
}

uint64_t brk_DataOpenEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && a4) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 304))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataClose(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 312))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a1 && a5) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 320))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataMapEx(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a1 && a4 && a5) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 328))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataUnmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 336))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataMapDeRefCnt(_WORD *a1, int a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v11);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v10);
    if ((result & 0x80000000) == 0)
    {
      ObjcForThisApunint64_t i = getObjcForThisApi(v11, v10);
      return objc_ReleaseObject(ObjcForThisApi, a5);
    }
  }
  return result;
}

uint64_t getObjcForThisApi(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  __s1 = 0;
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"clcpppipelinemode", &__s1) & 0x80000000) != 0
    || !__s1
    || !*__s1
    || !cstdlib_strcmp(__s1, "internal"))
  {
    uint64_t v3 = a2;
  }
  return *(void *)(v3 + 48);
}

uint64_t brk_DataMapRefCnt(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, void *a8)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  cstdlib_memset(&v19, 0, 0x28uLL);
  uint64_t result = InitRsrcFunction(a1, a2, &v24);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(a3, a4, &v23);
    if ((result & 0x80000000) == 0)
    {
      *(void *)&long long v19 = a1;
      *((void *)&v19 + 1) = a2;
      *(void *)&long long v20 = a3;
      *((void *)&v20 + 1) = a4;
      unint64_t v21 = __PAIR64__(a7, a6);
      ObjcForThisApunint64_t i = getObjcForThisApi(v24, v23);
      uint64_t result = objc_GetAddRefCountedObject(ObjcForThisApi, a5, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))brkDataMap_ObjcLoad, (void (*)(void, void, _OWORD *))brkDataMap_ObjcClose, (uint64_t)&v19, &v22);
      if ((result & 0x80000000) != 0) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(void *)(v22 + 32);
      }
      *a8 = v18;
    }
  }
  return result;
}

uint64_t brkDataMap_ObjcLoad(_WORD *a1, int a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t inited = InitRsrcFunction(a1, a2, &v42);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = InitRsrcFunction(*(_WORD **)(a5 + 16), *(void *)(a5 + 24), &v43);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v9 = 2169528327;
  cstdlib_memcpy(v17, v42, 0x1A0uLL);
  uint64_t v10 = v42;
  long long v18 = *(_OWORD *)(v43 + 32);
  uint64_t v11 = heap_Calloc(*((void **)v42 + 1), 1, 272);
  *(void *)(a4 + 32) = v11;
  if (!v11) {
    return 2169528330;
  }
  if (a3)
  {
    uint64_t v12 = v10[3];
    if (v12)
    {
      uint64_t inited = (*(uint64_t (**)(void, const char *, uint64_t, uint64_t))(*(void *)(*(void *)v12 + 16)
                                                                                 + 304))(v10[3], a3, 1, v11 + 256);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v13 = v10[3];
        uint64_t v14 = *(void *)(a4 + 32);
        if (v13)
        {
          uint64_t v15 = *(void *)(v14 + 256);
          if (v15)
          {
            uint64_t v9 = (*(uint64_t (**)(void, uint64_t, void, void, uint64_t))(*(void *)(*(void *)v13 + 16)
                                                                                     + 320))(v10[3], v15, *(unsigned int *)(a5 + 32), *(unsigned int *)(a5 + 36), v14 + 264);
            uint64_t v14 = *(void *)(a4 + 32);
          }
        }
        cstdlib_strcpy((char *)v14, a3);
        return v9;
      }
      return inited;
    }
  }
  return v9;
}

uint64_t brkDataMap_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v13);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v5 = 2169528327;
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(v13 + 24);
  if (v7) {
    BOOL v8 = *(void *)(v6 + 256) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8 && *(void *)(v6 + 264) != 0)
  {
    uint64_t inited = (*(uint64_t (**)(void))(*(void *)(*(void *)v7 + 16) + 336))();
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v10 = *(void *)(v13 + 24);
      if (v10) {
        BOOL v11 = *(void *)(v6 + 256) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(*(void *)v10 + 16) + 312))();
        if ((v5 & 0x80000000) == 0) {
          heap_Free(*(void **)(v13 + 8), v6);
        }
      }
      return v5;
    }
    return inited;
  }
  return v5;
}

uint64_t brk_DataFreeze(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 344))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_DataGetSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a3 && a1 && a4) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 360))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagIteratorOpen(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, void *a5)
{
  if (!a1 || !a2 || !a3 || !*a2 || !a5 || !*a3) {
    return 2169528327;
  }
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  *a5 = 0;
  return (*(uint64_t (**)(void))(v5 + 200))();
}

uint64_t brk_TagIteratorNext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_TagIteratorClose(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentPathQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a3 && a2 && *(void *)a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 224))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_ComponentPathRelease(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2169528327;
  if (a1 && a2)
  {
    (*(void (**)(void))(*(void *)(*(void *)a1 + 16) + 232))();
    return 0;
  }
  return v2;
}

uint64_t brk_RegisterCupAddon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2 && *(void *)a1 && (uint64_t v4 = *(void *)(*(void *)a1 + 16)) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 368))(a2, a3, a4, a1);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_UnregisterCupAddon(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2 && (v2 = *a1) != 0 && (uint64_t v3 = *(void *)(v2 + 16)) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 376))(a2, v2);
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_AddSystemInfo(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 176))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_GetSystemInfo(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 184))();
  }
  else {
    return 2169528327;
  }
}

uint64_t brk_FreeSystemInfo(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 192))();
  }
  else {
    return 2169528327;
  }
}

uint64_t filespi_fopen(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    if (**(void **)(a1 + 16))
    {
      BOOL v11 = (void *)heap_Calloc(a2, 1, 24);
      *a5 = (uint64_t)v11;
      if (v11)
      {
        void *v11 = a1;
        *(void *)(*a5 + 8) = a2;
        uint64_t v5 = (**(uint64_t (***)(void, void, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(void *)(a1 + 24), *(void *)(a1 + 8), a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v5;
}

uint64_t filespi_fclose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8))(*(void *)(a1 + 16));
  if ((v2 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), a1);
  }
  return v2;
}

uint64_t filespi_fread(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result = 2153783303;
  if (a3 && a2 && a1 && a4)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)a4 + 16) + 16);
    if (v6) {
      return v6(a1);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t filespi_fseek(void *a1)
{
  uint64_t result = 2153783297;
  if (!a1) {
    return 2153783303;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 24);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t filespi_ftell(void *a1)
{
  if (a1 && (unint64_t v1 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 40)) != 0) {
    return v1(a1[2]);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t filespi_GetFileSize(void *a1)
{
  if (a1 && (unint64_t v1 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 32)) != 0) {
    return v1(a1[2]);
  }
  else {
    return 2153783296;
  }
}

uint64_t filespi_fwrite(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result = 2153783303;
  if (a3 && a2 && a1 && a4)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)a4 + 16) + 48);
    if (v6) {
      return v6(a1);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t filespi_fflush(void *a1)
{
  uint64_t result = 2153783297;
  if (!a1) {
    return 2153783303;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 56);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t filespi_rename(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 2153783303;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v6 = *(uint64_t (**)(void, void))(a1[2] + 64);
    if (v6) {
      return v6(a1[3], a1[1]);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t filespi_remove(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2153783303;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(uint64_t (**)(void, void))(a1[2] + 72);
    if (v5) {
      return v5(a1[3], a1[1]);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t heap_cb_Open(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 2159026183;
  if (a1)
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, 1, 16);
    *(void *)a3 = v7;
    if (v7)
    {
      uint64_t v3 = 0;
      void *v7 = a1;
      *(void *)(*(void *)a3 + 8) = a2;
    }
    else
    {
      return 2159026186;
    }
  }
  return v3;
}

uint64_t heap_cb_Close(void *a1)
{
  if (!a1) {
    return 2159026183;
  }
  (*(void (**)(void, void *))(*a1 + 24))(a1[1], a1);
  return 0;
}

uint64_t heap_Alloc(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (**(uint64_t (***)(void))a1)(*(void *)(a1 + 8));
  }
  else {
    return 0;
  }
}

uint64_t heap_Calloc(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return (*(uint64_t (**)(void))(*a1 + 8))(a1[1]);
  }
  else {
    return 0;
  }
}

uint64_t heap_Realloc(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a3) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(v3 + 16))(a1[1]);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))v3)(a1[1], a3);
  }
}

void *heap_Free(void *result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      return (void *)(*(uint64_t (**)(void))(*result + 24))(result[1]);
    }
  }
  return result;
}

uint64_t heap_SetLog(void *a1)
{
  uint64_t result = 2159026177;
  if (!a1) {
    return 2159026183;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*a1 + 32);
  if (v3) {
    return v3(a1[1]);
  }
  return result;
}

uint64_t heap_SetSizeTracking(void *a1)
{
  uint64_t result = 2159026177;
  if (!a1) {
    return 2159026183;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*a1 + 40);
  if (v3) {
    return v3(a1[1]);
  }
  return result;
}

uint64_t heap_GetSize(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2159026183;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*a1 + 48);
    if (v5) {
      return v5(a1[1]);
    }
    else {
      return 2159026177;
    }
  }
  return result;
}

uint64_t thread_cb_ClassOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 2153783303;
  if (a3 && a4)
  {
    uint64_t v13 = (void *)heap_Alloc(a1, 40);
    *(void *)a6 = v13;
    if (v13)
    {
      uint64_t v6 = 0;
      *uint64_t v13 = a1;
      *(void *)(*(void *)a6 + 8) = a2;
      *(void *)(*(void *)a6 + 16) = a3;
      *(void *)(*(void *)a6 + 24) = a4;
      *(void *)(*(void *)a6 + 32) = a5;
    }
    else
    {
      return 2153783306;
    }
  }
  return v6;
}

uint64_t thread_cb_ClassClose(uint64_t *a1)
{
  uint64_t result = 2153783303;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(void **)*a1, *a1);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t thread_ObjOpen(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = 2153783303;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = (void *)heap_Alloc((uint64_t)a2, 24);
    *a3 = (uint64_t)v7;
    if (v7)
    {
      void *v7 = a1;
      *(void *)(*a3 + 8) = a2;
      BOOL v8 = **(uint64_t (***)(void, void, uint64_t))(a1 + 16);
      if (v8)
      {
        uint64_t v3 = v8(*(void *)(a1 + 32), *(void *)(a1 + 8), *a3 + 16);
        if ((v3 & 0x80000000) != 0)
        {
          heap_Free(a2, *a3);
          *a3 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2153783306;
    }
  }
  return v3;
}

uint64_t thread_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8);
  if (v2)
  {
    uint64_t v3 = v2(*(void *)(a1 + 16));
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  heap_Free(*(void **)(a1 + 8), a1);
  return v3;
}

uint64_t thread_Start(void *a1)
{
  uint64_t result = 2153783304;
  if (!a1) {
    return 2153783314;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 16);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t thread_Join(void *a1)
{
  uint64_t result = 2153783304;
  if (!a1) {
    return 2153783314;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 24);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t thread_SleepMs(void *a1)
{
  uint64_t result = 2153783304;
  if (!a1) {
    return 2153783314;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 32);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t thread_GetCallingId(void *a1)
{
  uint64_t result = 2153783304;
  if (!a1) {
    return 2153783314;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 40);
  if (v3) {
    return v3(a1[2]);
  }
  return result;
}

uint64_t semaphore_ObjectOpen(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    BOOL v11 = (void *)heap_Alloc((uint64_t)a2, 24);
    *a5 = (uint64_t)v11;
    if (v11)
    {
      void *v11 = a1;
      *(void *)(*a5 + 8) = a2;
      uint64_t v12 = **(uint64_t (***)(void, void, uint64_t, uint64_t, uint64_t))(a1 + 24);
      if (v12)
      {
        uint64_t v5 = v12(*(void *)(a1 + 32), *(void *)(a1 + 8), a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2153783306;
    }
  }
  return v5;
}

uint64_t semaphore_ObjectClose(uint64_t a1)
{
  uint64_t v1 = 2153783303;
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 24) + 8);
    if (v3)
    {
      uint64_t v1 = v3(*(void *)(a1 + 16));
      if ((v1 & 0x80000000) == 0) {
        heap_Free(*(void **)(a1 + 8), a1);
      }
    }
    else
    {
      return 2153783304;
    }
  }
  return v1;
}

uint64_t semaphore_Acquire(void *a1)
{
  uint64_t result = 2153783303;
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 24) + 16);
    if (v3) {
      return v3(a1[2]);
    }
    else {
      return 2153783304;
    }
  }
  return result;
}

uint64_t semaphore_Release(void *a1)
{
  uint64_t result = 2153783303;
  if (a1)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 24) + 24);
    if (v3) {
      return v3(a1[2]);
    }
    else {
      return 2153783304;
    }
  }
  return result;
}

double MD5Init(void *a1)
{
  cstdlib_memset(a1, 0, 0x58uLL);
  a1[2] = 0;
  double result = -3.59869635e230;
  *(_OWORD *)a1 = xmmword_2206DACE0;
  return result;
}

void *MD5Update(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v6 = ((unint64_t)*(unsigned int *)(a1 + 16) >> 3) & 0x3F;
  *(void *)(a1 + 16) += __PAIR64__(a3 >> 29, 8 * (int)a3);
  unint64_t v7 = 64 - v6;
  if (64 - v6 <= a3)
  {
    cstdlib_memcpy((void *)(a1 + 24 + v6), __src, 64 - v6);
    MD5Transform((int *)a1, (const char *)(a1 + 24));
    for (unint64_t i = v6 ^ 0x7F; i < a3; unint64_t i = v9 + 127)
    {
      unint64_t v9 = v7;
      MD5Transform((int *)a1, &__src[v7]);
      v7 += 64;
    }
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v7 = 0;
  }

  return cstdlib_memcpy((void *)(a1 + v6 + 24), &__src[v7], a3 - v7);
}

void *MD5Transform(int *a1, const char *a2)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  int8x16x4_t v96 = vld4q_s8(a2);
  int v3 = *a1;
  int v2 = a1[1];
  int v5 = a1[2];
  int v4 = a1[3];
  uint16x8_t v6 = vmovl_u8(*(uint8x8_t *)v96.val[0].i8);
  int8x16_t v7 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v6.i8);
  uint16x8_t v8 = vmovl_high_u8((uint8x16_t)v96.val[0]);
  int8x16_t v9 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v8.i8);
  uint16x8_t v10 = vmovl_high_u8((uint8x16_t)v96.val[1]);
  uint16x8_t v11 = vmovl_u8(*(uint8x8_t *)v96.val[1].i8);
  int8x16_t v12 = vorrq_s8((int8x16_t)vshll_high_n_u16(v10, 8uLL), (int8x16_t)vmovl_high_u16(v8));
  int8x16_t v13 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v10.i8, 8uLL), v9);
  int8x16_t v14 = vorrq_s8((int8x16_t)vshll_high_n_u16(v11, 8uLL), (int8x16_t)vmovl_high_u16(v6));
  int8x16_t v15 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v11.i8, 8uLL), v7);
  _Q16 = vmovl_u8(*(uint8x8_t *)v96.val[2].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v96.val[2]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  int8x16_t v24 = vorrq_s8(v15, (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL));
  uint16x8_t v25 = vmovl_high_u8((uint8x16_t)v96.val[3]);
  v96.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v96.val[3].i8);
  int8x16_t __b = vorrq_s8(v24, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v96.val[0].i8), 0x18uLL));
  int8x16_t v92 = vorrq_s8(vorrq_s8(v14, _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v96.val[0]), 0x18uLL));
  int8x16_t v93 = vorrq_s8(vorrq_s8(v13, (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v25.i8), 0x18uLL));
  int8x16_t v94 = vorrq_s8(vorrq_s8(v12, _Q18), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v25), 0x18uLL));
  HIDWORD(v26) = v3 + (v5 & v2) + (v4 & ~v2) + __b.i32[0] - 680876936;
  LODWORD(v26) = HIDWORD(v26);
  int v27 = (v26 >> 25) + v2;
  HIDWORD(v26) = v4 + __b.i32[1] + (v5 & ~v27) + (v27 & v2) - 389564586;
  LODWORD(v26) = HIDWORD(v26);
  int v28 = (v26 >> 20) + v27;
  HIDWORD(v26) = v5 + __b.i32[2] + (v2 & ~v28) + (v28 & v27) + 606105819;
  LODWORD(v26) = HIDWORD(v26);
  int v29 = (v26 >> 15) + v28;
  HIDWORD(v26) = v2 + __b.i32[3] + (v27 & ~v29) + (v29 & v28) - 1044525330;
  LODWORD(v26) = HIDWORD(v26);
  int v30 = (v26 >> 10) + v29;
  HIDWORD(v26) = v92.i32[0] + v27 + (v28 & ~v30) + (v30 & v29) - 176418897;
  LODWORD(v26) = HIDWORD(v26);
  int v31 = (v26 >> 25) + v30;
  HIDWORD(v26) = v92.i32[1] + v28 + (v29 & ~v31) + (v31 & v30) + 1200080426;
  LODWORD(v26) = HIDWORD(v26);
  int v32 = (v26 >> 20) + v31;
  HIDWORD(v26) = v92.i32[2] + v29 + (v30 & ~v32) + (v32 & v31) - 1473231341;
  LODWORD(v26) = HIDWORD(v26);
  int v33 = (v26 >> 15) + v32;
  HIDWORD(v26) = v92.i32[3] + v30 + (v31 & ~v33) + (v33 & v32) - 45705983;
  LODWORD(v26) = HIDWORD(v26);
  int v34 = (v26 >> 10) + v33;
  HIDWORD(v26) = v93.i32[0] + v31 + (v32 & ~v34) + (v34 & v33) + 1770035416;
  LODWORD(v26) = HIDWORD(v26);
  int v35 = (v26 >> 25) + v34;
  HIDWORD(v26) = v93.i32[1] + v32 + (v33 & ~v35) + (v35 & v34) - 1958414417;
  LODWORD(v26) = HIDWORD(v26);
  int v36 = (v26 >> 20) + v35;
  HIDWORD(v26) = v93.i32[2] + v33 + (v34 & ~v36) + (v36 & v35) - 42063;
  LODWORD(v26) = HIDWORD(v26);
  int v37 = (v26 >> 15) + v36;
  HIDWORD(v26) = v93.i32[3] + v34 + (v35 & ~v37) + (v37 & v36) - 1990404162;
  LODWORD(v26) = HIDWORD(v26);
  int v38 = (v26 >> 10) + v37;
  HIDWORD(v26) = v94.i32[0] + v35 + (v36 & ~v38) + (v38 & v37) + 1804603682;
  LODWORD(v26) = HIDWORD(v26);
  int v39 = (v26 >> 25) + v38;
  HIDWORD(v26) = v94.i32[1] + v36 + (v37 & ~v39) + (v39 & v38) - 40341101;
  LODWORD(v26) = HIDWORD(v26);
  int v40 = (v26 >> 20) + v39;
  HIDWORD(v26) = v94.i32[2] + v37 + (v38 & ~v40) + (v40 & v39) - 1502002290;
  LODWORD(v26) = HIDWORD(v26);
  int v41 = (v26 >> 15) + v40;
  HIDWORD(v26) = v94.i32[3] + v38 + (v39 & ~v41) + (v41 & v40) + 1236535329;
  LODWORD(v26) = HIDWORD(v26);
  int v42 = (v26 >> 10) + v41;
  HIDWORD(v26) = __b.i32[1] + v39 + (v41 & ~v40) - 165796510 + (v42 & v40);
  LODWORD(v26) = HIDWORD(v26);
  int v43 = (v26 >> 27) + v42;
  HIDWORD(v26) = v92.i32[2] + v40 + (v42 & ~v41) - 1069501632 + (v43 & v41);
  LODWORD(v26) = HIDWORD(v26);
  int v44 = (v26 >> 23) + v43;
  HIDWORD(v26) = v93.i32[3] + v41 + (v43 & ~v42) + 643717713 + (v44 & v42);
  LODWORD(v26) = HIDWORD(v26);
  int v45 = (v26 >> 18) + v44;
  HIDWORD(v26) = __b.i32[0] + v42 + (v44 & ~v43) - 373897302 + (v45 & v43);
  LODWORD(v26) = HIDWORD(v26);
  int v46 = (v26 >> 12) + v45;
  HIDWORD(v26) = v92.i32[1] + v43 + (v45 & ~v44) - 701558691 + (v46 & v44);
  LODWORD(v26) = HIDWORD(v26);
  int v47 = (v26 >> 27) + v46;
  HIDWORD(v26) = v93.i32[2] + v44 + (v46 & ~v45) + 38016083 + (v47 & v45);
  LODWORD(v26) = HIDWORD(v26);
  int v48 = (v26 >> 23) + v47;
  HIDWORD(v26) = v94.i32[3] + v45 + (v47 & ~v46) - 660478335 + (v48 & v46);
  LODWORD(v26) = HIDWORD(v26);
  int v49 = (v26 >> 18) + v48;
  HIDWORD(v26) = v92.i32[0] + v46 + (v48 & ~v47) - 405537848 + (v49 & v47);
  LODWORD(v26) = HIDWORD(v26);
  int v50 = (v26 >> 12) + v49;
  HIDWORD(v26) = v93.i32[1] + v47 + (v49 & ~v48) + 568446438 + (v50 & v48);
  LODWORD(v26) = HIDWORD(v26);
  int v51 = (v26 >> 27) + v50;
  HIDWORD(v26) = v94.i32[2] + v48 + (v50 & ~v49) - 1019803690 + (v51 & v49);
  LODWORD(v26) = HIDWORD(v26);
  int v52 = (v26 >> 23) + v51;
  HIDWORD(v26) = __b.i32[3] + v49 + (v51 & ~v50) - 187363961 + (v52 & v50);
  LODWORD(v26) = HIDWORD(v26);
  int v53 = (v26 >> 18) + v52;
  HIDWORD(v26) = v93.i32[0] + v50 + (v52 & ~v51) + 1163531501 + (v53 & v51);
  LODWORD(v26) = HIDWORD(v26);
  int v54 = (v26 >> 12) + v53;
  HIDWORD(v26) = v94.i32[1] + v51 + (v53 & ~v52) - 1444681467 + (v54 & v52);
  LODWORD(v26) = HIDWORD(v26);
  int v55 = (v26 >> 27) + v54;
  HIDWORD(v26) = __b.i32[2] + v52 + (v54 & ~v53) - 51403784 + (v55 & v53);
  LODWORD(v26) = HIDWORD(v26);
  int v56 = (v26 >> 23) + v55;
  HIDWORD(v26) = v92.i32[3] + v53 + (v55 & ~v54) + 1735328473 + (v56 & v54);
  LODWORD(v26) = HIDWORD(v26);
  int v57 = (v26 >> 18) + v56;
  HIDWORD(v26) = v94.i32[0] + v54 + (v56 & ~v55) - 1926607734 + (v57 & v55);
  LODWORD(v26) = HIDWORD(v26);
  int v58 = (v26 >> 12) + v57;
  HIDWORD(v26) = v92.i32[1] + v55 - 378558 + (v58 ^ v57 ^ v56);
  LODWORD(v26) = HIDWORD(v26);
  int v59 = (v26 >> 28) + v58;
  HIDWORD(v26) = v93.i32[0] + v56 - 2022574463 + (v58 ^ v57 ^ v59);
  LODWORD(v26) = HIDWORD(v26);
  int v60 = (v26 >> 21) + v59;
  HIDWORD(v26) = v93.i32[3] + v57 + 1839030562 + (v59 ^ v58 ^ v60);
  LODWORD(v26) = HIDWORD(v26);
  int v61 = (v26 >> 16) + v60;
  HIDWORD(v26) = v94.i32[2] + v58 - 35309556 + (v60 ^ v59 ^ v61);
  LODWORD(v26) = HIDWORD(v26);
  int v62 = (v26 >> 9) + v61;
  HIDWORD(v26) = __b.i32[1] + v59 - 1530992060 + (v61 ^ v60 ^ v62);
  LODWORD(v26) = HIDWORD(v26);
  int v63 = (v26 >> 28) + v62;
  HIDWORD(v26) = v92.i32[0] + v60 + 1272893353 + (v62 ^ v61 ^ v63);
  LODWORD(v26) = HIDWORD(v26);
  int v64 = (v26 >> 21) + v63;
  HIDWORD(v26) = v92.i32[3] + v61 - 155497632 + (v63 ^ v62 ^ v64);
  LODWORD(v26) = HIDWORD(v26);
  int v65 = (v26 >> 16) + v64;
  HIDWORD(v26) = v93.i32[2] + v62 - 1094730640 + (v64 ^ v63 ^ v65);
  LODWORD(v26) = HIDWORD(v26);
  int v66 = (v26 >> 9) + v65;
  HIDWORD(v26) = v94.i32[1] + v63 + 681279174 + (v65 ^ v64 ^ v66);
  LODWORD(v26) = HIDWORD(v26);
  int v67 = (v26 >> 28) + v66;
  HIDWORD(v26) = __b.i32[0] + v64 - 358537222 + (v66 ^ v65 ^ v67);
  LODWORD(v26) = HIDWORD(v26);
  int v68 = (v26 >> 21) + v67;
  HIDWORD(v26) = __b.i32[3] + v65 - 722521979 + (v67 ^ v66 ^ v68);
  LODWORD(v26) = HIDWORD(v26);
  int v69 = (v26 >> 16) + v68;
  HIDWORD(v26) = v92.i32[2] + v66 + 76029189 + (v68 ^ v67 ^ v69);
  LODWORD(v26) = HIDWORD(v26);
  int v70 = (v26 >> 9) + v69;
  HIDWORD(v26) = v93.i32[1] + v67 - 640364487 + (v69 ^ v68 ^ v70);
  LODWORD(v26) = HIDWORD(v26);
  int v71 = (v26 >> 28) + v70;
  HIDWORD(v26) = v94.i32[0] + v68 - 421815835 + (v70 ^ v69 ^ v71);
  LODWORD(v26) = HIDWORD(v26);
  int v72 = (v26 >> 21) + v71;
  HIDWORD(v26) = v94.i32[3] + v69 + 530742520 + (v71 ^ v70 ^ v72);
  LODWORD(v26) = HIDWORD(v26);
  int v73 = (v26 >> 16) + v72;
  HIDWORD(v26) = __b.i32[2] + v70 - 995338651 + (v72 ^ v71 ^ v73);
  LODWORD(v26) = HIDWORD(v26);
  int v74 = (v26 >> 9) + v73;
  HIDWORD(v26) = __b.i32[0] + v71 - 198630844 + ((v74 | ~v72) ^ v73);
  LODWORD(v26) = HIDWORD(v26);
  int v75 = (v26 >> 26) + v74;
  HIDWORD(v26) = v92.i32[3] + v72 + 1126891415 + ((v75 | ~v73) ^ v74);
  LODWORD(v26) = HIDWORD(v26);
  int v76 = (v26 >> 22) + v75;
  HIDWORD(v26) = v94.i32[2] + v73 - 1416354905 + ((v76 | ~v74) ^ v75);
  LODWORD(v26) = HIDWORD(v26);
  int v77 = (v26 >> 17) + v76;
  HIDWORD(v26) = v92.i32[1] + v74 - 57434055 + ((v77 | ~v75) ^ v76);
  LODWORD(v26) = HIDWORD(v26);
  int v78 = (v26 >> 11) + v77;
  HIDWORD(v26) = v94.i32[0] + v75 + 1700485571 + ((v78 | ~v76) ^ v77);
  LODWORD(v26) = HIDWORD(v26);
  int v79 = (v26 >> 26) + v78;
  HIDWORD(v26) = __b.i32[3] + v76 - 1894986606 + ((v79 | ~v77) ^ v78);
  LODWORD(v26) = HIDWORD(v26);
  int v80 = (v26 >> 22) + v79;
  HIDWORD(v26) = v93.i32[2] + v77 - 1051523 + ((v80 | ~v78) ^ v79);
  LODWORD(v26) = HIDWORD(v26);
  int v81 = (v26 >> 17) + v80;
  HIDWORD(v26) = __b.i32[1] + v78 - 2054922799 + ((v81 | ~v79) ^ v80);
  LODWORD(v26) = HIDWORD(v26);
  int v82 = (v26 >> 11) + v81;
  HIDWORD(v26) = v93.i32[0] + v79 + 1873313359 + ((v82 | ~v80) ^ v81);
  LODWORD(v26) = HIDWORD(v26);
  int v83 = (v26 >> 26) + v82;
  HIDWORD(v26) = v94.i32[3] + v80 - 30611744 + ((v83 | ~v81) ^ v82);
  LODWORD(v26) = HIDWORD(v26);
  int v84 = (v26 >> 22) + v83;
  HIDWORD(v26) = v92.i32[2] + v81 - 1560198380 + ((v84 | ~v82) ^ v83);
  LODWORD(v26) = HIDWORD(v26);
  int v85 = (v26 >> 17) + v84;
  HIDWORD(v26) = v94.i32[1] + v82 + 1309151649 + ((v85 | ~v83) ^ v84);
  LODWORD(v26) = HIDWORD(v26);
  int v86 = (v26 >> 11) + v85;
  HIDWORD(v26) = v92.i32[0] + v83 - 145523070 + ((v86 | ~v84) ^ v85);
  LODWORD(v26) = HIDWORD(v26);
  int v87 = (v26 >> 26) + v86;
  HIDWORD(v26) = v93.i32[3] + v84 - 1120210379 + ((v87 | ~v85) ^ v86);
  LODWORD(v26) = HIDWORD(v26);
  int v88 = (v26 >> 22) + v87;
  HIDWORD(v26) = __b.i32[2] + v85 + 718787259 + ((v88 | ~v86) ^ v87);
  LODWORD(v26) = HIDWORD(v26);
  int v89 = (v26 >> 17) + v88;
  HIDWORD(v26) = v93.i32[1] + v86 - 343485551 + ((v89 | ~v87) ^ v88);
  LODWORD(v26) = HIDWORD(v26);
  *a1 = v87 + v3;
  a1[1] = v89 + v2 + (v26 >> 11);
  a1[2] = v89 + v5;
  a1[3] = v88 + v4;
  return cstdlib_memset(&__b, 0, 0x40uLL);
}

void *MD5Final(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  do
  {
    *(_DWORD *)&v10[v4 * 4] = a2[v4 + 4];
    ++v4;
  }
  while (v4 != 2);
  unint64_t v5 = ((unint64_t)a2[4] >> 3) & 0x3F;
  uint64_t v6 = 120;
  if (v5 < 0x38) {
    uint64_t v6 = 56;
  }
  MD5Update((uint64_t)a2, PADDING, v6 - v5);
  MD5Update((uint64_t)a2, v10, 8uLL);
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v8 = a1 + i * 4;
    *(_WORD *)uint64_t v8 = a2[i];
    *(unsigned char *)(v8 + 2) = HIWORD(a2[i]);
    *(unsigned char *)(v8 + 3) = HIBYTE(a2[i]);
  }
  return cstdlib_memset(a2, 0, 0x58uLL);
}

uint64_t cache_ClassOpen(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 2153783303;
  if (a5 && !*a5)
  {
    uint64_t v11 = (void *)heap_Calloc(a1, 1, 32);
    if (v11)
    {
      uint64_t v5 = 0;
      v11[2] = a3;
      v11[3] = a4;
      void *v11 = a1;
      v11[1] = a2;
    }
    else
    {
      uint64_t v5 = 2153783306;
    }
    *a5 = v11;
  }
  return v5;
}

uint64_t cache_ClassClose(void **a1)
{
  if (!a1) {
    return 2153783303;
  }
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t cache_ObjOpen(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a5 && !*a5)
  {
    uint64_t v11 = *(void **)a1;
    uint64_t v12 = heap_Calloc(*(void **)a1, 1, 72);
    uint64_t v13 = v12;
    if (v12)
    {
      *(void *)uint64_t v12 = a1;
      *(void *)(v12 + 8) = v11;
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a1 + 16);
      int8x16_t v14 = (uint64_t *)(v12 + 16);
      uint64_t v15 = critsec_ObjOpen(*(void *)(a1 + 8), v11, (uint64_t *)(v12 + 16));
      if ((v15 & 0x80000000) == 0)
      {
        uint64_t v16 = v15;
        if (!a2 || !a3 || !a4) {
          goto LABEL_28;
        }
        uint64_t v17 = (_DWORD *)heap_Calloc(v11, 56, 1);
        *(void *)(v13 + 64) = v17;
        if (v17)
        {
          long long v18 = v17;
          v17[10] = a2;
          v17[11] = a3;
          if (a4 >= a3) {
            unsigned int v19 = a3;
          }
          else {
            unsigned int v19 = a4;
          }
          v17[12] = v19;
          if (a2 <= 1)
          {
            a2 = 2;
            v17[10] = 2;
          }
          uint64_t v20 = heap_Alloc((uint64_t)v11, a2 * (unint64_t)a3);
          *((void *)v18 + 4) = v20;
          if (v20)
          {
            uint64_t v21 = heap_Alloc((uint64_t)v11, 40 * v18[10]);
            *((void *)v18 + 3) = v21;
            if (v21)
            {
              long long v22 = (void *)(v21 + 40);
              *(void *)uint64_t v21 = 0;
              *(void *)(v21 + 8) = v21 + 40;
              *(_DWORD *)(v21 + 16) = -1;
              uint64_t v23 = *((void *)v18 + 4);
              *(void *)(v21 + 24) = v23;
              *(void *)(v21 + 32) = 0;
              int v24 = v18[11];
              uint64_t v25 = (v18[10] - 1);
              if (v25 < 2)
              {
                int v30 = (void *)v21;
              }
              else
              {
                uint64_t v26 = v25 - 1;
                unsigned int v27 = v18[11];
                do
                {
                  int v28 = v22;
                  int v29 = v22 - 5;
                  v22 += 5;
                  *int v28 = v29;
                  v28[1] = v22;
                  *((_DWORD *)v28 + 4) = -1;
                  v28[3] = v23 + v27;
                  v28[4] = 0;
                  v27 += v24;
                  --v26;
                }
                while (v26);
                int v30 = v22 - 5;
              }
              uint64_t v16 = 0;
              void *v22 = v30;
              v30[6] = 0;
              *((_DWORD *)v30 + 14) = -1;
              v30[8] = v23 + (v24 * v25);
              v30[9] = 0;
              *((void *)v18 + 1) = v21;
              *((void *)v18 + 2) = v21 + 40 * v25;
              goto LABEL_28;
            }
            heap_Free(v11, *((void *)v18 + 4));
          }
        }
      }
      if (*v14) {
        critsec_ObjClose(*v14);
      }
      uint64_t v31 = *(void *)(v13 + 64);
      if (v31) {
        heap_Free(v11, v31);
      }
      heap_Free(v11, v13);
      uint64_t v13 = 0;
    }
    uint64_t v16 = 2153783306;
LABEL_28:
    *a5 = v13;
    return v16;
  }
  return v5;
}

uint64_t cache_ObjClose(void *a1)
{
  if (!a1) {
    return 2153783303;
  }
  critsec_Enter((void *)a1[2]);
  int v2 = (void *)a1[1];
  uint64_t v3 = a1[8];
  if (v3)
  {
    uint64_t v4 = *(void **)v3;
    heap_Free((void *)a1[1], *(void *)(v3 + 32));
    heap_Free(v2, *(void *)(v3 + 24));
    if (v4)
    {
      do
      {
        heap_Free(v2, v4[1]);
        uint64_t v5 = (void *)*v4;
        heap_Free(v2, (uint64_t)v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(_DWORD *)(v3 + 48) = 0;
    uint64_t v6 = a1[8];
  }
  else
  {
    uint64_t v6 = 0;
  }
  heap_Free(v2, v6);
  a1[8] = 0;
  critsec_Leave((void *)a1[2]);
  uint64_t v8 = critsec_ObjClose(a1[2]);
  heap_Free(v2, (uint64_t)a1);
  return v8;
}

uint64_t cache_ObjSetLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 2153783303;
  }
  if (a3 || !*(void *)(a1 + 48))
  {
    if (a3)
    {
      BOOL v7 = log_GetLogLevel(a3) > 0x63;
      *(_DWORD *)(a1 + 56) = v7;
      *(_DWORD *)(a1 + 60) = v7;
    }
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    cstdlib_memset(v8, 0, 0x30uLL);
  }
  uint64_t result = 0;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  return result;
}

uint64_t cache_datastream_Open(int8x16_t *a1, uint64_t a2, char *a3, unsigned char *a4, uint64_t *a5)
{
  uint64_t v5 = 2153783306;
  uint64_t v6 = 2153783303;
  if (a1 && a5)
  {
    uint64_t v12 = a1[3].i64[0];
    uint64_t v13 = *(void *)(v12 + 24);
    int8x16_t v14 = *(uint64_t **)(v12 + 64);
    uint64_t v15 = heap_Calloc(*(void **)(v12 + 8), 1, 56);
    uint64_t v16 = v15;
    if (!v15)
    {
LABEL_26:
      *a5 = v16;
      return v5;
    }
    int8x16_t v17 = a1[3];
    *(int8x16_t *)uint64_t v15 = vextq_s8(v17, v17, 8uLL);
    uint64_t v18 = *(void *)(v17.i64[0] + 8);
    *(_OWORD *)(v15 + 24) = 0u;
    *(void *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 40) = 0u;
    critsec_Enter(*(void **)(v17.i64[0] + 16));
    if (!v14)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned char *, uint64_t))v13)(a1[2].i64[1], a2, a3, a4, v16 + 24);
      goto LABEL_23;
    }
    if (!a3 || !a4) {
      goto LABEL_23;
    }
    if (*a4 == 114 && !cstdlib_strchr(a3, 46))
    {
      uint64_t FileInfoDesc = GetFileInfoDesc(v14, *(void **)(v16 + 16), a3);
      *(void *)(v16 + 48) = FileInfoDesc;
      uint64_t v6 = 2153783306;
      if (!FileInfoDesc) {
        goto LABEL_23;
      }
      *(_DWORD *)(FileInfoDesc + 40) = 1;
      if (*(_DWORD *)(FileInfoDesc + 20))
      {
LABEL_11:
        uint64_t v6 = 0;
        uint64_t v20 = *(void *)(FileInfoDesc + 24);
        uint64_t v21 = *(void *)(FileInfoDesc + 32);
        *(void *)(v16 + 24) = v20;
        *(void *)(v16 + 40) = v21;
        if (!v20) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, char *, const char *, uint64_t))v13)(a1[2].i64[1], a2, a3, "rb", v16 + 24);
    }
    else
    {
      uint64_t FileInfoDesc = GetFileInfoDesc(v14, *(void **)(v16 + 16), a3);
      *(void *)(v16 + 48) = FileInfoDesc;
      uint64_t v6 = 2153783306;
      if (!FileInfoDesc) {
        goto LABEL_23;
      }
      *(_DWORD *)(FileInfoDesc + 40) = 0;
      if (*(_DWORD *)(FileInfoDesc + 20)) {
        goto LABEL_11;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned char *, uint64_t))v13)(a1[2].i64[1], a2, a3, a4, v16 + 24);
    }
    uint64_t v6 = v22;
    if ((v22 & 0x80000000) != 0)
    {
      uint64_t v23 = *(void *)(v16 + 40);
    }
    else
    {
      uint64_t v23 = (*(unsigned int (**)(void))(v13 + 32))(*(void *)(v16 + 24));
      *(void *)(v16 + 40) = v23;
    }
    uint64_t v24 = *(void *)(v16 + 24);
    uint64_t FileInfoDesc = *(void *)(v16 + 48);
    *(void *)(FileInfoDesc + 24) = v24;
    *(void *)(FileInfoDesc + 32) = v23;
    if (v24) {
LABEL_22:
    }
      ++*(_DWORD *)(FileInfoDesc + 20);
LABEL_23:
    critsec_Leave(*(void **)(*(void *)(v16 + 8) + 16));
    if (!*(void *)(v16 + 24))
    {
      heap_Free(*(void **)(v16 + 16), v16);
      uint64_t v16 = 0;
    }
    uint64_t v5 = v6;
    goto LABEL_26;
  }
  return v6;
}

uint64_t GetFileInfoDesc(uint64_t *a1, void *a2, char *__s2)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = 0;
    while (cstdlib_strcmp(*(const char **)(v6 + 8), __s2))
    {
      ++v7;
      uint64_t v6 = *(void *)v6;
      if (!v6) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    int v7 = 0;
LABEL_7:
    uint64_t v8 = (void *)heap_Alloc((uint64_t)a2, 48);
    uint64_t v6 = (uint64_t)v8;
    if (v8)
    {
      *uint64_t v8 = *a1;
      int v9 = cstdlib_strlen(__s2);
      uint16x8_t v10 = (char *)heap_Alloc((uint64_t)a2, (v9 + 1));
      *(void *)(v6 + 8) = v10;
      if (v10)
      {
        cstdlib_strcpy(v10, __s2);
        *(_DWORD *)(v6 + 16) = v7;
        *(void *)(v6 + 28) = 0;
        *(void *)(v6 + 20) = 0;
        *(_DWORD *)(v6 + 36) = 0;
        *a1 = v6;
      }
      else
      {
        heap_Free(a2, v6);
        return 0;
      }
    }
  }
  return v6;
}

uint64_t cache_datastream_Close(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  critsec_Enter(*(void **)(*(void *)(a1 + 8) + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 24);
  if (*(void *)(v2 + 64)
    && (v4 = *(void *)(a1 + 48), int v5 = *(_DWORD *)(v4 + 20) - 1, (*(_DWORD *)(v4 + 20) = v5) != 0))
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v3 + 8))(*(void *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
  critsec_Leave(*(void **)(*(void *)(a1 + 8) + 16));
  heap_Free(*(void **)(a1 + 16), a1);
  return v6;
}

uint64_t cache_datastream_Read(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    critsec_Enter(*(void **)(a4[1] + 16));
    uint64_t v8 = a4[1];
    uint64_t v9 = *(void *)(v8 + 24);
    uint64_t v10 = *(void *)(v8 + 64);
    if (v10)
    {
      uint64_t v11 = a3 * a2;
      if (*(_DWORD *)(v10 + 48) < v11 || (uint64_t v12 = a4[6], *(_DWORD *)(v12 + 40) != 1))
      {
        if (((*(uint64_t (**)(void, void, void, uint64_t))(v9 + 24))(a4[3], *((unsigned int *)a4 + 8), 0, 1) & 0x80000000) != 0)uint64_t v16 = 0; {
        else
        }
          uint64_t v16 = (*(unsigned int (**)(void *, uint64_t, uint64_t, void))(v9 + 16))(a1, 1, v11, a4[3]);
        uint64_t v21 = a4[4] + v11;
LABEL_19:
        a4[4] = v21;
        goto LABEL_20;
      }
      uint64_t v13 = *(uint64_t **)(v10 + 16);
      if (*((_DWORD *)v13 + 4) != -1)
      {
        int v14 = 0;
        int v15 = *(_DWORD *)(v12 + 16);
        uint64_t v16 = v11;
        while (1)
        {
          if (*((_DWORD *)v13 + 4) == v15)
          {
            unint64_t v17 = a4[4];
            unint64_t v18 = v13[4];
            BOOL v19 = v17 >= v18;
            unint64_t v20 = v17 - v18;
            if (v19 && v20 + v11 <= *(unsigned int *)(v10 + 44)) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
          --v14;
          if (!v13) {
            goto LABEL_12;
          }
        }
        cstdlib_memcpy(a1, (const void *)(v13[3] + v20), v11);
        if (v14)
        {
          uint64_t v23 = (uint64_t *)*v13;
          if (*v13)
          {
            v23[1] = v13[1];
            *(void *)v13[1] = v23;
            uint64_t v24 = *(void *)(v10 + 16);
          }
          else
          {
            uint64_t v24 = *(void *)(v10 + 16);
            uint64_t v25 = *(void **)(*(void *)(v10 + 8) + 8);
            *(void *)(v10 + 8) = v25;
            void *v25 = 0;
          }
          *(void *)(v24 + 8) = v13;
          *uint64_t v13 = v24;
          v13[1] = 0;
          *(void *)(v10 + 16) = v13;
        }
        uint64_t v21 = a4[4] + v11;
        goto LABEL_19;
      }
LABEL_12:
      uint64_t v16 = AddCacheData(a4, v11, a1);
    }
    else
    {
      uint64_t v16 = (*(unsigned int (**)(void *, uint64_t, uint64_t, void))(v9 + 16))(a1, a2, a3, a4[3]);
    }
LABEL_20:
    critsec_Leave(*(void **)(a4[1] + 16));
    return v16;
  }
  return 0;
}

uint64_t cache_datastream_Seek(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 2153783303;
  if (a1)
  {
    critsec_Enter(*(void **)(a1[1] + 16));
    uint64_t v9 = a1[1];
    uint64_t v10 = *(void *)(v9 + 24);
    if (!*(void *)(v9 + 64))
    {
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1[3], a2, a3, a4);
LABEL_17:
      uint64_t v4 = v11;
      goto LABEL_18;
    }
    if (*(_DWORD *)(a1[6] + 40)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1[3], a2, a3, a4);
    }
    switch(a3)
    {
      case 2:
        uint64_t v12 = a1[5];
        break;
      case 1:
        if (a4 == 1)
        {
          uint64_t v12 = a1[4] + a2;
        }
        else
        {
          if (a4 != -1) {
            goto LABEL_18;
          }
          uint64_t v12 = a1[4] - a2;
        }
        break;
      case 0:
        a1[4] = a2;
        goto LABEL_17;
      default:
LABEL_18:
        critsec_Leave(*(void **)(a1[1] + 16));
        return v4;
    }
    a1[4] = v12;
    goto LABEL_17;
  }
  return v4;
}

uint64_t cache_datastream_GetSize(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  critsec_Enter(*(void **)(*(void *)(a1 + 8) + 16));
  uint64_t v2 = (*(unsigned int (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 32))(*(void *)(a1 + 24));
  critsec_Leave(*(void **)(*(void *)(a1 + 8) + 16));
  return v2;
}

uint64_t cache_datastream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  critsec_Enter(*(void **)(*(void *)(a4 + 8) + 16));
  uint64_t v8 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(a4 + 8) + 24) + 48))(a1, a2, a3, *(void *)(a4 + 24));
  critsec_Leave(*(void **)(*(void *)(a4 + 8) + 16));
  return v8;
}

uint64_t cache_datastream_DataOpen(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = 2153783303;
  if (a1 && a4)
  {
    uint64_t v9 = a1[3].i64[0];
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v11 = (int8x16_t *)heap_Calloc(*(void **)(v9 + 8), 1, 32);
    uint64_t v12 = (uint64_t)v11;
    if (v11)
    {
      int8x16_t v13 = a1[3];
      int8x16_t *v11 = vextq_s8(v13, v13, 8uLL);
      v11[1].i64[1] = *(void *)(v13.i64[0] + 8);
      v11[1].i64[0] = 0;
      int v14 = v11 + 1;
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int8x16_t *))(v10 + 80))(a1[2].i64[1], a2, a3, v11 + 1);
      if (!v14->i64[0])
      {
        heap_Free(*(void **)(a1[3].i64[0] + 8), v12);
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v4 = 2153783306;
    }
    *a4 = v12;
  }
  return v4;
}

uint64_t cache_datastream_DataClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 96))(*(void *)(a1 + 16));
  heap_Free(*(void **)(a1 + 24), a1);
  return v2;
}

uint64_t cache_datastream_DataMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a3 && a4) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 104))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DataUnmap(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 112))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DataFreeze(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 120))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DynModOpen(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a5)
  {
    uint64_t v11 = a1[3].i64[0];
    uint64_t v12 = *(void *)(v11 + 24);
    int8x16_t v13 = (int8x16_t *)heap_Calloc(*(void **)(v11 + 8), 1, 32);
    uint64_t v14 = (uint64_t)v13;
    if (v13)
    {
      int8x16_t v15 = a1[3];
      *int8x16_t v13 = vextq_s8(v15, v15, 8uLL);
      v13[1].i64[1] = *(void *)(v15.i64[0] + 8);
      v13[1].i64[0] = 0;
      uint64_t v16 = v13 + 1;
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t *))(v12 + 176))(a1[2].i64[1], a2, a3, a4, v13 + 1);
      if (!v16->i64[0])
      {
        heap_Free(*(void **)(a1[3].i64[0] + 8), v14);
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v5 = 2153783306;
    }
    *a5 = v14;
  }
  return v5;
}

uint64_t cache_datastream_DynModClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 184))(*(void *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  heap_Free(*(void **)(a1 + 24), a1);
  return v2;
}

uint64_t cache_datastream_DynModObjLoad(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) + 24) + 192))(*(void *)(a1 + 16));
  }
  else {
    return 2153783303;
  }
}

uint64_t cache_datastream_DynModObjUnload()
{
  return 0;
}

uint64_t AddCacheData(void *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 64);
  if (!v5) {
    return a2;
  }
  uint64_t v8 = *(void *)(v4 + 24);
  int v9 = *(_DWORD *)(a1[6] + 16);
  uint64_t v10 = *(void *)(v5 + 8);
  uint64_t v11 = *(void **)(v10 + 8);
  *(void *)(v5 + 8) = v11;
  void *v11 = 0;
  *(_DWORD *)(v10 + 16) = v9;
  int8x16_t v13 = a1 + 3;
  uint64_t v12 = a1[3];
  *(void *)(v10 + 32) = v13[1];
  if (((*(uint64_t (**)(uint64_t))(v8 + 24))(v12) & 0x80000000) != 0
    || (*(unsigned int (**)(void, uint64_t, void, void))(v8 + 16))(*(void *)(v10 + 24), 1, *(unsigned int *)(v5 + 44), a1[3]) < a2)
  {
    return 0;
  }
  uint64_t v14 = a2;
  cstdlib_memcpy(a3, *(const void **)(v10 + 24), a2);
  a1[4] += a2;
  uint64_t v15 = *(void *)(v5 + 16);
  *(void *)(v15 + 8) = v10;
  *(void *)uint64_t v10 = v15;
  *(void *)(v10 + 8) = 0;
  *(void *)(v5 + 16) = v10;
  return v14;
}

uint64_t osspi_cb_cache_ClassOpen(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = 2153783303;
  if (a4 && a6)
  {
    int8x16_t v13 = (uint64_t *)heap_Calloc(a1, 1, 96);
    *a6 = v13;
    if (!v13) {
      return 2153783306;
    }
    *int8x16_t v13 = (uint64_t)a1;
    (*a6)[1] = a2;
    (*a6)[10] = 0;
    (*a6)[11] = 0;
    (*a6)[2] = heap_Calloc(a1, 1, 224);
    uint64_t v14 = *a6;
    uint64_t v15 = (void *)(*a6)[2];
    if (v15)
    {
      void *v15 = cache_datastream_Open;
      *(void *)((*a6)[2] + 8) = cache_datastream_Close;
      *(void *)((*a6)[2] + 16) = cache_datastream_Read;
      *(void *)((*a6)[2] + 24) = cache_datastream_Seek;
      *(void *)((*a6)[2] + 32) = cache_datastream_GetSize;
      *(void *)((*a6)[2] + 48) = cache_datastream_Write;
      if (*(void *)(a4 + 80))
      {
        *(void *)((*a6)[2] + 80) = cache_datastream_DataOpen;
        *(void *)((*a6)[2] + 96) = cache_datastream_DataClose;
        *(void *)((*a6)[2] + 104) = cache_datastream_DataMap;
        *(void *)((*a6)[2] + 112) = cache_datastream_DataUnmap;
        *(void *)((*a6)[2] + 120) = cache_datastream_DataFreeze;
      }
      if (*(void *)(a4 + 176))
      {
        *(void *)((*a6)[2] + 176) = cache_datastream_DynModOpen;
        *(void *)((*a6)[2] + 184) = cache_datastream_DynModClose;
        *(void *)((*a6)[2] + 192) = cache_datastream_DynModObjLoad;
        *(void *)((*a6)[2] + 200) = cache_datastream_DynModObjUnload;
      }
      (*a6)[4] = a4;
      (*a6)[5] = a5;
      uint64_t v16 = cache_ClassOpen(a1, a3, a4, a5, &v22);
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t v6 = v16;
      }
      else
      {
        uint64_t v17 = v22;
        (*a6)[7] = v22;
        uint64_t v6 = cache_ObjOpen(v17, 0x10u, 0x200u, 0x100u, &v21);
        if ((v6 & 0x80000000) == 0)
        {
          (*a6)[6] = v21;
          (*a6)[3] = (uint64_t)*a6;
          return v6;
        }
      }
      uint64_t v14 = *a6;
      if (!*a6) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 2153783306;
    }
    unint64_t v18 = (void *)v14[6];
    if (v18)
    {
      cache_ObjClose(v18);
      uint64_t v14 = *a6;
    }
    BOOL v19 = (void **)v14[7];
    if (v19)
    {
      cache_ClassClose(v19);
      uint64_t v14 = *a6;
    }
    if (v14[2])
    {
      heap_Free(a1, v14[2]);
      uint64_t v14 = *a6;
    }
    heap_Free(a1, (uint64_t)v14);
    *a6 = 0;
  }
  return v6;
}

uint64_t osspi_cb_cache_SetLog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return cache_ObjSetLog(*(void *)(a1 + 48), a2, a3);
  }
  else {
    return 2153783303;
  }
}

uint64_t osspi_cb_cache_SetClock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t result = 0;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  return result;
}

uint64_t osspi_cb_cache_ClassClose(void **a1)
{
  if (!a1) {
    return 2153783303;
  }
  cache_ObjClose(a1[6]);
  a1[6] = 0;
  cache_ClassClose((void **)a1[7]);
  a1[7] = 0;
  heap_Free(*a1, (uint64_t)a1[2]);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a1 + 2);
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t osspi_DynModOpen(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2153783303;
  if (a1 && a2 && a5)
  {
    if (*(void *)(a1[2] + 176))
    {
      uint64_t v11 = (void *)heap_Calloc(a2, 1, 24);
      *a5 = (uint64_t)v11;
      if (v11)
      {
        void *v11 = a1;
        *(void *)(*a5 + 8) = a2;
        uint64_t v5 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(a1[2] + 176))(a1[3], a1[1], a3, a4, *a5 + 16);
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(a2, *a5);
          *a5 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v5;
}

uint64_t osspi_DynModClose(uint64_t a1)
{
  uint64_t v1 = 2153783297;
  if (!a1) {
    return 2153783303;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 184);
  if (v3)
  {
    uint64_t v1 = v3(*(void *)(a1 + 16));
    if ((v1 & 0x80000000) == 0) {
      heap_Free(*(void **)(a1 + 8), a1);
    }
  }
  return v1;
}

uint64_t osspi_DynModObjLoad(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2153783303;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 192);
    if (v5) {
      return v5(a1[2]);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t osspi_DynModObjUnload(void *a1, uint64_t a2)
{
  uint64_t v2 = 2153783303;
  if (a1 && a2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 200);
    if (v3) {
      return v3(a1[2]);
    }
    return 2153783297;
  }
  return v2;
}

uint64_t osspi_DataOpen(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  safeh_GetNullHandle();

  return osspi_DataOpenEx(a1, a2, v8, v9, v10, a3, a4);
}

uint64_t osspi_DataOpenEx(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = 2153783303;
  if (!a6 || !a1 || !a2 || !a7) {
    return v7;
  }
  uint64_t v12 = (void *)heap_Calloc(a2, 1, 56);
  *a7 = (uint64_t)v12;
  if (!v12) {
    return 2153783306;
  }
  *uint64_t v12 = a1;
  *(void *)(*a7 + 8) = a2;
  uint64_t v13 = a1[2];
  uint64_t v14 = *(uint64_t (**)(void, void, uint64_t, uint64_t))(v13 + 80);
  if (v14)
  {
    uint64_t v7 = v14(a1[3], a1[1], a6, *a7 + 24);
    if ((v7 & 0x1FFF) != 1) {
      goto LABEL_10;
    }
    uint64_t v13 = a1[2];
  }
  uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t, const char *, uint64_t))v13)(a1[3], a1[1], a6, "rb", *a7 + 32);
LABEL_10:
  if ((v7 & 0x80000000) != 0)
  {
    heap_Free(a2, *a7);
    *a7 = 0;
  }
  return v7;
}

uint64_t osspi_DataClose(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v2 = (uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 96);
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 40);
      if (v4) {
        heap_Free(*(void **)(a1 + 8), v4);
      }
      if (!*(void *)(a1 + 32))
      {
        uint64_t v3 = 0;
LABEL_12:
        heap_Free(*(void **)(a1 + 8), a1);
        return v3;
      }
      uint64_t v2 = (uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 8);
    }
    uint64_t v3 = (*v2)();
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
    goto LABEL_12;
  }
  return 2153783303;
}

uint64_t osspi_DataReplace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2153783303;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(uint64_t (**)(void, void))(a1[2] + 128);
    if (v5) {
      return v5(a1[3], a1[1]);
    }
    else {
      return 2153783297;
    }
  }
  return result;
}

uint64_t osspi_DataMap(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4)
{
  uint64_t v4 = 2153783303;
  if (a1 && a3 && a4)
  {
    if (*(_DWORD *)(a1 + 16)) {
      return 2153783313;
    }
    *a4 = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      uint64_t v16 = *a3;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void *))(*(void *)(*(void *)a1 + 16) + 104))(v9, a2, &v16, a4);
      *a3 = v16;
      uint64_t v4 = v10;
      if ((v10 & 0x80000000) != 0) {
        return v4;
      }
      goto LABEL_8;
    }
    uint64_t v4 = 2153783300;
    if (!*a3)
    {
      unsigned int v12 = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 32))(*(void *)(a1 + 32));
      *a3 = v12;
      if (v12 <= a2) {
        return v4;
      }
      *a3 = v12 - a2;
    }
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(*(void *)(*(void *)a1 + 16) + 24))(*(void *)(a1 + 32), a2, 0, 1);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v13 = *a3;
    if (*(_DWORD *)(a1 + 48) >= v13)
    {
      uint64_t v14 = *(void *)(a1 + 40);
    }
    else
    {
      uint64_t v14 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a1 + 40), v13);
      if (!v14) {
        return 2153783306;
      }
      *(void *)(a1 + 40) = v14;
      *(_DWORD *)(a1 + 48) = *a3;
      uint64_t v13 = *a3;
    }
    unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)a1 + 16) + 16))(v14, 1, v13, *(void *)(a1 + 32));
    if (v15 + 1 >= 2)
    {
      *a3 = v15;
      *a4 = *(void *)(a1 + 40);
LABEL_8:
      *(_DWORD *)(a1 + 16) = 1;
      return v10;
    }
  }
  return v4;
}

uint64_t osspi_DataUnmap(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2153783303;
  if (a1 && a2)
  {
    if (!*(_DWORD *)(a1 + 16)) {
      return 2153783313;
    }
    if (*(void *)(a1 + 24))
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 112))();
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else if (*(_DWORD *)(a1 + 48) < 0x401u)
    {
      uint64_t result = 0;
    }
    else
    {
      heap_Free(*(void **)(a1 + 8), *(void *)(a1 + 40));
      uint64_t result = 0;
      *(void *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    *(_DWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t osspi_DataFreeze(void *a1)
{
  if (!a1) {
    return 2153783303;
  }
  if (a1[3])
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*a1 + 16) + 120);
    if (v2)
    {
      return v2();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = a1[4];
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(*a1 + 16) + 8))();
      a1[4] = 0;
    }
  }
  return result;
}

uint64_t osspi_FindOpen(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = 2153783303;
  if (a5 && a3 && a1 && a2 && a6)
  {
    if (*(void *)(a1[2] + 152))
    {
      uint64_t v13 = (void *)heap_Calloc(a2, 1, 24);
      *a6 = (uint64_t)v13;
      if (v13)
      {
        *uint64_t v13 = a1;
        *(void *)(*a6 + 8) = a2;
        uint64_t v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t))(a1[2] + 152))(a1[3], a1[1], a3, a4, a5, *a6 + 16);
        if ((v6 & 0x80000000) != 0)
        {
          heap_Free(a2, *a6);
          *a6 = 0;
        }
      }
      else
      {
        return 2153783306;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return v6;
}

uint64_t osspi_FindNext(void *a1, uint64_t a2)
{
  if (a1 && a2) {
    return (*(uint64_t (**)(void))(*(void *)(*a1 + 16) + 160))(a1[2]);
  }
  else {
    return 2153783303;
  }
}

uint64_t osspi_FindClose(uint64_t a1)
{
  if (!a1) {
    return 2153783303;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(*(void *)a1 + 16) + 168))(*(void *)(a1 + 16));
  if ((v2 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), a1);
  }
  return v2;
}

uint64_t osspi_time(uint64_t result, uint64_t *a2)
{
  uint64_t v7 = 0;
  if (!result)
  {
LABEL_7:
    if (!a2) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v3 = *(uint64_t (**)(void, uint64_t *))(*(void *)(result + 16) + 136);
  if (v3)
  {
    uint64_t result = v3(*(void *)(result + 24), &v7);
    if (!a2) {
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v4 = *(void (**)(void, uint64_t *))(result + 88);
  if (v4)
  {
    int v6 = 0;
    uint64_t v5 = 0;
    v4(*(void *)(result + 80), &v5);
    uint64_t result = v5;
    goto LABEL_7;
  }
  uint64_t result = 0;
  if (!a2) {
    return result;
  }
LABEL_8:
  *a2 = result;
  return result;
}

uint64_t osspi_ctime(void *a1, void *a2, int a3, char *a4)
{
  uint64_t result = 2153783303;
  if (a3 && a1 && a2 && a4)
  {
    int v6 = *(uint64_t (**)(uint64_t))(a1[2] + 144);
    if (v6)
    {
      uint64_t v7 = a1[3];
      return v6(v7);
    }
    else if (*a2)
    {
      uint64_t result = 2153783297;
      if (a1[11])
      {
        LH_itoa(*a2, a4, 0xAu);
        return 0;
      }
    }
    else
    {
      return 2153783297;
    }
  }
  return result;
}

uint64_t osspi_ClcDataOpen(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  v4[0] = xmmword_26D20C0A8;
  v4[1] = *(_OWORD *)off_26D20C0B8;
  uint64_t result = 2153783303;
  if (a1)
  {
    if (a2) {
      return clcarchive_Parse(a2, v4, a1, &v5, 0);
    }
  }
  return result;
}

size_t osspi_ClcDataRead(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6) {
    return (*(unsigned int (**)(void *, uint64_t, uint64_t, void))(*(void *)(*(void *)a4 + 16) + 16))(a1, a2, a3, *(void *)(a4 + 32));
  }
  uint64_t v8 = 0;
  size_t v9 = a3 * a2;
  if (((*(uint64_t (**)(uint64_t, void, size_t *, const void **))(*(void *)(*(void *)a4 + 16) + 104))(v6, *(unsigned int *)(a4 + 52), &v9, &v8) & 0x80000000) != 0)return 0; {
  cstdlib_memcpy(a1, v8, v9);
  }
  *(_DWORD *)(a4 + 52) += v9;
  if ((*(int (**)(void, const void *))(*(void *)(*(void *)a4 + 16) + 112))(*(void *)(a4 + 24), v8) >= 0)return v9; {
  else
  }
    return 0;
}

uint64_t osspi_ClcDataSeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 24)) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)a1 + 16) + 24))(*(void *)(a1 + 32), a2, a3, 1);
  }
  *(_DWORD *)(a1 + 52) = a2;
  return 0;
}

uint64_t osspi_ClcDataError()
{
  return 0;
}

uint64_t osspi_ClcDataFinished()
{
  return 0;
}

uint64_t osspi_ClcDataClose(uint64_t a1, uint64_t a2)
{
  if (a2) {
    BOOL v2 = a1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 2153783303;
  }
  else {
    return 0;
  }
}

uint64_t safeh_HandleCheck(uint64_t a1, int a2, int a3, int a4)
{
  if (a1) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = -2123341816;
  }
  if (!a4) {
    unsigned int v4 = 0;
  }
  if (a2 == a3) {
    return v4;
  }
  else {
    return 2171625480;
  }
}

BOOL safeh_HandlesEqual(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return a2 == a4 && a1 == a3;
}

uint64_t safeh_GetNullHandle()
{
  return 0;
}

unsigned __int16 *LH_wcscat(unsigned __int16 *result, unsigned __int16 *a2)
{
  BOOL v2 = result;
  while (*v2++)
    ;
  int v4 = *a2;
  *(v2 - 1) = v4;
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = a2[v5 + 1];
      v2[v5++] = v6;
    }
    while (v6);
  }
  return result;
}

_WORD *LH_wcscpy(_WORD *result, unsigned __int16 *a2)
{
  int v2 = *a2;
  *uint64_t result = v2;
  if (v2)
  {
    uint64_t v3 = result + 1;
    int v4 = a2 + 1;
    do
    {
      int v5 = *v4++;
      *v3++ = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t LH_wcscat_from_wchart(uint64_t result, unsigned int *a2)
{
  int v2 = (_WORD *)(result - 2);
  do
  {
    int v3 = (unsigned __int16)v2[1];
    ++v2;
  }
  while (v3);
  unsigned int v4 = *a2;
  if (*a2)
  {
    int v5 = a2 + 1;
    do
    {
      if (v4 >= 0x10000) {
        LOWORD(v4) = 63;
      }
      *v2++ = v4;
      unsigned int v6 = *v5++;
      unsigned int v4 = v6;
    }
    while (v6);
  }
  *int v2 = 0;
  return result;
}

_WORD *LH_wcscpy_from_wchart(_WORD *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  int v3 = result;
  if (*a2)
  {
    unsigned int v4 = a2 + 1;
    int v3 = result;
    do
    {
      if (v2 >= 0x10000) {
        LOWORD(v2) = 63;
      }
      *v3++ = v2;
      unsigned int v5 = *v4++;
      unsigned int v2 = v5;
    }
    while (v5);
  }
  *int v3 = 0;
  return result;
}

_DWORD *LH_wcscat_to_wchart(_DWORD *result, unsigned __int16 *a2)
{
  unsigned int v2 = result;
  while (*v2++)
    ;
  int v4 = *a2;
  *(v2 - 1) = v4;
  if (v4)
  {
    unsigned int v5 = a2 + 1;
    do
    {
      int v6 = *v5++;
      *v2++ = v6;
    }
    while (v6);
  }
  return result;
}

_DWORD *LH_wcscpy_to_wchart(_DWORD *result, unsigned __int16 *a2)
{
  int v2 = *a2;
  *uint64_t result = v2;
  if (v2)
  {
    int v3 = result + 1;
    int v4 = a2 + 1;
    do
    {
      int v5 = *v4++;
      *v3++ = v5;
    }
    while (v5);
  }
  return result;
}

unsigned __int16 *LH_wcscat_from_char(unsigned __int16 *result, unsigned __int8 *a2)
{
  int v2 = result;
  do
    int v3 = v2;
  while (*v2++);
  int v5 = *a2;
  *int v3 = v5;
  if (v5)
  {
    uint64_t v6 = 0;
    do
    {
      int v7 = a2[v6 + 1];
      v2[v6++] = v7;
    }
    while (v7);
  }
  return result;
}

_WORD *LH_wcsncpy_from_char(_WORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a1;
  if (a3)
  {
    for (size_t i = 2 * a3 - 2; ; i -= 2)
    {
      int v6 = *a2;
      *a1 = v6;
      if (!v6) {
        break;
      }
      ++a1;
      ++a2;
      if (!--a3) {
        return v3;
      }
    }
    if (a3 != 1) {
      bzero(a1, i);
    }
  }
  return v3;
}

_WORD *LH_wcscpy_from_char(_WORD *result, unsigned __int8 *a2)
{
  int v2 = *a2;
  *uint64_t result = v2;
  if (v2)
  {
    int v3 = result + 1;
    int v4 = a2 + 1;
    do
    {
      int v5 = *v4++;
      *v3++ = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t LH_wcscat_to_char(uint64_t result, _WORD *a2)
{
  int v2 = (unsigned char *)(result - 1);
  while (*++v2)
    ;
  unsigned int v4 = (unsigned __int16)*a2;
  if (*a2)
  {
    uint64_t v5 = 0;
    do
    {
      if (v4 >= 0x100) {
        LOBYTE(v4) = 63;
      }
      v2[v5] = v4;
      unsigned int v4 = (unsigned __int16)a2[++v5];
    }
    while (v4);
    v2 += v5;
  }
  *int v2 = 0;
  return result;
}

unsigned char *LH_wcscpy_to_char(unsigned char *result, _WORD *a2)
{
  unsigned int v2 = (unsigned __int16)*a2;
  int v3 = result;
  if (*a2)
  {
    unsigned int v4 = a2 + 1;
    int v3 = result;
    do
    {
      if (v2 >= 0x100) {
        LOBYTE(v2) = 63;
      }
      *v3++ = v2;
      unsigned int v5 = *v4++;
      unsigned int v2 = v5;
    }
    while (v5);
  }
  *int v3 = 0;
  return result;
}

uint64_t LH_wcsncpy_to_char(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v5;
      __int16 v7 = *(_WORD *)(a2 + 2 * v5);
      *(unsigned char *)(a1 + v6) = v7;
      if (!(_BYTE)v7) {
        break;
      }
      uint64_t v5 = v6 + 1;
      if (a3 == v6 + 1) {
        return a1 + v6 + 1;
      }
    }
    uint64_t v8 = (void *)(a1 + v6 + 1);
    if (a3 - 1 == v6)
    {
      v3 += v6 + 1;
    }
    else
    {
      bzero(v8, ~v6 + a3);
      v3 += a3;
    }
  }
  return v3;
}

uint64_t LH_wcschr(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 2;
  do
  {
    int v4 = *(unsigned __int16 *)(v2 + 2);
    v2 += 2;
    int v3 = v4;
    if (v4) {
      BOOL v5 = v3 == a2;
    }
    else {
      BOOL v5 = 1;
    }
  }
  while (!v5);
  if (v3 == a2) {
    return v2;
  }
  else {
    return 0;
  }
}

unsigned __int16 *LH_wcsstr(unsigned __int16 *result, _WORD *a2)
{
  if (*a2)
  {
    int v2 = *result;
    if (*result)
    {
      while (1)
      {
        uint64_t v3 = 0;
        while (1)
        {
          int v4 = (unsigned __int16)a2[v3];
          if (!a2[v3] || v2 != v4) {
            break;
          }
          int v2 = result[++v3];
          if (!v2)
          {
            int v4 = (unsigned __int16)a2[v3];
            break;
          }
        }
        if (!v4) {
          break;
        }
        int v6 = result[1];
        ++result;
        int v2 = v6;
        if (!v6) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LH_wcscmp(_WORD *a1, unsigned __int16 *a2)
{
  int v2 = (unsigned __int16)*a1;
  if (*a1)
  {
    uint64_t v3 = a1 + 1;
    do
    {
      if (v2 != *a2) {
        break;
      }
      ++a2;
      int v4 = *v3++;
      int v2 = v4;
    }
    while (v4);
  }
  return v2 - *a2;
}

uint64_t LH_wcsncmp(_WORD *a1, unsigned __int16 *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  while (1)
  {
    int v3 = (unsigned __int16)*a1;
    int v4 = *a2;
    if (!*a1 || v3 != v4) {
      break;
    }
    ++a1;
    ++a2;
    if (!--a3) {
      return 0;
    }
  }
  return (v3 - v4);
}

uint64_t LH_wcslen(uint64_t a1)
{
  uint64_t v1 = 0;
  do
  {
    int v2 = *(unsigned __int16 *)(a1 + v1);
    v1 += 2;
  }
  while (v2);
  return (v1 >> 1) - 1;
}

uint64_t LH_wcsncpy(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (a3)
  {
    size_t v5 = 2 * a3 - 2;
    for (size_t i = (_WORD *)(a1 + 2); ; ++i)
    {
      int v7 = *a2;
      *(i - 1) = v7;
      if (!v7) {
        break;
      }
      ++a2;
      v5 -= 2;
      if (!--a3) {
        return a1;
      }
    }
    if (a3 != 1) {
      bzero(i, v5);
    }
  }
  return a1;
}

uint64_t LH_wtol(unsigned __int16 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= 0xFF)
  {
    do
    {
      if (v1 - 9 >= 5 && v1 != 32) {
        break;
      }
      unsigned int v2 = a1[1];
      ++a1;
      unsigned int v1 = v2;
    }
    while (v2 < 0x100);
  }
  if (v1 == 45 || v1 == 43)
  {
    int v3 = a1 + 2;
    unsigned int v4 = a1[1];
  }
  else
  {
    int v3 = a1 + 1;
    unsigned int v4 = v1;
  }
  if (v4 > 0xFF)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      if (v4 - 48 > 9) {
        break;
      }
      uint64_t v5 = 10 * v5 + v4 - 48;
      unsigned int v6 = *v3++;
      unsigned int v4 = v6;
    }
    while (v6 < 0x100);
  }
  if (v1 == 45) {
    return -v5;
  }
  else {
    return v5;
  }
}

uint64_t LH_wtoi(unsigned __int16 *a1)
{
  return LH_wtol(a1);
}

unint64_t LH_wcstol(unsigned __int16 *a1, unsigned __int16 **a2, unsigned int a3)
{
  return LH_wcstoxl(a1, a2, a3, 0);
}

unint64_t LH_wcstoxl(unsigned __int16 *a1, unsigned __int16 **a2, unsigned int a3, int a4)
{
  int v4 = a4;
  unsigned int v5 = a3;
  size_t v9 = a1 + 1;
  uint64_t v8 = *a1;
  if (v8 <= 0xFF)
  {
    while (v8 - 9 < 5 || v8 == 32)
    {
      unsigned int v10 = *v9++;
      uint64_t v8 = v10;
      if (v10 >= 0x100) {
        goto LABEL_10;
      }
    }
    if (v8 == 43) {
      goto LABEL_9;
    }
    if (v8 == 45)
    {
      int v4 = a4 | 2;
LABEL_9:
      unsigned int v11 = *v9++;
      uint64_t v8 = v11;
    }
  }
LABEL_10:
  if (a3 <= 0x24 && a3 != 1)
  {
    if (!a3)
    {
      if (v8 != 48)
      {
        unsigned int v5 = 10;
        goto LABEL_24;
      }
      if (((*v9 - 88) & 0xFFDF) != 0) {
        unsigned int v5 = 8;
      }
      else {
        unsigned int v5 = 16;
      }
    }
    if (v5 == 16 && v8 == 48)
    {
      if ((*v9 | 0x20) != 0x78)
      {
        unint64_t v13 = 16;
        uint64_t v8 = 48;
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        unsigned int v5 = 16;
        goto LABEL_28;
      }
      uint64_t v8 = v9[1];
      v9 += 2;
      unsigned int v5 = 16;
    }
LABEL_24:
    if (v8 > 0xFF)
    {
      unint64_t v15 = 0;
      goto LABEL_39;
    }
    unint64_t v13 = v5;
    unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL / v5;
LABEL_28:
    unint64_t v15 = 0;
    do
    {
      unsigned int v16 = v8 - 48;
      if ((v8 - 48) > 9)
      {
        if ((v8 & 0xDF) - 65 > 0x19) {
          break;
        }
        unsigned int v16 = cstdlib_toupper(v8) - 55;
      }
      if (v16 >= v5) {
        break;
      }
      if (v15 < v14 || v15 == v14 && ~(0xFFFFFFFFFFFFFFFFLL / v13 * v13) >= v16)
      {
        v4 |= 8u;
        unint64_t v15 = v16 + v15 * v13;
      }
      else
      {
        v4 |= 0xCu;
      }
      unsigned int v17 = *v9++;
      uint64_t v8 = v17;
    }
    while (v17 < 0x100);
LABEL_39:
    unint64_t v18 = v9 - 1;
    if ((v4 & 8) == 0)
    {
      unint64_t v15 = 0;
      if (!a2) {
        goto LABEL_55;
      }
      unint64_t v18 = a1;
      goto LABEL_54;
    }
    if ((v4 & 4) != 0)
    {
      if (v4)
      {
        unint64_t v15 = -1;
        if (!a2)
        {
LABEL_55:
          if ((v4 & 2) != 0) {
            return -(uint64_t)v15;
          }
          else {
            return v15;
          }
        }
LABEL_54:
        *a2 = v18;
        goto LABEL_55;
      }
    }
    else if ((v4 & 1) != 0 {
           || ((v4 & 2) == 0 || v15 <= 0x8000000000000000) && ((v4 & 2) != 0 || (v15 & 0x8000000000000000) == 0))
    }
    {
LABEL_53:
      if (!a2) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
    if ((v4 & 2) != 0) {
      unint64_t v15 = 0x8000000000000000;
    }
    else {
      unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    goto LABEL_53;
  }
  unint64_t result = 0;
  if (a2) {
    *a2 = a1;
  }
  return result;
}

unint64_t LH_wcstoul(unsigned __int16 *a1, unsigned __int16 **a2, unsigned int a3)
{
  return LH_wcstoxl(a1, a2, a3, 1);
}

uint64_t ssftstring_ObjOpen(void *a1, void *a2)
{
  uint64_t v2 = 2319458311;
  if (a2)
  {
    unsigned int v5 = (void *)heap_Calloc(a1, 1, 24);
    *a2 = v5;
    if (v5)
    {
      uint64_t v2 = 0;
      *unsigned int v5 = a1;
    }
    else
    {
      return 2319458314;
    }
  }
  return v2;
}

uint64_t ssftstring_ObjClone(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 2319458311;
  if (a1 && a2)
  {
    unsigned int v5 = (void *)heap_Calloc(*(void **)a1, 1, 24);
    *a2 = (uint64_t)v5;
    if (v5)
    {
      *unsigned int v5 = *(void *)a1;
      int v6 = *(_DWORD *)(a1 + 8);
      BOOL v7 = v6 != 0;
      int v8 = v6 - 1;
      if (v7) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      uint64_t v10 = ssftstring_Reserve(*a2, v9);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v2 = v10;
        heap_Free(*(void **)a1, *a2);
        *a2 = 0;
      }
      else
      {
        cstdlib_strcpy(*(char **)(*a2 + 16), *(const char **)(a1 + 16));
        uint64_t v2 = 0;
        *(_DWORD *)(*a2 + 12) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      return 2319458314;
    }
  }
  return v2;
}

uint64_t ssftstring_Reserve(uint64_t a1, int a2)
{
  uint64_t v2 = 2319458314;
  if (!a1) {
    return 2319458311;
  }
  uint64_t v4 = (a2 + 1);
  if (*(_DWORD *)(a1 + 8) >= v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(uint64_t **)a1;
  if (v5)
  {
    BOOL v7 = (unsigned char *)heap_Realloc(v6, v5, v4);
    if (!v7) {
      return v2;
    }
    goto LABEL_10;
  }
  BOOL v7 = (unsigned char *)heap_Alloc((uint64_t)v6, v4);
  if (v7)
  {
    unsigned char *v7 = 0;
LABEL_10:
    uint64_t v2 = 0;
    *(void *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return v2;
}

uint64_t ssftstring_ObjCloneCStr(void *a1, char *a2, uint64_t *a3)
{
  uint64_t v3 = 2319458311;
  if (a3)
  {
    BOOL v7 = (void *)heap_Calloc(a1, 1, 24);
    *a3 = (uint64_t)v7;
    if (v7)
    {
      void *v7 = a1;
      uint64_t v8 = ssftstring_AssignCStr(*a3, a2);
      if ((v8 & 0x80000000) != 0)
      {
        uint64_t v3 = v8;
        ssftstring_ObjClose((void **)*a3);
        *a3 = 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2319458314;
    }
  }
  return v3;
}

uint64_t ssftstring_AssignCStr(uint64_t a1, char *__s)
{
  if (__s)
  {
    int v4 = cstdlib_strlen(__s);
    if (a1) {
      goto LABEL_3;
    }
    return 2319458311;
  }
  int v4 = 0;
  if (!a1) {
    return 2319458311;
  }
LABEL_3:
  uint64_t result = ssftstring_Reserve(a1, v4);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(char **)(a1 + 16);
    if (__s)
    {
      cstdlib_strcpy(v6, __s);
    }
    else
    {
      int v4 = 0;
      *int v6 = 0;
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 12) = v4;
  }
  return result;
}

uint64_t ssftstring_ObjClose(void **a1)
{
  if (!a1) {
    return 2319458311;
  }
  uint64_t v2 = (uint64_t)a1[2];
  if (v2) {
    heap_Free(*a1, v2);
  }
  heap_Free(*a1, (uint64_t)a1);
  return 0;
}

uint64_t ssftstring_CStr(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t ssftstring_CStrWritable(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t ssftstring_CStrDetach(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 16);
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t ssftstring_Size(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t ssftstring_Assign(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2319458311;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = ssftstring_Reserve(a1, *(_DWORD *)(a2 + 12));
      if ((result & 0x80000000) == 0)
      {
        uint64_t v5 = *(const char **)(a2 + 16);
        int v6 = *(char **)(a1 + 16);
        if (v5)
        {
          cstdlib_strcpy(v6, v5);
          int v7 = *(_DWORD *)(a2 + 12);
        }
        else
        {
          int v7 = 0;
          *int v6 = 0;
        }
        uint64_t result = 0;
        *(_DWORD *)(a1 + 12) = v7;
      }
    }
  }
  return result;
}

uint64_t ssftstring_Append(uint64_t a1, uint64_t a2)
{
  uint64_t result = 2319458311;
  if (a1 && a2)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t result = ssftstring_Reserve(a1, *(_DWORD *)(a2 + 12) + *(_DWORD *)(a1 + 12));
      if ((result & 0x80000000) == 0)
      {
        cstdlib_strcpy((char *)(*(void *)(a1 + 16) + *(unsigned int *)(a1 + 12)), *(const char **)(a2 + 16));
        uint64_t result = 0;
        *(_DWORD *)(a1 + 12) += *(_DWORD *)(a2 + 12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ssftstring_AppendChar(uint64_t a1, char a2)
{
  if (!a1) {
    return 2319458311;
  }
  uint64_t result = ssftstring_Reserve(a1, *(_DWORD *)(a1 + 12) + 1);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1 + 16) + *(unsigned int *)(a1 + 12)) = a2;
    unsigned int v5 = *(_DWORD *)(a1 + 12) + 1;
    *(_DWORD *)(a1 + 12) = v5;
    *(unsigned char *)(*(void *)(a1 + 16) + v5) = 0;
  }
  return result;
}

uint64_t ssftstring_AppendCStr(uint64_t a1, char *__s)
{
  if (!a1 || !__s) {
    return 2319458311;
  }
  unsigned int v4 = cstdlib_strlen(__s);

  return ssftstring_AppendCStrN(a1, __s, v4);
}

uint64_t ssftstring_AppendCStrN(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t result = 2319458311;
  if (a1 && a2)
  {
    uint64_t result = ssftstring_Reserve(a1, *(_DWORD *)(a1 + 12) + a3);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strncpy((char *)(*(void *)(a1 + 16) + *(unsigned int *)(a1 + 12)), a2, a3);
      uint64_t result = 0;
      unsigned int v7 = *(_DWORD *)(a1 + 12) + a3;
      *(_DWORD *)(a1 + 12) = v7;
      *(unsigned char *)(*(void *)(a1 + 16) + v7) = 0;
    }
  }
  return result;
}

uint64_t ssftstring_Clear(uint64_t a1)
{
  if (!a1) {
    return 2319458311;
  }
  uint64_t v2 = *(unsigned char **)(a1 + 16);
  uint64_t result = 0;
  if (v2)
  {
    *uint64_t v2 = 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t ssftstring_Compare(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *(const char **)(a1 + 16);
    if (v3)
    {
      if (!a2) {
        return 1;
      }
LABEL_12:
      int v6 = *(const char **)(a2 + 16);
      if (v6) {
        return cstdlib_strcmp(v3, v6);
      }
      return 1;
    }
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 0;
  }
  if (a1 && v4)
  {
    uint64_t v3 = *(const char **)(a1 + 16);
    if (v3) {
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ssftstring_CompareCStr(uint64_t a1, const char *a2)
{
  if (a1)
  {
    uint64_t v2 = *(const char **)(a1 + 16);
    if ((unint64_t)a2 | (unint64_t)v2) {
      unsigned int v3 = -1;
    }
    else {
      unsigned int v3 = 0;
    }
    if (v2) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = v3;
    }
    if (v2) {
      BOOL v5 = a2 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      return cstdlib_strcmp(v2, a2);
    }
  }
  else if (a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t ssftstring_ReplaceAllCStrByCStr(uint64_t a1, char *__s2, char *a3)
{
  uint64_t v3 = 2319458311;
  *(void *)unint64_t v15 = 0;
  if (!a1 || !__s2 || !*__s2) {
    return v3;
  }
  int v6 = *(char **)(a1 + 16);
  if (!v6 || (uint64_t v8 = cstdlib_strstr(*(char **)(a1 + 16), __s2)) == 0)
  {
    uint64_t v3 = 0;
LABEL_17:
    if (*(void *)v15) {
      ssftstring_ObjClose(*(void ***)v15);
    }
    return v3;
  }
  int v9 = v8;
  uint64_t v10 = ssftstring_ObjClone(a1, (uint64_t *)v15);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v11 = *(void *)v15;
  if (*(void *)v15)
  {
    unsigned int v12 = *(unsigned char **)(*(void *)v15 + 16);
    if (v12)
    {
      *unsigned int v12 = 0;
      *(_DWORD *)(v11 + 12) = 0;
    }
    while (1)
    {
      uint64_t appended = ssftstring_AppendCStrN(*(uint64_t *)v15, v6, (int)v9 - (int)v6);
      if ((appended & 0x80000000) != 0) {
        break;
      }
      uint64_t appended = ssftstring_AppendCStr(*(uint64_t *)v15, a3);
      if ((appended & 0x80000000) != 0) {
        break;
      }
      int v6 = &v9[cstdlib_strlen(__s2)];
      int v9 = cstdlib_strstr(v6, __s2);
      if (!v9)
      {
        uint64_t appended = ssftstring_AppendCStr(*(uint64_t *)v15, v6);
        if ((appended & 0x80000000) == 0) {
          uint64_t appended = ssftstring_Assign(a1, *(uint64_t *)v15);
        }
        break;
      }
    }
    uint64_t v3 = appended;
    goto LABEL_17;
  }
  return v3;
}

uint64_t ssftstring_ReplaceAllBy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return ssftstring_ReplaceAllCStrByCStr(a1, *(char **)(a2 + 16), *(char **)(a3 + 16));
  }
  else {
    return 2319458311;
  }
}

uint64_t vector_ObjOpen(void *a1, long long *a2, __int16 a3, uint64_t *a4)
{
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t result = 0;
  if (*((void *)a2 + 1))
  {
    if (!a4 || !v8) {
      return result;
    }
LABEL_7:
    uint64_t result = heap_Calloc(a1, 1, 56);
    *a4 = result;
    if (result)
    {
      *(void *)uint64_t result = 0;
      uint64_t v10 = *a4;
      *(void *)(v10 + 32) = 0;
      long long v11 = *a2;
      *(void *)(v10 + 24) = *((void *)a2 + 2);
      *(_OWORD *)(v10 + 8) = v11;
      uint64_t v12 = *a4;
      *(_WORD *)(v12 + 40) = a3;
      *(void *)(v12 + 48) = a1;
      return 1;
    }
    return result;
  }
  if (a4 && !v8) {
    goto LABEL_7;
  }
  return result;
}

uint64_t vector_ObjClone(const void **a1, uint64_t **a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = heap_Calloc(a1[6], 1, 56);
      *a2 = (uint64_t *)result;
      if (result)
      {
        cstdlib_memcpy((void *)result, a1, 0x38uLL);
        **a2 = heap_Alloc((*a2)[6], *((_DWORD *)*a2 + 8) * *((unsigned __int16 *)*a2 + 4));
        BOOL v5 = *a2;
        int v6 = (void *)**a2;
        if (!v6)
        {
LABEL_24:
          heap_Free((void *)v5[6], (uint64_t)v5);
          uint64_t result = 0;
          *a2 = 0;
          return result;
        }
        cstdlib_memcpy(v6, *a1, *((_DWORD *)v5 + 9) * *((unsigned __int16 *)v5 + 4));
        if (!(*a2)[2]) {
          return 1;
        }
        unsigned int v7 = 0;
        int v8 = 0;
        uint64_t result = 1;
        while (result == 1)
        {
          if (v7 >= *((_DWORD *)*a2 + 9)) {
            return 1;
          }
          uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))(*a2)[2])((char *)*a1 + v7 * *((unsigned __int16 *)a1 + 4), (*a2)[6], **a2 + v7 * *((unsigned __int16 *)*a2 + 4));
          if (result == 1) {
            ++v8;
          }
          ++v7;
        }
        if (!result)
        {
          BOOL v5 = *a2;
          if (!*a2) {
            return 0;
          }
          uint64_t v9 = *v5;
          if (*v5)
          {
            if (v5[3]) {
              BOOL v10 = v8 == 0;
            }
            else {
              BOOL v10 = 1;
            }
            if (!v10)
            {
              int v11 = 0;
              do
              {
                ((void (*)(uint64_t, uint64_t))(*a2)[3])(**a2 + v11 * *((unsigned __int16 *)*a2 + 4), (*a2)[6]);
                ++v11;
              }
              while (v8 != v11);
              BOOL v5 = *a2;
              uint64_t v9 = **a2;
            }
            heap_Free((void *)v5[6], v9);
            BOOL v5 = *a2;
          }
          goto LABEL_24;
        }
      }
    }
  }
  return result;
}

uint64_t vector_ObjClose(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)result;
    if (*(void *)result)
    {
      if (*(void *)(result + 24) && *(_DWORD *)(result + 36))
      {
        unsigned int v3 = 0;
        do
        {
          (*(void (**)(void, void))(v1 + 24))(*(void *)v1 + v3 * *(unsigned __int16 *)(v1 + 8), *(void *)(v1 + 48));
          ++v3;
        }
        while (v3 < *(_DWORD *)(v1 + 36));
        uint64_t v2 = *(void *)v1;
      }
      heap_Free(*(void **)(v1 + 48), v2);
    }
    heap_Free(*(void **)(v1 + 48), v1);
    return 1;
  }
  return result;
}

uint64_t vector_AddGet(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 36);
    int v6 = v5 + 1;
    uint64_t v7 = *(void *)a1;
    if (*(_DWORD *)(a1 + 32) < v5 + 1)
    {
      unsigned int v8 = *(unsigned __int16 *)(a1 + 40) + *(unsigned __int16 *)(a1 + 40) * (v5 / *(unsigned __int16 *)(a1 + 40));
      uint64_t v9 = *(uint64_t **)(a1 + 48);
      uint64_t v10 = v8 * *(unsigned __int16 *)(a1 + 8);
      if (v7)
      {
        uint64_t result = heap_Realloc(v9, v7, v10);
        if (!result) {
          return result;
        }
        uint64_t v7 = result;
        *(void *)a1 = result;
      }
      else
      {
        uint64_t result = heap_Calloc(v9, 1, v10);
        uint64_t v7 = result;
        *(void *)a1 = result;
        if (!result) {
          return result;
        }
      }
      *(_DWORD *)(a1 + 32) = v8;
      unsigned int v5 = *(_DWORD *)(a1 + 36);
      int v6 = v5 + 1;
    }
    *a2 = v7 + v5 * *(unsigned __int16 *)(a1 + 8);
    *(_DWORD *)(a1 + 36) = v6;
    return 1;
  }
  return result;
}

uint64_t vector_Add(uint64_t a1, const void *a2)
{
  __dst = 0;
  uint64_t result = vector_AddGet(a1, &__dst);
  if (result)
  {
    cstdlib_memcpy(__dst, a2, *(unsigned __int16 *)(a1 + 8));
    unsigned int v5 = *(uint64_t (**)(const void *, void, void *))(a1 + 16);
    if (v5 && (uint64_t result = v5(a2, *(void *)(a1 + 48), __dst), !result)) {
      --*(_DWORD *)(a1 + 36);
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t vector_AddElemAt(uint64_t a1, unsigned int a2, const void *a3)
{
  __dst = 0;
  uint64_t result = vector_AddGet(a1, &__dst);
  if (result)
  {
    int v7 = *(_DWORD *)(a1 + 36);
    unsigned int v8 = v7 - 1;
    if (v7 - 1 > a2)
    {
      uint64_t v9 = *(void *)a1;
      int v10 = *(unsigned __int16 *)(a1 + 8);
      __dst = (void *)(*(void *)a1 + v10 * a2);
      cstdlib_memmove((void *)(v9 + (a2 + 1) * v10), __dst, (v7 - (a2 + 1)) * v10);
      unsigned int v8 = a2;
    }
    cstdlib_memcpy(__dst, a3, *(unsigned __int16 *)(a1 + 8));
    int v11 = *(unsigned int (**)(const void *, void, void *))(a1 + 16);
    if (v11 && !v11(a3, *(void *)(a1 + 48), __dst))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      vector_Remove(a1, v8);
      uint64_t result = 0;
      *(void *)(a1 + 24) = v12;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t vector_Remove(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result + 36);
    if (v4 <= a2)
    {
      return 0;
    }
    else
    {
      unsigned int v5 = *(void (**)(void, void))(result + 24);
      if (v5)
      {
        v5(*(void *)result + *(unsigned __int16 *)(result + 8) * a2, *(void *)(result + 48));
        unsigned int v4 = *(_DWORD *)(v3 + 36);
      }
      if (v4 + ~a2)
      {
        cstdlib_memmove((void *)(*(void *)v3 + *(unsigned __int16 *)(v3 + 8) * a2), (const void *)(*(void *)v3 + *(unsigned __int16 *)(v3 + 8) + *(unsigned __int16 *)(v3 + 8) * a2), (v4 + ~a2) * *(unsigned __int16 *)(v3 + 8));
        unsigned int v4 = *(_DWORD *)(v3 + 36);
      }
      *(_DWORD *)(v3 + 36) = v4 - 1;
      return 1;
    }
  }
  return result;
}

uint64_t vector_RemoveAddress(uint64_t result, char *__dst)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = 0;
    if (__dst)
    {
      int v4 = *(unsigned __int16 *)(v3 + 8);
      unint64_t v5 = *(void *)v3 + (*(_DWORD *)(v3 + 36) * v4);
      if (*(void *)v3 <= (unint64_t)__dst && v5 >= (unint64_t)__dst)
      {
        int v7 = *(void (**)(char *, void))(v3 + 24);
        if (v7)
        {
          v7(__dst, *(void *)(v3 + 48));
          int v4 = *(unsigned __int16 *)(v3 + 8);
        }
        cstdlib_memmove(__dst, &__dst[v4], (v5 - (__dst + v4)));
        --*(_DWORD *)(v3 + 36);
        return 1;
      }
    }
  }
  return result;
}

uint64_t vector_Clear(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 24) && *(_DWORD *)(result + 36))
    {
      unsigned int v2 = 0;
      do
      {
        (*(void (**)(void, void))(v1 + 24))(*(void *)v1 + v2 * *(unsigned __int16 *)(v1 + 8), *(void *)(v1 + 48));
        ++v2;
      }
      while (v2 < *(_DWORD *)(v1 + 36));
    }
    *(_DWORD *)(v1 + 36) = 0;
    return 1;
  }
  return result;
}

uint64_t vector_GetSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 36);
  }
  return result;
}

uint64_t vector_GetElemAt(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t result = 0;
  if (a1 && a3)
  {
    if (*(_DWORD *)(a1 + 36) <= a2)
    {
      return 0;
    }
    else
    {
      *a3 = *(void *)a1 + *(unsigned __int16 *)(a1 + 8) * a2;
      return 1;
    }
  }
  return result;
}

uint64_t vector_StackPop(uint64_t a1)
{
  if (a1 && (int v1 = *(_DWORD *)(a1 + 36)) != 0) {
    return vector_Remove(a1, v1 - 1);
  }
  else {
    return 0;
  }
}

uint64_t vector_StackTop(uint64_t a1, void *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    int v4 = *(_DWORD *)(a1 + 36);
    if (v4)
    {
      *a2 = *(void *)a1 + (v4 - 1) * *(unsigned __int16 *)(a1 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double crnc3rdprtyrnm_XmlPrologStateInit(uint64_t a1)
{
  *(void *)a1 = prolog0;
  *(void *)&double result = 0x100000000;
  *(void *)(a1 + 16) = 0x100000000;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t prolog0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = prolog1;
  uint64_t result = 0;
  switch(a2)
  {
    case 11:
      uint64_t result = 55;
      goto LABEL_7;
    case 12:
      uint64_t result = 1;
      goto LABEL_7;
    case 13:
      uint64_t result = 56;
LABEL_7:
      unsigned int v8 = prolog1;
      goto LABEL_15;
    case 14:
      return result;
    case 15:
      goto LABEL_16;
    case 16:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + 2 * *(int *)(a5 + 128), a4, "DOCTYPE"))goto LABEL_13; {
      int v6 = doctype0;
      }
      uint64_t result = 3;
      goto LABEL_16;
    default:
      if (a2 == 29)
      {
        uint64_t result = 2;
      }
      else
      {
        if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
          return 59;
        }
LABEL_13:
        uint64_t result = 0xFFFFFFFFLL;
      }
      unsigned int v8 = error;
LABEL_15:
      int v6 = v8;
LABEL_16:
      *(void *)a1 = v6;
      return result;
  }
}

void *crnc3rdprtyrnm_XmlPrologStateInitExternalEntity(void *result)
{
  *uint64_t result = externalSubset0;
  result[2] = 0;
  return result;
}

void externalSubset0(_DWORD *a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
  *(void *)a1 = externalSubset1;
  if (a2 != 12) {
    externalSubset1(a1, a2, a3, a4);
  }
}

uint64_t prolog1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 11:
      return 55;
    case 12:
      goto LABEL_5;
    case 13:
      return 56;
    case 14:
    case 15:
      return result;
    case 16:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + 2 * *(int *)(a5 + 128), a4, "DOCTYPE"))goto LABEL_11; {
      *(void *)a1 = doctype0;
      }
      uint64_t result = 3;
      break;
    default:
      if (a2 == 29)
      {
        *(void *)a1 = error;
        uint64_t result = 2;
      }
      else
      {
LABEL_5:
        if (a2 != 28 || *(_DWORD *)(a1 + 20))
        {
LABEL_11:
          *(void *)a1 = error;
          uint64_t result = 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t result = 59;
        }
      }
      break;
  }
  return result;
}

uint64_t doctype0(uint64_t a1, int a2)
{
  unsigned int v2 = doctype1;
  if (a2 == 15) {
    return 3;
  }
  uint64_t result = 4;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    unsigned int v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t error()
{
  return 0;
}

uint64_t doctype1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = internalSubset;
  if (a2 > 17)
  {
    if (a2 == 18)
    {
      int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM");
      int v6 = doctype3;
      if (v11
        || (int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"),
            int v6 = doctype2,
            v12))
      {
        uint64_t result = 3;
        goto LABEL_16;
      }
LABEL_15:
      uint64_t result = 0xFFFFFFFFLL;
      int v6 = error;
      goto LABEL_16;
    }
    if (a2 == 25)
    {
      uint64_t result = 7;
      goto LABEL_16;
    }
LABEL_12:
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_15;
  }
  if (a2 == 15) {
    return 3;
  }
  if (a2 != 17) {
    goto LABEL_12;
  }
  uint64_t result = 8;
  int v6 = prolog2;
LABEL_16:
  *(void *)a1 = v6;
  return result;
}

void internalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  if ((int)name > 25)
  {
    if (name == 26)
    {
      *(void *)ctx = doctype5;
    }
    else if (name != 28)
    {
LABEL_17:
      *(void *)ctx = error;
    }
  }
  else
  {
    switch((int)name)
    {
      case 11:
      case 13:
      case 15:
        return;
      case 12:
      case 14:
        goto LABEL_17;
      case 16:
        uint64_t v6 = v4;
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v4 + 48))(v4, &ExternalID[2 * *(int *)(v4 + 128)], SystemID, "ENTITY"))
        {
          *(void *)ctx = entity0;
          return;
        }
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "ATTLIST"))
        {
          *(void *)ctx = attlist0;
          return;
        }
        if ((*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "ELEMENT"))
        {
          *(void *)ctx = element0;
          return;
        }
        if (!(*(unsigned int (**)(uint64_t, const xmlChar *, const xmlChar *, const char *))(v6 + 48))(v6, &ExternalID[2 * *(int *)(v6 + 128)], SystemID, "NOTATION"))goto LABEL_17; {
        *(void *)ctx = notation0;
        }
        break;
      default:
        if (name != -4) {
          goto LABEL_17;
        }
        return;
    }
  }
}

uint64_t prolog2(uint64_t a1, int a2)
{
  HIDWORD(v2) = a2 - 11;
  LODWORD(v2) = a2 - 11;
  uint64_t v3 = 0;
  switch((v2 >> 1))
  {
    case 0u:
      uint64_t v3 = 55;
      break;
    case 1u:
      uint64_t v3 = 56;
      break;
    case 2u:
      return v3;
    case 9u:
      *(void *)a1 = error;
      uint64_t v3 = 2;
      break;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        uint64_t v3 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v3 = 59;
      }
      break;
  }
  return v3;
}

uint64_t doctype3(uint64_t a1, int a2)
{
  unint64_t v2 = doctype4;
  if (a2 == 15) {
    return 3;
  }
  if (a2 == 27)
  {
    uint64_t result = 5;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t doctype2(uint64_t a1, int a2)
{
  unint64_t v2 = doctype3;
  if (a2 == 15) {
    return 3;
  }
  if (a2 == 27)
  {
    uint64_t result = 6;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity0(uint64_t a1, int a2)
{
  uint64_t v3 = entity1;
  uint64_t result = 11;
  if (a2 != 15)
  {
    if (a2 == 22)
    {
LABEL_9:
      *(void *)a1 = v3;
      return result;
    }
    if (a2 == 18)
    {
      uint64_t result = 9;
      uint64_t v3 = entity2;
      goto LABEL_9;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v3 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
      goto LABEL_9;
    }
    return 59;
  }
  return result;
}

uint64_t attlist0(uint64_t a1, int a2)
{
  unint64_t v2 = attlist1;
  if (a2 == 15) {
    return 33;
  }
  uint64_t result = 34;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t element0(uint64_t a1, int a2)
{
  unint64_t v2 = element1;
  if (a2 == 15) {
    return 39;
  }
  uint64_t result = 40;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t notation0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = notation1;
  if (a2 == 15) {
    return 17;
  }
  if (a2 == 18)
  {
    uint64_t v3 = a2;
LABEL_8:
    *(void *)a1 = v2;
    return v3;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  unint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
    goto LABEL_8;
  }
  return 59;
}

uint64_t doctype5(uint64_t a1, int a2)
{
  unint64_t v2 = prolog2;
  if (a2 == 15) {
    return 3;
  }
  if (a2 == 17)
  {
    uint64_t result = 8;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity1(uint64_t a1, int a2)
{
  unint64_t v2 = entity7;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 18)
  {
    uint64_t result = 10;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 11;
    case 27:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 11;
      return 12;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
      {
        uint64_t v9 = entity4;
LABEL_13:
        *(void *)a1 = v9;
        return 11;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
      {
        uint64_t v9 = entity3;
        goto LABEL_13;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
      break;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity7(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 11;
    case 27:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 11;
      return 12;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM"))
      {
        uint64_t v9 = entity9;
LABEL_13:
        *(void *)a1 = v9;
        return 11;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC"))
      {
        uint64_t v9 = entity8;
        goto LABEL_13;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
      break;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity9(uint64_t a1, int a2)
{
  unint64_t v2 = entity10;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 13;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity8(uint64_t a1, int a2)
{
  unint64_t v2 = entity9;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 14;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t declClose(uint64_t a1, int a2)
{
  if (a2 == 17)
  {
    uint64_t v3 = internalSubset;
    if (!*(_DWORD *)(a1 + 20)) {
      uint64_t v3 = (void (__cdecl *)(void *, const xmlChar *, const xmlChar *, const xmlChar *))externalSubset1;
    }
    *(void *)a1 = v3;
    return *(unsigned int *)(a1 + 12);
  }
  if (a2 == 15) {
    return *(unsigned int *)(a1 + 12);
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
    return 59;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t entity10(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 17)
  {
    unint64_t v2 = externalSubset1;
    if (*(_DWORD *)(a1 + 20)) {
      unint64_t v2 = (uint64_t (*)())internalSubset;
    }
    uint64_t v3 = 15;
    goto LABEL_10;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  unint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
LABEL_10:
    *(void *)a1 = v2;
    return v3;
  }
  return 59;
}

void externalSubset1(_DWORD *a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
  if ((int)a2 > 25)
  {
    if (a2 != 26)
    {
      if (a2 != 34)
      {
        if (a2 == 33)
        {
          *(void *)a1 = condSect0;
          return;
        }
        goto LABEL_14;
      }
      int v4 = a1[4];
      if (v4)
      {
        a1[4] = v4 - 1;
        return;
      }
    }
LABEL_12:
    *(void *)a1 = error;
    return;
  }
  if (a2 == -4)
  {
    if (!a1[4]) {
      return;
    }
    goto LABEL_12;
  }
  if (a2 != 15) {
LABEL_14:
  }
    internalSubset(a1, a2, a3, a4);
}

uint64_t condSect0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 15) {
    return 0;
  }
  if (a2 != 18)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_10;
  }
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "INCLUDE");
  int v10 = condSect1;
  if (!v9)
  {
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "IGNORE");
    int v10 = condSect2;
    if (!v11)
    {
LABEL_10:
      uint64_t result = 0xFFFFFFFFLL;
      int v10 = error;
      goto LABEL_11;
    }
  }
  uint64_t result = 0;
LABEL_11:
  *(void *)a1 = v10;
  return result;
}

uint64_t condSect1(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 0;
  }
  if (a2 == 25)
  {
    uint64_t v2 = 0;
    *(void *)a1 = externalSubset1;
    ++*(_DWORD *)(a1 + 16);
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(void *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
  return v2;
}

uint64_t condSect2(uint64_t a1, int a2)
{
  uint64_t v2 = externalSubset1;
  if (a2 == 15) {
    return 0;
  }
  if (a2 == 25)
  {
    uint64_t v3 = 58;
LABEL_8:
    *(void *)a1 = v2;
    return v3;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  uint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
    goto LABEL_8;
  }
  return 59;
}

uint64_t entity4(uint64_t a1, int a2)
{
  uint64_t v2 = entity5;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 13;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity3(uint64_t a1, int a2)
{
  uint64_t v2 = entity4;
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 27)
  {
    uint64_t result = 14;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t entity5(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 15) {
    return 11;
  }
  if (a2 != 18)
  {
    if (a2 == 17)
    {
      uint64_t v6 = externalSubset1;
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v6 = (uint64_t (*)())internalSubset;
      }
      uint64_t result = 15;
      goto LABEL_14;
    }
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_13;
  }
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "NDATA");
  uint64_t v6 = (uint64_t (*)())entity6;
  if (!v8)
  {
LABEL_13:
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v6 = error;
    goto LABEL_14;
  }
  uint64_t result = 11;
LABEL_14:
  *(void *)a1 = v6;
  return result;
}

uint64_t entity6(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 11;
  }
  if (a2 == 18)
  {
    *(void *)a1 = declClose;
    *(_DWORD *)(a1 + 12) = 11;
    return 16;
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(void *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
}

uint64_t attlist1(uint64_t a1, int a2)
{
  uint64_t v2 = (uint64_t (*)())attlist2;
  if (a2 > 17)
  {
    uint64_t v3 = 22;
    if (a2 == 18 || a2 == 41) {
      goto LABEL_12;
    }
  }
  else
  {
    if (a2 == 15) {
      return 33;
    }
    if (a2 == 17)
    {
      uint64_t v2 = externalSubset1;
      if (*(_DWORD *)(a1 + 20)) {
        uint64_t v2 = (uint64_t (*)())internalSubset;
      }
      uint64_t v3 = 33;
      goto LABEL_12;
    }
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  uint64_t v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
LABEL_12:
    *(void *)a1 = v2;
    return v3;
  }
  return 59;
}

uint64_t attlist2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 33;
    case 23:
      int v11 = attlist3;
LABEL_14:
      *(void *)a1 = v11;
      return 33;
    case 18:
      for (uint64_t i = 0; i != 8; ++i)
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(a5 + 48))(a5, a3, a4, attlist2_types[i]))
        {
          *(void *)a1 = attlist8;
          return (i + 23);
        }
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "NOTATION")) {
        break;
      }
      int v11 = attlist5;
      goto LABEL_14;
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
    return 59;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t attlist8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = attlist1;
  if (a2 == 15) {
    return 33;
  }
  if (a2 == 27)
  {
    uint64_t result = 37;
    goto LABEL_16;
  }
  if (a2 != 20)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_15;
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "IMPLIED");
  unint64_t v5 = attlist1;
  if (!v10)
  {
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "REQUIRED");
    unint64_t v5 = attlist1;
    if (v12)
    {
      uint64_t result = 36;
      goto LABEL_16;
    }
    int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "FIXED");
    unint64_t v5 = (uint64_t (*)())attlist9;
    if (v13)
    {
      uint64_t result = 33;
      goto LABEL_16;
    }
LABEL_15:
    uint64_t result = 0xFFFFFFFFLL;
    unint64_t v5 = error;
    goto LABEL_16;
  }
  uint64_t result = 35;
LABEL_16:
  *(void *)a1 = v5;
  return result;
}

uint64_t attlist5(uint64_t a1, int a2)
{
  uint64_t v3 = attlist6;
  uint64_t result = 33;
  if (a2 != 15)
  {
    if (a2 == 23 || (result = 0xFFFFFFFFLL, uint64_t v3 = error, a2 != 28) || *(_DWORD *)(a1 + 20)) {
      *(void *)a1 = v3;
    }
    else {
      return 59;
    }
  }
  return result;
}

uint64_t attlist3(uint64_t a1, int a2)
{
  uint64_t result = 31;
  int v4 = attlist4;
  if ((a2 - 18) < 2)
  {
LABEL_7:
    *(void *)a1 = v4;
    return result;
  }
  if (a2 != 15)
  {
    if (a2 != 41)
    {
      uint64_t result = 0xFFFFFFFFLL;
      int v4 = error;
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
    }
    goto LABEL_7;
  }
  return 33;
}

uint64_t attlist9(uint64_t a1, int a2)
{
  uint64_t v2 = attlist1;
  if (a2 == 15) {
    return 33;
  }
  if (a2 == 27)
  {
    uint64_t result = 38;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t attlist6(uint64_t a1, int a2)
{
  uint64_t v2 = attlist7;
  if (a2 == 15) {
    return 33;
  }
  if (a2 == 18)
  {
    uint64_t result = 32;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t attlist7(uint64_t a1, int a2)
{
  uint64_t v3 = (uint64_t (*)())attlist8;
  uint64_t result = 33;
  if (a2 != 15)
  {
    if (a2 == 24)
    {
LABEL_9:
      *(void *)a1 = v3;
      return result;
    }
    if (a2 == 21)
    {
      uint64_t v3 = attlist6;
      goto LABEL_9;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v3 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
      goto LABEL_9;
    }
    return 59;
  }
  return result;
}

uint64_t attlist4(uint64_t a1, int a2)
{
  uint64_t v3 = (uint64_t (*)())attlist8;
  uint64_t result = 33;
  if (a2 != 15)
  {
    if (a2 == 24)
    {
LABEL_9:
      *(void *)a1 = v3;
      return result;
    }
    if (a2 == 21)
    {
      uint64_t v3 = attlist3;
      goto LABEL_9;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v3 = error;
    if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
      goto LABEL_9;
    }
    return 59;
  }
  return result;
}

uint64_t element1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(a2)
  {
    case 15:
      return 39;
    case 23:
      *(void *)a1 = element2;
      *(_DWORD *)(a1 + 8) = 1;
      return 44;
    case 18:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "EMPTY"))
      {
        *(void *)a1 = declClose;
        *(_DWORD *)(a1 + 12) = 39;
        return 42;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "ANY"))
      {
        *(void *)a1 = declClose;
        *(_DWORD *)(a1 + 12) = 39;
        return 41;
      }
      break;
    default:
      if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
        return 59;
      }
      break;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t element2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 51;
  int v7 = element7;
  switch(a2)
  {
    case 18:
      goto LABEL_16;
    case 19:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      goto LABEL_6;
    case 20:
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3 + *(int *)(a5 + 128), a4, "PCDATA"))goto LABEL_14; {
      int v7 = element3;
      }
      uint64_t result = 43;
      goto LABEL_16;
    case 23:
      *(_DWORD *)(a1 + 8) = 2;
      uint64_t result = 44;
      int v8 = element6;
      goto LABEL_15;
    case 30:
      uint64_t result = 53;
      goto LABEL_13;
    case 31:
      uint64_t result = 52;
      goto LABEL_13;
    case 32:
      uint64_t result = 54;
LABEL_13:
      int v8 = element7;
      goto LABEL_15;
    default:
      if (a2 == 15) {
        return 39;
      }
      if (a2 != 41)
      {
LABEL_6:
        if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
          return 59;
        }
LABEL_14:
        uint64_t result = 0xFFFFFFFFLL;
        int v8 = (uint64_t (*)(uint64_t, int))error;
LABEL_15:
        int v7 = v8;
      }
LABEL_16:
      *(void *)a1 = v7;
      return result;
  }
}

uint64_t element3(uint64_t a1, int a2)
{
  if (a2 > 23)
  {
    if (a2 == 36)
    {
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 46;
    }
    if (a2 == 24)
    {
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 45;
    }
  }
  else
  {
    if (a2 == 15) {
      return 39;
    }
    if (a2 == 21)
    {
      *(void *)a1 = element4;
      return 39;
    }
  }
  if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
    return 59;
  }
  *(void *)a1 = error;
  return 0xFFFFFFFFLL;
}

uint64_t element6(uint64_t a1, int a2)
{
  if (a2 <= 22)
  {
    if (a2 == 15)
    {
      return 39;
    }
    else if (a2 == 18)
    {
LABEL_6:
      *(void *)a1 = element7;
      return 51;
    }
    else
    {
LABEL_8:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 23:
        ++*(_DWORD *)(a1 + 8);
        uint64_t result = 44;
        break;
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        goto LABEL_8;
      case 30:
        *(void *)a1 = element7;
        uint64_t result = 53;
        break;
      case 31:
        *(void *)a1 = element7;
        uint64_t result = 52;
        break;
      case 32:
        *(void *)a1 = element7;
        uint64_t result = 54;
        break;
      default:
        if (a2 != 41) {
          goto LABEL_8;
        }
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t element7(uint64_t a1, int a2)
{
  if (a2 <= 34)
  {
    switch(a2)
    {
      case 15:
        return 39;
      case 21:
        *(void *)a1 = element6;
        return 49;
      case 24:
        int v4 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v4;
        if (!v4)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        return 45;
      default:
LABEL_21:
        if (a2 != 28 || *(_DWORD *)(a1 + 20))
        {
          *(void *)a1 = error;
          return 0xFFFFFFFFLL;
        }
        else
        {
          return 59;
        }
    }
  }
  else
  {
    switch(a2)
    {
      case '#':
        int v2 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v2;
        if (!v2)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        uint64_t result = 47;
        break;
      case '$':
        int v5 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v5;
        if (!v5)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        uint64_t result = 46;
        break;
      case '%':
        int v6 = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v6;
        if (!v6)
        {
          *(void *)a1 = declClose;
          *(_DWORD *)(a1 + 12) = 39;
        }
        uint64_t result = 48;
        break;
      case '&':
        *(void *)a1 = element6;
        uint64_t result = 50;
        break;
      default:
        goto LABEL_21;
    }
  }
  return result;
}

uint64_t element4(uint64_t a1, int a2)
{
  int v2 = element5;
  if (a2 == 15) {
    return 39;
  }
  uint64_t result = 51;
  if (a2 != 18 && a2 != 41)
  {
    uint64_t result = 0xFFFFFFFFLL;
    int v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t element5(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 15:
      return 39;
    case 21:
      *(void *)a1 = element4;
      return 39;
    case 36:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 39;
      return 46;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
  }
}

uint64_t notation1(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 15) {
    return 17;
  }
  if (a2 != 18)
  {
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
    goto LABEL_10;
  }
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "SYSTEM");
  int v10 = notation3;
  if (!v9)
  {
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a5 + 48))(a5, a3, a4, "PUBLIC");
    int v10 = notation2;
    if (!v11)
    {
LABEL_10:
      uint64_t result = 0xFFFFFFFFLL;
      int v10 = error;
      goto LABEL_11;
    }
  }
  uint64_t result = 17;
LABEL_11:
  *(void *)a1 = v10;
  return result;
}

uint64_t notation3(uint64_t a1, int a2)
{
  if (a2 == 15) {
    return 17;
  }
  if (a2 == 27)
  {
    *(void *)a1 = declClose;
    *(_DWORD *)(a1 + 12) = 17;
    return 19;
  }
  else if (a2 != 28 || *(_DWORD *)(a1 + 20))
  {
    *(void *)a1 = error;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 59;
  }
}

uint64_t notation2(uint64_t a1, int a2)
{
  int v2 = notation4;
  if (a2 == 15) {
    return 17;
  }
  if (a2 == 27)
  {
    uint64_t result = 21;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    int v2 = error;
    if (a2 == 28 && !*(_DWORD *)(a1 + 20)) {
      return 59;
    }
  }
  *(void *)a1 = v2;
  return result;
}

uint64_t notation4(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 15:
      return 17;
    case 17:
      uint64_t v3 = internalSubset;
      if (!*(_DWORD *)(a1 + 20)) {
        uint64_t v3 = (void (__cdecl *)(void *, const xmlChar *, const xmlChar *, const xmlChar *))externalSubset1;
      }
      *(void *)a1 = v3;
      return 20;
    case 27:
      *(void *)a1 = declClose;
      *(_DWORD *)(a1 + 12) = 17;
      return 19;
    default:
      if (a2 != 28 || *(_DWORD *)(a1 + 20))
      {
        *(void *)a1 = error;
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 59;
      }
  }
}

uint64_t doctype4(uint64_t a1, int a2)
{
  int v2 = internalSubset;
  switch(a2)
  {
    case 15:
      return 3;
    case 25:
      uint64_t v3 = 7;
      goto LABEL_10;
    case 17:
      uint64_t v3 = 8;
      int v2 = prolog2;
LABEL_10:
      *(void *)a1 = v2;
      return v3;
  }
  uint64_t v3 = 0xFFFFFFFFLL;
  int v2 = error;
  if (a2 != 28 || *(_DWORD *)(a1 + 20)) {
    goto LABEL_10;
  }
  return 59;
}

uint64_t crnc3rdprtyrnm_XML_ParserCreate()
{
  return 0;
}

uint64_t crnc3rdprtyrnm_XML_ParserCreate_MM(unsigned __int8 *a1, uint64_t a2, unsigned char *a3)
{
  return parserCreate(a1, a2, a3, 0);
}

uint64_t crnc3rdprtyrnm_XML_ParserCreateNS()
{
  return 0;
}

uint64_t parserCreate(unsigned __int8 *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(a2 + 8))(*(void *)a2, 1016);
  if (!v8) {
    return v8;
  }
  *(void *)(v8 + 24) = *(void *)a2;
  uint64_t v9 = v8 + 24;
  long long v10 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 32) = v10;
  *(void *)(v8 + 48) = *(void *)(a2 + 24);
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 744) = 16;
  uint64_t v11 = ((uint64_t (*)(void))v10)();
  *(void *)(v8 + 760) = v11;
  uint64_t v12 = *(void *)(v8 + 24);
  if (!v11)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 48))(v12, v8);
    return 0;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v12, 1024);
  *(void *)(v8 + 112) = v13;
  if (!v13)
  {
LABEL_18:
    (*(void (**)(void, void))(v8 + 48))(*(void *)(v8 + 24), *(void *)(v8 + 760));
    (*(void (**)(void, uint64_t))(v8 + 48))(*(void *)(v8 + 24), v8);
    return 0;
  }
  *(void *)(v8 + 120) = v13 + 1024;
  uint64_t v14 = a4;
  if (!a4)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(v8 + 32))(*(void *)(v8 + 24), 360);
    if (v14)
    {
      *(_OWORD *)(v14 + 160) = 0u;
      *(_OWORD *)(v14 + 176) = 0u;
      *(void *)(v14 + 192) = 0;
      *(void *)(v14 + 200) = v9;
      *(_OWORD *)(v14 + 208) = 0u;
      *(_OWORD *)(v14 + 224) = 0u;
      *(void *)(v14 + 240) = 0;
      *(void *)(v14 + 248) = v9;
      *(unsigned char *)(v14 + 8) = 0;
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      *(unsigned char *)(v14 + 48) = 0;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = 0;
      *(void *)(v14 + 56) = 0;
      *(void *)(v14 + 64) = 0;
      *(unsigned char *)(v14 + 88) = 0;
      *(void *)(v14 + 72) = v9;
      *(void *)(v14 + 80) = 0;
      *(void *)(v14 + 96) = 0;
      *(void *)(v14 + 104) = 0;
      *(unsigned char *)(v14 + 128) = 0;
      *(void *)(v14 + 112) = v9;
      *(void *)(v14 + 120) = 0;
      *(void *)(v14 + 136) = 0;
      *(void *)(v14 + 144) = 0;
      *(void *)(v14 + 152) = v9;
      *(unsigned char *)(v14 + 272) = 0;
      *(void *)(v14 + 264) = 0;
      *(void *)(v14 + 280) = 0;
      *(void *)(v14 + 288) = 0;
      *(void *)(v14 + 296) = v9;
      *(void *)(v14 + 304) = 0;
      *(void *)(v14 + 312) = 0;
      *(unsigned char *)(v14 + 320) = 0;
      *(_OWORD *)(v14 + 328) = 0u;
      *(_OWORD *)(v14 + 344) = 0u;
      *(_DWORD *)(v14 + 256) = 1;
      goto LABEL_8;
    }
    *(void *)(v8 + 696) = 0;
    (*(void (**)(void, void))(v8 + 48))(*(void *)(v8 + 24), *(void *)(v8 + 112));
    goto LABEL_18;
  }
LABEL_8:
  *(void *)(v8 + 696) = v14;
  *(void *)(v8 + 736) = 0;
  *(void *)(v8 + 720) = 0;
  *(void *)(v8 + 600) = 0;
  *(_DWORD *)(v8 + 912) = 0;
  *(void *)(v8 + 904) = 0;
  *(void *)(v8 + 272) = 0;
  *(void *)(v8 + 504) = 0;
  *(unsigned char *)(v8 + 916) = 33;
  *(_WORD *)(v8 + 480) = 0;
  *(void *)(v8 + 472) = 0;
  *(void *)(v8 + 840) = 0;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 768) = 0u;
  *(unsigned char *)(v8 + 784) = 0;
  *(void *)(v8 + 848) = v9;
  *(void *)(v8 + 888) = 0;
  *(_OWORD *)(v8 + 856) = 0u;
  *(_OWORD *)(v8 + 872) = 0u;
  *(void *)(v8 + 896) = v9;
  parserInit(v8, a1);
  if (a1 && !*(void *)(v8 + 472))
  {
    if (a4) {
      *(void *)(v8 + 696) = 0;
    }
    crnc3rdprtyrnm_XML_ParserFree(v8);
    return 0;
  }
  if (a3)
  {
    *(unsigned char *)(v8 + 480) = 1;
    *(void *)(v8 + 464) = crnc3rdprtyrnm_XmlGetUtf8InternalEncodingNS();
    *(unsigned char *)(v8 + 916) = *a3;
  }
  else
  {
    *(void *)(v8 + 464) = crnc3rdprtyrnm_XmlGetUtf8InternalEncoding();
  }
  return v8;
}

uint64_t crnc3rdprtyrnm_XML_ParserReset(uint64_t result, unsigned __int8 *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 920)) {
      return 0;
    }
    int v4 = *(void **)(result + 712);
    if (v4)
    {
      int v5 = *(void **)(result + 720);
      do
      {
        int v6 = v4;
        int v4 = (void *)*v4;
        *int v6 = v5;
        uint64_t v7 = v6[10];
        if (v7)
        {
          uint64_t v8 = *(void *)(result + 736);
          do
          {
            uint64_t v9 = v7;
            uint64_t v7 = *(void *)(v7 + 8);
            *(void *)(v9 + 8) = v8;
            uint64_t v8 = v9;
          }
          while (v7);
          *(void *)(result + 736) = v9;
        }
        v6[10] = 0;
        int v5 = v6;
      }
      while (v4);
      *(void *)(result + 720) = v6;
    }
    uint64_t v10 = *(void *)(result + 592);
    if (v10)
    {
      uint64_t v11 = *(void *)(result + 600);
      do
      {
        uint64_t v12 = v10;
        uint64_t v10 = *(void *)(v10 + 16);
        *(void *)(v12 + 16) = v11;
        uint64_t v11 = v12;
      }
      while (v10);
      *(void *)(result + 600) = v12;
    }
    uint64_t v13 = *(void *)(result + 728);
    if (v13)
    {
      uint64_t v14 = *(void *)(result + 736);
      do
      {
        uint64_t v15 = v13;
        uint64_t v13 = *(void *)(v13 + 8);
        *(void *)(v15 + 8) = v14;
        uint64_t v14 = v15;
      }
      while (v13);
      *(void *)(result + 736) = v15;
    }
    (*(void (**)(void, void))(result + 48))(*(void *)(result + 24), *(void *)(result + 488));
    unsigned int v16 = *(void (**)(void))(v2 + 512);
    if (v16) {
      v16(*(void *)(v2 + 496));
    }
    unsigned int v17 = *(void **)(v2 + 816);
    unint64_t v18 = *(void **)(v2 + 808);
    if (v17)
    {
      if (!v18) {
        goto LABEL_28;
      }
      do
      {
        BOOL v19 = v18;
        unint64_t v18 = (void *)*v18;
        *BOOL v19 = v17;
        unsigned int v17 = v19;
      }
      while (v18);
    }
    else
    {
      BOOL v19 = *(void **)(v2 + 808);
    }
    *(void *)(v2 + 816) = v19;
LABEL_28:
    *(void *)(v2 + 808) = 0;
    *(void *)(v2 + 824) = 0;
    *(void *)(v2 + 840) = 0;
    *(void *)(v2 + 832) = 0;
    unint64_t v20 = *(void **)(v2 + 864);
    uint64_t v21 = *(void **)(v2 + 856);
    if (v20)
    {
      if (!v21) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v22 = v21;
        uint64_t v21 = (void *)*v21;
        void *v22 = v20;
        unint64_t v20 = v22;
      }
      while (v21);
    }
    else
    {
      uint64_t v22 = *(void **)(v2 + 856);
    }
    *(void *)(v2 + 864) = v22;
LABEL_34:
    *(void *)(v2 + 856) = 0;
    *(void *)(v2 + 872) = 0;
    *(void *)(v2 + 888) = 0;
    *(void *)(v2 + 880) = 0;
    (*(void (**)(void, void))(v2 + 48))(*(void *)(v2 + 24), *(void *)(v2 + 472));
    *(void *)(v2 + 472) = 0;
    parserInit(v2, a2);
    uint64_t v23 = *(void *)(v2 + 696);
    uint64_t v24 = *(uint64_t **)(v23 + 40);
    if (v24) {
      uint64_t v25 = &v24[*(void *)(v23 + 56)];
    }
    else {
      uint64_t v25 = 0;
    }
    while (v24 != v25)
    {
      uint64_t v27 = *v24++;
      uint64_t v26 = v27;
      if (v27 && *(_DWORD *)(v26 + 28)) {
        (*(void (**)(void, void))(v2 + 48))(*(void *)(v2 + 24), *(void *)(v26 + 32));
      }
    }
    hashTableClear(v23);
    *(unsigned char *)(v23 + 259) = 0;
    hashTableClear(v23 + 264);
    hashTableClear(v23 + 40);
    hashTableClear(v23 + 80);
    hashTableClear(v23 + 120);
    int v29 = *(void **)(v23 + 160);
    int v28 = *(void **)(v23 + 168);
    if (v28)
    {
      if (!v29) {
        goto LABEL_47;
      }
      do
      {
        int v30 = v29;
        int v29 = (void *)*v29;
        *int v30 = v28;
        int v28 = v30;
      }
      while (v29);
    }
    else
    {
      int v30 = *(void **)(v23 + 160);
    }
    *(void *)(v23 + 168) = v30;
LABEL_47:
    *(void *)(v23 + 160) = 0;
    *(void *)(v23 + 184) = 0;
    *(void *)(v23 + 192) = 0;
    *(void *)(v23 + 176) = 0;
    int v32 = *(void **)(v23 + 208);
    uint64_t v31 = *(void **)(v23 + 216);
    if (v31)
    {
      if (!v32)
      {
LABEL_53:
        *(void *)(v23 + 208) = 0;
        *(void *)(v23 + 232) = 0;
        *(void *)(v23 + 240) = 0;
        *(void *)(v23 + 224) = 0;
        *(void *)(v23 + 304) = 0;
        *(void *)(v23 + 312) = 0;
        *(unsigned char *)(v23 + 320) = 0;
        (*(void (**)(void, void))(v2 + 48))(*(void *)(v2 + 24), *(void *)(v23 + 352));
        *(void *)(v23 + 352) = 0;
        (*(void (**)(void, void))(v2 + 48))(*(void *)(v2 + 24), *(void *)(v23 + 328));
        *(void *)(v23 + 328) = 0;
        *(void *)(v23 + 336) = 0;
        *(void *)(v23 + 344) = 0;
        uint64_t result = 1;
        *(_WORD *)(v23 + 256) = 1;
        *(unsigned char *)(v23 + 258) = 0;
        return result;
      }
      do
      {
        int v33 = v32;
        int v32 = (void *)*v32;
        void *v33 = v31;
        uint64_t v31 = v33;
      }
      while (v32);
    }
    else
    {
      int v33 = *(void **)(v23 + 208);
    }
    *(void *)(v23 + 216) = v33;
    goto LABEL_53;
  }
  return result;
}

unint64_t parserInit(uint64_t a1, unsigned __int8 *a2)
{
  *(void *)(a1 + 552) = prologInitProcessor;
  crnc3rdprtyrnm_XmlPrologStateInit(a1 + 520);
  if (a2) {
    *(void *)(a1 + 472) = copyString(a2, a1 + 24);
  }
  *(void *)(a1 + 704) = 0;
  crnc3rdprtyrnm_XmlInitEncoding(a1 + 320, (void *)(a1 + 312), 0);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = a1;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 674) = 0u;
  cstdlib_memset((void *)(a1 + 792), 0, 0x10uLL);
  *(_DWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(unsigned char *)(a1 + 608) = 1;
  *(_DWORD *)(a1 + 612) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 748) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 920) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  *(_WORD *)(a1 + 936) = 0;
  *(_DWORD *)(a1 + 940) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  cstdlib_memset((void *)(a1 + 952), 0, 0x28uLL);
  *(void *)(a1 + 968) = getDebugLevel("EXPAT_ACCOUNTING_DEBUG");
  *(_DWORD *)(a1 + 976) = 1120403456;
  *(void *)(a1 + 984) = 0x800000;
  cstdlib_memset((void *)(a1 + 992), 0, 0x18uLL);
  unint64_t result = getDebugLevel("EXPAT_ENTITY_DEBUG");
  *(void *)(a1 + 1008) = result;
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetEncoding(uint64_t result, unsigned __int8 *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((*(_DWORD *)(result + 928) | 2) == 3) {
      return 0;
    }
    (*(void (**)(void, void))(result + 48))(*(void *)(result + 24), *(void *)(result + 472));
    if (a2)
    {
      unint64_t result = (uint64_t)copyString(a2, v2 + 24);
      *(void *)(v2 + 472) = result;
      if (!result) {
        return result;
      }
    }
    else
    {
      *(void *)(v2 + 472) = 0;
    }
    return 1;
  }
  return result;
}

void *copyString(unsigned __int8 *a1, uint64_t a2)
{
  size_t v3 = 0;
  while (a1[v3++])
    ;
  int v5 = (void *)(*(uint64_t (**)(void, size_t))(a2 + 8))(*(void *)a2, v3);
  int v6 = v5;
  if (v5) {
    cstdlib_memcpy(v5, a1, v3);
  }
  return v6;
}

uint64_t crnc3rdprtyrnm_XML_ExternalEntityParserCreate(uint64_t a1, unsigned char *a2, unsigned __int8 *a3)
{
  if (!a1) {
    return 0;
  }
  long long v63 = *(_OWORD *)(a1 + 144);
  long long v64 = *(_OWORD *)(a1 + 128);
  long long v61 = *(_OWORD *)(a1 + 176);
  long long v62 = *(_OWORD *)(a1 + 160);
  long long v59 = *(_OWORD *)(a1 + 224);
  long long v60 = *(_OWORD *)(a1 + 208);
  long long v57 = *(_OWORD *)(a1 + 272);
  long long v58 = *(_OWORD *)(a1 + 240);
  long long v56 = *(_OWORD *)(a1 + 288);
  uint64_t v5 = *(void *)(a1 + 304);
  uint64_t v6 = *(void *)(a1 + 672);
  uint64_t v8 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 256);
  uint64_t v10 = *(void *)(a1 + 264);
  int v69 = *(_DWORD *)(a1 + 940);
  int v67 = *(_DWORD *)(a1 + 544);
  char v65 = *(unsigned char *)(a1 + 481);
  char v66 = *(unsigned char *)(a1 + 608);
  uint64_t v11 = *(void *)(a1 + 944);
  char v12 = *(unsigned char *)(a1 + 104);
  uint64_t v72 = *(void *)(a1 + 696);
  if (a2) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(a1 + 696);
  }
  if (*(unsigned char *)(a1 + 480))
  {
    __int16 v73 = *(unsigned __int8 *)(a1 + 916);
    uint64_t v14 = a1 + 24;
    uint64_t v15 = &v73;
    unsigned int v16 = a3;
  }
  else
  {
    uint64_t v14 = a1 + 24;
    unsigned int v16 = a3;
    uint64_t v15 = 0;
  }
  uint64_t v17 = parserCreate(v16, v14, v15, v13);
  uint64_t v18 = v17;
  if (v17)
  {
    *(_OWORD *)(v17 + 128) = v64;
    *(_OWORD *)(v17 + 144) = v63;
    *(_OWORD *)(v17 + 160) = v62;
    *(_OWORD *)(v17 + 176) = v61;
    *(_OWORD *)(v17 + 208) = v60;
    *(_OWORD *)(v17 + 224) = v59;
    *(_OWORD *)(v17 + 240) = v58;
    *(void *)(v17 + 264) = v10;
    *(_OWORD *)(v17 + 272) = v57;
    *(_OWORD *)(v17 + 288) = v56;
    *(void *)(v17 + 304) = v5;
    *(void *)(v17 + 672) = v6;
    if (v8 == v7) {
      uint64_t v19 = v8;
    }
    else {
      uint64_t v19 = v17;
    }
    *(void *)uint64_t v17 = v8;
    *(void *)(v17 + 8) = v19;
    if (v9 != a1) {
      *(void *)(v17 + 256) = v9;
    }
    *(unsigned char *)(v17 + 608) = v66;
    *(unsigned char *)(v17 + 481) = v65;
    *(void *)(v17 + 944) = v11;
    *(unsigned char *)(v17 + 104) = v12;
    *(void *)(v17 + 920) = a1;
    *(_DWORD *)(v17 + 940) = v69;
    *(_DWORD *)(v17 + 544) = v67;
    if (a2)
    {
      uint64_t v20 = *(void *)(v17 + 696);
      uint64_t v21 = *(char ****)(v72 + 120);
      if (v21) {
        uint64_t v22 = &v21[*(void *)(v72 + 136)];
      }
      else {
        uint64_t v22 = 0;
      }
      while (v21 != v22)
      {
        uint64_t v25 = *v21++;
        uint64_t v24 = v25;
        if (v25)
        {
          uint64_t v26 = (char *)poolCopyString((uint64_t *)(v20 + 160), *v24);
          if (!v26 || !lookup(a1, (uint64_t *)(v20 + 120), v26, 0x10uLL)) {
            goto LABEL_24;
          }
        }
      }
      int v28 = *(uint64_t **)(v72 + 80);
      if (v28) {
        int v29 = &v28[*(void *)(v72 + 96)];
      }
      else {
        int v29 = 0;
      }
      while (v28 != v29)
      {
        uint64_t v31 = *v28++;
        uint64_t v30 = v31;
        if (v31)
        {
          int v32 = *(unsigned char **)(v20 + 184);
          if (v32 == *(unsigned char **)(v20 + 176))
          {
            if (!poolGrow((uint64_t *)(v20 + 160))) {
              goto LABEL_24;
            }
            int v32 = *(unsigned char **)(v20 + 184);
          }
          *(void *)(v20 + 184) = v32 + 1;
          unsigned char *v32 = 0;
          uint64_t v33 = poolCopyString((uint64_t *)(v20 + 160), *(char **)v30);
          if (!v33) {
            goto LABEL_24;
          }
          int v34 = lookup(a1, (uint64_t *)(v20 + 80), (char *)(v33 + 1), 0x18uLL);
          if (!v34) {
            goto LABEL_24;
          }
          int v35 = v34;
          *((unsigned char *)v34 + 16) = *(unsigned char *)(v30 + 16);
          int v36 = *(char ***)(v30 + 8);
          if (v36)
          {
            *((unsigned char *)v34 + 17) = *(unsigned char *)(v30 + 17);
            int v37 = (void *)(v20 + 304);
            if (v36 != (char **)(v72 + 304)) {
              int v37 = lookup(a1, (uint64_t *)(v20 + 120), *v36, 0);
            }
            v35[1] = v37;
          }
        }
      }
      int v38 = *(uint64_t **)(v72 + 40);
      if (v38) {
        int v68 = &v38[*(void *)(v72 + 56)];
      }
      else {
        int v68 = 0;
      }
      while (v38 != v68)
      {
        uint64_t v40 = *v38++;
        uint64_t v39 = v40;
        if (v40)
        {
          int v70 = v38;
          int v41 = (char *)poolCopyString((uint64_t *)(v20 + 160), *(char **)v39);
          if (!v41) {
            goto LABEL_24;
          }
          int v42 = lookup(a1, (uint64_t *)(v20 + 40), v41, 0x28uLL);
          if (!v42) {
            goto LABEL_24;
          }
          int v43 = v42;
          uint64_t v44 = *(int *)(v39 + 24);
          if (v44)
          {
            uint64_t v45 = (*(uint64_t (**)(void, uint64_t))(v18 + 32))(*(void *)(v18 + 24), 24 * v44);
            v43[4] = v45;
            if (!v45) {
              goto LABEL_24;
            }
          }
          int v46 = *(char ***)(v39 + 16);
          if (v46) {
            v43[2] = lookup(a1, (uint64_t *)(v20 + 80), *v46, 0);
          }
          int v47 = *(_DWORD *)(v39 + 24);
          *((_DWORD *)v43 + 6) = v47;
          *((_DWORD *)v43 + 7) = v47;
          int v48 = *(char ***)(v39 + 8);
          if (v48)
          {
            v43[1] = lookup(a1, (uint64_t *)(v20 + 120), *v48, 0);
            int v47 = *((_DWORD *)v43 + 6);
          }
          int v38 = v70;
          if (v47 >= 1)
          {
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            do
            {
              int v51 = lookup(a1, (uint64_t *)(v20 + 80), **(char ***)(*(void *)(v39 + 32) + v49), 0);
              uint64_t v52 = v43[4] + v49;
              *(void *)uint64_t v52 = v51;
              uint64_t v53 = *(void *)(v39 + 32) + v49;
              *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
              int v54 = *(char **)(v53 + 16);
              if (v54)
              {
                uint64_t v55 = poolCopyString((uint64_t *)(v20 + 160), v54);
                *(void *)(v43[4] + v49 + 16) = v55;
                if (!v55) {
                  goto LABEL_24;
                }
              }
              else
              {
                *(void *)(v52 + 16) = 0;
              }
              ++v50;
              v49 += 24;
            }
            while (v50 < *((int *)v43 + 6));
            int v38 = v70;
          }
        }
      }
      if (!copyEntityTable(a1, (uint64_t *)v20, (uint64_t *)(v20 + 160), v72)
        || !copyEntityTable(a1, (uint64_t *)(v20 + 264), (uint64_t *)(v20 + 160), v72 + 264)
        || (*(_DWORD *)(v20 + 256) = *(_DWORD *)(v72 + 256),
            *(unsigned char *)(v20 + 320) = *(unsigned char *)(v72 + 320),
            *(void *)(v20 + 328) = *(void *)(v72 + 328),
            *(void *)(v20 + 336) = *(void *)(v72 + 336),
            *(_DWORD *)(v20 + 348) = *(_DWORD *)(v72 + 348),
            *(void *)(v20 + 352) = *(void *)(v72 + 352),
            !setContext(v18, a2)))
      {
LABEL_24:
        crnc3rdprtyrnm_XML_ParserFree(v18);
        return 0;
      }
      uint64_t v23 = externalEntityInitProcessor;
    }
    else
    {
      *(unsigned char *)(v17 + 936) = 1;
      crnc3rdprtyrnm_XmlPrologStateInitExternalEntity((void *)(v17 + 520));
      uint64_t v23 = externalParEntInitProcessor;
    }
    *(void *)(v18 + 552) = v23;
  }
  return v18;
}

uint64_t setContext(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  uint64_t v3 = 1;
  if (*a2)
  {
    uint64_t v5 = (uint64_t *)(a1 + 808);
    uint64_t v6 = *(uint64_t **)(a1 + 696);
    uint64_t v7 = (uint64_t *)(a1 + 728);
    uint64_t v8 = a2;
    while (1)
    {
      int v9 = *v2;
      if (*v2)
      {
        if (v9 == 61)
        {
          char v12 = *(unsigned char **)(a1 + 832);
          uint64_t v13 = v6 + 38;
          if (v12 == *(unsigned char **)(a1 + 840)) {
            goto LABEL_29;
          }
          if (v12 == *(unsigned char **)(a1 + 824))
          {
            if (!poolGrow(v5)) {
              return 0;
            }
            char v12 = *(unsigned char **)(a1 + 832);
          }
          *(void *)(a1 + 832) = v12 + 1;
          *char v12 = 0;
          uint64_t v14 = (char **)lookup(a1, v6 + 15, *(char **)(a1 + 840), 0x10uLL);
          if (!v14) {
            return 0;
          }
          uint64_t v13 = v14;
          uint64_t v15 = *(char **)(a1 + 840);
          if (*v14 == v15)
          {
            uint64_t v16 = poolCopyString(v6 + 20, *v14);
            *uint64_t v13 = v16;
            if (!v16) {
              return 0;
            }
            uint64_t v15 = *(char **)(a1 + 840);
          }
          *(void *)(a1 + 832) = v15;
LABEL_29:
          while (1)
          {
            int v19 = *++v2;
            int v18 = v19;
            if (!v19 || v18 == 12) {
              break;
            }
            uint64_t v17 = *(unsigned char **)(a1 + 832);
            if (v17 == *(unsigned char **)(a1 + 824))
            {
              if (!poolGrow(v5)) {
                return 0;
              }
              LOBYTE(v18) = *v2;
              uint64_t v17 = *(unsigned char **)(a1 + 832);
            }
            *(void *)(a1 + 832) = v17 + 1;
            *uint64_t v17 = v18;
          }
          uint64_t v21 = *(unsigned char **)(a1 + 832);
          if (v21 == *(unsigned char **)(a1 + 824))
          {
            if (!poolGrow(v5)) {
              return 0;
            }
            uint64_t v21 = *(unsigned char **)(a1 + 832);
          }
          *(void *)(a1 + 832) = v21 + 1;
          *uint64_t v21 = 0;
          if (addBinding(a1, v13, 0, *(unsigned __int8 **)(a1 + 840), v7)) {
            return 0;
          }
          *(void *)(a1 + 832) = *(void *)(a1 + 840);
          if (*v2) {
            uint64_t v8 = v2 + 1;
          }
          else {
            uint64_t v8 = v2;
          }
          goto LABEL_41;
        }
        if (v9 != 12)
        {
          uint64_t v22 = *(unsigned char **)(a1 + 832);
          if (v22 == *(unsigned char **)(a1 + 824))
          {
            if (!poolGrow(v5)) {
              return 0;
            }
            LOBYTE(v9) = *v2;
            uint64_t v22 = *(unsigned char **)(a1 + 832);
          }
          *(void *)(a1 + 832) = v22 + 1;
          unsigned char *v22 = v9;
          ++v2;
          goto LABEL_46;
        }
      }
      uint64_t v10 = *(unsigned char **)(a1 + 832);
      if (v10 == *(unsigned char **)(a1 + 824))
      {
        if (!poolGrow(v5)) {
          return 0;
        }
        uint64_t v10 = *(unsigned char **)(a1 + 832);
      }
      *(void *)(a1 + 832) = v10 + 1;
      unsigned char *v10 = 0;
      uint64_t v11 = lookup(a1, v6, *(char **)(a1 + 840), 0);
      if (v11) {
        *((unsigned char *)v11 + 56) = 1;
      }
      if (*v2) {
        uint64_t v8 = v2 + 1;
      }
      else {
        uint64_t v8 = v2;
      }
      *(void *)(a1 + 832) = *(void *)(a1 + 840);
LABEL_41:
      uint64_t v2 = v8;
LABEL_46:
      if (!*v8) {
        return 1;
      }
    }
  }
  return v3;
}

uint64_t crnc3rdprtyrnm_XML_ParserFree(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 712);
    if (v2) {
      goto LABEL_5;
    }
    while (1)
    {
      uint64_t v2 = *(void **)(v1 + 720);
      if (!v2) {
        break;
      }
      *(void *)(v1 + 720) = 0;
      do
      {
LABEL_5:
        uint64_t v3 = (void *)*v2;
        (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), v2[8]);
        uint64_t v4 = v2[10];
        if (v4)
        {
          do
          {
            uint64_t v5 = *(void *)(v4 + 8);
            (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v4 + 32));
            (*(void (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 24), v4);
            uint64_t v4 = v5;
          }
          while (v5);
        }
        (*(void (**)(void, void *))(v1 + 48))(*(void *)(v1 + 24), v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    uint64_t v6 = *(void *)(v1 + 592);
    if (v6) {
      goto LABEL_12;
    }
    while (1)
    {
      uint64_t v6 = *(void *)(v1 + 600);
      if (!v6) {
        break;
      }
      *(void *)(v1 + 600) = 0;
      do
      {
LABEL_12:
        uint64_t v7 = *(void *)(v6 + 16);
        (*(void (**)(void))(v1 + 48))(*(void *)(v1 + 24));
        uint64_t v6 = v7;
      }
      while (v7);
    }
    uint64_t v8 = *(void *)(v1 + 736);
    if (v8)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 8);
        (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v8 + 32));
        (*(void (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 24), v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    uint64_t v10 = *(void *)(v1 + 728);
    if (v10)
    {
      do
      {
        uint64_t v11 = *(void *)(v10 + 8);
        (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v10 + 32));
        (*(void (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 24), v10);
        uint64_t v10 = v11;
      }
      while (v11);
    }
    poolDestroy((void **)(v1 + 808));
    poolDestroy((void **)(v1 + 856));
    (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v1 + 472));
    if (!*(unsigned char *)(v1 + 936))
    {
      uint64_t v12 = *(void *)(v1 + 696);
      if (v12)
      {
        uint64_t v13 = *(uint64_t **)(v12 + 40);
        if (v13) {
          uint64_t v14 = &v13[*(void *)(v12 + 56)];
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(void *)(v1 + 920);
        while (v13 != v14)
        {
          uint64_t v17 = *v13++;
          uint64_t v16 = v17;
          if (v17 && *(_DWORD *)(v16 + 28)) {
            (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v16 + 32));
          }
        }
        hashTableDestroy((uint64_t *)v12);
        hashTableDestroy((uint64_t *)(v12 + 264));
        hashTableDestroy((uint64_t *)(v12 + 40));
        hashTableDestroy((uint64_t *)(v12 + 80));
        hashTableDestroy((uint64_t *)(v12 + 120));
        poolDestroy((void **)(v12 + 160));
        poolDestroy((void **)(v12 + 208));
        if (!v15)
        {
          (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v12 + 352));
          (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v12 + 328));
        }
        (*(void (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 24), v12);
      }
    }
    (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v1 + 760));
    (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v1 + 904));
    (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v1 + 16));
    (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v1 + 112));
    (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v1 + 768));
    (*(void (**)(void, void))(v1 + 48))(*(void *)(v1 + 24), *(void *)(v1 + 488));
    int v18 = *(void (**)(void))(v1 + 512);
    if (v18) {
      v18(*(void *)(v1 + 496));
    }
    int v19 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
    uint64_t v20 = *(void *)(v1 + 24);
    return v19(v20, v1);
  }
  return result;
}

uint64_t externalEntityInitProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = initializeEncoding(a1);
  if (!result)
  {
    *(void *)(a1 + 552) = externalEntityInitProcessor2;
    return externalEntityInitProcessor2(a1, a2, a3, a4);
  }
  return result;
}

uint64_t externalParEntInitProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = initializeEncoding(a1);
  if (!result)
  {
    *(unsigned char *)(*(void *)(a1 + 696) + 259) = 1;
    if (*(_DWORD *)(a1 + 544))
    {
      *(void *)(a1 + 552) = entityValueInitProcessor;
      return entityValueInitProcessor(a1, a2, a3, a4);
    }
    else
    {
      *(void *)(a1 + 552) = externalParEntProcessor;
      return externalParEntProcessor(a1, a2, a3, a4);
    }
  }
  return result;
}

void **poolDestroy(void **result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  if (*result)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t result = (void **)((uint64_t (*)(void))v1[5][3])(*v1[5]);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = v1[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      uint64_t result = (void **)((uint64_t (*)(void))v1[5][3])(*v1[5]);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_UseParserAsHandlerArg(uint64_t result)
{
  if (result) {
    *(void *)(result + 8) = result;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_UseForeignDTD(uint64_t a1, char a2)
{
  if (!a1) {
    return 41;
  }
  if ((*(_DWORD *)(a1 + 928) | 2) == 3) {
    return 26;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 937) = a2;
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetReturnNSTriplet(uint64_t result, int a2)
{
  if (result)
  {
    if ((*(_DWORD *)(result + 928) | 2) != 3) {
      *(unsigned char *)(result + 481) = a2 != 0;
    }
  }
  return result;
}

uint64_t *crnc3rdprtyrnm_XML_SetUserData(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = *result;
    uint64_t v2 = result[1];
    *uint64_t result = a2;
    if (v2 == v3) {
      result[1] = a2;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetBase(uint64_t result, char *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (a2)
    {
      uint64_t result = poolCopyString((uint64_t *)(*(void *)(result + 696) + 160), a2);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
    }
    *(void *)(v2 + 704) = result;
    return 1;
  }
  return result;
}

uint64_t poolCopyString(uint64_t *a1, char *a2)
{
  while (1)
  {
    uint64_t v4 = (unsigned char *)a1[3];
    if (v4 == (unsigned char *)a1[2]) {
      break;
    }
LABEL_4:
    char v5 = *a2;
    a1[3] = (uint64_t)(v4 + 1);
    unsigned char *v4 = v5;
    if (!*a2++)
    {
      uint64_t result = a1[4];
      a1[4] = a1[3];
      return result;
    }
  }
  if (poolGrow(a1))
  {
    uint64_t v4 = (unsigned char *)a1[3];
    goto LABEL_4;
  }
  return 0;
}

uint64_t crnc3rdprtyrnm_XML_GetBase(uint64_t result)
{
  if (result) {
    return *(void *)(result + 704);
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_GetSpecifiedAttributeCount(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 748);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t crnc3rdprtyrnm_XML_GetIdAttributeIndex(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 752);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t crnc3rdprtyrnm_XML_SetElementHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 128) = a2;
    *(void *)(result + 136) = a3;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetStartElementHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 128) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetEndElementHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 136) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetCharacterDataHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 144) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetProcessingInstructionHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 152) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetCommentHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 160) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetCdataSectionHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 168) = a2;
    *(void *)(result + 176) = a3;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetStartCdataSectionHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 168) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetEndCdataSectionHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 176) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetDefaultHandler(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)(result + 184) = a2;
    *(unsigned char *)(result + 608) = 0;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetDefaultHandlerExpand(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(void *)(result + 184) = a2;
    *(unsigned char *)(result + 608) = 1;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetDoctypeDeclHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 192) = a2;
    *(void *)(result + 200) = a3;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetStartDoctypeDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 192) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetEndDoctypeDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 200) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetUnparsedEntityDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 208) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetNotationDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 216) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetNamespaceDeclHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 224) = a2;
    *(void *)(result + 232) = a3;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetStartNamespaceDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 224) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetEndNamespaceDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 232) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetNotStandaloneHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 240) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetExternalEntityRefHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 248) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetExternalEntityRefHandlerArg(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2) {
      uint64_t v2 = a2;
    }
    else {
      uint64_t v2 = result;
    }
    *(void *)(result + 256) = v2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetSkippedEntityHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 264) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetUnknownEncodingHandler(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)(result + 272) = a2;
    *(void *)(result + 504) = a3;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetElementDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 280) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetAttlistDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 288) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetEntityDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 296) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetXmlDeclHandler(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 304) = a2;
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetParamEntityParsing(uint64_t result, int a2)
{
  if (result)
  {
    if ((*(_DWORD *)(result + 928) | 2) == 3)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 940) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetHashSalt(uint64_t result, uint64_t a2)
{
  while (result)
  {
    uint64_t v2 = result;
    uint64_t result = *(void *)(result + 920);
    if (!result)
    {
      if ((*(_DWORD *)(v2 + 928) | 2) == 3) {
        return 0;
      }
      *(void *)(v2 + 944) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_Parse(uint64_t a1, const void *a2, unsigned int a3, int a4)
{
  if (!a1 || (a3 & 0x80000000) != 0)
  {
    if (!a1) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!a2 && a3)
  {
LABEL_10:
    int v9 = 41;
    goto LABEL_11;
  }
  int v8 = *(_DWORD *)(a1 + 928);
  if (v8)
  {
    if (v8 == 2)
    {
      int v9 = 36;
      goto LABEL_11;
    }
    if (v8 == 3)
    {
      int v9 = 33;
LABEL_11:
      *(_DWORD *)(a1 + 560) = v9;
      return 0;
    }
  }
  else if (!*(void *)(a1 + 920) && !startParsing(a1))
  {
    int v9 = 1;
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 928) = 1;
  crnc3rdprtyrnm_XML_GetBuffer(a1, a3);
  if (!v11) {
    return 0;
  }
  if (a3) {
    cstdlib_memcpy(v11, a2, a3);
  }

  return crnc3rdprtyrnm_XML_ParseBuffer(a1, a3, a4);
}

uint64_t startParsing(uint64_t a1)
{
  if (!*(void *)(a1 + 944))
  {
    uint64_t __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    *(void *)(a1 + 944) = __buf;
  }
  if (*(unsigned char *)(a1 + 480)) {
    return setContext(a1, "xml=http://www.w3.org/XML/1998/namespace");
  }
  else {
    return 1;
  }
}

double crnc3rdprtyrnm_XML_GetBuffer(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_55;
    }
    int v3 = *(_DWORD *)(a1 + 928);
    if (v3 == 2)
    {
      int v4 = 36;
      goto LABEL_56;
    }
    if (v3 == 3)
    {
      int v4 = 33;
LABEL_56:
      *(_DWORD *)(a1 + 560) = v4;
      return result;
    }
    *(_DWORD *)(a1 + 108) = a2;
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 64);
      if (v6) {
        uint64_t v7 = v5 - v6;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (v7 < a2 || !*(void *)(a1 + 16))
    {
      uint64_t v8 = *(void *)(a1 + 64);
      if (v8)
      {
        uint64_t v9 = *(void *)(a1 + 56);
        if (v9) {
          int v10 = v8 - v9;
        }
        else {
          int v10 = 0;
        }
      }
      else
      {
        int v10 = 0;
      }
      int v11 = v10 + a2;
      if (v11 >= 0)
      {
        uint64_t v12 = *(void *)(a1 + 56);
        if (v12)
        {
          uint64_t v13 = *(void *)(a1 + 16);
          int v14 = v13 ? v12 - v13 : 0;
        }
        else
        {
          int v14 = 0;
        }
        int v15 = v14 >= 1024 ? 1024 : v14;
        if (v15 <= (v11 ^ 0x7FFFFFFF))
        {
          int v16 = v15 + v11;
          uint64_t v17 = *(void *)(a1 + 16);
          if (!v17) {
            goto LABEL_40;
          }
          if (v12)
          {
            LODWORD(v18) = v5 - v17;
            if (v5) {
              uint64_t v19 = v5 - v17;
            }
            else {
              uint64_t v19 = 0;
            }
            if (v19 >= v16)
            {
              if (v12 - v17 <= v15)
              {
LABEL_60:
                *(void *)(a1 + 584) = 0;
                double result = 0.0;
                *(_OWORD *)(a1 + 568) = 0u;
                return result;
              }
              uint64_t v20 = (int)v12 - (int)v17 - (uint64_t)v15;
              cstdlib_memmove(*(void **)(a1 + 16), (const void *)(v17 + v20), v8 - v12 + v15);
              uint64_t v21 = *(void *)(a1 + 56);
              *(void *)(a1 + 64) -= v20;
              uint64_t v22 = (char *)(v21 - v20);
LABEL_59:
              *(void *)(a1 + 56) = v22;
              goto LABEL_60;
            }
          }
          else
          {
            LODWORD(v18) = v5 - v17;
          }
          if (!v5 || !v18) {
LABEL_40:
          }
            LODWORD(v18) = 1024;
          do
            uint64_t v18 = (2 * v18);
          while ((int)v18 < v16 && (int)v18 > 0);
          if ((int)v18 > 0)
          {
            uint64_t v24 = (char *)(*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), v18);
            if (v24)
            {
              uint64_t v22 = v24;
              *(void *)(a1 + 72) = &v24[v18];
              uint64_t v26 = *(void *)(a1 + 56);
              if (v26)
              {
                uint64_t v27 = (const void *)(v26 - v15);
                uint64_t v28 = *(void *)(a1 + 64);
                uint64_t v29 = v28 - v26;
                if (!v28) {
                  uint64_t v29 = 0;
                }
                cstdlib_memcpy(v24, v27, v29 + v15);
                (*(void (**)(void, void))(a1 + 48))(*(void *)(a1 + 24), *(void *)(a1 + 16));
                *(void *)(a1 + 16) = v22;
                uint64_t v30 = *(void *)(a1 + 64);
                if (v30)
                {
                  uint64_t v31 = *(void *)(a1 + 56);
                  v30 -= v31;
                  if (!v31) {
                    uint64_t v30 = 0;
                  }
                }
                v22 += v15;
                *(void *)(a1 + 64) = &v22[v30];
              }
              else
              {
                *(void *)(a1 + 64) = v24;
                *(void *)(a1 + 16) = v24;
              }
              goto LABEL_59;
            }
          }
        }
      }
LABEL_55:
      int v4 = 1;
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_ParseBuffer(uint64_t a1, int a2, int a3)
{
  if (!a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 928);
  if (v6)
  {
    if (v6 == 2)
    {
      uint64_t v7 = 0;
      int v8 = 36;
      goto LABEL_23;
    }
    if (v6 == 3)
    {
      uint64_t v7 = 0;
      int v8 = 33;
LABEL_23:
      *(_DWORD *)(a1 + 560) = v8;
      return v7;
    }
  }
  else
  {
    if (!*(void *)(a1 + 56))
    {
      uint64_t v7 = 0;
      int v8 = 42;
      goto LABEL_23;
    }
    if (!*(void *)(a1 + 920) && !startParsing(a1))
    {
      uint64_t v7 = 0;
      int v8 = 1;
      goto LABEL_23;
    }
  }
  *(_DWORD *)(a1 + 928) = 1;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 584) = v9;
  uint64_t v10 = *(void *)(a1 + 64) + a2;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 80) += a2;
  *(void *)(a1 + 88) = v10;
  *(unsigned char *)(a1 + 932) = a3;
  int v11 = callProcessor(a1, v9, v10, (void *)(a1 + 56));
  *(_DWORD *)(a1 + 560) = v11;
  if (!v11)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 928);
    if (v12 >= 2)
    {
      if (v12 == 3) {
        uint64_t v7 = 2;
      }
      else {
        uint64_t v7 = 1;
      }
    }
    else
    {
      if (a3)
      {
        *(_DWORD *)(a1 + 928) = 2;
        return 1;
      }
      uint64_t v7 = 1;
    }
    (*(void (**)(void))(*(void *)(a1 + 312) + 96))();
    *(void *)(a1 + 584) = *(void *)(a1 + 56);
    return v7;
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 576) = *(void *)(a1 + 568);
  *(void *)(a1 + 552) = errorProcessor;
  return v7;
}

uint64_t callProcessor(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = a3 - a2;
  }
  if (!*(unsigned char *)(a1 + 104) || *(unsigned char *)(a1 + 932)) {
    goto LABEL_19;
  }
  unint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    v9 -= v10;
    if (!v10) {
      unint64_t v9 = 0;
    }
  }
  BOOL v11 = v9 >= 0x400;
  unint64_t v12 = v9 - 1024;
  if (!v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 72);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    v13 -= v14;
    if (!v14) {
      uint64_t v13 = 0;
    }
  }
  if (v8 < 2 * *(void *)(a1 + 96) && v13 + v12 >= *(int *)(a1 + 108))
  {
    uint64_t result = 0;
    *a4 = a2;
  }
  else
  {
LABEL_19:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 552))(a1, a2);
    if (!result)
    {
      uint64_t result = 0;
      if (*a4 == a2) {
        *(void *)(a1 + 96) = v8;
      }
      else {
        *(void *)(a1 + 96) = 0;
      }
    }
  }
  return result;
}

uint64_t errorProcessor(uint64_t a1)
{
  return *(unsigned int *)(a1 + 560);
}

uint64_t crnc3rdprtyrnm_XML_StopParser(uint64_t a1, int a2)
{
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 928);
    if (v2 == 2)
    {
      uint64_t v3 = 0;
      int v4 = 36;
      goto LABEL_11;
    }
    if (v2 == 3)
    {
      if (a2)
      {
        uint64_t v3 = 0;
        int v4 = 33;
LABEL_11:
        *(_DWORD *)(a1 + 560) = v4;
        return v3;
      }
    }
    else if (a2)
    {
      if (*(unsigned char *)(a1 + 936))
      {
        uint64_t v3 = 0;
        int v4 = 37;
        goto LABEL_11;
      }
      int v5 = 3;
LABEL_14:
      *(_DWORD *)(a1 + 928) = v5;
      return 1;
    }
    int v5 = 2;
    goto LABEL_14;
  }
  return 0;
}

uint64_t crnc3rdprtyrnm_XML_ResumeParser(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 928) == 3)
  {
    *(_DWORD *)(a1 + 928) = 1;
    int v2 = callProcessor(a1, *(void *)(a1 + 56), *(void *)(a1 + 88), (void *)(a1 + 56));
    *(_DWORD *)(a1 + 560) = v2;
    if (!v2)
    {
      unsigned int v4 = *(_DWORD *)(a1 + 928);
      if (v4 >= 2)
      {
        if (v4 == 3) {
          uint64_t v3 = 2;
        }
        else {
          uint64_t v3 = 1;
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + 932))
        {
          *(_DWORD *)(a1 + 928) = 2;
          return 1;
        }
        uint64_t v3 = 1;
      }
      (*(void (**)(void))(*(void *)(a1 + 312) + 96))();
      *(void *)(a1 + 584) = *(void *)(a1 + 56);
      return v3;
    }
    uint64_t v3 = 0;
    *(void *)(a1 + 576) = *(void *)(a1 + 568);
    *(void *)(a1 + 552) = errorProcessor;
  }
  else
  {
    uint64_t v3 = 0;
    *(_DWORD *)(a1 + 560) = 34;
  }
  return v3;
}

uint64_t crnc3rdprtyrnm_XML_GetParsingStatus(uint64_t result, void *a2)
{
  if (result) {
    *a2 = *(void *)(result + 928);
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_GetErrorCode(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 560);
  }
  else {
    return 41;
  }
}

uint64_t crnc3rdprtyrnm_XML_GetCurrentByteIndex(void *a1)
{
  if (a1 && (uint64_t v1 = a1[71]) != 0) {
    return a1[10] + v1 - a1[11];
  }
  else {
    return -1;
  }
}

uint64_t crnc3rdprtyrnm_XML_GetCurrentByteCount(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 576);
    if (v1)
    {
      uint64_t v2 = *(void *)(result + 568);
      unsigned int v3 = v1 - v2;
      if (v2) {
        return v3;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_GetInputContext(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 568);
    if (v4)
    {
      uint64_t result = *(void *)(result + 16);
      if (result)
      {
        if (a2) {
          *a2 = v4 - result;
        }
        if (a3) {
          *a3 = *(_DWORD *)(v3 + 64) - result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *crnc3rdprtyrnm_XML_GetCurrentLineNumber(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = result[71];
    if (v2)
    {
      if (v2 >= result[73])
      {
        (*(void (**)(void))(result[39] + 96))();
        v1[73] = v1[71];
      }
    }
    return (void *)(v1[99] + 1);
  }
  return result;
}

void *crnc3rdprtyrnm_XML_GetCurrentColumnNumber(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = result[71];
    if (v2)
    {
      if (v2 >= result[73])
      {
        (*(void (**)(void))(result[39] + 96))();
        v1[73] = v1[71];
      }
    }
    return (void *)v1[100];
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_FreeContentModel(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 48))(*(void *)(result + 24));
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_MemMalloc(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 32))(*(void *)(result + 24));
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_MemRealloc(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 40))(*(void *)(result + 24));
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_MemFree(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 48))(*(void *)(result + 24));
  }
  return result;
}

void *crnc3rdprtyrnm_XML_DefaultCurrent(void *result)
{
  if (result && result[23])
  {
    uint64_t v1 = (uint64_t *)result[74];
    if (v1)
    {
      uint64_t v2 = result[58];
      uint64_t v3 = *v1;
      uint64_t v4 = v1[1];
    }
    else
    {
      uint64_t v2 = result[39];
      uint64_t v3 = result[71];
      uint64_t v4 = result[72];
    }
    return (void *)reportDefault(result, v2, v3, v4);
  }
  return result;
}

uint64_t reportDefault(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a3;
  if (*(unsigned char *)(a2 + 132))
  {
    int v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))a1[23];
    uint64_t v7 = a1[1];
    uint64_t v9 = (a4 - a3);
    return v6(v7, a3, v9);
  }
  else
  {
    if (a1[39] == a2)
    {
      unint64_t v12 = a1 + 71;
      uint64_t v13 = a1 + 72;
    }
    else
    {
      unint64_t v12 = (void *)a1[74];
      uint64_t v13 = v12 + 1;
    }
    do
    {
      uint64_t v14 = a1[15];
      uint64_t v16 = a1[14];
      unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v17, a4, &v16, v14);
      *uint64_t v13 = v17;
      uint64_t result = ((uint64_t (*)(void, void, void))a1[23])(a1[1], a1[14], v16 - a1[14]);
      *unint64_t v12 = v17;
    }
    while (v15 > 1);
  }
  return result;
}

char *crnc3rdprtyrnm_XML_ErrorString(int a1)
{
  if ((a1 - 1) > 0x2A) {
    return 0;
  }
  else {
    return off_26455D680[a1 - 1];
  }
}

const char *crnc3rdprtyrnm_XML_ExpatVersion()
{
  return "expat_2.6.2";
}

uint64_t crnc3rdprtyrnm_XML_ExpatVersionInfo()
{
  return 0x600000002;
}

void *crnc3rdprtyrnm_XML_GetFeatureList()
{
  return &crnc3rdprtyrnm_XML_GetFeatureList_features;
}

uint64_t crnc3rdprtyrnm_XML_SetBillionLaughsAttackProtectionMaximumAmplification(uint64_t result, float a2)
{
  if (result)
  {
    if (a2 >= 1.0 && *(void *)(result + 920) == 0)
    {
      *(float *)(result + 976) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetBillionLaughsAttackProtectionActivationThreshold(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 920))
    {
      return 0;
    }
    else
    {
      *(void *)(result + 984) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_XML_SetReparseDeferralEnabled(uint64_t a1, unsigned int a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2 <= 1)
    {
      *(unsigned char *)(a1 + 104) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t crnc3rdprtyrnm_testingAccountingGetCountBytesDirect(uint64_t result)
{
  if (result) {
    return *(void *)(result + 952);
  }
  return result;
}

uint64_t crnc3rdprtyrnm_testingAccountingGetCountBytesIndirect(uint64_t result)
{
  if (result) {
    return *(void *)(result + 960);
  }
  return result;
}

char *crnc3rdprtyrnm_unsignedCharToPrintable(int a1)
{
  return off_26455D7D8[a1 ^ 0x80u];
}

uint64_t prologInitProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = initializeEncoding(a1);
  if (!result)
  {
    *(void *)(a1 + 552) = prologProcessor;
    return prologProcessor(a1, a2, a3, a4);
  }
  return result;
}

unint64_t getDebugLevel(const char *a1)
{
  uint64_t v1 = getenv(a1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)v1;
  *__error() = 0;
  int v5 = 0;
  unint64_t v3 = cstdlib_strtoul(v2, &v5, 0xAu);
  if (*__error() || v5 == v2 || *v5)
  {
    unint64_t v3 = 0;
    *__error() = 0;
  }
  return v3;
}

uint64_t initializeEncoding(uint64_t a1)
{
  uint64_t v2 = crnc3rdprtyrnm_XmlInitEncodingNS;
  if (!*(unsigned char *)(a1 + 480)) {
    uint64_t v2 = crnc3rdprtyrnm_XmlInitEncoding;
  }
  if (v2(a1 + 320, (void *)(a1 + 312), *(unsigned __int8 **)(a1 + 472))) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 472);

  return handleUnknownEncoding(a1, v4);
}

uint64_t prologProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = a2;
  uint64_t v8 = (**(uint64_t (***)(void))(a1 + 312))();
  return doProlog((void *)a1, *(void *)(a1 + 312), a2, a3, v8, v10, a4, *(unsigned char *)(a1 + 932) == 0, 1, 0);
}

uint64_t handleUnknownEncoding(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int (**)(void, uint64_t, unsigned char *))(a1 + 272);
  if (!v2) {
    return 18;
  }
  memset(__b, 255, sizeof(__b));
  uint64_t v14 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  if (!v2(*(void *)(a1 + 504), a2, __b))
  {
LABEL_8:
    if (v16) {
      v16(v14);
    }
    return 18;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(uint64_t (**)(uint64_t, void))(a1 + 32);
  int v7 = crnc3rdprtyrnm_XmlSizeOfUnknownEncoding();
  uint64_t v8 = v6(v5, v7);
  *(void *)(a1 + 488) = v8;
  if (v8)
  {
    uint64_t v9 = (uint64_t (*)(void))crnc3rdprtyrnm_XmlInitUnknownEncodingNS;
    if (!*(unsigned char *)(a1 + 480)) {
      uint64_t v9 = (uint64_t (*)(void))crnc3rdprtyrnm_XmlInitUnknownEncoding;
    }
    uint64_t v10 = v9();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t result = 0;
      *(void *)(a1 + 496) = v14;
      *(void *)(a1 + 512) = v16;
      *(void *)(a1 + 312) = v11;
      return result;
    }
    goto LABEL_8;
  }
  if (v16) {
    v16(v14);
  }
  return 1;
}

uint64_t doProlog(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, char a9, int a10)
{
  uint64_t v13 = a2;
  uint64_t v14 = (uint64_t)a1;
  uint64_t v172 = a6;
  uint64_t v15 = a1[87];
  if (a1[39] == a2)
  {
    uint64_t v170 = a1 + 71;
    uint64_t v16 = a1 + 72;
  }
  else
  {
    uint64_t v170 = (uint64_t *)a1[74];
    uint64_t v16 = v170 + 1;
  }
  id v171 = v16;
  uint64_t v17 = (unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 65);
  id v163 = (uint64_t *)(v15 + 264);
  v164 = a1 + 82;
  id v168 = a1 + 101;
  uint64_t v166 = (uint64_t *)(v15 + 160);
  unint64_t v167 = a1 + 103;
  while (2)
  {
    *uint64_t v170 = a3;
    uint64_t v18 = v172;
    *id v171 = v172;
    if ((int)a5 <= 0)
    {
      if (a8 && a5)
      {
LABEL_358:
        uint64_t v19 = 0;
        *a7 = a3;
        return v19;
      }
      if (a5 != -15)
      {
        uint64_t v19 = 5;
        switch((int)a5)
        {
          case -4:
            if (v13 == *(void *)(v14 + 312))
            {
              if (!*(unsigned char *)(v14 + 936)) {
                return 3;
              }
            }
            else if (!*(unsigned char *)(*(void *)(v14 + 592) + 36))
            {
              goto LABEL_358;
            }
            if ((*v17)(v14 + 520, 4294967292, a4, a4, v13) != -1) {
              goto LABEL_358;
            }
            uint64_t v19 = 29;
            break;
          case -2:
            return 6;
          case -1:
            return v19;
          case 0:
            *uint64_t v170 = v18;
            return 4;
          default:
            a5 = -(int)a5;
            uint64_t v172 = a4;
            uint64_t v18 = a4;
            goto LABEL_12;
        }
        return v19;
      }
      a5 = 15;
    }
LABEL_12:
    unsigned int v20 = (*v17)(v14 + 520, a5, a3, v18, v13);
    BOOL v21 = v20 > 0x39 || ((1 << v20) & 0x200000000000006) == 0;
    if (v21 && !accountingDiffTolerated(v14, a5, a3, v172, a10)) {
      return 43;
    }
    int v22 = 0;
    int v23 = 1;
    switch(v20)
    {
      case 0xFFFFFFFF:
        if (a5 == 12) {
          unsigned int v158 = 17;
        }
        else {
          unsigned int v158 = 2;
        }
        if (a5 == 28) {
          return 10;
        }
        else {
          return v158;
        }
      case 0u:
        if (a5 != 14) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 1u:
        uint64_t v53 = v172;
        uint64_t v54 = v14;
        uint64_t v55 = 0;
        goto LABEL_255;
      case 2u:
        if (!*(unsigned char *)(v14 + 937)) {
          goto LABEL_390;
        }
        char v159 = *(unsigned char *)(v15 + 257);
        *(unsigned char *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 940) || !*(void *)(v14 + 248)) {
          goto LABEL_390;
        }
        uint64_t v160 = lookup(v14, v163, "#", 0x40uLL);
        if (!v160) {
          return 1;
        }
        v160[4] = *(void *)(v14 + 704);
        *(unsigned char *)(v15 + 259) = 0;
        if (!(*(unsigned int (**)(void, void))(v14 + 248))(*(void *)(v14 + 256), 0)) {
          return 21;
        }
        if (*(unsigned char *)(v15 + 259))
        {
          if (!*(unsigned char *)(v15 + 258))
          {
            uint64_t v161 = *(unsigned int (**)(void))(v14 + 240);
            if (v161)
            {
              if (!v161(*(void *)(v14 + 8))) {
                return 22;
              }
            }
          }
        }
        else
        {
          *(unsigned char *)(v15 + 257) = v159;
        }
LABEL_390:
        *(void *)(v14 + 552) = contentProcessor;
        return contentProcessor(v14, a3, a4, a7);
      case 3u:
        if (!*(void *)(v14 + 192)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 4u:
        if (!*(void *)(v14 + 192)) {
          goto LABEL_98;
        }
        uint64_t v56 = poolStoreString(v168, v13, a3, v172);
        *(void *)(v14 + 624) = v56;
        if (!v56) {
          return 1;
        }
        int v23 = 0;
        *(void *)(v14 + 840) = *(void *)(v14 + 832);
        *(void *)(v14 + 640) = 0;
LABEL_98:
        *(void *)(v14 + 632) = 0;
        goto LABEL_340;
      case 5u:
        *(unsigned char *)(v14 + 937) = 0;
        *(unsigned char *)(v15 + 257) = 1;
        if (*(void *)(v14 + 192))
        {
          uint64_t v57 = poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
          *(void *)(v14 + 632) = v57;
          if (!v57) {
            return 1;
          }
          int v23 = 0;
          *(void *)(v14 + 840) = *(void *)(v14 + 832);
        }
        else
        {
          *(void *)(v14 + 632) = "#";
        }
        if (!*(unsigned char *)(v15 + 258) && !*(_DWORD *)(v14 + 940))
        {
          uint64_t v135 = *(unsigned int (**)(void))(v14 + 240);
          if (v135)
          {
            if (!v135(*(void *)(v14 + 8))) {
              return 22;
            }
          }
        }
        if (*(void *)(v14 + 616)) {
          goto LABEL_277;
        }
        uint64_t v136 = lookup(v14, v163, "#", 0x40uLL);
        *(void *)(v14 + 616) = v136;
        if (!v136) {
          return 1;
        }
        v136[5] = 0;
LABEL_277:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 616)) {
          goto LABEL_340;
        }
        uint64_t v137 = poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        uint64_t v138 = *(void *)(v14 + 616);
        *(void *)(v138 + 24) = v137;
        if (!v137) {
          return 1;
        }
        *(void *)(v138 + 32) = *(void *)(v14 + 704);
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (v20 == 13) {
          goto LABEL_281;
        }
        goto LABEL_340;
      case 6u:
        *(unsigned char *)(v14 + 937) = 0;
        long long v58 = lookup(v14, v163, "#", 0x40uLL);
        *(void *)(v14 + 616) = v58;
        uint64_t v19 = 1;
        if (!v58) {
          return v19;
        }
        *(unsigned char *)(v15 + 257) = 1;
        if (*(void *)(v14 + 192))
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170)) {
            return 32;
          }
          long long v59 = (unsigned char *)poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
          if (!v59) {
            return v19;
          }
          long long v60 = v59;
          normalizePublicId(v59);
          int v23 = 0;
          *(void *)(v14 + 840) = *(void *)(v14 + 832);
          *(void *)(v14 + 640) = v60;
        }
        else
        {
LABEL_107:
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170)) {
            return 32;
          }
        }
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 616)) {
          goto LABEL_340;
        }
        long long v61 = (unsigned char *)poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v61) {
          return 1;
        }
        long long v62 = v61;
        normalizePublicId(v61);
        *(void *)(*(void *)(v14 + 616) + 40) = v62;
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (v20 != 14) {
          goto LABEL_340;
        }
LABEL_281:
        if (!*(void *)(v14 + 296)) {
          goto LABEL_340;
        }
        goto LABEL_343;
      case 7u:
        long long v63 = *(void (**)(void, void, void, void, uint64_t))(v14 + 192);
        if (!v63) {
          goto LABEL_341;
        }
        v63(*(void *)(v14 + 8), *(void *)(v14 + 624), *(void *)(v14 + 632), *(void *)(v14 + 640), 1);
        *(void *)(v14 + 624) = 0;
        long long v64 = *(void **)(v14 + 816);
        uint64_t v44 = *(void **)(v14 + 808);
        if (!v64) {
          goto LABEL_266;
        }
        if (!v44) {
          goto LABEL_268;
        }
        do
        {
          uint64_t v45 = v44;
          uint64_t v44 = (void *)*v44;
          void *v45 = v64;
          long long v64 = v45;
        }
        while (v44);
        goto LABEL_267;
      case 8u:
        if (a9 != 1) {
          return 4;
        }
        uint64_t v65 = *(void *)(v14 + 624);
        if (!v65) {
          goto LABEL_306;
        }
        (*(void (**)(void, uint64_t, void, void, void))(v14 + 192))(*(void *)(v14 + 8), v65, *(void *)(v14 + 632), *(void *)(v14 + 640), 0);
        char v66 = *(void **)(v14 + 816);
        int v67 = *(void **)(v14 + 808);
        if (v66)
        {
          if (!v67) {
            goto LABEL_305;
          }
          do
          {
            int v68 = v67;
            int v67 = (void *)*v67;
            *int v68 = v66;
            char v66 = v68;
          }
          while (v67);
        }
        else
        {
          int v68 = *(void **)(v14 + 808);
        }
        *(void *)(v14 + 816) = v68;
LABEL_305:
        int v23 = 0;
        *id v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *unint64_t v167 = 0;
LABEL_306:
        if (!*(void *)(v14 + 632) && !*(unsigned char *)(v14 + 937)) {
          goto LABEL_338;
        }
        char v147 = *(unsigned char *)(v15 + 257);
        *(unsigned char *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 940) || !*(void *)(v14 + 248)) {
          goto LABEL_337;
        }
        uint64_t v148 = lookup(v14, v163, "#", 0x40uLL);
        if (!v148) {
          return 1;
        }
        if (*(unsigned char *)(v14 + 937))
        {
          uint64_t v149 = *(void *)(v14 + 704);
          v148[4] = v149;
        }
        else
        {
          uint64_t v149 = v148[4];
        }
        *(unsigned char *)(v15 + 259) = 0;
        if (!(*(unsigned int (**)(void, void, uint64_t, void, void))(v14 + 248))(*(void *)(v14 + 256), 0, v149, v148[3], v148[5]))return 21; {
        if (*(unsigned char *)(v15 + 259))
        }
        {
          if (!*(unsigned char *)(v15 + 258))
          {
            v154 = *(unsigned int (**)(void))(v14 + 240);
            if (v154)
            {
              if (!v154(*(void *)(v14 + 8))) {
                return 22;
              }
            }
          }
        }
        else if (!*(void *)(v14 + 632))
        {
          *(unsigned char *)(v15 + 257) = v147;
        }
LABEL_337:
        *(unsigned char *)(v14 + 937) = 0;
LABEL_338:
        id v155 = *(void (**)(void))(v14 + 200);
        if (!v155) {
          goto LABEL_340;
        }
        v155(*(void *)(v14 + 8));
        goto LABEL_343;
      case 9u:
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 88))(v13, a3, v172)) {
          goto LABEL_136;
        }
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_135;
        }
        int v69 = (char *)poolStoreString(v166, v13, a3, v172);
        if (!v69) {
          return 1;
        }
        int v70 = v69;
        int v71 = lookup(v14, (uint64_t *)v15, v69, 0x40uLL);
        *(void *)(v14 + 616) = v71;
        if (!v71) {
          return 1;
        }
        if ((char *)*v71 != v70)
        {
LABEL_135:
          *(void *)(v15 + 184) = *(void *)(v15 + 192);
LABEL_136:
          *(void *)(v14 + 616) = 0;
          goto LABEL_341;
        }
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        v71[5] = 0;
        *((unsigned char *)v71 + 57) = 0;
        if (*(void *)(v14 + 920)) {
          BOOL v72 = 1;
        }
        else {
LABEL_314:
        }
          BOOL v72 = *(void *)(v14 + 592) != 0;
LABEL_315:
        *((unsigned char *)v71 + 58) = !v72;
LABEL_316:
        if (!*(void *)(v14 + 296)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 0xAu:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_135;
        }
        __int16 v73 = (char *)poolStoreString(v166, v13, a3, v172);
        if (!v73) {
          return 1;
        }
        int v74 = v73;
        int v71 = lookup(v14, v163, v73, 0x40uLL);
        *(void *)(v14 + 616) = v71;
        if (!v71) {
          return 1;
        }
        if ((char *)*v71 != v74) {
          goto LABEL_135;
        }
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        v71[5] = 0;
        BOOL v72 = 1;
        *((unsigned char *)v71 + 57) = 1;
        if (!*(void *)(v14 + 920)) {
          goto LABEL_314;
        }
        goto LABEL_315;
      case 0xBu:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_341;
        }
        goto LABEL_316;
      case 0xCu:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_341;
        }
        uint64_t v19 = storeEntityValue(v14, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128), 2);
        uint64_t v75 = *(void *)(v14 + 616);
        uint64_t v76 = *(void *)(v15 + 240);
        if (v75)
        {
          *(void *)(v75 + 8) = v76;
          uint64_t v77 = *(void *)(v15 + 232);
          *(_DWORD *)(v75 + 16) = v77 - v76;
          *(void *)(v15 + 240) = v77;
          if (*(void *)(v14 + 296))
          {
            *id v171 = a3;
            (*(void (**)(void, void, void, void, void, void, void, void, void))(v14 + 296))(*(void *)(v14 + 8), **(void **)(v14 + 616), *(unsigned __int8 *)(*(void *)(v14 + 616) + 57), *(void *)(*(void *)(v14 + 616) + 8), *(unsigned int *)(*(void *)(v14 + 616) + 16), *(void *)(v14 + 704), 0, 0, 0);
            int v23 = 0;
          }
        }
        else
        {
          *(void *)(v15 + 232) = v76;
        }
        if (v19) {
          return v19;
        }
        goto LABEL_340;
      case 0xDu:
        goto LABEL_277;
      case 0xEu:
        goto LABEL_107;
      case 0xFu:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 616) || !*(void *)(v14 + 296)) {
          goto LABEL_341;
        }
        *id v171 = a3;
        (*(void (**)(void, void, void, void, void, void, void, void, void))(v14 + 296))(*(void *)(v14 + 8), **(void **)(v14 + 616), *(unsigned __int8 *)(*(void *)(v14 + 616) + 57), 0, 0, *(void *)(*(void *)(v14 + 616) + 32), *(void *)(*(void *)(v14 + 616) + 24), *(void *)(*(void *)(v14 + 616) + 40), 0);
        goto LABEL_343;
      case 0x10u:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 616)) {
          goto LABEL_341;
        }
        uint64_t v78 = poolStoreString(v166, v13, a3, v172);
        *(void *)(*(void *)(v14 + 616) + 48) = v78;
        if (!v78) {
          return 1;
        }
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (*(void *)(v14 + 208))
        {
          *id v171 = a3;
          (*(void (**)(void, void, void, void, void, void))(v14 + 208))(*(void *)(v14 + 8), **(void **)(v14 + 616), *(void *)(*(void *)(v14 + 616) + 32), *(void *)(*(void *)(v14 + 616) + 24), *(void *)(*(void *)(v14 + 616) + 40), *(void *)(*(void *)(v14 + 616) + 48));
          goto LABEL_343;
        }
        if (!*(void *)(v14 + 296)) {
          goto LABEL_341;
        }
        *id v171 = a3;
        (*(void (**)(void, void, void, void, void, void, void, void, void))(v14 + 296))(*(void *)(v14 + 8), **(void **)(v14 + 616), 0, 0, 0, *(void *)(*(void *)(v14 + 616) + 32), *(void *)(*(void *)(v14 + 616) + 24), *(void *)(*(void *)(v14 + 616) + 40), *(void *)(*(void *)(v14 + 616) + 48));
        goto LABEL_343;
      case 0x11u:
        if (!*(void *)(v14 + 216)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 0x12u:
        uint64_t *v164 = 0;
        v164[1] = 0;
        if (!*(void *)(v14 + 216)) {
          goto LABEL_341;
        }
        uint64_t v79 = poolStoreString(v168, v13, a3, v172);
        uint64_t *v164 = v79;
        if (!v79) {
          return 1;
        }
        goto LABEL_179;
      case 0x13u:
        if (!*v164 || !*(void *)(v14 + 216)) {
          goto LABEL_161;
        }
        uint64_t v80 = poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v80) {
          return 1;
        }
        *id v171 = a3;
        (*(void (**)(void, void, void, uint64_t, void))(v14 + 216))(*(void *)(v14 + 8), *(void *)(v14 + 656), *(void *)(v14 + 704), v80, *(void *)(v14 + 664));
        int v23 = 0;
LABEL_161:
        int v81 = *(void **)(v14 + 816);
        int v35 = *(void **)(v14 + 808);
        if (!v81) {
          goto LABEL_172;
        }
        if (!v35) {
          goto LABEL_174;
        }
        do
        {
          int v36 = v35;
          int v35 = (void *)*v35;
          *int v36 = v81;
          int v81 = v36;
        }
        while (v35);
        goto LABEL_173;
      case 0x14u:
        if (*(void *)(v14 + 664) && *(void *)(v14 + 216))
        {
          *id v171 = a3;
          (*(void (**)(void, void, void, void, void))(v14 + 216))(*(void *)(v14 + 8), *(void *)(v14 + 656), *(void *)(v14 + 704), 0, *(void *)(v14 + 664));
          int v23 = 0;
        }
        int v82 = *(void **)(v14 + 816);
        int v35 = *(void **)(v14 + 808);
        if (!v82) {
          goto LABEL_172;
        }
        if (!v35) {
          goto LABEL_174;
        }
        do
        {
          int v36 = v35;
          int v35 = (void *)*v35;
          *int v36 = v82;
          int v82 = v36;
        }
        while (v35);
        goto LABEL_173;
      case 0x15u:
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v13 + 104))(v13, a3, v172, v170)) {
          return 32;
        }
        if (!*v164) {
          goto LABEL_341;
        }
        int v83 = (unsigned char *)poolStoreString(v168, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v83) {
          return 1;
        }
        int v84 = v83;
        normalizePublicId(v83);
        *(void *)(v14 + 664) = v84;
LABEL_179:
        *(void *)(v14 + 840) = *(void *)(v14 + 832);
        goto LABEL_343;
      case 0x16u:
        AttributeId = getAttributeId(v14, v13, a3, v172);
        *(void *)(v14 + 680) = AttributeId;
        if (!AttributeId) {
          return 1;
        }
        *(_WORD *)(v14 + 688) = 0;
        *(void *)(v14 + 648) = 0;
        goto LABEL_191;
      case 0x17u:
        *(unsigned char *)(v14 + 688) = 1;
        int v86 = "CDATA";
        goto LABEL_190;
      case 0x18u:
        *(unsigned char *)(v14 + 689) = 1;
        int v86 = "ID";
        goto LABEL_190;
      case 0x19u:
        int v86 = "IDREF";
        goto LABEL_190;
      case 0x1Au:
        int v86 = "IDREFS";
        goto LABEL_190;
      case 0x1Bu:
        int v86 = "ENTITY";
        goto LABEL_190;
      case 0x1Cu:
        int v86 = "ENTITIES";
        goto LABEL_190;
      case 0x1Du:
        int v86 = "NMTOKEN";
        goto LABEL_190;
      case 0x1Eu:
        int v86 = "NMTOKENS";
LABEL_190:
        *(void *)(v14 + 648) = v86;
        goto LABEL_191;
      case 0x1Fu:
      case 0x20u:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 288)) {
          goto LABEL_341;
        }
        uint64_t v24 = "(";
        if (v20 == 32) {
          uint64_t v24 = "NOTATION(";
        }
        if (*(void *)(v14 + 648)) {
          uint64_t v25 = "|";
        }
        else {
          uint64_t v25 = v24;
        }
        char v26 = *v25;
        if (!*v25) {
          goto LABEL_32;
        }
        uint64_t v27 = (unsigned __int8 *)(v25 + 1);
        do
        {
          uint64_t v28 = *(char **)(v14 + 832);
          if (v28 == *(char **)(v14 + 824))
          {
            if (!poolGrow(v168)) {
              return 1;
            }
            uint64_t v28 = *(char **)(v14 + 832);
          }
          *(void *)(v14 + 832) = v28 + 1;
          *uint64_t v28 = v26;
          int v29 = *v27++;
          char v26 = v29;
        }
        while (v29);
LABEL_32:
        if (!*(void *)(v14 + 840) || !poolAppend(v168, v13, a3, v172)) {
          return 1;
        }
        *(void *)(v14 + 648) = *(void *)(v14 + 840);
        goto LABEL_343;
      case 0x21u:
        goto LABEL_191;
      case 0x22u:
        ElementType = getElementType(v14, v13, a3, v172);
        *(void *)(v14 + 672) = ElementType;
        if (!ElementType) {
          return 1;
        }
LABEL_191:
        if (!*(unsigned char *)(v15 + 256) || !*(void *)(v14 + 288)) {
          goto LABEL_341;
        }
        goto LABEL_343;
      case 0x23u:
      case 0x24u:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_50;
        }
        if (!defineAttribute(*(void *)(v14 + 672), *(void *)(v14 + 680), *(unsigned __int8 *)(v14 + 688), *(unsigned __int8 *)(v14 + 689), 0, v14))return 1; {
        if (!*(void *)(v14 + 288))
        }
          goto LABEL_50;
        uint64_t v30 = *(unsigned __int8 **)(v14 + 648);
        if (!v30) {
          goto LABEL_50;
        }
        int v31 = *v30;
        if (v31 != 40 && (v31 != 78 || v30[1] != 79)) {
          goto LABEL_49;
        }
        int v32 = *(unsigned char **)(v14 + 832);
        if (v32 != *(unsigned char **)(v14 + 824)) {
          goto LABEL_45;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        int v32 = *(unsigned char **)(v14 + 832);
LABEL_45:
        *(void *)(v14 + 832) = v32 + 1;
        unsigned char *v32 = 41;
        uint64_t v33 = *(unsigned char **)(v14 + 832);
        if (v33 != *(unsigned char **)(v14 + 824)) {
          goto LABEL_48;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        uint64_t v33 = *(unsigned char **)(v14 + 832);
LABEL_48:
        *(void *)(v14 + 832) = v33 + 1;
        unsigned char *v33 = 0;
        *(void *)(v14 + 648) = *(void *)(v14 + 840);
        *(void *)(v14 + 840) = *(void *)(v14 + 832);
LABEL_49:
        *id v171 = a3;
        (*(void (**)(void, void, void, void, void, BOOL))(v14 + 288))(*(void *)(v14 + 8), **(void **)(v14 + 672), **(void **)(v14 + 680), *(void *)(v14 + 648), 0, v20 == 36);
        int v23 = 0;
LABEL_50:
        int v34 = *(void **)(v14 + 816);
        int v35 = *(void **)(v14 + 808);
        if (v34)
        {
          if (!v35) {
            goto LABEL_174;
          }
          do
          {
            int v36 = v35;
            int v35 = (void *)*v35;
            *int v36 = v34;
            int v34 = v36;
          }
          while (v35);
        }
        else
        {
LABEL_172:
          int v36 = v35;
        }
LABEL_173:
        *(void *)(v14 + 816) = v36;
LABEL_174:
        *id v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *unint64_t v167 = 0;
        goto LABEL_340;
      case 0x25u:
      case 0x26u:
        if (!*(unsigned char *)(v15 + 256)) {
          goto LABEL_341;
        }
        uint64_t v37 = storeAttributeValue(v14, v13, *(unsigned __int8 *)(v14 + 688), a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128), v166, 2);
        if (v37) {
          return v37;
        }
        uint64_t v38 = *(void *)(v15 + 192);
        *(void *)(v15 + 192) = *(void *)(v15 + 184);
        if (!defineAttribute(*(void *)(v14 + 672), *(void *)(v14 + 680), *(unsigned __int8 *)(v14 + 688), 0, v38, v14))return 1; {
        if (!*(void *)(v14 + 288))
        }
          goto LABEL_341;
        uint64_t v39 = *(unsigned __int8 **)(v14 + 648);
        if (!v39) {
          goto LABEL_341;
        }
        int v40 = *v39;
        if (v40 != 40 && (v40 != 78 || v39[1] != 79)) {
          goto LABEL_69;
        }
        int v41 = *(unsigned char **)(v14 + 832);
        if (v41 != *(unsigned char **)(v14 + 824)) {
          goto LABEL_65;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        int v41 = *(unsigned char **)(v14 + 832);
LABEL_65:
        *(void *)(v14 + 832) = v41 + 1;
        *int v41 = 41;
        int v42 = *(unsigned char **)(v14 + 832);
        if (v42 != *(unsigned char **)(v14 + 824)) {
          goto LABEL_68;
        }
        if (!poolGrow(v168)) {
          return 1;
        }
        int v42 = *(unsigned char **)(v14 + 832);
LABEL_68:
        *(void *)(v14 + 832) = v42 + 1;
        *int v42 = 0;
        *(void *)(v14 + 648) = *(void *)(v14 + 840);
        *(void *)(v14 + 840) = *(void *)(v14 + 832);
LABEL_69:
        *id v171 = a3;
        (*(void (**)(void, void, void, void, uint64_t, BOOL))(v14 + 288))(*(void *)(v14 + 8), **(void **)(v14 + 672), **(void **)(v14 + 680), *(void *)(v14 + 648), v38, v20 == 38);
        int v43 = *(void **)(v14 + 816);
        uint64_t v44 = *(void **)(v14 + 808);
        if (v43)
        {
          if (!v44) {
            goto LABEL_268;
          }
          do
          {
            uint64_t v45 = v44;
            uint64_t v44 = (void *)*v44;
            void *v45 = v43;
            int v43 = v45;
          }
          while (v44);
        }
        else
        {
LABEL_266:
          uint64_t v45 = v44;
        }
LABEL_267:
        *(void *)(v14 + 816) = v45;
LABEL_268:
        *id v168 = 0;
        v167[1] = 0;
        v167[2] = 0;
        *unint64_t v167 = 0;
        goto LABEL_343;
      case 0x27u:
        goto LABEL_323;
      case 0x28u:
        if (!*(void *)(v14 + 280)) {
          goto LABEL_341;
        }
        int v88 = getElementType(v14, v13, a3, v172);
        *(void *)(v14 + 672) = v88;
        uint64_t v19 = 1;
        if (!v88) {
          return v19;
        }
        *(void *)(v15 + 344) = 0;
        *(unsigned char *)(v15 + 320) = 1;
        goto LABEL_343;
      case 0x29u:
      case 0x2Au:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        if (!*(void *)(v14 + 280)) {
          goto LABEL_80;
        }
        uint64_t v46 = (*(uint64_t (**)(void, uint64_t))(v14 + 32))(*(void *)(v14 + 24), 32);
        uint64_t v19 = 1;
        if (!v46) {
          return v19;
        }
        *(void *)(v46 + 24) = 0;
        if (v20 == 41) {
          int v47 = 2;
        }
        else {
          int v47 = 1;
        }
        *(void *)(v46 + 12) = 0;
        *(void *)(v46 + 4) = 0;
        *(_DWORD *)uint64_t v46 = v47;
        *id v171 = a3;
        (*(void (**)(void, void, uint64_t))(v14 + 280))(*(void *)(v14 + 8), **(void **)(v14 + 672), v46);
        int v23 = 0;
LABEL_80:
        *(unsigned char *)(v15 + 320) = 0;
        goto LABEL_340;
      case 0x2Bu:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        uint64_t v89 = *(void *)(v15 + 328);
        uint64_t v90 = 32 * *(int *)(*(void *)(v15 + 352) + 4 * *(int *)(v15 + 348) - 4);
        int v91 = 3;
        goto LABEL_322;
      case 0x2Cu:
        unsigned int v92 = *(_DWORD *)(v14 + 912);
        if (*(_DWORD *)(v14 + 528) < v92) {
          goto LABEL_319;
        }
        if (v92)
        {
          if ((v92 & 0x80000000) != 0) {
            return 1;
          }
          int8x16_t v93 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 40);
          uint64_t v94 = *(void *)(v14 + 24);
          uint64_t v95 = *(void *)(v14 + 904);
          *(_DWORD *)(v14 + 912) = 2 * v92;
          uint64_t v96 = v93(v94, v95);
          if (!v96)
          {
            *(_DWORD *)(v14 + 912) >>= 1;
            return 1;
          }
          *(void *)(v14 + 904) = v96;
          uint64_t v97 = *(void *)(v15 + 352);
          if (v97)
          {
            uint64_t v98 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v14 + 40))(*(void *)(v14 + 24), v97, 4 * *(unsigned int *)(v14 + 912));
            if (!v98) {
              return 1;
            }
            *(void *)(v15 + 352) = v98;
          }
          goto LABEL_319;
        }
        uint64_t v150 = *(void *)(v14 + 24);
        uint64_t v151 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
        *(_DWORD *)(v14 + 912) = 32;
        uint64_t v152 = v151(v150, 32);
        *(void *)(v14 + 904) = v152;
        if (v152)
        {
LABEL_319:
          *(unsigned char *)(*(void *)(v14 + 904) + *(unsigned int *)(v14 + 528)) = 0;
          if (!*(unsigned char *)(v15 + 320)) {
            goto LABEL_341;
          }
          unsigned int ScaffoldPart = nextScaffoldPart(v14);
          if ((ScaffoldPart & 0x80000000) != 0) {
            return 1;
          }
          *(_DWORD *)(*(void *)(v15 + 352) + 4 * (int)(*(_DWORD *)(v15 + 348))++) = ScaffoldPart;
          uint64_t v89 = *(void *)(v15 + 328);
          uint64_t v90 = 32 * ScaffoldPart;
          int v91 = 6;
LABEL_322:
          *(_DWORD *)(v89 + v90) = v91;
LABEL_323:
          if (!*(void *)(v14 + 280))
          {
LABEL_341:
            if (*(void *)(v14 + 184)) {
              reportDefault((void *)v14, v13, a3, v172);
            }
          }
LABEL_343:
          int v156 = *(_DWORD *)(v14 + 928);
          if (v156 == 2) {
            return 35;
          }
          if (v156 == 3)
          {
            uint64_t v19 = 0;
            *a7 = v172;
            return v19;
          }
          a3 = v172;
          a5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))v13)(v13, v172, a4, &v172);
          continue;
        }
        *(_DWORD *)(v14 + 912) = 0;
        return 1;
      case 0x2Du:
        goto LABEL_211;
      case 0x2Eu:
        int v22 = 2;
        goto LABEL_211;
      case 0x2Fu:
        int v22 = 1;
        goto LABEL_211;
      case 0x30u:
        int v22 = 3;
LABEL_211:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        uint64_t v99 = *(void *)(v14 + 280);
        int v23 = v99 == 0;
        uint64_t v100 = *(int *)(v15 + 348) - 1;
        *(_DWORD *)(v15 + 348) = v100;
        *(_DWORD *)(*(void *)(v15 + 328) + 32 * *(int *)(*(void *)(v15 + 352) + 4 * v100) + 4) = v22;
        if (v100) {
          goto LABEL_340;
        }
        if (!v99) {
          goto LABEL_226;
        }
        uint64_t v101 = *(void *)(v14 + 696);
        uint64_t v102 = (*(uint64_t (**)(void, uint64_t))(v14 + 32))(*(void *)(v14 + 24), *(unsigned int *)(v101 + 336) + 32 * *(unsigned int *)(v101 + 344));
        if (!v102) {
          return 1;
        }
        uint64_t v103 = *(unsigned int *)(v101 + 344);
        *(_DWORD *)(v102 + 16) = 0;
        if (v103)
        {
          uint64_t v104 = (unsigned char *)(v102 + 32 * v103);
          uint64_t v105 = v102 + 32;
          unint64_t v106 = v102;
          uint64_t v107 = v104;
          do
          {
            uint64_t v108 = *(int *)(v106 + 16);
            uint64_t v109 = *(void *)(v101 + 328);
            uint64_t v110 = *(void *)(v109 + 32 * v108);
            *(void *)unint64_t v106 = v110;
            if (v110 == 4)
            {
              *(void *)(v106 + 8) = v107;
              id v111 = *(unsigned char **)(v109 + 32 * v108 + 8);
              do
                *v107++ = *v111;
              while (*v111++);
              *(_DWORD *)(v106 + 16) = 0;
              *(void *)(v106 + 24) = 0;
            }
            else
            {
              *(void *)(v106 + 8) = 0;
              uint64_t v113 = v109 + 32 * v108;
              int v114 = *(_DWORD *)(v113 + 24);
              *(_DWORD *)(v106 + 16) = v114;
              *(void *)(v106 + 24) = v105;
              if (v114)
              {
                unsigned int v115 = 0;
                uint64_t v116 = (int *)(v113 + 16);
                do
                {
                  uint64_t v117 = *v116;
                  *(_DWORD *)(v105 + 16) = v117;
                  v105 += 32;
                  ++v115;
                  uint64_t v116 = (int *)(v109 + 32 * v117 + 28);
                }
                while (v115 < *(_DWORD *)(v106 + 16));
              }
            }
            v106 += 32;
          }
          while (v106 < (unint64_t)v104);
        }
        *id v171 = a3;
        (*(void (**)(void, void, uint64_t))(v14 + 280))(*(void *)(v14 + 8), **(void **)(v14 + 672), v102);
LABEL_226:
        *(unsigned char *)(v15 + 320) = 0;
        *(_DWORD *)(v15 + 336) = 0;
        goto LABEL_340;
      case 0x31u:
        uint64_t v118 = *(void *)(v14 + 904);
        uint64_t v119 = *(unsigned int *)(v14 + 528);
        if (*(unsigned char *)(v118 + v119) == 44) {
          return 2;
        }
        if (*(unsigned char *)(v118 + v119)) {
          BOOL v120 = 1;
        }
        else {
          BOOL v120 = *(unsigned char *)(v15 + 320) == 0;
        }
        if (!v120)
        {
          id v121 = (_DWORD *)(*(void *)(v15 + 328)
                          + 32 * *(int *)(*(void *)(v15 + 352) + 4 * *(int *)(v15 + 348) - 4));
          if (*v121 != 3)
          {
            _DWORD *v121 = 5;
            int v23 = *(void *)(v14 + 280) == 0;
          }
        }
        *(unsigned char *)(v118 + v119) = 124;
        goto LABEL_340;
      case 0x32u:
        uint64_t v122 = *(void *)(v14 + 904);
        uint64_t v123 = *(unsigned int *)(v14 + 528);
        if (*(unsigned char *)(v122 + v123) == 124) {
          return 2;
        }
        *(unsigned char *)(v122 + v123) = 44;
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        goto LABEL_323;
      case 0x33u:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        int v23 = 0;
        uint64_t v124 = v172;
        goto LABEL_244;
      case 0x34u:
        int v23 = 2;
        goto LABEL_242;
      case 0x35u:
        goto LABEL_242;
      case 0x36u:
        int v23 = 3;
LABEL_242:
        if (!*(unsigned char *)(v15 + 320)) {
          goto LABEL_341;
        }
        uint64_t v124 = v172 - *(int *)(v13 + 128);
LABEL_244:
        unsigned int v125 = nextScaffoldPart(v14);
        if ((v125 & 0x80000000) != 0) {
          return 1;
        }
        uint64_t v126 = v125;
        id v127 = (_DWORD *)(*(void *)(v15 + 328) + 32 * v125);
        *id v127 = 4;
        v127[1] = v23;
        v128 = getElementType(v14, v13, a3, v124);
        if (!v128) {
          return 1;
        }
        unint64_t v129 = 0;
        uint64_t v130 = *v128;
        *(void *)(*(void *)(v15 + 328) + 32 * v126 + 8) = *v128;
        while (*(unsigned __int8 *)(v130 + v129++))
          ;
        int v132 = *(_DWORD *)(v15 + 336);
        if (v129 > ~v132) {
          return 1;
        }
        *(_DWORD *)(v15 + 336) = v132 + v129;
        goto LABEL_323;
      case 0x37u:
        if (!reportProcessingInstruction(v14, v13, a3, v172)) {
          return 1;
        }
        goto LABEL_343;
      case 0x38u:
        if (!reportComment(v14, v13, a3, v172)) {
          return 1;
        }
        goto LABEL_343;
      case 0x39u:
        uint64_t v53 = v172;
        uint64_t v54 = v14;
        uint64_t v55 = 1;
LABEL_255:
        uint64_t v37 = processXmlDecl(v54, v55, a3, v53);
        if (v37) {
          return v37;
        }
        uint64_t v13 = *(void *)(v14 + 312);
        goto LABEL_343;
      case 0x3Au:
        if (*(void *)(v14 + 184)) {
          reportDefault((void *)v14, v13, a3, v172);
        }
        uint64_t v37 = doIgnoreSection(v14, v13, &v172, a4, a7, a8);
        if (v37) {
          return v37;
        }
        if (v172) {
          goto LABEL_343;
        }
        uint64_t v19 = 0;
        *(void *)(v14 + 552) = ignoreSectionProcessor;
        return v19;
      case 0x3Bu:
      case 0x3Cu:
        *(unsigned char *)(v15 + 257) = 1;
        if (!*(_DWORD *)(v14 + 940))
        {
          int v133 = *(unsigned __int8 *)(v15 + 258);
          *(unsigned char *)(v15 + 256) = v133;
          if (v133) {
            goto LABEL_340;
          }
LABEL_263:
          uint64_t v134 = *(unsigned int (**)(void))(v14 + 240);
          if (v134 && !v134(*(void *)(v14 + 8))) {
            return 22;
          }
          goto LABEL_340;
        }
        int v48 = (char *)poolStoreString(v166, v13, a3 + *(int *)(v13 + 128), v172 - *(int *)(v13 + 128));
        if (!v48) {
          return 1;
        }
        uint64_t v49 = v48;
        uint64_t v50 = lookup(v14, v163, v48, 0);
        int v51 = v50;
        *(void *)(v15 + 184) = *(void *)(v15 + 192);
        if (!*(_DWORD *)(v14 + 540)) {
          goto LABEL_86;
        }
        if (*(unsigned char *)(v15 + 258))
        {
          if (!*(void *)(v14 + 592)) {
            goto LABEL_284;
          }
        }
        else if (!*(unsigned char *)(v15 + 257))
        {
LABEL_284:
          if (!v50) {
            return 11;
          }
          if (!*((unsigned char *)v50 + 58)) {
            return 24;
          }
          goto LABEL_286;
        }
LABEL_86:
        if (!v50)
        {
          *(unsigned char *)(v15 + 256) = *(unsigned char *)(v15 + 258);
          if (v20 == 60)
          {
            uint64_t v52 = *(void (**)(void, char *, uint64_t))(v14 + 264);
            if (v52)
            {
              v52(*(void *)(v14 + 8), v49, 1);
              goto LABEL_343;
            }
          }
          goto LABEL_341;
        }
LABEL_286:
        if (*((unsigned char *)v50 + 56)) {
          return 12;
        }
        if (v50[1])
        {
          uint64_t v37 = processInternalEntity(v14, (uint64_t)v50, v20 == 60);
          if (v37) {
            return v37;
          }
          goto LABEL_343;
        }
        unint64_t v139 = *(uint64_t (**)(void, void, void, void, void))(v14 + 248);
        if (!v139)
        {
          *(unsigned char *)(v15 + 256) = *(unsigned char *)(v15 + 258);
          goto LABEL_341;
        }
        *(unsigned char *)(v15 + 259) = 0;
        *((unsigned char *)v50 + 56) = 1;
        uint64_t v140 = v14;
        do
        {
          v141 = (_DWORD *)v140;
          uint64_t v140 = *(void *)(v140 + 920);
        }
        while (v140);
        ++v141[248];
        unsigned int v142 = v141[249] + 1;
        v141[249] = v142;
        unsigned int v143 = v141[250];
        if (v142 > v143) {
          v141[250] = v143 + 1;
        }
        int v144 = v139(*(void *)(v14 + 256), 0, v50[4], v50[3], v50[5]);
        uint64_t v145 = v14;
        if (!v144)
        {
          do
          {
            uint64_t v157 = v14;
            uint64_t v14 = *(void *)(v14 + 920);
          }
          while (v14);
          --*(_DWORD *)(v157 + 996);
          *((unsigned char *)v51 + 56) = 0;
          return 21;
        }
        do
        {
          uint64_t v146 = v145;
          uint64_t v145 = *(void *)(v145 + 920);
        }
        while (v145);
        --*(_DWORD *)(v146 + 996);
        *((unsigned char *)v51 + 56) = 0;
        if (!*(unsigned char *)(v15 + 259))
        {
          *(unsigned char *)(v15 + 256) = *(unsigned char *)(v15 + 258);
          goto LABEL_343;
        }
        int v23 = 0;
        if (!*(unsigned char *)(v15 + 258)) {
          goto LABEL_263;
        }
LABEL_340:
        if (!v23) {
          goto LABEL_343;
        }
        goto LABEL_341;
      default:
        goto LABEL_341;
    }
  }
}

BOOL accountingDiffTolerated(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a2 + 4) >= 5)
  {
    if (a5 == 2) {
      return 1;
    }
  }
  else
  {
    uint64_t v5 = 1;
    if (((0x1Du >> (a2 + 4)) & 1) != 0 || a5 == 2) {
      return v5;
    }
  }
  uint64_t v6 = a1;
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = *(void *)(v6 + 920);
  }
  while (v6);
  uint64_t v8 = a4 - a3;
  BOOL v9 = v7 == a1 && a5 == 0;
  uint64_t v10 = 960;
  if (v9) {
    uint64_t v10 = 952;
  }
  uint64_t v11 = *(void *)(v7 + v10);
  if (__CFADD__(v8, v11)) {
    return 0;
  }
  *(void *)(v7 + v10) = v11 + v8;
  unint64_t v12 = *(void *)(v7 + 952);
  uint64_t v13 = *(void *)(v7 + 960);
  unint64_t v14 = v13 + v12;
  if (v13 + v12 < *(void *)(v7 + 984)) {
    return 1;
  }
  unint64_t v15 = v13 + 22;
  if (!v12) {
    unint64_t v14 = v15;
  }
  float v16 = (float)v12;
  if (!v12) {
    float v16 = 22.0;
  }
  return (float)((float)v14 / v16) <= *(float *)(v7 + 976);
}

uint64_t processXmlDecl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  unsigned int v27 = -1;
  if (!accountingDiffTolerated(a1, 12, a3, a4, 0)) {
    return 43;
  }
  uint64_t v8 = crnc3rdprtyrnm_XmlParseXmlDeclNS;
  if (!*(unsigned char *)(a1 + 480)) {
    uint64_t v8 = crnc3rdprtyrnm_XmlParseXmlDecl;
  }
  BOOL v9 = (uint64_t *)(a1 + 568);
  if (!v8(a2, *(void *)(a1 + 312), a3, a4, (uint64_t *)(a1 + 568), &v29, &v28, &v31, &v30, (int *)&v27))
  {
    if (a2) {
      return 31;
    }
    else {
      return 30;
    }
  }
  if (!a2 && v27 == 1)
  {
    *(unsigned char *)(*(void *)(a1 + 696) + 258) = 1;
    if (*(_DWORD *)(a1 + 940) == 1) {
      *(_DWORD *)(a1 + 940) = 0;
    }
  }
  if (*(void *)(a1 + 304))
  {
    uint64_t v10 = v31;
    if (v31)
    {
      uint64_t v11 = *(void *)(a1 + 312);
      int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v11, v31);
      uint64_t v13 = poolStoreString((uint64_t *)(a1 + 856), v11, v10, v10 + v12);
      if (!v13) {
        return 1;
      }
      uint64_t v10 = v13;
      *(void *)(a1 + 888) = *(void *)(a1 + 880);
    }
    if (v29)
    {
      uint64_t v14 = poolStoreString((uint64_t *)(a1 + 856), *(void *)(a1 + 312), v29, v28 - *(int *)(*(void *)(a1 + 312) + 128));
      if (!v14) {
        return 1;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(a1 + 304))(*(void *)(a1 + 8), v14, v10, v27);
  }
  else
  {
    if (*(void *)(a1 + 184)) {
      reportDefault((void *)a1, *(void *)(a1 + 312), a3, a4);
    }
    uint64_t v10 = 0;
    uint64_t v14 = 0;
  }
  if (*(void *)(a1 + 472)) {
    goto LABEL_26;
  }
  if (v30)
  {
    int v19 = *(_DWORD *)(v30 + 128);
    uint64_t v20 = *(void *)(a1 + 312);
    if (v19 != *(_DWORD *)(v20 + 128) || v19 == 2 && v30 != v20)
    {
      *BOOL v9 = v31;
      return 19;
    }
    *(void *)(a1 + 312) = v30;
LABEL_26:
    if (!(v10 | v14)) {
      return 0;
    }
    float v16 = *(void **)(a1 + 864);
    uint64_t v17 = *(void **)(a1 + 856);
    if (v16)
    {
      if (!v17)
      {
LABEL_46:
        uint64_t result = 0;
        *(void *)(a1 + 856) = 0;
        *(void *)(a1 + 872) = 0;
        *(void *)(a1 + 888) = 0;
        *(void *)(a1 + 880) = 0;
        return result;
      }
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = (void *)*v17;
        void *v18 = v16;
        float v16 = v18;
      }
      while (v17);
    }
    else
    {
      uint64_t v18 = *(void **)(a1 + 856);
    }
    *(void *)(a1 + 864) = v18;
    goto LABEL_46;
  }
  uint64_t v21 = v31;
  if (!v31) {
    goto LABEL_26;
  }
  if (!v10)
  {
    uint64_t v22 = *(void *)(a1 + 312);
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 56))(v22, v31);
    uint64_t v10 = poolStoreString((uint64_t *)(a1 + 856), v22, v21, v21 + v23);
    if (!v10) {
      return 1;
    }
  }
  uint64_t result = handleUnknownEncoding(a1, v10);
  uint64_t v24 = *(void **)(a1 + 864);
  uint64_t v25 = *(void **)(a1 + 856);
  if (v24)
  {
    if (!v25) {
      goto LABEL_51;
    }
    do
    {
      char v26 = v25;
      uint64_t v25 = (void *)*v25;
      *char v26 = v24;
      uint64_t v24 = v26;
    }
    while (v25);
  }
  else
  {
    char v26 = *(void **)(a1 + 856);
  }
  *(void *)(a1 + 864) = v26;
LABEL_51:
  *(void *)(a1 + 856) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  if (result == 18) {
    *BOOL v9 = v31;
  }
  return result;
}

uint64_t poolStoreString(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = poolAppend(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v6 = (unsigned char *)a1[3];
    if (v6 == (unsigned char *)a1[2])
    {
      if (!poolGrow(a1)) {
        return 0;
      }
      uint64_t v6 = (unsigned char *)a1[3];
    }
    a1[3] = (uint64_t)(v6 + 1);
    *uint64_t v6 = 0;
    return a1[4];
  }
  return result;
}

void *lookup(uint64_t a1, uint64_t *a2, char *a3, size_t a4)
{
  if (!a2[2])
  {
    if (a4)
    {
      *((unsigned char *)a2 + 8) = 6;
      a2[2] = 64;
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(a2[4] + 8))(*(void *)a2[4], 512);
      *a2 = (uint64_t)result;
      if (!result)
      {
        a2[2] = 0;
        return result;
      }
      cstdlib_memset(result, 0, 0x200uLL);
      v8.n128_u64[0] = (unint64_t)hash(a1, a3);
      unint64_t v12 = (a2[2] - 1) & v40;
      goto LABEL_45;
    }
    return 0;
  }
  v8.n128_u64[0] = (unint64_t)hash(a1, a3);
  uint64_t v10 = v9;
  uint64_t v11 = a2[2];
  unint64_t v12 = (v11 - 1) & v9;
  uint64_t result = *(void **)(*a2 + 8 * v12);
  if (!result)
  {
LABEL_14:
    if (a4)
    {
      char v22 = *((unsigned char *)a2 + 8);
      if (!((unint64_t)a2[3] >> (v22 - 1)))
      {
LABEL_45:
        *(void *)(*a2 + 8 * v12) = (*(uint64_t (**)(void, size_t, __n128))(a2[4] + 8))(*(void *)a2[4], a4, v8);
        uint64_t result = *(void **)(*a2 + 8 * v12);
        if (result)
        {
          cstdlib_memset(result, 0, a4);
          uint64_t v41 = *a2;
          **(void **)(*a2 + 8 * v12) = a3;
          ++a2[3];
          return *(void **)(v41 + 8 * v12);
        }
        return result;
      }
      char v23 = v22 + 1;
      unsigned int v24 = (v22 + 1);
      if (v24 <= 0x3C)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, __n128))(a2[4] + 8))(*(void *)a2[4], 8 << v23, v8);
        if (!result) {
          return result;
        }
        uint64_t v25 = result;
        char v42 = v24;
        uint64_t v26 = 1 << v23;
        unint64_t v27 = (1 << v23) - 1;
        cstdlib_memset(result, 0, 8 << v23);
        unint64_t v28 = a2[2];
        if (v28)
        {
          for (unint64_t i = 0; i < v28; ++i)
          {
            uint64_t v30 = *(char ***)(*a2 + 8 * i);
            if (v30)
            {
              hash(a1, *v30);
              unint64_t v32 = v31 & v27;
              if (v25[v31 & v27])
              {
                LODWORD(v33) = 0;
                do
                {
                  if (v33) {
                    unint64_t v33 = v33;
                  }
                  else {
                    unint64_t v33 = ((v31 & (unint64_t)-v26) >> (v42 - 1)) & (v27 >> 2) | 1;
                  }
                  BOOL v34 = v32 >= v33;
                  unint64_t v35 = v32 - v33;
                  if (v34) {
                    uint64_t v36 = 0;
                  }
                  else {
                    uint64_t v36 = 1 << v23;
                  }
                  unint64_t v32 = v35 + v36;
                }
                while (v25[v32]);
              }
              v25[v32] = *(void *)(*a2 + 8 * i);
              unint64_t v28 = a2[2];
            }
          }
        }
        (*(void (**)(void, void))(a2[4] + 24))(*(void *)a2[4], *a2);
        *a2 = (uint64_t)v25;
        *((unsigned char *)a2 + 8) = v23;
        a2[2] = v26;
        unint64_t v12 = v27 & v10;
        if (v25[v27 & v10])
        {
          LODWORD(v37) = 0;
          do
          {
            if (v37) {
              unint64_t v37 = v37;
            }
            else {
              unint64_t v37 = ((v10 & (unint64_t)-v26) >> (v42 - 1)) & (v27 >> 2) | 1;
            }
            unint64_t v38 = v12 - v37;
            if (v12 >= v37) {
              uint64_t v39 = 0;
            }
            else {
              uint64_t v39 = 1 << v23;
            }
            unint64_t v12 = v38 + v39;
          }
          while (v25[v38 + v39]);
        }
        goto LABEL_45;
      }
    }
    return 0;
  }
  unsigned int v14 = 0;
  while (*a3 != *(unsigned char *)*result)
  {
LABEL_8:
    if (!v14) {
      unsigned int v14 = ((v10 & (unint64_t)-v11) >> (*((unsigned char *)a2 + 8) - 1)) & ((unint64_t)(v11 - 1) >> 2) | 1;
    }
    unint64_t v20 = v12 - v14;
    if (v12 >= v14) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = a2[2];
    }
    unint64_t v12 = v20 + v21;
    uint64_t result = *(void **)(*a2 + 8 * (v20 + v21));
    if (!result) {
      goto LABEL_14;
    }
  }
  unint64_t v15 = (unsigned __int8 *)(*result + 1);
  float v16 = (unsigned __int8 *)(a3 + 1);
  int v17 = *a3;
  while (v17)
  {
    int v18 = *v16++;
    int v17 = v18;
    int v19 = *v15++;
    if (v17 != v19) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *normalizePublicId(unsigned char *result)
{
  LOBYTE(v1) = *result;
  if (!*result) {
    goto LABEL_15;
  }
  uint64_t v2 = 1;
  unint64_t v3 = result;
  do
  {
    uint64_t v4 = v3;
    if ((char)v1 > 0x20 || ((1 << v1) & 0x100002400) == 0) {
      goto LABEL_8;
    }
    unint64_t v3 = result;
    if (v4 == result) {
      goto LABEL_10;
    }
    if (*(v4 - 1) != 32)
    {
      LOBYTE(v1) = 32;
LABEL_8:
      *v4++ = v1;
    }
    unint64_t v3 = v4;
LABEL_10:
    int v1 = result[v2++];
  }
  while (v1);
  if (v3 != result)
  {
    if (*(v3 - 1) == 32) {
      uint64_t result = v3 - 1;
    }
    else {
      uint64_t result = v3;
    }
  }
LABEL_15:
  *uint64_t result = 0;
  return result;
}

uint64_t contentProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = doContent(a1, 0, *(void *)(a1 + 312), a2, a3, a4, *(unsigned char *)(a1 + 932) == 0, 0);
  if (!v5 && !storeRawNames(a1)) {
    return 1;
  }
  return v5;
}

void *getElementType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t **)(a1 + 696);
  uint64_t v6 = (char *)poolStoreString(v5 + 20, a2, a3, a4);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  __n128 v8 = lookup(a1, v5 + 5, v6, 0x28uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    if ((char *)*v8 != v7)
    {
      v5[23] = v5[24];
      return v9;
    }
    v5[24] = v5[23];
    if (setElementTypePrefix(a1, (uint64_t)v8)) {
      return v9;
    }
    return 0;
  }
  return v9;
}

void *getAttributeId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 696);
  uint64_t v9 = *(unsigned char **)(v8 + 184);
  if (v9 == *(unsigned char **)(v8 + 176))
  {
    if (!poolGrow((uint64_t *)(v8 + 160))) {
      return 0;
    }
    uint64_t v9 = *(unsigned char **)(v8 + 184);
  }
  *(void *)(v8 + 184) = v9 + 1;
  *uint64_t v9 = 0;
  uint64_t v10 = poolStoreString((uint64_t *)(v8 + 160), a2, a3, a4);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (unsigned char *)v10;
  unint64_t v12 = (unsigned char *)(v10 + 1);
  uint64_t v13 = lookup(a1, (uint64_t *)(v8 + 80), (char *)(v10 + 1), 0x18uLL);
  unsigned int v14 = v13;
  if (v13)
  {
    if ((unsigned char *)*v13 != v12)
    {
      uint64_t v15 = *(void *)(v8 + 192);
LABEL_8:
      *(void *)(v8 + 184) = v15;
      return v14;
    }
    float v16 = *(unsigned char **)(v8 + 184);
    *(void *)(v8 + 192) = v16;
    if (!*(unsigned char *)(a1 + 480)) {
      return v14;
    }
    int v17 = *v12;
    if (v17 == 120 && v11[2] == 109 && v11[3] == 108 && v11[4] == 110 && v11[5] == 115)
    {
      if (v11[6] == 58)
      {
        int v18 = lookup(a1, (uint64_t *)(v8 + 120), v11 + 7, 0x10uLL);
        goto LABEL_38;
      }
      if (!v11[6])
      {
        int v18 = (void *)(v8 + 304);
LABEL_38:
        v14[1] = v18;
        *((unsigned char *)v14 + 17) = 1;
        return v14;
      }
    }
    uint64_t v19 = 0;
    if (!*v12) {
      return v14;
    }
    while (v17 != 58)
    {
      int v17 = v11[v19++ + 2];
      if (!v17) {
        return v14;
      }
    }
    if (v19)
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        uint64_t v21 = *(unsigned char **)(v8 + 184);
        if (v21 == *(unsigned char **)(v8 + 176))
        {
          if (!poolGrow((uint64_t *)(v8 + 160))) {
            return 0;
          }
          uint64_t v21 = *(unsigned char **)(v8 + 184);
        }
        char v22 = v12[i];
        *(void *)(v8 + 184) = v21 + 1;
        *uint64_t v21 = v22;
      }
      float v16 = *(unsigned char **)(v8 + 184);
    }
    if (v16 == *(unsigned char **)(v8 + 176))
    {
      if (!poolGrow((uint64_t *)(v8 + 160))) {
        return 0;
      }
      float v16 = *(unsigned char **)(v8 + 184);
    }
    *(void *)(v8 + 184) = v16 + 1;
    *float v16 = 0;
    char v23 = lookup(a1, (uint64_t *)(v8 + 120), *(char **)(v8 + 192), 0x10uLL);
    v14[1] = v23;
    if (v23)
    {
      uint64_t v15 = *(void *)(v8 + 192);
      if (*v23 == v15)
      {
        *(void *)(v8 + 192) = *(void *)(v8 + 184);
        return v14;
      }
      goto LABEL_8;
    }
    return 0;
  }
  return v14;
}

uint64_t poolAppend(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  uint64_t v7 = a1 + 3;
  if (a1[3]) {
    goto LABEL_3;
  }
  while (poolGrow(a1))
  {
LABEL_3:
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v9, a4, v7, a1[2]) < 2)return a1[4]; {
  }
    }
  return 0;
}

uint64_t defineAttribute(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v10 = *(_DWORD *)(a1 + 24);
  if (a4 || a5)
  {
    if (v10 >= 1)
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = *(unsigned int *)(a1 + 24);
      while (*v11 != a2)
      {
        v11 += 3;
        if (!--v12) {
          goto LABEL_7;
        }
      }
      return 1;
    }
LABEL_7:
    if (a4 && !*(void *)(a1 + 16) && !*(unsigned char *)(a2 + 17)) {
      *(void *)(a1 + 16) = a2;
    }
  }
  if (v10 != *(_DWORD *)(a1 + 28))
  {
    uint64_t result = *(void *)(a1 + 32);
LABEL_16:
    int v15 = *(_DWORD *)(a1 + 24);
    uint64_t v16 = result + 24 * v15;
    *(void *)uint64_t v16 = a2;
    *(void *)(v16 + 16) = a5;
    *(unsigned char *)(v16 + 8) = a3;
    if (!a3) {
      *(unsigned char *)(a2 + 16) = 1;
    }
    *(_DWORD *)(a1 + 24) = v15 + 1;
    return 1;
  }
  int v13 = v10;
  if (!v10)
  {
    *(_DWORD *)(a1 + 28) = 8;
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(a6 + 32))(*(void *)(a6 + 24), 192);
    *(void *)(a1 + 32) = result;
    if (!result)
    {
      *(_DWORD *)(a1 + 28) = 0;
      return result;
    }
    goto LABEL_16;
  }
  if (v10 > 0x3FFFFFFF) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(a6 + 40))(*(void *)(a6 + 24), *(void *)(a1 + 32), 48 * v10);
  if (result)
  {
    *(_DWORD *)(a1 + 28) = 2 * v13;
    *(void *)(a1 + 32) = result;
    goto LABEL_16;
  }
  return result;
}

uint64_t poolGrow(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_5;
  }
  unint64_t v3 = (const void *)a1[4];
  if (!v3)
  {
    uint64_t v20 = *(void *)v2;
    *a1 = v2;
    a1[1] = v20;
    *(void *)uint64_t v2 = 0;
    a1[4] = v2 + 12;
    a1[2] = v2 + 12 + *(int *)(v2 + 8);
    a1[3] = v2 + 12;
    return 1;
  }
  int64_t v4 = a1[2] - (void)v3;
  if (v4 >= *(int *)(v2 + 8))
  {
LABEL_5:
    uint64_t v9 = a1[4];
    unsigned int v10 = *((_DWORD *)a1 + 4) - v9;
    if (*a1) {
      BOOL v11 = v9 == *a1 + 12;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      unsigned int v14 = 2 * v10;
      if (((2 * v10) & 0x80000000) == 0 && v14 && (int)(v14 + 12) >= 1)
      {
        uint64_t v16 = a1[3];
        uint64_t result = (*(uint64_t (**)(void))(a1[5] + 16))(*(void *)a1[5]);
        if (!result) {
          return result;
        }
        *a1 = result;
        *(_DWORD *)(result + 8) = v14;
        uint64_t v18 = result + 12 + v16 - v9;
        a1[4] = result + 12;
        uint64_t v19 = result + 12 + v14;
LABEL_28:
        a1[2] = v19;
        a1[3] = v18;
        return 1;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      if (v10 < 0x400)
      {
        unsigned int v12 = 1024;
        unsigned int v13 = 1036;
LABEL_23:
        uint64_t result = (*(uint64_t (**)(void, void))(a1[5] + 8))(*(void *)a1[5], v13);
        if (!result) {
          return result;
        }
        uint64_t v21 = result;
        *(_DWORD *)(result + 8) = v12;
        *(void *)uint64_t result = *a1;
        *a1 = result;
        char v23 = (unsigned char *)a1[3];
        char v22 = (unsigned char *)a1[4];
        if (v23 == v22)
        {
          uint64_t v24 = a1[3];
        }
        else
        {
          cstdlib_memcpy((void *)(result + 12), v22, v23 - v22);
          uint64_t v24 = a1[3];
          char v23 = (unsigned char *)a1[4];
        }
        uint64_t v18 = v21 + 12 + v24 - (void)v23;
        a1[4] = v21 + 12;
        uint64_t v19 = v21 + 12 + v12;
        goto LABEL_28;
      }
      if (v10 <= 0x3FFFFFF9)
      {
        unsigned int v12 = 2 * v10;
        unsigned int v13 = 2 * v10 + 12;
        goto LABEL_23;
      }
    }
    return 0;
  }
  uint64_t v5 = *(void *)v2;
  *(void *)uint64_t v2 = *a1;
  *a1 = v2;
  a1[1] = v5;
  cstdlib_memcpy((void *)(v2 + 12), v3, v4);
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + 12;
  uint64_t v8 = v7 + a1[3] - a1[4];
  a1[4] = v7;
  a1[2] = v7 + *(int *)(v6 + 8);
  a1[3] = v8;
  return 1;
}

uint64_t storeAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  int v8 = a3;
  uint64_t result = appendAttributeValue(a1, a2, a3, a4, a5, a6, a7);
  if (!result)
  {
    unsigned int v10 = (unsigned char *)a6[3];
    if (!v8 && v10 != (unsigned char *)a6[4] && *(v10 - 1) == 32) {
      a6[3] = (uint64_t)--v10;
    }
    if (v10 == (unsigned char *)a6[2])
    {
      if (!poolGrow(a6)) {
        return 1;
      }
      unsigned int v10 = (unsigned char *)a6[3];
    }
    uint64_t result = 0;
    a6[3] = (uint64_t)(v10 + 1);
    unsigned char *v10 = 0;
  }
  return result;
}

uint64_t storeEntityValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 696);
  uint64_t v12 = *(void *)(v10 + 208);
  BOOL v11 = (uint64_t *)(v10 + 208);
  int v13 = *(_DWORD *)(a1 + 544);
  *(_DWORD *)(a1 + 544) = 1;
  if (!v12 && !poolGrow(v11)) {
    return 1;
  }
  uint64_t v42 = a3;
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 40))(a2, a3, a4, &v42);
  if (!accountingDiffTolerated(a1, v14, a3, v42, a5))
  {
LABEL_47:
    uint64_t result = 43;
    goto LABEL_49;
  }
  while (2)
  {
    uint64_t result = 0;
    switch(v14)
    {
      case -4:
        goto LABEL_49;
      case -3:
        uint64_t v42 = a3 + *(int *)(a2 + 128);
        goto LABEL_25;
      case -2:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        goto LABEL_54;
      case -1:
        if (*(void *)(a1 + 312) == a2) {
          *(void *)(a1 + 568) = a3;
        }
        goto LABEL_61;
      case 0:
        if (*(void *)(a1 + 312) == a2) {
          *(void *)(a1 + 568) = v42;
        }
LABEL_61:
        uint64_t result = 4;
        goto LABEL_49;
      case 6:
      case 9:
        if (!poolAppend(v11, a2, a3, v42)) {
          goto LABEL_48;
        }
        goto LABEL_29;
      case 7:
LABEL_25:
        uint64_t v26 = *(unsigned char **)(v10 + 232);
        if (*(unsigned char **)(v10 + 224) != v26) {
          goto LABEL_28;
        }
        if (!poolGrow(v11)) {
          goto LABEL_48;
        }
        uint64_t v26 = *(unsigned char **)(v10 + 232);
LABEL_28:
        *(void *)(v10 + 232) = v26 + 1;
        *uint64_t v26 = 10;
        goto LABEL_29;
      case 10:
        unsigned int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a2, a3);
        if ((v27 & 0x80000000) != 0)
        {
          if (*(void *)(a1 + 312) == a2) {
            *(void *)(a1 + 568) = a3;
          }
          uint64_t result = 14;
          goto LABEL_49;
        }
        int v28 = crnc3rdprtyrnm_XmlUtf8Encode(v27, v41);
        if (v28 >= 1)
        {
          uint64_t v29 = v28;
          uint64_t v30 = v41;
          do
          {
            uint64_t v31 = *(unsigned char **)(v10 + 232);
            if (*(unsigned char **)(v10 + 224) == v31)
            {
              if (!poolGrow(v11)) {
                goto LABEL_48;
              }
              uint64_t v31 = *(unsigned char **)(v10 + 232);
            }
            char v32 = *v30++;
            *(void *)(v10 + 232) = v31 + 1;
            *uint64_t v31 = v32;
            --v29;
          }
          while (v29);
        }
        goto LABEL_29;
      default:
        if (v14 != 28)
        {
LABEL_54:
          if (*(void *)(a1 + 312) == a2) {
            *(void *)(a1 + 568) = a3;
          }
          uint64_t result = 23;
          goto LABEL_49;
        }
        if (!*(unsigned char *)(a1 + 936) && *(void *)(a1 + 312) == a2)
        {
          *(void *)(a1 + 568) = a3;
          uint64_t result = 10;
          goto LABEL_49;
        }
        uint64_t v16 = (char *)poolStoreString((uint64_t *)(a1 + 808), a2, a3 + *(int *)(a2 + 128), v42 - *(int *)(a2 + 128));
        if (!v16)
        {
LABEL_48:
          uint64_t result = 1;
          goto LABEL_49;
        }
        uint64_t result = (uint64_t)lookup(a1, (uint64_t *)(v10 + 264), v16, 0);
        *(void *)(a1 + 832) = *(void *)(a1 + 840);
        if (!result)
        {
          *(unsigned char *)(v10 + 256) = *(unsigned char *)(v10 + 258);
          goto LABEL_49;
        }
        uint64_t v17 = result;
        if (!*(unsigned char *)(result + 56) && result != *(void *)(a1 + 616))
        {
          if (*(void *)(result + 24))
          {
            uint64_t v18 = *(uint64_t (**)(void, void, void))(a1 + 248);
            if (!v18) {
              goto LABEL_23;
            }
            *(unsigned char *)(v10 + 259) = 0;
            *(unsigned char *)(result + 56) = 1;
            uint64_t v19 = a1;
            do
            {
              uint64_t v20 = (_DWORD *)v19;
              uint64_t v19 = *(void *)(v19 + 920);
            }
            while (v19);
            ++v20[248];
            unsigned int v21 = v20[249] + 1;
            v20[249] = v21;
            unsigned int v22 = v20[250];
            if (v21 > v22) {
              v20[250] = v22 + 1;
            }
            int v23 = v18(*(void *)(a1 + 256), 0, *(void *)(result + 32));
            uint64_t v24 = a1;
            if (!v23)
            {
              uint64_t v39 = a1;
              do
              {
                uint64_t v40 = v39;
                uint64_t v39 = *(void *)(v39 + 920);
              }
              while (v39);
              --*(_DWORD *)(v40 + 996);
              *(unsigned char *)(v17 + 56) = 0;
              uint64_t result = 21;
              goto LABEL_49;
            }
            do
            {
              uint64_t v25 = v24;
              uint64_t v24 = *(void *)(v24 + 920);
            }
            while (v24);
            --*(_DWORD *)(v25 + 996);
            *(unsigned char *)(v17 + 56) = 0;
            if (!*(unsigned char *)(v10 + 259)) {
LABEL_23:
            }
              *(unsigned char *)(v10 + 256) = *(unsigned char *)(v10 + 258);
          }
          else
          {
            *(unsigned char *)(result + 56) = 1;
            uint64_t v33 = a1;
            do
            {
              BOOL v34 = (_DWORD *)v33;
              uint64_t v33 = *(void *)(v33 + 920);
            }
            while (v33);
            ++v34[248];
            unsigned int v35 = v34[249] + 1;
            v34[249] = v35;
            unsigned int v36 = v34[250];
            if (v35 > v36) {
              v34[250] = v36 + 1;
            }
            uint64_t result = storeEntityValue(a1, *(void *)(a1 + 464), *(void *)(result + 8), *(void *)(result + 8) + *(int *)(result + 16), 1);
            uint64_t v37 = a1;
            do
            {
              uint64_t v38 = v37;
              uint64_t v37 = *(void *)(v37 + 920);
            }
            while (v37);
            --*(_DWORD *)(v38 + 996);
            *(unsigned char *)(v17 + 56) = 0;
            if (result) {
              goto LABEL_49;
            }
          }
LABEL_29:
          a3 = v42;
          int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 40))(a2, v42, a4, &v42);
          if (!accountingDiffTolerated(a1, v14, a3, v42, a5)) {
            goto LABEL_47;
          }
          continue;
        }
        if (*(void *)(a1 + 312) == a2) {
          *(void *)(a1 + 568) = a3;
        }
        uint64_t result = 12;
LABEL_49:
        *(_DWORD *)(a1 + 544) = v13;
        return result;
    }
  }
}

uint64_t doIgnoreSection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v11 = *a3;
  uint64_t v17 = *a3;
  if (*(void *)(a1 + 312) == a2)
  {
    uint64_t v12 = (uint64_t *)(a1 + 568);
    *(void *)(a1 + 568) = v11;
    int v13 = (void *)(a1 + 576);
  }
  else
  {
    uint64_t v12 = *(uint64_t **)(a1 + 592);
    int v13 = v12 + 1;
  }
  *uint64_t v12 = v11;
  *a3 = 0;
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 24))(a2, v11, a4, &v17);
  if (!accountingDiffTolerated(a1, v14, v11, v17, 0)) {
    return 43;
  }
  uint64_t v15 = v17;
  *int v13 = v17;
  switch(v14)
  {
    case -4:
    case -1:
      if (a6) {
        goto LABEL_17;
      }
      uint64_t result = 2;
      break;
    case -3:
      goto LABEL_15;
    case -2:
      if (a6)
      {
LABEL_17:
        uint64_t result = 0;
        *a5 = v11;
      }
      else
      {
        uint64_t result = 6;
      }
      break;
    case 0:
      *uint64_t v12 = v15;
      uint64_t result = 4;
      break;
    default:
      if (v14 == 42)
      {
        if (*(void *)(a1 + 184))
        {
          reportDefault((void *)a1, a2, v11, v15);
          uint64_t v15 = v17;
        }
        *a3 = v15;
        *a5 = v15;
        if (*(_DWORD *)(a1 + 928) == 2) {
          uint64_t result = 35;
        }
        else {
          uint64_t result = 0;
        }
      }
      else
      {
LABEL_15:
        *uint64_t v12 = v15;
        uint64_t result = 23;
      }
      break;
  }
  return result;
}

uint64_t ignoreSectionProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  uint64_t result = doIgnoreSection(a1, *(void *)(a1 + 312), &v6, a3, a4, *(unsigned char *)(a1 + 932) == 0);
  if (!result)
  {
    if (v6)
    {
      *(void *)(a1 + 552) = prologProcessor;
      return prologProcessor(a1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t nextScaffoldPart(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 696);
  if (!*(void *)(v2 + 352))
  {
    unint64_t v3 = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 4 * *(unsigned int *)(a1 + 912));
    *(void *)(v2 + 352) = v3;
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
    *unint64_t v3 = 0;
  }
  uint64_t result = *(unsigned int *)(v2 + 344);
  unsigned int v5 = *(_DWORD *)(v2 + 340);
  uint64_t v6 = *(void *)(v2 + 328);
  if (result >= v5)
  {
    if (v6)
    {
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(a1 + 40))(*(void *)(a1 + 24));
        if (v7)
        {
          uint64_t v6 = v7;
          int v8 = 2 * *(_DWORD *)(v2 + 340);
LABEL_11:
          *(_DWORD *)(v2 + 340) = v8;
          *(void *)(v2 + 328) = v6;
          uint64_t result = *(unsigned int *)(v2 + 344);
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 1024);
      if (v9)
      {
        uint64_t v6 = v9;
        int v8 = 32;
        goto LABEL_11;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  *(_DWORD *)(v2 + 344) = result + 1;
  int v10 = *(_DWORD *)(v2 + 348);
  if (v10)
  {
    uint64_t v11 = *(int *)(*(void *)(v2 + 352) + 4 * (v10 - 1));
    uint64_t v12 = v6 + 32 * v11;
    int v13 = (_DWORD *)(v12 + 20);
    uint64_t v14 = *(int *)(v12 + 20);
    if (v14) {
      *(_DWORD *)(v6 + 32 * v14 + 28) = result;
    }
    int v17 = *(_DWORD *)(v12 + 24);
    uint64_t v15 = (_DWORD *)(v12 + 24);
    int v16 = v17;
    if (!v17) {
      *(_DWORD *)(v6 + 32 * v11 + 16) = result;
    }
    *int v13 = result;
    _DWORD *v15 = v16 + 1;
  }
  uint64_t v18 = v6 + 32 * (int)result;
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  return result;
}

uint64_t processInternalEntity(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *(void *)(a1 + 600);
  if (v6)
  {
    *(void *)(a1 + 600) = *(void *)(v6 + 16);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 40);
    if (!v6) {
      return 1;
    }
  }
  *(unsigned char *)(a2 + 56) = 1;
  uint64_t v7 = a1;
  do
  {
    int v8 = (_DWORD *)v7;
    uint64_t v7 = *(void *)(v7 + 920);
  }
  while (v7);
  ++v8[248];
  unsigned int v9 = v8[249] + 1;
  v8[249] = v9;
  unsigned int v10 = v8[250];
  if (v9 > v10) {
    v8[250] = v10 + 1;
  }
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v11 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = v6;
  *(void *)(v6 + 16) = v11;
  *(void *)(v6 + 24) = a2;
  uint64_t v12 = *(unsigned int *)(a1 + 612);
  *(_DWORD *)(v6 + 32) = v12;
  *(unsigned char *)(v6 + 36) = a3;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = v13 + *(int *)(a2 + 16);
  uint64_t v20 = v13;
  uint64_t v15 = *(uint64_t (***)(void, uint64_t, uint64_t, uint64_t *))(a1 + 464);
  if (*(unsigned char *)(a2 + 57))
  {
    uint64_t v16 = (*v15)(*(void *)(a1 + 464), v13, v14, &v20);
    uint64_t result = doProlog(a1, *(void *)(a1 + 464), v13, v14, v16, v20, &v20, 0, 0);
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = doContent(a1, v12, v15, v13, v14, &v20, 0, 1);
    if (result) {
      return result;
    }
  }
  if (v14 == v20 || *(_DWORD *)(a1 + 928) != 3)
  {
    if (*(void *)(*(void *)(a1 + 592) + 24) == a2)
    {
      uint64_t v18 = a1;
      do
      {
        uint64_t v19 = v18;
        uint64_t v18 = *(void *)(v18 + 920);
      }
      while (v18);
      uint64_t result = 0;
      --*(_DWORD *)(v19 + 996);
      *(unsigned char *)(a2 + 56) = 0;
      *(void *)(a1 + 592) = *(void *)(v6 + 16);
      *(void *)(v6 + 16) = *(void *)(a1 + 600);
      *(void *)(a1 + 600) = v6;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a2 + 20) = v20 - v13;
    *(void *)(a1 + 552) = internalEntityProcessor;
  }
  return result;
}

uint64_t reportProcessingInstruction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 152))
  {
    uint64_t v7 = a3 + 2 * *(int *)(a2 + 128);
    uint64_t v8 = v7 + (*(int (**)(uint64_t, uint64_t))(a2 + 56))(a2, v7);
    uint64_t result = poolStoreString((uint64_t *)(a1 + 808), a2, v7, v8);
    if (result)
    {
      uint64_t v10 = result;
      *(void *)(a1 + 840) = *(void *)(a1 + 832);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a2, v8);
      uint64_t result = poolStoreString((uint64_t *)(a1 + 808), a2, v11, a4 - 2 * *(int *)(a2 + 128));
      if (result)
      {
        uint64_t v12 = result;
        normalizeLines((unsigned char *)result);
        (*(void (**)(void, uint64_t, uint64_t))(a1 + 152))(*(void *)(a1 + 8), v10, v12);
        uint64_t v13 = *(void **)(a1 + 816);
        uint64_t v14 = *(void **)(a1 + 808);
        if (v13)
        {
          if (!v14)
          {
LABEL_13:
            *(void *)(a1 + 808) = 0;
            *(void *)(a1 + 824) = 0;
            *(void *)(a1 + 840) = 0;
            uint64_t result = 1;
            *(void *)(a1 + 832) = 0;
            return result;
          }
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
            void *v15 = v13;
            uint64_t v13 = v15;
          }
          while (v14);
        }
        else
        {
          uint64_t v15 = *(void **)(a1 + 808);
        }
        *(void *)(a1 + 816) = v15;
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (*(void *)(a1 + 184)) {
      reportDefault((void *)a1, a2, a3, a4);
    }
    return 1;
  }
  return result;
}

uint64_t reportComment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 160))
  {
    uint64_t result = poolStoreString((uint64_t *)(a1 + 808), a2, a3 + 4 * *(int *)(a2 + 128), a4 - 3 * *(int *)(a2 + 128));
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    normalizeLines((unsigned char *)result);
    (*(void (**)(void, uint64_t))(a1 + 160))(*(void *)(a1 + 8), v6);
    uint64_t v7 = *(void **)(a1 + 816);
    uint64_t v8 = *(void **)(a1 + 808);
    if (v7)
    {
      if (!v8)
      {
LABEL_12:
        *(void *)(a1 + 808) = 0;
        *(void *)(a1 + 824) = 0;
        *(void *)(a1 + 840) = 0;
        uint64_t result = 1;
        *(void *)(a1 + 832) = 0;
        return result;
      }
      do
      {
        unsigned int v9 = v8;
        uint64_t v8 = (void *)*v8;
        *unsigned int v9 = v7;
        uint64_t v7 = v9;
      }
      while (v8);
    }
    else
    {
      unsigned int v9 = *(void **)(a1 + 808);
    }
    *(void *)(a1 + 816) = v9;
    goto LABEL_12;
  }
  if (*(void *)(a1 + 184)) {
    reportDefault((void *)a1, a2, a3, a4);
  }
  return 1;
}

int8x8_t hash(uint64_t a1, char *a2)
{
  v11[3] = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v2 = a1;
    a1 = *(void *)(a1 + 920);
  }
  while (a1);
  uint64_t v3 = *(void *)(v2 + 944);
  v8.i64[0] = 0x736F6D6570736575;
  v8.i64[1] = v3 ^ 0x646F72616E646F6DLL;
  uint64_t v9 = 0x6C7967656E657261;
  uint64_t v10 = v3 ^ 0x7465646279746573;
  v11[1] = v11;
  v11[2] = 0;
  if (*a2)
  {
    uint64_t v4 = 0;
    do
      uint64_t v5 = v4 + 1;
    while (a2[++v4]);
  }
  else
  {
    uint64_t v5 = 0;
  }
  v11[0] = 0;
  sip24_update(v8.i64, a2, v5);
  return sip24_final(&v8);
}

uint64_t *sip24_update(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v5 = (unint64_t)&a2[a3];
  uint64_t v6 = (unsigned char **)(a1 + 5);
  uint64_t v7 = a1 + 4;
  uint64_t v8 = (uint64_t)&a2[a3 - 1];
  do
  {
    if ((unint64_t)v3 >= v5)
    {
      BOOL v13 = 0;
    }
    else
    {
      uint64_t v9 = *v6;
      if (*v6 >= (unsigned char *)v6)
      {
        BOOL v13 = 1;
      }
      else
      {
        uint64_t v10 = v8 - (void)v3;
        while (1)
        {
          uint64_t v11 = v3;
          char v12 = *v3++;
          *uint64_t v6 = v9 + 1;
          *uint64_t v9 = v12;
          if (!v10) {
            break;
          }
          uint64_t v9 = *v6;
          --v10;
          if (*v6 >= (unsigned char *)v6) {
            goto LABEL_11;
          }
        }
        uint64_t v3 = (char *)v5;
LABEL_11:
        BOOL v13 = (unint64_t)(v11 + 1) < v5;
      }
    }
    if (*v6 < (unsigned char *)v6) {
      break;
    }
    uint64_t v14 = a1[4];
    a1[3] ^= v14;
    sip_round(a1, 2);
    *a1 ^= v14;
    uint64_t v15 = a1[6] + 8;
    a1[5] = (uint64_t)v7;
    a1[6] = v15;
  }
  while (v13);
  return a1;
}

int8x8_t sip24_final(int8x16_t *a1)
{
  __int32 v2 = a1[2].i32[2] - (a1 + 32);
  unint64_t v3 = (unint64_t)(v2 + a1[3].i32[0]) << 56;
  switch((char)v2)
  {
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      goto LABEL_5;
    case 5:
      goto LABEL_4;
    case 6:
      goto LABEL_3;
    case 7:
      v3 |= (unint64_t)a1[2].u8[6] << 48;
LABEL_3:
      v3 |= (unint64_t)a1[2].u8[5] << 40;
LABEL_4:
      v3 |= (unint64_t)a1[2].u8[4] << 32;
LABEL_5:
      v3 |= (unint64_t)a1[2].u8[3] << 24;
LABEL_6:
      v3 |= (unint64_t)a1[2].u8[2] << 16;
LABEL_7:
      v3 |= (unint64_t)a1[2].u8[1] << 8;
LABEL_8:
      v3 |= a1[2].u8[0];
      break;
    default:
      break;
  }
  a1[1].i64[1] ^= v3;
  sip_round(a1->i64, 2);
  a1->i64[0] ^= v3;
  a1[1].i64[0] ^= 0xFFuLL;
  sip_round(a1->i64, 4);
  int8x16_t v4 = veorq_s8(*a1, a1[1]);
  return veor_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
}

uint64_t *sip_round(uint64_t *result, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = *result;
    uint64_t v3 = result[1];
    uint64_t v5 = result[2];
    uint64_t v4 = result[3];
    do
    {
      uint64_t v6 = v2 + v3;
      uint64_t v7 = v6 ^ __ROR8__(v3, 51);
      uint64_t v8 = v5 + v4;
      uint64_t v9 = __ROR8__(v4, 48);
      uint64_t v2 = (v8 ^ v9) + __ROR8__(v6, 32);
      uint64_t v4 = v2 ^ __ROR8__(v8 ^ v9, 43);
      uint64_t v10 = v8 + v7;
      uint64_t v3 = v10 ^ __ROR8__(v7, 47);
      uint64_t v5 = __ROR8__(v10, 32);
      --a2;
    }
    while (a2);
    *uint64_t result = v2;
    result[1] = v3;
    result[2] = v5;
    result[3] = v4;
  }
  return result;
}

uint64_t doContent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, int a8)
{
  int v8 = a7;
  uint64_t v116 = (char **)a4;
  uint64_t v14 = *(void *)(a1 + 696);
  if (*(void *)(a1 + 312) == a3)
  {
    uint64_t v15 = (uint64_t *)(a1 + 568);
    uint64_t v16 = (uint64_t *)(a1 + 576);
  }
  else
  {
    uint64_t v15 = *(uint64_t **)(a1 + 592);
    uint64_t v16 = v15 + 1;
  }
  uint64_t *v15 = a4;
  uint64_t v107 = (void *)(a1 + 824);
  uint64_t v108 = (uint64_t *)(a1 + 808);
  uint64_t v104 = v14;
  uint64_t v105 = (uint64_t *)(v14 + 160);
  while (2)
  {
    unsigned int v115 = v116;
    int v17 = (*(uint64_t (**)(uint64_t))(a3 + 8))(a3);
    int v18 = v17;
    if (v17 == -3 || v17 == -5)
    {
      uint64_t v20 = (uint64_t)v116;
      if (v8) {
        uint64_t v21 = (uint64_t)v116;
      }
      else {
        uint64_t v21 = a5;
      }
    }
    else
    {
      uint64_t v21 = (uint64_t)v115;
      uint64_t v20 = (uint64_t)v116;
    }
    if (!accountingDiffTolerated(a1, v17, v20, v21, a8)) {
      return 43;
    }
    uint64_t v22 = (uint64_t)v115;
    *uint64_t v16 = (uint64_t)v115;
    uint64_t v23 = 17;
    switch(v18)
    {
      case -5:
        if (v8) {
          goto LABEL_166;
        }
        uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 144);
        if (v96)
        {
          if (*(unsigned char *)(a3 + 132))
          {
            uint64_t v97 = *(void *)(a1 + 8);
            uint64_t v98 = (uint64_t)v116;
            uint64_t v99 = (a5 - v116);
          }
          else
          {
            uint64_t v102 = *(void *)(a1 + 120);
            id v111 = *(char **)(a1 + 112);
            (*(void (**)(uint64_t, char ***, uint64_t, char **, uint64_t))(a3 + 112))(a3, &v116, a5, &v111, v102);
            uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 144);
            uint64_t v97 = *(void *)(a1 + 8);
            uint64_t v98 = *(void *)(a1 + 112);
            uint64_t v99 = (v111 - v98);
          }
          v96(v97, v98, v99);
        }
        else if (*(void *)(a1 + 184))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, a5);
        }
        if (!a2)
        {
          uint64_t *v15 = a5;
          return 3;
        }
        if (*(_DWORD *)(a1 + 612) == a2) {
          goto LABEL_193;
        }
        uint64_t *v15 = a5;
        return 13;
      case -4:
        if (v8) {
          goto LABEL_166;
        }
        if (a2 < 1) {
          return 3;
        }
        if (*(_DWORD *)(a1 + 612) != a2) {
          return 13;
        }
LABEL_166:
        uint64_t v23 = 0;
        uint64_t v94 = (uint64_t)v116;
        goto LABEL_167;
      case -3:
        if (v8) {
          goto LABEL_166;
        }
        *uint64_t v16 = a5;
        uint64_t v100 = *(void (**)(void, char **, uint64_t))(a1 + 144);
        if (v100)
        {
          LOBYTE(v111) = 10;
          v100(*(void *)(a1 + 8), &v111, 1);
        }
        else if (*(void *)(a1 + 184))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, a5);
        }
        if (!a2) {
          return 3;
        }
        if (*(_DWORD *)(a1 + 612) != a2) {
          return 13;
        }
LABEL_193:
        uint64_t v23 = 0;
        *a6 = a5;
        return v23;
      case -2:
        if (v8) {
          goto LABEL_166;
        }
        return 6;
      case -1:
        if (v8) {
          goto LABEL_166;
        }
        return 5;
      case 0:
        uint64_t *v15 = v22;
        return 4;
      case 1:
      case 2:
        id v111 = 0;
        uint64_t v24 = *(void *)(a1 + 720);
        int v106 = a2;
        if (v24)
        {
          *(void *)(a1 + 720) = *(void *)v24;
LABEL_69:
          *(void *)(v24 + 80) = 0;
          *(void *)uint64_t v24 = *(void *)(a1 + 712);
          *(void *)(a1 + 712) = v24;
          *(void *)(v24 + 32) = 0;
          *(void *)(v24 + 40) = 0;
          *(void *)(v24 + 8) = (char *)v116 + *(int *)(a3 + 128);
          int v60 = (*(uint64_t (**)(uint64_t))(a3 + 56))(a3);
          *(_DWORD *)(v24 + 16) = v60;
          ++*(_DWORD *)(a1 + 612);
          unint64_t v61 = *(void *)(v24 + 8) + v60;
          unint64_t v114 = *(void *)(v24 + 8);
          uint64_t v62 = *(void *)(v24 + 72);
          id v111 = *(char **)(v24 + 64);
          int v63 = (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t, char **, uint64_t))(a3 + 112))(a3, &v114, v61, &v111, v62 - 1);
          long long v64 = v111;
          uint64_t v65 = *(void *)(v24 + 64);
          int v66 = v111 - v65;
          if (v114 < v61 && v63 != 1)
          {
            uint64_t v103 = a6;
            do
            {
              uint64_t v67 = 2 * (*(_DWORD *)(v24 + 72) - (int)v65);
              uint64_t v68 = (*(uint64_t (**)(void))(a1 + 40))(*(void *)(a1 + 24));
              if (!v68) {
                return 1;
              }
              *(void *)(v24 + 64) = v68;
              *(void *)(v24 + 72) = v68 + v67;
              id v111 = (char *)(v68 + v66);
              int v69 = (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t, char **, uint64_t))(a3 + 112))(a3, &v114, v61, &v111, v68 + v67 - 1);
              long long v64 = v111;
              uint64_t v65 = *(void *)(v24 + 64);
              int v66 = v111 - v65;
            }
            while (v114 < v61 && v69 != 1);
            a6 = v103;
          }
          *(_DWORD *)(v24 + 48) = v66;
          *(void *)(v24 + 24) = v65;
          char *v64 = 0;
          uint64_t v71 = storeAtts(a1, a3, (uint64_t)v116, (char **)(v24 + 24), (uint64_t *)(v24 + 80), a8);
          if (v71) {
            return v71;
          }
          BOOL v72 = *(void (**)(void, void, void))(a1 + 128);
          if (v72)
          {
            v72(*(void *)(a1 + 8), *(void *)(v24 + 24), *(void *)(a1 + 760));
            a2 = v106;
            int v8 = a7;
          }
          else
          {
            a2 = v106;
            int v8 = a7;
            if (*(void *)(a1 + 184)) {
              reportDefault((void *)a1, a3, (uint64_t)v116, (uint64_t)v115);
            }
          }
          uint64_t v76 = *(void **)(a1 + 816);
          uint64_t v77 = *(void **)(a1 + 808);
          if (v76)
          {
            if (!v77)
            {
LABEL_100:
              uint64_t *v108 = 0;
              v107[1] = 0;
              uint64_t v107[2] = 0;
              void *v107 = 0;
              goto LABEL_143;
            }
            do
            {
              uint64_t v78 = v77;
              uint64_t v77 = (void *)*v77;
              void *v78 = v76;
              uint64_t v76 = v78;
            }
            while (v77);
          }
          else
          {
            uint64_t v78 = *(void **)(a1 + 808);
          }
          *(void *)(a1 + 816) = v78;
          goto LABEL_100;
        }
        uint64_t v58 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 88);
        if (!v58) {
          return 1;
        }
        uint64_t v24 = v58;
        uint64_t v59 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 32);
        *(void *)(v24 + 64) = v59;
        if (v59)
        {
          *(void *)(v24 + 72) = v59 + 32;
          goto LABEL_69;
        }
        (*(void (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 24), v24);
        return 1;
      case 3:
      case 4:
        uint64_t v25 = (uint64_t)v116 + *(int *)(a3 + 128);
        unint64_t v114 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a3, v25);
        id v111 = (char *)poolStoreString(v108, a3, v25, v25 + v26);
        if (!v111) {
          return 1;
        }
        *(void *)(a1 + 840) = *(void *)(a1 + 832);
        uint64_t v27 = storeAtts(a1, a3, (uint64_t)v116, &v111, (uint64_t *)&v114, 2);
        if (v27)
        {
          uint64_t v23 = v27;
          freeBindings(a1, v114);
          return v23;
        }
        *(void *)(a1 + 840) = *(void *)(a1 + 832);
        int v28 = *(void (**)(void, char *, void))(a1 + 128);
        if (v28)
        {
          v28(*(void *)(a1 + 8), v111, *(void *)(a1 + 760));
          uint64_t v29 = *(void (**)(void, char *))(a1 + 136);
          if (!v29) {
            goto LABEL_84;
          }
          if (*(void *)(a1 + 128))
          {
            uint64_t *v15 = *v16;
            (*(void (**)(void, char *))(a1 + 136))(*(void *)(a1 + 8), v111);
            goto LABEL_84;
          }
LABEL_83:
          v29(*(void *)(a1 + 8), v111);
          goto LABEL_84;
        }
        uint64_t v29 = *(void (**)(void, char *))(a1 + 136);
        if (v29) {
          goto LABEL_83;
        }
        if (*(void *)(a1 + 184)) {
          reportDefault((void *)a1, a3, (uint64_t)v116, (uint64_t)v115);
        }
LABEL_84:
        __int16 v73 = *(void **)(a1 + 816);
        int v74 = *(void **)(a1 + 808);
        if (v73)
        {
          if (!v74) {
            goto LABEL_90;
          }
          do
          {
            uint64_t v75 = v74;
            int v74 = (void *)*v74;
            *uint64_t v75 = v73;
            __int16 v73 = v75;
          }
          while (v74);
        }
        else
        {
          uint64_t v75 = *(void **)(a1 + 808);
        }
        *(void *)(a1 + 816) = v75;
LABEL_90:
        *(void *)(a1 + 808) = 0;
        v107[1] = 0;
        uint64_t v107[2] = 0;
        void *v107 = 0;
        freeBindings(a1, v114);
        if (!*(_DWORD *)(a1 + 612)) {
          goto LABEL_147;
        }
        goto LABEL_143;
      case 5:
        if (*(_DWORD *)(a1 + 612) == a2) {
          return 13;
        }
        uint64_t v30 = *(void *)(a1 + 712);
        uint64_t v31 = (char *)v116 + 2 * *(int *)(a3 + 128);
        int v32 = (*(uint64_t (**)(uint64_t, char *))(a3 + 56))(a3, v31);
        if (v32 != *(_DWORD *)(v30 + 16) || cstdlib_memcmp(*(const void **)(v30 + 8), v31, v32))
        {
          uint64_t *v15 = (uint64_t)v31;
          return 7;
        }
        *(void *)(a1 + 712) = *(void *)v30;
        *(void *)uint64_t v30 = *(void *)(a1 + 720);
        *(void *)(a1 + 720) = v30;
        --*(_DWORD *)(a1 + 612);
        uint64_t v33 = *(void (**)(void, void))(a1 + 136);
        if (v33)
        {
          if (*(unsigned char *)(a1 + 480))
          {
            BOOL v34 = *(unsigned char **)(v30 + 32);
            if (v34)
            {
              unsigned int v35 = (unsigned char *)(*(void *)(v30 + 24) + *(int *)(v30 + 52));
              char v36 = *v34;
              if (*v34)
              {
                uint64_t v37 = v34 + 1;
                do
                {
                  *v35++ = v36;
                  int v38 = *v37++;
                  char v36 = v38;
                }
                while (v38);
              }
              uint64_t v39 = *(unsigned char **)(v30 + 40);
              if (*(unsigned char *)(a1 + 481)) {
                BOOL v40 = v39 == 0;
              }
              else {
                BOOL v40 = 1;
              }
              if (!v40)
              {
                *v35++ = *(unsigned char *)(a1 + 916);
                char v41 = *v39;
                if (*v39)
                {
                  uint64_t v42 = v39 + 1;
                  do
                  {
                    *v35++ = v41;
                    int v43 = *v42++;
                    char v41 = v43;
                  }
                  while (v43);
                }
              }
              unsigned char *v35 = 0;
              uint64_t v33 = *(void (**)(void, void))(a1 + 136);
            }
          }
          v33(*(void *)(a1 + 8), *(void *)(v30 + 24));
        }
        else if (*(void *)(a1 + 184))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, (uint64_t)v115);
        }
        uint64_t v87 = *(void *)(v30 + 80);
        if (v87)
        {
          do
          {
            int v88 = *(void (**)(void, void))(a1 + 232);
            uint64_t v89 = v87;
            if (v88)
            {
              v88(*(void *)(a1 + 8), **(void **)v87);
              uint64_t v89 = *(void *)(v30 + 80);
            }
            uint64_t v90 = *(void *)(v89 + 8);
            *(void *)(v30 + 80) = v90;
            *(void *)(v87 + 8) = *(void *)(a1 + 736);
            *(void *)(a1 + 736) = v87;
            *(void *)(*(void *)v87 + 8) = *(void *)(v87 + 16);
            uint64_t v87 = v90;
          }
          while (v90);
        }
        int v8 = a7;
        if (*(_DWORD *)(a1 + 612)) {
          goto LABEL_143;
        }
LABEL_147:
        int v95 = *(_DWORD *)(a1 + 928);
        if (v95 == 2)
        {
          uint64_t *v15 = (uint64_t)v115;
          return 35;
        }
        else if (v95 == 3)
        {
          *(void *)(a1 + 552) = epilogProcessor;
          uint64_t *v15 = (uint64_t)v115;
LABEL_145:
          uint64_t v23 = 0;
          uint64_t v94 = (uint64_t)v115;
LABEL_167:
          *a6 = v94;
        }
        else
        {
          return epilogProcessor(a1, (uint64_t)v115, a5, a6);
        }
        return v23;
      case 6:
        uint64_t v44 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 144);
        if (v44)
        {
          if (*(unsigned char *)(a3 + 132))
          {
            uint64_t v45 = *(void *)(a1 + 8);
            uint64_t v46 = v116;
            uint64_t v47 = (v22 - v116);
            goto LABEL_60;
          }
          while (1)
          {
            uint64_t v48 = *(void *)(a1 + 120);
            id v111 = *(char **)(a1 + 112);
            unsigned int v49 = (*(uint64_t (**)(uint64_t, char ***, uint64_t, char **, uint64_t))(a3 + 112))(a3, &v116, v22, &v111, v48);
            *uint64_t v16 = (uint64_t)v116;
            v44(*(void *)(a1 + 8), *(char ***)(a1 + 112), v111 - *(void *)(a1 + 112));
            if (v49 <= 1) {
              break;
            }
            uint64_t *v15 = (uint64_t)v116;
            uint64_t v22 = (uint64_t)v115;
          }
          goto LABEL_61;
        }
        int v8 = a7;
        if (!*(void *)(a1 + 184)) {
          goto LABEL_143;
        }
LABEL_102:
        uint64_t v79 = (uint64_t)v116;
        uint64_t v80 = (void *)a1;
        uint64_t v81 = a3;
        uint64_t v82 = v22;
        goto LABEL_142;
      case 7:
        uint64_t v50 = *(void (**)(void, char **, uint64_t))(a1 + 144);
        if (!v50) {
          goto LABEL_49;
        }
        LOBYTE(v111) = 10;
        v50(*(void *)(a1 + 8), &v111, 1);
        goto LABEL_143;
      case 8:
        int v51 = *(void (**)(void))(a1 + 168);
        if (v51)
        {
          v51(*(void *)(a1 + 8));
        }
        else if (*(void *)(a1 + 184))
        {
          reportDefault((void *)a1, a3, (uint64_t)v116, v22);
        }
        uint64_t v71 = doCdataSection(a1, a3, (uint64_t *)&v115, a5, a6, v8, a8);
        if (v71) {
          return v71;
        }
        if (v115) {
          goto LABEL_143;
        }
        uint64_t v23 = 0;
        *(void *)(a1 + 552) = cdataSectionProcessor;
        return v23;
      case 9:
        LOBYTE(v111) = 0;
        LOBYTE(v111) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 88))(a3, (uint64_t)v116 + *(int *)(a3 + 128), v22 - *(int *)(a3 + 128));
        if ((_BYTE)v111)
        {
          accountingDiffTolerated(a1, 9, (uint64_t)&v111, (uint64_t)&v111 + 1, 1);
          uint64_t v52 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 144);
          if (v52)
          {
            uint64_t v53 = *(void *)(a1 + 8);
            uint64_t v54 = &v111;
            uint64_t v55 = 1;
LABEL_56:
            v52(v53, v54, v55);
            goto LABEL_143;
          }
LABEL_140:
          if (!*(void *)(a1 + 184)) {
            goto LABEL_143;
          }
LABEL_141:
          uint64_t v82 = (uint64_t)v115;
          uint64_t v79 = (uint64_t)v116;
          uint64_t v80 = (void *)a1;
          uint64_t v81 = a3;
LABEL_142:
          reportDefault(v80, v81, v79, v82);
          goto LABEL_143;
        }
        int v83 = (char *)poolStoreString(v105, a3, (uint64_t)v116 + *(int *)(a3 + 128), (uint64_t)v115 - *(int *)(a3 + 128));
        if (!v83) {
          return 1;
        }
        int v84 = v83;
        int v85 = (char ***)lookup(a1, (uint64_t *)v104, v83, 0);
        int v86 = v85;
        *(void *)(v104 + 184) = *(void *)(v104 + 192);
        if (!*(unsigned char *)(v104 + 257) || *(unsigned char *)(v104 + 258))
        {
          if (!v85) {
            return 11;
          }
          if (!*((unsigned char *)v85 + 58)) {
            return 24;
          }
LABEL_113:
          if (*((unsigned char *)v85 + 56)) {
            return 12;
          }
          if (v85[6]) {
            return 15;
          }
          if (v85[1])
          {
            if (*(unsigned char *)(a1 + 608))
            {
              uint64_t v71 = processInternalEntity(a1, (uint64_t)v85, 0);
              int v8 = a7;
              if (v71) {
                return v71;
              }
              goto LABEL_143;
            }
            uint64_t v52 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 264);
            int v8 = a7;
            if (v52)
            {
              uint64_t v53 = *(void *)(a1 + 8);
              uint64_t v54 = *v86;
              uint64_t v55 = 0;
              goto LABEL_56;
            }
            goto LABEL_140;
          }
          if (!*(void *)(a1 + 248)) {
            goto LABEL_136;
          }
          uint64_t v23 = 1;
          *((unsigned char *)v85 + 56) = 1;
          uint64_t Context = getContext(a1);
          *((unsigned char *)v86 + 56) = 0;
          int v8 = a7;
          if (!Context) {
            return v23;
          }
          if (!(*(unsigned int (**)(void, uint64_t, char **, char **, char **))(a1 + 248))(*(void *)(a1 + 256), Context, v86[4], v86[3], v86[5]))return 21; {
          *(void *)(a1 + 832) = *(void *)(a1 + 840);
          }
          goto LABEL_143;
        }
        if (v85) {
          goto LABEL_113;
        }
        unsigned int v92 = *(void (**)(void, char *, void))(a1 + 264);
        if (!v92)
        {
LABEL_136:
          int v8 = a7;
          if (!*(void *)(a1 + 184)) {
            goto LABEL_143;
          }
          goto LABEL_141;
        }
        v92(*(void *)(a1 + 8), v84, 0);
LABEL_61:
        int v8 = a7;
LABEL_143:
        int v93 = *(_DWORD *)(a1 + 928);
        uint64_t v116 = v115;
        uint64_t *v15 = (uint64_t)v115;
        if (v93 == 2) {
          return 35;
        }
        if (v93 == 3) {
          goto LABEL_145;
        }
        continue;
      case 10:
        unsigned int v56 = (*(uint64_t (**)(uint64_t, char **))(a3 + 80))(a3, v116);
        if ((v56 & 0x80000000) != 0) {
          return 14;
        }
        uint64_t v44 = *(void (**)(uint64_t, char **, uint64_t))(a1 + 144);
        if (!v44) {
          goto LABEL_136;
        }
        uint64_t v57 = *(void *)(a1 + 8);
        uint64_t v47 = crnc3rdprtyrnm_XmlUtf8Encode(v56, &v111);
        uint64_t v46 = &v111;
        uint64_t v45 = v57;
LABEL_60:
        v44(v45, v46, v47);
        goto LABEL_61;
      case 11:
        if (!reportProcessingInstruction(a1, a3, (uint64_t)v116, v22)) {
          return 1;
        }
        goto LABEL_143;
      case 12:
        return v23;
      case 13:
        if (!reportComment(a1, a3, (uint64_t)v116, v22)) {
          return 1;
        }
        goto LABEL_143;
      default:
LABEL_49:
        if (!*(void *)(a1 + 184)) {
          goto LABEL_143;
        }
        goto LABEL_102;
    }
  }
}

uint64_t storeRawNames(uint64_t a1)
{
  for (uint64_t i = *(uint64_t ***)(a1 + 712); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v3 = *((int *)i + 12) + 1;
    uint64_t v4 = i[8];
    uint64_t v5 = (char *)v4 + v3;
    uint64_t v6 = i[1];
    if (v6 == (uint64_t *)((char *)v4 + v3)) {
      break;
    }
    size_t v7 = *((int *)i + 4);
    if (2147483646 - *((int *)i + 12) < v7) {
      return 0;
    }
    int v8 = v7 + v3;
    if ((char *)i[9] - (char *)v4 < (int)v7 + (int)v3)
    {
      uint64_t v9 = v8;
      uint64_t result = (*(uint64_t (**)(void, uint64_t *, void))(a1 + 40))(*(void *)(a1 + 24), i[8], v8);
      if (!result) {
        return result;
      }
      uint64_t v11 = i[8];
      if (i[3] == v11) {
        i[3] = (uint64_t *)result;
      }
      char v12 = i[4];
      if (v12) {
        i[4] = (uint64_t *)(result + (char *)v12 - (char *)v11);
      }
      i[8] = (uint64_t *)result;
      i[9] = (uint64_t *)(result + v9);
      uint64_t v5 = (char *)(result + v3);
      uint64_t v6 = i[1];
      size_t v7 = *((int *)i + 4);
    }
    cstdlib_memcpy(v5, v6, v7);
    i[1] = (uint64_t *)v5;
  }
  return 1;
}

uint64_t getContext(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 696);
  uint64_t v3 = *(unsigned char **)(v2 + 312);
  if (v3)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 832);
    if (v4 == *(unsigned char **)(a1 + 824))
    {
      if (!poolGrow((uint64_t *)(a1 + 808))) {
        return 0;
      }
      uint64_t v4 = *(unsigned char **)(a1 + 832);
    }
    *(void *)(a1 + 832) = v4 + 1;
    unsigned char *v4 = 61;
    uint64_t v5 = *(_DWORD *)(*(void *)(v2 + 312) + 40) - (*(unsigned char *)(a1 + 916) != 0);
    if ((int)v5 >= 1)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        size_t v7 = *(unsigned char **)(a1 + 832);
        if (v7 == *(unsigned char **)(a1 + 824))
        {
          if (!poolGrow((uint64_t *)(a1 + 808))) {
            return 0;
          }
          size_t v7 = *(unsigned char **)(a1 + 832);
        }
        char v8 = *(unsigned char *)(*(void *)(*(void *)(v2 + 312) + 32) + i);
        *(void *)(a1 + 832) = v7 + 1;
        unsigned char *v7 = v8;
      }
    }
    LODWORD(v3) = 1;
  }
  uint64_t v9 = *(char ****)(v2 + 120);
  if (v9) {
    uint64_t v10 = &v9[*(void *)(v2 + 136)];
  }
  else {
    uint64_t v10 = 0;
  }
  while (v9 != v10)
  {
    uint64_t v11 = v9;
    BOOL v13 = *v9++;
    char v12 = v13;
    if (v13 && v12[1])
    {
      if (v3)
      {
        uint64_t v14 = *(unsigned char **)(a1 + 832);
        if (v14 == *(unsigned char **)(a1 + 824))
        {
          if (!poolGrow((uint64_t *)(a1 + 808))) {
            return 0;
          }
          uint64_t v14 = *(unsigned char **)(a1 + 832);
        }
        *(void *)(a1 + 832) = v14 + 1;
        unsigned char *v14 = 12;
      }
      char v15 = **v12;
      if (v15)
      {
        uint64_t v16 = (unsigned __int8 *)(*v12 + 1);
        do
        {
          int v17 = *(unsigned char **)(a1 + 832);
          if (v17 == *(unsigned char **)(a1 + 824))
          {
            if (!poolGrow((uint64_t *)(a1 + 808))) {
              return 0;
            }
            char v15 = *(v16 - 1);
            int v17 = *(unsigned char **)(a1 + 832);
          }
          *(void *)(a1 + 832) = v17 + 1;
          *int v17 = v15;
          int v18 = *v16++;
          char v15 = v18;
        }
        while (v18);
      }
      uint64_t v3 = *(unsigned char **)(a1 + 832);
      if (v3 == *(unsigned char **)(a1 + 824))
      {
        if (!poolGrow((uint64_t *)(a1 + 808))) {
          return 0;
        }
        uint64_t v3 = *(unsigned char **)(a1 + 832);
      }
      uint64_t v9 = v11 + 1;
      *(void *)(a1 + 832) = v3 + 1;
      *uint64_t v3 = 61;
      uint64_t v19 = *((_DWORD *)v12[1] + 10) - (*(unsigned char *)(a1 + 916) != 0);
      LODWORD(v3) = 1;
      if ((int)v19 >= 1)
      {
        for (uint64_t j = 0; j != v19; ++j)
        {
          uint64_t v21 = *(unsigned char **)(a1 + 832);
          if (v21 == *(unsigned char **)(a1 + 824))
          {
            if (!poolGrow((uint64_t *)(a1 + 808))) {
              return 0;
            }
            uint64_t v21 = *(unsigned char **)(a1 + 832);
          }
          char v22 = *(unsigned char *)(*((void *)v12[1] + 4) + j);
          *(void *)(a1 + 832) = v21 + 1;
          *uint64_t v21 = v22;
        }
        LODWORD(v3) = 1;
      }
    }
  }
  uint64_t v23 = *(void **)v2;
  if (*(void *)v2) {
    uint64_t v24 = &v23[*(void *)(v2 + 16)];
  }
  else {
    uint64_t v24 = 0;
  }
  while (v23 != v24)
  {
    uint64_t v25 = v23;
    uint64_t v27 = (unsigned char *)*v23++;
    int v26 = v27;
    if (v27 && v26[56])
    {
      if (v3)
      {
        int v28 = *(unsigned char **)(a1 + 832);
        if (v28 == *(unsigned char **)(a1 + 824))
        {
          if (!poolGrow((uint64_t *)(a1 + 808))) {
            return 0;
          }
          int v28 = *(unsigned char **)(a1 + 832);
        }
        *(void *)(a1 + 832) = v28 + 1;
        *int v28 = 12;
      }
      uint64_t v23 = v25 + 1;
      char v29 = **(unsigned char **)v26;
      LODWORD(v3) = 1;
      if (v29)
      {
        uint64_t v30 = (unsigned __int8 *)(*(void *)v26 + 1);
        do
        {
          uint64_t v31 = *(unsigned char **)(a1 + 832);
          if (v31 == *(unsigned char **)(a1 + 824))
          {
            if (!poolGrow((uint64_t *)(a1 + 808))) {
              return 0;
            }
            char v29 = *(v30 - 1);
            uint64_t v31 = *(unsigned char **)(a1 + 832);
          }
          *(void *)(a1 + 832) = v31 + 1;
          *uint64_t v31 = v29;
          int v32 = *v30++;
          char v29 = v32;
        }
        while (v32);
        LODWORD(v3) = 1;
      }
    }
  }
  uint64_t v33 = *(unsigned char **)(a1 + 832);
  if (v33 != *(unsigned char **)(a1 + 824)) {
    goto LABEL_60;
  }
  if (poolGrow((uint64_t *)(a1 + 808)))
  {
    uint64_t v33 = *(unsigned char **)(a1 + 832);
LABEL_60:
    *(void *)(a1 + 832) = v33 + 1;
    unsigned char *v33 = 0;
    return *(void *)(a1 + 840);
  }
  return 0;
}

uint64_t storeAtts(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t *a5, int a6)
{
  v148[3] = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 696);
  char v12 = lookup(a1, (uint64_t *)(v11 + 40), *a4, 0);
  if (!v12)
  {
    int v38 = (char *)poolCopyString((uint64_t *)(v11 + 160), *a4);
    if (!v38) {
      return 1;
    }
    uint64_t v39 = lookup(a1, (uint64_t *)(v11 + 40), v38, 0x28uLL);
    if (!v39) {
      return 1;
    }
    char v12 = v39;
    if (*(unsigned char *)(a1 + 480))
    {
      if (!setElementTypePrefix(a1, (uint64_t)v39)) {
        return 1;
      }
    }
  }
  uint64_t v13 = *((unsigned int *)v12 + 6);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a2 + 72))(a2, a3, *(unsigned int *)(a1 + 744), *(void *)(a1 + 760));
  if ((int)v14 > (int)(v13 ^ 0x7FFFFFFF)) {
    return 1;
  }
  uint64_t v15 = v14;
  int v16 = *(_DWORD *)(a1 + 744);
  if ((int)v14 + (int)v13 > v16)
  {
    if ((int)v13 > 2147483631 || (int)v14 > 2147483631 - (int)v13) {
      return 1;
    }
    int v18 = v14 + v13 + 16;
    *(_DWORD *)(a1 + 744) = v18;
    uint64_t v19 = (*(uint64_t (**)(void, void, uint64_t))(a1 + 40))(*(void *)(a1 + 24), *(void *)(a1 + 760), 32 * v18);
    if (!v19)
    {
      *(_DWORD *)(a1 + 744) = v16;
      return 1;
    }
    *(void *)(a1 + 760) = v19;
    if ((int)v15 > v16) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 72))(a2, a3, v15, v19);
    }
  }
  uint64_t v137 = a4;
  uint64_t v138 = v11;
  uint64_t v144 = *(void *)(a1 + 760);
  if ((int)v15 >= 1)
  {
    int v139 = a6;
    uint64_t v20 = 0;
    int v141 = 0;
    int v21 = 0;
    uint64_t v22 = v15;
    while (1)
    {
      uint64_t v23 = *(void *)(*(void *)(a1 + 760) + 32 * v20);
      int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a2, v23);
      AttributeId = getAttributeId(a1, a2, v23, v23 + v24);
      if (!AttributeId) {
        return 1;
      }
      uint64_t v26 = (uint64_t)AttributeId;
      if (*(unsigned char *)(*AttributeId - 1))
      {
        if (*(void *)(a1 + 312) == a2) {
          *(void *)(a1 + 568) = *(void *)(*(void *)(a1 + 760) + 32 * v20);
        }
        return 8;
      }
      *(unsigned char *)(*AttributeId - 1) = 1;
      uint64_t v27 = v21 + 1;
      *(void *)(v144 + 8 * v21) = *AttributeId;
      uint64_t v28 = *(void *)(a1 + 760);
      uint64_t v29 = v28 + 32 * v20;
      if (*(unsigned char *)(v29 + 24))
      {
        uint64_t v30 = poolStoreString((uint64_t *)(a1 + 808), a2, *(void *)(v29 + 8), *(void *)(v29 + 16));
        uint64_t v31 = v144;
        *(void *)(v144 + 8 * (int)v27) = v30;
        if (!v30) {
          return 1;
        }
      }
      else
      {
        if (*((unsigned char *)AttributeId + 16)) {
          BOOL v32 = (int)v13 < 1;
        }
        else {
          BOOL v32 = 1;
        }
        if (v32)
        {
LABEL_26:
          uint64_t v35 = 1;
        }
        else
        {
          uint64_t v33 = (unsigned __int8 *)(v12[4] + 8);
          uint64_t v34 = v13;
          while (AttributeId != *((void **)v33 - 1))
          {
            v33 += 24;
            if (!--v34) {
              goto LABEL_26;
            }
          }
          uint64_t v35 = *v33;
        }
        uint64_t result = storeAttributeValue(a1, a2, v35, *(void *)(v28 + 32 * v20 + 8), *(void *)(v28 + 32 * v20 + 16), (uint64_t *)(a1 + 808), v139);
        if (result) {
          return result;
        }
        uint64_t v31 = v144;
        *(void *)(v144 + 8 * v27) = *(void *)(a1 + 840);
      }
      *(void *)(a1 + 840) = *(void *)(a1 + 832);
      uint64_t v37 = *(void **)(v26 + 8);
      if (v37)
      {
        if (*(unsigned char *)(v26 + 17))
        {
          uint64_t result = addBinding(a1, v37, v26, *(unsigned __int8 **)(v31 + 8 * (int)v27), a5);
          if (result) {
            return result;
          }
        }
        else
        {
          v21 += 2;
          ++v141;
          *(unsigned char *)(*(void *)v26 - 1) = 2;
        }
      }
      else
      {
        v21 += 2;
      }
      if (++v20 == v22) {
        goto LABEL_44;
      }
    }
  }
  int v21 = 0;
  int v141 = 0;
LABEL_44:
  *(_DWORD *)(a1 + 748) = v21;
  BOOL v40 = (uint64_t *)v12[2];
  if (v40)
  {
    uint64_t v41 = *v40;
    uint64_t v42 = v144;
    int v43 = v141;
    if (*(unsigned char *)(*v40 - 1))
    {
      uint64_t v44 = v138;
      if (v21 < 1) {
        goto LABEL_58;
      }
      uint64_t v45 = 0;
      while (*(void *)(v144 + 8 * v45) != v41)
      {
        v45 += 2;
        if (v21 <= (int)v45) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      LODWORD(v45) = -1;
      uint64_t v44 = v138;
    }
  }
  else
  {
    LODWORD(v45) = -1;
    uint64_t v44 = v138;
    uint64_t v42 = v144;
    int v43 = v141;
  }
  *(_DWORD *)(a1 + 752) = v45;
LABEL_58:
  if ((int)v13 >= 1)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 24 * v13;
    do
    {
      uint64_t v48 = v12[4];
      uint64_t v49 = *(void *)(v48 + v46);
      uint64_t v50 = *(void *)v49;
      if (!*(unsigned char *)(*(void *)v49 - 1))
      {
        int v51 = *(unsigned __int8 **)(v48 + v46 + 16);
        if (v51)
        {
          uint64_t v52 = *(void **)(v49 + 8);
          if (v52)
          {
            if (*(unsigned char *)(v49 + 17))
            {
              uint64_t result = addBinding(a1, v52, v49, v51, a5);
              uint64_t v42 = v144;
              if (result) {
                return result;
              }
              goto LABEL_61;
            }
            *(unsigned char *)(v50 - 1) = 2;
            ++v43;
          }
          else
          {
            *(unsigned char *)(v50 - 1) = 1;
          }
          uint64_t v53 = (void *)(v42 + 8 * v21);
          *uint64_t v53 = **(void **)(v48 + v46);
          v21 += 2;
          v53[1] = *(void *)(v48 + v46 + 16);
        }
      }
LABEL_61:
      v46 += 24;
    }
    while (v47 != v46);
  }
  uint64_t v54 = v21;
  *(void *)(v42 + 8 * v21) = 0;
  if (!v43)
  {
LABEL_143:
    LODWORD(v65) = 0;
LABEL_144:
    if ((int)v65 < (int)v54)
    {
      uint64_t v113 = (int)v65;
      do
      {
        *(unsigned char *)(*(void *)(v42 + 8 * v113) - 1) = 0;
        v113 += 2;
      }
      while (v113 < v54);
    }
    for (uint64_t i = *a5; i; uint64_t i = *(void *)(i + 8))
      *(unsigned char *)(**(void **)(i + 24) - 1) = 0;
    if (*(unsigned char *)(a1 + 480))
    {
      uint64_t v115 = v12[1];
      if (v115)
      {
        uint64_t v116 = *(void *)(v115 + 8);
        if (!v116) {
          return 27;
        }
        uint64_t v117 = *v137;
        do
          int v118 = *v117++;
        while (v118 != 58);
LABEL_157:
        uint64_t v119 = **(char ***)v116;
        if (*(unsigned char *)(a1 + 481)) {
          BOOL v120 = v119 == 0;
        }
        else {
          BOOL v120 = 1;
        }
        if (v120)
        {
          LODWORD(v121) = 0;
        }
        else
        {
          uint64_t v121 = 0;
          while (v119[v121++])
            ;
        }
        uint64_t v123 = 0;
        v137[1] = v117;
        signed int v124 = *(_DWORD *)(v116 + 40);
        v137[2] = v119;
        *((_DWORD *)v137 + 7) = v124;
        *((_DWORD *)v137 + 8) = v121;
        while (v117[v123++])
          ;
        if (v124 > (int)(v121 ^ 0x7FFFFFFF) || (int)((v121 + v124) ^ 0x7FFFFFFF) <= (int)v123 - 1) {
          return 1;
        }
        int v126 = v123 + v121 + v124;
        if (v126 <= *(_DWORD *)(v116 + 44))
        {
          unint64_t v129 = *(char **)(v116 + 32);
        }
        else
        {
          if (v126 > 2147483623) {
            return 1;
          }
          int v127 = v126 + 24;
          v128 = (char *)(*(uint64_t (**)(void, void))(a1 + 32))(*(void *)(a1 + 24), v126 + 24);
          if (!v128) {
            return 1;
          }
          unint64_t v129 = v128;
          *(_DWORD *)(v116 + 44) = v127;
          cstdlib_memcpy(v128, *(const void **)(v116 + 32), *(int *)(v116 + 40));
          uint64_t v130 = *(void **)(a1 + 712);
          for (j = *(void *)(v116 + 32); v130; uint64_t v130 = (void *)*v130)
          {
            if (v130[3] == j) {
              v130[3] = v129;
            }
          }
          (*(void (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 24), j);
          *(void *)(v116 + 32) = v129;
          signed int v124 = *(_DWORD *)(v116 + 40);
        }
        int v132 = &v129[v124];
        cstdlib_memcpy(v132, v117, v123);
        if (v121)
        {
          v132[v123 - 1] = *(unsigned char *)(a1 + 916);
          cstdlib_memcpy(&v132[v123], **(const void ***)v116, (int)v121);
        }
        uint64_t result = 0;
        *uint64_t v137 = *(char **)(v116 + 32);
        return result;
      }
      uint64_t v116 = *(void *)(v44 + 312);
      if (v116)
      {
        uint64_t v117 = *v137;
        goto LABEL_157;
      }
    }
    return 0;
  }
  unsigned int v55 = *(unsigned __int8 *)(a1 + 784);
  if (v55 > 0x1F) {
    return 1;
  }
  if (!((2 * v43) >> v55))
  {
    uint64_t v58 = *(void *)(a1 + 776);
    int v59 = 1 << v55;
    if (v58) {
      goto LABEL_85;
    }
    goto LABEL_83;
  }
  unsigned __int8 v56 = *(unsigned char *)(a1 + 784);
  while (v43 >> v56++)
    ;
  *(unsigned char *)(a1 + 784) = v56;
  if (v56 > 2u)
  {
    if (v56 >= 0x20u)
    {
LABEL_164:
      *(unsigned char *)(a1 + 784) = v55;
      return 1;
    }
  }
  else
  {
    unsigned __int8 v56 = 3;
    *(unsigned char *)(a1 + 784) = 3;
  }
  uint64_t v60 = (*(uint64_t (**)(void, void, uint64_t))(a1 + 40))(*(void *)(a1 + 24), *(void *)(a1 + 768), 24 << v56);
  if (!v60) {
    goto LABEL_164;
  }
  *(void *)(a1 + 768) = v60;
  int v59 = 1 << v56;
  uint64_t v42 = v144;
LABEL_83:
  uint64_t v61 = v59 - 1;
  uint64_t v62 = (void *)(*(void *)(a1 + 768) + 24 * v59 - 24);
  uint64_t v58 = 0xFFFFFFFFLL;
  do
  {
    void *v62 = 0xFFFFFFFFLL;
    v62 -= 3;
  }
  while (v61--);
LABEL_85:
  uint64_t v64 = v58 - 1;
  *(void *)(a1 + 776) = v58 - 1;
  if ((int)v54 < 1) {
    goto LABEL_143;
  }
  uint64_t v65 = 0;
  int v66 = (uint64_t *)(v44 + 80);
  unint64_t v67 = (v59 - 1);
  uint64_t v133 = ~v67;
  int v134 = v59;
  int v136 = v59 - 1;
  unint64_t v140 = v67 >> 2;
  uint64_t v142 = v64;
  uint64_t v135 = (uint64_t *)(v44 + 80);
  while (1)
  {
    uint64_t v68 = *(char **)(v42 + 8 * v65);
    if (*(v68 - 1) != 2)
    {
      *(v68 - 1) = 0;
      goto LABEL_141;
    }
    v148[0] = 0;
    uint64_t v69 = a1;
    do
    {
      uint64_t v70 = v69;
      uint64_t v69 = *(void *)(v69 + 920);
    }
    while (v69);
    uint64_t v71 = *(void *)(v70 + 944);
    v145.i64[0] = 0x736F6D6570736575;
    v145.i64[1] = v71 ^ 0x646F72616E646F6DLL;
    uint64_t v146 = 0x6C7967656E657261;
    uint64_t v147 = v71 ^ 0x7465646279746573;
    v148[1] = v148;
    v148[2] = 0;
    *(v68 - 1) = 0;
    BOOL v72 = lookup(a1, v66, v68, 0);
    if (!v72) {
      return 1;
    }
    uint64_t v73 = v72[1];
    if (!v73) {
      return 1;
    }
    uint64_t v74 = *(void *)(v73 + 8);
    if (!v74) {
      return 27;
    }
    uint64_t v75 = *(int *)(v74 + 40);
    if ((int)v75 > 0)
    {
      int v76 = v43;
      for (uint64_t k = 0; k < v75; ++k)
      {
        char v78 = *(unsigned char *)(*(void *)(v74 + 32) + k);
        uint64_t v79 = *(unsigned char **)(a1 + 832);
        if (v79 == *(unsigned char **)(a1 + 824))
        {
          if (!poolGrow((uint64_t *)(a1 + 808))) {
            return 1;
          }
          uint64_t v79 = *(unsigned char **)(a1 + 832);
        }
        *(void *)(a1 + 832) = v79 + 1;
        unsigned char *v79 = v78;
        uint64_t v75 = *(int *)(v74 + 40);
      }
      int v43 = v76;
      uint64_t v44 = v138;
    }
    sip24_update(v145.i64, *(char **)(v74 + 32), v75);
    do
      int v80 = *v68++;
    while (v80 != 58);
    if (*v68)
    {
      uint64_t v81 = 0;
      do
        uint64_t v82 = &v68[v81++];
      while (v82[1]);
    }
    else
    {
      uint64_t v81 = 0;
    }
    sip24_update(v145.i64, v68, v81);
    do
    {
      int v83 = *(char **)(a1 + 832);
      if (v83 == *(char **)(a1 + 824))
      {
        if (!poolGrow((uint64_t *)(a1 + 808))) {
          return 1;
        }
        int v83 = *(char **)(a1 + 832);
      }
      char v84 = *v68;
      *(void *)(a1 + 832) = v83 + 1;
      char *v83 = v84;
    }
    while (*v68++);
    sip24_final(&v145);
    uint64_t v87 = v86;
    int v88 = v136 & v86;
    uint64_t v89 = *(void *)(a1 + 768);
    uint64_t v90 = (int)(v136 & v86);
    uint64_t v91 = v142;
    if (*(void *)(v89 + 24 * v90) == v142) {
      break;
    }
LABEL_133:
    uint64_t v42 = v144;
    if (*(unsigned char *)(a1 + 481))
    {
      *(unsigned char *)(*(void *)(a1 + 832) - 1) = *(unsigned char *)(a1 + 916);
      uint64_t v107 = **(char ***)v74;
      do
      {
        uint64_t v108 = *(unsigned char **)(a1 + 832);
        if (v108 == *(unsigned char **)(a1 + 824))
        {
          if (!poolGrow((uint64_t *)(a1 + 808))) {
            return 1;
          }
          uint64_t v108 = *(unsigned char **)(a1 + 832);
          uint64_t v42 = v144;
          uint64_t v91 = v142;
        }
        char v109 = *v107;
        *(void *)(a1 + 832) = v108 + 1;
        unsigned char *v108 = v109;
      }
      while (*v107++);
    }
    uint64_t v111 = *(void *)(a1 + 840);
    *(void *)(a1 + 840) = *(void *)(a1 + 832);
    *(void *)(v42 + 8 * v65) = v111;
    long long v112 = (uint64_t *)(*(void *)(a1 + 768) + 24 * (int)v90);
    uint64_t *v112 = v91;
    v112[1] = v87;
    v112[2] = v111;
    if (!--v43)
    {
      LODWORD(v65) = v65 + 2;
      goto LABEL_144;
    }
    int v66 = v135;
LABEL_141:
    v65 += 2;
    if ((int)v54 <= (int)v65) {
      goto LABEL_144;
    }
  }
  int v92 = 0;
  while (1)
  {
    if (v87 == *(void *)(v89 + 24 * v90 + 8))
    {
      int v93 = *(unsigned char **)(a1 + 840);
      uint64_t v94 = *(unsigned __int8 **)(v89 + 24 * v90 + 16);
      BOOL v95 = *v93 == 0;
      if (*v93) {
        BOOL v96 = *v93 == *v94;
      }
      else {
        BOOL v96 = 0;
      }
      if (v96)
      {
        uint64_t v97 = v94 + 1;
        uint64_t v98 = v93 + 1;
        do
        {
          int v100 = *v98++;
          int v99 = v100;
          BOOL v95 = v100 == 0;
          int v102 = *v97++;
          int v101 = v102;
          if (v99) {
            BOOL v103 = v99 == v101;
          }
          else {
            BOOL v103 = 0;
          }
        }
        while (v103);
      }
      if (v95) {
        return 8;
      }
    }
    if (!v92) {
      int v92 = ((v87 & (unint64_t)v133) >> (*(unsigned char *)(a1 + 784) - 1)) & v140 | 1;
    }
    BOOL v104 = __OFSUB__(v88, v92);
    int v105 = v88 - v92;
    if (v105 < 0 != v104) {
      int v106 = v134;
    }
    else {
      int v106 = 0;
    }
    int v88 = v105 + v106;
    uint64_t v90 = v88;
    if (*(void *)(v89 + 24 * v88) != v142) {
      goto LABEL_133;
    }
  }
}

uint64_t freeBindings(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (void *)result;
    do
    {
      uint64_t v4 = (uint64_t (*)(void, void))v3[29];
      if (v4) {
        uint64_t result = v4(v3[1], **(void **)v2);
      }
      uint64_t v6 = *(void **)v2;
      uint64_t v5 = *(void *)(v2 + 8);
      *(void *)(v2 + 8) = v3[92];
      v3[92] = v2;
      v6[1] = *(void *)(v2 + 16);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t epilogProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  *(void *)(a1 + 552) = epilogProcessor;
  *(void *)(a1 + 568) = a2;
  while (1)
  {
    int v7 = (**(uint64_t (***)(void))(a1 + 312))();
    if (!accountingDiffTolerated(a1, v7, v5, 0, 0)) {
      return 43;
    }
    *(void *)(a1 + 576) = 0;
    uint64_t result = 9;
    if (v7 > 12)
    {
      if (v7 == 13)
      {
        if (!reportComment(a1, *(void *)(a1 + 312), v5, 0)) {
          return 1;
        }
      }
      else
      {
        if (v7 != 15) {
          return result;
        }
        if (*(void *)(a1 + 184)) {
          reportDefault((void *)a1, *(void *)(a1 + 312), v5, 0);
        }
      }
      goto LABEL_12;
    }
    if (v7 != 11) {
      break;
    }
    if (!reportProcessingInstruction(a1, *(void *)(a1 + 312), v5, 0)) {
      return 1;
    }
LABEL_12:
    uint64_t v5 = 0;
    *(void *)(a1 + 568) = 0;
    int v9 = *(_DWORD *)(a1 + 928);
    if (v9 == 2) {
      return 35;
    }
    if (v9 == 3)
    {
LABEL_26:
      uint64_t result = 0;
      *a4 = v5;
      return result;
    }
  }
  switch(v7)
  {
    case -4:
      goto LABEL_26;
    case -3:
      return result;
    case -2:
      if (!*(unsigned char *)(a1 + 932)) {
        goto LABEL_26;
      }
      return 6;
    case -1:
      if (!*(unsigned char *)(a1 + 932)) {
        goto LABEL_26;
      }
      return 5;
    case 0:
      *(void *)(a1 + 568) = 0;
      return 4;
    default:
      if (v7 != -15) {
        return result;
      }
      if (*(void *)(a1 + 184))
      {
        reportDefault((void *)a1, *(void *)(a1 + 312), v5, 0);
        if (*(_DWORD *)(a1 + 928) == 2) {
          return 35;
        }
      }
      uint64_t result = 0;
      *a4 = 0;
      break;
  }
  return result;
}

uint64_t doCdataSection(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, int a6, int a7)
{
  uint64_t v11 = *a3;
  uint64_t v29 = *a3;
  if (*(void *)(a1 + 312) == a2)
  {
    char v12 = (uint64_t *)(a1 + 568);
    *(void *)(a1 + 568) = v11;
    uint64_t v13 = (void *)(a1 + 576);
  }
  else
  {
    char v12 = *(uint64_t **)(a1 + 592);
    uint64_t v13 = v12 + 1;
  }
  *char v12 = v11;
  *a3 = 0;
  while (2)
  {
    uint64_t v28 = v11;
    int v14 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    if (!accountingDiffTolerated(a1, v14, v29, v28, a7)) {
      return 43;
    }
    uint64_t v15 = v28;
    *uint64_t v13 = v28;
    switch(v14)
    {
      case -4:
      case -1:
        if (a6) {
          goto LABEL_29;
        }
        return 20;
      case -3:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        goto LABEL_27;
      case -2:
        if (!a6) {
          return 6;
        }
LABEL_29:
        uint64_t result = 0;
        *a5 = v29;
        return result;
      case 0:
        *char v12 = v15;
        return 4;
      case 6:
        int v16 = *(void (**)(void, uint64_t, void))(a1 + 144);
        if (!v16) {
          goto LABEL_15;
        }
        if (*(unsigned char *)(a2 + 132))
        {
          v16(*(void *)(a1 + 8), v29, (v15 - v29));
        }
        else
        {
          while (1)
          {
            uint64_t v17 = *(void *)(a1 + 120);
            uint64_t v27 = *(void *)(a1 + 112);
            unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t))(a2 + 112))(a2, &v29, v15, &v27, v17);
            *uint64_t v13 = v28;
            v16(*(void *)(a1 + 8), *(void *)(a1 + 112), v27 - *(void *)(a1 + 112));
            if (v18 <= 1) {
              break;
            }
            *char v12 = v29;
            uint64_t v15 = v28;
          }
        }
        goto LABEL_17;
      case 7:
        uint64_t v19 = *(void (**)(void, uint64_t *, uint64_t))(a1 + 144);
        if (v19)
        {
          LOBYTE(v27) = 10;
          v19(*(void *)(a1 + 8), &v27, 1);
        }
        else
        {
LABEL_15:
          if (*(void *)(a1 + 184)) {
            reportDefault((void *)a1, a2, v29, v15);
          }
        }
LABEL_17:
        uint64_t v11 = v28;
        uint64_t v29 = v28;
        *char v12 = v28;
        int v20 = *(_DWORD *)(a1 + 928);
        if (v20 != 2)
        {
          if (v20 == 3)
          {
            uint64_t result = 0;
            *a5 = v11;
            return result;
          }
          continue;
        }
        return 35;
      default:
        if (v14 == 40)
        {
          uint64_t v22 = *(void (**)(void))(a1 + 176);
          if (v22)
          {
            v22(*(void *)(a1 + 8));
            uint64_t v23 = a5;
          }
          else
          {
            uint64_t v23 = a5;
            if (*(void *)(a1 + 184)) {
              reportDefault((void *)a1, a2, v29, v15);
            }
          }
          uint64_t v24 = v28;
          *a3 = v28;
          uint64_t *v23 = v24;
          if (*(_DWORD *)(a1 + 928) == 2) {
            return 35;
          }
          else {
            return 0;
          }
        }
        else
        {
LABEL_27:
          *char v12 = v15;
          return 23;
        }
    }
  }
}

uint64_t cdataSectionProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  uint64_t result = doCdataSection(a1, *(void *)(a1 + 312), &v9, a3, a4, *(unsigned char *)(a1 + 932) == 0, 0);
  if (!result)
  {
    uint64_t v8 = v9;
    if (v9)
    {
      if (*(void *)(a1 + 920))
      {
        *(void *)(a1 + 552) = externalEntityContentProcessor;
        return externalEntityContentProcessor(a1, v8, a3, (uint64_t)a4);
      }
      else
      {
        *(void *)(a1 + 552) = contentProcessor;
        return contentProcessor(a1);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t setElementTypePrefix(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 696);
  uint64_t v6 = *(char **)a2;
  while (1)
  {
    if (!v6[v4]) {
      return 1;
    }
    if (v6[v4] == 58) {
      break;
    }
    ++v4;
  }
  for (; v4; --v4)
  {
    int v7 = *(unsigned char **)(v5 + 184);
    if (v7 == *(unsigned char **)(v5 + 176))
    {
      uint64_t result = poolGrow((uint64_t *)(v5 + 160));
      if (!result) {
        return result;
      }
      int v7 = *(unsigned char **)(v5 + 184);
    }
    char v9 = *v6++;
    *(void *)(v5 + 184) = v7 + 1;
    unsigned char *v7 = v9;
  }
  uint64_t v10 = *(unsigned char **)(v5 + 184);
  if (v10 == *(unsigned char **)(v5 + 176))
  {
    uint64_t result = poolGrow((uint64_t *)(v5 + 160));
    if (!result) {
      return result;
    }
    uint64_t v10 = *(unsigned char **)(v5 + 184);
  }
  *(void *)(v5 + 184) = v10 + 1;
  unsigned char *v10 = 0;
  uint64_t result = (uint64_t)lookup(a1, (uint64_t *)(v5 + 120), *(char **)(v5 + 192), 0x10uLL);
  if (result)
  {
    uint64_t v11 = *(void *)(v5 + 192);
    if (*(void *)result == v11) {
      *(void *)(v5 + 192) = *(void *)(v5 + 184);
    }
    else {
      *(void *)(v5 + 184) = v11;
    }
    *(void *)(a2 + 8) = result;
    return 1;
  }
  return result;
}

uint64_t addBinding(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  unsigned __int8 v10 = *a4;
  uint64_t v11 = (unsigned char *)*a2;
  if (*a4)
  {
    if (v11)
    {
      if (*v11 == 120 && v11[1] == 109 && v11[2] == 108)
      {
        int v12 = v11[3];
        if (!v11[3])
        {
          LODWORD(v11) = 1;
          uint64_t result = 38;
LABEL_12:
          unint64_t v14 = 0;
          int v15 = 1;
          int v16 = 1;
          while (1)
          {
            unint64_t v17 = v14;
            if (v16 && (v14 > 0x24 || addBinding_xmlNamespace[v14] != v10)) {
              int v16 = 0;
            }
            if (v15) {
              int v18 = v12;
            }
            else {
              int v18 = 0;
            }
            if (v18 == 1 && (v17 > 0x1D || addBinding_xmlnsNamespace[v17] != v10)) {
              int v15 = 0;
            }
            if (*(unsigned char *)(a1 + 480) && *(unsigned __int8 *)(a1 + 916) == v10) {
              break;
            }
LABEL_27:
            unint64_t v14 = v17 + 1;
            unsigned __int8 v10 = a4[v17 + 1];
            if (!v10) {
              goto LABEL_28;
            }
          }
          switch(v10)
          {
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case '\'':
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '=':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '[':
            case ']':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            case '~':
              goto LABEL_27;
            default:
              uint64_t result = 2;
              break;
          }
          return result;
        }
        if (v12 == 110 && v11[4] == 115 && !v11[5]) {
          return 39;
        }
      }
      LODWORD(v11) = 0;
    }
    int v12 = 1;
    uint64_t result = 40;
    goto LABEL_12;
  }
  if (v11) {
    return 28;
  }
  LODWORD(v14) = 0;
  int v16 = 1;
  uint64_t result = 40;
  int v15 = 1;
LABEL_28:
  if (v16) {
    BOOL v19 = v14 == 36;
  }
  else {
    BOOL v19 = 0;
  }
  int v20 = v19;
  if (v11 == v20)
  {
    if (v15 && v14 == 29) {
      return 40;
    }
    if (*(unsigned char *)(a1 + 916)) {
      size_t v21 = (v14 + 1);
    }
    else {
      size_t v21 = v14;
    }
    uint64_t v22 = *(void *)(a1 + 736);
    if (v22)
    {
      if ((int)v21 <= *(_DWORD *)(v22 + 44))
      {
        uint64_t v23 = *(void **)(v22 + 32);
        goto LABEL_54;
      }
      if (v21 <= 0x7FFFFFE7)
      {
        uint64_t v23 = (void *)(*(uint64_t (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 24), *(void *)(v22 + 32), (v21 + 24));
        if (v23)
        {
          *(void *)(v22 + 32) = v23;
          *(_DWORD *)(v22 + 44) = v21 + 24;
LABEL_54:
          *(void *)(a1 + 736) = *(void *)(v22 + 8);
          goto LABEL_55;
        }
      }
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 24), 48);
      uint64_t result = 1;
      if (!v22 || v21 > 0x7FFFFFE7) {
        return result;
      }
      uint64_t v23 = (void *)(*(uint64_t (**)(void, void))(a1 + 32))(*(void *)(a1 + 24), (v21 + 24));
      *(void *)(v22 + 32) = v23;
      if (v23)
      {
        *(_DWORD *)(v22 + 44) = v21 + 24;
LABEL_55:
        *(_DWORD *)(v22 + 40) = v21;
        cstdlib_memcpy(v23, a4, v21);
        if (*(unsigned char *)(a1 + 916)) {
          *(unsigned char *)(*(void *)(v22 + 32) + (int)v21 - 1) = *(unsigned char *)(a1 + 916);
        }
        *(void *)uint64_t v22 = a2;
        *(void *)(v22 + 16) = a2[1];
        *(void *)(v22 + 24) = a3;
        if (!*a4 && (void *)(*(void *)(a1 + 696) + 304) == a2) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v22;
        }
        a2[1] = v24;
        *(void *)(v22 + 8) = *a5;
        *a5 = v22;
        if (a3)
        {
          uint64_t v25 = *(void (**)(void, void, unsigned __int8 *))(a1 + 224);
          if (v25)
          {
            if (a2[1]) {
              uint64_t v26 = a4;
            }
            else {
              uint64_t v26 = 0;
            }
            v25(*(void *)(a1 + 8), *a2, v26);
          }
        }
        return 0;
      }
      (*(void (**)(void, uint64_t))(a1 + 48))(*(void *)(a1 + 24), v22);
    }
    return 1;
  }
  return result;
}

uint64_t externalEntityContentProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = doContent(a1, 1, *(void *)(a1 + 312), a2, a3, a4, *(unsigned char *)(a1 + 932) == 0, 1);
  if (!v5 && !storeRawNames(a1)) {
    return 1;
  }
  return v5;
}

uint64_t appendAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  uint64_t v10 = a4;
  uint64_t v14 = *(void *)(a1 + 696);
  uint64_t v41 = a4;
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 32))(a2, a4, a5, &v41);
  if (!accountingDiffTolerated(a1, v15, v10, v41, a7)) {
    return 43;
  }
  while (2)
  {
    uint64_t result = 0;
    switch(v15)
    {
      case -4:
        return result;
      case -3:
        uint64_t v41 = v10 + *(int *)(a2 + 128);
        goto LABEL_5;
      case -2:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        goto LABEL_58;
      case -1:
        if (*(void *)(a1 + 312) == a2) {
          *(void *)(a1 + 568) = v10;
        }
        return 4;
      case 0:
        if (*(void *)(a1 + 312) == a2) {
          *(void *)(a1 + 568) = v41;
        }
        return 4;
      case 6:
        if (!poolAppend(a6, a2, v10, v41)) {
          return 1;
        }
        goto LABEL_55;
      case 7:
        goto LABEL_5;
      case 9:
        char v39 = 0;
        char v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 88))(a2, v10 + *(int *)(a2 + 128), v41 - *(int *)(a2 + 128));
        if (v39)
        {
          accountingDiffTolerated(a1, 9, (uint64_t)&v39, (uint64_t)v40, 1);
          int v18 = (unsigned char *)a6[3];
          if (v18 == (unsigned char *)a6[2])
          {
            if (!poolGrow(a6)) {
              return 1;
            }
            int v18 = (unsigned char *)a6[3];
          }
          char v19 = v39;
          a6[3] = (uint64_t)(v18 + 1);
          unsigned char *v18 = v19;
          goto LABEL_55;
        }
        uint64_t v27 = (char *)poolStoreString((uint64_t *)(a1 + 856), a2, v10 + *(int *)(a2 + 128), v41 - *(int *)(a2 + 128));
        if (!v27) {
          return 1;
        }
        uint64_t v28 = lookup(a1, (uint64_t *)v14, v27, 0);
        uint64_t v29 = v28;
        *(void *)(a1 + 880) = *(void *)(a1 + 888);
        if ((uint64_t *)(v14 + 160) == a6)
        {
          if (*(_DWORD *)(a1 + 540))
          {
            if (*(unsigned char *)(v14 + 258))
            {
              if (!*(void *)(a1 + 592)) {
                goto LABEL_36;
              }
            }
            else if (!*(unsigned char *)(v14 + 257))
            {
              goto LABEL_36;
            }
          }
        }
        else if (!*(unsigned char *)(v14 + 257) || *(unsigned char *)(v14 + 258))
        {
LABEL_36:
          if (!v28) {
            return 11;
          }
          if (!*((unsigned char *)v28 + 58)) {
            return 24;
          }
          goto LABEL_45;
        }
        if (!v28) {
          goto LABEL_55;
        }
LABEL_45:
        if (!*((unsigned char *)v28 + 56))
        {
          if (v28[6])
          {
            uint64_t v38 = *(void *)(a1 + 312);
            uint64_t result = 15;
            goto LABEL_72;
          }
          uint64_t v30 = v28[1];
          if (!v30)
          {
            uint64_t v38 = *(void *)(a1 + 312);
            uint64_t result = 16;
            goto LABEL_72;
          }
          uint64_t v31 = *((int *)v28 + 4);
          *((unsigned char *)v28 + 56) = 1;
          uint64_t v32 = a1;
          do
          {
            uint64_t v33 = (_DWORD *)v32;
            uint64_t v32 = *(void *)(v32 + 920);
          }
          while (v32);
          ++v33[248];
          unsigned int v34 = v33[249] + 1;
          v33[249] = v34;
          unsigned int v35 = v33[250];
          if (v34 > v35) {
            v33[250] = v35 + 1;
          }
          uint64_t result = appendAttributeValue(a1, *(void *)(a1 + 464), a3, v30, v30 + v31, a6, 1);
          uint64_t v36 = a1;
          do
          {
            uint64_t v37 = v36;
            uint64_t v36 = *(void *)(v36 + 920);
          }
          while (v36);
          --*(_DWORD *)(v37 + 996);
          *((unsigned char *)v29 + 56) = 0;
          if (result) {
            return result;
          }
LABEL_55:
          uint64_t v10 = v41;
          int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 32))(a2, v41, a5, &v41);
          if (!accountingDiffTolerated(a1, v15, v10, v41, a7)) {
            return 43;
          }
          continue;
        }
        uint64_t v38 = *(void *)(a1 + 312);
        uint64_t result = 12;
LABEL_72:
        if (v38 == a2) {
          *(void *)(a1 + 568) = v10;
        }
        return result;
      case 10:
        unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a2, v10);
        if ((v20 & 0x80000000) != 0)
        {
          if (*(void *)(a1 + 312) == a2) {
            *(void *)(a1 + 568) = v10;
          }
          return 14;
        }
        if (a3 || v20 != 32 || (uint64_t v21 = a6[3], v21 != a6[4]) && *(unsigned char *)(v21 - 1) != 32)
        {
          int v22 = crnc3rdprtyrnm_XmlUtf8Encode(v20, v40);
          if (v22 >= 1)
          {
            uint64_t v23 = v22;
            uint64_t v24 = v40;
            do
            {
              uint64_t v25 = (unsigned char *)a6[3];
              if (v25 == (unsigned char *)a6[2])
              {
                if (!poolGrow(a6)) {
                  return 1;
                }
                uint64_t v25 = (unsigned char *)a6[3];
              }
              char v26 = *v24++;
              a6[3] = (uint64_t)(v25 + 1);
              unsigned char *v25 = v26;
              --v23;
            }
            while (v23);
          }
        }
        goto LABEL_55;
      default:
        if (v15 != 39)
        {
LABEL_58:
          if (*(void *)(a1 + 312) == a2) {
            *(void *)(a1 + 568) = v10;
          }
          return 23;
        }
LABEL_5:
        unint64_t v17 = (unsigned char *)a6[3];
        if (a3 || v17 != (unsigned char *)a6[4] && *(v17 - 1) != 32)
        {
          if (v17 == (unsigned char *)a6[2])
          {
            if (!poolGrow(a6)) {
              return 1;
            }
            unint64_t v17 = (unsigned char *)a6[3];
          }
          a6[3] = (uint64_t)(v17 + 1);
          *unint64_t v17 = 32;
        }
        goto LABEL_55;
    }
  }
}

uint64_t internalEntityProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 592);
  if (!v4) {
    return 23;
  }
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = v10 + *(int *)(v9 + 20);
  uint64_t v12 = v10 + *(int *)(v9 + 16);
  uint64_t v22 = v11;
  if (*(unsigned char *)(v9 + 57))
  {
    uint64_t v13 = (**(uint64_t (***)(void))(a1 + 464))();
    uint64_t v14 = doProlog(a1, *(void *)(a1 + 464), v11, v12, v13, v22, &v22, 0, 1);
  }
  else
  {
    uint64_t v14 = doContent(a1, *(unsigned int *)(v4 + 32), *(void *)(a1 + 464), v11, v12, &v22, 0, 1);
  }
  uint64_t v15 = v14;
  if (!v14)
  {
    uint64_t v17 = a1;
    if (v12 == v22 || (uint64_t v17 = a1, *(_DWORD *)(a1 + 928) != 3))
    {
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = *(void *)(v17 + 920);
      }
      while (v17);
      --*(_DWORD *)(v18 + 996);
      *(unsigned char *)(v9 + 56) = 0;
      uint64_t v19 = *(void *)(v4 + 16);
      *(void *)(a1 + 592) = v19;
      *(void *)(v4 + 16) = *(void *)(a1 + 600);
      *(void *)(a1 + 600) = v4;
      if (v19 && *(_DWORD *)(a1 + 928) == 3)
      {
        return 0;
      }
      else if (*(unsigned char *)(v9 + 57))
      {
        *(void *)(a1 + 552) = prologProcessor;
        uint64_t v20 = (**(uint64_t (***)(void))(a1 + 312))();
        LOBYTE(v21) = 1;
        return doProlog(a1, *(void *)(a1 + 312), a2, a3, v20, v22, a4, *(unsigned char *)(a1 + 932) == 0, v21);
      }
      else
      {
        *(void *)(a1 + 552) = contentProcessor;
        uint64_t v15 = doContent(a1, *(void *)(a1 + 920) != 0, *(void *)(a1 + 312), a2, a3, a4, *(unsigned char *)(a1 + 932) == 0, 0);
        if (!v15 && !storeRawNames(a1)) {
          return 1;
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
      *(_DWORD *)(v9 + 20) = v22 - *(_DWORD *)(v9 + 8);
    }
  }
  return v15;
}

unsigned char *normalizeLines(unsigned char *result)
{
  while (1)
  {
    int v1 = *result;
    if (!*result) {
      break;
    }
    if (v1 == 13)
    {
      uint64_t v2 = result;
      do
      {
        if (v1 == 13)
        {
          *uint64_t v2 = 10;
          int v3 = *++result;
          if (v3 == 10) {
            ++result;
          }
        }
        else
        {
          ++result;
          *uint64_t v2 = v1;
        }
        ++v2;
        int v1 = *result;
      }
      while (*result);
      *uint64_t v2 = 0;
      return result;
    }
    ++result;
  }
  return result;
}

uint64_t externalEntityInitProcessor2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 312) + 8))();
  if (v8 == -2)
  {
    if (*(unsigned char *)(a1 + 932))
    {
      *(void *)(a1 + 568) = v6;
      return 6;
    }
LABEL_12:
    uint64_t result = 0;
    *a4 = v6;
    return result;
  }
  if (v8 == -1)
  {
    if (*(unsigned char *)(a1 + 932))
    {
      *(void *)(a1 + 568) = v6;
      return 5;
    }
    goto LABEL_12;
  }
  if (v8 != 14)
  {
LABEL_7:
    *(void *)(a1 + 552) = externalEntityInitProcessor3;
    return externalEntityInitProcessor3(a1, v6, a3, a4);
  }
  if (!accountingDiffTolerated(a1, 14, v6, a2, 0)) {
    return 43;
  }
  uint64_t v6 = a2;
  if (a2 != a3) {
    goto LABEL_7;
  }
  uint64_t v6 = a3;
  if (*(unsigned char *)(a1 + 932)) {
    goto LABEL_7;
  }
  uint64_t result = 0;
  *a4 = a3;
  return result;
}

uint64_t externalEntityInitProcessor3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  *(void *)(a1 + 568) = a2;
  int v8 = (*(uint64_t (**)(void))(*(void *)(a1 + 312) + 8))();
  *(void *)(a1 + 576) = a2;
  switch(v8)
  {
    case -2:
      if (*(unsigned char *)(a1 + 932)) {
        return 6;
      }
LABEL_12:
      uint64_t result = 0;
      *a4 = v6;
      return result;
    case -1:
      if (*(unsigned char *)(a1 + 932)) {
        return 5;
      }
      goto LABEL_12;
    case 12:
      uint64_t result = processXmlDecl(a1, 1, v6, a2);
      if (result) {
        return result;
      }
      int v10 = *(_DWORD *)(a1 + 928);
      if (v10 == 2) {
        return 35;
      }
      if (v10 == 3)
      {
        uint64_t result = 0;
        *a4 = a2;
        return result;
      }
      uint64_t v6 = a2;
      break;
  }
  *(void *)(a1 + 552) = externalEntityContentProcessor;
  *(_DWORD *)(a1 + 612) = 1;
  return externalEntityContentProcessor(a1, v6, a3, (uint64_t)a4);
}

uint64_t entityValueInitProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  *(void *)(a1 + 568) = a2;
  int v8 = (**(uint64_t (***)(void))(a1 + 312))();
  uint64_t v9 = a2;
  *(void *)(a1 + 576) = a2;
  if (v8 >= 1)
  {
    uint64_t v10 = v6;
    while (1)
    {
      switch(v8)
      {
        case 14:
          if (!accountingDiffTolerated(a1, 14, v10, v9, 0)) {
            return 43;
          }
          uint64_t v9 = a2;
          *a4 = a2;
          uint64_t v10 = a2;
          break;
        case 29:
          *a4 = v9;
          return 2;
        case 12:
          uint64_t result = processXmlDecl(a1, 0, v6, v9);
          if (!result)
          {
            if (*(_DWORD *)(a1 + 928) == 2)
            {
              return 35;
            }
            else
            {
              *a4 = a2;
              *(void *)(a1 + 552) = entityValueProcessor;
              return entityValueProcessor(a1, a2, a3, a4);
            }
          }
          return result;
      }
      uint64_t v6 = v9;
      *(void *)(a1 + 568) = v9;
      int v8 = (**(uint64_t (***)(void))(a1 + 312))();
      uint64_t v9 = a2;
      *(void *)(a1 + 576) = a2;
      if (v8 < 1) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v10 = v6;
LABEL_12:
  if (v8) {
    BOOL v11 = *(unsigned char *)(a1 + 932) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    uint64_t result = 0;
    *a4 = v10;
  }
  else if ((v8 + 2) >= 3)
  {
    return storeEntityValue(a1, *(void *)(a1 + 312), v10, a3, 0);
  }
  else
  {
    return (4 - v8);
  }
  return result;
}

uint64_t externalParEntProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  uint64_t v12 = a2;
  uint64_t v8 = (**(uint64_t (***)(void))(a1 + 312))();
  uint64_t v9 = v8;
  if ((int)v8 <= 0)
  {
    if (v8) {
      BOOL v10 = *(unsigned char *)(a1 + 932) == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      if ((v8 + 2) < 3) {
        return (4 - v8);
      }
      goto LABEL_11;
    }
    uint64_t result = 0;
    *a4 = v6;
  }
  else
  {
    if (v8 != 14)
    {
LABEL_11:
      *(void *)(a1 + 552) = prologProcessor;
      return doProlog((void *)a1, *(void *)(a1 + 312), v6, a3, v9, v12, a4, *(unsigned char *)(a1 + 932) == 0, 1, 0);
    }
    if (accountingDiffTolerated(a1, 14, v6, v12, 0))
    {
      uint64_t v6 = v12;
      uint64_t v9 = (**(uint64_t (***)(void))(a1 + 312))();
      goto LABEL_11;
    }
    return 43;
  }
  return result;
}

uint64_t entityValueProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(uint64_t (***)(void))(a1 + 312);
  for (int i = (*v8)(v8); i >= 1; int i = (*v8)(v8))
    ;
  if (i) {
    BOOL v10 = *(unsigned char *)(a1 + 932) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t result = 0;
    *a4 = a2;
  }
  else if ((i + 2) >= 3)
  {
    return storeEntityValue(a1, (uint64_t)v8, a2, a3, 0);
  }
  else
  {
    return (4 - i);
  }
  return result;
}

uint64_t hashTableClear(uint64_t result)
{
  int v1 = (void *)result;
  if (*(void *)(result + 16))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void))(v1[4] + 24))(*(void *)v1[4], *(void *)(*v1 + 8 * v2));
      *(void *)(*v1 + 8 * v2++) = 0;
    }
    while (v2 < v1[2]);
  }
  v1[3] = 0;
  return result;
}

uint64_t hashTableDestroy(uint64_t *a1)
{
  if (a1[2])
  {
    unint64_t v2 = 0;
    do
      (*(void (**)(void, void))(a1[4] + 24))(*(void *)a1[4], *(void *)(*a1 + 8 * v2++));
    while (v2 < a1[2]);
  }
  int v3 = (uint64_t *)a1[4];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v3[3];
  uint64_t v5 = *v3;
  uint64_t v6 = *a1;

  return v4(v5, v6);
}

uint64_t copyEntityTable(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  int v7 = *(uint64_t **)a4;
  if (*(void *)a4) {
    uint64_t v8 = &v7[*(void *)(a4 + 16)];
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    do
    {
      if (v7 == v8) {
        return 1;
      }
      uint64_t v12 = *v7++;
      uint64_t v11 = v12;
    }
    while (!v12);
    uint64_t result = poolCopyString(a3, *(char **)v11);
    if (!result) {
      return result;
    }
    uint64_t result = (uint64_t)lookup(a1, a2, (char *)result, 0x40uLL);
    if (!result) {
      return result;
    }
    uint64_t v14 = result;
    uint64_t v15 = *(char **)(v11 + 24);
    if (!v15) {
      break;
    }
    uint64_t result = poolCopyString(a3, v15);
    if (!result) {
      return result;
    }
    *(void *)(v14 + 24) = result;
    uint64_t v16 = *(void *)(v11 + 32);
    if (v16)
    {
      if (v16 != v9)
      {
        uint64_t result = poolCopyString(a3, *(char **)(v11 + 32));
        uint64_t v10 = result;
        uint64_t v9 = v16;
        if (!result) {
          return result;
        }
      }
      *(void *)(v14 + 32) = v10;
    }
    uint64_t v17 = *(char **)(v11 + 40);
    if (v17)
    {
      uint64_t result = poolCopyString(a3, v17);
      if (!result) {
        return result;
      }
      *(void *)(v14 + 40) = result;
    }
LABEL_28:
    uint64_t v24 = *(char **)(v11 + 48);
    if (v24)
    {
      uint64_t result = poolCopyString(a3, v24);
      if (!result) {
        return result;
      }
      *(void *)(v14 + 48) = result;
    }
    *(_WORD *)(v14 + 57) = *(_WORD *)(v11 + 57);
  }
  uint64_t v25 = a2;
  uint64_t v18 = *(char **)(v11 + 8);
  int v19 = *(_DWORD *)(v11 + 16);
  if (!a3[3])
  {
    uint64_t result = poolGrow(a3);
    if (!result) {
      return result;
    }
  }
  if (v19 >= 1)
  {
    int v20 = v19 + 1;
    do
    {
      unsigned int v21 = (unsigned char *)a3[3];
      if (v21 == (unsigned char *)a3[2])
      {
        uint64_t result = poolGrow(a3);
        if (!result) {
          return result;
        }
        unsigned int v21 = (unsigned char *)a3[3];
      }
      char v22 = *v18++;
      a3[3] = (uint64_t)(v21 + 1);
      *unsigned int v21 = v22;
      --v20;
    }
    while (v20 > 1);
  }
  uint64_t v23 = a3[4];
  a3[4] = a3[3];
  if (v23)
  {
    *(void *)(v14 + 8) = v23;
    *(_DWORD *)(v14 + 16) = *(_DWORD *)(v11 + 16);
    a2 = v25;
    goto LABEL_28;
  }
  return 0;
}

unint64_t crnc3rdprtyrnm__INTERNAL_trim_to_complete_utf8_characters(unint64_t result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2 > result)
  {
    uint64_t v3 = 0;
    unint64_t v4 = *a2;
    while (1)
    {
      char v6 = *(unsigned char *)--v4;
      char v5 = v6;
      if ((v6 & 0xF8) == 0xF0)
      {
        if ((unint64_t)(v3 - 3) <= 0xFFFFFFFFFFFFFFFBLL)
        {
          v2 += 3;
          break;
        }
      }
      else if ((v5 & 0xF0) == 0xE0)
      {
        if ((unint64_t)(v3 - 2) <= 0xFFFFFFFFFFFFFFFCLL)
        {
          v2 += 2;
          break;
        }
      }
      else
      {
        if ((v5 & 0xE0) != 0xC0)
        {
          if ((v5 & 0x80) == 0) {
            break;
          }
          goto LABEL_12;
        }
        if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          ++v2;
          break;
        }
      }
      uint64_t v3 = 0;
LABEL_12:
      ++v3;
      unint64_t v2 = v4;
      if (v4 <= result)
      {
        unint64_t v2 = result;
        break;
      }
    }
  }
  *a2 = v2;
  return result;
}

uint64_t crnc3rdprtyrnm_XmlUtf8Encode(unsigned int a1, unsigned char *a2)
{
  if ((a1 & 0x80000000) != 0) {
    return 0;
  }
  if (a1 <= 0x7F)
  {
    *a2 = a1;
    return 1;
  }
  if (a1 <= 0x7FF)
  {
    *a2 = (a1 >> 6) | 0xC0;
    a2[1] = a1 & 0x3F | 0x80;
    return 2;
  }
  if (!HIWORD(a1))
  {
    *a2 = (a1 >> 12) | 0xE0;
    a2[1] = (a1 >> 6) & 0x3F | 0x80;
    a2[2] = a1 & 0x3F | 0x80;
    return 3;
  }
  if (HIWORD(a1) > 0x10u) {
    return 0;
  }
  *a2 = (a1 >> 18) | 0xF0;
  a2[1] = (a1 >> 12) & 0x3F | 0x80;
  a2[2] = (a1 >> 6) & 0x3F | 0x80;
  a2[3] = a1 & 0x3F | 0x80;
  return 4;
}

uint64_t crnc3rdprtyrnm_XmlUtf16Encode(unsigned int a1, _WORD *a2)
{
  if ((a1 & 0x80000000) != 0) {
    return 0;
  }
  if (!HIWORD(a1))
  {
    *a2 = a1;
    return 1;
  }
  if (HIWORD(a1) > 0x10u) {
    return 0;
  }
  *a2 = ((a1 + 67043328) >> 10) - 10240;
  a2[1] = a1 & 0x3FF | 0xDC00;
  return 2;
}

uint64_t crnc3rdprtyrnm_XmlSizeOfUnknownEncoding()
{
  return 2016;
}

void *crnc3rdprtyrnm_XmlInitUnknownEncoding(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  cstdlib_memcpy(a1, latin1_encoding, 0x1D0uLL);
  for (uint64_t i = 0; i != 128; ++i)
  {
    if (*((unsigned char *)&latin1_encoding[17] + i)) {
      BOOL v9 = *((unsigned char *)&latin1_encoding[17] + i) == 28;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9 && i != *(_DWORD *)(a2 + 4 * i)) {
      return 0;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 993;
  do
  {
    unint64_t v12 = *(unsigned int *)(a2 + 4 * v10);
    if (v12 == -1)
    {
      *((unsigned char *)a1 + v10 + 136) = 1;
      goto LABEL_25;
    }
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t result = 0;
      if (!a3 || v12 < 0xFFFFFFFC) {
        return result;
      }
      *((unsigned char *)a1 + v10 + 136) = 3 - v12;
      *((unsigned char *)a1 + v11 - 1) = 0;
      *((_WORD *)a1 + v10 + 240) = 0;
      goto LABEL_38;
    }
    if (v12 > 0x7F)
    {
      if ((checkCharRefNumber(*(unsigned int *)(a2 + 4 * v10)) & 0x80000000) == 0)
      {
        if (WORD1(v12)) {
          return 0;
        }
        int v19 = v12 >> 5;
        if ((namingBitmap[v19 | (8 * nmstrtPages[v12 >> 8])] & (1 << v12)) != 0)
        {
          int v20 = (char *)a1 + v10;
          char v21 = 22;
        }
        else
        {
          int v20 = (char *)a1 + v10;
          if ((namingBitmap[v19 | (8 * namePages[v12 >> 8])] & (1 << v12)) != 0) {
            char v21 = 26;
          }
          else {
            char v21 = 28;
          }
        }
        v20[136] = v21;
        *((unsigned char *)a1 + v11 - 1) = crnc3rdprtyrnm_XmlUtf8Encode(v12, (unsigned char *)a1 + v11);
        *((_WORD *)a1 + v10 + 240) = v12;
        goto LABEL_38;
      }
      *((unsigned char *)a1 + v10 + 136) = 0;
LABEL_25:
      *((_WORD *)a1 + v10 + 240) = -1;
      *(_WORD *)((char *)a1 + v11 - 1) = 1;
      goto LABEL_38;
    }
    int v13 = *((unsigned __int8 *)&latin1_encoding[17] + v12);
    if (*((unsigned char *)&latin1_encoding[17] + v12)) {
      BOOL v14 = v13 == 28;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14 && v10 != v12) {
      return 0;
    }
    *((unsigned char *)a1 + v10 + 136) = v13;
    uint64_t v16 = (char *)a1 + v11;
    *(v16 - 1) = 1;
    *uint64_t v16 = v12;
    if (v12) {
      __int16 v17 = v12;
    }
    else {
      __int16 v17 = -1;
    }
    *((_WORD *)a1 + v10 + 240) = v17;
LABEL_38:
    ++v10;
    v11 += 4;
  }
  while (v10 != 256);
  a1[58] = a3;
  a1[59] = a4;
  if (a3)
  {
    a1[49] = unknown_isName;
    a1[50] = unknown_isName;
    a1[51] = unknown_isName;
    a1[52] = unknown_isNmstrt;
    a1[53] = unknown_isNmstrt;
    a1[54] = unknown_isNmstrt;
    a1[55] = unknown_isInvalid;
    a1[56] = unknown_isInvalid;
    a1[57] = unknown_isInvalid;
  }
  a1[14] = unknown_toUtf8;
  a1[15] = unknown_toUtf16;
  return a1;
}

uint64_t checkCharRefNumber(uint64_t result)
{
  int v1 = (int)result >> 8;
  if ((((int)result >> 8) - 216) < 8) {
    return 0xFFFFFFFFLL;
  }
  if (v1 == 255)
  {
    if (result >> 1 == 0x7FFF) {
      return 0xFFFFFFFFLL;
    }
  }
  else if (!v1 && !*((unsigned char *)&latin1_encoding[17] + (int)result))
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t unknown_isName(uint64_t a1)
{
  unsigned int v1 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  if (HIWORD(v1)) {
    return 0;
  }
  else {
    return namingBitmap[(v1 >> 5) | (8 * namePages[(unint64_t)v1 >> 8])] & (1 << v1);
  }
}

uint64_t unknown_isNmstrt(uint64_t a1)
{
  unsigned int v1 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  if (HIWORD(v1)) {
    return 0;
  }
  else {
    return namingBitmap[(v1 >> 5) | (8 * nmstrtPages[(unint64_t)v1 >> 8])] & (1 << v1);
  }
}

uint64_t unknown_isInvalid(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  if (WORD1(v1)) {
    return 1;
  }
  else {
    return checkCharRefNumber(v1) >> 31;
  }
}

uint64_t unknown_toUtf8(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, void **a4, uint64_t a5)
{
  char v6 = (unsigned __int8 *)*a2;
  if (v6 == a3) {
    return 0;
  }
  while (1)
  {
    uint64_t v11 = a1 + 4 * *v6;
    unsigned int v12 = *(char *)(v11 + 992);
    if (!*(unsigned char *)(v11 + 992)) {
      break;
    }
    if (a5 - (uint64_t)*a4 < *(char *)(v11 + 992)) {
      return 2;
    }
    int v13 = (unsigned char *)(v11 + 993);
    uint64_t v14 = (uint64_t)(v6 + 1);
LABEL_7:
    *a2 = v14;
    cstdlib_memcpy(*a4, v13, (int)v12);
    *a4 = (char *)*a4 + (int)v12;
    char v6 = (unsigned __int8 *)*a2;
    if ((unsigned __int8 *)*a2 == a3) {
      return 0;
    }
  }
  unsigned int v15 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
  unsigned int v16 = crnc3rdprtyrnm_XmlUtf8Encode(v15, v18);
  if (a5 - (uint64_t)*a4 >= v16)
  {
    unsigned int v12 = v16;
    uint64_t v14 = *(unsigned __int8 *)(a1 + *(unsigned __int8 *)*a2 + 136) + *a2 - 3;
    int v13 = v18;
    goto LABEL_7;
  }
  return 2;
}

uint64_t unknown_toUtf16(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4, _WORD *a5)
{
  char v6 = (unsigned __int8 *)*a2;
  if ((unint64_t)v6 >= a3) {
    return 0;
  }
  uint64_t v11 = (_WORD *)*a4;
  while (v11 < a5)
  {
    __int16 v12 = *(_WORD *)(a1 + 2 * *v6 + 480);
    if (v12)
    {
      uint64_t v13 = (uint64_t)(v6 + 1);
    }
    else
    {
      __int16 v12 = (*(uint64_t (**)(void))(a1 + 464))(*(void *)(a1 + 472));
      uint64_t v13 = *(unsigned __int8 *)(a1 + *(unsigned __int8 *)*a2 + 136) + *a2 - 3;
    }
    *a2 = v13;
    uint64_t v14 = (_WORD *)*a4;
    _WORD *v14 = v12;
    uint64_t v11 = v14 + 1;
    *a4 = v11;
    char v6 = (unsigned __int8 *)*a2;
    if (*a2 >= a3) {
      return 0;
    }
  }
  if (v11 == a5) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t (**crnc3rdprtyrnm_XmlGetUtf8InternalEncoding())()
{
  return internal_utf8_encoding;
}

void *crnc3rdprtyrnm_XmlGetUtf16InternalEncoding()
{
  return &internal_little2_encoding;
}

uint64_t crnc3rdprtyrnm_XmlInitEncoding(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  int EncodingIndex = getEncodingIndex(a3);
  if (EncodingIndex == -1) {
    return 0;
  }
  *(unsigned char *)(a1 + 133) = EncodingIndex;
  *(void *)a1 = initScanProlog;
  *(void *)(a1 + 8) = initScanContent;
  *(void *)(a1 + 96) = initUpdatePosition;
  *(void *)(a1 + 136) = a2;
  *a2 = a1;
  return 1;
}

uint64_t getEncodingIndex(unsigned __int8 *a1)
{
  if (!a1) {
    return 6;
  }
  uint64_t v2 = 0;
  while (!streqci(a1, (unsigned __int8 *)getEncodingIndex_encodingNames[v2]))
  {
    if (++v2 == 6) {
      return 0xFFFFFFFFLL;
    }
  }
  return v2;
}

uint64_t initScanProlog(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodings, a1, 0, a2, a3, a4);
}

uint64_t initScanContent(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodings, a1, 1, a2, a3, a4);
}

uint64_t initUpdatePosition(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  return normal_updatePosition((uint64_t)utf8_encoding, a2, a3, a4);
}

uint64_t crnc3rdprtyrnm_XmlParseXmlDecl(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t *a8, void *a9, int *a10)
{
  return doParseXmlDecl((uint64_t (*)(uint64_t, uint64_t, uint64_t))findEncoding, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t doParseXmlDecl(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, void *a8, uint64_t *a9, void *a10, int *a11)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  uint64_t v17 = *(int *)(a3 + 128);
  uint64_t v37 = a4 + 5 * v17;
  uint64_t v18 = a5 - 2 * v17;
  int v19 = parsePseudoAttribute(a3, v37, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37);
  uint64_t i = v35;
  if (v19) {
    BOOL v21 = v35 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21) {
    goto LABEL_6;
  }
  uint64_t v23 = v34;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, v35, v34, "version"))
  {
    if (a7) {
      *a7 = v36;
    }
    uint64_t v25 = v37;
    if (a8) {
      *a8 = v37;
    }
    if (!parsePseudoAttribute(a3, v25, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37)) {
      goto LABEL_6;
    }
    uint64_t i = v35;
    if (!v35)
    {
      if (!a2) {
        return 1;
      }
LABEL_6:
      uint64_t i = v37;
      goto LABEL_7;
    }
    uint64_t v23 = v34;
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v23, "encoding"))
  {
LABEL_27:
    int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v23, "standalone");
    if (a2 || !v27) {
      goto LABEL_7;
    }
    uint64_t i = v36;
    uint64_t v28 = v37;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, v36, v37 - *(int *)(a3 + 128), "yes"))
    {
      if (!a11)
      {
LABEL_38:
        for (uint64_t i = v28; ; i += *(int *)(a3 + 128))
        {
          uint64_t v40 = i;
          uint64_t v38 = &v39;
          (*(void (**)(uint64_t, uint64_t *, uint64_t, char **, uint64_t *))(a3 + 112))(a3, &v40, v18, &v38, &v40);
          unsigned int v30 = v38 == &v39 ? -1 : v39;
          BOOL v31 = v30 > 0x20;
          uint64_t v32 = (1 << v30) & 0x100002600;
          if (v31 || v32 == 0) {
            break;
          }
        }
        if (i == v18) {
          return 1;
        }
LABEL_7:
        uint64_t result = 0;
        *a6 = i;
        return result;
      }
      int v29 = 1;
    }
    else
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const char *))(a3 + 48))(a3, i, v28 - *(int *)(a3 + 128), "no"))goto LABEL_7; {
      if (!a11)
      }
        goto LABEL_38;
      int v29 = 0;
    }
    *a11 = v29;
    goto LABEL_38;
  }
  uint64_t i = v36;
  uint64_t v40 = v36;
  uint64_t v38 = &v39;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, char **, uint64_t *))(a3 + 112))(a3, &v40, v18, &v38, &v40);
  if (v38 == &v39 || (v39 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_7;
  }
  if (a9) {
    *a9 = i;
  }
  uint64_t v26 = v37;
  if (a10) {
    *a10 = a1(a3, i, v37 - *(int *)(a3 + 128));
  }
  if (!parsePseudoAttribute(a3, v26, v18, &v35, (uint64_t)&v34, (uint64_t)&v36, &v37)) {
    goto LABEL_6;
  }
  uint64_t i = v35;
  if (v35)
  {
    uint64_t v23 = v34;
    goto LABEL_27;
  }
  return 1;
}

uint64_t (**findEncoding(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4 = a1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  int v7 = v9;
  uint64_t v8 = a2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char **, char *))(a1 + 112))(a1, &v8, a3, &v7, (char *)&v10 + 15);
  if (v8 != a3) {
    return 0;
  }
  unsigned char *v7 = 0;
  if (!streqci((unsigned __int8 *)v9, "UTF-16") || *(_DWORD *)(v4 + 128) != 2)
  {
    uint64_t v6 = 0;
    while (!streqci((unsigned __int8 *)v9, (unsigned __int8 *)getEncodingIndex_encodingNames[v6]))
    {
      if (++v6 == 6) {
        return 0;
      }
    }
    if (v6 != 0xFFFFFFFFLL) {
      return encodings[v6];
    }
    return 0;
  }
  return (uint64_t (**)())v4;
}

uint64_t (**crnc3rdprtyrnm_XmlGetUtf8InternalEncodingNS())()
{
  return internal_utf8_encoding_ns;
}

void *crnc3rdprtyrnm_XmlGetUtf16InternalEncodingNS()
{
  return &internal_little2_encoding_ns;
}

uint64_t crnc3rdprtyrnm_XmlInitEncodingNS(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  int EncodingIndex = getEncodingIndex(a3);
  if (EncodingIndex == -1) {
    return 0;
  }
  *(unsigned char *)(a1 + 133) = EncodingIndex;
  *(void *)a1 = initScanPrologNS;
  *(void *)(a1 + 8) = initScanContentNS;
  *(void *)(a1 + 96) = initUpdatePosition;
  *(void *)(a1 + 136) = a2;
  *a2 = a1;
  return 1;
}

uint64_t initScanPrologNS(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodingsNS, a1, 0, a2, a3, a4);
}

uint64_t initScanContentNS(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  return initScan(encodingsNS, a1, 1, a2, a3, a4);
}

uint64_t crnc3rdprtyrnm_XmlParseXmlDeclNS(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t *a8, void *a9, int *a10)
{
  return doParseXmlDecl((uint64_t (*)(uint64_t, uint64_t, uint64_t))findEncodingNS, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t (**findEncodingNS(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4 = a1;
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  int v7 = v9;
  uint64_t v8 = a2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char **, char *))(a1 + 112))(a1, &v8, a3, &v7, (char *)&v10 + 15);
  if (v8 != a3) {
    return 0;
  }
  unsigned char *v7 = 0;
  if (!streqci((unsigned __int8 *)v9, "UTF-16") || *(_DWORD *)(v4 + 128) != 2)
  {
    uint64_t v6 = 0;
    while (!streqci((unsigned __int8 *)v9, (unsigned __int8 *)getEncodingIndex_encodingNames[v6]))
    {
      if (++v6 == 6) {
        return 0;
      }
    }
    if (v6 != 0xFFFFFFFFLL) {
      return encodingsNS[v6];
    }
    return 0;
  }
  return (uint64_t (**)())v4;
}

void *crnc3rdprtyrnm_XmlInitUnknownEncodingNS(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = crnc3rdprtyrnm_XmlInitUnknownEncoding(a1, a2, a3, a4);
  if (result) {
    *((unsigned char *)result + 194) = 23;
  }
  return result;
}

uint64_t normal_prologTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, char **a4)
{
  if ((unint64_t)a2 < a3)
  {
    char v5 = a2;
    uint64_t v8 = 18;
    uint64_t v9 = 1;
    switch(*(unsigned char *)(a1 + *a2 + 136))
    {
      case 2:
        unsigned int v16 = (char *)(a2 + 1);
        uint64_t v17 = a3 - (void)(a2 + 1);
        BOOL v18 = (unint64_t)v17 > 1;
        if (v17 < 1) {
          return 0xFFFFFFFFLL;
        }
        int v19 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if (!v18)
        {
          switch(*(unsigned char *)(a1 + *v16 + 136))
          {
            case 0xF:
              uint64_t v38 = (char *)(a2 + 2);
              return normal_scanPi((unsigned char *)a1, v38, a3, a4);
            case 0x10:
              char v39 = a2 + 2;
              return normal_scanDecl((unsigned char *)a1, v39, a3, (unsigned __int8 **)a4);
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x17:
              goto LABEL_159;
            case 0x16:
            case 0x18:
              goto LABEL_146;
            default:
              JUMPOUT(0);
          }
        }
        if ((v19 - 5) >= 3 && v19 != 29) {
          goto LABEL_159;
        }
LABEL_146:
        *a4 = (char *)a2;
        return 29;
      case 4:
        BOOL v21 = (char *)(a2 + 1);
        uint64_t v22 = a3 - (void)(a2 + 1);
        if (v22 < 1) {
          return 4294967270;
        }
        if (*v21 != 93) {
          goto LABEL_141;
        }
        if ((unint64_t)v22 < 2) {
          return 0xFFFFFFFFLL;
        }
        if (a2[2] == 62)
        {
          *a4 = (char *)(a2 + 3);
          return 34;
        }
        else
        {
LABEL_141:
          *a4 = v21;
          return 26;
        }
      case 5:
        if ((uint64_t)(a3 - (void)a2) < 2) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
          goto LABEL_139;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v5)) {
          goto LABEL_71;
        }
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5)) {
          goto LABEL_139;
        }
        uint64_t v8 = 19;
LABEL_71:
        uint64_t v9 = 2;
        goto LABEL_4;
      case 6:
        if ((uint64_t)(a3 - (void)a2) < 3) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
          goto LABEL_139;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v5)) {
          goto LABEL_77;
        }
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5)) {
          goto LABEL_139;
        }
        uint64_t v8 = 19;
LABEL_77:
        uint64_t v9 = 3;
        goto LABEL_4;
      case 7:
        if ((uint64_t)(a3 - (void)a2) < 4) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2)) {
          goto LABEL_139;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v5)) {
          goto LABEL_158;
        }
        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5)) {
          goto LABEL_139;
        }
        uint64_t v8 = 19;
LABEL_158:
        uint64_t v9 = 4;
LABEL_4:
        v5 += v9;
        unint64_t v10 = a3 - (void)v5;
        if ((uint64_t)(a3 - (void)v5) < 1) {
          return -(int)v8;
        }
        while (2)
        {
          switch(*(unsigned char *)(a1 + *v5 + 136))
          {
            case 5:
              if (v10 < 2) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5))
              {
                goto LABEL_139;
              }
              uint64_t v11 = (char *)(v5 + 2);
              goto LABEL_7;
            case 6:
              if (v10 < 3) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5))
              {
                goto LABEL_139;
              }
              uint64_t v11 = (char *)(v5 + 3);
              goto LABEL_7;
            case 7:
              if (v10 < 4) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
                || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5))
              {
                goto LABEL_139;
              }
              uint64_t v11 = (char *)(v5 + 4);
              goto LABEL_7;
            case 9:
            case 0xA:
            case 0xB:
            case 0x14:
            case 0x15:
            case 0x1E:
            case 0x20:
            case 0x23:
            case 0x24:
              goto LABEL_140;
            case 0xF:
              if (v8 == 19) {
                goto LABEL_139;
              }
              *a4 = (char *)(v5 + 1);
              return 30;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              uint64_t v11 = (char *)(v5 + 1);
              goto LABEL_7;
            case 0x17:
              uint64_t v11 = (char *)(v5 + 1);
              if (v8 == 41)
              {
                uint64_t v8 = 19;
                goto LABEL_7;
              }
              if (v8 != 18) {
                goto LABEL_7;
              }
              unint64_t v12 = a3 - (void)v11;
              if ((uint64_t)(a3 - (void)v11) < 1) {
                return 0xFFFFFFFFLL;
              }
              unsigned int v13 = *(unsigned __int8 *)(a1 + *v11 + 136);
              uint64_t v8 = 19;
              if (v13 > 0x15)
              {
                if (v13 - 24 >= 4 && v13 != 22)
                {
                  if (v13 == 29) {
                    goto LABEL_49;
                  }
LABEL_7:
                  unint64_t v10 = a3 - (void)v11;
                  char v5 = (unsigned __int8 *)v11;
                  if ((uint64_t)(a3 - (void)v11) <= 0) {
                    return -(int)v8;
                  }
                  continue;
                }
                uint64_t v11 = (char *)(v5 + 2);
LABEL_47:
                uint64_t v8 = 41;
                goto LABEL_7;
              }
              if (v13 == 5)
              {
                if (v12 < 2) {
                  return 4294967294;
                }
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5 + 1)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5 + 1))
                {
                  goto LABEL_49;
                }
                uint64_t v11 = (char *)(v5 + 3);
                goto LABEL_47;
              }
              if (v13 != 6)
              {
                if (v13 != 7) {
                  goto LABEL_7;
                }
                if (v12 < 4) {
                  return 4294967294;
                }
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5 + 1)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5 + 1))
                {
                  goto LABEL_49;
                }
                uint64_t v11 = (char *)(v5 + 5);
                goto LABEL_47;
              }
              if (v12 < 3) {
                return 4294967294;
              }
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5 + 1)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5 + 1))
              {
                uint64_t v11 = (char *)(v5 + 4);
                goto LABEL_47;
              }
LABEL_49:
              uint64_t v8 = 0;
              *a4 = v11;
              break;
            case 0x21:
              if (v8 == 19) {
                goto LABEL_139;
              }
              *a4 = (char *)(v5 + 1);
              return 31;
            case 0x22:
              if (v8 == 19) {
                goto LABEL_139;
              }
              *a4 = (char *)(v5 + 1);
              return 32;
            default:
              goto LABEL_139;
          }
          return v8;
        }
      case 9:
        if (a2 + 1 != (unsigned __int8 *)a3) {
          goto LABEL_81;
        }
        *a4 = (char *)a3;
        return 4294967281;
      case 0xA:
      case 0x15:
LABEL_81:
        uint64_t v23 = (char *)(a2 + 1);
        uint64_t v24 = a3 - (void)(a2 + 1);
        if (v24 < 1) {
          goto LABEL_92;
        }
        do
        {
          int v25 = *(unsigned __int8 *)(a1 + *v23 + 136);
          if (v25 != 21 && v25 != 10 && (v25 != 9 || v23 + 1 == (char *)a3)) {
            goto LABEL_92;
          }
          ++v23;
          --v24;
        }
        while (v24 > 0);
        uint64_t v23 = (char *)a3;
LABEL_92:
        *a4 = v23;
        return 15;
      case 0xB:
        *a4 = (char *)(a2 + 1);
        return 17;
      case 0xC:
        uint64_t v28 = a2 + 1;
        int v29 = 12;
        goto LABEL_96;
      case 0xD:
        uint64_t v28 = a2 + 1;
        int v29 = 13;
LABEL_96:
        return normal_scanLit(v29, (unsigned char *)a1, v28, a3, (unsigned __int8 **)a4);
      case 0x13:
        char v5 = a2 + 1;
        unint64_t v30 = a3 - (void)(a2 + 1);
        if ((uint64_t)v30 < 1) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v8 = 0;
        unsigned int v31 = *(unsigned __int8 *)(a1 + *v5 + 136);
        if (v31 <= 6)
        {
          if (v31 == 5)
          {
            if (v30 >= 2)
            {
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v5))
              {
                uint64_t v33 = 2;
                goto LABEL_108;
              }
              goto LABEL_139;
            }
          }
          else
          {
            if (v31 != 6) {
              goto LABEL_140;
            }
            if (v30 >= 3)
            {
              if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v5))
              {
                uint64_t v33 = 3;
                goto LABEL_108;
              }
LABEL_139:
              uint64_t v8 = 0;
LABEL_140:
              *a4 = (char *)v5;
              return v8;
            }
          }
        }
        else
        {
          if (v31 != 7)
          {
            if (v31 != 22 && v31 != 24) {
              goto LABEL_140;
            }
            uint64_t v33 = 1;
LABEL_108:
            v5 += v33;
            unint64_t v34 = a3 - (void)v5;
            if ((uint64_t)(a3 - (void)v5) < 1) {
              return 4294967276;
            }
            do
            {
              uint64_t v8 = 0;
              uint64_t v35 = 1;
              switch(*(unsigned char *)(a1 + *v5 + 136))
              {
                case 5:
                  if (v34 < 2) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v5))
                  {
                    goto LABEL_139;
                  }
                  uint64_t v35 = 2;
                  break;
                case 6:
                  if (v34 < 3) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v5))
                  {
                    goto LABEL_139;
                  }
                  uint64_t v35 = 3;
                  break;
                case 7:
                  if (v34 < 4) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
                    || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v5))
                  {
                    goto LABEL_139;
                  }
                  uint64_t v35 = 4;
                  break;
                case 9:
                case 0xA:
                case 0xB:
                case 0x15:
                case 0x1E:
                case 0x20:
                case 0x24:
                  uint64_t v8 = 20;
                  goto LABEL_140;
                case 0x16:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                  break;
                default:
                  goto LABEL_140;
              }
              v5 += v35;
              unint64_t v34 = a3 - (void)v5;
              uint64_t v8 = 4294967276;
            }
            while ((uint64_t)(a3 - (void)v5) > 0);
            return v8;
          }
          if (v30 >= 4)
          {
            if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v5)
              && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v5))
            {
              uint64_t v33 = 4;
              goto LABEL_108;
            }
            goto LABEL_139;
          }
        }
        return 4294967294;
      case 0x14:
        *a4 = (char *)(a2 + 1);
        return 25;
      case 0x16:
      case 0x18:
        goto LABEL_4;
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
        uint64_t v8 = 19;
        uint64_t v9 = 1;
        goto LABEL_4;
      case 0x1E:
        uint64_t v36 = a2 + 1;
        return normal_scanPercent(a1, v36, a3, (unsigned __int8 **)a4);
      case 0x1F:
        *a4 = (char *)(a2 + 1);
        return 23;
      case 0x20:
        unsigned int v16 = (char *)(a2 + 1);
        if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
          return 4294967272;
        }
        unsigned int v37 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if (v37 > 0x1F)
        {
          switch(*(unsigned char *)(a1 + *v16 + 136))
          {
            case ' ':
            case '#':
            case '$':
              goto LABEL_148;
            case '!':
              *a4 = (char *)(a2 + 2);
              uint64_t v8 = 36;
              break;
            case '""':
              *a4 = (char *)(a2 + 2);
              uint64_t v8 = 37;
              break;
            default:
              goto LABEL_159;
          }
          return v8;
        }
        if (v37 - 9 < 3) {
          goto LABEL_148;
        }
        if (v37 == 15)
        {
          *a4 = (char *)(a2 + 2);
          return 35;
        }
        else
        {
          if (v37 == 21)
          {
LABEL_148:
            *a4 = v16;
            return 24;
          }
LABEL_159:
          uint64_t v8 = 0;
          *a4 = v16;
        }
        return v8;
      case 0x23:
        *a4 = (char *)(a2 + 1);
        return 38;
      case 0x24:
        *a4 = (char *)(a2 + 1);
        return 21;
      default:
        goto LABEL_139;
    }
  }
  return 4294967292;
}

uint64_t normal_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  uint64_t v6 = a2;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_3;
    case 2:
      unint64_t v10 = a2 + 1;
      unint64_t v11 = a3 - (void)(a2 + 1);
      if ((uint64_t)v11 < 1) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v12 = 1;
      switch(*(unsigned char *)(a1 + *v10 + 136))
      {
        case 5:
          if (v11 < 2) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6 + 1))
          {
            goto LABEL_100;
          }
          uint64_t v12 = 2;
          goto LABEL_9;
        case 6:
          if (v11 < 3) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6 + 1))
          {
            goto LABEL_100;
          }
          uint64_t v12 = 3;
          goto LABEL_9;
        case 7:
          if (v11 < 4) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2 + 1)
            || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6 + 1))
          {
            goto LABEL_100;
          }
          uint64_t v12 = 4;
LABEL_9:
          uint64_t v6 = &v10[v12];
          unint64_t v13 = a3 - (void)&v10[v12];
          if ((uint64_t)v13 < 1) {
            return 0xFFFFFFFFLL;
          }
          int v14 = 0;
          while (2)
          {
            uint64_t v15 = 1;
            switch(*(unsigned char *)(a1 + *v6 + 136))
            {
              case 5:
                if (v13 < 2) {
                  return 4294967294;
                }
                if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)
                  || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6))
                {
                  goto LABEL_3;
                }
                goto LABEL_40;
              case 6:
                if (v13 < 3) {
                  return 4294967294;
                }
                if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)
                  && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6))
                {
                  goto LABEL_19;
                }
                goto LABEL_3;
              case 7:
                if (v13 < 4) {
                  return 4294967294;
                }
                if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)
                  && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6))
                {
                  goto LABEL_23;
                }
                goto LABEL_3;
              case 9:
              case 0xA:
              case 0x15:
                unint64_t v35 = a3 - (void)++v6;
                if ((uint64_t)(a3 - (void)v6) < 1) {
                  return 0xFFFFFFFFLL;
                }
                uint64_t result = 0xFFFFFFFFLL;
                while (2)
                {
                  switch(*(unsigned char *)(a1 + *v6 + 136))
                  {
                    case 5:
                      if (v35 < 2) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      uint64_t v39 = 3;
                      break;
                    case 6:
                      if (v35 < 3) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      uint64_t v39 = 4;
                      break;
                    case 7:
                      if (v35 < 4) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6))
                      {
                        goto LABEL_3;
                      }
                      uint64_t v39 = 5;
                      break;
                    case 9:
                    case 0xA:
                    case 0x15:
                      ++v6;
                      if ((uint64_t)--v35 > 0) {
                        continue;
                      }
                      return result;
                    case 0xB:
                      goto LABEL_172;
                    case 0x11:
                      goto LABEL_173;
                    case 0x16:
                    case 0x18:
                      uint64_t v39 = 2;
                      goto LABEL_188;
                    default:
                      goto LABEL_3;
                  }
                  break;
                }
LABEL_188:
                return normal_scanAtts(a1, &v6[v39 - 1], a3, a4);
              case 0xB:
LABEL_172:
                *a4 = v6 + 1;
                return 2;
              case 0x11:
LABEL_173:
                int v20 = v6 + 1;
                if ((uint64_t)(a3 - (void)(v6 + 1)) < 1) {
                  return 0xFFFFFFFFLL;
                }
                if (*v20 != 62) {
                  goto LABEL_58;
                }
                *a4 = v6 + 2;
                return 4;
              case 0x16:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
                goto LABEL_41;
              case 0x17:
                if (v14) {
                  goto LABEL_3;
                }
                unint64_t v10 = v6 + 1;
                unint64_t v16 = a3 - (void)(v6 + 1);
                if ((uint64_t)v16 < 1) {
                  return 0xFFFFFFFFLL;
                }
                unsigned int v17 = *(unsigned __int8 *)(a1 + *v10 + 136);
                if (v17 > 0x15)
                {
                  if (v17 != 22 && v17 != 24) {
                    goto LABEL_100;
                  }
                  int v14 = 1;
LABEL_40:
                  uint64_t v15 = 2;
                }
                else
                {
                  switch(v17)
                  {
                    case 5u:
                      if (v16 < 2) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6 + 1)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6 + 1))
                      {
                        goto LABEL_100;
                      }
                      int v14 = 1;
LABEL_19:
                      uint64_t v15 = 3;
                      break;
                    case 6u:
                      if (v16 < 3) {
                        return 4294967294;
                      }
                      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6 + 1)
                        || !(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6 + 1))
                      {
                        goto LABEL_100;
                      }
                      int v14 = 1;
LABEL_23:
                      uint64_t v15 = 4;
                      break;
                    case 7u:
                      if (v16 >= 4)
                      {
                        if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6 + 1)
                          && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6 + 1))
                        {
                          int v14 = 1;
                          uint64_t v15 = 5;
                          break;
                        }
LABEL_100:
                        uint64_t result = 0;
                        *a4 = v10;
                        return result;
                      }
                      return 4294967294;
                    default:
                      goto LABEL_100;
                  }
                }
LABEL_41:
                v6 += v15;
                unint64_t v13 = a3 - (void)v6;
                uint64_t result = 0xFFFFFFFFLL;
                if ((uint64_t)(a3 - (void)v6) <= 0) {
                  return result;
                }
                continue;
              default:
                goto LABEL_3;
            }
          }
        case 0xF:
          uint64_t v24 = (char *)(a2 + 2);
          return normal_scanPi((unsigned char *)a1, v24, a3, (char **)a4);
        case 0x10:
          int v20 = a2 + 2;
          if ((uint64_t)(a3 - (void)(a2 + 2)) < 1) {
            return 0xFFFFFFFFLL;
          }
          int v25 = *(unsigned __int8 *)(a1 + *v20 + 136);
          if (v25 != 20)
          {
            if (v25 != 27) {
              goto LABEL_58;
            }
            uint64_t v26 = a2 + 3;
            return normal_scanComment((unsigned char *)a1, v26, a3, a4);
          }
          uint64_t v33 = a2 + 3;
          if ((uint64_t)(a3 - (void)(a2 + 3)) < 6) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v34 = 0;
          int v20 = a2 + 9;
          while (v33[v34] == big2_scanCdataSection_CDATA_LSQB[v34])
          {
            if (++v34 == 6)
            {
              uint64_t result = 8;
              goto LABEL_147;
            }
          }
          uint64_t result = 0;
          int v20 = &v33[v34];
          goto LABEL_147;
        case 0x11:
          uint64_t v6 = a2 + 2;
          unint64_t v27 = a3 - (void)(a2 + 2);
          if ((uint64_t)v27 < 1) {
            return 0xFFFFFFFFLL;
          }
          uint64_t result = 0;
          unsigned int v28 = *(unsigned __int8 *)(a1 + *v6 + 136);
          if (v28 > 6)
          {
            if (v28 == 7)
            {
              if (v27 < 4) {
                return 4294967294;
              }
              if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2 + 2)) {
                goto LABEL_3;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6);
              if (!result) {
                goto LABEL_4;
              }
              uint64_t v30 = 4;
            }
            else
            {
              if (v28 != 22 && v28 != 24) {
                goto LABEL_4;
              }
              uint64_t v30 = 1;
            }
            goto LABEL_131;
          }
          if (v28 == 5)
          {
            if (v27 < 2) {
              return 4294967294;
            }
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2 + 2)) {
              goto LABEL_3;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6);
            if (!result) {
              goto LABEL_4;
            }
            uint64_t v30 = 2;
            goto LABEL_131;
          }
          if (v28 != 6) {
            goto LABEL_4;
          }
          if (v27 < 3) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2 + 2)) {
            goto LABEL_3;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6);
          if (result)
          {
            uint64_t v30 = 3;
LABEL_131:
            v6 += v30;
            unint64_t v31 = a3 - (void)v6;
            if ((uint64_t)(a3 - (void)v6) < 1) {
              return 0xFFFFFFFFLL;
            }
            while (2)
            {
              uint64_t result = 0;
              uint64_t v32 = 1;
              switch(*(unsigned char *)(a1 + *v6 + 136))
              {
                case 5:
                  if (v31 < 2) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)) {
                    goto LABEL_3;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6);
                  if (!result) {
                    goto LABEL_4;
                  }
                  uint64_t v32 = 2;
                  goto LABEL_133;
                case 6:
                  if (v31 < 3) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)) {
                    goto LABEL_3;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6);
                  if (!result) {
                    goto LABEL_4;
                  }
                  uint64_t v32 = 3;
                  goto LABEL_133;
                case 7:
                  if (v31 < 4) {
                    return 4294967294;
                  }
                  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)) {
                    goto LABEL_3;
                  }
                  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6);
                  if (!result) {
                    goto LABEL_4;
                  }
                  uint64_t v32 = 4;
LABEL_133:
                  v6 += v32;
                  unint64_t v31 = a3 - (void)v6;
                  uint64_t result = 0xFFFFFFFFLL;
                  if ((uint64_t)(a3 - (void)v6) <= 0) {
                    return result;
                  }
                  continue;
                case 9:
                case 0xA:
                case 0x15:
                  unint64_t v36 = a3 - (void)++v6;
                  if ((uint64_t)(a3 - (void)v6) < 1) {
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t result = 0xFFFFFFFFLL;
                  break;
                case 0xB:
                  goto LABEL_204;
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                  goto LABEL_133;
                default:
                  goto LABEL_4;
              }
              break;
            }
            while (1)
            {
              int v37 = *(unsigned __int8 *)(a1 + *v6 + 136);
              if ((v37 - 9) >= 2 && v37 != 21) {
                break;
              }
              ++v6;
              if ((uint64_t)--v36 <= 0) {
                return result;
              }
            }
            if (v37 == 11)
            {
LABEL_204:
              ++v6;
              uint64_t result = 5;
              goto LABEL_4;
            }
            goto LABEL_3;
          }
          break;
        case 0x16:
        case 0x18:
          goto LABEL_9;
        default:
          goto LABEL_100;
      }
      goto LABEL_4;
    case 3:
      int v19 = a2 + 1;
      return normal_scanRef(a1, v19, a3, a4);
    case 4:
      uint64_t v9 = a2 + 1;
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 4294967291;
      }
      if (*v9 != 93) {
        goto LABEL_75;
      }
      int v20 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 1) {
        return 4294967291;
      }
      if (*v20 == 62)
      {
LABEL_58:
        uint64_t result = 0;
        goto LABEL_147;
      }
      goto LABEL_75;
    case 5:
      if ((uint64_t)(a3 - (void)a2) < 2) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
        goto LABEL_3;
      }
      uint64_t v9 = v6 + 2;
      goto LABEL_75;
    case 6:
      if ((uint64_t)(a3 - (void)a2) < 3) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
        goto LABEL_3;
      }
      uint64_t v9 = v6 + 3;
      goto LABEL_75;
    case 7:
      if ((uint64_t)(a3 - (void)a2) < 4) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2))
      {
LABEL_3:
        uint64_t result = 0;
LABEL_4:
        *a4 = v6;
        return result;
      }
      uint64_t v9 = v6 + 4;
LABEL_75:
      unint64_t v22 = a3 - (void)v9;
      if ((uint64_t)(a3 - (void)v9) < 1)
      {
        uint64_t v23 = v9;
LABEL_96:
        *a4 = v23;
        return 6;
      }
      break;
    case 9:
      BOOL v21 = a2 + 1;
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 4294967293;
      }
      if (*(unsigned char *)(a1 + a2[1] + 136) == 10) {
        BOOL v21 = a2 + 2;
      }
LABEL_72:
      *a4 = v21;
      return 7;
    case 0xA:
      BOOL v21 = a2 + 1;
      goto LABEL_72;
    default:
      uint64_t v9 = a2 + 1;
      goto LABEL_75;
  }
  while (2)
  {
    switch(*(unsigned char *)(a1 + *v9 + 136))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_94;
      case 4:
        if (v22 < 2) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 1;
        if (v9[1] != 93) {
          goto LABEL_92;
        }
        if (v22 < 3)
        {
LABEL_94:
          *a4 = v9;
          return 6;
        }
        if (v9[2] != 62)
        {
LABEL_92:
          unint64_t v22 = a3 - (void)v23;
          uint64_t v9 = v23;
          if ((uint64_t)(a3 - (void)v23) <= 0) {
            goto LABEL_96;
          }
          continue;
        }
        uint64_t result = 0;
        int v20 = v9 + 2;
LABEL_147:
        *a4 = v20;
        return result;
      case 5:
        if (v22 < 2 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v9)) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 2;
        goto LABEL_92;
      case 6:
        if (v22 < 3 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v9)) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 3;
        goto LABEL_92;
      case 7:
        if (v22 < 4 || (*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v9)) {
          goto LABEL_94;
        }
        uint64_t v23 = v9 + 4;
        goto LABEL_92;
      default:
        uint64_t v23 = v9 + 1;
        goto LABEL_92;
    }
  }
}

uint64_t normal_cdataSectionTok(unsigned char *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  uint64_t v6 = a2;
  int v8 = a1[*a2 + 136];
  uint64_t result = 0;
  switch(v8)
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_42;
    case 4:
      unint64_t v10 = a2 + 1;
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 0xFFFFFFFFLL;
      }
      if (*v10 != 93) {
        goto LABEL_10;
      }
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 1) {
        return 0xFFFFFFFFLL;
      }
      if (a2[2] != 62) {
        goto LABEL_10;
      }
      uint64_t v6 = a2 + 3;
      uint64_t result = 40;
      goto LABEL_42;
    case 5:
      if ((uint64_t)(a3 - (void)a2) < 2) {
        goto LABEL_31;
      }
      if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, a2)) {
        goto LABEL_41;
      }
      unint64_t v10 = v6 + 2;
      goto LABEL_10;
    case 6:
      if ((uint64_t)(a3 - (void)a2) < 3) {
        goto LABEL_31;
      }
      if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, a2)) {
        goto LABEL_41;
      }
      unint64_t v10 = v6 + 3;
      goto LABEL_10;
    case 7:
      if ((uint64_t)(a3 - (void)a2) >= 4)
      {
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, a2))
        {
LABEL_41:
          uint64_t result = 0;
        }
        else
        {
          unint64_t v10 = v6 + 4;
LABEL_10:
          unint64_t v11 = a3 - (void)v10;
          if ((uint64_t)(a3 - (void)v10) < 1)
          {
            uint64_t result = 6;
            uint64_t v6 = v10;
          }
          else
          {
            uint64_t v6 = v10;
            while (2)
            {
              uint64_t v12 = 1;
              uint64_t result = 6;
              switch(a1[*v6 + 136])
              {
                case 0:
                case 1:
                case 4:
                case 8:
                case 9:
                case 0xA:
                  break;
                case 5:
                  if (v11 >= 2)
                  {
                    if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, v6)) {
                      goto LABEL_23;
                    }
                    uint64_t v12 = 2;
                    goto LABEL_22;
                  }
                  break;
                case 6:
                  if (v11 >= 3)
                  {
                    if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, v6)) {
                      goto LABEL_23;
                    }
                    uint64_t v12 = 3;
                    goto LABEL_22;
                  }
                  break;
                case 7:
                  if (v11 >= 4)
                  {
                    if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, v6)) {
                      goto LABEL_23;
                    }
                    uint64_t v12 = 4;
                    goto LABEL_22;
                  }
                  break;
                default:
LABEL_22:
                  v6 += v12;
                  unint64_t v11 = a3 - (void)v6;
                  if ((uint64_t)(a3 - (void)v6) > 0) {
                    continue;
                  }
LABEL_23:
                  uint64_t result = 6;
                  break;
              }
              break;
            }
          }
        }
LABEL_42:
        *a4 = v6;
      }
      else
      {
LABEL_31:
        uint64_t result = 4294967294;
      }
      break;
    case 9:
      if ((uint64_t)(a3 - (void)(a2 + 1)) < 1) {
        return 0xFFFFFFFFLL;
      }
      if (a1[a2[1] + 136] == 10) {
        uint64_t v6 = a2 + 2;
      }
      else {
        uint64_t v6 = a2 + 1;
      }
LABEL_37:
      uint64_t result = 7;
      goto LABEL_42;
    case 10:
      uint64_t v6 = a2 + 1;
      goto LABEL_37;
    default:
      unint64_t v10 = a2 + 1;
      goto LABEL_10;
  }
  return result;
}

uint64_t normal_ignoreSectionTok(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  int v7 = a2;
  int v9 = 0;
  while (2)
  {
    uint64_t result = 0;
    switch(a1[*v7 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_31;
      case 2:
        unint64_t v11 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 != 33) {
          goto LABEL_26;
        }
        unint64_t v11 = v7 + 2;
        if (a3 - (uint64_t)(v7 + 2) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 == 91)
        {
          unint64_t v11 = v7 + 3;
          ++v9;
        }
        goto LABEL_26;
      case 4:
        unint64_t v11 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 != 93) {
          goto LABEL_26;
        }
        unint64_t v11 = v7 + 2;
        if (a3 - (uint64_t)(v7 + 2) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v11 != 62) {
          goto LABEL_26;
        }
        unint64_t v11 = v7 + 3;
        if (v9)
        {
          --v9;
LABEL_26:
          unint64_t v4 = a3 - (void)v11;
          int v7 = v11;
          if (a3 - (uint64_t)v11 <= 0) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        uint64_t result = 42;
        v7 += 3;
LABEL_31:
        *a4 = v7;
        return result;
      case 5:
        if (v4 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, v7)) {
          goto LABEL_30;
        }
        unint64_t v11 = v7 + 2;
        goto LABEL_26;
      case 6:
        if (v4 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, v7)) {
          goto LABEL_30;
        }
        unint64_t v11 = v7 + 3;
        goto LABEL_26;
      case 7:
        if (v4 < 4) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, v7))
        {
LABEL_30:
          uint64_t result = 0;
          goto LABEL_31;
        }
        unint64_t v11 = v7 + 4;
        goto LABEL_26;
      default:
        unint64_t v11 = v7 + 1;
        goto LABEL_26;
    }
  }
}

uint64_t normal_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (2)
  {
    uint64_t v5 = 2;
    switch(*(unsigned char *)(a1 + *v4 + 136))
    {
      case 2:
        uint64_t result = 0;
        *a4 = v4;
        return result;
      case 3:
        if (v4 != a2) {
          goto LABEL_9;
        }
        return normal_scanRef(a1, a2 + 1, a3, a4);
      case 5:
        goto LABEL_8;
      case 6:
        uint64_t v5 = 3;
        goto LABEL_8;
      case 7:
        uint64_t v5 = 4;
        goto LABEL_8;
      case 9:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v7 = a2 + 1;
        if ((uint64_t)(a3 - (void)(a2 + 1)) < 1)
        {
          uint64_t result = 4294967293;
        }
        else
        {
          if (*(unsigned char *)(a1 + a2[1] + 136) == 10) {
            int v7 = a2 + 2;
          }
LABEL_22:
          *a4 = v7;
          uint64_t result = 7;
        }
        break;
      case 0xA:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v7 = a2 + 1;
        goto LABEL_22;
      case 0x15:
        if (v4 != a2) {
          goto LABEL_9;
        }
        *a4 = a2 + 1;
        return 39;
      default:
        uint64_t v5 = 1;
LABEL_8:
        v4 += v5;
        if ((uint64_t)(a3 - (void)v4) > 0) {
          continue;
        }
LABEL_9:
        *a4 = v4;
        uint64_t result = 6;
        break;
    }
    return result;
  }
}

uint64_t normal_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (2)
  {
    uint64_t v5 = 2;
    switch(*(unsigned char *)(a1 + *v4 + 136))
    {
      case 3:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v7 = a2 + 1;
        return normal_scanRef(a1, v7, a3, a4);
      case 5:
        goto LABEL_8;
      case 6:
        uint64_t v5 = 3;
        goto LABEL_8;
      case 7:
        uint64_t v5 = 4;
        goto LABEL_8;
      case 9:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v8 = a2 + 1;
        if ((uint64_t)(a3 - (void)(a2 + 1)) < 1)
        {
          uint64_t result = 4294967293;
        }
        else
        {
          if (*(unsigned char *)(a1 + a2[1] + 136) == 10) {
            int v8 = a2 + 2;
          }
LABEL_24:
          *a4 = v8;
          uint64_t result = 7;
        }
        break;
      case 0xA:
        if (v4 != a2) {
          goto LABEL_9;
        }
        int v8 = a2 + 1;
        goto LABEL_24;
      default:
        uint64_t v5 = 1;
LABEL_8:
        v4 += v5;
        if ((uint64_t)(a3 - (void)v4) > 0) {
          continue;
        }
LABEL_9:
        *a4 = v4;
        uint64_t result = 6;
        break;
    }
    return result;
  }
}

BOOL normal_nameMatchesAscii(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4)
{
  int v4 = *a4;
  if (!*a4) {
    return a2 == a3;
  }
  uint64_t v5 = a4 + 1;
  uint64_t v6 = a3 - a2;
  while (1)
  {
    BOOL v7 = v6-- < 1;
    if (v7 || *a2 != v4) {
      break;
    }
    ++a2;
    int v8 = *v5++;
    int v4 = v8;
    if (!v8) {
      return a2 == a3;
    }
  }
  return 0;
}

uint64_t normal_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  for (uint64_t i = a2; ; i += qword_2206DB628[(char)v3])
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + *i + 136) - 5;
    if (v3 >= 0x19 || ((0x17E0007u >> v3) & 1) == 0) {
      break;
    }
  }
  return (i - a2);
}

unsigned __int8 *normal_skipS(uint64_t a1, unsigned __int8 *a2)
{
  while (1)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + *a2 + 136);
    BOOL v3 = v2 > 0x15;
    int v4 = (1 << v2) & 0x200600;
    if (v3 || v4 == 0) {
      break;
    }
    ++a2;
  }
  return a2;
}

uint64_t normal_getAtts(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = 0;
  int v6 = 0;
  uint64_t v7 = 1;
  while (2)
  {
    uint64_t v8 = a2;
    unsigned int v10 = *(unsigned __int8 *)++a2;
    unsigned int v9 = v10;
    uint64_t v11 = v7;
    switch(*(unsigned char *)(a1 + v10 + 136))
    {
      case 3:
        if ((int)result < a3) {
          *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
        }
        continue;
      case 5:
        if (!v7)
        {
          uint64_t v11 = 1;
          if ((int)result < a3)
          {
            uint64_t v13 = a4 + 32 * (int)result;
            *(void *)uint64_t v13 = a2;
            *(unsigned char *)(v13 + 24) = 1;
          }
        }
        a2 = v8 + 2;
        uint64_t v7 = v11;
        continue;
      case 6:
        if (!v7)
        {
          uint64_t v11 = 1;
          if ((int)result < a3)
          {
            uint64_t v14 = a4 + 32 * (int)result;
            *(void *)uint64_t v14 = a2;
            *(unsigned char *)(v14 + 24) = 1;
          }
        }
        a2 = v8 + 3;
        uint64_t v7 = v11;
        continue;
      case 7:
        if (!v7)
        {
          uint64_t v11 = 1;
          if ((int)result < a3)
          {
            uint64_t v15 = a4 + 32 * (int)result;
            *(void *)uint64_t v15 = a2;
            *(unsigned char *)(v15 + 24) = 1;
          }
        }
        a2 = v8 + 4;
        uint64_t v7 = v11;
        continue;
      case 9:
      case 0xA:
        uint64_t v7 = 0;
        if (v11 != 1)
        {
          uint64_t v7 = v11;
          if (v11 == 2 && (int)result < a3)
          {
            *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
            uint64_t v7 = 2;
          }
        }
        continue;
      case 0xB:
      case 0x11:
        uint64_t v7 = 2;
        if (v11 == 2) {
          continue;
        }
        return result;
      case 0xC:
        if (v7 == 2)
        {
          uint64_t v7 = 2;
          if (v6 == 12)
          {
            if ((int)result < a3) {
              *(void *)(a4 + 32 * (int)result + 16) = a2;
            }
            uint64_t v7 = 0;
            uint64_t result = (result + 1);
            int v6 = 12;
          }
        }
        else
        {
          int v6 = 12;
          uint64_t v7 = 2;
          if ((int)result < a3)
          {
            *(void *)(a4 + 32 * (int)result + 8) = v8 + 2;
            int v6 = 12;
            uint64_t v7 = 2;
          }
        }
        continue;
      case 0xD:
        if (v7 == 2)
        {
          uint64_t v7 = 2;
          if (v6 == 13)
          {
            if ((int)result < a3) {
              *(void *)(a4 + 32 * (int)result + 16) = a2;
            }
            uint64_t v7 = 0;
            uint64_t result = (result + 1);
            int v6 = 13;
          }
        }
        else
        {
          int v6 = 13;
          uint64_t v7 = 2;
          if ((int)result < a3)
          {
            *(void *)(a4 + 32 * (int)result + 8) = v8 + 2;
            int v6 = 13;
            uint64_t v7 = 2;
          }
        }
        continue;
      case 0x15:
        uint64_t v7 = 0;
        if (v11 != 1)
        {
          uint64_t v7 = v11;
          if (v11 == 2 && (int)result < a3)
          {
            uint64_t v16 = a4 + 32 * (int)result;
            int v18 = *(unsigned __int8 *)(v16 + 24);
            unsigned int v17 = (unsigned char *)(v16 + 24);
            uint64_t v7 = 2;
            if (v18)
            {
              if (v9 != 32
                || a2 == *(void *)(a4 + 32 * (int)result + 8)
                || (uint64_t v19 = *(unsigned __int8 *)(v8 + 2), v19 == 32)
                || (v20 = *(unsigned __int8 *)(a1 + v19 + 136), uint64_t v7 = 2, v6 == v20))
              {
                *unsigned int v17 = 0;
                uint64_t v7 = 2;
              }
            }
          }
        }
        continue;
      case 0x16:
      case 0x18:
      case 0x1D:
        if (!v7)
        {
          uint64_t v7 = 1;
          if ((int)result < a3)
          {
            uint64_t v12 = a4 + 32 * (int)result;
            *(void *)uint64_t v12 = a2;
            *(unsigned char *)(v12 + 24) = 1;
          }
        }
        continue;
      default:
        continue;
    }
  }
}

uint64_t normal_charRefNumber(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = a2[2];
  if (v2 == 59)
  {
LABEL_4:
    uint64_t v4 = 0;
    return checkCharRefNumber(v4);
  }
  if (v2 == 120)
  {
    int v3 = a2[3];
    if (v3 == 59) {
      goto LABEL_4;
    }
    uint64_t v4 = 0;
    uint64_t v7 = a2 + 4;
    while (1)
    {
      unsigned int v8 = (char)v3 - 48;
      if (v8 <= 0x36)
      {
        if (((1 << v8) & 0x3FF) != 0)
        {
          uint64_t v4 = v8 | (16 * v4);
          goto LABEL_18;
        }
        if (((1 << v8) & 0x7E0000) != 0)
        {
          uint64_t v4 = ((char)v3 + 16 * v4 - 55);
LABEL_18:
          if ((int)v4 >= 1114112) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_19;
        }
        if (((1 << v8) & 0x7E000000000000) != 0)
        {
          uint64_t v4 = ((char)v3 + 16 * v4 - 87);
          goto LABEL_18;
        }
      }
LABEL_19:
      int v9 = *v7++;
      LOBYTE(v3) = v9;
      if (v9 == 59) {
        return checkCharRefNumber(v4);
      }
    }
  }
  LODWORD(v4) = 0;
  uint64_t v5 = a2 + 3;
  while (1)
  {
    uint64_t v4 = (10 * v4 + (char)v2 - 48);
    if ((int)v4 >= 1114112) {
      break;
    }
    int v6 = *v5++;
    LOBYTE(v2) = v6;
    if (v6 == 59) {
      return checkCharRefNumber(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t normal_predefinedEntityName(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a3 - (void)a2;
  if (a3 - (void)a2 == 4)
  {
    int v7 = (char)*a2;
    if (v7 == 97)
    {
      if (a2[1] == 112 && a2[2] == 111 && a2[3] == 115) {
        return 39;
      }
    }
    else if (v7 == 113 && a2[1] == 117 && a2[2] == 111 && a2[3] == 116)
    {
      return 34;
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (*a2 == 97 && a2[1] == 109 && a2[2] == 112) {
      return 38;
    }
    return 0;
  }
  if (v3 != 2 || a2[1] != 116) {
    return 0;
  }
  int v4 = *a2;
  if (v4 == 103) {
    unsigned int v5 = 62;
  }
  else {
    unsigned int v5 = 0;
  }
  if (v4 == 108) {
    return 60;
  }
  else {
    return v5;
  }
}

uint64_t normal_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 >= 1)
  {
    while (2)
    {
      switch(*(unsigned char *)(result + *a2 + 136))
      {
        case 5:
          a2 += 2;
          goto LABEL_7;
        case 6:
          a2 += 3;
          goto LABEL_7;
        case 7:
          a2 += 4;
          goto LABEL_7;
        case 9:
          ++*a4;
          if (a3 - (uint64_t)(a2 + 1) < 1)
          {
            ++a2;
          }
          else if (*(unsigned char *)(result + a2[1] + 136) == 10)
          {
            a2 += 2;
          }
          else
          {
            ++a2;
          }
          a4[1] = 0;
          goto LABEL_8;
        case 0xA:
          ++*a4;
          a4[1] = 0;
          ++a2;
          goto LABEL_8;
        default:
          ++a2;
LABEL_7:
          ++a4[1];
LABEL_8:
          if (a3 - (uint64_t)a2 <= 0) {
            return result;
          }
          continue;
      }
    }
  }
  return result;
}

uint64_t normal_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (unsigned __int8 *)(a2 + 1);
  uint64_t v5 = ~(a2 + 1) + a3;
  if (v5 >= 1)
  {
    do
    {
      uint64_t v6 = *v4;
      int v7 = (char)v6;
      uint64_t v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0) {
          goto LABEL_4;
        }
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
        else if (v8 == 21)
        {
          if (v7 == 9) {
            goto LABEL_14;
          }
          goto LABEL_4;
        }
      }
      if (v7 != 64 && v7 != 36)
      {
LABEL_14:
        uint64_t result = 0;
        *a4 = v4;
        return result;
      }
LABEL_4:
      ++v4;
      --v5;
    }
    while (v5 > 0);
  }
  return 1;
}

uint64_t latin1_toUtf8(uint64_t a1, char **a2, char *a3, unsigned char **a4, unsigned char *a5)
{
  while (2)
  {
    for (uint64_t i = *a2; ; *a2 = i)
    {
      if (i == a3) {
        return 0;
      }
      int v6 = *i;
      int v7 = *a4;
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      if (a5 - v7 < 2) {
        return 2;
      }
      *a4 = v7 + 1;
      unsigned char *v7 = (v6 >> 6) | 0xC0;
      char v8 = v6 & 0x3F | 0x80;
      int v9 = (*a4)++;
      *int v9 = v8;
      uint64_t i = *a2 + 1;
    }
    if (v7 != a5)
    {
      *a2 = i + 1;
      char v10 = *i;
      uint64_t v11 = (*a4)++;
      char *v11 = v10;
      continue;
    }
    break;
  }
  return 2;
}

uint64_t latin1_toUtf16(uint64_t a1, unint64_t *a2, unint64_t a3, void *a4, _WORD *a5)
{
  uint64_t v5 = (unsigned __int8 *)*a2;
  if (*a2 >= a3) {
    return 0;
  }
  int v6 = (_WORD *)*a4;
  while (v6 < a5)
  {
    *a2 = (unint64_t)(v5 + 1);
    int v7 = (_WORD *)*a4;
    _WORD *v7 = *v5;
    int v6 = v7 + 1;
    *a4 = v6;
    uint64_t v5 = (unsigned __int8 *)*a2;
    if (*a2 >= a3) {
      return 0;
    }
  }
  if (v6 == a5) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t normal_scanLit(int a1, unsigned char *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5 = a4 - (void)a3;
  if (a4 - (uint64_t)a3 < 1) {
    return 0xFFFFFFFFLL;
  }
  char v8 = a3;
  while (2)
  {
    int v11 = a2[*v8 + 136];
    switch(a2[*v8 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_19;
      case 5:
        if (v5 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a2 + 55))(a2, v8)) {
          goto LABEL_19;
        }
        v8 += 2;
        goto LABEL_16;
      case 6:
        if (v5 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a2 + 56))(a2, v8)) {
          goto LABEL_19;
        }
        v8 += 3;
        goto LABEL_16;
      case 7:
        if (v5 >= 4)
        {
          if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a2 + 57))(a2, v8))
          {
LABEL_19:
            uint64_t result = 0;
            *a5 = v8;
            return result;
          }
          v8 += 4;
LABEL_16:
          unint64_t v5 = a4 - (void)v8;
          if (a4 - (uint64_t)v8 <= 0) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        return 4294967294;
      case 0xC:
      case 0xD:
        ++v8;
        if (v11 != a1) {
          goto LABEL_16;
        }
        if (a4 - (uint64_t)v8 < 1) {
          return 4294967269;
        }
        *a5 = v8;
        unsigned int v13 = a2[*v8 + 136];
        BOOL v14 = v13 > 0x1E;
        int v15 = (1 << v13) & 0x40300E00;
        if (v14 || v15 == 0) {
          return 0;
        }
        else {
          return 27;
        }
      default:
        ++v8;
        goto LABEL_16;
    }
  }
}

uint64_t normal_scanDecl(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  switch(a1[*a2 + 136])
  {
    case 0x14:
      *a4 = a2 + 1;
      uint64_t result = 33;
      break;
    case 0x16:
    case 0x18:
      int v4 = a2 + 1;
      uint64_t v5 = a3 - (void)(a2 + 1);
      if (v5 < 1) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        switch(a1[*v4 + 136])
        {
          case 0x15:
            goto LABEL_11;
          case 0x16:
          case 0x18:
            ++v4;
            if (--v5 <= 0) {
              return 0xFFFFFFFFLL;
            }
            continue;
          case 0x17:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
            goto LABEL_17;
          case 0x1E:
            if ((unint64_t)v5 < 2) {
              return 0xFFFFFFFFLL;
            }
            unsigned int v7 = a1[v4[1] + 136];
            BOOL v8 = v7 > 0x1E;
            int v9 = (1 << v7) & 0x40200600;
            if (!v8 && v9 != 0) {
              goto LABEL_17;
            }
            goto LABEL_11;
          default:
            if (a1[*v4 + 136] - 9 >= 2)
            {
LABEL_17:
              uint64_t result = 0;
              *a4 = v4;
            }
            else
            {
LABEL_11:
              *a4 = v4;
              uint64_t result = 16;
            }
            break;
        }
        break;
      }
      break;
    case 0x1B:
      uint64_t result = normal_scanComment(a1, a2 + 1, a3, a4);
      break;
    default:
      uint64_t result = 0;
      *a4 = a2;
      break;
  }
  return result;
}

uint64_t normal_scanPi(unsigned char *a1, char *a2, uint64_t a3, char **a4)
{
  unint64_t v6 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  int v9 = a2;
  unsigned int v11 = a1[*a2 + 136];
  if (v11 > 0x15)
  {
    if (v11 != 22 && v11 != 24) {
      goto LABEL_34;
    }
    uint64_t v12 = 1;
  }
  else
  {
    switch(v11)
    {
      case 5u:
        if (v6 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 55))(a1, a2)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 52))(a1, v9))
        {
          goto LABEL_34;
        }
        uint64_t v12 = 2;
        break;
      case 6u:
        if (v6 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 56))(a1, a2)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 53))(a1, v9))
        {
          goto LABEL_34;
        }
        uint64_t v12 = 3;
        break;
      case 7u:
        if (v6 >= 4)
        {
          if (!(*((unsigned int (**)(unsigned char *, char *))a1 + 57))(a1, a2)
            && (*((unsigned int (**)(unsigned char *, char *))a1 + 54))(a1, v9))
          {
            uint64_t v12 = 4;
            break;
          }
LABEL_34:
          uint64_t result = 0;
          *a4 = v9;
          return result;
        }
        return 4294967294;
      default:
        goto LABEL_34;
    }
  }
  int v15 = &v9[v12];
  unint64_t v16 = a3 - (void)&v9[v12];
  if ((uint64_t)v16 < 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v22 = 0;
  while (2)
  {
    uint64_t v17 = 1;
    switch(a1[*v15 + 136])
    {
      case 5:
        if (v16 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 55))(a1, v15)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 49))(a1, v15))
        {
          goto LABEL_44;
        }
        uint64_t v17 = 2;
        goto LABEL_20;
      case 6:
        if (v16 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 56))(a1, v15)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 50))(a1, v15))
        {
          goto LABEL_44;
        }
        uint64_t v17 = 3;
        goto LABEL_20;
      case 7:
        if (v16 < 4) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, char *))a1 + 57))(a1, v15)
          || !(*((unsigned int (**)(unsigned char *, char *))a1 + 51))(a1, v15))
        {
          goto LABEL_44;
        }
        uint64_t v17 = 4;
LABEL_20:
        v15 += v17;
        unint64_t v16 = a3 - (void)v15;
        if (a3 - (uint64_t)v15 <= 0) {
          return 0xFFFFFFFFLL;
        }
        continue;
      case 9:
      case 0xA:
      case 0x15:
        uint64_t result = normal_checkPiTarget(v9, (uint64_t)v15, &v22);
        if (!result) {
          goto LABEL_45;
        }
        int v9 = v15 + 1;
        unint64_t v18 = a3 - (void)(v15 + 1);
        if ((uint64_t)v18 >= 1)
        {
          while (2)
          {
            switch(a1[*v9 + 136])
            {
              case 0:
              case 1:
              case 8:
                goto LABEL_34;
              case 5:
                if (v18 < 2) {
                  return 4294967294;
                }
                if ((*((unsigned int (**)(unsigned char *, char *))a1 + 55))(a1, v9)) {
                  goto LABEL_34;
                }
                uint64_t v19 = v9 + 2;
                goto LABEL_61;
              case 6:
                if (v18 < 3) {
                  return 4294967294;
                }
                if ((*((unsigned int (**)(unsigned char *, char *))a1 + 56))(a1, v9)) {
                  goto LABEL_34;
                }
                uint64_t v19 = v9 + 3;
                goto LABEL_61;
              case 7:
                if (v18 < 4) {
                  return 4294967294;
                }
                if ((*((unsigned int (**)(unsigned char *, char *))a1 + 57))(a1, v9)) {
                  goto LABEL_34;
                }
                uint64_t v19 = v9 + 4;
LABEL_61:
                unint64_t v18 = a3 - (void)v19;
                uint64_t result = 0xFFFFFFFFLL;
                int v9 = v19;
                if (a3 - (uint64_t)v19 <= 0) {
                  return result;
                }
                continue;
              case 0xF:
                uint64_t v19 = v9 + 1;
                if (a3 - (uint64_t)(v9 + 1) < 1) {
                  return 0xFFFFFFFFLL;
                }
                if (*v19 != 62) {
                  goto LABEL_61;
                }
                BOOL v21 = (unsigned __int8 *)(v9 + 2);
                goto LABEL_72;
              default:
                uint64_t v19 = v9 + 1;
                goto LABEL_61;
            }
          }
        }
        return 0xFFFFFFFFLL;
      case 0xF:
        uint64_t result = normal_checkPiTarget(v9, (uint64_t)v15, &v22);
        if (!result) {
          goto LABEL_45;
        }
        int v20 = v15 + 1;
        if (a3 - (uint64_t)(v15 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v20 == 62)
        {
          BOOL v21 = (unsigned __int8 *)(v15 + 2);
LABEL_72:
          *a4 = (char *)v21;
          uint64_t result = v22;
        }
        else
        {
LABEL_64:
          uint64_t result = 0;
          *a4 = v20;
        }
        break;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_20;
      case 0x1D:
LABEL_44:
        uint64_t result = 0;
LABEL_45:
        *a4 = v15;
        return result;
      default:
        int v20 = v15;
        goto LABEL_64;
    }
    return result;
  }
}

uint64_t normal_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v6 = a2;
  uint64_t result = 0;
  uint64_t v10 = 1;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 5:
      if (v4 < 2) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
        goto LABEL_16;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v6);
      if (!result) {
        goto LABEL_17;
      }
      uint64_t v10 = 2;
      break;
    case 6:
      if (v4 < 3) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
        goto LABEL_16;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v6);
      if (!result) {
        goto LABEL_17;
      }
      uint64_t v10 = 3;
      break;
    case 7:
      if (v4 < 4) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2)) {
        goto LABEL_16;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v6);
      if (!result) {
        goto LABEL_17;
      }
      uint64_t v10 = 4;
      break;
    case 9:
    case 0xA:
    case 0x15:
      uint64_t result = 22;
      goto LABEL_17;
    case 0x16:
    case 0x18:
      break;
    default:
      goto LABEL_17;
  }
  v6 += v10;
  unint64_t v11 = a3 - (void)v6;
  if (a3 - (uint64_t)v6 < 1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *v6 + 136);
    if (v12 > 0x11) {
      break;
    }
    switch(v12)
    {
      case 5u:
        if (v11 < 2) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v6)) {
          goto LABEL_16;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v6);
        if (!result) {
          goto LABEL_17;
        }
        uint64_t v13 = 2;
        break;
      case 6u:
        if (v11 < 3) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v6)) {
          goto LABEL_16;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v6);
        if (!result) {
          goto LABEL_17;
        }
        uint64_t v13 = 3;
        break;
      case 7u:
        if (v11 < 4) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v6)) {
          goto LABEL_16;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v6);
        if (!result) {
          goto LABEL_17;
        }
        uint64_t v13 = 4;
        break;
      default:
        goto LABEL_16;
    }
LABEL_44:
    v6 += v13;
    unint64_t v11 = a3 - (void)v6;
    if (a3 - (uint64_t)v6 <= 0) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v12 - 24 < 4 || v12 == 22)
  {
    uint64_t v13 = 1;
    goto LABEL_44;
  }
  if (v12 != 18)
  {
LABEL_16:
    uint64_t result = 0;
    goto LABEL_17;
  }
  ++v6;
  uint64_t result = 28;
LABEL_17:
  *a4 = v6;
  return result;
}

uint64_t normal_scanComment(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2;
  if (*a2 != 45)
  {
LABEL_22:
    uint64_t result = 0;
    goto LABEL_23;
  }
  uint64_t v5 = a2 + 1;
  unint64_t v7 = a3 - (void)(a2 + 1);
  if ((uint64_t)v7 < 1) {
    return 0xFFFFFFFFLL;
  }
  while (2)
  {
    uint64_t result = 0;
    switch(a1[*v5 + 136])
    {
      case 0:
      case 1:
      case 8:
        goto LABEL_23;
      case 2:
      case 3:
      case 4:
        goto LABEL_12;
      case 5:
        if (v7 < 2) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 55))(a1, v5)) {
          goto LABEL_22;
        }
        uint64_t v10 = v5 + 2;
        goto LABEL_19;
      case 6:
        if (v7 < 3) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 56))(a1, v5)) {
          goto LABEL_22;
        }
        uint64_t v10 = v5 + 3;
        goto LABEL_19;
      case 7:
        if (v7 < 4) {
          return 4294967294;
        }
        if ((*((unsigned int (**)(unsigned char *, unsigned __int8 *))a1 + 57))(a1, v5)) {
          goto LABEL_22;
        }
        uint64_t v10 = v5 + 4;
        goto LABEL_19;
      default:
        if (a1[*v5 + 136] != 27)
        {
LABEL_12:
          uint64_t v10 = v5 + 1;
LABEL_19:
          unint64_t v7 = a3 - (void)v10;
          uint64_t v5 = v10;
          if (a3 - (uint64_t)v10 <= 0) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        uint64_t v10 = v5 + 1;
        if (a3 - (uint64_t)(v5 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        if (*v10 != 45) {
          goto LABEL_19;
        }
        if (a3 - (uint64_t)(v5 + 2) < 1) {
          return 0xFFFFFFFFLL;
        }
        int v11 = v5[2];
        if (v11 == 62) {
          v5 += 3;
        }
        else {
          v5 += 2;
        }
        if (v11 == 62) {
          uint64_t result = 13;
        }
        else {
          uint64_t result = 0;
        }
LABEL_23:
        *a4 = v5;
        return result;
    }
  }
}

BOOL normal_checkPiTarget(char *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 11;
  if (a2 - (void)a1 != 3) {
    return 1;
  }
  int v3 = *a1;
  if (v3 == 120)
  {
    int v4 = 0;
  }
  else
  {
    if (v3 != 88) {
      return 1;
    }
    int v4 = 1;
  }
  int v5 = a1[1];
  if (v5 != 109)
  {
    if (v5 != 77) {
      return 1;
    }
    int v4 = 1;
  }
  int v6 = a1[2];
  if (v6 != 108) {
    return v6 != 76;
  }
  if (v4) {
    return 0;
  }
  *a3 = 12;
  return 1;
}

uint64_t normal_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = a2;
  uint64_t result = 0;
  unsigned int v10 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v10 <= 0x12)
  {
    switch(v10)
    {
      case 5u:
        if (v4 >= 2)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, a2)) {
            goto LABEL_59;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7);
          if (!result) {
            goto LABEL_60;
          }
          uint64_t v11 = 2;
          goto LABEL_18;
        }
        break;
      case 6u:
        if (v4 >= 3)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, a2)) {
            goto LABEL_59;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7);
          if (!result) {
            goto LABEL_60;
          }
          uint64_t v11 = 3;
          goto LABEL_18;
        }
        break;
      case 7u:
        if (v4 >= 4)
        {
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, a2)) {
            goto LABEL_59;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7);
          if (!result) {
            goto LABEL_60;
          }
          uint64_t v11 = 4;
LABEL_18:
          v7 += v11;
          unint64_t v13 = a3 - (void)v7;
          if (a3 - (uint64_t)v7 >= 1)
          {
            while (1)
            {
              unsigned int v14 = *(unsigned __int8 *)(a1 + *v7 + 136);
              if (v14 > 0x11)
              {
                if (v14 - 24 >= 4 && v14 != 22)
                {
                  if (v14 == 18)
                  {
                    ++v7;
                    uint64_t result = 9;
                    goto LABEL_60;
                  }
LABEL_59:
                  uint64_t result = 0;
                  goto LABEL_60;
                }
                uint64_t v15 = 1;
              }
              else
              {
                switch(v14)
                {
                  case 5u:
                    if (v13 < 2) {
                      return 4294967294;
                    }
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7)) {
                      goto LABEL_59;
                    }
                    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v7);
                    if (!result) {
                      goto LABEL_60;
                    }
                    uint64_t v15 = 2;
                    break;
                  case 6u:
                    if (v13 < 3) {
                      return 4294967294;
                    }
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7)) {
                      goto LABEL_59;
                    }
                    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v7);
                    if (!result) {
                      goto LABEL_60;
                    }
                    uint64_t v15 = 3;
                    break;
                  case 7u:
                    if (v13 < 4) {
                      return 4294967294;
                    }
                    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7)) {
                      goto LABEL_59;
                    }
                    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v7);
                    if (!result) {
                      goto LABEL_60;
                    }
                    uint64_t v15 = 4;
                    break;
                  default:
                    goto LABEL_59;
                }
              }
              v7 += v15;
              unint64_t v13 = a3 - (void)v7;
              if (a3 - (uint64_t)v7 <= 0) {
                return 0xFFFFFFFFLL;
              }
            }
          }
          return 0xFFFFFFFFLL;
        }
        break;
      default:
        goto LABEL_60;
    }
    return 4294967294;
  }
  if (v10 != 19)
  {
    if (v10 == 22 || v10 == 24)
    {
      uint64_t v11 = 1;
      goto LABEL_18;
    }
LABEL_60:
    *a4 = v7;
    return result;
  }
  if (a3 - (uint64_t)(a2 + 1) >= 1)
  {
    uint64_t v17 = a2[1];
    if (v17 != 120)
    {
      if (*(unsigned char *)(a1 + v17 + 136) != 25)
      {
        uint64_t result = 0;
        unint64_t v7 = a2 + 1;
        goto LABEL_60;
      }
      unint64_t v7 = a2 + 2;
      uint64_t v20 = v4 - 2;
      while (v20-- >= 1)
      {
        unsigned int v22 = *v7++;
        int v23 = *(unsigned __int8 *)(a1 + v22 + 136);
        if (v23 != 25)
        {
          if (v23 != 18)
          {
            uint64_t result = 0;
            --v7;
            goto LABEL_60;
          }
          goto LABEL_77;
        }
      }
      return 0xFFFFFFFFLL;
    }
    if (a3 - (uint64_t)(a2 + 2) >= 1)
    {
      if ((*(unsigned char *)(a1 + a2[2] + 136) & 0xFE) != 0x18)
      {
        uint64_t result = 0;
        unint64_t v7 = a2 + 2;
        goto LABEL_60;
      }
      unint64_t v7 = a2 + 3;
      uint64_t v18 = a3 - (void)(a2 + 3);
      if (v18 >= 1)
      {
        uint64_t result = 0xFFFFFFFFLL;
        while (1)
        {
          int v19 = *(unsigned __int8 *)(a1 + *v7 + 136);
          if ((v19 - 24) >= 2) {
            break;
          }
          ++v7;
          if (--v18 <= 0) {
            return result;
          }
        }
        if (v19 != 18) {
          goto LABEL_59;
        }
        ++v7;
LABEL_77:
        uint64_t result = 10;
        goto LABEL_60;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t normal_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v26 = a2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = a2;
  int v9 = 0;
  uint64_t v10 = a3 - 2;
  while (1)
  {
    uint64_t result = 0;
    unsigned int v12 = v7;
    switch(*(unsigned char *)(a1 + *v7 + 136))
    {
      case 5:
        if (v4 < 2) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7)) {
          goto LABEL_103;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 392))(a1, v7);
        if (!result) {
          goto LABEL_104;
        }
        v7 += 2;
        goto LABEL_5;
      case 6:
        if (v4 < 3) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7)) {
          goto LABEL_103;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 400))(a1, v7);
        if (!result) {
          goto LABEL_104;
        }
        v7 += 3;
        goto LABEL_5;
      case 7:
        if (v4 < 4) {
          return 4294967294;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7)) {
          goto LABEL_103;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 408))(a1, v7);
        if (!result) {
          goto LABEL_104;
        }
        v7 += 4;
        goto LABEL_5;
      case 8:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        goto LABEL_105;
      case 9:
      case 0xA:
      case 0x15:
        uint64_t v13 = a3 - (void)++v7;
        if (a3 - (uint64_t)v7 < 1) {
          return 0xFFFFFFFFLL;
        }
        while (1)
        {
          int v14 = *(unsigned __int8 *)(a1 + *v7 + 136);
          if ((v14 - 9) >= 2 && v14 != 21) {
            break;
          }
          ++v7;
          if (--v13 <= 0) {
            return 0xFFFFFFFFLL;
          }
        }
        if (v14 != 14) {
          goto LABEL_103;
        }
        uint64_t v26 = v7;
LABEL_18:
        unint64_t v16 = v7 + 1;
        if (a3 - (uint64_t)(v7 + 1) < 1) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v17 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if ((v17 & 0xFE) != 0xC)
        {
          uint64_t v18 = v10 - (void)v7;
          while (1)
          {
            unint64_t v7 = v16;
            if (v17 > 0x15 || ((1 << v17) & 0x200600) == 0) {
              break;
            }
            if (v18 <= 0) {
              return 0xFFFFFFFFLL;
            }
            ++v16;
            unsigned int v17 = *(unsigned __int8 *)(a1 + v7[1] + 136);
            --v18;
            if ((v17 & 0xFE) == 0xC) {
              goto LABEL_25;
            }
          }
LABEL_103:
          uint64_t result = 0;
LABEL_104:
          unsigned int v12 = v7;
LABEL_105:
          *a4 = v12;
          return result;
        }
LABEL_25:
        v7 += 2;
        uint64_t v26 = v7;
        unint64_t v19 = a3 - (void)v7;
        if (a3 - (uint64_t)v7 < 1) {
          return 0xFFFFFFFFLL;
        }
        break;
      case 0xE:
        goto LABEL_18;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        ++v7;
        goto LABEL_5;
      case 0x17:
        if (v9) {
          goto LABEL_103;
        }
        unsigned int v12 = v7 + 1;
        uint64_t v26 = v7 + 1;
        unint64_t v20 = a3 - (void)(v7 + 1);
        if ((uint64_t)v20 < 1) {
          return 0xFFFFFFFFLL;
        }
        uint64_t result = 0;
        unsigned int v21 = *(unsigned __int8 *)(a1 + *v12 + 136);
        if (v21 <= 6)
        {
          if (v21 == 5)
          {
            if (v20 < 2) {
              return 4294967294;
            }
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7 + 1))
            {
LABEL_122:
              uint64_t result = 0;
              goto LABEL_105;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7 + 1);
            if (!result) {
              goto LABEL_105;
            }
            v7 += 3;
          }
          else
          {
            if (v21 != 6) {
              goto LABEL_105;
            }
            if (v20 < 3) {
              return 4294967294;
            }
            if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7 + 1)) {
              goto LABEL_122;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7 + 1);
            if (!result) {
              goto LABEL_105;
            }
            v7 += 4;
          }
        }
        else if (v21 == 7)
        {
          if (v20 < 4) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7 + 1)) {
            goto LABEL_122;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7 + 1);
          if (!result) {
            goto LABEL_105;
          }
          v7 += 5;
        }
        else
        {
          if (v21 != 24 && v21 != 22) {
            goto LABEL_105;
          }
          v7 += 2;
        }
        uint64_t v26 = v7;
        int v9 = 1;
        goto LABEL_6;
      default:
        goto LABEL_104;
    }
LABEL_26:
    if (*(unsigned __int8 *)(a1 + *v7 + 136) != v17) {
      break;
    }
    unsigned int v12 = v7 + 1;
    uint64_t v26 = v7 + 1;
    if (a3 - (uint64_t)(v7 + 1) < 1) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = 0;
    unsigned int v23 = *(unsigned __int8 *)(a1 + *v12 + 136);
    if (v23 > 0xA)
    {
      if (v23 != 21)
      {
        if (v23 == 11)
        {
LABEL_111:
          ++v12;
          uint64_t result = 1;
          goto LABEL_105;
        }
        if (v23 != 17) {
          goto LABEL_105;
        }
LABEL_113:
        uint64_t v26 = v12 + 1;
        if (a3 - (uint64_t)(v12 + 1) >= 1)
        {
          int v25 = v12[1];
          if (v25 == 62) {
            v12 += 2;
          }
          else {
            ++v12;
          }
          if (v25 == 62) {
            uint64_t result = 3;
          }
          else {
            uint64_t result = 0;
          }
          goto LABEL_105;
        }
        return 0xFFFFFFFFLL;
      }
    }
    else if (v23 - 9 >= 2)
    {
      goto LABEL_105;
    }
    unsigned int v12 = v7 + 2;
    uint64_t v24 = a3 - (void)(v7 + 2);
    if (v24 < 1) {
      return 0xFFFFFFFFLL;
    }
    v7 += 6;
    while (2)
    {
      switch(*(unsigned char *)(a1 + *(v7 - 4) + 136))
      {
        case 5:
          if ((unint64_t)v24 < 2) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7 - 4)) {
            goto LABEL_122;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 416))(a1, v7 - 4);
          if (!result) {
            goto LABEL_105;
          }
          int v9 = 0;
          v7 -= 2;
          goto LABEL_5;
        case 6:
          if ((unint64_t)v24 < 3) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7 - 4)) {
            goto LABEL_122;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 424))(a1, v7 - 4);
          if (!result) {
            goto LABEL_105;
          }
          int v9 = 0;
          --v7;
          goto LABEL_5;
        case 7:
          if ((unint64_t)v24 < 4) {
            return 4294967294;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7 - 4))
          {
            uint64_t result = 0;
            unsigned int v12 = v7 - 4;
            goto LABEL_105;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 432))(a1, v7 - 4);
          if (!result) {
            goto LABEL_105;
          }
          int v9 = 0;
LABEL_5:
          uint64_t v26 = v7;
          break;
        case 9:
        case 0xA:
        case 0x15:
          ++v12;
          --v24;
          ++v7;
          uint64_t result = 0xFFFFFFFFLL;
          if (v24 <= 0) {
            return result;
          }
          continue;
        case 0xB:
          unsigned int v12 = v7 - 4;
          goto LABEL_111;
        case 0x11:
          unsigned int v12 = v7 - 4;
          goto LABEL_113;
        case 0x16:
        case 0x18:
          int v9 = 0;
          v7 -= 3;
          goto LABEL_5;
        default:
          uint64_t result = 0;
          unsigned int v12 = v7 - 4;
          goto LABEL_105;
      }
      break;
    }
LABEL_6:
    unint64_t v4 = a3 - (void)v7;
    if (a3 - (uint64_t)v7 <= 0) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t result = 0;
  unsigned int v12 = v7;
  switch(*(unsigned char *)(a1 + *v7 + 136))
  {
    case 0:
    case 1:
    case 2:
    case 8:
      goto LABEL_105;
    case 3:
      uint64_t result = normal_scanRef(a1, v7 + 1, a3, &v26);
      if ((int)result >= 1)
      {
        unint64_t v7 = v26;
LABEL_41:
        unint64_t v19 = a3 - (void)v7;
        if (a3 - (uint64_t)v7 <= 0) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_26;
      }
      if (!result)
      {
        unsigned int v12 = v26;
        goto LABEL_105;
      }
      return result;
    case 5:
      if (v19 < 2) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 440))(a1, v7)) {
        goto LABEL_103;
      }
      v7 += 2;
      goto LABEL_40;
    case 6:
      if (v19 < 3) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 448))(a1, v7)) {
        goto LABEL_103;
      }
      v7 += 3;
      goto LABEL_40;
    case 7:
      if (v19 < 4) {
        return 4294967294;
      }
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(a1 + 456))(a1, v7)) {
        goto LABEL_103;
      }
      v7 += 4;
LABEL_40:
      uint64_t v26 = v7;
      goto LABEL_41;
    default:
      ++v7;
      goto LABEL_40;
  }
}

uint64_t utf8_toUtf8(uint64_t a1, const void **a2, unint64_t a3, void **a4, uint64_t a5)
{
  unint64_t v6 = a3;
  unint64_t v14 = a3;
  BOOL v8 = *a2;
  int64_t v9 = a3 - (void)*a2;
  int64_t v10 = a5 - (void)*a4;
  if (v9 > v10)
  {
    unint64_t v6 = (unint64_t)v8 + v10;
    unint64_t v14 = (unint64_t)v8 + v10;
  }
  crnc3rdprtyrnm__INTERNAL_trim_to_complete_utf8_characters((unint64_t)v8, &v14);
  BOOL v11 = v14 < v6;
  size_t v12 = v14 - (void)*a2;
  cstdlib_memcpy(*a4, *a2, v12);
  *a2 = (char *)*a2 + v12;
  *a4 = (char *)*a4 + v12;
  if (v9 <= v10) {
    return v11;
  }
  else {
    return 2;
  }
}

uint64_t utf8_toUtf16(uint64_t a1, unint64_t *a2, unint64_t a3, _WORD **a4, unint64_t a5)
{
  int v5 = *a4;
  unint64_t v6 = (unsigned __int8 *)*a2;
  BOOL v7 = *a2 < a3;
  if (*a2 < a3 && (unint64_t)v5 < a5)
  {
    do
    {
      uint64_t v10 = *v6;
      int v11 = *(unsigned __int8 *)(a1 + v10 + 136);
      switch(v11)
      {
        case 7:
          if ((uint64_t)(a5 - (void)v5) < 4)
          {
            uint64_t result = 2;
            goto LABEL_25;
          }
          if ((uint64_t)(a3 - (void)v6) < 4)
          {
LABEL_23:
            uint64_t result = 1;
            goto LABEL_25;
          }
          unsigned __int8 v12 = v6[2];
          __int16 v13 = v6[3] & 0x3F;
          *int v5 = (((((v6[1] & 0x3F) << 12) & 0xFFE3F03F | ((*v6 & 7) << 18) | ((v12 & 0x3F) << 6)) + 16711680) >> 10) | 0xD800;
          v5[1] = v13 & 0xF03F | ((v12 & 0x3F) << 6) | 0xDC00;
          v5 += 2;
          v6 += 4;
          break;
        case 6:
          if ((uint64_t)(a3 - (void)v6) < 3) {
            goto LABEL_23;
          }
          *v5++ = ((_WORD)v10 << 12) | ((v6[1] & 0x3F) << 6) | v6[2] & 0x3F;
          v6 += 3;
          break;
        case 5:
          if ((uint64_t)(a3 - (void)v6) < 2) {
            goto LABEL_23;
          }
          *v5++ = v6[1] & 0x3F | ((v10 & 0x1F) << 6);
          v6 += 2;
          break;
        default:
          ++v6;
          *v5++ = (char)v10;
          break;
      }
      BOOL v7 = (unint64_t)v6 < a3;
    }
    while ((unint64_t)v6 < a3 && (unint64_t)v5 < a5);
  }
  if (v7) {
    uint64_t result = 2;
  }
  else {
    uint64_t result = 0;
  }
LABEL_25:
  *a2 = (unint64_t)v6;
  *a4 = v5;
  return result;
}

uint64_t utf8_isName2(uint64_t a1, unsigned __int8 *a2)
{
  return (1 << a2[1]) & namingBitmap[(2 * (*a2 & 3)) | (8 * namePages[((unint64_t)*a2 >> 2) & 7]) | (a2[1] >> 5) & 1];
}

uint64_t utf8_isName3(uint64_t a1, unsigned char *a2)
{
  return (1 << a2[2]) & namingBitmap[(2 * (a2[1] & 3)) | (8
                                                                      * namePages[(16 * (*a2 & 0xF)) | ((unint64_t)a2[1] >> 2) & 0xF]) | (a2[2] >> 5) & 1];
}

uint64_t isNever()
{
  return 0;
}

uint64_t utf8_isNmstrt2(uint64_t a1, unsigned __int8 *a2)
{
  return (1 << a2[1]) & namingBitmap[(2 * (*a2 & 3)) | (8
                                                                    * nmstrtPages[((unint64_t)*a2 >> 2) & 7]) | (a2[1] >> 5) & 1];
}

uint64_t utf8_isNmstrt3(uint64_t a1, unsigned char *a2)
{
  return (1 << a2[2]) & namingBitmap[(2 * (a2[1] & 3)) | (8
                                                                      * nmstrtPages[(16 * (*a2 & 0xF)) | ((unint64_t)a2[1] >> 2) & 0xF]) | (a2[2] >> 5) & 1];
}

BOOL utf8_isInvalid2(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 < 0xC2u) {
    return 1;
  }
  if ((a2[1] & 0x80u) != 0) {
    return a2[1] > 0xBFu;
  }
  return 1;
}

BOOL utf8_isInvalid3(uint64_t a1, unsigned __int8 *a2)
{
  if (((char)a2[2] & 0x80000000) == 0) {
    return 1;
  }
  unsigned int v3 = a2[2];
  int v4 = *a2;
  if (v4 != 239)
  {
    if (v3 > 0xBF) {
      return 1;
    }
    unsigned int v5 = a2[1];
    if (v4 == 224) {
      return (v5 + 64) < 0xE0u;
    }
    goto LABEL_11;
  }
  unsigned int v5 = a2[1];
  if (v5 != 191)
  {
    if (v3 > 0xBF) {
      return 1;
    }
LABEL_11:
    if ((v5 & 0x80) != 0) {
      goto LABEL_12;
    }
    return 1;
  }
  if (v3 > 0xBD) {
    return 1;
  }
  unsigned int v5 = 191;
LABEL_12:
  if (v4 == 237) {
    unsigned int v6 = 159;
  }
  else {
    unsigned int v6 = 191;
  }
  return v5 > v6;
}

uint64_t utf8_isInvalid4(uint64_t a1, unsigned __int8 *a2)
{
  if ((char)a2[3] > -65 || (char)a2[2] > -65) {
    return 1;
  }
  int v3 = *a2;
  unsigned int v4 = a2[1];
  if (v3 == 240) {
    return (v4 + 64) < 0xD0u;
  }
  if (v3 == 244) {
    unsigned int v5 = 143;
  }
  else {
    unsigned int v5 = 191;
  }
  BOOL v6 = v4 > v5;
  return (v4 & 0x80) == 0 || v6;
}

uint64_t little2_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t *a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  char v4 = a3 - (_BYTE)a2;
  unint64_t v5 = (a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v5) {
    BOOL v6 = ((a3 - (void)a2) & 1) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    a3 = (unint64_t)&a2[v5];
  }
  if ((v4 & 1) != 0 && !v5) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = a2[1];
  if (v9 > 0xDB)
  {
    if (v9 - 220 < 4 || v9 == 255 && *a2 > 0xFDu)
    {
LABEL_17:
      uint64_t v7 = 0;
      *a4 = (uint64_t)a2;
      return v7;
    }
  }
  else
  {
    if (v9 - 216 < 4)
    {
LABEL_14:
      if ((uint64_t)(a3 - (void)a2) < 4) {
        return 4294967294;
      }
      uint64_t v10 = a2 + 4;
      goto LABEL_29;
    }
    if (!a2[1])
    {
      switch(*(unsigned char *)(a1 + *a2 + 136))
      {
        case 0:
        case 1:
        case 8:
          goto LABEL_17;
        case 2:
          int v11 = a2 + 2;
          uint64_t v12 = a3 - (void)(a2 + 2);
          if (v12 < 2) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v13 = a2[3];
          if (a2[3] > 0xDBu)
          {
            if ((v13 - 220) < 4) {
              goto LABEL_78;
            }
            if (v13 == 255)
            {
              LODWORD(v19) = *v11;
              if (v19 > 0xFD) {
                goto LABEL_78;
              }
              goto LABEL_88;
            }
          }
          else
          {
            if ((v13 - 216) < 4)
            {
LABEL_24:
              if ((unint64_t)v12 < 4) {
                return 4294967294;
              }
LABEL_78:
              uint64_t v7 = 0;
              goto LABEL_79;
            }
            if (!a2[3])
            {
              uint64_t v19 = *v11;
              switch(*(unsigned char *)(a1 + v19 + 136))
              {
                case 5:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x17:
                  goto LABEL_78;
                case 6:
                  if ((unint64_t)v12 >= 3) {
                    goto LABEL_78;
                  }
                  return 4294967294;
                case 7:
                  goto LABEL_24;
                case 0xF:
                  return little2_scanPi(a1, (char *)a2 + 4, a3, a4);
                case 0x10:
                  int v11 = a2 + 4;
                  if ((uint64_t)(a3 - (void)(a2 + 4)) < 2) {
                    return 0xFFFFFFFFLL;
                  }
                  if (a2[5]) {
                    goto LABEL_78;
                  }
                  int v31 = *(unsigned __int8 *)(a1 + *v11 + 136);
                  if (v31 != 20)
                  {
                    if (v31 != 27) {
                      goto LABEL_78;
                    }
                    return little2_scanComment(a1, a2 + 6, a3, a4);
                  }
                  int v11 = a2 + 6;
                  if ((uint64_t)(a3 - (void)(a2 + 6)) < 12) {
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t v38 = 0;
                  while (!v11[1] && *v11 == big2_scanCdataSection_CDATA_LSQB[v38])
                  {
                    ++v38;
                    v11 += 2;
                    if (v38 == 6)
                    {
                      uint64_t v7 = 8;
                      int v11 = a2 + 18;
                      goto LABEL_79;
                    }
                  }
                  goto LABEL_78;
                case 0x11:
                  int v11 = a2 + 4;
                  uint64_t v32 = a3 - (void)(a2 + 4);
                  if (v32 < 2) {
                    return 0xFFFFFFFFLL;
                  }
                  uint64_t v33 = a2[5];
                  if (a2[5] > 0xDBu)
                  {
                    if ((v33 - 220) < 4) {
                      goto LABEL_78;
                    }
                    if (v33 == 255)
                    {
                      LODWORD(v34) = *v11;
                      if (v34 > 0xFD) {
                        goto LABEL_78;
                      }
                      goto LABEL_181;
                    }
                  }
                  else
                  {
                    if ((v33 - 216) < 4) {
                      goto LABEL_138;
                    }
                    if (!a2[5])
                    {
                      uint64_t v7 = 0;
                      uint64_t v34 = *v11;
                      unsigned int v37 = *(unsigned __int8 *)(a1 + v34 + 136);
                      if (v37 <= 0x15)
                      {
                        if (v37 == 6)
                        {
LABEL_203:
                          if ((unint64_t)v32 < 3) {
                            return 4294967294;
                          }
                          goto LABEL_78;
                        }
                        if (v37 != 7) {
                          goto LABEL_79;
                        }
LABEL_138:
                        if ((unint64_t)v32 < 4) {
                          return 4294967294;
                        }
                        goto LABEL_78;
                      }
                      if (v37 == 22 || v37 == 24) {
                        goto LABEL_182;
                      }
                      if (v37 != 29) {
                        goto LABEL_79;
                      }
LABEL_181:
                      if (((namingBitmap[(v34 >> 5) | (8 * nmstrtPages[v33])] >> v34) & 1) == 0) {
                        goto LABEL_78;
                      }
LABEL_182:
                      int v11 = a2 + 6;
                      if ((uint64_t)(a3 - (void)(a2 + 6)) < 2) {
                        return 0xFFFFFFFFLL;
                      }
                      for (uint64_t i = a3 - (void)a2 - 8; ; i -= 2)
                      {
                        uint64_t v40 = v11[1];
                        if (v11[1] > 0xDBu) {
                          break;
                        }
                        if (v11[1])
                        {
                          if ((v40 - 216) < 4)
                          {
LABEL_209:
                            if ((unint64_t)(i + 2) < 4) {
                              return 4294967294;
                            }
                            goto LABEL_78;
                          }
LABEL_195:
                          LODWORD(v41) = *v11;
                          goto LABEL_196;
                        }
                        uint64_t v41 = *v11;
                        int v42 = *(unsigned __int8 *)(a1 + v41 + 136);
                        if ((v42 - 22) >= 6)
                        {
                          if (v42 != 29)
                          {
                            uint64_t v7 = 0;
                            switch(*(unsigned char *)(a1 + v41 + 136))
                            {
                              case 6:
                                if ((unint64_t)(i + 2) >= 3) {
                                  goto LABEL_78;
                                }
                                return 4294967294;
                              case 7:
                                goto LABEL_209;
                              case 8:
                                goto LABEL_79;
                              case 9:
                              case 0xA:
                                goto LABEL_215;
                              case 0xB:
                                goto LABEL_226;
                              default:
                                if (v42 != 21) {
                                  goto LABEL_79;
                                }
LABEL_215:
                                if (i < 2) {
                                  return 0xFFFFFFFFLL;
                                }
                                v11 += 2;
                                break;
                            }
                            while (1)
                            {
                              if (v11[1]) {
                                goto LABEL_78;
                              }
                              int v44 = *(unsigned __int8 *)(a1 + *v11 + 136);
                              if ((v44 - 9) >= 2 && v44 != 21) {
                                break;
                              }
                              v11 += 2;
                              i -= 2;
                              uint64_t v7 = 0xFFFFFFFFLL;
                              if (i <= 1) {
                                return v7;
                              }
                            }
                            if (v44 == 11)
                            {
LABEL_226:
                              v11 += 2;
                              uint64_t v7 = 5;
                              goto LABEL_79;
                            }
                            goto LABEL_78;
                          }
                          goto LABEL_196;
                        }
LABEL_197:
                        v11 += 2;
                        uint64_t v7 = 0xFFFFFFFFLL;
                        if (i <= 1) {
                          return v7;
                        }
                      }
                      if (v40 != 255)
                      {
                        if ((v40 - 220) < 4) {
                          goto LABEL_78;
                        }
                        goto LABEL_195;
                      }
                      LODWORD(v41) = *v11;
                      if (v41 > 0xFD) {
                        goto LABEL_78;
                      }
LABEL_196:
                      if (((namingBitmap[(v41 >> 5) | (8 * namePages[v40])] >> v41) & 1) == 0) {
                        goto LABEL_78;
                      }
                      goto LABEL_197;
                    }
                  }
                  LODWORD(v34) = *v11;
                  goto LABEL_181;
                case 0x16:
                case 0x18:
                  goto LABEL_89;
                default:
                  if (*(unsigned char *)(a1 + v19 + 136) != 29) {
                    goto LABEL_78;
                  }
                  goto LABEL_88;
              }
            }
          }
          LODWORD(v19) = *v11;
LABEL_88:
          if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v13])] >> v19) & 1) == 0) {
            goto LABEL_78;
          }
LABEL_89:
          int v11 = a2 + 4;
          uint64_t v20 = a3 - (void)(a2 + 4);
          if (v20 < 2) {
            return 0xFFFFFFFFLL;
          }
          int v21 = 0;
          while (1)
          {
            uint64_t v22 = v11[1];
            if (v11[1] > 0xDBu)
            {
              if (v22 == 255)
              {
                LODWORD(v23) = *v11;
                if (v23 > 0xFD) {
                  goto LABEL_78;
                }
                goto LABEL_112;
              }
              if ((v22 - 220) < 4) {
                goto LABEL_78;
              }
            }
            else
            {
              if (!v11[1])
              {
                uint64_t v23 = *v11;
                uint64_t v24 = 2;
                switch(*(unsigned char *)(a1 + v23 + 136))
                {
                  case 6:
                    if ((unint64_t)v20 >= 3) {
                      goto LABEL_78;
                    }
                    return 4294967294;
                  case 7:
                    goto LABEL_125;
                  case 9:
                  case 0xA:
                  case 0x15:
                    v11 += 2;
                    uint64_t v32 = a3 - (void)v11;
                    if ((uint64_t)(a3 - (void)v11) < 2) {
                      return 0xFFFFFFFFLL;
                    }
                    while (2)
                    {
                      uint64_t v35 = v11[1];
                      if (!v11[1])
                      {
                        uint64_t v36 = *v11;
                        switch(*(unsigned char *)(a1 + v36 + 136))
                        {
                          case 6:
                            goto LABEL_203;
                          case 7:
                            goto LABEL_138;
                          case 9:
                          case 0xA:
                          case 0x15:
                            v11 += 2;
                            v32 -= 2;
                            uint64_t v7 = 0xFFFFFFFFLL;
                            if (v32 <= 1) {
                              return v7;
                            }
                            continue;
                          case 0xB:
                            goto LABEL_171;
                          case 0x11:
                            goto LABEL_172;
                          case 0x16:
                          case 0x18:
                            return little2_scanAtts(a1, v11 + 2, a3, (unsigned __int8 **)a4);
                          case 0x1D:
                            uint64_t v35 = 0;
                            goto LABEL_212;
                          default:
                            goto LABEL_78;
                        }
                      }
                      break;
                    }
                    if ((v35 - 216) < 4) {
                      goto LABEL_138;
                    }
                    if ((v35 - 220) < 4) {
                      goto LABEL_78;
                    }
                    if (v35 == 255)
                    {
                      LODWORD(v36) = *v11;
                      if (v36 > 0xFD) {
                        goto LABEL_78;
                      }
                      uint64_t v35 = 0xFFu;
                    }
                    else
                    {
                      LODWORD(v36) = *v11;
                    }
LABEL_212:
                    if (((namingBitmap[(v36 >> 5) | (8 * nmstrtPages[v35])] >> v36) & 1) == 0) {
                      goto LABEL_78;
                    }
                    return little2_scanAtts(a1, v11 + 2, a3, (unsigned __int8 **)a4);
                  case 0xB:
LABEL_171:
                    *a4 = (uint64_t)(v11 + 2);
                    return 2;
                  case 0x11:
LABEL_172:
                    unsigned int v17 = v11 + 2;
                    if ((uint64_t)(a3 - (void)(v11 + 2)) < 2) {
                      return 0xFFFFFFFFLL;
                    }
                    if (v11[3] || *v17 != 62) {
                      goto LABEL_63;
                    }
                    *a4 = (uint64_t)(v11 + 4);
                    return 4;
                  case 0x16:
                  case 0x18:
                  case 0x19:
                  case 0x1A:
                  case 0x1B:
                    goto LABEL_114;
                  case 0x17:
                    if (v21) {
                      goto LABEL_78;
                    }
                    int v25 = v11 + 2;
                    uint64_t v26 = a3 - (void)(v11 + 2);
                    if (v26 < 2) {
                      return 0xFFFFFFFFLL;
                    }
                    uint64_t v27 = v11[3];
                    if (v11[3] > 0xDBu)
                    {
                      if (v27 == 255)
                      {
                        LODWORD(v28) = *v25;
                        if (v28 > 0xFD) {
                          goto LABEL_179;
                        }
                        goto LABEL_123;
                      }
                      if ((v27 - 220) < 4) {
                        goto LABEL_179;
                      }
                    }
                    else
                    {
                      if (!v11[3])
                      {
                        uint64_t v28 = *v25;
                        unsigned int v29 = *(unsigned __int8 *)(a1 + v28 + 136);
                        if (v29 <= 0x15)
                        {
                          if (v29 != 5)
                          {
                            if (v29 == 6)
                            {
                              if ((unint64_t)v26 < 3) {
                                return 4294967294;
                              }
                            }
                            else if (v29 == 7)
                            {
LABEL_147:
                              if ((unint64_t)v26 < 4) {
                                return 4294967294;
                              }
                            }
                          }
LABEL_179:
                          uint64_t v7 = 0;
                          *a4 = (uint64_t)v25;
                          return v7;
                        }
                        if (v29 == 22 || v29 == 24) {
                          goto LABEL_124;
                        }
                        if (v29 != 29) {
                          goto LABEL_179;
                        }
LABEL_123:
                        if (((namingBitmap[(v28 >> 5) | (8 * nmstrtPages[v27])] >> v28) & 1) == 0) {
                          goto LABEL_179;
                        }
LABEL_124:
                        int v21 = 1;
                        uint64_t v24 = 4;
                        goto LABEL_114;
                      }
                      if ((v27 - 216) < 4) {
                        goto LABEL_147;
                      }
                    }
                    LODWORD(v28) = *v25;
                    goto LABEL_123;
                  case 0x1D:
                    goto LABEL_112;
                  default:
                    goto LABEL_78;
                }
              }
              if ((v22 - 216) < 4)
              {
LABEL_125:
                if ((unint64_t)v20 >= 4) {
                  goto LABEL_78;
                }
                return 4294967294;
              }
            }
            LODWORD(v23) = *v11;
LABEL_112:
            if (((namingBitmap[(v23 >> 5) | (8 * namePages[v22])] >> v23) & 1) == 0) {
              goto LABEL_78;
            }
            uint64_t v24 = 2;
LABEL_114:
            v11 += v24;
            uint64_t v20 = a3 - (void)v11;
            uint64_t v7 = 0xFFFFFFFFLL;
            if ((uint64_t)(a3 - (void)v11) <= 1) {
              return v7;
            }
          }
        case 3:
          return little2_scanRef(a1, a2 + 2, a3, a4);
        case 4:
          uint64_t v10 = a2 + 2;
          if ((uint64_t)(a3 - (void)(a2 + 2)) < 2) {
            return 4294967291;
          }
          if (a2[3] || *v10 != 93) {
            goto LABEL_29;
          }
          unsigned int v17 = a2 + 4;
          if ((uint64_t)(a3 - (void)(a2 + 4)) < 2) {
            return 4294967291;
          }
          if (!a2[5] && *v17 == 62)
          {
LABEL_63:
            uint64_t v7 = 0;
            *a4 = (uint64_t)v17;
            return v7;
          }
          goto LABEL_29;
        case 5:
          if ((uint64_t)(a3 - (void)a2) >= 2) {
            break;
          }
          return 4294967294;
        case 6:
          if ((uint64_t)(a3 - (void)a2) < 3) {
            return 4294967294;
          }
          uint64_t v10 = a2 + 3;
          goto LABEL_29;
        case 7:
          goto LABEL_14;
        case 9:
          uint64_t v18 = a2 + 2;
          if ((uint64_t)(a3 - (void)(a2 + 2)) < 2) {
            return 4294967293;
          }
          if (!a2[3] && *(unsigned char *)(a1 + a2[2] + 136) == 10) {
            uint64_t v18 = a2 + 4;
          }
LABEL_74:
          *a4 = (uint64_t)v18;
          return 7;
        case 0xA:
          uint64_t v18 = a2 + 2;
          goto LABEL_74;
        default:
          break;
      }
    }
  }
  uint64_t v10 = a2 + 2;
LABEL_29:
  unint64_t v14 = a3 - (void)v10;
  if ((uint64_t)(a3 - (void)v10) < 2)
  {
    unint64_t v16 = v10;
LABEL_53:
    *a4 = (uint64_t)v16;
    return 6;
  }
  while (1)
  {
    unsigned int v15 = v10[1];
    if (v15 > 0xDB)
    {
      if (v15 == 255)
      {
        if (*v10 > 0xFDu) {
          goto LABEL_54;
        }
      }
      else if (v15 - 220 < 4)
      {
LABEL_54:
        *a4 = (uint64_t)v10;
        return 6;
      }
      goto LABEL_47;
    }
    if (v15 - 216 >= 4) {
      break;
    }
LABEL_32:
    if (v14 <= 3) {
      goto LABEL_54;
    }
    unint64_t v16 = v10 + 4;
LABEL_48:
    unint64_t v14 = a3 - (void)v16;
    uint64_t v10 = v16;
    if ((uint64_t)(a3 - (void)v16) <= 1) {
      goto LABEL_53;
    }
  }
  if (v10[1])
  {
LABEL_47:
    unint64_t v16 = v10 + 2;
    goto LABEL_48;
  }
  switch(*(unsigned char *)(a1 + *v10 + 136))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 0xA:
      goto LABEL_54;
    case 4:
      if (v14 < 4) {
        goto LABEL_54;
      }
      unint64_t v16 = v10 + 2;
      if (v10[3] || *v16 != 93) {
        goto LABEL_48;
      }
      if (v14 < 6) {
        goto LABEL_54;
      }
      if (v10[5] || v10[4] != 62) {
        goto LABEL_48;
      }
      uint64_t v7 = 0;
      int v11 = v10 + 4;
      break;
    case 6:
      if (v14 <= 2) {
        goto LABEL_54;
      }
      unint64_t v16 = v10 + 3;
      goto LABEL_48;
    case 7:
      goto LABEL_32;
    default:
      goto LABEL_47;
  }
LABEL_79:
  *a4 = (uint64_t)v11;
  return v7;
}

uint64_t little2_cdataSectionTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  unint64_t v4 = (a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v4) {
    BOOL v5 = ((a3 - (void)a2) & 1) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  BOOL v6 = &a2[v4];
  if (v5) {
    BOOL v6 = (unsigned __int8 *)a3;
  }
  if ((((_BYTE)a3 - (_BYTE)a2) & 1) == 0 || v4)
  {
    unsigned int v8 = a2[1];
    if (v8 > 0xDB)
    {
      if (v8 - 220 < 4 || v8 == 255 && *a2 > 0xFDu)
      {
        uint64_t v7 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      if (v8 - 216 < 4)
      {
LABEL_13:
        if (v6 - a2 < 4) {
          return 4294967294;
        }
        unsigned int v9 = a2 + 4;
        goto LABEL_30;
      }
      if (!a2[1])
      {
        uint64_t v7 = 0;
        switch(*(unsigned char *)(a1 + *a2 + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_51;
          case 4:
            unsigned int v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (a2[3] || *v9 != 93) {
              goto LABEL_30;
            }
            if (v6 - (a2 + 4) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (a2[5] || a2[4] != 62) {
              goto LABEL_30;
            }
            a2 += 6;
            uint64_t v7 = 40;
            goto LABEL_51;
          case 5:
            if (v6 - a2 >= 2) {
              goto LABEL_29;
            }
            return 4294967294;
          case 6:
            if (v6 - a2 < 3) {
              return 4294967294;
            }
            unsigned int v9 = a2 + 3;
            goto LABEL_30;
          case 7:
            goto LABEL_13;
          case 9:
            unsigned int v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (a2[3])
            {
              uint64_t v7 = 7;
              goto LABEL_50;
            }
            if (*(unsigned char *)(a1 + a2[2] + 136) == 10) {
              a2 += 4;
            }
            else {
              a2 += 2;
            }
LABEL_61:
            uint64_t v7 = 7;
            break;
          case 0xA:
            a2 += 2;
            goto LABEL_61;
          default:
            goto LABEL_29;
        }
        goto LABEL_51;
      }
    }
LABEL_29:
    unsigned int v9 = a2 + 2;
LABEL_30:
    unint64_t v10 = v6 - v9;
    if (v6 - v9 >= 2)
    {
      while (1)
      {
        unsigned int v11 = v9[1];
        if (v11 > 0xDB) {
          break;
        }
        if (v11 - 216 < 4) {
          goto LABEL_33;
        }
        uint64_t v12 = 2;
        if (!v9[1])
        {
          unsigned int v13 = *(unsigned __int8 *)(a1 + *v9 + 136);
          if (v13 <= 0xA)
          {
            if (v13 == 6)
            {
              if (v10 < 3) {
                goto LABEL_49;
              }
              uint64_t v12 = 3;
              goto LABEL_48;
            }
            if (v13 != 7)
            {
              uint64_t v12 = 2;
              if (((1 << v13) & 0x713) != 0) {
                goto LABEL_49;
              }
              goto LABEL_48;
            }
LABEL_33:
            if (v10 < 4) {
              goto LABEL_49;
            }
            uint64_t v12 = 4;
            goto LABEL_48;
          }
          goto LABEL_37;
        }
LABEL_48:
        v9 += v12;
        unint64_t v10 = v6 - v9;
        if (v6 - v9 <= 1) {
          goto LABEL_49;
        }
      }
      if (v11 != 255)
      {
        uint64_t v12 = 2;
        if (v11 - 220 < 4) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      if (*v9 > 0xFDu) {
        goto LABEL_49;
      }
LABEL_37:
      uint64_t v12 = 2;
      goto LABEL_48;
    }
LABEL_49:
    uint64_t v7 = 6;
LABEL_50:
    a2 = v9;
LABEL_51:
    *a4 = a2;
    return v7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t little2_ignoreSectionTok(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 **a4)
{
  unint64_t v4 = &a2[(a3 - a2) & 0xFFFFFFFFFFFFFFFELL];
  if (((a3 - a2) & 1) == 0) {
    unint64_t v4 = a3;
  }
  unint64_t v5 = v4 - a2;
  if (v4 - a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  while (1)
  {
    unsigned int v7 = a2[1];
    if (v7 > 0xDB)
    {
      if (v7 == 255)
      {
        if (*a2 > 0xFDu) {
          goto LABEL_38;
        }
      }
      else if (v7 - 220 < 4)
      {
LABEL_38:
        uint64_t v9 = 0;
        goto LABEL_39;
      }
      goto LABEL_23;
    }
    if (v7 - 216 >= 4) {
      break;
    }
LABEL_7:
    if (v5 < 4) {
      return 4294967294;
    }
    unsigned int v8 = a2 + 4;
LABEL_24:
    unint64_t v5 = v4 - v8;
    a2 = v8;
    if (v4 - v8 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (a2[1])
  {
LABEL_23:
    unsigned int v8 = a2 + 2;
    goto LABEL_24;
  }
  uint64_t v9 = 0;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_39;
    case 2:
      unsigned int v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[3] || *v8 != 33) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (!a2[5] && *v8 == 91)
      {
        unsigned int v8 = a2 + 6;
        ++v6;
      }
      goto LABEL_24;
    case 4:
      unsigned int v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[3] || *v8 != 93) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[5] || *v8 != 62) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 6;
      if (v6)
      {
        --v6;
        goto LABEL_24;
      }
      uint64_t v9 = 42;
      a2 += 6;
LABEL_39:
      *a4 = a2;
      return v9;
    case 6:
      if (v5 < 3) {
        return 4294967294;
      }
      unsigned int v8 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      goto LABEL_23;
  }
}

uint64_t little2_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (v4[1] - 216 < 4)
  {
LABEL_5:
    uint64_t v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (void)v4) <= 1)
    {
LABEL_27:
      *a4 = v4;
      return 6;
    }
  }
  if (v4[1])
  {
    uint64_t v5 = 2;
    goto LABEL_6;
  }
  uint64_t v5 = 2;
  switch(*(unsigned char *)(a1 + *v4 + 136))
  {
    case 2:
      uint64_t result = 0;
      *a4 = v4;
      return result;
    case 3:
      if (v4 != a2) {
        goto LABEL_27;
      }
      return little2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      uint64_t v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2) {
        goto LABEL_27;
      }
      unsigned int v7 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2)
      {
        uint64_t result = 4294967293;
      }
      else
      {
        if (!a2[3] && *(unsigned char *)(a1 + a2[2] + 136) == 10) {
          unsigned int v7 = a2 + 4;
        }
LABEL_29:
        *a4 = v7;
        uint64_t result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2) {
        goto LABEL_27;
      }
      unsigned int v7 = a2 + 2;
      goto LABEL_29;
    default:
      if (*(unsigned char *)(a1 + *v4 + 136) != 21) {
        goto LABEL_6;
      }
      if (v4 != a2) {
        goto LABEL_27;
      }
      *a4 = a2 + 2;
      uint64_t result = 39;
      break;
  }
  return result;
}

uint64_t little2_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (v4[1] - 216 < 4)
  {
LABEL_5:
    uint64_t v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (void)v4) <= 1)
    {
LABEL_30:
      *a4 = v4;
      return 6;
    }
  }
  if (v4[1])
  {
    uint64_t v5 = 2;
    goto LABEL_6;
  }
  uint64_t v5 = 2;
  switch(*(unsigned char *)(a1 + *v4 + 136))
  {
    case 3:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v7 = a2 + 2;
      return little2_scanRef(a1, v7, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      uint64_t v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v8 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2)
      {
        uint64_t result = 4294967293;
      }
      else
      {
        if (!a2[3] && *(unsigned char *)(a1 + a2[2] + 136) == 10) {
          unsigned int v8 = a2 + 4;
        }
LABEL_33:
        *a4 = v8;
        uint64_t result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v8 = a2 + 2;
      goto LABEL_33;
    default:
      if (*(unsigned char *)(a1 + *v4 + 136) != 30) {
        goto LABEL_6;
      }
      if (v4 != a2) {
        goto LABEL_30;
      }
      LODWORD(result) = little2_scanPercent(a1, a2 + 2, a3, a4);
      if (result == 22) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
      break;
  }
  return result;
}

BOOL little2_nameMatchesAscii(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4)
{
  int v4 = *a4;
  if (!*a4) {
    return a2 == a3;
  }
  uint64_t v5 = a4 + 1;
  uint64_t v6 = a3 - a2;
  while (1)
  {
    BOOL v7 = v6 < 2;
    v6 -= 2;
    if (v7 || a2[1] || *a2 != v4) {
      break;
    }
    a2 += 2;
    int v8 = *v5++;
    int v4 = v8;
    if (!v8) {
      return a2 == a3;
    }
  }
  return 0;
}

uint64_t little2_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  for (uint64_t i = a2; ; i += v4)
  {
    unsigned int v3 = i[1];
    if (v3 > 0xDB)
    {
      if (v3 == 255)
      {
        if (*i > 0xFDu) {
          return (i - a2);
        }
        uint64_t v4 = 2;
      }
      else
      {
        uint64_t v4 = 2;
        if (v3 - 220 < 4) {
          return (i - a2);
        }
      }
      continue;
    }
    if (v3 - 216 < 4)
    {
      uint64_t v4 = 4;
      continue;
    }
    uint64_t v4 = 2;
    if (!i[1]) {
      break;
    }
LABEL_5:
    ;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + *i + 136) - 5;
  if (v5 < 0x19 && ((0x17E0007u >> v5) & 1) != 0)
  {
    uint64_t v4 = qword_2206DB6F0[(char)v5];
    goto LABEL_5;
  }
  return (i - a2);
}

unsigned __int8 *little2_skipS(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2[1])
  {
    while (1)
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + *a2 + 136);
      BOOL v4 = v3 > 0x15;
      int v5 = (1 << v3) & 0x200600;
      if (v4 || v5 == 0) {
        break;
      }
      int v2 = a2 + 2;
      int v7 = a2[3];
      a2 += 2;
      if (v7) {
        return v2;
      }
    }
  }
  return a2;
}

uint64_t little2_getAtts(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t result = 0;
  int v6 = 0;
  uint64_t v7 = 1;
  while (1)
  {
    while (1)
    {
      uint64_t v8 = v7;
      unint64_t v10 = a2 + 3;
      unsigned int v9 = a2[3];
      unsigned int v11 = a2 + 2;
      if (v9 > 0xDB) {
        break;
      }
      uint64_t v12 = a2;
      if (v9 - 216 >= 4)
      {
        if (a2[3]) {
          goto LABEL_16;
        }
        uint64_t v14 = *v11;
        a2 += 2;
        switch(*(unsigned char *)(a1 + v14 + 136))
        {
          case 3:
            a2 = v11;
            if ((int)result < a3)
            {
              *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
              a2 = v11;
            }
            continue;
          case 5:
          case 0x16:
          case 0x18:
          case 0x1D:
            goto LABEL_16;
          case 6:
            a2 = v10;
            if (!v7)
            {
              uint64_t v7 = 1;
              a2 = v10;
              if ((int)result < a3)
              {
                uint64_t v17 = a4 + 32 * (int)result;
                *(void *)uint64_t v17 = v11;
                *(unsigned char *)(v17 + 24) = 1;
                a2 = v10;
              }
            }
            continue;
          case 7:
            goto LABEL_4;
          case 9:
          case 0xA:
            uint64_t v7 = 0;
            a2 = v11;
            if (v8 == 1) {
              continue;
            }
            a2 = v11;
            uint64_t v7 = v8;
            if (v8 != 2) {
              continue;
            }
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
            goto LABEL_66;
          case 0xB:
          case 0x11:
            uint64_t v7 = 2;
            a2 = v11;
            if (v8 == 2) {
              continue;
            }
            return result;
          case 0xC:
            if (v7 == 2)
            {
              uint64_t v7 = 2;
              a2 = v11;
              if (v6 == 12)
              {
                if ((int)result < a3) {
                  *(void *)(a4 + 32 * (int)result + 16) = v11;
                }
                uint64_t v7 = 0;
                uint64_t result = (result + 1);
                int v6 = 12;
                a2 = v11;
              }
              continue;
            }
            int v6 = 12;
            uint64_t v7 = 2;
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            *(void *)(a4 + 32 * (int)result + 8) = v12 + 4;
            int v6 = 12;
            goto LABEL_66;
          case 0xD:
            if (v7 == 2)
            {
              uint64_t v7 = 2;
              a2 = v11;
              if (v6 == 13)
              {
                if ((int)result < a3) {
                  *(void *)(a4 + 32 * (int)result + 16) = v11;
                }
                uint64_t v7 = 0;
                uint64_t result = (result + 1);
                int v6 = 13;
                a2 = v11;
              }
              continue;
            }
            int v6 = 13;
            uint64_t v7 = 2;
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            *(void *)(a4 + 32 * (int)result + 8) = v12 + 4;
            int v6 = 13;
            goto LABEL_66;
          case 0x15:
            uint64_t v7 = 0;
            a2 = v11;
            if (v8 == 1) {
              continue;
            }
            a2 = v11;
            uint64_t v7 = v8;
            if (v8 != 2) {
              continue;
            }
            a2 = v11;
            if ((int)result >= a3) {
              continue;
            }
            uint64_t v18 = a4 + 32 * (int)result;
            int v20 = *(unsigned __int8 *)(v18 + 24);
            uint64_t v19 = (unsigned char *)(v18 + 24);
            uint64_t v7 = 2;
            a2 = v11;
            if (!v20) {
              continue;
            }
            if (v11 == *(unsigned __int8 **)(a4 + 32 * (int)result + 8) || v14 != 32) {
              goto LABEL_65;
            }
            unsigned int v21 = v12[5];
            if (v21 > 0xDB)
            {
              if (v21 - 220 < 4)
              {
                int v22 = 8;
                goto LABEL_64;
              }
              if (v21 == 255 && v12[4] > 0xFDu)
              {
                int v22 = 0;
                goto LABEL_64;
              }
LABEL_63:
              int v22 = 29;
              goto LABEL_64;
            }
            if (v21 - 216 < 4)
            {
              int v22 = 7;
              goto LABEL_64;
            }
            if (v12[5]) {
              goto LABEL_63;
            }
            uint64_t v23 = v12[4];
            if (v23 == 32) {
              goto LABEL_65;
            }
            int v22 = *(unsigned __int8 *)(a1 + v23 + 136);
LABEL_64:
            uint64_t v7 = 2;
            a2 = v11;
            if (v22 != v6) {
              continue;
            }
LABEL_65:
            *uint64_t v19 = 0;
LABEL_66:
            uint64_t v7 = 2;
            a2 = v11;
            break;
          default:
            continue;
        }
      }
      else
      {
LABEL_4:
        if (!v7)
        {
          uint64_t v8 = 1;
          if ((int)result < a3)
          {
            uint64_t v16 = a4 + 32 * (int)result;
            *(void *)uint64_t v16 = v11;
            *(unsigned char *)(v16 + 24) = 1;
          }
        }
        a2 = v12 + 4;
        uint64_t v7 = v8;
      }
    }
    a2 += 2;
    if (v9 - 220 >= 4)
    {
      if (v9 == 255)
      {
        BOOL v13 = *v11 <= 0xFDu && v7 == 0;
        a2 = v11;
        if (v13) {
          goto LABEL_17;
        }
      }
      else
      {
LABEL_16:
        a2 = v11;
        if (!v7)
        {
LABEL_17:
          uint64_t v7 = 1;
          a2 = v11;
          if ((int)result < a3)
          {
            uint64_t v15 = a4 + 32 * (int)result;
            *(void *)uint64_t v15 = v11;
            *(unsigned char *)(v15 + 24) = 1;
            a2 = v11;
          }
        }
      }
    }
  }
}

uint64_t little2_charRefNumber(uint64_t a1, unsigned char *a2)
{
  if (!a2[5] && a2[4] == 120)
  {
    uint64_t v2 = 0;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      if (!*i)
      {
        int v4 = (char)*(i - 1);
        if (v4 == 59) {
          return checkCharRefNumber(v2);
        }
        int v5 = v4 - 48;
        if ((v4 - 48) <= 0x36)
        {
          if (((1 << v5) & 0x3FF) != 0)
          {
            uint64_t v2 = v5 | (16 * v2);
          }
          else if (((1 << v5) & 0x7E0000) != 0)
          {
            uint64_t v2 = (v4 + 16 * v2 - 55);
          }
          else
          {
            if (((1 << v5) & 0x7E000000000000) == 0) {
              continue;
            }
            uint64_t v2 = (v4 + 16 * v2 - 87);
          }
          if ((int)v2 >= 1114112) {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  uint64_t v2 = 0;
  for (uint64_t j = a2 + 5; *j; j += 2)
  {
    int v7 = -1;
LABEL_19:
    uint64_t v2 = (v7 + 10 * v2 - 48);
    if ((int)v2 >= 1114112) {
      return 0xFFFFFFFFLL;
    }
  }
  int v7 = (char)*(j - 1);
  if (v7 != 59) {
    goto LABEL_19;
  }
  return checkCharRefNumber(v2);
}

uint64_t little2_predefinedEntityName(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = (a3 - (uint64_t)a2) / 2;
  if (v3 == 4)
  {
    if (!a2[1])
    {
      int v7 = (char)*a2;
      if (v7 == 97)
      {
        if (!a2[3] && a2[2] == 112 && !a2[5] && a2[4] == 111 && !a2[7] && a2[6] == 115) {
          return 39;
        }
      }
      else if (v7 == 113 && !a2[3] && a2[2] == 117 && !a2[5] && a2[4] == 111 && !a2[7] && a2[6] == 116)
      {
        return 34;
      }
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (!a2[1] && *a2 == 97 && !a2[3] && a2[2] == 109 && !a2[5] && a2[4] == 112) {
      return 38;
    }
    return 0;
  }
  if (v3 != 2 || a2[3] || a2[2] != 116 || a2[1]) {
    return 0;
  }
  int v4 = *a2;
  if (v4 == 103) {
    unsigned int v5 = 62;
  }
  else {
    unsigned int v5 = 0;
  }
  if (v4 == 108) {
    return 60;
  }
  else {
    return v5;
  }
}

uint64_t little2_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 >= 2)
  {
    do
    {
      if (a2[1] - 216 >= 4)
      {
        if (!a2[1])
        {
          switch(*(unsigned char *)(result + *a2 + 136))
          {
            case 6:
              a2 += 3;
              goto LABEL_7;
            case 7:
              goto LABEL_3;
            case 9:
              ++*a4;
              int v4 = a2 + 2;
              if (a3 - (uint64_t)(a2 + 2) >= 2 && !a2[3] && *(unsigned char *)(result + a2[2] + 136) == 10) {
                int v4 = a2 + 4;
              }
              a4[1] = 0;
              a2 = v4;
              break;
            case 0xA:
              ++*a4;
              a4[1] = 0;
              a2 += 2;
              break;
            default:
              goto LABEL_6;
          }
          continue;
        }
LABEL_6:
        a2 += 2;
      }
      else
      {
LABEL_3:
        a2 += 4;
      }
LABEL_7:
      ++a4[1];
    }
    while (a3 - (uint64_t)a2 > 1);
  }
  return result;
}

uint64_t little2_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (unsigned __int8 *)(a2 + 2);
  uint64_t v5 = a3 - (a2 + 2) - 2;
  if (v5 >= 2)
  {
    do
    {
      if (v4[1])
      {
LABEL_15:
        uint64_t result = 0;
        *a4 = v4;
        return result;
      }
      uint64_t v6 = *v4;
      int v7 = (char)v6;
      uint64_t v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0) {
          goto LABEL_5;
        }
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0) {
            goto LABEL_5;
          }
        }
        else if (v8 == 21)
        {
          if (v7 == 9) {
            goto LABEL_15;
          }
          goto LABEL_5;
        }
      }
      if (v7 != 64 && v7 != 36) {
        goto LABEL_15;
      }
LABEL_5:
      v4 += 2;
      v5 -= 2;
    }
    while (v5 > 1);
  }
  return 1;
}

uint64_t little2_toUtf8(uint64_t a1, unsigned __int8 **a2, uint64_t a3, unsigned char **a4, unsigned char *a5)
{
  uint64_t v5 = *a2;
  int64_t v6 = (a3 - (void)*a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 1)
  {
    int v7 = &v5[v6];
    do
    {
      unsigned int v8 = *v5;
      int v9 = (char)v8;
      unsigned int v10 = v5[1];
      if (v10 - 1 >= 7)
      {
        if (v10 - 216 < 4)
        {
          uint64_t v16 = *a4;
          if (a5 - *a4 < 4) {
            goto LABEL_21;
          }
          if (v7 - v5 < 4)
          {
            uint64_t result = 1;
            goto LABEL_23;
          }
          unsigned int v17 = ((v8 >> 6) & 0xFFFFFFF3 | (4 * (v10 & 3))) + 1;
          *a4 = v16 + 1;
          *uint64_t v16 = (v17 >> 2) | 0xF0;
          LOBYTE(v17) = (v8 >> 2) & 0xF | (16 * (v17 & 3)) | 0x80;
          uint64_t v18 = (*a4)++;
          unsigned char *v18 = v17;
          unsigned int v19 = v5[2];
          v5 += 2;
          char v20 = (v19 >> 6) & 0xC3 | (16 * (v9 & 3)) | (4 * (v5[1] & 3)) | 0x80;
          unsigned int v21 = (*a4)++;
          *unsigned int v21 = v20;
          LOBYTE(v9) = v19 & 0x3F | 0x80;
          int v22 = *a4;
          goto LABEL_11;
        }
        if (v5[1])
        {
          uint64_t v23 = *a4;
          if (a5 - *a4 < 3)
          {
LABEL_21:
            uint64_t result = 2;
            goto LABEL_23;
          }
          *a4 = v23 + 1;
          unsigned char *v23 = (v10 >> 4) | 0xE0;
          char v13 = (4 * (v10 & 0xF)) | (v9 >> 6) | 0x80;
          unsigned int v11 = *a4;
          goto LABEL_6;
        }
        if (((char)v8 & 0x80000000) == 0)
        {
          int v22 = *a4;
          if (*a4 == a5) {
            goto LABEL_21;
          }
LABEL_11:
          *a4 = v22 + 1;
          unsigned char *v22 = v9;
          goto LABEL_12;
        }
      }
      unsigned int v11 = *a4;
      if (a5 - *a4 < 2) {
        goto LABEL_21;
      }
      HIDWORD(v12) = v5[1];
      LODWORD(v12) = v9 << 24;
      char v13 = (v12 >> 30) | 0xC0;
LABEL_6:
      *a4 = v11 + 1;
      unsigned char *v11 = v13;
      char v14 = v9 & 0x3F | 0x80;
      uint64_t v15 = (*a4)++;
      unsigned char *v15 = v14;
LABEL_12:
      v5 += 2;
    }
    while (v5 < v7);
  }
  uint64_t result = 0;
LABEL_23:
  *a2 = v5;
  return result;
}

uint64_t little2_toUtf16(uint64_t a1, char **a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5 = *a2;
  int64_t v6 = (a3 - (void)*a2) & 0xFFFFFFFFFFFFFFFELL;
  int v7 = &(*a2)[v6];
  if (v6 <= (uint64_t)(a5 - *a4))
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (*(v7 - 1) & 0xF8) == 216;
    uint64_t v9 = -2;
    if ((*(v7 - 1) & 0xF8) != 0xD8) {
      uint64_t v9 = 0;
    }
    v7 += v9;
  }
  while (v5 < v7)
  {
    unsigned int v10 = (_WORD *)*a4;
    if (*a4 >= a5)
    {
      if (*a4 == a5) {
        return 2;
      }
      return result;
    }
    _WORD *v10 = *(_WORD *)v5;
    *a4 = (unint64_t)(v10 + 1);
    uint64_t v5 = *a2 + 2;
    *a2 = v5;
  }
  return result;
}

uint64_t little2_scanLit(int a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5 = a4 - (void)a3;
  if (a4 - (uint64_t)a3 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v6 = a3[1];
    if (v6 > 0xDB)
    {
      if (v6 == 255)
      {
        if (*a3 > 0xFDu) {
          goto LABEL_20;
        }
      }
      else if (v6 - 220 < 4)
      {
LABEL_20:
        uint64_t result = 0;
        *a5 = a3;
        return result;
      }
      goto LABEL_14;
    }
    if (v6 - 216 >= 4)
    {
      if (!a3[1])
      {
        switch(*(unsigned char *)(a2 + *a3 + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_20;
          case 6:
            if (v5 < 3) {
              return 4294967294;
            }
            int v7 = a3 + 3;
            goto LABEL_15;
          case 7:
            goto LABEL_4;
          case 0xC:
          case 0xD:
            int v7 = a3 + 2;
            if (*(unsigned __int8 *)(a2 + *a3 + 136) != a1) {
              goto LABEL_15;
            }
            if (a4 - (uint64_t)v7 < 2) {
              return 4294967269;
            }
            *a5 = v7;
            if (a3[3]) {
              return 0;
            }
            unsigned int v9 = *(unsigned __int8 *)(a2 + *v7 + 136);
            BOOL v10 = v9 > 0x1E;
            int v11 = (1 << v9) & 0x40300E00;
            if (v10 || v11 == 0) {
              return 0;
            }
            else {
              return 27;
            }
          default:
            break;
        }
      }
LABEL_14:
      int v7 = a3 + 2;
      goto LABEL_15;
    }
LABEL_4:
    if (v5 < 4) {
      return 4294967294;
    }
    int v7 = a3 + 4;
LABEL_15:
    unint64_t v5 = a4 - (void)v7;
    a3 = v7;
    if (a4 - (uint64_t)v7 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
}

uint64_t little2_scanDecl(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  if (!a2[1])
  {
    switch(*(unsigned char *)(a1 + *a2 + 136))
    {
      case 0x14:
        *a4 = a2 + 2;
        return 33;
      case 0x16:
      case 0x18:
        unint64_t v5 = a2 + 2;
        uint64_t v6 = a3 - (void)(a2 + 2);
        if (v6 < 2) {
          return 0xFFFFFFFFLL;
        }
        while (2)
        {
          if (v5[1])
          {
LABEL_20:
            uint64_t v4 = 0;
            *a4 = v5;
          }
          else
          {
            switch(*(unsigned char *)(a1 + *v5 + 136))
            {
              case 0x15:
                goto LABEL_13;
              case 0x16:
              case 0x18:
                v5 += 2;
                v6 -= 2;
                uint64_t v4 = 0xFFFFFFFFLL;
                if (v6 > 1) {
                  continue;
                }
                return v4;
              case 0x17:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
                goto LABEL_20;
              case 0x1E:
                if ((unint64_t)v6 < 4) {
                  return 0xFFFFFFFFLL;
                }
                if (!v5[3])
                {
                  unsigned int v8 = *(unsigned __int8 *)(a1 + v5[2] + 136);
                  BOOL v9 = v8 > 0x1E;
                  int v10 = (1 << v8) & 0x40200600;
                  if (!v9 && v10 != 0) {
                    goto LABEL_20;
                  }
                }
                goto LABEL_13;
              default:
                if (*(unsigned __int8 *)(a1 + *v5 + 136) - 9 >= 2) {
                  goto LABEL_20;
                }
LABEL_13:
                *a4 = v5;
                uint64_t v4 = 16;
                break;
            }
          }
          return v4;
        }
      case 0x1B:
        return little2_scanComment(a1, a2 + 2, a3, a4);
      default:
        break;
    }
  }
  uint64_t v4 = 0;
  *a4 = a2;
  return v4;
}

uint64_t little2_scanPi(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - (void)a2;
  uint64_t v5 = a3 - (void)a2 - 2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v10 - 220) < 4) {
      goto LABEL_7;
    }
    if (v10 == 255)
    {
      LODWORD(v12) = *a2;
      if (v12 > 0xFD) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v10 - 216) < 4) {
    goto LABEL_4;
  }
  if (a2[1])
  {
LABEL_17:
    LODWORD(v12) = *a2;
    goto LABEL_18;
  }
  uint64_t v12 = *a2;
  unsigned int v13 = *(unsigned __int8 *)(a1 + v12 + 136);
  if (v13 <= 0x15)
  {
    if (v13 == 5) {
      goto LABEL_7;
    }
    if (v13 == 6)
    {
      if (v4 < 3) {
        return 4294967294;
      }
      goto LABEL_7;
    }
    if (v13 != 7) {
      goto LABEL_7;
    }
LABEL_4:
    if (v4 < 4) {
      return 4294967294;
    }
LABEL_7:
    uint64_t result = 0;
    *a4 = (uint64_t)a2;
    return result;
  }
  if (v13 != 22 && v13 != 24)
  {
    if (v13 != 29) {
      goto LABEL_7;
    }
LABEL_18:
    if (((namingBitmap[(v12 >> 5) | (8 * nmstrtPages[v10])] >> v12) & 1) == 0) {
      goto LABEL_7;
    }
  }
  if (v5 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = 0;
  unsigned int v25 = 0;
  uint64_t result = 0xFFFFFFFFLL;
  while (1)
  {
    unint64_t v16 = (unint64_t)&a2[v15];
    uint64_t v17 = a2[v15 + 3];
    if (a2[v15 + 3] <= 0xDBu)
    {
      if (!a2[v15 + 3])
      {
        unint64_t v16 = *(unsigned __int8 *)(v16 + 2);
        switch(*(unsigned char *)(a1 + v16 + 136))
        {
          case 5:
            goto LABEL_45;
          case 6:
            if ((unint64_t)v5 >= 3) {
              goto LABEL_45;
            }
            return 4294967294;
          case 7:
            goto LABEL_44;
          case 9:
          case 0xA:
          case 0x15:
            unsigned int v19 = (unsigned __int8 *)&a2[v15];
            uint64_t v20 = (uint64_t)&a2[v15 + 2];
            uint64_t result = little2_checkPiTarget(a2, v20, &v25);
            if (!result)
            {
              *a4 = v20;
              return result;
            }
            unint64_t v21 = v5 - 2;
            if (v5 - 2 < 2) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v18 = v19 + 4;
            uint64_t result = 0xFFFFFFFFLL;
            while (2)
            {
              unsigned int v22 = v18[1];
              if (v22 > 0xDB)
              {
                if (v22 == 255)
                {
                  if (*v18 > 0xFDu) {
                    goto LABEL_41;
                  }
                }
                else if (v22 - 220 < 4)
                {
                  goto LABEL_41;
                }
              }
              else
              {
                if (v22 - 216 < 4)
                {
LABEL_54:
                  if (v21 < 4) {
                    return 4294967294;
                  }
                  uint64_t v23 = v18 + 4;
LABEL_65:
                  unint64_t v21 = a3 - (void)v23;
                  uint64_t v18 = v23;
                  if (a3 - (uint64_t)v23 <= 1) {
                    return result;
                  }
                  continue;
                }
                if (!v18[1])
                {
                  switch(*(unsigned char *)(a1 + *v18 + 136))
                  {
                    case 0:
                    case 1:
                    case 8:
                      goto LABEL_41;
                    case 6:
                      if (v21 < 3) {
                        return 4294967294;
                      }
                      uint64_t v23 = v18 + 3;
                      goto LABEL_65;
                    case 7:
                      goto LABEL_54;
                    case 0xF:
                      uint64_t v23 = v18 + 2;
                      if (a3 - (uint64_t)(v18 + 2) < 2) {
                        return 0xFFFFFFFFLL;
                      }
                      if (v18[3] || *v23 != 62) {
                        goto LABEL_65;
                      }
                      uint64_t v24 = (uint64_t)(v18 + 4);
                      break;
                    default:
                      goto LABEL_64;
                  }
LABEL_79:
                  *a4 = v24;
                  return v25;
                }
              }
              break;
            }
LABEL_64:
            uint64_t v23 = v18 + 2;
            goto LABEL_65;
          case 0xF:
            uint64_t result = little2_checkPiTarget(a2, (uint64_t)&a2[v15 + 2], &v25);
            if (!result)
            {
              *a4 = (uint64_t)&a2[v15 + 2];
              return result;
            }
            if (v5 - 2 < 2) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v18 = (unsigned __int8 *)&a2[v15 + 4];
            if (!a2[v15 + 5] && *v18 == 62)
            {
              uint64_t v24 = (uint64_t)&a2[v15 + 6];
              goto LABEL_79;
            }
            goto LABEL_41;
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
            goto LABEL_38;
          case 0x1D:
            goto LABEL_37;
          default:
            goto LABEL_40;
        }
      }
      if ((v17 - 216) < 4)
      {
LABEL_44:
        if ((unint64_t)v5 >= 4)
        {
LABEL_45:
          uint64_t result = 0;
          uint64_t v18 = (unsigned __int8 *)&a2[v15 + 2];
          goto LABEL_46;
        }
        return 4294967294;
      }
      goto LABEL_36;
    }
    if (v17 == 255)
    {
      LODWORD(v16) = *(unsigned __int8 *)(v16 + 2);
      if (v16 > 0xFD) {
        break;
      }
      goto LABEL_37;
    }
    if ((v17 - 220) < 4) {
      break;
    }
LABEL_36:
    LODWORD(v16) = *(unsigned __int8 *)(v16 + 2);
LABEL_37:
    if (((namingBitmap[(v16 >> 5) | (8 * namePages[v17])] >> v16) & 1) == 0) {
      goto LABEL_45;
    }
LABEL_38:
    v5 -= 2;
    v15 += 2;
    if (v5 <= 1) {
      return result;
    }
  }
LABEL_40:
  uint64_t v18 = (unsigned __int8 *)&a2[v15 + 2];
LABEL_41:
  uint64_t result = 0;
LABEL_46:
  *a4 = (uint64_t)v18;
  return result;
}

uint64_t little2_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) < 4 || v5 == 255 && *a2 > 0xFDu) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((v5 - 216) < 4) {
      goto LABEL_4;
    }
    if (!a2[1])
    {
      uint64_t v6 = 0;
      unsigned int v7 = *(unsigned __int8 *)(a1 + *a2 + 136);
      if (v7 > 0x14)
      {
        switch(*(unsigned char *)(a1 + *a2 + 136))
        {
          case 0x15:
          case 0x1E:
            goto LABEL_35;
          case 0x16:
          case 0x18:
            goto LABEL_15;
          case 0x1D:
            goto LABEL_14;
          default:
            goto LABEL_8;
        }
      }
      if (v7 - 9 < 2)
      {
LABEL_35:
        uint64_t v6 = 22;
        goto LABEL_8;
      }
      if (v7 == 6)
      {
        if (v4 >= 3) {
          goto LABEL_7;
        }
        return 4294967294;
      }
      if (v7 != 7) {
        goto LABEL_8;
      }
LABEL_4:
      if (v4 >= 4) {
        goto LABEL_7;
      }
      return 4294967294;
    }
  }
LABEL_14:
  if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_15:
  a2 += 2;
  uint64_t v8 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v9 = a2[1];
    if (a2[1] <= 0xDBu) {
      break;
    }
    if (v9 == 255)
    {
      LODWORD(v10) = *a2;
      if (v10 > 0xFD) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
    if ((v9 - 220) < 4) {
      goto LABEL_7;
    }
LABEL_25:
    LODWORD(v10) = *a2;
LABEL_26:
    if (((namingBitmap[(v10 >> 5) | (8 * namePages[v9])] >> v10) & 1) == 0) {
      goto LABEL_7;
    }
LABEL_27:
    a2 += 2;
    v8 -= 2;
    uint64_t v6 = 0xFFFFFFFFLL;
    if (v8 <= 1) {
      return v6;
    }
  }
  if (!a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v10 = *a2;
    int v11 = *(unsigned __int8 *)(a1 + v10 + 136);
    switch(*(unsigned char *)(a1 + v10 + 136))
    {
      case 0x12:
        a2 += 2;
        uint64_t v6 = 28;
        goto LABEL_8;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x1C:
        goto LABEL_8;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_27;
      case 0x1D:
        goto LABEL_26;
      default:
        if (v11 != 6)
        {
          if (v11 != 7) {
            goto LABEL_8;
          }
          goto LABEL_40;
        }
        if ((unint64_t)v8 < 3) {
          return 4294967294;
        }
        break;
    }
    goto LABEL_7;
  }
  if ((v9 - 216) >= 4) {
    goto LABEL_25;
  }
LABEL_40:
  if ((unint64_t)v8 < 4) {
    return 4294967294;
  }
LABEL_7:
  uint64_t v6 = 0;
LABEL_8:
  *a4 = a2;
  return v6;
}

uint64_t little2_scanPoundName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) >= 4 && (v5 != 255 || *a2 <= 0xFDu)) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  if ((v5 - 216) < 4) {
    goto LABEL_4;
  }
  if (a2[1]) {
    goto LABEL_21;
  }
  uint64_t v6 = 0;
  unsigned int v8 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v8 <= 0x15)
  {
    if (v8 != 6)
    {
      if (v8 == 7)
      {
LABEL_4:
        if (v4 >= 4) {
          goto LABEL_8;
        }
        return 4294967294;
      }
LABEL_9:
      *a4 = a2;
      return v6;
    }
    if (v4 < 3) {
      return 4294967294;
    }
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  if (v8 == 22 || v8 == 24) {
    goto LABEL_22;
  }
  if (v8 != 29) {
    goto LABEL_9;
  }
LABEL_21:
  if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_22:
  a2 += 2;
  uint64_t v10 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 4294967276;
  }
  while (1)
  {
    uint64_t v11 = a2[1];
    if (a2[1] <= 0xDBu) {
      break;
    }
    if (v11 == 255)
    {
      LODWORD(v12) = *a2;
      if (v12 > 0xFD) {
        goto LABEL_8;
      }
      goto LABEL_33;
    }
    if ((v11 - 220) < 4) {
      goto LABEL_8;
    }
LABEL_32:
    LODWORD(v12) = *a2;
LABEL_33:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v11])] >> v12) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_34:
    a2 += 2;
    v10 -= 2;
    uint64_t v6 = 4294967276;
    if (v10 <= 1) {
      return v6;
    }
  }
  if (!a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v12 = *a2;
    switch(*(unsigned char *)(a1 + v12 + 136))
    {
      case 6:
        if ((unint64_t)v10 >= 3) {
          goto LABEL_8;
        }
        return 4294967294;
      case 7:
        goto LABEL_40;
      case 9:
      case 0xA:
      case 0xB:
      case 0x15:
      case 0x1E:
      case 0x20:
      case 0x24:
        uint64_t v6 = 20;
        goto LABEL_9;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_34;
      case 0x1D:
        goto LABEL_33;
      default:
        goto LABEL_9;
    }
  }
  if ((v11 - 216) >= 4) {
    goto LABEL_32;
  }
LABEL_40:
  if ((unint64_t)v10 >= 4) {
    goto LABEL_8;
  }
  return 4294967294;
}

uint64_t little2_scanComment(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  if (a2[1] || *a2 != 45)
  {
LABEL_26:
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  a2 += 2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v5 = a2[1];
    if (v5 > 0xDB)
    {
      if (v5 == 255)
      {
        if (*a2 > 0xFDu) {
          goto LABEL_26;
        }
      }
      else if (v5 - 220 < 4)
      {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    if (v5 - 216 >= 4) {
      break;
    }
LABEL_7:
    if (v4 < 4) {
      return 4294967294;
    }
    uint64_t v6 = a2 + 4;
LABEL_24:
    unint64_t v4 = a3 - (void)v6;
    uint64_t v7 = 0xFFFFFFFFLL;
    a2 = v6;
    if (a3 - (uint64_t)v6 <= 1) {
      return v7;
    }
  }
  if (a2[1])
  {
LABEL_23:
    uint64_t v6 = a2 + 2;
    goto LABEL_24;
  }
  uint64_t v7 = 0;
  switch(*(unsigned char *)(a1 + *a2 + 136))
  {
    case 0:
    case 1:
    case 8:
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      goto LABEL_23;
    case 6:
      if (v4 < 3) {
        return 4294967294;
      }
      uint64_t v6 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      if (*(unsigned char *)(a1 + *a2 + 136) != 27) {
        goto LABEL_23;
      }
      uint64_t v6 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[3] || *v6 != 45) {
        goto LABEL_24;
      }
      if (a3 - (uint64_t)(a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[5])
      {
        uint64_t v7 = 0;
        a2 += 4;
      }
      else
      {
        int v9 = a2[4];
        if (v9 == 62) {
          a2 += 6;
        }
        else {
          a2 += 4;
        }
        if (v9 == 62) {
          uint64_t v7 = 13;
        }
        else {
          uint64_t v7 = 0;
        }
      }
      break;
  }
LABEL_27:
  *a4 = a2;
  return v7;
}

BOOL little2_checkPiTarget(char *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 11;
  if (a2 - (void)a1 != 6 || a1[1]) {
    return 1;
  }
  int v4 = *a1;
  if (v4 == 120)
  {
    int v5 = 0;
  }
  else
  {
    if (v4 != 88) {
      return 1;
    }
    int v5 = 1;
  }
  if (a1[3]) {
    return 1;
  }
  int v6 = a1[2];
  if (v6 != 109)
  {
    if (v6 != 77) {
      return 1;
    }
    int v5 = 1;
  }
  if (a1[5]) {
    return 1;
  }
  int v7 = a1[4];
  if (v7 == 108)
  {
    if (v5) {
      return 0;
    }
    *a3 = 12;
    return 1;
  }
  return v7 != 76;
}

uint64_t little2_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a2[1];
  if (a2[1] > 0xDBu)
  {
    if ((v5 - 220) < 4 || v5 == 255 && *a2 > 0xFDu) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
  if ((v5 - 216) < 4) {
    goto LABEL_4;
  }
  if (a2[1]) {
    goto LABEL_26;
  }
  uint64_t v6 = 0;
  unsigned int v7 = *(unsigned __int8 *)(a1 + *a2 + 136);
  if (v7 > 0x15)
  {
    if (v7 == 22 || v7 == 24) {
      goto LABEL_27;
    }
    if (v7 != 29) {
      goto LABEL_8;
    }
LABEL_26:
    if (((namingBitmap[(*a2 >> 5) | (8 * nmstrtPages[v5])] >> *a2) & 1) == 0) {
      goto LABEL_7;
    }
LABEL_27:
    a2 += 2;
    uint64_t v4 = a3 - (void)a2;
    if (a3 - (uint64_t)a2 < 2) {
      return 0xFFFFFFFFLL;
    }
    while (1)
    {
      uint64_t v10 = a2[1];
      if (a2[1] > 0xDBu)
      {
        if (v10 == 255)
        {
          LODWORD(v11) = *a2;
          if (v11 > 0xFD) {
            goto LABEL_7;
          }
          goto LABEL_38;
        }
        if ((v10 - 220) < 4) {
          goto LABEL_7;
        }
      }
      else
      {
        if (!a2[1])
        {
          uint64_t v6 = 0;
          uint64_t v11 = *a2;
          int v12 = *(unsigned __int8 *)(a1 + v11 + 136);
          switch(*(unsigned char *)(a1 + v11 + 136))
          {
            case 0x12:
              a2 += 2;
              uint64_t v6 = 9;
              goto LABEL_8;
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x17:
            case 0x1C:
              goto LABEL_8;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              goto LABEL_39;
            case 0x1D:
              goto LABEL_38;
            default:
              if (v12 == 6) {
                goto LABEL_53;
              }
              if (v12 != 7) {
                goto LABEL_8;
              }
              goto LABEL_4;
          }
        }
        if ((v10 - 216) < 4) {
          goto LABEL_4;
        }
      }
      LODWORD(v11) = *a2;
LABEL_38:
      if (((namingBitmap[(v11 >> 5) | (8 * namePages[v10])] >> v11) & 1) == 0) {
        goto LABEL_7;
      }
LABEL_39:
      a2 += 2;
      v4 -= 2;
      uint64_t v6 = 0xFFFFFFFFLL;
      if (v4 <= 1) {
        return v6;
      }
    }
  }
  if (v7 == 6)
  {
LABEL_53:
    if ((unint64_t)v4 < 3) {
      return 4294967294;
    }
    goto LABEL_7;
  }
  if (v7 != 7)
  {
    if (v7 != 19) {
      goto LABEL_8;
    }
    unsigned int v8 = a2 + 2;
    if (a3 - (uint64_t)(a2 + 2) >= 2)
    {
      if (a2[3]) {
        goto LABEL_16;
      }
      uint64_t v13 = *v8;
      if (v13 == 120)
      {
        if (a3 - (uint64_t)(a2 + 4) >= 2)
        {
          if (a2[5] || (*(unsigned char *)(a1 + a2[4] + 136) & 0xFE) != 0x18)
          {
            uint64_t v6 = 0;
            a2 += 4;
            goto LABEL_8;
          }
          a2 += 6;
          uint64_t v14 = a3 - (void)a2;
          if (a3 - (uint64_t)a2 >= 2)
          {
            while (!a2[1])
            {
              int v15 = *(unsigned __int8 *)(a1 + *a2 + 136);
              if ((v15 - 24) >= 2)
              {
                if (v15 != 18) {
                  goto LABEL_7;
                }
                a2 += 2;
                uint64_t v6 = 10;
                goto LABEL_8;
              }
              a2 += 2;
              v14 -= 2;
              uint64_t v6 = 0xFFFFFFFFLL;
              if (v14 <= 1) {
                return v6;
              }
            }
            goto LABEL_7;
          }
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + v13 + 136) != 25)
        {
LABEL_16:
          uint64_t v6 = 0;
LABEL_17:
          a2 = v8;
          goto LABEL_8;
        }
        unsigned int v8 = a2 + 4;
        uint64_t v16 = v4 - 4;
        while (1)
        {
          BOOL v17 = v16 < 2;
          v16 -= 2;
          if (v17) {
            break;
          }
          a2 = v8;
          if (v8[1]) {
            goto LABEL_7;
          }
          v8 += 2;
          int v18 = *(unsigned __int8 *)(a1 + *a2 + 136);
          if (v18 != 25)
          {
            if (v18 != 18) {
              goto LABEL_7;
            }
            uint64_t v6 = 10;
            goto LABEL_17;
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  if ((unint64_t)v4 >= 4)
  {
LABEL_7:
    uint64_t v6 = 0;
LABEL_8:
    *a4 = a2;
    return v6;
  }
  return 4294967294;
}

uint64_t little2_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v32 = a2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  int v8 = 0;
  uint64_t v9 = a3 - 4;
  while (1)
  {
    uint64_t v10 = a2[1];
    if (a2[1] <= 0xDBu) {
      break;
    }
    if (v10 != 255)
    {
      if ((v10 - 220) < 4) {
        goto LABEL_106;
      }
LABEL_21:
      LODWORD(v12) = *a2;
      goto LABEL_22;
    }
    LODWORD(v12) = *a2;
    if (v12 > 0xFD) {
      goto LABEL_106;
    }
LABEL_22:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v10])] >> v12) & 1) == 0) {
      goto LABEL_106;
    }
LABEL_23:
    a2 += 2;
    uint64_t v32 = a2;
LABEL_24:
    unint64_t v4 = a3 - (void)a2;
    if (a3 - (uint64_t)a2 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (a2[1])
  {
    if ((v10 - 216) < 4)
    {
LABEL_101:
      if (v4 >= 4)
      {
LABEL_106:
        uint64_t result = 0;
        goto LABEL_107;
      }
      return 4294967294;
    }
    goto LABEL_21;
  }
  uint64_t result = 0;
  uint64_t v12 = *a2;
  switch(*(unsigned char *)(a1 + v12 + 136))
  {
    case 6:
      if (v4 >= 3) {
        goto LABEL_106;
      }
      return 4294967294;
    case 7:
      goto LABEL_101;
    case 9:
    case 0xA:
    case 0x15:
      a2 += 2;
      uint64_t v13 = a3 - (void)a2;
      if (a3 - (uint64_t)a2 < 2) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        if (a2[1]) {
          goto LABEL_106;
        }
        int v14 = *(unsigned __int8 *)(a1 + *a2 + 136);
        if ((v14 - 9) < 2 || v14 == 21)
        {
          a2 += 2;
          v13 -= 2;
          if (v13 <= 1) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        break;
      }
      if (v14 != 14) {
        goto LABEL_106;
      }
      uint64_t v32 = a2;
LABEL_36:
      uint64_t v16 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      for (uint64_t i = v9 - (void)a2; ; i -= 2)
      {
        if (v16[1]) {
          goto LABEL_113;
        }
        unsigned int v22 = *(unsigned __int8 *)(a1 + *v16 + 136);
        if ((v22 & 0xFE) == 0xC) {
          break;
        }
        if (v22 > 0x15 || ((1 << v22) & 0x200600) == 0) {
          goto LABEL_113;
        }
        v16 += 2;
        uint64_t result = 0xFFFFFFFFLL;
        if (i <= 1) {
          return result;
        }
      }
      v16 += 2;
      uint64_t v32 = v16;
      if (i < 2) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        unsigned int v25 = v16[1];
        if (v25 > 0xDB)
        {
          if (v25 - 220 < 4)
          {
            int v26 = 8;
            goto LABEL_62;
          }
          if (v25 == 255 && *v16 > 0xFDu)
          {
            int v26 = 0;
            goto LABEL_62;
          }
        }
        else
        {
          if (v25 - 216 < 4)
          {
            int v26 = 7;
            goto LABEL_62;
          }
          if (!v16[1])
          {
            int v26 = *(unsigned __int8 *)(a1 + *v16 + 136);
            goto LABEL_62;
          }
        }
        int v26 = 29;
LABEL_62:
        if (v26 == v22)
        {
          a2 = v16 + 2;
          uint64_t v32 = v16 + 2;
          if (a3 - (uint64_t)(v16 + 2) < 2) {
            return 0xFFFFFFFFLL;
          }
          if (v16[3]) {
            goto LABEL_106;
          }
          uint64_t result = 0;
          unsigned int v27 = *(unsigned __int8 *)(a1 + *a2 + 136);
          if (v27 <= 0xA)
          {
            if (v27 - 9 >= 2) {
              goto LABEL_107;
            }
            goto LABEL_88;
          }
          if (v27 == 21)
          {
LABEL_88:
            a2 = v16 + 4;
            uint64_t v28 = a3 - (void)(v16 + 4);
            if (v28 < 2) {
              return 0xFFFFFFFFLL;
            }
            while (2)
            {
              int v29 = a2[1];
              if (!a2[1])
              {
                uint64_t result = 0;
                switch(*(unsigned char *)(a1 + *a2 + 136))
                {
                  case 6:
                    if ((unint64_t)v28 >= 3) {
                      goto LABEL_106;
                    }
                    return 4294967294;
                  case 7:
                    goto LABEL_103;
                  case 9:
                  case 0xA:
                  case 0x15:
                    a2 += 2;
                    v28 -= 2;
                    uint64_t result = 0xFFFFFFFFLL;
                    if (v28 <= 1) {
                      return result;
                    }
                    continue;
                  case 0xB:
                    goto LABEL_128;
                  case 0x11:
                    goto LABEL_118;
                  case 0x16:
                  case 0x18:
                    goto LABEL_100;
                  case 0x1D:
                    goto LABEL_98;
                  default:
                    goto LABEL_107;
                }
              }
              break;
            }
            if ((v29 - 216) < 4)
            {
LABEL_103:
              if ((unint64_t)v28 >= 4) {
                goto LABEL_106;
              }
              return 4294967294;
            }
            if ((v29 - 220) < 4) {
              goto LABEL_106;
            }
            if (v29 == 255)
            {
              uint64_t v32 = a2;
              unsigned int v30 = *a2;
              if (v30 > 0xFD) {
                goto LABEL_106;
              }
            }
            else
            {
LABEL_98:
              uint64_t v32 = a2;
              unsigned int v30 = *a2;
            }
            if (((namingBitmap[(v30 >> 5) | (8 * nmstrtPages[a2[1]])] >> v30) & 1) == 0) {
              goto LABEL_106;
            }
LABEL_100:
            int v8 = 0;
            goto LABEL_23;
          }
          if (v27 == 11)
          {
LABEL_128:
            a2 += 2;
            uint64_t result = 1;
            goto LABEL_107;
          }
          if (v27 != 17)
          {
LABEL_107:
            *a4 = a2;
            return result;
          }
LABEL_118:
          uint64_t v16 = a2 + 2;
          uint64_t v32 = a2 + 2;
          if (a3 - (uint64_t)(a2 + 2) >= 2)
          {
            if (!a2[3])
            {
              int v31 = a2[2];
              if (v31 == 62) {
                a2 += 4;
              }
              else {
                a2 += 2;
              }
              if (v31 == 62) {
                uint64_t result = 3;
              }
              else {
                uint64_t result = 0;
              }
              goto LABEL_107;
            }
            goto LABEL_113;
          }
          return 0xFFFFFFFFLL;
        }
        switch(v26)
        {
          case 0:
          case 1:
          case 2:
          case 8:
            goto LABEL_113;
          case 3:
            uint64_t result = little2_scanRef(a1, v16 + 2, a3, &v32);
            if ((int)result >= 1)
            {
              uint64_t v16 = v32;
LABEL_72:
              uint64_t i = a3 - (void)v16;
              uint64_t result = 0xFFFFFFFFLL;
              if (a3 - (uint64_t)v16 <= 1) {
                return result;
              }
              continue;
            }
            if (!result)
            {
              a2 = v32;
              goto LABEL_107;
            }
            return result;
          case 6:
            if ((unint64_t)i < 3) {
              return 4294967294;
            }
            v16 += 3;
            goto LABEL_71;
          case 7:
            if ((unint64_t)i < 4) {
              return 4294967294;
            }
            v16 += 4;
            goto LABEL_71;
          default:
            v16 += 2;
LABEL_71:
            uint64_t v32 = v16;
            goto LABEL_72;
        }
      }
    case 0xE:
      goto LABEL_36;
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
      goto LABEL_23;
    case 0x17:
      if (v8) {
        goto LABEL_106;
      }
      uint64_t v16 = a2 + 2;
      uint64_t v32 = a2 + 2;
      uint64_t v17 = a3 - (void)(a2 + 2);
      if (v17 < 2) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v18 = a2[3];
      if (a2[3] > 0xDBu)
      {
        if (v18 == 255)
        {
          LODWORD(v19) = *v16;
          if (v19 > 0xFD) {
            goto LABEL_113;
          }
LABEL_78:
          if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v18])] >> v19) & 1) == 0) {
            goto LABEL_113;
          }
          goto LABEL_79;
        }
        if ((v18 - 220) < 4) {
          goto LABEL_113;
        }
      }
      else
      {
        if (!a2[3])
        {
          uint64_t v19 = *v16;
          unsigned int v20 = *(unsigned __int8 *)(a1 + v19 + 136);
          if (v20 <= 0x17)
          {
            if (v20 != 22)
            {
              if (v20 == 6)
              {
                if ((unint64_t)v17 < 3) {
                  return 4294967294;
                }
              }
              else if (v20 == 7)
              {
LABEL_112:
                if ((unint64_t)v17 < 4) {
                  return 4294967294;
                }
              }
LABEL_113:
              uint64_t result = 0;
              a2 = v16;
              goto LABEL_107;
            }
          }
          else if (v20 != 24)
          {
            if (v20 != 29) {
              goto LABEL_113;
            }
            goto LABEL_78;
          }
LABEL_79:
          a2 += 4;
          uint64_t v32 = a2;
          int v8 = 1;
          goto LABEL_24;
        }
        if ((v18 - 216) < 4) {
          goto LABEL_112;
        }
      }
      LODWORD(v19) = *v16;
      goto LABEL_78;
    case 0x1D:
      goto LABEL_22;
    default:
      goto LABEL_107;
  }
}

BOOL streqci(unsigned __int8 *a1, unsigned __int8 *a2)
{
  do
  {
    int v3 = *a1++;
    int v2 = v3;
    int v5 = *a2++;
    int v4 = v5;
    if ((v2 - 97) < 0x1A) {
      LOBYTE(v2) = v2 - 32;
    }
    if ((v4 - 97) < 0x1A) {
      LOBYTE(v4) = v4 - 32;
    }
    if (v2 == v4) {
      int v6 = 2 * (v2 == 0);
    }
    else {
      int v6 = 1;
    }
  }
  while (!v6);
  return v6 == 2;
}

uint64_t initScan(void *a1, uint64_t a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5, void *a6)
{
  if (a4 >= a5) {
    return 4294967292;
  }
  int v6 = *(uint64_t (****)(void))(a2 + 136);
  if (a4 + 1 == a5)
  {
    if ((*(char *)(a2 + 133) - 3) < 3) {
      return 0xFFFFFFFFLL;
    }
    int v12 = *a4;
    if ((v12 - 239) <= 0x10 && ((1 << (v12 + 17)) & 0x18001) != 0)
    {
      uint64_t v10 = 0xFFFFFFFFLL;
      if (a3 != 1 || *(unsigned char *)(a2 + 133)) {
        return v10;
      }
    }
    else
    {
      uint64_t v10 = 0xFFFFFFFFLL;
      if (!*a4 || v12 == 60) {
        return v10;
      }
    }
LABEL_45:
    uint64_t v16 = (uint64_t (**)(void))a1[*(char *)(a2 + 133)];
    goto LABEL_46;
  }
  int v7 = a4[1] | (*a4 << 8);
  if (v7 > 65278)
  {
    if (v7 == 65534)
    {
      if (a3 != 1 || *(unsigned char *)(a2 + 133))
      {
        *a6 = a4 + 2;
        uint64_t v9 = (uint64_t (**)(void))a1[5];
        goto LABEL_32;
      }
      goto LABEL_45;
    }
    if (v7 == 65279)
    {
      if (a3 != 1 || *(unsigned char *)(a2 + 133))
      {
        *a6 = a4 + 2;
        uint64_t v9 = (uint64_t (**)(void))a1[4];
        goto LABEL_32;
      }
      goto LABEL_45;
    }
  }
  else
  {
    if (v7 == 15360)
    {
      int v13 = *(unsigned __int8 *)(a2 + 133);
      if (v13 == 4)
      {
        if (a3 == 1) {
          goto LABEL_45;
        }
      }
      else if (a3 == 1 && v13 == 3)
      {
        goto LABEL_45;
      }
      uint64_t v16 = (uint64_t (**)(void))a1[5];
LABEL_46:
      *int v6 = v16;
      int v15 = v16[a3];
      return v15();
    }
    if (v7 == 61371)
    {
      if (a3 != 1 || (unsigned int v8 = *(unsigned __int8 *)(a2 + 133), v8 > 5) || ((1 << v8) & 0x39) == 0)
      {
        if (a4 + 2 != a5)
        {
          if (a4[2] == 191)
          {
            *a6 = a4 + 3;
            uint64_t v9 = (uint64_t (**)(void))a1[2];
LABEL_32:
            *int v6 = v9;
            return 14;
          }
          goto LABEL_45;
        }
        return 0xFFFFFFFFLL;
      }
      goto LABEL_45;
    }
  }
  if (!*a4)
  {
    if (a3 != 1 || *(unsigned char *)(a2 + 133) != 5)
    {
      uint64_t v16 = (uint64_t (**)(void))a1[4];
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (a3 == 1 || a4[1]) {
    goto LABEL_45;
  }
  int v14 = (uint64_t (**)(void))a1[5];
  *int v6 = v14;
  int v15 = *v14;
  return v15();
}

uint64_t ascii_toUtf8(uint64_t a1, char **a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  while (1)
  {
    int v5 = *a2;
    if ((unint64_t)*a2 >= a3) {
      return 0;
    }
    if (*a4 >= a5) {
      break;
    }
    *a2 = v5 + 1;
    char v6 = *v5;
    int v7 = (unsigned char *)(*a4)++;
    unsigned char *v7 = v6;
  }
  if (*a4 != a5) {
    return 0;
  }
  return 2;
}

uint64_t big2_prologTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t *a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if (((a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL) == 0 || ((a3 - (void)a2) & 1) == 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = (uint64_t)&a2[(a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL];
  }
  if (a3 - (void)a2 == 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v9 - 220) < 4) {
      goto LABEL_16;
    }
    if (v9 == 255)
    {
      LODWORD(v10) = a2[1];
      if (v10 > 0xFD) {
        goto LABEL_16;
      }
      goto LABEL_29;
    }
  }
  else
  {
    if ((v9 - 216) < 4)
    {
LABEL_13:
      if (v6 - (uint64_t)a2 < 4) {
        return 4294967294;
      }
LABEL_16:
      uint64_t result = 0;
      *a4 = (uint64_t)a2;
      return result;
    }
    if (!*a2)
    {
      uint64_t v10 = a2[1];
      int v11 = *(unsigned __int8 *)(a1 + v10 + 136) - 2;
      uint64_t result = 18;
      switch(v11)
      {
        case 0:
          int v12 = a2 + 2;
          if (v6 - (uint64_t)(a2 + 2) < 2) {
            return 0xFFFFFFFFLL;
          }
          int v13 = *v12;
          unsigned int v14 = v13 - 220;
          if ((v13 - 220) < 4) {
            goto LABEL_112;
          }
          if (*v12)
          {
            if (v13 != 255 || a2[3] <= 0xFDu)
            {
LABEL_139:
              *a4 = (uint64_t)a2;
              return 29;
            }
          }
          else
          {
            int v37 = *(unsigned __int8 *)(a1 + a2[3] + 136);
            if (v14 <= 4)
            {
              switch(*(unsigned char *)(a1 + a2[3] + 136))
              {
                case 0xF:
                  return big2_scanPi(a1, a2 + 4, v6, a4);
                case 0x10:
                  return big2_scanDecl(a1, a2 + 4, v6, a4);
                case 0x11:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x17:
                  goto LABEL_112;
                case 0x16:
                case 0x18:
                  goto LABEL_139;
                default:
                  JUMPOUT(0);
              }
            }
            if ((v37 - 5) < 3 || v37 == 29) {
              goto LABEL_139;
            }
          }
LABEL_112:
          uint64_t result = 0;
          *a4 = (uint64_t)v12;
          return result;
        case 2:
          unsigned int v27 = a2 + 2;
          uint64_t v28 = v6 - (void)(a2 + 2);
          if (v28 < 2) {
            return 4294967270;
          }
          if (*v27 || a2[3] != 93) {
            goto LABEL_117;
          }
          if ((unint64_t)v28 < 4) {
            return 0xFFFFFFFFLL;
          }
          if (a2[4] || a2[5] != 62)
          {
LABEL_117:
            *a4 = (uint64_t)v27;
            return 26;
          }
          else
          {
            *a4 = (uint64_t)(a2 + 6);
            return 34;
          }
        case 3:
          if (v6 - (uint64_t)a2 >= 2) {
            goto LABEL_16;
          }
          return 4294967294;
        case 4:
          if (v6 - (uint64_t)a2 >= 3) {
            goto LABEL_16;
          }
          return 4294967294;
        case 5:
          goto LABEL_13;
        case 7:
          if (a2 + 2 != (unsigned __int8 *)v6) {
            goto LABEL_90;
          }
          *a4 = v6;
          return 4294967281;
        case 8:
        case 19:
LABEL_90:
          int v29 = a2 + 2;
          uint64_t v30 = v6 - (void)(a2 + 2);
          if (v30 >= 2)
          {
            do
            {
              if (*v29) {
                break;
              }
              int v31 = *(unsigned __int8 *)(a1 + v29[1] + 136);
              if (v31 != 21 && v31 != 10 && (v31 != 9 || v29 + 2 == (unsigned char *)v6)) {
                break;
              }
              v29 += 2;
              v30 -= 2;
            }
            while (v30 > 1);
          }
          *a4 = (uint64_t)v29;
          return 15;
        case 9:
          *a4 = (uint64_t)(a2 + 2);
          return 17;
        case 10:
          uint64_t v34 = a2 + 2;
          int v35 = 12;
          return big2_scanLit(v35, a1, v34, v6, (unsigned __int8 **)a4);
        case 11:
          uint64_t v34 = a2 + 2;
          int v35 = 13;
          return big2_scanLit(v35, a1, v34, v6, (unsigned __int8 **)a4);
        case 17:
          return big2_scanPoundName(a1, a2 + 2, v6, a4);
        case 18:
          *a4 = (uint64_t)(a2 + 2);
          return 25;
        case 20:
        case 22:
          goto LABEL_33;
        case 21:
        case 23:
        case 24:
        case 25:
          goto LABEL_32;
        case 27:
          goto LABEL_29;
        case 28:
          return big2_scanPercent(a1, a2 + 2, v6, a4);
        case 29:
          *a4 = (uint64_t)(a2 + 2);
          return 23;
        case 30:
          int v12 = a2 + 2;
          if (v6 - (uint64_t)(a2 + 2) < 2) {
            return 4294967272;
          }
          if (*v12) {
            goto LABEL_112;
          }
          int v36 = *(unsigned __int8 *)(a1 + a2[3] + 136);
          if (v36 <= 31)
          {
            if ((v36 - 9) >= 3)
            {
              if (v36 == 15)
              {
                *a4 = (uint64_t)(a2 + 4);
                return 35;
              }
              if (v36 != 21) {
                goto LABEL_112;
              }
            }
LABEL_133:
            *a4 = (uint64_t)v12;
            return 24;
          }
          switch(v36)
          {
            case ' ':
            case '#':
            case '$':
              goto LABEL_133;
            case '!':
              *a4 = (uint64_t)(a2 + 4);
              uint64_t result = 36;
              break;
            case '""':
              *a4 = (uint64_t)(a2 + 4);
              uint64_t result = 37;
              break;
            default:
              goto LABEL_112;
          }
          return result;
        case 33:
          *a4 = (uint64_t)(a2 + 2);
          return 38;
        case 34:
          *a4 = (uint64_t)(a2 + 2);
          return 21;
        default:
          goto LABEL_16;
      }
    }
  }
  LODWORD(v10) = a2[1];
LABEL_29:
  unsigned int v15 = v10 >> 5;
  int v16 = namingBitmap[(v10 >> 5) | (8 * nmstrtPages[v9])];
  int v17 = 1 << v10;
  if ((v17 & v16) != 0)
  {
    uint64_t result = 18;
  }
  else
  {
    if ((namingBitmap[v15 | (8 * namePages[v9])] & v17) == 0) {
      goto LABEL_16;
    }
LABEL_32:
    uint64_t result = 19;
  }
LABEL_33:
  uint64_t v18 = a2 + 2;
  uint64_t v19 = v6 - (void)(a2 + 2);
  if (v19 < 2) {
    return -(int)result;
  }
  while (1)
  {
    uint64_t v20 = *v18;
    if (*v18 > 0xDBu)
    {
      if (v20 == 255)
      {
        LODWORD(v21) = v18[1];
        if (v21 > 0xFD) {
          goto LABEL_76;
        }
        goto LABEL_50;
      }
      if ((v20 - 220) < 4) {
        goto LABEL_76;
      }
LABEL_49:
      LODWORD(v21) = v18[1];
LABEL_50:
      if (((namingBitmap[(v21 >> 5) | (8 * namePages[v20])] >> v21) & 1) == 0) {
        goto LABEL_76;
      }
LABEL_51:
      unsigned int v22 = v18 + 2;
      goto LABEL_52;
    }
    if (*v18) {
      break;
    }
    uint64_t v21 = v18[1];
    switch(*(unsigned char *)(a1 + v21 + 136))
    {
      case 6:
        if ((unint64_t)v19 >= 3) {
          goto LABEL_76;
        }
        return 4294967294;
      case 7:
        goto LABEL_75;
      case 9:
      case 0xA:
      case 0xB:
      case 0x14:
      case 0x15:
      case 0x1E:
      case 0x20:
      case 0x23:
      case 0x24:
        goto LABEL_77;
      case 0xF:
        if (result == 19) {
          goto LABEL_76;
        }
        *a4 = (uint64_t)(v18 + 2);
        return 30;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_51;
      case 0x17:
        unsigned int v22 = v18 + 2;
        if (result == 41) {
          goto LABEL_42;
        }
        if (result != 18) {
          break;
        }
        unint64_t v23 = v6 - (void)v22;
        if (v6 - (uint64_t)v22 < 2) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v24 = *v22;
        if (*v22 > 0xDBu)
        {
          if ((v24 - 220) < 4) {
            goto LABEL_42;
          }
          if (v24 == 255)
          {
            LODWORD(v25) = v18[3];
            if (v25 > 0xFD)
            {
LABEL_42:
              uint64_t result = 19;
              break;
            }
            goto LABEL_64;
          }
LABEL_63:
          LODWORD(v25) = v18[3];
          goto LABEL_64;
        }
        if (*v22)
        {
          if ((v24 - 216) < 4) {
            goto LABEL_72;
          }
          goto LABEL_63;
        }
        uint64_t v25 = v18[3];
        unsigned int v26 = *(unsigned __int8 *)(a1 + v25 + 136);
        uint64_t result = 19;
        if (v26 > 0x17)
        {
          if (v26 - 24 >= 4)
          {
            if (v26 != 29) {
              break;
            }
LABEL_64:
            if (((namingBitmap[(v25 >> 5) | (8 * namePages[v24])] >> v25) & 1) == 0) {
              goto LABEL_73;
            }
          }
LABEL_65:
          unsigned int v22 = v18 + 4;
          uint64_t result = 41;
          break;
        }
        if (*(unsigned __int8 *)(a1 + v25 + 136) <= 0x15u)
        {
          switch(v26)
          {
            case 5u:
              goto LABEL_73;
            case 6u:
              if (v23 >= 3)
              {
LABEL_73:
                uint64_t result = 0;
                *a4 = (uint64_t)v22;
                return result;
              }
              return 4294967294;
            case 7u:
LABEL_72:
              if (v23 >= 4) {
                goto LABEL_73;
              }
              return 4294967294;
          }
        }
        else if (v26 == 22)
        {
          goto LABEL_65;
        }
        break;
      case 0x1D:
        goto LABEL_50;
      case 0x21:
        if (result == 19) {
          goto LABEL_76;
        }
        *a4 = (uint64_t)(v18 + 2);
        return 31;
      case 0x22:
        if (result == 19) {
          goto LABEL_76;
        }
        *a4 = (uint64_t)(v18 + 2);
        return 32;
      default:
        goto LABEL_76;
    }
LABEL_52:
    uint64_t v19 = v6 - (void)v22;
    uint64_t v18 = v22;
    if (v6 - (uint64_t)v22 <= 1) {
      return -(int)result;
    }
  }
  if ((v20 - 216) >= 4) {
    goto LABEL_49;
  }
LABEL_75:
  if ((unint64_t)v19 < 4) {
    return 4294967294;
  }
LABEL_76:
  uint64_t result = 0;
LABEL_77:
  *a4 = (uint64_t)v18;
  return result;
}

uint64_t big2_contentTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  char v4 = a3 - (_BYTE)a2;
  unint64_t v5 = (a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v5) {
    BOOL v6 = ((a3 - (void)a2) & 1) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    a3 = (unint64_t)&a2[v5];
  }
  if ((v4 & 1) != 0 && !v5) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = *a2;
  if (v9 > 0xDB)
  {
    if (v9 - 220 < 4 || v9 == 255 && a2[1] > 0xFDu)
    {
LABEL_17:
      uint64_t v7 = 0;
      *a4 = a2;
      return v7;
    }
    goto LABEL_28;
  }
  if (v9 - 216 < 4)
  {
LABEL_14:
    if ((uint64_t)(a3 - (void)a2) < 4) {
      return 4294967294;
    }
    uint64_t v10 = a2 + 4;
    goto LABEL_29;
  }
  if (*a2)
  {
LABEL_28:
    uint64_t v10 = a2 + 2;
LABEL_29:
    unint64_t v14 = a3 - (void)v10;
    if ((uint64_t)(a3 - (void)v10) < 2)
    {
      int v16 = v10;
LABEL_53:
      *a4 = v16;
      return 6;
    }
    while (1)
    {
      unsigned int v15 = *v10;
      if (v15 > 0xDB) {
        break;
      }
      if (v15 - 216 >= 4)
      {
        if (!*v10)
        {
          switch(*(unsigned char *)(a1 + v10[1] + 136))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 8:
            case 9:
            case 0xA:
              goto LABEL_54;
            case 4:
              if (v14 < 4) {
                goto LABEL_54;
              }
              int v16 = v10 + 2;
              if (v10[2] || v10[3] != 93) {
                goto LABEL_48;
              }
              if (v14 < 6) {
                goto LABEL_54;
              }
              if (v10[4] || v10[5] != 62) {
                goto LABEL_48;
              }
              uint64_t v7 = 0;
              int v11 = v10 + 4;
              break;
            case 6:
              if (v14 <= 2) {
                goto LABEL_54;
              }
              int v16 = v10 + 3;
              goto LABEL_48;
            case 7:
              goto LABEL_32;
            default:
              goto LABEL_47;
          }
          goto LABEL_79;
        }
        goto LABEL_47;
      }
LABEL_32:
      if (v14 <= 3) {
        goto LABEL_54;
      }
      int v16 = v10 + 4;
LABEL_48:
      unint64_t v14 = a3 - (void)v16;
      uint64_t v10 = v16;
      if ((uint64_t)(a3 - (void)v16) <= 1) {
        goto LABEL_53;
      }
    }
    if (v15 == 255)
    {
      if (v10[1] > 0xFDu) {
        goto LABEL_54;
      }
    }
    else if (v15 - 220 < 4)
    {
LABEL_54:
      *a4 = v10;
      return 6;
    }
LABEL_47:
    int v16 = v10 + 2;
    goto LABEL_48;
  }
  switch(*(unsigned char *)(a1 + a2[1] + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_17;
    case 2:
      int v11 = a2 + 2;
      uint64_t v12 = a3 - (void)(a2 + 2);
      if (v12 < 2) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v13 = *v11;
      if (*v11 > 0xDBu)
      {
        if ((v13 - 220) < 4) {
          goto LABEL_78;
        }
        if (v13 == 255)
        {
          LODWORD(v19) = a2[3];
          if (v19 > 0xFD) {
            goto LABEL_78;
          }
          goto LABEL_88;
        }
LABEL_87:
        LODWORD(v19) = a2[3];
LABEL_88:
        if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v13])] >> v19) & 1) == 0) {
          goto LABEL_78;
        }
LABEL_89:
        uint64_t v20 = a2 + 4;
        uint64_t v21 = a3 - (void)(a2 + 4);
        if (v21 < 2) {
          return 0xFFFFFFFFLL;
        }
        int v22 = 0;
        while (1)
        {
          uint64_t v23 = *v20;
          if (*v20 > 0xDBu) {
            break;
          }
          if (*v20)
          {
            if ((v23 - 216) < 4)
            {
LABEL_124:
              if ((unint64_t)v21 >= 4)
              {
LABEL_125:
                uint64_t v7 = 0;
                *a4 = v20;
                return v7;
              }
              return 4294967294;
            }
LABEL_109:
            LODWORD(v24) = v20[1];
            goto LABEL_110;
          }
          uint64_t v24 = v20[1];
          uint64_t v25 = 2;
          switch(*(unsigned char *)(a1 + v24 + 136))
          {
            case 6:
              if ((unint64_t)v21 >= 3) {
                goto LABEL_125;
              }
              return 4294967294;
            case 7:
              goto LABEL_124;
            case 9:
            case 0xA:
            case 0x15:
              uint64_t v35 = a3 - (void)v20 - 2;
              if (v35 < 2) {
                return 0xFFFFFFFFLL;
              }
              int v36 = v20 + 4;
              while (2)
              {
                uint64_t v37 = *(v36 - 2);
                if (!*(v36 - 2))
                {
                  uint64_t v38 = *(v36 - 1);
                  switch(*(unsigned char *)(a1 + v38 + 136))
                  {
                    case 6:
                      if ((unint64_t)v35 >= 3) {
                        goto LABEL_220;
                      }
                      return 4294967294;
                    case 7:
                      goto LABEL_195;
                    case 9:
                    case 0xA:
                    case 0x15:
                      v35 -= 2;
                      v36 += 2;
                      uint64_t v7 = 0xFFFFFFFFLL;
                      if (v35 <= 1) {
                        return v7;
                      }
                      continue;
                    case 0xB:
                      uint64_t v20 = v36 - 2;
                      goto LABEL_211;
                    case 0x11:
                      uint64_t v20 = v36 - 2;
                      goto LABEL_213;
                    case 0x16:
                    case 0x18:
                      return big2_scanAtts(a1, v36, a3, a4);
                    case 0x1D:
                      uint64_t v37 = 0;
                      goto LABEL_218;
                    default:
                      goto LABEL_220;
                  }
                }
                break;
              }
              if ((v37 - 216) < 4)
              {
LABEL_195:
                if ((unint64_t)v35 < 4) {
                  return 4294967294;
                }
              }
              else
              {
                if ((v37 - 220) < 4) {
                  goto LABEL_220;
                }
                if (v37 == 255)
                {
                  LODWORD(v38) = *(v36 - 1);
                  if (v38 > 0xFD) {
                    goto LABEL_220;
                  }
                  uint64_t v37 = 0xFFu;
                }
                else
                {
                  LODWORD(v38) = *(v36 - 1);
                }
LABEL_218:
                if ((namingBitmap[(v38 >> 5) | (8 * nmstrtPages[v37])] >> v38)) {
                  return big2_scanAtts(a1, v36, a3, a4);
                }
              }
LABEL_220:
              uint64_t v7 = 0;
              int v11 = v36 - 2;
              goto LABEL_79;
            case 0xB:
LABEL_211:
              *a4 = v20 + 2;
              return 2;
            case 0x11:
LABEL_213:
              int v11 = v20 + 2;
              if ((uint64_t)(a3 - (void)(v20 + 2)) < 2) {
                return 0xFFFFFFFFLL;
              }
              if (*v11 || v20[3] != 62) {
                goto LABEL_78;
              }
              *a4 = v20 + 4;
              return 4;
            case 0x16:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
              break;
            case 0x17:
              if (v22) {
                goto LABEL_125;
              }
              unsigned int v26 = v20 + 2;
              uint64_t v27 = a3 - (void)(v20 + 2);
              if (v27 < 2) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v28 = *v26;
              if (*v26 > 0xDBu)
              {
                if (v28 == 255)
                {
                  LODWORD(v29) = v20[3];
                  if (v29 > 0xFD) {
                    goto LABEL_174;
                  }
                  goto LABEL_121;
                }
                if ((v28 - 220) < 4) {
                  goto LABEL_174;
                }
                goto LABEL_120;
              }
              if (*v26)
              {
                if ((v28 - 216) < 4) {
                  goto LABEL_146;
                }
LABEL_120:
                LODWORD(v29) = v20[3];
LABEL_121:
                if (((namingBitmap[(v29 >> 5) | (8 * nmstrtPages[v28])] >> v29) & 1) == 0) {
                  goto LABEL_174;
                }
                int v22 = 1;
LABEL_123:
                uint64_t v25 = 4;
                break;
              }
              uint64_t v29 = v20[3];
              unsigned int v30 = *(unsigned __int8 *)(a1 + v29 + 136);
              if (v30 <= 0x15)
              {
                if (v30 != 5)
                {
                  if (v30 == 6)
                  {
                    if ((unint64_t)v27 < 3) {
                      return 4294967294;
                    }
                  }
                  else if (v30 == 7)
                  {
LABEL_146:
                    if ((unint64_t)v27 < 4) {
                      return 4294967294;
                    }
                  }
                }
LABEL_174:
                uint64_t v7 = 0;
                *a4 = v26;
                return v7;
              }
              int v22 = 1;
              if (v30 == 22) {
                goto LABEL_123;
              }
              uint64_t v25 = 4;
              if (v30 != 24)
              {
                if (v30 != 29) {
                  goto LABEL_174;
                }
                goto LABEL_121;
              }
              break;
            case 0x1D:
              goto LABEL_110;
            default:
              goto LABEL_125;
          }
LABEL_112:
          v20 += v25;
          uint64_t v21 = a3 - (void)v20;
          uint64_t v7 = 0xFFFFFFFFLL;
          if ((uint64_t)(a3 - (void)v20) <= 1) {
            return v7;
          }
        }
        if (v23 != 255)
        {
          if ((v23 - 220) < 4) {
            goto LABEL_125;
          }
          goto LABEL_109;
        }
        LODWORD(v24) = v20[1];
        if (v24 > 0xFD) {
          goto LABEL_125;
        }
LABEL_110:
        if (((namingBitmap[(v24 >> 5) | (8 * namePages[v23])] >> v24) & 1) == 0) {
          goto LABEL_125;
        }
        uint64_t v25 = 2;
        goto LABEL_112;
      }
      if ((v13 - 216) < 4)
      {
LABEL_24:
        if ((unint64_t)v12 < 4) {
          return 4294967294;
        }
LABEL_78:
        uint64_t v7 = 0;
        goto LABEL_79;
      }
      if (*v11) {
        goto LABEL_87;
      }
      uint64_t v19 = a2[3];
      switch(*(unsigned char *)(a1 + v19 + 136))
      {
        case 5:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x17:
          goto LABEL_78;
        case 6:
          if ((unint64_t)v12 >= 3) {
            goto LABEL_78;
          }
          return 4294967294;
        case 7:
          goto LABEL_24;
        case 0xF:
          return big2_scanPi(a1, a2 + 4, a3, (uint64_t *)a4);
        case 0x10:
          int v11 = a2 + 4;
          if ((uint64_t)(a3 - (void)(a2 + 4)) < 2) {
            return 0xFFFFFFFFLL;
          }
          if (*v11) {
            goto LABEL_78;
          }
          int v31 = *(unsigned __int8 *)(a1 + a2[5] + 136);
          if (v31 != 20)
          {
            if (v31 != 27) {
              goto LABEL_78;
            }
            return big2_scanComment(a1, a2 + 6, a3, a4);
          }
          int v11 = a2 + 6;
          if ((uint64_t)(a3 - (void)(a2 + 6)) < 12) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v40 = 0;
          while (!*v11 && v11[1] == big2_scanCdataSection_CDATA_LSQB[v40])
          {
            ++v40;
            v11 += 2;
            if (v40 == 6)
            {
              uint64_t v7 = 8;
              int v11 = a2 + 18;
              goto LABEL_79;
            }
          }
          goto LABEL_78;
        case 0x11:
          int v11 = a2 + 4;
          uint64_t v32 = a3 - (void)(a2 + 4);
          if (v32 < 2) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v33 = *v11;
          if (*v11 > 0xDBu)
          {
            if ((v33 - 220) < 4) {
              goto LABEL_78;
            }
            if (v33 == 255)
            {
              LODWORD(v34) = a2[5];
              if (v34 > 0xFD) {
                goto LABEL_78;
              }
              goto LABEL_176;
            }
LABEL_175:
            LODWORD(v34) = a2[5];
            goto LABEL_176;
          }
          if ((v33 - 216) < 4)
          {
LABEL_137:
            if ((unint64_t)v32 < 4) {
              return 4294967294;
            }
            goto LABEL_78;
          }
          if (*v11) {
            goto LABEL_175;
          }
          uint64_t v7 = 0;
          uint64_t v34 = a2[5];
          unsigned int v39 = *(unsigned __int8 *)(a1 + v34 + 136);
          if (v39 <= 0x15)
          {
            if (v39 == 6)
            {
              if ((unint64_t)v32 < 3) {
                return 4294967294;
              }
              goto LABEL_78;
            }
            if (v39 != 7) {
              goto LABEL_79;
            }
            goto LABEL_137;
          }
          if (v39 != 22 && v39 != 24)
          {
            if (v39 != 29) {
              goto LABEL_79;
            }
LABEL_176:
            if (((namingBitmap[(v34 >> 5) | (8 * nmstrtPages[v33])] >> v34) & 1) == 0) {
              goto LABEL_78;
            }
          }
          if ((uint64_t)(a3 - (void)a2 - 6) < 2) {
            return 0xFFFFFFFFLL;
          }
          uint64_t v41 = a3 - (void)a2 - 8;
          int v11 = a2 + 8;
          while (1)
          {
            uint64_t v42 = *(v11 - 2);
            if (*(v11 - 2) > 0xDBu)
            {
              if (v42 == 255)
              {
                LODWORD(v43) = *(v11 - 1);
                if (v43 > 0xFD) {
                  goto LABEL_207;
                }
                goto LABEL_191;
              }
              if ((v42 - 220) < 4) {
                goto LABEL_207;
              }
LABEL_190:
              LODWORD(v43) = *(v11 - 1);
              goto LABEL_191;
            }
            if (*(v11 - 2))
            {
              if ((v42 - 216) < 4)
              {
LABEL_206:
                if ((unint64_t)(v41 + 2) < 4) {
                  return 4294967294;
                }
LABEL_207:
                uint64_t v7 = 0;
                v11 -= 2;
                goto LABEL_79;
              }
              goto LABEL_190;
            }
            uint64_t v43 = *(v11 - 1);
            int v44 = *(unsigned __int8 *)(a1 + v43 + 136);
            if ((v44 - 22) < 6) {
              goto LABEL_192;
            }
            if (v44 != 29) {
              break;
            }
LABEL_191:
            if (((namingBitmap[(v43 >> 5) | (8 * namePages[v42])] >> v43) & 1) == 0) {
              goto LABEL_207;
            }
LABEL_192:
            v11 += 2;
            uint64_t v7 = 0xFFFFFFFFLL;
            BOOL v45 = v41 <= 1;
            v41 -= 2;
            if (v45) {
              return v7;
            }
          }
          switch(*(unsigned char *)(a1 + v43 + 136))
          {
            case 6:
              if ((unint64_t)(v41 + 2) >= 3) {
                goto LABEL_207;
              }
              return 4294967294;
            case 7:
              goto LABEL_206;
            case 8:
              goto LABEL_207;
            case 9:
            case 0xA:
              goto LABEL_222;
            case 0xB:
              goto LABEL_233;
            default:
              if (v44 != 21) {
                goto LABEL_207;
              }
LABEL_222:
              if (v41 < 2) {
                return 0xFFFFFFFFLL;
              }
              break;
          }
          while (1)
          {
            if (*v11) {
              goto LABEL_78;
            }
            int v46 = *(unsigned __int8 *)(a1 + v11[1] + 136);
            if ((v46 - 9) >= 2 && v46 != 21) {
              break;
            }
            v11 += 2;
            v41 -= 2;
            uint64_t v7 = 0xFFFFFFFFLL;
            if (v41 <= 1) {
              return v7;
            }
          }
          if (v46 != 11) {
            goto LABEL_78;
          }
          v11 += 2;
LABEL_233:
          uint64_t v7 = 5;
LABEL_79:
          *a4 = v11;
          return v7;
        case 0x16:
        case 0x18:
          goto LABEL_89;
        default:
          if (*(unsigned char *)(a1 + v19 + 136) != 29) {
            goto LABEL_78;
          }
          goto LABEL_88;
      }
    case 3:
      return big2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
      uint64_t v10 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2) {
        return 4294967291;
      }
      if (*v10 || a2[3] != 93) {
        goto LABEL_29;
      }
      int v17 = a2 + 4;
      if ((uint64_t)(a3 - (void)(a2 + 4)) < 2) {
        return 4294967291;
      }
      if (!*v17 && a2[5] == 62)
      {
        uint64_t v7 = 0;
        *a4 = v17;
        return v7;
      }
      goto LABEL_29;
    case 5:
      if ((uint64_t)(a3 - (void)a2) >= 2) {
        goto LABEL_28;
      }
      return 4294967294;
    case 6:
      if ((uint64_t)(a3 - (void)a2) < 3) {
        return 4294967294;
      }
      uint64_t v10 = a2 + 3;
      goto LABEL_29;
    case 7:
      goto LABEL_14;
    case 9:
      uint64_t v18 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2) {
        return 4294967293;
      }
      if (!*v18 && *(unsigned char *)(a1 + a2[3] + 136) == 10) {
        uint64_t v18 = a2 + 4;
      }
LABEL_74:
      *a4 = v18;
      return 7;
    case 0xA:
      uint64_t v18 = a2 + 2;
      goto LABEL_74;
    default:
      goto LABEL_28;
  }
}

uint64_t big2_cdataSectionTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  unint64_t v4 = (a3 - (void)a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v4) {
    BOOL v5 = ((a3 - (void)a2) & 1) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  BOOL v6 = &a2[v4];
  if (v5) {
    BOOL v6 = (unsigned __int8 *)a3;
  }
  if ((((_BYTE)a3 - (_BYTE)a2) & 1) == 0 || v4)
  {
    unsigned int v8 = *a2;
    if (v8 > 0xDB)
    {
      if (v8 - 220 < 4 || v8 == 255 && a2[1] > 0xFDu)
      {
        uint64_t v7 = 0;
        goto LABEL_51;
      }
    }
    else
    {
      if (v8 - 216 < 4)
      {
LABEL_13:
        if (v6 - a2 < 4) {
          return 4294967294;
        }
        unsigned int v9 = a2 + 4;
        goto LABEL_30;
      }
      if (!*a2)
      {
        uint64_t v7 = 0;
        switch(*(unsigned char *)(a1 + a2[1] + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_51;
          case 4:
            unsigned int v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (*v9 || a2[3] != 93) {
              goto LABEL_30;
            }
            if (v6 - (a2 + 4) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (a2[4] || a2[5] != 62) {
              goto LABEL_30;
            }
            a2 += 6;
            uint64_t v7 = 40;
            goto LABEL_51;
          case 5:
            if (v6 - a2 >= 2) {
              goto LABEL_29;
            }
            return 4294967294;
          case 6:
            if (v6 - a2 < 3) {
              return 4294967294;
            }
            unsigned int v9 = a2 + 3;
            goto LABEL_30;
          case 7:
            goto LABEL_13;
          case 9:
            unsigned int v9 = a2 + 2;
            if (v6 - (a2 + 2) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (*v9)
            {
              uint64_t v7 = 7;
              goto LABEL_50;
            }
            if (*(unsigned char *)(a1 + a2[3] + 136) == 10) {
              a2 += 4;
            }
            else {
              a2 += 2;
            }
LABEL_61:
            uint64_t v7 = 7;
            break;
          case 0xA:
            a2 += 2;
            goto LABEL_61;
          default:
            goto LABEL_29;
        }
        goto LABEL_51;
      }
    }
LABEL_29:
    unsigned int v9 = a2 + 2;
LABEL_30:
    unint64_t v10 = v6 - v9;
    if (v6 - v9 >= 2)
    {
      while (1)
      {
        unsigned int v11 = *v9;
        if (v11 > 0xDB) {
          break;
        }
        if (v11 - 216 < 4) {
          goto LABEL_33;
        }
        uint64_t v12 = 2;
        if (!*v9)
        {
          unsigned int v13 = *(unsigned __int8 *)(a1 + v9[1] + 136);
          if (v13 <= 0xA)
          {
            if (v13 == 6)
            {
              if (v10 < 3) {
                goto LABEL_49;
              }
              uint64_t v12 = 3;
              goto LABEL_48;
            }
            if (v13 != 7)
            {
              uint64_t v12 = 2;
              if (((1 << v13) & 0x713) != 0) {
                goto LABEL_49;
              }
              goto LABEL_48;
            }
LABEL_33:
            if (v10 < 4) {
              goto LABEL_49;
            }
            uint64_t v12 = 4;
            goto LABEL_48;
          }
          goto LABEL_37;
        }
LABEL_48:
        v9 += v12;
        unint64_t v10 = v6 - v9;
        if (v6 - v9 <= 1) {
          goto LABEL_49;
        }
      }
      if (v11 != 255)
      {
        uint64_t v12 = 2;
        if (v11 - 220 < 4) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      if (v9[1] > 0xFDu) {
        goto LABEL_49;
      }
LABEL_37:
      uint64_t v12 = 2;
      goto LABEL_48;
    }
LABEL_49:
    uint64_t v7 = 6;
LABEL_50:
    a2 = v9;
LABEL_51:
    *a4 = a2;
    return v7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t big2_ignoreSectionTok(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, void *a4)
{
  unint64_t v4 = &a2[(a3 - a2) & 0xFFFFFFFFFFFFFFFELL];
  if (((a3 - a2) & 1) == 0) {
    unint64_t v4 = a3;
  }
  unint64_t v5 = v4 - a2;
  if (v4 - a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  while (1)
  {
    unsigned int v7 = *a2;
    if (v7 > 0xDB)
    {
      if (v7 == 255)
      {
        if (a2[1] > 0xFDu) {
          goto LABEL_38;
        }
      }
      else if (v7 - 220 < 4)
      {
LABEL_38:
        uint64_t v9 = 0;
        goto LABEL_39;
      }
      goto LABEL_23;
    }
    if (v7 - 216 >= 4) {
      break;
    }
LABEL_7:
    if (v5 < 4) {
      return 4294967294;
    }
    unsigned int v8 = a2 + 4;
LABEL_24:
    unint64_t v5 = v4 - v8;
    a2 = v8;
    if (v4 - v8 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*a2)
  {
LABEL_23:
    unsigned int v8 = a2 + 2;
    goto LABEL_24;
  }
  uint64_t v9 = 0;
  switch(*(unsigned char *)(a1 + a2[1] + 136))
  {
    case 0:
    case 1:
    case 8:
      goto LABEL_39;
    case 2:
      unsigned int v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (*v8 || a2[3] != 33) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (!*v8 && a2[5] == 91)
      {
        unsigned int v8 = a2 + 6;
        ++v6;
      }
      goto LABEL_24;
    case 4:
      unsigned int v8 = a2 + 2;
      if (v4 - (a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (*v8 || a2[3] != 93) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 4;
      if (v4 - (a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (*v8 || a2[5] != 62) {
        goto LABEL_24;
      }
      unsigned int v8 = a2 + 6;
      if (v6)
      {
        --v6;
        goto LABEL_24;
      }
      uint64_t v9 = 42;
      a2 += 6;
LABEL_39:
      *a4 = a2;
      return v9;
    case 6:
      if (v5 < 3) {
        return 4294967294;
      }
      unsigned int v8 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      goto LABEL_23;
  }
}

uint64_t big2_attributeValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (*v4 - 216 < 4)
  {
LABEL_5:
    uint64_t v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (void)v4) <= 1)
    {
LABEL_27:
      *a4 = v4;
      return 6;
    }
  }
  if (*v4)
  {
    uint64_t v5 = 2;
    goto LABEL_6;
  }
  uint64_t v5 = 2;
  switch(*(unsigned char *)(a1 + v4[1] + 136))
  {
    case 2:
      uint64_t result = 0;
      *a4 = v4;
      return result;
    case 3:
      if (v4 != a2) {
        goto LABEL_27;
      }
      return big2_scanRef(a1, a2 + 2, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      uint64_t v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2) {
        goto LABEL_27;
      }
      unsigned int v7 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2)
      {
        uint64_t result = 4294967293;
      }
      else
      {
        if (!*v7 && *(unsigned char *)(a1 + a2[3] + 136) == 10) {
          unsigned int v7 = a2 + 4;
        }
LABEL_29:
        *a4 = v7;
        uint64_t result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2) {
        goto LABEL_27;
      }
      unsigned int v7 = a2 + 2;
      goto LABEL_29;
    default:
      if (*(unsigned char *)(a1 + v4[1] + 136) != 21) {
        goto LABEL_6;
      }
      if (v4 != a2) {
        goto LABEL_27;
      }
      *a4 = a2 + 2;
      uint64_t result = 39;
      break;
  }
  return result;
}

uint64_t big2_entityValueTok(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4)
{
  if ((unint64_t)a2 >= a3) {
    return 4294967292;
  }
  if ((uint64_t)(a3 - (void)a2) < 2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = a2;
  while (*v4 - 216 < 4)
  {
LABEL_5:
    uint64_t v5 = 4;
LABEL_6:
    v4 += v5;
    if ((uint64_t)(a3 - (void)v4) <= 1)
    {
LABEL_30:
      *a4 = v4;
      return 6;
    }
  }
  if (*v4)
  {
    uint64_t v5 = 2;
    goto LABEL_6;
  }
  uint64_t v5 = 2;
  switch(*(unsigned char *)(a1 + v4[1] + 136))
  {
    case 3:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v7 = a2 + 2;
      return big2_scanRef(a1, v7, a3, a4);
    case 4:
    case 5:
    case 8:
      goto LABEL_6;
    case 6:
      uint64_t v5 = 3;
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    case 9:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v8 = a2 + 2;
      if ((uint64_t)(a3 - (void)(a2 + 2)) < 2)
      {
        uint64_t result = 4294967293;
      }
      else
      {
        if (!*v8 && *(unsigned char *)(a1 + a2[3] + 136) == 10) {
          unsigned int v8 = a2 + 4;
        }
LABEL_33:
        *a4 = v8;
        uint64_t result = 7;
      }
      break;
    case 0xA:
      if (v4 != a2) {
        goto LABEL_30;
      }
      unsigned int v8 = a2 + 2;
      goto LABEL_33;
    default:
      if (*(unsigned char *)(a1 + v4[1] + 136) != 30) {
        goto LABEL_6;
      }
      if (v4 != a2) {
        goto LABEL_30;
      }
      LODWORD(result) = big2_scanPercent(a1, a2 + 2, a3, a4);
      if (result == 22) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
      break;
  }
  return result;
}

BOOL big2_nameMatchesAscii(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4)
{
  int v4 = *a4;
  if (!*a4) {
    return a2 == a3;
  }
  uint64_t v5 = a4 + 1;
  uint64_t v6 = a3 - a2;
  while (1)
  {
    BOOL v8 = __OFSUB__(v6, 2);
    BOOL v7 = v6 - 2 < 0;
    v6 -= 2;
    if (v7 != v8 || *a2 || a2[1] != v4) {
      break;
    }
    a2 += 2;
    int v9 = *v5++;
    int v4 = v9;
    if (!v9) {
      return a2 == a3;
    }
  }
  return 0;
}

uint64_t big2_nameLength(uint64_t a1, unsigned __int8 *a2)
{
  for (uint64_t i = a2; ; i += v4)
  {
    unsigned int v3 = *i;
    if (v3 > 0xDB)
    {
      if (v3 == 255)
      {
        if (i[1] > 0xFDu) {
          return (i - a2);
        }
        uint64_t v4 = 2;
      }
      else
      {
        uint64_t v4 = 2;
        if (v3 - 220 < 4) {
          return (i - a2);
        }
      }
      continue;
    }
    if (v3 - 216 < 4)
    {
      uint64_t v4 = 4;
      continue;
    }
    uint64_t v4 = 2;
    if (!*i) {
      break;
    }
LABEL_5:
    ;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + i[1] + 136) - 5;
  if (v5 < 0x19 && ((0x17E0007u >> v5) & 1) != 0)
  {
    uint64_t v4 = qword_2206DB6F0[(char)v5];
    goto LABEL_5;
  }
  return (i - a2);
}

unsigned char *big2_skipS(uint64_t a1, unsigned char *a2)
{
  if (!*a2)
  {
    do
    {
      unsigned int v2 = *(unsigned __int8 *)(a1 + a2[1] + 136);
      BOOL v3 = v2 > 0x15;
      int v4 = (1 << v2) & 0x200600;
      if (v3 || v4 == 0) {
        break;
      }
      int v6 = a2[2];
      a2 += 2;
    }
    while (!v6);
  }
  return a2;
}

uint64_t big2_getAtts(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t result = 0;
  int v6 = 0;
  uint64_t v7 = 1;
  while (1)
  {
    while (1)
    {
      uint64_t v8 = v7;
      int v9 = a2;
      unint64_t v10 = a2 + 2;
      unsigned int v11 = a2[2];
      if (v11 > 0xDB) {
        break;
      }
      if (v11 - 216 >= 4)
      {
        if (a2[2]) {
          goto LABEL_16;
        }
        unint64_t v14 = a2 + 3;
        uint64_t v13 = a2[3];
        a2 += 2;
        switch(*(unsigned char *)(a1 + v13 + 136))
        {
          case 3:
            a2 = v10;
            if ((int)result < a3)
            {
              *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
              a2 = v10;
            }
            continue;
          case 5:
          case 0x16:
          case 0x18:
          case 0x1D:
            goto LABEL_16;
          case 6:
            a2 = v9 + 3;
            if (!v7)
            {
              uint64_t v7 = 1;
              a2 = v9 + 3;
              if ((int)result < a3)
              {
                uint64_t v17 = a4 + 32 * (int)result;
                *(void *)uint64_t v17 = v10;
                *(unsigned char *)(v17 + 24) = 1;
                a2 = v14;
              }
            }
            continue;
          case 7:
            goto LABEL_4;
          case 9:
          case 0xA:
            uint64_t v7 = 0;
            a2 = v10;
            if (v8 == 1) {
              continue;
            }
            a2 = v10;
            uint64_t v7 = v8;
            if (v8 != 2) {
              continue;
            }
            a2 = v10;
            if ((int)result >= a3) {
              continue;
            }
            *(unsigned char *)(a4 + 32 * (int)result + 24) = 0;
            goto LABEL_66;
          case 0xB:
          case 0x11:
            uint64_t v7 = 2;
            a2 = v10;
            if (v8 == 2) {
              continue;
            }
            return result;
          case 0xC:
            if (v7 == 2)
            {
              uint64_t v7 = 2;
              a2 = v10;
              if (v6 == 12)
              {
                if ((int)result < a3) {
                  *(void *)(a4 + 32 * (int)result + 16) = v10;
                }
                uint64_t v7 = 0;
                uint64_t result = (result + 1);
                int v6 = 12;
                a2 = v10;
              }
              continue;
            }
            int v6 = 12;
            uint64_t v7 = 2;
            a2 = v10;
            if ((int)result >= a3) {
              continue;
            }
            *(void *)(a4 + 32 * (int)result + 8) = v9 + 4;
            int v6 = 12;
            goto LABEL_66;
          case 0xD:
            if (v7 == 2)
            {
              uint64_t v7 = 2;
              a2 = v10;
              if (v6 == 13)
              {
                if ((int)result < a3) {
                  *(void *)(a4 + 32 * (int)result + 16) = v10;
                }
                uint64_t v7 = 0;
                uint64_t result = (result + 1);
                int v6 = 13;
                a2 = v10;
              }
              continue;
            }
            int v6 = 13;
            uint64_t v7 = 2;
            a2 = v10;
            if ((int)result >= a3) {
              continue;
            }
            *(void *)(a4 + 32 * (int)result + 8) = v9 + 4;
            int v6 = 13;
            goto LABEL_66;
          case 0x15:
            uint64_t v7 = 0;
            a2 = v10;
            if (v8 == 1) {
              continue;
            }
            a2 = v10;
            uint64_t v7 = v8;
            if (v8 != 2) {
              continue;
            }
            a2 = v10;
            if ((int)result >= a3) {
              continue;
            }
            uint64_t v18 = a4 + 32 * (int)result;
            int v20 = *(unsigned __int8 *)(v18 + 24);
            uint64_t v19 = (unsigned char *)(v18 + 24);
            uint64_t v7 = 2;
            a2 = v10;
            if (!v20) {
              continue;
            }
            if (v10 == *(unsigned __int8 **)(a4 + 32 * (int)result + 8) || v13 != 32) {
              goto LABEL_65;
            }
            unsigned int v21 = v9[4];
            if (v21 > 0xDB)
            {
              if (v21 - 220 < 4)
              {
                int v22 = 8;
                goto LABEL_64;
              }
              if (v21 == 255 && v9[5] > 0xFDu)
              {
                int v22 = 0;
                goto LABEL_64;
              }
LABEL_63:
              int v22 = 29;
              goto LABEL_64;
            }
            if (v21 - 216 < 4)
            {
              int v22 = 7;
              goto LABEL_64;
            }
            if (v9[4]) {
              goto LABEL_63;
            }
            uint64_t v23 = v9[5];
            if (v23 == 32) {
              goto LABEL_65;
            }
            int v22 = *(unsigned __int8 *)(a1 + v23 + 136);
LABEL_64:
            uint64_t v7 = 2;
            a2 = v10;
            if (v22 != v6) {
              continue;
            }
LABEL_65:
            *uint64_t v19 = 0;
LABEL_66:
            uint64_t v7 = 2;
            a2 = v10;
            break;
          default:
            continue;
        }
      }
      else
      {
LABEL_4:
        if (!v7)
        {
          uint64_t v8 = 1;
          if ((int)result < a3)
          {
            uint64_t v16 = a4 + 32 * (int)result;
            *(void *)uint64_t v16 = v10;
            *(unsigned char *)(v16 + 24) = 1;
          }
        }
        a2 = v9 + 4;
        uint64_t v7 = v8;
      }
    }
    a2 += 2;
    if (v11 - 220 >= 4)
    {
      if (v11 == 255)
      {
        BOOL v12 = v9[3] <= 0xFDu && v7 == 0;
        a2 = v10;
        if (v12) {
          goto LABEL_17;
        }
      }
      else
      {
LABEL_16:
        a2 = v10;
        if (!v7)
        {
LABEL_17:
          uint64_t v7 = 1;
          a2 = v10;
          if ((int)result < a3)
          {
            uint64_t v15 = a4 + 32 * (int)result;
            *(void *)uint64_t v15 = v10;
            *(unsigned char *)(v15 + 24) = 1;
            a2 = v10;
          }
        }
      }
    }
  }
}

uint64_t big2_charRefNumber(uint64_t a1, unsigned char *a2)
{
  if (!a2[4] && a2[5] == 120)
  {
    uint64_t v2 = 0;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      if (!*(i - 1))
      {
        int v4 = *i;
        if (v4 == 59) {
          return checkCharRefNumber(v2);
        }
        int v5 = v4 - 48;
        if ((v4 - 48) <= 0x36)
        {
          if (((1 << v5) & 0x3FF) != 0)
          {
            uint64_t v2 = v5 | (16 * v2);
          }
          else if (((1 << v5) & 0x7E0000) != 0)
          {
            uint64_t v2 = (v4 + 16 * v2 - 55);
          }
          else
          {
            if (((1 << v5) & 0x7E000000000000) == 0) {
              continue;
            }
            uint64_t v2 = (v4 + 16 * v2 - 87);
          }
          if ((int)v2 >= 1114112) {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  uint64_t v2 = 0;
  for (uint64_t j = a2 + 5; *(j - 1); j += 2)
  {
    int v7 = -1;
LABEL_19:
    uint64_t v2 = (v7 + 10 * v2 - 48);
    if ((int)v2 >= 1114112) {
      return 0xFFFFFFFFLL;
    }
  }
  int v7 = *j;
  if (v7 != 59) {
    goto LABEL_19;
  }
  return checkCharRefNumber(v2);
}

uint64_t big2_predefinedEntityName(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = (a3 - (uint64_t)a2) / 2;
  if (v3 == 4)
  {
    if (!*a2)
    {
      int v7 = (char)a2[1];
      if (v7 == 97)
      {
        if (!a2[2] && a2[3] == 112 && !a2[4] && a2[5] == 111 && !a2[6] && a2[7] == 115) {
          return 39;
        }
      }
      else if (v7 == 113 && !a2[2] && a2[3] == 117 && !a2[4] && a2[5] == 111 && !a2[6] && a2[7] == 116)
      {
        return 34;
      }
    }
    return 0;
  }
  if (v3 == 3)
  {
    if (!*a2 && a2[1] == 97 && !a2[2] && a2[3] == 109 && !a2[4] && a2[5] == 112) {
      return 38;
    }
    return 0;
  }
  if (v3 != 2 || a2[2] || a2[3] != 116 || *a2) {
    return 0;
  }
  int v4 = a2[1];
  if (v4 == 103) {
    unsigned int v5 = 62;
  }
  else {
    unsigned int v5 = 0;
  }
  if (v4 == 108) {
    return 60;
  }
  else {
    return v5;
  }
}

uint64_t big2_updatePosition(uint64_t result, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 >= 2)
  {
    do
    {
      if (*a2 - 216 >= 4)
      {
        if (!*a2)
        {
          switch(*(unsigned char *)(result + a2[1] + 136))
          {
            case 6:
              a2 += 3;
              goto LABEL_7;
            case 7:
              goto LABEL_3;
            case 9:
              ++*a4;
              int v4 = a2 + 2;
              if (a3 - (uint64_t)(a2 + 2) >= 2 && !*v4 && *(unsigned char *)(result + a2[3] + 136) == 10) {
                int v4 = a2 + 4;
              }
              a4[1] = 0;
              a2 = v4;
              break;
            case 0xA:
              ++*a4;
              a4[1] = 0;
              a2 += 2;
              break;
            default:
              goto LABEL_6;
          }
          continue;
        }
LABEL_6:
        a2 += 2;
      }
      else
      {
LABEL_3:
        a2 += 4;
      }
LABEL_7:
      ++a4[1];
    }
    while (a3 - (uint64_t)a2 > 1);
  }
  return result;
}

uint64_t big2_isPublicId(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v4 = (unsigned char *)(a2 + 2);
  uint64_t v5 = a3 - (a2 + 2) - 2;
  if (v5 >= 2)
  {
    do
    {
      if (*v4)
      {
LABEL_15:
        uint64_t result = 0;
        *a4 = v4;
        return result;
      }
      uint64_t v6 = v4[1];
      int v7 = (char)v6;
      uint64_t v8 = *(unsigned __int8 *)(a1 + v6 + 136);
      if (v8 <= 0x23)
      {
        if (((1 << v8) & 0xFCB8FE600) != 0) {
          goto LABEL_5;
        }
        if (((1 << v8) & 0x4400000) != 0)
        {
          if ((v7 & 0x80000000) == 0) {
            goto LABEL_5;
          }
        }
        else if (v8 == 21)
        {
          if (v7 == 9) {
            goto LABEL_15;
          }
          goto LABEL_5;
        }
      }
      if (v7 != 64 && v7 != 36) {
        goto LABEL_15;
      }
LABEL_5:
      v4 += 2;
      v5 -= 2;
    }
    while (v5 > 1);
  }
  return 1;
}

uint64_t big2_toUtf8(uint64_t a1, unsigned __int8 **a2, uint64_t a3, unsigned char **a4, unsigned char *a5)
{
  uint64_t v5 = *a2;
  int64_t v6 = (a3 - (void)*a2) & 0xFFFFFFFFFFFFFFFELL;
  if (v6 >= 1)
  {
    int v7 = &v5[v6];
    do
    {
      unsigned int v8 = v5[1];
      int v9 = (char)v8;
      unsigned int v10 = *v5;
      if (v10 - 1 >= 7)
      {
        if (v10 - 216 < 4)
        {
          uint64_t v16 = *a4;
          if (a5 - *a4 < 4) {
            goto LABEL_21;
          }
          if (v7 - v5 < 4)
          {
            uint64_t result = 1;
            goto LABEL_23;
          }
          unsigned int v17 = ((v8 >> 6) & 0xFFFFFFF3 | (4 * (v10 & 3))) + 1;
          *a4 = v16 + 1;
          *uint64_t v16 = (v17 >> 2) | 0xF0;
          LOBYTE(v17) = (v8 >> 2) & 0xF | (16 * (v17 & 3)) | 0x80;
          uint64_t v18 = (*a4)++;
          unsigned char *v18 = v17;
          unsigned __int8 v19 = v5[2];
          v5 += 2;
          LOBYTE(v18) = v5[1];
          int v20 = (*a4)++;
          unsigned char *v20 = (v18 >> 6) & 0xC3 | (16 * (v9 & 3)) | (4 * (v19 & 3)) | 0x80;
          LOBYTE(v9) = v18 & 0x3F | 0x80;
          unsigned int v21 = *a4;
          goto LABEL_11;
        }
        if (*v5)
        {
          int v22 = *a4;
          if (a5 - *a4 < 3)
          {
LABEL_21:
            uint64_t result = 2;
            goto LABEL_23;
          }
          *a4 = v22 + 1;
          unsigned char *v22 = (v10 >> 4) | 0xE0;
          char v13 = (4 * (v10 & 0xF)) | (v9 >> 6) | 0x80;
          unsigned int v11 = *a4;
          goto LABEL_6;
        }
        if (((char)v8 & 0x80000000) == 0)
        {
          unsigned int v21 = *a4;
          if (*a4 == a5) {
            goto LABEL_21;
          }
LABEL_11:
          *a4 = v21 + 1;
          *unsigned int v21 = v9;
          goto LABEL_12;
        }
      }
      unsigned int v11 = *a4;
      if (a5 - *a4 < 2) {
        goto LABEL_21;
      }
      HIDWORD(v12) = *v5;
      LODWORD(v12) = v9 << 24;
      char v13 = (v12 >> 30) | 0xC0;
LABEL_6:
      *a4 = v11 + 1;
      unsigned char *v11 = v13;
      char v14 = v9 & 0x3F | 0x80;
      uint64_t v15 = (*a4)++;
      unsigned char *v15 = v14;
LABEL_12:
      v5 += 2;
    }
    while (v5 < v7);
  }
  uint64_t result = 0;
LABEL_23:
  *a2 = v5;
  return result;
}

uint64_t big2_toUtf16(uint64_t a1, unsigned __int16 **a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5 = *a2;
  int64_t v6 = (a3 - (void)*a2) & 0xFFFFFFFFFFFFFFFELL;
  int v7 = (unsigned __int16 *)((char *)*a2 + v6);
  if (v6 <= (uint64_t)(a5 - *a4))
  {
    uint64_t result = 0;
  }
  else
  {
    int v8 = *(unsigned char *)(v7 - 1) & 0xF8;
    uint64_t result = v8 == 216;
    if (v8 == 216) {
      --v7;
    }
  }
  while (v5 < v7)
  {
    unsigned int v10 = (_WORD *)*a4;
    if (*a4 >= a5)
    {
      if (*a4 == a5) {
        return 2;
      }
      return result;
    }
    _WORD *v10 = bswap32(*v5) >> 16;
    *a4 = (unint64_t)(v10 + 1);
    uint64_t v5 = *a2 + 1;
    *a2 = v5;
  }
  return result;
}

uint64_t big2_scanLit(int a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 **a5)
{
  unint64_t v5 = a4 - (void)a3;
  if (a4 - (uint64_t)a3 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v6 = *a3;
    if (v6 > 0xDB)
    {
      if (v6 == 255)
      {
        if (a3[1] > 0xFDu) {
          goto LABEL_20;
        }
      }
      else if (v6 - 220 < 4)
      {
LABEL_20:
        uint64_t result = 0;
        *a5 = a3;
        return result;
      }
      goto LABEL_14;
    }
    if (v6 - 216 >= 4)
    {
      if (!*a3)
      {
        switch(*(unsigned char *)(a2 + a3[1] + 136))
        {
          case 0:
          case 1:
          case 8:
            goto LABEL_20;
          case 6:
            if (v5 < 3) {
              return 4294967294;
            }
            int v7 = a3 + 3;
            goto LABEL_15;
          case 7:
            goto LABEL_4;
          case 0xC:
          case 0xD:
            int v7 = a3 + 2;
            if (*(unsigned __int8 *)(a2 + a3[1] + 136) != a1) {
              goto LABEL_15;
            }
            if (a4 - (uint64_t)v7 < 2) {
              return 4294967269;
            }
            *a5 = v7;
            if (*v7) {
              return 0;
            }
            unsigned int v9 = *(unsigned __int8 *)(a2 + a3[3] + 136);
            BOOL v10 = v9 > 0x1E;
            int v11 = (1 << v9) & 0x40300E00;
            if (v10 || v11 == 0) {
              return 0;
            }
            else {
              return 27;
            }
          default:
            break;
        }
      }
LABEL_14:
      int v7 = a3 + 2;
      goto LABEL_15;
    }
LABEL_4:
    if (v5 < 4) {
      return 4294967294;
    }
    int v7 = a3 + 4;
LABEL_15:
    unint64_t v5 = a4 - (void)v7;
    a3 = v7;
    if (a4 - (uint64_t)v7 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
}

uint64_t big2_scanDecl(uint64_t a1, unsigned char *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  if (!*a2)
  {
    switch(*(unsigned char *)(a1 + a2[1] + 136))
    {
      case 0x14:
        *a4 = a2 + 2;
        return 33;
      case 0x16:
      case 0x18:
        unint64_t v5 = a2 + 2;
        uint64_t v6 = a3 - (void)(a2 + 2);
        if (v6 < 2) {
          return 0xFFFFFFFFLL;
        }
        while (2)
        {
          if (*v5)
          {
LABEL_20:
            uint64_t v4 = 0;
            *a4 = v5;
          }
          else
          {
            switch(*(unsigned char *)(a1 + v5[1] + 136))
            {
              case 0x15:
                goto LABEL_13;
              case 0x16:
              case 0x18:
                v5 += 2;
                v6 -= 2;
                uint64_t v4 = 0xFFFFFFFFLL;
                if (v6 > 1) {
                  continue;
                }
                return v4;
              case 0x17:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
                goto LABEL_20;
              case 0x1E:
                if ((unint64_t)v6 < 4) {
                  return 0xFFFFFFFFLL;
                }
                if (!v5[2])
                {
                  unsigned int v8 = *(unsigned __int8 *)(a1 + v5[3] + 136);
                  BOOL v9 = v8 > 0x1E;
                  int v10 = (1 << v8) & 0x40200600;
                  if (!v9 && v10 != 0) {
                    goto LABEL_20;
                  }
                }
                goto LABEL_13;
              default:
                if (*(unsigned __int8 *)(a1 + v5[1] + 136) - 9 >= 2) {
                  goto LABEL_20;
                }
LABEL_13:
                *a4 = v5;
                uint64_t v4 = 16;
                break;
            }
          }
          return v4;
        }
      case 0x1B:
        return big2_scanComment(a1, a2 + 2, a3, a4);
      default:
        break;
    }
  }
  uint64_t v4 = 0;
  *a4 = a2;
  return v4;
}

uint64_t big2_scanPi(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - (void)a2;
  uint64_t v5 = a3 - (void)a2 - 2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v10 - 220) < 4) {
      goto LABEL_7;
    }
    if (v10 == 255)
    {
      LODWORD(v12) = a2[1];
      if (v12 > 0xFD) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v10 - 216) < 4) {
    goto LABEL_4;
  }
  if (*a2)
  {
LABEL_17:
    LODWORD(v12) = a2[1];
    goto LABEL_18;
  }
  uint64_t v12 = a2[1];
  unsigned int v13 = *(unsigned __int8 *)(a1 + v12 + 136);
  if (v13 <= 0x15)
  {
    if (v13 == 5) {
      goto LABEL_7;
    }
    if (v13 == 6)
    {
      if (v4 < 3) {
        return 4294967294;
      }
      goto LABEL_7;
    }
    if (v13 != 7) {
      goto LABEL_7;
    }
LABEL_4:
    if (v4 < 4) {
      return 4294967294;
    }
LABEL_7:
    uint64_t result = 0;
    *a4 = (uint64_t)a2;
    return result;
  }
  if (v13 != 22 && v13 != 24)
  {
    if (v13 != 29) {
      goto LABEL_7;
    }
LABEL_18:
    if (((namingBitmap[(v12 >> 5) | (8 * nmstrtPages[v10])] >> v12) & 1) == 0) {
      goto LABEL_7;
    }
  }
  if (v5 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = 0;
  unsigned int v26 = 0;
  uint64_t result = 0xFFFFFFFFLL;
  while (1)
  {
    uint64_t v16 = a2[v15 + 2];
    if (a2[v15 + 2] <= 0xDBu)
    {
      if (!a2[v15 + 2])
      {
        uint64_t v17 = a2[v15 + 3];
        switch(*(unsigned char *)(a1 + v17 + 136))
        {
          case 5:
            goto LABEL_45;
          case 6:
            if ((unint64_t)v5 >= 3) {
              goto LABEL_45;
            }
            return 4294967294;
          case 7:
            goto LABEL_44;
          case 9:
          case 0xA:
          case 0x15:
            unsigned __int8 v19 = &a2[v15];
            uint64_t v20 = (uint64_t)&a2[v15 + 2];
            uint64_t result = big2_checkPiTarget(a2, v20, &v26);
            if (!result)
            {
              *a4 = v20;
              return result;
            }
            unint64_t v21 = v5 - 2;
            if (v5 - 2 < 2) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v18 = v19 + 4;
            uint64_t result = 0xFFFFFFFFLL;
            while (2)
            {
              unsigned int v22 = *v18;
              if (v22 > 0xDB)
              {
                if (v22 == 255)
                {
                  if (v18[1] > 0xFDu) {
                    goto LABEL_41;
                  }
                }
                else if (v22 - 220 < 4)
                {
                  goto LABEL_41;
                }
              }
              else
              {
                if (v22 - 216 < 4)
                {
LABEL_54:
                  if (v21 < 4) {
                    return 4294967294;
                  }
                  uint64_t v23 = v18 + 4;
LABEL_65:
                  unint64_t v21 = a3 - (void)v23;
                  uint64_t v18 = v23;
                  if (a3 - (uint64_t)v23 <= 1) {
                    return result;
                  }
                  continue;
                }
                if (!*v18)
                {
                  switch(*(unsigned char *)(a1 + v18[1] + 136))
                  {
                    case 0:
                    case 1:
                    case 8:
                      goto LABEL_41;
                    case 6:
                      if (v21 < 3) {
                        return 4294967294;
                      }
                      uint64_t v23 = v18 + 3;
                      goto LABEL_65;
                    case 7:
                      goto LABEL_54;
                    case 0xF:
                      uint64_t v23 = v18 + 2;
                      if (a3 - (uint64_t)(v18 + 2) < 2) {
                        return 0xFFFFFFFFLL;
                      }
                      if (*v23 || v18[3] != 62) {
                        goto LABEL_65;
                      }
                      uint64_t v24 = (uint64_t)(v18 + 4);
                      break;
                    default:
                      goto LABEL_64;
                  }
LABEL_79:
                  *a4 = v24;
                  return v26;
                }
              }
              break;
            }
LABEL_64:
            uint64_t v23 = v18 + 2;
            goto LABEL_65;
          case 0xF:
            uint64_t v25 = &a2[v15];
            uint64_t result = big2_checkPiTarget(a2, (uint64_t)&a2[v15 + 2], &v26);
            if (!result)
            {
              *a4 = (uint64_t)&a2[v15 + 2];
              return result;
            }
            if (v5 - 2 < 2) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v18 = v25 + 4;
            if (!v25[4] && a2[v15 + 5] == 62)
            {
              uint64_t v24 = (uint64_t)&a2[v15 + 6];
              goto LABEL_79;
            }
            goto LABEL_41;
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
            goto LABEL_38;
          case 0x1D:
            goto LABEL_37;
          default:
            goto LABEL_40;
        }
      }
      if ((v16 - 216) < 4)
      {
LABEL_44:
        if ((unint64_t)v5 >= 4)
        {
LABEL_45:
          uint64_t result = 0;
          uint64_t v18 = &a2[v15 + 2];
          goto LABEL_46;
        }
        return 4294967294;
      }
      goto LABEL_36;
    }
    if (v16 == 255)
    {
      LODWORD(v17) = a2[v15 + 3];
      if (v17 > 0xFD) {
        break;
      }
      goto LABEL_37;
    }
    if ((v16 - 220) < 4) {
      break;
    }
LABEL_36:
    LODWORD(v17) = a2[v15 + 3];
LABEL_37:
    if (((namingBitmap[(v17 >> 5) | (8 * namePages[v16])] >> v17) & 1) == 0) {
      goto LABEL_45;
    }
LABEL_38:
    v5 -= 2;
    v15 += 2;
    if (v5 <= 1) {
      return result;
    }
  }
LABEL_40:
  uint64_t v18 = &a2[v15 + 2];
LABEL_41:
  uint64_t result = 0;
LABEL_46:
  *a4 = (uint64_t)v18;
  return result;
}

uint64_t big2_scanPercent(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - (void)a2;
  uint64_t v5 = a3 - (void)a2 - 2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v6 - 220) < 4 || v6 == 255 && a2[1] > 0xFDu) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((v6 - 216) < 4) {
      goto LABEL_4;
    }
    if (!*a2)
    {
      uint64_t v7 = 0;
      unsigned int v8 = *(unsigned __int8 *)(a1 + a2[1] + 136);
      if (v8 > 0x14)
      {
        switch(*(unsigned char *)(a1 + a2[1] + 136))
        {
          case 0x15:
          case 0x1E:
            goto LABEL_36;
          case 0x16:
          case 0x18:
            goto LABEL_15;
          case 0x1D:
            goto LABEL_14;
          default:
            goto LABEL_8;
        }
      }
      if (v8 - 9 < 2)
      {
LABEL_36:
        uint64_t v7 = 22;
        goto LABEL_8;
      }
      if (v8 == 6)
      {
        if (v4 < 3) {
          return 4294967294;
        }
        goto LABEL_7;
      }
      if (v8 != 7) {
        goto LABEL_8;
      }
LABEL_4:
      if (v4 < 4) {
        return 4294967294;
      }
LABEL_7:
      uint64_t v7 = 0;
      goto LABEL_8;
    }
  }
LABEL_14:
  if (((namingBitmap[(a2[1] >> 5) | (8 * nmstrtPages[v6])] >> a2[1]) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_15:
  if (v5 < 2) {
    return 0xFFFFFFFFLL;
  }
  for (a2 += 4; ; a2 += 2)
  {
    uint64_t v9 = *(a2 - 2);
    if (*(a2 - 2) <= 0xDBu) {
      break;
    }
    if (v9 != 255)
    {
      if ((v9 - 220) < 4) {
        goto LABEL_42;
      }
LABEL_26:
      LODWORD(v10) = *(a2 - 1);
      goto LABEL_27;
    }
    LODWORD(v10) = *(a2 - 1);
    if (v10 > 0xFD) {
      goto LABEL_42;
    }
LABEL_27:
    if (((namingBitmap[(v10 >> 5) | (8 * namePages[v9])] >> v10) & 1) == 0) {
      goto LABEL_42;
    }
LABEL_28:
    v5 -= 2;
    uint64_t v7 = 0xFFFFFFFFLL;
    if (v5 <= 1) {
      return v7;
    }
  }
  if (!*(a2 - 2))
  {
    uint64_t v10 = *(a2 - 1);
    int v11 = *(unsigned __int8 *)(a1 + v10 + 136);
    switch(*(unsigned char *)(a1 + v10 + 136))
    {
      case 0x12:
        uint64_t v7 = 28;
        goto LABEL_8;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x1C:
        goto LABEL_42;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_28;
      case 0x1D:
        goto LABEL_27;
      default:
        if (v11 != 6)
        {
          if (v11 != 7) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        if ((unint64_t)v5 < 3) {
          return 4294967294;
        }
        break;
    }
    goto LABEL_42;
  }
  if ((v9 - 216) >= 4) {
    goto LABEL_26;
  }
LABEL_41:
  if ((unint64_t)v5 < 4) {
    return 4294967294;
  }
LABEL_42:
  uint64_t v7 = 0;
  a2 -= 2;
LABEL_8:
  *a4 = a2;
  return v7;
}

uint64_t big2_scanPoundName(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v5 - 220) >= 4 && (v5 != 255 || a2[1] <= 0xFDu)) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  if ((v5 - 216) < 4) {
    goto LABEL_4;
  }
  if (*a2) {
    goto LABEL_21;
  }
  uint64_t v6 = 0;
  unsigned int v8 = *(unsigned __int8 *)(a1 + a2[1] + 136);
  if (v8 <= 0x15)
  {
    if (v8 != 6)
    {
      if (v8 == 7)
      {
LABEL_4:
        if (v4 >= 4) {
          goto LABEL_8;
        }
        return 4294967294;
      }
LABEL_9:
      *a4 = a2;
      return v6;
    }
    if (v4 < 3) {
      return 4294967294;
    }
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  if (v8 == 22 || v8 == 24) {
    goto LABEL_22;
  }
  if (v8 != 29) {
    goto LABEL_9;
  }
LABEL_21:
  if (((namingBitmap[(a2[1] >> 5) | (8 * nmstrtPages[v5])] >> a2[1]) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_22:
  a2 += 2;
  uint64_t v10 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 4294967276;
  }
  while (1)
  {
    uint64_t v11 = *a2;
    if (*a2 <= 0xDBu) {
      break;
    }
    if (v11 == 255)
    {
      LODWORD(v12) = a2[1];
      if (v12 > 0xFD) {
        goto LABEL_8;
      }
      goto LABEL_33;
    }
    if ((v11 - 220) < 4) {
      goto LABEL_8;
    }
LABEL_32:
    LODWORD(v12) = a2[1];
LABEL_33:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v11])] >> v12) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_34:
    a2 += 2;
    v10 -= 2;
    uint64_t v6 = 4294967276;
    if (v10 <= 1) {
      return v6;
    }
  }
  if (!*a2)
  {
    uint64_t v6 = 0;
    uint64_t v12 = a2[1];
    switch(*(unsigned char *)(a1 + v12 + 136))
    {
      case 6:
        if ((unint64_t)v10 >= 3) {
          goto LABEL_8;
        }
        return 4294967294;
      case 7:
        goto LABEL_40;
      case 9:
      case 0xA:
      case 0xB:
      case 0x15:
      case 0x1E:
      case 0x20:
      case 0x24:
        uint64_t v6 = 20;
        goto LABEL_9;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_34;
      case 0x1D:
        goto LABEL_33;
      default:
        goto LABEL_9;
    }
  }
  if ((v11 - 216) >= 4) {
    goto LABEL_32;
  }
LABEL_40:
  if ((unint64_t)v10 >= 4) {
    goto LABEL_8;
  }
  return 4294967294;
}

uint64_t big2_scanComment(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  if (*a2 || a2[1] != 45)
  {
LABEL_26:
    uint64_t v7 = 0;
    goto LABEL_27;
  }
  a2 += 2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v5 = *a2;
    if (v5 > 0xDB)
    {
      if (v5 == 255)
      {
        if (a2[1] > 0xFDu) {
          goto LABEL_26;
        }
      }
      else if (v5 - 220 < 4)
      {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    if (v5 - 216 >= 4) {
      break;
    }
LABEL_7:
    if (v4 < 4) {
      return 4294967294;
    }
    uint64_t v6 = a2 + 4;
LABEL_24:
    unint64_t v4 = a3 - (void)v6;
    uint64_t v7 = 0xFFFFFFFFLL;
    a2 = v6;
    if (a3 - (uint64_t)v6 <= 1) {
      return v7;
    }
  }
  if (*a2)
  {
LABEL_23:
    uint64_t v6 = a2 + 2;
    goto LABEL_24;
  }
  uint64_t v7 = 0;
  switch(*(unsigned char *)(a1 + a2[1] + 136))
  {
    case 0:
    case 1:
    case 8:
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      goto LABEL_23;
    case 6:
      if (v4 < 3) {
        return 4294967294;
      }
      uint64_t v6 = a2 + 3;
      goto LABEL_24;
    case 7:
      goto LABEL_7;
    default:
      if (*(unsigned char *)(a1 + a2[1] + 136) != 27) {
        goto LABEL_23;
      }
      uint64_t v6 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (*v6 || a2[3] != 45) {
        goto LABEL_24;
      }
      if (a3 - (uint64_t)(a2 + 4) < 2) {
        return 0xFFFFFFFFLL;
      }
      if (a2[4])
      {
        uint64_t v7 = 0;
        a2 += 4;
      }
      else
      {
        int v9 = a2[5];
        if (v9 == 62) {
          a2 += 6;
        }
        else {
          a2 += 4;
        }
        if (v9 == 62) {
          uint64_t v7 = 13;
        }
        else {
          uint64_t v7 = 0;
        }
      }
      break;
  }
LABEL_27:
  *a4 = a2;
  return v7;
}

BOOL big2_checkPiTarget(unsigned char *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 11;
  if (a2 - (void)a1 != 6 || *a1) {
    return 1;
  }
  int v4 = (char)a1[1];
  if (v4 == 120)
  {
    int v5 = 0;
  }
  else
  {
    if (v4 != 88) {
      return 1;
    }
    int v5 = 1;
  }
  if (a1[2]) {
    return 1;
  }
  int v6 = (char)a1[3];
  if (v6 != 109)
  {
    if (v6 != 77) {
      return 1;
    }
    int v5 = 1;
  }
  if (a1[4]) {
    return 1;
  }
  int v7 = (char)a1[5];
  if (v7 == 108)
  {
    if (v5) {
      return 0;
    }
    *a3 = 12;
    return 1;
  }
  return v7 != 76;
}

uint64_t big2_scanRef(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - (void)a2;
  uint64_t v5 = a3 - (void)a2 - 2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *a2;
  if (*a2 > 0xDBu)
  {
    if ((v6 - 220) < 4 || v6 == 255 && a2[1] > 0xFDu) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((v6 - 216) < 4) {
      goto LABEL_4;
    }
    if (!*a2)
    {
      uint64_t v7 = 0;
      unsigned int v8 = *(unsigned __int8 *)(a1 + a2[1] + 136);
      if (v8 <= 0x15)
      {
        if (v8 == 6)
        {
          if (v4 < 3) {
            return 4294967294;
          }
          goto LABEL_7;
        }
        if (v8 == 7)
        {
LABEL_4:
          if (v4 < 4) {
            return 4294967294;
          }
LABEL_7:
          uint64_t v7 = 0;
          goto LABEL_8;
        }
        if (v8 != 19) {
          goto LABEL_8;
        }
        int v9 = a2 + 2;
        if (a3 - (uint64_t)(a2 + 2) >= 2)
        {
          if (*v9) {
            goto LABEL_16;
          }
          uint64_t v14 = a2[3];
          if (v14 == 120)
          {
            int v9 = a2 + 4;
            if (a3 - (uint64_t)(a2 + 4) < 2) {
              return 0xFFFFFFFFLL;
            }
            if (!*v9 && (*(unsigned char *)(a1 + a2[5] + 136) & 0xFE) == 0x18)
            {
              a2 += 6;
              uint64_t v15 = a3 - (void)a2;
              if (a3 - (uint64_t)a2 >= 2)
              {
                while (!*a2)
                {
                  int v16 = *(unsigned __int8 *)(a1 + a2[1] + 136);
                  if ((v16 - 24) >= 2)
                  {
                    if (v16 != 18) {
                      goto LABEL_7;
                    }
                    a2 += 2;
                    uint64_t v7 = 10;
                    goto LABEL_8;
                  }
                  a2 += 2;
                  v15 -= 2;
                  uint64_t v7 = 0xFFFFFFFFLL;
                  if (v15 <= 1) {
                    return v7;
                  }
                }
                goto LABEL_7;
              }
              return 0xFFFFFFFFLL;
            }
          }
          else if (*(unsigned char *)(a1 + v14 + 136) == 25)
          {
            int v9 = a2 + 4;
            uint64_t v17 = v4 - 4;
            while (1)
            {
              BOOL v18 = v17 < 2;
              v17 -= 2;
              if (v18) {
                return 0xFFFFFFFFLL;
              }
              a2 = v9;
              if (*v9) {
                goto LABEL_7;
              }
              int v19 = *(unsigned __int8 *)(a1 + v9[1] + 136);
              v9 += 2;
              if (v19 != 25)
              {
                if (v19 != 18) {
                  goto LABEL_7;
                }
                uint64_t v7 = 10;
                goto LABEL_17;
              }
            }
          }
LABEL_16:
          uint64_t v7 = 0;
LABEL_17:
          a2 = v9;
          goto LABEL_8;
        }
        return 0xFFFFFFFFLL;
      }
      if (v8 == 22 || v8 == 24) {
        goto LABEL_27;
      }
      if (v8 != 29) {
        goto LABEL_8;
      }
    }
  }
  if (((namingBitmap[(a2[1] >> 5) | (8 * nmstrtPages[v6])] >> a2[1]) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_27:
  if (v5 < 2) {
    return 0xFFFFFFFFLL;
  }
  for (a2 += 4; ; a2 += 2)
  {
    uint64_t v11 = *(a2 - 2);
    if (*(a2 - 2) <= 0xDBu) {
      break;
    }
    if (v11 != 255)
    {
      if ((v11 - 220) < 4) {
        goto LABEL_56;
      }
LABEL_38:
      LODWORD(v12) = *(a2 - 1);
      goto LABEL_39;
    }
    LODWORD(v12) = *(a2 - 1);
    if (v12 > 0xFD) {
      goto LABEL_56;
    }
LABEL_39:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v11])] >> v12) & 1) == 0) {
      goto LABEL_56;
    }
LABEL_40:
    v5 -= 2;
    uint64_t v7 = 0xFFFFFFFFLL;
    if (v5 <= 1) {
      return v7;
    }
  }
  if (!*(a2 - 2))
  {
    uint64_t v12 = *(a2 - 1);
    int v13 = *(unsigned __int8 *)(a1 + v12 + 136);
    switch(*(unsigned char *)(a1 + v12 + 136))
    {
      case 0x12:
        uint64_t v7 = 9;
        goto LABEL_8;
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x17:
      case 0x1C:
        goto LABEL_56;
      case 0x16:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
        goto LABEL_40;
      case 0x1D:
        goto LABEL_39;
      default:
        if (v13 != 6)
        {
          if (v13 != 7) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        if ((unint64_t)v5 < 3) {
          return 4294967294;
        }
        break;
    }
    goto LABEL_56;
  }
  if ((v11 - 216) >= 4) {
    goto LABEL_38;
  }
LABEL_55:
  if ((unint64_t)v5 < 4) {
    return 4294967294;
  }
LABEL_56:
  uint64_t v7 = 0;
  a2 -= 2;
LABEL_8:
  *a4 = a2;
  return v7;
}

uint64_t big2_scanAtts(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v33 = a2;
  unint64_t v4 = a3 - (void)a2;
  if (a3 - (uint64_t)a2 < 2) {
    return 0xFFFFFFFFLL;
  }
  int v8 = 0;
  uint64_t v9 = a3 - 4;
  while (1)
  {
    uint64_t v10 = *a2;
    if (*a2 <= 0xDBu) {
      break;
    }
    if (v10 == 255)
    {
      LODWORD(v12) = a2[1];
      if (v12 > 0xFD) {
        goto LABEL_108;
      }
      goto LABEL_22;
    }
    if ((v10 - 220) < 4) {
      goto LABEL_108;
    }
LABEL_21:
    LODWORD(v12) = a2[1];
LABEL_22:
    if (((namingBitmap[(v12 >> 5) | (8 * namePages[v10])] >> v12) & 1) == 0) {
      goto LABEL_108;
    }
LABEL_23:
    a2 += 2;
LABEL_24:
    uint64_t v33 = a2;
LABEL_25:
    unint64_t v4 = a3 - (void)a2;
    if (a3 - (uint64_t)a2 <= 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*a2)
  {
    if ((v10 - 216) < 4)
    {
LABEL_103:
      if (v4 >= 4)
      {
LABEL_108:
        uint64_t result = 0;
        goto LABEL_109;
      }
      return 4294967294;
    }
    goto LABEL_21;
  }
  uint64_t result = 0;
  uint64_t v12 = a2[1];
  switch(*(unsigned char *)(a1 + v12 + 136))
  {
    case 6:
      if (v4 >= 3) {
        goto LABEL_108;
      }
      return 4294967294;
    case 7:
      goto LABEL_103;
    case 9:
    case 0xA:
    case 0x15:
      a2 += 2;
      uint64_t v13 = a3 - (void)a2;
      if (a3 - (uint64_t)a2 < 2) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        if (*a2) {
          goto LABEL_108;
        }
        int v14 = *(unsigned __int8 *)(a1 + a2[1] + 136);
        if ((v14 - 9) < 2 || v14 == 21)
        {
          a2 += 2;
          v13 -= 2;
          if (v13 <= 1) {
            return 0xFFFFFFFFLL;
          }
          continue;
        }
        break;
      }
      if (v14 != 14) {
        goto LABEL_108;
      }
      uint64_t v33 = a2;
LABEL_37:
      int v16 = a2 + 2;
      if (a3 - (uint64_t)(a2 + 2) < 2) {
        return 0xFFFFFFFFLL;
      }
      for (uint64_t i = v9 - (void)a2; ; i -= 2)
      {
        if (*v16) {
          goto LABEL_115;
        }
        unsigned int v22 = *(unsigned __int8 *)(a1 + v16[1] + 136);
        if ((v22 & 0xFE) == 0xC) {
          break;
        }
        if (v22 > 0x15 || ((1 << v22) & 0x200600) == 0) {
          goto LABEL_115;
        }
        v16 += 2;
        uint64_t result = 0xFFFFFFFFLL;
        if (i <= 1) {
          return result;
        }
      }
      v16 += 2;
      uint64_t v33 = v16;
      if (i < 2) {
        return 0xFFFFFFFFLL;
      }
      while (2)
      {
        unsigned int v25 = *v16;
        if (v25 > 0xDB)
        {
          if (v25 - 220 < 4)
          {
            int v26 = 8;
            goto LABEL_63;
          }
          if (v25 == 255 && v16[1] > 0xFDu)
          {
            int v26 = 0;
            goto LABEL_63;
          }
        }
        else
        {
          if (v25 - 216 < 4)
          {
            int v26 = 7;
            goto LABEL_63;
          }
          if (!*v16)
          {
            int v26 = *(unsigned __int8 *)(a1 + v16[1] + 136);
            goto LABEL_63;
          }
        }
        int v26 = 29;
LABEL_63:
        if (v26 == v22)
        {
          a2 = v16 + 2;
          uint64_t v33 = v16 + 2;
          if (a3 - (uint64_t)(v16 + 2) < 2) {
            return 0xFFFFFFFFLL;
          }
          if (*a2) {
            goto LABEL_108;
          }
          uint64_t result = 0;
          unsigned int v27 = *(unsigned __int8 *)(a1 + v16[3] + 136);
          if (v27 <= 0xA)
          {
            if (v27 - 9 >= 2) {
              goto LABEL_109;
            }
            goto LABEL_89;
          }
          if (v27 == 21)
          {
LABEL_89:
            uint64_t v28 = v16 + 4;
            uint64_t v29 = a3 - (void)(v16 + 4);
            if (v29 < 2) {
              return 0xFFFFFFFFLL;
            }
            a2 = v16 + 6;
            while (2)
            {
              uint64_t v30 = *(a2 - 2);
              if (!*(a2 - 2))
              {
                switch(*(unsigned char *)(a1 + *(a2 - 1) + 136))
                {
                  case 6:
                    if ((unint64_t)v29 >= 3) {
                      goto LABEL_106;
                    }
                    return 4294967294;
                  case 7:
                    goto LABEL_105;
                  case 9:
                  case 0xA:
                  case 0x15:
                    v28 += 2;
                    v29 -= 2;
                    a2 += 2;
                    uint64_t result = 0xFFFFFFFFLL;
                    if (v29 <= 1) {
                      return result;
                    }
                    continue;
                  case 0xB:
                    a2 -= 2;
                    goto LABEL_124;
                  case 0x11:
                    a2 -= 2;
                    goto LABEL_126;
                  case 0x16:
                  case 0x18:
                    goto LABEL_102;
                  case 0x1D:
                    goto LABEL_100;
                  default:
                    goto LABEL_106;
                }
              }
              break;
            }
            if ((v30 - 216) < 4)
            {
LABEL_105:
              if ((unint64_t)v29 >= 4)
              {
LABEL_106:
                uint64_t result = 0;
                a2 -= 2;
                goto LABEL_109;
              }
              return 4294967294;
            }
            if ((v30 - 220) < 4) {
              goto LABEL_106;
            }
            if (v30 == 255)
            {
              uint64_t v33 = a2 - 2;
              unsigned int v31 = *(a2 - 1);
              if (v31 >= 0xFE)
              {
                uint64_t result = 0;
                a2 -= 2;
                goto LABEL_109;
              }
            }
            else
            {
LABEL_100:
              uint64_t v33 = a2 - 2;
              unsigned int v31 = *(a2 - 1);
            }
            if (((namingBitmap[(v31 >> 5) | (8 * nmstrtPages[v30])] >> v31) & 1) == 0)
            {
              uint64_t result = 0;
              a2 = v28;
              goto LABEL_109;
            }
LABEL_102:
            int v8 = 0;
            goto LABEL_24;
          }
          if (v27 == 11)
          {
LABEL_124:
            a2 += 2;
            uint64_t result = 1;
            goto LABEL_109;
          }
          if (v27 != 17) {
            goto LABEL_109;
          }
LABEL_126:
          int v16 = a2 + 2;
          uint64_t v33 = a2 + 2;
          if (a3 - (uint64_t)(a2 + 2) >= 2)
          {
            if (!*v16)
            {
              int v32 = a2[3];
              if (v32 == 62) {
                a2 += 4;
              }
              else {
                a2 += 2;
              }
              if (v32 == 62) {
                uint64_t result = 3;
              }
              else {
                uint64_t result = 0;
              }
              goto LABEL_109;
            }
LABEL_115:
            uint64_t result = 0;
            a2 = v16;
LABEL_109:
            *a4 = a2;
            return result;
          }
          return 0xFFFFFFFFLL;
        }
        switch(v26)
        {
          case 0:
          case 1:
          case 2:
          case 8:
            goto LABEL_115;
          case 3:
            uint64_t result = big2_scanRef(a1, v16 + 2, a3, &v33);
            if ((int)result >= 1)
            {
              int v16 = v33;
LABEL_73:
              uint64_t i = a3 - (void)v16;
              uint64_t result = 0xFFFFFFFFLL;
              if (a3 - (uint64_t)v16 <= 1) {
                return result;
              }
              continue;
            }
            if (!result)
            {
              a2 = v33;
              goto LABEL_109;
            }
            return result;
          case 6:
            if ((unint64_t)i < 3) {
              return 4294967294;
            }
            v16 += 3;
            goto LABEL_72;
          case 7:
            if ((unint64_t)i < 4) {
              return 4294967294;
            }
            v16 += 4;
            goto LABEL_72;
          default:
            v16 += 2;
LABEL_72:
            uint64_t v33 = v16;
            goto LABEL_73;
        }
      }
    case 0xE:
      goto LABEL_37;
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
      goto LABEL_23;
    case 0x17:
      if (v8) {
        goto LABEL_108;
      }
      int v16 = a2 + 2;
      uint64_t v33 = a2 + 2;
      uint64_t v17 = a3 - (void)(a2 + 2);
      if (v17 < 2) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v18 = *v16;
      if (*v16 > 0xDBu)
      {
        if (v18 == 255)
        {
          LODWORD(v19) = a2[3];
          if (v19 > 0xFD) {
            goto LABEL_115;
          }
LABEL_79:
          if (((namingBitmap[(v19 >> 5) | (8 * nmstrtPages[v18])] >> v19) & 1) == 0) {
            goto LABEL_115;
          }
          goto LABEL_80;
        }
        if ((v18 - 220) < 4) {
          goto LABEL_115;
        }
      }
      else
      {
        if (!*v16)
        {
          uint64_t v19 = a2[3];
          unsigned int v20 = *(unsigned __int8 *)(a1 + v19 + 136);
          if (v20 <= 0x17)
          {
            if (v20 != 22)
            {
              if (v20 == 6)
              {
                if ((unint64_t)v17 < 3) {
                  return 4294967294;
                }
              }
              else if (v20 == 7)
              {
LABEL_114:
                if ((unint64_t)v17 < 4) {
                  return 4294967294;
                }
              }
              goto LABEL_115;
            }
          }
          else if (v20 != 24)
          {
            if (v20 != 29) {
              goto LABEL_115;
            }
            goto LABEL_79;
          }
LABEL_80:
          a2 += 4;
          uint64_t v33 = a2;
          int v8 = 1;
          goto LABEL_25;
        }
        if ((v18 - 216) < 4) {
          goto LABEL_114;
        }
      }
      LODWORD(v19) = a2[3];
      goto LABEL_79;
    case 0x1D:
      goto LABEL_22;
    default:
      goto LABEL_109;
  }
}

uint64_t parsePseudoAttribute(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2 == a3)
  {
    *a4 = 0;
    return 1;
  }
  else
  {
    uint64_t v10 = a2;
    (*(void (**)(uint64_t, uint64_t *))(a1 + 112))(a1, &v10);
    uint64_t result = 0;
    *a7 = a2;
  }
  return result;
}

size_t UriGetUrlPrefixLength(const char *a1, _DWORD *a2)
{
  if (a2) {
    *a2 = 0;
  }
  if (!a1 || !*a1) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (&off_26455E078)[v4];
    size_t v6 = cstdlib_strlen(v5);
    if (!cstdlib_strncmp(a1, v5, v6)) {
      break;
    }
    v4 += 2;
    if (v4 == 10) {
      return 0;
    }
  }
  if (a2) {
    *a2 = (&off_26455E078)[v4 + 1];
  }

  return cstdlib_strlen(v5);
}

char *FileFullPath(char *a1, char *__s1, char *a3)
{
  *a1 = 0;
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a1;
    int v5 = 0;
    int v6 = *a3;
    if (v6 == 47 || v6 == 92) {
      goto LABEL_21;
    }
    if (__s1 && *__s1)
    {
      if (cstdlib_strncmp(__s1, "\\\\"", 2uLL))
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        cstdlib_strcpy(v4, "/net/");
        uint64_t v9 = 2;
        uint64_t v8 = 5;
      }
      uint64_t v12 = (v8 << 32) - 0x100000000;
      uint64_t v13 = &__s1[v9];
      while (1)
      {
        int v15 = *v13++;
        int v14 = v15;
        if (v15 == 92)
        {
          LOBYTE(v14) = 47;
        }
        else if (!v14)
        {
          if (v4[v12 >> 32] == 47)
          {
            int v5 = v8;
            goto LABEL_21;
          }
          int v5 = v8 + 1;
          uint64_t v11 = v8;
          char v10 = 47;
LABEL_20:
          v4[v11] = v10;
LABEL_21:
          if (cstdlib_strncmp(v3, "\\\\"", 2uLL))
          {
            int v16 = 0;
          }
          else
          {
            cstdlib_strcpy(&v4[v5], "/net/");
            int v5 = 5;
            int v16 = 2;
          }
          uint64_t v17 = v5;
          unsigned int v31 = v3;
          int v32 = v4;
LABEL_25:
          int v18 = v3[v16];
          if (v18 == 92)
          {
            v4[v17] = 47;
            goto LABEL_53;
          }
          if (!v3[v16])
          {
            v4[(int)v17] = 0;
            return v4;
          }
          v4[v17] = v18;
          if (v18 != 37) {
            goto LABEL_53;
          }
          char v19 = v3[v16 + 1];
          if ((v19 - 48) >= 0xAu
            && (v3[v16 + 1] - 65 > 0x25 || ((1 << (v19 - 65)) & 0x3F0000003FLL) == 0))
          {
            goto LABEL_53;
          }
          int v21 = v16 + 2;
          char v22 = v3[v16 + 2];
          if ((v22 - 48) >= 0xAu
            && (v3[v16 + 2] - 65 > 0x25 || ((1 << (v22 - 65)) & 0x3F0000003FLL) == 0))
          {
            goto LABEL_53;
          }
          uint64_t v24 = 0;
          int v25 = 0;
          v33[0] = v19;
          v33[1] = v22;
          char v26 = 1;
          v33[2] = 0;
          while (1)
          {
            if (cstdlib_strchr("ABCDEF", v33[v24]))
            {
              if ((v26 & 1) == 0)
              {
                int v29 = -55;
                goto LABEL_52;
              }
              int v27 = -880;
            }
            else
            {
              uint64_t v28 = cstdlib_strchr("abcdef", v33[v24]);
              if (v28) {
                int v27 = -1392;
              }
              else {
                int v27 = -768;
              }
              if ((v26 & 1) == 0)
              {
                if (v28) {
                  int v29 = -87;
                }
                else {
                  int v29 = -48;
                }
LABEL_52:
                __sprintf_chk(v33, 0, 3uLL, "%c", (v29 + v25 + v33[v24]));
                uint64_t v3 = v31;
                uint64_t v4 = v32;
                v32[v17] = v33[0];
                int v16 = v21;
LABEL_53:
                ++v16;
                ++v17;
                goto LABEL_25;
              }
            }
            char v26 = 0;
            v25 += v27 + 16 * v33[v24];
            uint64_t v24 = 1;
          }
        }
        v4[v8++] = v14;
        v12 += 0x100000000;
      }
    }
    char v10 = 0;
    *(_WORD *)a1 = 12078;
    uint64_t v11 = 2;
    int v5 = 2;
    goto LABEL_20;
  }
  return 0;
}

const char *UriCompleteUrl(const char *__s, char *a2, char *__dst)
{
  uint64_t v4 = (char *)__s;
  uint64_t v26 = *MEMORY[0x263EF8340];
  memset(v24, 0, 512);
  if (!a2 || !*a2)
  {
    if (!__s)
    {
      void *__dst = 0;
      return __s;
    }
    uint64_t v9 = __dst;
    char v10 = v4;
    goto LABEL_13;
  }
  if (!__s || !cstdlib_strlen(__s)) {
    goto LABEL_10;
  }
  if (!UriGetUrlPrefixLength(v4, 0) && !UriGetUrlPrefixLength(a2, 0))
  {
    return FileFullPath(__dst, v4, a2);
  }
  int v6 = cstdlib_strchr(a2, 58);
  if (!v6)
  {
    if (*a2 != 47) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v9 = __dst;
    char v10 = a2;
LABEL_13:
    return cstdlib_strcpy(v9, v10);
  }
  uint64_t v7 = v6;
  uint64_t v8 = cstdlib_strchr(a2, 47);
  if (!v8 || v7 < v8) {
    goto LABEL_10;
  }
LABEL_19:
  size_t v11 = cstdlib_strlen(a2);
  size_t v12 = cstdlib_strlen(v4);
  if (*a2 == 47)
  {
    unint64_t v13 = v12;
    int v14 = cstdlib_strchr(v4, 58);
    if (!v14 || (unint64_t v15 = (unint64_t)v14, (__s = cstdlib_strchr(v4, 47)) != 0) && v15 >= (unint64_t)__s)
    {
      __dsta[0] = 0;
    }
    else
    {
      size_t v16 = v15 - (void)v4;
      if (v16 > 0x4E) {
        return __s;
      }
      cstdlib_strncpy(__dsta, v4, v16);
      __dsta[v16] = 0;
    }
    char v19 = cstdlib_strchr(v4, 47);
    if (v19 && (v20 = v19, int64_t v21 = v19 - v4, v19 - v4 + 1 < v13) && *v19 == 47)
    {
      char v22 = v19 + 2;
      __s = cstdlib_strchr(v19 + 2, 47);
      if (__s) {
        size_t v23 = __s - v20 - 2;
      }
      else {
        size_t v23 = v13 - v21;
      }
      if (v23 > 0x4E) {
        return __s;
      }
      cstdlib_strncpy((char *)v24, v22, v23);
      *((unsigned char *)v24 + v23) = 0;
    }
    else
    {
      LOBYTE(v24[0]) = 0;
    }
    if (cstdlib_strlen(__dsta))
    {
      cstdlib_strcpy(__dst, __dsta);
      cstdlib_strcat(__dst, ":");
    }
    else
    {
      void *__dst = 0;
    }
    if ((v11 < 2 || a2[1] != 47) && cstdlib_strlen((const char *)v24))
    {
      cstdlib_strcat(__dst, "//");
      cstdlib_strcat(__dst, (const char *)v24);
    }
    return cstdlib_strcat(__dst, a2);
  }
  else
  {
    uint64_t v17 = cstdlib_strrchr(v4, 47);
    if (v17)
    {
      size_t v18 = v17 - v4 + 1;
      cstdlib_strncpy(__dst, v4, v18);
      __dst[v18] = 0;
    }
    else
    {
      cstdlib_strcpy(__dst, v4);
      cstdlib_strcat(__dst, "/");
    }
    return cstdlib_strcat(__dst, a2);
  }
}

uint64_t SplitpathOrUrl(uint64_t result, char *a2, uint64_t a3, unsigned char *a4, unsigned char *a5, unsigned char *a6)
{
  if (result)
  {
    size_t v11 = (const char *)result;
    size_t UrlPrefixLength = UriGetUrlPrefixLength((const char *)result, 0);
    if (UrlPrefixLength)
    {
      size_t v13 = UrlPrefixLength;
      if (a2)
      {
        cstdlib_strncpy(a2, v11, UrlPrefixLength);
        a2[v13] = 0;
      }
      v11 += v13;
      int v14 = ";";
    }
    else
    {
      if (a2) {
        *a2 = 0;
      }
      int v14 = ";:";
    }
    if (*v11 && v11[1] == 58)
    {
      if (a3)
      {
        *(unsigned char *)a3 = *v11;
        unsigned __int8 v15 = v11[1];
        v11 += 2;
        *(_WORD *)(a3 + 1) = v15;
      }
      else
      {
        v11 += 2;
      }
    }
    else if (a3)
    {
      *(unsigned char *)a3 = 0;
    }
    char v16 = *v11;
    uint64_t v17 = v11;
    if (*v11)
    {
      uint64_t v17 = v11;
      do
      {
        if (cstdlib_strchr(v14, v16)) {
          break;
        }
        int v18 = *(unsigned __int8 *)++v17;
        char v16 = v18;
      }
      while (v18);
    }
    char v19 = v17;
    while (v19 > v11)
    {
      int v21 = *(unsigned __int8 *)--v19;
      int v20 = v21;
      if (v21 == 92 || v20 == 47) {
        break;
      }
      if (v20 == 46)
      {
        if (!a6) {
          goto LABEL_31;
        }
        goto LABEL_28;
      }
    }
    char v19 = v17;
    if (!a6) {
      goto LABEL_31;
    }
LABEL_28:
    int v22 = *(unsigned __int8 *)v19;
    *a6 = v22;
    if (v22)
    {
      size_t v23 = (unsigned __int8 *)(v19 + 1);
      uint64_t v24 = a6 + 1;
      do
      {
        int v25 = *v23++;
        *v24++ = v25;
      }
      while (v25);
    }
LABEL_31:
    uint64_t v26 = 0;
    do
    {
      uint64_t v27 = v26;
      uint64_t v28 = (unsigned __int8 *)&v19[v26];
      if (&v19[v26] <= v11) {
        break;
      }
      int v29 = *(v28 - 1);
      if (v29 == 92) {
        break;
      }
      --v26;
    }
    while (v29 != 47);
    if (a5)
    {
      if (v28 < (unsigned __int8 *)v19)
      {
        do
          *a5++ = v19[v27++];
        while (v27);
      }
      *a5 = 0;
    }
    if (a4)
    {
      for (; v11 < (const char *)v28; ++a4)
      {
        char v30 = *v11++;
        *a4 = v30;
      }
      *a4 = 0;
    }
    return 1;
  }
  return result;
}

uint64_t IsThisUrlOrRealPath(char *a1, uint64_t a2, _DWORD *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (!a1) {
    return 0;
  }
  if (a2)
  {
    int v5 = a1;
    do
    {
      char v6 = *v5++;
      unsigned int v7 = v6;
      if (v6 < 32) {
        return 0;
      }
      uint64_t result = 0;
      BOOL v9 = v7 > 0x3F || ((1 << v7) & 0xD000040400000000) == 0;
      if (!v9 || v7 == 124) {
        return result;
      }
    }
    while (--a2);
  }
  int v10 = *a1;
  uint64_t result = 1;
  if (v10 != 47 && v10 != 92)
  {
    if (UriGetUrlPrefixLength(a1, 0))
    {
      uint64_t result = 1;
      if (a3) {
        *a3 = 1;
      }
      return result;
    }
    if ((*a1 & 0xDFu) - 65 <= 0x19 && a1[1] == 58) {
      return 1;
    }
    uint64_t result = (uint64_t)cstdlib_strrchr(a1, 46);
    if (result)
    {
      while (1)
      {
        int v11 = *(unsigned __int8 *)result;
        if ((v11 - 32) <= 0x3C && ((1 << (v11 - 32)) & 0x1000000000008001) != 0) {
          break;
        }
        if (!*(unsigned char *)result) {
          return 1;
        }
        ++result;
      }
      return 0;
    }
  }
  return result;
}

size_t UriGetExtensionFromURI(char *__s, unsigned char *a2, unint64_t a3)
{
  size_t result = 0;
  if (__s)
  {
    unint64_t v5 = a3 - 2;
    if (a3 >= 2)
    {
      size_t result = cstdlib_strlen(__s);
      if (result)
      {
        unint64_t v7 = 0;
        size_t v8 = result - 1;
        do
        {
          if (__s[v8] == 63) {
            unint64_t v7 = v8;
          }
          --v8;
        }
        while (v8 != -1);
        unint64_t v9 = 0;
        if (v7) {
          unint64_t v10 = v7;
        }
        else {
          unint64_t v10 = result;
        }
        unint64_t v11 = v10;
        do
        {
          unint64_t v12 = v11;
          unint64_t v13 = v9;
          if (!v11) {
            break;
          }
          --v11;
          ++v9;
        }
        while (__s[v12 - 1] != 46);
        if (v12 - 1 >= v10)
        {
          unint64_t v15 = 0;
        }
        else
        {
          if (v13 >= v5) {
            unint64_t v14 = v5;
          }
          else {
            unint64_t v14 = v13;
          }
          unint64_t v15 = v14 + 1;
          char v16 = __s - 1;
          uint64_t v17 = a2;
          unint64_t v18 = v15;
          do
          {
            *v17++ = v16[v12];
            ++v16;
            --v18;
          }
          while (v18);
        }
        a2[v15] = 0;
        return (size_t)a2;
      }
    }
  }
  return result;
}

char *UriToBrokerString(void *a1, char *__s)
{
  int v4 = cstdlib_strlen(__s);
  int v5 = v4;
  if (v4 < 1) {
    return 0;
  }
  int v6 = 0;
  int v7 = 0;
  unint64_t v8 = v4 + 1;
  do
  {
    int v9 = __s[(v8 - 2)];
    if (v9 == 46)
    {
      int v7 = 1;
      int v6 = v5 - 1;
    }
    else if (v9 == 47 || v9 == 92)
    {
      goto LABEL_10;
    }
    --v8;
    --v5;
  }
  while (v8 > 1);
  int v5 = 0;
LABEL_10:
  if (!v7) {
    return 0;
  }
  size_t v10 = (v6 - v5);
  unint64_t v11 = (char *)heap_Calloc(a1, 1, (v10 + 1));
  unint64_t v12 = v11;
  if (v11)
  {
    cstdlib_strncpy(v11, &__s[v5], v10);
    v12[v10] = 0;
  }
  return v12;
}

void *strhelper_Strdup(uint64_t a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  size_t v4 = cstdlib_strlen(__s) + 1;
  int v5 = (void *)heap_Alloc(a1, v4);
  int v6 = v5;
  if (v5) {
    cstdlib_memcpy(v5, __s, v4);
  }
  return v6;
}

char *strhelper_SafeStrtok(uint64_t a1, char *__s, void *a3)
{
  uint64_t v3 = (char *)(a1 + *a3);
  char v4 = *v3;
  if (!*v3) {
    return 0;
  }
  int v7 = (unsigned __int8 *)(*a3 + a1 + 1);
  while (!cstdlib_strchr(__s, v4))
  {
    ++*a3;
    int v8 = *v7++;
    char v4 = v8;
    if (!v8) {
      return v3;
    }
  }
  char v9 = *(v7 - 1);
  if (v9)
  {
    do
    {
      if (!cstdlib_strchr(__s, v9)) {
        break;
      }
      *(v7 - 1) = 0;
      ++*a3;
      int v10 = *v7++;
      char v9 = v10;
    }
    while (v10);
  }
  return v3;
}

char *strhelper_StringAppend(uint64_t *a1, char *__s, char *a3, size_t a4, uint64_t *a5, unint64_t a6)
{
  int v6 = __s;
  if (a3)
  {
    size_t v9 = a4;
    if (a4 == -1)
    {
      size_t v9 = cstdlib_strlen(a3);
      if (v6) {
        goto LABEL_4;
      }
    }
    else if (__s)
    {
LABEL_4:
      if (!a5) {
        return 0;
      }
      size_t v12 = cstdlib_strlen(v6);
      if (v9 >= ~v12) {
        return 0;
      }
      size_t v13 = v12;
      unint64_t v14 = *a5;
      if (v9 + v12 + 1 >= *a5)
      {
        if (~v9 > a6 && -2 - (v9 + a6) >= v14)
        {
          uint64_t v15 = v9 + a6 + v14 + 1;
          *a5 = v15;
          int v6 = (char *)heap_Realloc(a1, (uint64_t)v6, v15);
          if (!v6) {
            return v6;
          }
          goto LABEL_17;
        }
        return 0;
      }
LABEL_17:
      cstdlib_strncat(v6, a3, v9);
      v6[v13 + v9] = 0;
      return v6;
    }
    if (~v9 <= a6) {
      return 0;
    }
    char v16 = (char *)heap_Alloc((uint64_t)a1, a6 + v9 + 1);
    int v6 = v16;
    if (v16)
    {
      if (a5) {
        *a5 = a6 + v9 + 1;
      }
      size_t v13 = 0;
      *char v16 = 0;
      goto LABEL_17;
    }
  }
  return v6;
}

uint64_t strhelper_SafeCat(char *a1, char *__s, size_t a3, size_t a4)
{
  uint64_t v4 = 2246057991;
  if (a1 && __s)
  {
    size_t v7 = a3;
    if (cstdlib_strlen(__s) < a3) {
      size_t v7 = cstdlib_strlen(__s);
    }
    if (cstdlib_strlen(a1) + v7 >= a4)
    {
      return 2246057993;
    }
    else
    {
      cstdlib_strncat(a1, __s, v7);
      return 0;
    }
  }
  return v4;
}

uint64_t strhelper_SafeCpy(char *a1, char *a2, size_t a3, size_t a4)
{
  if (!a1 || !a2) {
    return 2246057991;
  }
  *a1 = 0;
  return strhelper_SafeCat(a1, a2, a3, a4);
}

char *strhelper_csv_EndOfElem(char *a1)
{
  size_t result = cstdlib_strchr(a1, 44);
  if (!result) {
    return &a1[cstdlib_strlen(a1)];
  }
  return result;
}

uint64_t strhelper_csv_HasElem(char *a1, char *__s)
{
  uint64_t result = 0;
  if (a1 && __s)
  {
    size_t v5 = cstdlib_strlen(__s);
    while (1)
    {
      int v6 = strhelper_csv_EndOfElem(a1);
      if (v6 - a1 == (int)v5 && !cstdlib_memcmp(a1, __s, v5)) {
        break;
      }
      a1 = v6 + 1;
      if (!*v6) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t tinystack_Reset(uint64_t result)
{
  if (result)
  {
    if (*(uint64_t (**)(uint64_t, uint64_t, void *))result == tinystack_Ini) {
      *(void *)(result + 32) = 0;
    }
  }
  return result;
}

uint64_t tinystack_Ini(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2166366218;
  if (!a2) {
    return 2166366215;
  }
  size_t v7 = (void *)heap_Alloc(*(void *)(a1 + 8), 48);
  if (v7)
  {
    int v8 = v7;
    void *v7 = 0;
    uint64_t v9 = heap_Alloc(*(void *)(a1 + 8), 8 * a2);
    v8[1] = v9;
    if (v9)
    {
      uint64_t v3 = 0;
      v8[2] = a2;
      _OWORD v8[3] = a2;
      v8[4] = 0;
      v8[5] = a1;
      *int v8 = tinystack_Ini;
      *a3 = v8;
    }
    else
    {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v8);
    }
  }
  return v3;
}

void *tinystack_Delete(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((uint64_t (*)(uint64_t, uint64_t, void *))*result == tinystack_Ini)
    {
      uint64_t v2 = result[1];
      if (v2) {
        heap_Free(*(void **)(result[5] + 8), v2);
      }
      void *v1 = 0;
      uint64_t v3 = *(void **)(v1[5] + 8);
      return heap_Free(v3, (uint64_t)v1);
    }
  }
  return result;
}

uint64_t tinystack_Push(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2166366215;
  if (a1 && *(uint64_t (**)(uint64_t, uint64_t, void *))a1 == tinystack_Ini)
  {
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = v6 - 1;
    if (v5 > v6 - 1)
    {
      uint64_t v8 = *(void *)(a1 + 24) + v6;
      uint64_t v9 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 40) + 8), *(void *)(a1 + 8), 8 * v8);
      if (!v9) {
        return 2166366218;
      }
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v8;
      unint64_t v7 = v8 - 1;
      unint64_t v5 = *(void *)(a1 + 32);
    }
    if (v5 <= v7)
    {
      uint64_t v2 = 0;
      *(void *)(*(void *)(a1 + 8) + 8 * v5) = a2;
      *(void *)(a1 + 32) = v5 + 1;
      return v2;
    }
    return 2166366218;
  }
  return v2;
}

uint64_t tinystack_Pop(uint64_t a1, void *a2)
{
  uint64_t result = 2166366215;
  if (a1)
  {
    if (*(uint64_t (**)(uint64_t, uint64_t, void *))a1 == tinystack_Ini)
    {
      uint64_t result = 2166366223;
      if (a2)
      {
        uint64_t v4 = *(void *)(a1 + 32);
        if (v4)
        {
          uint64_t result = 0;
          uint64_t v5 = v4 - 1;
          *a2 = *(void *)(*(void *)(a1 + 8) + 8 * v5);
          *(void *)(a1 + 32) = v5;
        }
      }
    }
  }
  return result;
}

uint64_t tinystack_View(uint64_t a1, void *a2)
{
  uint64_t result = 2166366215;
  if (a1 && a2 && *(uint64_t (**)(uint64_t, uint64_t, void *))a1 == tinystack_Ini)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      uint64_t result = 0;
      *a2 = *(void *)(*(void *)(a1 + 8) + 8 * v4 - 8);
    }
    else
    {
      return 2166366223;
    }
  }
  return result;
}

uint64_t tinystack_Find(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = 2166366215;
  *a3 = 0;
  if (a1 && a2 && *(uint64_t (**)(uint64_t, uint64_t, void *))a1 == tinystack_Ini)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8) - 8;
      while (v5)
      {
        uint64_t v7 = *(void *)(v6 + 8 * v5--);
        if (v7 == a2)
        {
          uint64_t result = 0;
          *a3 = 1;
          return result;
        }
      }
      return 0;
    }
    else
    {
      return 2166366223;
    }
  }
  return result;
}

uint64_t ttsJSON_GetErrorPtr()
{
  return global_error_0 + global_error_1;
}

uint64_t ttsJSON_GetStringValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 24) == 16) {
      return *(void *)(result + 32);
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL ttsJSON_IsString(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 16;
  }
  return result;
}

double ttsJSON_GetNumberValue(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 24) == 8) {
    return *(double *)(a1 + 48);
  }
  else {
    return NAN;
  }
}

BOOL ttsJSON_IsNumber(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 8;
  }
  return result;
}

char *ttsJSON_Version()
{
  return ttsJSON_Version_version;
}

void *ttsJSON_Delete(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    do
    {
      uint64_t v2 = (uint64_t)v1;
      uint64_t v1 = (void *)*v1;
      int v3 = *(_DWORD *)(v2 + 24);
      if ((v3 & 0x100) == 0 && *(void *)(v2 + 16))
      {
        ttsJSON_Delete();
        int v3 = *(_DWORD *)(v2 + 24);
      }
      if ((v3 & 0x100) == 0)
      {
        uint64_t v4 = *(void *)(v2 + 32);
        if (v4)
        {
          heap_Free(*(void **)(v2 + 64), v4);
          int v3 = *(_DWORD *)(v2 + 24);
        }
      }
      if ((v3 & 0x200) == 0)
      {
        uint64_t v5 = *(void *)(v2 + 56);
        if (v5) {
          heap_Free(*(void **)(v2 + 64), v5);
        }
      }
      uint64_t result = heap_Free(*(void **)(v2 + 64), v2);
    }
    while (v1);
  }
  return result;
}

uint64_t ttsJSON_SetNumberHelper(uint64_t result, double a2)
{
  if (a2 >= 2147483650.0)
  {
    int v2 = 0x7FFFFFFF;
  }
  else if (a2 > -2147483650.0)
  {
    int v2 = (int)a2;
  }
  else
  {
    int v2 = 0x80000000;
  }
  *(_DWORD *)(result + 40) = v2;
  *(double *)(result + 48) = a2;
  return result;
}

void *ttsJSON_SetValuestring(uint64_t a1, char *__s)
{
  if ((*(_DWORD *)(a1 + 24) & 0x110) != 0x10) {
    return 0;
  }
  size_t v4 = cstdlib_strlen(__s);
  if (v4 <= cstdlib_strlen(*(const char **)(a1 + 32)))
  {
    cstdlib_strcpy(*(char **)(a1 + 32), __s);
    return *(void **)(a1 + 32);
  }
  else
  {
    uint64_t v5 = ttsJSON_strdup(*(void *)(a1 + 64), __s);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6) {
        heap_Free(*(void **)(a1 + 64), v6);
      }
      *(void *)(a1 + 32) = v5;
    }
  }
  return v5;
}

void *ttsJSON_strdup(uint64_t a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  size_t v4 = cstdlib_strlen(__s) + 1;
  uint64_t v5 = (void *)heap_Alloc(a1, v4);
  uint64_t v6 = v5;
  if (v5) {
    cstdlib_memcpy(v5, __s, v4);
  }
  return v6;
}

void *ttsJSON_ParseWithOpts(uint64_t a1, char *__s, void *a3, int a4)
{
  if (!__s) {
    return 0;
  }
  unint64_t v8 = cstdlib_strlen(__s) + 1;

  return ttsJSON_ParseWithLengthOpts(a1, __s, v8, a3, a4);
}

void *ttsJSON_ParseWithLengthOpts(uint64_t a1, const char *a2, unint64_t a3, void *a4, int a5)
{
  long long v16 = 0u;
  long long v17 = 0u;
  global_error_0 = 0;
  global_error_1 = 0;
  if (!a2) {
    goto LABEL_20;
  }
  unint64_t v7 = a3;
  if (!a3) {
    goto LABEL_20;
  }
  *(void *)&long long v16 = a2;
  *((void *)&v16 + 1) = a3;
  uint64_t v9 = ttsJSON_New_Item(a1);
  if (!v9)
  {
    unint64_t v13 = 0;
LABEL_22:
    unint64_t v14 = v7 - 1;
    if (!v7) {
      unint64_t v14 = 0;
    }
    if (v13 >= v7) {
      unint64_t v13 = v14;
    }
    if (a4) {
      *a4 = &a2[v13];
    }
    int v10 = 0;
    global_error_0 = (uint64_t)a2;
    global_error_1 = v13;
    return v10;
  }
  int v10 = v9;
  if (v7 >= 5 && !cstdlib_strncmp(a2, "﻿", 3uLL)) {
    *(void *)&long long v17 = 3;
  }
  unint64_t v11 = buffer_skip_whitespace((uint64_t *)&v16);
  if (!parse_value((uint64_t)v10, v11)) {
    goto LABEL_19;
  }
  if (a5)
  {
    unint64_t v12 = v17;
    if ((void)v16 && (unint64_t)v17 < *((void *)&v16 + 1))
    {
      while (*(unsigned __int8 *)(v16 + v12) <= 0x20u)
      {
        *(void *)&long long v17 = ++v12;
        if (*((void *)&v16 + 1) == v12) {
          goto LABEL_16;
        }
      }
      if (*((void *)&v16 + 1) != v12) {
        goto LABEL_17;
      }
LABEL_16:
      unint64_t v12 = *((void *)&v16 + 1) - 1;
      *(void *)&long long v17 = *((void *)&v16 + 1) - 1;
    }
LABEL_17:
    if (v12 >= *((void *)&v16 + 1) || *(unsigned char *)(v16 + v12))
    {
LABEL_19:
      ttsJSON_Delete(v10);
LABEL_20:
      if (!a2) {
        return 0;
      }
      unint64_t v7 = *((void *)&v16 + 1);
      unint64_t v13 = v17;
      goto LABEL_22;
    }
  }
  if (a4) {
    *a4 = v16 + v17;
  }
  return v10;
}

void *ttsJSON_New_Item(uint64_t a1)
{
  int v2 = (void *)heap_Alloc(a1, 72);
  int v3 = v2;
  if (v2)
  {
    cstdlib_memset(v2, 0, 0x48uLL);
    v3[8] = a1;
  }
  return v3;
}

uint64_t parse_value(uint64_t a1, uint64_t *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (!a2 || !*a2) {
    return 0;
  }
  unint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  if (v4 + 4 <= v5)
  {
    int v6 = cstdlib_strncmp((const char *)(*a2 + v4), "null", 4uLL);
    unint64_t v4 = a2[2];
    if (!v6)
    {
      *(_DWORD *)(a1 + 24) = 4;
      int64_t v12 = v4 + 4;
LABEL_18:
      a2[2] = v12;
      return 1;
    }
    unint64_t v5 = a2[1];
  }
  if (v4 + 5 <= v5)
  {
    int v7 = cstdlib_strncmp((const char *)(*a2 + v4), "false", 5uLL);
    unint64_t v4 = a2[2];
    if (!v7)
    {
      uint64_t result = 1;
      *(_DWORD *)(a1 + 24) = 1;
      uint64_t v13 = v4 + 5;
      goto LABEL_35;
    }
    unint64_t v5 = a2[1];
  }
  if (v4 + 4 <= v5)
  {
    int v8 = cstdlib_strncmp((const char *)(*a2 + v4), "true", 4uLL);
    unint64_t v4 = a2[2];
    if (!v8)
    {
      *(_DWORD *)(a1 + 24) = 2;
      uint64_t result = 1;
      *(_DWORD *)(a1 + 40) = 1;
      uint64_t v13 = v4 + 4;
      goto LABEL_35;
    }
    unint64_t v5 = a2[1];
  }
  if (v4 >= v5) {
    return 0;
  }
  uint64_t v9 = (unsigned char *)(*a2 + v4);
  int v10 = *v9;
  if (v10 != 34)
  {
    if (v10 == 45 || (v10 - 48) <= 9)
    {
      unint64_t v15 = 0;
      BOOL v16 = v5 >= v4;
      unint64_t v17 = v5 - v4;
      unsigned int v39 = 0;
      if (!v16) {
        unint64_t v17 = 0;
      }
      while (v17 != v15)
      {
        int v18 = v9[v15];
        if ((v18 - 48) < 0xA
          || ((v18 - 43) <= 0x3A
            ? (BOOL v19 = ((1 << (v18 - 43)) & 0x40000000400000DLL) == 0)
            : (BOOL v19 = 1),
              !v19))
        {
          v40[v15++] = v18;
          if (v15 != 63) {
            continue;
          }
        }
        goto LABEL_45;
      }
      unint64_t v15 = v17;
LABEL_45:
      v40[v15] = 0;
      cstdlib_strtod(v40, &v39);
      int v25 = v39;
      if (v40 != v39)
      {
        *(double *)(a1 + 48) = v24;
        if (v24 > -2147483650.0) {
          int v26 = (int)v24;
        }
        else {
          int v26 = 0x80000000;
        }
        if (v24 < 2147483650.0) {
          int v27 = v26;
        }
        else {
          int v27 = 0x7FFFFFFF;
        }
        *(_DWORD *)(a1 + 40) = v27;
        *(_DWORD *)(a1 + 24) = 8;
        int64_t v12 = v25 - v40 + a2[2];
        goto LABEL_18;
      }
      return 0;
    }
    if (v10 == 123)
    {
      unint64_t v28 = a2[3];
      if (v28 > 0x3E7) {
        return 0;
      }
      a2[3] = v28 + 1;
      if (*v9 != 123) {
        return 0;
      }
      a2[2] = v4 + 1;
      buffer_skip_whitespace(a2);
      unint64_t v21 = a2[2];
      if (v21 < a2[1])
      {
        if (*(unsigned char *)(*a2 + v21) == 125)
        {
          int v22 = 0;
          --a2[3];
LABEL_58:
          int v23 = 64;
          goto LABEL_59;
        }
        int v29 = 0;
        uint64_t v34 = 0;
        a2[2] = v21 - 1;
        while (1)
        {
          uint64_t v35 = ttsJSON_New_Item(*(void *)(a1 + 64));
          if (!v35) {
            break;
          }
          uint64_t v36 = (uint64_t)v35;
          int v22 = v35;
          if (v29)
          {
            *uint64_t v34 = v35;
            v35[1] = v34;
            int v22 = v29;
          }
          ++a2[2];
          buffer_skip_whitespace(a2);
          if (!parse_string(v36, a2)) {
            goto LABEL_82;
          }
          buffer_skip_whitespace(a2);
          *(void *)(v36 + 56) = *(void *)(v36 + 32);
          *(void *)(v36 + 32) = 0;
          unint64_t v37 = a2[2];
          if (v37 >= a2[1]) {
            goto LABEL_82;
          }
          if (*(unsigned char *)(*a2 + v37) != 58) {
            goto LABEL_82;
          }
          a2[2] = v37 + 1;
          buffer_skip_whitespace(a2);
          if (!parse_value(v36, a2)) {
            goto LABEL_82;
          }
          buffer_skip_whitespace(a2);
          unint64_t v21 = a2[2];
          if (v21 >= a2[1]) {
            goto LABEL_82;
          }
          int v38 = *(unsigned __int8 *)(*a2 + v21);
          int v29 = v22;
          uint64_t v34 = (void *)v36;
          if (v38 != 44)
          {
            if (v38 == 125)
            {
              --a2[3];
              v22[1] = v36;
              goto LABEL_58;
            }
LABEL_82:
            int v29 = v22;
            goto LABEL_83;
          }
        }
LABEL_85:
        if (v29) {
LABEL_83:
        }
          ttsJSON_Delete(v29);
        return 0;
      }
    }
    else
    {
      if (v10 != 91) {
        return 0;
      }
      unint64_t v20 = a2[3];
      if (v20 > 0x3E7) {
        return 0;
      }
      a2[3] = v20 + 1;
      if (*v9 != 91) {
        return 0;
      }
      a2[2] = v4 + 1;
      buffer_skip_whitespace(a2);
      unint64_t v21 = a2[2];
      if (v21 < a2[1])
      {
        if (*(unsigned char *)(*a2 + v21) == 93)
        {
          int v22 = 0;
          --a2[3];
LABEL_43:
          int v23 = 32;
LABEL_59:
          *(_DWORD *)(a1 + 24) = v23;
          *(void *)(a1 + 16) = v22;
          int64_t v12 = v21 + 1;
          goto LABEL_18;
        }
        int v29 = 0;
        char v30 = 0;
        a2[2] = v21 - 1;
        while (1)
        {
          unsigned int v31 = ttsJSON_New_Item(*(void *)(a1 + 64));
          if (!v31) {
            goto LABEL_85;
          }
          int v32 = v31;
          int v22 = v31;
          if (v29)
          {
            *char v30 = v31;
            v31[1] = v30;
            int v22 = v29;
          }
          ++a2[2];
          buffer_skip_whitespace(a2);
          if (!parse_value(v32, a2)) {
            goto LABEL_82;
          }
          buffer_skip_whitespace(a2);
          unint64_t v21 = a2[2];
          if (v21 >= a2[1]) {
            goto LABEL_82;
          }
          int v33 = *(unsigned __int8 *)(*a2 + v21);
          int v29 = v22;
          char v30 = v32;
          if (v33 != 44)
          {
            if (v33 != 93) {
              goto LABEL_82;
            }
            --a2[3];
            v22[1] = v32;
            goto LABEL_43;
          }
        }
      }
    }
    uint64_t result = 0;
    uint64_t v13 = v21 - 1;
LABEL_35:
    a2[2] = v13;
    return result;
  }

  return parse_string(a1, a2);
}

uint64_t *buffer_skip_whitespace(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if (*result)
    {
      unint64_t v2 = result[1];
      unint64_t v3 = result[2];
      if (v3 < v2)
      {
        while (*(unsigned __int8 *)(v1 + v3) <= 0x20u)
        {
          result[2] = ++v3;
          if (v2 == v3) {
            goto LABEL_9;
          }
        }
        if (v2 != v3) {
          return result;
        }
LABEL_9:
        result[2] = v2 - 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *ttsJSON_Parse(uint64_t a1, char *a2)
{
  return ttsJSON_ParseWithOpts(a1, a2, 0, 0);
}

void *ttsJSON_ParseWithLength(uint64_t a1, const char *a2, unint64_t a3)
{
  return ttsJSON_ParseWithLengthOpts(a1, a2, a3, 0, 0);
}

uint64_t ttsJSON_Print(uint64_t a1)
{
  return print(a1, 1);
}

uint64_t print(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  cstdlib_memset(v10, 0, 0x28uLL);
  uint64_t result = heap_Alloc(*(void *)(a1 + 64), 256);
  v10[0] = result;
  v10[1] = 256;
  int v12 = a2;
  if (!result) {
    return result;
  }
  print_value((const oid *)a1, (size_t)v10, v5);
  uint64_t v6 = v10[0];
  if (!v7) {
    goto LABEL_7;
  }
  size_t v8 = v11;
  if (v10[0])
  {
    size_t v9 = cstdlib_strlen((const char *)(v10[0] + v11));
    uint64_t v6 = v10[0];
    size_t v8 = v11 + v9;
    v11 += v9;
  }
  uint64_t result = heap_Realloc(*(uint64_t **)(a1 + 64), v6, v8 + 1);
  if (!result)
  {
    uint64_t v6 = v10[0];
LABEL_7:
    if (v6) {
      heap_Free(*(void **)(a1 + 64), v6);
    }
    return 0;
  }
  return result;
}

uint64_t ttsJSON_PrintUnformatted(uint64_t a1)
{
  return print(a1, 0);
}

uint64_t ttsJSON_PrintBuffered(uint64_t a1, unsigned int a2, int a3)
{
  v9[3] = 0;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v5 = a2;
    uint64_t result = heap_Alloc(*(void *)(a1 + 64), a2);
    v9[0] = result;
    if (!result) {
      return result;
    }
    v9[1] = v5;
    v9[2] = 0;
    int v10 = 0;
    int v11 = a3;
    print_value((const oid *)a1, (size_t)v9, v7);
    if (v8) {
      return v9[0];
    }
    heap_Free(*(void **)(a1 + 64), v9[0]);
  }
  return 0;
}

void print_value(const oid *objid, size_t objidlen, const netsnmp_variable_list *variable)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!objid || !objidlen) {
    return;
  }
  unsigned int v5 = *((unsigned __int8 *)objid + 24);
  if (v5 > 0xF)
  {
    if (*((unsigned __int8 *)objid + 24) > 0x3Fu)
    {
      if (v5 != 64)
      {
        if (v5 == 128)
        {
          unint64_t v17 = (const char *)objid[4];
          if (v17)
          {
            unint64_t v18 = cstdlib_strlen(v17) + 1;
            BOOL v19 = (void *)ensure(*((uint64_t **)objid + 8), objidlen, v18);
            if (v19) {
              cstdlib_memcpy(v19, *((const void **)objid + 4), v18);
            }
          }
        }
        return;
      }
      oid v25 = objid[2];
      if (*(_DWORD *)(objidlen + 36)) {
        uint64_t v26 = 2;
      }
      else {
        uint64_t v26 = 1;
      }
      int v27 = (unsigned char *)ensure(*((uint64_t **)objid + 8), objidlen, v26 + 1);
      if (!v27) {
        return;
      }
      unsigned char *v27 = 123;
      ++*(void *)(objidlen + 24);
      if (*(_DWORD *)(objidlen + 36)) {
        v27[1] = 10;
      }
      *(void *)(objidlen + 16) += v26;
      if (v25)
      {
        while (1)
        {
          if (*(_DWORD *)(objidlen + 36))
          {
            uint64_t v28 = ensure(*((uint64_t **)objid + 8), objidlen, *(void *)(objidlen + 24));
            if (!v28) {
              return;
            }
            unint64_t v29 = *(void *)(objidlen + 24);
            if (v29)
            {
              for (unint64_t i = 0; i < v29; ++i)
              {
                *(unsigned char *)(v28 + i) = 9;
                unint64_t v29 = *(void *)(objidlen + 24);
              }
            }
            *(void *)(objidlen + 16) += v29;
          }
          if (!print_string_ptr(*((uint64_t **)objid + 8), *(unsigned char **)(v25 + 56), objidlen)) {
            break;
          }
          if (*(void *)objidlen) {
            *(void *)(objidlen + 16) += cstdlib_strlen((const char *)(*(void *)objidlen + *(void *)(objidlen + 16)));
          }
          unint64_t v31 = *(_DWORD *)(objidlen + 36) ? 2 : 1;
          int v32 = (unsigned char *)ensure(*((uint64_t **)objid + 8), objidlen, v31);
          if (!v32) {
            break;
          }
          unsigned char *v32 = 58;
          if (*(_DWORD *)(objidlen + 36)) {
            v32[1] = 9;
          }
          *(void *)(objidlen + 16) += v31;
          print_value((const oid *)v25, objidlen, v33);
          if (!v34) {
            break;
          }
          if (*(void *)objidlen) {
            *(void *)(objidlen + 16) += cstdlib_strlen((const char *)(*(void *)objidlen + *(void *)(objidlen + 16)));
          }
          uint64_t v35 = *(_DWORD *)(objidlen + 36) ? (*(void *)v25 != 0) + 1 : *(void *)v25 != 0;
          uint64_t v36 = (unsigned char *)ensure(*((uint64_t **)objid + 8), objidlen, v35 + 1);
          if (!v36) {
            break;
          }
          if (*(void *)v25) {
            *v36++ = 44;
          }
          if (*(_DWORD *)(objidlen + 36)) {
            *v36++ = 10;
          }
          *uint64_t v36 = 0;
          *(void *)(objidlen + 16) += v35;
          oid v25 = *(void *)v25;
          if (!v25) {
            goto LABEL_76;
          }
        }
        return;
      }
LABEL_76:
      if (*(_DWORD *)(objidlen + 36)) {
        unint64_t v37 = *(void *)(objidlen + 24) + 1;
      }
      else {
        unint64_t v37 = 2;
      }
      unint64_t v15 = (_WORD *)ensure(*((uint64_t **)objid + 8), objidlen, v37);
      if (!v15) {
        return;
      }
      if (*(_DWORD *)(objidlen + 36) && *(void *)(objidlen + 24) != 1)
      {
        unint64_t v45 = 0;
        do
          *((unsigned char *)v15 + v45++) = 9;
        while (v45 < *(void *)(objidlen + 24) - 1);
        unint64_t v15 = (_WORD *)((char *)v15 + v45);
      }
      __int16 v16 = 125;
    }
    else
    {
      if (v5 == 16)
      {
        int v23 = (uint64_t *)objid[8];
        double v24 = (unsigned char *)objid[4];
        print_string_ptr(v23, v24, objidlen);
        return;
      }
      if (v5 != 32) {
        return;
      }
      int v8 = (const oid *)objid[2];
      size_t v9 = (unsigned char *)ensure(*((uint64_t **)objid + 8), objidlen, 1uLL);
      if (!v9) {
        return;
      }
      *size_t v9 = 91;
      *(int64x2_t *)(objidlen + 16) = vaddq_s64(*(int64x2_t *)(objidlen + 16), vdupq_n_s64(1uLL));
      if (v8)
      {
        while (1)
        {
          print_value(v8, objidlen, v10);
          if (!v11) {
            return;
          }
          if (*(void *)objidlen) {
            *(void *)(objidlen + 16) += cstdlib_strlen((const char *)(*(void *)objidlen + *(void *)(objidlen + 16)));
          }
          if (*v8)
          {
            if (*(_DWORD *)(objidlen + 36)) {
              uint64_t v12 = 2;
            }
            else {
              uint64_t v12 = 1;
            }
            uint64_t v13 = (unsigned char *)ensure(*((uint64_t **)objid + 8), objidlen, v12 + 1);
            if (!v13) {
              return;
            }
            *uint64_t v13 = 44;
            unint64_t v14 = v13 + 1;
            if (*(_DWORD *)(objidlen + 36))
            {
              unint64_t v14 = v13 + 2;
              v13[1] = 32;
            }
            unsigned char *v14 = 0;
            *(void *)(objidlen + 16) += v12;
            int v8 = (const oid *)*v8;
            if (v8) {
              continue;
            }
          }
          break;
        }
      }
      unint64_t v15 = (_WORD *)ensure(*((uint64_t **)objid + 8), objidlen, 2uLL);
      if (!v15) {
        return;
      }
      __int16 v16 = 93;
    }
    _WORD *v15 = v16;
    --*(void *)(objidlen + 24);
    return;
  }
  switch(*((unsigned char *)objid + 24))
  {
    case 1:
      uint64_t v6 = (char *)ensure(*((uint64_t **)objid + 8), objidlen, 6uLL);
      if (v6)
      {
        int v7 = "false";
        goto LABEL_34;
      }
      return;
    case 2:
      uint64_t v6 = (char *)ensure(*((uint64_t **)objid + 8), objidlen, 5uLL);
      if (v6)
      {
        int v7 = "true";
        goto LABEL_34;
      }
      return;
    case 4:
      uint64_t v6 = (char *)ensure(*((uint64_t **)objid + 8), objidlen, 5uLL);
      if (v6)
      {
        int v7 = "null";
LABEL_34:
        cstdlib_strcpy(v6, v7);
      }
      return;
    case 8:
      double v20 = *((double *)objid + 6);
      *(void *)uint64_t v47 = 0;
      uint64_t v48 = 0;
      __int16 v50 = 0;
      uint64_t v49 = 0;
      double v46 = 0.0;
      double v21 = fabs(v20);
      if (v21 == INFINITY)
      {
        int v22 = __sprintf_chk(v47, 0, 0x1AuLL, "null");
        goto LABEL_84;
      }
      if (v20 == (double)*((int *)objid + 10))
      {
        int v22 = __sprintf_chk(v47, 0, 0x1AuLL, "%d");
LABEL_84:
        unsigned int v38 = v22;
        goto LABEL_85;
      }
      unsigned int v38 = __sprintf_chk(v47, 0, 0x1AuLL, "%1.15g", v20);
      if (sscanf(v47, "%lg", &v46) != 1) {
        goto LABEL_83;
      }
      double v39 = fabs(v46);
      if (v39 <= v21) {
        double v39 = v21;
      }
      if (vabdd_f64(v46, v20) > v39 * 2.22044605e-16)
      {
LABEL_83:
        int v22 = __sprintf_chk(v47, 0, 0x1AuLL, "%1.17g");
        goto LABEL_84;
      }
LABEL_85:
      if (v38 <= 0x19)
      {
        uint64_t v40 = ensure(*((uint64_t **)objid + 8), objidlen, v38 + 1);
        if (v40)
        {
          if (v38)
          {
            uint64_t v41 = v47;
            uint64_t v42 = (unsigned char *)v40;
            uint64_t v43 = v38;
            do
            {
              char v44 = *v41++;
              *v42++ = v44;
              --v43;
            }
            while (v43);
          }
          *(unsigned char *)(v40 + v38) = 0;
          *(void *)(objidlen + 16) += v38;
        }
      }
      break;
    default:
      return;
  }
}

uint64_t ttsJSON_PrintPreallocated(const oid *a1, uint64_t a2, const netsnmp_variable_list *a3, int a4)
{
  uint64_t v4 = 0;
  v7[3] = 0;
  if (a2 && (a3 & 0x80000000) == 0)
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = 0;
    int v8 = 1;
    int v9 = a4;
    print_value(a1, (size_t)v7, a3);
    return v5;
  }
  return v4;
}

uint64_t ttsJSON_GetArraySize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)(result + 16);
    LODWORD(result) = -1;
    do
    {
      uint64_t v1 = (void *)*v1;
      uint64_t result = (result + 1);
    }
    while (v1);
  }
  return result;
}

void *ttsJSON_GetArrayItem(uint64_t a1, unsigned int a2)
{
  uint64_t result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    uint64_t v4 = a2;
    uint64_t result = (void *)(a1 + 16);
    do
    {
      uint64_t result = (void *)*result;
      BOOL v6 = v4-- != 0;
    }
    while (result && v6);
  }
  return result;
}

void *ttsJSON_GetObjectItem(uint64_t a1, char *a2)
{
  return get_object_item(a1, a2, 0);
}

void *get_object_item(uint64_t a1, char *__s1, int a3)
{
  uint64_t result = 0;
  if (a1 && __s1)
  {
    BOOL v6 = *(void **)(a1 + 16);
    if (a3)
    {
      if (v6)
      {
        while (1)
        {
          int v7 = (const char *)v6[7];
          if (!v7 || !cstdlib_strcmp(__s1, v7)) {
            break;
          }
          BOOL v6 = (void *)*v6;
          if (!v6) {
            return 0;
          }
        }
LABEL_20:
        if (v6[7]) {
          return v6;
        }
        else {
          return 0;
        }
      }
    }
    else if (v6)
    {
      while (1)
      {
        int v8 = (char *)v6[7];
        if (v8)
        {
          if (v8 == __s1) {
            goto LABEL_20;
          }
          int v9 = cstdlib_tolower(*__s1);
          int v10 = cstdlib_tolower(*v8);
          int v11 = __s1;
          while (v9 == v10)
          {
            if (!*v11) {
              goto LABEL_20;
            }
            unsigned int v12 = *++v11;
            int v9 = cstdlib_tolower(v12);
            unsigned int v13 = *++v8;
            int v10 = cstdlib_tolower(v13);
          }
          int v14 = cstdlib_tolower(*v11);
          if (v14 == cstdlib_tolower(*v8)) {
            goto LABEL_20;
          }
        }
        uint64_t result = 0;
        BOOL v6 = (void *)*v6;
        if (!v6) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

void *ttsJSON_GetObjectItemCaseSensitive(uint64_t a1, char *a2)
{
  return get_object_item(a1, a2, 1);
}

BOOL ttsJSON_HasObjectItem(uint64_t a1, char *a2)
{
  return get_object_item(a1, a2, 0) != 0;
}

uint64_t add_item_to_array(void *a1, void *a2)
{
  uint64_t result = 0;
  if (a1 != a2 && a1 && a2)
  {
    uint64_t v4 = a1[2];
    if (v4)
    {
      uint64_t v5 = *(void **)(v4 + 8);
      if (v5)
      {
        *uint64_t v5 = a2;
        a2[1] = v5;
        uint64_t result = 1;
        *(void *)(v4 + 8) = a2;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      a1[2] = a2;
      uint64_t result = 1;
      *a2 = 0;
      a2[1] = a2;
    }
  }
  return result;
}

uint64_t ttsJSON_AddItemToObject(void *a1, char *a2, uint64_t a3)
{
  return add_item_to_object(a1, a2, a3, 0);
}

uint64_t add_item_to_object(void *a1, char *__s, uint64_t a3, int a4)
{
  if (a1 == (void *)a3) {
    return 0;
  }
  if (!a1) {
    return 0;
  }
  uint64_t v5 = __s;
  if (!__s || !a3) {
    return 0;
  }
  if (a4)
  {
    int v7 = *(_DWORD *)(a3 + 24);
    unsigned int v8 = v7 | 0x200;
    if ((v7 & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v11 = *(void *)(a3 + 56);
    if (v11) {
      heap_Free((void *)a1[8], v11);
    }
    goto LABEL_12;
  }
  int v9 = (char *)ttsJSON_strdup(a1[8], __s);
  if (!v9) {
    return 0;
  }
  uint64_t v5 = v9;
  int v10 = *(_DWORD *)(a3 + 24);
  unsigned int v8 = v10 & 0xFFFFFDFF;
  if ((v10 & 0x200) == 0) {
    goto LABEL_10;
  }
LABEL_12:
  *(void *)(a3 + 56) = v5;
  *(_DWORD *)(a3 + 24) = v8;

  return add_item_to_array(a1, (void *)a3);
}

uint64_t ttsJSON_AddItemToObjectCS(void *a1, char *a2, uint64_t a3)
{
  return add_item_to_object(a1, a2, a3, 1);
}

uint64_t ttsJSON_AddItemReferenceToArray(void *a1, uint64_t *a2)
{
  if (!a1) {
    return 0;
  }
  reference = create_reference(a2);
  uint64_t v4 = 0;
  if (reference != a1 && reference)
  {
    uint64_t v5 = a1[2];
    if (v5)
    {
      BOOL v6 = *(void **)(v5 + 8);
      if (v6)
      {
        *BOOL v6 = reference;
        reference[1] = v6;
        uint64_t v4 = 1;
        *(void *)(v5 + 8) = reference;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      a1[2] = reference;
      uint64_t v4 = 1;
      void *reference = 0;
      reference[1] = reference;
    }
  }
  return v4;
}

void *create_reference(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = ttsJSON_New_Item(a1[8]);
  unint64_t v3 = v2;
  if (v2)
  {
    cstdlib_memcpy(v2, a1, 0x48uLL);
    v3[7] = 0;
    *((_DWORD *)v3 + 6) |= 0x100u;
    *unint64_t v3 = 0;
    v3[1] = 0;
  }
  return v3;
}

uint64_t ttsJSON_AddItemReferenceToObject(void *a1, char *a2, uint64_t *a3)
{
  if (!a1 || !a2) {
    return 0;
  }
  reference = create_reference(a3);

  return add_item_to_object(a1, a2, (uint64_t)reference, 0);
}

void *ttsJSON_AddNullToObject(void *a1, char *a2)
{
  uint64_t v4 = ttsJSON_New_Item(a1[8]);
  uint64_t v5 = v4;
  if (v4) {
    *((_DWORD *)v4 + 6) = 4;
  }
  if (!add_item_to_object(a1, a2, (uint64_t)v4, 0))
  {
    ttsJSON_Delete(v5);
    return 0;
  }
  return v5;
}

void *ttsJSON_CreateNull(uint64_t a1)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result) {
    *((_DWORD *)result + 6) = 4;
  }
  return result;
}

void *ttsJSON_AddTrueToObject(void *a1, char *a2)
{
  uint64_t v4 = ttsJSON_New_Item(a1[8]);
  uint64_t v5 = v4;
  if (v4) {
    *((_DWORD *)v4 + 6) = 2;
  }
  if (!add_item_to_object(a1, a2, (uint64_t)v4, 0))
  {
    ttsJSON_Delete(v5);
    return 0;
  }
  return v5;
}

void *ttsJSON_CreateTrue(uint64_t a1)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result) {
    *((_DWORD *)result + 6) = 2;
  }
  return result;
}

void *ttsJSON_AddFalseToObject(void *a1, char *a2)
{
  uint64_t v4 = ttsJSON_New_Item(a1[8]);
  uint64_t v5 = v4;
  if (v4) {
    *((_DWORD *)v4 + 6) = 1;
  }
  if (!add_item_to_object(a1, a2, (uint64_t)v4, 0))
  {
    ttsJSON_Delete(v5);
    return 0;
  }
  return v5;
}

void *ttsJSON_CreateFalse(uint64_t a1)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result) {
    *((_DWORD *)result + 6) = 1;
  }
  return result;
}

void *ttsJSON_AddBoolToObject(void *a1, char *a2, int a3)
{
  BOOL v6 = ttsJSON_New_Item(a1[8]);
  int v7 = v6;
  if (v6)
  {
    if (a3) {
      int v8 = 2;
    }
    else {
      int v8 = 1;
    }
    *((_DWORD *)v6 + 6) = v8;
  }
  if (!add_item_to_object(a1, a2, (uint64_t)v6, 0))
  {
    ttsJSON_Delete(v7);
    return 0;
  }
  return v7;
}

void *ttsJSON_CreateBool(uint64_t a1, int a2)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result)
  {
    if (a2) {
      int v4 = 2;
    }
    else {
      int v4 = 1;
    }
    *((_DWORD *)result + 6) = v4;
  }
  return result;
}

void *ttsJSON_AddNumberToObject(void *a1, char *a2, double a3)
{
  BOOL v6 = ttsJSON_New_Item(a1[8]);
  int v7 = v6;
  if (v6)
  {
    *((_DWORD *)v6 + 6) = 8;
    *((double *)v6 + 6) = a3;
    if (a3 > -2147483650.0) {
      int v8 = (int)a3;
    }
    else {
      int v8 = 0x80000000;
    }
    if (a3 < 2147483650.0) {
      int v9 = v8;
    }
    else {
      int v9 = 0x7FFFFFFF;
    }
    *((_DWORD *)v6 + 10) = v9;
  }
  if (!add_item_to_object(a1, a2, (uint64_t)v6, 0))
  {
    ttsJSON_Delete(v7);
    return 0;
  }
  return v7;
}

void *ttsJSON_CreateNumber(uint64_t a1, double a2)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result)
  {
    *((_DWORD *)result + 6) = 8;
    *((double *)result + 6) = a2;
    if (a2 >= 2147483650.0)
    {
      int v4 = 0x7FFFFFFF;
    }
    else if (a2 > -2147483650.0)
    {
      int v4 = (int)a2;
    }
    else
    {
      int v4 = 0x80000000;
    }
    *((_DWORD *)result + 10) = v4;
  }
  return result;
}

void *ttsJSON_AddStringToObject(void *a1, char *a2, char *a3)
{
  uint64_t String = ttsJSON_CreateString(a1[8], a3);
  if (!add_item_to_object(a1, a2, (uint64_t)String, 0))
  {
    ttsJSON_Delete(String);
    return 0;
  }
  return String;
}

void *ttsJSON_CreateString(uint64_t a1, char *a2)
{
  int v4 = ttsJSON_New_Item(a1);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 6) = 16;
    BOOL v6 = ttsJSON_strdup(a1, a2);
    v5[4] = v6;
    if (!v6)
    {
      ttsJSON_Delete(v5);
      return 0;
    }
  }
  return v5;
}

void *ttsJSON_AddRawToObject(void *a1, char *a2, char *a3)
{
  Raw = ttsJSON_CreateRaw(a1[8], a3);
  if (!add_item_to_object(a1, a2, (uint64_t)Raw, 0))
  {
    ttsJSON_Delete(Raw);
    return 0;
  }
  return Raw;
}

void *ttsJSON_CreateRaw(uint64_t a1, char *a2)
{
  int v4 = ttsJSON_New_Item(a1);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 6) = 128;
    BOOL v6 = ttsJSON_strdup(a1, a2);
    v5[4] = v6;
    if (!v6)
    {
      ttsJSON_Delete(v5);
      return 0;
    }
  }
  return v5;
}

void *ttsJSON_AddObjectToObject(void *a1, char *a2)
{
  int v4 = ttsJSON_New_Item(a1[8]);
  uint64_t v5 = v4;
  if (v4) {
    *((_DWORD *)v4 + 6) = 64;
  }
  if (!add_item_to_object(a1, a2, (uint64_t)v4, 0))
  {
    ttsJSON_Delete(v5);
    return 0;
  }
  return v5;
}

void *ttsJSON_CreateObject(uint64_t a1)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result) {
    *((_DWORD *)result + 6) = 64;
  }
  return result;
}

void *ttsJSON_AddArrayToObject(void *a1, char *a2)
{
  int v4 = ttsJSON_New_Item(a1[8]);
  uint64_t v5 = v4;
  if (v4) {
    *((_DWORD *)v4 + 6) = 32;
  }
  if (!add_item_to_object(a1, a2, (uint64_t)v4, 0))
  {
    ttsJSON_Delete(v5);
    return 0;
  }
  return v5;
}

void *ttsJSON_CreateArray(uint64_t a1)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result) {
    *((_DWORD *)result + 6) = 32;
  }
  return result;
}

void *ttsJSON_DetachItemViaPointer(uint64_t a1, void *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = *a2;
    if (v3 == a2)
    {
      if (v4) {
        *(void *)(v4 + 8) = a2[1];
      }
      *(void *)(a1 + 16) = v4;
    }
    else
    {
      uint64_t v5 = (void *)a2[1];
      *uint64_t v5 = v4;
      if (*a2) {
        *(void *)(*a2 + 8) = v5;
      }
      else {
        v3[1] = v5;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    return a2;
  }
  return (void *)v2;
}

void *ttsJSON_DetachItemFromArray(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  if (a1)
  {
    uint64_t v2 = a2;
    unint64_t v3 = (void *)(a1 + 16);
    do
    {
      unint64_t v3 = (void *)*v3;
      BOOL v5 = v2-- != 0;
    }
    while (v3 && v5);
  }
  else
  {
    unint64_t v3 = 0;
  }
  return ttsJSON_DetachItemViaPointer(a1, v3);
}

void *ttsJSON_DeleteItemFromArray(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = ttsJSON_DetachItemFromArray(a1, a2);

  return ttsJSON_Delete(v2);
}

void *ttsJSON_DetachItemFromObject(uint64_t a1, char *a2)
{
  object_item = get_object_item(a1, a2, 0);

  return ttsJSON_DetachItemViaPointer(a1, object_item);
}

void *ttsJSON_DetachItemFromObjectCaseSensitive(uint64_t a1, char *a2)
{
  object_item = get_object_item(a1, a2, 1);

  return ttsJSON_DetachItemViaPointer(a1, object_item);
}

void *ttsJSON_DeleteItemFromObject(uint64_t a1, char *a2)
{
  object_item = get_object_item(a1, a2, 0);
  uint64_t v4 = ttsJSON_DetachItemViaPointer(a1, object_item);

  return ttsJSON_Delete(v4);
}

void *ttsJSON_DeleteItemFromObjectCaseSensitive(uint64_t a1, char *a2)
{
  object_item = get_object_item(a1, a2, 1);
  uint64_t v4 = ttsJSON_DetachItemViaPointer(a1, object_item);

  return ttsJSON_Delete(v4);
}

uint64_t ttsJSON_InsertItemInArray(void *a1, unsigned int a2, void *a3)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  if (!a1) {
    return add_item_to_array(a1, a3);
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1 + 2;
  BOOL v5 = a1 + 2;
  do
  {
    BOOL v5 = (void *)*v5;
    BOOL v7 = v3-- != 0;
  }
  while (v5 && v7);
  if (!v5) {
    return add_item_to_array(a1, a3);
  }
  uint64_t v8 = v5[1];
  *a3 = v5;
  a3[1] = v8;
  v5[1] = a3;
  if (v5 != (void *)*v4) {
    uint64_t v4 = (void *)a3[1];
  }
  void *v4 = a3;
  return 1;
}

uint64_t ttsJSON_ReplaceItemViaPointer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = 0;
  if (a2 && a1 && a3)
  {
    if (a3 != a2)
    {
      long long v4 = *(_OWORD *)a2;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      uint64_t v5 = v4;
      if ((void)v4) {
        *(void *)(v4 + 8) = a3;
      }
      uint64_t v8 = *(void **)(a1 + 16);
      BOOL v6 = (void *)(a1 + 16);
      BOOL v7 = v8;
      if (v8 == a2)
      {
        if ((void *)a2[1] == a2) {
          a3[1] = a3;
        }
      }
      else
      {
        int v9 = (void *)a3[1];
        if (v9)
        {
          *int v9 = a3;
          uint64_t v5 = *a3;
        }
        if (v5) {
          goto LABEL_16;
        }
        BOOL v6 = v7 + 1;
      }
      *BOOL v6 = a3;
LABEL_16:
      *a2 = 0;
      a2[1] = 0;
      ttsJSON_Delete(a2);
      return 1;
    }
    return 1;
  }
  return v3;
}

uint64_t ttsJSON_ReplaceItemInArray(uint64_t a1, unsigned int a2, void *a3)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  if (a1)
  {
    uint64_t v3 = a2;
    long long v4 = (void *)(a1 + 16);
    do
    {
      long long v4 = (void *)*v4;
      BOOL v6 = v3-- != 0;
    }
    while (v4 && v6);
  }
  else
  {
    long long v4 = 0;
  }
  return ttsJSON_ReplaceItemViaPointer(a1, v4, a3);
}

uint64_t ttsJSON_ReplaceItemInObject(uint64_t a1, char *a2, uint64_t a3)
{
  return replace_item_in_object(a1, a2, a3, 0);
}

uint64_t replace_item_in_object(uint64_t a1, char *__s, uint64_t a3, int a4)
{
  if (!__s || !a3) {
    return 0;
  }
  if ((*(unsigned char *)(a3 + 25) & 2) == 0)
  {
    uint64_t v8 = *(void *)(a3 + 56);
    if (v8) {
      heap_Free(*(void **)(a1 + 64), v8);
    }
  }
  int v9 = ttsJSON_strdup(*(void *)(a1 + 64), __s);
  *(void *)(a3 + 56) = v9;
  if (!v9) {
    return 0;
  }
  *(_DWORD *)(a3 + 24) &= ~0x200u;
  object_item = get_object_item(a1, __s, a4);

  return ttsJSON_ReplaceItemViaPointer(a1, object_item, (void *)a3);
}

uint64_t ttsJSON_ReplaceItemInObjectCaseSensitive(uint64_t a1, char *a2, uint64_t a3)
{
  return replace_item_in_object(a1, a2, a3, 1);
}

void *ttsJSON_CreateStringReference(uint64_t a1, uint64_t a2)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result)
  {
    *((_DWORD *)result + 6) = 272;
    result[4] = a2;
  }
  return result;
}

void *ttsJSON_CreateObjectReference(uint64_t a1, uint64_t a2)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result)
  {
    *((_DWORD *)result + 6) = 320;
    result[2] = a2;
  }
  return result;
}

void *ttsJSON_CreateArrayReference(uint64_t a1, uint64_t a2)
{
  uint64_t result = ttsJSON_New_Item(a1);
  if (result)
  {
    *((_DWORD *)result + 6) = 288;
    result[2] = a2;
  }
  return result;
}

void *ttsJSON_CreateIntArray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      BOOL v7 = ttsJSON_New_Item(a1);
      uint64_t v3 = v7;
      if (v7)
      {
        *((_DWORD *)v7 + 6) = 32;
        if (a3)
        {
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          while (1)
          {
            int v10 = *(_DWORD *)(a2 + 4 * v9);
            uint64_t v11 = ttsJSON_New_Item(a1);
            if (!v11) {
              break;
            }
            *((_DWORD *)v11 + 6) = 8;
            *((double *)v11 + 6) = (double)v10;
            *((_DWORD *)v11 + 10) = v10;
            if (v9)
            {
              *uint64_t v8 = v11;
              v11[1] = v8;
            }
            else
            {
              v3[2] = v11;
            }
            ++v9;
            uint64_t v8 = v11;
            if (v9 >= a3) {
              goto LABEL_13;
            }
          }
          ttsJSON_Delete(v3);
          return 0;
        }
        else
        {
          uint64_t v11 = 0;
LABEL_13:
          uint64_t v12 = v3[2];
          if (v12) {
            *(void *)(v12 + 8) = v11;
          }
        }
      }
    }
  }
  return v3;
}

void *ttsJSON_CreateFloatArray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      BOOL v7 = ttsJSON_New_Item(a1);
      uint64_t v3 = v7;
      if (v7)
      {
        *((_DWORD *)v7 + 6) = 32;
        if (a3)
        {
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          while (1)
          {
            float v10 = *(float *)(a2 + 4 * v9);
            uint64_t v11 = ttsJSON_New_Item(a1);
            if (!v11) {
              break;
            }
            *((_DWORD *)v11 + 6) = 8;
            *((double *)v11 + 6) = v10;
            if (v10 >= 2147483650.0)
            {
              int v12 = 0x7FFFFFFF;
            }
            else if (v10 <= -2147500000.0)
            {
              int v12 = 0x80000000;
            }
            else
            {
              int v12 = (int)v10;
            }
            *((_DWORD *)v11 + 10) = v12;
            if (v9)
            {
              *uint64_t v8 = v11;
              v11[1] = v8;
            }
            else
            {
              v3[2] = v11;
            }
            ++v9;
            uint64_t v8 = v11;
            if (v9 >= a3) {
              goto LABEL_18;
            }
          }
          ttsJSON_Delete(v3);
          return 0;
        }
        else
        {
          uint64_t v11 = 0;
LABEL_18:
          uint64_t v13 = v3[2];
          if (v13) {
            *(void *)(v13 + 8) = v11;
          }
        }
      }
    }
  }
  return v3;
}

void *ttsJSON_CreateDoubleArray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      BOOL v7 = ttsJSON_New_Item(a1);
      uint64_t v3 = v7;
      if (v7)
      {
        *((_DWORD *)v7 + 6) = 32;
        if (a3)
        {
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          while (1)
          {
            double v10 = *(double *)(a2 + 8 * v9);
            uint64_t v11 = ttsJSON_New_Item(a1);
            if (!v11) {
              break;
            }
            *((_DWORD *)v11 + 6) = 8;
            *((double *)v11 + 6) = v10;
            if (v10 >= 2147483650.0)
            {
              int v12 = 0x7FFFFFFF;
            }
            else if (v10 <= -2147483650.0)
            {
              int v12 = 0x80000000;
            }
            else
            {
              int v12 = (int)v10;
            }
            *((_DWORD *)v11 + 10) = v12;
            if (v9)
            {
              *uint64_t v8 = v11;
              v11[1] = v8;
            }
            else
            {
              v3[2] = v11;
            }
            ++v9;
            uint64_t v8 = v11;
            if (v9 >= a3) {
              goto LABEL_18;
            }
          }
          ttsJSON_Delete(v3);
          return 0;
        }
        else
        {
          uint64_t v11 = 0;
LABEL_18:
          uint64_t v13 = v3[2];
          if (v13) {
            *(void *)(v13 + 8) = v11;
          }
        }
      }
    }
  }
  return v3;
}

void *ttsJSON_CreateStringArray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      BOOL v7 = ttsJSON_New_Item(a1);
      uint64_t v3 = v7;
      if (v7)
      {
        *((_DWORD *)v7 + 6) = 32;
        if (a3)
        {
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          while (1)
          {
            uint64_t String = ttsJSON_CreateString(a1, *(char **)(a2 + 8 * v9));
            if (!String) {
              break;
            }
            if (v9)
            {
              *uint64_t v8 = String;
              String[1] = v8;
            }
            else
            {
              v3[2] = String;
            }
            ++v9;
            uint64_t v8 = String;
            if (v9 >= a3) {
              goto LABEL_13;
            }
          }
          ttsJSON_Delete(v3);
          return 0;
        }
        else
        {
          uint64_t String = 0;
LABEL_13:
          uint64_t v11 = v3[2];
          if (v11) {
            *(void *)(v11 + 8) = String;
          }
        }
      }
    }
  }
  return v3;
}

void *ttsJSON_Duplicate(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  long long v4 = ttsJSON_New_Item(*(void *)(a1 + 64));
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 6) = *(_DWORD *)(a1 + 24) & 0xFFFFFEFF;
    *((_DWORD *)v4 + 10) = *(_DWORD *)(a1 + 40);
    v4[6] = *(void *)(a1 + 48);
    BOOL v6 = *(char **)(a1 + 32);
    if (v6)
    {
      BOOL v7 = ttsJSON_strdup(*(void *)(a1 + 64), v6);
      v5[4] = v7;
      if (!v7) {
        goto LABEL_8;
      }
    }
    uint64_t v8 = *(char **)(a1 + 56);
    if (v8)
    {
      if ((*(unsigned char *)(a1 + 25) & 2) != 0)
      {
        v5[7] = v8;
      }
      else
      {
        unint64_t v9 = ttsJSON_strdup(*(void *)(a1 + 64), v8);
        v5[7] = v9;
        if (!v9)
        {
LABEL_8:
          ttsJSON_Delete(v5);
          return 0;
        }
      }
    }
    if (!a2) {
      return v5;
    }
    uint64_t v11 = *(void **)(a1 + 16);
    if (v11)
    {
      int v12 = 0;
      while (1)
      {
        uint64_t v13 = ttsJSON_Duplicate(v11, 1);
        if (!v13) {
          goto LABEL_8;
        }
        if (v12)
        {
          *int v12 = v13;
          *(void *)(v13 + 8) = v12;
        }
        else
        {
          v5[2] = v13;
        }
        uint64_t v11 = (void *)*v11;
        int v12 = (void *)v13;
        if (!v11) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v13 = 0;
LABEL_22:
    uint64_t v14 = v5[2];
    if (v14) {
      *(void *)(v14 + 8) = v13;
    }
  }
  return v5;
}

unsigned __int8 *ttsJSON_Minify(unsigned __int8 *result)
{
  if (result)
  {
    LOBYTE(v1) = *result;
    if (*result)
    {
      uint64_t v2 = result;
      while (1)
      {
        while (1)
        {
          uint64_t v3 = (char)v1;
          if (v3 > 0x2F)
          {
LABEL_22:
            *result++ = v1;
            goto LABEL_31;
          }
          if (((1 << v1) & 0x100002600) == 0) {
            break;
          }
LABEL_31:
          ++v2;
LABEL_32:
          LOBYTE(v1) = *v2;
          if (!*v2) {
            goto LABEL_33;
          }
        }
        if (v3 == 34) {
          break;
        }
        if (v3 != 47) {
          goto LABEL_22;
        }
        int v1 = v2[1];
        if (v1 == 42)
        {
          for (v2 += 4; ; ++v2)
          {
            if (*(v2 - 2) == 42)
            {
              if (*(v2 - 1) == 47) {
                goto LABEL_32;
              }
            }
            else if (!*(v2 - 2))
            {
              goto LABEL_33;
            }
          }
        }
        if (v1 == 47)
        {
          for (v2 += 3; *(v2 - 1); ++v2)
          {
            if (*(v2 - 1) == 10) {
              goto LABEL_32;
            }
          }
          goto LABEL_33;
        }
        ++v2;
        if (!v1) {
          goto LABEL_33;
        }
      }
      *result++ = v1;
      int v5 = *++v2;
      unsigned __int8 v4 = v5;
      if (v5)
      {
        do
        {
          *uint64_t result = v4;
          int v6 = *v2;
          if (v6 == 92)
          {
            if (v2[1] == 34)
            {
              *++uint64_t result = 34;
              ++v2;
            }
          }
          else if (v6 == 34)
          {
            *result++ = 34;
            goto LABEL_31;
          }
          int v7 = *++v2;
          unsigned __int8 v4 = v7;
          ++result;
        }
        while (v7);
      }
    }
LABEL_33:
    *uint64_t result = 0;
  }
  return result;
}

BOOL ttsJSON_IsInvalid(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 24) == 0;
  }
  return result;
}

BOOL ttsJSON_IsFalse(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 1;
  }
  return result;
}

BOOL ttsJSON_IsTrue(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 2;
  }
  return result;
}

BOOL ttsJSON_IsBool(BOOL result)
{
  if (result) {
    return (*(unsigned char *)(result + 24) & 3) != 0;
  }
  return result;
}

BOOL ttsJSON_IsNull(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 4;
  }
  return result;
}

BOOL ttsJSON_IsArray(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 32;
  }
  return result;
}

BOOL ttsJSON_IsObject(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 64;
  }
  return result;
}

BOOL ttsJSON_IsRaw(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 24) == 128;
  }
  return result;
}

uint64_t ttsJSON_Compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = 0;
  if (!a1 || !a2) {
    return v3;
  }
  int v6 = *(_DWORD *)(a1 + 24);
  if (*(unsigned char *)(a2 + 24) != v6) {
    return 0;
  }
  BOOL v9 = *(_DWORD *)(a1 + 24) - 1 > 0x3F
    || ((1 << (v6 - 1)) & 0x800000008000808BLL) == 0;
  if (v9 && *(_DWORD *)(a1 + 24) != 128) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 24);
  if (v10 <= 0xF)
  {
    BOOL v3 = 1;
    if (v10 - 1 < 2 || v10 == 4) {
      return v3;
    }
    if (v10 == 8)
    {
      double v11 = *(double *)(a1 + 48);
      double v12 = *(double *)(a2 + 48);
      double v13 = fabs(v11);
      double v14 = fabs(v12);
      if (v13 <= v14) {
        double v13 = v14;
      }
      return vabdd_f64(v11, v12) <= v13 * 2.22044605e-16;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 24) <= 0x3Fu)
  {
    if (v10 != 16)
    {
      if (v10 != 32) {
        return 0;
      }
      unint64_t v15 = (void *)(a1 + 16);
      __int16 v16 = (void *)(a2 + 16);
      while (1)
      {
        __int16 v16 = (void *)*v16;
        unint64_t v15 = (void *)*v15;
        if (!v15 || v16 == 0) {
          break;
        }
        BOOL v3 = 0;
        if (!ttsJSON_Compare(v15, v16, a3)) {
          return v3;
        }
      }
      return v15 == v16;
    }
LABEL_33:
    unint64_t v18 = *(const char **)(a1 + 32);
    if (!v18) {
      return 0;
    }
    BOOL v19 = *(const char **)(a2 + 32);
    if (!v19) {
      return 0;
    }
    return cstdlib_strcmp(v18, v19) == 0;
  }
  if (v10 != 64)
  {
    if (v10 != 128) {
      return 0;
    }
    goto LABEL_33;
  }
  uint64_t v21 = a1 + 16;
  BOOL v3 = 0;
  while (1)
  {
    uint64_t v21 = *(void *)v21;
    if (!v21) {
      break;
    }
    object_item = get_object_item(a2, *(char **)(v21 + 56), a3);
    if (!object_item) {
      return 0;
    }
    if (!ttsJSON_Compare(v21, object_item, a3)) {
      return v3;
    }
  }
  uint64_t v23 = a2 + 16;
  do
  {
    uint64_t v23 = *(void *)v23;
    BOOL v3 = v23 == 0;
    if (!v23) {
      break;
    }
    double v24 = get_object_item(a1, *(char **)(v23 + 56), a3);
    if (!v24) {
      break;
    }
  }
  while (ttsJSON_Compare(v23, v24, a3));
  return v3;
}

uint64_t parse_string(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = (unsigned char *)(*a2 + a2[2]);
  int v5 = v4 + 1;
  if (*v4 != 34) {
    goto LABEL_10;
  }
  unint64_t v6 = a2[1];
  if ((unint64_t)&v5[-v3] >= v6) {
    goto LABEL_10;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 1;
  unsigned int v10 = v4 + 1;
  while (1)
  {
    int v11 = v4[v9];
    if (v11 == 92)
    {
      if ((unint64_t)&v4[++v9 - v3] >= v6) {
        goto LABEL_10;
      }
      ++v8;
      goto LABEL_9;
    }
    if (v11 == 34) {
      break;
    }
LABEL_9:
    unsigned int v10 = &v4[++v9];
    if ((unint64_t)&v4[v9 - v3] >= v6) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = heap_Alloc(*(void *)(a1 + 64), v10 - &v4[v8] + 1);
  if (!v14)
  {
LABEL_10:
    uint64_t result = 0;
    uint64_t v13 = (uint64_t)&v5[-*a2];
    goto LABEL_11;
  }
  uint64_t v15 = v14;
  __int16 v16 = (unsigned char *)v14;
  if (v9 >= 2)
  {
    unint64_t v17 = &v4[v9];
    __int16 v16 = (unsigned char *)v14;
    while (1)
    {
      int v18 = *v5;
      if (v18 == 92) {
        break;
      }
      ++v5;
      *v16++ = v18;
LABEL_31:
      if (v5 >= v17) {
        goto LABEL_57;
      }
    }
    if (v10 - v5 < 1) {
      goto LABEL_58;
    }
    unsigned int v19 = v5[1];
    if (v19 <= 0x61)
    {
      if (v19 != 34 && v19 != 47 && v19 != 92) {
        goto LABEL_58;
      }
LABEL_28:
      *v16++ = v19;
LABEL_29:
      uint64_t v20 = 2;
      goto LABEL_30;
    }
    switch(v5[1])
    {
      case 'n':
        LOBYTE(v19) = 10;
        goto LABEL_28;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_58;
      case 'r':
        *v16++ = 13;
        goto LABEL_29;
      case 't':
        *v16++ = 9;
        goto LABEL_29;
      case 'u':
        if ((unint64_t)(v10 - v5) < 6) {
          goto LABEL_58;
        }
        unsigned int v21 = parse_hex4((uint64_t)(v5 + 2));
        unsigned int v22 = v21;
        if ((v21 & 0xFFFFFC00) == 0xD800)
        {
          if (v10 - (v5 + 6) < 6
            || v5[6] != 92
            || v5[7] != 117
            || (int v25 = parse_hex4((uint64_t)(v5 + 8)), (v25 - 57344) < 0xFFFFFC00))
          {
LABEL_58:
            heap_Free(*(void **)(a1 + 64), v15);
            goto LABEL_10;
          }
          unsigned int v22 = (v25 & 0x3FF | ((v22 & 0x3FF) << 10)) + 0x10000;
          uint64_t v20 = 12;
        }
        else
        {
          if ((v21 & 0xFFFFFC00) == 0xDC00) {
            goto LABEL_58;
          }
          if (v21 < 0x80)
          {
            char v28 = v21;
            uint64_t v20 = 6;
            uint64_t v23 = 1;
LABEL_52:
            *__int16 v16 = v28;
            v16 += v23;
LABEL_30:
            v5 += v20;
            goto LABEL_31;
          }
          if (v21 < 0x800)
          {
            uint64_t v20 = 6;
            uint64_t v23 = 2;
            char v24 = -64;
            goto LABEL_48;
          }
          if (v21 < 0x10000)
          {
            uint64_t v20 = 6;
            uint64_t v23 = 3;
            char v24 = -32;
LABEL_48:
            unint64_t v26 = v22;
            uint64_t v27 = (v23 - 1);
            do
            {
              v16[v27] = v26 & 0x3F | 0x80;
              v26 >>= 6;
              --v27;
            }
            while ((_BYTE)v27);
            char v28 = v26 | v24;
            goto LABEL_52;
          }
          if (HIWORD(v21) > 0x10u) {
            goto LABEL_58;
          }
          uint64_t v20 = 6;
        }
        uint64_t v23 = 4;
        char v24 = -16;
        goto LABEL_48;
      default:
        if (v19 == 102)
        {
          *v16++ = 12;
          goto LABEL_29;
        }
        if (v19 != 98) {
          goto LABEL_58;
        }
        LOBYTE(v19) = 8;
        goto LABEL_28;
    }
  }
LABEL_57:
  *__int16 v16 = 0;
  *(_DWORD *)(a1 + 24) = 16;
  *(void *)(a1 + 32) = v15;
  uint64_t v13 = (uint64_t)&v10[-*a2 + 1];
  uint64_t result = 1;
LABEL_11:
  a2[2] = v13;
  return result;
}

uint64_t parse_hex4(uint64_t a1)
{
  unint64_t v1 = 0;
  LODWORD(v2) = 0;
  while (1)
  {
    int v3 = *(unsigned __int8 *)(a1 + v1);
    if ((v3 - 48) >= 0xA) {
      break;
    }
    int v4 = -48;
LABEL_8:
    LODWORD(v2) = v4 + v2 + v3;
    if (v1 >= 3) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = (16 * v2);
    }
    if (++v1 == 4) {
      return v2;
    }
  }
  if ((v3 - 65) < 6)
  {
    int v4 = -55;
    goto LABEL_8;
  }
  if ((v3 - 97) <= 5)
  {
    int v4 = -87;
    goto LABEL_8;
  }
  return 0;
}

uint64_t ensure(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = *(void *)a2;
  if (!v4) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  if (!v6)
  {
    if (a3 >> 31) {
      return 0;
    }
    unint64_t v8 = *(void *)(a2 + 16);
LABEL_8:
    unint64_t v9 = a3 + v8 + 1;
    if (v9 <= v6) {
      return v4 + v8;
    }
    if (!*(_DWORD *)(a2 + 32))
    {
      if (v9 >> 30)
      {
        if (v9 >> 31) {
          return 0;
        }
        uint64_t v10 = 0x7FFFFFFFLL;
      }
      else
      {
        uint64_t v10 = 2 * v9;
      }
      uint64_t v11 = heap_Realloc(a1, v4, v10);
      if (v11)
      {
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = v10;
        return v11 + *(void *)(a2 + 16);
      }
      else
      {
        heap_Free(a1, *(void *)a2);
        uint64_t result = 0;
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
      }
      return result;
    }
    return 0;
  }
  uint64_t result = 0;
  if (!(a3 >> 31))
  {
    unint64_t v8 = *(void *)(a2 + 16);
    if (v8 < v6) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t print_string_ptr(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  if (a2)
  {
    size_t v4 = 0;
    uint64_t v5 = 0;
    while (1)
    {
      unsigned int v6 = a2[v4];
      if (v6 <= 0x22)
      {
        if (((1 << v6) & 0x400003700) != 0) {
          goto LABEL_5;
        }
        if (!a2[v4])
        {
          uint64_t result = ensure(a1, a3, v5 + v4 + 3);
          if (result)
          {
            uint64_t v8 = result;
            *(unsigned char *)uint64_t result = 34;
            if (v5)
            {
              LOBYTE(v9) = *a2;
              if (*a2)
              {
                uint64_t v10 = a2 + 1;
                uint64_t v11 = (char *)result;
                do
                {
                  if (v9 < 0x20u || v9 == 34 || v9 == 92)
                  {
                    double v12 = v11 + 2;
                    v11[1] = 92;
                    int v9 = *(v10 - 1);
                    switch(*(v10 - 1))
                    {
                      case 8:
                        LOBYTE(v9) = 98;
                        goto LABEL_27;
                      case 9:
                        LOBYTE(v9) = 116;
                        goto LABEL_27;
                      case 10:
                        *double v12 = 110;
                        break;
                      case 11:
                        goto LABEL_25;
                      case 12:
                        *double v12 = 102;
                        break;
                      case 13:
                        *double v12 = 114;
                        break;
                      default:
                        if (v9 == 34) {
                          goto LABEL_27;
                        }
                        if (v9 == 92)
                        {
                          *double v12 = 92;
                        }
                        else
                        {
LABEL_25:
                          sprintf(v12, "u%04x", *(v10 - 1));
                          double v12 = v11 + 6;
                        }
                        break;
                    }
                  }
                  else
                  {
                    double v12 = v11 + 1;
LABEL_27:
                    *double v12 = v9;
                  }
                  char v13 = *v10++;
                  LOBYTE(v9) = v13;
                  uint64_t v11 = v12;
                }
                while (v13);
              }
              *(_WORD *)(v8 + v5 + v4 + 1) = 34;
            }
            else
            {
              cstdlib_memcpy((void *)(result + 1), a2, v4);
              *(_WORD *)(v8 + v4 + 1) = 34;
            }
            return 1;
          }
          return result;
        }
      }
      if (v6 == 92)
      {
LABEL_5:
        ++v5;
        goto LABEL_6;
      }
      if (v6 < 0x20) {
        v5 += 5;
      }
LABEL_6:
      ++v4;
    }
  }
  uint64_t result = ensure(a1, a3, 3uLL);
  if (result)
  {
    cstdlib_strcpy((char *)result, "\"\"");
    return 1;
  }
  return result;
}

uint64_t hashtable_ObjOpen(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = 2385518602;
  uint64_t v9 = heap_Alloc(*(void *)(a2 + 8), 104);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    *(void *)(v9 + 96) = a2;
    *(_DWORD *)(v9 + 8) = a4;
    *(void *)(v9 + 16) = a3;
    *(void *)uint64_t v9 = 0;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    uint64_t v11 = heap_Alloc(*(void *)(a2 + 8), 8 * a3);
    v10[11] = v11;
    if (v11)
    {
      double v12 = add;
      char v13 = lookup_0;
      if (a4)
      {
        if (a4 != 1)
        {
          heap_Free(*(void **)(a2 + 8), v11);
          heap_Free(*(void **)(a2 + 8), (uint64_t)v10);
          return 2385518599;
        }
        double v12 = nadd;
        char v13 = nlookup;
      }
      v10[9] = v13;
      v10[10] = v12;
      if (a3)
      {
        uint64_t v14 = 0;
        do
          *(void *)(v10[11] + 8 * v14++) = 0;
        while (a3 != v14);
      }
      uint64_t v8 = 0;
      void *v10 = hashtable_ObjOpen;
      *a1 = v10;
    }
    else
    {
      heap_Free(*(void **)(a2 + 8), (uint64_t)v10);
    }
  }
  return v8;
}

uint64_t lookup_0(void *a1, const char *a2)
{
  uint64_t v4 = a1[11];
  uint64_t v5 = (uint64_t (*)(const char *, void))a1[5];
  if (v5)
  {
    uint64_t v6 = v5(a2, a1[6]);
  }
  else
  {
    unsigned int v7 = *(unsigned __int8 *)a2;
    if (*a2)
    {
      unint64_t v8 = 0;
      uint64_t v9 = (unsigned __int8 *)(a2 + 1);
      do
      {
        unint64_t v8 = 31 * v8 + v7;
        unsigned int v10 = *v9++;
        unsigned int v7 = v10;
      }
      while (v10);
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t v6 = v8 % a1[2];
  }
  for (uint64_t i = *(void *)(v4 + 8 * v6); i; uint64_t i = *(void *)(i + 16))
  {
    double v12 = *(const char **)i;
    char v13 = (unsigned int (*)(const char *, const char *, void))a1[7];
    if (v13)
    {
      if (v13(a2, v12, a1[8])) {
        return i;
      }
    }
    else if (!cstdlib_strcmp(a2, v12))
    {
      return i;
    }
  }
  return i;
}

void *add(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (void *)lookup_0(a1, a2);
  if (!v6)
  {
    uint64_t v6 = (void *)heap_Alloc(*(void *)(a1[12] + 8), 24);
    if (!v6) {
      return v6;
    }
    unint64_t v8 = strhelper_Strdup(*(void *)(a1[12] + 8), a2);
    *uint64_t v6 = v8;
    if (!v8)
    {
      heap_Free(*(void **)(a1[12] + 8), (uint64_t)v6);
      return 0;
    }
    uint64_t v9 = (uint64_t (*)(char *, void))a1[5];
    if (v9)
    {
      uint64_t v10 = v9(a2, a1[6]);
    }
    else
    {
      unsigned int v11 = *a2;
      if (*a2)
      {
        unint64_t v12 = 0;
        char v13 = (unsigned __int8 *)(a2 + 1);
        do
        {
          unint64_t v12 = 31 * v12 + v11;
          unsigned int v14 = *v13++;
          unsigned int v11 = v14;
        }
        while (v14);
      }
      else
      {
        unint64_t v12 = 0;
      }
      uint64_t v10 = v12 % a1[2];
    }
    uint64_t v15 = a1[11];
    uint64_t v6[2] = *(void *)(v15 + 8 * v10);
    *(void *)(v15 + 8 * v10) = v6;
  }
  v6[1] = a3;
  return v6;
}

const void **nlookup(void *a1, const void *a2)
{
  uint64_t v3 = a1[11];
  for (uint64_t result = *(const void ***)(v3 + 8 * Num2Hashval(a1, a2)); result; uint64_t result = (const void **)result[2])
  {
    if (*result == a2) {
      break;
    }
  }
  return result;
}

const void **nadd(void *a1, const void *a2, const void *a3)
{
  uint64_t v6 = nlookup(a1, a2);
  if (v6) {
    goto LABEL_4;
  }
  unsigned int v7 = (const void **)heap_Alloc(*(void *)(a1[12] + 8), 24);
  uint64_t v6 = v7;
  if (v7)
  {
    void *v7 = a2;
    uint64_t v8 = Num2Hashval(a1, a2);
    uint64_t v9 = a1[11];
    uint64_t v6[2] = *(const void **)(v9 + 8 * v8);
    *(void *)(v9 + 8 * v8) = v6;
LABEL_4:
    v6[1] = a3;
  }
  return v6;
}

uint64_t hashtable_ElementSetDestructor(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))result == hashtable_ObjOpen) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t hashtable_SetStringToHashFunction(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
    {
      *(void *)(result + 40) = a2;
      *(void *)(result + 48) = a3;
    }
  }
  return result;
}

uint64_t hashtable_SetStringCompareFunction(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
    {
      *(void *)(result + 56) = a2;
      *(void *)(result + 64) = a3;
    }
  }
  return result;
}

void *hashtable_ObjClose(void *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    if (!*result || (uint64_t (*)(void *, uint64_t, uint64_t, int))*result == hashtable_ObjOpen)
    {
      uint64_t v2 = result[11];
      if (v2)
      {
        uint64_t v3 = result[2];
        if (v3)
        {
          uint64_t v4 = v3 - 1;
          do
          {
            FreeDupla(*(void **)(*(void *)(v1 + 96) + 8), *(uint64_t **)(*(void *)(v1 + 88) + 8 * v4), *(void (**)(void *))(v1 + 32), *(_DWORD *)(v1 + 8) != 1);
            *(void *)(*(void *)(v1 + 88) + 8 * v4--) = 0;
          }
          while (v4 != -1);
          uint64_t v2 = *(void *)(v1 + 88);
        }
        heap_Free(*(void **)(*(void *)(v1 + 96) + 8), v2);
        *(void *)(v1 + 88) = 0;
      }
      *(void *)uint64_t v1 = 0;
      uint64_t v5 = *(void **)(*(void *)(v1 + 96) + 8);
      return heap_Free(v5, v1);
    }
  }
  return result;
}

void *FreeDupla(void *result, uint64_t *a2, void (*a3)(void *), int a4)
{
  if (a2)
  {
    uint64_t v6 = a2;
    unsigned int v7 = result;
    do
    {
      uint64_t v8 = v6;
      uint64_t v6 = (uint64_t *)v6[2];
      if (a4) {
        heap_Free(v7, *v8);
      }
      *uint64_t v8 = 0;
      if (a3)
      {
        if (v8[1]) {
          a3(v7);
        }
      }
      v8[1] = 0;
      uint64_t result = heap_Free(v7, (uint64_t)v8);
    }
    while (v6);
  }
  return result;
}

void *hashtable_RemoveAll(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*result || (uint64_t (*)(void *, uint64_t, uint64_t, int))*result == hashtable_ObjOpen)
    {
      if (result[11])
      {
        uint64_t v2 = result[2];
        if (v2)
        {
          uint64_t v3 = v2 - 1;
          do
          {
            uint64_t result = FreeDupla(*(void **)(v1[12] + 8), *(uint64_t **)(v1[11] + 8 * v3), (void (*)(void *))v1[4], *((_DWORD *)v1 + 2) != 1);
            *(void *)(v1[11] + 8 * v3--) = 0;
          }
          while (v3 != -1);
        }
      }
    }
  }
  return result;
}

BOOL hashtable_Set(BOOL result)
{
  if (result) {
    return *(uint64_t (**)(void *, uint64_t, uint64_t, int))result == hashtable_ObjOpen
  }
        && (*(uint64_t (**)(void))(result + 80))() != 0;
  return result;
}

uint64_t hashtable_Get(uint64_t result)
{
  if (result)
  {
    if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
    {
      uint64_t result = (*(uint64_t (**)(void))(result + 72))();
      if (result) {
        return *(void *)(result + 8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t (**hashtable_GetKeyPointer(uint64_t (**result)(void)))(void)
{
  if (result)
  {
    if ((char *)*result == (char *)hashtable_ObjOpen)
    {
      uint64_t result = (uint64_t (**)(void))result[9]();
      if (result) {
        return (uint64_t (**)(void))*result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_DWORD *hashtable_Dump(_DWORD *result, const char *a2, void (*a3)(void, char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v5 = result;
    if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))result == hashtable_ObjOpen)
    {
      int v8 = result[2];
      uint64_t v9 = "unknown";
      if (!v8) {
        uint64_t v9 = "string";
      }
      if (v8 == 1) {
        uint64_t v10 = "integer";
      }
      else {
        uint64_t v10 = v9;
      }
      __sprintf_chk(v30, 0, 0x1000uLL, "<HASH address=\"%p\" title=\"%s\" type=\"%s\">", result, a2, v10);
      log_OutText(*(void *)(*((void *)v5 + 12) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v11, v12, v13, (uint64_t)v30);
      unint64_t v14 = *((void *)v5 + 2);
      if (v14)
      {
        for (unint64_t i = 0; i < v14; ++i)
        {
          uint64_t v16 = *(void *)(*((void *)v5 + 11) + 8 * i);
          if (v16)
          {
            __sprintf_chk(v30, 0, 0x1000uLL, "<ELEM value=\"%lu\">", i);
            log_OutText(*(void *)(*((void *)v5 + 12) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v17, v18, v19, (uint64_t)v30);
            do
            {
              if (a3) {
                a3(*(void *)(v16 + 8), v29, a5);
              }
              else {
                __sprintf_chk(v29, 0, 0x50uLL, "%s", *(const char **)(v16 + 8));
              }
              if (v5[2] == 1) {
                __sprintf_chk(v30, 0, 0x1000uLL, "<DUPLA key =\"%lu\" value = \"%s\"/>");
              }
              else {
                __sprintf_chk(v30, 0, 0x1000uLL, "<DUPLA key =\"%s\" value = \"%s\"/>");
              }
              log_OutText(*(void *)(*((void *)v5 + 12) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v20, v21, v22, (uint64_t)v30);
              uint64_t v16 = *(void *)(v16 + 16);
            }
            while (v16);
            __sprintf_chk(v30, 0, 0x1000uLL, "</ELEM>");
            log_OutText(*(void *)(*((void *)v5 + 12) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v23, v24, v25, (uint64_t)v30);
            unint64_t v14 = *((void *)v5 + 2);
          }
        }
      }
      __sprintf_chk(v30, 0, 0x1000uLL, "</HASH>");
      return (_DWORD *)log_OutText(*(void *)(*((void *)v5 + 12) + 32), (uint64_t)"HASHTABLE", 4, 0, (uint64_t)"%s", v26, v27, v28, (uint64_t)v30);
    }
  }
  return result;
}

uint64_t hashtable_Remove(uint64_t result, unsigned __int8 *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))result != hashtable_ObjOpen) {
    return result;
  }
  if (*(_DWORD *)(result + 8) == 1)
  {
    uint64_t result = Num2Hashval((void *)result, a2);
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(unsigned __int8 *, void))(result + 40);
    if (!v4)
    {
      unsigned int v12 = *a2;
      if (*a2)
      {
        unint64_t v13 = 0;
        unint64_t v14 = a2 + 1;
        do
        {
          unint64_t v13 = 31 * v13 + v12;
          unsigned int v15 = *v14++;
          unsigned int v12 = v15;
        }
        while (v15);
      }
      else
      {
        unint64_t v13 = 0;
      }
      unint64_t v5 = v13 % *(void *)(result + 16);
      goto LABEL_9;
    }
    uint64_t result = v4(a2, *(void *)(result + 48));
  }
  unint64_t v5 = result;
LABEL_9:
  uint64_t v6 = *(const char ***)(*(void *)(v2 + 88) + 8 * v5);
  if (!v6) {
    return result;
  }
  unsigned int v7 = *(uint64_t **)(*(void *)(v2 + 88) + 8 * v5);
  while (1)
  {
    int v8 = (uint64_t *)v6;
    uint64_t v9 = *v6;
    uint64_t v10 = *(uint64_t (**)(unsigned __int8 *, const char *, void))(v2 + 56);
    if (!v10) {
      break;
    }
    uint64_t result = v10(a2, v9, *(void *)(v2 + 64));
    if (result) {
      goto LABEL_17;
    }
LABEL_15:
    uint64_t v6 = (const char **)v8[2];
    unsigned int v7 = v8;
    if (!v6) {
      return result;
    }
  }
  uint64_t result = cstdlib_strcmp((const char *)a2, v9) == 0;
  if (!result) {
    goto LABEL_15;
  }
LABEL_17:
  if (v7 == v8) {
    uint64_t v11 = (void *)(*(void *)(v2 + 88) + 8 * v5);
  }
  else {
    uint64_t v11 = v7 + 2;
  }
  void *v11 = v8[2];
  if (*(_DWORD *)(v2 + 8) != 1) {
    heap_Free(*(void **)(*(void *)(v2 + 96) + 8), *v8);
  }
  *int v8 = 0;
  uint64_t v16 = *(void (**)(void))(v2 + 32);
  if (v16 && v8[1]) {
    v16(*(void *)(*(void *)(v2 + 96) + 8));
  }
  v8[1] = 0;
  uint64_t v17 = *(void **)(*(void *)(v2 + 96) + 8);

  return (uint64_t)heap_Free(v17, (uint64_t)v8);
}

uint64_t Num2Hashval(void *a1, const void *a2)
{
  *(void *)&v10[19] = *MEMORY[0x263EF8340];
  __sprintf_chk(&v9, 0, 0x14uLL, "%p", a2);
  uint64_t v3 = (uint64_t (*)(char *, void))a1[5];
  if (v3) {
    return v3(&v9, a1[6]);
  }
  unsigned int v5 = v9;
  if (v9)
  {
    unint64_t v6 = 0;
    unsigned int v7 = v10;
    do
    {
      unint64_t v6 = 31 * v6 + v5;
      unsigned int v8 = *v7++;
      unsigned int v5 = v8;
    }
    while (v8);
  }
  else
  {
    unint64_t v6 = 0;
  }
  return v6 % a1[2];
}

void *hashtable_EnumCreate(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((uint64_t (*)(void *, uint64_t, uint64_t, int))*result == hashtable_ObjOpen)
    {
      uint64_t result = (void *)heap_Alloc(*(void *)(result[12] + 8), 32);
      if (result)
      {
        uint64_t v2 = *(void *)v1[11];
        result[1] = 0;
        result[2] = v2;
        result[3] = v1;
        *uint64_t result = hashtable_EnumCreate;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t hashtable_EnumGetKey(uint64_t a1)
{
  if (!a1 || *(void *(**)(void *))a1 != hashtable_EnumCreate) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 < v5)
  {
    unint64_t v7 = v6 + 1;
    while (!v4)
    {
      *(void *)(a1 + 8) = v7;
      if (v7 >= v5)
      {
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v4 = *(uint64_t **)(*(void *)(v3 + 88) + 8 * v7);
        *(void *)(a1 + 16) = v4;
      }
      if (v7++ >= v5) {
        goto LABEL_13;
      }
    }
    goto LABEL_14;
  }
LABEL_13:
  if (v4)
  {
LABEL_14:
    uint64_t v1 = *v4;
    *(void *)(a1 + 16) = v4[2];
    return v1;
  }
  return 0;
}

void *hashtable_EnumDestroy(void *result)
{
  if (result)
  {
    if ((void *(*)(void *))*result == hashtable_EnumCreate)
    {
      *uint64_t result = 0;
      return heap_Free(*(void **)(*(void *)(result[3] + 96) + 8), (uint64_t)result);
    }
  }
  return result;
}

uint64_t hashtable_Merge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2385518594;
  if (a2
    && a1
    && *(uint64_t (**)(void *, uint64_t, uint64_t, int))a2 == hashtable_ObjOpen
    && *(uint64_t (**)(void *, uint64_t, uint64_t, int))a1 == hashtable_ObjOpen)
  {
    unint64_t v5 = hashtable_EnumCreate((void *)a2);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t Key = hashtable_EnumGetKey((uint64_t)v5);
      if (Key)
      {
        uint64_t v8 = Key;
        do
        {
          if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))a2 == hashtable_ObjOpen
            && (uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a2, v8)) != 0)
          {
            uint64_t v9 = *(void *)(v10 + 8);
          }
          else
          {
            uint64_t v9 = 0;
          }
          if (*(uint64_t (**)(void *, uint64_t, uint64_t, int))a1 == hashtable_ObjOpen) {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 80))(a1, v8, v9);
          }
          uint64_t v8 = hashtable_EnumGetKey((uint64_t)v6);
        }
        while (v8);
      }
      if ((void *(*)(void *))*v6 == hashtable_EnumCreate)
      {
        *unint64_t v6 = 0;
        heap_Free(*(void **)(*(void *)(v6[3] + 96) + 8), (uint64_t)v6);
      }
      return 0;
    }
    else
    {
      return 2385518602;
    }
  }
  return v2;
}

void *hashtable_bCheckIsHashTable(void *result)
{
  if (result) {
    return (void *)(*result == (void)hashtable_ObjOpen);
  }
  return result;
}

uint64_t log_OutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1 || log_GetLogLevel(a1) < a3) {
    return 0;
  }
  uint64_t v14 = 0;
  BOOL v17 = a3 > 4 && *(_DWORD *)(a1 + 100) != 0;
  if (a5 && !v17)
  {
    if (a2)
    {
      uint64_t v18 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t v19 = *(void *)(a1 + v18 + 24);
        if (v19)
        {
          uint64_t v20 = *(void *)(v19 + 48);
          BOOL v21 = a3 >= 2 && v18 == 16;
          BOOL v22 = !v21;
          if (v20 && v22)
          {
            int v24 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + v18 + 24) + 48))(*(void *)(a1 + v18 + 16), a2, a3, a4, a5, &a9);
            if (v24 >= 0) {
              uint64_t v14 = v14;
            }
            else {
              uint64_t v14 = v24;
            }
          }
        }
        v18 += 16;
      }
      while (v18 != 80);
      uint64_t v25 = *(void *)(a1 + 112);
      if (v25 && *(void *)(v25 + 48))
      {
        int v26 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)(a1 + 112)
                                                                                               + 48))(*(void *)(a1 + 104), a2, a3, a4, a5, &a9);
        if (v26 >= 0) {
          return v14;
        }
        else {
          return v26;
        }
      }
    }
    else
    {
      return 2226135046;
    }
  }
  return v14;
}

uint64_t log_GetLogLevel(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    do
    {
      uint64_t v4 = *(void *)(v1 + v2 + 24);
      if (v4)
      {
        unint64_t v5 = *(uint64_t (**)(void))(v4 + 80);
        if (v5)
        {
          unsigned int v6 = v5(*(void *)(v1 + v2 + 16));
          if (v6 > v3) {
            unsigned int v3 = v6;
          }
        }
      }
      v2 += 16;
    }
    while (v2 != 80);
    uint64_t v7 = *(void *)(v1 + 112);
    if (v7)
    {
      uint64_t v8 = *(uint64_t (**)(void))(v7 + 80);
      if (v8)
      {
        unsigned int v9 = v8(*(void *)(v1 + 104));
        if (v9 > v3) {
          unsigned int v3 = v9;
        }
      }
    }
    if (v3 <= 4 || *(_DWORD *)(v1 + 100) == 0) {
      return v3;
    }
    else {
      return 4;
    }
  }
  return result;
}

uint64_t log_VOutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1 || log_GetLogLevel(a1) < a3) {
    return 0;
  }
  uint64_t v10 = 0;
  BOOL v13 = a3 > 4 && *(_DWORD *)(a1 + 100) != 0;
  if (a5 && !v13)
  {
    if (a2)
    {
      uint64_t v14 = 0;
      uint64_t v10 = 0;
      do
      {
        uint64_t v15 = *(void *)(a1 + v14 + 24);
        if (v15 && *(void *)(v15 + 48))
        {
          int v16 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + v14 + 24) + 48))(*(void *)(a1 + v14 + 16), a2, a3, a4, a5);
          if (v16 >= 0) {
            uint64_t v10 = v10;
          }
          else {
            uint64_t v10 = v16;
          }
        }
        v14 += 16;
      }
      while (v14 != 80);
      uint64_t v17 = *(void *)(a1 + 112);
      if (v17 && *(void *)(v17 + 48))
      {
        int v18 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 112) + 48))(*(void *)(a1 + 104), a2, a3, a4, a5);
        if (v18 >= 0) {
          return v10;
        }
        else {
          return v18;
        }
      }
    }
    else
    {
      return 2226135046;
    }
  }
  return v10;
}

uint64_t log_OutBinary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  if (!a1 || log_GetLogLevel(a1) < a3 || a3 >= 5 && *(_DWORD *)(a1 + 100)) {
    return 0;
  }
  uint64_t v14 = 2226135046;
  if (a2 && a7)
  {
    if (a9) {
      ssftstring_Clear(a9);
    }
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v17 = *(void *)(a1 + v16 + 24);
      if (v17)
      {
        int v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v17 + 56);
        if (v18)
        {
          uint64_t v19 = *(void *)(a1 + v16 + 16);
          if (a9)
          {
            if (ssftstring_Size(a9)) {
              uint64_t v20 = 0;
            }
            else {
              uint64_t v20 = a9;
            }
          }
          else
          {
            uint64_t v20 = 0;
          }
          int v21 = v18(v19, a2, a3, a4, a5, a6, a7, a8, v20);
          if (v21 >= 0) {
            uint64_t v14 = v14;
          }
          else {
            uint64_t v14 = v21;
          }
        }
      }
      v16 += 16;
    }
    while (v16 != 80);
    uint64_t v22 = *(void *)(a1 + 112);
    if (v22)
    {
      uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v22 + 56);
      if (v23)
      {
        uint64_t v24 = *(void *)(a1 + 104);
        if (a9)
        {
          if (ssftstring_Size(a9)) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = a9;
          }
        }
        else
        {
          uint64_t v25 = 0;
        }
        int v26 = v23(v24, a2, a3, a4, a5, a6, a7, a8, v25);
        if (v26 >= 0) {
          return v14;
        }
        else {
          return v26;
        }
      }
    }
  }
  return v14;
}

uint64_t log_OutPublic(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if (result)
  {
    if (a2) {
      return log_VOutPublic((uint64_t **)result, a2, a3, a4, &a9);
    }
    else {
      return 2226135046;
    }
  }
  return result;
}

uint64_t log_VOutPublic(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v19 = a5;
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 2226135046;
  }
  long long __b = 0u;
  long long v18 = 0u;
  cstdlib_memset(&__b, 0, 0x20uLL);
  if (!a4 || (a4 = log_ParseKeyValuePairs_Restricted(*a1, (char *)a4, v19, (uint64_t)&__b), (a4 & 0x80000000) == 0))
  {
    for (uint64_t i = 0; i != 10; i += 2)
    {
      uint64_t v10 = a1[i + 3];
      if (v10)
      {
        uint64_t v11 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, void, void, void))v10[8];
        if (v11)
        {
          int v12 = v11(a1[i + 2], a2, a3, HIDWORD(__b), v18, *((void *)&v18 + 1));
          if (v12 >= 0) {
            a4 = a4;
          }
          else {
            a4 = v12;
          }
        }
      }
    }
    BOOL v13 = a1[14];
    if (v13)
    {
      uint64_t v14 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, void, void, void))v13[8];
      if (v14)
      {
        int v15 = v14(a1[13], a2, a3, HIDWORD(__b), v18, *((void *)&v18 + 1));
        if (v15 >= 0) {
          a4 = a4;
        }
        else {
          a4 = v15;
        }
      }
    }
    log_FreeKeyValuePairs(*a1, (uint64_t *)&__b);
  }
  return a4;
}

uint64_t log_ParseKeyValuePairs_Restricted(uint64_t *a1, char *__s, unsigned int *a3, uint64_t a4)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v7 = 2226135047;
  if (cstdlib_strlen(__s) > 0x7F) {
    goto LABEL_116;
  }
  if (cstdlib_strlen(__s) - 128 < 0xFFFFFF7F)
  {
    uint64_t v7 = 2226135049;
    goto LABEL_116;
  }
  int v8 = 0;
  int v9 = 0;
  while (1)
  {
    int v10 = __s[v8];
    if (v10 != 37) {
      break;
    }
    int v11 = v8 + 1;
    if (__s[v8 + 1] == 108 && __s[v8 + 2] == 115)
    {
      v77[v9] = 37;
      v77[v9 + 1] = 83;
      v9 += 2;
      v8 += 3;
    }
    else
    {
LABEL_11:
      v77[v9++] = v10;
      int v8 = v11;
    }
  }
  if (__s[v8])
  {
    int v11 = v8 + 1;
    goto LABEL_11;
  }
  v77[v9] = 0;
  if (!a4) {
    goto LABEL_116;
  }
  int v12 = 0;
  int v13 = 0;
  while (2)
  {
    int v14 = v77[v12];
    if (v14 == 32)
    {
      int v17 = 1;
      goto LABEL_20;
    }
    if (v14 == 37)
    {
      ++v13;
      int v15 = v77[v12 + 1];
      char v16 = v15 - 83;
      if ((v15 - 83) <= 0x25)
      {
        if (((1 << v16) & 0x25200B0001) != 0)
        {
          int v17 = 2;
LABEL_20:
          v12 += v17;
          continue;
        }
        if (((1 << v16) & 0x2200000) != 0)
        {
          unsigned int v18 = v77[v12 + 2] - 100;
          if (v18 > 0x11 || ((1 << v18) & 0x28001) == 0) {
            goto LABEL_116;
          }
          int v17 = 3;
          goto LABEL_20;
        }
      }
      if (v15 != 46 || v77[v12 + 2] != 42 || (v77[v12 + 3] | 0x20) != 0x73) {
        goto LABEL_116;
      }
      int v17 = 4;
      goto LABEL_20;
    }
    break;
  }
  if (v77[v12]) {
    goto LABEL_116;
  }
  if (v13) {
    uint64_t v19 = 2226135047;
  }
  else {
    uint64_t v19 = 0;
  }
  *(_DWORD *)(a4 + 8) = 0;
  uint64_t v20 = (unsigned char *)heap_Alloc((uint64_t)a1, 4096);
  *(void *)a4 = v20;
  if (!v20)
  {
LABEL_95:
    uint64_t v7 = 2226135050;
    goto LABEL_116;
  }
  unsigned int v21 = v13 & 0xFFFFFFFE;
  *(_DWORD *)(a4 + 8) = 4096;
  unsigned char *v20 = 0;
  *(_DWORD *)(a4 + 12) = 0;
  if ((v13 & 0xFFFFFFFE) >= 2)
  {
    uint64_t v22 = heap_Calloc(a1, v21 >> 1, 8);
    *(void *)(a4 + 16) = v22;
    if (!v22 || (uint64_t v23 = heap_Calloc(a1, v21 >> 1, 8), (*(void *)(a4 + 24) = v23) == 0))
    {
      uint64_t v7 = 2226135050;
      goto LABEL_116;
    }
  }
  else if (!v21)
  {
    goto LABEL_113;
  }
  unsigned int v24 = 0;
  int v25 = 0;
  while (2)
  {
    int v26 = v77[v25];
    if (v26 == 32)
    {
      int v27 = v25;
      goto LABEL_84;
    }
    if (v26 == 37)
    {
      int v27 = v25 + 1;
      int v28 = v77[v25 + 1];
      if (v28 == 46)
      {
        if (v77[v25 + 2] == 42)
        {
          unint64_t v29 = a3;
          a3 += 2;
          unsigned int v30 = *v29;
          int v27 = v25 + 3;
          int v28 = v77[v25 + 3];
          goto LABEL_47;
        }
        unsigned int v30 = -1;
      }
      else
      {
        unsigned int v30 = -1;
LABEL_47:
        if (v28 == 108) {
          int v31 = v27 + 1;
        }
        else {
          int v31 = v27;
        }
        if (v28 == 104) {
          ++v27;
        }
        else {
          int v27 = v31;
        }
      }
      unsigned int v32 = v77[v27];
      if (v32 > 0x65)
      {
        switch(v77[v27])
        {
          case 'p':
            a3 += 2;
            __sprintf_chk(__sa, 0, 0x20uLL, "%p");
            goto LABEL_77;
          case 'q':
          case 'r':
          case 't':
          case 'v':
          case 'w':
            goto LABEL_116;
          case 's':
            double v39 = (const char **)a3;
            a3 += 2;
            uint64_t v40 = *v39;
            if (v40) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = "";
            }
            if (v30 == -1) {
              unsigned int v30 = cstdlib_strlen(v41);
            }
            uint64_t v42 = aux_ResizeKeyValueVect(a1, a4, v30 + 2);
            if ((v42 & 0x80000000) != 0) {
              goto LABEL_115;
            }
            uint64_t v43 = *(const char **)a4;
            char v44 = &v43[cstdlib_strlen(*(const char **)a4)];
            cstdlib_strncat(*(char **)a4, v41, v30);
            unint64_t v45 = *(char **)a4;
            goto LABEL_79;
          case 'u':
            double v46 = a3;
            a3 += 2;
            unsigned int v47 = *v46;
            unsigned int v48 = 10;
            goto LABEL_76;
          case 'x':
            uint64_t v49 = a3;
            a3 += 2;
            unsigned int v47 = *v49;
            unsigned int v48 = 16;
LABEL_76:
            LH_utoa(v47, __sa, v48);
            break;
          default:
            if (v32 != 102) {
              goto LABEL_116;
            }
            a3 += 2;
            __sprintf_chk(__sa, 0, 0x20uLL, "%f");
            break;
        }
        goto LABEL_77;
      }
      if (v32 == 83)
      {
        int v34 = a3;
        a3 += 2;
        uint64_t v35 = *(__int16 **)v34;
        if (v30 == -1)
        {
          uint64_t v37 = 0;
          while (v35[v37++])
            ;
          uint64_t v36 = v37 - 1;
        }
        else
        {
          uint64_t v36 = v30;
          uint64_t v37 = v30 + 1;
        }
        uint64_t v54 = heap_Calloc(a1, v37, 2);
        if (!v54) {
          goto LABEL_95;
        }
        uint64_t v55 = v54;
        if (v36)
        {
          unsigned __int8 v56 = (_WORD *)v54;
          uint64_t v57 = v36;
          do
          {
            __int16 v58 = *v35++;
            *v56++ = v58;
            --v57;
          }
          while (v57);
        }
        *(_WORD *)(v54 + 2 * v36) = 0;
        int v59 = utf8_16BitNbrOfUtf8Chars(v54);
        uint64_t v60 = aux_ResizeKeyValueVect(a1, a4, v59 + 2);
        if ((v60 & 0x80000000) != 0)
        {
          uint64_t v75 = v60;
          heap_Free(a1, v55);
          uint64_t v7 = v75;
          goto LABEL_116;
        }
        uint64_t v61 = *(const char **)a4;
        char v44 = &v61[cstdlib_strlen(*(const char **)a4)];
        uint64_t v62 = *(const char **)a4;
        size_t v63 = cstdlib_strlen(*(const char **)a4);
        utf8_16bitToUtf8(v55, (uint64_t)&v62[v63]);
        cstdlib_strcat(*(char **)a4, " ");
        heap_Free(a1, v55);
      }
      else
      {
        if (v32 == 99)
        {
          unsigned int v38 = a3;
          a3 += 2;
          *(_WORD *)__sa = *v38;
        }
        else
        {
          if (v32 != 100) {
            goto LABEL_116;
          }
          int v33 = a3;
          a3 += 2;
          LH_itoa(*v33, __sa, 0xAu);
        }
LABEL_77:
        int v50 = cstdlib_strlen(__sa);
        uint64_t v42 = aux_ResizeKeyValueVect(a1, a4, v50 + 2);
        if ((v42 & 0x80000000) != 0)
        {
LABEL_115:
          uint64_t v7 = v42;
          goto LABEL_116;
        }
        uint64_t v51 = *(const char **)a4;
        char v44 = &v51[cstdlib_strlen(*(const char **)a4)];
        cstdlib_strcat(*(char **)a4, __sa);
        unint64_t v45 = *(char **)a4;
LABEL_79:
        cstdlib_strcat(v45, " ");
      }
      uint64_t v52 = v24 >> 1;
      if (v24)
      {
        *(void *)(*(void *)(a4 + 24) + 8 * v52) = v44;
        ++*(_DWORD *)(a4 + 12);
      }
      else
      {
        *(void *)(*(void *)(a4 + 16) + 8 * v52) = v44;
      }
      uint64_t v19 = 0;
      ++v24;
LABEL_84:
      int v25 = v27 + 1;
      if (v24 >= v21) {
        goto LABEL_98;
      }
      continue;
    }
    break;
  }
  if (v77[v25]) {
    goto LABEL_116;
  }
LABEL_98:
  if (*(_DWORD *)(a4 + 12))
  {
    unint64_t v64 = 0;
    do
    {
      if (v64)
      {
        uint64_t v65 = *(void *)(*(void *)(a4 + 16) + 8 * v64);
        if (v65)
        {
          int v66 = (unsigned char *)(v65 - 1);
          if ((unint64_t)v66 > *(void *)a4 && *v66 == 32) {
            unsigned char *v66 = 0;
          }
        }
      }
      uint64_t v67 = *(void *)(*(void *)(a4 + 24) + 8 * v64);
      if (v67)
      {
        uint64_t v68 = (unsigned char *)(v67 - 1);
        if ((unint64_t)v68 > *(void *)a4 && *v68 == 32) {
          *uint64_t v68 = 0;
        }
      }
      ++v64;
      unint64_t v69 = *(unsigned int *)(a4 + 12);
    }
    while (v64 < v69);
    uint64_t v70 = *(void *)(a4 + 24);
    unsigned int v71 = v69 - 1;
    uint64_t v72 = *(void *)(v70 + 8 * v71);
    if (v72 && *(unsigned char *)(v72 + cstdlib_strlen(*(const char **)(v70 + 8 * v71)) - 1) == 32)
    {
      uint64_t v73 = *(const char **)(*(void *)(a4 + 24) + 8 * (*(_DWORD *)(a4 + 12) - 1));
      v73[cstdlib_strlen(v73) - 1] = 0;
    }
  }
LABEL_113:
  uint64_t v7 = v19;
  if ((v19 & 0x80000000) != 0) {
LABEL_116:
  }
    log_FreeKeyValuePairs(a1, (uint64_t *)a4);
  return v7;
}

void *log_FreeKeyValuePairs(void *result, uint64_t *a2)
{
  unsigned int v3 = result;
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t result = heap_Free(result, v4);
    *a2 = 0;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t result = heap_Free(v3, v5);
    a2[2] = 0;
  }
  uint64_t v6 = a2[3];
  if (v6)
  {
    uint64_t result = heap_Free(v3, v6);
    a2[3] = 0;
  }
  return result;
}

uint64_t **log_OutEvent(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if (result) {
    return (uint64_t **)log_VOutEvent(result, a2, a3, &a9);
  }
  return result;
}

uint64_t log_VOutEvent(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v22 = a4;
  if (!a1) {
    return 0;
  }
  long long __b = 0u;
  long long v21 = 0u;
  cstdlib_memset(&__b, 0, 0x20uLL);
  if (a3)
  {
    a3 = log_ParseKeyValuePairs_Restricted(*a1, (char *)a3, v22, (uint64_t)&__b);
    if ((a3 & 0x80000000) != 0) {
      return a3;
    }
    uint64_t v7 = a1[15];
    if (v7)
    {
      if (*(unsigned char *)v7)
      {
        int v8 = *a1;
        uint64_t v9 = heap_Realloc(*a1, v21, 8 * (HIDWORD(__b) + 1));
        if (v9)
        {
          *(void *)&long long v21 = v9;
          uint64_t v10 = heap_Realloc(v8, *((uint64_t *)&v21 + 1), 8 * (HIDWORD(__b) + 1));
          if (v10)
          {
            *((void *)&v21 + 1) = v10;
            uint64_t v11 = HIDWORD(__b);
            *(void *)(v21 + 8 * HIDWORD(__b)) = "SECURE";
            *(void *)(*((void *)&v21 + 1) + 8 * v11) = v7;
            HIDWORD(__b) = v11 + 1;
          }
        }
      }
    }
  }
  for (uint64_t i = 0; i != 10; i += 2)
  {
    int v13 = a1[i + 3];
    if (v13)
    {
      int v14 = (uint64_t (*)(uint64_t *, uint64_t, void, void, void))v13[9];
      if (v14)
      {
        int v15 = v14(a1[i + 2], a2, HIDWORD(__b), v21, *((void *)&v21 + 1));
        if (v15 >= 0) {
          a3 = a3;
        }
        else {
          a3 = v15;
        }
      }
    }
  }
  char v16 = a1[14];
  if (v16)
  {
    int v17 = (uint64_t (*)(uint64_t *, uint64_t, void, void, void))v16[9];
    if (v17)
    {
      int v18 = v17(a1[13], a2, HIDWORD(__b), v21, *((void *)&v21 + 1));
      if (v18 >= 0) {
        a3 = a3;
      }
      else {
        a3 = v18;
      }
    }
  }
  log_FreeKeyValuePairs(*a1, (uint64_t *)&__b);
  return a3;
}

uint64_t log_SetSessionID(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *(void *)(a1 + v4 + 24);
    if (v6)
    {
      uint64_t v7 = *(uint64_t (**)(void, uint64_t))(v6 + 88);
      if (v7)
      {
        int v8 = v7(*(void *)(a1 + v4 + 16), a2);
        if (v8 >= 0) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v8;
        }
      }
    }
    v4 += 16;
  }
  while (v4 != 80);
  uint64_t v9 = *(void *)(a1 + 112);
  if (v9)
  {
    uint64_t v10 = *(uint64_t (**)(void, uint64_t))(v9 + 88);
    if (v10)
    {
      int v11 = v10(*(void *)(a1 + 104), a2);
      if (v11 >= 0) {
        return v5;
      }
      else {
        return v11;
      }
    }
  }
  return v5;
}

uint64_t log_OutTraceTuningData(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if (!a1 || !log_HasTraceTuningDataSubscriber((BOOL)a1)) {
    return 0;
  }
  long long __b = 0u;
  long long v21 = 0u;
  cstdlib_memset(&__b, 0, 0x20uLL);
  if (!a3 || (a3 = log_ParseKeyValuePairs_Restricted(*a1, (char *)a3, &a9, (uint64_t)&__b), (a3 & 0x80000000) == 0))
  {
    for (uint64_t i = 0; i != 10; i += 2)
    {
      int v13 = a1[i + 3];
      if (v13)
      {
        int v14 = (uint64_t (*)(uint64_t *, uint64_t, void, void, void))v13[12];
        if (v14)
        {
          int v15 = v14(a1[i + 2], a2, HIDWORD(__b), v21, *((void *)&v21 + 1));
          if (v15 >= 0) {
            a3 = a3;
          }
          else {
            a3 = v15;
          }
        }
      }
    }
    char v16 = a1[14];
    if (v16)
    {
      int v17 = (uint64_t (*)(uint64_t *, uint64_t, void, void, void))v16[12];
      if (v17)
      {
        int v18 = v17(a1[13], a2, HIDWORD(__b), v21, *((void *)&v21 + 1));
        if (v18 >= 0) {
          a3 = a3;
        }
        else {
          a3 = v18;
        }
      }
    }
    log_FreeKeyValuePairs(*a1, (uint64_t *)&__b);
  }
  return a3;
}

BOOL log_HasTraceTuningDataSubscriber(BOOL result)
{
  if (result)
  {
    BOOL v1 = result;
    for (uint64_t i = 16; i != 96; i += 16)
    {
      if (TraceTuningDataEnabled((void *)(v1 + i))) {
        return 1;
      }
    }
    return TraceTuningDataEnabled((void *)(v1 + 104));
  }
  return result;
}

uint64_t log_OutTraceTuningDataBinary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1 || !log_HasTraceTuningDataSubscriber(a1)) {
    return 0;
  }
  if (!a5) {
    return 2226135046;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    uint64_t v14 = *(void *)(a1 + v12 + 24);
    if (v14)
    {
      int v15 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 104);
      if (v15)
      {
        int v16 = v15(*(void *)(a1 + v12 + 16), a2, a3, a4, a5, a6);
        if (v16 >= 0) {
          uint64_t v13 = v13;
        }
        else {
          uint64_t v13 = v16;
        }
      }
    }
    v12 += 16;
  }
  while (v12 != 80);
  uint64_t v17 = *(void *)(a1 + 112);
  if (v17)
  {
    if ((a2 - 402) <= 0xFFFFFFFD)
    {
      int v18 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 104);
      if (v18)
      {
        int v19 = v18(*(void *)(a1 + 104), a2, a3, a4, a5, a6);
        if (v19 >= 0) {
          return v13;
        }
        else {
          return v19;
        }
      }
    }
  }
  return v13;
}

BOOL TraceTuningDataEnabled(void *a1)
{
  BOOL v1 = (void *)a1[1];
  if (!v1 || !v1[13] && !v1[12]) {
    return 0;
  }
  unsigned int v3 = (unsigned int (*)(void, uint64_t))v1[14];
  if (v3)
  {
    if (v3(*a1, 231) != 1) {
      return 0;
    }
    BOOL v1 = (void *)a1[1];
  }
  uint64_t v4 = (unsigned int (*)(void))v1[10];
  return !v4 || v4(*a1) > 3;
}

uint64_t log_RefreshParameters(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = *(void *)(a1 + v2 + 40);
    if (v4)
    {
      uint64_t v5 = *(uint64_t (**)(void, void))(v4 + 120);
      if (v5)
      {
        int v6 = v5(*(void *)(a1 + v2 + 48), *(void *)(a1 + v2 + 56));
        if (v6 >= 0) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v6;
        }
      }
    }
    v2 += 40;
  }
  while (v2 != 200);
  return v3;
}

uint64_t log_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2226135041;
  }
  uint64_t result = 0;
  *a2 = &ILog;
  return result;
}

uint64_t aux_ResizeKeyValueVect(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(const char **)a2;
  size_t v7 = cstdlib_strlen(*(const char **)a2) + a3;
  size_t v8 = *(unsigned int *)(a2 + 8);
  if (v7 < v8) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3;
  LODWORD(v11) = *(_DWORD *)(a2 + 8);
  while (1)
  {
    uint64_t v12 = heap_Realloc(a1, v9, (v11 + 4096));
    if (!v12) {
      break;
    }
    uint64_t v13 = (char *)v12;
    *(_DWORD *)(a2 + 8) += 4096;
    size_t v14 = cstdlib_strlen(*(const char **)a2);
    size_t v11 = *(unsigned int *)(a2 + 8);
    uint64_t v9 = (uint64_t)v13;
    if (v14 + v10 < v11)
    {
      uint64_t v15 = 0;
      if (v7 >= v8 && v6)
      {
        cstdlib_strcpy(v13, *(const char **)a2);
        uint64_t v16 = 0;
        int v17 = *(_DWORD *)(a2 + 12);
        if ((v17 + 1) > 1) {
          unsigned int v18 = v17 + 1;
        }
        else {
          unsigned int v18 = 1;
        }
        uint64_t v19 = 8 * v18;
        do
        {
          uint64_t v20 = *(void *)(a2 + 16);
          unint64_t v21 = *(void *)(v20 + v16);
          if (v21 >= (unint64_t)v6) {
            *(void *)(v20 + v16) = &v13[(v21 - v6)];
          }
          uint64_t v22 = *(void *)(a2 + 24);
          unint64_t v23 = *(void *)(v22 + v16);
          if (v23 >= (unint64_t)v6) {
            *(void *)(v22 + v16) = &v13[(v23 - v6)];
          }
          v16 += 8;
        }
        while (v19 != v16);
        heap_Free(a1, *(void *)a2);
        uint64_t v15 = 0;
        *(void *)a2 = v13;
      }
      return v15;
    }
  }
  uint64_t v15 = 2226135050;
  if (v9) {
    heap_Free(a1, v9);
  }
  return v15;
}

uint64_t hlp_EncodeVersionString(char *a1)
{
  uint64_t v1 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v6 = 0;
  uint64_t v5 = 0;
  do
  {
    char v2 = *a1;
    if (!*a1) {
      break;
    }
    ++a1;
    while (v2)
    {
      if (v2 == 46 || v2 == 95) {
        goto LABEL_9;
      }
      *((_DWORD *)&v5 + v1) = 10 * *((_DWORD *)&v5 + v1) + v2 - 48;
      char v3 = *a1++;
      char v2 = v3;
    }
    --a1;
LABEL_9:
    ++v1;
  }
  while (v1 != 3);
  return (HIDWORD(v5) << 8) | (v5 << 16) | v6;
}

uint64_t cuputils_getVersionString(uint64_t result, char *__str, uint64_t a3, unsigned int *a4)
{
  *a4 = BYTE3(result);
  if (__str) {
    return snprintf(__str, a3 - 1, "%d.%d.%d", BYTE2(result), BYTE1(result), result);
  }
  return result;
}

uint64_t cuputils_getLatestSupportedFormat()
{
  return 0;
}

uint64_t cupreader_open(_WORD *a1, int a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v48 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v48);
  if ((inited & 0x80000000) != 0)
  {
    uint64_t v9 = inited;
    size_t v11 = 0;
  }
  else
  {
    uint64_t v9 = 2166366218;
    if (a3)
    {
      uint64_t v10 = (uint64_t *)heap_Calloc(*(void **)(v48 + 8), 1, 80);
      size_t v11 = v10;
      if (v10)
      {
        uint64_t *v10 = (uint64_t)a3;
        uint64_t v12 = *a3;
        size_t v13 = *(unsigned int *)(a3[1] + 16);
        size_t v14 = (void *)heap_Calloc(*(void **)(v12 + 8), (v13 + 1), 1);
        v11[5] = (uint64_t)v14;
        if (!v14) {
          goto LABEL_24;
        }
        cstdlib_memcpy(v14, *(const void **)(*(void *)(*v11 + 8) + 8), v13);
        uint64_t v49 = 0;
        uint64_t Data = clcarchive_GetData(*v11, 1u, 0, *(_DWORD *)(*(void *)(*v11 + 8) + 56), (uint64_t *)&v49);
        if ((Data & 0x80000000) != 0) {
          goto LABEL_23;
        }
        uint64_t v16 = (uint64_t)v49;
        *((_DWORD *)v11 + 8) = (v49[2] << 16) | (v49[3] << 24) | (v49[1] << 8) | *v49;
        heap_Free(*(void **)(*(void *)*v11 + 8), v16);
        uint64_t v49 = 0;
        uint64_t Data = clcarchive_GetData(*v11, 2u, 0, *(_DWORD *)(*(void *)(*v11 + 8) + 96), (uint64_t *)&v49);
        if ((Data & 0x80000000) != 0) {
          goto LABEL_23;
        }
        uint64_t v17 = (uint64_t)v49;
        *((_DWORD *)v11 + 6) = *(_DWORD *)v49;
        heap_Free(*(void **)(*(void *)*v11 + 8), v17);
        uint64_t Data = clcarchive_GetData(*v11, 3u, 0, *(_DWORD *)(*(void *)(*v11 + 8) + 136), (uint64_t *)&v49);
        if ((Data & 0x80000000) != 0) {
          goto LABEL_23;
        }
        uint64_t v18 = (uint64_t)v49;
        *((_DWORD *)v11 + 7) = *(_DWORD *)v49;
        heap_Free(*(void **)(*(void *)*v11 + 8), v18);
        uint64_t v19 = *((unsigned int *)v11 + 6);
        if (v19)
        {
          uint64_t v20 = heap_Calloc(*(void **)(*(void *)*v11 + 8), v19, 32);
          v11[1] = v20;
          if (!v20) {
            goto LABEL_24;
          }
          if (*((_DWORD *)v11 + 6))
          {
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            int v23 = 4;
            while (1)
            {
              unsigned int v24 = v23;
              unsigned int v25 = v23 + 1;
              uint64_t v46 = v11[1];
              int v26 = (void *)(v46 + v21);
              uint64_t v27 = *(void *)(*v11 + 8);
              unsigned int v28 = *(_DWORD *)(v27 + 40 * v25 + 16);
              unsigned int v44 = v24;
              uint64_t Data = clcarchive_GetData(*v11, v24, 0, *(_DWORD *)(v27 + 40 * v24 + 16), (uint64_t *)(v46 + v21));
              if ((Data & 0x80000000) != 0) {
                break;
              }
              uint64_t v45 = v22;
              uint64_t v29 = v21;
              unsigned int v30 = (const char **)(v26 + 1);
              uint64_t Data = clcarchive_GetData(*v11, v25, 0, v28, v26 + 1);
              if ((Data & 0x80000000) != 0) {
                break;
              }
              if (!*v26) {
                goto LABEL_24;
              }
              int v31 = *v30;
              if (!*v30) {
                goto LABEL_24;
              }
              if (!cstdlib_strcmp(*v30, "application/x-vocalizer-resources")
                || !cstdlib_strcmp(v31, "application/x-vocalizer-resources-package"))
              {
                uint64_t v9 = 2166366226;
                goto LABEL_24;
              }
              uint64_t v32 = v29;
              uint64_t v33 = cupreader_readData(v11, *(char **)(v46 + v29), (uint64_t *)(v46 + v29 + 16), (_DWORD *)(v46 + v29 + 24));
              uint64_t v34 = v33;
              if ((v33 & 0x80000000) != 0)
              {
                uint64_t v9 = v33;
                goto LABEL_24;
              }
              uint64_t v22 = v45 + 1;
              uint64_t v21 = v32 + 32;
              int v23 = v25 + 1;
              if (v45 + 1 >= (unint64_t)*((unsigned int *)v11 + 6))
              {
                int v35 = v44 + 2;
                goto LABEL_30;
              }
            }
LABEL_23:
            uint64_t v9 = Data;
            goto LABEL_24;
          }
          uint64_t v34 = 0;
          int v35 = 4;
LABEL_30:
          uint64_t v37 = *((unsigned int *)v11 + 7);
          if (!v37)
          {
LABEL_37:
            *a4 = v11;
            return v34;
          }
          uint64_t v38 = heap_Calloc(*(void **)(*(void *)*v11 + 8), v37, 8);
          v11[2] = v38;
          if (v38)
          {
            if (*((_DWORD *)v11 + 7))
            {
              uint64_t v39 = 0;
              int v47 = *((_DWORD *)v11 + 6) + v35;
              while (1)
              {
                uint64_t v40 = (const char **)(*(void *)(*v11 + 8) + 40 * (v47 + v39));
                if (!*v40) {
                  break;
                }
                uint64_t v41 = v11[2];
                size_t v42 = cstdlib_strlen(*v40);
                uint64_t v43 = (void *)heap_Calloc(*(void **)(*(void *)*v11 + 8), v42 + 1, 1);
                *(void *)(v41 + 8 * v39) = v43;
                if (!v43) {
                  goto LABEL_24;
                }
                cstdlib_memcpy(v43, *v40, v42);
                if (++v39 >= (unint64_t)*((unsigned int *)v11 + 7)) {
                  goto LABEL_37;
                }
              }
              uint64_t v9 = 2166366224;
              goto LABEL_24;
            }
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v9 = 2166366223;
        }
LABEL_24:
        if (*v11) {
          uint64_t *v11 = 0;
        }
      }
    }
    else
    {
      size_t v11 = 0;
      uint64_t v9 = 2166366214;
    }
  }
  cupreader_close(a1, a2, (uint64_t)v11);
  return v9;
}

uint64_t cupreader_close(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v14 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v14);
  uint64_t v5 = inited;
  if (a3 && (inited & 0x80000000) == 0)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    if (v6)
    {
      if (*(_DWORD *)(a3 + 24))
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        do
        {
          if (*(void *)(v6 + v7))
          {
            heap_Free(*(void **)(v14 + 8), *(void *)(v6 + v7));
            uint64_t v6 = *(void *)(a3 + 8);
            *(void *)(v6 + v7) = 0;
          }
          if (*(void *)(v6 + v7 + 8))
          {
            heap_Free(*(void **)(v14 + 8), *(void *)(v6 + v7 + 8));
            uint64_t v6 = *(void *)(a3 + 8);
            *(void *)(v6 + v7 + 8) = 0;
          }
          ++v8;
          v7 += 32;
        }
        while (v8 < *(unsigned int *)(a3 + 24));
      }
      heap_Free(*(void **)(v14 + 8), v6);
      *(void *)(a3 + 8) = 0;
    }
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
      unint64_t v10 = *(unsigned int *)(a3 + 28);
      if (v10)
      {
        for (unint64_t i = 0; i < v10; ++i)
        {
          if (*(void *)(v9 + 8 * i))
          {
            heap_Free(*(void **)(v14 + 8), *(void *)(v9 + 8 * i));
            uint64_t v9 = *(void *)(a3 + 16);
            *(void *)(v9 + 8 * i) = 0;
            unint64_t v10 = *(unsigned int *)(a3 + 28);
          }
        }
      }
      heap_Free(*(void **)(v14 + 8), v9);
      *(void *)(a3 + 16) = 0;
    }
    uint64_t v12 = *(void *)(a3 + 40);
    if (v12)
    {
      heap_Free(*(void **)(v14 + 8), v12);
      *(void *)(a3 + 40) = 0;
    }
    heap_Free(*(void **)(v14 + 8), a3);
  }
  return v5;
}

uint64_t cupreader_readData(uint64_t *a1, char *__s1, uint64_t *a3, _DWORD *a4)
{
  uint64_t result = 2166366214;
  if (!a3 || !a1 || !__s1 || !a4) {
    goto LABEL_17;
  }
  uint64_t v9 = *a1;
  if (!*(_DWORD *)(*a1 + 16)) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v12 = *(void *)(v9 + 8);
    if (v12) {
      break;
    }
LABEL_10:
    ++v11;
    v10 += 40;
    if (v11 >= *(unsigned int *)(v9 + 16)) {
      return 0;
    }
  }
  if (cstdlib_strcmp(__s1, *(const char **)(v12 + v10)))
  {
    uint64_t v9 = *a1;
    goto LABEL_10;
  }
  uint64_t v13 = v12 + v10;
  uint64_t v14 = *(void *)(v12 + v10 + 8);
  if (v14)
  {
    uint64_t result = 0;
    goto LABEL_16;
  }
  uint64_t result = clcarchive_GetData(*a1, v11, 0, *(_DWORD *)(v13 + 16), &v16);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v14 = v16;
    *(void *)(v13 + 8) = v16;
LABEL_16:
    *a3 = v14;
    int v15 = *(_DWORD *)(v13 + 16);
LABEL_21:
    *a4 = v15;
    return result;
  }
LABEL_17:
  if (a3) {
    *a3 = 0;
  }
  if (a4)
  {
    int v15 = 0;
    goto LABEL_21;
  }
  return result;
}

uint64_t cupreader_initFromFile(_WORD *a1, int a2, uint64_t a3, uint64_t **a4)
{
  v16[0] = xmmword_26D20DAC0;
  v16[1] = *(_OWORD *)&off_26D20DAD0;
  int v15 = 1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v8 = clcarchive_ObjOpen(a1, a2, "dontcare", (uint64_t *)&v13);
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v9 = clcarchive_Parse((uint64_t)v13, v16, a3, &v15, 0);
    if ((v9 & 0x80000000) != 0) {
      return v9;
    }
    uint64_t v10 = cupreader_open(a1, a2, v13, &v14);
    unint64_t v11 = v14;
    if ((v10 & 0x80000000) == 0)
    {
      v14[7] = a3;
      *a4 = v11;
      return v10;
    }
    if (v14) {
      cupreader_close(a1, a2, (uint64_t)v14);
    }
  }
  if (v13) {
    clcarchive_ObjClose((uint64_t)v13);
  }
  return v10;
}

uint64_t cupreader_initFromBuffer(_WORD *a1, int a2, uint64_t a3, int a4, uint64_t **a5)
{
  memset(v18, 0, sizeof(v18));
  clcarchive_GetMemoryStreamInterface(v18);
  int v14 = 1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = a3;
  int v16 = a4;
  int v17 = 0;
  uint64_t result = clcarchive_ObjOpen(a1, a2, "dontcare", (uint64_t *)&v12);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = clcarchive_Parse((uint64_t)v12, v18, (uint64_t)&v15, &v14, 0);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = cupreader_open(a1, a2, v12, &v13);
      if ((result & 0x80000000) == 0)
      {
        unint64_t v11 = v13;
        v13[7] = a3;
        *a5 = v11;
      }
    }
  }
  return result;
}

uint64_t cupreader_deInit(_WORD *a1, int a2, uint64_t *a3)
{
  clcarchive_ObjClose(*a3);
  *a3 = 0;

  return cupreader_close(a1, a2, (uint64_t)a3);
}

BOOL cupreader_IsCupInTheScope(uint64_t a1, void *a2)
{
  return !paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"cup_name", a2) && *a2 != 0;
}

BOOL cupreader_GetTuningDataNameInCup(uint64_t a1, void *a2)
{
  return !paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"tuning_data_name_in_cup", a2) && *a2 != 0;
}

uint64_t cupreader_PrependCupName(char *a1, const char *a2, unint64_t a3)
{
  size_t v6 = cstdlib_strlen(a1);
  size_t v7 = cstdlib_strlen(a2);
  unint64_t v8 = v7 + v6 + 1;
  if (v8 > a3) {
    return 2166366226;
  }
  for (; v7 + v6 >= v7 + 1; --v6)
    a1[v7 + v6] = a1[v6 - 1];
  a1[v7] = 58;
  cstdlib_strncpy(a1, a2, v7);
  uint64_t result = 0;
  a1[v8] = 0;
  return result;
}

uint64_t cupreader_getCupJsonDescription(_WORD *a1, int a2, uint64_t a3, uint64_t a4, char **a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unsigned int v40 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v41);
  uint64_t v9 = inited;
  if ((inited & 0x80000000) != 0)
  {
    unint64_t v11 = 0;
    uint64_t v10 = inited;
    goto LABEL_44;
  }
  uint64_t v10 = 2166366218;
  SplitpathOrUrl(a3, 0, 0, 0, v44, v43);
  snprintf(__str, 0x400uLL, "{\n\t\"fileName\": \"%s%s\",\n", v44, v43);
  unint64_t v11 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), 0, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v11) {
    goto LABEL_44;
  }
  snprintf(__str, 0x400uLL, "\t\"name\": \"%s\",\n", *(const char **)(a4 + 40));
  uint64_t v12 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v12) {
    goto LABEL_44;
  }
  uint64_t v13 = v12;
  cuputils_getVersionString(*(unsigned int *)(a4 + 32), v45, 32, &v40);
  snprintf(__str, 0x400uLL, "\t\"version\": \"%s\",\n", v45);
  int v14 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v13, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v14) {
    goto LABEL_43;
  }
  unint64_t v11 = v14;
  snprintf(__str, 0x400uLL, "\t\"format\": \"%d\",\n", v40);
  uint64_t v15 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v15) {
    goto LABEL_44;
  }
  uint64_t v13 = v15;
  if (!*(_DWORD *)(a4 + 24)) {
    goto LABEL_27;
  }
  int v16 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v15, "\t\"tuning\": [\n", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v16)
  {
LABEL_43:
    unint64_t v11 = v13;
    goto LABEL_44;
  }
  unint64_t v11 = v16;
  if (*(_DWORD *)(a4 + 24))
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, "\t\t{\n", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v19) {
        goto LABEL_44;
      }
      uint64_t v20 = v19;
      strcpy(__str, "\t\t\t\"fileName\": \"[TBD]\",\n");
      uint64_t v21 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v19, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v21) {
        goto LABEL_24;
      }
      unint64_t v11 = v21;
      snprintf(__str, 0x400uLL, "\t\t\t\"mimeType\": \"%s\",\n", *(const char **)(*(void *)(a4 + 8) + v17 + 8));
      uint64_t v22 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v22) {
        goto LABEL_44;
      }
      uint64_t v20 = v22;
      snprintf(__str, 0x400uLL, "\t\t\t\"name\": \"%s\"\n", *(const char **)(*(void *)(a4 + 8) + v17));
      int v23 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v20, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v23) {
        goto LABEL_24;
      }
      unint64_t v11 = v23;
      unsigned int v24 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v23, "\t\t}", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v24) {
        goto LABEL_44;
      }
      uint64_t v20 = v24;
      unsigned int v25 = ++v18 >= *(unsigned int *)(a4 + 24) ? "\n" : ",\n";
      unint64_t v11 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v24, v25, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v11)
      {
LABEL_24:
        unint64_t v11 = v20;
        goto LABEL_44;
      }
      v17 += 32;
    }
    while (v18 < *(unsigned int *)(a4 + 24));
  }
  int v26 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, "\t]", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v26) {
    goto LABEL_44;
  }
  uint64_t v27 = v26;
  if (*(_DWORD *)(a4 + 28)) {
    unsigned int v28 = ",\n";
  }
  else {
    unsigned int v28 = "\n";
  }
  uint64_t v13 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v26, v28, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v13)
  {
    unint64_t v11 = v27;
    goto LABEL_44;
  }
LABEL_27:
  if (!*(_DWORD *)(a4 + 28)) {
    goto LABEL_41;
  }
  uint64_t v29 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v13, "\t\"implicit\": [\n", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v29) {
    goto LABEL_43;
  }
  unint64_t v11 = v29;
  if (*(_DWORD *)(a4 + 28))
  {
    unint64_t v30 = 0;
    do
    {
      int v31 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, "\t\t{\n", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v31) {
        goto LABEL_44;
      }
      uint64_t v32 = v31;
      strcpy(__str, "\t\t\t\"fileName\": \"[TBD]\",\n");
      uint64_t v33 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v31, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v33) {
        goto LABEL_47;
      }
      unint64_t v11 = v33;
      snprintf(__str, 0x400uLL, "\t\t\t\"name\": \"%s\"\n", *(const char **)(*(void *)(a4 + 16) + 8 * v30));
      uint64_t v34 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, __str, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v34) {
        goto LABEL_44;
      }
      int v35 = v34;
      uint64_t v36 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v34, "\t\t}", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v36)
      {
        unint64_t v11 = v35;
        goto LABEL_44;
      }
      uint64_t v32 = v36;
      if (++v30 >= *(unsigned int *)(a4 + 28)) {
        uint64_t v37 = "\n";
      }
      else {
        uint64_t v37 = ",\n";
      }
      unint64_t v11 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v36, v37, 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
      if (!v11)
      {
LABEL_47:
        unint64_t v11 = v32;
        goto LABEL_44;
      }
    }
    while (v30 < *(unsigned int *)(a4 + 28));
  }
  uint64_t v13 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v11, "\t]\n", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  if (!v13)
  {
LABEL_44:
    heap_Free(*(void **)(v41 + 8), (uint64_t)v11);
    uint64_t v38 = 0;
    uint64_t v9 = v10;
    goto LABEL_45;
  }
LABEL_41:
  uint64_t v38 = strhelper_StringAppend(*(uint64_t **)(v41 + 8), v13, "}\n", 0xFFFFFFFFFFFFFFFFLL, &v42, 0x400uLL);
  unint64_t v11 = v13;
  if (!v38) {
    goto LABEL_44;
  }
LABEL_45:
  *a5 = v38;
  return v9;
}

uint64_t clcarchive_ObjOpen(_WORD *a1, int a2, const char *a3, uint64_t *a4)
{
  uint64_t v16 = 0;
  uint64_t v4 = 2349867018;
  if (!a4) {
    return 2349867015;
  }
  uint64_t inited = InitRsrcFunction(a1, a2, &v16);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a4 = 0;
  uint64_t v8 = heap_Calloc(*(void **)(v16 + 8), 1, 144);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v16 + 8);
    int v11 = cstdlib_strlen(a3);
    uint64_t v12 = (char *)heap_Alloc(v10, (v11 + 1));
    *(void *)(v9 + 128) = v12;
    if (v12)
    {
      cstdlib_strcpy(v12, a3);
      *(void *)(v9 + 64) = heap_Alloc;
      *(void *)(v9 + 72) = heap_Calloc;
      *(void *)(v9 + 80) = heap_Realloc;
      *(void *)(v9 + 88) = heap_Free;
      int v13 = OOCAllocator_Con(v9 + 24, (_OWORD *)(v9 + 64), *(void *)(v16 + 8));
      uint64_t v14 = LH_ERROR_to_VERROR(v13);
      if ((v14 & 0x80000000) != 0)
      {
        heap_Free(*(void **)(v16 + 8), *(void *)(v9 + 128));
        heap_Free(*(void **)(v16 + 8), v9);
        return 2349867012;
      }
      else
      {
        *(void *)uint64_t v9 = v16;
        *(_DWORD *)(v9 + 120) = 0;
        uint64_t v4 = v14;
        *a4 = v9;
      }
    }
    else
    {
      heap_Free(*(void **)(v16 + 8), v9);
    }
  }
  return v4;
}

uint64_t clcarchive_GetData(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v10 = heap_Calloc(*(void **)(*(void *)a1 + 8), a4 + 3, 1);
  if (v10)
  {
    int v11 = (***(uint64_t (****)(void, void))(a1 + 104))(*(void *)(a1 + 104) - *(void *)(**(void **)(a1 + 104) + 56), (*(_DWORD *)(*(void *)(a1 + 8) + 40 * a2 + 20) + a3));
    if ((LH_ERROR_to_VERROR(v11) & 0x80000000) != 0
      || (int v12 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 104) + 8))(*(void *)(a1 + 104) - *(void *)(**(void **)(a1 + 104) + 56), v10, a4), result = LH_ERROR_to_VERROR(v12), (result & 0x80000000) != 0))
    {
      heap_Free(*(void **)(*(void *)a1 + 8), v10);
      uint64_t v10 = 0;
      uint64_t result = 2349867012;
    }
  }
  else
  {
    uint64_t result = 2349867018;
  }
  *a5 = v10;
  return result;
}

uint64_t clcarchive_Parse(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4, int a5)
{
  v45[1] = *MEMORY[0x263EF8340];
  unsigned __int16 v43 = 0;
  unsigned __int8 v42 = 0;
  uint64_t v5 = 2349867012;
  uint64_t __s1 = 0;
  v45[0] = 0;
  if (!a1) {
    return 2349867016;
  }
  uint64_t v7 = 2349867015;
  if (a2 && a3)
  {
    if (a5) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = a3;
    }
    unsigned int v41 = 0;
    *(void *)(a1 + 112) = v9;
    int v10 = PNEW_BinBlockStreamReader_Con(a1 + 24, a1 + 24, a2, a3, a4, (uint64_t *)(a1 + 96));
    if ((LH_ERROR_to_VERROR(v10) & 0x80000000) != 0) {
      goto LABEL_69;
    }
    uint64_t v11 = a1 + 104;
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned int *))(*(void *)(*(void *)(a1 + 96) + 32)
                                                                                       + 120))(*(void *)(a1 + 96) + 32 - *(void *)(*(void *)(*(void *)(a1 + 96) + 32) + 224), 535211295, 0, a1 + 104, &v41);
    int v13 = LH_ERROR_to_VERROR(v12);
    unsigned int v14 = v41;
    *(_DWORD *)(a1 + 136) = v41;
    if (v13 < 0
      || !BinBlockStreamReader_IsVersionAccepted(v14, 1900544)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1835008)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1769472)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1703936)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1638400)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1572864)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1507328)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1441792)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1376256)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1310720)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1245184)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1179648)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 1114112)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 0x100000)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 983040)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 917504)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 851968)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 786432)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 720896)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 655360)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 589824)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 0x80000)
      && !BinBlockStreamReader_IsVersionAccepted(v41, 459008)
      && (!BinBlockStreamReader_IsVersionAccepted(v41, 393216) || cstdlib_strstr(*(char **)(a1 + 128), "/cfg4")))
    {
      goto LABEL_69;
    }
    int v15 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(**(void **)v11 + 8))(*(void *)v11 - *(void *)(**(void **)v11 + 56), &__s1, 7);
    if ((LH_ERROR_to_VERROR(v15) & 0x80000000) != 0
      || cstdlib_memcmp(&__s1, "NVAR", 4uLL)
      || BYTE4(__s1) > 7u
      || BYTE4(__s1) == 7 && (BYTE5(__s1) > 4u || BYTE5(__s1) == 4 && BYTE6(__s1)))
    {
      goto LABEL_69;
    }
    uint64_t v16 = (_DWORD *)(a1 + 16);
    int v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 8))(*(void *)(a1 + 104) - *(void *)(**(void **)(a1 + 104) + 56), a1 + 16, 4);
    uint64_t v18 = LH_ERROR_to_VERROR(v17);
    if ((v18 & 0x80000000) != 0) {
      goto LABEL_69;
    }
    uint64_t v7 = v18;
    uint64_t v19 = *v16;
    if (v19)
    {
      uint64_t v20 = heap_Calloc(*(void **)(*(void *)a1 + 8), v19, 40);
      *(void *)(a1 + 8) = v20;
      if (!v20) {
        goto LABEL_68;
      }
      if (*v16)
      {
        uint64_t v21 = 0;
        int v22 = 11;
LABEL_44:
        int v23 = (*(uint64_t (**)(void, unsigned __int16 *, uint64_t))(**(void **)v11 + 8))(*(void *)v11 - *(void *)(**(void **)v11 + 56), &v43, 2);
        if ((LH_ERROR_to_VERROR(v23) & 0x80000000) != 0) {
          goto LABEL_69;
        }
        uint64_t v24 = heap_Calloc(*(void **)(*(void *)a1 + 8), v43 + 1, 1);
        *(void *)(*(void *)(a1 + 8) + 40 * v21) = v24;
        if (v24)
        {
          int v25 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)v11 + 8))(*(void *)v11 - *(void *)(**(void **)v11 + 56), v24, v43);
          if ((LH_ERROR_to_VERROR(v25) & 0x80000000) != 0) {
            goto LABEL_69;
          }
          int v26 = v43;
          int v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 8))(*(void *)(a1 + 104) - *(void *)(**(void **)(a1 + 104) + 56), *(void *)(a1 + 8) + 40 * v21 + 16, 4);
          if ((LH_ERROR_to_VERROR(v27) & 0x80000000) != 0) {
            goto LABEL_69;
          }
          int v28 = v22 + v26 + 6;
          uint64_t v29 = *(void *)(a1 + 8);
          if (!a5 && v21)
          {
            uint64_t v30 = v29 + 40 * v21;
            *(_DWORD *)(v30 + 20) = v28;
            int v31 = (***(uint64_t (****)(void, void))v11)(*(void *)v11 - *(void *)(**(void **)v11 + 56), (*(_DWORD *)(v30 + 16) + v28));
            goto LABEL_53;
          }
          uint64_t v32 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, *(unsigned int *)(v29 + 40 * v21 + 16));
          uint64_t v33 = *(void *)(a1 + 8);
          *(void *)(v33 + 40 * v21 + 8) = v32;
          if (v32)
          {
            uint64_t v34 = v33 + 40 * v21;
            *(_DWORD *)(v34 + 20) = v28;
            int v31 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)v11 + 8))(*(void *)v11 - *(void *)(**(void **)v11 + 56), v32, *(unsigned int *)(v34 + 16));
LABEL_53:
            if ((LH_ERROR_to_VERROR(v31) & 0x80000000) == 0)
            {
              v22 += v26 + *(_DWORD *)(*(void *)(a1 + 8) + 40 * v21 + 16) + 15;
              while (1)
              {
                int v35 = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**(void **)v11 + 8))(*(void *)v11 - *(void *)(**(void **)v11 + 56), &v42, 1);
                if ((LH_ERROR_to_VERROR(v35) & 0x80000000) != 0) {
                  break;
                }
                int v36 = (*(uint64_t (**)(void, void *, uint64_t))(**(void **)v11 + 8))(*(void *)v11 - *(void *)(**(void **)v11 + 56), v45, 8);
                uint64_t v37 = LH_ERROR_to_VERROR(v36);
                if ((v37 & 0x80000000) != 0) {
                  break;
                }
                if (!v42 && !v45[0])
                {
                  uint64_t v7 = v37;
                  if (++v21 < (unint64_t)*v16) {
                    goto LABEL_44;
                  }
                  return v7;
                }
                unsigned int v38 = *(_DWORD *)(*(void *)(a1 + 8) + 40 * v21 + 16);
                v22 += 9;
                if (LODWORD(v45[0]) > v38 || LODWORD(v45[0]) + HIDWORD(v45[0]) * v42 > v38) {
                  goto LABEL_69;
                }
              }
            }
            goto LABEL_69;
          }
        }
LABEL_68:
        uint64_t v5 = 2349867018;
LABEL_69:
        clcarchive_ObjClose(a1);
        return v5;
      }
    }
  }
  return v7;
}

uint64_t clcarchive_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2349867016;
  }
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2 - *(void *)(*(void *)v2 + 56));
  }
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    heap_Free(*(void **)(*(void *)a1 + 8), v4);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(a1 + 8);
        uint64_t v9 = *(void *)(v8 + v6);
        if (v9)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v9);
          uint64_t v8 = *(void *)(a1 + 8);
        }
        uint64_t v10 = *(void *)(v8 + v6 + 8);
        if (v10)
        {
          heap_Free(*(void **)(*(void *)a1 + 8), v10);
          uint64_t v8 = *(void *)(a1 + 8);
        }
        uint64_t v11 = *(void *)(v8 + v6 + 24);
        if (v11) {
          heap_Free(*(void **)(*(void *)a1 + 8), v11);
        }
        ++v7;
        v6 += 40;
      }
      while (v7 < *(unsigned int *)(a1 + 16));
      uint64_t v5 = *(void *)(a1 + 8);
    }
    heap_Free(*(void **)(*(void *)a1 + 8), v5);
  }
  heap_Free(*(void **)(*(void *)a1 + 8), a1);
  return 0;
}

double clcarchive_GetMemoryStreamInterface@<D0>(_OWORD *a1@<X8>)
{
  double result = *(double *)&clcMemoryStreamInterface;
  long long v2 = *(_OWORD *)&off_26D20DAF0;
  *a1 = clcMemoryStreamInterface;
  a1[1] = v2;
  return result;
}

size_t ClcDataRead(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned int *)(a4 + 12);
  if (a3 * a2 >= (*(_DWORD *)(a4 + 8) - v6)) {
    size_t v7 = (*(_DWORD *)(a4 + 8) - v6);
  }
  else {
    size_t v7 = a3 * a2;
  }
  cstdlib_memcpy(a1, (const void *)(*(void *)a4 + v6), v7);
  *(_DWORD *)(a4 + 12) += v7;
  return v7 / a2;
}

uint64_t ClcDataSeek(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 12) + a2;
    if (v5 >= 0 && v5 < (unint64_t)*(unsigned int *)(a1 + 8))
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 12) = v5;
      return result;
    }
  }
  else if (!a3 && *(_DWORD *)(a1 + 8) > a2)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 12) = a2;
    return result;
  }
  return 1;
}

BOOL ClcDataError(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) > *(_DWORD *)(a1 + 8);
}

uint64_t ClcDataFinished()
{
  return 0;
}

size_t auxil_strlcat(const char *a1, const char *a2, uint64_t a3)
{
  size_t v6 = cstdlib_strlen(a1);
  size_t v7 = cstdlib_strlen(a2);
  size_t v8 = v7;
  if (a3 && v6 < a3 - 1)
  {
    if (v7 >= a3 - v6) {
      size_t v9 = a3 - v6 - 1;
    }
    else {
      size_t v9 = v7;
    }
    cstdlib_memcpy((void *)&a1[v6], a2, v9);
    a1[v9 + v6] = 0;
  }
  return v8 + v6;
}

size_t auxil_strlcpy(void *a1, char *__s, size_t a3)
{
  size_t v6 = cstdlib_strlen(__s);
  size_t v7 = v6;
  if (a3)
  {
    if (v6 >= a3) {
      size_t v8 = a3 - 1;
    }
    else {
      size_t v8 = v6;
    }
    cstdlib_memcpy(a1, __s, v8);
    *((unsigned char *)a1 + v8) = 0;
  }
  return v7;
}

uint64_t brokeraux_ComposeBrokerString(uint64_t a1, const char *a2, int a3, int a4, char *a5, const char *a6, char *a7, unsigned char *a8, size_t a9)
{
  uint64_t v18 = 0;
  paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v18);
  return brokeraux_ComposeBrokerStringEx(a1, a2, a3, a4, a5, a6, a7, v18, a8, a9);
}

uint64_t brokeraux_ComposeBrokerStringEx(uint64_t a1, const char *a2, int a3, int a4, char *a5, const char *a6, char *a7, const char *a8, unsigned char *a9, size_t a10)
{
  uint64_t v18 = a9;
  int v28 = 0;
  uint64_t v29 = 0;
  auxil_strlcpy(a9, "", a10);
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"datapackagename", &v28) & 0x80000000) != 0)
  {
    int v28 = 0;
  }
  else if (v28 && *v28)
  {
    auxil_strlcat(a9, v28, a10);
    auxil_strlcat(a9, ":", a10);
  }
  if (!a4) {
    goto LABEL_22;
  }
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fedatapackaging", &v29) & 0x80000000) != 0) {
    uint64_t v29 = 0;
  }
  int v31 = 0;
  uint64_t v32 = a6;
  uint64_t __s1 = 0;
  switch(a3)
  {
    case 0:
      goto LABEL_19;
    case 1:
      paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &__s1);
      if (__s1 && !cstdlib_strcmp(__s1, "mpthreeml")) {
        goto LABEL_18;
      }
      uint64_t v20 = (uint64_t)a6;
      if (!a6)
      {
        paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v32);
        uint64_t v20 = (uint64_t)v32;
      }
      if (hlp_IsUniVoice(v20, a5))
      {
LABEL_18:
        uint64_t v21 = "feextcfgdataprefix";
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v21 = "fedataprefix";
LABEL_20:
      paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v21, &v31);
      uint64_t v19 = v31;
      if (v31) {
        goto LABEL_21;
      }
      break;
    case 2:
      auxil_strlcat(a9, a6, a10);
      uint64_t v19 = "/";
LABEL_21:
      auxil_strlcat(a9, v19, a10);
      break;
  }
LABEL_22:
  if (v29 && *v29)
  {
    if (cstdlib_strcmp(v29, "clc"))
    {
      int v22 = v29;
    }
    else
    {
      auxil_strlcat(a9, "clc/", a10);
      auxil_strlcat(a9, a5, a10);
      if (a6)
      {
        BOOL IsUniVoice = hlp_IsUniVoice((uint64_t)a6, a5);
        if (a3 != 2 && !IsUniVoice)
        {
          auxil_strlcat(a9, "/", a10);
          auxil_strlcat(a9, a6, a10);
        }
      }
      auxil_strlcat(a9, "/", a10);
      auxil_strlcat(a9, a8, a10);
      if (!a7) {
        goto LABEL_27;
      }
      auxil_strlcat(a9, "/", a10);
      if (cstdlib_strstr(a7, "bet2"))
      {
        int v22 = "bet2";
      }
      else if (cstdlib_strstr(a7, "bet3"))
      {
        int v22 = "bet3";
      }
      else if (cstdlib_strstr(a7, "bet4"))
      {
        int v22 = "bet4";
      }
      else
      {
        int v22 = "bet1";
      }
    }
    auxil_strlcat(a9, v22, a10);
LABEL_27:
    if (v28 && *v28) {
      int v23 = "/";
    }
    else {
      int v23 = ":";
    }
    auxil_strlcat(a9, v23, a10);
  }
  size_t v24 = auxil_strlcat(a9, a2, a10);
  if (v24 >= a10) {
    return 9;
  }
  for (size_t i = v24; i; --i)
  {
    unsigned char *v18 = ssft_tolower(*v18);
    ++v18;
  }
  return 0;
}

BOOL hlp_IsUniVoice(uint64_t a1, char *a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    char v5 = *a2;
    if (*a2)
    {
      uint64_t v6 = 0;
      int v7 = 0;
      while (1)
      {
        int v8 = cstdlib_tolower(v5);
        if (v8 != cstdlib_tolower(*(char *)(a1 + v6))) {
          break;
        }
        uint64_t v6 = (unsigned __int16)++v7;
        char v5 = a2[(unsigned __int16)v7];
        if (!v5) {
          return cstdlib_strcmp((const char *)(a1 + v6), "uni") == 0;
        }
      }
      if (a2[v6]) {
        return 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    return cstdlib_strcmp((const char *)(a1 + v6), "uni") == 0;
  }
  return result;
}

uint64_t xmlaux_calculateExtraEscapeBytes(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    uint64_t v4 = 0;
    uint64_t result = 0;
    do
    {
      if (!*(unsigned char *)(a1 + v4)) {
        break;
      }
      for (uint64_t i = 0; i != 168; i += 24)
      {
        if (*(unsigned __int8 *)(a1 + v4) == xmlESC[i + 16]) {
          uint64_t v6 = *(void *)&xmlESC[i + 8] - 1;
        }
        else {
          uint64_t v6 = 0;
        }
        result += v6;
      }
      ++v4;
    }
    while (v4 != a2);
  }
  return result;
}

char *xmlaux_escape(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  if (a2 && a3)
  {
    uint64_t v4 = 0;
    for (uint64_t i = 0; i != a3; ++i)
    {
      if (!*(unsigned char *)(a2 + i)) {
        break;
      }
      uint64_t v8 = 0;
      v3[v4] = *(unsigned char *)(a2 + i);
      do
      {
        if (*(unsigned __int8 *)(a2 + i) == xmlESC[v8 + 16])
        {
          uint64_t result = cstdlib_strcpy(&v3[v4], &xmlESC[v8]);
          uint64_t v4 = v4 + *(void *)&xmlESC[v8 + 8] - 1;
        }
        v8 += 24;
      }
      while (v8 != 168);
      ++v4;
    }
  }
  v3[v4] = 0;
  return result;
}

uint64_t loc_unescape(unsigned char *a1, int a2)
{
  if (a1)
  {
    if (a2) {
      __int16 v3 = 5;
    }
    else {
      __int16 v3 = 0;
    }
    if (*a1)
    {
      unint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        unsigned __int16 v6 = v3;
        while (v6 != 7)
        {
          int v7 = &xmlESC[24 * v6];
          size_t v8 = *((void *)v7 + 1);
          if (!cstdlib_strncmp(&a1[v5], v7, v8))
          {
            a1[v4] = xmlESC[24 * v6 + 16];
            unint64_t v5 = v5 + v8 - 1;
            goto LABEL_15;
          }
          if ((++v6 & 0x8000) != 0) {
            goto LABEL_15;
          }
        }
        if (v5 > v4) {
          a1[v4] = a1[v5];
        }
LABEL_15:
        ++v5;
        ++v4;
      }
      while (a1[v5]);
    }
    else
    {
      unint64_t v4 = 0;
    }
    a1[v4] = 0;
  }
  return 0;
}

uint64_t xmlaux_unescape(unsigned char *a1)
{
  return 0;
}

uint64_t xmlaux_unescapeESC(unsigned char *a1)
{
  return 0;
}

uint64_t synstrmaux_InitStreamOpener(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)uint64_t result = 0;
  *(void *)(result + 808) = a2;
  *(void *)(result + 816) = a3;
  return result;
}

_WORD *synstrmaux_RegisterStream(_WORD *result, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  unint64_t v6 = (unsigned __int16)*result;
  if (v6 <= 0x13)
  {
    int v7 = &result[20 * (unsigned __int16)*result];
    *((void *)v7 + 1) = a2;
    *((_DWORD *)v7 + 4) = a3;
    *((void *)v7 + 3) = a4;
    *((_DWORD *)v7 + 8) = a5;
    *((void *)v7 + 5) = a6;
    *(void *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
  }
  *uint64_t result = v6 + 1;
  return result;
}

_WORD *synstrmaux_RegisterInStream(_WORD *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4 = (unsigned __int16)*result;
  if (v4 <= 0x13)
  {
    unint64_t v5 = &result[20 * (unsigned __int16)*result];
    *((void *)v5 + 1) = a2;
    *((_DWORD *)v5 + 4) = 0;
    *((void *)v5 + 3) = 0;
    *((_DWORD *)v5 + 8) = a3;
    *((void *)v5 + 5) = a4;
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
  }
  *uint64_t result = v4 + 1;
  return result;
}

_WORD *synstrmaux_RegisterOutStream(_WORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (unsigned __int16)*result;
  if (v3 <= 0x13)
  {
    unint64_t v4 = &result[20 * (unsigned __int16)*result];
    *((void *)v4 + 1) = a2;
    *((_DWORD *)v4 + 4) = 1;
    *((void *)v4 + 3) = 0;
    *((_DWORD *)v4 + 8) = 0;
    *((void *)v4 + 5) = a3;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  *uint64_t result = v3 + 1;
  return result;
}

uint64_t synstrmaux_OpenStreams(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*a1 <= 0x14u) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 9;
  }
  if (!*a1) {
    return v4;
  }
  uint64_t v9 = 0;
  uint64_t v10 = (uint64_t (**)(void))(a2 + 184);
  uint64_t v11 = (uint64_t (**)(void))(a2 + 152);
  for (uint64_t i = a1 + 12; ; i += 20)
  {
    if (*((_DWORD *)i - 2))
    {
      int v13 = cstdlib_strcmp("application/x-realspeak-markers-pp;version=4.0", *((const char **)i - 2));
      unsigned int v14 = v11;
      if (!v13
        || *((_DWORD *)i - 2)
        && (v15 = cstdlib_strcmp("application/x-tnplus-words;version=1.0", *((const char **)i - 2)), unsigned int v14 = v10, !v15))
      {
        *(void *)uint64_t i = (*v14)();
      }
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void))(a2 + 64))(a3, a4, *(unsigned __int16 *)(*((void *)a1 + 102) + 64), *((void *)i - 2), *(void *)i, *((unsigned int *)i - 2), *((void *)i + 2));
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    uint64_t v20 = *((void *)a1 + 101);
    uint64_t v21 = *((void *)a1 + 102);
    if (!*((_DWORD *)i + 2)) {
      break;
    }
    int v22 = "output";
    if (!*((_DWORD *)i - 2)) {
      int v22 = "input";
    }
    log_OutText(v20, v21, 3, 0, (uint64_t)"Cannot open %s stream of type %s", v17, v18, v19, (uint64_t)v22);
    uint64_t v4 = 0;
LABEL_16:
    if (++v9 >= (unint64_t)*a1) {
      return v4;
    }
  }
  if (*((_DWORD *)i - 2)) {
    uint64_t v23 = 65001;
  }
  else {
    uint64_t v23 = 65000;
  }
  log_OutPublic(v20, v21, v23, (uint64_t)"%s%s", v16, v17, v18, v19, "contentType");
  return v4;
}

uint64_t synstrmaux_CloseStreams(_WORD *a1, uint64_t a2)
{
  unsigned int v2 = (unsigned __int16)*a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  int v7 = (void **)(a1 + 20);
  do
  {
    if (**v7)
    {
      uint64_t v6 = CloseStream((uint64_t)a1, a2, (uint64_t)(v7 - 4), v6);
      unsigned int v2 = (unsigned __int16)*a1;
    }
    ++v5;
    v7 += 5;
  }
  while (v5 < v2);
  return v6;
}

uint64_t CloseStream(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v10 = (*(uint64_t (**)(void, void))(a2 + 72))(**(void **)(a3 + 32), *(void *)(*(void *)(a3 + 32) + 8));
  uint64_t v11 = *(void *)(a3 + 32);
  *(void *)uint64_t v11 = 0;
  *(_DWORD *)(v11 + 8) = 0;
  if ((v10 & 0x80000000) != 0)
  {
    int v12 = "output";
    if (!*(_DWORD *)(a3 + 8)) {
      int v12 = "input";
    }
    log_OutText(*(void *)(a1 + 808), *(void *)(a1 + 816), 3, 0, (uint64_t)"Cannot close %s stream of type %s", v7, v8, v9, (uint64_t)v12);
  }
  if (a4 >= 0) {
    return v10;
  }
  else {
    return a4;
  }
}

uint64_t synstrmaux_CloseOutStreamsOnly(_WORD *a1, uint64_t a2)
{
  unsigned int v2 = (unsigned __int16)*a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = (void **)(a1 + 20);
  do
  {
    if (**v7 && *((_DWORD *)v7 - 6))
    {
      uint64_t v6 = CloseStream((uint64_t)a1, a2, (uint64_t)(v7 - 4), v6);
      unsigned int v2 = (unsigned __int16)*a1;
    }
    ++v5;
    v7 += 5;
  }
  while (v5 < v2);
  return v6;
}

size_t synstrmaux_BuildAudioContentType(const char *a1, unsigned int a2, char *a3, size_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LH_utoa(a2, __s, 0xAu);
  size_t v7 = cstdlib_strlen(a1);
  size_t v8 = cstdlib_strlen(__s);
  cstdlib_strncpy(a3, a1, a4);
  if (a4 > v7)
  {
    cstdlib_strncpy(&a3[v7], __s, a4 - v7);
LABEL_4:
    a3[a4 - 1] = 0;
    return v8 + v7;
  }
  if (a4) {
    goto LABEL_4;
  }
  return v8 + v7;
}

uint64_t esc_seq_deinit(_WORD *a1, int a2, void *a3, int a4)
{
  esc_seq_remove_params(a1, a2);
  nuance_pcre_DeInit(a3, a4);

  return nuance_pcre_ObjClose((uint64_t)a3, a4);
}

uint64_t esc_seq_remove_params(_WORD *a1, int a2)
{
  uint64_t v5 = 0;
  int v4 = 0;
  unint64_t v3 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0)
  {
    if ((paramc_ParamGet(*(void *)(v5 + 40), (uint64_t)"fullescseqdata", &v3, &v4) & 0x80000000) == 0)
    {
      if (*v3) {
        heap_Free(*(void **)(v5 + 8), *v3);
      }
      paramc_ParamRemove(*(void *)(v5 + 40), (uint64_t)"fullescseqdata");
    }
    if ((paramc_ParamGet(*(void *)(v5 + 40), (uint64_t)"fullesctnseqdata", &v3, &v4) & 0x80000000) == 0)
    {
      if (*v3) {
        heap_Free(*(void **)(v5 + 8), *v3);
      }
      paramc_ParamRemove(*(void *)(v5 + 40), (uint64_t)"fullesctnseqdata");
    }
    uint64_t result = paramc_ParamGet(*(void *)(v5 + 40), (uint64_t)"fullescvoiceseqdata", &v3, &v4);
    if ((result & 0x80000000) == 0)
    {
      if (*v3) {
        heap_Free(*(void **)(v5 + 8), *v3);
      }
      return paramc_ParamRemove(*(void *)(v5 + 40), (uint64_t)"fullescvoiceseqdata");
    }
  }
  return result;
}

uint64_t esc_seq_init(_WORD *a1, int a2, uint64_t *a3)
{
  uint64_t v36 = 0;
  int v35 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v36);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  int UInt = paramc_ParamGetUInt(*(void *)(v36 + 40), (uint64_t)"ppmaxpcreframeblocks", (unsigned int *)&v35);
  unsigned __int16 v8 = v35;
  int v9 = paramc_ParamGetUInt(*(void *)(v36 + 40), (uint64_t)"ppnumframesinblock", (unsigned int *)&v35);
  __int16 v10 = v35;
  uint64_t inited = nuance_pcre_ObjOpen(a1, a2, (uint64_t)a3);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (v9 < 0) {
    __int16 v11 = 50;
  }
  else {
    __int16 v11 = v10;
  }
  if (UInt < 0) {
    unsigned __int16 v12 = 30;
  }
  else {
    unsigned __int16 v12 = v8;
  }
  uint64_t v13 = nuance_pcre_Init((void *)*a3, a3[1], v12, v11);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v17 = v13;
    nuance_pcre_ObjClose(*a3, a3[1]);
    *a3 = safeh_GetNullHandle();
    a3[1] = v19;
    return v17;
  }
  esc_seq_remove_params(a1, a2);
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  __s = 0;
  uint64_t v43 = 0;
  unsigned int v41 = 0;
  int v40 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v43);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  paramc_ParamGetStr(*(void *)(v43 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &__s);
  uint64_t v16 = 0;
  while (cstdlib_strcmp(g_RegExPlainPatterns[v16], "esc"))
  {
    v16 += 2;
    if (v16 == 12) {
      return 0;
    }
  }
  if (__s && *__s) {
    size_t v20 = cstdlib_strlen(__s);
  }
  else {
    size_t v20 = 0;
  }
  uint64_t v17 = 3489669120;
  uint64_t v21 = *(void **)(v43 + 8);
  int v22 = g_RegExPlainPatterns[v16 + 1];
  size_t v23 = cstdlib_strlen(v22);
  uint64_t v24 = heap_Calloc(v21, 1, v20 + v23 + 2);
  if (!v24) {
    return 3489669130;
  }
  int v25 = (char *)v24;
  int v26 = *(void **)(v43 + 8);
  size_t v27 = cstdlib_strlen(v22);
  uint64_t v28 = heap_Calloc(v26, 1, v20 + v27 + 6);
  if (v28)
  {
    uint64_t v29 = (char *)v28;
    cstdlib_strcpy(v25, v22);
    if (v20)
    {
      v25[cstdlib_strlen(v22) - 1] = 0;
      cstdlib_strcat(v25, "|");
      cstdlib_strcat(v25, __s);
      cstdlib_strcat(v25, ")");
    }
    uint64_t v30 = *(void **)(v43 + 8);
    size_t v31 = cstdlib_strlen(v25);
    uint64_t v32 = (char *)heap_Calloc(v30, 1, v31 + 107);
    uint64_t v33 = v32;
    if (v32)
    {
      cstdlib_strcpy(v32, v25);
      cstdlib_strcat(v33, "(?:[\\t\\r\\n ])*[\\\\]([vV][oO][iI][cC][eE])(?:[\\t\\r\\n ])*[=](?:[\\t\\r\\n ])*(([\\w-():,{}])*)(?:[\\t\\r\\n ])*[\\\\]");
      cstdlib_strcpy(v29, v25);
      cstdlib_strcat(v29, "\\\\tn");
      uint64_t v39 = nuance_pcre_compile(v14, v15, v25, 2048, &v41, &v40, 0);
      if (v39)
      {
        heap_Free(*(void **)(v43 + 8), (uint64_t)v25);
        uint64_t v34 = nuance_pcre_compile(v14, v15, v29, 2048, &v41, &v40, 0);
        uint64_t v38 = v34;
        heap_Free(*(void **)(v43 + 8), (uint64_t)v29);
        if (v34)
        {
          uint64_t v37 = nuance_pcre_compile(v14, v15, v33, 2048, &v41, &v40, 0);
          if (v37)
          {
            heap_Free(*(void **)(v43 + 8), (uint64_t)v33);
            paramc_ParamSetPermanent(*(void *)(v43 + 40), (uint64_t)"fullescseqdata", &v39, 8uLL);
            paramc_ParamSetPermanent(*(void *)(v43 + 40), (uint64_t)"fullesctnseqdata", &v38, 8uLL);
            paramc_ParamSetPermanent(*(void *)(v43 + 40), (uint64_t)"fullescvoiceseqdata", &v37, 8uLL);
            return 0;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v17 = 3489669130;
    }
    heap_Free(*(void **)(v43 + 8), (uint64_t)v25);
    heap_Free(*(void **)(v43 + 8), (uint64_t)v29);
    if (v33) {
LABEL_35:
    }
      heap_Free(*(void **)(v43 + 8), (uint64_t)v33);
  }
  else
  {
    heap_Free(*(void **)(v43 + 8), (uint64_t)v25);
    return 3489669130;
  }
  return v17;
}

uint64_t esc_seq_exePattern(_WORD *a1, int a2, void *a3, int a4, uint64_t a5, char *a6, int a7, int a8, _WORD *a9, unsigned int a10, _DWORD *a11)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  int v33 = 0;
  uint64_t v32 = 0;
  *a11 = 0;
  if ((InitRsrcFunction(a1, a2, &v34) & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v17 = paramc_ParamGet(*(void *)(v34 + 40), a5, &v32, &v33);
  if ((v17 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v18 = v17;
  uint64_t v19 = *v32;
  cstdlib_memset(&__b, -1, 0x190uLL);
  unsigned int v20 = nuance_pcre_exec(a3, a4, v19, 0, a6, a7, a8, a10, &__b, 100);
  if ((v20 & 0x80000000) == 0)
  {
    if (v20)
    {
      *a11 = 1;
      __int16 v21 = v36;
      *a9 = __b;
      a9[1] = v21;
    }
    return v18;
  }
  uint64_t v22 = nuance_pcre_ErrorToLhError(v20);
  uint64_t v18 = v22;
  if (v22 >> 20 != 2213) {
    return v18;
  }
  if ((v22 & 0x1FFF) == 0x14) {
    return 0;
  }
  if ((v22 & 0x1FFF) == 0xA)
  {
    uint64_t v27 = *(void *)(v34 + 32);
    uint64_t v28 = 11002;
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v27 = *(void *)(v34 + 32);
    size_t v31 = "lhError";
    uint64_t v29 = "%s%x";
    uint64_t v28 = 11027;
  }
  log_OutPublic(v27, (uint64_t)&modAux, v28, (uint64_t)v29, v23, v24, v25, v26, v31);
  return v18;
}

uint64_t esc_seq_tn_strncmp(_WORD *a1, int a2, void *a3, int a4, char *a5, int a6, _WORD *a7)
{
  uint64_t __b = 0;
  cstdlib_memset(&__b, 0, 4uLL);
  if ((esc_seq_exePattern(a1, a2, a3, a4, (uint64_t)"fullesctnseqdata", a5, a6, 0, &__b, 0x2000u, (_DWORD *)&__b + 1) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if (HIDWORD(__b) != 1 || (unsigned __int16)__b != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *a7 = WORD1(__b);
  return result;
}

char *esc_seq_tn_seq(_WORD *a1, int a2, void *a3, int a4, char *a5, int a6)
{
  uint64_t __b = 0;
  cstdlib_memset(&__b, 0, 4uLL);
  int v12 = esc_seq_exePattern(a1, a2, a3, a4, (uint64_t)"fullesctnseqdata", a5, a6, 0, &__b, 0x2000u, (_DWORD *)&__b + 1);
  if (HIDWORD(__b) != 1 || v12 <= -1) {
    return 0;
  }
  else {
    return &a5[(unsigned __int16)__b];
  }
}

char *esc_seq_strstr(_WORD *a1, int a2, void *a3, int a4, char *a5, _WORD *a6)
{
  uint64_t __b = 0;
  cstdlib_memset(&__b, 0, 4uLL);
  unsigned __int16 v12 = cstdlib_strlen(a5);
  int v13 = esc_seq_exePattern(a1, a2, a3, a4, (uint64_t)"fullescseqdata", a5, v12, 0, &__b, 0x2000u, (_DWORD *)&__b + 1);
  uint64_t result = 0;
  if ((v13 & 0x80000000) == 0 && HIDWORD(__b) == 1)
  {
    uint64_t v15 = (unsigned __int16)__b;
    *a6 = WORD1(__b) - __b;
    return &a5[v15];
  }
  return result;
}

uint64_t isEscSeq(_WORD *a1, int a2, void *a3, int a4, char *a5, int a6, int a7, _WORD *a8)
{
  uint64_t __b = 0;
  cstdlib_memset(&__b, 0, 4uLL);
  int v16 = esc_seq_exePattern(a1, a2, a3, a4, (uint64_t)"fullescseqdata", a5, a6, a7, &__b, 0x2000u, (_DWORD *)&__b + 1);
  uint64_t result = 0;
  if ((v16 & 0x80000000) == 0 && HIDWORD(__b) == 1)
  {
    if ((unsigned __int16)__b == a7)
    {
      *a8 = WORD1(__b) - __b;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t hdrpars_ReadHeader(_WORD *a1, int a2, unsigned char *a3, const char *a4, void *a5, uint64_t *a6)
{
  size_t v7 = a5;
  uint64_t v53 = 0;
  uint64_t v10 = 2183159812;
  if (a3 && *a3)
  {
    uint64_t v11 = 2183159815;
    if (!a5 || !a6) {
      return v11;
    }
  }
  else
  {
    uint64_t v11 = 2183159815;
    if (!a4 || !a6 || !a5 || !*a4) {
      return v11;
    }
  }
  long long __b = 0u;
  *(_OWORD *)uint64_t __s1 = 0u;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v53);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  void *v7 = 0;
  *a6 = 0;
  cstdlib_memset(&__b, 0, 0x20uLL);
  if (a3 && *a3)
  {
    uint64_t v13 = v53;
    *(void *)&long long v55 = 0;
    *(void *)&long long __b = *(void *)(v53 + 8);
    uint64_t v14 = filespi_fopen(*(void *)(v53 + 64), (void *)__b, (uint64_t)a3, (uint64_t)"rb", (uint64_t *)&v55);
    if ((v14 & 0x80000000) != 0)
    {
      uint64_t v10 = 2183159811;
    }
    else
    {
      uint64_t v11 = v14;
      Fileint Size = filespi_GetFileSize((void *)v55);
      if (FileSize)
      {
        int v16 = FileSize;
        uint64_t v17 = heap_Alloc(*(void *)(v13 + 8), (FileSize + 1));
        *((void *)&__b + 1) = v17;
        if (v17)
        {
          unsigned int v18 = filespi_fread(v17, 1, v16, v55);
          if (v18)
          {
            *(unsigned char *)(*((void *)&__b + 1) + v18) = 0;
            filespi_fclose(v55);
LABEL_21:
            __s1[0] = *((char **)&__b + 1);
            int v22 = 0;
            uint64_t v23 = &v50;
            uint64_t v24 = "<?xml";
            uint64_t v47 = v7;
            while (1)
            {
              if (v22 && !*__s1[0]) {
                goto LABEL_93;
              }
              cstdlib_memset(&v48, 0, 0x18uLL);
              if (cstdlib_strncmp(__s1[0], v24, 5uLL)) {
                goto LABEL_45;
              }
              unsigned int v25 = *((unsigned __int8 *)__s1[0] + 5);
              BOOL v26 = v25 > 0x20;
              uint64_t v27 = (1 << v25) & 0x100002600;
              if (v26 || v27 == 0) {
                goto LABEL_45;
              }
              for (uint64_t i = __s1[0] + 6; ; ++i)
              {
                __s1[0] = i;
                unsigned int v30 = *i;
                BOOL v26 = v30 > 0x20;
                uint64_t v31 = (1 << v30) & 0x100002600;
                if (v26 || v31 == 0) {
                  break;
                }
              }
              if (!cstdlib_strncmp(i, "version=\"1.0\"?>", 0xFuLL)
                || !cstdlib_strncmp(__s1[0], "version='1.0'?>", 0xFuLL))
              {
                __s1[0] += 15;
                goto LABEL_45;
              }
              int v33 = v24;
              uint64_t v34 = v23;
              long long v55 = 0uLL;
              uint64_t v56 = 0;
              uint64_t v54 = 0;
              cstdlib_memset(&v55, 0, 0x18uLL);
              uint64_t v35 = hdrpars_ParseAttributes((uint64_t)&__b, (uint64_t)&v55);
              if (v35) {
                goto LABEL_38;
              }
              int v42 = cstdlib_strncmp(__s1[0], "?>", 2uLL);
              uint64_t v36 = *((void *)&v55 + 1);
              if (!v42)
              {
                if (*((void *)&v55 + 1)) {
                  break;
                }
              }
              uint64_t v11 = 2183159812;
LABEL_40:
              uint64_t v23 = v34;
              uint64_t v24 = v33;
              size_t v7 = v47;
              if (v36) {
                ssftmap_ObjClose(v36);
              }
              if ((v11 & 0x80000000) != 0) {
                goto LABEL_53;
              }
LABEL_45:
              LODWORD(__s1[1]) = 0;
              uint64_t v11 = hdrpars_ParseElement((uint64_t)&__b, (uint64_t)&v48);
              if (!v11)
              {
                uint64_t v11 = 2183159812;
                if (v50)
                {
                  if (ssftmap_GetSize(v50) && !v49 && !v48)
                  {
                    for (uint64_t j = __s1[0]; ; __s1[0] = j)
                    {
                      unsigned int v38 = *j++;
                      BOOL v26 = v38 > 0x20;
                      uint64_t v39 = (1 << v38) & 0x100002600;
                      if (v26 || v39 == 0) {
                        break;
                      }
                    }
                    uint64_t v11 = 0;
                  }
                }
              }
              if (v49)
              {
                ssftmap_ObjClose(v49);
                uint64_t v49 = 0;
              }
              if (a3 && !v11)
              {
                if (!*a3) {
                  goto LABEL_57;
                }
                long long v55 = 0uLL;
                uint64_t v56 = 0;
                cstdlib_memset(&v55, 0, 0x18uLL);
                *(void *)&long long v55 = a3;
                uint64_t v11 = ssftmap_Insert(v50, (uint64_t)"HDRFILE", (uint64_t)&v55);
              }
              if (v11)
              {
LABEL_53:
                if (v50)
                {
                  ssftmap_ObjClose(v50);
                  uint64_t v50 = 0;
                }
                if ((v11 & 0x80000000) != 0) {
                  goto LABEL_93;
                }
              }
              else
              {
LABEL_57:
                if (v22 == 1)
                {
                  unsigned int v41 = *(void **)(v53 + 8);
                  long long v55 = *(_OWORD *)"\b";
                  uint64_t v56 = 0;
                  uint64_t v11 = 2183159818;
                  if (!vector_ObjOpen(v41, &v55, 8, a6) || !vector_Add(*a6, v7)) {
                    goto LABEL_53;
                  }
                  void *v7 = 0;
                }
                else if (!v22)
                {
                  void *v7 = v50;
                  goto LABEL_74;
                }
                if (!vector_Add(*a6, v23))
                {
                  uint64_t v11 = 2183159818;
                  goto LABEL_53;
                }
LABEL_74:
                uint64_t v11 = 0;
                ++v22;
              }
            }
            uint64_t v11 = 2183159812;
            if ((ssftmap_Find(*((uint64_t *)&v55 + 1), (uint64_t)"version", &v54) & 0x80000000) == 0
              && !cstdlib_strcmp(v54, "1.0"))
            {
LABEL_38:
              __s1[0] += 2;
              uint64_t v11 = v35;
            }
            uint64_t v36 = *((void *)&v55 + 1);
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v10 = 2183159818;
        }
      }
      filespi_fclose(v55);
      if (*((void *)&__b + 1))
      {
        heap_Free(*(void **)(v13 + 8), *((uint64_t *)&__b + 1));
        *((void *)&__b + 1) = 0;
        __s1[0] = 0;
      }
    }
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v19 = v53;
    *(void *)&long long __b = *(void *)(v53 + 8);
    int v20 = cstdlib_strlen(a4);
    if (v20)
    {
      __int16 v21 = (char *)heap_Alloc(*(void *)(v19 + 8), (v20 + 1));
      *((void *)&__b + 1) = v21;
      if (v21)
      {
        cstdlib_strcpy(v21, a4);
        uint64_t v11 = 0;
        goto LABEL_21;
      }
      uint64_t v11 = 2183159818;
    }
    else
    {
      if (*((void *)&__b + 1))
      {
        heap_Free(*(void **)(v19 + 8), *((uint64_t *)&__b + 1));
        *((void *)&__b + 1) = 0;
        __s1[0] = 0;
      }
      uint64_t v11 = 2183159812;
    }
  }
LABEL_93:
  if (*((void *)&__b + 1))
  {
    heap_Free(*(void **)(v53 + 8), *((uint64_t *)&__b + 1));
    *((void *)&__b + 1) = 0;
    __s1[0] = 0;
  }
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v43 = *a6;
    if (*a6)
    {
      *(void *)&long long v55 = 0;
      if (vector_GetElemAt(v43, 0, &v55))
      {
        unsigned int v44 = 1;
        do
          ssftmap_ObjClose(*(void *)v55);
        while (vector_GetElemAt(*a6, v44++, &v55));
      }
      vector_ObjClose(*a6);
      *a6 = 0;
    }
    if (*v7)
    {
      ssftmap_ObjClose(*v7);
      void *v7 = 0;
    }
  }
  return v11;
}

uint64_t hdrpars_ParseElement(uint64_t a1, uint64_t a2)
{
  long long __b = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v4 = *(_DWORD *)(a1 + 24);
  cstdlib_memset(&__b, 0, 0x18uLL);
  for (uint64_t i = (unsigned __int8 *)(*(void *)(a1 + 16) + 1); ; ++i)
  {
    unsigned int v6 = *(i - 1);
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0) {
      break;
    }
    *(void *)(a1 + 16) = i;
  }
  int v9 = *i;
  unsigned __int16 v8 = i - 1;
  if (v9 == 33)
  {
    hdrpars_SkipComments(a1);
    unsigned __int16 v8 = *(unsigned __int8 **)(a1 + 16);
    unsigned int v6 = *v8;
  }
  if (v6 != 60) {
    goto LABEL_44;
  }
  uint64_t v10 = (const char *)(v8 + 1);
  for (uint64_t j = v8 + 1; ; ++j)
  {
    *(void *)(a1 + 16) = j;
    int v12 = *j;
    if ((v12 - 48) < 0xA || (v12 & 0xFFFFFFDF) - 65 < 0x1A) {
      continue;
    }
    if (*j <= 0x2Cu)
    {
      BOOL v15 = (v12 - 9) < 2 || v12 == 13;
      if (!v15 && v12 != 32) {
        goto LABEL_44;
      }
      *uint64_t j = 0;
      ++*(void *)(a1 + 16);
      uint64_t v16 = hdrpars_ParseAttributes(a1, (uint64_t)&__b);
      if (v16) {
        goto LABEL_45;
      }
      uint64_t v17 = *(unsigned __int8 **)(a1 + 16);
      int v18 = *v17;
      if (v18 != 47)
      {
        if (v18 == 62)
        {
          char v19 = 0;
          goto LABEL_32;
        }
        goto LABEL_44;
      }
      if (v17[1] != 62) {
        goto LABEL_44;
      }
LABEL_36:
      int v20 = v17 + 2;
      char v19 = 1;
      goto LABEL_37;
    }
    uint64_t v14 = (v12 - 45);
    if (v14 > 0x32) {
      goto LABEL_44;
    }
    if (((1 << v14) & 0x4000000002003) == 0) {
      break;
    }
  }
  if (v14 == 2)
  {
    if (j[1] != 62) {
      goto LABEL_44;
    }
    *uint64_t j = 0;
    uint64_t v17 = *(unsigned __int8 **)(a1 + 16);
    goto LABEL_36;
  }
  if (v14 != 17) {
    goto LABEL_44;
  }
  char v19 = 0;
  *uint64_t j = 0;
  uint64_t v17 = *(unsigned __int8 **)(a1 + 16);
LABEL_32:
  int v20 = v17 + 1;
LABEL_37:
  *(void *)(a1 + 16) = v20;
  int v21 = *(_DWORD *)(a1 + 24);
  switch(v21)
  {
    case 2:
      if (cstdlib_strcmp(v10, "HEADER")) {
        goto LABEL_44;
      }
      uint64_t v16 = 0;
      int v22 = 3;
LABEL_56:
      *(_DWORD *)(a1 + 24) = v22;
      break;
    case 1:
      if (cstdlib_strcmp(v10, "VERSION")) {
        uint64_t v16 = 2183159812;
      }
      else {
        uint64_t v16 = 0;
      }
      break;
    case 0:
      if (!cstdlib_strcmp(v10, "SCANSOFT") || !cstdlib_strcmp(v10, "NUANCE"))
      {
        uint64_t v16 = 0;
        int v22 = 1;
        goto LABEL_56;
      }
LABEL_44:
      uint64_t v16 = 2183159812;
LABEL_45:
      *(_DWORD *)(a1 + 24) = v4;
      goto LABEL_46;
    default:
      uint64_t v16 = 0;
      break;
  }
  if (v16) {
    char v24 = 1;
  }
  else {
    char v24 = v19;
  }
  if ((v24 & 1) == 0)
  {
    for (uint64_t k = (unsigned __int8 *)(*(void *)(a1 + 16) + 1); ; ++k)
    {
      unsigned int v26 = *(k - 1);
      BOOL v27 = v26 > 0x20;
      uint64_t v28 = (1 << v26) & 0x100002600;
      if (v27 || v28 == 0) {
        break;
      }
      *(void *)(a1 + 16) = k;
    }
    int v31 = *k;
    unsigned int v30 = (char *)(k - 1);
    if (v31 == 33)
    {
      hdrpars_SkipComments(a1);
      unsigned int v30 = *(char **)(a1 + 16);
    }
    uint64_t v16 = 0;
    char v19 = 0;
    long long __b = v30;
  }
  if ((v19 & 1) == 0 && !v16)
  {
    uint64_t v32 = 0;
    while (1)
    {
      int v33 = *(char **)(a1 + 16);
      if (!*v33) {
        goto LABEL_80;
      }
      if (*v33 == 60) {
        break;
      }
      if (v52) {
        goto LABEL_80;
      }
      uint64_t v16 = 0;
      uint64_t v34 = v33 + 1;
      *(void *)(a1 + 16) = v33 + 1;
      uint64_t v32 = v33;
LABEL_81:
      for (m = v34 + 1; ; ++m)
      {
        unsigned int v36 = *(m - 1);
        BOOL v27 = v36 > 0x20;
        uint64_t v37 = (1 << v36) & 0x100002600;
        if (v27 || v37 == 0) {
          break;
        }
        *(void *)(a1 + 16) = m;
      }
      if (*m == 33) {
        hdrpars_SkipComments(a1);
      }
      if (v16) {
        goto LABEL_45;
      }
    }
    if (v33[1] == 47)
    {
      if (__b)
      {
        if (v32) {
          int v33 = v32 + 1;
        }
        char *v33 = 0;
      }
      unsigned int v39 = cstdlib_strlen(v10);
      int v40 = (const char *)(*(void *)(a1 + 16) + 2);
      *(void *)(a1 + 16) = v40;
      uint64_t v41 = v39;
      if (!cstdlib_strncmp(v40, v10, v39))
      {
        for (n = (unsigned __int8 *)(*(void *)(a1 + 16) + v41); ; ++n)
        {
          *(void *)(a1 + 16) = n;
          uint64_t v43 = *n;
          if (v43 > 0x3E) {
            break;
          }
          if (((1 << v43) & 0x100002600) == 0)
          {
            if (v43 != 62) {
              break;
            }
            *(void *)(a1 + 16) = n + 1;
            if (__b)
            {
              uint64_t v16 = (uint64_t)hdrpars_Unescape(__b);
              goto LABEL_109;
            }
            goto LABEL_95;
          }
        }
      }
      *(_DWORD *)(a1 + 24) = v4;
LABEL_122:
      uint64_t v16 = 2183159812;
      goto LABEL_46;
    }
    if (!__b || v33 == __b)
    {
      long long __b = 0;
      uint64_t v16 = hdrpars_ParseElement(a1, &__b);
      uint64_t v34 = *(char **)(a1 + 16);
      goto LABEL_81;
    }
LABEL_80:
    uint64_t v34 = *(char **)(a1 + 16);
    uint64_t v16 = 2183159812;
    goto LABEL_81;
  }
  if (v16 || !__b)
  {
LABEL_109:
    *(_DWORD *)(a1 + 24) = v4;
    if (v16) {
      goto LABEL_46;
    }
  }
  else
  {
    **(unsigned char **)(a1 + 16) = 0;
LABEL_95:
    *(_DWORD *)(a1 + 24) = v4;
  }
  if (v4 == 2)
  {
LABEL_113:
    if (v51) {
      goto LABEL_122;
    }
    uint64_t v16 = 2183159812;
    if (!v52) {
      goto LABEL_46;
    }
    uint64_t v16 = 0;
    *(void *)(a2 + 16) = v52;
    goto LABEL_126;
  }
  if (v4 != 1)
  {
    if (!v4) {
      goto LABEL_113;
    }
    uint64_t v46 = *(void *)(a2 + 16);
    uint64_t v45 = (uint64_t *)(a2 + 16);
    uint64_t v44 = v46;
    if (!v46)
    {
      uint64_t v47 = *(void **)a1;
      v48[0] = HDRPARS_TAG_MAP_IELEM;
      v48[1] = *(_OWORD *)&off_26D20DB38;
      uint64_t v49 = off_26D20DB48;
      uint64_t v16 = ssftmap_ObjOpen(v47, 1, v48, v45);
      if (v16) {
        goto LABEL_46;
      }
      uint64_t v44 = *v45;
    }
    uint64_t v16 = ssftmap_Insert(v44, (uint64_t)v10, (uint64_t)&__b);
    if (v16) {
      goto LABEL_46;
    }
    long long __b = 0;
    uint64_t v51 = 0;
LABEL_126:
    uint64_t v52 = 0;
    goto LABEL_46;
  }
  if (v51 || v52 || !__b) {
    goto LABEL_122;
  }
  if (!cstdlib_strcmp(__b, "SSFT_1.0") || (uint64_t v16 = 2183159812, !cstdlib_strcmp(__b, "NUAN_1.0")))
  {
    uint64_t v16 = 0;
    *(_DWORD *)(a1 + 24) = 2;
  }
LABEL_46:
  if (v51)
  {
    ssftmap_ObjClose(v51);
    uint64_t v51 = 0;
  }
  if (v52) {
    ssftmap_ObjClose(v52);
  }
  return v16;
}

uint64_t hdrpars_FreeHeader(uint64_t a1)
{
  if (a1) {
    ssftmap_ObjClose(a1);
  }
  return 0;
}

uint64_t hdrpars_CreateSurrogateTagMap(void *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v11 = HDRPARS_TAG_MAP_IELEM;
  long long v12 = *(_OWORD *)&off_26D20DB38;
  uint64_t v13 = off_26D20DB48;
  uint64_t v7 = ssftmap_ObjOpen(a1, 1, &v11, a4);
  *(void *)&long long v12 = 0;
  long long v11 = a2;
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v9 = v7;
    *(void *)&long long v11 = a3;
LABEL_7:
    ssftmap_ObjClose(*a4);
    return v9;
  }
  uint64_t v8 = ssftmap_Insert(*a4, (uint64_t)"BROKERSTRING", (uint64_t)&v11);
  *(void *)&long long v11 = a3;
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v9 = v8;
    goto LABEL_7;
  }
  uint64_t v9 = ssftmap_Insert(*a4, (uint64_t)"FULLPATHCOMPONENT", (uint64_t)&v11);
  if ((v9 & 0x80000000) != 0) {
    goto LABEL_7;
  }
  return v9;
}

uint64_t hdrpars_ParseAttributes(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16) + 1; ; ++i)
  {
    unsigned int v5 = *(unsigned __int8 *)(i - 1);
    BOOL v6 = v5 > 0x20;
    uint64_t v7 = (1 << v5) & 0x100002600;
    if (v6 || v7 == 0) {
      break;
    }
    *(void *)(a1 + 16) = i;
  }
  uint64_t v9 = (uint64_t *)(a2 + 8);
LABEL_8:
  uint64_t v10 = *(unsigned __int8 **)(a1 + 16);
  unsigned int v11 = *v10;
  if (v11 <= 0x3F && ((1 << v11) & 0xC000800000000000) != 0) {
    return 0;
  }
  if ((v11 & 0xFFFFFFDF) - 65 >= 0x1A && v11 != 95 && v11 != 58) {
    return 2183159812;
  }
  for (uint64_t j = v10 + 1; ; ++j)
  {
    *(void *)(a1 + 16) = j;
    unsigned int v14 = *j;
    if (v14 - 48 < 0xA || (v14 & 0xFFFFFFDF) - 65 < 0x1A) {
      continue;
    }
    if (v14 <= 0x3A)
    {
      if (((1 << v14) & 0x400600000000000) != 0) {
        continue;
      }
      if (((1 << v14) & 0x100002600) != 0) {
        break;
      }
    }
    if (v14 != 95) {
      goto LABEL_33;
    }
  }
  *uint64_t j = 0;
  uint64_t j = *(unsigned char **)(a1 + 16);
  do
  {
    *(void *)(a1 + 16) = ++j;
    unsigned int v14 = *j;
  }
  while (v14 <= 0x20 && ((1 << v14) & 0x100002600) != 0);
LABEL_33:
  if (v14 == 61)
  {
    *uint64_t j = 0;
    for (uint64_t k = (unsigned __int8 *)(*(void *)(a1 + 16) + 1); ; ++k)
    {
      *(void *)(a1 + 16) = k;
      unsigned int v18 = *k;
      if (v18 > 0x27) {
        break;
      }
      if (((1 << v18) & 0x100002600) == 0)
      {
        if (((1 << v18) & 0x8400000000) == 0) {
          return 2183159812;
        }
        char v19 = (char *)(k + 1);
        int v20 = k + 1;
        do
        {
          *(void *)(a1 + 16) = v20;
          int v22 = *v20++;
          int v21 = v22;
        }
        while (v22 != 60 && v21 != v18);
        if (v21 != v18) {
          return 2183159812;
        }
        *(v20 - 1) = 0;
        ++*(void *)(a1 + 16);
        uint64_t result = (uint64_t)hdrpars_Unescape(v19);
        if (a2 && !result)
        {
          uint64_t v24 = *v9;
          if (!*v9)
          {
            unsigned int v25 = *(void **)a1;
            v31[0] = HDRPARS_ATTR_MAP_IELEM;
            v31[1] = *(_OWORD *)&off_26D20DB10;
            uint64_t v32 = off_26D20DB20;
            uint64_t result = ssftmap_ObjOpen(v25, 0, v31, (uint64_t *)(a2 + 8));
            if (result) {
              return result;
            }
            uint64_t v24 = *v9;
          }
          uint64_t result = ssftmap_Insert(v24, (uint64_t)v10, (uint64_t)v19);
        }
        if (!result)
        {
          for (m = *(unsigned __int8 **)(a1 + 16); ; *(void *)(a1 + 16) = m)
          {
            unsigned int v27 = *m++;
            BOOL v6 = v27 > 0x20;
            uint64_t v28 = (1 << v27) & 0x100002600;
            if (v6 || v28 == 0) {
              break;
            }
          }
          goto LABEL_8;
        }
        return result;
      }
    }
  }
  return 2183159812;
}

char *hdrpars_Unescape(char *a1)
{
  uint64_t result = cstdlib_strchr(a1, 38);
  if (result)
  {
    unsigned int v2 = result;
    for (uint64_t i = result; ; ++i)
    {
      int v4 = *(unsigned __int8 *)v2;
      if (v4 == 38)
      {
        if (!cstdlib_strncmp(v2, "&amp;", 5uLL))
        {
          LOBYTE(v4) = 38;
          uint64_t v5 = 5;
          goto LABEL_18;
        }
        if (!cstdlib_strncmp(v2, "&lt;", 4uLL))
        {
          LOBYTE(v4) = 60;
LABEL_15:
          uint64_t v5 = 4;
          goto LABEL_18;
        }
        if (!cstdlib_strncmp(v2, "&gt;", 4uLL))
        {
          LOBYTE(v4) = 62;
          goto LABEL_15;
        }
        if (cstdlib_strncmp(v2, "&apos;", 6uLL))
        {
          if (cstdlib_strncmp(v2, "&quot;", 6uLL)) {
            return (char *)2183159812;
          }
          LOBYTE(v4) = 34;
        }
        else
        {
          LOBYTE(v4) = 39;
        }
        uint64_t v5 = 6;
      }
      else
      {
        if (!*v2)
        {
          uint64_t result = 0;
          *uint64_t i = 0;
          return result;
        }
        uint64_t v5 = 1;
      }
LABEL_18:
      *uint64_t i = v4;
      v2 += v5;
    }
  }
  return result;
}

char *hdrpars_SkipComments(uint64_t a1)
{
  for (uint64_t i = *(const char **)(a1 + 16); ; *(void *)(a1 + 16) = i)
  {
    unsigned int v3 = *(unsigned __int8 *)i;
    BOOL v4 = v3 > 0x20;
    uint64_t v5 = (1 << v3) & 0x100002600;
    BOOL v6 = v4 || v5 == 0;
    if (v6) {
      break;
    }
    ++i;
  }
  while (1)
  {
    int v7 = cstdlib_strncmp(i, "<!--", 4uLL);
    uint64_t result = *(char **)(a1 + 16);
    if (!v7) {
      break;
    }
LABEL_8:
    BOOL v6 = result == i;
    uint64_t i = result;
    if (v6) {
      return result;
    }
  }
  uint64_t result = cstdlib_strstr(result, "-->");
  if (result && *(result - 1) != 45)
  {
    for (result += 3; ; ++result)
    {
      *(void *)(a1 + 16) = result;
      unsigned int v9 = *result;
      BOOL v4 = v9 > 0x20;
      uint64_t v10 = (1 << v9) & 0x100002600;
      if (v4 || v10 == 0) {
        break;
      }
    }
    goto LABEL_8;
  }
  return result;
}

uint64_t hdrpars_ElemCopyTag(const char **a1, uint64_t a2, void *a3)
{
  BOOL v6 = *a1;
  if (v6) {
    unsigned int v7 = cstdlib_strlen(v6);
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v8 = (void *)heap_Alloc(a2, v7 + 25);
  if (!v8) {
    return 2183159818;
  }
  unsigned int v9 = v8;
  cstdlib_memcpy(v8, a1, 0x18uLL);
  uint64_t v10 = (char *)(v9 + 3);
  *unsigned int v9 = v9 + 3;
  if (v7) {
    cstdlib_strcpy(v10, *a1);
  }
  else {
    char *v10 = 0;
  }
  uint64_t result = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a3 = v9;
  return result;
}

void *hdrpars_ElemFreeTag(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = result[1];
    if (v4) {
      ssftmap_ObjClose(v4);
    }
    uint64_t v5 = *(void *)(v3 + 16);
    if (v5) {
      ssftmap_ObjClose(v5);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

void *dict_free_nodes(void **a1)
{
  uint64_t result = free_nodes(a1, *a1, a1);
  *((_DWORD *)a1 + 12) = 0;
  *a1 = a1;
  a1[1] = a1;
  return result;
}

void *free_nodes(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = result;
    free_nodes(result, *a2);
    free_nodes(v5, a2[1]);
    uint64_t v6 = a2[4];
    if (v6) {
      (*(void (**)(uint64_t, void))(v5[8] + 8))(v6, v5[7]);
    }
    uint64_t v7 = a2[5];
    if (v7) {
      (*(void (**)(uint64_t, void))(v5[8] + 32))(v7, v5[7]);
    }
    uint64_t v8 = (void *)v5[7];
    return heap_Free(v8, (uint64_t)a2);
  }
  return result;
}

uint64_t dict_init(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)(result + 56) = a4;
  *(void *)(result + 64) = a3;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = a2;
  *(void *)uint64_t result = result;
  *(void *)(result + 8) = result;
  *(void *)(result + 16) = result;
  *(_DWORD *)(result + 24) = 1;
  *(unsigned char *)(result + 72) = 0;
  return result;
}

void *dict_lookup(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  if (*(void *)a1 == a1) {
    return 0;
  }
  while (1)
  {
    int v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 64) + 16))(a2, v2[4]);
    if ((v5 & 0x80000000) == 0) {
      break;
    }
LABEL_5:
    unsigned int v2 = (void *)*v2;
    if (v2 == (void *)a1) {
      return 0;
    }
  }
  if (v5)
  {
    ++v2;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    while (*v2 != a1)
    {
      uint64_t v7 = v2;
      unsigned int v2 = (void *)*v2;
      while ((*(unsigned int (**)(uint64_t, void))(*(void *)(a1 + 64) + 16))(a2, v2[4]))
      {
        unsigned int v2 = (void *)v2[1];
        if (v2 == (void *)a1) {
          return v7;
        }
      }
    }
  }
  return v2;
}

void *dict_lower_bound(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  if (*(void *)a1 == a1) {
    return 0;
  }
  int v5 = 0;
  do
  {
    int v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 64) + 16))(a2, v2[4]);
    if (v6 < 1)
    {
      if (v6 < 0)
      {
        int v5 = v2;
      }
      else
      {
        int v5 = v2;
        if (!*(unsigned char *)(a1 + 72)) {
          return v5;
        }
      }
    }
    else
    {
      ++v2;
    }
    unsigned int v2 = (void *)*v2;
  }
  while (v2 != (void *)a1);
  return v5;
}

uint64_t dict_insert(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (uint64_t *)*a1;
  if ((uint64_t *)*a1 == a1)
  {
    int v10 = -1;
    uint64_t v7 = a1;
LABEL_11:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))a1[8])(a3, a1[7], a2 + 4);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v13 = (uint64_t **)(v7 + 1);
      if (v10 < 0) {
        uint64_t v13 = (uint64_t **)v7;
      }
      *uint64_t v13 = a2;
      a2[1] = (uint64_t)a1;
      a2[2] = (uint64_t)v7;
      *a2 = (uint64_t)a1;
      ++*((_DWORD *)a1 + 12);
      *((_DWORD *)a2 + 6) = 0;
      for (uint64_t i = v7 + 3; !*((_DWORD *)v7 + 6); a2 = v15)
      {
        BOOL v15 = (uint64_t *)v7[2];
        uint64_t v16 = (uint64_t *)*v15;
        if (v7 == (uint64_t *)*v15)
        {
          uint64_t v19 = v15[1];
          int v20 = *(_DWORD *)(v19 + 24);
          uint64_t v17 = (_DWORD *)(v19 + 24);
          if (v20)
          {
            int v21 = (uint64_t *)v7[1];
            if (a2 == v21)
            {
              uint64_t v27 = *a2;
              v7[1] = *a2;
              *(void *)(v27 + 16) = v7;
              uint64_t v28 = (uint64_t **)v7[2];
              a2[2] = (uint64_t)v28;
              v28[*v28 != v7] = a2;
              *a2 = (uint64_t)v7;
              v7[2] = (uint64_t)a2;
              uint64_t v7 = (uint64_t *)*v15;
              int v21 = *(uint64_t **)(*v15 + 8);
            }
            else
            {
              a2 = v7;
            }
            *((_DWORD *)a2 + 6) = 1;
            *((_DWORD *)v15 + 6) = 0;
            uint64_t *v15 = (uint64_t)v21;
            v21[2] = (uint64_t)v15;
            uint64_t v29 = v15[2];
            v7[2] = v29;
            *(void *)(v29 + 8 * (*(void *)(v29 + 8) == (void)v15)) = v7;
            v7[1] = (uint64_t)v15;
            int v15[2] = (uint64_t)v7;
            break;
          }
        }
        else
        {
          int v18 = *((_DWORD *)v16 + 6);
          uint64_t v17 = v16 + 3;
          if (v18)
          {
            if (a2 == (uint64_t *)*v7)
            {
              uint64_t v22 = a2[1];
              uint64_t *v7 = v22;
              *(void *)(v22 + 16) = v7;
              uint64_t v23 = v7[2];
              a2[2] = v23;
              *(void *)(v23 + 8 * (*(void *)(v23 + 8) == (void)v7)) = a2;
              a2[1] = (uint64_t)v7;
              v7[2] = (uint64_t)a2;
            }
            else
            {
              a2 = v7;
            }
            *((_DWORD *)a2 + 6) = 1;
            *((_DWORD *)v15 + 6) = 0;
            uint64_t v24 = (uint64_t *)v15[1];
            uint64_t v25 = *v24;
            v15[1] = *v24;
            *(void *)(v25 + 16) = v15;
            unsigned int v26 = (void *)v15[2];
            v24[2] = (uint64_t)v26;
            v26[*v26 != (void)v15] = v24;
            *uint64_t v24 = (uint64_t)v15;
            int v15[2] = (uint64_t)v24;
            break;
          }
        }
        *uint64_t i = 1;
        *uint64_t v17 = 1;
        *((_DWORD *)v15 + 6) = 0;
        uint64_t v7 = (uint64_t *)v15[2];
        uint64_t i = v7 + 3;
      }
      *(_DWORD *)(*a1 + 24) = 1;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v7 = v6;
      int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[8] + 16))(a3, v6[4]);
      if (!*((unsigned char *)a1 + 72) && v8 == 0) {
        return 2298486786;
      }
      int v10 = v8;
      unsigned int v11 = (uint64_t **)(v7 + 1);
      if (v8 < 0) {
        unsigned int v11 = (uint64_t **)v7;
      }
      int v6 = *v11;
      if (v6 == a1) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t dict_delete(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  unsigned int v2 = *(uint64_t ***)(a2 + 16);
  uint64_t v4 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 == a1)
  {
    int v8 = *(uint64_t **)(a2 + 8);
    goto LABEL_9;
  }
  if ((uint64_t *)v3 == a1)
  {
    int v8 = *(uint64_t **)a2;
LABEL_9:
    v8[2] = (uint64_t)v2;
    if (*v2 == (uint64_t *)a2) {
      *unsigned int v2 = v8;
    }
    else {
      v2[1] = v8;
    }
    goto LABEL_16;
  }
  int v5 = *(uint64_t **)(a2 + 8);
  do
  {
    int v6 = v5;
    int v5 = (uint64_t *)*v5;
  }
  while (v5 != a1);
  int v7 = *((_DWORD *)v6 + 6);
  int v8 = (uint64_t *)v6[1];
  unsigned int v9 = (uint64_t **)v6[2];
  v8[2] = (uint64_t)v9;
  if (*v9 == v6)
  {
    *unsigned int v9 = v8;
    uint64_t v4 = *(uint64_t **)a2;
  }
  else
  {
    v9[1] = v8;
    uint64_t v3 = *(void *)(a2 + 8);
  }
  v6[1] = v3;
  uint64_t v6[2] = (uint64_t)v2;
  *int v6 = (uint64_t)v4;
  _OWORD v4[2] = (uint64_t)v6;
  *(void *)(v3 + 16) = v6;
  *((_DWORD *)v6 + 6) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v7;
  if (*v2 == (uint64_t *)a2) {
    *unsigned int v2 = v6;
  }
  else {
    v2[1] = v6;
  }
LABEL_16:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  --*((_DWORD *)a1 + 12);
  if (*(_DWORD *)(a2 + 24) != 1) {
    return a2;
  }
  *(_DWORD *)(*a1 + 24) = 0;
  if (*((_DWORD *)v8 + 6) != 1)
  {
    int v10 = (uint64_t **)v8;
LABEL_31:
    uint64_t v22 = v10 + 3;
    goto LABEL_39;
  }
  while (1)
  {
    int v10 = (uint64_t **)v8[2];
    unsigned int v11 = *v10;
    if (v8 != *v10)
    {
      if (!*((_DWORD *)v11 + 6))
      {
        *((_DWORD *)v11 + 6) = 1;
        *((_DWORD *)v10 + 6) = 0;
        long long v12 = (uint64_t *)v11[1];
        char *v10 = v12;
        void v12[2] = (uint64_t)v10;
        uint64_t v13 = v10[2];
        v11[2] = (uint64_t)v13;
        v13[v13[1] == (void)v10] = (uint64_t)v11;
        v11[1] = (uint64_t)v10;
        void v10[2] = v11;
        unsigned int v11 = *v10;
      }
      uint64_t v15 = *v11;
      unsigned int v14 = (uint64_t **)v11[1];
      int v16 = *(_DWORD *)(*v11 + 24);
      if (*((_DWORD *)v14 + 6) != 1)
      {
        if (v16 == 1)
        {
          *((_DWORD *)v14 + 6) = 1;
          uint64_t v23 = *v14;
          v11[1] = (uint64_t)*v14;
          v23[2] = (uint64_t)v11;
          uint64_t v24 = (uint64_t **)v11[2];
          _OWORD v14[2] = (uint64_t *)v24;
          v24[*v24 != v11] = (uint64_t *)v14;
          *((_DWORD *)v11 + 6) = 0;
          char *v14 = v11;
          v11[2] = (uint64_t)v14;
          unsigned int v11 = *v10;
          uint64_t v15 = **v10;
          unsigned int v14 = (uint64_t **)(*v10)[1];
        }
LABEL_34:
        uint64_t v22 = v8 + 3;
        *((_DWORD *)v11 + 6) = *((_DWORD *)v10 + 6);
        *(_DWORD *)(v15 + 24) = 1;
        *((_DWORD *)v10 + 6) = 1;
        char *v10 = (uint64_t *)v14;
        _OWORD v14[2] = (uint64_t *)v10;
        uint64_t v25 = v10[2];
        v11[2] = (uint64_t)v25;
        v25[v25[1] == (void)v10] = (uint64_t)v11;
        v11[1] = (uint64_t)v10;
        goto LABEL_38;
      }
      if (v16 != 1) {
        goto LABEL_34;
      }
      goto LABEL_28;
    }
    unsigned int v11 = v10[1];
    if (!*((_DWORD *)v11 + 6))
    {
      *((_DWORD *)v11 + 6) = 1;
      *((_DWORD *)v10 + 6) = 0;
      uint64_t v17 = *v11;
      v10[1] = (uint64_t *)*v11;
      *(void *)(v17 + 16) = v10;
      int v18 = v10[2];
      v11[2] = (uint64_t)v18;
      v18[*v18 != (void)v10] = (uint64_t)v11;
      uint64_t *v11 = (uint64_t)v10;
      void v10[2] = v11;
      unsigned int v11 = v10[1];
    }
    uint64_t v19 = *v11;
    uint64_t v20 = v11[1];
    int v21 = *(_DWORD *)(v20 + 24);
    if (*(_DWORD *)(*v11 + 24) != 1) {
      break;
    }
    if (v21 != 1) {
      goto LABEL_37;
    }
LABEL_28:
    *((_DWORD *)v11 + 6) = 0;
    int v8 = (uint64_t *)v10;
    if (*((_DWORD *)v10 + 6) != 1) {
      goto LABEL_31;
    }
  }
  if (v21 == 1)
  {
    *(_DWORD *)(v19 + 24) = 1;
    uint64_t v26 = *(void *)(v19 + 8);
    uint64_t *v11 = v26;
    *(void *)(v26 + 16) = v11;
    uint64_t v27 = v11[2];
    *(void *)(v19 + 16) = v27;
    *(void *)(v27 + 8 * (*(void *)(v27 + 8) == (void)v11)) = v19;
    *((_DWORD *)v11 + 6) = 0;
    *(void *)(v19 + 8) = v11;
    v11[2] = v19;
    unsigned int v11 = v10[1];
    uint64_t v19 = *v11;
    uint64_t v20 = v11[1];
  }
LABEL_37:
  uint64_t v22 = v8 + 3;
  *((_DWORD *)v11 + 6) = *((_DWORD *)v10 + 6);
  *(_DWORD *)(v20 + 24) = 1;
  *((_DWORD *)v10 + 6) = 1;
  v10[1] = (uint64_t *)v19;
  *(void *)(v19 + 16) = v10;
  uint64_t v28 = v10[2];
  v11[2] = (uint64_t)v28;
  v28[*v28 != (void)v10] = (uint64_t)v11;
  uint64_t *v11 = (uint64_t)v10;
LABEL_38:
  void v10[2] = v11;
LABEL_39:
  _DWORD *v22 = 1;
  *(_DWORD *)(*a1 + 24) = 1;
  return a2;
}

void *dict_next(void *a1, uint64_t a2)
{
  unsigned int v2 = *(void **)(a2 + 8);
  if (v2 == a1)
  {
    while (1)
    {
      uint64_t v3 = *(void **)(a2 + 16);
      if (v3 == a1) {
        break;
      }
      BOOL v4 = a2 == v3[1];
      a2 = *(void *)(a2 + 16);
      if (!v4) {
        return v3;
      }
    }
    return 0;
  }
  else
  {
    do
    {
      uint64_t v3 = v2;
      unsigned int v2 = (void *)*v2;
    }
    while (v2 != a1);
  }
  return v3;
}

uint64_t dict_alloc_insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = heap_Alloc(a1[7], 48);
  uint64_t v13 = 0;
  if (!v6) {
    return 2298486794;
  }
  uint64_t v7 = v6;
  if (a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1[8] + 24))(a3, a1[7], &v13);
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v11 = v8;
      goto LABEL_13;
    }
    uint64_t v9 = v13;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = v9;
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *(_DWORD *)(v7 + 24) = 0;
  uint64_t v11 = dict_insert(a1, (uint64_t *)v7, a2);
  uint64_t result = 0;
  if ((v11 & 0x80000000) == 0) {
    return result;
  }
  uint64_t v12 = *(void *)(v7 + 32);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 8))(v12, a1[7]);
  }
  if (*(void *)(v7 + 40)) {
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 32))(v13, a1[7]);
  }
LABEL_13:
  heap_Free((void *)a1[7], v7);
  return v11;
}

uint64_t dnode_init(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a2;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *dict_delete_free(uint64_t *a1, uint64_t a2)
{
  dict_delete(a1, a2);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 8))(v4, a1[7]);
  }
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(a1[8] + 32))(v5, a1[7]);
  }
  uint64_t v6 = (void *)a1[7];

  return heap_Free(v6, a2);
}

void **dict_first(void **a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = a1;
  while (v1 != a1)
  {
    unsigned int v2 = (void **)v1;
    uint64_t v1 = (void *)*v1;
  }
  if (v2 == a1) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t dict_allow_dupes(uint64_t result)
{
  *(unsigned char *)(result + 72) = 1;
  return result;
}

uint64_t ssftmap_ObjOpen(void *a1, int a2, long long *a3, uint64_t *a4)
{
  uint64_t v4 = 2298486791;
  if (*(void *)a3 && *((void *)a3 + 1) && *((void *)a3 + 3) && *((void *)a3 + 4) && a4 && *((void *)a3 + 2))
  {
    uint64_t v9 = heap_Calloc(a1, 1, 128);
    *a4 = v9;
    if (v9)
    {
      long long v10 = *a3;
      long long v11 = a3[1];
      *(void *)(v9 + 32) = *((void *)a3 + 4);
      *(_OWORD *)uint64_t v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
      *(void *)(*a4 + 40) = a1;
      dict_init(*a4 + 48, -1, *a4, (uint64_t)a1);
      if (a2 == 1) {
        dict_allow_dupes(*a4 + 48);
      }
      return 0;
    }
    else
    {
      return 2298486794;
    }
  }
  return v4;
}

uint64_t ssftmap_ObjClone(long long *a1, uint64_t *a2)
{
  uint64_t v2 = 2298486791;
  if (a1 && a2)
  {
    uint64_t v5 = heap_Calloc(*((void **)a1 + 5), 1, 128);
    *a2 = v5;
    if (v5)
    {
      long long v6 = *a1;
      long long v7 = a1[1];
      *(void *)(v5 + 32) = *((void *)a1 + 4);
      *(_OWORD *)uint64_t v5 = v6;
      *(_OWORD *)(v5 + 16) = v7;
      *(void *)(*a2 + 40) = *((void *)a1 + 5);
      uint64_t v8 = a1 + 3;
      dict_init(*a2 + 48, -1, *a2, *(void *)(*a2 + 40));
      if (*((unsigned char *)a1 + 120)) {
        dict_allow_dupes(*a2 + 48);
      }
      uint64_t v9 = dict_first((void **)a1 + 6);
      if (v9)
      {
        uint64_t v10 = (uint64_t)v9;
        do
        {
          uint64_t v2 = dict_alloc_insert((uint64_t *)(*a2 + 48), *(void *)(v10 + 32), *(void *)(v10 + 40));
          long long v11 = dict_next(v8, v10);
          if ((v2 & 0x80000000) != 0) {
            break;
          }
          uint64_t v10 = (uint64_t)v11;
        }
        while (v11);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2298486794;
    }
  }
  return v2;
}

uint64_t ssftmap_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2298486791;
  }
  dict_free_nodes((void **)(a1 + 48));
  heap_Free(*(void **)(a1 + 40), a1);
  return 0;
}

uint64_t ssftmap_Insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3) {
    return dict_alloc_insert((uint64_t *)(a1 + 48), a2, a3);
  }
  else {
    return 2298486791;
  }
}

uint64_t ssftmap_FindReadOnly(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2298486791;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = dict_lookup(a1 + 48, a2);
    if (v5)
    {
      uint64_t v3 = 0;
      *a3 = v5[5];
    }
    else
    {
      return 2298486804;
    }
  }
  return v3;
}

uint64_t ssftmap_Find(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2298486791;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = dict_lookup(a1 + 48, a2);
    if (v5)
    {
      uint64_t v3 = 0;
      *a3 = v5[5];
    }
    else
    {
      return 2298486804;
    }
  }
  return v3;
}

uint64_t ssftmap_Remove(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2298486791;
  if (a1 && a2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 48);
    uint64_t v4 = dict_lookup(a1 + 48, a2);
    if (v4)
    {
      dict_delete_free(v3, (uint64_t)v4);
      return 0;
    }
    else
    {
      return 2298486804;
    }
  }
  return v2;
}

uint64_t ssftmap_GetSize(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 96);
  }
  return result;
}

uint64_t ssftmap_Clear(uint64_t a1)
{
  if (!a1) {
    return 2298486791;
  }
  dict_free_nodes((void **)(a1 + 48));
  return 0;
}

uint64_t ssftmap_IteratorOpen(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = 2298486791;
  if (a1 && a4)
  {
    long long v7 = (void **)(a1 + 48);
    if (a2)
    {
      if (a3) {
        uint64_t v8 = dict_lookup((uint64_t)v7, a2);
      }
      else {
        uint64_t v8 = dict_lower_bound((uint64_t)v7, a2);
      }
      uint64_t v9 = (void **)v8;
      if (!v8) {
        return 2298486804;
      }
    }
    else
    {
      uint64_t v9 = dict_first(v7);
    }
    uint64_t v10 = (void *)heap_Calloc(*(void **)(a1 + 40), 1, 24);
    *(void *)a4 = v10;
    if (v10)
    {
      uint64_t v4 = 0;
      void *v10 = a1;
      *(void *)(*(void *)a4 + 8) = 0;
      *(void *)(*(void *)a4 + 16) = v9;
    }
    else
    {
      return 2298486794;
    }
  }
  return v4;
}

uint64_t ssftmap_IteratorClose(uint64_t a1)
{
  if (!a1) {
    return 2298486791;
  }
  heap_Free(*(void **)(*(void *)a1 + 40), a1);
  return 0;
}

uint64_t ssftmap_IteratorNext(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = 2298486791;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = a1[2];
    if (v5)
    {
      a1[1] = v5;
      *a2 = *(void *)(v5 + 32);
      *a3 = *(void *)(a1[1] + 40);
      long long v6 = dict_next((void *)(*a1 + 48), a1[1]);
      uint64_t result = 0;
      a1[2] = (uint64_t)v6;
    }
    else
    {
      *a2 = 0;
      *a3 = 0;
      return 2298486807;
    }
  }
  return result;
}

uint64_t ssftmap_IteratorRemove(void *a1)
{
  uint64_t result = 2298486784;
  if (!a1) {
    return 2298486791;
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    dict_delete_free((uint64_t *)(*a1 + 48), v3);
    uint64_t result = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t ssftmap_ElemCopyString(const char *a1, uint64_t a2, char **a3)
{
  uint64_t v3 = 2298486791;
  if (a1 && a2 && a3)
  {
    int v7 = cstdlib_strlen(a1);
    uint64_t v8 = (char *)heap_Alloc(a2, (v7 + 1));
    if (v8)
    {
      uint64_t v9 = v8;
      cstdlib_strcpy(v8, a1);
      uint64_t v3 = 0;
      *a3 = v9;
    }
    else
    {
      return 2298486794;
    }
  }
  return v3;
}

void *ssftmap_ElemFreeString(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

uint64_t ssftmap_ElemCompareKeysString(const char *a1, const char *a2)
{
  if ((unint64_t)a1 | (unint64_t)a2) {
    LODWORD(v2) = -1;
  }
  else {
    LODWORD(v2) = 0;
  }
  if (a1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = v2;
  }
  if (a1 && a2) {
    return cstdlib_strcmp(a1, a2);
  }
  else {
    return v2;
  }
}

uint64_t ssftmap_ElemCopyWString(unsigned __int16 *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2298486791;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = LH_wcslen((uint64_t)a1);
    uint64_t v8 = (_WORD *)heap_Alloc(a2, (2 * v7 + 2) & 0x1FFFFFFFELL);
    if (v8)
    {
      uint64_t v9 = v8;
      LH_wcscpy(v8, a1);
      uint64_t v3 = 0;
      *a3 = v9;
    }
    else
    {
      return 2298486794;
    }
  }
  return v3;
}

void *ssftmap_ElemFreeWString(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

uint64_t ssftmap_ElemCompareKeysWString(unint64_t a1, unsigned __int16 *a2)
{
  if (a1 | (unint64_t)a2) {
    LODWORD(v2) = -1;
  }
  else {
    LODWORD(v2) = 0;
  }
  if (a1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = v2;
  }
  if (a1 && a2) {
    return LH_wcscmp((_WORD *)a1, a2);
  }
  else {
    return v2;
  }
}

uint64_t objc_ObjOpen(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v17 = 0;
  uint64_t result = InitRsrcFunction(a2, a3, &v17);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v8 = 2338332682;
    if (a4)
    {
      uint64_t v9 = (void *)heap_Calloc(*(void **)(v17 + 8), 1, 40);
      *a4 = (uint64_t)v9;
      if (v9)
      {
        *uint64_t v9 = a2;
        v9[1] = a3;
        uint64_t v10 = v17;
        *(void *)(*a4 + 16) = v17;
        uint64_t v11 = critsec_ObjOpen(*(void *)(v10 + 16), *(void **)(v10 + 8), (uint64_t *)(*a4 + 24));
        uint64_t v12 = *(void **)(v17 + 8);
        uint64_t v13 = *a4;
        if ((v11 & 0x80000000) != 0)
        {
          heap_Free(v12, v13);
          uint64_t v8 = v11;
        }
        else
        {
          v15[0] = xmmword_26D20DB50;
          v15[1] = *(_OWORD *)&off_26D20DB60;
          int v16 = off_26D20DB70;
          int v14 = ssftmap_ObjOpen(v12, 0, v15, (uint64_t *)(v13 + 32));
          uint64_t result = 0;
          if ((v14 & 0x80000000) == 0) {
            return result;
          }
          critsec_ObjClose(*(void *)(*a4 + 24));
          heap_Free(*(void **)(v17 + 8), *a4);
        }
        *a4 = 0;
        return v8;
      }
      else
      {
        return 2338332682;
      }
    }
    else
    {
      return 2338332679;
    }
  }
  return result;
}

uint64_t objc_CopyValue(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2338332679;
  if (a1 && a3)
  {
    *a3 = 0;
    long long v6 = (void *)heap_Alloc(a2, 64);
    if (v6)
    {
      uint64_t v7 = v6;
      cstdlib_memcpy(v6, a1, 0x40uLL);
      uint64_t v3 = 0;
      *a3 = v7;
    }
    else
    {
      return 2338332682;
    }
  }
  return v3;
}

void *objc_FreeValue(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

uint64_t objc_ObjClose(uint64_t a1)
{
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v1 = 2338332679;
  uint64_t v12 = 0;
  if (a1)
  {
    uint64_t v3 = critsec_Enter(*(void **)(a1 + 24));
    unsigned int v4 = v3;
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        if ((ssftmap_IteratorOpen(v5, 0, 1, (uint64_t)&v14) & 0x80000000) == 0)
        {
          while (!ssftmap_IteratorNext(v14, &v13, &v12))
          {
            if (*(_WORD *)(v12 + 56))
            {
              ssftmap_IteratorClose((uint64_t)v14);
              critsec_Leave(*(void **)(a1 + 24));
              return 2338332689;
            }
          }
          ssftmap_IteratorClose((uint64_t)v14);
        }
        uint64_t v6 = *(void *)(a1 + 32);
        if (v6)
        {
          ssftmap_ObjClose(v6);
          *(void *)(a1 + 32) = 0;
        }
      }
      int v7 = critsec_Leave(*(void **)(a1 + 24));
      if (v7 >= 0) {
        uint64_t v1 = v4;
      }
      else {
        uint64_t v1 = v7;
      }
      uint64_t v8 = *(void *)(a1 + 24);
      if (v8)
      {
        int v9 = critsec_ObjClose(v8);
        if (v9 >= 0 || (int)v1 <= -1) {
          uint64_t v1 = v1;
        }
        else {
          uint64_t v1 = v9;
        }
      }
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a1);
    }
  }
  return v1;
}

uint64_t objc_GetObject(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = 0;
  uint64_t result = 2338332679;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = critsec_Enter(*(void **)(a1 + 24));
        if ((result & 0x80000000) == 0)
        {
          unsigned int v7 = ssftmap_Find(*(void *)(a1 + 32), a2, &v11);
          unsigned int v8 = v7;
          if ((v7 & 0x80000000) != 0)
          {
            unsigned int v8 = v7 & 0x1FFF | 0x8B602000;
          }
          else
          {
            uint64_t v9 = v11;
            *a3 = v11;
            ++*(_WORD *)(v9 + 56);
          }
          LODWORD(result) = critsec_Leave(*(void **)(a1 + 24));
          if ((int)result >= 0 || (int)v8 <= -1) {
            return v8;
          }
          else {
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t objc_RegisterObject(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v12 = 0;
  uint64_t result = 2338332679;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t result = critsec_Enter(*(void **)(a1 + 24));
        if ((result & 0x80000000) == 0)
        {
          long long v11 = 0u;
          memset(v10, 0, sizeof(v10));
          int v7 = ssftmap_Find(*(void *)(a1 + 32), a2, &v12);
          if (v7 < 0)
          {
            cstdlib_memset(v10, 0, 0x40uLL);
            cstdlib_memcpy(v10, a3, 0x28uLL);
            WORD4(v11) = 0;
            int v8 = ssftmap_Insert(*(void *)(a1 + 32), a2, (uint64_t)v10);
          }
          else
          {
            int v8 = v7;
            cstdlib_memcpy(v12, a3, 0x28uLL);
          }
          LODWORD(result) = critsec_Leave(*(void **)(a1 + 24));
          if (v8 > -1 && (int)result < 0) {
            return result;
          }
          else {
            return v8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t objc_ReleaseObject(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t result = 2338332679;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = critsec_Enter(*(void **)(a1 + 24));
      if ((result & 0x80000000) == 0)
      {
        long long v9 = 0u;
        memset(v8, 0, sizeof(v8));
        int v5 = ssftmap_Find(*(void *)(a1 + 32), a2, &v10);
        int v6 = v5;
        if (v5 < 0)
        {
          int v6 = v5 & 0x1FFF | 0x8B602000;
        }
        else if (*((_WORD *)v10 + 28))
        {
          if (*((_WORD *)v10 + 28) == 1 && *((void *)v10 + 6))
          {
            cstdlib_memcpy(v8, v10, 0x40uLL);
            int v6 = ssftmap_Remove(*(void *)(a1 + 32), a2);
            ((void (*)(void, void, _OWORD *))v9)(*(void *)a1, *(void *)(a1 + 8), v8);
          }
          else
          {
            --*((_WORD *)v10 + 28);
          }
        }
        else
        {
          int v6 = -1956634607;
        }
        LODWORD(result) = critsec_Leave(*(void **)(a1 + 24));
        if (v6 > -1 && (int)result < 0) {
          return result;
        }
        else {
          return v6;
        }
      }
    }
  }
  return result;
}

uint64_t objc_UnregisterObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 2338332679;
  uint64_t v12 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  uint64_t v5 = critsec_Enter(*(void **)(a1 + 24));
  int v6 = v5;
  if ((v5 & 0x80000000) != 0) {
    return v5;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    int v8 = ssftmap_Find(v7, a2, &v12);
    if ((v8 & 0x80000000) == 0)
    {
      if (*(_WORD *)(v12 + 56))
      {
        int v6 = -1956634607;
        goto LABEL_11;
      }
      int v8 = ssftmap_Remove(*(void *)(a1 + 32), a2);
    }
    int v6 = v8;
  }
LABEL_11:
  int v9 = critsec_Leave(*(void **)(a1 + 24));
  if (v6 > -1 && v9 < 0) {
    return v9;
  }
  else {
    return v6;
  }
}

uint64_t objc_UnregisterAllObjects(uint64_t a1)
{
  if (!a1) {
    return 2338332679;
  }
  uint64_t v2 = critsec_Enter(*(void **)(a1 + 24));
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      LODWORD(v2) = ssftmap_Clear(v3);
    }
    int v4 = critsec_Leave(*(void **)(a1 + 24));
    if ((int)v2 > -1 && v4 < 0) {
      return v4;
    }
    else {
      return v2;
    }
  }
  return v2;
}

uint64_t objc_GetAddRefCountedObject(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, uint64_t, _OWORD *, uint64_t), void (*a4)(void, void, _OWORD *), uint64_t a5, void *a6)
{
  uint64_t v21 = 0;
  uint64_t result = 2338332679;
  if (a6)
  {
    if (a1)
    {
      if (a2)
      {
        if (a3)
        {
          if (a4)
          {
            uint64_t result = critsec_Enter(*(void **)(a1 + 24));
            if ((result & 0x80000000) == 0)
            {
              long long v19 = 0u;
              long long v20 = 0u;
              memset(v18, 0, sizeof(v18));
              unsigned int v13 = ssftmap_Find(*(void *)(a1 + 32), a2, &v21);
              if ((v13 & 0x80000000) == 0)
              {
LABEL_8:
                uint64_t v14 = v21;
                *a6 = v21;
                ++*(_WORD *)(v14 + 56);
                char v15 = 1;
                goto LABEL_16;
              }
              cstdlib_memset(v18, 0, 0x40uLL);
              unsigned int v16 = a3(*(void *)a1, *(void *)(a1 + 8), a2, v18, a5);
              if ((v16 & 0x80000000) != 0)
              {
                unsigned int v13 = v16;
              }
              else
              {
                *((void *)&v19 + 1) = a3;
                *(void *)&long long v20 = a4;
                unsigned int v17 = ssftmap_Insert(*(void *)(a1 + 32), a2, (uint64_t)v18);
                if ((v17 & 0x80000000) != 0)
                {
                  unsigned int v13 = v17;
                  a4(*(void *)a1, *(void *)(a1 + 8), v18);
                }
                else
                {
                  unsigned int v13 = ssftmap_Find(*(void *)(a1 + 32), a2, &v21);
                  if ((v13 & 0x80000000) == 0) {
                    goto LABEL_8;
                  }
                }
              }
              char v15 = 0;
LABEL_16:
              LODWORD(result) = critsec_Leave(*(void **)(a1 + 24));
              if ((v15 & ((int)result < 0)) != 0) {
                return result;
              }
              else {
                return v13;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t paramc_ObjOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 2339381258;
  if (!a4) {
    return 2339381255;
  }
  uint64_t v7 = (void *)heap_Calloc(*(void **)(a2 + 8), 1, 40);
  *(void *)a4 = v7;
  if (!v7) {
    return 2339381258;
  }
  int v8 = *(void **)(a2 + 8);
  void *v7 = v8;
  uint64_t v9 = critsec_ObjOpen(*(void *)(a2 + 16), v8, (uint64_t *)(*(void *)a4 + 8));
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v4 = v9;
  }
  else
  {
    uint64_t v10 = *(void **)(a2 + 8);
    long long v11 = (uint64_t *)(*(void *)a4 + 16);
    long long v24 = paramc_IParam;
    long long v25 = *(_OWORD *)&off_26D20DB88;
    uint64_t v26 = off_26D20DB98;
    uint64_t v12 = ssftmap_ObjOpen(v10, 0, &v24, v11);
    uint64_t v13 = v12;
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v4 = v12;
    }
    else
    {
      uint64_t v14 = *(void **)(a2 + 8);
      char v15 = (uint64_t *)(*(void *)a4 + 24);
      long long v24 = paramc_IListener;
      *(void *)&long long v25 = 0;
      if (vector_ObjOpen(v14, &v24, 1, v15))
      {
        unsigned int v16 = *(void **)(a2 + 8);
        unsigned int v17 = (uint64_t *)(*(void *)a4 + 32);
        long long v24 = paramc_IRestorePoints;
        *(uint64_t (**)())&long long v25 = off_26D20DBB0[0];
        if (vector_ObjOpen(v16, &v24, 2, v17)) {
          return v13;
        }
      }
    }
  }
  int v18 = *(void **)a4;
  if (*(void *)a4)
  {
    uint64_t v19 = v18[4];
    if (v19)
    {
      vector_ObjClose(v19);
      int v18 = *(void **)a4;
    }
    uint64_t v20 = v18[3];
    if (v20)
    {
      vector_ObjClose(v20);
      int v18 = *(void **)a4;
    }
    uint64_t v21 = v18[2];
    if (v21)
    {
      ssftmap_ObjClose(v21);
      int v18 = *(void **)a4;
    }
    uint64_t v22 = v18[1];
    if (v22)
    {
      critsec_ObjClose(v22);
      int v18 = *(void **)a4;
    }
    heap_Free(*(void **)(a2 + 8), (uint64_t)v18);
    *(void *)a4 = 0;
  }
  return v4;
}

uint64_t paramc_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2339381255;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    vector_ObjClose(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    vector_ObjClose(v3);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    ssftmap_ObjClose(v4);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    critsec_ObjClose(v5);
  }
  heap_Free(*(void **)a1, a1);
  return 0;
}

uint64_t paramc_ListenerAdd(uint64_t a1, unsigned char *a2, void *a3)
{
  unsigned int v3 = -1955586038;
  uint64_t v16 = 0;
  uint64_t v4 = 2339381255;
  if (!a1) {
    return v4;
  }
  if (!a3[2]) {
    return v4;
  }
  uint64_t v4 = critsec_Enter(*(void **)(a1 + 8));
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  if (a2 && *a2)
  {
    int v8 = ssftmap_Find(*(void *)(a1 + 16), (uint64_t)a2, &v16);
    LODWORD(v4) = v8;
    if (v8 < 0)
    {
      unsigned int v3 = v8 & 0x1FFF | 0x8B702000;
      goto LABEL_14;
    }
    uint64_t v9 = *(void *)(v16 + 16);
    if (!v9)
    {
      uint64_t v10 = *(void **)a1;
      long long v14 = paramc_IListener;
      uint64_t v15 = 0;
      if (!vector_ObjOpen(v10, &v14, 1, (uint64_t *)(v16 + 16))) {
        goto LABEL_14;
      }
      uint64_t v9 = *(void *)(v16 + 16);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
  }
  if (vector_Add(v9, a3)) {
    unsigned int v3 = v4;
  }
  else {
    unsigned int v3 = -1955586038;
  }
LABEL_14:
  int v11 = critsec_Leave(*(void **)(a1 + 8));
  if (v11 >= 0 || (int)v3 <= -1) {
    return v3;
  }
  else {
    return v11;
  }
}

uint64_t paramc_ListenerRemove(uint64_t a1, unsigned char *a2, long long *a3)
{
  uint64_t v13 = 0;
  if (!a1) {
    return 2339381255;
  }
  uint64_t result = critsec_Enter(*(void **)(a1 + 8));
  if ((result & 0x80000000) == 0)
  {
    if (a2 && *a2)
    {
      int v7 = ssftmap_Find(*(void *)(a1 + 16), (uint64_t)a2, &v13);
      if (v7 < 0)
      {
        int v9 = v7 & 0x1FFF | 0x8B702000;
        goto LABEL_10;
      }
      uint64_t v8 = *(void *)(v13 + 16);
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 24);
    }
    long long v11 = *a3;
    uint64_t v12 = *((void *)a3 + 2);
    int v9 = param_ListenerRemove(v8, &v11);
LABEL_10:
    LODWORD(result) = critsec_Leave(*(void **)(a1 + 8));
    if (v9 > -1 && (int)result < 0) {
      return result;
    }
    else {
      return v9;
    }
  }
  return result;
}

uint64_t param_ListenerRemove(uint64_t a1, void *a2)
{
  uint64_t v2 = 2339381268;
  int v7 = 0;
  if (a1 && vector_GetElemAt(a1, 0, &v7))
  {
    unsigned int v5 = 0;
    while (*a2 != *v7 || a2[1] != v7[1] || a2[2] != v7[2])
    {
      if (!vector_GetElemAt(a1, ++v5, &v7)) {
        return v2;
      }
    }
    if (vector_Remove(a1, v5)) {
      return 0;
    }
    else {
      return 2339381504;
    }
  }
  return v2;
}

uint64_t paramc_ParamSet(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  return paramc_ParamSetInternal(a1, a2, a3, a4, 0);
}

uint64_t paramc_ParamSetInternal(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  *(void *)long long v25 = 0;
  uint64_t v5 = 2339381255;
  if (!a1) {
    return v5;
  }
  if (!a2) {
    return v5;
  }
  if (!a3) {
    return v5;
  }
  uint64_t v5 = critsec_Enter(*(void **)(a1 + 8));
  if ((v5 & 0x80000000) != 0) {
    return v5;
  }
  if ((ssftmap_Find(*(void *)(a1 + 16), a2, v25) & 0x80000000) != 0)
  {
    v24[2] = 0;
    v24[0] = a3;
    v24[1] = a4;
    int v14 = param_ConsultListeners(a1, a2, (uint64_t)v24, (uint64_t)a3);
    if (v14 < 0) {
      goto LABEL_37;
    }
    uint64_t v15 = a5 ? a3 : 0;
    size_t v16 = a5 ? a4 : 0;
    int v14 = param_TrackForRestore(a1, a2, v15, v16, a5);
    if (v14 < 0) {
      goto LABEL_37;
    }
    int v17 = ssftmap_Insert(*(void *)(a1 + 16), a2, (uint64_t)v24);
    if (v17 < 0)
    {
      LODWORD(v5) = v17 & 0x1FFF | 0x8B702000;
    }
    else
    {
      int v18 = param_NotifyListeners(a1, a2, (uint64_t)v24, (uint64_t)a3);
      if (v18 < 0) {
        LODWORD(v5) = v18 & 0x1FFF | 0x8B702000;
      }
      else {
        LODWORD(v5) = 0;
      }
    }
  }
  else
  {
    uint64_t v11 = *(void *)v25;
    if (*(void *)v25)
    {
      unsigned int v12 = *(_DWORD *)(*(void *)v25 + 8);
      if (v12) {
        uint64_t v13 = **(const void ***)v25;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
      unsigned int v12 = 0;
    }
    if (v12 != a4)
    {
LABEL_26:
      int v14 = param_ConsultListeners(a1, a2, v11, (uint64_t)a3);
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t v19 = a5 ? a3 : (void *)v13;
        size_t v20 = a5 ? a4 : v12;
        int v14 = param_TrackForRestore(a1, a2, v19, v20, a5);
        if ((v14 & 0x80000000) == 0)
        {
          int v14 = param_SetValue(*(uint64_t *)v25, a3, a4, *(uint64_t **)a1);
          if ((v14 & 0x80000000) == 0)
          {
            int v14 = param_NotifyListeners(a1, a2, *(uint64_t *)v25, (uint64_t)a3);
            if ((v14 & 0x80000000) == 0)
            {
              LODWORD(v5) = 0;
              goto LABEL_38;
            }
          }
        }
      }
LABEL_37:
      LODWORD(v5) = v14;
      goto LABEL_38;
    }
    if (cstdlib_memcmp(v13, a3, a4))
    {
      uint64_t v11 = *(void *)v25;
      goto LABEL_26;
    }
  }
LABEL_38:
  int v21 = critsec_Leave(*(void **)(a1 + 8));
  if (v21 >= 0 || (int)v5 <= -1) {
    return v5;
  }
  else {
    return v21;
  }
}

uint64_t paramc_ParamSetPermanent(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  return paramc_ParamSetInternal(a1, a2, a3, a4, 1);
}

uint64_t paramc_ParamRipple(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  *(void *)int v14 = 0;
  uint64_t result = 2339381255;
  if (a1 && a2 && a3)
  {
    if ((ssftmap_Find(*(void *)(a1 + 16), a2, v14) & 0x80000000) != 0)
    {
      v13[2] = 0;
      v13[0] = a3;
      v13[1] = a4;
      uint64_t result = param_TrackForRestore(a1, a2, 0, 0, 0);
      if ((result & 0x80000000) == 0)
      {
        int v11 = ssftmap_Insert(*(void *)(a1 + 16), a2, (uint64_t)v13);
        if (v11 < 0)
        {
          return v11 & 0x1FFF | 0x8B702000;
        }
        else
        {
          int v12 = param_NotifyListeners(a1, a2, (uint64_t)v13, (uint64_t)a3);
          if (v12 < 0) {
            return v12 & 0x1FFF | 0x8B702000;
          }
          else {
            return 0;
          }
        }
      }
    }
    else
    {
      if (*(void *)v14)
      {
        size_t v9 = *(unsigned int *)(*(void *)v14 + 8);
        if (v9) {
          uint64_t v10 = **(void ***)v14;
        }
        else {
          uint64_t v10 = 0;
        }
      }
      else
      {
        uint64_t v10 = 0;
        size_t v9 = 0;
      }
      if (v9 == a4 && !cstdlib_memcmp(v10, a3, a4)) {
        return 0;
      }
      uint64_t result = param_TrackForRestore(a1, a2, v10, v9, 0);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = param_SetValue(*(uint64_t *)v14, a3, a4, *(uint64_t **)a1);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = param_NotifyListeners(a1, a2, *(uint64_t *)v14, (uint64_t)a3);
          if ((result & 0x80000000) == 0) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t param_TrackForRestore(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  _OWORD v17[2] = 0;
  v17[0] = a3;
  v17[1] = a4;
  if (vector_GetElemAt(*(void *)(a1 + 32), 0, &v19))
  {
    unsigned int v10 = 1;
    while (1)
    {
      unsigned int v11 = ssftmap_Insert(*(void *)(v19 + 8), a2, (uint64_t)v17);
      if ((v11 & 0x1FFF) == 2) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v11;
      }
      if ((v11 & 0x1FFF) == 2 && a5 != 0)
      {
        int v14 = ssftmap_Find(*(void *)(v19 + 8), a2, &v18);
        if (v14 < 0) {
          return v14 & 0x1FFF | 0x8B702000;
        }
        uint64_t v12 = param_SetValue(v18, a3, a4, **(uint64_t ***)v19);
      }
      if ((v12 & 0x80000000) == 0)
      {
        if (vector_GetElemAt(*(void *)(a1 + 32), v10++, &v19)) {
          continue;
        }
      }
      return v12;
    }
  }
  return 0;
}

uint64_t param_SetValue(uint64_t a1, void *__src, size_t __n, uint64_t *a4)
{
  uint64_t v4 = 2339381258;
  if (!a1) {
    return 2339381255;
  }
  int v5 = __n;
  if (__n)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 8);
    if (v8)
    {
      size_t v9 = *(void **)a1;
      size_t v10 = __n;
      if (v8 >= __n)
      {
LABEL_13:
        cstdlib_memcpy(v9, __src, v10);
        uint64_t v4 = 0;
        *(_DWORD *)(a1 + 8) = v5;
        return v4;
      }
      uint64_t v11 = heap_Realloc(a4, (uint64_t)v9, __n);
      if (v11)
      {
        size_t v9 = (void *)v11;
        *(void *)a1 = v11;
        goto LABEL_13;
      }
    }
    else
    {
      size_t v10 = __n;
      size_t v9 = (void *)heap_Alloc((uint64_t)a4, __n);
      *(void *)a1 = v9;
      if (v9) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (*(void *)a1 && *(_DWORD *)(a1 + 8)) {
      heap_Free(a4, *(void *)a1);
    }
    uint64_t v4 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(void *)a1 = __src;
  }
  return v4;
}

uint64_t param_NotifyListeners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v6 = a3 + 16;
  uint64_t v7 = a1 + 24;
  int v8 = 1;
  while (1)
  {
    size_t v9 = (uint64_t *)(v8 == 1 ? v6 : v7);
    uint64_t v10 = *v9;
    if (*v9)
    {
      int Size = vector_GetSize(*v9);
      if (Size) {
        break;
      }
    }
LABEL_12:
    if (++v8 == 3) {
      return 0;
    }
  }
  int v12 = Size;
  unsigned int v13 = 0;
  while (vector_GetElemAt(v10, v13, &v15))
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)v15, a2, a4);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v12 == ++v13) {
      goto LABEL_12;
    }
  }
  return 2339381504;
}

uint64_t paramc_ParamGet(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t v13 = 0;
  uint64_t result = 2339381255;
  if (a1 && a2 && a3)
  {
    *a3 = 0;
    if (a4) {
      *a4 = 0;
    }
    uint64_t result = critsec_Enter(*(void **)(a1 + 8));
    if ((result & 0x80000000) == 0)
    {
      unsigned int v9 = ssftmap_Find(*(void *)(a1 + 16), a2, &v13);
      unsigned int v10 = v9;
      if ((v9 & 0x80000000) != 0)
      {
        unsigned int v10 = v9 & 0x1FFF | 0x8B702000;
      }
      else if (v13)
      {
        int v11 = *(_DWORD *)(v13 + 8);
        if (v11)
        {
          *a3 = *(void *)v13;
          if (!a4) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        *a3 = 0;
        if (a4) {
LABEL_14:
        }
          *a4 = v11;
      }
LABEL_15:
      LODWORD(result) = critsec_Leave(*(void **)(a1 + 8));
      if ((int)result >= 0 || (int)v10 <= -1) {
        return v10;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t paramc_ParamRelease(uint64_t a1)
{
  if (a1) {
    return 0;
  }
  else {
    return 2339381255;
  }
}

uint64_t paramc_ParamSetInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  LH_itoa(a3, __s, 0xAu);
  int v5 = cstdlib_strlen(__s);
  return paramc_ParamSetInternal(a1, a2, __s, (v5 + 1), 0);
}

uint64_t paramc_ParamSetIntPermanent(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  LH_itoa(a3, __s, 0xAu);
  int v5 = cstdlib_strlen(__s);
  return paramc_ParamSetInternal(a1, a2, __s, (v5 + 1), 1);
}

uint64_t paramc_ParamGetInt(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  uint64_t v4 = paramc_ParamGet(a1, a2, &v8, &v7);
  int v5 = 0;
  if ((v4 & 0x80000000) == 0 && v7 >= 2) {
    int v5 = cstdlib_atoi(v8);
  }
  *a3 = v5;
  return v4;
}

uint64_t paramc_ParamSetUInt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  LH_utoa(a3, __s, 0xAu);
  int v5 = cstdlib_strlen(__s);
  return paramc_ParamSetInternal(a1, a2, __s, (v5 + 1), 0);
}

uint64_t paramc_ParamSetUIntPermanent(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  LH_utoa(a3, __s, 0xAu);
  int v5 = cstdlib_strlen(__s);
  return paramc_ParamSetInternal(a1, a2, __s, (v5 + 1), 1);
}

uint64_t paramc_ParamGetUInt(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  uint64_t v4 = paramc_ParamGet(a1, a2, &v8, &v7);
  unsigned int v5 = 0;
  if ((v4 & 0x80000000) == 0 && v7 >= 2) {
    unsigned int v5 = LH_atou(v8);
  }
  *a3 = v5;
  return v4;
}

uint64_t paramc_ParamSetStr(uint64_t a1, uint64_t a2, char *a3)
{
  if (a3) {
    unsigned int v5 = a3;
  }
  else {
    unsigned int v5 = "";
  }
  size_t v6 = cstdlib_strlen(v5) + 1;

  return paramc_ParamSetInternal(a1, a2, v5, v6, 0);
}

uint64_t paramc_ParamTraceSetStr()
{
  return 0;
}

uint64_t paramc_ParamSetStrPermanent(uint64_t a1, uint64_t a2, char *a3)
{
  if (a3) {
    unsigned int v5 = a3;
  }
  else {
    unsigned int v5 = "";
  }
  size_t v6 = cstdlib_strlen(v5) + 1;

  return paramc_ParamSetInternal(a1, a2, v5, v6, 1);
}

uint64_t paramc_ParamGetStr(uint64_t a1, uint64_t a2, void *a3)
{
  return paramc_ParamGet(a1, a2, a3, 0);
}

uint64_t paramc_ParamRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  uint64_t result = 2339381255;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = critsec_Enter(*(void **)(a1 + 8));
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v5 = ssftmap_Find(*(void *)(a1 + 16), a2, &v14);
  if (v5 < 0)
  {
    unsigned int v8 = v5 & 0x1FFF | 0x8B702000;
    goto LABEL_19;
  }
  uint64_t v6 = v14;
  uint64_t v7 = *(void *)(v14 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  if (vector_GetSize(v7))
  {
    unsigned int v8 = -1955586031;
    goto LABEL_19;
  }
  uint64_t v6 = v14;
  if (!v14)
  {
    unsigned int v10 = 0;
    size_t v9 = 0;
  }
  else
  {
LABEL_10:
    size_t v9 = *(unsigned int *)(v6 + 8);
    if (v9) {
      unsigned int v10 = *(void **)v6;
    }
    else {
      unsigned int v10 = 0;
    }
  }
  unsigned int v11 = param_TrackForRestore(a1, a2, v10, v9, 0);
  if ((v11 & 0x80000000) != 0)
  {
    unsigned int v8 = v11;
  }
  else
  {
    int v12 = ssftmap_Remove(*(void *)(a1 + 16), a2);
    if (v12 >= 0) {
      unsigned int v8 = v12;
    }
    else {
      unsigned int v8 = v12 & 0x1FFF | 0x8B702000;
    }
  }
LABEL_19:
  LODWORD(result) = critsec_Leave(*(void **)(a1 + 8));
  if ((int)result >= 0 || (int)v8 <= -1) {
    return v8;
  }
  else {
    return result;
  }
}

uint64_t paramc_ParamRemoveAll(uint64_t a1)
{
  unsigned int v10 = 0;
  if (!a1) {
    return 2339381255;
  }
  uint64_t result = critsec_Enter(*(void **)(a1 + 8));
  if ((result & 0x80000000) == 0)
  {
    if (vector_GetSize(*(void *)(a1 + 32))
      && (ssftmap_IteratorOpen(*(void *)(a1 + 16), 0, 1, (uint64_t)&v10) & 0x80000000) == 0)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        if (ssftmap_IteratorNext(v10, &v9, &v8)) {
          break;
        }
        if (v8)
        {
          size_t v3 = *(unsigned int *)(v8 + 8);
          uint64_t v4 = v3 ? *(void **)v8 : 0;
        }
        else
        {
          uint64_t v4 = 0;
          size_t v3 = 0;
        }
      }
      while ((param_TrackForRestore(a1, v9, v4, v3, 0) & 0x80000000) == 0);
      ssftmap_IteratorClose((uint64_t)v10);
    }
    int v5 = ssftmap_Clear(*(void *)(a1 + 16));
    int v6 = critsec_Leave(*(void **)(a1 + 8));
    if (v6 >= 0) {
      unsigned int v7 = v5;
    }
    else {
      unsigned int v7 = v6;
    }
    if (v5 >= 0) {
      return v7;
    }
    else {
      return v5 & 0x1FFF | 0x8B702000;
    }
  }
  return result;
}

uint64_t paramc_ParamSetRestorePoint(uint64_t a1, void *a2)
{
  uint64_t v2 = 2339381255;
  if (a1 && a2)
  {
    uint64_t v5 = critsec_Enter(*(void **)(a1 + 8));
    int v6 = v5;
    if ((v5 & 0x80000000) != 0)
    {
      return v5;
    }
    else
    {
      v12[0] = a1;
      v12[1] = 0;
      if (vector_Add(*(void *)(a1 + 32), v12))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        int Size = vector_GetSize(v7);
        if (vector_GetElemAt(v7, Size - 1, a2)) {
          LODWORD(v2) = v6;
        }
        else {
          LODWORD(v2) = -1955585792;
        }
      }
      else
      {
        LODWORD(v2) = -1955586038;
      }
      int v9 = critsec_Leave(*(void **)(a1 + 8));
      if (v9 >= 0 || (int)v2 <= -1) {
        return v2;
      }
      else {
        return v9;
      }
    }
  }
  return v2;
}

uint64_t paramc_ParamRestore(uint64_t a1, uint64_t *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v2 = 2339381255;
  uint64_t v11 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = ssftmap_IteratorOpen(a2[1], 0, 1, (uint64_t)&v13);
      if ((v2 & 0x80000000) == 0)
      {
        if (ssftmap_IteratorNext(v13, &v12, &v11))
        {
LABEL_5:
          ssftmap_IteratorClose((uint64_t)v13);
          return v2;
        }
        while (1)
        {
          uint64_t v5 = v12;
          size_t v6 = *(unsigned int *)(v11 + 8);
          uint64_t v7 = *a2;
          if (v6)
          {
            uint64_t v8 = *(char **)v11;
          }
          else
          {
            int v9 = paramc_ParamRemove(v7, v12);
            if ((v9 & 0x1FFF) != 0x11)
            {
              if ((v9 & 0x1FFF) == 0x14) {
                int v9 = 0;
              }
              goto LABEL_13;
            }
            uint64_t v7 = *a2;
            uint64_t v5 = v12;
            uint64_t v8 = "";
            size_t v6 = 1;
          }
          int v9 = paramc_ParamSetInternal(v7, v5, v8, v6, 0);
LABEL_13:
          if ((int)v2 > -1 && v9 < 0) {
            uint64_t v2 = v9;
          }
          else {
            uint64_t v2 = v2;
          }
          if (ssftmap_IteratorNext(v13, &v12, &v11)) {
            goto LABEL_5;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t paramc_ParamCloseRestorePoint(uint64_t a1, char *a2)
{
  uint64_t v2 = 2339381255;
  if (a1 && a2)
  {
    uint64_t v5 = critsec_Enter(*(void **)(a1 + 8));
    int v6 = v5;
    if ((v5 & 0x80000000) != 0)
    {
      return v5;
    }
    else
    {
      if (vector_RemoveAddress(*(void *)(a1 + 32), a2)) {
        LODWORD(v2) = v6;
      }
      else {
        LODWORD(v2) = -1955586041;
      }
      int v7 = critsec_Leave(*(void **)(a1 + 8));
      if ((int)v2 > -1 && v7 < 0) {
        return v7;
      }
      else {
        return v2;
      }
    }
  }
  return v2;
}

uint64_t paramc_IteratorOpen(uint64_t a1, void *a2)
{
  uint64_t v8 = 0;
  uint64_t result = 2339381255;
  if (a1 && a2)
  {
    uint64_t result = critsec_Enter(*(void **)(a1 + 8));
    if ((result & 0x80000000) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      int v5 = ssftmap_IteratorOpen(*(void *)(a1 + 16), 0, 1, (uint64_t)&v8);
      LODWORD(result) = critsec_Leave(*(void **)(a1 + 8));
      if (v5 > -1 && (int)result < 0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v5;
      }
      uint64_t v7 = v8;
    }
    *a2 = v7;
  }
  return result;
}

uint64_t paramc_IteratorClose(uint64_t a1)
{
  if (a1) {
    return ssftmap_IteratorClose(a1);
  }
  else {
    return 2339381255;
  }
}

uint64_t paramc_IteratorNext(uint64_t *a1, void *a2, void *a3, _DWORD *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (!a1) {
    return 2339381255;
  }
  uint64_t result = ssftmap_IteratorNext(a1, &v12, &v11);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v8 = v11;
    *a2 = v12;
    uint64_t v9 = *v8;
    int v10 = *((_DWORD *)v8 + 2);
  }
  *a3 = v9;
  *a4 = v10;
  return result;
}

uint64_t paramc_Iterate(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, void, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  unsigned int v11 = 0;
  uint64_t result = paramc_IteratorOpen(a1, &v14);
  if ((result & 0x80000000) == 0)
  {
    do
    {
      unsigned int v8 = paramc_IteratorNext(v14, &v13, &v12, &v11);
      if ((v8 & 0x80000000) != 0) {
        break;
      }
      unsigned int v8 = a2(v13, v12, v11, a3, a4);
    }
    while ((v8 & 0x80000000) == 0);
    unsigned int v9 = v8;
    int v10 = v8 & 0x1FFF;
    if (v14) {
      LODWORD(result) = ssftmap_IteratorClose((uint64_t)v14);
    }
    else {
      LODWORD(result) = -1955586041;
    }
    if (v10 == 23) {
      return result;
    }
    else {
      return v9;
    }
  }
  return result;
}

uint64_t param_Copy(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = 0;
  if (a1 && a3)
  {
    *a3 = 0;
    uint64_t v7 = heap_Calloc(a2, 1, 24);
    if (v7)
    {
      unsigned int v8 = (void *)v7;
      uint64_t v9 = param_SetValue(v7, *(void **)a1, *(unsigned int *)(a1 + 8), a2);
      if ((v9 & 0x80000000) != 0)
      {
        uint64_t v3 = v9;
        param_Free(v8, a2);
      }
      else
      {
        uint64_t v3 = 0;
        *a3 = v8;
      }
    }
    else
    {
      return 2339381258;
    }
  }
  return v3;
}

void *param_Free(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = result[2];
    if (v4)
    {
      vector_ObjClose(v4);
      *(void *)(v3 + 16) = 0;
    }
    if (*(void *)v3)
    {
      heap_Free(a2, *(void *)v3);
      *(void *)uint64_t v3 = 0;
    }
    *(_DWORD *)(v3 + 8) = 0;
    return heap_Free(a2, v3);
  }
  return result;
}

BOOL param_RestorePointCopyParts(void *a1, void *a2, void *a3)
{
  *a3 = *a1;
  uint64_t v3 = (long long *)a1[1];
  if (v3)
  {
    int v4 = ssftmap_ObjClone(v3, a3 + 1);
  }
  else
  {
    v6[0] = paramc_IParam;
    v6[1] = *(_OWORD *)&off_26D20DB88;
    uint64_t v7 = off_26D20DB98;
    int v4 = ssftmap_ObjOpen(a2, 0, v6, a3 + 1);
  }
  return v4 >= 0;
}

uint64_t param_RestorePointFreeParts(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t result = ssftmap_ObjClose(result);
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t param_ConsultListeners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v21 = 1;
  size_t v20 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 16;
  uint64_t v8 = a1 + 24;
  int v9 = 1;
  while (1)
  {
    int v10 = (uint64_t *)(v9 == 1 ? v7 : v8);
    uint64_t v11 = *v10;
    if (*v10)
    {
      unsigned int Size = vector_GetSize(*v10);
      if (Size)
      {
        if ((v6 & 0x80000000) == 0) {
          break;
        }
      }
    }
LABEL_21:
    if (++v9 == 3) {
      return v6;
    }
  }
  unsigned int v13 = Size;
  unsigned int v14 = 1;
  while (vector_GetElemAt(v11, v14 - 1, &v20))
  {
    uint64_t v15 = (uint64_t (*)(void, uint64_t, uint64_t, int *))v20[1];
    if (v15)
    {
      int v16 = v15(*v20, a2, a4, &v21);
      if (v21) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v16 < 0;
      }
      if (v17) {
        uint64_t v6 = v16;
      }
      else {
        uint64_t v6 = 2339381263;
      }
    }
    if ((v6 & 0x80000000) == 0 && v14++ < v13) {
      continue;
    }
    goto LABEL_21;
  }
  return 2339381504;
}

uint64_t ssftriff_reader_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, char *a5, int a6, uint64_t *a7)
{
  return ssftriff_reader_ObjOpenEx(a1, a2, a3, a4, 0, 0, a5, a6 & 0xFFFFFF, a7);
}

uint64_t ssftriff_reader_ObjOpenEx(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, int a6, char *a7, int a8, uint64_t *a9)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v111 = 0;
  char v110 = 0;
  *(_DWORD *)uint64_t __s1 = 0;
  char v108 = 0;
  unsigned int v106 = 16;
  *(_DWORD *)__s2 = 0;
  int v105 = 0;
  long long v103 = 0u;
  long long v104 = 0u;
  long long __b = 0u;
  long long v101 = 0uLL;
  *(void *)int v100 = 0;
  cstdlib_strcpy(__dst, "");
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  int v20 = 1;
  switch((int)a3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      goto LABEL_5;
    case 2:
      int v19 = 0;
      a3 = 0;
      uint64_t v18 = 1;
      if (!a4) {
        return 2317361159;
      }
      goto LABEL_7;
    case 3:
      uint64_t v17 = 1;
LABEL_5:
      int v20 = 0;
      int v19 = 0;
      a3 = 1;
      uint64_t v18 = v17;
LABEL_6:
      if (a4) {
        goto LABEL_7;
      }
      return 2317361159;
    case 4:
      uint64_t v18 = 0;
      int v20 = 0;
      a3 = 4;
      int v19 = 1;
      if (!a4) {
        return 2317361159;
      }
LABEL_7:
      if (!a7 || !*a4 || v20 && !*a7 || v19 && (!a5 || !a6) || !a9) {
        return 2317361159;
      }
      uint64_t v97 = a7;
      *a9 = 0;
      uint64_t inited = InitRsrcFunction(a1, a2, &v111);
      if ((inited & 0x80000000) != 0) {
        return inited;
      }
      unsigned int v25 = a8;
      unsigned int v26 = BYTE1(a8);
      unsigned int v27 = BYTE2(a8);
      unsigned int v96 = v25;
      log_OutText(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjOpen : Begin (%d, %s, %s, [%u.%u.%u])", v22, v23, v24, a3);
      cstdlib_memset(&__b, 0, 0x30uLL);
      cstdlib_memset(&v101, 0, 0x10uLL);
      *(void *)&long long __b = v111;
      if (a3 == 4)
      {
        unsigned int v95 = v26;
        *(void *)&long long v101 = a5;
        DWORD2(v101) = a6;
      }
      else if (a3 == 1)
      {
        unsigned int v95 = v26;
        uint64_t v33 = osspi_DataOpen(*(void **)(v111 + 64), *(void **)(v111 + 8), (uint64_t)a4, (uint64_t *)&v103 + 1);
        if ((v33 & 0x80000000) != 0)
        {
          Chunkuint64_t Data = v33;
          uint64_t v68 = *(void *)(v111 + 32);
          if (v18) {
            log_OutText(v68, (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"osspi_DataOpen failed for %s, %x", v35, v36, v37, (uint64_t)a4);
          }
          else {
            log_OutPublic(v68, (uint64_t)"RIFFREADER", 27002, (uint64_t)"%s%s%s%x", v34, v35, v36, v37, "file");
          }
          return ChunkData;
        }
      }
      else
      {
        if (a3)
        {
          log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27003, (uint64_t)"%s%s%s%d", v28, v29, v30, v31, "file");
          return 2317361159;
        }
        unsigned int v95 = v26;
        uint64_t inited = brk_DataOpenEx(*(void *)(v111 + 24), (uint64_t)a4, v18, (uint64_t)&v103);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
      }
      uint64_t v38 = heap_Calloc(*(void **)(v111 + 8), 1, 128);
      if (v38)
      {
        uint64_t v43 = v38;
        *(void *)uint64_t v38 = a1;
        *(void *)(v38 + 8) = a2;
        uint64_t v44 = v111;
        *(void *)(v38 + 16) = v111;
        *(_DWORD *)(v38 + 24) = a3;
        long long v45 = v103;
        *(_OWORD *)(v38 + 56) = __b;
        *(_OWORD *)(v38 + 72) = v45;
        *(_OWORD *)(v38 + 88) = v104;
        *(_OWORD *)(v38 + 104) = v101;
        uint64_t v46 = *(void *)(v44 + 8);
        int v47 = cstdlib_strlen(a4);
        uint64_t v48 = (char *)heap_Alloc(v46, (v47 + 1));
        *(void *)(v43 + 40) = v48;
        if (v48
          && (cstdlib_strcpy(v48, a4),
              uint64_t v53 = *(void **)(v111 + 8),
              *(_OWORD *)uint64_t v113 = SSFTRIFF_CHUNK_STACK_ELEM_IT,
              uint64_t v114 = 0,
              vector_ObjOpen(v53, (long long *)v113, 4, (uint64_t *)(v43 + 48))))
        {
          uint64_t v54 = ssftriff_reader_OpenChunk(v43, (__int32 *)__s1, (unsigned int *)&v105, 0);
          if ((v54 & 0x80000000) != 0) {
            goto LABEL_96;
          }
          Chunkuint64_t Data = ssftriff_reader_GetChunkData(v43, 4u, v100);
          if ((ChunkData & 0x80000000) == 0)
          {
            if (cstdlib_strcmp(__s1, "RIFF"))
            {
              if (cstdlib_strcmp(__s1, "RIF4"))
              {
                if (cstdlib_strcmp(__s1, "RIF8"))
                {
                  if (!*(_WORD *)(v43 + 32)) {
                    goto LABEL_53;
                  }
LABEL_49:
                  ssftriff_reader_ReadFourCC(v43, *(uint64_t *)v100, v105, 0, (__int32 *)__s2, v62);
                  if (v70 < 0)
                  {
LABEL_53:
                    log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27004, (uint64_t)"%s%s", v63, v64, v65, v66, "file");
                    goto LABEL_54;
                  }
                  if (!*v97) {
                    goto LABEL_56;
                  }
                  if (cstdlib_strcmp(v97, __s2))
                  {
                    log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27005, (uint64_t)"%s%s", v71, v59, v60, v61, "file");
LABEL_54:
                    Chunkuint64_t Data = 2317361156;
                    goto LABEL_39;
                  }
                  if (!*v97) {
LABEL_56:
                  }
                    cstdlib_strcpy(v97, __s2);
                  *(_DWORD *)(v43 + 120) += 4;
                  char v72 = v20 ^ 1;
                  if (v96) {
                    char v72 = 0;
                  }
                  if (v72)
                  {
LABEL_95:
                    *a9 = v43;
                    goto LABEL_40;
                  }
                  int v73 = ssftriff_reader_OpenChunk(v43, (__int32 *)__s1, (unsigned int *)&v105, v100);
                  __int16 v78 = v73;
                  if ((v73 & 0x80000000) == 0 && !cstdlib_strcmp(__s1, "LIST") && v105 >= 5)
                  {
                    ssftriff_reader_ReadFourCC(v43, *(uint64_t *)v100, v105, 0, (__int32 *)__s2, v79);
                    if (Chunk < 0) {
                      goto LABEL_81;
                    }
                    if (cstdlib_strcmp(__s2, "INFO")
                      || (int v81 = *(_DWORD *)(v43 + 120) + 4, *(_DWORD *)(v43 + 120) = v81, v81 < 0))
                    {
                      __int16 v78 = 0;
                      goto LABEL_85;
                    }
                    Chunuint64_t k = ssftriff_reader_FindChunk(v43, "VERS", 3, (unsigned int *)&v105, v100);
                    if (Chunk < 0)
                    {
LABEL_81:
                      __int16 v78 = Chunk;
                    }
                    else
                    {
                      int v82 = ssftriff_reader_ReadStringZ(v43, *(uint64_t *)v100, v105, 0, __dst, &v106);
                      if ((v82 & 0x80000000) == 0)
                      {
                        uint64_t v98 = 0;
                        int v99 = __dst;
                        int v87 = cstdlib_strtol((unsigned __int8 *)__dst, &v98, 0xAu);
                        if (v87 >= 1
                          && v98
                          && *v98 == 46
                          && (unsigned int v88 = cstdlib_strtol(v98 + 1, (unsigned __int8 **)&v99, 0xAu), (v88 & 0x80000000) == 0)
                          && v99
                          && *v99 == 46
                          && (unsigned int v89 = cstdlib_strtol((unsigned __int8 *)v99 + 1, &v98, 0xAu), (v89 & 0x80000000) == 0)
                          && v98
                          && (!*v98 || *v98 == 46))
                        {
                          if (v96 >= v87 && (v96 != v87 || v95 >= v88 && (v95 != v88 || v27 >= v89)))
                          {
                            uint64_t v54 = ssftriff_reader_CloseChunk(v43);
                            if ((v54 & 0x80000000) == 0)
                            {
                              uint64_t v54 = ssftriff_reader_CloseChunk(v43);
                              if ((v54 & 0x80000000) == 0)
                              {
                                Chunkuint64_t Data = 0;
                                goto LABEL_95;
                              }
                            }
LABEL_96:
                            Chunkuint64_t Data = v54;
                            goto LABEL_39;
                          }
                          LH_itoa(v96, __src, 0xAu);
                          cstdlib_strcpy(v113, __src);
                          cstdlib_strcat(v113, ".");
                          LH_itoa(v95, __src, 0xAu);
                          cstdlib_strcat(v113, __src);
                          cstdlib_strcat(v113, ".");
                          LH_itoa(v27, __src, 0xAu);
                          cstdlib_strcat(v113, __src);
                          log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27009, (uint64_t)"%s%s%s%s", v90, v91, v92, v93, "productVersion");
                        }
                        else
                        {
                          log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27008, (uint64_t)"%s%s", v83, v84, v85, v86, "version");
                        }
                        Chunkuint64_t Data = 2317361156;
                        goto LABEL_39;
                      }
                      __int16 v78 = v82;
                    }
                  }
LABEL_85:
                  log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27006, (uint64_t)"%s%s", v74, v75, v76, v77, "file");
                  if ((v78 & 0x1FFF) == 0xA) {
                    Chunkuint64_t Data = 2317361162;
                  }
                  else {
                    Chunkuint64_t Data = 2317361156;
                  }
                  goto LABEL_39;
                }
                __int16 v69 = 8;
              }
              else
              {
                __int16 v69 = 4;
              }
            }
            else
            {
              __int16 v69 = 2;
            }
            *(_WORD *)(v43 + 32) = v69;
            goto LABEL_49;
          }
        }
        else
        {
          log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27000, 0, v49, v50, v51, v52, v94);
          Chunkuint64_t Data = 2317361162;
        }
LABEL_39:
        ssftriff_reader_ObjClose((void *)v43, v55, v56, v57, v58, v59, v60, v61);
LABEL_40:
        log_OutText(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjOpen : End (%x, %p)", v59, v60, v61, ChunkData);
        return ChunkData;
      }
      log_OutPublic(*(void *)(v111 + 32), (uint64_t)"RIFFREADER", 27000, 0, v39, v40, v41, v42, v94);
      ssftriff_reader_loc_DataClose((uint64_t)&__b);
      return 2317361162;
    default:
      return 2317361159;
  }
}

uint64_t ssftriff_reader_loc_DataClose(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    return result;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t result = ssftriff_loc_DataUnmap(*(void *)a1, a1);
    *(void *)(a1 + 32) = 0;
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3
    || (uint64_t result = brk_DataClose(*(void *)(*(void *)a1 + 24), v3),
        *(void *)(a1 + 16) = 0,
        (result & 0x80000000) == 0))
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t result = osspi_DataClose(*(void *)(a1 + 24));
      *(void *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t ssftriff_reader_OpenChunk(uint64_t a1, __int32 *a2, unsigned int *a3, void *a4)
{
  uint64_t v4 = 2317361156;
  uint64_t v39 = 0;
  uint64_t v5 = 2317361159;
  if (a2 && a1 && a3)
  {
    if (vector_StackTop(*(void *)(a1 + 48), &v39))
    {
      unsigned int v14 = *(_DWORD *)(a1 + 120);
      if (v14 + 8 > *(_DWORD *)(v39 + 12))
      {
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 3, 0, (uint64_t)"Chunk open failed: no more chunks", v10, v11, v12, v36);
        uint64_t v4 = 2317361172;
        goto LABEL_31;
      }
      int v16 = *(unsigned __int8 **)(a1 + 88);
      if (v16 && v14 >= *(_DWORD *)(a1 + 96) && v14 + 8 <= *(_DWORD *)(a1 + 100)) {
        goto LABEL_17;
      }
      uint64_t v15 = ssftriff_loc_DataMap(a1, *(unsigned int *)(a1 + 120), 8u, a1 + 56);
      if ((v15 & 0x80000000) == 0)
      {
        int v16 = *(unsigned __int8 **)(a1 + 88);
        unsigned int v14 = *(_DWORD *)(a1 + 120);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v15 = ssftriff_loc_DataMap(a1, 0, 8u, a1 + 56);
      *(_DWORD *)(a1 + 120) = 0;
      if ((v15 & 0x80000000) == 0)
      {
        int v16 = *(unsigned __int8 **)(a1 + 88);
        int v17 = *v16;
        if (v17 == 251 || v17 == 224)
        {
          unsigned int v14 = 0;
          *(_DWORD *)(a1 + 28) = 1;
        }
        else
        {
          unsigned int v14 = 0;
        }
LABEL_17:
        ssftriff_reader_ReadFourCC(a1, (uint64_t)v16, *(_DWORD *)(a1 + 100), v14 - *(_DWORD *)(a1 + 96), a2, v13);
        if ((v15 & 0x80000000) == 0)
        {
          cstdlib_memcpy(a3, (const void *)(*(void *)(a1 + 88) + (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 96) + 4)), 4uLL);
          unint64_t v22 = 0;
          *(_DWORD *)(a1 + 120) += 8;
          do
          {
            int v23 = *((unsigned __int8 *)a2 + v22);
            if ((v23 & 0xFFFFFFDF) - 65 >= 0x1A)
            {
              BOOL v24 = v23 != 32 && (v23 - 48) >= 0xA;
              if (v24)
              {
                uint64_t v30 = *(void *)(*(void *)(a1 + 16) + 32);
                if (v39) {
                  log_OutPublic(v30, (uint64_t)"RIFFREADER", 27011, (uint64_t)"%s%s%s%s%s%u", v18, v19, v20, v21, "file");
                }
                else {
                  log_OutPublic(v30, (uint64_t)"RIFFREADER", 27004, (uint64_t)"%s%s", v18, v19, v20, v21, "file");
                }
                *(unsigned char *)a2 = 0;
                *a3 = 0;
                if (!a4) {
                  return 2317361156;
                }
                goto LABEL_32;
              }
            }
            BOOL v24 = v22++ >= 3;
          }
          while (!v24);
          if (v39)
          {
            unsigned int v25 = *(_DWORD *)(v39 + 12);
            if (*a3 > v25 || *(_DWORD *)(a1 + 120) + *a3 > v25)
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27012, (uint64_t)"%s%s%s%s", v18, v19, v20, v21, "file");
              goto LABEL_31;
            }
          }
          if (!a4)
          {
LABEL_40:
            uint64_t v5 = 0;
            goto LABEL_48;
          }
          uint64_t v28 = *(unsigned int *)(a1 + 120);
          if (*(void *)(a1 + 88))
          {
            unsigned int v29 = *a3;
            if (v28 >= *(_DWORD *)(a1 + 96) && v29 + v28 <= *(_DWORD *)(a1 + 100)) {
              goto LABEL_40;
            }
          }
          else
          {
            unsigned int v29 = *a3;
          }
          uint64_t v5 = ssftriff_loc_DataMap(a1, v28, v29, a1 + 56);
          if ((v5 & 0x80000000) != 0)
          {
            uint64_t v26 = 0;
            *(unsigned char *)a2 = 0;
            *a3 = 0;
LABEL_54:
            uint64_t v4 = v5;
            goto LABEL_33;
          }
LABEL_48:
          uint64_t __b = 0;
          uint64_t v38 = 0;
          cstdlib_memset(&__b, 0, 0x10uLL);
          cstdlib_strcpy((char *)&__b, (const char *)a2);
          int v31 = *a3 + *(_DWORD *)(a1 + 120);
          LODWORD(v38) = *(_DWORD *)(a1 + 120);
          HIDWORD(v38) = v31;
          if (vector_Add(*(void *)(a1 + 48), &__b))
          {
            if (!a4) {
              return v5;
            }
            uint64_t v26 = *(void *)(a1 + 88) + (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 96));
            goto LABEL_54;
          }
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27000, 0, v32, v33, v34, v35, v36);
          *(unsigned char *)a2 = 0;
          *a3 = 0;
          uint64_t v4 = 2317361162;
          if (a4) {
            goto LABEL_32;
          }
          return v4;
        }
      }
    }
    uint64_t v4 = v15;
LABEL_31:
    *(unsigned char *)a2 = 0;
    *a3 = 0;
    if (a4)
    {
LABEL_32:
      uint64_t v26 = 0;
LABEL_33:
      *a4 = v26;
    }
    return v4;
  }
  return v5;
}

uint64_t ssftriff_reader_GetChunkData(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t result = 2317361159;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (!v7) {
      return 2317361169;
    }
    uint64_t v8 = *(unsigned int *)(a1 + 120);
    unsigned int v9 = *(_DWORD *)(a1 + 96);
    if (v8 >= v9 && v8 + a2 <= *(_DWORD *)(a1 + 100))
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = ssftriff_loc_DataMap(a1, v8, a2, a1 + 56);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v10 = 0;
        goto LABEL_13;
      }
      uint64_t v7 = *(void *)(a1 + 88);
      LODWORD(v8) = *(_DWORD *)(a1 + 120);
      unsigned int v9 = *(_DWORD *)(a1 + 96);
    }
    uint64_t v10 = v7 + v8 - v9;
LABEL_13:
    *a3 = v10;
  }
  return result;
}

uint8x8_t ssftriff_reader_ReadFourCC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, __int32 *__dst, uint8x8_t result)
{
  if (a1 && a2 && a4 + 4 <= a3 && __dst)
  {
    cstdlib_memcpy(__dst, (const void *)(a2 + a4), 4uLL);
    *((unsigned char *)__dst + 4) = 0;
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      result.i32[0] = *__dst;
      int16x8_t v8 = (int16x8_t)vmovl_u8(result);
      *(int8x8_t *)v8.i8 = veor_s8(*(int8x8_t *)v8.i8, (int8x8_t)0xA900A900A900A9);
      uint64_t result = (uint8x8_t)vmovn_s16(v8);
      void *__dst = result.i32[0];
    }
  }
  return result;
}

uint64_t ssftriff_reader_FindChunk(uint64_t a1, const char *a2, int a3, unsigned int *a4, void *a5)
{
  uint64_t v27 = 0;
  BOOL v24 = 0;
  uint64_t v5 = 2317361159;
  if (a1)
  {
    if (a4)
    {
      unsigned int Size = vector_GetSize(*(void *)(a1 + 48));
      if (Size)
      {
        unsigned int v12 = Size;
        char v26 = 0;
        *(_DWORD *)uint64_t __s1 = 0;
        if (vector_ObjClone(*(const void ***)(a1 + 48), &v24))
        {
          int v17 = *(_DWORD *)(a1 + 120);
          switch(a3)
          {
            case 0:
              *(_DWORD *)(a1 + 120) = 12;
              if (v12 >= 2)
              {
                do
                {
                  vector_StackPop(*(void *)(a1 + 48));
                  --v12;
                }
                while (v12 > 1);
              }
              goto LABEL_18;
            case 1:
              if (v12 == 1) {
                goto LABEL_18;
              }
              if (!vector_GetElemAt(*(void *)(a1 + 48), 1u, &v27))
              {
LABEL_25:
                LODWORD(ChunkData) = -1977606136;
                uint64_t v18 = 27013;
LABEL_26:
                log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", v18, (uint64_t)"%s%s", v13, v14, v15, v16, "chunk");
                goto LABEL_27;
              }
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(v27 + 12);
              do
              {
                vector_StackPop(*(void *)(a1 + 48));
                --v12;
              }
              while (v12 > 1);
              while (1)
              {
LABEL_18:
                Chunkuint64_t Data = ssftriff_reader_OpenChunk(a1, (__int32 *)__s1, a4, 0);
                if ((ChunkData & 0x80000000) != 0) {
                  goto LABEL_27;
                }
                if (!cstdlib_strcmp(__s1, a2)) {
                  break;
                }
                int v20 = ssftriff_reader_CloseChunk(a1);
                if (v20 < 0)
                {
                  LODWORD(ChunkData) = v20;
LABEL_27:
                  BOOL v21 = a5 != 0;
                  goto LABEL_28;
                }
              }
              if (!a5 || (Chunkuint64_t Data = ssftriff_reader_GetChunkData(a1, *a4, a5), (ChunkData & 0x80000000) == 0))
              {
                vector_ObjClose((uint64_t)v24);
                return ChunkData;
              }
              BOOL v21 = 1;
LABEL_28:
              if ((ChunkData & 0x1FFF) == 0xA) {
                uint64_t v5 = ChunkData;
              }
              else {
                uint64_t v5 = 2317361172;
              }
              if (v24)
              {
                vector_ObjClose(*(void *)(a1 + 48));
                *(void *)(a1 + 48) = v24;
                *(_DWORD *)(a1 + 120) = v17;
              }
              *a4 = 0;
              if (v21) {
                *a5 = 0;
              }
              break;
            case 2:
              if (!vector_StackTop(*(void *)(a1 + 48), &v27)) {
                goto LABEL_25;
              }
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(v27 + 8);
              goto LABEL_18;
            case 3:
              goto LABEL_18;
            default:
              uint64_t v18 = 27014;
              LODWORD(ChunkData) = -1977606137;
              goto LABEL_26;
          }
        }
        else
        {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27000, 0, v13, v14, v15, v16, v23);
          return 2317361162;
        }
      }
    }
  }
  return v5;
}

uint64_t ssftriff_reader_ReadStringZ(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned char *__dst, unsigned int *a6)
{
  uint64_t result = 2317361159;
  if (a1)
  {
    if (a2)
    {
      if (a4 <= a3)
      {
        if (a6)
        {
          unsigned int v9 = __dst;
          unsigned int v10 = *a6;
          if (__dst || !v10)
          {
            uint64_t v11 = (unsigned char *)(a2 + a4);
            if (*(_DWORD *)(a1 + 28) == 1)
            {
              unsigned int v12 = 0;
              while (v11[v12] != 169)
              {
                ++v12;
                if (a4 + v12 > a3) {
                  return 2317361156;
                }
              }
            }
            else
            {
              unsigned int v12 = 0;
              while (v11[v12])
              {
                ++v12;
                if (a4 + v12 > a3) {
                  return 2317361156;
                }
              }
            }
            if (v12 + 1 <= v10)
            {
              uint64_t v13 = v12;
              cstdlib_memcpy(__dst, v11, v12);
              uint64_t result = 0;
              v9[v12] = 0;
              if (*(_DWORD *)(a1 + 28) == 1 && v12 != 0)
              {
                do
                {
                  *v9++ ^= 0xA9u;
                  --v13;
                }
                while (v13);
                uint64_t result = 0;
              }
            }
            else
            {
              uint64_t result = 2317361161;
              if (v10) {
                void *__dst = 0;
              }
            }
            *a6 = v12 + 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ssftriff_reader_CloseChunk(uint64_t a1)
{
  uint64_t v1 = 2317361152;
  uint64_t v11 = 0;
  if (!a1) {
    return 2317361159;
  }
  if (!vector_StackTop(*(void *)(a1 + 48), &v11))
  {
    uint64_t v9 = 27015;
LABEL_10:
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", v9, (uint64_t)"%s%s", v3, v4, v5, v6, "file");
    return v1;
  }
  unsigned int v7 = *(_DWORD *)(v11 + 12);
  *(_DWORD *)(a1 + 120) = v7;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 32);
  if (v7 % v8) {
    *(_DWORD *)(a1 + 120) = v7 - v7 % v8 + v8;
  }
  if (!vector_StackPop(*(void *)(a1 + 48)))
  {
    uint64_t v1 = 2317361160;
    uint64_t v9 = 27016;
    goto LABEL_10;
  }
  return 0;
}

uint64_t ssftriff_reader_ObjClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2317361159;
  }
  uint64_t v9 = a1[2];
  log_OutText(*(void *)(v9 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjClose : Begin (%p)", a6, a7, a8, (uint64_t)a1);
  uint64_t v13 = ssftriff_reader_loc_DataClose((uint64_t)(a1 + 7));
  uint64_t v14 = a1[5];
  if (v14) {
    heap_Free(*(void **)(a1[2] + 8), v14);
  }
  uint64_t v15 = a1[6];
  if (v15) {
    vector_ObjClose(v15);
  }
  if ((v13 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1[2] + 8), (uint64_t)a1);
  }
  log_OutText(*(void *)(v9 + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_ObjClose : End (%x)", v10, v11, v12, v13);
  return v13;
}

uint64_t ssftriff_loc_DataMap(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 <= 0x20) {
    unsigned int v8 = 32;
  }
  else {
    unsigned int v8 = a3;
  }
  unsigned int v14 = v8;
  if (*(_DWORD *)(a4 + 8))
  {
    LODWORD(result) = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
  }
  else if (*(void *)(a4 + 32))
  {
    uint64_t result = ssftriff_loc_DataUnmap(*(void *)(a1 + 16), a4);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  else
  {
    LODWORD(result) = 0;
  }
  int v10 = *(_DWORD *)(a1 + 24);
  if (v10 == 4)
  {
    if (a3 + a2 <= *(_DWORD *)(a1 + 112)) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 2317361156;
    }
    *(void *)(a4 + 32) = *(void *)(a1 + 104) + a2;
LABEL_24:
    unsigned int v13 = v14;
    if ((result & 0x80000000) != 0 || v14 >= a3)
    {
      if ((result & 0x80000000) == 0)
      {
        *(_DWORD *)(a4 + 40) = a2;
        *(_DWORD *)(a4 + 44) = v13 + a2;
        return result;
      }
    }
    else
    {
      ssftriff_loc_DataUnmap(*(void *)(a1 + 16), a4);
      uint64_t result = 2317361156;
    }
    goto LABEL_30;
  }
  if (v10 == 1)
  {
    uint64_t v12 = *(void *)(a4 + 24);
    if (!v12)
    {
      uint64_t result = osspi_DataOpen(*(void **)(*(void *)(a1 + 16) + 64), *(void **)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 40), (uint64_t *)(a4 + 24));
      if ((result & 0x80000000) != 0) {
        goto LABEL_30;
      }
      uint64_t v12 = *(void *)(a4 + 24);
    }
    uint64_t result = osspi_DataMap(v12, a2, &v14, (void *)(a4 + 32));
    goto LABEL_24;
  }
  if (v10)
  {
    uint64_t result = 2317361153;
  }
  else
  {
    uint64_t v11 = *(void *)(a4 + 16);
    if (v11)
    {
LABEL_12:
      uint64_t result = brk_DataMapEx(*(void *)(*(void *)(a1 + 16) + 24), v11, a2, (uint64_t)&v14, a4 + 32);
      goto LABEL_24;
    }
    uint64_t result = brk_DataOpen(*(void *)(*(void *)(a1 + 16) + 24));
    if ((result & 0x80000000) == 0)
    {
      uint64_t v11 = *(void *)(a4 + 16);
      goto LABEL_12;
    }
  }
LABEL_30:
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  return result;
}

uint64_t ssftriff_reader_DetachChunkData(uint64_t a1, void **a2, void *a3)
{
  uint64_t v19 = 0;
  uint64_t v3 = 2317361159;
  if (!a1 || !a2 || !a3) {
    return v3;
  }
  if (!*(void *)(a1 + 88)) {
    return 2317361169;
  }
  uint64_t v7 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 48);
  *a2 = (void *)v7;
  if (v7)
  {
    if (vector_StackTop(*(void *)(a1 + 48), &v19))
    {
      if (!*(_DWORD *)(a1 + 64)
        && *(void *)(a1 + 88)
        && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a1 + 120)
        && *(_DWORD *)(a1 + 100) == *(_DWORD *)(v19 + 12))
      {
        uint64_t v3 = 0;
        goto LABEL_9;
      }
      uint64_t v3 = ssftriff_loc_DataMap(a1, *(unsigned int *)(a1 + 120), *(_DWORD *)(v19 + 12) - *(_DWORD *)(a1 + 120), a1 + 56);
      if ((v3 & 0x80000000) == 0)
      {
LABEL_9:
        int v16 = *(_DWORD *)(a1 + 24);
        if (v16 == 1)
        {
          osspi_DataFreeze(*(void **)(a1 + 80));
        }
        else if (!v16)
        {
          brk_DataFreeze(*(void *)(*(void *)(a1 + 16) + 24), *(void *)(a1 + 72));
        }
        cstdlib_memcpy(*a2, (const void *)(a1 + 56), 0x30uLL);
        if (*(_DWORD *)(a1 + 24) != 4) {
          *(_DWORD *)(a1 + 64) = 1;
        }
        *a3 = *((void *)*a2 + 4);
        return v3;
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27013, (uint64_t)"%s%s", v12, v13, v14, v15, "file");
      uint64_t v3 = 2317361152;
    }
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 27000, 0, v8, v9, v10, v11, v18);
    uint64_t v3 = 2317361162;
  }
  if (*a2)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)*a2);
    *a2 = 0;
  }
  return v3;
}

uint64_t ssftriff_reader_ReleaseChunkData(void *a1)
{
  if (!a1 || !a1[4]) {
    return 2317361159;
  }
  uint64_t v2 = ssftriff_reader_loc_DataClose((uint64_t)a1);
  heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  return v2;
}

uint64_t ssftriff_reader_ReadStringW(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned char *a5, _DWORD *a6)
{
  uint64_t v6 = 2317361159;
  if (a1)
  {
    if (a2)
    {
      unsigned int v10 = a4 + 2;
      if (a4 + 2 <= a3)
      {
        if (a6)
        {
          uint64_t v12 = a5;
          if (a5 || !*a6)
          {
            unsigned __int16 __dst = 0;
            cstdlib_memcpy(&__dst, (const void *)(a2 + a4), 2uLL);
            LODWORD(v14) = __dst;
            if (v10 + __dst <= a3)
            {
              if (*a6 <= __dst)
              {
                uint64_t v6 = 2317361161;
                if (*a6) {
                  *uint64_t v12 = 0;
                }
              }
              else
              {
                cstdlib_memcpy(v12, (const void *)(a2 + a4 + 2), __dst);
                uint64_t v6 = 0;
                uint64_t v14 = __dst;
                v12[__dst] = 0;
                if (*(_DWORD *)(a1 + 28) == 1 && v14)
                {
                  uint64_t v15 = v14;
                  do
                  {
                    *v12++ ^= 0xA9u;
                    --v15;
                  }
                  while (v15);
                  uint64_t v6 = 0;
                }
              }
            }
            else
            {
              uint64_t v6 = 2317361156;
            }
            *a6 = v14 + 1;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t ssftriff_reader_ReadWStringZ(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _WORD *__dst, unsigned int *a6)
{
  uint64_t result = 2317361159;
  if (a1)
  {
    if (a2)
    {
      if (a4 <= a3)
      {
        if (a6)
        {
          unsigned int v10 = *a6;
          if (__dst || !v10)
          {
            uint64_t v11 = (_WORD *)(a2 + a4);
            if (*(_DWORD *)(a1 + 28) == 1)
            {
              unsigned int v12 = 0;
              while ((unsigned __int16)v11[v12] != 43433)
              {
                if (a4 + 2 * (unint64_t)++v12 > a3) {
                  return 2317361156;
                }
              }
            }
            else
            {
              unsigned int v12 = 0;
              while (v11[v12])
              {
                if (a4 + 2 * (unint64_t)++v12 > a3) {
                  return 2317361156;
                }
              }
            }
            if (v12 + 1 <= v10)
            {
              cstdlib_memcpy(__dst, v11, 2 * v12);
              uint64_t result = 0;
              __dst[v12] = 0;
              if (*(_DWORD *)(a1 + 28) == 1 && v12 != 0)
              {
                uint64_t v14 = 0;
                do
                  *((unsigned char *)__dst + v14++) ^= 0xA9u;
                while (2 * (unint64_t)v12 > v14);
                uint64_t result = 0;
              }
            }
            else
            {
              uint64_t result = 2317361161;
              if (v10) {
                void *__dst = 0;
              }
            }
            *a6 = v12 + 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ssftriff_reader_ReadWStringW(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _WORD *a5, _DWORD *a6)
{
  uint64_t v6 = 2317361159;
  if (a1)
  {
    if (a2)
    {
      unsigned int v10 = a4 + 2;
      if (a4 + 2 <= a3)
      {
        if (a6)
        {
          unsigned int v12 = a5;
          if (a5 || !*a6)
          {
            unsigned __int16 __dst = 0;
            cstdlib_memcpy(&__dst, (const void *)(a2 + a4), 2uLL);
            LODWORD(v14) = __dst;
            size_t v15 = 2 * __dst;
            if (v15 + v10 <= a3)
            {
              if (*a6 <= __dst)
              {
                uint64_t v6 = 2317361161;
                if (*a6) {
                  *unsigned int v12 = 0;
                }
              }
              else
              {
                cstdlib_memcpy(v12, (const void *)(a2 + a4 + 2), v15);
                uint64_t v14 = __dst;
                v12[__dst] = 0;
                if (*(_DWORD *)(a1 + 28) == 1 && v14)
                {
                  int v16 = 0;
                  do
                  {
                    *(unsigned char *)v12 ^= 0xA9u;
                    unsigned int v12 = (_WORD *)((char *)v12 + 1);
                    ++v16;
                  }
                  while (2 * v14 > (unint64_t)(unsigned __int16)v16);
                }
                uint64_t v6 = 0;
              }
            }
            else
            {
              uint64_t v6 = 2317361156;
            }
            *a6 = v14 + 1;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t ssftriff_reader_Seek(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = 2317361159;
  uint64_t v16 = 0;
  if (a1)
  {
    if (vector_StackTop(*(void *)(a1 + 48), &v16)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = 2317361169;
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_Seek : Begin (%p, %d, %d, %s)", v7, v8, v9, a1);
    if (a3 == 1)
    {
      unsigned int v14 = *(_DWORD *)(a1 + 120) + a2;
      if (v14 < *(_DWORD *)(v16 + 8) || v14 > *(_DWORD *)(v16 + 12)) {
        goto LABEL_15;
      }
      *(_DWORD *)(a1 + 120) = v14;
    }
    else
    {
      if (a3 || (a2 & 0x80000000) != 0 || *(_DWORD *)(v16 + 8) > a2 || *(_DWORD *)(v16 + 12) < a2) {
        goto LABEL_15;
      }
      *(_DWORD *)(a1 + 120) = a2;
    }
    uint64_t v3 = v10;
LABEL_15:
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"RIFFREADER", 4, 0, (uint64_t)"ssftriff_reader_Seek : End (%x)", v11, v12, v13, v3);
  }
  return v3;
}

uint64_t ssftriff_reader_GetChunkDepth(uint64_t result)
{
  if (result) {
    return vector_GetSize(*(void *)(result + 48));
  }
  return result;
}

uint64_t ssftriff_reader_GetPosition(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 120);
  }
  return result;
}

uint64_t ssftriff_reader_GetEncryption(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 28);
  }
  return result;
}

uint64_t ssftriff_reader_GetAlignment(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 32);
  }
  return result;
}

uint64_t ssftriff_loc_DataUnmap(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t result = brk_DataUnmap(*(void *)(a1 + 24), v4, *(void *)(a2 + 32));
    }
    else
    {
      uint64_t result = *(void *)(a2 + 24);
      if (result) {
        uint64_t result = osspi_DataUnmap(result, *(void *)(a2 + 32));
      }
    }
  }
  if (*(void *)(a2 + 16) || *(void *)(a2 + 24))
  {
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  return result;
}

uint64_t stringmap_reader_ObjOpen(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, void *a5)
{
  uint64_t v55 = 0;
  uint64_t v6 = 2317361156;
  unsigned int v52 = 0;
  __src = 0;
  uint64_t result = 2317361159;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        char v54 = 0;
        *(_DWORD *)uint64_t __s1 = 0;
        *a5 = 0;
        uint64_t result = InitRsrcFunction(a1, a2, &v55);
        if ((result & 0x80000000) == 0)
        {
          log_OutText(*(void *)(v55 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjOpen : Begin (%s, %p)", v12, v13, v14, (uint64_t)a3);
          size_t v15 = (void *)heap_Calloc(*(void **)(v55 + 8), 1, 88);
          if (!v15)
          {
            log_OutPublic(*(void *)(v55 + 32), (uint64_t)"STRINGMAPREADER", 28000, 0, v16, v17, v18, v19, v50);
            return 2317361162;
          }
          int v20 = v15;
          void *v15 = a1;
          v15[1] = a2;
          uint64_t v21 = v55;
          long long v15[2] = v55;
          uint64_t v22 = *(void *)(v21 + 8);
          int v23 = cstdlib_strlen(a3);
          BOOL v24 = (char *)heap_Alloc(v22, (v23 + 1));
          v20[3] = v24;
          if (v24)
          {
            cstdlib_strcpy(v24, a3);
            uint64_t v29 = ssftriff_reader_OpenChunk(a4, (__int32 *)__s1, &v52, &__src);
            if ((v29 & 0x80000000) == 0)
            {
              if (cstdlib_strcmp(__s1, "STMC"))
              {
                uint64_t v41 = 28001;
LABEL_15:
                uint64_t v42 = *(void *)(v55 + 32);
LABEL_16:
                log_OutPublic(v42, (uint64_t)"STRINGMAPREADER", v41, (uint64_t)"%s%s%s%s", v37, v38, v39, v40, "file");
                ssftriff_reader_CloseChunk(a4);
                goto LABEL_17;
              }
              if (v52 <= 9)
              {
                uint64_t v41 = 28002;
                goto LABEL_15;
              }
              cstdlib_memcpy(v20 + 4, __src, 2uLL);
              __src = (char *)__src + 2;
              uint64_t v46 = (unsigned __int16 *)v20 + 18;
              cstdlib_memcpy((char *)v20 + 36, __src, 2uLL);
              __src = (char *)__src + 2;
              int v47 = (unsigned __int16 *)v20 + 19;
              cstdlib_memcpy((char *)v20 + 38, __src, 2uLL);
              __src = (char *)__src + 2;
              cstdlib_memcpy(v20 + 5, __src, 2uLL);
              __src = (char *)__src + 2;
              uint64_t v48 = v20 + 8;
              cstdlib_memcpy(v20 + 8, __src, 2uLL);
              ssftriff_reader_CloseChunk(a4);
              uint64_t v49 = ssftriff_reader_OpenChunk(a4, (__int32 *)__s1, &v52, &__src);
              if ((v49 & 0x80000000) == 0)
              {
                if (cstdlib_strcmp(__s1, "STMF"))
                {
                  uint64_t v41 = 28001;
LABEL_25:
                  uint64_t v42 = *(void *)(v55 + 32);
                  goto LABEL_16;
                }
                if (v52 < (*v47 + *v46) * *((unsigned __int16 *)v20 + 20))
                {
                  uint64_t v41 = 28002;
                  goto LABEL_25;
                }
                if ((ssftriff_reader_DetachChunkData(a4, (void **)v20 + 7, &__src) & 0x80000000) == 0) {
                  v20[6] = __src;
                }
                ssftriff_reader_CloseChunk(a4);
                if (!*v48) {
                  goto LABEL_39;
                }
                uint64_t v49 = ssftriff_reader_OpenChunk(a4, (__int32 *)__s1, &v52, &__src);
                if ((v49 & 0x80000000) == 0)
                {
                  if (cstdlib_strcmp(__s1, "STMR"))
                  {
                    uint64_t v41 = 28001;
LABEL_35:
                    uint64_t v42 = *(void *)(v55 + 32);
                    goto LABEL_16;
                  }
                  if (v52 < (*v47 + *v46) * (unsigned __int16)*v48)
                  {
                    uint64_t v41 = 28002;
                    goto LABEL_35;
                  }
                  if ((ssftriff_reader_DetachChunkData(a4, (void **)v20 + 10, &__src) & 0x80000000) == 0) {
                    v20[9] = __src;
                  }
                  ssftriff_reader_CloseChunk(a4);
LABEL_39:
                  *a5 = v20;
                  uint64_t v6 = v49;
                  goto LABEL_18;
                }
              }
              uint64_t v6 = v49;
              goto LABEL_17;
            }
            uint64_t v6 = v29;
          }
          else
          {
            log_OutPublic(*(void *)(v55 + 32), (uint64_t)"STRINGMAPREADER", 28000, 0, v25, v26, v27, v28, v50);
            uint64_t v6 = 2317361162;
          }
LABEL_17:
          stringmap_reader_ObjClose(v20, v30, v31, v32, v33, v34, v35, v36);
LABEL_18:
          log_OutText(*(void *)(v55 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjOpen : End (%x, %p)", v43, v44, v45, v6);
          return v6;
        }
      }
    }
  }
  return result;
}

uint64_t stringmap_reader_ObjClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 2317361159;
  }
  uint64_t v9 = a1[2];
  log_OutText(*(void *)(v9 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjClose : Begin (%p)", a6, a7, a8, (uint64_t)a1);
  uint64_t v13 = (void *)a1[7];
  if (v13)
  {
    int v14 = ssftriff_reader_ReleaseChunkData(v13);
    uint64_t v15 = v14 & (v14 >> 31);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (void *)a1[10];
  if (v16)
  {
    int v17 = ssftriff_reader_ReleaseChunkData(v16);
    if (v17 >= 0 || (int)v15 <= -1) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = v17;
    }
  }
  uint64_t v19 = a1[3];
  if (v19) {
    heap_Free(*(void **)(a1[2] + 8), v19);
  }
  if ((v15 & 0x80000000) == 0) {
    heap_Free(*(void **)(v9 + 8), (uint64_t)a1);
  }
  log_OutText(*(void *)(v9 + 32), (uint64_t)"STRINGMAPREADER", 4, 0, (uint64_t)"stringmap_reader_ObjClose : End (%x)", v10, v11, v12, v15);
  return v15;
}

uint64_t stringmap_reader_Map(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3 = 2317361159;
  if (a1 && __s2 && a3)
  {
    *a3 = 0;
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      uint64_t v3 = 2317361153;
      if (!*(_DWORD *)(a1 + 32)) {
        return stringmap_loc_Map(0, *(unsigned __int16 *)(a1 + 40), v5, *(unsigned __int16 *)(a1 + 36), *(_WORD *)(a1 + 38), __s2, a3);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v3;
}

uint64_t stringmap_loc_Map(int a1, int a2, uint64_t a3, unsigned int a4, __int16 a5, char *__s2, uint64_t *a7)
{
  if (!a2) {
    goto LABEL_16;
  }
  int v12 = 0;
  int v13 = a2 - 1;
  int v14 = (unsigned __int16)(a5 + a4);
  while (1)
  {
    int v15 = v13 + v12;
    if (v13 + v12 < 0 != __OFADD__(v13, v12)) {
      ++v15;
    }
    int v16 = v15 >> 1;
    int v17 = (v15 >> 1) * v14;
    uint64_t v18 = v17;
    if (a1)
    {
      int v19 = LH_wcscmp((_WORD *)(a3 + 2 * v17), (unsigned __int16 *)__s2);
      if (v19 < 0) {
        goto LABEL_10;
      }
    }
    else
    {
      int v19 = cstdlib_strcmp((const char *)(a3 + v17), __s2);
      if (v19 < 0)
      {
LABEL_10:
        int v12 = v16 + 1;
        goto LABEL_11;
      }
    }
    if (!v19) {
      break;
    }
    int v13 = v16 - 1;
LABEL_11:
    if (v12 > v13) {
      goto LABEL_16;
    }
  }
  uint64_t v20 = a3 + 2 * v18 + 2 * a4;
  if (!a1) {
    uint64_t v20 = a3 + v18 + a4;
  }
  *a7 = v20;
LABEL_16:
  if (*a7) {
    return 0;
  }
  else {
    return 2317361172;
  }
}

uint64_t stringmap_reader_ReverseMap(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3 = 2317361159;
  if (a1 && __s2 && a3)
  {
    *a3 = 0;
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5)
    {
      uint64_t v3 = 2317361153;
      if (!*(_DWORD *)(a1 + 32)) {
        return stringmap_loc_Map(0, *(unsigned __int16 *)(a1 + 64), v5, *(unsigned __int16 *)(a1 + 38), *(_WORD *)(a1 + 36), __s2, a3);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v3;
}

uint64_t stringmap_reader_WMap(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3 = 2317361159;
  if (a1 && __s2 && a3)
  {
    *a3 = 0;
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      uint64_t v3 = 2317361153;
      if (*(_DWORD *)(a1 + 32) == 1) {
        return stringmap_loc_Map(1, *(unsigned __int16 *)(a1 + 40), v5, *(unsigned __int16 *)(a1 + 36), *(_WORD *)(a1 + 38), __s2, a3);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v3;
}

uint64_t stringmap_reader_WReverseMap(uint64_t a1, char *__s2, uint64_t *a3)
{
  uint64_t v3 = 2317361159;
  if (a1 && __s2 && a3)
  {
    *a3 = 0;
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5)
    {
      uint64_t v3 = 2317361153;
      if (*(_DWORD *)(a1 + 32) == 1) {
        return stringmap_loc_Map(1, *(unsigned __int16 *)(a1 + 64), v5, *(unsigned __int16 *)(a1 + 38), *(_WORD *)(a1 + 36), __s2, a3);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v3;
}

uint64_t stringmap_reader_MapToken(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t v4 = 2317361159;
  if (a1 && a2 && a3 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      uint64_t v4 = 2317361153;
      if (!*(_DWORD *)(a1 + 32)) {
        return stringmap_loc_MapToken(0, *(unsigned __int16 *)(a1 + 40), v6, *(unsigned __int16 *)(a1 + 36), *(_WORD *)(a1 + 38), a2, a3, a4);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v4;
}

uint64_t stringmap_loc_MapToken(int a1, int a2, uint64_t a3, unsigned int a4, __int16 a5, unsigned __int16 *a6, unsigned __int16 *a7, uint64_t *a8)
{
  int v39 = 0;
  int v13 = a2 - 1;
  unsigned __int16 v14 = a5 + a4;
  int v37 = a2 - 1;
  if (a2)
  {
    int v15 = 0;
    while (1)
    {
      int v16 = v13 + v15;
      if (v13 + v15 < 0 != __OFADD__(v13, v15)) {
        ++v16;
      }
      LODWORD(v17) = v16 >> 1;
      int v18 = stringmap_loc_ElemCompare(a1, a3, v14, v16 >> 1, a6, &v39);
      if (v18) {
        break;
      }
      if (v39 < 0) {
        int v15 = v17 + 1;
      }
      if (v39 >= 1) {
        int v13 = v17 - 1;
      }
      if (v15 > v13)
      {
        uint64_t v19 = v15;
        goto LABEL_13;
      }
    }
LABEL_20:
    unsigned __int16 v23 = v18;
    uint64_t v34 = a8;
    uint64_t v35 = a7;
    if ((int)v17 < 1)
    {
      int v25 = v17;
    }
    else
    {
      unsigned int v24 = v17 + 1;
      int v25 = v17;
      do
      {
        if (!stringmap_loc_ElemsCompare(a1, a3, v14, v25, v24 - 2, &v39)) {
          break;
        }
        unsigned int v26 = stringmap_loc_ElemCompare(a1, a3, v14, v24 - 2, a6, &v39);
        if (v26 > v23)
        {
          int v25 = v24 - 2;
          unsigned __int16 v23 = v26;
        }
        --v24;
      }
      while (v24 > 1);
    }
    if ((int)v17 >= v37)
    {
      uint64_t v29 = v35;
    }
    else
    {
      int v28 = v17 + 1;
      uint64_t v29 = v35;
      do
      {
        if (!stringmap_loc_ElemsCompare(a1, a3, v14, v25, v28, &v39)) {
          break;
        }
        unsigned int v30 = stringmap_loc_ElemCompare(a1, a3, v14, v28, a6, &v39);
        if (v30 > v23)
        {
          int v25 = v28;
          unsigned __int16 v23 = v30;
        }
        ++v28;
      }
      while (a2 != v28);
    }
    uint64_t result = 0;
    int v31 = v25 * v14;
    uint64_t v32 = a3 + v31 + a4;
    uint64_t v33 = a3 + 2 * v31 + 2 * a4;
    if (!a1) {
      uint64_t v33 = v32;
    }
    *uint64_t v34 = v33;
    unsigned __int16 *v29 = v23;
  }
  else
  {
    uint64_t v19 = 0;
LABEL_13:
    uint64_t v20 = (v19 - 1) * v14;
    while (1)
    {
      uint64_t v17 = v19 - 1;
      if (v19 < 1) {
        return 2317361172;
      }
      if (a1)
      {
        int v21 = *(unsigned __int16 *)(a3 + 2 * v20);
        int v22 = *a6;
      }
      else
      {
        int v21 = *(unsigned __int8 *)(a3 + v20);
        int v22 = *(unsigned __int8 *)a6;
      }
      if (v21 != v22) {
        return 2317361172;
      }
      int v18 = stringmap_loc_ElemCompare(a1, a3, v14, (int)v19 - 1, a6, &v39);
      v20 -= v14;
      uint64_t v19 = v17;
      if (v18) {
        goto LABEL_20;
      }
    }
  }
  return result;
}

uint64_t stringmap_reader_WMapToken(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t v4 = 2317361159;
  if (a1 && a2 && a3 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      uint64_t v4 = 2317361153;
      if (*(_DWORD *)(a1 + 32) == 1) {
        return stringmap_loc_MapToken(1, *(unsigned __int16 *)(a1 + 40), v6, *(unsigned __int16 *)(a1 + 36), *(_WORD *)(a1 + 38), a2, a3, a4);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v4;
}

uint64_t stringmap_reader_ReverseMapToken(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t v4 = 2317361159;
  if (a1 && a2 && a3 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    if (*(void *)(a1 + 72))
    {
      uint64_t v4 = 2317361153;
      if (!*(_DWORD *)(a1 + 32)) {
        return stringmap_loc_MapToken(0, *(unsigned __int16 *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int16 *)(a1 + 38), *(_WORD *)(a1 + 36), a2, a3, a4);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v4;
}

uint64_t stringmap_reader_WReverseMapToken(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  uint64_t v4 = 2317361159;
  if (a1 && a2 && a3 && a4)
  {
    *a3 = 0;
    *a4 = 0;
    if (*(void *)(a1 + 72))
    {
      uint64_t v4 = 2317361153;
      if (*(_DWORD *)(a1 + 32) == 1) {
        return stringmap_loc_MapToken(1, *(unsigned __int16 *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int16 *)(a1 + 38), *(_WORD *)(a1 + 36), a2, a3, a4);
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return v4;
}

uint64_t stringmap_reader_MapGetRawData(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t result = 2317361159;
  if (a1 && a2 && a3)
  {
    *a2 = 0;
    *a3 = 0;
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      uint64_t result = 2317361153;
      if (!*(_DWORD *)(a1 + 32))
      {
        uint64_t result = 0;
        *a2 = (*(unsigned __int16 *)(a1 + 38) + *(unsigned __int16 *)(a1 + 36)) * *(unsigned __int16 *)(a1 + 40);
        *a3 = v5;
      }
    }
    else
    {
      return 2317361153;
    }
  }
  return result;
}

uint64_t stringmap_loc_ElemCompare(int a1, uint64_t a2, int a3, int a4, unsigned __int16 *a5, int *a6)
{
  uint64_t v6 = a3 * a4;
  if (a1) {
    return stringmap_loc_WCompare((_WORD *)(a2 + 2 * v6), a5, a6);
  }
  else {
    return stringmap_loc_Compare((unsigned __int8 *)(a2 + v6), (unsigned __int8 *)a5, a6);
  }
}

uint64_t stringmap_loc_ElemsCompare(int a1, uint64_t a2, int a3, int a4, int a5, int *a6)
{
  uint64_t v6 = a3 * (uint64_t)a4;
  uint64_t v7 = a3 * (uint64_t)a5;
  if (a1) {
    return stringmap_loc_WCompare((_WORD *)(a2 + 2 * v6), (unsigned __int16 *)(a2 + 2 * v7), a6);
  }
  else {
    return stringmap_loc_Compare((unsigned __int8 *)(a2 + v6), (unsigned __int8 *)(a2 + v7), a6);
  }
}

uint64_t stringmap_loc_WCompare(_WORD *a1, unsigned __int16 *a2, _DWORD *a3)
{
  int v3 = (unsigned __int16)*a1;
  int v4 = *a2;
  if (*a1) {
    BOOL v5 = v3 == v4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v8 = a2 + 1;
    uint64_t v7 = a1;
    do
    {
      int v9 = (unsigned __int16)v7[1];
      ++v7;
      int v3 = v9;
      int v11 = *v8++;
      int v10 = v11;
      if (v3) {
        BOOL v12 = v3 == v10;
      }
      else {
        BOOL v12 = 0;
      }
    }
    while (v12);
    int v6 = v3 - v10;
  }
  else
  {
    int v6 = v3 - v4;
    LODWORD(v7) = a1;
  }
  *a3 = v6;
  unsigned int v13 = (v7 - a1) >> 1;
  if (v3) {
    return 0;
  }
  else {
    return (unsigned __int16)v13;
  }
}

uint64_t stringmap_loc_Compare(unsigned __int8 *a1, unsigned __int8 *a2, int *a3)
{
  int v3 = a1;
  int v4 = *a1 - *a2;
  *a3 = v4;
  if (!v4)
  {
    BOOL v5 = a2 + 1;
    int v3 = a1;
    do
    {
      if (!*v3) {
        break;
      }
      int v7 = *++v3;
      int v6 = v7;
      int v8 = *v5++;
      int v9 = v6 - v8;
      *a3 = v9;
    }
    while (!v9);
  }
  int v10 = *v3;
  unsigned __int16 v11 = (_WORD)v3 - (_WORD)a1;
  if (v10) {
    return 0;
  }
  return v11;
}

uint64_t InitRsrcFunction(_WORD *a1, int a2, void *a3)
{
  uint64_t NullHandle = safeh_GetNullHandle();
  if (safeh_HandlesEqual((uint64_t)a1, a2, NullHandle, v7))
  {
    uint64_t v8 = 0;
    goto LABEL_3;
  }
  uint64_t v8 = 2170560520;
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 7777, 416);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8) {
      uint64_t v8 = 2170560520;
    }
    else {
      uint64_t v8 = result;
    }
    goto LABEL_3;
  }
  *a3 = a1;
  if (!a1 || *a1 != 7777)
  {
LABEL_3:
    *a3 = &g_NullResource;
    return v8;
  }
  return result;
}

uint64_t rsrc_Open(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2170560518;
  if (a5)
  {
    uint64_t v11 = heap_Calloc(a1, 416, 1);
    if (v11)
    {
      uint64_t v5 = 0;
      *(void *)a5 = v11;
      *(_DWORD *)(a5 + 8) = 7777;
      *(_WORD *)uint64_t v11 = 7777;
      *(void *)(v11 + 8) = a1;
      *(void *)(v11 + 16) = a2;
      *(void *)(v11 + 24) = a3;
      *(void *)(v11 + 32) = a4;
    }
    else
    {
      FreeRsrc(0);
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      return 2170560522;
    }
  }
  return v5;
}

void *FreeRsrc(void *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = (void *)result[1];
    cstdlib_memset(result, 0, 0x1A0uLL);
    return heap_Free(v2, v1);
  }
  return result;
}

uint64_t rsrc_Close(_WORD *a1, int a2)
{
  int v4 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v4);
  if ((inited & 0x80000000) == 0) {
    FreeRsrc(v4);
  }
  return inited;
}

uint64_t Utf8_DepesLengthInBytesUtf8(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = a2;
  do
  {
    unsigned int v6 = *a1++;
    uint64_t v5 = v6;
    if (v6 <= 0xAFuLL)
    {
      unsigned int v7 = UNICODE_TO_DEPES[v5];
      if (v7 < 0x800) {
        int v8 = 2;
      }
      else {
        int v8 = 3;
      }
      if (v7 < 0x80) {
        int v9 = 1;
      }
      else {
        int v9 = v8;
      }
      uint64_t result = (v9 + result);
    }
    --v4;
  }
  while (v4);
  return result;
}

uint64_t utf8_DepesToUtf8(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, unsigned int *a6, _DWORD *a7)
{
  unsigned int v7 = 0;
  int v8 = 0;
  unsigned int v9 = 0;
  LODWORD(v10) = 0;
  if (a2 && a5)
  {
    unint64_t v10 = 0;
    unsigned int v7 = 0;
    do
    {
      if (a7)
      {
        *a7 = v10;
        a7[1] = v7;
        a7 += 2;
      }
      unint64_t v11 = *(unsigned __int8 *)(a1 + v10);
      if (v11 <= 0xAF)
      {
        unsigned int v12 = UNICODE_TO_DEPES[v11];
        if (v12 < 0x800) {
          int v13 = 2;
        }
        else {
          int v13 = 3;
        }
        if (v12 < 0x80) {
          unsigned int v14 = 1;
        }
        else {
          unsigned int v14 = v13;
        }
        if (v14 + v7 > a5)
        {
          LODWORD(v10) = v10 + 1;
          *(unsigned char *)(a4 + v7) = 0;
          int v8 = 1;
          unsigned int v9 = -1950343159;
          goto LABEL_24;
        }
        if (v14 != 1)
        {
          if (v14 != 2)
          {
            *(unsigned char *)(a4 + v7 + 2) = v12 & 0x3F | 0x80;
            v12 >>= 6;
          }
          *(unsigned char *)(a4 + v7 + 1) = v12 & 0x3F | 0x80;
          v12 >>= 6;
        }
        *(unsigned char *)(a4 + v7) = UTF8_FIRST_BYTE_MARK[v14] | v12;
        v7 += v14;
      }
      ++v10;
    }
    while (v10 < a2 && v7 < a5);
    int v8 = 0;
    unsigned int v9 = 0;
    if (a3) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_24:
    if (a3) {
LABEL_25:
    }
      *a3 = v10;
  }
  if (a6) {
    *a6 = v7;
  }
  if (v10 == a2) {
    int v15 = 1;
  }
  else {
    int v15 = v8;
  }
  if (v15) {
    return v9;
  }
  else {
    return 2344624137;
  }
}

uint64_t utf8_Utf8ToDepes(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, unsigned int *a6, unsigned int *a7)
{
  unsigned int v7 = 0;
  BOOL v8 = 0;
  unsigned int v9 = 0;
  LODWORD(v10) = 0;
  if (!a2 || !a5)
  {
LABEL_39:
    if (!a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  unsigned int v7 = 0;
  unsigned int v11 = 0;
  while (2)
  {
    int v12 = *(unsigned __int8 *)(a1 + v11);
    uint64_t v13 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v11)];
    BOOL v8 = v11 + v13 <= a2;
    if (v11 + v13 > a2)
    {
      unsigned int v9 = 197140487;
LABEL_38:
      *(unsigned char *)(a4 + v7) = 0;
      LODWORD(v10) = v11;
      goto LABEL_39;
    }
    if ((UTF8_BYTE_INDICATOR_TEST[v13] & v12) != UTF8_BYTE_INDICATOR[v13])
    {
      unsigned int v9 = -1950342907;
      goto LABEL_38;
    }
    if (a7)
    {
      *a7 = v11;
      a7[1] = v7;
      a7 += 2;
      int v12 = *(unsigned __int8 *)(a1 + v11);
    }
    uint64_t v10 = v11 + 1;
    switch((int)v13)
    {
      case 0:
        goto LABEL_27;
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v10);
        if ((v14 & 0xC0) != 0x80) {
          goto LABEL_35;
        }
        LODWORD(v10) = v11 + 2;
        int v12 = v14 + (v12 << 6);
        goto LABEL_27;
      case 2:
        unsigned int v15 = *(unsigned __int8 *)(a1 + v10);
        if (v12 == 224 && v15 < 0xA0) {
          goto LABEL_35;
        }
        if ((v15 & 0xC0) != 0x80) {
          goto LABEL_35;
        }
        int v16 = *(unsigned __int8 *)(a1 + v11 + 2);
        if ((v16 & 0xC0) != 0x80) {
          goto LABEL_35;
        }
        LODWORD(v10) = v11 + 3;
        int v12 = (v15 << 6) + (v12 << 12) + v16;
        goto LABEL_27;
      case 3:
        if (v12 == 240)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 < 0x90) {
            goto LABEL_35;
          }
        }
        else if (v12 == 244)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 > 0x8F) {
            goto LABEL_35;
          }
        }
        else
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v17 & 0xC0) != 0x80
          || (int v18 = *(unsigned __int8 *)(a1 + v11 + 2), (v18 & 0xC0) != 0x80)
          || (int v19 = *(unsigned __int8 *)(a1 + v11 + 3), (v19 & 0xC0) != 0x80))
        {
LABEL_35:
          unsigned int v9 = -1950342907;
          ++v11;
          goto LABEL_38;
        }
        LODWORD(v10) = v11 + 4;
        int v12 = v19 + (((v17 << 6) + (v12 << 12) + v18) << 6);
LABEL_27:
        uint64_t v20 = 0;
        int v21 = v12 - UTF8_OFFSETS[v13];
        while (v21 != UNICODE_TO_DEPES[v20])
        {
          if (++v20 == 176) {
            goto LABEL_32;
          }
        }
        *(unsigned char *)(a4 + v7++) = v20;
LABEL_32:
        BOOL v8 = 0;
        if (v10 < a2)
        {
          unsigned int v11 = v10;
          unsigned int v9 = 0;
          if (v7 >= a5) {
            goto LABEL_39;
          }
          continue;
        }
        unsigned int v9 = 0;
        if (a3) {
LABEL_40:
        }
          *a3 = v10;
LABEL_41:
        if (a6) {
          *a6 = v7;
        }
        if (v10 == a2 || v8) {
          return v9;
        }
        else {
          return 2344624137;
        }
      default:
        goto LABEL_35;
    }
  }
}

uint64_t utf8_Utf8ToUtf16(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, _DWORD *a6, unsigned int *a7)
{
  BOOL v7 = 0;
  LODWORD(v8) = 0;
  if (!a2)
  {
    unsigned int v9 = 0;
    LODWORD(v10) = 0;
    if (!a3) {
      goto LABEL_46;
    }
LABEL_45:
    *a3 = v10;
    goto LABEL_46;
  }
  unsigned int v9 = 0;
  LODWORD(v10) = 0;
  if (!a5) {
    goto LABEL_44;
  }
  unint64_t v8 = 0;
  unsigned int v11 = 0;
  while (2)
  {
    int v12 = *(unsigned __int8 *)(a1 + v11);
    uint64_t v13 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v11)];
    BOOL v7 = v11 + v13 <= a2;
    if (v11 + v13 > a2)
    {
      unsigned int v9 = 197140487;
      goto LABEL_43;
    }
    if ((UTF8_BYTE_INDICATOR_TEST[v13] & v12) != UTF8_BYTE_INDICATOR[v13])
    {
      unsigned int v9 = -1950342907;
      goto LABEL_43;
    }
    if (a7)
    {
      *a7 = v11;
      a7[1] = v11;
      a7 += 2;
      int v12 = *(unsigned __int8 *)(a1 + v11);
    }
    uint64_t v10 = v11 + 1;
    switch((int)v13)
    {
      case 0:
        goto LABEL_27;
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v10);
        if ((v14 & 0xC0) != 0x80) {
          goto LABEL_39;
        }
        LODWORD(v10) = v11 + 2;
        int v12 = v14 + (v12 << 6);
        goto LABEL_27;
      case 2:
        unsigned int v15 = *(unsigned __int8 *)(a1 + v10);
        if (v12 == 224 && v15 < 0xA0) {
          goto LABEL_39;
        }
        if ((v15 & 0xC0) != 0x80) {
          goto LABEL_39;
        }
        int v16 = *(unsigned __int8 *)(a1 + v11 + 2);
        if ((v16 & 0xC0) != 0x80) {
          goto LABEL_39;
        }
        LODWORD(v10) = v11 + 3;
        int v12 = (v15 << 6) + (v12 << 12) + v16;
        goto LABEL_27;
      case 3:
        if (v12 == 240)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 < 0x90) {
            goto LABEL_39;
          }
        }
        else if (v12 == 244)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + v10);
          if (v17 > 0x8F) {
            goto LABEL_39;
          }
        }
        else
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v17 & 0xC0) != 0x80
          || (int v18 = *(unsigned __int8 *)(a1 + v11 + 2), (v18 & 0xC0) != 0x80)
          || (int v19 = *(unsigned __int8 *)(a1 + v11 + 3), (v19 & 0xC0) != 0x80))
        {
LABEL_39:
          unsigned int v9 = -1950342907;
          goto LABEL_40;
        }
        LODWORD(v10) = v11 + 4;
        int v12 = v19 + (((v17 << 6) + (v12 << 12) + v18) << 6);
LABEL_27:
        unsigned int v20 = v12 - UTF8_OFFSETS[v13];
        if (HIWORD(v20))
        {
          if (HIWORD(v20) > 0x10u) {
            goto LABEL_34;
          }
          unint64_t v21 = v8 + 1;
          if (v8 + 1 >= a5)
          {
            unsigned int v9 = -1950343159;
LABEL_40:
            unsigned int v11 = v10;
LABEL_43:
            *(_WORD *)(a4 + 2 * v8) = 0;
            LODWORD(v10) = v11;
LABEL_44:
            if (!a3) {
              goto LABEL_46;
            }
            goto LABEL_45;
          }
          *(_WORD *)(a4 + 2 * v8) = ((v20 + 67043328) >> 10) - 10240;
          LOWORD(v20) = v20 & 0x3FF | 0xDC00;
          uint64_t v22 = 2;
        }
        else
        {
          if (v20 >> 11 == 27) {
            goto LABEL_34;
          }
          unint64_t v21 = v8;
          uint64_t v22 = 1;
        }
        *(_WORD *)(a4 + 2 * v21) = v20;
        v8 += v22;
LABEL_34:
        BOOL v7 = 0;
        if (v10 < a2)
        {
          unsigned int v11 = v10;
          unsigned int v9 = 0;
          if (v8 >= a5) {
            goto LABEL_44;
          }
          continue;
        }
        unsigned int v9 = 0;
        if (a3) {
          goto LABEL_45;
        }
LABEL_46:
        if (a6) {
          *a6 = v8;
        }
        if (v10 == a2 || v7) {
          return v9;
        }
        else {
          return 2344624137;
        }
      default:
        goto LABEL_39;
    }
  }
}

uint64_t utf8_Utf8To16bit(const char *a1, uint64_t a2)
{
  unsigned int v6 = 0;
  int v4 = cstdlib_strlen(a1);
  utf8_Utf8ToUtf16((uint64_t)a1, v4 + 1, 0, a2, 0xFFFFFFFF, &v6, 0);
  return v6;
}

uint64_t utf8_Utf16ToUtf8(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, unsigned int *a6, _DWORD *a7)
{
  unsigned int v7 = 0;
  int v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  if (!a2 || !a5) {
    goto LABEL_31;
  }
  unsigned int v11 = 0;
  unsigned int v10 = 0;
  while (2)
  {
    unsigned int v12 = *(unsigned __int16 *)(a1 + 2 * v10);
    int v13 = v12 & 0xFC00;
    if (v13 != 55296) {
      goto LABEL_7;
    }
    int v14 = *(unsigned __int16 *)(a1 + 2 * (v10 + 1));
    if ((v14 & 0xFC00) != 0xDC00)
    {
LABEL_29:
      unsigned int v9 = -1950342907;
LABEL_30:
      *(unsigned char *)(a4 + v11) = 0;
      int v8 = 1;
      unsigned int v7 = v11;
LABEL_31:
      if (!a3) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    unsigned int v12 = v14 + (v12 << 10) - 56613888;
    v10 += 2;
LABEL_7:
    if (v12 < 0x10000) {
      int v15 = 3;
    }
    else {
      int v15 = 4;
    }
    if (v12 < 0x800) {
      int v15 = 2;
    }
    if (v12 >= 0x80) {
      int v16 = v15;
    }
    else {
      int v16 = 1;
    }
    unsigned int v7 = v16 + v11;
    if (v16 + v11 > a5)
    {
      unsigned int v9 = -1950343159;
      goto LABEL_30;
    }
    if (a7)
    {
      int v17 = v16;
      do
      {
        *a7++ = 2 * v10;
        --v17;
      }
      while (v17);
    }
    if (v13 != 55296) {
      unsigned int v12 = *(unsigned __int16 *)(a1 + 2 * v10++);
    }
    switch(v16)
    {
      case 1:
        goto LABEL_25;
      case 2:
        goto LABEL_24;
      case 3:
        goto LABEL_23;
      case 4:
        *(unsigned char *)(a4 + v11 + 3) = v12 & 0x3F | 0x80;
        v12 >>= 6;
LABEL_23:
        *(unsigned char *)(a4 + v11 + 2) = v12 & 0x3F | 0x80;
        v12 >>= 6;
LABEL_24:
        *(unsigned char *)(a4 + v11 + 1) = v12 & 0x3F | 0x80;
        v12 >>= 6;
LABEL_25:
        int v8 = 0;
        *(unsigned char *)(a4 + v11) = UTF8_FIRST_BYTE_MARK[v16] | v12;
        if (v10 < a2)
        {
          v11 += v16;
          unsigned int v9 = 0;
          if (v7 >= a5) {
            goto LABEL_31;
          }
          continue;
        }
        unsigned int v9 = 0;
        if (a3) {
LABEL_32:
        }
          *a3 = 2 * v10;
LABEL_33:
        if (a6) {
          *a6 = v7;
        }
        if (v10 == a2) {
          int v18 = 1;
        }
        else {
          int v18 = v8;
        }
        if (v18) {
          return v9;
        }
        else {
          return 2344624137;
        }
      default:
        goto LABEL_29;
    }
  }
}

uint64_t utf8_16bitToUtf8(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = 0;
  int v4 = LH_wcslen(a1);
  utf8_Utf16ToUtf8(a1, v4 + 1, 0, a2, 0xFFFFFFFF, &v6, 0);
  return v6;
}

uint64_t Utf8_Utf8NbrOfSymbols(const char *a1)
{
  uint64_t v1 = a1;
  int v2 = *(unsigned __int8 *)a1;
  int v3 = cstdlib_strlen(a1);
  if (!v2) {
    return 1;
  }
  int v4 = &v1[v3];
  uint64_t v5 = 2;
  do
  {
    uint64_t result = v5;
    v1 += UTF8_TRAILING_BYTES[v2] + 1;
    if (v1 >= v4) {
      break;
    }
    int v2 = *(unsigned __int8 *)v1;
    uint64_t v5 = (v5 + 1);
  }
  while (*v1);
  return result;
}

uint64_t Utf8_LengthInBytes(unsigned __int8 *a1, int a2)
{
  LODWORD(v2) = a1;
  if (a2 >= 1)
  {
    int v2 = a1;
    do
    {
      v2 += UTF8_BYTES[*v2];
      --a2;
    }
    while (a2);
  }
  return (v2 - a1);
}

unint64_t Utf8_LengthInUtf8chars(unint64_t result, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  int v2 = (unsigned __int8 *)result;
  int v3 = 0;
  LODWORD(result) = 0;
  do
  {
    uint64_t v4 = UTF8_BYTES[*v2];
    v2 += v4;
    v3 += v4;
    uint64_t result = (result + 1);
  }
  while (v3 < a2);
  return result;
}

uint64_t utf8_16BitNbrOfUtf8Chars(uint64_t result)
{
  unsigned int v1 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result) {
    return 1;
  }
  int v2 = (unsigned __int16 *)(result + 2);
  LODWORD(result) = 1;
  do
  {
    if (v1 < 0x800) {
      int v3 = 2;
    }
    else {
      int v3 = 3;
    }
    if (v1 < 0x80) {
      int v4 = 1;
    }
    else {
      int v4 = v3;
    }
    uint64_t result = (v4 + result);
    unsigned int v5 = *v2++;
    unsigned int v1 = v5;
  }
  while (v5);
  return result;
}

uint64_t utf8_CheckValid(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (a2)
    {
      for (unsigned int i = 0; i < a2; i += v6)
      {
        uint64_t v3 = *(unsigned __int8 *)result;
        if (!*(unsigned char *)result) {
          return 1;
        }
        if ((v3 & UTF8_BYTE_INDICATOR_TEST[UTF8_TRAILING_BYTES[v3]]) != UTF8_BYTE_INDICATOR[UTF8_TRAILING_BYTES[v3]]
          || i + UTF8_TRAILING_BYTES[v3] >= a2)
        {
          return 0;
        }
        if (v3 > 0xC1)
        {
          if (v3 > 0xDF)
          {
            if (v3 == 224)
            {
              if ((*(unsigned char *)(result + 1) & 0xE0) != 0xA0) {
                return 0;
              }
              goto LABEL_24;
            }
            if ((v3 < 0xED || (v3 & 0xFE) == 0xEE)
              && *(char *)(result + 1) <= -65
              && *(char *)(result + 2) < -64)
            {
              goto LABEL_25;
            }
            if (v3 == 240)
            {
              if ((*(unsigned char *)(result + 1) + 112) > 0x2Fu) {
                return 0;
              }
            }
            else
            {
              if (v3 == 237)
              {
                if (*(char *)(result + 1) > -97) {
                  return 0;
                }
LABEL_24:
                if (*(char *)(result + 2) >= -64) {
                  return 0;
                }
LABEL_25:
                uint64_t v5 = 3;
                int v6 = 3;
                goto LABEL_36;
              }
              if ((v3 + 15) > 2u)
              {
                if (v3 != 244 || *(char *)(result + 1) > -113) {
                  return 0;
                }
              }
              else if (*(char *)(result + 1) > -65)
              {
                return 0;
              }
            }
            if (*(char *)(result + 2) > -65 || *(char *)(result + 3) >= -64) {
              return 0;
            }
            uint64_t v5 = 4;
            int v6 = 4;
          }
          else
          {
            if (*(char *)(result + 1) >= -64) {
              return 0;
            }
            uint64_t v5 = 2;
            int v6 = 2;
          }
        }
        else
        {
          uint64_t v5 = 1;
          int v6 = 1;
        }
LABEL_36:
        result += v5;
      }
    }
    return 1;
  }
  return result;
}

uint64_t utf8_Utf8CharTo16bit(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = UTF8_TRAILING_BYTES[*a1];
  if ((int)utf8_Utf8ToUtf16((uint64_t)a1, v2 + 1, 0, a2, 1u, 0, 0) >= 0) {
    return (v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t utf8_Utf8CharTo32bit(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = UTF8_TRAILING_BYTES[*a1];
  if ((int)utf8_Utf8ToUtf32((uint64_t)a1, v2 + 1, 0, a2, 1u, 0, 0) >= 0) {
    return (v2 + 1);
  }
  else {
    return 0;
  }
}

uint64_t utf8_Utf8ToUtf32(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, unsigned int a5, _DWORD *a6, unsigned int *a7)
{
  LODWORD(v7) = 0;
  int v8 = 0;
  unsigned int v9 = 0;
  LODWORD(v10) = 0;
  if (!a2 || !a5)
  {
LABEL_39:
    if (!a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  unint64_t v7 = 0;
  unsigned int v11 = 0;
  unsigned int v9 = -1950342907;
  while (1)
  {
    int v12 = *(unsigned __int8 *)(a1 + v11);
    uint64_t v13 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v11)];
    if (v11 + v13 > a2)
    {
      int v8 = 0;
      *(_DWORD *)(a4 + 4 * v7) = 0;
      unsigned int v9 = 197140487;
      LODWORD(v10) = v11;
      goto LABEL_39;
    }
    if ((UTF8_BYTE_INDICATOR_TEST[v13] & v12) != UTF8_BYTE_INDICATOR[v13]) {
      break;
    }
    if (a7)
    {
      *a7 = v11;
      a7[1] = v11;
      a7 += 2;
      int v12 = *(unsigned __int8 *)(a1 + v11);
    }
    uint64_t v10 = v11 + 1;
    switch((int)v13)
    {
      case 0:
        goto LABEL_32;
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v10);
        if ((v14 & 0xC0) != 0x80) {
          goto LABEL_36;
        }
        LODWORD(v10) = v11 + 2;
        int v12 = v14 + (v12 << 6);
        goto LABEL_32;
      case 2:
        if (v12 == 224)
        {
          unsigned int v15 = *(unsigned __int8 *)(a1 + v10);
          if (v15 < 0xA0) {
            goto LABEL_36;
          }
        }
        else if (v12 == 237)
        {
          unsigned int v15 = *(unsigned __int8 *)(a1 + v10);
          if (v15 >= 0xA0) {
            goto LABEL_36;
          }
        }
        else
        {
          unsigned int v15 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v15 & 0xC0) != 0x80) {
          goto LABEL_36;
        }
        int v17 = *(unsigned __int8 *)(a1 + v11 + 2);
        if ((v17 & 0xC0) != 0x80) {
          goto LABEL_36;
        }
        LODWORD(v10) = v11 + 3;
        int v12 = (v15 << 6) + (v12 << 12) + v17;
        goto LABEL_32;
      case 3:
        if (v12 == 240)
        {
          unsigned int v16 = *(unsigned __int8 *)(a1 + v10);
          if (v16 < 0x90) {
            goto LABEL_36;
          }
        }
        else if (v12 == 244)
        {
          unsigned int v16 = *(unsigned __int8 *)(a1 + v10);
          if (v16 >= 0x90) {
            goto LABEL_36;
          }
        }
        else
        {
          unsigned int v16 = *(unsigned __int8 *)(a1 + v10);
        }
        if ((v16 & 0xC0) != 0x80
          || (int v18 = *(unsigned __int8 *)(a1 + v11 + 2), (v18 & 0xC0) != 0x80)
          || (int v19 = *(unsigned __int8 *)(a1 + v11 + 3), (v19 & 0xC0) != 0x80))
        {
LABEL_36:
          *(_DWORD *)(a4 + 4 * v7) = 0;
          int v8 = 1;
          if (!a3) {
            goto LABEL_41;
          }
LABEL_40:
          *a3 = v10;
          goto LABEL_41;
        }
        LODWORD(v10) = v11 + 4;
        int v12 = v19 + (((v16 << 6) + (v12 << 12) + v18) << 6);
LABEL_32:
        *(_DWORD *)(a4 + 4 * v7++) = v12 - UTF8_OFFSETS[v13];
        if (v10 >= a2 || (unsigned int v11 = v10, v7 >= a5))
        {
          int v8 = 0;
          unsigned int v9 = 0;
          if (!a3) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        break;
      default:
        goto LABEL_36;
    }
  }
  *(_DWORD *)(a4 + 4 * v7) = 0;
  int v8 = 1;
  LODWORD(v10) = v11;
  if (a3) {
    goto LABEL_40;
  }
LABEL_41:
  if (a6) {
    *a6 = v7;
  }
  if (v10 == a2) {
    int v8 = 1;
  }
  if (v8) {
    return v9;
  }
  else {
    return 2344624137;
  }
}

uint64_t utf8_utf8stolh_u16(const char *a1, uint64_t a2)
{
  unsigned int v6 = 0;
  int v4 = cstdlib_strlen(a1);
  utf8_Utf8ToUtf16((uint64_t)a1, v4 + 1, 0, a2, 0xFFFFFFFF, &v6, 0);
  return v6;
}

uint64_t utf8_Utf8ToUtf32_Tolerant(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  LODWORD(v5) = 0;
  if (a2 && a4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      unsigned int v7 = *(unsigned __int8 *)(a1 + v6);
      uint64_t v8 = UTF8_TRAILING_BYTES[*(unsigned __int8 *)(a1 + v6++)];
      int v9 = v7 & ~UTF8_BYTE_INDICATOR[v8];
      if (v7 >= 0xC2)
      {
        if (v8 <= 1) {
          LODWORD(v8) = 1;
        }
        do
        {
          v9 <<= 6;
          if (v6 < a2)
          {
            char v10 = *(unsigned char *)(a1 + v6++);
            v9 |= v10 & 0x3F;
          }
          LODWORD(v8) = v8 - 1;
        }
        while (v8);
      }
      *(_DWORD *)(a3 + 4 * v5++) = v9;
    }
    while (v6 < a2 && v5 < a4);
  }
  if (a5) {
    *a5 = v5;
  }
  return 0;
}

uint64_t Utf32SymToUtf8Sym(unsigned int a1, unsigned char *a2, unsigned int a3)
{
  uint64_t result = 2344624137;
  if (a3 >= 5)
  {
    if (a1 <= 0x7F)
    {
      uint64_t result = 0;
      *a2 = a1;
      a2[1] = 0;
      return result;
    }
    if (a1 <= 0x7FF)
    {
      uint64_t result = 0;
      a2[2] = 0;
      a2[1] = a1 & 0x3F | 0x80;
      int v5 = (a1 >> 6) | 0xC0;
LABEL_10:
      *a2 = v5;
      return result;
    }
    if (!HIWORD(a1))
    {
      uint64_t result = 0;
      a2[3] = 0;
      a2[2] = a1 & 0x3F | 0x80;
      a2[1] = (a1 >> 6) & 0x3F | 0x80;
      int v5 = (a1 >> 12) - 32;
      goto LABEL_10;
    }
    if (HIWORD(a1) <= 0x10u)
    {
      uint64_t result = 0;
      a2[4] = 0;
      a2[3] = a1 & 0x3F | 0x80;
      a2[2] = (a1 >> 6) & 0x3F | 0x80;
      a2[1] = (a1 >> 12) & 0x3F | 0x80;
      int v5 = (a1 >> 18) - 16;
      goto LABEL_10;
    }
    *a2 = 0;
    return 2344624389;
  }
  return result;
}

uint64_t utf8_Utf32ToUtf8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  *a5 = 0;
  if (a2)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    uint64_t result = 2344624137;
    do
    {
      unsigned int v9 = *(_DWORD *)(a1 + 4 * v6);
      if (v9 > 0x7F)
      {
        if (v9 > 0x7FF)
        {
          if (HIWORD(v9))
          {
            if (HIWORD(v9) > 0x10u) {
              return 2344624389;
            }
            char v17 = v9 & 0x3F | 0x80;
            char v16 = (v9 >> 6) & 0x3F | 0x80;
            char v15 = (v9 >> 12) & 0x3F | 0x80;
            char v14 = (v9 >> 18) - 16;
            unsigned int v10 = 4;
          }
          else
          {
            char v16 = v9 & 0x3F | 0x80;
            char v15 = (v9 >> 6) & 0x3F | 0x80;
            char v14 = (v9 >> 12) - 32;
            unsigned int v10 = 3;
          }
        }
        else
        {
          char v15 = v9 & 0x3F | 0x80;
          char v14 = (v9 >> 6) | 0xC0;
          unsigned int v10 = 2;
        }
      }
      else
      {
        char v14 = *(_DWORD *)(a1 + 4 * v6);
        unsigned int v10 = 1;
      }
      if (v10 + v7 > a4) {
        return result;
      }
      uint64_t v11 = v10;
      int v12 = &v14;
      do
      {
        char v13 = *v12++;
        *(unsigned char *)(a3 + v7++) = v13;
        --v11;
      }
      while (v11);
      *a5 += v10;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t utf8_utf8stolh_u32(const char *a1, uint64_t a2)
{
  unsigned int v6 = 0;
  int v4 = cstdlib_strlen(a1);
  utf8_Utf8ToUtf32((uint64_t)a1, v4 + 1, 0, a2, 0xFFFFFFFF, &v6, 0);
  return v6;
}

uint64_t utf8_determineUTF8CharLength(unsigned int a1)
{
  uint64_t result = 0;
  if (a1 <= 0xF5 && (a1 + 62) <= 0xFDu) {
    return UTF8_TRAILING_BYTES[a1] + 1;
  }
  return result;
}

uint64_t utf8_getUTF8Char(uint64_t a1, unsigned int a2, unsigned char *a3)
{
  unint64_t v3 = *(unsigned __int8 *)(a1 + a2);
  uint64_t v4 = 2344624389;
  if (v3 <= 0xF5 && (v3 + 62) <= 0xFDu)
  {
    uint64_t v5 = UTF8_TRAILING_BYTES[v3] + 1;
    unsigned int v6 = a3;
    uint64_t v7 = v5;
    do
    {
      *v6++ = *(unsigned char *)(a1 + a2++);
      --v7;
    }
    while (v7);
    uint64_t v4 = 0;
    a3[v5] = 0;
  }
  return v4;
}

uint64_t utf8_GetWCharFromUtf8(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  utf8_GetUtf8Symbol(a1, a2, a3, __s);
  if ((int)Utf8_Utf8NbrOfSymbols(__s) > 2) {
    return 0;
  }
  unsigned __int16 v4 = 0;
  utf8_Utf8ToUtf16((uint64_t)__s, UTF8_TRAILING_BYTES[__s[0]] + 1, 0, (uint64_t)&v4, 1u, 0, 0);
  return v4;
}

unsigned char *utf8_GetUtf8Symbol(unsigned char *result, unsigned int a2, unsigned int a3, char *__s)
{
  char *__s = 0;
  if (result)
  {
    unsigned __int16 v4 = result;
    uint64_t result = 0;
    if (a2 < a3)
    {
      LOBYTE(v5) = *v4;
      if (*v4)
      {
        if (a2)
        {
          while ((char)v4[a2] <= -65)
          {
            if (!--a2) {
              goto LABEL_7;
            }
          }
          LOBYTE(v5) = v4[a2];
          if (!(_BYTE)v5)
          {
LABEL_15:
            int v11 = 0;
            return (unsigned char *)(v11 + 1);
          }
        }
        else
        {
LABEL_7:
          a2 = 0;
          uint64_t result = 0;
          if ((char)v5 < -64) {
            return result;
          }
          if (!*v4) {
            goto LABEL_15;
          }
        }
        unint64_t v7 = 0;
        unsigned int v8 = a2 + 1;
        while (1)
        {
          unsigned int v9 = &__s[v7];
          *unsigned int v9 = v5;
          v9[1] = 0;
          unsigned int v10 = cstdlib_strlen(__s);
          if (utf8_CheckValid((uint64_t)__s, v10)) {
            break;
          }
          int v11 = v7 + 1;
          if (v7 <= 7)
          {
            int v5 = v4[v8 + v7++];
            if (v5) {
              continue;
            }
          }
          return (unsigned char *)(v11 + 1);
        }
        int v11 = v7;
        return (unsigned char *)(v11 + 1);
      }
    }
  }
  return result;
}

uint64_t utf8_GetU32FromUtf8(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  utf8_GetUtf8Symbol(a1, a2, a3, __s);
  if ((int)Utf8_Utf8NbrOfSymbols(__s) > 2) {
    return 0;
  }
  unsigned int v4 = 0;
  utf8_Utf8ToUtf32((uint64_t)__s, UTF8_TRAILING_BYTES[__s[0]] + 1, 0, (uint64_t)&v4, 1u, 0, 0);
  return v4;
}

size_t utf8_GetNextUtf8Offset(char *__s, int a2)
{
  if (!__s || !*__s) {
    return 0;
  }
  LODWORD(v3) = a2;
  size_t v4 = cstdlib_strlen(__s);
  if (v4 > v3)
  {
    unint64_t v5 = (v4 - 1) - (unint64_t)v3;
    uint64_t v6 = &__s[v3 + 1];
    while (v5)
    {
      int v7 = *v6++;
      --v5;
      uint64_t v3 = (v3 + 1);
      if (v7 >= -64) {
        return v3;
      }
    }
  }
  return v4;
}

uint64_t utf8_GetNextUtf8OffsetLimit(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !*a1) {
    return 1;
  }
  if (a2 < a3)
  {
    unint64_t v3 = (a3 - 1) - (unint64_t)a2;
    size_t v4 = &a1[a2 + 1];
    while (v3)
    {
      int v5 = *v4++;
      --v3;
      a2 = (a2 + 1);
      if (v5 >= -64) {
        return a2;
      }
    }
  }
  return a3;
}

uint64_t utf8_GetPreviousValidUtf8Offset(uint64_t result, unsigned int *a2)
{
  for (unsigned int i = *a2; i; *a2 = --i)
  {
    if (*(char *)(result + i) > -65) {
      break;
    }
  }
  return result;
}

uint64_t utf8_GetPreviousUtf8Offset(uint64_t __s, unsigned int a2)
{
  if (__s)
  {
    uint64_t v2 = __s;
    if (*(unsigned char *)__s)
    {
      unsigned int v4 = cstdlib_strlen((const char *)__s);
      if (v4 >= a2) {
        unsigned int v5 = a2;
      }
      else {
        unsigned int v5 = v4;
      }
      if (!v5) {
        return 0xFFFFFFFFLL;
      }
      while (*(char *)(v2 + v5) < -64)
      {
        if (!--v5) {
          return 0xFFFFFFFFLL;
        }
      }
      unsigned int v6 = v5 - 1;
      while (v6)
      {
        int v7 = *(char *)(v2 + v6--);
        if (v7 >= -64) {
          return v6 + 1;
        }
      }
    }
    return 0;
  }
  return __s;
}

uint64_t utf8_GetPreviousUtf8OffsetLimit(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (result)
  {
    if (!*(unsigned char *)result) {
      return 0;
    }
    unsigned int v3 = a3 - 1;
    if (a2 < a3) {
      unsigned int v3 = a2;
    }
    if (v3)
    {
      while (*(char *)(result + v3) < -64)
      {
        if (!--v3) {
          return 0xFFFFFFFFLL;
        }
      }
      unsigned int v4 = v3 - 1;
      while (v4)
      {
        int v5 = *(char *)(result + v4--);
        if (v5 >= -64) {
          return v4 + 1;
        }
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t utf8_GetCurrentUtf8Offset(unint64_t __s, unsigned int a2)
{
  if (__s)
  {
    uint64_t v2 = (const char *)__s;
    if (*(unsigned char *)__s)
    {
      LODWORD(__s) = cstdlib_strlen((const char *)__s);
      if (__s >= a2) {
        __s = a2;
      }
      else {
        __s = __s;
      }
      for (; __s; __s = (__s - 1))
      {
        if (v2[__s] > -65) {
          break;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return __s;
}

uint64_t utf8_BelongsToSet(unsigned int a1, unsigned char *a2, unsigned int a3, unsigned int a4)
{
  if (a1 == 4)
  {
    unsigned int v8 = &a2[a3];
    if (!cstdlib_strncmp(v8, "﻿", 3uLL) || a3 <= a4 && !*v8) {
      return 1;
    }
  }
  else if (a1 == 3)
  {
    if (a3 <= a4 && !a2[a3]) {
      return 1;
    }
  }
  else if (a1 == 2 && !cstdlib_strncmp(&a2[a3], "﻿", 3uLL))
  {
    return 1;
  }
  uint64_t result = (uint64_t)Utf8_GetWCharClassifier(a1);
  if (result)
  {
    unsigned int v10 = (uint64_t (*)(void))result;
    uint64_t result = utf8_GetWCharFromUtf8(a2, a3, a4);
    if (result)
    {
      return v10();
    }
  }
  return result;
}

BOOL utf8_ToLower(char *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6 = cstdlib_strlen(a1);
  uint64_t WCharFromUtf8 = utf8_GetWCharFromUtf8(a1, a2, v6);
  WCharClassifier = Utf8_GetWCharClassifier(0x12u);
  if (WCharClassifier && ((unsigned int (*)(uint64_t))WCharClassifier)(WCharFromUtf8)) {
    goto LABEL_5;
  }
  unsigned int v9 = Utf8_GetWCharClassifier(0x15u);
  if (v9)
  {
    if (((unsigned int (*)(uint64_t))v9)(WCharFromUtf8)) {
      goto LABEL_5;
    }
  }
  char v13 = Utf8_GetWCharClassifier(0x18u);
  if (v13 && ((unsigned int (*)(uint64_t))v13)(WCharFromUtf8))
  {
    if (WCharFromUtf8 == 304)
    {
      LOWORD(v10) = -199;
    }
    else
    {
      if (WCharFromUtf8 != 376)
      {
        BOOL v11 = 1;
        LOWORD(v10) = 1;
        goto LABEL_7;
      }
      LOWORD(v10) = -121;
    }
    goto LABEL_6;
  }
  char v14 = Utf8_GetWCharClassifier(0x1Bu);
  if (v14 && ((unsigned int (*)(uint64_t))v14)(WCharFromUtf8))
  {
    if ((WCharFromUtf8 - 902) < 0xA)
    {
      LOWORD(v10) = asc_2206DC264[(__int16)(WCharFromUtf8 - 902)];
      goto LABEL_6;
    }
LABEL_5:
    LOWORD(v10) = 32;
LABEL_6:
    BOOL v11 = 1;
    goto LABEL_7;
  }
  unsigned int v10 = Utf8_GetWCharClassifier(0x1Eu);
  if (v10)
  {
    int v15 = ((uint64_t (*)(uint64_t))v10)(WCharFromUtf8);
    if ((((_WORD)WCharFromUtf8 - 1040) & 0xFFE0) != 0) {
      __int16 v16 = 1;
    }
    else {
      __int16 v16 = 32;
    }
    if ((WCharFromUtf8 & 0xFFF0) == 0x400) {
      __int16 v17 = 80;
    }
    else {
      __int16 v17 = v16;
    }
    BOOL v11 = v15 != 0;
    if (v15) {
      LOWORD(v10) = v17;
    }
    else {
      LOWORD(v10) = 0;
    }
  }
  else
  {
    BOOL v11 = 0;
  }
LABEL_7:
  v18[0] = (_WORD)v10 + WCharFromUtf8;
  v18[1] = 0;
  utf8_16bitToUtf8((uint64_t)v18, a3);
  return v11;
}

char *utf8_strchr(char *a1, const char *a2)
{
  size_t v3 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(unsigned __int8 *)a2;
  if (v4 <= 0xF5 && (v4 + 62) <= 0xFDu) {
    size_t v3 = UTF8_TRAILING_BYTES[v4] + 1;
  }
  cstdlib_strncpy(__dst, a2, v3);
  __dst[v3] = 0;
  return cstdlib_strstr(a1, __dst);
}

BOOL utf8_IsChineseLetter(const char *a1)
{
  unsigned int v5 = 0;
  unsigned int v2 = cstdlib_strlen(a1);
  int v4 = 0;
  utf8_Utf8ToUtf32_Tolerant((uint64_t)a1, v2, (uint64_t)&v5, 1u, &v4);
  return v4 && wchar_IsChineseLetter(v5) != 0;
}

uint64_t utf8_GetMaxChineseDCTWordUTFLen(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  unsigned __int16 v4 = 0;
  unsigned __int16 v5 = 0;
  do
  {
    if (v4 >= a2)
    {
      LOWORD(a3) = v5;
      goto LABEL_10;
    }
    __int16 v6 = 0;
    unint64_t v7 = *(unsigned __int8 *)(a1 + v4);
    if (v7 <= 0xF5 && (v7 + 62) <= 0xFDu) {
      __int16 v6 = UTF8_TRAILING_BYTES[v7] + 1;
    }
    v4 += v6;
    ++v5;
  }
  while (a3 != v5);
  if (v4) {
    goto LABEL_11;
  }
LABEL_10:
  unsigned __int16 v4 = a2;
LABEL_11:
  *a4 = a3;
  return v4;
}

uint64_t utf8_GetChineseUTFCharNum(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    unsigned int v2 = 0;
    unsigned __int16 v3 = 0;
    do
    {
      __int16 v4 = 0;
      unint64_t v5 = *(unsigned __int8 *)(a1 + v2);
      if (v5 <= 0xF5 && (v5 + 62) <= 0xFDu) {
        __int16 v4 = UTF8_TRAILING_BYTES[v5] + 1;
      }
      ++v3;
      unsigned int v2 = (unsigned __int16)(v4 + v2);
    }
    while (v2 < a2);
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t utf8_strdupFromUtf16(void *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  unsigned int v3 = *(unsigned __int16 *)a2;
  if (*(_WORD *)a2)
  {
    __int16 v4 = (unsigned __int16 *)(a2 + 2);
    LODWORD(a2) = 1;
    do
    {
      if (v3 < 0x800) {
        int v5 = 2;
      }
      else {
        int v5 = 3;
      }
      if (v3 < 0x80) {
        int v6 = 1;
      }
      else {
        int v6 = v5;
      }
      a2 = (v6 + a2);
      unsigned int v7 = *v4++;
      unsigned int v3 = v7;
    }
    while (v7);
  }
  else
  {
    a2 = 1;
  }
  uint64_t v8 = heap_Calloc(a1, a2, 1);
  if (v8) {
    utf8_16bitToUtf8(v2, v8);
  }
  return v8;
}

uint64_t utf8_countNbrOfPhonWords(unsigned char *a1, unsigned int a2, _WORD *a3, _WORD *a4)
{
  *a3 = 0;
  *a4 = a2;
  if (!a2)
  {
    unsigned __int16 v9 = -1;
LABEL_8:
    unsigned int v10 = v9;
    do
    {
      if (!utf8_BelongsToSet(0, a1, v10, a2)) {
        break;
      }
      --*a4;
      --v10;
    }
    while ((_WORD)v10);
    goto LABEL_11;
  }
  for (unsigned int i = 0; i != a2; ++i)
  {
    if (!utf8_BelongsToSet(0, a1, i, a2)) {
      break;
    }
    ++*a3;
  }
  unsigned __int16 v9 = a2 - 1;
  if ((_WORD)a2 != 1) {
    goto LABEL_8;
  }
LABEL_11:
  unsigned int v11 = (unsigned __int16)*a3;
  unsigned int v12 = (unsigned __int16)*a4;
  if (v11 >= v12)
  {
    return 0;
  }
  else
  {
    unsigned __int16 v13 = 0;
    char v14 = 95;
    do
    {
      int v15 = a1[(unsigned __int16)v11];
      if (v15 == 35 || v15 == 95)
      {
        if (v14 != 35 && v14 != 95) {
          ++v13;
        }
      }
      else if (v15 == 92)
      {
        uint64_t v16 = (unsigned __int16)v11 + 1;
        if (v16 < (unsigned __int16)v12 && a1[v16] == 84)
        {
          for (unsigned int j = v11 + 2; (unsigned __int16)j < (unsigned __int16)v12; j += v19)
          {
            uint64_t v18 = a1[(unsigned __int16)j];
            if (v18 == 92) {
              break;
            }
            int v19 = 0;
            if (v18 <= 0xF5 && (v18 + 62) <= 0xFDu) {
              int v19 = UTF8_TRAILING_BYTES[v18] + 1;
            }
          }
          if (a1[(unsigned __int16)j] == 92) {
            unsigned int v11 = j;
          }
        }
      }
      if (!utf8_BelongsToSet(0, a1, (unsigned __int16)v11, a2)) {
        char v14 = a1[(unsigned __int16)v11];
      }
      ++v11;
      unsigned int v12 = (unsigned __int16)*a4;
    }
    while (v12 > (unsigned __int16)v11);
    if (v14 == 95) {
      unsigned __int16 v20 = v13;
    }
    else {
      unsigned __int16 v20 = v13 + 1;
    }
    if (v14 == 35) {
      return v13;
    }
    else {
      return v20;
    }
  }
}

uint64_t wchar_IsChineseLetter(unsigned int a1)
{
  char v1 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_2206DC290, (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_2206DC280))));
  BOOL v3 = (a1 - 173824) >> 4 < 0x27B || a1 - 194560 < 0x21E;
  return v1 & 1 | (a1 - 0x20000 < 0xA6D7) | v3;
}

uint64_t (*Utf8_GetWCharClassifier(unsigned int a1))()
{
  if (a1 > 0x24) {
    return 0;
  }
  else {
    return off_26D20DBB8[a1];
  }
}

BOOL wchar_IsBlank(unsigned int a1)
{
  if (LH_wcschr((uint64_t)&szBLANKS, a1)) {
    return 1;
  }
  if (a1 < 0xA0) {
    return 0;
  }
  int v3 = 0;
  int v4 = 24;
  while (1)
  {
    int v5 = (v3 + v4) / 2;
    unsigned int v6 = (unsigned __int16)wchar_IsBlank_wisspaceList[v5];
    if (v6 <= a1) {
      break;
    }
    int v4 = v5 - 1;
LABEL_9:
    if (v3 > v4) {
      return 0;
    }
  }
  if (v6 < a1)
  {
    int v3 = v5 + 1;
    goto LABEL_9;
  }
  return (_WORD)v5 != 0xFFFF;
}

BOOL wchar_IsBlankNorm(unsigned int a1)
{
  IsBlanuint64_t k = wchar_IsBlank(a1);
  return a1 == 95 || IsBlank;
}

BOOL wchar_IsSpace(int a1)
{
  return a1 == 12288 || a1 == 32;
}

BOOL wchar_IsDigit(int a1)
{
  return (a1 - 48) < 0xA;
}

BOOL wchar_IsQuote(int a1)
{
  return a1 == 34;
}

BOOL wchar_IsColon(int a1)
{
  return a1 == 58;
}

BOOL wchar_IsWordChar(unsigned int a1)
{
  uint64_t v1 = 1;
  if ((a1 - 162 > 0x1C || ((1 << (a1 + 94)) & 0x1D8BD1AB) == 0)
    && (a1 - 36 > 0x3A || ((1 << (a1 - 36)) & 0x400000012000087) == 0)
    && a1 != 126)
  {
    unsigned __int8 v3 = vmaxv_u16(vcgt_u16((uint16x4_t)0x450006000F0007, (uint16x4_t)vadd_s16(vdup_n_s16(a1), (int16x4_t)0xFF85FFA5FFDFFFC6))) | (a1 - 0x2000 < 0x70);
    BOOL v5 = (unsigned __int16)(a1 + 464) < 0x1C0u || (a1 & 0xFFC0) == 12288;
    return ((v3 | v5) & 1) == 0;
  }
  return v1;
}

uint64_t wchar_IsPunctuation(unsigned int a1)
{
  char v1 = vmaxv_u16(vcgt_u16((uint16x4_t)0x450006000F0007, (uint16x4_t)vadd_s16(vdup_n_s16(a1), (int16x4_t)0xFF85FFA5FFDFFFC6)));
  BOOL v3 = (unsigned __int16)(a1 + 464) < 0x1C0u || (a1 & 0xFFC0) == 12288;
  return v1 & 1 | (a1 - 0x2000 < 0x70) | v3;
}

uint64_t wchar_IsLatinPunctuation(unsigned int a1)
{
  return vmaxv_u16(vcgt_u16((uint16x4_t)0x450006000F0007, (uint16x4_t)vadd_s16(vdup_n_s16(a1), (int16x4_t)0xFF85FFA5FFDFFFC6))) & 1;
}

BOOL wchar_IsGeneralPunctuation(int a1)
{
  return (a1 - 0x2000) < 0x70;
}

BOOL wchar_IsCJKSymbolPunctuation(__int16 a1)
{
  return (a1 & 0xFFC0) == 12288;
}

BOOL wchar_IsCJKCompatibilityForms(__int16 a1)
{
  return (unsigned __int16)(a1 + 464) < 0x120u;
}

BOOL wchar_IsSmallFormVariants(__int16 a1)
{
  return (unsigned __int16)(a1 + 432) < 0x20u;
}

BOOL wchar_IsHalfWidthFullWidthForms(__int16 a1)
{
  return (unsigned __int16)(a1 + 256) < 0xF0u;
}

BOOL wchar_IsBasicLatinCapitalLetter(int a1)
{
  return (a1 - 65) < 0x1A;
}

BOOL wchar_IsLatinOneSupplementCapitalLetter(int a1)
{
  return (a1 - 192) < 0x17 || (a1 - 216) < 7;
}

uint64_t wchar_IsLatinExtendedACapitalLetter(int a1)
{
  BOOL v1 = (a1 - 256) <= 0x36 && (a1 & 1) == 0;
  if (v1
    || (a1 - 328) >= 0xFFFFFFF1 && (a1 & 1) != 0
    || (a1 - 330) <= 0x2E && (a1 & 1) == 0)
  {
    return 1;
  }
  if ((a1 - 377) >= 5) {
    return 0;
  }
  return a1 & 1;
}

uint64_t wchar_IsGreekCapitalLetter(int a1)
{
  if (a1 - 902) < 7 && ((0x5Du >> (a1 + 122))) {
    return 1;
  }
  BOOL v1 = (unsigned __int16)(a1 - 913) < 0x11u || (a1 - 931) < 9;
  return (a1 & 0xFFFE) == 0x38E || v1;
}

BOOL wchar_IsCyrillicCapitalLetter(int a1)
{
  if ((a1 - 1024) < 0x30 || (a1 - 1120) <= 0x20 && (a1 & 1) == 0) {
    return 1;
  }
  if ((a1 - 1164) <= 0x32) {
    goto LABEL_8;
  }
  unsigned __int16 v1 = ((unsigned __int16)(a1 - 1217) >> 1) | (((_WORD)a1 - 1217) << 15);
  if (v1 < 6u && ((0x2Bu >> v1) & 1) != 0) {
    return 1;
  }
  if ((a1 - 1232) <= 0x24)
  {
LABEL_8:
    if ((a1 & 1) == 0) {
      return 1;
    }
  }
  return a1 == 1272;
}

BOOL wchar_IsUnderscore(int a1)
{
  return a1 == 95;
}

BOOL wchar_IsSpaceOrUnderscore(int a1)
{
  return a1 == 32 || a1 == 95 || a1 == 12288;
}

BOOL wchar_IsHyphen(int a1)
{
  return a1 == 45;
}

BOOL wchar_IsHyphenOrUnderscore(int a1)
{
  return a1 == 45 || a1 == 95;
}

char *LH_MapModuleNameToId(char *result)
{
  if (result)
  {
    unsigned __int16 v1 = result;
    if (*result)
    {
      uint64_t v2 = 0;
      while (LH_stricmp(v1, (&LH_MapModuleNameToId_moduleMap)[v2]))
      {
        v2 += 2;
        if (v2 == 478) {
          return 0;
        }
      }
      return (char *)LOWORD((&LH_MapModuleNameToId_moduleMap)[v2 + 1]);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LH_MapModuleNamesToIds(char *a1, char *a2, unsigned int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 18;
  }
  BOOL v5 = a1;
  *a2 = 0;
  if (!a1 || !*a1) {
    BOOL v5 = "all";
  }
  if (LH_stricmp(v5, "all"))
  {
    for (unsigned int i = v5; ; ++i)
    {
      unsigned int v7 = *i;
      BOOL v8 = v7 > 0x3B;
      uint64_t v9 = (1 << v7) & 0x800100100000001;
      if (v8 || v9 == 0) {
        continue;
      }
      if ((i - v5 - 1) <= 0x3E)
      {
        cstdlib_strncpy(__dst, v5, (i - v5));
        __dst[i - v5] = 0;
        if (__dst[0] - 48 > 9)
        {
          unsigned int v11 = LH_MapModuleNameToId(__dst);
          if (v11)
          {
LABEL_16:
            if (*a2 && cstdlib_strlen(a2) + 1 < a3) {
              cstdlib_strcat(a2, " ");
            }
            __sprintf_chk(__dst, 0, 0x40uLL, "%d", v11);
            size_t v12 = cstdlib_strlen(a2);
            if (cstdlib_strlen(__dst) + v12 < a3) {
              cstdlib_strcat(a2, __dst);
            }
          }
        }
        else
        {
          unsigned int v11 = (unsigned __int16)LH_atoi(__dst);
          if (v11) {
            goto LABEL_16;
          }
        }
      }
      if (!*i) {
        return 0;
      }
      BOOL v5 = ++i;
    }
  }
  snprintf(a2, a3, "%s", v5);
  return 0;
}

unint64_t base64_encode_len(int a1)
{
  return (2 * ((2863311531u * (unint64_t)(a1 + 2)) >> 32)) & 0xFFFFFFFC;
}

uint64_t base64_decode_len(int a1)
{
  return 3 * ((a1 + 3) >> 2);
}

uint64_t base64_encode(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    *a4 = 0;
    uint64_t v7 = a2;
    while (2)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      char v10 = 16;
      while (1)
      {
        int v11 = *(unsigned __int8 *)(a1 + v5 + v8);
        unint64_t v12 = v9 | v11;
        if (v8 == 2) {
          break;
        }
        unint64_t v9 = (v12 << 8);
        ++v8;
        v10 -= 8;
        if (v7 - v5 == v8)
        {
          unint64_t v15 = (v9 << v10);
          uint64_t v16 = v6;
          *(unsigned char *)(a3 + v6) = base64_alphabet_[(int)v15 >> 18];
          *(unsigned char *)(a3 + (v6 | 1)) = base64_alphabet_[(v15 >> 12) & 0x3F];
          char v17 = 61;
          if (v8 != 1) {
            char v17 = base64_alphabet_[(v15 >> 6) & 0x3CLL];
          }
          *(unsigned char *)(a3 + (v6 | 2)) = v17;
          v6 += 4;
          *(unsigned char *)(a3 + (v16 | 3)) = 61;
          goto LABEL_15;
        }
      }
      *(unsigned char *)(a3 + v6) = base64_alphabet_[(int)v9 >> 18];
      *(unsigned char *)(a3 + (v6 | 1)) = base64_alphabet_[(v9 >> 12) & 0x3F];
      uint64_t v13 = v6 | 3;
      *(unsigned char *)(a3 + (v6 | 2)) = base64_alphabet_[(v12 >> 6) & 0x3F];
      v6 += 4;
      *(unsigned char *)(a3 + v13) = base64_alphabet_[v11 & 0x3F];
      uint64_t v14 = ~v5 + v7;
      v5 += v8 + 1;
      if (v14 != v8) {
        continue;
      }
      break;
    }
LABEL_15:
    uint64_t v4 = 0;
    *a4 = v6;
  }
  return v4;
}

uint64_t base64_decode(unsigned __int8 *a1, unsigned char *a2, _DWORD *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *a1;
  LODWORD(v7) = a1;
  if (v6)
  {
    uint64_t v7 = a1;
    do
    {
      if (v6 != 61 && base64_member_[v6] != 1 && !cstdlib_isspace(v6)) {
        break;
      }
      int v8 = *++v7;
      int v6 = v8;
    }
    while (v8);
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a3)
  {
    *a3 = 0;
    if (v7 == a1)
    {
      int v13 = 0;
      unsigned int v12 = 0;
      int v11 = 0;
      LODWORD(v10) = 0;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 0;
      unsigned int v12 = 0;
      int v13 = 0;
      while (1)
      {
        uint64_t v14 = a1[v10];
        if (v14 == 61) {
          break;
        }
        if (base64_member_[v14])
        {
          unsigned int v15 = v12 + base64_decoder_[v14];
          if (++v13 == 4)
          {
            int v13 = 0;
            unsigned int v12 = 0;
            a2[v11] = BYTE2(v15);
            int v16 = v11 + 2;
            a2[v11 + 1] = BYTE1(v15);
            v11 += 3;
            a2[v16] = v15;
          }
          else
          {
            unsigned int v12 = v15 << 6;
          }
        }
        if (v7 - a1 == ++v10) {
          goto LABEL_22;
        }
      }
    }
    if (v10 == v7 - a1)
    {
LABEL_22:
      if (v13)
      {
LABEL_23:
        *a2 = 0;
        return 0xFFFFFFFFLL;
      }
      goto LABEL_30;
    }
    switch(v13)
    {
      case 1:
        goto LABEL_23;
      case 2:
        int v18 = 1;
        char v19 = 10;
        int v17 = v11;
        break;
      case 3:
        int v17 = v11 + 1;
        a2[v11] = BYTE2(v12);
        int v18 = 2;
        char v19 = 8;
        break;
      default:
LABEL_30:
        uint64_t result = 0;
        *a3 = v11;
        return result;
    }
    v11 += v18;
    a2[v17] = v12 >> v19;
    goto LABEL_30;
  }
  return result;
}

uint64_t cstdlib_abs(uint64_t result)
{
  if ((int)result >= 0) {
    return result;
  }
  else {
    return -(int)result;
  }
}

uint64_t cstdlib_labs(uint64_t result)
{
  if (result < 0) {
    return -result;
  }
  return result;
}

uint64_t cstdlib_atol(unsigned __int8 *a1)
{
  do
    unsigned __int8 v2 = *a1++;
  while (cstdlib_isspace(v2));
  int v3 = *(a1 - 1);
  if (v3 == 43 || v3 == 45)
  {
    int v5 = *a1++;
    int v4 = v5;
  }
  else
  {
    int v4 = *(a1 - 1);
  }
  uint64_t v6 = 0;
  if (cstdlib_isdigit(v4))
  {
    do
    {
      uint64_t v6 = 10 * v6 + v4 - 48;
      int v7 = *a1++;
      int v4 = v7;
    }
    while (cstdlib_isdigit(v7));
  }
  if (v3 == 45) {
    return -v6;
  }
  else {
    return v6;
  }
}

uint64_t cstdlib_atoi(unsigned __int8 *a1)
{
  return cstdlib_atol(a1);
}

unint64_t cstdlib_strtol(unsigned __int8 *a1, unsigned __int8 **a2, unsigned int a3)
{
  return strtoxl(a1, a2, a3, 0);
}

unint64_t strtoxl(unsigned __int8 *a1, unsigned __int8 **a2, unsigned int a3, int a4)
{
  int v8 = a1;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
  }
  while (cstdlib_isspace(v10));
  if (v9 == 43) {
    goto LABEL_6;
  }
  if (v9 == 45)
  {
    a4 |= 2u;
LABEL_6:
    int v11 = *v8++;
    int v9 = v11;
  }
  if (a3 <= 0x24 && a3 != 1)
  {
    if (!a3)
    {
      if (v9 != 48)
      {
        a3 = 10;
LABEL_23:
        unint64_t v13 = 0;
        uint64_t v14 = a3;
        unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL / a3;
        for (unsigned int i = v8 - 1; ; ++i)
        {
          if (cstdlib_isdigit(v9))
          {
            unsigned int v17 = (char)v9 - 48;
          }
          else
          {
            if (!cstdlib_isalpha(v9)) {
              break;
            }
            unsigned int v17 = cstdlib_toupper((char)v9) - 55;
          }
          if (v17 >= v14) {
            break;
          }
          if (v13 < v15 || v13 == v15 && ~(v15 * v14) >= v17)
          {
            a4 |= 8u;
            unint64_t v13 = v17 + v13 * v14;
          }
          else
          {
            a4 |= 0xCu;
          }
          unsigned __int8 v18 = i[1];
          LOBYTE(v9) = v18;
        }
        if ((a4 & 8) == 0)
        {
          unint64_t v13 = 0;
          if (!a2) {
            goto LABEL_51;
          }
          unsigned int i = a1;
          goto LABEL_50;
        }
        if ((a4 & 4) != 0)
        {
          if (a4)
          {
            unint64_t v13 = -1;
            if (!a2)
            {
LABEL_51:
              if ((a4 & 2) != 0) {
                return -(uint64_t)v13;
              }
              else {
                return v13;
              }
            }
LABEL_50:
            *a2 = i;
            goto LABEL_51;
          }
        }
        else if ((a4 & 1) != 0 {
               || ((a4 & 2) == 0 || v13 <= 0x8000000000000000) && ((a4 & 2) != 0 || (v13 & 0x8000000000000000) == 0))
        }
        {
LABEL_49:
          if (!a2) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        if ((a4 & 2) != 0) {
          unint64_t v13 = 0x8000000000000000;
        }
        else {
          unint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        }
        goto LABEL_49;
      }
      if (((*v8 - 88) & 0xDF) != 0) {
        a3 = 8;
      }
      else {
        a3 = 16;
      }
    }
    if (a3 == 16 && v9 == 48)
    {
      if ((*v8 | 0x20) == 0x78)
      {
        LOBYTE(v9) = v8[1];
        v8 += 2;
      }
      else
      {
        LOBYTE(v9) = 48;
      }
      a3 = 16;
    }
    goto LABEL_23;
  }
  unint64_t result = 0;
  if (a2) {
    *a2 = a1;
  }
  return result;
}

unint64_t cstdlib_strtoul(unsigned __int8 *a1, unsigned __int8 **a2, unsigned int a3)
{
  return strtoxl(a1, a2, a3, 1);
}

uint64_t cstdlib_isalpha(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 3;
}

uint64_t cstdlib_isdigit(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 4;
}

uint64_t cstdlib_isxdigit(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 0x80;
}

uint64_t cstdlib_isspace(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 8;
}

uint64_t cstdlib_ispunct(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 0x10;
}

uint64_t cstdlib_isalnum(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 7;
}

uint64_t cstdlib_isprint(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 0x57;
}

uint64_t cstdlib_isgraph(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 0x17;
}

uint64_t cstdlib_iscntrl(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 0x20;
}

uint64_t cstdlib_isupper(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 1;
}

uint64_t cstdlib_islower(unsigned __int8 a1)
{
  return _ssft_pctype[a1] & 2;
}

uint64_t cstdlib_tolower(uint64_t result)
{
  if (_ssft_pctype[result]) {
    return (result + 32);
  }
  else {
    return result;
  }
}

uint64_t cstdlib_toupper(uint64_t result)
{
  if ((_ssft_pctype[result] & 2) != 0) {
    return (result - 32);
  }
  else {
    return result;
  }
}

uint64_t cstdlib_atof(unsigned __int8 *a1)
{
  return cstdlib_strtod(a1, 0);
}

uint64_t cstdlib_strtod(unsigned __int8 *a1, unsigned __int8 **a2)
{
  int v3 = a1;
  int v4 = a1 - 1;
  do
    unsigned __int8 v5 = *++v4;
  while (cstdlib_isspace(v5));
  uint64_t v6 = 0;
  int v7 = *v4;
  BOOL v8 = v7 == 45 || v7 == 43;
  uint64_t v9 = v8;
  if (v8) {
    int v10 = v4 + 1;
  }
  else {
    int v10 = v4;
  }
  int v11 = -1;
  while (1)
  {
    unsigned __int8 v12 = v10[v6];
    uint64_t result = cstdlib_isdigit(v12);
    if (result) {
      goto LABEL_17;
    }
    if (v12 != 46 || (v11 & 0x80000000) == 0) {
      break;
    }
    int v11 = v6;
LABEL_17:
    ++v6;
  }
  int v14 = ~v11;
  int v15 = ~v11 >> 31;
  int v16 = v15 + v6;
  if (v11 < 0) {
    int v11 = v6;
  }
  int v17 = v6 + (v14 >> 31);
  if (v17 <= 18) {
    int v17 = 18;
  }
  if (v16 >= 18) {
    int v18 = 18;
  }
  else {
    int v18 = v15 + v6;
  }
  if (v18)
  {
    char v19 = &v4[v9];
    if (v18 < 10)
    {
      unsigned __int16 v23 = &v4[v9];
      if (v16 >= 1) {
        goto LABEL_38;
      }
    }
    else
    {
      int v20 = 0;
      int v21 = v15 + v6;
      if (v15 + (int)v6 >= 18) {
        int v21 = 18;
      }
      int v22 = v21 + 1;
      unsigned __int16 v23 = &v4[v9];
      do
      {
        int v24 = *v23;
        if (v24 == 46)
        {
          LOBYTE(v24) = v23[1];
          v23 += 2;
        }
        else
        {
          ++v23;
        }
        int v20 = 10 * v20 + (char)v24 - 48;
        --v22;
      }
      while (v22 > 10);
LABEL_38:
      int v25 = 0;
      int v26 = v15 + v6;
      if (v15 + (int)v6 >= 9) {
        int v26 = 9;
      }
      int v27 = v26 + 1;
      do
      {
        int v28 = *v23;
        if (v28 == 46)
        {
          LOBYTE(v28) = v23[1];
          v23 += 2;
        }
        else
        {
          ++v23;
        }
        int v25 = 10 * v25 + (char)v28 - 48;
        --v27;
      }
      while (v27 > 1);
    }
    if ((v19[v6] | 0x20) == 0x65)
    {
      uint64_t v29 = &v4[v9 + v6];
      unsigned int v30 = v29 + 2;
      int v33 = v29[1];
      int v31 = v29 + 1;
      int v32 = v33;
      BOOL v34 = v33 != 45;
      if (v33 == 45) {
        int v31 = v30;
      }
      char v35 = v32 == 43 || v34;
      if (v32 == 43) {
        int v3 = v30;
      }
      else {
        int v3 = v31;
      }
      uint64_t result = cstdlib_isdigit(*v3);
      for (i = 0; result; uint64_t result = cstdlib_isdigit(v37))
      {
        int i = (char)*v3 + 10 * i - 48;
        unsigned __int8 v37 = *++v3;
      }
      int v38 = v6 + v15;
      if ((int)v6 + v15 <= 18) {
        int v38 = 18;
      }
      int v39 = v11 - i + v38 - v15 - v6 - 18;
      int v40 = v11 + i + v38 - v15 - v6 - 18;
      if (v35) {
        int v39 = v40;
      }
    }
    else
    {
      int v39 = v11 + v17 - (v14 >> 31) - v6 - 18;
      int v3 = &v19[v6];
    }
    if (v39 >= 0) {
      int v41 = v39;
    }
    else {
      int v41 = -v39;
    }
    double v42 = 1.0;
    if (v41 >= 511) {
      int v41 = 511;
    }
    if (v41)
    {
      uint64_t v43 = (double *)&powersOf10;
      do
      {
        if (v41) {
          double v42 = v42 * *v43;
        }
        ++v43;
        BOOL v44 = v41 > 1;
        int v41 = v41 >> 1;
      }
      while (v44);
    }
    if (a2) {
LABEL_73:
    }
      *a2 = v3;
  }
  else if (a2)
  {
    goto LABEL_73;
  }
  return result;
}

uint64_t dbg_puts_()
{
  return 0;
}

uint64_t dbg_printf_()
{
  return 0;
}

uint64_t dbg_fopen_()
{
  return 0;
}

uint64_t dbg_fclose_()
{
  return 0;
}

uint64_t dbg_fputs_()
{
  return 0;
}

uint64_t dbg_fprintf_()
{
  return 0;
}

uint64_t dbg_binwrite_()
{
  return 0;
}

unint64_t ssft_bsearch(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  uint64_t v5 = (a3 - 1) * a4;
  if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v8 = a2;
    unint64_t v10 = a2 + v5;
    uint64_t v11 = -a4;
    do
    {
      if (a3 >= 2)
      {
        unint64_t v16 = a3 >> 1;
        uint64_t v17 = (a3 & 1) + (a3 >> 1) - 1;
        unint64_t v18 = v8 + v17 * a4;
        int v19 = a5(a1, v18);
        if (!v19)
        {
          v8 += v17 * a4;
          return v8;
        }
        unint64_t v13 = v18 + a4;
        unint64_t v14 = v18 + v11;
        BOOL v15 = v19 >= 0;
        if (v19 < 0) {
          a3 = v17;
        }
        else {
          a3 = v16;
        }
      }
      else
      {
        if (!a3) {
          return 0;
        }
        int v12 = a5(a1, v8);
        if (!v12) {
          return v8;
        }
        unint64_t v13 = v8 + a4;
        unint64_t v14 = v10 + v11;
        BOOL v15 = v12 >= 0;
        a3 = 1;
      }
      if (v15) {
        unint64_t v8 = v13;
      }
      else {
        unint64_t v10 = v14;
      }
    }
    while (v8 <= v10);
  }
  return 0;
}

uint64_t ssft_qsort(uint64_t result, unint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t, unint64_t))
{
  if (a2 < 2) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v30 = a2 >> 1;
  unint64_t v7 = result + (a2 >> 1) * a3;
  uint64_t v8 = -a3;
  do
  {
    unint64_t v9 = 0;
    unint64_t v26 = a2 - 1;
    unint64_t v27 = a2;
    unint64_t v10 = a2 - 1;
    uint64_t v28 = v6;
    while (1)
    {
      unint64_t v11 = v9 - 2;
      unint64_t v12 = a3 * v9;
      unint64_t v13 = v9 - 1;
      unint64_t v31 = v9 - 1;
      unint64_t v32 = v10;
      uint64_t v14 = v6;
      do
      {
        unint64_t v15 = v13;
        int v16 = a4(v14 + v12, v7);
        ++v11;
        v14 += a3;
        unint64_t v13 = v15 + 1;
      }
      while (v16 < 0);
      uint64_t v17 = 0;
      unint64_t v29 = v11 - v30;
      uint64_t v18 = v6;
      do
      {
        uint64_t result = a4(v18 + a3 * v32, v7);
        --v17;
        ++v15;
        v18 += v8;
      }
      while ((int)result > 0);
      uint64_t v19 = v32 + v17;
      unint64_t v10 = v32 + v17 + 1;
      if (v11 + 1 < v10)
      {
        if ((int)a3 >= 1)
        {
          unint64_t v20 = a3 * v31;
          uint64_t v21 = a3 + a3 * v32;
          int v22 = a3;
          do
          {
            char v23 = *(unsigned char *)(v14 + v20);
            *(unsigned char *)(v14 + v20) = *(unsigned char *)(v18 + v21);
            *(unsigned char *)(v18 + v21++) = v23;
            ++v20;
            --v22;
          }
          while (v22);
        }
        if (v19 - v30 == -1) {
          unint64_t v24 = v11 + 1;
        }
        else {
          unint64_t v24 = v30;
        }
        unint64_t v25 = v14 + a3 * v31;
        if (v19 - v30 != -1) {
          unint64_t v25 = v7;
        }
        if (v29 != -1) {
          unint64_t v10 = v24;
        }
        unint64_t v30 = v10;
        if (v29 == -1) {
          unint64_t v7 = v18 + a3 + a3 * v32;
        }
        else {
          unint64_t v7 = v25;
        }
        unint64_t v10 = v32 + v17;
        uint64_t v6 = v28;
        unint64_t v9 = v11 + 2;
        goto LABEL_24;
      }
      unint64_t v9 = v11 + 1;
      uint64_t v6 = v28;
      if (v32 == v15) {
        break;
      }
LABEL_24:
      if (v9 >= v10)
      {
        if (!v10) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
    unint64_t v9 = v11 + 2;
    unint64_t v10 = v11;
    if (v11) {
LABEL_26:
    }
      uint64_t result = ssft_qsort(v6, v10 + 1, a3, a4);
LABEL_27:
    if (v9 >= v26) {
      break;
    }
    v6 += v9 * a3;
    a2 = v27 - v9;
    unint64_t v30 = (v27 - v9) >> 1;
    unint64_t v7 = v6 + v30 * a3;
  }
  while (v27 - v9 > 1);
  return result;
}

uint64_t LH_stricmp(char *a1, char *a2)
{
  int v4 = cstdlib_tolower(*a1);
  if (v4 == cstdlib_tolower(*a2))
  {
    unsigned int v5 = 1;
    uint64_t v6 = a1;
    while (1)
    {
      unsigned int v7 = v5;
      if (!*v6) {
        return 0;
      }
      uint64_t v6 = &a1[v5];
      int v8 = cstdlib_tolower(*v6);
      int v9 = cstdlib_tolower(a2[v7]);
      unsigned int v5 = v7 + 1;
      if (v8 != v9)
      {
        uint64_t v10 = v7;
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
LABEL_7:
    int v11 = cstdlib_tolower(a1[v10]);
    return v11 - cstdlib_tolower(a2[v10]);
  }
}

uint64_t LH_strnicmp(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0;
  if (a3)
  {
    unsigned int v7 = 1;
    do
    {
      int v8 = cstdlib_tolower(*(char *)(a1 + v6));
      if (v8 != cstdlib_tolower(*(char *)(a2 + v6))) {
        break;
      }
      if (!*(unsigned char *)(a1 + v6)) {
        break;
      }
      if (!*(unsigned char *)(a2 + v6)) {
        break;
      }
      unint64_t v6 = v7++;
    }
    while (v6 < a3);
  }
  if (v6 == a3) {
    return 0;
  }
  int v10 = cstdlib_tolower(*(char *)(a1 + v6));
  return v10 - cstdlib_tolower(*(char *)(a2 + v6));
}

char *LH_itoa(unsigned int a1, char *a2, unsigned int a3)
{
  if (a1)
  {
    if (a3 - 37 >= 0xFFFFFFDD)
    {
      if ((a1 & 0x80000000) != 0 && a3 == 10)
      {
        *a2 = 45;
        int v3 = a2 + 1;
        a1 = -a1;
      }
      else
      {
        int v3 = a2;
      }
      int v4 = v3 - 1;
      do
      {
        if (a1 % a3 >= 0xA) {
          char v5 = 87;
        }
        else {
          char v5 = 48;
        }
        *++int v4 = v5 + a1 % a3;
        BOOL v6 = a1 >= a3;
        a1 /= a3;
      }
      while (v6);
      v4[1] = 0;
      if (v4 > v3)
      {
        unint64_t v7 = (unint64_t)(v3 + 1);
        do
        {
          char v8 = *v4;
          *v4-- = *(unsigned char *)(v7 - 1);
          *(unsigned char *)(v7 - 1) = v8;
        }
        while ((unint64_t)v4 > v7++);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(_WORD *)a2 = 48;
  }
  return a2;
}

const char *LH_atoi(const char *result)
{
  if (result)
  {
    unsigned __int16 v1 = result;
    int v2 = cstdlib_strlen(result);
    if (v2 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      while (1)
      {
        int v4 = v1[v3];
        if (v4 != 32 && v4 != 9) {
          break;
        }
        if (v2 == ++v3) {
          return 0;
        }
      }
    }
    LODWORD(v6) = v3;
    if ((int)v3 < v2 - 1)
    {
      int v7 = v1[v3];
      if (v7 == 45 || (LODWORD(v6) = v3, v7 == 43)) {
        LODWORD(v6) = v3 + 1;
      }
    }
    if ((int)v6 < v2)
    {
      char v8 = &v1[(int)v6];
      while (1)
      {
        int v9 = *(unsigned __int8 *)v8++;
        if ((v9 - 48) > 9) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        if (v2 == v6)
        {
          LODWORD(v6) = v2;
          break;
        }
      }
    }
    if ((int)v6 <= (int)v3)
    {
      return 0;
    }
    else
    {
      uint64_t result = 0;
      uint64_t v6 = (int)v6;
      int v10 = 1;
      do
      {
        int v11 = v1[v6 - 1];
        if ((v11 - 48) > 9)
        {
          if ((int)v3 + 1 != v6) {
            return 0;
          }
          if (v11 != 43)
          {
            if (v11 != 45) {
              return 0;
            }
            uint64_t result = (const char *)-(int)result;
          }
        }
        else
        {
          uint64_t result = (const char *)(result + (v11 - 48) * v10);
          v10 *= 10;
        }
        --v6;
      }
      while (v6 > (int)v3);
    }
  }
  return result;
}

char *LH_utoa(unsigned int a1, char *a2, unsigned int a3)
{
  if (a1)
  {
    uint64_t v3 = a2 - 1;
    do
    {
      if (a1 % a3 >= 0xA) {
        char v4 = 87;
      }
      else {
        char v4 = 48;
      }
      *++uint64_t v3 = v4 + a1 % a3;
      BOOL v5 = a1 >= a3;
      a1 /= a3;
    }
    while (v5);
    v3[1] = 0;
    if (v3 > a2)
    {
      uint64_t v6 = a2 + 1;
      do
      {
        char v7 = *v3;
        *v3-- = *(v6 - 1);
        *(v6 - 1) = v7;
      }
      while (v3 > v6++);
    }
  }
  else
  {
    *(_WORD *)a2 = 48;
  }
  return a2;
}

const char *LH_atou(const char *result)
{
  if (result)
  {
    unsigned __int16 v1 = result;
    int v2 = cstdlib_strlen(result);
    if (v2 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      while (1)
      {
        int v4 = v1[v3];
        if (v4 != 32 && v4 != 9) {
          break;
        }
        if (v2 == ++v3) {
          return 0;
        }
      }
    }
    LODWORD(v6) = v3;
    if ((int)v3 < v2 - 1)
    {
      if (v1[v3] == 43) {
        LODWORD(v6) = v3 + 1;
      }
      else {
        LODWORD(v6) = v3;
      }
    }
    if ((int)v6 < v2)
    {
      char v7 = &v1[(int)v6];
      while (1)
      {
        int v8 = *(unsigned __int8 *)v7++;
        if ((v8 - 48) > 9) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        if (v2 == v6)
        {
          LODWORD(v6) = v2;
          break;
        }
      }
    }
    if ((int)v6 > (int)v3)
    {
      int v9 = 0;
      uint64_t v6 = (int)v6;
      int v10 = 1;
      while (1)
      {
        int v11 = v1[v6 - 1];
        if ((v11 - 48) > 9)
        {
          uint64_t result = 0;
          if ((int)v3 + 1 != v6 || v11 != 43) {
            return result;
          }
        }
        else
        {
          int v9 = (const char *)(v9 + (v11 - 48) * v10);
          v10 *= 10;
        }
        --v6;
        uint64_t result = v9;
        if (v6 <= (int)v3) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

char *LH_stristr(char *a1, char *__s)
{
  uint64_t result = 0;
  if (a1 && __s)
  {
    if (*a1 && *__s && (unsigned int v5 = cstdlib_strlen(__s), v6 = cstdlib_tolower(*__s), (v7 = *a1) != 0))
    {
      int v8 = v6;
      while (cstdlib_tolower(v7) != v8
           || LH_strnicmp((uint64_t)a1, (uint64_t)__s, v5))
      {
        int v9 = *++a1;
        char v7 = v9;
        if (!v9) {
          return 0;
        }
      }
      return a1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_DWORD *extstdlib_wcsncat(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v4 = a1;
  while (*v4++)
    ;
  if (a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a3;
    while (1)
    {
      int v8 = *(_DWORD *)(a2 + v6 * 4);
      v4[v6 - 1] = v8;
      if (!v8) {
        break;
      }
      ++v6;
      if (!--v7) {
        return a1;
      }
    }
    if (v7 != 1) {
      bzero(&v4[v6], 4 * a3 - v6 * 4 - 4);
    }
  }
  return a1;
}

_DWORD *extstdlib_wcscat(_DWORD *result, int *a2)
{
  int v2 = result;
  while (*v2++)
    ;
  int v4 = *a2;
  *(v2 - 1) = *a2;
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = a2[v5 + 1];
      v2[v5++] = v6;
    }
    while (v6);
  }
  return result;
}

int *extstdlib_wcscpy(int *result, int *a2)
{
  int v2 = *a2;
  *uint64_t result = *a2;
  if (v2)
  {
    uint64_t v3 = result + 1;
    int v4 = a2 + 1;
    do
    {
      int v5 = *v4++;
      *v3++ = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t extstdlib_wcschr(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 4;
  do
  {
    int v4 = *(_DWORD *)(v2 + 4);
    v2 += 4;
    int v3 = v4;
    if (v4) {
      BOOL v5 = v3 == a2;
    }
    else {
      BOOL v5 = 1;
    }
  }
  while (!v5);
  if (v3 == a2) {
    return v2;
  }
  else {
    return 0;
  }
}

int *extstdlib_wcsstr(int *result, _DWORD *a2)
{
  if (*a2)
  {
    int v2 = *result;
    if (*result)
    {
      while (1)
      {
        uint64_t v3 = 0;
        while (1)
        {
          int v4 = a2[v3];
          if (!v4 || v2 != v4) {
            break;
          }
          int v2 = result[++v3];
          if (!v2)
          {
            int v4 = a2[v3];
            break;
          }
        }
        if (!v4) {
          break;
        }
        int v6 = result[1];
        ++result;
        int v2 = v6;
        if (!v6) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t extstdlib_wcscmp(int *a1, int *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (*a1 == *a2 && v3 != 0)
  {
    BOOL v5 = a2 + 1;
    int v6 = a1 + 1;
    do
    {
      int v7 = *v6++;
      int v2 = v7;
      int v8 = *v5++;
      int v3 = v8;
    }
    while (v2 == v8 && v3 != 0);
  }
  BOOL v10 = __OFSUB__(v2, v3);
  int v12 = v2 - v3;
  char v11 = (v12 < 0) ^ v10;
  BOOL v13 = v12 != 0;
  if (v11) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v13;
  }
}

uint64_t extstdlib_wcslen(uint64_t a1)
{
  uint64_t v1 = 0;
  do
  {
    int v2 = *(_DWORD *)(a1 + v1);
    v1 += 4;
  }
  while (v2);
  return (v1 >> 2) - 1;
}

uint64_t extstdlib_wcsncpy(uint64_t a1, int *a2, uint64_t a3)
{
  if (a3)
  {
    size_t v5 = 4 * a3 - 4;
    for (int i = (_DWORD *)(a1 + 4); ; ++i)
    {
      int v7 = *a2;
      *(i - 1) = *a2;
      if (!v7) {
        break;
      }
      ++a2;
      v5 -= 4;
      if (!--a3) {
        return a1;
      }
    }
    if (a3 != 1) {
      bzero(i, v5);
    }
  }
  return a1;
}

char *extstdlib_strtok_r(char *__s, char *__charset, const char **a3)
{
  size_t v5 = __s;
  if (!__s) {
    size_t v5 = *a3;
  }
  int v6 = (char *)&v5[cstdlib_strspn(v5, __charset)];
  if (!*v6) {
    return 0;
  }
  int v7 = cstdlib_strpbrk(v6, __charset);
  if (v7)
  {
    char *v7 = 0;
    int v8 = v7 + 1;
  }
  else
  {
    int v8 = cstdlib_strchr(v6, 0);
  }
  *a3 = v8;
  return v6;
}

uint64_t depes_tolower(uint64_t result)
{
  if ((result - 65) > 0x19)
  {
    switch((int)result)
    {
      case 142:
        LOBYTE(result) = -124;
        break;
      case 143:
        LOBYTE(result) = -122;
        break;
      case 144:
        LOBYTE(result) = -126;
        break;
      case 145:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
        return result;
      case 146:
        LOBYTE(result) = -111;
        break;
      case 153:
        LOBYTE(result) = -108;
        break;
      case 154:
        LOBYTE(result) = -127;
        break;
      default:
        if (result == 128)
        {
          LOBYTE(result) = -121;
        }
        else if (result == 165)
        {
          LOBYTE(result) = -92;
        }
        break;
    }
  }
  else
  {
    LOBYTE(result) = result + 32;
  }
  return result;
}

uint64_t ssft_tolower(int a1)
{
  switch(a1)
  {
    case 138:
      return (a1 + 16);
    case 159:
      return -1;
    case 140:
      return (a1 + 16);
    default:
      BOOL v3 = (a1 + 64) < 0x17u || (a1 - 65) < 0x1Au || (a1 & 0xF8) == 216;
      unsigned __int8 v1 = a1 + 32;
      if (!v3) {
        return a1;
      }
      break;
  }
  return v1;
}

uint64_t ssft_towlower(int a1)
{
  __int16 v1 = 32;
  if ((a1 - 216) < 7 || (unsigned __int16)(a1 - 65) < 0x1Au || (unsigned __int16)(a1 - 192) < 0x17u) {
    return (unsigned __int16)(v1 + a1);
  }
  if ((a1 - 256) <= 0x36 && (a1 & 1) == 0
    || (unsigned __int16)(a1 - 328) >= 0xFFF1u && (a1 & 1) != 0
    || (a1 - 330) <= 0x2E && (a1 & 1) == 0
    || (unsigned __int16)(a1 - 382) >= 0xFFFBu && (a1 & 1) != 0)
  {
    if (a1 == 376) {
      __int16 v1 = -121;
    }
    else {
      __int16 v1 = 1;
    }
    BOOL v2 = a1 == 304;
    __int16 v3 = -199;
    goto LABEL_16;
  }
  if (a1 - 902) < 7 && ((0x5Du >> (a1 + 122)))
  {
    __int16 v1 = asc_2206DC740[(__int16)(a1 - 902)];
    return (unsigned __int16)(v1 + a1);
  }
  int v5 = a1 & 0xFFFE;
  if ((a1 - 913) >= 0x11 && (unsigned __int16)(a1 - 931) >= 9u && v5 != 910)
  {
    if (a1 - 1024) >= 0x30 && ((a1 - 1120) > 0x20 || (a1))
    {
      if ((a1 - 1164) <= 0x32)
      {
LABEL_28:
        if (a1)
        {
LABEL_29:
          __int16 v1 = 0;
          return (unsigned __int16)(v1 + a1);
        }
        goto LABEL_34;
      }
      if ((unsigned __int16)(((unsigned __int16)(a1 - 1217) >> 1) | (((_WORD)a1 - 1217) << 15)) > 5u
        || ((1 << ((unsigned __int16)(a1 - 1217) >> 1)) & 0x2B) == 0)
      {
        if ((a1 - 1232) > 0x24)
        {
          if (a1 != 1272) {
            goto LABEL_29;
          }
LABEL_38:
          if ((((_WORD)a1 - 1040) & 0xFFE0) != 0) {
            __int16 v1 = 1;
          }
          else {
            __int16 v1 = 32;
          }
          return (unsigned __int16)(v1 + a1);
        }
        goto LABEL_28;
      }
    }
LABEL_34:
    if ((a1 & 0xFFF0) == 0x400)
    {
      __int16 v1 = 80;
      return (unsigned __int16)(v1 + a1);
    }
    goto LABEL_38;
  }
  BOOL v2 = v5 == 910;
  __int16 v1 = 32;
  __int16 v3 = 63;
LABEL_16:
  if (v2) {
    __int16 v1 = v3;
  }
  return (unsigned __int16)(v1 + a1);
}

const char *TxtEncodingGetName(int a1)
{
  uint64_t v2 = 0;
  uint64_t result = "default";
  while (LODWORD((&TXTENC_EncodingTable)[v2 + 1]) != a1)
  {
    v2 += 4;
    if (v2 == 512) {
      return result;
    }
  }
  return (&TXTENC_EncodingTable)[v2];
}

uint64_t TxtEncodingGetId(unsigned __int8 *a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    uint64_t v2 = (&TXTENC_EncodingTable)[4 * v1];
    __int16 v3 = a1;
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      int v6 = v5 + 32;
      if ((v5 - 65) < 0x1A) {
        int v4 = v6;
      }
      int v8 = *v2++;
      int v7 = v8;
      int v9 = v8 + 32;
      if ((v8 - 65) < 0x1A) {
        int v7 = v9;
      }
      if (v4) {
        BOOL v10 = v4 == v7;
      }
      else {
        BOOL v10 = 0;
      }
    }
    while (v10);
    if (v4 == v7) {
      break;
    }
    if (++v1 == 128) {
      return 0;
    }
  }
  return LODWORD((&TXTENC_EncodingTable)[4 * v1 + 1]);
}

char *TxtEncodingGetMap(int a1, int a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    __int16 v3 = &(&TXTENC_EncodingTable)[v2];
    if (LODWORD((&TXTENC_EncodingTable)[v2 + 1]) == a1) {
      break;
    }
    v2 += 4;
    if (v2 == 512) {
      return 0;
    }
  }
  int v5 = v3 + 3;
  if (a2) {
    int v5 = v3 + 2;
  }
  return *v5;
}

uint64_t TxtEncodingCharToWChar(uint64_t result, _DWORD *a2)
{
  if (a2)
  {
    if (a2 == BuckToWChar)
    {
      LODWORD(result) = BuckToWChar[result];
    }
    else if ((result & 0x80) != 0)
    {
      LODWORD(result) = a2[(result - 128)];
    }
  }
  return (unsigned __int16)result;
}

uint64_t TxtEncodingWCharToChar(uint64_t result, __int16 *a2)
{
  if (!a2 || result <= 0x7F && a2 != WCharToBuck) {
    return result;
  }
  int v2 = 0;
  if (a2 == WCharToBuck) {
    int v3 = 94;
  }
  else {
    int v3 = 127;
  }
  while (1)
  {
    unsigned int v4 = (unsigned __int16)a2[2 * ((v3 + v2) / 2)];
    if (v4 <= result) {
      break;
    }
    int v3 = (v3 + v2) / 2 - 1;
LABEL_12:
    if (v2 > v3) {
      return 0;
    }
  }
  if (v4 != result)
  {
    int v2 = (v3 + v2) / 2 + 1;
    goto LABEL_12;
  }
  return LOBYTE(a2[2 * ((uint64_t)(v3 + v2 + (v3 + v2 < 0)) >> 1) + 1]);
}

uint64_t TxtEncodingCharUTF8ToUTF16(unsigned __int8 *a1)
{
  if (!a1) {
    return 0;
  }
  unsigned __int16 v1 = *a1;
  if ((char)*a1 < 0)
  {
    __int16 v2 = a1[1];
    if ((v1 + 62) <= 0x1Du)
    {
      __int16 v3 = v2 + (v1 << 6);
      __int16 v4 = -12416;
      return (unsigned __int16)(v3 + v4);
    }
    if (a1[1])
    {
      __int16 v5 = a1[2];
      if ((v1 & 0xF0) != 0xE0)
      {
        if (a1[2])
        {
          __int16 v6 = a1[3] - 128;
          v5 <<= 6;
          goto LABEL_13;
        }
LABEL_12:
        __int16 v6 = -128;
LABEL_13:
        if ((v1 + 16) <= 4u) {
          return (unsigned __int16)(v5 + (v2 << 12) + v6 - 0x2000);
        }
        return 0;
      }
    }
    else
    {
      __int16 v5 = 0;
      if ((v1 & 0xF0) != 0xE0) {
        goto LABEL_12;
      }
    }
    __int16 v3 = (v2 << 6) + (v1 << 12);
    __int16 v4 = v5 - 8320;
    return (unsigned __int16)(v3 + v4);
  }
  return v1;
}

uint64_t TxtEncodingCharUTF16ToUTF8(unsigned int a1, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  if (a1 > 0x7F)
  {
    if (a1 > 0x7FE)
    {
      if (a1 != 0xFFFF)
      {
        *(unsigned char *)a2 = (a1 >> 12) | 0xE0;
        *(unsigned char *)(a2 + 1) = (a1 >> 6) & 0x3F | 0x80;
        *(unsigned char *)(a2 + 2) = a1 & 0x3F | 0x80;
      }
    }
    else
    {
      *(unsigned char *)a2 = (a1 >> 6) - 64;
      *(unsigned char *)(a2 + 1) = a1 & 0x3F | 0x80;
    }
  }
  else
  {
    *(unsigned char *)a2 = a1;
  }
  return a2;
}

char *TxtEncodingConvert(uint64_t a1, int a2, int a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t *a8)
{
  int v9 = (unsigned char *)a6;
  char v11 = a4;
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v115 = 0;
  if (a8) {
    *a8 = 0;
  }
  if (!a4) {
    return 0;
  }
  if (a2 != 65001)
  {
    if (a2 != 1201)
    {
      if (a2 != 1200)
      {
        switch(a3)
        {
          case 1200:
            int v14 = 0;
            int v15 = 0;
            int v16 = 0;
            int v17 = 0;
            int v18 = 0;
            int v19 = 4;
            break;
          case 1201:
            int v20 = 0;
            int v14 = 0;
            int v21 = 0;
            int v16 = 0;
            int v17 = 0;
            int v18 = 0;
            int v19 = 4;
            int v15 = 1;
LABEL_35:
            int v22 = 1;
            goto LABEL_36;
          case 65001:
            int v20 = 0;
            int v22 = 0;
            int v16 = 0;
            int v17 = 0;
            int v18 = 0;
            int v19 = 4;
            int v14 = 1;
            int v15 = 1;
            int v21 = 1;
LABEL_36:
            int v23 = 1;
            goto LABEL_37;
          default:
            int v14 = 0;
            int v15 = 0;
            int v16 = 0;
            int v17 = 0;
            int v18 = 0;
            int v19 = 3;
            break;
        }
LABEL_34:
        int v20 = 1;
        int v21 = 1;
        goto LABEL_35;
      }
      if (a3 != 1200)
      {
        if (a3 != 1201)
        {
          int v14 = 0;
          int v15 = 0;
          int v16 = 0;
          int v17 = 0;
          int v18 = 0;
          if (a3 == 65001) {
            int v19 = 7;
          }
          else {
            int v19 = 5;
          }
          goto LABEL_34;
        }
        goto LABEL_23;
      }
      goto LABEL_24;
    }
    switch(a3)
    {
      case 1200:
LABEL_23:
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 0;
        int v19 = 10;
        goto LABEL_34;
      case 1201:
LABEL_24:
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v18 = 0;
        int v19 = 2;
        goto LABEL_34;
      case 65001:
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        int v17 = 0;
        int v19 = 8;
        int v20 = 1;
        int v21 = 1;
        int v22 = 1;
        int v23 = 1;
        int v18 = 1;
        goto LABEL_37;
    }
    int v20 = 0;
    int v14 = 0;
    int v23 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 10;
LABEL_30:
    int v15 = 1;
    int v21 = 1;
    int v22 = 1;
    int v16 = 1;
    goto LABEL_37;
  }
  if (a3 == 1200)
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 6;
    goto LABEL_34;
  }
  if (a3 == 1201)
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    int v18 = 0;
    int v19 = 9;
    int v20 = 1;
    int v21 = 1;
    int v22 = 1;
    int v23 = 1;
    int v17 = 1;
    goto LABEL_37;
  }
  if (a3 != 65001)
  {
    int v20 = 0;
    int v14 = 0;
    int v23 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 6;
    goto LABEL_30;
  }
  int v14 = 0;
  int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  int v18 = 0;
  int v20 = 1;
  int v21 = 1;
  int v22 = 1;
  int v23 = 1;
  int v19 = 1;
LABEL_37:
  if (!(a1 | a6)) {
    return 0;
  }
  switch(v19)
  {
    case 1:
      if (!v20) {
        return 0;
      }
      if (a6)
      {
        if (!a5)
        {
          unint64_t v32 = 0;
          size_t v38 = 0;
LABEL_291:
          v9[v38] = 0;
          if (a8) {
            goto LABEL_312;
          }
          return v9;
        }
        size_t v38 = 0;
        unint64_t v39 = 0;
        unint64_t v32 = 0;
        while (1)
        {
          int v40 = v11[v39];
          if (!v11[v39]) {
            goto LABEL_291;
          }
          if ((v40 & 0x80000000) == 0) {
            break;
          }
          if ((v40 + 62) < 0x1E)
          {
            size_t v41 = 2;
            goto LABEL_93;
          }
          if ((v40 & 0xFFFFFFF0) == 0xFFFFFFE0)
          {
            size_t v41 = 3;
            goto LABEL_93;
          }
          if ((v40 + 11) >= 0xFBu)
          {
            size_t v41 = 4;
            goto LABEL_93;
          }
          unint64_t v42 = a7;
          size_t v41 = 1;
LABEL_95:
          if (++v32 < a5)
          {
            v39 += v41;
            a7 = v42;
            if (v39 < a5) {
              continue;
            }
          }
          goto LABEL_291;
        }
        size_t v41 = 1;
LABEL_93:
        size_t v43 = v41 + v38;
        if (v41 + v38 >= a7) {
          goto LABEL_291;
        }
        unint64_t v42 = a7;
        cstdlib_memcpy(&v9[v38], &v11[v39], v41);
        size_t v38 = v43;
        goto LABEL_95;
      }
      if (a5)
      {
        size_t v61 = 0;
        unint64_t v32 = 0;
        while (1)
        {
          int v62 = v11[v61];
          if (!v11[v61]) {
            break;
          }
          if (v62 < 0)
          {
            if ((v62 + 62) >= 0x1E)
            {
              if ((v62 & 0xFFFFFFF0) == 0xFFFFFFE0)
              {
                uint64_t v63 = 3;
              }
              else if ((v62 + 11) < 0xFBu)
              {
                uint64_t v63 = 1;
              }
              else
              {
                uint64_t v63 = 4;
              }
            }
            else
            {
              uint64_t v63 = 2;
            }
          }
          else
          {
            uint64_t v63 = 1;
          }
          v61 += v63;
          if (a5 == ++v32)
          {
            unint64_t v32 = a5;
            break;
          }
        }
      }
      else
      {
        unint64_t v32 = 0;
        size_t v61 = 0;
      }
      unsigned int v96 = strhelper_StringAppend((uint64_t *)a1, 0, v11, v61, &v115, 0x100uLL);
      int v9 = v96;
      if (!a8 || !v96) {
        return v9;
      }
LABEL_312:
      *a8 = v32;
      return v9;
    case 2:
      if (!v20) {
        return 0;
      }
      if (!a6)
      {
        uint64_t v64 = TxtwStringAppend(a1, (unsigned __int16 *)a4, a5, &v115);
        int v9 = v64;
        if (a8 && v64) {
          *a8 = LH_wcslen((uint64_t)v64);
        }
        return v9;
      }
      unint64_t v44 = 0;
      if (!a5) {
        goto LABEL_104;
      }
      while (*(_WORD *)&a4[2 * v44])
      {
        if (a5 == ++v44)
        {
          unint64_t v44 = a5;
          break;
        }
      }
LABEL_104:
      unint64_t v45 = (a7 >> 1) - 1;
      if (v44 < v45) {
        unint64_t v45 = v44;
      }
      if (a7 == 1) {
        unint64_t v45 = 0;
      }
      if (a7) {
        uint64_t v46 = v45;
      }
      else {
        uint64_t v46 = v44;
      }
      LH_wcsncpy(a6, (unsigned __int16 *)a4, v46);
      *(_WORD *)&v9[2 * v46] = 0;
      if (a8) {
        goto LABEL_155;
      }
      return v9;
    case 3:
      if (!v20) {
        return 0;
      }
      if (a6)
      {
        unint64_t v47 = 0;
        if (a5)
        {
          do
          {
            if (!a4[v47]) {
              goto LABEL_119;
            }
            ++v47;
          }
          while (a5 != v47);
          unint64_t v47 = a5;
        }
LABEL_119:
        if (v47 >= a7) {
          unint64_t v48 = a7;
        }
        else {
          unint64_t v48 = v47;
        }
        goto LABEL_201;
      }
      unint64_t v48 = 0;
      if (!a5) {
        goto LABEL_200;
      }
      while (a4[v48])
      {
        if (a5 == ++v48)
        {
          unint64_t v48 = a5;
          break;
        }
      }
LABEL_200:
      int v9 = (unsigned char *)heap_Alloc(a1, (v48 + 1));
      if (!v9) {
        return v9;
      }
LABEL_201:
      uint64_t v65 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v65 + 1]) != a3)
      {
        v65 += 4;
        if (v65 == 512)
        {
          uint64_t v66 = 0;
          goto LABEL_206;
        }
      }
      uint64_t v66 = (__int16 *)(&TXTENC_EncodingTable)[v65 + 3];
LABEL_206:
      uint64_t v67 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v67 + 1]) != a2)
      {
        v67 += 4;
        if (v67 == 512)
        {
          uint64_t v68 = 0;
          goto LABEL_211;
        }
      }
      uint64_t v68 = (&TXTENC_EncodingTable)[v67 + 2];
LABEL_211:
      unint64_t v69 = 0;
      if (v48)
      {
        int v70 = v9;
        do
        {
          int v72 = *v11++;
          int v71 = v72;
          if (v68)
          {
            if (v68 == (char *)BuckToWChar)
            {
              int v71 = BuckToWChar[v71];
            }
            else if ((v71 & 0x80) != 0)
            {
              int v71 = *(_DWORD *)&v68[4 * (v71 - 128)];
            }
          }
          if (!(_WORD)v71) {
            break;
          }
          int v73 = TxtEncodingWCharToChar((unsigned __int16)v71, v66);
          unsigned char *v70 = v73;
          if (v73) {
            v9[v69++] = v73;
          }
          ++v70;
          --v48;
        }
        while (v48);
      }
      if (a8) {
        *a8 = v69;
      }
      v9[v69] = 0;
      return v9;
    case 4:
      char v49 = v14 ^ 1;
      if (a6) {
        char v49 = 1;
      }
      if ((v49 & 1) == 0) {
        goto LABEL_125;
      }
      if (v21 & v15 & v22) {
        return 0;
      }
      __s[0] = 0;
      uint64_t v55 = a6;
      int v113 = v14;
      if (a6) {
        goto LABEL_316;
      }
      if (a5)
      {
        uint64_t v56 = 0;
        while (a4[v56])
        {
          if (a5 == ++v56)
          {
            unint64_t v57 = a7;
            LODWORD(v56) = a5;
            goto LABEL_315;
          }
        }
        unint64_t v57 = a7;
      }
      else
      {
        unint64_t v57 = a7;
        LODWORD(v56) = 0;
      }
LABEL_315:
      uint64_t v55 = heap_Alloc(a1, (2 * v56 + 2));
      a7 = v57;
      int v14 = v113;
      if (!v55) {
        return (char *)v55;
      }
LABEL_316:
      uint64_t v97 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v97 + 1]) != a2)
      {
        v97 += 4;
        if (v97 == 512)
        {
          uint64_t v98 = 0;
          goto LABEL_321;
        }
      }
      uint64_t v98 = (&TXTENC_EncodingTable)[v97 + 2];
LABEL_321:
      if (a5)
      {
        size_t v99 = 0;
        unint64_t v100 = 0;
        unint64_t v101 = 2;
        char v110 = v98;
        uint64_t v112 = v55;
        while (1)
        {
          unsigned int v102 = v11[v100];
          if (v98)
          {
            if (v98 == (char *)BuckToWChar)
            {
              unsigned int v102 = BuckToWChar[v11[v100]];
            }
            else if ((v102 & 0x80) != 0)
            {
              unsigned int v102 = *(_DWORD *)&v98[4 * v102 - 512];
            }
          }
          if (!(_WORD)v102) {
            break;
          }
          unsigned int v103 = bswap32(v102) >> 16;
          if (v21) {
            unsigned int v104 = v102;
          }
          else {
            unsigned int v104 = v103;
          }
          if (v14)
          {
            *(_DWORD *)__s = 0;
            unint64_t v105 = a7;
            if ((unsigned __int16)v104 > 0x7Fu)
            {
              if ((unsigned __int16)v104 > 0x7FEu)
              {
                if ((_WORD)v104 != 0xFFFF)
                {
                  __s[0] = ((unsigned __int16)v104 >> 12) | 0xE0;
                  __s[1] = (v104 >> 6) & 0x3F | 0x80;
                  __s[2] = v104 & 0x3F | 0x80;
                }
              }
              else
              {
                __s[0] = (v104 >> 6) - 64;
                __s[1] = v104 & 0x3F | 0x80;
              }
            }
            else
            {
              __s[0] = v104;
            }
            size_t v106 = cstdlib_strlen(__s);
            unint64_t v101 = 1;
            a7 = v105;
            int v14 = v113;
            uint64_t v98 = v110;
            uint64_t v55 = v112;
          }
          else
          {
            size_t v106 = 1;
          }
          if (!v9) {
            goto LABEL_344;
          }
          size_t v107 = v106 + v99;
          if (v106 + v99 >= a7 / v101) {
            break;
          }
          if (v101 != 2)
          {
            unint64_t v108 = a7;
            cstdlib_memcpy((void *)(v55 + v99), __s, v106);
            uint64_t v98 = v110;
            uint64_t v55 = v112;
            int v14 = v113;
            a7 = v108;
            size_t v99 = v107;
          }
          else
          {
LABEL_344:
            *(_WORD *)(v55 + 2 * v99++) = v104;
          }
          if (a5 == ++v100)
          {
            unint64_t v100 = a5;
            break;
          }
        }
      }
      else
      {
        unint64_t v100 = 0;
        size_t v99 = 0;
        unint64_t v101 = 2;
      }
      if (a8) {
        *a8 = v100;
      }
      if (v101 == 1) {
        *(unsigned char *)(v55 + v99) = 0;
      }
      else {
        *(_WORD *)(v55 + 2 * v99) = 0;
      }
      return (char *)v55;
    case 5:
      if (!v20) {
        return 0;
      }
      if (a6)
      {
        unint64_t v50 = 0;
        if (a5)
        {
          do
          {
            if (!*(_WORD *)&a4[2 * v50]) {
              goto LABEL_134;
            }
            ++v50;
          }
          while (a5 != v50);
          unint64_t v50 = a5;
        }
LABEL_134:
        unint64_t v51 = a7 - 1;
        if (v50 < a7 - 1) {
          unint64_t v51 = v50;
        }
        if (a7 == 1) {
          unint64_t v51 = 0;
        }
        if (a7) {
          unint64_t v52 = v51;
        }
        else {
          unint64_t v52 = v50;
        }
        goto LABEL_230;
      }
      unint64_t v52 = 0;
      if (!a5) {
        goto LABEL_229;
      }
      while (*(_WORD *)&a4[2 * v52])
      {
        if (a5 == ++v52)
        {
          unint64_t v52 = a5;
          break;
        }
      }
LABEL_229:
      int v9 = (unsigned char *)heap_Alloc(a1, (v52 + 1));
      if (!v9) {
        return v9;
      }
LABEL_230:
      uint64_t v74 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v74 + 1]) != a3)
      {
        v74 += 4;
        if (v74 == 512)
        {
          uint64_t v75 = 0;
          goto LABEL_235;
        }
      }
      uint64_t v75 = (__int16 *)(&TXTENC_EncodingTable)[v74 + 3];
LABEL_235:
      for (unint64_t i = 0; v52; --v52)
      {
        unsigned int v77 = *(unsigned __int16 *)v11;
        v11 += 2;
        int v78 = TxtEncodingWCharToChar(v77, v75);
        if (v78) {
          v9[i++] = v78;
        }
      }
LABEL_307:
      v9[i] = 0;
      if (a8) {
        *a8 = i;
      }
      return v9;
    case 6:
    case 9:
      if (v15 & v23) {
        return 0;
      }
      if (a6) {
        goto LABEL_253;
      }
      if (!a5)
      {
        unint64_t v30 = a7;
        LODWORD(v26) = 0;
        goto LABEL_249;
      }
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      while (2)
      {
        int v27 = a4[v25];
        if (a4[v25])
        {
          if (v27 < 0)
          {
            if ((v27 + 62) >= 0x1E)
            {
              if ((v27 & 0xFFFFFFF0) == 0xFFFFFFE0)
              {
                uint64_t v28 = 3;
              }
              else
              {
                if ((v27 + 11) < 0xFBu)
                {
                  ++v25;
                  goto LABEL_59;
                }
                uint64_t v28 = 4;
              }
            }
            else
            {
              uint64_t v28 = 2;
            }
          }
          else
          {
            uint64_t v28 = 1;
          }
          unint64_t v29 = v28 + v25;
          if (v25 < v28 + v25)
          {
            do
            {
              if (!a4[v25]) {
                goto LABEL_59;
              }
              ++v25;
              --v28;
            }
            while (v28);
            unint64_t v25 = v29;
          }
LABEL_59:
          if (++v26 == a5)
          {
            unint64_t v30 = a7;
            LODWORD(v26) = a5;
            goto LABEL_249;
          }
          continue;
        }
        break;
      }
      unint64_t v30 = a7;
LABEL_249:
      uint64_t v79 = (v26 + 1);
      uint64_t v80 = (2 * v26 + 2);
      if (v23) {
        uint64_t v81 = v80;
      }
      else {
        uint64_t v81 = v79;
      }
      int v9 = (unsigned char *)heap_Alloc(a1, v81);
      a7 = v30;
      if (!v9) {
        return v9;
      }
LABEL_253:
      uint64_t v82 = 0;
      while (LODWORD((&TXTENC_EncodingTable)[v82 + 1]) != a3)
      {
        v82 += 4;
        if (v82 == 512)
        {
          uint64_t v114 = 0;
          goto LABEL_258;
        }
      }
      uint64_t v114 = (__int16 *)(&TXTENC_EncodingTable)[v82 + 3];
LABEL_258:
      unint64_t v83 = 0;
      if (!a5)
      {
LABEL_285:
        if (a8) {
          *a8 = v83;
        }
        if (v16) {
          v9[v83] = 0;
        }
        else {
          *(_WORD *)&v9[2 * v83] = 0;
        }
        return v9;
      }
      size_t v84 = 0;
      uint64_t v85 = 0;
      unint64_t v111 = a7 - 1;
      unint64_t v109 = (a7 - 1) >> 1;
      break;
    case 7:
    case 8:
      if (!v20) {
        return 0;
      }
      if (!a6)
      {
LABEL_125:
        return ToUTF8((uint64_t *)a1, (uint64_t)a4, a5, a2, a8);
      }
      if (a5)
      {
        size_t v31 = 0;
        unint64_t v32 = 0;
        size_t v33 = a7 - 1;
        while (1)
        {
          unsigned int v34 = *(unsigned __int16 *)&v11[2 * v32];
          if (!*(_WORD *)&v11[2 * v32]) {
            break;
          }
          unsigned int v35 = __rev16(v34);
          if (v18) {
            unsigned int v34 = v35;
          }
          *(_DWORD *)__s = 0;
          if (v34 > 0x7F)
          {
            if (v34 > 0x7FE)
            {
              if (v34 != 0xFFFF)
              {
                __s[0] = (v34 >> 12) | 0xE0;
                __s[1] = (v34 >> 6) & 0x3F | 0x80;
                __s[2] = v34 & 0x3F | 0x80;
              }
            }
            else
            {
              __s[0] = (v34 >> 6) - 64;
              __s[1] = v34 & 0x3F | 0x80;
            }
          }
          else
          {
            __s[0] = v34;
          }
          size_t v36 = cstdlib_strlen(__s);
          size_t v37 = v36 + v31;
          if (v36 + v31 >= v33) {
            break;
          }
          if (v36) {
            cstdlib_strncpy(&v9[v31], __s, v36);
          }
          ++v32;
          size_t v31 = v37;
          if (a5 == v32)
          {
            unint64_t v32 = a5;
            size_t v31 = v37;
            break;
          }
        }
      }
      else
      {
        unint64_t v32 = 0;
        size_t v31 = 0;
      }
      v9[v31] = 0;
      if (a8) {
        goto LABEL_312;
      }
      return v9;
    case 10:
      if (!v20)
      {
        if (!v16) {
          return 0;
        }
        if (a6)
        {
          unint64_t v58 = 0;
          if (a5)
          {
            do
            {
              if (!*(_WORD *)&a4[2 * v58]) {
                goto LABEL_169;
              }
              ++v58;
            }
            while (a5 != v58);
            unint64_t v58 = a5;
          }
LABEL_169:
          unint64_t v59 = a7 - 1;
          if (v58 < a7 - 1) {
            unint64_t v59 = v58;
          }
          if (a7 == 1) {
            unint64_t v59 = 0;
          }
          if (a7) {
            unint64_t v60 = v59;
          }
          else {
            unint64_t v60 = v58;
          }
        }
        else
        {
          unint64_t v60 = 0;
          if (a5)
          {
            do
            {
              if (!*(_WORD *)&a4[2 * v60]) {
                goto LABEL_297;
              }
              ++v60;
            }
            while (a5 != v60);
            unint64_t v60 = a5;
          }
LABEL_297:
          int v9 = (unsigned char *)heap_Alloc(a1, (v60 + 1));
          if (!v9) {
            return v9;
          }
        }
        uint64_t v92 = 0;
        while (LODWORD((&TXTENC_EncodingTable)[v92 + 1]) != a3)
        {
          v92 += 4;
          if (v92 == 512)
          {
            uint64_t v93 = 0;
            goto LABEL_303;
          }
        }
        uint64_t v93 = (__int16 *)(&TXTENC_EncodingTable)[v92 + 3];
LABEL_303:
        for (unint64_t i = 0; v60; --v60)
        {
          unsigned int v94 = *(unsigned __int16 *)v11;
          v11 += 2;
          int v95 = TxtEncodingWCharToChar(bswap32(v94) >> 16, v93);
          if (v95) {
            v9[i++] = v95;
          }
        }
        goto LABEL_307;
      }
      if (a6)
      {
        unint64_t v53 = 0;
        if (a5)
        {
          while (*(_WORD *)&a4[2 * v53])
          {
            if (a5 == ++v53)
            {
              unint64_t v53 = a5;
              break;
            }
          }
        }
        unint64_t v54 = (a7 >> 1) - 1;
        if (v53 < v54) {
          unint64_t v54 = v53;
        }
        if (a7 == 1) {
          unint64_t v54 = 0;
        }
        if (a7) {
          uint64_t v46 = v54;
        }
        else {
          uint64_t v46 = v53;
        }
        TXTENC_swab(a4, (unsigned char *)a6, 2 * v46 + 2);
        if (a8) {
LABEL_155:
        }
          *a8 = v46;
      }
      else
      {
        unint64_t v32 = 0;
        if (a5)
        {
          while (*(_WORD *)&a4[2 * v32])
          {
            if (a5 == ++v32)
            {
              unint64_t v32 = a5;
              break;
            }
          }
        }
        int v9 = (unsigned char *)heap_Alloc(a1, (2 * v32 + 2) & 0xFFFFFFFE);
        if (v9)
        {
          TXTENC_swab(v11, v9, 2 * v32 + 2);
          if (a8) {
            goto LABEL_312;
          }
        }
      }
      return v9;
    default:
      return 0;
  }
  while (1)
  {
    int v86 = v11[v84];
    if (!v11[v84]) {
      goto LABEL_285;
    }
    if ((v86 & 0x80000000) == 0)
    {
      size_t v87 = 1;
      goto LABEL_270;
    }
    if ((v86 + 62) < 0x1E)
    {
      size_t v87 = 2;
      goto LABEL_270;
    }
    if ((v86 & 0xFFFFFFF0) == 0xFFFFFFE0)
    {
      size_t v87 = 3;
      goto LABEL_270;
    }
    if ((v86 + 11) > 0xFAu) {
      break;
    }
    ++v84;
LABEL_284:
    if (++v85 == a5) {
      goto LABEL_285;
    }
  }
  size_t v87 = 4;
LABEL_270:
  cstdlib_strncpy(__s, &v11[v84], v87);
  __s[v87] = 0;
  LODWORD(v88) = TxtEncodingCharUTF8ToUTF16((unsigned __int8 *)__s);
  unsigned int v89 = __rev16(v88);
  if (v17) {
    uint64_t v88 = v89;
  }
  else {
    uint64_t v88 = v88;
  }
  if (v16)
  {
    if (v83 >= v111) {
      goto LABEL_285;
    }
    int v90 = TxtEncodingWCharToChar(v88, v114);
    if (!v90) {
      goto LABEL_280;
    }
    v9[v83] = v90;
  }
  else
  {
    if (v83 >= v109) {
      goto LABEL_285;
    }
    *(_WORD *)&v9[2 * v83] = v88;
  }
  ++v83;
LABEL_280:
  size_t v91 = v87 + v84;
  if (v84 < v87 + v84)
  {
    while (v11[v84])
    {
      ++v84;
      if (!--v87)
      {
        size_t v84 = v91;
        goto LABEL_284;
      }
    }
  }
  goto LABEL_284;
}

_WORD *TxtwStringAppend(uint64_t a1, unsigned __int16 *a2, uint64_t a3, void *a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v5 = a3;
  if (a3 == -1) {
    uint64_t v5 = LH_wcslen((uint64_t)a2);
  }
  *a4 = v5 + 257;
  int v8 = (_WORD *)heap_Alloc(a1, (2 * (v5 + 257)));
  int v9 = v8;
  if (v8)
  {
    *int v8 = 0;
    uint64_t v10 = LH_wcslen((uint64_t)v8);
    LH_wcsncpy((uint64_t)&v9[v10], a2, v5);
    v9[v5] = 0;
  }
  return v9;
}

char *TXTENC_swab(char *result, unsigned char *a2, unint64_t a3)
{
  unint64_t v3 = a3 >> 1;
  if ((a3 & 0xE) != 0)
  {
    unint64_t v4 = v3 - 1;
    do
    {
      char v5 = *result;
      __int16 v6 = result + 2;
      int v7 = a2 + 2;
      *a2 = result[1];
      a2[1] = v5;
      a2 += 2;
      result += 2;
    }
    while (v4-- & 7);
    v3 += ~(unint64_t)(((_BYTE)v3 - 1) & 7);
    uint64_t result = v6;
    a2 = v7;
  }
  if (v3 >= 8)
  {
    unint64_t v9 = v3 >> 3;
    do
    {
      char v10 = *result;
      *a2 = result[1];
      a2[1] = v10;
      char v11 = result[2];
      a2[2] = result[3];
      a2[3] = v11;
      char v12 = result[4];
      a2[4] = result[5];
      a2[5] = v12;
      char v13 = result[6];
      a2[6] = result[7];
      a2[7] = v13;
      char v14 = result[8];
      a2[8] = result[9];
      a2[9] = v14;
      char v15 = result[10];
      a2[10] = result[11];
      a2[11] = v15;
      char v16 = result[12];
      a2[12] = result[13];
      a2[13] = v16;
      char v17 = result[14];
      a2[14] = result[15];
      a2[15] = v17;
      a2 += 16;
      result += 16;
      --v9;
    }
    while (v9);
  }
  return result;
}

char *ToUTF8(uint64_t *a1, uint64_t a2, unint64_t a3, int a4, unint64_t *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v28 = 0;
  uint64_t v27 = a4 & 0xFFFFFFFE;
  if (v27 == 1200)
  {
    if (a3)
    {
      unint64_t v10 = 0;
      while (*(_WORD *)(a2 + 2 * v10))
      {
        if (a3 == ++v10) {
          goto LABEL_11;
        }
      }
      goto LABEL_13;
    }
  }
  else if (a3)
  {
    unint64_t v10 = 0;
    while (*(unsigned char *)(a2 + v10))
    {
      if (a3 == ++v10)
      {
LABEL_11:
        unint64_t v10 = a3;
        goto LABEL_13;
      }
    }
    goto LABEL_13;
  }
  unint64_t v10 = 0;
LABEL_13:
  unint64_t v11 = v10 / 0x14;
  if (v11 <= 0x100) {
    unint64_t v11 = 256;
  }
  unint64_t v26 = v11;
  uint64_t v12 = heap_Alloc((uint64_t)a1, v11);
  if (!v12) {
    return 0;
  }
  char v13 = (char *)v12;
  uint64_t v14 = 0;
  unint64_t v24 = a5;
  while (LODWORD((&TXTENC_EncodingTable)[v14 + 1]) != a4)
  {
    v14 += 4;
    if (v14 == 512)
    {
      unint64_t v25 = 0;
      goto LABEL_22;
    }
  }
  unint64_t v25 = (&TXTENC_EncodingTable)[v14 + 2];
LABEL_22:
  char v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  do
  {
    __src[0] = 0;
    if (v27 == 1200)
    {
      if (v17 < a3)
      {
        LODWORD(v18) = *(unsigned __int16 *)(a2 + 2 * v17);
        if (*(_WORD *)(a2 + 2 * v17)) {
          goto LABEL_42;
        }
      }
    }
    else if (v17 < a3)
    {
      uint64_t v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(unsigned char *)(a2 + v17))
      {
        if (v25)
        {
          if (v25 == (char *)BuckToWChar)
          {
            LODWORD(v18) = BuckToWChar[v18];
          }
          else if ((v18 & 0x80) != 0)
          {
            LODWORD(v18) = *(_DWORD *)&v25[4 * (v18 - 128)];
          }
        }
LABEL_42:
        unsigned int v22 = bswap32(v18) >> 16;
        if (a4 == 1201) {
          LODWORD(v18) = v22;
        }
        *(_DWORD *)__src = 0;
        if ((unsigned __int16)v18 > 0x7Fu)
        {
          if ((unsigned __int16)v18 > 0x7FEu)
          {
            if ((_WORD)v18 != 0xFFFF)
            {
              __src[0] = ((unsigned __int16)v18 >> 12) | 0xE0;
              __src[1] = (v18 >> 6) & 0x3F | 0x80;
              __src[2] = v18 & 0x3F | 0x80;
            }
          }
          else
          {
            __src[0] = (v18 >> 6) - 64;
            __src[1] = v18 & 0x3F | 0x80;
          }
        }
        else
        {
          __src[0] = v18;
        }
        size_t v19 = cstdlib_strlen(__src);
        int v20 = 0;
        ++v17;
        if (v19 + v16 < v26) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
    }
    size_t v19 = 0;
    int v20 = 1;
LABEL_34:
    v13[v16] = 0;
    int v21 = strhelper_StringAppend(a1, v15, v13, 0xFFFFFFFFFFFFFFFFLL, (uint64_t *)((char *)&v27 + 4), 0x100uLL);
    if (!v21)
    {
      heap_Free(a1, (uint64_t)v15);
      char v15 = 0;
      goto LABEL_55;
    }
    uint64_t v16 = 0;
    char v15 = v21;
LABEL_36:
    if (v19 && !v20)
    {
      cstdlib_memcpy(&v13[v16], __src, v19);
      v16 += v19;
    }
  }
  while (!v20);
  if (v24) {
    *unint64_t v24 = v17;
  }
LABEL_55:
  heap_Free(a1, (uint64_t)v13);
  return v15;
}

size_t TxtEncodingGetOutputBytesRequired(char *__s, size_t a2, int a3, int a4, void *a5)
{
  size_t v7 = a2;
  for (uint64_t i = 0; i != 512; i += 4)
  {
    if (LODWORD((&TXTENC_EncodingTable)[i + 1]) == a3)
    {
      unint64_t v10 = (&TXTENC_EncodingTable)[i + 2];
      if (__s) {
        goto LABEL_7;
      }
      return 0;
    }
  }
  unint64_t v10 = 0;
  if (!__s) {
    return 0;
  }
LABEL_7:
  unsigned int v12 = a4 & 0xFFFFFFFE;
  if ((a3 - 1200) < 2)
  {
    if (a4 == 65001)
    {
      if (a2 == -1) {
        uint64_t v13 = -1;
      }
      else {
        uint64_t v13 = a2 >> 1;
      }
      if (v13)
      {
        uint64_t v14 = 0;
        uint64_t v11 = 0;
        while (1)
        {
          unsigned int v15 = *(unsigned __int16 *)&__s[2 * v14];
          if (!*(_WORD *)&__s[2 * v14]) {
            break;
          }
          unsigned int v16 = __rev16(v15);
          if (a3 == 1201) {
            unsigned int v15 = v16;
          }
          *(_DWORD *)__sa = 0;
          if (v15 > 0x7F)
          {
            if (v15 > 0x7FE)
            {
              if (v15 != 0xFFFF)
              {
                __sa[0] = (v15 >> 12) | 0xE0;
                __sa[1] = (v15 >> 6) & 0x3F | 0x80;
                __sa[2] = v15 & 0x3F | 0x80;
              }
            }
            else
            {
              __sa[0] = (v15 >> 6) - 64;
              __sa[1] = v15 & 0x3F | 0x80;
            }
          }
          else
          {
            __sa[0] = v15;
          }
          v11 += cstdlib_strlen(__sa);
          if (v13 == ++v14)
          {
            uint64_t v14 = v13;
            break;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v14 = 0;
      }
      if (a5) {
        *a5 = v14;
      }
      return v11;
    }
    if (a2 == -1)
    {
      uint64_t v21 = LH_wcslen((uint64_t)__s);
      if (a5) {
LABEL_43:
      }
        *a5 = v21;
    }
    else
    {
      uint64_t v21 = a2 >> 1;
      if (a5) {
        goto LABEL_43;
      }
    }
    return v21 << (v12 == 1200);
  }
  if (a3 == 65001)
  {
    if (a2)
    {
      size_t v17 = 0;
      uint64_t v18 = 0;
      do
      {
        int v19 = __s[v17];
        if (!__s[v17]) {
          break;
        }
        if (v19 < 0)
        {
          if ((v19 + 62) >= 0x1E) {
            LODWORD(v20) = (v19 & 0xFFFFFFF0) == 0xFFFFFFE0 ? 3 : 4 * ((v19 + 11) > 0xFAu);
          }
          else {
            LODWORD(v20) = 2;
          }
        }
        else
        {
          LODWORD(v20) = 1;
        }
        if (v20)
        {
          ++v18;
          uint64_t v20 = v20;
        }
        else
        {
          uint64_t v20 = 1;
        }
        v17 += v20;
      }
      while (v17 < a2);
    }
    else
    {
      uint64_t v18 = 0;
      size_t v17 = 0;
    }
    if (a5) {
      *a5 = v18;
    }
    uint64_t v25 = v18 << (v12 == 1200);
    if (a4 == 65001) {
      return v17;
    }
    else {
      return v25;
    }
  }
  if (a4 != 65001)
  {
    if (a2 == -1) {
      size_t v7 = cstdlib_strlen(__s);
    }
    if (a5) {
      *a5 = v7;
    }
    return v7 << (v12 == 1200);
  }
  if (a2)
  {
    size_t v22 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v23 = __s[v22];
      if (!__s[v22]) {
        goto LABEL_81;
      }
      if (v10)
      {
        if (v10 == (char *)BuckToWChar)
        {
          unsigned int v24 = BuckToWChar[v23];
        }
        else
        {
          if ((v23 & 0x80) == 0)
          {
            int v27 = 0;
            goto LABEL_57;
          }
          unsigned int v24 = *(_DWORD *)&v10[4 * (v23 - 128)];
        }
      }
      else
      {
        unsigned int v24 = __s[v22];
      }
      int v27 = 0;
      LOBYTE(v23) = v24;
      if ((unsigned __int16)v24 > 0x7Fu)
      {
        if ((unsigned __int16)v24 > 0x7FEu)
        {
          if ((_WORD)v24 != 0xFFFF)
          {
            LOBYTE(v27) = ((unsigned __int16)v24 >> 12) | 0xE0;
            BYTE1(v27) = (v24 >> 6) & 0x3F | 0x80;
            BYTE2(v27) = v24 & 0x3F | 0x80;
          }
        }
        else
        {
          LOBYTE(v27) = (v24 >> 6) - 64;
          BYTE1(v27) = v24 & 0x3F | 0x80;
        }
        goto LABEL_62;
      }
LABEL_57:
      LOBYTE(v27) = v23;
LABEL_62:
      v11 += cstdlib_strlen((const char *)&v27);
      if (v7 == ++v22)
      {
        size_t v22 = v7;
        goto LABEL_81;
      }
    }
  }
  uint64_t v11 = 0;
  size_t v22 = 0;
LABEL_81:
  if (a5) {
    *a5 = v22;
  }
  return v11;
}

uint64_t TxtEncodingDetect(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (!a2) {
    return 65001;
  }
  int v5 = *a1;
  if (v5 != 239)
  {
    if (v5 == 254)
    {
      int v10 = a1[1];
      if (v10 == 255) {
        uint64_t result = 1201;
      }
      else {
        uint64_t result = 28591;
      }
      if (!a3 || v10 != 255) {
        return result;
      }
      *a3 = 2;
    }
    else
    {
      if (v5 == 255)
      {
        int v6 = a1[1];
        if (v6 == 254) {
          uint64_t result = 1200;
        }
        else {
          uint64_t result = 28591;
        }
        if (a3 && v6 == 254)
        {
          *a3 = 2;
          return 1200;
        }
        return result;
      }
      unint64_t v11 = a2 - 2;
      if (a2 < 2) {
        return 65001;
      }
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      if (a2 >= 0xFA00) {
        unint64_t v16 = 64000;
      }
      else {
        unint64_t v16 = a2;
      }
      while (2)
      {
        while (2)
        {
          uint64_t v17 = 0;
          unint64_t v18 = v12;
          while (1)
          {
            int v19 = a1[v15 + v17];
            if ((v19 - 127) < 0xFFFFFF82) {
              break;
            }
            ++v17;
            if (v15 + v17 >= a2) {
              goto LABEL_74;
            }
          }
          unint64_t v20 = v15 + v17;
          if (v15 + v17 < a2 - 1 && (v19 & 0xE0) == 0xC0 && (a1[v15 + 1 + v17] & 0xC0) == 0x80)
          {
            uint64_t v27 = 2;
          }
          else if (v20 < v11 {
                 && (v19 & 0xF0) == 0xE0
          }
                 && (uint64_t v21 = &a1[v15 + v17], (v21[1] & 0xC0) == 0x80)
                 && (v21[2] & 0xC0) == 0x80)
          {
            uint64_t v27 = 3;
          }
          else if (v20 < a2 - 3 {
                 && (v19 & 0xF8) == 0xF0
          }
                 && (size_t v22 = &a1[v15 + v17], (v22[1] & 0xC0) == 0x80)
                 && (v22[2] & 0xC0) == 0x80
                 && (a1[v15 + 3 + v17] & 0xC0) == 0x80)
          {
            uint64_t v27 = 4;
          }
          else if (v20 < a2 - 4 {
                 && (v19 & 0xFC) == 0xF8
          }
                 && (uint64_t v23 = &a1[v15 + v17], (v23[1] & 0xC0) == 0x80)
                 && (v23[2] & 0xC0) == 0x80
                 && (unsigned int v24 = &a1[v15 + v17], (v24[3] & 0xC0) == 0x80)
                 && (v24[4] & 0xC0) == 0x80)
          {
            uint64_t v27 = 5;
          }
          else
          {
            if (v20 >= a2 - 5
              || (v19 & 0xFE) != 0xFC
              || (uint64_t v25 = &a1[v15 + v17], (v25[1] & 0xC0) != 0x80)
              || (v25[2] & 0xC0) != 0x80
              || (unint64_t v26 = &a1[v15 + v17], (v26[3] & 0xC0) != 0x80)
              || (v26[4] & 0xC0) != 0x80
              || (a1[v15 + 5 + v17] & 0xC0) != 0x80)
            {
              unint64_t v12 = v18 + v17;
              v15 += v17 + 1;
              ++v13;
              if (v15 < a2) {
                continue;
              }
LABEL_74:
              unint64_t v12 = v18 + v17;
              goto LABEL_75;
            }
            uint64_t v27 = 6;
          }
          break;
        }
        v15 += v27 + v17;
        ++v14;
        unint64_t v12 = v18 + v17;
        if (v15 < a2) {
          continue;
        }
        break;
      }
LABEL_75:
      if (v13) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v14 == 0;
      }
      uint64_t result = 65001;
      if (!v28 || v12 == a2) {
        return result;
      }
      BOOL v53 = (a2 & 1) == 0 && (!v12 || 10 * a2 / v12 > 0xA);
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      unint64_t v32 = 0;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v54 = v16;
      if (v16 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v16;
      }
      do
      {
        if (cstdlib_strchr("\xAF\xB3\xB9\x9F\xE6\xD0\xFD", a1[v34])) {
          ++v29;
        }
        if (cstdlib_strchr("\xF0\xD0\xFDvocalizer", a1[v34])) {
          ++v30;
        }
        uint64_t v36 = a1[v34];
        v33 += v36;
        v32 += (v34 << 63 >> 63) & v36;
        if (v34) {
          uint64_t v36 = 0;
        }
        v31 += v36;
        ++v34;
      }
      while (v35 != v34);
      unint64_t v37 = v33 / v54;
      unint64_t v38 = v33 / v54;
      unint64_t v39 = v33 / v54;
      if (v54 >= 3)
      {
        unint64_t v38 = v32 / (v54 >> 1);
        unint64_t v39 = v31 / (v54 >> 1);
      }
      BOOL v40 = v38 < 4 && v53;
      if (v40 && v39 > 0x32) {
        return 1200;
      }
      BOOL v41 = v39 < 4 && v53;
      if (!v41 || v38 <= 0x32)
      {
        if (v53)
        {
          unint64_t v42 = 0;
          unint64_t v43 = 0;
          unint64_t v44 = 0;
          for (uint64_t i = 0; i != v35; ++i)
          {
            int v46 = a1[i];
            v44 += ((v46 - v37) * (v46 - v37));
            uint64_t v47 = ((v46 - v38) * (v46 - v38));
            v43 += (i << 63 >> 63) & v47;
            if (i) {
              uint64_t v47 = 0;
            }
            v42 += v47;
          }
          unint64_t v48 = v44 / v54;
          unint64_t v49 = v44 / v54;
          unint64_t v50 = v44 / v54;
          if (v54 >= 3)
          {
            unint64_t v49 = v43 / (v54 >> 1);
            unint64_t v50 = v42 / (v54 >> 1);
          }
          if (a2 >= 0x21)
          {
            if ((int)cstdlib_abs((v48 - v49)) > 1000
              || (int)cstdlib_abs((v50 - v48)) > 1000
              || (int)cstdlib_abs((v50 - v49)) > 1000)
            {
              return 1200;
            }
            BOOL v51 = v49 <= 2 * v48 && 2 * v49 >= v50;
            if (!v51 || 2 * v50 < v48) {
              return 1200;
            }
          }
        }
        if (v37 > 0x80) {
          return 28597;
        }
        if (v30 > 5) {
          return 28599;
        }
        if (v29 <= 0xA) {
          return 28591;
        }
        return 28592;
      }
    }
    return 1201;
  }
  if (a2 < 3) {
    return 28591;
  }
  int v8 = a1[1];
  uint64_t result = 28591;
  if (v8 == 187)
  {
    int v9 = a1[2];
    uint64_t result = v9 == 191 ? 65001 : 28591;
    if (a3 && v9 == 191)
    {
      *a3 = 3;
      return 65001;
    }
  }
  return result;
}

uint64_t txtlog_ObjOpen(uint64_t a1, const char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = 2226135046;
  if (a4)
  {
    *a4 = 0;
    uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), 1, 552);
    if (v9)
    {
      uint64_t v10 = v9;
      *(void *)uint64_t v9 = a1;
      cstdlib_strncpy((char *)(v9 + 8), a2, 0x100uLL);
      *(unsigned char *)(v10 + 263) = 0;
      cstdlib_strcpy((char *)(v10 + 264), "");
      *(void *)(v10 + 520) = a3;
      *(void *)(v10 + 528) = 0;
      *(_DWORD *)(v10 + 536) = 0;
      *(void *)(v10 + 544) = 0;
      txtlog_resetLogFileName(v10);
      uint64_t v4 = 0;
      *a4 = v10;
    }
    else
    {
      return 2226135050;
    }
  }
  return v4;
}

uint64_t txtlog_resetLogFileName(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  strcpy(v6, "vocalizer");
  uint64_t v2 = a1 + 8;
  int v1 = *(unsigned __int8 *)(a1 + 8);
  unint64_t v3 = (char *)(a1 + 264);
  if (v1) {
    uint64_t v4 = "/";
  }
  else {
    uint64_t v4 = "";
  }
  uint64_t result = __sprintf_chk(v3, 0, 0x100uLL, "%s%s%s_%lu.txt", (const char *)v2, v4, v6, *(unsigned int *)(v2 + 528));
  ++*(_DWORD *)(v2 + 528);
  return result;
}

uint64_t txtlog_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2226135046;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), a1);
  return 0;
}

uint64_t txtlog_startSession(uint64_t *a1)
{
  if (!a1) {
    return 2226135046;
  }
  if ((filespi_fopen(*(void *)(*a1 + 64), *(void **)(*a1 + 8), (uint64_t)(a1 + 33), (uint64_t)"w", a1 + 68) & 0x80000000) != 0) {
    Fileunsigned int Size = 0;
  }
  else {
    Fileunsigned int Size = filespi_GetFileSize((void *)a1[68]);
  }
  uint64_t result = 0;
  a1[66] = FileSize;
  return result;
}

uint64_t txtlog_stopSession(uint64_t a1)
{
  if (!a1) {
    return 2226135046;
  }
  uint64_t result = *(void *)(a1 + 544);
  if (result)
  {
    uint64_t result = filespi_fclose(result);
    *(void *)(a1 + 544) = 0;
  }
  return result;
}

uint64_t txtlog_recordEntry(uint64_t *a1, char *__s)
{
  if (!a1) {
    return 2226135046;
  }
  size_t v4 = cstdlib_strlen(__s);
  size_t v5 = a1[65];
  BOOL v6 = v5 >= v4;
  unint64_t v7 = v5 - v4;
  if (v6 && a1[66] <= v7)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = txtlog_switchLogFiles(a1);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  uint64_t v9 = a1[68];
  if (v9)
  {
    if (filespi_fwrite((uint64_t)__s, 1, v4, v9))
    {
      uint64_t result = filespi_fflush((void *)a1[68]);
      a1[66] += v4;
    }
    else
    {
      return 2226135045;
    }
  }
  return result;
}

uint64_t txtlog_switchLogFiles(uint64_t *a1)
{
  uint64_t v2 = a1 + 68;
  uint64_t v3 = a1[68];
  if (!v3 || (result = filespi_fclose(v3), *uint64_t v2 = 0, (result & 0x80000000) == 0))
  {
    txtlog_resetLogFileName((uint64_t)a1);
    LODWORD(result) = filespi_fopen(*(void *)(*a1 + 64), *(void **)(*a1 + 8), (uint64_t)(a1 + 33), (uint64_t)"w", v2);
    if ((int)result >= 0) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 2226135043;
    }
    a1[66] = 0;
  }
  return result;
}

uint64_t txtlog_changeDirectory(uint64_t a1, const char *a2)
{
  if (!a1 || !a2) {
    return 2226135046;
  }
  cstdlib_strncpy((char *)(a1 + 8), a2, 0x100uLL);
  *(unsigned char *)(a1 + 263) = 0;
  cstdlib_strcpy((char *)(a1 + 264), "");
  *(_DWORD *)(a1 + 536) = 0;

  return txtlog_switchLogFiles((uint64_t *)a1);
}

uint64_t txtfmt_printEntry(uint64_t a1, char *__str, size_t __size)
{
  int v3 = __size;
  uint64_t v6 = *(void *)(a1 + 128);
  unint64_t v7 = *(const void **)(a1 + 136);
  int v8 = *(unsigned __int16 *)(v6 + 64);
  if (*(_DWORD *)(a1 + 148))
  {
    snprintf(__str, __size, "%s|%hu|%s|%s|%lu|%p|SEVERE|%lu|%s", (const char *)a1, v8, (const char *)v6, (const char *)(v6 + 32), 0, v7, *(unsigned int *)(a1 + 148), *(const char **)(a1 + 152));
    if (*(_DWORD *)(a1 + 164))
    {
      unint64_t v9 = 0;
      do
      {
        cstdlib_strcat(__str, "|");
        cstdlib_strcat(__str, *(const char **)(*(void *)(a1 + 168) + 8 * v9));
        cstdlib_strcat(__str, "=");
        cstdlib_strcat(__str, *(const char **)(*(void *)(a1 + 176) + 8 * v9++));
      }
      while (v9 < *(unsigned int *)(a1 + 164));
    }
    cstdlib_strcat(__str, "\n");
  }
  else
  {
    snprintf(__str, __size, "%s|%hu|%s|%s|%lu|%p|%d|%s\n", (const char *)a1, v8, (const char *)v6, (const char *)(v6 + 32), 0, v7, *(_DWORD *)(a1 + 144), *(const char **)(a1 + 152));
  }
  __str[v3 - 1] = 0;
  return 0;
}

const char *txtfmt_getFileHeader()
{
  return "";
}

const char *txtfmt_getFileFooter()
{
  return "";
}

uint64_t txtfmt_vsprintFormattedEntry_v(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned char *a8, va_list a9)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  if (a8)
  {
    bzero(&v29, 0x800uLL);
    int v16 = *a8;
    if (*a8)
    {
      uint64_t v17 = 0;
      unsigned int v18 = 0;
      do
      {
        __str[v17 + 2046] = v16;
        uint64_t v19 = v18 + 1;
        if (v16 == 37)
        {
          unsigned int v20 = v18 + 2;
          if (a8[v19] == 108) {
            LODWORD(v19) = v20;
          }
        }
        int v16 = a8[(int)v19];
        ++v17;
        BOOL v21 = v19 > 0x7FF || v16 == 0;
        unsigned int v18 = v19;
      }
      while (!v21);
      uint64_t v17 = v17;
    }
    else
    {
      uint64_t v17 = 0;
    }
    __str[v17 + 2046] = v16;
    vsnprintf(__str, 0x800uLL, &v29, a9);
    __str[2047] = 0;
    uint64_t v27 = __str;
    uint64_t v22 = a3;
    uint64_t v23 = a4;
    uint64_t v24 = a5;
    int v25 = a6;
    a7 = 0;
  }
  else
  {
    uint64_t v22 = a3;
    uint64_t v23 = a4;
    uint64_t v24 = a5;
    int v25 = a6;
    uint64_t v27 = 0;
  }
  txtfmt_fillLogEntry((uint64_t)v31, v22, v23, v24, v25, a7, v27);
  txtfmt_printEntry((uint64_t)v31, a1, a2);
  return 0;
}

size_t txtfmt_fillLogEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, const char *a7)
{
  uint64_t v20 = 0;
  cstdlib_memset((void *)a1, 0, 0xB8uLL);
  osspi_time(*(void *)(a2 + 64), &v20);
  osspi_ctime(*(void **)(a2 + 64), &v20, 128, (char *)a1);
  uint64_t v14 = cstdlib_strlen((const char *)a1);
  if (v14)
  {
    unsigned int v15 = v14 - 1;
    do
    {
      int v16 = *(unsigned __int8 *)(a1 + v15);
      if (v16 != 13 && v16 != 10) {
        break;
      }
      uint64_t v18 = v15;
      *(unsigned char *)(a1 + v15--) = 0;
    }
    while (v18);
  }
  *(void *)(a1 + 128) = a4;
  *(void *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 144) = a5;
  *(_DWORD *)(a1 + 148) = a6;
  *(void *)(a1 + 152) = a7;
  if (a7) {
    size_t result = cstdlib_strlen(a7);
  }
  else {
    size_t result = 0;
  }
  *(_DWORD *)(a1 + 160) = result;
  return result;
}

uint64_t txtfmt_vsprintFormattedEntry(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned char *a8, char a9)
{
  return 0;
}

uint64_t logsub_logfile_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2226135041;
  }
  uint64_t result = 0;
  *a2 = &ITxtWriter;
  return result;
}

uint64_t txtwriter_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2226135040;
  uint64_t v19 = 0;
  if (!a3) {
    return 2226135046;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  if ((InitRsrcFunction(a1, a2, &v19) & 0x80000000) != 0) {
    return 2226135047;
  }
  size_t v5 = (void *)heap_Calloc(*(void **)(v19 + 8), 1, 464);
  if (!v5) {
    return 2226135050;
  }
  uint64_t v6 = (uint64_t)v5;
  *size_t v5 = v19;
  uint64_t updated = critsec_ObjOpen(*(void *)(v19 + 16), *(void **)(v19 + 8), v5 + 53);
  if ((updated & 0x80000000) != 0) {
    goto LABEL_35;
  }
  uint64_t v8 = *(void *)(v19 + 40);
  if (!v8)
  {
    uint64_t v3 = 2226135046;
    goto LABEL_38;
  }
  if ((__src[0] = 0, (paramc_ParamGetStr(v8, (uint64_t)"logfile.enabled", __src) & 0x80000000) != 0)
    && (__src[0] = "0", uint64_t updated = paramc_ParamSetStr(v8, (uint64_t)"logfile.enabled", "0"), (updated & 0x80000000) != 0)
    || (uint64_t updated = txtwriter_UpdateEnabled(v6, (unsigned __int8 *)__src[0]), (updated & 0x80000000) != 0))
  {
LABEL_35:
    uint64_t v3 = updated;
    goto LABEL_38;
  }
  if (__src[0]) {
    paramc_ParamRelease(v8);
  }
  __src[0] = 0;
  if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.filter.level", __src) & 0x80000000) != 0)
  {
    __src[0] = "0";
    if ((paramc_ParamSetStr(v8, (uint64_t)"logfile.filter.level", "0") & 0x80000000) != 0) {
      goto LABEL_38;
    }
  }
  int v9 = cstdlib_atoi((unsigned __int8 *)__src[0]);
  if ((v9 & 0x80000000) == 0)
  {
    *(_DWORD *)(v6 + 280) = v9;
    if (__src[0]) {
      paramc_ParamRelease(v8);
    }
    uint64_t v20 = 0;
    bzero(__src, 0x400uLL);
    if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.filter.modules", &v20) & 0x80000000) != 0)
    {
      uint64_t v20 = (char **)"";
      LH_MapModuleNamesToIds("", (char *)__src, 0x400u);
      uint64_t v20 = __src;
      if ((paramc_ParamSetStr(v8, (uint64_t)"logfile.filter.modules", (char *)__src) & 0x80000000) != 0) {
        goto LABEL_38;
      }
    }
    uint64_t v10 = (char *)v20;
    uint64_t updated = txtwriter_UpdateModules(v6, v20);
    if ((updated & 0x80000000) == 0)
    {
      if (v10 != "") {
        paramc_ParamRelease(v8);
      }
      __src[0] = 0;
      if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.filename.1", __src) & 0x80000000) == 0
        || (__src[0] = "", (paramc_ParamSetStr(v8, (uint64_t)"logfile.filename.1", "") & 0x80000000) == 0))
      {
        unint64_t v11 = __src[0];
        cstdlib_strcpy((char *)(v6 + 12), __src[0]);
        txtlog_changeDirectory(*(void *)(v6 + 432), v11);
        if (__src[0] != "") {
          paramc_ParamRelease(v8);
        }
        __src[0] = 0;
        if ((paramc_ParamGetStr(v8, (uint64_t)"logfile.max_size", __src) & 0x80000000) == 0
          || (__src[0] = "0", (paramc_ParamSetStr(v8, (uint64_t)"logfile.max_size", "0") & 0x80000000) == 0))
        {
          uint64_t v12 = LH_atou(__src[0]);
          *(void *)(v6 + 272) = v12;
          if (__src[0] != "0")
          {
            paramc_ParamRelease(v8);
            uint64_t v12 = *(void *)(v6 + 272);
          }
          uint64_t v3 = txtlog_ObjOpen(*(void *)v6, (const char *)(v6 + 12), v12, (uint64_t *)(v6 + 432));
          if ((v3 & 0x80000000) == 0 && *(_DWORD *)(v6 + 8) == 1) {
            txtlog_startSession(*(uint64_t **)(v6 + 432));
          }
        }
      }
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  uint64_t v3 = 2226135047;
LABEL_38:
  cstdlib_memset((void *)(v6 + 440), 0, 0x18uLL);
  *(void *)(v6 + 440) = v6;
  *(void *)(v6 + 448) = txtwriter_ParamCheckChange;
  *(void *)(v6 + 456) = txtwriter_ParamLearnChange;
  uint64_t v13 = *(void *)(v19 + 40);
  *(_OWORD *)__src = *(_OWORD *)(v6 + 440);
  uint64_t v22 = txtwriter_ParamLearnChange;
  paramc_ListenerAdd(v13, "logfile.enabled", __src);
  uint64_t v14 = *(void *)(v19 + 40);
  *(_OWORD *)__src = *(_OWORD *)(v6 + 440);
  uint64_t v22 = *(uint64_t (**)(uint64_t, char *, unsigned char *))(v6 + 456);
  paramc_ListenerAdd(v14, "logfile.filter.level", __src);
  uint64_t v15 = *(void *)(v19 + 40);
  *(_OWORD *)__src = *(_OWORD *)(v6 + 440);
  uint64_t v22 = *(uint64_t (**)(uint64_t, char *, unsigned char *))(v6 + 456);
  paramc_ListenerAdd(v15, "logfile.filter.modules", __src);
  uint64_t v16 = *(void *)(v19 + 40);
  *(_OWORD *)__src = *(_OWORD *)(v6 + 440);
  uint64_t v22 = *(uint64_t (**)(uint64_t, char *, unsigned char *))(v6 + 456);
  paramc_ListenerAdd(v16, "logfile.filename.1", __src);
  uint64_t v17 = *(void *)(v19 + 40);
  *(_OWORD *)__src = *(_OWORD *)(v6 + 440);
  uint64_t v22 = *(uint64_t (**)(uint64_t, char *, unsigned char *))(v6 + 456);
  paramc_ListenerAdd(v17, "logfile.max_size", __src);
  *(void *)a3 = v6;
  *(_DWORD *)(a3 + 8) = 472934;
  if ((v3 & 0x80000000) != 0)
  {
    txtwriter_ClassClose(v6, *(void *)(a3 + 8));
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  return v3;
}

uint64_t txtwriter_ClassClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 472934, 464);
  uint64_t v4 = v3;
  if ((v3 & 0x80000000) != 0) {
    return v3 & 0x1FFF | 0x84B02000;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 432);
  if (v6)
  {
    if (*(_DWORD *)(a1 + 8))
    {
      txtlog_stopSession(v6);
      uint64_t v6 = *(void *)(a1 + 432);
    }
    txtlog_ObjClose(v6);
  }
  uint64_t v7 = *(void *)(v5 + 40);
  long long v15 = *(_OWORD *)(a1 + 440);
  uint64_t v16 = *(void *)(a1 + 456);
  paramc_ListenerRemove(v7, "logfile.enabled", &v15);
  uint64_t v8 = *(void *)(v5 + 40);
  long long v15 = *(_OWORD *)(a1 + 440);
  uint64_t v16 = *(void *)(a1 + 456);
  paramc_ListenerRemove(v8, "logfile.filter.level", &v15);
  uint64_t v9 = *(void *)(v5 + 40);
  long long v15 = *(_OWORD *)(a1 + 440);
  uint64_t v16 = *(void *)(a1 + 456);
  paramc_ListenerRemove(v9, "logfile.filter.modules", &v15);
  uint64_t v10 = *(void *)(v5 + 40);
  long long v15 = *(_OWORD *)(a1 + 440);
  uint64_t v16 = *(void *)(a1 + 456);
  paramc_ListenerRemove(v10, "logfile.filename.1", &v15);
  uint64_t v11 = *(void *)(v5 + 40);
  long long v15 = *(_OWORD *)(a1 + 440);
  uint64_t v16 = *(void *)(a1 + 456);
  paramc_ListenerRemove(v11, "logfile.max_size", &v15);
  uint64_t v12 = *(void *)(a1 + 424);
  if (v12) {
    uint64_t v13 = critsec_ObjClose(v12);
  }
  else {
    uint64_t v13 = v4;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), a1);
  return v13;
}

uint64_t txtwriter_ObjOpen(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = safeh_HandleCheck(a1, a2, 472934, 464);
  uint64_t v6 = v5;
  if ((v5 & 0x80000000) != 0) {
    return v5 & 0x1FFF | 0x84B02000;
  }
  if (!a3) {
    return 2226135046;
  }
  *a3 = 0;
  uint64_t v7 = (void *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 8);
  if (!v7) {
    return 2226135050;
  }
  void *v7 = a1;
  *a3 = v7;
  return v6;
}

uint64_t txtwriter_ObjClose(uint64_t a1)
{
  if (!a1) {
    return 2226135046;
  }
  heap_Free(*(void **)(**(void **)a1 + 8), a1);
  return 0;
}

uint64_t txtwriter_OutText(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned char *a5, va_list a6)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = 2226135046;
  if (a1 && a2 && a5)
  {
    uint64_t v7 = *(void *)a1;
    if (!*(_DWORD *)(*(void *)a1 + 8) || *(_DWORD *)(v7 + 280) < a3) {
      return 0;
    }
    if (*(_DWORD *)(v7 + 284) == 1) {
      goto LABEL_15;
    }
    unint64_t v9 = *(unsigned __int16 *)(v7 + 416);
    if (!*(_WORD *)(v7 + 416)) {
      return 0;
    }
    int v10 = *(unsigned __int16 *)(a2 + 64);
    if (*(unsigned __int16 *)(v7 + 288) == v10) {
      goto LABEL_15;
    }
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v11;
      if (v9 - 1 == v11) {
        break;
      }
      int v13 = *(unsigned __int16 *)(v7 + 290 + 2 * v11++);
    }
    while (v13 != v10);
    if (v12 + 1 < v9)
    {
LABEL_15:
      uint64_t v14 = txtfmt_vsprintFormattedEntry_v(__s, 0xC00uLL, *(void *)v7, a1, a2, a3, 0, a5, a6);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
      uint64_t v14 = critsec_Enter(*(void **)(v7 + 424));
      if ((v14 & 0x80000000) != 0)
      {
        return v14;
      }
      else
      {
        uint64_t v6 = txtlog_recordEntry(*(uint64_t **)(v7 + 432), __s);
        critsec_Leave(*(void **)(v7 + 424));
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t txtwriter_OutPublic(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v6 = 2226135046;
  if (a1 && a2)
  {
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    memset(__b, 0, sizeof(__b));
    unint64_t v9 = *(void ***)a1;
    if (*(_DWORD *)(*(void *)a1 + 8))
    {
      uint64_t v21 = 0;
      cstdlib_memset(__b, 0, 0xB8uLL);
      osspi_time((*v9)[8], &v21);
      osspi_ctime((void *)(*v9)[8], &v21, 128, __b);
      int v14 = cstdlib_strlen(__b);
      if (v14)
      {
        unsigned int v15 = v14 - 1;
        do
        {
          int v16 = __b[v15];
          if (v16 != 13 && v16 != 10) {
            break;
          }
          uint64_t v18 = v15;
          __b[v15--] = 0;
        }
        while (v18);
      }
      *(void *)&long long v24 = a2;
      *((void *)&v24 + 1) = a1;
      LODWORD(v25) = 0;
      DWORD1(v25) = a3;
      *((void *)&v25 + 1) = "";
      LODWORD(v26) = 0;
      DWORD1(v26) = a4;
      *((void *)&v26 + 1) = a5;
      uint64_t v27 = a6;
      uint64_t v19 = txtfmt_printEntry((uint64_t)__b, __str, 0xC00uLL);
      if ((v19 & 0x80000000) != 0) {
        return v19;
      }
      uint64_t v19 = critsec_Enter(v9[53]);
      if ((v19 & 0x80000000) != 0)
      {
        return v19;
      }
      else
      {
        uint64_t v6 = txtlog_recordEntry(v9[54], __str);
        critsec_Leave(v9[53]);
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t txtwriter_GetLogLevel(uint64_t result)
{
  if (result)
  {
    if (*(_DWORD *)(*(void *)result + 8)) {
      return *(unsigned int *)(*(void *)result + 280);
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t txtwriter_IsModuleEnabled(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)result;
    if (*(_DWORD *)(*(void *)result + 284) == 1) {
      return 1;
    }
    unint64_t v3 = *(unsigned __int16 *)(v2 + 416);
    if (*(_WORD *)(v2 + 416))
    {
      if (*(unsigned __int16 *)(v2 + 288) == a2) {
        return 1;
      }
      uint64_t v4 = 0;
      uint64_t v5 = v2 + 290;
      do
      {
        uint64_t v6 = v4;
        if (v3 - 1 == v4) {
          break;
        }
        int v7 = *(unsigned __int16 *)(v5 + 2 * v4++);
      }
      while (v7 != a2);
      return v6 + 1 < v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t txtwriter_ParamCheckChange(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a4) {
    *a4 = 1;
  }
  return 0;
}

uint64_t txtwriter_ParamLearnChange(uint64_t a1, char *__s1, unsigned char *a3)
{
  if (a3 && *a3)
  {
    uint64_t v6 = 0;
    while (cstdlib_strcmp(__s1, (&txtwriter_ParamLearnChange_Param2UpdateFunction)[v6]))
    {
      v6 += 2;
      if (v6 == 10) {
        return 0;
      }
    }
    critsec_Enter(*(void **)(a1 + 424));
    ((void (*)(uint64_t, unsigned char *))(&txtwriter_ParamLearnChange_Param2UpdateFunction)[v6 + 1])(a1, a3);
    critsec_Leave(*(void **)(a1 + 424));
  }
  return 0;
}

uint64_t txtwriter_UpdateEnabled(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = 2226135047;
  if (a2 && *a2)
  {
    BOOL v5 = (int)cstdlib_atoi(a2) > 0 || ((*a2 - 84) & 0xDF) == 0;
    uint64_t result = 0;
    *(_DWORD *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t txtwriter_UpdateLevel(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = cstdlib_atoi(a2);
  if (v3 < 0) {
    return 2226135047;
  }
  int v4 = v3;
  uint64_t result = 0;
  *(_DWORD *)(a1 + 280) = v4;
  return result;
}

uint64_t txtwriter_UpdateModules(uint64_t a1, unsigned char *a2)
{
  if (!*a2) {
    return 0;
  }
  unsigned __int16 v2 = 0;
  *(_DWORD *)(a1 + 284) = 1;
  *(_WORD *)(a1 + 416) = 0;
LABEL_3:
  int v3 = a2;
  while (1)
  {
    int v4 = *v3;
    if (!*v3) {
      break;
    }
    v3 += 3;
    while (v4 == 32)
    {
      int v4 = *(v3 - 2);
      ++v3;
    }
    if (v4 != 65 && v4 != 97)
    {
      a2 = v3 - 3;
      if ((v4 - 48) > 9)
      {
LABEL_18:
        __int16 v7 = 0;
      }
      else
      {
        __int16 v7 = 0;
        do
        {
          __int16 v7 = 10 * v7 + v4 - 48;
          int v8 = *++a2;
          int v4 = v8;
        }
        while ((v8 - 48) < 0xA);
      }
      BOOL v6 = (v4 & 0xDF) == 0;
      if ((v4 | 0x20) == 0x20 && v2 <= 0x3Fu)
      {
        *(_WORD *)(a1 + 2 * v2 + 288) = v7;
        unsigned __int16 v2 = *(_WORD *)(a1 + 416) + 1;
        *(_WORD *)(a1 + 416) = v2;
        *(_DWORD *)(a1 + 284) = 0;
        goto LABEL_3;
      }
      int v5 = 0;
      int v3 = a2;
      goto LABEL_22;
    }
    a2 = v3 - 3;
    if ((*(v3 - 2) | 0x20) != 0x6C
      || (*(v3 - 1) | 0x20) != 0x6C
      || (*v3 | 0x20) != 0x20)
    {
      goto LABEL_18;
    }
    int v5 = 1;
    BOOL v6 = 1;
LABEL_22:
    *(_DWORD *)(a1 + 284) = v5;
    if (!v6) {
      return 2226135047;
    }
  }
  if (v2 <= 0x3Fu) {
    return 0;
  }
  return 2226135047;
}

uint64_t txtwriter_UpdateDirectory(uint64_t a1, const char *a2)
{
  return 0;
}

uint64_t txtwriter_UpdateMaxSize(uint64_t a1, const char *a2)
{
  *(void *)(a1 + 272) = LH_atou(a2);
  return 0;
}

uint64_t featextract_closeStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    int v8 = (uint64_t *)(a2 + 16 * v4);
    if (*v8)
    {
      int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 72))(*v8, v8[1]);
      *int v8 = safeh_GetNullHandle();
      v8[1] = v10;
      if ((int)v5 > -1 && v9 < 0) {
        uint64_t v5 = v9;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return v5;
}

uint64_t featextract_logFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = *(__int16 *)(a2 + 10);
  if (log_GetLogLevel(*(void *)(a1 + 32)) >= 8)
  {
    unsigned int v5 = v4 & ~(v4 >> 31);
    LH_itoa(0x4Eu, v12, 0xAu);
    uint64_t v6 = 0;
    while (v6 != 4)
    {
      if (v6 == 3)
      {
        char v7 = "application/x-realspeak-usdurs;version=4.0";
        goto LABEL_9;
      }
      if (v6 == 2)
      {
        char v11 = 5;
        char v10 = 0;
        log_OutBinary(*(void *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
          (uint64_t)&v11,
          1u,
          0);
        log_OutBinary(*(void *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
          *(void *)(a2 + 8 * v6 + 16),
          v5,
          0);
        log_OutBinary(*(void *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)"text/x-realspeak-usphonemes;charset=tts",
          (uint64_t)&v10,
          1u,
          0);
      }
LABEL_13:
      if (++v6 == 218) {
        return 0;
      }
    }
    char v7 = "application/x-realspeak-usplosives;version=4.0";
LABEL_9:
    int v8 = *(unsigned __int8 *)(*(void *)a2 + v6 + 2748);
    if (v8 == 2)
    {
      log_OutBinary(*(void *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)v7, *(void *)(a2 + 8 * v6 + 1760), 2 * v5, 0);
    }
    else if (v8 == 1)
    {
      log_OutBinary(*(void *)(a1 + 32), (uint64_t)"FEATEXTRACT", 99, 0, (uint64_t)v12, (uint64_t)v7, *(void *)(a2 + 8 * v6 + 16), v5, 0);
    }
    goto LABEL_13;
  }
  return 0;
}

uint64_t featextract_writeFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v173 = 0;
  uint64_t v10 = (*(uint64_t (**)(void, void, unsigned char **, void))(a2 + 112))(*(void *)(a3 + 16), *(void *)(a3 + 24), &v173, 864 * *((unsigned __int16 *)a5 + 5));
  if ((v10 & 0x80000000) != 0)
  {
    uint64_t v171 = v10;
LABEL_300:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FEATEXTRACT", 55008, (uint64_t)"%s%s%s%x", v11, v12, v13, v14, "contentType");
    return v171;
  }
  LODWORD(v__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = *((__int16 *)a5 + 5);
  if ((int)v15 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      for (uint64_t i = 12; i != 50; ++i)
        v173[i] = 0;
      uint64_t v19 = 0;
      *((_WORD *)v173 + 25) = 0;
      do
      {
        uint64_t v20 = v173;
        uint64_t v21 = &v173[4 * v19];
        *((_DWORD *)v21 + 18) = 0;
        *((_DWORD *)v21 + 89) = 0;
        v20[v19++ + 640] = 0;
      }
      while (v19 != 71);
      uint64_t v22 = v173 + 712;
      *(_OWORD *)(v173 + 712) = 0u;
      v22[1] = 0u;
      void v22[2] = 0u;
      v22[3] = 0u;
      for (uint64_t j = 778; j != 863; ++j)
        v173[j] = 0;
      cstdlib_memset(v173 + 52, 0, 8uLL);
      cstdlib_memset(v173 + 60, 0, 9uLL);
      uint64_t v24 = a5[225];
      if (v24) {
        *(_WORD *)uint64_t v173 = *(_WORD *)(v24 + 2 * v17);
      }
      uint64_t v25 = a5[4];
      if (v25) {
        v173[2] = *(unsigned char *)(v25 + v17);
      }
      int v26 = *(unsigned __int16 *)(a4 + 3578);
      if (*(_WORD *)(a4 + 3578))
      {
        uint64_t v27 = a5[451];
        uint64_t v28 = v173;
        *((_DWORD *)v173 + 1) = *(_DWORD *)(v27 + 4 * (int)v17 * v26);
        *((_DWORD *)v28 + 2) = *(_DWORD *)(v27 + 4 * (v26 + (int)v17 * v26 - 1));
      }
      uint64_t v29 = a5[212];
      if (v29) {
        v173[776] = *(unsigned char *)(v29 + v17);
      }
      uint64_t v30 = a5[213];
      if (v30) {
        v173[777] = *(unsigned char *)(v30 + v17);
      }
      if (*(_WORD *)(a4 + 2966)) {
        break;
      }
LABEL_111:
      if (*(unsigned char *)(a5[9] + v17)) {
        v173[19] = *(unsigned char *)(a5[9] + v17);
      }
      uint64_t v71 = a5[10];
      if (v71) {
        v173[20] = *(unsigned char *)(v71 + v17);
      }
      uint64_t v72 = a5[6];
      if (v72) {
        v173[12] = *(unsigned char *)(v72 + v17);
      }
      uint64_t v73 = a5[223];
      if (v73) {
        *((_WORD *)v173 + 25) = *(_WORD *)(v73 + 2 * v17);
      }
      uint64_t v74 = *(unsigned __int16 *)(a4 + 3360);
      if (*(_WORD *)(a4 + 3360))
      {
        uint64_t v75 = v16 * *(unsigned __int16 *)(*a5 + 3360);
        uint64_t v76 = (int *)(a5[449] + v75);
        unsigned int v77 = (int *)(a5[448] + v75);
        int v78 = v173 + 744;
        do
        {
          int v79 = *v77++;
          *(v78 - 8) = v79;
          int v80 = *v76++;
          *v78++ = v80;
          --v74;
        }
        while (v74);
      }
      uint64_t v81 = a5[444];
      if (v81) {
        *(void *)(v173 + 52) = *(void *)(v81 + 8 * v17);
      }
      if (*(_DWORD *)(a4 + 2560))
      {
        uint64_t v82 = v173;
        uint64_t v83 = a5[445] + 9 * v17;
        char v84 = *(unsigned char *)(v83 + 8);
        *(void *)(v173 + 60) = *(void *)v83;
        v82[68] = v84;
      }
      uint64_t v85 = a5[125];
      if (v85) {
        v173[778] = *(unsigned char *)(v85 + v17);
      }
      uint64_t v86 = a5[4];
      if (v86) {
        v173[779] = *(unsigned char *)(v86 + v17);
      }
      uint64_t v87 = a5[126];
      if (v87) {
        v173[780] = *(unsigned char *)(v87 + v17);
      }
      uint64_t v88 = a5[75];
      if (v88) {
        v173[781] = *(unsigned char *)(v88 + v17);
      }
      uint64_t v89 = a5[9];
      if (v89) {
        v173[782] = *(unsigned char *)(v89 + v17);
      }
      uint64_t v90 = a5[10];
      if (v90) {
        v173[783] = *(unsigned char *)(v90 + v17);
      }
      uint64_t v91 = a5[70];
      if (v91) {
        v173[784] = *(unsigned char *)(v91 + v17);
      }
      uint64_t v92 = a5[14];
      if (v92) {
        v173[785] = *(unsigned char *)(v92 + v17);
      }
      uint64_t v93 = a5[23];
      if (v93) {
        v173[786] = *(unsigned char *)(v93 + v17);
      }
      uint64_t v94 = a5[38];
      if (v94) {
        v173[787] = *(unsigned char *)(v94 + v17);
      }
      uint64_t v95 = a5[36];
      if (v95) {
        v173[788] = *(unsigned char *)(v95 + v17);
      }
      uint64_t v96 = a5[39];
      if (v96) {
        v173[789] = *(unsigned char *)(v96 + v17);
      }
      uint64_t v97 = a5[37];
      if (v97) {
        v173[790] = *(unsigned char *)(v97 + v17);
      }
      uint64_t v98 = a5[16];
      if (v98) {
        v173[791] = *(unsigned char *)(v98 + v17);
      }
      uint64_t v99 = a5[12];
      if (v99) {
        v173[792] = *(unsigned char *)(v99 + v17);
      }
      uint64_t v100 = a5[13];
      if (v100) {
        v173[793] = *(unsigned char *)(v100 + v17);
      }
      uint64_t v101 = a5[18];
      if (v101) {
        v173[794] = *(unsigned char *)(v101 + v17);
      }
      uint64_t v102 = a5[24];
      if (v102) {
        v173[795] = *(unsigned char *)(v102 + v17);
      }
      uint64_t v103 = a5[68];
      if (v103) {
        v173[796] = *(unsigned char *)(v103 + v17);
      }
      uint64_t v104 = a5[76];
      if (v104) {
        v173[797] = *(unsigned char *)(v104 + v17);
      }
      uint64_t v105 = a5[21];
      if (v105) {
        v173[798] = *(unsigned char *)(v105 + v17);
      }
      uint64_t v106 = a5[31];
      if (v106) {
        v173[799] = *(unsigned char *)(v106 + v17);
      }
      uint64_t v107 = a5[15];
      if (v107) {
        v173[800] = *(unsigned char *)(v107 + v17);
      }
      uint64_t v108 = a5[17];
      if (v108) {
        v173[801] = *(unsigned char *)(v108 + v17);
      }
      uint64_t v109 = a5[22];
      if (v109) {
        v173[802] = *(unsigned char *)(v109 + v17);
      }
      uint64_t v110 = a5[33];
      if (v110) {
        v173[803] = *(unsigned char *)(v110 + v17);
      }
      uint64_t v111 = a5[34];
      if (v111) {
        v173[804] = *(unsigned char *)(v111 + v17);
      }
      uint64_t v112 = a5[77];
      if (v112) {
        v173[805] = *(unsigned char *)(v112 + v17);
      }
      uint64_t v113 = a5[78];
      if (v113) {
        v173[806] = *(unsigned char *)(v113 + v17);
      }
      uint64_t v114 = a5[71];
      if (v114) {
        v173[807] = *(unsigned char *)(v114 + v17);
      }
      uint64_t v115 = a5[72];
      if (v115) {
        v173[808] = *(unsigned char *)(v115 + v17);
      }
      uint64_t v116 = a5[73];
      if (v116) {
        v173[809] = *(unsigned char *)(v116 + v17);
      }
      uint64_t v117 = a5[74];
      if (v117) {
        v173[810] = *(unsigned char *)(v117 + v17);
      }
      uint64_t v118 = a5[19];
      if (v118) {
        v173[811] = *(unsigned char *)(v118 + v17);
      }
      uint64_t v119 = a5[11];
      if (v119) {
        v173[812] = *(unsigned char *)(v119 + v17);
      }
      uint64_t v120 = a5[20];
      if (v120) {
        v173[813] = *(unsigned char *)(v120 + v17);
      }
      uint64_t v121 = a5[69];
      if (v121) {
        v173[814] = *(unsigned char *)(v121 + v17);
      }
      uint64_t v122 = a5[57];
      if (v122) {
        v173[815] = *(unsigned char *)(v122 + v17);
      }
      uint64_t v123 = a5[123];
      if (v123) {
        v173[816] = *(unsigned char *)(v123 + v17);
      }
      uint64_t v124 = a5[124];
      if (v124) {
        v173[817] = *(unsigned char *)(v124 + v17);
      }
      uint64_t v125 = a5[125];
      if (v125) {
        v173[818] = *(unsigned char *)(v125 + v17);
      }
      uint64_t v126 = a5[126];
      if (v126) {
        v173[819] = *(unsigned char *)(v126 + v17);
      }
      uint64_t v127 = a5[127];
      if (v127) {
        v173[820] = *(unsigned char *)(v127 + v17);
      }
      uint64_t v128 = a5[128];
      if (v128) {
        v173[821] = *(unsigned char *)(v128 + v17);
      }
      uint64_t v129 = a5[129];
      if (v129) {
        v173[822] = *(unsigned char *)(v129 + v17);
      }
      uint64_t v130 = a5[130];
      if (v130) {
        v173[823] = *(unsigned char *)(v130 + v17);
      }
      uint64_t v131 = a5[131];
      if (v131) {
        v173[824] = *(unsigned char *)(v131 + v17);
      }
      uint64_t v132 = a5[132];
      if (v132) {
        v173[825] = *(unsigned char *)(v132 + v17);
      }
      uint64_t v133 = a5[133];
      if (v133) {
        v173[826] = *(unsigned char *)(v133 + v17);
      }
      uint64_t v134 = a5[134];
      if (v134) {
        v173[827] = *(unsigned char *)(v134 + v17);
      }
      uint64_t v135 = a5[135];
      if (v135) {
        v173[828] = *(unsigned char *)(v135 + v17);
      }
      uint64_t v136 = a5[136];
      if (v136) {
        v173[829] = *(unsigned char *)(v136 + v17);
      }
      uint64_t v137 = a5[137];
      if (v137) {
        v173[830] = *(unsigned char *)(v137 + v17);
      }
      uint64_t v138 = a5[138];
      if (v138) {
        v173[831] = *(unsigned char *)(v138 + v17);
      }
      uint64_t v139 = a5[139];
      if (v139) {
        v173[832] = *(unsigned char *)(v139 + v17);
      }
      uint64_t v140 = a5[140];
      if (v140) {
        v173[833] = *(unsigned char *)(v140 + v17);
      }
      uint64_t v141 = a5[141];
      if (v141) {
        v173[834] = *(unsigned char *)(v141 + v17);
      }
      uint64_t v142 = a5[142];
      unsigned int v143 = v173;
      if (v142) {
        v173[835] = *(unsigned char *)(v142 + v17);
      }
      uint64_t v144 = a5[143];
      if (v144) {
        v143[836] = *(unsigned char *)(v144 + v17);
      }
      uint64_t v145 = a5[145];
      if (v145) {
        v143[837] = *(unsigned char *)(v145 + v17);
      }
      uint64_t v146 = a5[144];
      if (v146) {
        v143[838] = *(unsigned char *)(v146 + v17);
      }
      uint64_t v147 = a5[146];
      if (v147) {
        v143[839] = *(unsigned char *)(v147 + v17);
      }
      uint64_t v148 = a5[147];
      if (v148) {
        v143[840] = *(unsigned char *)(v148 + v17);
      }
      uint64_t v149 = a5[148];
      if (v149) {
        v143[841] = *(unsigned char *)(v149 + v17);
      }
      uint64_t v150 = a5[149];
      if (v150) {
        v143[842] = *(unsigned char *)(v150 + v17);
      }
      uint64_t v151 = a5[150];
      if (v151) {
        v143[843] = *(unsigned char *)(v151 + v17);
      }
      uint64_t v152 = a5[151];
      if (v152) {
        v143[844] = *(unsigned char *)(v152 + v17);
      }
      uint64_t v153 = a5[152];
      if (v153) {
        v143[845] = *(unsigned char *)(v153 + v17);
      }
      uint64_t v154 = a5[153];
      if (v154) {
        v143[846] = *(unsigned char *)(v154 + v17);
      }
      uint64_t v155 = a5[154];
      if (v155) {
        v143[847] = *(unsigned char *)(v155 + v17);
      }
      uint64_t v156 = a5[155];
      if (v156) {
        v143[848] = *(unsigned char *)(v156 + v17);
      }
      uint64_t v157 = a5[156];
      if (v157) {
        v143[849] = *(unsigned char *)(v157 + v17);
      }
      uint64_t v158 = a5[157];
      if (v158) {
        v143[850] = *(unsigned char *)(v158 + v17);
      }
      uint64_t v159 = a5[158];
      if (v159) {
        v143[851] = *(unsigned char *)(v159 + v17);
      }
      uint64_t v160 = a5[159];
      if (v160) {
        v143[852] = *(unsigned char *)(v160 + v17);
      }
      uint64_t v161 = a5[160];
      if (v161) {
        v143[853] = *(unsigned char *)(v161 + v17);
      }
      uint64_t v162 = a5[161];
      if (v162) {
        v143[854] = *(unsigned char *)(v162 + v17);
      }
      uint64_t v163 = a5[162];
      if (v163) {
        v143[855] = *(unsigned char *)(v163 + v17);
      }
      uint64_t v164 = a5[163];
      if (v164) {
        v143[856] = *(unsigned char *)(v164 + v17);
      }
      uint64_t v165 = a5[164];
      if (v165) {
        v143[857] = *(unsigned char *)(v165 + v17);
      }
      uint64_t v166 = a5[165];
      if (v166) {
        v143[860] = *(unsigned char *)(v166 + v17);
      }
      uint64_t v167 = a5[166];
      if (v167) {
        v143[861] = *(unsigned char *)(v167 + v17);
      }
      uint64_t v168 = a5[167];
      if (v168) {
        v143[862] = *(unsigned char *)(v168 + v17);
      }
      uint64_t v169 = a5[173];
      if (v169) {
        v143[858] = *(unsigned char *)(v169 + v17);
      }
      uint64_t v170 = a5[174];
      if (v170) {
        v143[859] = *(unsigned char *)(v170 + v17);
      }
      uint64_t v173 = v143 + 864;
      ++v17;
      uint64_t v15 = *((__int16 *)a5 + 5);
      v16 += 4;
      if (v17 >= v15) {
        goto LABEL_297;
      }
    }
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    while (1)
    {
      uint64_t v33 = v17 * *(unsigned __int16 *)(*a5 + 2966);
      uint64_t v34 = v173;
      uint64_t v35 = &v173[4 * v32];
      *((_DWORD *)v35 + 18) = *(_DWORD *)(a5[446] + 4 * (v32 + v33));
      *((_DWORD *)v35 + 89) = *(_DWORD *)(a5[447] + 4 * (v32 + v33));
      v34[v32 + 640] = *(unsigned char *)(a5[450] + v33 + v32);
      switch(*(_DWORD *)(*(void *)(a4 + 2968) + v31))
      {
        case 5:
          uint64_t v38 = a5[27];
          if (v38) {
            v173[22] = *(unsigned char *)(v38 + v17);
          }
          uint64_t v39 = a5[28];
          if (v39) {
            v173[23] = *(unsigned char *)(v39 + v17);
          }
          uint64_t v40 = a5[214];
          if (!v40)
          {
            BOOL v41 = v173;
LABEL_92:
            *((_WORD *)v41 + 22) = 0;
            goto LABEL_110;
          }
          BOOL v41 = v173;
          if (!a5[215]) {
            goto LABEL_92;
          }
          v173[44] = *(unsigned char *)(v40 + v17);
          v41[45] = *(unsigned char *)(a5[215] + v17);
LABEL_110:
          ++v32;
          v31 += 32;
          if (v32 >= *(unsigned __int16 *)(a4 + 2966)) {
            goto LABEL_111;
          }
          break;
        case 6:
          uint64_t v42 = a5[29];
          if (v42) {
            v173[24] = *(unsigned char *)(v42 + v17);
          }
          uint64_t v43 = a5[30];
          if (v43) {
            v173[25] = *(unsigned char *)(v43 + v17);
          }
          uint64_t v44 = a5[216];
          if (!v44)
          {
            unint64_t v45 = v173;
LABEL_94:
            *((_WORD *)v45 + 23) = 0;
            goto LABEL_110;
          }
          unint64_t v45 = v173;
          if (!a5[217]) {
            goto LABEL_94;
          }
          v173[46] = *(unsigned char *)(v44 + v17);
          v45[47] = *(unsigned char *)(a5[217] + v17);
          goto LABEL_110;
        case 7:
          uint64_t v46 = a5[19];
          if (v46) {
            v173[13] = *(unsigned char *)(v46 + v17);
          }
          goto LABEL_110;
        case 8:
          uint64_t v47 = a5[20];
          if (v47) {
            v173[14] = *(unsigned char *)(v47 + v17);
          }
          goto LABEL_110;
        case 9:
          uint64_t v48 = a5[22];
          if (v48) {
            v173[15] = *(unsigned char *)(v48 + v17);
          }
          goto LABEL_110;
        case 0xA:
          uint64_t v49 = a5[23];
          if (v49) {
            v173[16] = *(unsigned char *)(v49 + v17);
          }
          goto LABEL_110;
        case 0xB:
          uint64_t v50 = a5[31];
          if (v50) {
            v173[17] = *(unsigned char *)(v50 + v17);
          }
          goto LABEL_110;
        case 0xC:
        case 0x13:
          uint64_t v36 = a5[18];
          if (v36) {
            v173[18] = *(unsigned char *)(v36 + v17);
          }
          goto LABEL_110;
        case 0xD:
        case 0x14:
          uint64_t v37 = a5[11];
          if (v37) {
            v173[21] = *(unsigned char *)(v37 + v17);
          }
          goto LABEL_110;
        case 0xE:
          uint64_t v51 = a5[33];
          if (v51) {
            v173[26] = *(unsigned char *)(v51 + v17);
          }
          goto LABEL_110;
        case 0xF:
          uint64_t v52 = a5[34];
          if (v52) {
            v173[27] = *(unsigned char *)(v52 + v17);
          }
          goto LABEL_110;
        case 0x10:
          uint64_t v53 = a5[21];
          if (v53) {
            v173[28] = *(unsigned char *)(v53 + v17);
          }
          goto LABEL_110;
        case 0x12:
          uint64_t v54 = a5[35];
          if (v54) {
            v173[29] = *(unsigned char *)(v54 + v17);
          }
          goto LABEL_110;
        case 0x1E:
          uint64_t v55 = a5[67];
          if (v55) {
            v173[30] = *(unsigned char *)(v55 + v17);
          }
          else {
            v173[30] = 0;
          }
          goto LABEL_110;
        case 0x1F:
          uint64_t v56 = a5[68];
          if (v56) {
            v173[31] = *(unsigned char *)(v56 + v17);
          }
          else {
            v173[31] = 0;
          }
          goto LABEL_110;
        case 0x20:
          uint64_t v57 = a5[69];
          if (v57) {
            v173[32] = *(unsigned char *)(v57 + v17);
          }
          else {
            v173[32] = 0;
          }
          goto LABEL_110;
        case 0x21:
          uint64_t v58 = a5[70];
          if (v58) {
            v173[33] = *(unsigned char *)(v58 + v17);
          }
          else {
            v173[33] = 0;
          }
          goto LABEL_110;
        case 0x22:
          uint64_t v59 = a5[71];
          if (v59) {
            v173[34] = *(unsigned char *)(v59 + v17);
          }
          else {
            v173[34] = 0;
          }
          goto LABEL_110;
        case 0x23:
          uint64_t v60 = a5[72];
          if (v60) {
            v173[35] = *(unsigned char *)(v60 + v17);
          }
          else {
            v173[35] = 0;
          }
          goto LABEL_110;
        case 0x24:
          uint64_t v61 = a5[79];
          if (v61) {
            v173[36] = *(unsigned char *)(v61 + v17);
          }
          else {
            v173[36] = 0;
          }
          goto LABEL_110;
        case 0x25:
          uint64_t v62 = a5[74];
          if (v62) {
            v173[37] = *(unsigned char *)(v62 + v17);
          }
          else {
            v173[37] = 0;
          }
          goto LABEL_110;
        case 0x26:
          uint64_t v63 = a5[75];
          if (v63) {
            v173[38] = *(unsigned char *)(v63 + v17);
          }
          else {
            v173[38] = 0;
          }
          goto LABEL_110;
        case 0x27:
          uint64_t v64 = a5[76];
          if (v64) {
            v173[39] = *(unsigned char *)(v64 + v17);
          }
          else {
            v173[39] = 0;
          }
          goto LABEL_110;
        case 0x28:
          uint64_t v65 = a5[77];
          if (v65) {
            v173[40] = *(unsigned char *)(v65 + v17);
          }
          goto LABEL_110;
        case 0x29:
          uint64_t v66 = a5[78];
          if (v66) {
            v173[41] = *(unsigned char *)(v66 + v17);
          }
          else {
            v173[41] = 0;
          }
          goto LABEL_110;
        case 0x2B:
          uint64_t v67 = a5[173];
          if (v67) {
            v173[42] = *(unsigned char *)(v67 + v17);
          }
          else {
            v173[42] = 0;
          }
          goto LABEL_110;
        case 0x2C:
          uint64_t v68 = a5[174];
          if (v68) {
            v173[43] = *(unsigned char *)(v68 + v17);
          }
          else {
            v173[43] = 0;
          }
          goto LABEL_110;
        case 0x45:
          uint64_t v69 = a5[218];
          if (v69) {
            v173[48] = *(unsigned char *)(v69 + v17);
          }
          else {
            v173[48] = 0;
          }
          goto LABEL_110;
        case 0x46:
          uint64_t v70 = a5[219];
          if (v70) {
            v173[49] = *(unsigned char *)(v70 + v17);
          }
          else {
            v173[49] = 0;
          }
          goto LABEL_110;
        default:
          goto LABEL_110;
      }
    }
  }
LABEL_297:
  uint64_t v171 = (*(uint64_t (**)(void, void, void))(a2 + 120))(*(void *)(a3 + 16), *(void *)(a3 + 24), 864 * (unsigned __int16)v15);
  if ((v171 & 0x80000000) != 0) {
    goto LABEL_300;
  }
  return v171;
}

uint64_t featextract_adjustSilAudioOrder(uint64_t result)
{
  int v1 = *(int **)(result + 3512);
  if (v1)
  {
    if (*(_DWORD *)(result + 3520))
    {
      unsigned __int16 v2 = *(unsigned __int16 **)(result + 1800);
      uint64_t v3 = *v2;
      if (*v2)
      {
        uint64_t v4 = 0;
        while (*v1 != 26)
        {
          ++v4;
          v1 += 8;
          if (v3 == v4) {
            return result;
          }
        }
        if (v3 <= (unsigned __int16)v4) {
          goto LABEL_15;
        }
        int v5 = 0;
        uint64_t v6 = v3 - v4;
        do
        {
          int v7 = *v1;
          v1 += 8;
          if (v7 == 8) {
            int v5 = 1;
          }
          --v6;
        }
        while (v6);
        if (!v5)
        {
LABEL_15:
          v2[1] += v3 - v4;
          *unsigned __int16 v2 = v4;
        }
      }
    }
  }
  return result;
}

uint64_t MapProsodyValue_Scaling(int a1, int a2, int a3, int a4, int a5)
{
  int v5 = ((2 * a4 * a5) | 1) / (2 * a2);
  if (v5 <= a1) {
    int v5 = a1;
  }
  if (v5 >= a3) {
    return a3;
  }
  else {
    return v5;
  }
}

uint64_t betX_CreateRegularBrokerString(uint64_t a1, int a2, char *a3, size_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v13 = 0;
  __s = 0;
  *a3 = 0;
  if ((a2 & 0xFFFFFFFD) != 0) {
    return 2364547079;
  }
  if (a2) {
    int v9 = "synth";
  }
  else {
    int v9 = "select";
  }
  uint64_t result = strhelper_SafeCat(a3, v9, 0xFFFFFFFFFFFFFFFFLL, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &__s);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voicemodel", &__s);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"reduction", &__s);
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
                    if ((result & 0x80000000) == 0)
                    {
                      if (a2 != 2
                        || (uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"coder", &__s),
                            (result & 0x80000000) == 0)
                        && (uint64_t result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4), (result & 0x80000000) == 0)
                        && (uint64_t result = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4), (result & 0x80000000) == 0))
                      {
                        uint64_t result = paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"frequencyhz", &v13);
                        if ((result & 0x80000000) == 0)
                        {
                          uint64_t result = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
                          if ((result & 0x80000000) == 0)
                          {
                            uint64_t result = strhelper_SafeCat(a3, "f", 0xFFFFFFFFFFFFFFFFLL, a4);
                            if ((result & 0x80000000) == 0)
                            {
                              unsigned int v10 = v13 / 1000;
                              size_t v11 = cstdlib_strlen(a3);
                              LH_itoa(v10, &a3[v11], 0xAu);
                              uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"datapackagename", &__s);
                              if ((result & 0x80000000) == 0 && __s && *__s)
                              {
                                uint64_t result = brokeraux_ComposeBrokerString(a1, a3, 0, 0, 0, 0, 0, v14, a4);
                                if ((result & 0x80000000) == 0)
                                {
                                  *a3 = 0;
                                  return strhelper_SafeCat(a3, v14, 0xFFFFFFFFFFFFFFFFLL, a4);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t betX_CreateVAOBrokerString(uint64_t a1, int a2, char *a3, size_t a4, int a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v30 = 0;
  uint64_t v5 = 2364547079;
  __s = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  *a3 = 0;
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voiceaddon", &__s);
    if ((Str & 0x80000000) == 0)
    {
      uint64_t v12 = *(void **)(a1 + 8);
      size_t v13 = cstdlib_strlen("voiceaddonbaseuri.");
      size_t v14 = cstdlib_strlen(__s);
      uint64_t v15 = (char *)heap_Calloc(v12, 1, v13 + v14 + 1);
      if (!v15) {
        return 2364547082;
      }
      uint64_t v16 = v15;
      cstdlib_strcpy(v15, "voiceaddonbaseuri.");
      cstdlib_strcat(v16, __s);
      uint64_t v17 = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)v16, &v29);
      heap_Free(*(void **)(a1 + 8), (uint64_t)v16);
      if ((v17 & 0x80000000) != 0) {
        return v17;
      }
      if (v29 && *v29)
      {
        uint64_t Str = strhelper_SafeCat(a3, v29, 0xFFFFFFFFFFFFFFFFLL, a4);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        uint64_t Str = strhelper_SafeCat(a3, "/", 0xFFFFFFFFFFFFFFFFLL, a4);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        uint64_t v18 = "_";
        int v19 = 1;
      }
      else
      {
        int v19 = 0;
        uint64_t v18 = "/";
      }
      uint64_t v20 = a2 == 1 ? "selectvao" : "synthvao";
      uint64_t Str = strhelper_SafeCat(a3, v20, 0xFFFFFFFFFFFFFFFFLL, a4);
      if ((Str & 0x80000000) == 0)
      {
        uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v29);
        if ((Str & 0x80000000) == 0)
        {
          uint64_t Str = strhelper_SafeCat(a3, v18, 0xFFFFFFFFFFFFFFFFLL, a4);
          if ((Str & 0x80000000) == 0)
          {
            size_t v21 = cstdlib_strlen(a3);
            if (v29)
            {
              if (cstdlib_strlen(v29) + v21 >= a4) {
                return 2364547081;
              }
              if (cstdlib_strlen(v29))
              {
                size_t v22 = 0;
                do
                {
                  a3[v21 + v22] = cstdlib_tolower(v29[v22]);
                  ++v22;
                }
                while (v22 < cstdlib_strlen(v29));
                v21 += v22;
              }
              a3[v21] = 0;
            }
            uint64_t Str = strhelper_SafeCat(a3, v18, 0xFFFFFFFFFFFFFFFFLL, a4);
            if ((Str & 0x80000000) == 0)
            {
              uint64_t Str = strhelper_SafeCat(a3, __s, 0xFFFFFFFFFFFFFFFFLL, a4);
              if ((Str & 0x80000000) == 0)
              {
                uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voicemodel", &v29);
                if ((Str & 0x80000000) == 0)
                {
                  uint64_t Str = strhelper_SafeCat(a3, v18, 0xFFFFFFFFFFFFFFFFLL, a4);
                  if ((Str & 0x80000000) == 0)
                  {
                    uint64_t Str = strhelper_SafeCat(a3, v29, 0xFFFFFFFFFFFFFFFFLL, a4);
                    if ((Str & 0x80000000) == 0)
                    {
                      uint64_t Str = strhelper_SafeCat(a3, v18, 0xFFFFFFFFFFFFFFFFLL, a4);
                      if ((Str & 0x80000000) == 0)
                      {
                        uint64_t Str = strhelper_SafeCat(a3, "vao", 0xFFFFFFFFFFFFFFFFLL, a4);
                        if ((Str & 0x80000000) == 0)
                        {
                          uint64_t Str = strhelper_SafeCat(a3, v18, 0xFFFFFFFFFFFFFFFFLL, a4);
                          if ((Str & 0x80000000) == 0)
                          {
                            if (a2 != 3
                              || (uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"coder", &v29),
                                  (Str & 0x80000000) == 0)
                              && (uint64_t Str = strhelper_SafeCat(a3, v29, 0xFFFFFFFFFFFFFFFFLL, a4), (Str & 0x80000000) == 0)
                              && (uint64_t Str = strhelper_SafeCat(a3, v18, 0xFFFFFFFFFFFFFFFFLL, a4), (Str & 0x80000000) == 0))
                            {
                              uint64_t Str = paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"frequencyhz", &v30);
                              if ((Str & 0x80000000) == 0)
                              {
                                uint64_t v5 = strhelper_SafeCat(a3, "f", 0xFFFFFFFFFFFFFFFFLL, a4);
                                if ((v5 & 0x80000000) != 0) {
                                  return v5;
                                }
                                unsigned int v23 = v30 / 1000;
                                size_t v24 = cstdlib_strlen(a3);
                                LH_itoa(v23, &a3[v24], 0xAu);
                                if (v19)
                                {
                                  uint64_t v25 = strhelper_SafeCat(a3, ".dat", 0xFFFFFFFFFFFFFFFFLL, a4);
                                  uint64_t v5 = v25;
                                  if (!a5 || (v25 & 0x80000000) != 0) {
                                    return v5;
                                  }
                                  goto LABEL_51;
                                }
                                if (a5 || !v29)
                                {
                                  if (!a5) {
                                    return v5;
                                  }
LABEL_51:
                                  if (!cupreader_IsCupInTheScope(a1, &v27)) {
                                    return v5;
                                  }
                                  return cupreader_PrependCupName(a3, v27, a4);
                                }
                                if (!*v29) {
                                  return v5;
                                }
                                uint64_t Str = brokeraux_ComposeBrokerString(a1, a3, 0, 0, 0, 0, 0, v31, a4);
                                if ((Str & 0x80000000) == 0)
                                {
                                  *a3 = 0;
                                  return strhelper_SafeCat(a3, v31, 0xFFFFFFFFFFFFFFFFLL, a4);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Str;
  }
  return v5;
}

uint64_t betX_CreateAddonListParamName(uint64_t a1, char **a2)
{
  __s = 0;
  uint64_t v16 = 0;
  __s2 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v16);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voiceoperatingpoint", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v5 = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"vopversion", &__s2);
  if ((v5 & 0x80000000) == 0)
  {
    unsigned int v6 = cstdlib_strlen(__s);
    if (__s2) {
      uint64_t v7 = cstdlib_strlen(__s2);
    }
    else {
      uint64_t v7 = 0;
    }
    unsigned int v8 = cstdlib_strlen(v16);
    int v9 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v7 + v6 + v8 + 15);
    if (v9)
    {
      unsigned int v10 = v9;
      uint64_t v11 = v8;
      cstdlib_strcpy(v9, "voiceaddons.");
      if (v8)
      {
        uint64_t v12 = 0;
        do
        {
          v10[v12 + 12] = cstdlib_tolower(v16[v12]);
          ++v12;
        }
        while (v11 != v12);
      }
      cstdlib_strcat(v10, ".");
      cstdlib_strcat(v10, __s);
      if (__s2)
      {
        cstdlib_strcat(v10, ".");
        cstdlib_strcat(v10, __s2);
      }
      *a2 = v10;
    }
    else
    {
      return 2364547082;
    }
  }
  return v5;
}

uint64_t betX_GetVAOName(const char *a1, size_t *a2, char *a3, size_t a4)
{
  size_t v5 = *a2;
  *a3 = 0;
  if (a1)
  {
    while (a1[v5] == 59)
      ++v5;
    if (!a1[v5]) {
      return 0;
    }
    uint64_t v11 = cstdlib_strchr((char *)&a1[v5], 59);
    if (v11) {
      size_t v10 = v11 - a1 + 1;
    }
    else {
      size_t v10 = cstdlib_strlen(a1);
    }
    *a3 = 0;
    if (a1[v10 - 1] == 59) {
      size_t v12 = ~v5;
    }
    else {
      size_t v12 = -(uint64_t)v5;
    }
    strhelper_SafeCat(a3, (char *)&a1[v5], v10 + v12, a4);
  }
  else
  {
    size_t v10 = 0;
  }
  *a2 = v10;
  return 1;
}

uint64_t nnfeatex_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 7;
  if (a3 && a2 && a1 && a5)
  {
    uint64_t v11 = heap_Alloc(*(void *)(a5 + 8), 56);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t result = 0;
      *(void *)uint64_t v12 = a5;
      *(void *)(v12 + 8) = a2;
      *(void *)(v12 + 16) = a3;
      *(void *)(v12 + 24) = a4;
      *(_DWORD *)(v12 + 48) = 0;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 38) = 0;
      *(void *)a1 = v12;
      *(_DWORD *)(a1 + 8) = -28879052;
    }
    else
    {
      return 6;
    }
  }
  return result;
}

uint64_t nnfeatex_DeInit(uint64_t *a1)
{
  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0) {
    return 8;
  }
  heap_Free(*(void **)(*(void *)*a1 + 8), *a1);
  uint64_t result = 0;
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  return result;
}

uint64_t nnfeatex_ProcessStart(uint64_t *a1, uint64_t a2, uint64_t a3, _WORD *a4, _DWORD *a5)
{
  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0) {
    return 8;
  }
  uint64_t v10 = *a1;
  int v26 = 0;
  __int16 v25 = 0;
  size_t v24 = 0;
  unsigned __int16 v23 = 0;
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(v11 + 104))(a2, a3, 1, 0, (char *)&v26 + 2);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(v10 + 8) + 152))(a2, a3, 2, BYTE2(v26), &v26);
  if ((inited & 0x80000000) == 0)
  {
    unsigned __int16 v14 = v26;
    if ((_WORD)v26)
    {
      int v15 = 1;
      while (1)
      {
        uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(v10 + 8) + 120))(a2, a3, v14, &v26);
        if ((inited & 0x80000000) != 0) {
          break;
        }
        unsigned __int16 v14 = v26;
        if (!(_WORD)v26) {
          goto LABEL_11;
        }
        if (__CFADD__(v15++, 1)) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      int v15 = 0;
LABEL_11:
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(v11 + 184))(a2, a3, HIWORD(v26), 1, &v25) & 0x80000000) == 0&& v25 == 1)
      {
        uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned int **, unsigned __int16 *))(v11 + 176))(a2, a3, HIWORD(v26), 1, &v24, &v23);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
        uint64_t v17 = v23;
        if (v23)
        {
          uint64_t v18 = v24;
          do
          {
            unsigned int v19 = *v18;
            v18 += 8;
            int v20 = (1 << v19) & 0x270F0100;
            if (v19 <= 0x1D && v20 != 0) {
              v15 += 3;
            }
            --v17;
          }
          while (v17);
        }
      }
      if (!v15
        || (uint64_t inited = Init_WrdRec(*(void **)v10, (uint64_t *)(v10 + 32), (unsigned __int16)v15),
            (inited & 0x80000000) == 0))
      {
        *(_DWORD *)(v10 + 48) = v15;
        if (!inited)
        {
          uint64_t inited = Lingdb2NnWordRec(*(void **)v10, 0, *(void *)(v10 + 8), a2, a3, a4, a5, *(void *)(v10 + 32), (_WORD *)(v10 + 40), (_WORD *)(v10 + 42), (_WORD *)(v10 + 44));
          if ((inited & 0x80000000) != 0)
          {
            if (*(_DWORD *)(v10 + 48)) {
              Free_WrdRec(*(void **)v10, *(void *)(v10 + 32), (unsigned __int16)*(_DWORD *)(v10 + 48));
            }
          }
        }
      }
    }
  }
  return inited;
}

uint64_t nnfeatex_Process(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, _DWORD *a8, int a9)
{
  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0) {
    return 8;
  }
  unsigned __int16 v14 = (void **)*a1;
  if (a9)
  {
    int v20 = 0;
    size_t v21 = 0;
    int v15 = v14[2];
    if (*((_DWORD *)v15 + 895)) {
      unsigned __int8 v16 = 1;
    }
    else {
      unsigned __int8 v16 = *((unsigned char *)v15 + 3578);
    }
    if (nnextract_Allocate((uint64_t)*v14, &v20, v14[4], *((unsigned __int16 *)v14 + 22), *((unsigned __int16 *)v14 + 20), *((unsigned __int16 *)v14 + 21)))return 10; {
    uint64_t v17 = nnextract_Process2Buff((uint64_t)*v14, (uint64_t)v20, 1u, v16, 0, (uint64_t)v14[3], (uint64_t *)&v21, 0, (char *)v14[2] + 2400, (uint64_t)(v14[2] + 268), a7, a8);
    }
    uint64_t v18 = v21;
    if (!v17) {
      uint64_t v17 = nnfeatex_CheckFeatures((uint64_t)v14, (uint64_t)v21, a4);
    }
    nnextract_Deallocate((uint64_t)*v14, (uint64_t)v20, 1, v18, v16);
  }
  else
  {
    size_t v21 = 0;
    if (nnextract_Allocate((uint64_t)*v14, &v21, v14[4], *((unsigned __int16 *)v14 + 22), *((unsigned __int16 *)v14 + 20), *((unsigned __int16 *)v14 + 21)))return 10; {
    uint64_t v17 = nnextract_Rolled(*v14, (uint64_t)v21, 1u, *((unsigned __int8 *)v14[2] + 3578), 0, (uint64_t)v14[3], a6, 0, (char *)v14[2] + 2400, (uint64_t)(v14[2] + 268));
    }
    if (!v17) {
      return nnfeatex_CheckFeatures((uint64_t)v14, *a6, a4);
    }
  }
  return v17;
}

uint64_t nnfeatex_ProcessEnd(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  if ((safeh_HandleCheck(*a1, a1[1], -28879052, 56) & 0x80000000) != 0) {
    return 8;
  }
  unsigned int v6 = (void *)*a1;
  if (*((_DWORD *)v6 + 12)) {
    Free_WrdRec((void *)*v6, v6[4], (unsigned __int16)*((_DWORD *)v6 + 12));
  }
  heap_Free(*(void **)(*v6 + 8), *a2);
  uint64_t result = 0;
  *a2 = 0;
  *a3 = 0;
  *(void *)((char *)v6 + 38) = 0;
  v6[4] = 0;
  return result;
}

uint64_t nnfeatex_CheckFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 6;
  if (a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = *(_DWORD *)(v5 + 3580);
    if (v6)
    {
      if (v6 != 1 || *(_DWORD *)(a2 + 4024) == *(__int16 *)(a3 + 10)) {
        return 0;
      }
    }
    else if (*(_DWORD *)(a2 + 4024) / (int)*(unsigned __int16 *)(v5 + 3578) == *(__int16 *)(a3 + 10))
    {
      return 0;
    }
    return 21;
  }
  return result;
}

uint64_t NNFX_logMsg(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return log_OutPublic(*(void *)(result + 32), (uint64_t)"NNFEATEXTRACT", 0, 0, a5, a6, a7, a8, v8);
  }
  return result;
}

uint64_t Init_WrdRec(void *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = heap_Calloc((void *)a1[1], a3, 144);
  *a2 = v7;
  if (v7)
  {
    if (!a3) {
      return 0;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 144 * v6;
    while (1)
    {
      uint64_t v15 = *a2 + v13;
      *(_DWORD *)uint64_t v15 = 4;
      *(void *)(v15 + 4) = 0;
      *(void *)(v15 + 20) = 0;
      *(void *)(v15 + 12) = 0;
      uint64_t v16 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 32) = v16;
      if (!v16) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 32) = 0;
      uint64_t v17 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 40) = v17;
      if (!v17) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 40) = 0;
      uint64_t v18 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 48) = v18;
      if (!v18) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 48) = 0;
      uint64_t v19 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 56) = v19;
      if (!v19) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 56) = 0;
      uint64_t v20 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 64) = v20;
      if (!v20) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 64) = 0;
      uint64_t v21 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 72) = v21;
      if (!v21) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 72) = 0;
      uint64_t v22 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 80) = v22;
      if (!v22) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 80) = 0;
      uint64_t v23 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 88) = v23;
      if (!v23) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 88) = 0;
      uint64_t v24 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 96) = v24;
      if (!v24) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 96) = 0;
      uint64_t v25 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 104) = v25;
      if (!v25) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 104) = 0;
      uint64_t v26 = heap_Alloc(a1[1], 100);
      *(void *)(*a2 + v13 + 112) = v26;
      if (!v26) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 112) = 0;
      *(unsigned char *)(*a2 + v13 + 120) = 78;
      uint64_t v27 = heap_Alloc(a1[1], 512);
      *(void *)(*a2 + v13 + 136) = v27;
      if (!v27) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 136) = 0;
      uint64_t v28 = heap_Alloc(a1[1], 512);
      *(void *)(*a2 + v13 + 128) = v28;
      if (!v28) {
        break;
      }
      **(unsigned char **)(*a2 + v13 + 128) = 0;
      v13 += 144;
      if (v14 == v13) {
        return 0;
      }
    }
  }
  NNFX_logMsg((uint64_t)a1, 0, (uint64_t)"::ldbrec::memory allocation", v8, v9, v10, v11, v12);
  Free_WrdRec(a1, *a2, a3);
  return 2364547082;
}

void *Free_WrdRec(void *result, uint64_t a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    if (a3)
    {
      uint64_t v5 = a3;
      uint64_t v6 = (uint64_t *)(a2 + 72);
      do
      {
        uint64_t v7 = *(v6 - 5);
        if (v7) {
          heap_Free((void *)v4[1], v7);
        }
        uint64_t v8 = *(v6 - 4);
        if (v8) {
          heap_Free((void *)v4[1], v8);
        }
        uint64_t v9 = *(v6 - 3);
        if (v9) {
          heap_Free((void *)v4[1], v9);
        }
        uint64_t v10 = *(v6 - 2);
        if (v10) {
          heap_Free((void *)v4[1], v10);
        }
        uint64_t v11 = *(v6 - 1);
        if (v11) {
          heap_Free((void *)v4[1], v11);
        }
        if (*v6) {
          heap_Free((void *)v4[1], *v6);
        }
        uint64_t v12 = v6[1];
        if (v12) {
          heap_Free((void *)v4[1], v12);
        }
        uint64_t v13 = v6[3];
        if (v13) {
          heap_Free((void *)v4[1], v13);
        }
        uint64_t v14 = v6[2];
        if (v14) {
          heap_Free((void *)v4[1], v14);
        }
        uint64_t v15 = v6[4];
        if (v15) {
          heap_Free((void *)v4[1], v15);
        }
        uint64_t v16 = v6[5];
        if (v16) {
          heap_Free((void *)v4[1], v16);
        }
        uint64_t v17 = v6[7];
        if (v17) {
          heap_Free((void *)v4[1], v17);
        }
        uint64_t v18 = v6[8];
        if (v18) {
          heap_Free((void *)v4[1], v18);
        }
        v6 += 18;
        --v5;
      }
      while (v5);
    }
    uint64_t v19 = (void *)v4[1];
    return heap_Free(v19, a2);
  }
  return result;
}

uint64_t InitFromWrdRec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && a3)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(a3 + 120) = *(unsigned char *)(a2 + 120);
    cstdlib_memcpy(*(void **)(a3 + 32), *(const void **)(a2 + 32), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 40), *(const void **)(a2 + 40), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 48), *(const void **)(a2 + 48), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 56), *(const void **)(a2 + 56), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 64), *(const void **)(a2 + 64), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 72), *(const void **)(a2 + 72), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 80), *(const void **)(a2 + 80), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 88), *(const void **)(a2 + 88), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 96), *(const void **)(a2 + 96), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 104), *(const void **)(a2 + 104), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 112), *(const void **)(a2 + 112), 0x64uLL);
    cstdlib_memcpy(*(void **)(a3 + 128), *(const void **)(a2 + 128), 0x200uLL);
    cstdlib_memcpy(*(void **)(a3 + 136), *(const void **)(a2 + 136), 0x200uLL);
    return 0;
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::null pointer", a4, a5, a6, a7, a8);
    return 2364547079;
  }
}

uint64_t Compile_SntWrdRec(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), 1, 80);
  *a6 = v12;
  if (!v12
    || (*(_DWORD *)(v12 + 8) = a4, (uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), a4, 8)) == 0)
    || (uint64_t v19 = v18,
        *(void *)*a6 = v18,
        *(_DWORD *)(*a6 + 24) = a5,
        (uint64_t v20 = heap_Calloc(*(void **)(a1 + 8), a5, 8)) == 0))
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::memory allocation", v13, v14, v15, v16, v17);
    uint64_t v26 = 2364547082;
    goto LABEL_15;
  }
  uint64_t v21 = v20;
  *(void *)(*a6 + 16) = v20;
  if (!a3)
  {
LABEL_13:
    uint64_t v26 = 0;
    uint64_t v27 = *a6;
    *(_DWORD *)(v27 + 72) = 0;
    *(void *)(v27 + 64) = 0;
    uint64_t v28 = *a6;
    *(_DWORD *)(v28 + 56) = 0;
    *(void *)(v28 + 48) = 0;
    uint64_t v29 = *a6;
    *(_DWORD *)(v29 + 40) = 0;
    a6 = (uint64_t *)(v29 + 32);
    goto LABEL_17;
  }
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  uint64_t v24 = a3;
  while (1)
  {
    if ((*a2 - 5) < 3) {
      goto LABEL_12;
    }
    if (*a2 != 15) {
      break;
    }
    uint64_t v25 = Copy_WrdRec(a1, (uint64_t)a2, (uint64_t *)(v21 + 8 * v22));
    if ((v25 & 0x80000000) != 0) {
      goto LABEL_19;
    }
    ++v22;
LABEL_12:
    a2 += 36;
    if (!--v24) {
      goto LABEL_13;
    }
  }
  uint64_t v25 = Copy_WrdRec(a1, (uint64_t)a2, (uint64_t *)(v19 + 8 * v23));
  if ((v25 & 0x80000000) == 0)
  {
    ++v23;
    goto LABEL_12;
  }
LABEL_19:
  uint64_t v26 = v25;
  if (v23)
  {
    unsigned int v31 = v23 - 1;
    do
    {
      uint64_t v32 = *(void *)(v19 + 8 * v31);
      if (v32) {
        heap_Free(*(void **)(a1 + 8), v32);
      }
    }
    while ((unint64_t)v31--);
  }
  if (v22)
  {
    unsigned int v34 = v22 - 1;
    do
    {
      uint64_t v35 = *(void *)(v21 + 8 * v34);
      if (v35) {
        heap_Free(*(void **)(a1 + 8), v35);
      }
    }
    while ((unint64_t)v34--);
  }
LABEL_15:
  if (*a6)
  {
    *(void *)(*a6 + 16) = 0;
    *(void *)*a6 = 0;
    heap_Free(*(void **)(a1 + 8), *a6);
LABEL_17:
    *a6 = 0;
  }
  return v26;
}

uint64_t Copy_WrdRec(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 2364547079;
  if (a2)
  {
    uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), 1, 144);
    *a3 = v7;
    if (v7)
    {
      uint64_t v13 = (char **)v7;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
      *(void *)(v7 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
      *(unsigned char *)(v7 + 120) = *(unsigned char *)(a2 + 120);
      uint64_t v14 = DupWrdRecField(a1, (char **)(v7 + 32), 100, *(const char **)(a2 + 32));
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t v14 = DupWrdRecField(a1, v13 + 5, 100, *(const char **)(a2 + 40));
        if ((v14 & 0x80000000) == 0)
        {
          uint64_t v14 = DupWrdRecField(a1, v13 + 6, 100, *(const char **)(a2 + 48));
          if ((v14 & 0x80000000) == 0)
          {
            uint64_t v14 = DupWrdRecField(a1, v13 + 7, 100, *(const char **)(a2 + 56));
            if ((v14 & 0x80000000) == 0)
            {
              uint64_t v14 = DupWrdRecField(a1, v13 + 8, 100, *(const char **)(a2 + 64));
              if ((v14 & 0x80000000) == 0)
              {
                uint64_t v14 = DupWrdRecField(a1, v13 + 9, 100, *(const char **)(a2 + 72));
                if ((v14 & 0x80000000) == 0)
                {
                  uint64_t v14 = DupWrdRecField(a1, v13 + 10, 100, *(const char **)(a2 + 80));
                  if ((v14 & 0x80000000) == 0)
                  {
                    uint64_t v14 = DupWrdRecField(a1, v13 + 11, 100, *(const char **)(a2 + 88));
                    if ((v14 & 0x80000000) == 0)
                    {
                      uint64_t v14 = DupWrdRecField(a1, v13 + 12, 100, *(const char **)(a2 + 96));
                      if ((v14 & 0x80000000) == 0)
                      {
                        uint64_t v14 = DupWrdRecField(a1, v13 + 13, 100, *(const char **)(a2 + 104));
                        if ((v14 & 0x80000000) == 0)
                        {
                          uint64_t v14 = DupWrdRecField(a1, v13 + 14, 100, *(const char **)(a2 + 112));
                          if ((v14 & 0x80000000) == 0)
                          {
                            uint64_t v14 = DupWrdRecField(a1, v13 + 17, 512, *(const char **)(a2 + 136));
                            if ((v14 & 0x80000000) == 0)
                            {
                              uint64_t v14 = DupWrdRecField(a1, v13 + 16, 512, *(const char **)(a2 + 128));
                              if ((v14 & 0x80000000) == 0) {
                                return 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v3 = v14;
    }
    else
    {
      NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::memory allocation", v8, v9, v10, v11, v12);
      uint64_t v3 = 2364547082;
    }
    uint64_t v15 = (void *)*a3;
    if (*a3)
    {
      uint64_t v16 = v15[4];
      if (v16) {
        heap_Free(*(void **)(a1 + 8), v16);
      }
      v15[4] = 0;
      uint64_t v17 = v15[5];
      if (v17) {
        heap_Free(*(void **)(a1 + 8), v17);
      }
      v15[5] = 0;
      uint64_t v18 = v15[6];
      if (v18) {
        heap_Free(*(void **)(a1 + 8), v18);
      }
      v15[6] = 0;
      uint64_t v19 = v15[7];
      if (v19) {
        heap_Free(*(void **)(a1 + 8), v19);
      }
      v15[7] = 0;
      uint64_t v20 = v15[8];
      if (v20) {
        heap_Free(*(void **)(a1 + 8), v20);
      }
      v15[8] = 0;
      uint64_t v21 = v15[9];
      if (v21) {
        heap_Free(*(void **)(a1 + 8), v21);
      }
      v15[9] = 0;
      uint64_t v22 = v15[10];
      if (v22) {
        heap_Free(*(void **)(a1 + 8), v22);
      }
      v15[10] = 0;
      uint64_t v23 = v15[11];
      if (v23) {
        heap_Free(*(void **)(a1 + 8), v23);
      }
      v15[11] = 0;
      uint64_t v24 = v15[12];
      if (v24) {
        heap_Free(*(void **)(a1 + 8), v24);
      }
      v15[12] = 0;
      uint64_t v25 = v15[13];
      if (v25) {
        heap_Free(*(void **)(a1 + 8), v25);
      }
      v15[13] = 0;
      uint64_t v26 = v15[14];
      if (v26) {
        heap_Free(*(void **)(a1 + 8), v26);
      }
      v15[14] = 0;
      uint64_t v27 = v15[17];
      if (v27) {
        heap_Free(*(void **)(a1 + 8), v27);
      }
      v15[17] = 0;
      uint64_t v28 = v15[16];
      if (v28) {
        heap_Free(*(void **)(a1 + 8), v28);
      }
      v15[16] = 0;
      heap_Free(*(void **)(a1 + 8), *a3);
    }
    *a3 = 0;
  }
  return v3;
}

void *MakeSilWord(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  if (!a6)
  {
    uint64_t v40 = "::ldbrec:: in MakeSilWord. nullTag parameter is not defined.\n";
    goto LABEL_32;
  }
  char v10 = a5;
  int v11 = a4;
  uint64_t v14 = heap_Alloc(*(void *)(a1 + 8), 200);
  uint64_t v20 = (void *)v14;
  if (v14)
  {
    *(_DWORD *)(v14 + 140) = a2;
    *(_DWORD *)(v14 + 144) = 1;
    *(void *)(v14 + 192) = 1;
    *(unsigned char *)(v14 + 136) = 78;
    *(_DWORD *)uint64_t v14 = 0;
    *(_DWORD *)(v14 + 4) = a3;
    *(_DWORD *)(v14 + 20) = 0;
    *(_DWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 12) = 0;
    *(_DWORD *)(v14 + 16) = v11;
    *(_DWORD *)(v14 + 8) = a3;
    uint64_t v21 = stringdup(a1, "");
    v20[4] = v21;
    if (!v21)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) ortho.\n";
      goto LABEL_32;
    }
    uint64_t v22 = stringdup(a1, "");
    v20[5] = v22;
    if (!v22)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) SPR.\n";
      goto LABEL_32;
    }
    uint64_t v23 = stringdup(a1, "");
    v20[6] = v23;
    if (!v23)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) tnTag.\n";
      goto LABEL_32;
    }
    uint64_t v24 = stringdup(a1, "");
    v20[7] = v24;
    if (!v24)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) POS.\n";
      goto LABEL_32;
    }
    uint64_t v25 = stringdup(a1, "");
    v20[8] = v25;
    if (!v25)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) CGN.\n";
      goto LABEL_32;
    }
    uint64_t v26 = stringdup(a1, "");
    v20[9] = v26;
    if (!v26)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) lang.\n";
      goto LABEL_32;
    }
    uint64_t v27 = stringdup(a1, "");
    v20[10] = v27;
    if (!v27 || (uint64_t v28 = stringdup(a1, ""), (v20[11] = v28) == 0))
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluPOS.\n";
      goto LABEL_32;
    }
    uint64_t v29 = stringdup(a1, "");
    v20[12] = v29;
    if (!v29)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluCLS.\n";
      goto LABEL_32;
    }
    int v30 = stringdup(a1, "");
    v20[14] = v30;
    if (!v30)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluPNC.\n";
      goto LABEL_32;
    }
    unsigned int v31 = stringdup(a1, "");
    v20[13] = v31;
    if (!v31)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluCMP.\n";
      goto LABEL_32;
    }
    uint64_t v32 = stringdup(a1, "");
    v20[15] = v32;
    if (!v32)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluBDS.\n";
      goto LABEL_32;
    }
    uint64_t v33 = stringdup(a1, "");
    v20[16] = v33;
    if (!v33)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold (empty) nluCPS.\n";
      goto LABEL_32;
    }
    unsigned int v34 = (unsigned char *)heap_Alloc(*(void *)(a1 + 8), 2);
    v20[19] = v34;
    if (!v34)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold phones.\n";
      goto LABEL_32;
    }
    *unsigned int v34 = v10;
    *(unsigned char *)(v20[19] + 1) = 0;
    uint64_t v35 = (unsigned char *)heap_Alloc(*(void *)(a1 + 8), 2);
    v20[20] = v35;
    if (!v35)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold differentiators.\n";
      goto LABEL_32;
    }
    unsigned char *v35 = 32;
    *(unsigned char *)(v20[20] + 1) = 0;
    uint64_t v36 = (_DWORD *)heap_Alloc(*(void *)(a1 + 8), 4);
    v20[22] = v36;
    if (!v36)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold lexStressSeq.\n";
      goto LABEL_32;
    }
    *uint64_t v36 = 0;
    uint64_t v37 = (_DWORD *)heap_Alloc(*(void *)(a1 + 8), 4);
    v20[23] = v37;
    if (!v37)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold syllBdrySeq.\n";
      goto LABEL_32;
    }
    *uint64_t v37 = 1;
    uint64_t v38 = heap_Alloc(*(void *)(a1 + 8), 8);
    v20[21] = v38;
    if (!v38)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() allocating memory to hold phone tags.\n";
      goto LABEL_32;
    }
    uint64_t v39 = stringdup(a1, a6);
    *(void *)v20[21] = v39;
    if (!v39)
    {
      uint64_t v40 = "::ldbrec:: in MakeSilWord() copying (null) phone tag.\n";
LABEL_32:
      NNFX_logMsg(a1, 0, (uint64_t)v40, a4, a5, (uint64_t)a6, a7, a8);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec:: in MakeSilWord() while allocating memory.\n", v15, v16, v17, v18, v19);
  }
  return v20;
}

void *FillProsWords(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v8 = a8;
  uint64_t v9 = (char *)a6;
  char v10 = (_DWORD *)a5;
  int v11 = (unsigned int *)a4;
  uint64_t v14 = a1;
  unsigned int v15 = 2;
  *(_DWORD *)a4 = 2;
  if (a3)
  {
    uint64_t v16 = 0;
    unsigned int v15 = 2;
    do
    {
      uint64_t v17 = *(uint64_t **)(a2 + 8 * v16);
      if (*((_DWORD *)v17 + 2))
      {
        unint64_t v18 = 0;
        uint64_t v19 = *v17;
        do
        {
          *(_DWORD *)a4 = v15 + 1;
          if (*(_DWORD *)(*(void *)(v19 + 8 * v18) + 16))
          {
            v15 += 2;
            *(_DWORD *)a4 = v15;
          }
          else
          {
            ++v15;
          }
          ++v18;
        }
        while (v18 < *((unsigned int *)v17 + 2));
      }
      else
      {
        LODWORD(v18) = 0;
      }
      ++v16;
    }
    while (v16 != a3);
    if (!v15)
    {
      uint64_t v20 = "::ldbrec:: in FillProsWords. Number of prosodic words is %d.\n";
      goto LABEL_144;
    }
  }
  else
  {
    LODWORD(v18) = 0;
  }
  uint64_t v26 = (void *)heap_Alloc(*(void *)(a1 + 8), 8 * v15);
  if (!v26)
  {
    NNFX_logMsg(v14, 0, (uint64_t)"::ldbrec:: in FillProsWords while allocating memory to hold ppPWRI\n", v21, v22, v23, v24, v25);
    return v26;
  }
  if (**(unsigned char **)(***(void ***)a2 + 136) == 35)
  {
    uint64_t v27 = 0;
    if (a3) {
      goto LABEL_18;
    }
LABEL_135:
    uint64_t v112 = 0;
    uint64_t v31 = 0xFFFFFFFFLL;
    uint64_t v30 = v27;
    goto LABEL_136;
  }
  SilWord = MakeSilWord(v14, 0, 0, 200, 35, v9, v24, v25);
  *uint64_t v26 = SilWord;
  if (!SilWord)
  {
    uint64_t v20 = "::ldbrec:: in FillProsWords while creating initial silence.\n";
    goto LABEL_144;
  }
  uint64_t v27 = 1;
  if (!a3) {
    goto LABEL_135;
  }
LABEL_18:
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v130 = 0;
  unsigned int v141 = 0;
  uint64_t v123 = a3;
  char v132 = 32;
  uint64_t v138 = v27;
  uint64_t v30 = v27;
LABEL_19:
  uint64_t v145 = v28;
  if (v29) {
    heap_Free(*(void **)(v14 + 8), (uint64_t)v29);
  }
  uint64_t v29 = (char *)stringdup(v14, v9);
  if (!v29)
  {
    uint64_t v20 = "::ldbrec:: in FillProsWords resetting active-tag value.\n";
    goto LABEL_144;
  }
  uint64_t v31 = v145;
  uint64_t v32 = *(void *)(a2 + 8 * v145);
  if (!*(_DWORD *)(v32 + 8))
  {
    LODWORD(v18) = 0;
    goto LABEL_130;
  }
  __s = v29;
  uint64_t v126 = v8;
  uint64_t v124 = v9;
  uint64_t v122 = v10;
  unint64_t v18 = 0;
  uint64_t v147 = v14;
  uint64_t v127 = v26;
  while (2)
  {
    unint64_t v144 = v18;
    size_t v33 = cstdlib_strlen(*(const char **)(*(void *)(*(void *)v32 + 8 * v18) + 136));
    uint64_t v34 = (v33 + 1);
    uint64_t v35 = heap_Alloc(*(void *)(v14 + 8), v34);
    if (!v35)
    {
      uint64_t v20 = "::ldbrec:: in FillProsWords allocating memory to hold phone sequences.\n";
      goto LABEL_144;
    }
    uint64_t v139 = v35;
    uint64_t v36 = heap_Alloc(*(void *)(v14 + 8), v34);
    if (!v36)
    {
      uint64_t v20 = "::ldbrec:: in FillProsWords allocating memory to hold differentiator sequences.\n";
      goto LABEL_144;
    }
    uint64_t v137 = v36;
    uint64_t v133 = heap_Calloc(*(void **)(v14 + 8), v34, 4);
    if (!v133)
    {
      uint64_t v20 = "::ldbrec:: in FillProsWrods allocating memory to hold lexical stress.\n";
      goto LABEL_144;
    }
    uint64_t v136 = heap_Calloc(*(void **)(v14 + 8), v34, 4);
    if (!v136)
    {
      uint64_t v20 = "::ldbrec:: in FillProsWords allocating memory to hold syllable boundaries.\n";
      goto LABEL_144;
    }
    uint64_t v146 = (void *)heap_Alloc(*(void *)(v14 + 8), 8 * v34);
    if (!v146)
    {
      uint64_t v20 = "::ldbrec:: in FillProsWords allocating memory to hold phone tags.\n";
      goto LABEL_144;
    }
    if (v33 == -1)
    {
      unint64_t v37 = v144;
      a4 = v145;
    }
    else
    {
      bzero(v146, 8 * v34);
      unint64_t v37 = v144;
      a4 = v145;
      if (!v33) {
        goto LABEL_122;
      }
    }
    uint64_t v38 = 0;
    unsigned int v39 = 0;
    unint64_t v40 = v33;
    uint64_t v41 = 1;
    uint64_t v42 = v141;
    unsigned int v134 = v30;
    unint64_t v131 = v33;
    while (2)
    {
      uint64_t v43 = v39;
      while (1)
      {
        uint64_t v44 = *(void *)(*(void *)(**(void **)(a2 + 8 * a4) + 8 * v37) + 136);
        int v45 = *(char *)(v44 + v43);
        if (!*(unsigned char *)(v44 + v43))
        {
LABEL_81:
          uint64_t v30 = v134;
          goto LABEL_82;
        }
        int v46 = *(unsigned __int8 *)(v44 + v43);
        if (v46 == 92) {
          break;
        }
        if ((v45 & 0xF7) == 0x25)
        {
          uint64_t v42 = 0;
          uint64_t v41 = 1;
        }
        else if (*(unsigned __int8 *)(v44 + v43) > 0x29u)
        {
          if (v46 != 42)
          {
            if (v46 != 96)
            {
LABEL_49:
              if (a7)
              {
                uint64_t v47 = v42;
                size_t v128 = v33;
                uint64_t v48 = v38;
                uint64_t v49 = v41;
                uint64_t v50 = cstdlib_strchr(a7, v45);
                uint64_t v41 = v49;
                uint64_t v38 = v48;
                unint64_t v37 = v144;
                a4 = v145;
                uint64_t v42 = v47;
                uint64_t v26 = v127;
                size_t v33 = v128;
                if (v50)
                {
                  char v132 = v45;
LABEL_62:
                  unint64_t v40 = v131;
                  goto LABEL_39;
                }
              }
              if (v38 >= v33)
              {
                uint64_t v20 = "::ldbrec:: in FillProsWords. Trying to write information for phone at index %d in buffer of length %d.";
                goto LABEL_149;
              }
              if (*(unsigned __int8 *)(v126 + v45) == 255)
              {
                uint64_t v54 = v42;
                uint64_t v55 = v38;
                uint64_t v56 = v41;
                NNFX_logMsg(v147, 1, (uint64_t)"::ldbrec:: in FillProsWords unvalid phoneme %c.\n", a4, a5, a6, (uint64_t)a7, a8);
                uint64_t v41 = v56;
                uint64_t v38 = v55;
                unint64_t v37 = v144;
                a4 = v145;
                uint64_t v42 = v54;
                goto LABEL_62;
              }
              *(unsigned char *)(v139 + v38) = v45;
              *(_DWORD *)(v133 + 4 * v38) = v42;
              *(unsigned char *)(v137 + v38) = 32;
              uint64_t v51 = v38;
              unsigned int v142 = v42;
              if (v38)
              {
                uint64_t v52 = (v38 - 1);
                *(unsigned char *)(v137 + v52) = v132;
                *(_DWORD *)(v136 + 4 * v38) = 0;
                if (v41 == 1)
                {
                  int v53 = 1;
                  goto LABEL_59;
                }
              }
              else
              {
                int v53 = 0;
                uint64_t v52 = 0;
LABEL_59:
                *(_DWORD *)(v136 + 4 * v52) = v53;
              }
              int v57 = v38;
              uint64_t v58 = stringdup(v147, __s);
              *((void *)v146 + v51) = v58;
              if (!v58)
              {
                uint64_t v20 = "::ldbrec:: in FillProsWords copying phone tag for phone %c.\n";
                goto LABEL_149;
              }
              uint64_t v41 = 0;
              uint64_t v38 = (v57 + 1);
              char v132 = 32;
              unint64_t v37 = v144;
              a4 = v145;
              uint64_t v42 = v142;
              goto LABEL_62;
            }
            uint64_t v42 = 2;
          }
        }
        else if (v46 == 34)
        {
          uint64_t v42 = 1;
        }
        else
        {
          if (v46 != 39) {
            goto LABEL_49;
          }
          uint64_t v42 = 3;
        }
LABEL_39:
        if (++v43 >= v40) {
          goto LABEL_81;
        }
      }
      unsigned int v129 = v41;
      uint64_t v59 = v38;
      unsigned int v143 = v42;
      int v60 = v43 + 1;
      uint64_t v61 = cstdlib_strchr((char *)(v44 + (v43 + 1)), 92);
      if (!v61)
      {
        NNFX_logMsg(v147, 1, (uint64_t)"::ldbrec:: in FillProsWords. End of SPR reached without finding closing tag.", v62, v63, v64, v65, v66);
LABEL_76:
        uint64_t v30 = v134;
        unint64_t v37 = v144;
        a4 = v145;
        goto LABEL_79;
      }
      int v60 = v61 - *(_DWORD *)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 136);
      if ((v60 - v43 + 1) > 2)
      {
        heap_Free(*(void **)(v147 + 8), (uint64_t)__s);
        uint64_t v68 = (char *)heap_Alloc(*(void *)(v147 + 8), (v60 - v43));
        if (!v68)
        {
          uint64_t v20 = "::ldbrec:: in FillProsWords allocating memory when updating tag value.\n";
          goto LABEL_149;
        }
        unint64_t v69 = 0;
        unint64_t v70 = (~v43 + v60);
        unint64_t v37 = v144;
        a4 = v145;
        do
        {
          v68[v69] = *(unsigned char *)(*(void *)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 136)
                              + (v43 + v69 + 1));
          ++v69;
        }
        while (v69 < v70);
        v68[v70] = 0;
        if (*v68 != 47)
        {
          __s = v68;
          goto LABEL_78;
        }
        heap_Free(*(void **)(v147 + 8), (uint64_t)v68);
        uint64_t v71 = (char *)stringdup(v147, v124);
        if (!v71)
        {
          uint64_t v20 = "::ldbrec:: in FillProsWords resetting active-tag value.\n";
          goto LABEL_149;
        }
        __s = v71;
        goto LABEL_76;
      }
      NNFX_logMsg(v147, 1, (uint64_t)"::ldbrec:: empty tag in FillProsWords.", v62, v63, v64, v65, v66);
      unint64_t v37 = v144;
      a4 = v145;
      if (v60 + 1 == v43) {
        int v67 = 1;
      }
      else {
        int v67 = v60 - v43;
      }
      int v60 = v67 + v43;
LABEL_78:
      uint64_t v30 = v134;
LABEL_79:
      uint64_t v42 = v143;
      uint64_t v38 = v59;
      unint64_t v40 = v131;
      uint64_t v41 = v129;
      unsigned int v39 = v60 + 1;
      if (v60 + 1 < v33) {
        continue;
      }
      break;
    }
LABEL_82:
    if (v38 > v33)
    {
      uint64_t v20 = "::ldbrec:: in FillProsWords. Trying to null-terminate string at index %d in a buffer of length %d.\n";
LABEL_149:
      uint64_t v119 = v147;
      goto LABEL_145;
    }
    uint64_t v14 = v147;
    unsigned int v141 = v42;
    if (v33 && v130 && v30 >= 2)
    {
      int v72 = v38;
      if (!InsertSilWord(v147, a2, (uint64_t)v26, a4, (v37 - 1), (v138 - 1), v30, *v11, v124))return 0; {
      uint64_t v30 = (v30 + 1);
      }
      uint64_t v73 = (v138 + 1);
      unint64_t v37 = v144;
      a4 = v145;
      LODWORD(v38) = v72;
    }
    else
    {
      uint64_t v73 = v138;
    }
    uint64_t v138 = v73;
    if (!v38)
    {
LABEL_122:
      int v130 = *(_DWORD *)(*(void *)(**(void **)(a2 + 8 * a4) + 8 * v37) + 16);
      heap_Free(*(void **)(v14 + 8), v133);
      heap_Free(*(void **)(v14 + 8), v139);
      heap_Free(*(void **)(v14 + 8), v137);
      heap_Free(*(void **)(v14 + 8), v136);
      if (v34)
      {
        uint64_t v111 = (uint64_t *)v146;
        do
        {
          if (*v111)
          {
            heap_Free(*(void **)(v14 + 8), *v111);
            uint64_t *v111 = 0;
          }
          ++v111;
          --v34;
        }
        while (v34);
      }
      heap_Free(*(void **)(v14 + 8), (uint64_t)v146);
      uint64_t v31 = v145;
      unint64_t v18 = v144 + 1;
      uint64_t v32 = *(void *)(a2 + 8 * v145);
      if (v144 + 1 < *(unsigned int *)(v32 + 8)) {
        continue;
      }
      char v10 = v122;
      uint64_t v9 = v124;
      uint64_t v29 = __s;
      uint64_t v8 = v126;
LABEL_130:
      uint64_t v28 = v31 + 1;
      if (v31 + 1 == v123)
      {
        uint64_t v112 = (uint64_t)v29;
        LODWORD(v27) = v138;
LABEL_136:
        uint64_t v121 = v9;
        int v114 = v27;
        if (!InsertSilWord(v14, a2, (uint64_t)v26, v31, (v18 - 1), (v27 - 1), v30, *v11, v121))return 0; {
        int v115 = v30;
        }
        unsigned int v116 = v114 + 1;
        int v117 = v115 + 1;
        if (v116 < *v11)
        {
          uint64_t v118 = heap_Realloc(*(uint64_t **)(v14 + 8), (uint64_t)v26, 8 * v116);
          if (v118)
          {
            unsigned int *v11 = v116;
            uint64_t v26 = (void *)v118;
          }
        }
        if (v112) {
          heap_Free(*(void **)(v14 + 8), v112);
        }
        _DWORD *v10 = v117;
        return v26;
      }
      goto LABEL_19;
    }
    break;
  }
  int v135 = v30;
  *(unsigned char *)(v139 + v38) = 0;
  uint64_t v74 = (v38 - 1);
  *(unsigned char *)(v137 + v74) = v132;
  *(unsigned char *)(v137 + v38) = 0;
  if (v73 >= *v11)
  {
    uint64_t v20 = "::ldbrec:: in FillProsWords trying to allocate for %d-th prosodic word while expecting %d";
  }
  else
  {
    unsigned int v75 = v38;
    uint64_t v76 = heap_Alloc(*(void *)(v147 + 8), 200);
    v26[v138] = v76;
    if (v76)
    {
      uint64_t v77 = *(void *)(**(void **)(a2 + 8 * v145) + 8 * v144);
      *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
      *(void *)(v76 + 16) = *(void *)(v77 + 16);
      *(_DWORD *)(v76 + 24) = *(_DWORD *)(v77 + 24);
      *(unsigned char *)(v76 + 136) = *(unsigned char *)(v77 + 120);
      int v78 = stringdup(v147, *(char **)(v77 + 128));
      *(void *)(v26[v138] + 32) = v78;
      if (v78)
      {
        int v79 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 136));
        *(void *)(v26[v138] + 40) = v79;
        if (v79)
        {
          int v80 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 32));
          *(void *)(v26[v138] + 48) = v80;
          if (v80)
          {
            uint64_t v81 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 40));
            *(void *)(v26[v138] + 56) = v81;
            if (v81)
            {
              uint64_t v82 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 48));
              *(void *)(v26[v138] + 64) = v82;
              if (v82)
              {
                uint64_t v83 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 56));
                *(void *)(v26[v138] + 72) = v83;
                if (v83)
                {
                  char v84 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 64));
                  *(void *)(v26[v138] + 80) = v84;
                  if (v84)
                  {
                    uint64_t v85 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 72));
                    *(void *)(v26[v138] + 88) = v85;
                    if (v85)
                    {
                      uint64_t v86 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 80));
                      *(void *)(v26[v138] + 96) = v86;
                      if (v86)
                      {
                        uint64_t v87 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 96));
                        *(void *)(v26[v138] + 112) = v87;
                        if (v87)
                        {
                          uint64_t v88 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 88));
                          *(void *)(v26[v138] + 104) = v88;
                          if (v88)
                          {
                            uint64_t v89 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 104));
                            *(void *)(v26[v138] + 120) = v89;
                            if (v89)
                            {
                              uint64_t v90 = stringdup(v147, *(char **)(*(void *)(**(void **)(a2 + 8 * v145) + 8 * v144) + 112));
                              *(void *)(v26[v138] + 128) = v90;
                              if (v90)
                              {
                                *(_DWORD *)(v136 + 4 * v74) = 1;
                                uint64_t v91 = (_DWORD *)v26[v138];
                                uint64_t v92 = v75;
                                v91[35] = v135;
                                v91[36] = v75;
                                BOOL v93 = v144 == *(_DWORD *)(*(void *)(a2 + 8 * v145) + 8) - 1;
                                v91[48] = 0;
                                v91[49] = v93;
                                uint64_t v94 = heap_Calloc(*(void **)(v147 + 8), v75, 4);
                                *(void *)(v26[v138] + 176) = v94;
                                if (v94)
                                {
                                  uint64_t v30 = v135 + v75;
                                  uint64_t v95 = *(_DWORD **)(v26[v138] + 176);
                                  uint64_t v96 = v75;
                                  uint64_t v97 = (int *)v133;
                                  do
                                  {
                                    int v98 = *v97++;
                                    *v95++ = v98;
                                    --v96;
                                  }
                                  while (v96);
                                  uint64_t v99 = heap_Alloc(*(void *)(v147 + 8), v75 + 1);
                                  *(void *)(v26[v138] + 152) = v99;
                                  if (v99)
                                  {
                                    for (uint64_t i = 0; i != v75; ++i)
                                      *(unsigned char *)(*(void *)(v26[v138] + 152) + i) = *(unsigned char *)(v139 + i);
                                    *(unsigned char *)(*(void *)(v26[v138] + 152) + v75) = 0;
                                    uint64_t v101 = heap_Alloc(*(void *)(v147 + 8), v75 + 1);
                                    *(void *)(v26[v138] + 160) = v101;
                                    if (v101)
                                    {
                                      for (uint64_t j = 0; j != v75; ++j)
                                        *(unsigned char *)(*(void *)(v26[v138] + 160) + j) = *(unsigned char *)(v137 + j);
                                      *(unsigned char *)(*(void *)(v26[v138] + 160) + v75) = 0;
                                      uint64_t v103 = heap_Calloc(*(void **)(v147 + 8), v75, 4);
                                      *(void *)(v26[v138] + 184) = v103;
                                      if (v103)
                                      {
                                        uint64_t v104 = *(_DWORD **)(v26[v138] + 184);
                                        uint64_t v105 = v75;
                                        uint64_t v106 = (int *)v136;
                                        do
                                        {
                                          int v107 = *v106++;
                                          *v104++ = v107;
                                          --v105;
                                        }
                                        while (v105);
                                        uint64_t v108 = heap_Alloc(*(void *)(v147 + 8), 8 * v75);
                                        *(void *)(v26[v138] + 168) = v108;
                                        if (v108)
                                        {
                                          uint64_t v109 = 0;
                                          while (1)
                                          {
                                            uint64_t v110 = stringdup(v147, *((char **)v146 + v109));
                                            *(void *)(*(void *)(v26[v138] + 168) + 8 * v109) = v110;
                                            if (!v110) {
                                              break;
                                            }
                                            if (v92 == ++v109)
                                            {
                                              unsigned int v141 = 0;
                                              uint64_t v138 = (v138 + 1);
                                              char v132 = 32;
                                              uint64_t v14 = v147;
                                              unint64_t v37 = v144;
                                              a4 = v145;
                                              goto LABEL_122;
                                            }
                                          }
                                          uint64_t v20 = "::ldbrec:: in FillProsWords allocating mem to hold phone-tag sequence fo"
                                                "r phone %d in pros word %d";
                                        }
                                        else
                                        {
                                          uint64_t v20 = "::ldbrec:: in FillProsWords allocating mem to hold phone-tag sequences f"
                                                "or pros word %d\n";
                                        }
                                      }
                                      else
                                      {
                                        uint64_t v20 = "::ldbrec:: in FillProsWords allocating mem to hold syll bdry sequence for pros word %d\n";
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v20 = "::ldbrec:: in FillProsWords allocating mem to hold differentiators sequence "
                                            "for pros word %d\n";
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v20 = "::ldbrec:: in FillProsWords allocating mem to hold phone sequence for pros word %d\n";
                                  }
                                }
                                else
                                {
                                  uint64_t v20 = "::ldbrec:: in FillProsWords allocating mem to hold lex stress sequence for pros word %d\n";
                                }
                                goto LABEL_149;
                              }
                              uint64_t v20 = "::ldbrec:: in FillProsWord creating nluCPS field.\n";
                            }
                            else
                            {
                              uint64_t v20 = "::ldbrec:: in FillProsWord creating nluBDS field.\n";
                            }
                          }
                          else
                          {
                            uint64_t v20 = "::ldbrec:: in FillProsWord creating nluCMP field.\n";
                          }
                        }
                        else
                        {
                          uint64_t v20 = "::ldbrec:: in FillProsWord creating nluPNC field.\n";
                        }
                      }
                      else
                      {
                        uint64_t v20 = "::ldbrec:: in FillProsWord creating nluCLS field.\n";
                      }
                    }
                    else
                    {
                      uint64_t v20 = "::ldbrec:: in FillProsWord creating nluPHR field.\n";
                    }
                  }
                  else
                  {
                    uint64_t v20 = "::ldbrec:: in FillProsWord creating nluPOS field.\n";
                  }
                }
                else
                {
                  uint64_t v20 = "::ldbrec:: in FillProsWord creating lang field.\n";
                }
              }
              else
              {
                uint64_t v20 = "::ldbrec:: in FillProsWord creating CGN field.\n";
              }
            }
            else
            {
              uint64_t v20 = "::ldbrec:: in FillProsWord creating POS field.\n";
            }
          }
          else
          {
            uint64_t v20 = "::ldbrec:: in FillProsWord creating tnTag field.\n";
          }
        }
        else
        {
          uint64_t v20 = "::ldbrec:: in FillProsWord creating SPR field.\n";
        }
      }
      else
      {
        uint64_t v20 = "::ldbrec:: in FillProsWord creating ortho field.\n";
      }
    }
    else
    {
      uint64_t v20 = "::ldbrec:: in FillProsWords allocating ppPWRI for record %d\n";
    }
  }
LABEL_144:
  uint64_t v119 = v14;
LABEL_145:
  NNFX_logMsg(v119, 0, (uint64_t)v20, a4, a5, a6, (uint64_t)a7, a8);
  return 0;
}

uint64_t InsertSilWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  unsigned int v9 = a6;
  if (a6 >= a8)
  {
    uint64_t v21 = "::ldbrec:: in FillProsWords trying to allocate for %d-th prosodic (silence) word while expecting %d max";
LABEL_13:
    NNFX_logMsg(a1, 0, (uint64_t)v21, a4, a5, a6, a7, a8);
    return 0;
  }
  int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v15 = *(void *)(**(void **)(a2 + 8 * a4) + 8 * a5);
  SilWord = MakeSilWord(a1, a7, *(_DWORD *)(v15 + 8), *(unsigned int *)(v15 + 16), 35, a9, a7, a8);
  *(void *)(a3 + 8 * (v9 + 1)) = SilWord;
  if (!SilWord)
  {
    uint64_t v21 = "::ldbrec:: in FillProsWords while creating silence word after phone %d.\n";
    goto LABEL_13;
  }
  uint64_t v17 = *(void *)(a3 + 8 * v9);
  int v18 = *(_DWORD *)(*(void *)(a2 + 8 * v12) + 8) - 1;
  if (*(_DWORD *)(v17 + 144)) {
    BOOL v19 = v18 == v11;
  }
  else {
    BOOL v19 = 0;
  }
  if (v19) {
    *(_DWORD *)(v17 + 196) = 0;
  }
  uint64_t v20 = 1;
  if (v18 == v11) {
    *((_DWORD *)SilWord + 49) = 1;
  }
  return v20;
}

void *freepWRI(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[16];
  if (v4) {
    heap_Free(*(void **)(a1 + 8), v4);
  }
  uint64_t v5 = a2[17];
  if (v5) {
    heap_Free(*(void **)(a1 + 8), v5);
  }
  uint64_t v6 = a2[4];
  if (v6) {
    heap_Free(*(void **)(a1 + 8), v6);
  }
  uint64_t v7 = a2[5];
  if (v7) {
    heap_Free(*(void **)(a1 + 8), v7);
  }
  uint64_t v8 = a2[6];
  if (v8) {
    heap_Free(*(void **)(a1 + 8), v8);
  }
  uint64_t v9 = a2[7];
  if (v9) {
    heap_Free(*(void **)(a1 + 8), v9);
  }
  uint64_t v10 = a2[8];
  if (v10) {
    heap_Free(*(void **)(a1 + 8), v10);
  }
  uint64_t v11 = a2[9];
  if (v11) {
    heap_Free(*(void **)(a1 + 8), v11);
  }
  uint64_t v12 = a2[10];
  if (v12) {
    heap_Free(*(void **)(a1 + 8), v12);
  }
  uint64_t v13 = a2[12];
  if (v13) {
    heap_Free(*(void **)(a1 + 8), v13);
  }
  uint64_t v14 = a2[11];
  if (v14) {
    heap_Free(*(void **)(a1 + 8), v14);
  }
  uint64_t v15 = a2[13];
  if (v15) {
    heap_Free(*(void **)(a1 + 8), v15);
  }
  uint64_t v16 = a2[14];
  if (v16) {
    heap_Free(*(void **)(a1 + 8), v16);
  }
  uint64_t v17 = *(void **)(a1 + 8);

  return heap_Free(v17, (uint64_t)a2);
}

void *freepSRI(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void **)(*(void *)a2 + 8 * i);
      if (v6)
      {
        freepWRI(a1, v6);
        *(void *)(*(void *)a2 + 8 * i) = 0;
        unint64_t v4 = *(unsigned int *)(a2 + 8);
      }
    }
  }
  if (*(void *)a2)
  {
    heap_Free(*(void **)(a1 + 8), *(void *)a2);
    *(void *)a2 = 0;
  }
  unint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7)
  {
    for (unint64_t j = 0; j < v7; ++j)
    {
      uint64_t v9 = *(void **)(*(void *)(a2 + 16) + 8 * j);
      if (v9)
      {
        freepWRI(a1, v9);
        *(void *)(*(void *)(a2 + 16) + 8 * j) = 0;
        unint64_t v7 = *(unsigned int *)(a2 + 24);
      }
    }
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    *(void *)(a2 + 16) = 0;
  }
  unint64_t v11 = *(unsigned int *)(a2 + 40);
  if (v11)
  {
    for (unint64_t k = 0; k < v11; ++k)
    {
      uint64_t v13 = *(void **)(*(void *)(a2 + 32) + 8 * k);
      if (v13)
      {
        freepWRI(a1, v13);
        *(void *)(*(void *)(a2 + 32) + 8 * k) = 0;
        unint64_t v11 = *(unsigned int *)(a2 + 40);
      }
    }
  }
  uint64_t v14 = *(void *)(a2 + 32);
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    *(void *)(a2 + 32) = 0;
  }
  unint64_t v15 = *(unsigned int *)(a2 + 56);
  if (v15)
  {
    for (unint64_t m = 0; m < v15; ++m)
    {
      uint64_t v17 = *(void **)(*(void *)(a2 + 48) + 8 * m);
      if (v17)
      {
        freepWRI(a1, v17);
        *(void *)(*(void *)(a2 + 48) + 8 * m) = 0;
        unint64_t v15 = *(unsigned int *)(a2 + 56);
      }
    }
  }
  uint64_t v18 = *(void *)(a2 + 48);
  if (v18)
  {
    heap_Free(*(void **)(a1 + 8), v18);
    *(void *)(a2 + 48) = 0;
  }
  unint64_t v19 = *(unsigned int *)(a2 + 72);
  if (v19)
  {
    for (unint64_t n = 0; n < v19; ++n)
    {
      uint64_t v21 = *(void **)(*(void *)(a2 + 64) + 8 * n);
      if (v21)
      {
        freepWRI(a1, v21);
        *(void *)(*(void *)(a2 + 64) + 8 * n) = 0;
        unint64_t v19 = *(unsigned int *)(a2 + 72);
      }
    }
  }
  uint64_t v22 = *(void *)(a2 + 64);
  if (v22)
  {
    heap_Free(*(void **)(a1 + 8), v22);
    *(void *)(a2 + 64) = 0;
  }
  uint64_t v23 = *(void **)(a1 + 8);

  return heap_Free(v23, a2);
}

void *freepPWRI(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    *(void *)(a2 + 32) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    heap_Free(*(void **)(a1 + 8), v5);
    *(void *)(a2 + 40) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    heap_Free(*(void **)(a1 + 8), v6);
    *(void *)(a2 + 48) = 0;
  }
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    heap_Free(*(void **)(a1 + 8), v7);
    *(void *)(a2 + 56) = 0;
  }
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8)
  {
    heap_Free(*(void **)(a1 + 8), v8);
    *(void *)(a2 + 64) = 0;
  }
  uint64_t v9 = *(void *)(a2 + 72);
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    *(void *)(a2 + 72) = 0;
  }
  uint64_t v10 = *(void *)(a2 + 88);
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    *(void *)(a2 + 88) = 0;
  }
  uint64_t v11 = *(void *)(a2 + 80);
  if (v11)
  {
    heap_Free(*(void **)(a1 + 8), v11);
    *(void *)(a2 + 80) = 0;
  }
  uint64_t v12 = *(void *)(a2 + 96);
  if (v12)
  {
    heap_Free(*(void **)(a1 + 8), v12);
    *(void *)(a2 + 96) = 0;
  }
  uint64_t v13 = *(void *)(a2 + 112);
  if (v13)
  {
    heap_Free(*(void **)(a1 + 8), v13);
    *(void *)(a2 + 112) = 0;
  }
  uint64_t v14 = *(void *)(a2 + 104);
  if (v14)
  {
    heap_Free(*(void **)(a1 + 8), v14);
    *(void *)(a2 + 104) = 0;
  }
  uint64_t v15 = *(void *)(a2 + 120);
  if (v15)
  {
    heap_Free(*(void **)(a1 + 8), v15);
    *(void *)(a2 + 120) = 0;
  }
  uint64_t v16 = *(void *)(a2 + 128);
  if (v16)
  {
    heap_Free(*(void **)(a1 + 8), v16);
    *(void *)(a2 + 128) = 0;
  }
  uint64_t v17 = *(void *)(a2 + 152);
  if (v17)
  {
    heap_Free(*(void **)(a1 + 8), v17);
    *(void *)(a2 + 152) = 0;
  }
  uint64_t v18 = *(void *)(a2 + 160);
  if (v18)
  {
    heap_Free(*(void **)(a1 + 8), v18);
    *(void *)(a2 + 160) = 0;
  }
  uint64_t v19 = *(void *)(a2 + 176);
  if (v19)
  {
    heap_Free(*(void **)(a1 + 8), v19);
    *(void *)(a2 + 176) = 0;
  }
  uint64_t v20 = *(void *)(a2 + 184);
  if (v20)
  {
    heap_Free(*(void **)(a1 + 8), v20);
    *(void *)(a2 + 184) = 0;
  }
  unint64_t v21 = *(unsigned int *)(a2 + 144);
  if (v21)
  {
    for (unint64_t i = 0; i < v21; ++i)
    {
      uint64_t v23 = *(void *)(*(void *)(a2 + 168) + 8 * i);
      if (v23)
      {
        heap_Free(*(void **)(a1 + 8), v23);
        *(void *)(*(void *)(a2 + 168) + 8 * i) = 0;
        unint64_t v21 = *(unsigned int *)(a2 + 144);
      }
    }
  }
  uint64_t v24 = *(void *)(a2 + 168);
  if (v24)
  {
    heap_Free(*(void **)(a1 + 8), v24);
    *(void *)(a2 + 168) = 0;
  }
  uint64_t v25 = *(void **)(a1 + 8);

  return heap_Free(v25, a2);
}

void *freeppSRI(void *result, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    if (a3 >= 1)
    {
      uint64_t v5 = a3;
      uint64_t v6 = (uint64_t *)a2;
      do
      {
        if (*v6)
        {
          freepSRI(v4, *v6);
          *uint64_t v6 = 0;
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    uint64_t v7 = *(void **)(v4 + 8);
    return heap_Free(v7, a2);
  }
  return result;
}

uint64_t ParseWnluStr(const char *a1, char **a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unsigned int v4 = cstdlib_strlen(a1);
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    __int16 v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    while (1)
    {
      int v10 = a1[v9];
      if (!a1[v9]) {
        break;
      }
      if (v10 == 58)
      {
        if (v9 <= v8)
        {
          unsigned int v22 = 0;
        }
        else
        {
          memcpy(__dst, &a1[v8], v9 + ~v8 + 1);
          unsigned int v22 = v9 - v8;
        }
        uint64_t v6 = __dst;
        __dst[v22] = 0;
        ++v9;
        if (__dst[1] == 95)
        {
          uint64_t v23 = cstdlib_strchr("SsEeIi", __dst[0]);
          uint64_t v6 = &__dst[2 * (v23 != 0)];
          if (v23) {
            int v5 = __dst[0];
          }
          else {
            int v5 = 0;
          }
        }
        else
        {
          int v5 = 0;
        }
LABEL_31:
        unsigned int v8 = v9;
        goto LABEL_32;
      }
      if (v10 == 59) {
        break;
      }
      ++v9;
LABEL_32:
      if (v9 > v4) {
        return v7;
      }
    }
    if (v5)
    {
      __src[0] = v5;
      __src[1] = 95;
      int v5 = 2;
    }
    if (v9 > v8)
    {
      uint64_t v11 = &a1[v8];
      unint64_t v12 = v9 - (unint64_t)v8;
      do
      {
        char v13 = *v11++;
        __src[v5++] = v13;
        --v12;
      }
      while (v12);
    }
    __src[v5] = 0;
    if (v6)
    {
      int v14 = cstdlib_strcmp(v6, "POS");
      uint64_t v15 = a2 + 8;
      if (!v14) {
        goto LABEL_19;
      }
      int v16 = cstdlib_strcmp(v6, "PHR");
      uint64_t v15 = a2 + 9;
      if (!v16) {
        goto LABEL_19;
      }
      int v17 = cstdlib_strcmp(v6, "CLASS");
      uint64_t v15 = a2 + 10;
      if (!v17) {
        goto LABEL_19;
      }
      int v18 = cstdlib_strcmp(v6, "PUNC");
      uint64_t v15 = a2 + 12;
      if (!v18
        || (int v19 = cstdlib_strcmp(v6, "COMP"), v15 = a2 + 11, !v19)
        || (v20 = cstdlib_strcmp(v6, "BNDSHAPE"), uint64_t v15 = a2 + 13, !v20)
        || (int v21 = cstdlib_strcmp(v6, "COMPPOS"), v15 = a2 + 14, !v21))
      {
LABEL_19:
        cstdlib_strcpy(*v15, __src);
      }
      ++v7;
    }
    int v5 = 0;
    ++v9;
    goto LABEL_31;
  }
  return 0;
}

uint64_t DupWrdRecField(uint64_t a1, char **a2, uint64_t a3, const char *a4)
{
  unsigned int v8 = (char *)heap_Alloc(*(void *)(a1 + 8), a3);
  int v14 = v8;
  if (v8)
  {
    cstdlib_strncpy(v8, a4, a3 - 1);
    uint64_t result = 0;
    v14[a3 - 1] = 0;
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::ldbrec::memory allocation", v9, v10, v11, v12, v13);
    uint64_t result = 2364547082;
  }
  *a2 = v14;
  return result;
}

uint64_t nnextract_Allocate(uint64_t a1, uint64_t **a2, _DWORD *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v12 = (uint64_t *)heap_Alloc(*(void *)(a1 + 8), 8);
  *a2 = v12;
  if (v12)
  {
    if ((Compile_SntWrdRec(a1, a3, a4, a5, a6, v12) & 0x80000000) == 0) {
      return 0;
    }
    int v19 = "::nnfeatextract::CompileSntWrdRecord";
  }
  else
  {
    int v19 = "::nnfeatextract::memory allocation";
  }
  NNFX_logMsg(a1, 0, (uint64_t)v19, v13, v14, v15, v16, v17);
  return 1;
}

uint64_t nnextract_Process2Buff(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, char *a9, uint64_t a10, uint64_t *a11, _DWORD *a12)
{
  uint64_t v13 = *(const char ***)(a6 + 8);
  if (!v13)
  {
    unint64_t v37 = "::nnfeatextract::Missing NN lingtab data.";
LABEL_13:
    NNFX_logMsg(a1, 0, (uint64_t)v37, a4, a5, a6, (uint64_t)a7, a8);
    return 1;
  }
  unsigned __int8 v17 = a5;
  unsigned int v18 = a4;
  __int16 v41 = 0;
  memset(v40, 0, sizeof(v40));
  GetLingTabIndex(v13, v40);
  if (SLOWORD(v40[0]) == -1) {
    NNFX_logMsg(a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOWELS entry.", v21, v22, v23, v24, v25);
  }
  if (SWORD1(v40[0]) == -1) {
    NNFX_logMsg(a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOICEDPHONES entry.", v21, v22, v23, v24, v25);
  }
  uint64_t NnFeatures = extractNnFeatures((void *)a1, *(void *)(a6 + 8), (uint64_t)v40, a9, a10, a2, a3, v18, v17, a8);
  *a7 = NnFeatures;
  if (!NnFeatures)
  {
    unint64_t v37 = "in ";
    goto LABEL_13;
  }
  uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 1, 16);
  if (!v27)
  {
    unint64_t v37 = "::nnfeatextract::Memory allocation.";
    goto LABEL_13;
  }
  uint64_t v28 = (int *)v27;
  SymTabInit(v27);
  uint64_t Buf = SymTabReadBuf(a1, (uint64_t)v28, *(void *)(a6 + 16), *(unsigned __int16 *)(a6 + 24), a7);
  if (Buf)
  {
    uint64_t v35 = Buf;
    uint64_t v36 = "::nnfeatextract::NN - SymTabRead.";
  }
  else
  {
    BOOL v38 = SymTabToIntInplaceActive(a1, v28, a7, 0, 0x2Du);
    if (v38)
    {
      uint64_t v35 = v38;
      uint64_t v36 = "::nnfeatextract:: Symbol table does not seem to be correct.";
    }
    else
    {
      uint64_t v35 = unrollNnFeatures(a1, (uint64_t **)a7, (uint64_t)v28, a11, a12);
      if (!v35)
      {
        NNFX_logMsg(a1, 2, (uint64_t)"::nnfeatextract:: N. unrolled features: %4d   N. steps: %4d", v30, v31, v32, v33, v34);
        SymTabFree((void *)a1, v28);
        heap_Free(*(void **)(a1 + 8), (uint64_t)v28);
        return v35;
      }
      uint64_t v36 = "::nnfeatextract:: features unroll failed.";
    }
  }
  NNFX_logMsg(a1, 0, (uint64_t)v36, v30, v31, v32, v33, v34);
  return v35;
}

uint64_t GetLingTabIndex(const char **a1, _WORD *a2)
{
  uint64_t v4 = 0;
  int v5 = a2 + 1;
  uint64_t v6 = a2 + 2;
  __int16 v7 = a2 + 3;
  unsigned int v39 = a2 + 5;
  unint64_t v40 = a2 + 4;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *((_OWORD *)a2 + 1) = v8;
  uint64_t v9 = a2 + 8;
  unint64_t v37 = a2 + 7;
  BOOL v38 = a2 + 6;
  uint64_t v35 = a2 + 10;
  uint64_t v36 = a2 + 9;
  uint64_t v33 = a2 + 12;
  uint64_t v34 = a2 + 11;
  uint64_t v31 = a2 + 14;
  uint64_t v32 = a2 + 13;
  *(_OWORD *)a2 = v8;
  uint64_t v30 = a2 + 15;
  a2[16] = -1;
  uint64_t v29 = a2 + 16;
  do
  {
    if (!*a1) {
      break;
    }
    int v10 = cstdlib_strcmp(*a1, "VOWELS");
    uint64_t v11 = a2;
    if (!v10) {
      goto LABEL_20;
    }
    int v12 = cstdlib_strcmp(*a1, "VOICEDPHONES");
    uint64_t v11 = v5;
    if (!v12) {
      goto LABEL_20;
    }
    int v13 = cstdlib_strcmp(*a1, "BC_MONOVOWELS");
    uint64_t v11 = v6;
    if (!v13) {
      goto LABEL_20;
    }
    int v14 = cstdlib_strcmp(*a1, "BC_DIPTHVOWELS");
    uint64_t v11 = v7;
    if (!v14) {
      goto LABEL_20;
    }
    int v15 = cstdlib_strcmp(*a1, "BC_AFFRICATES");
    uint64_t v11 = v40;
    if (!v15) {
      goto LABEL_20;
    }
    int v16 = cstdlib_strcmp(*a1, "BC_FRICATIVES");
    uint64_t v11 = v39;
    if (!v16) {
      goto LABEL_20;
    }
    int v17 = cstdlib_strcmp(*a1, "BC_STOPS");
    uint64_t v11 = v38;
    if (!v17) {
      goto LABEL_20;
    }
    int v18 = cstdlib_strcmp(*a1, "BC_LIQUIDS_TAP");
    uint64_t v11 = v37;
    if (!v18) {
      goto LABEL_20;
    }
    int v19 = cstdlib_strcmp(*a1, "BC_NASALS");
    uint64_t v11 = v9;
    if (!v19) {
      goto LABEL_20;
    }
    int v20 = cstdlib_strcmp(*a1, "BC_GLIDES");
    uint64_t v11 = v36;
    if (!v20) {
      goto LABEL_20;
    }
    int v21 = cstdlib_strcmp(*a1, "COMMON_WORDLIST");
    uint64_t v11 = v35;
    if (!v21) {
      goto LABEL_20;
    }
    int v22 = cstdlib_strcmp(*a1, "FXN_WORDLIST");
    uint64_t v11 = v34;
    if (!v22) {
      goto LABEL_20;
    }
    int v23 = cstdlib_strcmp(*a1, "WH_WORDLIST");
    uint64_t v11 = v33;
    if (!v23) {
      goto LABEL_20;
    }
    int v24 = cstdlib_strcmp(*a1, "CONJ_WORDLIST");
    uint64_t v11 = v32;
    if (v24)
    {
      int v25 = cstdlib_strcmp(*a1, "AUXV_WORDLIST");
      uint64_t v11 = v31;
      if (v25)
      {
        int v26 = cstdlib_strcmp(*a1, "ADPOS_WORDLIST");
        uint64_t v11 = v30;
        if (v26)
        {
          int v27 = cstdlib_strcmp(*a1, "EXCL_FEATLIST");
          uint64_t v11 = v29;
          if (v27) {
            continue;
          }
        }
      }
    }
LABEL_20:
    _WORD *v11 = v4++;
    a1 += 2;
  }
  while (v4 != 17);
  return (unsigned __int16)v4;
}

uint64_t extractNnFeatures(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, uint64_t a10)
{
  v345[13] = *MEMORY[0x263EF8340];
  v342[1] = 0;
  uint64_t v343 = 0;
  v342[0] = 0;
  v345[0] = fExtGetPhoneFeats;
  v345[1] = fExtGetLexicalFeats;
  v345[2] = fExtGetParseFeats;
  v345[3] = fExtGetPhraseFeats;
  v345[4] = fExtGetPunctFeats;
  v345[5] = fExtGetPhone2BdryFeats;
  v345[6] = fExtGetSyll2BdryFeats;
  v345[7] = fExtGetStrGrp2BdryFeats;
  v345[8] = fExtGetWord2BdryFeats;
  v345[9] = fExtGetParse2BdryFeats;
  v345[10] = fExtGetPhrase2BdryFeats;
  v345[11] = fExtGetPunct2BdryFeats;
  v345[12] = fExtGetVPhone2BdryFeats;
  TrieIntInit(v342);
  int v17 = TrieIntAdd((uint64_t)a1, v342, "Phone", a9);
  int v18 = TrieIntAdd((uint64_t)a1, v342, "Voicing", a9) | v17;
  int v19 = TrieIntAdd((uint64_t)a1, v342, "ConsVow", a9);
  int v20 = v18 | v19 | TrieIntAdd((uint64_t)a1, v342, "BroadClass", a9);
  int v21 = TrieIntAdd((uint64_t)a1, v342, "LexStress", a9);
  int v22 = v21 | TrieIntAdd((uint64_t)a1, v342, "PhoneTag", a9);
  int v23 = v20 | v22 | TrieIntAdd((uint64_t)a1, v342, "PhoneDiff", a9);
  int v24 = TrieIntAdd((uint64_t)a1, v342, "Prominence", a9);
  int v25 = v24 | TrieIntAdd((uint64_t)a1, v342, "POS", a9);
  int v26 = v25 | TrieIntAdd((uint64_t)a1, v342, "nluPOS", a9);
  int v27 = v23 | v26 | TrieIntAdd((uint64_t)a1, v342, "nluCLS", a9);
  int v28 = TrieIntAdd((uint64_t)a1, v342, "nluPNC", a9);
  int v29 = v28 | TrieIntAdd((uint64_t)a1, v342, "nluCMP", a9);
  int v30 = v29 | TrieIntAdd((uint64_t)a1, v342, "nluBDS", a9);
  int v31 = v30 | TrieIntAdd((uint64_t)a1, v342, "nluCPS", a9);
  int v32 = v27 | v31 | TrieIntAdd((uint64_t)a1, v342, "IsFxnWord", a9);
  int v33 = TrieIntAdd((uint64_t)a1, v342, "IsWHWord", a9);
  int v34 = v33 | TrieIntAdd((uint64_t)a1, v342, "IsAuxWord", a9);
  int v35 = v34 | TrieIntAdd((uint64_t)a1, v342, "IsConjWord", a9);
  int v36 = v35 | TrieIntAdd((uint64_t)a1, v342, "IsAdposWord", a9);
  if (v32 | v36 | TrieIntAdd((uint64_t)a1, v342, "CommonWord", a9))
  {
    uint64_t v42 = " in extractFeatures while calling TrieAdd.";
    goto LABEL_58;
  }
  uint64_t v339 = a2;
  unsigned int v335 = a8;
  if (a10) {
    int v43 = 14;
  }
  else {
    int v43 = 13;
  }
  int v44 = TrieIntSize((unsigned int *)v342);
  int v45 = FillProsWords((uint64_t)a1, a6, a7, (uint64_t)&v343 + 4, (uint64_t)&v343, (uint64_t)"-", a4, a5);
  if (!v45)
  {
    uint64_t v42 = " in extractFeatures while calling FillProsWords.";
    goto LABEL_58;
  }
  uint64_t v46 = (uint64_t)v45;
  uint64_t v47 = v343;
  uint64_t v48 = HIDWORD(v343);
  uint64_t v49 = heap_Alloc(a1[1], 72);
  if (!v49)
  {
    uint64_t v64 = " allocating memory in BuildPhoneTiers().";
    goto LABEL_57;
  }
  uint64_t v55 = (uint64_t *)v49;
  int v333 = v44;
  *(void *)(v49 + 64) = 0;
  *(_OWORD *)(v49 + 32) = 0u;
  *(_OWORD *)(v49 + 48) = 0u;
  *(_OWORD *)uint64_t v49 = 0u;
  *(_OWORD *)(v49 + 16) = 0u;
  uint64_t v56 = (int *)heap_Alloc(a1[1], 24);
  if (!v56)
  {
    uint64_t v63 = " allocating memory in BuildPhonePhT.";
    goto LABEL_14;
  }
  uint64_t v62 = v56;
  if (TierInit((uint64_t)a1, v56, v47, "Phone-level PHONE tier"))
  {
    uint64_t v63 = " in BuildPhonePhT initializing tier.";
LABEL_14:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v63, v57, v58, v59, v60, v61);
    *uint64_t v55 = 0;
    uint64_t v64 = " building phone tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  int v327 = v43;
  v330 = v55;
  uint64_t v331 = v47;
  uint64_t v65 = v339;
  uint64_t v337 = v48;
  if (v48)
  {
    uint64_t v66 = 0;
    int v67 = 0;
    do
    {
      uint64_t v68 = *(void *)(v46 + 8 * v66);
      if (*(_DWORD *)(v68 + 144))
      {
        unint64_t v69 = 0;
        uint64_t v70 = 2 * v67;
        do
        {
          int v71 = *(__int16 *)(a3 + 2);
          if (v71 == -1 || v71 > 499)
          {
            *(_WORD *)(*((void *)v62 + 1) + v70 + 2 * v69) = 1;
          }
          else
          {
            int v72 = cstdlib_strchr(**(char ***)(v65 + 16 * *(__int16 *)(a3 + 2) + 8), *(char *)(*(void *)(v68 + 152) + v69));
            uint64_t v65 = v339;
            if (v72) {
              __int16 v73 = 2;
            }
            else {
              __int16 v73 = 1;
            }
            *(_WORD *)(*((void *)v62 + 1) + v70 + 2 * v69) = v73;
            uint64_t v68 = *(void *)(v46 + 8 * v66);
          }
          ++v69;
        }
        while (v69 < *(unsigned int *)(v68 + 144));
        v67 += v69;
        uint64_t v48 = v337;
      }
      ++v66;
    }
    while (v66 != v48);
  }
  v62[1] = v47;
  uint64_t *v330 = (uint64_t)v62;
  uint64_t v74 = (int *)heap_Alloc(a1[1], 24);
  if (!v74)
  {
    uint64_t v81 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_56;
  }
  int v80 = v74;
  if (TierInit((uint64_t)a1, v74, v47, "Phone-level SYLLABLE tier"))
  {
    uint64_t v81 = " in BuildSyllablePhT initializing tier.";
LABEL_56:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v81, v75, v76, v77, v78, v79);
    v330[1] = 0;
    uint64_t v64 = " building syllable tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  if (!v48)
  {
    unsigned int v83 = 0;
    goto LABEL_46;
  }
  uint64_t v82 = 0;
  unsigned int v83 = 0;
  do
  {
    uint64_t v84 = *(void *)(v46 + 8 * v82);
    uint64_t v85 = *(unsigned int *)(v84 + 144);
    if (!v85) {
      goto LABEL_42;
    }
    uint64_t v86 = 0;
    LODWORD(v87) = v47 - v83;
    if (v47 >= v83) {
      uint64_t v87 = v87;
    }
    else {
      uint64_t v87 = 0;
    }
    do
    {
      if (v87 == v86)
      {
        uint64_t v81 = " in BuildSyllablePhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_56;
      }
      *(_WORD *)(*((void *)v80 + 1) + 2 * v83 + 2 * v86) = *(_DWORD *)(*(void *)(v84 + 184) + 4 * v86);
      ++v86;
    }
    while (v85 != v86);
    v83 += v86;
LABEL_42:
    ++v82;
  }
  while (v82 != v48);
LABEL_46:
  if (v83 != v47)
  {
    uint64_t v81 = ": %d phones processed, but total %d phones expected in BuildSyllablePhT.";
    goto LABEL_56;
  }
  int v88 = 0;
  if (v47)
  {
    uint64_t v89 = (unsigned __int16 *)*((void *)v80 + 1);
    uint64_t v90 = v47;
    do
    {
      if (*v89++) {
        ++v88;
      }
      --v90;
    }
    while (v90);
  }
  v80[1] = v88;
  v330[1] = (uint64_t)v80;
  uint64_t v92 = (int *)heap_Alloc(a1[1], 24);
  if (!v92)
  {
    uint64_t v99 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_61;
  }
  int v98 = v92;
  if (TierInit((uint64_t)a1, v92, v47, "Phone-level WORD tier"))
  {
    uint64_t v99 = " in BuildWordPhT initializing tier.";
    goto LABEL_61;
  }
  if (v48)
  {
    uint64_t v102 = 0;
    unsigned int v103 = 0;
    while (v103 < v47)
    {
      uint64_t v104 = *((void *)v98 + 1);
      int v105 = *(_DWORD *)(*(void *)(v46 + 8 * v102) + 144) - 1;
      if (*(_DWORD *)(*(void *)(v46 + 8 * v102) + 144) != 1)
      {
        unsigned int v106 = v105 + v103;
        do
        {
          *(_WORD *)(v104 + 2 * v103++) = 0;
          --v105;
        }
        while (v105);
        unsigned int v103 = v106;
      }
      unsigned int v107 = v103 + 1;
      *(_WORD *)(v104 + 2 * v103) = 1;
      ++v102;
      ++v103;
      if (v102 == v48) {
        goto LABEL_72;
      }
    }
    uint64_t v99 = " in BuildWordPhT attempting to write at index %d in a buffer of size %d.";
LABEL_61:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v99, v93, v94, v95, v96, v97);
    v330[2] = 0;
    uint64_t v64 = " building word tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  unsigned int v107 = 0;
LABEL_72:
  if (v107 != v47)
  {
    uint64_t v99 = ": %d phones processed, but total %d phones expected in BuildWordPhT.";
    goto LABEL_61;
  }
  int v108 = 0;
  if (v47)
  {
    uint64_t v109 = (unsigned __int16 *)*((void *)v98 + 1);
    do
    {
      if (*v109++) {
        ++v108;
      }
      --v47;
    }
    while (v47);
  }
  v98[1] = v108;
  if (v108 != v48)
  {
    uint64_t v99 = ": %d word-boundaries created, but total %d prosodic words in BuildWordPhT.";
    goto LABEL_61;
  }
  v330[2] = (uint64_t)v98;
  uint64_t v111 = (int *)heap_Alloc(a1[1], 24);
  if (!v111)
  {
    uint64_t v118 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_115;
  }
  int v117 = v111;
  if (TierInit((uint64_t)a1, v111, v331, "Phone-level PHRASE tier"))
  {
    uint64_t v118 = " in BuildPrasePhT initializing tier.";
LABEL_115:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v118, v112, v113, v114, v115, v116);
    v330[3] = 0;
    uint64_t v64 = " building phrase tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  if (!v337)
  {
    unsigned int v127 = 0;
    goto LABEL_105;
  }
  uint64_t v119 = 0;
  unsigned int v120 = 0;
  while (2)
  {
    uint64_t v121 = *(void *)(v46 + 8 * v119);
    int v122 = *(_DWORD *)(v121 + 144) - 1;
    if (*(_DWORD *)(v121 + 144) != 1)
    {
      uint64_t v123 = 2 * v120;
      if (v120 >= v331) {
        unsigned int v124 = v331;
      }
      else {
        unsigned int v124 = v120;
      }
      while (v331 != v124)
      {
        *(_WORD *)(*((void *)v117 + 1) + v123) = 0;
        ++v120;
        v123 += 2;
        ++v124;
        if (!--v122) {
          goto LABEL_94;
        }
      }
      goto LABEL_103;
    }
LABEL_94:
    if (v119 != v337 - 1)
    {
      if (*(_DWORD *)(v121 + 192) == 1)
      {
        if (v120 >= v331) {
          goto LABEL_103;
        }
        *(_WORD *)(*((void *)v117 + 1) + 2 * v120) = 0;
      }
      else
      {
        if (v120 >= v331) {
          goto LABEL_103;
        }
        int v125 = *(unsigned char *)(v121 + 136) & 0xFB;
        uint64_t v126 = *((void *)v117 + 1);
        *(_WORD *)(v126 + 2 * v120) = v125 == 83;
      }
      ++v120;
      ++v119;
      continue;
    }
    break;
  }
  if (v120 >= v331)
  {
LABEL_103:
    uint64_t v118 = " in BuildPhrasePhT attempting to write at index %d in a buffer of size %d.";
    goto LABEL_115;
  }
  unsigned int v127 = v120 + 1;
  *(_WORD *)(*((void *)v117 + 1) + 2 * v120) = 1;
LABEL_105:
  if (v127 != v331)
  {
    uint64_t v118 = ": %d phones processed, but total %d phones expected in BuildWordPhT.";
    goto LABEL_115;
  }
  int v128 = v331;
  if (v331)
  {
    int v128 = 0;
    unsigned int v129 = (unsigned __int16 *)*((void *)v117 + 1);
    uint64_t v130 = v331;
    do
    {
      if (*v129++) {
        ++v128;
      }
      --v130;
    }
    while (v130);
  }
  v117[1] = v128;
  v330[3] = (uint64_t)v117;
  char v132 = (int *)heap_Alloc(a1[1], 24);
  if (!v132)
  {
    uint64_t v139 = " allocating memory in BuildSyllablePhT.";
    goto LABEL_159;
  }
  uint64_t v138 = v132;
  if (TierInit((uint64_t)a1, v132, v331, "Phone-level PUNCTUATION tier"))
  {
    uint64_t v139 = " in BuildPunctPhT initializing tier.";
    goto LABEL_159;
  }
  if (v337)
  {
    uint64_t v140 = 0;
    unsigned int v141 = 0;
    uint64_t v142 = (v337 - 1);
    while (1)
    {
      uint64_t v143 = *(void *)(v46 + 8 * v140);
      int v144 = *(_DWORD *)(v143 + 144) - 1;
      if (*(_DWORD *)(v143 + 144) != 1) {
        break;
      }
LABEL_125:
      if (v140 == v142)
      {
        if (v141 >= v331) {
          goto LABEL_147;
        }
        __int16 v147 = 1;
      }
      else
      {
        if (*(_DWORD *)(v143 + 192)
          || (int v148 = cstdlib_strlen(*(const char **)(v143 + 32))) == 0
          || ((uint64_t v149 = *(void *)(v46 + 8 * v140),
               unsigned int v150 = *(unsigned __int8 *)(*(void *)(v149 + 32) + (v148 - 1)),
               BOOL v151 = v150 > 0x3F,
               unint64_t v152 = (1 << v150) & 0x8C00500200000000,
               !v151)
            ? (BOOL v153 = v152 == 0)
            : (BOOL v153 = 1),
              v153))
        {
          __int16 v147 = 0;
        }
        else
        {
          __int16 v147 = 1;
          if (*(unsigned char *)(v149 + 136) == 78) {
            NNFX_logMsg((uint64_t)a1, 1, (uint64_t)"::nnfeatextract, BOD=%c on punctuated word '%s'", v133, v134, v135, v136, v137);
          }
        }
        if (v141 >= v331) {
          goto LABEL_147;
        }
        if (v140 == v337 - 2 && *(_DWORD *)(*(void *)(v46 + 8 * v142) + 192)) {
          __int16 v147 = 1;
        }
      }
      *(_WORD *)(*((void *)v138 + 1) + 2 * v141++) = v147;
      if (++v140 == v337) {
        goto LABEL_149;
      }
    }
    uint64_t v145 = 2 * v141;
    if (v141 >= v331) {
      unsigned int v146 = v331;
    }
    else {
      unsigned int v146 = v141;
    }
    while (v331 != v146)
    {
      *(_WORD *)(*((void *)v138 + 1) + v145) = 0;
      ++v141;
      v145 += 2;
      ++v146;
      if (!--v144) {
        goto LABEL_125;
      }
    }
LABEL_147:
    uint64_t v139 = " in BuildPunctPhT attempting to write at index %d in a buffer of size %d.";
LABEL_159:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v139, v133, v134, v135, v136, v137);
    v330[4] = 0;
    uint64_t v64 = " building punctuation tier in BuildPhoneTiers().";
LABEL_57:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v64, v50, v51, v52, v53, v54);
    uint64_t v42 = " building Phone Tiers in extratFeatures().";
    goto LABEL_58;
  }
  unsigned int v141 = 0;
LABEL_149:
  if (v141 != v331)
  {
    uint64_t v139 = ": Only %d phones were processed while a total of %d phones were expected in BuildWordPhT.";
    goto LABEL_159;
  }
  int v154 = v331;
  if (v331)
  {
    int v154 = 0;
    uint64_t v155 = (unsigned __int16 *)*((void *)v138 + 1);
    uint64_t v156 = v331;
    do
    {
      if (*v155++) {
        ++v154;
      }
      --v156;
    }
    while (v156);
  }
  v138[1] = v154;
  v330[4] = (uint64_t)v138;
  uint64_t v158 = (int *)heap_Alloc(a1[1], 24);
  if (!v158)
  {
    uint64_t v165 = " allocating memory in BuildSentencePhT.";
    goto LABEL_183;
  }
  uint64_t v164 = v158;
  if (TierInit((uint64_t)a1, v158, v331, "Phone-level SENTENCE tier"))
  {
    uint64_t v165 = " allocating mem in BuildSentencePhT to hold boundaries.";
    goto LABEL_183;
  }
  uint64_t v166 = heap_Calloc((void *)a1[1], v337, 2);
  int v167 = v166;
  if (!v166)
  {
    uint64_t v165 = " allocating memory in BuildSentencePh().";
    uint64_t v175 = (uint64_t)a1;
LABEL_184:
    NNFX_logMsg(v175, v167, (uint64_t)v165, v159, v160, v161, v162, v163);
    v330[7] = 0;
    uint64_t v64 = " building sentence tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  __int16 v168 = v337;
  unint64_t v169 = (v337 - 1);
  if (v337 == 1)
  {
    uint64_t v174 = 0;
LABEL_170:
    *(_WORD *)(v166 + 2 * v174) = v168;
    goto LABEL_172;
  }
  uint64_t v170 = (uint64_t *)v46;
  uint64_t v171 = (_WORD *)v166;
  uint64_t v172 = (v337 - 1);
  do
  {
    uint64_t v173 = *v170++;
    *v171++ = *(_DWORD *)(v173 + 196) == 1;
    --v172;
  }
  while (v172);
  *(_WORD *)(v166 + 2 * v169) = 1;
  if (v337 >= 2 && *(_DWORD *)(*(void *)(v46 + 8 * v169) + 192))
  {
    __int16 v168 = 0;
    uint64_t v174 = (v337 - 2);
    goto LABEL_170;
  }
  if (v337)
  {
LABEL_172:
    uint64_t v176 = 0;
    unsigned int v177 = 0;
    while (1)
    {
      int v178 = *(_DWORD *)(*(void *)(v46 + 8 * v176) + 144) - 1;
      if (*(_DWORD *)(*(void *)(v46 + 8 * v176) + 144) != 1) {
        break;
      }
LABEL_179:
      if (v177 >= v331)
      {
        uint64_t v165 = " in BuildPunctPhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_183;
      }
      unsigned int v181 = v177 + 1;
      *(_WORD *)(*((void *)v164 + 1) + 2 * v177++) = *(_WORD *)(v166 + 2 * v176++);
      if (v176 == v337) {
        goto LABEL_186;
      }
    }
    uint64_t v179 = 2 * v177;
    if (v177 >= v331) {
      unsigned int v180 = v331;
    }
    else {
      unsigned int v180 = v177;
    }
    while (v331 != v180)
    {
      *(_WORD *)(*((void *)v164 + 1) + v179) = 0;
      ++v177;
      v179 += 2;
      ++v180;
      if (!--v178) {
        goto LABEL_179;
      }
    }
    uint64_t v165 = " in BuildSentencePhT attempting to write at index %d in a buffer of size %d.";
LABEL_183:
    uint64_t v175 = (uint64_t)a1;
    int v167 = 0;
    goto LABEL_184;
  }
  unsigned int v181 = 0;
LABEL_186:
  heap_Free((void *)a1[1], v166);
  if (v181 != v331)
  {
    uint64_t v165 = ": Only %d phones were processed while a total of %d phones were expected in BuildSentencePhT.";
    goto LABEL_183;
  }
  int v182 = v331;
  if (v331)
  {
    int v182 = 0;
    uint64_t v183 = (unsigned __int16 *)*((void *)v164 + 1);
    uint64_t v184 = v331;
    do
    {
      if (*v183++) {
        ++v182;
      }
      --v184;
    }
    while (v184);
  }
  v164[1] = v182;
  v330[7] = (uint64_t)v164;
  uint64_t v186 = (int *)heap_Alloc(a1[1], 24);
  if (!v186)
  {
    uint64_t v193 = " allocating memory in BuildSentencePhT.";
    goto LABEL_230;
  }
  uint64_t v192 = v186;
  if (TierInit((uint64_t)a1, v186, v331, "Phone-level PARSE tier")
    || (uint64_t v325 = heap_Calloc((void *)a1[1], v337, 2)) == 0)
  {
    uint64_t v193 = " allocating memory in BuildParsePhT.";
    goto LABEL_230;
  }
  if (v337 == 1)
  {
    *(_WORD *)(v325 + 2 * v169) = 1;
    goto LABEL_219;
  }
  uint64_t v194 = v46 + 8;
  uint64_t v195 = (v337 - 1);
  uint64_t v196 = (_WORD *)v325;
  do
  {
    uint64_t v197 = *(void *)(v194 - 8);
    *v196++ = *(_DWORD *)(v197 + 192) == 1
           || cstdlib_strcmp(*(const char **)(v197 + 88), *(const char **)(*(void *)v194 + 88));
    v194 += 8;
    --v195;
  }
  while (v195);
  *(_WORD *)(v325 + 2 * v169) = 1;
  if (v337)
  {
LABEL_219:
    uint64_t v211 = 0;
    unsigned int v212 = 0;
    while (1)
    {
      int v213 = *(_DWORD *)(*(void *)(v46 + 8 * v211) + 144) - 1;
      if (*(_DWORD *)(*(void *)(v46 + 8 * v211) + 144) != 1) {
        break;
      }
LABEL_226:
      if (v212 >= v331)
      {
        uint64_t v193 = " in BuildPunctPhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_230;
      }
      unsigned int v198 = v212 + 1;
      *(_WORD *)(*((void *)v192 + 1) + 2 * v212++) = *(_WORD *)(v325 + 2 * v211++);
      if (v211 == v337) {
        goto LABEL_209;
      }
    }
    uint64_t v214 = 2 * v212;
    if (v212 >= v331) {
      unsigned int v215 = v331;
    }
    else {
      unsigned int v215 = v212;
    }
    while (v331 != v215)
    {
      *(_WORD *)(*((void *)v192 + 1) + v214) = 0;
      ++v212;
      v214 += 2;
      ++v215;
      if (!--v213) {
        goto LABEL_226;
      }
    }
    uint64_t v193 = " in BuildParsePhT attempting to write at index %d in a buffer of size %d.";
LABEL_230:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v193, v187, v188, v189, v190, v191);
    v330[5] = 0;
    uint64_t v64 = " building parse tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  unsigned int v198 = 0;
LABEL_209:
  heap_Free((void *)a1[1], v325);
  if (v198 != v331)
  {
    uint64_t v193 = ": Only %d phones were processed while a total of %d phones were expected in BuildSentencePhT.";
    goto LABEL_230;
  }
  int v199 = v331;
  if (v331)
  {
    int v199 = 0;
    v200 = (unsigned __int16 *)*((void *)v192 + 1);
    uint64_t v201 = v331;
    do
    {
      if (*v200++) {
        ++v199;
      }
      --v201;
    }
    while (v201);
  }
  v192[1] = v199;
  v330[5] = (uint64_t)v192;
  v203 = (int *)heap_Alloc(a1[1], 24);
  if (!v203)
  {
    v210 = " allocating memory in BuildStressGroupPhT.";
    goto LABEL_351;
  }
  v209 = v203;
  if (TierInit((uint64_t)a1, v203, v331, "Phone-level STRESS-GROUP tier"))
  {
    v210 = " in BuildStressGroupPhT initializing tier.";
    goto LABEL_351;
  }
  unsigned int v216 = v337;
  if (v337)
  {
    unint64_t v217 = 0;
    unsigned int v216 = 0;
    while (1)
    {
      uint64_t v218 = *(void *)(v46 + 8 * v217);
      uint64_t v219 = *(unsigned int *)(v218 + 144);
      if (v219) {
        break;
      }
      unint64_t v223 = v217 + 1;
LABEL_258:
      unint64_t v217 = v223;
      if (v223 == v337) {
        goto LABEL_259;
      }
    }
    unint64_t v220 = 0;
    uint64_t v221 = *(void *)(v218 + 184);
    unint64_t v222 = (v219 - 1);
    unint64_t v223 = v217 + 1;
    LODWORD(v224) = v331 - v216;
    if (v331 >= v216) {
      uint64_t v224 = v224;
    }
    else {
      uint64_t v224 = 0;
    }
    while (2)
    {
      if (*(_DWORD *)(v221 + 4 * v220) != 1) {
        goto LABEL_247;
      }
      if (v220 < v222 && *(_DWORD *)(*(void *)(v218 + 176) + 4 * v220 + 4) == 1)
      {
LABEL_246:
        __int16 v225 = 1;
      }
      else
      {
        __int16 v225 = 0;
        if (v217 < v169 && v222 == v220)
        {
          if (**(_DWORD **)(*(void *)(v46 + 8 * v223) + 176) == 1) {
            goto LABEL_246;
          }
LABEL_247:
          __int16 v225 = 0;
        }
      }
      if (v224 == v220)
      {
        v210 = " in BuildStressGroupPhT attempting to write at index %d in a buffer of size %d.";
        goto LABEL_351;
      }
      if (v222 == v220 && v217 == v169) {
        __int16 v225 = 1;
      }
      *(_WORD *)(*((void *)v209 + 1) + 2 * v216 + 2 * v220++) = v225;
      if (v219 == v220)
      {
        v216 += v220;
        goto LABEL_258;
      }
      continue;
    }
  }
LABEL_259:
  if (v216 != v331)
  {
    v210 = ": %d phones processed, but total %d phones expected in BuildStressGroupPhT.";
LABEL_351:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v210, v204, v205, v206, v207, v208);
    v330[6] = 0;
    uint64_t v64 = " building stress-group tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  int v227 = v331;
  if (v331)
  {
    int v227 = 0;
    v228 = (unsigned __int16 *)*((void *)v209 + 1);
    uint64_t v229 = v331;
    do
    {
      if (*v228++) {
        ++v227;
      }
      --v229;
    }
    while (v229);
  }
  v209[1] = v227;
  v330[6] = (uint64_t)v209;
  uint64_t v231 = BuildSilencePhT((uint64_t)a1, v46, v337, v331);
  v330[8] = v231;
  if (!v231)
  {
    uint64_t v64 = " building silence tier in BuildPhoneTiers().";
    goto LABEL_57;
  }
  v232 = v330;
  TierAddBoundaries((unsigned int *)v330[6], v330[3]);
  TierAddBoundaries((unsigned int *)v232[6], v232[8]);
  TierAddBoundaries((unsigned int *)v232[5], v232[3]);
  TierAddBoundaries((unsigned int *)v232[5], v232[4]);
  TierAddBoundaries((unsigned int *)v232[5], v232[8]);
  uint64_t v319 = (v333 + v327);
  v322 = (uint64_t *)heap_Calloc((void *)a1[1], v319, 8);
  if (!v322)
  {
    uint64_t v42 = " in extractFeatures() while mem-allocating to hold feature extractors.";
    goto LABEL_58;
  }
  for (uint64_t i = 0; i != 13; ++i)
  {
    uint64_t v234 = ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t *, void, void))v345[i])(a1, v339, a3, v46, v330, HIDWORD(v343), v343);
    v322[i] = v234;
    if (!v234)
    {
      uint64_t v42 = " in extractFeatures() while calling extractor %d of %d.";
      goto LABEL_58;
    }
  }
  uint64_t v321 = 0;
  int v320 = 0;
  v318 = " in contextualize() trying to mallocate output.";
  while (1)
  {
    uint64_t v340 = v322[v321];
    if (*(_DWORD *)(v340 + 4016)) {
      break;
    }
LABEL_310:
    if (++v321 == 13)
    {
      if (v320 != TrieIntSize((unsigned int *)v342))
      {
        uint64_t v42 = " in extractFeatures. Unknown features in context list.";
        goto LABEL_58;
      }
      if (a10) {
        v322[(v319 - 1)] = a10;
      }
      uint64_t v100 = mergePhoneFeaturesAtStateLevel((uint64_t)a1, v322, v319, v335, v38, v39, v40, v41);
      if (!v100)
      {
        NNFX_logMsg((uint64_t)a1, 0, (uint64_t)" in extractFeatures() while merging phone-level streams at the state level.", v297, v298, v299, v300, v301);
        return v100;
      }
      if (v319)
      {
        for (uint64_t j = 0; j != v319; ++j)
        {
          uint64_t v303 = v322[j];
          if (*(_DWORD *)(v303 + 4016))
          {
            unint64_t v304 = 0;
            do
            {
              *(void *)(*(void *)(v303 + 8) + 8 * v304++) = 0;
              uint64_t v303 = v322[j];
            }
            while (v304 < *(unsigned int *)(v303 + 4016));
          }
        }
      }
      unint64_t v305 = HIDWORD(v343);
      if (HIDWORD(v343))
      {
        unint64_t v306 = 0;
        do
        {
          uint64_t v307 = *(void *)(v46 + 8 * v306);
          if (v307)
          {
            freepPWRI((uint64_t)a1, v307);
            *(void *)(v46 + 8 * v306) = 0;
            unint64_t v305 = HIDWORD(v343);
          }
          ++v306;
        }
        while (v306 < v305);
      }
      heap_Free((void *)a1[1], v46);
      freepPhoneTiers((uint64_t)a1, v330);
      if (!v319)
      {
LABEL_348:
        heap_Free((void *)a1[1], (uint64_t)v322);
        TrieIntFree(a1, (uint64_t)v342);
        return v100;
      }
      uint64_t v308 = 0;
      while (2)
      {
        uint64_t v309 = v322[v308];
        if (v309)
        {
          unint64_t v310 = *(unsigned int *)(v309 + 4016);
          if (v310)
          {
            for (unint64_t k = 0; k < v310; ++k)
            {
              uint64_t v312 = *(void *)(*(void *)(v309 + 8) + 8 * k);
              if (v312)
              {
                heap_Free((void *)a1[1], v312);
                unint64_t v310 = *(unsigned int *)(v309 + 4016);
              }
            }
          }
          uint64_t v313 = *(void *)(v309 + 8);
          if (v313) {
            heap_Free((void *)a1[1], v313);
          }
          uint64_t v314 = *(void *)(v309 + 4040);
          uint64_t v315 = *(void *)v309;
          if (!v314)
          {
            freepppFeats(a1, v315, *(_DWORD *)(v309 + 4016), *(_DWORD *)(v309 + 4024));
            goto LABEL_344;
          }
          if (!v315) {
            goto LABEL_345;
          }
          if (*(_DWORD *)(v309 + 4016))
          {
            unint64_t v316 = 0;
            do
            {
              freeppFeats(a1, *(void *)(*(void *)v309 + 8 * v316), *(_DWORD *)(v309 + 4024), *(_DWORD *)(*(void *)(v309 + 4040) + 4 * v316));
              *(void *)(*(void *)v309 + 8 * v316++) = 0;
            }
            while (v316 < *(unsigned int *)(v309 + 4016));
            uint64_t v315 = *(void *)v309;
          }
          heap_Free((void *)a1[1], v315);
LABEL_344:
          *(void *)uint64_t v309 = 0;
          uint64_t v314 = *(void *)(v309 + 4040);
          if (v314) {
LABEL_345:
          }
            heap_Free((void *)a1[1], v314);
          *(void *)(v309 + 4040) = 0;
          heap_Free((void *)a1[1], v309);
        }
        if (++v308 == v319) {
          goto LABEL_348;
        }
        continue;
      }
    }
  }
  unsigned int v323 = 0;
  while (2)
  {
    v235 = *(char **)(*(void *)(v340 + 8) + 8 * v323);
    unsigned int v341 = 0;
    if (!v235 || (BOOL v236 = TrieIntGet((uint64_t)v342, v235, &v341), v340 = v322[v321], v236))
    {
LABEL_309:
      if (++v323 >= *(_DWORD *)(v340 + 4016)) {
        goto LABEL_310;
      }
      continue;
    }
    break;
  }
  v334 = *(unsigned int **)(v340 + 4032);
  uint64_t v324 = v341;
  uint64_t v344 = 0;
  uint64_t v237 = heap_Calloc((void *)a1[1], 1, 4048);
  if (!v237) {
    goto LABEL_358;
  }
  uint64_t v243 = v237;
  uint64_t v244 = (2 * v324);
  *(_DWORD *)(v237 + 4016) = v244;
  *(_DWORD *)(v237 + 4024) = *(_DWORD *)(v340 + 4024);
  if ((int)v244 < 1)
  {
LABEL_283:
    if ((int)v324 >= 1)
    {
      uint64_t v338 = 0;
      uint64_t v326 = 0;
      unsigned int v332 = 1;
      do
      {
        if (v326) {
          size_t v249 = 2;
        }
        else {
          size_t v249 = 1;
        }
        BYTE4(v344) = 95;
        LOBYTE(v344) = 95;
        memset((char *)&v344 + 5, 76, v249);
        memset((char *)&v344 + 1, 82, v249);
        if (v332 >= 3)
        {
          BYTE6(v344) = v332 + 48;
          BYTE2(v344) = v332 + 48;
        }
        uint64_t v255 = *(unsigned int *)(v243 + 4024);
        if ((int)v255 >= 1)
        {
          uint64_t v256 = 0;
          uint64_t v257 = 8 * v255;
          do
          {
            *(void *)(*(void *)(*(void *)v243 + 8 * v338) + v256) = 0;
            v256 += 8;
          }
          while (v257 != v256);
        }
        if ((int)v334[1] > (int)v332)
        {
          signed int v258 = 0;
          do
          {
            int ElementInGroup = lastElementInGroup((uint64_t)a1, v334, v258, v250, v251, v252, v253, v254);
            int v264 = firstElementInGroup((uint64_t)a1, (uint64_t)v334, v258 + v332, v259, v260, v261, v262, v263);
            int v270 = lastElementInGroup((uint64_t)a1, v334, v258 + v332, v265, v266, v267, v268, v269);
            if (v264 <= v270)
            {
              int v271 = v270 - v264 + 1;
              uint64_t v272 = 8 * v264;
              do
              {
                *(void *)(*(void *)(*(void *)v243 + 8 * v338) + v272) = *(void *)(*(void *)(*(void *)v340 + 8 * (int)v323)
                                                                                        + 8 * ElementInGroup);
                v272 += 8;
                --v271;
              }
              while (v271);
            }
            ++v258;
          }
          while (v258 < (int)(v334[1] - v332));
        }
        *(void *)(*(void *)(v243 + 8) + 8 * v338) = stringcat((uint64_t)a1, *(char **)(*(void *)(v340 + 8) + 8 * (int)v323), (const char *)&v344 + 4);
        uint64_t v278 = v338 | 1;
        uint64_t v279 = *(unsigned int *)(v243 + 4024);
        if ((int)v279 >= 1)
        {
          uint64_t v280 = 0;
          uint64_t v281 = 8 * v279;
          do
          {
            *(void *)(*(void *)(*(void *)v243 + 8 * v278) + v280) = 0;
            v280 += 8;
          }
          while (v281 != v280);
        }
        for (unsigned int m = v332; m < v334[1]; ++m)
        {
          int v329 = lastElementInGroup((uint64_t)a1, v334, m, v273, v274, v275, v276, v277);
          int v288 = firstElementInGroup((uint64_t)a1, (uint64_t)v334, m - v332, v283, v284, v285, v286, v287);
          int v294 = lastElementInGroup((uint64_t)a1, v334, m - v332, v289, v290, v291, v292, v293);
          if (v288 <= v294)
          {
            int v295 = v294 - v288 + 1;
            uint64_t v296 = 8 * v288;
            do
            {
              *(void *)(*(void *)(*(void *)v243 + 8 * v278) + v296) = *(void *)(*(void *)(*(void *)v340
                                                                                                  + 8 * (int)v323)
                                                                                      + 8 * v329);
              v296 += 8;
              --v295;
            }
            while (v295);
          }
        }
        *(void *)(*(void *)(v243 + 8) + 8 * v278) = stringcat((uint64_t)a1, *(char **)(*(void *)(v340 + 8) + 8 * (int)v323), (const char *)&v344);
        v338 += 2;
        ++v332;
        ++v326;
      }
      while (v326 != v324);
    }
    v322[v320 + 13] = v243;
    ++v320;
    uint64_t v340 = v322[v321];
    goto LABEL_309;
  }
  uint64_t v245 = heap_Calloc((void *)a1[1], v244, 8);
  *(void *)(v243 + 8) = v245;
  if (!v245
    || (uint64_t v246 = heap_Calloc((void *)a1[1], *(int *)(v243 + 4016), 4), (*(void *)(v243 + 4040) = v246) == 0))
  {
    v317 = " in contextualize() allocating for feature names";
    goto LABEL_357;
  }
  if (!allocpppFeats((uint64_t)a1, (uint64_t *)v243, *(_DWORD *)(v243 + 4016), *(_DWORD *)(v243 + 4024)))
  {
    if (*(int *)(v243 + 4016) >= 1)
    {
      uint64_t v247 = 0;
      uint64_t v248 = *(void *)(v243 + 4040);
      do
        *(_DWORD *)(v248 + 4 * v247++) = 0;
      while (v247 < *(int *)(v243 + 4016));
    }
    goto LABEL_283;
  }
  v317 = " in contextualize() allocating features";
LABEL_357:
  v318 = v317;
LABEL_358:
  NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v318, v238, v239, v240, v241, v242);
  v322[v320 + 13] = 0;
  uint64_t v42 = " in extractFeatures() while allocating context features.";
LABEL_58:
  NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v42, v37, v38, v39, v40, v41);
  return 0;
}

uint64_t nnextract_Deallocate(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5)
{
  freeppSRI((void *)a1, a2, a3);
  if (a4)
  {
    uint64_t v8 = a4[1];
    if (v8)
    {
      unint64_t v9 = *((unsigned int *)a4 + 1004);
      if (v9)
      {
        for (unint64_t i = 0; i < v9; ++i)
        {
          uint64_t v11 = *(void *)(a4[1] + 8 * i);
          if (v11)
          {
            heap_Free(*(void **)(a1 + 8), v11);
            *(void *)(a4[1] + 8 * i) = 0;
            unint64_t v9 = *((unsigned int *)a4 + 1004);
          }
        }
        uint64_t v8 = a4[1];
      }
      heap_Free(*(void **)(a1 + 8), v8);
      a4[1] = 0;
    }
    int v12 = (uint64_t *)*a4;
    if (*a4)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        unint64_t v14 = *((unsigned int *)a4 + 1006);
        if (v14)
        {
          for (unint64_t j = 0; j < v14; ++j)
          {
            uint64_t v16 = *(void *)(*(void *)*a4 + 8 * j);
            if (v16)
            {
              freepFeat((void *)a1, v16);
              *(void *)(*(void *)*a4 + 8 * j) = 0;
              unint64_t v14 = *((unsigned int *)a4 + 1006);
            }
          }
          uint64_t v13 = *(void *)*a4;
        }
        heap_Free(*(void **)(a1 + 8), v13);
        *(void *)*a4 = 0;
      }
      unint64_t v17 = *((unsigned int *)a4 + 1004);
      if (v17 >= 2)
      {
        for (unint64_t k = 1; k < v17; ++k)
        {
          uint64_t v19 = *(void *)(*a4 + 8 * k);
          if (v19)
          {
            unsigned int v20 = *((_DWORD *)a4 + 1006);
            if (v20)
            {
              unsigned int v21 = 0;
              do
              {
                uint64_t v22 = *(void *)(*a4 + 8 * k);
                uint64_t v23 = v21;
                uint64_t v24 = *(void *)(v22 + 8 * v21);
                if (v24)
                {
                  uint64_t v25 = a4[505];
                  if (!v25 || *(_DWORD *)(v25 + 4 * k))
                  {
                    freepFeat((void *)a1, v24);
                    uint64_t v22 = *(void *)(*a4 + 8 * k);
                    unsigned int v20 = *((_DWORD *)a4 + 1006);
                  }
                  *(void *)(v22 + 8 * v23) = 0;
                }
                unsigned int v21 = v23 + a5;
              }
              while ((int)v23 + a5 < v20);
              uint64_t v19 = *(void *)(*a4 + 8 * k);
            }
            heap_Free(*(void **)(a1 + 8), v19);
            *(void *)(*a4 + 8 * k) = 0;
            unint64_t v17 = *((unsigned int *)a4 + 1004);
          }
        }
      }
      heap_Free(*(void **)(a1 + 8), *a4);
      *a4 = 0;
    }
    uint64_t v26 = a4[505];
    if (v26) {
      heap_Free(*(void **)(a1 + 8), v26);
    }
    a4[505] = 0;
    heap_Free(*(void **)(a1 + 8), (uint64_t)a4);
  }
  return 0;
}

uint64_t nnextract_Skip(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 16;
  do
  {
    if (!*(void *)(*(void *)(a1 + 16 * *(__int16 *)(a2 + 32) + 8) + 8 * v6)) {
      break;
    }
    if (*(int *)(a3 + 4016) >= 1)
    {
      uint64_t v8 = 0;
      do
      {
        if (!cstdlib_strcmp(*(const char **)(*(void *)(a1 + 16 * *(__int16 *)(a2 + 32) + 8) + 8 * v6), *(const char **)(*(void *)(a3 + 8) + 8 * v8)))
        {
          *(_DWORD *)(v7 + 4 * v8) = 0;
          --*(_DWORD *)(a3 + 4020);
        }
        ++v8;
      }
      while (v8 < *(int *)(a3 + 4016));
    }
    ++v6;
  }
  while (v6 != 500);
  return 0;
}

uint64_t nnextract_Unrolled(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, 16);
  if (v10)
  {
    uint64_t v16 = (int *)v10;
    SymTabInit(v10);
    uint64_t Buf = SymTabReadBuf(a1, (uint64_t)v16, *(void *)(a2 + 16), *(unsigned __int16 *)(a2 + 24), a3);
    if (Buf)
    {
      uint64_t v23 = Buf;
      uint64_t v24 = "::nnfeatextract::NN - SymTabRead.";
    }
    else
    {
      BOOL v25 = SymTabToIntInplaceActive(a1, v16, a3, 0, 0x2Du);
      if (v25)
      {
        uint64_t v23 = v25;
        uint64_t v24 = "::nnfeatextract:: Symbol table does not seem to be correct.";
      }
      else
      {
        uint64_t v23 = unrollNnFeatures(a1, (uint64_t **)a3, (uint64_t)v16, a4, a5);
        if (!v23)
        {
          NNFX_logMsg(a1, 2, (uint64_t)"::nnfeatextract:: N. unrolled features: %4d   N. steps: %4d", v18, v19, v20, v21, v22);
          SymTabFree((void *)a1, v16);
          heap_Free(*(void **)(a1 + 8), (uint64_t)v16);
          return v23;
        }
        uint64_t v24 = "::nnfeatextract:: features unroll failed.";
      }
    }
    NNFX_logMsg(a1, 0, (uint64_t)v24, v18, v19, v20, v21, v22);
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)"::nnfeatextract::Memory allocation.", v11, v12, v13, v14, v15);
    return 1;
  }
  return v23;
}

uint64_t nnextract_UnrolledFromSymTab(uint64_t a1, int *a2, uint64_t *a3, uint64_t *a4, _DWORD *a5)
{
  BOOL v10 = SymTabToIntInplaceActive(a1, a2, a3, 0, 0x2Du);
  if (v10)
  {
    uint64_t v16 = v10;
    unint64_t v17 = "::nnfeatextract:: Symbol table does not seem to be correct.";
  }
  else
  {
    uint64_t v16 = unrollNnFeatures(a1, (uint64_t **)a3, (uint64_t)a2, a4, a5);
    if (!v16)
    {
      unint64_t v17 = "::nnfeatextract:: N. unrolled features: %4d   N. steps: %4d";
      uint64_t v18 = a1;
      int v19 = 2;
      goto LABEL_6;
    }
    unint64_t v17 = "::nnfeatextract:: features unroll failed.";
  }
  uint64_t v18 = a1;
  int v19 = 0;
LABEL_6:
  NNFX_logMsg(v18, v19, (uint64_t)v17, v11, v12, v13, v14, v15);
  return v16;
}

uint64_t nnextract_Rolled(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, char *a9, uint64_t a10)
{
  uint64_t v11 = *(const char ***)(a6 + 8);
  if (!v11)
  {
    int v29 = "::nnfeatextract::Missing NN lingtab data.";
LABEL_15:
    NNFX_logMsg((uint64_t)a1, 0, (uint64_t)v29, a4, a5, a6, (uint64_t)a7, a8);
    return 1;
  }
  unsigned __int8 v15 = a5;
  unsigned int v16 = a4;
  __int16 v31 = 0;
  memset(v30, 0, sizeof(v30));
  GetLingTabIndex(v11, v30);
  if (SLOWORD(v30[0]) == -1) {
    NNFX_logMsg((uint64_t)a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOWELS entry.", v19, v20, v21, v22, v23);
  }
  if (SWORD1(v30[0]) == -1) {
    NNFX_logMsg((uint64_t)a1, 1, (uint64_t)"::nnfeatextract::NN - GetLingTabIndex - missing VOICEDPHONES entry.", v19, v20, v21, v22, v23);
  }
  uint64_t NnFeatures = extractNnFeatures(a1, *(void *)(a6 + 8), (uint64_t)v30, a9, a10, a2, a3, v16, v15, a8);
  *a7 = NnFeatures;
  if (!NnFeatures)
  {
    int v29 = "::nnfeatextract::NN - extractFeatures.";
    goto LABEL_15;
  }
  uint64_t v25 = NnFeatures;
  *(_DWORD *)(NnFeatures + 4020) = 0;
  if (*(int *)(NnFeatures + 4016) >= 1)
  {
    uint64_t v26 = 0;
    do
    {
      *(_DWORD *)(NnFeatures + 16 + 4 * v26) = 1;
      ++*(_DWORD *)(NnFeatures + 4020);
      ++v26;
    }
    while (v26 < *(int *)(NnFeatures + 4016));
  }
  uint64_t v27 = *(void *)(a6 + 8);
  if (*(void *)(v27 + 16 * v31 + 8)) {
    nnextract_Skip(v27, (uint64_t)v30, v25);
  }
  return 0;
}

uint64_t fExtGetPhoneFeats(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  unsigned int v9 = a6;
  uint64_t v114 = *MEMORY[0x263EF8340];
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting phone-level attributes...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v15, v16, v17, v18, v19);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v20, v21, v22, v23, v24);
  uint64_t v25 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  uint64_t v31 = v25;
  if (!v25)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhoneFeats() trying to mallocate output.", v26, v27, v28, v29, v30);
    return v31;
  }
  *(_DWORD *)(v25 + 4016) = 8;
  *(_DWORD *)(v25 + 4024) = v8;
  *(void *)(v25 + 4032) = *a5;
  uint64_t v32 = heap_Alloc(*(void *)(a1 + 8), 64);
  *(void *)(v31 + 8) = v32;
  if (!v32)
  {
    uint64_t v99 = " in fExtGetPhoneFeats() allocating feature names";
    goto LABEL_119;
  }
  **(void **)(v31 + 8) = stringdup(a1, "Phone");
  *(void *)(*(void *)(v31 + 8) + 8) = stringdup(a1, "VowInSyll");
  *(void *)(*(void *)(v31 + 8) + 16) = stringdup(a1, "Voicing");
  *(void *)(*(void *)(v31 + 8) + 24) = stringdup(a1, "ConsVow");
  *(void *)(*(void *)(v31 + 8) + 32) = stringdup(a1, "BroadClass");
  *(void *)(*(void *)(v31 + 8) + 40) = stringdup(a1, "LexStress");
  *(void *)(*(void *)(v31 + 8) + 48) = stringdup(a1, "PhoneTag");
  *(void *)(*(void *)(v31 + 8) + 56) = stringdup(a1, "PhoneDiff");
  int v38 = *(_DWORD *)(v31 + 4016);
  if (v38 >= 1)
  {
    uint64_t v39 = *(void **)(v31 + 8);
    uint64_t v40 = *(unsigned int *)(v31 + 4016);
    do
    {
      if (!*v39)
      {
        uint64_t v99 = " in fExtGetPhoneFeats allocating feature stream names.";
        goto LABEL_119;
      }
      ++v39;
      --v40;
    }
    while (v40);
  }
  uint64_t v41 = heap_Alloc(*(void *)(a1 + 8), 8 * v38);
  *(void *)uint64_t v31 = v41;
  if (!v41)
  {
    uint64_t v99 = " in fExtGetPhoneFeats() trying to malloc-ate output.";
    goto LABEL_119;
  }
  uint64_t v111 = a2;
  if (*(_DWORD *)(v31 + 4016))
  {
    unint64_t v42 = 0;
    do
    {
      uint64_t v43 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v31 + 4024));
      *(void *)(*(void *)v31 + 8 * v42) = v43;
      if (!v43)
      {
        uint64_t v99 = " in fExtGetPhoneFeats mallocating for output stream %d of %d";
        goto LABEL_119;
      }
      ++v42;
    }
    while (v42 < *(unsigned int *)(v31 + 4016));
  }
  int v102 = v8;
  if (v9)
  {
    uint64_t v44 = 0;
    unsigned int v45 = 0;
    uint64_t v101 = v9;
    unsigned int v103 = a3;
    while (!*(_DWORD *)(*(void *)(a4 + 8 * v44) + 144))
    {
LABEL_98:
      if (++v44 == v101) {
        goto LABEL_106;
      }
    }
    unint64_t v46 = 0;
    int v47 = 1;
    while (1)
    {
      unint64_t v112 = v46;
      uint64_t v48 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v48)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 0 of word %d.";
        goto LABEL_119;
      }
      uint64_t v49 = v48;
      uint64_t v50 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v50)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 1 of word %d.";
        goto LABEL_119;
      }
      uint64_t v51 = v50;
      uint64_t v52 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v52)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 2 of word %d.";
        goto LABEL_119;
      }
      uint64_t v53 = v52;
      uint64_t v54 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v54)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 3 of word %d.";
        goto LABEL_119;
      }
      uint64_t v109 = v53;
      uint64_t v110 = v54;
      uint64_t v55 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v55)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 4 of word %d.";
        goto LABEL_119;
      }
      uint64_t v56 = v55;
      uint64_t v57 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v57)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 5 of word %d.";
        goto LABEL_119;
      }
      uint64_t v108 = v57;
      uint64_t v58 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v58)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 6 of word %d.";
        goto LABEL_119;
      }
      uint64_t v107 = v58;
      uint64_t v59 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v59)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for stream 7 of word %d.";
        goto LABEL_119;
      }
      uint64_t v106 = v59;
      *(_DWORD *)(v49 + 8) = 3;
      __int16 __s = *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112);
      uint64_t v60 = stringdup(a1, (char *)&__s);
      *(void *)uint64_t v49 = v60;
      if (!v60)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for phoneID.";
        goto LABEL_119;
      }
      *(void *)(**(void **)v31 + 8 * v45) = v49;
      uint64_t v61 = *(void *)(a4 + 8 * v44);
      unsigned int v105 = v45;
      int v104 = v47;
      if (*(_DWORD *)(v61 + 192))
      {
        uint64_t v62 = a3;
        LOBYTE(v63) = 45;
      }
      else
      {
        if (v112)
        {
          unsigned int v64 = v47;
          while (1)
          {
            unsigned int v65 = v64 - 2;
            if ((int)(v64 - 2) < 0) {
              break;
            }
            --v64;
            if (*(_DWORD *)(*(void *)(v61 + 184) + 4 * v65) == 1) {
              goto LABEL_33;
            }
          }
        }
        unsigned int v64 = 0;
LABEL_33:
        uint64_t v62 = a3;
        unsigned int v66 = *(_DWORD *)(v61 + 144) - 1;
        if (v112 <= v66)
        {
          uint64_t v67 = *(void *)(v61 + 184);
          unsigned int v68 = v112;
          while (*(_DWORD *)(v67 + 4 * v68) != 1)
          {
            if (++v68 > v66) {
              goto LABEL_39;
            }
          }
          unsigned int v66 = v68;
        }
LABEL_39:
        BOOL v69 = *v62 == -1 || v64 > v66;
        unsigned int v70 = v64;
        if (v69) {
          goto LABEL_47;
        }
        while (1)
        {
          int v71 = cstdlib_strchr(**(char ***)(v111 + 16 * *v62 + 8), *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v70));
          if (v71) {
            break;
          }
          if (++v70 > v66) {
            goto LABEL_47;
          }
        }
        int v63 = *v71;
        if (v63 == 45)
        {
LABEL_47:
          NNFX_logMsg(a1, 1, (uint64_t)"::nnfeatextract, No vowel found in syllable ", v33, v34, v35, v36, v37);
          if (v64 <= v66)
          {
            unsigned int v77 = v64;
            do
            {
              NNFX_logMsg(a1, 1, (uint64_t)"%c", v72, v73, v74, v75, v76);
              ++v77;
            }
            while (v77 <= v66);
          }
          NNFX_logMsg(a1, 1, (uint64_t)" from %d to %d for phone %d", v72, v73, v74, v75, v76);
          LOBYTE(v63) = 45;
        }
      }
      *(_DWORD *)(v51 + 8) = 3;
      __int16 __s = v63;
      uint64_t v78 = stringdup(a1, (char *)&__s);
      *(void *)uint64_t v51 = v78;
      if (!v78)
      {
        uint64_t v99 = " in fExtGetPhoneFeats while allocating mem for VowInSyl.";
        goto LABEL_119;
      }
      *(void *)(*(void *)(*(void *)v31 + 8) + 8 * v105) = v51;
      uint64_t v79 = v62;
      if (*v62 == -1)
      {
        char v81 = 45;
        uint64_t v80 = v111;
      }
      else
      {
        uint64_t v80 = v111;
        if (cstdlib_strchr(**(char ***)(v111 + 16 * v79[1] + 8), *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112)))
        {
          char v81 = 86;
        }
        else
        {
          char v81 = 45;
        }
      }
      *(_DWORD *)(v109 + 8) = 2;
      *(unsigned char *)uint64_t v109 = v81;
      *(void *)(*(void *)(*(void *)v31 + 16) + 8 * v105) = v109;
      uint64_t v82 = *v79;
      if (v82 == -1)
      {
        char v85 = 45;
        unint64_t v83 = v112;
      }
      else
      {
        unint64_t v83 = v112;
        int v84 = *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112);
        if (v84 == SilPhone)
        {
          char v85 = 45;
        }
        else
        {
          uint64_t v86 = cstdlib_strchr(**(char ***)(v80 + 16 * v82 + 8), (char)v84);
          unint64_t v83 = v112;
          if (v86) {
            char v85 = 86;
          }
          else {
            char v85 = 67;
          }
        }
      }
      *(_DWORD *)(v110 + 8) = 2;
      *(unsigned char *)uint64_t v110 = v85;
      *(void *)(*(void *)(*(void *)v31 + 24) + 8 * v105) = v110;
      int v87 = *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v83);
      if (v87 == SilPhone)
      {
        char v88 = 45;
        goto LABEL_87;
      }
      uint64_t v89 = v79[2];
      if (v89 != -1)
      {
        uint64_t v90 = *(char ***)(v80 + 16 * v89 + 8);
        if (v90)
        {
          if (cstdlib_strchr(*v90, *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v83)))
          {
            char v88 = 77;
            goto LABEL_86;
          }
          LOBYTE(v87) = *(unsigned char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112);
        }
      }
      uint64_t v91 = v79[3];
      if (v91 == -1) {
        goto LABEL_76;
      }
      uint64_t v92 = *(char ***)(v80 + 16 * v91 + 8);
      if (!v92) {
        goto LABEL_76;
      }
      if (!cstdlib_strchr(*v92, (char)v87))
      {
        LOBYTE(v87) = *(unsigned char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112);
LABEL_76:
        if (check_phn_class(v80, v79[4], (char)v87))
        {
          char v88 = 65;
        }
        else if (check_phn_class(v80, v79[5], *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112)))
        {
          char v88 = 70;
        }
        else if (check_phn_class(v80, v79[6], *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112)))
        {
          char v88 = 83;
        }
        else if (check_phn_class(v80, v79[7], *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112)))
        {
          char v88 = 76;
        }
        else
        {
          if (!check_phn_class(v80, v79[8], *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112)))
          {
            BOOL v98 = check_phn_class(v80, v79[9], *(char *)(*(void *)(*(void *)(a4 + 8 * v44) + 152) + v112));
            unint64_t v83 = v112;
            if (v98) {
              char v88 = 71;
            }
            else {
              char v88 = 45;
            }
            goto LABEL_87;
          }
          char v88 = 78;
        }
        goto LABEL_86;
      }
      char v88 = 68;
LABEL_86:
      unint64_t v83 = v112;
LABEL_87:
      *(_DWORD *)(v56 + 8) = 2;
      *(unsigned char *)uint64_t v56 = v88;
      *(void *)(*(void *)(*(void *)v31 + 32) + 8 * v105) = v56;
      *(_DWORD *)(v108 + 8) = 2;
      int v93 = *(_DWORD *)(*(void *)(*(void *)(a4 + 8 * v44) + 176) + 4 * v83);
      if (v93) {
        char v94 = v93 + 48;
      }
      else {
        char v94 = 45;
      }
      *(unsigned char *)uint64_t v108 = v94;
      *(void *)(*(void *)(*(void *)v31 + 40) + 8 * v105) = v108;
      *(_DWORD *)(v107 + 8) = 3;
      unint64_t v95 = v83;
      uint64_t v96 = stringdup(a1, *(char **)(*(void *)(*(void *)(a4 + 8 * v44) + 168) + 8 * v83));
      *(void *)uint64_t v107 = v96;
      if (!v96)
      {
        uint64_t v99 = " in fExtGetPhoneFeats copying phone tag for phone %d in word %d.";
LABEL_119:
        NNFX_logMsg(a1, 0, (uint64_t)v99, v33, v34, v35, v36, v37);
        return 0;
      }
      *(void *)(*(void *)(*(void *)v31 + 48) + 8 * v105) = v107;
      *(_DWORD *)(v106 + 8) = 2;
      int v97 = *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 8 * v44) + 160) + v95);
      if (v97 == 32) {
        LOBYTE(v97) = 45;
      }
      *(unsigned char *)uint64_t v106 = v97;
      *(void *)(*(void *)(*(void *)v31 + 56) + 8 * v105) = v106;
      unsigned int v45 = v105 + 1;
      unint64_t v46 = v95 + 1;
      int v47 = v104 + 1;
      a3 = v103;
      if (v46 >= *(unsigned int *)(*(void *)(a4 + 8 * v44) + 144)) {
        goto LABEL_98;
      }
    }
  }
  unsigned int v45 = 0;
LABEL_106:
  if (v45 != v102)
  {
    uint64_t v99 = " in fExtGetPhoneFeats(). %d phones processed, but %d phones in input.";
    goto LABEL_119;
  }
  return v31;
}

uint64_t fExtGetLexicalFeats(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  int v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting lexical attributes...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v15, v16, v17, v18, v19);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v20, v21, v22, v23, v24);
  uint64_t v25 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  uint64_t v31 = v25;
  if (!v25)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetLexicalFeats() trying to mallocate output.", v26, v27, v28, v29, v30);
    return v31;
  }
  *(_DWORD *)(v25 + 4016) = 15;
  *(_DWORD *)(v25 + 4024) = v8;
  *(void *)(v25 + 4032) = *(void *)(a5 + 16);
  uint64_t v32 = heap_Alloc(*(void *)(a1 + 8), 120);
  *(void *)(v31 + 8) = v32;
  if (!v32)
  {
    unsigned int v103 = " in fExtGetLexicalFeats() allocating feature names";
    goto LABEL_114;
  }
  **(void **)(v31 + 8) = stringdup(a1, "Prominence");
  *(void *)(*(void *)(v31 + 8) + 8) = stringdup(a1, "POS");
  *(void *)(*(void *)(v31 + 8) + 16) = stringdup(a1, "nluPOS");
  *(void *)(*(void *)(v31 + 8) + 24) = stringdup(a1, "nluCLS");
  *(void *)(*(void *)(v31 + 8) + 32) = stringdup(a1, "nluPNC");
  *(void *)(*(void *)(v31 + 8) + 40) = stringdup(a1, "nluCMP");
  *(void *)(*(void *)(v31 + 8) + 48) = stringdup(a1, "nluBDS");
  *(void *)(*(void *)(v31 + 8) + 56) = stringdup(a1, "nluCPS");
  *(void *)(*(void *)(v31 + 8) + 64) = stringdup(a1, "IsFxnWord");
  *(void *)(*(void *)(v31 + 8) + 72) = stringdup(a1, "IsWHWord");
  *(void *)(*(void *)(v31 + 8) + 80) = stringdup(a1, "IsAuxWord");
  *(void *)(*(void *)(v31 + 8) + 88) = stringdup(a1, "IsConjWord");
  *(void *)(*(void *)(v31 + 8) + 96) = stringdup(a1, "IsAdposWord");
  *(void *)(*(void *)(v31 + 8) + 104) = stringdup(a1, "CommonWord");
  *(void *)(*(void *)(v31 + 8) + 112) = stringdup(a1, "EndPhraseType");
  int v38 = *(_DWORD *)(v31 + 4016);
  if (v38)
  {
    uint64_t v39 = *(void **)(v31 + 8);
    uint64_t v40 = *(unsigned int *)(v31 + 4016);
    do
    {
      if (!*v39)
      {
        unsigned int v103 = " in fExtGetLexicalFeats allocating feature stream names.";
        goto LABEL_114;
      }
      ++v39;
      --v40;
    }
    while (v40);
  }
  uint64_t v41 = heap_Alloc(*(void *)(a1 + 8), 8 * v38);
  *(void *)uint64_t v31 = v41;
  if (!v41)
  {
    unsigned int v103 = " in fExtGetLexicalFeats() trying to malloc-ate feature array.";
    goto LABEL_114;
  }
  if (*(_DWORD *)(v31 + 4016))
  {
    unint64_t v42 = 0;
    do
    {
      uint64_t v43 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v31 + 4024));
      *(void *)(*(void *)v31 + 8 * v42) = v43;
      if (!v43)
      {
        unsigned int v103 = " in fExtGetLexicalFeats mallocating output stream %d of %d";
        goto LABEL_114;
      }
      ++v42;
    }
    while (v42 < *(unsigned int *)(v31 + 4016));
  }
  uint64_t v44 = *(_DWORD **)(a5 + 16);
  if (v44[1] != v9)
  {
    unsigned int v103 = " in fExtGetLexicalFeats. Number of prosodic words %d does not match %d boundaries in the WORD tier.";
    goto LABEL_114;
  }
  if (*v44 != v8)
  {
    unsigned int v103 = " in fExtGetLexicalFeats. Number of elments %d in WORD tier does not match number of phones.";
    goto LABEL_114;
  }
  if (v9)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    int v47 = -1;
    while (1)
    {
      unsigned int ElementInGroup = firstElementInGroup(a1, (uint64_t)v44, v45, v33, v34, v35, v36, v37);
      if (ElementInGroup == -1)
      {
        unsigned int v103 = " in fExtGetLexicalFeats finding beginning of group %d in WORD tier.";
        goto LABEL_114;
      }
      uint64_t v132 = v45;
      int v128 = lastElementInGroup(a1, *(unsigned int **)(a5 + 16), v45, v33, v34, v35, v36, v37);
      if (v128 == -1)
      {
        unsigned int v103 = " in fExtGetLexicalFeats finding end of group %d in WORD tier.";
        goto LABEL_114;
      }
      if (ElementInGroup != v47 + 1)
      {
        unsigned int v103 = " in fExtGetLexicalFeats on WORD tier. First phone %d in group %d does not follow last phone (%d) processe"
               "d in previous group.";
        goto LABEL_114;
      }
      if (v128 >= v8)
      {
        unsigned int v103 = " in fExtGetLexicalFeats on WORD tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_114;
      }
      if (v46) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v46);
      }
      uint64_t v48 = (const char *)stringdup(a1, *(char **)(*(void *)(a4 + 8 * v45) + 32));
      if (!v48)
      {
        unsigned int v103 = " in fExtGetLexicalFeats trying to lowercase ";
        goto LABEL_114;
      }
      unint64_t v46 = (char *)v48;
      if (cstdlib_strlen(v48))
      {
        uint64_t v49 = 0;
        unsigned int v50 = 1;
        do
        {
          v46[v49] = cstdlib_tolower(v46[v49]);
          uint64_t v49 = v50;
        }
        while (cstdlib_strlen(v46) > v50++);
      }
      int v129 = check_lex_feat(a2, v46, a3[11]);
      int v125 = check_lex_feat(a2, v46, a3[12]);
      int v123 = check_lex_feat(a2, v46, a3[14]);
      int v121 = check_lex_feat(a2, v46, a3[13]);
      int v52 = check_lex_feat(a2, v46, a3[15]);
      int v53 = a3[10];
      LODWORD(v54) = -1;
      if (v53 != -1 && v53 <= 499)
      {
        if (*(void *)(a2 + 16 * a3[10] + 8))
        {
          uint64_t v54 = 0;
          do
          {
            uint64_t v55 = *(const char **)(*(void *)(a2 + 16 * a3[10] + 8) + 8 * v54);
            if (!v55) {
              break;
            }
            if (!cstdlib_strcmp(v46, v55)) {
              goto LABEL_34;
            }
            ++v54;
          }
          while (v54 != 500);
        }
        LODWORD(v54) = -1;
      }
LABEL_34:
      if (ElementInGroup <= v128)
      {
        uint64_t v131 = 0;
        if (v129) {
          char v56 = 49;
        }
        else {
          char v56 = 45;
        }
        char v108 = v56;
        if (v125) {
          char v57 = 49;
        }
        else {
          char v57 = 45;
        }
        char v107 = v57;
        if (v123) {
          char v58 = 49;
        }
        else {
          char v58 = 45;
        }
        char v106 = v58;
        if (v121) {
          int v59 = 49;
        }
        else {
          int v59 = 45;
        }
        if (v52) {
          char v60 = 49;
        }
        else {
          char v60 = 45;
        }
        char v104 = v60;
        int v105 = v59;
        uint64_t v130 = 8 * ElementInGroup;
        uint64_t v110 = a2;
        do
        {
          uint64_t v61 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v61)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 0 of word %d.";
            goto LABEL_114;
          }
          uint64_t v62 = v61;
          uint64_t v63 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v63)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 1 of word %d.";
            goto LABEL_114;
          }
          uint64_t v119 = v63;
          uint64_t v120 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v120)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 2 of word %d.";
            goto LABEL_114;
          }
          uint64_t v64 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v64)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 3 of word %d.";
            goto LABEL_114;
          }
          uint64_t v118 = v64;
          uint64_t v65 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v65)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 4 of word %d.";
            goto LABEL_114;
          }
          uint64_t v117 = v65;
          uint64_t v126 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v126)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 5 of word %d.";
            goto LABEL_114;
          }
          uint64_t v66 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v66)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 6 of word %d.";
            goto LABEL_114;
          }
          uint64_t v116 = v66;
          uint64_t v67 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v67)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 7 of word %d.";
            goto LABEL_114;
          }
          uint64_t v124 = v67;
          uint64_t v68 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v68)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 8 of word %d.";
            goto LABEL_114;
          }
          uint64_t v115 = v68;
          uint64_t v69 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v69)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 9 of word %d.";
            goto LABEL_114;
          }
          uint64_t v114 = v69;
          uint64_t v70 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v70)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 10 of word %d.";
            goto LABEL_114;
          }
          uint64_t v113 = v70;
          uint64_t v71 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v71)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 11 of word %d.";
            goto LABEL_114;
          }
          unint64_t v112 = (_DWORD *)v71;
          uint64_t v72 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v72)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 12 of word %d.";
            goto LABEL_114;
          }
          uint64_t v111 = v72;
          uint64_t v73 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v73)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 13 of word %d.";
            goto LABEL_114;
          }
          uint64_t v122 = v73;
          uint64_t v74 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v74)
          {
            unsigned int v103 = " in fExtGetLexicalFeats while allocating mem for stream 14 of word %d.";
            goto LABEL_114;
          }
          uint64_t v109 = v74;
          *(_DWORD *)(v62 + 8) = 2;
          int v75 = *(_DWORD *)(*(void *)(a4 + 8 * v132) + 20);
          if (v75) {
            char v76 = v75 + 48;
          }
          else {
            char v76 = 45;
          }
          *(unsigned char *)uint64_t v62 = v76;
          *(void *)(**(void **)v31 + v130 + 8 * v131) = v62;
          *(_DWORD *)(v119 + 8) = 3;
          if (cstdlib_strlen(*(const char **)(*(void *)(a4 + 8 * v132) + 56)))
          {
            unsigned int v77 = stringdup(a1, *(char **)(*(void *)(a4 + 8 * v132) + 56));
            *(void *)uint64_t v119 = v77;
            uint64_t v78 = v132;
            uint64_t v79 = v120;
            if (!v77)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying POS value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          else
          {
            uint64_t v80 = stringdup(a1, "-");
            *(void *)uint64_t v119 = v80;
            uint64_t v78 = v132;
            uint64_t v79 = v120;
            if (!v80)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying null POS value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          *(void *)(*(void *)(*(void *)v31 + 8) + v130 + 8 * v131) = v119;
          *(_DWORD *)(v79 + 8) = 3;
          uint64_t v81 = v78;
          if (cstdlib_strlen(*(const char **)(*(void *)(a4 + 8 * v78) + 80)))
          {
            uint64_t v82 = stringdup(a1, *(char **)(*(void *)(a4 + 8 * v81) + 80));
            *(void *)uint64_t v79 = v82;
            uint64_t v83 = v81;
            a2 = v110;
            if (!v82)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying nluPOS value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          else
          {
            int v84 = stringdup(a1, "-");
            *(void *)uint64_t v79 = v84;
            uint64_t v83 = v81;
            a2 = v110;
            if (!v84)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying null value to nluPOS feature while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          *(void *)(*(void *)(*(void *)v31 + 16) + v130 + 8 * v131) = v79;
          *(_DWORD *)(v118 + 8) = 3;
          if (cstdlib_strlen(*(const char **)(*(void *)(a4 + 8 * v83) + 96)))
          {
            char v85 = stringdup(a1, *(char **)(*(void *)(a4 + 8 * v132) + 96));
            *(void *)uint64_t v118 = v85;
            if (!v85)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying nluCLS value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          else
          {
            uint64_t v86 = stringdup(a1, "-");
            *(void *)uint64_t v118 = v86;
            if (!v86)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying null value to nluCLS feature while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          *(void *)(*(void *)(*(void *)v31 + 24) + v130 + 8 * v131) = v118;
          *(_DWORD *)(v117 + 8) = 3;
          if (cstdlib_strlen(*(const char **)(*(void *)(a4 + 8 * v132) + 112)))
          {
            int v87 = stringdup(a1, *(char **)(*(void *)(a4 + 8 * v132) + 112));
            *(void *)uint64_t v117 = v87;
            if (!v87)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying nluPNC value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          else
          {
            char v88 = stringdup(a1, "-");
            *(void *)uint64_t v117 = v88;
            if (!v88)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying null value to nluPNC feature while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          *(void *)(*(void *)(*(void *)v31 + 32) + v130 + 8 * v131) = v117;
          *(_DWORD *)(v126 + 8) = 3;
          if (cstdlib_strlen(*(const char **)(*(void *)(a4 + 8 * v132) + 104)))
          {
            uint64_t v89 = stringdup(a1, *(char **)(*(void *)(a4 + 8 * v132) + 104));
            uint64_t v90 = v126;
            *(void *)uint64_t v126 = v89;
            if (!v89)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying nluCMP value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          else
          {
            uint64_t v91 = stringdup(a1, "-");
            uint64_t v90 = v126;
            *(void *)uint64_t v126 = v91;
            if (!v91)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying null value to nluCMP feature while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          *(void *)(*(void *)(*(void *)v31 + 40) + v130 + 8 * v131) = v90;
          *(_DWORD *)(v116 + 8) = 3;
          if (cstdlib_strlen(*(const char **)(*(void *)(a4 + 8 * v132) + 120)))
          {
            uint64_t v92 = stringdup(a1, *(char **)(*(void *)(a4 + 8 * v132) + 120));
            *(void *)uint64_t v116 = v92;
            if (!v92)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying nluBDS value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          else
          {
            int v93 = stringdup(a1, "-");
            *(void *)uint64_t v116 = v93;
            if (!v93)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying null value to nluBDS feature while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          *(void *)(*(void *)(*(void *)v31 + 48) + v130 + 8 * v131) = v116;
          *(_DWORD *)(v124 + 8) = 3;
          if (cstdlib_strlen(*(const char **)(*(void *)(a4 + 8 * v132) + 128)))
          {
            char v94 = stringdup(a1, *(char **)(*(void *)(a4 + 8 * v132) + 128));
            uint64_t v95 = v124;
            *(void *)uint64_t v124 = v94;
            if (!v94)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying nluCPS value while processing phone %d (pros word %d)";
              goto LABEL_114;
            }
          }
          else
          {
            uint64_t v96 = stringdup(a1, "-");
            uint64_t v95 = v124;
            *(void *)uint64_t v124 = v96;
            if (!v96)
            {
              unsigned int v103 = " in fExtGetLexicalFeats copying null value to nluCPS feature while processing phone %d (pros word %d)";
LABEL_114:
              NNFX_logMsg(a1, 0, (uint64_t)v103, v33, v34, v35, v36, v37);
              return 0;
            }
          }
          *(void *)(*(void *)(*(void *)v31 + 56) + v130 + 8 * v131) = v95;
          *(_DWORD *)(v115 + 8) = 2;
          *(unsigned char *)uint64_t v115 = v108;
          *(void *)(*(void *)(*(void *)v31 + 64) + v130 + 8 * v131) = v115;
          *(unsigned char *)uint64_t v114 = v107;
          *(void *)(*(void *)(*(void *)v31 + 72) + v130 + 8 * v131) = v114;
          *(_DWORD *)(v114 + 8) = 2;
          *(_DWORD *)(v113 + 8) = 2;
          *(unsigned char *)uint64_t v113 = v106;
          *(void *)(*(void *)(*(void *)v31 + 80) + v130 + 8 * v131) = v113;
          v112[2] = 2;
          _DWORD *v112 = v105;
          *(void *)(*(void *)(*(void *)v31 + 88) + v130 + 8 * v131) = v112;
          *(_DWORD *)(v111 + 8) = 2;
          *(unsigned char *)uint64_t v111 = v104;
          *(void *)(*(void *)(*(void *)v31 + 96) + v130 + 8 * v131) = v111;
          *(_DWORD *)(v122 + 8) = 3;
          if (v54 == -1)
          {
            uint64_t v98 = a1;
            int v97 = "-";
          }
          else
          {
            int v97 = *(char **)(*(void *)(a2 + 16 * a3[10] + 8) + 8 * (int)v54);
            uint64_t v98 = a1;
          }
          uint64_t v99 = stringdup(v98, v97);
          *(void *)uint64_t v122 = v99;
          if (!v99)
          {
            unsigned int v103 = " in fExtGetLexicalFeats copying value to lexeme.";
            goto LABEL_114;
          }
          int v100 = v131;
          *(void *)(*(void *)(*(void *)v31 + 104) + v130 + 8 * v131) = v122;
          *(_DWORD *)(v109 + 8) = 2;
          char v101 = **(unsigned char **)(*(void *)(a4 + 8 * v132) + 48);
          if (!v101) {
            char v101 = 45;
          }
          *(unsigned char *)uint64_t v109 = v101;
          *(void *)(*(void *)(*(void *)v31 + 112) + v130 + 8 * v131++) = v109;
        }
        while (~v128 + ElementInGroup + v100 + 1);
      }
      uint64_t v45 = v132 + 1;
      uint64_t v44 = *(_DWORD **)(a5 + 16);
      int v47 = v128;
      if (v132 + 1 >= (unint64_t)v44[1])
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v46);
        return v31;
      }
    }
  }
  return v31;
}

uint64_t fExtGetParseFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  int v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting syntactical attributes...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v13, v14, v15, v16, v17);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v18, v19, v20, v21, v22);
  uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  uint64_t v29 = v23;
  if (!v23)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetParseFeats() trying to mallocate output.", v24, v25, v26, v27, v28);
    return v29;
  }
  *(_DWORD *)(v23 + 4016) = 1;
  *(_DWORD *)(v23 + 4024) = v8;
  *(void *)(v23 + 4032) = *(void *)(a5 + 40);
  uint64_t v30 = heap_Alloc(*(void *)(a1 + 8), 8);
  *(void *)(v29 + 8) = v30;
  if (!v30 || (**(void **)(v29 + 8) = stringdup(a1, "SyntaxTag")) == 0)
  {
    char v57 = " in fExtGetParseFeats() allocating feature names";
LABEL_37:
    NNFX_logMsg(a1, 0, (uint64_t)v57, v31, v32, v33, v34, v35);
    return 0;
  }
  uint64_t v36 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v29 + 4016));
  *(void *)uint64_t v29 = v36;
  if (!v36)
  {
    char v57 = " in fExtGetParseFeats() trying to malloc-ate output.";
    goto LABEL_37;
  }
  if (*(_DWORD *)(v29 + 4016))
  {
    uint64_t v37 = 0;
    while (1)
    {
      uint64_t v38 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v29 + 4024));
      *(void *)(*(void *)v29 + 8 * v37) = v38;
      if (!v38) {
        break;
      }
      if (++v37 >= (unint64_t)*(unsigned int *)(v29 + 4016)) {
        goto LABEL_9;
      }
    }
    char v57 = " in fExtGetParseFeats mallocating for output stream %d of %d";
    goto LABEL_37;
  }
LABEL_9:
  uint64_t v39 = *(_DWORD **)(a5 + 40);
  if (*v39 != v8)
  {
    char v57 = " in fExtGetParseFeats. Number of elments %d in PARSE tier does not match number of phones %d.";
    goto LABEL_37;
  }
  if (v39[1])
  {
    unsigned int v40 = 0;
    int v41 = -1;
    while (1)
    {
      unsigned int ElementInGroup = firstElementInGroup(a1, (uint64_t)v39, v40, v31, v32, v33, v34, v35);
      if (ElementInGroup == -1)
      {
        char v57 = " in fExtGetParseFeats finding beginning of group %d in PARSE tier.";
        goto LABEL_37;
      }
      unsigned int v43 = ElementInGroup;
      int v44 = lastElementInGroup(a1, *(unsigned int **)(a5 + 40), v40, v31, v32, v33, v34, v35);
      if (v44 == -1)
      {
        char v57 = " in fExtGetParseFeats finding end of group %d in PARSE tier.";
        goto LABEL_37;
      }
      if (v43 != v41 + 1)
      {
        char v57 = " in fExtGetParseFeats on PARSE tier. First phone %d in group %d does not follow last phone (%d) processed "
              "in previous group.";
        goto LABEL_37;
      }
      if (v44 >= v8)
      {
        char v57 = " in fExtGetParseFeats on PARSE tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_37;
      }
      if (!v9)
      {
LABEL_49:
        char v57 = " in fExtGetParseFeats. Initial phone %d in parse group %d does not align with the start of any prosodic word.";
        goto LABEL_37;
      }
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      while (*(_DWORD *)(*(void *)(a4 + 8 * v46) + 140) != v43)
      {
        ++v46;
        v45 += 0x100000000;
        if (v9 == v46) {
          goto LABEL_49;
        }
      }
      int v59 = v44;
      unsigned int v60 = v40;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      while (*(_DWORD *)(*(void *)(a4 + 8 * v48) + 140) + *(_DWORD *)(*(void *)(a4 + 8 * v48) + 144) - 1 != v44)
      {
        ++v48;
        v47 += 0x100000000;
        if (v9 == v48)
        {
          char v57 = " in fExtGetParseFeats. Last phone %d in parse group %d does not align with the end of any prosodic word.";
          goto LABEL_37;
        }
      }
      unsigned int v58 = v44;
      if (cstdlib_strcmp(*(const char **)(*(void *)(a4 + (v45 >> 29)) + 88), *(const char **)(*(void *)(a4 + (v47 >> 29)) + 88)))
      {
        char v57 = " in fExtGetParseFeats. First (%d) and last (%d) words in parse group %d (from phone %d to phone %d) do not"
              " share a common nluPHR tag.";
        goto LABEL_37;
      }
      if (v43 <= v58) {
        break;
      }
LABEL_34:
      int v41 = v59;
      unsigned int v40 = v60 + 1;
      uint64_t v39 = *(_DWORD **)(a5 + 40);
      if (v60 + 1 >= v39[1]) {
        return v29;
      }
    }
    uint64_t v61 = v47 >> 32;
    uint64_t v49 = 8 * v43;
    int v50 = v58 - v43 + 1;
    while (1)
    {
      uint64_t v51 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v51)
      {
        char v57 = " in fExtGetParseFeats while allocating mem for stream 0 of parse group %d.";
        goto LABEL_37;
      }
      int v52 = (void *)v51;
      *(_DWORD *)(v51 + 8) = 3;
      if (cstdlib_strcmp(*(const char **)(*(void *)(a4 + 8 * v61) + 88), ""))
      {
        int v53 = *(char **)(*(void *)(a4 + 8 * v61) + 88);
        uint64_t v54 = a1;
      }
      else
      {
        uint64_t v54 = a1;
        int v53 = "-";
      }
      uint64_t v55 = stringdup(v54, v53);
      void *v52 = v55;
      if (!v55) {
        break;
      }
      *(void *)(**(void **)v29 + v49) = v52;
      v49 += 8;
      if (!--v50) {
        goto LABEL_34;
      }
    }
    char v57 = " in fExtGetParseFeats copying syntactical category feature.";
    goto LABEL_37;
  }
  return v29;
}

uint64_t fExtGetPhraseFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  unsigned int v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting phrase-level attributes...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v13, v14, v15, v16, v17);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v18, v19, v20, v21, v22);
  uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  uint64_t v29 = v23;
  if (!v23)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhraseFeats() trying to mallocate output.", v24, v25, v26, v27, v28);
    return v29;
  }
  *(_DWORD *)(v23 + 4016) = 1;
  *(_DWORD *)(v23 + 4024) = v8;
  *(void *)(v23 + 4032) = *(void *)(a5 + 24);
  uint64_t v30 = heap_Alloc(*(void *)(a1 + 8), 8);
  *(void *)(v29 + 8) = v30;
  if (!v30 || (**(void **)(v29 + 8) = stringdup(a1, "PhraseBoundaryStrength")) == 0)
  {
    int v53 = " in fExtGetPhraseFeats() allocating feature names";
LABEL_30:
    NNFX_logMsg(a1, 0, (uint64_t)v53, v31, v32, v33, v34, v35);
    return 0;
  }
  uint64_t v36 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v29 + 4016));
  *(void *)uint64_t v29 = v36;
  if (!v36)
  {
    int v53 = " in fExtGetPhraseFeats() trying to malloc-ate output.";
    goto LABEL_30;
  }
  if (*(_DWORD *)(v29 + 4016))
  {
    uint64_t v37 = 0;
    while (1)
    {
      uint64_t v38 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v29 + 4024));
      *(void *)(*(void *)v29 + 8 * v37) = v38;
      if (!v38) {
        break;
      }
      if (++v37 >= (unint64_t)*(unsigned int *)(v29 + 4016)) {
        goto LABEL_9;
      }
    }
    int v53 = "in fExtGetPhraseFeats mallocating for output stream %d of %d";
    goto LABEL_30;
  }
LABEL_9:
  uint64_t v39 = *(_DWORD **)(a5 + 24);
  if (*v39 != v8)
  {
    int v53 = " fExtGetPhraseFeats. Number of elements %d in PHRASE tier does not match number of phones %d";
    goto LABEL_30;
  }
  if (v39[1])
  {
    unsigned int v40 = 0;
    int v41 = -1;
    while (1)
    {
      unsigned int ElementInGroup = firstElementInGroup(a1, (uint64_t)v39, v40, v31, v32, v33, v34, v35);
      if (ElementInGroup == -1)
      {
        int v53 = " in fExtGetPhraseFeats finding beginning of group %d in PHRASE tier.";
        goto LABEL_30;
      }
      unsigned int v43 = ElementInGroup;
      int v44 = lastElementInGroup(a1, *(unsigned int **)(a5 + 24), v40, v31, v32, v33, v34, v35);
      if (v44 == -1)
      {
        int v53 = " in fExtGetPhraseFeats finding end of group %d in PHRASe tier.";
        goto LABEL_30;
      }
      if (v43 != v41 + 1)
      {
        int v53 = " in fExtGetPhraseFeats on PHRASE tier. First phone %d in group %d does not follow last phone (%d) processe"
              "d in previous group.";
        goto LABEL_30;
      }
      if (v44 >= v8)
      {
        int v53 = " in fExtGetPhraseFeats on PHRASE tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_30;
      }
      if (!v9)
      {
LABEL_41:
        int v53 = " in fExtGetPhraseFeats. Last phone %d in phrase %d does not align with the end of any prosodic word.";
        goto LABEL_30;
      }
      uint64_t v45 = 0;
      uint64_t v46 = a4;
      uint64_t v47 = v9;
      while (*(_DWORD *)(*(void *)v46 + 140) + *(_DWORD *)(*(void *)v46 + 144) - 1 != v44)
      {
        v45 += 0x100000000;
        v46 += 8;
        if (!--v47) {
          goto LABEL_41;
        }
      }
      int v55 = v44;
      unsigned int v56 = v40;
      if (v43 <= v44) {
        break;
      }
LABEL_27:
      int v41 = v55;
      unsigned int v40 = v56 + 1;
      uint64_t v39 = *(_DWORD **)(a5 + 24);
      if (v56 + 1 >= v39[1]) {
        return v29;
      }
    }
    uint64_t v48 = v45 >> 32;
    uint64_t v49 = 8 * v43;
    int v50 = v44 - v43 + 1;
    while (1)
    {
      uint64_t v51 = heap_Alloc(*(void *)(a1 + 8), 16);
      if (!v51) {
        break;
      }
      *(_DWORD *)(v51 + 8) = 2;
      int v52 = *(unsigned __int8 *)(*(void *)(a4 + 8 * v48) + 136);
      if (v52 == 78) {
        LOBYTE(v52) = 45;
      }
      *(unsigned char *)uint64_t v51 = v52;
      *(void *)(**(void **)v29 + v49) = v51;
      v49 += 8;
      if (!--v50) {
        goto LABEL_27;
      }
    }
    int v53 = " in fExtGetPhraseFeats while allocating mem for stream 0 of phrase %d.";
    goto LABEL_30;
  }
  return v29;
}

uint64_t fExtGetPunctFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  int v9 = a6;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting punctuation attributes...", a4, a5, a6, a7, a8);
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  uint64_t v19 = v13;
  if (!v13)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPunctFeats() trying to mallocate output.", v14, v15, v16, v17, v18);
    return v19;
  }
  *(_DWORD *)(v13 + 4016) = 1;
  *(_DWORD *)(v13 + 4024) = v8;
  *(void *)(v13 + 4032) = *(void *)(a5 + 32);
  uint64_t v20 = heap_Alloc(*(void *)(a1 + 8), 8);
  *(void *)(v19 + 8) = v20;
  if (!v20)
  {
    int v52 = " in fExtGetPunctFeats() allocating feature names";
    goto LABEL_71;
  }
  **(void **)(v19 + 8) = stringdup(a1, "PunctMark");
  if (!**(void **)(v19 + 8))
  {
    int v52 = " in fExtGetPunctFeats() allocating feature names.";
    goto LABEL_71;
  }
  uint64_t v26 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v19 + 4016));
  *(void *)uint64_t v19 = v26;
  if (!v26)
  {
    int v52 = " in fExtGetPunctFeats() trying to malloc-ate feature array.";
    goto LABEL_71;
  }
  if (*(_DWORD *)(v19 + 4016))
  {
    unint64_t v27 = 0;
    do
    {
      uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 8 * *(int *)(v19 + 4024));
      *(void *)(*(void *)v19 + 8 * v27) = v28;
      if (!v28)
      {
        int v52 = " in fExtGetPunctFeats mallocating output stream %d of %d";
        goto LABEL_71;
      }
      ++v27;
    }
    while (v27 < *(unsigned int *)(v19 + 4016));
  }
  uint64_t v29 = *(_DWORD **)(a5 + 32);
  if (*v29 != v8)
  {
    int v52 = " in fExtGetPunctFeats. Number of elments %d in PUNCT tier does not match number of phones %d.";
    goto LABEL_71;
  }
  if (v29[1])
  {
    unsigned int v30 = 0;
    __int16 __s = 0;
    int v31 = -1;
    while (1)
    {
      unsigned int ElementInGroup = firstElementInGroup(a1, (uint64_t)v29, v30, v21, v22, v23, v24, v25);
      if (ElementInGroup == -1)
      {
        int v52 = " in fExtGetPunctFeats finding beginning of group %d in PUNCT tier.";
        goto LABEL_71;
      }
      unsigned int v33 = ElementInGroup;
      int v34 = lastElementInGroup(a1, *(unsigned int **)(a5 + 32), v30, v21, v22, v23, v24, v25);
      if (v34 == -1)
      {
        int v52 = " in fExtGetPunctFeats finding end of group %d in PUNCT tier.";
        goto LABEL_71;
      }
      if (v33 != v31 + 1)
      {
        int v52 = " in fExtGetPunctFeats on PUNCT tier. First phone %d in group %d does not follow last phone (%d) processed "
              "in previous group.";
        goto LABEL_71;
      }
      if (v34 >= v8)
      {
        int v52 = " in fExtGetPunctFeats on PUNCT tier. Going out of bounds: (index %d ; %d phones)";
        goto LABEL_71;
      }
      if (!v9)
      {
LABEL_70:
        int v52 = " in fExtGetPunctFeats. First phone %d in parse group %d does not align with the start of any prosodic word.";
        goto LABEL_71;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      int v56 = v34;
      while (*(_DWORD *)(*(void *)(a4 + 8 * v36) + 140) != v33)
      {
        ++v36;
        v35 += 0x100000000;
        if (v9 == v36) {
          goto LABEL_70;
        }
      }
      unsigned int v55 = v30;
      uint64_t v37 = 0;
      while (*(_DWORD *)(*(void *)(a4 + 8 * v37) + 140) + *(_DWORD *)(*(void *)(a4 + 8 * v37) + 144) - 1 != v34)
      {
        if (v9 == ++v37)
        {
          int v52 = " in fExtGetPunctFeats. Last phone %d in parse group %d does not align with the end of any prosodic word.";
          goto LABEL_71;
        }
      }
      if (__s)
      {
        int v54 = v34;
        heap_Free(*(void **)(a1 + 8), (uint64_t)__s);
        int v34 = v54;
      }
      if ((int)v37 < (int)v36)
      {
LABEL_32:
        __int16 __s = 0;
        unsigned int v40 = v55;
        goto LABEL_45;
      }
      uint64_t v37 = (int)v37;
      while (1)
      {
        uint64_t v38 = *(void *)(a4 + 8 * v37);
        if (!*(_DWORD *)(v38 + 192)) {
          break;
        }
        if (v37-- <= v35 >> 32) {
          goto LABEL_32;
        }
      }
      int v41 = v34;
      int v42 = cstdlib_strlen(*(const char **)(v38 + 32));
      if (!v42) {
        goto LABEL_42;
      }
      unsigned int v43 = *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 8 * v37) + 32) + (v42 - 1));
      if (v43 > 0x39)
      {
        unsigned int v40 = v55;
        if (v43 == 58)
        {
          int v44 = "COLON";
        }
        else
        {
          if (v43 != 59)
          {
            if (v43 == 63) {
              int v44 = "QMARK";
            }
            else {
LABEL_42:
            }
              int v44 = "PERIOD";
            unsigned int v40 = v55;
            goto LABEL_44;
          }
          int v44 = "SEMICOLON";
        }
      }
      else
      {
        unsigned int v40 = v55;
        if (v43 == 33)
        {
          int v44 = "EXCL";
        }
        else
        {
          if (v43 != 44) {
            goto LABEL_42;
          }
          int v44 = "COMMA";
        }
      }
LABEL_44:
      uint64_t v45 = (char *)stringdup(a1, v44);
      int v34 = v41;
      __int16 __s = v45;
      if (!v45)
      {
        int v52 = " in fExtGetPunctFeats while allocating mem for punctMark feature.";
LABEL_71:
        NNFX_logMsg(a1, 0, (uint64_t)v52, v21, v22, v23, v24, v25);
        return 0;
      }
LABEL_45:
      if (v33 <= v34)
      {
        uint64_t v46 = 8 * v33;
        for (int i = v34 - v33 + 1; i; --i)
        {
          uint64_t v48 = heap_Alloc(*(void *)(a1 + 8), 16);
          if (!v48)
          {
            int v52 = " in fExtGetPunctFeats while allocating mem for stream 0 of parse group %d.";
            goto LABEL_71;
          }
          uint64_t v49 = (void *)v48;
          *(_DWORD *)(v48 + 8) = 3;
          if (__s)
          {
            int v50 = stringdup(a1, __s);
            *uint64_t v49 = v50;
            if (!v50)
            {
              int v52 = " in fExtGetPunctFeats copying punctuation mark feature.";
              goto LABEL_71;
            }
          }
          else
          {
            uint64_t v51 = stringdup(a1, "-");
            *uint64_t v49 = v51;
            if (!v51)
            {
              int v52 = " in fExtGetPunctFeats copying default punctuation mark feature.";
              goto LABEL_71;
            }
          }
          *(void *)(**(void **)v19 + v46) = v49;
          v46 += 8;
        }
      }
      unsigned int v30 = v40 + 1;
      uint64_t v29 = *(_DWORD **)(a5 + 32);
      int v31 = v56;
      if (v30 >= v29[1])
      {
        if (__s) {
          heap_Free(*(void **)(a1 + 8), (uint64_t)__s);
        }
        return v19;
      }
    }
  }
  return v19;
}

uint64_t **fExtGetPhone2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return fExtGetPhone2BdryFeats__(a1, a4, a5, a6, a7, 0, a7, a8);
}

uint64_t **fExtGetSyll2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Syllable-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  unint64_t v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 24;
    *(_DWORD *)(v21 + 4024) = a7;
    uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 192);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() allocating feature names";
      goto LABEL_60;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Syll2StrGrpLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Syll2StrGrpRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Syll2StrGrpLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Syll2StrGrpRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "Syll2WordLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "Syll2WordRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "Syll2WordLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "Syll2WordRCtFloat");
    v27[1][8] = (uint64_t)stringdup(a1, "Syll2StxGrpLCtInt");
    v27[1][9] = (uint64_t)stringdup(a1, "Syll2StxGrpRCtInt");
    v27[1][10] = (uint64_t)stringdup(a1, "Syll2StxGrpLCtFloat");
    v27[1][11] = (uint64_t)stringdup(a1, "Syll2StxGrpRCtFloat");
    v27[1][12] = (uint64_t)stringdup(a1, "Syll2PhraseLCtInt");
    v27[1][13] = (uint64_t)stringdup(a1, "Syll2PhraseRCtInt");
    v27[1][14] = (uint64_t)stringdup(a1, "Syll2PhraseLCtFloat");
    v27[1][15] = (uint64_t)stringdup(a1, "Syll2PhraseRCtFloat");
    v27[1][16] = (uint64_t)stringdup(a1, "Syll2PunctLCtInt");
    v27[1][17] = (uint64_t)stringdup(a1, "Syll2PunctRCtInt");
    v27[1][18] = (uint64_t)stringdup(a1, "Syll2PunctLCtFloat");
    v27[1][19] = (uint64_t)stringdup(a1, "Syll2PunctRCtFloat");
    v27[1][20] = (uint64_t)stringdup(a1, "Syll2SentLCtInt");
    v27[1][21] = (uint64_t)stringdup(a1, "Syll2SentRCtInt");
    v27[1][22] = (uint64_t)stringdup(a1, "Syll2SentLCtFloat");
    v27[1][23] = (uint64_t)stringdup(a1, "Syll2SentRCtFloat");
    int v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      uint64_t v35 = v27[1];
      uint64_t v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36) {
          goto LABEL_7;
        }
      }
      uint64_t v62 = " in fExtGetSyll2BdryFeats allocating feature stream names.";
      goto LABEL_60;
    }
LABEL_7:
    uint64_t v37 = heap_Alloc(*(void *)(a1 + 8), 8 * v34);
    void *v27 = (uint64_t *)v37;
    if (!v37)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_60;
    }
    uint64_t LeftCounts = getLeftCounts(a1, a5[1], a5[6]);
    *void *v27 = LeftCounts;
    if (!LeftCounts)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t RightCounts = getRightCounts(a1, a5[1], a5[6]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v42 = getLeftCounts(a1, a5[1], a5[2]);
    (*v27)[4] = v42;
    if (!v42)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-WORD-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v43 = getRightCounts(a1, a5[1], a5[2]);
    (*v27)[5] = v43;
    if (!v43)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-WORD-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-WORD-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-WORD-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v46 = getLeftCounts(a1, a5[1], a5[5]);
    (*v27)[8] = v46;
    if (!v46)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SYNTAX-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v47 = getRightCounts(a1, a5[1], a5[5]);
    (*v27)[9] = v47;
    if (!v47)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SYNTAX-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v48 = normalizeCounts(a1, (*v27)[8], (*v27)[9], a7, v30, v31, v32, v33);
    (*v27)[10] = v48;
    if (!v48)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v49 = normalizeCounts(a1, (*v27)[9], (*v27)[8], a7, v30, v31, v32, v33);
    (*v27)[11] = v49;
    if (!v49)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v50 = getLeftCounts(a1, a5[1], a5[3]);
    (*v27)[12] = v50;
    if (!v50)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PHRASE-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v51 = getRightCounts(a1, a5[1], a5[3]);
    (*v27)[13] = v51;
    if (!v51)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-PHRASE-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v52 = normalizeCounts(a1, (*v27)[12], (*v27)[13], a7, v30, v31, v32, v33);
    (*v27)[14] = v52;
    if (!v52)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v53 = normalizeCounts(a1, (*v27)[13], (*v27)[12], a7, v30, v31, v32, v33);
    (*v27)[15] = v53;
    if (!v53)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats creating RIGHT SYLL-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v54 = getLeftCounts(a1, a5[1], a5[4]);
    (*v27)[16] = v54;
    if (!v54)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PUNCT-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v55 = getRightCounts(a1, a5[1], a5[4]);
    (*v27)[17] = v55;
    if (!v55)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-PUNCT-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v56 = normalizeCounts(a1, (*v27)[16], (*v27)[17], a7, v30, v31, v32, v33);
    (*v27)[18] = v56;
    if (!v56)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v57 = normalizeCounts(a1, (*v27)[17], (*v27)[16], a7, v30, v31, v32, v33);
    (*v27)[19] = v57;
    if (!v57)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v58 = getLeftCounts(a1, a5[1], a5[7]);
    (*v27)[20] = v58;
    if (!v58)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SENT-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v59 = getRightCounts(a1, a5[1], a5[7]);
    (*v27)[21] = v59;
    if (!v59)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SENT-BDRY counts.";
      goto LABEL_60;
    }
    uint64_t v60 = normalizeCounts(a1, (*v27)[20], (*v27)[21], a7, v30, v31, v32, v33);
    (*v27)[22] = v60;
    if (!v60)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating LEFT SYLL-TO-SENT-BDRY norm-counts.";
      goto LABEL_60;
    }
    uint64_t v61 = normalizeCounts(a1, (*v27)[21], (*v27)[20], a7, v30, v31, v32, v33);
    (*v27)[23] = v61;
    if (!v61)
    {
      uint64_t v62 = " in fExtGetSyll2BdryFeats() creating RIGHT SYLL-TO-SENT-BDRY norm-counts.";
LABEL_60:
      NNFX_logMsg(a1, 0, (uint64_t)v62, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetSyll2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetStrGrp2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Stress-Group-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  unint64_t v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 8;
    *(_DWORD *)(v21 + 4024) = a7;
    uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 64);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() allocating feature names";
      goto LABEL_28;
    }
    *v27[1] = (uint64_t)stringdup(a1, "StrGrp2PhraseLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "StrGrp2PhraseRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "StrGrp2PhraseLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "StrGrp2PhraseRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "StrGrp2SentLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "StrGrp2SentRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "StrGrp2SentLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "StrGrp2SentRCtFloat");
    int v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      uint64_t v35 = v27[1];
      uint64_t v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36) {
          goto LABEL_7;
        }
      }
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats allocating feature stream names.";
      goto LABEL_28;
    }
LABEL_7:
    uint64_t v37 = heap_Alloc(*(void *)(a1 + 8), 8 * v34);
    void *v27 = (uint64_t *)v37;
    if (!v37)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_28;
    }
    uint64_t LeftCounts = getLeftCounts(a1, a5[6], a5[3]);
    *void *v27 = LeftCounts;
    if (!LeftCounts)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT STRGRP-TO-PHRASE-BDRY counts.";
      goto LABEL_28;
    }
    uint64_t RightCounts = getRightCounts(a1, a5[6], a5[3]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT STRGRP-TO-PHRASE-BDRY counts.";
      goto LABEL_28;
    }
    uint64_t v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT STRGRP-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_28;
    }
    uint64_t v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT STRGRP-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_28;
    }
    uint64_t v42 = getLeftCounts(a1, a5[6], a5[7]);
    (*v27)[4] = v42;
    if (!v42)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT STRGRP-TO-SENT-BDRY counts.";
      goto LABEL_28;
    }
    uint64_t v43 = getRightCounts(a1, a5[6], a5[7]);
    (*v27)[5] = v43;
    if (!v43)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT STRGRP-TO-SENT-BDRY counts.";
      goto LABEL_28;
    }
    uint64_t v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating LEFT SYLL-TO-SENT-BDRY norm-counts.";
      goto LABEL_28;
    }
    uint64_t v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      uint64_t v46 = " in fExtGetStrGrp2BdryFeats() creating RIGHT SYLL-TO-SENT-BDRY norm-counts.";
LABEL_28:
      NNFX_logMsg(a1, 0, (uint64_t)v46, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhone2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetWord2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Word-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  unint64_t v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 16;
    *(_DWORD *)(v21 + 4024) = a7;
    uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 128);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() allocating feature names";
      goto LABEL_44;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Word2StxGrpLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Word2StxGrpRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Word2StxGrpLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Word2StxGrpRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "Word2PhraseLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "Word2PhraseRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "Word2PhraseLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "Word2PhraseRCtFloat");
    v27[1][8] = (uint64_t)stringdup(a1, "Word2PunctLCtInt");
    v27[1][9] = (uint64_t)stringdup(a1, "Word2PunctRCtInt");
    v27[1][10] = (uint64_t)stringdup(a1, "Word2PunctLCtFloat");
    v27[1][11] = (uint64_t)stringdup(a1, "Word2PunctRCtFloat");
    v27[1][12] = (uint64_t)stringdup(a1, "Word2SentLCtInt");
    v27[1][13] = (uint64_t)stringdup(a1, "Word2SentRCtInt");
    v27[1][14] = (uint64_t)stringdup(a1, "Word2SentLCtFloat");
    v27[1][15] = (uint64_t)stringdup(a1, "Word2SentRCtFloat");
    int v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      uint64_t v35 = v27[1];
      uint64_t v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36) {
          goto LABEL_7;
        }
      }
      uint64_t v54 = " in fExtGetWord2BdryFeats allocating feature stream names.";
      goto LABEL_44;
    }
LABEL_7:
    uint64_t v37 = heap_Alloc(*(void *)(a1 + 8), 8 * v34);
    void *v27 = (uint64_t *)v37;
    if (!v37)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_44;
    }
    uint64_t LeftCounts = getLeftCounts(a1, a5[2], a5[5]);
    *void *v27 = LeftCounts;
    if (!LeftCounts)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SYNTAX-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t RightCounts = getRightCounts(a1, a5[2], a5[5]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SYNTAX-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_44;
    }
    uint64_t v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_44;
    }
    uint64_t v42 = getLeftCounts(a1, a5[2], a5[3]);
    (*v27)[4] = v42;
    if (!v42)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PHRASE-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t v43 = getRightCounts(a1, a5[2], a5[3]);
    (*v27)[5] = v43;
    if (!v43)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PHRASE-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_44;
    }
    uint64_t v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_44;
    }
    uint64_t v46 = getLeftCounts(a1, a5[2], a5[4]);
    (*v27)[8] = v46;
    if (!v46)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PUNCT-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t v47 = getRightCounts(a1, a5[2], a5[4]);
    (*v27)[9] = v47;
    if (!v47)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PUNCT-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t v48 = normalizeCounts(a1, (*v27)[8], (*v27)[9], a7, v30, v31, v32, v33);
    (*v27)[10] = v48;
    if (!v48)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_44;
    }
    uint64_t v49 = normalizeCounts(a1, (*v27)[9], (*v27)[8], a7, v30, v31, v32, v33);
    (*v27)[11] = v49;
    if (!v49)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_44;
    }
    uint64_t v50 = getLeftCounts(a1, a5[2], a5[7]);
    (*v27)[12] = v50;
    if (!v50)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SENT-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t v51 = getRightCounts(a1, a5[2], a5[7]);
    (*v27)[13] = v51;
    if (!v51)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SENT-BDRY counts.";
      goto LABEL_44;
    }
    uint64_t v52 = normalizeCounts(a1, (*v27)[12], (*v27)[13], a7, v30, v31, v32, v33);
    (*v27)[14] = v52;
    if (!v52)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating LEFT WORD-TO-SENT-BDRY norm-counts.";
      goto LABEL_44;
    }
    uint64_t v53 = normalizeCounts(a1, (*v27)[13], (*v27)[12], a7, v30, v31, v32, v33);
    (*v27)[15] = v53;
    if (!v53)
    {
      uint64_t v54 = " in fExtGetWord2BdryFeats() creating RIGHT WORD-TO-SENT-BDRY norm-counts.";
LABEL_44:
      NNFX_logMsg(a1, 0, (uint64_t)v54, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetWord2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetParse2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Syntax-Group-to-X boundary features...", a4, (uint64_t)a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  unint64_t v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 12;
    *(_DWORD *)(v21 + 4024) = a7;
    uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 96);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() allocating feature names";
      goto LABEL_36;
    }
    *v27[1] = (uint64_t)stringdup(a1, "StxGrp2PhraseLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "StxGrp2PhraseRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "StxGrp2PhraseLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "StxGrp2PhraseRCtFloat");
    v27[1][4] = (uint64_t)stringdup(a1, "StxGrp2PunctLCtInt");
    v27[1][5] = (uint64_t)stringdup(a1, "StxGrp2PunctRCtInt");
    v27[1][6] = (uint64_t)stringdup(a1, "StxGrp2PunctLCtFloat");
    v27[1][7] = (uint64_t)stringdup(a1, "StxGrp2PunctRCtFloat");
    v27[1][8] = (uint64_t)stringdup(a1, "StxGrp2SentLCtInt");
    v27[1][9] = (uint64_t)stringdup(a1, "StxGrp2SentRCtInt");
    v27[1][10] = (uint64_t)stringdup(a1, "StxGrp2SentLCtFloat");
    v27[1][11] = (uint64_t)stringdup(a1, "StxGrp2SentRCtFloat");
    int v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      uint64_t v35 = v27[1];
      uint64_t v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36) {
          goto LABEL_7;
        }
      }
      uint64_t v50 = " in fExtGetParse2BdryFeats allocating feature stream names.";
      goto LABEL_36;
    }
LABEL_7:
    uint64_t v37 = heap_Alloc(*(void *)(a1 + 8), 8 * v34);
    void *v27 = (uint64_t *)v37;
    if (!v37)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_36;
    }
    uint64_t LeftCounts = getLeftCounts(a1, a5[5], a5[3]);
    *void *v27 = LeftCounts;
    if (!LeftCounts)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PHRASE-BDRY counts.";
      goto LABEL_36;
    }
    uint64_t RightCounts = getRightCounts(a1, a5[5], a5[3]);
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PHRASE-BDRY counts.";
      goto LABEL_36;
    }
    uint64_t v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_36;
    }
    uint64_t v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_36;
    }
    uint64_t v42 = getLeftCounts(a1, a5[5], a5[4]);
    (*v27)[4] = v42;
    if (!v42)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PUNCT-BDRY counts.";
      goto LABEL_36;
    }
    uint64_t v43 = getRightCounts(a1, a5[5], a5[4]);
    (*v27)[5] = v43;
    if (!v43)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PUNCT-BDRY counts.";
      goto LABEL_36;
    }
    uint64_t v44 = normalizeCounts(a1, (*v27)[4], (*v27)[5], a7, v30, v31, v32, v33);
    (*v27)[6] = v44;
    if (!v44)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_36;
    }
    uint64_t v45 = normalizeCounts(a1, (*v27)[5], (*v27)[4], a7, v30, v31, v32, v33);
    (*v27)[7] = v45;
    if (!v45)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_36;
    }
    uint64_t v46 = getLeftCounts(a1, a5[5], a5[7]);
    (*v27)[8] = v46;
    if (!v46)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_36;
    }
    uint64_t v47 = getRightCounts(a1, a5[5], a5[7]);
    (*v27)[9] = v47;
    if (!v47)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_36;
    }
    uint64_t v48 = normalizeCounts(a1, (*v27)[8], (*v27)[9], a7, v30, v31, v32, v33);
    (*v27)[10] = v48;
    if (!v48)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating LEFT PARSE-NODE-TO-SENT-BDRY norm-counts.";
      goto LABEL_36;
    }
    uint64_t v49 = normalizeCounts(a1, (*v27)[9], (*v27)[8], a7, v30, v31, v32, v33);
    (*v27)[11] = v49;
    if (!v49)
    {
      uint64_t v50 = " in fExtGetParse2BdryFeats() creating RIGHT PARSE-NODE-TO-SENT-BDRY norm-counts.";
LABEL_36:
      NNFX_logMsg(a1, 0, (uint64_t)v50, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetParse2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetPhrase2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Phrase-to-X boundary features...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  unint64_t v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 4;
    *(_DWORD *)(v21 + 4024) = a7;
    uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 32);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      uint64_t v42 = " in fExtGetPhrase2BdryFeats() allocating feature names";
      goto LABEL_20;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Phrase2SentLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Phrase2SentRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Phrase2SentLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Phrase2SentRCtFloat");
    int v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      uint64_t v35 = v27[1];
      uint64_t v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36) {
          goto LABEL_7;
        }
      }
      uint64_t v42 = " in fExtGetPhrase2BdryFeats allocating feature stream names.";
      goto LABEL_20;
    }
LABEL_7:
    uint64_t v37 = heap_Alloc(*(void *)(a1 + 8), 8 * v34);
    void *v27 = (uint64_t *)v37;
    if (!v37)
    {
      uint64_t v42 = " in fExtGetPhrase2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_20;
    }
    uint64_t LeftCounts = getLeftCounts(a1, *(unsigned int **)(a5 + 24), *(_DWORD **)(a5 + 56));
    *void *v27 = LeftCounts;
    if (!LeftCounts)
    {
      uint64_t v42 = " in fExtGetPhrase2BdryFeats() creating LEFT PHRASE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    uint64_t RightCounts = getRightCounts(a1, *(unsigned int **)(a5 + 24), *(unsigned int **)(a5 + 56));
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      uint64_t v42 = " in fExtGetPhrase2BdryFeats() creating RIGHT PHRASE-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    uint64_t v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      uint64_t v42 = " in fExtGetPhrase2BdryFeats() creating LEFT PHRASE-NODE-TO-SENT-BDRY norm-counts.";
      goto LABEL_20;
    }
    uint64_t v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      uint64_t v42 = " in fExtGetPhrase2BdryFeats() creating RIGHT PHRASE-NODE-TO-SENT-BDRY norm-counts.";
LABEL_20:
      NNFX_logMsg(a1, 0, (uint64_t)v42, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetParse2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetPunct2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting Punctuation-to-X boundary features...", a4, a5, a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v11, v12, v13, v14, v15);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v16, v17, v18, v19, v20);
  uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  unint64_t v27 = (uint64_t **)v21;
  if (v21)
  {
    *(_DWORD *)(v21 + 4016) = 4;
    *(_DWORD *)(v21 + 4024) = a7;
    uint64_t v28 = heap_Alloc(*(void *)(a1 + 8), 32);
    v27[1] = (uint64_t *)v28;
    if (!v28)
    {
      uint64_t v42 = " in fExtGetLexicalFeats() allocating feature names";
      goto LABEL_20;
    }
    *v27[1] = (uint64_t)stringdup(a1, "Punct2SentLCtInt");
    v27[1][1] = (uint64_t)stringdup(a1, "Punct2SentRCtInt");
    v27[1][2] = (uint64_t)stringdup(a1, "Punct2SentLCtFloat");
    v27[1][3] = (uint64_t)stringdup(a1, "Punct2SentRCtFloat");
    int v34 = *((_DWORD *)v27 + 1004);
    if (v34 >= 1)
    {
      uint64_t v35 = v27[1];
      uint64_t v36 = *((unsigned int *)v27 + 1004);
      while (*v35)
      {
        ++v35;
        if (!--v36) {
          goto LABEL_7;
        }
      }
      uint64_t v42 = " in fExtGetPunct2BdryFeats allocating feature stream names.";
      goto LABEL_20;
    }
LABEL_7:
    uint64_t v37 = heap_Alloc(*(void *)(a1 + 8), 8 * v34);
    void *v27 = (uint64_t *)v37;
    if (!v37)
    {
      uint64_t v42 = " in fExtGetLexicalFeats() trying to malloc-ate feature array.";
      goto LABEL_20;
    }
    uint64_t LeftCounts = getLeftCounts(a1, *(unsigned int **)(a5 + 32), *(_DWORD **)(a5 + 56));
    *void *v27 = LeftCounts;
    if (!LeftCounts)
    {
      uint64_t v42 = " in fExtGetPunct2BdryFeats creating LEFT PUNCT-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    uint64_t RightCounts = getRightCounts(a1, *(unsigned int **)(a5 + 32), *(unsigned int **)(a5 + 56));
    (*v27)[1] = RightCounts;
    if (!RightCounts)
    {
      uint64_t v42 = " in fExtGetPunct2BdryFeats creating RIGHT PUNCT-NODE-TO-SENT-BDRY counts.";
      goto LABEL_20;
    }
    uint64_t v40 = normalizeCounts(a1, **v27, (*v27)[1], a7, v30, v31, v32, v33);
    (*v27)[2] = v40;
    if (!v40)
    {
      uint64_t v42 = " in fExtGetPunct2BdryFeats creating LEFT PUNCT-NODE-TO-SENT-BDRY norm-counts.";
      goto LABEL_20;
    }
    uint64_t v41 = normalizeCounts(a1, (*v27)[1], **v27, a7, v30, v31, v32, v33);
    (*v27)[3] = v41;
    if (!v41)
    {
      uint64_t v42 = " in fExtGetPunct2BdryFeats creating RIGHT PUNCT-NODE-TO-SENT-BDRY norm-counts.";
LABEL_20:
      NNFX_logMsg(a1, 0, (uint64_t)v42, v29, v30, v31, v32, v33);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPunct2BdryFeats() trying to mallocate output.", v22, v23, v24, v25, v26);
  }
  return v27;
}

uint64_t **fExtGetVPhone2BdryFeats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = fExtGetPhone2BdryFeats__(a1, a4, a5, a6, a7, PhoneTierIsVoiced, a7, a8);
  if (result && *((int *)result + 1004) >= 1)
  {
    int v9 = result[1];
    do
    {
      BOOL v10 = (unsigned char *)*v9++;
      unsigned char *v10 = 86;
    }
    while (v9 < &result[1][*((int *)result + 1004)]);
  }
  return result;
}

uint64_t mergePhoneFeaturesAtStateLevel(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(unsigned int *)(*a2 + 4024);
  long long v58 = xmmword_2206E1B5A;
  v59[0] = unk_2206E1B6A;
  *(_OWORD *)((char *)v59 + 13) = unk_2206E1B77;
  if (a4 > 9)
  {
    BOOL v10 = " in mergePhoneFeaturesAtStateLevel(). More than 9 states per phone  used";
    goto LABEL_39;
  }
  unsigned int v11 = a4;
  if (a3 >= 2)
  {
    for (uint64_t i = 1; i != a3; ++i)
    {
      if (*(_DWORD *)(a2[i] + 4024) != v9)
      {
        BOOL v10 = " in mergePhoneFeaturesAtStateLevel(). Record 0 of length %d cannot be merged with record %d of length %d";
        goto LABEL_39;
      }
    }
  }
  if (a3)
  {
    int v15 = 0;
    uint64_t v16 = a3;
    uint64_t v17 = a2;
    do
    {
      uint64_t v18 = *v17++;
      v15 += *(_DWORD *)(v18 + 4016);
      --v16;
    }
    while (v16);
    int v19 = v15 + 1;
  }
  else
  {
    int v19 = 1;
  }
  uint64_t v20 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  uint64_t v26 = v20;
  if (v20)
  {
    *(_DWORD *)(v20 + 4016) = v19;
    *(_DWORD *)(v20 + 4024) = v9 * v11;
    if (v19
      && ((uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), v19, 8), (*(void *)(v26 + 8) = v27) == 0)
       || (uint64_t v28 = heap_Calloc(*(void **)(a1 + 8), *(int *)(v26 + 4016), 4), (*(void *)(v26 + 4040) = v28) == 0))
      || (**(void **)(v26 + 8) = stringdup(a1, "StateID")) == 0)
    {
      BOOL v10 = " in mergePhoneFeaturesAtStateLevel() allocating feature names";
      goto LABEL_39;
    }
    if (a3)
    {
      uint64_t v29 = 0;
      int v30 = 1;
      do
      {
        uint64_t v31 = a2[v29];
        int v32 = *(_DWORD *)(v31 + 4016);
        if (*(void *)(v31 + 4040))
        {
          if (v32) {
            goto LABEL_21;
          }
        }
        else if (v32)
        {
          uint64_t v37 = heap_Calloc(*(void **)(a1 + 8), v32, 4);
          *(void *)(a2[v29] + 4040) = v37;
          if (!v37)
          {
            BOOL v10 = " in mergePhoneFeaturesAtStateLevel() allocating array";
            goto LABEL_39;
          }
          uint64_t v31 = a2[v29];
          if (*(_DWORD *)(v31 + 4016))
          {
            unint64_t v38 = 0;
            uint64_t v39 = *(void *)(v31 + 4040);
            do
            {
              *(_DWORD *)(v39 + 4 * v38++) = 1;
              unint64_t v40 = *(unsigned int *)(v31 + 4016);
            }
            while (v38 < v40);
            if (v40)
            {
LABEL_21:
              unint64_t v33 = 0;
              do
              {
                uint64_t v34 = (v30 + v33);
                *(void *)(*(void *)(v26 + 8) + 8 * v34) = *(void *)(*(void *)(v31 + 8) + 8 * v33);
                uint64_t v31 = a2[v29];
                uint64_t v35 = *(void *)(v31 + 4040);
                if (v35) {
                  int v36 = *(_DWORD *)(v35 + 4 * v33);
                }
                else {
                  int v36 = 1;
                }
                *(_DWORD *)(*(void *)(v26 + 4040) + 4 * v34) = v36;
                *(_DWORD *)(v35 + 4 * v33++) = 0;
              }
              while (v33 < *(unsigned int *)(v31 + 4016));
              v30 += v33;
            }
          }
        }
        ++v29;
      }
      while (v29 != a3);
    }
    if (allocpppFeats(a1, (uint64_t *)v26, *(_DWORD *)(v26 + 4016), *(_DWORD *)(v26 + 4024)))
    {
      BOOL v10 = " in mergePhoneFeatures() trying to malloc-ate output.";
      goto LABEL_39;
    }
    if (v9)
    {
      uint64_t v42 = 0;
      int v43 = 0;
      while (1)
      {
        int v57 = v43;
        if (v11) {
          break;
        }
        uint64_t v49 = v42;
LABEL_50:
        int v43 = v57 + 1;
        uint64_t v42 = v49;
        if (v57 + 1 == v9) {
          goto LABEL_51;
        }
      }
      uint64_t v44 = (const char *)&v58;
      uint64_t v45 = v11;
      while (1)
      {
        uint64_t v46 = heap_Alloc(*(void *)(a1 + 8), 16);
        if (!v46) {
          break;
        }
        uint64_t v47 = (void *)v46;
        *(_DWORD *)(v46 + 8) = 3;
        uint64_t v48 = (char *)heap_Alloc(*(void *)(a1 + 8), 5);
        void *v47 = v48;
        if (!v48) {
          break;
        }
        cstdlib_strcpy(v48, v44);
        uint64_t v49 = (v42 + 1);
        *(void *)(**(void **)v26 + 8 * v42) = v47;
        v44 += 5;
        LODWORD(v42) = v42 + 1;
        if (!--v45) {
          goto LABEL_50;
        }
      }
      BOOL v10 = " in mergePhoneFeatures() while allocating mem for stream state ID.";
LABEL_39:
      NNFX_logMsg(a1, 0, (uint64_t)v10, a4, a5, a6, a7, a8);
      return 0;
    }
    else
    {
LABEL_51:
      if (a3)
      {
        uint64_t v50 = 0;
        unsigned int v51 = 1;
        do
        {
          uint64_t v52 = a2[v50];
          if (*(_DWORD *)(v52 + 4016))
          {
            unint64_t v53 = 0;
            do
            {
              if (v9)
              {
                int v54 = 0;
                for (uint64_t j = 0; j != v9; ++j)
                {
                  if (v11)
                  {
                    for (int k = 0; k != v11; ++k)
                      *(void *)(*(void *)(*(void *)v26 + 8 * v51) + 8 * (v54 + k)) = *(void *)(*(void *)(*(void *)a2[v50] + 8 * v53) + 8 * j);
                  }
                  v54 += v11;
                }
                uint64_t v52 = a2[v50];
              }
              ++v51;
              ++v53;
            }
            while (v53 < *(unsigned int *)(v52 + 4016));
          }
          ++v50;
        }
        while (v50 != a3);
      }
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in mergePhoneFeaturesAtStateLevel() trying to mallocate output.", v21, v22, v23, v24, v25);
  }
  return v26;
}

void *freepPhoneTiers(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    freepTier(a1, v4);
    *a2 = 0;
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    freepTier(a1, v5);
    a2[1] = 0;
  }
  uint64_t v6 = a2[2];
  if (v6)
  {
    freepTier(a1, v6);
    a2[2] = 0;
  }
  uint64_t v7 = a2[3];
  if (v7)
  {
    freepTier(a1, v7);
    a2[3] = 0;
  }
  uint64_t v8 = a2[4];
  if (v8)
  {
    freepTier(a1, v8);
    a2[4] = 0;
  }
  uint64_t v9 = a2[5];
  if (v9)
  {
    freepTier(a1, v9);
    a2[5] = 0;
  }
  uint64_t v10 = a2[6];
  if (v10)
  {
    freepTier(a1, v10);
    a2[6] = 0;
  }
  uint64_t v11 = a2[7];
  if (v11)
  {
    freepTier(a1, v11);
    a2[7] = 0;
  }
  uint64_t v12 = a2[8];
  if (v12)
  {
    freepTier(a1, v12);
    a2[8] = 0;
  }
  uint64_t v13 = *(void **)(a1 + 8);

  return heap_Free(v13, (uint64_t)a2);
}

BOOL check_phn_class(uint64_t a1, int a2, int __c)
{
  if (a2 == -1) {
    return 0;
  }
  uint64_t v3 = *(char ***)(a1 + 16 * a2 + 8);
  return v3 && cstdlib_strchr(*v3, __c) != 0;
}

uint64_t check_lex_feat(uint64_t a1, char *__s1, int a3)
{
  if (a3 == -1) {
    return 0;
  }
  uint64_t v3 = a1 + 16 * a3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = (void *)(v3 + 8);
  if (v5)
  {
    for (uint64_t i = 0; i != 4000; i += 8)
    {
      uint64_t v8 = *(const char **)(*v4 + i);
      if (!v8) {
        break;
      }
      if (!cstdlib_strcmp(__s1, v8)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t **fExtGetPhone2BdryFeats__(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, BOOL (*a6)(int a1), uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *a3;
  NNFX_logMsg(a1, 3, (uint64_t)"Extracting %s-to-X boundary features", a4, a5, (uint64_t)a6, a7, a8);
  NNFX_logMsg(a1, 3, (uint64_t)"Num pros words: %d", v13, v14, v15, v16, v17);
  NNFX_logMsg(a1, 3, (uint64_t)"First boundary: %c", v18, v19, v20, v21, v22);
  uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), 1, 4048);
  uint64_t v29 = (uint64_t **)v23;
  if (v23)
  {
    *(_DWORD *)(v23 + 4016) = 28;
    *(_DWORD *)(v23 + 4024) = a5;
    uint64_t v30 = heap_Alloc(*(void *)(a1 + 8), 224);
    v29[1] = (uint64_t *)v30;
    if (!v30)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() allocating feature names";
      goto LABEL_68;
    }
    *v29[1] = (uint64_t)stringdup(a1, "Phone2SyllLCtInt");
    v29[1][1] = (uint64_t)stringdup(a1, "Phone2SyllRCtInt");
    v29[1][2] = (uint64_t)stringdup(a1, "Phone2SyllLCtFloat");
    v29[1][3] = (uint64_t)stringdup(a1, "Phone2SyllRCtFloat");
    v29[1][4] = (uint64_t)stringdup(a1, "Phone2StrGrpLCtInt");
    v29[1][5] = (uint64_t)stringdup(a1, "Phone2StrGrpRCtInt");
    v29[1][6] = (uint64_t)stringdup(a1, "Phone2StrGrpLCtFloat");
    v29[1][7] = (uint64_t)stringdup(a1, "Phone2StrGrpRCtFloat");
    v29[1][8] = (uint64_t)stringdup(a1, "Phone2WordLCtInt");
    v29[1][9] = (uint64_t)stringdup(a1, "Phone2WordRCtInt");
    v29[1][10] = (uint64_t)stringdup(a1, "Phone2WordLCtFloat");
    v29[1][11] = (uint64_t)stringdup(a1, "Phone2WordRCtFloat");
    v29[1][12] = (uint64_t)stringdup(a1, "Phone2StxGrpLCtInt");
    v29[1][13] = (uint64_t)stringdup(a1, "Phone2StxGrpRCtInt");
    v29[1][14] = (uint64_t)stringdup(a1, "Phone2StxGrpLCtFloat");
    v29[1][15] = (uint64_t)stringdup(a1, "Phone2StxGrpRCtFloat");
    v29[1][16] = (uint64_t)stringdup(a1, "Phone2PhraseLCtInt");
    v29[1][17] = (uint64_t)stringdup(a1, "Phone2PhraseRCtInt");
    v29[1][18] = (uint64_t)stringdup(a1, "Phone2PhraseLCtFloat");
    v29[1][19] = (uint64_t)stringdup(a1, "Phone2PhraseRCtFloat");
    v29[1][20] = (uint64_t)stringdup(a1, "Phone2PunctLCtInt");
    v29[1][21] = (uint64_t)stringdup(a1, "Phone2PunctRCtInt");
    v29[1][22] = (uint64_t)stringdup(a1, "Phone2PunctLCtFloat");
    v29[1][23] = (uint64_t)stringdup(a1, "Phone2PunctRCtFloat");
    v29[1][24] = (uint64_t)stringdup(a1, "Phone2SentLCtInt");
    v29[1][25] = (uint64_t)stringdup(a1, "Phone2SentRCtInt");
    v29[1][26] = (uint64_t)stringdup(a1, "Phone2SentLCtFloat");
    v29[1][27] = (uint64_t)stringdup(a1, "Phone2SentRCtFloat");
    int v36 = *((_DWORD *)v29 + 1004);
    if (v36 >= 1)
    {
      uint64_t v37 = v29[1];
      uint64_t v38 = *((unsigned int *)v29 + 1004);
      while (*v37)
      {
        ++v37;
        if (!--v38) {
          goto LABEL_7;
        }
      }
      uint64_t v68 = " in fExtGetPhone2BdryFeats__ allocating feature stream names.";
      goto LABEL_68;
    }
LABEL_7:
    uint64_t v39 = heap_Alloc(*(void *)(a1 + 8), 8 * v36);
    _DWORD *v29 = (uint64_t *)v39;
    if (!v39)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() trying to malloc-ate feature array.";
      goto LABEL_68;
    }
    uint64_t LeftCounts = getLeftCounts_(a1, v12, a3[1], a6);
    *_DWORD *v29 = LeftCounts;
    if (!LeftCounts)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYLL-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t RightCounts = getRightCounts_(a1, v12, a3[1], a6);
    (*v29)[1] = RightCounts;
    if (!RightCounts)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYLL-BDRY     counts.";
      goto LABEL_68;
    }
    uint64_t v42 = normalizeCounts(a1, **v29, (*v29)[1], a5, v32, v33, v34, v35);
    (*v29)[2] = v42;
    if (!v42)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYLL-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v43 = normalizeCounts(a1, (*v29)[1], **v29, a5, v32, v33, v34, v35);
    (*v29)[3] = v43;
    if (!v43)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYLL-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v44 = getLeftCounts_(a1, v12, a3[6], a6);
    (*v29)[4] = v44;
    if (!v44)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v45 = getRightCounts_(a1, v12, a3[6], a6);
    (*v29)[5] = v45;
    if (!v45)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v46 = normalizeCounts(a1, (*v29)[4], (*v29)[5], a5, v32, v33, v34, v35);
    (*v29)[6] = v46;
    if (!v46)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v47 = normalizeCounts(a1, (*v29)[5], (*v29)[4], a5, v32, v33, v34, v35);
    (*v29)[7] = v47;
    if (!v47)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-STRGRP-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v48 = getLeftCounts_(a1, v12, a3[2], a6);
    (*v29)[8] = v48;
    if (!v48)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-WORD-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v49 = getRightCounts_(a1, v12, a3[2], a6);
    (*v29)[9] = v49;
    if (!v49)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-WORD-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v50 = normalizeCounts(a1, (*v29)[8], (*v29)[9], a5, v32, v33, v34, v35);
    (*v29)[10] = v50;
    if (!v50)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-WORD-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v51 = normalizeCounts(a1, (*v29)[9], (*v29)[8], a5, v32, v33, v34, v35);
    (*v29)[11] = v51;
    if (!v51)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-WORD-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v52 = getLeftCounts_(a1, v12, a3[5], a6);
    (*v29)[12] = v52;
    if (!v52)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYNTAX-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v53 = getRightCounts_(a1, v12, a3[5], a6);
    (*v29)[13] = v53;
    if (!v53)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYNTAX-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v54 = normalizeCounts(a1, (*v29)[12], (*v29)[13], a5, v32, v33, v34, v35);
    (*v29)[14] = v54;
    if (!v54)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v55 = normalizeCounts(a1, (*v29)[13], (*v29)[12], a5, v32, v33, v34, v35);
    (*v29)[15] = v55;
    if (!v55)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SYNTAX-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v56 = getLeftCounts_(a1, v12, a3[3], a6);
    (*v29)[16] = v56;
    if (!v56)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PHRASE-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v57 = getRightCounts_(a1, v12, a3[3], a6);
    (*v29)[17] = v57;
    if (!v57)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PHRASE-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v58 = normalizeCounts(a1, (*v29)[16], (*v29)[17], a5, v32, v33, v34, v35);
    (*v29)[18] = v58;
    if (!v58)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v59 = normalizeCounts(a1, (*v29)[17], (*v29)[16], a5, v32, v33, v34, v35);
    (*v29)[19] = v59;
    if (!v59)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PHRASE-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v60 = getLeftCounts_(a1, v12, a3[4], a6);
    (*v29)[20] = v60;
    if (!v60)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PUNCT-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v61 = getRightCounts_(a1, v12, a3[4], a6);
    (*v29)[21] = v61;
    if (!v61)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PUNCT-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v62 = normalizeCounts(a1, (*v29)[20], (*v29)[21], a5, v32, v33, v34, v35);
    (*v29)[22] = v62;
    if (!v62)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v63 = normalizeCounts(a1, (*v29)[21], (*v29)[20], a5, v32, v33, v34, v35);
    (*v29)[23] = v63;
    if (!v63)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-PUNCT-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v64 = getLeftCounts_(a1, v12, a3[7], a6);
    (*v29)[24] = v64;
    if (!v64)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SENT-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v65 = getRightCounts_(a1, v12, a3[7], a6);
    (*v29)[25] = v65;
    if (!v65)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SENT-BDRY counts.";
      goto LABEL_68;
    }
    uint64_t v66 = normalizeCounts(a1, (*v29)[24], (*v29)[25], a5, v32, v33, v34, v35);
    (*v29)[26] = v66;
    if (!v66)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating LEFT PHONE-TO-SENT-BDRY norm-counts.";
      goto LABEL_68;
    }
    uint64_t v67 = normalizeCounts(a1, (*v29)[25], (*v29)[24], a5, v32, v33, v34, v35);
    (*v29)[27] = v67;
    if (!v67)
    {
      uint64_t v68 = " in fExtGetPhone2BdryFeats() creating RIGHT PHONE-TO-SENT-BDRY norm-counts.";
LABEL_68:
      NNFX_logMsg(a1, 0, (uint64_t)v68, v31, v32, v33, v34, v35);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)" in fExtGetPhone2BdryFeats() trying to mallocate output.", v24, v25, v26, v27, v28);
  }
  return v29;
}

BOOL PhoneTierIsVoiced(int a1)
{
  return a1 == 2;
}

uint64_t BuildSilencePhT(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v13 = heap_Alloc(*(void *)(a1 + 8), 24);
  if (!v13)
  {
    NNFX_logMsg(a1, 0, (uint64_t)" allocating memory in BuildSilencePhT.", v8, v9, v10, v11, v12);
    return v13;
  }
  if (TierInit(a1, (int *)v13, a4, "Phone-level SILENCE tier"))
  {
    uint64_t v19 = " allocating mem in BuildSilencePhT to hold boundaries.";
LABEL_4:
    uint64_t v20 = a1;
    int v21 = 0;
LABEL_5:
    NNFX_logMsg(v20, v21, (uint64_t)v19, v14, v15, v16, v17, v18);
    return 0;
  }
  uint64_t v23 = heap_Alloc(*(void *)(a1 + 8), 2 * a3);
  int v21 = v23;
  if (!v23)
  {
    uint64_t v19 = " allocating memory in BuildSilencePh().";
    uint64_t v20 = a1;
    goto LABEL_5;
  }
  uint64_t v24 = a3 - 1;
  if (a3 == 1)
  {
    __int16 v29 = 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 8);
    uint64_t v26 = a3 - 1;
    uint64_t v27 = (_WORD *)v23;
    do
    {
      uint64_t v28 = *v25++;
      *v27++ = *(_DWORD *)(v28 + 192) == 1;
      --v26;
    }
    while (v26);
    *(_WORD *)(v23 + 2 * v24) = 1;
    if (a3 < 2 || !*(_DWORD *)(*(void *)(a2 + 8 * v24) + 192))
    {
      if (!a3) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    __int16 v29 = 0;
    uint64_t v24 = a3 - 2;
  }
  *(_WORD *)(v23 + 2 * v24) = v29;
LABEL_19:
  uint64_t v30 = 0;
  unsigned int v31 = 0;
  uint64_t v32 = a3;
  uint64_t v33 = *(void *)(v13 + 8);
  do
  {
    int v34 = *(_DWORD *)(*(void *)(a2 + 8 * v30) + 144) - 1;
    if (*(_DWORD *)(*(void *)(a2 + 8 * v30) + 144) != 1)
    {
      unsigned int v35 = v34 + v31;
      do
      {
        *(_WORD *)(v33 + 2 * v31++) = 0;
        --v34;
      }
      while (v34);
      unsigned int v31 = v35;
    }
    a3 = v31 + 1;
    *(_WORD *)(v33 + 2 * v31++) = *(_WORD *)(v23 + 2 * v30++);
  }
  while (v30 != v32);
LABEL_25:
  heap_Free(*(void **)(a1 + 8), v23);
  if (a3 != a4)
  {
    uint64_t v19 = ": %d phones processed, but total %d phones expected in BuildStressGroupPhT.";
    goto LABEL_4;
  }
  int v36 = 0;
  if (a4)
  {
    uint64_t v37 = *(unsigned __int16 **)(v13 + 8);
    uint64_t v38 = a4;
    do
    {
      if (*v37++) {
        ++v36;
      }
      --v38;
    }
    while (v38);
  }
  *(_DWORD *)(v13 + 4) = v36;
  return v13;
}

uint64_t allocpppFeats(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = a3;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a3, 8);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    *a2 = v9;
    if (!a3) {
      return 0;
    }
    unint64_t v11 = v9 + 8 * v8;
    while (1)
    {
      uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), a4, 8);
      void *v10 = v12;
      if (!v12) {
        break;
      }
      if ((unint64_t)++v10 >= v11) {
        return 0;
      }
    }
    freepppFeats((void *)a1, *a2, a3, a4);
  }
  return 1;
}

void *freepppFeats(void *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (a2)
  {
    uint64_t v5 = result;
    if (a3)
    {
      uint64_t v7 = a3;
      uint64_t v8 = (uint64_t *)a2;
      do
      {
        freeppFeats(v5, *v8, a4, 1);
        *v8++ = 0;
        --v7;
      }
      while (v7);
    }
    uint64_t v9 = (void *)v5[1];
    return heap_Free(v9, a2);
  }
  return result;
}

void *freeppFeats(void *result, uint64_t a2, unsigned int a3, int a4)
{
  if (a2)
  {
    uint64_t v5 = result;
    if (a3)
    {
      uint64_t v7 = a3;
      uint64_t v8 = (uint64_t *)a2;
      do
      {
        if (a4 && *v8)
        {
          freepFeat(v5, *v8);
          *uint64_t v8 = 0;
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    uint64_t v9 = (void *)v5[1];
    return heap_Free(v9, a2);
  }
  return result;
}

void *freepFeat(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(a2 + 8) == 3)
    {
      uint64_t v4 = *(void *)a2;
      if (*(void *)a2)
      {
        heap_Free((void *)result[1], v4);
        *(void *)a2 = 0;
      }
    }
    uint64_t v5 = (void *)v3[1];
    return heap_Free(v5, a2);
  }
  return result;
}

void *freepTier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    heap_Free(*(void **)(a1 + 8), v4);
    *(void *)(a2 + 16) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    heap_Free(*(void **)(a1 + 8), v5);
    *(void *)(a2 + 8) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 8);

  return heap_Free(v6, a2);
}

void *TrieIntInit(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  return result;
}

void *TrieIntFree(void *result, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 8))
  {
    uint64_t v3 = result;
    for (uint64_t i = 0; i != 2048; i += 8)
    {
      TrieIntFree(v3, *(void *)(*(void *)(a2 + 8) + i));
      heap_Free((void *)v3[1], *(void *)(*(void *)(a2 + 8) + i));
    }
    uint64_t result = heap_Free((void *)v3[1], *(void *)(a2 + 8));
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t TrieSet(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = *(void *)(a2 + 8);
  if (result || (uint64_t result = heap_Calloc(*(void **)(a1 + 8), 256, 8), (*(void *)(a2 + 8) = result) != 0))
  {
    uint64_t result = *(void *)(result + 8 * a3);
    if (!result)
    {
      *(void *)(*(void *)(a2 + 8) + 8 * a3) = heap_Alloc(*(void *)(a1 + 8), 16);
      uint64_t v7 = *(void **)(*(void *)(a2 + 8) + 8 * a3);
      if (v7)
      {
        void *v7 = 0;
        v7[1] = 0;
        return *(void *)(*(void *)(a2 + 8) + 8 * a3);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t TrieIntAdd_(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, int a4, int a5)
{
  unsigned __int8 v5 = *a3;
  if (!*a3) {
    return 1;
  }
  uint64_t v7 = a2;
  if (a4)
  {
    int v9 = a4 - 1;
    for (uint64_t i = a3 + 1; ; ++i)
    {
      if (v5)
      {
        a2 = (_DWORD *)TrieSet(a1, (uint64_t)a2, v5);
        if (!a2) {
          break;
        }
      }
      if (!v9) {
        goto LABEL_9;
      }
      unsigned __int8 v11 = *i;
      unsigned __int8 v5 = v11;
      --v9;
    }
    return 1;
  }
LABEL_9:
  uint64_t result = 0;
  *a2 = -1;
  a2[1] = a5;
  ++*v7;
  return result;
}

uint64_t TrieIntAdd(uint64_t a1, _DWORD *a2, char *__s, int a4)
{
  int v8 = cstdlib_strlen(__s);

  return TrieIntAdd_(a1, a2, (unsigned __int8 *)__s, v8, a4);
}

BOOL TrieIntGet_(uint64_t a1, unsigned char *a2, int a3, _DWORD *a4)
{
  if (a3)
  {
    while (1)
    {
      if (*a2)
      {
        if (!a1) {
          return 1;
        }
        uint64_t v4 = *(void *)(a1 + 8);
        if (!v4) {
          return 1;
        }
        a1 = *(void *)(v4 + 8 * *a2);
        if (!a1) {
          return 1;
        }
      }
      ++a2;
      if (!--a3) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    *a4 = *(_DWORD *)(a1 + 4);
    return *(_DWORD *)a1 != -1;
  }
}

BOOL TrieIntGet(uint64_t a1, char *__s, _DWORD *a3)
{
  int v6 = cstdlib_strlen(__s);

  return TrieIntGet_(a1, __s, v6, a3);
}

uint64_t TrieIntSize(unsigned int *a1)
{
  return *a1;
}

void *TierClear(void *result, void *a2)
{
  uint64_t v3 = result;
  *a2 = 0;
  uint64_t v4 = a2[1];
  if (v4) {
    uint64_t result = heap_Free((void *)result[1], v4);
  }
  a2[1] = 0;
  uint64_t v5 = a2[2];
  if (v5) {
    uint64_t result = heap_Free((void *)v3[1], v5);
  }
  a2[2] = 0;
  return result;
}

uint64_t TierInit(uint64_t a1, int *__b, int a3, char *a4)
{
  cstdlib_memset(__b, 0, 0x18uLL);
  TierClear((void *)a1, __b);
  if (a4) {
    *((void *)__b + 2) = stringdup(a1, a4);
  }
  if (a3 < 1) {
    return 0;
  }
  *uint64_t __b = a3;
  *((void *)__b + 1) = 0;
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), a3, 2);
  *((void *)__b + 1) = v8;
  if (!v8) {
    return 1;
  }
  uint64_t v9 = *__b - 1;
  if (!*(_WORD *)(v8 + 2 * v9)) {
    ++__b[1];
  }
  uint64_t v10 = 0;
  *(_WORD *)(v8 + 2 * v9) = 1;
  return v10;
}

uint64_t TierAddBoundary(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (!*(_WORD *)(v2 + 2 * a2)) {
    ++*(_DWORD *)(result + 4);
  }
  *(_WORD *)(v2 + 2 * a2) = 1;
  return result;
}

uint64_t TierSetBoundary(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (a3 && !*(_WORD *)(v3 + 2 * a2))
  {
    int v4 = 1;
LABEL_7:
    *(_DWORD *)(result + 4) += v4;
    goto LABEL_8;
  }
  if (!a3 && *(_WORD *)(v3 + 2 * a2))
  {
    int v4 = -1;
    goto LABEL_7;
  }
LABEL_8:
  *(_WORD *)(v3 + 2 * a2) = a3;
  return result;
}

uint64_t TierNumItems(_DWORD *a1)
{
  if (*a1) {
    return a1[1];
  }
  else {
    return 0;
  }
}

BOOL TierHasBoundary(uint64_t a1, unsigned int a2)
{
  return (a2 & 0x80000000) == 0 && *(_DWORD *)a1 > a2 && *(_WORD *)(*(void *)(a1 + 8) + 2 * a2) != 0;
}

uint64_t TierAddBoundaries(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = 1;
  if (a1 && a2)
  {
    uint64_t v3 = *a1;
    if (v3 == *(_DWORD *)a2)
    {
      if (v3)
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void *)(a2 + 8);
        uint64_t v6 = 2 * v3;
        do
        {
          if (*(_WORD *)(v5 + v4))
          {
            uint64_t v7 = *((void *)a1 + 1);
            if (!*(_WORD *)(v7 + v4)) {
              ++a1[1];
            }
            *(_WORD *)(v7 + v4) = 1;
          }
          v4 += 2;
        }
        while (v6 != v4);
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t leftMostSupraBoundary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3)
  {
    uint64_t v20 = "Sub- and supra-tiers contain different number of elements.\n";
LABEL_11:
    NNFX_logMsg(a1, 0, (uint64_t)v20, a4, a5, a6, a7, a8);
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a2 + 4) <= a4)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"outside range [0-%d] in sub-tier ", a4, a5, a6, a7, a8);
    if (cstdlib_strlen(*(const char **)(a2 + 16)))
    {
      unsigned int v26 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v21, v22, v23, v24, v25);
      while (cstdlib_strlen(*(const char **)(a2 + 16)) > v26++);
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int ElementInGroup = lastElementInGroup(a1, (unsigned int *)a2, a4, a4, a5, a6, a7, a8);
  if (ElementInGroup == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = ElementInGroup;
  unsigned int v18 = ElementInGroup + 1;
  while (1)
  {
    uint64_t result = v17;
    if ((int)v17 < 1) {
      return result;
    }
    --v17;
    --v18;
    if (*(_WORD *)(*(void *)(a3 + 8) + 2 * result - 2))
    {
      if (v18 < 2) {
        return 1;
      }
      if (*(_WORD *)(*(void *)(a2 + 8) + 2 * v17)) {
        return result;
      }
      NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers:: in leftMostSupraBoundary. Left-most boundary found in supra-tier is not ", v12, v13, v14, v15, v16);
      uint64_t v20 = "aligned with a boundary %d on the sub-tier.\n";
      goto LABEL_11;
    }
  }
}

uint64_t lastElementInGroup(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2[1] <= a3)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"trying to access boundary %d beyond last boundary %d in tier ", a4, a5, a6, a7, a8);
    if (**((unsigned char **)a2 + 2))
    {
      unsigned int v18 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v13, v14, v15, v16, v17);
      while (*(unsigned __int8 *)(*((void *)a2 + 2) + v18++));
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = *a2;
    if (v9)
    {
      uint64_t result = 0;
      int v11 = -1;
      while (1)
      {
        if (*(_WORD *)(*((void *)a2 + 1) + 2 * result)) {
          ++v11;
        }
        if (v11 == a3) {
          break;
        }
        if (v9 == ++result) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t rightMostSupraBoundary(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)a2 != *a3)
  {
    uint64_t v19 = "Sub- and supra-tiers contain different number of elements.\n";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 4) <= a4)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"ERROR:tiers::trying to access boundary %d ", a4, a5, a6, a7, a8);
    NNFX_logMsg(a1, 0, (uint64_t)"outside range [0-%d] in sub-tier ", v20, v21, v22, v23, v24);
    if (cstdlib_strlen(*(const char **)(a2 + 16)))
    {
      unsigned int v30 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v25, v26, v27, v28, v29);
      while (cstdlib_strlen(*(const char **)(a2 + 16)) > v30++);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t result = lastElementInGroup(a1, (unsigned int *)a2, a4, a4, a5, a6, a7, a8);
  if (result != -1)
  {
    if (result < *a3)
    {
      uint64_t v17 = (unsigned __int16 *)(*((void *)a3 + 1) + 2 * result);
      while (!*v17++)
      {
        uint64_t result = (result + 1);
        if (*a3 == result)
        {
          uint64_t result = *a3;
          break;
        }
      }
    }
    if (!*(_WORD *)(*(void *)(a2 + 8) + 2 * result))
    {
      NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers:: in rightMostSupraBoundary. Right-most boundary found in supra-tier is not ", v12, v13, v14, v15, v16);
      uint64_t v19 = "aligned with a boundary on the sub-tier.\n";
LABEL_12:
      NNFX_logMsg(a1, 0, (uint64_t)v19, a4, a5, a6, a7, a8);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL TierIsBoundary(int a1)
{
  return a1 != 0;
}

uint64_t getLeftCounts_(uint64_t a1, unsigned int *a2, _DWORD *a3, BOOL (*a4)(int a1))
{
  if (a4) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = TierIsBoundary;
  }
  uint64_t v6 = *a2;
  if (v6 != *a3) {
    return 0;
  }
  uint64_t v7 = (uint64_t)a3;
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), v6, 8);
  if (v14)
  {
    LODWORD(v__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = *a2;
    if (*a2)
    {
      unint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = (_DWORD *)heap_Alloc(*(void *)(a1 + 8), 16);
        if (!v17) {
          break;
        }
        _OWORD v17[2] = 0;
        *uint64_t v17 = 0;
        *(void *)(v14 + 8 * v16++) = v17;
        unint64_t v15 = *a2;
        if (v16 >= v15) {
          goto LABEL_10;
        }
      }
      uint64_t v32 = ":: in getLeftCounts while allocating mem for stream 0 at element %d.\n";
      goto LABEL_33;
    }
LABEL_10:
    if (a2[1])
    {
      uint64_t v18 = 0;
      int v19 = -1;
      uint64_t v34 = v7;
      while (1)
      {
        unsigned int ElementInGroup = firstElementInGroup(a1, (uint64_t)a2, v18, v9, v10, v11, v12, v13);
        if (ElementInGroup == -1)
        {
          uint64_t v32 = ":: in getLeftCounts. Cannot find valid start of group %d on source (sub) tier.";
          goto LABEL_33;
        }
        unsigned int v21 = ElementInGroup;
        unsigned int v22 = lastElementInGroup(a1, a2, v18, v9, v10, v11, v12, v13);
        if (v22 == -1)
        {
          uint64_t v32 = ":: in getLeftCount. Cannot find valid end of group %d on source (sub) tier.";
          goto LABEL_33;
        }
        if (v21 != v19 + 1)
        {
          uint64_t v32 = ":: in getLeftCount. First element in group %d does not follow last processed item.\n";
          goto LABEL_33;
        }
        unsigned int v23 = v22;
        unsigned int v24 = leftMostSupraBoundary(a1, (uint64_t)a2, v7, v18, v10, v11, v12, v13);
        if (v24 == -1) {
          break;
        }
        int v25 = 0;
        unsigned int v26 = v23 - v24;
        if (v23 > v24)
        {
          uint64_t v27 = 2 * v24;
          do
          {
            v25 += ((uint64_t (*)(void))v5)(*(unsigned __int16 *)(*((void *)a2 + 1) + v27));
            v27 += 2;
            --v26;
          }
          while (v26);
        }
        if (v21 <= v23)
        {
          uint64_t v28 = (_DWORD **)(v14 + 8 * v21);
          int v29 = v23 - v21 + 1;
          do
          {
            unsigned int v30 = *v28++;
            *unsigned int v30 = v25;
            --v29;
          }
          while (v29);
        }
        uint64_t v18 = (v18 + 1);
        int v19 = v23;
        uint64_t v7 = v34;
        if (v18 >= a2[1])
        {
          LODWORD(v__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = *a2;
          int v31 = v23 + 1;
          goto LABEL_27;
        }
      }
      uint64_t v32 = ":: in getLeftCounts. Cannot find beginning of supra-group for boundary %d.\n";
      goto LABEL_33;
    }
    int v31 = 1;
LABEL_27:
    if (v31 != v15)
    {
      uint64_t v32 = ":: in getLeftCount. Last item processed not the same as last element in tier.\n";
LABEL_33:
      NNFX_logMsg(a1, 0, (uint64_t)v32, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)":: in getLeftCounts allocating memoery for ppFeat.\n", v9, v10, v11, v12, v13);
  }
  return v14;
}

uint64_t firstElementInGroup(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a2 + 4) <= a3)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers::trying to access boundary %d beyond last boundary %d in tier ", a4, a5, a6, a7, a8);
    if (**(unsigned char **)(a2 + 16))
    {
      unsigned int v19 = 1;
      do
        NNFX_logMsg(a1, 0, (uint64_t)"%c", v14, v15, v16, v17, v18);
      while (*(unsigned __int8 *)(*(void *)(a2 + 16) + v19++));
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  int v11 = *(_DWORD *)a2;
  if (a3 && v11)
  {
    uint64_t v12 = 0;
    int v13 = -1;
    while (1)
    {
      if (*(_WORD *)(*(void *)(a2 + 8) + 2 * v12)) {
        ++v13;
      }
      if (v13 == a3 - 1) {
        break;
      }
      if (v11 == ++v12)
      {
        uint64_t result = 0;
        goto LABEL_15;
      }
    }
    uint64_t result = (v12 + 1);
  }
LABEL_15:
  if ((int)result >= v11)
  {
    NNFX_logMsg(a1, 0, (uint64_t)"ERROR::tiers::trying to return an initial index exceeding the number of elements in tier\n", a4, a5, a6, a7, a8);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t getLeftCounts(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  return getLeftCounts_(a1, a2, a3, TierIsBoundary);
}

uint64_t getRightCounts_(uint64_t a1, unsigned int *a2, unsigned int *a3, BOOL (*a4)(int a1))
{
  if (a4) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = TierIsBoundary;
  }
  uint64_t v6 = *a2;
  if (v6 != *a3) {
    return 0;
  }
  uint64_t v7 = a3;
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), v6, 8);
  if (v14)
  {
    LODWORD(v__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = *a2;
    if (*a2)
    {
      unint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = (_DWORD *)heap_Alloc(*(void *)(a1 + 8), 16);
        if (!v17) {
          break;
        }
        _OWORD v17[2] = 0;
        *uint64_t v17 = 0;
        *(void *)(v14 + 8 * v16++) = v17;
        unint64_t v15 = *a2;
        if (v16 >= v15) {
          goto LABEL_10;
        }
      }
      uint64_t v32 = ":: in getLeftCounts while allocating mem for stream 0 at element %d.\n";
      goto LABEL_34;
    }
LABEL_10:
    if (a2[1])
    {
      uint64_t v18 = 0;
      int v19 = -1;
      uint64_t v34 = v7;
      while (1)
      {
        unsigned int ElementInGroup = firstElementInGroup(a1, (uint64_t)a2, v18, v9, v10, v11, v12, v13);
        if (ElementInGroup == -1)
        {
          uint64_t v32 = ":: in getLeftCounts. Cannot find valid start of group %d on source (sub) tier.";
          goto LABEL_34;
        }
        unsigned int v21 = ElementInGroup;
        unsigned int v22 = lastElementInGroup(a1, a2, v18, v9, v10, v11, v12, v13);
        if (v22 == -1)
        {
          uint64_t v32 = ":: in getLeftCount. Cannot find valid end of group %d on source (sub) tier.";
          goto LABEL_34;
        }
        if (v21 != v19 + 1)
        {
          uint64_t v32 = ":: in getLeftCount. First element in group %d does not follow last processed item.\n";
          goto LABEL_34;
        }
        unsigned int v23 = v22;
        unsigned int v24 = rightMostSupraBoundary(a1, (uint64_t)a2, v7, v18, v10, v11, v12, v13);
        if (v24 == -1) {
          break;
        }
        if (v23 <= v24)
        {
          int v25 = 0;
          uint64_t v26 = 2 * v23;
          int v27 = v24 - v23 + 1;
          do
          {
            v25 += ((uint64_t (*)(void))v5)(*(unsigned __int16 *)(*((void *)a2 + 1) + v26));
            v26 += 2;
            --v27;
          }
          while (v27);
        }
        else
        {
          int v25 = 0;
        }
        if (v21 <= v23)
        {
          uint64_t v28 = (_DWORD **)(v14 + 8 * v21);
          int v29 = v23 - v21 + 1;
          do
          {
            unsigned int v30 = *v28++;
            *unsigned int v30 = v25;
            --v29;
          }
          while (v29);
        }
        uint64_t v18 = (v18 + 1);
        int v19 = v23;
        uint64_t v7 = v34;
        if (v18 >= a2[1])
        {
          LODWORD(v__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = *a2;
          int v31 = v23 + 1;
          goto LABEL_28;
        }
      }
      uint64_t v32 = ":: in getRightCounts. Cannot find end of supra-group for boundary %d.";
      goto LABEL_34;
    }
    int v31 = 1;
LABEL_28:
    if (v31 != v15)
    {
      uint64_t v32 = ":: in getLeftCount. Last item processed not the same as last element in tier.\n";
LABEL_34:
      NNFX_logMsg(a1, 0, (uint64_t)v32, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  else
  {
    NNFX_logMsg(a1, 0, (uint64_t)":: in getLeftCounts allocating memoery for ppFeat.\n", v9, v10, v11, v12, v13);
  }
  return v14;
}

uint64_t getRightCounts(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return getRightCounts_(a1, a2, a3, TierIsBoundary);
}

uint64_t normalizeCounts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  if (a2 && a3 && a4)
  {
    if (*(_DWORD *)(*(void *)a2 + 8))
    {
      uint64_t v12 = ":: in normalizeCounts. Input feature stream #1 is not of type intType.";
    }
    else if (*(_DWORD *)(*(void *)a3 + 8))
    {
      uint64_t v12 = ":: in normalizeCounts. Input feature stream #2 is not of type intType.";
    }
    else
    {
      uint64_t v14 = a4;
      uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), a4, 8);
      if (!v8)
      {
        NNFX_logMsg(a1, 0, (uint64_t)":: in normalizeCounts allocating memory for ppNormFeats.", v15, v16, v17, v18, v19);
        return v8;
      }
      uint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = heap_Alloc(*(void *)(a1 + 8), 16);
        if (!v21) {
          break;
        }
        *(_DWORD *)(v21 + 8) = 1;
        int v22 = **(_DWORD **)(a2 + 8 * v20);
        int v23 = **(_DWORD **)(a3 + 8 * v20) + v22;
        if (v23 < 1) {
          double v24 = 0.0;
        }
        else {
          double v24 = (double)v22 / (double)v23;
        }
        *(double *)uint64_t v21 = v24;
        *(void *)(v8 + 8 * v20++) = v21;
        if (v14 == v20) {
          return v8;
        }
      }
      uint64_t v12 = ":: in getLeftCounts while allocating mem for stream 0 at element %d.";
    }
    NNFX_logMsg(a1, 0, (uint64_t)v12, a4, a5, a6, a7, a8);
    return 0;
  }
  return v8;
}

BOOL get4Counts(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  *a4 = getLeftCounts_(a1, a2, a3, TierIsBoundary);
  uint64_t RightCounts = getRightCounts_(a1, a2, a3, TierIsBoundary);
  a4[1] = RightCounts;
  a4[2] = normalizeCounts(a1, *a4, RightCounts, *a2, v9, v10, v11, v12);
  uint64_t v17 = normalizeCounts(a1, a4[1], *a4, *a2, v13, v14, v15, v16);
  a4[3] = v17;
  if (!*a4 || !a4[1]) {
    return 1;
  }
  if (a4[2]) {
    return v17 == 0;
  }
  return 1;
}

uint64_t SymTabInit(uint64_t result)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  return result;
}

void *SymTabFree(void *result, int *a2)
{
  if (a2)
  {
    uint64_t v3 = *((void *)a2 + 1);
    if (v3)
    {
      uint64_t v4 = result;
      if (*a2 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        do
        {
          TrieIntFree(v4, *((void *)a2 + 1) + v5);
          ++v6;
          v5 += 16;
        }
        while (v6 < *a2);
        uint64_t v3 = *((void *)a2 + 1);
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *((void *)a2 + 1) = 0;
    }
  }
  return result;
}

uint64_t SymTabTableSize(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 16 * a2);
}

uint64_t SymTabReadBuf(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  v35[128] = *MEMORY[0x263EF8340];
  bzero(__dst, 0x800uLL);
  SymTabFree((void *)a1, (int *)a2);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v30 = a4;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a4, 16);
  uint64_t v32 = a2;
  *(void *)(a2 + 8) = v9;
  if (!v9) {
    return 1;
  }
  if (a4 < 1)
  {
    int v17 = 0;
LABEL_25:
    int v29 = *(_DWORD *)(*a5 + 4016) - v17;
    *(_DWORD *)(*a5 + 4020) = v29;
    if (*(_DWORD *)v32 != v29) {
      NNFX_logMsg(a1, 0, (uint64_t)"ERROR::nnfeatextract: Symbol table contains %d entries while number of active features is %d.\n", v10, v11, v12, v13, v14);
    }
    return 0;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 0;
    int v17 = 0;
    LODWORD(v18) = 0;
    uint64_t v19 = __dst;
    uint64_t v20 = (char *)v35;
    int v33 = -1;
    while (1)
    {
      uint64_t v21 = v20;
      cstdlib_strcpy(v19, *(const char **)(a3 + 8 * v15));
      int v22 = cstdlib_strrchr(v19, 10);
      if (v22) {
        char *v22 = 0;
      }
      int v23 = cstdlib_strchr(v19, 32);
      if (v23) {
        char *v23 = 0;
      }
      double v24 = cstdlib_strchr(v19, 9);
      if (v24) {
        *double v24 = 0;
      }
      int v25 = cstdlib_strchr(v19, 61);
      uint64_t v26 = v25;
      if (v25)
      {
        char *v25 = 0;
        uint64_t v26 = v25 + 1;
      }
      if (!*v19) {
        return 2;
      }
      if (cstdlib_strcmp(v19, v21))
      {
        uint64_t v27 = *a5;
        if ((int)v18 < *(_DWORD *)(*a5 + 4016))
        {
          uint64_t v18 = (int)v18;
          do
          {
            if (!cstdlib_strcmp(*(const char **)(*(void *)(v27 + 8) + 8 * v18), v19)) {
              break;
            }
            NNFX_logMsg(a1, 3, (uint64_t)"Missing feature: %s", v10, v11, v12, v13, v14);
            uint64_t v27 = *a5;
            *(_DWORD *)(*a5 + 4 * v18++ + 16) = 0;
            ++v17;
          }
          while (v18 < *(int *)(v27 + 4016));
        }
        NNFX_logMsg(a1, 3, (uint64_t)"\nsymtab:%s  feat:%s", v10, v11, v12, v13, v14);
        int v16 = 0;
        *(_DWORD *)(*a5 + 4 * (int)v18 + 16) = 1;
        LODWORD(v18) = v18 + 1;
        ++v33;
        ++*(_DWORD *)v32;
      }
      if (v26) {
        TrieIntAdd(a1, (_DWORD *)(*(void *)(v32 + 8) + 16 * v33), v26, ++v16);
      }
      ++v15;
      uint64_t v20 = v19;
      uint64_t v19 = (char *)v21;
      if (v15 == v30) {
        goto LABEL_25;
      }
    }
  }
}

uint64_t SymTabReadBufOnly(uint64_t a1, uint64_t a2, const char **a3, int a4)
{
  v22[128] = *MEMORY[0x263EF8340];
  bzero(__dst, 0x800uLL);
  uint64_t v8 = a4;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a4, 16);
  *(void *)(a2 + 8) = v9;
  uint64_t result = 1;
  if (a2 && v9)
  {
    if (a4 < 1)
    {
      return 0;
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = __dst;
      uint64_t v13 = (char *)v22;
      int v14 = -1;
      while (1)
      {
        uint64_t v15 = v13;
        cstdlib_strcpy(v12, *a3);
        int v16 = cstdlib_strrchr(v12, 10);
        if (v16) {
          *int v16 = 0;
        }
        int v17 = cstdlib_strchr(v12, 32);
        if (v17) {
          *int v17 = 0;
        }
        uint64_t v18 = cstdlib_strchr(v12, 9);
        if (v18) {
          char *v18 = 0;
        }
        uint64_t v19 = cstdlib_strchr(v12, 61);
        uint64_t v20 = v19;
        if (v19)
        {
          *uint64_t v19 = 0;
          uint64_t v20 = v19 + 1;
        }
        if (!*v12) {
          break;
        }
        if (cstdlib_strcmp(v12, v15))
        {
          int v11 = 0;
          ++v14;
          ++*(_DWORD *)a2;
        }
        if (v20) {
          TrieIntAdd(a1, (_DWORD *)(*(void *)(a2 + 8) + 16 * v14), v20, ++v11);
        }
        ++a3;
        uint64_t v13 = v12;
        uint64_t v12 = (char *)v15;
        if (!--v8) {
          return 0;
        }
      }
      return 2;
    }
  }
  return result;
}

BOOL SymTabToIntInplace(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, int a6, unsigned __int8 a7)
{
  int v25 = *a2;
  if (a4 < 1)
  {
    int v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = a6;
    uint64_t v14 = 16 * a6;
    uint64_t v15 = a4;
    do
    {
      if (v13 + v11 >= *a2) {
        break;
      }
      uint64_t v16 = *((void *)a2 + 1);
      if (*(int *)(v16 + v14) <= 0)
      {
        ++v12;
      }
      else
      {
        int v22 = SymTabToIntInplace_(a1, v16 + v14, *(unsigned __int8 ****)(a3 + 8 * v11), a5, a7);
        if (v22 >= 1) {
          NNFX_logMsg(a1, 1, (uint64_t)"::NN unroll:  %d/%d symbols not found in symbol table for feature %d.\n", v17, v18, v19, v20, v21);
        }
        int v12 = v12 + a5 - v22;
      }
      ++v11;
      v14 += 16;
    }
    while (v15 != v11);
  }
  return a6 + a4 > v25 || v12 < 1;
}

uint64_t SymTabToIntInplace_(uint64_t a1, uint64_t a2, unsigned __int8 ***a3, int a4, unsigned __int8 a5)
{
  *(_WORD *)__int16 __s = 0;
  int v17 = 0;
  if (a4 >= 1)
  {
    uint64_t v5 = a3;
    uint64_t v8 = 0;
    BOOL v9 = 0;
    int v10 = a5;
    unint64_t v11 = (unint64_t)&a3[a4];
    while (1)
    {
      int v12 = *v5;
      if (*v5)
      {
        unsigned int v13 = v12[2];
        if (v13 >= 2) {
          break;
        }
      }
LABEL_19:
      if ((unint64_t)++v5 >= v11) {
        return v8;
      }
    }
    if (v13 == 2)
    {
      __s[0] = *(unsigned char *)v12;
      BOOL v15 = TrieIntGet(a2, __s, &v17);
      int v12 = *v5;
      if (*(unsigned __int8 *)*v5 == v10)
      {
LABEL_11:
        BOOL v9 = 0;
        int v17 = 0;
LABEL_15:
        if (v12[2] == 3 && *(void *)v12)
        {
          heap_Free(*(void **)(a1 + 8), *(void *)v12);
          *(void *)int v12 = 0;
          int v12 = *v5;
        }
        *int v12 = v17;
        *((_DWORD *)*v5 + 2) = 0;
        goto LABEL_19;
      }
      BOOL v9 = v15;
    }
    else if (v13 == 3)
    {
      BOOL v9 = TrieIntGet(a2, *(char **)v12, &v17);
      int v12 = *v5;
      uint64_t v14 = **v5;
      if (*v14 == v10 && !v14[1]) {
        goto LABEL_11;
      }
    }
    if (v9)
    {
      int v17 = 0;
      uint64_t v8 = (v8 + 1);
    }
    goto LABEL_15;
  }
  return 0;
}

BOOL SymTabToIntInplaceActive(uint64_t a1, int *a2, uint64_t *a3, int a4, unsigned __int8 a5)
{
  uint64_t v6 = *a3;
  int v23 = *a2;
  int v24 = *(_DWORD *)(*a3 + 4020);
  if (*(int *)(*a3 + 4016) < 1)
  {
    int v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = 0;
    int v13 = 0;
    do
    {
      if (a4 + v11 >= *a2) {
        break;
      }
      if (*(_DWORD *)(v6 + 4 * v11 + 16))
      {
        uint64_t v14 = *((void *)a2 + 1);
        if (*(int *)(v14 + 16 * (v13 + a4)) <= 0)
        {
          ++v12;
        }
        else
        {
          int v20 = SymTabToIntInplace_(a1, v14 + 16 * v13 + 16 * a4, *(unsigned __int8 ****)(*(void *)v6 + 8 * v11), *(_DWORD *)(v6 + 4024), a5);
          if (v20 >= 1) {
            NNFX_logMsg(a1, 1, (uint64_t)"::NN unroll:  %d/%d symbols not found in symbol table for feature %d.\n", v15, v16, v17, v18, v19);
          }
          uint64_t v6 = *a3;
          int v12 = v12 - v20 + *(_DWORD *)(*a3 + 4024);
        }
        ++v13;
      }
      ++v11;
    }
    while (v11 < *(int *)(v6 + 4016));
  }
  return v24 + a4 > v23 || v12 < 1;
}

uint64_t unrollNnFeatures(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  int v10 = *a2;
  uint64_t v11 = *((unsigned int *)*a2 + 1005);
  uint64_t v12 = *((unsigned int *)*a2 + 1006);
  if ((int)v11 < 1)
  {
    int v13 = 0;
  }
  else
  {
    int v13 = 0;
    uint64_t v14 = *(int **)(a3 + 8);
    do
    {
      int v16 = *v14;
      v14 += 4;
      int v15 = v16;
      if (v16 <= 1) {
        int v15 = 1;
      }
      v13 += v15;
      --v11;
    }
    while (v11);
  }
  uint64_t v17 = *v10;
  uint64_t v18 = *((unsigned int *)v10 + 1004);
  uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), (v13 * v12), 4);
  if (!v19) {
    return 1;
  }
  *a4 = v19;
  *a5 = v13;
  if ((int)v18 < 1) {
    return 0;
  }
  uint64_t v25 = 0;
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = *a2;
  while (!*((_DWORD *)v28 + v25 + 4))
  {
    uint64_t v29 = v27;
LABEL_34:
    ++v25;
    uint64_t v27 = v29;
    if (v25 == v18) {
      return 0;
    }
  }
  uint64_t v29 = (v27 + 1);
  int v30 = *(_DWORD *)(*(void *)(a3 + 8) + 16 * (int)v27);
  if (v30)
  {
    if ((int)v12 >= 1)
    {
      int v31 = *(int ***)(v17 + 8 * v25);
      unsigned int v32 = v26 - 1;
      for (uint64_t i = v12; i; --i)
      {
        uint64_t v34 = *v31;
        if (*v31)
        {
          if (v34[2])
          {
            uint64_t v43 = "::NN unroll: expected integer feature in stream %d.\n";
            goto LABEL_39;
          }
          int v35 = *v34;
          if (v35 < 0 || v35 > v30)
          {
            uint64_t v43 = "::NN unroll: value %d out of expected range [0,%d] in stream %d.\n";
            goto LABEL_39;
          }
          if (v35) {
            *(_DWORD *)(v19 + 4 * (int)(v32 + v35)) = 1065353216;
          }
        }
        v32 += v13;
        ++v31;
      }
    }
    v26 += v30;
    goto LABEL_34;
  }
  if ((int)v12 < 1)
  {
LABEL_33:
    ++v26;
    goto LABEL_34;
  }
  int v36 = *(uint64_t **)(v17 + 8 * v25);
  uint64_t v37 = v12;
  unsigned int v38 = v26;
  while (1)
  {
    uint64_t v39 = *v36;
    if (*v36) {
      break;
    }
LABEL_32:
    v38 += v13;
    ++v36;
    if (!--v37) {
      goto LABEL_33;
    }
  }
  int v40 = *(_DWORD *)(v39 + 8);
  if (v40 == 1)
  {
    float v41 = *(double *)v39;
    goto LABEL_31;
  }
  if (!v40)
  {
    float v41 = (float)*(int *)v39;
LABEL_31:
    *(float *)(v19 + 4 * v38) = v41;
    goto LABEL_32;
  }
  uint64_t v43 = "::NN unroll: unexpected type in non-categorical stream %d.\n";
LABEL_39:
  NNFX_logMsg(a1, 0, (uint64_t)v43, v20, v21, v22, v23, v24);
  return 1;
}

void *stringdup(uint64_t a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  size_t v4 = cstdlib_strlen(__s);
  uint64_t v5 = (void *)heap_Alloc(*(void *)(a1 + 8), v4 + 1);
  if (v5)
  {
    size_t v6 = cstdlib_strlen(__s);
    cstdlib_memmove(v5, __s, v6 + 1);
  }
  return v5;
}

void *safe_strcpy(void *result, char *__s)
{
  if (result && __s)
  {
    uint64_t v3 = result;
    size_t v4 = cstdlib_strlen(__s) + 1;
    return cstdlib_memmove(v3, __s, v4);
  }
  return result;
}

char *stringcat(uint64_t a1, char *__s, const char *a3)
{
  uint64_t v3 = 0;
  if (__s)
  {
    if (a3)
    {
      size_t v7 = cstdlib_strlen(__s);
      size_t v8 = cstdlib_strlen(a3);
      BOOL v9 = (char *)heap_Alloc(*(void *)(a1 + 8), v7 + v8 + 1);
      uint64_t v3 = v9;
      if (v9)
      {
        safe_strcpy(v9, __s);
        cstdlib_strcat(v3, a3);
      }
    }
  }
  return v3;
}

char *strip_spaces(const char **a1)
{
  int v2 = cstdlib_strlen(*a1);
  if (v2 >= 1)
  {
    unint64_t v3 = v2 + 1;
    do
    {
      uint64_t v4 = (v3 - 2);
      if (!cstdlib_strchr(" \t\r\n", (*a1)[v4])) {
        break;
      }
      (*a1)[v4] = 0;
      --v3;
    }
    while (v3 > 1);
  }
  for (uint64_t result = cstdlib_strchr(" \t\r\n", **a1); result; uint64_t result = cstdlib_strchr(" \t\r\n", v6[1]))
    size_t v6 = (*a1)++;
  return result;
}

const char *get_next_token(void *a1, char **a2, int a3)
{
  uint64_t v4 = *a2;
  if (!v4) {
    return 0;
  }
  safe_strcpy(a1, v4);
  size_t v7 = cstdlib_strchr((char *)a1, a3);
  if (v7) {
    *v7++ = 0;
  }
  BOOL v9 = (const char *)a1;
  *a2 = v7;
  strip_spaces(&v9);
  return v9;
}

uint64_t stringdup_static(char *a1, unsigned char *a2, unsigned int a3)
{
  if (cstdlib_strlen(a1) >= a3) {
    *a2 = 0;
  }
  else {
    safe_strcpy(a2, a1);
  }
  return 1;
}

uint64_t utf8todepes(const char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = 0;
  int v6 = cstdlib_strlen(a1);
  return utf8_Utf8ToDepes((uint64_t)a1, v6 + 1, (_DWORD *)&v8 + 1, a2, a3, (unsigned int *)&v8, 0);
}

uint64_t depestoutf8(const char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = 0;
  int v6 = cstdlib_strlen(a1);
  return utf8_DepesToUtf8((uint64_t)a1, v6 + 1, (_DWORD *)&v8 + 1, a2, a3, (unsigned int *)&v8, 0);
}

uint64_t Lingdb2NnWordRec(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, _DWORD *a7, uint64_t a8, _WORD *a9, _WORD *a10, _WORD *a11)
{
  uint64_t v157 = *(void *)a6;
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  unint64_t v169 = 0;
  int v168 = 0;
  unsigned __int16 v167 = 0;
  int v166 = 4;
  unsigned __int16 v165 = 0;
  unsigned __int16 v164 = 0;
  int v163 = 0;
  uint64_t v162 = 0;
  int v161 = 0;
  unsigned __int16 v160 = 0;
  uint64_t v159 = 0;
  *a7 = 0;
  *a9 = 0;
  *a10 = 0;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 104))(a4, a5, 1, 0, (char *)&v168 + 2);
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v19 = v18;
    goto LABEL_9;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, _DWORD *, unsigned __int16 *))(a3 + 168))(a4, a5, HIWORD(v168), 3, 1, a7, &v167);
  if ((v19 & 0x80000000) != 0)
  {
LABEL_9:
    a6[5] = 0;
    return v19;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, HIWORD(v168), 1, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned int **, char *))(a3 + 176))(a4, a5, HIWORD(v168), 1, &v162, (char *)&v161 + 2);
    if ((v19 & 0x80000000) != 0) {
      return v19;
    }
  }
  uint64_t v20 = a11;
  if (HIWORD(v161)) {
    unsigned int v21 = v162[3];
  }
  else {
    unsigned int v21 = 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(a3 + 184))(a4, a5, HIWORD(v168), 0, &v161) & 0x80000000) != 0|| (unsigned __int16)v161 != 1)
  {
    uint64_t v27 = a9;
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, HIWORD(v168), 4, &v161) & 0x80000000) != 0|| (unsigned __int16)v161 != 1)
    {
      goto LABEL_21;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v168), 4, &v173, &v167);
    if ((v19 & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v168), 0, &v173, &v167);
    uint64_t v27 = a9;
    if ((v19 & 0x80000000) != 0)
    {
      log_OutPublic(a1[4], a2, 0, 0, v23, v24, v25, v26, v146);
      goto LABEL_9;
    }
  }
  if (v167 <= 1u)
  {
    uint64_t v173 = 0;
    goto LABEL_27;
  }
LABEL_21:
  if (!v173)
  {
LABEL_27:
    __int16 v32 = 0;
    if (a8 && HIWORD(v161))
    {
      unint64_t v33 = 0;
      uint64_t v34 = v162;
      do
      {
        unsigned int v35 = *v34;
        v34 += 8;
        int v36 = (1 << v35) & 0x270F0100;
        if (v35 <= 0x1D && v36 != 0)
        {
          *(_DWORD *)a8 = 15;
          *(_DWORD *)(a8 + 12) = 0;
          *(_DWORD *)(a8 + 16) = 0;
          *(unsigned char *)(a8 + 120) = 83;
          *(_DWORD *)(a8 + 144) = 4;
          *(_DWORD *)(a8 + 160) = 0;
          cstdlib_strcpy(*(char **)(a8 + 280), "#");
          _WORD *v27 = 1;
          *a10 = 1;
          __int16 v32 = 2;
          *a11 = 2;
          goto LABEL_37;
        }
        ++v33;
      }
      while (v33 < HIWORD(v161));
      __int16 v32 = 0;
    }
LABEL_37:
    a6[5] = v32;
    return v19;
  }
  LODWORD(v28) = HIWORD(v161);
  if (HIWORD(v161))
  {
    uint64_t v29 = 0;
    int v30 = (int *)(v162 + 3);
    while (1)
    {
      int v31 = *v30;
      v30 += 8;
      if (v31 != v21) {
        break;
      }
      if (HIWORD(v161) == ++v29) {
        goto LABEL_39;
      }
    }
    LODWORD(v28) = v29;
  }
LABEL_39:
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 152))(a4, a5, 2, HIWORD(v168), &v161);
  LOWORD(v39) = 0;
  if (v38 < 0 || !(_WORD)v161)
  {
    unsigned __int16 v153 = 0;
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 104))(a4, a5, 2, HIWORD(v168), &v168);
    if ((v19 & 0x80000000) != 0)
    {
      __int16 v127 = 1;
      goto LABEL_276;
    }
    unsigned __int16 v40 = v168;
    if ((_WORD)v168)
    {
      unsigned __int16 v153 = 0;
      uint64_t v154 = 0;
      unsigned __int16 v147 = 0;
      int v39 = 0;
      int v152 = 1;
      unsigned int v156 = v21;
      uint64_t v148 = a8;
      while (1)
      {
        int v155 = v39;
        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(a3 + 168))(a4, a5, v40, 0, 1, &v166, &v167);
        if ((v41 & 0x80000000) != 0)
        {
LABEL_274:
          uint64_t v19 = v41;
LABEL_275:
          __int16 v127 = v152;
LABEL_276:
          a6[5] = v127;
          return v19;
        }
        int v42 = v166;
        *(_DWORD *)(a8 + 144 * (unsigned __int16)v155) = v166;
        if ((v42 - 9) >= 6)
        {
          if (v42 == 15)
          {
            ++*a10;
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 7, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
            {
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 7, 1, &v163, &v167);
              if ((v41 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 12) = (unsigned __int16)v163;
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 1, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
            {
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 1, 1, &v164, &v167);
              if ((v41 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 4) = v164;
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 2, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
            {
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 2, 1, (char *)&v163 + 2, &v167);
              if ((v41 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 8) = HIWORD(v163);
            }
            unsigned __int16 v167 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 4, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
            {
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 4, &v170, &v167);
              if ((v41 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              if (v170) {
                cstdlib_strcpy(*(char **)(a8 + 144 * (unsigned __int16)v155 + 32), v170);
              }
            }
            if (v173)
            {
              unsigned __int16 v160 = 0;
              unint64_t v75 = v164;
              if (v164 >= HIWORD(v163))
              {
                uint64_t v76 = 0;
              }
              else
              {
                uint64_t v76 = 0;
                do
                {
                  char v77 = *(unsigned char *)(v173 + v75);
                  uint64_t v78 = *(void *)(a8 + 144 * (unsigned __int16)v155 + 128);
                  unsigned __int16 v160 = v76 + 1;
                  *(unsigned char *)(v78 + v76) = v77;
                  ++v75;
                  uint64_t v76 = v160;
                }
                while (v75 < HIWORD(v163) && v160 < 0x1FFuLL);
              }
              *(unsigned char *)(*(void *)(a8 + 144 * (unsigned __int16)v155 + 128) + v76) = 0;
            }
            if ((unsigned __int16)v163 <= 2u) {
              *(unsigned char *)(a8 + 144 * (unsigned __int16)v155 + 120) = 0x575353u >> (8 * v163);
            }
            if ((_WORD)v155)
            {
              unsigned __int16 v79 = v155 - 1;
              while (1)
              {
                uint64_t v80 = v79;
                int v81 = *(_DWORD *)(a8 + 144 * v79);
                if ((v81 - 9) < 6 || v81 == 4) {
                  break;
                }
                if (v81 != 15)
                {
                  --v79;
                  if (v80) {
                    continue;
                  }
                }
                goto LABEL_212;
              }
              *(unsigned char *)(a8 + 144 * v79 + 120) = *(unsigned char *)(a8 + 144 * (unsigned __int16)v155 + 120);
LABEL_212:
              unsigned __int16 v147 = v155;
            }
            else
            {
              int v155 = 0;
              unsigned __int16 v147 = 0;
            }
            goto LABEL_246;
          }
          if (v42 != 4)
          {
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 1, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
            {
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 1, 1, &v164, &v167);
              if ((v41 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 4) = v164;
            }
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 2, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
            {
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 2, 1, (char *)&v163 + 2, &v167);
              if ((v41 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 8) = HIWORD(v163);
            }
            unsigned __int16 v167 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 4, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
            {
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 4, &v171, &v167);
              if ((v41 & 0x80000000) != 0) {
                goto LABEL_274;
              }
              if (v171) {
                cstdlib_strcpy(*(char **)(a8 + 144 * (unsigned __int16)v155 + 32), v171);
              }
            }
            if (v173)
            {
              unsigned __int16 v160 = 0;
              unint64_t v50 = v164;
              if (v164 >= HIWORD(v163))
              {
                uint64_t v51 = 0;
              }
              else
              {
                uint64_t v51 = 0;
                do
                {
                  char v52 = *(unsigned char *)(v173 + v50);
                  uint64_t v53 = *(void *)(a8 + 144 * (unsigned __int16)v155 + 128);
                  unsigned __int16 v160 = v51 + 1;
                  *(unsigned char *)(v53 + v51) = v52;
                  ++v50;
                  uint64_t v51 = v160;
                }
                while (v50 < HIWORD(v163) && v160 < 0x1FFuLL);
              }
              *(unsigned char *)(*(void *)(a8 + 144 * (unsigned __int16)v155 + 128) + v51) = 0;
            }
            goto LABEL_246;
          }
        }
        BOOL v151 = (char **)(a8 + 144 * (unsigned __int16)v155);
        ++*v27;
        BOOL v43 = v42 != 12;
        BOOL v44 = v42 == 14;
        int v45 = HIDWORD(v154);
        if (!HIDWORD(v154)) {
          BOOL v44 = 0;
        }
        char v149 = v44;
        if (v43 && HIDWORD(v154) != 0) {
          int v45 = 0;
        }
        HIDWORD(v154) = v45;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 1, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 1, 1, &v164, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 4) = v164;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 2, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 2, 1, (char *)&v163 + 2, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 8) = HIWORD(v163);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 13, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int8 **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 13, &v169, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 20) = cstdlib_atoi(v169);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 7, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 7, 1, &v165, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 12) = v165;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 17, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int8 **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 17, &v169, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 24) = cstdlib_atoi(v169);
        }
        if (v170) {
          cstdlib_strcpy(*(char **)(a8 + 144 * (unsigned __int16)v155 + 32), v170);
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 5, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 5, &v171, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          if (v171) {
            cstdlib_strcpy(*(char **)(a8 + 144 * (unsigned __int16)v155 + 40), v171);
          }
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 6, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 6, &v171, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          if (v171) {
            cstdlib_strcpy(*(char **)(a8 + 144 * (unsigned __int16)v155 + 48), v171);
          }
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 9, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 9, &v171, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          if (v171) {
            cstdlib_strcpy(*(char **)(a8 + 144 * (unsigned __int16)v155 + 56), v171);
          }
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 14, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 14, &v171, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          if (v171) {
            ParseWnluStr(v171, v151);
          }
        }
        if (v173)
        {
          unsigned __int16 v160 = 0;
          unint64_t v46 = v164;
          if (v164 >= HIWORD(v163))
          {
            uint64_t v47 = 0;
          }
          else
          {
            uint64_t v47 = 0;
            do
            {
              char v48 = *(unsigned char *)(v173 + v46);
              uint64_t v49 = *(void *)(a8 + 144 * (unsigned __int16)v155 + 128);
              unsigned __int16 v160 = v47 + 1;
              *(unsigned char *)(v49 + v47) = v48;
              ++v46;
              uint64_t v47 = v160;
            }
            while (v46 < HIWORD(v163) && v160 < 0x1FFuLL);
          }
          *(unsigned char *)(*(void *)(a8 + 144 * (unsigned __int16)v155 + 128) + v47) = 0;
        }
        unsigned __int16 v167 = 0;
        uint64_t v172 = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 3, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v168, 3, &v172, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
        }
        uint64_t v54 = v157;
        if (v167 <= 1u)
        {
          if (v166 == 14) {
            uint64_t v172 = "M";
          }
          else {
            uint64_t v172 = 0;
          }
        }
        __int16 v55 = cstdlib_atoi(v169);
        uint64_t v56 = v172;
        if (v172 && !v55)
        {
          if (!cstdlib_strcmp(v172, "\""))
          {
            uint64_t v172 = 0;
            goto LABEL_224;
          }
          uint64_t v56 = v172;
        }
        if (v56)
        {
          if (v167 < 2u)
          {
            uint64_t v58 = 0;
            int v57 = 0;
          }
          else
          {
            int v57 = 0;
            do
            {
              uint64_t v58 = (unsigned __int16)v57;
              uint64_t v59 = v172[(unsigned __int16)v57];
              if (v172[(unsigned __int16)v57] < 0)
              {
                if (!__maskrune(v59, 0x4000uLL)) {
                  goto LABEL_142;
                }
              }
              else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v59 + 60) & 0x4000) == 0)
              {
                goto LABEL_142;
              }
              ++v57;
            }
            while (v167 - 1 > (unsigned __int16)v57);
            uint64_t v58 = (unsigned __int16)v57;
            int v57 = (unsigned __int16)v57;
          }
LABEL_142:
          uint64_t v60 = 0;
          uint64_t v61 = (void *)(v148 + 144 * (unsigned __int16)v155 + 136);
          while (v167 - 1 > (int)v60)
          {
            uint64_t v62 = v172;
            uint64_t v63 = v172[v58 + v60];
            if (v172[v58 + v60] < 0)
            {
              if (__maskrune(v63, 0x4000uLL))
              {
LABEL_151:
                unsigned int v21 = v156;
                break;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v63 + 60) & 0x4000) != 0)
            {
              goto LABEL_151;
            }
            *(unsigned char *)(*v61 + v60) = v62[(v57 + v60)];
            ++v60;
            unsigned int v21 = v156;
            if (v60 == 511) {
              break;
            }
          }
          *(unsigned char *)(*v61 + (unsigned __int16)v60) = 0;
          uint64_t v27 = a9;
          uint64_t v54 = v157;
          if (v172)
          {
            uint64_t v20 = a11;
            a8 = v148;
            if (*v172)
            {
              int v64 = (__int16)v152;
              BOOL v65 = (__int16)v152 >= 2 && HIDWORD(v154) == 0;
              char v66 = v149;
              if (!v65) {
                char v66 = 1;
              }
              if ((v66 & 1) == 0 && v166 != 14)
              {
                int v67 = HIWORD(v161);
                if (v28 < HIWORD(v161))
                {
                  int v68 = 0;
                  int v69 = 0;
                  uint64_t v70 = v28;
                  uint64_t v71 = &v162[8 * v28];
                  while (v71[3] - v21 <= v164)
                  {
                    unsigned int v73 = *v71;
                    v71 += 8;
                    unsigned int v72 = v73;
                    if (v73 == 8) {
                      int v74 = v69 + 1;
                    }
                    else {
                      int v74 = v69;
                    }
                    if (v72 == 26) {
                      ++v68;
                    }
                    else {
                      int v69 = v74;
                    }
                    if (HIWORD(v161) == ++v70) {
                      goto LABEL_215;
                    }
                  }
                  int v67 = v70;
LABEL_215:
                  if (v68)
                  {
                    int v150 = v67;
                    if (v69) {
                      int v83 = *(_DWORD *)(v148 + 144 * v153 + 16);
                    }
                    else {
                      int v83 = 200;
                    }
                    *(_DWORD *)(v148 + 144 * v153 + 16) = v83;
                    if (cstdlib_strstr((char *)(*(void *)a6 + 152), "bet4")
                      || cstdlib_strstr((char *)(*(void *)a6 + 152), "bet5"))
                    {
                      uint64_t inited = InitFromWrdRec((uint64_t)a1, (uint64_t)v151, v148 + 144 * (unsigned __int16)v155 + 432, v91, v92, v93, v94, v95);
                      if ((inited & 0x80000000) != 0) {
                        return inited;
                      }
                      uint64_t inited = Init_WrdRec(a1, &v159, 1u);
                      if ((inited & 0x80000000) != 0) {
                        return inited;
                      }
                      uint64_t inited = InitFromWrdRec((uint64_t)a1, v159, (uint64_t)v151, v97, v98, v99, v100, v101);
                      if ((inited & 0x80000000) != 0) {
                        return inited;
                      }
                      *(_DWORD *)BOOL v151 = 15;
                      uint64_t v107 = v148 + 144 * (unsigned __int16)v155;
                      *(void *)(v107 + 12) = 0x100000002;
                      *(unsigned char *)(v107 + 120) = 87;
                      uint64_t inited = InitFromWrdRec((uint64_t)a1, v159, v148 + 144 * (unsigned __int16)(v155 + 1), v102, v103, v104, v105, v106);
                      if ((inited & 0x80000000) != 0) {
                        return inited;
                      }
                      *(_DWORD *)(v148 + 144 * (unsigned __int16)(v155 + 1)) = 4;
                      cstdlib_strcpy(*(char **)(v148 + 144 * (unsigned __int16)(v155 + 1) + 136), "#");
                      uint64_t inited = InitFromWrdRec((uint64_t)a1, v159, v148 + 144 * (unsigned __int16)(v155 + 2), v108, v109, v110, v111, v112);
                      if ((inited & 0x80000000) != 0) {
                        return inited;
                      }
                      *(_DWORD *)(v148 + 144 * (unsigned __int16)(v155 + 2)) = 15;
                      uint64_t v113 = v148 + 144 * v147;
                      uint64_t v114 = v148 + 144 * (unsigned __int16)(v155 + 2);
                      *(void *)(v114 + 12) = *(void *)(v113 + 12);
                      *(unsigned char *)(v114 + 120) = *(unsigned char *)(v113 + 120);
                      v155 += 3;
                      Free_WrdRec(a1, v159, 1u);
                      *a10 += 2;
                      ++*a9;
                      LODWORD(v154) = 5;
                      uint64_t v54 = v157;
                      unsigned int v21 = v156;
                      int v64 = (__int16)v152;
                      LODWORD(v28) = v150;
                    }
                    else
                    {
                      uint64_t v54 = v157;
                      int v64 = (__int16)v152;
                    }
                  }
                }
              }
              if (v154) {
                BOOL v84 = v64 <= 1;
              }
              else {
                BOOL v84 = 1;
              }
              int v85 = v152;
              if (!v84) {
                int v85 = v152 + 1;
              }
              int v152 = v85;
            }
          }
          else
          {
            uint64_t v20 = a11;
            a8 = v148;
          }
        }
LABEL_224:
        if (v166 != 13)
        {
          if (v166 != 14) {
            goto LABEL_228;
          }
          HIDWORD(v154) = 1;
        }
        ++a6[7];
LABEL_228:
        LODWORD(v154) = 0;
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a3 + 184))(a4, a5, (unsigned __int16)v168, 8, &v161) & 0x80000000) == 0&& (unsigned __int16)v161 == 1)
        {
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a3 + 168))(a4, a5, (unsigned __int16)v168, 8, 1, &v160, &v167);
          if ((v41 & 0x80000000) != 0) {
            goto LABEL_274;
          }
          LODWORD(v154) = v160;
          uint64_t v54 = v157;
        }
        unsigned __int16 v86 = v155;
        *(_DWORD *)(a8 + 144 * (unsigned __int16)v155 + 16) = v154;
        if (v172 && *v172)
        {
          v174[0] = (unsigned __int8 *)v172;
          skipUnvalidPhonemes(v54, v174);
          int v87 = v174[0];
          if (*v174[0])
          {
            int v88 = 0;
            do
            {
              ++v88;
              v174[0] = v87 + 1;
              skipUnvalidPhonemes(v54, v174);
              int v87 = v174[0];
            }
            while (*v174[0]);
          }
          else
          {
            int v88 = 0;
          }
          v152 += v88;
          unsigned __int16 v86 = v155;
          unsigned int v21 = v156;
        }
        if (v28 < HIWORD(v161))
        {
          uint64_t v28 = v28;
          uint64_t v89 = &v162[8 * v28 + 3];
          while (1)
          {
            unsigned int v90 = *v89;
            v89 += 8;
            if (v90 - v21 > v164) {
              break;
            }
            if (HIWORD(v161) == ++v28)
            {
              LODWORD(v28) = HIWORD(v161);
              break;
            }
          }
        }
        unsigned __int16 v153 = v86;
LABEL_246:
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a3 + 120))(a4, a5, (unsigned __int16)v168, &v168);
        if ((v19 & 0x80000000) != 0) {
          goto LABEL_275;
        }
        int v39 = v155 + 1;
        unsigned __int16 v40 = v168;
        if (!(_WORD)v168) {
          goto LABEL_260;
        }
      }
    }
    LOWORD(v39) = 0;
    unsigned __int16 v153 = 0;
  }
LABEL_260:
  if (!*v27)
  {
LABEL_283:
    if ((_WORD)v39)
    {
      unsigned __int16 v142 = v39 - 1;
      while (1)
      {
        uint64_t v143 = v142;
        int v144 = *(_DWORD *)(a8 + 144 * v142);
        if ((v144 - 9) < 6 || v144 == 4) {
          break;
        }
        if (v144 != 15)
        {
          --v142;
          if (v143) {
            continue;
          }
        }
        goto LABEL_293;
      }
      *(unsigned char *)(a8 + 144 * v142 + 120) = 83;
    }
LABEL_293:
    _WORD *v20 = v39;
    return v19;
  }
  unsigned __int16 v115 = v39;
  if (!cstdlib_strstr((char *)(*(void *)a6 + 152), "bet4")
    && !cstdlib_strstr((char *)(*(void *)a6 + 152), "bet5")
    || v28 >= HIWORD(v161))
  {
LABEL_282:
    LOWORD(v39) = v115;
    goto LABEL_283;
  }
  uint64_t v121 = v28;
  uint64_t v122 = &v162[8 * v28];
  int v123 = -1;
  LOWORD(v39) = v115;
  do
  {
    unsigned int v124 = *v122;
    v122 += 8;
    if (v124 == 26) {
      int v123 = v121;
    }
    ++v121;
  }
  while (HIWORD(v161) != v121);
  if (v123 == -1) {
    goto LABEL_283;
  }
  unsigned int v125 = v115 + 1;
  uint64_t v126 = a8 + 144 * (v115 - 1);
  while (v125 - 2 > v153)
  {
    uint64_t v19 = InitFromWrdRec((uint64_t)a1, v126, a8 + 144 * v125--, v116, v117, v118, v119, v120);
    v126 -= 144;
    if ((v19 & 0x80000000) != 0) {
      return v19;
    }
  }
  *(_DWORD *)(a8 + 144 * v153 + 16) = 0;
  uint64_t inited = Init_WrdRec(a1, &v159, 1u);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  unsigned int v133 = v153 + 1;
  uint64_t inited = InitFromWrdRec((uint64_t)a1, v159, a8 + 144 * v133, v128, v129, v130, v131, v132);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_DWORD *)(a8 + 144 * v133) = 15;
  uint64_t v139 = a8 + 144 * v133;
  *(void *)(v139 + 12) = 0x100000000;
  *(unsigned char *)(v139 + 120) = 83;
  unsigned int v140 = v153 + 2;
  uint64_t v19 = InitFromWrdRec((uint64_t)a1, v159, a8 + 144 * v140, v134, v135, v136, v137, v138);
  if ((v19 & 0x80000000) == 0)
  {
    *(_DWORD *)(a8 + 144 * v140) = 4;
    uint64_t v141 = a8 + 144 * v140;
    *(_DWORD *)(v141 + 16) = 200;
    cstdlib_strcpy(*(char **)(v141 + 136), "#");
    ++v160;
    ++*a10;
    ++*a9;
    v115 += 2;
    Free_WrdRec(a1, v159, 1u);
    goto LABEL_282;
  }
  return v19;
}

uint64_t skipUnvalidPhonemes(uint64_t result, unsigned __int8 **a2)
{
  int v2 = *a2;
  unsigned int v3 = **a2;
  if (**a2)
  {
    while (*(unsigned __int8 *)(result + v3 + 2144) == 255)
    {
      if (v3 == 92)
      {
        uint64_t v4 = v2 + 1;
        do
        {
          *a2 = v4;
          int v6 = *v4++;
          int v5 = v6;
          if (v6 == 92)
          {
            int v2 = v4 - 1;
            goto LABEL_10;
          }
        }
        while (v5);
        *a2 = v2;
        if (*v2) {
          goto LABEL_10;
        }
        return result;
      }
LABEL_10:
      *a2 = v2 + 1;
      unsigned int v3 = *++v2;
      if (!v3) {
        return result;
      }
    }
  }
  return result;
}

uint64_t uselect_ExtractTargetFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v604 = *MEMORY[0x263EF8340];
  uint64_t v3 = 2229280789;
  uint64_t v4 = *(void *)a3;
  char v600 = 2;
  unsigned __int8 v599 = 0;
  int v6 = (__int16 *)(a3 + 12);
  uint64_t v5 = *(__int16 *)(a3 + 12);
  if (v5 < 1) {
    return v3;
  }
  int v10 = *(void **)(a3 + 24);
  if (v10)
  {
    cstdlib_memset(v10, 0, (v5 + 1));
    uint64_t v11 = *(unsigned int *)(a3 + 3520);
    if (v11)
    {
      uint64_t v12 = 0;
      LODWORD(v13) = 0;
      int v14 = 0;
      int v15 = (int *)(*(void *)(a3 + 3512) + 12);
      do
      {
        if (*(v15 - 3) == 0x4000 && *(v15 - 1))
        {
          int v14 = *v15;
          LODWORD(v13) = v12;
        }
        v15 += 8;
        ++v12;
      }
      while (v11 != v12);
      if (v13)
      {
        int v16 = v13;
        do
        {
          ++**(unsigned char **)(a3 + 24);
          --v16;
        }
        while (v16);
        LODWORD(v11) = *(_DWORD *)(a3 + 3520);
      }
    }
    else
    {
      LODWORD(v13) = 0;
      int v14 = 0;
    }
    if (v13 < v11)
    {
      unint64_t v13 = v13;
      uint64_t v17 = (32 * v13) | 0xC;
      do
      {
        unsigned int v18 = *(_DWORD *)(*(void *)(a3 + 3512) + v17) - v14;
        if (v18 >= *(__int16 *)(a3 + 12)) {
          unsigned int v18 = *(__int16 *)(a3 + 12);
        }
        ++*(unsigned char *)(*(void *)(a3 + 24) + v18);
        ++v13;
        v17 += 32;
      }
      while (v13 < *(unsigned int *)(a3 + 3520));
    }
  }
  if ((*(_DWORD *)(v4 + 3092) & 0x80000000) != 0)
  {
    unsigned __int8 InternalTagIndex = 0;
  }
  else
  {
    unsigned __int8 InternalTagIndex = GetInternalTagIndex(v4, "TS", 0);
    unsigned __int8 v599 = InternalTagIndex;
  }
  int v20 = **(unsigned __int8 **)(a3 + 16);
  if (v20 == 92)
  {
    HandleInternalTag(v4, a3, v6, 0, InternalTagIndex, &v599, &v600);
    int v20 = **(unsigned __int8 **)(a3 + 16);
  }
  if (*(_DWORD *)(v4 + 2516)) {
    BOOL v21 = v20 == 60;
  }
  else {
    BOOL v21 = 0;
  }
  int v22 = v21;
  if (v20 == 35)
  {
    __int16 v23 = *v6;
  }
  else
  {
    do
    {
      uint64_t v24 = *(unsigned char **)(a3 + 24);
      if (v24) {
        *v24 += v24[1];
      }
      int v25 = *v6;
      if (v25 >= 1)
      {
        uint64_t v26 = 0;
        do
        {
          *(unsigned char *)(*(void *)(a3 + 16) + v26) = *(unsigned char *)(*(void *)(a3 + 16) + v26 + 1);
          if (v26)
          {
            uint64_t v27 = *(void *)(a3 + 24);
            if (v27) {
              *(unsigned char *)(v27 + v26) = *(unsigned char *)(v27 + v26 + 1);
            }
          }
          ++v26;
        }
        while (v26 < *v6);
        LOWORD(v25) = *v6;
      }
      __int16 v23 = v25 - 1;
      *(_WORD *)(a3 + 12) = v23;
    }
    while (**(unsigned char **)(a3 + 16) != 35);
  }
  if (v23 >= 1)
  {
    __int16 v28 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)(a3 + 16) + v28) == 92) {
        HandleInternalTag(v4, a3, v6, v28, InternalTagIndex, &v599, &v600);
      }
      else {
        *(unsigned char *)(*(void *)(a3 + 248) + v28++) = v599;
      }
    }
    while (*v6 > v28);
  }
  uint64_t v29 = *(const char **)(a3 + 488);
  if (v29)
  {
    uint64_t v30 = *(void *)(a1 + 8);
    int v31 = cstdlib_strlen(v29);
    __int16 v32 = (char *)heap_Alloc(v30, (v31 + 1));
    if (!v32)
    {
      log_OutPublic(*(void *)(a1 + 32), a2, 19000, 0, v33, v34, v35, v36, v563);
      return 2229280778;
    }
    uint64_t v37 = v32;
    cstdlib_strcpy(v32, *(const char **)(a3 + 488));
  }
  else
  {
    uint64_t v37 = 0;
  }
  uint64_t v579 = a2;
  if (log_HasTraceTuningDataSubscriber(*(void *)(a1 + 32)))
  {
    v568 = "TAPSREFSPT";
    v569 = v37;
    v566 = (const char *)*(__int16 *)(a3 + 12);
    v567 = *(const char **)(a3 + 16);
    uint64_t v564 = 0;
    v565 = "IN";
    log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 301, (uint64_t)"%s%s %s%.*s %s%s", v38, v39, v40, v41, v42, "BEG");
  }
  uint64_t v588 = a1;
  uint64_t v589 = (uint64_t)v37;
  int v43 = *v6;
  if (v43 >= 1)
  {
    int v44 = 0;
    int v570 = 0;
    int v45 = 0;
    int v580 = 0;
    int v46 = 0;
    v583 = 0;
    __int16 __s = (char *)v589;
    int v578 = v22;
    while (1)
    {
      uint64_t v47 = *(void *)(a3 + 16);
      uint64_t v48 = (__int16)v44;
      if ((*(unsigned char *)(v47 + (__int16)v44) & 0xFE) == 0x12)
      {
        uint64_t v49 = v44 + 1;
        if (*(unsigned char *)(v47 + v49) == 16)
        {
          LOWORD(v43) = v43 - 2;
          *(_WORD *)(a3 + 12) = v43;
          uint64_t v50 = *(void *)(a3 + 24);
          if (v50)
          {
            *(unsigned char *)(v44 + v50 + 2) += *(unsigned char *)(v50 + v49) + *(unsigned char *)(v50 + (__int16)v44);
            LOWORD(v43) = *v6;
          }
          if ((__int16)v44 < (__int16)v43)
          {
            uint64_t v51 = (__int16)v44;
            do
            {
              *(unsigned char *)(*(void *)(a3 + 16) + v51) = *(unsigned char *)(*(void *)(a3 + 16) + v51 + 2);
              uint64_t v52 = *(void *)(a3 + 24);
              if (v52) {
                *(unsigned char *)(v52 + v51) = *(unsigned char *)(v52 + v51 + 2);
              }
              ++v51;
            }
            while (v51 < *v6);
            LOWORD(v43) = *v6;
          }
        }
      }
      uint64_t v53 = *(void *)(a3 + 16);
      if (*(unsigned char *)(v53 + (__int16)v44) != 16) {
        goto LABEL_226;
      }
      uint64_t v54 = v44 + 1;
      int v55 = *(unsigned __int8 *)(v53 + v54);
      if ((v55 & 0xFE) != 0x12) {
        goto LABEL_226;
      }
      __int16 v56 = v43 - 2;
      *(_WORD *)(a3 + 12) = v56;
      uint64_t v57 = *(void *)(a3 + 24);
      if (v57)
      {
        *(unsigned char *)(v44 + v57 + 2) += *(unsigned char *)(v57 + v54) + *(unsigned char *)(v57 + (__int16)v44);
        __int16 v56 = *v6;
      }
      if ((__int16)v44 < v56)
      {
        uint64_t v58 = (__int16)v44;
        do
        {
          *(unsigned char *)(*(void *)(a3 + 16) + v58) = *(unsigned char *)(*(void *)(a3 + 16) + v58 + 2);
          *(unsigned char *)(*(void *)(a3 + 248) + v58) = *(unsigned char *)(*(void *)(a3 + 248) + v58 + 2);
          uint64_t v59 = *(void *)(a3 + 24);
          if (v59) {
            *(unsigned char *)(v59 + v58) = *(unsigned char *)(v59 + v58 + 2);
          }
          ++v58;
        }
        while (v58 < *v6);
        __int16 v56 = *v6;
      }
      if (v55 == 19) {
        break;
      }
      if (!__s)
      {
        __int16 __s = 0;
LABEL_226:
        uint64_t v141 = *(unsigned __int8 *)(*(void *)(a3 + 16) + (__int16)v44);
        if (v141 != 91 && (v141 != 93 ? (BOOL v142 = v45 == 0) : (BOOL v142 = 1), v142))
        {
          int v45 = 0;
          if (*(unsigned __int8 *)(v4 + v141 + 2144) != 255) {
            v46 += *(unsigned __int16 *)(v4 + 3578);
          }
        }
        else
        {
          int v45 = 1;
        }
        goto LABEL_235;
      }
      char v66 = cstdlib_strchr(__s, 27);
      if (v66)
      {
        char *v66 = 0;
        v576 = v66 + 1;
        v572 = v66;
        uint64_t v574 = *(void *)(a3 + 16);
        int v67 = (char *)(v574 + (__int16)v44);
        int v68 = cstdlib_strchr(v67, 18);
        if (v68)
        {
          v586 = v68;
          *int v68 = 0;
          if (log_HasTraceTuningDataSubscriber(*(void *)(a1 + 32)))
          {
            v567 = "TAPSREFSTPTAP";
            v568 = __s;
            v565 = "TAPSCURSTPTAP";
            v566 = (const char *)(v574 + (__int16)v44);
            uint64_t v564 = 0;
            log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 302, (uint64_t)"%s%s %s%s %s%s", v69, v70, v71, v72, v73, "BEG");
          }
          if ((int)(cstdlib_strlen(__s) << 16) < 1)
          {
            int v596 = 0;
            int v75 = 0;
          }
          else
          {
            uint64_t v74 = 0;
            int v75 = 0;
            int v596 = 0;
            do
            {
              uint64_t v76 = __s[v74];
              if (v76 == 91)
              {
                int v75 = 1;
              }
              else if (v76 == 93 || v75 == 0)
              {
                int v75 = 0;
                int v78 = v596;
                if (*(unsigned __int8 *)(v4 + v76 + 2144) != 0xFF) {
                  int v78 = v596 + 2;
                }
                int v596 = v78;
              }
              ++v74;
            }
            while ((int)v74 < (__int16)cstdlib_strlen(__s));
          }
          unsigned __int16 v86 = cstdlib_strstr(v67, __s);
          int v87 = 0;
          if (v86)
          {
            uint64_t v89 = __s;
            int v88 = v583;
          }
          else
          {
            int v88 = v583;
            if ((__int16)v596 >= 3)
            {
              uint64_t v89 = __s;
              uint64_t v90 = *__s;
              if (v90 == 93)
              {
                int v75 = 0;
              }
              else if (v90 == 91)
              {
                int v75 = 1;
              }
              else if (!*__s)
              {
                goto LABEL_155;
              }
              uint64_t v89 = __s + 1;
              while (v75 == 1 || *(unsigned __int8 *)(v4 + v90 + 2144) == 255)
              {
                unsigned int v103 = *(unsigned __int8 *)v89++;
                uint64_t v90 = v103;
                if (v103 == 93) {
                  int v104 = 0;
                }
                else {
                  int v104 = v75;
                }
                if (v90 == 91) {
                  int v75 = 1;
                }
                else {
                  int v75 = v104;
                }
                if (!v90)
                {
                  --v89;
                  goto LABEL_155;
                }
              }
              if (*v89)
              {
                uint64_t v143 = cstdlib_strstr(v67, v89);
                if (v143)
                {
                  unsigned __int16 v86 = v143;
                  int v87 = 0;
                  int v91 = 2;
                  goto LABEL_140;
                }
                int v144 = v572;
                uint64_t v145 = *v572;
                int v146 = v570;
                if (v145 == 91) {
                  int v146 = 0;
                }
                if (v145 == 93) {
                  int v146 = 1;
                }
                while (1)
                {
                  if (v144 == __s)
                  {
                    int v570 = v146;
                    uint64_t v89 = __s;
                    goto LABEL_155;
                  }
                  if (v146 != 1 && *(unsigned __int8 *)(v4 + v145 + 2144) != 255) {
                    break;
                  }
                  unsigned int v147 = *--v144;
                  uint64_t v145 = v147;
                  if (v147 == 91) {
                    int v146 = 0;
                  }
                  if (v145 == 93) {
                    int v146 = 1;
                  }
                }
                int v570 = v146;
                *int v144 = 0;
                uint64_t v148 = cstdlib_strstr(v67, __s);
                if (v148)
                {
                  unsigned __int16 v86 = v148;
                  int v91 = 0;
                  int v87 = 2;
                  uint64_t v89 = __s;
                  goto LABEL_140;
                }
                unsigned __int16 v86 = cstdlib_strstr(v67, v89);
                int v87 = 2;
LABEL_139:
                int v91 = v87;
                if (!v86) {
                  goto LABEL_155;
                }
LABEL_140:
                int v596 = v91;
                int v584 = v87;
                uint64_t v92 = v588;
                BOOL HasTraceTuningDataSubscriber = log_HasTraceTuningDataSubscriber(*(void *)(v588 + 32));
                int v99 = v584;
                uint64_t v100 = "MATCH";
                uint64_t v101 = __s;
                int v102 = v584;
                if (!HasTraceTuningDataSubscriber)
                {
LABEL_157:
                  v583 = v101;
                  int __sa = v102;
                  if (v67 != v86)
                  {
                    do
                    {
                      if (!v45 && *(unsigned __int8 *)(v4 + *v67 + 2144) != 255) {
                        v46 += *(unsigned __int16 *)(v4 + 3578);
                      }
                      int v114 = *(unsigned __int8 *)(*(void *)(a3 + 16) + (__int16)++v44);
                      ++v67;
                      if (v114 == 93) {
                        int v115 = 0;
                      }
                      else {
                        int v115 = v45;
                      }
                      if (v114 == 91) {
                        int v45 = 1;
                      }
                      else {
                        int v45 = v115;
                      }
                    }
                    while (v67 != v86);
                    int v44 = v86 - v574;
                    int v67 = v86;
                  }
                  int v116 = v596 + v580;
                  uint64_t v117 = (unsigned __int8 *)v586;
                  if (v86 == v586)
                  {
                    a1 = v588;
                  }
                  else
                  {
                    uint64_t v118 = (unsigned __int8 *)(v586 + 1);
                    while (1)
                    {
                      unsigned int v120 = *v118++;
                      uint64_t v119 = v120;
                      if (!v120) {
                        break;
                      }
                      if (*(unsigned __int8 *)(v4 + v119 + 2144) != 255)
                      {
                        BOOL v121 = v119 == 35;
                        goto LABEL_176;
                      }
                    }
                    BOOL v121 = 1;
LABEL_176:
                    BOOL v581 = v121;
                    unsigned __int16 v122 = v44;
                    while ((--v122 & 0x8000) == 0)
                    {
                      uint64_t v123 = *(unsigned __int8 *)(*(void *)(a3 + 16) + v122);
                      if (*(unsigned __int8 *)(v4 + v123 + 2144) != 255)
                      {
                        BOOL v124 = v123 != 35;
                        goto LABEL_181;
                      }
                    }
                    BOOL v124 = 0;
LABEL_181:
                    if ((int)(cstdlib_strlen(v89) << 16) >= 1)
                    {
                      BOOL v597 = v124;
                      int v125 = 0;
                      do
                      {
                        if (!v45 && *(unsigned __int8 *)(v4 + *v67 + 2144) != 255)
                        {
                          uint64_t v128 = *(void *)(a3 + 3608);
                          if (v128)
                          {
                            if (!v597) {
                              *(_DWORD *)(v128 + 4 * (__int16)v46) = *(_DWORD *)(*(void *)(a3 + 3616)
                            }
                                                                                 + 4 * (__int16)v116);
                            unsigned int v129 = *(unsigned __int16 *)(*(void *)a3 + 3578);
                            ++v116;
                            ++v46;
                            if (v129 >= 2)
                            {
                              uint64_t v130 = *(void *)(a3 + 3616);
                              for (unsigned int i = 1; i < v129; ++i)
                                *(_DWORD *)(v128 + 4 * (__int16)v46++) = *(_DWORD *)(v130 + 4 * (__int16)v116++);
                            }
                            BOOL v597 = 0;
                          }
                        }
                        int v126 = *(unsigned __int8 *)(*(void *)(a3 + 16) + (__int16)++v44);
                        ++v67;
                        if (v126 == 93) {
                          int v127 = 0;
                        }
                        else {
                          int v127 = v45;
                        }
                        if (v126 == 91) {
                          int v45 = 1;
                        }
                        else {
                          int v45 = v127;
                        }
                        ++v125;
                      }
                      while ((__int16)cstdlib_strlen(v89) > (__int16)v125);
                    }
                    if (v581)
                    {
                      uint64_t v117 = (unsigned __int8 *)v586;
                      a1 = v588;
                    }
                    else
                    {
                      uint64_t v132 = *(void *)(a3 + 3608);
                      uint64_t v117 = (unsigned __int8 *)v586;
                      a1 = v588;
                      if (v132) {
                        *(_DWORD *)(v132 + 4 * (__int16)v46 - 4) = -1;
                      }
                    }
                  }
                  if (v67 != (char *)v117)
                  {
                    int v133 = v44;
                    uint64_t v134 = v67;
                    do
                    {
                      if (!v45 && *(unsigned __int8 *)(v4 + *v134 + 2144) != 255) {
                        v46 += *(unsigned __int16 *)(v4 + 3578);
                      }
                      int v135 = *(unsigned __int8 *)(*(void *)(a3 + 16) + (__int16)++v133);
                      ++v134;
                      if (v135 == 93) {
                        int v136 = 0;
                      }
                      else {
                        int v136 = v45;
                      }
                      if (v135 == 91) {
                        int v45 = 1;
                      }
                      else {
                        int v45 = v136;
                      }
                    }
                    while (v134 != (char *)v117);
                    LOWORD(v44) = v44 + (_WORD)v117 - (_WORD)v67;
                  }
                  __int16 v137 = *(_WORD *)(a3 + 12) - 2;
                  *(_WORD *)(a3 + 12) = v137;
                  uint64_t v138 = *(void *)(a3 + 24);
                  int v22 = v578;
                  if (v138)
                  {
                    *(unsigned char *)(v138 + (__int16)v44 + 2) += *(unsigned char *)(v138 + (__int16)v44 + 1)
                                                         + *(unsigned char *)(v138 + (__int16)v44);
                    __int16 v137 = *v6;
                  }
                  int v580 = v116 + __sa;
                  if ((__int16)v44 >= v137)
                  {
                    __int16 __s = v576;
                    uint64_t v3 = 2229280789;
                  }
                  else
                  {
                    uint64_t v139 = (__int16)v44;
                    uint64_t v3 = 2229280789;
                    do
                    {
                      *(unsigned char *)(*(void *)(a3 + 16) + v139) = *(unsigned char *)(*(void *)(a3 + 16) + v139 + 2);
                      *(unsigned char *)(*(void *)(a3 + 248) + v139) = *(unsigned char *)(*(void *)(a3 + 248) + v139 + 2);
                      uint64_t v140 = *(void *)(a3 + 24);
                      if (v140) {
                        *(unsigned char *)(v140 + v139) = *(unsigned char *)(v140 + v139 + 2);
                      }
                      ++v139;
                    }
                    while (v139 < *v6);
                    __int16 __s = v576;
                  }
                  goto LABEL_226;
                }
              }
              else
              {
LABEL_155:
                uint64_t v92 = v588;
                log_OutText(*(void *)(v588 + 32), v579, 3, 0, (uint64_t)"    Warning: no match, conflicting phonetics", v83, v84, v85, v563);
                log_OutText(*(void *)(v588 + 32), v579, 3, 0, (uint64_t)"    Carrier: %s", v105, v106, v107, (uint64_t)__s);
                log_OutText(*(void *)(v588 + 32), v579, 3, 0, (uint64_t)"    Phonemes: %s", v108, v109, v110, (uint64_t)v67);
                BOOL v111 = log_HasTraceTuningDataSubscriber(*(void *)(v588 + 32));
                int v99 = 0;
                int v102 = 0;
                uint64_t v100 = "NOMATCH";
                unsigned __int16 v86 = v586;
                uint64_t v101 = __s;
                if (!v111) {
                  goto LABEL_157;
                }
              }
              uint64_t v112 = *(uint64_t ***)(v92 + 32);
              v566 = v100;
              uint64_t v564 = 0;
              v565 = "RES";
              int v113 = v99;
              log_OutTraceTuningData(v112, 302, (uint64_t)"%s%s %s%s", v94, v95, v96, v97, v98, "END");
              uint64_t v101 = __s;
              int v102 = v113;
              goto LABEL_157;
            }
            uint64_t v89 = __s;
          }
          __int16 __s = v88;
          goto LABEL_139;
        }
        int v22 = v578;
      }
LABEL_235:
      int v44 = (__int16)(v44 + 1);
      int v43 = *v6;
      if (v44 >= v43) {
        goto LABEL_256;
      }
    }
    if ((__int16)v44 < v56)
    {
      uint64_t v60 = *(void *)(a3 + 16);
      unsigned int v61 = *(unsigned __int8 *)(v60 + (__int16)v44);
      while (v61 != 19)
      {
        if (!v45 && *(unsigned __int8 *)(v4 + v61 + 2144) != 255)
        {
          unsigned int v63 = *(unsigned __int16 *)(v4 + 3578);
          if (*(_WORD *)(v4 + 3578))
          {
            unsigned int v64 = 0;
            uint64_t v65 = *(void *)(a3 + 3608);
            do
            {
              if (v65) {
                *(_DWORD *)(v65 + 4 * (__int16)v46) = -2;
              }
              ++v46;
              ++v64;
            }
            while (v64 < v63);
          }
        }
        ++v48;
        unsigned int v61 = *(unsigned __int8 *)(v60 + v48);
        if (v61 == 93) {
          int v62 = 0;
        }
        else {
          int v62 = v45;
        }
        if (v61 == 91) {
          int v45 = 1;
        }
        else {
          int v45 = v62;
        }
        if (v48 == v56) {
          goto LABEL_118;
        }
      }
      LOWORD(v44) = v48;
    }
    if ((unsigned __int16)v44 == (unsigned __int16)v56)
    {
LABEL_118:
      LOWORD(v44) = v56;
    }
    else
    {
      __int16 v79 = v56 - 2;
      *(_WORD *)(a3 + 12) = v79;
      uint64_t v80 = *(void *)(a3 + 24);
      if (v80)
      {
        *(unsigned char *)(v80 + (__int16)v44 + 2) += *(unsigned char *)(v80 + (__int16)v44 + 1) + *(unsigned char *)(v80 + (__int16)v44);
        __int16 v79 = *v6;
      }
      if ((__int16)v44 < v79)
      {
        uint64_t v81 = (__int16)v44;
        do
        {
          *(unsigned char *)(*(void *)(a3 + 16) + v81) = *(unsigned char *)(*(void *)(a3 + 16) + v81 + 2);
          *(unsigned char *)(*(void *)(a3 + 248) + v81) = *(unsigned char *)(*(void *)(a3 + 248) + v81 + 2);
          uint64_t v82 = *(void *)(a3 + 24);
          if (v82) {
            *(unsigned char *)(v82 + v81) = *(unsigned char *)(v82 + v81 + 2);
          }
          ++v81;
        }
        while (v81 < *v6);
      }
    }
    goto LABEL_226;
  }
LABEL_256:
  if (v589) {
    heap_Free(*(void **)(a1 + 8), v589);
  }
  if (log_HasTraceTuningDataSubscriber(*(void *)(a1 + 32)))
  {
    v566 = (const char *)*(__int16 *)(a3 + 12);
    v567 = *(const char **)(a3 + 16);
    uint64_t v564 = 0;
    v565 = "OUT";
    log_OutTraceTuningData(*(uint64_t ***)(a1 + 32), 301, (uint64_t)"%s%s %s%.*s", v149, v150, v151, v152, v153, "END");
  }
  if (*(_DWORD *)(v4 + 2516))
  {
    int v154 = *v6;
    if (v154 >= 1)
    {
      int v155 = 0;
      LOWORD(v156) = 0;
      do
      {
        uint64_t v157 = *(unsigned __int8 *)(*(void *)(a3 + 16) + (__int16)v156);
        if (v157 == 62)
        {
          if (!v22) {
            return v3;
          }
          if ((__int16)v154 >= (__int16)v156)
          {
            __int16 v160 = v156;
            do
            {
              uint64_t v161 = v160 + 1;
              *(unsigned char *)(*(void *)(a3 + 248) + v160) = *(unsigned char *)(*(void *)(a3 + 248) + v161);
              *(unsigned char *)(*(void *)(a3 + 16) + v160++) = *(unsigned char *)(*(void *)(a3 + 16) + v161);
              int v154 = *(__int16 *)(a3 + 12);
            }
            while (v154 >= v160);
          }
          int v22 = 0;
          *int v6 = v154 - 1;
          LOWORD(v156) = v156 - 1;
        }
        else if (v157 == 60)
        {
          if ((__int16)v154 >= (__int16)v156)
          {
            __int16 v158 = v156;
            do
            {
              uint64_t v159 = v158 + 1;
              *(unsigned char *)(*(void *)(a3 + 16) + v158) = *(unsigned char *)(*(void *)(a3 + 16) + v159);
              *(unsigned char *)(*(void *)(a3 + 248) + v158++) = *(unsigned char *)(*(void *)(a3 + 248) + v159);
              int v154 = *(__int16 *)(a3 + 12);
            }
            while (v154 >= v158);
          }
          *int v6 = v154 - 1;
          LOWORD(v156) = v156 - 1;
          int v22 = 1;
        }
        else if (*(unsigned __int8 *)(v4 + v157 + 2144) != 255)
        {
          uint64_t v162 = *(void *)(a3 + 456);
          __int16 v163 = v155++;
          if (v22 == 1)
          {
            *(unsigned char *)(v162 + v163) = 1;
          }
          else
          {
            int v22 = 0;
            *(unsigned char *)(v162 + v163) = 0;
          }
        }
        int v156 = (__int16)(v156 + 1);
        int v154 = *v6;
      }
      while (v156 < v154);
    }
  }
  unsigned __int16 v164 = *(_DWORD **)(a3 + 1784);
  _DWORD *v164 = 0;
  int v165 = *(__int16 *)(a3 + 12);
  if (v165 <= 1)
  {
    __int16 v166 = 0;
    goto LABEL_317;
  }
  __int16 v166 = 0;
  int v167 = 1;
  do
  {
    uint64_t v168 = *(void *)(a3 + 16);
    uint64_t v169 = v167 - 1;
    uint64_t v170 = *(unsigned __int8 *)(v168 + (__int16)v167);
    if (*(unsigned char *)(v168 + v169) == 35 && v170 == 91)
    {
      uint64_t v171 = 0;
      int v172 = v167 + 1;
      unsigned __int16 v173 = v167 + 1;
      while (1)
      {
        int v174 = *(unsigned __int8 *)(v168 + (__int16)v173);
        if (v174 == 93) {
          break;
        }
        ++v173;
        v603[v171] = v174;
        if (v173 != (unsigned __int16)v165)
        {
          BOOL v21 = v171++ == 9;
          if (!v21) {
            continue;
          }
        }
        return 2229280789;
      }
      v603[v171] = 0;
      int v175 = cstdlib_atoi(v603);
      if (v175 >= 0xFFFF) {
        int v176 = 0xFFFF;
      }
      else {
        int v176 = v175;
      }
      *(_WORD *)(*(void *)(a3 + 1784) + 2 * v166) = v176 & ~(unsigned __int16)(v176 >> 31);
      __int16 v177 = v171 + 2;
      uint64_t v178 = *(void *)(a3 + 24);
      int v179 = (__int16)(v171 + 2);
      if (!v178)
      {
        __int16 v181 = *v6;
        goto LABEL_303;
      }
      int v180 = v167 + v177;
      if (v180 <= (__int16)v172)
      {
        __int16 v181 = *v6;
      }
      else
      {
        do
          *(unsigned char *)(*(void *)(a3 + 24) + (__int16)v167) += *(unsigned char *)(*(void *)(a3 + 24) + (__int16)v172++);
        while (v180 > (__int16)v172);
        uint64_t v178 = *(void *)(a3 + 24);
        __int16 v181 = *(_WORD *)(a3 + 12);
        if (!v178) {
          goto LABEL_303;
        }
      }
      if (v181 - v179 == v167)
      {
        *(unsigned char *)(v178 + v169) += *(unsigned char *)(v178 + (__int16)v167);
        __int16 v181 = *v6;
LABEL_313:
        LOWORD(v165) = v181 - v177;
        *int v6 = v165;
        LOWORD(v167) = v167 - 1;
        goto LABEL_314;
      }
LABEL_303:
      if (v181 - v179 > (__int16)v167)
      {
        int v182 = (__int16)v167;
        LOWORD(v183) = v167;
        do
        {
          uint64_t v184 = v182 + v179;
          uint64_t v183 = (__int16)v183;
          *(unsigned char *)(*(void *)(a3 + 16) + (__int16)v183) = *(unsigned char *)(*(void *)(a3 + 16) + v184);
          uint64_t v185 = *(void *)(a3 + 24);
          if (v185)
          {
            char v186 = *(unsigned char *)(v185 + v184);
            if ((unsigned __int16)v183 == (unsigned __int16)v167) {
              v186 += *(unsigned char *)(v185 + v183);
            }
            *(unsigned char *)(v185 + v183) = v186;
          }
          if ((*(_DWORD *)(v4 + 3092) & 0x80000000) == 0) {
            *(unsigned char *)(*(void *)(a3 + 248) + v183) = *(unsigned char *)(*(void *)(a3 + 248) + v184);
          }
          LOWORD(v183) = v183 + 1;
          int v182 = (__int16)v183;
        }
        while (*v6 - v179 > (__int16)v183);
        __int16 v181 = *v6;
      }
      goto LABEL_313;
    }
    if (*(unsigned __int8 *)(v4 + v170 + 2144) != 255)
    {
      *(_WORD *)(*(void *)(a3 + 1784) + 2 * ++v166) = 0;
      LOWORD(v165) = *(_WORD *)(a3 + 12);
    }
LABEL_314:
    int v167 = (__int16)(v167 + 1);
  }
  while (v167 < (__int16)v165);
  unsigned __int16 v164 = *(_DWORD **)(a3 + 1784);
  uint64_t v3 = 2229280789;
LABEL_317:
  uint64_t v187 = v166 + 1;
  *((_WORD *)v164 + v187) = 0;
  if ((*(_DWORD *)(v4 + 3068) & 0x80000000) == 0) {
    *(unsigned char *)(*(void *)(a3 + 224) + v187) = 0;
  }
  if ((*(_DWORD *)(v4 + 3072) & 0x80000000) == 0) {
    *(unsigned char *)(*(void *)(a3 + 240) + v187) = 0;
  }
  int v188 = *(__int16 *)(a3 + 12);
  __int16 v189 = *(_WORD *)(a3 + 12);
  uint64_t v190 = v189;
  uint64_t v191 = *(unsigned char **)(a3 + 16);
  while (1)
  {
    uint64_t v192 = v190 - 1;
    if (v191[v192] == 35) {
      break;
    }
    uint64_t v193 = *(void *)(a3 + 24);
    if (v193)
    {
      *(unsigned char *)(v193 + v188 - 2) += *(unsigned char *)(v193 + v192);
      __int16 v189 = *(_WORD *)(a3 + 12);
      uint64_t v191 = *(unsigned char **)(a3 + 16);
    }
    *int v6 = --v189;
    int v188 = v189;
    uint64_t v190 = v189;
  }
  if (v189 >= 1)
  {
    uint64_t v194 = 0;
    while (1)
    {
      uint64_t v195 = v191[v194];
      if (v195 != 35 && *(unsigned __int8 *)(v4 + v195 + 2144) != 255) {
        break;
      }
      if ((unsigned __int16)v189 == ++v194)
      {
        LOWORD(v194) = v189;
        break;
      }
    }
    if (v189 >= 1)
    {
      __int16 v196 = v189;
      while (v196 >= 1)
      {
        uint64_t v197 = v191[(unsigned __int16)--v196];
        if (v197 != 35 && *(unsigned __int8 *)(v4 + v197 + 2144) != 255) {
          goto LABEL_341;
        }
      }
      __int16 v196 = -1;
LABEL_341:
      if ((__int16)v194 <= v196)
      {
        int v198 = 1;
        do
        {
          unsigned int v199 = v191[(__int16)v194];
          unsigned __int8 v200 = (v199 > 0x2A) | (0x3D7FFFFFFFFuLL >> v199);
          BOOL v201 = v199 > 0x2D;
          uint64_t v202 = (1 << v199) & 0x242800000000;
          if (!v201 && v202 != 0) {
            int v198 = 0;
          }
          LODWORD(v194) = (__int16)(v194 + 1);
        }
        while ((((int)v194 <= v196) & v200) != 0);
      }
      else
      {
        int v198 = 1;
      }
      if ((*(_DWORD *)(v4 + 3092) & 0x80000000) != 0)
      {
        char v204 = v600;
        if (v600 == 2 && v198 == 1) {
          char v204 = 0;
        }
        char v600 = v204;
      }
      if (*v191 == 35 && v191[v189 - 1] == 35)
      {
        if ((*(_DWORD *)(v4 + 3104) & 0x80000000) == 0)
        {
          uint64_t v206 = cstdlib_strchr((char *)(v4 + 2400), (char)v191[1]);
          if (v206) {
            char v207 = (_BYTE)v206 - (v4 + 96) + 1;
          }
          else {
            char v207 = 0;
          }
          **(unsigned char **)(a3 + 264) = v207;
          **(unsigned char **)(a3 + 272) = 0;
        }
        if ((*(_DWORD *)(v4 + 3120) & 0x80000000) == 0 || (*(_DWORD *)(v4 + 3132) & 0x80000000) == 0) {
          **(unsigned char **)(a3 + 280) = 0;
        }
        if ((*(_DWORD *)(v4 + 3136) & 0x80000000) == 0) {
          **(unsigned char **)(a3 + 288) = 1;
        }
        if ((*(_DWORD *)(v4 + 3140) & 0x80000000) == 0) {
          **(unsigned char **)(a3 + 296) = 1;
        }
        if ((*(_DWORD *)(v4 + 3144) & 0x80000000) == 0) {
          **(unsigned char **)(a3 + 304) = 1;
        }
        if ((*(_DWORD *)(v4 + 3148) & 0x80000000) == 0) {
          **(unsigned char **)(a3 + 312) = 1;
        }
        uint64_t v208 = *(unsigned __int8 **)(a3 + 24);
        if (v208) {
          **(_WORD **)(a3 + 1800) = *v208;
        }
        if (*(_DWORD *)(v4 + 2604) == 2) {
          char v209 = 87;
        }
        else {
          char v209 = 88;
        }
        **(unsigned char **)(a3 + 48) = v209;
        **(unsigned char **)(a3 + 32) = **(unsigned char **)(a3 + 16);
        **(unsigned char **)(a3 + 72) = 1;
        **(unsigned char **)(a3 + 80) = 1;
        **(unsigned char **)(a3 + 88) = 0;
        **(unsigned char **)(a3 + 96) = 3;
        v210 = (void *)(a3 + 104);
        **(unsigned char **)(a3 + 104) = 1;
        **(unsigned char **)(a3 + 112) = 0;
        **(unsigned char **)(a3 + 120) = 1;
        **(unsigned char **)(a3 + 128) = 0;
        **(unsigned char **)(a3 + 144) = 4;
        if ((*(_DWORD *)(v4 + 3068) & 0x80000000) == 0)
        {
          **(unsigned char **)(a3 + 216) = 0;
          **(unsigned char **)(a3 + 224) = 0;
        }
        if ((*(_DWORD *)(v4 + 3072) & 0x80000000) == 0)
        {
          **(unsigned char **)(a3 + 232) = 0;
          **(unsigned char **)(a3 + 240) = 0;
        }
        if ((*(_DWORD *)(v4 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v4 + 3396) & 0x80000000) == 0) {
          **(void **)(a3 + 3552) = 0xC800C8FF38FF38;
        }
        if ((*(_DWORD *)(v4 + 3092) & 0x80000000) != 0) {
          **(unsigned char **)(a3 + 248) = v600;
        }
        **(unsigned char **)(a3 + 152) = 3;
        **(unsigned char **)(a3 + 160) = 0;
        **(unsigned char **)(a3 + 168) = 0;
        **(unsigned char **)(a3 + 176) = 4;
        **(unsigned char **)(a3 + 184) = 4;
        __int16 v211 = 1;
        **(unsigned char **)(a3 + 192) = 1;
        int v212 = *(__int16 *)(a3 + 12);
        if (v212 >= 3)
        {
          unsigned __int16 v213 = 0;
          BOOL v577 = 0;
          int v214 = 0;
          uint64_t v215 = 0;
          char v571 = v600;
          v598 = (char *)(v4 + 2400);
          uint64_t v216 = *(void *)(a3 + 16);
          __int16 v217 = 2;
          int v218 = 1;
          int v219 = 1;
          int v220 = 1;
          int v585 = 1;
          int v221 = 1;
          while (1)
          {
            __int16 v222 = v217;
            uint64_t v223 = v213;
            uint64_t v224 = v211;
            uint64_t v225 = *(unsigned __int8 *)(v216 + v211);
            uint64_t v226 = *(void *)(a3 + 24);
            if (*(unsigned __int8 *)(v4 + v225 + 2144) == 255)
            {
              if (v226) {
                v214 += *(unsigned __int8 *)(v226 + v211);
              }
              uint64_t v228 = v215;
              goto LABEL_667;
            }
            uint64_t v590 = v223;
            if (v226)
            {
              uint64_t v227 = (__int16)v221;
              *(_WORD *)(*(void *)(a3 + 1800) + 2 * (__int16)v221) = *(unsigned __int8 *)(v226 + v211)
                                                                       + v214;
              LOBYTE(v225) = *(unsigned char *)(v216 + v211);
              int v582 = 0;
            }
            else
            {
              int v582 = v214;
              uint64_t v227 = (__int16)v221;
            }
            __sb = (char *)v217;
            *(unsigned char *)(*(void *)(a3 + 32) + v227) = v225;
            uint64_t v229 = *(void *)(a3 + 248);
            char v230 = v571;
            if ((*(_DWORD *)(v4 + 3092) & 0x80000000) == 0) {
              char v230 = *(unsigned char *)(v229 + v211);
            }
            *(unsigned char *)(v229 + v227) = v230;
            if ((*(_DWORD *)(v4 + 3104) & 0x80000000) == 0)
            {
              uint64_t v231 = cstdlib_strchr(v598, *(char *)(*(void *)(a3 + 16) + v218 + 1));
              char v232 = (_BYTE)v231 - (_BYTE)v598;
              BOOL v21 = v231 == 0;
              v210 = (void *)(a3 + 104);
              if (v21) {
                char v233 = 0;
              }
              else {
                char v233 = v232 + 1;
              }
              *(unsigned char *)(*(void *)(a3 + 264) + v227) = v233;
            }
            uint64_t v234 = *(void *)(a3 + 16);
            if (*(unsigned char *)(v234 + v224) == 35)
            {
              __int16 v222 = (__int16)__sb;
              if ((*(_DWORD *)(v4 + 3120) & 0x80000000) == 0 || (*(_DWORD *)(v4 + 3132) & 0x80000000) == 0) {
                *(unsigned char *)(*(void *)(a3 + 280) + v227) = 0;
              }
              if ((*(_DWORD *)(v4 + 3104) & 0x80000000) == 0) {
                *(unsigned char *)(*(void *)(a3 + 272) + v227) = 0;
              }
              *(unsigned char *)(*(void *)(a3 + 72) + v227) = 1;
              *(unsigned char *)(*(void *)(a3 + 80) + v227) = 1;
              *(unsigned char *)(*(void *)(a3 + 88) + v227) = 0;
              *(unsigned char *)(*(void *)(a3 + 96) + v227) = 3;
              *(unsigned char *)(*(void *)(a3 + 152) + v227) = 3;
              *(unsigned char *)(*(void *)(a3 + 160) + v227) = 0;
              *(unsigned char *)(*(void *)(a3 + 168) + v227) = 0;
              *(unsigned char *)(*(void *)(a3 + 176) + v227) = 4;
              *(unsigned char *)(*(void *)(a3 + 184) + v227) = 4;
              *(unsigned char *)(*(void *)(a3 + 104) + v227) = 2;
              if ((((_WORD)v224 - 1) & 0x8000) == 0)
              {
                unsigned __int16 v235 = v224 - 1;
                do
                {
                  uint64_t v236 = *(unsigned __int8 *)(*(void *)(a3 + 16) + v235);
                  if (*(unsigned __int8 *)(v4 + v236 + 2144) != 255) {
                    break;
                  }
                  if (v236 == 37)
                  {
                    *(unsigned char *)(*v210 + v227) = 3;
                    break;
                  }
                  BOOL v21 = v235-- == 0;
                }
                while (!v21);
              }
              if (*(unsigned char *)(*v210 + v227) == 2 && *v6 > (__int16)(v224 + 1))
              {
                uint64_t v241 = __sb;
                while (1)
                {
                  uint64_t v242 = v241[*(void *)(a3 + 16)];
                  if (*(unsigned __int8 *)(v4 + v242 + 2144) != 255) {
                    break;
                  }
                  if (v242 == 37)
                  {
                    char v313 = 4;
                    uint64_t v314 = v210;
                    goto LABEL_627;
                  }
                  if ((uint64_t)++v241 >= *v6) {
                    goto LABEL_628;
                  }
                }
              }
              goto LABEL_628;
            }
            int v587 = (__int16)(v224 + 1);
            uint64_t v237 = __sb;
            if (v587 < *v6)
            {
              while (1)
              {
                uint64_t v238 = v237[v234];
                if (v238 <= 0x2D && ((1 << v238) & 0x202800000000) != 0)
                {
                  char v240 = 1;
                  goto LABEL_436;
                }
                if (*(unsigned __int8 *)(v4 + v238 + 2144) != 255) {
                  break;
                }
                if ((uint64_t)++v237 >= *v6) {
                  goto LABEL_437;
                }
              }
              char v240 = 0;
LABEL_436:
              *(unsigned char *)(*(void *)(a3 + 72) + v227) = v240;
            }
LABEL_437:
            LOWORD(v243) = v224 - 1;
            if ((((_WORD)v224 - 1) & 0x8000) == 0)
            {
              uint64_t v244 = v590;
              while (1)
              {
                uint64_t v245 = *(unsigned __int8 *)(*(void *)(a3 + 16) + v244);
                if (v245 <= 0x2D && ((1 << v245) & 0x202800000000) != 0)
                {
                  char v248 = 1;
                  goto LABEL_448;
                }
                if (*(unsigned __int8 *)(v4 + v245 + 2144) != 255) {
                  break;
                }
                int v247 = (__int16)v244--;
                if (v247 <= 0) {
                  goto LABEL_449;
                }
              }
              char v248 = 0;
LABEL_448:
              *(unsigned char *)(*(void *)(a3 + 80) + v227) = v248;
            }
LABEL_449:
            if ((*(_DWORD *)(v4 + 3104) & 0x80000000) == 0)
            {
              uint64_t v249 = v227 - 1;
              if (*(unsigned char *)(*(void *)(a3 + 32) + v227 - 1) == 35)
              {
                char v250 = cstdlib_strlen(v598) + 1;
                v210 = (void *)(a3 + 104);
                uint64_t v251 = *(void *)(a3 + 272);
              }
              else
              {
                uint64_t v251 = *(void *)(a3 + 272);
                if (*(unsigned char *)(*(void *)(a3 + 80) + v227) == 1) {
                  char v250 = *(unsigned char *)(*(void *)(a3 + 264) + v249);
                }
                else {
                  char v250 = *(unsigned char *)(v251 + v249);
                }
              }
              *(unsigned char *)(v251 + v227) = v250;
            }
            if (v587 < *v6)
            {
              int v252 = 0;
              uint64_t v253 = 0;
              uint64_t v254 = __sb;
              while (2)
              {
                uint64_t v255 = 1;
                switch(v254[*(void *)(a3 + 16)])
                {
                  case '""':
                    int v252 = 1;
                    goto LABEL_460;
                  case '#':
                  case '%':
                  case '-':
                    goto LABEL_464;
                  case '\'':
                    goto LABEL_461;
                  default:
LABEL_460:
                    uint64_t v255 = v253;
LABEL_461:
                    ++v254;
                    uint64_t v253 = v255;
                    if ((uint64_t)v254 >= *v6) {
                      goto LABEL_464;
                    }
                    continue;
                }
              }
            }
            uint64_t v253 = 0;
            int v252 = 0;
LABEL_464:
            int v243 = (__int16)v243;
            if (((__int16)v243 & 0x80000000) == 0)
            {
              uint64_t v256 = v590;
              while (2)
              {
                uint64_t v257 = 1;
                switch(*(unsigned char *)(*(void *)(a3 + 16) + v256))
                {
                  case '""':
                    int v252 = 1;
                    goto LABEL_468;
                  case '#':
                  case '%':
                  case '-':
                    break;
                  case '\'':
                    goto LABEL_469;
                  default:
LABEL_468:
                    uint64_t v257 = v253;
LABEL_469:
                    int v258 = (__int16)v256--;
                    uint64_t v253 = v257;
                    if (v258 <= 0) {
                      break;
                    }
                    continue;
                }
                break;
              }
            }
            if (v252 == 1) {
              break;
            }
            if (v253 == 1)
            {
              uint64_t v259 = *(void *)(a3 + 88);
              char v260 = 2;
              goto LABEL_474;
            }
            *(unsigned char *)(*(void *)(a3 + 88) + v227) = 0;
LABEL_475:
            int v261 = *(unsigned __int8 *)(*(void *)(a3 + 88) + v227);
            if (*(unsigned char *)(*(void *)(a3 + 88) + v227))
            {
              if (v261 == 1)
              {
                *(unsigned char *)(*(void *)(a3 + 160) + v227) = 7;
              }
              else if (v261 == 3)
              {
                if (v220) {
                  char v262 = 3;
                }
                else {
                  char v262 = 4;
                }
                if (!v219) {
                  char v262 = 2;
                }
                *(unsigned char *)(*(void *)(a3 + 160) + v227) = v262;
                if (*(unsigned char *)(*(void *)(a3 + 72) + v227) == 1) {
                  int v219 = 0;
                }
              }
              else
              {
                *(unsigned char *)(*(void *)(a3 + 160) + v227) = 1;
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a3 + 160) + v227) = 0;
            }
            *(unsigned char *)(*(void *)(a3 + 168) + v227) = 0;
            uint64_t v263 = v227 - 1;
            int v264 = *(unsigned __int8 *)(*(void *)(a3 + 112) + v227 - 1);
            if (*(unsigned char *)(*(void *)(a3 + 88) + v227) == 3
              && ((uint64_t v265 = *(void *)(a3 + 168), v264 == 2) || !*(unsigned char *)(v265 + v263)))
            {
              LOBYTE(v263) = 2;
            }
            else if (*(unsigned char *)(*(void *)(a3 + 112) + v227 - 1))
            {
              if (v264 != 1) {
                goto LABEL_502;
              }
              uint64_t v265 = *(void *)(a3 + 168);
              LODWORD(v263) = *(unsigned __int8 *)(v265 + v263);
              if (v263 == 2)
              {
                LOBYTE(v263) = 3;
              }
              else if (v263 != 4)
              {
                if (v263 != 3) {
                  goto LABEL_502;
                }
                LOBYTE(v263) = 4;
              }
            }
            else
            {
              uint64_t v265 = *(void *)(a3 + 168);
              LOBYTE(v263) = *(unsigned char *)(v265 + v263);
            }
            *(unsigned char *)(v265 + v227) = v263;
LABEL_502:
            int v575 = v221;
            *(unsigned char *)(*(void *)(a3 + 96) + v227) = 2;
            uint64_t v266 = (__int16)(v224 + 1);
            uint64_t v267 = (__int16)(v224 + 1);
            int v268 = *(__int16 *)(a3 + 12);
            uint64_t v573 = v267;
            if (v587 < v268)
            {
              uint64_t v266 = (uint64_t)__sb;
              do
              {
                uint64_t v269 = *(unsigned __int8 *)(*(void *)(a3 + 16) + v266);
                if (*(unsigned __int8 *)(v4 + v269 + 2144) == 255)
                {
                  int v270 = cstdlib_strchr(v598, (char)v269);
                  LOWORD(v268) = *v6;
                  if (!v270) {
                    break;
                  }
                }
                ++v266;
              }
              while (v266 < (__int16)v268);
              uint64_t v267 = v266;
              v210 = (void *)(a3 + 104);
            }
            if ((unsigned __int16)v266 == (unsigned __int16)v268 && *(unsigned char *)(v267 + *(void *)(a3 + 16) - 1) == 35)
            {
              *(unsigned char *)(*(void *)(a3 + 96) + v227) = 3;
              LOWORD(v268) = *(_WORD *)(a3 + 12);
            }
            if ((__int16)v266 < (__int16)v268)
            {
              uint64_t v271 = *(void *)(a3 + 16);
              uint64_t v272 = (__int16)v266;
              uint64_t v273 = v266 << 48;
              while (1)
              {
                uint64_t v274 = *(unsigned __int8 *)(v271 + v272);
                if (*(unsigned __int8 *)(v4 + v274 + 2144) != 255) {
                  break;
                }
                BOOL v201 = v274 > 0x2A;
                uint64_t v275 = (1 << v274) & 0x42800000000;
                if (!v201 && v275 != 0) {
                  break;
                }
                ++v272;
                v273 += 0x1000000000000;
                if ((unsigned __int16)v268 == (unsigned __int16)v272) {
                  goto LABEL_526;
                }
              }
              unsigned int v277 = *(unsigned __int8 *)(v271 + (v273 >> 48));
              BOOL v201 = v277 > 0x2A;
              uint64_t v278 = (1 << v277) & 0x42800000000;
              if (!v201 && v278 != 0) {
                *(unsigned char *)(*(void *)(a3 + 96) + v227) = 3;
              }
            }
LABEL_526:
            uint64_t v280 = *(void *)(a3 + 96);
            int v221 = v575;
            if (*(unsigned char *)(v280 + v227) == 2)
            {
              if ((__int16)v243 < 1)
              {
                __int16 v284 = v224 - 1;
                if (!v224)
                {
                  if (**(unsigned char **)(a3 + 16) == 35) {
                    *(unsigned char *)(v280 + v227) = 1;
                  }
                  __int16 v284 = -1;
                }
LABEL_537:
                uint64_t v285 = *(void *)(a3 + 16);
              }
              else
              {
                uint64_t v281 = v590;
                while (1)
                {
                  uint64_t v282 = *(unsigned __int8 *)(*(void *)(a3 + 16) + v281);
                  if (*(unsigned __int8 *)(v4 + v282 + 2144) == 255 && !cstdlib_strchr(v598, (char)v282)) {
                    break;
                  }
                  int v283 = (__int16)v281--;
                  if (v283 <= 1)
                  {
                    __int16 v284 = 0;
                    int v221 = v575;
                    v210 = (void *)(a3 + 104);
                    goto LABEL_537;
                  }
                }
                __int16 v284 = v281;
                uint64_t v285 = *(void *)(a3 + 16);
                if ((__int16)v281 < 1)
                {
                  int v221 = v575;
                  v210 = (void *)(a3 + 104);
                }
                else
                {
                  int v221 = v575;
                  v210 = (void *)(a3 + 104);
                  while (1)
                  {
                    uint64_t v318 = *(unsigned __int8 *)(v285 + (unsigned __int16)v284);
                    if (*(unsigned __int8 *)(v4 + v318 + 2144) != 255) {
                      break;
                    }
                    BOOL v201 = v318 > 0x2A;
                    uint64_t v319 = (1 << v318) & 0x42800000000;
                    if (!v201 && v319 != 0) {
                      break;
                    }
                    int v321 = v284--;
                    if (v321 <= 1)
                    {
                      __int16 v284 = 0;
                      break;
                    }
                  }
                }
              }
              unsigned int v286 = *(unsigned __int8 *)(v285 + v284);
              BOOL v201 = v286 > 0x2A;
              uint64_t v287 = (1 << v286) & 0x42800000000;
              if (!v201 && v287 != 0) {
                *(unsigned char *)(*(void *)(a3 + 96) + v227) = 1;
              }
            }
            *(unsigned char *)(*(void *)(a3 + 104) + v227) = 2;
            int v289 = *(__int16 *)(a3 + 12);
            uint64_t v290 = *(void *)(a3 + 16);
            LOWORD(v291) = v224 + 1;
            if (v587 < v289)
            {
              uint64_t v291 = __sb;
              while (1)
              {
                unsigned int v292 = v291[v290];
                BOOL v201 = v292 > 0x2A;
                uint64_t v293 = (1 << v292) & 0x42800000000;
                if (!v201 && v293 != 0) {
                  break;
                }
                if (*(unsigned __int16 *)(a3 + 12) == (unsigned __int16)++v291)
                {
                  LOWORD(v291) = *(_WORD *)(a3 + 12);
                  break;
                }
              }
              uint64_t v573 = (__int16)v291;
            }
            unsigned int v295 = *(unsigned __int8 *)(v290 + v573);
            if (v295 <= 0x2A && ((1 << v295) & 0x42800000000) != 0)
            {
              if (v289 - 1 == (__int16)v291 && v295 == 35)
              {
                char v297 = 5;
              }
              else
              {
                if (v295 != 37)
                {
                  int v306 = (__int16)((_WORD)v291 + 1);
                  while (2)
                  {
                    if (v306 >= v289) {
                      goto LABEL_563;
                    }
                    uint64_t v307 = *(unsigned __int8 *)(*(void *)(a3 + 16) + (__int16)v306);
                    if (*(unsigned __int8 *)(v4 + v307 + 2144) != 255) {
                      goto LABEL_563;
                    }
                    if ((__int16)v289 - 1 == (__int16)v306 && v307 == 35)
                    {
                      char v308 = 5;
                      goto LABEL_588;
                    }
                    if (v307 == 37)
                    {
                      char v308 = 4;
LABEL_588:
                      *(unsigned char *)(*v210 + v227) = v308;
                    }
                    int v306 = (__int16)(v306 + 1);
                    int v289 = *v6;
                    continue;
                  }
                }
                char v297 = 4;
              }
              *(unsigned char *)(*v210 + v227) = v297;
            }
LABEL_563:
            if (*(unsigned char *)(*v210 + v227) != 2) {
              goto LABEL_593;
            }
            uint64_t v298 = *(void *)(a3 + 16);
            if ((__int16)v243 >= 1)
            {
              uint64_t v299 = v590;
              while (1)
              {
                unsigned int v300 = *(unsigned __int8 *)(v298 + v299);
                int v243 = (__int16)v299;
                BOOL v201 = v300 > 0x2A;
                uint64_t v301 = (1 << v300) & 0x42800000000;
                if (!v201 && v301 != 0) {
                  break;
                }
                --v299;
                if (v243 <= 1)
                {
                  int v243 = 0;
                  break;
                }
              }
            }
            unsigned int v303 = *(unsigned __int8 *)(v298 + v243);
            if (v303 > 0x2A || ((1 << v303) & 0x42800000000) == 0) {
              goto LABEL_593;
            }
            if (!v243 && v303 == 35)
            {
              char v305 = 1;
LABEL_592:
              *(unsigned char *)(*v210 + v227) = v305;
              goto LABEL_593;
            }
            if (v303 == 37)
            {
              char v305 = 3;
              goto LABEL_592;
            }
            if ((__int16)(v243 - 1) >= 1)
            {
              unint64_t v315 = (unsigned __int16)(v243 - 1);
              do
              {
                uint64_t v316 = *(unsigned __int8 *)(*(void *)(a3 + 16) + v315);
                if (*(unsigned __int8 *)(v4 + v316 + 2144) != 255) {
                  break;
                }
                if (v316 == 37) {
                  *(unsigned char *)(*v210 + v227) = 3;
                }
              }
              while (v315++ < 0x7FFF);
            }
LABEL_593:
            unsigned int v309 = *(unsigned __int8 *)(*v210 + v227) - 1;
            if (v309 <= 4) {
              *(unsigned char *)(*(void *)(a3 + 176) + v227) = 0x402000103uLL >> (8 * v309);
            }
            __int16 v222 = (__int16)__sb;
            if (((*(_DWORD *)(v4 + 3120) & 0x80000000) == 0 || (*(_DWORD *)(v4 + 3132) & 0x80000000) == 0)
              && v587 < *v6)
            {
              unint64_t v310 = __sb;
              while (1)
              {
                unsigned int v311 = v310[*(void *)(a3 + 16)];
                if (v311 <= 0x2D && ((1 << v311) & 0x202800000000) != 0)
                {
                  char v313 = 0;
                  uint64_t v314 = (void *)(a3 + 280);
                  int v221 = v575;
                  v210 = (void *)(a3 + 104);
                  goto LABEL_627;
                }
                if (cstdlib_strchr("1234", (char)v311)) {
                  break;
                }
                if ((uint64_t)++v310 >= *v6)
                {
                  int v221 = v575;
                  v210 = (void *)(a3 + 104);
                  goto LABEL_628;
                }
              }
              char v313 = v310[*(void *)(a3 + 16)] - 49;
              uint64_t v314 = (void *)(a3 + 280);
              int v221 = v575;
              v210 = (void *)(a3 + 104);
LABEL_627:
              *(unsigned char *)(*v314 + v227) = v313;
            }
LABEL_628:
            if (*(unsigned char *)(*(void *)(a3 + 72) + v227) == 1)
            {
              if (*(unsigned char *)(*(void *)(a3 + 96) + v227) == 3)
              {
                if ((*(unsigned char *)(*(void *)(a3 + 104) + v227) & 0xFE) == 4) {
                  char v322 = 3;
                }
                else {
                  char v322 = 2;
                }
                *(unsigned char *)(*(void *)(a3 + 112) + v227) = v322;
              }
              else
              {
                *(unsigned char *)(*(void *)(a3 + 112) + v227) = 1;
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a3 + 112) + v227) = 0;
            }
            if (*(unsigned char *)(*(void *)(a3 + 32) + v227) != 35)
            {
              uint64_t v323 = *(void *)(a3 + 112);
              int v324 = *(unsigned __int8 *)(v227 + v323 - 1);
              if (v324 == 2 || v324 == 3 || (unsigned __int16)v221 == 1)
              {
                *(unsigned char *)(*(void *)(a3 + 184) + v227) = 0;
              }
              else
              {
                int v331 = *(unsigned __int8 *)(v323 + v227);
                if ((v331 - 2) >= 2)
                {
                  if (v331 != 1)
                  {
                    uint64_t v334 = *(void *)(a3 + 184);
                    if (v324 == 1) {
                      *(unsigned char *)(v334 + v227) = 1;
                    }
                    else {
                      *(unsigned char *)(v334 + v227) = 2;
                    }
                    goto LABEL_646;
                  }
                  uint64_t v332 = *(void *)(a3 + 184);
                  char v333 = 3;
                }
                else
                {
                  uint64_t v332 = *(void *)(a3 + 184);
                  char v333 = 4;
                }
                *(unsigned char *)(v332 + v227) = v333;
              }
            }
LABEL_646:
            uint64_t v228 = 0;
            int v327 = v585;
            if (v585 == 1) {
              char v328 = 1;
            }
            else {
              char v328 = 2;
            }
            *(unsigned char *)(*(void *)(a3 + 120) + v227) = v328;
            if (*(unsigned char *)(*(void *)(a3 + 72) + v227) == 1) {
              int v327 = 0;
            }
            int v585 = v327;
            *(unsigned char *)(*(void *)(a3 + 128) + v227) = v215;
            if (*(unsigned char *)(*(void *)(a3 + 112) + v227) != 3)
            {
              if (*(unsigned char *)(*(void *)(a3 + 32) + v227) == 35)
              {
                uint64_t v228 = v215;
              }
              else if (*(unsigned char *)(*(void *)(a3 + 72) + v227) != 1 || v215 == 254)
              {
                uint64_t v228 = v215;
              }
              else
              {
                uint64_t v228 = (v215 + 1);
              }
            }
            if ((*(_DWORD *)(v4 + 3140) & 0x80000000) != 0) {
              goto LABEL_666;
            }
            *(unsigned char *)(*(void *)(a3 + 296) + v227) = 2;
            if (v577)
            {
              BOOL v330 = 1;
            }
            else
            {
              *(unsigned char *)(*(void *)(a3 + 296) + v227) = 1;
              if ((*(unsigned char *)(*(void *)(a3 + 88) + v227) & 0xFE) != 2)
              {
                BOOL v577 = 0;
                goto LABEL_666;
              }
              BOOL v330 = *(unsigned __int8 *)(*(void *)(a3 + 72) + v227) == 1;
            }
            BOOL v577 = v330;
LABEL_666:
            ++v221;
            uint64_t v216 = *(void *)(a3 + 16);
            LOWORD(v212) = *(_WORD *)(a3 + 12);
            LODWORD(v225) = *(unsigned __int8 *)(v216 + v224);
            int v214 = v582;
            LOWORD(v223) = v590;
LABEL_667:
            if (v225 == 37)
            {
              int v220 = 0;
              int v219 = 1;
            }
            __int16 v211 = v224 + 1;
            int v218 = (__int16)(v224 + 1);
            __int16 v217 = v222 + 1;
            unsigned __int16 v213 = v223 + 1;
            uint64_t v215 = v228;
            if ((__int16)v212 - 1 <= v218) {
              goto LABEL_683;
            }
          }
          uint64_t v259 = *(void *)(a3 + 88);
          char v260 = 3;
LABEL_474:
          *(unsigned char *)(v259 + v227) = v260;
          goto LABEL_475;
        }
        LOBYTE(v214) = 0;
        BOOL v577 = 0;
        LOWORD(v221) = 1;
LABEL_683:
        if (*(_DWORD *)(v4 + 2560)) {
          *(_WORD *)(*(void *)(a3 + 3560) + 9 * (__int16)v221 + 7) = 8995;
        }
        if ((*(_DWORD *)(v4 + 3136) & 0x80000000) == 0) {
          *(unsigned char *)(*(void *)(a3 + 288) + (__int16)v221) = 1;
        }
        if ((*(_DWORD *)(v4 + 3140) & 0x80000000) == 0) {
          *(unsigned char *)(*(void *)(a3 + 296) + (__int16)v221) = 3;
        }
        if ((*(_DWORD *)(v4 + 3144) & 0x80000000) == 0) {
          *(unsigned char *)(*(void *)(a3 + 304) + (__int16)v221) = 1;
        }
        if ((*(_DWORD *)(v4 + 3148) & 0x80000000) == 0) {
          *(unsigned char *)(*(void *)(a3 + 312) + (__int16)v221) = 1;
        }
        if ((*(_DWORD *)(v4 + 3104) & 0x80000000) == 0)
        {
          *(unsigned char *)(*(void *)(a3 + 264) + (__int16)v221) = 0;
          *(unsigned char *)(*(void *)(a3 + 272) + (__int16)v221) = 0;
        }
        if ((*(_DWORD *)(v4 + 3120) & 0x80000000) == 0 || (*(_DWORD *)(v4 + 3132) & 0x80000000) == 0) {
          *(unsigned char *)(*(void *)(a3 + 280) + (__int16)v221) = 0;
        }
        if (*(_DWORD *)(v4 + 2604) == 2) {
          char v335 = 87;
        }
        else {
          char v335 = 88;
        }
        *(unsigned char *)(*(void *)(a3 + 48) + (__int16)v221) = v335;
        *(unsigned char *)(*(void *)(a3 + 32) + (__int16)v221) = *(unsigned char *)(*(__int16 *)(a3 + 12) + *(void *)(a3 + 16) - 1);
        uint64_t v336 = *(void *)(a3 + 24);
        if (v336) {
          *(_WORD *)(*(void *)(a3 + 1800) + 2 * (__int16)v221) = *(unsigned __int8 *)(*(__int16 *)(a3 + 12)
        }
                                                                                        + v336
                                                                                        - 1)
                                                                   + v214;
        *(unsigned char *)(*(void *)(a3 + 72) + (__int16)v221) = 1;
        *(unsigned char *)(*(void *)(a3 + 80) + (__int16)v221) = 1;
        *(unsigned char *)(*(void *)(a3 + 88) + (__int16)v221) = 0;
        *(unsigned char *)(*(void *)(a3 + 96) + (__int16)v221) = 3;
        *(unsigned char *)(*(void *)(a3 + 104) + (__int16)v221) = 5;
        *(unsigned char *)(*(void *)(a3 + 112) + (__int16)v221) = 0;
        *(unsigned char *)(*(void *)(a3 + 120) + (__int16)v221) = 3;
        *(unsigned char *)(*(void *)(a3 + 128) + (__int16)v221) = 0;
        *(unsigned char *)(*(void *)(a3 + 136) + (__int16)v221) = 0;
        *(unsigned char *)(*(void *)(a3 + 144) + (__int16)v221) = 4;
        if ((*(_DWORD *)(v4 + 3068) & 0x80000000) == 0)
        {
          *(unsigned char *)(*(void *)(a3 + 216) + (__int16)v221) = 0;
          *(unsigned char *)(*(void *)(a3 + 224) + (__int16)v221) = 0;
        }
        if ((*(_DWORD *)(v4 + 3072) & 0x80000000) == 0)
        {
          *(unsigned char *)(*(void *)(a3 + 232) + (__int16)v221) = 0;
          *(unsigned char *)(*(void *)(a3 + 240) + (__int16)v221) = 0;
        }
        if ((*(_DWORD *)(v4 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v4 + 3396) & 0x80000000) == 0) {
          *(void *)(*(void *)(a3 + 3552) + 8 * (__int16)v221) = 0xC800C8FF38FF38;
        }
        uint64_t v337 = (char *)(*(void *)(a3 + 248) + (__int16)v221);
        uint64_t v338 = &v600;
        if (*(int *)(v4 + 3092) >= 0) {
          uint64_t v338 = v337 - 1;
        }
        *uint64_t v337 = *v338;
        *(unsigned char *)(*(void *)(a3 + 152) + (__int16)v221) = 3;
        *(unsigned char *)(*(void *)(a3 + 160) + (__int16)v221) = 0;
        *(unsigned char *)(*(void *)(a3 + 168) + (__int16)v221) = 0;
        *(unsigned char *)(*(void *)(a3 + 176) + (__int16)v221) = 4;
        *(unsigned char *)(*(void *)(a3 + 184) + (__int16)v221) = 4;
        *(unsigned char *)(*(void *)(a3 + 192) + (__int16)v221) = 1;
        if (*(_DWORD *)(v4 + 2560))
        {
          cstdlib_memset((void *)(*(void *)(a3 + 3560) + 9 * (__int16)v221), 0, 9uLL);
          uint64_t v339 = (unsigned char *)(*(void *)(a3 + 3560) + 9 * (__int16)v221);
          v339[5] = *(unsigned char *)((__int16)v221 + *(void *)(a3 + 32) - 1);
          v339[6] = 35;
          *uint64_t v339 = 35;
        }
        *(_WORD *)(a3 + 10) = v221 + 1;
        if ((__int16)(*(_WORD *)(a3 + 12) - 2) >= 1)
        {
          uint64_t v340 = 0;
          __int16 v341 = v221 - 1;
          int v342 = v577 & (*(int *)(v4 + 3140) >> 31);
          uint64_t v343 = (unsigned __int16)(*(_WORD *)(a3 + 12) - 2);
          BOOL v344 = 1;
          BOOL v345 = 1;
          int v346 = 1;
          int v347 = 1;
          while (*(unsigned __int8 *)(v4 + *(unsigned __int8 *)(*(void *)(a3 + 16) + v343) + 2144) == 255)
          {
            LOBYTE(v355) = v340;
LABEL_814:
            BOOL v201 = v343-- <= 1;
            if (v201) {
              goto LABEL_826;
            }
          }
          *(unsigned char *)(*(void *)(a3 + 136) + v341) = v346 == 0;
          LOWORD(v348) = v343;
          do
          {
            int v348 = (__int16)(v348 - 1);
            if (v348 < 1) {
              break;
            }
            uint64_t v349 = *(unsigned __int8 *)(*(void *)(a3 + 16) + (unsigned __int16)v348);
            if (v349 == 37) {
              break;
            }
          }
          while (*(unsigned __int8 *)(v4 + v349 + 2144) == 255);
          int v350 = *(unsigned __int8 *)(*(void *)(a3 + 88) + v341);
          if (v350 == 3 && v346 != 0 && v345)
          {
            *(unsigned char *)(*(void *)(a3 + 160) + v341) = 6;
            goto LABEL_737;
          }
          if (v350 == 3 && v345)
          {
            uint64_t v354 = *(void *)(a3 + 160);
            if (*(unsigned __int8 *)(v354 + v341) - 3 >= 2)
            {
              *(unsigned char *)(v354 + v341) = 5;
LABEL_737:
              BOOL v345 = *(unsigned __int8 *)(*(void *)(a3 + 80) + v341) != 1;
            }
            else
            {
              BOOL v345 = 1;
            }
          }
          uint64_t v356 = *(void *)(a3 + 168);
          if (!*(unsigned char *)(v356 + v341))
          {
            if (*(unsigned char *)(*(void *)(a3 + 112) + v341))
            {
              if (*(unsigned char *)(*(void *)(a3 + 112) + v341) != 1
                || *(unsigned __int8 *)(v341 + v356 + 1) - 1 >= 2)
              {
                goto LABEL_739;
              }
            }
            else if (*(unsigned char *)(v341 + v356 + 1) != 1)
            {
              goto LABEL_739;
            }
            *(unsigned char *)(v356 + v341) = 1;
          }
LABEL_739:
          int v357 = *v6 - 1;
          if (v357 == v343)
          {
            uint64_t v358 = *(void *)(a3 + 128);
            uint64_t v355 = *(unsigned __int8 *)(v358 + v341);
          }
          else
          {
            uint64_t v358 = *(void *)(a3 + 128);
            if (v357 <= (int)v343
              || (uint64_t v355 = *(unsigned __int8 *)(v358 + v341), !*(unsigned char *)(v358 + v341))
              && *(unsigned char *)(*(void *)(a3 + 112) + v341) != 3
              || *(unsigned char *)(v341 + v358 + 1))
            {
              uint64_t v355 = v340;
            }
          }
          char v359 = v340 + 1;
          uint64_t v360 = v341 + 1;
          *(unsigned char *)(v358 + v360) = v359;
          int v361 = *(unsigned __int8 *)(*(void *)(a3 + 128) + v341);
          if (v361 == v355)
          {
            *(unsigned char *)(*(void *)(a3 + 144) + v341) = 4;
          }
          else if (v355 - 1 == v361)
          {
            *(unsigned char *)(*(void *)(a3 + 144) + v341) = 6;
          }
          else if (*(unsigned char *)(*(void *)(a3 + 128) + v341))
          {
            if (v361 == 1)
            {
              *(unsigned char *)(*(void *)(a3 + 144) + v341) = 1;
            }
            else
            {
              unsigned int v362 = 19662 * v355;
              if ((int)(v355 - HIWORD(v362)) >= v361)
              {
                uint64_t v363 = *(void *)(a3 + 144);
                if (HIWORD(v362) <= v361) {
                  *(unsigned char *)(v363 + v341) = 5;
                }
                else {
                  *(unsigned char *)(v363 + v341) = 3;
                }
              }
              else
              {
                *(unsigned char *)(*(void *)(a3 + 144) + v341) = 2;
              }
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(a3 + 144) + v341) = 0;
          }
          if (*(unsigned char *)(*(void *)(a3 + 16) + v343) != 35)
          {
            if (*(unsigned char *)(*(void *)(a3 + 144) + v341) == 4)
            {
              uint64_t v366 = *(void *)(a3 + 152);
              if (*(unsigned char *)(*(void *)(a3 + 128) + v341))
              {
                if (v346) {
                  *(unsigned char *)(v366 + v341) = 3;
                }
                else {
                  *(unsigned char *)(v366 + v341) = 1;
                }
              }
              else
              {
                *(unsigned char *)(v366 + v341) = 2;
              }
            }
            else if (*(unsigned char *)(*(void *)(a3 + 128) + v341))
            {
              int v367 = *(unsigned __int8 *)(*(void *)(a3 + 96) + v341);
              switch(v367)
              {
                case 3:
                  *(unsigned char *)(*(void *)(a3 + 152) + v341) = 6;
                  break;
                case 2:
                  *(unsigned char *)(*(void *)(a3 + 152) + v341) = 5;
                  break;
                case 1:
                  *(unsigned char *)(*(void *)(a3 + 152) + v341) = 4;
                  break;
              }
            }
            else
            {
              *(unsigned char *)(*(void *)(a3 + 152) + v341) = 0;
            }
          }
          if (*(unsigned char *)(*(void *)(a3 + 152) + v341) == 2)
          {
            uint64_t v364 = *(void *)(a3 + 160);
            if (*(unsigned char *)(v364 + v341) == 4)
            {
              if (v346) {
                char v365 = 6;
              }
              else {
                char v365 = 5;
              }
              *(unsigned char *)(v364 + v341) = v365;
            }
          }
          if (*(unsigned char *)(*(void *)(a3 + 16) + v348) == 37)
          {
            int v346 = 0;
            BOOL v345 = 1;
          }
          if (v347 == 1) {
            *(unsigned char *)(*(void *)(a3 + 120) + v341) = 3;
          }
          if (*(unsigned char *)(*(void *)(a3 + 80) + v341) == 1) {
            int v347 = 0;
          }
          if ((*(_DWORD *)(v4 + 3136) & 0x80000000) == 0)
          {
            *(unsigned char *)(*(void *)(a3 + 288) + v341) = 1;
            if (*(unsigned char *)(*(void *)(a3 + 32) + v341) == 35)
            {
              BOOL v344 = *(unsigned __int8 *)(*(void *)(a3 + 88) + v341) < 2u;
              goto LABEL_797;
            }
            if ((*(unsigned char *)(*(void *)(a3 + 112) + v341) & 0xFE) == 2)
            {
              if (*(unsigned __int8 *)(*(void *)(a3 + 88) + v341) >= 2u) {
                goto LABEL_796;
              }
LABEL_795:
              *(unsigned char *)(*(void *)(a3 + 288) + v341) = 3;
              BOOL v344 = 1;
            }
            else
            {
              if (v344 && *(unsigned __int8 *)(*(void *)(a3 + 88) + v341) <= 1u) {
                goto LABEL_795;
              }
LABEL_796:
              BOOL v344 = 0;
            }
          }
LABEL_797:
          if ((*(_DWORD *)(v4 + 3140) & 0x80000000) == 0 && !v342)
          {
            if (*v6 - 2 == v343
              || (*(unsigned char *)(*(void *)(a3 + 88) + v360) & 0xFE) != 2
              || (int v342 = *(unsigned __int8 *)(*(void *)(a3 + 72) + v341), v342 != 1))
            {
              int v342 = 0;
              *(unsigned char *)(*(void *)(a3 + 296) + v341) = 3;
            }
          }
          if ((*(_DWORD *)(v4 + 3144) & 0x80000000) == 0)
          {
            if (*(unsigned char *)(*(void *)(a3 + 32) + v341) == 35
              || (int v368 = *(unsigned __int8 *)(*(void *)(a3 + 112) + v341), (v368 - 2) < 2))
            {
              uint64_t v369 = *(void *)(a3 + 304);
              char v370 = 1;
            }
            else if (v368 == 1)
            {
              uint64_t v369 = *(void *)(a3 + 304);
              char v370 = *(unsigned char *)(v369 + v360) + 1;
            }
            else
            {
              uint64_t v369 = *(void *)(a3 + 304);
              char v370 = *(unsigned char *)(v369 + v360);
            }
            *(unsigned char *)(v369 + v341) = v370;
          }
          if (!*(_DWORD *)(v4 + 2516))
          {
            if (*(_DWORD *)(v4 + 2604) == 2) {
              char v371 = 87;
            }
            else {
              char v371 = *(unsigned char *)(v4
            }
                              + *(unsigned __int8 *)(v4 + *(unsigned __int8 *)(*(void *)(a3 + 16) + v343) + 2144)
                              + 1373);
            *(unsigned char *)(*(void *)(a3 + 48) + v341) = v371;
          }
          --v341;
          uint64_t v340 = v355;
          goto LABEL_814;
        }
        LOBYTE(v355) = 0;
        BOOL v344 = 1;
LABEL_826:
        **(unsigned char **)(a3 + 128) = v355 + 1;
        *(unsigned char *)(*(void *)(a3 + 128) + 1) = v355 + 1;
        **(unsigned char **)(a3 + 136) = *(unsigned char *)(*(void *)(a3 + 136) + 1);
        if (*(__int16 *)(a3 + 10) > 1)
        {
          int v372 = 0;
          char v591 = 0;
          int v373 = 0;
          int v374 = *(int *)(v4 + 3136) >= 0 || v344;
          int __sc = v374;
          while (1)
          {
            if (*(unsigned char *)(*(void *)(a3 + 80) + (__int16)v373) == 1)
            {
              if (*(_DWORD *)(v4 + 2560))
              {
                uint64_t v375 = 9 * (__int16)v373;
                cstdlib_memset((void *)(*(void *)(a3 + 3560) + v375), 0, 9uLL);
                if ((_WORD)v373)
                {
                  uint64_t v376 = *(void *)(a3 + 32);
                  uint64_t v377 = *(void *)(a3 + 3560);
                  *(unsigned char *)(v377 + v375 + 5) = *(unsigned char *)(v376 + v372 - 1);
                }
                else
                {
                  uint64_t v377 = *(void *)(a3 + 3560);
                  *(unsigned char *)(v377 + v375 + 5) = 35;
                  uint64_t v376 = *(void *)(a3 + 32);
                }
                v383 = (unsigned char *)(v377 + 9 * (__int16)v373);
                v383[7] = *(unsigned char *)(v376 + (__int16)v373);
                unsigned char *v383 = *(unsigned char *)(v376 + (__int16)v373);
              }
              unsigned __int8 v384 = 1;
              if (*(unsigned char *)(*(void *)(a3 + 72) + (__int16)v373) == 1)
              {
                uint64_t v385 = (__int16)v373;
              }
              else
              {
                uint64_t v385 = (__int16)v373;
                int v386 = v373;
                do
                {
                  if (*(_DWORD *)(v4 + 2560))
                  {
                    if (v384 > 4u) {
                      cstdlib_memset((void *)(*(void *)(a3 + 3560) + 9 * (__int16)v373), 0, 9uLL);
                    }
                    else {
                      *(unsigned char *)(*(void *)(a3 + 3560) + 9 * (__int16)v373 + v384) = *(unsigned char *)(v385
                    }
                                                                                                 + *(void *)(a3 + 32)
                                                                                                 + 1);
                  }
                  ++v386;
                  ++v384;
                  uint64_t v385 = (__int16)v386;
                }
                while (*(unsigned char *)(*(void *)(a3 + 72) + (__int16)v386) != 1);
              }
              if (*(_DWORD *)(v4 + 2560))
              {
                v387 = (unsigned char *)(*(void *)(a3 + 32) + v385);
                uint64_t v388 = *(void *)(a3 + 3560) + 9 * (__int16)v373;
                *(unsigned char *)(v388 + 6) = v387[1];
                *(unsigned char *)(v388 + 8) = *v387;
              }
              *(unsigned char *)(*(void *)(a3 + 192) + (__int16)v373) = v384;
            }
            else
            {
              uint64_t v378 = v372 - 1;
              *(unsigned char *)(*(void *)(a3 + 192) + (__int16)v373) = *(unsigned char *)(*(void *)(a3 + 192) + v378);
              if (*(_DWORD *)(v4 + 2560))
              {
                uint64_t v379 = *(void *)(a3 + 3560);
                v380 = (uint64_t *)(v379 + 9 * v378);
                uint64_t v381 = *v380;
                uint64_t v382 = v379 + 9 * (__int16)v373;
                *(unsigned char *)(v382 + 8) = *((unsigned char *)v380 + 8);
                *(void *)uint64_t v382 = v381;
              }
            }
            if (*(unsigned char *)(*(void *)(a3 + 192) + (__int16)v373) == 1
              && *(unsigned char *)(*(void *)(a3 + 32) + (__int16)v373) != 35)
            {
              uint64_t v389 = *(void *)(a3 + 184);
              if (*(unsigned char *)(v389 + (__int16)v373)) {
                *(unsigned char *)(v389 + (__int16)v373) = 1;
              }
            }
            if (!*(_DWORD *)(v4 + 2516))
            {
              int v390 = *(unsigned __int16 *)(v4 + 2966);
              if (*(_WORD *)(v4 + 2966))
              {
                int v391 = 0;
                int v392 = 0;
                uint64_t v393 = *(void *)(v4 + 2968);
                uint64_t v394 = *(void *)(a3 + 3568);
                int v395 = v372 * *(unsigned __int16 *)(*(void *)a3 + 2966);
                uint64_t v396 = *(void *)(a3 + 3576);
                do
                {
                  uint64_t v397 = v393 + 32 * (__int16)v392;
                  int v398 = v395 + v391;
                  *(_DWORD *)(v394 + 4 * v398) = *(_DWORD *)(v397 + 4);
                  *(_DWORD *)(v396 + 4 * v398) = *(_DWORD *)(v397 + 4);
                  int v391 = (__int16)++v392;
                }
                while ((__int16)v392 < v390);
              }
              int v399 = *(unsigned __int16 *)(v4 + 3360);
              if (*(_WORD *)(v4 + 3360))
              {
                int v400 = 0;
                int v401 = 0;
                uint64_t v402 = *(void *)(v4 + 3368);
                uint64_t v403 = *(void *)(a3 + 3584);
                int v404 = v372 * *(unsigned __int16 *)(*(void *)a3 + 3360);
                do
                {
                  *(_DWORD *)(v403 + 4 * (v404 + v400)) = *(_DWORD *)(v402 + 12 * (__int16)v401++ + 4);
                  int v400 = (__int16)v401;
                }
                while ((__int16)v401 < v399);
                int v405 = 0;
                int v406 = 0;
                uint64_t v407 = *(void *)(v4 + 3368);
                uint64_t v408 = *(void *)(a3 + 3592);
                int v409 = v372 * *(unsigned __int16 *)(*(void *)a3 + 3360);
                do
                {
                  *(_DWORD *)(v408 + 4 * (v409 + v405)) = *(_DWORD *)(v407 + 12 * (__int16)v406++ + 4);
                  int v405 = (__int16)v406;
                }
                while ((__int16)v406 < v399);
              }
            }
            if (*(_WORD *)(v4 + 3472))
            {
              int v410 = 0;
              int v411 = 0;
              uint64_t v412 = v372 + 1;
              do
              {
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3480)+ *(unsigned __int16 *)(v4 + 3474) * (uint64_t)v410)), *(char *)(*(void *)(a3 + 32) + (__int16)v373))|| !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3480)+ *(unsigned __int16 *)(v4 + 3474) * (uint64_t)v410+ 1)), *(char *)(*(void *)(a3 + 32) + v412)))
                {
                  goto LABEL_889;
                }
                int v413 = (_WORD)v373 ? *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 - 1) : 35;
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3480)+ *(unsigned __int16 *)(v4 + 3474) * (uint64_t)v410+ 2)), v413))goto LABEL_889; {
                int v414 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v414 != v372)
                {
                  if (cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3480)+ *(unsigned __int16 *)(v4 + 3474) * (uint64_t)v410+ 3)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 + 2)))
                  {
                    goto LABEL_876;
                  }
                  int v414 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v414 != v372
                  || !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3480)+ *(unsigned __int16 *)(v4 + 3474) * (uint64_t)v410+ 3)), 35))
                {
                  goto LABEL_889;
                }
LABEL_876:
                uint64_t v415 = *(void *)(v4 + 3480);
                unsigned int v416 = *(unsigned __int16 *)(v4 + 3474);
                if ((*(_DWORD *)(v4 + 3092) & 0x80000000) != 0) {
                  goto LABEL_884;
                }
                uint64_t v417 = *(void *)(v4 + 3432);
                v418 = *(char **)(v417
                                + 8
                                * *(unsigned __int8 *)(v415 + *(unsigned __int16 *)(v4 + 3474) * (uint64_t)v410 + 4));
                if (v418)
                {
                  if (!cstdlib_strchr(v418, *(unsigned __int8 *)(*(void *)(a3 + 248) + (__int16)v373) + 48))goto LABEL_889; {
                  uint64_t v417 = *(void *)(v4 + 3432);
                  }
                  uint64_t v415 = *(void *)(v4 + 3480);
                  unsigned int v416 = *(unsigned __int16 *)(v4 + 3474);
                  int v419 = v410 * v416;
                }
                else
                {
                  int v419 = v416 * v410;
                }
                v420 = *(char **)(v417 + 8 * *(unsigned __int8 *)(v415 + v419 + 5));
                if (!v420) {
                  goto LABEL_884;
                }
                if (cstdlib_strchr(v420, *(unsigned __int8 *)(*(void *)(a3 + 248) + v412) + 48))
                {
                  uint64_t v415 = *(void *)(v4 + 3480);
                  unsigned int v416 = *(unsigned __int16 *)(v4 + 3474);
LABEL_884:
                  uint64_t v421 = v416 + (int)v416 * (uint64_t)v410;
                  int v422 = *(unsigned __int8 *)(v421 + v415 - 1);
                  if (v422 == 1)
                  {
                    *(_DWORD *)(*(void *)(a3 + 3584)
                              + 4
                              * (*(unsigned __int8 *)(v415 + (int)v421 - 2)
                               + v372 * *(unsigned __int16 *)(*(void *)a3 + 3360))) = 0;
                  }
                  else if (*(unsigned char *)(v421 + v415 - 1))
                  {
                    int v424 = *(unsigned __int8 *)(v415 + (int)v421 - 2)
                         + v372 * *(unsigned __int16 *)(*(void *)a3 + 3360);
                    *(_DWORD *)(*(void *)(a3 + 3584) + 4 * v424) *= v422;
                  }
                  else
                  {
                    int v423 = *(unsigned __int8 *)(v415 + (int)v421 - 2)
                         + v372 * *(unsigned __int16 *)(*(void *)a3 + 3360);
                    *(_DWORD *)(*(void *)(a3 + 3584) + 4 * v423) *= 5;
                  }
                }
LABEL_889:
                int v410 = (__int16)++v411;
              }
              while ((__int16)v411 < (int)*(unsigned __int16 *)(v4 + 3472));
            }
            if (*(_WORD *)(v4 + 3488))
            {
              int v425 = 0;
              int v426 = 0;
              uint64_t v427 = v372 + 1;
              do
              {
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3496)+ *(unsigned __int16 *)(v4 + 3490) * (uint64_t)v425)), *(unsigned __int8 *)(*(void *)(a3 + 32) + (__int16)v373))|| !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3496)+ *(unsigned __int16 *)(v4 + 3490) * (uint64_t)v425+ 1)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v427)))
                {
                  goto LABEL_916;
                }
                int v428 = (_WORD)v373 ? *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 - 1) : 35;
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3496)+ *(unsigned __int16 *)(v4 + 3490) * (uint64_t)v425+ 2)), v428))goto LABEL_916; {
                int v429 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v429 != v372)
                {
                  if (cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3496)+ *(unsigned __int16 *)(v4 + 3490) * (uint64_t)v425+ 3)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 + 2)))
                  {
                    goto LABEL_903;
                  }
                  int v429 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v429 != v372
                  || !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3496)+ *(unsigned __int16 *)(v4 + 3490) * (uint64_t)v425+ 3)), 35))
                {
                  goto LABEL_916;
                }
LABEL_903:
                uint64_t v430 = *(void *)(v4 + 3496);
                unsigned int v431 = *(unsigned __int16 *)(v4 + 3490);
                if ((*(_DWORD *)(v4 + 3092) & 0x80000000) != 0) {
                  goto LABEL_911;
                }
                uint64_t v432 = *(void *)(v4 + 3432);
                v433 = *(char **)(v432
                                + 8
                                * *(unsigned __int8 *)(v430 + *(unsigned __int16 *)(v4 + 3490) * (uint64_t)v425 + 4));
                if (v433)
                {
                  if (!cstdlib_strchr(v433, *(unsigned __int8 *)(*(void *)(a3 + 248) + (__int16)v373) + 48))goto LABEL_916; {
                  uint64_t v432 = *(void *)(v4 + 3432);
                  }
                  uint64_t v430 = *(void *)(v4 + 3496);
                  unsigned int v431 = *(unsigned __int16 *)(v4 + 3490);
                  int v434 = v425 * v431;
                }
                else
                {
                  int v434 = v431 * v425;
                }
                v435 = *(char **)(v432 + 8 * *(unsigned __int8 *)(v430 + v434 + 5));
                if (!v435) {
                  goto LABEL_911;
                }
                if (cstdlib_strchr(v435, *(unsigned __int8 *)(*(void *)(a3 + 248) + v427) + 48))
                {
                  uint64_t v430 = *(void *)(v4 + 3496);
                  unsigned int v431 = *(unsigned __int16 *)(v4 + 3490);
LABEL_911:
                  uint64_t v436 = v431 + (int)v431 * (uint64_t)v425;
                  int v437 = *(unsigned __int8 *)(v436 + v430 - 1);
                  if (v437 == 1)
                  {
                    *(_DWORD *)(*(void *)(a3 + 3592)
                              + 4
                              * (*(unsigned __int8 *)(v430 + (int)v436 - 2)
                               + v372 * *(unsigned __int16 *)(*(void *)a3 + 3360))) = 0;
                  }
                  else if (*(unsigned char *)(v436 + v430 - 1))
                  {
                    int v439 = *(unsigned __int8 *)(v430 + (int)v436 - 2)
                         + v372 * *(unsigned __int16 *)(*(void *)a3 + 3360);
                    *(_DWORD *)(*(void *)(a3 + 3592) + 4 * v439) *= v437;
                  }
                  else
                  {
                    int v438 = *(unsigned __int8 *)(v430 + (int)v436 - 2)
                         + v372 * *(unsigned __int16 *)(*(void *)a3 + 3360);
                    *(_DWORD *)(*(void *)(a3 + 3592) + 4 * v438) *= 5;
                  }
                }
LABEL_916:
                int v425 = (__int16)++v426;
              }
              while ((__int16)v426 < (int)*(unsigned __int16 *)(v4 + 3488));
            }
            if (*(_WORD *)(v4 + 3440))
            {
              int v440 = 0;
              int v441 = 0;
              uint64_t v442 = v372 + 1;
              do
              {
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3448)+ *(unsigned __int16 *)(v4 + 3442) * (uint64_t)v440)), *(unsigned __int8 *)(*(void *)(a3 + 32) + (__int16)v373))|| !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3448)+ *(unsigned __int16 *)(v4 + 3442) * (uint64_t)v440+ 1)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v442)))
                {
                  goto LABEL_943;
                }
                int v443 = (_WORD)v373 ? *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 - 1) : 35;
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3448)+ *(unsigned __int16 *)(v4 + 3442) * (uint64_t)v440+ 2)), v443))goto LABEL_943; {
                int v444 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v444 != v372)
                {
                  if (cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3448)+ *(unsigned __int16 *)(v4 + 3442) * (uint64_t)v440+ 3)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 + 2)))
                  {
                    goto LABEL_930;
                  }
                  int v444 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v444 != v372
                  || !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3448)+ *(unsigned __int16 *)(v4 + 3442) * (uint64_t)v440+ 3)), 35))
                {
                  goto LABEL_943;
                }
LABEL_930:
                uint64_t v445 = *(void *)(v4 + 3448);
                unsigned int v446 = *(unsigned __int16 *)(v4 + 3442);
                if ((*(_DWORD *)(v4 + 3092) & 0x80000000) != 0) {
                  goto LABEL_938;
                }
                uint64_t v447 = *(void *)(v4 + 3432);
                v448 = *(char **)(v447
                                + 8
                                * *(unsigned __int8 *)(v445 + *(unsigned __int16 *)(v4 + 3442) * (uint64_t)v440 + 4));
                if (v448)
                {
                  if (!cstdlib_strchr(v448, *(unsigned __int8 *)(*(void *)(a3 + 248) + (__int16)v373) + 48))goto LABEL_943; {
                  uint64_t v447 = *(void *)(v4 + 3432);
                  }
                  uint64_t v445 = *(void *)(v4 + 3448);
                  unsigned int v446 = *(unsigned __int16 *)(v4 + 3442);
                  int v449 = v440 * v446;
                }
                else
                {
                  int v449 = v446 * v440;
                }
                v450 = *(char **)(v447 + 8 * *(unsigned __int8 *)(v445 + v449 + 5));
                if (!v450) {
                  goto LABEL_938;
                }
                if (cstdlib_strchr(v450, *(unsigned __int8 *)(*(void *)(a3 + 248) + v442) + 48))
                {
                  uint64_t v445 = *(void *)(v4 + 3448);
                  unsigned int v446 = *(unsigned __int16 *)(v4 + 3442);
LABEL_938:
                  uint64_t v451 = v446 + (int)v446 * (uint64_t)v440;
                  uint64_t v452 = v451 - 1;
                  int v453 = *(unsigned __int8 *)(v445 + v451 - 1);
                  if (v453 == 1)
                  {
                    int v456 = v372 * *(unsigned __int16 *)(*(void *)a3 + 2966);
                    uint64_t v457 = v445 + (int)v451;
                    *(_DWORD *)(*(void *)(a3 + 3568) + 4 * (v456 + *(unsigned __int8 *)(v457 - 2))) = 0;
                    *(_DWORD *)(*(void *)(a3 + 3576) + 4 * (v456 + *(unsigned __int8 *)(v457 - 2))) = 0;
                  }
                  else if (*(unsigned char *)(v445 + v451 - 1))
                  {
                    int v458 = v372 * *(unsigned __int16 *)(*(void *)a3 + 2966);
                    uint64_t v459 = v445 + (int)v451;
                    *(_DWORD *)(*(void *)(a3 + 3568) + 4 * (v458 + *(unsigned __int8 *)(v459 - 2))) *= v453;
                    *(_DWORD *)(*(void *)(a3 + 3576) + 4 * (v458 + *(unsigned __int8 *)(v459 - 2))) *= *(unsigned __int8 *)(v445 + v452);
                  }
                  else
                  {
                    int v454 = v372 * *(unsigned __int16 *)(*(void *)a3 + 2966);
                    uint64_t v455 = v445 + (int)v451;
                    *(_DWORD *)(*(void *)(a3 + 3568) + 4 * (v454 + *(unsigned __int8 *)(v455 - 2))) *= 5;
                    *(_DWORD *)(*(void *)(a3 + 3576) + 4 * (v454 + *(unsigned __int8 *)(v455 - 2))) *= 5;
                  }
                }
LABEL_943:
                int v440 = (__int16)++v441;
              }
              while ((__int16)v441 < (int)*(unsigned __int16 *)(v4 + 3440));
            }
            if (*(_WORD *)(v4 + 3456))
            {
              int v460 = 0;
              int v461 = 0;
              uint64_t v462 = v372 + 1;
              do
              {
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3464)+ *(unsigned __int16 *)(v4 + 3458) * (uint64_t)v460)), *(unsigned __int8 *)(*(void *)(a3 + 32) + (__int16)v373))|| !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3464)+ *(unsigned __int16 *)(v4 + 3458) * (uint64_t)v460+ 1)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v462)))
                {
                  goto LABEL_969;
                }
                int v463 = (_WORD)v373 ? *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 - 1) : 35;
                if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3464)+ *(unsigned __int16 *)(v4 + 3458) * (uint64_t)v460+ 2)), v463))goto LABEL_969; {
                int v464 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v464 != v372)
                {
                  if (cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3464)+ *(unsigned __int16 *)(v4 + 3458) * (uint64_t)v460+ 3)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 + 2)))
                  {
                    goto LABEL_957;
                  }
                  int v464 = *(__int16 *)(a3 + 10) - 2;
                }
                if (v464 != v372
                  || !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3464)+ *(unsigned __int16 *)(v4 + 3458) * (uint64_t)v460+ 3)), 35))
                {
                  goto LABEL_969;
                }
LABEL_957:
                uint64_t v465 = *(void *)(v4 + 3464);
                unsigned int v466 = *(unsigned __int16 *)(v4 + 3458);
                if ((*(_DWORD *)(v4 + 3092) & 0x80000000) != 0) {
                  goto LABEL_964;
                }
                uint64_t v467 = *(void *)(v4 + 3432);
                int v468 = v460 * v466;
                v469 = *(char **)(v467 + 8 * *(unsigned __int8 *)(v465 + (int)(v460 * v466) + 4));
                if (v469)
                {
                  if (!cstdlib_strchr(v469, *(unsigned __int8 *)(*(void *)(a3 + 248) + (__int16)v373) + 48))goto LABEL_969; {
                  uint64_t v467 = *(void *)(v4 + 3432);
                  }
                  uint64_t v465 = *(void *)(v4 + 3464);
                  unsigned int v466 = *(unsigned __int16 *)(v4 + 3458);
                  int v468 = v460 * v466;
                }
                v470 = *(char **)(v467 + 8 * *(unsigned __int8 *)(v465 + v468 + 5));
                if (!v470) {
                  goto LABEL_964;
                }
                if (cstdlib_strchr(v470, *(unsigned __int8 *)(*(void *)(a3 + 248) + v462) + 48))
                {
                  uint64_t v465 = *(void *)(v4 + 3464);
                  unsigned int v466 = *(unsigned __int16 *)(v4 + 3458);
LABEL_964:
                  uint64_t v471 = (int)(v460 * v466);
                  uint64_t v472 = v471 + v466;
                  uint64_t v473 = (int)v472 - 1;
                  int v474 = *(unsigned __int8 *)(v465 + v473);
                  if (v474 == 1)
                  {
                    int v478 = v372 * *(unsigned __int16 *)(*(void *)a3 + 2966);
                    *(_DWORD *)(*(void *)(a3 + 3568) + 4 * (v478 + *(unsigned __int8 *)((int)v472 + v465 - 2))) = 0;
                    *(_DWORD *)(*(void *)(a3 + 3576) + 4 * (v478 + *(unsigned __int8 *)(v466 + v471 + v465 - 2))) = 0;
                  }
                  else if (*(unsigned char *)(v465 + v473))
                  {
                    int v479 = v372 * *(unsigned __int16 *)(*(void *)a3 + 2966);
                    uint64_t v480 = (int)v472 + v465;
                    *(_DWORD *)(*(void *)(a3 + 3568) + 4 * (v479 + *(unsigned __int8 *)(v480 - 2))) *= v474;
                    *(_DWORD *)(*(void *)(a3 + 3576) + 4 * (v479 + *(unsigned __int8 *)(v480 - 2))) *= *(unsigned __int8 *)(v465 + v473);
                  }
                  else
                  {
                    int v475 = v372 * *(unsigned __int16 *)(*(void *)a3 + 2966);
                    int v476 = v475 + *(unsigned __int8 *)(v472 + v465 - 2);
                    *(_DWORD *)(*(void *)(a3 + 3568) + 4 * v476) *= 5;
                    int v477 = v475 + *(unsigned __int8 *)(v466 + v471 + v465 - 2);
                    *(_DWORD *)(*(void *)(a3 + 3576) + 4 * v477) *= 5;
                  }
                }
LABEL_969:
                int v460 = (__int16)++v461;
              }
              while ((__int16)v461 < (int)*(unsigned __int16 *)(v4 + 3456));
            }
            if (!*(_DWORD *)(v4 + 2516) && *(_WORD *)(v4 + 2966))
            {
              int v481 = 0;
              int v482 = 0;
              do
              {
                *(unsigned char *)(*(void *)(a3 + 3600) + v481 + v372 * *(unsigned __int16 *)(*(void *)a3 + 2966)) = *(unsigned char *)(*(void *)(v4 + 2968) + 32 * (__int16)v482++ + 10);
                int v481 = (__int16)v482;
              }
              while ((__int16)v482 < (int)*(unsigned __int16 *)(v4 + 2966));
            }
            if (*(_WORD *)(v4 + 3504)) {
              break;
            }
LABEL_997:
            if ((*(_DWORD *)(v4 + 3136) & 0x80000000) == 0)
            {
              uint64_t v495 = *(void *)(a3 + 88);
              if (__sc == 1 && *(unsigned __int8 *)(v495 + (__int16)v373) <= 1u)
              {
                int __sc = 1;
                if (*(unsigned char *)(*(void *)(a3 + 32) + (__int16)v373) != 35)
                {
                  *(unsigned char *)(*(void *)(a3 + 288) + (__int16)v373) = 1;
                  uint64_t v495 = *(void *)(a3 + 88);
                }
              }
              else
              {
                int __sc = 0;
              }
              if (*(unsigned char *)(v495 + (__int16)v373)) {
                *(unsigned char *)(*(void *)(a3 + 288) + (__int16)v373) = 2;
              }
              if (*(unsigned char *)(*(void *)(a3 + 32) + (__int16)v373) == 35
                || (*(unsigned char *)(*(void *)(a3 + 112) + (__int16)v373) & 0xFE) == 2)
              {
                int __sc = 1;
              }
            }
            if ((*(_DWORD *)(v4 + 3148) & 0x80000000) == 0)
            {
              char v496 = v591;
              if (*(unsigned char *)(*(void *)(a3 + 32) + (__int16)v373) == 35) {
                char v496 = 1;
              }
              *(unsigned char *)(*(void *)(a3 + 312) + (__int16)v373) = v496;
              if (*(unsigned char *)(*(void *)(a3 + 32) + (__int16)v373) == 35
                || (*(unsigned char *)(*(void *)(a3 + 112) + (__int16)v373) & 0xFE) == 2)
              {
                char v591 = *(unsigned char *)(*(void *)(a3 + 304) + v372 + 1);
              }
            }
            int v372 = (__int16)++v373;
            if (*(__int16 *)(a3 + 10) - 1 <= (__int16)v373) {
              goto LABEL_1016;
            }
          }
          int v483 = 0;
          int v484 = 0;
          uint64_t v485 = v372 + 1;
          while (2)
          {
            if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3512)+ *(unsigned __int16 *)(v4 + 3506) * (uint64_t)v483)), *(unsigned __int8 *)(*(void *)(a3 + 32) + (__int16)v373))|| !cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3512)+ *(unsigned __int16 *)(v4 + 3506) * (uint64_t)v483+ 1)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v485)))
            {
              goto LABEL_996;
            }
            int v486 = (_WORD)v373 ? *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 - 1) : 35;
            if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3512)+ *(unsigned __int16 *)(v4 + 3506) * (uint64_t)v483+ 2)), v486))goto LABEL_996; {
            int v487 = *(__int16 *)(a3 + 10) - 2;
            }
            if (v487 != v372)
            {
              if (!cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3512)+ *(unsigned __int16 *)(v4 + 3506) * (uint64_t)v483+ 3)), *(unsigned __int8 *)(*(void *)(a3 + 32) + v372 + 2)))
              {
                int v487 = *(__int16 *)(a3 + 10) - 2;
                break;
              }
LABEL_987:
              uint64_t v488 = *(void *)(v4 + 3512);
              unsigned int v489 = *(unsigned __int16 *)(v4 + 3506);
              if ((*(_DWORD *)(v4 + 3092) & 0x80000000) == 0)
              {
                uint64_t v490 = *(void *)(v4 + 3432);
                v491 = *(char **)(v490
                                + 8
                                * *(unsigned __int8 *)(v488 + *(unsigned __int16 *)(v4 + 3506) * (uint64_t)v483 + 4));
                if (v491)
                {
                  if (cstdlib_strchr(v491, *(unsigned __int8 *)(*(void *)(a3 + 248) + (__int16)v373) + 48))
                  {
                    uint64_t v490 = *(void *)(v4 + 3432);
                    uint64_t v488 = *(void *)(v4 + 3512);
                    unsigned int v489 = *(unsigned __int16 *)(v4 + 3506);
                    int v492 = v483 * v489;
                    goto LABEL_992;
                  }
LABEL_996:
                  int v483 = (__int16)++v484;
                  if ((__int16)v484 >= (int)*(unsigned __int16 *)(v4 + 3504)) {
                    goto LABEL_997;
                  }
                  continue;
                }
                int v492 = v489 * v483;
LABEL_992:
                v493 = *(char **)(v490 + 8 * *(unsigned __int8 *)(v488 + v492 + 5));
                if (v493)
                {
                  if (!cstdlib_strchr(v493, *(unsigned __int8 *)(*(void *)(a3 + 248) + v485) + 48)) {
                    goto LABEL_996;
                  }
                  uint64_t v488 = *(void *)(v4 + 3512);
                  unsigned int v489 = *(unsigned __int16 *)(v4 + 3506);
                }
              }
              uint64_t v494 = v489 + (int)v489 * (uint64_t)v483;
              *(unsigned char *)(*(void *)(a3 + 3600)
                       + *(unsigned __int8 *)(v488 + (int)v494 - 2)
                       + *(unsigned __int16 *)(*(void *)a3 + 2966) * (uint64_t)v372) = *(unsigned char *)(v494 + v488 - 1);
              goto LABEL_996;
            }
            break;
          }
          if (v487 == v372
            && cstdlib_strchr(*(char **)(*(void *)(v4 + 3424)+ 8* *(unsigned __int8 *)(*(void *)(v4 + 3512)+ *(unsigned __int16 *)(v4 + 3506) * (uint64_t)v483+ 3)), 35))
          {
            goto LABEL_987;
          }
          goto LABEL_996;
        }
LABEL_1016:
        if (!*(_DWORD *)(v4 + 2516))
        {
          if (*(_WORD *)(v4 + 2966))
          {
            int v520 = 0;
            int v521 = 0;
            do
            {
              *(unsigned char *)(*(void *)(a3 + 3600)
                       + v520
                       + (*(__int16 *)(a3 + 10) - 1) * *(unsigned __int16 *)(*(void *)a3 + 2966)) = *(unsigned char *)(*(void *)(v4 + 2968) + 32 * (__int16)v521++ + 10);
              int v520 = (__int16)v521;
              int v522 = *(unsigned __int16 *)(v4 + 2966);
            }
            while ((__int16)v521 < v522);
            if (*(_DWORD *)(v4 + 2516)) {
              goto LABEL_1017;
            }
            if (*(_WORD *)(v4 + 2966))
            {
              int v523 = 0;
              int v524 = 0;
              uint64_t v525 = *(void *)(v4 + 2968);
              uint64_t v526 = *(void *)(a3 + 3568);
              int v527 = (*(__int16 *)(a3 + 10) - 1) * *(unsigned __int16 *)(*(void *)a3 + 2966);
              uint64_t v528 = *(void *)(a3 + 3576);
              do
              {
                uint64_t v529 = v525 + 32 * (__int16)v524;
                int v530 = v527 + v523;
                *(_DWORD *)(v526 + 4 * v530) = *(_DWORD *)(v529 + 4);
                *(_DWORD *)(v528 + 4 * v530) = *(_DWORD *)(v529 + 4);
                int v523 = (__int16)++v524;
              }
              while ((__int16)v524 < v522);
            }
          }
          int v531 = *(unsigned __int16 *)(v4 + 3360);
          if (*(_WORD *)(v4 + 3360))
          {
            int v532 = 0;
            int v533 = 0;
            uint64_t v534 = *(void *)(v4 + 3368);
            uint64_t v535 = *(void *)(a3 + 3584);
            int v536 = (*(__int16 *)(a3 + 10) - 1) * *(unsigned __int16 *)(*(void *)a3 + 3360);
            do
            {
              *(_DWORD *)(v535 + 4 * (v536 + v532)) = *(_DWORD *)(v534 + 12 * (__int16)v533++ + 4);
              int v532 = (__int16)v533;
            }
            while ((__int16)v533 < v531);
            int v537 = 0;
            int v538 = 0;
            uint64_t v539 = *(void *)(v4 + 3368);
            uint64_t v540 = *(void *)(a3 + 3592);
            int v541 = (*(__int16 *)(a3 + 10) - 1) * *(unsigned __int16 *)(*(void *)a3 + 3360);
            do
            {
              *(_DWORD *)(v540 + 4 * (v541 + v537)) = *(_DWORD *)(v539 + 12 * (__int16)v538++ + 4);
              int v537 = (__int16)v538;
            }
            while ((__int16)v538 < v531);
          }
        }
LABEL_1017:
        if ((*(_DWORD *)(v4 + 3392) & 0x80000000) == 0
          || (*(_DWORD *)(v4 + 3396) & 0x80000000) == 0
          || (*(_DWORD *)(v4 + 3068) & 0x80000000) == 0
          || (*(_DWORD *)(v4 + 3072) & 0x80000000) == 0)
        {
          __int16 v497 = 0;
          __int16 v498 = 0;
          int v499 = 1;
          while (1)
          {
            int v500 = (*(_DWORD *)(v4 + 3072) & 0x80000000) != 0 ? *(__int16 *)(a3 + 10) - 1 : *(__int16 *)(a3 + 10);
            if (v500 <= v497) {
              break;
            }
            uint64_t v501 = *(unsigned __int8 *)(v4 + *(unsigned __int8 *)(*(void *)(a3 + 32) + v497) + 2144);
            if ((*(_DWORD *)(v4 + 3068) & 0x80000000) == 0)
            {
              if (*(unsigned char *)(v4 + v501 + 859) == 118)
              {
                (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, void, void, void, void, uint64_t, const char *, const char *, const char *, const char *, char *))(v4 + 28168))(v4 + 28176, v4 + 28200, 0, a3, v497, *(void *)(a3 + 216) + v497, *(void *)(a3 + 224) + v497, 0, 0, v564, v565, v566, v567, v568, v569);
              }
              else
              {
                *(unsigned char *)(*(void *)(a3 + 216) + v497) = 0;
                *(unsigned char *)(*(void *)(a3 + 224) + v497) = 0;
              }
            }
            if ((*(_DWORD *)(v4 + 3072) & 0x80000000) == 0) {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))(v4 + 28168))(v4 + 28208, *(void *)(v4 + 28232) + 8 * v501, 1, a3, v497, *(void *)(a3 + 232) + v497, *(void *)(a3 + 240) + v497, 0, 0);
            }
            int v502 = *(_DWORD *)(v4 + 3392);
            if ((v502 & 0x80000000) == 0 || (*(_DWORD *)(v4 + 3396) & 0x80000000) == 0)
            {
              uint64_t v503 = *(unsigned __int8 *)(*(void *)(a3 + 248) + v497);
              uint64_t v504 = *(void *)(a3 + 3552) + 8 * v497;
              *(void *)uint64_t v504 = 0xC800C8FF38FF38;
              if (*(unsigned char *)(*(void *)(a3 + 80) + v497) == 1) {
                int v499 = 1;
              }
              v505 = (unsigned __int16 *)(*(void *)(v4 + 3528) + 2 * v503);
              uint64_t v506 = *v505;
              unsigned int v507 = v505[1];
              if (v506 < v507 && *(unsigned char *)(v4 + v501 + 1116) == 86 && v499 == 1)
              {
                if (v498)
                {
                  if (v502 < 0)
                  {
                    uint64_t v512 = *(void *)(a3 + 160);
                    v510 = (_WORD *)(*(void *)(v4 + 3544) + 16 * v506);
                    uint64_t v513 = v506 + 1;
                    while (1)
                    {
                      if (*(unsigned __int8 *)(v512 + v498) == v510[4])
                      {
                        uint64_t v514 = *(void *)(a3 + 152);
                        if (*(unsigned __int8 *)(v514 + v498) == v510[5]
                          && *(unsigned __int8 *)(v512 + v497) == v510[6]
                          && *(unsigned __int8 *)(v514 + v497) == v510[7])
                        {
                          break;
                        }
                      }
                      v510 += 8;
                      BOOL v21 = v507 == (unsigned __int16)v513++;
                      if (v21) {
                        goto LABEL_1057;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v509 = *(void *)(a3 + 264);
                    v510 = (_WORD *)(*(void *)(v4 + 3536) + 12 * v506);
                    uint64_t v511 = v506 + 1;
                    while (*(unsigned __int8 *)(v509 + v498) != v510[4] || *(unsigned __int8 *)(v509 + v497) != v510[5])
                    {
                      v510 += 6;
                      BOOL v21 = v507 == (unsigned __int16)v511++;
                      if (v21) {
                        goto LABEL_1057;
                      }
                    }
                  }
                  int v499 = 0;
                  *(_WORD *)uint64_t v504 = *v510;
                  *(_WORD *)(v504 + 2) = v510[1];
                  *(_WORD *)(v504 + 4) = v510[2];
                  *(_WORD *)(v504 + 6) = v510[3];
                }
                else
                {
LABEL_1057:
                  int v499 = 0;
                }
                __int16 v498 = v497;
              }
            }
            ++v497;
          }
        }
        HandleRecordedPrompts((unsigned __int16 *)v4, a3);
        *(_WORD *)(a3 + 3524) = *(_WORD *)(*(void *)a3 + 3578) * *(_WORD *)(a3 + 10);
        v515 = *(int **)(a3 + 3512);
        uint64_t v516 = v579;
        if (v515)
        {
          if (*(_DWORD *)(a3 + 3520))
          {
            if (*(void *)(a3 + 24))
            {
              v517 = *(unsigned __int16 **)(a3 + 1800);
              uint64_t v518 = *v517;
              if (*v517)
              {
                uint64_t v519 = 0;
                while (*v515 != 26)
                {
                  ++v519;
                  v515 += 8;
                  if (v518 == v519) {
                    goto LABEL_1089;
                  }
                }
                if (v518 <= (unsigned __int16)v519) {
                  goto LABEL_1088;
                }
                int v542 = 0;
                uint64_t v543 = v518 - v519;
                do
                {
                  int v544 = *v515;
                  v515 += 8;
                  if (v544 == 8) {
                    int v542 = 1;
                  }
                  --v543;
                }
                while (v543);
                if (!v542)
                {
LABEL_1088:
                  v517[1] += v518 - v519;
                  unsigned __int16 *v517 = v519;
                }
              }
            }
          }
        }
LABEL_1089:
        if (log_GetLogLevel(*(void *)(v588 + 32)) < 6) {
          return 0;
        }
        cstdlib_strcpy(__dst, "");
        cstdlib_strcpy(v601, "");
        LH_itoa(0x4Eu, v601, 0xAu);
        uint64_t v545 = 0;
        v546 = 0;
        while (2)
        {
          unsigned int v547 = *(__int16 *)(a3 + 10);
          if ((unsigned __int16)v545 - 2 < 4 || (unsigned __int16)v545 == 0)
          {
            uint64_t v549 = 0;
            uint64_t v550 = 99;
          }
          else
          {
            uint64_t v551 = *(void *)a3;
            int v552 = *(unsigned __int8 *)(*(void *)a3 + v545 + 2748);
            if ((unsigned __int16)v545 == 1)
            {
              uint64_t v549 = 0;
              unsigned int v547 = *v6;
              uint64_t v550 = 99;
              v546 = "application/x-realspeak-marker-counts;version=4.0";
              goto LABEL_1123;
            }
            uint64_t v549 = 0;
            if (*(unsigned char *)(*(void *)a3 + v545 + 2748))
            {
              switch((__int16)v545)
              {
                case '.':
                  v553 = (uint64_t *)(a3 + 3560);
                  goto LABEL_1109;
                case '/':
                case '0':
                case '1':
                case '2':
                case '7':
                  goto LABEL_1110;
                case '3':
                  BOOL v554 = 0;
                  v556 = (unsigned __int16 *)(v551 + 2966);
                  v557 = (uint64_t *)(a3 + 3568);
                  goto LABEL_1118;
                case '4':
                  BOOL v554 = 0;
                  v556 = (unsigned __int16 *)(v551 + 2966);
                  v557 = (uint64_t *)(a3 + 3576);
                  goto LABEL_1118;
                case '5':
                  BOOL v554 = 0;
                  v556 = (unsigned __int16 *)(v551 + 3360);
                  v557 = (uint64_t *)(a3 + 3584);
                  goto LABEL_1118;
                case '6':
                  BOOL v554 = 0;
                  v556 = (unsigned __int16 *)(v551 + 3360);
                  v557 = (uint64_t *)(a3 + 3592);
                  goto LABEL_1118;
                case '8':
                  v556 = (unsigned __int16 *)(v551 + 2966);
                  BOOL v554 = 1;
                  v557 = (uint64_t *)(a3 + 3600);
LABEL_1118:
                  uint64_t v549 = *v557;
                  v547 *= *v556;
                  v555 = "application/x-realspeak-u32-feat-";
                  break;
                default:
                  v553 = (uint64_t *)(a3 + 3552);
                  if ((unsigned __int16)v545 == 24) {
LABEL_1109:
                  }
                    uint64_t v549 = *v553;
LABEL_1110:
                  BOOL v554 = v552 == 1;
                  v555 = "application/x-realspeak-u16-feat-";
                  if (v552 != 2) {
                    v555 = "application/x-realspeak-u32-feat-";
                  }
                  break;
              }
              if (v554) {
                v558 = "application/x-realspeak-u8-feat-";
              }
              else {
                v558 = v555;
              }
              v546 = __dst;
              cstdlib_strcpy(__dst, v558);
              size_t v559 = cstdlib_strlen(__dst);
              LH_itoa(v545, &__dst[v559], 0xAu);
              uint64_t v550 = 100;
LABEL_1123:
              uint64_t v516 = v579;
              switch((int)v579)
              {
                case 0:
                  goto LABEL_1097;
                case 1:
                  goto LABEL_1099;
                case 2:
                  if (!v549) {
                    uint64_t v549 = *(void *)(a3 + 8 * v545 + 1760);
                  }
                  uint64_t v560 = *(void *)(v588 + 32);
                  unsigned int v561 = 2 * v547;
                  goto LABEL_1128;
                case 3:
                  break;
                case 4:
                  uint64_t v560 = *(void *)(v588 + 32);
                  unsigned int v561 = 4 * v547;
LABEL_1128:
                  log_OutBinary(v560, v579, v550, 0, (uint64_t)v601, (uint64_t)v546, v549, v561, 0);
                  break;
                default:
                  uint64_t v516 = v579;
                  break;
              }
LABEL_1129:
              if (++v545 == 218) {
                return 0;
              }
              continue;
            }
            uint64_t v550 = 99;
            uint64_t v516 = v579;
          }
          break;
        }
LABEL_1097:
        if (v545 == 1 && *(void *)(a3 + 24))
        {
LABEL_1099:
          if (!v549) {
            uint64_t v549 = *(void *)(a3 + 8 * v545 + 16);
          }
          log_OutBinary(*(void *)(v588 + 32), v516, v550, 0, (uint64_t)v601, (uint64_t)v546, v549, v547, 0);
        }
        goto LABEL_1129;
      }
    }
  }
  return v3;
}

uint64_t GetInternalTagIndex(uint64_t a1, const char *a2, unsigned __int8 a3)
{
  uint64_t v5 = **(const char ***)(a1 + 2464);
  if (v5)
  {
    int v7 = cstdlib_strcmp(v5, a2);
    uint64_t v8 = *(void *)(a1 + 2464);
    if (v7)
    {
      unsigned __int8 v9 = 0;
      while (1)
      {
        uint64_t v10 = ++v9;
        uint64_t v11 = *(const char **)(v8 + 8 * v9);
        if (!v11) {
          break;
        }
        int v12 = cstdlib_strcmp(v11, a2);
        uint64_t v8 = *(void *)(a1 + 2464);
        if (!v12) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
      unsigned __int8 v9 = 0;
LABEL_8:
      if (*(void *)(v8 + 8 * v10)) {
        return v9;
      }
    }
  }
  return a3;
}

size_t HandleInternalTag(uint64_t a1, uint64_t a2, __int16 *a3, int a4, unsigned __int8 a5, unsigned __int8 *a6, char *a7)
{
  uint64_t v11 = 0;
  int v12 = a4;
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v13 = *a3;
  __int16 v14 = a4;
  do
  {
    uint64_t v15 = v14 + 1;
    if ((int)v15 >= v13) {
      break;
    }
    int v16 = *(unsigned __int8 *)(*(void *)(a2 + 16) + v15);
    if (v16 == 92) {
      break;
    }
    __s1[v11] = v16;
    ++v14;
    ++v11;
  }
  while (v11 != 10);
  __s1[(unsigned __int16)v11] = 0;
  if (__s1[0] == 47)
  {
    *a6 = a5;
    *a7 = 2;
  }
  else if ((*(_DWORD *)(a1 + 3092) & 0x80000000) != 0)
  {
    if (cstdlib_strcmp(__s1, "TM"))
    {
      if (cstdlib_strcmp(__s1, "TQ"))
      {
        char v17 = 2;
        if (cstdlib_strcmp(__s1, "TS"))
        {
          if (cstdlib_strcmp(__s1, "TW")) {
            char v17 = 2;
          }
          else {
            char v17 = 3;
          }
        }
      }
      else
      {
        char v17 = 1;
      }
    }
    else
    {
      char v17 = 0;
    }
    *a7 = v17;
  }
  else
  {
    *a6 = GetInternalTagIndex(a1, __s1, a5);
  }
  if (!*(void *)(a2 + 24)) {
    goto LABEL_24;
  }
  int v18 = a4 + 1;
  if (v12 + 2 + (__int16)cstdlib_strlen(__s1) > (__int16)(a4 + 1))
  {
    do
      *(unsigned char *)(*(void *)(a2 + 24) + a4) += *(unsigned char *)(*(void *)(a2 + 24) + (__int16)v18++);
    while (v12 + 2 + (__int16)cstdlib_strlen(__s1) > (__int16)v18);
  }
  if (*(void *)(a2 + 24) && (int v19 = *a3, v19 - (__int16)cstdlib_strlen(__s1) - 2 == v12))
  {
    *(unsigned char *)(*(void *)(a2 + 24) + a4 - 1) += *(unsigned char *)(*(void *)(a2 + 24) + a4);
  }
  else
  {
LABEL_24:
    int v20 = *a3;
    if (v20 - (__int16)cstdlib_strlen(__s1) - 2 > v12)
    {
      int v21 = v12;
      do
      {
        uint64_t v22 = *(void *)(a2 + 16);
        uint64_t v23 = v21 + 2;
        uint64_t v24 = (__int16)v12;
        *(unsigned char *)(v22 + (__int16)v12) = *(unsigned char *)(v22 + (__int16)cstdlib_strlen(__s1) + (uint64_t)(int)v23);
        uint64_t v25 = *(void *)(a2 + 24);
        if (v25)
        {
          char v26 = *(unsigned char *)(v25 + v23 + (__int16)cstdlib_strlen(__s1));
          uint64_t v27 = *(void *)(a2 + 24);
          if (v24 == a4) {
            v26 += *(unsigned char *)(v27 + v24);
          }
          *(unsigned char *)(v27 + v24) = v26;
        }
        LOWORD(v12) = v24 + 1;
        int v21 = (__int16)(v24 + 1);
        int v28 = *a3;
      }
      while (v28 - (__int16)cstdlib_strlen(__s1) - 2 > (__int16)v12);
    }
  }
  size_t result = cstdlib_strlen(__s1);
  *a3 = *a3 - result - 2;
  return result;
}

unsigned __int16 *HandleRecordedPrompts(unsigned __int16 *result, uint64_t a2)
{
  int v2 = *(__int16 *)(a2 + 10);
  if (v2 >= 1)
  {
    unsigned int v3 = 0;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(a2 + 3608);
      unsigned __int16 v6 = v4;
      if (v5)
      {
        int v7 = v4;
        do
        {
          unsigned __int16 v6 = v7;
          int v8 = *(_DWORD *)(v5
                         + 4 * *(unsigned __int16 *)(*(void *)a2 + 3578) * (unint64_t)(unsigned __int16)v7++);
        }
        while (v8 == -2);
      }
      uint64_t v9 = v6;
      if (v6 != (unsigned __int16)v4)
      {
        if (v6 > (unsigned __int16)v4)
        {
          uint64_t v10 = *(void *)(a2 + 1800);
          int v11 = *(unsigned __int16 *)(v10 + 2 * v6);
          int v12 = (unsigned __int16 *)(v10 + 2 * (unsigned __int16)v4);
          uint64_t v13 = v9 - (unsigned __int16)v4;
          do
          {
            int v14 = *v12++;
            v11 += v14;
            *(_WORD *)(v10 + 2 * v9) = v11;
            --v13;
          }
          while (v13);
          LOWORD(v2) = *(_WORD *)(a2 + 10);
        }
        int v15 = (__int16)v2 - v9;
        if (v15 >= 1)
        {
          unsigned int v16 = 0;
          unsigned int v17 = (unsigned __int16)v4;
          int v18 = v9;
          do
          {
            uint64_t v19 = 0;
            unint64_t v20 = v16 + (unint64_t)v9;
            unint64_t v21 = v16 + (unint64_t)v3;
            do
            {
              uint64_t v22 = *(void *)(a2 + v19 + 32);
              if (v22) {
                *(unsigned char *)(v22 + v21) = *(unsigned char *)(v22 + v20);
              }
              uint64_t v23 = *(void *)(a2 + v19 + 1776);
              if (v23) {
                *(_WORD *)(v23 + 2 * v21) = *(_WORD *)(v23 + 2 * v20);
              }
              v19 += 8;
            }
            while (v19 != 448);
            uint64_t v24 = *(void *)(a2 + 3552);
            if (v24) {
              *(void *)(v24 + 8 * v21) = *(void *)(v24 + 8 * v20);
            }
            uint64_t v25 = *(void *)(a2 + 3560);
            if (v25)
            {
              char v26 = (uint64_t *)(v25 + 9 * v20);
              uint64_t v27 = *v26;
              uint64_t v28 = v25 + 9 * v21;
              *(unsigned char *)(v28 + 8) = *((unsigned char *)v26 + 8);
              *(void *)uint64_t v28 = v27;
            }
            uint64_t v29 = *(void *)(a2 + 3608);
            if (v29)
            {
              uint64_t v30 = result[1789];
              if (result[1789])
              {
                uint64_t v31 = (_DWORD *)(v29 + 4 * v17 * v30);
                __int16 v32 = (int *)(v29 + 4 * (v18 * v30));
                do
                {
                  int v33 = *v32++;
                  *v31++ = v33;
                  --v30;
                }
                while (v30);
              }
            }
            if (result[1483])
            {
              uint64_t v34 = 0;
              do
              {
                unsigned int v35 = *(unsigned __int16 *)(*(void *)a2 + 2966);
                uint64_t v36 = v18 * v35;
                uint64_t v37 = v34 + v17 * (unint64_t)*(unsigned __int16 *)(*(void *)a2 + 2966);
                *(_DWORD *)(*(void *)(a2 + 3568) + 4 * v37) = *(_DWORD *)(*(void *)(a2 + 3568) + 4 * (v34 + v36));
                *(_DWORD *)(*(void *)(a2 + 3576) + 4 * v37) = *(_DWORD *)(*(void *)(a2 + 3576) + 4 * (v34 + v36));
                *(unsigned char *)(*(void *)(a2 + 3600) + v17 * (unint64_t)v35 + v34) = *(unsigned char *)(*(void *)(a2 + 3600)
                                                                                                  + v36
                                                                                                  + v34);
                ++v34;
              }
              while (v34 < result[1483]);
            }
            uint64_t v38 = result[1680];
            if (result[1680])
            {
              uint64_t v39 = *(void *)(a2 + 3584);
              uint64_t v40 = *(void *)(a2 + 3592);
              unint64_t v41 = 4 * *(unsigned __int16 *)(*(void *)a2 + 3360) * (unint64_t)v17;
              uint64_t v42 = v18 * *(unsigned __int16 *)(*(void *)a2 + 3360);
              do
              {
                *(_DWORD *)(v39 + v41) = *(_DWORD *)(v39 + 4 * v42);
                *(_DWORD *)(v40 + v41) = *(_DWORD *)(v40 + 4 * v42);
                v39 += 4;
                v40 += 4;
                --v38;
              }
              while (v38);
            }
            unsigned __int16 v43 = v16 + 1;
            unsigned int v16 = (unsigned __int16)(v16 + 1);
            int v15 = *(__int16 *)(a2 + 10) - v9;
            ++v17;
            ++v18;
          }
          while (v15 > v43);
        }
        LOWORD(v2) = v4 + v15;
        *(_WORD *)(a2 + 10) = v4 + v15;
      }
      unsigned int v3 = (unsigned __int16)++v4;
    }
    while ((unsigned __int16)v4 < (__int16)v2);
  }
  return result;
}

uint64_t uselect_CountPrompts(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (a2 == 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = (unsigned char *)(a1 + 1);
  do
  {
    if (*(v5 - 1) == 16)
    {
      if ((*v5 & 0xFE) == 0x12) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t usextract_ProcessStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v14 = *(void *)a6;
  uint64_t v70 = 0;
  int v69 = 0;
  unsigned __int16 v68 = 0;
  int v67 = 4;
  uint64_t v65 = 0;
  char v66 = 0;
  unsigned __int16 v64 = 0;
  int v63 = 0;
  __src = 0;
  __int16 v61 = 0;
  *a7 = 0;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(a3 + 272))(a4, a5, 114, 3, 0, 0);
  if ((v15 & 0x80000000) != 0
    || (uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 104))(a4, a5, 1, 0, (char *)&v69 + 2), (v15 & 0x80000000) != 0))
  {
    uint64_t v17 = v15;
    goto LABEL_14;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, _DWORD *, unsigned __int16 *))(a3 + 168))(a4, a5, HIWORD(v69), 3, 1, a7, &v68);
  if ((v17 & 0x80000000) != 0)
  {
LABEL_14:
    LOWORD(v26) = 0;
    goto LABEL_15;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(a4, a5, HIWORD(v69), 1, &v61) & 0x80000000) != 0|| v61 != 1)
  {
    LODWORD(v23) = *(_DWORD *)(a6 + 3520);
  }
  else
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void **, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v69), 1, &__src, &v68);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_14;
    }
    int v18 = (void *)heap_Alloc(*(void *)(a1 + 8), 32 * v68);
    *(void *)(a6 + 3512) = v18;
    if (!v18) {
      goto LABEL_47;
    }
    cstdlib_memcpy(v18, __src, 32 * v68);
    LODWORD(v23) = v68;
    *(_DWORD *)(a6 + 3520) = v68;
    if (v23)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      while (marker_copyParts(*(void *)(a6 + 3512) + v24, *(void *)(a1 + 8), *(void *)(a6 + 3512) + v24))
      {
        ++v25;
        unint64_t v23 = *(unsigned int *)(a6 + 3520);
        v24 += 32;
        if (v25 >= v23) {
          goto LABEL_19;
        }
      }
      if (v25)
      {
        int v38 = 0;
        do
          marker_freeParts((int *)(*(void *)(a6 + 3512) + 32 * (unsigned __int16)v38++), *(void **)(a1 + 8));
        while (v25 > (unsigned __int16)v38);
      }
      heap_Free(*(void **)(a1 + 8), *(void *)(a6 + 3512));
      *(void *)(a6 + 3512) = 0;
LABEL_47:
      log_OutPublic(*(void *)(a1 + 32), a2, 19000, 0, v19, v20, v21, v22, v58);
      LOWORD(v26) = 0;
      uint64_t v17 = 2229280778;
      goto LABEL_15;
    }
  }
LABEL_19:
  if (v23) {
    int v28 = *(_DWORD *)(*(void *)(a6 + 3512) + 12);
  }
  else {
    int v28 = 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a3 + 184))(a4, a5, HIWORD(v69), 0, &v61) & 0x80000000) == 0&& v61 == 1)
  {
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v69), 0, &v70, &v68);
    goto LABEL_28;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(a4, a5, HIWORD(v69), 4, &v61) & 0x80000000) == 0&& v61 == 1)
  {
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(a3 + 176))(a4, a5, HIWORD(v69), 4, &v70, &v68);
LABEL_28:
    uint64_t v17 = v29;
    if ((v29 & 0x80000000) == 0)
    {
      if (v68 <= 1u)
      {
        uint64_t v70 = 0;
        goto LABEL_37;
      }
      goto LABEL_31;
    }
    goto LABEL_14;
  }
LABEL_31:
  if (!v70)
  {
LABEL_37:
    uint64_t v34 = *(unsigned int *)(a6 + 3520);
    if (v34)
    {
      unsigned int v35 = *(int **)(a6 + 3512);
      while (1)
      {
        int v36 = *v35;
        v35 += 8;
        char v37 = v36 - 8;
        if (v36 - 8) < 0x16 && ((0x270F01u >> v37)) {
          break;
        }
        if (!--v34) {
          goto LABEL_114;
        }
      }
      LOWORD(v34) = 2;
    }
LABEL_114:
    *(_WORD *)(a6 + 10) = v34;
    *(_WORD *)(a6 + 3524) = *(_WORD *)(v14 + 3578) * v34;
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_16;
    }
    return v17;
  }
  uint64_t v30 = *(unsigned int *)(a6 + 3520);
  if (v30)
  {
    uint64_t v31 = 0;
    __int16 v32 = (int *)(*(void *)(a6 + 3512) + 12);
    while (1)
    {
      int v33 = *v32;
      v32 += 8;
      if (v33 != v28) {
        break;
      }
      if (v30 == ++v31) {
        goto LABEL_49;
      }
    }
    LODWORD(v30) = v31;
  }
LABEL_49:
  HIDWORD(v65) = v30;
  int v26 = 1;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __int16 *))(a3 + 152))(a4, a5, 2, HIWORD(v69), &v61) & 0x80000000) != 0|| !v61)
  {
    goto LABEL_112;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 104))(a4, a5, 2, HIWORD(v69), &v69);
  if ((v17 & 0x80000000) != 0) {
    goto LABEL_15;
  }
  unsigned __int16 v39 = v69;
  if (!(_WORD)v69)
  {
LABEL_112:
    LOWORD(v34) = v26 + *(_WORD *)(a6 + 14) + 2;
    goto LABEL_114;
  }
  int v60 = 0;
  while (1)
  {
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(a3 + 168))(a4, a5, v39, 0, 1, &v67, &v68);
    if ((v40 & 0x80000000) != 0) {
      break;
    }
    if ((v67 - 9) >= 6 && v67 != 4) {
      goto LABEL_105;
    }
    BOOL v42 = v67 == 14;
    int v43 = v60;
    if (!v60) {
      BOOL v42 = 0;
    }
    if (v67 != 12 && v60 != 0) {
      int v43 = 0;
    }
    int v59 = v42;
    int v60 = v43;
    uint64_t v40 = usextract_readFromPos(a3, a4, a5, (unsigned __int16)v69, &v64);
    if ((v40 & 0x80000000) != 0) {
      break;
    }
    unsigned __int16 v68 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(a4, a5, (unsigned __int16)v69, 3, &v61) & 0x80000000) == 0&& v61 == 1)
    {
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(a3 + 176))(a4, a5, (unsigned __int16)v69, 3, &v66, &v68);
      if ((v40 & 0x80000000) != 0) {
        break;
      }
    }
    if (v68 <= 1u)
    {
      int v44 = v67;
      if (v67 != 14)
      {
        char v66 = 0;
        goto LABEL_92;
      }
      int v45 = "M";
      char v66 = "M";
LABEL_72:
      if (*v45)
      {
        unsigned int v46 = v64;
        unsigned int v47 = *(_DWORD *)(a6 + 3520);
        int v48 = (__int16)v26;
        if (v47 > v30)
        {
          uint64_t v49 = (_DWORD *)(*(void *)(a6 + 3512) + 32 * v30);
          while (v49[3] - v28 <= v64)
          {
            if (*v49 == 26)
            {
              if (((v60 == 0) & ~v59) == 0) {
                break;
              }
              BOOL v51 = (__int16)v26 > 1;
              BOOL v50 = v67 != 14;
              if (v67 != 14 && !v65 && (__int16)v26 >= 2)
              {
                usextract_assureMinimalPause(a6, v30, v28, v64, &v65);
                int v48 = (__int16)v26;
                BOOL v51 = 1;
                int v63 = 1;
                BOOL v50 = 1;
              }
              goto LABEL_82;
            }
            --v47;
            v49 += 8;
            if (v30 == v47) {
              break;
            }
          }
        }
        BOOL v50 = 0;
        BOOL v51 = (__int16)v26 > 1;
LABEL_82:
        if (v65) {
          BOOL v52 = !v51;
        }
        else {
          BOOL v52 = 1;
        }
        if (!v52)
        {
          unsigned int v53 = v46;
          BOOL v54 = v50;
          usextract_insertPause(0, a6, v65, v63, v48, v28, v53, (_DWORD *)&v65 + 1);
          BOOL v50 = v54;
          ++v26;
        }
        if (v50
          && (cstdlib_strstr((char *)(*(void *)a6 + 152), "bet4")
           || cstdlib_strstr((char *)(*(void *)a6 + 152), "bet5")))
        {
          usextract_insertPause(0, a6, 5u, 1, (__int16)v26++, v28, v64, (_DWORD *)&v65 + 1);
        }
      }
      goto LABEL_91;
    }
    int v45 = v66;
    if (v66) {
      goto LABEL_72;
    }
LABEL_91:
    int v44 = v67;
LABEL_92:
    if (v44 == 13) {
      goto LABEL_95;
    }
    if (v44 == 14)
    {
      int v60 = 1;
LABEL_95:
      ++*(_WORD *)(a6 + 14);
    }
    uint64_t v40 = usextract_readSilDur(a3, a4, a5, (unsigned __int16)v69, &v65, &v63);
    if ((v40 & 0x80000000) != 0) {
      break;
    }
    unsigned int v55 = *(_DWORD *)(a6 + 3520);
    LODWORD(v30) = HIDWORD(v65);
    if (HIDWORD(v65) < v55)
    {
      __int16 v56 = (int *)(*(void *)(a6 + 3512) + 32 * HIDWORD(v65) + 12);
      while (1)
      {
        int v57 = *v56;
        v56 += 8;
        if (v57 - v28 > v64) {
          break;
        }
        LODWORD(v30) = v30 + 1;
        if (v55 == v30)
        {
          LODWORD(v30) = *(_DWORD *)(a6 + 3520);
          break;
        }
      }
    }
    HIDWORD(v65) = v30;
    if (v66 && *v66) {
      v26 += usextract_nrOfValidPhonemes(v14, (unsigned __int8 *)v66);
    }
LABEL_105:
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a3 + 120))(a4, a5, (unsigned __int16)v69, &v69);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_15;
    }
    unsigned __int16 v39 = v69;
    if (!(_WORD)v69) {
      goto LABEL_112;
    }
  }
  uint64_t v17 = v40;
LABEL_15:
  *(_WORD *)(a6 + 10) = v26;
  *(_WORD *)(a6 + 3524) = *(_WORD *)(v14 + 3578) * v26;
LABEL_16:
  usextract_ProcessEnd(a1, v16, a6);
  return v17;
}

uint64_t usextract_readFromPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  int v12 = 0;
  *a5 = 0;
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 1, (char *)&v12 + 2);
  uint64_t result = 0;
  if ((v10 & 0x80000000) == 0 && HIWORD(v12) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, int *))(a1 + 168))(a2, a3, a4, 1, 1, a5, &v12);
  }
  return result;
}

uint64_t usextract_assureMinimalPause(uint64_t result, unsigned int a2, int a3, unsigned int a4, _DWORD *a5)
{
  unsigned int v5 = *(_DWORD *)(result + 3520);
  unsigned int v6 = v5 - a2;
  if (v5 > a2)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = (int *)(*(void *)(result + 3512) + 32 * a2);
    do
    {
      if (v9[3] - a3 > a4) {
        break;
      }
      int v11 = *v9;
      v9 += 8;
      int v10 = v11;
      int v12 = v11 == 8 ? v8 + 1 : v8;
      if (v10 == 26) {
        ++v7;
      }
      else {
        int v8 = v12;
      }
      --v6;
    }
    while (v6);
    if (!v8)
    {
      if (v7) {
        *a5 = 5;
      }
    }
  }
  return result;
}

char *usextract_insertPause(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6, unsigned int a7, _DWORD *a8)
{
  uint64_t v16 = cstdlib_strstr((char *)(*(void *)a2 + 152), "bet4");
  uint64_t v17 = cstdlib_strstr((char *)(*(void *)a2 + 152), "bet5");
  uint64_t result = cstdlib_strstr((char *)(*(void *)a2 + 152), "bet6");
  if (a1 && *(__int16 *)(a1 + 674) < a5)
  {
    uint64_t v34 = result;
    cstdlib_memset((void *)(*(void *)(a2 + 104) + *(__int16 *)(a1 + 674)), 4, (a5 - *(__int16 *)(a1 + 674)) & ~((a5 - *(__int16 *)(a1 + 674)) >> 31));
    uint64_t result = v34;
  }
  uint64_t v19 = *a8;
  unsigned int v20 = *(_DWORD *)(a2 + 3520);
  int v21 = v20 - v19;
  if (v20 <= v19)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = 0;
    unint64_t v23 = (int *)(*(void *)(a2 + 3512) + 32 * v19);
    do
    {
      if (v23[3] - a6 > a7) {
        break;
      }
      int v24 = *v23;
      v23 += 8;
      if (v24 == 8) {
        ++v22;
      }
      --v21;
    }
    while (v21);
  }
  if (a4) {
    BOOL v25 = 1;
  }
  else {
    BOOL v25 = ((unint64_t)v17 | (unint64_t)result) == 0;
  }
  int v26 = !v25;
  if (v16) {
    BOOL v27 = v22 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  if (!v27) {
    int v26 = 1;
  }
  if (a3 >= 0xFFFF) {
    __int16 v28 = -1;
  }
  else {
    __int16 v28 = a3;
  }
  if (v22)
  {
    uint64_t v29 = *(void *)(a2 + 3512);
    do
    {
      int v30 = *(_DWORD *)(v29 + 32 * v19) == 8;
      if (a1) {
        ++*(_WORD *)(*(void *)(a2 + 1800) + 2 * a5);
      }
      LODWORD(v19) = v19 + 1;
      v22 -= v30;
    }
    while (v22);
    *a8 = v19;
  }
  if (a1)
  {
    ++*(_DWORD *)(a1 + 720);
    *(_DWORD *)(a1 + 716) = 0;
    *(_WORD *)(a1 + 682) = a5;
    *(unsigned char *)(*(void *)(a2 + 32) + a5) = 35;
    if (*(unsigned __int16 *)(a1 + 666) == (unsigned __int16)a5) {
      *(_WORD *)(a1 + 666) = a5 + 1;
    }
    if (*(unsigned __int16 *)(a1 + 668) == (unsigned __int16)a5) {
      *(_WORD *)(a1 + 668) = a5 + 1;
    }
    uint64_t v31 = *(void *)(a2 + 576);
    uint64_t v32 = a5 - 1;
    if (v31) {
      *(unsigned char *)(v31 + a5) = *(unsigned char *)(v31 + v32);
    }
    if (v26) {
      __int16 v33 = 0;
    }
    else {
      __int16 v33 = v28;
    }
    *(_WORD *)(*(void *)(a2 + 1784) + 2 * a5) = v33;
    *(unsigned char *)(*(void *)(a2 + 112) + v32) = 3;
    *(unsigned char *)(*(void *)(a2 + 104) + a5) = 3;
    *(unsigned char *)(a1 + 12) = 3;
    *(unsigned char *)(*(void *)(a2 + 120) + a5) = *(unsigned char *)(a1 + 14);
    *(unsigned char *)(a1 + __sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = 0;
  }
  return result;
}

uint64_t usextract_readSilDur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  int v16 = 0;
  *a5 = 0;
  if (a6) {
    *a6 = 0;
  }
  unsigned __int16 v15 = 0;
  uint64_t __s1 = 0;
  uint64_t v12 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 8, (char *)&v16 + 2) & 0x80000000) == 0&& HIWORD(v16) == 1)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, int *))(a1 + 168))(a2, a3, a4, 8, 1, &v15, &v16);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    *a5 = v15;
  }
  if (a6)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 18, (char *)&v16 + 2) & 0x80000000) == 0&& HIWORD(v16) == 1)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a1 + 176))(a2, a3, a4, 18, &__s1, &v16);
      if ((v12 & 0x80000000) == 0 && !cstdlib_strcmp(__s1, "external")) {
        *a6 = 1;
      }
    }
  }
  return v12;
}

uint64_t usextract_nrOfValidPhonemes(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v6 = a2;
  skipUnvalidPhonemes(a1, &v6);
  unsigned int v3 = v6;
  if (*v6)
  {
    unsigned __int16 v4 = 0;
    do
    {
      ++v4;
      unsigned int v6 = v3 + 1;
      skipUnvalidPhonemes(a1, &v6);
      unsigned int v3 = v6;
    }
    while (*v6);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t usextract_ProcessEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 3512);
  if (v3)
  {
    if (*(_DWORD *)(a3 + 3520))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        marker_freeParts((int *)(*(void *)(a3 + 3512) + v6), *(void **)(a1 + 8));
        ++v7;
        v6 += 32;
      }
      while (v7 < *(unsigned int *)(a3 + 3520));
      uint64_t v3 = *(void *)(a3 + 3512);
    }
    heap_Free(*(void **)(a1 + 8), v3);
    *(void *)(a3 + 3512) = 0;
  }
  return 0;
}

uint64_t usextract_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a1;
  uint64_t v14 = 0;
  unsigned int v15 = 0;
  uint64_t v426 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(void *)a6;
  int v402 = 0;
  unsigned __int16 v401 = 0;
  unsigned int v400 = 4;
  uint64_t v17 = &v415;
  uint64_t v398 = 0;
  int v399 = 0;
  int v397 = 0;
  int v396 = 0;
  unsigned __int16 v395 = 0;
  unsigned int v18 = *(__int16 *)(a6 + 10) & ~(*(__int16 *)(a6 + 10) >> 31);
  long long v394 = 0u;
  memset(__s1, 0, sizeof(__s1));
  long long v392 = 0u;
  memset(v413, 0, 448);
  long long v411 = 0u;
  long long v412 = 0u;
  long long v409 = 0u;
  long long v410 = 0u;
  int v387 = *(unsigned __int8 *)(v16 + 2744);
  uint64_t v391 = 0;
  LODWORD(v392) = 0;
  __s1[3] = 0;
  *(void *)&long long v394 = 0x100000000;
  WORD4(v394) = -1;
  __s2 = 0;
  int v390 = 0;
  *((void *)&v392 + 1) = 0;
  __s1[0] = 0;
  uint64_t v19 = 9;
  LOWORD(__s1[1]) = 0;
  do
  {
    *((unsigned char *)&v409 + v19 + 1) = curFeatTable[v14 + 2];
    if (*(void *)(a6 + 8 * v19 + 16)) {
      *((_WORD *)&v413[9] + v15++ + 6) = v19;
    }
    uint64_t v19 = *(unsigned __int16 *)&curFeatTable[v14 + 4];
    v14 += 4;
  }
  while (v14 != 132);
  *((_WORD *)&v413[9] + v15 + 6) = 218;
  BYTE6(v411) = 0;
  unsigned int v20 = *(void **)(v16 + 3336);
  if (v20)
  {
    if (*v20)
    {
      uint64_t v21 = 0;
      int v22 = v20 + 1;
      while (v22[v21++])
        ;
      uint64_t v24 = v21;
    }
    else
    {
      uint64_t v24 = 0;
    }
    int v414 = (unsigned char *)heap_Alloc(*(void *)(a1 + 8), v24);
    if (!v414) {
      goto LABEL_23;
    }
  }
  else
  {
    int v414 = 0;
  }
  LOBYTE(v409) = 0;
  int v424 = 0;
  int v425 = 0;
  uint64_t v420 = 0;
  uint64_t v421 = 0;
  int v422 = 0;
  __int16 v423 = -1;
  long long v415 = xmmword_2206E1BA0;
  int v416 = 0xFFFF;
  if (v18 <= 1)
  {
    log_OutPublic(*(void *)(v13 + 32), a2, 19010, 0, a5, a6, a7, a8, v361);
    BOOL v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 2229280785;
    goto LABEL_686;
  }
  uint64_t v388 = a4;
  if (*(__int16 *)(a6 + 14) >= 1)
  {
    __int16 v28 = (unsigned char *)heap_Alloc(*(void *)(v13 + 8), 500);
    *((void *)&v392 + 1) = v28;
    if (v28)
    {
      *__int16 v28 = 0;
      uint64_t v29 = (char *)heap_Alloc(*(void *)(v13 + 8), 500);
      __s1[0] = v29;
      if (v29)
      {
        char *v29 = 0;
        goto LABEL_19;
      }
    }
LABEL_23:
    uint64_t v27 = 2229280778;
    log_OutPublic(*(void *)(v13 + 32), a2, 19000, 0, a5, a6, a7, a8, v361);
    BOOL v25 = 0;
LABEL_24:
    uint64_t v26 = 0;
    goto LABEL_686;
  }
LABEL_19:
  uint64_t v384 = a2;
  uint64_t v386 = a3;
  if (!*(void *)(a6 + 456))
  {
    BOOL v25 = 0;
    uint64_t v26 = 0;
    unsigned int v375 = 0;
    goto LABEL_26;
  }
  BOOL v25 = (unsigned char *)heap_Calloc(*(void **)(v13 + 8), 1, (unsigned __int16)v18 + 3);
  if (!v25)
  {
    uint64_t v27 = 2229280778;
    log_OutPublic(*(void *)(v13 + 32), v384, 19000, 0, v30, v31, v32, v33, v361);
    goto LABEL_24;
  }
  unsigned int v375 = (unsigned __int16)v18 + 2;
  uint64_t v26 = heap_Alloc(*(void *)(v13 + 8), v375);
  if (!v26)
  {
    uint64_t v27 = 2229280778;
    log_OutPublic(*(void *)(v13 + 32), v384, 19000, 0, v34, v35, v36, v37, v361);
    goto LABEL_686;
  }
LABEL_26:
  uint64_t v385 = a5;
  if (log_HasTraceTuningDataSubscriber(*(void *)(v13 + 32))) {
    log_OutTraceTuningData(*(uint64_t ***)(v13 + 32), 301, (uint64_t)"%s%s %s%.*s %s%s", v38, v39, v40, v41, v42, "BEG");
  }
  int SentType = usextract_GetSentType(v13, v384, v16, "\\TS\\"", 0, 0, &v396);
  LOBYTE(v409) = SentType;
  BYTE14(v410) = SentType;
  cstdlib_memset(*(void **)(a6 + 184), 4, (unsigned __int16)v18);
  cstdlib_memset(*(void **)(a6 + 96), 3, (unsigned __int16)v18);
  cstdlib_memset(*(void **)(a6 + 248), SentType, (unsigned __int16)v18);
  if (*(_DWORD *)(v16 + 2604) == 2) {
    int v44 = 87;
  }
  else {
    int v44 = 88;
  }
  cstdlib_memset(*(void **)(a6 + 48), v44, (unsigned __int16)v18);
  int v45 = *(void **)(a6 + 288);
  if (v45) {
    cstdlib_memset(v45, 1, (unsigned __int16)v18);
  }
  unsigned int v46 = *(void **)(a6 + 312);
  uint64_t v47 = v385;
  if (v46) {
    cstdlib_memset(v46, 1, (unsigned __int16)v18);
  }
  if (!*(_DWORD *)(v16 + 2516))
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = 0;
    uint64_t v51 = *(void *)a6;
    LODWORD(v52) = *(unsigned __int16 *)(*(void *)a6 + 2966);
    if ((unsigned __int16)v18 <= 1u) {
      int v53 = 1;
    }
    else {
      int v53 = (unsigned __int16)v18;
    }
    do
    {
      if (v52)
      {
        uint64_t v54 = 0;
        unint64_t v55 = 0;
        do
        {
          uint64_t v56 = *(void *)(v51 + 2968) + v54;
          uint64_t v57 = v49 * *(unsigned __int16 *)(*(void *)a6 + 2966);
          *(_DWORD *)(*(void *)(a6 + 3568) + 4 * (v55 + v57)) = *(_DWORD *)(v56 + 4);
          *(_DWORD *)(*(void *)(a6 + 3576) + 4 * (v55 + v57)) = *(_DWORD *)(v56 + 4);
          *(unsigned char *)(*(void *)(a6 + 3600) + v57 + v55++) = *(unsigned char *)(v56 + 10);
          unint64_t v52 = *(unsigned __int16 *)(v51 + 2966);
          v54 += 32;
        }
        while (v55 < v52);
      }
      uint64_t v58 = *(unsigned __int16 *)(v51 + 3360);
      if (*(_WORD *)(v51 + 3360))
      {
        int v59 = (_DWORD *)(*(void *)(v51 + 3368) + 4);
        uint64_t v60 = v48 * *(unsigned __int16 *)(*(void *)a6 + 3360);
        __int16 v61 = (_DWORD *)(*(void *)(a6 + 3592) + v60);
        int v62 = (_DWORD *)(*(void *)(a6 + 3584) + v60);
        do
        {
          *v62++ = *v59;
          int v63 = *v59;
          v59 += 3;
          *v61++ = v63;
          --v58;
        }
        while (v58);
      }
      ++v50;
      ++v49;
      v48 += 4;
    }
    while (v50 != v53);
  }
  **(unsigned char **)(a6 + 104) = 1;
  *(unsigned char *)(*(void *)(a6 + 104) + 1) = 5;
  **(unsigned char **)(a6 + 120) = 1;
  *(unsigned char *)(*(void *)(a6 + 120) + 1) = 1;
  uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 104))(a4, v385, 1, 0, (char *)&v402 + 2);
  if ((v64 & 0x80000000) != 0) {
    goto LABEL_685;
  }
  int v380 = *(_DWORD *)(a6 + 3520) ? *(_DWORD *)(*(void *)(a6 + 3512) + 12) : 0;
  uint64_t v65 = cstdlib_strstr((char *)(*(void *)a6 + 152), "bet4");
  uint64_t v66 = *(unsigned int *)(a6 + 3520);
  if (v66)
  {
    uint64_t v67 = *(void *)(a6 + 3512);
    if (*(_DWORD *)(v67 + 12) == v380)
    {
      unsigned int v68 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = *(_WORD **)(a6 + 1800);
      int v71 = (unsigned __int16)*v70;
      uint64_t v72 = (_DWORD *)(v67 + 24);
      while (1)
      {
        if (*(v72 - 6) == 8) {
          v68 += *v72;
        }
        _WORD *v70 = ++v71;
        if (v66 - 1 == v69) {
          break;
        }
        int v73 = v72[5];
        v72 += 8;
        ++v69;
        if (v73 != v380) {
          goto LABEL_62;
        }
      }
      LODWORD(v69) = v66;
    }
    else
    {
      LODWORD(v69) = 0;
      unsigned int v68 = 0;
    }
LABEL_62:
    HIDWORD(v398) = v69;
  }
  else
  {
    unsigned int v68 = 0;
  }
  **(unsigned char **)(a6 + 32) = 35;
  if (v68 >= 0xFFFF) {
    LOWORD(v68) = -1;
  }
  if (v65) {
    LOWORD(v68) = 0;
  }
  **(_WORD **)(a6 + 1784) = v68;
  LODWORD(v398) = 0;
  int v408 = 0;
  int v406 = 0;
  int v405 = 4;
  __int16 v404 = 0;
  uint64_t v403 = 0;
  __int16 __s = 0;
  uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 104))(a4, v385, 1, 0, (char *)&v408 + 2);
  if ((v64 & 0x80000000) != 0) {
    goto LABEL_685;
  }
  size_t v381 = v16;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __int16 *))(a3 + 152))(a4, v385, 2, HIWORD(v408), &v404) & 0x80000000) != 0|| !v404)
  {
    goto LABEL_111;
  }
  uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 104))(a4, v385, 2, HIWORD(v408), &v408);
  if ((v64 & 0x80000000) != 0)
  {
LABEL_685:
    uint64_t v27 = v64;
    goto LABEL_686;
  }
  unsigned __int16 v74 = v408;
  if (!(_WORD)v408) {
    goto LABEL_111;
  }
  uint64_t v366 = v26;
  uint64_t v382 = 0;
  LOWORD(v26) = 0;
  do
  {
    if (!(_WORD)v26)
    {
LABEL_91:
      uint64_t v80 = a3;
      uint64_t v83 = v388;
      goto LABEL_92;
    }
    uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(a3 + 168))(v388, v47, v74, 0, 1, &v405, (char *)&v406 + 2);
    if ((v75 & 0x80000000) != 0)
    {
      uint64_t v27 = v75;
      goto LABEL_108;
    }
    __int16 __s = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(v388, v47, (unsigned __int16)v26, 14, &v404) & 0x80000000) == 0&& v404 == 1)
    {
      uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a3 + 176))(v388, v47, (unsigned __int16)v26, 14, &__s, (char *)&v406 + 2);
      if ((v76 & 0x80000000) != 0)
      {
        uint64_t v27 = v76;
        goto LABEL_108;
      }
    }
    if ((v405 - 9) < 6) {
      goto LABEL_79;
    }
    if (v405 != 15)
    {
      if (v405 != 4) {
        goto LABEL_91;
      }
LABEL_79:
      if (!__s) {
        goto LABEL_91;
      }
      uint64_t v403 = __s;
      do
      {
        char v77 = __s;
        size_t v78 = cstdlib_strlen("BNDSHAPE");
        if (cstdlib_strncmp(v77, "BNDSHAPE", v78)) {
          __int16 v79 = hlp_NLUStrNext(v403);
        }
        else {
          __int16 v79 = hlp_NLUStrStrip(v403);
        }
        uint64_t v403 = v79;
      }
      while (v79);
      hlp_NLUStrJoin(__s, "");
      uint64_t v80 = a3;
      uint64_t v81 = *(void (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(a3 + 160);
      __int16 v82 = cstdlib_strlen(__s);
      uint64_t v83 = v388;
      v81(v388, v47, (unsigned __int16)v26, 14, (unsigned __int16)(v82 + 1), __s, &v406);
      goto LABEL_92;
    }
    if (__s)
    {
      if (hlp_NLUStrFind(__s, "BNDSHAPE", &v403, (unsigned __int16 *)&v406 + 1)) {
        goto LABEL_91;
      }
      uint64_t v84 = *(uint64_t **)(v13 + 8);
      size_t v85 = cstdlib_strlen(__s);
      unsigned __int16 v86 = (char *)heap_Realloc(v84, v382, v85 + 13);
      uint64_t v403 = v86;
      if (!v86) {
        goto LABEL_707;
      }
      int v91 = v86;
      cstdlib_strcpy(v86, __s);
      hlp_NLUStrJoin(v91, "BNDSHAPE:L%");
      uint64_t v80 = a3;
      uint64_t v92 = *(void (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(a3 + 160);
      __int16 v93 = cstdlib_strlen(v91);
      v92(v388, v385, (unsigned __int16)v26, 14, (unsigned __int16)(v93 + 1), v91, &v406);
      uint64_t v47 = v385;
      uint64_t v83 = v388;
      uint64_t v382 = (uint64_t)v91;
    }
    else
    {
      uint64_t v80 = a3;
      uint64_t v83 = v388;
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(a3 + 160))(v388, v47, (unsigned __int16)v26, 14, 12, "BNDSHAPE:L%", &v406);
    }
LABEL_92:
    uint64_t v26 = (unsigned __int16)v408;
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v80 + 120))(v83, v47, (unsigned __int16)v408, &v408);
    if ((v27 & 0x80000000) != 0) {
      goto LABEL_108;
    }
    unsigned __int16 v74 = v408;
  }
  while ((_WORD)v408);
  if (v26)
  {
    __int16 __s = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a3 + 184))(v388, v47, v26, 14, &v404) & 0x80000000) != 0|| v404 != 1|| (uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a3 + 176))(v388, v47, v26, 14, &__s, (char *)&v406 + 2), (v27 & 0x80000000) == 0))
    {
      if (!__s)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const char *, int *))(a3 + 160))(v388, v47, v26, 14, 12, "BNDSHAPE:L%", &v406);
        goto LABEL_108;
      }
      if (hlp_NLUStrFind(__s, "BNDSHAPE", &v403, (unsigned __int16 *)&v406 + 1)) {
        goto LABEL_108;
      }
      uint64_t v94 = *(uint64_t **)(v13 + 8);
      size_t v95 = cstdlib_strlen(__s);
      uint64_t v96 = (char *)heap_Realloc(v94, v382, v95 + 13);
      uint64_t v403 = v96;
      if (v96)
      {
        uint64_t v97 = v96;
        cstdlib_strcpy(v96, __s);
        hlp_NLUStrJoin(v97, "BNDSHAPE:L%");
        uint64_t v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(v386 + 160);
        __int16 v99 = cstdlib_strlen(v97);
        v98(v388, v385, v26, 14, (unsigned __int16)(v99 + 1), v97, &v406);
        uint64_t v47 = v385;
        uint64_t v100 = (uint64_t)v97;
        a3 = v386;
        uint64_t v26 = v366;
        goto LABEL_109;
      }
LABEL_707:
      uint64_t v27 = 2229280778;
      log_OutPublic(*(void *)(v13 + 32), v384, 19000, 0, v87, v88, v89, v90, v361);
      uint64_t v47 = v385;
    }
  }
LABEL_108:
  uint64_t v26 = v366;
  uint64_t v100 = v382;
  if (!v382) {
    goto LABEL_110;
  }
LABEL_109:
  heap_Free(*(void **)(v13 + 8), v100);
LABEL_110:
  uint64_t v16 = v381;
  if ((v27 & 0x80000000) != 0) {
    goto LABEL_686;
  }
LABEL_111:
  int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 152))(v388, v47, 2, HIWORD(v402), (char *)&v396 + 2);
  LOWORD(v105) = 0;
  LOWORD(v106) = 1;
  if (v101 < 0 || !HIWORD(v396))
  {
LABEL_548:
    int v311 = (__int16)v106;
    unsigned __int16 v379 = v106;
    if (HIDWORD(v391))
    {
      usextract_finishPrompt((uint64_t)&__s2, v13, v384, (void *)a6, (__int16)v106, v102, v103, v104);
      LOWORD(v106) = v379;
    }
    __int16 v370 = v105;
    if (*(void *)(a6 + 576))
    {
      LOWORD(v312) = v106 - 1;
      do
      {
        *(unsigned char *)(*(void *)(a6 + 576) + (__int16)v312) = 5;
        int v312 = (__int16)(v312 - 1);
      }
      while (v312 >= 1 && *(unsigned char *)(*(void *)(a6 + 32) + (unsigned __int16)v312) == 35);
    }
    int v313 = WORD3(v415);
    int v314 = SWORD4(v415);
    uint64_t v315 = WORD4(v415);
    uint64_t v316 = SWORD4(v415);
    if (SWORD4(v415) < (__int16)v106)
    {
      cstdlib_memset((void *)(*(void *)(a6 + 120) + SWORD4(v415)), 3, (v311 - SWORD4(v415)) & ~((v311 - SWORD4(v415)) >> 31));
      LOWORD(v106) = v379;
      if (*(void *)(a6 + 592))
      {
        uint64_t v317 = v316;
        do
          *(unsigned char *)(*(void *)(a6 + 592) + v317++) = 5;
        while (v379 != (unsigned __int16)v317);
      }
    }
    unsigned int v318 = v315 != v313;
    BOOL v172 = v314 < (__int16)v106;
    uint64_t v319 = v384;
    if (v172 && ((__int16)v315 & 0x80000000) == 0 && *(void *)(a6 + 544))
    {
      uint64_t v320 = v315;
      do
      {
        uint64_t v321 = *(void *)(a6 + 544);
        if (*(unsigned __int8 *)(v321 + v320) > v318) {
          *(unsigned char *)(v321 + v320) = v318;
        }
        ++v320;
      }
      while ((__int16)v106 != v320);
    }
    if ((int)v316 < (__int16)v106 && ((__int16)v315 & 0x80000000) == 0 && *(void *)(a6 + 1440))
    {
      do
      {
        uint64_t v322 = *(void *)(a6 + 1440);
        if (*(unsigned __int8 *)(v322 + v315) > v318) {
          *(unsigned char *)(v322 + v3__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = v318;
        }
        ++v315;
      }
      while ((__int16)v106 != v315);
    }
    int v323 = SWORD5(v415);
    if (SWORD5(v415) < (__int16)v106)
    {
      int v324 = WORD3(v415);
      uint64_t v325 = SWORD5(v415);
      cstdlib_memset((void *)(*(void *)(a6 + 104) + SWORD5(v415)), 5, (v311 - SWORD5(v415)) & ~((v311 - SWORD5(v415)) >> 31));
      if (*(void *)(a6 + 608))
      {
        uint64_t v326 = v323;
        do
          *(unsigned char *)(*(void *)(a6 + 608) + v326++) = 5;
        while (v379 != (unsigned __int16)v326);
      }
      BOOL v327 = v324 != (unsigned __int16)v323;
      if (*(void *)(a6 + 560))
      {
        uint64_t v328 = v323;
        do
          *(unsigned char *)(*(void *)(a6 + 560) + v328++) = v327;
        while (v379 != (unsigned __int16)v328);
      }
      uint64_t v319 = v384;
      if (*(void *)(a6 + 1496))
      {
        do
          *(unsigned char *)(*(void *)(a6 + 1496) + v325++) = v327;
        while (v379 != (unsigned __int16)v325);
      }
    }
    usextract_updateLastStrAcc(a6, v311, SWORD6(v415), 1u);
    usextract_updateLastStrAccShp(a6, v311, SHIWORD(v415), 6u, 1u);
    if (SHIWORD(v416) >= 1) {
      cstdlib_memset(*(void **)(a6 + 136), 1, HIWORD(v416));
    }
    int v329 = cstdlib_strstr((char *)(*(void *)a6 + 152), "bet4");
    BOOL v330 = cstdlib_strstr((char *)(*(void *)a6 + 152), "bet5");
    uint64_t v335 = HIDWORD(v398);
    unint64_t v336 = *(unsigned int *)(a6 + 3520);
    if ((unint64_t)v329 | (unint64_t)v330)
    {
      unsigned __int16 v337 = v379;
      if (HIDWORD(v398) < v336)
      {
        unint64_t v338 = HIDWORD(v398) + 1;
        uint64_t v339 = (int *)(*(void *)(a6 + 3512) + 32 * HIDWORD(v398));
        do
        {
          int v341 = *v339;
          v339 += 8;
          int v340 = v341;
        }
        while (v341 != 26 && v338++ < v336);
        if (v340 == 26)
        {
          *(unsigned char *)(*(void *)(a6 + 32) + (__int16)v379) = 35;
          if (*(void *)(a6 + 576))
          {
            LOWORD(v343) = v379;
            do
            {
              *(unsigned char *)(*(void *)(a6 + 576) + (__int16)v343) = 5;
              int v343 = (__int16)(v343 - 1);
            }
            while (v343 >= 1 && *(unsigned char *)(*(void *)(a6 + 32) + (unsigned __int16)v343) == 35);
          }
          *(unsigned char *)(*(void *)(a6 + 104) + (__int16)v379) = 5;
          *(unsigned char *)(*(void *)(a6 + 120) + (__int16)v379) = 3;
          *(unsigned char *)(*(void *)(a6 + 248) + (__int16)v379) = *(unsigned char *)(*(void *)(a6 + 248) + (__int16)v379 - 1);
          unsigned __int16 v337 = v379 + 1;
          LODWORD(v336) = *(_DWORD *)(a6 + 3520);
        }
      }
    }
    else
    {
      unsigned __int16 v337 = v379;
    }
    if (v335 >= v336)
    {
      unsigned int v344 = 0;
      uint64_t v346 = (__int16)v337;
    }
    else
    {
      unsigned int v344 = 0;
      uint64_t v345 = *(void *)(a6 + 1800);
      uint64_t v346 = (__int16)v337;
      int v347 = *(unsigned __int16 *)(v345 + 2 * (__int16)v337);
      int v348 = (_DWORD *)(*(void *)(a6 + 3512) + 32 * v335);
      uint64_t v349 = v336 - v335;
      do
      {
        if (*v348 == 8) {
          v344 += v348[6];
        }
        *(_WORD *)(v345 + 2 * (__int16)v337) = ++v347;
        v348 += 8;
        --v349;
      }
      while (v349);
      HIDWORD(v398) = v336;
    }
    *(unsigned char *)(*(void *)(a6 + 32) + v346) = 35;
    if (*(void *)(a6 + 576))
    {
      LOWORD(v350) = v337;
      do
      {
        *(unsigned char *)(*(void *)(a6 + 576) + (__int16)v350) = 5;
        int v350 = (__int16)(v350 - 1);
      }
      while (v350 >= 1 && *(unsigned char *)(*(void *)(a6 + 32) + (unsigned __int16)v350) == 35);
    }
    if (v344 >= 0xFFFF) {
      __int16 v351 = -1;
    }
    else {
      __int16 v351 = v344;
    }
    if (v329) {
      __int16 v351 = 0;
    }
    *(_WORD *)(*(void *)(a6 + 1784) + 2 * v346) = v351;
    *(unsigned char *)(*(void *)(a6 + 104) + v346) = 5;
    *(unsigned char *)(*(void *)(a6 + 120) + v346) = 3;
    *(unsigned char *)(*(void *)(a6 + 248) + v346) = *(unsigned char *)(*(void *)(a6 + 248) + v346 - 1);
    int v352 = (__int16)(v337 + 1);
    uint64_t v353 = *(void *)(a6 + 456);
    if (v353 && *(unsigned __int8 *)(*(void *)(a6 + 32) + (__int16)(v337 + 1)) == v25[v370]) {
      *(unsigned char *)(v353 + (__int16)(v337 + 1)) = *(unsigned char *)(v26 + v370);
    }
    if (*(__int16 *)(a6 + 10) < v352)
    {
      log_OutPublic(*(void *)(v13 + 32), v319, 19011, (uint64_t)"%s%d%s%d", v331, v332, v333, v334, "allocated");
      uint64_t v27 = 2229281030;
      goto LABEL_686;
    }
    *(_WORD *)(a6 + 10) = v352;
    usextract_setUnknownOnPauses(a6);
    if ((*(_DWORD *)(v381 + 3104) & 0x80000000) == 0 && (*(_DWORD *)(v381 + 3208) & 0x80000000) == 0) {
      usextract_setNextDifferentiator(v381, a6);
    }
    if ((*(_DWORD *)(v381 + 3092) & 0x80000000) != 0)
    {
      int v354 = BYTE14(v410);
      if (BYTE14(v410) == 2 && WORD5(v415) == 1 && WORD4(v415) == 1)
      {
        int v354 = 0;
        BYTE14(v410) = 0;
      }
      cstdlib_memset(*(void **)(a6 + 248), v354, v352 & ~(v352 >> 31));
    }
    usextract_setPrePostSylBnd(a6);
    if (!*(_DWORD *)(v381 + 2516) && *(_DWORD *)(v381 + 2604) != 2) {
      usextract_setPlosives(v381, a6);
    }
    usextract_setWordPhrs(a6);
    usextract_setFineSylPosInPhrs(a6);
    usextract_finalizeSylType(a6);
    usextract_setSylPos(a6, SHIWORD(v416));
    usextract_finalizeNrSylInPhrs(a6);
    usextract_finalizePhnCntSyl(a6);
    if (*(void *)(a6 + 576))
    {
      if (!*(void *)(a6 + 1416) || !*(void *)(a6 + 1408) || (usextract_setNrSylInIP4(a6), *(void *)(a6 + 576)))
      {
        if (!*(void *)(a6 + 1456)
          || (usextract_setSylNrInIP4(a6), usextract_finalizeFineSylPosInIP4(a6), *(void *)(a6 + 576)))
        {
          if (!*(void *)(a6 + 1432)
            || !*(void *)(a6 + 1424)
            || !*(void *)(a6 + 1464)
            || !*(void *)(a6 + 1472)
            || (usextract_setSylStressedPrm(a6), *(void *)(a6 + 576)))
          {
            if (!*(void *)(a6 + 1400)
              || !*(void *)(a6 + 1480)
              || !*(void *)(a6 + 1488)
              || (usextract_setWrdBndTone(a6), *(void *)(a6 + 576)))
            {
              if (!*(void *)(a6 + 1504)
                || !*(void *)(a6 + 1512)
                || (usextract_setIP4PosInSent(a6), *(void *)(a6 + 576)))
              {
                if (*(void *)(a6 + 1432))
                {
                  if (!*(void *)(a6 + 1528)
                    || !*(void *)(a6 + 1544)
                    || !*(void *)(a6 + 1560)
                    || !*(void *)(a6 + 1576)
                    || (usextract_setRhythmRelated(a6), *(void *)(a6 + 576)))
                  {
                    if (*(void *)(a6 + 1432)
                      && *(void *)(a6 + 1520)
                      && *(void *)(a6 + 1536)
                      && *(void *)(a6 + 1552)
                      && *(void *)(a6 + 1568))
                    {
                      usextract_setRhythmRelatedBackward(a6);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (*(void *)(a6 + 568) && *(void *)(a6 + 1432) && *(void *)(a6 + 1584)) {
      usextract_finalizeFineSylBndShape(a6);
    }
    if (*(void *)(a6 + 1384)) {
      usextract_setSylIndexInWordFromStart(a6);
    }
    if (*(void *)(a6 + 1392)) {
      usextract_setSylIndexInWordFromEnd(a6);
    }
    if (*(void *)(a6 + 304)) {
      usextract_setSylPosInWordRelEnd(a6);
    }
    if (*(void *)(a6 + 296)) {
      usextract_setSylPosInSenRelStr(a6, (__int16)v416, v423);
    }
    usextract_setPitchAndDurFromCart(v381, a6);
    if ((*(_DWORD *)(v381 + 3392) & 0x80000000) == 0 || (*(_DWORD *)(v381 + 3396) & 0x80000000) == 0) {
      usextract_setSylTrans(v381, a6);
    }
    if (*(_DWORD *)(v381 + 2560)) {
      usextract_setSylChunk((__int16 *)a6);
    }
    uint64_t v64 = usextract_applyGenericContextRules(v381, a6);
    if ((v64 & 0x80000000) == 0)
    {
      if (*(__int16 *)(a6 + 14) >= 1 && !cstdlib_strstr((char *)(*(void *)a6 + 152), "bet5")) {
        usextract_removePromptColumns(a6);
      }
      usextract_setMNXfeatures(v13, v319, a6);
      if (log_GetLogLevel(*(void *)(v13 + 32)) >= 6) {
        usextract_logAllFeatures(v13, v319, (uint64_t *)a6);
      }
      uint64_t v27 = 0;
      goto LABEL_686;
    }
    goto LABEL_685;
  }
  uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 104))(v388, v47, 2, HIWORD(v402), &v402);
  if ((v64 & 0x80000000) != 0) {
    goto LABEL_685;
  }
  uint64_t v105 = 0;
  unsigned int v383 = 0;
  int v364 = 0;
  if (v25) {
    BOOL v107 = v26 == 0;
  }
  else {
    BOOL v107 = 1;
  }
  int v108 = v107;
  int v363 = v108;
  uint64_t v106 = 1;
  char v365 = v25;
  int v367 = (unsigned char *)v26;
  while (1)
  {
    if (!(_WORD)v402) {
      goto LABEL_548;
    }
    uint64_t v376 = v106;
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(v388, v385);
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_685;
    }
    unsigned int v112 = v400;
    if (v400 - 9 < 6) {
      goto LABEL_124;
    }
    if (v400 != 15) {
      break;
    }
    uint64_t v125 = v385;
    usextract_handlePhraseRecord((uint64_t)&v409, a3, v388, v385, (unsigned __int16)v402, (void *)a6, (__int16)v376);
LABEL_537:
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a3 + 120))(v388, v125, (unsigned __int16)v402, &v402);
    uint64_t v106 = v376;
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_685;
    }
  }
  if (v400 != 4)
  {
LABEL_536:
    uint64_t v125 = v385;
    goto LABEL_537;
  }
LABEL_124:
  if (v400 != 11 && HIDWORD(v391) != 0)
  {
    usextract_finishPrompt((uint64_t)&__s2, v13, v384, (void *)a6, (__int16)v376, v109, v110, v111);
    int v364 = 1;
    unsigned int v112 = v400;
  }
  uint64_t v368 = v105;
  LODWORD(v392) = 0;
  if (v112 != 12 && v391)
  {
    LODWORD(v391) = 0;
    LODWORD(v392) = v112 == 14;
  }
  uint64_t v64 = usextract_readFromPos(a3, v388, v385, (unsigned __int16)v402, &v395);
  if ((v64 & 0x80000000) != 0) {
    goto LABEL_685;
  }
  unsigned __int16 v401 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a3 + 184))(v388, v385, (unsigned __int16)v402, 3, (char *)&v396 + 2) & 0x80000000) == 0&& HIWORD(v396) == 1)
  {
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(a3 + 176))(v388, v385, (unsigned __int16)v402, 3, &v399, &v401);
    if ((v64 & 0x80000000) != 0) {
      goto LABEL_685;
    }
  }
  if (v401 > 1u)
  {
    if (v399)
    {
      unsigned int v118 = cstdlib_strlen(v399);
      uint64_t v119 = v399;
      uint64_t v120 = (unsigned __int16)v402;
      LOWORD(__s) = 0;
      unsigned int v383 = v118;
      if (!v118 || !v399) {
        goto LABEL_155;
      }
      unsigned int v121 = 0;
      unsigned __int16 v122 = 0;
      char v123 = 1;
      do
      {
        while (1)
        {
          unsigned __int16 v124 = v122;
          if (!v122 || v119[v122] != 42 || v119[v121 - 1] == 45) {
            break;
          }
          char v123 = 0;
          v119[v122++] = 45;
          unsigned int v121 = (unsigned __int16)(v124 + 1);
          if (v118 <= v121) {
            goto LABEL_157;
          }
        }
        ++v122;
        unsigned int v121 = (unsigned __int16)(v124 + 1);
      }
      while (v118 > v121);
      if ((v123 & 1) == 0)
      {
LABEL_157:
        int v372 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char **))(v386 + 160);
        __int16 v126 = cstdlib_strlen(v119);
        uint64_t v127 = v120;
        a3 = v386;
        uint64_t v64 = v372(v388, v385, v127, 3, (unsigned __int16)(v126 + 1), v119, &__s);
        if ((v64 & 0x80000000) != 0) {
          goto LABEL_685;
        }
      }
      else
      {
LABEL_155:
        a3 = v386;
      }
    }
    uint64_t v117 = v399;
  }
  else
  {
    log_OutText(*(void *)(v13 + 32), v384, 5, 0, (uint64_t)"Word record with empty phonetization, eTokenType=%d", v114, v115, v116, v400);
    unsigned int v383 = v400 == 14;
    if (v400 == 14) {
      uint64_t v117 = "M";
    }
    else {
      uint64_t v117 = 0;
    }
  }
  if (*(void *)(a6 + 536)
    && (WordPrunsigned int m = usextract_readWordPrm(a3, v388, v385, (unsigned __int16)v402, (unsigned char *)v413 + 2),
        (WordPrm & 0x80000000) != 0)
    || *(void *)(a6 + 1424)
    && (WordPrunsigned int m = usextract_readWordPrm(a3, v388, v385, (unsigned __int16)v402, (unsigned char *)&v413[7] + 1),
        (WordPrm & 0x80000000) != 0))
  {
LABEL_701:
    uint64_t v27 = WordPrm;
    goto LABEL_705;
  }
  if (*(void *)(a6 + 3504))
  {
    uint64_t v129 = (unsigned __int16)v402;
    uint64_t v130 = (uint64_t)v414;
    LOWORD(v403) = 0;
    LOWORD(v405) = 0;
    __int16 __s = 0;
    uint64_t v131 = *(void **)(v16 + 3336);
    if (*v131)
    {
      uint64_t v132 = v131 + 1;
      int v133 = v414;
      do
        *v133++ = 0;
      while (*v132++);
    }
    uint64_t v373 = v130;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **))(a3 + 184))(v388, v385, v129, 14, &v403) & 0x80000000) != 0|| (unsigned __int16)v403 != 1)
    {
      goto LABEL_203;
    }
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(v386 + 176))(v388, v385, v129, 14, &__s, &v405);
    if ((v27 & 0x80000000) != 0 || !(_WORD)v405)
    {
LABEL_205:
      BOOL v25 = v365;
      a3 = v386;
      if ((v27 & 0x80000000) != 0) {
        goto LABEL_705;
      }
    }
    else
    {
      int v135 = __s;
      BOOL v25 = v365;
      if (__s)
      {
        LOBYTE(v136) = *__s;
        if (!*__s) {
          goto LABEL_183;
        }
        uint64_t v137 = 0;
        do
        {
          if (v135[1] == 95 && (v138 = cstdlib_strchr("SsEeIi", (char)v136), uint64_t v136 = *v135, v138))
          {
            size_t v139 = cstdlib_strlen(v135 + 2);
            cstdlib_memmove(v135, v135 + 2, v139 + 1);
          }
          else if (v136 == 58 && (_BYTE)v137)
          {
            size_t v140 = cstdlib_strlen(v135 + 1);
            cstdlib_memmove(v135 + 3, v135 + 1, v140 + 1);
            uint64_t v136 = 0;
            v135[2] = 95;
            v135 += 2;
            *(v135 - 1) = v137;
          }
          else
          {
            uint64_t v136 = v137;
          }
          uint64_t v137 = v136;
          int v141 = *++v135;
          LOBYTE(v136) = v141;
        }
        while (v141);
        int v135 = __s;
        uint64_t v16 = v381;
        uint64_t v105 = v368;
        if (__s)
        {
LABEL_183:
          while (*v135)
          {
            BOOL v142 = v135 - 1;
            do
              int v143 = *++v142;
            while (cstdlib_strchr(";: \t", v143));
            int v144 = cstdlib_strchr(v142, 58);
            if (!v144)
            {
              log_OutPublic(*(void *)(v13 + 32), v384, 19021, (uint64_t)"%s%s", v145, v146, v147, v148, "missing feature value");
              goto LABEL_205;
            }
            uint64_t v149 = v144;
            uint64_t v150 = v144 - 1;
            do
            {
              unint64_t v151 = (unint64_t)v149;
              uint64_t v152 = v150;
              if (v149 <= v142) {
                break;
              }
              --v149;
              uint64_t v153 = cstdlib_strchr(" \t", *(char *)(v151 - 1));
              uint64_t v150 = v152 - 1;
            }
            while (v153);
            unsigned int Index = usextract_getIndex(*(const char ***)(v381 + 3336), v142, v151);
            if ((Index & 0x80000000) != 0) {
              log_OutText(*(void *)(v13 + 32), v384, 3, 0, (uint64_t)"unknown generic feature", v154, v155, v156, v361);
            }
            do
              int v158 = *++v152;
            while (cstdlib_strchr(": \t", v158));
            uint64_t v159 = cstdlib_strchr(v152, 59);
            if (!v159) {
              uint64_t v159 = &v152[cstdlib_strlen(v152)];
            }
            do
            {
              int v135 = v159;
              if (v159 <= v152) {
                break;
              }
              --v159;
            }
            while (cstdlib_strchr(" \t", *(v135 - 1)));
            if ((Index & 0x80000000) == 0)
            {
              unsigned int v160 = usextract_getIndex(*(const char ***)(*(void *)(v381 + 3344) + 8 * Index), v152, (unint64_t)v135);
              if ((v160 & 0x80000000) != 0) {
                log_OutText(*(void *)(v13 + 32), v384, 3, 0, (uint64_t)"unknown generic feature", v161, v162, v163, v361);
              }
              else {
                *(unsigned char *)(v373 + Index) = *(unsigned char *)(*(void *)(*(void *)(v381 + 3352) + 8 * Index) + v160);
              }
            }
            uint64_t v16 = v381;
            if (!v135) {
              goto LABEL_205;
            }
          }
        }
        goto LABEL_205;
      }
LABEL_203:
      a3 = v386;
    }
  }
  uint64_t v164 = v376;
  if (!*(void *)(a6 + 456))
  {
LABEL_231:
    if (v117 && *v117)
    {
      unsigned int v174 = v395;
      unsigned int v175 = *(_DWORD *)(a6 + 3520);
      if (v175 > HIDWORD(v398))
      {
        int v176 = (_DWORD *)(*(void *)(a6 + 3512) + 32 * HIDWORD(v398));
        while (v176[3] - v380 <= v395)
        {
          if (*v176 == 26)
          {
            if (v391 | v392) {
              break;
            }
            BOOL v178 = (__int16)v164 > 1;
            BOOL v177 = v400 != 14;
            if (v400 != 14 && v398 == 0 && (__int16)v164 >= 2)
            {
              usextract_assureMinimalPause(a6, HIDWORD(v398), v380, v395, &v398);
              uint64_t v164 = v376;
              BOOL v178 = 1;
              int v397 = 1;
              BOOL v177 = 1;
            }
            goto LABEL_242;
          }
          --v175;
          v176 += 8;
          if (HIDWORD(v398) == v175) {
            break;
          }
        }
      }
      BOOL v177 = 0;
      BOOL v178 = (__int16)v164 > 1;
LABEL_242:
      uint64_t v179 = (__int16)v164;
      if (v398) {
        BOOL v180 = !v178;
      }
      else {
        BOOL v180 = 1;
      }
      if (v180)
      {
        if (v364 && (__int16)v164 >= 1 && !*(_DWORD *)(v16 + 2692)) {
          *(_DWORD *)(*(void *)(a6 + 3608)
        }
                    + ((uint64_t)(((unint64_t)((__int16)v164 * *(unsigned __int16 *)(v16 + 3578)) << 32)
                               - 0x100000000) >> 30)) = -1;
      }
      else
      {
        usextract_insertPause((uint64_t)&v409, a6, v398, v397, (__int16)v164, v380, v174, (_DWORD *)&v398 + 1);
        uint64_t v181 = *(void *)(a6 + 456);
        if (v181 && *(unsigned __int8 *)(*(void *)(a6 + 32) + v179) == v25[(__int16)v105])
        {
          *(unsigned char *)(v181 + v179) = v367[(__int16)v105];
          uint64_t v105 = (v105 + 1);
        }
        int v182 = v376;
        if (v391 && *(_WORD *)(v16 + 3578))
        {
          memset_pattern16((void *)(*(void *)(a6 + 3608) + 4 * (int)v179 * (unint64_t)*(unsigned __int16 *)(v16 + 3578)), &unk_2206E1BB0, 4 * *(unsigned __int16 *)(v16 + 3578));
          int v182 = v376;
        }
        uint64_t v164 = (v182 + 1);
      }
      a3 = v386;
      if (v177)
      {
        uint64_t v183 = v164;
        if (cstdlib_strstr((char *)(*(void *)a6 + 152), "bet4")
          || cstdlib_strstr((char *)(*(void *)a6 + 152), "bet5"))
        {
          usextract_insertPause((uint64_t)&v409, a6, 5u, 1, (__int16)v183, v380, v395, (_DWORD *)&v398 + 1);
          uint64_t v184 = *(void *)(a6 + 456);
          if (v184)
          {
            int v185 = v183;
            if (*(unsigned __int8 *)(*(void *)(a6 + 32) + (__int16)v183) == v25[(__int16)v105])
            {
              *(unsigned char *)(v184 + (__int16)v183) = v367[(__int16)v105];
              uint64_t v105 = (v105 + 1);
            }
          }
          else
          {
            int v185 = v183;
          }
          int v364 = 0;
          uint64_t v164 = (v185 + 1);
          int v374 = 1;
        }
        else
        {
          int v364 = 0;
          int v374 = 1;
          uint64_t v164 = v183;
        }
      }
      else
      {
        int v364 = 0;
        int v374 = 0;
      }
    }
    else
    {
      int v374 = 0;
    }
    uint64_t v376 = v164;
    int v371 = (__int16)v164;
    if (v400 != 11)
    {
      if (v400 == 14)
      {
        LODWORD(v391) = 1;
        goto LABEL_296;
      }
      if (v400 != 13) {
        goto LABEL_296;
      }
    }
    HIDWORD(v391) = 1;
    uint64_t v186 = (unsigned __int16)v402;
    uint64_t v187 = *(void *)a6;
    LOWORD(v403) = 0;
    LOWORD(v405) = 0;
    LODWORD(__s) = 0;
    uint64_t v188 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a3 + 176))(v388, v385, (unsigned __int16)v402, 16, &__s1[3], &v405);
    if ((v188 & 0x80000000) != 0
      || (uint64_t v188 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char **))(a3 + 176))(v388, v385, v186, 15, &v390, &v403), (v188 & 0x80000000) != 0)|| (valid = usextract_nrOfValidPhonemes(v187, (unsigned __int8 *)v390), uint64_t v188 = usextract_readSilDur(a3, v388, v385, v186, &__s, 0), (v188 & 0x80000000) != 0))
    {
      uint64_t v27 = v188;
      BOOL v25 = v365;
      goto LABEL_705;
    }
    int v192 = *(unsigned __int16 *)(v187 + 3578);
    BOOL v25 = v365;
    if (__s)
    {
      int v193 = valid;
      uint64_t v194 = (unsigned __int16)v405;
      if (v192 + v192 * valid == (unsigned __int16)v405)
      {
        LODWORD(v394) = 1;
LABEL_280:
        __s2 = v390;
        skipUnvalidPhonemes(v187, (unsigned __int8 **)&v390);
        if (v400 == 13) {
          usextract_startNewPrompt((uint64_t)&__s2, (uint64_t *)a6, (unsigned __int8 *)v117, v371);
        }
        uint64_t v16 = v381;
        a3 = v386;
        if (__s1[0] && __s2)
        {
          size_t v195 = cstdlib_strlen(__s1[0]);
          if (cstdlib_strlen(__s2) + v195 > 0x1EF)
          {
            if (cstdlib_strlen(__s1[0]) <= 0x1EF) {
              cstdlib_strcat(__s1[0], "...");
            }
            log_OutText(*(void *)(v13 + 32), v384, 3, 0, (uint64_t)"prompt too long for logging", v196, v197, v198, v361);
          }
          else
          {
            cstdlib_strcat(__s1[0], __s2);
          }
        }
        if (v117 && *((void *)&v392 + 1))
        {
          size_t v199 = cstdlib_strlen(*((const char **)&v392 + 1));
          if (cstdlib_strlen(v117) + v199 > 0x1EF)
          {
            if (cstdlib_strlen(*((const char **)&v392 + 1)) <= 0x1EF) {
              cstdlib_strcat(*((char **)&v392 + 1), "...");
            }
            log_OutText(*(void *)(v13 + 32), v384, 3, 0, (uint64_t)"phon too long for prompt logging", v200, v201, v202, v361);
          }
          else
          {
            cstdlib_strcat(*((char **)&v392 + 1), v117);
          }
        }
LABEL_296:
        WordPrunsigned int m = usextract_readSilDur(a3, v388, v385, (unsigned __int16)v402, &v398, &v397);
        if ((WordPrm & 0x80000000) != 0) {
          goto LABEL_701;
        }
        unint64_t v203 = HIDWORD(v398);
        int v204 = v380;
        if (HIDWORD(v398) < *(_DWORD *)(a6 + 3520))
        {
          uint64_t v205 = v105;
          uint64_t v206 = (32 * HIDWORD(v398)) | 0xC;
          do
          {
            if (*(_DWORD *)(*(void *)(a6 + 3512) + v206) - v204 > v395) {
              break;
            }
            if (v374)
            {
              if (cstdlib_strstr((char *)(*(void *)a6 + 152), "bet4"))
              {
                uint64_t v207 = (unsigned __int16)v376 - 1;
                BOOL v208 = v371 <= 0;
              }
              else
              {
                BOOL v208 = !cstdlib_strstr((char *)(*(void *)a6 + 152), "bet5") || v371 <= 0;
                uint64_t v207 = (unsigned __int16)v376 - 1;
              }
              int v204 = v380;
              if (!v208) {
                continue;
              }
            }
            uint64_t v207 = (__int16)v376;
            ++*(_WORD *)(*(void *)(a6 + 1800) + 2 * v207);
            ++v203;
            v206 += 32;
          }
          while (v203 < *(unsigned int *)(a6 + 3520));
          BOOL v25 = v365;
          uint64_t v16 = v381;
          a3 = v386;
          uint64_t v105 = v205;
        }
        HIDWORD(v398) = v203;
        if (v117 && *v117)
        {
          usextract_handleWordStart((uint64_t)&v409, (void *)a6, v117, v371);
          if (*(void *)(a6 + 280))
          {
            int v209 = 0;
            do
            {
              unsigned int v210 = v117[v209];
              if (v210 <= 0x2D && ((1 << v210) & 0x200800000001) != 0) {
                break;
              }
              char v212 = v210 - 49;
              if ((v210 - 49) < 4u) {
                goto LABEL_324;
              }
              ++v209;
            }
            while (v210 != 53);
            char v212 = 0;
LABEL_324:
            BYTE2(v411) = v212;
          }
          usextract_handleBoundaryShape((uint64_t)&v409, (void *)v16);
          LOWORD(v396) = 0;
          if (v383)
          {
            signed int v216 = 0;
            LOWORD(v217) = 0;
            int v218 = v387;
            uint64_t v219 = v376;
            while (1)
            {
              if (!v218) {
                goto LABEL_364;
              }
              if (v417 == -1)
              {
                int v223 = 0;
              }
              else
              {
                __int16 v220 = v418;
                if ((__int16)v418 == -1 || v216 <= (__int16)v418)
                {
                  if (v216 > v419)
                  {
                    LOWORD(v223) = v419;
                    int v222 = 1;
                    goto LABEL_354;
                  }
                  goto LABEL_364;
                }
                int v223 = v418;
              }
              __int16 v417 = v223;
              __int16 v220 = v223;
              do
              {
                unsigned __int16 v418 = ++v220;
                int v224 = v117[v220];
                if (v117[v220]) {
                  BOOL v225 = v218 == v224;
                }
                else {
                  BOOL v225 = 1;
                }
              }
              while (!v225);
              int v222 = 0;
              if (v223) {
                char v226 = 2;
              }
              else {
                char v226 = 1;
              }
              if (v223) {
                char v227 = 3;
              }
              else {
                char v227 = 0;
              }
              if (v218 == v224) {
                char v228 = v226;
              }
              else {
                char v228 = v227;
              }
              BYTE9(v413[9]) = v228;
              __int16 v419 = v223;
              if (v117[(__int16)v223 + 1] == 45) {
                LOWORD(v223) = v223 + 1;
              }
              while (1)
              {
LABEL_354:
                LOWORD(v223) = v223 + 1;
                __int16 v419 = v223;
                if (!v117[(__int16)v223])
                {
LABEL_357:
                  if (v222) {
                    char v229 = 3;
                  }
                  else {
                    char v229 = 0;
                  }
                  goto LABEL_363;
                }
                if (v117[(__int16)v223] == 45) {
                  break;
                }
                if ((__int16)v223 >= v220) {
                  goto LABEL_357;
                }
              }
              if (v222) {
                char v229 = 2;
              }
              else {
                char v229 = 1;
              }
LABEL_363:
              BYTE10(v413[9]) = v229;
LABEL_364:
              char v230 = &v117[(unsigned __int16)v217];
              uint64_t v231 = *v230;
              uint64_t v232 = *(void *)a6;
              if (*(unsigned __int8 *)(v381 + v231 + 2144) == 255)
              {
                LOWORD(__s) = 0;
                switch((char)v231)
                {
                  case '""':
                    if (WORD4(v415) != (unsigned __int16)v219)
                    {
                      uint64_t v271 = v219;
                      log_OutPublic(*(void *)(v13 + 32), v384, 19013, (uint64_t)"%s%s", v219, v213, v214, v215, "word");
                      uint64_t v219 = v271;
                      int v218 = v387;
                    }
                    int v272 = v424++;
                    BYTE10(v409) = 3;
                    LOWORD(v416) = v219;
                    BYTE3(v411) = 2;
                    a3 = v386;
                    if (BYTE4(v410) <= 1u) {
                      BYTE4(v410) = 2;
                    }
                    if (BYTE4(v413[7]) <= 2u)
                    {
                      if (BYTE1(v413[7]) <= 1u) {
                        char v273 = 3;
                      }
                      else {
                        char v273 = 4;
                      }
                      BYTE4(v413[7]) = v273;
                    }
                    if (v423 == -1) {
                      __int16 v423 = v219;
                    }
                    if (v425) {
                      char v274 = 4;
                    }
                    else {
                      char v274 = 3;
                    }
                    if (v272) {
                      char v275 = 2;
                    }
                    else {
                      char v275 = v274;
                    }
                    BYTE3(v410) = v275;
                    goto LABEL_445;
                  case '#':
                  case '$':
                  case '%':
                  case '&':
                  case '(':
                  case ')':
                  case '*':
                  case '+':
                  case ',':
                  case '.':
                  case '/':
                  case '0':
                    goto LABEL_400;
                  case '\'':
                    if (WORD4(v415) != (unsigned __int16)v219)
                    {
                      uint64_t v276 = v219;
                      log_OutPublic(*(void *)(v13 + 32), v384, 19014, (uint64_t)"%s%s", v219, v213, v214, v215, "word");
                      uint64_t v219 = v276;
                      int v218 = v387;
                    }
                    BYTE10(v409) = 2;
                    LOWORD(v416) = v219;
                    BYTE3(v411) = 2;
                    a3 = v386;
                    if (v423 == -1) {
                      __int16 v423 = v219;
                    }
                    BYTE3(v410) = 1;
LABEL_445:
                    if (BYTE2(v413[0]) == 3)
                    {
                      unsigned __int8 v277 = 0;
                    }
                    else if (BYTE2(v413[0]) == 2)
                    {
                      if (HIDWORD(v420))
                      {
                        if (v420) {
                          unsigned __int8 v277 = 5;
                        }
                        else {
                          unsigned __int8 v277 = 4;
                        }
                      }
                      else
                      {
                        unsigned __int8 v277 = 3;
                      }
                    }
                    else
                    {
                      unsigned __int8 v277 = 6;
                    }
                    BYTE4(v413[0]) = v277;
                    switch(BYTE1(v413[7]))
                    {
                      case 4u:
                        unsigned __int8 v295 = 0;
                        goto LABEL_505;
                      case 3u:
                        if (!HIDWORD(v421))
                        {
                          unsigned __int8 v295 = 3;
                          goto LABEL_505;
                        }
                        BOOL v294 = v421 == 0;
                        unsigned __int8 v295 = 4;
                        break;
                      case 2u:
                        if (!HIDWORD(v421))
                        {
                          unsigned __int8 v295 = 8;
                          goto LABEL_505;
                        }
                        BOOL v294 = v421 == 0;
                        unsigned __int8 v295 = 9;
                        break;
                      default:
                        unsigned __int8 v295 = 11;
                        goto LABEL_505;
                    }
                    if (!v294) {
                      ++v295;
                    }
LABEL_505:
                    BYTE2(v413[7]) = v295;
                    if (v277 <= 5u)
                    {
                      uint64_t v420 = 0x100000001;
                      WORD6(v4__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = v219;
                    }
                    if (v295 <= 0xAu)
                    {
                      *(void *)((char *)v17 + 36) = 0x100000001;
                      HIWORD(v4__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = v219;
                    }
                    goto LABEL_418;
                  case '-':
                    if (WORD4(v415) == (unsigned __int16)v219)
                    {
                      uint64_t v278 = v219;
                      log_OutPublic(*(void *)(v13 + 32), v384, 19019, (uint64_t)"%s%s", v219, v213, v214, v215, "word");
                      uint64_t v219 = v278;
                      int v218 = v387;
                      goto LABEL_417;
                    }
                    uint64_t v369 = v105;
                    WORD4(v4__sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = v219;
                    uint64_t v287 = (__int16)v219 - 1;
                    *(unsigned char *)(*(void *)(a6 + 112) + v287) = 1;
                    BYTE10(v409) = 0;
                    BYTE6(v410) = 1;
                    a3 = v386;
                    if (BYTE6(v411) != 255) {
                      ++BYTE6(v411);
                    }
                    uint64_t v288 = v219;
                    if (HIBYTE(v409) != 255) {
                      ++HIBYTE(v409);
                    }
                    if (cstdlib_strchr(&v117[(unsigned __int16)v217 + 1], 45)) {
                      char v290 = 2;
                    }
                    else {
                      char v290 = 3;
                    }
                    BYTE11(v409) = v290;
                    BYTE7(v410) = 0;
                    BYTE14(v409) = 2;
                    BYTE3(v410) = 0;
                    BYTE3(v413[0]) = 12;
                    BYTE3(v413[7]) = 12;
                    BYTE6(v413[0]) = 1;
                    BYTE8(v413[0]) = 1;
                    BYTE14(v413[0]) = 1;
                    uint64_t v291 = *(void *)(a6 + 576);
                    if (v291) {
                      *(unsigned char *)(v291 + v287) = 1;
                    }
                    uint64_t v217 = (unsigned __int16)v396;
                    if ((_WORD)v396)
                    {
                      uint64_t v292 = *(void *)(a6 + 184);
                      if (*(unsigned char *)(v292 + v287) == 2) {
                        *(unsigned char *)(v292 + v287) = 3;
                      }
                    }
                    BYTE4(v413[0]) = 8;
                    BYTE2(v413[7]) = 13;
                    if (BYTE3(v411) == 2) {
                      BYTE3(v411) = 1;
                    }
                    if (BYTE4(v410) == 2)
                    {
                      char v293 = 3;
                    }
                    else
                    {
                      if (BYTE4(v410) != 3) {
                        goto LABEL_511;
                      }
                      char v293 = 4;
                    }
                    BYTE4(v410) = v293;
LABEL_511:
                    if ((BYTE4(v413[7]) - 3) <= 3u) {
                      BYTE4(v413[7]) += 2;
                    }
                    uint64_t v297 = v217 + 1;
                    if (!*(void *)(a6 + 280)) {
                      goto LABEL_524;
                    }
                    unsigned int v298 = 0;
                    do
                    {
                      unsigned int v299 = v117[v297 + v298];
                      if (v299 <= 0x2D && ((1 << v299) & 0x200800000001) != 0) {
                        break;
                      }
                      char v301 = v299 - 49;
                      if ((v299 - 49) < 4u) {
                        goto LABEL_523;
                      }
                      ++v298;
                    }
                    while (v299 != 53);
                    char v301 = 0;
LABEL_523:
                    BYTE2(v411) = v301;
LABEL_524:
                    if (v117[v297] == 42)
                    {
                      log_OutPublic(*(void *)(v13 + 32), v384, 19016, (uint64_t)"%s%s", v289, v213, v214, v215, "word");
                      LOWORD(v217) = v217 + 1;
                      LOWORD(v396) = v217;
                    }
                    int v218 = v387;
                    uint64_t v219 = v288;
                    uint64_t v105 = v369;
                    goto LABEL_418;
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                    if (!*(void *)(a6 + 280)) {
                      goto LABEL_400;
                    }
                    int v255 = 0;
                    a3 = v386;
                    break;
                  default:
                    if ((char)v231 == 96)
                    {
                      if (WORD4(v415) != (unsigned __int16)v219)
                      {
                        uint64_t v279 = v219;
                        log_OutPublic(*(void *)(v13 + 32), v384, 19015, (uint64_t)"%s%s", v219, v213, v214, v215, "word");
                        uint64_t v219 = v279;
                        int v218 = v387;
                      }
                      BYTE10(v409) = 1;
                      BYTE3(v410) = 7;
                      BYTE4(v413[0]) = 7;
                      BYTE2(v413[7]) = 12;
                    }
                    else
                    {
                      if ((char)v231 != 92)
                      {
LABEL_400:
                        uint64_t v263 = v105;
                        uint64_t v264 = v219;
                        if (!cstdlib_strchr((char *)(v232 + 2400), (char)v231)) {
                          log_OutPublic(*(void *)(v13 + 32), v384, 19012, (uint64_t)"%s%d%s%s", v265, v213, v214, v215, "phoneme");
                        }
                        a3 = v386;
                        int v218 = v387;
                        uint64_t v219 = v264;
                        uint64_t v105 = v263;
                        goto LABEL_418;
                      }
                      uint64_t v259 = v105;
                      uint64_t v260 = v219;
                      char v261 = usextract_GetSentType(v13, v384, v232, &v117[(unsigned __int16)v217], v409, 1, &__s);
                      uint64_t v219 = v260;
                      uint64_t v105 = v259;
                      int v218 = v387;
                      BYTE14(v410) = v261;
                      __int16 v262 = (_WORD)__s - 1;
                      if ((unsigned __int16)__s <= 1u) {
                        __int16 v262 = 1;
                      }
                      LOWORD(v217) = v262 + v396;
                    }
                    goto LABEL_417;
                }
                do
                {
                  unsigned int v256 = v117[(unsigned __int16)v217 + 1 + v255];
                  if (v256 <= 0x2D && ((1 << v256) & 0x200800000001) != 0) {
                    break;
                  }
                  char v258 = v256 - 49;
                  if ((v256 - 49) < 4u) {
                    goto LABEL_392;
                  }
                  ++v255;
                }
                while (v256 != 53);
                char v258 = 0;
LABEL_392:
                BYTE2(v411) = v258;
                goto LABEL_418;
              }
              if (BYTE7(v410) != 255)
              {
                ++BYTE7(v410);
                LOBYTE(v231) = *v230;
              }
              uint64_t v233 = (__int16)v219;
              *(unsigned char *)(*(void *)(a6 + 32) + (__int16)v219) = v231;
              unsigned int v234 = WORD6(v413[9]);
              if (WORD6(v413[9]) != 218)
              {
                unsigned int v235 = 1;
                do
                {
                  *(unsigned char *)(*(void *)(a6 + 8 * v234 + 16) + (__int16)v219) = *((unsigned char *)&v409 + v234 + 1);
                  unsigned int v234 = *((unsigned __int16 *)&v413[9] + v235++ + 6);
                }
                while (v234 != 218);
              }
              uint64_t v236 = *(void **)(*(void *)a6 + 3336);
              if (v236 && *v236)
              {
                uint64_t v237 = 0;
                uint64_t v238 = v236 + 1;
                do
                  *(unsigned char *)(*(void *)(*(void *)(a6 + 3504) + 8 * v237) + (__int16)v219) = v414[v237];
                while (v238[v237++]);
              }
              if (*(void *)(a6 + 264))
              {
                uint64_t v240 = v216 + 1;
                if (v240 < v383)
                {
                  int v241 = v117[v240];
                  char v377 = v232 + 96;
                  uint64_t v242 = v13;
                  int v243 = v17;
                  uint64_t v244 = v25;
                  uint64_t v245 = v105;
                  int v246 = v219;
                  int v247 = v117;
                  uint64_t v248 = v232;
                  uint64_t v249 = cstdlib_strchr((char *)(v232 + 2400), v241);
                  uint64_t v232 = v248;
                  uint64_t v117 = v247;
                  LODWORD(v219) = v246;
                  uint64_t v105 = v245;
                  BOOL v25 = v244;
                  uint64_t v17 = v243;
                  uint64_t v13 = v242;
                  int v218 = v387;
                  if (v249) {
                    *(unsigned char *)(*(void *)(a6 + 264) + v233) = (_BYTE)v249 - v377 + 1;
                  }
                }
                uint64_t v250 = *(void *)(a6 + 272);
                if (v250)
                {
                  uint64_t v251 = v233 - 1;
                  if (*(unsigned char *)(*(void *)(a6 + 32) + v233 - 1) == 35)
                  {
                    int v252 = v219;
                    char v253 = cstdlib_strlen((const char *)(v232 + 2400));
                    LODWORD(v219) = v252;
                    int v218 = v387;
                    char v254 = v253 + 1;
                    uint64_t v250 = *(void *)(a6 + 272);
                  }
                  else if (*(unsigned char *)(*(void *)(a6 + 112) + v251))
                  {
                    char v254 = *(unsigned char *)(*(void *)(a6 + 264) + v251);
                  }
                  else
                  {
                    char v254 = *(unsigned char *)(v250 + v251);
                  }
                  *(unsigned char *)(v250 + v233) = v254;
                }
              }
              if (BYTE6(v410) <= 1u) {
                BYTE6(v410) = 2;
              }
              BYTE6(v413[0]) = 0;
              uint64_t v266 = *(void *)(a6 + 456);
              if (v266 && *(unsigned __int8 *)(*(void *)(a6 + 32) + v233) == v25[(__int16)v105])
              {
                *(unsigned char *)(v266 + v233) = v367[(__int16)v105];
                uint64_t v105 = (v105 + 1);
              }
              uint64_t v267 = *(void *)a6;
              if (v391)
              {
                uint64_t v268 = *(unsigned __int16 *)(v267 + 3578);
                if (*(_WORD *)(v267 + 3578))
                {
                  uint64_t v269 = (void *)(*(void *)(a6 + 3608)
                                + 4 * (int)v233 * (unint64_t)*(unsigned __int16 *)(v267 + 3578));
                  int v270 = v219;
                  memset_pattern16(v269, &unk_2206E1BB0, 4 * v268);
                  LODWORD(v219) = v270;
                  int v218 = v387;
                }
                goto LABEL_416;
              }
              if (!HIDWORD(v391)) {
                goto LABEL_416;
              }
              if (LOBYTE(__s1[1]))
              {
                --LOBYTE(__s1[1]);
                goto LABEL_416;
              }
              if (HIDWORD(__s1[1]))
              {
                DWORD1(v394) = 0;
LABEL_467:
                if ((__int16)v219 >= 1 && *(unsigned char *)(*(void *)(a6 + 32) + v233) != 35 && !*(_DWORD *)(v267 + 2692)) {
                  *(_DWORD *)(*(void *)(a6 + 3608)
                }
                            + ((uint64_t)(((unint64_t)(v233 * *(unsigned __int16 *)(v267 + 3578)) << 32)
                                       - 0x100000000) >> 30)) = -1;
                goto LABEL_416;
              }
              uint64_t v280 = *(void *)(a6 + 32);
              int v281 = *(unsigned __int8 *)(v280 + v233);
              uint64_t v282 = v390;
              int v283 = *v390;
              if (v281 != 35 && v283 == 35)
              {
                int v378 = v219;
                do
                {
                  int v390 = v282 + 1;
                  skipUnvalidPhonemes(v267, (unsigned __int8 **)&v390);
                  uint64_t v282 = v390;
                  __s1[3] += 4 * *(unsigned __int16 *)(v267 + 3578);
                  int v283 = *v390;
                }
                while (v283 == 35);
                int v281 = *(unsigned __int8 *)(v280 + v233);
                int v218 = v387;
                LODWORD(v219) = v378;
              }
              if (v281 != v283)
              {
                HIDWORD(__s1[1]) = 1;
                uint64_t v284 = v105;
                int v285 = v219;
                size_t v286 = cstdlib_strlen(v282);
                LODWORD(v219) = v285;
                uint64_t v105 = v284;
                int v218 = v387;
                if (v286 >= 2) {
                  DWORD1(v394) = 0;
                }
              }
              if (HIDWORD(__s1[1])) {
                goto LABEL_467;
              }
              if (LODWORD(__s1[2]))
              {
                LODWORD(__s1[2]) = 0;
                unsigned int v296 = *(unsigned __int16 *)(v267 + 3578);
              }
              else
              {
                unsigned int v296 = *(unsigned __int16 *)(v267 + 3578);
                *(_DWORD *)(*(void *)(a6 + 3608) + 4 * *(unsigned __int16 *)(v267 + 3578) * (uint64_t)(int)v233) = *(_DWORD *)__s1[3];
              }
              if (v296 >= 2)
              {
                signed int v302 = v296;
                uint64_t v303 = v296 - 1;
                unint64_t v304 = (_DWORD *)(*(void *)(a6 + 3608) + 4 * (int)v233 * (uint64_t)v302 + 4);
                char v305 = __s1[3] + 4;
                do
                {
                  int v306 = *(_DWORD *)v305;
                  v305 += 4;
                  *v304++ = v306;
                  --v303;
                }
                while (v303);
              }
              if (*v390)
              {
                ++v390;
                uint64_t v307 = v105;
                int v308 = v219;
                skipUnvalidPhonemes(v267, (unsigned __int8 **)&v390);
                LODWORD(v219) = v308;
                uint64_t v105 = v307;
                int v218 = v387;
                __s1[3] += 4 * *(unsigned __int16 *)(v267 + 3578);
              }
LABEL_416:
              uint64_t v219 = (v219 + 1);
LABEL_417:
              a3 = v386;
LABEL_418:
              LOWORD(v217) = v217 + 1;
              LOWORD(v396) = v217;
              signed int v216 = (unsigned __int16)v217;
              if (v383 <= (unsigned __int16)v217) {
                goto LABEL_535;
              }
            }
          }
          uint64_t v219 = v376;
LABEL_535:
          uint64_t v376 = v219;
          usextract_handleWordEnd((uint64_t)&__s2, (uint64_t)&v409, v13, v384, (void *)a6, (uint64_t)v117, (__int16)v219, v215);
          uint64_t v26 = (uint64_t)v367;
          uint64_t v16 = v381;
        }
        else
        {
          uint64_t v26 = (uint64_t)v367;
        }
        goto LABEL_536;
      }
    }
    else
    {
      uint64_t v194 = (unsigned __int16)v405;
      int v193 = valid;
    }
    LODWORD(v394) = 0;
    if (v192 * v193 != v194)
    {
      log_OutText(*(void *)(v13 + 32), v384, 3, 0, (uint64_t)"Warning (incoherent prompt): %d segment ids for %d valid phones", v189, v190, v191, v194);
      HIDWORD(__s1[1]) = 1;
      DWORD1(v394) = 0;
    }
    goto LABEL_280;
  }
  uint64_t v165 = (unsigned __int16)v402;
  __int16 __s = 0;
  HIWORD(v406) = 0;
  if (v363)
  {
    uint64_t v27 = 2229280775;
    goto LABEL_705;
  }
  LOWORD(v403) = 0;
  LOWORD(v405) = 0;
  int v408 = 0;
  unsigned __int16 v166 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 152))(v388, v385, 4, (unsigned __int16)v402, (char *)&v406 + 2) & 0x80000000) != 0|| !HIWORD(v406))
  {
    goto LABEL_225;
  }
  uint64_t v167 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **))(v386 + 104))(v388, v385, 4, v165, &v403);
  if ((v167 & 0x80000000) != 0) {
    goto LABEL_699;
  }
  uint64_t v167 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v386 + 104))(v388, v385, 5, (unsigned __int16)v403, &v405);
  if ((v167 & 0x80000000) != 0) {
    goto LABEL_699;
  }
  unsigned __int16 v166 = 0;
  if (!v375 || (unsigned __int16 v168 = v405, v169 = v385, !(_WORD)v405))
  {
LABEL_225:
    uint64_t v105 = 0;
    BOOL v25 = v365;
    v365[v166] = 0;
    if (*v365 == 35)
    {
      uint64_t v164 = v376;
      a3 = v386;
      if ((__int16)v376 >= 1)
      {
        uint64_t v173 = (unsigned __int16)v376 - 1;
        if (*(unsigned char *)(*(void *)(a6 + 32) + v173) == 35)
        {
          *(unsigned char *)(*(void *)(a6 + 456) + v173) = *v367;
          uint64_t v105 = 1;
        }
        else
        {
          uint64_t v105 = 0;
        }
      }
    }
    else
    {
      a3 = v386;
      uint64_t v164 = v376;
    }
    goto LABEL_231;
  }
  unsigned __int16 v166 = 0;
  while (1)
  {
    uint64_t v167 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(v386 + 176))(v388, v169, v168, 0, &__s, &v408);
    if ((v167 & 0x80000000) != 0) {
      break;
    }
    if (__s)
    {
      uint64_t v170 = *__s;
      BOOL v25 = v365;
      if (v170 == 35 || *(unsigned __int8 *)(v16 + v170 + 2144) != 255)
      {
        uint64_t v171 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(v386 + 168))(v388, v385, (unsigned __int16)v405, 1, 1, (char *)&v408 + 2, &v408);
        if ((v171 & 0x80000000) != 0)
        {
          uint64_t v27 = v171;
          goto LABEL_700;
        }
        v365[v166] = *__s;
        v367[v166++] = BYTE2(v408);
      }
    }
    uint64_t v169 = v385;
    (*(void (**)(uint64_t, uint64_t, void, int *))(v386 + 112))(v388, v385, (unsigned __int16)v405, &v405);
    unsigned __int16 v168 = v405;
    if ((_WORD)v405) {
      BOOL v172 = v375 > v166;
    }
    else {
      BOOL v172 = 0;
    }
    if (!v172) {
      goto LABEL_225;
    }
  }
LABEL_699:
  uint64_t v27 = v167;
  BOOL v25 = v365;
LABEL_700:
  unsigned char *v25 = 0;
LABEL_705:
  uint64_t v26 = (uint64_t)v367;
LABEL_686:
  if (log_HasTraceTuningDataSubscriber(*(void *)(v13 + 32))) {
    log_OutTraceTuningData(*(uint64_t ***)(v13 + 32), 301, (uint64_t)"%s%s %s%.*s", v355, v356, v357, v358, v359, "END");
  }
  if (*((void *)&v392 + 1)) {
    heap_Free(*(void **)(v13 + 8), *((uint64_t *)&v392 + 1));
  }
  if (__s1[0]) {
    heap_Free(*(void **)(v13 + 8), (uint64_t)__s1[0]);
  }
  if (v25) {
    heap_Free(*(void **)(v13 + 8), (uint64_t)v25);
  }
  if (v26) {
    heap_Free(*(void **)(v13 + 8), v26);
  }
  if (v414) {
    heap_Free(*(void **)(v13 + 8), (uint64_t)v414);
  }
  return v27;
}

uint64_t usextract_GetSentType(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, unsigned __int8 a5, int a6, _WORD *a7)
{
  *a7 = 0;
  if (*a4 != 92) {
    return a5;
  }
  __int16 v10 = (__int16)a4;
  uint64_t v14 = a4 + 1;
  unsigned int v15 = cstdlib_strchr(a4 + 1, 92);
  if (!v15) {
    return a5;
  }
  *a7 = (_WORD)v15 - v10 + 1;
  if ((unsigned __int16)((_WORD)v15 - v10 + 1) < 3u || *v14 == 47) {
    return a5;
  }
  unsigned __int16 v20 = (_WORD)v15 - v10 - 1;
  if ((*(_DWORD *)(a3 + 3092) & 0x80000000) == 0)
  {
    uint64_t v21 = **(const char ***)(a3 + 2464);
    if (v21)
    {
      uint64_t v22 = 0;
      unsigned __int8 v23 = 0;
      size_t v24 = v20;
      while (1)
      {
        int v25 = cstdlib_strncmp(v21, v14, v24);
        uint64_t v26 = *(void *)(a3 + 2464);
        if (!v25 && !*(unsigned char *)(*(void *)(v26 + 8 * v22) + v24)) {
          return v23;
        }
        uint64_t v22 = ++v23;
        uint64_t v21 = *(const char **)(v26 + 8 * v23);
        if (!v21) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      if (a6) {
        log_OutText(*(void *)(a1 + 32), a2, 3, 0, (uint64_t)"Internal tag doesn't match the voice's tag alphabet, tag = %s", v17, v18, v19, (uint64_t)v14);
      }
    }
    return a5;
  }
  if ((unsigned __int16)((_WORD)v15 - v10 - 1) != 2)
  {
LABEL_18:
    if (a6) {
      log_OutPublic(*(void *)(a1 + 32), a2, 19018, (uint64_t)"%s%.*s", v16, v17, v18, v19, "tag");
    }
    return 2;
  }
  if (!cstdlib_strncmp(v14, "TM", 2uLL)) {
    return 0;
  }
  if (!cstdlib_strncmp(v14, "TQ", 2uLL)) {
    return 1;
  }
  a5 = 2;
  if (cstdlib_strncmp(v14, "TS", 2uLL))
  {
    if (!cstdlib_strncmp(v14, "TW", 2uLL)) {
      return 3;
    }
    goto LABEL_18;
  }
  return a5;
}

uint64_t usextract_finishPrompt(uint64_t result, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = result;
  if (*(void *)(result + 32) && *(void *)(result + 40))
  {
    uint64_t result = log_HasTraceTuningDataSubscriber(*(void *)(a2 + 32));
    if (result)
    {
      log_OutTraceTuningData(*(uint64_t ***)(a2 + 32), 302, (uint64_t)"%s%s %s%s %s%s", v13, v14, a6, a7, a8, "BEG");
      uint64_t result = log_OutTraceTuningData(*(uint64_t ***)(a2 + 32), 302, (uint64_t)"%s%s %s%s", v15, v16, v17, v18, v19, "END");
    }
    if (!*(_DWORD *)(v12 + 76))
    {
      log_OutText(*(void *)(a2 + 32), a3, 3, 0, (uint64_t)"    Warning: no match, conflicting phonetics", a6, a7, a8, v32);
      log_OutText(*(void *)(a2 + 32), a3, 3, 0, (uint64_t)"    Carrier:  %s", v20, v21, v22, *(void *)(v12 + 40));
      uint64_t result = log_OutText(*(void *)(a2 + 32), a3, 3, 0, (uint64_t)"    Phonemes: %s", v23, v24, v25, *(void *)(v12 + 32));
    }
  }
  if (!*(_DWORD *)(v12 + 76))
  {
    uint64_t v26 = *(__int16 *)(v12 + 80);
    if (v26 == -1)
    {
      uint64_t result = log_OutText(*(void *)(a2 + 32), a3, 3, 0, (uint64_t)"    Warning: uninitialized prompt", a6, a7, a8, v32);
    }
    else if ((int)v26 < a5)
    {
      uint64_t v27 = *(unsigned __int16 *)(*a4 + 3578);
      unint64_t v28 = (unint64_t)(v26 * v27) << 32;
      do
      {
        if (v27)
        {
          uint64_t v29 = a4[451];
          uint64_t v30 = v28;
          uint64_t v31 = v27;
          do
          {
            uint64_t result = v30 >> 30;
            *(_DWORD *)(v29 + (v30 >> 30)) = -1;
            v30 += 0x100000000;
            --v31;
          }
          while (v31);
        }
        ++v26;
        v28 += v27 << 32;
      }
      while (v26 != a5);
    }
  }
  *(_DWORD *)(v12 + 76) = 1;
  *(_DWORD *)(v12 + 52) = 0;
  *(_DWORD *)(v12 + 20) = 0;
  return result;
}

uint64_t usextract_readWordPrm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  int v13 = 0;
  uint64_t v12 = 0;
  *a5 = 0;
  uint64_t v10 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 13, (char *)&v13 + 2) & 0x80000000) == 0&& HIWORD(v13) == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 **, int *))(a1 + 176))(a2, a3, a4, 13, &v12, &v13);
    if ((v10 & 0x80000000) == 0) {
      *a5 = cstdlib_atoi(v12);
    }
  }
  return v10;
}

uint64_t usextract_startNewPrompt(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8 = *a2;
  *(_WORD *)(a1 + 80) = a4;
  cstdlib_strcpy(*(char **)(a1 + 40), "");
  cstdlib_strcpy(*(char **)(a1 + 32), "");
  uint64_t v10 = (void *)(a1 + 8);
  uint64_t v9 = *(unsigned __int8 **)(a1 + 8);
  *(_WORD *)(a1 + 48) = 0;
  uint64_t result = usextract_matchPhon(*a2, a3, 0, v9, 0);
  if (result
    || (*(_WORD *)(a1 + 48) = 1,
        uint64_t result = usextract_matchPhon(*a2, a3, 1, *(unsigned __int8 **)(a1 + 8), 0),
        result)
    || (*(_WORD *)(a1 + 48) = 256,
        uint64_t result = usextract_matchPhon(*a2, a3, 0, *(unsigned __int8 **)(a1 + 8), 1),
        result)
    || (*(_WORD *)(a1 + 48) = 257,
        uint64_t result = usextract_matchPhon(*a2, a3, 1, *(unsigned __int8 **)(a1 + 8), 1),
        result))
  {
    int v12 = *(unsigned __int8 *)(a1 + 49);
    if (*(unsigned char *)(a1 + 49))
    {
      do
      {
        if (*(unsigned char *)*v10)
        {
          *(void *)(a1 + 8) = *v10 + 1;
          uint64_t result = skipUnvalidPhonemes(v8, (unsigned __int8 **)(a1 + 8));
          *(void *)(a1 + 64) += 4 * *(unsigned __int16 *)(v8 + 3578);
          int v12 = *(unsigned __int8 *)(a1 + 49);
        }
        *(unsigned char *)(a1 + 49) = --v12;
      }
      while ((_BYTE)v12);
    }
  }
  else
  {
    *(_WORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 52) = 1;
    *(_DWORD *)(a1 + 76) = 0;
  }
  if (a4 >= 1 && *(unsigned char *)(a2[4] + (unsigned __int16)a4 - 1) != 35 && !*(_DWORD *)(v8 + 2692)) {
    *(_DWORD *)(a1 + 56) = 1;
  }
  return result;
}

char *usextract_handleWordStart(uint64_t a1, void *a2, char *__s, int a4)
{
  uint64_t v8 = (a4 - 1);
  if (a4 >= 1)
  {
    uint64_t v9 = a2[72];
    if (v9)
    {
      if (*(unsigned __int8 *)(v9 + v8) <= 1u) {
        *(unsigned char *)(v9 + v8) = 2;
      }
    }
  }
  int v10 = *(__int16 *)(a1 + 672);
  LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
  if (v10 < a4 && (v10 & 0x80000000) == 0 && a2[74])
  {
    uint64_t v12 = *(unsigned __int16 *)(a1 + 672);
    do
    {
      uint64_t v13 = a2[74];
      if (*(unsigned __int8 *)(v13 + v12) <= 1u) {
        *(unsigned char *)(v13 + v12) = 2;
      }
      ++v12;
    }
    while (a4 != v12);
    LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
  }
  BOOL v16 = (v11 & 0x8000u) == 0 && a2[68] != 0 && (__int16)v11 < a4;
  if (v11 == *(unsigned __int16 *)(a1 + 674))
  {
    if (v16)
    {
      uint64_t v11 = v11;
      do
      {
        uint64_t v17 = a2[68];
        if (*(unsigned __int8 *)(v17 + v11) >= 0xAu) {
          *(unsigned char *)(v17 + v11) = 9;
        }
        ++v11;
      }
      while (a4 != v11);
      LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
    }
    if ((__int16)v11 < a4 && ((__int16)v11 & 0x80000000) == 0 && a2[180])
    {
      uint64_t v11 = v11;
      do
      {
        uint64_t v18 = a2[180];
        if (*(unsigned __int8 *)(v18 + v11) >= 0xAu) {
          *(unsigned char *)(v18 + v11) = 9;
        }
        ++v11;
      }
      while (a4 != v11);
    }
  }
  else
  {
    if (v16)
    {
      uint64_t v11 = v11;
      do
      {
        uint64_t v19 = a2[68];
        if (*(unsigned __int8 *)(v19 + v11) >= 0xBu) {
          *(unsigned char *)(v19 + v11) = 10;
        }
        ++v11;
      }
      while (a4 != v11);
      LODWORD(v11) = *(unsigned __int16 *)(a1 + 672);
    }
    if ((__int16)v11 < a4 && ((__int16)v11 & 0x80000000) == 0 && a2[180])
    {
      uint64_t v11 = v11;
      do
      {
        uint64_t v20 = a2[180];
        if (*(unsigned __int8 *)(v20 + v11) >= 0xBu) {
          *(unsigned char *)(v20 + v11) = 10;
        }
        ++v11;
      }
      while (a4 != v11);
    }
  }
  *(_WORD *)(a1 + 672) = a4;
  *(_WORD *)(a1 + 674) = a4;
  *(_DWORD *)(a1 + 684) = -1;
  *(_WORD *)(a1 + 688) = -1;
  *(unsigned char *)(a1 + 10) = 0;
  *(unsigned char *)(a1 + 22) = 0;
  *(unsigned char *)(a1 + 35) = 1;
  *(unsigned char *)(a1 + 38) = 1;
  if (cstdlib_strchr(__s, 45)) {
    char v21 = 1;
  }
  else {
    char v21 = 3;
  }
  *(unsigned char *)(a1 + 11) = v21;
  *(unsigned char *)(a1 + 23) = 0;
  *(unsigned char *)(a1 + 19) = 0;
  *(unsigned char *)(a1 + 20) = cstdlib_strchr(__s, 34) != 0;
  uint64_t result = cstdlib_strchr(__s, 34);
  if (result)
  {
    if (*(unsigned __int8 *)(a1 + 177) <= 1u) {
      char v23 = 1;
    }
    else {
      char v23 = 2;
    }
  }
  else
  {
    char v23 = 0;
  }
  *(unsigned char *)(a1 + 180) = v23;
  if (*(unsigned __int8 *)(a1 + 70) <= 1u) {
    *(unsigned char *)(a1 + 70) = 2;
  }
  if (*(unsigned __int8 *)(a1 + 72) <= 1u) {
    *(unsigned char *)(a1 + 72) = 2;
  }
  if (*(unsigned __int8 *)(a1 + 78) <= 1u) {
    *(unsigned char *)(a1 + 78) = 2;
  }
  if (*(unsigned __int8 *)(a1 + 74) <= 1u) {
    *(unsigned char *)(a1 + 74) = 2;
  }
  if (*(unsigned __int8 *)(a1 + 67) >= 0xCu) {
    *(unsigned char *)(a1 + 67) = 11;
  }
  if (*(unsigned __int8 *)(a1 + 179) >= 0xCu) {
    *(unsigned char *)(a1 + 179) = 11;
  }
  if (a4 >= 2) {
    *(unsigned char *)(a2[14] + v8) = 2;
  }
  *(_WORD *)(a1 + 217) = 0;
  return result;
}

uint64_t usextract_handleBoundaryShape(uint64_t a1, void *a2)
{
  uint64_t result = a2[417];
  if (result
    && (uint64_t result = usextract_getIndex((const char **)result, "BNDSHAPE", (unint64_t)""), (result & 0x80000000) == 0)
    && (uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1 + 656) + result),
        uint64_t v6 = *(const char **)(*(void *)(a2[418] + 8 * result) + 8 * v5),
        *(unsigned char *)(a1 + 197) = v5,
        (unint64_t v7 = *(const char **)a2[309]) != 0))
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t result = cstdlib_strcmp(v6, v7);
      if (!result) {
        break;
      }
      uint64_t v9 = a2[309] + 8 * v8++;
      unint64_t v7 = *(const char **)(v9 + 8);
      if (!v7) {
        goto LABEL_7;
      }
    }
    *(_DWORD *)(a1 + 708) = 1;
  }
  else
  {
LABEL_7:
    LOBYTE(v8) = 0;
    *(_DWORD *)(a1 + 708) = 0;
  }
  *(unsigned char *)(a1 + 174) = v8;
  return result;
}

uint64_t usextract_handleWordEnd(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  if (*(_DWORD *)(result + 72) == 1)
  {
    if (*(_DWORD *)(result + 20))
    {
      uint64_t v11 = *(unsigned __int16 *)(*a5 + 3578);
      if (*(_WORD *)(*a5 + 3578))
      {
        uint64_t v12 = *(int **)(result + 64);
        uint64_t v13 = (_DWORD *)(a5[451] + 4 * *(unsigned __int16 *)(*a5 + 3578) * (uint64_t)(int)a7);
        do
        {
          int v14 = *v12++;
          *v13++ = v14;
          --v11;
        }
        while (v11);
      }
    }
  }
  *(_WORD *)(a2 + 67) = 2060;
  *(unsigned char *)(a2 + 74) = 2;
  *(unsigned char *)(a2 + 78) = 2;
  *(unsigned char *)(a2 + 69) = 9;
  *(unsigned char *)(a2 + 186) = 9;
  *(_WORD *)(a2 + 178) = 3085;
  if (*(unsigned __int16 *)(a2 + 674) == (unsigned __int16)a7)
  {
    uint64_t v15 = 19017;
  }
  else
  {
    if (*(unsigned __int16 *)(a2 + 672) != (unsigned __int16)a7) {
      goto LABEL_11;
    }
    uint64_t v15 = 19013;
  }
  uint64_t result = log_OutPublic(*(void *)(a3 + 32), a4, v15, (uint64_t)"%s%s", (uint64_t)a5, a6, a7, a8, "word");
LABEL_11:
  int v16 = *(unsigned __int8 *)(a2 + 15);
  if (v16 != 255) {
    *(unsigned char *)(a2 + __sprintf_chk(ttsJSON_Version_version, 0, 0xFuLL, "%i.%i.%i", 1, 7, 15) = v16 + 1;
  }
  *(unsigned char *)(a2 + 14) = 2;
  if (a5[36])
  {
    int v17 = *(__int16 *)(a2 + 680);
    if (v17 >= *(__int16 *)(a2 + 674) && v17 < v8)
    {
      uint64_t v18 = *(__int16 *)(a2 + 680);
      do
      {
        uint64_t v19 = a5[36];
        if (*(unsigned char *)(v19 + v18) == 1) {
          *(unsigned char *)(v19 + v18) = 3;
        }
        ++v18;
      }
      while (v8 != v18);
    }
  }
  uint64_t v20 = a5[23];
  uint64_t v21 = v8 - 1;
  if (*(unsigned __int8 *)(v20 + v21) >= 2u) {
    *(unsigned char *)(v20 + v21) = 4;
  }
  uint64_t v22 = a5[39];
  if (v22)
  {
    unsigned int v23 = *(unsigned __int8 *)(a2 + 38);
    if (v23 >= 2) {
      uint64_t result = (uint64_t)cstdlib_memset((void *)(v22 + *(__int16 *)(a2 + 674)), v23, (v8 - *(__int16 *)(a2 + 674)) & ~((v8 - *(__int16 *)(a2 + 674)) >> 31));
    }
  }
  if ((*(unsigned __int8 *)(a2 + 12) | 2) == 3) {
    *(unsigned char *)(a2 + 12) = 2;
  }
  return result;
}

uint64_t usextract_handlePhraseRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, signed int a7)
{
  int v51 = 0;
  int v50 = 0;
  if (a6[78])
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a2 + 176))(a3, a4, a5, 4, &v50, (char *)&v51 + 2);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t v15 = *v50 - 80;
    if (v15 > 9) {
      char v16 = 3;
    }
    else {
      char v16 = byte_2206E1C48[v15];
    }
    *(unsigned char *)(a1 + 77) = v16;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a2 + 168))(a3, a4, a5, 7, 1, &v51, (char *)&v51 + 2);
  if ((result & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 708)) {
      BOOL v17 = (unsigned __int16)v51 == 2;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      char v18 = 7;
      *(unsigned char *)(a1 + 78) = 7;
      *(_DWORD *)(a1 + 70) = 117901063;
      *(_WORD *)(a1 + 74) = 1799;
      LODWORD(v19) = *(unsigned __int16 *)(a1 + 672);
      int v28 = *(unsigned __int16 *)(a1 + 664);
      if (v19 == v28) {
        unsigned __int8 v21 = 6;
      }
      else {
        unsigned __int8 v21 = 7;
      }
      unsigned int v22 = 8;
      *(unsigned char *)(a1 + 67) = 8;
      int v29 = *(unsigned __int16 *)(a1 + 666);
      if (v19 == v29) {
        unsigned __int8 v25 = 3;
      }
      else {
        unsigned __int8 v25 = 4;
      }
      *(unsigned char *)(a1 + 179) = 5;
      int v30 = *(unsigned __int16 *)(a1 + 674);
      if (v30 == v28) {
        unsigned __int8 v23 = 6;
      }
      else {
        unsigned __int8 v23 = 7;
      }
      if (v30 == v29) {
        unsigned __int8 v26 = 3;
      }
      else {
        unsigned __int8 v26 = 4;
      }
      *(unsigned char *)(a1 + 69) = 8;
      *(unsigned char *)(a1 + 186) = 5;
      *(_WORD *)(a1 + 666) = a7;
      *(_WORD *)(a1 + 664) = a7;
      *(_DWORD *)(a1 + 700) = 0;
      unsigned int v27 = 2;
      unsigned int v24 = 7;
    }
    else if ((unsigned __int16)v51 == 2)
    {
      char v18 = 3;
      *(unsigned char *)(a1 + 78) = 3;
      *(_DWORD *)(a1 + 70) = 50529027;
      *(_WORD *)(a1 + 74) = 771;
      LODWORD(v19) = *(unsigned __int16 *)(a1 + 672);
      int v20 = *(unsigned __int16 *)(a1 + 664);
      if (v19 == v20) {
        unsigned __int8 v21 = 6;
      }
      else {
        unsigned __int8 v21 = 7;
      }
      unsigned int v22 = 8;
      *(unsigned char *)(a1 + 67) = 8;
      *(unsigned char *)(a1 + 179) = 8;
      if (*(unsigned __int16 *)(a1 + 674) == v20) {
        unsigned __int8 v23 = 6;
      }
      else {
        unsigned __int8 v23 = 7;
      }
      *(unsigned char *)(a1 + 69) = 8;
      *(unsigned char *)(a1 + 186) = 8;
      *(_WORD *)(a1 + 664) = a7;
      unsigned int v24 = 13;
      unsigned __int8 v25 = v21;
      unsigned __int8 v26 = v23;
      unsigned int v27 = 13;
    }
    else
    {
      uint64_t v31 = (_DWORD *)(a1 + 70);
      if ((unsigned __int16)v51 == 1)
      {
        char v18 = 4;
        *(unsigned char *)(a1 + 78) = 4;
        *uint64_t v31 = 67372036;
        *(_WORD *)(a1 + 74) = 1028;
        LODWORD(v19) = *(unsigned __int16 *)(a1 + 672);
        int v32 = *(unsigned __int16 *)(a1 + 668);
        if (v19 == v32) {
          unsigned __int8 v21 = 3;
        }
        else {
          unsigned __int8 v21 = 4;
        }
        *(unsigned char *)(a1 + 67) = 5;
        int v33 = *(unsigned __int16 *)(a1 + 666);
        if (v19 == v33) {
          unsigned __int8 v25 = 3;
        }
        else {
          unsigned __int8 v25 = 4;
        }
        *(unsigned char *)(a1 + 179) = 5;
        int v34 = *(unsigned __int16 *)(a1 + 674);
        if (v34 == v32) {
          unsigned __int8 v23 = 3;
        }
        else {
          unsigned __int8 v23 = 4;
        }
        if (v34 == v33) {
          unsigned __int8 v26 = 3;
        }
        else {
          unsigned __int8 v26 = 4;
        }
        *(unsigned char *)(a1 + 69) = 5;
        *(unsigned char *)(a1 + 186) = 5;
        *(_WORD *)(a1 + 668) = a7;
        *(_WORD *)(a1 + 666) = a7;
        *(_WORD *)(a1 + 664) = a7;
        *(_DWORD *)(a1 + 700) = 0;
        *(_DWORD *)(a1 + 692) = 0;
        unsigned int v24 = 7;
        unsigned int v22 = 2;
        unsigned int v27 = 2;
      }
      else
      {
        char v18 = 5;
        *(unsigned char *)(a1 + 78) = 5;
        *uint64_t v31 = 84215045;
        *(_WORD *)(a1 + 74) = 1285;
        LODWORD(v19) = *(unsigned __int16 *)(a1 + 672);
        int v35 = *(unsigned __int16 *)(a1 + 670);
        unsigned __int8 v21 = v19 != v35;
        *(unsigned char *)(a1 + 67) = 2;
        *(unsigned char *)(a1 + 179) = 2;
        unsigned __int8 v23 = *(unsigned __int16 *)(a1 + 674) != v35;
        *(unsigned char *)(a1 + 69) = 2;
        *(unsigned char *)(a1 + 186) = 2;
        *(int16x4_t *)(a1 + 664) = vdup_n_s16(a7);
        unsigned int v24 = 6;
        *(_OWORD *)(a1 + 692) = 0u;
        unsigned int v22 = 1;
        unsigned __int8 v25 = v19 != v35;
        unsigned __int8 v26 = v23;
        unsigned int v27 = 1;
      }
    }
    if (a7 != -32768)
    {
      uint64_t v36 = a6[72];
      if (v36)
      {
        *(unsigned char *)(v36 + a7 - 1) = v18;
        LOWORD(v19) = *(_WORD *)(a1 + 672);
        char v18 = *(unsigned char *)(a1 + 73);
      }
    }
    *(unsigned char *)(a1 + 71) = 0;
    if (a7 > (__int16)v19 && a6[74])
    {
      uint64_t v19 = (__int16)v19;
      do
        *(unsigned char *)(a6[74] + v19++) = v18;
      while ((unsigned __int16)v19 != (unsigned __int16)a7);
    }
    *(unsigned char *)(a1 + 73) = 1;
    if (*(__int16 *)(a1 + 674) < a7 && a6[76] != 0)
    {
      uint64_t v38 = *(__int16 *)(a1 + 674);
      char v39 = *(unsigned char *)(a1 + 75);
      do
        *(unsigned char *)(a6[76] + v38++) = v39;
      while ((unsigned __int16)v38 != (unsigned __int16)a7);
    }
    *(unsigned char *)(a1 + 75) = 2;
    signed int v40 = *(__int16 *)(a1 + 672);
    if (v40 < a7 && (v40 & 0x80000000) == 0 && a6[68])
    {
      uint64_t v41 = *(unsigned __int16 *)(a1 + 672);
      do
      {
        uint64_t v42 = a6[68];
        if (*(unsigned __int8 *)(v42 + v41) > v21) {
          *(unsigned char *)(v42 + v41) = v21;
        }
        ++v41;
      }
      while (a7 != v41);
      LOWORD(v40) = *(_WORD *)(a1 + 672);
    }
    if (a7 > (__int16)v40 && (v40 & 0x8000) == 0 && a6[180])
    {
      uint64_t v43 = (unsigned __int16)v40;
      do
      {
        uint64_t v44 = a6[180];
        if (*(unsigned __int8 *)(v44 + v43) > v25) {
          *(unsigned char *)(v44 + v43) = v25;
        }
        ++v43;
      }
      while (a7 != v43);
    }
    signed int v45 = *(__int16 *)(a1 + 674);
    if (v45 < a7 && (v45 & 0x80000000) == 0 && a6[70])
    {
      uint64_t v46 = *(unsigned __int16 *)(a1 + 674);
      do
      {
        uint64_t v47 = a6[70];
        if (*(unsigned __int8 *)(v47 + v46) > v23) {
          *(unsigned char *)(v47 + v46) = v23;
        }
        ++v46;
      }
      while (a7 != v46);
      LOWORD(v45) = *(_WORD *)(a1 + 674);
    }
    if (a7 > (__int16)v45 && (v45 & 0x8000) == 0 && a6[187])
    {
      uint64_t v48 = (unsigned __int16)v45;
      do
      {
        uint64_t v49 = a6[187];
        if (*(unsigned __int8 *)(v49 + v48) > v26) {
          *(unsigned char *)(v49 + v48) = v26;
        }
        ++v48;
      }
      while (a7 != v48);
    }
    usextract_updateLastStrAcc((uint64_t)a6, a7, *(__int16 *)(a1 + 676), v22);
    return usextract_updateLastStrAccShp((uint64_t)a6, a7, *(__int16 *)(a1 + 678), v24, v27);
  }
  return result;
}

uint64_t usextract_updateLastStrAcc(uint64_t result, int a2, int a3, unsigned int a4)
{
  LODWORD(v4) = (__int16)(a2 - 1);
  if ((int)v4 >= a3 && a3 >= 1 && a2 >= 1 && *(void *)(result + 552) != 0)
  {
    do
    {
      uint64_t v8 = *(void *)(result + 552);
      uint64_t v4 = (__int16)v4;
      unsigned int v9 = *(unsigned __int8 *)(v8 + (__int16)v4);
      if (v9 <= 5 && v9 > a4) {
        *(unsigned char *)(v8 + v4) = a4;
      }
      LODWORD(v4) = (__int16)(v4 - 1);
    }
    while ((int)v4 >= a3);
  }
  return result;
}

uint64_t usextract_updateLastStrAccShp(uint64_t result, int a2, int a3, unsigned int a4, unsigned int a5)
{
  LODWORD(v5) = (__int16)(a2 - 1);
  if ((int)v5 >= a3 && a3 >= 1 && a2 >= 1 && *(void *)(result + 1432) != 0)
  {
    do
    {
      uint64_t v9 = *(void *)(result + 1432);
      uint64_t v5 = (__int16)v5;
      unsigned int v10 = *(unsigned __int8 *)(v9 + (__int16)v5);
      BOOL v11 = v10 <= 5 && v10 > a5;
      char v12 = a5;
      if (v11 || (v10 <= 0xA ? (BOOL v13 = v10 > a4) : (BOOL v13 = 0), v12 = a4, v13)) {
        *(unsigned char *)(v9 + v5) = v12;
      }
      LODWORD(v5) = (__int16)(v5 - 1);
    }
    while ((int)v5 >= a3);
  }
  return result;
}

uint64_t usextract_setUnknownOnPauses(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)(result + 32) + v1) == 35)
      {
        uint64_t v2 = *(void *)(result + 536);
        if (v2) {
          *(unsigned char *)(v2 + v1) = 4;
        }
        uint64_t v3 = *(void *)(result + 1424);
        if (v3) {
          *(unsigned char *)(v3 + v1) = 100;
        }
        uint64_t v4 = *(void *)(result + 544);
        if (v4) {
          *(unsigned char *)(v4 + v1) = 13;
        }
        uint64_t v5 = *(void *)(result + 1440);
        if (v5) {
          *(unsigned char *)(v5 + v1) = 100;
        }
        uint64_t v6 = *(void *)(result + 552);
        if (v6) {
          *(unsigned char *)(v6 + v1) = 9;
        }
        uint64_t v7 = *(void *)(result + 1432);
        if (v7) {
          *(unsigned char *)(v7 + v1) = 100;
        }
        uint64_t v8 = *(void *)(result + 560);
        if (v8) {
          *(unsigned char *)(v8 + v1) = 10;
        }
        uint64_t v9 = *(void *)(result + 1496);
        if (v9) {
          *(unsigned char *)(v9 + v1) = 100;
        }
        uint64_t v10 = *(void *)(result + 568);
        if (v10) {
          *(unsigned char *)(v10 + v1) = 6;
        }
        uint64_t v11 = *(void *)(result + 576);
        if (v11) {
          *(unsigned char *)(v11 + v1) = 6;
        }
        uint64_t v12 = *(void *)(result + 584);
        if (v12) {
          *(unsigned char *)(v12 + v1) = 6;
        }
        uint64_t v13 = *(void *)(result + 632);
        if (v13) {
          *(unsigned char *)(v13 + v1) = 6;
        }
        uint64_t v14 = *(void *)(result + 592);
        if (v14) {
          *(unsigned char *)(v14 + v1) = 6;
        }
        uint64_t v15 = *(void *)(result + 600);
        if (v15) {
          *(unsigned char *)(v15 + v1) = 6;
        }
        uint64_t v16 = *(void *)(result + 608);
        if (v16) {
          *(unsigned char *)(v16 + v1) = 6;
        }
        uint64_t v17 = *(void *)(result + 624);
        if (v17) {
          *(unsigned char *)(v17 + v1) = 3;
        }
      }
      ++v1;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

size_t usextract_setNextDifferentiator(size_t result, uint64_t a2)
{
  if (((*(_WORD *)(a2 + 10) - 2) & 0x8000) == 0)
  {
    uint64_t v3 = (const char *)(result + 2400);
    uint64_t v4 = (unsigned __int16)(*(_WORD *)(a2 + 10) - 2);
    do
    {
      uint64_t v5 = *(void *)(a2 + 32);
      if (*(unsigned char *)(v5 + v4 + 1) == 35)
      {
        uint64_t result = cstdlib_strlen(v3);
        char v6 = result + 1;
      }
      else if (*(unsigned char *)(v5 + v4) == 35)
      {
        char v6 = 0;
      }
      else
      {
        if (!*(unsigned char *)(*(void *)(a2 + 112) + v4))
        {
          uint64_t v7 = *(void *)(a2 + 616);
          char v6 = *(unsigned char *)(v7 + v4 + 1);
          goto LABEL_10;
        }
        char v6 = *(unsigned char *)(*(void *)(a2 + 264) + v4 + 1);
      }
      uint64_t v7 = *(void *)(a2 + 616);
LABEL_10:
      *(unsigned char *)(v7 + v4) = v6;
    }
    while (v4-- > 0);
  }
  return result;
}

uint64_t usextract_setPrePostSylBnd(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)(result + 32) + v1) == 35)
      {
        *(unsigned char *)(*(void *)(result + 72) + v1) = 1;
        *(unsigned char *)(*(void *)(result + 80) + v1) = 1;
        if (v1 + 1 < *(__int16 *)(result + 10)) {
          *(unsigned char *)(*(void *)(result + 80) + v1 + 1) = 1;
        }
      }
      if (v1 && v1 + 1 < *(__int16 *)(result + 10) && *(unsigned char *)(*(void *)(result + 32) + v1 + 1) == 35) {
        *(unsigned char *)(*(void *)(result + 112) + v1) = 3;
      }
      if (*(unsigned char *)(*(void *)(result + 112) + v1))
      {
        *(unsigned char *)(*(void *)(result + 72) + v1++) = 1;
        if (v1 < *(__int16 *)(result + 10)) {
          *(unsigned char *)(*(void *)(result + 80) + v1) = 1;
        }
      }
      else
      {
        ++v1;
      }
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setPlosives(uint64_t result, uint64_t a2)
{
  int v2 = *(__int16 *)(a2 + 10);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(unsigned __int8 *)(*(void *)(a2 + 32) + v3);
      if (v4 != 35)
      {
        *(unsigned char *)(*(void *)(a2 + 48) + v3) = *(unsigned char *)(result + *(unsigned __int8 *)(result + v4 + 2144) + 1373);
        LOWORD(v2) = *(_WORD *)(a2 + 10);
      }
      ++v3;
    }
    while (v3 < (__int16)v2);
  }
  return result;
}

uint64_t usextract_setWordPhrs(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)(result + 32) + v1) == 35)
      {
        LOBYTE(v2) = 4;
      }
      else
      {
        unint64_t v2 = 0x200010304uLL >> (8 * *(unsigned char *)(*(void *)(result + 104) + v1));
        if (*(unsigned __int8 *)(*(void *)(result + 104) + v1) > 4u) {
          LOBYTE(v2) = 4;
        }
      }
      *(unsigned char *)(*(void *)(result + 176) + v1++) = v2;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setFineSylPosInPhrs(uint64_t result)
{
  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    uint64_t v1 = result;
    unsigned __int8 v2 = 0;
    uint64_t v3 = (unsigned __int16)(*(_WORD *)(result + 10) - 1);
    do
    {
      if (!v3 || v3 == *(__int16 *)(v1 + 10) - 1 || *(unsigned char *)(*(void *)(v1 + 112) + v3) == 3)
      {
        uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 128) + v3);
        unsigned __int8 v2 = *(unsigned char *)(*(void *)(v1 + 128) + v3);
      }
      else
      {
        uint64_t v4 = *(unsigned __int8 *)(*(void *)(v1 + 128) + v3);
      }
      uint64_t result = usextract_getCurFineSyl(v4, v2);
      *(unsigned char *)(*(void *)(v1 + 144) + v3) = result;
    }
    while (v3-- > 0);
  }
  return result;
}

uint64_t usextract_finalizeSylType(uint64_t result)
{
  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    int v1 = 0;
    int v2 = 0;
    unsigned __int16 v3 = *(_WORD *)(result + 10) - 1;
    while (1)
    {
      int v4 = v1;
      if (*(unsigned char *)(*(void *)(result + 112) + v3) == 3)
      {
        ++v2;
        int v1 = 0;
      }
      if (*(unsigned char *)(*(void *)(result + 88) + v3) != 3) {
        goto LABEL_16;
      }
      if (*(unsigned char *)(*(void *)(result + 112) + v3)) {
        ++v1;
      }
      else {
        int v1 = v4;
      }
      if (v1 != 1) {
        goto LABEL_16;
      }
      uint64_t v5 = *(void *)(result + 160);
      if (v2 == 1) {
        break;
      }
      if (*(unsigned char *)(v5 + v3) == 2)
      {
        char v6 = 5;
        goto LABEL_14;
      }
LABEL_15:
      int v1 = 1;
LABEL_16:
      uint64_t v7 = *(void *)(result + 160);
      if (*(unsigned char *)(v7 + v3) == 4
        && *(unsigned char *)(*(void *)(result + 144) + v3) == 4
        && !*(unsigned char *)(*(void *)(result + 128) + v3))
      {
        if (v2 == 1) {
          char v8 = 6;
        }
        else {
          char v8 = 5;
        }
        *(unsigned char *)(v7 + v3) = v8;
      }
      int v9 = (__int16)v3--;
      if (v9 <= 0) {
        return result;
      }
    }
    char v6 = 6;
LABEL_14:
    *(unsigned char *)(v5 + v3) = v6;
    goto LABEL_15;
  }
  return result;
}

uint64_t usextract_setSylPos(uint64_t result, int a2)
{
  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    unsigned __int16 v2 = *(_WORD *)(result + 10) - 1;
    do
    {
      if (*(unsigned char *)(*(void *)(result + 32) + v2) == 35)
      {
        uint64_t v3 = *(void *)(result + 152);
      }
      else
      {
        if (*(unsigned char *)(*(void *)(result + 144) + v2) != 4)
        {
          if (*(unsigned char *)(*(void *)(result + 128) + v2))
          {
            int v5 = *(unsigned __int8 *)(*(void *)(result + 96) + v2);
            switch(v5)
            {
              case 3:
                *(unsigned char *)(*(void *)(result + 152) + v2) = 6;
                break;
              case 2:
                *(unsigned char *)(*(void *)(result + 152) + v2) = 5;
                break;
              case 1:
                *(unsigned char *)(*(void *)(result + 152) + v2) = 4;
                break;
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(result + 152) + v2) = 0;
          }
          goto LABEL_6;
        }
        if (!*(unsigned char *)(*(void *)(result + 128) + v2))
        {
          *(unsigned char *)(*(void *)(result + 152) + v2) = 2;
          goto LABEL_6;
        }
        uint64_t v3 = *(void *)(result + 152);
        if (a2 > (__int16)v2)
        {
          *(unsigned char *)(v3 + v2) = 1;
          goto LABEL_6;
        }
      }
      *(unsigned char *)(v3 + v2) = 3;
LABEL_6:
      int v4 = (__int16)v2--;
    }
    while (v4 > 0);
  }
  return result;
}

uint64_t usextract_finalizeNrSylInPhrs(uint64_t result)
{
  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    unsigned __int16 v1 = *(_WORD *)(result + 10) - 1;
    LOBYTE(v2) = 1;
    do
    {
      uint64_t v3 = *(void *)(result + 128);
      if (*(unsigned char *)(*(void *)(result + 112) + v1) == 3)
      {
        int v2 = *(unsigned __int8 *)(v3 + v1);
        if (v2 != 255)
        {
          *(unsigned char *)(v3 + v1) = v2 + 1;
          LOBYTE(v2) = *(unsigned char *)(*(void *)(result + 128) + v1);
        }
      }
      else
      {
        *(unsigned char *)(v3 + v1) = v2;
      }
      int v4 = (__int16)v1--;
    }
    while (v4 > 0);
  }
  return result;
}

uint64_t usextract_finalizePhnCntSyl(uint64_t result)
{
  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    unsigned __int16 v1 = *(_WORD *)(result + 10) - 1;
    char v2 = 1;
    do
    {
      if (*(unsigned char *)(*(void *)(result + 32) + v1) == 35)
      {
        *(unsigned char *)(*(void *)(result + 192) + v1) = 1;
      }
      else
      {
        uint64_t v3 = *(void *)(result + 192);
        if (*(unsigned char *)(*(void *)(result + 112) + v1)) {
          char v2 = *(unsigned char *)(v3 + v1);
        }
        else {
          *(unsigned char *)(v3 + v1) = v2;
        }
      }
      int v4 = (__int16)v1--;
    }
    while (v4 > 0);
  }
  return result;
}

uint64_t usextract_setNrSylInIP4(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    __int16 v2 = -1;
    uint64_t v3 = 0xFFFFLL;
    unsigned __int8 v4 = 1;
    unsigned __int8 v5 = 1;
    do
    {
      unsigned int v6 = *(unsigned __int8 *)(*(void *)(result + 576) + v1);
      if (v6 <= 7)
      {
        if (((1 << v6) & 0x36) != 0)
        {
          if (((v4 + 1) & 0x100) != 0) {
            unsigned __int8 v4 = -1;
          }
          else {
            ++v4;
          }
          if (((v5 + 1) & 0x100) != 0) {
            unsigned __int8 v5 = -1;
          }
          else {
            ++v5;
          }
        }
        else
        {
          uint64_t v7 = v1;
          if (((1 << v6) & 0xC0) != 0)
          {
            LOWORD(v8) = v3 + 1;
            uint64_t v9 = v1 + 1;
            if (v1 >= (__int16)v8 && *(void *)(result + 1416))
            {
              uint64_t v8 = (__int16)v8;
              do
                *(unsigned char *)(*(void *)(result + 1416) + v8++) = v4;
              while (v9 != (unsigned __int16)v8);
            }
            LOWORD(v10) = v2 + 1;
            unsigned __int8 v4 = 1;
            if (v1 >= (__int16)v10 && *(void *)(result + 1408))
            {
              uint64_t v10 = (__int16)v10;
              do
                *(unsigned char *)(*(void *)(result + 1408) + v10++) = v5;
              while (v9 != (unsigned __int16)v10);
              unsigned __int8 v5 = 1;
              unsigned __int8 v4 = 1;
            }
            else
            {
              unsigned __int8 v5 = 1;
            }
            __int16 v2 = v1;
            goto LABEL_33;
          }
          if (v6 == 3)
          {
            LOWORD(v11) = v3 + 1;
            if (v1 >= (__int16)(v3 + 1) && *(void *)(result + 1416))
            {
              uint64_t v11 = (__int16)v11;
              do
                *(unsigned char *)(*(void *)(result + 1416) + v11++) = v4;
              while (v1 + 1 != (unsigned __int16)v11);
            }
            if (((v5 + 1) & 0x100) != 0) {
              unsigned __int8 v5 = -1;
            }
            else {
              ++v5;
            }
            unsigned __int8 v4 = 1;
            goto LABEL_33;
          }
        }
      }
      uint64_t v7 = v3;
LABEL_33:
      ++v1;
      uint64_t v3 = v7;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setSylNrInIP4(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    unsigned __int8 v2 = 0;
    __int16 v3 = -1;
    do
    {
      unsigned int v4 = *(unsigned __int8 *)(*(void *)(result + 576) + v1);
      if (v4 <= 7)
      {
        if (((1 << v4) & 0xE) != 0)
        {
          if (((v2 + 1) & 0x100) != 0) {
            unsigned __int8 v2 = -1;
          }
          else {
            ++v2;
          }
          goto LABEL_21;
        }
        if (((1 << v4) & 0xB0) != 0)
        {
          LOWORD(v5) = v3 + 1;
          if (v1 >= (__int16)(v3 + 1) && *(void *)(result + 1456))
          {
            uint64_t v5 = (__int16)v5;
            do
              *(unsigned char *)(*(void *)(result + 1456) + v5++) = v2;
            while (v1 + 1 != (unsigned __int16)v5);
          }
LABEL_19:
          unsigned __int8 v2 = 0;
          goto LABEL_20;
        }
        if (v4 == 6)
        {
          unsigned __int8 v2 = 0;
          LOWORD(v6) = v3 + 1;
          if (v1 >= (__int16)v6 && *(void *)(result + 1456))
          {
            uint64_t v6 = (__int16)v6;
            do
              *(unsigned char *)(*(void *)(result + 1456) + v6++) = 0;
            while (v1 + 1 != (unsigned __int16)v6);
            goto LABEL_19;
          }
LABEL_20:
          __int16 v3 = v1;
        }
      }
LABEL_21:
      ++v1;
    }
    while (v1 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_finalizeFineSylPosInIP4(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    unsigned __int8 v3 = 0;
    uint64_t v4 = 0xFFFFLL;
    while (1)
    {
      unsigned int v5 = *(unsigned __int8 *)(*(void *)(v1 + 576) + v2);
      if (v5 > 7) {
        break;
      }
      if (((1 << v5) & 0xE) != 0)
      {
        __int16 v10 = v4 + 1;
        uint64_t v7 = v2 + 1;
        uint64_t v11 = *(void *)(v1 + 1456);
        __int16 v12 = v3;
        uint64_t result = usextract_getCurFineSyl(v3, *(unsigned __int8 *)(v11 + v2));
        if (v2 >= v10 && v11)
        {
          uint64_t v13 = v10;
          do
            *(unsigned char *)(*(void *)(v1 + 1456) + v13++) = result;
          while (v7 != (unsigned __int16)v13);
        }
        if (((v12 + 1) & 0x100) != 0) {
          unsigned __int8 v3 = -1;
        }
        else {
          unsigned __int8 v3 = v12 + 1;
        }
        goto LABEL_25;
      }
      if (((1 << v5) & 0xB0) != 0)
      {
        __int16 v6 = v4 + 1;
        uint64_t v7 = v2 + 1;
        uint64_t v8 = *(void *)(v1 + 1456);
        uint64_t result = usextract_getCurFineSyl(v3, *(unsigned __int8 *)(v8 + v2));
        unsigned __int8 v3 = 0;
        if (v2 < v6 || !v8) {
          goto LABEL_25;
        }
        uint64_t v9 = v6;
        do
          *(unsigned char *)(*(void *)(v1 + 1456) + v9++) = result;
        while (v7 != (unsigned __int16)v9);
      }
      else
      {
        if (v5 != 6) {
          break;
        }
        unsigned __int8 v3 = 0;
        __int16 v14 = v4 + 1;
        uint64_t v7 = v2 + 1;
        if (v2 < v14 || !*(void *)(v1 + 1456)) {
          goto LABEL_25;
        }
        uint64_t v15 = v14;
        do
          *(unsigned char *)(*(void *)(v1 + 1456) + v15++) = 7;
        while (v7 != (unsigned __int16)v15);
      }
      unsigned __int8 v3 = 0;
LABEL_25:
      uint64_t v4 = v2;
      uint64_t v2 = v7;
      if (v7 >= *(__int16 *)(v1 + 10)) {
        return result;
      }
    }
    uint64_t v7 = v2 + 1;
    uint64_t v2 = v4;
    goto LABEL_25;
  }
  return result;
}

uint64_t usextract_setSylStressedPrm(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    __int16 v2 = 0;
    unsigned __int16 v3 = -1;
    while (1)
    {
      int v4 = *(unsigned __int8 *)(*(void *)(result + 576) + v1);
      if ((v4 - 1) < 5) {
        break;
      }
      if (v4 == 6)
      {
        uint64_t v8 = v1 + 1;
        uint64_t v17 = (__int16)(v3 + 1);
        if (v1 >= v17 && *(void *)(result + 1472))
        {
          uint64_t v18 = v17;
          do
            *(unsigned char *)(*(void *)(result + 1472) + v18++) = 0;
          while (v8 != (unsigned __int16)v18);
        }
        if (v1 >= v17 && *(void *)(result + 1464))
        {
          do
            *(unsigned char *)(*(void *)(result + 1464) + v17++) = 0;
          while (v8 != (unsigned __int16)v17);
        }
        goto LABEL_31;
      }
      if (v4 == 7) {
        break;
      }
      uint64_t v8 = v1 + 1;
LABEL_32:
      uint64_t v1 = v8;
      __int16 v2 = v8;
      if (v8 >= *(__int16 *)(result + 10)) {
        return result;
      }
    }
    if ((v3 & 0x8000) != 0)
    {
      uint64_t v5 = *(void *)(result + 1472);
    }
    else
    {
      uint64_t v5 = *(void *)(result + 1472);
      if (*(unsigned __int8 *)(*(void *)(result + 1432) + v3) <= 0xBu)
      {
        LOWORD(v6) = v3 + 1;
        if (v1 >= (__int16)(v3 + 1) && v5)
        {
          char v7 = *(unsigned char *)(*(void *)(result + 1424) + v3);
          uint64_t v6 = (__int16)v6;
          do
            *(unsigned char *)(*(void *)(result + 1472) + v6++) = v7;
          while (v1 + 1 != (unsigned __int16)v6);
        }
        goto LABEL_19;
      }
    }
    LOWORD(v9) = v3 + 1;
    if (v1 >= (__int16)(v3 + 1) && v5)
    {
      uint64_t v9 = (__int16)v9;
      do
        *(unsigned char *)(*(void *)(result + 1472) + v9++) = 0;
      while (v1 + 1 != (unsigned __int16)v9);
    }
LABEL_19:
    uint64_t v8 = v1 + 1;
    if (*(__int16 *)(result + 10) - 1 <= v1)
    {
      uint64_t v10 = *(void *)(result + 1464);
    }
    else
    {
      uint64_t v10 = *(void *)(result + 1464);
      if (*(unsigned __int8 *)(*(void *)(result + 1432) + v8) <= 0xBu)
      {
        unsigned __int16 v11 = v2 + 1;
        int v12 = (__int16)(v3 + 1);
        if (v12 < (__int16)v11 && v10)
        {
          unsigned __int16 v13 = v11;
          char v14 = *(unsigned char *)(*(void *)(result + 1424) + v8);
          uint64_t v15 = v12;
          do
            *(unsigned char *)(*(void *)(result + 1464) + v15++) = v14;
          while (v13 != (unsigned __int16)v15);
        }
LABEL_31:
        unsigned __int16 v3 = v1;
        goto LABEL_32;
      }
    }
    LOWORD(v16) = v3 + 1;
    if (v1 >= (__int16)v16 && v10)
    {
      uint64_t v16 = (__int16)v16;
      do
        *(unsigned char *)(*(void *)(result + 1464) + v16++) = 0;
      while (v8 != (unsigned __int16)v16);
    }
    goto LABEL_31;
  }
  return result;
}

uint64_t usextract_setWrdBndTone(uint64_t result)
{
  int v1 = *(__int16 *)(result + 10);
  if (v1 >= 1)
  {
    uint64_t v2 = 0;
    LOWORD(v3) = 0;
    __int16 v4 = -1;
    while (1)
    {
      uint64_t v5 = *(void *)(result + 576);
      int v6 = *(unsigned __int8 *)(v5 + v2);
      if ((v6 - 2) < 4) {
        break;
      }
      if (v6 == 6)
      {
        uint64_t v3 = v2 + 1;
        uint64_t v17 = (__int16)(v4 + 1);
        if (v2 >= v17 && *(void *)(result + 1488))
        {
          uint64_t v18 = (__int16)(v4 + 1);
          do
            *(unsigned char *)(*(void *)(result + 1488) + v18++) = 0;
          while (v3 != (unsigned __int16)v18);
        }
        if (v2 >= v17 && *(void *)(result + 1480))
        {
          do
            *(unsigned char *)(*(void *)(result + 1480) + v17++) = 0;
          while (v3 != (unsigned __int16)v17);
        }
        goto LABEL_32;
      }
      if (v6 == 7) {
        break;
      }
      uint64_t v3 = v2 + 1;
LABEL_33:
      LOWORD(v1) = *(_WORD *)(result + 10);
      uint64_t v2 = v3;
      if (v3 >= (__int16)v1) {
        return result;
      }
    }
    if (v4 < 0)
    {
      char v10 = 0;
    }
    else
    {
      uint64_t v7 = v4;
      int v8 = *(unsigned __int8 *)(v5 + v4);
      if (v4) {
        BOOL v9 = v8 == 6;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9) {
        uint64_t v7 = (v4 - 1);
      }
      char v10 = *(unsigned char *)(*(void *)(result + 1400) + v7);
    }
    LODWORD(v11) = (__int16)(v4 + 1);
    int v12 = (__int16)(v3 + 1);
    if ((int)v11 < v12 && *(void *)(result + 1488))
    {
      uint64_t v13 = (int)v11;
      do
        *(unsigned char *)(*(void *)(result + 1488) + v13++) = v10;
      while ((unsigned __int16)v12 != (unsigned __int16)v13);
      LOWORD(v1) = *(_WORD *)(result + 10);
    }
    uint64_t v3 = v2 + 1;
    if (v2 >= (__int16)v1 - 1)
    {
      char v16 = 0;
    }
    else
    {
      BOOL v14 = v2 < (__int16)v1 - 2 && *(unsigned char *)(*(void *)(result + 576) + v3) == 6;
      uint64_t v15 = v2 + 2;
      if (!v14) {
        uint64_t v15 = v2 + 1;
      }
      char v16 = *(unsigned char *)(*(void *)(result + 1400) + v15);
    }
    if ((int)v11 < v12 && *(void *)(result + 1480))
    {
      uint64_t v11 = (int)v11;
      do
        *(unsigned char *)(*(void *)(result + 1480) + v11++) = v16;
      while ((unsigned __int16)v12 != (unsigned __int16)v11);
    }
LABEL_32:
    __int16 v4 = v2;
    goto LABEL_33;
  }
  return result;
}

uint64_t usextract_setIP4PosInSent(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    char v2 = 1;
    __int16 v3 = -1;
    __int16 v4 = -1;
    char v5 = 1;
    do
    {
      switch(*(unsigned char *)(*(void *)(result + 576) + v1))
      {
        case 3:
          LOWORD(v10) = v4 + 1;
          uint64_t v7 = v1 + 1;
          if (v1 >= (__int16)v10 && *(void *)(result + 1512))
          {
            uint64_t v10 = (__int16)v10;
            do
              *(unsigned char *)(*(void *)(result + 1512) + v10++) = v2;
            while (v7 != (unsigned __int16)v10);
          }
          char v2 = 0;
          __int16 v4 = v1;
          break;
        case 4:
        case 7:
          LOWORD(v6) = v4 + 1;
          uint64_t v7 = v1 + 1;
          if (v1 >= (__int16)(v4 + 1) && *(void *)(result + 1512))
          {
            uint64_t v6 = (__int16)v6;
            do
              *(unsigned char *)(*(void *)(result + 1512) + v6++) = 2;
            while (v7 != (unsigned __int16)v6);
          }
          __int16 v8 = v3 + 1;
          char v2 = 1;
          if (v1 >= v8 && *(void *)(result + 1504))
          {
            uint64_t v9 = v8;
            do
              *(unsigned char *)(*(void *)(result + 1504) + v9++) = v5;
            while (v7 != (unsigned __int16)v9);
            char v5 = 0;
            char v2 = 1;
          }
          else
          {
            char v5 = 0;
          }
          goto LABEL_38;
        case 5:
          LOWORD(v11) = v4 + 1;
          uint64_t v7 = v1 + 1;
          if (v1 >= (__int16)v11 && *(void *)(result + 1512))
          {
            uint64_t v11 = (__int16)v11;
            do
              *(unsigned char *)(*(void *)(result + 1512) + v11++) = 2;
            while (v7 != (unsigned __int16)v11);
          }
          LOWORD(v12) = v3 + 1;
          if (v1 >= (__int16)v12 && *(void *)(result + 1504))
          {
            uint64_t v12 = (__int16)v12;
            do
              *(unsigned char *)(*(void *)(result + 1504) + v12++) = 2;
            while (v7 != (unsigned __int16)v12);
          }
          goto LABEL_38;
        case 6:
          LOWORD(v13) = v4 + 1;
          uint64_t v7 = v1 + 1;
          if (v1 >= (__int16)v13 && *(void *)(result + 1512))
          {
            uint64_t v13 = (__int16)v13;
            do
              *(unsigned char *)(*(void *)(result + 1512) + v13++) = 100;
            while (v7 != (unsigned __int16)v13);
          }
          LOWORD(v14) = v3 + 1;
          if (v1 >= (__int16)v14 && *(void *)(result + 1504))
          {
            uint64_t v14 = (__int16)v14;
            do
              *(unsigned char *)(*(void *)(result + 1504) + v14++) = 100;
            while (v7 != (unsigned __int16)v14);
          }
LABEL_38:
          __int16 v4 = v1;
          __int16 v3 = v1;
          break;
        default:
          uint64_t v7 = v1 + 1;
          break;
      }
      uint64_t v1 = v7;
    }
    while (v7 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setRhythmRelated(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    uint64_t v1 = 0;
    int v2 = 0;
    int v3 = 0;
    unsigned __int8 v4 = 0;
    char v5 = 0;
    int8x8_t v6 = 0;
    uint64_t v7 = 0xFFFFLL;
    int32x2_t v8 = 0;
    do
    {
      int v9 = *(unsigned __int8 *)(*(void *)(result + 576) + v1);
      if ((v9 - 1) < 5) {
        goto LABEL_4;
      }
      if (v9 == 6)
      {
        uint64_t v11 = v1 + 1;
        uint64_t v19 = (__int16)(v7 + 1);
        if (v1 >= v19 && *(void *)(result + 1528))
        {
          uint64_t v20 = (__int16)(v7 + 1);
          do
            *(unsigned char *)(*(void *)(result + 1528) + v20++) = 100;
          while (v11 != (unsigned __int16)v20);
        }
        if (v1 >= v19 && *(void *)(result + 1544))
        {
          uint64_t v21 = (__int16)(v7 + 1);
          do
            *(unsigned char *)(*(void *)(result + 1544) + v21++) = 100;
          while (v11 != (unsigned __int16)v21);
        }
        if (v1 >= v19 && *(void *)(result + 1560))
        {
          uint64_t v22 = (__int16)(v7 + 1);
          do
            *(unsigned char *)(*(void *)(result + 1560) + v22++) = 100;
          while (v11 != (unsigned __int16)v22);
        }
        char v5 = 0;
        int8x8_t v6 = 0;
        if (v1 >= v19 && *(void *)(result + 1576))
        {
          do
            *(unsigned char *)(*(void *)(result + 1576) + v19++) = 100;
          while (v11 != (unsigned __int16)v19);
          char v5 = 0;
          unsigned __int8 v4 = 0;
          int v3 = 0;
          int v2 = 0;
          int8x8_t v6 = 0;
        }
        else
        {
          unsigned __int8 v4 = 0;
          int v3 = 0;
          int v2 = 0;
        }
        int32x2_t v8 = 0;
        goto LABEL_55;
      }
      if (v9 == 7)
      {
LABEL_4:
        unsigned int v10 = *(unsigned __int8 *)(*(void *)(result + 1432) + v1);
        if (v10 > 0xB)
        {
          char v5 = 0;
          int v3 = 1;
        }
        if ((v10 - 6) >= 0xFBu) {
          unsigned __int8 v4 = 0;
        }
        uint64_t v11 = v1 + 1;
        uint64_t v12 = (__int16)(v7 + 1);
        if (v1 >= v12 && *(void *)(result + 1528))
        {
          uint64_t v13 = v12;
          do
            *(unsigned char *)(*(void *)(result + 1528) + v13++) = v5;
          while (v11 != (unsigned __int16)v13);
        }
        int32x2_t v14 = (int32x2_t)vcgt_u32((uint32x2_t)0xA0000000BLL, (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(v10 - 1), (int8x8_t)0xFF000000FFLL));
        int32x2_t v15 = (int32x2_t)vbic_s8(v6, (int8x8_t)v14);
        if (v1 >= v12 && *(void *)(result + 1544))
        {
          uint64_t v16 = v12;
          do
            *(unsigned char *)(*(void *)(result + 1544) + v16++) = v15.i8[0];
          while (v11 != (unsigned __int16)v16);
        }
        if (v1 >= v12 && *(void *)(result + 1560))
        {
          uint64_t v17 = v12;
          do
            *(unsigned char *)(*(void *)(result + 1560) + v17++) = v15.i8[4];
          while (v11 != (unsigned __int16)v17);
        }
        if (v1 >= v12 && *(void *)(result + 1576))
        {
          do
            *(unsigned char *)(*(void *)(result + 1576) + v12++) = v4;
          while (v11 != (unsigned __int16)v12);
        }
        int32x2_t v8 = vsub_s32((int32x2_t)vbic_s8((int8x8_t)v8, (int8x8_t)v14), v14);
        if (v5 != -1 && v3 != 0) {
          ++v5;
        }
        int8x8_t v6 = (int8x8_t)vsub_s32(v15, (int32x2_t)vbic_s8((int8x8_t)vtst_s32(v8, v8), (int8x8_t)vceq_s32((int32x2_t)vand_s8((int8x8_t)v15, (int8x8_t)0xFF000000FFLL), (int32x2_t)0xFF000000FFLL)));
        if ((v10 - 6) > 0xFAu || v2)
        {
          if (((v4 + 1) & 0x100) != 0) {
            unsigned __int8 v4 = -1;
          }
          else {
            ++v4;
          }
          int v2 = 1;
        }
      }
      else
      {
        uint64_t v11 = v1 + 1;
        uint64_t v1 = v7;
      }
LABEL_55:
      uint64_t v7 = v1;
      uint64_t v1 = v11;
    }
    while (v11 < *(__int16 *)(result + 10));
  }
  return result;
}

uint64_t usextract_setRhythmRelatedBackward(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 10);
  if ((((_WORD)v1 - 1) & 0x8000) == 0)
  {
    int v2 = 0;
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    unsigned __int8 v6 = 0;
    char v7 = 0;
    char v8 = 0;
    char v9 = 0;
    uint64_t v10 = (__int16)(v1 - 1);
    do
    {
      uint64_t v11 = (unsigned __int16)v10;
      int v12 = *(unsigned __int8 *)(*(void *)(result + 568) + (unsigned __int16)v10);
      int v13 = (__int16)v10;
      if ((v12 - 1) >= 5)
      {
        if (v12 == 6)
        {
          if ((__int16)v10 < (__int16)v1 && *(void *)(result + 1520))
          {
            uint64_t v24 = (unsigned __int16)v10;
            do
              *(unsigned char *)(*(void *)(result + 1520) + v24++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v24);
          }
          if ((__int16)v10 < (__int16)v1 && *(void *)(result + 1536))
          {
            uint64_t v25 = (unsigned __int16)v10;
            do
              *(unsigned char *)(*(void *)(result + 1536) + v25++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v25);
          }
          if ((__int16)v10 < (__int16)v1 && *(void *)(result + 1552))
          {
            uint64_t v26 = (unsigned __int16)v10;
            do
              *(unsigned char *)(*(void *)(result + 1552) + v26++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v26);
          }
          char v9 = 0;
          if ((__int16)v10 >= (__int16)v1)
          {
            char v8 = 0;
            char v7 = 0;
            unsigned __int8 v6 = 0;
            int v5 = 0;
            int v4 = 0;
            int v3 = 0;
            int v2 = 0;
          }
          else
          {
            char v8 = 0;
            char v7 = 0;
            unsigned __int8 v6 = 0;
            int v5 = 0;
            int v4 = 0;
            int v3 = 0;
            int v2 = 0;
            uint64_t v23 = v10;
            if (!*(void *)(result + 1568)) {
              goto LABEL_51;
            }
            do
              *(unsigned char *)(*(void *)(result + 1568) + v11++) = 100;
            while ((unsigned __int16)v1 != (unsigned __int16)v11);
            char v9 = 0;
            char v8 = 0;
            char v7 = 0;
            unsigned __int8 v6 = 0;
            int v5 = 0;
            int v4 = 0;
            int v3 = 0;
            int v2 = 0;
          }
          goto LABEL_50;
        }
        if (v12 != 7)
        {
          uint64_t v23 = v1;
          goto LABEL_51;
        }
      }
      unsigned int v14 = *(unsigned __int8 *)(*(void *)(result + 1432) + (unsigned __int16)v10);
      if (v14 > 0xB)
      {
        char v9 = 0;
        int v5 = 1;
      }
      unsigned int v15 = v14 - 1;
      if (v14 - 1 < 0xB) {
        char v8 = 0;
      }
      if (v15 < 0xB) {
        int v4 = 1;
      }
      if (v15 < 0xA)
      {
        char v7 = 0;
        int v3 = 1;
      }
      unsigned __int8 v16 = v14 - 6;
      if (v16 >= 0xFBu) {
        unsigned __int8 v6 = 0;
      }
      if ((__int16)v10 < (__int16)v1 && *(void *)(result + 1520))
      {
        uint64_t v17 = (unsigned __int16)v10;
        do
          *(unsigned char *)(*(void *)(result + 1520) + v17++) = v9;
        while ((unsigned __int16)v1 != (unsigned __int16)v17);
      }
      if ((__int16)v10 < (__int16)v1 && *(void *)(result + 1536))
      {
        uint64_t v18 = (unsigned __int16)v10;
        do
          *(unsigned char *)(*(void *)(result + 1536) + v18++) = v8;
        while ((unsigned __int16)v1 != (unsigned __int16)v18);
      }
      if ((__int16)v10 < (__int16)v1 && *(void *)(result + 1552))
      {
        uint64_t v19 = (unsigned __int16)v10;
        do
          *(unsigned char *)(*(void *)(result + 1552) + v19++) = v7;
        while ((unsigned __int16)v1 != (unsigned __int16)v19);
      }
      if ((__int16)v10 < (__int16)v1 && *(void *)(result + 1568))
      {
        do
          *(unsigned char *)(*(void *)(result + 1568) + v11++) = v6;
        while ((unsigned __int16)v1 != (unsigned __int16)v11);
      }
      if (v9 != -1 && v5 != 0) {
        ++v9;
      }
      if (v8 != -1 && v4 != 0) {
        ++v8;
      }
      if (v7 != -1 && v3 != 0) {
        ++v7;
      }
      if (v16 > 0xFAu || v2)
      {
        if (((v6 + 1) & 0x100) != 0) {
          unsigned __int8 v6 = -1;
        }
        else {
          ++v6;
        }
        int v2 = 1;
      }
LABEL_50:
      uint64_t v23 = v10;
LABEL_51:
      uint64_t v10 = (v10 - 1);
      uint64_t v1 = v23;
    }
    while (v13 > 0);
  }
  return result;
}

uint64_t usextract_finalizeFineSylBndShape(uint64_t result)
{
  unsigned __int16 v1 = *(_WORD *)(result + 10);
  unsigned __int16 v2 = v1 - 1;
  if (((v1 - 1) & 0x8000) == 0)
  {
    char v3 = 0;
    int v4 = 1;
    int v5 = 1;
    do
    {
      uint64_t v6 = v2;
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(result + 568) + v2);
      int v8 = (__int16)v2;
      if (v7 <= 7)
      {
        if (((1 << v7) & 0xB8) != 0)
        {
          uint64_t v9 = *(void *)(result + 1584);
          if (v5 && !v3)
          {
            char v3 = *(unsigned char *)(v9 + v2);
            if (v4) {
              v3 += 100;
            }
            int v4 = 0;
          }
          int v5 = 1;
          if ((__int16)v2 < (__int16)v1 && v9)
          {
            do
              *(unsigned char *)(*(void *)(result + 1584) + v6++) = v3;
            while (v1 != (unsigned __int16)v6);
            char v3 = 0;
            int v5 = 1;
          }
          else
          {
            char v3 = 0;
          }
        }
        else if (((1 << v7) & 6) != 0)
        {
          uint64_t v10 = *(void *)(result + 1584);
          if (v5 && !v3)
          {
            char v3 = *(unsigned char *)(v10 + v2);
            if (v4) {
              v3 += 100;
            }
            int v4 = 0;
          }
          if ((__int16)v2 < (__int16)v1 && v10)
          {
            uint64_t v11 = v2;
            do
              *(unsigned char *)(*(void *)(result + 1584) + v11++) = v3;
            while (v1 != (unsigned __int16)v11);
          }
          if (*(unsigned __int8 *)(*(void *)(result + 1432) + v2) - 1 < 0xA)
          {
            char v3 = 0;
            int v5 = 0;
          }
        }
        else
        {
          if (v7 != 6) {
            goto LABEL_29;
          }
          if ((__int16)v2 < (__int16)v1 && *(void *)(result + 1584))
          {
            do
              *(unsigned char *)(*(void *)(result + 1584) + v6++) = 0;
            while (v1 != (unsigned __int16)v6);
          }
        }
        unsigned __int16 v1 = v2;
      }
LABEL_29:
      --v2;
    }
    while (v8 > 0);
  }
  return result;
}

uint64_t usextract_setSylIndexInWordFromStart(uint64_t result)
{
  if (*(__int16 *)(result + 10) >= 1)
  {
    **(unsigned char **)(result + 1384) = 0;
    if (*(__int16 *)(result + 10) >= 3)
    {
      int v1 = 1;
      __int16 v2 = 1;
      do
      {
        uint64_t v3 = *(void *)(result + 32);
        if (*(unsigned char *)(v3 + v2) == 35)
        {
          LOBYTE(v4) = 0;
        }
        else
        {
          uint64_t v5 = v1 - 1;
          unsigned int v6 = *(unsigned __int8 *)(*(void *)(result + 112) + v5);
          if (v6 <= 1 && *(unsigned char *)(v3 + v5) != 35)
          {
            uint64_t v7 = *(void *)(result + 1384);
            unsigned int v4 = *(unsigned __int8 *)(v7 + v5);
            if (v6 == 1 && v4 < 7) {
              LOBYTE(v4) = v4 + 1;
            }
            goto LABEL_10;
          }
          LOBYTE(v4) = 1;
        }
        uint64_t v7 = *(void *)(result + 1384);
LABEL_10:
        *(unsigned char *)(v7 + v2++) = v4;
        int v1 = v2;
      }
      while (*(__int16 *)(result + 10) - 1 > v2);
    }
  }
  return result;
}

uint64_t usextract_setSylIndexInWordFromEnd(uint64_t result)
{
  LODWORD(v1) = *(__int16 *)(result + 10);
  if ((int)v1 >= 1)
  {
    *(unsigned char *)(*(void *)(result + 1392) + *(unsigned __int16 *)(result + 10) - 1) = 0;
    LOWORD(v1) = *(_WORD *)(result + 10);
  }
  LOWORD(v1) = v1 - 2;
  if ((v1 & 0x8000) == 0)
  {
    uint64_t v1 = (unsigned __int16)v1;
    do
    {
      if (*(unsigned char *)(*(void *)(result + 32) + v1) == 35)
      {
        char v2 = 0;
        uint64_t v3 = *(void *)(result + 1392);
      }
      else
      {
        unsigned int v4 = *(unsigned __int8 *)(*(void *)(result + 112) + v1);
        if (v4 < 2)
        {
          uint64_t v3 = *(void *)(result + 1392);
          uint64_t v5 = (v1 + 1);
          if (v4 == 1 && (unsigned int v6 = *(unsigned __int8 *)(v3 + v5), v6 <= 6)) {
            char v2 = v6 + 1;
          }
          else {
            char v2 = *(unsigned char *)(v3 + v5);
          }
        }
        else
        {
          uint64_t v3 = *(void *)(result + 1392);
          char v2 = 1;
        }
      }
      *(unsigned char *)(v3 + v1) = v2;
    }
    while (v1-- > 0);
  }
  return result;
}

uint64_t usextract_setSylPosInWordRelEnd(uint64_t result)
{
  if (((*(_WORD *)(result + 10) - 1) & 0x8000) == 0)
  {
    uint64_t v1 = (unsigned __int16)(*(_WORD *)(result + 10) - 1);
    do
    {
      if (*(unsigned char *)(*(void *)(result + 32) + v1) == 35
        || (int v2 = *(unsigned __int8 *)(*(void *)(result + 112) + v1), (v2 - 2) < 2))
      {
        uint64_t v3 = *(void *)(result + 304);
        char v4 = 1;
      }
      else if (v2 == 1)
      {
        uint64_t v3 = *(void *)(result + 304);
        char v4 = *(unsigned char *)(v3 + (v1 + 1)) + 1;
      }
      else
      {
        if ((int)v1 + 1 >= *(__int16 *)(result + 10)) {
          continue;
        }
        uint64_t v3 = *(void *)(result + 304);
        char v4 = *(unsigned char *)(v3 + (v1 + 1));
      }
      *(unsigned char *)(v3 + v1) = v4;
    }
    while (v1-- > 0);
  }
  return result;
}

void *usextract_setSylPosInSenRelStr(uint64_t a1, int a2, int a3)
{
  __int16 v3 = a2;
  if (a2 < 0) {
    __int16 v3 = *(_WORD *)(a1 + 10) - 1;
  }
  uint64_t v5 = *(__int16 *)(a1 + 10);
  if ((a3 & 0x80000000) == 0)
  {
    if ((int)v5 <= a3)
    {
      __int16 v7 = 0;
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 72);
      if (*(unsigned char *)(v6 + (unsigned __int16)a3) == 1)
      {
        __int16 v7 = 1;
      }
      else
      {
        uint64_t v8 = (unsigned __int16)a3 + 1;
        while (*(unsigned __int16 *)(a1 + 10) != (unsigned __int16)v8)
        {
          int v9 = *(unsigned __int8 *)(v6 + v8++);
          if (v9 == 1)
          {
            LOWORD(a3) = v8 - 1;
            __int16 v7 = v8 - 1 < v5;
            goto LABEL_13;
          }
        }
        __int16 v7 = v8 < v5;
        LOWORD(a3) = *(_WORD *)(a1 + 10);
      }
    }
LABEL_13:
    LOWORD(v5) = a3 + v7;
  }
  uint64_t v10 = *(void **)(a1 + 296);
  int v11 = (__int16)v5;
  if ((__int16)v5 >= 1) {
    size_t v12 = (__int16)v5;
  }
  else {
    size_t v12 = 0;
  }
  uint64_t result = cstdlib_memset(v10, 1, v12);
  if (v11 < v3) {
    uint64_t result = cstdlib_memset((void *)(*(void *)(a1 + 296) + v11), 2, (v3 - v11) & ~((v3 - v11) >> 31));
  }
  int v14 = *(__int16 *)(a1 + 10);
  if (v14 > v3)
  {
    unsigned int v15 = (void *)(*(void *)(a1 + 296) + v3);
    return cstdlib_memset(v15, 3, (v14 - v3) & ~((v14 - v3) >> 31));
  }
  return result;
}

uint64_t usextract_setPitchAndDurFromCart(uint64_t result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 10) >= 1)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    uint64_t v5 = result + 28176;
    uint64_t v6 = result + 28200;
    uint64_t v7 = result + 28208;
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + *(unsigned __int8 *)(*(void *)(a2 + 32) + v4) + 2144);
      if ((*(_DWORD *)(v3 + 3068) & 0x80000000) == 0 && *(unsigned char *)(v3 + v8 + 859) == 118)
      {
        uint64_t v9 = *(void *)(a2 + 1712);
        if (v9) {
          uint64_t v10 = v9 + v4;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void *)(a2 + 1720);
        if (v11) {
          uint64_t v12 = v11 + v4;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 28168))(v5, v6, 0, a2, (__int16)v4, *(void *)(a2 + 216) + v4, *(void *)(a2 + 224) + v4, v10, v12);
      }
      if ((*(_DWORD *)(v3 + 3072) & 0x80000000) == 0)
      {
        uint64_t v13 = *(void *)(a2 + 1728);
        if (v13) {
          uint64_t v14 = v13 + v4;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(void *)(a2 + 1736);
        if (v15) {
          uint64_t v16 = v15 + v4;
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 28168))(v7, *(void *)(v3 + 28232) + 8 * v8, 1, a2, (__int16)v4, *(void *)(a2 + 232) + v4, *(void *)(a2 + 240) + v4, v14, v16);
      }
      ++v4;
    }
    while (v4 < *(__int16 *)(a2 + 10));
  }
  return result;
}

uint64_t usextract_setSylTrans(uint64_t result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 10) >= 1)
  {
    uint64_t v2 = 0;
    __int16 v3 = 0;
    uint64_t v4 = *(void *)(a2 + 248);
    uint64_t v5 = *(void *)(a2 + 80);
    int v6 = 1;
    uint64_t v7 = *(void *)(result + 3528);
    do
    {
      if (*(unsigned char *)(v5 + v2) == 1) {
        int v6 = 1;
      }
      uint64_t v8 = (unsigned __int16 *)(v7 + 2 * *(unsigned __int8 *)(v4 + v2));
      uint64_t v9 = *v8;
      unsigned int v10 = v8[1];
      if (v9 < v10)
      {
        BOOL v11 = *(unsigned char *)(result
                       + *(unsigned __int8 *)(result + *(unsigned __int8 *)(*(void *)(a2 + 32) + v2) + 2144)
                       + 1116) == 86
           && v6 == 1;
        if (v11)
        {
          if (v3)
          {
            uint64_t v12 = v3;
            if ((*(_DWORD *)(result + 3392) & 0x80000000) != 0)
            {
              uint64_t v17 = *(void *)(a2 + 160);
              int v18 = *(unsigned __int8 *)(v17 + v3);
              uint64_t v15 = (_WORD *)(*(void *)(result + 3544) + 16 * v9);
              uint64_t v19 = v9 + 1;
              while (1)
              {
                if (v18 == (__int16)v15[4])
                {
                  uint64_t v20 = *(void *)(a2 + 152);
                  if (*(unsigned __int8 *)(v20 + v12) == v15[5]
                    && *(unsigned __int8 *)(v17 + v2) == v15[6]
                    && *(unsigned __int8 *)(v20 + v2) == v15[7])
                  {
                    break;
                  }
                }
                v15 += 8;
                BOOL v11 = v10 == (unsigned __int16)v19++;
                if (v11) {
                  goto LABEL_26;
                }
              }
            }
            else
            {
              uint64_t v13 = *(void *)(a2 + 264);
              int v14 = *(unsigned __int8 *)(v13 + v3);
              uint64_t v15 = (_WORD *)(*(void *)(result + 3536) + 12 * v9);
              uint64_t v16 = v9 + 1;
              while (v14 != (__int16)v15[4] || *(unsigned __int8 *)(v13 + v2) != v15[5])
              {
                v15 += 6;
                BOOL v11 = v10 == (unsigned __int16)v16++;
                if (v11) {
                  goto LABEL_26;
                }
              }
            }
            int v6 = 0;
            uint64_t v21 = *(void *)(a2 + 3552);
            uint64_t v24 = (_WORD *)(v21 + 8 * v2);
            *uint64_t v24 = *v15;
            v24[1] = v15[1];
            v24[2] = v15[2];
            __int16 v23 = v15[3];
            __int16 v3 = v2;
            goto LABEL_28;
          }
LABEL_26:
          int v6 = 0;
          __int16 v3 = v2;
        }
      }
      uint64_t v21 = *(void *)(a2 + 3552);
      uint64_t v22 = v21 + 8 * v2;
      *(_DWORD *)uint64_t v22 = -13041864;
      __int16 v23 = 200;
      *(_WORD *)(v22 + 4) = 200;
LABEL_28:
      *(_WORD *)(v21 + 8 * v2++ + 6) = v23;
    }
    while (v2 < *(__int16 *)(a2 + 10));
  }
  return result;
}

__int16 *usextract_setSylChunk(__int16 *result)
{
  int v1 = result[5];
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = v3 + 1;
      if (v3 + 1 == (__int16)v1)
      {
        uint64_t v5 = (unsigned char *)(*((void *)v2 + 445) + 9 * v3);
        v5[5] = *(unsigned char *)(v3 + *((void *)v2 + 4) - 1);
        v5[6] = 35;
        *uint64_t v5 = 35;
      }
      else if (*(unsigned char *)(*((void *)v2 + 10) + v3) == 1)
      {
        uint64_t v6 = *((void *)v2 + 4);
        if (v3) {
          char v7 = *(unsigned char *)(v3 + v6 - 1);
        }
        else {
          char v7 = 35;
        }
        uint64_t v9 = (unsigned char *)(*((void *)v2 + 445) + 9 * v3);
        v9[5] = v7;
        char v10 = *(unsigned char *)(v6 + v3);
        *uint64_t v9 = v10;
        *(unsigned char *)(*((void *)v2 + 445) + 9 * v3 + 7) = v10;
        __int16 v11 = v2[5];
        if (v3)
        {
          int v12 = v3 + 1;
          if ((int)v3 + 1 >= v2[5] || *(unsigned char *)(*((void *)v2 + 14) + (__int16)v3))
          {
            __int16 v13 = v3;
          }
          else
          {
            unsigned int v18 = 1;
            __int16 v13 = v3;
            do
            {
              if (v18 > 4)
              {
                if (v18 == 5) {
                  uint64_t result = (__int16 *)cstdlib_memset((void *)(*((void *)v2 + 445) + 9 * v3), 0, 9uLL);
                }
              }
              else
              {
                *(unsigned char *)(*((void *)v2 + 445) + 9 * v3 + v18) = *(unsigned char *)(*((void *)v2 + 4) + v12);
              }
              int v12 = ++v13 + 1;
              __int16 v11 = v2[5];
              if (v12 >= v11) {
                break;
              }
              ++v18;
            }
            while (!*(unsigned char *)(*((void *)v2 + 14) + v13));
          }
        }
        else
        {
          __int16 v13 = 0;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v15 = *((void *)v2 + 4);
        if ((int)v14 >= v11) {
          char v16 = 35;
        }
        else {
          char v16 = *(unsigned char *)(v15 + v14);
        }
        uint64_t v17 = *((void *)v2 + 445) + 9 * v3;
        *(unsigned char *)(v17 + 6) = v16;
        *(unsigned char *)(v17 + 8) = *(unsigned char *)(v15 + v13);
      }
      else
      {
        uint64_t v8 = *((void *)v2 + 445) + 9 * v3;
        *(void *)uint64_t v8 = *(void *)(v8 - 9);
        *(unsigned char *)(v8 + 8) = *(unsigned char *)(v8 - 1);
      }
      LOWORD(v1) = v2[5];
      ++v3;
    }
    while (v4 < (__int16)v1);
  }
  return result;
}

uint64_t usextract_applyGenericContextRules(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 3520);
  if (v2)
  {
    int v3 = *(__int16 *)(a2 + 10);
    if (v3 < 2)
    {
      return 0;
    }
    else
    {
      int v4 = 0;
      __int16 v5 = 0;
      do
      {
        uint64_t v6 = *(uint64_t **)(a1 + 3520);
        if (v6)
        {
          do
          {
            uint64_t v7 = *v6;
            if (*v6)
            {
              while (1)
              {
                if (((v5 + *(char *)(v7 + 2)) & 0x8000) != 0
                  || *(__int16 *)(a2 + 10) <= (__int16)(v5 + *(char *)(v7 + 2)))
                {
                  if (*(unsigned char *)(v7 + 1) != 2) {
                    break;
                  }
                  unsigned int v9 = 35;
                }
                else
                {
                  uint64_t v8 = (void *)(*(unsigned char *)v7
                                ? *(void *)(a2 + 3504) + 8 * *(unsigned __int8 *)(v7 + 1)
                                : a2 + 8 * *(unsigned __int8 *)(v7 + 1) + 16);
                  unsigned int v9 = *(unsigned __int8 *)(*v8 + (unsigned __int16)(v5 + *(char *)(v7 + 2)));
                }
                if (((*(unsigned __int8 *)(v7 + ((unint64_t)v9 >> 3) + 3) >> (v9 & 7)) & 1) == 0) {
                  break;
                }
                uint64_t v7 = *(void *)(v7 + 40);
                if (!v7) {
                  goto LABEL_16;
                }
              }
            }
            else
            {
LABEL_16:
              uint64_t v10 = v6[1];
              if (v10)
              {
                while (2)
                {
                  switch(*(_DWORD *)v10)
                  {
                    case 1:
                      int v11 = *(unsigned __int8 *)(v10 + 4) + v4 * *(unsigned __int16 *)(*(void *)a2 + 2966);
                      int v12 = (unsigned int *)(*(void *)(a2 + 3568) + 4 * v11);
                      __int16 v13 = (unsigned int *)(*(void *)(a2 + 3576) + 4 * v11);
                      if (v12) {
                        goto LABEL_28;
                      }
                      goto LABEL_49;
                    case 2:
                      __int16 v13 = 0;
                      uint64_t v14 = *(void *)(a2 + 3584);
                      goto LABEL_22;
                    case 3:
                      __int16 v13 = 0;
                      uint64_t v14 = *(void *)(a2 + 3592);
LABEL_22:
                      int v15 = *(unsigned __int16 *)(*(void *)a2 + 3360);
                      goto LABEL_27;
                    case 4:
                      *(unsigned char *)(*(void *)(a2 + 3600)
                               + *(unsigned __int8 *)(v10 + 4)
                               + *(unsigned __int16 *)(*(void *)a2 + 2966) * (uint64_t)v4) = *(_DWORD *)(v10 + 8);
                      goto LABEL_49;
                    case 5:
                      __int16 v13 = 0;
                      uint64_t v14 = *(void *)(a2 + 3568);
                      goto LABEL_26;
                    case 6:
                      __int16 v13 = 0;
                      uint64_t v14 = *(void *)(a2 + 3576);
LABEL_26:
                      int v15 = *(unsigned __int16 *)(*(void *)a2 + 2966);
LABEL_27:
                      int v12 = (unsigned int *)(v14 + 4 * (*(unsigned __int8 *)(v10 + 4) + v4 * v15));
                      if (!v12) {
                        goto LABEL_49;
                      }
LABEL_28:
                      unsigned int v16 = *(_DWORD *)(v10 + 8);
                      if (v16 == 10)
                      {
                        *v12 *= 5;
                        if (v13) {
                          *v13 *= 5;
                        }
                        unsigned int v16 = *(_DWORD *)(v10 + 8);
                      }
                      if (v16)
                      {
                        unsigned int v17 = *v12;
                        if (*v12 >= 0x80000000 / v16)
                        {
                          if (v17 % 0xA && (!(v16 % 0xA) || v17 <= v16))
                          {
                            *int v12 = v17 * (v16 / 0xA);
                            if (!v13) {
                              goto LABEL_49;
                            }
                            unsigned int v20 = *(_DWORD *)(v10 + 8) / 0xAu * *v13;
                          }
                          else
                          {
                            *int v12 = v17 / 0xA * v16;
                            if (!v13) {
                              goto LABEL_49;
                            }
                            unsigned int v20 = *v13 / 0xA * *(_DWORD *)(v10 + 8);
                          }
                          *__int16 v13 = v20;
                        }
                        else
                        {
                          *int v12 = v17 * v16 / 0xA;
                          if (v13) {
                            *__int16 v13 = *(_DWORD *)(v10 + 8) * *v13 / 0xA;
                          }
                        }
                      }
                      else
                      {
                        *int v12 = 0;
                        if (v13) {
                          *__int16 v13 = 0;
                        }
                      }
LABEL_49:
                      uint64_t v10 = *(void *)(v10 + 16);
                      if (!v10) {
                        break;
                      }
                      continue;
                    case 7:
                      int v18 = *(_DWORD *)(v10 + 8);
                      uint64_t v19 = *(void *)(a2 + 1696);
                      goto LABEL_40;
                    case 8:
                      int v18 = *(_DWORD *)(v10 + 8);
                      uint64_t v19 = *(void *)(a2 + 1704);
LABEL_40:
                      *(unsigned char *)(v19 + v5) = v18;
                      goto LABEL_49;
                    default:
                      return 2229280769;
                  }
                  break;
                }
              }
            }
            uint64_t v6 = (uint64_t *)v6[2];
          }
          while (v6);
          LOWORD(v3) = *(_WORD *)(a2 + 10);
        }
        uint64_t v2 = 0;
        int v4 = ++v5;
      }
      while ((__int16)v3 - 1 > v5);
    }
  }
  return v2;
}

void *usextract_removePromptColumns(uint64_t a1)
{
  uint64_t result = cstdlib_strstr((char *)(*(void *)a1 + 152), "bet4");
  int v3 = *(__int16 *)(a1 + 10);
  if (v3 >= 1)
  {
    int v4 = result;
    int v5 = 0;
    do
    {
      int v6 = (__int16)v3 - 1;
      if (v6 > (__int16)v5)
      {
        int v7 = (__int16)v5;
        int v8 = (__int16)v5;
        unsigned __int16 v9 = v5;
        do
        {
          int v10 = *(_DWORD *)(*(void *)(a1 + 3608) + 4 * v8 * *(unsigned __int16 *)(*(void *)a1 + 3578));
          if (v10 != -2) {
            break;
          }
          int v8 = (__int16)++v9;
        }
        while (v6 > (__int16)v9);
        if (v9 != (unsigned __int16)v5)
        {
          if (v5 >= v8)
          {
            __int16 v11 = 0;
          }
          else
          {
            __int16 v11 = 0;
            int v12 = (__int16 *)(*(void *)(a1 + 1800) + 2 * v5);
            uint64_t v13 = v8 - (uint64_t)v5;
            do
            {
              __int16 v14 = *v12++;
              v11 += v14;
              --v13;
            }
            while (v13);
          }
          size_t v15 = ((__int16)v3 - v8) & ~(((__int16)v3 - v8) >> 31);
          if (v4) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v10 == -2;
          }
          int v17 = !v16;
          if ((__int16)v5 < 1 || !v17) {
            goto LABEL_28;
          }
          uint64_t v18 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v18 + (v5 - 1)) != 35)
          {
            *(unsigned char *)(v18 + (unsigned __int16)v5) = 35;
            *(_WORD *)(*(void *)(a1 + 1800) + 2 * (unsigned __int16)v5) = 0;
            *(_WORD *)(*(void *)(a1 + 1784) + 2 * (unsigned __int16)v5) = 1;
            if (*(_WORD *)(*(void *)a1 + 3578)) {
              uint64_t result = memset((void *)(*(void *)(a1 + 3608)+ 4 * v5 * *(unsigned __int16 *)(*(void *)a1 + 3578)), 255, 4 * *(unsigned __int16 *)(*(void *)a1 + 3578));
            }
            LOWORD(v5) = v5 + 1;
            int v7 = (__int16)v5;
          }
          if (v4 && (__int16)v5 >= 1 && (uint64_t v19 = *(void *)(a1 + 32), *(unsigned char *)(v19 + (__int16)v9) != 35))
          {
            if ((unsigned __int16)v5 == v9)
            {
              uint64_t result = hlpMoveColumns((unsigned __int16 **)a1, (__int16)v9, (__int16)(v9 + 1), v15);
              uint64_t v19 = *(void *)(a1 + 32);
              ++v9;
            }
            *(unsigned char *)(v19 + (unsigned __int16)v5) = 35;
            *(_WORD *)(*(void *)(a1 + 1800) + 2 * (unsigned __int16)v5) = 0;
            *(_WORD *)(*(void *)(a1 + 1784) + 2 * (unsigned __int16)v5) = 1;
            if (*(_WORD *)(*(void *)a1 + 3578)) {
              uint64_t result = memset((void *)(*(void *)(a1 + 3608)+ 4 * v7 * *(unsigned __int16 *)(*(void *)a1 + 3578)), 255, 4 * *(unsigned __int16 *)(*(void *)a1 + 3578));
            }
            LOWORD(v5) = v5 + 1;
          }
          else
          {
LABEL_28:
            int v7 = v8;
          }
          *(_WORD *)(*(void *)(a1 + 1800) + 2 * v7) += v11;
          if ((__int16)v5 < (__int16)v9) {
            uint64_t result = hlpMoveColumns((unsigned __int16 **)a1, (__int16)v9, (__int16)v5, v15);
          }
        }
      }
      int v5 = (__int16)(v5 + 1);
      int v3 = *(__int16 *)(a1 + 10);
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t usextract_logAllFeatures(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  v24[0] = 0;
  __dst[0] = 0;
  uint64_t result = (uint64_t)LH_itoa(0x4Eu, v24, 0xAu);
  uint64_t v7 = 0;
  int v8 = 0;
  do
  {
    uint64_t v9 = 0;
    int v10 = *((__int16 *)a3 + 5);
    if (v10 >= 1) {
      unsigned int v11 = *((__int16 *)a3 + 5);
    }
    else {
      unsigned int v11 = 0;
    }
    uint64_t v12 = 99;
    if (v7 - 2 >= 4 && (_BYTE)v7)
    {
      uint64_t v13 = *a3;
      int v14 = *(unsigned __int8 *)(*a3 + v7 + 2748);
      if (v7 == 1)
      {
        int v8 = "application/x-realspeak-marker-counts;version=4.0";
LABEL_27:
        switch(v14)
        {
          case 0:
            goto LABEL_28;
          case 1:
            goto LABEL_30;
          case 2:
            if (!v9) {
              uint64_t v9 = a3[v7 + 220];
            }
            uint64_t v22 = *(void *)(a1 + 32);
            unsigned int v23 = 2 * v11;
            goto LABEL_37;
          case 4:
            uint64_t v22 = *(void *)(a1 + 32);
            unsigned int v23 = 4 * v11;
LABEL_37:
            uint64_t result = log_OutBinary(v22, a2, v12, 0, (uint64_t)v24, (uint64_t)v8, v9, v23, 0);
            break;
          default:
            goto LABEL_38;
        }
        goto LABEL_38;
      }
      uint64_t v9 = 0;
      if (*(unsigned char *)(*a3 + v7 + 2748))
      {
        switch((__int16)v7)
        {
          case '.':
            size_t v15 = a3 + 445;
            goto LABEL_13;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_14;
          case '3':
            BOOL v16 = 0;
            uint64_t v18 = (unsigned __int16 *)(v13 + 2966);
            int v14 = 4;
            uint64_t v19 = a3 + 446;
            goto LABEL_22;
          case '4':
            BOOL v16 = 0;
            uint64_t v18 = (unsigned __int16 *)(v13 + 2966);
            int v14 = 4;
            uint64_t v19 = a3 + 447;
            goto LABEL_22;
          case '5':
            BOOL v16 = 0;
            uint64_t v18 = (unsigned __int16 *)(v13 + 3360);
            int v14 = 4;
            uint64_t v19 = a3 + 448;
            goto LABEL_22;
          case '6':
            BOOL v16 = 0;
            uint64_t v18 = (unsigned __int16 *)(v13 + 3360);
            int v14 = 4;
            uint64_t v19 = a3 + 449;
            goto LABEL_22;
          case '8':
            uint64_t v18 = (unsigned __int16 *)(v13 + 2966);
            BOOL v16 = 1;
            int v14 = 1;
            uint64_t v19 = a3 + 450;
LABEL_22:
            uint64_t v9 = *v19;
            unsigned int v11 = *v18 * v10;
            int v17 = "application/x-realspeak-u32-feat-";
            break;
          default:
            size_t v15 = a3 + 444;
            if ((unsigned __int16)v7 == 24) {
LABEL_13:
            }
              uint64_t v9 = *v15;
LABEL_14:
            BOOL v16 = v14 == 1;
            int v17 = "application/x-realspeak-u16-feat-";
            if (v14 != 2) {
              int v17 = "application/x-realspeak-u32-feat-";
            }
            break;
        }
        if (v16) {
          unsigned int v20 = "application/x-realspeak-u8-feat-";
        }
        else {
          unsigned int v20 = v17;
        }
        int v8 = __dst;
        cstdlib_strcpy(__dst, v20);
        size_t v21 = cstdlib_strlen(__dst);
        uint64_t result = (uint64_t)LH_itoa(v7, &__dst[v21], 0xAu);
        uint64_t v12 = 100;
        goto LABEL_27;
      }
    }
LABEL_28:
    if (v7 == 1 && a3[3])
    {
LABEL_30:
      if (!v9) {
        uint64_t v9 = a3[v7 + 2];
      }
      uint64_t result = log_OutBinary(*(void *)(a1 + 32), a2, v12, 0, (uint64_t)v24, (uint64_t)v8, v9, v11, 0);
    }
LABEL_38:
    ++v7;
  }
  while (v7 != 218);
  return result;
}

uint64_t usextract_allocateLayers(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v8 = 0;
  int v9 = 0;
  do
  {
    if (*(unsigned char *)(*a3 + 2748 + v8) == 1) {
      ++v9;
    }
    ++v8;
  }
  while (v8 != 218);
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), v9 * a4, 1);
  if (!v10) {
    goto LABEL_45;
  }
  uint64_t v15 = v10;
  for (uint64_t i = 0; i != 218; ++i)
  {
    uint64_t v17 = *a3;
    int v18 = *(unsigned __int8 *)(*a3 + i + 2748);
    if (*(unsigned char *)(*a3 + i + 2748))
    {
      if (v18 == 2)
      {
        uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), a4, 2);
        a3[i + 220] = v19;
        if (!v19) {
          goto LABEL_45;
        }
      }
      else if (v18 == 1)
      {
        a3[i + 2] = v15;
        v15 += a4;
      }
      else
      {
        switch((int)i)
        {
          case '.':
            uint64_t v20 = heap_Calloc(*(void **)(a1 + 8), a4, 9);
            a3[445] = v20;
            if (!v20) {
              goto LABEL_45;
            }
            continue;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_20;
          case '3':
            int v22 = *(unsigned __int16 *)(v17 + 2966);
            if (v22)
            {
              uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), v22 * a4, 4);
              a3[446] = v23;
              if (!v23) {
                goto LABEL_45;
              }
            }
            continue;
          case '4':
            int v24 = *(unsigned __int16 *)(v17 + 2966);
            if (v24)
            {
              uint64_t v25 = heap_Calloc(*(void **)(a1 + 8), v24 * a4, 4);
              a3[447] = v25;
              if (!v25) {
                goto LABEL_45;
              }
            }
            continue;
          case '5':
            int v26 = *(unsigned __int16 *)(v17 + 3360);
            if (v26)
            {
              uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), v26 * a4, 4);
              a3[448] = v27;
              if (!v27) {
                goto LABEL_45;
              }
            }
            continue;
          case '6':
            int v28 = *(unsigned __int16 *)(v17 + 3360);
            if (v28)
            {
              uint64_t v29 = heap_Calloc(*(void **)(a1 + 8), v28 * a4, 4);
              a3[449] = v29;
              if (!v29) {
                goto LABEL_45;
              }
            }
            continue;
          case '8':
            int v30 = *(unsigned __int16 *)(v17 + 2966);
            if (v30)
            {
              uint64_t v31 = heap_Calloc(*(void **)(a1 + 8), v30 * a4, 1);
              a3[450] = v31;
              if (!v31) {
                goto LABEL_45;
              }
            }
            continue;
          default:
            if (i == 24)
            {
              uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), a4, 8);
              a3[444] = v21;
              if (!v21) {
                goto LABEL_45;
              }
            }
            else
            {
LABEL_20:
              if (a2) {
                log_OutPublic(*(void *)(a1 + 32), a2, 55007, (uint64_t)"%s%u", v11, v12, v13, v14, "feature");
              }
            }
            break;
        }
      }
    }
  }
  uint64_t GenericFeatureLayers = usextract_allocateGenericFeatureLayers(a1, a2, a3, a4);
  if ((GenericFeatureLayers & 0x80000000) != 0) {
    return GenericFeatureLayers;
  }
  unsigned int v37 = *(unsigned __int16 *)(*a3 + 3578);
  if (v37 >= 4)
  {
    log_OutPublic(*(void *)(a1 + 32), a2, 55000, (uint64_t)"Invalid number of states per phoneme", v33, v34, v35, v36, "%s%u");
    return 2229280783;
  }
  char v39 = (void *)heap_Calloc(*(void **)(a1 + 8), v37 * a4, 4);
  a3[451] = v39;
  if (v39)
  {
    if (*(unsigned __int16 *)(*a3 + 3578) * a4) {
      memset(v39, 255, 4 * *(unsigned __int16 *)(*a3 + 3578) * a4);
    }
    return 0;
  }
  else
  {
LABEL_45:
    uint64_t v38 = 2229280778;
    if (a2) {
      log_OutPublic(*(void *)(a1 + 32), a2, 55000, 0, v11, v12, v13, v14, v41);
    }
  }
  return v38;
}

uint64_t usextract_allocateGenericFeatureLayers(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  int v5 = *(void **)(*a3 + 3336);
  if (!v5 || !*v5)
  {
    uint64_t v19 = 0;
    a3[438] = 0;
    return v19;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v5 + 1;
  while (v10[v9++])
    ;
  uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), v9, 8);
  a3[438] = v12;
  if (v12)
  {
    if (!v9) {
      return 0;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 8 * v9;
    while (1)
    {
      *(void *)(a3[438] + v17) = heap_Calloc(*(void **)(a1 + 8), a4, 1);
      if (!*(void *)(a3[438] + v17)) {
        break;
      }
      v17 += 8;
      if (v18 == v17) {
        return 0;
      }
    }
  }
  uint64_t v19 = 2229280778;
  if (a2) {
    log_OutPublic(*(void *)(a1 + 32), a2, 55000, 0, v13, v14, v15, v16, v21);
  }
  return v19;
}

uint64_t usextract_freeLayers(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v11 = 0;
  int v12 = 1;
  do
  {
    int v13 = *(unsigned __int8 *)(*a3 + v11 + 2748);
    if (*(unsigned char *)(*a3 + v11 + 2748))
    {
      if (v13 == 2)
      {
        a2 = a3[v11 + 220];
        if (a2) {
LABEL_10:
        }
          heap_Free(*(void **)(a1 + 8), a2);
      }
      else if (v13 == 1)
      {
        if (v12)
        {
          a2 = a3[v11 + 2];
          if (a2) {
            heap_Free(*(void **)(a1 + 8), a2);
          }
          int v12 = 0;
        }
      }
      else
      {
        switch((int)v11)
        {
          case '.':
            a2 = a3[445];
            if (a2) {
              goto LABEL_10;
            }
            break;
          case '/':
          case '0':
          case '1':
          case '2':
          case '7':
            goto LABEL_19;
          case '3':
            a2 = a3[446];
            if (a2) {
              goto LABEL_10;
            }
            break;
          case '4':
            a2 = a3[447];
            if (a2) {
              goto LABEL_10;
            }
            break;
          case '5':
            a2 = a3[448];
            if (a2) {
              goto LABEL_10;
            }
            break;
          case '6':
            a2 = a3[449];
            if (a2) {
              goto LABEL_10;
            }
            break;
          case '8':
            a2 = a3[450];
            if (a2) {
              goto LABEL_10;
            }
            break;
          default:
            if (v11 == 24)
            {
              a2 = a3[444];
              if (a2) {
                goto LABEL_10;
              }
            }
            else
            {
LABEL_19:
              if (v9) {
                log_OutPublic(*(void *)(a1 + 32), v9, 55010, (uint64_t)"%s%u", a5, a6, a7, a8, "feature");
              }
            }
            break;
        }
      }
    }
    ++v11;
  }
  while (v11 != 218);
  usextract_freeGenericFeatureLayers((void *)a1, a2, a3);
  uint64_t v14 = a3[451];
  if (v14) {
    heap_Free(*(void **)(a1 + 8), v14);
  }
  cstdlib_memset(a3, 0, 8uLL);
  return 0;
}

void *usextract_freeGenericFeatureLayers(void *result, uint64_t a2, void *a3)
{
  int v3 = *(void **)(*a3 + 3336);
  if (v3)
  {
    uint64_t v5 = a3[438];
    if (v5)
    {
      int v6 = result;
      if (!*v3) {
        goto LABEL_9;
      }
      uint64_t v7 = 0;
      uint64_t v8 = v3 + 1;
      do
      {
        uint64_t v9 = *(void *)(a3[438] + 8 * v7);
        if (v9) {
          uint64_t result = heap_Free((void *)v6[1], v9);
        }
      }
      while (v8[v7++]);
      uint64_t v5 = a3[438];
      if (v5) {
LABEL_9:
      }
        uint64_t result = heap_Free((void *)v6[1], v5);
      a3[438] = 0;
    }
  }
  return result;
}

uint64_t usextract_getIndex(const char **a1, char *__s1, unint64_t a3)
{
  if (a3 <= (unint64_t)__s1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  size_t v7 = (a3 - __s1);
  while (cstdlib_strncmp(__s1, v5, v7) || cstdlib_strlen(a1[v6]) != v7)
  {
    uint64_t v5 = a1[++v6];
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return v6;
}

BOOL usextract_matchPhon(uint64_t a1, unsigned __int8 *a2, int a3, unsigned __int8 *a4, int a5)
{
  BOOL result = 0;
  uint64_t v14 = a4;
  uint64_t v15 = a2;
  if (a2 && a4)
  {
    skipUnvalidPhonemes(a1, &v15);
    if (a3)
    {
      do
      {
        if (!*v15) {
          break;
        }
        --a3;
        ++v15;
        skipUnvalidPhonemes(a1, &v15);
      }
      while ((_BYTE)a3);
    }
    uint64_t v9 = v15;
    int v10 = *v15;
    if (*v15)
    {
      skipUnvalidPhonemes(a1, &v14);
      if (a5)
      {
        do
        {
          if (!*v14) {
            break;
          }
          --a5;
          ++v14;
          skipUnvalidPhonemes(a1, &v14);
        }
        while ((_BYTE)a5);
      }
      if (*v14)
      {
        uint64_t v11 = v14;
        BOOL v12 = v10 != *v14;
        if (v10 == *v14)
        {
          while (1)
          {
            uint64_t v15 = v9 + 1;
            skipUnvalidPhonemes(a1, &v15);
            uint64_t v14 = v11 + 1;
            skipUnvalidPhonemes(a1, &v14);
            uint64_t v9 = v15;
            if (!*v15) {
              break;
            }
            uint64_t v11 = v14;
            if (*v14) {
              BOOL v13 = *v15 == *v14;
            }
            else {
              BOOL v13 = 0;
            }
            if (!v13) {
              goto LABEL_17;
            }
          }
LABEL_18:
          if (usextract_nrOfValidPhonemes(a1, v9) <= 1) {
            return usextract_nrOfValidPhonemes(a1, v14) < 2;
          }
          return 0;
        }
LABEL_17:
        if (!v12) {
          goto LABEL_18;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t usextract_getCurFineSyl(uint64_t result, int a2)
{
  if (result == a2) {
    return 4;
  }
  if (a2 - 1 == result) {
    return 6;
  }
  if (result >= 2)
  {
    if ((19662 * a2) >> 16 <= result) {
      unsigned int v2 = 5;
    }
    else {
      unsigned int v2 = 3;
    }
    if ((int)(a2 - ((19662 * a2) >> 16)) >= (int)result) {
      return v2;
    }
    else {
      return 2;
    }
  }
  return result;
}

void *hlpMoveColumns(unsigned __int16 **a1, int a2, int a3, size_t __len)
{
  uint64_t v8 = 0;
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  size_t v11 = 2 * __len;
  do
  {
    BOOL v12 = a1[v8 + 4];
    if (v12) {
      cstdlib_memmove((char *)v12 + v9, (char *)v12 + v10, __len);
    }
    BOOL v13 = a1[v8 + 222];
    if (v13) {
      cstdlib_memmove(&v13[v9], &v13[v10], v11);
    }
    ++v8;
  }
  while (v8 != 216);
  uint64_t v14 = a1[444];
  if (v14) {
    cstdlib_memmove(&v14[4 * v9], &v14[4 * v10], 8 * __len);
  }
  uint64_t v15 = a1[445];
  if (v15) {
    cstdlib_memmove((char *)v15 + 9 * v9, (char *)v15 + 9 * v10, 9 * __len);
  }
  uint64_t v16 = *a1;
  size_t v17 = 4 * __len;
  if ((*a1)[1483])
  {
    cstdlib_memmove(&a1[446][2 * (*a1)[1483] * a3], &a1[446][2 * (*a1)[1483] * a2], v17 * (*a1)[1483]);
    cstdlib_memmove(&a1[447][2 * (*a1)[1483] * a3], &a1[447][2 * (*a1)[1483] * a2], v17 * (*a1)[1483]);
    uint64_t v16 = *a1;
  }
  if (v16[1680])
  {
    cstdlib_memmove(&a1[448][2 * v16[1680] * a3], &a1[448][2 * v16[1680] * a2], v17 * v16[1680]);
    cstdlib_memmove(&a1[449][2 * (*a1)[1680] * a3], &a1[449][2 * (*a1)[1680] * a2], v17 * (*a1)[1680]);
    uint64_t v16 = *a1;
  }
  if (v16[1483])
  {
    cstdlib_memmove((char *)a1[450] + v16[1483] * (uint64_t)(int)v9, (char *)a1[450] + v16[1483] * (uint64_t)(int)v10, v16[1483] * __len);
    uint64_t v16 = *a1;
  }
  BOOL result = cstdlib_memmove(&a1[451][2 * a3 * v16[1789]], &a1[451][2 * a2 * v16[1789]], 4 * __len * v16[1789]);
  if (a1[438])
  {
    uint64_t v19 = *a1;
    if (**((void **)*a1 + 417))
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = *(void *)&a1[438][v20];
        if (v21)
        {
          BOOL result = cstdlib_memmove((void *)(v21 + v9), (const void *)(v21 + v10), __len);
          uint64_t v19 = *a1;
        }
        uint64_t v22 = *(void *)(*((void *)v19 + 417) + v20 * 2 + 8);
        v20 += 4;
      }
      while (v22);
    }
  }
  *((_WORD *)a1 + 5) += a3 - a2;
  return result;
}

uint64_t usextract_setMNXfeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  int v6 = *(__int16 *)(a3 + 10);
  if (v6 >= 1)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a3 + 1024);
      if (v8)
      {
        if ((uint64_t)(v7 + 2) >= (__int16)v6) {
          char v9 = 45;
        }
        else {
          char v9 = *(unsigned char *)(*(void *)(a3 + 32) + v7 + 2);
        }
        *(unsigned char *)(v8 + v7) = v9;
      }
      uint64_t v10 = *(void *)(a3 + 1008);
      if (v10 && *(void *)(a3 + 1016))
      {
        if ((uint64_t)(v7 + 1) >= *(__int16 *)(a3 + 10))
        {
          *(unsigned char *)(v10 + v7) = 45;
          char v11 = 6;
        }
        else
        {
          *(unsigned char *)(v10 + v7) = *(unsigned char *)(*(void *)(a3 + 32) + v7 + 1);
          char v11 = *(unsigned char *)(*(void *)(a3 + 576) + v7 + 1);
        }
        *(unsigned char *)(*(void *)(a3 + 1016) + v7) = v11;
      }
      uint64_t v12 = *(void *)(a3 + 984);
      if (v12)
      {
        if (v7 >= 2) {
          char v13 = *(unsigned char *)(*(void *)(a3 + 32) + (v7 - 2));
        }
        else {
          char v13 = 45;
        }
        *(unsigned char *)(v12 + v7) = v13;
      }
      uint64_t v14 = *(unsigned char **)(a3 + 1000);
      if (v14 && *(void *)(a3 + 992))
      {
        if (v7)
        {
          v14[v7] = *(unsigned char *)(*(void *)(a3 + 32) + (v7 - 1));
          char v15 = *(unsigned char *)(*(void *)(a3 + 568) + (v7 - 1));
        }
        else
        {
          unsigned char *v14 = 45;
          char v15 = 6;
        }
        *(unsigned char *)(*(void *)(a3 + 992) + v7) = v15;
      }
      ++v7;
      LOWORD(v6) = *(_WORD *)(a3 + 10);
    }
    while ((uint64_t)v7 < (__int16)v6);
  }
  if (*(void *)(a3 + 1056) && *(void *)(a3 + 1064) && *(void *)(a3 + 1072) && (__int16)v6 >= 1)
  {
    uint64_t v16 = 0;
    long long v17 = 0uLL;
    do
    {
      uint64_t v18 = *(void *)(a3 + 32);
      if (*(unsigned char *)(v18 + v16) == 35)
      {
        *(unsigned char *)(*(void *)(a3 + 1056) + v16) = 35;
        *(unsigned char *)(*(void *)(a3 + 1064) + v16) = 35;
        *(unsigned char *)(*(void *)(a3 + 1072) + v16) = 35;
      }
      else if (*(unsigned char *)(*(void *)(a3 + 80) + v16) == 1)
      {
        uint64_t v19 = 0;
        long long v89 = v17;
        long long v90 = v17;
        long long v87 = v17;
        long long v88 = v17;
        long long v85 = v17;
        long long v86 = v17;
        *(_OWORD *)__int16 __s = v17;
        long long v84 = v17;
        *(unsigned char *)(*(void *)(a3 + 1056) + v16) = *(unsigned char *)(v18 + v16);
        uint64_t v20 = *(void *)(a3 + 72);
        uint64_t v21 = *(void *)(a3 + 32);
        LOWORD(v22) = v16;
        while (1)
        {
          uint64_t v22 = (__int16)v22;
          char v23 = *(unsigned char *)(v21 + (__int16)v22);
          if (*(unsigned char *)(v20 + (__int16)v22) == 1) {
            break;
          }
          __s[v19] = v23;
          LOWORD(v22) = v22 + 1;
          if (++v19 == 128) {
            goto LABEL_49;
          }
        }
        __s[v19] = v23;
        *(unsigned char *)(*(void *)(a3 + 1072) + v16) = *(unsigned char *)(v21 + v22);
        *(unsigned char *)(*(void *)(a3 + 1064) + v16) = 48;
        if (cstdlib_strlen((const char *)(*(void *)a3 + 28272)))
        {
          uint64_t v27 = 0;
          while (!cstdlib_strchr(__s, *(unsigned __int8 *)(*(void *)a3 + v27 + 28272)))
          {
            if (++v27 >= cstdlib_strlen((const char *)(*(void *)a3 + 28272))) {
              goto LABEL_45;
            }
          }
          *(unsigned char *)(*(void *)(a3 + 1064) + v16) = *(unsigned char *)(*(void *)a3 + v27 + 28272);
        }
LABEL_45:
        if (*(unsigned char *)(*(void *)(a3 + 1064) + v16) == 48)
        {
          log_OutText(*(void *)(a1 + 32), a2, 3, 0, (uint64_t)"Warning: the syllable: %s doesn't have NUCLEUS, the first phonme %c is set to be the default", v24, v25, v26, (uint64_t)__s);
          *(unsigned char *)(*(void *)(a3 + 1064) + v16) = __s[0];
        }
        long long v17 = 0uLL;
      }
      else
      {
        *(unsigned char *)(*(void *)(a3 + 1056) + v16) = *(unsigned char *)(*(void *)(a3 + 1056) + v16 - 1);
        *(unsigned char *)(*(void *)(a3 + 1064) + v16) = *(unsigned char *)(*(void *)(a3 + 1064) + v16 - 1);
        *(unsigned char *)(*(void *)(a3 + 1072) + v16) = *(unsigned char *)(*(void *)(a3 + 1072) + v16 - 1);
      }
      ++v16;
    }
    while (v16 < *(__int16 *)(a3 + 10));
  }
LABEL_49:
  if (*(void *)(a3 + 1032)
    && *(void *)(a3 + 1048)
    && *(void *)(a3 + 1040)
    && *(void *)(a3 + 1272)
    && *(void *)(a3 + 1264)
    && *(void *)(a3 + 80)
    && *(__int16 *)(a3 + 10) >= 1)
  {
    unint64_t v28 = 0;
    while (v28)
    {
      uint64_t v29 = (v28 - 1);
      if (*(unsigned char *)(*(void *)(a3 + 80) + v28) == 1)
      {
        *(unsigned char *)(*(void *)(a3 + 1032) + v28) = *(unsigned char *)(*(void *)(a3 + 1056) + v29);
        *(unsigned char *)(*(void *)(a3 + 1048) + v28) = *(unsigned char *)(*(void *)(a3 + 1072) + v29);
        *(unsigned char *)(*(void *)(a3 + 1040) + v28) = *(unsigned char *)(*(void *)(a3 + 1064) + v29);
        uint64_t v30 = *(void *)(a3 + 88);
        uint64_t v31 = *(void *)(a3 + 1272);
      }
      else
      {
        *(unsigned char *)(*(void *)(a3 + 1032) + v28) = *(unsigned char *)(*(void *)(a3 + 1032) + v29);
        *(unsigned char *)(*(void *)(a3 + 1048) + v28) = *(unsigned char *)(*(void *)(a3 + 1048) + v29);
        *(unsigned char *)(*(void *)(a3 + 1040) + v28) = *(unsigned char *)(*(void *)(a3 + 1040) + v29);
        uint64_t v31 = *(void *)(a3 + 1272);
        uint64_t v30 = v31;
      }
      *(unsigned char *)(v31 + v28) = *(unsigned char *)(v30 + v29);
      if (v28 <= 1) {
        goto LABEL_63;
      }
      if (*(unsigned char *)(*(void *)(a3 + 80) + v28) != 1)
      {
        uint64_t v33 = *(void *)(a3 + 1264);
        char v32 = *(unsigned char *)(v33 + v28 - 1);
        goto LABEL_65;
      }
      char v32 = *(unsigned char *)(*(void *)(a3 + 1272) + v28 - 1);
LABEL_64:
      uint64_t v33 = *(void *)(a3 + 1264);
LABEL_65:
      *(unsigned char *)(v33 + v28++) = v32;
      if ((uint64_t)v28 >= *(__int16 *)(a3 + 10)) {
        goto LABEL_70;
      }
    }
    **(unsigned char **)(a3 + 1032) = 45;
    **(unsigned char **)(a3 + 1048) = 45;
    **(unsigned char **)(a3 + 1040) = 45;
    **(unsigned char **)(a3 + 1272) = 0;
LABEL_63:
    char v32 = 0;
    goto LABEL_64;
  }
LABEL_70:
  if (*(void *)(a3 + 1080)
    && *(void *)(a3 + 1096)
    && *(void *)(a3 + 1088)
    && *(void *)(a3 + 1280)
    && *(void *)(a3 + 1288)
    && *(void *)(a3 + 80)
    && ((*(_WORD *)(a3 + 10) - 1) & 0x8000) == 0)
  {
    uint64_t v34 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 1);
    while ((int)v34 + 1 < *(__int16 *)(a3 + 10))
    {
      uint64_t v35 = (v34 + 1);
      if (*(unsigned char *)(*(void *)(a3 + 72) + v34) == 1)
      {
        *(unsigned char *)(*(void *)(a3 + 1080) + v34) = *(unsigned char *)(*(void *)(a3 + 1056) + v35);
        *(unsigned char *)(*(void *)(a3 + 1096) + v34) = *(unsigned char *)(*(void *)(a3 + 1072) + v35);
        *(unsigned char *)(*(void *)(a3 + 1088) + v34) = *(unsigned char *)(*(void *)(a3 + 1064) + v35);
        char v36 = *(unsigned char *)(*(void *)(a3 + 88) + v35);
LABEL_82:
        uint64_t v37 = *(void *)(a3 + 1280);
        goto LABEL_84;
      }
      *(unsigned char *)(*(void *)(a3 + 1080) + v34) = *(unsigned char *)(*(void *)(a3 + 1080) + v35);
      *(unsigned char *)(*(void *)(a3 + 1096) + v34) = *(unsigned char *)(*(void *)(a3 + 1096) + v35);
      *(unsigned char *)(*(void *)(a3 + 1088) + v34) = *(unsigned char *)(*(void *)(a3 + 1088) + v35);
      uint64_t v37 = *(void *)(a3 + 1280);
      char v36 = *(unsigned char *)(v37 + v35);
LABEL_84:
      *(unsigned char *)(v37 + v34) = v36;
      if ((int)v34 + 2 >= *(__int16 *)(a3 + 10))
      {
        char v39 = 0;
      }
      else
      {
        uint64_t v38 = (v34 + 1);
        if (*(unsigned char *)(*(void *)(a3 + 72) + v34) != 1)
        {
          uint64_t v40 = *(void *)(a3 + 1288);
          char v39 = *(unsigned char *)(v40 + v38);
          goto LABEL_90;
        }
        char v39 = *(unsigned char *)(*(void *)(a3 + 1280) + v38);
      }
      uint64_t v40 = *(void *)(a3 + 1288);
LABEL_90:
      *(unsigned char *)(v40 + v34) = v39;
      BOOL v41 = v34-- <= 0;
      if (v41) {
        goto LABEL_92;
      }
    }
    char v36 = 0;
    *(unsigned char *)(*(void *)(a3 + 1080) + v34) = 45;
    *(unsigned char *)(*(void *)(a3 + 1096) + v34) = 45;
    *(unsigned char *)(*(void *)(a3 + 1088) + v34) = 45;
    goto LABEL_82;
  }
LABEL_92:
  if (*(void *)(a3 + 1112)
    && *(void *)(a3 + 1128)
    && *(void *)(a3 + 1160)
    && *(void *)(a3 + 1176)
    && *(void *)(a3 + 1200)
    && *(void *)(a3 + 1224)
    && *(__int16 *)(a3 + 10) >= 1)
  {
    uint64_t v42 = 0;
    char v43 = 1;
    int v44 = 1;
    char v45 = 1;
    char v46 = 1;
    int v47 = 1;
    int v48 = 1;
    do
    {
      int v49 = *(unsigned __int8 *)(*(void *)(a3 + 576) + v42);
      *(unsigned char *)(*(void *)(a3 + 1104) + v42) = v48;
      *(unsigned char *)(*(void *)(a3 + 1112) + v42) = v48;
      *(unsigned char *)(*(void *)(a3 + 1128) + v42) = v47;
      *(unsigned char *)(*(void *)(a3 + 1144) + v42) = v46;
      *(unsigned char *)(*(void *)(a3 + 1160) + v42) = v46;
      *(unsigned char *)(*(void *)(a3 + 1168) + v42) = v45;
      *(unsigned char *)(*(void *)(a3 + 1176) + v42) = v45;
      *(unsigned char *)(*(void *)(a3 + 1192) + v42) = v44;
      *(unsigned char *)(*(void *)(a3 + 1200) + v42) = v44;
      *(unsigned char *)(*(void *)(a3 + 1216) + v42) = v43;
      *(unsigned char *)(*(void *)(a3 + 1224) + v42) = v43;
      if (v49 && v49 != 6)
      {
        ++v46;
        if (v49 == 1)
        {
          ++v48;
          ++v47;
        }
        else if (v49 == 5)
        {
          int v48 = 1;
          int v47 = 1;
          char v46 = 1;
          char v45 = 1;
          int v44 = 1;
          char v43 = 1;
        }
        else
        {
          ++v43;
          if (v49 == 3)
          {
            ++v47;
            ++v44;
            int v48 = 1;
            char v45 = 1;
          }
          else if (v49 == 2)
          {
            ++v48;
            ++v47;
            ++v45;
            ++v44;
          }
          else
          {
            int v48 = 1;
            int v47 = 1;
            char v45 = 1;
            int v44 = 1;
          }
        }
      }
      ++v42;
    }
    while (v42 < *(__int16 *)(a3 + 10));
  }
  if (*(void *)(a3 + 1104)
    && *(void *)(a3 + 1144)
    && *(void *)(a3 + 1168)
    && *(void *)(a3 + 1192)
    && *(void *)(a3 + 1216)
    && *(void *)(a3 + 1120)
    && *(void *)(a3 + 1136)
    && *(void *)(a3 + 1152)
    && *(void *)(a3 + 1184)
    && *(void *)(a3 + 1208)
    && *(void *)(a3 + 1232)
    && ((*(_WORD *)(a3 + 10) - 1) & 0x8000) == 0)
  {
    uint64_t v50 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 1);
    char v51 = 1;
    char v52 = 1;
    char v53 = 1;
    char v54 = 1;
    char v55 = 1;
    do
    {
      unsigned int v56 = *(unsigned __int8 *)(*(void *)(a3 + 576) + v50);
      if (v56 > 6 || ((1 << v56) & 0x47) == 0)
      {
        char v55 = *(unsigned char *)(*(void *)(a3 + 1104) + v50);
        char v53 = *(unsigned char *)(*(void *)(a3 + 1168) + v50);
        if (v56 != 3)
        {
          uint64_t v58 = *(void *)(a3 + 1192);
          if (v58) {
            char v52 = *(unsigned char *)(v58 + v50);
          }
          if (v56 != 4)
          {
            uint64_t v59 = *(void *)(a3 + 1144);
            if (v59) {
              char v54 = *(unsigned char *)(v59 + v50);
            }
            uint64_t v60 = *(void *)(a3 + 1216);
            if (v60) {
              char v51 = *(unsigned char *)(v60 + v50);
            }
          }
        }
      }
      *(unsigned char *)(*(void *)(a3 + 1104) + v50) = v55;
      *(unsigned char *)(*(void *)(a3 + 1144) + v50) = v54;
      *(unsigned char *)(*(void *)(a3 + 1168) + v50) = v53;
      *(unsigned char *)(*(void *)(a3 + 1192) + v50) = v52;
      *(unsigned char *)(*(void *)(a3 + 1216) + v50) = v51;
      *(unsigned char *)(*(void *)(a3 + 1120) + v50) = *(unsigned char *)(*(void *)(a3 + 1104) + v50)
                                               - *(unsigned char *)(*(void *)(a3 + 1112) + v50)
                                               + 1;
      *(unsigned char *)(*(void *)(a3 + 1136) + v50) = *(unsigned char *)(*(void *)(a3 + 128) + v50)
                                               - *(unsigned char *)(*(void *)(a3 + 1128) + v50)
                                               + 1;
      *(unsigned char *)(*(void *)(a3 + 1152) + v50) = *(unsigned char *)(*(void *)(a3 + 1144) + v50)
                                               - *(unsigned char *)(*(void *)(a3 + 1160) + v50)
                                               + 1;
      *(unsigned char *)(*(void *)(a3 + 1184) + v50) = *(unsigned char *)(*(void *)(a3 + 1168) + v50)
                                               - *(unsigned char *)(*(void *)(a3 + 1176) + v50)
                                               + 1;
      *(unsigned char *)(*(void *)(a3 + 1208) + v50) = *(unsigned char *)(*(void *)(a3 + 1192) + v50)
                                               - *(unsigned char *)(*(void *)(a3 + 1200) + v50)
                                               + 1;
      *(unsigned char *)(*(void *)(a3 + 1232) + v50) = *(unsigned char *)(*(void *)(a3 + 1216) + v50)
                                               - *(unsigned char *)(*(void *)(a3 + 1224) + v50)
                                               + 1;
      BOOL v41 = v50-- <= 0;
    }
    while (!v41);
  }
  if (!*(void *)(a3 + 264)
    || !*(void *)(a3 + 1256)
    || !*(void *)(a3 + 1248)
    || ((*(_WORD *)(a3 + 10) - 1) & 0x8000) != 0)
  {
    goto LABEL_169;
  }
  __int16 v61 = (const char *)(*(void *)a3 + 2400);
  uint64_t v62 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 1);
  do
  {
    uint64_t v63 = *(void *)(a3 + 32);
    if (*(unsigned char *)(v63 + v62) == 35)
    {
      char v64 = 0;
LABEL_152:
      uint64_t v66 = *(void *)(a3 + 1256);
      goto LABEL_153;
    }
    uint64_t v65 = (v62 + 1);
    if (*(unsigned char *)(v63 + v65) == 35)
    {
      char v64 = cstdlib_strlen(v61) + 1;
      goto LABEL_152;
    }
    if (*(unsigned char *)(*(void *)(a3 + 112) + v62))
    {
      char v64 = *(unsigned char *)(*(void *)(a3 + 616) + v65);
      goto LABEL_152;
    }
    uint64_t v66 = *(void *)(a3 + 1256);
    char v64 = *(unsigned char *)(v66 + v65);
LABEL_153:
    *(unsigned char *)(v66 + v62) = v64;
    BOOL v41 = v62-- <= 0;
  }
  while (!v41);
  if (*(__int16 *)(a3 + 10) >= 1)
  {
    for (uint64_t i = 0; i < *(__int16 *)(a3 + 10); ++i)
    {
      uint64_t v68 = *(void *)(a3 + 32);
      if (*(unsigned char *)(v68 + i) == 35)
      {
        char v69 = 0;
      }
      else if (*(unsigned char *)(v68 + i - 1) == 35)
      {
        char v69 = cstdlib_strlen(v61) + 1;
      }
      else
      {
        if (!*(unsigned char *)(*(void *)(a3 + 112) + i - 1))
        {
          uint64_t v70 = *(void *)(a3 + 1248);
          char v69 = *(unsigned char *)(v70 + i - 1);
          goto LABEL_166;
        }
        char v69 = *(unsigned char *)(*(void *)(a3 + 272) + i - 1);
      }
      uint64_t v70 = *(void *)(a3 + 1248);
LABEL_166:
      *(unsigned char *)(v70 + i) = v69;
    }
  }
LABEL_169:
  if (*(void *)(a3 + 1304))
  {
    LODWORD(v71) = *(__int16 *)(a3 + 10);
    if ((int)v71 >= 1)
    {
      uint64_t v72 = 0;
      while (*(unsigned char *)(*(void *)(a3 + 32) + v72) != 35)
      {
        if (*(unsigned __int8 *)(*(void *)(a3 + 568) + v72) <= 1u)
        {
          uint64_t v71 = *(void *)(a3 + 1304);
          char v73 = *(unsigned char *)(v71 + v72 - 1);
          goto LABEL_176;
        }
LABEL_177:
        if (++v72 >= (__int16)v71) {
          goto LABEL_178;
        }
      }
      uint64_t v71 = *(void *)(a3 + 1304);
      char v73 = 119;
LABEL_176:
      *(unsigned char *)(v71 + v72) = v73;
      LOWORD(v71) = *(_WORD *)(a3 + 10);
      goto LABEL_177;
    }
LABEL_178:
    unsigned __int16 v74 = *(unsigned char **)(a3 + 1296);
    if (v74)
    {
      *unsigned __int16 v74 = 84;
      LODWORD(v71) = *(__int16 *)(a3 + 10);
      if ((int)v71 >= 2)
      {
        uint64_t v75 = 1;
        do
        {
          if (*(unsigned __int8 *)(*(void *)(a3 + 568) + v75) > 1u)
          {
            uint64_t v77 = *(void *)(a3 + 1304);
            uint64_t v76 = *(void *)(a3 + 1296);
          }
          else
          {
            uint64_t v76 = *(void *)(a3 + 1296);
            uint64_t v77 = v76;
          }
          *(unsigned char *)(v76 + v75) = *(unsigned char *)(v77 + v75 - 1);
          ++v75;
        }
        while (v75 < *(__int16 *)(a3 + 10));
        LOWORD(v71) = *(_WORD *)(a3 + 10);
      }
    }
    uint64_t v78 = *(void *)(a3 + 1312);
    if (v78)
    {
      *(unsigned char *)(v78 + (__int16)v71 - 1) = 84;
      if (((*(_WORD *)(a3 + 10) - 2) & 0x8000) == 0)
      {
        uint64_t v79 = (unsigned __int16)(*(_WORD *)(a3 + 10) - 2);
        do
        {
          if (*(unsigned __int8 *)(*(void *)(a3 + 576) + v79) > 1u)
          {
            uint64_t v81 = *(void *)(a3 + 1304);
            uint64_t v80 = *(void *)(a3 + 1312);
          }
          else
          {
            uint64_t v80 = *(void *)(a3 + 1312);
            uint64_t v81 = v80;
          }
          *(unsigned char *)(v80 + v79) = *(unsigned char *)(v81 + (v79 + 1));
          BOOL v41 = v79-- <= 0;
        }
        while (!v41);
      }
    }
  }
  return 0;
}