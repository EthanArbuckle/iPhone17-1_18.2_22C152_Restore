uint64_t sub_4674()
{
  uint64_t vars8;

  sub_A74C(&qword_80A30, (void (*)(uint64_t))type metadata accessor for GlyphVariantsViewModel);
  return sub_67570();
}

uint64_t sub_470C()
{
  return swift_retain();
}

uint64_t sub_4714(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_4740())()
{
  return nullsub_1;
}

uint64_t sub_4764()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = type metadata accessor for GlyphVariantsViewModel();
  uint64_t v4 = sub_A74C(&qword_80A30, (void (*)(uint64_t))type metadata accessor for GlyphVariantsViewModel);
  return ObservedObject.projectedValue.getter(v1, v2, v3, v4);
}

uint64_t sub_47EC()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_47F4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t sub_483C()
{
  sub_4890(&qword_80A38);
  sub_67F10();
  return v1 | (v2 << 16);
}

uint64_t sub_4890(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_48D4()
{
  return 0x10000;
}

double sub_48E4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_677C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v28 - v9;
  uint64_t v11 = *(void *)(v2 + 24);
  uint64_t v12 = *(void *)(v2 + 32);
  char v13 = *(unsigned char *)(v2 + 40);
  v14 = (_OWORD *)swift_allocObject();
  long long v15 = *(_OWORD *)(v2 + 16);
  v14[1] = *(_OWORD *)v2;
  v14[2] = v15;
  long long v16 = *(_OWORD *)(v2 + 48);
  v14[3] = *(_OWORD *)(v2 + 32);
  v14[4] = v16;
  swift_retain();
  swift_retain();
  sub_4E7C(v2);
  sub_4890(&qword_80A40);
  sub_4ED0();
  sub_44F00(1, v11, v12, v13, 0, 8, (uint64_t)sub_4E74, (uint64_t)v14, (uint64_t)v32);
  sub_677B0();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  sub_A74C(&qword_80AB8, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v17 = sub_67530();
  uint64_t v18 = v32[0];
  uint64_t v19 = v32[1];
  char v31 = v33;
  uint64_t v20 = v34;
  uint64_t v21 = v35;
  char v30 = v37;
  char v29 = v38;
  uint64_t v22 = v39;
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  *(_OWORD *)v28 = v36;
  v23(v10, v4);
  char v24 = v31;
  char v25 = v30;
  char v26 = v29;
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v21;
  double result = v28[0];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v28;
  *(unsigned char *)(a1 + 56) = v25;
  *(unsigned char *)(a1 + 64) = v26;
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v17;
  return result;
}

uint64_t sub_4B44(long long *a1)
{
  uint64_t v2 = sub_4890(&qword_80D50);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_4890(&qword_80A58);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v25 = *a1;
  swift_retain();
  uint64_t v8 = sub_1DB78();
  sub_A5A4((uint64_t)&v25);
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v9)
  {
    sub_5194((uint64_t)v7);
    sub_A85C((uint64_t)v7, (uint64_t)v4, &qword_80A58);
    swift_storeEnumTagMultiPayload();
    sub_4890(&qword_80A98);
    sub_69C0(&qword_80A50, &qword_80A58, (void (*)(void))sub_4FF4);
    sub_69C0(&qword_80A90, &qword_80A98, (void (*)(void))sub_50C4);
    sub_679F0();
    return sub_A8C0((uint64_t)v7, &qword_80A58);
  }
  else
  {
    v24[0] = sub_31274(0xD000000000000021, (void *)0x8000000000074210, 0xD000000000000034, 0x8000000000074240);
    v24[1] = v11;
    sub_A5D0();
    uint64_t v12 = sub_67C00();
    uint64_t v14 = v13;
    char v16 = v15;
    uint64_t v18 = v17;
    nullsub_1();
    char v19 = sub_67B00();
    sub_315C0();
    sub_674B0();
    *(void *)uint64_t v4 = v12;
    *((void *)v4 + 1) = v14;
    v4[16] = v16 & 1;
    *((void *)v4 + 3) = v18;
    v4[32] = v19;
    *((void *)v4 + 5) = v20;
    *((void *)v4 + 6) = v21;
    *((void *)v4 + 7) = v22;
    *((void *)v4 + 8) = v23;
    v4[72] = 0;
    swift_storeEnumTagMultiPayload();
    sub_4890(&qword_80A98);
    sub_69C0(&qword_80A50, &qword_80A58, (void (*)(void))sub_4FF4);
    sub_69C0(&qword_80A90, &qword_80A98, (void (*)(void))sub_50C4);
    return sub_679F0();
  }
}

uint64_t sub_4E74()
{
  return sub_4B44((long long *)(v0 + 16));
}

uint64_t sub_4E7C(uint64_t a1)
{
  return a1;
}

unint64_t sub_4ED0()
{
  unint64_t result = qword_80A48;
  if (!qword_80A48)
  {
    sub_4FAC(&qword_80A40);
    sub_69C0(&qword_80A50, &qword_80A58, (void (*)(void))sub_4FF4);
    sub_69C0(&qword_80A90, &qword_80A98, (void (*)(void))sub_50C4);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80A48);
  }
  return result;
}

uint64_t sub_4FAC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_4FF4()
{
  return sub_69C0(&qword_80A60, &qword_80A68, (void (*)(void))sub_5024);
}

unint64_t sub_5024()
{
  unint64_t result = qword_80A70;
  if (!qword_80A70)
  {
    sub_4FAC(&qword_80A78);
    sub_AE4C(&qword_80A80, &qword_80A88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80A70);
  }
  return result;
}

unint64_t sub_50C4()
{
  unint64_t result = qword_80AA0;
  if (!qword_80AA0)
  {
    sub_4FAC(&qword_80AA8);
    sub_5140();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80AA0);
  }
  return result;
}

unint64_t sub_5140()
{
  unint64_t result = qword_80AB0;
  if (!qword_80AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80AB0);
  }
  return result;
}

uint64_t sub_5194@<X0>(uint64_t a1@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v49 = sub_67A50();
  __chkstk_darwin(v49);
  v47 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_4890(&qword_80A88);
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_4890(&qword_80A78);
  __chkstk_darwin(v4 - 8);
  v45 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_4890(&qword_80A68) - 8;
  __chkstk_darwin(v50);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_68050();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_68060();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v11 = *(void *)sub_32088();
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for GridItem.Size.fixed(_:), v8);
  sub_68070();
  uint64_t v16 = sub_68310();
  *(void *)(v16 + 16) = 9;
  unint64_t v17 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v18 = *(void (**)(unint64_t, char *, uint64_t))(v13 + 16);
  v18(v17, v15, v12);
  uint64_t v19 = *(void *)(v13 + 72);
  v18(v17 + v19, v15, v12);
  v18(v17 + 2 * v19, v15, v12);
  v18(v17 + 3 * v19, v15, v12);
  v18(v17 + 4 * v19, v15, v12);
  v18(v17 + 5 * v19, v15, v12);
  v18(v17 + 6 * v19, v15, v12);
  v18(v17 + 7 * v19, v15, v12);
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + 8 * v19, v15, v12);
  uint64_t v54 = v46;
  sub_678D0();
  int v55 = 0;
  sub_A74C(&qword_80D60, (void (*)(uint64_t))&type metadata accessor for PinnedScrollableViews);
  sub_68890();
  sub_4890(&qword_80D68);
  sub_A794();
  uint64_t v20 = v48;
  sub_680F0();
  uint64_t v22 = v51;
  uint64_t v21 = v52;
  uint64_t v23 = (uint64_t)v45;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v45, v20, v52);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  LOBYTE(v21) = sub_67B00();
  sub_31410();
  sub_674B0();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_A85C(v23, (uint64_t)v7, &qword_80A78);
  v32 = &v7[*(int *)(v50 + 44)];
  char *v32 = v21;
  *((void *)v32 + 1) = v25;
  *((void *)v32 + 2) = v27;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  v32[40] = 0;
  sub_A8C0(v23, &qword_80A78);
  sub_31640();
  LOBYTE(v21) = sub_67AF0();
  sub_674B0();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v41 = v53;
  sub_A85C((uint64_t)v7, v53, &qword_80A68);
  uint64_t v42 = v41 + *(int *)(sub_4890(&qword_80A58) + 36);
  *(unsigned char *)uint64_t v42 = v21;
  *(void *)(v42 + 8) = v34;
  *(void *)(v42 + 16) = v36;
  *(void *)(v42 + 24) = v38;
  *(void *)(v42 + 32) = v40;
  *(unsigned char *)(v42 + 40) = 0;
  return sub_A8C0((uint64_t)v7, &qword_80A68);
}

uint64_t sub_57A8@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  type metadata accessor for GlyphVariantsViewModel();
  sub_A74C(&qword_80A30, (void (*)(uint64_t))type metadata accessor for GlyphVariantsViewModel);
  uint64_t v10 = sub_67570();
  uint64_t v12 = v11;
  sub_4890(&qword_80A38);
  uint64_t result = sub_67F10();
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v12;
  *(unsigned char *)(a5 + 16) = a1;
  *(void *)(a5 + 24) = a2;
  *(void *)(a5 + 32) = a3;
  *(unsigned char *)(a5 + 40) = a4;
  *(_WORD *)(a5 + 48) = v14;
  *(unsigned char *)(a5 + 50) = v15;
  *(void *)(a5 + 56) = v16;
  return result;
}

double sub_58AC@<D0>(uint64_t a1@<X8>)
{
  return sub_48E4(a1);
}

uint64_t sub_58E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v90 = a1;
  uint64_t v3 = sub_67A90();
  uint64_t v88 = *(void *)(v3 - 8);
  uint64_t v89 = v3;
  __chkstk_darwin(v3);
  v87 = (uint64_t *)((char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_4890(&qword_80D18);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  __chkstk_darwin(v5);
  v78 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_4890(&qword_80AD0);
  __chkstk_darwin(v92);
  v81 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_80AC0);
  uint64_t v85 = *(void *)(v8 - 8);
  uint64_t v86 = v8;
  __chkstk_darwin(v8);
  v93 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_4890(&qword_80D20);
  uint64_t v83 = *(void *)(v10 - 8);
  uint64_t v84 = v10;
  __chkstk_darwin(v10);
  v82 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v1 + 16);
  v125[0] = v12;
  int64_t v13 = *(void *)(v12 + 16);
  __int16 v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    *(void *)&long long v95 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_9B60(0, v13, 0);
    __int16 v14 = (void *)v95;
    char v15 = (__int16 *)(v12 + 32);
    unint64_t v16 = *(void *)(v95 + 16);
    do
    {
      __int16 v18 = *v15++;
      __int16 v17 = v18;
      *(void *)&long long v95 = v14;
      unint64_t v19 = v14[3];
      if (v16 >= v19 >> 1)
      {
        sub_9B60((char *)(v19 > 1), v16 + 1, 1);
        __int16 v14 = (void *)v95;
      }
      v14[2] = v16 + 1;
      *((_WORD *)v14 + v16++ + 16) = v17;
      --v13;
    }
    while (v13);
    sub_A174((uint64_t)v125);
  }
  uint64_t v20 = *(void **)v1;
  sub_32088();
  sub_31640();
  sub_304D8((uint64_t)v14);
  double v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v2 + 24);
  if (*(void *)(v23 + 16))
  {
    swift_bridgeObjectRetain_n();
    id v24 = v20;
    uint64_t v25 = sub_9128(v23);
    swift_bridgeObjectRelease();
    *(void *)&long long v95 = v25;
    sub_90BC((char **)&v95);
    swift_bridgeObjectRelease();
    if (*(void *)(v95 + 16))
    {
      uint64_t v26 = *(unsigned __int16 *)(v95 + 32);
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v26 = *(unsigned __int16 *)(v2 + 8);
    }
  }
  else
  {
    uint64_t v26 = *(unsigned __int16 *)(v2 + 8);
    id v27 = v20;
  }
  double v28 = fmin(v22, 1.0);
  uint64_t v29 = sub_51314();
  uint64_t v77 = nullsub_1(v20, v26, v29, v28);
  int v76 = v30;
  uint64_t v32 = v31;
  uint64_t v75 = v33;
  int v74 = sub_67AF0();
  sub_674B0();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  sub_68090();
  sub_67520();
  uint64_t v42 = v119;
  char v43 = v120;
  uint64_t v44 = v121;
  char v45 = v122;
  uint64_t v46 = v123;
  uint64_t v73 = v124;
  int v47 = sub_67A60();
  long long v95 = *(_OWORD *)(v2 + 32);
  uint64_t v91 = sub_4890(&qword_80CF8);
  sub_67F20();
  if ((v109 & 1) != 0 || (long long v95 = *(_OWORD *)(v2 + 48), sub_67F20(), v109 == 1))
  {
    uint64_t v48 = *sub_2F978();
    swift_retain();
  }
  else
  {
    uint64_t v48 = sub_67E20();
  }
  char v108 = 0;
  char v107 = v43;
  char v106 = v45;
  char v49 = sub_67AF0();
  *(void *)&long long v109 = v77;
  WORD4(v109) = v76;
  *(void *)&long long v110 = v32;
  *((void *)&v110 + 1) = v75;
  LOBYTE(v111) = v74;
  *((void *)&v111 + 1) = v35;
  *(void *)&long long v112 = v37;
  *((void *)&v112 + 1) = v39;
  *(void *)&long long v113 = v41;
  BYTE8(v113) = 0;
  *(void *)&long long v114 = v42;
  BYTE8(v114) = v43;
  *(void *)&long long v115 = v44;
  BYTE8(v115) = v45;
  *(void *)&long long v116 = v46;
  *((void *)&v116 + 1) = v73;
  LODWORD(v117) = v47;
  *((void *)&v117 + 1) = v48;
  char v118 = v49;
  long long v102 = v116;
  long long v103 = v117;
  char v104 = v49;
  long long v97 = v111;
  long long v98 = v112;
  long long v99 = v113;
  long long v100 = v114;
  long long v101 = v115;
  long long v95 = v109;
  long long v96 = v110;
  char v105 = 0;
  sub_4890(&qword_80AE0);
  sub_6784();
  uint64_t v50 = v78;
  sub_2F574(3);
  sub_A1A0((void **)&v109);
  uint64_t v51 = (uint64_t (*)())swift_allocObject();
  long long v52 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v51 + 1) = *(_OWORD *)v2;
  *((_OWORD *)v51 + 2) = v52;
  long long v53 = *(_OWORD *)(v2 + 48);
  *((_OWORD *)v51 + 3) = *(_OWORD *)(v2 + 32);
  *((_OWORD *)v51 + 4) = v53;
  uint64_t v55 = v79;
  uint64_t v54 = v80;
  uint64_t v56 = (uint64_t)v81;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v81, v50, v80);
  v57 = (uint64_t (**)())(v56 + *(int *)(v92 + 36));
  *v57 = sub_A1DC;
  v57[1] = v51;
  sub_A228((void **)v2);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v54);
  v58 = (_OWORD *)swift_allocObject();
  long long v59 = *(_OWORD *)(v2 + 16);
  v58[1] = *(_OWORD *)v2;
  v58[2] = v59;
  long long v60 = *(_OWORD *)(v2 + 48);
  v58[3] = *(_OWORD *)(v2 + 32);
  v58[4] = v60;
  sub_A228((void **)v2);
  uint64_t v61 = sub_8B18(&qword_80AD8, &qword_80AD0, &qword_80AE0, (void (*)(void))sub_6784);
  sub_67CC0();
  swift_release();
  sub_A8C0(v56, &qword_80AD0);
  long long v94 = *(_OWORD *)(v2 + 48);
  sub_67F40();
  LODWORD(v91) = v96;
  uint64_t v62 = swift_allocObject();
  long long v63 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v62 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v62 + 32) = v63;
  long long v64 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v62 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v62 + 64) = v64;
  *(double *)(v62 + 80) = v28;
  sub_A228((void **)v2);
  uint64_t v65 = sub_67F50();
  v66 = v87;
  uint64_t v67 = v88;
  uint64_t *v87 = v65;
  uint64_t v68 = v89;
  (*(void (**)(uint64_t *, void, uint64_t))(v67 + 104))(v66, enum case for PopoverAttachmentAnchor.rect(_:), v89);
  sub_67B10();
  sub_4890(&qword_80AC8);
  *(void *)&long long v95 = v92;
  *((void *)&v95 + 1) = v61;
  swift_getOpaqueTypeConformance2();
  sub_6AE4();
  uint64_t v69 = v86;
  v70 = v82;
  v71 = v93;
  sub_67C70();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v67 + 8))(v66, v68);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v71, v69);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v83 + 32))(v90, v70, v84);
}

uint64_t sub_61AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = sub_4890(&qword_80B80);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *sub_32178();
  *(void *)uint64_t v8 = sub_67820();
  *((void *)v8 + 1) = v9;
  v8[16] = 0;
  sub_4890(&qword_80D28);
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = v23;
  swift_getKeyPath();
  uint64_t v10 = swift_allocObject();
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 64) = v12;
  *(double *)(v10 + 80) = a3;
  sub_A370((uint64_t)&v24);
  sub_A228((void **)a1);
  sub_4890(&qword_80D30);
  type metadata accessor for PopoverGlyphVariantView();
  sub_AE4C(&qword_80D38, &qword_80D30);
  sub_A39C();
  sub_68010();
  sub_315C0();
  LOBYTE(a1) = sub_67AF0();
  sub_674B0();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_A85C((uint64_t)v8, a2, &qword_80B80);
  uint64_t v21 = a2 + *(int *)(sub_4890(&qword_80AC8) + 36);
  *(unsigned char *)uint64_t v21 = a1;
  *(void *)(v21 + 8) = v14;
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v18;
  *(void *)(v21 + 32) = v20;
  *(unsigned char *)(v21 + 40) = 0;
  return sub_A8C0((uint64_t)v8, &qword_80B80);
}

uint64_t sub_63CC@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = sub_672C0();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v11 = *(_WORD *)(a2 + 8);
  LOWORD(a1) = *a1;
  id v12 = *(id *)a2;
  sub_2120C();
  sub_213C8(v10, (uint64_t)v12, v11, (__int16)a1, a3);
  LOBYTE(v10) = sub_6590((unsigned __int16)a1, *(void *)(a2 + 24));
  long long v23 = *(_OWORD *)(a2 + 48);
  sub_4890(&qword_80CF8);
  sub_67F40();
  uint64_t v13 = v24;
  uint64_t v14 = v25;
  char v15 = v26;
  uint64_t v16 = (int *)type metadata accessor for PopoverGlyphVariantView();
  *(_WORD *)(a3 + v16[5]) = (_WORD)a1;
  *(unsigned char *)(a3 + v16[6]) = v10 & 1;
  *(double *)(a3 + v16[7]) = a4;
  uint64_t v17 = a3 + v16[8];
  *(void *)uint64_t v17 = v13;
  *(void *)(v17 + 8) = v14;
  *(unsigned char *)(v17 + 16) = v15;
  uint64_t v18 = a3 + v16[9];
  LOBYTE(v23) = 0;
  sub_67F10();
  uint64_t v19 = v25;
  *(unsigned char *)uint64_t v18 = v24;
  *(void *)(v18 + 8) = v19;
  uint64_t v20 = (uint64_t *)(a3 + v16[10]);
  type metadata accessor for TypographyPanelViewModel();
  sub_A74C(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  uint64_t result = sub_67660();
  *uint64_t v20 = result;
  v20[1] = v22;
  return result;
}

BOOL sub_6590(unsigned __int16 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  int v3 = a1;
  uint64_t v4 = sub_687D0();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int16 *)(v8 + 2 * v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int16 *)(v8 + 2 * v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_6660()
{
  return swift_getOpaqueTypeMetadata2();
}

uint64_t sub_66F4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_6784()
{
  unint64_t result = qword_80AE8;
  if (!qword_80AE8)
  {
    sub_4FAC(&qword_80AE0);
    sub_6824();
    sub_AE4C(&qword_80B58, &qword_80B60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80AE8);
  }
  return result;
}

unint64_t sub_6824()
{
  unint64_t result = qword_80AF0;
  if (!qword_80AF0)
  {
    sub_4FAC(&qword_80AF8);
    sub_68C4();
    sub_AE4C(&qword_80B48, &qword_80B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80AF0);
  }
  return result;
}

unint64_t sub_68C4()
{
  unint64_t result = qword_80B00;
  if (!qword_80B00)
  {
    sub_4FAC(&qword_80B08);
    sub_69C0(&qword_80B10, &qword_80B18, (void (*)(void))sub_6990);
    sub_AE4C(&qword_80B38, &qword_80B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80B00);
  }
  return result;
}

uint64_t sub_6990()
{
  return sub_69C0(&qword_80B20, &qword_80B28, (void (*)(void))sub_6A3C);
}

uint64_t sub_69C0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_6A3C()
{
  unint64_t result = qword_80B30;
  if (!qword_80B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80B30);
  }
  return result;
}

unint64_t sub_6A90()
{
  unint64_t result = qword_80B68;
  if (!qword_80B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80B68);
  }
  return result;
}

unint64_t sub_6AE4()
{
  unint64_t result = qword_80B70;
  if (!qword_80B70)
  {
    sub_4FAC(&qword_80AC8);
    sub_AE4C(&qword_80B78, &qword_80B80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80B70);
  }
  return result;
}

uint64_t sub_6B84()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for GlyphVariantsView()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for GlyphVariantsView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 5sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 50);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GlyphVariantsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  __int16 v4 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 5sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for GlyphVariantsView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GlyphVariantsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 5sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 50);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GlyphVariantsView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GlyphVariantsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4sub_66CA4(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GlyphVariantsView()
{
  return &type metadata for GlyphVariantsView;
}

unint64_t sub_6E64()
{
  unint64_t result = qword_80B88;
  if (!qword_80B88)
  {
    sub_4FAC(&qword_80B90);
    sub_AE4C(&qword_80B98, &qword_80BA0);
    sub_AE4C(&qword_80BA8, &qword_80BB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80B88);
  }
  return result;
}

void *sub_6F28(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_672C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for FontGlyphVariant();
    uint64_t v9 = v8[5];
    uint64_t v10 = *(void **)((char *)a2 + v9);
    *(void *)((char *)v4 + v9) = v10;
    *(_WORD *)((char *)v4 + v8[6]) = *(_WORD *)((char *)a2 + v8[6]);
    *(_WORD *)((char *)v4 + v8[7]) = *(_WORD *)((char *)a2 + v8[7]);
    uint64_t v11 = a3[6];
    *(_WORD *)((char *)v4 + a3[5]) = *(_WORD *)((char *)a2 + a3[5]);
    *((unsigned char *)v4 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = *((void *)v14 + 1);
    *(void *)uint64_t v13 = *(void *)v14;
    *((void *)v13 + 1) = v15;
    v13[16] = v14[16];
    uint64_t v16 = a3[9];
    uint64_t v17 = a3[10];
    uint64_t v18 = (char *)v4 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *uint64_t v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
    uint64_t v20 = (void *)((char *)v4 + v17);
    uint64_t v21 = (void *)((char *)a2 + v17);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    *uint64_t v20 = v23;
    v20[1] = v22;
    id v24 = v10;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_70A0(uint64_t a1)
{
  uint64_t v2 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_7158(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for FontGlyphVariant();
  uint64_t v8 = v7[5];
  uint64_t v9 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v9;
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_WORD *)(a1 + v7[7]) = *(_WORD *)(a2 + v7[7]);
  uint64_t v10 = a3[6];
  *(_WORD *)(a1 + a3[5]) = *(_WORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v1sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void *)(v13 + 8);
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = v14;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  uint64_t v19 = (void *)(a1 + v16);
  uint64_t v20 = (uint64_t *)(a2 + v16);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  id v23 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_7284(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for FontGlyphVariant();
  uint64_t v8 = v7[5];
  uint64_t v9 = *(void **)(a2 + v8);
  uint64_t v10 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = v9;
  id v11 = v9;

  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_WORD *)(a1 + v7[7]) = *(_WORD *)(a2 + v7[7]);
  *(_WORD *)(a1 + a3[5]) = *(_WORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_retain();
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  uint64_t v15 = a3[9];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_retain();
  swift_release();
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  swift_retain();
  swift_release();
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  return a1;
}

uint64_t sub_73F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for FontGlyphVariant();
  *(void *)(a1 + v7[5]) = *(void *)(a2 + v7[5]);
  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_WORD *)(a1 + v7[7]) = *(_WORD *)(a2 + v7[7]);
  uint64_t v8 = a3[6];
  *(_WORD *)(a1 + a3[5]) = *(_WORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  uint64_t v12 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_74E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for FontGlyphVariant();
  uint64_t v8 = v7[5];
  uint64_t v9 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);

  *(_WORD *)(a1 + v7[6]) = *(_WORD *)(a2 + v7[6]);
  *(_WORD *)(a1 + v7[7]) = *(_WORD *)(a2 + v7[7]);
  uint64_t v10 = a3[6];
  *(_WORD *)(a1 + a3[5]) = *(_WORD *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v1sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_release();
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  uint64_t v14 = a3[9];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_release();
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (void *)(a2 + v17);
  *(void *)(a1 + v17) = *v19;
  swift_release();
  *(void *)(v18 + 8) = v19[1];
  return a1;
}

uint64_t sub_7628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_763C);
}

uint64_t sub_763C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FontGlyphVariant();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1sub_66CA4(2, 18, 1, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_7700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7714);
}

uint64_t sub_7714(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FontGlyphVariant();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for PopoverGlyphVariantView()
{
  uint64_t result = qword_82320;
  if (!qword_82320) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_7820()
{
  uint64_t result = type metadata accessor for FontGlyphVariant();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FeatureType(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for GlyphVariantView(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for GlyphVariantView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GlyphVariantView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GlyphVariantView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GlyphVariantView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GlyphVariantView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 4sub_66CA4(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GlyphVariantView()
{
  return &type metadata for GlyphVariantView;
}

uint64_t sub_7BEC()
{
  return sub_69C0(&qword_80A50, &qword_80A58, (void (*)(void))sub_4FF4);
}

uint64_t sub_7C30()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_7C4C()
{
  return sub_67CE0();
}

uint64_t sub_7C68@<X0>(uint64_t a1@<X8>)
{
  return sub_58E8(a1);
}

uint64_t sub_7CA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_7CC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v37 = sub_67630();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v34 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_67A20();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  uint64_t v33 = v4;
  __chkstk_darwin(v3);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PopoverGlyphVariantView();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = sub_4890(&qword_80C50);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_4890(&qword_80C58);
  uint64_t v14 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_86C8(v1, (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  sub_8730((uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  uint64_t v38 = v1;
  sub_4890(&qword_80C60);
  sub_8B18(&qword_80C68, &qword_80C60, &qword_80C70, (void (*)(void))sub_8BCC);
  sub_67F60();
  sub_67A10();
  sub_AE4C(&qword_80CD0, &qword_80C50);
  sub_A74C(&qword_80CD8, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
  uint64_t v19 = v32;
  sub_67C40();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v20 = v34;
  sub_67620();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = sub_4890(&qword_80CE0);
  uint64_t v23 = v36;
  id v24 = (uint64_t *)(v36 + *(int *)(v22 + 36));
  uint64_t v25 = sub_4890(&qword_80CE8);
  uint64_t v26 = v35;
  uint64_t v27 = v37;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v24 + *(int *)(v25 + 28), v20, v37);
  *id v24 = KeyPath;
  uint64_t v28 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v23, v16, v31);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v28);
}

uint64_t sub_81A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v3 = (int *)type metadata accessor for PopoverGlyphVariantView();
  uint64_t v54 = *((void *)v3 - 1);
  __chkstk_darwin(v3);
  uint64_t v55 = v4;
  uint64_t v57 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_4890(&qword_80CF0);
  uint64_t v58 = *(void *)(v5 - 8);
  uint64_t v59 = v5;
  __chkstk_darwin(v5);
  uint64_t v56 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_4890(&qword_80C60);
  __chkstk_darwin(v53);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FontGlyphVariant();
  double v10 = *(double *)(a1 + v3[7]);
  uint64_t v11 = *(unsigned __int16 *)(a1 + v3[5]);
  id v12 = *(id *)(a1 + *(int *)(v9 + 20));
  uint64_t v13 = sub_51314();
  uint64_t v52 = nullsub_1(v12, v11, v13, v10);
  int v51 = v14;
  uint64_t v16 = v15;
  uint64_t v50 = v17;
  sub_31640();
  int v49 = sub_67AF0();
  sub_674B0();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_32088();
  sub_68090();
  sub_67520();
  char v26 = v86;
  uint64_t v47 = v87;
  uint64_t v48 = v85;
  char v27 = v88;
  uint64_t v45 = v90;
  uint64_t v46 = v89;
  if (*(unsigned char *)(a1 + v3[6]) == 1)
  {
    uint64_t v28 = *sub_2F8F4();
    swift_retain();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v30 = sub_67E10();
  }
  else
  {
    uint64_t v28 = *sub_2F7B4();
    swift_retain();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v30 = *sub_2F864();
    swift_retain();
  }
  char v31 = sub_67AF0();
  uint64_t v32 = a1 + v3[9];
  char v33 = *(unsigned char *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  LOBYTE(v61) = v33;
  *((void *)&v61 + 1) = v34;
  sub_4890(&qword_80CF8);
  sub_67F20();
  if (v75 == 1)
  {
    uint64_t v35 = *sub_2F978();
    swift_retain();
  }
  else
  {
    uint64_t v35 = sub_67E20();
  }
  char v74 = 0;
  char v73 = v26;
  char v72 = v27;
  char v36 = sub_67AF0();
  *(void *)&long long v75 = v52;
  WORD4(v75) = v51;
  *(void *)&long long v76 = v16;
  *((void *)&v76 + 1) = v50;
  LOBYTE(v77) = v49;
  *((void *)&v77 + 1) = v19;
  *(void *)&long long v78 = v21;
  *((void *)&v78 + 1) = v23;
  *(void *)&long long v79 = v25;
  BYTE8(v79) = 0;
  *(void *)&long long v80 = v48;
  BYTE8(v8sub_66CA4(2, 18, 1, 0) = v26;
  *(void *)&long long v81 = v47;
  BYTE8(v81) = v27;
  *(void *)&long long v82 = v46;
  *((void *)&v82 + 1) = v45;
  *(void *)&long long v83 = KeyPath;
  *((void *)&v83 + 1) = v28;
  *(void *)&v84[0] = v30;
  BYTE8(v84[0]) = v31;
  *(void *)&v84[1] = v35;
  BYTE8(v84[1]) = v36;
  long long v69 = v83;
  *(_OWORD *)v70 = v84[0];
  *(_OWORD *)&v70[9] = *(_OWORD *)((char *)v84 + 9);
  long long v65 = v79;
  long long v66 = v80;
  long long v67 = v81;
  long long v68 = v82;
  long long v63 = v77;
  long long v64 = v78;
  long long v61 = v75;
  long long v62 = v76;
  char v71 = 0;
  sub_4890(&qword_80C70);
  sub_8BCC();
  uint64_t v37 = v56;
  sub_2F574(2);
  sub_9ED8((void **)&v75);
  uint64_t v38 = v57;
  sub_86C8(a1, v57);
  unint64_t v39 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  uint64_t v40 = swift_allocObject();
  sub_8730(v38, v40 + v39);
  uint64_t v42 = v58;
  uint64_t v41 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v8, v37, v59);
  char v43 = (uint64_t (**)())&v8[*(int *)(v53 + 36)];
  *char v43 = sub_A06C;
  v43[1] = (uint64_t (*)())v40;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v41);
  return sub_A108((uint64_t)v8, v60);
}

uint64_t sub_86C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PopoverGlyphVariantView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_8730(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PopoverGlyphVariantView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_8794()
{
  uint64_t v1 = type metadata accessor for PopoverGlyphVariantView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = *(const __CTFont **)(v2 + *(int *)(type metadata accessor for FontGlyphVariant() + 20));
  uint64_t v4 = sub_303B4();
  if (!v5) {
    goto LABEL_19;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  CGGlyph v8 = *(_WORD *)(v2 + *(int *)(v1 + 20));
  uint64_t v9 = (__CFString *)sub_68170();
  CTGlyphInfoRef v10 = CTGlyphInfoCreateWithGlyph(v8, v3, v9);

  if (!v10)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    sub_4890(&qword_80D00);
    return sub_67FE0();
  }
  uint64_t v11 = *(void *)(v2 + *(int *)(v1 + 40));
  if (v11)
  {
    id v12 = (uint64_t *)(v11 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_rangeDescriptorsLookupTable);
    swift_beginAccess();
    uint64_t v13 = *v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_60714();
    if (*(void *)(v13 + 16) && (unint64_t v16 = sub_8EC0(v14, v15), (v17 & 1) != 0))
    {
      uint64_t v18 = *(void *)(*(void *)(v13 + 56) + 8 * v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        uint64_t v28 = v11;
        uint64_t v29 = v10;
        sub_9B80(0, v19, 0);
        unint64_t v20 = _swiftEmptyArrayStorage[2];
        uint64_t v21 = 40;
        do
        {
          long long v22 = *(_OWORD *)(v18 + v21);
          unint64_t v23 = _swiftEmptyArrayStorage[3];
          if (v20 >= v23 >> 1)
          {
            long long v27 = *(_OWORD *)(v18 + v21);
            sub_9B80((char *)(v23 > 1), v20 + 1, 1);
            long long v22 = v27;
          }
          _swiftEmptyArrayStorage[2] = v20 + 1;
          *(_OWORD *)&_swiftEmptyArrayStorage[2 * v20 + 4] = v22;
          v21 += 32;
          ++v20;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
        CTGlyphInfoRef v10 = v29;
        uint64_t v11 = v28;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v24 = *(void *)(v11 + 24);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(CTGlyphInfoRef, uint64_t, uint64_t, void *, uint64_t (*)(void, void, void, double), void, uint64_t, uint64_t))(v24 + 16))(v10, v6, v7, _swiftEmptyArrayStorage, nullsub_1, 0, ObjectType, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    goto LABEL_19;
  }
  type metadata accessor for TypographyPanelViewModel();
  sub_A74C(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  uint64_t result = sub_67650();
  __break(1u);
  return result;
}

uint64_t sub_8B10@<X0>(uint64_t a1@<X8>)
{
  return sub_81A8(*(void *)(v1 + 16), a1);
}

uint64_t sub_8B18(unint64_t *a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    sub_4FAC(a3);
    a4();
    swift_getOpaqueTypeConformance2();
    sub_6A90();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_8BCC()
{
  unint64_t result = qword_80C78;
  if (!qword_80C78)
  {
    sub_4FAC(&qword_80C70);
    sub_8C6C();
    sub_AE4C(&qword_80B58, &qword_80B60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80C78);
  }
  return result;
}

unint64_t sub_8C6C()
{
  unint64_t result = qword_80C80;
  if (!qword_80C80)
  {
    sub_4FAC(&qword_80C88);
    sub_8D0C();
    sub_AE4C(&qword_80CC0, &qword_80CC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80C80);
  }
  return result;
}

unint64_t sub_8D0C()
{
  unint64_t result = qword_80C90;
  if (!qword_80C90)
  {
    sub_4FAC(&qword_80C98);
    sub_8DAC();
    sub_AE4C(&qword_80B48, &qword_80B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80C90);
  }
  return result;
}

unint64_t sub_8DAC()
{
  unint64_t result = qword_80CA0;
  if (!qword_80CA0)
  {
    sub_4FAC(&qword_80CA8);
    sub_69C0(&qword_80B10, &qword_80B18, (void (*)(void))sub_6990);
    sub_AE4C(&qword_80CB0, &qword_80CB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80CA0);
  }
  return result;
}

unint64_t sub_8E78(unsigned __int16 a1)
{
  uint64_t v2 = sub_687D0();
  return sub_8F38(a1, v2);
}

unint64_t sub_8EC0(uint64_t a1, uint64_t a2)
{
  sub_687F0();
  sub_681E0();
  Swift::Int v4 = sub_68830();
  return sub_8FD8(a1, a2, v4);
}

unint64_t sub_8F38(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_8FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    CTGlyphInfoRef v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_68790() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_68790() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_90BC(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_A590((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_920C(v5);
  *a1 = v2;
  return result;
}

void *sub_9128(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_4890(&qword_80D40);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = j__malloc_size((const void *)v3);
  int64_t v5 = v4 - 32;
  if (v4 < 32) {
    int64_t v5 = v4 - 31;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v5 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v6 = sub_A3F4(&v8, (_WORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_A588();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

uint64_t sub_920C(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = sub_68760(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v76 = 0;
      uint64_t v77 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v79 = *(unsigned __int16 *)(v77 + 2 * i);
        uint64_t v80 = v76;
        do
        {
          unsigned int v81 = *(unsigned __int16 *)(v77 + v80);
          if (v79 >= v81) {
            break;
          }
          if (!v77) {
            goto LABEL_142;
          }
          *(_WORD *)(v77 + v80 + 2) = v81;
          *(_WORD *)(v77 + v8sub_66CA4(2, 18, 1, 0) = v79;
          v80 -= 2;
        }
        while (v80 != -2);
        v76 += 2;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_137;
    }
    uint64_t v93 = result;
    Swift::Int v94 = v3;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t result = sub_68310();
      *(void *)(result + 16) = v6;
      Swift::Int v3 = v94;
      uint64_t v92 = (void *)result;
      long long v96 = (unsigned __int16 *)(result + 32);
LABEL_13:
      Swift::Int v8 = 0;
      uint64_t v9 = *v2;
      uint64_t v90 = v2;
      uint64_t v91 = *v2 - 2;
      CTGlyphInfoRef v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v95 = *v2;
      while (1)
      {
        Swift::Int v12 = v8++;
        if (v8 < v3)
        {
          unsigned int v13 = *(unsigned __int16 *)(v9 + 2 * v8);
          unsigned int v14 = *(unsigned __int16 *)(v9 + 2 * v12);
          Swift::Int v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            unsigned int v15 = v13;
            while (1)
            {
              unsigned int v16 = *(unsigned __int16 *)(v9 + 2 * v8);
              if (v13 < v14 == v16 >= v15) {
                break;
              }
              ++v8;
              unsigned int v15 = v16;
              if (v3 == v8)
              {
                Swift::Int v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12) {
              goto LABEL_139;
            }
            if (v12 < v8)
            {
              Swift::Int v17 = v8 - 1;
              Swift::Int v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9) {
                    goto LABEL_145;
                  }
                  __int16 v19 = *(_WORD *)(v9 + 2 * v18);
                  *(_WORD *)(v9 + 2 * v18) = *(_WORD *)(v9 + 2 * v17);
                  *(_WORD *)(v9 + 2 * v17) = v19;
                }
                BOOL v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12)) {
            goto LABEL_136;
          }
          if (v8 - v12 < v93)
          {
            Swift::Int v20 = v12 + v93;
            if (__OFADD__(v12, v93)) {
              goto LABEL_140;
            }
            if (v20 >= v3) {
              Swift::Int v20 = v3;
            }
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              uint64_t v21 = (unsigned __int16 *)(v91 + 2 * v8);
              do
              {
                unsigned int v22 = *(unsigned __int16 *)(v9 + 2 * v8);
                Swift::Int v23 = v12;
                uint64_t v24 = v21;
                do
                {
                  unsigned int v25 = *v24;
                  if (v22 >= v25) {
                    break;
                  }
                  if (!v9) {
                    goto LABEL_143;
                  }
                  v24[1] = v25;
                  *v24-- = v22;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              Swift::Int v8 = v20;
            }
          }
        }
        if (v8 < v12) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_9A50(0, *((void *)v10 + 2) + 1, 1, v10);
          CTGlyphInfoRef v10 = (char *)result;
        }
        unint64_t v27 = *((void *)v10 + 2);
        unint64_t v26 = *((void *)v10 + 3);
        unint64_t v11 = v27 + 1;
        uint64_t v9 = v95;
        if (v27 >= v26 >> 1)
        {
          uint64_t result = (uint64_t)sub_9A50((char *)(v26 > 1), v27 + 1, 1, v10);
          uint64_t v9 = v95;
          CTGlyphInfoRef v10 = (char *)result;
        }
        *((void *)v10 + 2) = v11;
        uint64_t v28 = v10 + 32;
        uint64_t v29 = (Swift::Int *)&v10[16 * v27 + 32];
        *uint64_t v29 = v12;
        v29[1] = v8;
        if (v27)
        {
          while (1)
          {
            unint64_t v30 = v11 - 1;
            if (v11 >= 4)
            {
              uint64_t v35 = &v28[16 * v11];
              uint64_t v36 = *((void *)v35 - 8);
              uint64_t v37 = *((void *)v35 - 7);
              BOOL v41 = __OFSUB__(v37, v36);
              uint64_t v38 = v37 - v36;
              if (v41) {
                goto LABEL_120;
              }
              uint64_t v40 = *((void *)v35 - 6);
              uint64_t v39 = *((void *)v35 - 5);
              BOOL v41 = __OFSUB__(v39, v40);
              uint64_t v33 = v39 - v40;
              char v34 = v41;
              if (v41) {
                goto LABEL_121;
              }
              unint64_t v42 = v11 - 2;
              char v43 = &v28[16 * v11 - 32];
              uint64_t v45 = *(void *)v43;
              uint64_t v44 = *((void *)v43 + 1);
              BOOL v41 = __OFSUB__(v44, v45);
              uint64_t v46 = v44 - v45;
              if (v41) {
                goto LABEL_122;
              }
              BOOL v41 = __OFADD__(v33, v46);
              uint64_t v47 = v33 + v46;
              if (v41) {
                goto LABEL_124;
              }
              if (v47 >= v38)
              {
                long long v65 = &v28[16 * v30];
                uint64_t v67 = *(void *)v65;
                uint64_t v66 = *((void *)v65 + 1);
                BOOL v41 = __OFSUB__(v66, v67);
                uint64_t v68 = v66 - v67;
                if (v41) {
                  goto LABEL_130;
                }
                BOOL v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                uint64_t v59 = *((void *)v10 + 4);
                uint64_t v60 = *((void *)v10 + 5);
                BOOL v41 = __OFSUB__(v60, v59);
                uint64_t v52 = v60 - v59;
                char v53 = v41;
                goto LABEL_78;
              }
              uint64_t v32 = *((void *)v10 + 4);
              uint64_t v31 = *((void *)v10 + 5);
              BOOL v41 = __OFSUB__(v31, v32);
              uint64_t v33 = v31 - v32;
              char v34 = v41;
            }
            if (v34) {
              goto LABEL_123;
            }
            unint64_t v42 = v11 - 2;
            uint64_t v48 = &v28[16 * v11 - 32];
            uint64_t v50 = *(void *)v48;
            uint64_t v49 = *((void *)v48 + 1);
            BOOL v51 = __OFSUB__(v49, v50);
            uint64_t v52 = v49 - v50;
            char v53 = v51;
            if (v51) {
              goto LABEL_125;
            }
            uint64_t v54 = &v28[16 * v30];
            uint64_t v56 = *(void *)v54;
            uint64_t v55 = *((void *)v54 + 1);
            BOOL v41 = __OFSUB__(v55, v56);
            uint64_t v57 = v55 - v56;
            if (v41) {
              goto LABEL_127;
            }
            if (__OFADD__(v52, v57)) {
              goto LABEL_129;
            }
            if (v52 + v57 >= v33)
            {
              BOOL v58 = v33 < v57;
LABEL_84:
              if (v58) {
                unint64_t v30 = v42;
              }
              goto LABEL_86;
            }
LABEL_78:
            if (v53) {
              goto LABEL_126;
            }
            long long v61 = &v28[16 * v30];
            uint64_t v63 = *(void *)v61;
            uint64_t v62 = *((void *)v61 + 1);
            BOOL v41 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            if (v41) {
              goto LABEL_128;
            }
            if (v64 < v52) {
              goto LABEL_15;
            }
LABEL_86:
            unint64_t v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9) {
              goto LABEL_144;
            }
            v70 = &v28[16 * v69];
            uint64_t v71 = *(void *)v70;
            char v72 = v28;
            char v73 = &v28[16 * v30];
            uint64_t v74 = *((void *)v73 + 1);
            uint64_t result = sub_9858((unsigned __int16 *)(v9 + 2 * *(void *)v70), (unsigned __int16 *)(v9 + 2 * *(void *)v73), v9 + 2 * v74, v96);
            if (v1) {
              goto LABEL_114;
            }
            if (v74 < v71) {
              goto LABEL_117;
            }
            if (v30 > *((void *)v10 + 2)) {
              goto LABEL_118;
            }
            *(void *)v70 = v71;
            *(void *)&v72[16 * v69 + 8] = v74;
            unint64_t v75 = *((void *)v10 + 2);
            if (v30 >= v75) {
              goto LABEL_119;
            }
            unint64_t v11 = v75 - 1;
            uint64_t result = (uint64_t)memmove(v73, v73 + 16, 16 * (v75 - 1 - v30));
            uint64_t v28 = v72;
            *((void *)v10 + 2) = v75 - 1;
            uint64_t v9 = v95;
            if (v75 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        Swift::Int v3 = v94;
        if (v8 >= v94)
        {
          uint64_t v7 = v92;
          uint64_t v2 = v90;
          goto LABEL_103;
        }
      }
    }
    uint64_t v7 = &_swiftEmptyArrayStorage;
    long long v96 = (unsigned __int16 *)((char *)&_swiftEmptyArrayStorage + 32);
    if (v3 == 1)
    {
      uint64_t v92 = &_swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v11 = *((void *)&_swiftEmptyArrayStorage + 2);
    CTGlyphInfoRef v10 = (char *)&_swiftEmptyArrayStorage;
LABEL_103:
    uint64_t v92 = v7;
    if (v11 >= 2)
    {
      uint64_t v82 = *v2;
      do
      {
        unint64_t v83 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_132;
        }
        if (!v82) {
          goto LABEL_146;
        }
        uint64_t v84 = (uint64_t)v10;
        uint64_t v85 = v10 + 32;
        uint64_t v86 = *(void *)&v10[16 * v83 + 32];
        uint64_t v87 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = sub_9858((unsigned __int16 *)(v82 + 2 * v86), (unsigned __int16 *)(v82 + 2 * *(void *)&v85[16 * v11 - 16]), v82 + 2 * v87, v96);
        if (v1) {
          break;
        }
        if (v87 < v86) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_9B4C(v84);
          uint64_t v84 = result;
        }
        if (v83 >= *(void *)(v84 + 16)) {
          goto LABEL_134;
        }
        char v88 = (void *)(v84 + 32 + 16 * v83);
        *char v88 = v86;
        v88[1] = v87;
        unint64_t v89 = *(void *)(v84 + 16);
        if (v11 > v89) {
          goto LABEL_135;
        }
        uint64_t result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        CTGlyphInfoRef v10 = (char *)v84;
        *(void *)(v84 + 16) = v89 - 1;
        unint64_t v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    *((void *)v92 + 2) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_9858(unsigned __int16 *__dst, unsigned __int16 *__src, unint64_t a3, unsigned __int16 *a4)
{
  int64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  else {
    int64_t v9 = v8 + 1;
  }
  uint64_t v10 = v9 >> 1;
  uint64_t v11 = a3 - (void)__src;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  uint64_t v13 = v12 >> 1;
  if (v10 >= v12 >> 1)
  {
    if (a4 != __src || &__src[v13] <= a4) {
      memmove(a4, __src, 2 * v13);
    }
    unsigned int v14 = &v4[v13];
    if (v7 >= v6 || v11 < 2) {
      goto LABEL_41;
    }
    Swift::Int v17 = (unsigned __int16 *)(a3 - 2);
    Swift::Int v18 = v6;
    while (1)
    {
      __int16 v19 = v17 + 1;
      unsigned int v21 = *--v18;
      unsigned __int16 v20 = v21;
      if (*(v14 - 1) < v21) {
        break;
      }
      unsigned __int16 v20 = *(v14 - 1);
      Swift::Int v18 = v6;
      if (v19 != v14)
      {
        --v14;
LABEL_37:
        *Swift::Int v17 = v20;
        goto LABEL_38;
      }
      if (v17 >= v14--) {
        goto LABEL_37;
      }
LABEL_38:
      if (v18 > v7)
      {
        --v17;
        uint64_t v6 = v18;
        if (v14 > v4) {
          continue;
        }
      }
      uint64_t v6 = v18;
      goto LABEL_41;
    }
    if (v19 == v6 && v17 < v6) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (a4 != __dst || &__dst[v10] <= a4) {
    memmove(a4, __dst, 2 * v10);
  }
  unsigned int v14 = &v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 2)
  {
    while (1)
    {
      unsigned int v15 = *v6;
      if (v15 >= *v4) {
        break;
      }
      BOOL v16 = v7 == v6++;
      if (!v16) {
        goto LABEL_18;
      }
LABEL_19:
      ++v7;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    LOWORD(v15) = *v4;
    BOOL v16 = v7 == v4++;
    if (v16) {
      goto LABEL_19;
    }
LABEL_18:
    *uint64_t v7 = v15;
    goto LABEL_19;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_41:
  uint64_t v23 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0);
  if (v6 != v4 || v6 >= (unsigned __int16 *)((char *)v4 + (v23 & 0xFFFFFFFFFFFFFFFELL))) {
    memmove(v6, v4, 2 * (v23 >> 1));
  }
  return 1;
}

char *sub_9A50(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80D48);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unsigned int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_9B4C(uint64_t a1)
{
  return sub_9A50(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_9B60(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_9BA0(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_9B80(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_9C98(a1, a2, a3, *v3);
  *Swift::Int v3 = result;
  return result;
}

char *sub_9BA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80D40);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unsigned int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 2 * v8);
  }
  swift_release();
  return v10;
}

char *sub_9C98(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80D10);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unsigned int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_9D94()
{
  return sub_676D0();
}

uint64_t sub_9DB8(uint64_t a1)
{
  uint64_t v2 = sub_67630();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_676E0();
}

uint64_t sub_9E80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_67670();
  *a1 = result;
  return result;
}

uint64_t sub_9EAC()
{
  return sub_67680();
}

void **sub_9ED8(void **a1)
{
  uint64_t v2 = *a1;
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return a1;
}

uint64_t sub_9F40()
{
  uint64_t v1 = *(void *)(type metadata accessor for PopoverGlyphVariantView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_A06C()
{
  return sub_67F30();
}

uint64_t sub_A108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4890(&qword_80C60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_A174(uint64_t a1)
{
  return a1;
}

void **sub_A1A0(void **a1)
{
  uint64_t v2 = *a1;
  swift_release();

  return a1;
}

uint64_t sub_A1D4()
{
  return sub_A300(80);
}

uint64_t sub_A1DC()
{
  return sub_67F30();
}

void **sub_A228(void **a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_A28C()
{
  return sub_A300(80);
}

uint64_t sub_A294()
{
  return sub_67F30();
}

uint64_t sub_A2E4()
{
  return sub_A300(88);
}

uint64_t sub_A2EC@<X0>(uint64_t a1@<X8>)
{
  return sub_61AC(v1 + 16, a1, *(double *)(v1 + 80));
}

uint64_t sub_A2F8()
{
  return sub_A300(88);
}

uint64_t sub_A300(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_A364@<X0>(_WORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_63CC(a1, v2 + 16, a2, *(double *)(v2 + 80));
}

uint64_t sub_A370(uint64_t a1)
{
  return a1;
}

unint64_t sub_A39C()
{
  unint64_t result = qword_82448;
  if (!qword_82448)
  {
    type metadata accessor for PopoverGlyphVariantView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82448);
  }
  return result;
}

void *sub_A3F4(void *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *unint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_WORD *)(*(void *)(a4 + 48) + 2 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_A588()
{
  return swift_release();
}

char *sub_A590(uint64_t a1)
{
  return sub_9BA0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_A5A4(uint64_t a1)
{
  return a1;
}

unint64_t sub_A5D0()
{
  unint64_t result = qword_80D58;
  if (!qword_80D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80D58);
  }
  return result;
}

uint64_t sub_A624()
{
  uint64_t v1 = *(long long **)(v0 + 16);
  long long v7 = *v1;
  swift_retain();
  sub_1DB78();
  sub_A5A4((uint64_t)&v7);
  swift_getKeyPath();
  uint64_t v2 = (_OWORD *)swift_allocObject();
  long long v3 = v1[3];
  long long v5 = *v1;
  long long v4 = v1[1];
  v2[3] = v1[2];
  v2[4] = v3;
  v2[1] = v5;
  v2[2] = v4;
  sub_4E7C((uint64_t)v1);
  sub_4890(&qword_80D30);
  sub_AE4C(&qword_80D38, &qword_80D30);
  sub_A808();
  return sub_68010();
}

uint64_t sub_A74C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_A794()
{
  unint64_t result = qword_80D70;
  if (!qword_80D70)
  {
    sub_4FAC(&qword_80D68);
    sub_A808();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80D70);
  }
  return result;
}

unint64_t sub_A808()
{
  unint64_t result = qword_82450;
  if (!qword_82450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82450);
  }
  return result;
}

uint64_t sub_A85C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_4890(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_A8C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_4890(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_A920()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_A970@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v4 = *a1;
  long long v18 = *(_OWORD *)(v2 + 16);
  swift_retain();
  uint64_t v5 = sub_1D6FC();
  sub_A5A4((uint64_t)&v18);
  swift_retain();
  uint64_t v6 = sub_1DC10();
  sub_A5A4((uint64_t)&v18);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_8E78(v4), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void **)(*(void *)(v6 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v10 = sub_1DD08();
  sub_A5A4((uint64_t)&v18);
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_8E78(v4), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_4890(&qword_80D40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_693E0;
    *(_WORD *)(inited + 32) = v4;
    uint64_t v13 = sub_AB18(inited);
    swift_setDeallocating();
  }
  sub_67F10();
  uint64_t result = sub_67F10();
  *(void *)a2 = v5;
  *(_WORD *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v16;
  *(void *)(a2 + 4sub_66CA4(2, 18, 1, 0) = v17;
  *(unsigned char *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v17;
  return result;
}

uint64_t sub_AB18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_4890(&qword_80D78);
    uint64_t v3 = sub_68520();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      int v7 = *(unsigned __int16 *)(a1 + 32 + 2 * v4);
      uint64_t result = sub_687D0();
      unint64_t v9 = result & v6;
      unint64_t v10 = (result & (unint64_t)v6) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (result & v6);
      uint64_t v13 = *(void *)(v3 + 48);
      if ((v12 & v11) != 0)
      {
        while (*(unsigned __int16 *)(v13 + 2 * v9) != v7)
        {
          unint64_t v9 = (v9 + 1) & v6;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v1sub_66CA4(2, 18, 1, 0) = v12 | v11;
        *(_WORD *)(v13 + 2 * v9) = v7;
        uint64_t v14 = *(void *)(v3 + 16);
        BOOL v15 = __OFADD__(v14, 1);
        uint64_t v16 = v14 + 1;
        if (v15)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v16;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

__n128 initializeWithTake for FeatureGroup(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_AC48(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_AC68(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for CTFont(uint64_t a1)
{
}

void sub_ACB8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_AD04()
{
  unint64_t result = qword_80D90;
  if (!qword_80D90)
  {
    sub_4FAC(&qword_80CE0);
    sub_4FAC(&qword_80C50);
    sub_67A20();
    sub_AE4C(&qword_80CD0, &qword_80C50);
    sub_A74C(&qword_80CD8, (void (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2();
    sub_AE4C(&qword_80D98, &qword_80CE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80D90);
  }
  return result;
}

uint64_t sub_AE4C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_AE90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_AF78(uint64_t a1)
{
  if (swift_dynamicCast())
  {
    uint64_t v2 = v4;
  }
  else if (swift_dynamicCast())
  {
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_13338(a1);
  return v2;
}

void sub_B030(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
  if (a4)
  {
    sub_68800(1uLL);
    sub_681E0();
  }
  else
  {
    sub_68800(0);
    sub_68800(a2);
  }
}

uint64_t sub_B0A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) == 0) {
    return (a6 & 1) == 0 && a1 == a4;
  }
  if (a6)
  {
    if (a1 == a4 && a2 == a5) {
      return 1;
    }
    else {
      return sub_68790();
    }
  }
  else
  {
    return 0;
  }
}

uint64_t sub_B0F0()
{
  return 1;
}

uint64_t sub_B100()
{
  return 12383;
}

uint64_t sub_B110()
{
  return 0;
}

void sub_B11C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_B128(uint64_t a1)
{
  unint64_t v2 = sub_B784();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B164(uint64_t a1)
{
  unint64_t v2 = sub_B784();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_B1A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_B1B8()
{
  Swift::UInt v1 = *v0;
  sub_687F0();
  sub_68800(v1);
  return sub_68830();
}

void sub_B200()
{
  sub_68800(*v0);
}

Swift::Int sub_B22C()
{
  Swift::UInt v1 = *v0;
  sub_687F0();
  sub_68800(v1);
  return sub_68830();
}

uint64_t sub_B270()
{
  if (*v0) {
    return 29807;
  }
  else {
    return 7627105;
  }
}

uint64_t sub_B298@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_F5F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_B2C0(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_B2CC(uint64_t a1)
{
  unint64_t v2 = sub_B6DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B308(uint64_t a1)
{
  unint64_t v2 = sub_B6DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B344(uint64_t a1)
{
  unint64_t v2 = sub_B730();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B380(uint64_t a1)
{
  unint64_t v2 = sub_B730();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B3BC(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v20 = a2;
  int v21 = a4;
  v17[1] = a3;
  uint64_t v5 = sub_4890(&qword_80DA0);
  uint64_t v18 = *(void *)(v5 - 8);
  uint64_t v19 = v5;
  __chkstk_darwin(v5);
  int v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_80DA8);
  v17[0] = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_4890(&qword_80DB0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B698(a1, a1[3]);
  sub_B6DC();
  sub_68850();
  if (v21)
  {
    char v23 = 1;
    sub_B730();
    sub_68710();
    uint64_t v15 = v19;
    sub_68720();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v15);
  }
  else
  {
    char v22 = 0;
    sub_B784();
    sub_68710();
    sub_68730();
    (*(void (**)(char *, uint64_t))(v17[0] + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void *sub_B698(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_B6DC()
{
  unint64_t result = qword_82468;
  if (!qword_82468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82468);
  }
  return result;
}

unint64_t sub_B730()
{
  unint64_t result = qword_82470;
  if (!qword_82470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82470);
  }
  return result;
}

unint64_t sub_B784()
{
  unint64_t result = qword_82478;
  if (!qword_82478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82478);
  }
  return result;
}

Swift::Int sub_B7D8(Swift::UInt a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_68800(1uLL);
    sub_681E0();
  }
  else
  {
    sub_68800(0);
    sub_68800(a1);
  }
  return sub_68830();
}

uint64_t sub_B860(void *a1)
{
  uint64_t result = sub_F6BC(a1);
  if (v1) {
    return v3;
  }
  return result;
}

Swift::Int sub_B888()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 16);
  sub_687F0();
  if (v2 == 1)
  {
    sub_68800(1uLL);
    sub_681E0();
  }
  else
  {
    sub_68800(0);
    sub_68800(v1);
  }
  return sub_68830();
}

void sub_B910()
{
  Swift::UInt v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    sub_68800(1uLL);
    sub_681E0();
  }
  else
  {
    sub_68800(0);
    sub_68800(v1);
  }
}

Swift::Int sub_B998()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 16);
  sub_687F0();
  if (v2 == 1)
  {
    sub_68800(1uLL);
    sub_681E0();
  }
  else
  {
    sub_68800(0);
    sub_68800(v1);
  }
  return sub_68830();
}

uint64_t sub_BA1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_F6BC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_BA50(void *a1)
{
  return sub_B3BC(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_BA70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = *((unsigned __int8 *)a2 + 16);
  if (*((unsigned char *)a1 + 16) != 1) {
    return (v3 == v4) & ~v5;
  }
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = a1[1];
  if (v3 == v4 && v6 == a2[1]) {
    return 1;
  }
  else {
    return sub_68790();
  }
}

uint64_t sub_BAD0()
{
  uint64_t v1 = *(void *)v0;
  sub_FBA8(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return v1;
}

uint64_t sub_BB18()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_BB48()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_BB50()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_BB58()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_BB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 56);
  int v6 = *(unsigned __int8 *)(a1 + 57);
  int v7 = *(unsigned __int8 *)(a2 + 56);
  int v8 = *(unsigned __int8 *)(a2 + 57);
  if (*(void *)(a1 + 40) == *(void *)(a2 + 40) && *(void *)(a1 + 48) == *(void *)(a2 + 48))
  {
    uint64_t result = 0;
    if (v5 != v7) {
      return result;
    }
    goto LABEL_11;
  }
  char v10 = sub_68790();
  uint64_t result = 0;
  if ((v10 & 1) != 0 && ((v5 ^ v7) & 1) == 0)
  {
LABEL_11:
    if ((v6 ^ v8)) {
      return result;
    }
    uint64_t v11 = v2 - 1;
    if (!v11) {
      return 1;
    }
    uint64_t v12 = (unsigned __int8 *)(a1 + 89);
    uint64_t v13 = (unsigned __int8 *)(a2 + 89);
    while (*(void *)(v12 - 25) == *(void *)(v13 - 25))
    {
      int v14 = *(v12 - 1);
      int v15 = *v12;
      int v16 = *(v13 - 1);
      int v17 = *v13;
      if (*(void *)(v12 - 17) == *(void *)(v13 - 17) && *(void *)(v12 - 9) == *(void *)(v13 - 9))
      {
        uint64_t result = 0;
        if (v14 != v16) {
          return result;
        }
      }
      else
      {
        char v19 = sub_68790();
        uint64_t result = 0;
        if (v19 & 1) == 0 || ((v14 ^ v16)) {
          return result;
        }
      }
      if (((v15 ^ v17) & 1) == 0)
      {
        v12 += 32;
        v13 += 32;
        uint64_t result = 1;
        if (--v11) {
          continue;
        }
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_BCFC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3 & 1;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 4sub_66CA4(2, 18, 1, 0) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  return result;
}

uint64_t sub_BD20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return sub_FBA8(v2, v3, v4);
}

uint64_t sub_BD34(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_FBB8((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t sub_BD90(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_BDC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

uint64_t sub_BDCC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (a4 >> 8) & 1;
}

uint64_t sub_BDD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (a1 != a5) {
    return 0;
  }
  if (a2 == a6 && a3 == a7)
  {
    if ((a4 ^ a8)) {
      return 0;
    }
    return ((a4 & 0x100) == 0) ^ ((unsigned __int16)(a8 & 0x100) >> 8);
  }
  char v11 = sub_68790();
  uint64_t result = 0;
  if ((v11 & 1) != 0 && ((a4 ^ a8) & 1) == 0) {
    return ((a4 & 0x100) == 0) ^ ((unsigned __int16)(a8 & 0x100) >> 8);
  }
  return result;
}

void sub_BE80(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_BE8C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 24);
  int v3 = *(unsigned __int8 *)(a1 + 25);
  int v4 = *(unsigned __int8 *)(a2 + 24);
  int v5 = *(unsigned __int8 *)(a2 + 25);
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    if (v2 == v4) {
      return v3 ^ v5 ^ 1u;
    }
    return 0;
  }
  char v7 = sub_68790();
  uint64_t result = 0;
  if ((v7 & 1) != 0 && ((v2 ^ v4) & 1) == 0) {
    return v3 ^ v5 ^ 1u;
  }
  return result;
}

void sub_BF28()
{
  qword_87C88 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t *sub_BF3C()
{
  if (qword_82460 != -1) {
    swift_once();
  }
  return &qword_87C88;
}

uint64_t sub_BF88()
{
  if (qword_82460 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_BFE4(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  sub_FBA8(*(void *)a1, v3, v4);
  uint64_t v5 = sub_FE28(v2, v3, v4);
  if (v6 == 9)
  {
    if (sub_60330())
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    uint64_t v7 = v5;
  }
  sub_FF80(a1);
  return v7;
}

uint64_t sub_C078(uint64_t a1, uint64_t a2, char a3)
{
  return sub_FE28(a1, a2, a3 & 1);
}

uint64_t sub_C080(uint64_t a1, unint64_t a2)
{
  switch(a2)
  {
    case 0uLL:
      unint64_t v4 = 0x80000000000744D0;
      uint64_t v5 = 1702060355;
      uint64_t v6 = (void *)0xE400000000000000;
      goto LABEL_14;
    case 1uLL:
      uint64_t v8 = 0xD000000000000037;
      unint64_t v4 = 0x8000000000074490;
      uint64_t v5 = 0x20737265626D754ELL;
      uint64_t v6 = (void *)0xEF676E6963617053;
      goto LABEL_15;
    case 2uLL:
      uint64_t v8 = 0xD000000000000037;
      unint64_t v4 = 0x8000000000074490;
      uint64_t v5 = 0x20737265626D754ELL;
      uint64_t v6 = (void *)0xED0000656C797453;
      goto LABEL_15;
    case 3uLL:
      uint64_t v5 = 0xD000000000000011;
      uint64_t v8 = 0xD000000000000041;
      uint64_t v6 = (void *)0x8000000000074420;
      uint64_t v9 = "Title for section containing options related to vertical position";
      goto LABEL_10;
    case 4uLL:
      uint64_t v5 = 0xD000000000000010;
      uint64_t v8 = 0xD000000000000040;
      uint64_t v6 = (void *)0x80000000000743B0;
      uint64_t v9 = "Title for section containing options related to display variants";
      goto LABEL_10;
    case 5uLL:
      unint64_t v4 = 0x8000000000074370;
      uint64_t v5 = 0x697473696C797453;
      unsigned int v10 = 1699946595;
      goto LABEL_13;
    case 6uLL:
      uint64_t v5 = 0xD000000000000017;
      uint64_t v8 = 0xD000000000000047;
      uint64_t v6 = (void *)0x8000000000074300;
      uint64_t v9 = "Title for section containing options related to OpenType stylistic sets";
LABEL_10:
      unint64_t v4 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      goto LABEL_15;
    case 7uLL:
      uint64_t v8 = 0xD000000000000030;
      unint64_t v4 = 0x80000000000742C0;
      uint64_t v5 = 0x726568744FLL;
      uint64_t v6 = (void *)0xE500000000000000;
      goto LABEL_15;
    case 8uLL:
      unint64_t v4 = 0x8000000000074280;
      uint64_t v5 = 0x6156206870796C47;
      unsigned int v10 = 1851877746;
LABEL_13:
      uint64_t v6 = (void *)(v10 | 0xEE00737400000000);
LABEL_14:
      uint64_t v8 = 0xD00000000000003ELL;
LABEL_15:
      uint64_t v7 = sub_31274(v5, v6, v8, v4);
      break;
    default:
      uint64_t v7 = a1;
      break;
  }
  sub_FFF0(a1, a2);
  return v7;
}

void sub_C2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 0:
      Swift::UInt v3 = 0;
      goto LABEL_14;
    case 1:
      Swift::UInt v3 = 1;
      goto LABEL_14;
    case 2:
      Swift::UInt v3 = 2;
      goto LABEL_14;
    case 3:
      Swift::UInt v3 = 3;
      goto LABEL_14;
    case 4:
      Swift::UInt v3 = 4;
      goto LABEL_14;
    case 5:
      Swift::UInt v3 = 5;
      goto LABEL_14;
    case 6:
      Swift::UInt v3 = 6;
      goto LABEL_14;
    case 7:
      Swift::UInt v3 = 8;
      goto LABEL_14;
    case 8:
      Swift::UInt v3 = 9;
LABEL_14:
      sub_68800(v3);
      break;
    default:
      sub_68800(7uLL);
      sub_681E0();
      break;
  }
}

unint64_t sub_C3EC(char a1)
{
  unint64_t result = 0x676E69736163;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0x53737265626D756ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x5679616C70736964;
      break;
    case 5:
      unint64_t result = 0x697473696C797473;
      break;
    case 6:
      unint64_t result = 0x73696C797453746FLL;
      break;
    case 7:
      unint64_t result = 0x64656D616ELL;
      break;
    case 8:
      unint64_t result = 0x726568746FLL;
      break;
    case 9:
      unint64_t result = 0x7261566870796C67;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_C554()
{
  return 0;
}

uint64_t sub_C560(uint64_t a1)
{
  unint64_t v2 = sub_10540();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C59C(uint64_t a1)
{
  unint64_t v2 = sub_10540();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_C5D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_C5EC()
{
  return sub_C3EC(*v0);
}

uint64_t sub_C5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10594(a1, a2);
  *a3 = result;
  return result;
}

void sub_C61C(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_C628(uint64_t a1)
{
  unint64_t v2 = sub_101F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C664(uint64_t a1)
{
  unint64_t v2 = sub_101F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_C6A0(uint64_t a1)
{
  unint64_t v2 = sub_103F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C6DC(uint64_t a1)
{
  unint64_t v2 = sub_103F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_C718(uint64_t a1)
{
  unint64_t v2 = sub_1024C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C754(uint64_t a1)
{
  unint64_t v2 = sub_1024C();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_C790()
{
  return sub_68830();
}

void sub_C7D4()
{
}

Swift::Int sub_C7FC()
{
  return sub_68830();
}

uint64_t sub_C83C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_68790();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_C8BC(uint64_t a1)
{
  unint64_t v2 = sub_102F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C8F8(uint64_t a1)
{
  unint64_t v2 = sub_102F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_C934(uint64_t a1)
{
  unint64_t v2 = sub_104EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C970(uint64_t a1)
{
  unint64_t v2 = sub_104EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_C9AC(uint64_t a1)
{
  unint64_t v2 = sub_10498();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_C9E8(uint64_t a1)
{
  unint64_t v2 = sub_10498();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_CA24(uint64_t a1)
{
  unint64_t v2 = sub_10348();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CA60(uint64_t a1)
{
  unint64_t v2 = sub_10348();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_CA9C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_CACC(uint64_t a1)
{
  unint64_t v2 = sub_102A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CB08(uint64_t a1)
{
  unint64_t v2 = sub_102A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_CB44(uint64_t a1)
{
  unint64_t v2 = sub_1039C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CB80(uint64_t a1)
{
  unint64_t v2 = sub_1039C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_CBBC(uint64_t a1)
{
  unint64_t v2 = sub_10444();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CBF8(uint64_t a1)
{
  unint64_t v2 = sub_10444();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_CC34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v4 = sub_4890(&qword_80DB8);
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  __chkstk_darwin(v4);
  long long v65 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_4890(&qword_80DC0);
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_80DC8);
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v61 = v8;
  __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_4890(&qword_80DD0);
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  __chkstk_darwin(v10);
  uint64_t v56 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_4890(&qword_80DD8);
  uint64_t v54 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  __chkstk_darwin(v12);
  char v53 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_4890(&qword_80DE0);
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v50 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_4890(&qword_80DE8);
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v47 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_4890(&qword_80DF0);
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  int v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_4890(&qword_80DF8);
  uint64_t v44 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_4890(&qword_80E00);
  uint64_t v43 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  char v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_4890(&qword_80E08);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v70 = v24;
  uint64_t v71 = v25;
  __chkstk_darwin(v24);
  unint64_t v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B698(a1, a1[3]);
  sub_101F8();
  uint64_t v28 = v69;
  sub_68850();
  switch(v28)
  {
    case 0:
      char v72 = 0;
      sub_10540();
      uint64_t v29 = v70;
      sub_68710();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v23, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v27, v29);
    case 1:
      char v73 = 1;
      sub_104EC();
      uint64_t v34 = v70;
      sub_68710();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v20, v18);
      goto LABEL_15;
    case 2:
      char v74 = 2;
      sub_10498();
      uint64_t v34 = v70;
      sub_68710();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v45 + 8);
      uint64_t v36 = v17;
      uint64_t v37 = &v82;
      goto LABEL_8;
    case 3:
      char v75 = 3;
      sub_10444();
      uint64_t v38 = v47;
      uint64_t v34 = v70;
      sub_68710();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v36 = v38;
      uint64_t v37 = &v83;
      goto LABEL_8;
    case 4:
      char v76 = 4;
      sub_103F0();
      uint64_t v39 = v50;
      uint64_t v34 = v70;
      sub_68710();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v51 + 8);
      uint64_t v36 = v39;
      uint64_t v37 = &v84;
LABEL_8:
      uint64_t v40 = *(v37 - 32);
      goto LABEL_14;
    case 5:
      char v77 = 5;
      sub_1039C();
      BOOL v41 = v53;
      uint64_t v34 = v70;
      sub_68710();
      uint64_t v42 = v54;
      uint64_t v40 = v55;
      goto LABEL_13;
    case 6:
      char v78 = 6;
      sub_10348();
      BOOL v41 = v56;
      uint64_t v34 = v70;
      sub_68710();
      uint64_t v42 = v57;
      uint64_t v40 = v58;
      goto LABEL_13;
    case 7:
      char v80 = 8;
      sub_102A0();
      BOOL v41 = v62;
      uint64_t v34 = v70;
      sub_68710();
      uint64_t v42 = v63;
      uint64_t v40 = v64;
      goto LABEL_13;
    case 8:
      char v81 = 9;
      sub_1024C();
      BOOL v41 = v65;
      uint64_t v34 = v70;
      sub_68710();
      uint64_t v42 = v66;
      uint64_t v40 = v67;
LABEL_13:
      uint64_t v35 = *(void (**)(char *, uint64_t))(v42 + 8);
      uint64_t v36 = v41;
LABEL_14:
      v35(v36, v40);
LABEL_15:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v27, v34);
      break;
    default:
      char v79 = 7;
      sub_102F4();
      uint64_t v31 = v59;
      uint64_t v32 = v70;
      sub_68710();
      uint64_t v33 = v61;
      sub_68720();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v33);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v27, v32);
      break;
  }
  return result;
}

Swift::Int sub_D600(uint64_t a1, uint64_t a2)
{
  sub_687F0();
  sub_C2EC((uint64_t)v5, a1, a2);
  return sub_68830();
}

uint64_t sub_D650(void *a1)
{
  return sub_10A4C(a1);
}

uint64_t sub_D668(uint64_t *a1, uint64_t a2)
{
  return sub_10004(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

BOOL sub_D67C(uint64_t a1, uint64_t *a2)
{
  return sub_D690(*(void *)a1, *(void *)(a1 + 8), *a2, a2[1]);
}

BOOL sub_D690(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a4)
  {
    case 0:
      if (!a2) {
        goto LABEL_35;
      }
      unint64_t v4 = 0;
      if (a2 <= 8) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 1:
      if (a2 == 1) {
        goto LABEL_35;
      }
      unint64_t v4 = 1;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 2:
      if (a2 == 2) {
        goto LABEL_35;
      }
      unint64_t v4 = 2;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 3:
      if (a2 == 3) {
        goto LABEL_35;
      }
      unint64_t v4 = 3;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 4:
      if (a2 == 4) {
        goto LABEL_35;
      }
      unint64_t v4 = 4;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      if (a2 == 5) {
        goto LABEL_35;
      }
      unint64_t v4 = 5;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 6:
      if (a2 == 6) {
        goto LABEL_35;
      }
      unint64_t v4 = 6;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      if (a2 == 7) {
        goto LABEL_35;
      }
      unint64_t v4 = 8;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      if (a2 == 8) {
        goto LABEL_35;
      }
      unint64_t v4 = 9;
      if (a2 <= 8) {
        goto LABEL_28;
      }
LABEL_31:
      unint64_t v5 = 7;
      goto LABEL_32;
    default:
      if (a2 >= 9)
      {
        if (a3 == a1 && a4 == a2)
        {
LABEL_35:
          char v6 = 0;
        }
        else
        {
          char v8 = sub_68790();
          char v6 = 0;
          if ((v8 & 1) == 0) {
            char v6 = sub_68790();
          }
        }
      }
      else
      {
        unint64_t v4 = 7;
LABEL_28:
        unint64_t v5 = qword_6A550[a2];
LABEL_32:
        char v6 = v4 < v5;
      }
      return (v6 & 1) == 0;
  }
}

BOOL sub_D874(uint64_t *a1, uint64_t a2)
{
  return sub_D888(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

BOOL sub_D888(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (!a4) {
        goto LABEL_35;
      }
      unint64_t v4 = 0;
      if (a4 <= 8) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 1:
      if (a4 == 1) {
        goto LABEL_35;
      }
      unint64_t v4 = 1;
      if (a4 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 2:
      if (a4 == 2) {
        goto LABEL_35;
      }
      unint64_t v4 = 2;
      if (a4 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 3:
      if (a4 == 3) {
        goto LABEL_35;
      }
      unint64_t v4 = 3;
      if (a4 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 4:
      if (a4 == 4) {
        goto LABEL_35;
      }
      unint64_t v4 = 4;
      if (a4 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      if (a4 == 5) {
        goto LABEL_35;
      }
      unint64_t v4 = 5;
      if (a4 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 6:
      if (a4 == 6) {
        goto LABEL_35;
      }
      unint64_t v4 = 6;
      if (a4 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      if (a4 == 7) {
        goto LABEL_35;
      }
      unint64_t v4 = 8;
      if (a4 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      if (a4 == 8) {
        goto LABEL_35;
      }
      unint64_t v4 = 9;
      if (a4 <= 8) {
        goto LABEL_28;
      }
LABEL_31:
      unint64_t v5 = 7;
      goto LABEL_32;
    default:
      if (a4 >= 9)
      {
        if (a1 == a3 && a2 == a4)
        {
LABEL_35:
          char v6 = 0;
        }
        else
        {
          char v8 = sub_68790();
          char v6 = 0;
          if ((v8 & 1) == 0) {
            char v6 = sub_68790();
          }
        }
      }
      else
      {
        unint64_t v4 = 7;
LABEL_28:
        unint64_t v5 = qword_6A550[a4];
LABEL_32:
        char v6 = v4 < v5;
      }
      return (v6 & 1) == 0;
  }
}

uint64_t sub_DA6C(uint64_t a1, uint64_t *a2)
{
  return sub_DA80(*(void *)a1, *(void *)(a1 + 8), *a2, a2[1]);
}

uint64_t sub_DA80(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a4)
  {
    case 0:
      if (!a2) {
        return 0;
      }
      unint64_t v4 = 0;
      if (a2 <= 8) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 1:
      if (a2 == 1) {
        return 0;
      }
      unint64_t v4 = 1;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 2:
      if (a2 == 2) {
        return 0;
      }
      unint64_t v4 = 2;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 3:
      if (a2 == 3) {
        return 0;
      }
      unint64_t v4 = 3;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 4:
      if (a2 == 4) {
        return 0;
      }
      unint64_t v4 = 4;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      if (a2 == 5) {
        return 0;
      }
      unint64_t v4 = 5;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 6:
      if (a2 == 6) {
        return 0;
      }
      unint64_t v4 = 6;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      if (a2 == 7) {
        return 0;
      }
      unint64_t v4 = 8;
      if (a2 > 8) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      if (a2 == 8) {
        return 0;
      }
      unint64_t v4 = 9;
      if (a2 <= 8) {
        goto LABEL_28;
      }
LABEL_31:
      unint64_t v5 = 7;
      return v4 < v5;
    default:
      if (a2 >= 9)
      {
        if (a3 == a1 && a4 == a2)
        {
          return 0;
        }
        else
        {
          char v7 = sub_68790();
          uint64_t result = 0;
          if ((v7 & 1) == 0)
          {
            return sub_68790();
          }
        }
      }
      else
      {
        unint64_t v4 = 7;
LABEL_28:
        unint64_t v5 = qword_6A550[a2];
        return v4 < v5;
      }
      return result;
  }
}

Swift::Int sub_DC74()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_687F0();
  sub_C2EC((uint64_t)v4, v1, v2);
  return sub_68830();
}

void sub_DCC0(uint64_t a1)
{
  sub_C2EC(a1, *v1, v1[1]);
}

Swift::Int sub_DCC8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_687F0();
  sub_C2EC((uint64_t)v4, v1, v2);
  return sub_68830();
}

uint64_t sub_DD10(void *a1)
{
  return sub_CC34(a1, *v1, v1[1]);
}

uint64_t sub_DD2C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10A4C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_DD58(uint64_t *a1, uint64_t a2)
{
  return sub_FD1C(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_DD6C(uint64_t a1)
{
  if (qword_82460 != -1) {
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v2 = qword_87C88;
    int64_t v3 = *(void *)(qword_87C88 + 16);
    uint64_t v47 = a1;
    if (v3)
    {
      *(void *)&long long v48 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_F2A4(0, v3, 0);
      unint64_t v4 = (void *)v48;
      uint64_t v5 = (unint64_t *)(v2 + 40);
      do
      {
        uint64_t v6 = *(v5 - 1);
        unint64_t v7 = *v5;
        sub_FFF0(v6, *v5);
        *(void *)&long long v48 = v4;
        unint64_t v9 = v4[2];
        unint64_t v8 = v4[3];
        if (v9 >= v8 >> 1)
        {
          sub_F2A4((void *)(v8 > 1), v9 + 1, 1);
          unint64_t v4 = (void *)v48;
        }
        v5 += 2;
        v4[2] = v9 + 1;
        uint64_t v10 = &v4[3 * v9];
        v10[4] = v6;
        v10[5] = v7;
        v10[6] = _swiftEmptyArrayStorage;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
      a1 = v47;
    }
    else
    {
      unint64_t v4 = _swiftEmptyArrayStorage;
    }
    if (v4[2])
    {
      sub_4890(&qword_80E10);
      uint64_t v11 = (void *)sub_68660();
    }
    else
    {
      uint64_t v11 = _swiftEmptyDictionarySingleton;
    }
    *(void *)&long long v48 = v11;
    uint64_t v12 = (void *)swift_bridgeObjectRetain();
    sub_E668(v12, 1, &v48);
    swift_bridgeObjectRelease();
    uint64_t v13 = v48;
    uint64_t v14 = *(void *)(a1 + 16);
    if (!v14) {
      return sub_E2F4((uint64_t)_swiftEmptyDictionarySingleton, v13);
    }
    uint64_t v46 = v48;
    swift_bridgeObjectRetain();
    for (uint64_t i = 32; ; i += 72)
    {
      long long v20 = *(_OWORD *)(a1 + i + 48);
      long long v50 = *(_OWORD *)(a1 + i + 32);
      long long v51 = v20;
      uint64_t v52 = *(void *)(a1 + i + 64);
      long long v21 = *(_OWORD *)(a1 + i + 16);
      long long v48 = *(_OWORD *)(a1 + i);
      long long v49 = v21;
      sub_117DC(&v48, (uint64_t)&v53);
      sub_117DC(&v53, (uint64_t)&v54);
      if (v55)
      {
        sub_681B0();
        sub_117F4((uint64_t)&v48);
        sub_117F4((uint64_t)&v48);
        sub_11854((uint64_t)&v53);
        v56._countAndFlagsBits = 30307;
        v56._object = (void *)0xE200000000000000;
        sub_68260(v56);
        sub_11888((uint64_t)&v53);
        swift_bridgeObjectRelease();
LABEL_18:
        if (sub_60330())
        {
          sub_FF80((uint64_t)&v48);
          uint64_t v22 = 0;
          unint64_t v23 = 7;
        }
        else
        {
          uint64_t v22 = *((void *)&v49 + 1);
          unint64_t v23 = v50;
          swift_bridgeObjectRetain();
          sub_FF80((uint64_t)&v48);
        }
      }
      else
      {
        unint64_t v23 = 0;
        switch(v54)
        {
          case 3:
          case 33:
          case 37:
          case 38:
            break;
          case 6:
            unint64_t v23 = 1;
            break;
          case 8:
          case 19:
          case 36:
            unint64_t v23 = 4;
            break;
          case 10:
            unint64_t v23 = 3;
            break;
          case 21:
            unint64_t v23 = 2;
            break;
          case 35:
            unint64_t v23 = 5;
            break;
          default:
            sub_117F4((uint64_t)&v48);
            sub_117F4((uint64_t)&v48);
            goto LABEL_18;
        }
        sub_117F4((uint64_t)&v48);
        uint64_t v22 = 0;
      }
      unint64_t v25 = sub_EA0C(v22, v23);
      uint64_t v26 = _swiftEmptyDictionarySingleton[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        break;
      }
      char v29 = v24;
      if (_swiftEmptyDictionarySingleton[3] < v28)
      {
        sub_EA84(v28, 1);
        unint64_t v30 = sub_EA0C(v22, v23);
        if ((v29 & 1) != (v31 & 1))
        {
          sub_687C0();
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0xE264);
        }
        unint64_t v25 = v30;
      }
      if (v29)
      {
        sub_118BC(v22, v23);
        uint64_t v32 = _swiftEmptyDictionarySingleton[7];
        uint64_t v33 = *(char **)(v32 + 8 * v25);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v32 + 8 * v25) = v33;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v33 = sub_F184(0, *((void *)v33 + 2) + 1, 1, v33);
          *(void *)(v32 + 8 * v25) = v33;
        }
        unint64_t v36 = *((void *)v33 + 2);
        unint64_t v35 = *((void *)v33 + 3);
        if (v36 >= v35 >> 1)
        {
          uint64_t v33 = sub_F184((char *)(v35 > 1), v36 + 1, 1, v33);
          *(void *)(v32 + 8 * v25) = v33;
        }
        *((void *)v33 + 2) = v36 + 1;
        uint64_t v16 = &v33[72 * v36];
        *((_OWORD *)v16 + 2) = v48;
        long long v17 = v49;
        long long v18 = v50;
        long long v19 = v51;
        *((void *)v16 + 12) = v52;
        *((_OWORD *)v16 + 4) = v18;
        *((_OWORD *)v16 + 5) = v19;
        *((_OWORD *)v16 + 3) = v17;
        a1 = v47;
      }
      else
      {
        sub_4890(&qword_80E18);
        uint64_t v37 = swift_allocObject();
        long long v38 = v50;
        long long v39 = v51;
        long long v40 = v48;
        *(_OWORD *)(v37 + 48) = v49;
        *(_OWORD *)(v37 + 64) = v38;
        *(_OWORD *)(v37 + 8sub_66CA4(2, 18, 1, 0) = v39;
        *(void *)(v37 + 96) = v52;
        *(_OWORD *)(v37 + 16) = xmmword_693E0;
        *(_OWORD *)(v37 + 32) = v40;
        _swiftEmptyDictionarySingleton[(v25 >> 6) + 8] |= 1 << v25;
        BOOL v41 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v25);
        *BOOL v41 = v22;
        v41[1] = v23;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v25) = v37;
        uint64_t v42 = _swiftEmptyDictionarySingleton[2];
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_43;
        }
        _swiftEmptyDictionarySingleton[2] = v44;
      }
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = v46;
        return sub_E2F4((uint64_t)_swiftEmptyDictionarySingleton, v13);
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_once();
  }
}

uint64_t sub_E2F4(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_E380(a1, (uint64_t)sub_F400, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_E380(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_F448();
  if (!v9)
  {
LABEL_28:
    swift_release();
    swift_bridgeObjectRelease();
    sub_A588();
    return swift_release();
  }
  uint64_t v10 = v7;
  unint64_t v11 = v8;
  uint64_t v12 = v9;
  while (1)
  {
    long long v17 = (void *)*a5;
    unint64_t v19 = sub_EA0C(v10, v11);
    uint64_t v20 = v17[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    char v23 = v18;
    if (v17[3] >= v22)
    {
      if (a4)
      {
        uint64_t v26 = (void *)*a5;
        if ((v18 & 1) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        sub_EE50();
        uint64_t v26 = (void *)*a5;
        if ((v23 & 1) == 0) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      sub_EA84(v22, a4 & 1);
      unint64_t v24 = sub_EA0C(v10, v11);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_35;
      }
      unint64_t v19 = v24;
      uint64_t v26 = (void *)*a5;
      if ((v23 & 1) == 0)
      {
LABEL_26:
        v26[(v19 >> 6) + 8] |= 1 << v19;
        long long v38 = (uint64_t *)(v26[6] + 16 * v19);
        *long long v38 = v10;
        v38[1] = v11;
        *(void *)(v26[7] + 8 * v19) = v12;
        uint64_t v39 = v26[2];
        BOOL v36 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v36) {
          goto LABEL_31;
        }
        v26[2] = v40;
        goto LABEL_5;
      }
    }
    unint64_t v42 = v11;
    uint64_t v27 = v10;
    uint64_t v28 = a5;
    char v29 = *(char **)(v26[7] + 8 * v19);
    uint64_t v30 = *(void *)(v12 + 16);
    int64_t v31 = *((void *)v29 + 2);
    int64_t v32 = v31 + v30;
    if (__OFADD__(v31, v30)) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v32 > *((void *)v29 + 3) >> 1)
    {
      if (v31 <= v32) {
        int64_t v34 = v31 + v30;
      }
      else {
        int64_t v34 = v31;
      }
      char v29 = sub_F184(isUniquelyReferenced_nonNull_native, v34, 1, v29);
    }
    a5 = v28;
    if (*(void *)(v12 + 16))
    {
      unint64_t v13 = v42;
      if ((*((void *)v29 + 3) >> 1) - *((void *)v29 + 2) < v30) {
        goto LABEL_33;
      }
      swift_arrayInitWithCopy();
      if (v30)
      {
        uint64_t v35 = *((void *)v29 + 2);
        BOOL v36 = __OFADD__(v35, v30);
        uint64_t v37 = v35 + v30;
        if (v36) {
          goto LABEL_34;
        }
        *((void *)v29 + 2) = v37;
      }
    }
    else
    {
      unint64_t v13 = v42;
      if (v30) {
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
    sub_118BC(v27, v13);
    uint64_t v14 = v26[7];
    swift_bridgeObjectRelease();
    *(void *)(v14 + 8 * v19) = v29;
LABEL_5:
    uint64_t v10 = sub_F448();
    unint64_t v11 = v15;
    uint64_t v12 = v16;
    a4 = 1;
    if (!v16) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = sub_687C0();
  __break(1u);
  return result;
}

uint64_t sub_E668(void *a1, char a2, void *a3)
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v39 = a1[2];
  uint64_t v7 = a1[4];
  unint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  sub_FFF0(v7, v6);
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_EA0C(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_EE50();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v20 = (uint64_t *)(v19[6] + 16 * v11);
    *uint64_t v20 = v7;
    v20[1] = v6;
    *(void *)(v19[7] + 8 * v11) = v8;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v23;
    uint64_t v24 = v39 - 1;
    if (v39 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 9; ; i += 3)
    {
      uint64_t v7 = *(i - 2);
      unint64_t v6 = *(i - 1);
      uint64_t v26 = *i;
      uint64_t v27 = (void *)*a3;
      sub_FFF0(v7, v6);
      swift_bridgeObjectRetain();
      unint64_t v28 = sub_EA0C(v7, v6);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v22 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v22) {
        break;
      }
      char v33 = v29;
      if (v27[3] < v32)
      {
        sub_EA84(v32, 1);
        unint64_t v28 = sub_EA0C(v7, v6);
        if ((v33 & 1) != (v34 & 1)) {
          goto LABEL_25;
        }
      }
      if (v33) {
        goto LABEL_10;
      }
      uint64_t v35 = (void *)*a3;
      *(void *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      BOOL v36 = (uint64_t *)(v35[6] + 16 * v28);
      *BOOL v36 = v7;
      v36[1] = v6;
      *(void *)(v35[7] + 8 * v28) = v26;
      uint64_t v37 = v35[2];
      BOOL v22 = __OFADD__(v37, 1);
      uint64_t v38 = v37 + 1;
      if (v22) {
        goto LABEL_24;
      }
      v35[2] = v38;
      if (!--v24) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_EA84(v14, a2 & 1);
  unint64_t v16 = sub_EA0C(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_4890(&qword_80E38);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_118BC(v7, v6);
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_687C0();
  __break(1u);
LABEL_26:
  sub_68540(30);
  v40._object = (void *)0x8000000000074570;
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  sub_68210(v40);
  sub_68600();
  v41._countAndFlagsBits = 39;
  v41._object = (void *)0xE100000000000000;
  sub_68210(v41);
  uint64_t result = sub_68620();
  __break(1u);
  return result;
}

unint64_t sub_EA0C(uint64_t a1, unint64_t a2)
{
  sub_687F0();
  sub_C2EC((uint64_t)v6, a1, a2);
  Swift::Int v4 = sub_68830();
  return sub_F008(a1, a2, v4);
}

uint64_t sub_EA84(uint64_t a1, char a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_4890(&qword_80E10);
  uint64_t v6 = sub_68650();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_50;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v33 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_51;
    }
    if (v16 >= v32) {
      break;
    }
    unint64_t v17 = v33[v16];
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v32) {
        break;
      }
      unint64_t v17 = v33[v12];
      if (!v17)
      {
        int64_t v18 = v16 + 2;
        if (v18 >= v32) {
          break;
        }
        unint64_t v17 = v33[v18];
        if (!v17)
        {
          while (1)
          {
            int64_t v12 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              goto LABEL_52;
            }
            if (v12 >= v32) {
              goto LABEL_45;
            }
            unint64_t v17 = v33[v12];
            ++v18;
            if (v17) {
              goto LABEL_21;
            }
          }
        }
        int64_t v12 = v18;
      }
    }
LABEL_21:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_22:
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    long long v34 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v15);
    unint64_t v20 = *(void *)(*(void *)(v5 + 48) + 16 * v15 + 8);
    if ((a2 & 1) == 0)
    {
      sub_FFF0(v34, v20);
      swift_bridgeObjectRetain();
    }
    sub_687F0();
    switch(v20)
    {
      case 0uLL:
        Swift::UInt v21 = 0;
        goto LABEL_35;
      case 1uLL:
        Swift::UInt v21 = 1;
        goto LABEL_35;
      case 2uLL:
        Swift::UInt v21 = 2;
        goto LABEL_35;
      case 3uLL:
        Swift::UInt v21 = 3;
        goto LABEL_35;
      case 4uLL:
        Swift::UInt v21 = 4;
        goto LABEL_35;
      case 5uLL:
        Swift::UInt v21 = 5;
        goto LABEL_35;
      case 6uLL:
        Swift::UInt v21 = 6;
        goto LABEL_35;
      case 7uLL:
        Swift::UInt v21 = 8;
        goto LABEL_35;
      case 8uLL:
        Swift::UInt v21 = 9;
LABEL_35:
        sub_68800(v21);
        break;
      default:
        sub_68800(7uLL);
        sub_681E0();
        break;
    }
    Swift::Int v22 = sub_68830();
    uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v24 = v22 & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v26 = 0;
    unint64_t v27 = (unint64_t)(63 - v23) >> 6;
    do
    {
      if (++v25 == v27 && (v26 & 1) != 0)
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0xEE2CLL);
      }
      BOOL v28 = v25 == v27;
      if (v25 == v27) {
        unint64_t v25 = 0;
      }
      v26 |= v28;
      uint64_t v29 = *(void *)(v11 + 8 * v25);
    }
    while (v29 == -1);
    unint64_t v13 = __clz(__rbit64(~v29)) + (v25 << 6);
LABEL_7:
    *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v13) = v34;
    *(void *)(*(void *)(v7 + 56) + 8 * v13) = v19;
    ++*(void *)(v7 + 16);
  }
LABEL_45:
  swift_release();
  int64_t v3 = v2;
  if (a2)
  {
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    if (v30 >= 64) {
      bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *char v33 = -1 << v30;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_50:
  uint64_t result = swift_release();
  *int64_t v3 = v7;
  return result;
}

void *sub_EE50()
{
  uint64_t v1 = v0;
  sub_4890(&qword_80E10);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_68640();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_FFF0(v19, *((unint64_t *)&v19 + 1));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_F008(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    while (2)
    {
      uint64_t v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      switch(v12)
      {
        case 0:
          if (a2) {
            goto LABEL_4;
          }
          break;
        case 1:
          if (a2 != 1) {
            goto LABEL_4;
          }
          break;
        case 2:
          if (a2 != 2) {
            goto LABEL_4;
          }
          break;
        case 3:
          if (a2 != 3) {
            goto LABEL_4;
          }
          break;
        case 4:
          if (a2 != 4) {
            goto LABEL_4;
          }
          break;
        case 5:
          if (a2 != 5) {
            goto LABEL_4;
          }
          break;
        case 6:
          if (a2 != 6) {
            goto LABEL_4;
          }
          break;
        case 7:
          if (a2 != 7) {
            goto LABEL_4;
          }
          break;
        case 8:
          if (a2 != 8) {
            goto LABEL_4;
          }
          break;
        default:
          if (a2 < 9 || (*v11 == a1 ? (BOOL v13 = v12 == a2) : (BOOL v13 = 0), !v13 && (sub_68790() & 1) == 0))
          {
LABEL_4:
            unint64_t v6 = (v6 + 1) & v9;
            if ((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6)) {
              continue;
            }
          }
          break;
      }
      break;
    }
  }
  return v6;
}

char *sub_F184(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80E18);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  BOOL v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_F2A4(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_F2C4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_F2C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80E40);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_80E48);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_F400@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  sub_FFF0(v3, v2);
  return swift_bridgeObjectRetain();
}

uint64_t sub_F448()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    int64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    size_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    sub_FFF0(v8, v9);
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    sub_118BC(v8, v9);
    swift_bridgeObjectRelease();
    return v19;
  }
  BOOL v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          BOOL v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            BOOL v13 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            BOOL v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  BOOL v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_F5F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7627105 && a2 == 0xE300000000000000;
  if (v2 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 29807 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_68790();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_F6BC(void *a1)
{
  uint64_t v26 = sub_4890(&qword_80EB0);
  uint64_t v28 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  int64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_4890(&qword_80EB8);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_4890(&qword_80EC0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v29 = a1;
  uint64_t v12 = (uint64_t)sub_B698(a1, v11);
  sub_B6DC();
  uint64_t v13 = v30;
  sub_68840();
  if (v13) {
    goto LABEL_7;
  }
  uint64_t v30 = v8;
  unint64_t v14 = v10;
  uint64_t v15 = sub_68700();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v17 = sub_68580();
    swift_allocError();
    long long v19 = v18;
    sub_4890(&qword_80EA8);
    *long long v19 = &type metadata for FeatureIdentifier;
    uint64_t v12 = (uint64_t)v10;
    sub_686B0();
    sub_68570();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, enum case for DecodingError.typeMismatch(_:), v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
LABEL_7:
    uint64_t v24 = (uint64_t)v29;
    goto LABEL_8;
  }
  int v16 = *(unsigned __int8 *)(v15 + 32);
  if (v16)
  {
    uint64_t v27 = v15;
    char v33 = 1;
    sub_B730();
    sub_686A0();
    int v31 = v16;
    uint64_t v25 = v7;
    uint64_t v21 = v26;
    uint64_t v22 = sub_686C0();
    uint64_t v23 = v30;
    uint64_t v12 = v22;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v3, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v25);
  }
  else
  {
    char v32 = 0;
    sub_B784();
    sub_686A0();
    uint64_t v12 = sub_686D0();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
  }
  uint64_t v24 = (uint64_t)v29;
LABEL_8:
  sub_13338(v24);
  return v12;
}

uint64_t sub_FBA8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_FBB8(uint64_t a1, uint64_t a2)
{
  sub_117DC((long long *)a1, (uint64_t)&v12);
  sub_117DC((long long *)a2, (uint64_t)&v11);
  sub_117DC(&v12, (uint64_t)v13);
  uint64_t v4 = v13[0];
  if ((v14 & 1) == 0)
  {
    sub_117DC(&v11, (uint64_t)v15);
    uint64_t result = 0;
    if ((v16 & 1) != 0 || v4 != v15[0]) {
      return result;
    }
    goto LABEL_9;
  }
  uint64_t v5 = v13[1];
  sub_117DC(&v11, (uint64_t)v15);
  if (v16 != 1) {
    return 0;
  }
  if (v4 == v15[0] && v5 == v15[1] || (v6 = sub_68790(), uint64_t result = 0, (v6 & 1) != 0))
  {
LABEL_9:
    if (*(void *)(a1 + 24) != *(void *)(a2 + 24) || *(void *)(a1 + 32) != *(void *)(a2 + 32))
    {
      char v8 = sub_68790();
      uint64_t result = 0;
      if ((v8 & 1) == 0) {
        return result;
      }
    }
    if (((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) == 0
      && (sub_BB8C(*(void *)(a1 + 48), *(void *)(a2 + 48)) & 1) != 0)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = *(void *)(a2 + 64);
      if (v9)
      {
        if (v10 && (*(void *)(a1 + 56) == *(void *)(a2 + 56) && v9 == v10 || (sub_68790() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v10)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_FD1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (a4) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 1:
      if (a4 != 1) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 2:
      if (a4 != 2) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (a4 != 3) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 4:
      if (a4 != 4) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 5:
      if (a4 != 5) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 6:
      if (a4 != 6) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 7:
      if (a4 != 7) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    case 8:
      if (a4 != 8) {
        goto LABEL_24;
      }
      uint64_t result = 1;
      break;
    default:
      if (a4 < 9)
      {
LABEL_24:
        uint64_t result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = sub_68790();
      }
      break;
  }
  return result;
}

uint64_t sub_FE28(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    sub_681B0();
    v6._countAndFlagsBits = 30307;
    v6._object = (void *)0xE200000000000000;
    sub_68260(v6);
    sub_FFE0(a1, a2, 1);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_FF80(uint64_t a1)
{
  return a1;
}

uint64_t sub_FFE0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_FFF0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10004(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (!a4) {
        return 0;
      }
      unint64_t v4 = 0;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 1:
      if (a4 == 1) {
        return 0;
      }
      unint64_t v4 = 1;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 2:
      if (a4 == 2) {
        return 0;
      }
      unint64_t v4 = 2;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 3:
      if (a4 == 3) {
        return 0;
      }
      unint64_t v4 = 3;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 4:
      if (a4 == 4) {
        return 0;
      }
      unint64_t v4 = 4;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 5:
      if (a4 == 5) {
        return 0;
      }
      unint64_t v4 = 5;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 6:
      if (a4 == 6) {
        return 0;
      }
      unint64_t v4 = 6;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 7:
      if (a4 == 7) {
        return 0;
      }
      unint64_t v4 = 8;
      if (a4 > 8) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 8:
      if (a4 == 8) {
        return 0;
      }
      unint64_t v4 = 9;
      if (a4 <= 8) {
        goto LABEL_4;
      }
LABEL_7:
      unint64_t v5 = 7;
      return v4 < v5;
    default:
      if (a4 >= 9)
      {
        if (a1 == a3 && a2 == a4)
        {
          return 0;
        }
        else
        {
          char v7 = sub_68790();
          uint64_t result = 0;
          if ((v7 & 1) == 0)
          {
            return sub_68790();
          }
        }
      }
      else
      {
        unint64_t v4 = 7;
LABEL_4:
        unint64_t v5 = qword_6A550[a4];
        return v4 < v5;
      }
      return result;
  }
}

unint64_t sub_101F8()
{
  unint64_t result = qword_82480;
  if (!qword_82480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82480);
  }
  return result;
}

unint64_t sub_1024C()
{
  unint64_t result = qword_82488;
  if (!qword_82488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82488);
  }
  return result;
}

unint64_t sub_102A0()
{
  unint64_t result = qword_82490;
  if (!qword_82490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82490);
  }
  return result;
}

unint64_t sub_102F4()
{
  unint64_t result = qword_82498;
  if (!qword_82498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82498);
  }
  return result;
}

unint64_t sub_10348()
{
  unint64_t result = qword_824A0;
  if (!qword_824A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_824A0);
  }
  return result;
}

unint64_t sub_1039C()
{
  unint64_t result = qword_824A8;
  if (!qword_824A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_824A8);
  }
  return result;
}

unint64_t sub_103F0()
{
  unint64_t result = qword_824B0;
  if (!qword_824B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_824B0);
  }
  return result;
}

unint64_t sub_10444()
{
  unint64_t result = qword_824B8;
  if (!qword_824B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_824B8);
  }
  return result;
}

unint64_t sub_10498()
{
  unint64_t result = qword_824C0;
  if (!qword_824C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_824C0);
  }
  return result;
}

unint64_t sub_104EC()
{
  unint64_t result = qword_824C8;
  if (!qword_824C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_824C8);
  }
  return result;
}

unint64_t sub_10540()
{
  unint64_t result = qword_824D0[0];
  if (!qword_824D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_824D0);
  }
  return result;
}

uint64_t sub_10594(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E69736163 && a2 == 0xE600000000000000;
  if (v2 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x53737265626D756ELL && a2 == 0xEE00676E69636170 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x53737265626D756ELL && a2 == 0xEC000000656C7974 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000000074530 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5679616C70736964 && a2 == 0xEF73746E61697261 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x697473696C797473 && a2 == 0xED00007374655363 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73696C797453746FLL && a2 == 0xEF73746553636974 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x64656D616ELL && a2 == 0xE500000000000000 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x726568746FLL && a2 == 0xE500000000000000 || (sub_68790() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7261566870796C67 && a2 == 0xED000073746E6169)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = sub_68790();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_10A4C(void *a1)
{
  uint64_t v69 = sub_4890(&qword_80E50);
  uint64_t v60 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_4890(&qword_80E58);
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v64 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_4890(&qword_80E60);
  uint64_t v57 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  long long v65 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_4890(&qword_80E68);
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  __chkstk_darwin(v5);
  uint64_t v68 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_4890(&qword_80E70);
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  __chkstk_darwin(v7);
  uint64_t v63 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_4890(&qword_80E78);
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  uint64_t v67 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_4890(&qword_80E80);
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v62 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_4890(&qword_80E88);
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v61 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_4890(&qword_80E90);
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_4890(&qword_80E98);
  uint64_t v43 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_4890(&qword_80EA0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  int64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1[3];
  uint64_t v70 = a1;
  sub_B698(a1, v21);
  sub_101F8();
  uint64_t v22 = v71;
  sub_68840();
  if (!v22)
  {
    unint64_t v42 = v16;
    uint64_t v41 = v14;
    uint64_t v23 = v67;
    uint64_t v24 = v68;
    uint64_t v25 = v69;
    uint64_t v71 = v18;
    uint64_t v26 = sub_68700();
    if (*(void *)(v26 + 16) == 1)
    {
      switch(*(unsigned char *)(v26 + 32))
      {
        case 1:
          char v73 = 1;
          sub_104EC();
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        case 2:
          char v74 = 2;
          sub_10498();
          int v31 = v61;
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v44);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        case 3:
          char v75 = 3;
          sub_10444();
          char v32 = v62;
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v48);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        case 4:
          char v76 = 4;
          sub_103F0();
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v50 + 8))(v23, v51);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        case 5:
          char v77 = 5;
          sub_1039C();
          char v33 = v63;
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v53);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        case 6:
          char v78 = 6;
          sub_10348();
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v55);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        case 7:
          char v79 = 7;
          sub_102F4();
          long long v34 = v65;
          sub_686A0();
          uint64_t v35 = v59;
          uint64_t v36 = sub_686C0();
          uint64_t v37 = v71;
          uint64_t v14 = v36;
          (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v35);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v17);
          break;
        case 8:
          char v80 = 8;
          sub_102A0();
          uint64_t v38 = v64;
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v58);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        case 9:
          char v81 = 9;
          sub_1024C();
          uint64_t v39 = v66;
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v25);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
        default:
          char v72 = 0;
          sub_10540();
          uint64_t v27 = v42;
          sub_686A0();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v41);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
          uint64_t v14 = 0;
          break;
      }
    }
    else
    {
      uint64_t v14 = sub_68580();
      swift_allocError();
      uint64_t v29 = v28;
      sub_4890(&qword_80EA8);
      *uint64_t v29 = &type metadata for FeatureGroup;
      sub_686B0();
      sub_68570();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v29, enum case for DecodingError.typeMismatch(_:), v14);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v17);
    }
  }
  sub_13338((uint64_t)v70);
  return v14;
}

uint64_t sub_117DC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  *(unsigned char *)(a2 + 16) = *((unsigned char *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_117F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_11854(uint64_t a1)
{
  return a1;
}

uint64_t sub_11888(uint64_t a1)
{
  return a1;
}

uint64_t sub_118BC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_118D4()
{
  unint64_t result = qword_80E20;
  if (!qword_80E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80E20);
  }
  return result;
}

unint64_t sub_1192C()
{
  unint64_t result = qword_80E28;
  if (!qword_80E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80E28);
  }
  return result;
}

void *sub_11980()
{
  return &protocol witness table for Int;
}

unint64_t sub_11990()
{
  unint64_t result = qword_80E30;
  if (!qword_80E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80E30);
  }
  return result;
}

uint64_t destroy for FeatureIdentifier(uint64_t a1)
{
  return sub_FFE0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s17UITypographyPanel17FeatureIdentifierOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FeatureIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_FFE0(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for FeatureIdentifier(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for FeatureIdentifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_FFE0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureIdentifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_11B84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_11B8C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureIdentifier()
{
  return &type metadata for FeatureIdentifier;
}

uint64_t destroy for FeatureType(uint64_t a1)
{
  sub_FFE0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FeatureType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FeatureType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_FFE0(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for FeatureType(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FeatureType(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_FFE0(v5, v6, v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_66CA4(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureType()
{
  return &type metadata for FeatureType;
}

uint64_t destroy for FeatureOption()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FeatureOption(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FeatureOption(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for FeatureOption(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 1sub_66CA4(2, 18, 1, 0) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FeatureOption(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureOption(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 26)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureOption(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureOption()
{
  return &type metadata for FeatureOption;
}

unint64_t destroy for FeatureGroup(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s17UITypographyPanel12FeatureGroupOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for FeatureGroup(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FeatureGroup(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureGroup(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF6 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483639);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 8;
  if (v4 >= 0xA) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FeatureGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF7) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 8;
    }
  }
  return result;
}

uint64_t sub_12260(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_12278(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureGroup()
{
  return &type metadata for FeatureGroup;
}

unsigned char *initializeBufferWithCopyOfBuffer for UIMetrics.FeaturePreview.HorizontalSize(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FeatureGroup.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FeatureGroup.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12410);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t sub_12438(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_12440(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeatureGroup.CodingKeys()
{
  return &type metadata for FeatureGroup.CodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.CasingCodingKeys()
{
  return &type metadata for FeatureGroup.CasingCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.NumbersSpacingCodingKeys()
{
  return &type metadata for FeatureGroup.NumbersSpacingCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.NumbersStyleCodingKeys()
{
  return &type metadata for FeatureGroup.NumbersStyleCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.VerticalPositionCodingKeys()
{
  return &type metadata for FeatureGroup.VerticalPositionCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.DisplayVariantsCodingKeys()
{
  return &type metadata for FeatureGroup.DisplayVariantsCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.StylisticSetsCodingKeys()
{
  return &type metadata for FeatureGroup.StylisticSetsCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.OtStylisticSetsCodingKeys()
{
  return &type metadata for FeatureGroup.OtStylisticSetsCodingKeys;
}

uint64_t sub_124D4()
{
  return 0;
}

ValueMetadata *type metadata accessor for FeatureGroup.NamedCodingKeys()
{
  return &type metadata for FeatureGroup.NamedCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.OtherCodingKeys()
{
  return &type metadata for FeatureGroup.OtherCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureGroup.GlyphVariantsCodingKeys()
{
  return &type metadata for FeatureGroup.GlyphVariantsCodingKeys;
}

uint64_t getEnumTagSinglePayload for UIMetrics.FeaturePreview.HorizontalSize(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FeatureIdentifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x12668);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_12690(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureIdentifier.CodingKeys()
{
  return &type metadata for FeatureIdentifier.CodingKeys;
}

ValueMetadata *type metadata accessor for FeatureIdentifier.AatCodingKeys()
{
  return &type metadata for FeatureIdentifier.AatCodingKeys;
}

uint64_t _s17UITypographyPanel12FeatureGroupO15NamedCodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s17UITypographyPanel12FeatureGroupO15NamedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x127A8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureIdentifier.OtCodingKeys()
{
  return &type metadata for FeatureIdentifier.OtCodingKeys;
}

unint64_t sub_127E4()
{
  unint64_t result = qword_82C60[0];
  if (!qword_82C60[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_82C60);
  }
  return result;
}

unint64_t sub_1283C()
{
  unint64_t result = qword_82E70[0];
  if (!qword_82E70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_82E70);
  }
  return result;
}

unint64_t sub_12894()
{
  unint64_t result = qword_83080[0];
  if (!qword_83080[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_83080);
  }
  return result;
}

unint64_t sub_128EC()
{
  unint64_t result = qword_83490[0];
  if (!qword_83490[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_83490);
  }
  return result;
}

unint64_t sub_12944()
{
  unint64_t result = qword_83DA0[0];
  if (!qword_83DA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_83DA0);
  }
  return result;
}

unint64_t sub_1299C()
{
  unint64_t result = qword_83EB0;
  if (!qword_83EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_83EB0);
  }
  return result;
}

unint64_t sub_129F4()
{
  unint64_t result = qword_83EB8[0];
  if (!qword_83EB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_83EB8);
  }
  return result;
}

unint64_t sub_12A4C()
{
  unint64_t result = qword_83F40;
  if (!qword_83F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_83F40);
  }
  return result;
}

unint64_t sub_12AA4()
{
  unint64_t result = qword_83F48[0];
  if (!qword_83F48[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_83F48);
  }
  return result;
}

unint64_t sub_12AFC()
{
  unint64_t result = qword_83FD0;
  if (!qword_83FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_83FD0);
  }
  return result;
}

unint64_t sub_12B54()
{
  unint64_t result = qword_83FD8[0];
  if (!qword_83FD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_83FD8);
  }
  return result;
}

unint64_t sub_12BAC()
{
  unint64_t result = qword_84060;
  if (!qword_84060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84060);
  }
  return result;
}

unint64_t sub_12C04()
{
  unint64_t result = qword_84068[0];
  if (!qword_84068[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_84068);
  }
  return result;
}

unint64_t sub_12C5C()
{
  unint64_t result = qword_840F0;
  if (!qword_840F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_840F0);
  }
  return result;
}

unint64_t sub_12CB4()
{
  unint64_t result = qword_840F8[0];
  if (!qword_840F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_840F8);
  }
  return result;
}

unint64_t sub_12D0C()
{
  unint64_t result = qword_84180;
  if (!qword_84180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84180);
  }
  return result;
}

unint64_t sub_12D64()
{
  unint64_t result = qword_84188[0];
  if (!qword_84188[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_84188);
  }
  return result;
}

unint64_t sub_12DBC()
{
  unint64_t result = qword_84210;
  if (!qword_84210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84210);
  }
  return result;
}

unint64_t sub_12E14()
{
  unint64_t result = qword_84218[0];
  if (!qword_84218[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_84218);
  }
  return result;
}

unint64_t sub_12E6C()
{
  unint64_t result = qword_842A0;
  if (!qword_842A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_842A0);
  }
  return result;
}

unint64_t sub_12EC4()
{
  unint64_t result = qword_842A8[0];
  if (!qword_842A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_842A8);
  }
  return result;
}

unint64_t sub_12F1C()
{
  unint64_t result = qword_84330;
  if (!qword_84330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84330);
  }
  return result;
}

unint64_t sub_12F74()
{
  unint64_t result = qword_84338[0];
  if (!qword_84338[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_84338);
  }
  return result;
}

unint64_t sub_12FCC()
{
  unint64_t result = qword_843C0;
  if (!qword_843C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_843C0);
  }
  return result;
}

unint64_t sub_13024()
{
  unint64_t result = qword_843C8[0];
  if (!qword_843C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_843C8);
  }
  return result;
}

unint64_t sub_1307C()
{
  unint64_t result = qword_84450;
  if (!qword_84450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84450);
  }
  return result;
}

unint64_t sub_130D4()
{
  unint64_t result = qword_84458[0];
  if (!qword_84458[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_84458);
  }
  return result;
}

unint64_t sub_1312C()
{
  unint64_t result = qword_844E0;
  if (!qword_844E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_844E0);
  }
  return result;
}

unint64_t sub_13184()
{
  unint64_t result = qword_844E8[0];
  if (!qword_844E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_844E8);
  }
  return result;
}

unint64_t sub_131DC()
{
  unint64_t result = qword_84570;
  if (!qword_84570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84570);
  }
  return result;
}

unint64_t sub_13234()
{
  unint64_t result = qword_84578;
  if (!qword_84578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84578);
  }
  return result;
}

unint64_t sub_1328C()
{
  unint64_t result = qword_84600;
  if (!qword_84600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_84600);
  }
  return result;
}

unint64_t sub_132E4()
{
  unint64_t result = qword_84608[0];
  if (!qword_84608[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_84608);
  }
  return result;
}

uint64_t sub_13338(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_13390()
{
  if (qword_84698 != -1) {
    swift_once();
  }
  sub_681C0();
  char has_internal_content = os_variant_has_internal_content();
  uint64_t result = swift_release();
  byte_87C90 = has_internal_content;
  return result;
}

char *sub_13410()
{
  if (qword_84690 != -1) {
    swift_once();
  }
  return &byte_87C90;
}

void sub_1345C()
{
  id v0 = [self mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    uint64_t v2 = sub_681A0();
    uint64_t v4 = v3;

    qword_846A0 = v2;
    qword_846A8 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_134EC()
{
  uint64_t v0 = sub_67360();
  sub_14688(v0, qword_846B8);
  sub_13CE0(v0, (uint64_t)qword_846B8);
  if (qword_84698 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return sub_67350();
}

uint64_t sub_135AC(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_67360();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v35 - v14;
  if (qword_84690 != -1) {
    uint64_t result = swift_once();
  }
  if (byte_87C90 == 1)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_11;
    }
    id v16 = [self callStackSymbols];
    uint64_t v17 = sub_682D0();

    uint64_t v42 = v17;
    if (*(void *)(v17 + 16))
    {
      uint64_t v39 = a1;
      sub_144C0(0, 1);
      if (qword_846B0 == -1)
      {
LABEL_7:
        uint64_t v18 = sub_13CE0(v8, (uint64_t)qword_846B8);
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, v18, v8);
        uint64_t v19 = v42;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        int64_t v20 = sub_67340();
        os_log_type_t v21 = sub_68390();
        int v22 = v21;
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v37 = a4;
          uint64_t v38 = v9;
          uint64_t v24 = v23;
          uint64_t v41 = swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 136446466;
          int v36 = v22;
          swift_bridgeObjectRetain();
          uint64_t v40 = sub_13D18(v39, a2, &v41);
          sub_683F0();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v24 + 12) = 2082;
          uint64_t v40 = v19;
          uint64_t v35 = v24 + 14;
          swift_bridgeObjectRetain();
          sub_4890(&qword_80EC8);
          sub_14370();
          uint64_t v25 = sub_68150();
          unint64_t v27 = v26;
          swift_bridgeObjectRelease();
          uint64_t v40 = sub_13D18(v25, v27, &v41);
          sub_683F0();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v20, (os_log_type_t)v36, "[%{public}s] 🥞\n%{public}s", (uint8_t *)v24, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          a4 = v37;
          uint64_t v9 = v38;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
        a1 = v39;
LABEL_11:
        if (qword_846B0 != -1) {
          swift_once();
        }
        uint64_t v28 = sub_13CE0(v8, (uint64_t)qword_846B8);
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v28, v8);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v29 = sub_67340();
        os_log_type_t v30 = sub_68390();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          uint64_t v39 = v8;
          uint64_t v42 = v32;
          *(_DWORD *)uint64_t v31 = 136446466;
          swift_bridgeObjectRetain();
          uint64_t v41 = sub_13D18(a1, a2, &v42);
          sub_683F0();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v31 + 12) = 2082;
          uint64_t v41 = a4;
          sub_4890(&qword_80EC8);
          sub_14370();
          uint64_t v33 = sub_68150();
          uint64_t v41 = sub_13D18(v33, v34, &v42);
          sub_683F0();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v29, v30, "[%{public}s] %{public}s", (uint8_t *)v31, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v39);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        }
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_7;
  }
  return result;
}

void *sub_13BC4()
{
  return &unk_6A5A0;
}

void *sub_13BD0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_4890(&qword_80ED8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_143CC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_13CE0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_13D18(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_13DEC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1462C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1462C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_13338((uint64_t)v12);
  return v7;
}

uint64_t sub_13DEC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_68400();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_13FA8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_68590();
  if (!v8)
  {
    sub_68610();
    __break(1u);
LABEL_17:
    uint64_t result = sub_68670();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_13FA8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_14040(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_14220(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_14220(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_14040(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_141B8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_68550();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      sub_68610();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_68230();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    sub_68670();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)sub_68610();
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_141B8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_4890(&qword_80EE0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_14220(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80EE0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_68670();
  __break(1u);
  return result;
}

unint64_t sub_14370()
{
  unint64_t result = qword_80ED0;
  if (!qword_80ED0)
  {
    sub_4FAC(&qword_80EC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80ED0);
  }
  return result;
}

uint64_t sub_143CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_68670();
  __break(1u);
  return result;
}

uint64_t sub_144C0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_13BD0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    id v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_68670();
  __break(1u);
  return result;
}

uint64_t sub_1462C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_14688(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_146F0()
{
  return swift_retain();
}

uint64_t sub_146F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypographyPanelViewModel();
  uint64_t v5 = sub_1D038(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  return ObservedObject.projectedValue.getter(a1, a2, v4, v5);
}

uint64_t sub_14784()
{
  return sub_674C0();
}

uint64_t sub_147F0@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  sub_BF3C();
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1A184(v2);
  swift_bridgeObjectRelease();
  type metadata accessor for TypographyPanelViewModel();
  sub_1D038(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  uint64_t v3 = sub_67570();
  uint64_t v5 = v4;
  sub_3130C();
  swift_bridgeObjectRetain();
  sub_4890(&qword_80EF0);
  sub_1A274(&qword_80EF8, &qword_80EF0, (void (*)(void))sub_1A220);
  sub_1A274(&qword_80F08, &qword_80EF0, (void (*)(void))sub_1A2E0);
  uint64_t result = sub_674A0();
  *a1 = v3;
  a1[1] = v5;
  a1[2] = result;
  return result;
}

uint64_t sub_14974@<X0>(uint64_t *a1@<X8>)
{
  return sub_147F0(a1);
}

unint64_t sub_1497C()
{
  unint64_t result = qword_80EE8;
  if (!qword_80EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80EE8);
  }
  return result;
}

uint64_t sub_149D4()
{
  type metadata accessor for TypographyPanelViewModel();
  sub_1D038(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  uint64_t v0 = sub_67570();
  sub_3130C();
  swift_bridgeObjectRetain();
  sub_4890(&qword_80EF0);
  sub_1A274(&qword_80EF8, &qword_80EF0, (void (*)(void))sub_1A220);
  sub_1A274(&qword_80F08, &qword_80EF0, (void (*)(void))sub_1A2E0);
  sub_674A0();
  return v0;
}

uint64_t sub_14B38()
{
  type metadata accessor for TypographyPanelViewModel();
  sub_1D038(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  return sub_67570();
}

uint64_t sub_14BB4()
{
  return sub_674C0();
}

uint64_t sub_14C24()
{
  sub_1D038(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  return sub_67570();
}

uint64_t sub_14CBC()
{
  return sub_674A0();
}

uint64_t sub_14DAC()
{
  sub_4890(&qword_80EF0);
  sub_67470();
  return v1;
}

uint64_t sub_14DF4()
{
  return sub_67480();
}

uint64_t (*sub_14E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1, char a2)
{
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = sub_4890(&qword_80EF0);
  sub_67470();
  return sub_14EA0;
}

uint64_t sub_14EA0(void *a1, char a2)
{
  a1[1] = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_67480();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_67480();
  }
}

uint64_t sub_14F30()
{
  sub_BF3C();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1A184(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_14F70()
{
  sub_4890(&qword_80EF0);
  sub_67490();
  return v1;
}

uint64_t sub_14FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v7 = sub_4890(&qword_80F18);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_4890(&qword_80F20);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  BOOL v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_4890(&qword_80F28);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  sub_152EC((uint64_t)v40, (uint64_t)v10);
  type metadata accessor for TypographyPanelViewModel();
  sub_1D038(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  swift_retain();
  uint64_t v19 = sub_673C0();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v10, v7);
  int64_t v20 = (uint64_t *)&v14[*(int *)(v12 + 44)];
  *int64_t v20 = v19;
  v20[1] = a2;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t KeyPath = swift_getKeyPath();
  sub_A85C((uint64_t)v14, (uint64_t)v18, &qword_80F20);
  int v22 = &v18[*(int *)(v16 + 44)];
  *(void *)int v22 = KeyPath;
  v22[8] = 1;
  sub_A8C0((uint64_t)v14, &qword_80F20);
  uint64_t v23 = sub_68090();
  uint64_t v25 = v24;
  swift_retain();
  uint64_t v26 = sub_25190();
  swift_release();
  uint64_t v27 = *(void *)(v26 + 16);
  swift_bridgeObjectRelease();
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (!v27)
  {
    uint64_t v30 = sub_31274(0xD000000000000010, (void *)0x80000000000748B0, 0xD000000000000039, 0x80000000000748D0);
    uint64_t v28 = j_nullsub_1(v30, v31, v32, v33);
    uint64_t v29 = v34;
  }
  uint64_t v35 = v39;
  sub_A85C((uint64_t)v18, v39, &qword_80F28);
  int v36 = (uint64_t *)(v35 + *(int *)(sub_4890(&qword_80F30) + 36));
  *int v36 = v28;
  v36[1] = v29;
  v36[2] = v23;
  v36[3] = v25;
  return sub_A8C0((uint64_t)v18, &qword_80F28);
}

uint64_t sub_152EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v3 = sub_67A40();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v23 = v3;
  uint64_t v24 = v4;
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_4890(&qword_80FE8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_4890(&qword_80FF0);
  uint64_t v11 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_4890(&qword_80FF8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1A334;
  uint64_t v27 = a1;
  sub_4890(&qword_81000);
  sub_1A274(&qword_81008, &qword_81000, (void (*)(void))sub_1AB3C);
  sub_67B90();
  sub_67A30();
  sub_AE4C(&qword_81010, &qword_80FE8);
  uint64_t v17 = v23;
  sub_67DF0();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v18 = sub_2F750();
  LOBYTE(v8) = sub_67AF0();
  uint64_t v19 = v22;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v22);
  int64_t v20 = &v16[*(int *)(v14 + 36)];
  *(void *)int64_t v20 = v18;
  v20[8] = v8;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  sub_1ABFC(&qword_81018, &qword_80FF8, &qword_80FE8, &qword_81010);
  sub_67D60();
  return sub_A8C0((uint64_t)v16, &qword_80FF8);
}

uint64_t sub_156A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2F290();
  *a1 = result & 1;
  return result;
}

uint64_t sub_156D8(unsigned __int8 *a1)
{
  return sub_2F34C(*a1);
}

uint64_t sub_15700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v43 = a6;
  unint64_t v44 = a7;
  uint64_t v42 = a2;
  uint64_t v13 = sub_4890(&qword_81050);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_4890(&qword_810E8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    v40[0] = v14;
    v40[1] = v17;
    v40[2] = a8;
    uint64_t v41 = v13;
    swift_retain();
    swift_retain();
    int64_t v20 = a5;
    os_log_type_t v21 = sub_1B638(a1, a3, v20);
    swift_release();
    swift_release();

    v45[0] = v21;
    swift_bridgeObjectRetain();
    sub_18E28(v45);
    swift_bridgeObjectRelease();
    uint64_t v22 = *((void *)v45[0] + 2);
    if (v22)
    {
      char v23 = v45[0][v22 + 31];
      swift_release();
    }
    else
    {
      swift_release();
      char v23 = 2;
    }
    v45[0] = (char *)a1;
    uint64_t v34 = swift_allocObject();
    uint64_t v36 = v43;
    unint64_t v35 = v44;
    *(void *)(v34 + 16) = v20;
    *(void *)(v34 + 24) = v36;
    *(void *)(v34 + 32) = v35;
    *(void *)(v34 + 4sub_66CA4(2, 18, 1, 0) = a1;
    *(unsigned char *)(v34 + 48) = v23;
    *(void *)(v34 + 56) = v42;
    *(void *)(v34 + 64) = a3;
    *(void *)(v34 + 72) = a4;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    uint64_t v37 = v20;
    sub_FFF0(v36, v35);
    sub_4890(&qword_810F0);
    sub_4890(&qword_81060);
    sub_AE4C(&qword_810F8, &qword_810F0);
    sub_1B35C(&qword_81058, &qword_81060, (void (*)(void))sub_1B3E4, (void (*)(void))sub_1B5FC);
    sub_1B820();
    sub_68020();
    uint64_t v38 = v40[0];
    uint64_t v39 = v41;
    (*(void (**)(char *, char *, uint64_t))(v40[0] + 16))(v19, v16, v41);
    swift_storeEnumTagMultiPayload();
    sub_4890(&qword_80AA8);
    sub_50C4();
    sub_1B2B0();
    sub_679F0();
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v16, v39);
  }
  else
  {
    v45[0] = (char *)sub_31274(0xD000000000000016, (void *)0x8000000000074910, 0xD00000000000002FLL, 0x8000000000074930);
    v45[1] = v24;
    sub_A5D0();
    uint64_t v25 = sub_67C00();
    uint64_t v27 = v26;
    char v29 = v28;
    uint64_t v31 = v30;
    nullsub_1(v25, v26, v28, v32);
    *(void *)uint64_t v19 = v25;
    *((void *)v19 + 1) = v27;
    v19[16] = v29 & 1;
    *((void *)v19 + 3) = v31;
    swift_storeEnumTagMultiPayload();
    sub_4890(&qword_80AA8);
    sub_50C4();
    sub_1B2B0();
    return sub_679F0();
  }
}

uint64_t sub_15B54@<X0>(long long *a1@<X0>, uint64_t (*a2)(uint64_t a1)@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v11 = sub_4890(&qword_81060);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = a1[3];
  v60[2] = a1[2];
  v60[3] = v14;
  uint64_t v61 = *((void *)a1 + 8);
  long long v15 = a1[1];
  v60[0] = *a1;
  v60[1] = v15;
  uint64_t v16 = *(void *)(a3 + 16);
  if (v16)
  {
    uint64_t v17 = (void *)(a3 + 72 * v16);
    uint64_t v19 = *(v17 - 5);
    uint64_t v18 = *(v17 - 4);
    uint64_t v40 = a5;
    uint64_t v20 = *((unsigned __int8 *)v17 - 24);
    uint64_t v21 = *(v17 - 2);
    uint64_t v22 = *(v17 - 1);
    uint64_t v23 = *(unsigned __int8 *)v17;
    uint64_t v25 = v17[1];
    uint64_t v24 = v17[2];
    int v39 = a4;
    uint64_t v26 = v17[3];
    *(void *)&long long v43 = v19;
    *((void *)&v43 + 1) = v18;
    *(void *)&long long v44 = v20;
    *((void *)&v44 + 1) = v21;
    *(void *)&long long v45 = v22;
    *((void *)&v45 + 1) = v23;
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v24;
    uint64_t v47 = v26;
    long long v27 = a1[3];
    long long v57 = a1[2];
    long long v58 = v27;
    uint64_t v59 = *((void *)a1 + 8);
    long long v28 = a1[1];
    long long v55 = *a1;
    long long v56 = v28;
    uint64_t v29 = v18;
    v38[0] = v18;
    sub_FBA8(v19, v18, v20);
    swift_bridgeObjectRetain();
    v38[1] = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_FBA8(v19, v29, v20);
    sub_1B874();
    uint64_t v41 = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v30 = sub_68160();
    sub_FFE0(v43, *((uint64_t *)&v43 + 1), v44);
    swift_bridgeObjectRelease();
    a6 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v31 = v20;
    a5 = v40;
    sub_FFE0(v19, v38[0], v31);
    a4 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = *((void *)a1 + 6);
    uint64_t v33 = *((unsigned __int8 *)a1 + 40);
    uint64_t v35 = *((void *)a1 + 3);
    uint64_t v34 = *((void *)a1 + 4);
    uint64_t v36 = *((unsigned __int8 *)a1 + 16);
    uint64_t v47 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v48 = *a1;
    uint64_t v49 = v36;
    uint64_t v50 = v35;
    uint64_t v51 = v34;
    uint64_t v52 = v33;
    uint64_t v53 = v32;
    long long v54 = *(long long *)((char *)a1 + 56);
    sub_117F4((uint64_t)v60);
    sub_1B8C8((uint64_t *)&v43);
    char v30 = 0;
  }
  swift_retain();
  sub_15DF8(v42, (uint64_t)v60, v30 & 1, a4, a5, (uint64_t)v13);
  swift_release();
  return sub_1D2D8((uint64_t)v13, a6, &qword_81060);
}

uint64_t sub_15DF8@<X0>(uint64_t (*a1)(uint64_t a1)@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  LODWORD(v8) = a3;
  v132 = a1;
  uint64_t v11 = sub_4890(&qword_810E0);
  uint64_t v128 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v127 = &v105[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v124 = sub_4890(&qword_810A8);
  uint64_t v117 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  long long v116 = &v105[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v130 = sub_4890(&qword_81110);
  __chkstk_darwin(v130);
  long long v15 = &v105[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v121 = sub_4890(&qword_81118);
  __chkstk_darwin(v121);
  char v122 = &v105[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = sub_4890(&qword_81070);
  __chkstk_darwin(v17);
  uint64_t v123 = &v105[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = type metadata accessor for FeatureToggleView(0);
  __chkstk_darwin(v19 - 8);
  uint64_t v119 = &v105[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v129 = sub_4890(&qword_81080);
  __chkstk_darwin(v129);
  char v120 = &v105[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = sub_4890(&qword_81120);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  v125 = &v105[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  v126 = &v105[-v25];
  char v26 = sub_5FF08();
  uint64_t v131 = a6;
  if ((v26 & 1) == 0)
  {
LABEL_14:
    if ((*(unsigned char *)(a2 + 40) & 1) != 0 && !sub_5FEF4())
    {
      char v75 = v8;
      char v76 = a4;
      uint64_t v77 = *(void *)(a2 + 48);
      sub_117F4(a2);
      swift_retain();
      uint64_t v78 = swift_bridgeObjectRetain();
      char v79 = sub_1B9D0(v78, a5, a2);
      sub_FF80(a2);
      swift_bridgeObjectRelease();
      swift_release();
      if (v79[2])
      {
        uint64_t v133 = v77;
        uint64_t v80 = swift_allocObject();
        char v81 = v132;
        *(void *)(v80 + 16) = a5;
        *(void *)(v80 + 24) = v81;
        long long v82 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v80 + 64) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v80 + 8sub_66CA4(2, 18, 1, 0) = v82;
        uint64_t v83 = *(void *)(a2 + 64);
        long long v84 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v80 + 32) = *(_OWORD *)a2;
        *(_OWORD *)(v80 + 48) = v84;
        *(void *)(v80 + 96) = v83;
        *(void *)(v80 + 104) = v79;
        *(unsigned char *)(v80 + 112) = v76;
        sub_117F4(a2);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v85 = v81;
        sub_4890(&qword_81138);
        sub_4890(&qword_810B8);
        sub_AE4C(&qword_81140, &qword_81138);
        sub_1B52C();
        sub_1C30C();
        uint64_t v86 = v116;
        sub_68020();
        uint64_t v87 = v117;
        uint64_t v88 = v124;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v117 + 16))(v122, v86, v124);
        swift_storeEnumTagMultiPayload();
        sub_1B420();
        sub_1B4F0();
        uint64_t v89 = (uint64_t)v123;
        sub_679F0();
        sub_A85C(v89, (uint64_t)v15, &qword_81070);
        swift_storeEnumTagMultiPayload();
        sub_1B3E4();
        sub_1B5FC();
        sub_679F0();
        sub_A8C0(v89, &qword_81070);
        return (*(uint64_t (**)(unsigned char *, uint64_t))(v87 + 8))(v86, v88);
      }
      swift_bridgeObjectRelease();
      LOBYTE(a4) = v76;
      LOBYTE(v8) = v75;
    }
    sub_117F4(a2);
    swift_retain();
    uint64_t v64 = swift_bridgeObjectRetain();
    uint64_t v65 = sub_1BDB8(v64, a2, a5);
    swift_release();
    sub_FF80(a2);
    swift_bridgeObjectRelease();
    uint64_t v133 = v65;
    swift_getKeyPath();
    uint64_t v66 = swift_allocObject();
    long long v67 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v66 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v66 + 64) = v67;
    *(void *)(v66 + 8sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 64);
    long long v68 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v66 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v66 + 32) = v68;
    *(unsigned char *)(v66 + 88) = a4;
    *(void *)(v66 + 96) = v65;
    *(unsigned char *)(v66 + 104) = v8 & 1;
    uint64_t v69 = v132;
    *(void *)(v66 + 112) = a5;
    *(void *)(v66 + 12sub_66CA4(2, 18, 1, 0) = v69;
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = sub_1C1B4;
    *(void *)(v70 + 24) = v66;
    sub_117F4(a2);
    swift_retain();
    uint64_t v71 = v69;
    swift_bridgeObjectRetain();
    sub_4890(&qword_81128);
    sub_AE4C(&qword_81130, &qword_81128);
    sub_1B420();
    char v72 = v127;
    sub_68010();
    uint64_t v73 = v128;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v128 + 16))(v15, v72, v11);
    swift_storeEnumTagMultiPayload();
    sub_1B3E4();
    sub_1B5FC();
    sub_679F0();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v73 + 8))(v72, v11);
  }
  int v113 = v8;
  int v118 = a4;
  uint64_t v114 = v17;
  long long v115 = v15;
  uint64_t v27 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  char v28 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v8, v28);
  uint64_t v29 = sub_60088();
  if (v31)
  {
    uint64_t v33 = v31;
    unsigned int v34 = v32;
    uint64_t v111 = v30;
    uint64_t v35 = v29;
    uint64_t v36 = sub_6015C();
    if (v38)
    {
      uint64_t v112 = v11;
      char v108 = v36;
      int v110 = v39;
      uint64_t v107 = v37;
      uint64_t v109 = v38;
      swift_unownedRetainStrong();
      swift_unownedRetain();
      swift_release();
      uint64_t v40 = swift_allocObject();
      *(void *)(v40 + 16) = 0;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = a5;
      *(void *)(v40 + 4sub_66CA4(2, 18, 1, 0) = v27;
      *(void *)(v40 + 48) = v8;
      *(unsigned char *)(v40 + 56) = v28;
      uint64_t v41 = v111;
      *(void *)(v40 + 64) = v35;
      *(void *)(v40 + 72) = v41;
      *(void *)(v40 + 8sub_66CA4(2, 18, 1, 0) = v33;
      int v106 = v34 & 1;
      *(unsigned char *)(v40 + 88) = v34 & 1;
      int v42 = (v34 >> 8) & 1;
      *(unsigned char *)(v40 + 89) = v42;
      swift_unownedRetainStrong();
      swift_unownedRetain();
      sub_FBA8(v27, v8, v28);
      swift_unownedRetain();
      swift_bridgeObjectRetain();
      swift_unownedRelease();
      swift_unownedRelease();
      swift_unownedRetain();
      swift_release();
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = 0;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = a5;
      *(void *)(v43 + 4sub_66CA4(2, 18, 1, 0) = v27;
      *(void *)(v43 + 48) = v8;
      *(unsigned char *)(v43 + 56) = v28;
      *(void *)(v43 + 64) = v35;
      *(void *)(v43 + 72) = v41;
      *(void *)(v43 + 8sub_66CA4(2, 18, 1, 0) = v33;
      *(unsigned char *)(v43 + 88) = v106;
      *(unsigned char *)(v43 + 89) = v42;
      uint64_t v44 = v107;
      *(void *)(v43 + 96) = v108;
      *(void *)(v43 + 104) = v44;
      *(void *)(v43 + 112) = v109;
      char v45 = BYTE1(v110);
      *(unsigned char *)(v43 + 12sub_66CA4(2, 18, 1, 0) = v110 & 1;
      *(unsigned char *)(v43 + 121) = v45 & 1;
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
  if (!sub_5FEF4() || (uint64_t v46 = *(void *)(a2 + 48), !*(void *)(v46 + 16)))
  {
    sub_FFE0(v27, v8, v28);
    long long v15 = v115;
    LOBYTE(a4) = v118;
    LOBYTE(v8) = v113;
    goto LABEL_14;
  }
  uint64_t v112 = v11;
  uint64_t v47 = *(void *)(v46 + 32);
  uint64_t v48 = *(void *)(v46 + 40);
  uint64_t v49 = *(void *)(v46 + 48);
  LODWORD(v111) = *(unsigned __int8 *)(v46 + 56);
  int v110 = *(unsigned __int8 *)(v46 + 57);
  swift_unownedRetainStrong();
  swift_bridgeObjectRetain();
  swift_unownedRetain();
  sub_FBA8(v27, v8, v28);
  sub_117F4(a2);
  swift_unownedRetain();
  uint64_t v109 = v49;
  swift_bridgeObjectRetain();
  swift_unownedRelease();
  swift_unownedRelease();
  swift_unownedRetain();
  swift_release();
  uint64_t v50 = swift_allocObject();
  long long v51 = *(_OWORD *)a2;
  *(_OWORD *)(v50 + 104) = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v50 + 12sub_66CA4(2, 18, 1, 0) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v50 + 136) = v52;
  *(void *)(v50 + 16) = 0;
  *(void *)(v50 + 24) = 0;
  *(void *)(v50 + 32) = v27;
  *(void *)(v50 + 4sub_66CA4(2, 18, 1, 0) = v8;
  *(unsigned char *)(v50 + 48) = v28;
  *(void *)(v50 + 56) = v47;
  *(void *)(v50 + 64) = v48;
  *(void *)(v50 + 72) = v49;
  LOBYTE(v49) = v111;
  *(unsigned char *)(v50 + 8sub_66CA4(2, 18, 1, 0) = v111;
  char v53 = v110;
  *(unsigned char *)(v50 + 81) = v110;
  uint64_t v54 = *(void *)(a2 + 64);
  *(_OWORD *)(v50 + 88) = v51;
  *(void *)(v50 + 152) = v54;
  *(void *)(v50 + 16sub_66CA4(2, 18, 1, 0) = a5;
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = 0;
  *(void *)(v55 + 24) = 0;
  *(void *)(v55 + 32) = a5;
  *(void *)(v55 + 4sub_66CA4(2, 18, 1, 0) = v27;
  *(void *)(v55 + 48) = v8;
  *(unsigned char *)(v55 + 56) = v28;
  *(void *)(v55 + 64) = v47;
  *(void *)(v55 + 72) = v48;
  *(void *)(v55 + 8sub_66CA4(2, 18, 1, 0) = v109;
  *(unsigned char *)(v55 + 88) = v49;
  *(unsigned char *)(v55 + 89) = v53;
LABEL_9:
  sub_68000();
  int v56 = v135;
  uint64_t v11 = v112;
  long long v15 = v115;
  LOBYTE(a4) = v118;
  LOBYTE(v8) = v113;
  if (!v134) {
    goto LABEL_14;
  }
  uint64_t v128 = v134;
  uint64_t v111 = v133;
  long long v57 = (const __CTFont *)sub_60088();
  int v110 = v56;
  if (!v58)
  {
    uint64_t v90 = type metadata accessor for FeaturePreviewConfiguration(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v125, 1, 1, v90);
    goto LABEL_21;
  }
  uint64_t v59 = v125;
  sub_3B5C0(v132, a2, v57, (uint64_t)v125);
  swift_bridgeObjectRelease();
  uint64_t v60 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v61 = *(void *)(v60 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60) == 1)
  {
LABEL_21:
    uint64_t v91 = sub_6015C();
    if (v92)
    {
      sub_3B5C0(v132, a2, (const __CTFont *)v91, (uint64_t)v126);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v93 = type metadata accessor for FeaturePreviewConfiguration(0);
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v126, 1, 1, v93);
    }
    char v63 = v110;
    sub_A8C0((uint64_t)v125, &qword_81120);
    goto LABEL_25;
  }
  uint64_t v62 = v126;
  sub_1CA30((uint64_t)v125, (uint64_t)v126, type metadata accessor for FeaturePreviewConfiguration);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v60);
  char v63 = v110;
LABEL_25:
  uint64_t v94 = *(void *)(a2 + 24);
  uint64_t v95 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_117F4(a2);
  uint64_t v96 = v111;
  swift_retain();
  uint64_t v97 = v128;
  swift_retain();
  char v98 = v8 & 1;
  long long v99 = v119;
  sub_4F4AC(v94, v95, a2, v118, v98, v96, v97, v63, (uint64_t)v119);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v101 = (uint64_t)v120;
  long long v102 = (uint64_t *)&v120[*(int *)(v129 + 36)];
  uint64_t v103 = sub_4890(&qword_81098);
  sub_A85C((uint64_t)v126, (uint64_t)v102 + *(int *)(v103 + 28), &qword_81120);
  *long long v102 = KeyPath;
  sub_1CA30((uint64_t)v99, v101, type metadata accessor for FeatureToggleView);
  sub_A85C(v101, (uint64_t)v122, &qword_81080);
  swift_storeEnumTagMultiPayload();
  sub_1B420();
  sub_1B4F0();
  uint64_t v104 = (uint64_t)v123;
  sub_679F0();
  sub_A85C(v104, (uint64_t)v15, &qword_81070);
  swift_storeEnumTagMultiPayload();
  sub_1B3E4();
  sub_1B5FC();
  sub_679F0();
  swift_release();
  swift_release();
  sub_A8C0(v104, &qword_81070);
  sub_A8C0(v101, &qword_81080);
  return sub_A8C0((uint64_t)v126, &qword_81120);
}

uint64_t sub_16D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16)
    && (sub_1B01C(),
        uint64_t v4 = sub_68130(),
        uint64_t v5 = -1 << *(unsigned char *)(a3 + 32),
        unint64_t v6 = v4 & ~v5,
        ((*(void *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0))
  {
    uint64_t v7 = ~v5;
    sub_11990();
    do
    {
      char v8 = sub_68160();
      if (v8) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v7;
    }
    while (((*(void *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

BOOL sub_16E24(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = sub_687E0();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_16EF0@<X0>(uint64_t a1@<X8>)
{
  return sub_14FBC(*v1, v1[1], v1[2], a1);
}

uint64_t sub_16EFC()
{
  return sub_2EF54();
}

uint64_t sub_16F20(uint64_t a1)
{
  uint64_t v2 = sub_4890(&qword_81120);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A85C(a1, (uint64_t)v4, &qword_81120);
  return sub_2EFF0((uint64_t)v4);
}

uint64_t sub_16FB4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t a1)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  int v49 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = a4;
  uint64_t v9 = type metadata accessor for FeatureOptionView(0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_4890(&qword_81170);
  uint64_t v50 = *(void *)(v52 - 8);
  uint64_t v12 = __chkstk_darwin(v52);
  uint64_t v51 = (uint64_t)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48[1] = v13;
  __chkstk_darwin(v12);
  long long v15 = (char *)v48 - v14;
  uint64_t v16 = sub_4890(&qword_81120);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(const __CTFont **)a1;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 16);
  int v22 = *(unsigned __int8 *)(a1 + 24);
  int v55 = *(unsigned __int8 *)(a1 + 25);
  int v56 = v22;
  if (v55) {
    __int16 v23 = 256;
  }
  else {
    __int16 v23 = 0;
  }
  __int16 v24 = v23 | v22;
  long long v57 = v18;
  uint64_t v25 = a2;
  char v26 = v19;
  uint64_t v27 = v20;
  sub_3B5C0(v25, a3, v19, (uint64_t)v18);
  uint64_t v28 = *(void *)(a3 + 48);
  uint64_t v29 = *(void *)(v28 + 16);
  if (v29)
  {
    uint64_t v30 = (long long *)(v28 + 32 * v29);
    v48[0] = v15;
    uint64_t v31 = *((void *)v30 + 2);
    __int16 v32 = *((unsigned __int8 *)v30 + 24);
    if (*((unsigned char *)v30 + 25)) {
      __int16 v33 = 256;
    }
    else {
      __int16 v33 = 0;
    }
    long long v63 = *v30;
    *(void *)&long long v64 = v31;
    WORD4(v64) = v33 | v32;
    *(void *)&long long v60 = v26;
    *((void *)&v60 + 1) = v27;
    *(void *)&long long v61 = v21;
    BYTE8(v61) = v56;
    BYTE9(v61) = v55;
    sub_1C9DC();
    swift_bridgeObjectRetain_n();
    char v34 = sub_68160();
    long long v15 = (char *)v48[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v34 = 0;
  }
  swift_bridgeObjectRetain();
  sub_117F4(a3);
  uint64_t v35 = v54;
  swift_bridgeObjectRetain();
  uint64_t v36 = a3;
  uint64_t v37 = v26;
  uint64_t v38 = (uint64_t)v26;
  uint64_t v39 = v27;
  sub_503B8(v36, v38, v27, v21, v24, v35, v49, v34 & 1, (uint64_t)v11);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v41 = (uint64_t *)&v15[*(int *)(v52 + 36)];
  uint64_t v42 = sub_4890(&qword_81098);
  sub_A85C((uint64_t)v57, (uint64_t)v41 + *(int *)(v42 + 28), &qword_81120);
  *uint64_t v41 = KeyPath;
  sub_1CA30((uint64_t)v11, (uint64_t)v15, type metadata accessor for FeatureOptionView);
  uint64_t v43 = v51;
  sub_A85C((uint64_t)v15, v51, &qword_81170);
  unint64_t v44 = (*(unsigned __int8 *)(v50 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  uint64_t v45 = swift_allocObject();
  sub_1D2D8(v43, v45 + v44, &qword_81170);
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v35;
  *(void *)(v46 + 24) = v37;
  *(void *)(v46 + 32) = v39;
  *(void *)(v46 + 4sub_66CA4(2, 18, 1, 0) = v21;
  *(unsigned char *)(v46 + 48) = v56;
  *(unsigned char *)(v46 + 49) = v55;
  sub_1CF68();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_50D8C((uint64_t)sub_1CE4C, v45, (uint64_t)sub_1CF04, v46, (uint64_t)&v63);
  long long v66 = v65;
  long long v60 = v63;
  long long v61 = v64;
  long long v62 = v65;
  uint64_t v58 = v39;
  uint64_t v59 = v21;
  sub_4890(&qword_810C8);
  sub_AE4C(&qword_810C0, &qword_810C8);
  sub_A5D0();
  sub_67D30();
  swift_release();
  swift_release();
  sub_A5A4((uint64_t)&v66);
  sub_A8C0((uint64_t)v15, &qword_81170);
  return sub_A8C0((uint64_t)v57, &qword_81120);
}

uint64_t sub_174C4@<X0>(const __CTFont *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, char a12, uint64_t a13, uint64_t (*a14)(uint64_t a1))
{
  uint64_t v64 = a9;
  long long v63 = a14;
  uint64_t v60 = a5;
  uint64_t v61 = a13;
  int v57 = a10;
  int v58 = a7;
  uint64_t v20 = sub_4890(&qword_81120);
  __chkstk_darwin(v20 - 8);
  int v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for FeatureToggleView(0);
  __chkstk_darwin(v23 - 8);
  uint64_t v62 = (uint64_t)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_4890(&qword_81080);
  __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v26 = sub_5FEF4();
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  if (v26)
  {
    uint64_t v28 = *(void *)(a8 + 24);
    uint64_t v27 = *(void *)(a8 + 32);
  }
  uint64_t v54 = v28;
  uint64_t v55 = v27;
  swift_bridgeObjectRetain();
  uint64_t v29 = *(void *)(a11 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    a12 = 0;
    goto LABEL_11;
  }
  uint64_t v30 = (unsigned __int8 *)(a11 + 56 * v29);
  uint64_t v31 = *((void *)v30 - 2);
  uint64_t v53 = *((void *)v30 - 3);
  uint64_t v32 = *((void *)v30 - 1);
  __int16 v33 = *v30;
  if (v30[1]) {
    __int16 v34 = 256;
  }
  else {
    __int16 v34 = 0;
  }
  uint64_t v35 = a6;
  uint64_t v36 = a8;
  __int16 v37 = a4;
  uint64_t v38 = a1;
  uint64_t v39 = v22;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  __int16 v42 = v34 | v33;
  swift_bridgeObjectRetain();
  uint64_t v69 = v53;
  uint64_t v70 = v31;
  uint64_t v71 = v32;
  __int16 v72 = v42;
  uint64_t v43 = v41;
  uint64_t v44 = v40;
  int v22 = v39;
  a1 = v38;
  LOWORD(v38) = v37;
  a8 = v36;
  a6 = v35;
  long long v65 = a1;
  uint64_t v66 = v44;
  uint64_t v67 = v43;
  __int16 v68 = (unsigned __int16)v38 & 0x101;
  sub_1C9DC();
  swift_bridgeObjectRetain();
  LOBYTE(v35) = sub_68160();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v46 = v60;
  swift_retain();
  swift_retain();
  sub_117F4(a8);
  uint64_t v47 = v62;
  sub_4F4AC(v54, v55, a8, v57, a12 & 1, v46, a6, v58 & 1, v62);
  uint64_t KeyPath = swift_getKeyPath();
  sub_3B5C0(v63, a8, a1, (uint64_t)v22);
  uint64_t v49 = (uint64_t)v59;
  uint64_t v50 = (uint64_t *)&v59[*(int *)(v56 + 36)];
  uint64_t v51 = sub_4890(&qword_81098);
  sub_A85C((uint64_t)v22, (uint64_t)v50 + *(int *)(v51 + 28), &qword_81120);
  *uint64_t v50 = KeyPath;
  sub_1D218(v47, v49);
  sub_A8C0((uint64_t)v22, &qword_81120);
  sub_1D27C(v47);
  return sub_1D2D8(v49, v64, &qword_81080);
}

unint64_t sub_1783C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_81160);
  uint64_t v2 = (void *)sub_68660();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    char v7 = *((unsigned char *)v4 - 8);
    uint64_t v8 = *v4;
    sub_FBA8(v5, v6, v7);
    swift_bridgeObjectRetain();
    unint64_t result = sub_18CB8(v5, v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = v2[6] + 24 * result;
    *(void *)uint64_t v11 = v5;
    *(void *)(v11 + 8) = v6;
    *(unsigned char *)(v11 + 16) = v7;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_17980(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1B01C();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_68130();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    sub_11990();
    while ((sub_68160() & 1) == 0)
    {
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_118BC(a2, a3);
    uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    *a1 = *v14;
    a1[1] = v16;
    sub_FFF0(v15, v16);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_FFF0(a2, a3);
    sub_18194(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
}

uint64_t sub_17B1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_687E0();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_18318(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_17C18()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_811C8);
  uint64_t v3 = sub_68500();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v29 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v29) {
          goto LABEL_33;
        }
        unint64_t v16 = v30[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v16 = v30[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v29) {
              goto LABEL_33;
            }
            unint64_t v16 = v30[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v29)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v29) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v30[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v14);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      sub_1B01C();
      uint64_t result = sub_68130();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v22) & ~*(void *)(v8 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v8 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v11 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = (void *)(*(void *)(v4 + 48) + 16 * v11);
      *uint64_t v12 = v19;
      v12[1] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_17F10()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_81158);
  uint64_t result = sub_68500();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = sub_687E0();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_18194(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_12;
  }
  if (a4)
  {
    sub_17C18();
  }
  else
  {
    if (v9 > v8)
    {
      uint64_t result = (uint64_t)sub_1843C();
      goto LABEL_12;
    }
    sub_18788();
  }
  uint64_t v10 = *v4;
  sub_1B01C();
  uint64_t result = sub_68130();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a3 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v12 = ~v11;
    sub_11990();
    do
    {
      uint64_t result = sub_68160();
      if (result) {
        goto LABEL_15;
      }
      a3 = (a3 + 1) & v12;
    }
    while (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v14 = (uint64_t *)(*(void *)(v13 + 48) + 16 * a3);
  uint64_t *v14 = v7;
  v14[1] = a2;
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (!v16)
  {
    *(void *)(v13 + 16) = v17;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_687B0();
  __break(1u);
  return result;
}

uint64_t sub_18318(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_17F10();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_185F0();
      goto LABEL_14;
    }
    sub_18A54();
  }
  uint64_t v8 = *v3;
  uint64_t result = sub_687E0();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = sub_687B0();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_1843C()
{
  uint64_t v1 = v0;
  sub_4890(&qword_811C8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_684F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_FFF0(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_185F0()
{
  uint64_t v1 = v0;
  sub_4890(&qword_81158);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_684F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_18788()
{
  uint64_t v1 = *v0;
  sub_4890(&qword_811C8);
  uint64_t v2 = sub_68500();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v0 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v27 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v28 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v28) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v27 + 8 * v9);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    sub_FFF0(*v17, v19);
    sub_1B01C();
    uint64_t result = sub_68130();
    uint64_t v20 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v7 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v21) & ~*(void *)(v7 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v7 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v10 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    *uint64_t v11 = v18;
    v11[1] = v19;
    ++*(void *)(v3 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v28)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15)
  {
    int64_t v9 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v9 >= v28) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18A54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_81158);
  uint64_t result = sub_68500();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = sub_687E0();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_18CB8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a3 & 1;
  sub_1192C();
  uint64_t v6 = sub_68130();
  return sub_18D40(a1, a2, v5, v6);
}

unint64_t sub_18D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v6 = a4 & ~v5;
  if ((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    sub_118D4();
    do
    {
      if (sub_68160()) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v7;
    }
    while (((*(void *)(v4 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

void sub_18E28(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1A170((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_18E94(v4);
  *a1 = v2;
}

void sub_18E94(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int v4 = sub_68760(v3);
  if (v4 < v3)
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_141;
    }
    Swift::Int v104 = v4;
    if (v3 <= 1)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      uint64_t v107 = (char *)&_swiftEmptyArrayStorage[4];
      if (v3 != 1)
      {
        unint64_t v13 = _swiftEmptyArrayStorage[2];
        uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
        uint64_t v93 = v11;
        uint64_t v103 = v8;
        if (v13 >= 2)
        {
          uint64_t v94 = *v2;
          do
          {
            unint64_t v95 = v13 - 2;
            if (v13 < 2) {
              goto LABEL_136;
            }
            if (!v94) {
              goto LABEL_150;
            }
            uint64_t v96 = v93;
            uint64_t v97 = *(void *)&v93[16 * v95 + 32];
            uint64_t v98 = *(void *)&v93[16 * v13 + 24];
            sub_19578((char *)(v94 + v97), (char *)(v94 + *(void *)&v93[16 * v13 + 16]), v94 + v98, v107);
            if (v1) {
              break;
            }
            if (v98 < v97) {
              goto LABEL_137;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v96 = sub_9B4C((uint64_t)v96);
            }
            if (v95 >= *((void *)v96 + 2)) {
              goto LABEL_138;
            }
            long long v99 = &v96[16 * v95 + 32];
            *(void *)long long v99 = v97;
            *((void *)v99 + 1) = v98;
            unint64_t v100 = *((void *)v96 + 2);
            if (v13 > v100) {
              goto LABEL_139;
            }
            memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
            uint64_t v93 = v96;
            *((void *)v96 + 2) = v100 - 1;
            unint64_t v13 = v100 - 1;
          }
          while (v100 > 2);
        }
LABEL_98:
        swift_bridgeObjectRelease();
        v103[2] = 0;
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v103 = _swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v6 = v5 >> 1;
      uint64_t v7 = sub_68310();
      *(void *)(v7 + 16) = v6;
      uint64_t v103 = (void *)v7;
      uint64_t v107 = (char *)(v7 + 32);
    }
    Swift::Int v9 = 0;
    uint64_t v10 = *v2;
    uint64_t v101 = v2;
    Swift::Int v102 = v3 - 2;
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v12 = v3;
    Swift::Int v105 = v3;
    while (1)
    {
      Swift::Int v14 = v9++;
      if (v9 < v12)
      {
        char v15 = *(unsigned char *)(v10 + v14);
        double v16 = sub_31A5C(*(unsigned char *)(v10 + v9));
        Swift::Int v12 = v105;
        double v17 = sub_31A5C(v15);
        Swift::Int v9 = v14 + 2;
        if (v14 + 2 < v105)
        {
          Swift::Int v18 = v14;
          while (1)
          {
            char v19 = *(unsigned char *)(v10 + v18 + 1);
            double v20 = sub_31A5C(*(unsigned char *)(v10 + v18 + 2));
            if (v16 < v17 == v20 >= sub_31A5C(v19)) {
              break;
            }
            if (v102 == ++v18)
            {
              Swift::Int v12 = v105;
              Swift::Int v9 = v105;
              goto LABEL_22;
            }
          }
          Swift::Int v9 = v18 + 2;
          Swift::Int v12 = v105;
          if (v16 >= v17) {
            goto LABEL_33;
          }
LABEL_25:
          if (v9 < v14) {
            goto LABEL_143;
          }
          if (v14 < v9)
          {
            Swift::Int v21 = v9 - 1;
            Swift::Int v22 = v14;
            while (1)
            {
              if (v22 != v21)
              {
                if (!v10) {
                  goto LABEL_149;
                }
                char v23 = *(unsigned char *)(v10 + v22);
                *(unsigned char *)(v10 + v22) = *(unsigned char *)(v10 + v21);
                *(unsigned char *)(v10 + v21) = v23;
              }
              BOOL v63 = ++v22 < v21--;
              if (!v63) {
                goto LABEL_33;
              }
            }
          }
          goto LABEL_33;
        }
LABEL_22:
        if (v16 < v17) {
          goto LABEL_25;
        }
      }
LABEL_33:
      if (v9 < v12)
      {
        if (__OFSUB__(v9, v14)) {
          goto LABEL_140;
        }
        if (v9 - v14 < v104)
        {
          if (__OFADD__(v14, v104)) {
            goto LABEL_144;
          }
          if (v14 + v104 >= v12) {
            Swift::Int v24 = v12;
          }
          else {
            Swift::Int v24 = v14 + v104;
          }
          if (v24 < v14)
          {
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
            return;
          }
          if (v9 != v24)
          {
            uint64_t v25 = (char *)(v10 + v9);
            do
            {
              char v26 = *(unsigned char *)(v10 + v9);
              Swift::Int v27 = v14;
              int64_t v28 = v25;
              do
              {
                char v29 = *(v28 - 1);
                double v30 = sub_31A5C(v26 & 1);
                if (v30 >= sub_31A5C(v29)) {
                  break;
                }
                if (!v10) {
                  goto LABEL_147;
                }
                char v26 = *v28;
                *int64_t v28 = *(v28 - 1);
                *(v28 - 1) = v26;
                ++v14;
                --v28;
              }
              while (v9 != v14);
              ++v9;
              ++v25;
              Swift::Int v14 = v27;
            }
            while (v9 != v24);
            Swift::Int v9 = v24;
          }
        }
      }
      if (v9 < v14) {
        goto LABEL_135;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = sub_9A50(0, *((void *)v11 + 2) + 1, 1, v11);
      }
      unint64_t v32 = *((void *)v11 + 2);
      unint64_t v31 = *((void *)v11 + 3);
      unint64_t v13 = v32 + 1;
      if (v32 >= v31 >> 1) {
        uint64_t v11 = sub_9A50((char *)(v31 > 1), v32 + 1, 1, v11);
      }
      *((void *)v11 + 2) = v13;
      __int16 v33 = v11 + 32;
      __int16 v34 = &v11[16 * v32 + 32];
      *(void *)__int16 v34 = v14;
      *((void *)v34 + 1) = v9;
      if (v32)
      {
        Swift::Int v106 = v9;
        while (1)
        {
          unint64_t v35 = v13 - 1;
          if (v13 >= 4)
          {
            uint64_t v40 = &v33[16 * v13];
            uint64_t v41 = *((void *)v40 - 8);
            uint64_t v42 = *((void *)v40 - 7);
            BOOL v46 = __OFSUB__(v42, v41);
            uint64_t v43 = v42 - v41;
            if (v46) {
              goto LABEL_124;
            }
            uint64_t v45 = *((void *)v40 - 6);
            uint64_t v44 = *((void *)v40 - 5);
            BOOL v46 = __OFSUB__(v44, v45);
            uint64_t v38 = v44 - v45;
            char v39 = v46;
            if (v46) {
              goto LABEL_125;
            }
            unint64_t v47 = v13 - 2;
            uint64_t v48 = &v33[16 * v13 - 32];
            uint64_t v50 = *(void *)v48;
            uint64_t v49 = *((void *)v48 + 1);
            BOOL v46 = __OFSUB__(v49, v50);
            uint64_t v51 = v49 - v50;
            if (v46) {
              goto LABEL_126;
            }
            BOOL v46 = __OFADD__(v38, v51);
            uint64_t v52 = v38 + v51;
            if (v46) {
              goto LABEL_128;
            }
            if (v52 >= v43)
            {
              uint64_t v70 = &v33[16 * v35];
              uint64_t v72 = *(void *)v70;
              uint64_t v71 = *((void *)v70 + 1);
              BOOL v46 = __OFSUB__(v71, v72);
              uint64_t v73 = v71 - v72;
              if (v46) {
                goto LABEL_134;
              }
              BOOL v63 = v38 < v73;
              goto LABEL_88;
            }
          }
          else
          {
            if (v13 != 3)
            {
              uint64_t v64 = *((void *)v11 + 4);
              uint64_t v65 = *((void *)v11 + 5);
              BOOL v46 = __OFSUB__(v65, v64);
              uint64_t v57 = v65 - v64;
              char v58 = v46;
              goto LABEL_82;
            }
            uint64_t v37 = *((void *)v11 + 4);
            uint64_t v36 = *((void *)v11 + 5);
            BOOL v46 = __OFSUB__(v36, v37);
            uint64_t v38 = v36 - v37;
            char v39 = v46;
          }
          if (v39) {
            goto LABEL_127;
          }
          unint64_t v47 = v13 - 2;
          uint64_t v53 = &v33[16 * v13 - 32];
          uint64_t v55 = *(void *)v53;
          uint64_t v54 = *((void *)v53 + 1);
          BOOL v56 = __OFSUB__(v54, v55);
          uint64_t v57 = v54 - v55;
          char v58 = v56;
          if (v56) {
            goto LABEL_129;
          }
          uint64_t v59 = &v33[16 * v35];
          uint64_t v61 = *(void *)v59;
          uint64_t v60 = *((void *)v59 + 1);
          BOOL v46 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          if (v46) {
            goto LABEL_131;
          }
          if (__OFADD__(v57, v62)) {
            goto LABEL_133;
          }
          if (v57 + v62 >= v38)
          {
            BOOL v63 = v38 < v62;
LABEL_88:
            if (v63) {
              unint64_t v35 = v47;
            }
            goto LABEL_90;
          }
LABEL_82:
          if (v58) {
            goto LABEL_130;
          }
          uint64_t v66 = &v33[16 * v35];
          uint64_t v68 = *(void *)v66;
          uint64_t v67 = *((void *)v66 + 1);
          BOOL v46 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          if (v46) {
            goto LABEL_132;
          }
          if (v69 < v57) {
            goto LABEL_15;
          }
LABEL_90:
          unint64_t v74 = v35 - 1;
          if (v35 - 1 >= v13)
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
          if (!v10) {
            goto LABEL_148;
          }
          char v75 = v11;
          uint64_t v76 = v10;
          uint64_t v77 = &v33[16 * v74];
          uint64_t v78 = *(void *)v77;
          char v79 = v33;
          unint64_t v80 = v35;
          char v81 = &v33[16 * v35];
          uint64_t v82 = *((void *)v81 + 1);
          uint64_t v83 = v76;
          sub_19578((char *)(v76 + *(void *)v77), (char *)(v76 + *(void *)v81), v76 + v82, v107);
          if (v1) {
            goto LABEL_98;
          }
          if (v82 < v78) {
            goto LABEL_121;
          }
          if (v80 > *((void *)v75 + 2)) {
            goto LABEL_122;
          }
          *(void *)uint64_t v77 = v78;
          *(void *)&v79[16 * v74 + 8] = v82;
          unint64_t v84 = *((void *)v75 + 2);
          if (v80 >= v84) {
            goto LABEL_123;
          }
          uint64_t v11 = v75;
          unint64_t v13 = v84 - 1;
          memmove(v81, v81 + 16, 16 * (v84 - 1 - v80));
          __int16 v33 = v79;
          *((void *)v75 + 2) = v84 - 1;
          uint64_t v10 = v83;
          Swift::Int v9 = v106;
          if (v84 <= 2) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v13 = 1;
LABEL_15:
      Swift::Int v12 = v105;
      if (v9 >= v105)
      {
        uint64_t v8 = v103;
        uint64_t v2 = v101;
        goto LABEL_107;
      }
    }
  }
  if (v3 < 0) {
    goto LABEL_142;
  }
  if ((unint64_t)v3 >= 2)
  {
    uint64_t v85 = 0;
    uint64_t v86 = *v2;
    for (uint64_t i = 1; i != v3; ++i)
    {
      char v88 = *(unsigned char *)(v86 + i);
      uint64_t v89 = v85;
      do
      {
        uint64_t v90 = v86 + v89;
        char v91 = *(unsigned char *)(v86 + v89);
        double v92 = sub_31A5C(v88 & 1);
        if (v92 >= sub_31A5C(v91)) {
          break;
        }
        if (!v86) {
          goto LABEL_146;
        }
        char v88 = *(unsigned char *)(v90 + 1);
        *(unsigned char *)(v90 + 1) = *(unsigned char *)(v86 + v89);
        *(unsigned char *)(v86 + v89--) = v88;
      }
      while (v89 != -1);
      ++v85;
    }
  }
}

uint64_t sub_19578(char *__dst, char *__src, unint64_t a3, char *a4)
{
  Swift::Int v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  uint64_t v9 = a3 - (void)__src;
  if (__src - __dst >= (uint64_t)(a3 - (void)__src))
  {
    if (a4 != __src || a3 <= (unint64_t)a4) {
      memmove(a4, __src, a3 - (void)__src);
    }
    uint64_t v10 = &v4[v9];
    if (v7 >= v6 || v9 < 1) {
      goto LABEL_36;
    }
    char v15 = (char *)(a3 - 1);
    while (1)
    {
      double v16 = v15 + 1;
      char v17 = *(v6 - 1);
      double v18 = sub_31A5C(*(v10 - 1));
      if (v18 >= sub_31A5C(v17))
      {
        char v19 = v10 - 1;
        if (v16 != v10)
        {
          --v10;
          goto LABEL_33;
        }
        BOOL v20 = v15 >= v10--;
        if (v20) {
          goto LABEL_33;
        }
      }
      else
      {
        char v19 = v6 - 1;
        if (v16 != v6)
        {
          --v6;
LABEL_33:
          *char v15 = *v19;
          goto LABEL_34;
        }
        BOOL v20 = v15 >= v6--;
        if (v20) {
          goto LABEL_33;
        }
      }
LABEL_34:
      if (v6 > v7)
      {
        --v15;
        if (v10 > v4) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  if (a4 != __dst || __src <= a4) {
    memmove(a4, __dst, v8);
  }
  uint64_t v10 = &v4[v8];
  if ((unint64_t)v6 < a3 && v8 >= 1)
  {
    while (1)
    {
      char v11 = *v4;
      double v12 = sub_31A5C(*v6);
      if (v12 >= sub_31A5C(v11)) {
        break;
      }
      unint64_t v13 = v6;
      BOOL v14 = v7 == v6++;
      if (!v14) {
        goto LABEL_12;
      }
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3) {
        goto LABEL_15;
      }
    }
    unint64_t v13 = v4;
    BOOL v14 = v7 == v4++;
    if (v14) {
      goto LABEL_13;
    }
LABEL_12:
    *uint64_t v7 = *v13;
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v6 = v7;
LABEL_36:
  if (v6 != v4 || v6 >= v10) {
    memmove(v6, v4, v10 - v4);
  }
  return 1;
}

char *sub_19768(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_811C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  double v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_19854(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_811A8);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_811A0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_19990(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_811B0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[7 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_811B8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_19ACC()
{
  uint64_t v1 = *v0;
  sub_1B01C();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_68130();
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v4 = v2 & ~v3;
  if ((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    sub_11990();
    while ((sub_68160() & 1) == 0)
    {
      unint64_t v4 = (v4 + 1) & v5;
      if (((*(void *)(v1 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v0;
    uint64_t v10 = *v0;
    uint64_t *v0 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1843C();
      uint64_t v8 = v10;
    }
    uint64_t v6 = *(void *)(*(void *)(v8 + 48) + 16 * v4);
    sub_19D40(v4);
    uint64_t *v0 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

uint64_t sub_19C34(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = sub_687E0();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_185F0();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_19EFC(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_19D40(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_68480();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      sub_1B01C();
      do
      {
        uint64_t v10 = sub_68130() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(v3 + 48);
            uint64_t v14 = (_OWORD *)(v13 + 16 * v2);
            char v15 = (_OWORD *)(v13 + 16 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v14 >= v15 + 1))
            {
              _OWORD *v14 = *v15;
              int64_t v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_19EFC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_68480();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = sub_687E0() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            char v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *char v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

char *sub_1A084(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_811C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_1A170(uint64_t a1)
{
  return sub_1A084(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1A184(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1B01C();
  uint64_t result = sub_68370();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_FFF0(v5, *v4);
      sub_17980(v7, v5, v6);
      sub_118BC(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1A220()
{
  unint64_t result = qword_80F00;
  if (!qword_80F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80F00);
  }
  return result;
}

uint64_t sub_1A274(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1A2E0()
{
  unint64_t result = qword_80F10;
  if (!qword_80F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80F10);
  }
  return result;
}

uint64_t sub_1A334@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  swift_retain();
  uint64_t v6 = sub_24DB4();
  swift_release();
  if (v6)
  {
    swift_retain();
    sub_25190();
    swift_release();
    swift_getKeyPath();
    int64_t v7 = (void *)swift_allocObject();
    uint64_t v7[2] = v4;
    v7[3] = v3;
    _OWORD v7[4] = v5;
    v7[5] = v6;
    swift_retain();
    swift_retain();
    sub_4890(&qword_81020);
    sub_4890(&qword_80FE0);
    sub_AE4C(&qword_81028, &qword_81020);
    sub_1B01C();
    sub_AE4C(&qword_80FD8, &qword_80FE0);
    sub_68010();
    uint64_t v8 = sub_4890(&qword_80FD0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 0, 1, v8);
  }
  else
  {
    uint64_t v10 = sub_4890(&qword_80FD0);
    size_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    return v11(a1, 1, 1, v10);
  }
}

uint64_t sub_1A564()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1A580()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for ScrollableTypographyPanelView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for ScrollableTypographyPanelView()
{
  return swift_release();
}

void *assignWithCopy for ScrollableTypographyPanelView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ScrollableTypographyPanelView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableTypographyPanelView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollableTypographyPanelView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableTypographyPanelView()
{
  return &type metadata for ScrollableTypographyPanelView;
}

uint64_t destroy for TypographyPanelView()
{
  swift_release();
  return swift_release();
}

void *_s17UITypographyPanel19TypographyPanelViewVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for TypographyPanelView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for TypographyPanelView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TypographyPanelView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TypographyPanelView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TypographyPanelView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TypographyPanelView()
{
  return &type metadata for TypographyPanelView;
}

uint64_t sub_1A8BC()
{
  return sub_AE4C(&qword_80F38, &qword_80F40);
}

unint64_t sub_1A8FC()
{
  unint64_t result = qword_80F48;
  if (!qword_80F48)
  {
    sub_4FAC(&qword_80F50);
    sub_1A99C();
    sub_AE4C(&qword_80FB8, &qword_80FC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80F48);
  }
  return result;
}

unint64_t sub_1A99C()
{
  unint64_t result = qword_80F58;
  if (!qword_80F58)
  {
    sub_4FAC(&qword_80F60);
    sub_1AA3C();
    sub_AE4C(&qword_80FA8, &qword_80FB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80F58);
  }
  return result;
}

unint64_t sub_1AA3C()
{
  unint64_t result = qword_80F68;
  if (!qword_80F68)
  {
    sub_4FAC(&qword_80F70);
    sub_4FAC(&qword_80F78);
    sub_1ABFC(&qword_80F80, &qword_80F78, &qword_80F88, &qword_80F90);
    swift_getOpaqueTypeConformance2();
    sub_AE4C(&qword_80F98, &qword_80FA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80F68);
  }
  return result;
}

unint64_t sub_1AB3C()
{
  unint64_t result = qword_80FC8;
  if (!qword_80FC8)
  {
    sub_4FAC(&qword_80FD0);
    sub_AE4C(&qword_80FD8, &qword_80FE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_80FC8);
  }
  return result;
}

uint64_t sub_1ABD4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1ABFC(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    sub_4FAC(a3);
    sub_67A40();
    sub_AE4C(a4, a3);
    swift_getOpaqueTypeConformance2();
    sub_AE4C(&qword_80B48, &qword_80B50);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1AD0C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

__n128 sub_1AD54@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v25 = (void *)v2[5];
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  swift_retain();
  uint64_t v9 = sub_250F8();
  swift_release();
  uint64_t v10 = *(void *)(v9 + 16);
  sub_FFF0(v7, v8);
  if (v10 && (unint64_t v11 = sub_EA0C(v7, v8), (v12 & 1) != 0))
  {
    Swift::Int v24 = *(void **)(*(void *)(v9 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
  }
  else
  {
    Swift::Int v24 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  sub_118BC(v7, v8);
  sub_68350();
  swift_retain();
  sub_FFF0(v7, v8);
  swift_retain();
  uint64_t v13 = sub_68340();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v13;
  v14[3] = &protocol witness table for MainActor;
  v14[4] = v5;
  v14[5] = v4;
  v14[6] = v6;
  v14[7] = v7;
  v14[8] = v8;
  swift_retain();
  sub_FFF0(v7, v8);
  swift_retain();
  uint64_t v15 = sub_68340();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v5;
  v16[5] = v4;
  v16[6] = v6;
  v16[7] = v7;
  v16[8] = v8;
  sub_68000();
  long long v17 = v26;
  char v18 = v27.n128_u8[0];
  char v19 = (void *)swift_allocObject();
  v19[2] = v24;
  v19[3] = v5;
  v19[4] = v4;
  v19[5] = v6;
  v19[6] = v25;
  v19[7] = v7;
  v19[8] = v8;
  sub_FFF0(v7, v8);
  swift_retain();
  sub_FFF0(v7, v8);
  swift_retain();
  id v20 = v25;
  sub_4890(&qword_81038);
  sub_1B35C(&qword_81040, &qword_81038, (void (*)(void))sub_50C4, (void (*)(void))sub_1B2B0);
  char v21 = sub_124D4();
  sub_44F00(v21 & 1, v17, *((uint64_t *)&v17 + 1), v18, v7, v8, (uint64_t)sub_1B29C, (uint64_t)v19, (uint64_t)&v26);
  long long v22 = v29;
  *(_OWORD *)(a2 + 32) = v28;
  *(_OWORD *)(a2 + 48) = v22;
  *(_OWORD *)(a2 + 64) = v30;
  __n128 result = v27;
  *(_OWORD *)a2 = v26;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

unint64_t sub_1B01C()
{
  unint64_t result = qword_81030;
  if (!qword_81030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81030);
  }
  return result;
}

uint64_t sub_1B074@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  sub_4890(&qword_80EF0);
  sub_67470();
  LOBYTE(v4) = sub_16D38(v3, v4, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = (v4 & 1) == 0;
  return result;
}

uint64_t sub_1B0F8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 64) >= 9uLL) {
    swift_bridgeObjectRelease();
  }
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1B150(unsigned char *a1)
{
  uint64_t v2 = *(void *)(v1 + 56);
  unint64_t v3 = *(void *)(v1 + 64);
  if (*a1 == 1)
  {
    sub_4890(&qword_80EF0);
    sub_67470();
    uint64_t v4 = sub_19ACC();
    sub_1D6A0(v4, v5);
  }
  else
  {
    sub_FFF0(*(void *)(v1 + 56), *(void *)(v1 + 64));
    sub_4890(&qword_80EF0);
    sub_67470();
    sub_17980(v7, v2, v3);
    sub_118BC(v7[0], v7[1]);
  }
  return sub_67480();
}

uint64_t sub_1B23C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  if (*(void *)(v0 + 64) >= 9uLL) {
    swift_bridgeObjectRelease();
  }
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1B29C@<X0>(uint64_t a1@<X8>)
{
  return sub_15700(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), a1);
}

unint64_t sub_1B2B0()
{
  unint64_t result = qword_81048;
  if (!qword_81048)
  {
    sub_4FAC(&qword_81050);
    sub_1B35C(&qword_81058, &qword_81060, (void (*)(void))sub_1B3E4, (void (*)(void))sub_1B5FC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81048);
  }
  return result;
}

uint64_t sub_1B35C(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B3E4()
{
  return sub_1B35C(&qword_81068, &qword_81070, (void (*)(void))sub_1B420, (void (*)(void))sub_1B4F0);
}

unint64_t sub_1B420()
{
  unint64_t result = qword_81078;
  if (!qword_81078)
  {
    sub_4FAC(&qword_81080);
    sub_1D038(&qword_81088, (void (*)(uint64_t))type metadata accessor for FeatureToggleView);
    sub_AE4C(&qword_81090, &qword_81098);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81078);
  }
  return result;
}

uint64_t sub_1B4F0()
{
  return sub_1A274(&qword_810A0, &qword_810A8, (void (*)(void))sub_1B52C);
}

unint64_t sub_1B52C()
{
  unint64_t result = qword_810B0;
  if (!qword_810B0)
  {
    sub_4FAC(&qword_810B8);
    sub_AE4C(&qword_810C0, &qword_810C8);
    sub_1D038(&qword_810D0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_810B0);
  }
  return result;
}

uint64_t sub_1B5FC()
{
  return sub_1A274(&qword_810D8, &qword_810E0, (void (*)(void))sub_1B420);
}

char *sub_1B638(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t a1))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = (char *)_swiftEmptyArrayStorage;
  uint64_t v7 = 32;
  do
  {
    long long v8 = *(_OWORD *)(a1 + v7 + 48);
    void v15[2] = *(_OWORD *)(a1 + v7 + 32);
    v15[3] = v8;
    uint64_t v16 = *(void *)(a1 + v7 + 64);
    long long v9 = *(_OWORD *)(a1 + v7 + 16);
    v15[0] = *(_OWORD *)(a1 + v7);
    v15[1] = v9;
    sub_117F4((uint64_t)v15);
    swift_retain();
    BOOL v10 = sub_3BE9C(a3, (uint64_t)v15);
    swift_release();
    if (v10)
    {
      BOOL v11 = sub_3A0C8((uint64_t)v15);
      sub_FF80((uint64_t)v15);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_19768(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      unint64_t v13 = *((void *)v6 + 2);
      unint64_t v12 = *((void *)v6 + 3);
      if (v13 >= v12 >> 1) {
        uint64_t v6 = sub_19768((char *)(v12 > 1), v13 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v13 + 1;
      v6[v13 + 32] = v11;
    }
    else
    {
      sub_FF80((uint64_t)v15);
    }
    v7 += 72;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B7AC()
{
  if (*(void *)(v0 + 32) >= 9uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1B80C@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_15B54(a1, *(uint64_t (**)(uint64_t))(v2 + 16), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 64), a2);
}

unint64_t sub_1B820()
{
  unint64_t result = qword_81100;
  if (!qword_81100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81100);
  }
  return result;
}

unint64_t sub_1B874()
{
  unint64_t result = qword_81108;
  if (!qword_81108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81108);
  }
  return result;
}

uint64_t *sub_1B8C8(uint64_t *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  sub_1B96C(*a1, a1[1], a1[2], a1[3], a1[4]);
  sub_1B96C(v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_1B96C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    sub_FFE0(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1B9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *(void *)(a1 + 16);
  if (v40)
  {
    uint64_t v36 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    __int16 v34 = _swiftEmptyArrayStorage;
    uint64_t v35 = a2;
    while (1)
    {
      uint64_t v6 = *(void *)(v36 + 32 * v5);
      swift_bridgeObjectRetain();
      uint64_t v7 = sub_24FD4();
      if (*(void *)(v7 + 16))
      {
        uint64_t v9 = *(void *)a3;
        uint64_t v8 = *(void *)(a3 + 8);
        char v10 = *(unsigned char *)(a3 + 16);
        sub_FBA8(*(void *)a3, v8, v10);
        unint64_t v11 = sub_18CB8(v9, v8, v10);
        if ((v12 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          sub_FFE0(v9, v8, v10);
          goto LABEL_4;
        }
        uint64_t v13 = *(void *)(*(void *)(v7 + 56) + 8 * v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t result = (void *)sub_FFE0(v9, v8, v10);
        if (*(void *)(v13 + 16))
        {
          int64_t v15 = 0;
          uint64_t v16 = v13 + 56;
          uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
          if (v17 < 64) {
            uint64_t v18 = ~(-1 << v17);
          }
          else {
            uint64_t v18 = -1;
          }
          unint64_t v19 = v18 & *(void *)(v13 + 56);
          int64_t v20 = (unint64_t)(v17 + 63) >> 6;
          do
          {
            if (v19)
            {
              unint64_t v21 = __clz(__rbit64(v19));
              v19 &= v19 - 1;
              unint64_t v22 = v21 | (v15 << 6);
            }
            else
            {
              int64_t v23 = v15 + 1;
              if (__OFADD__(v15, 1))
              {
                __break(1u);
LABEL_47:
                __break(1u);
                return result;
              }
              if (v23 >= v20) {
                goto LABEL_42;
              }
              unint64_t v24 = *(void *)(v16 + 8 * v23);
              ++v15;
              if (!v24)
              {
                int64_t v15 = v23 + 1;
                if (v23 + 1 >= v20) {
                  goto LABEL_42;
                }
                unint64_t v24 = *(void *)(v16 + 8 * v15);
                if (!v24)
                {
                  int64_t v15 = v23 + 2;
                  if (v23 + 2 >= v20) {
                    goto LABEL_42;
                  }
                  unint64_t v24 = *(void *)(v16 + 8 * v15);
                  if (!v24)
                  {
                    int64_t v15 = v23 + 3;
                    if (v23 + 3 >= v20) {
                      goto LABEL_42;
                    }
                    unint64_t v24 = *(void *)(v16 + 8 * v15);
                    if (!v24)
                    {
                      int64_t v15 = v23 + 4;
                      if (v23 + 4 >= v20) {
                        goto LABEL_42;
                      }
                      unint64_t v24 = *(void *)(v16 + 8 * v15);
                      if (!v24)
                      {
                        int64_t v25 = v23 + 5;
                        if (v25 >= v20)
                        {
LABEL_42:
                          swift_release();
                          goto LABEL_4;
                        }
                        unint64_t v24 = *(void *)(v16 + 8 * v25);
                        if (!v24)
                        {
                          while (1)
                          {
                            int64_t v15 = v25 + 1;
                            if (__OFADD__(v25, 1)) {
                              goto LABEL_47;
                            }
                            if (v15 >= v20) {
                              goto LABEL_42;
                            }
                            unint64_t v24 = *(void *)(v16 + 8 * v15);
                            ++v25;
                            if (v24) {
                              goto LABEL_33;
                            }
                          }
                        }
                        int64_t v15 = v25;
                      }
                    }
                  }
                }
              }
LABEL_33:
              unint64_t v19 = (v24 - 1) & v24;
              unint64_t v22 = __clz(__rbit64(v24)) + (v15 << 6);
            }
          }
          while (*(void *)(*(void *)(v13 + 48) + 8 * v22) != v6);
          swift_release();
          long long v26 = (void *)swift_allocObject();
          v26[2] = 0;
          v26[3] = 0;
          v26[4] = v6;
          swift_unownedRetainStrong();
          swift_unownedRetain();
          swift_release();
          uint64_t v27 = swift_allocObject();
          *(void *)(v27 + 16) = 0;
          *(void *)(v27 + 24) = 0;
          *(void *)(v27 + 32) = v35;
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)(v27 + 56) = *(_OWORD *)(a3 + 16);
          long long v29 = *(_OWORD *)(a3 + 48);
          *(_OWORD *)(v27 + 72) = *(_OWORD *)(a3 + 32);
          *(_OWORD *)(v27 + 88) = v29;
          *(void *)(v27 + 104) = *(void *)(a3 + 64);
          *(_OWORD *)(v27 + 4sub_66CA4(2, 18, 1, 0) = v28;
          sub_117F4(a3);
          sub_68000();
          swift_bridgeObjectRelease();
          if (v38)
          {
            if (swift_isUniquelyReferenced_nonNull_native()) {
              long long v30 = v34;
            }
            else {
              long long v30 = sub_19854(0, v34[2] + 1, 1, v34);
            }
            unint64_t v32 = v30[2];
            unint64_t v31 = v30[3];
            if (v32 >= v31 >> 1) {
              long long v30 = sub_19854((void *)(v31 > 1), v32 + 1, 1, v30);
            }
            v30[2] = v32 + 1;
            __int16 v34 = v30;
            __int16 v33 = &v30[3 * v32];
            v33[4] = v37;
            v33[5] = v38;
            v33[6] = v39;
          }
          goto LABEL_5;
        }
      }
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
LABEL_5:
      if (++v5 == v40)
      {
        swift_bridgeObjectRelease();
        return v34;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1BDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (char *)(swift_bridgeObjectRetain() + 57);
    uint64_t v5 = _swiftEmptyArrayStorage;
    while (1)
    {
      long long v29 = v5;
      uint64_t v6 = *(void *)(v4 - 25);
      uint64_t v7 = *(void *)(v4 - 17);
      uint64_t v8 = *(void *)(v4 - 9);
      char v9 = *v4;
      if (*v4) {
        __int16 v10 = 256;
      }
      else {
        __int16 v10 = 0;
      }
      int v33 = *(v4 - 1);
      __int16 v11 = v10 | *(v4 - 1);
      swift_bridgeObjectRetain();
      if (sub_6034C(v6, v7, v8, v11) != 2)
      {
        uint64_t result = sub_6034C(v6, v7, v8, v11);
        if (result == 2)
        {
          __break(1u);
          return result;
        }
        if ((result & 1) == 0) {
          goto LABEL_3;
        }
      }
      if (*(void *)(*(void *)(a2 + 48) + 16) != 2
        || (sub_6034C(v6, v7, v8, v11) == 2 ? (BOOL v13 = v33 == 0) : (BOOL v13 = 1), v13))
      {
        uint64_t v14 = *(void *)a2;
        uint64_t v15 = *(void *)(a2 + 8);
        char v16 = *(unsigned char *)(a2 + 16);
        swift_unownedRetainStrong();
        swift_bridgeObjectRetain();
        sub_FBA8(v14, v15, v16);
        swift_unownedRetain();
        swift_bridgeObjectRetain();
        swift_unownedRetain();
        sub_FBA8(v14, v15, v16);
        sub_117F4(a2);
        swift_unownedRelease();
        swift_unownedRelease();
        swift_unownedRetain();
        swift_release();
        uint64_t v17 = swift_allocObject();
        long long v18 = *(_OWORD *)a2;
        *(_OWORD *)(v17 + 104) = *(_OWORD *)(a2 + 16);
        long long v19 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v17 + 12sub_66CA4(2, 18, 1, 0) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v17 + 136) = v19;
        *(void *)(v17 + 16) = 0;
        *(void *)(v17 + 24) = 0;
        *(void *)(v17 + 32) = v14;
        *(void *)(v17 + 4sub_66CA4(2, 18, 1, 0) = v15;
        *(unsigned char *)(v17 + 48) = v16;
        *(void *)(v17 + 56) = v6;
        *(void *)(v17 + 64) = v7;
        *(void *)(v17 + 72) = v8;
        *(unsigned char *)(v17 + 8sub_66CA4(2, 18, 1, 0) = v33;
        *(unsigned char *)(v17 + 81) = v9;
        uint64_t v20 = *(void *)(a2 + 64);
        *(_OWORD *)(v17 + 88) = v18;
        *(void *)(v17 + 152) = v20;
        *(void *)(v17 + 16sub_66CA4(2, 18, 1, 0) = a3;
        swift_unownedRetainStrong();
        swift_unownedRetain();
        swift_release();
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = 0;
        *(void *)(v21 + 24) = 0;
        *(void *)(v21 + 32) = a3;
        *(void *)(v21 + 4sub_66CA4(2, 18, 1, 0) = v14;
        *(void *)(v21 + 48) = v15;
        *(unsigned char *)(v21 + 56) = v16;
        *(void *)(v21 + 64) = v6;
        *(void *)(v21 + 72) = v7;
        *(void *)(v21 + 8sub_66CA4(2, 18, 1, 0) = v8;
        *(unsigned char *)(v21 + 88) = v33;
        *(unsigned char *)(v21 + 89) = v9;
        sub_68000();
        unint64_t v22 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v22 = sub_19990(0, v29[2] + 1, 1, v29);
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        int64_t v25 = v22;
        if (v24 >= v23 >> 1) {
          int64_t v25 = sub_19990((void *)(v23 > 1), v24 + 1, 1, v22);
        }
        v25[2] = v24 + 1;
        uint64_t v5 = v25;
        long long v26 = &v25[7 * v24];
        v26[4] = v6;
        v26[5] = v7;
        v26[6] = v8;
        *((unsigned char *)v26 + 56) = v33;
        *((unsigned char *)v26 + 57) = v9;
        v26[8] = v30;
        v26[9] = v31;
        *((unsigned char *)v26 + 8sub_66CA4(2, 18, 1, 0) = v32;
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        uint64_t v5 = v29;
      }
      v4 += 32;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
    }
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_1C148()
{
  sub_FFE0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_1C1B4@<X0>(const __CTFont *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  return sub_174C4(a1, a2, a3, a4 & 0x101, a5, a6, a7, v8 + 16, a8, *(unsigned char *)(v8 + 88), *(void *)(v8 + 96), *(unsigned char *)(v8 + 104), *(void *)(v8 + 112), *(uint64_t (**)(uint64_t))(v8 + 120));
}

uint64_t sub_1C200()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1C238(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return (*(uint64_t (**)(void, void, void, void, void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), v2 | *(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_1C28C()
{
  swift_release();

  sub_FFE0(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 113, 7);
}

uint64_t sub_1C2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_16FB4(a1, *(uint64_t (**)(uint64_t))(v2 + 24), v2 + 32, *(void *)(v2 + 104), *(unsigned __int8 *)(v2 + 112), a2);
}

unint64_t sub_1C30C()
{
  unint64_t result = qword_81148;
  if (!qword_81148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81148);
  }
  return result;
}

uint64_t sub_1C36C(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  int v6 = *a1;
  swift_unownedRetainStrong();
  sub_4890(&qword_81150);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = v3;
  *(unsigned char *)(inited + 48) = v4;
  if (v6 == 1)
  {
    sub_4890(&qword_81168);
    uint64_t v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_693E0;
    *(void *)(v8 + 32) = v5;
    char v9 = (void *)sub_1C6D4(v8);
    swift_setDeallocating();
  }
  else
  {
    char v9 = &_swiftEmptySetSingleton;
  }
  *(void *)(inited + 56) = v9;
  sub_FBA8(v2, v3, v4);
  unint64_t v10 = sub_1783C(inited);
  sub_27598(v10);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1C478@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  swift_unownedRetainStrong();
  uint64_t v7 = sub_24FD4();
  swift_release();
  uint64_t v8 = *(void *)(v7 + 16);
  sub_FBA8(v3, v4, v5);
  if (v8 && (unint64_t v9 = sub_18CB8(v3, v4, v5), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_FFE0(v3, v4, v5);
    BOOL v12 = sub_16E24(v6, v11);
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v14 = v12;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = sub_FFE0(v3, v4, v5);
    BOOL v14 = 0;
  }
  *a1 = v14;
  return result;
}

uint64_t sub_1C570()
{
  swift_unknownObjectRelease();
  swift_unownedRelease();
  sub_FFE0(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 122, 7);
}

uint64_t sub_1C5CC(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 96);
  int v7 = *a1;
  swift_unownedRetainStrong();
  sub_4890(&qword_81150);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = v3;
  *(unsigned char *)(inited + 48) = v4;
  sub_4890(&qword_81168);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_693E0;
  if (v7) {
    uint64_t v10 = v5;
  }
  else {
    uint64_t v10 = v6;
  }
  *(void *)(v9 + 32) = v10;
  uint64_t v11 = sub_1C6D4(v9);
  swift_setDeallocating();
  *(void *)(inited + 56) = v11;
  sub_FBA8(v2, v3, v4);
  unint64_t v12 = sub_1783C(inited);
  sub_27598(v12);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1C6D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_4890(&qword_81158);
    uint64_t v3 = sub_68520();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    uint64_t v7 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      uint64_t v8 = *(void *)(v6 + 8 * v4);
      uint64_t result = sub_687E0();
      unint64_t v10 = result & v7;
      unint64_t v11 = (result & (unint64_t)v7) >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * v11);
      uint64_t v13 = 1 << (result & v7);
      uint64_t v14 = *(void *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(void *)(v14 + 8 * v10) != v8)
        {
          unint64_t v10 = (v10 + 1) & v7;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v11) = v13 | v12;
        *(void *)(v14 + 8 * v1sub_66CA4(2, 18, 1, 0) = v8;
        uint64_t v15 = *(void *)(v3 + 16);
        BOOL v16 = __OFADD__(v15, 1);
        uint64_t v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v17;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

BOOL sub_1C7E4(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  char v10 = a4;
  char v14 = a8 & 1;
  __int16 v15 = a4 & 0x101;
  char v16 = sub_6034C(a1, a2, a3, a4 & 0x101);
  if (v16 == 2 || (char v17 = v16, v18 = sub_60364(a1, a2, a3, v15), (v19 & 1) != 0))
  {
    char v26 = v10 & 1;
    uint64_t v27 = sub_24FD4();
    uint64_t v28 = *(void *)(v27 + 16);
    sub_FBA8(a6, a7, v14);
    if (v28)
    {
      unint64_t v29 = sub_18CB8(a6, a7, v14);
      if (v30)
      {
        uint64_t v31 = *(void *)(*(void *)(v27 + 56) + 8 * v29);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_FFE0(a6, a7, v14);
        BOOL v32 = sub_16E24(a1, v31);
        swift_bridgeObjectRelease();
        return v32;
      }
    }
    swift_bridgeObjectRelease();
    sub_FFE0(a6, a7, v14);
  }
  else
  {
    uint64_t v20 = v18;
    uint64_t v21 = sub_24FD4();
    uint64_t v22 = *(void *)(v21 + 16);
    sub_FBA8(a6, a7, v14);
    if (v22 && (unint64_t v23 = sub_18CB8(a6, a7, v14), (v24 & 1) != 0))
    {
      int64_t v25 = *(void **)(*(void *)(v21 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    else
    {
      int64_t v25 = &_swiftEmptySetSingleton;
    }
    swift_bridgeObjectRelease();
    sub_FFE0(a6, a7, v14);
    if (sub_16E24(a1, (uint64_t)v25))
    {
      char v26 = v17 & 1;
      swift_bridgeObjectRelease();
    }
    else if (v17 & 1) != 0 && (v10)
    {
      BOOL v34 = sub_16E24(v20, (uint64_t)v25);
      swift_bridgeObjectRelease();
      char v26 = !v34;
    }
    else
    {
      swift_bridgeObjectRelease();
      char v26 = 0;
    }
  }
  return v26 & 1;
}

unint64_t sub_1C9DC()
{
  unint64_t result = qword_81178;
  if (!qword_81178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81178);
  }
  return result;
}

uint64_t sub_1CA30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CA98()
{
  uint64_t v1 = sub_4890(&qword_81170);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  sub_FFE0(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(unsigned char *)(v0 + v3 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for FeatureOptionView(0);
  uint64_t v7 = (id *)(v0 + v3 + *(int *)(v6 + 36));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
    {
      uint64_t v22 = v4;

      swift_bridgeObjectRelease();
      uint64_t v9 = (char *)v7 + *(int *)(v8 + 28);
      uint64_t v10 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
      {
        uint64_t v20 = sub_67240();
        uint64_t v21 = *(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8);
        v21(v9, v20);
        v21(&v9[*(int *)(v10 + 48)], v20);
      }
      swift_bridgeObjectRelease();
      uint64_t v4 = v22;
    }
  }
  else
  {
    swift_release();
  }
  sub_1CE40(*(void *)(v5 + *(int *)(v6 + 40)), *(unsigned char *)(v5 + *(int *)(v6 + 40) + 8));
  uint64_t v11 = v5 + *(int *)(v1 + 36);
  swift_release();
  uint64_t v12 = (id *)(v11 + *(int *)(sub_4890(&qword_81098) + 28));
  uint64_t v13 = type metadata accessor for FeaturePreviewConfiguration(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {

    swift_bridgeObjectRelease();
    char v14 = (char *)v12 + *(int *)(v13 + 28);
    uint64_t v15 = sub_4890(&qword_81188);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
    {
      uint64_t v23 = v4;
      uint64_t v16 = sub_67240();
      char v17 = *(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8);
      v17(v14, v16);
      uint64_t v18 = v16;
      uint64_t v4 = v23;
      v17(&v14[*(int *)(v15 + 48)], v18);
    }
    swift_bridgeObjectRelease();
  }
  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1CE40(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1CE4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_4890(&qword_81170) - 8);
  return sub_A85C(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1, &qword_81170);
}

uint64_t sub_1CEC4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 50, 7);
}

uint64_t sub_1CF04()
{
  if (*(void *)(*(void *)(v0 + 16) + 16))
  {
    sub_4890(&qword_811A0);
    return sub_67FE0();
  }
  return result;
}

unint64_t sub_1CF68()
{
  unint64_t result = qword_81190;
  if (!qword_81190)
  {
    sub_4FAC(&qword_81170);
    sub_1D038(&qword_81198, (void (*)(uint64_t))type metadata accessor for FeatureOptionView);
    sub_AE4C(&qword_81090, &qword_81098);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81190);
  }
  return result;
}

uint64_t sub_1D038(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D080()
{
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1D0B8(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 32);
}

uint64_t sub_1D0C4()
{
  swift_unknownObjectRelease();
  swift_unownedRelease();
  sub_FFE0(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1D128(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_unownedRetainStrong();
  sub_4890(&qword_81150);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  sub_117DC((long long *)(v1 + 40), (uint64_t)&v8);
  sub_117DC(&v8, inited + 32);
  sub_4890(&qword_81168);
  uint64_t v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_693E0;
  *(void *)(v4 + 32) = v2;
  uint64_t v5 = sub_1C6D4(v4);
  swift_setDeallocating();
  *(void *)(inited + 56) = v5;
  sub_11854((uint64_t)&v8);
  unint64_t v6 = sub_1783C(inited);
  sub_27598(v6);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1D218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureToggleView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D27C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeatureToggleView(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D2D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_4890(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D340()
{
  swift_unknownObjectRelease();
  sub_FFE0(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_bridgeObjectRelease();
  sub_FFE0(*(void *)(v0 + 88), *(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  return _swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1D3B8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  char v5 = *(unsigned char *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 72);
  if (*(unsigned char *)(v1 + 81)) {
    __int16 v9 = 256;
  }
  else {
    __int16 v9 = 0;
  }
  __int16 v10 = v9 | *(unsigned __int8 *)(v1 + 80);
  uint64_t v11 = *(void *)(v1 + 160);
  swift_unownedRetainStrong();
  BOOL v12 = sub_1C7E4(v6, v7, v8, v10, v11, v3, v4, v5);
  uint64_t result = swift_release();
  *a1 = v12;
  return result;
}

uint64_t sub_1D468()
{
  swift_unknownObjectRelease();
  swift_unownedRelease();
  sub_FFE0(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 90, 7);
}

uint64_t sub_1D4BC(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v24 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  if (*(unsigned char *)(v1 + 89)) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  __int16 v8 = v7 | *(unsigned __int8 *)(v1 + 88);
  int v9 = *a1;
  swift_unownedRetainStrong();
  uint64_t v10 = sub_24FD4();
  swift_release();
  uint64_t v11 = *(void *)(v10 + 16);
  sub_FBA8(v2, v3, v4);
  if (v11 && (unint64_t v12 = sub_18CB8(v2, v3, v4), (v13 & 1) != 0))
  {
    char v14 = *(void **)(*(void *)(v10 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
  }
  else
  {
    char v14 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease();
  sub_FFE0(v2, v3, v4);
  char v26 = v14;
  uint64_t v15 = sub_60364(v5, v24, v6, v8);
  uint64_t v17 = v15;
  if (v9)
  {
    if ((v16 & 1) == 0) {
      sub_19C34(v15);
    }
    uint64_t v18 = v5;
    goto LABEL_14;
  }
  if ((v16 & 1) == 0)
  {
    sub_19C34(v5);
    uint64_t v18 = v17;
LABEL_14:
    sub_17B1C(v25, v18);
    goto LABEL_16;
  }
  sub_19C34(v5);
LABEL_16:
  swift_unownedRetainStrong();
  sub_4890(&qword_81150);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  *(void *)(inited + 32) = v2;
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = v3;
  *(unsigned char *)(inited + 48) = v4;
  uint64_t v20 = v26;
  uint64_t v21 = v26[2];
  sub_FBA8(v2, v3, v4);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = &_swiftEmptySetSingleton;
  }
  *(void *)(inited + 56) = v20;
  unint64_t v22 = sub_1783C(inited);
  sub_27598(v22);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1D6A0(uint64_t a1, unint64_t a2)
{
  if (a2 != 9) {
    return sub_118BC(a1, a2);
  }
  return a1;
}

uint64_t sub_1D6B8()
{
  return sub_673E0();
}

uint64_t sub_1D6FC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1D770@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1D7F0(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return sub_67430();
}

uint64_t sub_1D868()
{
  return sub_67430();
}

id sub_1D8D8()
{
  uint64_t v0 = (void *)*sub_605AC();
  return v0;
}

uint64_t sub_1D904()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__font, &qword_811D0);
}

uint64_t sub_1D918(uint64_t a1)
{
  return sub_1DFE4(a1, &qword_811D8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__font, &qword_811D0);
}

uint64_t sub_1D934()
{
  return sub_673E0();
}

uint64_t sub_1D964()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1D9D8@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1DA58()
{
  return sub_67430();
}

uint64_t sub_1DACC()
{
  return sub_67430();
}

uint64_t sub_1DB3C()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsPresent, &qword_811E0);
}

uint64_t sub_1DB50(uint64_t a1)
{
  return sub_1DFE4(a1, &qword_811E8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsPresent, &qword_811E0);
}

uint64_t sub_1DB6C(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_80D30);
}

uint64_t sub_1DB78()
{
  return sub_1DD1C();
}

uint64_t sub_1DB8C@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_1DBA0()
{
  return sub_1DE2C();
}

uint64_t sub_1DBB4()
{
  return sub_1DEB8();
}

void *sub_1DBC8()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1DBD4()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantKeys, &qword_811F0);
}

uint64_t sub_1DBE8(uint64_t a1)
{
  return sub_1DFE4(a1, &qword_811F8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantKeys, &qword_811F0);
}

uint64_t sub_1DC04(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_81200);
}

uint64_t sub_1DC10()
{
  return sub_1DD1C();
}

uint64_t sub_1DC24@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_1DC38()
{
  return sub_1DE2C();
}

uint64_t sub_1DC4C()
{
  return sub_1DEB8();
}

unint64_t sub_1DC60()
{
  return sub_20A5C((uint64_t)_swiftEmptyArrayStorage, &qword_81338);
}

uint64_t sub_1DC88()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsForGlyph, &qword_81208);
}

uint64_t sub_1DC9C(uint64_t a1)
{
  return sub_1DFE4(a1, &qword_81210, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsForGlyph, &qword_81208);
}

uint64_t sub_1DCB8(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_81218);
}

uint64_t sub_1DCC4(uint64_t a1, uint64_t *a2)
{
  return sub_673E0();
}

uint64_t sub_1DD08()
{
  return sub_1DD1C();
}

uint64_t sub_1DD1C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1DD88@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_1DD9C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1DE18()
{
  return sub_1DE2C();
}

uint64_t sub_1DE2C()
{
  return sub_67430();
}

uint64_t sub_1DEA4()
{
  return sub_1DEB8();
}

uint64_t sub_1DEB8()
{
  return sub_67430();
}

unint64_t sub_1DF24()
{
  return sub_20A5C((uint64_t)_swiftEmptyArrayStorage, &qword_81230);
}

uint64_t sub_1DF4C()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__selectionForGlyph, &qword_81220);
}

uint64_t sub_1DF60(uint64_t a1, uint64_t *a2)
{
  return swift_endAccess();
}

uint64_t sub_1DFC8(uint64_t a1)
{
  return sub_1DFE4(a1, &qword_81228, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__selectionForGlyph, &qword_81220);
}

uint64_t sub_1DFE4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_4890(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  swift_beginAccess();
  sub_4890(a4);
  sub_67400();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t sub_1E114()
{
  return 81;
}

uint64_t sub_1E11C(uint64_t a1)
{
  id v2 = (int *)type metadata accessor for FontGlyphVariant();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v80 = (uint64_t)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v73 - v6;
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v74 = v5;
  if (v8) {
    int v9 = (uint64_t *)(a1
  }
                   + v2[5]
                   + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  else {
    int v9 = sub_605AC();
  }
  uint64_t v10 = (char *)*v9;
  swift_getKeyPath();
  swift_getKeyPath();
  v85[0] = v10;
  uint64_t v11 = v10;
  swift_retain();
  sub_67430();
  unint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v75 = a1;
  if (!v8) {
    goto LABEL_41;
  }
  uint64_t v78 = a1 + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80));
  uint64_t v77 = *(void *)(v74 + 72);
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  long long v76 = xmmword_6A770;
  uint64_t v82 = v7;
  uint64_t v83 = v2;
  int64_t v79 = v8;
  while (2)
  {
    sub_20B5C(v78 + v77 * v13, (uint64_t)v7);
    uint64_t v14 = v2[6];
    uint64_t v15 = sub_30574(*(_WORD *)&v7[v14]);
    if (v15) {
      char v16 = v15;
    }
    else {
      char v16 = (char *)_swiftEmptyArrayStorage;
    }
    uint64_t v17 = sub_68370();
    uint64_t v18 = (char *)v17;
    uint64_t v19 = *((void *)v16 + 2);
    *(void *)&long long v84 = v12;
    if (v19)
    {
      uint64_t v81 = v14;
      uint64_t v20 = 0;
      uint64_t v21 = (char *)(v17 + 56);
      while (1)
      {
        uint64_t v22 = *(unsigned __int16 *)&v16[2 * v20++ + 32];
        uint64_t v23 = sub_687D0();
        uint64_t v24 = -1 << v18[32];
        unint64_t v25 = v23 & ~v24;
        if (((*(void *)&v21[(v25 >> 3) & 0xFFFFFFFFFFFFFF8] >> v25) & 1) == 0) {
          goto LABEL_20;
        }
        uint64_t v26 = *((void *)v18 + 6);
        if (*(unsigned __int16 *)(v26 + 2 * v25) == v22)
        {
LABEL_13:
          if (v20 == v19) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v27 = ~v24;
          while (1)
          {
            unint64_t v25 = (v25 + 1) & v27;
            if (((*(void *)&v21[(v25 >> 3) & 0xFFFFFFFFFFFFFF8] >> v25) & 1) == 0) {
              break;
            }
            if (*(unsigned __int16 *)(v26 + 2 * v25) == v22) {
              goto LABEL_13;
            }
          }
LABEL_20:
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v85[0] = v18;
          sub_20284(v22, v25, isUniquelyReferenced_nonNull_native);
          uint64_t v18 = v85[0];
          swift_bridgeObjectRelease();
          if (v20 == v19)
          {
LABEL_22:
            swift_bridgeObjectRelease();
            uint64_t v7 = v82;
            id v2 = v83;
            unint64_t v12 = (void *)v84;
            uint64_t v14 = v81;
            if (!*((void *)v18 + 2)) {
              goto LABEL_6;
            }
            goto LABEL_25;
          }
          uint64_t v21 = v18 + 56;
        }
      }
    }
    swift_bridgeObjectRelease();
    if (!*((void *)v18 + 2))
    {
LABEL_6:
      swift_bridgeObjectRelease();
      sub_20BC0((uint64_t)v7);
      int64_t v8 = v79;
      goto LABEL_7;
    }
LABEL_25:
    __int16 v29 = *(_WORD *)&v7[v14];
    sub_4890(&qword_80D40);
    uint64_t inited = swift_initStackObject();
    uint64_t v31 = 0;
    *(_OWORD *)(inited + 16) = v76;
    *(_WORD *)(inited + 32) = v29;
    uint64_t v32 = inited + 32;
    *(_WORD *)(inited + 34) = *(_WORD *)&v7[v2[7]];
    for (uint64_t i = v18 + 56; ; uint64_t i = v18 + 56)
    {
      while (1)
      {
        uint64_t v34 = *(unsigned __int16 *)(v32 + 2 * v31);
        uint64_t v35 = v31 + 1;
        uint64_t v36 = sub_687D0();
        uint64_t v37 = -1 << v18[32];
        unint64_t v38 = v36 & ~v37;
        if (((*(void *)&i[(v38 >> 3) & 0xFFFFFFFFFFFFFF8] >> v38) & 1) == 0) {
          goto LABEL_33;
        }
        uint64_t v39 = *((void *)v18 + 6);
        if (*(unsigned __int16 *)(v39 + 2 * v38) != v34) {
          break;
        }
LABEL_26:
        uint64_t v31 = 1;
        if (v35 == 2) {
          goto LABEL_35;
        }
      }
      uint64_t v40 = ~v37;
      while (1)
      {
        unint64_t v38 = (v38 + 1) & v40;
        if (((*(void *)&i[(v38 >> 3) & 0xFFFFFFFFFFFFFF8] >> v38) & 1) == 0) {
          break;
        }
        if (*(unsigned __int16 *)(v39 + 2 * v38) == v34) {
          goto LABEL_26;
        }
      }
LABEL_33:
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      v85[0] = v18;
      sub_20284(v34, v38, v41);
      uint64_t v18 = v85[0];
      swift_bridgeObjectRelease();
      uint64_t v31 = 1;
      if (v35 == 2) {
        break;
      }
    }
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v7 = v82;
    sub_20BC0((uint64_t)v82);
    unint64_t v12 = (void *)v84;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_1FDE8(0, v12[2] + 1, 1, v12);
    }
    id v2 = v83;
    int64_t v8 = v79;
    unint64_t v43 = v12[2];
    unint64_t v42 = v12[3];
    if (v43 >= v42 >> 1) {
      unint64_t v12 = sub_1FDE8((void *)(v42 > 1), v43 + 1, 1, v12);
    }
    v12[2] = v43 + 1;
    uint64_t v44 = &v12[2 * v43];
    *((_WORD *)v44 + 16) = v29;
    v44[5] = v18;
LABEL_7:
    if (++v13 != v8) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_41:
  if (v12[2])
  {
    sub_4890(&qword_81230);
    uint64_t v45 = (char *)sub_68660();
  }
  else
  {
    uint64_t v45 = (char *)_swiftEmptyDictionarySingleton;
  }
  v85[0] = v45;
  BOOL v46 = 0;
  sub_20C1C((uint64_t)v12, 1, v85);
  swift_bridgeObjectRelease();
  unint64_t v47 = (char *)sub_1EC2C((uint64_t)v85[0]);
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v85[0] = v47;
  swift_retain();
  sub_67430();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  uint64_t v48 = *((void *)v85[0] + 2);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v85[0]) = v48 != 0;
  swift_retain();
  sub_67430();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  uint64_t v49 = swift_bridgeObjectRetain();
  uint64_t v50 = (char *)sub_1FB5C(v49);
  swift_bridgeObjectRelease();
  v85[0] = v50;
  sub_90BC(v85);
  swift_bridgeObjectRelease();
  uint64_t v51 = v85[0];
  if (*((void *)v85[0] + 2) >= 0x51uLL) {
    uint64_t v52 = 81;
  }
  else {
    uint64_t v52 = *((void *)v85[0] + 2);
  }
  sub_687A0();
  swift_unknownObjectRetain_n();
  uint64_t v53 = (void *)swift_dynamicCastClass();
  if (!v53)
  {
    swift_release();
    uint64_t v53 = _swiftEmptyArrayStorage;
  }
  uint64_t v54 = v53[2];
  swift_release();
  if (v54 == v52)
  {
    uint64_t v55 = (char *)swift_dynamicCastClass();
    uint64_t v56 = v75;
    if (!v55)
    {
      swift_release();
      uint64_t v55 = (char *)_swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_release();
    sub_1FA98((uint64_t)v51, (uint64_t)(v51 + 32), 0, (2 * v52) | 1);
    uint64_t v55 = v72;
    uint64_t v56 = v75;
  }
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v85[0] = v55;
  swift_retain();
  sub_67430();
  if (v8)
  {
    uint64_t v83 = 0;
    v85[0] = (char *)_swiftEmptyArrayStorage;
    sub_20784(0, v8, 0);
    uint64_t v57 = v56 + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80));
    uint64_t v58 = *(void *)(v74 + 72);
    uint64_t v59 = v85[0];
    long long v84 = xmmword_693E0;
    do
    {
      int64_t v60 = v8;
      uint64_t v61 = v80;
      sub_20B5C(v57, v80);
      __int16 v62 = *(_WORD *)(v61 + v2[6]);
      sub_4890(&qword_80D40);
      uint64_t v63 = swift_initStackObject();
      *(_OWORD *)(v63 + 16) = v84;
      *(_WORD *)(v63 + 32) = *(_WORD *)(v61 + v2[7]);
      uint64_t v64 = sub_AB18(v63);
      swift_setDeallocating();
      sub_20BC0(v61);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_20784(0, *((void *)v59 + 2) + 1, 1);
        uint64_t v59 = v85[0];
      }
      unint64_t v66 = *((void *)v59 + 2);
      unint64_t v65 = *((void *)v59 + 3);
      if (v66 >= v65 >> 1)
      {
        sub_20784((void *)(v65 > 1), v66 + 1, 1);
        uint64_t v59 = v85[0];
      }
      *((void *)v59 + 2) = v66 + 1;
      uint64_t v67 = &v59[16 * v66];
      *((_WORD *)v67 + 16) = v62;
      *((void *)v67 + 5) = v64;
      v57 += v58;
      int64_t v8 = v60 - 1;
    }
    while (v60 != 1);
    uint64_t v68 = v59;
    BOOL v46 = v83;
LABEL_61:
    sub_4890(&qword_81230);
    uint64_t v69 = (char *)sub_68660();
  }
  else
  {
    uint64_t v68 = (char *)_swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2]) {
      goto LABEL_61;
    }
    uint64_t v69 = (char *)_swiftEmptyDictionarySingleton;
  }
  v85[0] = v69;
  sub_20C1C((uint64_t)v68, 1, v85);
  swift_bridgeObjectRelease();
  if (v46)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    uint64_t v70 = v85[0];
    swift_getKeyPath();
    swift_getKeyPath();
    v85[0] = v70;
    swift_retain();
    return sub_67430();
  }
  return result;
}

uint64_t sub_1EAD0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v15 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = sub_1FF0C(&v14, *(unsigned __int16 *)(*(void *)(v2 + 48) + 2 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1EC2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = _swiftEmptyDictionarySingleton;
  uint64_t v6 = a1 + 64;
  uint64_t v5 = *(void *)(a1 + 64);
  char v41 = _swiftEmptyDictionarySingleton;
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & v5;
  int64_t v10 = (unint64_t)(63 - v7) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  int64_t v35 = v10;
  uint64_t v36 = v6;
  if (!v9) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v13 = v12 | (v11 << 6);
  while (1)
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    unint64_t v15 = *(void *)(v14 + 16);
    if (v15 >= 2)
    {
      uint64_t v38 = v2;
      __int16 v37 = *(_WORD *)(*(void *)(a1 + 48) + 2 * v13);
      sub_4890(&qword_80D40);
      uint64_t v19 = swift_allocObject();
      int64_t v20 = j__malloc_size((const void *)v19);
      int64_t v21 = v20 - 32;
      if (v20 < 32) {
        int64_t v21 = v20 - 31;
      }
      *(void *)(v19 + 16) = v15;
      *(void *)(v19 + 24) = v21 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v39 = sub_A3F4(&v40, (_WORD *)(v19 + 32), v15, v14);
      swift_bridgeObjectRetain_n();
      sub_A588();
      if (v39 != (void *)v15) {
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
      uint64_t v40 = (char *)v19;
      sub_90BC(&v40);
      if (v38) {
        goto LABEL_48;
      }
      uint64_t v2 = 0;
      uint64_t v22 = v40;
      unint64_t v23 = v4[2];
      if (v4[3] <= v23)
      {
        sub_1F7E8(v23 + 1, 1, &qword_81338);
        uint64_t v4 = v41;
      }
      uint64_t v24 = sub_687D0();
      unint64_t v25 = v4 + 8;
      uint64_t v26 = -1 << *((unsigned char *)v4 + 32);
      unint64_t v27 = v24 & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~v4[(v27 >> 6) + 8]) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = v25[v28];
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_41;
          }
        }
        goto LABEL_45;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~v4[(v27 >> 6) + 8])) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_41:
      *(void *)((char *)v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      *(_WORD *)(v4[6] + 2 * v29) = v37;
      *(void *)(v4[7] + 8 * v29) = v22;
      ++v4[2];
      swift_bridgeObjectRelease();
      int64_t v10 = v35;
      uint64_t v6 = v36;
      if (v9) {
        goto LABEL_5;
      }
    }
    else if (v9)
    {
      goto LABEL_5;
    }
LABEL_8:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v16 >= v10) {
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    if (!v17) {
      break;
    }
LABEL_20:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  int64_t v18 = v11 + 2;
  if (v11 + 2 >= v10) {
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17) {
    goto LABEL_19;
  }
  int64_t v18 = v11 + 3;
  if (v11 + 3 >= v10) {
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17) {
    goto LABEL_19;
  }
  int64_t v18 = v11 + 4;
  if (v11 + 4 >= v10) {
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17) {
    goto LABEL_19;
  }
  int64_t v18 = v11 + 5;
  if (v11 + 5 >= v10)
  {
LABEL_43:
    sub_A588();
    return (uint64_t)v4;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
LABEL_19:
    int64_t v16 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v10) {
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1EFB8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__font;
  uint64_t v2 = sub_4890(&qword_811D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsPresent;
  uint64_t v4 = sub_4890(&qword_811E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantKeys;
  uint64_t v6 = sub_4890(&qword_811F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsForGlyph;
  uint64_t v8 = sub_4890(&qword_81208);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__selectionForGlyph;
  uint64_t v10 = sub_4890(&qword_81220);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  return v0;
}

uint64_t sub_1F140()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__font;
  uint64_t v2 = sub_4890(&qword_811D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsPresent;
  uint64_t v4 = sub_4890(&qword_811E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantKeys;
  uint64_t v6 = sub_4890(&qword_811F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsForGlyph;
  uint64_t v8 = sub_4890(&qword_81208);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__selectionForGlyph;
  uint64_t v10 = sub_4890(&qword_81220);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v12 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return _swift_deallocClassInstance(v0, v11, v12);
}

uint64_t sub_1F304()
{
  uint64_t v0 = swift_allocObject();
  sub_1F33C();
  return v0;
}

uint64_t sub_1F33C()
{
  uint64_t v1 = sub_4890(&qword_81220);
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  __chkstk_darwin(v1);
  unint64_t v31 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_4890(&qword_81208);
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  __chkstk_darwin(v3);
  unint64_t v28 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_4890(&qword_811F0);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_4890(&qword_811E0);
  uint64_t v8 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_4890(&qword_811D0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__font;
  int64_t v16 = (void *)*sub_605AC();
  uint64_t v34 = v16;
  type metadata accessor for CTFont(0);
  unint64_t v17 = v16;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v15, v14, v11);
  uint64_t v18 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsPresent;
  LOBYTE(v34) = 0;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v10, v25);
  uint64_t v19 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantKeys;
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_4890(&qword_80D30);
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v19, v7, v27);
  uint64_t v20 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__variantsForGlyph;
  uint64_t v34 = (void *)sub_20A5C((uint64_t)_swiftEmptyArrayStorage, &qword_81338);
  sub_4890(&qword_81200);
  int64_t v21 = v28;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v20, v21, v30);
  uint64_t v22 = v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel__selectionForGlyph;
  uint64_t v34 = (void *)sub_20A5C((uint64_t)_swiftEmptyArrayStorage, &qword_81230);
  sub_4890(&qword_81218);
  unint64_t v23 = v31;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v22, v23, v33);
  *(void *)(v0 + OBJC_IVAR____TtC17UITypographyPanel22GlyphVariantsViewModel_maxToDisplay) = 81;
  return v0;
}

uint64_t sub_1F798@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_673D0();
  *a1 = result;
  return result;
}

uint64_t sub_1F7E8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_4890(a3);
  uint64_t result = sub_68650();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v30 = -1 << v11;
    uint64_t v31 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v32 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }
      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v32) {
          goto LABEL_33;
        }
        unint64_t v22 = v10[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v22 = v10[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if (a2)
              {
                if (v31 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v32);
                }
                else {
                  uint64_t *v10 = v30;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v10[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v22 = v10[v9];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v23;
          }
        }
LABEL_30:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      __int16 v28 = *(_WORD *)(*(void *)(v6 + 48) + 2 * v20);
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_687D0();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_WORD *)(*(void *)(v8 + 48) + 2 * v18) = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v18) = v29;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

void sub_1FA98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        memcpy(v8 + 4, (const void *)(a2 + 2 * a3), 2 * v5);
        return;
      }
    }
    else
    {
      sub_4890(&qword_80D40);
      uint64_t v8 = (void *)swift_allocObject();
      int64_t v9 = j__malloc_size(v8);
      int64_t v10 = v9 - 32;
      if (v9 < 32) {
        int64_t v10 = v9 - 31;
      }
      v8[2] = v5;
      v8[3] = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

void *sub_1FB5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_4890(&qword_80D40);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = j__malloc_size((const void *)v3);
  int64_t v5 = v4 - 32;
  if (v4 < 32) {
    int64_t v5 = v4 - 31;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v5 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v6 = sub_208C8(&v8, (_WORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_A588();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

void *sub_1FC40()
{
  uint64_t v1 = v0;
  sub_4890(&qword_81230);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_68640();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    __int16 v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1FDE8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81328);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_81330);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1FF0C(_WORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_687D0();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_20284(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(unsigned __int16 *)(v10 + 2 * v9) != (unsigned __int16)a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int16 *)(v10 + 2 * v9) != (unsigned __int16)a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_20010()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_80D78);
  uint64_t result = sub_68500();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_31;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_31;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_31:
              if (v28 >= 64) {
                bzero((void *)(v2 + 56), 8 * v10);
              }
              else {
                *uint64_t v6 = v26;
              }
              uint64_t v1 = v27;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v5 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_37;
                }
                if (v5 >= v10) {
                  goto LABEL_31;
                }
                unint64_t v16 = v6[v5];
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v5 = v17;
          }
        }
LABEL_21:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      __int16 v18 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v14);
      uint64_t result = sub_687D0();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_WORD *)(*(void *)(v4 + 48) + 2 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_20284(uint64_t result, unint64_t a2, char a3)
{
  int v5 = (unsigned __int16)result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_20010();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_203AC();
      goto LABEL_14;
    }
    sub_20530();
  }
  uint64_t v8 = *v3;
  uint64_t result = sub_687D0();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int16 *)(v10 + 2 * a2) == v5)
    {
LABEL_13:
      uint64_t result = sub_687B0();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int16 *)(v10 + 2 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_WORD *)(*(void *)(v12 + 48) + 2 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_203AC()
{
  uint64_t v1 = v0;
  sub_4890(&qword_80D78);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_684F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17) {
        break;
      }
    }
LABEL_25:
    unint64_t v19 = __clz(__rbit64(v17));
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = v19 + (v9 << 6);
LABEL_12:
    *(_WORD *)(*(void *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
  }
  int64_t v18 = v16 + 2;
  if (v18 >= v13) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_20530()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_80D78);
  uint64_t result = sub_68500();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16) {
        break;
      }
    }
LABEL_21:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_22:
    __int16 v18 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v14);
    uint64_t result = sub_687D0();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_WORD *)(*(void *)(v4 + 48) + 2 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 2;
  if (v17 >= v10)
  {
LABEL_31:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

void *sub_20784(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_207A4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_207A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81328);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_81330);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_208C8(void *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_WORD *)(*(void *)(a4 + 48) + 2 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_20A5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_4890(a2);
  uint64_t v4 = (void *)sub_68660();
  unsigned __int16 v5 = *(_WORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t result = sub_8E78(v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  uint64_t v9 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_WORD *)(v4[6] + 2 * result) = v5;
    *(void *)(v4[7] + 8 * result) = v6;
    uint64_t v10 = v4[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    void v4[2] = v12;
    if (!--v2) {
      goto LABEL_8;
    }
    int64_t v13 = v9 + 2;
    unsigned __int16 v5 = *((_WORD *)v9 - 4);
    uint64_t v14 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_8E78(v5);
    uint64_t v9 = v13;
    uint64_t v6 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_20B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FontGlyphVariant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20BC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FontGlyphVariant();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20C1C(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    unsigned __int16 v7 = *(_WORD *)(v6 + 32);
    uint64_t v49 = v6;
    uint64_t v8 = *(void *)(v6 + 40);
    uint64_t v9 = (void *)*a3;
    unint64_t v10 = sub_8E78(v7);
    uint64_t v12 = v9[2];
    BOOL v13 = (v11 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    unint64_t v15 = v10;
    char v16 = v11;
    uint64_t v17 = v9[3];
    swift_bridgeObjectRetain();
    if (v17 < v14)
    {
      sub_1F7E8(v14, a2 & 1, &qword_81230);
      unint64_t v18 = sub_8E78(v7);
      if ((v16 & 1) != (v19 & 1))
      {
LABEL_28:
        unint64_t result = sub_687C0();
        __break(1u);
        return result;
      }
      unint64_t v15 = v18;
      unint64_t v20 = (void *)*a3;
      if ((v16 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      uint64_t v21 = *(void *)(v20[7] + 8 * v15);
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_1EAD0(v8, v21);
      uint64_t v23 = v20[7];
      swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v15) = v22;
      uint64_t v24 = v3 - 1;
      if (!v24) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      for (uint64_t i = (uint64_t *)(v49 + 56); ; i += 2)
      {
        unsigned __int16 v33 = *((_WORD *)i - 4);
        uint64_t v34 = *i;
        int64_t v35 = (void *)*a3;
        unint64_t v36 = sub_8E78(v33);
        uint64_t v38 = v35[2];
        BOOL v39 = (v37 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39)) {
          break;
        }
        unint64_t v41 = v36;
        char v42 = v37;
        uint64_t v43 = v35[3];
        swift_bridgeObjectRetain();
        if (v43 < v40)
        {
          sub_1F7E8(v40, 1, &qword_81230);
          unint64_t v44 = sub_8E78(v33);
          if ((v42 & 1) != (v45 & 1)) {
            goto LABEL_28;
          }
          unint64_t v41 = v44;
        }
        BOOL v46 = (void *)*a3;
        if (v42)
        {
          uint64_t v29 = 8 * v41;
          uint64_t v30 = *(void *)(v46[7] + 8 * v41);
          swift_bridgeObjectRetain();
          uint64_t v31 = sub_1EAD0(v34, v30);
          uint64_t v32 = v46[7];
          swift_bridgeObjectRelease();
          *(void *)(v32 + v29) = v31;
        }
        else
        {
          v46[(v41 >> 6) + 8] |= 1 << v41;
          *(_WORD *)(v46[6] + 2 * v41) = v33;
          *(void *)(v46[7] + 8 * v41) = v34;
          uint64_t v47 = v46[2];
          BOOL v26 = __OFADD__(v47, 1);
          uint64_t v48 = v47 + 1;
          if (v26) {
            goto LABEL_27;
          }
          v46[2] = v48;
        }
        if (!--v24) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_26;
    }
    if (a2)
    {
      unint64_t v20 = (void *)*a3;
      if (v16) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_1FC40();
      unint64_t v20 = (void *)*a3;
      if (v16) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v20[(v15 >> 6) + 8] |= 1 << v15;
    *(_WORD *)(v20[6] + 2 * v15) = v7;
    *(void *)(v20[7] + 8 * v15) = v8;
    uint64_t v25 = v20[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v20[2] = v27;
    uint64_t v24 = v3 - 1;
    if (!v24) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

void *sub_20EDC()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_20EE8()
{
  return type metadata accessor for GlyphVariantsViewModel();
}

uint64_t type metadata accessor for GlyphVariantsViewModel()
{
  uint64_t result = qword_84900;
  if (!qword_84900) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_20F3C()
{
  sub_21118();
  if (v0 <= 0x3F)
  {
    sub_21170(319, &qword_81268, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for Published);
    if (v1 <= 0x3F)
    {
      sub_211BC(319, &qword_81270, &qword_80D30);
      if (v2 <= 0x3F)
      {
        sub_211BC(319, &qword_81278, &qword_81200);
        if (v3 <= 0x3F)
        {
          sub_211BC(319, (unint64_t *)&unk_81280, &qword_81218);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

void sub_21118()
{
  if (!qword_81260)
  {
    type metadata accessor for CTFont(255);
    unint64_t v0 = sub_67440();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_81260);
    }
  }
}

void sub_21170(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_211BC(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_4FAC(a3);
    unint64_t v4 = sub_67440();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_21210@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_672C0();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_21278(uint64_t a1)
{
  uint64_t v3 = sub_672C0();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*sub_212E0())()
{
  return nullsub_1;
}

id sub_21300()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for FontGlyphVariant() + 20));
  return v1;
}

uint64_t type metadata accessor for FontGlyphVariant()
{
  uint64_t result = qword_84E90;
  if (!qword_84E90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_21380()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for FontGlyphVariant() + 24));
}

uint64_t sub_213A4()
{
  return *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for FontGlyphVariant() + 28));
}

int *sub_213C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = (int *)type metadata accessor for FontGlyphVariant();
  *(void *)(a5 + result[5]) = a2;
  *(_WORD *)(a5 + result[6]) = a3;
  *(_WORD *)(a5 + result[7]) = a4;
  return result;
}

uint64_t sub_21468(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_7AD60;
  v6._object = a2;
  unint64_t v4 = sub_68690(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

uint64_t sub_214B4()
{
  return 4;
}

uint64_t sub_214BC(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 1953394534;
      break;
    case 2:
      uint64_t result = 0x6870796C67;
      break;
    case 3:
      uint64_t result = 0x6C616E696769726FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21544(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 1953394534;
      break;
    case 2:
      uint64_t result = 0x6870796C67;
      break;
    case 3:
      uint64_t result = 0x6C616E696769726FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_215CC(char *a1, char *a2)
{
  return sub_215D8(*a1, *a2);
}

uint64_t sub_215D8(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1953394534;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x6870796C67;
      break;
    case 3:
      uint64_t v4 = 0x6C616E696769726FLL;
      unint64_t v3 = 0xED00006870796C47;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE400000000000000;
      if (v4 == 1953394534) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v5 = 0xE500000000000000;
      uint64_t v6 = 0x6870796C67;
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xED00006870796C47;
      if (v4 == 0x6C616E696769726FLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != v6) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_68790();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int sub_21754()
{
  return sub_68830();
}

uint64_t sub_21824()
{
  sub_681E0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_218DC()
{
  return sub_68830();
}

uint64_t sub_219A8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_21468(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_219D8(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1953394534;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6870796C67;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 3:
      strcpy((char *)a1, "originalGlyph");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_21A68()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1953394534;
      break;
    case 2:
      uint64_t result = 0x6870796C67;
      break;
    case 3:
      uint64_t result = 0x6C616E696769726FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21AEC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_21468(a1, a2);
  *a3 = result;
  return result;
}

void sub_21B14(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_21B20(uint64_t a1)
{
  unint64_t v2 = sub_22668();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_21B5C(uint64_t a1)
{
  unint64_t v2 = sub_22668();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_21B98(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_4890(&qword_81340);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_B698(a1, a1[3]);
  sub_22668();
  sub_68850();
  uint64_t v9 = self;
  uint64_t v10 = *(void *)(v3 + *(int *)(type metadata accessor for FontGlyphVariant() + 20));
  v19[0] = 0;
  id v11 = [v9 archivedDataWithRootObject:v10 requiringSecureCoding:0 error:v19];
  id v12 = v19[0];
  if (v11)
  {
    BOOL v13 = (void *)sub_672A0();
    unint64_t v15 = v14;

    v19[0] = v13;
    v19[1] = v15;
    v18[7] = 1;
    sub_226BC();
    sub_68740();
    if (!v2)
    {
      LOBYTE(v19[0]) = 0;
      sub_672C0();
      sub_22C2C(&qword_81358, (void (*)(uint64_t))&type metadata accessor for UUID);
      sub_68740();
      LOBYTE(v19[0]) = 2;
      sub_68750();
      LOBYTE(v19[0]) = 3;
      sub_68750();
    }
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    return sub_22710((uint64_t)v13, (unint64_t)v15);
  }
  else
  {
    uint64_t v17 = v12;
    sub_67280();

    swift_willThrow();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void sub_21E8C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v34 = sub_672C0();
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_4890(&qword_81360);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for FontGlyphVariant();
  __chkstk_darwin(v31);
  id v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_672B0();
  uint64_t v12 = a1[3];
  unsigned __int16 v33 = a1;
  sub_B698(a1, v12);
  sub_22668();
  sub_68840();
  if (v2)
  {
    uint64_t v13 = v34;
    uint64_t v14 = v32;
    sub_13338((uint64_t)v33);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    return;
  }
  uint64_t v29 = v5;
  LOBYTE(v36) = 1;
  sub_22768();
  sub_686E0();
  uint64_t v28 = v6;
  uint64_t v16 = v35[0];
  unint64_t v15 = v35[1];
  sub_2281C(0, &qword_81370);
  sub_683B0();
  uint64_t v17 = v34;
  unint64_t v26 = v15;
  uint64_t v27 = v16;
  uint64_t v25 = v7;
  if (!v35[3])
  {
    sub_227BC((uint64_t)v35);
    goto LABEL_8;
  }
  sub_2281C(0, &qword_81388);
  if (!swift_dynamicCast())
  {
LABEL_8:
    uint64_t v19 = v31;
    uint64_t v20 = v32;
    id v18 = (id)*sub_605AC();
    goto LABEL_9;
  }
  id v18 = v36;
  uint64_t v19 = v31;
  uint64_t v20 = v32;
LABEL_9:
  *(void *)&v11[*(int *)(v19 + 20)] = v18;
  LOBYTE(v35[0]) = 0;
  sub_22C2C(&qword_81380, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v21 = v28;
  sub_686E0();
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v11, v29, v17);
  LOBYTE(v35[0]) = 2;
  __int16 v22 = sub_686F0();
  uint64_t v23 = v31;
  *(_WORD *)&v11[*(int *)(v31 + 24)] = v22;
  LOBYTE(v35[0]) = 3;
  __int16 v24 = sub_686F0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  sub_22710(v27, v26);
  *(_WORD *)&v11[*(int *)(v23 + 28)] = v24;
  sub_20B5C((uint64_t)v11, v30);
  sub_13338((uint64_t)v33);
  sub_20BC0((uint64_t)v11);
}

void sub_2237C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_22394(void *a1)
{
  return sub_21B98(a1);
}

void sub_223B0()
{
  uint64_t v1 = type metadata accessor for FontGlyphVariant();
  sub_60714();
  sub_681E0();
  swift_bridgeObjectRelease();
  sub_68810(*(_WORD *)(v0 + *(int *)(v1 + 24)));
  sub_68810(*(_WORD *)(v0 + *(int *)(v1 + 28)));
}

Swift::Int sub_22430()
{
  sub_687F0();
  uint64_t v1 = type metadata accessor for FontGlyphVariant();
  sub_60714();
  sub_681E0();
  swift_bridgeObjectRelease();
  sub_68810(*(_WORD *)(v0 + *(int *)(v1 + 24)));
  sub_68810(*(_WORD *)(v0 + *(int *)(v1 + 28)));
  return sub_68830();
}

Swift::Int sub_224CC(uint64_t a1)
{
  sub_687F0();
  sub_60714();
  sub_681E0();
  swift_bridgeObjectRelease();
  sub_68810(*(_WORD *)(v1 + *(int *)(a1 + 24)));
  sub_68810(*(_WORD *)(v1 + *(int *)(a1 + 28)));
  return sub_68830();
}

void sub_22560(uint64_t a1, uint64_t a2)
{
  sub_60714();
  sub_681E0();
  swift_bridgeObjectRelease();
  sub_68810(*(_WORD *)(v2 + *(int *)(a2 + 24)));
  sub_68810(*(_WORD *)(v2 + *(int *)(a2 + 28)));
}

Swift::Int sub_225D8(uint64_t a1, uint64_t a2)
{
  sub_687F0();
  sub_60714();
  sub_681E0();
  swift_bridgeObjectRelease();
  sub_68810(*(_WORD *)(v2 + *(int *)(a2 + 24)));
  sub_68810(*(_WORD *)(v2 + *(int *)(a2 + 28)));
  return sub_68830();
}

unint64_t sub_22668()
{
  unint64_t result = qword_81348;
  if (!qword_81348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81348);
  }
  return result;
}

unint64_t sub_226BC()
{
  unint64_t result = qword_81350;
  if (!qword_81350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81350);
  }
  return result;
}

uint64_t sub_22710(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

unint64_t sub_22768()
{
  unint64_t result = qword_81368;
  if (!qword_81368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81368);
  }
  return result;
}

uint64_t sub_227BC(uint64_t a1)
{
  uint64_t v2 = sub_4890(&qword_81378);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2281C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

BOOL sub_22858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FontGlyphVariant();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v27 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = sub_60714();
  uint64_t v18 = v17;
  if (v16 == sub_60714() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
    sub_20B5C(a1, (uint64_t)v15);
    sub_20B5C(a2, (uint64_t)v13);
  }
  else
  {
    char v21 = sub_68790();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20B5C(a1, (uint64_t)v15);
    sub_20B5C(a2, (uint64_t)v13);
    if ((v21 & 1) == 0)
    {
      sub_20BC0((uint64_t)v13);
      sub_20BC0((uint64_t)v15);
      sub_20B5C(a1, (uint64_t)v10);
      sub_20B5C(a2, (uint64_t)v7);
      goto LABEL_10;
    }
  }
  int v22 = *(unsigned __int16 *)&v15[*(int *)(v4 + 24)];
  sub_20BC0((uint64_t)v15);
  int v23 = *(unsigned __int16 *)&v13[*(int *)(v4 + 24)];
  sub_20BC0((uint64_t)v13);
  sub_20B5C(a1, (uint64_t)v10);
  sub_20B5C(a2, (uint64_t)v7);
  if (v22 == v23)
  {
    int v24 = *(unsigned __int16 *)&v10[*(int *)(v4 + 28)];
    sub_20BC0((uint64_t)v10);
    int v25 = *(unsigned __int16 *)&v7[*(int *)(v4 + 28)];
    sub_20BC0((uint64_t)v7);
    return v24 == v25;
  }
LABEL_10:
  sub_20BC0((uint64_t)v7);
  sub_20BC0((uint64_t)v10);
  return 0;
}

uint64_t sub_22A94()
{
  return sub_22C2C(&qword_81390, (void (*)(uint64_t))&type metadata accessor for UUID);
}

unint64_t sub_22AE0()
{
  unint64_t result = qword_81398;
  if (!qword_81398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81398);
  }
  return result;
}

unint64_t sub_22B38()
{
  unint64_t result = qword_813A0;
  if (!qword_813A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_813A0);
  }
  return result;
}

unint64_t sub_22B90()
{
  unint64_t result = qword_813A8;
  if (!qword_813A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_813A8);
  }
  return result;
}

uint64_t sub_22BE4()
{
  return sub_22C2C(&qword_813B0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
}

uint64_t sub_22C2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_22C74(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_672C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(_WORD *)((char *)a1 + v9) = *(_WORD *)((char *)a2 + v9);
    *(_WORD *)((char *)a1 + a3[7]) = *(_WORD *)((char *)a2 + a3[7]);
    id v11 = v10;
  }
  return a1;
}

void sub_22D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t sub_22DCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(_WORD *)(a1 + v8) = *(_WORD *)(a2 + v8);
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  id v10 = v9;
  return a1;
}

uint64_t sub_22E60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(_WORD *)(a1 + a3[6]) = *(_WORD *)(a2 + a3[6]);
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_22F00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  *(_WORD *)(a1 + a3[7]) = *(_WORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_22F90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_672C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[7];
  *(_WORD *)(a1 + a3[6]) = *(_WORD *)(a2 + a3[6]);
  *(_WORD *)(a1 + v9) = *(_WORD *)(a2 + v9);
  return a1;
}

uint64_t sub_23028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2303C);
}

uint64_t sub_2303C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_672C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1sub_66CA4(2, 18, 1, 0) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_230FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_23110);
}

uint64_t sub_23110(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_672C0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_231CC()
{
  uint64_t result = sub_672C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FontGlyphVariant.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FontGlyphVariant.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x233D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FontGlyphVariant.CodingKeys()
{
  return &type metadata for FontGlyphVariant.CodingKeys;
}

uint64_t sub_2340C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23418()
{
  return swift_bridgeObjectRetain();
}

id sub_23420(void *a1, void *a2)
{
  id v3 = a1;
  unsigned int v4 = sub_60820();
  id v5 = v3;
  sub_2D6AC((uint64_t)v4, v5);

  return v5;
}

id sub_234A8(void *a1)
{
  sub_4890(&qword_81440);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  *(void *)(inited + 32) = NSFontAttributeName;
  type metadata accessor for CTFont(0);
  *(void *)(inited + 64) = v3;
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = a1;
  id v4 = a1;
  id v5 = NSFontAttributeName;
  sub_23644(inited);
  id v6 = objc_allocWithZone((Class)NSAttributedString);
  NSString v7 = sub_68170();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_2D8B4(&qword_81448, type metadata accessor for Key);
  Class isa = sub_68120().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithString:v7 attributes:isa];

  unint64_t v10 = sub_60820();
  sub_2D6AC((uint64_t)v10, v4);

  return v4;
}

unint64_t sub_23644(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_81700);
  uint64_t v2 = sub_68660();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_A85C(v6, (uint64_t)&v13, &qword_81708);
    uint64_t v7 = v13;
    unint64_t result = sub_29084(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_2EC24(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23774(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_80E10);
  uint64_t v2 = (void *)sub_68660();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    unint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_FFF0(v5, v6);
    swift_bridgeObjectRetain();
    unint64_t result = sub_EA0C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23894(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_816A0);
  uint64_t v2 = (void *)sub_68660();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_8EC0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_239B4(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_7AE70;
  v6._object = a2;
  unint64_t v4 = sub_68690(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_23A00()
{
  return 3;
}

uint64_t sub_23A08(char a1)
{
  if (!a1) {
    return 1953394534;
  }
  if (a1 == 1) {
    return 0x65676E6172;
  }
  return 0x73746E6169726176;
}

uint64_t sub_23A54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23A60(*a1, *a2);
}

uint64_t sub_23A60(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x65676E6172;
    }
    else {
      uint64_t v3 = 0x73746E6169726176;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x65676E6172;
      }
      else {
        uint64_t v6 = 0x73746E6169726176;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1953394534;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1953394534)
  {
LABEL_21:
    char v8 = sub_68790();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_23B64()
{
  return sub_68830();
}

uint64_t sub_23BFC()
{
  sub_681E0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_23C80()
{
  return sub_68830();
}

uint64_t sub_23D14@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_239B4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_23D44(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x65676E6172;
  if (v2 != 1)
  {
    uint64_t v5 = 0x73746E6169726176;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1953394534;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_23D98()
{
  uint64_t v1 = 0x65676E6172;
  if (*v0 != 1) {
    uint64_t v1 = 0x73746E6169726176;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1953394534;
  }
}

uint64_t sub_23DE8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_239B4(a1, a2);
  *a3 = result;
  return result;
}

void sub_23E10(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23E1C(uint64_t a1)
{
  unint64_t v2 = sub_2D860();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_23E58(uint64_t a1)
{
  unint64_t v2 = sub_2D860();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_23E94(void *a1, uint64_t a2, void *a3, unint64_t a4, void *a5)
{
  char v21 = a5;
  unint64_t v22 = a4;
  uint64_t v9 = sub_4890(&qword_81450);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B698(a1, a1[3]);
  sub_2D860();
  sub_68850();
  uint64_t v13 = self;
  id v24 = 0;
  id v14 = [v13 archivedDataWithRootObject:a2 requiringSecureCoding:0 error:&v24];
  id v15 = v24;
  if (v14)
  {
    uint64_t v16 = (void *)sub_672A0();
    unint64_t v18 = v17;

    id v24 = v16;
    unint64_t v25 = v18;
    char v23 = 0;
    sub_226BC();
    sub_68740();
    if (v5)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return sub_22710((uint64_t)v16, v18);
    }
    id v24 = a3;
    unint64_t v25 = v22;
    char v23 = 1;
    type metadata accessor for _NSRange(0);
    sub_2D8B4(&qword_81460, type metadata accessor for _NSRange);
    sub_68740();
    id v24 = v21;
    char v23 = 2;
    swift_bridgeObjectRetain();
    sub_4890(&qword_81468);
    sub_2EB90(&qword_81470, &qword_81478);
    sub_68740();
    sub_22710((uint64_t)v16, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = v15;
    sub_67280();

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

id sub_241CC(void *a1)
{
  id result = sub_2D8FC(a1);
  if (v1) {
    return (id)v3;
  }
  return result;
}

uint64_t sub_241F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for CTFont(0);
  sub_2D8B4(&qword_81480, type metadata accessor for CTFont);
  if ((sub_67300() & 1) == 0 || a2 != a6 || a3 != a7) {
    return 0;
  }
  return sub_242F8(a4, a8);
}

uint64_t sub_242F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FontGlyphVariant();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t result = __chkstk_darwin(v8);
  id v14 = (char *)&v32 - v12;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v15 = 0;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v35 = a1;
  uint64_t v36 = a1 + 56;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v16;
  int64_t v37 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v20 = a2 + 56;
  unsigned __int16 v33 = (char *)&v32 - v12;
  uint64_t v34 = v13;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v38 = (v19 - 1) & v19;
  int64_t v39 = v15;
  for (unint64_t i = __clz(__rbit64(v19)) | (v15 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    uint64_t v26 = *(void *)(v13 + 72);
    sub_20B5C(*(void *)(a1 + 48) + v26 * i, (uint64_t)v14);
    sub_2EB2C((uint64_t)v14, (uint64_t)v10);
    sub_2D8B4(&qword_816D0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
    uint64_t v27 = sub_68130();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v20 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
LABEL_29:
      sub_20BC0((uint64_t)v10);
      return 0;
    }
    uint64_t v30 = ~v28;
    while (1)
    {
      sub_20B5C(*(void *)(a2 + 48) + v29 * v26, (uint64_t)v7);
      sub_2D8B4(&qword_813B0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
      char v31 = sub_68160();
      sub_20BC0((uint64_t)v7);
      if (v31) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v30;
      if (((*(void *)(v20 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
        goto LABEL_29;
      }
    }
    uint64_t result = sub_20BC0((uint64_t)v10);
    uint64_t v13 = v34;
    a1 = v35;
    id v14 = v33;
    unint64_t v19 = v38;
    int64_t v15 = v39;
    if (v38) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v22 >= v37) {
      return 1;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    int64_t v24 = v15 + 1;
    if (!v23)
    {
      int64_t v24 = v22 + 1;
      if (v22 + 1 >= v37) {
        return 1;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v22 + 2;
        if (v22 + 2 >= v37) {
          return 1;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v22 + 3;
          if (v22 + 3 >= v37) {
            return 1;
          }
          unint64_t v23 = *(void *)(v36 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v38 = (v23 - 1) & v23;
    int64_t v39 = v24;
  }
  int64_t v25 = v22 + 4;
  if (v25 >= v37) {
    return 1;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v25;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v37) {
      return 1;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_24;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

id sub_246A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = sub_2D8FC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_246D4(void *a1)
{
  return sub_23E94(a1, *(void *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_246F4(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  type metadata accessor for CTFont(0);
  sub_2D8B4(&qword_81480, type metadata accessor for CTFont);
  if ((sub_67300() & 1) == 0) {
    return 0;
  }
  if (v2 != v5 || v4 != v7) {
    return 0;
  }
  return sub_242F8(v3, v6);
}

uint64_t sub_247E0()
{
  return 0;
}

uint64_t sub_247EC()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_24834(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_24898(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_24918;
}

void sub_24918(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t sub_2499C()
{
  return sub_26378();
}

uint64_t sub_249B0@<X0>(unsigned char *a1@<X8>)
{
  return sub_263F8(a1);
}

uint64_t sub_249C4()
{
  return sub_67430();
}

uint64_t sub_24A38()
{
  return sub_67430();
}

void (*sub_24AA8(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_67410();
  return sub_24B34;
}

void sub_24B34(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_24B9C()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__multipleUnknownFontsUsed, &qword_811E0);
}

uint64_t sub_24BB0(uint64_t a1)
{
  return sub_266B0(a1, &qword_811E8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__multipleUnknownFontsUsed, &qword_811E0);
}

uint64_t (*sub_24BCC(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_4890(&qword_811E8);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__multipleUnknownFontsUsed;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_4890(&qword_811E0);
  sub_673F0();
  swift_endAccess();
  return sub_24CDC;
}

uint64_t sub_24CE0(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_81488);
}

uint64_t sub_24CEC()
{
  return sub_1DD1C();
}

uint64_t sub_24D00@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_24D14()
{
  return sub_1DE2C();
}

uint64_t sub_24D28()
{
  return sub_1DEB8();
}

uint64_t sub_24D3C()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__availableFonts, &qword_81490);
}

uint64_t sub_24D50(uint64_t a1)
{
  return sub_266B0(a1, &qword_81498, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__availableFonts, &qword_81490);
}

uint64_t sub_24D6C()
{
  return sub_673E0();
}

uint64_t sub_24DB4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_24E28@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_24EA8(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return sub_67430();
}

uint64_t sub_24F20()
{
  return sub_67430();
}

uint64_t sub_24F90()
{
  return 0;
}

uint64_t sub_24F98()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFont, &qword_814A8);
}

uint64_t sub_24FAC(uint64_t a1)
{
  return sub_266B0(a1, &qword_814B0, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFont, &qword_814A8);
}

uint64_t sub_24FC8(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_814B8);
}

uint64_t sub_24FD4()
{
  return sub_1DD1C();
}

uint64_t sub_24FE8@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_24FFC()
{
  return sub_1DE2C();
}

uint64_t sub_25010()
{
  return sub_1DEB8();
}

unint64_t sub_25024()
{
  return sub_1783C((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_25030()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFeatures, &qword_814C0);
}

uint64_t sub_25044(uint64_t a1)
{
  return sub_266B0(a1, &qword_814C8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFeatures, &qword_814C0);
}

uint64_t sub_25060(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_810F0);
}

uint64_t sub_2506C()
{
  return sub_1DD1C();
}

uint64_t sub_25080@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_25094()
{
  return sub_1DE2C();
}

uint64_t sub_250A8()
{
  return sub_1DEB8();
}

uint64_t sub_250BC()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypes, &qword_814D0);
}

uint64_t sub_250D0(uint64_t a1)
{
  return sub_266B0(a1, &qword_814D8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypes, &qword_814D0);
}

uint64_t sub_250EC(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_814E0);
}

uint64_t sub_250F8()
{
  return sub_1DD1C();
}

uint64_t sub_2510C@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_25120()
{
  return sub_1DE2C();
}

uint64_t sub_25134()
{
  return sub_1DEB8();
}

unint64_t sub_25148()
{
  return sub_23774((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_25154()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypeGroups, &qword_814E8);
}

uint64_t sub_25168(uint64_t a1)
{
  return sub_266B0(a1, &qword_814F0, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypeGroups, &qword_814E8);
}

uint64_t sub_25184(uint64_t a1)
{
  return sub_1DCC4(a1, &qword_81020);
}

uint64_t sub_25190()
{
  return sub_1DD1C();
}

uint64_t sub_251A4@<X0>(void *a1@<X8>)
{
  return sub_1DD9C(a1);
}

uint64_t sub_251B8()
{
  return sub_1DE2C();
}

uint64_t sub_251CC()
{
  return sub_1DEB8();
}

uint64_t sub_251E0()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__sortedFeatureGroups, &qword_814F8);
}

uint64_t sub_251F4(uint64_t a1)
{
  return sub_266B0(a1, &qword_81500, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__sortedFeatureGroups, &qword_814F8);
}

void sub_25210(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (!a2) {
    goto LABEL_10;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  size_t v6 = sub_2DCC8((unint64_t)v75[3], a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_10:
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_67430();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_67430();
    sub_23774((uint64_t)_swiftEmptyArrayStorage);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_67430();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_67430();
    char v20 = sub_1783C((uint64_t)_swiftEmptyArrayStorage);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_67430();
    swift_getKeyPath();
    swift_getKeyPath();
    sub_67420();
    swift_release();
    swift_release();
    if (v20 == 1) {
      sub_1E11C((uint64_t)_swiftEmptyArrayStorage);
    }
    return;
  }
  uint64_t v7 = sub_60714();
  uint64_t v9 = v8;
  uint64_t v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_rangeDescriptorsLookupTable);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (!*(void *)(v11 + 16) || (unint64_t v12 = sub_8EC0(v7, v9), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_endAccess();

    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  swift_endAccess();
  uint64_t v69 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int64_t v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_lastSelectedFontName);
  swift_beginAccess();
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_60714();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v17 != v18 || v16 != v19)
  {
    char v21 = sub_68790();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_16;
    }
LABEL_15:
    sub_3BFF8();
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  swift_getKeyPath();
  swift_getKeyPath();
  v75[0] = v6;
  id v22 = v6;
  swift_retain();
  sub_67430();
  *int64_t v15 = sub_60714();
  v15[1] = v23;
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  int64_t v24 = sub_335B8();
  uint64_t v25 = (uint64_t)v24;
  uint64_t v70 = v3;
  uint64_t v68 = v22;
  if (((uint64_t)v75[0] & 1) == 0)
  {
    uint64_t v26 = v24[2];
    if (v26)
    {
      uint64_t v27 = v24 + 6;
      uint64_t v28 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v30 = *(v27 - 2);
        uint64_t v29 = *(v27 - 1);
        char v31 = *(unsigned char *)v27;
        uint64_t v32 = v27[1];
        uint64_t v33 = v27[2];
        char v73 = *((unsigned char *)v27 + 24);
        uint64_t v34 = v27[4];
        uint64_t v72 = v27[5];
        uint64_t v35 = v27[6];
        sub_FBA8(v30, v29, *(unsigned char *)v27);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (sub_5FC88(v30, v29, v31))
        {
          v75[0] = v28;
          uint64_t v71 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_2B070(0, v28[2] + 1, 1);
            uint64_t v28 = v75[0];
          }
          unint64_t v37 = v28[2];
          unint64_t v36 = v28[3];
          unint64_t v38 = v37 + 1;
          if (v37 >= v36 >> 1)
          {
            sub_2B070((char *)(v36 > 1), v37 + 1, 1);
            unint64_t v38 = v37 + 1;
            uint64_t v28 = v75[0];
          }
          v28[2] = v38;
          int64_t v39 = &v28[9 * v37];
          v39[4] = v30;
          v39[5] = v29;
          *((unsigned char *)v39 + 48) = v31;
          v39[7] = v71;
          v39[8] = v33;
          *((unsigned char *)v39 + 72) = v73;
          v39[10] = v34;
          v39[11] = v72;
          v39[12] = v35;
        }
        else
        {
          sub_FFE0(v30, v29, v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v27 += 9;
        --v26;
      }
      while (v26);
    }
    else
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = (uint64_t)v28;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_67430();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  sub_DD6C(v25);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_67430();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  uint64_t v40 = swift_bridgeObjectRetain();
  unint64_t v41 = sub_2A1F0(v40);
  swift_bridgeObjectRelease();
  v75[0] = v41;
  sub_2A2E8(v75);
  swift_bridgeObjectRelease();
  char v42 = v75[0];
  int64_t v43 = v75[0][2];
  if (v43)
  {
    v75[0] = _swiftEmptyArrayStorage;
    sub_2B050(0, v43, 0);
    unint64_t v44 = v75[0];
    char v45 = v42 + 5;
    do
    {
      uint64_t v46 = *(v45 - 1);
      unint64_t v47 = *v45;
      sub_FFF0(v46, *v45);
      v75[0] = v44;
      unint64_t v49 = v44[2];
      unint64_t v48 = v44[3];
      if (v49 >= v48 >> 1)
      {
        sub_2B050((char *)(v48 > 1), v49 + 1, 1);
        unint64_t v44 = v75[0];
      }
      v45 += 3;
      v44[2] = v49 + 1;
      uint64_t v50 = &v44[2 * v49];
      v50[4] = v46;
      v50[5] = v47;
      --v43;
    }
    while (v43);
    swift_release();
  }
  else
  {
    swift_release();
    unint64_t v44 = _swiftEmptyArrayStorage;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  v75[0] = v44;
  swift_retain();
  sub_67430();
  uint64_t v51 = *(void *)(v69 + 16);
  if (v51)
  {
    v75[0] = _swiftEmptyArrayStorage;
    sub_685D0();
    uint64_t v52 = 32;
    do
    {
      id v53 = *(id *)(v69 + v52);
      sub_685B0();
      sub_685E0();
      sub_685F0();
      sub_685C0();
      v52 += 32;
      --v51;
    }
    while (v51);
    unint64_t v54 = (unint64_t)v75[0];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v55 = sub_1783C((uint64_t)_swiftEmptyArrayStorage);
  if (v54 >> 62) {
    goto LABEL_55;
  }
  uint64_t v56 = *(void *)((char *)&dword_10 + (v54 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (unint64_t i = (void *)v55; v56; unint64_t i = (void *)v55)
  {
    uint64_t v58 = 4;
    uint64_t v59 = (void *)v55;
    while (1)
    {
      id v60 = (v54 & 0xC000000000000001) != 0 ? (id)sub_68560() : *(id *)(v54 + 8 * v58);
      uint64_t v61 = v60;
      uint64_t v62 = v58 - 3;
      if (__OFADD__(v58 - 4, 1)) {
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_32F00();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v75[0] = v59;
      sub_2C580(v63, (uint64_t)sub_2D1A4, 0, isUniquelyReferenced_nonNull_native, v75);
      unint64_t i = v75[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      ++v58;
      uint64_t v59 = i;
      if (v62 == v56) {
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_55:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_68630();
    swift_bridgeObjectRelease();
  }
LABEL_49:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_getKeyPath();
  swift_getKeyPath();
  v75[0] = i;
  swift_retain();
  sub_67430();
  sub_2608C();
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v65 = *(void *)(v70 + 24);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_67420();
    swift_release();
    swift_release();
    id v66 = v74;
    if (!v74) {
      id v66 = (id)*sub_605AC();
    }
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(id, uint64_t, uint64_t))(v65 + 24))(v66, ObjectType, v65);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

uint64_t sub_25D40()
{
  return sub_26378();
}

uint64_t sub_25D54@<X0>(unsigned char *a1@<X8>)
{
  return sub_263F8(a1);
}

uint64_t sub_25D68()
{
  return sub_25D90();
}

uint64_t sub_25D90()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_67430();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  if (v4)
  {
    uint64_t v0 = sub_60714();
    uint64_t v2 = v1;
  }
  else
  {
    uint64_t v0 = 0;
    uint64_t v2 = 0;
  }
  sub_25210(v0, v2);
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_25E84(uint64_t a1))()
{
  *(void *)a1 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return sub_25F24;
}

uint64_t sub_25F24()
{
  return sub_25D90();
}

uint64_t sub_25F4C()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__internalFeaturesEnabled, &qword_811E0);
}

uint64_t sub_25F60(uint64_t a1)
{
  return sub_266B0(a1, &qword_811E8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__internalFeaturesEnabled, &qword_811E0);
}

uint64_t (*sub_25F7C(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_4890(&qword_811E8);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__internalFeaturesEnabled;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_4890(&qword_811E0);
  sub_673F0();
  swift_endAccess();
  return sub_24CDC;
}

uint64_t sub_2608C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  uint64_t result = swift_release();
  if (v19 != 1) {
    return result;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  if (!v19) {
    return sub_1E11C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v2 = sub_60714();
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_rangeDescriptorsLookupTable);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(v6 + 16) || (unint64_t v7 = sub_8EC0(v2, v4), (v8 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_endAccess();

    return sub_1E11C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = 56;
    do
    {
      uint64_t v12 = swift_bridgeObjectRetain();
      sub_2B3F0(v12);
      v11 += 32;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (_swiftEmptyArrayStorage[2] >= 0xC8uLL) {
    uint64_t v13 = 200;
  }
  else {
    uint64_t v13 = _swiftEmptyArrayStorage[2];
  }
  sub_687A0();
  swift_unknownObjectRetain_n();
  uint64_t v14 = (void *)swift_dynamicCastClass();
  if (!v14)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v14[2];
  swift_release();
  if (v15 == v13)
  {
    uint64_t v16 = (void *)swift_dynamicCastClass();
    if (!v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(type metadata accessor for FontGlyphVariant() - 8);
    sub_2A058((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), 0, (2 * v13) | 1);
    uint64_t v16 = v18;
  }
  swift_bridgeObjectRelease();
  sub_1E11C((uint64_t)v16);

  return swift_release();
}

uint64_t sub_26364()
{
  return sub_26378();
}

uint64_t sub_26378()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_263E4@<X0>(unsigned char *a1@<X8>)
{
  return sub_263F8(a1);
}

uint64_t sub_263F8@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_26474()
{
  return sub_2608C();
}

uint64_t sub_264EC()
{
  return sub_2608C();
}

uint64_t (*sub_26560(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return sub_26600;
}

uint64_t sub_26600(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(a1 + 9) = v2;
  swift_retain();
  sub_67430();
  return sub_2608C();
}

uint64_t sub_26680()
{
  return sub_1DF60((uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__variantSelectionAllowed, &qword_811E0);
}

uint64_t sub_26694(uint64_t a1)
{
  return sub_266B0(a1, &qword_811E8, (uint64_t)&OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__variantSelectionAllowed, &qword_811E0);
}

uint64_t sub_266B0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_4890(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  swift_beginAccess();
  sub_4890(a4);
  sub_67400();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t (*sub_267E0(void *a1))()
{
  char v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_4890(&qword_811E8);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__variantSelectionAllowed;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_4890(&qword_811E0);
  sub_673F0();
  swift_endAccess();
  return sub_24CDC;
}

void sub_268F0(uint64_t a1, char a2)
{
  char v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  size_t v6 = (void *)v3[12];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    sub_67400();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    sub_67400();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);
  free(v3);
}

uint64_t sub_26A60()
{
  return sub_3C0A4();
}

uint64_t sub_26A8C()
{
  return swift_retain();
}

uint64_t sub_26A9C()
{
  return sub_1F304();
}

uint64_t sub_26AC8()
{
  return swift_retain();
}

unint64_t sub_26AD8()
{
  return sub_23894((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_26AE4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_26B30(uint64_t a1)
{
  char v3 = (void *)(v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_rangeDescriptorsLookupTable);
  swift_beginAccess();
  *char v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_26B84()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_lastSelectedFontName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_26BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_lastSelectedFontName);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_26C3C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_2DE34(v4);
  swift_bridgeObjectRelease();
  size_t v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_rangeDescriptorsLookupTable);
  swift_beginAccess();
  uint64_t v7 = swift_bridgeObjectRetain();
  char v8 = sub_28C34(v7, (uint64_t)v5);
  swift_bridgeObjectRelease();
  if (v8) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = *v6;
  *size_t v6 = (uint64_t)v5;
  uint64_t v10 = sub_272D8((uint64_t)a1);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_67430();
  uint64_t v11 = a1[2];
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v53 = v2;
  uint64_t v13 = (void *)a1[4];
  uint64_t v14 = a1[5];
  uint64_t v12 = a1 + 4;
  uint64_t v15 = v12[3];
  uint64_t v16 = &v12[4 * v11];
  uint64_t v17 = (void *)*(v16 - 4);
  uint64_t v51 = *(v16 - 3);
  uint64_t v52 = v12[2];
  uint64_t v18 = *(v16 - 1);
  uint64_t v50 = *(v16 - 2);
  type metadata accessor for CTFont(0);
  sub_2D8B4(&qword_81480, type metadata accessor for CTFont);
  id v19 = v13;
  swift_bridgeObjectRetain();
  id v20 = v17;
  swift_bridgeObjectRetain();
  if ((sub_67300() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_16:
    uint64_t v2 = v53;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (v14 != v51 || v52 != v50)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v21 = v14;
  char v22 = sub_242F8(v15, v18);
  swift_bridgeObjectRelease();

  uint64_t v23 = v19;
  uint64_t v2 = v53;
  if ((v22 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (!sub_61F2C(v21, v52))
  {
    swift_bridgeObjectRelease();

    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  if (!v10)
  {
    sub_60714();
    goto LABEL_30;
  }
  uint64_t v24 = sub_60714();
  uint64_t v26 = v25;

  uint64_t v27 = sub_60714();
  if (!v26)
  {
LABEL_30:

    swift_bridgeObjectRelease();
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  if (v24 == v27 && v26 == v28)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_33;
  }
  char v37 = sub_68790();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {

    goto LABEL_31;
  }
LABEL_33:
  uint64_t v38 = sub_60714();
  if (*(void *)(v9 + 16))
  {
    unint64_t v40 = sub_8EC0(v38, v39);
    if (v41)
    {
      uint64_t v42 = *(void *)(*(void *)(v9 + 56) + 8 * v40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v43 = *(void *)(v42 + 16);
      if (!v43)
      {
        swift_bridgeObjectRelease();

LABEL_50:
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v44 = v42 + 56;
      while (1)
      {
        uint64_t v45 = *(void *)(v44 - 8);
        uint64_t v46 = *(void *)(v44 - 16);
        id v47 = *(id *)(v44 - 24);
        swift_bridgeObjectRetain();
        if (!sub_61F2C(v46, v45))
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_46;
        }
        char v48 = sub_67300();
        swift_bridgeObjectRelease();

        if ((v48 & 1) == 0) {
          break;
        }
        v44 += 32;
        if (!--v43)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
      }

      swift_bridgeObjectRelease();
LABEL_46:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_18:
  uint64_t v29 = (uint64_t *)(v2 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_lastSelectedFontName);
  swift_beginAccess();
  uint64_t v30 = v29[1];
  if (v30)
  {
    uint64_t v31 = *v29;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    sub_67420();
    swift_release();
    swift_release();
    swift_bridgeObjectRetain();
    char v32 = sub_2E074(v54, v31, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v32)
    {
LABEL_49:
      sub_25210(v31, v30);
      goto LABEL_50;
    }
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  uint64_t result = swift_release();
  if (!(v54 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v54 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_23;
    }
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v31 = 0;
    uint64_t v30 = 0;
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  uint64_t v49 = sub_68630();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_48;
  }
LABEL_23:
  if ((v54 & 0xC000000000000001) != 0)
  {
    id v34 = (id)sub_68560();
    goto LABEL_26;
  }
  if (*(void *)((char *)&dword_10 + (v54 & 0xFFFFFFFFFFFFFF8)))
  {
    id v34 = *(id *)(v54 + 32);
LABEL_26:
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_60714();
    uint64_t v30 = v36;

    goto LABEL_49;
  }
  __break(1u);
  return result;
}

void *sub_272D8(uint64_t a1)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = a1 + 56;
    do
    {
      id v5 = *(id *)(v4 - 24);
      swift_bridgeObjectRetain();
      Swift::Int v6 = sub_60714();
      char v8 = sub_29290(&v10, v6, v7);
      swift_bridgeObjectRelease();
      if (v8)
      {
        CTFontRef v9 = sub_32DD8();
        sub_60654(1.0);
        swift_bridgeObjectRelease();

        sub_682A0();
        if (*(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                       + (v11 & 0xFFFFFFFFFFFFFF8)) >> 1)
          sub_68300();
        sub_68320();
        sub_682F0();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v4 += 32;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return (void *)v11;
  }
  return result;
}

uint64_t sub_2743C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v15 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = sub_17B1C(&v14, *(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_27598(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_67420();
  swift_release();
  swift_release();
  if (v73)
  {
    uint64_t v62 = v73;
    uint64_t v4 = sub_60714();
    uint64_t v6 = v5;
    unint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_rangeDescriptorsLookupTable);
    swift_beginAccess();
    uint64_t v8 = *v7;
    uint64_t v65 = a1;
    uint64_t v66 = v2;
    if (*(void *)(v8 + 16) && (unint64_t v9 = sub_8EC0(v4, v6), (v10 & 1) != 0))
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      int64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        char v73 = _swiftEmptyArrayStorage;
        sub_9B80(0, v12, 0);
        int64_t v13 = _swiftEmptyArrayStorage;
        unint64_t v14 = _swiftEmptyArrayStorage[2];
        uint64_t v15 = 40;
        do
        {
          long long v16 = *(_OWORD *)(v11 + v15);
          char v73 = v13;
          unint64_t v17 = v13[3];
          if (v14 >= v17 >> 1)
          {
            long long v69 = v16;
            sub_9B80((char *)(v17 > 1), v14 + 1, 1);
            long long v16 = v69;
            int64_t v13 = v73;
          }
          void v13[2] = v14 + 1;
          *(_OWORD *)&v13[2 * v14 + 4] = v16;
          v15 += 32;
          ++v14;
          --v12;
        }
        while (v12);
        uint64_t v61 = v13;
        swift_bridgeObjectRelease();
        a1 = v65;
        uint64_t v2 = v66;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v61 = _swiftEmptyArrayStorage;
        uint64_t v2 = v66;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v61 = _swiftEmptyArrayStorage;
    }
    uint64_t v63 = a1 + 64;
    uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = -1;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    unint64_t v20 = v19 & *(void *)(a1 + 64);
    int64_t v64 = (unint64_t)(v18 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v21 = 0;
    while (1)
    {
      if (v20)
      {
        unint64_t v23 = __clz(__rbit64(v20));
        uint64_t v24 = (v20 - 1) & v20;
        int64_t v70 = v21;
        unint64_t v25 = v23 | (v21 << 6);
      }
      else
      {
        int64_t v26 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_66;
        }
        if (v26 >= v64)
        {
LABEL_61:
          swift_release();
          swift_beginAccess();
          if (swift_unknownObjectWeakLoadStrong())
          {
            uint64_t v59 = *(void *)(v2 + 24);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v59 + 8))(a1, v61, ObjectType, v59);
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          return;
        }
        unint64_t v27 = *(void *)(v63 + 8 * v26);
        int64_t v28 = v21 + 1;
        if (!v27)
        {
          int64_t v28 = v21 + 2;
          if (v21 + 2 >= v64) {
            goto LABEL_61;
          }
          unint64_t v27 = *(void *)(v63 + 8 * v28);
          if (!v27)
          {
            int64_t v28 = v21 + 3;
            if (v21 + 3 >= v64) {
              goto LABEL_61;
            }
            unint64_t v27 = *(void *)(v63 + 8 * v28);
            if (!v27)
            {
              int64_t v28 = v21 + 4;
              if (v21 + 4 >= v64) {
                goto LABEL_61;
              }
              unint64_t v27 = *(void *)(v63 + 8 * v28);
              if (!v27)
              {
                int64_t v28 = v21 + 5;
                if (v21 + 5 >= v64) {
                  goto LABEL_61;
                }
                unint64_t v27 = *(void *)(v63 + 8 * v28);
                if (!v27)
                {
                  uint64_t v29 = v21 + 6;
                  if (v21 + 6 >= v64) {
                    goto LABEL_61;
                  }
                  unint64_t v27 = *(void *)(v63 + 8 * v29);
                  if (!v27)
                  {
                    while (1)
                    {
                      int64_t v28 = v29 + 1;
                      if (__OFADD__(v29, 1)) {
                        goto LABEL_68;
                      }
                      if (v28 >= v64) {
                        goto LABEL_61;
                      }
                      unint64_t v27 = *(void *)(v63 + 8 * v28);
                      ++v29;
                      if (v27) {
                        goto LABEL_37;
                      }
                    }
                  }
                  int64_t v28 = v21 + 6;
                }
              }
            }
          }
        }
LABEL_37:
        uint64_t v24 = (v27 - 1) & v27;
        int64_t v70 = v28;
        unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
      }
      uint64_t v30 = *(void *)(a1 + 48) + 24 * v25;
      uint64_t v32 = *(void *)v30;
      uint64_t v31 = *(void *)(v30 + 8);
      char v33 = *(unsigned char *)(v30 + 16);
      uint64_t v34 = *(void *)(a1 + 16);
      sub_FBA8(*(void *)v30, v31, v33);
      unint64_t v68 = v24;
      if (v34)
      {
        sub_FBA8(v32, v31, v33);
        unint64_t v35 = sub_18CB8(v32, v31, v33);
        if (v36)
        {
          uint64_t v37 = *(void *)(*(void *)(a1 + 56) + 8 * v35);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v37 = 0;
        }
        sub_FFE0(v32, v31, v33);
      }
      else
      {
        uint64_t v37 = 0;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v67 = (void (*)(void **, void))sub_67410();
      uint64_t v39 = v38;
      if (v37) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v51 = sub_18CB8(v32, v31, v33);
      char v53 = v52;
      swift_bridgeObjectRelease();
      if (v53)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v72 = *v39;
        *uint64_t v39 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_2C904();
        }
        sub_FFE0(*(void *)(*(void *)(v72 + 48) + 24 * v51), *(void *)(*(void *)(v72 + 48) + 24 * v51 + 8), *(unsigned char *)(*(void *)(v72 + 48) + 24 * v51 + 16));
        sub_2CAB0(v51, v72);
        *uint64_t v39 = v72;
        swift_bridgeObjectRelease();
        sub_FFE0(v32, v31, v33);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_FFE0(v32, v31, v33);
      }
LABEL_17:
      unint64_t v20 = v68;
      int64_t v21 = v70;
      v67(&v73, 0);
      swift_release();
      swift_release();
    }
    char v40 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v41 = *v39;
    uint64_t v71 = (void *)*v39;
    *uint64_t v39 = 0x8000000000000000;
    unint64_t v43 = sub_18CB8(v32, v31, v33);
    uint64_t v44 = *(void *)(v41 + 16);
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      sub_687C0();
      __break(1u);
      return;
    }
    char v47 = v42;
    if (*(void *)(v41 + 24) < v46)
    {
      sub_2BF58(v46, v40);
      unint64_t v48 = sub_18CB8(v32, v31, v33);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_69;
      }
      unint64_t v43 = v48;
      uint64_t v50 = v71;
      if ((v47 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_15:
      uint64_t v22 = v50[7];
      swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v43) = v37;
LABEL_16:
      *uint64_t v39 = (uint64_t)v50;
      swift_bridgeObjectRelease();
      sub_FFE0(v32, v31, v33);
      a1 = v65;
      uint64_t v2 = v66;
      goto LABEL_17;
    }
    if (v40)
    {
      uint64_t v50 = v71;
      if (v42) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_2C904();
      uint64_t v50 = v71;
      if (v47) {
        goto LABEL_15;
      }
    }
LABEL_56:
    v50[(v43 >> 6) + 8] |= 1 << v43;
    uint64_t v55 = v50[6] + 24 * v43;
    *(void *)uint64_t v55 = v32;
    *(void *)(v55 + 8) = v31;
    *(unsigned char *)(v55 + 16) = v33;
    *(void *)(v50[7] + 8 * v43) = v37;
    uint64_t v56 = v50[2];
    BOOL v57 = __OFADD__(v56, 1);
    uint64_t v58 = v56 + 1;
    if (v57) {
      goto LABEL_67;
    }
    v50[2] = v58;
    sub_FBA8(v32, v31, v33);
    goto LABEL_16;
  }
}

uint64_t sub_27C8C()
{
  sub_2E1CC(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__multipleUnknownFontsUsed;
  uint64_t v2 = sub_4890(&qword_811E0);
  int64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  uint64_t v4 = v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__availableFonts;
  uint64_t v5 = sub_4890(&qword_81490);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFont;
  uint64_t v7 = sub_4890(&qword_814A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFeatures;
  uint64_t v9 = sub_4890(&qword_814C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypes;
  uint64_t v11 = sub_4890(&qword_814D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypeGroups;
  uint64_t v13 = sub_4890(&qword_814E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__sortedFeatureGroups;
  uint64_t v15 = sub_4890(&qword_814F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  v3(v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__internalFeaturesEnabled, v2);
  v3(v0 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__variantSelectionAllowed, v2);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_27F3C()
{
  sub_27C8C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_27F94()
{
  uint64_t v0 = swift_allocObject();
  sub_27FCC();
  return v0;
}

uint64_t sub_27FCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_4890(&qword_814F8);
  uint64_t v54 = *(void *)(v2 - 8);
  uint64_t v55 = v2;
  __chkstk_darwin(v2);
  char v53 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_4890(&qword_814E8);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_4890(&qword_814D0);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  __chkstk_darwin(v6);
  char v47 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_814C0);
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  __chkstk_darwin(v8);
  unint64_t v43 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_4890(&qword_814A8);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_4890(&qword_81490);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  long long v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_4890(&qword_811E0);
  uint64_t v44 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v21 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__multipleUnknownFontsUsed;
  LOBYTE(v56) = 0;
  sub_673E0();
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  v22(v21, v20, v17);
  uint64_t v23 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__availableFonts;
  uint64_t v56 = _swiftEmptyArrayStorage;
  sub_4890(&qword_81488);
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v23, v16, v13);
  uint64_t v24 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFont;
  uint64_t v56 = 0;
  sub_4890(&qword_814A0);
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v24, v12, v42);
  uint64_t v25 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__selectedFeatures;
  uint64_t v56 = (void *)sub_1783C((uint64_t)_swiftEmptyArrayStorage);
  sub_4890(&qword_814B8);
  int64_t v26 = v43;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v25, v26, v46);
  uint64_t v27 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypes;
  uint64_t v56 = _swiftEmptyArrayStorage;
  sub_4890(&qword_810F0);
  int64_t v28 = v47;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v27, v28, v49);
  uint64_t v29 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__featureTypeGroups;
  uint64_t v56 = (void *)sub_23774((uint64_t)_swiftEmptyArrayStorage);
  sub_4890(&qword_814E0);
  uint64_t v30 = v50;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v29, v30, v52);
  uint64_t v31 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__sortedFeatureGroups;
  uint64_t v56 = _swiftEmptyArrayStorage;
  sub_4890(&qword_81020);
  uint64_t v32 = v53;
  sub_673E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v31, v32, v55);
  uint64_t v33 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__internalFeaturesEnabled;
  LOBYTE(v56) = 0;
  sub_673E0();
  uint64_t v34 = v44;
  v22(v33, v20, v44);
  uint64_t v35 = v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel__variantSelectionAllowed;
  LOBYTE(v56) = 0;
  sub_673E0();
  v22(v35, v20, v34);
  uint64_t v36 = OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_featurePreviewConfigurationCache;
  type metadata accessor for FeaturePreviewConfigurationCache();
  *(void *)(v1 + v36) = sub_3C0A4();
  uint64_t v37 = OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_variantsModel;
  type metadata accessor for GlyphVariantsViewModel();
  *(void *)(v1 + v37) = sub_1F304();
  uint64_t v38 = OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_rangeDescriptorsLookupTable;
  *(void *)(v1 + v38) = sub_23894((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v39 = (void *)(v1 + OBJC_IVAR____TtC17UITypographyPanel24TypographyPanelViewModel_lastSelectedFontName);
  *uint64_t v39 = 0;
  v39[1] = 0;
  return v1;
}

uint64_t sub_28688(uint64_t a1, uint64_t a2)
{
  return sub_287F4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_286A0(uint64_t a1, id *a2)
{
  uint64_t result = sub_68180();
  *a2 = 0;
  return result;
}

uint64_t sub_28718(uint64_t a1, id *a2)
{
  char v3 = sub_68190();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_28798@<X0>(void *a1@<X8>)
{
  sub_681A0();
  NSString v2 = sub_68170();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_287DC(uint64_t a1, uint64_t a2)
{
  return sub_287F4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_287F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_681A0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_28838()
{
  sub_681A0();
  sub_681E0();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_2888C()
{
  sub_681A0();
  sub_687F0();
  sub_681E0();
  Swift::Int v0 = sub_68830();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_28900()
{
  uint64_t v0 = sub_681A0();
  uint64_t v2 = v1;
  if (v0 == sub_681A0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_68790();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_2898C()
{
  return sub_67320();
}

uint64_t sub_289D8()
{
  return sub_67310();
}

Swift::Int sub_28A30()
{
  return sub_68830();
}

uint64_t sub_28A98@<X0>(void *a1@<X8>)
{
  NSString v2 = sub_68170();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_28AE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_681A0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_28B0C(uint64_t a1)
{
  uint64_t v2 = sub_2D8B4(&qword_81448, type metadata accessor for Key);
  uint64_t v3 = sub_2D8B4(&qword_81688, type metadata accessor for Key);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_28BC8()
{
  swift_getWitnessTable();
  return sub_67300();
}

uint64_t sub_28C34(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v51 = result;
  int64_t v49 = v9;
  uint64_t v50 = result + 64;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(v3 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_8EC0(v16, v17);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || (uint64_t v22 = *(void **)(*(void *)(v2 + 56) + 8 * v19), v23 = v22[2], v23 != v18[2]))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (!v23 || v22 == v18)
    {
      uint64_t result = swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v55 = v22[2];
      unint64_t v53 = v8;
      int64_t v54 = v4;
      uint64_t v25 = v18;
      type metadata accessor for CTFont(0);
      uint64_t v27 = (void *)v22[4];
      uint64_t v26 = v22[5];
      int64_t v28 = v22;
      uint64_t v29 = v22[6];
      uint64_t v30 = v28[7];
      uint64_t v31 = v25[5];
      uint64_t v58 = (void *)v25[4];
      uint64_t v32 = v25[6];
      uint64_t v33 = v25[7];
      uint64_t v56 = v25;
      sub_2D8B4(&qword_81480, type metadata accessor for CTFont);
      BOOL v57 = v28;
      swift_bridgeObjectRetain();
      id v34 = v27;
      swift_bridgeObjectRetain();
      id v35 = v58;
      swift_bridgeObjectRetain();
      uint64_t v59 = v35;
      char v36 = sub_67300();
      if ((v36 & 1) == 0 || v26 != v31 || v29 != v32)
      {
LABEL_51:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return 0;
      }
      char v37 = sub_242F8(v30, v33);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      uint64_t result = (uint64_t)v25;
      if (v55 != 1)
      {
        uint64_t v38 = 0;
        unint64_t v39 = 1;
        while (v39 < *(void *)(result + 16))
        {
          uint64_t v40 = v57[v38 + 9];
          uint64_t v41 = v57[v38 + 10];
          uint64_t v42 = v57[v38 + 11];
          unint64_t v43 = *(void **)(result + v38 * 8 + 64);
          uint64_t v44 = *(void *)(result + v38 * 8 + 72);
          uint64_t v45 = *(void *)(result + v38 * 8 + 80);
          uint64_t v46 = *(void *)(result + v38 * 8 + 88);
          id v34 = (id)v57[v38 + 8];
          swift_bridgeObjectRetain();
          id v47 = v43;
          swift_bridgeObjectRetain();
          uint64_t v59 = v47;
          if ((sub_67300() & 1) == 0 || v40 != v44 || v41 != v45) {
            goto LABEL_51;
          }
          char v48 = sub_242F8(v42, v46);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if ((v48 & 1) == 0) {
            goto LABEL_50;
          }
          ++v39;
          v38 += 4;
          uint64_t result = (uint64_t)v56;
          if (v55 == v39) {
            goto LABEL_37;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t v3 = v51;
      uint64_t v2 = a2;
      int64_t v9 = v49;
      uint64_t v5 = v50;
      unint64_t v8 = v53;
      int64_t v4 = v54;
      uint64_t result = swift_bridgeObjectRelease();
      if (v53) {
        goto LABEL_6;
      }
    }
LABEL_7:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_54;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_55:
  __break(1u);
  return result;
}

unint64_t sub_29084(uint64_t a1)
{
  sub_681A0();
  sub_687F0();
  sub_681E0();
  Swift::Int v2 = sub_68830();
  swift_bridgeObjectRelease();
  return sub_29118(a1, v2);
}

unint64_t sub_29118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_681A0();
    uint64_t v8 = v7;
    if (v6 == sub_681A0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_68790();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_681A0();
          uint64_t v15 = v14;
          if (v13 == sub_681A0() && v15 == v16) {
            break;
          }
          char v18 = sub_68790();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_29290(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  sub_687F0();
  swift_bridgeObjectRetain();
  sub_681E0();
  Swift::Int v8 = sub_68830();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_68790() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      char v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_68790() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_29720(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_29440()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_81690);
  uint64_t v3 = sub_68500();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_687F0();
      sub_681E0();
      uint64_t result = sub_68830();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_29720(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_29440();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_298BC();
      goto LABEL_22;
    }
    sub_29A70();
  }
  uint64_t v11 = *v4;
  sub_687F0();
  sub_681E0();
  uint64_t result = sub_68830();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_68790(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_687B0();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_68790();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_298BC()
{
  uint64_t v1 = v0;
  sub_4890(&qword_81690);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_684F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_29A70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_81690);
  uint64_t v3 = sub_68500();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_687F0();
    swift_bridgeObjectRetain();
    sub_681E0();
    uint64_t result = sub_68830();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_29D20(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FontGlyphVariant();
  uint64_t v34 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_4890(&qword_816F8);
  uint64_t result = sub_68520();
  uint64_t v11 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 56;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v33)
      {
LABEL_37:
        swift_release();
        return v11;
      }
      unint64_t v19 = v32[v18];
      ++v14;
      if (!v19)
      {
        uint64_t v14 = v18 + 1;
        if (v18 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v19 = v32[v14];
        if (!v19)
        {
          uint64_t v14 = v18 + 2;
          if (v18 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            uint64_t v20 = v18 + 3;
            if (v20 >= v33) {
              goto LABEL_37;
            }
            unint64_t v19 = v32[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v14 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v19 = v32[v14];
                ++v20;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v20;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }
    uint64_t v21 = *(void *)(v34 + 72);
    sub_20B5C(*(void *)(a4 + 48) + v21 * v17, (uint64_t)v10);
    sub_2D8B4(&qword_816D0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
    uint64_t result = sub_68130();
    uint64_t v22 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v15 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v15 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v15 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v15 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t result = sub_2EB2C((uint64_t)v10, *(void *)(v11 + 48) + v25 * v21);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_2A058(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_14;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_4890(&qword_816A8);
      uint64_t v7 = *(void *)(type metadata accessor for FontGlyphVariant() - 8);
      uint64_t v8 = *(void *)(v7 + 72);
      unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      if (!v8)
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        return;
      }
      if (v11 - v9 == 0x8000000000000000 && v8 == -1) {
        goto LABEL_16;
      }
      v10[2] = v5;
      v10[3] = 2 * ((uint64_t)(v11 - v9) / v8);
      if (v4 != a3)
      {
LABEL_10:
        type metadata accessor for FontGlyphVariant();
        swift_arrayInitWithCopy();
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

uint64_t *sub_2A1F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_4890(&qword_816C0);
  uint64_t v3 = (uint64_t *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_2CF74((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_A588();
  if (v5 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_2A2E8(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_2D190(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_2A354(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2A354(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  uint64_t result = sub_68760(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_134;
    }
    if (v4) {
      return sub_2AB5C(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_133;
  }
  uint64_t v104 = result;
  Swift::Int v102 = a1;
  if (v4 > 1)
  {
    uint64_t v7 = v6 >> 1;
    sub_4890(&qword_816C8);
    uint64_t result = sub_68310();
    uint64_t v8 = (void *)result;
    *(void *)(result + 16) = v7;
    uint64_t v114 = (uint64_t *)(result + 32);
LABEL_12:
    uint64_t v109 = v8;
    Swift::Int v9 = 0;
    uint64_t v10 = *a1;
    uint64_t v103 = *a1 + 64;
    size_t v11 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v112 = v4;
    uint64_t v117 = *a1;
    while (1)
    {
      Swift::Int v13 = v9;
      Swift::Int v14 = v9 + 1;
      Swift::Int v111 = v9;
      if (v9 + 1 < v4)
      {
        Swift::Int v105 = v11;
        uint64_t v107 = v2;
        uint64_t v15 = (uint64_t *)(v10 + 24 * v14);
        uint64_t v16 = *v15;
        unint64_t v17 = v15[1];
        uint64_t v18 = (uint64_t *)(v10 + 24 * v9);
        uint64_t v20 = *v18;
        unint64_t v19 = v18[1];
        sub_FFF0(v16, v17);
        swift_bridgeObjectRetain();
        sub_FFF0(v20, v19);
        swift_bridgeObjectRetain();
        int v118 = sub_C2E8(v16, v17, v20, v19);
        sub_118BC(v20, v19);
        swift_bridgeObjectRelease();
        sub_118BC(v16, v17);
        Swift::Int v4 = v112;
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v14 = v13 + 2;
        if (v13 + 2 < v112)
        {
          uint64_t v21 = v103 + 24 * v13;
          while (1)
          {
            unint64_t v22 = *(void *)(v21 - 8);
            uint64_t v23 = *(void *)(v21 - 40);
            unint64_t v24 = *(void *)(v21 - 32);
            uint64_t v25 = *(void *)(v21 - 16);
            sub_FFF0(v25, v22);
            swift_bridgeObjectRetain();
            sub_FFF0(v23, v24);
            swift_bridgeObjectRetain();
            int v26 = sub_C2E8(v25, v22, v23, v24);
            sub_118BC(v23, v24);
            swift_bridgeObjectRelease();
            sub_118BC(v25, v22);
            uint64_t result = swift_bridgeObjectRelease();
            if ((v118 ^ v26)) {
              break;
            }
            ++v14;
            v21 += 24;
            Swift::Int v4 = v112;
            if (v112 == v14)
            {
              Swift::Int v14 = v112;
              goto LABEL_22;
            }
          }
          Swift::Int v4 = v112;
LABEL_22:
          Swift::Int v13 = v111;
        }
        size_t v11 = v105;
        uint64_t v2 = v107;
        uint64_t v10 = v117;
        if (v118)
        {
          if (v14 < v13) {
            goto LABEL_135;
          }
          if (v13 < v14)
          {
            uint64_t v27 = 24 * v14;
            uint64_t v28 = 24 * v13;
            Swift::Int v29 = v14;
            Swift::Int v30 = v13;
            do
            {
              if (v30 != --v29)
              {
                if (!v117) {
                  goto LABEL_140;
                }
                uint64_t v31 = v117 + v28;
                uint64_t v32 = v117 + v27;
                uint64_t v33 = *(void *)(v117 + v28 + 16);
                long long v34 = *(_OWORD *)(v117 + v28);
                uint64_t v35 = *(void *)(v117 + v27 - 8);
                *(_OWORD *)uint64_t v31 = *(_OWORD *)(v117 + v27 - 24);
                *(void *)(v31 + 16) = v35;
                *(_OWORD *)(v32 - 24) = v34;
                *(void *)(v32 - 8) = v33;
              }
              ++v30;
              v27 -= 24;
              v28 += 24;
            }
            while (v30 < v29);
          }
        }
      }
      if (v14 < v4)
      {
        if (__OFSUB__(v14, v13)) {
          goto LABEL_132;
        }
        if (v14 - v13 < v104)
        {
          if (__OFADD__(v13, v104)) {
            goto LABEL_136;
          }
          if (v13 + v104 >= v4) {
            Swift::Int v36 = v4;
          }
          else {
            Swift::Int v36 = v13 + v104;
          }
          if (v36 < v13)
          {
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
            return result;
          }
          if (v14 != v36)
          {
            Swift::Int v106 = v11;
            uint64_t v108 = v2;
            char v37 = (uint64_t *)(v10 + 24 * v14);
            Swift::Int v110 = v36;
            do
            {
              unint64_t v39 = (uint64_t *)(v10 + 24 * v14);
              uint64_t v41 = *v39;
              unint64_t v40 = v39[1];
              Swift::Int v42 = v13;
              int v113 = v37;
              Swift::Int v115 = v14;
              while (1)
              {
                uint64_t v43 = *(v37 - 3);
                unint64_t v44 = *(v37 - 2);
                sub_FFF0(v41, v40);
                swift_bridgeObjectRetain();
                sub_FFF0(v43, v44);
                swift_bridgeObjectRetain();
                char v119 = sub_C2E8(v41, v40, v43, v44);
                sub_118BC(v43, v44);
                swift_bridgeObjectRelease();
                sub_118BC(v41, v40);
                uint64_t result = swift_bridgeObjectRelease();
                if ((v119 & 1) == 0) {
                  break;
                }
                uint64_t v10 = v117;
                Swift::Int v38 = v115;
                if (!v117) {
                  goto LABEL_138;
                }
                uint64_t v41 = *v37;
                unint64_t v40 = v37[1];
                uint64_t v45 = v37[2];
                *(_OWORD *)char v37 = *(_OWORD *)(v37 - 3);
                v37[2] = *(v37 - 1);
                *(v37 - 2) = v40;
                *(v37 - 1) = v45;
                *(v37 - 3) = v41;
                v37 -= 3;
                if (v115 == ++v42) {
                  goto LABEL_42;
                }
              }
              uint64_t v10 = v117;
              Swift::Int v38 = v115;
LABEL_42:
              Swift::Int v14 = v38 + 1;
              char v37 = v113 + 3;
              Swift::Int v13 = v111;
            }
            while (v14 != v110);
            Swift::Int v14 = v110;
            size_t v11 = v106;
            uint64_t v2 = v108;
          }
        }
      }
      if (v14 < v13) {
        goto LABEL_127;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_9A50(0, *((void *)v11 + 2) + 1, 1, v11);
        size_t v11 = (char *)result;
      }
      unint64_t v47 = *((void *)v11 + 2);
      unint64_t v46 = *((void *)v11 + 3);
      unint64_t v12 = v47 + 1;
      uint64_t v10 = v117;
      Swift::Int v116 = v14;
      if (v47 >= v46 >> 1)
      {
        uint64_t result = (uint64_t)sub_9A50((char *)(v46 > 1), v47 + 1, 1, v11);
        uint64_t v10 = v117;
        size_t v11 = (char *)result;
      }
      *((void *)v11 + 2) = v12;
      char v48 = v11 + 32;
      int64_t v49 = &v11[16 * v47 + 32];
      *(void *)int64_t v49 = v13;
      *((void *)v49 + 1) = v116;
      if (v47)
      {
        while (1)
        {
          unint64_t v50 = v12 - 1;
          if (v12 >= 4)
          {
            uint64_t v55 = &v48[2 * v12];
            uint64_t v56 = *(v55 - 8);
            uint64_t v57 = *(v55 - 7);
            BOOL v61 = __OFSUB__(v57, v56);
            uint64_t v58 = v57 - v56;
            if (v61) {
              goto LABEL_116;
            }
            uint64_t v60 = *(v55 - 6);
            uint64_t v59 = *(v55 - 5);
            BOOL v61 = __OFSUB__(v59, v60);
            uint64_t v53 = v59 - v60;
            char v54 = v61;
            if (v61) {
              goto LABEL_117;
            }
            unint64_t v62 = v12 - 2;
            uint64_t v63 = &v48[2 * v12 - 4];
            uint64_t v65 = *v63;
            uint64_t v64 = v63[1];
            BOOL v61 = __OFSUB__(v64, v65);
            uint64_t v66 = v64 - v65;
            if (v61) {
              goto LABEL_118;
            }
            BOOL v61 = __OFADD__(v53, v66);
            uint64_t v67 = v53 + v66;
            if (v61) {
              goto LABEL_120;
            }
            if (v67 >= v58)
            {
              uint64_t v85 = &v48[2 * v50];
              uint64_t v87 = *v85;
              uint64_t v86 = v85[1];
              BOOL v61 = __OFSUB__(v86, v87);
              uint64_t v88 = v86 - v87;
              if (v61) {
                goto LABEL_126;
              }
              BOOL v78 = v53 < v88;
              goto LABEL_86;
            }
          }
          else
          {
            if (v12 != 3)
            {
              uint64_t v79 = *((void *)v11 + 4);
              uint64_t v80 = *((void *)v11 + 5);
              BOOL v61 = __OFSUB__(v80, v79);
              uint64_t v72 = v80 - v79;
              char v73 = v61;
              goto LABEL_80;
            }
            uint64_t v52 = *((void *)v11 + 4);
            uint64_t v51 = *((void *)v11 + 5);
            BOOL v61 = __OFSUB__(v51, v52);
            uint64_t v53 = v51 - v52;
            char v54 = v61;
          }
          if (v54) {
            goto LABEL_119;
          }
          unint64_t v62 = v12 - 2;
          unint64_t v68 = &v48[2 * v12 - 4];
          uint64_t v70 = *v68;
          uint64_t v69 = v68[1];
          BOOL v71 = __OFSUB__(v69, v70);
          uint64_t v72 = v69 - v70;
          char v73 = v71;
          if (v71) {
            goto LABEL_121;
          }
          uint64_t v74 = &v48[2 * v50];
          uint64_t v76 = *v74;
          uint64_t v75 = v74[1];
          BOOL v61 = __OFSUB__(v75, v76);
          uint64_t v77 = v75 - v76;
          if (v61) {
            goto LABEL_123;
          }
          if (__OFADD__(v72, v77)) {
            goto LABEL_125;
          }
          if (v72 + v77 >= v53)
          {
            BOOL v78 = v53 < v77;
LABEL_86:
            if (v78) {
              unint64_t v50 = v62;
            }
            goto LABEL_88;
          }
LABEL_80:
          if (v73) {
            goto LABEL_122;
          }
          uint64_t v81 = &v48[2 * v50];
          uint64_t v83 = *v81;
          uint64_t v82 = v81[1];
          BOOL v61 = __OFSUB__(v82, v83);
          uint64_t v84 = v82 - v83;
          if (v61) {
            goto LABEL_124;
          }
          if (v84 < v72) {
            goto LABEL_14;
          }
LABEL_88:
          unint64_t v89 = v50 - 1;
          if (v50 - 1 >= v12)
          {
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
            goto LABEL_137;
          }
          if (!v10) {
            goto LABEL_139;
          }
          uint64_t v90 = v11;
          char v91 = &v48[2 * v89];
          uint64_t v92 = *v91;
          uint64_t v93 = &v48[2 * v50];
          uint64_t v94 = v93[1];
          uint64_t result = sub_2ACBC((uint64_t *)(v10 + 24 * *v91), (uint64_t *)(v10 + 24 * *v93), v10 + 24 * v94, v114);
          if (v2)
          {
LABEL_96:
            swift_bridgeObjectRelease();
            v109[2] = 0;
            return swift_bridgeObjectRelease();
          }
          if (v94 < v92) {
            goto LABEL_113;
          }
          if (v50 > *((void *)v90 + 2)) {
            goto LABEL_114;
          }
          *char v91 = v92;
          v48[2 * v89 + 1] = v94;
          unint64_t v95 = *((void *)v90 + 2);
          if (v50 >= v95) {
            goto LABEL_115;
          }
          size_t v11 = v90;
          unint64_t v12 = v95 - 1;
          uint64_t result = (uint64_t)memmove(&v48[2 * v50], v93 + 2, 16 * (v95 - 1 - v50));
          *((void *)v11 + 2) = v95 - 1;
          uint64_t v10 = v117;
          if (v95 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v12 = 1;
LABEL_14:
      Swift::Int v4 = v112;
      Swift::Int v9 = v116;
      uint64_t v8 = v109;
      if (v116 >= v112) {
        goto LABEL_98;
      }
    }
  }
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v114 = &_swiftEmptyArrayStorage[4];
  if (v4 == 1) {
    goto LABEL_12;
  }
  unint64_t v12 = _swiftEmptyArrayStorage[2];
  size_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_98:
  if (v12 >= 2)
  {
    uint64_t v96 = *v102;
    uint64_t v109 = v8;
    do
    {
      unint64_t v97 = v12 - 2;
      if (v12 < 2) {
        goto LABEL_128;
      }
      if (!v96) {
        goto LABEL_141;
      }
      uint64_t v98 = *(void *)&v11[16 * v97 + 32];
      uint64_t v99 = *(void *)&v11[16 * v12 + 24];
      uint64_t result = sub_2ACBC((uint64_t *)(v96 + 24 * v98), (uint64_t *)(v96 + 24 * *(void *)&v11[16 * v12 + 16]), v96 + 24 * v99, v114);
      if (v2) {
        goto LABEL_96;
      }
      if (v99 < v98) {
        goto LABEL_129;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_9B4C((uint64_t)v11);
        size_t v11 = (char *)result;
      }
      if (v97 >= *((void *)v11 + 2)) {
        goto LABEL_130;
      }
      unint64_t v100 = &v11[16 * v97 + 32];
      *(void *)unint64_t v100 = v98;
      *((void *)v100 + 1) = v99;
      unint64_t v101 = *((void *)v11 + 2);
      if (v12 > v101) {
        goto LABEL_131;
      }
      uint64_t result = (uint64_t)memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v101 - v12));
      *((void *)v11 + 2) = v101 - 1;
      unint64_t v12 = v101 - 1;
      uint64_t v8 = v109;
    }
    while (v101 > 2);
  }
  swift_bridgeObjectRelease();
  v8[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2AB5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v13 = result;
  if (a3 != a2)
  {
    uint64_t v15 = *a4;
    Swift::Int v4 = (uint64_t *)(*a4 + 24 * a3);
LABEL_5:
    uint64_t v5 = (uint64_t *)(v15 + 24 * a3);
    uint64_t v6 = *v5;
    unint64_t v7 = v5[1];
    uint64_t v8 = v13;
    Swift::Int v14 = v4;
    uint64_t v16 = a3;
    while (1)
    {
      uint64_t v9 = *(v4 - 3);
      unint64_t v10 = *(v4 - 2);
      sub_FFF0(v6, v7);
      swift_bridgeObjectRetain();
      sub_FFF0(v9, v10);
      swift_bridgeObjectRetain();
      char v17 = sub_C2E8(v6, v7, v9, v10);
      sub_118BC(v9, v10);
      swift_bridgeObjectRelease();
      sub_118BC(v6, v7);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
LABEL_4:
        a3 = v16 + 1;
        Swift::Int v4 = v14 + 3;
        if (v16 + 1 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v15) {
        break;
      }
      uint64_t v6 = *v4;
      unint64_t v7 = v4[1];
      uint64_t v11 = v4[2];
      *(_OWORD *)Swift::Int v4 = *(_OWORD *)(v4 - 3);
      void v4[2] = *(v4 - 1);
      *(v4 - 2) = v7;
      *(v4 - 1) = v11;
      *(v4 - 3) = v6;
      v4 -= 3;
      if (v16 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2ACBC(uint64_t *__dst, uint64_t *__src, unint64_t a3, uint64_t *a4)
{
  uint64_t v5 = __src;
  uint64_t v6 = __dst;
  int64_t v7 = (char *)__src - (char *)__dst;
  int64_t v8 = ((char *)__src - (char *)__dst) / 24;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = (uint64_t)(a3 - (void)__src) / 24;
  if (v8 >= v10)
  {
    if (a4 != __src || &__src[3 * v10] <= a4) {
      memmove(a4, __src, 24 * v10);
    }
    unint64_t v12 = (char *)&a4[3 * v10];
    uint64_t v11 = a4;
    if (v6 >= v5 || v9 < 24) {
      goto LABEL_35;
    }
    unint64_t v23 = a3 - 24;
    uint64_t v35 = a4;
    Swift::Int v42 = v6;
    while (1)
    {
      Swift::Int v38 = (uint64_t *)(v23 + 24);
      unint64_t v40 = v12;
      uint64_t v24 = *((void *)v12 - 3);
      unint64_t v25 = *((void *)v12 - 2);
      int v26 = v12 - 24;
      Swift::Int v36 = v5;
      uint64_t v28 = *(v5 - 3);
      unint64_t v29 = *(v5 - 2);
      uint64_t v27 = v5 - 3;
      sub_FFF0(v24, v25);
      swift_bridgeObjectRetain();
      sub_FFF0(v28, v29);
      swift_bridgeObjectRetain();
      char v30 = sub_C2E8(v24, v25, v28, v29);
      sub_118BC(v28, v29);
      swift_bridgeObjectRelease();
      sub_118BC(v24, v25);
      swift_bridgeObjectRelease();
      if (v30)
      {
        unint64_t v12 = v40;
        unint64_t v31 = (unint64_t)v42;
        if (v38 == v5)
        {
          v5 -= 3;
          uint64_t v11 = v35;
          if (v23 < (unint64_t)v36) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        v5 -= 3;
      }
      else
      {
        unint64_t v31 = (unint64_t)v42;
        if (v38 == (uint64_t *)v40)
        {
          uint64_t v27 = (uint64_t *)v26;
          unint64_t v12 = v26;
          uint64_t v11 = v35;
          if (v23 < (unint64_t)v40) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        uint64_t v27 = (uint64_t *)v26;
        unint64_t v12 = v26;
      }
      uint64_t v11 = v35;
LABEL_32:
      long long v32 = *(_OWORD *)v27;
      *(void *)(v23 + 16) = v27[2];
      *(_OWORD *)unint64_t v23 = v32;
LABEL_33:
      if ((unint64_t)v5 > v31)
      {
        v23 -= 24;
        if (v12 > (char *)v11) {
          continue;
        }
      }
      goto LABEL_35;
    }
  }
  uint64_t v11 = a4;
  if (a4 != __dst || &__dst[3 * v8] <= a4) {
    memmove(a4, __dst, 24 * v8);
  }
  unint64_t v12 = (char *)&a4[3 * v8];
  if ((unint64_t)v5 < a3 && v7 >= 24)
  {
    unint64_t v39 = &v11[3 * v8];
    while (1)
    {
      uint64_t v41 = v6;
      uint64_t v13 = *v5;
      unint64_t v14 = v5[1];
      uint64_t v15 = v5;
      uint64_t v17 = *v11;
      unint64_t v16 = v11[1];
      sub_FFF0(*v5, v14);
      swift_bridgeObjectRetain();
      sub_FFF0(v17, v16);
      swift_bridgeObjectRetain();
      char v18 = sub_C2E8(v13, v14, v17, v16);
      sub_118BC(v17, v16);
      swift_bridgeObjectRelease();
      sub_118BC(v13, v14);
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0) {
        break;
      }
      unint64_t v19 = v5;
      v5 += 3;
      uint64_t v20 = v41;
      if (v41 != v15) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t v6 = v20 + 3;
      unint64_t v12 = (char *)v39;
      if (v11 >= v39 || (unint64_t)v5 >= a3) {
        goto LABEL_15;
      }
    }
    unint64_t v19 = v11;
    uint64_t v20 = v41;
    BOOL v21 = v41 == v11;
    v11 += 3;
    if (v21) {
      goto LABEL_13;
    }
LABEL_12:
    long long v22 = *(_OWORD *)v19;
    v20[2] = v19[2];
    *(_OWORD *)uint64_t v20 = v22;
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v5 = v6;
LABEL_35:
  uint64_t v33 = (v12 - (char *)v11) / 24;
  if (v5 != v11 || v5 >= &v11[3 * v33]) {
    memmove(v5, v11, 24 * v33);
  }
  return 1;
}

char *sub_2B050(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_2B090(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_2B070(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_2B2D0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_2B090(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_816B8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_2B194(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_816C0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_816C8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2B2D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80E18);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_2B3F0(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for FontGlyphVariant();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v79 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_4890(&qword_816B0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v80 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v78 = (uint64_t)&v66 - v11;
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v66 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  unint64_t v16 = *(void **)v1;
  int64_t v17 = *(void *)(*(void *)v1 + 16);
  int64_t v18 = v17 + v15;
  if (__OFADD__(v17, v15))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v2 = v5;
  size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v1 = v16;
  uint64_t v81 = v4;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v20 = v16[3] >> 1, v20 < v18))
  {
    if (v17 <= v18) {
      int64_t v21 = v17 + v15;
    }
    else {
      int64_t v21 = v17;
    }
    unint64_t v16 = (void *)sub_2BC80(isUniquelyReferenced_nonNull_native, v21, 1, v16);
    *(void *)uint64_t v1 = v16;
    int64_t v20 = v16[3] >> 1;
  }
  uint64_t v22 = v16[2];
  int64_t v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  int64_t v18 = *(void *)(v5 + 72);
  int64_t v23 = v20 - v22;
  uint64_t v24 = sub_2CCA8(&v82, (uint64_t)v16 + v17 + v18 * v22, v20 - v22, a1);
  if (v24 < v15) {
    goto LABEL_17;
  }
  if (v24)
  {
    uint64_t v26 = v16[2];
    BOOL v27 = __OFADD__(v26, v24);
    uint64_t v28 = v26 + v24;
    if (v27)
    {
      __break(1u);
      goto LABEL_22;
    }
    v16[2] = v28;
  }
  if (v24 == v23)
  {
LABEL_18:
    int64_t v68 = v16[2];
    uint64_t v25 = v82;
    int64_t v23 = v85;
    uint64_t v76 = v83;
    uint64_t v77 = v84;
    if (v86)
    {
      unint64_t v75 = (v86 - 1) & v86;
      unint64_t v30 = __clz(__rbit64(v86)) | (v85 << 6);
      uint64_t v31 = v81;
LABEL_20:
      uint64_t v32 = v25;
      sub_20B5C(*(void *)(v25 + 48) + v30 * v18, (uint64_t)v14);
      uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v70(v14, 0, 1, v31);
      uint64_t v15 = v23;
      goto LABEL_44;
    }
LABEL_22:
    int64_t v33 = v23 + 1;
    uint64_t v31 = v81;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_42:
      uint64_t v31 = v81;
      uint64_t v25 = v12;
    }
    else
    {
      int64_t v34 = (unint64_t)(v77 + 64) >> 6;
      uint64_t v15 = v23;
      if (v33 < v34)
      {
        unint64_t v35 = *(void *)(v76 + 8 * v33);
        if (v35)
        {
LABEL_25:
          unint64_t v75 = (v35 - 1) & v35;
          unint64_t v30 = __clz(__rbit64(v35)) + (v33 << 6);
          int64_t v23 = v33;
          goto LABEL_20;
        }
        int64_t v36 = v23 + 2;
        uint64_t v15 = v23 + 1;
        if (v23 + 2 < v34)
        {
          uint64_t v12 = v25;
          unint64_t v35 = *(void *)(v76 + 8 * v36);
          if (v35)
          {
LABEL_28:
            int64_t v33 = v36;
LABEL_29:
            uint64_t v31 = v81;
            goto LABEL_25;
          }
          uint64_t v15 = v23 + 2;
          uint64_t v31 = v81;
          if (v23 + 3 < v34)
          {
            unint64_t v35 = *(void *)(v76 + 8 * (v23 + 3));
            if (v35)
            {
              int64_t v33 = v23 + 3;
              goto LABEL_29;
            }
            int64_t v36 = v23 + 4;
            uint64_t v15 = v23 + 3;
            uint64_t v31 = v81;
            if (v23 + 4 < v34)
            {
              unint64_t v35 = *(void *)(v76 + 8 * v36);
              if (v35) {
                goto LABEL_28;
              }
              int64_t v33 = v23 + 5;
              uint64_t v15 = v23 + 4;
              uint64_t v31 = v81;
              if (v23 + 5 < v34)
              {
                unint64_t v35 = *(void *)(v76 + 8 * v33);
                if (v35) {
                  goto LABEL_25;
                }
                uint64_t v15 = v34 - 1;
                int64_t v37 = v23 + 6;
                do
                {
                  if (v34 == v37) {
                    goto LABEL_42;
                  }
                  unint64_t v35 = *(void *)(v76 + 8 * v37++);
                }
                while (!v35);
                int64_t v33 = v37 - 1;
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
    uint64_t v32 = v25;
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v70(v14, 1, 1, v31);
    unint64_t v75 = 0;
LABEL_44:
    uint64_t v38 = v32;
    uint64_t v82 = v32;
    uint64_t v83 = v76;
    uint64_t v84 = v77;
    int64_t v85 = v15;
    uint64_t v71 = v15;
    unint64_t v86 = v75;
    uint64_t v39 = v78;
    sub_A85C((uint64_t)v14, v78, &qword_816B0);
    uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    if (v74(v39, 1, v31) == 1)
    {
      uint64_t v40 = v78;
LABEL_46:
      sub_A8C0((uint64_t)v14, &qword_816B0);
      sub_A588();
      return sub_A8C0(v40, &qword_816B0);
    }
    uint64_t v69 = v5 + 56;
    uint64_t v40 = v78;
    int64_t v41 = v68;
    while (1)
    {
      uint64_t v67 = v38;
      sub_A8C0(v40, &qword_816B0);
      Swift::Int v42 = *(void **)v1;
      unint64_t v43 = *(void *)(*(void *)v1 + 24);
      int64_t v44 = v43 >> 1;
      int64_t v68 = v41;
      if ((uint64_t)(v43 >> 1) < v41 + 1)
      {
        Swift::Int v42 = (void *)sub_2BC80(v43 > 1, v41 + 1, 1, v42);
        *(void *)uint64_t v1 = v42;
        int64_t v44 = v42[3] >> 1;
      }
      uint64_t v45 = v80;
      sub_A85C((uint64_t)v14, v80, &qword_816B0);
      if (v74(v45, 1, v81) == 1)
      {
        uint64_t v46 = v45;
        uint64_t v38 = v67;
        int64_t v41 = v68;
LABEL_87:
        sub_A8C0(v46, &qword_816B0);
        uint64_t v40 = v78;
        goto LABEL_49;
      }
      uint64_t v72 = (char *)v42 + v17;
      uint64_t v47 = v79;
      sub_2EB2C(v45, v79);
      uint64_t v38 = v67;
      BOOL v48 = v68 < v44;
      int64_t v49 = v68 <= v44 ? v44 : v68;
      int64_t v73 = v49;
      uint64_t v50 = v47;
      int64_t v51 = v68;
      if (v48) {
        break;
      }
LABEL_48:
      sub_20BC0(v50);
      int64_t v41 = v73;
      uint64_t v40 = v78;
LABEL_49:
      *(void *)(*(void *)v1 + 16) = v41;
      sub_A85C((uint64_t)v14, v40, &qword_816B0);
      if (v74(v40, 1, v81) == 1) {
        goto LABEL_46;
      }
    }
    while (1)
    {
      sub_A8C0((uint64_t)v14, &qword_816B0);
      uint64_t result = sub_2EB2C(v50, (uint64_t)&v72[v51 * v18]);
      uint64_t v52 = v82;
      int64_t v53 = v85;
      uint64_t v76 = v83;
      uint64_t v77 = v84;
      if (v86) {
        break;
      }
      int64_t v58 = v85 + 1;
      if (__OFADD__(v85, 1))
      {
        __break(1u);
        return result;
      }
      int64_t v59 = (unint64_t)(v77 + 64) >> 6;
      int64_t v60 = v85;
      if (v58 < v59)
      {
        unint64_t v61 = *(void *)(v76 + 8 * v58);
        if (v61) {
          goto LABEL_65;
        }
        int64_t v60 = v85 + 1;
        if (v85 + 2 < v59)
        {
          unint64_t v61 = *(void *)(v76 + 8 * (v85 + 2));
          if (v61)
          {
            int64_t v58 = v85 + 2;
            goto LABEL_65;
          }
          int64_t v60 = v85 + 2;
          if (v85 + 3 < v59)
          {
            unint64_t v61 = *(void *)(v76 + 8 * (v85 + 3));
            if (v61)
            {
              int64_t v58 = v85 + 3;
              goto LABEL_65;
            }
            int64_t v60 = v85 + 3;
            if (v85 + 4 < v59)
            {
              unint64_t v61 = *(void *)(v76 + 8 * (v85 + 4));
              if (v61)
              {
                int64_t v58 = v85 + 4;
LABEL_65:
                uint64_t v54 = v51;
                unint64_t v75 = (v61 - 1) & v61;
                unint64_t v55 = __clz(__rbit64(v61)) + (v58 << 6);
                int64_t v53 = v58;
LABEL_61:
                sub_20B5C(*(void *)(v82 + 48) + v55 * v18, (uint64_t)v14);
                uint64_t v56 = v81;
                v70(v14, 0, 1, v81);
                int64_t v57 = v53;
                uint64_t v50 = v79;
                goto LABEL_83;
              }
              int64_t v58 = v85 + 5;
              int64_t v60 = v85 + 4;
              uint64_t v50 = v79;
              if (v85 + 5 < v59)
              {
                unint64_t v61 = *(void *)(v76 + 8 * v58);
                if (v61) {
                  goto LABEL_65;
                }
                int64_t v62 = v85 + 6;
                while (v59 != v62)
                {
                  unint64_t v61 = *(void *)(v76 + 8 * v62++);
                  if (v61)
                  {
                    int64_t v58 = v62 - 1;
                    goto LABEL_65;
                  }
                }
                uint64_t v50 = v79;
                int64_t v60 = v59 - 1;
              }
            }
          }
        }
      }
      uint64_t v54 = v51;
      uint64_t v56 = v81;
      int64_t v63 = v60;
      v70(v14, 1, 1, v81);
      int64_t v57 = v63;
      unint64_t v75 = 0;
LABEL_83:
      uint64_t v64 = v54 + 1;
      uint64_t v38 = v52;
      uint64_t v82 = v52;
      uint64_t v83 = v76;
      uint64_t v84 = v77;
      int64_t v85 = v57;
      uint64_t v71 = v57;
      unint64_t v86 = v75;
      uint64_t v65 = v80;
      sub_A85C((uint64_t)v14, v80, &qword_816B0);
      if (v74(v65, 1, v56) == 1)
      {
        int64_t v41 = v64;
        uint64_t v46 = v65;
        goto LABEL_87;
      }
      sub_2EB2C(v65, v50);
      int64_t v51 = v64;
      if (v64 == v73) {
        goto LABEL_48;
      }
    }
    uint64_t v54 = v51;
    unint64_t v75 = (v86 - 1) & v86;
    unint64_t v55 = __clz(__rbit64(v86)) | (v85 << 6);
    goto LABEL_61;
  }
  return sub_A588();
}

size_t sub_2BC80(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_4890(&qword_816A8);
  uint64_t v10 = *(void *)(type metadata accessor for FontGlyphVariant() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for FontGlyphVariant() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *sub_2BE54(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81698);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_2BF58(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_4890(&qword_81160);
  char v37 = a2;
  uint64_t v6 = sub_68650();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v35 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        if (__OFADD__(v13++, 1)) {
          goto LABEL_38;
        }
        if (v13 >= v34)
        {
LABEL_31:
          swift_release();
          uint64_t v3 = v2;
          if (v37)
          {
            uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
            if (v33 >= 64) {
              bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *unint64_t v35 = -1 << v33;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        unint64_t v22 = v35[v13];
        if (!v22)
        {
          int64_t v23 = v13 + 1;
          if (v13 + 1 >= v34) {
            goto LABEL_31;
          }
          unint64_t v22 = v35[v23];
          if (!v22)
          {
            while (1)
            {
              int64_t v13 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                break;
              }
              if (v13 >= v34) {
                goto LABEL_31;
              }
              unint64_t v22 = v35[v13];
              ++v23;
              if (v22) {
                goto LABEL_20;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v13;
        }
LABEL_20:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v24 = *(void *)(v5 + 48) + 24 * v20;
      uint64_t v25 = *(void *)v24;
      uint64_t v26 = *(void *)(v24 + 8);
      char v27 = *(unsigned char *)(v24 + 16);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((v37 & 1) == 0)
      {
        sub_FBA8(*(void *)v24, *(void *)(v24 + 8), *(unsigned char *)(v24 + 16));
        swift_bridgeObjectRetain();
      }
      sub_1192C();
      uint64_t result = sub_68130();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v31 = v16 == v30;
          if (v16 == v30) {
            unint64_t v16 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v11 + 8 * v16);
        }
        while (v32 == -1);
        unint64_t v17 = __clz(__rbit64(~v32)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
      *(void *)uint64_t v18 = v25;
      *(void *)(v18 + 8) = v26;
      *(unsigned char *)(v18 + 16) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_2C268(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_4890(&qword_816A0);
  char v36 = a2;
  uint64_t v6 = sub_68650();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_687F0();
    sub_681E0();
    uint64_t result = sub_68830();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_2C580(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_2D1F4();
  if (!v10) {
    goto LABEL_23;
  }
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v10;
  uint64_t v14 = v9 & 1;
  unint64_t v15 = (void *)*a5;
  unint64_t v17 = sub_18CB8(v7, v8, v9 & 1);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v21 = v16;
  if (v15[3] >= v20)
  {
    if (a4)
    {
      int64_t v24 = (void *)*a5;
      if (v16) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_2C904();
      int64_t v24 = (void *)*a5;
      if (v21) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    uint64_t v28 = v24[6] + 24 * v17;
    *(void *)uint64_t v28 = v11;
    *(void *)(v28 + 8) = v12;
    *(unsigned char *)(v28 + 16) = v14 != 0;
    *(void *)(v24[7] + 8 * v17) = v13;
    uint64_t v29 = v24[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    void v24[2] = v31;
LABEL_13:
    uint64_t v32 = sub_2D1F4();
    if (v35)
    {
      uint64_t v36 = v32;
      uint64_t v37 = v33;
      uint64_t v38 = v35;
      do
      {
        uint64_t v44 = v34 & 1;
        uint64_t v45 = (void *)*a5;
        unint64_t v46 = sub_18CB8(v36, v37, v34 & 1);
        uint64_t v48 = v45[2];
        BOOL v49 = (v47 & 1) == 0;
        BOOL v30 = __OFADD__(v48, v49);
        uint64_t v50 = v48 + v49;
        if (v30) {
          goto LABEL_24;
        }
        char v51 = v47;
        if (v45[3] < v50)
        {
          sub_2BF58(v50, 1);
          unint64_t v46 = sub_18CB8(v36, v37, v44);
          if ((v51 & 1) != (v52 & 1)) {
            goto LABEL_26;
          }
        }
        int64_t v53 = (void *)*a5;
        if (v51)
        {
          uint64_t v39 = 8 * v46;
          uint64_t v40 = *(void *)(v53[7] + 8 * v46);
          swift_bridgeObjectRetain();
          uint64_t v41 = sub_2743C(v38, v40);
          sub_FFE0(v36, v37, v44);
          *(void *)(v53[7] + v39) = v41;
          swift_bridgeObjectRelease();
        }
        else
        {
          v53[(v46 >> 6) + 8] |= 1 << v46;
          uint64_t v54 = v53[6] + 24 * v46;
          *(void *)uint64_t v54 = v36;
          *(void *)(v54 + 8) = v37;
          *(unsigned char *)(v54 + 16) = v44 != 0;
          *(void *)(v53[7] + 8 * v46) = v38;
          uint64_t v55 = v53[2];
          BOOL v30 = __OFADD__(v55, 1);
          uint64_t v56 = v55 + 1;
          if (v30) {
            goto LABEL_25;
          }
          v53[2] = v56;
        }
        uint64_t v36 = sub_2D1F4();
        uint64_t v37 = v42;
        uint64_t v38 = v43;
      }
      while (v43);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    sub_A588();
    return swift_release();
  }
  sub_2BF58(v20, a4 & 1);
  unint64_t v22 = sub_18CB8(v11, v12, v14);
  if ((v21 & 1) == (v23 & 1))
  {
    unint64_t v17 = v22;
    int64_t v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v25 = 8 * v17;
    uint64_t v26 = *(void *)(v24[7] + v25);
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_2743C(v13, v26);
    sub_FFE0(v11, v12, v14);
    *(void *)(v24[7] + v25) = v27;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_26:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = sub_687C0();
  __break(1u);
  return result;
}

void *sub_2C904()
{
  uint64_t v1 = v0;
  sub_4890(&qword_81160);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_68640();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    if (!v25) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    uint64_t v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    uint64_t v23 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v23 = *(void *)v17;
    *(void *)(v23 + 8) = v19;
    *(unsigned char *)(v23 + 16) = v20;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    sub_FBA8(v18, v19, v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_2CAB0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_68480();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      sub_1192C();
      do
      {
        uint64_t v9 = 24 * v6;
        uint64_t result = sub_68130();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= (uint64_t)v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(a2 + 48);
            unint64_t v14 = v13 + 24 * v3;
            unint64_t v15 = (long long *)(v13 + v9);
            if (24 * v3 < v9 || v14 >= (unint64_t)v15 + 24 || v3 != v6)
            {
              long long v16 = *v15;
              *(void *)(v14 + 16) = *((void *)v15 + 2);
              *(_OWORD *)unint64_t v14 = v16;
            }
            uint64_t v17 = *(void *)(a2 + 56);
            uint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
            {
              *uint64_t v18 = *v19;
              int64_t v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= (uint64_t)v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    char v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    char v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *char v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_2CCA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FontGlyphVariant();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 24);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(v17 - 24);
  uint64_t v33 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_20B5C(*(void *)(v35 + 48) + v29 * v25, (uint64_t)v12);
    sub_2EB2C((uint64_t)v12, (uint64_t)v15);
    uint64_t result = sub_2EB2C((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0;
      int64_t v22 = v31;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_2CF74(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = *v20;
    v11[1] = v22;
    v11[2] = v23;
    if (v13 == v10)
    {
      sub_FFF0(v21, v22);
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    sub_FFF0(v21, v22);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_2D190(void *a1)
{
  return sub_2B194(0, a1[2], 0, a1);
}

uint64_t sub_2D1A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  sub_FBA8(v3, v2, v4);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2D1F4()
{
  void (*v12)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  void v21[2];
  char v22;
  uint64_t v23;

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = *(void *)(v1 + 48) + 24 * v6;
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)(v7 + 8);
    char v10 = *(unsigned char *)(v7 + 16);
    uint64_t v11 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    int64_t v12 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v21[0] = v8;
    v21[1] = v9;
    unint64_t v22 = v10;
    uint64_t v23 = v11;
    sub_FBA8(v8, v9, v10);
    swift_bridgeObjectRetain();
    v12(&v20, v21);
    sub_FFE0(v8, v9, v10);
    swift_bridgeObjectRelease();
    return v20;
  }
  int64_t v14 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v15 = (unint64_t)(v0[2] + 64) >> 6;
    if (v14 < v15)
    {
      unint64_t v16 = v0[1];
      int64_t v17 = *(void *)(v16 + 8 * v14);
      if (v17)
      {
LABEL_7:
        uint64_t v5 = (v17 - 1) & v17;
        unint64_t v6 = __clz(__rbit64(v17)) + (v14 << 6);
        int64_t v4 = v14;
        goto LABEL_3;
      }
      unint64_t v18 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v15)
      {
        int64_t v17 = *(void *)(v16 + 8 * v18);
        if (v17)
        {
LABEL_10:
          int64_t v14 = v18;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v15)
        {
          int64_t v17 = *(void *)(v16 + 8 * (v3 + 3));
          if (v17)
          {
            int64_t v14 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v18 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v15)
          {
            int64_t v17 = *(void *)(v16 + 8 * v18);
            if (v17) {
              goto LABEL_10;
            }
            int64_t v14 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v15)
            {
              int64_t v17 = *(void *)(v16 + 8 * v14);
              if (v17) {
                goto LABEL_7;
              }
              int64_t v4 = v15 - 1;
              int64_t v19 = v3 + 6;
              while (v15 != v19)
              {
                int64_t v17 = *(void *)(v16 + 8 * v19++);
                if (v17)
                {
                  int64_t v14 = v19 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

void type metadata accessor for Key(uint64_t a1)
{
}

uint64_t sub_2D3E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a2;
  uint64_t v33 = a4;
  int64_t v28 = a1;
  uint64_t v5 = type metadata accessor for FontGlyphVariant();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = 0;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v29 = 0;
  uint64_t v30 = a3 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v31 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    unint64_t v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v16 = v15 | (v9 << 6);
LABEL_22:
    sub_20B5C(*(void *)(a3 + 48) + *(void *)(v32 + 72) * v16, (uint64_t)v8);
    uint64_t v20 = sub_60714();
    uint64_t v22 = v21;
    if (v20 == sub_60714() && v22 == v23)
    {
      swift_bridgeObjectRelease_n();
      uint64_t result = sub_20BC0((uint64_t)v8);
LABEL_5:
      *(unint64_t *)((char *)v28 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v29++, 1)) {
        goto LABEL_31;
      }
    }
    else
    {
      char v25 = sub_68790();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = sub_20BC0((uint64_t)v8);
      if (v25) {
        goto LABEL_5;
      }
    }
  }
  int64_t v17 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v17 >= v31) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v17);
  ++v9;
  if (v18) {
    goto LABEL_21;
  }
  int64_t v9 = v17 + 1;
  if (v17 + 1 >= v31) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v9);
  if (v18) {
    goto LABEL_21;
  }
  int64_t v9 = v17 + 2;
  if (v17 + 2 >= v31) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v9);
  if (v18)
  {
LABEL_21:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
    goto LABEL_22;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v31)
  {
LABEL_28:
    swift_retain();
    return sub_29D20(v28, v27, v29, a3);
  }
  unint64_t v18 = *(void *)(v30 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v31) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v30 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2D6AC(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    int64_t v9 = (char *)&v15 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    id v10 = v8;
    uint64_t v11 = sub_2D3E0((unint64_t *)v9, v6, a1, (uint64_t)v10);
    swift_release();

    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, 8 * v6);
    id v13 = v8;
    uint64_t v11 = sub_2D3E0((unint64_t *)v12, v6, a1, (uint64_t)v13);
    swift_release();

    swift_slowDealloc();
  }
  return v11;
}

unint64_t sub_2D860()
{
  unint64_t result = qword_81458;
  if (!qword_81458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81458);
  }
  return result;
}

uint64_t sub_2D8B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_2D8FC(void *a1)
{
  uint64_t v3 = sub_4890(&qword_816D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (id)a1[4];
  sub_B698(a1, a1[3]);
  sub_2D860();
  sub_68840();
  if (!v1)
  {
    LOBYTE(v15) = 0;
    sub_22768();
    sub_686E0();
    uint64_t v9 = v14[0];
    unint64_t v8 = v14[1];
    sub_2281C(0, &qword_81370);
    sub_683B0();
    uint64_t v12 = v9;
    unint64_t v13 = v8;
    if (v14[3])
    {
      sub_2281C(0, &qword_81388);
      if (swift_dynamicCast())
      {
        id v11 = v15;
LABEL_10:
        type metadata accessor for _NSRange(0);
        LOBYTE(v15) = 1;
        sub_2D8B4(&qword_816E0, type metadata accessor for _NSRange);
        id v7 = v11;
        sub_686E0();
        sub_4890(&qword_81468);
        LOBYTE(v15) = 2;
        sub_2EB90(&qword_816E8, &qword_816F0);
        sub_686E0();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        sub_22710(v12, v13);
        swift_bridgeObjectRetain();
        sub_13338((uint64_t)a1);
        swift_bridgeObjectRelease();

        return v7;
      }
    }
    else
    {
      sub_A8C0((uint64_t)v14, &qword_81378);
    }
    id v11 = (id)*sub_605AC();
    goto LABEL_10;
  }
  sub_13338((uint64_t)a1);
  return v7;
}

void *sub_2DCC8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = sub_68630())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0 ? (id)sub_68560() : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if (sub_60714() == a2 && v11 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        return v9;
      }
      char v12 = sub_68790();
      swift_bridgeObjectRelease();
      if (v12) {
        goto LABEL_14;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_2DE34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyDictionarySingleton;
  }
  for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 4)
  {
    uint64_t v4 = *i;
    uint64_t v29 = *(i - 2);
    uint64_t v30 = *(i - 1);
    id v5 = (id)*(i - 3);
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_60714();
    uint64_t v8 = v7;
    unint64_t v10 = sub_8EC0(v6, v7);
    uint64_t v11 = _swiftEmptyDictionarySingleton[2];
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    char v14 = v9;
    if (_swiftEmptyDictionarySingleton[3] < v13)
    {
      sub_2C268(v13, 1);
      unint64_t v15 = sub_8EC0(v6, v8);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_19;
      }
      unint64_t v10 = v15;
    }
    if (v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = _swiftEmptyDictionarySingleton[7];
      unint64_t v18 = *(char **)(v17 + 8 * v10);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v17 + 8 * v1sub_66CA4(2, 18, 1, 0) = v18;
      uint64_t v28 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v18 = sub_2BE54(0, *((void *)v18 + 2) + 1, 1, v18);
        *(void *)(v17 + 8 * v1sub_66CA4(2, 18, 1, 0) = v18;
      }
      unint64_t v21 = *((void *)v18 + 2);
      unint64_t v20 = *((void *)v18 + 3);
      if (v21 >= v20 >> 1)
      {
        unint64_t v18 = sub_2BE54((char *)(v20 > 1), v21 + 1, 1, v18);
        *(void *)(v28 + 8 * v1sub_66CA4(2, 18, 1, 0) = v18;
      }
      *((void *)v18 + 2) = v21 + 1;
      uint64_t v3 = &v18[32 * v21];
      *((void *)v3 + 4) = v5;
      *((void *)v3 + 5) = v29;
      *((void *)v3 + 6) = v30;
      *((void *)v3 + 7) = v4;
    }
    else
    {
      sub_4890(&qword_81698);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_693E0;
      *(void *)(v22 + 32) = v5;
      *(void *)(v22 + 4sub_66CA4(2, 18, 1, 0) = v29;
      *(void *)(v22 + 48) = v30;
      *(void *)(v22 + 56) = v4;
      _swiftEmptyDictionarySingleton[(v10 >> 6) + 8] |= 1 << v10;
      uint64_t v23 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v10);
      *uint64_t v23 = v6;
      v23[1] = v8;
      *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v1sub_66CA4(2, 18, 1, 0) = v22;
      uint64_t v24 = _swiftEmptyDictionarySingleton[2];
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_18;
      }
      _swiftEmptyDictionarySingleton[2] = v26;
    }
    if (!--v1) {
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = (void *)sub_687C0();
  __break(1u);
  return result;
}

uint64_t sub_2E074(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = sub_68630())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0 ? (id)sub_68560() : *(id *)(a1 + 8 * v7);
      char v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if (sub_60714() == a2 && v11 == a3)
      {
        swift_bridgeObjectRelease();

        char v12 = 1;
        goto LABEL_18;
      }
      char v12 = sub_68790();

      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        ++v7;
        if (v10 != v6) {
          continue;
        }
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
  char v12 = 0;
LABEL_18:
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_2E1CC(uint64_t a1)
{
  return a1;
}

unint64_t sub_2E1F8()
{
  unint64_t result = qword_81508;
  if (!qword_81508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81508);
  }
  return result;
}

unint64_t sub_2E250()
{
  unint64_t result = qword_81510;
  if (!qword_81510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81510);
  }
  return result;
}

unint64_t sub_2E2A8()
{
  unint64_t result = qword_81518;
  if (!qword_81518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81518);
  }
  return result;
}

uint64_t destroy for RangeDescriptor(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RangeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RangeDescriptor(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for FeaturePreviewConfigurationCache.Key(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for RangeDescriptor(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RangeDescriptor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RangeDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangeDescriptor()
{
  return &type metadata for RangeDescriptor;
}

uint64_t getEnumTagSinglePayload for RangeDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RangeDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2E63CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RangeDescriptor.CodingKeys()
{
  return &type metadata for RangeDescriptor.CodingKeys;
}

uint64_t sub_2E674()
{
  return type metadata accessor for TypographyPanelViewModel();
}

uint64_t type metadata accessor for TypographyPanelViewModel()
{
  uint64_t result = qword_85480;
  if (!qword_85480) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_2E6C8()
{
  sub_2E978(319, &qword_81268, (uint64_t)&type metadata for Bool, (uint64_t (*)(void, uint64_t))&type metadata accessor for Published);
  if (v0 <= 0x3F)
  {
    sub_211BC(319, &qword_81548, &qword_81488);
    if (v1 <= 0x3F)
    {
      sub_211BC(319, &qword_81550, &qword_814A0);
      if (v2 <= 0x3F)
      {
        sub_211BC(319, &qword_81558, &qword_814B8);
        if (v3 <= 0x3F)
        {
          sub_211BC(319, &qword_81560, &qword_810F0);
          if (v4 <= 0x3F)
          {
            sub_211BC(319, &qword_81568, &qword_814E0);
            if (v5 <= 0x3F)
            {
              sub_211BC(319, (unint64_t *)&unk_81570, &qword_81020);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void sub_2E978(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_2E9C4()
{
  return sub_2D8B4(&qword_81660, type metadata accessor for Key);
}

uint64_t sub_2EA0C()
{
  return sub_2D8B4(&qword_81668, type metadata accessor for Key);
}

uint64_t sub_2EA54()
{
  return sub_2D8B4(&qword_81670, type metadata accessor for CTFont);
}

uint64_t sub_2EA9C()
{
  return sub_2D8B4(&qword_81678, type metadata accessor for CTFont);
}

uint64_t sub_2EAE4()
{
  return sub_2D8B4(&qword_81680, type metadata accessor for Key);
}

uint64_t sub_2EB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FontGlyphVariant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2EB90(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(&qword_81468);
    sub_2D8B4(a2, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *sub_2EC24(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void *sub_2EC38()
{
  return &unk_6B280;
}

void sub_2EC44(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_2EC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_2EC58()
{
  return sub_2F2B0((void (*)(void))sub_2EC78);
}

unint64_t sub_2EC78()
{
  unint64_t result = qword_81710;
  if (!qword_81710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81710);
  }
  return result;
}

uint64_t sub_2ECCC(uint64_t a1)
{
  return sub_2F36C(a1, (void (*)(void))sub_2EC78);
}

uint64_t (*sub_2ECEC(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = sub_2EC78();
  sub_67790();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 17);
  return sub_2ED60;
}

uint64_t sub_2ED60(uint64_t a1)
{
  return sub_2F434(a1);
}

uint64_t sub_2ED6C()
{
  uint64_t v0 = sub_4890(&qword_81120);
  sub_14688(v0, qword_87CB8);
  uint64_t v1 = sub_13CE0(v0, (uint64_t)qword_87CB8);
  uint64_t v2 = type metadata accessor for FeaturePreviewConfiguration(0);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(v1, 1, 1, v2);
}

uint64_t sub_2EE04()
{
  if (qword_85910 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_4890(&qword_81120);
  return sub_13CE0(v0, (uint64_t)qword_87CB8);
}

uint64_t sub_2EE6C@<X0>(uint64_t a1@<X8>)
{
  if (qword_85910 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_4890(&qword_81120);
  uint64_t v3 = sub_13CE0(v2, (uint64_t)qword_87CB8);
  return sub_2EEE8(v3, a1);
}

uint64_t sub_2EEE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4890(&qword_81120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2EF54()
{
  sub_2EF9C();
  return sub_67790();
}

unint64_t sub_2EF9C()
{
  unint64_t result = qword_81718;
  if (!qword_81718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81718);
  }
  return result;
}

uint64_t sub_2EFF0(uint64_t a1)
{
  uint64_t v2 = sub_4890(&qword_81120);
  __chkstk_darwin(v2 - 8);
  sub_2EEE8(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2EF9C();
  sub_677A0();
  return sub_2F094(a1);
}

uint64_t sub_2F094(uint64_t a1)
{
  uint64_t v2 = sub_4890(&qword_81120);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*sub_2F0F4(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  size_t v4 = *(void *)(*(void *)(sub_4890(&qword_81120) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  v3[4] = sub_2EF9C();
  sub_67790();
  return sub_2F1B4;
}

void sub_2F1B4(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  sub_2EEE8((*a1)[3], (*a1)[2]);
  size_t v4 = (void *)v3[3];
  uint64_t v5 = (void *)v3[1];
  uint64_t v6 = (void *)v3[2];
  if (a2)
  {
    sub_2EEE8(v3[2], v3[1]);
    sub_677A0();
    sub_2F094((uint64_t)v6);
  }
  else
  {
    sub_677A0();
  }
  sub_2F094((uint64_t)v4);
  free(v4);
  free(v6);
  free(v5);
  free(v3);
}

void *sub_2F284()
{
  return &unk_6B281;
}

uint64_t sub_2F290()
{
  return sub_2F2B0((void (*)(void))sub_2F2F8);
}

uint64_t sub_2F2B0(void (*a1)(void))
{
  a1();
  sub_67790();
  return v2;
}

unint64_t sub_2F2F8()
{
  unint64_t result = qword_81720;
  if (!qword_81720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81720);
  }
  return result;
}

uint64_t sub_2F34C(uint64_t a1)
{
  return sub_2F36C(a1, (void (*)(void))sub_2F2F8);
}

uint64_t sub_2F36C(uint64_t a1, void (*a2)(void))
{
  return sub_677A0();
}

uint64_t (*sub_2F3B4(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = sub_2F2F8();
  sub_67790();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 17);
  return sub_2F428;
}

uint64_t sub_2F428(uint64_t a1)
{
  return sub_2F434(a1);
}

uint64_t sub_2F434(uint64_t a1)
{
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 16);
  return sub_677A0();
}

uint64_t sub_2F464()
{
  return swift_release();
}

uint64_t sub_2F4D8@<X0>(unsigned char *a1@<X8>)
{
  sub_2EC78();
  uint64_t result = sub_67790();
  *a1 = v3;
  return result;
}

uint64_t sub_2F528()
{
  return sub_677A0();
}

uint64_t sub_2F574(char a1)
{
  uint64_t v2 = sub_67600();
  __chkstk_darwin(v2);
  size_t v4 = (double *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v5 = sub_316B4(a1);
  uint64_t v6 = (char *)v4 + *(int *)(v2 + 20);
  uint64_t v7 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v8 = sub_678A0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104))(v6, v7, v8);
  *size_t v4 = v5;
  v4[1] = v5;
  sub_2F69C();
  sub_67DC0();
  return sub_2F6F4((uint64_t)v4);
}

unint64_t sub_2F69C()
{
  unint64_t result = qword_81728;
  if (!qword_81728)
  {
    sub_67600();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81728);
  }
  return result;
}

uint64_t sub_2F6F4(uint64_t a1)
{
  uint64_t v2 = sub_67600();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2F750()
{
  id v0 = [self systemGroupedBackgroundColor];
  return sub_67E00();
}

uint64_t sub_2F794()
{
  uint64_t result = sub_67E50();
  qword_87CD0 = result;
  return result;
}

uint64_t *sub_2F7B4()
{
  if (qword_85918 != -1) {
    swift_once();
  }
  return &qword_87CD0;
}

uint64_t sub_2F800()
{
  return sub_2FAC0(&qword_85918);
}

uint64_t sub_2F824()
{
  id v0 = [self systemBackgroundColor];
  uint64_t result = sub_67E70();
  qword_87CD8 = result;
  return result;
}

uint64_t *sub_2F864()
{
  if (qword_85920 != -1) {
    swift_once();
  }
  return &qword_87CD8;
}

uint64_t sub_2F8B0()
{
  return sub_2FAC0(&qword_85920);
}

uint64_t sub_2F8D4()
{
  uint64_t result = sub_67E30();
  qword_87CE0 = result;
  return result;
}

uint64_t *sub_2F8F4()
{
  if (qword_85928 != -1) {
    swift_once();
  }
  return &qword_87CE0;
}

uint64_t sub_2F940()
{
  return sub_2FAC0(&qword_85928);
}

uint64_t sub_2F964(uint64_t a1)
{
  return sub_2F9FC(a1, &qword_87CE8);
}

uint64_t *sub_2F978()
{
  if (qword_85930 != -1) {
    swift_once();
  }
  return &qword_87CE8;
}

uint64_t sub_2F9C4()
{
  return sub_2FAC0(&qword_85930);
}

uint64_t sub_2F9E8(uint64_t a1)
{
  return sub_2F9FC(a1, &qword_87CF0);
}

uint64_t sub_2F9FC(uint64_t a1, uint64_t *a2)
{
  sub_67E60();
  uint64_t v3 = sub_67E40();
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t *sub_2FA50()
{
  if (qword_85938 != -1) {
    swift_once();
  }
  return &qword_87CF0;
}

uint64_t sub_2FA9C()
{
  return sub_2FAC0(qword_85938);
}

uint64_t sub_2FAC0(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  return swift_retain();
}

ValueMetadata *type metadata accessor for InternalFeaturesEnabledKey()
{
  return &type metadata for InternalFeaturesEnabledKey;
}

ValueMetadata *type metadata accessor for FeaturePreviewConfigurationKey()
{
  return &type metadata for FeaturePreviewConfigurationKey;
}

ValueMetadata *type metadata accessor for LeadingEdgePreviewKey()
{
  return &type metadata for LeadingEdgePreviewKey;
}

ValueMetadata *_s4TextOMa()
{
  return &_s4TextON;
}

ValueMetadata *_s5ShapeOMa()
{
  return &_s5ShapeON;
}

uint64_t sub_2FB5C(uint64_t a1)
{
  return sub_2FBAC(a1, &qword_80FB0, &qword_80FA8);
}

uint64_t sub_2FB84(uint64_t a1)
{
  return sub_2FBAC(a1, &qword_81730, &qword_81738);
}

uint64_t sub_2FBAC(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return swift_getWitnessTable();
}

uint64_t sub_2FC40(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  double v5 = (const UniChar *)sub_30A14(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t result = sub_681F0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    CFIndex v7 = result;
    if (result)
    {
      uint64_t v8 = (CGGlyph *)sub_68310();
      *((void *)v8 + 2) = v7;
      bzero(v8 + 16, 2 * v7);
    }
    else
    {
      uint64_t v8 = (CGGlyph *)_swiftEmptyArrayStorage;
    }
    CTFontGetGlyphsForCharacters(v2, v5 + 16, v8 + 16, v7);
    swift_release();
    uint64_t v9 = *((void *)v8 + 2);
    if (v9)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v9; ++i)
      {
        CGGlyph v13 = v8[i + 16];
        if (v13)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_9B60(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v12 = _swiftEmptyArrayStorage[2];
          unint64_t v11 = _swiftEmptyArrayStorage[3];
          if (v12 >= v11 >> 1) {
            sub_9B60((char *)(v11 > 1), v12 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v12 + 1;
          *((_WORD *)&_swiftEmptyArrayStorage[4] + v12) = v13;
        }
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_2FDD0(uint64_t a1)
{
  uint64_t v1 = (char *)a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    type metadata accessor for CGSize(0);
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_68310();
    *(void *)(v3 + 16) = v2;
    bzero((void *)(v3 + 32), 16 * v2);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v1 = sub_3091C(0, *((void *)v1 + 2), 0, v1);
  }
  swift_bridgeObjectRetain();
  CTFontTransformGlyphs();
  swift_bridgeObjectRelease();
  uint64_t v4 = *((void *)v1 + 2);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      __int16 v8 = *(_WORD *)&v1[2 * i + 32];
      if (v8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_9B60(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v7 = _swiftEmptyArrayStorage[2];
        unint64_t v6 = _swiftEmptyArrayStorage[3];
        if (v7 >= v6 >> 1) {
          sub_9B60((char *)(v6 > 1), v7 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v7 + 1;
        *((_WORD *)&_swiftEmptyArrayStorage[4] + v7) = v8;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_2FF90(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double v5 = v4;
  char v9 = a3 & 1;
  sub_4890(&qword_81740);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_6A770;
  *(void *)(inited + 32) = sub_5FD7C(a1, a2, v9);
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = v11;
  sub_5FBAC(a1, a2, v9, (uint64_t *)(inited + 48));
  *(void *)(inited + 8sub_66CA4(2, 18, 1, 0) = sub_5FDA8(a1, a2, v9);
  *(void *)(inited + 88) = v12;
  *(void *)(inited + 12sub_66CA4(2, 18, 1, 0) = &type metadata for Int;
  *(void *)(inited + 96) = a4;
  sub_3017C(inited);
  v13.super.Class isa = sub_68120().super.isa;
  swift_bridgeObjectRelease();
  char v14 = (void *)CTFontCopyGlyphCoverageForFeature();
  CFIndex GlyphCount = CTFontGetGlyphCount(v5);
  uint64_t result = sub_61DD8();
  uint64_t v17 = *(void *)(result + 16);
  if (!v17)
  {
    int64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_13:

    swift_bridgeObjectRelease();
    return (uint64_t)v19;
  }
  unint64_t v18 = (CFIndex *)(result + 32);
  int64_t v19 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    CFIndex v21 = *v18++;
    unint64_t v20 = v21;
    if (v21 >= GlyphCount) {
      goto LABEL_4;
    }
    if ((v20 & 0x8000000000000000) != 0) {
      break;
    }
    if (v20 >> 16) {
      goto LABEL_15;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_3091C(0, *((void *)v19 + 2) + 1, 1, v19);
      int64_t v19 = (char *)result;
    }
    unint64_t v23 = *((void *)v19 + 2);
    unint64_t v22 = *((void *)v19 + 3);
    if (v23 >= v22 >> 1)
    {
      uint64_t result = (uint64_t)sub_3091C((char *)(v22 > 1), v23 + 1, 1, v19);
      int64_t v19 = (char *)result;
    }
    *((void *)v19 + 2) = v23 + 1;
    *(_WORD *)&v19[2 * v23 + 32] = v20;
LABEL_4:
    if (!--v17) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_3017C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_81768);
  uint64_t v2 = sub_68660();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_311B4(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_8EC0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_2EC24(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_302A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_81760);
  uint64_t v2 = (void *)sub_68660();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_29084((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v1sub_66CA4(2, 18, 1, 0) = v6;
    *(void *)(v2[7] + v1sub_66CA4(2, 18, 1, 0) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_303B4()
{
  id v0 = (void *)CTFontCopyStringForGlyph();
  uint64_t v1 = sub_681A0();

  return v1;
}

uint64_t sub_30400()
{
  id v0 = (void *)CTFontCopyStringForGlyph();
  uint64_t v1 = sub_681A0();
  unint64_t v3 = v2;

  if (sub_681F0() == 1)
  {
    uint64_t v4 = sub_30490(v1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

uint64_t sub_30490(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return sub_68270();
  }
  else {
    return 0;
  }
}

void sub_304D8(uint64_t a1)
{
  CGRect BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs(v1, kCTFontOrientationDefault, (const CGGlyph *)(a1 + 32), 0, *(void *)(a1 + 16));
  CGFloat x = BoundingRectsForGlyphs.origin.x;
  CGFloat y = BoundingRectsForGlyphs.origin.y;
  CGFloat width = BoundingRectsForGlyphs.size.width;
  CGFloat height = BoundingRectsForGlyphs.size.height;
  CGRectGetWidth(BoundingRectsForGlyphs);
  v7.origin.CGFloat x = x;
  v7.origin.CGFloat y = y;
  v7.size.CGFloat width = width;
  v7.size.CGFloat height = height;
  CGRectGetHeight(v7);
  sub_606C0();
}

char *sub_30574(unsigned __int16 a1)
{
  if (a1 && CTFontGetGlyphCount(v1) > a1)
  {
    uint64_t v2 = (void *)CTFontCopyVariantsOfGlyph();
    id v3 = [v2 allKeys];
    uint64_t v4 = sub_682D0();

    uint64_t v5 = (char *)sub_30658(v4);
    swift_bridgeObjectRelease();
    if (v5)
    {
      CGRect v7 = v5;
      swift_bridgeObjectRetain();
      sub_90BC(&v7);
      swift_bridgeObjectRelease();

      return v7;
    }
  }
  return 0;
}

void *sub_30658(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  sub_9B60(0, v2, 0);
  id v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_1462C(i, (uint64_t)v9);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_9B60(0, v3[2] + 1, 1);
        id v3 = v10;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_9B60((char *)(v5 > 1), v6 + 1, 1);
        id v3 = v10;
      }
      v3[2] = v6 + 1;
      *((_WORD *)v3 + v6 + 16) = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    return 0;
  }
  return v3;
}

uint64_t sub_30798()
{
  NSString v1 = sub_68170();
  sub_4890(&qword_81748);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  *(void *)(inited + 32) = NSFontAttributeName;
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = v0;
  id v3 = NSFontAttributeName;
  v0;
  sub_302A8(inited);
  type metadata accessor for Key(0);
  type metadata accessor for CTFont(0);
  sub_3104C(&qword_81448, type metadata accessor for Key);
  Class isa = sub_68120().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v5 = (const __CTLine *)CTLineCreateWithString();

  CFArrayRef v6 = CTLineGetGlyphRuns(v5);
  type metadata accessor for CTRun(0);
  sub_682C0();

  return 0;
}

char *sub_3091C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80D40);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 2 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_30A14(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_5;
  }
  uint64_t v4 = sub_68250();
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    char v5 = sub_30E34(v4, 0);
    swift_bridgeObjectRetain();
    unint64_t v2 = sub_30B10((uint64_t)v7, (uint64_t)(v5 + 4), v4, a1, v2);
    swift_bridgeObjectRelease();
    if (v2 == v4) {
      break;
    }
    __break(1u);
LABEL_5:
    uint64_t v4 = sub_68240();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CTRun(uint64_t a1)
{
}

uint64_t sub_30B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (!a2)
  {
    uint64_t v11 = 0;
    __int16 v12 = 0;
    a3 = 0;
    char v15 = 1;
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  if (!a3)
  {
    uint64_t v11 = 0;
    __int16 v12 = 0;
    char v15 = 1;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
    __break(1u);
    JUMPOUT(0x30E14);
  }
  uint64_t v11 = 0;
  __int16 v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = a5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v27 = a1;
  char v15 = 1;
  while (1)
  {
    if ((v15 & 1) == 0)
    {
      char v15 = 1;
      LOWORD(v16) = v12;
      __int16 v12 = 0;
      goto LABEL_9;
    }
    if (v11 >= v8) {
      break;
    }
    if ((a5 & 0x1000000000000000) != 0)
    {
      uint64_t v21 = v14;
      unsigned int v22 = sub_68530();
      uint64_t v14 = v21;
      unsigned int v16 = v22;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        uint64_t v17 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          uint64_t v25 = v14;
          uint64_t v17 = sub_68590();
          uint64_t v14 = v25;
        }
        unsigned int v16 = *(unsigned __int8 *)(v17 + v11);
        if (*(char *)(v17 + v11) < 0)
        {
          switch(__clz(v16 ^ 0xFF))
          {
            case 0x1Au:
              LOWORD(v16) = *(unsigned char *)(v11 + v17 + 1) & 0x3F | ((v16 & 0x1F) << 6);
              uint64_t v18 = 2;
              goto LABEL_18;
            case 0x1Bu:
              LOWORD(v16) = ((v16 & 0xF) << 12) | ((*(unsigned char *)(v11 + v17 + 1) & 0x3F) << 6) | *(unsigned char *)(v11 + v17 + 2) & 0x3F;
              uint64_t v18 = 3;
              goto LABEL_18;
            case 0x1Cu:
              unint64_t v20 = (char *)(v11 + v17);
              goto LABEL_29;
            default:
              break;
          }
        }
        uint64_t v18 = 1;
LABEL_18:
        v11 += v18;
        char v15 = 1;
        goto LABEL_9;
      }
      v28[0] = a4;
      v28[1] = v14;
      unsigned int v16 = *((unsigned __int8 *)v28 + v11);
      if (*((char *)v28 + v11) < 0)
      {
        switch(__clz(v16 ^ 0xFF))
        {
          case 0x1Au:
            unsigned int v16 = *((unsigned char *)v28 + v11 + 1) & 0x3F | ((v16 & 0x1F) << 6);
            uint64_t v19 = 2;
            break;
          case 0x1Bu:
            unsigned int v16 = ((v16 & 0xF) << 12) | ((*((unsigned char *)v28 + v11 + 1) & 0x3F) << 6) | *((unsigned char *)v28 + v11 + 2) & 0x3F;
            uint64_t v19 = 3;
            break;
          case 0x1Cu:
            unint64_t v20 = (char *)v28 + v11;
LABEL_29:
            unsigned int v16 = ((v16 & 0xF) << 18) | ((v20[1] & 0x3F) << 12) | ((v20[2] & 0x3F) << 6) | v20[3] & 0x3F;
            uint64_t v19 = 4;
            break;
          default:
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        uint64_t v19 = 1;
      }
    }
    v11 += v19;
    if (HIWORD(v16))
    {
      uint64_t v23 = v14;
      __int16 v12 = sub_68860();
      __int16 v24 = sub_68860();
      uint64_t v14 = v23;
      LOWORD(v16) = v24;
      char v15 = 0;
    }
    else
    {
      char v15 = 1;
    }
LABEL_9:
    *(_WORD *)(a2 + 2 * v13++) = v16;
    if (a3 == v13) {
      goto LABEL_37;
    }
  }
  char v15 = 1;
  a3 = v13;
LABEL_37:
  a1 = v27;
LABEL_38:
  swift_bridgeObjectRelease();
LABEL_39:
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 34) = v15;
  return a3;
}

void *sub_30E34(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_4890(&qword_80D40);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = j__malloc_size(v4);
  int64_t v6 = v5 - 32;
  if (v5 < 32) {
    int64_t v6 = v5 - 31;
  }
  void v4[2] = a1;
  v4[3] = v6 & 0xFFFFFFFFFFFFFFFELL;
  return v4;
}

uint64_t sub_30EA8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = sub_68630())
  {
    type metadata accessor for CTFont(0);
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)sub_68560() : *(id *)(a1 + 8 * v3);
      int64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      id v7 = (id)CTRunGetFont();
      sub_3104C(&qword_81480, type metadata accessor for CTFont);
      char v8 = sub_67300();

      if (v8)
      {
        ++v3;
        if (v6 != v2) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  char v8 = 1;
LABEL_14:
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_31004()
{
  return sub_3104C(&qword_81660, type metadata accessor for Key);
}

uint64_t sub_3104C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_31094()
{
  return sub_3104C(&qword_81668, type metadata accessor for Key);
}

uint64_t sub_310DC()
{
  return sub_3104C(&qword_81670, type metadata accessor for CTFont);
}

uint64_t sub_31124()
{
  return sub_3104C(&qword_81678, type metadata accessor for CTFont);
}

uint64_t sub_3116C()
{
  return sub_3104C(&qword_81680, type metadata accessor for Key);
}

uint64_t sub_311B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4890(&qword_81770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_3121C()
{
  type metadata accessor for TypographyPanelViewModel();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = [self bundleForClass:ObjCClassFromMetadata];
  qword_85F58 = (uint64_t)result;
  return result;
}

uint64_t sub_31274(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (qword_85F50 != -1) {
    swift_once();
  }
  v7.super.Class isa = (Class)qword_85F58;
  v9._countAndFlagsBits = a4;
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  v11.value._countAndFlagsBits = 0;
  v11.value._object = 0;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  return sub_67250(v10, v11, v7, v12, v9);
}

void *sub_3130C()
{
  return &unk_7B168;
}

unint64_t sub_31318()
{
  return 0xD000000000000026;
}

void sub_31334()
{
  qword_87CF8 = 0x4046000000000000;
}

uint64_t *sub_31344()
{
  if (qword_85F60 != -1) {
    swift_once();
  }
  return &qword_87CF8;
}

double sub_31390()
{
  return sub_321E8(&qword_85F60, (uint64_t)&qword_87CF8);
}

uint64_t sub_313B4()
{
  if (qword_85F78 != -1) {
    uint64_t result = swift_once();
  }
  qword_87D00 = qword_87D18;
  byte_87D08 = 0;
  return result;
}

uint64_t *sub_31410()
{
  if (qword_85F78 != -1) {
    swift_once();
  }
  return &qword_87D18;
}

uint64_t *sub_3145C()
{
  if (qword_85F68 != -1) {
    swift_once();
  }
  return &qword_87D00;
}

uint64_t sub_314A8()
{
  if (qword_85F68 != -1) {
    swift_once();
  }
  return qword_87D00;
}

void sub_314FC()
{
  qword_87D10 = 0x4030000000000000;
}

uint64_t *sub_3150C()
{
  if (qword_85F70 != -1) {
    swift_once();
  }
  return &qword_87D10;
}

double sub_31558()
{
  return sub_321E8(&qword_85F70, (uint64_t)&qword_87D10);
}

void sub_3157C()
{
  qword_87D18 = 0x4024000000000000;
}

double sub_3158C()
{
  return sub_321E8(&qword_85F78, (uint64_t)&qword_87D18);
}

void sub_315B0()
{
  qword_87D20 = 0x401C000000000000;
}

uint64_t *sub_315C0()
{
  if (qword_85F80 != -1) {
    swift_once();
  }
  return &qword_87D20;
}

double sub_3160C()
{
  return sub_321E8(&qword_85F80, (uint64_t)&qword_87D20);
}

void sub_31630()
{
  qword_87D28 = 0x4008000000000000;
}

uint64_t *sub_31640()
{
  if (qword_85F88 != -1) {
    swift_once();
  }
  return &qword_87D28;
}

double sub_3168C()
{
  return sub_321E8(&qword_85F88, (uint64_t)&qword_87D28);
}

double sub_316B4(char a1)
{
  return dbl_6B7A8[a1];
}

BOOL sub_316C8(char *a1, char *a2)
{
  return sub_316D4(*a1, *a2);
}

BOOL sub_316D4(char a1, char a2)
{
  return dbl_6B7A8[a1] == dbl_6B7A8[a2];
}

Swift::Int sub_316F8()
{
  return sub_31748(0, *v0);
}

void sub_31704(uint64_t a1)
{
  sub_3170C(a1, *v1);
}

void sub_3170C(uint64_t a1, char a2)
{
}

Swift::Int sub_31740(uint64_t a1)
{
  return sub_31748(a1, *v1);
}

Swift::Int sub_31748(uint64_t a1, char a2)
{
  return sub_68830();
}

Swift::Int sub_31798(uint64_t a1, char a2)
{
  sub_687F0();
  if (a2) {
    Swift::UInt64 v3 = 0x4051800000000000;
  }
  else {
    Swift::UInt64 v3 = 0x4059000000000000;
  }
  sub_68820(v3);
  return sub_68830();
}

uint64_t sub_317EC@<X0>(double *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_32224(*a1);
  *a2 = result;
  return result;
}

double sub_31818@<D0>(double *a1@<X8>)
{
  double result = dbl_6B7A8[*v1];
  *a1 = result;
  return result;
}

void sub_31830()
{
  qword_87D30 = 0x4032000000000000;
}

uint64_t *sub_31840()
{
  if (qword_85F90 != -1) {
    swift_once();
  }
  return &qword_87D30;
}

double sub_3188C()
{
  return sub_321E8(&qword_85F90, (uint64_t)&qword_87D30);
}

void sub_318B0()
{
  qword_87D38 = 0x402A000000000000;
}

uint64_t *sub_318C0()
{
  if (qword_85F98 != -1) {
    swift_once();
  }
  return &qword_87D38;
}

double sub_3190C()
{
  return sub_321E8(&qword_85F98, (uint64_t)&qword_87D38);
}

void sub_31930()
{
  qword_87D40 = 0x4032000000000000;
}

uint64_t *sub_31940()
{
  if (qword_85FA0 != -1) {
    swift_once();
  }
  return &qword_87D40;
}

double sub_3198C()
{
  return sub_321E8(&qword_85FA0, (uint64_t)&qword_87D40);
}

void sub_319B0()
{
  qword_87D48 = 0x4014000000000000;
}

uint64_t *sub_319C0()
{
  if (qword_85FA8 != -1) {
    swift_once();
  }
  return &qword_87D48;
}

double sub_31A0C()
{
  return sub_321E8(&qword_85FA8, (uint64_t)&qword_87D48);
}

uint64_t sub_31A30(double a1)
{
  if (a1 == 70.0) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 100.0) {
    return 0;
  }
  else {
    return v1;
  }
}

double sub_31A5C(char a1)
{
  double result = 70.0;
  if ((a1 & 1) == 0) {
    return 100.0;
  }
  return result;
}

BOOL sub_31A7C(unsigned char *a1, unsigned char *a2)
{
  double v2 = 100.0;
  if (*a1) {
    double v3 = 70.0;
  }
  else {
    double v3 = 100.0;
  }
  if (*a2) {
    double v2 = 70.0;
  }
  return v3 == v2;
}

Swift::Int sub_31AB4()
{
  return sub_31798(0, *v0);
}

void sub_31AC0()
{
  if (*v0) {
    Swift::UInt64 v1 = 0x4051800000000000;
  }
  else {
    Swift::UInt64 v1 = 0x4059000000000000;
  }
  sub_68820(v1);
}

Swift::Int sub_31B00(uint64_t a1)
{
  return sub_31798(a1, *v1);
}

double *sub_31B08@<X0>(double *result@<X0>, char *a2@<X8>)
{
  if (*result == 70.0) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 100.0) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void sub_31B3C(double *a1@<X8>)
{
  double v2 = 100.0;
  if (*v1) {
    double v2 = 70.0;
  }
  *a1 = v2;
}

void sub_31B64()
{
  qword_87D50 = 0x404A000000000000;
}

uint64_t *sub_31B74()
{
  if (qword_85FB0 != -1) {
    swift_once();
  }
  return &qword_87D50;
}

double sub_31BC0()
{
  return sub_321E8(&qword_85FB0, (uint64_t)&qword_87D50);
}

void sub_31BE4()
{
  qword_87D58 = 0x4036000000000000;
}

uint64_t *sub_31BF4()
{
  if (qword_85FB8 != -1) {
    swift_once();
  }
  return &qword_87D58;
}

double sub_31C40()
{
  return sub_321E8(&qword_85FB8, (uint64_t)&qword_87D58);
}

void sub_31C64()
{
  qword_87D60 = 0x4030000000000000;
}

uint64_t *sub_31C74()
{
  if (qword_85FC0 != -1) {
    swift_once();
  }
  return &qword_87D60;
}

double sub_31CC0()
{
  return sub_321E8(&qword_85FC0, (uint64_t)&qword_87D60);
}

double sub_31CE4()
{
  if (qword_85FB0 != -1) {
    swift_once();
  }
  double v0 = *(double *)&qword_87D50;
  if (qword_85FC0 != -1) {
    swift_once();
  }
  double result = (v0 - *(double *)&qword_87D60) * 0.5 + 2.0;
  *(double *)&qword_87D68 = result;
  return result;
}

uint64_t *sub_31D8C()
{
  if (qword_85FC8 != -1) {
    swift_once();
  }
  return &qword_87D68;
}

double sub_31DD8()
{
  return sub_321E8(&qword_85FC8, (uint64_t)&qword_87D68);
}

void sub_31DFC()
{
  qword_87D70 = 0x4014000000000000;
}

uint64_t *sub_31E0C()
{
  if (qword_85FD0 != -1) {
    swift_once();
  }
  return &qword_87D70;
}

double sub_31E58()
{
  return sub_321E8(&qword_85FD0, (uint64_t)&qword_87D70);
}

void sub_31E7C()
{
  qword_87D78 = 0x406B800000000000;
}

uint64_t *sub_31E90()
{
  if (qword_85FD8 != -1) {
    swift_once();
  }
  return &qword_87D78;
}

double sub_31EDC()
{
  return sub_321E8(&qword_85FD8, (uint64_t)&qword_87D78);
}

void sub_31F00()
{
  qword_87D80 = 0x4078100000000000;
}

uint64_t *sub_31F14()
{
  if (qword_85FE0 != -1) {
    swift_once();
  }
  return &qword_87D80;
}

double sub_31F60()
{
  return sub_321E8(&qword_85FE0, (uint64_t)&qword_87D80);
}

void sub_31F84()
{
  qword_87D88 = 0x4075400000000000;
}

uint64_t *sub_31F98()
{
  if (qword_85FE8 != -1) {
    swift_once();
  }
  return &qword_87D88;
}

double sub_31FE4()
{
  return sub_321E8(&qword_85FE8, (uint64_t)&qword_87D88);
}

void sub_32008()
{
  qword_87D90 = 0x402C000000000000;
}

uint64_t *sub_32018()
{
  if (qword_85FF0 != -1) {
    swift_once();
  }
  return &qword_87D90;
}

double sub_32064()
{
  return sub_321E8(&qword_85FF0, (uint64_t)&qword_87D90);
}

void *sub_32088()
{
  return &unk_6B5B0;
}

double sub_32094()
{
  return 24.25;
}

void sub_320A4()
{
  qword_87D98 = 0x4008000000000000;
}

uint64_t *sub_320B4()
{
  if (qword_85FF8 != -1) {
    swift_once();
  }
  return &qword_87D98;
}

double sub_32100()
{
  return sub_321E8(&qword_85FF8, (uint64_t)&qword_87D98);
}

double sub_32124()
{
  if (qword_85F80 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_87D20;
  qword_87DA0 = qword_87D20;
  return result;
}

uint64_t *sub_32178()
{
  if (qword_86000 != -1) {
    swift_once();
  }
  return &qword_87DA0;
}

double sub_321C4()
{
  return sub_321E8(qword_86000, (uint64_t)&qword_87DA0);
}

double sub_321E8(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

uint64_t sub_32224(double a1)
{
  if (a1 == 14.0) {
    return 0;
  }
  if (a1 == 7.0) {
    return 1;
  }
  if (a1 == 3.0) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = 4;
  }
  if (a1 == 5.0) {
    return 2;
  }
  else {
    return v2;
  }
}

unint64_t sub_32278()
{
  unint64_t result = qword_81778;
  if (!qword_81778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81778);
  }
  return result;
}

unint64_t sub_322D0()
{
  unint64_t result = qword_81780;
  if (!qword_81780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81780);
  }
  return result;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

ValueMetadata *type metadata accessor for UIMetrics()
{
  return &type metadata for UIMetrics;
}

ValueMetadata *type metadata accessor for UIMetrics.Padding()
{
  return &type metadata for UIMetrics.Padding;
}

unsigned char *storeEnumTagSinglePayload for UIMetrics.CornerRadius(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x32420);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIMetrics.CornerRadius()
{
  return &type metadata for UIMetrics.CornerRadius;
}

ValueMetadata *type metadata accessor for UIMetrics.FeaturePreview()
{
  return &type metadata for UIMetrics.FeaturePreview;
}

unsigned char *storeEnumTagSinglePayload for UIMetrics.FeaturePreview.HorizontalSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x32534);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIMetrics.FeaturePreview.HorizontalSize()
{
  return &type metadata for UIMetrics.FeaturePreview.HorizontalSize;
}

ValueMetadata *type metadata accessor for UIMetrics.FontPicker()
{
  return &type metadata for UIMetrics.FontPicker;
}

ValueMetadata *type metadata accessor for UIMetrics.TypographyPanel()
{
  return &type metadata for UIMetrics.TypographyPanel;
}

ValueMetadata *type metadata accessor for UIMetrics.GlyphVariant()
{
  return &type metadata for UIMetrics.GlyphVariant;
}

uint64_t sub_3259C()
{
  uint64_t result = sub_681A0();
  qword_87DA8 = result;
  unk_87DB0 = v1;
  return result;
}

uint64_t *sub_325CC()
{
  if (qword_86310 != -1) {
    swift_once();
  }
  return &qword_87DA8;
}

uint64_t sub_32618()
{
  uint64_t result = sub_681A0();
  qword_87DB8 = result;
  qword_87DC0 = v1;
  return result;
}

uint64_t *sub_32648()
{
  if (qword_86318 != -1) {
    swift_once();
  }
  return &qword_87DB8;
}

uint64_t sub_32694()
{
  uint64_t result = sub_681A0();
  qword_87DC8 = result;
  qword_87DD0 = v1;
  return result;
}

uint64_t *sub_326C4()
{
  if (qword_86320 != -1) {
    swift_once();
  }
  return &qword_87DC8;
}

uint64_t sub_32710()
{
  uint64_t result = sub_681A0();
  qword_87DD8 = result;
  qword_87DE0 = v1;
  return result;
}

uint64_t *sub_32740()
{
  if (qword_86328 != -1) {
    swift_once();
  }
  return &qword_87DD8;
}

uint64_t sub_3278C()
{
  uint64_t v0 = sub_671F0();
  sub_14688(v0, qword_86338);
  sub_13CE0(v0, (uint64_t)qword_86338);
  return sub_671A0();
}

CTFontRef sub_327E0(uint64_t a1)
{
  unsigned int v2 = sub_32AF8(a1);
  sub_4890(&qword_81788);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  *(void *)(inited + 32) = kCTFontFeatureSettingsAttribute;
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = v2;
  CFStringRef v4 = (id)kCTFontFeatureSettingsAttribute;
  sub_328E8(inited);
  type metadata accessor for CFString(0);
  sub_4890(&qword_81790);
  sub_3842C(&qword_81798);
  CFDictionaryRef isa = sub_68120().super.isa;
  swift_bridgeObjectRelease();
  unsigned int v6 = CTFontDescriptorCreateWithAttributes(isa);

  CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v1, 0.0, 0, v6);
  return CopyWithAttributes;
}

unint64_t sub_328E8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unsigned int v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_81820);
  unsigned int v2 = (void *)sub_68660();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  CFStringRef v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_34EC0((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_329F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unsigned int v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_81810);
  unsigned int v2 = (void *)sub_68660();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  CFStringRef v4 = (id *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    id v6 = *v4;
    id v7 = *v4;
    id v8 = v5;
    unint64_t result = sub_34EC0((uint64_t)v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = 8 * result;
    *(void *)(v2[6] + v11) = v8;
    *(void *)(v2[7] + v11) = v6;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_32AF8(uint64_t a1)
{
  uint64_t v24 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v1 + 63) >> 6;
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v5 = 0;
  id v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v3)
    {
      unint64_t v7 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v8 = v7 | (v5 << 6);
    }
    else
    {
      BOOL v9 = __OFADD__(v5++, 1);
      if (v9) {
        goto LABEL_43;
      }
      if (v5 >= v25)
      {
LABEL_38:
        swift_release();
        return v6;
      }
      unint64_t v10 = *(void *)(v24 + 8 * v5);
      if (!v10)
      {
        int64_t v11 = v5 + 1;
        if (v5 + 1 >= v25) {
          goto LABEL_38;
        }
        unint64_t v10 = *(void *)(v24 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v5 + 2;
          if (v5 + 2 >= v25) {
            goto LABEL_38;
          }
          unint64_t v10 = *(void *)(v24 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v5 + 3;
            if (v5 + 3 >= v25) {
              goto LABEL_38;
            }
            unint64_t v10 = *(void *)(v24 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v5 + 4;
              if (v5 + 4 >= v25) {
                goto LABEL_38;
              }
              unint64_t v10 = *(void *)(v24 + 8 * v11);
              if (!v10)
              {
                while (1)
                {
                  int64_t v5 = v11 + 1;
                  if (__OFADD__(v11, 1)) {
                    goto LABEL_44;
                  }
                  if (v5 >= v25) {
                    goto LABEL_38;
                  }
                  unint64_t v10 = *(void *)(v24 + 8 * v5);
                  ++v11;
                  if (v10) {
                    goto LABEL_20;
                  }
                }
              }
            }
          }
        }
        int64_t v5 = v11;
      }
LABEL_20:
      unint64_t v3 = (v10 - 1) & v10;
      unint64_t v8 = __clz(__rbit64(v10)) + (v5 << 6);
    }
    uint64_t v12 = *(void *)(a1 + 48) + 24 * v8;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    char v15 = *(unsigned char *)(v12 + 16);
    sub_FBA8(*(void *)v12, v14, v15);
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_37990(v16, v13, v14, v15);
    sub_FFE0(v13, v14, v15);
    unint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v18 = v17[2];
    int64_t v19 = v6[2];
    int64_t v20 = v19 + v18;
    if (__OFADD__(v19, v18)) {
      break;
    }
    unint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (result && v20 <= v6[3] >> 1)
    {
      if (!v17[2]) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v19 <= v20) {
        int64_t v21 = v19 + v18;
      }
      else {
        int64_t v21 = v19;
      }
      unint64_t result = sub_350A8(result, v21, 1, v6);
      id v6 = result;
      if (!v17[2])
      {
LABEL_4:
        if (v18) {
          goto LABEL_40;
        }
        goto LABEL_5;
      }
    }
    if ((v6[3] >> 1) - v6[2] < v18) {
      goto LABEL_41;
    }
    sub_4890(&qword_817B0);
    unint64_t result = (void *)swift_arrayInitWithCopy();
    if (v18)
    {
      uint64_t v22 = v6[2];
      BOOL v9 = __OFADD__(v22, v18);
      uint64_t v23 = v22 + v18;
      if (v9) {
        goto LABEL_42;
      }
      v6[2] = v23;
    }
LABEL_5:
    unint64_t result = (void *)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

CTFontRef sub_32DD8()
{
  uint64_t v1 = CTFontCopyFontDescriptor(v0);
  sub_4890(&qword_817A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_693E0;
  *(void *)(inited + 32) = kCTFontFeatureSettingsAttribute;
  *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = kCFNull;
  CFNullRef v3 = kCFNull;
  CFStringRef v4 = (id)kCTFontFeatureSettingsAttribute;
  sub_329F4(inited);
  type metadata accessor for CFString(0);
  sub_4890(&qword_817A8);
  sub_3842C(&qword_81798);
  CFDictionaryRef isa = sub_68120().super.isa;
  swift_bridgeObjectRelease();
  CTFontRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v1, isa);

  CGFloat Size = CTFontGetSize(v0);
  CTFontRef v8 = CTFontCreateWithFontDescriptor(CopyWithAttributes, Size, 0);

  return v8;
}

uint64_t sub_32F00()
{
  CFArrayRef v1 = CTFontCopyFeatureSettings(v0);
  if (v1)
  {
    CFArrayRef v2 = v1;
    sub_4890(&qword_817B0);
    sub_682C0();
  }
  CFNullRef v3 = sub_335B8();
  CFStringRef v4 = sub_37DD4((uint64_t)v3, (uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  int64_t v5 = sub_38098((uint64_t)v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_35BD4((uint64_t)v5);
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_335B8()
{
  CFArrayRef v1 = CTFontCopyFeatures(v0);
  if (v1)
  {
    CFArrayRef v2 = v1;
    sub_38308();
    sub_682C0();
  }
  sub_4890(&qword_80ED8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_693E0;
  sub_68540(33);
  v6._object = (void *)0x8000000000074C00;
  v6._countAndFlagsBits = 0xD00000000000001FLL;
  sub_68210(v6);
  type metadata accessor for CTFont(0);
  sub_68600();
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 4sub_66CA4(2, 18, 1, 0) = 0xE000000000000000;
  char v4 = sub_124D4();
  sub_135AC(0x75746165466C6C61, 0xEB00000000736572, v4 & 1, v3);
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_345AC(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_361AC(a1, (uint64_t)sub_2D1A4, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_34638(unint64_t a1, char a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_68630();
    uint64_t v4 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    int64_t v25 = (char *)_swiftEmptyArrayStorage;
LABEL_44:
    uint64_t v26 = sub_37C44((uint64_t)v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v26;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_43;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v6 = 0;
    unint64_t v7 = &kCTFontOpenTypeFeatureValue;
    if (a2) {
      unint64_t v7 = &kCTFontFeatureSelectorIdentifierKey;
    }
    uint64_t v29 = (__CFString *)*v7;
    uint64_t v28 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)sub_68560();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v6 + 32);
      }
      BOOL v9 = v8;
      unint64_t v10 = (id)kCTFontFeatureSelectorNameKey;
      if (objc_msgSend(v9, "__swift_objectForKeyedSubscript:", v10))
      {
        sub_68450();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v32 = 0u;
        long long v33 = 0u;
      }
      sub_38348((uint64_t)&v32, (uint64_t)v34);
      if (v35)
      {
        if (swift_dynamicCast())
        {

          int64_t v11 = v29;
          if (objc_msgSend(v9, "__swift_objectForKeyedSubscript:", v11))
          {
            sub_68450();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v32 = 0u;
            long long v33 = 0u;
          }
          sub_38348((uint64_t)&v32, (uint64_t)v34);
          if (v35)
          {
            if (swift_dynamicCast())
            {

              uint64_t v12 = (id)kCTFontFeatureSelectorDefaultKey;
              if (objc_msgSend(v9, "__swift_objectForKeyedSubscript:", v12))
              {
                sub_68450();
                swift_unknownObjectRelease();
              }
              else
              {
                long long v32 = 0u;
                long long v33 = 0u;
              }
              sub_38348((uint64_t)&v32, (uint64_t)v34);
              if (v35)
              {
                swift_dynamicCast();
              }
              else
              {

                sub_227BC((uint64_t)v34);
              }
              v34[0] = v30;
              v34[1] = v31;
              if (qword_86330 != -1) {
                swift_once();
              }
              uint64_t v13 = sub_671F0();
              sub_13CE0(v13, (uint64_t)qword_86338);
              sub_A5D0();
              sub_68410();
              swift_bridgeObjectRelease();
              sub_BE68();
              uint64_t v15 = v14;
              uint64_t v17 = v16;
              uint64_t v19 = v18;
              __int16 v21 = v20;

              if (v19)
              {
                uint64_t v27 = v17;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v28 = sub_352F0(0, *((void *)v28 + 2) + 1, 1, v28);
                }
                unint64_t v23 = *((void *)v28 + 2);
                unint64_t v22 = *((void *)v28 + 3);
                if (v23 >= v22 >> 1) {
                  uint64_t v28 = sub_352F0((char *)(v22 > 1), v23 + 1, 1, v28);
                }
                *((void *)v28 + 2) = v23 + 1;
                uint64_t v24 = &v28[32 * v23];
                *((void *)v24 + 4) = v15;
                *((void *)v24 + 5) = v27;
                *((void *)v24 + 6) = v19;
                v24[56] = v21 & 1;
                v24[57] = HIBYTE(v21) & 1;
              }
              goto LABEL_9;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();

            sub_227BC((uint64_t)v34);
          }
        }
        else
        {
        }
      }
      else
      {

        sub_227BC((uint64_t)v34);
      }

LABEL_9:
      if (v4 == ++v6)
      {
        swift_bridgeObjectRelease();
        int64_t v25 = v28;
        goto LABEL_44;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_34B04(void *a1)
{
  uint64_t v2 = (id)kCTFontFeatureSampleTextKey;
  if (objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v2))
  {
    sub_68450();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_38348((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {

    sub_227BC((uint64_t)v9);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  uint64_t v3 = v7;

  v9[0] = sub_681B0();
  v9[1] = v4;
  *(void *)&v8[0] = 0x656C706D6173;
  *((void *)&v8[0] + 1) = 0xE600000000000000;
  sub_A5D0();
  char v5 = sub_68440();
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_34C58()
{
  return sub_67320();
}

uint64_t sub_34CA4()
{
  return sub_67310();
}

Swift::Int sub_34CFC()
{
  return sub_68830();
}

uint64_t sub_34D64()
{
  swift_getWitnessTable();
  return sub_67300();
}

uint64_t sub_34DD0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_F184((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *CFArrayRef v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

unint64_t sub_34EC0(uint64_t a1)
{
  sub_687F0();
  type metadata accessor for CFString(0);
  sub_3842C(&qword_81818);
  sub_67310();
  Swift::Int v2 = sub_68830();
  return sub_34F60(a1, v2);
}

unint64_t sub_34F60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_3842C(&qword_81818);
    id v7 = v6;
    char v8 = sub_67300();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_67300();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

void *sub_350A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81828);
    id v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_817B0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_351CC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_817E8);
    id v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_817F0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_352F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_817E0);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_353F4(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_35474(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_35414(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_35598(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_35434(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_356B0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_35454(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_357AC(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_35474(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81828);
    id v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_4890(&qword_817B0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_35598(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81800);
    id v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_356B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81168);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_357AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_817E0);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    id v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_358B0(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_4890(a3);
  char v38 = a2;
  uint64_t v7 = sub_68650();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v36 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v6 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v14 << 6);
      }
      else
      {
        int64_t v22 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        unint64_t v23 = v36[v22];
        ++v14;
        if (!v23)
        {
          int64_t v14 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v23 = v36[v14];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v4 = v3;
              if (v38)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v14 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v23 = v36[v14];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }
      uint64_t v29 = *(void *)(v6 + 48) + 24 * v21;
      uint64_t v30 = *(void *)v29;
      uint64_t v31 = *(void *)(v29 + 8);
      char v32 = *(unsigned char *)(v29 + 16);
      uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
      if ((v38 & 1) == 0)
      {
        sub_FBA8(*(void *)v29, *(void *)(v29 + 8), *(unsigned char *)(v29 + 16));
        swift_bridgeObjectRetain();
      }
      sub_1192C();
      uint64_t result = sub_68130();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = *(void *)(v8 + 48) + 24 * v18;
      *(void *)uint64_t v19 = v30;
      *(void *)(v19 + 8) = v31;
      *(unsigned char *)(v19 + 16) = v32;
      *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_35BD4(uint64_t a1)
{
  sub_4890(&qword_81160);
  uint64_t result = sub_68640();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v47 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v5;
  uint64_t v43 = v6;
  int64_t v44 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v45 = (void *)result;
  uint64_t v46 = result + 64;
  if (!v10) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v11 = __clz(__rbit64(v10));
  uint64_t v12 = (v10 - 1) & v10;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    unint64_t v48 = v12;
    int64_t v49 = v4;
    uint64_t v53 = 24 * i;
    uint64_t v17 = *(void *)(v47 + 48) + 24 * i;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    unint64_t v54 = i;
    uint64_t v21 = *(void *)(*(void *)(v47 + 56) + 8 * i);
    int64_t v22 = *(void *)(v21 + 16);
    char v52 = v20;
    uint64_t v50 = *(void *)v17;
    uint64_t v51 = v19;
    if (v22)
    {
      sub_FBA8(v18, v19, v20);
      swift_bridgeObjectRetain();
      sub_35434(0, v22, 0);
      unint64_t v23 = _swiftEmptyArrayStorage[2];
      int64_t v24 = (uint64_t *)(v21 + 56);
      do
      {
        uint64_t v26 = *v24;
        v24 += 4;
        uint64_t v25 = v26;
        unint64_t v27 = _swiftEmptyArrayStorage[3];
        unint64_t v28 = v23 + 1;
        if (v23 >= v27 >> 1) {
          sub_35434((char *)(v27 > 1), v23 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v28;
        _swiftEmptyArrayStorage[v23++ + 4] = v25;
        --v22;
      }
      while (v22);
      uint64_t v29 = sub_68370();
    }
    else
    {
      sub_FBA8(v18, v19, v20);
      swift_bridgeObjectRetain();
      unint64_t v28 = _swiftEmptyArrayStorage[2];
      uint64_t v29 = sub_68370();
      if (!v28) {
        goto LABEL_38;
      }
    }
    uint64_t v30 = 0;
    do
    {
      uint64_t v32 = v29 + 56;
      while (1)
      {
        uint64_t v33 = _swiftEmptyArrayStorage[v30++ + 4];
        uint64_t v34 = sub_687E0();
        uint64_t v35 = -1 << *(unsigned char *)(v29 + 32);
        unint64_t v36 = v34 & ~v35;
        if (((*(void *)(v32 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
          break;
        }
        uint64_t v37 = *(void *)(v29 + 48);
        if (*(void *)(v37 + 8 * v36) != v33)
        {
          uint64_t v38 = ~v35;
          do
          {
            unint64_t v36 = (v36 + 1) & v38;
            if (((*(void *)(v32 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
              goto LABEL_28;
            }
          }
          while (*(void *)(v37 + 8 * v36) != v33);
        }
        if (v30 == v28) {
          goto LABEL_37;
        }
      }
LABEL_28:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_18318(v33, v36, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    while (v30 != v28);
LABEL_37:
    uint64_t v3 = v45;
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v46 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
    uint64_t v39 = v3[6] + v53;
    *(void *)uint64_t v39 = v50;
    *(void *)(v39 + 8) = v51;
    *(unsigned char *)(v39 + 16) = v52;
    *(void *)(v3[7] + 8 * v54) = v29;
    uint64_t v40 = v3[2];
    BOOL v41 = __OFADD__(v40, 1);
    uint64_t v42 = v40 + 1;
    if (v41)
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v3[2] = v42;
    unint64_t v10 = v48;
    int64_t v4 = v49;
    if (v48) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_43;
    }
    if (v14 >= v44) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v43 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v44) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v43 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v44) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v43 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    uint64_t v12 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v44) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v43 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v44) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v43 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_35FC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v24 = a4 & 1;
  uint64_t v9 = *v4;
  sub_1192C();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_68130();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v20 = a3;
    uint64_t v13 = ~v11;
    sub_118D4();
    while ((sub_68160() & 1) == 0)
    {
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_FFE0(a2, v20, a4 & 1);
    uint64_t v16 = *(void *)(*v4 + 48) + 24 * v12;
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    *(void *)a1 = *(void *)v16;
    *(void *)(a1 + 8) = v18;
    *(unsigned char *)(a1 + 16) = v19;
    sub_FBA8(v17, v18, v19);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v4;
    *int64_t v4 = 0x8000000000000000;
    sub_FBA8(a2, a3, v24);
    sub_36848(a2, a3, v24, v12, isUniquelyReferenced_nonNull_native);
    *int64_t v4 = v21;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 16) = v24;
  }
  return result;
}

uint64_t sub_361AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_2D1F4();
  if (!v10) {
    goto LABEL_23;
  }
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v10;
  uint64_t v14 = v9 & 1;
  unint64_t v15 = (void *)*a5;
  unint64_t v17 = sub_18CB8(v7, v8, v9 & 1);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v21 = v16;
  if (v15[3] >= v20)
  {
    if (a4)
    {
      char v24 = (void *)*a5;
      if (v16) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_2C904();
      char v24 = (void *)*a5;
      if (v21) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    uint64_t v29 = v24[6] + 24 * v17;
    *(void *)uint64_t v29 = v11;
    *(void *)(v29 + 8) = v12;
    *(unsigned char *)(v29 + 16) = v14 != 0;
    *(void *)(v24[7] + 8 * v17) = v13;
    uint64_t v30 = v24[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    void v24[2] = v32;
LABEL_13:
    uint64_t v33 = sub_2D1F4();
    if (v36)
    {
      uint64_t v37 = v33;
      uint64_t v38 = v34;
      uint64_t v39 = v36;
      do
      {
        uint64_t v46 = v35 & 1;
        uint64_t v47 = (void *)*a5;
        unint64_t v48 = sub_18CB8(v37, v38, v35 & 1);
        uint64_t v50 = v47[2];
        BOOL v51 = (v49 & 1) == 0;
        BOOL v31 = __OFADD__(v50, v51);
        uint64_t v52 = v50 + v51;
        if (v31) {
          goto LABEL_24;
        }
        char v53 = v49;
        if (v47[3] < v52)
        {
          sub_358B0(v52, 1, &qword_81160);
          unint64_t v48 = sub_18CB8(v37, v38, v46);
          if ((v53 & 1) != (v54 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v55 = (void *)*a5;
        if (v53)
        {
          uint64_t v40 = 8 * v48;
          uint64_t v41 = *(void *)(v55[7] + 8 * v48);
          swift_bridgeObjectRetain();
          uint64_t v42 = sub_2743C(v39, v41);
          sub_FFE0(v37, v38, v46);
          uint64_t v43 = v55[7];
          swift_bridgeObjectRelease();
          *(void *)(v43 + v4sub_66CA4(2, 18, 1, 0) = v42;
        }
        else
        {
          v55[(v48 >> 6) + 8] |= 1 << v48;
          uint64_t v56 = v55[6] + 24 * v48;
          *(void *)uint64_t v56 = v37;
          *(void *)(v56 + 8) = v38;
          *(unsigned char *)(v56 + 16) = v46 != 0;
          *(void *)(v55[7] + 8 * v48) = v39;
          uint64_t v57 = v55[2];
          BOOL v31 = __OFADD__(v57, 1);
          uint64_t v58 = v57 + 1;
          if (v31) {
            goto LABEL_25;
          }
          v55[2] = v58;
        }
        uint64_t v37 = sub_2D1F4();
        uint64_t v38 = v44;
        uint64_t v39 = v45;
      }
      while (v45);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    sub_A588();
    return swift_release();
  }
  sub_358B0(v20, a4 & 1, &qword_81160);
  unint64_t v22 = sub_18CB8(v11, v12, v14);
  if ((v21 & 1) == (v23 & 1))
  {
    unint64_t v17 = v22;
    char v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v25 = 8 * v17;
    uint64_t v26 = *(void *)(v24[7] + v25);
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_2743C(v13, v26);
    sub_FFE0(v11, v12, v14);
    uint64_t v28 = v24[7];
    swift_bridgeObjectRelease();
    *(void *)(v28 + v25) = v27;
    goto LABEL_13;
  }
LABEL_26:
  uint64_t result = sub_687C0();
  __break(1u);
  return result;
}

uint64_t sub_36530()
{
  CFArrayRef v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_817F8);
  uint64_t v3 = sub_68500();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v31 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_33;
        }
        unint64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v16 = v32[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v16 = v32[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_33:
                swift_release();
                CFArrayRef v1 = v0;
                uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      uint64_t v19 = *(void *)(v2 + 48) + 24 * v14;
      uint64_t v21 = *(void *)v19;
      uint64_t v20 = *(void *)(v19 + 8);
      char v22 = *(unsigned char *)(v19 + 16);
      sub_1192C();
      uint64_t result = sub_68130();
      uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(void *)uint64_t v12 = v21;
      *(void *)(v12 + 8) = v20;
      *(unsigned char *)(v12 + 16) = v22;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *CFArrayRef v1 = v4;
  return result;
}

uint64_t sub_36848(uint64_t result, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a5 & 1) != 0) {
    goto LABEL_12;
  }
  if (a5)
  {
    sub_36530();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_369F8();
      goto LABEL_12;
    }
    sub_36BB8();
  }
  uint64_t v11 = *v5;
  sub_1192C();
  uint64_t result = sub_68130();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a4 = result & ~v12;
  if ((*(void *)(v11 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v13 = ~v12;
    sub_118D4();
    do
    {
      uint64_t result = sub_68160();
      if (result) {
        goto LABEL_15;
      }
      a4 = (a4 + 1) & v13;
    }
    while (((*(void *)(v11 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_12:
  uint64_t v14 = *v5;
  *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v15 = *(void *)(v14 + 48) + 24 * a4;
  *(void *)uint64_t v15 = v8;
  *(void *)(v15 + 8) = a2;
  *(unsigned char *)(v15 + 16) = a3 & 1;
  uint64_t v16 = *(void *)(v14 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v14 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_687B0();
  __break(1u);
  return result;
}

void *sub_369F8()
{
  CFArrayRef v1 = v0;
  sub_4890(&qword_817F8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_684F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *CFArrayRef v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v21 = *(void *)v17;
    *(void *)(v21 + 8) = v19;
    *(unsigned char *)(v21 + 16) = v20;
    uint64_t result = (void *)sub_FBA8(v18, v19, v20);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_36BB8()
{
  CFArrayRef v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_817F8);
  uint64_t v3 = sub_68500();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *CFArrayRef v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v29 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v30 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v30) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v29 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v30) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v29 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v30) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v29 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    char v21 = *(unsigned char *)(v18 + 16);
    sub_FBA8(*(void *)v18, v20, v21);
    sub_1192C();
    uint64_t result = sub_68130();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v8 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(unsigned char *)(v12 + 16) = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v30)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    CFArrayRef v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v29 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v29 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_36EA0(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_3797C((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_36F0C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_36F0C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = sub_68760(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_142;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v87 = (long long *)*a1;
      uint64_t v88 = -1;
      unint64_t v89 = (long long *)*a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v91 = v88;
        uint64_t v92 = v89;
        do
        {
          if (*((unsigned char *)v92 + 56) != 1) {
            break;
          }
          if (!v87) {
            goto LABEL_146;
          }
          uint64_t v93 = v92 + 2;
          uint64_t v94 = *((void *)v92 + 6);
          char v95 = *((unsigned char *)v92 + 57);
          long long v96 = v92[1];
          long long v97 = *v92;
          *uint64_t v92 = v92[2];
          *((void *)v92 + 2) = v94;
          *((unsigned char *)v92 + 24) = 1;
          *((unsigned char *)v92 + 25) = v95;
          v92 -= 2;
          _OWORD *v93 = v97;
          v93[1] = v96;
        }
        while (!__CFADD__(v91++, 1));
        v89 += 2;
        --v88;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_141;
    }
    uint64_t v6 = result;
    uint64_t v115 = v1;
    uint64_t v107 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      uint64_t v8 = sub_68310();
      *(void *)(v8 + 16) = v7;
      Swift::Int v110 = (void *)v8;
      uint64_t v114 = (char *)(v8 + 32);
LABEL_13:
      Swift::Int v10 = 0;
      uint64_t v11 = *a1;
      uint64_t v108 = *a1 + 88;
      uint64_t v109 = *a1 + 24;
      uint64_t v106 = *a1 - 32;
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
      uint64_t result = 1;
      uint64_t v111 = v6;
      Swift::Int v112 = v3;
      uint64_t v113 = v11;
      while (1)
      {
        Swift::Int v14 = v10++;
        if (v10 < v3)
        {
          int v15 = *(unsigned __int8 *)(v109 + 32 * v10);
          Swift::Int v10 = v14 + 2;
          if (v14 + 2 < v3)
          {
            unint64_t v16 = (unsigned __int8 *)(v108 + 32 * v14);
            while (v15 == *v16)
            {
              ++v10;
              v16 += 32;
              if (v3 == v10)
              {
                Swift::Int v10 = v3;
                break;
              }
            }
          }
          if (v15)
          {
            if (v10 < v14) {
              goto LABEL_143;
            }
            if (v14 < v10)
            {
              uint64_t v17 = 32 * v10 - 32;
              uint64_t v18 = 32 * v14;
              Swift::Int v19 = v10;
              Swift::Int v20 = v14;
              do
              {
                if (v20 != --v19)
                {
                  if (!v11) {
                    goto LABEL_149;
                  }
                  unint64_t v23 = (_OWORD *)(v11 + v18);
                  unint64_t v24 = (_OWORD *)(v11 + v17);
                  long long v25 = *(_OWORD *)(v11 + v18);
                  uint64_t v26 = *(void *)(v11 + v18 + 16);
                  char v27 = *(unsigned char *)(v11 + v18 + 24);
                  char v28 = *(unsigned char *)(v11 + v18 + 25);
                  if (v18 != v17 || v23 >= v24 + 2)
                  {
                    long long v21 = v24[1];
                    *unint64_t v23 = *v24;
                    v23[1] = v21;
                  }
                  uint64_t v22 = v11 + v17;
                  *(_OWORD *)uint64_t v22 = v25;
                  *(void *)(v22 + 16) = v26;
                  *(unsigned char *)(v22 + 24) = v27;
                  *(unsigned char *)(v22 + 25) = v28;
                }
                ++v20;
                v17 -= 32;
                v18 += 32;
              }
              while (v20 < v19);
            }
          }
        }
        if (v10 < v3)
        {
          if (__OFSUB__(v10, v14)) {
            goto LABEL_140;
          }
          if (v10 - v14 < v6)
          {
            Swift::Int v29 = v14 + v6;
            if (__OFADD__(v14, v6)) {
              goto LABEL_144;
            }
            if (v29 >= v3) {
              Swift::Int v29 = v3;
            }
            if (v29 < v14)
            {
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              return result;
            }
            if (v10 != v29)
            {
              uint64_t v30 = v106 + 32 * v10;
              do
              {
                Swift::Int v31 = v14;
                uint64_t v32 = v30;
                do
                {
                  if (*(unsigned char *)(v32 + 56) != 1) {
                    break;
                  }
                  if (!v11) {
                    goto LABEL_147;
                  }
                  long long v33 = *(_OWORD *)(v32 + 16);
                  long long v34 = *(_OWORD *)v32;
                  *(_OWORD *)uint64_t v32 = *(_OWORD *)(v32 + 32);
                  char v35 = (_OWORD *)(v32 + 32);
                  char v36 = *(unsigned char *)(v32 + 57);
                  *(void *)(v32 + 16) = *(void *)(v32 + 48);
                  *(unsigned char *)(v32 + 24) = 1;
                  *(unsigned char *)(v32 + 25) = v36;
                  v32 -= 32;
                  ++v31;
                  *char v35 = v34;
                  v35[1] = v33;
                }
                while (v10 != v31);
                ++v10;
                v30 += 32;
              }
              while (v10 != v29);
              Swift::Int v10 = v29;
            }
          }
        }
        if (v10 < v14) {
          goto LABEL_135;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_9A50(0, *((void *)v12 + 2) + 1, 1, v12);
          uint64_t v12 = (char *)result;
        }
        unint64_t v38 = *((void *)v12 + 2);
        unint64_t v37 = *((void *)v12 + 3);
        unint64_t v13 = v38 + 1;
        uint64_t v11 = v113;
        if (v38 >= v37 >> 1)
        {
          uint64_t result = (uint64_t)sub_9A50((char *)(v37 > 1), v38 + 1, 1, v12);
          uint64_t v11 = v113;
          uint64_t v12 = (char *)result;
        }
        *((void *)v12 + 2) = v13;
        uint64_t v39 = v12 + 32;
        uint64_t v40 = &v12[16 * v38 + 32];
        *(void *)uint64_t v40 = v14;
        *((void *)v40 + 1) = v10;
        if (v38)
        {
          while (1)
          {
            unint64_t v41 = v13 - 1;
            if (v13 >= 4)
            {
              uint64_t v46 = &v39[2 * v13];
              uint64_t v47 = *(v46 - 8);
              uint64_t v48 = *(v46 - 7);
              BOOL v52 = __OFSUB__(v48, v47);
              uint64_t v49 = v48 - v47;
              if (v52) {
                goto LABEL_124;
              }
              uint64_t v51 = *(v46 - 6);
              uint64_t v50 = *(v46 - 5);
              BOOL v52 = __OFSUB__(v50, v51);
              uint64_t v44 = v50 - v51;
              char v45 = v52;
              if (v52) {
                goto LABEL_125;
              }
              unint64_t v53 = v13 - 2;
              char v54 = &v39[2 * v13 - 4];
              uint64_t v56 = *v54;
              uint64_t v55 = v54[1];
              BOOL v52 = __OFSUB__(v55, v56);
              uint64_t v57 = v55 - v56;
              if (v52) {
                goto LABEL_126;
              }
              BOOL v52 = __OFADD__(v44, v57);
              uint64_t v58 = v44 + v57;
              if (v52) {
                goto LABEL_128;
              }
              if (v58 >= v49)
              {
                uint64_t v76 = &v39[2 * v41];
                uint64_t v78 = *v76;
                uint64_t v77 = v76[1];
                BOOL v52 = __OFSUB__(v77, v78);
                uint64_t v79 = v77 - v78;
                if (v52) {
                  goto LABEL_134;
                }
                BOOL v69 = v44 < v79;
                goto LABEL_87;
              }
            }
            else
            {
              if (v13 != 3)
              {
                uint64_t v70 = *((void *)v12 + 4);
                uint64_t v71 = *((void *)v12 + 5);
                BOOL v52 = __OFSUB__(v71, v70);
                uint64_t v63 = v71 - v70;
                char v64 = v52;
                goto LABEL_81;
              }
              uint64_t v43 = *((void *)v12 + 4);
              uint64_t v42 = *((void *)v12 + 5);
              BOOL v52 = __OFSUB__(v42, v43);
              uint64_t v44 = v42 - v43;
              char v45 = v52;
            }
            if (v45) {
              goto LABEL_127;
            }
            unint64_t v53 = v13 - 2;
            int64_t v59 = &v39[2 * v13 - 4];
            uint64_t v61 = *v59;
            uint64_t v60 = v59[1];
            BOOL v62 = __OFSUB__(v60, v61);
            uint64_t v63 = v60 - v61;
            char v64 = v62;
            if (v62) {
              goto LABEL_129;
            }
            uint64_t v65 = &v39[2 * v41];
            uint64_t v67 = *v65;
            uint64_t v66 = v65[1];
            BOOL v52 = __OFSUB__(v66, v67);
            uint64_t v68 = v66 - v67;
            if (v52) {
              goto LABEL_131;
            }
            if (__OFADD__(v63, v68)) {
              goto LABEL_133;
            }
            if (v63 + v68 >= v44)
            {
              BOOL v69 = v44 < v68;
LABEL_87:
              if (v69) {
                unint64_t v41 = v53;
              }
              goto LABEL_89;
            }
LABEL_81:
            if (v64) {
              goto LABEL_130;
            }
            uint64_t v72 = &v39[2 * v41];
            uint64_t v74 = *v72;
            uint64_t v73 = v72[1];
            BOOL v52 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v52) {
              goto LABEL_132;
            }
            if (v75 < v63) {
              goto LABEL_15;
            }
LABEL_89:
            unint64_t v80 = v41 - 1;
            if (v41 - 1 >= v13)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v11) {
              goto LABEL_148;
            }
            uint64_t v81 = v12;
            uint64_t v82 = &v39[2 * v80];
            uint64_t v83 = *v82;
            uint64_t v84 = &v39[2 * v41];
            uint64_t v85 = v84[1];
            uint64_t result = sub_375E0((char *)(v11 + 32 * *v82), (char *)(v11 + 32 * *v84), v11 + 32 * v85, v114);
            if (v115) {
              goto LABEL_97;
            }
            if (v85 < v83) {
              goto LABEL_121;
            }
            if (v41 > *((void *)v81 + 2)) {
              goto LABEL_122;
            }
            uint64_t *v82 = v83;
            v39[2 * v80 + 1] = v85;
            unint64_t v86 = *((void *)v81 + 2);
            if (v41 >= v86) {
              goto LABEL_123;
            }
            uint64_t v12 = v81;
            unint64_t v13 = v86 - 1;
            uint64_t result = (uint64_t)memmove(&v39[2 * v41], v84 + 2, 16 * (v86 - 1 - v41));
            *((void *)v81 + 2) = v86 - 1;
            uint64_t v11 = v113;
            if (v86 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v13 = 1;
LABEL_15:
        uint64_t v6 = v111;
        Swift::Int v3 = v112;
        uint64_t result = 1;
        if (v10 >= v112)
        {
          int64_t v9 = v110;
          goto LABEL_107;
        }
      }
    }
    int64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v114 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      Swift::Int v110 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
    uint64_t result = (uint64_t)v12;
    Swift::Int v110 = v9;
    if (v13 >= 2)
    {
      uint64_t v99 = *v107;
      do
      {
        unint64_t v100 = v13 - 2;
        if (v13 < 2) {
          goto LABEL_136;
        }
        if (!v99) {
          goto LABEL_150;
        }
        uint64_t v101 = result;
        uint64_t v102 = *(void *)(result + 32 + 16 * v100);
        uint64_t v103 = *(void *)(result + 32 + 16 * (v13 - 1) + 8);
        uint64_t result = sub_375E0((char *)(v99 + 32 * v102), (char *)(v99 + 32 * *(void *)(result + 32 + 16 * (v13 - 1))), v99 + 32 * v103, v114);
        if (v115) {
          break;
        }
        if (v103 < v102) {
          goto LABEL_137;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_9B4C(v101);
          uint64_t v101 = result;
        }
        if (v100 >= *(void *)(v101 + 16)) {
          goto LABEL_138;
        }
        uint64_t v104 = (void *)(v101 + 32 + 16 * v100);
        *uint64_t v104 = v102;
        v104[1] = v103;
        unint64_t v105 = *(void *)(v101 + 16);
        if (v13 > v105) {
          goto LABEL_139;
        }
        memmove((void *)(v101 + 32 + 16 * (v13 - 1)), (const void *)(v101 + 32 + 16 * v13), 16 * (v105 - v13));
        uint64_t result = v101;
        *(void *)(v101 + 16) = v105 - 1;
        unint64_t v13 = v105 - 1;
      }
      while (v105 > 2);
    }
LABEL_97:
    swift_bridgeObjectRelease();
    v110[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_375E0(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 31;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v13)
  {
    uint64_t v20 = 32 * v13;
    if (a4 != __src || &__src[v20] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    int v15 = &v4[v20];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_43;
    }
    long long v21 = (char *)(a3 - 32);
    while (1)
    {
      uint64_t v22 = v21 + 32;
      if (*(v15 - 8) == 1)
      {
        unint64_t v23 = v6 - 32;
        if (v22 != v6)
        {
          v6 -= 32;
LABEL_40:
          long long v25 = *((_OWORD *)v23 + 1);
          *(_OWORD *)long long v21 = *(_OWORD *)v23;
          *((_OWORD *)v21 + 1) = v25;
          goto LABEL_41;
        }
        BOOL v24 = v21 >= v6;
        v6 -= 32;
        if (v24) {
          goto LABEL_40;
        }
      }
      else
      {
        unint64_t v23 = v15 - 32;
        if (v22 != v15)
        {
          v15 -= 32;
          goto LABEL_40;
        }
        BOOL v24 = v21 >= v15;
        v15 -= 32;
        if (v24) {
          goto LABEL_40;
        }
      }
LABEL_41:
      if (v15 > v4)
      {
        v21 -= 32;
        if (v6 > v7) {
          continue;
        }
      }
      goto LABEL_43;
    }
  }
  size_t v14 = 32 * v10;
  if (a4 != __dst || &__dst[v14] <= a4) {
    memmove(a4, __dst, v14);
  }
  int v15 = &v4[v14];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      if (v6[24] == 1)
      {
        unint64_t v16 = v6 + 32;
        uint64_t v17 = v6;
        if (v7 == v6 && v7 < v16) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v18 = v4 + 32;
        uint64_t v17 = v4;
        unint64_t v16 = v6;
        if (v7 == v4)
        {
          v4 += 32;
          if (v7 < v18) {
            goto LABEL_20;
          }
        }
        else
        {
          v4 += 32;
        }
      }
      long long v19 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
      *((_OWORD *)v7 + 1) = v19;
LABEL_20:
      v7 += 32;
      if (v4 < v15)
      {
        uint64_t v6 = v16;
        if ((unint64_t)v16 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_43:
  size_t v26 = (v15 - v4 + (v15 - v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0;
  if (v6 != v4 || v6 >= &v4[v26]) {
    memmove(v6, v4, v26);
  }
  return 1;
}

uint64_t sub_377F8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  int64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_37898(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

char *sub_3797C(uint64_t a1)
{
  return sub_357AC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_37990(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = a1;
  char v20 = a4 & 1;
  sub_353F4(0, v4, 0);
  uint64_t result = (void *)sub_377F8(v5);
  int64_t v8 = (int64_t)result;
  char v10 = v9 & 1;
  uint64_t v21 = v5 + 56;
  uint64_t v19 = v5;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(unsigned char *)(v5 + 32))
  {
    if (((*(void *)(v21 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(v5 + 36) != v7) {
      goto LABEL_14;
    }
    char v24 = v10;
    int v25 = v7;
    uint64_t v11 = *(void *)(*(void *)(v5 + 48) + 8 * v8);
    sub_4890(&qword_81740);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_6A770;
    *(void *)(inited + 32) = sub_5FD7C(a2, a3, v20);
    *(void *)(inited + 4sub_66CA4(2, 18, 1, 0) = v13;
    sub_5FBAC(a2, a3, v20, (uint64_t *)(inited + 48));
    *(void *)(inited + 8sub_66CA4(2, 18, 1, 0) = sub_5FDA8(a2, a3, v20);
    *(void *)(inited + 88) = v14;
    *(void *)(inited + 12sub_66CA4(2, 18, 1, 0) = &type metadata for Int;
    *(void *)(inited + 96) = v11;
    unint64_t v15 = sub_3017C(inited);
    unint64_t v17 = _swiftEmptyArrayStorage[2];
    unint64_t v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1) {
      sub_353F4((void *)(v16 > 1), v17 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v17 + 1;
    _swiftEmptyArrayStorage[v17 + 4] = v15;
    uint64_t v5 = v19;
    uint64_t result = (void *)sub_37898(v8, v25, v24 & 1, v19);
    int64_t v8 = (int64_t)result;
    char v10 = v18 & 1;
    if (!--v4)
    {
      sub_38488((uint64_t)result, v7, v10);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_37B9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1192C();
  uint64_t result = sub_68370();
  uint64_t v10 = result;
  if (v2)
  {
    int64_t v4 = (char *)(a1 + 48);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      uint64_t v6 = *((void *)v4 - 1);
      char v7 = *v4;
      v4 += 24;
      sub_FBA8(v5, v6, v7);
      sub_35FC8((uint64_t)v8, v5, v6, v7);
      sub_FFE0(v8[0], v8[1], v9);
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_37C44(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v2 = 0;
  uint64_t v3 = result + 57;
  uint64_t v18 = -(uint64_t)v1;
  int64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v16 = result + 57;
  unint64_t v17 = *(void *)(result + 16);
  do
  {
    if (v2 <= v1) {
      unint64_t v5 = v1;
    }
    else {
      unint64_t v5 = v2;
    }
    uint64_t v6 = -(uint64_t)v5;
    for (uint64_t i = (char *)(v3 + 32 * v2++); ; i += 32)
    {
      if (v6 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v8 = *(void *)(i - 25);
      uint64_t v9 = *(void *)(i - 17);
      uint64_t v10 = *(void *)(i - 9);
      char v11 = *(i - 1);
      char v12 = *i;
      swift_bridgeObjectRetain();
      if (sub_17B1C(&v19, v8)) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
      ++v2;
      if (v18 + v2 == 1) {
        return (uint64_t)v4;
      }
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    char v20 = v4;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_35454(0, v4[2] + 1, 1);
      int64_t v4 = v20;
    }
    unint64_t v14 = v4[2];
    unint64_t v13 = v4[3];
    if (v14 >= v13 >> 1)
    {
      uint64_t result = (uint64_t)sub_35454((char *)(v13 > 1), v14 + 1, 1);
      int64_t v4 = v20;
    }
    void v4[2] = v14 + 1;
    unint64_t v15 = &v4[4 * v14];
    _OWORD v15[4] = v8;
    v15[5] = v9;
    v15[6] = v10;
    *((unsigned char *)v15 + 56) = v11;
    *((unsigned char *)v15 + 57) = v12;
    uint64_t v3 = v16;
    unint64_t v1 = v17;
  }
  while (v18 + v2);
  return (uint64_t)v4;
}

void *sub_37DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v30 = a1 + 32;
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v31 = v2;
  do
  {
    char v7 = (long long *)(v30 + 72 * v5);
    long long v8 = v7[1];
    long long v32 = *v7;
    long long v33 = v8;
    long long v9 = v7[3];
    long long v34 = v7[2];
    long long v35 = v9;
    uint64_t v36 = *((void *)v7 + 8);
    uint64_t v10 = *((void *)&v32 + 1);
    uint64_t v11 = v32;
    char v12 = v33;
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v37 = *((void *)&v32 + 1);
    if (!v13)
    {
      sub_117F4((uint64_t)&v32);
      goto LABEL_13;
    }
    sub_117F4((uint64_t)&v32);
    sub_FBA8(v11, v10, v12);
    sub_1192C();
    uint64_t v14 = v10;
    uint64_t v15 = sub_68130();
    uint64_t v16 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v17 = v11;
    unint64_t v18 = v15 & ~v16;
    if (((*(void *)(v4 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    {
      sub_FFE0(v17, v14, v12);
      uint64_t v2 = v31;
      uint64_t v11 = v17;
LABEL_13:
      uint64_t v20 = sub_5FE88();
      if (v21)
      {
        sub_FF80((uint64_t)&v32);
      }
      else
      {
        uint64_t v22 = v20;
        sub_FBA8(v11, v37, v12);
        sub_FF80((uint64_t)&v32);
        uint64_t v23 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_351CC(0, v6[2] + 1, 1, v6);
        }
        unint64_t v25 = v6[2];
        unint64_t v24 = v6[3];
        size_t v26 = v6;
        if (v25 >= v24 >> 1) {
          size_t v26 = sub_351CC((void *)(v24 > 1), v25 + 1, 1, v6);
        }
        v26[2] = v25 + 1;
        uint64_t v6 = v26;
        char v27 = &v26[4 * v25];
        uint64_t v28 = v37;
        v27[4] = v23;
        v27[5] = v28;
        *((unsigned char *)v27 + 48) = v12;
        v27[7] = v22;
        uint64_t v2 = v31;
      }
      goto LABEL_4;
    }
    uint64_t v19 = ~v16;
    sub_118D4();
    while ((sub_68160() & 1) == 0)
    {
      unint64_t v18 = (v18 + 1) & v19;
      if (((*(void *)(v4 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      {
        uint64_t v11 = v17;
        sub_FFE0(v17, v37, v12);
        uint64_t v2 = v31;
        goto LABEL_13;
      }
    }
    sub_FFE0(v17, v37, v12);
    sub_FF80((uint64_t)&v32);
    uint64_t v2 = v31;
LABEL_4:
    ++v5;
  }
  while (v5 != v2);
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_38098(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyDictionarySingleton;
  }
  for (uint64_t i = (void *)(a1 + 56); ; i += 4)
  {
    uint64_t v5 = *(i - 3);
    uint64_t v4 = *(i - 2);
    char v6 = *((unsigned char *)i - 8);
    uint64_t v7 = *i;
    sub_FBA8(v5, v4, v6);
    sub_FBA8(v5, v4, v6);
    unint64_t v9 = sub_18CB8(v5, v4, v6);
    uint64_t v10 = _swiftEmptyDictionarySingleton[2];
    BOOL v11 = (v8 & 1) == 0;
    uint64_t v12 = v10 + v11;
    if (__OFADD__(v10, v11)) {
      break;
    }
    char v13 = v8;
    if (_swiftEmptyDictionarySingleton[3] < v12)
    {
      sub_358B0(v12, 1, &qword_81808);
      unint64_t v14 = sub_18CB8(v5, v4, v6);
      if ((v13 & 1) != (v15 & 1)) {
        goto LABEL_19;
      }
      unint64_t v9 = v14;
    }
    if (v13)
    {
      uint64_t v30 = v1;
      uint64_t v31 = v7;
      sub_FFE0(v5, v4, v6);
      uint64_t v16 = _swiftEmptyDictionarySingleton[7];
      uint64_t v17 = *(void **)(v16 + 8 * v9);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v29 = v16;
      *(void *)(v16 + 8 * v9) = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v17 = sub_351CC(0, v17[2] + 1, 1, v17);
        *(void *)(v16 + 8 * v9) = v17;
      }
      unint64_t v20 = v17[2];
      unint64_t v19 = v17[3];
      unint64_t v21 = v20 + 1;
      uint64_t v1 = v30;
      if (v20 >= v19 >> 1)
      {
        uint64_t v22 = sub_351CC((void *)(v19 > 1), v20 + 1, 1, v17);
        unint64_t v21 = v20 + 1;
        uint64_t v17 = v22;
        *(void *)(v29 + 8 * v9) = v22;
      }
      void v17[2] = v21;
      uint64_t v3 = &v17[4 * v20];
      v3[4] = v5;
      v3[5] = v4;
      *((unsigned char *)v3 + 48) = v6;
      v3[7] = v31;
    }
    else
    {
      sub_4890(&qword_817E8);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_693E0;
      *(void *)(v23 + 32) = v5;
      *(void *)(v23 + 4sub_66CA4(2, 18, 1, 0) = v4;
      *(unsigned char *)(v23 + 48) = v6;
      *(void *)(v23 + 56) = v7;
      _swiftEmptyDictionarySingleton[(v9 >> 6) + 8] |= 1 << v9;
      uint64_t v24 = _swiftEmptyDictionarySingleton[6] + 24 * v9;
      *(void *)uint64_t v24 = v5;
      *(void *)(v24 + 8) = v4;
      *(unsigned char *)(v24 + 16) = v6;
      *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v9) = v23;
      uint64_t v25 = _swiftEmptyDictionarySingleton[2];
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_18;
      }
      _swiftEmptyDictionarySingleton[2] = v27;
    }
    if (!--v1) {
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = (void *)sub_687C0();
  __break(1u);
  return result;
}

unint64_t sub_38308()
{
  unint64_t result = qword_817B8;
  if (!qword_817B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_817B8);
  }
  return result;
}

uint64_t sub_38348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4890(&qword_81378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFNull(uint64_t a1)
{
}

uint64_t sub_383C4()
{
  return sub_3842C(&qword_81798);
}

uint64_t sub_383F8()
{
  return sub_3842C(&qword_817D0);
}

uint64_t sub_3842C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_38470(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_FFE0(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_38488(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_38494()
{
  return *v0;
}

id sub_3849C()
{
  return *(id *)(v0 + 8);
}

uint64_t sub_384A4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_384D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FeaturePreviewConfiguration(0);
  return sub_A85C(v1 + *(int *)(v3 + 28), a1, &qword_81830);
}

uint64_t type metadata accessor for FeaturePreviewConfiguration(uint64_t a1)
{
  return sub_3F0EC(a1, (uint64_t *)&unk_86578);
}

unint64_t sub_38534()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 32));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t sub_38574()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 36));
}

uint64_t sub_38598(char a1)
{
  uint64_t result = type metadata accessor for FeaturePreviewConfiguration(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t sub_385C8()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_38608(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t sub_38650()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 44));
}

uint64_t sub_38674()
{
  return 2;
}

uint64_t sub_3867C()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 48));
}

uint64_t sub_386A0(char a1)
{
  uint64_t result = type metadata accessor for FeaturePreviewConfiguration(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_386D0())(void, void, void, double)
{
  return nullsub_1;
}

uint64_t sub_38718@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const __CTFont *a3@<X2>, uint64_t a4@<X3>, CTFontRef a5@<X4>, int a6@<W5>, char a7@<W6>, uint64_t a8@<X8>)
{
  LOBYTE(v8) = a7;
  LODWORD(v217) = a6;
  v209 = a3;
  id v210 = a1;
  uint64_t v203 = a8;
  uint64_t v12 = sub_4890(&qword_81830);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v206 = (char *)&v191 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v193 = (char *)&v191 - v15;
  uint64_t v16 = sub_4890(&qword_81838);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  v214 = (char *)&v191 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v191 - v19;
  uint64_t v21 = sub_671F0();
  unint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  v194 = (char *)&v191 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  v216 = (char *)&v191 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v198 = (char *)&v191 - v28;
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v191 - v29;
  uint64_t v31 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v202 = *(void *)(v31 - 8);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v34 = (uint64_t)&v191 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v35 = (char *)(v34 + *(int *)(v32 + 40));
  *(void *)long long v35 = 0;
  *((void *)v35 + 1) = 0;
  v208 = v35;
  uint64_t v213 = v32;
  *(unsigned char *)(v34 + *(int *)(v32 + 48)) = 2;
  uint64_t v201 = a4;
  sub_A85C(a4, (uint64_t)v20, &qword_81838);
  int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  v204 = (char *)v34;
  unint64_t v211 = v22;
  uint64_t v219 = v21;
  v212 = v30;
  v218 = (char *)a2;
  if (v36 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v30, v20, v21);
    id v43 = v210;
    uint64_t v44 = (uint64_t *)v208;
    goto LABEL_22;
  }
  uint64_t v37 = *(void *)a2;
  uint64_t v38 = *(void *)(a2 + 8);
  char v39 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v38, v39);
  uint64_t v40 = sub_C078(v37, v38, v39);
  uint64_t v42 = v40;
  if (v41 - 1 < 2)
  {
    sub_1D6A0(v40, v41);
    id v43 = v210;
    uint64_t v44 = (uint64_t *)v208;
    if (qword_864F8 != -1) {
      goto LABEL_121;
    }
    goto LABEL_12;
  }
  id v43 = v210;
  uint64_t v44 = (uint64_t *)v208;
  if (v41 == 3)
  {
    if (qword_86518 != -1) {
      swift_once();
    }
    uint64_t v21 = v219;
    uint64_t v48 = sub_13CE0(v219, (uint64_t)qword_86520);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v212, v48, v21);
    sub_1D6A0(v42, 3uLL);
    goto LABEL_16;
  }
  if (v41 != 9) {
    sub_1D6A0(v40, v41);
  }
  if (sub_B0A8(v37, v38, v39, 1953259886, 0xE400000000000000, 1))
  {
    uint64_t v34 = (uint64_t)v204;
    uint64_t v21 = v219;
    char v45 = v212;
    if (qword_86538 != -1) {
      swift_once();
    }
    uint64_t v46 = qword_86540;
  }
  else
  {
    uint64_t v34 = (uint64_t)v204;
    uint64_t v21 = v219;
    char v45 = v212;
    if (qword_86558 != -1) {
      swift_once();
    }
    uint64_t v46 = qword_86560;
  }
  uint64_t v49 = sub_13CE0(v21, (uint64_t)v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v45, v49, v21);
  while (1)
  {
    sub_A8C0((uint64_t)v20, &qword_81838);
LABEL_22:
    int v50 = v8;
    unint64_t v20 = v218;
    unint64_t v8 = (unint64_t)v209;
    if (v217)
    {
      sub_1D2D8((uint64_t)(v218 + 56), (uint64_t)&v222, &qword_81840);
      sub_1D2D8((uint64_t)&v222, (uint64_t)&v220, &qword_81840);
      if (*((void *)&v220 + 1))
      {
        a5 = (CTFontRef)(&dword_4 + 2);
      }
      else
      {
        unint64_t v51 = *(void *)v20;
        uint64_t v52 = *((void *)v20 + 1);
        char v53 = v20[16];
        sub_FBA8(*(void *)v20, v52, v53);
        uint64_t v54 = sub_C078(v51, v52, v53);
        if (v55 - 1 >= 2)
        {
          uint64_t v21 = v219;
          if (v55 == 9)
          {
            if ((v53 & 1) != 0
              || ((a5 = (CTFontRef)(&dword_0 + 3), v51 > 0x1A) || ((1 << v51) & 0x6400042) == 0) && v51 != 103)
            {
              a5 = (CTFontRef)(&dword_0 + 1);
            }
          }
          else
          {
            sub_1D6A0(v54, v55);
            a5 = (CTFontRef)(&dword_0 + 1);
          }
        }
        else
        {
          a5 = (CTFontRef)(&dword_0 + 3);
          uint64_t v21 = v219;
        }
      }
    }
    if (v50 == 2) {
      char v56 = sub_39EF4((uint64_t)v20);
    }
    else {
      char v56 = v50 & 1;
    }
    unint64_t v57 = v211;
    if (!a5)
    {

      sub_FF80((uint64_t)v20);
      sub_A8C0(v201, &qword_81838);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v212, v21);
LABEL_87:
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v202 + 56))(v203, 1, 1, v213);
    }
    swift_bridgeObjectRelease();
    uint64_t v58 = v213;
    id v43 = (id)*(int *)(v213 + 36);
    *((unsigned char *)v43 + v34) = v56 & 1;
    *(unsigned char *)(v34 + *(int *)(v58 + 44)) = sub_3A0C8((uint64_t)v20);
    CTFontRef v59 = sub_32DD8();
    uint64_t v60 = sub_31840();
    CTFontRef v61 = sub_60654(*(CGFloat *)v60);

    double v62 = *(double *)sub_31940();
    double v63 = fmax(fmin(v62 / sub_606C0(), 1.0), 0.7);
    double v64 = sub_6075C();
    CTFontRef v197 = sub_60654(v64 * v63);
    uint64_t v65 = *((void *)v20 + 6);
    uint64_t v221 = v65;
    uint64_t v217 = *(void *)(v65 + 16);
    CTFontRef v196 = v61;
    uint64_t v192 = v65;
    if (!v217) {
      goto LABEL_55;
    }
    if (*(void *)(v65 + 32) != v8)
    {
      if (v217 != 1)
      {
        uint64_t v75 = (unsigned __int8 *)(v65 + 89);
        uint64_t v76 = 1;
        while (1)
        {
          uint64_t v77 = v76 + 1;
          if (__OFADD__(v76, 1))
          {
            __break(1u);
            goto LABEL_119;
          }
          if (*(void *)(v75 - 25) == v8) {
            break;
          }
          v75 += 32;
          ++v76;
          if (v77 == v217) {
            goto LABEL_55;
          }
        }
        uint64_t v69 = *(void *)(v75 - 17);
        uint64_t v68 = *(void *)(v75 - 9);
        int v78 = *(v75 - 1);
        int v66 = *v75;
        swift_bridgeObjectRetain();
        if (v78 == 1) {
          goto LABEL_40;
        }
LABEL_54:
        swift_bridgeObjectRelease();
      }
LABEL_55:
      int v74 = 0;
      goto LABEL_56;
    }
    int v66 = *(unsigned __int8 *)(v65 + 57);
    char v67 = *(unsigned char *)(v65 + 56);
    uint64_t v69 = *(void *)(v65 + 40);
    uint64_t v68 = *(void *)(v65 + 48);
    swift_bridgeObjectRetain();
    if ((v67 & 1) == 0) {
      goto LABEL_54;
    }
LABEL_40:
    if (v66) {
      __int16 v70 = 257;
    }
    else {
      __int16 v70 = 1;
    }
    char v71 = sub_6034C(v8, v69, v68, v70);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v71 & 1) == 0) {
      goto LABEL_55;
    }
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_123;
    }
    int v74 = 1;
LABEL_56:
    unint64_t v215 = (unint64_t)a5;
    sub_4890(&qword_81150);
    uint64_t inited = swift_initStackObject();
    long long v207 = xmmword_693E0;
    *(_OWORD *)(inited + 16) = xmmword_693E0;
    sub_117DC((long long *)v20, (uint64_t)&v220);
    sub_117DC(&v220, inited + 32);
    sub_4890(&qword_81168);
    uint64_t v80 = swift_initStackObject();
    *(_OWORD *)(v80 + 16) = v207;
    *(void *)(v80 + 32) = v8;
    sub_11854((uint64_t)&v220);
    uint64_t v81 = sub_3E81C(v80);
    swift_setDeallocating();
    *(void *)(inited + 56) = v81;
    unint64_t v82 = sub_1783C(inited);
    a5 = v197;
    CTFontRef v83 = sub_327E0(v82);
    swift_bridgeObjectRelease();
    if (v74) {
      CTFontRef v84 = v83;
    }
    else {
      CTFontRef v84 = a5;
    }
    CTFontRef v199 = v83;
    if (v74) {
      CTFontRef v85 = a5;
    }
    else {
      CTFontRef v85 = v83;
    }
    *(void *)uint64_t v34 = v84;
    *(void *)(v34 + 8) = v85;
    type metadata accessor for CTFont(0);
    sub_418A8(&qword_81480, type metadata accessor for CTFont);
    unint64_t v86 = v84;
    uint64_t v87 = v85;
    uint64_t v88 = v86;
    unint64_t v89 = v87;
    v200 = v88;
    v195 = v89;
    if (sub_67300()) {
      *((unsigned char *)v43 + v34) = 0;
    }
    sub_117F4((uint64_t)v20);
    uint64_t v90 = sub_BFE4((uint64_t)v20);
    unint64_t v92 = v91;
    char v93 = sub_C3E8(v90, v91, 0, 3uLL);
    sub_118BC(v90, v92);
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    if (v93)
    {
      sub_672D0();
      Class isa = sub_682B0().super.isa;
      swift_bridgeObjectRelease();
      long long v97 = (void *)CTFontCopySampleStringWithLanguages();

      uint64_t v94 = sub_681A0();
      uint64_t v95 = v98;
    }
    *uint64_t v44 = v94;
    v44[1] = v95;
    uint64_t v99 = *((void *)v20 + 8);
    if (!v99) {
      goto LABEL_71;
    }
    uint64_t v222 = *((void *)v20 + 7);
    uint64_t v223 = v99;
    uint64_t v100 = qword_864D0;
    swift_bridgeObjectRetain();
    unint64_t v8 = v215;
    if (v100 != -1) {
LABEL_119:
    }
      swift_once();
    sub_13CE0(v219, (uint64_t)qword_87DE8);
    sub_A5D0();
    uint64_t v101 = sub_68410();
    unint64_t v22 = v102;
    swift_bridgeObjectRelease();
    if ((v8 & 0x8000000000000000) == 0) {
      break;
    }
    __break(1u);
LABEL_121:
    swift_once();
LABEL_12:
    uint64_t v21 = v219;
    uint64_t v47 = sub_13CE0(v219, (uint64_t)qword_86500);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v212, v47, v21);
LABEL_16:
    uint64_t v34 = (uint64_t)v204;
  }
  uint64_t v104 = sub_3E890(v8, v101, v22, v103);
  unint64_t v106 = v105;
  swift_bridgeObjectRelease();
  if ((v104 ^ v106) >= 0x4000)
  {
    sub_FF80((uint64_t)v218);

    uint64_t v141 = sub_681D0();
    uint64_t v143 = v142;

    swift_bridgeObjectRelease();
    sub_A8C0(v201, &qword_81838);
    (*(void (**)(char *, uint64_t))(v211 + 8))(v212, v219);
    uint64_t v34 = (uint64_t)v204;
    *((void *)v204 + 2) = v141;
    *(void *)(v34 + 24) = v143;
    uint64_t v144 = v213;
    v145 = (char *)(v34 + *(int *)(v213 + 28));
    uint64_t v146 = sub_4890(&qword_81188);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v146 - 8) + 56))(v145, 1, 1, v146);
    v147 = (char *)(v34 + *(int *)(v144 + 32));
    *(_DWORD *)v147 = 0;
    v147[4] = 1;
    uint64_t v148 = v203;
    uint64_t v136 = v202;
    goto LABEL_81;
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t)v204;
LABEL_71:
  uint64_t v107 = v199;
  char v108 = sub_67300();
  unint64_t v109 = v211;
  unint64_t v111 = v211 + 16;
  Swift::Int v110 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
  if ((v108 & 1) == 0)
  {
    v191 = v43;
    unint64_t v127 = (unint64_t)v214;
    uint64_t v128 = v219;
    v110(v214, v212, v219);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v109 + 56))(v127, 0, 1, v128);
    uint64_t v129 = (uint64_t)v218;
    uint64_t v130 = v200;
    uint64_t v131 = sub_3EE38((uint64_t)v218, (uint64_t)v209, v200, a5, v107, v215, v127);
    unint64_t v133 = v132;
    uint64_t v217 = v134;
    sub_FF80(v129);
    sub_A8C0(v127, &qword_81838);
    id v135 = v210;
    if (v133 != 1)
    {
      uint64_t v136 = v202;
      uint64_t v137 = v131;
      *(void *)(v34 + 16) = v131;
      *(void *)(v34 + 24) = v133;
      uint64_t v138 = v217;
      if ((v217 & 0x100000000) != 0)
      {
        swift_bridgeObjectRetain();
        v139 = v200;
        CTFontRef v140 = a5;
      }
      else
      {
        swift_bridgeObjectRetain();
        v139 = v200;
        uint64_t v154 = sub_303B4();
        CTFontRef v140 = a5;
        if (v155)
        {
          uint64_t v222 = v154;
          uint64_t v223 = v155;
          unint64_t v156 = v133;
          uint64_t v157 = v138;
          v158 = v194;
          sub_671B0();
          sub_A5D0();
          sub_68410();
          v159 = v158;
          uint64_t v138 = v157;
          unint64_t v133 = v156;
          (*(void (**)(char *, uint64_t))(v211 + 8))(v159, v219);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v160 = sub_4890(&qword_81188);
      uint64_t v161 = (uint64_t)v206;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v160 - 8) + 56))(v206, 1, 1, v160);

      uint64_t v162 = v213;
      sub_1D2D8(v161, v34 + *(int *)(v213 + 28), &qword_81830);
      v163 = (char *)(v34 + *(int *)(v162 + 32));
      *(_DWORD *)v163 = v138;
      v163[4] = BYTE4(v138) & 1;

      if (v133)
      {
        if ((v133 & 0x2000000000000000) != 0) {
          uint64_t v164 = HIBYTE(v133) & 0xF;
        }
        else {
          uint64_t v164 = v137 & 0xFFFFFFFFFFFFLL;
        }
        sub_A8C0(v201, &qword_81838);
        (*(void (**)(char *, uint64_t))(v211 + 8))(v212, v219);
        sub_3F05C(v137, v133);
        uint64_t v148 = v203;
        if (v164) {
          goto LABEL_81;
        }
      }
      else
      {
        sub_A8C0(v201, &qword_81838);
        (*(void (**)(char *, uint64_t))(v211 + 8))(v212, v219);
        sub_3F05C(v137, 0);
        uint64_t v148 = v203;
      }
      if ((v138 & 0x100000000) != 0 || (unsigned __int16)v138 == WORD1(v138)) {
        v191[v34] = 0;
      }
      goto LABEL_81;
    }
    goto LABEL_86;
  }
  Swift::Int v112 = v212;
  uint64_t v113 = v219;
  uint64_t v114 = *(const __CTFont **)(v211 + 16);
  v110(v198, v212, v219);
  v209 = v114;
  ((void (*)(char *, char *, uint64_t))v114)(v216, v112, v113);
  if (!v217)
  {
    uint64_t v130 = v200;
    v149 = v200;
    sub_A370((uint64_t)&v221);
    v150 = v107;
    v151 = a5;
    uint64_t v152 = (uint64_t)v218;
    id v135 = v210;
LABEL_85:
    v153 = *(void (**)(char *, uint64_t))(v109 + 8);
    uint64_t v128 = v219;
    v153(v198, v219);
    sub_A174((uint64_t)&v221);
    sub_FF80(v152);

    v153(v216, v128);
LABEL_86:

    sub_A8C0(v201, &qword_81838);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v212, v128);

    goto LABEL_87;
  }
  unint64_t v205 = v111;
  v191 = v43;
  v206 = v200;
  sub_117F4((uint64_t)v218);
  sub_A370((uint64_t)&v221);
  uint64_t v115 = (void (**)(unint64_t, void, uint64_t, uint64_t))(v109 + 56);
  Swift::Int v116 = v107;
  *(void *)&long long v207 = a5;
  unint64_t v117 = 0;
  uint64_t v118 = v192 + 48;
  unint64_t v119 = (unint64_t)v214;
  while (1)
  {
    uint64_t v120 = *(void *)(v118 - 16);
    uint64_t v121 = v219;
    ((void (*)(unint64_t, char *, uint64_t))v209)(v119, v216, v219);
    char v122 = *v115;
    (*v115)(v119, 0, 1, v121);
    sub_A370((uint64_t)&v221);
    swift_bridgeObjectRetain();
    uint64_t v123 = v116;
    uint64_t v124 = sub_3EE38((uint64_t)v218, v120, v206, (const __CTFont *)v207, v116, v215, v119);
    uint64_t v126 = v125;
    sub_A8C0(v119, &qword_81838);
    swift_bridgeObjectRelease();
    sub_A174((uint64_t)&v221);
    uint64_t result = sub_3F05C(v124, v126);
    if (v126 != 1) {
      break;
    }
    ++v117;
    v118 += 32;
    Swift::Int v116 = v123;
    if (v217 == v117) {
      goto LABEL_84;
    }
  }
  if (v217 == v117)
  {
LABEL_84:
    uint64_t v152 = (uint64_t)v218;
    sub_FF80((uint64_t)v218);
    uint64_t v34 = (uint64_t)v204;
    unint64_t v109 = v211;
    id v135 = v210;
    a5 = v197;
    uint64_t v107 = v199;
    uint64_t v130 = v200;
    goto LABEL_85;
  }
  if (v117 < *(void *)(v192 + 16))
  {
    uint64_t v165 = *(void *)(v118 - 16);
    unint64_t v166 = (unint64_t)v214;
    v167 = v198;
    uint64_t v168 = v219;
    ((void (*)(char *, char *, uint64_t))v209)(v214, v198, v219);
    v122(v166, 0, 1, v168);
    swift_bridgeObjectRetain();
    uint64_t v169 = (uint64_t)v218;
    uint64_t v170 = v165;
    v171 = v206;
    v172 = (void *)v207;
    uint64_t v217 = sub_3EE38((uint64_t)v218, v170, v206, (const __CTFont *)v207, v123, v215, v166);
    v209 = v123;
    unint64_t v174 = v173;
    unint64_t v215 = v175;
    sub_A8C0(v166, &qword_81838);
    sub_FF80(v169);
    v176 = *(void (**)(char *, uint64_t))(v211 + 8);
    v176(v167, v168);
    uint64_t result = swift_bridgeObjectRelease();
    if (v174 != 1)
    {
      sub_A174((uint64_t)&v221);
      sub_FF80(v169);

      v176(v216, v168);
      v177 = v204;
      *((void *)v204 + 2) = v217;
      *((void *)v177 + 3) = v174;
      v178 = v171;
      unint64_t v179 = v215;
      if ((v215 & 0x100000000) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v180 = sub_303B4();
        if (v181)
        {
          uint64_t v222 = v180;
          uint64_t v223 = v181;
          v182 = v194;
          sub_671B0();
          sub_A5D0();
          sub_68410();
          v176(v182, v219);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v183 = sub_4890(&qword_81188);
      uint64_t v184 = (uint64_t)v193;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v183 - 8) + 56))(v193, 1, 1, v183);

      uint64_t v185 = v213;
      v186 = v204;
      sub_1D2D8(v184, (uint64_t)&v204[*(int *)(v213 + 28)], &qword_81830);
      v187 = &v186[*(int *)(v185 + 32)];
      *(_DWORD *)v187 = v179;
      v187[4] = BYTE4(v179) & 1;

      if (!v174)
      {
        sub_A8C0(v201, &qword_81838);
        v176(v212, v219);
        sub_3F05C(v217, 0);
        uint64_t v148 = v203;
        uint64_t v136 = v202;
        uint64_t v34 = (uint64_t)v204;
        v190 = v191;
        goto LABEL_113;
      }
      uint64_t v188 = v217;
      if ((v174 & 0x2000000000000000) != 0) {
        uint64_t v189 = HIBYTE(v174) & 0xF;
      }
      else {
        uint64_t v189 = v217 & 0xFFFFFFFFFFFFLL;
      }
      sub_A8C0(v201, &qword_81838);
      v176(v212, v219);
      sub_3F05C(v188, v174);
      uint64_t v148 = v203;
      uint64_t v136 = v202;
      uint64_t v34 = (uint64_t)v204;
      v190 = v191;
      if (!v189)
      {
LABEL_113:
        if ((v179 & 0x100000000) != 0 || (unsigned __int16)v179 == WORD1(v179)) {
          v190[v34] = 0;
        }
      }
LABEL_81:
      sub_3F18C(v34, v148, type metadata accessor for FeaturePreviewConfiguration);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v136 + 56))(v148, 0, 1, v213);
      return sub_3F070(v34);
    }
    goto LABEL_124;
  }
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
  return result;
}

uint64_t sub_39EF4(uint64_t a1)
{
  unint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  sub_FBA8(*(void *)a1, v3, v4);
  uint64_t v5 = sub_C078(v2, v3, v4);
  if (v6 != 9)
  {
    if (v6 == 6 || v6 == 5)
    {
      sub_1D6A0(v5, v6);
      return 1;
    }
    sub_1D6A0(v5, v6);
  }
  sub_1D2D8(a1 + 56, (uint64_t)v19, &qword_81840);
  sub_1D2D8((uint64_t)v19, (uint64_t)v20, &qword_81840);
  if (v21) {
    return 0;
  }
  sub_FBA8(v2, v3, v4);
  uint64_t v8 = sub_C078(v2, v3, v4);
  if (v9 - 1 < 2) {
    return 0;
  }
  if (v9 == 9)
  {
    if ((v4 & 1) == 0)
    {
      uint64_t result = 0;
      if (v2 <= 0x1A && ((1 << v2) & 0x6400042) != 0) {
        return result;
      }
      if (v2 == 103) {
        return result;
      }
    }
  }
  else
  {
    sub_1D6A0(v8, v9);
  }
  if (sub_60330()) {
    return 1;
  }
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(v18 + 16);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = (unsigned char *)(swift_bridgeObjectRetain() + 57); ; i += 32)
  {
    uint64_t v12 = *(void *)(i - 9);
    uint64_t v13 = *(void *)(i - 17);
    uint64_t v14 = *(void *)(i - 25);
    __int16 v15 = *i ? 256 : 0;
    __int16 v16 = v15 | *(i - 1);
    swift_bridgeObjectRetain();
    int v17 = sub_6034C(v14, v13, v12, v16);
    swift_bridgeObjectRelease();
    if (v17 != 2) {
      break;
    }
    if (!--v10)
    {
      sub_A174((uint64_t)&v18);
      return 0;
    }
  }
  sub_A174((uint64_t)&v18);
  return 1;
}

BOOL sub_3A0C8(uint64_t a1)
{
  sub_1D2D8(a1 + 56, (uint64_t)v8, &qword_81840);
  sub_1D2D8((uint64_t)v8, (uint64_t)v9, &qword_81840);
  if (!v10)
  {
    unint64_t v2 = *(void *)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    char v4 = *(unsigned char *)(a1 + 16);
    sub_FBA8(*(void *)a1, v3, v4);
    uint64_t v5 = sub_C078(v2, v3, v4);
    if (v6 - 1 >= 2)
    {
      if (v6 != 9)
      {
        sub_1D6A0(v5, v6);
        return 1;
      }
      if ((v4 & 1) != 0 || (v2 > 0x1A || ((1 << v2) & 0x6400042) == 0) && v2 != 103) {
        return 1;
      }
    }
  }
  return (sub_39EF4(a1) & 1) == 0;
}

unint64_t sub_3A1B0(uint64_t a1)
{
  uint64_t v2 = sub_4890(&qword_81A10);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_4890(&qword_81A08);
  uint64_t v6 = sub_68660();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v27 = &v5[*(int *)(v2 + 48)];
  uint64_t v9 = v6 + 64;
  uint64_t v10 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v25 = a1;
  uint64_t v11 = a1 + ((v10 + 32) & ~v10);
  uint64_t v26 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_A85C(v11, (uint64_t)v5, &qword_81A10);
    uint64_t v12 = *(void *)v5;
    uint64_t v13 = *((void *)v5 + 1);
    char v14 = v5[16];
    Swift::UInt v15 = *((void *)v5 + 3);
    unint64_t result = sub_3C9D0(*(void *)v5, v13, v14, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = v7[6] + 32 * result;
    *(void *)uint64_t v19 = v12;
    *(void *)(v19 + 8) = v13;
    *(unsigned char *)(v19 + 16) = v14;
    *(void *)(v19 + 24) = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
    unint64_t result = sub_3F124((uint64_t)v27, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, type metadata accessor for FeaturePreviewConfigurationCache.Value);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    uint64_t v7[2] = v24;
    v11 += v26;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_3A3CC()
{
  if (qword_864D0 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_671F0();
  return sub_13CE0(v0, (uint64_t)qword_87DE8);
}

uint64_t sub_3A430(uint64_t a1)
{
  return sub_3C55C(a1, qword_87DE8, (uint64_t (*)(void))&static CharacterSet.whitespacesAndNewlines.getter, (void (*)(uint64_t))&static CharacterSet.nonBaseCharacters.getter, (void (*)(uint64_t))&static CharacterSet.controlCharacters.getter);
}

uint64_t sub_3A478@<X0>(uint64_t a1@<X8>)
{
  if (qword_864D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_671F0();
  uint64_t v3 = sub_13CE0(v2, (uint64_t)qword_87DE8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

void *sub_3A520(uint64_t a1, unint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v79 = a4;
  uint64_t v7 = 0;
  uint64_t v8 = sub_4890(&qword_81A38);
  __chkstk_darwin(v8 - 8);
  CTFontRef v84 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(a1 + 16);
  if (a2 < 2)
  {
    if (v10)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        __int16 v65 = *(_WORD *)(a1 + 2 * i + 32);
        uint64_t v66 = sub_30400();
        if (v67)
        {
          unint64_t v68 = v67;
          __chkstk_darwin(v66);
          unint64_t v72 = v79;
          char v70 = sub_3AC28((uint64_t (*)(void *))sub_41BA0, (uint64_t)&v74[-4], v69, v68);
          swift_bridgeObjectRelease();
          if (v70)
          {
            swift_bridgeObjectRelease();
            goto LABEL_62;
          }
        }
      }
      swift_bridgeObjectRelease();
      __int16 v65 = *(_WORD *)(a1 + 32);
LABEL_62:
      sub_4890(&qword_80D40);
      uint64_t v12 = (void *)swift_allocObject();
      *((_OWORD *)v12 + 1) = xmmword_693E0;
      *((_WORD *)v12 + 16) = v65;
    }
    else
    {
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    BOOL v11 = _swiftEmptyArrayStorage[2] >= a2 || v10 == 0;
    uint64_t v12 = _swiftEmptyArrayStorage;
    if (!v11)
    {
      unint64_t v13 = 0;
      uint64_t v80 = &_swiftEmptyArrayStorage[2];
      unint64_t v77 = v10;
      uint64_t v78 = a1 + 32;
      uint64_t v12 = _swiftEmptyArrayStorage;
      uint64_t v75 = a3;
      unint64_t v76 = a2;
      while (1)
      {
        int v14 = *(unsigned __int16 *)(v78 + 2 * v13);
        Swift::UInt v15 = a3;
        __int16 v16 = sub_30574(*(_WORD *)(v78 + 2 * v13));
        if (v16) {
          char v17 = v16;
        }
        else {
          char v17 = (char *)_swiftEmptyArrayStorage;
        }
        uint64_t v18 = sub_68370();
        uint64_t v19 = v18;
        uint64_t v20 = *((void *)v17 + 2);
        int v82 = v14;
        if (v20)
        {
          uint64_t v83 = v7;
          uint64_t v81 = v12;
          uint64_t v21 = 0;
          uint64_t v22 = v18 + 56;
          while (1)
          {
            uint64_t v23 = *(unsigned __int16 *)&v17[2 * v21++ + 32];
            uint64_t v24 = sub_687D0();
            uint64_t v25 = -1 << *(unsigned char *)(v19 + 32);
            unint64_t v26 = v24 & ~v25;
            if (((*(void *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
              goto LABEL_19;
            }
            uint64_t v27 = *(void *)(v19 + 48);
            if (*(unsigned __int16 *)(v27 + 2 * v26) == v23)
            {
LABEL_12:
              if (v21 == v20) {
                goto LABEL_21;
              }
            }
            else
            {
              uint64_t v28 = ~v25;
              while (1)
              {
                unint64_t v26 = (v26 + 1) & v28;
                if (((*(void *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                  break;
                }
                if (*(unsigned __int16 *)(v27 + 2 * v26) == v23) {
                  goto LABEL_12;
                }
              }
LABEL_19:
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v87 = v19;
              sub_20284(v23, v26, isUniquelyReferenced_nonNull_native);
              uint64_t v19 = v87;
              swift_bridgeObjectRelease();
              if (v21 == v20)
              {
LABEL_21:
                swift_bridgeObjectRelease();
                a3 = v75;
                uint64_t v12 = v81;
                uint64_t v7 = v83;
                LOWORD(v14) = v82;
                goto LABEL_23;
              }
              uint64_t v22 = v19 + 56;
            }
          }
        }
        swift_bridgeObjectRelease();
        a3 = v15;
LABEL_23:
        uint64_t v30 = sub_30400();
        if (!v31) {
          goto LABEL_39;
        }
        uint64_t v32 = v30;
        unint64_t v33 = v31;
        __chkstk_darwin(v30);
        unint64_t v72 = v79;
        if ((sub_3AC28((uint64_t (*)(void *))sub_41BA0, (uint64_t)&v74[-4], v32, v33) & 1) == 0) {
          break;
        }
        uint64_t v81 = (void *)v13;
        uint64_t v34 = v12;
        id v35 = a3;
        uint64_t v36 = swift_bridgeObjectRetain();
        uint64_t v37 = sub_3E92C(v36);
        uint64_t v83 = v7;
        uint64_t v38 = v34;
        swift_bridgeObjectRelease();

        uint64_t v39 = v37[2];
        if (v39)
        {
          swift_bridgeObjectRetain();
          v74[1] = v37;
          uint64_t v40 = v37 + 5;
          while (1)
          {
            uint64_t v41 = *v40;
            uint64_t v87 = *(v40 - 1);
            uint64_t v88 = v41;
            uint64_t v85 = v32;
            unint64_t v86 = v33;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v42 = (uint64_t)v84;
            sub_672E0();
            uint64_t v43 = sub_672F0();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 0, 1, v43);
            unint64_t v72 = sub_A5D0();
            unint64_t v73 = v72;
            uint64_t v44 = sub_68430();
            sub_A8C0(v42, &qword_81A38);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v44) {
              break;
            }
            v40 += 2;
            if (!--v39)
            {
              swift_bridgeObjectRelease();
              a3 = v75;
              LOWORD(v14) = v82;
              goto LABEL_30;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          a3 = v75;
          unint64_t v54 = v76;
          unint64_t v55 = v77;
          unint64_t v13 = (unint64_t)v81;
          uint64_t v12 = v38;
          uint64_t v7 = v83;
          goto LABEL_41;
        }
LABEL_30:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = *v80;
        if (*v80)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v46 = 0;
          uint64_t v47 = &_swiftEmptySetSingleton;
          do
          {
            uint64_t v48 = (uint64_t)v47;
            unsigned __int16 v49 = *((_WORD *)v38 + v46 + 16);
            swift_bridgeObjectRetain();
            int v50 = sub_30574(v49);
            if (v50) {
              unint64_t v51 = v50;
            }
            else {
              unint64_t v51 = (char *)_swiftEmptyArrayStorage;
            }
            ++v46;
            uint64_t v52 = sub_3EA1C((uint64_t)v51);
            swift_bridgeObjectRelease();
            uint64_t v47 = (void *)sub_1EAD0(v52, v48);
            swift_bridgeObjectRelease();
          }
          while (v45 != v46);
          swift_bridgeObjectRelease_n();
          char v53 = (char *)v38;
          uint64_t v7 = v83;
          LOWORD(v14) = v82;
          a3 = v75;
        }
        else
        {
          uint64_t v47 = &_swiftEmptySetSingleton;
          char v53 = (char *)v38;
          uint64_t v7 = v83;
        }
        uint64_t v57 = sub_3CED4(v19, (uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v58 = *(void *)(v57 + 16);
        swift_release();
        unint64_t v54 = v76;
        unint64_t v13 = (unint64_t)v81;
        if (!v58)
        {
          CGPathRef PathForGlyph = CTFontCreatePathForGlyph((CTFontRef)v35, v14, 0);
          if (PathForGlyph)
          {
            CGPathRef v60 = PathForGlyph;
            BOOL v61 = sub_61F60();

            uint64_t v12 = v53;
            if (v61)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v12 = sub_3091C(0, *v80 + 1, 1, v53);
              }
              unint64_t v63 = v12[2];
              unint64_t v62 = v12[3];
              if (v63 >= v62 >> 1) {
                uint64_t v12 = sub_3091C((char *)(v62 > 1), v63 + 1, 1, (char *)v12);
              }
              v12[2] = v63 + 1;
              *((_WORD *)v12 + v63 + 16) = v14;
            }
            goto LABEL_40;
          }
        }
        unint64_t v55 = v77;
        uint64_t v12 = v53;
LABEL_41:
        unint64_t v56 = v12[2];
        uint64_t v80 = v12 + 2;
        if (v56 < v54 && ++v13 < v55) {
          continue;
        }
        return v12;
      }
      swift_bridgeObjectRelease();
LABEL_39:
      swift_bridgeObjectRelease();
      unint64_t v54 = v76;
LABEL_40:
      unint64_t v55 = v77;
      goto LABEL_41;
    }
  }
  return v12;
}

uint64_t sub_3AC28(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = sub_68530();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          sub_68590();
        }
        int v10 = sub_685A0();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        char v14 = 1;
        return v14 & 1;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 0;
  }
  else
  {
    char v14 = 1;
  }
  return v14 & 1;
}

uint64_t sub_3AD6C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    uint64_t v5 = (uint64_t (*)(void *))result;
    unint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(a3 + 40);
    uint64_t v8 = _swiftEmptyArrayStorage;
    Swift::UInt v15 = (uint64_t (*)(void *))result;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      char v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v11)
      {
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v19 = v8;
        if ((result & 1) == 0)
        {
          unint64_t result = (uint64_t)sub_3CBA8(0, v8[2] + 1, 1);
          uint64_t v8 = v19;
        }
        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          unint64_t result = (uint64_t)sub_3CBA8((char *)(v12 > 1), v13 + 1, 1);
          uint64_t v8 = v19;
        }
        uint64_t v8[2] = v13 + 1;
        char v14 = &v8[2 * v13];
        void v14[4] = v10;
        v14[5] = v9;
        uint64_t v4 = a3;
        uint64_t v5 = v15;
      }
      else
      {
        unint64_t result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

unint64_t sub_3AEE4(uint64_t a1, const __CTFont *a2, const __CTFont *a3, uint64_t a4)
{
  type metadata accessor for CTFont(0);
  sub_418A8(&qword_81480, type metadata accessor for CTFont);
  if (sub_67300()) {
    goto LABEL_52;
  }
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = 100;
  if (v9 < 0x64) {
    uint64_t v10 = *(void *)(a1 + 16);
  }
  uint64_t v58 = v10;
  unint64_t v59 = v9;
  if (!v10)
  {
LABEL_52:
    unsigned int v53 = 0;
    int v55 = 1;
LABEL_53:
    LOBYTE(v63) = v55 & 1;
    return v53 | ((unint64_t)(v55 & 1) << 32);
  }
  CTFontRef v54 = a2;
  uint64_t v51 = a4;
  uint64_t v52 = 0;
  unsigned int v53 = 0;
  uint64_t v11 = 0;
  uint64_t v57 = a1 + 32;
  long long v62 = xmmword_693E0;
  int v55 = 1;
  unint64_t v56 = a3;
  while (1)
  {
    if (v11 == v59)
    {
      __break(1u);
LABEL_55:
      int v55 = 0;
      unsigned int v53 = v4 | (a1 << 16);
      goto LABEL_53;
    }
    int v4 = *(unsigned __int16 *)(v57 + 2 * v11);
    uint64_t v12 = sub_4890(&qword_80D40);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = v62;
    *(_WORD *)(v13 + 32) = v4;
    char v14 = sub_2FDD0(v13);
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_68370();
    uint64_t v16 = v14[2];
    if (v16)
    {
      uint64_t v60 = v12;
      int v61 = v4;
      uint64_t v17 = 0;
      do
      {
        uint64_t v19 = v15 + 56;
        while (1)
        {
          uint64_t v20 = *((unsigned __int16 *)v14 + v17++ + 16);
          uint64_t v21 = sub_687D0();
          uint64_t v22 = -1 << *(unsigned char *)(v15 + 32);
          unint64_t v23 = v21 & ~v22;
          if (((*(void *)(v19 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          uint64_t v24 = *(void *)(v15 + 48);
          if (*(unsigned __int16 *)(v24 + 2 * v23) != v20)
          {
            uint64_t v25 = ~v22;
            do
            {
              unint64_t v23 = (v23 + 1) & v25;
              if (((*(void *)(v19 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
                goto LABEL_11;
              }
            }
            while (*(unsigned __int16 *)(v24 + 2 * v23) != v20);
          }
          if (v17 == v16) {
            goto LABEL_20;
          }
        }
LABEL_11:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v63 = v15;
        sub_20284(v20, v23, isUniquelyReferenced_nonNull_native);
        uint64_t v15 = v63;
        swift_bridgeObjectRelease();
      }
      while (v17 != v16);
LABEL_20:
      swift_bridgeObjectRelease();
      a3 = v56;
      int v4 = v61;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t inited = swift_initStackObject();
    LODWORD(a1) = inited;
    *(_OWORD *)(inited + 16) = v62;
    *(_WORD *)(inited + 32) = v4;
    uint64_t v27 = (char *)sub_3D674(inited, v15);
    unint64_t result = swift_setDeallocating();
    char v29 = v27[32];
    uint64_t v30 = 1 << v29;
    unint64_t v31 = *((void *)v27 + 7);
    if (v31)
    {
      uint64_t v32 = 0;
    }
    else
    {
      unsigned int v39 = v29 & 0x3F;
      if (v39 < 7) {
        goto LABEL_6;
      }
      unint64_t v31 = *((void *)v27 + 8);
      if (v31)
      {
        uint64_t v32 = 1;
      }
      else
      {
        if (v39 < 8) {
          goto LABEL_6;
        }
        unint64_t v31 = *((void *)v27 + 9);
        if (!v31)
        {
          uint64_t v47 = 0;
          unint64_t v48 = (unint64_t)(v30 + 63) >> 6;
          if (v48 <= 3) {
            unint64_t v48 = 3;
          }
          unint64_t v49 = v48 - 3;
          while (v49 != v47)
          {
            unint64_t v31 = *(void *)&v27[8 * v47++ + 80];
            if (v31)
            {
              uint64_t v32 = v47 + 2;
              goto LABEL_24;
            }
          }
LABEL_6:
          swift_release();
          goto LABEL_7;
        }
        uint64_t v32 = 2;
      }
    }
LABEL_24:
    unint64_t v33 = __clz(__rbit64(v31));
    uint64_t v34 = v33 + (v32 << 6);
    if (v34 == v30) {
      goto LABEL_6;
    }
    if (v34 < 0 || v34 >= v30) {
      break;
    }
    if (((*(void *)&v27[(((unint64_t)v34 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56] >> v33) & 1) == 0) {
      goto LABEL_57;
    }
    LODWORD(a1) = *(unsigned __int16 *)(*((void *)v27 + 6) + 2 * v34);
    swift_release();
    if (v4 != a1)
    {
      CGPathRef PathForGlyph = CTFontCreatePathForGlyph(v54, v4, 0);
      if (PathForGlyph)
      {
        CGPathRef v36 = PathForGlyph;
        CGPathRef v37 = CTFontCreatePathForGlyph(a3, a1, 0);
        if (v37)
        {
          CGPathRef v38 = v37;
          type metadata accessor for CGPath(0);
          sub_418A8(&qword_81A28, type metadata accessor for CGPath);
          if (sub_67300())
          {
          }
          else
          {
            BOOL v40 = sub_61F60();

            if (v40)
            {
              uint64_t v41 = sub_30400();
              if (v42)
              {
                unint64_t v43 = v42;
                __chkstk_darwin(v41);
                uint64_t v44 = v52;
                v50[2] = v51;
                char v46 = sub_3AC28((uint64_t (*)(void *))sub_41AE0, (uint64_t)v50, v45, v43);
                uint64_t v52 = v44;
                swift_bridgeObjectRelease();
                if (v46) {
                  goto LABEL_55;
                }
              }
              if (v55)
              {
                int v55 = 0;
                unsigned int v53 = v4 | (a1 << 16);
              }
              else
              {
                int v55 = 0;
              }
            }
          }
        }
        else
        {
        }
      }
    }
LABEL_7:
    if (++v11 == v58) {
      goto LABEL_53;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

Swift::Int sub_3B3F8()
{
  Swift::UInt v1 = *(void *)(v0 + 24);
  sub_687F0();
  sub_1192C();
  sub_68140();
  sub_68800(v1);
  return sub_68830();
}

void sub_3B47C()
{
  Swift::UInt v1 = *(void *)(v0 + 24);
  sub_1192C();
  sub_68140();
  sub_68800(v1);
}

Swift::Int sub_3B4E8()
{
  Swift::UInt v1 = *(void *)(v0 + 24);
  sub_687F0();
  sub_1192C();
  sub_68140();
  sub_68800(v1);
  return sub_68830();
}

uint64_t sub_3B568(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  return sub_B0A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16)) & (v2 == v3);
}

unint64_t sub_3B5B4()
{
  return sub_3A1B0((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_3B5C0@<X0>(uint64_t (*a1)(uint64_t a1)@<X0>, uint64_t a2@<X1>, const __CTFont *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v57 = a4;
  uint64_t v58 = a3;
  uint64_t v51 = a1;
  uint64_t v6 = sub_4890(&qword_81838);
  __chkstk_darwin(v6 - 8);
  int v50 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_81120);
  __chkstk_darwin(v8 - 8);
  unsigned int v53 = (void *)((char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  __chkstk_darwin(v10);
  uint64_t v49 = (uint64_t)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_4890(&qword_81848);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v54 = (uint64_t)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v48 - v15;
  uint64_t v17 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v23 = (char *)v48 - v22;
  uint64_t v25 = *(void *)a2;
  uint64_t v24 = *(void *)(a2 + 8);
  char v26 = *(unsigned char *)(a2 + 16);
  uint64_t v52 = v4 + 16;
  swift_beginAccess();
  uint64_t v27 = *(void *)(v4 + 16);
  if (*(void *)(v27 + 16))
  {
    sub_FBA8(v25, v24, v26);
    sub_FBA8(v25, v24, v26);
    unint64_t v28 = sub_3C9D0(v25, v24, v26, (Swift::UInt)v58);
    if (v29)
    {
      sub_3F18C(*(void *)(v27 + 56) + *(void *)(v18 + 72) * v28, (uint64_t)v16, type metadata accessor for FeaturePreviewConfigurationCache.Value);
      uint64_t v30 = *(void **)(v18 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v30)(v16, 0, 1, v17);
    }
    else
    {
      uint64_t v30 = *(void **)(v18 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v16, 1, 1, v17);
    }
    sub_FFE0(v25, v24, v26);
  }
  else
  {
    uint64_t v30 = *(void **)(v18 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v16, 1, 1, v17);
    sub_FBA8(v25, v24, v26);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v48[1] = v18;
    sub_A8C0((uint64_t)v16, &qword_81848);
    swift_endAccess();
    uint64_t v31 = sub_671F0();
    uint64_t v32 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v50, 1, 1, v31);
    unint64_t v33 = v51;
    sub_117F4(a2);
    uint64_t v34 = (void (*)(void, void, void, void))v53;
    id v35 = v58;
    sub_38718(v33, a2, v58, v32, 0, 1, 2, (uint64_t)v53);
    uint64_t v37 = v55;
    uint64_t v36 = v56;
    if ((*(unsigned int (**)(void (*)(void, void, void, void), uint64_t, uint64_t))(v55 + 48))(v34, 1, v56) == 1)
    {
      sub_A8C0((uint64_t)v34, &qword_81120);
      CGPathRef v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
      uint64_t v39 = v54;
      v38(v54, 1, 1, v36);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v30)(v39, 0, 1, v17);
      swift_beginAccess();
      sub_3BC98(v39, v25, v24, v26, (Swift::UInt)v35);
      swift_endAccess();
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v38)(v57, 1, 1, v36);
    }
    else
    {
      uint64_t v43 = v49;
      unsigned int v53 = v30;
      uint64_t v51 = type metadata accessor for FeaturePreviewConfiguration;
      sub_3F124((uint64_t)v34, v49, type metadata accessor for FeaturePreviewConfiguration);
      uint64_t v44 = v54;
      sub_3F18C(v43, v54, type metadata accessor for FeaturePreviewConfiguration);
      uint64_t v45 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56);
      v45(v44, 0, 1, v36);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v53)(v44, 0, 1, v17);
      swift_beginAccess();
      sub_3BC98(v44, v25, v24, v26, (Swift::UInt)v58);
      swift_endAccess();
      uint64_t v46 = v57;
      sub_3F124(v43, v57, v51);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v45)(v46, 0, 1, v36);
    }
  }
  else
  {
    sub_3F124((uint64_t)v16, (uint64_t)v23, type metadata accessor for FeaturePreviewConfigurationCache.Value);
    swift_endAccess();
    sub_FFE0(v25, v24, v26);
    sub_3F124((uint64_t)v23, (uint64_t)v21, type metadata accessor for FeaturePreviewConfigurationCache.Value);
    uint64_t v42 = v55;
    uint64_t v41 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v21, 1, v56) == 1)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v57, 1, 1, v41);
    }
    else
    {
      uint64_t v47 = v57;
      sub_3F124((uint64_t)v21, v57, type metadata accessor for FeaturePreviewConfiguration);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v47, 0, 1, v41);
    }
  }
}

uint64_t sub_3BC98(uint64_t a1, uint64_t a2, uint64_t a3, char a4, Swift::UInt a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_4890(&qword_81848);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
  __chkstk_darwin(v15);
  uint64_t v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v18 + 48))(a1, 1) == 1)
  {
    sub_A8C0(a1, &qword_81848);
    sub_3DA94(a2, a3, a4 & 1, a5, (uint64_t)v14);
    sub_FFE0(a2, a3, a4 & 1);
    return sub_A8C0((uint64_t)v14, &qword_81848);
  }
  else
  {
    sub_3F124(a1, (uint64_t)v17, type metadata accessor for FeaturePreviewConfigurationCache.Value);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v6;
    *uint64_t v6 = 0x8000000000000000;
    sub_3E2F0((uint64_t)v17, a2, a3, a4 & 1, a5, isUniquelyReferenced_nonNull_native);
    *uint64_t v6 = v22;
    swift_bridgeObjectRelease();
    return sub_FFE0(a2, a3, a4 & 1);
  }
}

BOOL sub_3BE9C(uint64_t (*a1)(uint64_t a1), uint64_t a2)
{
  uint64_t v4 = sub_4890(&qword_81120);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7 - 1;
  uint64_t v9 = swift_bridgeObjectRetain() + 48;
  do
  {
    uint64_t v10 = *(const __CTFont **)(v9 - 16);
    swift_bridgeObjectRetain();
    sub_3B5C0(a1, a2, v10, (uint64_t)v6);
    uint64_t v11 = type metadata accessor for FeaturePreviewConfiguration(0);
    LODWORD(v1sub_66CA4(2, 18, 1, 0) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v6, 1, v11);
    sub_A8C0((uint64_t)v6, &qword_81120);
    swift_bridgeObjectRelease();
    BOOL v12 = v10 != 1;
    BOOL v13 = v10 != 1 || v8-- == 0;
    v9 += 32;
  }
  while (!v13);
  sub_A174((uint64_t)&v16);
  return v12;
}

uint64_t sub_3BFF8()
{
  unint64_t v1 = sub_3A1B0((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess();
  *(void *)(v0 + 16) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_3C04C()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_3C06C()
{
  swift_bridgeObjectRelease();
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_3C0A4()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = sub_3A1B0((uint64_t)_swiftEmptyArrayStorage);
  return v0;
}

uint64_t sub_3C0E8()
{
  *(void *)(v0 + 16) = sub_3A1B0((uint64_t)_swiftEmptyArrayStorage);
  return v0;
}

uint64_t sub_3C110()
{
  uint64_t v0 = sub_671F0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14688(v2, qword_864E0);
  uint64_t v5 = sub_13CE0(v0, (uint64_t)qword_864E0);
  sub_418A8(&qword_81A40, (void (*)(uint64_t))&type metadata accessor for CharacterSet);
  sub_68470();
  uint64_t v7[2] = 48;
  sub_68460();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v4, v0);
}

uint64_t sub_3C264(uint64_t a1)
{
  return sub_3C2A4(a1, qword_86500, (void (*)(void))&static CharacterSet.decimalDigits.getter);
}

uint64_t sub_3C284(uint64_t a1)
{
  return sub_3C2A4(a1, qword_86520, (void (*)(void))&static CharacterSet.alphanumerics.getter);
}

uint64_t sub_3C2A4(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = sub_671F0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14688(v7, a2);
  sub_13CE0(v5, (uint64_t)a2);
  a3();
  if (qword_864D8 != -1) {
    swift_once();
  }
  sub_13CE0(v5, (uint64_t)qword_864E0);
  sub_67190();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_3C3D8()
{
  uint64_t v0 = sub_671F0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14688(v2, qword_86540);
  sub_13CE0(v0, (uint64_t)qword_86540);
  if (qword_86518 != -1) {
    swift_once();
  }
  sub_13CE0(v0, (uint64_t)qword_86520);
  sub_671D0();
  sub_671C0();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_3C514(uint64_t a1)
{
  return sub_3C55C(a1, qword_86560, (uint64_t (*)(void))&static CharacterSet.alphanumerics.getter, (void (*)(uint64_t))&static CharacterSet.symbols.getter, (void (*)(uint64_t))&static CharacterSet.punctuationCharacters.getter);
}

uint64_t sub_3C55C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v9 = sub_671F0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  BOOL v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v24 - v18;
  sub_14688(v17, a2);
  sub_13CE0(v9, (uint64_t)a2);
  uint64_t v20 = a3();
  a4(v20);
  sub_671C0();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v13, v9);
  uint64_t v22 = ((uint64_t (*)(char *, uint64_t))v21)(v16, v9);
  a5(v22);
  sub_671C0();
  v21(v16, v9);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, v9);
}

uint64_t sub_3C714(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_4890(&qword_81838);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A85C(a2, (uint64_t)v5, &qword_81838);
  uint64_t v6 = sub_671F0();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_A8C0((uint64_t)v5, &qword_81838);
    char v8 = 1;
  }
  else
  {
    char v8 = sub_671E0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  return v8 & 1;
}

uint64_t sub_3C844()
{
  swift_getWitnessTable();
  return sub_67300();
}

uint64_t sub_3C8B0()
{
  return sub_67320();
}

uint64_t sub_3C8FC()
{
  return sub_67310();
}

Swift::Int sub_3C954()
{
  return sub_3C96C();
}

Swift::Int sub_3C96C()
{
  return sub_68830();
}

unint64_t sub_3C9D0(uint64_t a1, uint64_t a2, char a3, Swift::UInt a4)
{
  sub_687F0();
  sub_1192C();
  sub_68140();
  sub_68800(a4);
  Swift::Int v8 = sub_68830();
  return sub_3CA80(a1, a2, a3 & 1, a4, v8);
}

unint64_t sub_3CA80(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v7 = a5 & ~v6;
  if ((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v8 = ~v6;
    char v9 = a3 & 1;
    do
    {
      uint64_t v10 = *(void *)(v5 + 48) + 32 * v7;
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      char v13 = *(unsigned char *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      sub_FBA8(*(void *)v10, v12, v13);
      unsigned __int8 v15 = sub_B0A8(v11, v12, v13, a1, a2, v9);
      sub_FFE0(v11, v12, v13);
      if ((v15 & (v14 == a4)) != 0) {
        break;
      }
      unint64_t v7 = (v7 + 1) & v8;
    }
    while (((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

char *sub_3CB88(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_3CBC8(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_3CBA8(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_3CCCC(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_3CBC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80ED8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_3CCCC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81A30);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_3CDD0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81A30);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_3CED4(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_3D05C((uint64_t)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_3D05C((uint64_t)v8, v5, a2, v3);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

uint64_t sub_3D05C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = (unint64_t *)result;
  uint64_t v6 = 0;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = a4 + 56;
    uint64_t v9 = 1 << *(unsigned char *)(a4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(a4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v7 << 6);
      }
      else
      {
        int64_t v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v16 >= v12) {
          goto LABEL_60;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        ++v7;
        if (!v17)
        {
          int64_t v7 = v16 + 1;
          if (v16 + 1 >= v12) {
            goto LABEL_60;
          }
          unint64_t v17 = *(void *)(v8 + 8 * v7);
          if (!v17)
          {
            int64_t v7 = v16 + 2;
            if (v16 + 2 >= v12) {
              goto LABEL_60;
            }
            unint64_t v17 = *(void *)(v8 + 8 * v7);
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v12)
              {
LABEL_60:
                swift_retain();
                return sub_3D428(v45, a2, v6, a3);
              }
              unint64_t v17 = *(void *)(v8 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  int64_t v7 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    break;
                  }
                  if (v7 >= v12) {
                    goto LABEL_60;
                  }
                  unint64_t v17 = *(void *)(v8 + 8 * v7);
                  ++v18;
                  if (v17) {
                    goto LABEL_21;
                  }
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              int64_t v7 = v18;
            }
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      int v19 = *(unsigned __int16 *)(*(void *)(a4 + 48) + 2 * v15);
      unint64_t result = sub_687D0();
      uint64_t v20 = -1 << *(unsigned char *)(a3 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      uint64_t v23 = 1 << v21;
      if (((1 << v21) & *(void *)(v13 + 8 * (v21 >> 6))) != 0)
      {
        uint64_t v24 = *(void *)(a3 + 48);
        if (*(unsigned __int16 *)(v24 + 2 * v21) != v19)
        {
          for (unint64_t i = v21 + 1; ; unint64_t i = v26 + 1)
          {
            unint64_t v26 = i & ~v20;
            if (((*(void *)(v13 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
              goto LABEL_6;
            }
            if (*(unsigned __int16 *)(v24 + 2 * v26) == v19) {
              break;
            }
          }
          unint64_t v22 = v26 >> 6;
          uint64_t v23 = 1 << v26;
        }
        v45[v22] |= v23;
        BOOL v27 = __OFADD__(v6++, 1);
        if (v27) {
          break;
        }
      }
    }
    __break(1u);
  }
  int64_t v28 = 0;
  uint64_t v29 = a3 + 56;
  uint64_t v30 = 1 << *(unsigned char *)(a3 + 32);
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  else {
    uint64_t v31 = -1;
  }
  unint64_t v32 = v31 & *(void *)(a3 + 56);
  int64_t v46 = (unint64_t)(v30 + 63) >> 6;
  uint64_t v33 = a4 + 56;
  while (v32)
  {
    unint64_t v34 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    unint64_t v35 = v34 | (v28 << 6);
LABEL_52:
    int v39 = *(unsigned __int16 *)(*(void *)(a3 + 48) + 2 * v35);
    unint64_t result = sub_687D0();
    uint64_t v40 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v41 = result & ~v40;
    if ((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41))
    {
      uint64_t v42 = *(void *)(a4 + 48);
      if (*(unsigned __int16 *)(v42 + 2 * v41) == v39)
      {
LABEL_57:
        *(unint64_t *)((char *)v45 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
        BOOL v27 = __OFADD__(v6++, 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v43 = ~v40;
        while (1)
        {
          unint64_t v41 = (v41 + 1) & v43;
          if (((*(void *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
            break;
          }
          if (*(unsigned __int16 *)(v42 + 2 * v41) == v39) {
            goto LABEL_57;
          }
        }
      }
    }
  }
  int64_t v36 = v28 + 1;
  if (__OFADD__(v28, 1)) {
    goto LABEL_62;
  }
  if (v36 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v36);
  ++v28;
  if (v37) {
    goto LABEL_51;
  }
  int64_t v28 = v36 + 1;
  if (v36 + 1 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v28);
  if (v37) {
    goto LABEL_51;
  }
  int64_t v28 = v36 + 2;
  if (v36 + 2 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v28);
  if (v37)
  {
LABEL_51:
    unint64_t v32 = (v37 - 1) & v37;
    unint64_t v35 = __clz(__rbit64(v37)) + (v28 << 6);
    goto LABEL_52;
  }
  int64_t v38 = v36 + 3;
  if (v38 >= v46) {
    goto LABEL_60;
  }
  unint64_t v37 = *(void *)(v29 + 8 * v38);
  if (v37)
  {
    int64_t v28 = v38;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v28 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v28 >= v46) {
      goto LABEL_60;
    }
    unint64_t v37 = *(void *)(v29 + 8 * v28);
    ++v38;
    if (v37) {
      goto LABEL_51;
    }
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_3D428(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_4890(&qword_80D78);
  uint64_t result = sub_68520();
  uint64_t v9 = (unsigned char *)result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = a1[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = a1[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    __int16 v18 = *(_WORD *)(*(void *)(v4 + 48) + 2 * v14);
    uint64_t result = sub_687D0();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_WORD *)(*((void *)v9 + 6) + 2 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = a1[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_3D674(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    v20[0] = a1;
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a2 + 56;
      uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
      uint64_t v7 = ~v19;
      while (1)
      {
        int v8 = *(unsigned __int16 *)(a1 + 32 + 2 * v5++);
        uint64_t v9 = sub_687D0();
        unint64_t v10 = v9 & v7;
        if ((*(void *)(v6 + (((v9 & (unint64_t)v7) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (v9 & v7))) {
          break;
        }
LABEL_4:
        if (v5 == v4) {
          return (void *)v2;
        }
      }
      while (*(unsigned __int16 *)(*(void *)(v2 + 48) + 2 * v10) != v8)
      {
        unint64_t v10 = (v10 + 1) & v7;
        if (((*(void *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_4;
        }
      }
      v20[1] = v5;
      unint64_t v11 = (unint64_t)(63 - v19) >> 6;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v11 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
      {
        __chkstk_darwin(isStackAllocationSafe);
        unint64_t v14 = (char *)&v18 - v13;
        memcpy((char *)&v18 - v13, (const void *)(v2 + 56), 8 * v11);
        uint64_t v15 = sub_3D8F8((uint64_t)v14, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v16 = (void *)swift_slowAlloc();
        memcpy(v16, (const void *)(v2 + 56), 8 * v11);
        uint64_t v15 = sub_3D8F8((uint64_t)v16, v11, v2, v10, v20);
        swift_release();
        swift_bridgeObjectRelease();
        swift_slowDealloc();
      }
      return (void *)v15;
    }
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  return (void *)v2;
}

uint64_t sub_3D8F8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = (unint64_t *)result;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v10 = *a5;
  unint64_t v9 = a5[1];
  unint64_t v11 = *(void *)(*a5 + 16);
  if (v9 == v11)
  {
LABEL_2:
    swift_retain();
    return sub_3D428(v6, a2, v8, a3);
  }
  else
  {
    uint64_t v13 = a3 + 56;
    uint64_t v14 = ~(-1 << *(unsigned char *)(a3 + 32));
    while (v9 < v11)
    {
      if (__OFADD__(v9, 1)) {
        goto LABEL_19;
      }
      int v15 = *(unsigned __int16 *)(v10 + 32 + 2 * v9);
      a5[1] = v9 + 1;
      uint64_t result = sub_687D0();
      uint64_t v16 = result & v14;
      unint64_t v17 = (result & (unint64_t)v14) >> 6;
      uint64_t v18 = 1 << (result & v14);
      if ((v18 & *(void *)(v13 + 8 * v17)) != 0)
      {
        uint64_t v19 = *(void *)(a3 + 48);
        if (*(unsigned __int16 *)(v19 + 2 * v16) == v15)
        {
LABEL_14:
          uint64_t v22 = v17;
          unint64_t v23 = v6[v17];
          v6[v22] = v23 & ~v18;
          if ((v18 & v23) != 0)
          {
            if (__OFSUB__(v8--, 1)) {
              goto LABEL_20;
            }
            if (!v8) {
              return (uint64_t)&_swiftEmptySetSingleton;
            }
          }
        }
        else
        {
          for (uint64_t i = v16 + 1; ; uint64_t i = v21 + 1)
          {
            unint64_t v21 = i & v14;
            if (((*(void *)(v13 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
              break;
            }
            if (*(unsigned __int16 *)(v19 + 2 * v21) == v15)
            {
              unint64_t v17 = v21 >> 6;
              uint64_t v18 = 1 << v21;
              goto LABEL_14;
            }
          }
        }
      }
      unint64_t v9 = a5[1];
      unint64_t v11 = *(void *)(v10 + 16);
      if (v9 == v11) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_3DA94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, Swift::UInt a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_3C9D0(a1, a2, a3 & 1, a4);
  LOBYTE(a4) = v13;
  swift_bridgeObjectRelease();
  if (a4)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v6;
    uint64_t v25 = *v6;
    *uint64_t v6 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_3E550();
      uint64_t v15 = v25;
    }
    sub_FFE0(*(void *)(*(void *)(v15 + 48) + 32 * v12), *(void *)(*(void *)(v15 + 48) + 32 * v12 + 8), *(unsigned char *)(*(void *)(v15 + 48) + 32 * v12 + 16));
    uint64_t v16 = *(void *)(v15 + 56);
    uint64_t v17 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
    uint64_t v24 = *(void *)(v17 - 8);
    sub_3F124(v16 + *(void *)(v24 + 72) * v12, a5, type metadata accessor for FeaturePreviewConfigurationCache.Value);
    sub_3E05C(v12, v15);
    *uint64_t v6 = v15;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    uint64_t v19 = a5;
    uint64_t v20 = 0;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v22 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    uint64_t v21 = v22;
    uint64_t v19 = a5;
    uint64_t v20 = 1;
  }
  return v18(v19, v20, 1, v21);
}

uint64_t sub_3DC54(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
  uint64_t v44 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_4890(&qword_81A08);
  int v45 = a2;
  uint64_t v8 = sub_68650();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    uint64_t v40 = v2;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 64);
    uint64_t v42 = (void *)(v7 + 64);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & v11;
    int64_t v41 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    for (i = v7; ; uint64_t v7 = i)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41) {
          goto LABEL_34;
        }
        unint64_t v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          int64_t v16 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v22 = v42[v16];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if (v45)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v7 + 32);
                if (v39 >= 64) {
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v42 = -1 << v39;
                }
                *(void *)(v7 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v22 = v42[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v23;
          }
        }
LABEL_21:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      uint64_t v24 = *(void *)(v7 + 56);
      uint64_t v25 = *(void *)(v7 + 48) + 32 * v20;
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *(void *)(v25 + 8);
      char v28 = *(unsigned char *)(v25 + 16);
      Swift::UInt v29 = *(void *)(v25 + 24);
      uint64_t v30 = *(void *)(v44 + 72);
      uint64_t v31 = v24 + v30 * v20;
      if (v45)
      {
        sub_3F124(v31, v46, type metadata accessor for FeaturePreviewConfigurationCache.Value);
      }
      else
      {
        sub_3F18C(v31, v46, type metadata accessor for FeaturePreviewConfigurationCache.Value);
        sub_FBA8(v26, v27, v28);
      }
      sub_687F0();
      uint64_t v47 = v26;
      uint64_t v48 = v27;
      char v49 = v28;
      sub_1192C();
      sub_68140();
      sub_68800(v29);
      uint64_t result = sub_68830();
      uint64_t v32 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v33 = result & ~v32;
      unint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v35 = 0;
        unint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v37 = v34 == v36;
          if (v34 == v36) {
            unint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v14 + 8 * v34);
        }
        while (v38 == -1);
        unint64_t v17 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v9 + 48) + 32 * v17;
      *(void *)uint64_t v18 = v26;
      *(void *)(v18 + 8) = v27;
      *(unsigned char *)(v18 + 16) = v28;
      *(void *)(v18 + 24) = v29;
      uint64_t result = sub_3F124(v46, *(void *)(v9 + 56) + v30 * v17, type metadata accessor for FeaturePreviewConfigurationCache.Value);
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

unint64_t sub_3E05C(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_68480();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v38 = v4;
      do
      {
        uint64_t v9 = v2;
        uint64_t v10 = *(void *)(v2 + 48) + 32 * v6;
        unint64_t v11 = v8;
        uint64_t v12 = v7;
        uint64_t v13 = *(void *)v10;
        uint64_t v14 = *(void *)(v10 + 8);
        int64_t v15 = v3;
        char v16 = *(unsigned char *)(v10 + 16);
        Swift::UInt v17 = *(void *)(v10 + 24);
        sub_687F0();
        sub_FBA8(v13, v14, v16);
        sub_1192C();
        sub_68140();
        sub_68800(v17);
        Swift::Int v18 = sub_68830();
        uint64_t v19 = v14;
        uint64_t v7 = v12;
        unint64_t v8 = v11;
        char v20 = v16;
        int64_t v3 = v15;
        uint64_t result = sub_FFE0(v13, v19, v20);
        Swift::Int v21 = v18 & v7;
        if (v15 >= (uint64_t)v11)
        {
          if (v21 < v11)
          {
            uint64_t v4 = v38;
            uint64_t v2 = v9;
            goto LABEL_6;
          }
          uint64_t v4 = v38;
          uint64_t v2 = v9;
          if (v3 < v21) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v4 = v38;
          uint64_t v2 = v9;
          if (v21 < v8 && v3 < v21) {
            goto LABEL_6;
          }
        }
        uint64_t v22 = *(void *)(v2 + 48);
        int64_t v23 = (_OWORD *)(v22 + 32 * v3);
        uint64_t v24 = (_OWORD *)(v22 + 32 * v6);
        if (v3 != v6 || v23 >= v24 + 2)
        {
          long long v25 = v24[1];
          *int64_t v23 = *v24;
          v23[1] = v25;
        }
        uint64_t v26 = *(void *)(v2 + 56);
        uint64_t v27 = *(void *)(*(void *)(type metadata accessor for FeaturePreviewConfigurationCache.Value(0) - 8) + 72);
        int64_t v28 = v27 * v3;
        uint64_t result = v26 + v27 * v3;
        int64_t v29 = v27 * v6;
        unint64_t v30 = v26 + v27 * v6 + v27;
        if (v28 < v29 || result >= v30)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v28 == v29) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v32 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v33 = *v32;
    uint64_t v34 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v32 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v34 = *v32;
    uint64_t v33 = (-1 << result) - 1;
  }
  uint64_t *v32 = v34 & v33;
  uint64_t v35 = *(void *)(v2 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v37;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

uint64_t sub_3E2F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, Swift::UInt a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v16 = sub_3C9D0(a2, a3, a4 & 1, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 < v19 || (a6 & 1) == 0)
  {
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_3E550();
      goto LABEL_7;
    }
    sub_3DC54(v19, a6 & 1);
    unint64_t v26 = sub_3C9D0(a2, a3, a4 & 1, a5);
    if ((v20 & 1) == (v27 & 1))
    {
      unint64_t v16 = v26;
      uint64_t v22 = *v7;
      if (v20) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_687C0();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v22 = *v7;
  if (v20)
  {
LABEL_8:
    uint64_t v23 = v22[7];
    uint64_t v24 = v23
        + *(void *)(*(void *)(type metadata accessor for FeaturePreviewConfigurationCache.Value(0) - 8) + 72)
        * v16;
    return sub_41990(a1, v24);
  }
LABEL_13:
  sub_3E498(v16, a2, a3, a4 & 1, a5, a1, v22);
  return sub_FBA8(a2, a3, a4 & 1);
}

uint64_t sub_3E498(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a7[6] + 32 * a1;
  *(void *)uint64_t v10 = a2;
  *(void *)(v10 + 8) = a3;
  *(unsigned char *)(v10 + 16) = a4 & 1;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = a7[7];
  uint64_t v12 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
  uint64_t result = sub_3F124(a6, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, type metadata accessor for FeaturePreviewConfigurationCache.Value);
  uint64_t v14 = a7[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a7[2] = v16;
  }
  return result;
}

uint64_t sub_3E550()
{
  uint64_t v1 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8);
  uint64_t v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_4890(&qword_81A08);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = sub_68640();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v38 = v4;
  if (!v5)
  {
    uint64_t result = swift_release();
    uint64_t v30 = v38;
    int64_t v29 = v32;
LABEL_25:
    *int64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t v7 = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v38;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v37 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = (uint64_t)v35;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      uint64_t result = v37;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t result = v37;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    uint64_t v17 = 32 * v15;
    uint64_t v18 = *(void *)(result + 48) + 32 * v15;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    char v21 = *(unsigned char *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    unint64_t v23 = *(void *)(v36 + 72) * v15;
    sub_3F18C(*(void *)(result + 56) + v23, v13, type metadata accessor for FeaturePreviewConfigurationCache.Value);
    uint64_t v24 = v38;
    uint64_t v25 = *(void *)(v38 + 48) + v17;
    *(void *)uint64_t v25 = v19;
    *(void *)(v25 + 8) = v20;
    *(unsigned char *)(v25 + 16) = v21;
    *(void *)(v25 + 24) = v22;
    sub_3F124(v13, *(void *)(v24 + 56) + v23, type metadata accessor for FeaturePreviewConfigurationCache.Value);
    sub_FBA8(v19, v20, v21);
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    uint64_t result = swift_release();
    int64_t v29 = v32;
    uint64_t v30 = v38;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_3E81C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_68370();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_17B1C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_3E890(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v6 = a2;
    }
    uint64_t v7 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v7 = 11;
    }
    uint64_t v8 = v7 | (v6 << 16);
    uint64_t v9 = sub_68200();
    if (v10) {
      a2 = v8;
    }
    else {
      a2 = v9;
    }
    a1 = 15;
    a3 = v5;
    a4 = v4;
  }
  return String.subscript.getter(a1, a2, a3, a4);
}

void *sub_3E92C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_3CB88(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 2;
      uint64_t v4 = sub_303B4();
      if (v5) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = 0;
      }
      if (v5) {
        unint64_t v7 = v5;
      }
      else {
        unint64_t v7 = 0xE000000000000000;
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_3CB88((char *)(v8 > 1), v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      char v10 = &_swiftEmptyArrayStorage[2 * v9];
      v10[4] = v6;
      v10[5] = v7;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_3EA1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_68370();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int16 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_1FF0C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

char *sub_3EA90(uint64_t a1)
{
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = 0;
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v4 = sub_30400();
      unint64_t v6 = v5;
      if (!v5)
      {
        uint64_t v7 = 0;
        if (v19) {
          goto LABEL_41;
        }
        goto LABEL_33;
      }
      uint64_t v7 = v4;
      uint64_t v20 = v1;
      if ((v5 & 0x2000000000000000) != 0) {
        uint64_t v8 = HIBYTE(v5) & 0xF;
      }
      else {
        uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (!v8)
      {
        uint64_t v1 = v20;
        if (v19) {
          goto LABEL_41;
        }
        goto LABEL_33;
      }
      uint64_t v22 = v5 & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      while (1)
      {
        if ((v6 & 0x1000000000000000) != 0)
        {
          sub_68530();
          uint64_t v12 = v11;
          goto LABEL_20;
        }
        if ((v6 & 0x2000000000000000) == 0)
        {
          uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v7 & 0x1000000000000000) == 0) {
            uint64_t v10 = sub_68590();
          }
          if (*(char *)(v10 + v9) < 0)
          {
            switch(__clz(*(unsigned __int8 *)(v10 + v9) ^ 0xFF))
            {
              case 0x1Au:
                goto LABEL_26;
              case 0x1Bu:
                goto LABEL_27;
              case 0x1Cu:
                goto LABEL_28;
              default:
                break;
            }
          }
LABEL_19:
          uint64_t v12 = 1;
          goto LABEL_20;
        }
        v21[0] = v7;
        v21[1] = v22;
        if ((*((char *)v21 + v9) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        switch(__clz(*((unsigned __int8 *)v21 + v9) ^ 0xFF))
        {
          case 0x1Au:
LABEL_26:
            uint64_t v12 = 2;
            break;
          case 0x1Bu:
LABEL_27:
            uint64_t v12 = 3;
            break;
          case 0x1Cu:
LABEL_28:
            uint64_t v12 = 4;
            break;
          default:
            goto LABEL_19;
        }
LABEL_20:
        if (qword_864D0 != -1) {
          swift_once();
        }
        uint64_t v13 = sub_671F0();
        sub_13CE0(v13, (uint64_t)qword_87DE8);
        if (sub_671E0()) {
          break;
        }
        v9 += v12;
        if (v9 >= v8)
        {
          unint64_t v16 = v6;
          goto LABEL_30;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v7 = 0;
      unint64_t v16 = 0;
LABEL_30:
      uint64_t v1 = v20;
      swift_bridgeObjectRelease();
      unint64_t v6 = v16;
      if (v19)
      {
LABEL_41:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v2;
      }
LABEL_33:
      if (v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v2 = sub_3CDD0(0, *((void *)v2 + 2) + 1, 1, v2);
        }
        unint64_t v15 = *((void *)v2 + 2);
        unint64_t v14 = *((void *)v2 + 3);
        if (v15 >= v14 >> 1) {
          uint64_t v2 = sub_3CDD0((char *)(v14 > 1), v15 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v15 + 1;
        uint64_t v3 = &v2[16 * v15];
        *((void *)v3 + 4) = v7;
        *((void *)v3 + 5) = v6;
      }
      if (++v1 == v18)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
  }
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_3EE38(uint64_t a1, uint64_t a2, void *a3, const __CTFont *a4, const __CTFont *a5, unint64_t a6, unint64_t a7)
{
  uint64_t v12 = sub_2FF90(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2);
  uint64_t v13 = sub_3A520(v12, a6, a3, a7);
  id v14 = a3;
  unint64_t v15 = sub_3EA90((uint64_t)v13);
  swift_bridgeObjectRelease();

  v25[2] = a7;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_3AD6C((uint64_t)sub_419F4, (uint64_t)v25, (uint64_t)v15);
  if (*(void *)(v16 + 16))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = (uint64_t)v15;
  }
  v25[4] = v16;
  sub_4890(&qword_81A18);
  sub_41A70();
  uint64_t result = sub_68280();
  if ((a6 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_3E890(a6, result, v18, v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_681D0();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    if (a6 < 2 || sub_681F0() < 2)
    {
      unint64_t v23 = sub_3AEE4(v12, a4, a5, a7);
      swift_bridgeObjectRelease();
      if ((v23 & 0x100000000) == 0) {
        goto LABEL_12;
      }
      uint64_t v24 = HIBYTE(v22) & 0xF;
      if ((v22 & 0x2000000000000000) == 0) {
        uint64_t v24 = v20 & 0xFFFFFFFFFFFFLL;
      }
      if (!v24)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return v20;
  }
  return result;
}

uint64_t sub_3F05C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_3F070(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeaturePreviewConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for FeaturePreviewConfigurationCache.Value(uint64_t a1)
{
  return sub_3F0EC(a1, qword_86588);
}

uint64_t sub_3F0EC(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_3F124(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_3F18C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *sub_3F1F4(char *a1, char **a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v9 = a2[1];
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = v9;
    *((void *)a1 + 2) = v8;
    *((void *)a1 + 3) = a2[3];
    uint64_t v10 = a3[7];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = v5;
    id v14 = v9;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_4890(&qword_81188);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15))
    {
      uint64_t v17 = sub_4890(&qword_81830);
      memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v18 = sub_67240();
      unint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(v11, v12, v18);
      v19(&v11[*(int *)(v15 + 48)], &v12[*(int *)(v15 + 48)], v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
    }
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    unint64_t v22 = &a1[v20];
    uint64_t v23 = (uint64_t)a2 + v20;
    *(_DWORD *)unint64_t v22 = *(_DWORD *)v23;
    v22[4] = *(unsigned char *)(v23 + 4);
    a1[v21] = *((unsigned char *)a2 + v21);
    uint64_t v24 = a3[10];
    uint64_t v25 = a3[11];
    int64_t v26 = &a1[v24];
    unint64_t v27 = (char **)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *(void *)int64_t v26 = *v27;
    *((void *)v26 + 1) = v28;
    a1[v25] = *((unsigned char *)a2 + v25);
    a1[a3[12]] = *((unsigned char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_3F418(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_4890(&qword_81188);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = sub_67240();
    uint64_t v7 = *(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v4, v6);
    v7(&v4[*(int *)(v5 + 48)], v6);
  }
  return swift_bridgeObjectRelease();
}

void *sub_3F52C(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  id v12 = v6;
  id v13 = v7;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_4890(&qword_81188);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14))
  {
    uint64_t v16 = sub_4890(&qword_81830);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = sub_67240();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    v18(v10, v11, v17);
    v18(&v10[*(int *)(v14 + 48)], &v11[*(int *)(v14 + 48)], v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = a2 + v19;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  v21[4] = *(unsigned char *)(v22 + 4);
  *((unsigned char *)a1 + v2sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + v20);
  uint64_t v23 = a3[10];
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)((char *)a1 + v23);
  int64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  *((unsigned char *)a1 + v24) = *(unsigned char *)(a2 + v24);
  *((unsigned char *)a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_3F700(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  id v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = sub_4890(&qword_81188);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v31 = sub_67240();
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24);
      v32(v13, v14, v31);
      v32(&v13[*(int *)(v15 + 48)], &v14[*(int *)(v15 + 48)], v31);
      goto LABEL_7;
    }
    sub_A8C0((uint64_t)v13, &qword_81188);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v22 = sub_4890(&qword_81830);
    memcpy(v13, v14, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v20 = sub_67240();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  v21(v13, v14, v20);
  v21(&v13[*(int *)(v15 + 48)], &v14[*(int *)(v15 + 48)], v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (int *)(a2 + v23);
  int v26 = *v25;
  *(unsigned char *)(v24 + 4) = *((unsigned char *)v25 + 4);
  *(_DWORD *)uint64_t v24 = v26;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v27 = a3[10];
  uint64_t v28 = (void *)(a1 + v27);
  int64_t v29 = (void *)(a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

_OWORD *sub_3F9AC(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[7];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_4890(&qword_81188);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_4890(&qword_81830);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = sub_67240();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 48)], &v9[*(int *)(v10 + 48)], v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v15;
  int v18 = (char *)a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  void v17[4] = v18[4];
  *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
  uint64_t v19 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_3FB5C(uint64_t a1, void *a2, int *a3)
{
  long long v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  uint64_t v8 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_4890(&qword_81188);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      uint64_t v31 = sub_67240();
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40);
      v32(v10, v11, v31);
      v32(&v10[*(int *)(v12 + 48)], &v11[*(int *)(v12 + 48)], v31);
      goto LABEL_7;
    }
    sub_A8C0((uint64_t)v10, &qword_81188);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v19 = sub_4890(&qword_81830);
    memcpy(v10, v11, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v17 = sub_67240();
  int v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32);
  v18(v10, v11, v17);
  v18(&v10[*(int *)(v12 + 48)], &v11[*(int *)(v12 + 48)], v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = (char *)a2 + v20;
  *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
  *(unsigned char *)(v22 + 4) = v23[4];
  *(unsigned char *)(a1 + v21) = *((unsigned char *)a2 + v21);
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v24);
  int v26 = (void *)((char *)a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(unsigned char *)(a1 + v29) = *((unsigned char *)a2 + v29);
  return a1;
}

uint64_t sub_3FDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3FDEC);
}

uint64_t sub_3FDEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_4890(&qword_81830);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_3FEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3FEB4);
}

void *sub_3FEB4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_4890(&qword_81830);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_3FF60()
{
  sub_40028();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_40028()
{
  if (!qword_818A8)
  {
    sub_4FAC(&qword_81188);
    unint64_t v0 = sub_683E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_818A8);
    }
  }
}

uint64_t type metadata accessor for FeaturePreviewConfigurationCache()
{
  return self;
}

uint64_t initializeWithCopy for FeaturePreviewConfigurationCache.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for FeaturePreviewConfigurationCache.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_FFE0(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for FeaturePreviewConfigurationCache.Key(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_FFE0(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeaturePreviewConfigurationCache.Key(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeaturePreviewConfigurationCache.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeaturePreviewConfigurationCache.Key()
{
  return &type metadata for FeaturePreviewConfigurationCache.Key;
}

char *sub_40260(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    char v7 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(char **, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v11;
      uint64_t v12 = a2[3];
      *((void *)a1 + 2) = a2[2];
      *((void *)a1 + 3) = v12;
      uint64_t v13 = v7[7];
      uint64_t v14 = &a1[v13];
      int v15 = (char *)a2 + v13;
      int v16 = v10;
      uint64_t v17 = v11;
      swift_bridgeObjectRetain();
      uint64_t v18 = sub_4890(&qword_81188);
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18))
      {
        uint64_t v20 = sub_4890(&qword_81830);
        memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v21 = sub_67240();
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        v22(v14, v15, v21);
        v22(&v14[*(int *)(v18 + 48)], &v15[*(int *)(v18 + 48)], v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
      }
      uint64_t v23 = v7[8];
      uint64_t v24 = &a1[v23];
      uint64_t v25 = (char *)a2 + v23;
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v24[4] = v25[4];
      a1[v7[9]] = *((unsigned char *)a2 + v7[9]);
      uint64_t v26 = v7[10];
      uint64_t v27 = &a1[v26];
      uint64_t v28 = (char **)((char *)a2 + v26);
      uint64_t v29 = v28[1];
      *(void *)uint64_t v27 = *v28;
      *((void *)v27 + 1) = v29;
      a1[v7[11]] = *((unsigned char *)a2 + v7[11]);
      a1[v7[12]] = *((unsigned char *)a2 + v7[12]);
      uint64_t v30 = *(void (**)(char *, void, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain();
      v30(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_4053C(id *a1)
{
  uint64_t v2 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t result = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {

    swift_bridgeObjectRelease();
    int v4 = (char *)a1 + *(int *)(v2 + 28);
    uint64_t v5 = sub_4890(&qword_81188);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      uint64_t v6 = sub_67240();
      char v7 = *(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);
      v7(v4, v6);
      v7(&v4[*(int *)(v5 + 48)], v6);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void **sub_406A8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(void **, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = *a2;
    char v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    uint64_t v11 = v6[7];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    id v14 = v8;
    id v15 = v9;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_4890(&qword_81188);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16))
    {
      uint64_t v18 = sub_4890(&qword_81830);
      memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v19 = sub_67240();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v20(v12, v13, v19);
      v20(&v12[*(int *)(v16 + 48)], &v13[*(int *)(v16 + 48)], v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
    }
    uint64_t v21 = v6[8];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    uint64_t v24 = v6[10];
    uint64_t v25 = (void **)((char *)a1 + v24);
    uint64_t v26 = (void **)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
    uint64_t v28 = *(void (**)(void **, void, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain();
    v28(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_40948(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_3F070((uint64_t)a1);
      goto LABEL_7;
    }
    uint64_t v21 = (void *)*a2;
    uint64_t v22 = (void *)*a1;
    *a1 = *a2;
    id v23 = v21;

    uint64_t v24 = (void *)a2[1];
    uint64_t v25 = (void *)a1[1];
    a1[1] = v24;
    id v26 = v24;

    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = v6[7];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = sub_4890(&qword_81188);
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    int v33 = v32(v28, 1, v30);
    int v34 = v32(v29, 1, v30);
    if (v33)
    {
      if (!v34)
      {
        uint64_t v35 = sub_67240();
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
        v36(v28, v29, v35);
        v36(&v28[*(int *)(v30 + 48)], &v29[*(int *)(v30 + 48)], v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_16:
        uint64_t v48 = v6[8];
        char v49 = (char *)a1 + v48;
        int v50 = (char *)a2 + v48;
        int v51 = *(_DWORD *)v50;
        v49[4] = v50[4];
        *(_DWORD *)char v49 = v51;
        *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
        uint64_t v52 = v6[10];
        unsigned int v53 = (void *)((char *)a1 + v52);
        uint64_t v54 = (void *)((char *)a2 + v52);
        *unsigned int v53 = *v54;
        v53[1] = v54[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
        *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
        return a1;
      }
    }
    else
    {
      if (!v34)
      {
        uint64_t v56 = sub_67240();
        uint64_t v57 = *(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 24);
        v57(v28, v29, v56);
        v57(&v28[*(int *)(v30 + 48)], &v29[*(int *)(v30 + 48)], v56);
        goto LABEL_16;
      }
      sub_A8C0((uint64_t)v28, &qword_81188);
    }
    uint64_t v47 = sub_4890(&qword_81830);
    memcpy(v28, v29, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = (void *)*a2;
  *a1 = *a2;
  uint64_t v12 = (void *)a2[1];
  a1[1] = v12;
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v13 = v6[7];
  id v14 = (char *)a1 + v13;
  id v15 = (char *)a2 + v13;
  id v16 = v11;
  id v17 = v12;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_4890(&qword_81188);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18))
  {
    uint64_t v20 = sub_4890(&qword_81830);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v37 = sub_67240();
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16);
    v38(v14, v15, v37);
    v38(&v14[*(int *)(v18 + 48)], &v15[*(int *)(v18 + 48)], v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
  }
  uint64_t v39 = v6[8];
  uint64_t v40 = (char *)a1 + v39;
  int64_t v41 = (char *)a2 + v39;
  int v42 = *(_DWORD *)v41;
  v40[4] = v41[4];
  *(_DWORD *)uint64_t v40 = v42;
  *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
  uint64_t v43 = v6[10];
  uint64_t v44 = (void *)((char *)a1 + v43);
  int v45 = (void *)((char *)a2 + v43);
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  uint64_t v46 = *(void (**)(void *, void, uint64_t, int *))(v7 + 56);
  swift_bridgeObjectRetain();
  v46(a1, 0, 1, v6);
  return a1;
}

_OWORD *sub_40E94(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    long long v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = v6[7];
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_4890(&qword_81188);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_4890(&qword_81830);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_67240();
      id v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v16(v10, v11, v15);
      v16(&v10[*(int *)(v12 + 48)], &v11[*(int *)(v12 + 48)], v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v17 = v6[8];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_41114(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  long long v8 = *(uint64_t (**)(void *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_3F070((uint64_t)a1);
      goto LABEL_7;
    }
    uint64_t v18 = (void *)*a1;
    *a1 = *a2;

    uint64_t v19 = (void *)a1[1];
    a1[1] = a2[1];

    uint64_t v20 = a2[3];
    a1[2] = a2[2];
    a1[3] = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = v6[7];
    uint64_t v22 = (char *)a1 + v21;
    id v23 = (char *)a2 + v21;
    uint64_t v24 = sub_4890(&qword_81188);
    uint64_t v25 = *(void *)(v24 - 8);
    id v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    int v27 = v26(v22, 1, v24);
    int v28 = v26(v23, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        uint64_t v29 = sub_67240();
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
        v30(v22, v23, v29);
        v30(&v22[*(int *)(v24 + 48)], &v23[*(int *)(v24 + 48)], v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_16:
        uint64_t v38 = v6[8];
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        v39[4] = v40[4];
        *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
        uint64_t v41 = v6[10];
        int v42 = (void *)((char *)a1 + v41);
        uint64_t v43 = (void *)((char *)a2 + v41);
        uint64_t v45 = *v43;
        uint64_t v44 = v43[1];
        *int v42 = v45;
        v42[1] = v44;
        swift_bridgeObjectRelease();
        *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
        *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
        return a1;
      }
    }
    else
    {
      if (!v28)
      {
        uint64_t v47 = sub_67240();
        uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 40);
        v48(v22, v23, v47);
        v48(&v22[*(int *)(v24 + 48)], &v23[*(int *)(v24 + 48)], v47);
        goto LABEL_16;
      }
      sub_A8C0((uint64_t)v22, &qword_81188);
    }
    uint64_t v37 = sub_4890(&qword_81830);
    memcpy(v22, v23, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  long long v11 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  uint64_t v12 = v6[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_4890(&qword_81188);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_4890(&qword_81830);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v31 = sub_67240();
    uint64_t v32 = v13;
    char v49 = v13;
    int v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32);
    v33(v32, v14, v31);
    v33(&v49[*(int *)(v15 + 48)], &v14[*(int *)(v15 + 48)], v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
  }
  uint64_t v34 = v6[8];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
  void v35[4] = v36[4];
  *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
  *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  (*(void (**)(void *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_415FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_41610);
}

uint64_t sub_41610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeaturePreviewConfiguration(0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_4167C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_41690);
}

uint64_t sub_41690(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t sub_41710(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeaturePreviewConfiguration(0);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 1, v2);
}

uint64_t sub_41778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 1, v4);
}

uint64_t sub_417E8()
{
  uint64_t result = type metadata accessor for FeaturePreviewConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_41860()
{
  return sub_418A8(&qword_81670, type metadata accessor for CTFont);
}

uint64_t sub_418A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_418F4()
{
  unint64_t result = qword_86720[0];
  if (!qword_86720[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_86720);
  }
  return result;
}

uint64_t sub_41948()
{
  return sub_418A8(&qword_81678, type metadata accessor for CTFont);
}

uint64_t sub_41990(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeaturePreviewConfigurationCache.Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_419F4(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  v6[2] = v2;
  swift_bridgeObjectRetain();
  LOBYTE(v3) = sub_3AC28((uint64_t (*)(void *))sub_41BA0, (uint64_t)v6, v3, v4);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

unint64_t sub_41A70()
{
  unint64_t result = qword_81A20;
  if (!qword_81A20)
  {
    sub_4FAC(&qword_81A18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81A20);
  }
  return result;
}

void type metadata accessor for CGPath(uint64_t a1)
{
}

uint64_t sub_41AE0(uint64_t a1)
{
  return sub_3C714(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_41B10()
{
  return sub_418A8(&qword_81A50, type metadata accessor for CGPath);
}

uint64_t sub_41B58()
{
  return sub_418A8(&qword_81A58, type metadata accessor for CGPath);
}

uint64_t sub_41BA0(uint64_t a1)
{
  return sub_41AE0(a1) & 1;
}

uint64_t sub_41BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_4890(&qword_81A60);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_81A68);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  long long v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = sub_4890(&qword_81A70);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v7, a1, v13);
  uint64_t v14 = &v7[*(int *)(v5 + 44)];
  *(void *)uint64_t v14 = KeyPath;
  v14[8] = 1;
  LODWORD(a1) = sub_67A80();
  sub_A85C((uint64_t)v7, (uint64_t)v11, &qword_81A60);
  *(_DWORD *)&v11[*(int *)(v9 + 44)] = a1;
  sub_A8C0((uint64_t)v7, &qword_81A60);
  sub_31344();
  sub_68090();
  sub_67610();
  sub_A85C((uint64_t)v11, a2, &qword_81A68);
  uint64_t v15 = (_OWORD *)(a2 + *(int *)(sub_4890(&qword_81A78) + 36));
  long long v16 = v20[5];
  _OWORD v15[4] = v20[4];
  v15[5] = v16;
  v15[6] = v20[6];
  long long v17 = v20[1];
  *uint64_t v15 = v20[0];
  v15[1] = v17;
  long long v18 = v20[3];
  void v15[2] = v20[2];
  v15[3] = v18;
  return sub_A8C0((uint64_t)v11, &qword_81A68);
}

__n128 sub_41E30@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_683A0();
    int v28 = (void *)sub_67AC0();
    sub_67330();

    uint64_t v19 = a17;
  }
  sub_67610();
  sub_A85C(v17, a9, a16);
  uint64_t v29 = (_OWORD *)(a9 + *(int *)(sub_4890(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *uint64_t v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

uint64_t sub_42000@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_683A0();
    long long v31 = (void *)sub_67AC0();
    sub_67330();

    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }
  sub_67610();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v22;
  *(unsigned char *)(a9 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 8sub_66CA4(2, 18, 1, 0) = v36;
  sub_5CF28(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain();
}

BOOL sub_42200(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_42210(uint64_t a1, char a2)
{
}

Swift::Int sub_42238(char a1)
{
  return sub_68830();
}

uint64_t sub_42280(char a1)
{
  return a1 & 1;
}

uint64_t sub_42288@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v33 = a3;
  uint64_t v31 = sub_4890(&qword_81A80);
  __chkstk_darwin(v31);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_4890(&qword_81A88);
  uint64_t v6 = *(void *)(v32 - 8);
  uint64_t v7 = __chkstk_darwin(v32);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_4890(&qword_81A90);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_4890(&qword_81A98);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = (char *)&v30 - v18;
  if (a2)
  {
    char v23 = sub_67AF0();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v5, v30, v15);
    uint64_t v24 = v11;
    uint64_t v25 = v31;
    v5[*(int *)(v31 + 36)] = v23;
    unint64_t v26 = sub_51BCC();
    sub_2F574(2);
    sub_A8C0((uint64_t)v5, &qword_81A80);
    int v27 = v24;
    int v28 = v24;
    uint64_t v29 = v32;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v28, v9, v32);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v14, v27, v29);
    swift_storeEnumTagMultiPayload();
    sub_AE4C(&qword_81AA8, &qword_81A98);
    uint64_t v34 = v25;
    unint64_t v35 = v26;
    swift_getOpaqueTypeConformance2();
    sub_679F0();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v27, v29);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v20((char *)&v30 - v18, v30, v15);
    v20(v14, (uint64_t)v19, v15);
    swift_storeEnumTagMultiPayload();
    sub_AE4C(&qword_81AA8, &qword_81A98);
    unint64_t v21 = sub_51BCC();
    uint64_t v34 = v31;
    unint64_t v35 = v21;
    swift_getOpaqueTypeConformance2();
    sub_679F0();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
}

uint64_t sub_426A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_679E0();
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_679F0();
}

uint64_t sub_427A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_679E0();
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_679F0();
}

uint64_t sub_42898()
{
  return sub_67510();
}

uint64_t sub_428B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_42288(a1, *v2, a2);
}

uint64_t sub_428BC(uint64_t a1)
{
  if (a1)
  {
    return swift_retain();
  }
  else
  {
    type metadata accessor for TypographyPanelViewModel();
    sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
    uint64_t result = sub_67650();
    __break(1u);
  }
  return result;
}

uint64_t sub_4293C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypographyPanelViewModel();
  uint64_t v5 = sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  return EnvironmentObject.projectedValue.getter(a1, a2, v4, v5);
}

uint64_t sub_429C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_4890(&qword_81AC0);
  __chkstk_darwin(v6 - 8);
  char v71 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_81AC8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_4890(&qword_81AD0);
  __chkstk_darwin(v60);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_4890(&qword_81AD8);
  __chkstk_darwin(v61);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_4890(&qword_81AE0);
  __chkstk_darwin(v63);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_4890(&qword_81AE8);
  uint64_t v64 = *(void *)(v17 - 8);
  uint64_t v65 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_4890(&qword_81AF0);
  __chkstk_darwin(v62);
  unint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_4890(&qword_81AF8);
  __chkstk_darwin(v67);
  uint64_t v69 = (uint64_t)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_4890(&qword_81B00);
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v66 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v72 = a3;
    swift_retain();
    unint64_t v24 = sub_24CEC();
    uint64_t v25 = a1;
    swift_release();
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_68630();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v26 = *(void *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFFF8));
    }
    uint64_t v59 = v26;
    swift_bridgeObjectRelease();
    BOOL v27 = v26 > 1;
    *(void *)uint64_t v10 = sub_67820();
    *((void *)v10 + 1) = 0;
    v10[16] = 0;
    uint64_t v28 = (uint64_t)&v10[*(int *)(sub_4890(&qword_81B08) + 44)];
    uint64_t v58 = v25;
    uint64_t v29 = v25;
    uint64_t v30 = a2;
    sub_43260(v27, v29, a2, v28);
    sub_31B74();
    sub_68090();
    sub_67520();
    sub_A85C((uint64_t)v10, (uint64_t)v12, &qword_81AC8);
    uint64_t v31 = &v12[*(int *)(v60 + 36)];
    long long v32 = v74;
    *(_OWORD *)uint64_t v31 = v73;
    *((_OWORD *)v31 + 1) = v32;
    *((_OWORD *)v31 + 2) = v75;
    sub_A8C0((uint64_t)v10, &qword_81AC8);
    char v33 = sub_67AE0();
    sub_31410();
    sub_674B0();
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    sub_A85C((uint64_t)v12, (uint64_t)v14, &qword_81AD0);
    int v42 = &v14[*(int *)(v61 + 36)];
    *int v42 = v33;
    *((void *)v42 + 1) = v35;
    *((void *)v42 + 2) = v37;
    *((void *)v42 + 3) = v39;
    *((void *)v42 + 4) = v41;
    v42[40] = 0;
    sub_A8C0((uint64_t)v12, &qword_81AD0);
    char v43 = sub_67AF0();
    sub_A85C((uint64_t)v14, (uint64_t)v16, &qword_81AD8);
    v16[*(int *)(v63 + 36)] = v43;
    sub_A8C0((uint64_t)v14, &qword_81AD8);
    sub_51C90();
    sub_2F574(2);
    sub_A8C0((uint64_t)v16, &qword_81AE0);
    char v44 = sub_67AE0();
    uint64_t v46 = v64;
    uint64_t v45 = v65;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v21, v19, v65);
    uint64_t v47 = &v21[*(int *)(v62 + 36)];
    char *v47 = v44;
    *(_OWORD *)(v47 + 8) = 0u;
    *(_OWORD *)(v47 + 24) = 0u;
    v47[40] = 1;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v45);
    uint64_t v48 = sub_680D0();
    uint64_t v49 = v69;
    sub_A85C((uint64_t)v21, v69, &qword_81AF0);
    uint64_t v50 = v49 + *(int *)(v67 + 36);
    *(void *)uint64_t v50 = v48;
    *(unsigned char *)(v50 + 8) = v27;
    uint64_t v51 = sub_A8C0((uint64_t)v21, &qword_81AF0);
    if (v59 <= 1)
    {
      uint64_t v54 = sub_4890(&qword_81B30);
      uint64_t v52 = (uint64_t)v71;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v71, 1, 1, v54);
    }
    else
    {
      __chkstk_darwin(v51);
      *(&v58 - 2) = v58;
      *(&v58 - 1) = v30;
      sub_4890(&qword_81B38);
      sub_521A0(&qword_81B60, &qword_81B38, (void (*)(void))sub_51F4C);
      uint64_t v52 = (uint64_t)v71;
      sub_674D0();
      uint64_t v53 = sub_4890(&qword_81B30);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    }
    uint64_t v55 = v72;
    sub_4890(&qword_81B38);
    sub_51DFC();
    sub_521A0(&qword_81B60, &qword_81B38, (void (*)(void))sub_51F4C);
    uint64_t v56 = v66;
    sub_67C50();
    sub_A8C0(v52, &qword_81AC0);
    sub_A8C0(v49, &qword_81AF8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v68 + 32))(v55, v56, v70);
  }
  else
  {
    type metadata accessor for TypographyPanelViewModel();
    sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
    uint64_t result = sub_67650();
    __break(1u);
  }
  return result;
}

uint64_t sub_43260@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v124 = a2;
  uint64_t v119 = a4;
  uint64_t v105 = sub_4890(&qword_82098);
  __chkstk_darwin(v105);
  Swift::Int v110 = (uint64_t *)((char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_4890(&qword_820A0);
  __chkstk_darwin(v102);
  unint64_t v103 = (uint64_t *)((char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v109 = sub_4890(&qword_820A8);
  __chkstk_darwin(v109);
  uint64_t v104 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_4890(&qword_820B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v99 = (uint64_t *)((char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v101 = sub_4890(&qword_820B8);
  uint64_t v11 = __chkstk_darwin(v101);
  uint64_t v98 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v100 = (uint64_t)&v93 - v13;
  uint64_t v14 = sub_4890(&qword_820C0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v118 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v125 = (uint64_t)&v93 - v17;
  uint64_t v18 = sub_675F0();
  uint64_t v121 = *(void *)(v18 - 8);
  uint64_t v122 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_4890(&qword_820C8);
  uint64_t v120 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_4890(&qword_820D0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_4890(&qword_820D8);
  uint64_t v123 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_4890(&qword_820E0);
  uint64_t v31 = __chkstk_darwin(v30 - 8);
  uint64_t v114 = (uint64_t)&v93 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v115 = (uint64_t)&v93 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  unint64_t v111 = (char *)&v93 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v93 - v37;
  int v116 = a1;
  uint64_t v117 = a3;
  uint64_t v112 = (uint64_t)&v93 - v37;
  uint64_t v113 = v20;
  uint64_t v97 = v24;
  uint64_t v96 = v21;
  char v108 = v23;
  if (a1)
  {
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v124;
    *(void *)(v39 + 24) = a3;
    swift_retain();
    sub_4890(&qword_81FE8);
    sub_5C118();
    sub_67F60();
    int v40 = sub_67A70();
    uint64_t v41 = v120;
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v26, v23, v21);
    *(_DWORD *)&v26[*(int *)(v24 + 36)] = v40;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v21);
    sub_675E0();
    sub_5F064();
    sub_5F128(&qword_82118, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    uint64_t v42 = v122;
    sub_67C40();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v20, v42);
    sub_A8C0((uint64_t)v26, &qword_820D0);
    uint64_t v43 = v123;
    (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v38, v29, v27);
    char v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
    v44((uint64_t)v38, 0, 1, v27);
  }
  else
  {
    char v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 56);
    v44((uint64_t)&v93 - v37, 1, 1, v27);
  }
  swift_retain();
  uint64_t v45 = (void *)sub_24DB4();
  swift_release();
  uint64_t v95 = v29;
  uint64_t v94 = v26;
  uint64_t v107 = v44;
  uint64_t v106 = v27;
  if (v45)
  {
    uint64_t v46 = sub_67810();
    uint64_t v47 = (uint64_t)v99;
    *uint64_t v99 = v46;
    *(void *)(v47 + 8) = 0;
    *(unsigned char *)(v47 + 16) = 1;
    uint64_t v48 = sub_4890(&qword_82120);
    sub_44058(v45, v47 + *(int *)(v48 + 44));
    uint64_t v49 = sub_68090();
    uint64_t v50 = v98;
    sub_41E30(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v98, 0.0, 1, 0.0, 1, v49, v51, &qword_820B0, &qword_820B8);
    sub_A8C0(v47, &qword_820B0);
    uint64_t v52 = v50;
    uint64_t v53 = v100;
    sub_1D2D8(v52, v100, &qword_820B8);
    sub_A85C(v53, (uint64_t)v103, &qword_820B8);
    swift_storeEnumTagMultiPayload();
    sub_4890(&qword_80AA8);
    sub_5EBF8();
    sub_50C4();
    uint64_t v54 = (uint64_t)v104;
    sub_679F0();
    sub_A85C(v54, (uint64_t)v110, &qword_820A8);
    swift_storeEnumTagMultiPayload();
    sub_5EB7C();
    sub_679F0();

    sub_A8C0(v54, &qword_820A8);
    sub_A8C0(v53, &qword_820B8);
  }
  else
  {
    swift_retain();
    char v55 = sub_2499C();
    swift_release();
    if (v55)
    {
      uint64_t v126 = sub_31274(0xD000000000000026, (void *)0x8000000000074D30, 0xD000000000000051, 0x8000000000074D60);
      uint64_t v127 = v56;
      sub_A5D0();
      uint64_t v57 = sub_67C00();
      uint64_t v59 = v58;
      uint64_t v60 = v103;
      *unint64_t v103 = v57;
      v60[1] = v58;
      char v62 = v61 & 1;
      *((unsigned char *)v60 + 16) = v61 & 1;
      v60[3] = v63;
      swift_storeEnumTagMultiPayload();
      sub_5CF28(v57, v59, v62);
      swift_bridgeObjectRetain();
      sub_4890(&qword_80AA8);
      sub_5EBF8();
      sub_50C4();
      uint64_t v64 = (uint64_t)v104;
      sub_679F0();
      sub_A85C(v64, (uint64_t)v110, &qword_820A8);
      swift_storeEnumTagMultiPayload();
      sub_5EB7C();
      sub_679F0();
      sub_A8C0(v64, &qword_820A8);
      sub_52808(v57, v59, v62);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v126 = sub_31274(0xD000000000000011, (void *)0x8000000000074CD0, 0xD000000000000032, 0x8000000000074CF0);
      uint64_t v127 = v65;
      sub_A5D0();
      uint64_t v66 = sub_67C00();
      uint64_t v67 = v110;
      *Swift::Int v110 = v66;
      v67[1] = v68;
      *((unsigned char *)v67 + 16) = v69 & 1;
      v67[3] = v70;
      swift_storeEnumTagMultiPayload();
      sub_4890(&qword_80AA8);
      sub_5EB7C();
      sub_50C4();
      sub_679F0();
    }
  }
  uint64_t v72 = v120;
  uint64_t v71 = v121;
  uint64_t v73 = v117;
  uint64_t v74 = v122;
  long long v75 = v113;
  unint64_t v76 = v108;
  if (v116)
  {
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = v124;
    *(void *)(v77 + 24) = v73;
    swift_retain();
    sub_4890(&qword_81FE8);
    sub_5C118();
    sub_67F60();
    int v78 = sub_67A70();
    uint64_t v79 = (uint64_t)v94;
    uint64_t v80 = v96;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v94, v76, v96);
    *(_DWORD *)(v79 + *(int *)(v97 + 36)) = v78;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v76, v80);
    sub_675E0();
    sub_5F064();
    sub_5F128(&qword_82118, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    uint64_t v81 = v95;
    sub_67C40();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v75, v74);
    sub_A8C0(v79, &qword_820D0);
    uint64_t v82 = (uint64_t)v111;
    uint64_t v83 = v106;
    (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v111, v81, v106);
    uint64_t v84 = 0;
  }
  else
  {
    uint64_t v84 = 1;
    uint64_t v82 = (uint64_t)v111;
    uint64_t v83 = v106;
  }
  v107(v82, v84, 1, v83);
  uint64_t v85 = v112;
  uint64_t v86 = v115;
  sub_A85C(v112, v115, &qword_820E0);
  uint64_t v87 = v125;
  uint64_t v88 = v118;
  sub_A85C(v125, v118, &qword_820C0);
  uint64_t v89 = v114;
  sub_A85C(v82, v114, &qword_820E0);
  uint64_t v90 = v119;
  sub_A85C(v86, v119, &qword_820E0);
  uint64_t v91 = sub_4890(&qword_82100);
  sub_A85C(v88, v90 + *(int *)(v91 + 48), &qword_820C0);
  sub_A85C(v89, v90 + *(int *)(v91 + 64), &qword_820E0);
  sub_A8C0(v82, &qword_820E0);
  sub_A8C0(v87, &qword_820C0);
  sub_A8C0(v85, &qword_820E0);
  sub_A8C0(v89, &qword_820E0);
  sub_A8C0(v88, &qword_820C0);
  return sub_A8C0(v86, &qword_820E0);
}

uint64_t sub_4403C@<X0>(uint64_t *a1@<X8>)
{
  return sub_445F8(a1);
}

uint64_t sub_44058@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v3 = sub_67830();
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_4890(&qword_82128);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  uint64_t v51 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = sub_4890(&qword_82130);
  __chkstk_darwin(v48);
  uint64_t v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&v74[0] = sub_604E8();
  *((void *)&v74[0] + 1) = v10;
  sub_A5D0();
  uint64_t v11 = sub_67C00();
  uint64_t v45 = v12;
  uint64_t v46 = v11;
  int v43 = v13;
  uint64_t v47 = v14;
  uint64_t KeyPath = swift_getKeyPath();
  sub_604E8();
  char v15 = sub_30798();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0) {
    a1 = (void *)*sub_605AC();
  }
  id v16 = a1;
  uint64_t v17 = sub_31C74();
  CTFontRef v18 = sub_60654(*(CGFloat *)v17);

  double v19 = *(double *)sub_31BF4();
  double v20 = fmin(v19 / sub_60704(), 1.0);
  double v21 = sub_6075C();
  sub_60654(v21 * v20);

  uint64_t v22 = sub_67B80();
  uint64_t v23 = swift_getKeyPath();
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = swift_getKeyPath();
  uint64_t v26 = swift_getKeyPath();
  sub_31E0C();
  char v27 = sub_67AF0();
  sub_674B0();
  char v73 = v43 & 1;
  char v69 = 0;
  char v66 = 0;
  *(void *)&long long v55 = v46;
  *((void *)&v55 + 1) = v45;
  LOBYTE(v56) = v43 & 1;
  *(_DWORD *)((char *)&v56 + 1) = *(_DWORD *)v72;
  DWORD1(v56) = *(_DWORD *)&v72[3];
  *((void *)&v56 + 1) = v47;
  *(void *)&long long v57 = KeyPath;
  BYTE8(v57) = 1;
  *(_DWORD *)((char *)&v57 + 9) = *(_DWORD *)v71;
  HIDWORD(v57) = *(_DWORD *)&v71[3];
  *(void *)&long long v58 = v23;
  *((void *)&v58 + 1) = v22;
  *(void *)&long long v59 = v24;
  *((void *)&v59 + 1) = 0x3FE8000000000000;
  *(void *)&long long v60 = v25;
  BYTE8(v6sub_66CA4(2, 18, 1, 0) = 1;
  HIDWORD(v6sub_66CA4(2, 18, 1, 0) = *(_DWORD *)&v70[3];
  *(_DWORD *)((char *)&v60 + 9) = *(_DWORD *)v70;
  *(void *)&long long v61 = v26;
  *((void *)&v61 + 1) = 1;
  LOBYTE(v62) = 0;
  DWORD1(v62) = *(_DWORD *)&v68[3];
  *(_DWORD *)((char *)&v62 + 1) = *(_DWORD *)v68;
  BYTE8(v62) = v27;
  HIDWORD(v62) = *(_DWORD *)&v67[3];
  *(_DWORD *)((char *)&v62 + 9) = *(_DWORD *)v67;
  *(void *)&long long v63 = v28;
  *((void *)&v63 + 1) = v29;
  *(void *)&long long v64 = v30;
  *((void *)&v64 + 1) = v31;
  char v65 = 0;
  uint64_t v33 = v49;
  uint64_t v32 = v50;
  (*(void (**)(unsigned char *, void, uint64_t))(v49 + 104))(v5, enum case for ColorRenderingMode.nonLinear(_:), v50);
  sub_4890(&qword_82138);
  sub_5A1B4(&qword_82140, &qword_82138, (void (*)(void))sub_5F548);
  uint64_t v34 = v51;
  sub_67CA0();
  (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v5, v32);
  v74[7] = v62;
  v74[8] = v63;
  v74[9] = v64;
  v74[3] = v58;
  v74[4] = v59;
  v74[5] = v60;
  v74[6] = v61;
  v74[0] = v55;
  v74[1] = v56;
  char v75 = v65;
  void v74[2] = v57;
  sub_5F868((uint64_t)v74);
  uint64_t v35 = sub_67810();
  uint64_t v37 = v52;
  uint64_t v36 = v53;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v52 + 16))(v9, v34, v53);
  uint64_t v38 = (uint64_t *)&v9[*(int *)(v48 + 36)];
  *uint64_t v38 = v35;
  v38[1] = (uint64_t)sub_4459C;
  uint64_t v38[2] = 0;
  (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v34, v36);
  uint64_t v39 = sub_68080();
  sub_41E30(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v54, 0.0, 1, INFINITY, 0, v39, v40, &qword_82130, (uint64_t *)&unk_82198);
  return sub_A8C0((uint64_t)v9, &qword_82130);
}

double sub_4459C()
{
  sub_677F0();
  sub_675A0();
  return v0 + *(double *)sub_31D8C();
}

uint64_t sub_445DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_445F8(a1);
}

uint64_t sub_445F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_67EA0();
  uint64_t v3 = sub_67B70();
  uint64_t result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t sub_44644(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v10 = (long long *)(v5 + 2);
      uint64_t v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        id v16 = &v8[8 * v9];
        uint64_t v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)id v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  double v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    double v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return sub_68110();
}

uint64_t sub_44808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_4890(&qword_81B38);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_retain();
    uint64_t v10 = sub_24CEC();
    swift_release();
    v13[1] = v10;
    swift_getKeyPath();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a1;
    *(void *)(v11 + 24) = a2;
    swift_retain();
    sub_4890(&qword_81488);
    sub_4890(&qword_81B70);
    sub_AE4C(&qword_82090, &qword_81488);
    sub_5F128(&qword_81678, type metadata accessor for CTFont);
    sub_51F4C();
    sub_68010();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
  }
  else
  {
    type metadata accessor for TypographyPanelViewModel();
    sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
    uint64_t result = sub_67650();
    __break(1u);
  }
  return result;
}

uint64_t sub_44A64@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_4890(&qword_81B80);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *a1;
  v21[0] = sub_604E8();
  v21[1] = v13;
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  void v14[4] = v12;
  sub_A5D0();
  swift_retain();
  id v15 = v12;
  sub_67F70();
  id v16 = v15;
  uint64_t v17 = sub_67B80();
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a4, v11, v8);
  uint64_t v19 = (uint64_t *)(a4 + *(int *)(sub_4890(&qword_81B70) + 36));
  *uint64_t v19 = KeyPath;
  v19[1] = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_44C0C()
{
  type metadata accessor for TypographyPanelViewModel();
  sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  return sub_67660();
}

uint64_t sub_44C80@<X0>(uint64_t a1@<X8>)
{
  return sub_429C8(*v1, v1[1], a1);
}

uint64_t sub_44C88()
{
  sub_4890(&qword_80D00);
  sub_67FD0();
  return v1;
}

uint64_t sub_44CD8()
{
  return sub_67FE0();
}

void (*sub_44D2C(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  v3[4] = *v1;
  v3[5] = v5;
  char v6 = *((unsigned char *)v1 + 16);
  *((unsigned char *)v3 + 19) = v6;
  v3[3] = v4;
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((unsigned char *)v3 + 16) = v6;
  sub_52018((uint64_t)(v3 + 3));
  swift_retain();
  v3[6] = sub_4890(&qword_80D00);
  sub_67FD0();
  return sub_44DD0;
}

void sub_44DD0(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 24;
  char v3 = *(unsigned char *)(*(void *)a1 + 18);
  uint64_t v4 = *(void *)(*(void *)a1 + 40);
  char v5 = *(unsigned char *)(*(void *)a1 + 19);
  *unsigned __int8 v1 = *(void *)(*(void *)a1 + 32);
  v1[1] = v4;
  *((unsigned char *)v1 + 16) = v5;
  *((unsigned char *)v1 + 17) = v3;
  sub_67FE0();
  sub_52044(v2);
  swift_release();
  free(v1);
}

uint64_t sub_44E44()
{
  sub_4890(&qword_80D00);
  sub_67FF0();
  return v1;
}

uint64_t sub_44E98()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_FFF0(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t sub_44ECC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

uint64_t sub_44F00@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v17 = a1 & 1;
  uint64_t result = sub_67F10();
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  *(unsigned char *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 4sub_66CA4(2, 18, 1, 0) = a7;
  *(void *)(a9 + 48) = a8;
  *(unsigned char *)(a9 + 56) = v17;
  *(unsigned char *)(a9 + 64) = v19;
  *(void *)(a9 + 72) = v20;
  return result;
}

uint64_t sub_44FA4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = sub_68040();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  unint64_t v12 = &v18[-v11];
  uint64_t v25 = sub_C080(*(void *)(v2 + 24), *(void *)(v2 + 32));
  uint64_t v26 = v13;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v19 = v5;
  uint64_t v20 = v14;
  uint64_t v21 = v2;
  sub_A5D0();
  sub_68030();
  unint64_t v22 = &protocol witness table for Text;
  uint64_t v23 = v14;
  uint64_t v24 = &protocol witness table for EmptyView;
  swift_getWitnessTable();
  id v15 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16);
  v15(v12, v10, v6);
  id v16 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v15(a2, v12, v6);
  return ((uint64_t (*)(unsigned char *, uint64_t))v16)(v12, v6);
}

uint64_t sub_45188@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(void))(v8 + 40))();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v11(v10, v7, a1);
  unint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v7, a1);
  v11(a2, v10, a1);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a1);
}

uint64_t sub_452C8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_44FA4(a1, a2);
}

uint64_t sub_4530C()
{
  return swift_getKeyPath();
}

uint64_t sub_45330@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)sub_4890(&qword_81B98);
  uint64_t v7 = a3 + v6[11];
  *(void *)uint64_t v7 = swift_getKeyPath();
  *(unsigned char *)(v7 + 8) = 0;
  uint64_t result = sub_1D2D8(a1, a3, &qword_81120);
  uint64_t v9 = (void *)(a3 + v6[9]);
  *uint64_t v9 = 0;
  v9[1] = 0;
  *(unsigned char *)(a3 + v6[10]) = a2;
  return result;
}

uint64_t sub_453BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewView();
  uint64_t v7 = a3 + v6[11];
  *(void *)uint64_t v7 = swift_getKeyPath();
  *(unsigned char *)(v7 + 8) = 0;
  uint64_t v8 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a3, 1, 1, v8);
  uint64_t v10 = (void *)(a3 + v6[9]);
  void *v10 = a1;
  v10[1] = a2;
  *(unsigned char *)(a3 + v6[10]) = 2;
  return result;
}

uint64_t sub_4547C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  sub_4FAC(&qword_81BA0);
  sub_4FAC(&qword_81BA8);
  uint64_t v58 = v2;
  long long v59 = &type metadata for EmptyView;
  uint64_t v60 = v3;
  long long v61 = &protocol witness table for EmptyView;
  type metadata accessor for FeaturePreviewContainerView();
  sub_67A00();
  sub_67A00();
  sub_4FAC(&qword_81BB0);
  sub_67A00();
  unint64_t v4 = sub_520B8();
  uint64_t v42 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v40 = v4;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v38 = swift_getWitnessTable();
  unint64_t v39 = sub_523E0();
  uint64_t v5 = swift_getWitnessTable();
  sub_67E80();
  sub_67E90();
  uint64_t v37 = v5;
  uint64_t v6 = swift_getWitnessTable();
  sub_67D40();
  sub_524BC(v44, v45, v46, v47, v48, v49, v50, v51, v52);
  sub_4FAC(&qword_81C58);
  sub_675D0();
  uint64_t v35 = v6;
  uint64_t v36 = sub_AE4C(&qword_81C60, &qword_81C58);
  swift_getWitnessTable();
  sub_67DE0();
  sub_524BC(v2, (uint64_t)&type metadata for EmptyView, v3, (uint64_t)&protocol witness table for EmptyView, v62, v63, v64, v65, v66);
  swift_release();
  uint64_t v23 = v45;
  uint64_t v24 = v44;
  uint64_t v7 = v46;
  uint64_t v8 = v47;
  uint64_t v9 = v48;
  uint64_t v10 = v49;
  uint64_t v11 = v50;
  LODWORD(v4) = v51;
  char v12 = v52;
  v27[0] = v44;
  v27[1] = v45;
  v27[2] = v46;
  v27[3] = v47;
  v27[4] = v48;
  v27[5] = v49;
  v27[6] = v50;
  int v28 = v51;
  char v29 = v52;
  uint64_t v30 = v53;
  uint64_t v31 = v54;
  uint64_t v32 = v55;
  uint64_t v33 = v56;
  char v34 = v57;
  sub_4FAC(&qword_81C68);
  uint64_t v13 = sub_675D0();
  sub_AE4C(&qword_81C70, &qword_81C68);
  swift_getWitnessTable();
  uint64_t v22 = v13;
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16);
  v25(&v58, v27, v13);
  sub_524BC(v24, v23, v7, v8, v9, v10, v11, v4, v12);
  swift_release();
  swift_release();
  uint64_t v14 = v58;
  uint64_t v15 = (uint64_t)v59;
  uint64_t v16 = v60;
  uint64_t v17 = (uint64_t)v61;
  uint64_t v18 = v62;
  uint64_t v19 = v63;
  uint64_t v20 = v64;
  LODWORD(v1sub_66CA4(2, 18, 1, 0) = v65;
  LOBYTE(v13) = v66;
  uint64_t v44 = v58;
  uint64_t v45 = (uint64_t)v59;
  uint64_t v46 = v60;
  uint64_t v47 = (uint64_t)v61;
  uint64_t v48 = v62;
  uint64_t v49 = v63;
  uint64_t v50 = v64;
  int v51 = v65;
  char v52 = v66;
  uint64_t v53 = v67;
  uint64_t v54 = v68;
  uint64_t v55 = v69;
  uint64_t v56 = v70;
  char v57 = v71;
  v25(a2, &v44, v22);
  sub_524BC(v14, v15, v16, v17, v18, v19, v20, v10, v13);
  swift_release();
  return swift_release();
}

void sub_459B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v278 = a4;
  uint64_t v282 = a3;
  uint64_t v283 = a2;
  uint64_t v280 = type metadata accessor for FeaturePreviewView();
  uint64_t v266 = *(void *)(v280 - 8);
  uint64_t v5 = __chkstk_darwin(v280);
  v264 = v6;
  v265 = (uint64_t (*)(uint64_t))((char *)&v244 - (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v272 = (uint64_t)&v244 - v7;
  uint64_t v8 = sub_4890(&qword_81830);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  v261 = (uint64_t (*)(void))((char *)&v244 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v268 = (uint64_t (*)(uint64_t))((char *)&v244 - v11);
  uint64_t v12 = sub_4890(&qword_82080);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v260 = (char *)&v244 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v276 = (uint64_t (*)(uint64_t))((char *)&v244 - v15);
  uint64_t v16 = sub_67240();
  v270 = *(char **)(v16 - 8);
  uint64_t v271 = v16;
  uint64_t v17 = *((void *)v270 + 8);
  uint64_t v18 = __chkstk_darwin(v16);
  v257 = (char *)&v244 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v18);
  v258 = (char *)&v244 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v259 = (char *)&v244 - v22;
  __chkstk_darwin(v21);
  v267 = (uint64_t (*)(void))((char *)&v244 - v23);
  uint64_t v24 = sub_4890(&qword_81120);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  v262 = (char *)&v244 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  v274 = (uint64_t (*)(uint64_t))((char *)&v244 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  v273 = (uint64_t (*)(void))((char *)&v244 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v244 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v244 - v34;
  uint64_t v36 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v37 = *((void *)v36 - 1);
  uint64_t v38 = *(void *)(v37 + 64);
  uint64_t v39 = __chkstk_darwin(v36);
  v275 = (uint64_t (*)(uint64_t))((char *)&v244 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v263 = (uint64_t)&v244 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  v277 = (uint64_t (*)(uint64_t))((char *)&v244 - v43);
  uint64_t v44 = __chkstk_darwin(v42);
  v269 = (uint64_t (*)(uint64_t))((char *)&v244 - v45);
  __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v244 - v46;
  sub_A85C(a1, (uint64_t)v35, &qword_81120);
  uint64_t v48 = v37;
  uint64_t v50 = *(uint64_t (**)(uint64_t))(v37 + 48);
  uint64_t v49 = v37 + 48;
  v281 = v50;
  int v51 = ((uint64_t (*)(char *, uint64_t, int *))v50)(v35, 1, v36);
  uint64_t v279 = a1;
  if (v51 == 1)
  {
    sub_A8C0((uint64_t)v35, &qword_81120);
  }
  else
  {
    sub_1CA30((uint64_t)v35, (uint64_t)v47, type metadata accessor for FeaturePreviewConfiguration);
    unint64_t v52 = *((void *)v47 + 3);
    if (v52)
    {
      uint64_t v53 = *((void *)v47 + 2);
      uint64_t v54 = HIBYTE(v52) & 0xF;
      if ((v52 & 0x2000000000000000) == 0) {
        uint64_t v54 = v53 & 0xFFFFFFFFFFFFLL;
      }
      if (v54)
      {
        v281 = type metadata accessor for FeaturePreviewConfiguration;
        uint64_t v55 = v269;
        sub_52BF4((uint64_t)v47, (uint64_t)v269, type metadata accessor for FeaturePreviewConfiguration);
        unint64_t v56 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
        uint64_t v57 = swift_allocObject();
        *(void *)(v57 + 16) = v53;
        *(void *)(v57 + 24) = v52;
        sub_1CA30((uint64_t)v55, v57 + v56, type metadata accessor for FeaturePreviewConfiguration);
        v256 = v47;
        sub_52BF4((uint64_t)v47, (uint64_t)v55, v281);
        uint64_t v58 = swift_allocObject();
        *(void *)(v58 + 16) = v53;
        *(void *)(v58 + 24) = v52;
        sub_1CA30((uint64_t)v55, v58 + v56, type metadata accessor for FeaturePreviewConfiguration);
        swift_bridgeObjectRetain_n();
        sub_48120((uint64_t *)&v334);
        swift_release();
        swift_release();
        LODWORD(v273) = BYTE1(v339);
        if (BYTE1(v339)) {
          __int16 v59 = 256;
        }
        else {
          __int16 v59 = 0;
        }
        LODWORD(v274) = v339;
        long long v308 = v334;
        uint64_t v272 = v334;
        uint64_t v280 = v335;
        v281 = (uint64_t (*)(uint64_t))*((void *)&v334 + 1);
        uint64_t v279 = *((void *)&v335 + 1);
        long long v309 = v335;
        v276 = v337;
        v277 = v336;
        *(void *)v310 = v336;
        *(void *)&v310[8] = v337;
        v275 = v338;
        *(void *)&v310[16] = v338;
        *(_WORD *)&v310[24] = v59 | v339;
        unsigned __int8 v311 = 0;
        sub_5E368(v334, *((uint64_t *)&v334 + 1), v335, *((uint64_t *)&v335 + 1), (uint64_t)v336, (uint64_t)v337, (uint64_t)v338, v339, SBYTE1(v339), (void (*)(uint64_t, uint64_t))sub_5FB84);
        sub_4890(&qword_81BC8);
        sub_4890(&qword_81BF8);
        sub_521A0(&qword_81BC0, &qword_81BC8, (void (*)(void))sub_5220C);
        sub_521A0(&qword_81BF0, &qword_81BF8, (void (*)(void))sub_522A8);
        sub_679F0();
        v270 = (char *)*((void *)&v334 + 1);
        uint64_t v271 = v334;
        v268 = (uint64_t (*)(uint64_t))*((void *)&v335 + 1);
        v269 = (uint64_t (*)(uint64_t))v335;
        uint64_t v60 = v337;
        v267 = v336;
        long long v61 = v338;
        __int16 v62 = v339;
        uint64_t v266 = sub_4890(&qword_81BA0);
        sub_4FAC(&qword_81BA8);
        *(void *)&long long v308 = v283;
        *((void *)&v308 + 1) = &type metadata for EmptyView;
        *(void *)&long long v309 = v282;
        *((void *)&v309 + 1) = &protocol witness table for EmptyView;
        type metadata accessor for FeaturePreviewContainerView();
        sub_67A00();
        v264 = (uint64_t (*)(void))sub_520B8();
        uint64_t v63 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v286 = v63;
        uint64_t v287 = WitnessTable;
        v265 = (uint64_t (*)(uint64_t))&protocol conformance descriptor for <> _ConditionalContent<A, B>;
        uint64_t v65 = swift_getWitnessTable();
        sub_426A8((uint64_t)&v334, v266);
        sub_524FC(v271, (uint64_t)v270, (uint64_t)v269, (uint64_t)v268, (uint64_t)v267, (uint64_t)v60, (uint64_t)v61, v62);
        uint64_t v66 = *((void *)&v308 + 1);
        long long v67 = v309;
        uint64_t v68 = *(void *)v310;
        uint64_t v69 = *(void *)&v310[8];
        v269 = *(uint64_t (**)(uint64_t))&v310[16];
        v270 = (char *)v308;
        LODWORD(v271) = *(unsigned __int16 *)&v310[24] | (v311 << 16);
        char v70 = v312;
        long long v298 = v308;
        long long v299 = v309;
        v300 = *(uint64_t (**)(uint64_t))v310;
        v301 = *(uint64_t (**)(uint64_t))&v310[8];
        v302 = *(uint64_t (**)(uint64_t))&v310[16];
        unsigned __int8 v304 = v311;
        __int16 v303 = *(_WORD *)&v310[24];
        char v305 = v312;
        uint64_t v71 = sub_67A00();
        sub_4890(&qword_81BB0);
        v284 = v264;
        uint64_t v285 = v65;
        swift_getWitnessTable();
        sub_523E0();
        uint64_t v72 = v71;
        uint64_t v73 = v282;
        sub_426A8((uint64_t)&v298, v72);
        char v243 = v70;
        uint64_t v74 = v283;
        sub_524DC((uint64_t)v270, v66, v67, *((uint64_t *)&v67 + 1), v68, v69, (uint64_t)v269, v271, v243);
        sub_5E428(v272, (uint64_t)v281, v280, v279, (uint64_t)v277, (uint64_t)v276, (uint64_t)v275, (char)v274, (char)v273, (void (*)(uint64_t, uint64_t))sub_5FB80);
        sub_548B4((uint64_t)v256, type metadata accessor for FeaturePreviewConfiguration);
        goto LABEL_37;
      }
      sub_548B4((uint64_t)v47, type metadata accessor for FeaturePreviewConfiguration);
      a1 = v279;
    }
    else
    {
      sub_548B4((uint64_t)v47, type metadata accessor for FeaturePreviewConfiguration);
    }
  }
  uint64_t v75 = v48;
  sub_A85C(a1, (uint64_t)v33, &qword_81120);
  int v76 = ((uint64_t (*)(char *, uint64_t, int *))v281)(v33, 1, v36);
  uint64_t v77 = v276;
  if (v76 == 1)
  {
    sub_A8C0((uint64_t)v33, &qword_81120);
    uint64_t v78 = v280;
    uint64_t v79 = v273;
    uint64_t v80 = v274;
  }
  else
  {
    v256 = (char *)v49;
    uint64_t v253 = v17;
    uint64_t v81 = v277;
    sub_1CA30((uint64_t)v33, (uint64_t)v277, type metadata accessor for FeaturePreviewConfiguration);
    uint64_t v82 = (uint64_t)v81 + v36[7];
    uint64_t v83 = v268;
    sub_A85C(v82, (uint64_t)v268, &qword_81830);
    uint64_t v84 = sub_4890(&qword_81188);
    uint64_t v85 = *(void *)(v84 - 8);
    uint64_t v86 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))(v85 + 48);
    uint64_t v87 = v85 + 48;
    uint64_t v88 = v84;
    int v89 = v86(v83, 1);
    v254 = v36;
    uint64_t v255 = v75;
    if (v89 == 1)
    {
      sub_A8C0((uint64_t)v83, &qword_81830);
      (*((void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))v270 + 7))(v77, 1, 1, v271);
    }
    else
    {
      uint64_t v249 = v87;
      v250 = (unsigned int (*)(uint64_t (*)(void), uint64_t, uint64_t))v86;
      uint64_t v248 = v88;
      uint64_t v90 = (char *)v83 + *(int *)(v88 + 48);
      uint64_t v91 = v270;
      unint64_t v92 = (void (*)(void, void, void))*((void *)v270 + 4);
      uint64_t v93 = v83;
      uint64_t v94 = v271;
      v268 = (uint64_t (*)(uint64_t))(v270 + 32);
      uint64_t v251 = v82;
      v252 = (void (*)(uint64_t (*)(void), uint64_t (*)(uint64_t), uint64_t))v92;
      v92(v77, v93, v271);
      v247 = (void (*)(uint64_t (*)(uint64_t), void, uint64_t, uint64_t))v91[7];
      v247(v77, 0, 1, v94);
      uint64_t v95 = v91 + 1;
      uint64_t v96 = (void (*)(char *, uint64_t))v91[1];
      v96(v90, v94);
      uint64_t v97 = (unsigned int (*)(void, void, void))v91[6];
      uint64_t v98 = v94;
      if (v97(v77, 1, v94) != 1)
      {
        v244 = v97;
        v245 = (void (*)(uint64_t (*)(void), uint64_t))v96;
        v246 = v95;
        v252(v267, v77, v94);
        v177 = v261;
        sub_A85C(v251, (uint64_t)v261, &qword_81830);
        uint64_t v178 = v248;
        if (v250(v177, 1, v248) == 1)
        {
          sub_A8C0((uint64_t)v177, &qword_81830);
          uint64_t v179 = (uint64_t)v260;
          v247((uint64_t (*)(uint64_t))v260, 1, 1, v98);
          v245(v267, v98);
        }
        else
        {
          uint64_t v201 = (char *)v177 + *(int *)(v178 + 48);
          uint64_t v179 = (uint64_t)v260;
          v252((uint64_t (*)(void))v260, (uint64_t (*)(uint64_t))v201, v98);
          v247((uint64_t (*)(uint64_t))v179, 0, 1, v98);
          uint64_t v202 = v177;
          uint64_t v203 = v245;
          v245(v202, v98);
          uint64_t v204 = v98;
          if (v244(v179, 1, v98) != 1)
          {
            v252((uint64_t (*)(void))v259, (uint64_t (*)(uint64_t))v179, v98);
            unint64_t v205 = v270 + 16;
            v281 = (uint64_t (*)(uint64_t))*((void *)v270 + 2);
            ((void (*)(uint64_t (*)(uint64_t), uint64_t (*)(void), uint64_t))v281)((uint64_t (*)(uint64_t))v258, v267, v204);
            v276 = type metadata accessor for FeaturePreviewConfiguration;
            v206 = v269;
            sub_52BF4((uint64_t)v277, (uint64_t)v269, type metadata accessor for FeaturePreviewConfiguration);
            uint64_t v207 = v266;
            v275 = *(uint64_t (**)(uint64_t))(v266 + 16);
            ((void (*)(uint64_t, uint64_t, uint64_t))v275)(v272, v279, v280);
            uint64_t v208 = v205[64];
            v209 = (uint64_t (*)(void))((v208 + 32) & ~v208);
            uint64_t v210 = *(unsigned __int8 *)(v255 + 80);
            uint64_t v211 = *(unsigned __int8 *)(v207 + 80);
            unint64_t v212 = v38 + v211 + (((unint64_t)v209 + v253 + v210) & ~v210);
            uint64_t v213 = (uint64_t (*)(uint64_t))(((unint64_t)v209 + v253 + v210) & ~v210);
            v273 = v209;
            v274 = v213;
            uint64_t v214 = v204;
            v270 = (char *)v264 + (v212 & ~v211);
            unint64_t v215 = (char *)(v212 & ~v211);
            v262 = v215;
            v264 = (uint64_t (*)(void))(v208 | v210 | v211 | 7);
            uint64_t v216 = swift_allocObject();
            uint64_t v217 = v282;
            *(void *)(v216 + 16) = v283;
            *(void *)(v216 + 24) = v217;
            v252((uint64_t (*)(void))((char *)v209 + v216), (uint64_t (*)(uint64_t))v258, v214);
            v261 = type metadata accessor for FeaturePreviewConfiguration;
            sub_1CA30((uint64_t)v206, (uint64_t)v213 + v216, type metadata accessor for FeaturePreviewConfiguration);
            v218 = &v215[v216];
            v269 = *(uint64_t (**)(uint64_t))(v207 + 32);
            uint64_t v219 = v280;
            ((void (*)(char *, uint64_t, uint64_t))v269)(v218, v272, v280);
            long long v220 = v257;
            ((void (*)(char *, char *, uint64_t))v281)(v257, v259, v214);
            uint64_t v221 = v263;
            sub_52BF4((uint64_t)v277, v263, v276);
            uint64_t v222 = v265;
            ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v275)(v265, v279, v219);
            uint64_t v223 = swift_allocObject();
            uint64_t v224 = v282;
            *(void *)(v223 + 16) = v283;
            *(void *)(v223 + 24) = v224;
            v252((uint64_t (*)(void))((char *)v273 + v223), (uint64_t (*)(uint64_t))v220, v214);
            sub_1CA30(v221, (uint64_t)v274 + v223, v261);
            ((void (*)(char *, uint64_t (*)(uint64_t), uint64_t))v269)(&v262[v223], v222, v219);
            sub_4890(&qword_81EB0);
            *(void *)&long long v334 = &type metadata for Text;
            *((void *)&v334 + 1) = &protocol witness table for Text;
            swift_getOpaqueTypeConformance2();
            sub_48120((uint64_t *)&v334);
            swift_release();
            swift_release();
            LODWORD(v272) = BYTE1(v339);
            if (BYTE1(v339)) {
              __int16 v225 = 256;
            }
            else {
              __int16 v225 = 0;
            }
            LODWORD(v273) = v339;
            long long v308 = v334;
            v270 = (char *)v334;
            uint64_t v280 = v335;
            v281 = (uint64_t (*)(uint64_t))*((void *)&v334 + 1);
            uint64_t v279 = *((void *)&v335 + 1);
            long long v309 = v335;
            v275 = v337;
            v276 = v336;
            *(void *)v310 = v336;
            *(void *)&v310[8] = v337;
            v274 = v338;
            *(void *)&v310[16] = v338;
            *(_WORD *)&v310[24] = v225 | v339;
            unsigned __int8 v311 = 1;
            sub_5E368(v334, *((uint64_t *)&v334 + 1), v335, *((uint64_t *)&v335 + 1), (uint64_t)v336, (uint64_t)v337, (uint64_t)v338, v339, SBYTE1(v339), (void (*)(uint64_t, uint64_t))sub_5DFF0);
            sub_4890(&qword_81BC8);
            sub_4890(&qword_81BF8);
            sub_521A0(&qword_81BC0, &qword_81BC8, (void (*)(void))sub_5220C);
            sub_521A0(&qword_81BF0, &qword_81BF8, (void (*)(void))sub_522A8);
            sub_679F0();
            v268 = (uint64_t (*)(uint64_t))*((void *)&v334 + 1);
            v269 = (uint64_t (*)(uint64_t))v334;
            v265 = (uint64_t (*)(uint64_t))*((void *)&v335 + 1);
            uint64_t v266 = v335;
            v226 = v337;
            v264 = v336;
            v227 = v338;
            __int16 v228 = v339;
            uint64_t v263 = sub_4890(&qword_81BA0);
            sub_4FAC(&qword_81BA8);
            *(void *)&long long v308 = v283;
            *((void *)&v308 + 1) = &type metadata for EmptyView;
            *(void *)&long long v309 = v282;
            *((void *)&v309 + 1) = &protocol witness table for EmptyView;
            type metadata accessor for FeaturePreviewContainerView();
            sub_67A00();
            v261 = (uint64_t (*)(void))sub_520B8();
            uint64_t v229 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
            uint64_t v230 = swift_getWitnessTable();
            uint64_t v290 = v229;
            uint64_t v291 = v230;
            v262 = (char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>;
            uint64_t v231 = swift_getWitnessTable();
            sub_426A8((uint64_t)&v334, v263);
            sub_524FC((uint64_t)v269, (uint64_t)v268, v266, (uint64_t)v265, (uint64_t)v264, (uint64_t)v226, (uint64_t)v227, v228);
            uint64_t v233 = *((void *)&v308 + 1);
            uint64_t v232 = v308;
            uint64_t v235 = *((void *)&v309 + 1);
            uint64_t v234 = v309;
            uint64_t v236 = *(void *)v310;
            v268 = *(uint64_t (**)(uint64_t))&v310[8];
            uint64_t v266 = *(void *)&v310[16];
            LODWORD(v269) = *(unsigned __int16 *)&v310[24] | (v311 << 16);
            char v237 = v312;
            long long v298 = v308;
            long long v299 = v309;
            v300 = *(uint64_t (**)(uint64_t))v310;
            v301 = *(uint64_t (**)(uint64_t))&v310[8];
            v302 = *(uint64_t (**)(uint64_t))&v310[16];
            unsigned __int8 v304 = v311;
            __int16 v303 = *(_WORD *)&v310[24];
            char v305 = v312;
            uint64_t v238 = sub_67A00();
            sub_4890(&qword_81BB0);
            v288 = v261;
            uint64_t v289 = v231;
            swift_getWitnessTable();
            sub_523E0();
            sub_426A8((uint64_t)&v298, v238);
            uint64_t v239 = v232;
            uint64_t v240 = v234;
            uint64_t v73 = v282;
            uint64_t v74 = v283;
            sub_524DC(v239, v233, v240, v235, v236, (uint64_t)v268, v266, (int)v269, v237);
            sub_5E428((uint64_t)v270, (uint64_t)v281, v280, v279, (uint64_t)v276, (uint64_t)v275, (uint64_t)v274, (char)v273, v272, (void (*)(uint64_t, uint64_t))sub_5FB80);
            uint64_t v241 = v271;
            v242 = v245;
            v245((uint64_t (*)(void))v259, v271);
            v242(v267, v241);
            sub_548B4((uint64_t)v277, type metadata accessor for FeaturePreviewConfiguration);
            goto LABEL_37;
          }
          v203(v267, v98);
        }
        sub_548B4((uint64_t)v277, type metadata accessor for FeaturePreviewConfiguration);
        sub_A8C0(v179, &qword_82080);
        a1 = v279;
        uint64_t v78 = v280;
        uint64_t v79 = v273;
        uint64_t v80 = v274;
        uint64_t v36 = v254;
        uint64_t v75 = v255;
        goto LABEL_19;
      }
    }
    sub_548B4((uint64_t)v277, type metadata accessor for FeaturePreviewConfiguration);
    sub_A8C0((uint64_t)v77, &qword_82080);
    a1 = v279;
    uint64_t v78 = v280;
    uint64_t v79 = v273;
    uint64_t v80 = v274;
    uint64_t v36 = v254;
    uint64_t v75 = v255;
  }
LABEL_19:
  sub_A85C(a1, (uint64_t)v79, &qword_81120);
  if (((unsigned int (*)(uint64_t (*)(void), uint64_t, int *))v281)(v79, 1, v36) == 1)
  {
    sub_A8C0((uint64_t)v79, &qword_81120);
  }
  else
  {
    uint64_t v99 = v75;
    uint64_t v100 = v275;
    sub_1CA30((uint64_t)v79, (uint64_t)v275, type metadata accessor for FeaturePreviewConfiguration);
    uint64_t v101 = (char *)v100 + v36[8];
    if ((v101[4] & 1) == 0)
    {
      LODWORD(v276) = *(_DWORD *)v101;
      v281 = type metadata accessor for FeaturePreviewConfiguration;
      uint64_t v115 = v269;
      sub_52BF4((uint64_t)v100, (uint64_t)v269, type metadata accessor for FeaturePreviewConfiguration);
      uint64_t v116 = v266;
      v277 = *(uint64_t (**)(uint64_t))(v266 + 16);
      ((void (*)(uint64_t, uint64_t, uint64_t))v277)(v272, a1, v78);
      uint64_t v117 = *(unsigned __int8 *)(v99 + 80);
      uint64_t v118 = (uint64_t (*)(uint64_t))((v117 + 32) & ~v117);
      unint64_t v119 = ((unint64_t)v118 + v38 + 1) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v120 = *(unsigned __int8 *)(v116 + 80);
      v273 = (uint64_t (*)(void))((char *)v264 + ((v120 + v119 + 4) & ~v120));
      v274 = v118;
      uint64_t v121 = (char *)((v120 + v119 + 4) & ~v120);
      v270 = v121;
      uint64_t v271 = v117 | v120 | 7;
      uint64_t v122 = swift_allocObject();
      uint64_t v123 = v282;
      *(void *)(v122 + 16) = v283;
      *(void *)(v122 + 24) = v123;
      v268 = type metadata accessor for FeaturePreviewConfiguration;
      sub_1CA30((uint64_t)v115, (uint64_t)v118 + v122, type metadata accessor for FeaturePreviewConfiguration);
      LODWORD(v115) = v276;
      *(_DWORD *)(v122 + v119) = v276;
      uint64_t v124 = &v121[v122];
      uint64_t v125 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 32);
      uint64_t v126 = v280;
      v125(v124, v272, v280);
      uint64_t v127 = v263;
      sub_52BF4((uint64_t)v100, v263, v281);
      uint64_t v128 = v265;
      ((void (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v277)(v265, v279, v126);
      uint64_t v129 = swift_allocObject();
      uint64_t v130 = v282;
      *(void *)(v129 + 16) = v283;
      *(void *)(v129 + 24) = v130;
      sub_1CA30(v127, (uint64_t)v274 + v129, v268);
      *(_DWORD *)(v129 + v119) = v115;
      v125(&v270[v129], (uint64_t)v128, v280);
      sub_4890(&qword_81EB8);
      unint64_t v131 = sub_6A3C();
      *(void *)&long long v334 = &type metadata for GlyphShape;
      *((void *)&v334 + 1) = v131;
      swift_getOpaqueTypeConformance2();
      sub_48120((uint64_t *)&v334);
      swift_release();
      swift_release();
      uint64_t v280 = *((void *)&v334 + 1);
      v281 = (uint64_t (*)(uint64_t))v334;
      uint64_t v279 = v335;
      v276 = v336;
      v277 = (uint64_t (*)(uint64_t))*((void *)&v335 + 1);
      v273 = v338;
      v274 = v337;
      LODWORD(v271) = BYTE1(v339);
      LODWORD(v272) = v339;
      long long v308 = v334;
      long long v309 = v335;
      *(void *)v310 = v336;
      *(void *)&v310[8] = v337;
      *(void *)&v310[16] = v338;
      *(_WORD *)&v310[24] = v339;
      uint64_t v132 = sub_4890(&qword_81BA8);
      *(void *)&long long v334 = v283;
      *((void *)&v334 + 1) = &type metadata for EmptyView;
      *(void *)&long long v335 = v130;
      *((void *)&v335 + 1) = &protocol witness table for EmptyView;
      type metadata accessor for FeaturePreviewContainerView();
      uint64_t v133 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
      uint64_t v134 = swift_getWitnessTable();
      sub_426A8((uint64_t)&v308, v132);
      v268 = (uint64_t (*)(uint64_t))*((void *)&v334 + 1);
      v269 = (uint64_t (*)(uint64_t))v334;
      uint64_t v266 = *((void *)&v335 + 1);
      v267 = (uint64_t (*)(void))v335;
      id v135 = v336;
      uint64_t v136 = v337;
      v265 = v338;
      LOBYTE(v13sub_66CA4(2, 18, 1, 0) = BYTE2(v339);
      LOWORD(v125) = v339;
      long long v298 = v334;
      long long v299 = v335;
      v300 = v336;
      v301 = v337;
      v302 = v338;
      __int16 v303 = v339;
      unsigned __int8 v304 = BYTE2(v339);
      uint64_t v137 = sub_4890(&qword_81BA0);
      uint64_t v138 = sub_67A00();
      v264 = (uint64_t (*)(void))sub_520B8();
      uint64_t v294 = v133;
      uint64_t v295 = v134;
      v270 = (char *)&protocol conformance descriptor for <> _ConditionalContent<A, B>;
      uint64_t v139 = swift_getWitnessTable();
      sub_427A0((uint64_t)&v298, v137, v138);
      sub_52558((uint64_t)v269, (uint64_t)v268, (uint64_t)v267, v266, (uint64_t)v135, (uint64_t)v136, (uint64_t)v265, (__int16)v125, v130);
      uint64_t v140 = *((void *)&v308 + 1);
      long long v141 = v309;
      uint64_t v142 = *(void *)v310;
      uint64_t v143 = *(void *)&v310[8];
      v267 = *(uint64_t (**)(void))&v310[16];
      v268 = (uint64_t (*)(uint64_t))v308;
      LODWORD(v269) = *(unsigned __int16 *)&v310[24] | (v311 << 16);
      LOBYTE(v13sub_66CA4(2, 18, 1, 0) = v312;
      long long v298 = v308;
      long long v299 = v309;
      v300 = *(uint64_t (**)(uint64_t))v310;
      v301 = *(uint64_t (**)(uint64_t))&v310[8];
      v302 = *(uint64_t (**)(uint64_t))&v310[16];
      unsigned __int8 v304 = v311;
      __int16 v303 = *(_WORD *)&v310[24];
      char v305 = v312;
      uint64_t v144 = sub_67A00();
      sub_4890(&qword_81BB0);
      v292 = v264;
      uint64_t v293 = v139;
      swift_getWitnessTable();
      sub_523E0();
      uint64_t v145 = v144;
      uint64_t v74 = v283;
      sub_426A8((uint64_t)&v298, v145);
      uint64_t v146 = v140;
      uint64_t v73 = v282;
      sub_524DC((uint64_t)v268, v146, v141, *((uint64_t *)&v141 + 1), v142, v143, (uint64_t)v267, (int)v269, v130);
      sub_5E428((uint64_t)v281, v280, v279, (uint64_t)v277, (uint64_t)v276, (uint64_t)v274, (uint64_t)v273, v272, v271, (void (*)(uint64_t, uint64_t))sub_5260C);
      sub_548B4((uint64_t)v275, type metadata accessor for FeaturePreviewConfiguration);
      goto LABEL_37;
    }
    sub_548B4((uint64_t)v100, type metadata accessor for FeaturePreviewConfiguration);
  }
  uint64_t v102 = (uint64_t (**)(uint64_t))(a1 + *(int *)(v78 + 36));
  unint64_t v103 = *v102;
  if (*v102)
  {
    uint64_t v104 = v102[1];
    sub_A85C(a1, (uint64_t)v80, &qword_81120);
    if (((unsigned int (*)(uint64_t (*)(uint64_t), uint64_t, int *))v281)(v80, 1, v36) == 1)
    {
      swift_retain();
      sub_A8C0((uint64_t)v80, &qword_81120);
      char v105 = 1;
    }
    else
    {
      uint64_t v147 = (uint64_t)v80;
      char v105 = *((unsigned char *)v80 + v36[11]);
      swift_retain();
      sub_548B4(v147, type metadata accessor for FeaturePreviewConfiguration);
    }
    char v148 = *(unsigned char *)(a1 + *(int *)(v78 + 40));
    v149 = (void *)swift_allocObject();
    uint64_t v150 = v283;
    v149[2] = v283;
    uint64_t v151 = v150;
    uint64_t v152 = v282;
    v149[3] = v282;
    v149[4] = v103;
    uint64_t v153 = v152;
    v276 = v104;
    v277 = v103;
    v149[5] = v104;
    uint64_t KeyPath = (uint64_t (*)(void))swift_getKeyPath();
    char v341 = 0;
    v344 = KeyPath;
    char v345 = 0;
    LOBYTE(v334) = v105;
    *(_DWORD *)((char *)&v334 + 1) = *(_DWORD *)v343;
    DWORD1(v334) = *(_DWORD *)&v343[3];
    *((void *)&v334 + 1) = sub_5D5CC;
    long long v335 = (unint64_t)v149;
    v336 = 0;
    LOBYTE(v337) = v148;
    *(_DWORD *)((char *)&v337 + 1) = *(_DWORD *)v342;
    HIDWORD(v337) = *(_DWORD *)&v342[3];
    v338 = KeyPath;
    LOBYTE(v339) = 0;
    *(void *)&long long v308 = v151;
    *((void *)&v308 + 1) = &type metadata for EmptyView;
    *(void *)&long long v309 = v153;
    *((void *)&v309 + 1) = &protocol witness table for EmptyView;
    uint64_t v155 = type metadata accessor for FeaturePreviewContainerView();
    v273 = (uint64_t (*)(void))swift_getWitnessTable();
    unint64_t v156 = *(void (**)(char *, long long *, uint64_t))(*(void *)(v155 - 8) + 16);
    v156(v313, &v334, v155);
    swift_retain();
    swift_release();
    sub_5260C(0);
    sub_5CF38((uint64_t)&v344);
    uint64_t v279 = *((void *)&v315 + 1);
    v274 = (uint64_t (*)(uint64_t))v315;
    v275 = v316;
    v281 = v318;
    LODWORD(v28sub_66CA4(2, 18, 1, 0) = v319;
    LOBYTE(v334) = v313[0];
    *((void *)&v334 + 1) = v314;
    long long v335 = v315;
    v336 = v316;
    LOBYTE(v337) = v317;
    v338 = v318;
    LOBYTE(v339) = v319;
    v156((char *)&v308, &v334, v155);
    uint64_t v157 = *((void *)&v309 + 1);
    uint64_t v158 = *(void *)&v310[16];
    char v159 = v310[24];
    LOBYTE(v298) = v308;
    *((void *)&v298 + 1) = *((void *)&v308 + 1);
    long long v299 = v309;
    v300 = *(uint64_t (**)(uint64_t))v310;
    LOBYTE(v301) = v310[8];
    v302 = *(uint64_t (**)(uint64_t))&v310[16];
    LOBYTE(v303) = v310[24];
    uint64_t v160 = sub_4890(&qword_81BA8);
    uint64_t v272 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
    sub_427A0((uint64_t)&v298, v160, v155);
    swift_release();
    sub_5260C(v157);
    sub_1CE40(v158, v159);
    v270 = (char *)*((void *)&v334 + 1);
    uint64_t v271 = v334;
    long long v161 = v335;
    uint64_t v162 = v336;
    v268 = v338;
    v269 = v337;
    char v163 = BYTE2(v339);
    LOWORD(v156) = v339;
    long long v298 = v334;
    long long v299 = v335;
    v300 = v336;
    v301 = v337;
    v302 = v338;
    __int16 v303 = v339;
    unsigned __int8 v304 = BYTE2(v339);
    uint64_t v164 = sub_4890(&qword_81BA0);
    uint64_t v266 = v164;
    uint64_t v165 = sub_67A00();
    v267 = (uint64_t (*)(void))sub_520B8();
    uint64_t v306 = v272;
    v307 = v273;
    v273 = (uint64_t (*)(void))&protocol conformance descriptor for <> _ConditionalContent<A, B>;
    uint64_t v166 = swift_getWitnessTable();
    sub_427A0((uint64_t)&v298, v164, v165);
    sub_52558(v271, (uint64_t)v270, v161, *((uint64_t *)&v161 + 1), (uint64_t)v162, (uint64_t)v269, (uint64_t)v268, (__int16)v156, v163);
    uint64_t v168 = *((void *)&v308 + 1);
    uint64_t v167 = v308;
    long long v169 = v309;
    v270 = *(char **)&v310[8];
    uint64_t v271 = *(void *)v310;
    uint64_t v170 = *(void *)&v310[16];
    LODWORD(v272) = *(unsigned __int16 *)&v310[24] | (v311 << 16);
    char v171 = v312;
    long long v298 = v308;
    long long v299 = v309;
    v300 = *(uint64_t (**)(uint64_t))v310;
    v301 = *(uint64_t (**)(uint64_t))&v310[8];
    v302 = *(uint64_t (**)(uint64_t))&v310[16];
    unsigned __int8 v304 = v311;
    __int16 v303 = *(_WORD *)&v310[24];
    char v305 = v312;
    uint64_t v172 = sub_67A00();
    sub_4890(&qword_81BB0);
    v296 = v267;
    uint64_t v297 = v166;
    swift_getWitnessTable();
    sub_523E0();
    uint64_t v173 = v172;
    uint64_t v74 = v283;
    sub_426A8((uint64_t)&v298, v173);
    sub_5260C((uint64_t)v277);
    uint64_t v174 = v168;
    uint64_t v73 = v282;
    sub_524DC(v167, v174, v169, *((uint64_t *)&v169 + 1), v271, (uint64_t)v270, v170, v272, v171);
    swift_release();
    sub_5260C(v279);
    sub_1CE40((uint64_t)v281, v280);
  }
  else
  {
    uint64_t v106 = *(int *)(v78 + 40);
    if (*(unsigned char *)(a1 + v106) == 2)
    {
      long long v309 = 0u;
      memset(v310, 0, 25);
      long long v308 = 0u;
      v310[25] = 1;
      sub_4890(&qword_81C50);
      sub_5246C(qword_869F0, &qword_81C50);
      sub_679F0();
      uint64_t v280 = *((void *)&v334 + 1);
      v281 = (uint64_t (*)(uint64_t))v334;
      uint64_t v279 = v335;
      v276 = v336;
      v277 = (uint64_t (*)(uint64_t))*((void *)&v335 + 1);
      v274 = v338;
      v275 = v337;
      LODWORD(v272) = BYTE1(v339);
      LODWORD(v273) = v339;
      long long v308 = v334;
      long long v309 = v335;
      *(void *)v310 = v336;
      *(void *)&v310[8] = v337;
      *(void *)&v310[16] = v338;
      *(_WORD *)&v310[24] = v339;
      sub_4FAC(&qword_81BA0);
      sub_4FAC(&qword_81BA8);
      uint64_t v107 = v283;
      *(void *)&long long v334 = v283;
      *((void *)&v334 + 1) = &type metadata for EmptyView;
      uint64_t v108 = v282;
      *(void *)&long long v335 = v282;
      *((void *)&v335 + 1) = &protocol witness table for EmptyView;
      type metadata accessor for FeaturePreviewContainerView();
      sub_67A00();
      uint64_t v109 = sub_67A00();
      uint64_t v110 = sub_4890(&qword_81BB0);
      unint64_t v111 = sub_520B8();
      uint64_t v112 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
      uint64_t v74 = v107;
      uint64_t v113 = swift_getWitnessTable();
      uint64_t v332 = v112;
      uint64_t v333 = v113;
      uint64_t v114 = swift_getWitnessTable();
      unint64_t v330 = v111;
      uint64_t v331 = v114;
      uint64_t v73 = v108;
      swift_getWitnessTable();
      sub_523E0();
      sub_427A0((uint64_t)&v308, v109, v110);
      sub_5261C((uint64_t)v281, v280, v279, (uint64_t)v277, (uint64_t)v276, (uint64_t)v275, (uint64_t)v274, (char)v273, v272);
    }
    else
    {
      unint64_t v175 = (unsigned __int8 *)v262;
      sub_A85C(a1, (uint64_t)v262, &qword_81120);
      if (((unsigned int (*)(unsigned __int8 *, uint64_t, int *))v281)(v175, 1, v36) == 1)
      {
        sub_A8C0((uint64_t)v175, &qword_81120);
        uint64_t v176 = 1;
      }
      else
      {
        uint64_t v176 = v175[v36[11]];
        sub_548B4((uint64_t)v175, type metadata accessor for FeaturePreviewConfiguration);
      }
      uint64_t v180 = v282;
      uint64_t v181 = v283;
      uint64_t v182 = *(unsigned __int8 *)(a1 + v106);
      uint64_t v183 = (uint64_t (*)(uint64_t))swift_getKeyPath();
      *(void *)&long long v308 = v176;
      *((void *)&v308 + 1) = sub_49394;
      long long v309 = 0uLL;
      *(void *)v310 = 0;
      *(void *)&v310[8] = v182;
      v281 = v183;
      *(void *)&v310[16] = v183;
      *(_WORD *)&v310[24] = 0;
      swift_retain();
      sub_4890(&qword_81C50);
      sub_5246C(qword_869F0, &qword_81C50);
      sub_679F0();
      uint64_t v279 = *((void *)&v334 + 1);
      uint64_t v280 = v334;
      v276 = (uint64_t (*)(uint64_t))*((void *)&v335 + 1);
      v277 = (uint64_t (*)(uint64_t))v335;
      v274 = v337;
      v275 = v336;
      v273 = v338;
      char v184 = BYTE1(v339);
      LODWORD(v272) = v339;
      long long v308 = v334;
      long long v309 = v335;
      *(void *)v310 = v336;
      *(void *)&v310[8] = v337;
      *(void *)&v310[16] = v338;
      *(_WORD *)&v310[24] = v339;
      sub_4FAC(&qword_81BA0);
      sub_4FAC(&qword_81BA8);
      *(void *)&long long v334 = v181;
      *((void *)&v334 + 1) = &type metadata for EmptyView;
      *(void *)&long long v335 = v180;
      *((void *)&v335 + 1) = &protocol witness table for EmptyView;
      type metadata accessor for FeaturePreviewContainerView();
      sub_67A00();
      uint64_t v185 = sub_67A00();
      uint64_t v186 = sub_4890(&qword_81BB0);
      unint64_t v187 = sub_520B8();
      uint64_t v188 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
      uint64_t v189 = swift_getWitnessTable();
      uint64_t v322 = v188;
      uint64_t v323 = v189;
      uint64_t v73 = v282;
      uint64_t v190 = swift_getWitnessTable();
      unint64_t v320 = v187;
      uint64_t v321 = v190;
      swift_getWitnessTable();
      sub_523E0();
      uint64_t v74 = v181;
      sub_427A0((uint64_t)&v308, v185, v186);
      sub_5261C(v280, v279, (uint64_t)v277, (uint64_t)v276, (uint64_t)v275, (uint64_t)v274, (uint64_t)v273, v272, v184);
      swift_release();
    }
  }
LABEL_37:
  v191 = v336;
  uint64_t v192 = v337;
  char v193 = v340;
  v275 = v338;
  LODWORD(v276) = v339;
  v281 = (uint64_t (*)(uint64_t))v334;
  uint64_t v279 = *((void *)&v335 + 1);
  uint64_t v280 = *((void *)&v334 + 1);
  v277 = (uint64_t (*)(uint64_t))v335;
  sub_4FAC(&qword_81BA0);
  sub_4FAC(&qword_81BA8);
  *(void *)&long long v308 = v74;
  *((void *)&v308 + 1) = &type metadata for EmptyView;
  *(void *)&long long v309 = v73;
  *((void *)&v309 + 1) = &protocol witness table for EmptyView;
  type metadata accessor for FeaturePreviewContainerView();
  sub_67A00();
  sub_67A00();
  sub_4FAC(&qword_81BB0);
  uint64_t v194 = sub_67A00();
  unint64_t v195 = sub_520B8();
  uint64_t v196 = sub_521A0(&qword_81C20, &qword_81BA8, (void (*)(void))sub_52344);
  uint64_t v197 = swift_getWitnessTable();
  uint64_t v328 = v196;
  uint64_t v329 = v197;
  uint64_t v198 = swift_getWitnessTable();
  unint64_t v326 = v195;
  uint64_t v327 = v198;
  uint64_t v199 = swift_getWitnessTable();
  unint64_t v200 = sub_523E0();
  uint64_t v324 = v199;
  unint64_t v325 = v200;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)(v194 - 8) + 16))(v278, &v334, v194);
  sub_524BC((uint64_t)v281, v280, (uint64_t)v277, v279, (uint64_t)v191, (uint64_t)v192, (uint64_t)v275, (int)v276, v193);
}

uint64_t sub_48120@<X0>(uint64_t *a1@<X8>)
{
  sub_4FAC(&qword_81FA8);
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  sub_67F90();
  sub_675D0();
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  sub_67F90();
  uint64_t v1 = sub_675D0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v31 = &protocol witness table for _FlexFrameLayout;
  swift_getWitnessTable();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = &protocol witness table for _FlexFrameLayout;
  uint64_t v2 = swift_getWitnessTable();
  type metadata accessor for FeaturePreviewContainerView();
  uint64_t v41 = v1;
  uint64_t v42 = &type metadata for EmptyView;
  uint64_t v43 = v2;
  uint64_t v44 = &protocol witness table for EmptyView;
  type metadata accessor for FeaturePreviewContainerView();
  sub_67A00();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = swift_getWitnessTable();
  swift_getWitnessTable();
  sub_67E80();
  uint64_t v20 = v33;
  uint64_t v21 = v32;
  uint64_t v3 = v34;
  uint64_t v4 = v35;
  uint64_t v5 = v36;
  uint64_t v6 = v37;
  uint64_t v7 = v38;
  LOBYTE(v1) = v40;
  char v8 = v39;
  v23[0] = v32;
  v23[1] = v33;
  v23[2] = v34;
  v23[3] = v35;
  v23[4] = v36;
  v23[5] = v37;
  v23[6] = v38;
  char v24 = v39;
  char v25 = v40;
  uint64_t v9 = sub_67E90();
  swift_getWitnessTable();
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16);
  v19(&v41, v23, v9);
  sub_5E428(v21, v20, v3, v4, v5, v6, v7, v8, v1, (void (*)(uint64_t, uint64_t))sub_5FB80);
  uint64_t v10 = v41;
  uint64_t v11 = (uint64_t)v42;
  uint64_t v12 = v43;
  uint64_t v13 = (uint64_t)v44;
  uint64_t v14 = v45;
  uint64_t v15 = v46;
  uint64_t v16 = v47;
  char v17 = v49;
  LOBYTE(v7) = v48;
  uint64_t v32 = v41;
  uint64_t v33 = (uint64_t)v42;
  uint64_t v34 = v43;
  uint64_t v35 = (uint64_t)v44;
  uint64_t v36 = v45;
  uint64_t v37 = v46;
  uint64_t v38 = v47;
  char v39 = v48;
  char v40 = v49;
  v19(a1, &v32, v9);
  return sub_5E428(v10, v11, v12, v13, v14, v15, v16, v7, v17, (void (*)(uint64_t, uint64_t))sub_5FB80);
}

uint64_t sub_48514@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_67870();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for FeaturePreviewView() + 44);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  sub_52694(*(void *)v5, v7);
  LOBYTE(a1) = sub_4C1E0(v6, v7);
  sub_1CE40(v6, v7);
  if (a1)
  {
    sub_67860();
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    sub_67850(v12);
    sub_67840();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    sub_67850(v13);
    uint64_t result = sub_67890();
  }
  else
  {
    uint64_t result = sub_67880();
  }
  *a2 = result;
  a2[1] = v9;
  a2[2] = v10 & 1;
  a2[3] = v11;
  return result;
}

uint64_t sub_48660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void *__return_ptr, int *, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  void (*v28)(void *__return_ptr, int *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  void v31[6];
  char v32;
  uint64_t v33;

  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v11 = sub_67240();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_4890(&qword_81EB0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v19 = sub_67BF0();
  uint64_t v21 = v20;
  char v23 = v22;
  v31[4] = v19;
  v31[5] = v20;
  uint64_t v32 = v22 & 1;
  uint64_t v33 = v24;
  char v25 = (int *)(a2 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 32));
  if (*((unsigned char *)v25 + 4) == 1 || (uint64_t v30 = *v25, v28(v31, &v30, a3, a4, v27), !v31[1])) {
    sub_67880();
  }
  sub_67D70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_52808(v19, v21, v23 & 1);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v29, v18, v15);
}

uint64_t sub_488CC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_67870();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for FeaturePreviewView() + 44);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  sub_52694(*(void *)v5, v7);
  LOBYTE(a1) = sub_4C1E0(v6, v7);
  sub_1CE40(v6, v7);
  if (a1)
  {
    sub_67860();
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    sub_67850(v12);
    sub_67840();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    sub_67850(v13);
    uint64_t result = sub_67890();
  }
  else
  {
    uint64_t result = sub_67880();
  }
  *a2 = result;
  a2[1] = v9;
  a2[2] = v10 & 1;
  a2[3] = v11;
  return result;
}

uint64_t sub_48A18@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v7 = sub_67870();
  __chkstk_darwin(v7 - 8);
  uint64_t v21 = sub_4890(&qword_81EB8);
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  char v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(a1 + 8);
  sub_4890(&qword_80D40);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_693E0;
  *(_WORD *)(v12 + 32) = a2;
  id v13 = v11;
  sub_31940();
  sub_304D8(v12);
  double v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_678F0();
  id v24 = v13;
  __int16 v25 = a2;
  double v26 = fmin(v15, 1.0);
  uint64_t v27 = v16;
  uint64_t v17 = a3 + *(int *)(type metadata accessor for FeaturePreviewView() + 44);
  uint64_t v18 = *(void *)v17;
  LOBYTE(a1) = *(unsigned char *)(v17 + 8);
  sub_52694(*(void *)v17, a1);
  LOBYTE(a3) = sub_4C1E0(v18, a1);
  sub_1CE40(v18, a1);
  if (a3)
  {
    sub_67860();
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    sub_67850(v28);
    __int16 v23 = a2;
    sub_67840();
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    sub_67850(v29);
    sub_67890();
  }
  else
  {
    sub_67880();
  }
  sub_6A3C();
  sub_67D70();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v22, v10, v21);
}

uint64_t sub_48CC8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v35 = a4;
  unsigned int v5 = HIWORD(a2);
  uint64_t v6 = sub_67870();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for FeaturePreviewView();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v31 - v9;
  uint64_t v11 = sub_4890(&qword_81EB8);
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  __chkstk_darwin(v11);
  id v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = *(void **)(a1 + 8);
  sub_4890(&qword_80D40);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_693E0;
  __int16 v16 = v5;
  *(_WORD *)(v15 + 32) = v5;
  id v17 = v14;
  sub_31940();
  sub_304D8(v15);
  double v19 = v18;
  swift_bridgeObjectRelease();
  double v20 = fmin(v19, 1.0);
  LODWORD(v15) = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for FeaturePreviewConfiguration(0) + 36));
  uint64_t v21 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, v7);
  if (v15 == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v22 = sub_678E0();
  }
  else
  {
    sub_49084();
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    if (v24) {
      uint64_t v22 = sub_678E0();
    }
    else {
      uint64_t v22 = sub_678D0();
    }
  }
  __int16 v25 = v16;
  id v37 = v17;
  __int16 v38 = v16;
  double v39 = v20;
  uint64_t v40 = v22;
  uint64_t v26 = v21 + *(int *)(v7 + 44);
  uint64_t v27 = *(void *)v26;
  char v28 = *(unsigned char *)(v26 + 8);
  sub_52694(*(void *)v26, v28);
  char v29 = sub_4C1E0(v27, v28);
  sub_1CE40(v27, v28);
  if (v29)
  {
    sub_67860();
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    sub_67850(v41);
    __int16 v36 = v25;
    sub_67840();
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    sub_67850(v42);
    sub_67890();
  }
  else
  {
    sub_67880();
  }
  sub_6A3C();
  sub_67D70();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v35, v13, v34);
}

uint64_t sub_49084()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_4890(&qword_81120);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A85C(v1, (uint64_t)v4, &qword_81120);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_A8C0((uint64_t)v4, &qword_81120);
    return 0;
  }
  sub_1CA30((uint64_t)v4, (uint64_t)v8, type metadata accessor for FeaturePreviewConfiguration);
  if (v8[*(int *)(v5 + 36)])
  {
    sub_548B4((uint64_t)v8, type metadata accessor for FeaturePreviewConfiguration);
    return 0;
  }
  char v10 = &v8[*(int *)(v5 + 40)];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  swift_bridgeObjectRetain();
  sub_548B4((uint64_t)v8, type metadata accessor for FeaturePreviewConfiguration);
  if (v11) {
    return v12;
  }
  else {
    return 0;
  }
}

uint64_t sub_49254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void (*)(void))__chkstk_darwin(v6);
  uint64_t v11 = (char *)&v15 - v10;
  v9();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12(v11, v8, a2);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  v12(a3, v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_49394@<X0>(uint64_t a1@<X8>)
{
  sub_67880();
  uint64_t result = sub_67BE0();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_493FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)@<X0>(char *a1@<X8>)@<X3>, uint64_t (*a5)@<X0>(char *a1@<X8>)@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v100 = a8;
  uint64_t v95 = a4;
  uint64_t v96 = a6;
  uint64_t v94 = a5;
  uint64_t v91 = (uint64_t (*)@<X0>(char *@<X8>))a3;
  uint64_t v97 = a9;
  uint64_t v98 = a12;
  uint64_t v99 = a10;
  unint64_t v92 = (uint64_t (*)@<X0>(char *@<X8>))a11;
  uint64_t v93 = a7;
  uint64_t v15 = type metadata accessor for FeaturePreviewView();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v90 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  double v20 = (char *)&v80 - v19;
  uint64_t v21 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v22 = v17 + 7;
  if (*(unsigned char *)(a1 + *(int *)(v21 + 36)) == 1)
  {
    LODWORD(v88) = *(unsigned __int8 *)(a1 + *(int *)(v21 + 44));
    int v89 = *(unsigned __int8 *)(a2 + *(int *)(v15 + 40));
    uint64_t v85 = *(void (**)(void, void, void))(v16 + 16);
    uint64_t v86 = v16 + 16;
    v85(v20, a2, v15);
    uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v24 = (v23 + 64) & ~v23;
    unint64_t v25 = (v22 + v24) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v83 = v25 + 16;
    uint64_t v84 = v23 | 7;
    unint64_t v81 = v25;
    uint64_t v26 = (uint64_t (*)@<X0>(char *@<X8>))swift_allocObject();
    uint64_t v80 = a2;
    uint64_t v28 = (uint64_t)v92;
    uint64_t v27 = v93;
    uint64_t v29 = v100;
    *((void *)v26 + 2) = v93;
    *((void *)v26 + 3) = v29;
    *((void *)v26 + 4) = v99;
    *((void *)v26 + 5) = v28;
    *((void *)v26 + 6) = v98;
    *((void *)v26 + 7) = a13;
    uint64_t v82 = a13;
    uint64_t v87 = v26;
    uint64_t v30 = *(void (**)(void, void, void))(v16 + 32);
    v30((char *)v26 + v24, v20, v15);
    uint64_t v31 = (uint64_t (**)@<X0>(char *@<X8>))((char *)v26 + v25);
    uint64_t v32 = v90;
    uint64_t v33 = v95;
    *uint64_t v31 = v91;
    v31[1] = v33;
    v85(v32, v80, v15);
    uint64_t v34 = (uint64_t (*)@<X0>(char *@<X8>))swift_allocObject();
    uint64_t v36 = v99;
    uint64_t v35 = v100;
    *((void *)v34 + 2) = v27;
    *((void *)v34 + 3) = v35;
    *((void *)v34 + 4) = v36;
    *((void *)v34 + 5) = v28;
    uint64_t v37 = v82;
    *((void *)v34 + 6) = v98;
    *((void *)v34 + 7) = v37;
    v30((char *)v34 + v24, v32, v15);
    __int16 v38 = (uint64_t (**)@<X0>(char *@<X8>))((char *)v34 + v81);
    uint64_t v39 = v96;
    *__int16 v38 = v94;
    v38[1] = (uint64_t (*)@<X0>(char *@<X8>))v39;
    sub_4FAC(&qword_81FA8);
    swift_getTupleTypeMetadata2();
    sub_68100();
    swift_getWitnessTable();
    sub_67F90();
    uint64_t v40 = sub_675D0();
    swift_getTupleTypeMetadata2();
    sub_68100();
    swift_getWitnessTable();
    sub_67F90();
    Swift::String v41 = (uint64_t (*)@<X0>(char *@<X8>))sub_675D0();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v104 = &protocol witness table for _FlexFrameLayout;
    uint64_t v42 = swift_getWitnessTable();
    uint64_t v101 = swift_getWitnessTable();
    uint64_t v102 = &protocol witness table for _FlexFrameLayout;
    uint64_t v94 = v41;
    uint64_t v43 = swift_getWitnessTable();
    uint64_t KeyPath = swift_getKeyPath();
    char v148 = 0;
    uint64_t v151 = KeyPath;
    char v152 = 0;
    LOBYTE(v129) = (_BYTE)v88;
    *(_DWORD *)((char *)&v129 + 1) = *(_DWORD *)v150;
    HIDWORD(v129) = *(_DWORD *)&v150[3];
    uint64_t v130 = sub_5E4DC;
    uint64_t v131 = (uint64_t)v87;
    uint64_t v132 = sub_5E7EC;
    uint64_t v133 = v34;
    LOBYTE(v134) = v89;
    *(_DWORD *)((char *)&v134 + 1) = *(_DWORD *)v149;
    HIDWORD(v134) = *(_DWORD *)&v149[3];
    id v135 = (void *)KeyPath;
    char v136 = 0;
    uint64_t v140 = v40;
    long long v141 = v41;
    uint64_t v142 = v42;
    uint64_t v143 = (uint64_t (*)@<X0>(char *@<X8>))v43;
    uint64_t v45 = type metadata accessor for FeaturePreviewContainerView();
    uint64_t v93 = &unk_6C5CC;
    uint64_t v98 = (void *)swift_getWitnessTable();
    uint64_t v46 = *(void (**)(void, void, void))(*(void *)(v45 - 8) + 16);
    v46(&v140, &v129, v45);
    swift_retain();
    swift_retain();
    swift_release();
    sub_5260C((uint64_t)sub_5E7EC);
    sub_5CF38((uint64_t)&v151);
    unint64_t v92 = v143;
    uint64_t v96 = v146;
    LODWORD(v95) = v147;
    LOBYTE(v129) = v140;
    uint64_t v130 = v141;
    uint64_t v131 = v142;
    uint64_t v132 = v143;
    uint64_t v133 = v144;
    LOBYTE(v134) = v145;
    id v135 = (void *)v146;
    char v136 = v147;
    v46(&v121, &v129, v45);
    uint64_t v47 = v124;
    uint64_t v48 = v127;
    LOBYTE(v39) = v128;
    uint64_t v113 = v121;
    uint64_t v114 = v122;
    uint64_t v115 = v123;
    uint64_t v116 = v124;
    uint64_t v117 = v125;
    char v118 = v126;
    uint64_t v119 = v127;
    char v120 = v128;
    uint64_t v129 = v94;
    uint64_t v130 = (uint64_t (*)@<X0>(char *@<X8>))&type metadata for EmptyView;
    uint64_t v131 = v43;
    uint64_t v132 = (uint64_t (*)@<X0>(char *@<X8>))&protocol witness table for EmptyView;
    type metadata accessor for FeaturePreviewContainerView();
    swift_getWitnessTable();
    sub_426A8((uint64_t)&v113, v45);
    swift_release();
    sub_5260C(v47);
    sub_1CE40(v48, v39);
    swift_release();
    sub_5260C((uint64_t)v92);
    uint64_t v49 = v96;
    char v50 = (char)v95;
  }
  else
  {
    char v51 = *(unsigned char *)(a1 + *(int *)(v21 + 44));
    LODWORD(v9sub_66CA4(2, 18, 1, 0) = *(unsigned __int8 *)(a2 + *(int *)(v15 + 40));
    (*(void (**)(char *))(v16 + 16))(v20);
    unint64_t v52 = (*(unsigned __int8 *)(v16 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    unint64_t v53 = (v22 + v52) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = (char *)swift_allocObject();
    uint64_t v55 = v100;
    *((void *)v54 + 2) = v93;
    *((void *)v54 + 3) = v55;
    uint64_t v56 = (uint64_t)v92;
    *((void *)v54 + 4) = v99;
    *((void *)v54 + 5) = v56;
    *((void *)v54 + 6) = v98;
    *((void *)v54 + 7) = a13;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v54[v52], v20, v15);
    uint64_t v57 = (uint64_t (**)@<X0>(char *@<X8>))&v54[v53];
    uint64_t v58 = v96;
    *uint64_t v57 = v94;
    v57[1] = (uint64_t (*)@<X0>(char *@<X8>))v58;
    sub_4FAC(&qword_81FA8);
    swift_getTupleTypeMetadata2();
    sub_68100();
    uint64_t v98 = &protocol conformance descriptor for TupleView<A>;
    swift_getWitnessTable();
    sub_67F90();
    uint64_t v59 = sub_675D0();
    uint64_t v95 = (uint64_t (*)@<X0>(char *@<X8>))&protocol conformance descriptor for HStack<A>;
    uint64_t v138 = swift_getWitnessTable();
    uint64_t v139 = &protocol witness table for _FlexFrameLayout;
    uint64_t v94 = (uint64_t (*)@<X0>(char *@<X8>))&protocol conformance descriptor for <> ModifiedContent<A, B>;
    uint64_t v60 = v59;
    unint64_t v92 = (uint64_t (*)@<X0>(char *@<X8>))v59;
    uint64_t v61 = swift_getWitnessTable();
    uint64_t v91 = (uint64_t (*)@<X0>(char *@<X8>))v61;
    uint64_t v62 = swift_getKeyPath();
    char v148 = 0;
    uint64_t v151 = v62;
    char v152 = 0;
    LOBYTE(v129) = v51;
    *(_DWORD *)((char *)&v129 + 1) = *(_DWORD *)v150;
    HIDWORD(v129) = *(_DWORD *)&v150[3];
    uint64_t v130 = sub_5E4AC;
    uint64_t v131 = (uint64_t)v54;
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    LOBYTE(v134) = (_BYTE)v90;
    *(_DWORD *)((char *)&v134 + 1) = *(_DWORD *)v149;
    HIDWORD(v134) = *(_DWORD *)&v149[3];
    id v135 = (void *)v62;
    char v136 = 0;
    uint64_t v140 = v60;
    long long v141 = (uint64_t (*)@<X0>(char *@<X8>))&type metadata for EmptyView;
    uint64_t v142 = v61;
    uint64_t v143 = (uint64_t (*)@<X0>(char *@<X8>))&protocol witness table for EmptyView;
    uint64_t v63 = type metadata accessor for FeaturePreviewContainerView();
    uint64_t v90 = (char *)&unk_6C5CC;
    uint64_t v93 = (void *)swift_getWitnessTable();
    uint64_t v64 = *(void (**)(void, void, void))(*(void *)(v63 - 8) + 16);
    v64(&v140, &v129, v63);
    swift_retain();
    swift_release();
    sub_5260C(0);
    sub_5CF38((uint64_t)&v151);
    uint64_t v87 = v144;
    uint64_t v88 = v143;
    uint64_t v96 = v146;
    int v89 = v147;
    LOBYTE(v129) = v140;
    uint64_t v130 = v141;
    uint64_t v131 = v142;
    uint64_t v132 = v143;
    uint64_t v133 = v144;
    LOBYTE(v134) = v145;
    id v135 = (void *)v146;
    char v136 = v147;
    v64(&v121, &v129, v63);
    uint64_t v65 = v124;
    uint64_t v66 = v127;
    LOBYTE(v58) = v128;
    uint64_t v113 = v121;
    uint64_t v114 = v122;
    uint64_t v115 = v123;
    uint64_t v116 = v124;
    uint64_t v117 = v125;
    char v118 = v126;
    uint64_t v119 = v127;
    char v120 = v128;
    swift_getTupleTypeMetadata2();
    sub_68100();
    swift_getWitnessTable();
    sub_67F90();
    uint64_t v67 = sub_675D0();
    uint64_t v111 = swift_getWitnessTable();
    uint64_t v112 = &protocol witness table for _FlexFrameLayout;
    uint64_t v68 = swift_getWitnessTable();
    uint64_t v129 = (void *)v67;
    uint64_t v130 = v92;
    uint64_t v131 = v68;
    uint64_t v132 = v91;
    uint64_t v69 = type metadata accessor for FeaturePreviewContainerView();
    swift_getWitnessTable();
    sub_427A0((uint64_t)&v113, v69, v63);
    swift_release();
    sub_5260C(v65);
    sub_1CE40(v66, v58);
    swift_release();
    sub_5260C((uint64_t)v88);
    uint64_t v49 = v96;
    char v50 = v89;
  }
  sub_1CE40(v49, v50);
  char v70 = v136;
  char v71 = v137;
  uint64_t v91 = v130;
  unint64_t v92 = (uint64_t (*)@<X0>(char *@<X8>))v131;
  uint64_t v93 = v129;
  uint64_t v94 = v132;
  uint64_t v95 = v133;
  uint64_t v96 = v134;
  uint64_t v98 = v135;
  sub_4FAC(&qword_81FA8);
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  sub_67F90();
  uint64_t v72 = sub_675D0();
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  sub_67F90();
  uint64_t v73 = sub_675D0();
  uint64_t v109 = swift_getWitnessTable();
  uint64_t v110 = &protocol witness table for _FlexFrameLayout;
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v107 = swift_getWitnessTable();
  uint64_t v108 = &protocol witness table for _FlexFrameLayout;
  uint64_t v75 = swift_getWitnessTable();
  uint64_t v140 = v72;
  long long v141 = (uint64_t (*)@<X0>(char *@<X8>))v73;
  uint64_t v142 = v74;
  uint64_t v143 = (uint64_t (*)@<X0>(char *@<X8>))v75;
  type metadata accessor for FeaturePreviewContainerView();
  uint64_t v140 = v73;
  long long v141 = (uint64_t (*)@<X0>(char *@<X8>))&type metadata for EmptyView;
  uint64_t v142 = v75;
  uint64_t v143 = (uint64_t (*)@<X0>(char *@<X8>))&protocol witness table for EmptyView;
  type metadata accessor for FeaturePreviewContainerView();
  uint64_t v76 = sub_67A00();
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v78 = swift_getWitnessTable();
  uint64_t v105 = v77;
  uint64_t v106 = v78;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)(v76 - 8) + 16))(v97, &v129, v76);
  return sub_5E428((uint64_t)v93, (uint64_t)v91, (uint64_t)v92, (uint64_t)v94, (uint64_t)v95, v96, (uint64_t)v98, v70, v71, (void (*)(uint64_t, uint64_t))sub_5FB80);
}

uint64_t sub_4A100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v32 = a3;
  uint64_t v33 = a8;
  uint64_t v30 = a2;
  uint64_t v31 = a7;
  uint64_t v28 = a5;
  uint64_t v29 = a1;
  uint64_t v35 = a9;
  uint64_t v27 = a10;
  sub_4FAC(&qword_81FA8);
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  uint64_t v12 = sub_67F90();
  uint64_t v34 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  double v14 = (char *)&v26 - v13;
  uint64_t v15 = sub_675D0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v26 - v20;
  uint64_t v36 = a4;
  uint64_t v37 = v28;
  uint64_t v38 = a6;
  uint64_t v39 = v31;
  uint64_t v40 = v33;
  uint64_t v41 = v27;
  uint64_t v42 = v29;
  uint64_t v43 = v30;
  uint64_t v44 = v32;
  sub_67820();
  sub_67F80();
  sub_680B0();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_67D90();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v12);
  uint64_t v45 = WitnessTable;
  uint64_t v46 = &protocol witness table for _FlexFrameLayout;
  swift_getWitnessTable();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v22(v21, v19, v15);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v19, v15);
  v22(v35, v21, v15);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, v15);
}

uint64_t sub_4A468@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v29 = a5;
  uint64_t v26 = a4;
  uint64_t v30 = a6;
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = sub_4A6C8((uint64_t)&v35);
  uint64_t v14 = v36;
  uint64_t v25 = v35;
  uint64_t v16 = v37;
  uint64_t v15 = v38;
  char v17 = v39;
  a2(v13);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v18 = v26;
  v24(v12, v10, v26);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v28 = v7 + 8;
  v27(v10, v18);
  uint64_t v19 = v25;
  uint64_t v35 = v25;
  uint64_t v36 = v14;
  uint64_t v37 = v16;
  uint64_t v38 = v15;
  char v39 = v17;
  v34[0] = &v35;
  uint64_t v20 = v10;
  v24(v10, v12, v18);
  v34[1] = v10;
  uint64_t v21 = v19;
  sub_5E910(v19, v14, v16, v15, v17);
  v33[0] = sub_4890(&qword_81FA8);
  v33[1] = v18;
  uint64_t v31 = sub_5E954(&qword_82088, &qword_81FA8);
  uint64_t v32 = v29;
  sub_44644((uint64_t)v34, 2uLL, (uint64_t)v33);
  uint64_t v22 = v27;
  v27(v12, v18);
  sub_5E9BC(v21, v14, v16, v15, v17);
  v22(v20, v18);
  return sub_5E9BC(v35, v36, v37, v38, v39);
}

uint64_t sub_4A6C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_4890(&qword_81120);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (id *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_49084();
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    sub_A85C(v1, (uint64_t)v5, &qword_81120);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      sub_1CA30((uint64_t)v5, (uint64_t)v9, type metadata accessor for FeaturePreviewConfiguration);
      *(void *)&long long v42 = v12;
      *((void *)&v42 + 1) = v13;
      sub_A5D0();
      uint64_t v18 = sub_67C00();
      uint64_t v20 = v19;
      char v22 = v21 & 1;
      id v23 = *v9;
      sub_67B80();
      uint64_t v24 = sub_67BD0();
      uint64_t v26 = v25;
      char v28 = v27;
      *(void *)&long long v38 = v29;
      swift_release();
      sub_52808(v18, v20, v22);
      swift_bridgeObjectRelease();
      LODWORD(v42) = sub_67A70();
      uint64_t v30 = sub_67BC0();
      uint64_t v32 = v31;
      uint64_t v34 = v33;
      uint64_t v36 = v35 & 1;
      sub_52808(v24, v26, v28 & 1);
      swift_bridgeObjectRelease();
      *(void *)&long long v39 = v30;
      *((void *)&v39 + 1) = v32;
      *(void *)&long long v40 = v36;
      *((void *)&v40 + 1) = v34;
      char v41 = 0;
      sub_679F0();
      long long v37 = v43;
      long long v38 = v42;
      char v17 = v44;
      uint64_t result = sub_548B4((uint64_t)v9, type metadata accessor for FeaturePreviewConfiguration);
      long long v16 = v37;
      long long v15 = v38;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    sub_A8C0((uint64_t)v5, &qword_81120);
  }
  long long v39 = 0u;
  long long v40 = 0u;
  char v41 = 1;
  uint64_t result = sub_679F0();
  long long v15 = v42;
  long long v16 = v43;
  char v17 = v44;
LABEL_6:
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(unsigned char *)(a1 + 32) = v17;
  return result;
}

uint64_t sub_4A9E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t))
{
  uint64_t v37 = a8;
  uint64_t v35 = a7;
  uint64_t v33 = a6;
  uint64_t v31 = a4;
  uint64_t v36 = a3;
  uint64_t v34 = a2;
  uint64_t v32 = a1;
  long long v40 = a9;
  uint64_t v38 = a11;
  long long v39 = a12;
  uint64_t v30 = a10;
  sub_4FAC(&qword_81FA8);
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  uint64_t v13 = sub_67F90();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  long long v16 = (char *)&v29 - v15;
  uint64_t v17 = sub_675D0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  char v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  id v23 = (char *)&v29 - v22;
  uint64_t v41 = v31;
  uint64_t v42 = a5;
  uint64_t v43 = v33;
  uint64_t v44 = v35;
  uint64_t v45 = v37;
  uint64_t v46 = v30;
  uint64_t v47 = v32;
  uint64_t v48 = v34;
  uint64_t v49 = v36;
  sub_67820();
  uint64_t v24 = sub_67F80();
  v39(v24);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_67D90();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v50 = WitnessTable;
  char v51 = &protocol witness table for _FlexFrameLayout;
  swift_getWitnessTable();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v25(v23, v21, v17);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v26(v21, v17);
  v25(v40, v23, v17);
  return ((uint64_t (*)(char *, uint64_t))v26)(v23, v17);
}

uint64_t sub_4AD78@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v66 = a2;
  uint64_t v65 = sub_67830();
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v63 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *(void *)(a1 + 16);
  sub_675D0();
  sub_4FAC(&qword_81FC8);
  uint64_t v4 = *(void *)(a1 + 24);
  sub_675D0();
  swift_getTupleTypeMetadata2();
  sub_68100();
  sub_683E0();
  swift_getTupleTypeMetadata2();
  uint64_t v52 = sub_68100();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = sub_67F90();
  uint64_t v54 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v41 - v6;
  sub_4FAC(&qword_80B40);
  uint64_t v8 = sub_675D0();
  uint64_t v50 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v46 = (char *)&v41 - v9;
  uint64_t v10 = sub_675D0();
  uint64_t v53 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v44 = (char *)&v41 - v11;
  uint64_t v12 = sub_675D0();
  uint64_t v58 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v47 = (char *)&v41 - v13;
  uint64_t v14 = sub_675D0();
  uint64_t v60 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v57 = (char *)&v41 - v15;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v41 = v16;
  uint64_t v17 = sub_AE4C(&qword_80B38, &qword_80B40);
  v71[8] = v16;
  v71[9] = v17;
  uint64_t v42 = swift_getWitnessTable();
  v71[6] = v42;
  unsigned char v71[7] = &protocol witness table for _PaddingLayout;
  uint64_t v43 = swift_getWitnessTable();
  v71[4] = v43;
  v71[5] = &protocol witness table for _FixedSizeLayout;
  uint64_t v59 = v12;
  uint64_t v45 = swift_getWitnessTable();
  v71[2] = v45;
  v71[3] = &protocol witness table for _FrameLayout;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v61 = v14;
  v71[0] = v14;
  v71[1] = v18;
  uint64_t v48 = v18;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v20 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v21 = __chkstk_darwin(OpaqueTypeMetadata2);
  id v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v49 = (char *)&v41 - v24;
  sub_67800();
  sub_319C0();
  uint64_t v67 = v56;
  uint64_t v68 = v4;
  long long v69 = *(_OWORD *)(v55 + 32);
  uint64_t v25 = v62;
  uint64_t v70 = v62;
  uint64_t v26 = v7;
  sub_67F80();
  LODWORD(v71[0]) = sub_67A60();
  char v27 = v46;
  sub_67D00();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v5);
  char v28 = v44;
  sub_67DA0();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v27, v8);
  uint64_t v29 = *(void *)(v25 + 48);
  LOBYTE(v5) = *(unsigned char *)(v25 + 56);
  sub_52694(v29, v5);
  sub_4C1E0(v29, v5);
  sub_1CE40(v29, v5);
  uint64_t v30 = v47;
  sub_67DD0();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v10);
  sub_1D2D8(v25 + 40, (uint64_t)&v72, &qword_81FD0);
  sub_1D2D8((uint64_t)&v72, (uint64_t)v71, &qword_81FD0);
  if (LOBYTE(v71[0]) != 2) {
    sub_31A5C(v71[0] & 1);
  }
  sub_31A5C(*(unsigned char *)v25);
  sub_31344();
  sub_680A0();
  uint64_t v31 = v57;
  uint64_t v32 = v59;
  sub_67D80();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v32);
  uint64_t v33 = v64;
  uint64_t v34 = v63;
  uint64_t v35 = v65;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for ColorRenderingMode.nonLinear(_:), v65);
  uint64_t v36 = v61;
  sub_67CA0();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v36);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  uint64_t v38 = v49;
  v37(v49, v23, OpaqueTypeMetadata2);
  long long v39 = *(void (**)(char *, uint64_t))(v20 + 8);
  v39(v23, OpaqueTypeMetadata2);
  v37(v66, v38, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v39)(v38, OpaqueTypeMetadata2);
}

uint64_t sub_4B710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v70 = a5;
  uint64_t v85 = a6;
  uint64_t v68 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v67 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v69 = v10;
  uint64_t v11 = sub_675D0();
  uint64_t v73 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  char v72 = &v59[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  char v71 = &v59[-v14];
  uint64_t v15 = sub_4890(&qword_81C78);
  __chkstk_darwin(v15 - 8);
  uint64_t v65 = (void (*)(void))&v59[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v66 = sub_4FAC(&qword_81FC8);
  uint64_t v64 = v11;
  swift_getTupleTypeMetadata2();
  uint64_t v84 = sub_68100();
  uint64_t v86 = sub_683E0();
  uint64_t v78 = *(void *)(v86 - 8);
  uint64_t v17 = __chkstk_darwin(v86);
  uint64_t v87 = &v59[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v83 = &v59[-v20];
  uint64_t v21 = *(void *)(a2 - 8);
  __chkstk_darwin(v19);
  id v23 = &v59[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = sub_675D0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  char v28 = &v59[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = &v59[-v30];
  (*(void (**)(uint64_t))(a1 + 8))(v29);
  sub_68090();
  sub_67D90();
  (*(void (**)(unsigned char *, uint64_t))(v21 + 8))(v23, a2);
  uint64_t v101 = a4;
  uint64_t v102 = &protocol witness table for _FlexFrameLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16);
  uint64_t v79 = v31;
  uint64_t v75 = v25 + 16;
  uint64_t v74 = v32;
  v32(v31, v28, v24);
  uint64_t v33 = *(uint64_t (**)(unsigned char *, uint64_t *))(v25 + 8);
  unint64_t v81 = v28;
  uint64_t v80 = v24;
  uint64_t v82 = v25 + 8;
  uint64_t v77 = v33;
  v33(v28, (uint64_t *)v24);
  uint64_t v34 = *(void (**)(void))(a1 + 24);
  if (v34)
  {
    uint64_t v62 = *(void *)(a1 + 32);
    swift_retain();
    uint64_t v63 = sub_67EA0();
    sub_318C0();
    sub_67B40();
    uint64_t v35 = sub_67B30();
    uint64_t v36 = v65;
    (*(void (**)(void (*)(void), uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v65, 1, 1, v35);
    uint64_t v61 = sub_67B60();
    sub_A8C0((uint64_t)v36, &qword_81C78);
    uint64_t KeyPath = swift_getKeyPath();
    int v60 = sub_67A70();
    uint64_t v38 = v67;
    v34();
    sub_68090();
    uint64_t v39 = v70;
    uint64_t v65 = v34;
    uint64_t v40 = v69;
    uint64_t v41 = v72;
    sub_67D90();
    (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v38, v40);
    uint64_t v94 = v39;
    uint64_t v95 = &protocol witness table for _FlexFrameLayout;
    uint64_t v42 = v64;
    uint64_t v70 = swift_getWitnessTable();
    uint64_t v43 = v73;
    uint64_t v44 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v73 + 16);
    uint64_t v45 = v71;
    v44(v71, v41, v42);
    uint64_t v46 = *(void (**)(unsigned char *, uint64_t))(v43 + 8);
    v46(v41, v42);
    uint64_t v90 = v63;
    uint64_t v91 = KeyPath;
    uint64_t v92 = v61;
    int v93 = v60;
    uint64_t v99 = &v90;
    v44(v41, v45, v42);
    uint64_t v100 = v41;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v97 = v66;
    uint64_t v98 = v42;
    unint64_t v88 = sub_5C078();
    uint64_t v89 = v70;
    uint64_t v47 = v87;
    sub_44644((uint64_t)&v99, 2uLL, (uint64_t)&v97);
    sub_5260C((uint64_t)v65);
    v46(v45, v42);
    swift_release();
    swift_release();
    swift_release();
    v46(v41, v42);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v47, 0, 1, v84);
  }
  else
  {
    uint64_t v47 = v87;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v87, 1, 1, v84);
  }
  swift_getWitnessTable();
  uint64_t v48 = v78;
  uint64_t v49 = v83;
  uint64_t v50 = v86;
  uint64_t v73 = *(void *)(v78 + 16);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v73)(v83, v47, v86);
  char v51 = *(void (**)(unsigned char *, uint64_t))(v48 + 8);
  v51(v47, v50);
  uint64_t v52 = v81;
  uint64_t v53 = v79;
  uint64_t v54 = (uint64_t *)v80;
  v74(v81, v79, v80);
  uint64_t v90 = (uint64_t)v52;
  uint64_t v55 = v86;
  uint64_t v56 = v87;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v73)(v87, v49, v86);
  uint64_t v91 = (uint64_t)v56;
  uint64_t v99 = v54;
  uint64_t v100 = (unsigned char *)v55;
  uint64_t v97 = WitnessTable;
  uint64_t v96 = swift_getWitnessTable();
  uint64_t v98 = swift_getWitnessTable();
  sub_44644((uint64_t)&v90, 2uLL, (uint64_t)&v99);
  v51(v49, v55);
  uint64_t v57 = v77;
  v77(v53, v54);
  v51(v56, v55);
  return v57(v52, v54);
}

uint64_t sub_4C144@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_4AD78(a1, a2);
}

uint64_t sub_4C188()
{
  uint64_t v1 = *(void *)(v0 + 24);
  char v2 = *(unsigned char *)(v0 + 32);
  sub_52694(v1, v2);
  char v3 = sub_4C1E0(v1, v2);
  sub_1CE40(v1, v2);
  return v3 & 1;
}

uint64_t sub_4C1E0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_67780();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = sub_683A0();
  uint64_t v9 = sub_67AC0();
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = sub_13D18(1819242306, 0xE400000000000000, &v12);
    _os_log_impl(&dword_0, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_67770();
  swift_getAtKeyPath();
  sub_1CE40(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

uint64_t sub_4C3B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_67780();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_81180);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A85C(v2, (uint64_t)v10, &qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_1D2D8((uint64_t)v10, a1, &qword_81120);
  }
  os_log_type_t v12 = sub_683A0();
  unsigned __int8 v13 = sub_67AC0();
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v14 + 4) = sub_13D18(0xD000000000000025, 0x8000000000074CA0, &v16);
    _os_log_impl(&dword_0, v13, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_67770();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_4C61C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_67780();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_4890(&qword_81D08);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A85C(v2, (uint64_t)v10, &qword_81D08);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_675C0();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_683A0();
    uint64_t v14 = sub_67AC0();
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = sub_13D18(0x694474756F79614CLL, 0xEF6E6F6974636572, &v17);
      _os_log_impl(&dword_0, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_67770();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_4C8B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_4890(&qword_81C78);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 32);
  sub_52694(v6, v7);
  char v8 = sub_4C1E0(v6, v7);
  sub_1CE40(v6, v7);
  if ((v8 & 1) != 0 && (sub_117DC((long long *)v1, (uint64_t)&v54), sub_117DC(&v54, (uint64_t)&v55), v56 == 1))
  {
    sub_681B0();
    uint64_t v9 = sub_67B30();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
    sub_67B60();
    sub_A8C0((uint64_t)v5, &qword_81C78);
    sub_67B20();
    swift_release();
    uint64_t v10 = sub_67BD0();
    uint64_t v34 = a1;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    char v15 = v14;
    uint64_t v33 = v16;
    swift_bridgeObjectRelease();
    swift_release();
    char v17 = v15 & 1;
    int v32 = v15 & 1;
    sub_68090();
    sub_67520();
    uint64_t v18 = v48;
    char v19 = v49;
    uint64_t v20 = v50;
    char v21 = v51;
    uint64_t v22 = v53;
    uint64_t v31 = v52;
    int v23 = sub_67A80();
    uint64_t v24 = *sub_2F978();
    swift_retain();
    char v25 = sub_67AF0();
    uint64_t v35 = v11;
    uint64_t v36 = v13;
    char v37 = v17;
    uint64_t v38 = v33;
    uint64_t v39 = v18;
    char v40 = v19;
    uint64_t v41 = v20;
    char v42 = v21;
    uint64_t v43 = v31;
    uint64_t v44 = v22;
    int v45 = v23;
    uint64_t v46 = v24;
    char v47 = v25;
    sub_4890(&qword_81C88);
    sub_526A0();
    uint64_t v26 = v34;
    sub_2F574(2);
    sub_52808(v11, v13, v32);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_4890(&qword_81C80);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 0, 1, v27);
  }
  else
  {
    uint64_t v29 = sub_4890(&qword_81C80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(a1, 1, 1, v29);
  }
}

uint64_t sub_4CBFC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3 & 1;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t sub_4CC18@<X0>(uint64_t a1@<X8>)
{
  return sub_4C8B0(a1);
}

uint64_t sub_4CC54()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t sub_4CC84@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v19 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v18 = *(void (**)(void *))(v2 + 24);
  uint64_t v10 = *(void *)v2;
  uint64_t v11 = *(void *)(v2 + 8);
  char v12 = *(unsigned char *)(v2 + 16);
  uint64_t KeyPath = swift_getKeyPath();
  v20[0] = v10;
  v20[1] = v11;
  char v21 = v12;
  uint64_t v22 = KeyPath;
  char v23 = 0;
  sub_FBA8(v10, v11, v12);
  v18(v20);
  sub_FFE0(v10, v11, v12);
  swift_release();
  char v14 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v14(v9, v7, v3);
  char v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v7, v3);
  v14(v19, v9, v3);
  return ((uint64_t (*)(char *, uint64_t))v15)(v9, v3);
}

uint64_t sub_4CE30@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3 & 1;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

uint64_t sub_4CE48()
{
  return *v0;
}

uint64_t sub_4CE50()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_4CE58()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t sub_4CE88@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_4890(&qword_81180);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_4CEE0()
{
  return swift_getKeyPath();
}

uint64_t sub_4CF04@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v68 = a1;
  uint64_t v65 = *(void *)(a1 - 8);
  uint64_t v66 = *(void *)(v65 + 64);
  __chkstk_darwin(a1);
  uint64_t v64 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_4FAC(&qword_81CB8);
  uint64_t v69 = *(void *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  sub_67F90();
  sub_675D0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v85 = &protocol witness table for _FlexFrameLayout;
  long long v54 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v4 = sub_67FC0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v49 - v6;
  uint64_t v8 = sub_675D0();
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = sub_675D0();
  uint64_t v55 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v56 = sub_675D0();
  uint64_t v57 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  char v15 = (char *)&v49 - v14;
  uint64_t v16 = sub_675D0();
  uint64_t v60 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v53 = (char *)&v49 - v17;
  sub_4FAC(&qword_81CC0);
  uint64_t v61 = v16;
  uint64_t v62 = sub_675D0();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v18 = __chkstk_darwin(v62);
  uint64_t v58 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v59 = (char *)&v49 - v20;
  uint64_t v50 = *(void *)(v68 + 24);
  uint64_t v71 = v69;
  uint64_t v72 = v50;
  uint64_t v73 = v70;
  sub_678D0();
  sub_67FB0();
  uint64_t v21 = swift_getWitnessTable();
  sub_67D10();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_67B00();
  sub_31640();
  uint64_t v82 = v21;
  unint64_t v83 = &protocol witness table for _CompositingGroupEffect;
  uint64_t v22 = swift_getWitnessTable();
  sub_67DB0();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v8);
  sub_31344();
  sub_68090();
  uint64_t v80 = v22;
  unint64_t v81 = &protocol witness table for _PaddingLayout;
  uint64_t v48 = swift_getWitnessTable();
  sub_67D90();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v13, v11);
  sub_678B0();
  uint64_t v23 = v65;
  uint64_t v24 = v64;
  uint64_t v25 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v70, v68);
  uint64_t v26 = v23;
  unint64_t v27 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v50;
  *(void *)(v28 + 16) = v69;
  *(void *)(v28 + 24) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v28 + v27, v24, v25);
  uint64_t v78 = v48;
  uint64_t v79 = &protocol witness table for _FlexFrameLayout;
  uint64_t v30 = v53;
  uint64_t v31 = v56;
  uint64_t v32 = swift_getWitnessTable();
  sub_67CF0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v31);
  sub_4DFF8(v25);
  if (v33 <= 0.0)
  {
    uint64_t v35 = 0x4034000000000000;
  }
  else
  {
    uint64_t v34 = sub_3145C();
    if (*((unsigned char *)v34 + 8)) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = *v34;
    }
  }
  uint64_t v36 = *sub_3150C();
  uint64_t v86 = 0;
  uint64_t v87 = v35;
  uint64_t v88 = 0;
  uint64_t v89 = v36;
  char v90 = 0;
  unint64_t v37 = sub_52AD4();
  uint64_t v76 = v32;
  unint64_t v77 = v37;
  uint64_t v38 = v61;
  uint64_t v39 = swift_getWitnessTable();
  char v40 = v58;
  sub_67CD0();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v30, v38);
  uint64_t v41 = sub_AE4C(&qword_81CD0, &qword_81CC0);
  uint64_t v74 = v39;
  uint64_t v75 = v41;
  uint64_t v42 = v62;
  swift_getWitnessTable();
  uint64_t v43 = v63;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  int v45 = v59;
  v44(v59, v40, v42);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
  v46(v40, v42);
  v44(v67, v45, v42);
  return ((uint64_t (*)(char *, uint64_t))v46)(v45, v42);
}

uint64_t sub_4D898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a3;
  uint64_t v22 = a4;
  sub_4FAC(&qword_81CB8);
  swift_getTupleTypeMetadata2();
  sub_68100();
  swift_getWitnessTable();
  uint64_t v5 = sub_67F90();
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v7 = (char *)&v19 - v6;
  uint64_t v8 = sub_675D0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v19 - v13;
  sub_67800();
  sub_31410();
  uint64_t v23 = a2;
  uint64_t v24 = v20;
  uint64_t v25 = v19;
  sub_67F80();
  sub_68090();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_67D90();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  uint64_t v26 = WitnessTable;
  unint64_t v27 = &protocol witness table for _FlexFrameLayout;
  swift_getWitnessTable();
  char v15 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v15(v14, v12, v8);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  v15(v22, v14, v8);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
}

uint64_t sub_4DBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = a4;
  uint64_t v45 = *(void *)(a2 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v38 - v10;
  uint64_t v11 = sub_4890(&qword_81B98);
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_4890(&qword_81120);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_4890(&qword_81CB8);
  uint64_t v17 = __chkstk_darwin(v40);
  uint64_t v41 = (uint64_t)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v43 = a3;
  uint64_t v21 = a1;
  uint64_t v22 = a1 + *(int *)(type metadata accessor for FeatureRowView() + 48);
  uint64_t v23 = *(void *)v22;
  char v24 = *(unsigned char *)(v22 + 8);
  sub_52694(*(void *)v22, v24);
  char v25 = sub_4C1E0(v23, v24);
  sub_1CE40(v23, v24);
  if (v25)
  {
    uint64_t v26 = v21;
    sub_4C3B8((uint64_t)v16);
    char v27 = *(unsigned char *)v21;
    uint64_t v28 = v39;
    uint64_t v29 = &v13[*(int *)(v39 + 44)];
    *(void *)uint64_t v29 = swift_getKeyPath();
    v29[8] = 0;
    sub_1D2D8((uint64_t)v16, (uint64_t)v13, &qword_81120);
    uint64_t v30 = &v13[*(int *)(v28 + 36)];
    *(void *)uint64_t v30 = 0;
    *((void *)v30 + 1) = 0;
    v13[*(int *)(v28 + 40)] = v27;
    sub_1D2D8((uint64_t)v13, (uint64_t)v20, &qword_81B98);
    uint64_t v31 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v20, 0, 1, v28);
    uint64_t v21 = v26;
  }
  else
  {
    uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v20, 1, 1, v39);
  }
  (*(void (**)(uint64_t))(v21 + 8))(v31);
  uint64_t v32 = v45;
  double v33 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  uint64_t v34 = v42;
  v33(v42, v9, a2);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
  v35(v9, a2);
  uint64_t v36 = v41;
  sub_A85C((uint64_t)v20, v41, &qword_81CB8);
  v49[0] = v36;
  v33(v9, v34, a2);
  v49[1] = v9;
  v48[0] = v40;
  v48[1] = a2;
  unint64_t v46 = sub_5D4FC();
  uint64_t v47 = v43;
  sub_44644((uint64_t)v49, 2uLL, (uint64_t)v48);
  v35(v34, a2);
  sub_A8C0((uint64_t)v20, &qword_81CB8);
  v35(v9, a2);
  return sub_A8C0(v36, &qword_81CB8);
}

uint64_t *sub_4DFF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (unsigned __int8 *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_4890(&qword_81120);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_4C3B8((uint64_t)v9);
  uint64_t v10 = type metadata accessor for FeaturePreviewConfiguration(0);
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (v11 == 1)
  {
    sub_A8C0((uint64_t)v9, &qword_81120);
  }
  else
  {
    char v12 = v9[*(int *)(v10 + 44)];
    sub_548B4((uint64_t)v9, type metadata accessor for FeaturePreviewConfiguration);
    sub_31A5C(v12);
  }
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if (v11 == 1)
  {
    int v13 = *v6;
    if (v13 == 2) {
      return (uint64_t *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8))(v6, a1);
    }
    sub_31A5C(v13 & 1);
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(v6, a1);
  return sub_3145C();
}

uint64_t sub_4E22C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = a1;
  *(unsigned char *)(a5 + 1) = a2;
  *(void *)(a5 + 8) = a3;
  *(void *)(a5 + 16) = a4;
  uint64_t v6 = type metadata accessor for FeatureRowView();
  uint64_t v7 = (uint64_t *)(a5 + *(int *)(v6 + 44));
  *uint64_t v7 = swift_getKeyPath();
  sub_4890(&qword_81180);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = a5 + *(int *)(v6 + 48);
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v8 = result;
  *(unsigned char *)(v8 + 8) = 0;
  return result;
}

uint64_t sub_4E2C8()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_4E2F8@<X0>(uint64_t a1@<X8>)
{
  return sub_52B28(v1 + 16, a1);
}

uint64_t sub_4E304()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t sub_4E30C()
{
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t sub_4E314()
{
  sub_4890(&qword_80D00);
  sub_67FD0();
  return v1;
}

uint64_t sub_4E364()
{
  return sub_67FE0();
}

void (*sub_4E3B8(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  v3[3] = v4;
  v3[4] = v5;
  char v6 = *(unsigned char *)(v1 + 112);
  *((unsigned char *)v3 + 19) = v6;
  *uint64_t v3 = v4;
  v3[1] = v5;
  *((unsigned char *)v3 + 16) = v6;
  swift_retain();
  swift_retain();
  v3[5] = sub_4890(&qword_80D00);
  sub_67FD0();
  return sub_4E458;
}

void sub_4E458(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 17);
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  char v4 = *(unsigned char *)(*(void *)a1 + 19);
  *uint64_t v1 = *(void *)(*(void *)a1 + 24);
  v1[1] = v3;
  *((unsigned char *)v1 + 16) = v4;
  *((unsigned char *)v1 + 18) = v2;
  sub_67FE0();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_4E4C8()
{
  sub_4890(&qword_80D00);
  sub_67FF0();
  return v1;
}

uint64_t sub_4E520@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FeatureToggleView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  char v8 = *(unsigned char *)(v1 + 32);
  sub_52BF4(v1, (uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FeatureToggleView);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1CA30((uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for FeatureToggleView);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = sub_52BA8;
  *(void *)(a1 + 32) = v10;
  return sub_FBA8(v6, v7, v8);
}

uint64_t sub_4E664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FeatureToggleView(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_4890(&qword_82028);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  int v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = *(unsigned char *)(a2 + 88);
  char v15 = *(unsigned char *)(a2 + 89);
  sub_52BF4(a2, (uint64_t)v9, type metadata accessor for FeatureToggleView);
  sub_117DC((long long *)a1, (uint64_t)v27);
  uint64_t v25 = *(void *)(a1 + 24);
  char v26 = *(unsigned char *)(a1 + 32);
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v17 = (v8 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  sub_1CA30((uint64_t)v9, v18 + v16, type metadata accessor for FeatureToggleView);
  unint64_t v19 = v18 + v17;
  long long v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)unint64_t v19 = *(_OWORD *)a1;
  *(_OWORD *)(v19 + 16) = v20;
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(a1 + 32);
  *int v13 = v14;
  v13[1] = v15;
  *((void *)v13 + 1) = sub_5D2E8;
  *((void *)v13 + 2) = v18;
  uint64_t v21 = (uint64_t *)&v13[*(int *)(v11 + 52)];
  *uint64_t v21 = swift_getKeyPath();
  sub_4890(&qword_81180);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = &v13[*(int *)(v11 + 56)];
  *(void *)uint64_t v22 = swift_getKeyPath();
  v22[8] = 0;
  sub_1D2D8((uint64_t)v13, a3, &qword_82028);
  sub_11854((uint64_t)v27);
  return sub_5CEA4((uint64_t)&v25);
}

uint64_t sub_4E8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v113 = a2;
  uint64_t v98 = a3;
  uint64_t v4 = sub_677E0();
  uint64_t v110 = *(void *)(v4 - 8);
  uint64_t v111 = v4;
  __chkstk_darwin(v4);
  uint64_t v109 = (uint64_t)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_4890(&qword_82030);
  uint64_t v105 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v102 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_4890(&qword_82038);
  uint64_t v106 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  unint64_t v103 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_4890(&qword_82040);
  __chkstk_darwin(v104);
  uint64_t v101 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_4890(&qword_82048);
  uint64_t v112 = *(void *)(v116 - 8);
  uint64_t v9 = __chkstk_darwin(v116);
  uint64_t v115 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v114 = (char *)&v90 - v11;
  uint64_t v12 = sub_4890(&qword_81B98);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v99 = (int *)v12;
  uint64_t v100 = v13;
  __chkstk_darwin(v12);
  int v93 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_4890(&qword_81120);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v92 = (uint64_t)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v94 = (uint64_t)&v90 - v18;
  uint64_t v19 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v95 = *(void *)(v19 - 8);
  uint64_t v96 = v19;
  __chkstk_darwin(v19);
  uint64_t v91 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_4890(&qword_81CB8);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v117 = (uint64_t)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v90 - v24;
  uint64_t v26 = *(void *)(a1 + 8);
  *(void *)&long long v150 = *(void *)a1;
  *((void *)&v150 + 1) = v26;
  sub_A5D0();
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_67C00();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  char v33 = v32 & 1;
  uint64_t v34 = *sub_31344();
  uint64_t v35 = sub_680A0();
  uint64_t v36 = 1;
  sub_42000(0.0, 1, 0.0, 1, INFINITY, 0, *(double *)&v34, 0, (uint64_t)&v150, 0.0, 1, INFINITY, 0, v35, v37, v27, v29, v33, v31);
  uint64_t v38 = v113;
  sub_52808(v27, v29, v33);
  swift_bridgeObjectRelease();
  long long v147 = v156;
  long long v148 = v157;
  long long v149 = *(_OWORD *)v158;
  long long v143 = v152;
  long long v144 = v153;
  long long v145 = v154;
  long long v146 = v155;
  long long v141 = v150;
  long long v142 = v151;
  uint64_t KeyPath = swift_getKeyPath();
  long long v156 = v147;
  long long v157 = v148;
  *(_OWORD *)uint64_t v158 = v149;
  long long v152 = v143;
  long long v153 = v144;
  long long v154 = v145;
  long long v155 = v146;
  long long v150 = v141;
  long long v151 = v142;
  *(void *)&v158[16] = KeyPath;
  v158[24] = 1;
  sub_117DC((long long *)v38, (uint64_t)v140);
  uint64_t v138 = *(void *)(v38 + 24);
  char v139 = *(unsigned char *)(v38 + 32);
  uint64_t v40 = a1 + *(int *)(type metadata accessor for FeatureToggleView(0) + 40);
  uint64_t v41 = *(void *)v40;
  LOBYTE(v31) = *(unsigned char *)(v40 + 8);
  sub_11854((uint64_t)v140);
  sub_5CEA4((uint64_t)&v138);
  sub_52694(v41, v31);
  LOBYTE(v29) = sub_4C1E0(v41, v31);
  char v42 = v31;
  uint64_t v43 = v99;
  sub_1CE40(v41, v42);
  if ((v29 & 1) == 0)
  {
    uint64_t v44 = v94;
    sub_4C3B8(v94);
    uint64_t v46 = v95;
    uint64_t v45 = v96;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v44, 1, v96) == 1)
    {
      sub_A8C0(v44, &qword_81120);
      uint64_t v36 = 1;
    }
    else
    {
      uint64_t v47 = v44;
      uint64_t v48 = v91;
      sub_1CA30(v47, v91, type metadata accessor for FeaturePreviewConfiguration);
      uint64_t v49 = v48;
      uint64_t v50 = v92;
      sub_1CA30(v49, v92, type metadata accessor for FeaturePreviewConfiguration);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v50, 0, 1, v45);
      uint64_t v51 = (uint64_t)v93;
      uint64_t v52 = &v93[v43[11]];
      *(void *)uint64_t v52 = swift_getKeyPath();
      v52[8] = 0;
      sub_1D2D8(v50, v51, &qword_81120);
      uint64_t v53 = (void *)(v51 + v43[9]);
      *uint64_t v53 = 0;
      v53[1] = 0;
      *(unsigned char *)(v51 + v43[10]) = 2;
      sub_1D2D8(v51, (uint64_t)v25, &qword_81B98);
      uint64_t v36 = 0;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v100 + 56))(v25, v36, 1, v43);
  uint64_t v54 = *(void *)(a1 + 104);
  char v55 = *(unsigned char *)(a1 + 112);
  *(void *)&long long v127 = *(void *)(a1 + 96);
  *((void *)&v127 + 1) = v54;
  LOBYTE(v128) = v55;
  sub_4890(&qword_80D00);
  sub_67FF0();
  uint64_t v56 = v102;
  sub_67FA0();
  uint64_t v57 = v109;
  sub_677D0();
  sub_AE4C(&qword_82050, &qword_82030);
  sub_5F128(&qword_82058, (void (*)(uint64_t))&type metadata accessor for SwitchToggleStyle);
  uint64_t v58 = v103;
  uint64_t v59 = v107;
  uint64_t v97 = v25;
  uint64_t v60 = v111;
  sub_67C80();
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v57, v60);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v56, v59);
  uint64_t v61 = sub_67800();
  uint64_t v62 = v106;
  uint64_t v63 = (uint64_t)v101;
  uint64_t v64 = v108;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v101, v58, v108);
  uint64_t v65 = (uint64_t *)(v63 + *(int *)(v104 + 36));
  *uint64_t v65 = v61;
  v65[1] = (uint64_t)sub_4F47C;
  v65[2] = 0;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v58, v64);
  sub_5D3CC();
  uint64_t v66 = v115;
  sub_67CB0();
  sub_A8C0(v63, &qword_82040);
  uint64_t v67 = v112;
  uint64_t v68 = v114;
  uint64_t v69 = v116;
  (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v114, v66, v116);
  long long v124 = v156;
  long long v125 = v157;
  v126[0] = *(_OWORD *)v158;
  *(_OWORD *)((char *)v126 + 9) = *(_OWORD *)&v158[9];
  long long v120 = v152;
  long long v121 = v153;
  long long v122 = v154;
  long long v123 = v155;
  long long v118 = v150;
  long long v119 = v151;
  uint64_t v70 = *(void *)v113;
  uint64_t v111 = *(void *)(v113 + 8);
  LODWORD(v11sub_66CA4(2, 18, 1, 0) = *(unsigned __int8 *)(v113 + 16);
  uint64_t v109 = *(void *)(v113 + 24);
  uint64_t v71 = v109;
  LOBYTE(v63) = *(unsigned char *)(v113 + 32);
  sub_A85C((uint64_t)v25, v117, &qword_81CB8);
  uint64_t v113 = *(void *)(v67 + 16);
  ((void (*)(char *, char *, uint64_t))v113)(v66, v68, v69);
  long long v72 = v125;
  long long v133 = v124;
  long long v134 = v125;
  long long v73 = v126[0];
  v135[0] = v126[0];
  *(_OWORD *)((char *)v135 + 9) = *(_OWORD *)((char *)v126 + 9);
  long long v74 = v120;
  long long v75 = v121;
  long long v129 = v120;
  long long v130 = v121;
  long long v76 = v122;
  long long v77 = v123;
  long long v131 = v122;
  long long v132 = v123;
  long long v78 = v118;
  long long v79 = v119;
  long long v127 = v118;
  long long v128 = v119;
  uint64_t v80 = v98;
  *(_OWORD *)(v98 + 96) = v124;
  *(_OWORD *)(v80 + 112) = v72;
  *(_OWORD *)(v80 + 128) = v73;
  *(_OWORD *)(v80 + 137) = *(_OWORD *)((char *)v126 + 9);
  *(_OWORD *)(v80 + 32) = v74;
  *(_OWORD *)(v80 + 48) = v75;
  *(_OWORD *)(v80 + 64) = v76;
  *(_OWORD *)(v80 + 8sub_66CA4(2, 18, 1, 0) = v77;
  *(_OWORD *)uint64_t v80 = v78;
  *(_OWORD *)(v80 + 16) = v79;
  char v81 = v110;
  LOBYTE(v68) = v110 & 1;
  LOBYTE(v63) = v63 & 1;
  uint64_t v82 = v111;
  *(void *)(v80 + 16sub_66CA4(2, 18, 1, 0) = v70;
  *(void *)(v80 + 168) = v82;
  *(unsigned char *)(v80 + 176) = v81 & 1;
  *(void *)(v80 + 184) = v71;
  *(unsigned char *)(v80 + 192) = v63;
  uint64_t v83 = sub_4890(&qword_82068);
  sub_A85C(v117, v80 + *(int *)(v83 + 64), &qword_81CB8);
  uint64_t v84 = v80 + *(int *)(v83 + 80);
  uint64_t v85 = v115;
  uint64_t v86 = v116;
  ((void (*)(uint64_t, char *, uint64_t))v113)(v84, v115, v116);
  sub_11854((uint64_t)v140);
  sub_5CEA4((uint64_t)&v138);
  sub_5CED4((uint64_t)&v127);
  sub_FBA8(v70, v82, (char)v68);
  uint64_t v87 = v109;
  sub_52694(v109, v63);
  sub_5CED4((uint64_t)&v150);
  uint64_t v88 = *(void (**)(char *, uint64_t))(v67 + 8);
  v88(v114, v86);
  sub_A8C0((uint64_t)v97, &qword_81CB8);
  sub_11888((uint64_t)v140);
  sub_5CF38((uint64_t)&v138);
  sub_5CF68((uint64_t)&v150);
  v88(v85, v86);
  sub_A8C0(v117, &qword_81CB8);
  sub_FFE0(v70, v82, (char)v68);
  sub_1CE40(v87, v63);
  v136[6] = v124;
  v136[7] = v125;
  v137[0] = v126[0];
  *(_OWORD *)((char *)v137 + 9) = *(_OWORD *)((char *)v126 + 9);
  v136[2] = v120;
  v136[3] = v121;
  v136[4] = v122;
  v136[5] = v123;
  v136[0] = v118;
  v136[1] = v119;
  return sub_5CF68((uint64_t)v136);
}

double sub_4F47C()
{
  sub_67820();
  sub_675A0();
  return v0 + 5.0;
}

uint64_t sub_4F4AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  long long v10 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a9 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a9 + 64) = v10;
  *(void *)(a9 + 8sub_66CA4(2, 18, 1, 0) = *(void *)(a3 + 64);
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a9 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a9 + 32) = v11;
  *(unsigned char *)(a9 + 88) = a4;
  *(unsigned char *)(a9 + 89) = a5;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = a7;
  *(unsigned char *)(a9 + 112) = a8;
  uint64_t v12 = type metadata accessor for FeatureToggleView(0);
  uint64_t v13 = (uint64_t *)(a9 + *(int *)(v12 + 36));
  *uint64_t v13 = swift_getKeyPath();
  sub_4890(&qword_81180);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = a9 + *(int *)(v12 + 40);
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v14 = result;
  *(unsigned char *)(v14 + 8) = 0;
  return result;
}

uint64_t sub_4F55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  char v8 = *(unsigned char *)(v2 + 32);
  sub_52BF4(v2, (uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FeatureToggleView);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1CA30((uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for FeatureToggleView);
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = sub_52BA8;
  *(void *)(a2 + 32) = v10;
  return sub_FBA8(v6, v7, v8);
}

uint64_t sub_4F698@<X0>(uint64_t a1@<X8>)
{
  return sub_52B28(v1, a1);
}

uint64_t sub_4F6A4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_4F700()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_4F708()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_4F710()
{
  return *(unsigned __int8 *)(v0 + 113);
}

uint64_t sub_4F718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FeatureOptionView(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = *(void *)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  char v8 = *(unsigned char *)(v1 + 16);
  sub_52BF4(v1, (uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FeatureOptionView);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1CA30((uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for FeatureOptionView);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = sub_52C60;
  *(void *)(a1 + 32) = v10;
  return sub_FBA8(v6, v7, v8);
}

uint64_t sub_4F85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FeatureOptionView(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_4890(&qword_81FF8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = *(unsigned char *)(a2 + 112);
  char v15 = *(unsigned char *)(a2 + 113);
  sub_52BF4(a2, (uint64_t)v9, type metadata accessor for FeatureOptionView);
  sub_117DC((long long *)a1, (uint64_t)v27);
  uint64_t v25 = *(void *)(a1 + 24);
  char v26 = *(unsigned char *)(a1 + 32);
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v17 = (v8 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  sub_1CA30((uint64_t)v9, v18 + v16, type metadata accessor for FeatureOptionView);
  unint64_t v19 = v18 + v17;
  long long v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)unint64_t v19 = *(_OWORD *)a1;
  *(_OWORD *)(v19 + 16) = v20;
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(a1 + 32);
  *uint64_t v13 = v14;
  v13[1] = v15;
  *((void *)v13 + 1) = sub_5CE78;
  *((void *)v13 + 2) = v18;
  uint64_t v21 = (uint64_t *)&v13[*(int *)(v11 + 52)];
  *uint64_t v21 = swift_getKeyPath();
  sub_4890(&qword_81180);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = &v13[*(int *)(v11 + 56)];
  *(void *)uint64_t v22 = swift_getKeyPath();
  v22[8] = 0;
  sub_1D2D8((uint64_t)v13, a3, &qword_81FF8);
  sub_11854((uint64_t)v27);
  return sub_5CEA4((uint64_t)&v25);
}

uint64_t sub_4FAA0@<X0>(void *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v94 = a2;
  uint64_t v5 = sub_4890(&qword_82000);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v93 = (uint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v95 = (uint64_t)&v83 - v8;
  uint64_t v9 = sub_4890(&qword_81B98);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v90 = (int *)v9;
  uint64_t v91 = v10;
  __chkstk_darwin(v9);
  uint64_t v86 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_4890(&qword_81120);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v85 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v87 = (uint64_t)&v83 - v15;
  uint64_t v16 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v88 = *(void *)(v16 - 8);
  uint64_t v89 = v16;
  __chkstk_darwin(v16);
  uint64_t v84 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_4890(&qword_81CB8);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v92 = (uint64_t)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v83 - v21;
  uint64_t v23 = a1[11];
  *(void *)&long long v129 = a1[10];
  *((void *)&v129 + 1) = v23;
  sub_A5D0();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_67C00();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  char v30 = v29 & 1;
  uint64_t v31 = *sub_31344();
  uint64_t v32 = sub_680A0();
  uint64_t v33 = 1;
  sub_42000(0.0, 1, 0.0, 1, INFINITY, 0, *(double *)&v31, 0, (uint64_t)&v129, 0.0, 1, 0.0, 1, v32, v34, v24, v26, v30, v28);
  sub_52808(v24, v26, v30);
  swift_bridgeObjectRelease();
  long long v126 = v135;
  long long v127 = v136;
  long long v128 = *(_OWORD *)v137;
  long long v122 = v131;
  long long v123 = v132;
  long long v124 = v133;
  long long v125 = v134;
  long long v120 = v129;
  long long v121 = v130;
  uint64_t KeyPath = swift_getKeyPath();
  long long v135 = v126;
  long long v136 = v127;
  *(_OWORD *)char v137 = v128;
  long long v131 = v122;
  long long v132 = v123;
  long long v133 = v124;
  long long v134 = v125;
  long long v129 = v120;
  long long v130 = v121;
  *(void *)&v137[16] = KeyPath;
  v137[24] = 1;
  uint64_t v36 = v94;
  sub_117DC(v94, (uint64_t)v119);
  uint64_t v117 = *((void *)v36 + 3);
  char v118 = *((unsigned char *)v36 + 32);
  uint64_t v37 = (char *)a1 + *(int *)(type metadata accessor for FeatureOptionView(0) + 40);
  uint64_t v38 = *(void *)v37;
  LOBYTE(v28) = v37[8];
  sub_11854((uint64_t)v119);
  sub_5CEA4((uint64_t)&v117);
  sub_52694(v38, v28);
  LOBYTE(v31) = sub_4C1E0(v38, v28);
  uint64_t v39 = v38;
  uint64_t v40 = v90;
  sub_1CE40(v39, v28);
  if ((v31 & 1) == 0)
  {
    uint64_t v41 = v87;
    sub_4C3B8(v87);
    uint64_t v43 = v88;
    uint64_t v42 = v89;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v41, 1, v89) == 1)
    {
      sub_A8C0(v41, &qword_81120);
      uint64_t v33 = 1;
    }
    else
    {
      uint64_t v44 = v41;
      uint64_t v45 = v84;
      sub_1CA30(v44, v84, type metadata accessor for FeaturePreviewConfiguration);
      uint64_t v46 = v45;
      uint64_t v47 = v85;
      sub_1CA30(v46, v85, type metadata accessor for FeaturePreviewConfiguration);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v47, 0, 1, v42);
      uint64_t v48 = (uint64_t)v86;
      uint64_t v49 = &v86[v40[11]];
      *(void *)uint64_t v49 = swift_getKeyPath();
      v49[8] = 0;
      sub_1D2D8(v47, v48, &qword_81120);
      uint64_t v50 = (void *)(v48 + v40[9]);
      *uint64_t v50 = 0;
      v50[1] = 0;
      *(unsigned char *)(v48 + v40[10]) = 2;
      sub_1D2D8(v48, (uint64_t)v22, &qword_81B98);
      uint64_t v33 = 0;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v91 + 56))(v22, v33, 1, v40);
  uint64_t v51 = a1[13];
  uint64_t v52 = *(void *)(v51 + 16);
  uint64_t v96 = v22;
  if (v52)
  {
    uint64_t v53 = a1[9];
    swift_bridgeObjectRetain();
    uint64_t v54 = (void *)(v51 + 48);
    while (1)
    {
      uint64_t v55 = *v54;
      long long v108 = *((_OWORD *)v54 - 1);
      *(void *)&long long v109 = v55;
      sub_4890(&qword_811A0);
      sub_67FD0();
      if (*(void *)&v106[0] == v53) {
        break;
      }
      v54 += 3;
      if (!--v52)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v58 = sub_67EA0();
    uint64_t v59 = sub_67E10();
    uint64_t v60 = swift_getKeyPath();
    *(void *)&long long v108 = v58;
    *((void *)&v108 + 1) = v60;
    *(void *)&long long v109 = v59;
    sub_67B50();
    sub_4890(&qword_82018);
    sub_5CFBC();
    uint64_t v61 = v95;
    sub_67C30();
    swift_release();
    uint64_t v57 = v61;
    swift_release();
    swift_release();
    uint64_t v62 = sub_4890(&qword_82008);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 0, 1, v62);
  }
  else
  {
LABEL_10:
    uint64_t v56 = sub_4890(&qword_82008);
    uint64_t v57 = v95;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v95, 1, 1, v56);
  }
  long long v103 = v135;
  long long v104 = v136;
  v105[0] = *(_OWORD *)v137;
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)&v137[9];
  long long v99 = v131;
  long long v100 = v132;
  long long v101 = v133;
  long long v102 = v134;
  long long v97 = v129;
  long long v98 = v130;
  uint64_t v63 = *(void *)v94;
  uint64_t v64 = *((void *)v94 + 1);
  char v65 = *((unsigned char *)v94 + 16);
  uint64_t v66 = *((void *)v94 + 3);
  char v67 = *((unsigned char *)v94 + 32);
  uint64_t v68 = v92;
  sub_A85C((uint64_t)v96, v92, &qword_81CB8);
  uint64_t v69 = v57;
  uint64_t v70 = v93;
  sub_A85C(v69, v93, &qword_82000);
  long long v71 = v104;
  v106[6] = v103;
  v106[7] = v104;
  long long v72 = v105[0];
  v107[0] = v105[0];
  *(_OWORD *)((char *)v107 + 9) = *(_OWORD *)((char *)v105 + 9);
  long long v73 = v99;
  long long v74 = v100;
  v106[2] = v99;
  v106[3] = v100;
  long long v75 = v101;
  long long v76 = v102;
  v106[4] = v101;
  v106[5] = v102;
  long long v77 = v97;
  long long v78 = v98;
  v106[0] = v97;
  v106[1] = v98;
  *(_OWORD *)(a3 + 96) = v103;
  *(_OWORD *)(a3 + 112) = v71;
  *(_OWORD *)(a3 + 128) = v72;
  *(_OWORD *)(a3 + 137) = *(_OWORD *)((char *)v105 + 9);
  *(_OWORD *)(a3 + 32) = v73;
  *(_OWORD *)(a3 + 48) = v74;
  *(_OWORD *)(a3 + 64) = v75;
  *(_OWORD *)(a3 + 8sub_66CA4(2, 18, 1, 0) = v76;
  *(_OWORD *)a3 = v77;
  *(_OWORD *)(a3 + 16) = v78;
  char v79 = v65 & 1;
  char v80 = v67 & 1;
  *(void *)(a3 + 16sub_66CA4(2, 18, 1, 0) = v63;
  *(void *)(a3 + 168) = v64;
  *(unsigned char *)(a3 + 176) = v79;
  *(void *)(a3 + 184) = v66;
  *(unsigned char *)(a3 + 192) = v67 & 1;
  uint64_t v81 = sub_4890(&qword_82010);
  sub_A85C(v68, a3 + *(int *)(v81 + 64), &qword_81CB8);
  sub_A85C(v70, a3 + *(int *)(v81 + 80), &qword_82000);
  sub_11854((uint64_t)v119);
  sub_5CEA4((uint64_t)&v117);
  sub_5CED4((uint64_t)v106);
  sub_FBA8(v63, v64, v79);
  sub_52694(v66, v80);
  sub_5CED4((uint64_t)&v129);
  sub_A8C0(v95, &qword_82000);
  sub_A8C0((uint64_t)v96, &qword_81CB8);
  sub_11888((uint64_t)v119);
  sub_5CF38((uint64_t)&v117);
  sub_5CF68((uint64_t)&v129);
  sub_A8C0(v70, &qword_82000);
  sub_A8C0(v68, &qword_81CB8);
  sub_FFE0(v63, v64, v79);
  sub_1CE40(v66, v80);
  long long v114 = v103;
  long long v115 = v104;
  v116[0] = v105[0];
  *(_OWORD *)((char *)v116 + 9) = *(_OWORD *)((char *)v105 + 9);
  long long v110 = v99;
  long long v111 = v100;
  long long v112 = v101;
  long long v113 = v102;
  long long v108 = v97;
  long long v109 = v98;
  return sub_5CF68((uint64_t)&v108);
}

uint64_t sub_503B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  long long v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a9 + 48) = v10;
  uint64_t v11 = *(void *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(_OWORD *)(a9 + 16) = v12;
  *(void *)(a9 + 64) = v11;
  *(void *)(a9 + 72) = a2;
  *(void *)(a9 + 8sub_66CA4(2, 18, 1, 0) = a3;
  *(void *)(a9 + 88) = a4;
  *(unsigned char *)(a9 + 96) = a5 & 1;
  *(unsigned char *)(a9 + 97) = HIBYTE(a5) & 1;
  *(void *)(a9 + 104) = a6;
  *(unsigned char *)(a9 + 112) = a7;
  *(unsigned char *)(a9 + 113) = a8;
  uint64_t v13 = type metadata accessor for FeatureOptionView(0);
  uint64_t v14 = (uint64_t *)(a9 + *(int *)(v13 + 36));
  uint64_t *v14 = swift_getKeyPath();
  sub_4890(&qword_81180);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a9 + *(int *)(v13 + 40);
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v15 = result;
  *(unsigned char *)(v15 + 8) = 0;
  return result;
}

uint64_t sub_50474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  uint64_t v6 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  char v8 = *(unsigned char *)(v2 + 16);
  sub_52BF4(v2, (uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FeatureOptionView);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  sub_1CA30((uint64_t)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for FeatureOptionView);
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = sub_52C60;
  *(void *)(a2 + 32) = v10;
  return sub_FBA8(v6, v7, v8);
}

uint64_t sub_505B0()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t sub_505E0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t sub_50618()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t sub_50648()
{
  sub_67F10();
  return v1;
}

uint64_t sub_50684@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v59 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v58 = *(void *)(v5 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_4FAC(&qword_80B60);
  uint64_t v8 = sub_675D0();
  uint64_t v50 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v46 - v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v47 = v11;
  uint64_t v12 = sub_AE4C(&qword_80B58, &qword_80B60);
  uint64_t v65 = v11;
  uint64_t v66 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&v67[0] = v8;
  *((void *)&v67[0] + 1) = WitnessTable;
  uint64_t v14 = WitnessTable;
  v46[0] = WitnessTable;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v53 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v60 = (char *)v46 - v16;
  sub_4FAC(&qword_81CD8);
  uint64_t v54 = OpaqueTypeMetadata2;
  uint64_t v17 = sub_675D0();
  uint64_t v56 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v55 = (char *)v46 - v18;
  *(void *)&v67[0] = v8;
  *((void *)&v67[0] + 1) = v14;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v20 = sub_AE4C(&qword_81CE0, &qword_81CD8);
  uint64_t v48 = OpaqueTypeConformance2;
  uint64_t v63 = OpaqueTypeConformance2;
  uint64_t v64 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v57 = v17;
  *(void *)&v67[0] = v17;
  *((void *)&v67[0] + 1) = v21;
  uint64_t v52 = v21;
  uint64_t v22 = swift_getOpaqueTypeMetadata2();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v49 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v51 = (char *)v46 - v27;
  (*(void (**)(uint64_t))v3)(v26);
  sub_52D24();
  uint64_t v28 = v10;
  uint64_t v29 = v47;
  sub_67C90();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v5);
  uint64_t v30 = *(void *)(v3 + 24);
  v67[0] = *(_OWORD *)(v3 + 32);
  uint64_t v31 = swift_allocObject();
  uint64_t v58 = v5;
  *(void *)(v31 + 16) = v5;
  *(void *)(v31 + 24) = v29;
  long long v32 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v31 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v31 + 48) = v32;
  *(_OWORD *)(v31 + 64) = *(_OWORD *)(v3 + 32);
  swift_retain();
  v46[1] = v30;
  swift_retain();
  sub_52DA4((uint64_t)v67);
  sub_67CC0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v8);
  long long v61 = v67[0];
  sub_4890(&qword_80CF8);
  sub_67F20();
  uint64_t v33 = 0;
  if (v62 == 1)
  {
    id v34 = [self systemGray5Color];
    uint64_t v33 = sub_67E00();
  }
  *(void *)&long long v61 = v33;
  uint64_t v36 = v54;
  uint64_t v35 = v55;
  uint64_t v37 = v60;
  sub_67D20();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v36);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v58;
  *(void *)(v38 + 24) = v29;
  long long v39 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v38 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v38 + 48) = v39;
  *(_OWORD *)(v38 + 64) = *(_OWORD *)(v3 + 32);
  swift_retain();
  swift_retain();
  sub_52DA4((uint64_t)v67);
  uint64_t v40 = v49;
  uint64_t v41 = v57;
  sub_67D50();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v41);
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  uint64_t v43 = v51;
  v42(v51, v40, v22);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v23 + 8);
  v44(v40, v22);
  v42(v59, v43, v22);
  return ((uint64_t (*)(char *, uint64_t))v44)(v43, v22);
}

uint64_t sub_50D8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_67F10();
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(unsigned char *)(a5 + 32) = v11;
  *(void *)(a5 + 4sub_66CA4(2, 18, 1, 0) = v12;
  return result;
}

uint64_t sub_50E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_50E14@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_50E20(uint64_t a1)
{
  return a1;
}

uint64_t sub_50E54()
{
  uint64_t v0 = sub_673B0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  uint64_t v6 = &v11[-v5];
  sub_673A0();
  swift_bridgeObjectRetain();
  sub_67390();
  id v7 = [self clearColor];
  uint64_t v8 = (void (*)(unsigned char *, void))sub_67380();
  sub_67370();
  v8(v11, 0);
  sub_52EBC();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v1 + 16))(v4, v6, v0);
  uint64_t v9 = sub_683C0();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v6, v0);
  return v9;
}

uint64_t sub_50FF8()
{
  uint64_t v0 = sub_673B0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  uint64_t v6 = &v11[-v5];
  sub_673A0();
  swift_bridgeObjectRetain();
  sub_67390();
  id v7 = [self clearColor];
  uint64_t v8 = (void (*)(unsigned char *, void))sub_67380();
  sub_67370();
  v8(v11, 0);
  sub_52EBC();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v1 + 16))(v4, v6, v0);
  uint64_t v9 = sub_683C0();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v6, v0);
  return v9;
}

uint64_t sub_511A8()
{
  return sub_67940();
}

uint64_t sub_511EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_5C67C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_51250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_5C67C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_512B4()
{
}

uint64_t sub_512DC(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_512E4()
{
  return 1.0;
}

void sub_512EC(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*sub_512F4())()
{
  return nullsub_1;
}

uint64_t sub_51318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_51320(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*sub_51328())()
{
  return nullsub_1;
}

uint64_t sub_51348@<X0>(void *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = type metadata accessor for _GlyphShape(0);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_4890(&qword_81CF8);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_4890(&qword_81D00);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v13 = a1;
  *((_WORD *)v13 + 4) = a2;
  *((double *)v13 + 2) = a5;
  *((void *)v13 + 3) = a3;
  uint64_t v22 = (uint64_t *)&v13[*(int *)(v11 + 40)];
  *uint64_t v22 = swift_getKeyPath();
  sub_4890(&qword_81D08);
  swift_storeEnumTagMultiPayload();
  id v23 = a1;
  sub_606C0();
  sub_68090();
  sub_67520();
  sub_52BF4((uint64_t)v13, (uint64_t)v17, type metadata accessor for _GlyphShape);
  uint64_t v24 = &v17[*(int *)(v15 + 44)];
  long long v25 = v31[1];
  *(_OWORD *)uint64_t v24 = v31[0];
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v31[2];
  sub_548B4((uint64_t)v13, type metadata accessor for _GlyphShape);
  sub_A85C((uint64_t)v17, (uint64_t)v21, &qword_81CF8);
  *(_WORD *)&v21[*(int *)(v19 + 44)] = 257;
  sub_A8C0((uint64_t)v17, &qword_81CF8);
  uint64_t v26 = sub_67800();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v23;
  *(_WORD *)(v27 + 24) = a2;
  *(double *)(v27 + 32) = a5;
  *(void *)(v27 + 4sub_66CA4(2, 18, 1, 0) = a3;
  sub_A85C((uint64_t)v21, a4, &qword_81D00);
  uint64_t v28 = (uint64_t *)(a4 + *(int *)(sub_4890(&qword_81D10) + 36));
  *uint64_t v28 = v26;
  v28[1] = (uint64_t)sub_52F54;
  void v28[2] = v27;
  id v29 = v23;
  return sub_A8C0((uint64_t)v21, &qword_81D00);
}

uint64_t sub_5160C@<X0>(uint64_t a1@<X8>)
{
  return sub_51348(*(void **)v1, *(_WORD *)(v1 + 8), *(void *)(v1 + 24), a1, *(double *)(v1 + 16));
}

CGPathRef sub_51620(double a1, CGFloat a2)
{
  CGGlyph v34 = *(_WORD *)(v2 + 8);
  CGGlyph v3 = v34;
  uint64_t v4 = *(const __CTFont **)v2;
  CGRect BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*(void *)v2, kCTFontOrientationDefault, &v34, 0, 1);
  CGFloat x = BoundingRectsForGlyphs.origin.x;
  CGFloat y = BoundingRectsForGlyphs.origin.y;
  CGFloat width = BoundingRectsForGlyphs.size.width;
  CGFloat height = BoundingRectsForGlyphs.size.height;
  CGAffineTransformMakeScale(&t1, 1.0, -1.0);
  long long v25 = *(_OWORD *)&t1.c;
  long long v27 = *(_OWORD *)&t1.a;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  double v11 = *(double *)(v2 + 16);
  CGAffineTransformMakeScale(&t1, v11, v11);
  long long v12 = *(_OWORD *)&t1.a;
  long long v13 = *(_OWORD *)&t1.c;
  long long v14 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v27;
  *(_OWORD *)&t1.c = v25;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&t2.a = v12;
  *(_OWORD *)&t2.c = v13;
  *(_OWORD *)&t2.tCGFloat x = v14;
  CGAffineTransformConcat(&v31, &t1, &t2);
  long long v26 = *(_OWORD *)&v31.c;
  long long v28 = *(_OWORD *)&v31.a;
  CGFloat v16 = v31.tx;
  CGFloat v15 = v31.ty;
  sub_5C2C8(a1, x, y, width, height);
  CGFloat v18 = v17;
  CTFontRef v19 = sub_60654(a2);
  double v20 = sub_606B8();

  CGAffineTransformMakeTranslation(&t1, v18, a2 - v11 * v20);
  long long v21 = *(_OWORD *)&t1.a;
  long long v22 = *(_OWORD *)&t1.c;
  long long v23 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v28;
  *(_OWORD *)&t1.c = v26;
  t1.tCGFloat x = v16;
  t1.tCGFloat y = v15;
  *(_OWORD *)&t2.a = v21;
  *(_OWORD *)&t2.c = v22;
  *(_OWORD *)&t2.tCGFloat x = v23;
  CGAffineTransformConcat(&v31, &t1, &t2);
  CGAffineTransform t1 = v31;
  return CTFontCreatePathForGlyph(v4, v3, &t1);
}

uint64_t sub_517EC()
{
  return sub_67690();
}

uint64_t sub_51810(uint64_t a1)
{
  uint64_t v2 = sub_675C0();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_676A0();
}

double sub_518D8@<D0>(uint64_t a1@<X8>, double a2@<D2>, CGFloat a3@<D3>)
{
  if (sub_51620(a2, a3)) {
    sub_67BB0();
  }
  else {
    sub_67BA0();
  }
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

uint64_t sub_5193C()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_51954(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_67450();
  return sub_519C4;
}

void sub_519C4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_51A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_5BF18(qword_87968);
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_51A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_5BF18(qword_87968);
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_51B10(uint64_t a1)
{
  uint64_t v2 = sub_5BF18(qword_87968);
  return Shape.body.getter(a1, v2);
}

uint64_t sub_51B78@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_67710();
  *a1 = result;
  return result;
}

uint64_t sub_51BA4()
{
  return sub_67720();
}

unint64_t sub_51BCC()
{
  unint64_t result = qword_81AA0;
  if (!qword_81AA0)
  {
    sub_4FAC(&qword_81A80);
    sub_AE4C(&qword_81AA8, &qword_81A98);
    sub_AE4C(&qword_81AB0, &qword_81AB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81AA0);
  }
  return result;
}

unint64_t sub_51C90()
{
  unint64_t result = qword_81B10;
  if (!qword_81B10)
  {
    sub_4FAC(&qword_81AE0);
    sub_5A1B4(&qword_81B18, &qword_81AD8, (void (*)(void))sub_51D5C);
    sub_AE4C(&qword_81AB0, &qword_81AB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81B10);
  }
  return result;
}

unint64_t sub_51D5C()
{
  unint64_t result = qword_81B20;
  if (!qword_81B20)
  {
    sub_4FAC(&qword_81AD0);
    sub_AE4C(&qword_81B28, &qword_81AC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81B20);
  }
  return result;
}

unint64_t sub_51DFC()
{
  unint64_t result = qword_81B40;
  if (!qword_81B40)
  {
    sub_4FAC(&qword_81AF8);
    sub_51E9C();
    sub_AE4C(&qword_81B50, &qword_81B58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81B40);
  }
  return result;
}

unint64_t sub_51E9C()
{
  unint64_t result = qword_81B48;
  if (!qword_81B48)
  {
    sub_4FAC(&qword_81AF0);
    sub_4FAC(&qword_81AE0);
    sub_51C90();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81B48);
  }
  return result;
}

unint64_t sub_51F4C()
{
  unint64_t result = qword_81B68;
  if (!qword_81B68)
  {
    sub_4FAC(&qword_81B70);
    sub_AE4C(&qword_81B78, &qword_81B80);
    sub_AE4C(&qword_81B88, &qword_81B90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81B68);
  }
  return result;
}

uint64_t sub_52010@<X0>(uint64_t a1@<X8>)
{
  return sub_44808(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_52018(uint64_t a1)
{
  return a1;
}

uint64_t sub_52044(uint64_t a1)
{
  return a1;
}

uint64_t sub_52070@<X0>(char *a1@<X8>)
{
  return sub_45188(*(void *)(v1 + 16), a1);
}

uint64_t type metadata accessor for FeaturePreviewView()
{
  return sub_5F900();
}

void sub_52094(uint64_t a1@<X8>)
{
  sub_459B8(v1[4], v1[2], v1[3], a1);
}

uint64_t type metadata accessor for FeaturePreviewContainerView()
{
  return swift_getGenericMetadata();
}

unint64_t sub_520B8()
{
  unint64_t result = qword_81BB8;
  if (!qword_81BB8)
  {
    sub_4FAC(&qword_81BA0);
    sub_521A0(&qword_81BC0, &qword_81BC8, (void (*)(void))sub_5220C);
    sub_521A0(&qword_81BF0, &qword_81BF8, (void (*)(void))sub_522A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81BB8);
  }
  return result;
}

uint64_t sub_521A0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_5220C()
{
  unint64_t result = qword_81BD0;
  if (!qword_81BD0)
  {
    sub_4FAC(&qword_81BD8);
    sub_5246C(&qword_869C0, &qword_81BE0);
    sub_5246C(&qword_869C8, &qword_81BE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81BD0);
  }
  return result;
}

unint64_t sub_522A8()
{
  unint64_t result = qword_81C00;
  if (!qword_81C00)
  {
    sub_4FAC(&qword_81C08);
    sub_5246C(&qword_869D0, &qword_81C10);
    sub_5246C(&qword_869D8, &qword_81C18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81C00);
  }
  return result;
}

unint64_t sub_52344()
{
  unint64_t result = qword_81C28;
  if (!qword_81C28)
  {
    sub_4FAC(&qword_81C30);
    sub_5246C(&qword_869E0, &qword_81C38);
    sub_5246C(&qword_869E8, &qword_81C40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81C28);
  }
  return result;
}

unint64_t sub_523E0()
{
  unint64_t result = qword_81C48;
  if (!qword_81C48)
  {
    sub_4FAC(&qword_81BB0);
    sub_5246C(qword_869F0, &qword_81C50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81C48);
  }
  return result;
}

uint64_t sub_5246C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_524BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  if (a9) {
    sub_5261C(a1, a2, a3, a4, a5, a6, a7, a8, BYTE1(a8) & 1);
  }
  else {
    sub_524DC(a1, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1);
  }
}

uint64_t sub_524DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  if (a9) {
    return sub_52558(a1, a2, a3, a4, a5, a6, a7, a8, BYTE2(a8) & 1);
  }
  else {
    return sub_524FC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_524FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  return sub_5E428(a1, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1, (void (*)(uint64_t, uint64_t))sub_5FB80);
}

uint64_t sub_52558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, char a9)
{
  char v9 = a8;
  if ((a9 & 1) == 0) {
    return sub_5E428(a1, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1, (void (*)(uint64_t, uint64_t))sub_5260C);
  }
  swift_release();
  sub_5260C(a4);
  return sub_1CE40(a7, v9 & 1);
}

uint64_t sub_5260C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_5261C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  if ((a9 & 1) == 0)
  {
    swift_release();
    sub_5260C(a4);
    sub_1CE40(a7, a8 & 1);
  }
}

uint64_t sub_52694(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_526A0()
{
  unint64_t result = qword_81C90;
  if (!qword_81C90)
  {
    sub_4FAC(&qword_81C88);
    sub_52740();
    sub_AE4C(&qword_80B48, &qword_80B50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81C90);
  }
  return result;
}

unint64_t sub_52740()
{
  unint64_t result = qword_81C98;
  if (!qword_81C98)
  {
    sub_4FAC(&qword_81CA0);
    sub_5E954(&qword_81CA8, &qword_81CB0);
    sub_AE4C(&qword_80B38, &qword_80B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81C98);
  }
  return result;
}

uint64_t sub_52808(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_52818@<X0>(char *a1@<X8>)
{
  return sub_4D898(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_52824()
{
  uint64_t v1 = type metadata accessor for FeatureRowView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  long long v5 = (id *)(v0 + v3 + *(int *)(v1 + 44));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {

      swift_bridgeObjectRelease();
      char v7 = (char *)v5 + *(int *)(v6 + 28);
      uint64_t v8 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
      {
        uint64_t v10 = sub_67240();
        double v11 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
        v11(v7, v10);
        v11(&v7[*(int *)(v8 + 48)], v10);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  sub_1CE40(*(void *)(v0 + v3 + *(int *)(v1 + 48)), *(unsigned char *)(v0 + v3 + *(int *)(v1 + 48) + 8));
  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t type metadata accessor for FeatureRowView()
{
  return sub_5F900();
}

uint64_t *sub_52A70()
{
  uint64_t v0 = type metadata accessor for FeatureRowView();
  return sub_4DFF8(v0);
}

unint64_t sub_52AD4()
{
  unint64_t result = qword_81CC8;
  if (!qword_81CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81CC8);
  }
  return result;
}

uint64_t sub_52B28(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for FeatureToggleView(uint64_t a1)
{
  return sub_3F0EC(a1, (uint64_t *)&unk_87490);
}

uint64_t sub_52BA8(uint64_t a1)
{
  return sub_52C8C(a1, type metadata accessor for FeatureToggleView, (uint64_t (*)(uint64_t, uint64_t))sub_4E664);
}

uint64_t type metadata accessor for FeatureOptionView(uint64_t a1)
{
  return sub_3F0EC(a1, qword_874A0);
}

uint64_t sub_52BF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_52C60(uint64_t a1)
{
  return sub_52C8C(a1, type metadata accessor for FeatureOptionView, (uint64_t (*)(uint64_t, uint64_t))sub_4F85C);
}

uint64_t sub_52C8C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a3(a1, v6);
}

unint64_t sub_52D24()
{
  unint64_t result = qword_81CE8;
  if (!qword_81CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81CE8);
  }
  return result;
}

uint64_t sub_52D7C()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_52DA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_52DD4()
{
  swift_release();
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_52E1C()
{
  return swift_release();
}

unint64_t sub_52EBC()
{
  unint64_t result = qword_81CF0;
  if (!qword_81CF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_81CF0);
  }
  return result;
}

uint64_t type metadata accessor for _GlyphShape(uint64_t a1)
{
  return sub_3F0EC(a1, qword_87538);
}

uint64_t sub_52F1C()
{
  return _swift_deallocObject(v0, 48, 7);
}

double sub_52F54()
{
  double v1 = *(double *)(v0 + 32);
  double v2 = sub_6075C();
  CTFontRef v3 = sub_60654(v1 * v2);
  sub_67590();
  double v5 = v4 - sub_606B8();
  double v6 = sub_6070C();

  return v5 - v6;
}

uint64_t sub_52FC8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_52FE8()
{
  unint64_t result = qword_81D18;
  if (!qword_81D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81D18);
  }
  return result;
}

uint64_t sub_5303C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_53058()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_53074()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_530B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_530FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_53118()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_5315C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_531A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_531BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_531D8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_5321C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_5323C()
{
  unint64_t result = qword_81D20;
  if (!qword_81D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81D20);
  }
  return result;
}

void *sub_53290()
{
  return &protocol witness table for Never;
}

uint64_t sub_5329C()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MessageTextStyle()
{
  return &type metadata for MessageTextStyle;
}

ValueMetadata *type metadata accessor for GroupContainer()
{
  return &type metadata for GroupContainer;
}

unsigned char *_s17UITypographyPanel14GroupContainerV5StyleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x533ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupContainer.Style()
{
  return &type metadata for GroupContainer.Style;
}

void *initializeBufferWithCopyOfBuffer for FontPickerView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for FontPickerView()
{
  return swift_release();
}

void *assignWithCopy for FontPickerView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for FontPickerView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for FontPickerView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FontPickerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FontPickerView()
{
  return &type metadata for FontPickerView;
}

uint64_t sub_53568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_53570(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 32) >= 9uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_535CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = (void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  if (v6 >= 9)
  {
    *(void *)(a1 + 24) = *v5;
    *(void *)(a1 + 32) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_5367C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >= 9uLL)
  {
    if (v4 >= 9)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_5379C(a1 + 24);
    goto LABEL_6;
  }
  if (v4 < 9)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
LABEL_8:
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_5379C(uint64_t a1)
{
  return a1;
}

__n128 sub_537F0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_5380C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v4 = (void *)(a2 + 24);
  if (*(void *)(a1 + 32) >= 9uLL)
  {
    unint64_t v5 = *(void *)(a2 + 32);
    if (v5 >= 9)
    {
      *(void *)(a1 + 24) = *v4;
      *(void *)(a1 + 32) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_5379C(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
LABEL_6:
  *(_OWORD *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t sub_538D4(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_5391C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_66CA4(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8sub_66CA4(2, 18, 1, 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8sub_66CA4(2, 18, 1, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for FeatureGroupView()
{
  return sub_5F900();
}

uint64_t sub_53988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_53990()
{
  sub_5B7F4(319, &qword_81D28, type metadata accessor for FeaturePreviewConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

char *sub_53A68(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(char **, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_4890(&qword_81120);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      double v11 = *a2;
      long long v12 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v12;
      long long v13 = a2[3];
      *((void *)a1 + 2) = a2[2];
      *((void *)a1 + 3) = v13;
      uint64_t v14 = v7[7];
      CGFloat v15 = &a1[v14];
      CGFloat v16 = (char *)a2 + v14;
      double v17 = v11;
      CGFloat v18 = v12;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_4890(&qword_81188);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19))
      {
        uint64_t v21 = sub_4890(&qword_81830);
        memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v22 = sub_67240();
        uint64_t v42 = v8;
        long long v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
        v23(v15, v16, v22);
        v23(&v15[*(int *)(v19 + 48)], &v16[*(int *)(v19 + 48)], v22);
        uint64_t v8 = v42;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v15, 0, 1, v19);
      }
      uint64_t v24 = v7[8];
      long long v25 = &a1[v24];
      long long v26 = (char *)a2 + v24;
      *(_DWORD *)long long v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      a1[v7[9]] = *((unsigned char *)a2 + v7[9]);
      uint64_t v27 = v7[10];
      long long v28 = &a1[v27];
      id v29 = (char **)((char *)a2 + v27);
      uint64_t v30 = v29[1];
      *(void *)long long v28 = *v29;
      *((void *)v28 + 1) = v30;
      a1[v7[11]] = *((unsigned char *)a2 + v7[11]);
      a1[v7[12]] = *((unsigned char *)a2 + v7[12]);
      CGAffineTransform v31 = *(void (**)(char *, void, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain();
      v31(a1, 0, 1, v7);
    }
    uint64_t v32 = a3[9];
    uint64_t v33 = &a1[v32];
    CGGlyph v34 = (char **)((char *)a2 + v32);
    if (*v34)
    {
      uint64_t v35 = v34[1];
      *(void *)uint64_t v33 = *v34;
      *((void *)v33 + 1) = v35;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    uint64_t v36 = a3[11];
    a1[a3[10]] = *((unsigned char *)a2 + a3[10]);
    uint64_t v37 = &a1[v36];
    uint64_t v38 = (char *)a2 + v36;
    uint64_t v39 = *(uint64_t *)((char *)a2 + v36);
    char v40 = v38[8];
    sub_52694(v39, v40);
    *(void *)uint64_t v37 = v39;
    v37[8] = v40;
  }
  return a1;
}

uint64_t sub_53DCC(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeaturePreviewConfiguration(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {

    swift_bridgeObjectRelease();
    int v5 = (char *)a1 + *(int *)(v4 + 28);
    uint64_t v6 = sub_4890(&qword_81188);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {
      uint64_t v7 = sub_67240();
      uint64_t v8 = *(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
      v8(v5, v7);
      v8(&v5[*(int *)(v6 + 48)], v7);
    }
    swift_bridgeObjectRelease();
  }
  if (*(id *)((char *)a1 + *(int *)(a2 + 36))) {
    swift_release();
  }
  uint64_t v9 = (char *)a1 + *(int *)(a2 + 44);
  uint64_t v10 = *(void *)v9;
  char v11 = v9[8];
  return sub_1CE40(v10, v11);
}

void **sub_53F50(void **a1, void **a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(void **, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_4890(&qword_81120);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    char v11 = a2[3];
    a1[2] = a2[2];
    a1[3] = v11;
    uint64_t v12 = v6[7];
    long long v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    id v15 = v9;
    id v16 = v10;
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_4890(&qword_81188);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17))
    {
      uint64_t v19 = sub_4890(&qword_81830);
      memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v20 = sub_67240();
      uint64_t v40 = v7;
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      v21(v13, v14, v20);
      v21(&v13[*(int *)(v17 + 48)], &v14[*(int *)(v17 + 48)], v20);
      uint64_t v7 = v40;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
    }
    uint64_t v22 = v6[8];
    long long v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    *(_DWORD *)long long v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    uint64_t v25 = v6[10];
    long long v26 = (void **)((char *)a1 + v25);
    uint64_t v27 = (void **)((char *)a2 + v25);
    uint64_t v28 = v27[1];
    *long long v26 = *v27;
    v26[1] = v28;
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
    id v29 = *(void (**)(void **, void, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain();
    v29(a1, 0, 1, v6);
  }
  uint64_t v30 = a3[9];
  CGAffineTransform v31 = (void **)((char *)a1 + v30);
  uint64_t v32 = (void **)((char *)a2 + v30);
  if (*v32)
  {
    uint64_t v33 = v32[1];
    *CGAffineTransform v31 = *v32;
    v31[1] = v33;
    swift_retain();
  }
  else
  {
    *(_OWORD *)CGAffineTransform v31 = *(_OWORD *)v32;
  }
  uint64_t v34 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = *(uint64_t *)((char *)a2 + v34);
  char v38 = v36[8];
  sub_52694(v37, v38);
  *(void *)uint64_t v35 = v37;
  v35[8] = v38;
  return a1;
}

void *sub_54264(void *a1, void *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_548B4((uint64_t)a1, type metadata accessor for FeaturePreviewConfiguration);
      goto LABEL_7;
    }
    uint64_t v21 = (void *)*a2;
    uint64_t v22 = (void *)*a1;
    *a1 = *a2;
    id v23 = v21;

    uint64_t v24 = (void *)a2[1];
    uint64_t v25 = (void *)a1[1];
    a1[1] = v24;
    id v26 = v24;

    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = v6[7];
    uint64_t v28 = (char *)a1 + v27;
    id v29 = (char *)a2 + v27;
    uint64_t v30 = sub_4890(&qword_81188);
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    __dsta = v28;
    LODWORD(v28) = v32(v28, 1, v30);
    int v33 = v32(v29, 1, v30);
    if (v28)
    {
      if (!v33)
      {
        uint64_t v46 = sub_67240();
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
        v47(__dsta, v29, v46);
        v47(&__dsta[*(int *)(v30 + 48)], &v29[*(int *)(v30 + 48)], v46);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dsta, 0, 1, v30);
        goto LABEL_18;
      }
      size_t v34 = *(void *)(*(void *)(sub_4890(&qword_81830) - 8) + 64);
      uint64_t v35 = __dsta;
    }
    else
    {
      if (!v33)
      {
        uint64_t v48 = sub_67240();
        uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24);
        v49(__dsta, v29, v48);
        v49(&__dsta[*(int *)(v30 + 48)], &v29[*(int *)(v30 + 48)], v48);
        goto LABEL_18;
      }
      sub_A8C0((uint64_t)__dsta, &qword_81188);
      size_t v34 = *(void *)(*(void *)(sub_4890(&qword_81830) - 8) + 64);
      uint64_t v35 = __dsta;
    }
    memcpy(v35, v29, v34);
LABEL_18:
    uint64_t v50 = v6[8];
    uint64_t v51 = (char *)a1 + v50;
    uint64_t v52 = (char *)a2 + v50;
    int v53 = *(_DWORD *)v52;
    v51[4] = v52[4];
    *(_DWORD *)uint64_t v51 = v53;
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    uint64_t v54 = v6[10];
    uint64_t v55 = (void *)((char *)a1 + v54);
    uint64_t v56 = (void *)((char *)a2 + v54);
    *uint64_t v55 = *v56;
    v55[1] = v56[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v20 = sub_4890(&qword_81120);
    memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_19;
  }
  char v11 = (void *)*a2;
  *a1 = *a2;
  uint64_t v12 = (void *)a2[1];
  a1[1] = v12;
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v13 = v6[7];
  __dst = (char *)a1 + v13;
  uint64_t v14 = (char *)a2 + v13;
  id v15 = v11;
  id v16 = v12;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_4890(&qword_81188);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17))
  {
    uint64_t v19 = sub_4890(&qword_81830);
    memcpy(__dst, v14, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v36 = sub_67240();
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
    v37(__dst, v14, v36);
    v37(&__dst[*(int *)(v17 + 48)], &v14[*(int *)(v17 + 48)], v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  uint64_t v38 = v6[8];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  int v41 = *(_DWORD *)v40;
  v39[4] = v40[4];
  *(_DWORD *)uint64_t v39 = v41;
  *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
  uint64_t v42 = v6[10];
  uint64_t v43 = (void *)((char *)a1 + v42);
  uint64_t v44 = (void *)((char *)a2 + v42);
  *uint64_t v43 = *v44;
  v43[1] = v44[1];
  *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  uint64_t v45 = *(void (**)(void *, void, uint64_t, int *))(v7 + 56);
  swift_bridgeObjectRetain();
  v45(a1, 0, 1, v6);
LABEL_19:
  uint64_t v57 = a3[9];
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (char *)a2 + v57;
  uint64_t v60 = *(void *)((char *)a1 + v57);
  uint64_t v61 = *(void *)((char *)a2 + v57);
  if (!v60)
  {
    if (v61)
    {
      uint64_t v63 = *((void *)v59 + 1);
      void *v58 = v61;
      v58[1] = v63;
      swift_retain();
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    goto LABEL_26;
  }
  if (!v61)
  {
    swift_release();
    goto LABEL_25;
  }
  uint64_t v62 = *((void *)v59 + 1);
  void *v58 = v61;
  v58[1] = v62;
  swift_retain();
  swift_release();
LABEL_26:
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v64 = a3[11];
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (char *)a2 + v64;
  uint64_t v67 = *(void *)v66;
  char v68 = v66[8];
  sub_52694(*(void *)v66, v68);
  uint64_t v69 = *(void *)v65;
  char v70 = v65[8];
  *(void *)uint64_t v65 = v67;
  v65[8] = v68;
  sub_1CE40(v69, v70);
  return a1;
}

uint64_t sub_548B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *sub_54914(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_4890(&qword_81120);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    long long v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v10 = v6[7];
    __dst = (char *)a1 + v10;
    char v11 = (char *)a2 + v10;
    uint64_t v12 = sub_4890(&qword_81188);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_4890(&qword_81830);
      memcpy(__dst, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v15 = sub_67240();
      uint64_t v29 = v7;
      id v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32);
      v16(__dst, v11, v15);
      v16(&__dst[*(int *)(v12 + 48)], &v11[*(int *)(v12 + 48)], v15);
      uint64_t v7 = v29;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v17 = v6[8];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  if (*v22)
  {
    uint64_t v24 = v22[1];
    *uint64_t v21 = v23;
    v21[1] = v24;
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  uint64_t v25 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  id v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  *(void *)id v26 = *(void *)v27;
  v26[8] = v27[8];
  return a1;
}

void *sub_54BF4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_548B4((uint64_t)a1, type metadata accessor for FeaturePreviewConfiguration);
      goto LABEL_7;
    }
    uint64_t v18 = (void *)*a1;
    *a1 = *a2;

    uint64_t v19 = (void *)a1[1];
    a1[1] = a2[1];

    uint64_t v20 = a2[3];
    a1[2] = a2[2];
    a1[3] = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = v6[7];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = sub_4890(&qword_81188);
    uint64_t v25 = *(void *)(v24 - 8);
    id v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    __dsta = v22;
    LODWORD(v22) = v26(v22, 1, v24);
    int v27 = v26(v23, 1, v24);
    if (v22)
    {
      if (!v27)
      {
        uint64_t v35 = sub_67240();
        uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
        v36(__dsta, v23, v35);
        v36(&__dsta[*(int *)(v24 + 48)], &v23[*(int *)(v24 + 48)], v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dsta, 0, 1, v24);
        goto LABEL_18;
      }
      size_t v28 = *(void *)(*(void *)(sub_4890(&qword_81830) - 8) + 64);
      uint64_t v29 = __dsta;
    }
    else
    {
      if (!v27)
      {
        uint64_t v37 = sub_67240();
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 40);
        v38(__dsta, v23, v37);
        v38(&__dsta[*(int *)(v24 + 48)], &v23[*(int *)(v24 + 48)], v37);
        goto LABEL_18;
      }
      sub_A8C0((uint64_t)__dsta, &qword_81188);
      size_t v28 = *(void *)(*(void *)(sub_4890(&qword_81830) - 8) + 64);
      uint64_t v29 = __dsta;
    }
    memcpy(v29, v23, v28);
LABEL_18:
    uint64_t v39 = v6[8];
    uint64_t v40 = (char *)a1 + v39;
    int v41 = (char *)a2 + v39;
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    uint64_t v42 = v6[10];
    uint64_t v43 = (void *)((char *)a1 + v42);
    uint64_t v44 = (void *)((char *)a2 + v42);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    *uint64_t v43 = v46;
    v43[1] = v45;
    swift_bridgeObjectRelease();
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v17 = sub_4890(&qword_81120);
    memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_19;
  }
  long long v11 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  uint64_t v12 = v6[7];
  __dst = (char *)a1 + v12;
  uint64_t v13 = (char *)a2 + v12;
  uint64_t v14 = sub_4890(&qword_81188);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_4890(&qword_81830);
    memcpy(__dst, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v30 = sub_67240();
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32);
    v31(__dst, v13, v30);
    v31(&__dst[*(int *)(v14 + 48)], &v13[*(int *)(v14 + 48)], v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  uint64_t v32 = v6[8];
  int v33 = (char *)a1 + v32;
  size_t v34 = (char *)a2 + v32;
  *(_DWORD *)int v33 = *(_DWORD *)v34;
  v33[4] = v34[4];
  *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
  *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
  *((unsigned char *)a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
  (*(void (**)(void *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_19:
  uint64_t v47 = a3[9];
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (char *)a2 + v47;
  uint64_t v50 = *(void *)((char *)a1 + v47);
  uint64_t v51 = *(void *)((char *)a2 + v47);
  if (!v50)
  {
    if (v51)
    {
      uint64_t v53 = *((void *)v49 + 1);
      void *v48 = v51;
      v48[1] = v53;
      goto LABEL_26;
    }
LABEL_25:
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    goto LABEL_26;
  }
  if (!v51)
  {
    swift_release();
    goto LABEL_25;
  }
  uint64_t v52 = *((void *)v49 + 1);
  void *v48 = v51;
  v48[1] = v52;
  swift_release();
LABEL_26:
  uint64_t v54 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v55 = (char *)a1 + v54;
  uint64_t v56 = (char *)a2 + v54;
  uint64_t v57 = *(void *)v56;
  LOBYTE(v56) = v56[8];
  uint64_t v58 = *(void *)v55;
  char v59 = v55[8];
  *(void *)uint64_t v55 = v57;
  v55[8] = (char)v56;
  sub_1CE40(v58, v59);
  return a1;
}

uint64_t sub_551C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_551D8);
}

uint64_t sub_551D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_4890(&qword_81120);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v1sub_66CA4(2, 18, 1, 0) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_552A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_552BC);
}

uint64_t sub_552BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_4890(&qword_81120);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = a2;
  }
  return result;
}

uint64_t destroy for FeatureAccessoryView(uint64_t a1)
{
  sub_FFE0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  return sub_1CE40(v2, v3);
}

uint64_t initializeWithCopy for FeatureAccessoryView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  LOBYTE(v2) = *(unsigned char *)(v2 + 32);
  sub_52694(v7, v2);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v2;
  return a1;
}

uint64_t assignWithCopy for FeatureAccessoryView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_FFE0(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  LOBYTE(v2) = *(unsigned char *)(v2 + 32);
  sub_52694(v10, v2);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = v2;
  sub_1CE40(v11, v12);
  return a1;
}

__n128 initializeWithTake for FeatureAccessoryView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FeatureAccessoryView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_FFE0(v5, v6, v7);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  sub_1CE40(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureAccessoryView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureAccessoryView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureAccessoryView()
{
  return &type metadata for FeatureAccessoryView;
}

uint64_t sub_555DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_555E4(uint64_t a1)
{
  sub_FFE0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  return swift_release();
}

uint64_t sub_55628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_retain();
  return a1;
}

uint64_t sub_5568C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_FFE0(v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v10;
  swift_retain();
  swift_release();
  return a1;
}

__n128 sub_55708(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_5571C(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_FFE0(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t sub_55774(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_557BC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 4sub_66CA4(2, 18, 1, 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 4sub_66CA4(2, 18, 1, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for FeatureView()
{
  return sub_5F900();
}

void sub_5581C()
{
  sub_56D48();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_558D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *char v4 = *a2;
    char v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a2[2];
    v4[1] = a2[1];
    void v4[2] = v7;
    uint64_t v8 = *(int *)(a3 + 44);
    char v9 = (void **)((char *)v4 + v8);
    uint64_t v10 = (void **)((char *)a2 + v8);
    swift_retain();
    sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v12 = *((void *)v11 - 1);
      if ((*(unsigned int (**)(void **, uint64_t, int *))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = sub_4890(&qword_81120);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        uint64_t v45 = v12;
        uint64_t v15 = *v10;
        uint64_t v16 = v10[1];
        *char v9 = *v10;
        v9[1] = v16;
        uint64_t v17 = v10[3];
        v9[2] = v10[2];
        v9[3] = v17;
        uint64_t v18 = v11[7];
        __dst = (char *)v9 + v18;
        uint64_t v19 = (char *)v10 + v18;
        id v20 = v15;
        id v21 = v16;
        uint64_t v22 = v19;
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_4890(&qword_81188);
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = sub_4890(&qword_81830);
          memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          uint64_t v26 = sub_67240();
          int v27 = v22;
          uint64_t v43 = v22;
          uint64_t v28 = v26;
          uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
          v44(__dst, v27, v26);
          v44(&__dst[*(int *)(v23 + 48)], &v43[*(int *)(v23 + 48)], v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        }
        uint64_t v29 = v11[8];
        uint64_t v30 = (char *)v9 + v29;
        uint64_t v31 = (char *)v10 + v29;
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        *((unsigned char *)v9 + v11[9]) = *((unsigned char *)v10 + v11[9]);
        uint64_t v32 = v11[10];
        int v33 = (void **)((char *)v9 + v32);
        size_t v34 = (void **)((char *)v10 + v32);
        uint64_t v35 = v34[1];
        *int v33 = *v34;
        v33[1] = v35;
        *((unsigned char *)v9 + v11[11]) = *((unsigned char *)v10 + v11[11]);
        *((unsigned char *)v9 + v11[12]) = *((unsigned char *)v10 + v11[12]);
        uint64_t v36 = *(void (**)(void **, void, uint64_t, int *))(v45 + 56);
        swift_bridgeObjectRetain();
        v36(v9, 0, 1, v11);
      }
    }
    else
    {
      *char v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = *(int *)(a3 + 48);
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = *(void *)v39;
    char v41 = v39[8];
    sub_52694(*(void *)v39, v41);
    *(void *)uint64_t v38 = v40;
    v38[8] = v41;
  }
  return v4;
}

uint64_t sub_55C84(uint64_t a1, uint64_t a2)
{
  swift_release();
  char v4 = (id *)(a1 + *(int *)(a2 + 44));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {

      swift_bridgeObjectRelease();
      uint64_t v6 = (char *)v4 + *(int *)(v5 + 28);
      uint64_t v7 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
      {
        uint64_t v8 = sub_67240();
        char v9 = *(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
        v9(v6, v8);
        v9(&v6[*(int *)(v7 + 48)], v8);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = a1 + *(int *)(a2 + 48);
  uint64_t v11 = *(void *)v10;
  char v12 = *(unsigned char *)(v10 + 8);
  return sub_1CE40(v11, v12);
}

uint64_t sub_55E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = (void **)(a1 + v7);
  char v9 = (void **)(a2 + v7);
  swift_retain();
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v11 = *((void *)v10 - 1);
    if ((*(unsigned int (**)(void **, uint64_t, int *))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_4890(&qword_81120);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v43 = v11;
      uint64_t v13 = *v9;
      uint64_t v14 = v9[1];
      char *v8 = *v9;
      v8[1] = v14;
      uint64_t v15 = v9[3];
      uint64_t v8[2] = v9[2];
      v8[3] = v15;
      uint64_t v16 = v10[7];
      __dst = (char *)v8 + v16;
      uint64_t v17 = (char *)v9 + v16;
      id v18 = v13;
      id v19 = v14;
      id v20 = v17;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_4890(&qword_81188);
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = sub_4890(&qword_81830);
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v24 = sub_67240();
        uint64_t v25 = v20;
        char v41 = v20;
        uint64_t v26 = v24;
        uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
        v42(__dst, v25, v24);
        v42(&__dst[*(int *)(v21 + 48)], &v41[*(int *)(v21 + 48)], v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      uint64_t v27 = v10[8];
      uint64_t v28 = (char *)v8 + v27;
      uint64_t v29 = (char *)v9 + v27;
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      *((unsigned char *)v8 + v10[9]) = *((unsigned char *)v9 + v10[9]);
      uint64_t v30 = v10[10];
      uint64_t v31 = (void **)((char *)v8 + v30);
      uint64_t v32 = (void **)((char *)v9 + v30);
      uint64_t v33 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v33;
      *((unsigned char *)v8 + v10[11]) = *((unsigned char *)v9 + v10[11]);
      *((unsigned char *)v8 + v10[12]) = *((unsigned char *)v9 + v10[12]);
      size_t v34 = *(void (**)(void **, void, uint64_t, int *))(v43 + 56);
      swift_bridgeObjectRetain();
      v34(v8, 0, 1, v10);
    }
  }
  else
  {
    char *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v35 = *(int *)(a3 + 48);
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  uint64_t v38 = *(void *)v37;
  char v39 = *(unsigned char *)(v37 + 8);
  sub_52694(*(void *)v37, v39);
  *(void *)uint64_t v36 = v38;
  *(unsigned char *)(v36 + 8) = v39;
  return a1;
}

uint64_t sub_56194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 44);
    uint64_t v8 = (void **)(a1 + v7);
    char v9 = (void **)(a2 + v7);
    sub_A8C0(a1 + v7, &qword_81180);
    sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v11 = *((void *)v10 - 1);
      if ((*(unsigned int (**)(void **, uint64_t, int *))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_4890(&qword_81120);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        uint64_t v44 = v11;
        uint64_t v13 = *v9;
        char *v8 = *v9;
        uint64_t v14 = v9[1];
        v8[1] = v14;
        uint64_t v8[2] = v9[2];
        v8[3] = v9[3];
        uint64_t v15 = v10[7];
        __dst = (char *)v8 + v15;
        uint64_t v16 = (char *)v9 + v15;
        id v17 = v13;
        id v18 = v14;
        id v19 = v16;
        swift_bridgeObjectRetain();
        uint64_t v20 = sub_4890(&qword_81188);
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = sub_4890(&qword_81830);
          memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          uint64_t v23 = sub_67240();
          uint64_t v24 = v19;
          uint64_t v42 = v19;
          uint64_t v25 = v23;
          uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
          v43(__dst, v24, v23);
          v43(&__dst[*(int *)(v20 + 48)], &v42[*(int *)(v20 + 48)], v25);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
        }
        uint64_t v26 = v10[8];
        uint64_t v27 = (char *)v8 + v26;
        uint64_t v28 = (char *)v9 + v26;
        int v29 = *(_DWORD *)v28;
        v27[4] = v28[4];
        *(_DWORD *)uint64_t v27 = v29;
        *((unsigned char *)v8 + v10[9]) = *((unsigned char *)v9 + v10[9]);
        uint64_t v30 = v10[10];
        uint64_t v31 = (void **)((char *)v8 + v30);
        uint64_t v32 = (void **)((char *)v9 + v30);
        *uint64_t v31 = *v32;
        v31[1] = v32[1];
        *((unsigned char *)v8 + v10[11]) = *((unsigned char *)v9 + v10[11]);
        *((unsigned char *)v8 + v10[12]) = *((unsigned char *)v9 + v10[12]);
        uint64_t v33 = *(void (**)(void **, void, uint64_t, int *))(v44 + 56);
        swift_bridgeObjectRetain();
        v33(v8, 0, 1, v10);
      }
    }
    else
    {
      char *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v34 = *(int *)(a3 + 48);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = *(void *)v36;
  char v38 = *(unsigned char *)(v36 + 8);
  sub_52694(*(void *)v36, v38);
  uint64_t v39 = *(void *)v35;
  char v40 = *(unsigned char *)(v35 + 8);
  *(void *)uint64_t v35 = v37;
  *(unsigned char *)(v35 + 8) = v38;
  sub_1CE40(v39, v40);
  return a1;
}

uint64_t sub_56544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v11 = *((void *)v10 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v8, 1, v10))
    {
      uint64_t v12 = sub_4890(&qword_81120);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      long long v13 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v13;
      uint64_t v14 = v10[7];
      uint64_t v28 = v11;
      __dst = (char *)v7 + v14;
      uint64_t v15 = (char *)v8 + v14;
      uint64_t v16 = sub_4890(&qword_81188);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = sub_4890(&qword_81830);
        memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        uint64_t v26 = sub_67240();
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
        v27(__dst, v15, v26);
        v27(&__dst[*(int *)(v16 + 48)], &v15[*(int *)(v16 + 48)], v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      uint64_t v19 = v10[8];
      uint64_t v20 = (char *)v7 + v19;
      uint64_t v21 = (char *)v8 + v19;
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *((unsigned char *)v7 + v10[9]) = *((unsigned char *)v8 + v10[9]);
      *(_OWORD *)((char *)v7 + v10[10]) = *(_OWORD *)((char *)v8 + v10[10]);
      *((unsigned char *)v7 + v10[11]) = *((unsigned char *)v8 + v10[11]);
      *((unsigned char *)v7 + v10[12]) = *((unsigned char *)v8 + v10[12]);
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v28 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v22 = *(int *)(a3 + 48);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  return a1;
}

uint64_t sub_56868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 44);
    uint64_t v7 = (_OWORD *)(a1 + v6);
    uint64_t v8 = (_OWORD *)(a2 + v6);
    sub_A8C0(a1 + v6, &qword_81180);
    uint64_t v9 = sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v11 = *((void *)v10 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_4890(&qword_81120);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        long long v13 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v13;
        uint64_t v14 = v10[7];
        uint64_t v31 = v11;
        __dst = (char *)v7 + v14;
        uint64_t v15 = (char *)v8 + v14;
        uint64_t v16 = sub_4890(&qword_81188);
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = sub_4890(&qword_81830);
          memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          uint64_t v29 = sub_67240();
          uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
          v30(__dst, v15, v29);
          v30(&__dst[*(int *)(v16 + 48)], &v15[*(int *)(v16 + 48)], v29);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
        }
        uint64_t v19 = v10[8];
        uint64_t v20 = (char *)v7 + v19;
        uint64_t v21 = (char *)v8 + v19;
        *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
        v20[4] = v21[4];
        *((unsigned char *)v7 + v10[9]) = *((unsigned char *)v8 + v10[9]);
        *(_OWORD *)((char *)v7 + v10[10]) = *(_OWORD *)((char *)v8 + v10[10]);
        *((unsigned char *)v7 + v10[11]) = *((unsigned char *)v8 + v10[11]);
        *((unsigned char *)v7 + v10[12]) = *((unsigned char *)v8 + v10[12]);
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v31 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v22 = *(int *)(a3 + 48);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  LOBYTE(v24) = *((unsigned char *)v24 + 8);
  uint64_t v26 = *(void *)v23;
  char v27 = *(unsigned char *)(v23 + 8);
  *(void *)uint64_t v23 = v25;
  *(unsigned char *)(v23 + 8) = (_BYTE)v24;
  sub_1CE40(v26, v27);
  return a1;
}

uint64_t sub_56BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_56BD4);
}

uint64_t sub_56BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_4890(&qword_81D30);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_56C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_56C9C);
}

uint64_t sub_56C9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_4890(&qword_81D30);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_56D48()
{
  if (!qword_81D38)
  {
    sub_4FAC(&qword_81120);
    unint64_t v0 = sub_674E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_81D38);
    }
  }
}

uint64_t sub_56DA4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)a1 = *a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    char v10 = *((unsigned char *)a2 + 32);
    swift_bridgeObjectRetain();
    sub_FBA8(v8, v9, v10);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 32) = v10;
    uint64_t v11 = a2[6];
    *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = a2[5];
    *(void *)(a1 + 48) = v11;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v12 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 8sub_66CA4(2, 18, 1, 0) = a2[10];
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    uint64_t v13 = a2[12];
    uint64_t v14 = a2[13];
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    uint64_t v15 = *(int *)(a3 + 36);
    uint64_t v16 = (void **)(a1 + v15);
    uint64_t v17 = (void **)((char *)a2 + v15);
    *(void *)(a1 + 96) = v13;
    *(void *)(a1 + 104) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v19 = *((void *)v18 - 1);
      if ((*(unsigned int (**)(void **, uint64_t, int *))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = sub_4890(&qword_81120);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v52 = v19;
        uint64_t v22 = *v17;
        uint64_t v23 = v17[1];
        *uint64_t v16 = *v17;
        v16[1] = v23;
        uint64_t v24 = v17[3];
        v16[2] = v17[2];
        v16[3] = v24;
        uint64_t v25 = v18[7];
        __dst = (char *)v16 + v25;
        uint64_t v26 = (char *)v17 + v25;
        id v27 = v22;
        id v28 = v23;
        uint64_t v29 = v26;
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_4890(&qword_81188);
        uint64_t v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          uint64_t v32 = sub_4890(&qword_81830);
          memcpy(__dst, v29, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          uint64_t v33 = sub_67240();
          uint64_t v34 = v29;
          uint64_t v50 = v29;
          uint64_t v35 = v33;
          uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
          v51(__dst, v34, v33);
          v51(&__dst[*(int *)(v30 + 48)], &v50[*(int *)(v30 + 48)], v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
        }
        uint64_t v36 = v18[8];
        uint64_t v37 = (char *)v16 + v36;
        char v38 = (char *)v17 + v36;
        *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
        v37[4] = v38[4];
        *((unsigned char *)v16 + v18[9]) = *((unsigned char *)v17 + v18[9]);
        uint64_t v39 = v18[10];
        char v40 = (void **)((char *)v16 + v39);
        char v41 = (void **)((char *)v17 + v39);
        uint64_t v42 = v41[1];
        *char v40 = *v41;
        v40[1] = v42;
        *((unsigned char *)v16 + v18[11]) = *((unsigned char *)v17 + v18[11]);
        *((unsigned char *)v16 + v18[12]) = *((unsigned char *)v17 + v18[12]);
        uint64_t v43 = *(void (**)(void **, void, uint64_t, int *))(v52 + 56);
        swift_bridgeObjectRetain();
        v43(v16, 0, 1, v18);
      }
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v44 = *(int *)(a3 + 40);
    uint64_t v45 = a1 + v44;
    uint64_t v46 = (uint64_t)a2 + v44;
    uint64_t v47 = *(void *)v46;
    char v48 = *(unsigned char *)(v46 + 8);
    sub_52694(*(void *)v46, v48);
    *(void *)uint64_t v45 = v47;
    *(unsigned char *)(v45 + 8) = v48;
  }
  return a1;
}

uint64_t sub_571C8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_FFE0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v4 = (id *)(a1 + *(int *)(a2 + 36));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {

      swift_bridgeObjectRelease();
      uint64_t v6 = (char *)v4 + *(int *)(v5 + 28);
      uint64_t v7 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
      {
        uint64_t v8 = sub_67240();
        uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
        v9(v6, v8);
        v9(&v6[*(int *)(v7 + 48)], v8);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = a1 + *(int *)(a2 + 40);
  uint64_t v11 = *(void *)v10;
  char v12 = *(unsigned char *)(v10 + 8);
  return sub_1CE40(v11, v12);
}

uint64_t sub_573AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  char v9 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_FBA8(v7, v8, v9);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 8sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = (void **)(a1 + v14);
  uint64_t v16 = (void **)(a2 + v14);
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v18 = *((void *)v17 - 1);
    if ((*(unsigned int (**)(void **, uint64_t, int *))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_4890(&qword_81120);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v50 = v18;
      uint64_t v20 = *v16;
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[3];
      void v15[2] = v16[2];
      v15[3] = v22;
      uint64_t v23 = v17[7];
      __dst = (char *)v15 + v23;
      uint64_t v24 = (char *)v16 + v23;
      id v25 = v20;
      id v26 = v21;
      id v27 = v24;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_4890(&qword_81188);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = sub_4890(&qword_81830);
        memcpy(__dst, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v31 = sub_67240();
        uint64_t v32 = v27;
        char v48 = v27;
        uint64_t v33 = v31;
        uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
        v49(__dst, v32, v31);
        v49(&__dst[*(int *)(v28 + 48)], &v48[*(int *)(v28 + 48)], v33);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
      }
      uint64_t v34 = v17[8];
      uint64_t v35 = (char *)v15 + v34;
      uint64_t v36 = (char *)v16 + v34;
      *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
      void v35[4] = v36[4];
      *((unsigned char *)v15 + v17[9]) = *((unsigned char *)v16 + v17[9]);
      uint64_t v37 = v17[10];
      char v38 = (void **)((char *)v15 + v37);
      uint64_t v39 = (void **)((char *)v16 + v37);
      uint64_t v40 = v39[1];
      *char v38 = *v39;
      v38[1] = v40;
      *((unsigned char *)v15 + v17[11]) = *((unsigned char *)v16 + v17[11]);
      *((unsigned char *)v15 + v17[12]) = *((unsigned char *)v16 + v17[12]);
      char v41 = *(void (**)(void **, void, uint64_t, int *))(v50 + 56);
      swift_bridgeObjectRetain();
      v41(v15, 0, 1, v17);
    }
  }
  else
  {
    *uint64_t v15 = *v16;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v42 = *(int *)(a3 + 40);
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = *(void *)v44;
  char v46 = *(unsigned char *)(v44 + 8);
  sub_52694(*(void *)v44, v46);
  *(void *)uint64_t v43 = v45;
  *(unsigned char *)(v43 + 8) = v46;
  return a1;
}

uint64_t sub_57780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  sub_FBA8(v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  sub_FFE0(v9, v10, v11);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(a3 + 36);
    uint64_t v13 = (void **)(a1 + v12);
    uint64_t v14 = (void **)(a2 + v12);
    sub_A8C0(a1 + v12, &qword_81180);
    sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v16 = *((void *)v15 - 1);
      if ((*(unsigned int (**)(void **, uint64_t, int *))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = sub_4890(&qword_81120);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v49 = v16;
        uint64_t v18 = *v14;
        *uint64_t v13 = *v14;
        uint64_t v19 = v14[1];
        v13[1] = v19;
        void v13[2] = v14[2];
        v13[3] = v14[3];
        uint64_t v20 = v15[7];
        __dst = (char *)v13 + v20;
        uint64_t v21 = (char *)v14 + v20;
        id v22 = v18;
        id v23 = v19;
        uint64_t v24 = v21;
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_4890(&qword_81188);
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = sub_4890(&qword_81830);
          memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          uint64_t v28 = sub_67240();
          uint64_t v29 = v24;
          uint64_t v47 = v24;
          uint64_t v30 = v28;
          char v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
          v48(__dst, v29, v28);
          v48(&__dst[*(int *)(v25 + 48)], &v47[*(int *)(v25 + 48)], v30);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
        }
        uint64_t v31 = v15[8];
        uint64_t v32 = (char *)v13 + v31;
        uint64_t v33 = (char *)v14 + v31;
        int v34 = *(_DWORD *)v33;
        v32[4] = v33[4];
        *(_DWORD *)uint64_t v32 = v34;
        *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
        uint64_t v35 = v15[10];
        uint64_t v36 = (void **)((char *)v13 + v35);
        uint64_t v37 = (void **)((char *)v14 + v35);
        *uint64_t v36 = *v37;
        v36[1] = v37[1];
        *((unsigned char *)v13 + v15[11]) = *((unsigned char *)v14 + v15[11]);
        *((unsigned char *)v13 + v15[12]) = *((unsigned char *)v14 + v15[12]);
        char v38 = *(void (**)(void **, void, uint64_t, int *))(v49 + 56);
        swift_bridgeObjectRetain();
        v38(v13, 0, 1, v15);
      }
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v39 = *(int *)(a3 + 40);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = *(void *)v41;
  char v43 = *(unsigned char *)(v41 + 8);
  sub_52694(*(void *)v41, v43);
  uint64_t v44 = *(void *)v40;
  char v45 = *(unsigned char *)(v40 + 8);
  *(void *)uint64_t v40 = v42;
  *(unsigned char *)(v40 + 8) = v43;
  sub_1CE40(v44, v45);
  return a1;
}

uint64_t sub_57BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  char v11 = (_OWORD *)(a2 + v9);
  *(_OWORD *)(a1 + 96) = v8;
  uint64_t v12 = sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v14 = *((void *)v13 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v11, 1, v13))
    {
      uint64_t v15 = sub_4890(&qword_81120);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      long long v16 = v11[1];
      _OWORD *v10 = *v11;
      v10[1] = v16;
      uint64_t v17 = v13[7];
      uint64_t v31 = v14;
      __dst = (char *)v10 + v17;
      uint64_t v18 = (char *)v11 + v17;
      uint64_t v19 = sub_4890(&qword_81188);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_4890(&qword_81830);
        memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v29 = sub_67240();
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
        v30(__dst, v18, v29);
        v30(&__dst[*(int *)(v19 + 48)], &v18[*(int *)(v19 + 48)], v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      uint64_t v22 = v13[8];
      id v23 = (char *)v10 + v22;
      uint64_t v24 = (char *)v11 + v22;
      *(_DWORD *)id v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      *((unsigned char *)v10 + v13[9]) = *((unsigned char *)v11 + v13[9]);
      *(_OWORD *)((char *)v10 + v13[10]) = *(_OWORD *)((char *)v11 + v13[10]);
      *((unsigned char *)v10 + v13[11]) = *((unsigned char *)v11 + v13[11]);
      *((unsigned char *)v10 + v13[12]) = *((unsigned char *)v11 + v13[12]);
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v31 + 56))(v10, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v25 = *(int *)(a3 + 40);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  return a1;
}

uint64_t sub_57F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  char v7 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v7;
  sub_FFE0(v8, v9, v10);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_66CA4(2, 18, 1, 0) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  if (a1 != a2)
  {
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = (_OWORD *)(a1 + v13);
    uint64_t v15 = (_OWORD *)(a2 + v13);
    sub_A8C0(a1 + v13, &qword_81180);
    uint64_t v16 = sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v18 = *((void *)v17 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48))(v15, 1, v17))
      {
        uint64_t v19 = sub_4890(&qword_81120);
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        long long v20 = v15[1];
        _OWORD *v14 = *v15;
        v14[1] = v20;
        uint64_t v21 = v17[7];
        uint64_t v38 = v18;
        __dst = (char *)v14 + v21;
        uint64_t v22 = (char *)v15 + v21;
        uint64_t v23 = sub_4890(&qword_81188);
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = sub_4890(&qword_81830);
          memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          uint64_t v36 = sub_67240();
          uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32);
          v37(__dst, v22, v36);
          v37(&__dst[*(int *)(v23 + 48)], &v22[*(int *)(v23 + 48)], v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        }
        uint64_t v26 = v17[8];
        uint64_t v27 = (char *)v14 + v26;
        uint64_t v28 = (char *)v15 + v26;
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        *((unsigned char *)v14 + v17[9]) = *((unsigned char *)v15 + v17[9]);
        *(_OWORD *)((char *)v14 + v17[10]) = *(_OWORD *)((char *)v15 + v17[10]);
        *((unsigned char *)v14 + v17[11]) = *((unsigned char *)v15 + v17[11]);
        *((unsigned char *)v14 + v17[12]) = *((unsigned char *)v15 + v17[12]);
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v38 + 56))(v14, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  uint64_t v29 = *(int *)(a3 + 40);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v32 = *v31;
  LOBYTE(v31) = *((unsigned char *)v31 + 8);
  uint64_t v33 = *(void *)v30;
  char v34 = *(unsigned char *)(v30 + 8);
  *(void *)uint64_t v30 = v32;
  *(unsigned char *)(v30 + 8) = (_BYTE)v31;
  sub_1CE40(v33, v34);
  return a1;
}

uint64_t sub_5831C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_58330);
}

uint64_t sub_58330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_4890(&qword_81D30);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_583E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_583F8);
}

uint64_t sub_583F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_4890(&qword_81D30);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_584A4()
{
  sub_56D48();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_5856C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    sub_FBA8(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
    uint64_t v11 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
    uint64_t v12 = *(void *)(a2 + 104);
    *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = (void **)(a1 + v13);
    uint64_t v15 = (void **)(a2 + v13);
    *(void *)(a1 + 104) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v17 = *((void *)v16 - 1);
      if ((*(unsigned int (**)(void **, uint64_t, int *))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = sub_4890(&qword_81120);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        uint64_t v50 = v17;
        long long v20 = *v15;
        uint64_t v21 = v15[1];
        _OWORD *v14 = *v15;
        v14[1] = v21;
        uint64_t v22 = v15[3];
        v14[2] = v15[2];
        v14[3] = v22;
        uint64_t v23 = v16[7];
        __dst = (char *)v14 + v23;
        uint64_t v24 = (char *)v15 + v23;
        id v25 = v20;
        id v26 = v21;
        uint64_t v27 = v24;
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_4890(&qword_81188);
        uint64_t v29 = *(void *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          uint64_t v30 = sub_4890(&qword_81830);
          memcpy(__dst, v27, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          uint64_t v31 = sub_67240();
          uint64_t v32 = v27;
          char v48 = v27;
          uint64_t v33 = v31;
          uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
          v49(__dst, v32, v31);
          v49(&__dst[*(int *)(v28 + 48)], &v48[*(int *)(v28 + 48)], v33);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
        }
        uint64_t v34 = v16[8];
        uint64_t v35 = (char *)v14 + v34;
        uint64_t v36 = (char *)v15 + v34;
        *(_DWORD *)uint64_t v35 = *(_DWORD *)v36;
        void v35[4] = v36[4];
        *((unsigned char *)v14 + v16[9]) = *((unsigned char *)v15 + v16[9]);
        uint64_t v37 = v16[10];
        uint64_t v38 = (void **)((char *)v14 + v37);
        uint64_t v39 = (void **)((char *)v15 + v37);
        uint64_t v40 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v40;
        *((unsigned char *)v14 + v16[11]) = *((unsigned char *)v15 + v16[11]);
        *((unsigned char *)v14 + v16[12]) = *((unsigned char *)v15 + v16[12]);
        uint64_t v41 = *(void (**)(void **, void, uint64_t, int *))(v50 + 56);
        swift_bridgeObjectRetain();
        v41(v14, 0, 1, v16);
      }
    }
    else
    {
      _OWORD *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v42 = *(int *)(a3 + 40);
    uint64_t v43 = a1 + v42;
    uint64_t v44 = a2 + v42;
    uint64_t v45 = *(void *)v44;
    char v46 = *(unsigned char *)(v44 + 8);
    sub_52694(*(void *)v44, v46);
    *(void *)uint64_t v43 = v45;
    *(unsigned char *)(v43 + 8) = v46;
  }
  return a1;
}

uint64_t sub_58994(uint64_t a1, uint64_t a2)
{
  sub_FFE0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v4 = (id *)(a1 + *(int *)(a2 + 36));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {

      swift_bridgeObjectRelease();
      uint64_t v6 = (char *)v4 + *(int *)(v5 + 28);
      uint64_t v7 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
      {
        uint64_t v8 = sub_67240();
        char v9 = *(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
        v9(v6, v8);
        v9(&v6[*(int *)(v7 + 48)], v8);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = a1 + *(int *)(a2 + 40);
  uint64_t v11 = *(void *)v10;
  char v12 = *(unsigned char *)(v10 + 8);
  return sub_1CE40(v11, v12);
}

uint64_t sub_58B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = (void **)(a1 + v12);
  uint64_t v14 = (void **)(a2 + v12);
  *(void *)(a1 + 104) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(void **, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_4890(&qword_81120);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v48 = v16;
      uint64_t v18 = *v14;
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      long long v20 = v14[3];
      void v13[2] = v14[2];
      v13[3] = v20;
      uint64_t v21 = v15[7];
      __dst = (char *)v13 + v21;
      uint64_t v22 = (char *)v14 + v21;
      id v23 = v18;
      id v24 = v19;
      id v25 = v22;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_4890(&qword_81188);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = sub_4890(&qword_81830);
        memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v29 = sub_67240();
        uint64_t v30 = v25;
        char v46 = v25;
        uint64_t v31 = v29;
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
        v47(__dst, v30, v29);
        v47(&__dst[*(int *)(v26 + 48)], &v46[*(int *)(v26 + 48)], v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      uint64_t v32 = v15[8];
      uint64_t v33 = (char *)v13 + v32;
      uint64_t v34 = (char *)v14 + v32;
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
      uint64_t v35 = v15[10];
      uint64_t v36 = (void **)((char *)v13 + v35);
      uint64_t v37 = (void **)((char *)v14 + v35);
      uint64_t v38 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v38;
      *((unsigned char *)v13 + v15[11]) = *((unsigned char *)v14 + v15[11]);
      *((unsigned char *)v13 + v15[12]) = *((unsigned char *)v14 + v15[12]);
      uint64_t v39 = *(void (**)(void **, void, uint64_t, int *))(v48 + 56);
      swift_bridgeObjectRetain();
      v39(v13, 0, 1, v15);
    }
  }
  else
  {
    *uint64_t v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = *(int *)(a3 + 40);
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = *(void *)v42;
  char v44 = *(unsigned char *)(v42 + 8);
  sub_52694(*(void *)v42, v44);
  *(void *)uint64_t v41 = v43;
  *(unsigned char *)(v41 + 8) = v44;
  return a1;
}

uint64_t sub_58F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_FBA8(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_FFE0(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(a3 + 36);
    uint64_t v13 = (void **)(a1 + v12);
    uint64_t v14 = (void **)(a2 + v12);
    sub_A8C0(a1 + v12, &qword_81180);
    sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v16 = *((void *)v15 - 1);
      if ((*(unsigned int (**)(void **, uint64_t, int *))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = sub_4890(&qword_81120);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v49 = v16;
        uint64_t v18 = *v14;
        *uint64_t v13 = *v14;
        uint64_t v19 = v14[1];
        v13[1] = v19;
        void v13[2] = v14[2];
        v13[3] = v14[3];
        uint64_t v20 = v15[7];
        __dst = (char *)v13 + v20;
        uint64_t v21 = (char *)v14 + v20;
        id v22 = v18;
        id v23 = v19;
        id v24 = v21;
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_4890(&qword_81188);
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = sub_4890(&qword_81830);
          memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          uint64_t v28 = sub_67240();
          uint64_t v29 = v24;
          uint64_t v47 = v24;
          uint64_t v30 = v28;
          uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
          v48(__dst, v29, v28);
          v48(&__dst[*(int *)(v25 + 48)], &v47[*(int *)(v25 + 48)], v30);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
        }
        uint64_t v31 = v15[8];
        uint64_t v32 = (char *)v13 + v31;
        uint64_t v33 = (char *)v14 + v31;
        int v34 = *(_DWORD *)v33;
        v32[4] = v33[4];
        *(_DWORD *)uint64_t v32 = v34;
        *((unsigned char *)v13 + v15[9]) = *((unsigned char *)v14 + v15[9]);
        uint64_t v35 = v15[10];
        uint64_t v36 = (void **)((char *)v13 + v35);
        uint64_t v37 = (void **)((char *)v14 + v35);
        *uint64_t v36 = *v37;
        v36[1] = v37[1];
        *((unsigned char *)v13 + v15[11]) = *((unsigned char *)v14 + v15[11]);
        *((unsigned char *)v13 + v15[12]) = *((unsigned char *)v14 + v15[12]);
        uint64_t v38 = *(void (**)(void **, void, uint64_t, int *))(v49 + 56);
        swift_bridgeObjectRetain();
        v38(v13, 0, 1, v15);
      }
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v39 = *(int *)(a3 + 40);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = *(void *)v41;
  char v43 = *(unsigned char *)(v41 + 8);
  sub_52694(*(void *)v41, v43);
  uint64_t v44 = *(void *)v40;
  char v45 = *(unsigned char *)(v40 + 8);
  *(void *)uint64_t v40 = v42;
  *(unsigned char *)(v40 + 8) = v43;
  sub_1CE40(v44, v45);
  return a1;
}

uint64_t sub_593C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 82);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  char v11 = (_OWORD *)(a2 + v9);
  *(_OWORD *)(a1 + 82) = v8;
  uint64_t v12 = sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
    uint64_t v14 = *((void *)v13 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v11, 1, v13))
    {
      uint64_t v15 = sub_4890(&qword_81120);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      long long v16 = v11[1];
      _OWORD *v10 = *v11;
      v10[1] = v16;
      uint64_t v17 = v13[7];
      uint64_t v31 = v14;
      __dst = (char *)v10 + v17;
      uint64_t v18 = (char *)v11 + v17;
      uint64_t v19 = sub_4890(&qword_81188);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_4890(&qword_81830);
        memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v29 = sub_67240();
        uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
        v30(__dst, v18, v29);
        v30(&__dst[*(int *)(v19 + 48)], &v18[*(int *)(v19 + 48)], v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      uint64_t v22 = v13[8];
      id v23 = (char *)v10 + v22;
      id v24 = (char *)v11 + v22;
      *(_DWORD *)id v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      *((unsigned char *)v10 + v13[9]) = *((unsigned char *)v11 + v13[9]);
      *(_OWORD *)((char *)v10 + v13[10]) = *(_OWORD *)((char *)v11 + v13[10]);
      *((unsigned char *)v10 + v13[11]) = *((unsigned char *)v11 + v13[11]);
      *((unsigned char *)v10 + v13[12]) = *((unsigned char *)v11 + v13[12]);
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v31 + 56))(v10, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v25 = *(int *)(a3 + 40);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  return a1;
}

uint64_t sub_59714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_FFE0(v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(a3 + 36);
    uint64_t v13 = (_OWORD *)(a1 + v12);
    uint64_t v14 = (_OWORD *)(a2 + v12);
    sub_A8C0(a1 + v12, &qword_81180);
    uint64_t v15 = sub_4890(&qword_81180);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v16 = (int *)type metadata accessor for FeaturePreviewConfiguration(0);
      uint64_t v17 = *((void *)v16 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v17 + 48))(v14, 1, v16))
      {
        uint64_t v18 = sub_4890(&qword_81120);
        memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        long long v19 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v19;
        uint64_t v20 = v16[7];
        uint64_t v37 = v17;
        __dst = (char *)v13 + v20;
        uint64_t v21 = (char *)v14 + v20;
        uint64_t v22 = sub_4890(&qword_81188);
        uint64_t v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          uint64_t v24 = sub_4890(&qword_81830);
          memcpy(__dst, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          uint64_t v35 = sub_67240();
          uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
          v36(__dst, v21, v35);
          v36(&__dst[*(int *)(v22 + 48)], &v21[*(int *)(v22 + 48)], v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
        }
        uint64_t v25 = v16[8];
        uint64_t v26 = (char *)v13 + v25;
        uint64_t v27 = (char *)v14 + v25;
        *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
        v26[4] = v27[4];
        *((unsigned char *)v13 + v16[9]) = *((unsigned char *)v14 + v16[9]);
        *(_OWORD *)((char *)v13 + v16[10]) = *(_OWORD *)((char *)v14 + v16[10]);
        *((unsigned char *)v13 + v16[11]) = *((unsigned char *)v14 + v16[11]);
        *((unsigned char *)v13 + v16[12]) = *((unsigned char *)v14 + v16[12]);
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v37 + 56))(v13, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v28 = *(int *)(a3 + 40);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = *v30;
  LOBYTE(v3sub_66CA4(2, 18, 1, 0) = *((unsigned char *)v30 + 8);
  uint64_t v32 = *(void *)v29;
  char v33 = *(unsigned char *)(v29 + 8);
  *(void *)uint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = (_BYTE)v30;
  sub_1CE40(v32, v33);
  return a1;
}

uint64_t sub_59AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_59B00);
}

uint64_t sub_59B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_4890(&qword_81D30);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_59BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_59BC8);
}

uint64_t sub_59BC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_4890(&qword_81D30);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_59C74()
{
  sub_56D48();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_59D40()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_59D84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_59DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

__n128 sub_59E70(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_59E84(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t sub_59EE4(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_59F2C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4sub_66CA4(2, 18, 1, 0) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ListRow()
{
  return sub_5F900();
}

ValueMetadata *type metadata accessor for TPContentUnavailableView()
{
  return &type metadata for TPContentUnavailableView;
}

void *initializeBufferWithCopyOfBuffer for _ContentUnavailableView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for _ContentUnavailableView()
{
  return swift_bridgeObjectRelease();
}

void *_s17UITypographyPanel24TPContentUnavailableViewVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for _ContentUnavailableView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _ContentUnavailableView()
{
  return &type metadata for _ContentUnavailableView;
}

void destroy for GlyphShape(id *a1)
{
}

uint64_t initializeWithCopy for GlyphShape(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for GlyphShape(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for GlyphShape(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for GlyphShape()
{
  return &type metadata for GlyphShape;
}

uint64_t sub_5A170()
{
  return sub_5A1B4(&qword_81E70, &qword_81A78, (void (*)(void))sub_5A230);
}

uint64_t sub_5A1B4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_5A230()
{
  unint64_t result = qword_81E78;
  if (!qword_81E78)
  {
    sub_4FAC(&qword_81A68);
    sub_5A2D0();
    sub_AE4C(&qword_80B38, &qword_80B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81E78);
  }
  return result;
}

unint64_t sub_5A2D0()
{
  unint64_t result = qword_81E80;
  if (!qword_81E80)
  {
    sub_4FAC(&qword_81A60);
    sub_AE4C(&qword_81E88, &qword_81A70);
    sub_AE4C(&qword_81E90, &qword_81E98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81E80);
  }
  return result;
}

unint64_t sub_5A398()
{
  unint64_t result = qword_81EA0;
  if (!qword_81EA0)
  {
    sub_4FAC(&qword_81EA8);
    sub_AE4C(&qword_81AA8, &qword_81A98);
    sub_4FAC(&qword_81A80);
    sub_51BCC();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81EA0);
  }
  return result;
}

uint64_t sub_5A474()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_5A52C()
{
  return swift_getWitnessTable();
}

uint64_t sub_5A5A4()
{
  return swift_getWitnessTable();
}

unint64_t sub_5A980()
{
  unint64_t result = qword_81EC0;
  if (!qword_81EC0)
  {
    sub_4FAC(&qword_81EC8);
    sub_4FAC(&qword_81C88);
    sub_526A0();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81EC0);
  }
  return result;
}

uint64_t sub_5AA28(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_5AA30()
{
  return swift_getWitnessTable();
}

uint64_t sub_5AC98()
{
  return sub_AE4C(&qword_81ED0, &qword_81ED8);
}

uint64_t sub_5ACD4()
{
  return sub_AE4C(&qword_81EE0, &qword_81EE8);
}

uint64_t sub_5AD10()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_5AE8C()
{
  unint64_t result = qword_81EF0;
  if (!qword_81EF0)
  {
    sub_4FAC(&qword_81D10);
    sub_5A1B4(&qword_81EF8, &qword_81D00, (void (*)(void))sub_5AF34);
    sub_52AD4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81EF0);
  }
  return result;
}

unint64_t sub_5AF34()
{
  unint64_t result = qword_81F00;
  if (!qword_81F00)
  {
    sub_4FAC(&qword_81CF8);
    sub_5BF18(&qword_87530);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81F00);
  }
  return result;
}

char *sub_5AFCC(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    *((_WORD *)a1 + 4) = *((_WORD *)a2 + 4);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    uint64_t v6 = *(int *)(a3 + 32);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = (char **)((char *)a2 + v6);
    uint64_t v9 = v5;
    sub_4890(&qword_81D08);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_675C0();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v7, v8, v10);
    }
    else
    {
      *(void *)uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_5B0F4(id *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 32);
  sub_4890(&qword_81D08);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_675C0();
    uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_5B1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (void *)(a2 + v5);
  id v8 = v4;
  sub_4890(&qword_81D08);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_675C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v6, v7, v9);
  }
  else
  {
    *uint64_t v6 = *v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_5B284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    sub_A8C0(a1 + v9, &qword_81D08);
    sub_4890(&qword_81D08);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_675C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      void *v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_5B38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = sub_4890(&qword_81D08);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_675C0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_5B470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 32);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_A8C0(a1 + v7, &qword_81D08);
    uint64_t v10 = sub_4890(&qword_81D08);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_675C0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_5B584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5B598);
}

uint64_t sub_5B598(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_4890(&qword_81F08);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_5B64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5B660);
}

void *sub_5B660(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_4890(&qword_81F08);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_5B70C()
{
  sub_5B7F4(319, (unint64_t *)&unk_81F68, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_5B7F4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_5B858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_5B860(uint64_t a1)
{
  swift_release();
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);
  return sub_1CE40(v2, v3);
}

uint64_t sub_5B8B0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v6 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *v6;
  }
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  sub_52694(v8, v9);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  return a1;
}

uint64_t sub_5B940(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = v7;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  sub_52694(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  sub_1CE40(v10, v11);
  return a1;
}

__n128 sub_5BA18(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_5BA34(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 4sub_66CA4(2, 18, 1, 0) = *(unsigned char *)(a2 + 40);
  char v7 = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 48);
  char v9 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v7;
  sub_1CE40(v8, v9);
  return a1;
}

uint64_t sub_5BAEC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_5BB34(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_66CA4(2, 18, 1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_5BB84()
{
  return swift_getWitnessTable();
}

uint64_t sub_5BDFC()
{
  return sub_5F128(&qword_81670, type metadata accessor for CTFont);
}

uint64_t sub_5BE44()
{
  return sub_5F128(&qword_81678, type metadata accessor for CTFont);
}

unint64_t sub_5BE90()
{
  unint64_t result = qword_81FB0;
  if (!qword_81FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81FB0);
  }
  return result;
}

uint64_t sub_5BEE4()
{
  return sub_5BF18(qword_877D0);
}

uint64_t sub_5BF18(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _GlyphShape(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5BF5C()
{
  return sub_5BF18(&qword_87530);
}

uint64_t sub_5BF90()
{
  return sub_AE4C(&qword_81FB8, &qword_81FC0);
}

uint64_t sub_5BFCC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_5C010@<X0>(uint64_t a1@<X8>)
{
  return sub_4B710(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_5C020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_67730();
  *a1 = result;
  return result;
}

uint64_t sub_5C04C()
{
  return sub_67740();
}

unint64_t sub_5C078()
{
  unint64_t result = qword_81FD8;
  if (!qword_81FD8)
  {
    sub_4FAC(&qword_81FC8);
    sub_5C118();
    sub_AE4C(&qword_80B38, &qword_80B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81FD8);
  }
  return result;
}

unint64_t sub_5C118()
{
  unint64_t result = qword_81FE0;
  if (!qword_81FE0)
  {
    sub_4FAC(&qword_81FE8);
    sub_AE4C(&qword_81B88, &qword_81B90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81FE0);
  }
  return result;
}

uint64_t sub_5C1B8@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_676F0();
  *a1 = v3;
  return result;
}

uint64_t sub_5C1E4()
{
  return sub_67700();
}

uint64_t sub_5C20C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_676B0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_5C23C()
{
  return sub_676C0();
}

uint64_t sub_5C264@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_67750();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_5C298()
{
  return sub_67760();
}

void sub_5C2C8(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v9 = sub_675C0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v23 - v14;
  sub_678E0();
  if ((sub_678C0() & 1) == 0
    || (type metadata accessor for _GlyphShape(0),
        sub_4C61C((uint64_t)v15),
        (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for LayoutDirection.leftToRight(_:), v9), char v16 = sub_675B0(), v17 = *(void (**)(char *, uint64_t))(v10 + 8), v17(v13, v9), v17(v15, v9), (v16 & 1) == 0))
  {
    sub_678F0();
    if ((sub_678C0() & 1) == 0
      || (type metadata accessor for _GlyphShape(0),
          sub_4C61C((uint64_t)v15),
          (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for LayoutDirection.rightToLeft(_:), v9), char v18 = sub_675B0(), v19 = *(void (**)(char *, uint64_t))(v10 + 8), v19(v13, v9), v19(v15, v9), (v18 & 1) == 0))
    {
      sub_678F0();
      if ((sub_678C0() & 1) == 0
        || (type metadata accessor for _GlyphShape(0),
            sub_4C61C((uint64_t)v15),
            (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for LayoutDirection.leftToRight(_:), v9), char v20 = sub_675B0(), v21 = *(void (**)(char *, uint64_t))(v10 + 8), v21(v13, v9), v21(v15, v9), (v20 & 1) == 0))
      {
        sub_678E0();
        if (sub_678C0())
        {
          type metadata accessor for _GlyphShape(0);
          sub_4C61C((uint64_t)v15);
          (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for LayoutDirection.rightToLeft(_:), v9);
          sub_675B0();
          uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
          v22(v13, v9);
          v22(v15, v9);
        }
      }
      v24.origin.CGFloat x = a2;
      v24.origin.CGFloat y = a3;
      v24.size.CGFloat width = a4;
      v24.size.CGFloat height = a5;
      CGRectGetWidth(v24);
    }
  }
}

unint64_t sub_5C67C()
{
  unint64_t result = qword_81FF0;
  if (!qword_81FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_81FF0);
  }
  return result;
}

uint64_t sub_5C6D4()
{
  uint64_t v1 = type metadata accessor for FeatureOptionView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_FFE0(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(unsigned char *)(v0 + v3 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (id *)(v0 + v3 + *(int *)(v1 + 36));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {

      swift_bridgeObjectRelease();
      char v7 = (char *)v5 + *(int *)(v6 + 28);
      uint64_t v8 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
      {
        uint64_t v10 = sub_67240();
        uint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8);
        v11(v7, v10);
        v11(&v7[*(int *)(v8 + 48)], v10);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  sub_1CE40(*(void *)(v0 + v3 + *(int *)(v1 + 40)), *(unsigned char *)(v0 + v3 + *(int *)(v1 + 40) + 8));
  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_5C934()
{
  uint64_t v1 = type metadata accessor for FeatureToggleView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  sub_FFE0(*(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = (id *)(v0 + v3 + *(int *)(v1 + 36));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
    {

      swift_bridgeObjectRelease();
      uint64_t v8 = (char *)v6 + *(int *)(v7 + 28);
      uint64_t v9 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_67240();
        uint64_t v12 = *(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8);
        v12(v8, v11);
        v12(&v8[*(int *)(v9 + 48)], v11);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  sub_1CE40(*(void *)(v5 + *(int *)(v1 + 40)), *(unsigned char *)(v5 + *(int *)(v1 + 40) + 8));
  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_5CB98()
{
  return sub_67F30();
}

uint64_t sub_5CBF4()
{
  uint64_t v1 = type metadata accessor for FeatureOptionView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_FFE0(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(unsigned char *)(v0 + v3 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (id *)(v0 + v3 + *(int *)(v1 + 36));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {

      swift_bridgeObjectRelease();
      uint64_t v7 = (char *)v5 + *(int *)(v6 + 28);
      uint64_t v8 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
      {
        uint64_t v11 = sub_67240();
        uint64_t v12 = *(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8);
        v12(v7, v11);
        v12(&v7[*(int *)(v8 + 48)], v11);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  unint64_t v9 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1CE40(*(void *)(v0 + v3 + *(int *)(v1 + 40)), *(unsigned char *)(v0 + v3 + *(int *)(v1 + 40) + 8));
  sub_FFE0(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8), *(unsigned char *)(v0 + v9 + 16));
  sub_1CE40(*(void *)(v0 + v9 + 24), *(unsigned char *)(v0 + v9 + 32));
  return _swift_deallocObject(v0, v9 + 33, v2 | 7);
}

uint64_t sub_5CE78()
{
  return sub_5D314(type metadata accessor for FeatureOptionView, (uint64_t (*)(unint64_t, uint64_t))sub_4FAA0);
}

uint64_t sub_5CEA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_5CED4(uint64_t a1)
{
  return a1;
}

uint64_t sub_5CF28(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_5CF38(uint64_t a1)
{
  return a1;
}

uint64_t sub_5CF68(uint64_t a1)
{
  return a1;
}

unint64_t sub_5CFBC()
{
  unint64_t result = qword_82020;
  if (!qword_82020)
  {
    sub_4FAC(&qword_82018);
    sub_AE4C(&qword_80CB0, &qword_80CB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82020);
  }
  return result;
}

uint64_t sub_5D05C()
{
  uint64_t v1 = type metadata accessor for FeatureToggleView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  sub_FFE0(*(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = (id *)(v0 + v3 + *(int *)(v1 + 36));
  sub_4890(&qword_81180);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for FeaturePreviewConfiguration(0);
    if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
    {

      swift_bridgeObjectRelease();
      uint64_t v8 = (char *)v6 + *(int *)(v7 + 28);
      uint64_t v9 = sub_4890(&qword_81188);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
      {
        uint64_t v12 = sub_67240();
        uint64_t v13 = *(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8);
        v13(v8, v12);
        v13(&v8[*(int *)(v9 + 48)], v12);
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  unint64_t v10 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1CE40(*(void *)(v5 + *(int *)(v1 + 40)), *(unsigned char *)(v5 + *(int *)(v1 + 40) + 8));
  sub_FFE0(*(void *)(v0 + v10), *(void *)(v0 + v10 + 8), *(unsigned char *)(v0 + v10 + 16));
  sub_1CE40(*(void *)(v0 + v10 + 24), *(unsigned char *)(v0 + v10 + 32));
  return _swift_deallocObject(v0, v10 + 33, v2 | 7);
}

uint64_t sub_5D2E8()
{
  return sub_5D314(type metadata accessor for FeatureToggleView, (uint64_t (*)(unint64_t, uint64_t))sub_4E8A8);
}

uint64_t sub_5D314(uint64_t (*a1)(void), uint64_t (*a2)(unint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a2(v2 + v4, v5);
}

unint64_t sub_5D3CC()
{
  unint64_t result = qword_82060;
  if (!qword_82060)
  {
    sub_4FAC(&qword_82040);
    sub_4FAC(&qword_82030);
    sub_677E0();
    sub_AE4C(&qword_82050, &qword_82030);
    sub_5F128(&qword_82058, (void (*)(uint64_t))&type metadata accessor for SwitchToggleStyle);
    swift_getOpaqueTypeConformance2();
    sub_52AD4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82060);
  }
  return result;
}

uint64_t sub_5D4F0@<X0>(uint64_t a1@<X8>)
{
  return sub_4DBD0(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_5D4FC()
{
  unint64_t result = qword_82070;
  if (!qword_82070)
  {
    sub_4FAC(&qword_81CB8);
    sub_AE4C(&qword_82078, &qword_81B98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82070);
  }
  return result;
}

uint64_t sub_5D594()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_5D5CC@<X0>(char *a1@<X8>)
{
  return sub_49254(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

uint64_t sub_5D5DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for FeaturePreviewConfiguration(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v6 = *(void *)(type metadata accessor for FeaturePreviewView() - 8);
  int v7 = *(_DWORD *)(v1 + v5);
  uint64_t v8 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return sub_48A18(v1 + v4, v7, v8, a1);
}

uint64_t sub_5D6E0()
{
  uint64_t v1 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v6 = type metadata accessor for FeaturePreviewView();
  uint64_t v24 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v7 = (v5 + v24 + 4) & ~v24;
  uint64_t v23 = *(void *)(*(void *)(v6 - 8) + 64);

  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 28);
  uint64_t v9 = sub_4890(&qword_81188);
  unint64_t v10 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
  char v20 = *v10;
  if (!(*v10)(v8, 1, v9))
  {
    uint64_t v21 = v7;
    uint64_t v11 = sub_67240();
    uint64_t v19 = v3;
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v8, v11);
    uint64_t v13 = v11;
    uint64_t v7 = v21;
    v12(v8 + *(int *)(v9 + 48), v13);
    uint64_t v3 = v19;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = (id *)(v0 + v7);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v7, 1, v1))
  {
    uint64_t v22 = v7;

    swift_bridgeObjectRelease();
    uint64_t v15 = (char *)v14 + *(int *)(v1 + 28);
    if (!v20((uint64_t)v15, 1, v9))
    {
      uint64_t v16 = sub_67240();
      uint64_t v17 = *(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8);
      v17(v15, v16);
      v17(&v15[*(int *)(v9 + 48)], v16);
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v22;
  }
  if (*(id *)((char *)v14 + *(int *)(v6 + 36))) {
    swift_release();
  }
  sub_1CE40(*(uint64_t *)((char *)v14 + *(int *)(v6 + 44)), *((unsigned char *)v14 + *(int *)(v6 + 44) + 8));
  return _swift_deallocObject(v0, v7 + v23, v3 | v24 | 7);
}

uint64_t sub_5DA14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for FeaturePreviewConfiguration(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 1) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v6 = *(void *)(type metadata accessor for FeaturePreviewView() - 8);
  unsigned int v7 = *(_DWORD *)(v1 + v5);
  uint64_t v8 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return sub_48CC8(v1 + v4, v7, v8, a1);
}

uint64_t sub_5DB18@<X0>(uint64_t a1@<X8>)
{
  return sub_5DEA0((void (*)(void *__return_ptr, int *, uint64_t, uint64_t, uint64_t))sub_48514, a1);
}

uint64_t sub_5DB34()
{
  uint64_t v1 = sub_67240();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v22 + 32) & ~v22;
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v7 = (v3 + v4 + v21) & ~v21;
  uint64_t v8 = v7 + *(void *)(v6 + 64);
  uint64_t v9 = type metadata accessor for FeaturePreviewView();
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v20 = v9;
  uint64_t v10 = (v8 + v19) & ~v19;
  uint64_t v18 = *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v17(v0 + v3, v1);

  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + v7 + *(int *)(v5 + 28);
  uint64_t v12 = sub_4890(&qword_81188);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  if (!v13(v11, 1, v12))
  {
    v17(v11, v1);
    v17(v11 + *(int *)(v12 + 48), v1);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = (id *)(v0 + v10);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v10, 1, v5))
  {

    swift_bridgeObjectRelease();
    uint64_t v15 = (char *)v14 + *(int *)(v5 + 28);
    if (!v13((uint64_t)v15, 1, v12))
    {
      v17((uint64_t)v15, v1);
      v17((uint64_t)&v15[*(int *)(v12 + 48)], v1);
    }
    swift_bridgeObjectRelease();
  }
  if (*(id *)((char *)v14 + *(int *)(v20 + 36))) {
    swift_release();
  }
  sub_1CE40(*(uint64_t *)((char *)v14 + *(int *)(v20 + 44)), *((unsigned char *)v14 + *(int *)(v20 + 44) + 8));
  return _swift_deallocObject(v0, v10 + v18, v22 | v21 | v19 | 7);
}

uint64_t sub_5DE88@<X0>(uint64_t a1@<X8>)
{
  return sub_5DEA0((void (*)(void *__return_ptr, int *, uint64_t, uint64_t, uint64_t))sub_488CC, a1);
}

uint64_t sub_5DEA0@<X0>(void (*a1)(void *__return_ptr, int *, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(sub_67240() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for FeaturePreviewConfiguration(0) - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = v11 + *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(type metadata accessor for FeaturePreviewView() - 8);
  return sub_48660(v2 + v8, v2 + v11, v2 + ((v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v6, v5, a1, a2);
}

uint64_t sub_5DFF0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_5E004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for FeaturePreviewConfiguration(0) - 8);
  uint64_t v4 = *(void **)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
  swift_bridgeObjectRetain();
  id v5 = v4;
  sub_67B80();
  uint64_t v6 = sub_67BD0();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v10 & 1;
  *(void *)(a1 + 24) = v12;
  return result;
}

uint64_t sub_5E0E4()
{
  uint64_t v1 = type metadata accessor for FeaturePreviewConfiguration(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 28);
  uint64_t v6 = sub_4890(&qword_81188);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v11 = v4;
    uint64_t v7 = sub_67240();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v5, v7);
    uint64_t v9 = v7;
    uint64_t v4 = v11;
    v8(v5 + *(int *)(v6 + 48), v9);
  }
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_5E288@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for FeaturePreviewConfiguration(0) - 8);
  uint64_t v4 = *(void **)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + 8);
  swift_bridgeObjectRetain();
  id v5 = v4;
  sub_67B80();
  uint64_t v6 = sub_67BD0();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v10 & 1;
  *(void *)(a1 + 24) = v12;
  return result;
}

uint64_t sub_5E368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, void (*a10)(uint64_t, uint64_t))
{
  swift_retain();
  if (a9) {
    sub_5DFF0(a4);
  }
  else {
    a10(a4, a5);
  }
  return sub_52694(a7, a8 & 1);
}

uint64_t sub_5E3E8@<X0>(uint64_t a1@<X8>)
{
  return sub_493FC(*(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(uint64_t (**)@<X0>(char *@<X8>))(v1 + 88), *(uint64_t (**)@<X0>(char *@<X8>))(v1 + 96), *(void *)(v1 + 104), *(void **)(v1 + 16), *(void *)(v1 + 24), a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_5E428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, void (*a10)(uint64_t, uint64_t))
{
  swift_release();
  if (a9) {
    sub_5260C(a4);
  }
  else {
    a10(a4, a5);
  }
  return sub_1CE40(a7, a8 & 1);
}

uint64_t sub_5E4AC@<X0>(char *a1@<X8>)
{
  return sub_5E818((uint64_t)sub_5E90C, (void (*)(uint64_t))&static Alignment.center.getter, a1);
}

uint64_t sub_5E4DC@<X0>(char *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = *(void *)(type metadata accessor for FeaturePreviewView() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_4A100((uint64_t)v1 + v10, *(void *)((char *)v1 + v11), *(void *)((char *)v1 + v11 + 8), v3, v4, v5, v6, v7, a1, v8);
}

uint64_t sub_5E5C0()
{
  uint64_t v1 = type metadata accessor for FeaturePreviewView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = (id *)(v0 + v3);
  uint64_t v6 = type metadata accessor for FeaturePreviewConfiguration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)v5 + *(int *)(v6 + 28);
    uint64_t v8 = sub_4890(&qword_81188);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
    {
      uint64_t v9 = sub_67240();
      unint64_t v11 = *(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8);
      v11(v7, v9);
      v11(&v7[*(int *)(v8 + 48)], v9);
    }
    swift_bridgeObjectRelease();
  }
  if (*(id *)((char *)v5 + *(int *)(v1 + 36))) {
    swift_release();
  }
  sub_1CE40(*(uint64_t *)((char *)v5 + *(int *)(v1 + 44)), *((unsigned char *)v5 + *(int *)(v1 + 44) + 8));
  swift_release();
  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_5E7EC@<X0>(char *a1@<X8>)
{
  return sub_5E818((uint64_t)sub_5E90C, (void (*)(uint64_t))&static Alignment.leading.getter, a1);
}

uint64_t sub_5E818@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t v7 = v3[2];
  uint64_t v8 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  uint64_t v11 = v3[6];
  uint64_t v12 = v3[7];
  uint64_t v13 = *(void *)(type metadata accessor for FeaturePreviewView() - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = (*(void *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_4A9E8((uint64_t)v3 + v14, *(void *)((char *)v3 + v15), *(void *)((char *)v3 + v15 + 8), v7, v8, v9, v10, v11, a3, v12, a1, a2);
}

uint64_t sub_5E910(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
  {
    sub_5CF28(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_5E954(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_4FAC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5E9BC(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
  {
    sub_52808(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_5EA00@<X0>(uint64_t a1@<X8>)
{
  return sub_4A468(*(void *)(v1 + 64), *(void (**)(uint64_t))(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 32), *(void *)(v1 + 56), a1);
}

uint64_t sub_5EA14@<X0>(uint64_t a1@<X8>)
{
  return sub_4A468(*(void *)(v1 + 64), *(void (**)(uint64_t))(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 24), *(void *)(v1 + 48), a1);
}

uint64_t sub_5EA3C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_5EA74@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_44A64(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_5EA7C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_5EABC()
{
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    uint64_t v1 = sub_60714();
    sub_25210(v1, v2);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    type metadata accessor for TypographyPanelViewModel();
    sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
    uint64_t result = sub_67650();
    __break(1u);
  }
  return result;
}

unint64_t sub_5EB7C()
{
  unint64_t result = qword_820E8;
  if (!qword_820E8)
  {
    sub_4FAC(&qword_820A8);
    sub_5EBF8();
    sub_50C4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_820E8);
  }
  return result;
}

unint64_t sub_5EBF8()
{
  unint64_t result = qword_820F0;
  if (!qword_820F0)
  {
    sub_4FAC(&qword_820B8);
    sub_AE4C(&qword_820F8, &qword_820B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_820F0);
  }
  return result;
}

uint64_t sub_5EC98()
{
  if (!*(void *)(v0 + 16)) {
    goto LABEL_50;
  }
  swift_retain();
  unint64_t v1 = sub_24CEC();
  swift_release();
  if (v1 >> 62) {
    goto LABEL_39;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  swift_retain();
  if (!v2)
  {
LABEL_35:
    swift_release();
    return swift_bridgeObjectRelease();
  }
LABEL_4:
  uint64_t v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v4 = (id)sub_68560();
    }
    else {
      id v4 = *(id *)(v1 + 8 * v3 + 32);
    }
    uint64_t v5 = v4;
    uint64_t v6 = sub_60714();
    uint64_t v8 = v7;
    swift_retain();
    uint64_t v9 = (void *)sub_24DB4();
    swift_release();
    if (!v9)
    {
      swift_bridgeObjectRelease();

      uint64_t v14 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_38;
      }
      goto LABEL_16;
    }
    uint64_t v10 = sub_60714();
    uint64_t v12 = v11;

    if (v6 == v10 && v8 == v12) {
      break;
    }
    char v13 = sub_68790();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v13) {
      goto LABEL_19;
    }
    uint64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v2 = sub_68630();
      swift_bridgeObjectRelease();
      if (!v2) {
        goto LABEL_35;
      }
      goto LABEL_4;
    }
LABEL_16:
    ++v3;
    if (v14 == v2) {
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease_n();

LABEL_19:
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_24CEC();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  swift_retain();
  unint64_t v16 = sub_24CEC();
  if (v16 >> 62)
  {
LABEL_42:
    uint64_t v17 = sub_68630();
    swift_bridgeObjectRelease();
    if ((v17 & 0x8000000000000000) == 0) {
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
LABEL_22:
  swift_retain();
  unint64_t v18 = sub_24CEC();
  swift_release();
  if ((v15 & 0x8000000000000000) == 0 && v15 < v17)
  {
    if ((v18 & 0xC000000000000001) == 0)
    {
      if ((unint64_t)v15 < *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8)))
      {
        uint64_t v19 = *(void **)(v18 + 8 * v15 + 32);
        goto LABEL_32;
      }
      __break(1u);
    }
LABEL_48:
    id v21 = (id)sub_68560();
LABEL_33:
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_60714();
    uint64_t v20 = v24;

LABEL_34:
    sub_25210(v23, v20);
    goto LABEL_35;
  }
  if (!(v18 >> 62))
  {
    uint64_t v20 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
    if (v20) {
      goto LABEL_29;
    }
LABEL_46:
    swift_bridgeObjectRelease();
    uint64_t v23 = 0;
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_68630();
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_46;
  }
LABEL_29:
  if ((v18 & 0xC000000000000001) != 0) {
    goto LABEL_48;
  }
  if (*(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8)))
  {
    uint64_t v19 = *(void **)(v18 + 32);
LABEL_32:
    id v21 = v19;
    goto LABEL_33;
  }
  __break(1u);
LABEL_50:
  type metadata accessor for TypographyPanelViewModel();
  sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  uint64_t result = sub_67650();
  __break(1u);
  return result;
}

unint64_t sub_5F064()
{
  unint64_t result = qword_82108;
  if (!qword_82108)
  {
    sub_4FAC(&qword_820D0);
    sub_AE4C(&qword_82110, &qword_820C8);
    sub_AE4C(&qword_80B38, &qword_80B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82108);
  }
  return result;
}

uint64_t sub_5F128(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5F170()
{
  if (!*(void *)(v0 + 16)) {
    goto LABEL_51;
  }
  swift_retain();
  unint64_t v1 = sub_24CEC();
  swift_release();
  if (v1 >> 62) {
    goto LABEL_40;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFFF8));
  swift_retain();
  if (!v2)
  {
LABEL_36:
    swift_release();
    return swift_bridgeObjectRelease();
  }
LABEL_4:
  uint64_t v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v4 = (id)sub_68560();
    }
    else {
      id v4 = *(id *)(v1 + 8 * v3 + 32);
    }
    uint64_t v5 = v4;
    uint64_t v6 = sub_60714();
    uint64_t v8 = v7;
    swift_retain();
    uint64_t v9 = (void *)sub_24DB4();
    swift_release();
    if (!v9)
    {
      swift_bridgeObjectRelease();

      uint64_t v14 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        goto LABEL_39;
      }
      goto LABEL_16;
    }
    uint64_t v10 = sub_60714();
    uint64_t v12 = v11;

    if (v6 == v10 && v8 == v12) {
      break;
    }
    char v13 = sub_68790();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v13) {
      goto LABEL_19;
    }
    uint64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v2 = sub_68630();
      swift_bridgeObjectRelease();
      if (!v2) {
        goto LABEL_36;
      }
      goto LABEL_4;
    }
LABEL_16:
    ++v3;
    if (v14 == v2) {
      goto LABEL_36;
    }
  }
  swift_bridgeObjectRelease_n();

LABEL_19:
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_24CEC();
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  unint64_t v15 = sub_24CEC();
  if (v15 >> 62)
  {
    uint64_t v16 = sub_68630();
    swift_bridgeObjectRelease();
    if ((v16 & 0x8000000000000000) == 0) {
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v16 = *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
LABEL_21:
  swift_retain();
  unint64_t v17 = sub_24CEC();
  swift_release();
  if (v3 >= 1 && v3 <= v16)
  {
    if ((v17 & 0xC000000000000001) == 0)
    {
      if ((unint64_t)(v3 - 1) < *(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8)))
      {
        unint64_t v18 = *(void **)(v17 + 8 * v3 + 24);
        goto LABEL_33;
      }
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
LABEL_44:
    id v21 = (id)sub_68560();
LABEL_34:
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v23 = sub_60714();
    uint64_t v19 = v24;

LABEL_35:
    sub_25210(v23, v19);
    goto LABEL_36;
  }
  if (!(v17 >> 62))
  {
    uint64_t v19 = *(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8));
    if (v19) {
      goto LABEL_28;
    }
LABEL_46:
    swift_bridgeObjectRelease();
    uint64_t v23 = 0;
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_68630();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_46;
  }
LABEL_28:
  unint64_t v20 = v19 - 1;
  if (__OFSUB__(v19, 1)) {
    goto LABEL_48;
  }
  if ((v17 & 0xC000000000000001) != 0) {
    goto LABEL_44;
  }
  if ((v20 & 0x8000000000000000) != 0) {
    goto LABEL_49;
  }
  if (v20 < *(void *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8)))
  {
    unint64_t v18 = *(void **)(v17 + 8 * v20 + 32);
LABEL_33:
    id v21 = v18;
    goto LABEL_34;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  type metadata accessor for TypographyPanelViewModel();
  sub_5F128(&qword_80D08, (void (*)(uint64_t))type metadata accessor for TypographyPanelViewModel);
  uint64_t result = sub_67650();
  __break(1u);
  return result;
}

unint64_t sub_5F548()
{
  unint64_t result = qword_82148;
  if (!qword_82148)
  {
    sub_4FAC(&qword_82150);
    sub_5F5E8();
    sub_AE4C(&qword_81C70, &qword_81C68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82148);
  }
  return result;
}

unint64_t sub_5F5E8()
{
  unint64_t result = qword_82158;
  if (!qword_82158)
  {
    sub_4FAC(&qword_82160);
    sub_5F688();
    sub_AE4C(&qword_80FA8, &qword_80FB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82158);
  }
  return result;
}

unint64_t sub_5F688()
{
  unint64_t result = qword_82168;
  if (!qword_82168)
  {
    sub_4FAC(&qword_82170);
    sub_5F728();
    sub_AE4C(&qword_81C60, &qword_81C58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82168);
  }
  return result;
}

unint64_t sub_5F728()
{
  unint64_t result = qword_82178;
  if (!qword_82178)
  {
    sub_4FAC(&qword_82180);
    sub_5F7C8();
    sub_AE4C(&qword_81B88, &qword_81B90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82178);
  }
  return result;
}

unint64_t sub_5F7C8()
{
  unint64_t result = qword_82188;
  if (!qword_82188)
  {
    sub_4FAC(&qword_82190);
    sub_AE4C(&qword_81E90, &qword_81E98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_82188);
  }
  return result;
}

uint64_t sub_5F868(uint64_t a1)
{
  return a1;
}

uint64_t sub_5F900()
{
  return swift_getGenericMetadata();
}

uint64_t sub_5F930()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_5FBAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = result;
  if (a3)
  {
    a4[1] = a2;
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = &type metadata for String;
  }
  else
  {
    uint64_t v6 = &type metadata for Int;
  }
  a4[3] = (uint64_t)v6;
  *a4 = v4;
  return result;
}

uint64_t sub_5FBFC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    swift_bridgeObjectRetain();
  }
  int v3 = swift_dynamicCast();
  uint64_t v4 = v6;
  if (!v3) {
    return 0;
  }
  return v4;
}

uint64_t sub_5FC88(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    swift_bridgeObjectRetain();
  }
  return swift_dynamicCast();
}

uint64_t sub_5FD00(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    swift_bridgeObjectRetain();
  }
  return swift_dynamicCast() ^ 1;
}

uint64_t sub_5FD7C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_5FDD4(a1, a2, a3, (uint64_t (*)(void))sub_325CC, (uint64_t (*)(void))sub_326C4);
}

uint64_t sub_5FDA8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_5FDD4(a1, a2, a3, (uint64_t (*)(void))sub_32648, (uint64_t (*)(void))sub_32740);
}

uint64_t sub_5FDD4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  if (a3) {
    swift_bridgeObjectRetain();
  }
  if (swift_dynamicCast()) {
    uint64_t v7 = (uint64_t *)a4();
  }
  else {
    uint64_t v7 = (uint64_t *)a5();
  }
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_5FE88()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 56)) {
    return *(void *)(v1 + 32);
  }
  if (v2 == 1) {
    return 0;
  }
  uint64_t v4 = (unsigned char *)(v1 + 64);
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v6 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    if (v4[24]) {
      return *(void *)v4;
    }
    v4 += 32;
    if (v6 == v2) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_5FEF4()
{
  return *(void *)(*(void *)(v0 + 48) + 16) == 1;
}

uint64_t sub_5FF08()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  sub_FBA8(*(void *)v0, v2, v3);
  uint64_t v4 = sub_C078(v1, v2, v3);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((*(unsigned char *)(v0 + 40) & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v0 + 48);
  if (*(void *)(v8 + 16) != 2) {
    goto LABEL_5;
  }
  if (v5 != 9)
  {
    uint64_t v12 = v4;
    unint64_t v13 = v5;
    sub_FFF0(v4, v5);
    sub_FFF0(v6, v7);
    sub_11990();
    char v9 = sub_68160();
    sub_118BC(v12, v13);
    sub_1D6A0(v6, v7);
    if (v9)
    {
LABEL_5:
      sub_1D6A0(v6, v7);
      return 0;
    }
    sub_FFF0(v6, v7);
    char v11 = sub_68160();
    sub_118BC(v6, v7);
    sub_1D6A0(v6, v7);
    if (v11) {
      return 0;
    }
  }
  if (*(void *)(v8 + 32) || (*(unsigned char *)(v8 + 56) & 1) == 0) {
    return (*(void *)(v8 + 64) == 0) & *(unsigned char *)(v8 + 88);
  }
  else {
    return 1;
  }
}

uint64_t sub_60088()
{
  if ((sub_5FF08() & 1) == 0) {
    return 0;
  }
  char v3 = *(char **)(v0 + 48);
  uint64_t v4 = v3;
  swift_bridgeObjectRetain_n();
  sub_62694(&v3);
  sub_A174((uint64_t)&v4);
  if (!*((void *)v3 + 2))
  {
    swift_release();
    return 0;
  }
  uint64_t v1 = *((void *)v3 + 4);
  swift_bridgeObjectRetain();
  swift_release();
  return v1;
}

char *sub_6015C()
{
  if ((sub_5FF08() & 1) == 0) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v13 = v1;
  v10[0] = (char *)v1;
  swift_bridgeObjectRetain_n();
  sub_62694(v10);
  sub_A174((uint64_t)&v13);
  if (!*((void *)v10[0] + 2))
  {
    swift_release();
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain_n();
  sub_1C9DC();
  char v3 = (char *)(v1 + 57);
  while (1)
  {
    uint64_t v4 = *(char **)(v3 - 9);
    char v5 = *v3;
    char v6 = *(v3 - 1);
    unint64_t v7 = *(char **)(v3 - 17);
    uint64_t v8 = *(char **)(v3 - 25);
    v10[0] = v8;
    v10[1] = v7;
    v10[2] = v4;
    char v11 = v6;
    char v12 = v5;
    swift_bridgeObjectRetain();
    if ((sub_68160() & 1) == 0) {
      break;
    }
    swift_bridgeObjectRelease();
    v3 += 32;
    if (!--v2)
    {
      sub_A174((uint64_t)&v13);
      sub_A174((uint64_t)&v13);
      goto LABEL_9;
    }
  }
  sub_A174((uint64_t)&v13);
  sub_A174((uint64_t)&v13);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_60330()
{
  if (*(void *)(*(void *)(v0 + 48) + 16) == 1) {
    return 1;
  }
  else {
    return sub_5FF08();
  }
}

uint64_t sub_6034C(char a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if ((a4 & 0x100) != 0) {
    return 2;
  }
  else {
    return (a1 & 1) == 0;
  }
}

uint64_t sub_60364(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if ((a4 & 0x100) != 0) {
    return 0;
  }
  if ((a1 & 1) == 0)
  {
    BOOL v4 = __OFADD__(a1, 1);
    uint64_t result = a1 + 1;
    if (!v4) {
      return result;
    }
    __break(1u);
    return 0;
  }
  BOOL v4 = __OFSUB__(a1, 1);
  uint64_t result = a1 - 1;
  if (v4) {
    __break(1u);
  }
  return result;
}

uint64_t CTFontRef.debugDescription.getter()
{
  sub_68540(20);
  uint64_t v1 = (__CFString *)CTFontCopyDisplayName(v0);
  uint64_t v2 = sub_681A0();
  swift_bridgeObjectRelease();

  v6._countAndFlagsBits = 23328;
  v6._object = (void *)0xE200000000000000;
  sub_68210(v6);
  CTFontGetSize(v0);
  v7._countAndFlagsBits = sub_68360();
  sub_68210(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x6E6974746573205DLL;
  v8._object = (void *)0xEC000000203A7367;
  sub_68210(v8);
  CFArrayRef v3 = CTFontCopyFeatureSettings(v0);
  if (v3)
  {
    CFArrayRef v4 = v3;
    sub_4890(&qword_817B0);
    sub_682C0();
  }
  swift_bridgeObjectRelease();
  sub_4890(&qword_817B0);
  v9._countAndFlagsBits = sub_682E0();
  sub_68210(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_604E8()
{
  uint64_t v1 = (__CFString *)CTFontCopyDisplayName(v0);
  uint64_t v2 = sub_681A0();

  return v2;
}

uint64_t sub_60530()
{
  return CTFontRef.debugDescription.getter();
}

id sub_60554()
{
  uint64_t v0 = self;
  [v0 systemFontSize];
  id result = objc_msgSend(v0, "systemFontOfSize:");
  qword_87E00 = (uint64_t)result;
  return result;
}

uint64_t *sub_605AC()
{
  if (qword_879A0 != -1) {
    swift_once();
  }
  return &qword_87E00;
}

id sub_605F8()
{
  if (qword_879A0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_87E00;
  return v0;
}

CTFontRef sub_60654(CGFloat a1)
{
  return CTFontCreateCopyWithAttributes(v1, a1, 0, 0);
}

double sub_60664()
{
  double v1 = fabs(CTFontGetDescent(v0));
  double Ascent = CTFontGetAscent(v0);
  double v3 = Ascent + fabs(CTFontGetDescent(v0));
  return v1 / (CTFontGetLeading(v0) + v3);
}

double sub_606B8()
{
  return CTFontGetDescent(v0);
}

CGFloat sub_606C0()
{
  double Ascent = CTFontGetAscent(v0);
  double v2 = Ascent + fabs(CTFontGetDescent(v0));
  return CTFontGetLeading(v0) + v2;
}

double sub_60704()
{
  return CTFontGetAscent(v0);
}

double sub_6070C()
{
  return CTFontGetLeading(v0);
}

uint64_t sub_60714()
{
  double v1 = (__CFString *)CTFontCopyPostScriptName(v0);
  uint64_t v2 = sub_681A0();

  return v2;
}

double sub_6075C()
{
  return CTFontGetSize(v0);
}

double sub_60764()
{
  return CTFontGetCapHeight(v0);
}

BOOL sub_6076C(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  char v5 = (const UniChar *)sub_30A14(a1, a2);
  swift_bridgeObjectRelease();
  CFIndex v6 = *((void *)v5 + 2);
  if (v6)
  {
    Swift::String v7 = (CGGlyph *)sub_68310();
    *((void *)v7 + 2) = v6;
    bzero(v7 + 16, 2 * v6);
  }
  else
  {
    Swift::String v7 = (CGGlyph *)_swiftEmptyArrayStorage;
  }
  BOOL GlyphsForCharacters = CTFontGetGlyphsForCharacters(v2, v5 + 16, v7 + 16, v6);
  swift_release();
  swift_bridgeObjectRelease();
  return GlyphsForCharacters;
}

void *sub_60820()
{
  id v1 = [v0 length];
  if ((uint64_t)v1 >= 100000) {
    uint64_t v2 = 100000;
  }
  else {
    uint64_t v2 = (uint64_t)v1;
  }
  CFAttributedStringRef v3 = (const __CFAttributedString *)objc_msgSend(v0, "attributedSubstringFromRange:", 0, v2);
  CFArrayRef v4 = CTLineCreateWithAttributedString(v3);

  CFArrayRef v5 = CTLineGetGlyphRuns(v4);
  type metadata accessor for CTRun(0);
  sub_682C0();

  return &_swiftEmptySetSingleton;
}

CFIndex sub_60928@<X0>(const __CTRun **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_672C0();
  __chkstk_darwin(v6 - 8);
  Swift::String v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FontGlyphVariant();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v45 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *a1;
  uint64_t v13 = (const __CTFont *)(id)CTRunGetFont();
  uint64_t v14 = sub_32018();
  CTFontRef CopyWithAttributes = CTFontCreateCopyWithAttributes(v13, *(CGFloat *)v14, 0, 0);

  CFRange StringRange = CTRunGetStringRange(v12);
  CFIndex location = StringRange.location;
  if (StringRange.location == -1) {
    CFIndex location = sub_67180();
  }
  id v18 = objc_msgSend(a2, "attributedSubstringFromRange:", location, StringRange.length);
  id v19 = [v18 string];

  uint64_t v20 = sub_681A0();
  unint64_t v22 = v21;

  CFIndex result = CTRunGetGlyphCount(v12);
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  CFIndex v24 = result;
  if (result)
  {
    uint64_t v25 = (CGGlyph *)sub_68310();
    *((void *)v25 + 2) = v24;
    bzero(v25 + 16, 2 * v24);
  }
  else
  {
    uint64_t v25 = (CGGlyph *)_swiftEmptyArrayStorage;
  }
  v50.CFIndex location = 0;
  v50.length = v24;
  CTRunGetGlyphs(v12, v50, v25 + 16);
  uint64_t v26 = HIBYTE(v22) & 0xF;
  uint64_t v46 = v20;
  unint64_t v47 = v22;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v26 = v20 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v48 = 0;
  uint64_t v49 = v26;
  CFIndex result = sub_68220();
  if (v27)
  {
    unint64_t v28 = v27;
    uint64_t v44 = v8;
    unint64_t v29 = 0;
    uint64_t v30 = _swiftEmptyArrayStorage;
    while (1)
    {
      unint64_t v31 = *((void *)v25 + 2);
      if (v29 == v31)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      if (v29 >= v31) {
        break;
      }
      __int16 v32 = v25[v29 + 16];
      uint64_t v33 = sub_2FC40(result, v28);
      if (*(void *)(v33 + 16))
      {
        uint64_t v42 = v10;
        char v43 = a3;
        __int16 v35 = *(_WORD *)(v33 + 32);
        swift_bridgeObjectRelease();
        uint64_t v36 = CopyWithAttributes;
        uint64_t v37 = (uint64_t)v44;
        sub_2120C();
        sub_213C8(v37, (uint64_t)v36, v35, v32, v45);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = (void *)sub_2BC80(0, v30[2] + 1, 1, v30);
        }
        uint64_t v10 = v42;
        unint64_t v39 = v30[2];
        unint64_t v38 = v30[3];
        if (v39 >= v38 >> 1) {
          uint64_t v30 = (void *)sub_2BC80(v38 > 1, v39 + 1, 1, v30);
        }
        ++v29;
        v30[2] = v39 + 1;
        sub_2EB2C(v45, (uint64_t)v30+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v39);
        CFIndex result = sub_68220();
        unint64_t v28 = v40;
        a3 = v43;
        if (!v40) {
          goto LABEL_24;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        CFIndex result = sub_68220();
        unint64_t v28 = v34;
        ++v29;
        if (!v34) {
          goto LABEL_24;
        }
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_24:

  swift_bridgeObjectRelease();
  CFIndex result = swift_bridgeObjectRelease();
  *a3 = v30;
  return result;
}

uint64_t sub_60CDC(uint64_t result)
{
  if (result == -1) {
    return sub_67180();
  }
  return result;
}

uint64_t sub_60D0C()
{
  return 100000;
}

uint64_t sub_60D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v7[2] = v3;
  _DWORD v7[3] = a3;
  _OWORD v7[4] = &v14;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_65404;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = sub_65420;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_6130C;
  aBlock[3] = &unk_7BE80;
  uint64_t v9 = _Block_copy(aBlock);
  id v10 = v3;
  swift_retain();
  swift_release();
  objc_msgSend(v10, "enumerateAttribute:inRange:options:usingBlock:", NSFontAttributeName, a1, a2, 0, v9);
  _Block_release(v9);
  LOBYTE(v1sub_66CA4(2, 18, 1, 0) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    char v12 = v14;
    swift_release();
    return (uint64_t)v12;
  }
  return result;
}

void sub_60EB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char **a6)
{
  sub_6591C(a1, (uint64_t)&v54);
  if (!v55)
  {
    sub_A8C0((uint64_t)&v54, &qword_81378);
    return;
  }
  sub_2EC24(&v54, v56);
  sub_1462C((uint64_t)v56, (uint64_t)&v54);
  type metadata accessor for CTFont(0);
  swift_dynamicCast();
  id v10 = objc_msgSend(a4, "attributedSubstringFromRange:", a2, a3);
  if (*(unsigned char *)sub_13BC4() != 1) {
    goto LABEL_22;
  }
  if (a5 < a3) {
    goto LABEL_22;
  }
  id v11 = [v10 string];
  sub_681A0();

  char v12 = sub_30798();
  swift_bridgeObjectRelease();
  if (v12) {
    goto LABEL_22;
  }
  uint64_t v13 = CTLineCreateWithAttributedString((CFAttributedStringRef)v10);
  CFArrayRef v14 = CTLineGetGlyphRuns(v13);

  *(void *)&long long v54 = 0;
  type metadata accessor for CTRun(0);
  sub_682C0();

  unint64_t v15 = v54;
  if (!(void)v54)
  {
LABEL_22:
    id length = v53;
    id v20 = v10;
    unint64_t v15 = (unint64_t)sub_23420(length, v20);
    CFIndex v24 = v39;
    a4 = v40;
    uint64_t v16 = v41;
    unint64_t v17 = *a6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v17;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_23:
      unint64_t v44 = *((void *)v17 + 2);
      unint64_t v43 = *((void *)v17 + 3);
      if (v44 >= v43 >> 1)
      {
        unint64_t v17 = sub_2BE54((char *)(v43 > 1), v44 + 1, 1, v17);
        *a6 = v17;
      }
      *((void *)v17 + 2) = v44 + 1;
      uint64_t v45 = &v17[32 * v44];
      *((void *)v45 + 4) = v15;
      *((void *)v45 + 5) = v24;
      *((void *)v45 + 6) = a4;
      *((void *)v45 + 7) = v16;

      goto LABEL_26;
    }
LABEL_29:
    unint64_t v17 = sub_2BE54(0, *((void *)v17 + 2) + 1, 1, v17);
    *a6 = v17;
    goto LABEL_23;
  }
  uint64_t v46 = v10;
  if ((unint64_t)v54 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_68630();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
LABEL_31:

    swift_bridgeObjectRelease();
LABEL_26:
    sub_13338((uint64_t)v56);
    return;
  }
  uint64_t v16 = *(void *)((char *)&dword_10 + (v54 & 0xFFFFFFFFFFFFFF8));
  if (!v16) {
    goto LABEL_31;
  }
LABEL_8:
  if (v16 >= 1)
  {
    unint64_t v17 = 0;
    uint64_t v50 = a2;
    unint64_t v51 = v15 & 0xC000000000000001;
    unint64_t v48 = v15;
    uint64_t v49 = a4;
    unint64_t v47 = (char *)v16;
    while (1)
    {
      if (v51) {
        id v18 = (const __CTRun *)sub_68560();
      }
      else {
        id v18 = (const __CTRun *)*(id *)(v15 + 8 * (void)v17 + 32);
      }
      id v19 = v18;
      id v20 = (id)CTRunGetFont();
      CFRange StringRange = CTRunGetStringRange(v19);
      CFIndex location = StringRange.location;
      id length = (id)StringRange.length;
      if (StringRange.location == -1) {
        CFIndex location = sub_67180();
      }
      CFIndex v24 = a2 + location;
      if (__OFADD__(a2, location)) {
        break;
      }
      id v25 = v20;
      id v26 = sub_23420(v25, objc_msgSend(a4, "attributedSubstringFromRange:", v24, StringRange.length));
      uint64_t v28 = v27;
      uint64_t v30 = v29;
      uint64_t v32 = v31;
      uint64_t v33 = *a6;
      id v34 = v26;
      swift_bridgeObjectRetain();
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v33;
      if ((v35 & 1) == 0)
      {
        uint64_t v33 = sub_2BE54(0, *((void *)v33 + 2) + 1, 1, v33);
        *a6 = v33;
      }
      unint64_t v37 = *((void *)v33 + 2);
      unint64_t v36 = *((void *)v33 + 3);
      if (v37 >= v36 >> 1)
      {
        uint64_t v33 = sub_2BE54((char *)(v36 > 1), v37 + 1, 1, v33);
        *a6 = v33;
      }
      ++v17;
      *((void *)v33 + 2) = v37 + 1;
      unint64_t v38 = &v33[32 * v37];
      *((void *)v38 + 4) = v34;
      *((void *)v38 + 5) = v28;
      *((void *)v38 + 6) = v30;
      *((void *)v38 + 7) = v32;

      swift_bridgeObjectRelease();
      uint64_t v16 = (uint64_t)v47;
      unint64_t v15 = v48;
      a4 = v49;
      a2 = v50;
      if (v47 == v17) {
        goto LABEL_31;
      }
    }
    __break(1u);
    goto LABEL_29;
  }
  __break(1u);
}

uint64_t sub_612F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = __OFADD__(a1, a3);
  uint64_t result = a1 + a3;
  if (v3) {
    __break(1u);
  }
  return result;
}

uint64_t sub_6130C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v12 + 1) = swift_getObjectType();
    *(void *)&long long v11 = a2;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return sub_A8C0((uint64_t)&v11, &qword_81378);
}

uint64_t sub_613A4(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_613C8, 0, 0);
}

uint64_t sub_613C8()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_allocObject();
  v0[6] = v3;
  swift_unknownObjectWeakInit();
  CFArrayRef v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  void v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  CFArrayRef v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  uint64_t v6 = sub_4890(&qword_821A8);
  *CFArrayRef v5 = v0;
  v5[1] = sub_61504;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000015, 0x8000000000074E20, sub_65498, v4, v6);
}

uint64_t sub_61504()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_61638, 0, 0);
}

uint64_t sub_61638()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

void sub_61650()
{
  if (*(unsigned char *)sub_13BC4() != 1) {
    return;
  }
  unint64_t v15 = &_swiftEmptySetSingleton;
  id v1 = [(__CTLine *)v0 length];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v15;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_656DC;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_65998;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_6130C;
  aBlock[3] = &unk_7BF20;
  CFArrayRef v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  -[__CTLine enumerateAttribute:inRange:options:usingBlock:](v0, "enumerateAttribute:inRange:options:usingBlock:", NSFontAttributeName, 0, v1, 0, v4);
  _Block_release(v4);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_68630();
    swift_bridgeObjectRelease();
    if (v12 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_68630();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_6;
      }

      swift_bridgeObjectRelease();
LABEL_18:
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_16;
  }
  CTLineRef v0 = CTLineCreateWithAttributedString(v0);
  CFArrayRef v6 = CTLineGetGlyphRuns(v0);
  aBlock[0] = 0;
  type metadata accessor for CTRun(0);
  sub_682C0();

  uint64_t isEscapingClosureAtFileLocation = aBlock[0];
  if (!aBlock[0])
  {
LABEL_17:

    goto LABEL_18;
  }
  CFArrayRef v4 = (void *)(aBlock[0] & 0xFFFFFFFFFFFFFF8);
  if (aBlock[0] >> 62) {
    goto LABEL_13;
  }
  if (*(void *)((char *)&dword_10 + (aBlock[0] & 0xFFFFFFFFFFFFFF8)) != 1)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_6:
  if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0)
  {
    id v7 = (id)sub_68560();
  }
  else
  {
    if (!v4[2])
    {
      __break(1u);
      return;
    }
    id v7 = *(id *)(isEscapingClosureAtFileLocation + 32);
  }
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = (id)CTRunGetFont();
  uint64_t v10 = (uint64_t)v15;
  swift_bridgeObjectRetain();
  char v11 = sub_61968(v9, v10);

  swift_bridgeObjectRelease();
  if (v11) {

  }
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_61968(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = sub_684E0();
  }
  else
  {
    if (!*(void *)(a2 + 16)) {
      goto LABEL_11;
    }
    sub_687F0();
    type metadata accessor for CTFont(0);
    sub_6588C(&qword_81480, type metadata accessor for CTFont);
    sub_67310();
    Swift::Int v5 = sub_68830();
    uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v7 = v5 & ~v6;
    uint64_t v8 = a2 + 56;
    if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
      goto LABEL_11;
    }
    id v9 = *(id *)(*(void *)(a2 + 48) + 8 * v7);
    char v10 = sub_67300();

    if (v10)
    {
      char v4 = 1;
      return v4 & 1;
    }
    uint64_t v11 = ~v6;
    unint64_t v12 = (v7 + 1) & v11;
    if (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
LABEL_11:
      char v4 = 0;
      return v4 & 1;
    }
    do
    {
      id v13 = *(id *)(*(void *)(a2 + 48) + 8 * v12);
      char v4 = sub_67300();

      if (v4) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v11;
    }
    while (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v4 & 1;
}

uint64_t sub_61B30()
{
  uint64_t v0 = sub_4890(&qword_821B0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_67270();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_67230();
  swift_getKeyPath();
  sub_67210();
  sub_6588C(&qword_821B8, (void (*)(uint64_t))&type metadata accessor for AttributeScopes.UIKitAttributes);
  sub_67260();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_getKeyPath();
  sub_65794();
  sub_67290();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v9[1];
}

uint64_t sub_61D40@<X0>(uint64_t *a1@<X8>)
{
  sub_67220();
  uint64_t result = sub_67210();
  *a1 = result;
  return result;
}

void sub_61D70()
{
}

CFIndex sub_61D8C()
{
  return CFBitVectorGetCount(v0);
}

CFIndex sub_61D94(uint64_t a1)
{
  CFIndex result = CFBitVectorGetCount(v1);
  if (__OFSUB__(result, a1))
  {
    __break(1u);
  }
  else if (result - a1 >= 0)
  {
    return a1;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_61DD8()
{
  CFIndex Count = CFBitVectorGetCount(v0);
  if (Count < 0) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v11.id length = Count;
  v11.CFIndex location = 0;
  CFIndex FirstIndexOfBit = CFBitVectorGetFirstIndexOfBit(v0, v11, 1u);
  if (FirstIndexOfBit == -1)
  {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {
    CFIndex v3 = FirstIndexOfBit;
    uint64_t v4 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_62FFC(0, *((void *)v4 + 2) + 1, 1, v4);
        uint64_t v4 = (char *)result;
      }
      unint64_t v7 = *((void *)v4 + 2);
      unint64_t v6 = *((void *)v4 + 3);
      if (v7 >= v6 >> 1)
      {
        uint64_t result = (uint64_t)sub_62FFC((char *)(v6 > 1), v7 + 1, 1, v4);
        uint64_t v4 = (char *)result;
      }
      *((void *)v4 + 2) = v7 + 1;
      *(void *)&v4[8 * v7 + 32] = v3;
      BOOL v8 = __OFADD__(v3, 1);
      CFIndex v9 = v3 + 1;
      if (v8) {
        break;
      }
      uint64_t result = CFBitVectorGetCount(v0);
      v10.id length = result - v9;
      if (__OFSUB__(result, v9)) {
        goto LABEL_16;
      }
      if ((v10.length & 0x8000000000000000) == 0)
      {
        v10.CFIndex location = v9;
        CFIndex v3 = CFBitVectorGetFirstIndexOfBit(v0, v10, 1u);
        if (v3 != -1) {
          continue;
        }
      }
      return (uint64_t)v4;
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t sub_61EF0()
{
  v3.id length = CFBitVectorGetCount(v0);
  v3.CFIndex location = 0;
  CFIndex FirstIndexOfBit = CFBitVectorGetFirstIndexOfBit(v0, v3, 1u);
  return FirstIndexOfBit & ~(FirstIndexOfBit >> 63);
}

BOOL sub_61F2C(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_61F38(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a3) {
    return 0;
  }
  if (!__OFSUB__(a4, result)) {
    return (a4 - result) & ~((a4 - result) >> 63);
  }
  __break(1u);
  return result;
}

BOOL sub_61F60()
{
  return !CGPathIsEmpty(v0);
}

uint64_t sub_61F80()
{
  uint64_t v1 = type metadata accessor for FontGlyphVariant();
  uint64_t v9 = CTFontRef.debugDescription.getter();
  uint64_t v10 = v2;
  v11._countAndFlagsBits = 0x20203E2D2D2D2020;
  v11._object = (void *)0xE800000000000000;
  sub_68210(v11);
  uint64_t v3 = *(int *)(v1 + 28);
  LODWORD(v1) = *(unsigned __int16 *)(v0 + *(int *)(v1 + 24));
  int v4 = *(unsigned __int16 *)(v0 + v3);
  v12._countAndFlagsBits = sub_68770();
  sub_68210(v12);
  swift_bridgeObjectRelease();
  if (v1 == v4)
  {
    v5._countAndFlagsBits = 0;
    unint64_t v6 = (void *)0xE000000000000000;
  }
  else
  {
    strcpy((char *)v8, " variant of: ");
    HIWORD(v8[1]) = -4864;
    v13._countAndFlagsBits = sub_68770();
    sub_68210(v13);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = v8[0];
    unint64_t v6 = (void *)v8[1];
  }
  v5._object = v6;
  sub_68210(v5);
  swift_bridgeObjectRelease();
  return v9;
}

BOOL sub_620A4()
{
  uint64_t v1 = type metadata accessor for FontGlyphVariant();
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 24)) != *(unsigned __int16 *)(v0 + *(int *)(v1 + 28));
}

char *sub_620D8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v41 = a1;
  unint64_t v42 = a2;
  uint64_t v6 = sub_4890(&qword_81A38);
  __chkstk_darwin(v6 - 8);
  unint64_t v40 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a3 string];
  uint64_t v9 = sub_681A0();
  unint64_t v11 = v10;

  uint64_t v37 = *(void *)(a4 + 16);
  if (v37)
  {
    v36[0] = a4;
    v36[1] = a4 + 32;
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    uint64_t v46 = (char *)_swiftEmptyArrayStorage;
    uint64_t v39 = v9;
    do
    {
      unint64_t v13 = sub_68380();
      uint64_t v38 = v12;
      if ((v15 & 1) == 0)
      {
        unint64_t v16 = v14;
        unint64_t v17 = v14 >> 14;
        if (v14 >> 14 != v13 >> 14)
        {
          uint64_t v45 = sub_672F0();
          uint64_t v18 = *(void *)(v45 - 8);
          id v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
          uint64_t v43 = v18 + 56;
          unint64_t v44 = v19;
          do
          {
            uint64_t v49 = v9;
            unint64_t v50 = v11;
            uint64_t v20 = (uint64_t)v40;
            uint64_t v47 = v41;
            unint64_t v48 = v42;
            v44(v40, 1, 1, v45);
            sub_A5D0();
            unint64_t v21 = v16;
            uint64_t v22 = sub_68420();
            unint64_t v24 = v23;
            char v26 = v25;
            sub_A8C0(v20, &qword_81A38);
            if (v26) {
              break;
            }
            uint64_t v49 = v22;
            unint64_t v50 = v24;
            uint64_t v47 = v9;
            unint64_t v48 = v11;
            unint64_t v27 = v11;
            swift_bridgeObjectRetain();
            sub_4890(&qword_821C8);
            sub_657E8();
            uint64_t v28 = sub_683D0();
            uint64_t v30 = v29;
            uint64_t v31 = v46;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v31 = sub_630F8(0, *((void *)v31 + 2) + 1, 1, v31);
            }
            unint64_t v33 = *((void *)v31 + 2);
            unint64_t v32 = *((void *)v31 + 3);
            if (v33 >= v32 >> 1) {
              uint64_t v31 = sub_630F8((char *)(v32 > 1), v33 + 1, 1, v31);
            }
            *((void *)v31 + 2) = v33 + 1;
            uint64_t v46 = v31;
            id v34 = &v31[16 * v33];
            *((void *)v34 + 4) = v28;
            *((void *)v34 + 5) = v30;
            unint64_t v16 = v21;
            uint64_t v9 = v39;
            unint64_t v11 = v27;
          }
          while (v17 != v24 >> 14);
        }
      }
      uint64_t v12 = v38 + 1;
    }
    while (v38 + 1 != v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)_swiftEmptyArrayStorage;
  }
}

char *sub_623D8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v37 = a1;
  unint64_t v38 = a2;
  uint64_t v8 = sub_4890(&qword_81A38);
  __chkstk_darwin(v8 - 8);
  unint64_t v36 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(a5 + 16);
  if (!v33) {
    return (char *)_swiftEmptyArrayStorage;
  }
  v32[0] = a5;
  v32[1] = a5 + 32;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v35 = a3;
  do
  {
    unint64_t v12 = sub_68380();
    uint64_t v34 = v10;
    if ((v14 & 1) == 0)
    {
      unint64_t v15 = v13;
      unint64_t v16 = v13 >> 14;
      if (v13 >> 14 != v12 >> 14)
      {
        uint64_t v42 = sub_672F0();
        uint64_t v17 = *(void *)(v42 - 8);
        uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
        uint64_t v40 = v17 + 56;
        uint64_t v41 = v18;
        unint64_t v39 = v15;
        do
        {
          uint64_t v45 = a3;
          unint64_t v46 = a4;
          uint64_t v19 = (uint64_t)v36;
          uint64_t v43 = v37;
          unint64_t v44 = v38;
          v41(v36, 1, 1, v42);
          sub_A5D0();
          uint64_t v20 = sub_68420();
          unint64_t v22 = v21;
          char v24 = v23;
          sub_A8C0(v19, &qword_81A38);
          if (v24) {
            break;
          }
          uint64_t v45 = v20;
          unint64_t v46 = v22;
          uint64_t v43 = a3;
          unint64_t v44 = a4;
          swift_bridgeObjectRetain();
          sub_4890(&qword_821C8);
          sub_657E8();
          uint64_t v25 = sub_683D0();
          uint64_t v27 = v26;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v11 = sub_630F8(0, *((void *)v11 + 2) + 1, 1, v11);
          }
          unint64_t v29 = *((void *)v11 + 2);
          unint64_t v28 = *((void *)v11 + 3);
          if (v29 >= v28 >> 1) {
            unint64_t v11 = sub_630F8((char *)(v28 > 1), v29 + 1, 1, v11);
          }
          *((void *)v11 + 2) = v29 + 1;
          uint64_t v30 = &v11[16 * v29];
          *((void *)v30 + 4) = v25;
          *((void *)v30 + 5) = v27;
          a3 = v35;
        }
        while (v16 != v22 >> 14);
      }
    }
    uint64_t v10 = v34 + 1;
  }
  while (v34 + 1 != v33);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_62694(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_3797C((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_62700(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_62700(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = sub_68760(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_142;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v90 = *a1;
      uint64_t v91 = *a1 + 57;
      uint64_t v92 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v94 = v92;
        uint64_t v95 = v91;
        do
        {
          uint64_t v96 = (_OWORD *)(v95 - 25);
          uint64_t v97 = *(void *)(v95 - 25);
          if (*(void *)(v95 - 57) >= v97) {
            break;
          }
          if (!v90) {
            goto LABEL_146;
          }
          long long v99 = *(_OWORD *)(v95 - 57);
          long long v98 = *(_OWORD *)(v95 - 41);
          *(unsigned char *)(v95 - 32) = *(unsigned char *)v95;
          v95 -= 32;
          uint64_t v100 = *(void *)(v95 + 15);
          uint64_t v101 = *(void *)(v95 + 23);
          char v102 = *(unsigned char *)(v95 + 31);
          *uint64_t v96 = v99;
          v96[1] = v98;
          *(void *)(v95 - 25) = v97;
          *(void *)(v95 - 17) = v100;
          *(void *)(v95 - 9) = v101;
          *(unsigned char *)(v95 - 1) = v102;
        }
        while (!__CFADD__(v94++, 1));
        v91 += 32;
        --v92;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_141;
    }
    uint64_t v6 = result;
    uint64_t v119 = v1;
    long long v112 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      uint64_t result = sub_68310();
      *(void *)(result + 16) = v7;
      long long v114 = (void *)result;
      char v118 = (char *)(result + 32);
LABEL_13:
      Swift::Int v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v113 = *a1 + 64;
      uint64_t v111 = *a1 + 25;
      unint64_t v11 = (char *)_swiftEmptyArrayStorage;
      uint64_t v115 = v6;
      Swift::Int v116 = v3;
      uint64_t v117 = v10;
      while (1)
      {
        Swift::Int v13 = v9++;
        if (v9 < v3)
        {
          uint64_t v14 = *(void *)(v10 + 32 * v9);
          uint64_t v15 = 32 * v13;
          uint64_t v16 = *(void *)(v10 + 32 * v13);
          Swift::Int v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            uint64_t v17 = (void *)(v113 + 32 * v13);
            while (v16 < v14 != *(v17 - 4) >= *v17)
            {
              v17 += 4;
              if (v3 == ++v9)
              {
                Swift::Int v9 = v3;
                break;
              }
            }
          }
          if (v16 < v14)
          {
            if (v9 < v13) {
              goto LABEL_143;
            }
            if (v13 < v9)
            {
              uint64_t v18 = 32 * v9 - 32;
              Swift::Int v19 = v9;
              Swift::Int v20 = v13;
              do
              {
                if (v20 != --v19)
                {
                  if (!v10) {
                    goto LABEL_149;
                  }
                  char v23 = (_OWORD *)(v10 + v15);
                  char v24 = (_OWORD *)(v10 + v18);
                  long long v25 = *(_OWORD *)(v10 + v15);
                  uint64_t v26 = *(void *)(v10 + v15 + 16);
                  char v27 = *(unsigned char *)(v10 + v15 + 24);
                  char v28 = *(unsigned char *)(v10 + v15 + 25);
                  if (v15 != v18 || v23 >= v24 + 2)
                  {
                    long long v21 = v24[1];
                    *char v23 = *v24;
                    v23[1] = v21;
                  }
                  uint64_t v22 = v10 + v18;
                  *(_OWORD *)uint64_t v22 = v25;
                  *(void *)(v22 + 16) = v26;
                  *(unsigned char *)(v22 + 24) = v27;
                  *(unsigned char *)(v22 + 25) = v28;
                }
                ++v20;
                v18 -= 32;
                v15 += 32;
              }
              while (v20 < v19);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_140;
          }
          if (v9 - v13 < v6)
          {
            Swift::Int v29 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_144;
            }
            if (v29 >= v3) {
              Swift::Int v29 = v3;
            }
            if (v29 < v13)
            {
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              return result;
            }
            if (v9 != v29)
            {
              uint64_t v30 = v111 + 32 * v9;
              do
              {
                Swift::Int v31 = v13;
                uint64_t v32 = v30;
                do
                {
                  uint64_t v33 = (_OWORD *)(v32 - 25);
                  uint64_t v34 = *(void *)(v32 - 25);
                  if (*(void *)(v32 - 57) >= v34) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_147;
                  }
                  long long v36 = *(_OWORD *)(v32 - 57);
                  long long v35 = *(_OWORD *)(v32 - 41);
                  *(unsigned char *)(v32 - 32) = *(unsigned char *)v32;
                  v32 -= 32;
                  uint64_t v37 = *(void *)(v32 + 15);
                  uint64_t v38 = *(void *)(v32 + 23);
                  char v39 = *(unsigned char *)(v32 + 31);
                  *uint64_t v33 = v36;
                  v33[1] = v35;
                  *(void *)(v32 - 25) = v34;
                  *(void *)(v32 - 17) = v37;
                  *(void *)(v32 - 9) = v38;
                  *(unsigned char *)(v32 - 1) = v39;
                  ++v31;
                }
                while (v9 != v31);
                ++v9;
                v30 += 32;
              }
              while (v9 != v29);
              Swift::Int v9 = v29;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_135;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_9A50(0, *((void *)v11 + 2) + 1, 1, v11);
          unint64_t v11 = (char *)result;
        }
        unint64_t v41 = *((void *)v11 + 2);
        unint64_t v40 = *((void *)v11 + 3);
        unint64_t v12 = v41 + 1;
        uint64_t v10 = v117;
        if (v41 >= v40 >> 1)
        {
          uint64_t result = (uint64_t)sub_9A50((char *)(v40 > 1), v41 + 1, 1, v11);
          uint64_t v10 = v117;
          unint64_t v11 = (char *)result;
        }
        *((void *)v11 + 2) = v12;
        uint64_t v42 = v11 + 32;
        uint64_t v43 = &v11[16 * v41 + 32];
        *(void *)uint64_t v43 = v13;
        *((void *)v43 + 1) = v9;
        if (v41)
        {
          while (1)
          {
            unint64_t v44 = v12 - 1;
            if (v12 >= 4)
            {
              uint64_t v49 = &v42[2 * v12];
              uint64_t v50 = *(v49 - 8);
              uint64_t v51 = *(v49 - 7);
              BOOL v55 = __OFSUB__(v51, v50);
              uint64_t v52 = v51 - v50;
              if (v55) {
                goto LABEL_124;
              }
              uint64_t v54 = *(v49 - 6);
              uint64_t v53 = *(v49 - 5);
              BOOL v55 = __OFSUB__(v53, v54);
              uint64_t v47 = v53 - v54;
              char v48 = v55;
              if (v55) {
                goto LABEL_125;
              }
              unint64_t v56 = v12 - 2;
              uint64_t v57 = &v42[2 * v12 - 4];
              uint64_t v59 = *v57;
              uint64_t v58 = v57[1];
              BOOL v55 = __OFSUB__(v58, v59);
              uint64_t v60 = v58 - v59;
              if (v55) {
                goto LABEL_126;
              }
              BOOL v55 = __OFADD__(v47, v60);
              uint64_t v61 = v47 + v60;
              if (v55) {
                goto LABEL_128;
              }
              if (v61 >= v52)
              {
                char v79 = &v42[2 * v44];
                uint64_t v81 = *v79;
                uint64_t v80 = v79[1];
                BOOL v55 = __OFSUB__(v80, v81);
                uint64_t v82 = v80 - v81;
                if (v55) {
                  goto LABEL_134;
                }
                BOOL v72 = v47 < v82;
                goto LABEL_87;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v73 = *((void *)v11 + 4);
                uint64_t v74 = *((void *)v11 + 5);
                BOOL v55 = __OFSUB__(v74, v73);
                uint64_t v66 = v74 - v73;
                char v67 = v55;
                goto LABEL_81;
              }
              uint64_t v46 = *((void *)v11 + 4);
              uint64_t v45 = *((void *)v11 + 5);
              BOOL v55 = __OFSUB__(v45, v46);
              uint64_t v47 = v45 - v46;
              char v48 = v55;
            }
            if (v48) {
              goto LABEL_127;
            }
            unint64_t v56 = v12 - 2;
            uint64_t v62 = &v42[2 * v12 - 4];
            uint64_t v64 = *v62;
            uint64_t v63 = v62[1];
            BOOL v65 = __OFSUB__(v63, v64);
            uint64_t v66 = v63 - v64;
            char v67 = v65;
            if (v65) {
              goto LABEL_129;
            }
            char v68 = &v42[2 * v44];
            uint64_t v70 = *v68;
            uint64_t v69 = v68[1];
            BOOL v55 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v55) {
              goto LABEL_131;
            }
            if (__OFADD__(v66, v71)) {
              goto LABEL_133;
            }
            if (v66 + v71 >= v47)
            {
              BOOL v72 = v47 < v71;
LABEL_87:
              if (v72) {
                unint64_t v44 = v56;
              }
              goto LABEL_89;
            }
LABEL_81:
            if (v67) {
              goto LABEL_130;
            }
            long long v75 = &v42[2 * v44];
            uint64_t v77 = *v75;
            uint64_t v76 = v75[1];
            BOOL v55 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v55) {
              goto LABEL_132;
            }
            if (v78 < v66) {
              goto LABEL_15;
            }
LABEL_89:
            unint64_t v83 = v44 - 1;
            if (v44 - 1 >= v12)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v10) {
              goto LABEL_148;
            }
            uint64_t v84 = v11;
            uint64_t v85 = &v42[2 * v83];
            uint64_t v86 = *v85;
            uint64_t v87 = &v42[2 * v44];
            uint64_t v88 = v87[1];
            uint64_t result = sub_62DF4((char *)(v10 + 32 * *v85), (char *)(v10 + 32 * *v87), v10 + 32 * v88, v118);
            if (v119) {
              goto LABEL_97;
            }
            if (v88 < v86) {
              goto LABEL_121;
            }
            if (v44 > *((void *)v84 + 2)) {
              goto LABEL_122;
            }
            *uint64_t v85 = v86;
            v42[2 * v83 + 1] = v88;
            unint64_t v89 = *((void *)v84 + 2);
            if (v44 >= v89) {
              goto LABEL_123;
            }
            unint64_t v11 = v84;
            unint64_t v12 = v89 - 1;
            uint64_t result = (uint64_t)memmove(&v42[2 * v44], v87 + 2, 16 * (v89 - 1 - v44));
            *((void *)v84 + 2) = v89 - 1;
            uint64_t v10 = v117;
            if (v89 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v115;
        Swift::Int v3 = v116;
        if (v9 >= v116)
        {
          uint64_t v8 = v114;
          goto LABEL_107;
        }
      }
    }
    uint64_t v8 = _swiftEmptyArrayStorage;
    char v118 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      long long v114 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v12 = _swiftEmptyArrayStorage[2];
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
    uint64_t result = (uint64_t)v11;
    long long v114 = v8;
    if (v12 >= 2)
    {
      uint64_t v104 = *v112;
      do
      {
        unint64_t v105 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_136;
        }
        if (!v104) {
          goto LABEL_150;
        }
        uint64_t v106 = result;
        uint64_t v107 = *(void *)(result + 32 + 16 * v105);
        uint64_t v108 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_62DF4((char *)(v104 + 32 * v107), (char *)(v104 + 32 * *(void *)(result + 32 + 16 * (v12 - 1))), v104 + 32 * v108, v118);
        if (v119) {
          break;
        }
        if (v108 < v107) {
          goto LABEL_137;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_9B4C(v106);
          uint64_t v106 = result;
        }
        if (v105 >= *(void *)(v106 + 16)) {
          goto LABEL_138;
        }
        long long v109 = (void *)(v106 + 32 + 16 * v105);
        *long long v109 = v107;
        v109[1] = v108;
        unint64_t v110 = *(void *)(v106 + 16);
        if (v12 > v110) {
          goto LABEL_139;
        }
        memmove((void *)(v106 + 32 + 16 * (v12 - 1)), (const void *)(v106 + 32 + 16 * v12), 16 * (v110 - v12));
        uint64_t result = v106;
        *(void *)(v106 + 16) = v110 - 1;
        unint64_t v12 = v110 - 1;
      }
      while (v110 > 2);
    }
LABEL_97:
    swift_bridgeObjectRelease();
    v114[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_62DF4(char *__dst, char *__src, unint64_t a3, char *a4)
{
  int v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 31;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v13)
  {
    uint64_t v19 = 32 * v13;
    if (a4 != __src || &__src[v19] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    uint64_t v15 = &v4[v19];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_40;
    }
    Swift::Int v20 = (char *)(a3 - 32);
    while (1)
    {
      long long v21 = v20 + 32;
      uint64_t v22 = v6 - 32;
      if (*((void *)v6 - 4) >= *((void *)v15 - 4))
      {
        uint64_t v22 = v15 - 32;
        if (v21 != v15)
        {
          v15 -= 32;
          goto LABEL_37;
        }
        BOOL v23 = v20 >= v15;
        v15 -= 32;
        if (v23) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v21 != v6)
        {
          v6 -= 32;
LABEL_37:
          long long v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)Swift::Int v20 = *(_OWORD *)v22;
          *((_OWORD *)v20 + 1) = v24;
          goto LABEL_38;
        }
        BOOL v23 = v20 >= v6;
        v6 -= 32;
        if (v23) {
          goto LABEL_37;
        }
      }
LABEL_38:
      if (v6 > v7)
      {
        v20 -= 32;
        if (v15 > v4) {
          continue;
        }
      }
      goto LABEL_40;
    }
  }
  size_t v14 = 32 * v10;
  if (a4 != __dst || &__dst[v14] <= a4) {
    memmove(a4, __dst, v14);
  }
  uint64_t v15 = &v4[v14];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (*(void *)v4 < *(void *)v6)
    {
      uint64_t v16 = v6;
      BOOL v17 = v7 == v6;
      v6 += 32;
      if (!v17) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 32;
      if (v4 >= v15 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    uint64_t v16 = v4;
    BOOL v17 = v7 == v4;
    v4 += 32;
    if (v17) {
      goto LABEL_17;
    }
LABEL_16:
    long long v18 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
    *((_OWORD *)v7 + 1) = v18;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_40:
  size_t v25 = (v15 - v4 + (v15 - v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0;
  if (v6 != v4 || v6 >= &v4[v25]) {
    memmove(v6, v4, v25);
  }
  return 1;
}

char *sub_62FFC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_81168);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_630F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_4890(&qword_80D10);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_631F4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for FontGlyphVariant();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v9 = *v2;
  sub_6588C(&qword_816D0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
  swift_bridgeObjectRetain();
  uint64_t v10 = a2;
  uint64_t v11 = sub_68130();
  uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v21 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v6 + 72);
    while (1)
    {
      sub_20B5C(*(void *)(v9 + 48) + v15 * v13, (uint64_t)v8);
      sub_6588C(&qword_813B0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
      char v16 = sub_68160();
      sub_20BC0((uint64_t)v8);
      if (v16) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_20BC0(v10);
    sub_20B5C(*(void *)(*v22 + 48) + v15 * v13, v21);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    BOOL v17 = v22;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_20B5C(v10, (uint64_t)v8);
    uint64_t v23 = *v17;
    *BOOL v17 = 0x8000000000000000;
    sub_64164((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *BOOL v17 = v23;
    swift_bridgeObjectRelease();
    sub_2EB2C(v10, a1);
    return 1;
  }
}

uint64_t sub_63480(void *a1, void *a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = sub_684C0();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for CTFont(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v28;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_684B0();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v21 = sub_6377C(v7, result + 1);
    Swift::Int v29 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      id v26 = v8;
      sub_63D74();
      uint64_t v22 = v29;
    }
    else
    {
      uint64_t v22 = v21;
      id v23 = v8;
    }
    sub_64078((uint64_t)v8, v22);
    *Swift::Int v3 = v22;
    swift_bridgeObjectRelease();
    *a1 = v8;
  }
  else
  {
    sub_687F0();
    type metadata accessor for CTFont(0);
    sub_6588C(&qword_81480, type metadata accessor for CTFont);
    swift_bridgeObjectRetain();
    sub_67310();
    Swift::Int v11 = sub_68830();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = sub_67300();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v19 = *(void **)(*(void *)(*v3 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = sub_67300();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v3;
    *Swift::Int v3 = 0x8000000000000000;
    id v25 = a2;
    sub_643D0((uint64_t)v25, v13, isUniquelyReferenced_nonNull_native);
    *Swift::Int v3 = v30;
    swift_bridgeObjectRelease();
    *a1 = v25;
  }
  return 1;
}

Swift::Int sub_6377C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_4890(&qword_821D8);
    uint64_t v2 = sub_68510();
    uint64_t v14 = v2;
    sub_684A0();
    if (sub_684D0())
    {
      type metadata accessor for CTFont(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_63D74();
          uint64_t v2 = v14;
        }
        sub_687F0();
        sub_6588C(&qword_81480, type metadata accessor for CTFont);
        sub_67310();
        Swift::Int result = sub_68830();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (sub_684D0());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_639C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FontGlyphVariant();
  uint64_t v33 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_4890(&qword_816F8);
  uint64_t v6 = sub_68500();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = v0;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v32 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = v32[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v32 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v32[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v33 + 72);
      sub_2EB2C(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4);
      sub_6588C(&qword_816D0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
      uint64_t result = sub_68130();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_2EB2C((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_63D74()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_821D8);
  uint64_t v3 = sub_68500();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      sub_687F0();
      type metadata accessor for CTFont(0);
      sub_6588C(&qword_81480, type metadata accessor for CTFont);
      sub_67310();
      uint64_t result = sub_68830();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_64078(uint64_t a1, uint64_t a2)
{
  sub_687F0();
  type metadata accessor for CTFont(0);
  sub_6588C(&qword_81480, type metadata accessor for CTFont);
  sub_67310();
  sub_68830();
  unint64_t result = sub_68490();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_64164(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for FontGlyphVariant();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v24 = v8;
  BOOL v25 = v3;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_639C4();
  }
  else
  {
    if (v12 > v11)
    {
      sub_645BC();
      goto LABEL_12;
    }
    sub_649A4();
  }
  uint64_t v13 = *v3;
  sub_6588C(&qword_816D0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
  uint64_t v14 = sub_68130();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v15;
    uint64_t v17 = *(void *)(v8 + 72);
    do
    {
      sub_20B5C(*(void *)(v13 + 48) + v17 * a2, (uint64_t)v10);
      sub_6588C(&qword_813B0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
      char v18 = sub_68160();
      sub_20BC0((uint64_t)v10);
      if (v18) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v19 = *v25;
  *(void *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_2EB2C(a1, *(void *)(v19 + 48) + *(void *)(v24 + 72) * a2);
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (!v22)
  {
    *(void *)(v19 + 16) = v23;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_687B0();
  __break(1u);
  return result;
}

void sub_643D0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_63D74();
  }
  else
  {
    if (v8 > v7)
    {
      sub_647F8();
      goto LABEL_14;
    }
    sub_64D18();
  }
  uint64_t v9 = *v3;
  sub_687F0();
  type metadata accessor for CTFont(0);
  sub_6588C(&qword_81480, type metadata accessor for CTFont);
  sub_67310();
  Swift::Int v10 = sub_68830();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = sub_67300();

    if (v13)
    {
LABEL_13:
      sub_687B0();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = sub_67300();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

void *sub_645BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FontGlyphVariant();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_4890(&qword_816F8);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_684F0();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    sub_20B5C(*(void *)(v6 + 48) + v19, (uint64_t)v5);
    uint64_t result = (void *)sub_2EB2C((uint64_t)v5, *(void *)(v8 + 48) + v19);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16) {
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_647F8()
{
  uint64_t v1 = v0;
  sub_4890(&qword_821D8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_684F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_649A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FontGlyphVariant();
  uint64_t v32 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_4890(&qword_816F8);
  uint64_t v6 = sub_68500();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v32 + 72);
    sub_20B5C(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4);
    sub_6588C(&qword_816D0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
    uint64_t result = sub_68130();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_2EB2C((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_64D18()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_4890(&qword_821D8);
  uint64_t v3 = sub_68500();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_35;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v28) {
      break;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v28) {
        break;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v28) {
          break;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v10);
        if (!v15)
        {
          int64_t v16 = v14 + 3;
          if (v16 >= v28) {
            break;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              int64_t v10 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_37;
              }
              if (v10 >= v28) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v10);
              ++v16;
              if (v15) {
                goto LABEL_23;
              }
            }
          }
          int64_t v10 = v16;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    sub_687F0();
    type metadata accessor for CTFont(0);
    sub_6588C(&qword_81480, type metadata accessor for CTFont);
    id v18 = v17;
    sub_67310();
    Swift::Int v19 = sub_68830();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    char v23 = 0;
    unint64_t v24 = (unint64_t)(63 - v20) >> 6;
    do
    {
      if (++v22 == v24 && (v23 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x6500CLL);
      }
      BOOL v25 = v22 == v24;
      if (v22 == v24) {
        unint64_t v22 = 0;
      }
      v23 |= v25;
      uint64_t v26 = *(void *)(v9 + 8 * v22);
    }
    while (v26 == -1);
    unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
LABEL_7:
    *(void *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_35:
  *uint64_t v1 = v4;
  return result;
}

void *sub_6502C(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_68630())
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v6 = (a1 & 0xC000000000000001) != 0
         ? (const __CTRun *)sub_68560()
         : (const __CTRun *)*(id *)(a1 + 8 * i);
      uint64_t v7 = v6;
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      char v23 = v6;
      sub_60928(&v23, a2, &v22);
      if (v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v4;
      }

      uint64_t v9 = v22;
      uint64_t v10 = *(void *)(v22 + 16);
      int64_t v11 = v4[2];
      int64_t v12 = v11 + v10;
      if (__OFADD__(v11, v10)) {
        goto LABEL_28;
      }
      size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= v4[3] >> 1)
      {
        if (*(void *)(v9 + 16)) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v11 <= v12) {
          int64_t v14 = v11 + v10;
        }
        else {
          int64_t v14 = v11;
        }
        uint64_t v4 = (void *)sub_2BC80(isUniquelyReferenced_nonNull_native, v14, 1, v4);
        if (*(void *)(v9 + 16))
        {
LABEL_20:
          uint64_t v15 = (v4[3] >> 1) - v4[2];
          type metadata accessor for FontGlyphVariant();
          if (v15 < v10) {
            goto LABEL_29;
          }
          swift_arrayInitWithCopy();
          if (v10)
          {
            uint64_t v16 = v4[2];
            BOOL v17 = __OFADD__(v16, v10);
            uint64_t v18 = v16 + v10;
            if (v17) {
              goto LABEL_30;
            }
            void v4[2] = v18;
          }
          goto LABEL_5;
        }
      }
      if (v10) {
        goto LABEL_27;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      if (v8 == v3)
      {
        swift_bridgeObjectRelease();
        return v4;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_65264(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FontGlyphVariant();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_6588C(&qword_816D0, (void (*)(uint64_t))type metadata accessor for FontGlyphVariant);
  uint64_t result = sub_68370();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_20B5C(v11, (uint64_t)v6);
      sub_631F4((uint64_t)v8, (uint64_t)v6);
      sub_20BC0((uint64_t)v8);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_653CC()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_65404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_60EB8(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(char ***)(v3 + 32));
}

uint64_t sub_65410()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_65420()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_65448(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_66CA4(2, 18, 1, 0) = v2;
  return swift_retain();
}

uint64_t sub_65458()
{
  return swift_release();
}

uint64_t sub_65460()
{
  swift_unknownObjectWeakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_65498()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v5 = (void *)swift_allocObject();
    uint64_t v5[2] = v4;
    v5[3] = 5000000;
    v5[4] = &v13;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_65994;
    *(void *)(v6 + 24) = v5;
    v12[4] = sub_65998;
    v12[5] = v6;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_6130C;
    uint64_t v12[3] = &unk_7BF98;
    uint64_t v7 = _Block_copy(v12);
    id v8 = v4;
    swift_retain();
    swift_release();
    objc_msgSend(v8, "enumerateAttribute:inRange:options:usingBlock:", NSFontAttributeName, v1, v2, 0, v7);
    _Block_release(v7);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v11 = v13;
      swift_release();
      v12[0] = v11;
      swift_bridgeObjectRetain();
      sub_4890(&qword_821E0);
      sub_68330();

      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v12[0] = _swiftEmptyArrayStorage;
    sub_4890(&qword_821E0);
    return sub_68330();
  }
  return result;
}

uint64_t sub_656CC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_656DC(uint64_t a1)
{
  sub_6591C(a1, (uint64_t)&v3);
  if (!v4) {
    return sub_A8C0((uint64_t)&v3, &qword_81378);
  }
  sub_2EC24(&v3, v5);
  sub_1462C((uint64_t)v5, (uint64_t)&v3);
  type metadata accessor for CTFont(0);
  swift_dynamicCast();
  sub_63480(&v3, v2);

  return sub_13338((uint64_t)v5);
}

uint64_t sub_65784()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_65794()
{
  unint64_t result = qword_821C0;
  if (!qword_821C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_821C0);
  }
  return result;
}

unint64_t sub_657E8()
{
  unint64_t result = qword_821D0;
  if (!qword_821D0)
  {
    sub_4FAC(&qword_821C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_821D0);
  }
  return result;
}

uint64_t sub_65844()
{
  return sub_6588C(&qword_81670, type metadata accessor for CTFont);
}

uint64_t sub_6588C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_658D4()
{
  return sub_6588C(&qword_81678, type metadata accessor for CTFont);
}

uint64_t sub_6591C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4890(&qword_81378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_65984()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_659B0()
{
  return sub_27F94();
}

id sub_659DC()
{
  id v0 = objc_allocWithZone((Class)UIView);
  return [v0 init];
}

void sub_65A14()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_67AB0();
  __chkstk_darwin(v2 - 8);
  long long v3 = *(void **)&v0[OBJC_IVAR___TypographyPanel_containerView];
  [v0 setView:v3];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR___TypographyPanel_model];
  id v5 = objc_allocWithZone((Class)type metadata accessor for TypographyPanelHostingController());
  swift_retain_n();
  sub_149D0();
  sub_149D4();
  swift_retain();
  swift_retain();
  uint64_t v6 = sub_67910();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = OBJC_IVAR___TypographyPanel_childController;
  id v8 = *(void **)&v1[OBJC_IVAR___TypographyPanel_childController];
  *(void *)&v1[OBJC_IVAR___TypographyPanel_childController] = v6;

  uint64_t v9 = *(void **)&v1[v7];
  if (!v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v10 = v9;
  sub_67AA0();
  sub_67900();

  uint64_t v11 = *(void **)&v1[v7];
  if (!v11)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  id v12 = [v11 view];
  if (!v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void **)&v1[v7];
  if (!v14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  [v14 willMoveToParentViewController:v1];
  if (!*(void *)&v1[v7])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v1, "addChildViewController:");
  [v3 addSubview:v13];
  uint64_t v15 = *(void **)&v1[v7];
  if (v15)
  {
    [v15 didMoveToParentViewController:v1];
    [v13 setTranslatesAutoresizingMaskIntoConstraints:0];
    uint64_t v33 = self;
    sub_4890(&qword_82200);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_6C870;
    id v17 = [v13 topAnchor];
    id v18 = [v3 safeAreaLayoutGuide];
    id v19 = [v18 topAnchor];

    id v20 = [v17 constraintEqualToAnchor:v19];
    *(void *)(v16 + 32) = v20;
    id v21 = [v13 bottomAnchor];
    id v22 = [v3 bottomAnchor];
    id v23 = [v21 constraintEqualToAnchor:v22];

    *(void *)(v16 + 4sub_66CA4(2, 18, 1, 0) = v23;
    id v24 = [v13 leadingAnchor];
    id v25 = [v3 safeAreaLayoutGuide];
    id v26 = [v25 leadingAnchor];

    id v27 = [v24 constraintEqualToAnchor:v26];
    *(void *)(v16 + 48) = v27;
    id v28 = [v13 trailingAnchor];
    id v29 = [v3 safeAreaLayoutGuide];
    id v30 = [v29 trailingAnchor];

    id v31 = [v28 constraintEqualToAnchor:v30];
    *(void *)(v16 + 56) = v31;
    sub_682F0();
    sub_2281C(0, &qword_82208);
    Class isa = sub_682B0().super.isa;
    swift_bridgeObjectRelease();
    [v33 activateConstraints:isa];

    swift_beginAccess();
    *(void *)(v4 + 24) = &off_7BFC0;
    swift_unknownObjectWeakAssign();
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t type metadata accessor for TypographyPanelHostingController()
{
  uint64_t result = qword_87C50;
  if (!qword_87C50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_65F98()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_66038()
{
  return swift_unknownObjectRelease();
}

void (*sub_66094(void *a1))(void **a1, char a2)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___TypographyPanel_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_66118;
}

void sub_66118(void **a1, char a2)
{
  long long v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t sub_66198(void *a1)
{
  sub_4890(&qword_80ED8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_693E0;
  id v4 = a1;
  id v5 = [v4 description];
  uint64_t v6 = sub_681A0();
  uint64_t v8 = v7;

  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 4sub_66CA4(2, 18, 1, 0) = v8;
  sub_135AC(0xD000000000000013, 0x8000000000074E40, 1, v3);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR___TypographyPanel_font);
  *(void *)(v1 + OBJC_IVAR___TypographyPanel_font) = v4;

  sub_4890(&qword_81698);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_693E0;
  *(void *)(v10 + 32) = sub_234A8(v4);
  *(void *)(v10 + 4sub_66CA4(2, 18, 1, 0) = v11;
  *(void *)(v10 + 48) = v12;
  *(void *)(v10 + 56) = v13;
  sub_26C3C((void *)v10);
  return swift_bridgeObjectRelease();
}

id sub_6634C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    NSString v6 = sub_68170();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithNibName:v6 bundle:a3];

  return v7;
}

id sub_663C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = OBJC_IVAR___TypographyPanel_model;
  type metadata accessor for TypographyPanelViewModel();
  uint64_t v8 = v3;
  *(void *)&v3[v7] = sub_27F94();
  uint64_t v9 = OBJC_IVAR___TypographyPanel_containerView;
  *(void *)&v8[v9] = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v8[OBJC_IVAR___TypographyPanel_childController] = 0;
  *(void *)&v8[OBJC_IVAR___TypographyPanel_font] = 0;
  swift_unknownObjectWeakInit();

  if (a2)
  {
    NSString v10 = sub_68170();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  v13.receiver = v8;
  v13.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v13, "initWithNibName:bundle:", v10, a3);

  return v11;
}

id sub_66544(void *a1)
{
  id v3 = [objc_allocWithZone(v1) initWithCoder:a1];

  return v3;
}

id sub_66588(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = OBJC_IVAR___TypographyPanel_model;
  type metadata accessor for TypographyPanelViewModel();
  id v5 = v1;
  *(void *)&v1[v4] = sub_27F94();
  uint64_t v6 = OBJC_IVAR___TypographyPanel_containerView;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)UIView) init];
  *(void *)&v5[OBJC_IVAR___TypographyPanel_childController] = 0;
  *(void *)&v5[OBJC_IVAR___TypographyPanel_font] = 0;
  swift_unknownObjectWeakInit();

  v9.receiver = v5;
  v9.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

void sub_66718()
{
}

void sub_66774(char a1)
{
  v16.receiver = v1;
  v16.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v16, "viewWillAppear:", a1 & 1);
  id v3 = [v1 view];
  if (!v3) {
    goto LABEL_18;
  }
  uint64_t v4 = v3;
  id v5 = [v3 subviews];

  sub_2281C(0, &qword_82288);
  unint64_t v6 = sub_682D0();

  if (!(v6 >> 62))
  {
    if (*(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8))) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_68630();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_11;
  }
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v7 = (id)sub_68560();
    goto LABEL_7;
  }
  if (!*(void *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFFF8)))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id v7 = *(id *)(v6 + 32);
LABEL_7:
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  self;
  objc_super v9 = (void *)swift_dynamicCastObjCClass();
  if (v9)
  {
    NSString v10 = v9;
    [v9 setClipsToBounds:0];
    [v10 setInsetsLayoutMarginsFromSafeArea:0];
  }

LABEL_12:
  id v12 = [v1 view];
  if (!v12)
  {
LABEL_19:
    __break(1u);
    return;
  }
  objc_super v13 = v12;
  id v14 = [v12 superview];

  if (v14)
  {
    id v15 = [self systemGroupedBackgroundColor];
    [v14 setBackgroundColor:v15];
  }
}

void sub_66980(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_66774(a3);
}

id sub_669D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_66A0C()
{
}

void sub_66A3C()
{
}

uint64_t sub_66A6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR___TypographyPanel_font;
  id v4 = *(void **)(v1 + OBJC_IVAR___TypographyPanel_font);
  if (v4)
  {
    id v6 = v4;
    CTFontRef v7 = sub_6081C(a1);

    id v4 = *(void **)(v2 + v3);
  }
  else
  {
    CTFontRef v7 = 0;
  }
  *(void *)(v2 + v3) = v7;

  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    objc_super v9 = (void *)result;
    id v10 = *(id *)(v2 + v3);
    [v9 typographyPanelDidUpdateWithFont:v10];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for UITypographyViewController()
{
  return self;
}

uint64_t sub_66B60()
{
  return swift_initClassMetadata2();
}

uint64_t sub_66BA0()
{
  return type metadata accessor for TypographyPanelHostingController();
}

BOOL sub_66BA8(int a1, int a2, int a3)
{
  if (qword_87C70 == -1)
  {
    BOOL v6 = dword_87C60 < a1;
    if (dword_87C60 > a1) {
      return 1;
    }
  }
  else
  {
    dispatch_once_f(&qword_87C70, 0, (dispatch_function_t)sub_66C9C);
    BOOL v6 = dword_87C60 < a1;
    if (dword_87C60 > a1) {
      return 1;
    }
  }
  if (v6) {
    return 0;
  }
  if (dword_87C64 > a2) {
    return 1;
  }
  return dword_87C64 >= a2 && dword_87C68 >= a3;
}

uint64_t sub_66C9C()
{
  return sub_66E48(1);
}

uint64_t sub_66CA4(uint64_t a1, int a2, int a3, int a4)
{
  if (qword_87C78 == -1)
  {
    if (qword_87C80) {
      return _availability_version_check();
    }
  }
  else
  {
    dispatch_once_f(&qword_87C78, 0, (dispatch_function_t)sub_66E40);
    if (qword_87C80) {
      return _availability_version_check();
    }
  }
  if (qword_87C70 == -1)
  {
    BOOL v8 = dword_87C60 < a2;
    if (dword_87C60 > a2) {
      return 1;
    }
  }
  else
  {
    dispatch_once_f(&qword_87C70, 0, (dispatch_function_t)sub_66C9C);
    BOOL v8 = dword_87C60 < a2;
    if (dword_87C60 > a2) {
      return 1;
    }
  }
  if (v8) {
    return 0;
  }
  if (dword_87C64 > a3) {
    return 1;
  }
  return dword_87C64 >= a3 && dword_87C68 >= a4;
}

uint64_t sub_66E40()
{
  return sub_66E48(0);
}

uint64_t sub_66E48(uint64_t result)
{
  uint64_t v1 = (uint64_t (**)(void))qword_87C80;
  if (qword_87C80) {
    BOOL v2 = result == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    if (&__availability_version_check)
    {
      uint64_t v1 = &__availability_version_check;
      qword_87C80 = (uint64_t)&__availability_version_check;
    }
    if (!v1 || result != 0)
    {
      uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        id v4 = *(unsigned __int8 **)result;
        uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          id v5 = (uint64_t (*)(void))result;
          unint64_t v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            CTFontRef v7 = (uint64_t (*)(void, uint64_t, void, void))result;
            uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              BOOL v8 = (uint64_t (*)(void, const char *, uint64_t, unsigned __int8 *))result;
              uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                objc_super v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  id v10 = (uint64_t (*)(uint64_t))result;
                  uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    uint64_t v11 = (uint64_t (*)(void))result;
                    uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    id v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      uint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        id v12 = (FILE *)result;
                        uint64_t result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          objc_super v13 = (FILE *)result;
                          id v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          uint64_t v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            objc_super v16 = 0;
                          }
                          else
                          {
                            size_t v15 = v14;
                            rewind(v13);
                            objc_super v16 = malloc(v15);
                            if (v16)
                            {
                              id v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                uint64_t v17 = v5(0);
                                if (v17)
                                {
                                  uint64_t v18 = v17;
                                  id v19 = v13;
                                  if (v6) {
                                    uint64_t v20 = ((uint64_t (*)(void, uint64_t, void, void, void))v6)(0, v17, 0, 0, 0);
                                  }
                                  else {
                                    uint64_t v20 = v7(0, v17, 0, 0);
                                  }
                                  uint64_t v21 = v20;
                                  if (v20)
                                  {
                                    uint64_t v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      uint64_t v23 = v22;
                                      uint64_t v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        uint64_t v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984)) {
                                            sscanf(v29, "%d.%d.%d", &dword_87C60, &dword_87C64, &dword_87C68);
                                          }
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    id v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  id v19 = v13;
                                }
                                objc_super v16 = v26;
                              }
                              else
                              {
                                objc_super v16 = v26;
                                id v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          id v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_67180()
{
  return NSNotFound.getter();
}

uint64_t sub_67190()
{
  return CharacterSet.subtracting(_:)();
}

uint64_t sub_671A0()
{
  return CharacterSet.init(charactersIn:)();
}

uint64_t sub_671B0()
{
  return static CharacterSet.whitespacesAndNewlines.getter();
}

uint64_t sub_671C0()
{
  return CharacterSet.union(_:)();
}

uint64_t sub_671D0()
{
  return static CharacterSet.symbols.getter();
}

uint64_t sub_671E0()
{
  return CharacterSet.contains(_:)();
}

uint64_t sub_671F0()
{
  return type metadata accessor for CharacterSet();
}

uint64_t sub_67200()
{
  return AttributeScopes.UIKitAttributes.font.getter();
}

uint64_t sub_67210()
{
  return type metadata accessor for AttributeScopes.UIKitAttributes();
}

uint64_t sub_67220()
{
  return AttributeScopes.uiKit.getter();
}

uint64_t sub_67230()
{
  return AttributedString.Runs.Run.attributes.getter();
}

uint64_t sub_67240()
{
  return type metadata accessor for AttributedString();
}

uint64_t sub_67250(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  return NSLocalizedString(_:tableName:bundle:value:comment:)(_, tableName, bundle, value, comment)._countAndFlagsBits;
}

uint64_t sub_67260()
{
  return AttributeContainer.subscript.getter();
}

uint64_t sub_67270()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t sub_67280()
{
  return _convertNSErrorToError(_:)();
}

uint64_t sub_67290()
{
  return ScopedAttributeContainer.subscript.getter();
}

uint64_t sub_672A0()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_672B0()
{
  return UUID.init()();
}

uint64_t sub_672C0()
{
  return type metadata accessor for UUID();
}

uint64_t sub_672D0()
{
  return static Locale.preferredLanguages.getter();
}

uint64_t sub_672E0()
{
  return static Locale.current.getter();
}

uint64_t sub_672F0()
{
  return type metadata accessor for Locale();
}

uint64_t sub_67300()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_67310()
{
  return _CFObject.hash(into:)();
}

uint64_t sub_67320()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_67330()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_67340()
{
  return Logger.logObject.getter();
}

uint64_t sub_67350()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_67360()
{
  return type metadata accessor for Logger();
}

uint64_t sub_67370()
{
  return UIBackgroundConfiguration.backgroundColor.setter();
}

uint64_t sub_67380()
{
  return UIContentUnavailableConfiguration.background.modify();
}

uint64_t sub_67390()
{
  return UIContentUnavailableConfiguration.secondaryText.setter();
}

uint64_t sub_673A0()
{
  return static UIContentUnavailableConfiguration.empty()();
}

uint64_t sub_673B0()
{
  return type metadata accessor for UIContentUnavailableConfiguration();
}

uint64_t sub_673C0()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t sub_673D0()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t sub_673E0()
{
  return Published.init(initialValue:)();
}

uint64_t sub_673F0()
{
  return Published.projectedValue.getter();
}

uint64_t sub_67400()
{
  return Published.projectedValue.setter();
}

uint64_t sub_67410()
{
  return static Published.subscript.modify();
}

uint64_t sub_67420()
{
  return static Published.subscript.getter();
}

uint64_t sub_67430()
{
  return static Published.subscript.setter();
}

uint64_t sub_67440()
{
  return type metadata accessor for Published();
}

uint64_t sub_67450()
{
  return Animatable<>.animatableData.modify();
}

uint64_t sub_67460()
{
  return static Animatable<>._makeAnimatable(value:inputs:)();
}

uint64_t sub_67470()
{
  return AppStorage.wrappedValue.getter();
}

uint64_t sub_67480()
{
  return AppStorage.wrappedValue.setter();
}

uint64_t sub_67490()
{
  return AppStorage.projectedValue.getter();
}

uint64_t sub_674A0()
{
  return AppStorage<A>.init(wrappedValue:_:store:)();
}

uint64_t sub_674B0()
{
  return EdgeInsets.init(_all:)();
}

uint64_t sub_674C0()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t sub_674D0()
{
  return ContextMenu.init(menuItems:)();
}

uint64_t sub_674E0()
{
  return type metadata accessor for Environment.Content();
}

uint64_t sub_674F0()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t sub_67500()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t sub_67510()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_67520()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t sub_67530()
{
  return AnyTransition.init<A>(_:)();
}

uint64_t sub_67540()
{
  return withAnimation<A>(_:_:)();
}

uint64_t sub_67550()
{
  return static EnvironmentKey._valuesEqual(_:_:)();
}

uint64_t sub_67570()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t sub_67590()
{
  return ViewDimensions.height.getter();
}

uint64_t sub_675A0()
{
  return ViewDimensions.subscript.getter();
}

uint64_t sub_675B0()
{
  return static LayoutDirection.== infix(_:_:)();
}

uint64_t sub_675C0()
{
  return type metadata accessor for LayoutDirection();
}

uint64_t sub_675D0()
{
  return type metadata accessor for ModifiedContent();
}

uint64_t sub_675E0()
{
  return PlainButtonStyle.init()();
}

uint64_t sub_675F0()
{
  return type metadata accessor for PlainButtonStyle();
}

uint64_t sub_67600()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t sub_67610()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t sub_67620()
{
  return static ButtonBorderShape.roundedRectangle.getter();
}

uint64_t sub_67630()
{
  return type metadata accessor for ButtonBorderShape();
}

uint64_t sub_67650()
{
  return EnvironmentObject.error()();
}

uint64_t sub_67660()
{
  return EnvironmentObject.init()();
}

uint64_t sub_67670()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t sub_67680()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_67690()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_676A0()
{
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t sub_676B0()
{
  return EnvironmentValues.allowsTightening.getter();
}

uint64_t sub_676C0()
{
  return EnvironmentValues.allowsTightening.setter();
}

uint64_t sub_676D0()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t sub_676E0()
{
  return EnvironmentValues._buttonBorderShape.setter();
}

uint64_t sub_676F0()
{
  return EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_67700()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_67710()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t sub_67720()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_67730()
{
  return EnvironmentValues.font.getter();
}

uint64_t sub_67740()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_67750()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t sub_67760()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_67770()
{
  return EnvironmentValues.init()();
}

uint64_t sub_67780()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t sub_67790()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t sub_677A0()
{
  return EnvironmentValues.subscript.setter();
}

uint64_t sub_677B0()
{
  return OpacityTransition.init()();
}

uint64_t sub_677C0()
{
  return type metadata accessor for OpacityTransition();
}

uint64_t sub_677D0()
{
  return SwitchToggleStyle.init()();
}

uint64_t sub_677E0()
{
  return type metadata accessor for SwitchToggleStyle();
}

uint64_t sub_677F0()
{
  return static VerticalAlignment.lastTextBaseline.getter();
}

uint64_t sub_67800()
{
  return static VerticalAlignment.firstTextBaseline.getter();
}

uint64_t sub_67810()
{
  return static VerticalAlignment.bottom.getter();
}

uint64_t sub_67820()
{
  return static VerticalAlignment.center.getter();
}

uint64_t sub_67830()
{
  return type metadata accessor for ColorRenderingMode();
}

uint64_t sub_67840()
{
  return LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

void sub_67850(Swift::String a1)
{
}

uint64_t sub_67860()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t sub_67870()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t sub_67880()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_67890()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t sub_678A0()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t sub_678B0()
{
  return static HorizontalAlignment.listRowSeparatorLeading.getter();
}

uint64_t sub_678C0()
{
  return static HorizontalAlignment.== infix(_:_:)();
}

uint64_t sub_678D0()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t sub_678E0()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t sub_678F0()
{
  return static HorizontalAlignment.trailing.getter();
}

uint64_t sub_67900()
{
  return dispatch thunk of UIHostingController.sizingOptions.setter();
}

uint64_t sub_67910()
{
  return UIHostingController.init(rootView:)();
}

uint64_t sub_67920()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t sub_67930()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t sub_67940()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_67960()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t sub_67970()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t sub_67980()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t sub_67990()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t sub_679A0()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t sub_679B0()
{
  return UIViewRepresentable.body.getter();
}

uint64_t sub_679D0()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t sub_679E0()
{
  return type metadata accessor for _ConditionalContent.Storage();
}

uint64_t sub_679F0()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_67A00()
{
  return type metadata accessor for _ConditionalContent();
}

uint64_t sub_67A10()
{
  return BorderlessButtonStyle.init()();
}

uint64_t sub_67A20()
{
  return type metadata accessor for BorderlessButtonStyle();
}

uint64_t sub_67A30()
{
  return InsetGroupedListStyle.init()();
}

uint64_t sub_67A40()
{
  return type metadata accessor for InsetGroupedListStyle();
}

uint64_t sub_67A50()
{
  return type metadata accessor for PinnedScrollableViews();
}

uint64_t sub_67A60()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t sub_67A70()
{
  return static HierarchicalShapeStyle.tertiary.getter();
}

uint64_t sub_67A80()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t sub_67A90()
{
  return type metadata accessor for PopoverAttachmentAnchor();
}

uint64_t sub_67AA0()
{
  return static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
}

uint64_t sub_67AB0()
{
  return type metadata accessor for UIHostingControllerSizingOptions();
}

uint64_t sub_67AC0()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_67AD0()
{
  return static Axis.Set.vertical.getter();
}

uint64_t sub_67AE0()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t sub_67AF0()
{
  return static Edge.Set.all.getter();
}

uint64_t sub_67B00()
{
  return static Edge.Set.vertical.getter();
}

uint64_t sub_67B10()
{
  return Edge.Set.init(_:)();
}

uint64_t sub_67B20()
{
  return Font.monospaced()();
}

uint64_t sub_67B30()
{
  return type metadata accessor for Font.Design();
}

uint64_t sub_67B40()
{
  return static Font.Weight.regular.getter();
}

uint64_t sub_67B50()
{
  return static Font.Weight.semibold.getter();
}

uint64_t sub_67B60()
{
  return static Font.system(size:weight:design:)();
}

uint64_t sub_67B70()
{
  return static Font.title2.getter();
}

uint64_t sub_67B80()
{
  return Font.init(_:)();
}

uint64_t sub_67B90()
{
  return List<>.init(content:)();
}

uint64_t sub_67BA0()
{
  return Path.init()();
}

uint64_t sub_67BB0()
{
  return Path.init(_:)();
}

uint64_t sub_67BC0()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t sub_67BD0()
{
  return Text.font(_:)();
}

uint64_t sub_67BE0()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t sub_67BF0()
{
  return Text.init(_:)();
}

uint64_t sub_67C00()
{
  return Text.init<A>(_:)();
}

uint64_t sub_67C10()
{
  return static View._makeView(view:inputs:)();
}

uint64_t sub_67C20()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t sub_67C30()
{
  return View.fontWeight(_:)();
}

uint64_t sub_67C40()
{
  return View.buttonStyle<A>(_:)();
}

uint64_t sub_67C50()
{
  return View.contextMenu<A>(_:)();
}

uint64_t sub_67C60()
{
  return View.environment<A>(_:_:)();
}

uint64_t sub_67C70()
{
  return View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)();
}

uint64_t sub_67C80()
{
  return View.toggleStyle<A>(_:)();
}

uint64_t sub_67C90()
{
  return View.contentShape<A>(_:eoFill:)();
}

uint64_t sub_67CA0()
{
  return View.drawingGroup(opaque:colorMode:)();
}

uint64_t sub_67CB0()
{
  return View.labelsHidden()();
}

uint64_t sub_67CC0()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t sub_67CD0()
{
  return View.listRowInsets(_:)();
}

uint64_t sub_67CE0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_67CF0()
{
  return View.alignmentGuide(_:computeValue:)();
}

uint64_t sub_67D00()
{
  return View.foregroundStyle<A>(_:)();
}

uint64_t sub_67D10()
{
  return View.compositingGroup()();
}

uint64_t sub_67D20()
{
  return View.listRowBackground<A>(_:)();
}

uint64_t sub_67D30()
{
  return View.accessibilityLabel<A>(_:)();
}

uint64_t sub_67D40()
{
  return View.minimumScaleFactor(_:)();
}

uint64_t sub_67D50()
{
  return View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)();
}

uint64_t sub_67D60()
{
  return View.listHasStackBehavior()();
}

uint64_t sub_67D70()
{
  return View.help(_:)();
}

uint64_t sub_67D80()
{
  return View.frame(width:height:alignment:)();
}

uint64_t sub_67D90()
{
  return View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t sub_67DA0()
{
  return View.padding(_:)();
}

uint64_t sub_67DB0()
{
  return View.padding(_:_:)();
}

uint64_t sub_67DC0()
{
  return View.clipShape<A>(_:style:)();
}

uint64_t sub_67DD0()
{
  return View.fixedSize(horizontal:vertical:)();
}

uint64_t sub_67DE0()
{
  return View.lineLimit(_:)();
}

uint64_t sub_67DF0()
{
  return View.listStyle<A>(_:)();
}

uint64_t sub_67E00()
{
  return Color.init(uiColor:)();
}

uint64_t sub_67E10()
{
  return static Color.accentColor.getter();
}

uint64_t sub_67E20()
{
  return static Color.clear.getter();
}

uint64_t sub_67E30()
{
  return static Color.white.getter();
}

uint64_t sub_67E40()
{
  return Color.opacity(_:)();
}

uint64_t sub_67E50()
{
  return static Color.primary.getter();
}

uint64_t sub_67E60()
{
  return static Color.secondary.getter();
}

uint64_t sub_67E70()
{
  return Color.init(_:)();
}

uint64_t sub_67E80()
{
  return Group<A>.init(content:)();
}

uint64_t sub_67E90()
{
  return type metadata accessor for Group();
}

uint64_t sub_67EA0()
{
  return Image.init(systemName:)();
}

uint64_t sub_67ED0()
{
  return Shape.layoutDirectionBehavior.getter();
}

uint64_t sub_67EF0()
{
  return static Shape.role.getter();
}

uint64_t sub_67F10()
{
  return State.init(wrappedValue:)();
}

uint64_t sub_67F20()
{
  return State.wrappedValue.getter();
}

uint64_t sub_67F30()
{
  return State.wrappedValue.setter();
}

uint64_t sub_67F40()
{
  return State.projectedValue.getter();
}

uint64_t sub_67F50()
{
  return static Anchor.Source<A>.bounds.getter();
}

uint64_t sub_67F60()
{
  return Button.init(action:label:)();
}

uint64_t sub_67F70()
{
  return Button<>.init<A>(_:action:)();
}

uint64_t sub_67F80()
{
  return HStack.init(alignment:spacing:content:)();
}

uint64_t sub_67F90()
{
  return type metadata accessor for HStack();
}

uint64_t sub_67FA0()
{
  return Toggle.init(isOn:label:)();
}

uint64_t sub_67FB0()
{
  return VStack.init(alignment:spacing:content:)();
}

uint64_t sub_67FC0()
{
  return type metadata accessor for VStack();
}

uint64_t sub_67FD0()
{
  return Binding.wrappedValue.getter();
}

uint64_t sub_67FE0()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_67FF0()
{
  return Binding.projectedValue.getter();
}

uint64_t sub_68000()
{
  return Binding.init(get:set:)();
}

uint64_t sub_68010()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_68020()
{
  return ForEach<>.init(_:content:)();
}

uint64_t sub_68030()
{
  return Section<>.init<A>(_:content:)();
}

uint64_t sub_68040()
{
  return type metadata accessor for Section();
}

uint64_t sub_68050()
{
  return type metadata accessor for GridItem.Size();
}

uint64_t sub_68060()
{
  return type metadata accessor for GridItem();
}

uint64_t sub_68070()
{
  return GridItem.init(_:spacing:alignment:)();
}

uint64_t sub_68080()
{
  return static Alignment.bottom.getter();
}

uint64_t sub_68090()
{
  return static Alignment.center.getter();
}

uint64_t sub_680A0()
{
  return static Alignment.leading.getter();
}

uint64_t sub_680B0()
{
  return static Alignment.trailing.getter();
}

uint64_t sub_680C0()
{
  return Animation.speed(_:)();
}

uint64_t sub_680D0()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t sub_680E0()
{
  return static Animation.default.getter();
}

uint64_t sub_680F0()
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)();
}

uint64_t sub_68100()
{
  return type metadata accessor for TupleView();
}

uint64_t sub_68110()
{
  return TupleView.init(_:)();
}

NSDictionary sub_68120()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_68130()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t sub_68140()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_68150()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_68160()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString sub_68170()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_68180()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_68190()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_681A0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_681B0()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_681C0()
{
  return String.utf8CString.getter();
}

uint64_t sub_681D0()
{
  return static String._fromSubstring(_:)();
}

uint64_t sub_681E0()
{
  return String.hash(into:)();
}

uint64_t sub_681F0()
{
  return String.count.getter();
}

uint64_t sub_68200()
{
  return String.index(_:offsetBy:limitedBy:)();
}

void sub_68210(Swift::String a1)
{
}

uint64_t sub_68220()
{
  return String.Iterator.next()().value._countAndFlagsBits;
}

Swift::Int sub_68230()
{
  return String.UTF8View._foreignCount()();
}

Swift::Int sub_68240()
{
  return String.UTF16View._foreignCount()();
}

uint64_t sub_68250()
{
  return String.UTF16View._nativeGetOffset(for:)();
}

BOOL sub_68260(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

uint64_t sub_68270()
{
  return String.subscript.getter();
}

uint64_t sub_68280()
{
  return String.init<A>(_:)();
}

uint64_t sub_682A0()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray sub_682B0()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_682C0()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_682D0()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_682E0()
{
  return Array.description.getter();
}

uint64_t sub_682F0()
{
  return specialized Array._endMutation()();
}

uint64_t sub_68300()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_68310()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t sub_68320()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_68330()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_68340()
{
  return static MainActor.shared.getter();
}

uint64_t sub_68350()
{
  return type metadata accessor for MainActor();
}

uint64_t sub_68360()
{
  return Double.description.getter();
}

uint64_t sub_68370()
{
  return Set.init(minimumCapacity:)();
}

uint64_t sub_68380()
{
  return Range<>.init(_:in:)();
}

uint64_t sub_68390()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_683A0()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_683B0()
{
  return static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
}

uint64_t sub_683C0()
{
  return UIContentUnavailableView.init(configuration:)();
}

uint64_t sub_683D0()
{
  return _NSRange.init<A, B>(_:in:)();
}

uint64_t sub_683E0()
{
  return type metadata accessor for Optional();
}

uint64_t sub_683F0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_68400()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t sub_68410()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t sub_68420()
{
  return StringProtocol.range<A>(of:options:range:locale:)();
}

uint64_t sub_68430()
{
  return StringProtocol.compare<A>(_:options:range:locale:)();
}

uint64_t sub_68440()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t sub_68450()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t sub_68460()
{
  return dispatch thunk of SetAlgebra.insert(_:)();
}

uint64_t sub_68470()
{
  return dispatch thunk of SetAlgebra.init()();
}

uint64_t sub_68480()
{
  return _HashTable.previousHole(before:)();
}

uint64_t sub_68490()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t sub_684A0()
{
  return __CocoaSet.makeIterator()();
}

uint64_t sub_684B0()
{
  return __CocoaSet.count.getter();
}

uint64_t sub_684C0()
{
  return __CocoaSet.member(for:)();
}

uint64_t sub_684D0()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t sub_684E0()
{
  return __CocoaSet.contains(_:)();
}

uint64_t sub_684F0()
{
  return static _SetStorage.copy(original:)();
}

uint64_t sub_68500()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t sub_68510()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t sub_68520()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t sub_68530()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

void sub_68540(Swift::Int a1)
{
}

uint64_t sub_68550()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t sub_68560()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_68570()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t sub_68580()
{
  return type metadata accessor for DecodingError();
}

uint64_t sub_68590()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_685A0()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t sub_685B0()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_685C0()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_685D0()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_685E0()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_685F0()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_68600()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t sub_68610()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_68620()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_68630()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_68640()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t sub_68650()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t sub_68660()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_68670()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int sub_68690(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

uint64_t sub_686A0()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_686B0()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t sub_686C0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_686D0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_686E0()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_686F0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_68700()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t sub_68710()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_68720()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_68730()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_68740()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_68750()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

Swift::Int sub_68760(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t sub_68770()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_68790()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_687A0()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t sub_687B0()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_687C0()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_687D0()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t sub_687E0()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t sub_687F0()
{
  return Hasher.init(_seed:)();
}

void sub_68800(Swift::UInt a1)
{
}

void sub_68810(Swift::UInt16 a1)
{
}

void sub_68820(Swift::UInt64 a1)
{
}

Swift::Int sub_68830()
{
  return Hasher._finalize()();
}

uint64_t sub_68840()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_68850()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_68860()
{
  return Unicode.Scalar.UTF16View.subscript.getter();
}

uint64_t sub_68890()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

CFIndex CFBitVectorGetCount(CFBitVectorRef bv)
{
  return _CFBitVectorGetCount(bv);
}

CFIndex CFBitVectorGetFirstIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return _CFBitVectorGetFirstIndexOfBit(bv, range, value);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformConcat(retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return _CGPathIsEmpty(path);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CFStringRef CTFontCopyDisplayName(CTFontRef font)
{
  return _CTFontCopyDisplayName(font);
}

CFArrayRef CTFontCopyFeatureSettings(CTFontRef font)
{
  return _CTFontCopyFeatureSettings(font);
}

CFArrayRef CTFontCopyFeatures(CTFontRef font)
{
  return _CTFontCopyFeatures(font);
}

CTFontDescriptorRef CTFontCopyFontDescriptor(CTFontRef font)
{
  return _CTFontCopyFontDescriptor(font);
}

uint64_t CTFontCopyGlyphCoverageForFeature()
{
  return _CTFontCopyGlyphCoverageForFeature();
}

CFStringRef CTFontCopyPostScriptName(CTFontRef font)
{
  return _CTFontCopyPostScriptName(font);
}

uint64_t CTFontCopySampleStringWithLanguages()
{
  return _CTFontCopySampleStringWithLanguages();
}

uint64_t CTFontCopyStringForGlyph()
{
  return _CTFontCopyStringForGlyph();
}

uint64_t CTFontCopyVariantsOfGlyph()
{
  return _CTFontCopyVariantsOfGlyph();
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return _CTFontCreateCopyWithAttributes(font, size, matrix, attributes);
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  return _CTFontCreatePathForGlyph(font, glyph, matrix);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return _CTFontCreateWithFontDescriptor(descriptor, size, matrix);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef original, CFDictionaryRef attributes)
{
  return _CTFontDescriptorCreateCopyWithAttributes(original, attributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return _CTFontDescriptorCreateWithAttributes(attributes);
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  return _CTFontGetAscent(font);
}

CGRect CTFontGetBoundingRectsForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count)
{
  return _CTFontGetBoundingRectsForGlyphs(font, orientation, glyphs, boundingRects, count);
}

CGFloat CTFontGetCapHeight(CTFontRef font)
{
  return _CTFontGetCapHeight(font);
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  return _CTFontGetDescent(font);
}

CFIndex CTFontGetGlyphCount(CTFontRef font)
{
  return _CTFontGetGlyphCount(font);
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return _CTFontGetGlyphsForCharacters(font, characters, glyphs, count);
}

CGFloat CTFontGetLeading(CTFontRef font)
{
  return _CTFontGetLeading(font);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  return _CTFontGetSize(font);
}

uint64_t CTFontHasTable()
{
  return _CTFontHasTable();
}

uint64_t CTFontTransformGlyphs()
{
  return _CTFontTransformGlyphs();
}

CTGlyphInfoRef CTGlyphInfoCreateWithGlyph(CGGlyph glyph, CTFontRef font, CFStringRef baseString)
{
  return _CTGlyphInfoCreateWithGlyph(glyph, font, baseString);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return _CTLineCreateWithAttributedString(attrString);
}

uint64_t CTLineCreateWithString()
{
  return _CTLineCreateWithString();
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return _CTLineGetGlyphRuns(line);
}

uint64_t CTRunGetFont()
{
  return _CTRunGetFont();
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return _CTRunGetGlyphCount(run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

CFRange CTRunGetStringRange(CTRunRef run)
{
  CFRange StringRange = _CTRunGetStringRange(run);
  CFIndex length = StringRange.length;
  CFIndex location = StringRange.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _availability_version_check()
{
  return __availability_version_check();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return _fseek(a1, a2, a3);
}

uint64_t ftell(FILE *a1)
{
  return _ftell(a1);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

void rewind(FILE *a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeMetadata()
{
  return _swift_getTupleTypeMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unownedRelease()
{
  return _swift_unownedRelease();
}

uint64_t swift_unownedRetain()
{
  return _swift_unownedRetain();
}

uint64_t swift_unownedRetainStrong()
{
  return _swift_unownedRetainStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}